void *sub_AD76D0(void *result)
{
  int v1;
  _DWORD *v2;
  _DWORD **v3;
  _DWORD **v4;
  _DWORD **v5;
  _DWORD **v6;
  _DWORD **v7;
  int v8;
  _DWORD **v9;
  _DWORD **v10;
  _DWORD **v11;
  _DWORD **v12;
  _DWORD **v13;
  _DWORD *v14;
  _DWORD **v15;
  int v16;

  if (result[1] == result[5])
  {
    v7 = (_DWORD **)result[2];
    if (v7 == (_DWORD **)result[6])
    {
      v12 = (_DWORD **)result[7];
      v13 = (_DWORD **)result[3];
LABEL_30:
      while (v13 != v12 || v12 != v7 && result[4] != result[8])
      {
        if (!*(void *)(*result + 40)) {
          break;
        }
        v14 = (_DWORD *)result[4];
        if (*(_DWORD *)(*result + 32) != *v14) {
          break;
        }
        result[4] = v14 + 2;
        if (v14 + 2 == &(*v13)[2 * *((unsigned __int16 *)v13 + 4)])
        {
          v15 = v13 + 2;
          while (v15 != v7)
          {
            result[4] = *v15;
            v16 = *((unsigned __int16 *)v15 + 4);
            v15 += 2;
            if (v16)
            {
              v13 = v15 - 2;
              result[3] = v13;
              goto LABEL_30;
            }
          }
          v13 = v7;
          result[3] = v7;
        }
      }
    }
    else if (*(void *)(*result + 40))
    {
      v8 = *(_DWORD *)(*result + 32);
      v2 = (_DWORD *)result[4];
      if (v8 == *v2)
      {
        v9 = (_DWORD **)result[3];
        do
        {
          v2 += 2;
          if (v2 == &(*v9)[2 * *((unsigned __int16 *)v9 + 4)])
          {
            v10 = v9 + 2;
            v9 = v7;
            if (v10 != v7)
            {
              do
              {
                v11 = v10;
                if (*((_WORD *)v10 + 4))
                {
                  v9 = v10;
                  goto LABEL_19;
                }
                v10 += 2;
              }
              while (v11 + 2 != v7);
              v9 = v7;
LABEL_19:
              v2 = *v11;
            }
            result[3] = v9;
          }
        }
        while (v8 == *v2);
        goto LABEL_27;
      }
    }
  }
  else if (*(void *)(*result + 40))
  {
    v1 = *(_DWORD *)(*result + 32);
    v2 = (_DWORD *)result[4];
    if (v1 == *v2)
    {
      v3 = (_DWORD **)result[3];
      do
      {
        v2 += 2;
        if (v2 == &(*v3)[2 * *((unsigned __int16 *)v3 + 4)])
        {
          v4 = (_DWORD **)result[2];
          v5 = v3 + 2;
          if (v5 != v4)
          {
            while (1)
            {
              v6 = v5;
              if (*((_WORD *)v5 + 4)) {
                break;
              }
              v5 += 2;
              if (v6 + 2 == v4) {
                goto LABEL_6;
              }
            }
            v4 = v5;
LABEL_6:
            v2 = *v6;
          }
          result[3] = v4;
          v3 = v4;
        }
      }
      while (v1 == *v2);
LABEL_27:
      result[4] = v2;
    }
  }
  return result;
}

void sub_AD78A4(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = a1;
  unsigned int v222 = a3;
  *(double *)(a1 + 656) = *(double *)(a1 + 656) + 1.0;
  unint64_t v4 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 56) + 88), a3);
  unsigned int v204 = *(_DWORD *)sub_A3F74C((void *)(v3 + 360), &v222);
  uint64_t v205 = v4;
  sub_A40514(&v220, *(void *)(v3 + 40), v4);
  v5 = v220;
  if ((unint64_t)v220 < v221)
  {
    uint64_t v207 = v3 + 464;
    uint64_t v208 = v3;
    do
    {
      *(double *)(v3 + 664) = *(double *)(v3 + 664) + 1.0;
      uint64_t v206 = *(unsigned int *)v5;
      sub_A1E9A0((uint64_t)&v210, *(void *)(v3 + 40), v205, v204, 0, 1);
      v6 = v214;
      if ((unint64_t)v214 < v213 || (unint64_t)v214 >= v215) {
        goto LABEL_3;
      }
      char v209 = 0;
      do
      {
        uint64_t v8 = 0;
        unint64_t v9 = __ROR8__(*v6, 32);
        uint64_t v10 = *(void *)(v3 + 48);
        uint64_t v11 = *(void *)(v10 + 72) - 1;
        unint64_t v12 = 0xC4CEB9FE1A85EC53
            * ((0xFF51AFD7ED558CCDLL * (v9 ^ (v9 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v9 ^ (v9 >> 33))) >> 33));
        unint64_t v13 = v12 ^ (v12 >> 33);
        uint64_t v14 = *(void *)(v10 + 48);
        uint64_t v15 = v14 + 11;
        uint64_t v16 = -1;
        for (unint64_t i = v13; ; unint64_t i = v8 + v18)
        {
          uint64_t v18 = i & v11;
          unint64_t v19 = (i & v11) / 0x30;
          unint64_t v20 = v18 - 48 * v19;
          if (((*(unsigned __int8 *)(v14 + 16 * v19 + (v20 >> 3) + 10) >> (v20 & 7)) & 1) == 0)
          {
            if (v16 == -1) {
              unint64_t v56 = v18;
            }
            else {
              unint64_t v56 = v16;
            }
            if (!sub_AD2F40(v10, 1)) {
              goto LABEL_94;
            }
            goto LABEL_51;
          }
          uint64_t v21 = *(void *)(v14 + 16 * v19);
          if (!*(void *)(v10 + 40)) {
            break;
          }
          v22 = (unsigned __int8 *)(v14 + 16 * v19 + 10);
          if ((unsigned __int16)(v18 - 48 * v19) < 9u)
          {
            __int16 v23 = 0;
            LOBYTE(v28) = v18 - 48 * v19;
            goto LABEL_25;
          }
          __int16 v23 = 0;
          uint64_t v24 = (unsigned __int16)(v18 - 48 * v19 - 9) >> 3;
          if ((unsigned __int16)(v18 - 48 * v19 - 9) >> 3)
          {
            __int16 v25 = 0;
            uint64_t v26 = v24 + 1;
            uint64_t v27 = (v24 + 1) & 0x3FFE;
            unsigned __int16 v28 = v20 - 8 * v27;
            v29 = &v22[v27];
            v30 = (unsigned __int8 *)(v15 + 16 * v19);
            uint64_t v31 = v27;
            do
            {
              uint64_t v32 = *(v30 - 1);
              int v33 = *v30;
              v30 += 2;
              v23 += byte_20EBFB6[v32];
              v25 += byte_20EBFB6[v33];
              v31 -= 2;
            }
            while (v31);
            v23 += v25;
            if (v26 == v27) {
              goto LABEL_24;
            }
          }
          else
          {
            unsigned __int16 v28 = v18 - 48 * v19;
            v29 = (unsigned __int8 *)(v14 + 16 * v19 + 10);
          }
          do
          {
            int v34 = *v29++;
            v23 += byte_20EBFB6[v34];
            v28 -= 8;
          }
          while (v28 > 8u);
LABEL_24:
          v22 += ((unsigned __int16)(v20 - 9) >> 3) + 1;
LABEL_25:
          v35 = (_DWORD *)(v21
                         + 12
                         * (unsigned __int16)(v23 + byte_20EBFB6[~(-1 << v28) & (unint64_t)*v22]));
          if (*(_DWORD *)(v10 + 36) != v35[1] || *(_DWORD *)(v10 + 32) != *v35) {
            break;
          }
          if (v16 == -1) {
            uint64_t v16 = v18;
          }
LABEL_12:
          ++v8;
        }
        v37 = (unsigned __int8 *)(v14 + 16 * v19 + 10);
        if ((unsigned __int16)(v18 - 48 * v19) < 9u)
        {
          __int16 v38 = 0;
          v49 = (unsigned __int8 *)(v14 + 16 * v19 + 10);
          LOBYTE(v43) = v18 - 48 * v19;
          goto LABEL_39;
        }
        __int16 v38 = 0;
        uint64_t v39 = (unsigned __int16)(v18 - 48 * v19 - 9) >> 3;
        if (!((unsigned __int16)(v18 - 48 * v19 - 9) >> 3))
        {
          unsigned __int16 v43 = v18 - 48 * v19;
          v44 = (unsigned __int8 *)(v14 + 16 * v19 + 10);
          do
          {
LABEL_37:
            int v50 = *v44++;
            v38 += byte_20EBFB6[v50];
            v43 -= 8;
          }
          while (v43 > 8u);
          goto LABEL_38;
        }
        __int16 v40 = 0;
        uint64_t v41 = v39 + 1;
        uint64_t v42 = (v39 + 1) & 0x3FFE;
        unsigned __int16 v43 = v20 - 8 * v42;
        v44 = &v37[v42];
        v45 = (unsigned __int8 *)(v15 + 16 * v19);
        uint64_t v46 = v42;
        do
        {
          uint64_t v47 = *(v45 - 1);
          int v48 = *v45;
          v45 += 2;
          v38 += byte_20EBFB6[v47];
          v40 += byte_20EBFB6[v48];
          v46 -= 2;
        }
        while (v46);
        v38 += v40;
        if (v41 != v42) {
          goto LABEL_37;
        }
LABEL_38:
        v49 = &v37[((unsigned __int16)(v20 - 9) >> 3) + 1];
LABEL_39:
        if (v9 != *(void *)(v21
                             + 12
                             * (unsigned __int16)(v38 + byte_20EBFB6[~(-1 << v43) & (unint64_t)*v49])))
          goto LABEL_12;
        if (v18 != -1)
        {
          if ((unsigned __int16)(v18 - 48 * v19) < 9u)
          {
            __int16 v53 = 0;
            uint64_t v3 = v208;
          }
          else
          {
            if ((((_WORD)v18 - 48 * (_WORD)v19 - 8) & 0xFFF8) != 0) {
              __int16 v51 = 8;
            }
            else {
              __int16 v51 = v18 - 48 * v19 - 8;
            }
            unsigned __int16 v52 = ~v51 + v18 - 48 * v19;
            uint64_t v3 = v208;
            __int16 v53 = 0;
            if (v52 < 8u)
            {
              unsigned __int16 v54 = v20;
              v55 = (unsigned __int8 *)(v14 + 16 * v19 + 10);
              goto LABEL_99;
            }
            __int16 v101 = 0;
            uint64_t v102 = (v52 >> 3) + 1;
            unsigned __int16 v54 = v20 - 8 * (((v52 >> 3) + 1) & 0x3FFE);
            v55 = &v37[v102 & 0x3FFE];
            v103 = (unsigned __int8 *)(v14 + 16 * v19 + 11);
            uint64_t v104 = v102 & 0x3FFE;
            do
            {
              uint64_t v105 = *(v103 - 1);
              int v106 = *v103;
              v103 += 2;
              v53 += byte_20EBFB6[v105];
              v101 += byte_20EBFB6[v106];
              v104 -= 2;
            }
            while (v104);
            v53 += v101;
            if ((v102 & 0x3FFE) != v102)
            {
              do
              {
LABEL_99:
                int v107 = *v55++;
                v53 += byte_20EBFB6[v107];
                v54 -= 8;
              }
              while (v54 > 8u);
            }
            v37 += ((unsigned __int16)(v20 - 9) >> 3) + 1;
            LOBYTE(v20) = v54;
          }
          uint64_t v108 = *(void *)(v10 + 56);
          unsigned __int16 v109 = v53 + byte_20EBFB6[~(-1 << v20) & (unint64_t)*v37];
          uint64_t v110 = v14 + 16 * v19;
          if (*(unsigned __int16 *)(v110 + 8) != v109 || v110 + 16 == v108)
          {
            v100 = (_DWORD *)(v21 + 12 * v109);
          }
          else
          {
            uint64_t v112 = v110 + 32;
            do
            {
              if (*(_WORD *)(v112 - 8)) {
                BOOL v113 = 1;
              }
              else {
                BOOL v113 = v112 == v108;
              }
              v112 += 16;
            }
            while (!v113);
            v100 = *(_DWORD **)(v112 - 32);
          }
          goto LABEL_113;
        }
        unint64_t v56 = -1;
        if (!sub_AD2F40(v10, 1))
        {
LABEL_94:
          unint64_t v224 = v9;
          int v225 = -1;
          sub_AD3484(v10, (uint64_t *)&v224, v56, v226);
          v100 = v227;
          uint64_t v3 = v208;
          goto LABEL_113;
        }
LABEL_51:
        uint64_t v57 = 0;
        unint64_t v224 = v9;
        int v225 = -1;
        uint64_t v58 = *(void *)(v10 + 72) - 1;
        uint64_t v59 = *(void *)(v10 + 48);
        uint64_t v60 = v59 + 11;
        uint64_t v61 = -1;
        while (2)
        {
          uint64_t v62 = v13 & v58;
          unint64_t v63 = (v13 & v58) / 0x30;
          unint64_t v64 = (v13 & v58) % 0x30;
          if (((*(unsigned __int8 *)(v59 + 16 * v63 + (v64 >> 3) + 10) >> (v64 & 7)) & 1) == 0)
          {
            if (v61 == -1) {
              unint64_t v99 = v13 & v58;
            }
            else {
              unint64_t v99 = v61;
            }
            goto LABEL_92;
          }
          uint64_t v65 = *(void *)(v10 + 40);
          uint64_t v66 = *(void *)(v59 + 16 * v63);
          if (!v65) {
            break;
          }
          v67 = (unsigned __int8 *)(v59 + 16 * v63 + 10);
          if ((unsigned __int16)((v13 & v58) % 0x30) < 9u)
          {
            __int16 v68 = 0;
            LOBYTE(v69) = (v13 & v58) % 0x30;
            goto LABEL_67;
          }
          __int16 v68 = 0;
          uint64_t v69 = (unsigned __int16)(v62 - 48 * v63 - 9) >> 3;
          if (!((unsigned __int16)(v62 - 48 * v63 - 9) >> 3))
          {
            LODWORD(v69) = (v13 & v58) % 0x30;
            v73 = (unsigned __int8 *)(v59 + 16 * v63 + 10);
            do
            {
LABEL_65:
              int v78 = *v73++;
              v68 += byte_20EBFB6[v78];
              LOWORD(v69) = v69 - 8;
            }
            while ((unsigned __int16)v69 > 8u);
            goto LABEL_66;
          }
          __int16 v70 = 0;
          uint64_t v71 = v69 + 1;
          uint64_t v72 = (v69 + 1) & 0x3FFE;
          LOWORD(v69) = v64 - 8 * v72;
          v73 = &v67[v72];
          v74 = (unsigned __int8 *)(v60 + 16 * v63);
          uint64_t v75 = v72;
          do
          {
            uint64_t v76 = *(v74 - 1);
            int v77 = *v74;
            v74 += 2;
            v68 += byte_20EBFB6[v76];
            v70 += byte_20EBFB6[v77];
            v75 -= 2;
          }
          while (v75);
          v68 += v70;
          if (v71 != v72) {
            goto LABEL_65;
          }
LABEL_66:
          v67 += ((unsigned __int16)(v64 - 9) >> 3) + 1;
LABEL_67:
          v79 = (_DWORD *)(v66
                         + 12
                         * (unsigned __int16)(v68 + byte_20EBFB6[~(-1 << v69) & (unint64_t)*v67]));
          if (*(_DWORD *)(v10 + 36) == v79[1] && *(_DWORD *)(v10 + 32) == *v79)
          {
            if (v61 == -1) {
              uint64_t v61 = v13 & v58;
            }
LABEL_54:
            unint64_t v13 = ++v57 + v62;
            continue;
          }
          break;
        }
        v81 = (unsigned __int8 *)(v59 + 16 * v63 + 10);
        if ((unsigned __int16)((v13 & v58) % 0x30) < 9u)
        {
          __int16 v82 = 0;
          v92 = (unsigned __int8 *)(v59 + 16 * v63 + 10);
          LOBYTE(v83) = (v13 & v58) % 0x30;
          goto LABEL_81;
        }
        __int16 v82 = 0;
        uint64_t v83 = (unsigned __int16)(v62 - 48 * v63 - 9) >> 3;
        if (!((unsigned __int16)(v62 - 48 * v63 - 9) >> 3))
        {
          LODWORD(v83) = (v13 & v58) % 0x30;
          v87 = (unsigned __int8 *)(v59 + 16 * v63 + 10);
          do
          {
LABEL_79:
            int v93 = *v87++;
            v82 += byte_20EBFB6[v93];
            LOWORD(v83) = v83 - 8;
          }
          while ((unsigned __int16)v83 > 8u);
          goto LABEL_80;
        }
        __int16 v84 = 0;
        uint64_t v85 = v83 + 1;
        uint64_t v86 = (v83 + 1) & 0x3FFE;
        LOWORD(v83) = v64 - 8 * v86;
        v87 = &v81[v86];
        v88 = (unsigned __int8 *)(v60 + 16 * v63);
        uint64_t v89 = v86;
        do
        {
          uint64_t v90 = *(v88 - 1);
          int v91 = *v88;
          v88 += 2;
          v82 += byte_20EBFB6[v90];
          v84 += byte_20EBFB6[v91];
          v89 -= 2;
        }
        while (v89);
        v82 += v84;
        if (v85 != v86) {
          goto LABEL_79;
        }
LABEL_80:
        v92 = &v81[((unsigned __int16)(v64 - 9) >> 3) + 1];
LABEL_81:
        if (v9 != *(void *)(v66
                             + 12
                             * (unsigned __int16)(v82 + byte_20EBFB6[~(-1 << v83) & (unint64_t)*v92])))
          goto LABEL_54;
        if (v62 == -1)
        {
          unint64_t v99 = -1;
LABEL_92:
          uint64_t v3 = v208;
          sub_AD3484(v10, (uint64_t *)&v224, v99, v226);
          v100 = v227;
          goto LABEL_113;
        }
        uint64_t v3 = v208;
        if ((unsigned __int16)((v13 & v58) % 0x30) < 9u)
        {
          __int16 v96 = 0;
        }
        else
        {
          if ((((_WORD)v62 - 48 * (_WORD)v63 - 8) & 0xFFF8) != 0) {
            __int16 v94 = 8;
          }
          else {
            __int16 v94 = v62 - 48 * v63 - 8;
          }
          unsigned __int16 v95 = ~v94 + v62 - 48 * v63;
          if (v95 < 8u)
          {
            __int16 v96 = 0;
            unsigned __int16 v97 = v64;
            v98 = (unsigned __int8 *)(v59 + 16 * v63 + 10);
            goto LABEL_198;
          }
          __int16 v176 = 0;
          __int16 v177 = 0;
          uint64_t v178 = (v95 >> 3) + 1;
          unsigned __int16 v97 = v64 - 8 * (((v95 >> 3) + 1) & 0x3FFE);
          v98 = &v81[v178 & 0x3FFE];
          v179 = (unsigned __int8 *)(v59 + 16 * v63 + 11);
          uint64_t v180 = v178 & 0x3FFE;
          do
          {
            uint64_t v181 = *(v179 - 1);
            int v182 = *v179;
            v179 += 2;
            v176 += byte_20EBFB6[v181];
            v177 += byte_20EBFB6[v182];
            v180 -= 2;
          }
          while (v180);
          __int16 v96 = v177 + v176;
          if ((v178 & 0x3FFE) != v178)
          {
            do
            {
LABEL_198:
              int v183 = *v98++;
              v96 += byte_20EBFB6[v183];
              v97 -= 8;
            }
            while (v97 > 8u);
          }
          v81 += ((unsigned __int16)(v64 - 9) >> 3) + 1;
          LOBYTE(v64) = v97;
        }
        uint64_t v184 = v59 + 16 * v63;
        v185 = *(_DWORD ***)(v10 + 56);
        unsigned __int16 v186 = v96 + byte_20EBFB6[~(-1 << v64) & (unint64_t)*v81];
        v100 = (_DWORD *)(v66 + 12 * v186);
        if (*(unsigned __int16 *)(v184 + 8) == v186)
        {
          uint64_t v187 = v184 + 16;
          if ((_DWORD **)(v184 + 16) != v185)
          {
            while (1)
            {
              v188 = (_DWORD **)v187;
              if (*(_WORD *)(v187 + 8)) {
                break;
              }
              v187 += 16;
              if (v188 + 2 == v185)
              {
                uint64_t v184 = *(void *)(v10 + 56);
                goto LABEL_206;
              }
            }
            uint64_t v184 = v187;
LABEL_206:
            v100 = *v188;
            goto LABEL_207;
          }
        }
        else
        {
LABEL_207:
          if ((_DWORD **)v184 != v185 && v65)
          {
            do
            {
              if (*(_DWORD *)(v10 + 36) != v100[1] || *(_DWORD *)(v10 + 32) != *v100) {
                break;
              }
              v100 += 3;
              if (v100 == (_DWORD *)(*(void *)v184 + 12 * *(unsigned __int16 *)(v184 + 8)))
              {
                v184 += 16;
                if ((_DWORD **)v184 != v185)
                {
                  do
                  {
                    if (*(_WORD *)(v184 + 8))
                    {
                      v100 = *(_DWORD **)v184;
                      goto LABEL_211;
                    }
                    v184 += 16;
                  }
                  while ((_DWORD **)v184 != v185);
                  v100 = *(_DWORD **)(v184 - 16);
                }
                break;
              }
LABEL_211:
              ;
            }
            while ((_DWORD **)v184 != v185);
          }
        }
LABEL_113:
        unsigned int v114 = v100[2];
        if (v114 == -1)
        {
          int v117 = *(_DWORD *)(v10 + 112);
          *(_DWORD *)(v10 + 112) = v117 + 1;
          v100[2] = v117;
          v119 = *(unint64_t **)(v10 + 96);
          unint64_t v118 = *(void *)(v10 + 104);
          if ((unint64_t)v119 < v118)
          {
            unint64_t *v119 = v9;
            uint64_t v120 = (uint64_t)(v119 + 1);
            goto LABEL_154;
          }
          v121 = (unint64_t **)(v10 + 88);
          v122 = *(char **)(v10 + 88);
          uint64_t v123 = ((char *)v119 - v122) >> 3;
          unint64_t v124 = v123 + 1;
          if ((unint64_t)(v123 + 1) >> 61) {
            sub_2E00();
          }
          uint64_t v125 = v118 - (void)v122;
          if (v125 >> 2 > v124) {
            unint64_t v124 = v125 >> 2;
          }
          if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v124 = 0x1FFFFFFFFFFFFFFFLL;
          }
          if (v124)
          {
            if (v124 >> 61) {
              sub_188D718();
            }
            unint64_t v126 = v124;
            v127 = (char *)operator new(8 * v124);
            v121 = (unint64_t **)(v10 + 88);
            v128 = (unint64_t *)&v127[8 * v123];
            unint64_t *v128 = v9;
            uint64_t v120 = (uint64_t)(v128 + 1);
            if (v119 != (unint64_t *)v122)
            {
LABEL_134:
              unint64_t v129 = (char *)(v119 - 1) - v122;
              if (v129 < 0x58) {
                goto LABEL_253;
              }
              if ((unint64_t)(v122 - v127) < 0x20) {
                goto LABEL_253;
              }
              uint64_t v151 = (v129 >> 3) + 1;
              uint64_t v152 = 8 * (v151 & 0x3FFFFFFFFFFFFFFCLL);
              v153 = &v119[v152 / 0xFFFFFFFFFFFFFFF8];
              v128 = (unint64_t *)((char *)v128 - v152);
              v154 = &v127[8 * v123 - 16];
              v155 = v119 - 2;
              uint64_t v156 = v151 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v157 = *(_OWORD *)v155;
                *((_OWORD *)v154 - 1) = *((_OWORD *)v155 - 1);
                *(_OWORD *)v154 = v157;
                v154 -= 32;
                v155 -= 4;
                v156 -= 4;
              }
              while (v156);
              v119 = v153;
              if (v151 != (v151 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_253:
                do
                {
                  unint64_t v158 = *--v119;
                  *--v128 = v158;
                }
                while (v119 != (unint64_t *)v122);
              }
              v119 = *v121;
            }
          }
          else
          {
            unint64_t v126 = 0;
            v127 = 0;
            v128 = (unint64_t *)(8 * v123);
            *(void *)(8 * v123) = v9;
            uint64_t v120 = 8 * v123 + 8;
            if (v119 != (unint64_t *)v122) {
              goto LABEL_134;
            }
          }
          *(void *)(v10 + 88) = v128;
          *(void *)(v10 + 96) = v120;
          *(void *)(v10 + 104) = &v127[8 * v126];
          uint64_t v3 = v208;
          if (v119) {
            operator delete(v119);
          }
LABEL_154:
          *(void *)(v10 + 96) = v120;
          unsigned int v115 = v100[2];
          if (sub_BD5C18(v207, v115, v9)) {
            goto LABEL_115;
          }
LABEL_155:
          v209 &= *(unsigned char *)(v3 + 32) != 0;
          goto LABEL_156;
        }
        unsigned int v115 = v100[2];
        if (!sub_BD5C18(v207, v114, v9)) {
          goto LABEL_155;
        }
LABEL_115:
        if (v209 & 1) != 0 && (*((unsigned char *)v214 + 15))
        {
          uint64_t v116 = v216;
          if (v216) {
            uint64_t v116 = *(unsigned int *)(v216 + 4 * (((unint64_t)v214 - v213) >> 4));
          }
          if ((v116 & v206) == 0)
          {
            v167 = (unsigned int *)((char *)v212 + *(unsigned __int16 *)((char *)v212 - *v212 + 6));
            v168 = (char *)v167 + *v167;
            v169 = &v219;
            if (!v218) {
              v169 = v217;
            }
            signed int v170 = *(_DWORD *)&v168[8 * *((_DWORD *)v217 + 1)
                                  + 4
                                  + 8 * (((unint64_t)v214 - v213) >> 4)]
                 + *(_DWORD *)v169;
            uint64_t v171 = *(void *)(v3 + 64);
            if (!v171
              || (signed int v172 = sub_AD7004(v171, v115, *(_DWORD *)(v3 + 144) + ~a2), v172 != 0x7FFFFFFF) && v172 >= v170)
            {
              if (sub_AD6D5C(v3, 0, v115, a2, v170))
              {
                v173 = *(_DWORD **)(v3 + 152);
                LODWORD(v226[0]) = (v115 << *v173) | a2;
                sub_AF1DB0((uint64_t)(v173 + 2), (unsigned int *)v226);
              }
            }
          }
        }
        if ((*((unsigned char *)v214 + 15) & 2) == 0) {
          goto LABEL_156;
        }
        if (v216)
        {
          if (*(_DWORD *)(v216 + 4 * (((unint64_t)v214 - v213) >> 4)) != v206) {
            goto LABEL_156;
          }
        }
        else if (v206)
        {
          goto LABEL_156;
        }
        uint64_t v130 = *(void *)(v3 + 152);
        uint64_t v131 = v130 + 8;
        int v223 = (v115 << *(_DWORD *)v130) | (a2 - 1);
        unint64_t v132 = sub_AD72DC(v130 + 8, (unsigned int *)&v223);
        if (v132 == -1)
        {
          unint64_t v174 = v133;
          if (sub_AF1FB8(v131, 1))
          {
            unint64_t v224 = v223 | 0x7FFFFFFF00000000;
            sub_AF22EC(v131, (unsigned int *)&v224, (uint64_t)v226);
          }
          else
          {
            unint64_t v224 = v223 | 0x7FFFFFFF00000000;
            sub_AF2504(v131, (uint64_t *)&v224, v174, v226);
          }
          int v175 = v227[1];
          if (v175 != 0x7FFFFFFF) {
            goto LABEL_238;
          }
          goto LABEL_156;
        }
        uint64_t v134 = *(void *)(v130 + 56);
        unint64_t v135 = v132 / 0x30;
        v136 = (uint64_t *)(v134 + 16 * (v132 / 0x30));
        v138 = (unsigned __int8 *)v136 + 10;
        uint64_t v137 = *v136;
        int v139 = v132 % 0x30;
        if ((unsigned __int16)(v132 % 0x30) < 9u)
        {
          __int16 v140 = 0;
          goto LABEL_225;
        }
        __int16 v140 = 0;
        uint64_t v141 = (unsigned __int16)(v132 % 0x30 - 9) >> 3;
        if (!((unsigned __int16)(v132 % 0x30 - 9) >> 3))
        {
          unsigned __int16 v145 = v132 % 0x30;
          v146 = (unsigned __int8 *)v136 + 10;
          do
          {
LABEL_223:
            int v190 = *v146++;
            v140 += byte_20EBDB6[v190];
            v145 -= 8;
          }
          while (v145 > 8u);
          goto LABEL_224;
        }
        __int16 v142 = 0;
        uint64_t v143 = v141 + 1;
        uint64_t v144 = (v141 + 1) & 0x3FFE;
        unsigned __int16 v145 = v139 - 8 * v144;
        v146 = &v138[v144];
        v147 = (unsigned __int8 *)(v134 + 16 * v135 + 11);
        uint64_t v148 = v144;
        do
        {
          uint64_t v149 = *(v147 - 1);
          int v150 = *v147;
          v147 += 2;
          v140 += byte_20EBDB6[v149];
          v142 += byte_20EBDB6[v150];
          v148 -= 2;
        }
        while (v148);
        v140 += v142;
        if (v143 != v144) {
          goto LABEL_223;
        }
LABEL_224:
        v138 += ((unsigned __int16)(v139 - 9) >> 3) + 1;
        LOBYTE(v139) = v145;
LABEL_225:
        __int16 v191 = byte_20EBDB6[~(-1 << v139) & (unint64_t)*v138];
        v192 = *(uint64_t **)(v130 + 64);
        unsigned __int16 v193 = v140 + v191;
        int v194 = *((unsigned __int16 *)v136 + 4);
        v195 = v136 + 2;
        if (v194 != v193 || v195 == v192)
        {
          int v175 = *(_DWORD *)(v137 + 8 * v193 + 4);
          if (v175 == 0x7FFFFFFF) {
            goto LABEL_156;
          }
LABEL_238:
          signed int v199 = *((_DWORD *)v214 + 2) + v175;
          if (v209)
          {
            v200 = (unsigned int *)((char *)v212 + *(unsigned __int16 *)((char *)v212 - *v212 + 6));
            v201 = (char *)v200 + *v200;
            v202 = &v219;
            if (!v218) {
              v202 = v217;
            }
            if (v199 < *(_DWORD *)&v201[8 * *((_DWORD *)v217 + 1)
                                       + 8
                                       + 8 * (((unint64_t)v214 - v213) >> 4)]
                      + *(_DWORD *)v202)
              sub_A40398(*(void *)(v3 + 40), (uint64_t)&v210, v199);
            goto LABEL_245;
          }
          if (v218)
          {
            if (sub_A1F39C(*(void *)(v3 + 40), (uint64_t)&v210, v199, 1))
            {
LABEL_245:
              char v209 = 1;
              goto LABEL_156;
            }
          }
          else if (sub_A1F8B4((uint64_t)&v210, v199, 1))
          {
            goto LABEL_245;
          }
          char v209 = 0;
          goto LABEL_156;
        }
        uint64_t v197 = v134 + 16 * v135 + 32;
        do
        {
          if (*(_WORD *)(v197 - 8)) {
            BOOL v198 = 1;
          }
          else {
            BOOL v198 = v197 == (void)v192;
          }
          v197 += 16;
        }
        while (!v198);
        int v175 = *(_DWORD *)(*(void *)(v197 - 32) + 4);
        if (v175 != 0x7FFFFFFF) {
          goto LABEL_238;
        }
LABEL_156:
        unint64_t v159 = v213;
        v6 = v214 + 2;
        v214 += 2;
        if (*(unsigned char *)(v210 + 16)) {
          BOOL v160 = v211 == 0;
        }
        else {
          BOOL v160 = 0;
        }
        if (v160 && (unint64_t)v6 >= v213 && (unint64_t)v6 < v215)
        {
          do
          {
            unint64_t v163 = __ROR8__(*v6, 32);
            if (HIDWORD(v163) == 1 && (v163 + 3) < 2) {
              break;
            }
            char v165 = sub_2AB7E4(**(void **)(v210 + 4120));
            unint64_t v159 = v213;
            v6 = v214;
            if (v165) {
              break;
            }
            v6 = v214 + 2;
            v214 = v6;
          }
          while ((unint64_t)v6 >= v213 && (unint64_t)v6 < v215);
        }
      }
      while ((unint64_t)v6 >= v159 && (unint64_t)v6 < v215);
LABEL_3:
      v5 = v220 + 4;
      v220 = v5;
    }
    while ((unint64_t)v5 < v221);
  }
}

uint64_t sub_AD88FC(uint64_t a1)
{
  uint64_t v21 = *(void *)(a1 + 208);
  uint64_t v22 = *(void *)(a1 + 168);
  uint64_t v20 = *(void *)(a1 + 192);
  uint64_t v18 = *(void *)(a1 + 184);
  uint64_t v19 = *(void *)(a1 + 240);
  uint64_t v14 = *(void *)(a1 + 256);
  uint64_t v15 = 8 * (*(void *)(a1 + 232) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v2 = 8 * (*(void *)(a1 + 280) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v3 = *(void *)(a1 + 304);
  uint64_t v16 = *(void *)(a1 + 336);
  uint64_t v17 = *(void *)(a1 + 288);
  uint64_t v4 = 8 * (*(void *)(a1 + 328) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v5 = *(void *)(a1 + 376);
  uint64_t v6 = *(void *)(a1 + 352);
  uint64_t v13 = *(void *)(a1 + 360);
  uint64_t v7 = *(void *)(a1 + 408);
  uint64_t v8 = 8 * (*(void *)(a1 + 400) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v9 = 8 * (*(void *)(a1 + 456) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v10 = *(void *)(a1 + 424);
  uint64_t result = v18
         + v21
         - (v22
          + v20)
         + v14
         + v15
         - v19
         + v3
         + v2
         - v17
         + v6
         + v4
         + v5
         - (v16
          + v13)
         + v8
         + v10
         - v7
         + sub_BD6170((void *)(a1 + 464))
         + v9;
  uint64_t v12 = *(void *)(a1 + 152);
  if (v12)
  {
    if (*(unsigned char *)(a1 + 568)) {
      result += 8 * *(void *)(v12 + 80);
    }
  }
  return result;
}

uint64_t sub_AD8A30(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)(a1 + 48) + 104)
         - *(void *)(*(void *)(a1 + 48) + 88)
         + *(void *)(*(void *)(a1 + 56) + 104)
         + 12 * (*(void *)(*(void *)(a1 + 56) + 72) + *(void *)(*(void *)(a1 + 48) + 72))
         - *(void *)(*(void *)(a1 + 56) + 88);
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3) {
    result += 8 * *(void *)(v3 + 80);
  }
  uint64_t v4 = *(void **)(a1 + 80);
  if (v4)
  {
    uint64_t v5 = (char *)*v4;
    uint64_t v7 = v4 + 1;
    uint64_t v6 = (char *)v4[1];
    uint64_t v8 = v7[1] - (void)v5;
    if (v5 != v6)
    {
      unint64_t v9 = v6 - v5 - 48;
      if (v9 >= 0x30)
      {
        uint64_t v11 = 0;
        unint64_t v12 = v9 / 0x30 + 1;
        uint64_t v10 = &v5[48 * (v12 & 0xFFFFFFFFFFFFFFELL)];
        uint64_t v13 = v5 + 64;
        uint64_t v14 = v12 & 0xFFFFFFFFFFFFFFELL;
        do
        {
          uint64_t v8 = v8 + *(v13 - 3) + 8 * (*(v13 - 6) & 0x3FFFFFFFFFFFFFFLL) - *(v13 - 5);
          uint64_t v11 = v11 + v13[3] + 8 * (*v13 & 0x3FFFFFFFFFFFFFFLL) - v13[1];
          v13 += 12;
          v14 -= 2;
        }
        while (v14);
        v8 += v11;
        if (v12 == (v12 & 0xFFFFFFFFFFFFFFELL)) {
          goto LABEL_11;
        }
      }
      else
      {
        uint64_t v10 = v5;
      }
      do
      {
        uint64_t v8 = v8 + *((void *)v10 + 5) + 8 * (*((void *)v10 + 2) & 0x3FFFFFFFFFFFFFFLL) - *((void *)v10 + 3);
        v10 += 48;
      }
      while (v10 != v6);
    }
LABEL_11:
    result += v8;
  }
  uint64_t v15 = *(void **)(a1 + 96);
  if (!v15) {
    goto LABEL_21;
  }
  uint64_t v16 = (char *)*v15;
  uint64_t v18 = v15 + 1;
  uint64_t v17 = (char *)v15[1];
  uint64_t v19 = v18[1] - (void)v16;
  if (v16 != v17)
  {
    unint64_t v20 = v17 - v16 - 48;
    if (v20 >= 0x30)
    {
      uint64_t v22 = 0;
      unint64_t v23 = v20 / 0x30 + 1;
      uint64_t v21 = &v16[48 * (v23 & 0xFFFFFFFFFFFFFFELL)];
      uint64_t v24 = v16 + 64;
      uint64_t v25 = v23 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        uint64_t v19 = v19 + *(v24 - 3) + 8 * (*(v24 - 6) & 0x3FFFFFFFFFFFFFFLL) - *(v24 - 5);
        uint64_t v22 = v22 + v24[3] + 8 * (*v24 & 0x3FFFFFFFFFFFFFFLL) - v24[1];
        v24 += 12;
        v25 -= 2;
      }
      while (v25);
      v19 += v22;
      if (v23 == (v23 & 0xFFFFFFFFFFFFFFELL)) {
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v21 = v16;
    }
    do
    {
      uint64_t v19 = v19 + *((void *)v21 + 5) + 8 * (*((void *)v21 + 2) & 0x3FFFFFFFFFFFFFFLL) - *((void *)v21 + 3);
      v21 += 48;
    }
    while (v21 != v17);
  }
LABEL_20:
  result += v19;
LABEL_21:
  uint64_t v26 = *(void *)(a1 + 152);
  if (v26)
  {
    if (!*(unsigned char *)(a1 + 568)) {
      result += 8 * *(void *)(v26 + 80);
    }
  }
  return result;
}

uint64_t sub_AD8C38(uint64_t *a1, int a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  *(_DWORD *)(v2 + 4) = a2;
  sub_AD8EF4(v3 + 608, (_OWORD *)v2);
  sub_C50C4C(v3 + 160, v3 + 1184, (uint64_t)&v20);
  if (v21 < 0) {
    operator delete(v20);
  }
  unint64_t v4 = *(void *)(v3 + 1328);
  *(void *)(v3 + 304) -= v4;
  unint64_t v5 = *(void *)(v3 + 2024);
  if (v5 <= v4) {
    unint64_t v5 = v4;
  }
  *(void *)(v3 + 2024) = v5;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v18);
    sub_188FC78(v18, (uint64_t)"[", 1);
    uint64_t v6 = (void *)std::ostream::operator<<();
    sub_188FC78(v6, (uint64_t)"] Secondary SPA scanned ", 24);
    uint64_t v7 = (void *)std::ostream::operator<<();
    sub_188FC78(v7, (uint64_t)" stop patterns and obtained ", 28);
    uint64_t v8 = (void *)std::ostream::operator<<();
    sub_188FC78(v8, (uint64_t)" journeys in ", 13);
    unint64_t v9 = (void *)std::ostream::operator<<();
    uint64_t v10 = sub_188FC78(v9, (uint64_t)" ms using ", 10);
    uint64_t v11 = (void *)sub_38EC58((uint64_t)v10, (unint64_t *)(v3 + 1328));
    sub_188FC78(v11, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (v17 < 0) {
      operator delete(__p);
    }
    if (v19 < 0) {
      operator delete((void *)v18[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unint64_t v12 = *(unsigned int *)(v3 + 1040);
  uint64_t v13 = *(void *)(v3 + 800);
  unint64_t v14 = (*(void *)(v3 + 808) - v13) >> 2;
  if (v14 <= v12)
  {
    sub_5BBEE0(v3 + 800, v12 - v14 + 1);
    uint64_t v13 = *(void *)(v3 + 800);
  }
  return *(unsigned int *)(v13 + 4 * v12);
}

void sub_AD8EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_AD8EF4(uint64_t a1, _OWORD *a2)
{
  sub_725D0((uint64_t)v39);
  long long v4 = a2[1];
  *(_OWORD *)(a1 + 112) = *a2;
  *(_OWORD *)(a1 + 128) = v4;
  sub_AD9300(a1);
  uint64_t v5 = *(void *)(a1 + 48);
  v40[0] = 0x1FFFFFFFELL;
  *(_DWORD *)(a1 + 432) = sub_AD28B0(v5, v40);
  if (!*(unsigned char *)(a1 + 33) || sub_A276F8(*(void *)(a1 + 40)))
  {
    uint64_t v6 = *(void *)(a1 + 48);
    v40[0] = 0x1FFFFFFFDLL;
    unsigned int v7 = sub_AD28B0(v6, v40);
    sub_ADBE54(a1, 0, v7, 0, *(_DWORD *)(a1 + 116));
  }
  LODWORD(v8) = *(_DWORD *)(a1 + 144);
  if (v8 >= 2)
  {
    unint64_t v9 = 1;
    while (1)
    {
      if (!*(unsigned char *)(a1 + 25) && v9 >= 2 && *(unsigned char *)(a1 + 27))
      {
        uint64_t v10 = *(int **)(a1 + 336);
        uint64_t v11 = *(int **)(a1 + 344);
        if (v10 == v11)
        {
          uint64_t v19 = *(void *)(a1 + 336);
        }
        else
        {
          do
          {
            int v12 = *v10;
            uint64_t v13 = *(_DWORD **)(a1 + 152);
            LODWORD(v40[0]) = (*v10 << *v13) | (v9 - 2);
            int v14 = *(_DWORD *)(sub_AF1DB0((uint64_t)(v13 + 2), (unsigned int *)v40) + 4);
            uint64_t v15 = *(_DWORD **)(a1 + 152);
            LODWORD(v40[0]) = (v12 << *v15) | v9;
            uint64_t v16 = sub_AF1DB0((uint64_t)(v15 + 2), (unsigned int *)v40);
            if (v14 != 0x7FFFFFFF)
            {
              int v17 = *(_DWORD *)(v16 + 4);
              if (v17 == 0x7FFFFFFF || v17 < v14) {
                *(_DWORD *)(v16 + 4) = v14;
              }
            }
            ++v10;
          }
          while (v10 != v11);
          uint64_t v10 = *(int **)(a1 + 336);
          uint64_t v19 = *(void *)(a1 + 344);
        }
        *(double *)(a1 + 680) = *(double *)(a1 + 680) + (double)(unint64_t)((v19 - (uint64_t)v10) >> 2);
      }
      if (v9)
      {
        v29 = *(unsigned int **)(a1 + 288);
        v30 = *(unsigned int **)(a1 + 296);
        if (v29 != v30)
        {
          uint64_t v31 = *(void *)(a1 + 264);
          uint64_t v32 = *(unsigned int **)(a1 + 288);
          do
          {
            unsigned int v33 = *v32++;
            *(void *)(v31 + (((unint64_t)v33 >> 3) & 0x1FFFFFF8)) &= ~(1 << v33);
          }
          while (v32 != v30);
        }
        *(void *)(a1 + 296) = v29;
        sub_AD95C0(a1, v9);
        sub_AD97B0(a1, v9);
        unint64_t v34 = *(unsigned int *)(a1 + 432);
        if (*(void *)(a1 + 272) > v34
          && ((*(void *)(*(void *)(a1 + 264) + ((v34 >> 3) & 0x1FFFFFF8)) >> v34) & 1) != 0)
        {
          *(void *)(*(void *)(a1 + 440) + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
        }
        if (*(unsigned char *)(a1 + 25) && *(void *)(a1 + 288) == *(void *)(a1 + 296))
        {
LABEL_50:
          LODWORD(v8) = *(_DWORD *)(a1 + 144);
          if (v8) {
            goto LABEL_51;
          }
          goto LABEL_55;
        }
      }
      else
      {
        unint64_t v20 = *(unsigned int **)(a1 + 240);
        char v21 = *(unsigned int **)(a1 + 248);
        if (v20 != v21)
        {
          uint64_t v22 = *(void *)(a1 + 216);
          unint64_t v23 = *(unsigned int **)(a1 + 240);
          do
          {
            unsigned int v24 = *v23++;
            *(void *)(v22 + (((unint64_t)v24 >> 3) & 0x1FFFFFF8)) &= ~(1 << v24);
          }
          while (v23 != v21);
        }
        *(void *)(a1 + 248) = v20;
        sub_ADA848((void *)a1, v9);
        sub_725D0((uint64_t)v40);
        uint64_t v25 = *(unsigned int **)(a1 + 408);
        uint64_t v26 = *(unsigned int **)(a1 + 416);
        while (v25 != v26)
        {
          unsigned int v27 = *v25++;
          sub_ADC114(a1, v9, v27);
        }
        *(double *)(a1 + 608) = sub_72688((uint64_t)v40) + *(double *)(a1 + 608);
        unint64_t v28 = *(unsigned int *)(a1 + 432);
        if (*(void *)(a1 + 224) > v28
          && ((*(void *)(*(void *)(a1 + 216) + ((v28 >> 3) & 0x1FFFFFF8)) >> v28) & 1) != 0)
        {
          *(void *)(*(void *)(a1 + 440) + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
        }
        if (*(unsigned char *)(a1 + 25) && *(void *)(a1 + 240) == *(void *)(a1 + 248)) {
          goto LABEL_50;
        }
      }
      unint64_t v35 = sub_AD88FC(a1) + 728;
      if (*(void *)(a1 + 720) > v35) {
        unint64_t v35 = *(void *)(a1 + 720);
      }
      *(void *)(a1 + 720) = v35;
      if (sub_AD6B08(a1)) {
        goto LABEL_50;
      }
      ++v9;
      unint64_t v8 = *(unsigned int *)(a1 + 144);
      if (v9 >= v8) {
        goto LABEL_48;
      }
    }
  }
  LODWORD(v9) = 1;
LABEL_48:
  if (v8)
  {
LABEL_51:
    unint64_t v36 = 0;
    uint64_t v37 = v8;
    do
    {
      if ((*(void *)(*(void *)(a1 + 440) + ((v36 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v36))
      {
        *(double *)(a1 + 640) = *(double *)(a1 + 640) + 1.0;
        __int16 v38 = *(_DWORD **)(a1 + 152);
        LODWORD(v40[0]) = (*(_DWORD *)(a1 + 432) << *v38) | v36;
        *(void *)(a1 + 632) += *(int *)(sub_AF1DB0((uint64_t)(v38 + 2), (unsigned int *)v40) + 4);
      }
      ++v36;
    }
    while (v37 != v36);
  }
LABEL_55:
  *(double *)(a1 + 648) = (double)v9;
  *(double *)(a1 + 600) = sub_72688((uint64_t)v39);
}

void sub_AD9300(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 240);
  uint64_t v3 = *(unsigned int **)(a1 + 248);
  if (v2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 216);
    uint64_t v5 = *(unsigned int **)(a1 + 240);
    do
    {
      unsigned int v6 = *v5++;
      *(void *)(v4 + (((unint64_t)v6 >> 3) & 0x1FFFFFF8)) &= ~(1 << v6);
    }
    while (v5 != v3);
  }
  *(void *)(a1 + 248) = v2;
  unsigned int v7 = *(unsigned int **)(a1 + 288);
  unint64_t v8 = *(unsigned int **)(a1 + 296);
  if (v7 != v8)
  {
    uint64_t v9 = *(void *)(a1 + 264);
    uint64_t v10 = *(unsigned int **)(a1 + 288);
    do
    {
      unsigned int v11 = *v10++;
      *(void *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) &= ~(1 << v11);
    }
    while (v10 != v8);
  }
  *(void *)(a1 + 296) = v7;
  int v12 = *(unsigned int **)(a1 + 336);
  uint64_t v13 = *(unsigned int **)(a1 + 344);
  if (v12 != v13)
  {
    uint64_t v14 = *(void *)(a1 + 312);
    uint64_t v15 = *(unsigned int **)(a1 + 336);
    do
    {
      unsigned int v16 = *v15++;
      *(void *)(v14 + (((unint64_t)v16 >> 3) & 0x1FFFFFF8)) &= ~(1 << v16);
    }
    while (v15 != v13);
  }
  *(void *)(a1 + 344) = v12;
  int v17 = *(unsigned int **)(a1 + 408);
  uint64_t v18 = *(unsigned int **)(a1 + 416);
  if (v17 != v18)
  {
    uint64_t v19 = *(void *)(a1 + 384);
    uint64_t v20 = *(void *)(a1 + 360);
    char v21 = *(unsigned int **)(a1 + 408);
    do
    {
      unsigned int v22 = *v21++;
      *(void *)(v19 + (((unint64_t)v22 >> 3) & 0x1FFFFFF8)) &= ~(1 << v22);
      *(_DWORD *)(v20 + 4 * v22) = -1;
    }
    while (v21 != v18);
  }
  *(void *)(a1 + 416) = v17;
  sub_BD5698(a1 + 464);
  *(void *)(a1 + 448) = 0;
  char v28 = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)&__dst, &__p);
  unint64_t v23 = (void **)(a1 + 576);
  if (*(char *)(a1 + 599) < 0) {
    operator delete(*v23);
  }
  *(_OWORD *)unint64_t v23 = __dst;
  *(void *)(a1 + 592) = v30;
  HIBYTE(v30) = 0;
  LOBYTE(__dst) = 0;
  *(_OWORD *)(a1 + 664) = v35;
  *(_OWORD *)(a1 + 680) = v36;
  *(_OWORD *)(a1 + 696) = v37;
  *(_OWORD *)(a1 + 712) = v38;
  *(_OWORD *)(a1 + 600) = v31;
  *(_OWORD *)(a1 + 616) = v32;
  *(_OWORD *)(a1 + 632) = v33;
  *(_OWORD *)(a1 + 648) = v34;
  if (v28 < 0) {
    operator delete((void *)__p);
  }
  unsigned int v24 = 2 * *(_DWORD *)(a1 + 8) + 2;
  *(_DWORD *)(a1 + 144) = v24;
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v25 = *(void *)(a1 + 152);
    *(_DWORD *)uint64_t v25 = 32 - __clz(v24);
    if (*(void *)(v25 + 48) | *(void *)(v25 + 88))
    {
      for (uint64_t i = *(void *)(v25 + 56); i != *(void *)(v25 + 64); i += 16)
      {
        if (*(void *)i)
        {
          free(*(void **)i);
          *(void *)uint64_t i = 0;
        }
        *(void *)(i + 8) = 0;
      }
      *(void *)(v25 + 88) = 0;
    }
    *(uint64x2_t *)(v25 + 8) = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(v25 + 24), (float)*(unint64_t *)(v25 + 80))));
    *(unsigned char *)(v25 + 32) = 0;
    *(void *)(v25 + 48) = 0;
    unsigned int v24 = *(_DWORD *)(a1 + 144);
  }
  *(void *)(a1 + 176) = *(void *)(a1 + 168);
  *(void *)(a1 + 200) = *(void *)(a1 + 192);
  sub_A3E96C(a1 + 440, v24, 0);
  sub_BD5704(a1 + 464, *(void *)(a1 + 16));
}

void sub_AD95A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_AD95C0(uint64_t a1, unsigned int a2)
{
  sub_725D0((uint64_t)v23);
  uint64_t v4 = *(unsigned int **)(a1 + 240);
  uint64_t v5 = *(unsigned int **)(a1 + 248);
  if (v4 != v5)
  {
    while (1)
    {
      unsigned int v6 = *v4;
      unint64_t v7 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 48) + 88), *v4);
      unint64_t v8 = *(_DWORD **)(a1 + 152);
      int v24 = (v6 << *v8) | (a2 - 1);
      signed int v9 = *(_DWORD *)(sub_AF1DB0((uint64_t)(v8 + 2), (unsigned int *)&v24) + 4);
      if (HIDWORD(v7) == 1 && (v7 + 3) < 2)
      {
        signed int v16 = v9;
        uint64_t v17 = *(void *)(a1 + 64);
        if (v17) {
          goto LABEL_19;
        }
        goto LABEL_24;
      }
      uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 4120);
      uint64_t v12 = v11 + 24;
      if (*(unsigned char *)(v11 + 17)) {
        break;
      }
      uint64_t v13 = (int *)sub_498D5C(v12, __ROR8__(v7, 32), 0, "stop");
      uint64_t v18 = (unsigned __int16 *)((char *)v13 - *v13);
      if (*v18 >= 0x15u)
      {
        unsigned int v14 = v18[10];
        if (v14) {
          goto LABEL_17;
        }
      }
      signed int v16 = v9 - 30;
      uint64_t v17 = *(void *)(a1 + 64);
      if (v17)
      {
LABEL_19:
        signed int v19 = sub_AD7004(v17, v6, *(_DWORD *)(a1 + 144) + ~a2);
        if (v19 == 0x7FFFFFFF || v19 > v16) {
          goto LABEL_3;
        }
      }
LABEL_24:
      if (sub_ADBE54(a1, 1u, v6, a2, v16))
      {
        char v21 = *(_DWORD **)(a1 + 152);
        int v24 = (v6 << *v21) | a2;
        sub_AF1DB0((uint64_t)(v21 + 2), (unsigned int *)&v24);
      }
LABEL_3:
      if (++v4 == v5) {
        goto LABEL_28;
      }
    }
    uint64_t v13 = (int *)sub_A1A290(v12, v7, 0, "transfers at stop");
    unsigned int v14 = 0;
    uint64_t v15 = (unsigned __int16 *)((char *)v13 - *v13);
    if (*v15 >= 5u)
    {
      unsigned int v14 = v15[2];
      if (v15[2]) {
LABEL_17:
      }
        unsigned int v14 = -*(int *)((char *)v13 + v14);
    }
    signed int v16 = v14 + v9;
    uint64_t v17 = *(void *)(a1 + 64);
    if (v17) {
      goto LABEL_19;
    }
    goto LABEL_24;
  }
LABEL_28:
  double result = sub_72688((uint64_t)v23) + *(double *)(a1 + 616);
  *(double *)(a1 + 616) = result;
  return result;
}

double sub_AD97B0(uint64_t a1, unsigned int a2)
{
  sub_725D0((uint64_t)v216);
  uint64_t v3 = *(unsigned int **)(a1 + 240);
  v202 = *(unsigned int **)(a1 + 248);
  if (v3 != v202)
  {
    uint64_t v209 = a1;
    do
    {
      v203 = v3;
      unsigned int v4 = *v3;
      unint64_t v5 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 48) + 88), *v3);
      unsigned int v6 = *(_DWORD **)(a1 + 152);
      unsigned int v208 = v4;
      LODWORD(v220[0]) = (v4 << *v6) | (a2 - 1);
      int v205 = *(_DWORD *)(sub_AF1DB0((uint64_t)(v6 + 2), (unsigned int *)v220) + 4);
      sub_A28D38((uint64_t)&v210, *(void *)(a1 + 40), v5);
      unint64_t v7 = v211;
      unint64_t v8 = (unint64_t *)&v212;
      if (v215) {
        unint64_t v8 = v214;
      }
      unint64_t v9 = *v8;
      while ((unint64_t)v7 < v9)
      {
        uint64_t v12 = 0;
        unint64_t v13 = __ROR8__(*v7, 32);
        uint64_t v14 = *(void *)(a1 + 48);
        uint64_t v15 = *(void *)(v14 + 72) - 1;
        unint64_t v16 = 0xC4CEB9FE1A85EC53
            * ((0xFF51AFD7ED558CCDLL * (v13 ^ (v13 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v13 ^ (v13 >> 33))) >> 33));
        unint64_t v17 = v16 ^ (v16 >> 33);
        uint64_t v18 = *(void *)(v14 + 48);
        uint64_t v19 = v18 + 11;
        uint64_t v20 = -1;
        for (unint64_t i = v17; ; unint64_t i = v12 + v22)
        {
          uint64_t v22 = i & v15;
          unint64_t v23 = (i & v15) / 0x30;
          unint64_t v24 = v22 - 48 * v23;
          if (((*(unsigned __int8 *)(v18 + 16 * v23 + (v24 >> 3) + 10) >> (v24 & 7)) & 1) == 0)
          {
            if (v20 == -1) {
              unint64_t v60 = v22;
            }
            else {
              unint64_t v60 = v20;
            }
            if (!sub_AD2F40(v14, 1)) {
              goto LABEL_97;
            }
            goto LABEL_54;
          }
          uint64_t v25 = *(void *)(v18 + 16 * v23);
          if (!*(void *)(v14 + 40)) {
            break;
          }
          uint64_t v26 = (unsigned __int8 *)(v18 + 16 * v23 + 10);
          if ((unsigned __int16)(v22 - 48 * v23) < 9u)
          {
            __int16 v27 = 0;
            LOBYTE(v32) = v22 - 48 * v23;
            goto LABEL_28;
          }
          __int16 v27 = 0;
          uint64_t v28 = (unsigned __int16)(v22 - 48 * v23 - 9) >> 3;
          if ((unsigned __int16)(v22 - 48 * v23 - 9) >> 3)
          {
            __int16 v29 = 0;
            uint64_t v30 = v28 + 1;
            uint64_t v31 = (v28 + 1) & 0x3FFE;
            unsigned __int16 v32 = v24 - 8 * v31;
            long long v33 = &v26[v31];
            long long v34 = (unsigned __int8 *)(v19 + 16 * v23);
            uint64_t v35 = v31;
            do
            {
              uint64_t v36 = *(v34 - 1);
              int v37 = *v34;
              v34 += 2;
              v27 += byte_20EBFB6[v36];
              v29 += byte_20EBFB6[v37];
              v35 -= 2;
            }
            while (v35);
            v27 += v29;
            if (v30 == v31) {
              goto LABEL_27;
            }
          }
          else
          {
            unsigned __int16 v32 = v22 - 48 * v23;
            long long v33 = (unsigned __int8 *)(v18 + 16 * v23 + 10);
          }
          do
          {
            int v38 = *v33++;
            v27 += byte_20EBFB6[v38];
            v32 -= 8;
          }
          while (v32 > 8u);
LABEL_27:
          v26 += ((unsigned __int16)(v24 - 9) >> 3) + 1;
LABEL_28:
          uint64_t v39 = (_DWORD *)(v25
                         + 12
                         * (unsigned __int16)(v27 + byte_20EBFB6[~(-1 << v32) & (unint64_t)*v26]));
          BOOL v40 = *(_DWORD *)(v14 + 36) == v39[1] && *(_DWORD *)(v14 + 32) == *v39;
          if (!v40) {
            break;
          }
          if (v20 == -1) {
            uint64_t v20 = v22;
          }
LABEL_15:
          ++v12;
        }
        uint64_t v41 = (unsigned __int8 *)(v18 + 16 * v23 + 10);
        if ((unsigned __int16)(v22 - 48 * v23) < 9u)
        {
          __int16 v42 = 0;
          __int16 v53 = (unsigned __int8 *)(v18 + 16 * v23 + 10);
          LOBYTE(v47) = v22 - 48 * v23;
          goto LABEL_42;
        }
        __int16 v42 = 0;
        uint64_t v43 = (unsigned __int16)(v22 - 48 * v23 - 9) >> 3;
        if (!((unsigned __int16)(v22 - 48 * v23 - 9) >> 3))
        {
          unsigned __int16 v47 = v22 - 48 * v23;
          int v48 = (unsigned __int8 *)(v18 + 16 * v23 + 10);
          do
          {
LABEL_40:
            int v54 = *v48++;
            v42 += byte_20EBFB6[v54];
            v47 -= 8;
          }
          while (v47 > 8u);
          goto LABEL_41;
        }
        __int16 v44 = 0;
        uint64_t v45 = v43 + 1;
        uint64_t v46 = (v43 + 1) & 0x3FFE;
        unsigned __int16 v47 = v24 - 8 * v46;
        int v48 = &v41[v46];
        v49 = (unsigned __int8 *)(v19 + 16 * v23);
        uint64_t v50 = v46;
        do
        {
          uint64_t v51 = *(v49 - 1);
          int v52 = *v49;
          v49 += 2;
          v42 += byte_20EBFB6[v51];
          v44 += byte_20EBFB6[v52];
          v50 -= 2;
        }
        while (v50);
        v42 += v44;
        if (v45 != v46) {
          goto LABEL_40;
        }
LABEL_41:
        __int16 v53 = &v41[((unsigned __int16)(v24 - 9) >> 3) + 1];
LABEL_42:
        if (v13 != *(void *)(v25
                              + 12
                              * (unsigned __int16)(v42
                                                 + byte_20EBFB6[~(-1 << v47) & (unint64_t)*v53])))
          goto LABEL_15;
        if (v22 != -1)
        {
          if ((unsigned __int16)(v22 - 48 * v23) < 9u)
          {
            __int16 v57 = 0;
            a1 = v209;
          }
          else
          {
            if ((((_WORD)v22 - 48 * (_WORD)v23 - 8) & 0xFFF8) != 0) {
              __int16 v55 = 8;
            }
            else {
              __int16 v55 = v22 - 48 * v23 - 8;
            }
            unsigned __int16 v56 = ~v55 + v22 - 48 * v23;
            a1 = v209;
            __int16 v57 = 0;
            if (v56 < 8u)
            {
              unsigned __int16 v58 = v24;
              uint64_t v59 = (unsigned __int8 *)(v18 + 16 * v23 + 10);
              goto LABEL_102;
            }
            __int16 v106 = 0;
            uint64_t v107 = (v56 >> 3) + 1;
            unsigned __int16 v58 = v24 - 8 * (((v56 >> 3) + 1) & 0x3FFE);
            uint64_t v59 = &v41[v107 & 0x3FFE];
            uint64_t v108 = (unsigned __int8 *)(v18 + 16 * v23 + 11);
            uint64_t v109 = v107 & 0x3FFE;
            do
            {
              uint64_t v110 = *(v108 - 1);
              int v111 = *v108;
              v108 += 2;
              v57 += byte_20EBFB6[v110];
              v106 += byte_20EBFB6[v111];
              v109 -= 2;
            }
            while (v109);
            v57 += v106;
            if ((v107 & 0x3FFE) != v107)
            {
              do
              {
LABEL_102:
                int v112 = *v59++;
                v57 += byte_20EBFB6[v112];
                v58 -= 8;
              }
              while (v58 > 8u);
            }
            v41 += ((unsigned __int16)(v24 - 9) >> 3) + 1;
            LOBYTE(v24) = v58;
          }
          uint64_t v113 = *(void *)(v14 + 56);
          unsigned __int16 v114 = v57 + byte_20EBFB6[~(-1 << v24) & (unint64_t)*v41];
          uint64_t v115 = v18 + 16 * v23;
          if (*(unsigned __int16 *)(v115 + 8) != v114 || v115 + 16 == v113)
          {
            uint64_t v105 = (_DWORD *)(v25 + 12 * v114);
          }
          else
          {
            uint64_t v117 = v115 + 32;
            do
            {
              if (*(_WORD *)(v117 - 8)) {
                BOOL v118 = 1;
              }
              else {
                BOOL v118 = v117 == v113;
              }
              v117 += 16;
            }
            while (!v118);
            uint64_t v105 = *(_DWORD **)(v117 - 32);
          }
          goto LABEL_116;
        }
        unint64_t v60 = -1;
        if (!sub_AD2F40(v14, 1))
        {
LABEL_97:
          unint64_t v218 = v13;
          int v219 = -1;
          sub_AD3484(v14, (uint64_t *)&v218, v60, v220);
          uint64_t v105 = v221;
          a1 = v209;
          goto LABEL_116;
        }
LABEL_54:
        uint64_t v61 = 0;
        unint64_t v218 = v13;
        int v219 = -1;
        uint64_t v62 = *(void *)(v14 + 72) - 1;
        uint64_t v63 = *(void *)(v14 + 48);
        uint64_t v64 = v63 + 11;
        uint64_t v65 = -1;
        while (2)
        {
          uint64_t v66 = v17 & v62;
          unint64_t v67 = (v17 & v62) / 0x30;
          unint64_t v68 = (v17 & v62) % 0x30;
          if (((*(unsigned __int8 *)(v63 + 16 * v67 + (v68 >> 3) + 10) >> (v68 & 7)) & 1) == 0)
          {
            if (v65 == -1) {
              unint64_t v104 = v17 & v62;
            }
            else {
              unint64_t v104 = v65;
            }
            goto LABEL_95;
          }
          uint64_t v69 = *(void *)(v14 + 40);
          uint64_t v70 = *(void *)(v63 + 16 * v67);
          if (!v69) {
            break;
          }
          uint64_t v71 = (unsigned __int8 *)(v63 + 16 * v67 + 10);
          if ((unsigned __int16)((v17 & v62) % 0x30) < 9u)
          {
            __int16 v72 = 0;
            LOBYTE(v73) = (v17 & v62) % 0x30;
            goto LABEL_70;
          }
          __int16 v72 = 0;
          uint64_t v73 = (unsigned __int16)(v66 - 48 * v67 - 9) >> 3;
          if (!((unsigned __int16)(v66 - 48 * v67 - 9) >> 3))
          {
            LODWORD(v73) = (v17 & v62) % 0x30;
            int v77 = (unsigned __int8 *)(v63 + 16 * v67 + 10);
            do
            {
LABEL_68:
              int v82 = *v77++;
              v72 += byte_20EBFB6[v82];
              LOWORD(v73) = v73 - 8;
            }
            while ((unsigned __int16)v73 > 8u);
            goto LABEL_69;
          }
          __int16 v74 = 0;
          uint64_t v75 = v73 + 1;
          uint64_t v76 = (v73 + 1) & 0x3FFE;
          LOWORD(v73) = v68 - 8 * v76;
          int v77 = &v71[v76];
          int v78 = (unsigned __int8 *)(v64 + 16 * v67);
          uint64_t v79 = v76;
          do
          {
            uint64_t v80 = *(v78 - 1);
            int v81 = *v78;
            v78 += 2;
            v72 += byte_20EBFB6[v80];
            v74 += byte_20EBFB6[v81];
            v79 -= 2;
          }
          while (v79);
          v72 += v74;
          if (v75 != v76) {
            goto LABEL_68;
          }
LABEL_69:
          v71 += ((unsigned __int16)(v68 - 9) >> 3) + 1;
LABEL_70:
          uint64_t v83 = (_DWORD *)(v70
                         + 12
                         * (unsigned __int16)(v72 + byte_20EBFB6[~(-1 << v73) & (unint64_t)*v71]));
          if (*(_DWORD *)(v14 + 36) == v83[1] && *(_DWORD *)(v14 + 32) == *v83)
          {
            if (v65 == -1) {
              uint64_t v65 = v17 & v62;
            }
LABEL_57:
            unint64_t v17 = ++v61 + v66;
            continue;
          }
          break;
        }
        uint64_t v85 = (unsigned __int8 *)(v63 + 16 * v67 + 10);
        if ((unsigned __int16)((v17 & v62) % 0x30) < 9u)
        {
          __int16 v86 = 0;
          unsigned __int16 v97 = (unsigned __int8 *)(v63 + 16 * v67 + 10);
          LOBYTE(v91) = (v17 & v62) % 0x30;
          goto LABEL_84;
        }
        __int16 v86 = 0;
        uint64_t v87 = (unsigned __int16)(v66 - 48 * v67 - 9) >> 3;
        if (!((unsigned __int16)(v66 - 48 * v67 - 9) >> 3))
        {
          unsigned __int16 v91 = (v17 & v62) % 0x30;
          v92 = (unsigned __int8 *)(v63 + 16 * v67 + 10);
          do
          {
LABEL_82:
            int v98 = *v92++;
            v86 += byte_20EBFB6[v98];
            v91 -= 8;
          }
          while (v91 > 8u);
          goto LABEL_83;
        }
        __int16 v88 = 0;
        uint64_t v89 = v87 + 1;
        uint64_t v90 = (v87 + 1) & 0x3FFE;
        unsigned __int16 v91 = v68 - 8 * v90;
        v92 = &v85[v90];
        int v93 = (unsigned __int8 *)(v64 + 16 * v67);
        uint64_t v94 = v90;
        do
        {
          uint64_t v95 = *(v93 - 1);
          int v96 = *v93;
          v93 += 2;
          v86 += byte_20EBFB6[v95];
          v88 += byte_20EBFB6[v96];
          v94 -= 2;
        }
        while (v94);
        v86 += v88;
        if (v89 != v90) {
          goto LABEL_82;
        }
LABEL_83:
        unsigned __int16 v97 = &v85[((unsigned __int16)(v68 - 9) >> 3) + 1];
LABEL_84:
        if (v13 != *(void *)(v70
                              + 12
                              * (unsigned __int16)(v86
                                                 + byte_20EBFB6[~(-1 << v91) & (unint64_t)*v97])))
          goto LABEL_57;
        if (v66 == -1)
        {
          unint64_t v104 = -1;
LABEL_95:
          a1 = v209;
          sub_AD3484(v14, (uint64_t *)&v218, v104, v220);
          uint64_t v105 = v221;
          goto LABEL_116;
        }
        a1 = v209;
        if ((unsigned __int16)v68 < 9u)
        {
          __int16 v101 = 0;
        }
        else
        {
          if ((((_WORD)v66 - 48 * (_WORD)v67 - 8) & 0xFFF8) != 0) {
            __int16 v99 = 8;
          }
          else {
            __int16 v99 = v66 - 48 * v67 - 8;
          }
          unsigned __int16 v100 = ~v99 + v66 - 48 * v67;
          if (v100 < 8u)
          {
            __int16 v101 = 0;
            unsigned __int16 v102 = v68;
            v103 = (unsigned __int8 *)(v63 + 16 * v67 + 10);
            goto LABEL_225;
          }
          __int16 v187 = 0;
          __int16 v188 = 0;
          uint64_t v189 = (v100 >> 3) + 1;
          unsigned __int16 v102 = v68 - 8 * (((v100 >> 3) + 1) & 0x3FFE);
          v103 = &v85[v189 & 0x3FFE];
          int v190 = (unsigned __int8 *)(v63 + 16 * v67 + 11);
          uint64_t v191 = v189 & 0x3FFE;
          do
          {
            uint64_t v192 = *(v190 - 1);
            int v193 = *v190;
            v190 += 2;
            v187 += byte_20EBFB6[v192];
            v188 += byte_20EBFB6[v193];
            v191 -= 2;
          }
          while (v191);
          __int16 v101 = v188 + v187;
          if ((v189 & 0x3FFE) != v189)
          {
            do
            {
LABEL_225:
              int v194 = *v103++;
              v101 += byte_20EBFB6[v194];
              v102 -= 8;
            }
            while (v102 > 8u);
          }
          v85 += ((unsigned __int16)(v68 - 9) >> 3) + 1;
          LOBYTE(v68) = v102;
        }
        uint64_t v195 = v63 + 16 * v67;
        v196 = *(_DWORD ***)(v14 + 56);
        unsigned __int16 v197 = v101 + byte_20EBFB6[~(-1 << v68) & (unint64_t)*v85];
        uint64_t v105 = (_DWORD *)(v70 + 12 * v197);
        if (*(unsigned __int16 *)(v195 + 8) == v197)
        {
          uint64_t v198 = v195 + 16;
          if ((_DWORD **)(v195 + 16) != v196)
          {
            while (1)
            {
              signed int v199 = (_DWORD **)v198;
              if (*(_WORD *)(v198 + 8)) {
                break;
              }
              v198 += 16;
              if (v199 + 2 == v196)
              {
                uint64_t v195 = *(void *)(v14 + 56);
                goto LABEL_233;
              }
            }
            uint64_t v195 = v198;
LABEL_233:
            uint64_t v105 = *v199;
            goto LABEL_234;
          }
        }
        else
        {
LABEL_234:
          if ((_DWORD **)v195 != v196 && v69)
          {
            do
            {
              if (*(_DWORD *)(v14 + 36) != v105[1] || *(_DWORD *)(v14 + 32) != *v105) {
                break;
              }
              v105 += 3;
              if (v105 == (_DWORD *)(*(void *)v195 + 12 * *(unsigned __int16 *)(v195 + 8)))
              {
                v195 += 16;
                if ((_DWORD **)v195 != v196)
                {
                  do
                  {
                    if (*(_WORD *)(v195 + 8))
                    {
                      uint64_t v105 = *(_DWORD **)v195;
                      goto LABEL_238;
                    }
                    v195 += 16;
                  }
                  while ((_DWORD **)v195 != v196);
                  uint64_t v105 = *(_DWORD **)(v195 - 16);
                }
                break;
              }
LABEL_238:
              ;
            }
            while ((_DWORD **)v195 != v196);
          }
        }
LABEL_116:
        unsigned int v119 = v105[2];
        if (v119 == -1)
        {
          int v120 = *(_DWORD *)(v14 + 112);
          *(_DWORD *)(v14 + 112) = v120 + 1;
          v105[2] = v120;
          v122 = *(unint64_t **)(v14 + 96);
          unint64_t v121 = *(void *)(v14 + 104);
          if ((unint64_t)v122 < v121)
          {
            unint64_t *v122 = v13;
            uint64_t v123 = (uint64_t)(v122 + 1);
            a1 = v209;
            goto LABEL_142;
          }
          unint64_t v124 = (unint64_t **)(v14 + 88);
          uint64_t v125 = *(char **)(v14 + 88);
          uint64_t v126 = ((char *)v122 - v125) >> 3;
          unint64_t v127 = v126 + 1;
          if ((unint64_t)(v126 + 1) >> 61) {
            sub_2E00();
          }
          uint64_t v128 = v121 - (void)v125;
          if (v128 >> 2 > v127) {
            unint64_t v127 = v128 >> 2;
          }
          if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v127 = 0x1FFFFFFFFFFFFFFFLL;
          }
          unint64_t v206 = v127;
          if (v127)
          {
            if (v127 >> 61) {
              sub_188D718();
            }
            unint64_t v129 = (char *)operator new(8 * v127);
            unint64_t v124 = (unint64_t **)(v14 + 88);
            uint64_t v130 = (unint64_t *)&v129[8 * v126];
            *uint64_t v130 = v13;
            uint64_t v123 = (uint64_t)(v130 + 1);
            if (v122 != (unint64_t *)v125)
            {
LABEL_129:
              unint64_t v131 = (char *)(v122 - 1) - v125;
              if (v131 < 0x58)
              {
                uint64_t v132 = v209;
                goto LABEL_138;
              }
              uint64_t v132 = v209;
              if ((unint64_t)(v125 - v129) < 0x20) {
                goto LABEL_254;
              }
              uint64_t v133 = (v131 >> 3) + 1;
              uint64_t v134 = 8 * (v133 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v135 = &v122[v134 / 0xFFFFFFFFFFFFFFF8];
              uint64_t v130 = (unint64_t *)((char *)v130 - v134);
              v136 = &v129[8 * v126 - 16];
              uint64_t v137 = v122 - 2;
              uint64_t v138 = v133 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v139 = *(_OWORD *)v137;
                *((_OWORD *)v136 - 1) = *((_OWORD *)v137 - 1);
                *(_OWORD *)v136 = v139;
                v136 -= 32;
                v137 -= 4;
                v138 -= 4;
              }
              while (v138);
              v122 = v135;
              if (v133 != (v133 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_254:
                do
                {
LABEL_138:
                  unint64_t v140 = *--v122;
                  *--uint64_t v130 = v140;
                }
                while (v122 != (unint64_t *)v125);
              }
              v122 = *v124;
              *(void *)(v14 + 88) = v130;
              *(void *)(v14 + 96) = v123;
              *(void *)(v14 + 104) = &v129[8 * v206];
              if (v122) {
LABEL_140:
              }
                operator delete(v122);
LABEL_141:
              a1 = v132;
LABEL_142:
              *(void *)(v14 + 96) = v123;
              unsigned int v119 = v105[2];
              *(double *)(a1 + 672) = *(double *)(a1 + 672) + 1.0;
              if (v208 == v119) {
                goto LABEL_201;
              }
              goto LABEL_143;
            }
          }
          else
          {
            unint64_t v129 = 0;
            uint64_t v130 = (unint64_t *)(8 * v126);
            *(void *)(8 * v126) = v13;
            uint64_t v123 = 8 * v126 + 8;
            if (v122 != (unint64_t *)v125) {
              goto LABEL_129;
            }
          }
          uint64_t v132 = v209;
          *(void *)(v14 + 88) = v130;
          *(void *)(v14 + 96) = v123;
          *(void *)(v14 + 104) = &v129[8 * v206];
          if (v122) {
            goto LABEL_140;
          }
          goto LABEL_141;
        }
        *(double *)(a1 + 672) = *(double *)(a1 + 672) + 1.0;
        if (v208 == v119) {
          goto LABEL_201;
        }
LABEL_143:
        unsigned int v141 = v119;
        int v142 = *((_DWORD *)v211 + 2);
        int v143 = v142 / -10;
        int v144 = v142 % 10;
        if (v142 < 0) {
          char v145 = -5;
        }
        else {
          char v145 = 5;
        }
        unsigned int v146 = (((-103 * (char)(v145 + v144)) >> 15) & 1) + ((-103 * (char)(v145 + v144)) >> 10);
        int v147 = v143 + v205;
        signed int v148 = v147 + v146;
        uint64_t v149 = *(void *)(a1 + 64);
        if (v149)
        {
          signed int v207 = v147 + v146;
          unsigned int v150 = 0;
          unsigned int v151 = *(_DWORD *)(a1 + 144) + ~a2;
          while (2)
          {
            LODWORD(v220[0]) = (v141 << *(_DWORD *)v149) | (v151 - v150);
            if (*(void *)(v149 + 88) == *(void *)(v149 + 48)) {
              goto LABEL_176;
            }
            unint64_t v152 = sub_AD72DC(v149 + 8, (unsigned int *)v220);
            if (v152 == -1) {
              goto LABEL_176;
            }
            uint64_t v153 = *(void *)(v149 + 56);
            v154 = (_DWORD **)(v153 + 16 * (v152 / 0x30));
            v155 = (unsigned __int8 *)v154 + 10;
            int v156 = v152 % 0x30;
            if ((unsigned __int16)(v152 % 0x30) >= 9u)
            {
              __int16 v157 = 0;
              uint64_t v158 = (unsigned __int16)(v152 % 0x30 - 9) >> 3;
              if ((unsigned __int16)(v152 % 0x30 - 9) >> 3)
              {
                __int16 v159 = 0;
                uint64_t v160 = v158 + 1;
                uint64_t v161 = (v158 + 1) & 0x3FFE;
                unsigned __int16 v162 = v156 - 8 * v161;
                unint64_t v163 = &v155[v161];
                v164 = (unsigned __int8 *)(v153 + 16 * (v152 / 0x30) + 11);
                uint64_t v165 = v161;
                do
                {
                  uint64_t v166 = *(v164 - 1);
                  int v167 = *v164;
                  v164 += 2;
                  v157 += byte_20EBDB6[v166];
                  v159 += byte_20EBDB6[v167];
                  v165 -= 2;
                }
                while (v165);
                v157 += v159;
                if (v160 == v161)
                {
LABEL_159:
                  v155 += ((unsigned __int16)(v156 - 9) >> 3) + 1;
                  LOBYTE(v156) = v162;
LABEL_160:
                  v169 = *(_DWORD ***)(v149 + 64);
                  unsigned __int16 v170 = v157 + byte_20EBDB6[~(-1 << v156) & (unint64_t)*v155];
                  if (*((unsigned __int16 *)v154 + 4) == v170)
                  {
                    v154 += 2;
                    if (v154 != v169)
                    {
                      while (1)
                      {
                        uint64_t v171 = v154;
                        if (*((_WORD *)v154 + 4)) {
                          break;
                        }
                        v154 += 2;
                        if (v171 + 2 == v169)
                        {
                          v154 = *(_DWORD ***)(v149 + 64);
                          break;
                        }
                      }
                      signed int v172 = *v171;
                      if (v154 != v169) {
                        goto LABEL_168;
                      }
                    }
LABEL_176:
                    signed int v173 = *(_DWORD *)(v149 + 4);
                    v150 += 2;
                    if (v173 != 0x7FFFFFFF || v150 > v151) {
                      goto LABEL_189;
                    }
                  }
                  else
                  {
                    signed int v172 = &(*v154)[2 * v170];
                    if (v154 == v169) {
                      goto LABEL_176;
                    }
LABEL_168:
                    if (*(void *)(v149 + 48))
                    {
                      while (*(_DWORD *)(v149 + 40) == *v172)
                      {
                        v172 += 2;
                        if (v172 == &(*v154)[2 * *((unsigned __int16 *)v154 + 4)])
                        {
                          while (1)
                          {
                            v154 += 2;
                            if (v154 == v169) {
                              goto LABEL_176;
                            }
                            if (*((_WORD *)v154 + 4))
                            {
                              signed int v172 = *v154;
                              break;
                            }
                          }
                        }
                        if (v154 == v169) {
                          break;
                        }
                      }
                    }
                    BOOL v40 = v154 == v169;
                    int v175 = v172 + 1;
                    if (v40) {
                      int v175 = (signed int *)(v149 + 4);
                    }
                    signed int v173 = *v175;
                    v150 += 2;
                    if (v173 != 0x7FFFFFFF || v150 > v151)
                    {
LABEL_189:
                      signed int v148 = v207;
                      BOOL v177 = v173 != 0x7FFFFFFF && v173 <= v207;
                      a1 = v209;
                      if (!v177) {
                        goto LABEL_201;
                      }
                      goto LABEL_194;
                    }
                  }
                  continue;
                }
              }
              else
              {
                unsigned __int16 v162 = v152 % 0x30;
                unint64_t v163 = (unsigned __int8 *)v154 + 10;
              }
              do
              {
                int v168 = *v163++;
                v157 += byte_20EBDB6[v168];
                v162 -= 8;
              }
              while (v162 > 8u);
              goto LABEL_159;
            }
            break;
          }
          __int16 v157 = 0;
          goto LABEL_160;
        }
LABEL_194:
        if (sub_ADBE54(a1, 1u, v141, a2, v148))
        {
          uint64_t v178 = *(int **)(a1 + 152);
          int v180 = *v178;
          uint64_t v179 = (uint64_t)(v178 + 2);
          int v217 = (v141 << v180) | a2;
          if (sub_AD72DC(v179, (unsigned int *)&v217) == -1)
          {
            unint64_t v182 = v181;
            if (sub_AF1FB8(v179, 1))
            {
              unint64_t v218 = v217 | 0x7FFFFFFF00000000;
              sub_AF22EC(v179, (unsigned int *)&v218, (uint64_t)v220);
            }
            else
            {
              unint64_t v218 = v217 | 0x7FFFFFFF00000000;
              sub_AF2504(v179, (uint64_t *)&v218, v182, v220);
            }
          }
        }
LABEL_201:
        unint64_t v9 = (unint64_t)v212;
        unint64_t v7 = (void *)((char *)v211 + 12);
        char v211 = v7;
        if (v7 == v212)
        {
          unint64_t v7 = v213;
          unint64_t v11 = v214[0];
          char v211 = v213;
          int v10 = 1;
          unsigned __int8 v215 = 1;
          if (*(unsigned char *)(v210 + 16)) {
            goto LABEL_205;
          }
        }
        else
        {
          int v10 = v215;
          unint64_t v11 = v214[0];
          if (!*(unsigned char *)(v210 + 16)) {
            goto LABEL_9;
          }
LABEL_205:
          if (v10) {
            unint64_t v183 = v11;
          }
          else {
            unint64_t v183 = (unint64_t)v212;
          }
          if ((unint64_t)v7 < v183)
          {
            while (1)
            {
              unint64_t v185 = __ROR8__(*v7, 32);
              if (HIDWORD(v185) == 1 && (v185 + 3) < 2) {
                break;
              }
              if (sub_2AB7E4(**(void **)(v210 + 4120)))
              {
                LOBYTE(v10) = v215;
                unint64_t v7 = v211;
                unint64_t v9 = (unint64_t)v212;
                break;
              }
              unint64_t v9 = (unint64_t)v212;
              unint64_t v7 = (void *)((char *)v211 + 12);
              char v211 = v7;
              if (v7 == v212)
              {
                unint64_t v7 = v213;
                char v211 = v213;
                LOBYTE(v10) = 1;
                unsigned __int8 v215 = 1;
                if ((unint64_t)v213 >= v214[0]) {
                  break;
                }
              }
              else
              {
                LOBYTE(v10) = v215;
                uint64_t v184 = &v212;
                if (v215) {
                  uint64_t v184 = v214;
                }
                if ((unint64_t)v7 >= *v184) {
                  break;
                }
              }
            }
            unint64_t v11 = v214[0];
          }
        }
LABEL_9:
        if ((_BYTE)v10) {
          unint64_t v9 = v11;
        }
      }
      uint64_t v3 = v203 + 1;
    }
    while (v203 + 1 != v202);
  }
  double result = sub_72688((uint64_t)v216) + *(double *)(a1 + 616);
  *(double *)(a1 + 616) = result;
  return result;
}

double sub_ADA848(void *a1, unsigned int a2)
{
  sub_725D0((uint64_t)v307);
  unsigned int v4 = (unsigned int *)a1[51];
  unint64_t v5 = (unsigned int *)a1[52];
  if (v4 != v5)
  {
    uint64_t v6 = a1[48];
    uint64_t v7 = a1[45];
    unint64_t v8 = (unsigned int *)a1[51];
    do
    {
      unsigned int v9 = *v8++;
      *(void *)(v6 + (((unint64_t)v9 >> 3) & 0x1FFFFFF8)) &= ~(1 << v9);
      *(_DWORD *)(v7 + 4 * v9) = -1;
    }
    while (v8 != v5);
  }
  a1[52] = v4;
  int v10 = (unsigned int *)a1[36];
  v296 = (unsigned int *)a1[37];
  if (v10 != v296)
  {
    v287 = (void **)(a1 + 51);
    v297 = a1;
    unint64_t v298 = a2;
    uint64_t v288 = a2 + 1;
    v291 = a1 + 48;
    while (1)
    {
      v299 = v10;
      unint64_t v11 = (unint64_t *)sub_A3F32C((void *)(a1[6] + 88), *v10);
      sub_A1DF34((uint64_t)v300, (void *)a1[5], *v11, 0, 0, 0);
      uint64_t v12 = v303;
LABEL_8:
      unint64_t v13 = (unint64_t)v304;
LABEL_9:
      if ((unint64_t)v12 < v13) {
        break;
      }
LABEL_6:
      int v10 = v299 + 1;
      if (v299 + 1 == v296) {
        goto LABEL_331;
      }
    }
    uint64_t v14 = 0;
    unint64_t v15 = __ROR8__(*v12, 32);
    uint64_t v16 = a1[7];
    uint64_t v17 = *(void *)(v16 + 72) - 1;
    unint64_t v18 = 0xC4CEB9FE1A85EC53
        * ((0xFF51AFD7ED558CCDLL * (v15 ^ (v15 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v15 ^ (v15 >> 33))) >> 33));
    unint64_t v19 = v18 ^ (v18 >> 33);
    uint64_t v20 = *(void *)(v16 + 48);
    uint64_t v21 = v20 + 11;
    uint64_t v22 = -1;
    for (unint64_t i = v19; ; unint64_t i = v14 + v24)
    {
      uint64_t v24 = i & v17;
      unint64_t v25 = (i & v17) / 0x30;
      unint64_t v26 = v24 - 48 * v25;
      if (((*(unsigned __int8 *)(v20 + 16 * v25 + (v26 >> 3) + 10) >> (v26 & 7)) & 1) == 0)
      {
        if (v22 == -1) {
          unint64_t v62 = v24;
        }
        else {
          unint64_t v62 = v22;
        }
        if (!sub_AD2F40(a1[7], 1)) {
          goto LABEL_95;
        }
        goto LABEL_52;
      }
      uint64_t v27 = *(void *)(v20 + 16 * v25);
      if (!*(void *)(v16 + 40)) {
        goto LABEL_30;
      }
      uint64_t v28 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
      if ((unsigned __int16)(v24 - 48 * v25) < 9u)
      {
        __int16 v29 = 0;
        LOBYTE(v34) = v24 - 48 * v25;
        goto LABEL_26;
      }
      __int16 v29 = 0;
      uint64_t v30 = (unsigned __int16)(v24 - 48 * v25 - 9) >> 3;
      if ((unsigned __int16)(v24 - 48 * v25 - 9) >> 3)
      {
        __int16 v31 = 0;
        uint64_t v32 = v30 + 1;
        uint64_t v33 = (v30 + 1) & 0x3FFE;
        unsigned __int16 v34 = v26 - 8 * v33;
        uint64_t v35 = &v28[v33];
        uint64_t v36 = (unsigned __int8 *)(v21 + 16 * v25);
        uint64_t v37 = v33;
        do
        {
          uint64_t v38 = *(v36 - 1);
          int v39 = *v36;
          v36 += 2;
          v29 += byte_20EBFB6[v38];
          v31 += byte_20EBFB6[v39];
          v37 -= 2;
        }
        while (v37);
        v29 += v31;
        if (v32 == v33) {
          goto LABEL_25;
        }
      }
      else
      {
        unsigned __int16 v34 = v24 - 48 * v25;
        uint64_t v35 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
      }
      do
      {
        int v40 = *v35++;
        v29 += byte_20EBFB6[v40];
        v34 -= 8;
      }
      while (v34 > 8u);
LABEL_25:
      v28 += ((unsigned __int16)(v26 - 9) >> 3) + 1;
LABEL_26:
      uint64_t v41 = (_DWORD *)(v27
                     + 12
                     * (unsigned __int16)(v29 + byte_20EBFB6[~(-1 << v34) & (unint64_t)*v28]));
      if (*(_DWORD *)(v16 + 36) == v41[1] && *(_DWORD *)(v16 + 32) == *v41)
      {
        if (v22 == -1) {
          uint64_t v22 = v24;
        }
        goto LABEL_13;
      }
LABEL_30:
      uint64_t v43 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
      if ((unsigned __int16)(v24 - 48 * v25) < 9u)
      {
        __int16 v44 = 0;
        __int16 v55 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
        LOBYTE(v49) = v24 - 48 * v25;
        goto LABEL_40;
      }
      __int16 v44 = 0;
      uint64_t v45 = (unsigned __int16)(v24 - 48 * v25 - 9) >> 3;
      if ((unsigned __int16)(v24 - 48 * v25 - 9) >> 3)
      {
        __int16 v46 = 0;
        uint64_t v47 = v45 + 1;
        uint64_t v48 = (v45 + 1) & 0x3FFE;
        unsigned __int16 v49 = v26 - 8 * v48;
        uint64_t v50 = &v43[v48];
        uint64_t v51 = (unsigned __int8 *)(v21 + 16 * v25);
        uint64_t v52 = v48;
        do
        {
          uint64_t v53 = *(v51 - 1);
          int v54 = *v51;
          v51 += 2;
          v44 += byte_20EBFB6[v53];
          v46 += byte_20EBFB6[v54];
          v52 -= 2;
        }
        while (v52);
        v44 += v46;
        if (v47 == v48) {
          goto LABEL_39;
        }
      }
      else
      {
        unsigned __int16 v49 = v24 - 48 * v25;
        uint64_t v50 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
      }
      do
      {
        int v56 = *v50++;
        v44 += byte_20EBFB6[v56];
        v49 -= 8;
      }
      while (v49 > 8u);
LABEL_39:
      __int16 v55 = &v43[((unsigned __int16)(v26 - 9) >> 3) + 1];
LABEL_40:
      if (v15 == *(void *)(v27
                            + 12
                            * (unsigned __int16)(v44 + byte_20EBFB6[~(-1 << v49) & (unint64_t)*v55])))
      {
        if (v24 != -1)
        {
          if ((unsigned __int16)(v24 - 48 * v25) < 9u)
          {
            __int16 v59 = 0;
          }
          else
          {
            if ((((_WORD)v24 - 48 * (_WORD)v25 - 8) & 0xFFF8) != 0) {
              __int16 v57 = 8;
            }
            else {
              __int16 v57 = v24 - 48 * v25 - 8;
            }
            unsigned __int16 v58 = ~v57 + v24 - 48 * v25;
            if (v58 < 8u)
            {
              __int16 v59 = 0;
              unsigned __int16 v60 = v26;
              uint64_t v61 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
              goto LABEL_100;
            }
            __int16 v108 = 0;
            __int16 v109 = 0;
            uint64_t v110 = (v58 >> 3) + 1;
            unsigned __int16 v60 = v26 - 8 * (((v58 >> 3) + 1) & 0x3FFE);
            uint64_t v61 = &v43[v110 & 0x3FFE];
            int v111 = (unsigned __int8 *)(v20 + 16 * v25 + 11);
            uint64_t v112 = v110 & 0x3FFE;
            do
            {
              uint64_t v113 = *(v111 - 1);
              int v114 = *v111;
              v111 += 2;
              v108 += byte_20EBFB6[v113];
              v109 += byte_20EBFB6[v114];
              v112 -= 2;
            }
            while (v112);
            __int16 v59 = v109 + v108;
            if ((v110 & 0x3FFE) != v110)
            {
              do
              {
LABEL_100:
                int v115 = *v61++;
                v59 += byte_20EBFB6[v115];
                v60 -= 8;
              }
              while (v60 > 8u);
            }
            v43 += ((unsigned __int16)(v26 - 9) >> 3) + 1;
            LOBYTE(v26) = v60;
          }
          uint64_t v116 = *(void *)(v16 + 56);
          unsigned __int16 v117 = v59 + byte_20EBFB6[~(-1 << v26) & (unint64_t)*v43];
          uint64_t v118 = v20 + 16 * v25;
          if (*(unsigned __int16 *)(v118 + 8) != v117 || v118 + 16 == v116)
          {
            uint64_t v107 = (_DWORD *)(v27 + 12 * v117);
          }
          else
          {
            uint64_t v120 = v118 + 32;
            do
            {
              if (*(_WORD *)(v120 - 8)) {
                BOOL v121 = 1;
              }
              else {
                BOOL v121 = v120 == v116;
              }
              v120 += 16;
            }
            while (!v121);
            uint64_t v107 = *(_DWORD **)(v120 - 32);
          }
          goto LABEL_114;
        }
        unint64_t v62 = -1;
        if (!sub_AD2F40(a1[7], 1))
        {
LABEL_95:
          unint64_t v308 = v15;
          int v309 = -1;
          sub_AD3484(v16, (uint64_t *)&v308, v62, v310);
          uint64_t v107 = v311;
          goto LABEL_114;
        }
LABEL_52:
        uint64_t v63 = 0;
        unint64_t v308 = v15;
        int v309 = -1;
        uint64_t v64 = *(void *)(v16 + 72) - 1;
        uint64_t v65 = *(void *)(v16 + 48);
        uint64_t v66 = v65 + 11;
        uint64_t v67 = -1;
        while (2)
        {
          uint64_t v68 = v19 & v64;
          unint64_t v69 = (v19 & v64) / 0x30;
          unint64_t v70 = (v19 & v64) % 0x30;
          if (((*(unsigned __int8 *)(v65 + 16 * v69 + (v70 >> 3) + 10) >> (v70 & 7)) & 1) == 0)
          {
            if (v67 == -1) {
              unint64_t v106 = v19 & v64;
            }
            else {
              unint64_t v106 = v67;
            }
            goto LABEL_93;
          }
          uint64_t v71 = *(void *)(v16 + 40);
          uint64_t v72 = *(void *)(v65 + 16 * v69);
          if (!v71) {
            break;
          }
          uint64_t v73 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
          if ((unsigned __int16)((v19 & v64) % 0x30) < 9u)
          {
            __int16 v74 = 0;
            LOBYTE(v75) = (v19 & v64) % 0x30;
            goto LABEL_68;
          }
          __int16 v74 = 0;
          uint64_t v75 = (unsigned __int16)(v68 - 48 * v69 - 9) >> 3;
          if (!((unsigned __int16)(v68 - 48 * v69 - 9) >> 3))
          {
            LODWORD(v75) = (v19 & v64) % 0x30;
            uint64_t v79 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
            do
            {
LABEL_66:
              int v84 = *v79++;
              v74 += byte_20EBFB6[v84];
              LOWORD(v75) = v75 - 8;
            }
            while ((unsigned __int16)v75 > 8u);
            goto LABEL_67;
          }
          __int16 v76 = 0;
          uint64_t v77 = v75 + 1;
          uint64_t v78 = (v75 + 1) & 0x3FFE;
          LOWORD(v75) = v70 - 8 * v78;
          uint64_t v79 = &v73[v78];
          uint64_t v80 = (unsigned __int8 *)(v66 + 16 * v69);
          uint64_t v81 = v78;
          do
          {
            uint64_t v82 = *(v80 - 1);
            int v83 = *v80;
            v80 += 2;
            v74 += byte_20EBFB6[v82];
            v76 += byte_20EBFB6[v83];
            v81 -= 2;
          }
          while (v81);
          v74 += v76;
          if (v77 != v78) {
            goto LABEL_66;
          }
LABEL_67:
          v73 += ((unsigned __int16)(v70 - 9) >> 3) + 1;
LABEL_68:
          uint64_t v85 = (_DWORD *)(v72
                         + 12
                         * (unsigned __int16)(v74 + byte_20EBFB6[~(-1 << v75) & (unint64_t)*v73]));
          if (*(_DWORD *)(v16 + 36) == v85[1] && *(_DWORD *)(v16 + 32) == *v85)
          {
            if (v67 == -1) {
              uint64_t v67 = v68;
            }
LABEL_55:
            unint64_t v19 = ++v63 + v68;
            continue;
          }
          break;
        }
        uint64_t v87 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
        if ((unsigned __int16)v70 < 9u)
        {
          __int16 v88 = 0;
          __int16 v99 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
          LOBYTE(v93) = v70;
          goto LABEL_82;
        }
        __int16 v88 = 0;
        uint64_t v89 = (unsigned __int16)(v68 - 48 * v69 - 9) >> 3;
        if (!((unsigned __int16)(v68 - 48 * v69 - 9) >> 3))
        {
          unsigned __int16 v93 = v70;
          uint64_t v94 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
          do
          {
LABEL_80:
            int v100 = *v94++;
            v88 += byte_20EBFB6[v100];
            v93 -= 8;
          }
          while (v93 > 8u);
          goto LABEL_81;
        }
        __int16 v90 = 0;
        uint64_t v91 = v89 + 1;
        uint64_t v92 = (v89 + 1) & 0x3FFE;
        unsigned __int16 v93 = v70 - 8 * v92;
        uint64_t v94 = &v87[v92];
        uint64_t v95 = (unsigned __int8 *)(v66 + 16 * v69);
        uint64_t v96 = v92;
        do
        {
          uint64_t v97 = *(v95 - 1);
          int v98 = *v95;
          v95 += 2;
          v88 += byte_20EBFB6[v97];
          v90 += byte_20EBFB6[v98];
          v96 -= 2;
        }
        while (v96);
        v88 += v90;
        if (v91 != v92) {
          goto LABEL_80;
        }
LABEL_81:
        __int16 v99 = &v87[((unsigned __int16)(v70 - 9) >> 3) + 1];
LABEL_82:
        if (v15 != *(void *)(v72
                              + 12
                              * (unsigned __int16)(v88
                                                 + byte_20EBFB6[~(-1 << v93) & (unint64_t)*v99])))
          goto LABEL_55;
        if (v68 == -1)
        {
          unint64_t v106 = -1;
LABEL_93:
          sub_AD3484(v16, (uint64_t *)&v308, v106, v310);
          uint64_t v107 = v311;
          goto LABEL_114;
        }
        if ((unsigned __int16)v70 < 9u)
        {
          __int16 v103 = 0;
        }
        else
        {
          if ((((_WORD)v68 - 48 * (_WORD)v69 - 8) & 0xFFF8) != 0) {
            __int16 v101 = 8;
          }
          else {
            __int16 v101 = v68 - 48 * v69 - 8;
          }
          unsigned __int16 v102 = ~v101 + v68 - 48 * v69;
          if (v102 < 8u)
          {
            __int16 v103 = 0;
            unsigned __int16 v104 = v70;
            uint64_t v105 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
            goto LABEL_182;
          }
          __int16 v187 = 0;
          __int16 v188 = 0;
          uint64_t v189 = (v102 >> 3) + 1;
          unsigned __int16 v104 = v70 - 8 * (((v102 >> 3) + 1) & 0x3FFE);
          uint64_t v105 = &v87[v189 & 0x3FFE];
          int v190 = (unsigned __int8 *)(v65 + 16 * v69 + 11);
          uint64_t v191 = v189 & 0x3FFE;
          do
          {
            uint64_t v192 = *(v190 - 1);
            int v193 = *v190;
            v190 += 2;
            v187 += byte_20EBFB6[v192];
            v188 += byte_20EBFB6[v193];
            v191 -= 2;
          }
          while (v191);
          __int16 v103 = v188 + v187;
          if ((v189 & 0x3FFE) != v189)
          {
            do
            {
LABEL_182:
              int v194 = *v105++;
              v103 += byte_20EBFB6[v194];
              v104 -= 8;
            }
            while (v104 > 8u);
          }
          v87 += ((unsigned __int16)(v70 - 9) >> 3) + 1;
          LOBYTE(v70) = v104;
        }
        uint64_t v195 = v65 + 16 * v69;
        v196 = *(_DWORD ***)(v16 + 56);
        unsigned __int16 v197 = v103 + byte_20EBFB6[~(-1 << v70) & (unint64_t)*v87];
        uint64_t v107 = (_DWORD *)(v72 + 12 * v197);
        if (*(unsigned __int16 *)(v195 + 8) == v197)
        {
          uint64_t v198 = v195 + 16;
          if ((_DWORD **)(v195 + 16) != v196)
          {
            while (1)
            {
              signed int v199 = (_DWORD **)v198;
              if (*(_WORD *)(v198 + 8)) {
                break;
              }
              v198 += 16;
              if (v199 + 2 == v196)
              {
                uint64_t v195 = *(void *)(v16 + 56);
                goto LABEL_235;
              }
            }
            uint64_t v195 = v198;
LABEL_235:
            uint64_t v107 = *v199;
            goto LABEL_236;
          }
        }
        else
        {
LABEL_236:
          if ((_DWORD **)v195 != v196 && v71)
          {
            do
            {
              if (*(_DWORD *)(v16 + 36) != v107[1] || *(_DWORD *)(v16 + 32) != *v107) {
                break;
              }
              v107 += 3;
              if (v107 == (_DWORD *)(*(void *)v195 + 12 * *(unsigned __int16 *)(v195 + 8)))
              {
                v195 += 16;
                if ((_DWORD **)v195 != v196)
                {
                  do
                  {
                    if (*(_WORD *)(v195 + 8))
                    {
                      uint64_t v107 = *(_DWORD **)v195;
                      goto LABEL_240;
                    }
                    v195 += 16;
                  }
                  while ((_DWORD **)v195 != v196);
                  uint64_t v107 = *(_DWORD **)(v195 - 16);
                }
                break;
              }
LABEL_240:
              ;
            }
            while ((_DWORD **)v195 != v196);
          }
        }
LABEL_114:
        unsigned int v122 = v107[2];
        if (v122 == -1)
        {
          int v126 = *(_DWORD *)(v16 + 112);
          *(_DWORD *)(v16 + 112) = v126 + 1;
          v107[2] = v126;
          uint64_t v128 = *(unint64_t **)(v16 + 96);
          unint64_t v127 = *(void *)(v16 + 104);
          if ((unint64_t)v128 < v127)
          {
            unint64_t *v128 = v15;
            uint64_t v129 = (uint64_t)(v128 + 1);
            goto LABEL_139;
          }
          uint64_t v130 = (unint64_t **)(v16 + 88);
          unint64_t v131 = *(char **)(v16 + 88);
          uint64_t v132 = ((char *)v128 - v131) >> 3;
          unint64_t v133 = v132 + 1;
          if ((unint64_t)(v132 + 1) >> 61) {
            sub_2E00();
          }
          uint64_t v134 = v127 - (void)v131;
          if (v134 >> 2 > v133) {
            unint64_t v133 = v134 >> 2;
          }
          if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v133 = 0x1FFFFFFFFFFFFFFFLL;
          }
          if (v133)
          {
            if (v133 >> 61) {
              goto LABEL_332;
            }
            unint64_t v135 = v133;
            v136 = (char *)operator new(8 * v133);
            uint64_t v130 = (unint64_t **)(v16 + 88);
            uint64_t v137 = (unint64_t *)&v136[8 * v132];
            *uint64_t v137 = v15;
            uint64_t v129 = (uint64_t)(v137 + 1);
            if (v128 != (unint64_t *)v131)
            {
LABEL_127:
              unint64_t v138 = (char *)(v128 - 1) - v131;
              if (v138 < 0x58) {
                goto LABEL_337;
              }
              if ((unint64_t)(v131 - v136) < 0x20) {
                goto LABEL_337;
              }
              uint64_t v139 = (v138 >> 3) + 1;
              uint64_t v140 = 8 * (v139 & 0x3FFFFFFFFFFFFFFCLL);
              unsigned int v141 = &v128[v140 / 0xFFFFFFFFFFFFFFF8];
              uint64_t v137 = (unint64_t *)((char *)v137 - v140);
              int v142 = &v136[8 * v132 - 16];
              int v143 = v128 - 2;
              uint64_t v144 = v139 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v145 = *(_OWORD *)v143;
                *((_OWORD *)v142 - 1) = *((_OWORD *)v143 - 1);
                *(_OWORD *)int v142 = v145;
                v142 -= 32;
                v143 -= 4;
                v144 -= 4;
              }
              while (v144);
              uint64_t v128 = v141;
              if (v139 != (v139 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_337:
                do
                {
                  unint64_t v146 = *--v128;
                  *--uint64_t v137 = v146;
                }
                while (v128 != (unint64_t *)v131);
              }
              uint64_t v128 = *v130;
              *(void *)(v16 + 88) = v137;
              *(void *)(v16 + 96) = v129;
              *(void *)(v16 + 104) = &v136[8 * v135];
              a1 = v297;
              if (v128) {
LABEL_138:
              }
                operator delete(v128);
LABEL_139:
              *(void *)(v16 + 96) = v129;
              unsigned int v122 = v107[2];
              unsigned int v123 = *((unsigned __int16 *)v303 + 5);
              unint64_t v124 = (uint64_t *)a1[12];
              unint64_t v125 = v122;
              if (!v124) {
                goto LABEL_144;
              }
              goto LABEL_140;
            }
          }
          else
          {
            unint64_t v135 = 0;
            v136 = 0;
            uint64_t v137 = (unint64_t *)(8 * v132);
            *(void *)(8 * v132) = v15;
            uint64_t v129 = 8 * v132 + 8;
            if (v128 != (unint64_t *)v131) {
              goto LABEL_127;
            }
          }
          *(void *)(v16 + 88) = v137;
          *(void *)(v16 + 96) = v129;
          *(void *)(v16 + 104) = &v136[8 * v135];
          a1 = v297;
          if (v128) {
            goto LABEL_138;
          }
          goto LABEL_139;
        }
        unsigned int v123 = *((unsigned __int16 *)v303 + 5);
        unint64_t v124 = (uint64_t *)a1[12];
        unint64_t v125 = v122;
        if (!v124) {
          goto LABEL_144;
        }
LABEL_140:
        uint64_t v147 = *v124;
        unint64_t v148 = 0xAAAAAAAAAAAAAAABLL * ((v124[1] - *v124) >> 4);
        if (v148 <= v298)
        {
          unsigned int v149 = v123;
          sub_A3F0F0((uint64_t)v124, v288 - v148);
          unsigned int v123 = v149;
          uint64_t v147 = *v124;
        }
        unsigned int v150 = (void *)(v147 + 48 * v298);
        if (v150[1] <= v125 || ((*(void *)(*v150 + ((v125 >> 3) & 0x1FFFFFF8)) >> v125) & 1) == 0) {
          goto LABEL_225;
        }
LABEL_144:
        unint64_t v151 = v125 >> 6;
        if (a1[49] <= v125)
        {
          v155 = (unsigned char *)a1[45];
          uint64_t v158 = (unsigned char *)a1[46];
          int64_t v159 = v158 - v155;
          unint64_t v160 = (v158 - v155) >> 2;
          if (v160 <= v125) {
            goto LABEL_152;
          }
LABEL_199:
          uint64_t v209 = *(void *)(*v291 + 8 * v151);
          a1 = v297;
          if ((v209 & (1 << v125)) == 0)
          {
            *(void *)(*v291 + 8 * v151) = v209 | (1 << v125);
            char v211 = (char *)v297[52];
            unint64_t v210 = v297[53];
            if ((unint64_t)v211 < v210)
            {
              *(_DWORD *)char v211 = v122;
              uint64_t v212 = (uint64_t)(v211 + 4);
              goto LABEL_223;
            }
            unint64_t v213 = (char *)*v287;
            uint64_t v214 = v211 - (unsigned char *)*v287;
            uint64_t v215 = v214 >> 2;
            unint64_t v216 = (v214 >> 2) + 1;
            if (v216 >> 62) {
LABEL_334:
            }
              sub_2E00();
            uint64_t v217 = v210 - (void)v213;
            if (v217 >> 1 > v216) {
              unint64_t v216 = v217 >> 1;
            }
            if ((unint64_t)v217 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v218 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v218 = v216;
            }
            unsigned int v294 = v123;
            if (v218)
            {
              if (v218 >> 62) {
                goto LABEL_332;
              }
              int v219 = operator new(4 * v218);
              v220 = (unsigned int *)&v219[4 * v215];
              unsigned int *v220 = v122;
              uint64_t v212 = (uint64_t)(v220 + 1);
              if (v211 != v213)
              {
LABEL_211:
                unint64_t v221 = v211 - 4 - v213;
                if (v221 < 0x2C) {
                  goto LABEL_338;
                }
                if ((unint64_t)(v211 - &v219[v214]) < 0x20) {
                  goto LABEL_338;
                }
                uint64_t v222 = (v221 >> 2) + 1;
                uint64_t v223 = 4 * (v222 & 0x7FFFFFFFFFFFFFF8);
                unint64_t v224 = &v211[-v223];
                v220 = (unsigned int *)((char *)v220 - v223);
                int v225 = &v219[4 * v215 - 16];
                v226 = v211 - 16;
                uint64_t v227 = v222 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v228 = *(_OWORD *)v226;
                  *(v225 - 1) = *((_OWORD *)v226 - 1);
                  *int v225 = v228;
                  v225 -= 2;
                  v226 -= 32;
                  v227 -= 8;
                }
                while (v227);
                char v211 = v224;
                if (v222 != (v222 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_338:
                  do
                  {
                    unsigned int v229 = *((_DWORD *)v211 - 1);
                    v211 -= 4;
                    *--v220 = v229;
                  }
                  while (v211 != v213);
                }
              }
            }
            else
            {
              int v219 = 0;
              v220 = (unsigned int *)(4 * v215);
              *(_DWORD *)(4 * v215) = v122;
              uint64_t v212 = 4 * v215 + 4;
              if (v211 != v213) {
                goto LABEL_211;
              }
            }
            a1 = v297;
            v297[51] = v220;
            v297[52] = v212;
            v297[53] = &v219[4 * v218];
            if (v213) {
              operator delete(v213);
            }
            unsigned int v123 = v294;
LABEL_223:
            a1[52] = v212;
          }
          *(_DWORD *)(a1[45] + 4 * v125) = v123;
          goto LABEL_225;
        }
        uint64_t v152 = a1[48];
        uint64_t v153 = *(void *)(v152 + 8 * v151);
        uint64_t v154 = 1 << v125;
        v155 = (unsigned char *)a1[45];
        if ((v153 & (1 << v125)) == 0) {
          goto LABEL_149;
        }
        int v156 = (unsigned char *)a1[46];
        unint64_t v157 = (v156 - v155) >> 2;
        if (v157 <= v125)
        {
          unint64_t v174 = v122 + 1;
          BOOL v175 = v174 >= v157;
          unint64_t v176 = v174 - v157;
          unsigned int v293 = v123;
          if (v174 <= v157)
          {
            a1 = v297;
            if (!v175) {
              v297[46] = &v155[4 * v174];
            }
          }
          else
          {
            uint64_t v177 = v297[47];
            if (v176 <= (v177 - (uint64_t)v156) >> 2)
            {
              uint64_t v200 = 4 * v176;
              memset(v156, 255, 4 * v176);
              unint64_t v174 = v122 + 1;
              v297[46] = &v156[v200];
              a1 = v297;
            }
            else
            {
              unint64_t v178 = v174 - v157;
              uint64_t v179 = v177 - (void)v155;
              uint64_t v180 = v179 >> 1;
              if (v179 >> 1 <= v174) {
                uint64_t v180 = v122 + 1;
              }
              BOOL v175 = (unint64_t)v179 >= 0x7FFFFFFFFFFFFFFCLL;
              unint64_t v181 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v175) {
                unint64_t v181 = v180;
              }
              if (v181 >> 62) {
                goto LABEL_332;
              }
              uint64_t v286 = 4 * v181;
              v284 = operator new(4 * v181);
              size_t v182 = 4 * v178;
              unint64_t v183 = &v284[4 * v157];
              size_t v282 = v182;
              memset(v183, 255, v182);
              if (v156 == v155)
              {
                unint64_t v185 = &v284[4 * v157];
                unint64_t v174 = v122 + 1;
                unsigned __int16 v186 = v284;
              }
              else
              {
                unint64_t v184 = v156 - 4 - v155;
                if (v184 < 0x2C)
                {
                  unint64_t v185 = &v284[4 * v157];
                  unint64_t v174 = v122 + 1;
                  unsigned __int16 v186 = v284;
                  goto LABEL_256;
                }
                unsigned __int16 v186 = v284;
                unint64_t v185 = &v284[4 * v157];
                unint64_t v174 = v122 + 1;
                if ((unint64_t)(v155 - v284) < 0x20) {
                  goto LABEL_339;
                }
                uint64_t v232 = (v184 >> 2) + 1;
                uint64_t v233 = 4 * (v232 & 0x7FFFFFFFFFFFFFF8);
                v234 = &v156[-v233];
                unint64_t v185 = &v183[-v233];
                v235 = &v284[4 * v157 - 16];
                v236 = (long long *)(v156 - 16);
                uint64_t v237 = v232 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v238 = *v236;
                  *(v235 - 1) = *(v236 - 1);
                  _OWORD *v235 = v238;
                  v235 -= 2;
                  v236 -= 2;
                  v237 -= 8;
                }
                while (v237);
                int v156 = v234;
                if (v232 != (v232 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_339:
                  do
                  {
LABEL_256:
                    int v239 = *((_DWORD *)v156 - 1);
                    v156 -= 4;
                    *((_DWORD *)v185 - 1) = v239;
                    v185 -= 4;
                  }
                  while (v156 != v155);
                }
              }
              a1 = v297;
              v297[45] = v185;
              v297[46] = &v183[v282];
              v297[47] = &v186[v286];
              if (v155)
              {
                operator delete(v155);
                unint64_t v174 = v122 + 1;
              }
            }
          }
          sub_A3E96C((uint64_t)v291, v174, 0);
          uint64_t v152 = *v291;
          unint64_t v151 = v125 >> 6;
          uint64_t v153 = *(void *)(*v291 + 8 * (v125 >> 6));
          unsigned int v123 = v293;
          if ((v153 & v154) == 0) {
            goto LABEL_260;
          }
LABEL_148:
          v155 = (unsigned char *)a1[45];
          if (*(_DWORD *)&v155[4 * v125] >= v123) {
            goto LABEL_225;
          }
LABEL_149:
          uint64_t v158 = (unsigned char *)a1[46];
          int64_t v159 = v158 - v155;
          unint64_t v160 = (v158 - v155) >> 2;
          if (v160 > v125) {
            goto LABEL_199;
          }
LABEL_152:
          unint64_t v161 = v122 + 1;
          unint64_t v162 = v161 - v160;
          unsigned int v292 = v123;
          unint64_t v289 = v151;
          if (v161 <= v160)
          {
            if (v161 < v160) {
              v297[46] = &v155[4 * v161];
            }
          }
          else
          {
            uint64_t v163 = v297[47];
            if (v162 <= (v163 - (uint64_t)v158) >> 2)
            {
              memset(v158, 255, 4 * v162);
              unint64_t v161 = v122 + 1;
              v297[46] = &v158[4 * v162];
            }
            else
            {
              uint64_t v164 = v163 - (void)v155;
              uint64_t v165 = v164 >> 1;
              if (v164 >> 1 <= v161) {
                uint64_t v165 = v122 + 1;
              }
              BOOL v175 = (unint64_t)v164 >= 0x7FFFFFFFFFFFFFFCLL;
              unint64_t v166 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v175) {
                unint64_t v166 = v165;
              }
              if (v166 >> 62) {
                goto LABEL_332;
              }
              uint64_t v285 = 4 * v166;
              v283 = operator new(4 * v166);
              memset(&v283[4 * v160], 255, 4 * v162);
              if (v158 == v155)
              {
                v169 = &v283[4 * v160];
                unsigned __int16 v170 = v297;
                int v167 = v169;
                unint64_t v161 = v122 + 1;
                uint64_t v171 = v283;
                uint64_t v172 = v285;
                uint64_t v173 = 4 * v162;
              }
              else
              {
                int v167 = &v283[4 * v160];
                unint64_t v168 = v158 - 4 - v155;
                if (v168 < 0x2C)
                {
                  v169 = &v283[4 * v160];
                  unsigned __int16 v170 = v297;
                  unint64_t v161 = v122 + 1;
                  uint64_t v171 = v283;
                  uint64_t v172 = v285;
                  uint64_t v173 = 4 * v162;
                  goto LABEL_195;
                }
                uint64_t v171 = v283;
                uint64_t v172 = v285;
                v169 = &v283[4 * v160];
                unsigned __int16 v170 = v297;
                unint64_t v161 = v122 + 1;
                uint64_t v173 = 4 * v162;
                if ((unint64_t)(&v158[-v159] - v283) < 0x20) {
                  goto LABEL_340;
                }
                uint64_t v201 = (v168 >> 2) + 1;
                uint64_t v202 = 4 * (v201 & 0x7FFFFFFFFFFFFFF8);
                v203 = &v158[-v202];
                v169 = &v283[4 * v160 - v202];
                unsigned int v204 = &v283[4 * v160 - 16];
                int v205 = (long long *)(v158 - 16);
                uint64_t v206 = v201 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v207 = *v205;
                  *(v204 - 1) = *(v205 - 1);
                  *unsigned int v204 = v207;
                  v204 -= 2;
                  v205 -= 2;
                  v206 -= 8;
                }
                while (v206);
                uint64_t v158 = v203;
                if (v201 != (v201 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_340:
                  do
                  {
LABEL_195:
                    int v208 = *((_DWORD *)v158 - 1);
                    v158 -= 4;
                    *((_DWORD *)v169 - 1) = v208;
                    v169 -= 4;
                  }
                  while (v158 != v155);
                }
              }
              v170[45] = v169;
              v170[46] = &v167[v173];
              v170[47] = &v171[v172];
              if (v155)
              {
                operator delete(v155);
                unint64_t v161 = v122 + 1;
              }
            }
          }
          sub_A3E96C((uint64_t)v291, v161, 0);
          unsigned int v123 = v292;
          unint64_t v151 = v289;
          goto LABEL_199;
        }
        a1 = v297;
        if ((v153 & v154) != 0) {
          goto LABEL_148;
        }
LABEL_260:
        *(void *)(v152 + 8 * v151) = v153 | v154;
        v241 = (char *)a1[52];
        unint64_t v240 = a1[53];
        if ((unint64_t)v241 < v240)
        {
          *(_DWORD *)v241 = v122;
          uint64_t v242 = (uint64_t)(v241 + 4);
          goto LABEL_283;
        }
        v243 = (char *)*v287;
        uint64_t v244 = v241 - (unsigned char *)*v287;
        uint64_t v245 = v244 >> 2;
        unint64_t v246 = (v244 >> 2) + 1;
        if (v246 >> 62) {
          goto LABEL_334;
        }
        uint64_t v247 = v240 - (void)v243;
        if (v247 >> 1 > v246) {
          unint64_t v246 = v247 >> 1;
        }
        if ((unint64_t)v247 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v248 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v248 = v246;
        }
        unsigned int v295 = v123;
        unint64_t v290 = v151;
        if (v248)
        {
          if (!(v248 >> 62))
          {
            v249 = operator new(4 * v248);
            v250 = (unsigned int *)&v249[4 * v245];
            unsigned int *v250 = v122;
            uint64_t v242 = (uint64_t)(v250 + 1);
            if (v241 != v243) {
              goto LABEL_271;
            }
            goto LABEL_280;
          }
LABEL_332:
          sub_188D718();
        }
        v249 = 0;
        v250 = (unsigned int *)(4 * v245);
        *(_DWORD *)(4 * v245) = v122;
        uint64_t v242 = 4 * v245 + 4;
        if (v241 != v243)
        {
LABEL_271:
          unint64_t v251 = v241 - 4 - v243;
          if (v251 < 0x2C) {
            goto LABEL_341;
          }
          if ((unint64_t)(v241 - &v249[v244]) < 0x20) {
            goto LABEL_341;
          }
          uint64_t v252 = (v251 >> 2) + 1;
          uint64_t v253 = 4 * (v252 & 0x7FFFFFFFFFFFFFF8);
          v254 = &v241[-v253];
          v250 = (unsigned int *)((char *)v250 - v253);
          v255 = &v249[4 * v245 - 16];
          v256 = v241 - 16;
          uint64_t v257 = v252 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v258 = *(_OWORD *)v256;
            *(v255 - 1) = *((_OWORD *)v256 - 1);
            _OWORD *v255 = v258;
            v255 -= 2;
            v256 -= 32;
            v257 -= 8;
          }
          while (v257);
          v241 = v254;
          if (v252 != (v252 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_341:
            do
            {
              unsigned int v259 = *((_DWORD *)v241 - 1);
              v241 -= 4;
              *--v250 = v259;
            }
            while (v241 != v243);
          }
        }
LABEL_280:
        a1 = v297;
        v297[51] = v250;
        v297[52] = v242;
        v297[53] = &v249[4 * v248];
        if (v243) {
          operator delete(v243);
        }
        unsigned int v123 = v295;
        unint64_t v151 = v290;
LABEL_283:
        a1[52] = v242;
        v155 = (unsigned char *)a1[45];
        if (*(_DWORD *)&v155[4 * v125] < v123) {
          goto LABEL_149;
        }
LABEL_225:
        unint64_t v13 = (unint64_t)v304;
        uint64_t v12 = v303 + 2;
        v303 = v12;
        if (v12 == v304)
        {
          v230 = v301 + 2;
          v301 = v230;
          if ((unint64_t)v230 >= v302) {
            goto LABEL_6;
          }
          while (1)
          {
            uint64_t v12 = (void *)*v230;
            unint64_t v13 = v230[1];
            if (*v230 != v13) {
              break;
            }
            v230 += 2;
            v301 = v230;
            if ((unint64_t)v230 >= v302) {
              goto LABEL_6;
            }
          }
          v303 = (void *)*v230;
          v304 = (void *)v13;
          if ((unint64_t)v12 < v13)
          {
            while (1)
            {
LABEL_288:
              if (!v306)
              {
                uint64_t v260 = v300[0];
                uint64_t v261 = *v12;
                uint64_t v262 = *(void *)(v300[0] + 4136);
                if (sub_C259C0(v262 + 3896))
                {
                  if (*(void *)(v262 + 3944))
                  {
                    unint64_t v263 = __ROR8__(v261, 32);
                    if (!sub_A10E20((void *)(v260 + 4136), SHIDWORD(v263)))
                    {
                      v264 = *(void **)(*(void *)(v260 + 4136) + 3944);
                      int8x8_t v265 = (int8x8_t)v264[1];
                      if (v265)
                      {
                        unint64_t v266 = 0xC4CEB9FE1A85EC53
                             * ((0xFF51AFD7ED558CCDLL * (v263 ^ (v263 >> 33))) ^ ((0xFF51AFD7ED558CCDLL
                                                                                 * (v263 ^ (v263 >> 33))) >> 33));
                        unint64_t v267 = v266 ^ (v266 >> 33);
                        uint8x8_t v268 = (uint8x8_t)vcnt_s8(v265);
                        v268.i16[0] = vaddlv_u8(v268);
                        if (v268.u32[0] > 1uLL)
                        {
                          unint64_t v269 = v267;
                          if (v267 >= *(void *)&v265) {
                            unint64_t v269 = v267 % *(void *)&v265;
                          }
                        }
                        else
                        {
                          unint64_t v269 = (*(void *)&v265 - 1) & v267;
                        }
                        v272 = *(uint64_t ***)(*v264 + 8 * v269);
                        if (v272)
                        {
                          v273 = *v272;
                          if (v273)
                          {
                            if (v268.u32[0] < 2uLL)
                            {
                              uint64_t v274 = *(void *)&v265 - 1;
                              while (1)
                              {
                                uint64_t v278 = v273[1];
                                if (v267 == v278)
                                {
                                  if (*((_DWORD *)v273 + 5) == HIDWORD(v263) && *((_DWORD *)v273 + 4) == v263) {
                                    goto LABEL_285;
                                  }
                                }
                                else if ((v278 & v274) != v269)
                                {
                                  goto LABEL_324;
                                }
                                v273 = (uint64_t *)*v273;
                                if (!v273) {
                                  goto LABEL_324;
                                }
                              }
                            }
                            do
                            {
                              unint64_t v276 = v273[1];
                              if (v267 == v276)
                              {
                                if (*((_DWORD *)v273 + 5) == HIDWORD(v263) && *((_DWORD *)v273 + 4) == v263)
                                {
LABEL_285:
                                  uint64_t v12 = v303;
                                  goto LABEL_286;
                                }
                              }
                              else
                              {
                                if (v276 >= *(void *)&v265) {
                                  v276 %= *(void *)&v265;
                                }
                                if (v276 != v269) {
                                  break;
                                }
                              }
                              v273 = (uint64_t *)*v273;
                            }
                            while (v273);
                          }
                        }
                      }
                    }
                  }
                }
              }
LABEL_324:
              if (v305) {
                break;
              }
              unsigned int v279 = sub_C2599C(v300[0] + 3896);
              uint64_t v12 = v303;
              if (v279 >= *((unsigned __int8 *)v303 + 14))
              {
                if (v305) {
                  goto LABEL_8;
                }
                char v280 = sub_51D60((unsigned __int8 *)(v300[0] + 3896));
                uint64_t v12 = v303;
                if ((v280 & 1) != 0 || (*((unsigned char *)v303 + 15) & 1) == 0) {
                  goto LABEL_8;
                }
              }
LABEL_286:
              v12 += 2;
              v303 = v12;
              if (v12 == v304)
              {
                v270 = v301 + 2;
                v301 = v270;
                if ((unint64_t)v270 >= v302) {
                  goto LABEL_8;
                }
                while (1)
                {
                  uint64_t v12 = (void *)*v270;
                  unint64_t v271 = v270[1];
                  if (*v270 != v271) {
                    break;
                  }
                  v270 += 2;
                  v301 = v270;
                  if ((unint64_t)v270 >= v302) {
                    goto LABEL_6;
                  }
                }
                v303 = (void *)*v270;
                v304 = (void *)v271;
                if ((unint64_t)v12 >= v271) {
                  goto LABEL_8;
                }
              }
              else if (v12 >= v304)
              {
                goto LABEL_8;
              }
            }
            uint64_t v12 = v303;
            goto LABEL_8;
          }
        }
        else if (v12 < v304)
        {
          goto LABEL_288;
        }
        goto LABEL_9;
      }
LABEL_13:
      ++v14;
    }
  }
LABEL_331:
  double result = sub_72688((uint64_t)v307) + *((double *)a1 + 76);
  *((double *)a1 + 76) = result;
  return result;
}

uint64_t sub_ADBE54(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, signed int a5)
{
  unsigned int v47 = a3;
  int v10 = *(uint64_t **)(a1 + 80);
  if (v10)
  {
    uint64_t v12 = *v10;
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v10[1] - *v10) >> 4);
    if (v13 <= a4)
    {
      sub_A3F0F0(*(void *)(a1 + 80), a4 - v13 + 1);
      uint64_t v12 = *v10;
    }
    uint64_t v14 = (void *)(v12 + 48 * a4);
    if (v14[1] <= (unint64_t)a3
      || ((*(void *)(*v14 + (((unint64_t)a3 >> 3) & 0x1FFFFFF8)) >> a3) & 1) == 0)
    {
      return 0;
    }
  }
  if (*(unsigned char *)(a1 + 25))
  {
    uint64_t v15 = a1 + 24 * a2;
    uint64_t v16 = *(void *)(v15 + 168);
    uint64_t v17 = *(void *)(v15 + 176);
    unint64_t v18 = (uint64_t *)(v15 + 168);
    unint64_t v19 = *(unsigned int *)(a1 + 432);
    unint64_t v20 = (v17 - v16) >> 2;
    if (v20 <= v19)
    {
      sub_5BBEE0((uint64_t)v18, v19 - v20 + 1);
      uint64_t v16 = *v18;
    }
    uint64_t v21 = (int *)(v16 + 4 * v19);
    if (!*(unsigned char *)(a1 + 26)) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v22 = *(_DWORD **)(a1 + 152);
    int v48 = (*(_DWORD *)(a1 + 432) << *v22) | a4;
    uint64_t v21 = (int *)(sub_AF1DB0((uint64_t)(v22 + 2), (unsigned int *)&v48) + 4);
    if (!*(unsigned char *)(a1 + 26)) {
      goto LABEL_17;
    }
  }
  int v23 = *v21;
  if (v23 != 0x7FFFFFFF)
  {
    int v24 = *(_DWORD *)(a1 + 28);
    int v25 = v24 / -10;
    int v26 = v24 % 10;
    char v27 = v24 < 0 ? -5 : 5;
    if ((int)(v25 + v23 + (((-103 * (char)(v27 + v26)) >> 15) & 1) + ((-103 * (char)(v27 + v26)) >> 10)) >= a5) {
      return 0;
    }
  }
LABEL_17:
  if (*(unsigned char *)(a1 + 25))
  {
    uint64_t v28 = a1 + 24 * a2;
    uint64_t v29 = *(void *)(v28 + 168);
    uint64_t v30 = *(void *)(v28 + 176);
    __int16 v31 = (uint64_t *)(v28 + 168);
    unint64_t v32 = (v30 - v29) >> 2;
    if (v32 <= a3)
    {
      sub_5BBEE0((uint64_t)v31, a3 - v32 + 1);
      uint64_t v29 = *v31;
    }
    signed int v33 = *(_DWORD *)(v29 + 4 * a3);
    if (v33 != 0x7FFFFFFF && v33 >= a5) {
      return 0;
    }
  }
  uint64_t v35 = *(_DWORD **)(a1 + 152);
  int v49 = (a3 << *v35) | a4;
  uint64_t v36 = sub_AF1DB0((uint64_t)(v35 + 2), (unsigned int *)&v49);
  signed int v37 = *(_DWORD *)(v36 + 4);
  if (v37 != 0x7FFFFFFF && v37 >= a5) {
    return 0;
  }
  uint64_t v39 = v36;
  unsigned int v40 = a2;
  if (*(unsigned char *)(a1 + 25))
  {
    uint64_t v41 = a1 + 24 * a2;
    uint64_t v42 = *(void *)(v41 + 168);
    uint64_t v43 = *(void *)(v41 + 176);
    __int16 v44 = (uint64_t *)(v41 + 168);
    unint64_t v45 = (v43 - v42) >> 2;
    if (v45 <= a3)
    {
      sub_5BBEE0((uint64_t)v44, a3 - v45 + 1);
      uint64_t v42 = *v44;
    }
    *(_DWORD *)(v42 + 4 * a3) = a5;
  }
  *(_DWORD *)(v39 + 4) = a5;
  sub_A3EF14((uint64_t *)(a1 + 48 * v40 + 216), &v47);
  if (!*(unsigned char *)(a1 + 25)) {
    sub_A3EF14((uint64_t *)(a1 + 312), &v47);
  }
  return 1;
}

void sub_ADC114(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = a1;
  unsigned int v221 = a3;
  *(double *)(a1 + 656) = *(double *)(a1 + 656) + 1.0;
  unint64_t v4 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 56) + 88), a3);
  unsigned int v203 = *(_DWORD *)sub_A3F74C((void *)(v3 + 360), &v221);
  uint64_t v204 = v4;
  sub_A40514(&v219, *(void *)(v3 + 40), v4);
  unint64_t v5 = v219;
  if ((unint64_t)v219 < v220)
  {
    uint64_t v206 = v3 + 464;
    uint64_t v207 = v3;
    do
    {
      *(double *)(v3 + 664) = *(double *)(v3 + 664) + 1.0;
      uint64_t v205 = *(unsigned int *)v5;
      sub_A1E9A0((uint64_t)&v209, *(void *)(v3 + 40), v204, v203, 0, 1);
      uint64_t v6 = v213;
      if ((unint64_t)v213 < v212 || (unint64_t)v213 >= v214) {
        goto LABEL_3;
      }
      char v208 = 0;
      do
      {
        uint64_t v8 = 0;
        unint64_t v9 = __ROR8__(*v6, 32);
        uint64_t v10 = *(void *)(v3 + 48);
        uint64_t v11 = *(void *)(v10 + 72) - 1;
        unint64_t v12 = 0xC4CEB9FE1A85EC53
            * ((0xFF51AFD7ED558CCDLL * (v9 ^ (v9 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v9 ^ (v9 >> 33))) >> 33));
        unint64_t v13 = v12 ^ (v12 >> 33);
        uint64_t v14 = *(void *)(v10 + 48);
        uint64_t v15 = v14 + 11;
        uint64_t v16 = -1;
        for (unint64_t i = v13; ; unint64_t i = v8 + v18)
        {
          uint64_t v18 = i & v11;
          unint64_t v19 = (i & v11) / 0x30;
          unint64_t v20 = v18 - 48 * v19;
          if (((*(unsigned __int8 *)(v14 + 16 * v19 + (v20 >> 3) + 10) >> (v20 & 7)) & 1) == 0)
          {
            if (v16 == -1) {
              unint64_t v56 = v18;
            }
            else {
              unint64_t v56 = v16;
            }
            if (!sub_AD2F40(v10, 1)) {
              goto LABEL_94;
            }
            goto LABEL_51;
          }
          uint64_t v21 = *(void *)(v14 + 16 * v19);
          if (!*(void *)(v10 + 40)) {
            break;
          }
          uint64_t v22 = (unsigned __int8 *)(v14 + 16 * v19 + 10);
          if ((unsigned __int16)(v18 - 48 * v19) < 9u)
          {
            __int16 v23 = 0;
            LOBYTE(v28) = v18 - 48 * v19;
            goto LABEL_25;
          }
          __int16 v23 = 0;
          uint64_t v24 = (unsigned __int16)(v18 - 48 * v19 - 9) >> 3;
          if ((unsigned __int16)(v18 - 48 * v19 - 9) >> 3)
          {
            __int16 v25 = 0;
            uint64_t v26 = v24 + 1;
            uint64_t v27 = (v24 + 1) & 0x3FFE;
            unsigned __int16 v28 = v20 - 8 * v27;
            uint64_t v29 = &v22[v27];
            uint64_t v30 = (unsigned __int8 *)(v15 + 16 * v19);
            uint64_t v31 = v27;
            do
            {
              uint64_t v32 = *(v30 - 1);
              int v33 = *v30;
              v30 += 2;
              v23 += byte_20EBFB6[v32];
              v25 += byte_20EBFB6[v33];
              v31 -= 2;
            }
            while (v31);
            v23 += v25;
            if (v26 == v27) {
              goto LABEL_24;
            }
          }
          else
          {
            unsigned __int16 v28 = v18 - 48 * v19;
            uint64_t v29 = (unsigned __int8 *)(v14 + 16 * v19 + 10);
          }
          do
          {
            int v34 = *v29++;
            v23 += byte_20EBFB6[v34];
            v28 -= 8;
          }
          while (v28 > 8u);
LABEL_24:
          v22 += ((unsigned __int16)(v20 - 9) >> 3) + 1;
LABEL_25:
          uint64_t v35 = (_DWORD *)(v21
                         + 12
                         * (unsigned __int16)(v23 + byte_20EBFB6[~(-1 << v28) & (unint64_t)*v22]));
          if (*(_DWORD *)(v10 + 36) != v35[1] || *(_DWORD *)(v10 + 32) != *v35) {
            break;
          }
          if (v16 == -1) {
            uint64_t v16 = v18;
          }
LABEL_12:
          ++v8;
        }
        signed int v37 = (unsigned __int8 *)(v14 + 16 * v19 + 10);
        if ((unsigned __int16)(v18 - 48 * v19) < 9u)
        {
          __int16 v38 = 0;
          int v49 = (unsigned __int8 *)(v14 + 16 * v19 + 10);
          LOBYTE(v43) = v18 - 48 * v19;
          goto LABEL_39;
        }
        __int16 v38 = 0;
        uint64_t v39 = (unsigned __int16)(v18 - 48 * v19 - 9) >> 3;
        if (!((unsigned __int16)(v18 - 48 * v19 - 9) >> 3))
        {
          unsigned __int16 v43 = v18 - 48 * v19;
          __int16 v44 = (unsigned __int8 *)(v14 + 16 * v19 + 10);
          do
          {
LABEL_37:
            int v50 = *v44++;
            v38 += byte_20EBFB6[v50];
            v43 -= 8;
          }
          while (v43 > 8u);
          goto LABEL_38;
        }
        __int16 v40 = 0;
        uint64_t v41 = v39 + 1;
        uint64_t v42 = (v39 + 1) & 0x3FFE;
        unsigned __int16 v43 = v20 - 8 * v42;
        __int16 v44 = &v37[v42];
        unint64_t v45 = (unsigned __int8 *)(v15 + 16 * v19);
        uint64_t v46 = v42;
        do
        {
          uint64_t v47 = *(v45 - 1);
          int v48 = *v45;
          v45 += 2;
          v38 += byte_20EBFB6[v47];
          v40 += byte_20EBFB6[v48];
          v46 -= 2;
        }
        while (v46);
        v38 += v40;
        if (v41 != v42) {
          goto LABEL_37;
        }
LABEL_38:
        int v49 = &v37[((unsigned __int16)(v20 - 9) >> 3) + 1];
LABEL_39:
        if (v9 != *(void *)(v21
                             + 12
                             * (unsigned __int16)(v38 + byte_20EBFB6[~(-1 << v43) & (unint64_t)*v49])))
          goto LABEL_12;
        if (v18 != -1)
        {
          if ((unsigned __int16)(v18 - 48 * v19) < 9u)
          {
            __int16 v53 = 0;
            uint64_t v3 = v207;
          }
          else
          {
            if ((((_WORD)v18 - 48 * (_WORD)v19 - 8) & 0xFFF8) != 0) {
              __int16 v51 = 8;
            }
            else {
              __int16 v51 = v18 - 48 * v19 - 8;
            }
            unsigned __int16 v52 = ~v51 + v18 - 48 * v19;
            uint64_t v3 = v207;
            __int16 v53 = 0;
            if (v52 < 8u)
            {
              unsigned __int16 v54 = v20;
              __int16 v55 = (unsigned __int8 *)(v14 + 16 * v19 + 10);
              goto LABEL_99;
            }
            __int16 v101 = 0;
            uint64_t v102 = (v52 >> 3) + 1;
            unsigned __int16 v54 = v20 - 8 * (((v52 >> 3) + 1) & 0x3FFE);
            __int16 v55 = &v37[v102 & 0x3FFE];
            __int16 v103 = (unsigned __int8 *)(v14 + 16 * v19 + 11);
            uint64_t v104 = v102 & 0x3FFE;
            do
            {
              uint64_t v105 = *(v103 - 1);
              int v106 = *v103;
              v103 += 2;
              v53 += byte_20EBFB6[v105];
              v101 += byte_20EBFB6[v106];
              v104 -= 2;
            }
            while (v104);
            v53 += v101;
            if ((v102 & 0x3FFE) != v102)
            {
              do
              {
LABEL_99:
                int v107 = *v55++;
                v53 += byte_20EBFB6[v107];
                v54 -= 8;
              }
              while (v54 > 8u);
            }
            v37 += ((unsigned __int16)(v20 - 9) >> 3) + 1;
            LOBYTE(v20) = v54;
          }
          uint64_t v108 = *(void *)(v10 + 56);
          unsigned __int16 v109 = v53 + byte_20EBFB6[~(-1 << v20) & (unint64_t)*v37];
          uint64_t v110 = v14 + 16 * v19;
          if (*(unsigned __int16 *)(v110 + 8) != v109 || v110 + 16 == v108)
          {
            int v100 = (_DWORD *)(v21 + 12 * v109);
          }
          else
          {
            uint64_t v112 = v110 + 32;
            do
            {
              if (*(_WORD *)(v112 - 8)) {
                BOOL v113 = 1;
              }
              else {
                BOOL v113 = v112 == v108;
              }
              v112 += 16;
            }
            while (!v113);
            int v100 = *(_DWORD **)(v112 - 32);
          }
          goto LABEL_113;
        }
        unint64_t v56 = -1;
        if (!sub_AD2F40(v10, 1))
        {
LABEL_94:
          unint64_t v223 = v9;
          int v224 = -1;
          sub_AD3484(v10, (uint64_t *)&v223, v56, v225);
          int v100 = v226;
          uint64_t v3 = v207;
          goto LABEL_113;
        }
LABEL_51:
        uint64_t v57 = 0;
        unint64_t v223 = v9;
        int v224 = -1;
        uint64_t v58 = *(void *)(v10 + 72) - 1;
        uint64_t v59 = *(void *)(v10 + 48);
        uint64_t v60 = v59 + 11;
        uint64_t v61 = -1;
        while (2)
        {
          uint64_t v62 = v13 & v58;
          unint64_t v63 = (v13 & v58) / 0x30;
          unint64_t v64 = (v13 & v58) % 0x30;
          if (((*(unsigned __int8 *)(v59 + 16 * v63 + (v64 >> 3) + 10) >> (v64 & 7)) & 1) == 0)
          {
            if (v61 == -1) {
              unint64_t v99 = v13 & v58;
            }
            else {
              unint64_t v99 = v61;
            }
            goto LABEL_92;
          }
          uint64_t v65 = *(void *)(v10 + 40);
          uint64_t v66 = *(void *)(v59 + 16 * v63);
          if (!v65) {
            break;
          }
          uint64_t v67 = (unsigned __int8 *)(v59 + 16 * v63 + 10);
          if ((unsigned __int16)((v13 & v58) % 0x30) < 9u)
          {
            __int16 v68 = 0;
            LOBYTE(v69) = (v13 & v58) % 0x30;
            goto LABEL_67;
          }
          __int16 v68 = 0;
          uint64_t v69 = (unsigned __int16)(v62 - 48 * v63 - 9) >> 3;
          if (!((unsigned __int16)(v62 - 48 * v63 - 9) >> 3))
          {
            LODWORD(v69) = (v13 & v58) % 0x30;
            uint64_t v73 = (unsigned __int8 *)(v59 + 16 * v63 + 10);
            do
            {
LABEL_65:
              int v78 = *v73++;
              v68 += byte_20EBFB6[v78];
              LOWORD(v69) = v69 - 8;
            }
            while ((unsigned __int16)v69 > 8u);
            goto LABEL_66;
          }
          __int16 v70 = 0;
          uint64_t v71 = v69 + 1;
          uint64_t v72 = (v69 + 1) & 0x3FFE;
          LOWORD(v69) = v64 - 8 * v72;
          uint64_t v73 = &v67[v72];
          __int16 v74 = (unsigned __int8 *)(v60 + 16 * v63);
          uint64_t v75 = v72;
          do
          {
            uint64_t v76 = *(v74 - 1);
            int v77 = *v74;
            v74 += 2;
            v68 += byte_20EBFB6[v76];
            v70 += byte_20EBFB6[v77];
            v75 -= 2;
          }
          while (v75);
          v68 += v70;
          if (v71 != v72) {
            goto LABEL_65;
          }
LABEL_66:
          v67 += ((unsigned __int16)(v64 - 9) >> 3) + 1;
LABEL_67:
          uint64_t v79 = (_DWORD *)(v66
                         + 12
                         * (unsigned __int16)(v68 + byte_20EBFB6[~(-1 << v69) & (unint64_t)*v67]));
          if (*(_DWORD *)(v10 + 36) == v79[1] && *(_DWORD *)(v10 + 32) == *v79)
          {
            if (v61 == -1) {
              uint64_t v61 = v13 & v58;
            }
LABEL_54:
            unint64_t v13 = ++v57 + v62;
            continue;
          }
          break;
        }
        uint64_t v81 = (unsigned __int8 *)(v59 + 16 * v63 + 10);
        if ((unsigned __int16)((v13 & v58) % 0x30) < 9u)
        {
          __int16 v82 = 0;
          uint64_t v92 = (unsigned __int8 *)(v59 + 16 * v63 + 10);
          LOBYTE(v83) = (v13 & v58) % 0x30;
          goto LABEL_81;
        }
        __int16 v82 = 0;
        uint64_t v83 = (unsigned __int16)(v62 - 48 * v63 - 9) >> 3;
        if (!((unsigned __int16)(v62 - 48 * v63 - 9) >> 3))
        {
          LODWORD(v83) = (v13 & v58) % 0x30;
          uint64_t v87 = (unsigned __int8 *)(v59 + 16 * v63 + 10);
          do
          {
LABEL_79:
            int v93 = *v87++;
            v82 += byte_20EBFB6[v93];
            LOWORD(v83) = v83 - 8;
          }
          while ((unsigned __int16)v83 > 8u);
          goto LABEL_80;
        }
        __int16 v84 = 0;
        uint64_t v85 = v83 + 1;
        uint64_t v86 = (v83 + 1) & 0x3FFE;
        LOWORD(v83) = v64 - 8 * v86;
        uint64_t v87 = &v81[v86];
        __int16 v88 = (unsigned __int8 *)(v60 + 16 * v63);
        uint64_t v89 = v86;
        do
        {
          uint64_t v90 = *(v88 - 1);
          int v91 = *v88;
          v88 += 2;
          v82 += byte_20EBFB6[v90];
          v84 += byte_20EBFB6[v91];
          v89 -= 2;
        }
        while (v89);
        v82 += v84;
        if (v85 != v86) {
          goto LABEL_79;
        }
LABEL_80:
        uint64_t v92 = &v81[((unsigned __int16)(v64 - 9) >> 3) + 1];
LABEL_81:
        if (v9 != *(void *)(v66
                             + 12
                             * (unsigned __int16)(v82 + byte_20EBFB6[~(-1 << v83) & (unint64_t)*v92])))
          goto LABEL_54;
        if (v62 == -1)
        {
          unint64_t v99 = -1;
LABEL_92:
          uint64_t v3 = v207;
          sub_AD3484(v10, (uint64_t *)&v223, v99, v225);
          int v100 = v226;
          goto LABEL_113;
        }
        uint64_t v3 = v207;
        if ((unsigned __int16)((v13 & v58) % 0x30) < 9u)
        {
          __int16 v96 = 0;
        }
        else
        {
          if ((((_WORD)v62 - 48 * (_WORD)v63 - 8) & 0xFFF8) != 0) {
            __int16 v94 = 8;
          }
          else {
            __int16 v94 = v62 - 48 * v63 - 8;
          }
          unsigned __int16 v95 = ~v94 + v62 - 48 * v63;
          if (v95 < 8u)
          {
            __int16 v96 = 0;
            unsigned __int16 v97 = v64;
            int v98 = (unsigned __int8 *)(v59 + 16 * v63 + 10);
            goto LABEL_198;
          }
          __int16 v176 = 0;
          __int16 v177 = 0;
          uint64_t v178 = (v95 >> 3) + 1;
          unsigned __int16 v97 = v64 - 8 * (((v95 >> 3) + 1) & 0x3FFE);
          int v98 = &v81[v178 & 0x3FFE];
          uint64_t v179 = (unsigned __int8 *)(v59 + 16 * v63 + 11);
          uint64_t v180 = v178 & 0x3FFE;
          do
          {
            uint64_t v181 = *(v179 - 1);
            int v182 = *v179;
            v179 += 2;
            v176 += byte_20EBFB6[v181];
            v177 += byte_20EBFB6[v182];
            v180 -= 2;
          }
          while (v180);
          __int16 v96 = v177 + v176;
          if ((v178 & 0x3FFE) != v178)
          {
            do
            {
LABEL_198:
              int v183 = *v98++;
              v96 += byte_20EBFB6[v183];
              v97 -= 8;
            }
            while (v97 > 8u);
          }
          v81 += ((unsigned __int16)(v64 - 9) >> 3) + 1;
          LOBYTE(v64) = v97;
        }
        uint64_t v184 = v59 + 16 * v63;
        unint64_t v185 = *(_DWORD ***)(v10 + 56);
        unsigned __int16 v186 = v96 + byte_20EBFB6[~(-1 << v64) & (unint64_t)*v81];
        int v100 = (_DWORD *)(v66 + 12 * v186);
        if (*(unsigned __int16 *)(v184 + 8) == v186)
        {
          uint64_t v187 = v184 + 16;
          if ((_DWORD **)(v184 + 16) != v185)
          {
            while (1)
            {
              __int16 v188 = (_DWORD **)v187;
              if (*(_WORD *)(v187 + 8)) {
                break;
              }
              v187 += 16;
              if (v188 + 2 == v185)
              {
                uint64_t v184 = *(void *)(v10 + 56);
                goto LABEL_206;
              }
            }
            uint64_t v184 = v187;
LABEL_206:
            int v100 = *v188;
            goto LABEL_207;
          }
        }
        else
        {
LABEL_207:
          if ((_DWORD **)v184 != v185 && v65)
          {
            do
            {
              if (*(_DWORD *)(v10 + 36) != v100[1] || *(_DWORD *)(v10 + 32) != *v100) {
                break;
              }
              v100 += 3;
              if (v100 == (_DWORD *)(*(void *)v184 + 12 * *(unsigned __int16 *)(v184 + 8)))
              {
                v184 += 16;
                if ((_DWORD **)v184 != v185)
                {
                  do
                  {
                    if (*(_WORD *)(v184 + 8))
                    {
                      int v100 = *(_DWORD **)v184;
                      goto LABEL_211;
                    }
                    v184 += 16;
                  }
                  while ((_DWORD **)v184 != v185);
                  int v100 = *(_DWORD **)(v184 - 16);
                }
                break;
              }
LABEL_211:
              ;
            }
            while ((_DWORD **)v184 != v185);
          }
        }
LABEL_113:
        unsigned int v114 = v100[2];
        if (v114 == -1)
        {
          int v117 = *(_DWORD *)(v10 + 112);
          *(_DWORD *)(v10 + 112) = v117 + 1;
          v100[2] = v117;
          unsigned int v119 = *(unint64_t **)(v10 + 96);
          unint64_t v118 = *(void *)(v10 + 104);
          if ((unint64_t)v119 < v118)
          {
            unint64_t *v119 = v9;
            uint64_t v120 = (uint64_t)(v119 + 1);
            goto LABEL_154;
          }
          BOOL v121 = (unint64_t **)(v10 + 88);
          unsigned int v122 = *(char **)(v10 + 88);
          uint64_t v123 = ((char *)v119 - v122) >> 3;
          unint64_t v124 = v123 + 1;
          if ((unint64_t)(v123 + 1) >> 61) {
            sub_2E00();
          }
          uint64_t v125 = v118 - (void)v122;
          if (v125 >> 2 > v124) {
            unint64_t v124 = v125 >> 2;
          }
          if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v124 = 0x1FFFFFFFFFFFFFFFLL;
          }
          if (v124)
          {
            if (v124 >> 61) {
              sub_188D718();
            }
            unint64_t v126 = v124;
            unint64_t v127 = (char *)operator new(8 * v124);
            BOOL v121 = (unint64_t **)(v10 + 88);
            uint64_t v128 = (unint64_t *)&v127[8 * v123];
            unint64_t *v128 = v9;
            uint64_t v120 = (uint64_t)(v128 + 1);
            if (v119 != (unint64_t *)v122)
            {
LABEL_134:
              unint64_t v129 = (char *)(v119 - 1) - v122;
              if (v129 < 0x58) {
                goto LABEL_253;
              }
              if ((unint64_t)(v122 - v127) < 0x20) {
                goto LABEL_253;
              }
              uint64_t v151 = (v129 >> 3) + 1;
              uint64_t v152 = 8 * (v151 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v153 = &v119[v152 / 0xFFFFFFFFFFFFFFF8];
              uint64_t v128 = (unint64_t *)((char *)v128 - v152);
              uint64_t v154 = &v127[8 * v123 - 16];
              v155 = v119 - 2;
              uint64_t v156 = v151 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v157 = *(_OWORD *)v155;
                *((_OWORD *)v154 - 1) = *((_OWORD *)v155 - 1);
                *(_OWORD *)uint64_t v154 = v157;
                v154 -= 32;
                v155 -= 4;
                v156 -= 4;
              }
              while (v156);
              unsigned int v119 = v153;
              if (v151 != (v151 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_253:
                do
                {
                  unint64_t v158 = *--v119;
                  *--uint64_t v128 = v158;
                }
                while (v119 != (unint64_t *)v122);
              }
              unsigned int v119 = *v121;
            }
          }
          else
          {
            unint64_t v126 = 0;
            unint64_t v127 = 0;
            uint64_t v128 = (unint64_t *)(8 * v123);
            *(void *)(8 * v123) = v9;
            uint64_t v120 = 8 * v123 + 8;
            if (v119 != (unint64_t *)v122) {
              goto LABEL_134;
            }
          }
          *(void *)(v10 + 88) = v128;
          *(void *)(v10 + 96) = v120;
          *(void *)(v10 + 104) = &v127[8 * v126];
          uint64_t v3 = v207;
          if (v119) {
            operator delete(v119);
          }
LABEL_154:
          *(void *)(v10 + 96) = v120;
          unsigned int v115 = v100[2];
          if (sub_BD5C18(v206, v115, v9)) {
            goto LABEL_115;
          }
LABEL_155:
          v208 &= *(unsigned char *)(v3 + 32) != 0;
          goto LABEL_156;
        }
        unsigned int v115 = v100[2];
        if (!sub_BD5C18(v206, v114, v9)) {
          goto LABEL_155;
        }
LABEL_115:
        if ((v208 & 1) != 0 && (*((unsigned char *)v213 + 15) & 2) != 0)
        {
          uint64_t v116 = v215;
          if (v215) {
            uint64_t v116 = *(unsigned int *)(v215 + 4 * (((unint64_t)v213 - v212) >> 4));
          }
          if ((v116 & v205) == 0)
          {
            int v167 = (unsigned int *)((char *)v211 + *(unsigned __int16 *)((char *)v211 - *v211 + 6));
            unint64_t v168 = (char *)v167 + *v167;
            v169 = &v218;
            if (!v217) {
              v169 = v216;
            }
            signed int v170 = *(_DWORD *)&v168[8 * *((_DWORD *)v216 + 1)
                                  + 8
                                  + 8 * (((unint64_t)v213 - v212) >> 4)]
                 + *(_DWORD *)v169
                 - *((_DWORD *)v213 + 2);
            uint64_t v171 = *(void *)(v3 + 64);
            if (!v171
              || (signed int v172 = sub_AD7004(v171, v115, *(_DWORD *)(v3 + 144) + ~a2), v172 != 0x7FFFFFFF) && v172 <= v170)
            {
              if (sub_ADBE54(v3, 0, v115, a2, v170))
              {
                uint64_t v173 = *(_DWORD **)(v3 + 152);
                LODWORD(v225[0]) = (v115 << *v173) | a2;
                sub_AF1DB0((uint64_t)(v173 + 2), (unsigned int *)v225);
              }
            }
          }
        }
        if ((*((unsigned char *)v213 + 15) & 1) == 0) {
          goto LABEL_156;
        }
        if (v215)
        {
          if (*(_DWORD *)(v215 + 4 * (((unint64_t)v213 - v212) >> 4)) != v205) {
            goto LABEL_156;
          }
        }
        else if (v205)
        {
          goto LABEL_156;
        }
        uint64_t v130 = *(void *)(v3 + 152);
        uint64_t v131 = v130 + 8;
        int v222 = (v115 << *(_DWORD *)v130) | (a2 - 1);
        unint64_t v132 = sub_AD72DC(v130 + 8, (unsigned int *)&v222);
        if (v132 == -1)
        {
          unint64_t v174 = v133;
          if (sub_AF1FB8(v131, 1))
          {
            unint64_t v223 = v222 | 0x7FFFFFFF00000000;
            sub_AF22EC(v131, (unsigned int *)&v223, (uint64_t)v225);
          }
          else
          {
            unint64_t v223 = v222 | 0x7FFFFFFF00000000;
            sub_AF2504(v131, (uint64_t *)&v223, v174, v225);
          }
          int v175 = v226[1];
          if (v175 != 0x7FFFFFFF) {
            goto LABEL_238;
          }
          goto LABEL_156;
        }
        uint64_t v134 = *(void *)(v130 + 56);
        unint64_t v135 = v132 / 0x30;
        v136 = (uint64_t *)(v134 + 16 * (v132 / 0x30));
        unint64_t v138 = (unsigned __int8 *)v136 + 10;
        uint64_t v137 = *v136;
        int v139 = v132 % 0x30;
        if ((unsigned __int16)(v132 % 0x30) < 9u)
        {
          __int16 v140 = 0;
          goto LABEL_225;
        }
        __int16 v140 = 0;
        uint64_t v141 = (unsigned __int16)(v132 % 0x30 - 9) >> 3;
        if (!((unsigned __int16)(v132 % 0x30 - 9) >> 3))
        {
          unsigned __int16 v145 = v132 % 0x30;
          unint64_t v146 = (unsigned __int8 *)v136 + 10;
          do
          {
LABEL_223:
            int v190 = *v146++;
            v140 += byte_20EBDB6[v190];
            v145 -= 8;
          }
          while (v145 > 8u);
          goto LABEL_224;
        }
        __int16 v142 = 0;
        uint64_t v143 = v141 + 1;
        uint64_t v144 = (v141 + 1) & 0x3FFE;
        unsigned __int16 v145 = v139 - 8 * v144;
        unint64_t v146 = &v138[v144];
        uint64_t v147 = (unsigned __int8 *)(v134 + 16 * v135 + 11);
        uint64_t v148 = v144;
        do
        {
          uint64_t v149 = *(v147 - 1);
          int v150 = *v147;
          v147 += 2;
          v140 += byte_20EBDB6[v149];
          v142 += byte_20EBDB6[v150];
          v148 -= 2;
        }
        while (v148);
        v140 += v142;
        if (v143 != v144) {
          goto LABEL_223;
        }
LABEL_224:
        v138 += ((unsigned __int16)(v139 - 9) >> 3) + 1;
        LOBYTE(v139) = v145;
LABEL_225:
        __int16 v191 = byte_20EBDB6[~(-1 << v139) & (unint64_t)*v138];
        uint64_t v192 = *(uint64_t **)(v130 + 64);
        unsigned __int16 v193 = v140 + v191;
        int v194 = *((unsigned __int16 *)v136 + 4);
        uint64_t v195 = v136 + 2;
        if (v194 != v193 || v195 == v192)
        {
          int v175 = *(_DWORD *)(v137 + 8 * v193 + 4);
          if (v175 == 0x7FFFFFFF) {
            goto LABEL_156;
          }
LABEL_238:
          if (v208)
          {
            signed int v199 = (unsigned int *)((char *)v211 + *(unsigned __int16 *)((char *)v211 - *v211 + 6));
            uint64_t v200 = (char *)v199 + *v199;
            uint64_t v201 = &v218;
            if (!v217) {
              uint64_t v201 = v216;
            }
            if (*(_DWORD *)&v200[8 * *((_DWORD *)v216 + 1)
                                + 4
                                + 8 * (((unint64_t)v213 - v212) >> 4)]
               + *(_DWORD *)v201 < v175)
              sub_A43F30(*(void *)(v3 + 40), (uint64_t)&v209, v175);
            goto LABEL_245;
          }
          if (v217)
          {
            if (sub_A2B620(*(void *)(v3 + 40), (uint64_t)&v209, v175, 1))
            {
LABEL_245:
              char v208 = 1;
              goto LABEL_156;
            }
          }
          else if (sub_A2BC00((uint64_t)&v209, v175, 1))
          {
            goto LABEL_245;
          }
          char v208 = 0;
          goto LABEL_156;
        }
        uint64_t v197 = v134 + 16 * v135 + 32;
        do
        {
          if (*(_WORD *)(v197 - 8)) {
            BOOL v198 = 1;
          }
          else {
            BOOL v198 = v197 == (void)v192;
          }
          v197 += 16;
        }
        while (!v198);
        int v175 = *(_DWORD *)(*(void *)(v197 - 32) + 4);
        if (v175 != 0x7FFFFFFF) {
          goto LABEL_238;
        }
LABEL_156:
        unint64_t v159 = v212;
        uint64_t v6 = v213 - 2;
        v213 -= 2;
        if (*(unsigned char *)(v209 + 16)) {
          BOOL v160 = v210 == 0;
        }
        else {
          BOOL v160 = 0;
        }
        if (v160 && (unint64_t)v6 >= v212 && (unint64_t)v6 < v214)
        {
          do
          {
            unint64_t v163 = __ROR8__(*v6, 32);
            if (HIDWORD(v163) == 1 && (v163 + 3) < 2) {
              break;
            }
            char v165 = sub_2AB7E4(**(void **)(v209 + 4120));
            unint64_t v159 = v212;
            uint64_t v6 = v213;
            if (v165) {
              break;
            }
            uint64_t v6 = v213 - 2;
            unint64_t v213 = v6;
          }
          while ((unint64_t)v6 >= v212 && (unint64_t)v6 < v214);
        }
      }
      while ((unint64_t)v6 >= v159 && (unint64_t)v6 < v214);
LABEL_3:
      unint64_t v5 = v219 + 4;
      int v219 = v5;
    }
    while ((unint64_t)v5 < v220);
  }
}

void sub_ADD16C(uint64_t a1, _OWORD *a2)
{
  sub_725D0((uint64_t)v36);
  long long v4 = a2[1];
  *(_OWORD *)(a1 + 64) = *a2;
  *(_OWORD *)(a1 + 80) = v4;
  sub_ADF9A4(a1);
  uint64_t v5 = *(void *)(a1 + 32);
  v37[0] = 0x1FFFFFFFDLL;
  *(_DWORD *)(a1 + 416) = sub_AD28B0(v5, v37);
  sub_ADFBFC(a1);
  if (*(_DWORD *)(a1 + 100) >= 2u)
  {
    uint64_t v6 = 1;
    while (1)
    {
      if (v6)
      {
        uint64_t v17 = *(unsigned int **)(a1 + 320);
        uint64_t v18 = *(unsigned int **)(a1 + 328);
        if (v17 != v18)
        {
          uint64_t v19 = *(void *)(a1 + 296);
          unint64_t v20 = *(unsigned int **)(a1 + 320);
          do
          {
            unsigned int v21 = *v20++;
            *(void *)(v19 + (((unint64_t)v21 >> 3) & 0x1FFFFFF8)) &= ~(1 << v21);
          }
          while (v20 != v18);
        }
        *(void *)(a1 + 328) = v17;
        sub_ADFD64(a1, v6);
        sub_AE0004(a1, v6);
        uint64_t v16 = *(void *)(a1 + 320);
        if (v16 == *(void *)(a1 + 328)) {
          goto LABEL_22;
        }
        uint64_t v15 = *(void *)(a1 + 272);
      }
      else
      {
        uint64_t v7 = *(unsigned int **)(a1 + 272);
        uint64_t v8 = *(unsigned int **)(a1 + 280);
        if (v7 != v8)
        {
          uint64_t v9 = *(void *)(a1 + 248);
          uint64_t v10 = *(unsigned int **)(a1 + 272);
          do
          {
            unsigned int v11 = *v10++;
            *(void *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) &= ~(1 << v11);
          }
          while (v10 != v8);
        }
        *(void *)(a1 + 280) = v7;
        sub_AE1608((void *)a1);
        sub_725D0((uint64_t)v37);
        unint64_t v12 = *(unsigned int **)(a1 + 392);
        unint64_t v13 = *(unsigned int **)(a1 + 400);
        while (v12 != v13)
        {
          unsigned int v14 = *v12++;
          sub_AE57B4(a1, v6, v14);
        }
        *(double *)(a1 + 560) = sub_72688((uint64_t)v37) + *(double *)(a1 + 560);
        uint64_t v15 = *(void *)(a1 + 272);
        if (v15 == *(void *)(a1 + 280)) {
          goto LABEL_22;
        }
        uint64_t v16 = *(void *)(a1 + 320);
      }
      uint64_t v34 = *(void *)(a1 + 208);
      uint64_t v35 = *(void *)(a1 + 176);
      uint64_t v32 = 8 * (*(void *)(a1 + 232) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v33 = *(void *)(a1 + 192);
      uint64_t v22 = *(void *)(a1 + 288);
      uint64_t v23 = 8 * (*(void *)(a1 + 312) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v24 = *(void *)(a1 + 360);
      uint64_t v25 = *(void *)(a1 + 336);
      uint64_t v30 = *(void *)(a1 + 344);
      uint64_t v31 = 8 * (*(void *)(a1 + 264) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v29 = *(void *)(a1 + 392);
      uint64_t v26 = 8 * (*(void *)(a1 + 384) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v27 = *(void *)(a1 + 408);
      unint64_t v28 = v34
          + 12 * v35
          - v33
          + v32
          + v22
          + v31
          - v15
          + v25
          + v23
          + v24
          - (v16
           + v30)
          + v26
          + v27
          - v29
          + sub_BD6170((void *)(a1 + 424))
          + 680;
      if (*(void *)(a1 + 672) > v28) {
        unint64_t v28 = *(void *)(a1 + 672);
      }
      *(void *)(a1 + 672) = v28;
      if (!sub_AE2B6C(a1) && ++v6 < (unint64_t)*(unsigned int *)(a1 + 100)) {
        continue;
      }
      goto LABEL_22;
    }
  }
  LODWORD(v6) = 1;
LABEL_22:
  sub_AE2EBC(a1);
  *(double *)(a1 + 600) = (double)v6;
  *(double *)(a1 + 552) = sub_72688((uint64_t)v36);
}

std::string *sub_ADD414@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0;
  v336 = (uint64_t *)(a2 + 8);
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  HIBYTE(v370) = 0;
  LOBYTE(__p[0]) = 0;
  v334 = (std::string *)(a2 + 32);
  sub_C50BD8((char *)(a2 + 32), (long long *)__p);
  if (SHIBYTE(v370) < 0) {
    operator delete(*(void **)__p);
  }
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  uint64_t v4 = a2 + 192;
  *(void *)(v4 + 16) = 0;
  *(unsigned char *)(v4 - 8) = *(unsigned char *)(a1 + 64);
  unsigned int v5 = *(_DWORD *)(a1 + 100);
  if (v5 <= 1) {
    int v6 = 1;
  }
  else {
    int v6 = *(_DWORD *)(a1 + 100);
  }
  int v335 = v6;
  if (v5 >= 2)
  {
    uint64_t v8 = (void *)(a1 + 104);
    __asm { FMOV            V0.2D, #1.0 }
    long long v338 = _Q0;
    int v337 = 1;
    uint64_t v342 = a1 + 104;
    uint64_t v343 = a1;
    do
    {
      __p[0] = 0;
      uint64_t v12 = *(void *)(a1 + 192);
      uint64_t v13 = *(unsigned int *)(sub_AE36B4((uint64_t)v8, __p) + 4);
      __p[0] = 0;
      uint64_t v14 = *(void *)(a1 + 192);
      uint64_t v15 = sub_AE36B4((uint64_t)v8, __p);
      sub_AE32F0((uint64_t)v8, 0, (char *)(v12 + (v13 << 6)), (unsigned char *)(v14 + ((unint64_t)*(unsigned int *)(v15 + 8) << 6)));
      sub_AE5660(v8, v337 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * *(_DWORD *)(a1 + 416) + 2, 0);
      __p[0] = 0;
      uint64_t v16 = *(void *)(a1 + 192);
      uint64_t v17 = *(unsigned int *)(sub_AE36B4((uint64_t)v8, __p) + 4);
      __p[0] = 0;
      uint64_t v18 = *(void *)(a1 + 192);
      v341 = (unsigned int *)(v16 + (v17 << 6));
      v339 = (unsigned int *)(v18 + ((unint64_t)*(unsigned int *)(sub_AE36B4((uint64_t)v8, __p) + 8) << 6));
      for (_ZF = v341 == v339; !_ZF; _ZF = v341 == v339)
      {
        LOWORD(__p[0]) = 0;
        BYTE2(__p[0]) = 0;
        *(void *)&__p[1] = 0;
        *(void *)&__p[3] = 0x7FFFFFFFFFFFFFFFLL;
        int v370 = 0x7FFFFFFF;
        __int16 v371 = 0;
        unint64_t v372 = 0x8000000080000000;
        __int16 v373 = 0;
        unint64_t v374 = 0x8000000080000000;
        int v375 = 0x7FFFFFFF;
        __int16 v376 = 0;
        unint64_t v377 = 0x8000000080000000;
        __int16 v378 = 0;
        unint64_t v379 = 0x8000000080000000;
        __int16 v380 = 0;
        unint64_t v381 = 0xFFFFFFFF00000000;
        int v382 = -1;
        uint64_t v383 = 0;
        v385 = 0;
        uint64_t v386 = 0;
        uint64_t v387 = 0;
        int v384 = 0x7FFFFFFF;
        int v388 = 100;
        int v389 = -1;
        long long v390 = v338;
        long long v391 = v338;
        long long v392 = v338;
        long long v393 = 0u;
        long long v394 = 0u;
        long long v395 = 0u;
        long long v396 = 0u;
        uint64_t v20 = *(void *)(a1 + 24);
        long long v397 = 0u;
        long long v398 = 0u;
        if (sub_C259C0(v20 + 3896) && *(void *)(v20 + 3944))
        {
          BOOL v21 = 1;
        }
        else
        {
          uint64_t v22 = *(void *)(a1 + 24);
          BOOL v21 = sub_C259D4(v22 + 3896) && *(void *)(v22 + 3960) != 0;
        }
        BYTE1(__p[0]) = v21;
        uint64_t v23 = *(void *)(a1 + 24);
        if (!sub_C259D4(v23 + 3896))
        {
          __p[1] = 0;
          if (*v341 == -1) {
            goto LABEL_390;
          }
LABEL_23:
          unsigned int v24 = *(_DWORD *)(a1 + 416);
          uint64_t v25 = v341;
          int v344 = v337;
          while (2)
          {
            v361 = 0;
            v362 = 0;
            unint64_t v363 = 0;
            v366 = 0;
            uint64_t v367 = 0;
            v365 = 0;
            v368[0] = 1;
            *(void *)&v368[4] = 0x8000000080000000;
            *(_WORD *)&v368[12] = 0;
            v368[14] = 0;
            int v421 = -1;
            if (v25[4] == -1)
            {
LABEL_275:
              char v364 = 1;
              unsigned int v243 = v25[3];
              unsigned int v244 = v25[7];
              uint64_t v245 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), *v25);
              uint64_t v246 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), v24);
              *(_DWORD *)v401 = 0;
              *(_DWORD *)&v401[4] = v243;
              *(void *)&v401[12] = v245;
              *(void *)&v401[20] = v246;
              *(_DWORD *)&v401[8] = v244;
              int v410 = 1;
              if (v421)
              {
                if (v421 == 1)
                {
                  *(_OWORD *)v411 = *(_OWORD *)v401;
                  *(_OWORD *)&v411[12] = *(_OWORD *)&v401[12];
                  goto LABEL_287;
                }
LABEL_286:
                *(_OWORD *)v411 = *(_OWORD *)v401;
                *(_OWORD *)&v411[12] = *(_OWORD *)&v401[12];
                int v421 = 1;
              }
              else
              {
                if ((void)v418)
                {
                  *((void *)&v418 + 1) = v418;
                  operator delete((void *)v418);
                }
                if ((void)v415)
                {
                  *((void *)&v415 + 1) = v415;
                  operator delete((void *)v415);
                }
                if (v413[0])
                {
                  v413[1] = v413[0];
                  operator delete(v413[0]);
                }
                if (v410)
                {
                  if (v410 == 1) {
                    goto LABEL_286;
                  }
                  int v421 = v410;
                }
                else
                {
                  sub_9F6FA0((uint64_t)v411, (long long *)v401);
                  int v421 = v410;
                  if (!v410)
                  {
                    if ((void)v407)
                    {
                      *((void *)&v407 + 1) = v407;
                      operator delete((void *)v407);
                    }
                    if (v405[0])
                    {
                      v405[1] = v405[0];
                      operator delete(v405[0]);
                    }
                    if ((void)v403)
                    {
                      *((void *)&v403 + 1) = v403;
                      operator delete((void *)v403);
                    }
                  }
                }
              }
LABEL_287:
              unsigned int v24 = *v25;
              uint64_t v240 = (uint64_t)v362;
              if ((unint64_t)v362 >= v363) {
                goto LABEL_288;
              }
LABEL_270:
              *(_DWORD *)(v240 + 160) = v421;
              if (v421 == 1)
              {
                long long v274 = *(_OWORD *)v411;
                *(_OWORD *)(v240 + 12) = *(_OWORD *)&v411[12];
                *(_OWORD *)uint64_t v240 = v274;
                v362 = (char *)(v240 + 168);
                uint64_t v241 = *((void *)&v393 + 1);
                if (*((void *)&v393 + 1) < (unint64_t)v394) {
                  goto LABEL_289;
                }
              }
              else
              {
                if (!v421) {
                  sub_9F6FA0(v240, (long long *)v411);
                }
                v362 = (char *)(v240 + 168);
                uint64_t v241 = *((void *)&v393 + 1);
                if (*((void *)&v393 + 1) < (unint64_t)v394) {
                  goto LABEL_289;
                }
              }
LABEL_274:
              uint64_t v242 = sub_A4CECC((void ***)&v393, (uint64_t)&v361);
              goto LABEL_302;
            }
            long long v345 = xmmword_20E12E0;
            __int16 v346 = 0;
            unint64_t v347 = 0x8000000080000000;
            __int16 v348 = 0;
            *(_OWORD *)v349 = xmmword_20EB6B0;
            *(void *)&v349[16] = 0xFFFFFFFF7FFFFFFFLL;
            long long v351 = 0u;
            long long v352 = 0u;
            long long v353 = 0u;
            int v350 = -1;
            int v354 = 0x7FFFFFFF;
            v356 = 0;
            uint64_t v357 = 0;
            v355 = 0;
            char v358 = 1;
            unint64_t v359 = 0x8000000080000000;
            int v360 = 0;
            char v364 = 0;
            uint64_t v27 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 40) + 88), v25[4]);
            *(void *)v349 = v27;
            uint64_t v28 = *(void *)(v25 + 1);
            *(_DWORD *)&v349[16] = v25[3];
            *(void *)&v349[8] = v28;
            *(_DWORD *)&v349[20] = *v25;
            unsigned int v29 = *(_DWORD *)&v349[20];
            uint64_t v30 = *(void *)(a1 + 24);
            unint64_t v399 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), v24);
            sub_A1E9A0((uint64_t)v401, v30, v27, v29, 0, 0);
            *(void *)&long long v403 = *(void *)&v402[24] + 12 * *(unsigned int *)&v349[8];
            if (LOBYTE(v405[1])) {
              *(void **)((char *)&v405[1] + 4) = *(void **)&v349[12];
            }
            if (*(void *)&v402[16]) {
              uint64_t v31 = *(unsigned int *)(*(void *)&v402[16]
            }
                                    + 4 * ((*(void *)v402 - *(void *)&v401[24]) >> 4));
            else {
              uint64_t v31 = 0;
            }
            sub_A4C9D4((uint64_t)v401, &v399, v31);
            _CF = *(void *)v402 < *(void *)&v402[8] && *(void *)v402 >= *(void *)&v401[24];
            uint64_t v33 = (*(void *)v402 - *(void *)&v401[24]) >> 4;
            if (!_CF) {
              LODWORD(v33) = -1;
            }
            int v350 = v33;
            uint64_t v34 = *(void *)(a1 + 32);
            uint64_t v35 = (void *)(*(void *)(a1 + 24) + 4136);
            unint64_t v36 = *(void *)v349;
            unsigned int v37 = *(_DWORD *)&v349[20];
            uint64_t v38 = HIDWORD(*(void *)v349);
            if (sub_A10E20(v35, *(int *)&v349[4]))
            {
              uint64_t v39 = (int *)sub_A1120C(*(void *)(*v35 + 3944), v36);
            }
            else
            {
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                && __cxa_guard_acquire(&qword_24F7308))
              {
                sub_518C8(0x3B60u, 0x7FCAu);
                dword_24F7300 = v303 | 0x40000000;
                __cxa_guard_release(&qword_24F7308);
              }
              uint64_t v40 = *v35;
              if (dword_24F7300 == v38)
              {
                uint64_t v41 = *(unsigned int **)(*(void *)(v40 + 3976) + 72);
                if (!v41)
                {
                  exception = __cxa_allocate_exception(0x40uLL);
                  sub_5E5C(v401, "Realtime stop pattern quad data requested on nullptr buffer");
                  v331 = (void *)sub_2F404((uint64_t)exception, (long long *)v401);
                }
                uint64_t v42 = (int *)((char *)v41 + *v41);
                unsigned __int16 v43 = (unsigned __int16 *)((char *)v42 - *v42);
                if (*v43 >= 5u && (uint64_t v44 = v43[2]) != 0) {
                  unint64_t v45 = (unsigned int *)((char *)v42 + v44 + *(unsigned int *)((char *)v42 + v44));
                }
                else {
                  unint64_t v45 = 0;
                }
                uint64_t v39 = (int *)sub_A1139C(v45, v36);
              }
              else
              {
                uint64_t v39 = (int *)sub_A11500(v40 + 24, v36, 0, "stop pattern");
              }
            }
            uint64_t v46 = (unsigned __int16 *)((char *)v39 - *v39);
            if (*v46 >= 9u && (uint64_t v47 = v46[4]) != 0) {
              int v48 = (unsigned int *)((char *)v39 + v47 + *(unsigned int *)((char *)v39 + v47));
            }
            else {
              int v48 = 0;
            }
            int v49 = (void *)sub_A10764(v48, v37);
            uint64_t v50 = 0;
            unint64_t v51 = __ROR8__(*v49, 32);
            uint64_t v52 = *(void *)(v34 + 72) - 1;
            unint64_t v53 = 0xC4CEB9FE1A85EC53
                * ((0xFF51AFD7ED558CCDLL * (v51 ^ (v51 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v51 ^ (v51 >> 33))) >> 33));
            unint64_t v54 = v53 ^ (v53 >> 33);
            uint64_t v55 = *(void *)(v34 + 48);
            uint64_t v56 = v55 + 11;
            uint64_t v57 = -1;
            unint64_t v58 = v54;
LABEL_57:
            uint64_t v59 = v58 & v52;
            unint64_t v60 = (v58 & v52) / 0x30;
            unint64_t v61 = v59 - 48 * v60;
            if (((*(unsigned __int8 *)(v55 + 16 * v60 + (v61 >> 3) + 10) >> (v61 & 7)) & 1) == 0)
            {
              if (v57 == -1) {
                unint64_t v97 = v59;
              }
              else {
                unint64_t v97 = v57;
              }
              goto LABEL_94;
            }
            uint64_t v62 = *(void *)(v55 + 16 * v60);
            if (!*(void *)(v34 + 40)) {
              goto LABEL_73;
            }
            unint64_t v63 = (unsigned __int8 *)(v55 + 16 * v60 + 10);
            if ((unsigned __int16)(v59 - 48 * v60) < 9u)
            {
              __int16 v64 = 0;
              LOBYTE(v69) = v59 - 48 * v60;
              goto LABEL_69;
            }
            __int16 v64 = 0;
            uint64_t v65 = (unsigned __int16)(v59 - 48 * v60 - 9) >> 3;
            if ((unsigned __int16)(v59 - 48 * v60 - 9) >> 3)
            {
              __int16 v66 = 0;
              uint64_t v67 = v65 + 1;
              uint64_t v68 = (v65 + 1) & 0x3FFE;
              unsigned __int16 v69 = v61 - 8 * v68;
              __int16 v70 = &v63[v68];
              uint64_t v71 = (unsigned __int8 *)(v56 + 16 * v60);
              uint64_t v72 = v68;
              do
              {
                uint64_t v73 = *(v71 - 1);
                int v74 = *v71;
                v71 += 2;
                v64 += byte_20EBFB6[v73];
                v66 += byte_20EBFB6[v74];
                v72 -= 2;
              }
              while (v72);
              v64 += v66;
              if (v67 == v68)
              {
LABEL_68:
                v63 += ((unsigned __int16)(v61 - 9) >> 3) + 1;
LABEL_69:
                uint64_t v76 = (_DWORD *)(v62
                               + 12
                               * (unsigned __int16)(v64
                                                  + byte_20EBFB6[~(-1 << v69) & (unint64_t)*v63]));
                if (*(_DWORD *)(v34 + 36) == v76[1] && *(_DWORD *)(v34 + 32) == *v76)
                {
                  if (v57 == -1) {
                    uint64_t v57 = v59;
                  }
                }
                else
                {
LABEL_73:
                  int v78 = (unsigned __int8 *)(v55 + 16 * v60 + 10);
                  if ((unsigned __int16)(v59 - 48 * v60) >= 9u)
                  {
                    __int16 v79 = 0;
                    uint64_t v80 = (unsigned __int16)(v59 - 48 * v60 - 9) >> 3;
                    if ((unsigned __int16)(v59 - 48 * v60 - 9) >> 3)
                    {
                      __int16 v81 = 0;
                      uint64_t v82 = v80 + 1;
                      uint64_t v83 = (v80 + 1) & 0x3FFE;
                      unsigned __int16 v84 = v61 - 8 * v83;
                      uint64_t v85 = &v78[v83];
                      uint64_t v86 = (unsigned __int8 *)(v56 + 16 * v60);
                      uint64_t v87 = v83;
                      do
                      {
                        uint64_t v88 = *(v86 - 1);
                        int v89 = *v86;
                        v86 += 2;
                        v79 += byte_20EBFB6[v88];
                        v81 += byte_20EBFB6[v89];
                        v87 -= 2;
                      }
                      while (v87);
                      v79 += v81;
                      if (v82 == v83)
                      {
LABEL_82:
                        uint64_t v90 = &v78[((unsigned __int16)(v61 - 9) >> 3) + 1];
                        goto LABEL_83;
                      }
                    }
                    else
                    {
                      unsigned __int16 v84 = v59 - 48 * v60;
                      uint64_t v85 = (unsigned __int8 *)(v55 + 16 * v60 + 10);
                    }
                    do
                    {
                      int v91 = *v85++;
                      v79 += byte_20EBFB6[v91];
                      v84 -= 8;
                    }
                    while (v84 > 8u);
                    goto LABEL_82;
                  }
                  __int16 v79 = 0;
                  uint64_t v90 = (unsigned __int8 *)(v55 + 16 * v60 + 10);
                  LOBYTE(v84) = v59 - 48 * v60;
LABEL_83:
                  if (v51 == *(void *)(v62
                                        + 12
                                        * (unsigned __int16)(v79
                                                           + byte_20EBFB6[~(-1 << v84) & (unint64_t)*v90])))
                  {
                    if (v59 != -1)
                    {
                      if ((unsigned __int16)(v59 - 48 * v60) < 9u)
                      {
                        __int16 v94 = 0;
                      }
                      else
                      {
                        if ((((_WORD)v59 - 48 * (_WORD)v60 - 8) & 0xFFF8) != 0) {
                          __int16 v92 = 8;
                        }
                        else {
                          __int16 v92 = v59 - 48 * v60 - 8;
                        }
                        unsigned __int16 v93 = ~v92 + v59 - 48 * v60;
                        if (v93 < 8u)
                        {
                          __int16 v94 = 0;
                          unsigned __int16 v95 = v61;
                          __int16 v96 = (unsigned __int8 *)(v55 + 16 * v60 + 10);
                          goto LABEL_339;
                        }
                        __int16 v275 = 0;
                        __int16 v276 = 0;
                        uint64_t v277 = (v93 >> 3) + 1;
                        unsigned __int16 v95 = v61 - 8 * (((v93 >> 3) + 1) & 0x3FFE);
                        __int16 v96 = &v78[v277 & 0x3FFE];
                        uint64_t v278 = (unsigned __int8 *)(v55 + 16 * v60 + 11);
                        uint64_t v279 = v277 & 0x3FFE;
                        do
                        {
                          uint64_t v280 = *(v278 - 1);
                          int v281 = *v278;
                          v278 += 2;
                          v275 += byte_20EBFB6[v280];
                          v276 += byte_20EBFB6[v281];
                          v279 -= 2;
                        }
                        while (v279);
                        __int16 v94 = v276 + v275;
                        if ((v277 & 0x3FFE) != v277)
                        {
                          do
                          {
LABEL_339:
                            int v282 = *v96++;
                            v94 += byte_20EBFB6[v282];
                            v95 -= 8;
                          }
                          while (v95 > 8u);
                        }
                        v78 += ((unsigned __int16)(v61 - 9) >> 3) + 1;
                        LOBYTE(v61) = v95;
                      }
                      uint64_t v283 = *(void *)(v34 + 56);
                      unsigned __int16 v284 = v94 + byte_20EBFB6[~(-1 << v61) & (unint64_t)*v78];
                      uint64_t v285 = v55 + 16 * v60;
                      if (*(unsigned __int16 *)(v285 + 8) != v284 || v285 + 16 == v283)
                      {
                        __int16 v142 = (_DWORD *)(v62 + 12 * v284);
                      }
                      else
                      {
                        uint64_t v287 = v285 + 32;
                        do
                        {
                          if (*(_WORD *)(v287 - 8)) {
                            BOOL v288 = 1;
                          }
                          else {
                            BOOL v288 = v287 == v283;
                          }
                          v287 += 16;
                        }
                        while (!v288);
                        __int16 v142 = *(_DWORD **)(v287 - 32);
                      }
                      goto LABEL_139;
                    }
                    unint64_t v97 = -1;
LABEL_94:
                    if (!sub_AD2F40(v34, 1))
                    {
                      unint64_t v399 = v51;
                      int v400 = -1;
                      sub_AD3484(v34, (uint64_t *)&v399, v97, v401);
LABEL_138:
                      __int16 v142 = *(_DWORD **)v402;
                      goto LABEL_139;
                    }
                    uint64_t v98 = 0;
                    unint64_t v399 = v51;
                    int v400 = -1;
                    uint64_t v99 = *(void *)(v34 + 72) - 1;
                    uint64_t v100 = *(void *)(v34 + 48);
                    uint64_t v101 = v100 + 11;
                    uint64_t v102 = -1;
                    while (2)
                    {
                      uint64_t v103 = v54 & v99;
                      unint64_t v104 = (v54 & v99) / 0x30;
                      unint64_t v105 = (v54 & v99) % 0x30;
                      if (((*(unsigned __int8 *)(v100 + 16 * v104 + (v105 >> 3) + 10) >> (v105 & 7)) & 1) == 0)
                      {
                        if (v102 == -1) {
                          unint64_t v141 = v54 & v99;
                        }
                        else {
                          unint64_t v141 = v102;
                        }
                        goto LABEL_137;
                      }
                      uint64_t v106 = *(void *)(v34 + 40);
                      uint64_t v107 = *(void *)(v100 + 16 * v104);
                      if (!v106) {
                        break;
                      }
                      uint64_t v108 = (unsigned __int8 *)(v100 + 16 * v104 + 10);
                      if ((unsigned __int16)((v54 & v99) % 0x30) < 9u)
                      {
                        __int16 v109 = 0;
                        unint64_t v110 = (v54 & v99) % 0x30;
                        goto LABEL_111;
                      }
                      __int16 v109 = 0;
                      unint64_t v110 = (unsigned __int16)(v103 - 48 * v104 - 9) >> 3;
                      if (!((unsigned __int16)(v103 - 48 * v104 - 9) >> 3))
                      {
                        unint64_t v110 = (v54 & v99) % 0x30;
                        unsigned int v114 = (unsigned __int8 *)(v100 + 16 * v104 + 10);
                        do
                        {
LABEL_109:
                          int v119 = *v114++;
                          v109 += byte_20EBFB6[v119];
                          LOWORD(v110) = v110 - 8;
                        }
                        while ((unsigned __int16)v110 > 8u);
                        goto LABEL_110;
                      }
                      __int16 v111 = 0;
                      unint64_t v112 = v110 + 1;
                      uint64_t v113 = (v110 + 1) & 0x3FFE;
                      LOWORD(v110) = v105 - 8 * v113;
                      unsigned int v114 = &v108[v113];
                      unsigned int v115 = (unsigned __int8 *)(v101 + 16 * v104);
                      uint64_t v116 = v113;
                      do
                      {
                        uint64_t v117 = *(v115 - 1);
                        int v118 = *v115;
                        v115 += 2;
                        v109 += byte_20EBFB6[v117];
                        v111 += byte_20EBFB6[v118];
                        v116 -= 2;
                      }
                      while (v116);
                      v109 += v111;
                      if (v112 != v113) {
                        goto LABEL_109;
                      }
LABEL_110:
                      v108 += ((unsigned __int16)(v105 - 9) >> 3) + 1;
LABEL_111:
                      uint64_t v120 = (_DWORD *)(v107
                                      + 12
                                      * (unsigned __int16)(v109
                                                         + byte_20EBFB6[~(-1 << v110) & (unint64_t)*v108]));
                      if (*(_DWORD *)(v34 + 36) == v120[1] && *(_DWORD *)(v34 + 32) == *v120)
                      {
                        if (v102 == -1) {
                          uint64_t v102 = v103;
                        }
LABEL_98:
                        unint64_t v54 = ++v98 + v103;
                        continue;
                      }
                      break;
                    }
                    unsigned int v122 = (unsigned __int8 *)(v100 + 16 * v104 + 10);
                    if ((unsigned __int16)v105 < 9u)
                    {
                      __int16 v123 = 0;
                      uint64_t v134 = (unsigned __int8 *)(v100 + 16 * v104 + 10);
                      LOBYTE(v128) = v105;
                      goto LABEL_125;
                    }
                    __int16 v123 = 0;
                    uint64_t v124 = (unsigned __int16)(v103 - 48 * v104 - 9) >> 3;
                    if (!((unsigned __int16)(v103 - 48 * v104 - 9) >> 3))
                    {
                      unsigned __int16 v128 = v105;
                      unint64_t v129 = (unsigned __int8 *)(v100 + 16 * v104 + 10);
                      do
                      {
LABEL_123:
                        int v135 = *v129++;
                        v123 += byte_20EBFB6[v135];
                        v128 -= 8;
                      }
                      while (v128 > 8u);
                      goto LABEL_124;
                    }
                    __int16 v125 = 0;
                    uint64_t v126 = v124 + 1;
                    uint64_t v127 = (v124 + 1) & 0x3FFE;
                    unsigned __int16 v128 = v105 - 8 * v127;
                    unint64_t v129 = &v122[v127];
                    uint64_t v130 = (unsigned __int8 *)(v101 + 16 * v104);
                    uint64_t v131 = v127;
                    do
                    {
                      uint64_t v132 = *(v130 - 1);
                      int v133 = *v130;
                      v130 += 2;
                      v123 += byte_20EBFB6[v132];
                      v125 += byte_20EBFB6[v133];
                      v131 -= 2;
                    }
                    while (v131);
                    v123 += v125;
                    if (v126 != v127) {
                      goto LABEL_123;
                    }
LABEL_124:
                    uint64_t v134 = &v122[((unsigned __int16)(v105 - 9) >> 3) + 1];
LABEL_125:
                    if (v51 != *(void *)(v107
                                          + 12
                                          * (unsigned __int16)(v123
                                                             + byte_20EBFB6[~(-1 << v128) & (unint64_t)*v134])))
                      goto LABEL_98;
                    if (v103 == -1)
                    {
                      unint64_t v141 = -1;
LABEL_137:
                      sub_AD3484(v34, (uint64_t *)&v399, v141, v401);
                      goto LABEL_138;
                    }
                    if ((unsigned __int16)v105 < 9u)
                    {
                      __int16 v138 = 0;
                    }
                    else
                    {
                      if ((((_WORD)v103 - 48 * (_WORD)v104 - 8) & 0xFFF8) != 0) {
                        __int16 v136 = 8;
                      }
                      else {
                        __int16 v136 = v103 - 48 * v104 - 8;
                      }
                      unsigned __int16 v137 = ~v136 + v103 - 48 * v104;
                      if (v137 < 8u)
                      {
                        __int16 v138 = 0;
                        unsigned __int16 v139 = v105;
                        __int16 v140 = (unsigned __int8 *)(v100 + 16 * v104 + 10);
                        goto LABEL_358;
                      }
                      __int16 v289 = 0;
                      __int16 v290 = 0;
                      uint64_t v291 = (v137 >> 3) + 1;
                      unsigned __int16 v139 = v105 - 8 * (((v137 >> 3) + 1) & 0x3FFE);
                      __int16 v140 = &v122[v291 & 0x3FFE];
                      unsigned int v292 = (unsigned __int8 *)(v100 + 16 * v104 + 11);
                      uint64_t v293 = v291 & 0x3FFE;
                      do
                      {
                        uint64_t v294 = *(v292 - 1);
                        int v295 = *v292;
                        v292 += 2;
                        v289 += byte_20EBFB6[v294];
                        v290 += byte_20EBFB6[v295];
                        v293 -= 2;
                      }
                      while (v293);
                      __int16 v138 = v290 + v289;
                      if ((v291 & 0x3FFE) != v291)
                      {
                        do
                        {
LABEL_358:
                          int v296 = *v140++;
                          v138 += byte_20EBFB6[v296];
                          v139 -= 8;
                        }
                        while (v139 > 8u);
                      }
                      v122 += ((unsigned __int16)(v105 - 9) >> 3) + 1;
                      LOBYTE(v105) = v139;
                    }
                    uint64_t v297 = v100 + 16 * v104;
                    unint64_t v298 = *(_DWORD ***)(v34 + 56);
                    unsigned __int16 v299 = v138 + byte_20EBFB6[~(-1 << v105) & (unint64_t)*v122];
                    __int16 v142 = (_DWORD *)(v107 + 12 * v299);
                    if (*(unsigned __int16 *)(v297 + 8) == v299)
                    {
                      uint64_t v300 = v297 + 16;
                      if ((_DWORD **)(v297 + 16) != v298)
                      {
                        while (1)
                        {
                          v301 = (_DWORD **)v300;
                          if (*(_WORD *)(v300 + 8)) {
                            break;
                          }
                          v300 += 16;
                          if (v301 + 2 == v298)
                          {
                            uint64_t v297 = *(void *)(v34 + 56);
                            goto LABEL_366;
                          }
                        }
                        uint64_t v297 = v300;
LABEL_366:
                        __int16 v142 = *v301;
                        goto LABEL_367;
                      }
                    }
                    else
                    {
LABEL_367:
                      if ((_DWORD **)v297 != v298 && v106)
                      {
                        do
                        {
                          if (*(_DWORD *)(v34 + 36) != v142[1] || *(_DWORD *)(v34 + 32) != *v142) {
                            break;
                          }
                          v142 += 3;
                          if (v142 == (_DWORD *)(*(void *)v297 + 12 * *(unsigned __int16 *)(v297 + 8)))
                          {
                            v297 += 16;
                            if ((_DWORD **)v297 != v298)
                            {
                              do
                              {
                                if (*(_WORD *)(v297 + 8))
                                {
                                  __int16 v142 = *(_DWORD **)v297;
                                  goto LABEL_371;
                                }
                                v297 += 16;
                              }
                              while ((_DWORD **)v297 != v298);
                              __int16 v142 = *(_DWORD **)(v297 - 16);
                            }
                            break;
                          }
LABEL_371:
                          ;
                        }
                        while ((_DWORD **)v297 != v298);
                      }
                    }
LABEL_139:
                    unsigned int v24 = v142[2];
                    if (v24 == -1)
                    {
                      int v143 = *(_DWORD *)(v34 + 112);
                      *(_DWORD *)(v34 + 112) = v143 + 1;
                      v142[2] = v143;
                      unsigned __int16 v145 = *(char **)(v34 + 96);
                      unint64_t v144 = *(void *)(v34 + 104);
                      if ((unint64_t)v145 < v144)
                      {
                        *(void *)unsigned __int16 v145 = v51;
                        uint64_t v146 = (uint64_t)(v145 + 8);
                        goto LABEL_164;
                      }
                      uint64_t v147 = (char **)(v34 + 88);
                      uint64_t v148 = *(char **)(v34 + 88);
                      uint64_t v149 = (char *)(v145 - v148);
                      uint64_t v150 = (v145 - v148) >> 3;
                      unint64_t v151 = v150 + 1;
                      if ((unint64_t)(v150 + 1) >> 61) {
                        sub_2E00();
                      }
                      uint64_t v152 = v144 - (void)v148;
                      if (v152 >> 2 > v151) {
                        unint64_t v151 = v152 >> 2;
                      }
                      if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v153 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v153 = v151;
                      }
                      if (v153)
                      {
                        if (v153 >> 61) {
                          sub_188D718();
                        }
                        unint64_t v154 = v153;
                        v155 = operator new(8 * v153);
                        uint64_t v147 = (char **)(v34 + 88);
                        unint64_t v153 = v154;
                        uint64_t v149 = (char *)(v145 - v148);
                        uint64_t v156 = (unint64_t *)&v155[8 * v150];
                        *uint64_t v156 = v51;
                        uint64_t v146 = (uint64_t)(v156 + 1);
                        if (v145 == v148) {
                          goto LABEL_162;
                        }
LABEL_155:
                        unint64_t v157 = v145 - 8 - v148;
                        if (v157 < 0x58) {
                          goto LABEL_435;
                        }
                        if ((unint64_t)(v145 - v155 - (void)v149) < 0x20) {
                          goto LABEL_435;
                        }
                        uint64_t v158 = (v157 >> 3) + 1;
                        uint64_t v159 = 8 * (v158 & 0x3FFFFFFFFFFFFFFCLL);
                        BOOL v160 = &v145[-v159];
                        uint64_t v156 = (unint64_t *)((char *)v156 - v159);
                        unint64_t v161 = &v155[8 * v150 - 16];
                        unint64_t v162 = v145 - 16;
                        uint64_t v163 = v158 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          long long v164 = *(_OWORD *)v162;
                          *(v161 - 1) = *((_OWORD *)v162 - 1);
                          *unint64_t v161 = v164;
                          v161 -= 2;
                          v162 -= 32;
                          v163 -= 4;
                        }
                        while (v163);
                        unsigned __int16 v145 = v160;
                        if (v158 != (v158 & 0x3FFFFFFFFFFFFFFCLL))
                        {
LABEL_435:
                          do
                          {
                            unint64_t v165 = *((void *)v145 - 1);
                            v145 -= 8;
                            *--uint64_t v156 = v165;
                          }
                          while (v145 != v148);
                        }
                        unsigned __int16 v145 = *v147;
                      }
                      else
                      {
                        v155 = 0;
                        uint64_t v156 = (unint64_t *)(8 * v150);
                        *(void *)(8 * v150) = v51;
                        uint64_t v146 = 8 * v150 + 8;
                        if (v145 != v148) {
                          goto LABEL_155;
                        }
                      }
LABEL_162:
                      *(void *)(v34 + 88) = v156;
                      *(void *)(v34 + 96) = v146;
                      *(void *)(v34 + 104) = &v155[8 * v153];
                      if (v145) {
                        operator delete(v145);
                      }
LABEL_164:
                      *(void *)(v34 + 96) = v146;
                      unsigned int v24 = v142[2];
                    }
                    unint64_t v166 = (void *)(*(void *)(v343 + 24) + 4136);
                    unint64_t v167 = *(void *)v349;
                    unsigned int v168 = *(_DWORD *)&v349[20];
                    uint64_t v169 = HIDWORD(*(void *)v349);
                    if (sub_A10E20(v166, *(int *)&v349[4]))
                    {
                      signed int v170 = (int *)sub_A1120C(*(void *)(*v166 + 3944), v167);
                    }
                    else
                    {
                      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                        && __cxa_guard_acquire(&qword_24F7308))
                      {
                        sub_518C8(0x3B60u, 0x7FCAu);
                        dword_24F7300 = v304 | 0x40000000;
                        __cxa_guard_release(&qword_24F7308);
                      }
                      uint64_t v171 = *v166;
                      if (dword_24F7300 == v169)
                      {
                        signed int v172 = *(unsigned int **)(*(void *)(v171 + 3976) + 72);
                        if (!v172)
                        {
                          v328 = __cxa_allocate_exception(0x40uLL);
                          sub_5E5C(v401, "Realtime stop pattern quad data requested on nullptr buffer");
                          v329 = (void *)sub_2F404((uint64_t)v328, (long long *)v401);
                        }
                        uint64_t v173 = (int *)((char *)v172 + *v172);
                        unint64_t v174 = (unsigned __int16 *)((char *)v173 - *v173);
                        if (*v174 >= 5u && (uint64_t v175 = v174[2]) != 0) {
                          __int16 v176 = (unsigned int *)((char *)v173 + v175 + *(unsigned int *)((char *)v173 + v175));
                        }
                        else {
                          __int16 v176 = 0;
                        }
                        signed int v170 = (int *)sub_A1139C(v176, v167);
                      }
                      else
                      {
                        signed int v170 = (int *)sub_A11500(v171 + 24, v167, 0, "stop pattern");
                      }
                    }
                    __int16 v177 = (unsigned __int16 *)((char *)v170 - *v170);
                    if (*v177 >= 9u && (uint64_t v178 = v177[4]) != 0) {
                      uint64_t v179 = (unsigned int *)((char *)v170 + v178 + *(unsigned int *)((char *)v170 + v178));
                    }
                    else {
                      uint64_t v179 = 0;
                    }
                    DWORD1(v345) = 10 * *(_DWORD *)(sub_A10764(v179, v168) + 8);
                    uint64_t v180 = *(void *)(v343 + 24);
                    unint64_t v181 = *(void *)v349;
                    int v182 = (uint64_t *)(v180 + 4136);
                    unsigned int v183 = *(_DWORD *)&v349[20];
                    int v184 = *(_DWORD *)&v349[8];
                    uint64_t v185 = HIDWORD(*(void *)v349);
                    if (sub_A10E20((void *)(v180 + 4136), *(int *)&v349[4]))
                    {
                      unsigned __int16 v186 = *(unsigned int **)(*(void *)(*v182 + 3944) + 72);
                      if (!v186)
                      {
                        v322 = __cxa_allocate_exception(0x40uLL);
                        sub_5E5C(v401, "Incident stop pattern quad data requested on nullptr buffer");
                        v323 = (void *)sub_2F404((uint64_t)v322, (long long *)v401);
                      }
                      goto LABEL_186;
                    }
                    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                      && __cxa_guard_acquire(&qword_24F7308))
                    {
                      sub_518C8(0x3B60u, 0x7FCAu);
                      dword_24F7300 = v305 | 0x40000000;
                      __cxa_guard_release(&qword_24F7308);
                    }
                    uint64_t v187 = *v182;
                    if (dword_24F7300 != v185)
                    {
                      __int16 v188 = sub_A10B80(v187 + 24, v181, 0);
                      uint64_t v189 = &v188[-*(int *)v188];
                      if (*(unsigned __int16 *)v189 >= 5u) {
                        goto LABEL_187;
                      }
LABEL_190:
                      uint64_t v190 = 0;
                      goto LABEL_191;
                    }
                    unsigned __int16 v186 = *(unsigned int **)(*(void *)(v187 + 3976) + 72);
                    if (!v186)
                    {
                      v332 = __cxa_allocate_exception(0x40uLL);
                      sub_5E5C(v401, "Realtime stop pattern quad data requested on nullptr buffer");
                      v333 = (void *)sub_2F404((uint64_t)v332, (long long *)v401);
                    }
LABEL_186:
                    __int16 v188 = (char *)v186 + *v186;
                    uint64_t v189 = &v188[-*(int *)v188];
                    if (*(unsigned __int16 *)v189 < 5u) {
                      goto LABEL_190;
                    }
LABEL_187:
                    uint64_t v190 = *((unsigned __int16 *)v189 + 2);
                    if (v190) {
                      v190 += (uint64_t)&v188[*(unsigned int *)&v188[v190]];
                    }
LABEL_191:
                    __int16 v191 = (int *)(v190
                                 + 4 * v181
                                 + 4
                                 + *(unsigned int *)(v190 + 4 * v181 + 4));
                    uint64_t v192 = (unsigned __int16 *)((char *)v191 - *v191);
                    if (*v192 >= 9u && (uint64_t v193 = v192[4]) != 0) {
                      int v194 = (unsigned int *)((char *)v191 + v193 + *(unsigned int *)((char *)v191 + v193));
                    }
                    else {
                      int v194 = 0;
                    }
                    uint64_t v195 = sub_A10764(v194, v183);
                    v196 = &v188[-*(int *)v188];
                    if (*(unsigned __int16 *)v196 < 0xBu)
                    {
                      uint64_t v197 = 0;
                      BOOL v198 = (unsigned __int16 *)((char *)v191 - *v191);
                      if (*v198 >= 0x11u) {
                        goto LABEL_199;
                      }
LABEL_202:
                      LODWORD(v199) = 0;
                      goto LABEL_203;
                    }
                    uint64_t v197 = (unsigned int *)*((unsigned __int16 *)v196 + 5);
                    if (v197) {
                      uint64_t v197 = (unsigned int *)((char *)v197
                    }
                                            + (void)v188
                                            + *(unsigned int *)((char *)v197 + (void)v188));
                    BOOL v198 = (unsigned __int16 *)((char *)v191 - *v191);
                    if (*v198 < 0x11u) {
                      goto LABEL_202;
                    }
LABEL_199:
                    uint64_t v199 = v198[8];
                    if (v198[8]) {
                      LODWORD(v199) = *(int *)((char *)v191 + v199);
                    }
LABEL_203:
                    uint64_t v200 = sub_A108C4(v197, v199+ *(int *)((char *)v191 + v198[2] + *(unsigned int *)((char *)v191 + v198[2])) * v184+ *(unsigned __int8 *)(v195 + 14));
                    if (v200)
                    {
                      uint64_t v201 = __ROR8__(*(void *)v200, 32);
                      int v202 = *(_DWORD *)(v200 + 8);
                    }
                    else
                    {
                      int v202 = 0;
                      uint64_t v201 = 0xFFFFFFFFLL;
                    }
                    *(void *)v401 = v201;
                    *(_DWORD *)&v401[8] = v202;
                    unsigned int v203 = (int *)sub_A11094((void *)(v180 + 4136), v181);
                    uint64_t v204 = (unsigned __int16 *)((char *)v203 - *v203);
                    if (*v204 >= 9u && (uint64_t v205 = v204[4]) != 0) {
                      uint64_t v206 = (unsigned int *)((char *)v203 + v205 + *(unsigned int *)((char *)v203 + v205));
                    }
                    else {
                      uint64_t v206 = 0;
                    }
                    unsigned int v207 = *(unsigned __int16 *)(sub_A10764(v206, v183) + 12);
                    if (*(_DWORD *)&v349[12] == -1) {
                      int v208 = 0x7FFFFFFF;
                    }
                    else {
                      int v208 = *(_DWORD *)&v349[16];
                    }
                    *((void *)&v345 + 1) = sub_A0FAA0((uint64_t *)(v180 + 4184), (unsigned int *)v401, v207, v208);
                    __int16 v346 = v209;
                    uint64_t v210 = *(void *)(v343 + 24);
                    unint64_t v211 = *(void *)v349;
                    unint64_t v212 = (uint64_t *)(v210 + 4136);
                    unsigned int v213 = v350;
                    int v214 = *(_DWORD *)&v349[8];
                    uint64_t v215 = HIDWORD(*(void *)v349);
                    if (sub_A10E20((void *)(v210 + 4136), *(int *)&v349[4]))
                    {
                      unint64_t v216 = *(unsigned int **)(*(void *)(*v212 + 3944) + 72);
                      if (!v216)
                      {
                        v324 = __cxa_allocate_exception(0x40uLL);
                        sub_5E5C(v401, "Incident stop pattern quad data requested on nullptr buffer");
                        v325 = (void *)sub_2F404((uint64_t)v324, (long long *)v401);
                      }
                      goto LABEL_219;
                    }
                    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                      && __cxa_guard_acquire(&qword_24F7308))
                    {
                      sub_518C8(0x3B60u, 0x7FCAu);
                      dword_24F7300 = v306 | 0x40000000;
                      __cxa_guard_release(&qword_24F7308);
                    }
                    uint64_t v217 = *v212;
                    if (dword_24F7300 != v215)
                    {
                      uint64_t v218 = sub_A10B80(v217 + 24, v211, 0);
                      int v219 = &v218[-*(int *)v218];
                      if (*(unsigned __int16 *)v219 >= 5u) {
                        goto LABEL_220;
                      }
LABEL_223:
                      uint64_t v220 = 0;
                      goto LABEL_224;
                    }
                    unint64_t v216 = *(unsigned int **)(*(void *)(v217 + 3976) + 72);
                    if (!v216)
                    {
                      v326 = __cxa_allocate_exception(0x40uLL);
                      sub_5E5C(v401, "Realtime stop pattern quad data requested on nullptr buffer");
                      v327 = (void *)sub_2F404((uint64_t)v326, (long long *)v401);
                    }
LABEL_219:
                    uint64_t v218 = (char *)v216 + *v216;
                    int v219 = &v218[-*(int *)v218];
                    if (*(unsigned __int16 *)v219 < 5u) {
                      goto LABEL_223;
                    }
LABEL_220:
                    uint64_t v220 = *((unsigned __int16 *)v219 + 2);
                    if (v220) {
                      v220 += (uint64_t)&v218[*(unsigned int *)&v218[v220]];
                    }
LABEL_224:
                    unsigned int v221 = (int *)(v220
                                 + 4 * v211
                                 + 4
                                 + *(unsigned int *)(v220 + 4 * v211 + 4));
                    int v222 = (unsigned __int16 *)((char *)v221 - *v221);
                    if (*v222 >= 9u && (uint64_t v223 = v222[4]) != 0) {
                      int v224 = (unsigned int *)((char *)v221 + v223 + *(unsigned int *)((char *)v221 + v223));
                    }
                    else {
                      int v224 = 0;
                    }
                    uint64_t v225 = sub_A10764(v224, v213);
                    v226 = &v218[-*(int *)v218];
                    if (*(unsigned __int16 *)v226 < 0xBu)
                    {
                      uint64_t v227 = 0;
                      long long v228 = (unsigned __int16 *)((char *)v221 - *v221);
                      if (*v228 >= 0x11u) {
                        goto LABEL_232;
                      }
LABEL_235:
                      LODWORD(v229) = 0;
                      goto LABEL_236;
                    }
                    uint64_t v227 = (unsigned int *)*((unsigned __int16 *)v226 + 5);
                    if (v227) {
                      uint64_t v227 = (unsigned int *)((char *)v227
                    }
                                            + (void)v218
                                            + *(unsigned int *)((char *)v227 + (void)v218));
                    long long v228 = (unsigned __int16 *)((char *)v221 - *v221);
                    if (*v228 < 0x11u) {
                      goto LABEL_235;
                    }
LABEL_232:
                    uint64_t v229 = v228[8];
                    if (v228[8]) {
                      LODWORD(v229) = *(int *)((char *)v221 + v229);
                    }
LABEL_236:
                    uint64_t v230 = sub_A108C4(v227, v229+ *(int *)((char *)v221 + v228[2] + *(unsigned int *)((char *)v221 + v228[2])) * v214+ *(unsigned __int8 *)(v225 + 14));
                    if (v230)
                    {
                      uint64_t v231 = __ROR8__(*(void *)v230, 32);
                      int v232 = *(_DWORD *)(v230 + 8);
                    }
                    else
                    {
                      int v232 = 0;
                      uint64_t v231 = 0xFFFFFFFFLL;
                    }
                    *(void *)v401 = v231;
                    *(_DWORD *)&v401[8] = v232;
                    uint64_t v233 = (int *)sub_A11094((void *)(v210 + 4136), v211);
                    v234 = (unsigned __int16 *)((char *)v233 - *v233);
                    if (*v234 >= 9u && (uint64_t v235 = v234[4]) != 0) {
                      v236 = (unsigned int *)((char *)v233 + v235 + *(unsigned int *)((char *)v233 + v235));
                    }
                    else {
                      v236 = 0;
                    }
                    unsigned int v237 = *(unsigned __int16 *)(sub_A10764(v236, v213) + 12);
                    if (*(_DWORD *)&v349[12] == -1) {
                      int v238 = 0x7FFFFFFF;
                    }
                    else {
                      int v238 = *(_DWORD *)&v349[16];
                    }
                    unint64_t v347 = sub_A0FDF4((uint64_t *)(v210 + 4184), (unsigned int *)v401, v237, v238);
                    __int16 v348 = v239;
                    int v410 = -1;
                    sub_9F6FA0((uint64_t)v401, &v345);
                    int v410 = 0;
                    if (v421)
                    {
                      sub_9F6FA0((uint64_t)v411, (long long *)v401);
                      a1 = v343;
                      int v421 = v410;
                      if (!v410) {
                        goto LABEL_256;
                      }
                    }
                    else
                    {
                      *(_OWORD *)v411 = *(_OWORD *)v401;
                      *(_OWORD *)&v411[16] = *(_OWORD *)&v401[16];
                      v412[0] = *(_OWORD *)v402;
                      *(_OWORD *)((char *)v412 + 12) = *(_OWORD *)&v402[12];
                      a1 = v343;
                      if (v413[0])
                      {
                        v413[1] = v413[0];
                        operator delete(v413[0]);
                      }
                      *(_OWORD *)v413 = v403;
                      uint64_t v414 = v404;
                      uint64_t v404 = 0;
                      long long v403 = 0uLL;
                      if ((void)v415)
                      {
                        *((void *)&v415 + 1) = v415;
                        operator delete((void *)v415);
                      }
                      long long v415 = *(_OWORD *)v405;
                      v416 = v405[2];
                      memset(v405, 0, sizeof(v405));
                      int v417 = v406;
                      if ((void)v418)
                      {
                        *((void *)&v418 + 1) = v418;
                        operator delete((void *)v418);
                      }
                      long long v418 = v407;
                      uint64_t v419 = v408;
                      uint64_t v408 = 0;
                      long long v407 = 0uLL;
                      long long v420 = v409;
                      if (!v410)
                      {
LABEL_256:
                        if ((void)v407)
                        {
                          *((void *)&v407 + 1) = v407;
                          operator delete((void *)v407);
                        }
                        if (v405[0])
                        {
                          v405[1] = v405[0];
                          operator delete(v405[0]);
                        }
                        if ((void)v403)
                        {
                          *((void *)&v403 + 1) = v403;
                          operator delete((void *)v403);
                        }
                      }
                    }
                    if (v355)
                    {
                      v356 = v355;
                      operator delete(v355);
                    }
                    if (*((void *)&v352 + 1))
                    {
                      *(void *)&long long v353 = *((void *)&v352 + 1);
                      operator delete(*((void **)&v352 + 1));
                    }
                    if ((void)v351)
                    {
                      *((void *)&v351 + 1) = v351;
                      operator delete((void *)v351);
                    }
                    if (v25[4] == -1) {
                      goto LABEL_275;
                    }
                    uint64_t v240 = (uint64_t)v362;
                    if ((unint64_t)v362 < v363) {
                      goto LABEL_270;
                    }
LABEL_288:
                    v362 = (char *)sub_A4CBF4((uint64_t *)&v361, (uint64_t)v411);
                    uint64_t v241 = *((void *)&v393 + 1);
                    if (*((void *)&v393 + 1) >= (unint64_t)v394) {
                      goto LABEL_274;
                    }
LABEL_289:
                    *(void *)uint64_t v241 = 0;
                    *(void *)(v241 + 8) = 0;
                    *(void *)(v241 + 16) = 0;
                    uint64_t v247 = (char *)v361;
                    unint64_t v248 = v362;
                    int64_t v249 = v362 - (unsigned char *)v361;
                    if (v362 != v361)
                    {
                      unint64_t v250 = 0xCF3CF3CF3CF3CF3DLL * (v249 >> 3);
                      if (v250 >= 0x186186186186187) {
                        sub_2E00();
                      }
                      unint64_t v251 = (char *)operator new(v249);
                      uint64_t v252 = 0;
                      *(void *)uint64_t v241 = v251;
                      *(void *)(v241 + 8) = v251;
                      *(void *)(v241 + 16) = &v251[168 * v250];
                      do
                      {
                        v254 = (long long *)&v251[v252];
                        v255 = (long long *)&v247[v252];
                        *(_DWORD *)&v251[v252 + 160] = *(_DWORD *)&v247[v252 + 160];
                        int v256 = *(_DWORD *)&v247[v252 + 160];
                        if (v256 == 1)
                        {
                          long long v253 = *v255;
                          *(long long *)((char *)v254 + 12) = *(long long *)((char *)v255 + 12);
                          long long *v254 = v253;
                        }
                        else if (!v256)
                        {
                          sub_9F6FA0((uint64_t)v254, v255);
                        }
                        v252 += 168;
                      }
                      while (&v247[v252] != v248);
                      *(void *)(v241 + 8) = &v251[v252];
                    }
                    char v257 = v364;
                    *(void *)(v241 + 32) = 0;
                    *(unsigned char *)(v241 + 24) = v257;
                    *(void *)(v241 + 40) = 0;
                    *(void *)(v241 + 48) = 0;
                    long long v258 = v365;
                    uint64_t v259 = v366 - (unsigned char *)v365;
                    if (v366 != v365)
                    {
                      if (0xCCCCCCCCCCCCCCCDLL * (v259 >> 3) >= 0x666666666666667) {
                        sub_2E00();
                      }
                      uint64_t v260 = (char *)operator new(v366 - (unsigned char *)v365);
                      *(void *)(v241 + 32) = v260;
                      *(void *)(v241 + 40) = v260;
                      uint64_t v261 = &v260[8 * (v259 >> 3)];
                      *(void *)(v241 + 48) = v261;
                      memcpy(v260, v258, v259 - 7);
                      *(void *)(v241 + 40) = v261;
                    }
                    uint64_t v262 = *(void *)v368;
                    *(void *)(v241 + 63) = *(void *)&v368[7];
                    *(void *)(v241 + 56) = v262;
                    uint64_t v242 = (char *)(v241 + 72);
LABEL_302:
                    *((void *)&v393 + 1) = v242;
                    unsigned int v264 = v25[5];
                    *(_DWORD *)v401 = v344 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * v24 + 1;
                    int v263 = *(_DWORD *)v401;
                    uint64_t v265 = *(void *)(a1 + 192);
                    uint64_t v266 = *(unsigned int *)(sub_AE36B4(v342, (unsigned int *)v401) + 4);
                    *(_DWORD *)v401 = v263;
                    uint64_t v267 = *(void *)(a1 + 192);
                    uint64_t v25 = (unsigned int *)(v265 + (v266 << 6));
                    uint8x8_t v268 = (unsigned int *)(v267
                                          + ((unint64_t)*(unsigned int *)(sub_AE36B4(v342, (unsigned int *)v401)
                                                                               + 8) << 6));
                    if (v25 == v268)
                    {
LABEL_305:
                      uint64_t v25 = 0;
                    }
                    else
                    {
                      while (v25[6] != v264)
                      {
                        v25 += 16;
                        if (v25 == v268) {
                          goto LABEL_305;
                        }
                      }
                    }
                    if (!v421)
                    {
                      if ((void)v418)
                      {
                        *((void *)&v418 + 1) = v418;
                        operator delete((void *)v418);
                      }
                      if ((void)v415)
                      {
                        *((void *)&v415 + 1) = v415;
                        operator delete((void *)v415);
                      }
                      if (v413[0])
                      {
                        v413[1] = v413[0];
                        operator delete(v413[0]);
                      }
                    }
                    if (v365)
                    {
                      v366 = v365;
                      operator delete(v365);
                    }
                    unint64_t v269 = (char *)v361;
                    if (v361)
                    {
                      v270 = v362;
                      uint64_t v26 = v361;
                      if (v362 != v361)
                      {
                        do
                        {
                          if (!*((_DWORD *)v270 - 2))
                          {
                            unint64_t v271 = (void *)*((void *)v270 - 6);
                            if (v271)
                            {
                              *((void *)v270 - 5) = v271;
                              operator delete(v271);
                            }
                            v272 = (void *)*((void *)v270 - 10);
                            if (v272)
                            {
                              *((void *)v270 - 9) = v272;
                              operator delete(v272);
                            }
                            v273 = (void *)*((void *)v270 - 13);
                            if (v273)
                            {
                              *((void *)v270 - 12) = v273;
                              operator delete(v273);
                            }
                          }
                          v270 -= 168;
                        }
                        while (v270 != v269);
                        uint64_t v26 = v361;
                      }
                      v362 = v269;
                      operator delete(v26);
                    }
                    --v344;
                    if (*v25 == -1) {
                      goto LABEL_390;
                    }
                    continue;
                  }
                }
                unint64_t v58 = ++v50 + v59;
                goto LABEL_57;
              }
            }
            else
            {
              unsigned __int16 v69 = v59 - 48 * v60;
              __int16 v70 = (unsigned __int8 *)(v55 + 16 * v60 + 10);
            }
            break;
          }
          do
          {
            int v75 = *v70++;
            v64 += byte_20EBFB6[v75];
            v69 -= 8;
          }
          while (v69 > 8u);
          goto LABEL_68;
        }
        __p[1] = 2 * (*(void *)(v23 + 3960) != 0);
        if (*v341 != -1) {
          goto LABEL_23;
        }
LABEL_390:
        unint64_t v307 = v393;
        if ((void)v393 != *((void *)&v393 + 1))
        {
          unint64_t v308 = *((void *)&v393 + 1) - 72;
          if (*((void *)&v393 + 1) - 72 > (unint64_t)v393)
          {
            do
            {
              sub_A4D0C8(v307, v308);
              v307 += 72;
              v308 -= 72;
            }
            while (v307 < v308);
          }
        }
        sub_A29D50((uint64_t)__p);
        unint64_t v309 = *(void *)(a2 + 16);
        if (v309 >= *(void *)(a2 + 24))
        {
          *(void *)(a2 + 16) = sub_A4D268(v336, (long long *)__p);
          v310 = (void *)*((void *)&v397 + 1);
          if (!*((void *)&v397 + 1)) {
            goto LABEL_398;
          }
LABEL_397:
          *(void *)&long long v398 = v310;
          operator delete(v310);
          goto LABEL_398;
        }
        sub_9F68D4(*(void *)(a2 + 16), (long long *)__p);
        *(void *)(a2 + 16) = v309 + 296;
        *(void *)(a2 + 16) = v309 + 296;
        v310 = (void *)*((void *)&v397 + 1);
        if (*((void *)&v397 + 1)) {
          goto LABEL_397;
        }
LABEL_398:
        if ((void)v396)
        {
          *((void *)&v396 + 1) = v396;
          operator delete((void *)v396);
        }
        if (*((void *)&v394 + 1))
        {
          *(void *)&long long v395 = *((void *)&v394 + 1);
          operator delete(*((void **)&v394 + 1));
        }
        v311 = (void **)v393;
        if ((void)v393)
        {
          uint64_t v312 = *((void *)&v393 + 1);
          v313 = (void *)v393;
          if (*((void *)&v393 + 1) != (void)v393)
          {
            do
            {
              v315 = *(void **)(v312 - 40);
              if (v315)
              {
                *(void *)(v312 - 32) = v315;
                operator delete(v315);
              }
              v316 = (void **)(v312 - 72);
              uint64_t v317 = *(void *)(v312 - 72);
              if (v317)
              {
                uint64_t v318 = *(void *)(v312 - 64);
                v314 = *(void **)(v312 - 72);
                if (v318 != v317)
                {
                  do
                  {
                    if (!*(_DWORD *)(v318 - 8))
                    {
                      v319 = *(void **)(v318 - 48);
                      if (v319)
                      {
                        *(void *)(v318 - 40) = v319;
                        operator delete(v319);
                      }
                      v320 = *(void **)(v318 - 80);
                      if (v320)
                      {
                        *(void *)(v318 - 72) = v320;
                        operator delete(v320);
                      }
                      v321 = *(void **)(v318 - 104);
                      if (v321)
                      {
                        *(void *)(v318 - 96) = v321;
                        operator delete(v321);
                      }
                    }
                    v318 -= 168;
                  }
                  while (v318 != v317);
                  v314 = *v316;
                }
                *(void *)(v312 - 64) = v317;
                operator delete(v314);
              }
              v312 -= 72;
            }
            while (v316 != v311);
            v313 = (void *)v393;
          }
          *((void *)&v393 + 1) = v311;
          operator delete(v313);
        }
        if (SHIBYTE(v387) < 0) {
          operator delete(v385);
        }
        v341 += 16;
      }
      ++v337;
      uint64_t v8 = (void *)v342;
    }
    while (v337 != v335);
  }
  double result = std::string::operator=(v334, (const std::string *)(a1 + 528));
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a1 + 616);
  *(_OWORD *)(a2 + 136) = *(_OWORD *)(a1 + 632);
  *(_OWORD *)(a2 + 152) = *(_OWORD *)(a1 + 648);
  *(_OWORD *)(a2 + 168) = *(_OWORD *)(a1 + 664);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 552);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 568);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 584);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 600);
  return result;
}

void sub_ADF490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char *a62,uint64_t a63)
{
  __cxa_guard_abort(&qword_24F7308);
  if (__p)
  {
    operator delete(__p);
    uint64_t v67 = a52;
    if (!a52)
    {
LABEL_3:
      uint64_t v68 = a49;
      if (!a49) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v67 = a52;
    if (!a52) {
      goto LABEL_3;
    }
  }
  operator delete(v67);
  uint64_t v68 = a49;
  if (!a49)
  {
LABEL_4:
    if (LODWORD(STACK[0x470])) {
      goto LABEL_13;
    }
LABEL_9:
    unsigned __int16 v69 = (void *)STACK[0x448];
    if (STACK[0x448])
    {
      STACK[0x450] = (unint64_t)v69;
      operator delete(v69);
      __int16 v70 = (void *)STACK[0x428];
      if (!STACK[0x428])
      {
LABEL_11:
        uint64_t v71 = (void *)STACK[0x410];
        if (!STACK[0x410]) {
          goto LABEL_13;
        }
        goto LABEL_12;
      }
    }
    else
    {
      __int16 v70 = (void *)STACK[0x428];
      if (!STACK[0x428]) {
        goto LABEL_11;
      }
    }
    STACK[0x430] = (unint64_t)v70;
    operator delete(v70);
    uint64_t v71 = (void *)STACK[0x410];
    if (!STACK[0x410])
    {
LABEL_13:
      if (a66) {
        operator delete(a66);
      }
      if (a62)
      {
        uint64_t v72 = (char *)a63;
        uint64_t v73 = a62;
        if ((char *)a63 != a62)
        {
          do
          {
            if (!*((_DWORD *)v72 - 2))
            {
              int v74 = (void *)*((void *)v72 - 6);
              if (v74)
              {
                *((void *)v72 - 5) = v74;
                operator delete(v74);
              }
              int v75 = (void *)*((void *)v72 - 10);
              if (v75)
              {
                *((void *)v72 - 9) = v75;
                operator delete(v75);
              }
              uint64_t v76 = (void *)*((void *)v72 - 13);
              if (v76)
              {
                *((void *)v72 - 12) = v76;
                operator delete(v76);
              }
            }
            v72 -= 168;
          }
          while (v72 != a62);
          uint64_t v73 = a62;
        }
        operator delete(v73);
      }
      uint64_t v77 = a20;
      int v78 = (void *)STACK[0x300];
      if (STACK[0x300])
      {
        STACK[0x308] = (unint64_t)v78;
        operator delete(v78);
        __int16 v79 = (void *)STACK[0x2E8];
        if (!STACK[0x2E8])
        {
LABEL_33:
          uint64_t v80 = (void *)STACK[0x2D0];
          if (!STACK[0x2D0]) {
            goto LABEL_34;
          }
          goto LABEL_42;
        }
      }
      else
      {
        __int16 v79 = (void *)STACK[0x2E8];
        if (!STACK[0x2E8]) {
          goto LABEL_33;
        }
      }
      STACK[0x2F0] = (unint64_t)v79;
      operator delete(v79);
      uint64_t v80 = (void *)STACK[0x2D0];
      if (!STACK[0x2D0])
      {
LABEL_34:
        unint64_t v81 = STACK[0x2B8];
        if (!STACK[0x2B8]) {
          goto LABEL_35;
        }
        goto LABEL_43;
      }
LABEL_42:
      STACK[0x2D8] = (unint64_t)v80;
      operator delete(v80);
      unint64_t v81 = STACK[0x2B8];
      if (!STACK[0x2B8])
      {
LABEL_35:
        if (SLOBYTE(STACK[0x277]) < 0) {
          goto LABEL_36;
        }
        goto LABEL_47;
      }
LABEL_43:
      unsigned __int16 v84 = (void **)STACK[0x2C0];
      uint64_t v85 = (void *)v81;
      if (STACK[0x2C0] != v81)
      {
        do
        {
          v84 -= 9;
          sub_9F5F58(a9, v84);
        }
        while (v84 != (void **)v81);
        uint64_t v85 = (void *)STACK[0x2B8];
      }
      STACK[0x2C0] = v81;
      operator delete(v85);
      uint64_t v77 = a20;
      if (SLOBYTE(STACK[0x277]) < 0)
      {
LABEL_36:
        operator delete((void *)STACK[0x260]);
        uint64_t v82 = *a10;
        if (*a10) {
          goto LABEL_37;
        }
        goto LABEL_48;
      }
LABEL_47:
      uint64_t v82 = *a10;
      if (*a10)
      {
LABEL_37:
        *(void *)(v77 + 200) = v82;
        operator delete(v82);
        if ((*(char *)(v77 + 55) & 0x80000000) == 0) {
          goto LABEL_38;
        }
        goto LABEL_49;
      }
LABEL_48:
      if ((*(char *)(v77 + 55) & 0x80000000) == 0)
      {
LABEL_38:
        uint64_t v83 = *a13;
        if (!*a13) {
          goto LABEL_39;
        }
        goto LABEL_50;
      }
LABEL_49:
      operator delete(*a11);
      uint64_t v83 = *a13;
      if (!*a13) {
LABEL_39:
      }
        _Unwind_Resume(a1);
LABEL_50:
      uint64_t v86 = v77;
      uint64_t v87 = *(void *)(v77 + 16);
      uint64_t v88 = v83;
      if ((void *)v87 != v83)
      {
        uint64_t v89 = v86 + 24;
        do
        {
          v87 -= 296;
          sub_9F5E28(v89, v87);
        }
        while ((void *)v87 != v83);
        uint64_t v88 = *a13;
        uint64_t v86 = a20;
      }
      *(void *)(v86 + 16) = v83;
      operator delete(v88);
      _Unwind_Resume(a1);
    }
LABEL_12:
    STACK[0x418] = (unint64_t)v71;
    operator delete(v71);
    goto LABEL_13;
  }
LABEL_8:
  operator delete(v68);
  if (LODWORD(STACK[0x470])) {
    goto LABEL_13;
  }
  goto LABEL_9;
}

void sub_ADF9A4(uint64_t a1)
{
  *(_DWORD *)(a1 + 240) = 0;
  if (*(void *)(a1 + 144) | *(void *)(a1 + 184))
  {
    for (uint64_t i = *(void *)(a1 + 152); i != *(void *)(a1 + 160); i += 16)
    {
      if (*(void *)i)
      {
        free(*(void **)i);
        *(void *)uint64_t i = 0;
      }
      *(void *)(i + 8) = 0;
    }
    *(void *)(a1 + 184) = 0;
  }
  *(uint64x2_t *)(a1 + 104) = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 120), (float)*(unint64_t *)(a1 + 176))));
  *(unsigned char *)(a1 + 128) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 200) = *(void *)(a1 + 192);
  *(void *)(a1 + 224) = 0;
  uint64_t v3 = *(unsigned int **)(a1 + 272);
  uint64_t v4 = *(unsigned int **)(a1 + 280);
  if (v3 != v4)
  {
    uint64_t v5 = *(void *)(a1 + 248);
    int v6 = *(unsigned int **)(a1 + 272);
    do
    {
      unsigned int v7 = *v6++;
      *(void *)(v5 + (((unint64_t)v7 >> 3) & 0x1FFFFFF8)) &= ~(1 << v7);
    }
    while (v6 != v4);
  }
  *(void *)(a1 + 280) = v3;
  uint64_t v8 = *(unsigned int **)(a1 + 320);
  uint64_t v9 = *(unsigned int **)(a1 + 328);
  if (v8 != v9)
  {
    uint64_t v10 = *(void *)(a1 + 296);
    unsigned int v11 = *(unsigned int **)(a1 + 320);
    do
    {
      unsigned int v12 = *v11++;
      *(void *)(v10 + (((unint64_t)v12 >> 3) & 0x1FFFFFF8)) &= ~(1 << v12);
    }
    while (v11 != v9);
  }
  *(void *)(a1 + 328) = v8;
  uint64_t v13 = *(unsigned int **)(a1 + 392);
  uint64_t v14 = *(unsigned int **)(a1 + 400);
  if (v13 != v14)
  {
    uint64_t v15 = *(void *)(a1 + 368);
    uint64_t v16 = *(void *)(a1 + 344);
    uint64_t v17 = *(unsigned int **)(a1 + 392);
    do
    {
      unsigned int v18 = *v17++;
      *(void *)(v15 + (((unint64_t)v18 >> 3) & 0x1FFFFFF8)) &= ~(1 << v18);
      *(_DWORD *)(v16 + 4 * v18) = -1;
    }
    while (v17 != v14);
  }
  *(void *)(a1 + 400) = v13;
  sub_BD5698(a1 + 424);
  char v21 = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)&__dst, &__p);
  uint64_t v19 = (void **)(a1 + 528);
  if (*(char *)(a1 + 551) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)uint64_t v19 = __dst;
  *(void *)(a1 + 544) = v23;
  HIBYTE(v23) = 0;
  LOBYTE(__dst) = 0;
  *(_OWORD *)(a1 + 616) = v28;
  *(_OWORD *)(a1 + 632) = v29;
  *(_OWORD *)(a1 + 648) = v30;
  *(_OWORD *)(a1 + 664) = v31;
  *(_OWORD *)(a1 + 552) = v24;
  *(_OWORD *)(a1 + 568) = v25;
  *(_OWORD *)(a1 + 584) = v26;
  *(_OWORD *)(a1 + 600) = v27;
  if (v21 < 0) {
    operator delete((void *)__p);
  }
  *(int32x2_t *)(a1 + 96) = vadd_s32(vdup_n_s32(2 * *(_DWORD *)(a1 + 16)), (int32x2_t)0x200000004);
  sub_BD5704(a1 + 424, *(void *)(a1 + 8));
}

void sub_ADFBE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_ADFBFC(uint64_t a1)
{
  if (sub_A276F8(*(void *)(a1 + 24)))
  {
    int v2 = *(_DWORD *)(a1 + 68);
    int v3 = *(_DWORD *)(a1 + 240);
    *(_DWORD *)(a1 + 240) = v3 + 1;
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v21 = 0x1FFFFFFFELL;
    int v5 = sub_AD28B0(v4, &v21);
    int v22 = v5;
    LODWORD(v21) = 0;
    uint64_t v6 = *(void *)(a1 + 192);
    unsigned int v7 = (char *)(v6 + ((unint64_t)*(unsigned int *)(sub_AE36B4(a1 + 104, (unsigned int *)&v21) + 4) << 6));
    LODWORD(v21) = 0;
    uint64_t v8 = *(void *)(a1 + 192);
    uint64_t v9 = sub_AE36B4(a1 + 104, (unsigned int *)&v21);
    sub_AE32F0(a1 + 104, 0, v7, (unsigned char *)(v8 + ((unint64_t)*(unsigned int *)(v9 + 8) << 6)));
    long long v13 = xmmword_20E2060;
    uint64_t v14 = -1;
    int v15 = v3;
    int v16 = v2;
    uint64_t v17 = 0;
    int v18 = 10 * v2;
    uint64_t v19 = -1;
    int v20 = 0x7FFFFFFF;
    sub_AE2FF4((void *)(a1 + 104), &v13, 0, 0, 1);
    int v10 = *(_DWORD *)(a1 + 96);
    unsigned int v11 = v10 + v10 * v5;
    unsigned int v12 = v11 + 2;
    if (*(unsigned char *)(a1 + 20))
    {
      if (!sub_AE3124((void *)(a1 + 104), 0, v12, v11, v10 + v10 * *(_DWORD *)(a1 + 416), 2147483646)) {
        return;
      }
    }
    else if (!sub_AE3124((void *)(a1 + 104), 0, v12, v11, 0xFFFFFFFF, 2147483646))
    {
      return;
    }
    sub_A3EF14((uint64_t *)(a1 + 248), &v22);
  }
}

double sub_ADFD64(uint64_t a1, int a2)
{
  sub_725D0((uint64_t)v34);
  uint64_t v4 = *(unsigned int **)(a1 + 272);
  int v5 = *(unsigned int **)(a1 + 280);
  if (v4 != v5)
  {
    int v6 = a2 + 1;
    int v7 = a2 + 2;
    int v32 = ~a2;
    while (1)
    {
      unsigned int v33 = *v4;
      unint64_t v8 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), v33);
      if (HIDWORD(v8) == 1 && (v8 + 3) < 2)
      {
LABEL_12:
        int v13 = 0;
        goto LABEL_17;
      }
      uint64_t v10 = *(void *)(*(void *)(a1 + 24) + 4120);
      uint64_t v11 = v10 + 24;
      if (*(unsigned char *)(v10 + 17)) {
        break;
      }
      unsigned int v12 = (int *)sub_498D5C(v11, __ROR8__(v8, 32), 0, "stop");
      int v16 = (unsigned __int16 *)((char *)v12 - *v12);
      if (*v16 >= 0x15u)
      {
        unsigned int v15 = v16[10];
        if (v15) {
          goto LABEL_15;
        }
      }
      int v13 = 30;
LABEL_17:
      unsigned int v35 = 0;
      uint64_t v17 = *(void *)(a1 + 192);
      int v18 = (char *)(v17 + ((unint64_t)*(unsigned int *)(sub_AE36B4(a1 + 104, &v35) + 4) << 6));
      unsigned int v35 = 0;
      uint64_t v19 = *(void *)(a1 + 192);
      uint64_t v20 = sub_AE36B4(a1 + 104, &v35);
      sub_AE32F0(a1 + 104, 0, v18, (unsigned char *)(v19 + ((unint64_t)*(unsigned int *)(v20 + 8) << 6)));
      sub_AE5660((void *)(a1 + 104), v6 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * v33, 0);
      unsigned int v35 = 0;
      uint64_t v21 = *(void *)(a1 + 192);
      int v22 = (unsigned int *)(v21 + ((unint64_t)*(unsigned int *)(sub_AE36B4(a1 + 104, &v35) + 4) << 6));
      unsigned int v35 = 0;
      uint64_t v23 = *(void *)(a1 + 192);
      for (uint64_t i = (unsigned int *)(v23 + ((unint64_t)*(unsigned int *)(sub_AE36B4(a1 + 104, &v35) + 8) << 6));
            v22 != i;
            v22 += 16)
      {
        unsigned int *v22 = v33;
        unsigned int v25 = v22[7];
        v22[3] = v25;
        v22[4] = -1;
        v22[7] = v25 + v13;
      }
      unsigned int v26 = v33;
      int v27 = *(_DWORD *)(a1 + 96);
      if (*(unsigned char *)(a1 + 20))
      {
        unsigned int v28 = v27 + v27 * *(_DWORD *)(a1 + 416) + 1;
        uint64_t v29 = *(void *)(a1 + 48);
        if (!v29) {
          goto LABEL_23;
        }
      }
      else
      {
        unsigned int v28 = -1;
        uint64_t v29 = *(void *)(a1 + 48);
        if (!v29)
        {
LABEL_23:
          int v30 = 2147483646;
          goto LABEL_24;
        }
      }
      int v30 = sub_AD7004(v29, v33, *(_DWORD *)(a1 + 100) + v32);
LABEL_24:
      if (sub_AE3124((void *)(a1 + 104), 0, v7 + v27 + v27 * v26, v27 + v27 * v26 + 1, v28, v30)) {
        sub_A3EF14((uint64_t *)(a1 + 296), &v33);
      }
      if (++v4 == v5) {
        goto LABEL_26;
      }
    }
    unsigned int v12 = (int *)sub_A1A290(v11, v8, 0, "transfers at stop");
    int v13 = 0;
    uint64_t v14 = (unsigned __int16 *)((char *)v12 - *v12);
    if (*v14 < 5u) {
      goto LABEL_17;
    }
    unsigned int v15 = v14[2];
    if (!v15) {
      goto LABEL_12;
    }
LABEL_15:
    int v13 = *(int *)((char *)v12 + v15);
    goto LABEL_17;
  }
LABEL_26:
  double result = sub_72688((uint64_t)v34) + *(double *)(a1 + 568);
  *(double *)(a1 + 568) = result;
  return result;
}

double sub_AE0004(uint64_t a1, int a2)
{
  sub_725D0((uint64_t)v289);
  uint64_t v4 = *(unsigned int **)(a1 + 272);
  unint64_t v269 = *(unsigned int **)(a1 + 280);
  if (v4 != v269)
  {
    int v273 = a2 + 2;
    int v274 = a2 + 1;
    int v271 = ~a2;
    v272 = (uint64_t *)(a1 + 296);
    uint8x8_t v268 = (void **)(a1 + 320);
    int v281 = (void *)(a1 + 104);
    uint64_t v282 = a1;
    while (1)
    {
      v270 = v4;
      unsigned int v280 = *v4;
      int v5 = (unint64_t *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), *v4);
      sub_A19FA8((uint64_t)&v283, *(void *)(a1 + 24), *v5);
      int v6 = v284;
      int v7 = &v285;
      if (v288) {
        int v7 = v287;
      }
      if ((unint64_t)v284 < *v7) {
        break;
      }
LABEL_3:
      uint64_t v4 = v270 + 1;
      if (v270 + 1 == v269) {
        goto LABEL_317;
      }
    }
LABEL_13:
    uint64_t v11 = 0;
    unint64_t v12 = __ROR8__(*v6, 32);
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = *(void *)(v13 + 72) - 1;
    unint64_t v15 = 0xC4CEB9FE1A85EC53
        * ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) >> 33));
    unint64_t v16 = v15 ^ (v15 >> 33);
    uint64_t v17 = *(void *)(v13 + 48);
    uint64_t v18 = v17 + 11;
    uint64_t v19 = -1;
    for (unint64_t i = v16; ; unint64_t i = v11 + v21)
    {
      uint64_t v21 = i & v14;
      unint64_t v22 = (i & v14) / 0x30;
      unint64_t v23 = v21 - 48 * v22;
      if (((*(unsigned __int8 *)(v17 + 16 * v22 + (v23 >> 3) + 10) >> (v23 & 7)) & 1) == 0)
      {
        if (v19 == -1) {
          unint64_t v59 = v21;
        }
        else {
          unint64_t v59 = v19;
        }
        if (!sub_AD2F40(v13, 1)) {
          goto LABEL_98;
        }
        goto LABEL_55;
      }
      uint64_t v24 = *(void *)(v17 + 16 * v22);
      if (!*(void *)(v13 + 40)) {
        goto LABEL_33;
      }
      unsigned int v25 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
      if ((unsigned __int16)(v21 - 48 * v22) < 9u)
      {
        __int16 v26 = 0;
        LOBYTE(v31) = v21 - 48 * v22;
        goto LABEL_29;
      }
      __int16 v26 = 0;
      uint64_t v27 = (unsigned __int16)(v21 - 48 * v22 - 9) >> 3;
      if ((unsigned __int16)(v21 - 48 * v22 - 9) >> 3)
      {
        __int16 v28 = 0;
        uint64_t v29 = v27 + 1;
        uint64_t v30 = (v27 + 1) & 0x3FFE;
        unsigned __int16 v31 = v23 - 8 * v30;
        int v32 = &v25[v30];
        unsigned int v33 = (unsigned __int8 *)(v18 + 16 * v22);
        uint64_t v34 = v30;
        do
        {
          uint64_t v35 = *(v33 - 1);
          int v36 = *v33;
          v33 += 2;
          v26 += byte_20EBFB6[v35];
          v28 += byte_20EBFB6[v36];
          v34 -= 2;
        }
        while (v34);
        v26 += v28;
        if (v29 == v30) {
          goto LABEL_28;
        }
      }
      else
      {
        unsigned __int16 v31 = v21 - 48 * v22;
        int v32 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
      }
      do
      {
        int v37 = *v32++;
        v26 += byte_20EBFB6[v37];
        v31 -= 8;
      }
      while (v31 > 8u);
LABEL_28:
      v25 += ((unsigned __int16)(v23 - 9) >> 3) + 1;
LABEL_29:
      uint64_t v38 = (_DWORD *)(v24
                     + 12
                     * (unsigned __int16)(v26 + byte_20EBFB6[~(-1 << v31) & (unint64_t)*v25]));
      BOOL v39 = *(_DWORD *)(v13 + 36) == v38[1] && *(_DWORD *)(v13 + 32) == *v38;
      if (v39)
      {
        if (v19 == -1) {
          uint64_t v19 = v21;
        }
        goto LABEL_16;
      }
LABEL_33:
      uint64_t v40 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
      if ((unsigned __int16)(v21 - 48 * v22) < 9u)
      {
        __int16 v41 = 0;
        uint64_t v52 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
        LOBYTE(v46) = v21 - 48 * v22;
        goto LABEL_43;
      }
      __int16 v41 = 0;
      uint64_t v42 = (unsigned __int16)(v21 - 48 * v22 - 9) >> 3;
      if ((unsigned __int16)(v21 - 48 * v22 - 9) >> 3)
      {
        __int16 v43 = 0;
        uint64_t v44 = v42 + 1;
        uint64_t v45 = (v42 + 1) & 0x3FFE;
        unsigned __int16 v46 = v23 - 8 * v45;
        uint64_t v47 = &v40[v45];
        int v48 = (unsigned __int8 *)(v18 + 16 * v22);
        uint64_t v49 = v45;
        do
        {
          uint64_t v50 = *(v48 - 1);
          int v51 = *v48;
          v48 += 2;
          v41 += byte_20EBFB6[v50];
          v43 += byte_20EBFB6[v51];
          v49 -= 2;
        }
        while (v49);
        v41 += v43;
        if (v44 == v45) {
          goto LABEL_42;
        }
      }
      else
      {
        unsigned __int16 v46 = v21 - 48 * v22;
        uint64_t v47 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
      }
      do
      {
        int v53 = *v47++;
        v41 += byte_20EBFB6[v53];
        v46 -= 8;
      }
      while (v46 > 8u);
LABEL_42:
      uint64_t v52 = &v40[((unsigned __int16)(v23 - 9) >> 3) + 1];
LABEL_43:
      if (v12 == *(void *)(v24
                            + 12
                            * (unsigned __int16)(v41 + byte_20EBFB6[~(-1 << v46) & (unint64_t)*v52])))
      {
        if (v21 != -1)
        {
          if ((unsigned __int16)(v21 - 48 * v22) < 9u)
          {
            __int16 v56 = 0;
          }
          else
          {
            if ((((_WORD)v21 - 48 * (_WORD)v22 - 8) & 0xFFF8) != 0) {
              __int16 v54 = 8;
            }
            else {
              __int16 v54 = v21 - 48 * v22 - 8;
            }
            unsigned __int16 v55 = ~v54 + v21 - 48 * v22;
            if (v55 < 8u)
            {
              __int16 v56 = 0;
              unsigned __int16 v57 = v23;
              unint64_t v58 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
              goto LABEL_119;
            }
            __int16 v117 = 0;
            __int16 v118 = 0;
            uint64_t v119 = (v55 >> 3) + 1;
            unsigned __int16 v57 = v23 - 8 * (((v55 >> 3) + 1) & 0x3FFE);
            unint64_t v58 = &v40[v119 & 0x3FFE];
            uint64_t v120 = (unsigned __int8 *)(v17 + 16 * v22 + 11);
            uint64_t v121 = v119 & 0x3FFE;
            do
            {
              uint64_t v122 = *(v120 - 1);
              int v123 = *v120;
              v120 += 2;
              v117 += byte_20EBFB6[v122];
              v118 += byte_20EBFB6[v123];
              v121 -= 2;
            }
            while (v121);
            __int16 v56 = v118 + v117;
            if ((v119 & 0x3FFE) != v119)
            {
              do
              {
LABEL_119:
                int v124 = *v58++;
                v56 += byte_20EBFB6[v124];
                v57 -= 8;
              }
              while (v57 > 8u);
            }
            v40 += ((unsigned __int16)(v23 - 9) >> 3) + 1;
            LOBYTE(v23) = v57;
          }
          uint64_t v125 = *(void *)(v13 + 56);
          unsigned __int16 v126 = v56 + byte_20EBFB6[~(-1 << v23) & (unint64_t)*v40];
          uint64_t v127 = v17 + 16 * v22;
          if (*(unsigned __int16 *)(v127 + 8) != v126 || v127 + 16 == v125)
          {
            uint64_t v103 = (_DWORD *)(v24 + 12 * v126);
          }
          else
          {
            uint64_t v129 = v127 + 32;
            do
            {
              if (*(_WORD *)(v129 - 8)) {
                BOOL v130 = 1;
              }
              else {
                BOOL v130 = v129 == v125;
              }
              v129 += 16;
            }
            while (!v130);
            uint64_t v103 = *(_DWORD **)(v129 - 32);
          }
          goto LABEL_99;
        }
        unint64_t v59 = -1;
        if (!sub_AD2F40(v13, 1))
        {
LABEL_98:
          unint64_t v290 = v12;
          int v291 = -1;
          sub_AD3484(v13, (uint64_t *)&v290, v59, v292);
          uint64_t v103 = (_DWORD *)v293;
          goto LABEL_99;
        }
LABEL_55:
        uint64_t v60 = 0;
        unint64_t v290 = v12;
        int v291 = -1;
        uint64_t v61 = *(void *)(v13 + 72) - 1;
        uint64_t v62 = *(void *)(v13 + 48);
        uint64_t v63 = v62 + 11;
        uint64_t v64 = -1;
        while (2)
        {
          uint64_t v65 = v16 & v61;
          unint64_t v66 = (v16 & v61) / 0x30;
          unint64_t v67 = (v16 & v61) % 0x30;
          if (((*(unsigned __int8 *)(v62 + 16 * v66 + (v67 >> 3) + 10) >> (v67 & 7)) & 1) == 0)
          {
            if (v64 == -1) {
              unint64_t v102 = v16 & v61;
            }
            else {
              unint64_t v102 = v64;
            }
            goto LABEL_96;
          }
          uint64_t v68 = *(void *)(v13 + 40);
          uint64_t v69 = *(void *)(v62 + 16 * v66);
          if (!v68) {
            break;
          }
          __int16 v70 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
          if ((unsigned __int16)((v16 & v61) % 0x30) < 9u)
          {
            __int16 v71 = 0;
            LOBYTE(v72) = (v16 & v61) % 0x30;
            goto LABEL_71;
          }
          __int16 v71 = 0;
          uint64_t v72 = (unsigned __int16)(v65 - 48 * v66 - 9) >> 3;
          if (!((unsigned __int16)(v65 - 48 * v66 - 9) >> 3))
          {
            LODWORD(v72) = (v16 & v61) % 0x30;
            uint64_t v76 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
            do
            {
LABEL_69:
              int v81 = *v76++;
              v71 += byte_20EBFB6[v81];
              LOWORD(v72) = v72 - 8;
            }
            while ((unsigned __int16)v72 > 8u);
            goto LABEL_70;
          }
          __int16 v73 = 0;
          uint64_t v74 = v72 + 1;
          uint64_t v75 = (v72 + 1) & 0x3FFE;
          LOWORD(v72) = v67 - 8 * v75;
          uint64_t v76 = &v70[v75];
          uint64_t v77 = (unsigned __int8 *)(v63 + 16 * v66);
          uint64_t v78 = v75;
          do
          {
            uint64_t v79 = *(v77 - 1);
            int v80 = *v77;
            v77 += 2;
            v71 += byte_20EBFB6[v79];
            v73 += byte_20EBFB6[v80];
            v78 -= 2;
          }
          while (v78);
          v71 += v73;
          if (v74 != v75) {
            goto LABEL_69;
          }
LABEL_70:
          v70 += ((unsigned __int16)(v67 - 9) >> 3) + 1;
LABEL_71:
          uint64_t v82 = (_DWORD *)(v69
                         + 12
                         * (unsigned __int16)(v71 + byte_20EBFB6[~(-1 << v72) & (unint64_t)*v70]));
          if (*(_DWORD *)(v13 + 36) == v82[1] && *(_DWORD *)(v13 + 32) == *v82)
          {
            if (v64 == -1) {
              uint64_t v64 = v16 & v61;
            }
LABEL_58:
            unint64_t v16 = ++v60 + v65;
            continue;
          }
          break;
        }
        unsigned __int16 v84 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
        if ((unsigned __int16)((v16 & v61) % 0x30) < 9u)
        {
          __int16 v85 = 0;
          unsigned __int16 v95 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
          LOBYTE(v86) = (v16 & v61) % 0x30;
          goto LABEL_85;
        }
        __int16 v85 = 0;
        uint64_t v86 = (unsigned __int16)(v65 - 48 * v66 - 9) >> 3;
        if (!((unsigned __int16)(v65 - 48 * v66 - 9) >> 3))
        {
          LODWORD(v86) = (v16 & v61) % 0x30;
          uint64_t v90 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
          do
          {
LABEL_83:
            int v96 = *v90++;
            v85 += byte_20EBFB6[v96];
            LOWORD(v86) = v86 - 8;
          }
          while ((unsigned __int16)v86 > 8u);
          goto LABEL_84;
        }
        __int16 v87 = 0;
        uint64_t v88 = v86 + 1;
        uint64_t v89 = (v86 + 1) & 0x3FFE;
        LOWORD(v86) = v67 - 8 * v89;
        uint64_t v90 = &v84[v89];
        int v91 = (unsigned __int8 *)(v63 + 16 * v66);
        uint64_t v92 = v89;
        do
        {
          uint64_t v93 = *(v91 - 1);
          int v94 = *v91;
          v91 += 2;
          v85 += byte_20EBFB6[v93];
          v87 += byte_20EBFB6[v94];
          v92 -= 2;
        }
        while (v92);
        v85 += v87;
        if (v88 != v89) {
          goto LABEL_83;
        }
LABEL_84:
        unsigned __int16 v95 = &v84[((unsigned __int16)(v67 - 9) >> 3) + 1];
LABEL_85:
        if (v12 != *(void *)(v69
                              + 12
                              * (unsigned __int16)(v85
                                                 + byte_20EBFB6[~(-1 << v86) & (unint64_t)*v95])))
          goto LABEL_58;
        if (v65 == -1)
        {
          unint64_t v102 = -1;
LABEL_96:
          sub_AD3484(v13, (uint64_t *)&v290, v102, v292);
          uint64_t v103 = (_DWORD *)v293;
          goto LABEL_99;
        }
        if ((unsigned __int16)((v16 & v61) % 0x30) < 9u)
        {
          __int16 v99 = 0;
        }
        else
        {
          if ((((_WORD)v65 - 48 * (_WORD)v66 - 8) & 0xFFF8) != 0) {
            __int16 v97 = 8;
          }
          else {
            __int16 v97 = v65 - 48 * v66 - 8;
          }
          unsigned __int16 v98 = ~v97 + v65 - 48 * v66;
          if (v98 < 8u)
          {
            __int16 v99 = 0;
            unsigned __int16 v100 = v67;
            uint64_t v101 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
            goto LABEL_257;
          }
          __int16 v234 = 0;
          __int16 v235 = 0;
          uint64_t v236 = (v98 >> 3) + 1;
          unsigned __int16 v100 = v67 - 8 * (((v98 >> 3) + 1) & 0x3FFE);
          uint64_t v101 = &v84[v236 & 0x3FFE];
          unsigned int v237 = (unsigned __int8 *)(v62 + 16 * v66 + 11);
          uint64_t v238 = v236 & 0x3FFE;
          do
          {
            uint64_t v239 = *(v237 - 1);
            int v240 = *v237;
            v237 += 2;
            v234 += byte_20EBFB6[v239];
            v235 += byte_20EBFB6[v240];
            v238 -= 2;
          }
          while (v238);
          __int16 v99 = v235 + v234;
          if ((v236 & 0x3FFE) != v236)
          {
            do
            {
LABEL_257:
              int v241 = *v101++;
              v99 += byte_20EBFB6[v241];
              v100 -= 8;
            }
            while (v100 > 8u);
          }
          v84 += ((unsigned __int16)(v67 - 9) >> 3) + 1;
          LOBYTE(v67) = v100;
        }
        uint64_t v242 = v62 + 16 * v66;
        unsigned int v243 = *(_DWORD ***)(v13 + 56);
        unsigned __int16 v244 = v99 + byte_20EBFB6[~(-1 << v67) & (unint64_t)*v84];
        uint64_t v103 = (_DWORD *)(v69 + 12 * v244);
        if (*(unsigned __int16 *)(v242 + 8) == v244)
        {
          uint64_t v245 = v242 + 16;
          if ((_DWORD **)(v242 + 16) != v243)
          {
            while (1)
            {
              uint64_t v246 = (_DWORD **)v245;
              if (*(_WORD *)(v245 + 8)) {
                break;
              }
              v245 += 16;
              if (v246 + 2 == v243)
              {
                uint64_t v242 = *(void *)(v13 + 56);
                goto LABEL_267;
              }
            }
            uint64_t v242 = v245;
LABEL_267:
            uint64_t v103 = *v246;
            goto LABEL_268;
          }
        }
        else
        {
LABEL_268:
          if ((_DWORD **)v242 != v243 && v68)
          {
            do
            {
              if (*(_DWORD *)(v13 + 36) != v103[1] || *(_DWORD *)(v13 + 32) != *v103) {
                break;
              }
              v103 += 3;
              if (v103 == (_DWORD *)(*(void *)v242 + 12 * *(unsigned __int16 *)(v242 + 8)))
              {
                v242 += 16;
                if ((_DWORD **)v242 != v243)
                {
                  do
                  {
                    if (*(_WORD *)(v242 + 8))
                    {
                      uint64_t v103 = *(_DWORD **)v242;
                      goto LABEL_272;
                    }
                    v242 += 16;
                  }
                  while ((_DWORD **)v242 != v243);
                  uint64_t v103 = *(_DWORD **)(v242 - 16);
                }
                break;
              }
LABEL_272:
              ;
            }
            while ((_DWORD **)v242 != v243);
          }
        }
LABEL_99:
        unsigned int v104 = v103[2];
        if (v104 != -1) {
          goto LABEL_141;
        }
        int v105 = *(_DWORD *)(v13 + 112);
        *(_DWORD *)(v13 + 112) = v105 + 1;
        v103[2] = v105;
        uint64_t v107 = *(unint64_t **)(v13 + 96);
        unint64_t v106 = *(void *)(v13 + 104);
        if ((unint64_t)v107 < v106)
        {
          *uint64_t v107 = v12;
          uint64_t v108 = (uint64_t)(v107 + 1);
          goto LABEL_140;
        }
        __int16 v109 = (unint64_t **)(v13 + 88);
        unint64_t v110 = *(char **)(v13 + 88);
        uint64_t v111 = ((char *)v107 - v110) >> 3;
        unint64_t v112 = v111 + 1;
        if ((unint64_t)(v111 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v113 = v106 - (void)v110;
        if (v113 >> 2 > v112) {
          unint64_t v112 = v113 >> 2;
        }
        if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v112 = 0x1FFFFFFFFFFFFFFFLL;
        }
        unint64_t v276 = v112;
        if (!v112)
        {
          unsigned int v114 = 0;
          unsigned int v115 = (unint64_t *)(8 * v111);
          *(void *)(8 * v111) = v12;
          uint64_t v108 = 8 * v111 + 8;
          if (v107 != (unint64_t *)v110) {
            goto LABEL_110;
          }
LABEL_114:
          *(void *)(v13 + 88) = v115;
          *(void *)(v13 + 96) = v108;
          *(void *)(v13 + 104) = &v114[8 * v276];
          if (v107) {
            goto LABEL_139;
          }
          goto LABEL_140;
        }
        if (v112 >> 61) {
          goto LABEL_319;
        }
        unsigned int v114 = (char *)operator new(8 * v112);
        __int16 v109 = (unint64_t **)(v13 + 88);
        unsigned int v115 = (unint64_t *)&v114[8 * v111];
        *unsigned int v115 = v12;
        uint64_t v108 = (uint64_t)(v115 + 1);
        if (v107 == (unint64_t *)v110) {
          goto LABEL_114;
        }
LABEL_110:
        unint64_t v116 = (char *)(v107 - 1) - v110;
        if (v116 < 0x58) {
          goto LABEL_323;
        }
        if ((unint64_t)(v110 - v114) < 0x20) {
          goto LABEL_323;
        }
        uint64_t v131 = (v116 >> 3) + 1;
        uint64_t v132 = 8 * (v131 & 0x3FFFFFFFFFFFFFFCLL);
        int v133 = &v107[v132 / 0xFFFFFFFFFFFFFFF8];
        unsigned int v115 = (unint64_t *)((char *)v115 - v132);
        uint64_t v134 = &v114[8 * v111 - 16];
        int v135 = v107 - 2;
        uint64_t v136 = v131 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v137 = *(_OWORD *)v135;
          *((_OWORD *)v134 - 1) = *((_OWORD *)v135 - 1);
          *(_OWORD *)uint64_t v134 = v137;
          v134 -= 32;
          v135 -= 4;
          v136 -= 4;
        }
        while (v136);
        uint64_t v107 = v133;
        if (v131 != (v131 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_323:
          do
          {
            unint64_t v138 = *--v107;
            *--unsigned int v115 = v138;
          }
          while (v107 != (unint64_t *)v110);
        }
        uint64_t v107 = *v109;
        *(void *)(v13 + 88) = v115;
        *(void *)(v13 + 96) = v108;
        *(void *)(v13 + 104) = &v114[8 * v276];
        if (v107) {
LABEL_139:
        }
          operator delete(v107);
LABEL_140:
        *(void *)(v13 + 96) = v108;
        unsigned int v104 = v103[2];
LABEL_141:
        *(double *)(v282 + 624) = *(double *)(v282 + 624) + 1.0;
        if (v280 == v104) {
          goto LABEL_239;
        }
        LODWORD(v292[0]) = 0;
        uint64_t v139 = *(void *)(v282 + 192);
        __int16 v140 = (char *)(v139
                      + ((unint64_t)*(unsigned int *)(sub_AE36B4((uint64_t)v281, (unsigned int *)v292) + 4) << 6));
        LODWORD(v292[0]) = 0;
        uint64_t v141 = *(void *)(v282 + 192);
        uint64_t v142 = sub_AE36B4((uint64_t)v281, (unsigned int *)v292);
        sub_AE32F0((uint64_t)v281, 0, v140, (unsigned char *)(v141 + ((unint64_t)*(unsigned int *)(v142 + 8) << 6)));
        unsigned int v143 = v274 + *(_DWORD *)(v282 + 96) * (v280 + 1);
        LODWORD(v292[0]) = v143;
        if (*(void *)(v282 + 184) == *(void *)(v282 + 144)) {
          goto LABEL_181;
        }
        unint64_t v144 = sub_AE3914((uint64_t)v281, (unsigned int *)v292);
        if (v144 == -1) {
          goto LABEL_181;
        }
        uint64_t v145 = *(void *)(v282 + 152);
        uint64_t v146 = v145 + 16 * (v144 / 0x30);
        uint64_t v147 = (unsigned __int8 *)(v146 + 10);
        int v148 = v144 % 0x30;
        if ((unsigned __int16)(v144 % 0x30) < 9u)
        {
          __int16 v150 = 0;
          goto LABEL_156;
        }
        uint64_t v149 = (unsigned __int16)(v144 % 0x30 - 9) >> 3;
        __int16 v150 = 0;
        if (!((unsigned __int16)(v144 % 0x30 - 9) >> 3))
        {
          unsigned __int16 v154 = v144 % 0x30;
          v155 = (unsigned __int8 *)(v146 + 10);
          do
          {
LABEL_154:
            int v160 = *v155++;
            v150 += byte_20EBEB6[v160];
            v154 -= 8;
          }
          while (v154 > 8u);
          goto LABEL_155;
        }
        __int16 v151 = 0;
        uint64_t v152 = v149 + 1;
        uint64_t v153 = (v149 + 1) & 0x3FFE;
        unsigned __int16 v154 = v148 - 8 * v153;
        v155 = &v147[v153];
        uint64_t v156 = (unsigned __int8 *)(v145 + 16 * (v144 / 0x30) + 11);
        uint64_t v157 = v153;
        do
        {
          uint64_t v158 = *(v156 - 1);
          int v159 = *v156;
          v156 += 2;
          v150 += byte_20EBEB6[v158];
          v151 += byte_20EBEB6[v159];
          v157 -= 2;
        }
        while (v157);
        v150 += v151;
        if (v152 != v153) {
          goto LABEL_154;
        }
LABEL_155:
        v147 += ((unsigned __int16)(v148 - 9) >> 3) + 1;
        LOBYTE(v148) = v154;
LABEL_156:
        unint64_t v161 = *(_DWORD ***)(v282 + 160);
        unsigned __int16 v162 = v150 + byte_20EBEB6[~(-1 << v148) & (unint64_t)*v147];
        if (*(unsigned __int16 *)(v146 + 8) != v162)
        {
          long long v164 = (_DWORD *)(*(void *)v146 + 12 * v162);
          if ((_DWORD **)v146 != v161) {
            goto LABEL_164;
          }
          goto LABEL_172;
        }
        v146 += 16;
        if ((_DWORD **)v146 == v161) {
          goto LABEL_181;
        }
        while (1)
        {
          uint64_t v163 = (_DWORD **)v146;
          if (*(_WORD *)(v146 + 8)) {
            break;
          }
          v146 += 16;
          if (v163 + 2 == v161)
          {
            uint64_t v146 = *(void *)(v282 + 160);
            break;
          }
        }
        long long v164 = *v163;
        if ((_DWORD **)v146 != v161)
        {
LABEL_164:
          if (*(void *)(v282 + 144))
          {
            while (*(_DWORD *)(v282 + 136) == *v164)
            {
              v164 += 3;
              if (v164 == (_DWORD *)(*(void *)v146 + 12 * *(unsigned __int16 *)(v146 + 8)))
              {
                while (1)
                {
                  v146 += 16;
                  if ((_DWORD **)v146 == v161) {
                    goto LABEL_181;
                  }
                  if (*(_WORD *)(v146 + 8))
                  {
                    long long v164 = *(_DWORD **)v146;
                    break;
                  }
                }
              }
              if ((_DWORD **)v146 == v161) {
                break;
              }
            }
          }
        }
LABEL_172:
        if ((_DWORD **)v146 == v161)
        {
LABEL_181:
          unsigned int v166 = v280;
          goto LABEL_182;
        }
        uint64_t v165 = (v164[2] - v164[1]);
        unsigned int v166 = v280;
        if (v165)
        {
          unsigned int v277 = v104;
          uint64_t v167 = 0;
          unsigned int v168 = 0;
          do
          {
            uint64_t v169 = v165;
            signed int v170 = (_OWORD *)sub_AE5380(v281, v143, v168);
            long long v171 = v170[2];
            long long v172 = v170[3];
            long long v173 = v170[1];
            v292[0] = *v170;
            long long v293 = v171;
            long long v294 = v172;
            v292[1] = v173;
            v167 |= sub_AE4E28((uint64_t)v281, (uint64_t)v292, 0, 0, 1) & 0xFF00;
            uint64_t v165 = v169;
            ++v168;
          }
          while (v169 != v168);
          unsigned int v104 = v277;
          if (v167)
          {
            LODWORD(v292[0]) = 0;
            uint64_t v174 = *(void *)(v282 + 192);
            uint64_t v175 = v174
                 + ((unint64_t)*(unsigned int *)(sub_AE36B4((uint64_t)v281, (unsigned int *)v292) + 4) << 6);
            LODWORD(v292[0]) = 0;
            uint64_t v176 = *(void *)(v282 + 192);
            uint64_t v177 = sub_AE36B4((uint64_t)v281, (unsigned int *)v292);
            uint64_t v178 = (long long *)(v176 + ((unint64_t)*(unsigned int *)(v177 + 8) << 6));
            if ((long long *)v175 != v178)
            {
              while (*(_DWORD *)(v175 + 28) != 0x7FFFFFFF)
              {
                v175 += 64;
                if ((long long *)v175 == v178)
                {
                  uint64_t v175 = v176 + ((unint64_t)*(unsigned int *)(v177 + 8) << 6);
                  goto LABEL_316;
                }
              }
              if ((long long *)v175 != v178)
              {
                for (j = (long long *)(v175 + 64); j != v178; j += 4)
                {
                  if (*((_DWORD *)j + 7) != 0x7FFFFFFF)
                  {
                    long long v262 = *j;
                    long long v263 = j[1];
                    long long v264 = j[3];
                    *(_OWORD *)(v175 + 32) = j[2];
                    *(_OWORD *)(v175 + 48) = v264;
                    *(_OWORD *)uint64_t v175 = v262;
                    *(_OWORD *)(v175 + 16) = v263;
                    v175 += 64;
                  }
                }
              }
            }
LABEL_316:
            LODWORD(v292[0]) = 0;
            uint64_t v265 = *(void *)(v282 + 192);
            uint64_t v266 = sub_AE36B4((uint64_t)v281, (unsigned int *)v292);
            sub_AE32F0((uint64_t)v281, 0, (char *)v175, (unsigned char *)(v265 + ((unint64_t)*(unsigned int *)(v266 + 8) << 6)));
          }
        }
LABEL_182:
        LODWORD(v292[0]) = 0;
        uint64_t v179 = *(void *)(v282 + 192);
        uint64_t v180 = v179 + ((unint64_t)*(unsigned int *)(sub_AE36B4((uint64_t)v281, (unsigned int *)v292) + 4) << 6);
        LODWORD(v292[0]) = 0;
        uint64_t v181 = *(void *)(v282 + 192);
        uint64_t v182 = v181 + ((unint64_t)*(unsigned int *)(sub_AE36B4((uint64_t)v281, (unsigned int *)v292) + 8) << 6);
        if (v180 != v182)
        {
          unsigned int v183 = v284;
          do
          {
            *(_DWORD *)uint64_t v180 = v166;
            *(_DWORD *)(v180 + 16) = -1;
            int32x2_t v184 = *(int32x2_t *)(v180 + 28);
            *(_DWORD *)(v180 + 12) = v184.i32[0];
            int v185 = *((_DWORD *)v183 + 2);
            int v186 = v185 / 10;
            int v187 = v185 % 10;
            if (v185 < 0) {
              char v188 = -5;
            }
            else {
              char v188 = 5;
            }
            *(int32x2_t *)(v180 + 28) = vadd_s32(vdup_n_s32(v186+ (((103 * (char)(v188 + v187)) >> 15) & 1)+ ((103 * (char)(v188 + v187)) >> 10)), v184);
            v180 += 64;
          }
          while (v180 != v182);
        }
        if (*(unsigned char *)(v282 + 20))
        {
          unsigned int v275 = *(_DWORD *)(v282 + 96) + *(_DWORD *)(v282 + 96) * *(_DWORD *)(v282 + 416) + 1;
          int v278 = *(_DWORD *)(v282 + 96);
          uint64_t v189 = *(void *)(v282 + 48);
          if (v189) {
            goto LABEL_190;
          }
LABEL_234:
          int v213 = 2147483646;
LABEL_235:
          if (!sub_AE3124(v281, 0, v273 + v278 * (v104 + 1), v278 * (v104 + 1) + 1, v275, v213)) {
            goto LABEL_239;
          }
          if (*(void *)(v282 + 304) <= (unint64_t)v104) {
            sub_A3E96C((uint64_t)v272, v104 + 1, 0);
          }
          uint64_t v217 = *v272;
          unint64_t v218 = (unint64_t)v104 >> 6;
          uint64_t v219 = 1 << v104;
          if ((*(void *)(*v272 + 8 * v218) & (1 << v104)) != 0)
          {
LABEL_239:
            unint64_t v9 = (unint64_t)v285;
            int v6 = (void *)((char *)v284 + 12);
            unsigned __int16 v284 = v6;
            if (v6 != v285) {
              goto LABEL_240;
            }
LABEL_292:
            int v6 = v286;
            unint64_t v10 = v287[0];
            unsigned __int16 v284 = v286;
            int v8 = 1;
            unsigned __int8 v288 = 1;
            a1 = v282;
            if (*(unsigned char *)(v283 + 16)) {
              goto LABEL_293;
            }
            goto LABEL_10;
          }
          uint64_t v220 = (void *)v282;
          int v222 = *(char **)(v282 + 328);
          unint64_t v221 = *(void *)(v282 + 336);
          if ((unint64_t)v222 < v221)
          {
            *(_DWORD *)int v222 = v104;
            uint64_t v223 = (uint64_t)(v222 + 4);
            goto LABEL_291;
          }
          int v224 = (char *)*v268;
          uint64_t v225 = v222 - (unsigned char *)*v268;
          uint64_t v226 = v225 >> 2;
          unint64_t v227 = (v225 >> 2) + 1;
          if (v227 >> 62) {
            sub_2E00();
          }
          uint64_t v228 = v221 - (void)v224;
          if (v228 >> 1 > v227) {
            unint64_t v227 = v228 >> 1;
          }
          if ((unint64_t)v228 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v227 = 0x3FFFFFFFFFFFFFFFLL;
          }
          unint64_t v279 = v227;
          if (v227)
          {
            if (!(v227 >> 62))
            {
              uint64_t v229 = operator new(4 * v227);
              uint64_t v230 = (unsigned int *)&v229[4 * v226];
              unsigned int *v230 = v104;
              uint64_t v223 = (uint64_t)(v230 + 1);
              if (v222 != v224) {
                goto LABEL_252;
              }
LABEL_265:
              uint64_t v233 = (void *)v282;
              unint64_t v232 = v279;
              goto LABEL_288;
            }
LABEL_319:
            sub_188D718();
          }
          uint64_t v229 = 0;
          uint64_t v230 = (unsigned int *)(4 * v226);
          *(_DWORD *)(4 * v226) = v104;
          uint64_t v223 = 4 * v226 + 4;
          if (v222 == v224) {
            goto LABEL_265;
          }
LABEL_252:
          unint64_t v231 = v222 - 4 - v224;
          unint64_t v232 = v279;
          if (v231 >= 0x2C)
          {
            uint64_t v233 = (void *)v282;
            if ((unint64_t)(v222 - &v229[v225]) >= 0x20)
            {
              uint64_t v248 = (v231 >> 2) + 1;
              uint64_t v249 = 4 * (v248 & 0x7FFFFFFFFFFFFFF8);
              unint64_t v250 = &v222[-v249];
              uint64_t v230 = (unsigned int *)((char *)v230 - v249);
              unint64_t v251 = &v229[4 * v226 - 16];
              uint64_t v252 = v222 - 16;
              uint64_t v253 = v248 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v254 = *(_OWORD *)v252;
                *(v251 - 1) = *((_OWORD *)v252 - 1);
                *unint64_t v251 = v254;
                v251 -= 2;
                v252 -= 32;
                v253 -= 8;
              }
              while (v253);
              int v222 = v250;
              if (v248 == (v248 & 0x7FFFFFFFFFFFFFF8)) {
                goto LABEL_288;
              }
            }
          }
          else
          {
            uint64_t v233 = (void *)v282;
          }
          do
          {
            unsigned int v255 = *((_DWORD *)v222 - 1);
            v222 -= 4;
            *--uint64_t v230 = v255;
          }
          while (v222 != v224);
LABEL_288:
          v233[40] = v230;
          v233[41] = v223;
          v233[42] = &v229[4 * v232];
          if (v224)
          {
            uint64_t v256 = v223;
            operator delete(v224);
            uint64_t v223 = v256;
            uint64_t v217 = *v272;
          }
          uint64_t v220 = v233;
LABEL_291:
          v220[41] = v223;
          *(void *)(v217 + 8 * v218) |= v219;
          unint64_t v9 = (unint64_t)v285;
          int v6 = (void *)((char *)v284 + 12);
          unsigned __int16 v284 = v6;
          if (v6 == v285) {
            goto LABEL_292;
          }
LABEL_240:
          int v8 = v288;
          a1 = v282;
          unint64_t v10 = v287[0];
          if (*(unsigned char *)(v283 + 16))
          {
LABEL_293:
            if (v8) {
              unint64_t v257 = v10;
            }
            else {
              unint64_t v257 = v9;
            }
            if ((unint64_t)v6 < v257)
            {
              while (1)
              {
                unint64_t v259 = __ROR8__(*v6, 32);
                if (HIDWORD(v259) == 1 && (v259 + 3) < 2) {
                  break;
                }
                if (sub_2AB7E4(**(void **)(v283 + 4120)))
                {
                  LOBYTE(v8) = v288;
                  int v6 = v284;
                  unint64_t v9 = (unint64_t)v285;
                  break;
                }
                unint64_t v9 = (unint64_t)v285;
                int v6 = (void *)((char *)v284 + 12);
                unsigned __int16 v284 = v6;
                if (v6 == v285)
                {
                  int v6 = v286;
                  unsigned __int16 v284 = v286;
                  LOBYTE(v8) = 1;
                  unsigned __int8 v288 = 1;
                  if ((unint64_t)v286 >= v287[0]) {
                    break;
                  }
                }
                else
                {
                  LOBYTE(v8) = v288;
                  long long v258 = &v285;
                  if (v288) {
                    long long v258 = v287;
                  }
                  if ((unint64_t)v6 >= *v258) {
                    break;
                  }
                }
              }
              unint64_t v10 = v287[0];
            }
          }
LABEL_10:
          if ((_BYTE)v8) {
            unint64_t v9 = v10;
          }
          if ((unint64_t)v6 >= v9) {
            goto LABEL_3;
          }
          goto LABEL_13;
        }
        unsigned int v275 = -1;
        int v278 = *(_DWORD *)(v282 + 96);
        uint64_t v189 = *(void *)(v282 + 48);
        if (!v189) {
          goto LABEL_234;
        }
LABEL_190:
        unsigned int v190 = 0;
        unsigned int v191 = *(_DWORD *)(v282 + 100) + v271;
        while (2)
        {
          while (2)
          {
            LODWORD(v292[0]) = (v104 << *(_DWORD *)v189) | (v191 - v190);
            if (*(void *)(v189 + 88) == *(void *)(v189 + 48)
              || (unint64_t v192 = sub_AD72DC(v189 + 8, (unsigned int *)v292), v192 == -1))
            {
LABEL_219:
              int v213 = *(_DWORD *)(v189 + 4);
              v190 += 2;
              if (v213 != 0x7FFFFFFF || v190 > v191) {
                goto LABEL_235;
              }
              continue;
            }
            break;
          }
          uint64_t v193 = *(void *)(v189 + 56);
          int v194 = (_DWORD **)(v193 + 16 * (v192 / 0x30));
          uint64_t v195 = (unsigned __int8 *)v194 + 10;
          int v196 = v192 % 0x30;
          if ((unsigned __int16)(v192 % 0x30) >= 9u)
          {
            __int16 v197 = 0;
            uint64_t v198 = (unsigned __int16)(v192 % 0x30 - 9) >> 3;
            if ((unsigned __int16)(v192 % 0x30 - 9) >> 3)
            {
              __int16 v199 = 0;
              uint64_t v200 = v198 + 1;
              uint64_t v201 = (v198 + 1) & 0x3FFE;
              unsigned __int16 v202 = v196 - 8 * v201;
              unsigned int v203 = &v195[v201];
              uint64_t v204 = (unsigned __int8 *)(v193 + 16 * (v192 / 0x30) + 11);
              uint64_t v205 = v201;
              do
              {
                uint64_t v206 = *(v204 - 1);
                int v207 = *v204;
                v204 += 2;
                v197 += byte_20EBDB6[v206];
                v199 += byte_20EBDB6[v207];
                v205 -= 2;
              }
              while (v205);
              v197 += v199;
              if (v200 == v201)
              {
LABEL_202:
                v195 += ((unsigned __int16)(v196 - 9) >> 3) + 1;
                LOBYTE(v196) = v202;
                goto LABEL_203;
              }
            }
            else
            {
              unsigned __int16 v202 = v192 % 0x30;
              unsigned int v203 = (unsigned __int8 *)v194 + 10;
            }
            do
            {
              int v208 = *v203++;
              v197 += byte_20EBDB6[v208];
              v202 -= 8;
            }
            while (v202 > 8u);
            goto LABEL_202;
          }
          __int16 v197 = 0;
LABEL_203:
          __int16 v209 = *(_DWORD ***)(v189 + 64);
          unsigned __int16 v210 = v197 + byte_20EBDB6[~(-1 << v196) & (unint64_t)*v195];
          if (*((unsigned __int16 *)v194 + 4) == v210)
          {
            v194 += 2;
            if (v194 == v209) {
              goto LABEL_219;
            }
            while (1)
            {
              unint64_t v211 = v194;
              if (*((_WORD *)v194 + 4)) {
                break;
              }
              v194 += 2;
              if (v211 + 2 == v209)
              {
                int v194 = *(_DWORD ***)(v189 + 64);
                break;
              }
            }
            unint64_t v212 = *v211;
            if (v194 == v209) {
              goto LABEL_219;
            }
          }
          else
          {
            unint64_t v212 = &(*v194)[2 * v210];
            if (v194 == v209) {
              goto LABEL_219;
            }
          }
          if (*(void *)(v189 + 48))
          {
            while (*(_DWORD *)(v189 + 40) == *v212)
            {
              v212 += 2;
              if (v212 == &(*v194)[2 * *((unsigned __int16 *)v194 + 4)])
              {
                while (1)
                {
                  v194 += 2;
                  if (v194 == v209) {
                    goto LABEL_219;
                  }
                  if (*((_WORD *)v194 + 4))
                  {
                    unint64_t v212 = *v194;
                    break;
                  }
                }
              }
              if (v194 == v209) {
                break;
              }
            }
          }
          BOOL v39 = v194 == v209;
          uint64_t v215 = v212 + 1;
          if (v39) {
            uint64_t v215 = (int *)(v189 + 4);
          }
          int v213 = *v215;
          v190 += 2;
          if (*v215 != 0x7FFFFFFF || v190 > v191) {
            goto LABEL_235;
          }
          continue;
        }
      }
LABEL_16:
      ++v11;
    }
  }
LABEL_317:
  double result = sub_72688((uint64_t)v289) + *(double *)(a1 + 568);
  *(double *)(a1 + 568) = result;
  return result;
}

void sub_AE1608(void *a1)
{
  v1 = a1;
  int v2 = (unsigned int *)a1[49];
  int v3 = (unsigned int *)a1[50];
  if (v2 != v3)
  {
    uint64_t v4 = a1[46];
    uint64_t v5 = a1[43];
    int v6 = (unsigned int *)a1[49];
    do
    {
      unsigned int v7 = *v6++;
      *(void *)(v4 + (((unint64_t)v7 >> 3) & 0x1FFFFFF8)) &= ~(1 << v7);
      *(_DWORD *)(v5 + 4 * v7) = -1;
    }
    while (v6 != v3);
  }
  a1[50] = v2;
  int v8 = (unsigned int *)a1[40];
  uint64_t v285 = (unsigned int *)a1[41];
  if (v8 != v285)
  {
    uint64_t v283 = (void **)(a1 + 49);
    int v291 = a1 + 46;
    while (1)
    {
      unsigned int v292 = v8;
      unint64_t v9 = (unint64_t *)sub_A3F32C((void *)(v1[4] + 88), *v8);
      sub_A1DF34((uint64_t)v294, (void *)v1[3], *v9, 0, 0, 0);
      unint64_t v10 = v297;
LABEL_8:
      unint64_t v11 = (unint64_t)v298;
LABEL_9:
      if ((unint64_t)v10 < v11) {
        break;
      }
LABEL_6:
      int v8 = v292 + 1;
      if (v292 + 1 == v285) {
        return;
      }
    }
    uint64_t v12 = 0;
    unint64_t v13 = __ROR8__(*v10, 32);
    uint64_t v14 = v1[5];
    uint64_t v15 = *(void *)(v14 + 72) - 1;
    unint64_t v16 = 0xC4CEB9FE1A85EC53
        * ((0xFF51AFD7ED558CCDLL * (v13 ^ (v13 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v13 ^ (v13 >> 33))) >> 33));
    unint64_t v17 = v16 ^ (v16 >> 33);
    uint64_t v18 = *(void *)(v14 + 48);
    uint64_t v19 = v18 + 11;
    uint64_t v20 = -1;
    for (unint64_t i = v17; ; unint64_t i = v12 + v22)
    {
      uint64_t v22 = i & v15;
      unint64_t v23 = (i & v15) / 0x30;
      unint64_t v24 = v22 - 48 * v23;
      if (((*(unsigned __int8 *)(v18 + 16 * v23 + (v24 >> 3) + 10) >> (v24 & 7)) & 1) == 0)
      {
        if (v20 == -1) {
          unint64_t v60 = v22;
        }
        else {
          unint64_t v60 = v20;
        }
        if (!sub_AD2F40(v1[5], 1)) {
          goto LABEL_95;
        }
        goto LABEL_52;
      }
      uint64_t v25 = *(void *)(v18 + 16 * v23);
      if (!*(void *)(v14 + 40)) {
        goto LABEL_30;
      }
      __int16 v26 = (unsigned __int8 *)(v18 + 16 * v23 + 10);
      if ((unsigned __int16)(v22 - 48 * v23) < 9u)
      {
        __int16 v27 = 0;
        LOBYTE(v32) = v22 - 48 * v23;
        goto LABEL_26;
      }
      __int16 v27 = 0;
      uint64_t v28 = (unsigned __int16)(v22 - 48 * v23 - 9) >> 3;
      if ((unsigned __int16)(v22 - 48 * v23 - 9) >> 3)
      {
        __int16 v29 = 0;
        uint64_t v30 = v28 + 1;
        uint64_t v31 = (v28 + 1) & 0x3FFE;
        unsigned __int16 v32 = v24 - 8 * v31;
        unsigned int v33 = &v26[v31];
        uint64_t v34 = (unsigned __int8 *)(v19 + 16 * v23);
        uint64_t v35 = v31;
        do
        {
          uint64_t v36 = *(v34 - 1);
          int v37 = *v34;
          v34 += 2;
          v27 += byte_20EBFB6[v36];
          v29 += byte_20EBFB6[v37];
          v35 -= 2;
        }
        while (v35);
        v27 += v29;
        if (v30 == v31) {
          goto LABEL_25;
        }
      }
      else
      {
        unsigned __int16 v32 = v22 - 48 * v23;
        unsigned int v33 = (unsigned __int8 *)(v18 + 16 * v23 + 10);
      }
      do
      {
        int v38 = *v33++;
        v27 += byte_20EBFB6[v38];
        v32 -= 8;
      }
      while (v32 > 8u);
LABEL_25:
      v26 += ((unsigned __int16)(v24 - 9) >> 3) + 1;
LABEL_26:
      BOOL v39 = (_DWORD *)(v25
                     + 12
                     * (unsigned __int16)(v27 + byte_20EBFB6[~(-1 << v32) & (unint64_t)*v26]));
      if (*(_DWORD *)(v14 + 36) == v39[1] && *(_DWORD *)(v14 + 32) == *v39)
      {
        if (v20 == -1) {
          uint64_t v20 = v22;
        }
        goto LABEL_13;
      }
LABEL_30:
      __int16 v41 = (unsigned __int8 *)(v18 + 16 * v23 + 10);
      if ((unsigned __int16)(v22 - 48 * v23) < 9u)
      {
        __int16 v42 = 0;
        int v53 = (unsigned __int8 *)(v18 + 16 * v23 + 10);
        LOBYTE(v47) = v22 - 48 * v23;
        goto LABEL_40;
      }
      __int16 v42 = 0;
      uint64_t v43 = (unsigned __int16)(v22 - 48 * v23 - 9) >> 3;
      if ((unsigned __int16)(v22 - 48 * v23 - 9) >> 3)
      {
        __int16 v44 = 0;
        uint64_t v45 = v43 + 1;
        uint64_t v46 = (v43 + 1) & 0x3FFE;
        unsigned __int16 v47 = v24 - 8 * v46;
        int v48 = &v41[v46];
        uint64_t v49 = (unsigned __int8 *)(v19 + 16 * v23);
        uint64_t v50 = v46;
        do
        {
          uint64_t v51 = *(v49 - 1);
          int v52 = *v49;
          v49 += 2;
          v42 += byte_20EBFB6[v51];
          v44 += byte_20EBFB6[v52];
          v50 -= 2;
        }
        while (v50);
        v42 += v44;
        if (v45 == v46) {
          goto LABEL_39;
        }
      }
      else
      {
        unsigned __int16 v47 = v22 - 48 * v23;
        int v48 = (unsigned __int8 *)(v18 + 16 * v23 + 10);
      }
      do
      {
        int v54 = *v48++;
        v42 += byte_20EBFB6[v54];
        v47 -= 8;
      }
      while (v47 > 8u);
LABEL_39:
      int v53 = &v41[((unsigned __int16)(v24 - 9) >> 3) + 1];
LABEL_40:
      if (v13 == *(void *)(v25
                            + 12
                            * (unsigned __int16)(v42 + byte_20EBFB6[~(-1 << v47) & (unint64_t)*v53])))
      {
        if (v22 != -1)
        {
          if ((unsigned __int16)(v22 - 48 * v23) < 9u)
          {
            __int16 v57 = 0;
          }
          else
          {
            if ((((_WORD)v22 - 48 * (_WORD)v23 - 8) & 0xFFF8) != 0) {
              __int16 v55 = 8;
            }
            else {
              __int16 v55 = v22 - 48 * v23 - 8;
            }
            unsigned __int16 v56 = ~v55 + v22 - 48 * v23;
            if (v56 < 8u)
            {
              __int16 v57 = 0;
              unsigned __int16 v58 = v24;
              unint64_t v59 = (unsigned __int8 *)(v18 + 16 * v23 + 10);
              goto LABEL_100;
            }
            __int16 v106 = 0;
            __int16 v107 = 0;
            uint64_t v108 = (v56 >> 3) + 1;
            unsigned __int16 v58 = v24 - 8 * (((v56 >> 3) + 1) & 0x3FFE);
            unint64_t v59 = &v41[v108 & 0x3FFE];
            __int16 v109 = (unsigned __int8 *)(v18 + 16 * v23 + 11);
            uint64_t v110 = v108 & 0x3FFE;
            do
            {
              uint64_t v111 = *(v109 - 1);
              int v112 = *v109;
              v109 += 2;
              v106 += byte_20EBFB6[v111];
              v107 += byte_20EBFB6[v112];
              v110 -= 2;
            }
            while (v110);
            __int16 v57 = v107 + v106;
            if ((v108 & 0x3FFE) != v108)
            {
              do
              {
LABEL_100:
                int v113 = *v59++;
                v57 += byte_20EBFB6[v113];
                v58 -= 8;
              }
              while (v58 > 8u);
            }
            v41 += ((unsigned __int16)(v24 - 9) >> 3) + 1;
            LOBYTE(v24) = v58;
          }
          uint64_t v114 = *(void *)(v14 + 56);
          unsigned __int16 v115 = v57 + byte_20EBFB6[~(-1 << v24) & (unint64_t)*v41];
          uint64_t v116 = v18 + 16 * v23;
          if (*(unsigned __int16 *)(v116 + 8) != v115 || v116 + 16 == v114)
          {
            int v105 = (_DWORD *)(v25 + 12 * v115);
          }
          else
          {
            uint64_t v118 = v116 + 32;
            do
            {
              if (*(_WORD *)(v118 - 8)) {
                BOOL v119 = 1;
              }
              else {
                BOOL v119 = v118 == v114;
              }
              v118 += 16;
            }
            while (!v119);
            int v105 = *(_DWORD **)(v118 - 32);
          }
          goto LABEL_114;
        }
        unint64_t v60 = -1;
        if (!sub_AD2F40(v1[5], 1))
        {
LABEL_95:
          unint64_t v301 = v13;
          int v302 = -1;
          sub_AD3484(v14, (uint64_t *)&v301, v60, v303);
          int v105 = v304;
          goto LABEL_114;
        }
LABEL_52:
        uint64_t v61 = 0;
        unint64_t v301 = v13;
        int v302 = -1;
        uint64_t v62 = *(void *)(v14 + 72) - 1;
        uint64_t v63 = *(void *)(v14 + 48);
        uint64_t v64 = v63 + 11;
        uint64_t v65 = -1;
        while (2)
        {
          uint64_t v66 = v17 & v62;
          unint64_t v67 = (v17 & v62) / 0x30;
          unint64_t v68 = (v17 & v62) % 0x30;
          if (((*(unsigned __int8 *)(v63 + 16 * v67 + (v68 >> 3) + 10) >> (v68 & 7)) & 1) == 0)
          {
            if (v65 == -1) {
              unint64_t v104 = v17 & v62;
            }
            else {
              unint64_t v104 = v65;
            }
            goto LABEL_93;
          }
          uint64_t v69 = *(void *)(v14 + 40);
          uint64_t v70 = *(void *)(v63 + 16 * v67);
          if (!v69) {
            break;
          }
          __int16 v71 = (unsigned __int8 *)(v63 + 16 * v67 + 10);
          if ((unsigned __int16)((v17 & v62) % 0x30) < 9u)
          {
            __int16 v72 = 0;
            LOBYTE(v73) = (v17 & v62) % 0x30;
            goto LABEL_68;
          }
          __int16 v72 = 0;
          uint64_t v73 = (unsigned __int16)(v66 - 48 * v67 - 9) >> 3;
          if (!((unsigned __int16)(v66 - 48 * v67 - 9) >> 3))
          {
            LODWORD(v73) = (v17 & v62) % 0x30;
            uint64_t v77 = (unsigned __int8 *)(v63 + 16 * v67 + 10);
            do
            {
LABEL_66:
              int v82 = *v77++;
              v72 += byte_20EBFB6[v82];
              LOWORD(v73) = v73 - 8;
            }
            while ((unsigned __int16)v73 > 8u);
            goto LABEL_67;
          }
          __int16 v74 = 0;
          uint64_t v75 = v73 + 1;
          uint64_t v76 = (v73 + 1) & 0x3FFE;
          LOWORD(v73) = v68 - 8 * v76;
          uint64_t v77 = &v71[v76];
          uint64_t v78 = (unsigned __int8 *)(v64 + 16 * v67);
          uint64_t v79 = v76;
          do
          {
            uint64_t v80 = *(v78 - 1);
            int v81 = *v78;
            v78 += 2;
            v72 += byte_20EBFB6[v80];
            v74 += byte_20EBFB6[v81];
            v79 -= 2;
          }
          while (v79);
          v72 += v74;
          if (v75 != v76) {
            goto LABEL_66;
          }
LABEL_67:
          v71 += ((unsigned __int16)(v68 - 9) >> 3) + 1;
LABEL_68:
          uint64_t v83 = (_DWORD *)(v70
                         + 12
                         * (unsigned __int16)(v72 + byte_20EBFB6[~(-1 << v73) & (unint64_t)*v71]));
          if (*(_DWORD *)(v14 + 36) == v83[1] && *(_DWORD *)(v14 + 32) == *v83)
          {
            if (v65 == -1) {
              uint64_t v65 = v66;
            }
LABEL_55:
            unint64_t v17 = ++v61 + v66;
            continue;
          }
          break;
        }
        __int16 v85 = (unsigned __int8 *)(v63 + 16 * v67 + 10);
        if ((unsigned __int16)v68 < 9u)
        {
          __int16 v86 = 0;
          __int16 v97 = (unsigned __int8 *)(v63 + 16 * v67 + 10);
          LOBYTE(v91) = v68;
          goto LABEL_82;
        }
        __int16 v86 = 0;
        uint64_t v87 = (unsigned __int16)(v66 - 48 * v67 - 9) >> 3;
        if (!((unsigned __int16)(v66 - 48 * v67 - 9) >> 3))
        {
          unsigned __int16 v91 = v68;
          uint64_t v92 = (unsigned __int8 *)(v63 + 16 * v67 + 10);
          do
          {
LABEL_80:
            int v98 = *v92++;
            v86 += byte_20EBFB6[v98];
            v91 -= 8;
          }
          while (v91 > 8u);
          goto LABEL_81;
        }
        __int16 v88 = 0;
        uint64_t v89 = v87 + 1;
        uint64_t v90 = (v87 + 1) & 0x3FFE;
        unsigned __int16 v91 = v68 - 8 * v90;
        uint64_t v92 = &v85[v90];
        uint64_t v93 = (unsigned __int8 *)(v64 + 16 * v67);
        uint64_t v94 = v90;
        do
        {
          uint64_t v95 = *(v93 - 1);
          int v96 = *v93;
          v93 += 2;
          v86 += byte_20EBFB6[v95];
          v88 += byte_20EBFB6[v96];
          v94 -= 2;
        }
        while (v94);
        v86 += v88;
        if (v89 != v90) {
          goto LABEL_80;
        }
LABEL_81:
        __int16 v97 = &v85[((unsigned __int16)(v68 - 9) >> 3) + 1];
LABEL_82:
        if (v13 != *(void *)(v70
                              + 12
                              * (unsigned __int16)(v86
                                                 + byte_20EBFB6[~(-1 << v91) & (unint64_t)*v97])))
          goto LABEL_55;
        if (v66 == -1)
        {
          unint64_t v104 = -1;
LABEL_93:
          sub_AD3484(v14, (uint64_t *)&v301, v104, v303);
          int v105 = v304;
          goto LABEL_114;
        }
        if ((unsigned __int16)v68 < 9u)
        {
          __int16 v101 = 0;
        }
        else
        {
          if ((((_WORD)v66 - 48 * (_WORD)v67 - 8) & 0xFFF8) != 0) {
            __int16 v99 = 8;
          }
          else {
            __int16 v99 = v66 - 48 * v67 - 8;
          }
          unsigned __int16 v100 = ~v99 + v66 - 48 * v67;
          if (v100 < 8u)
          {
            __int16 v101 = 0;
            unsigned __int16 v102 = v68;
            uint64_t v103 = (unsigned __int8 *)(v63 + 16 * v67 + 10);
            goto LABEL_220;
          }
          __int16 v212 = 0;
          __int16 v213 = 0;
          uint64_t v214 = (v100 >> 3) + 1;
          unsigned __int16 v102 = v68 - 8 * (((v100 >> 3) + 1) & 0x3FFE);
          uint64_t v103 = &v85[v214 & 0x3FFE];
          uint64_t v215 = (unsigned __int8 *)(v63 + 16 * v67 + 11);
          uint64_t v216 = v214 & 0x3FFE;
          do
          {
            uint64_t v217 = *(v215 - 1);
            int v218 = *v215;
            v215 += 2;
            v212 += byte_20EBFB6[v217];
            v213 += byte_20EBFB6[v218];
            v216 -= 2;
          }
          while (v216);
          __int16 v101 = v213 + v212;
          if ((v214 & 0x3FFE) != v214)
          {
            do
            {
LABEL_220:
              int v219 = *v103++;
              v101 += byte_20EBFB6[v219];
              v102 -= 8;
            }
            while (v102 > 8u);
          }
          v85 += ((unsigned __int16)(v68 - 9) >> 3) + 1;
          LOBYTE(v68) = v102;
        }
        uint64_t v220 = v63 + 16 * v67;
        unint64_t v221 = *(_DWORD ***)(v14 + 56);
        unsigned __int16 v222 = v101 + byte_20EBFB6[~(-1 << v68) & (unint64_t)*v85];
        int v105 = (_DWORD *)(v70 + 12 * v222);
        if (*(unsigned __int16 *)(v220 + 8) == v222)
        {
          uint64_t v223 = v220 + 16;
          if ((_DWORD **)(v220 + 16) != v221)
          {
            while (1)
            {
              int v224 = (_DWORD **)v223;
              if (*(_WORD *)(v223 + 8)) {
                break;
              }
              v223 += 16;
              if (v224 + 2 == v221)
              {
                uint64_t v220 = *(void *)(v14 + 56);
                goto LABEL_228;
              }
            }
            uint64_t v220 = v223;
LABEL_228:
            int v105 = *v224;
            goto LABEL_229;
          }
        }
        else
        {
LABEL_229:
          if ((_DWORD **)v220 != v221 && v69)
          {
            do
            {
              if (*(_DWORD *)(v14 + 36) != v105[1] || *(_DWORD *)(v14 + 32) != *v105) {
                break;
              }
              v105 += 3;
              if (v105 == (_DWORD *)(*(void *)v220 + 12 * *(unsigned __int16 *)(v220 + 8)))
              {
                v220 += 16;
                if ((_DWORD **)v220 != v221)
                {
                  do
                  {
                    if (*(_WORD *)(v220 + 8))
                    {
                      int v105 = *(_DWORD **)v220;
                      goto LABEL_233;
                    }
                    v220 += 16;
                  }
                  while ((_DWORD **)v220 != v221);
                  int v105 = *(_DWORD **)(v220 - 16);
                }
                break;
              }
LABEL_233:
              ;
            }
            while ((_DWORD **)v220 != v221);
          }
        }
LABEL_114:
        unsigned int v120 = v105[2];
        if (v120 != -1) {
          goto LABEL_138;
        }
        int v121 = *(_DWORD *)(v14 + 112);
        *(_DWORD *)(v14 + 112) = v121 + 1;
        v105[2] = v121;
        int v123 = *(unint64_t **)(v14 + 96);
        unint64_t v122 = *(void *)(v14 + 104);
        if ((unint64_t)v123 < v122)
        {
          *int v123 = v13;
          uint64_t v124 = (uint64_t)(v123 + 1);
          goto LABEL_137;
        }
        uint64_t v125 = (unint64_t **)(v14 + 88);
        unsigned __int16 v126 = *(char **)(v14 + 88);
        uint64_t v127 = ((char *)v123 - v126) >> 3;
        unint64_t v128 = v127 + 1;
        if ((unint64_t)(v127 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v129 = v122 - (void)v126;
        if (v129 >> 2 > v128) {
          unint64_t v128 = v129 >> 2;
        }
        if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v128 = 0x1FFFFFFFFFFFFFFFLL;
        }
        if (!v128)
        {
          unint64_t v130 = 0;
          uint64_t v131 = 0;
          uint64_t v132 = (unint64_t *)(8 * v127);
          *(void *)(8 * v127) = v13;
          uint64_t v124 = 8 * v127 + 8;
          if (v123 != (unint64_t *)v126) {
            goto LABEL_125;
          }
LABEL_128:
          *(void *)(v14 + 88) = v132;
          *(void *)(v14 + 96) = v124;
          *(void *)(v14 + 104) = &v131[8 * v130];
          v1 = a1;
          if (v123) {
            goto LABEL_136;
          }
          goto LABEL_137;
        }
        if (v128 >> 61) {
          goto LABEL_325;
        }
        unint64_t v130 = v128;
        uint64_t v131 = (char *)operator new(8 * v128);
        uint64_t v125 = (unint64_t **)(v14 + 88);
        uint64_t v132 = (unint64_t *)&v131[8 * v127];
        *uint64_t v132 = v13;
        uint64_t v124 = (uint64_t)(v132 + 1);
        if (v123 == (unint64_t *)v126) {
          goto LABEL_128;
        }
LABEL_125:
        unint64_t v133 = (char *)(v123 - 1) - v126;
        if (v133 < 0x58) {
          goto LABEL_330;
        }
        if ((unint64_t)(v126 - v131) < 0x20) {
          goto LABEL_330;
        }
        uint64_t v134 = (v133 >> 3) + 1;
        uint64_t v135 = 8 * (v134 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v136 = &v123[v135 / 0xFFFFFFFFFFFFFFF8];
        uint64_t v132 = (unint64_t *)((char *)v132 - v135);
        long long v137 = &v131[8 * v127 - 16];
        unint64_t v138 = v123 - 2;
        uint64_t v139 = v134 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v140 = *(_OWORD *)v138;
          *((_OWORD *)v137 - 1) = *((_OWORD *)v138 - 1);
          *(_OWORD *)long long v137 = v140;
          v137 -= 32;
          v138 -= 4;
          v139 -= 4;
        }
        while (v139);
        int v123 = v136;
        if (v134 != (v134 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_330:
          do
          {
            unint64_t v141 = *--v123;
            *--uint64_t v132 = v141;
          }
          while (v123 != (unint64_t *)v126);
        }
        int v123 = *v125;
        *(void *)(v14 + 88) = v132;
        *(void *)(v14 + 96) = v124;
        *(void *)(v14 + 104) = &v131[8 * v130];
        v1 = a1;
        if (v123) {
LABEL_136:
        }
          operator delete(v123);
LABEL_137:
        *(void *)(v14 + 96) = v124;
        unsigned int v120 = v105[2];
LABEL_138:
        unsigned int v142 = *((unsigned __int16 *)v297 + 4);
        unint64_t v143 = v120;
        unint64_t v144 = (unint64_t)v120 >> 6;
        if (v1[47] <= (unint64_t)v120)
        {
          int v148 = (unsigned char *)v1[43];
          __int16 v151 = (unsigned char *)v1[44];
          int64_t v152 = v151 - v148;
          unint64_t v153 = (v151 - v148) >> 2;
          if (v153 <= v120) {
            goto LABEL_146;
          }
LABEL_183:
          uint64_t v189 = *(void *)(*v291 + 8 * v144);
          v1 = a1;
          if ((v189 & (1 << v143)) == 0)
          {
            *(void *)(*v291 + 8 * v144) = v189 | (1 << v143);
            unsigned int v191 = (char *)a1[50];
            unint64_t v190 = a1[51];
            if ((unint64_t)v191 < v190)
            {
              *(_DWORD *)unsigned int v191 = v120;
              uint64_t v192 = (uint64_t)(v191 + 4);
              goto LABEL_206;
            }
            uint64_t v193 = (char *)*v283;
            uint64_t v194 = v191 - (unsigned char *)*v283;
            uint64_t v195 = v194 >> 2;
            unint64_t v196 = (v194 >> 2) + 1;
            if (v196 >> 62) {
LABEL_326:
            }
              sub_2E00();
            uint64_t v197 = v190 - (void)v193;
            if (v197 >> 1 > v196) {
              unint64_t v196 = v197 >> 1;
            }
            if ((unint64_t)v197 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v198 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v198 = v196;
            }
            if (v198)
            {
              if (v198 >> 62) {
                goto LABEL_325;
              }
              unsigned int v199 = v120;
              uint64_t v200 = operator new(4 * v198);
              uint64_t v201 = (unsigned int *)&v200[4 * v195];
              unsigned int *v201 = v199;
              uint64_t v192 = (uint64_t)(v201 + 1);
              if (v191 != v193)
              {
LABEL_195:
                unint64_t v202 = v191 - 4 - v193;
                if (v202 < 0x2C) {
                  goto LABEL_331;
                }
                if ((unint64_t)(v191 - &v200[v194]) < 0x20) {
                  goto LABEL_331;
                }
                uint64_t v203 = (v202 >> 2) + 1;
                uint64_t v204 = 4 * (v203 & 0x7FFFFFFFFFFFFFF8);
                uint64_t v205 = &v191[-v204];
                uint64_t v201 = (unsigned int *)((char *)v201 - v204);
                uint64_t v206 = &v200[4 * v195 - 16];
                int v207 = v191 - 16;
                uint64_t v208 = v203 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v209 = *(_OWORD *)v207;
                  *(v206 - 1) = *((_OWORD *)v207 - 1);
                  *uint64_t v206 = v209;
                  v206 -= 2;
                  v207 -= 32;
                  v208 -= 8;
                }
                while (v208);
                unsigned int v191 = v205;
                if (v203 != (v203 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_331:
                  do
                  {
                    unsigned int v210 = *((_DWORD *)v191 - 1);
                    v191 -= 4;
                    *--uint64_t v201 = v210;
                  }
                  while (v191 != v193);
                }
              }
            }
            else
            {
              uint64_t v200 = 0;
              uint64_t v201 = (unsigned int *)(4 * v195);
              *(_DWORD *)(4 * v195) = v120;
              uint64_t v192 = 4 * v195 + 4;
              if (v191 != v193) {
                goto LABEL_195;
              }
            }
            v1 = a1;
            a1[49] = v201;
            a1[50] = v192;
            a1[51] = &v200[4 * v198];
            if (v193) {
              operator delete(v193);
            }
LABEL_206:
            v1[50] = v192;
          }
          *(_DWORD *)(v1[43] + 4 * v143) = v142;
          goto LABEL_208;
        }
        uint64_t v145 = v1[46];
        uint64_t v146 = *(void *)(v145 + 8 * v144);
        uint64_t v147 = 1 << v120;
        int v148 = (unsigned char *)v1[43];
        if ((v146 & (1 << v120)) == 0) {
          goto LABEL_143;
        }
        uint64_t v149 = (unsigned char *)v1[44];
        unint64_t v150 = (v149 - v148) >> 2;
        if (v150 <= v120)
        {
          unint64_t v167 = v120 + 1;
          BOOL v168 = v167 >= v150;
          unint64_t v169 = v167 - v150;
          unsigned int v284 = *((unsigned __int16 *)v297 + 4);
          unsigned int v287 = v120;
          unint64_t v289 = (unint64_t)v120 >> 6;
          if (v167 <= v150)
          {
            v1 = a1;
            if (!v168) {
              a1[44] = &v148[4 * v167];
            }
          }
          else
          {
            uint64_t v170 = a1[45];
            if (v169 <= (v170 - (uint64_t)v149) >> 2)
            {
              uint64_t v179 = 4 * v169;
              unint64_t v180 = v120 + 1;
              memset(v149, 255, 4 * v169);
              unint64_t v167 = v180;
              a1[44] = &v149[v179];
              v1 = a1;
            }
            else
            {
              unint64_t v171 = v167 - v150;
              uint64_t v172 = v170 - (void)v148;
              uint64_t v173 = v172 >> 1;
              *(void *)uint64_t v282 = v120 + 1;
              if (v172 >> 1 <= v167) {
                uint64_t v173 = v120 + 1;
              }
              BOOL v168 = (unint64_t)v172 >= 0x7FFFFFFFFFFFFFFCLL;
              unint64_t v174 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v168) {
                unint64_t v174 = v173;
              }
              if (v174 >> 62) {
                goto LABEL_325;
              }
              uint64_t v280 = 4 * v174;
              int v278 = operator new(4 * v174);
              unsigned int v277 = &v278[4 * v150];
              memset(v277, 255, 4 * v171);
              if (v149 == v148)
              {
                uint64_t v175 = &v278[4 * v150];
                uint64_t v177 = v175;
                unint64_t v167 = *(void *)v282;
                uint64_t v178 = v278;
              }
              else
              {
                uint64_t v175 = &v278[4 * v150];
                unint64_t v176 = v149 - 4 - v148;
                if (v176 < 0x2C)
                {
                  uint64_t v177 = &v278[4 * v150];
                  unint64_t v167 = *(void *)v282;
                  uint64_t v178 = v278;
                  goto LABEL_249;
                }
                uint64_t v178 = v278;
                uint64_t v177 = &v278[4 * v150];
                unint64_t v167 = *(void *)v282;
                if ((unint64_t)(v148 - v278) < 0x20) {
                  goto LABEL_332;
                }
                uint64_t v226 = (v176 >> 2) + 1;
                uint64_t v227 = 4 * (v226 & 0x7FFFFFFFFFFFFFF8);
                uint64_t v228 = &v149[-v227];
                uint64_t v177 = &v277[-v227];
                uint64_t v229 = &v278[4 * v150 - 16];
                uint64_t v230 = (long long *)(v149 - 16);
                uint64_t v231 = v226 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v232 = *v230;
                  *(v229 - 1) = *(v230 - 1);
                  *uint64_t v229 = v232;
                  v229 -= 2;
                  v230 -= 2;
                  v231 -= 8;
                }
                while (v231);
                uint64_t v149 = v228;
                if (v226 != (v226 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_332:
                  do
                  {
LABEL_249:
                    int v233 = *((_DWORD *)v149 - 1);
                    v149 -= 4;
                    *((_DWORD *)v177 - 1) = v233;
                    v177 -= 4;
                  }
                  while (v149 != v148);
                }
              }
              v1 = a1;
              a1[43] = v177;
              a1[44] = &v175[4 * v171];
              a1[45] = &v178[v280];
              if (v148)
              {
                operator delete(v148);
                unint64_t v167 = *(void *)v282;
              }
            }
          }
          sub_A3E96C((uint64_t)v291, v167, 0);
          uint64_t v145 = *v291;
          unint64_t v144 = v289;
          uint64_t v146 = *(void *)(*v291 + 8 * v289);
          unsigned int v142 = v284;
          unsigned int v120 = v287;
          if ((v146 & v147) == 0) {
            goto LABEL_253;
          }
LABEL_142:
          int v148 = (unsigned char *)v1[43];
          if (*(_DWORD *)&v148[4 * v143] <= v142) {
            goto LABEL_208;
          }
LABEL_143:
          __int16 v151 = (unsigned char *)v1[44];
          int64_t v152 = v151 - v148;
          unint64_t v153 = (v151 - v148) >> 2;
          if (v153 > v143) {
            goto LABEL_183;
          }
LABEL_146:
          unint64_t v154 = v120 + 1;
          unint64_t v155 = v154 - v153;
          unsigned int v286 = v120;
          unint64_t v288 = v144;
          if (v154 <= v153)
          {
            if (v154 < v153) {
              a1[44] = &v148[4 * v154];
            }
          }
          else
          {
            uint64_t v156 = a1[45];
            if (v155 <= (v156 - (uint64_t)v151) >> 2)
            {
              memset(v151, 255, 4 * v155);
              a1[44] = &v151[4 * v155];
            }
            else
            {
              uint64_t v157 = v156 - (void)v148;
              uint64_t v158 = v157 >> 1;
              if (v157 >> 1 <= v154) {
                uint64_t v158 = v120 + 1;
              }
              BOOL v168 = (unint64_t)v157 >= 0x7FFFFFFFFFFFFFFCLL;
              unint64_t v159 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v168) {
                unint64_t v159 = v158;
              }
              if (v159 >> 62) {
                goto LABEL_325;
              }
              *(void *)int v281 = 4 * v159;
              unint64_t v279 = operator new(4 * v159);
              memset(&v279[4 * v153], 255, 4 * v155);
              if (v151 == v148)
              {
                unsigned __int16 v162 = &v279[4 * v153];
                uint64_t v163 = a1;
                long long v164 = v279;
                uint64_t v165 = *(void *)v281;
                unint64_t v161 = v162;
                uint64_t v166 = 4 * v155;
              }
              else
              {
                unint64_t v160 = v151 - 4 - v148;
                if (v160 < 0x2C)
                {
                  unint64_t v161 = &v279[4 * v153];
                  unsigned __int16 v162 = v161;
                  uint64_t v163 = a1;
                  long long v164 = v279;
                  uint64_t v165 = *(void *)v281;
                  uint64_t v166 = 4 * v155;
                  goto LABEL_179;
                }
                long long v164 = v279;
                uint64_t v165 = *(void *)v281;
                unint64_t v161 = &v279[4 * v153];
                unsigned __int16 v162 = v161;
                uint64_t v163 = a1;
                uint64_t v166 = 4 * v155;
                if ((unint64_t)(&v151[-v152] - v279) < 0x20) {
                  goto LABEL_333;
                }
                uint64_t v181 = (v160 >> 2) + 1;
                uint64_t v182 = 4 * (v181 & 0x7FFFFFFFFFFFFFF8);
                unsigned int v183 = &v151[-v182];
                unsigned __int16 v162 = &v161[-v182];
                int32x2_t v184 = &v279[4 * v153 - 16];
                int v185 = (long long *)(v151 - 16);
                uint64_t v186 = v181 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v187 = *v185;
                  *(v184 - 1) = *(v185 - 1);
                  *int32x2_t v184 = v187;
                  v184 -= 2;
                  v185 -= 2;
                  v186 -= 8;
                }
                while (v186);
                __int16 v151 = v183;
                if (v181 != (v181 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_333:
                  do
                  {
LABEL_179:
                    int v188 = *((_DWORD *)v151 - 1);
                    v151 -= 4;
                    *((_DWORD *)v162 - 1) = v188;
                    v162 -= 4;
                  }
                  while (v151 != v148);
                }
              }
              v163[43] = v162;
              v163[44] = &v161[v166];
              v163[45] = &v164[v165];
              if (v148) {
                operator delete(v148);
              }
            }
          }
          sub_A3E96C((uint64_t)v291, v154, 0);
          unsigned int v120 = v286;
          unint64_t v144 = v288;
          goto LABEL_183;
        }
        v1 = a1;
        if ((v146 & v147) != 0) {
          goto LABEL_142;
        }
LABEL_253:
        *(void *)(v145 + 8 * v144) = v146 | v147;
        __int16 v235 = (char *)v1[50];
        unint64_t v234 = v1[51];
        if ((unint64_t)v235 < v234)
        {
          *(_DWORD *)__int16 v235 = v120;
          uint64_t v236 = (uint64_t)(v235 + 4);
          goto LABEL_276;
        }
        unsigned int v237 = (char *)*v283;
        uint64_t v238 = v235 - (unsigned char *)*v283;
        uint64_t v239 = v238 >> 2;
        unint64_t v240 = (v238 >> 2) + 1;
        if (v240 >> 62) {
          goto LABEL_326;
        }
        uint64_t v241 = v234 - (void)v237;
        if (v241 >> 1 > v240) {
          unint64_t v240 = v241 >> 1;
        }
        if ((unint64_t)v241 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v242 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v242 = v240;
        }
        unint64_t v290 = v144;
        if (v242)
        {
          if (!(v242 >> 62))
          {
            unsigned int v243 = v120;
            unsigned __int16 v244 = operator new(4 * v242);
            unsigned int v120 = v243;
            uint64_t v245 = (unsigned int *)&v244[4 * v239];
            *uint64_t v245 = v243;
            uint64_t v236 = (uint64_t)(v245 + 1);
            if (v235 != v237) {
              goto LABEL_264;
            }
            goto LABEL_273;
          }
LABEL_325:
          sub_188D718();
        }
        unsigned __int16 v244 = 0;
        uint64_t v245 = (unsigned int *)(4 * v239);
        *(_DWORD *)(4 * v239) = v120;
        uint64_t v236 = 4 * v239 + 4;
        if (v235 != v237)
        {
LABEL_264:
          unint64_t v246 = v235 - 4 - v237;
          if (v246 < 0x2C) {
            goto LABEL_334;
          }
          if ((unint64_t)(v235 - &v244[v238]) < 0x20) {
            goto LABEL_334;
          }
          uint64_t v247 = (v246 >> 2) + 1;
          uint64_t v248 = 4 * (v247 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v249 = &v235[-v248];
          uint64_t v245 = (unsigned int *)((char *)v245 - v248);
          unint64_t v250 = &v244[4 * v239 - 16];
          unint64_t v251 = v235 - 16;
          uint64_t v252 = v247 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v253 = *(_OWORD *)v251;
            *(v250 - 1) = *((_OWORD *)v251 - 1);
            _OWORD *v250 = v253;
            v250 -= 2;
            v251 -= 32;
            v252 -= 8;
          }
          while (v252);
          __int16 v235 = v249;
          if (v247 != (v247 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_334:
            do
            {
              unsigned int v254 = *((_DWORD *)v235 - 1);
              v235 -= 4;
              *--uint64_t v245 = v254;
            }
            while (v235 != v237);
          }
        }
LABEL_273:
        v1 = a1;
        a1[49] = v245;
        a1[50] = v236;
        a1[51] = &v244[4 * v242];
        if (v237)
        {
          unsigned int v255 = v120;
          operator delete(v237);
          unsigned int v120 = v255;
        }
        unint64_t v144 = v290;
LABEL_276:
        v1[50] = v236;
        int v148 = (unsigned char *)v1[43];
        if (*(_DWORD *)&v148[4 * v143] > v142) {
          goto LABEL_143;
        }
LABEL_208:
        unint64_t v11 = (unint64_t)v298;
        unint64_t v10 = v297 + 2;
        uint64_t v297 = v10;
        if (v10 == v298)
        {
          unint64_t v211 = v295 + 2;
          int v295 = v211;
          if ((unint64_t)v211 >= v296) {
            goto LABEL_6;
          }
          while (1)
          {
            unint64_t v10 = (void *)*v211;
            unint64_t v11 = v211[1];
            if (*v211 != v11) {
              break;
            }
            v211 += 2;
            int v295 = v211;
            if ((unint64_t)v211 >= v296) {
              goto LABEL_6;
            }
          }
          uint64_t v297 = (void *)*v211;
          unint64_t v298 = (void *)v11;
          if ((unint64_t)v10 < v11)
          {
            while (1)
            {
LABEL_281:
              if (!v300)
              {
                uint64_t v256 = v294[0];
                uint64_t v257 = *v10;
                uint64_t v258 = *(void *)(v294[0] + 4136);
                if (sub_C259C0(v258 + 3896))
                {
                  if (*(void *)(v258 + 3944))
                  {
                    unint64_t v259 = __ROR8__(v257, 32);
                    if (!sub_A10E20((void *)(v256 + 4136), SHIDWORD(v259)))
                    {
                      uint64_t v260 = *(void **)(*(void *)(v256 + 4136) + 3944);
                      int8x8_t v261 = (int8x8_t)v260[1];
                      if (v261)
                      {
                        unint64_t v262 = 0xC4CEB9FE1A85EC53
                             * ((0xFF51AFD7ED558CCDLL * (v259 ^ (v259 >> 33))) ^ ((0xFF51AFD7ED558CCDLL
                                                                                 * (v259 ^ (v259 >> 33))) >> 33));
                        unint64_t v263 = v262 ^ (v262 >> 33);
                        uint8x8_t v264 = (uint8x8_t)vcnt_s8(v261);
                        v264.i16[0] = vaddlv_u8(v264);
                        if (v264.u32[0] > 1uLL)
                        {
                          unint64_t v265 = v263;
                          if (v263 >= *(void *)&v261) {
                            unint64_t v265 = v263 % *(void *)&v261;
                          }
                        }
                        else
                        {
                          unint64_t v265 = (*(void *)&v261 - 1) & v263;
                        }
                        uint8x8_t v268 = *(uint64_t ***)(*v260 + 8 * v265);
                        if (v268)
                        {
                          unint64_t v269 = *v268;
                          if (v269)
                          {
                            if (v264.u32[0] < 2uLL)
                            {
                              uint64_t v270 = *(void *)&v261 - 1;
                              while (1)
                              {
                                uint64_t v274 = v269[1];
                                if (v263 == v274)
                                {
                                  if (*((_DWORD *)v269 + 5) == HIDWORD(v259) && *((_DWORD *)v269 + 4) == v259) {
                                    goto LABEL_278;
                                  }
                                }
                                else if ((v274 & v270) != v265)
                                {
                                  goto LABEL_317;
                                }
                                unint64_t v269 = (uint64_t *)*v269;
                                if (!v269) {
                                  goto LABEL_317;
                                }
                              }
                            }
                            do
                            {
                              unint64_t v272 = v269[1];
                              if (v263 == v272)
                              {
                                if (*((_DWORD *)v269 + 5) == HIDWORD(v259) && *((_DWORD *)v269 + 4) == v259)
                                {
LABEL_278:
                                  unint64_t v10 = v297;
                                  goto LABEL_279;
                                }
                              }
                              else
                              {
                                if (v272 >= *(void *)&v261) {
                                  v272 %= *(void *)&v261;
                                }
                                if (v272 != v265) {
                                  break;
                                }
                              }
                              unint64_t v269 = (uint64_t *)*v269;
                            }
                            while (v269);
                          }
                        }
                      }
                    }
                  }
                }
              }
LABEL_317:
              if (v299) {
                break;
              }
              unsigned int v275 = sub_C2599C(v294[0] + 3896);
              unint64_t v10 = v297;
              if (v275 >= *((unsigned __int8 *)v297 + 14))
              {
                if (v299) {
                  goto LABEL_8;
                }
                char v276 = sub_51D60((unsigned __int8 *)(v294[0] + 3896));
                unint64_t v10 = v297;
                if ((v276 & 1) != 0 || (*((unsigned char *)v297 + 15) & 1) == 0) {
                  goto LABEL_8;
                }
              }
LABEL_279:
              v10 += 2;
              uint64_t v297 = v10;
              if (v10 == v298)
              {
                uint64_t v266 = v295 + 2;
                int v295 = v266;
                if ((unint64_t)v266 >= v296) {
                  goto LABEL_8;
                }
                while (1)
                {
                  unint64_t v10 = (void *)*v266;
                  unint64_t v267 = v266[1];
                  if (*v266 != v267) {
                    break;
                  }
                  v266 += 2;
                  int v295 = v266;
                  if ((unint64_t)v266 >= v296) {
                    goto LABEL_6;
                  }
                }
                uint64_t v297 = (void *)*v266;
                unint64_t v298 = (void *)v267;
                if ((unint64_t)v10 >= v267) {
                  goto LABEL_8;
                }
              }
              else if (v10 >= v298)
              {
                goto LABEL_8;
              }
            }
            unint64_t v10 = v297;
            goto LABEL_8;
          }
        }
        else if (v10 < v298)
        {
          goto LABEL_281;
        }
        goto LABEL_9;
      }
LABEL_13:
      ++v12;
    }
  }
}

BOOL sub_AE2B6C(uint64_t a1)
{
  if (*(void *)a1 == -1) {
    return 0;
  }
  uint64_t v25 = *(void *)(a1 + 192);
  uint64_t v26 = *(void *)(a1 + 208);
  uint64_t v23 = 12 * *(void *)(a1 + 176);
  uint64_t v24 = 8 * (*(void *)(a1 + 232) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v2 = 8 * (*(void *)(a1 + 264) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v3 = *(void *)(a1 + 288);
  uint64_t v21 = *(void *)(a1 + 320);
  uint64_t v22 = *(void *)(a1 + 272);
  uint64_t v4 = 8 * (*(void *)(a1 + 312) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v5 = *(void *)(a1 + 360);
  uint64_t v6 = *(void *)(a1 + 336);
  uint64_t v19 = *(void *)(a1 + 392);
  uint64_t v20 = *(void *)(a1 + 344);
  uint64_t v7 = 8 * (*(void *)(a1 + 384) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v8 = *(void *)(a1 + 408);
  uint64_t v9 = sub_BD6170((void *)(a1 + 424));
  uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 104)
      - *(void *)(*(void *)(a1 + 32) + 88)
      + *(void *)(*(void *)(a1 + 40) + 104)
      + 12 * (*(void *)(*(void *)(a1 + 40) + 72) + *(void *)(*(void *)(a1 + 32) + 72))
      - *(void *)(*(void *)(a1 + 40) + 88);
  uint64_t v11 = *(void *)(a1 + 48);
  if (v11) {
    v10 += 8 * *(void *)(v11 + 80);
  }
  unint64_t v31 = v23
      + v26
      - v25
      + v24
      + v3
      + v2
      - v22
      + v6
      + v4
      + v5
      - (v21
       + v20)
      + v7
      + v8
      - v19
      + sub_A409C0(*(uint64_t **)(a1 + 24))
      + v9
      + v10;
  BOOL v12 = v31 > *(void *)a1;
  if (v31 > *(void *)a1 && sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v29);
    unint64_t v13 = sub_188FC78(v29, (uint64_t)"Exceeded memory limit of ", 25);
    uint64_t v14 = (void *)sub_38EC58((uint64_t)v13, (unint64_t *)a1);
    uint64_t v15 = sub_188FC78(v14, (uint64_t)" in directional McSPA (", 23);
    unint64_t v16 = (void *)sub_38EC58((uint64_t)v15, &v31);
    unint64_t v17 = sub_188FC78(v16, (uint64_t)") in round ", 11);
    std::ostream::operator<<();
    sub_188FC78(v17, (uint64_t)"; terminating algorithm.", 24);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v28 < 0) {
      operator delete(__p);
    }
    if (v30 < 0) {
      operator delete((void *)v29[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return v12;
}

void sub_AE2E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a24 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a25);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_AE2EBC(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 100);
  if (v1)
  {
    uint64_t v2 = result;
    int v3 = 0;
    uint64_t v4 = (void *)(result + 104);
    do
    {
      unsigned int v15 = 0;
      uint64_t v5 = *(void *)(v2 + 192);
      uint64_t v6 = (char *)(v5 + ((unint64_t)*(unsigned int *)(sub_AE36B4((uint64_t)v4, &v15) + 4) << 6));
      unsigned int v15 = 0;
      uint64_t v7 = *(void *)(v2 + 192);
      uint64_t v8 = sub_AE36B4((uint64_t)v4, &v15);
      sub_AE32F0((uint64_t)v4, 0, v6, (unsigned char *)(v7 + ((unint64_t)*(unsigned int *)(v8 + 8) << 6)));
      sub_AE5660(v4, v3 + *(_DWORD *)(v2 + 96) + *(_DWORD *)(v2 + 96) * *(_DWORD *)(v2 + 416) + 2, 0);
      unsigned int v15 = 0;
      uint64_t v9 = *(void *)(v2 + 192);
      uint64_t v10 = v9 + ((unint64_t)*(unsigned int *)(sub_AE36B4((uint64_t)v4, &v15) + 4) << 6);
      unsigned int v15 = 0;
      uint64_t v11 = *(void *)(v2 + 192);
      double result = sub_AE36B4((uint64_t)v4, &v15);
      uint64_t v12 = v11 + ((unint64_t)*(unsigned int *)(result + 8) << 6);
      if (v10 != v12)
      {
        double v13 = *(double *)(v2 + 592);
        uint64_t v14 = *(void *)(v2 + 584);
        do
        {
          double v13 = v13 + 1.0;
          v14 += *(int *)(v10 + 28);
          v10 += 64;
        }
        while (v10 != v12);
        *(double *)(v2 + 592) = v13;
        *(void *)(v2 + 584) = v14;
      }
      ++v3;
    }
    while (v3 != v1);
  }
  return result;
}

uint64_t sub_AE2FF4(void *a1, long long *a2, unsigned int a3, int a4, int a5)
{
  unsigned int v28 = a3;
  sub_AE51B4(a1, &v28, v24);
  uint64_t v10 = a1[6];
  uint64_t v11 = a1[7];
  unsigned int v15 = a1;
  uint64_t v16 = v10;
  uint64_t v17 = v11;
  uint64_t v18 = v11;
  uint64_t v19 = 0;
  uint64_t v20 = v10;
  uint64_t v21 = v11;
  uint64_t v22 = v11;
  uint64_t v23 = 0;
  sub_AE47A0(&v15);
  if (v24[1] == v16 && v25 == v17 && v26 == v18 && (v26 == v25 || v27 == v19)
    || *(_DWORD *)(v27 + 8) == *(_DWORD *)(v27 + 4))
  {
    sub_AE4980((uint64_t)a1, a3, a2);
    return 1;
  }
  else
  {
    __int16 v13 = sub_AE4E28((uint64_t)a1, (uint64_t)a2, a3, a4, a5);
    char v14 = v13;
    if ((v13 & 0x100) != 0) {
      sub_AE50A8((uint64_t)a1, a3);
    }
    return v14 & 1;
  }
}

BOOL sub_AE3124(void *a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  unsigned int v37 = a2;
  sub_AE51B4(a1, &v37, v34);
  uint64_t v12 = a1[6];
  uint64_t v13 = a1[7];
  uint64_t v26 = a1;
  *(void *)&long long v27 = v12;
  *((void *)&v27 + 1) = v13;
  uint64_t v28 = v13;
  uint64_t v29 = 0;
  uint64_t v30 = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v13;
  uint64_t v33 = 0;
  sub_AE47A0(&v26);
  if (*(_OWORD *)&v34[8] == v27
    && *(void *)&v34[24] == v28
    && (*(void *)&v34[24] == *(void *)&v34[16] || (void)v35 == v29))
  {
    goto LABEL_7;
  }
  int v14 = *(_DWORD *)(v35 + 4);
  int v15 = *(_DWORD *)(v35 + 8);
  int v16 = v15 - v14;
  if (v15 == v14) {
    goto LABEL_7;
  }
  if (a6 == 0x7FFFFFFF)
  {
    unsigned int v17 = 0;
    do
      sub_AE5380(a1, a2, v17++);
    while (v16 != v17);
LABEL_7:
    LOBYTE(v18) = 0;
    return v18 != 0;
  }
  __int16 v18 = 0;
  unsigned int v20 = 0;
  do
  {
    uint64_t v21 = (_OWORD *)sub_AE5380(a1, a2, v20);
    long long v22 = v21[2];
    long long v23 = v21[3];
    long long v24 = v21[1];
    *(_OWORD *)uint64_t v34 = *v21;
    *(_OWORD *)&v34[16] = v24;
    long long v35 = v22;
    long long v36 = v23;
    if (SHIDWORD(v24) <= a6)
    {
      __int16 v25 = sub_AE54E0((uint64_t)a1, v34, a3, a4, a5);
      __int16 v18 = v25 | v18 | (v25 | v18) & 0xFF00;
    }
    ++v20;
  }
  while (v16 != v20);
  if ((v18 & 0xFF00) != 0)
  {
    sub_AE50A8((uint64_t)a1, a3);
    sub_AE50A8((uint64_t)a1, a4);
  }
  return v18 != 0;
}

char *sub_AE32F0(uint64_t a1, unsigned int a2, char *a3, unsigned char *a4)
{
  unsigned int v49 = a2;
  uint64_t v7 = sub_AE36B4(a1, &v49);
  unsigned int v50 = v49;
  uint64_t v8 = *(void *)(a1 + 88);
  if ((unsigned char *)(v8 + ((unint64_t)*(unsigned int *)(sub_AE36B4(a1, &v50) + 8) << 6)) == a4)
  {
    uint64_t v26 = *(void *)(a1 + 112);
    uint64_t v27 = *(void *)(a1 + 88);
    unint64_t v28 = (uint64_t)&a3[-v27] >> 6;
    if ((uint64_t)&a3[-v27] <= -64) {
      uint64_t v29 = -(uint64_t)((63 - v28) >> 6);
    }
    else {
      uint64_t v29 = v28 >> 6;
    }
    uint64_t v30 = (void *)(v26 + 8 * v29);
    uint64_t v31 = (uint64_t)&a4[-v27];
    uint64_t v32 = v31 >> 6;
    if (v31 <= -64) {
      unint64_t v33 = -(uint64_t)((unint64_t)(63 - (v31 >> 6)) >> 6);
    }
    else {
      unint64_t v33 = (unint64_t)(v31 >> 6) >> 6;
    }
    unint64_t v34 = (v32 & 0x3F) - (v28 & 0x3F) + 8 * (v26 + 8 * v33 - (void)v30);
    if (v34)
    {
      if ((v28 & 0x3F) != 0)
      {
        if (64 - (v28 & 0x3F) >= v34) {
          uint64_t v35 = (v32 & 0x3F) - (v28 & 0x3F) + 8 * (v26 + 8 * v33 - (void)v30);
        }
        else {
          uint64_t v35 = 64 - (v28 & 0x3F);
        }
        *v30++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - (v28 & 0x3Fu) - v35)) & (-1 << (v28 & 0x3F)));
        v34 -= v35;
      }
      if (v34 >= 0x40) {
        bzero(v30, 8 * (v34 >> 6));
      }
      if ((v34 & 0x3F) != 0) {
        v30[v34 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v34 & 0x3F));
      }
    }
    *(_DWORD *)(v7 + 8) = v28;
  }
  else
  {
    unsigned int v50 = v49;
    uint64_t v9 = *(void *)(a1 + 88);
    if ((char *)(v9 + ((unint64_t)*(unsigned int *)(sub_AE36B4(a1, &v50) + 4) << 6)) == a3)
    {
      uint64_t v36 = *(void *)(a1 + 88);
      unint64_t v37 = (uint64_t)&a3[-v36] >> 6;
      if ((uint64_t)&a3[-v36] <= -64) {
        uint64_t v38 = -(uint64_t)((63 - v37) >> 6);
      }
      else {
        uint64_t v38 = v37 >> 6;
      }
      BOOL v39 = (void *)(*(void *)(a1 + 112) + 8 * v38);
      uint64_t v40 = (uint64_t)&a4[-v36];
      uint64_t v41 = v40 >> 6;
      if (v40 <= -64) {
        unint64_t v42 = -(uint64_t)((unint64_t)(63 - (v40 >> 6)) >> 6);
      }
      else {
        unint64_t v42 = (unint64_t)(v40 >> 6) >> 6;
      }
      char v43 = v37 & 0x3F;
      unint64_t v44 = (v41 & 0x3F) - (v37 & 0x3F) + 8 * (8 * v42 - 8 * v38);
      if (v44)
      {
        int v45 = v37 & 0x3F;
        if (v45)
        {
          unint64_t v46 = (64 - v45);
          if (v46 >= v44) {
            unint64_t v47 = v44;
          }
          else {
            unint64_t v47 = v46;
          }
          *v39++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (v46 - v47)) & (-1 << v43));
          v44 -= v47;
        }
        if (v44 >= 0x40) {
          bzero(v39, 8 * (v44 >> 6));
        }
        if ((v44 & 0x3F) != 0) {
          v39[v44 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v44 & 0x3F));
        }
      }
      *(_DWORD *)(v7 + 4) = v41;
      return a4;
    }
    else
    {
      unsigned int v50 = v49;
      uint64_t v10 = *(void *)(a1 + 88);
      uint64_t v11 = (unsigned char *)(v10 + ((unint64_t)*(unsigned int *)(sub_AE36B4(a1, &v50) + 8) << 6));
      int64_t v12 = v11 - a4;
      if (v11 != a4) {
        memmove(a3, a4, v11 - a4);
      }
      uint64_t v13 = &a3[v12];
      uint64_t v14 = *(void *)(a1 + 112);
      uint64_t v15 = *(void *)(a1 + 88);
      unint64_t v16 = (uint64_t)&v13[-v15] >> 6;
      if ((uint64_t)&v13[-v15] <= -64) {
        uint64_t v17 = -(uint64_t)((63 - v16) >> 6);
      }
      else {
        uint64_t v17 = v16 >> 6;
      }
      __int16 v18 = (void *)(v14 + 8 * v17);
      unsigned int v50 = v49;
      uint64_t v19 = v15 + ((unint64_t)*(unsigned int *)(sub_AE36B4(a1, &v50) + 8) << 6);
      uint64_t v20 = *(void *)(a1 + 88);
      uint64_t v21 = v19 - v20;
      uint64_t v22 = v21 >> 6;
      if (v21 <= -64) {
        unint64_t v23 = -(uint64_t)((unint64_t)(63 - (v21 >> 6)) >> 6);
      }
      else {
        unint64_t v23 = (unint64_t)(v21 >> 6) >> 6;
      }
      unint64_t v24 = (v22 & 0x3F) - (v16 & 0x3F) + 8 * (v14 + 8 * v23 - (void)v18);
      if (v24)
      {
        if ((v16 & 0x3F) != 0)
        {
          if (64 - (v16 & 0x3F) >= v24) {
            unint64_t v25 = v24;
          }
          else {
            unint64_t v25 = 64 - (v16 & 0x3F);
          }
          *v18++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - (v16 & 0x3Fu) - v25)) & (-1 << (v16 & 0x3F)));
          v24 -= v25;
        }
        if (v24 >= 0x40) {
          bzero(v18, 8 * (v24 >> 6));
        }
        if ((v24 & 0x3F) != 0) {
          v18[v24 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v24 & 0x3F));
        }
      }
      *(_DWORD *)(v7 + 8) = (unint64_t)&v13[-v20] >> 6;
    }
  }
  return a3;
}

uint64_t sub_AE36B4(uint64_t a1, unsigned int *a2)
{
  unint64_t v4 = sub_AE3914(a1, a2);
  if (v4 == -1)
  {
    unint64_t v25 = v5;
    if (sub_AE3D08(a1, 1))
    {
      *(_DWORD *)unint64_t v34 = *a2;
      *(void *)&v34[4] = 0;
      uint64_t v36 = *(void *)v34;
      int v37 = 0;
      sub_AE403C(a1, (unsigned int *)&v36, (uint64_t)v34);
    }
    else
    {
      *(_DWORD *)unint64_t v34 = *a2;
      *(void *)&v34[4] = 0;
      uint64_t v36 = *(void *)v34;
      int v37 = 0;
      sub_AE425C(a1, &v36, v25, v34);
    }
    return v35;
  }
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v6 = *(uint64_t **)(a1 + 56);
  unint64_t v8 = v4 / 0x30;
  uint64_t v9 = (uint64_t *)(v7 + 16 * (v4 / 0x30));
  uint64_t v11 = (unsigned __int8 *)v9 + 10;
  uint64_t v10 = *v9;
  int v12 = v4 % 0x30;
  if ((unsigned __int16)(v4 % 0x30) < 9u)
  {
    __int16 v15 = 0;
    goto LABEL_16;
  }
  unsigned __int16 v13 = v12 - 9;
  unsigned __int16 v14 = v4 % 0x30 - 9;
  __int16 v15 = 0;
  uint64_t v16 = v14 >> 3;
  if (v16)
  {
    __int16 v17 = 0;
    uint64_t v18 = v16 + 1;
    uint64_t v19 = (v16 + 1) & 0x3FFE;
    LOWORD(v12) = v12 - 8 * v19;
    uint64_t v20 = &v11[v19];
    uint64_t v21 = (unsigned __int8 *)(v7 + 16 * v8 + 11);
    uint64_t v22 = v19;
    do
    {
      uint64_t v23 = *(v21 - 1);
      int v24 = *v21;
      v21 += 2;
      v15 += byte_20EBEB6[v23];
      v17 += byte_20EBEB6[v24];
      v22 -= 2;
    }
    while (v22);
    v15 += v17;
    if (v18 == v19) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v20 = (unsigned __int8 *)v9 + 10;
  }
  do
  {
    int v27 = *v20++;
    v15 += byte_20EBEB6[v27];
    LOWORD(v12) = v12 - 8;
  }
  while ((unsigned __int16)v12 > 8u);
LABEL_15:
  v11 += (v13 >> 3) + 1;
LABEL_16:
  unsigned __int16 v28 = v15 + byte_20EBEB6[~(-1 << v12) & (unint64_t)*v11];
  int v29 = *((unsigned __int16 *)v9 + 4);
  uint64_t v30 = v9 + 2;
  if (v29 != v28 || v30 == v6) {
    return v10 + 12 * v28;
  }
  uint64_t v32 = v7 + 16 * v8 + 32;
  do
  {
    if (*(_WORD *)(v32 - 8)) {
      BOOL v33 = 1;
    }
    else {
      BOOL v33 = v32 == (void)v6;
    }
    v32 += 16;
  }
  while (!v33);
  return *(void *)(v32 - 32);
}

unint64_t sub_AE3914(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = *(void *)(a1 + 72) - 1;
  uint64_t v4 = *a2;
  unint64_t result = v3 & v4;
  uint64_t v6 = *(void *)(a1 + 48);
  unint64_t v7 = (v3 & v4) / 0x30uLL;
  LODWORD(v8) = (v3 & v4) % 0x30;
  if ((*(unsigned __int8 *)(v6 + 16 * v7 + (v8 >> 3) + 10) >> (v8 & 7)))
  {
    if (*(void *)(a1 + 40))
    {
      uint64_t v9 = 0;
      uint64_t v10 = v6 + 11;
      int v11 = *(_DWORD *)(a1 + 32);
      uint64_t v12 = -1;
      while (1)
      {
        unsigned __int16 v13 = (uint64_t *)(v6 + 16 * v7);
        uint64_t v16 = *v13;
        __int16 v15 = (unsigned __int8 *)v13 + 10;
        uint64_t v14 = v16;
        if ((unsigned __int16)v8 < 9u)
        {
          __int16 v18 = 0;
          uint64_t v21 = v15;
          LOBYTE(v19) = v8;
          goto LABEL_16;
        }
        uint64_t v17 = ((unsigned __int16)(v8 - 9) >> 3) + 1;
        if ((unsigned __int16)(v8 - 9) >= 8u)
        {
          __int16 v22 = 0;
          __int16 v23 = 0;
          unsigned __int16 v19 = v8 - 8 * ((((unsigned __int16)(v8 - 9) >> 3) + 1) & 0x3FFE);
          uint64_t v20 = &v15[(((unsigned __int16)(v8 - 9) >> 3) + 1) & 0x3FFE];
          uint64_t v24 = (((unsigned __int16)(v8 - 9) >> 3) + 1) & 0x3FFE;
          unint64_t v25 = (unsigned __int8 *)(v10 + 16 * v7);
          do
          {
            uint64_t v26 = *(v25 - 1);
            unsigned int v27 = *v25;
            v25 += 2;
            v22 += byte_20EBEB6[v26];
            v23 += byte_20EBEB6[v27];
            v24 -= 2;
          }
          while (v24);
          __int16 v18 = v23 + v22;
          if ((v17 & 0x3FFE) == v17) {
            goto LABEL_15;
          }
        }
        else
        {
          __int16 v18 = 0;
          unsigned __int16 v19 = v8;
          uint64_t v20 = v15;
        }
        do
        {
          unsigned int v28 = *v20++;
          v18 += byte_20EBEB6[v28];
          v19 -= 8;
        }
        while (v19 > 8u);
LABEL_15:
        uint64_t v21 = &v15[v17];
LABEL_16:
        if (v11 == *(_DWORD *)(v14
                              + 12
                              * (unsigned __int16)(v18
                                                 + byte_20EBEB6[~(-1 << v19) & (unint64_t)*v21])))
        {
          if (v12 == -1) {
            uint64_t v12 = result;
          }
          goto LABEL_6;
        }
        if ((unsigned __int16)v8 < 9u)
        {
          __int16 v30 = 0;
          goto LABEL_26;
        }
        uint64_t v29 = ((unsigned __int16)(v8 - 9) >> 3) + 1;
        if ((unsigned __int16)(v8 - 9) >= 8u)
        {
          __int16 v32 = 0;
          __int16 v33 = 0;
          LOWORD(v8) = v8 - 8 * ((((unsigned __int16)(v8 - 9) >> 3) + 1) & 0x3FFE);
          uint64_t v31 = &v15[v29 & 0x3FFE];
          uint64_t v34 = v29 & 0x3FFE;
          uint64_t v35 = (unsigned __int8 *)(v10 + 16 * v7);
          do
          {
            uint64_t v36 = *(v35 - 1);
            unsigned int v37 = *v35;
            v35 += 2;
            v32 += byte_20EBEB6[v36];
            v33 += byte_20EBEB6[v37];
            v34 -= 2;
          }
          while (v34);
          __int16 v30 = v33 + v32;
          if ((v29 & 0x3FFE) == v29) {
            goto LABEL_25;
          }
        }
        else
        {
          __int16 v30 = 0;
          uint64_t v31 = v15;
        }
        do
        {
          unsigned int v38 = *v31++;
          v30 += byte_20EBEB6[v38];
          LOWORD(v8) = v8 - 8;
        }
        while ((unsigned __int16)v8 > 8u);
LABEL_25:
        v15 += v29;
LABEL_26:
        if (v4 == *(_DWORD *)(v14
                                     + 12
                                     * (unsigned __int16)(v30
                                                        + byte_20EBEB6[~(-1 << v8) & (unint64_t)*v15])))
          return result;
LABEL_6:
        unint64_t result = (++v9 + result) & v3;
        unint64_t v7 = result / 0x30;
        unint64_t v8 = result % 0x30;
        if (((*(unsigned __int8 *)(v6 + 16 * (result / 0x30) + (v8 >> 3) + 10) >> (v8 & 7)) & 1) == 0) {
          return -1;
        }
      }
    }
    uint64_t v39 = 0;
    LODWORD(v40) = (v3 & v4) % 0x30;
    while (1)
    {
      uint64_t v41 = (uint64_t *)(v6 + 16 * v7);
      uint64_t v44 = *v41;
      char v43 = (unsigned __int8 *)v41 + 10;
      uint64_t v42 = v44;
      if ((unsigned __int16)v40 >= 9u) {
        break;
      }
      __int16 v46 = 0;
LABEL_39:
      if (v4 == *(_DWORD *)(v42
                                   + 12
                                   * (unsigned __int16)(v46
                                                      + byte_20EBEB6[~(-1 << v40) & (unint64_t)*v43])))
        return result;
      unint64_t result = (++v39 + result) & v3;
      unint64_t v7 = result / 0x30;
      unint64_t v40 = result % 0x30;
      if (((*(unsigned __int8 *)(v6 + 16 * (result / 0x30) + (v40 >> 3) + 10) >> (v40 & 7)) & 1) == 0) {
        return -1;
      }
    }
    uint64_t v45 = ((unsigned __int16)(v40 - 9) >> 3) + 1;
    if ((unsigned __int16)(v40 - 9) >= 8u)
    {
      __int16 v48 = 0;
      __int16 v49 = 0;
      LOWORD(v40) = v40 - 8 * ((((unsigned __int16)(v40 - 9) >> 3) + 1) & 0x3FFE);
      unint64_t v47 = &v43[v45 & 0x3FFE];
      uint64_t v50 = v45 & 0x3FFE;
      uint64_t v51 = (unsigned __int8 *)(v6 + 11 + 16 * v7);
      do
      {
        uint64_t v52 = *(v51 - 1);
        unsigned int v53 = *v51;
        v51 += 2;
        v48 += byte_20EBEB6[v52];
        v49 += byte_20EBEB6[v53];
        v50 -= 2;
      }
      while (v50);
      __int16 v46 = v49 + v48;
      if ((v45 & 0x3FFE) == v45) {
        goto LABEL_38;
      }
    }
    else
    {
      __int16 v46 = 0;
      unint64_t v47 = v43;
    }
    do
    {
      unsigned int v54 = *v47++;
      v46 += byte_20EBEB6[v54];
      LOWORD(v40) = v40 - 8;
    }
    while ((unsigned __int16)v40 > 8u);
LABEL_38:
    v43 += v45;
    goto LABEL_39;
  }
  return -1;
}

uint64_t sub_AE3D08(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t result = sub_AE45AC(a1);
    unint64_t v5 = *(void *)(a1 + 80);
    if (v5 >= ~a2) {
      goto LABEL_32;
    }
  }
  else
  {
    uint64_t result = 0;
    unint64_t v5 = *(void *)(a1 + 80);
    if (v5 >= ~a2) {
      goto LABEL_32;
    }
  }
  unint64_t v6 = *(void *)(a1 + 72);
  unint64_t v7 = v5 + a2;
  if (v6 < 4 || v7 > *(void *)a1)
  {
    float v8 = *(float *)(a1 + 16);
    if (v7 >= vcvts_n_u32_f32(v8, 2uLL))
    {
      unint64_t v9 = 4;
      while ((v9 & 0x8000000000000000) == 0)
      {
        v9 *= 2;
        if (v7 < (unint64_t)(float)(v8 * (float)v9)) {
          goto LABEL_12;
        }
      }
LABEL_32:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_2E18(exception, "resize overflow");
    }
    unint64_t v9 = 4;
LABEL_12:
    if (v9 > v6)
    {
      unint64_t v10 = v5 - *(void *)(a1 + 40) + a2;
      unint64_t v11 = 4;
      if (v6 > 4) {
        goto LABEL_15;
      }
LABEL_14:
      if (v10 >= (unint64_t)(float)(v8 * (float)v11))
      {
LABEL_15:
        while ((v11 & 0x8000000000000000) == 0)
        {
          v11 *= 2;
          if (v11 >= v6) {
            goto LABEL_14;
          }
        }
        goto LABEL_32;
      }
      if (v11 < v9
        && v11 <= 0x7FFFFFFFFFFFFFFELL
        && v10 >= (unint64_t)(float)(*(float *)(a1 + 20) * (float)(2 * v11)))
      {
        v11 *= 2;
      }
      long long v29 = *(_OWORD *)(a1 + 16);
      int v30 = *(_DWORD *)(a1 + 32);
      memset(v31, 0, sizeof(v31));
      long long v32 = 0u;
      uint64x2_t v28 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_f32(*(float32x2_t *)&v29, 0)));
      BYTE8(v29) = 0;
      sub_ACEB8C((uint64_t)&v28, 0, (void *)a1, v11);
      int v12 = *(_DWORD *)(a1 + 32);
      *(_DWORD *)(a1 + 32) = v30;
      int v30 = v12;
      unsigned __int16 v13 = *(void **)(a1 + 40);
      uint64_t v14 = *(char **)(a1 + 48);
      *(void **)(a1 + 40) = v31[0];
      uint64x2_t v16 = *(uint64x2_t *)a1;
      long long v15 = *(_OWORD *)(a1 + 16);
      long long v17 = v29;
      *(uint64x2_t *)a1 = v28;
      *(_OWORD *)(a1 + 16) = v17;
      uint64x2_t v28 = v16;
      long long v29 = v15;
      long long v18 = *(_OWORD *)&v31[1];
      v31[0] = v13;
      v31[1] = v14;
      unsigned __int16 v19 = v31[3];
      long long v20 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)(a1 + 48) = v18;
      *(void *)(a1 + 64) = v19;
      *(_OWORD *)&v31[2] = v20;
      *(void *)&long long v18 = v32;
      long long v21 = *(_OWORD *)(a1 + 72);
      *(_OWORD *)(a1 + 72) = v32;
      long long v32 = v21;
      *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)(unint64_t)v18)));
      *(unsigned char *)(a1 + 24) = 0;
      uint64x2_t v28 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v29, (float)(unint64_t)v21)));
      BYTE8(v29) = 0;
      if (v14)
      {
        __int16 v22 = (char *)v20;
        __int16 v23 = v14;
        if ((char *)v20 != v14)
        {
          uint64_t v24 = (char *)v20;
          do
          {
            uint64_t v26 = (void *)*((void *)v24 - 2);
            v24 -= 16;
            unint64_t v25 = v26;
            if (v26)
            {
              free(v25);
              *((void *)v22 - 2) = 0;
            }
            __int16 v22 = v24;
          }
          while (v24 != v14);
          __int16 v23 = (char *)v31[1];
        }
        v31[2] = v14;
        free(v23);
      }
      return 1;
    }
  }
  return result;
}

void sub_AE3FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    sub_20AE0F0((uint64_t)&a9, a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_AE4000(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AE4014(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AE4028(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 sub_AE403C@<Q0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = sub_AE3914(a1, a2);
  if (v6 == -1)
  {
    sub_AE425C(a1, (uint64_t *)a2, v7, &v33);
    long long v25 = v36;
    *(_OWORD *)(a3 + 32) = v35;
    *(_OWORD *)(a3 + 48) = v25;
    *(void *)(a3 + 64) = v37;
    __n128 result = v34;
    *(_OWORD *)a3 = v33;
    *(__n128 *)(a3 + 16) = result;
    *(unsigned char *)(a3 + 72) = 1;
    return result;
  }
  uint64_t v9 = *(void *)(a1 + 48);
  float v8 = *(uint64_t **)(a1 + 56);
  unint64_t v10 = v6 / 0x30;
  unint64_t v11 = v9 + 16 * (v6 / 0x30);
  int v12 = (unsigned __int8 *)(v11 + 10);
  int v13 = v6 % 0x30;
  if ((unsigned __int16)(v6 % 0x30) < 9u)
  {
    __int16 v15 = 0;
    goto LABEL_13;
  }
  unsigned __int16 v14 = v13 - 9;
  __int16 v15 = 0;
  uint64_t v16 = (unsigned __int16)(v6 % 0x30 - 9) >> 3;
  if ((unsigned __int16)(v6 % 0x30 - 9) >> 3)
  {
    __int16 v17 = 0;
    uint64_t v18 = v16 + 1;
    uint64_t v19 = (v16 + 1) & 0x3FFE;
    LOWORD(v13) = v13 - 8 * v19;
    long long v20 = &v12[v19];
    long long v21 = (unsigned __int8 *)(v9 + 16 * v10 + 11);
    uint64_t v22 = v19;
    do
    {
      uint64_t v23 = *(v21 - 1);
      int v24 = *v21;
      v21 += 2;
      v15 += byte_20EBEB6[v23];
      v17 += byte_20EBEB6[v24];
      v22 -= 2;
    }
    while (v22);
    v15 += v17;
    if (v18 == v19) {
      goto LABEL_12;
    }
  }
  else
  {
    long long v20 = (unsigned __int8 *)(v11 + 10);
  }
  do
  {
    int v27 = *v20++;
    v15 += byte_20EBEB6[v27];
    LOWORD(v13) = v13 - 8;
  }
  while ((unsigned __int16)v13 > 8u);
LABEL_12:
  v12 += (v14 >> 3) + 1;
LABEL_13:
  unsigned __int16 v28 = v15 + byte_20EBEB6[~(-1 << v13) & (unint64_t)*v12];
  uint64_t v29 = *(void *)v11 + 12 * v28;
  if (*(unsigned __int16 *)(v11 + 8) == v28)
  {
    unint64_t v30 = v11 + 16;
    unint64_t v11 = *(void *)(a1 + 56);
    if ((uint64_t *)v30 != v8)
    {
      while (1)
      {
        uint64_t v31 = (uint64_t *)v30;
        if (*(_WORD *)(v30 + 8)) {
          break;
        }
        v30 += 16;
        if (v31 + 2 == v8)
        {
          unint64_t v11 = *(void *)(a1 + 56);
          goto LABEL_19;
        }
      }
      unint64_t v11 = v30;
LABEL_19:
      uint64_t v29 = *v31;
    }
  }
  *(void *)&long long v33 = a1;
  *((void *)&v33 + 1) = v9;
  v34.n128_u64[0] = (unint64_t)v8;
  v34.n128_u64[1] = v11;
  *(void *)&long long v35 = v29;
  *((void *)&v35 + 1) = v9;
  *(void *)&long long v36 = v8;
  *((void *)&v36 + 1) = v8;
  uint64_t v37 = 0;
  sub_AE47A0(&v33);
  long long v32 = v36;
  *(_OWORD *)(a3 + 32) = v35;
  *(_OWORD *)(a3 + 48) = v32;
  *(void *)(a3 + 64) = v37;
  __n128 result = v34;
  *(_OWORD *)a3 = v33;
  *(__n128 *)(a3 + 16) = result;
  *(unsigned char *)(a3 + 72) = 0;
  return result;
}

void *sub_AE425C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 40);
  if ((unint64_t)(*(void *)(a1 + 80) - v5) >= 0x1555555555555555)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2E18(exception, "insert overflow");
  }
  if (!v5)
  {
    unint64_t v8 = a3 / 0x30;
    LODWORD(v10) = a3 % 0x30;
    goto LABEL_17;
  }
  unint64_t v8 = a3 / 0x30;
  uint64_t v9 = *(void *)(a1 + 48);
  unint64_t v10 = a3 % 0x30;
  unint64_t v11 = (uint64_t *)(v9 + 16 * (a3 / 0x30));
  if (((*((unsigned __int8 *)v11 + ((a3 % 0x30) >> 3) + 10) >> ((a3 % 0x30) & 7)) & 1) == 0) {
    goto LABEL_17;
  }
  uint64_t v14 = *v11;
  int v13 = (unsigned __int8 *)v11 + 10;
  uint64_t v12 = v14;
  if ((unsigned __int16)(a3 % 0x30) < 9u)
  {
    __int16 v15 = 0;
    unint64_t v16 = a3 % 0x30;
    goto LABEL_15;
  }
  __int16 v15 = 0;
  unint64_t v16 = (unsigned __int16)(a3 % 0x30 - 9) >> 3;
  if ((unsigned __int16)(a3 % 0x30 - 9) >> 3)
  {
    __int16 v17 = 0;
    unint64_t v18 = v16 + 1;
    uint64_t v19 = (v16 + 1) & 0x3FFE;
    LOWORD(v16) = v10 - 8 * v19;
    long long v20 = &v13[v19];
    long long v21 = (unsigned __int8 *)(v9 + 16 * v8 + 11);
    uint64_t v22 = v19;
    do
    {
      uint64_t v23 = *(v21 - 1);
      int v24 = *v21;
      v21 += 2;
      v15 += byte_20EBEB6[v23];
      v17 += byte_20EBEB6[v24];
      v22 -= 2;
    }
    while (v22);
    v15 += v17;
    if (v18 == v19) {
      goto LABEL_14;
    }
  }
  else
  {
    unint64_t v16 = a3 % 0x30;
    long long v20 = v13;
  }
  do
  {
    int v25 = *v20++;
    v15 += byte_20EBEB6[v25];
    LOWORD(v16) = v16 - 8;
  }
  while ((unsigned __int16)v16 > 8u);
LABEL_14:
  v13 += ((unsigned __int16)(v10 - 9) >> 3) + 1;
LABEL_15:
  if (*(_DWORD *)(a1 + 32) == *(_DWORD *)(v12
                                         + 12
                                         * (unsigned __int16)(v15
                                                            + byte_20EBEB6[~(-1 << v16) & (unint64_t)*v13])))
    *(void *)(a1 + 40) = v5 - 1;
LABEL_17:
  sub_ACF218((uint64_t *)(a1 + 48), a3, a2);
  uint64_t v27 = *(void *)(a1 + 48);
  uint64_t v26 = *(uint64_t **)(a1 + 56);
  uint64_t v28 = v27 + 16 * v8;
  uint64_t v29 = (unsigned __int8 *)(v28 + 10);
  if ((unsigned __int16)v10 >= 9u)
  {
    uint64_t v30 = ((unsigned __int16)(v10 - 9) >> 3) + 1;
    if ((unsigned __int16)(v10 - 9) >= 8u)
    {
      __int16 v33 = 0;
      __int16 v34 = 0;
      LOWORD(v10) = v10 - 8 * ((((unsigned __int16)(v10 - 9) >> 3) + 1) & 0x3FFE);
      long long v32 = &v29[v30 & 0x3FFE];
      long long v35 = (unsigned __int8 *)(v27 + 16 * v8 + 11);
      uint64_t v36 = v30 & 0x3FFE;
      do
      {
        uint64_t v37 = *(v35 - 1);
        int v38 = *v35;
        v35 += 2;
        v33 += byte_20EBEB6[v37];
        v34 += byte_20EBEB6[v38];
        v36 -= 2;
      }
      while (v36);
      __int16 v31 = v34 + v33;
      if ((v30 & 0x3FFE) == v30) {
        goto LABEL_25;
      }
    }
    else
    {
      __int16 v31 = 0;
      long long v32 = (unsigned __int8 *)(v28 + 10);
    }
    do
    {
      int v39 = *v32++;
      v31 += byte_20EBEB6[v39];
      LOWORD(v10) = v10 - 8;
    }
    while ((unsigned __int16)v10 > 8u);
LABEL_25:
    v29 += v30;
    goto LABEL_26;
  }
  __int16 v31 = 0;
LABEL_26:
  unsigned __int16 v40 = v31 + byte_20EBEB6[~(-1 << v10) & (unint64_t)*v29];
  uint64_t v41 = *(void *)v28 + 12 * v40;
  if (*(unsigned __int16 *)(v28 + 8) == v40)
  {
    uint64_t v42 = v28 + 16;
    uint64_t v28 = *(void *)(a1 + 56);
    if ((uint64_t *)v42 != v26)
    {
      while (1)
      {
        char v43 = (uint64_t *)v42;
        if (*(_WORD *)(v42 + 8)) {
          break;
        }
        v42 += 16;
        if (v43 + 2 == v26)
        {
          uint64_t v28 = *(void *)(a1 + 56);
          goto LABEL_32;
        }
      }
      uint64_t v28 = v42;
LABEL_32:
      uint64_t v41 = *v43;
    }
  }
  *a4 = a1;
  a4[1] = v27;
  a4[2] = v26;
  a4[3] = v28;
  a4[4] = v41;
  a4[5] = v27;
  a4[6] = v26;
  a4[7] = v26;
  a4[8] = 0;

  return sub_AE47A0(a4);
}

void sub_AE4598(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_AE45AC(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 80) - *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    BOOL v4 = v2 >= v3;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4 || (unint64_t v5 = *(void *)(a1 + 72), v5 < 0x21))
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    do
    {
      unint64_t v6 = v5;
      v5 >>= 1;
    }
    while (v6 >= 0x42 && v2 < (unint64_t)(float)(*(float *)(a1 + 20) * (float)v5));
    long long v24 = *(_OWORD *)(a1 + 16);
    int v25 = *(_DWORD *)(a1 + 32);
    memset(v26, 0, sizeof(v26));
    long long v27 = 0u;
    uint64x2_t v23 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_f32(*(float32x2_t *)&v24, 0)));
    BYTE8(v24) = 0;
    sub_ACEB8C((uint64_t)&v23, 0, (void *)a1, v5);
    int v7 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v25;
    int v25 = v7;
    unint64_t v8 = *(void **)(a1 + 40);
    uint64_t v9 = *(char **)(a1 + 48);
    *(void **)(a1 + 40) = v26[0];
    uint64x2_t v11 = *(uint64x2_t *)a1;
    long long v10 = *(_OWORD *)(a1 + 16);
    long long v12 = v24;
    *(uint64x2_t *)a1 = v23;
    *(_OWORD *)(a1 + 16) = v12;
    uint64x2_t v23 = v11;
    long long v24 = v10;
    long long v13 = *(_OWORD *)&v26[1];
    v26[0] = v8;
    v26[1] = v9;
    uint64_t v14 = v26[3];
    long long v15 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 48) = v13;
    *(void *)(a1 + 64) = v14;
    *(_OWORD *)&v26[2] = v15;
    *(void *)&long long v13 = v27;
    long long v16 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)(a1 + 72) = v27;
    long long v27 = v16;
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)(unint64_t)v13)));
    *(unsigned char *)(a1 + 24) = 0;
    uint64x2_t v23 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v24, (float)(unint64_t)v16)));
    BYTE8(v24) = 0;
    if (v9)
    {
      __int16 v17 = (char *)v15;
      unint64_t v18 = v9;
      if ((char *)v15 != v9)
      {
        uint64_t v19 = (char *)v15;
        do
        {
          long long v21 = (void *)*((void *)v19 - 2);
          v19 -= 16;
          long long v20 = v21;
          if (v21)
          {
            free(v20);
            *((void *)v17 - 2) = 0;
          }
          __int16 v17 = v19;
        }
        while (v19 != v9);
        unint64_t v18 = (char *)v26[1];
      }
      v26[2] = v9;
      free(v18);
    }
    uint64_t result = 1;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return result;
}

void sub_AE477C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    sub_20AE0F0((uint64_t)&a9, a15);
  }
  _Unwind_Resume(exception_object);
}

void *sub_AE47A0(void *result)
{
  if (result[1] == result[5])
  {
    int v7 = (_DWORD **)result[2];
    if (v7 == (_DWORD **)result[6])
    {
      long long v12 = (_DWORD **)result[7];
      long long v13 = (_DWORD **)result[3];
LABEL_30:
      while (v13 != v12 || v12 != v7 && result[4] != result[8])
      {
        if (!*(void *)(*result + 40)) {
          break;
        }
        uint64_t v14 = (_DWORD *)result[4];
        if (*(_DWORD *)(*result + 32) != *v14) {
          break;
        }
        result[4] = v14 + 3;
        if (v14 + 3 == &(*v13)[3 * *((unsigned __int16 *)v13 + 4)])
        {
          long long v15 = v13 + 2;
          while (v15 != v7)
          {
            result[4] = *v15;
            int v16 = *((unsigned __int16 *)v15 + 4);
            v15 += 2;
            if (v16)
            {
              long long v13 = v15 - 2;
              result[3] = v13;
              goto LABEL_30;
            }
          }
          long long v13 = v7;
          result[3] = v7;
        }
      }
    }
    else if (*(void *)(*result + 40))
    {
      int v8 = *(_DWORD *)(*result + 32);
      unint64_t v2 = (_DWORD *)result[4];
      if (v8 == *v2)
      {
        uint64_t v9 = (_DWORD **)result[3];
        do
        {
          v2 += 3;
          if (v2 == &(*v9)[3 * *((unsigned __int16 *)v9 + 4)])
          {
            long long v10 = v9 + 2;
            uint64_t v9 = v7;
            if (v10 != v7)
            {
              do
              {
                uint64x2_t v11 = v10;
                if (*((_WORD *)v10 + 4))
                {
                  uint64_t v9 = v10;
                  goto LABEL_19;
                }
                v10 += 2;
              }
              while (v11 + 2 != v7);
              uint64_t v9 = v7;
LABEL_19:
              unint64_t v2 = *v11;
            }
            result[3] = v9;
          }
        }
        while (v8 == *v2);
        goto LABEL_27;
      }
    }
  }
  else if (*(void *)(*result + 40))
  {
    int v1 = *(_DWORD *)(*result + 32);
    unint64_t v2 = (_DWORD *)result[4];
    if (v1 == *v2)
    {
      unint64_t v3 = (_DWORD **)result[3];
      do
      {
        v2 += 3;
        if (v2 == &(*v3)[3 * *((unsigned __int16 *)v3 + 4)])
        {
          BOOL v4 = (_DWORD **)result[2];
          unint64_t v5 = v3 + 2;
          if (v5 != v4)
          {
            while (1)
            {
              unint64_t v6 = v5;
              if (*((_WORD *)v5 + 4)) {
                break;
              }
              v5 += 2;
              if (v6 + 2 == v4) {
                goto LABEL_6;
              }
            }
            BOOL v4 = v5;
LABEL_6:
            unint64_t v2 = *v6;
          }
          result[3] = v4;
          unint64_t v3 = v4;
        }
      }
      while (v1 == *v2);
LABEL_27:
      result[4] = v2;
    }
  }
  return result;
}

uint64_t sub_AE4980(uint64_t a1, unsigned int a2, long long *a3)
{
  unsigned int v57 = a2;
  uint64_t v5 = sub_AE36B4(a1, &v57);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 4);
  if (v7
    && (unint64_t v8 = (v7 - 1), ((*(void *)(*(void *)(a1 + 112) + ((v8 >> 3) & 0x1FFFFFF8)) >> v8) & 1) == 0))
  {
    *(_DWORD *)(v5 + 4) = v8;
    __int16 v46 = (_OWORD *)(*(void *)(a1 + 88) + (v8 << 6));
    long long v47 = *a3;
    long long v48 = a3[1];
    long long v49 = a3[3];
    v46[2] = a3[2];
    v46[3] = v49;
    *__int16 v46 = v47;
    v46[1] = v48;
    unint64_t v44 = *(unsigned int *)(v5 + 4);
    *(void *)(*(void *)(a1 + 112) + ((v44 >> 3) & 0x1FFFFFF8)) |= 1 << v44;
    uint64_t v45 = *(void *)(a1 + 88);
  }
  else
  {
    unint64_t v9 = *(unsigned int *)(v5 + 8);
    uint64_t v10 = *(void *)(a1 + 88);
    uint64x2_t v11 = (uint64_t *)(a1 + 88);
    unint64_t v12 = *(void *)(a1 + 96) - v10;
    if ((v9 + 1) >= (unint64_t)((uint64_t)v12 >> 6)
      || ((*(void *)(*(void *)(a1 + 112) + ((v9 >> 3) & 0x1FFFFFF8)) >> v9) & 1) != 0)
    {
      v72[0] = v57;
      sub_AE51B4((void *)a1, v72, &v67);
      uint64_t v13 = *(void *)(a1 + 48);
      uint64_t v14 = *(void *)(a1 + 56);
      uint64_t v58 = a1;
      uint64_t v59 = v13;
      uint64_t v60 = v14;
      uint64_t v61 = v14;
      uint64_t v62 = 0;
      uint64_t v63 = v13;
      uint64_t v64 = v14;
      uint64_t v65 = v14;
      uint64_t v66 = 0;
      sub_AE47A0(&v58);
      if (v68 == v59 && v69 == v60 && v70 == v61 && (v70 == v69 || v71 == v62)) {
        int v15 = 0;
      }
      else {
        int v15 = *(_DWORD *)(v71 + 8) - *(_DWORD *)(v71 + 4);
      }
      uint64_t v16 = (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 6;
      v72[0] = v57;
      sub_AE51B4((void *)a1, v72, &v67);
      uint64_t v17 = *(void *)(a1 + 48);
      uint64_t v18 = *(void *)(a1 + 56);
      uint64_t v58 = a1;
      uint64_t v59 = v17;
      uint64_t v60 = v18;
      uint64_t v61 = v18;
      uint64_t v62 = 0;
      uint64_t v63 = v17;
      uint64_t v64 = v18;
      uint64_t v65 = v18;
      uint64_t v66 = 0;
      sub_AE47A0(&v58);
      if (v68 == v59 && v69 == v60 && v70 == v61 && (v70 == v69 || v71 == v62)) {
        uint64_t v19 = 2;
      }
      else {
        uint64_t v19 = (2 * (*(_DWORD *)(v71 + 8) - *(_DWORD *)(v71 + 4)) + 2);
      }
      unint64_t v20 = v19 + v16;
      uint64_t v22 = *(void *)(a1 + 88);
      uint64_t v21 = *(void *)(a1 + 96);
      unint64_t v23 = (v21 - v22) >> 6;
      __int16 v55 = a3;
      if (v20 <= v23)
      {
        if (v20 < v23)
        {
          uint64_t v21 = v22 + (v20 << 6);
          *(void *)(a1 + 96) = v21;
        }
      }
      else
      {
        sub_A876B0((void **)(a1 + 88), v20 - v23);
        uint64_t v22 = *(void *)(a1 + 88);
        uint64_t v21 = *(void *)(a1 + 96);
      }
      long long v24 = (uint64_t *)(a1 + 112);
      sub_A3E96C((uint64_t)v24, (v21 - v22) >> 6, 0);
      uint64_t v25 = *(unsigned int *)(v6 + 4);
      uint64_t v26 = *(unsigned int *)(v6 + 8);
      unint64_t v56 = v12;
      unint64_t v27 = (v12 >> 6);
      unsigned int v28 = v25;
      if (v26 != v25)
      {
        memmove((void *)(*v11 + (v27 << 6)), (const void *)(*v11 + (v25 << 6)), *v11 + (v26 << 6) - (*v11 + (v25 << 6)));
        unsigned int v28 = *(_DWORD *)(v6 + 4);
        LODWORD(v25) = *(_DWORD *)(v6 + 8);
      }
      unint64_t v29 = v12 >> 6;
      unint64_t v30 = v15 + (v12 >> 6);
      uint64_t v31 = *v24;
      long long v32 = (void *)(*v24 + 8 * (v28 >> 6));
      uint64_t v33 = v28 & 0x3F;
      unint64_t v34 = (v25 & 0x3F) - v33 + 8 * (*v24 + 8 * (v25 >> 6) - (void)v32);
      if (v34)
      {
        if (v33)
        {
          if ((64 - v33) >= v34) {
            uint64_t v35 = (v25 & 0x3F) - v33 + 8 * (*v24 + 8 * (v25 >> 6) - (void)v32);
          }
          else {
            uint64_t v35 = (64 - v33);
          }
          *v32++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v33 - v35)) & (-1 << v33));
          v34 -= v35;
        }
        if (v34 >= 0x40) {
          bzero(v32, 8 * (v34 >> 6));
        }
        if ((v34 & 0x3F) != 0) {
          v32[v34 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v34 & 0x3F));
        }
      }
      uint64_t v36 = (void *)(v31 + ((v27 >> 3) & 0x1FFFFFF8));
      uint64_t v37 = (v56 >> 6) & 0x3F;
      unint64_t v38 = (v30 & 0x3F) - v37 + 8 * (((v30 >> 3) & 0x1FFFFFF8) - ((v27 >> 3) & 0x1FFFFFF8));
      if (v38)
      {
        if ((v29 & 0x3F) != 0)
        {
          if (64 - (v29 & 0x3F) >= v38) {
            uint64_t v39 = (v30 & 0x3F) - v37 + 8 * (((v30 >> 3) & 0x1FFFFFF8) - ((v27 >> 3) & 0x1FFFFFF8));
          }
          else {
            uint64_t v39 = 64 - (v29 & 0x3F);
          }
          *v36++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - (v29 & 0x3Fu) - v39)) & (-1 << v37);
          v38 -= v39;
        }
        if (v38 >= 0x40) {
          memset(v36, 255, 8 * (v38 >> 6));
        }
        if ((v38 & 0x3F) != 0) {
          v36[v38 >> 6] |= 0xFFFFFFFFFFFFFFFFLL >> -(v38 & 0x3F);
        }
      }
      *(_DWORD *)(v6 + 4) = v29;
      *(_DWORD *)(v6 + 8) = v30;
      unsigned __int16 v40 = (_OWORD *)(*v11 + (v30 << 6));
      long long v41 = *v55;
      long long v42 = v55[1];
      long long v43 = v55[3];
      v40[2] = v55[2];
      uint64_t v40[3] = v43;
      *unsigned __int16 v40 = v41;
      v40[1] = v42;
      unint64_t v44 = *(unsigned int *)(v6 + 8);
      *(void *)(*v24 + ((v44 >> 3) & 0x1FFFFFF8)) |= 1 << v44;
      uint64_t v45 = *v11;
    }
    else
    {
      uint64_t v51 = (_OWORD *)(v10 + (v9 << 6));
      long long v52 = *a3;
      long long v53 = a3[1];
      long long v54 = a3[3];
      v51[2] = a3[2];
      v51[3] = v54;
      *uint64_t v51 = v52;
      v51[1] = v53;
      unint64_t v44 = *(unsigned int *)(v5 + 8);
      *(void *)(*(void *)(a1 + 112) + ((v44 >> 3) & 0x1FFFFFF8)) |= 1 << v44;
      uint64_t v45 = *(void *)(a1 + 88);
    }
    *(_DWORD *)(v6 + 8) = v44 + 1;
  }
  return v45 + (v44 << 6);
}

unint64_t sub_AE4E28(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int a5)
{
  unsigned int v40 = a3;
  sub_AE51B4((void *)a1, &v40, v36);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v27 = a1;
  uint64_t v28 = v10;
  uint64_t v29 = v11;
  uint64_t v30 = v11;
  uint64_t v31 = 0;
  uint64_t v32 = v10;
  uint64_t v33 = v11;
  uint64_t v34 = v11;
  uint64_t v35 = 0;
  sub_AE47A0(&v27);
  if (v36[1] == v28 && v37 == v29 && v38 == v30 && (v38 == v37 || v39 == v31)
    || *(_DWORD *)(v39 + 8) == *(_DWORD *)(v39 + 4))
  {
    unsigned __int8 v12 = 0;
    uint64_t v13 = sub_AE4980(a1, a3, (long long *)a2);
    if (!a5) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  LODWORD(v36[0]) = a3;
  uint64_t v14 = *(void *)(a1 + 88);
  int v15 = (_DWORD *)(v14 + ((unint64_t)*(unsigned int *)(sub_AE36B4(a1, (unsigned int *)v36) + 4) << 6));
  LODWORD(v36[0]) = a3;
  uint64_t v16 = *(void *)(a1 + 88);
  uint64_t v17 = (_DWORD *)(v16 + ((unint64_t)*(unsigned int *)(sub_AE36B4(a1, (unsigned int *)v36) + 8) << 6));
  if (v15 != v17)
  {
    unsigned __int8 v12 = 0;
    while (1)
    {
      int v18 = v15[7];
      if (v18 != 0x7FFFFFFF)
      {
        int v19 = *(_DWORD *)(a2 + 28);
        if (v18 <= v19 && v15[8] <= *(_DWORD *)(a2 + 32))
        {
          unsigned int v20 = *(_DWORD *)(a2 + 36);
          unsigned int v21 = v15[9];
          if (v21 <= v20 && (v21 != v20 || v18 != v19 || 10 * v18 - v15[11] <= 10 * v19 - *(_DWORD *)(a2 + 44)))
          {
            uint64_t v25 = 0;
            return v25 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v12 << 8);
          }
        }
        if (v19 <= v18 && *(_DWORD *)(a2 + 32) <= v15[8])
        {
          unsigned int v22 = v15[9];
          unsigned int v23 = *(_DWORD *)(a2 + 36);
          if (v23 <= v22 && (v23 != v22 || v19 != v18 || 10 * v19 - *(_DWORD *)(a2 + 44) <= 10 * v18 - v15[11]))
          {
            v15[7] = 0x7FFFFFFF;
            unsigned __int8 v12 = 1;
          }
        }
      }
      v15 += 16;
      if (v15 == v17) {
        goto LABEL_26;
      }
    }
  }
  unsigned __int8 v12 = 0;
LABEL_26:
  uint64_t v13 = sub_AE4980(a1, a3, (long long *)a2);
  if (a5)
  {
LABEL_27:
    *(void *)(v13 + 52) = -1;
    *(_DWORD *)(v13 + 60) = 0x7FFFFFFF;
  }
LABEL_28:
  if (a4)
  {
    int v24 = *(_DWORD *)(a1 + 136);
    *(_DWORD *)(a1 + 136) = v24 + 1;
    *(_DWORD *)(v13 + 24) = v24;
    *(_DWORD *)(v13 + 20) = *(_DWORD *)(a2 + 24);
  }
  uint64_t v25 = 1;
  return v25 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v12 << 8);
}

char *sub_AE50A8(uint64_t a1, unsigned int a2)
{
  unsigned int v17 = a2;
  uint64_t v4 = *(void *)(a1 + 88);
  uint64_t v5 = v4 + ((unint64_t)*(unsigned int *)(sub_AE36B4(a1, &v17) + 4) << 6);
  unsigned int v18 = a2;
  uint64_t v6 = *(void *)(a1 + 88);
  uint64_t v7 = sub_AE36B4(a1, &v18);
  unint64_t v8 = (long long *)(v6 + ((unint64_t)*(unsigned int *)(v7 + 8) << 6));
  if ((long long *)v5 != v8)
  {
    while (*(_DWORD *)(v5 + 28) != 0x7FFFFFFF)
    {
      v5 += 64;
      if ((long long *)v5 == v8)
      {
        uint64_t v5 = v6 + ((unint64_t)*(unsigned int *)(v7 + 8) << 6);
        goto LABEL_11;
      }
    }
    if ((long long *)v5 != v8)
    {
      for (unint64_t i = (long long *)(v5 + 64); i != v8; i += 4)
      {
        if (*((_DWORD *)i + 7) != 0x7FFFFFFF)
        {
          long long v10 = *i;
          long long v11 = i[1];
          long long v12 = i[3];
          *(_OWORD *)(v5 + 32) = i[2];
          *(_OWORD *)(v5 + 48) = v12;
          *(_OWORD *)uint64_t v5 = v10;
          *(_OWORD *)(v5 + 16) = v11;
          v5 += 64;
        }
      }
    }
  }
LABEL_11:
  unsigned int v13 = a2;
  unsigned int v19 = a2;
  uint64_t v14 = *(void *)(a1 + 88);
  uint64_t v15 = sub_AE36B4(a1, &v19);
  return sub_AE32F0(a1, v13, (char *)v5, (unsigned char *)(v14 + ((unint64_t)*(unsigned int *)(v15 + 8) << 6)));
}

void *sub_AE51B4@<X0>(void *a1@<X0>, unsigned int *a2@<X1>, void *a3@<X8>)
{
  if (a1[10] == a1[5] || (unint64_t v5 = sub_AE3914((uint64_t)a1, a2), v5 == -1))
  {
    uint64_t v23 = 0;
    uint64_t v6 = a1[6];
    uint64_t v7 = (uint64_t *)a1[7];
    *a3 = a1;
    a3[1] = v6;
    a3[2] = v7;
    a3[3] = v7;
    goto LABEL_22;
  }
  uint64_t v6 = a1[6];
  uint64_t v7 = (uint64_t *)a1[7];
  unint64_t v8 = v5 / 0x30;
  uint64_t v9 = v6 + 16 * (v5 / 0x30);
  long long v10 = (unsigned __int8 *)(v9 + 10);
  int v11 = v5 % 0x30;
  if ((unsigned __int16)(v5 % 0x30) < 9u)
  {
    __int16 v13 = 0;
    goto LABEL_14;
  }
  unsigned __int16 v12 = v11 - 9;
  __int16 v13 = 0;
  uint64_t v14 = (unsigned __int16)(v5 % 0x30 - 9) >> 3;
  if ((unsigned __int16)(v5 % 0x30 - 9) >> 3)
  {
    __int16 v15 = 0;
    uint64_t v16 = v14 + 1;
    uint64_t v17 = (v14 + 1) & 0x3FFE;
    LOWORD(v11) = v11 - 8 * v17;
    unsigned int v18 = &v10[v17];
    unsigned int v19 = (unsigned __int8 *)(v6 + 16 * v8 + 11);
    uint64_t v20 = v17;
    do
    {
      uint64_t v21 = *(v19 - 1);
      int v22 = *v19;
      v19 += 2;
      v13 += byte_20EBEB6[v21];
      v15 += byte_20EBEB6[v22];
      v20 -= 2;
    }
    while (v20);
    v13 += v15;
    if (v16 == v17) {
      goto LABEL_13;
    }
  }
  else
  {
    unsigned int v18 = (unsigned __int8 *)(v9 + 10);
  }
  do
  {
    int v24 = *v18++;
    v13 += byte_20EBEB6[v24];
    LOWORD(v11) = v11 - 8;
  }
  while ((unsigned __int16)v11 > 8u);
LABEL_13:
  v10 += (v12 >> 3) + 1;
LABEL_14:
  unsigned __int16 v25 = v13 + byte_20EBEB6[~(-1 << v11) & (unint64_t)*v10];
  uint64_t v23 = *(void *)v9 + 12 * v25;
  if (*(unsigned __int16 *)(v9 + 8) == v25)
  {
    uint64_t v26 = v9 + 16;
    uint64_t v9 = a1[7];
    if ((uint64_t *)v26 != v7)
    {
      while (1)
      {
        uint64_t v27 = (uint64_t *)v26;
        if (*(_WORD *)(v26 + 8)) {
          break;
        }
        v26 += 16;
        if (v27 + 2 == v7)
        {
          uint64_t v9 = a1[7];
          goto LABEL_20;
        }
      }
      uint64_t v9 = v26;
LABEL_20:
      uint64_t v23 = *v27;
    }
  }
  *a3 = a1;
  a3[1] = v6;
  a3[2] = v7;
  a3[3] = v9;
LABEL_22:
  a3[4] = v23;
  a3[5] = v6;
  a3[6] = v7;
  a3[7] = v7;
  a3[8] = 0;

  return sub_AE47A0(a3);
}

uint64_t sub_AE5380(void *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v11 = a2;
  unsigned int v25 = a2;
  sub_AE51B4(a1, &v25, v21);
  uint64_t v5 = a1[6];
  uint64_t v6 = a1[7];
  unsigned __int16 v12 = a1;
  uint64_t v13 = v5;
  uint64_t v14 = v6;
  uint64_t v15 = v6;
  uint64_t v16 = 0;
  uint64_t v17 = v5;
  uint64_t v18 = v6;
  uint64_t v19 = v6;
  uint64_t v20 = 0;
  sub_AE47A0(&v12);
  if (v21[1] == v13 && v22 == v14 && v23 == v15 && (v23 == v22 || v24 == v16)
    || *(_DWORD *)(v24 + 8) - *(_DWORD *)(v24 + 4) <= a3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_188D9E0(exception, "key does not exist and cannot be added");
    goto LABEL_11;
  }
  unint64_t v7 = *(_DWORD *)(sub_AE36B4((uint64_t)a1, &v11) + 4) + a3;
  uint64_t v8 = a1[11];
  if (v7 >= (a1[12] - v8) >> 6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_188D9E0(exception, "index out of range");
LABEL_11:
  }
  return v8 + (v7 << 6);
}

void sub_AE54B8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AE54CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_AE54E0(uint64_t a1, _DWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  if (a5 == -1
    || (unsigned int v27 = a5,
        uint64_t v10 = *(void *)(a1 + 88),
        unsigned int v11 = (_DWORD *)(v10 + ((unint64_t)*(unsigned int *)(sub_AE36B4(a1, &v27) + 4) << 6)),
        unsigned int v28 = a5,
        uint64_t v12 = *(void *)(a1 + 88),
        uint64_t v13 = (_DWORD *)(v12 + ((unint64_t)*(unsigned int *)(sub_AE36B4(a1, &v28) + 8) << 6)),
        v11 == v13))
  {
LABEL_20:
    unint64_t v24 = sub_AE4E28(a1, (uint64_t)a2, a4, 0, 1);
    unint64_t v22 = v24 >> 8;
    unint64_t v23 = v24 >> 16;
    uint64_t v21 = v24;
    if ((_BYTE)v24)
    {
      sub_AE4E28(a1, (uint64_t)a2, a3, 1, 1);
      *(void *)(v25 + 52) = -1;
      *(_DWORD *)(v25 + 60) = 0x7FFFFFFF;
    }
  }
  else
  {
    int v14 = a2[7];
    unsigned int v15 = a2[9];
    while (1)
    {
      int v16 = v11[7];
      if (v16 != 0x7FFFFFFF && v16 <= v14 && v11[8] <= a2[8])
      {
        unsigned int v18 = v11[9];
        if (v18 <= v15)
        {
          BOOL v19 = 10 * v16 - v11[11] > 10 * v14 - a2[11] && v16 == v14;
          if (!v19 || v18 != v15) {
            break;
          }
        }
      }
      v11 += 16;
      if (v11 == v13) {
        goto LABEL_20;
      }
    }
    uint64_t v21 = 0;
    LOBYTE(v22) = 0;
    unint64_t v23 = 0;
  }
  return ((unint64_t)v22 << 8) | (v23 << 16) | v21;
}

BOOL sub_AE5660(void *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v31 = a2;
  sub_AE51B4(a1, &v31, v28);
  uint64_t v6 = a1[6];
  uint64_t v7 = a1[7];
  uint64_t v20 = a1;
  *(void *)&long long v21 = v6;
  *((void *)&v21 + 1) = v7;
  uint64_t v22 = v7;
  uint64_t v23 = 0;
  uint64_t v24 = v6;
  uint64_t v25 = v7;
  uint64_t v26 = v7;
  uint64_t v27 = 0;
  sub_AE47A0(&v20);
  if (*(_OWORD *)&v28[8] == v21
    && *(void *)&v28[24] == v22
    && (*(void *)&v28[24] == *(void *)&v28[16] || (void)v29 == v23))
  {
    LOBYTE(v10) = 0;
  }
  else
  {
    int v8 = *(_DWORD *)(v29 + 4);
    int v9 = *(_DWORD *)(v29 + 8);
    __int16 v10 = 0;
    int v11 = v9 - v8;
    if (v9 != v8)
    {
      unsigned int v12 = 0;
      do
      {
        uint64_t v13 = (long long *)sub_AE5380(a1, a2, v12);
        long long v14 = v13[3];
        long long v16 = *v13;
        long long v15 = v13[1];
        long long v29 = v13[2];
        long long v30 = v14;
        *(_OWORD *)unsigned int v28 = v16;
        *(_OWORD *)&v28[16] = v15;
        __int16 v17 = sub_AE4E28((uint64_t)a1, (uint64_t)v28, a3, 0, 1);
        uint64_t v18 = (unsigned __int16)(v17 | v10) & 0xFF00;
        __int16 v10 = v17 | v10 | v18;
        ++v12;
      }
      while (v11 != v12);
      if (v18) {
        sub_AE50A8((uint64_t)a1, a3);
      }
    }
  }
  return v10 != 0;
}

unint64_t sub_AE57B4(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4 = a1;
  unsigned int v346 = a3;
  *(double *)(a1 + 608) = *(double *)(a1 + 608) + 1.0;
  unint64_t v5 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 40) + 88), a3);
  unsigned int v308 = *(_DWORD *)sub_A3F74C((void *)(v4 + 344), &v346);
  unint64_t v315 = v5;
  unint64_t result = (unint64_t)sub_A40514(&v344, *(void *)(v4 + 24), v5);
  uint64_t v7 = v344;
  if ((unint64_t)v344 < v345)
  {
    uint64_t v318 = (void *)(v4 + 104);
    uint64_t v319 = v4 + 424;
    int v305 = ~a2;
    int v306 = a2 + 2;
    int v304 = (uint64_t *)(v4 + 248);
    int v316 = a2 + 1;
    unint64_t v309 = HIDWORD(v5);
    uint64_t v320 = v4;
    do
    {
      *(double *)(v4 + 616) = *(double *)(v4 + 616) + 1.0;
      uint64_t v317 = *(unsigned int *)v7;
      LODWORD(v332) = 0;
      uint64_t v8 = *(void *)(v4 + 192);
      int v9 = (char *)(v8 + ((unint64_t)*(unsigned int *)(sub_AE36B4((uint64_t)v318, (unsigned int *)&v332) + 4) << 6));
      LODWORD(v332) = 0;
      uint64_t v10 = *(void *)(v4 + 192);
      uint64_t v11 = sub_AE36B4((uint64_t)v318, (unsigned int *)&v332);
      sub_AE32F0((uint64_t)v318, 0, v9, (unsigned char *)(v10 + ((unint64_t)*(unsigned int *)(v11 + 8) << 6)));
      unint64_t result = sub_A1E9A0((uint64_t)&v332, *(void *)(v4 + 24), v315, v308, 0, 1);
      unint64_t v13 = v335;
      unsigned int v12 = v336;
      while ((unint64_t)v12 >= v13 && (unint64_t)v12 < v337)
      {
        uint64_t v14 = 0;
        unint64_t v15 = __ROR8__(*v12, 32);
        uint64_t v16 = *(void *)(v4 + 32);
        uint64_t v17 = *(void *)(v16 + 72) - 1;
        unint64_t v18 = 0xC4CEB9FE1A85EC53
            * ((0xFF51AFD7ED558CCDLL * (v15 ^ (v15 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v15 ^ (v15 >> 33))) >> 33));
        unint64_t v19 = v18 ^ (v18 >> 33);
        uint64_t v20 = *(void *)(v16 + 48);
        uint64_t v21 = v20 + 11;
        uint64_t v22 = -1;
        for (unint64_t i = v19; ; unint64_t i = v14 + v24)
        {
          uint64_t v24 = i & v17;
          unint64_t v25 = (i & v17) / 0x30;
          unint64_t v26 = v24 - 48 * v25;
          if (((*(unsigned __int8 *)(v20 + 16 * v25 + (v26 >> 3) + 10) >> (v26 & 7)) & 1) == 0)
          {
            if (v22 == -1) {
              unint64_t v62 = v24;
            }
            else {
              unint64_t v62 = v22;
            }
            if (!sub_AD2F40(v16, 1)) {
              goto LABEL_92;
            }
            goto LABEL_49;
          }
          uint64_t v27 = *(void *)(v20 + 16 * v25);
          if (!*(void *)(v16 + 40)) {
            break;
          }
          unsigned int v28 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
          if ((unsigned __int16)(v24 - 48 * v25) < 9u)
          {
            __int16 v29 = 0;
            LOBYTE(v34) = v24 - 48 * v25;
            goto LABEL_23;
          }
          __int16 v29 = 0;
          uint64_t v30 = (unsigned __int16)(v24 - 48 * v25 - 9) >> 3;
          if ((unsigned __int16)(v24 - 48 * v25 - 9) >> 3)
          {
            __int16 v31 = 0;
            uint64_t v32 = v30 + 1;
            uint64_t v33 = (v30 + 1) & 0x3FFE;
            unsigned __int16 v34 = v26 - 8 * v33;
            uint64_t v35 = &v28[v33];
            uint64_t v36 = (unsigned __int8 *)(v21 + 16 * v25);
            uint64_t v37 = v33;
            do
            {
              uint64_t v38 = *(v36 - 1);
              int v39 = *v36;
              v36 += 2;
              v29 += byte_20EBFB6[v38];
              v31 += byte_20EBFB6[v39];
              v37 -= 2;
            }
            while (v37);
            v29 += v31;
            if (v32 == v33) {
              goto LABEL_22;
            }
          }
          else
          {
            unsigned __int16 v34 = v24 - 48 * v25;
            uint64_t v35 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
          }
          do
          {
            int v40 = *v35++;
            v29 += byte_20EBFB6[v40];
            v34 -= 8;
          }
          while (v34 > 8u);
LABEL_22:
          v28 += ((unsigned __int16)(v26 - 9) >> 3) + 1;
LABEL_23:
          long long v41 = (_DWORD *)(v27
                         + 12
                         * (unsigned __int16)(v29 + byte_20EBFB6[~(-1 << v34) & (unint64_t)*v28]));
          if (*(_DWORD *)(v16 + 36) != v41[1] || *(_DWORD *)(v16 + 32) != *v41) {
            break;
          }
          if (v22 == -1) {
            uint64_t v22 = v24;
          }
LABEL_10:
          ++v14;
        }
        long long v43 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
        if ((unsigned __int16)(v24 - 48 * v25) < 9u)
        {
          __int16 v44 = 0;
          __int16 v55 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
          LOBYTE(v49) = v24 - 48 * v25;
          goto LABEL_37;
        }
        __int16 v44 = 0;
        uint64_t v45 = (unsigned __int16)(v24 - 48 * v25 - 9) >> 3;
        if (!((unsigned __int16)(v24 - 48 * v25 - 9) >> 3))
        {
          unsigned __int16 v49 = v24 - 48 * v25;
          uint64_t v50 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
          do
          {
LABEL_35:
            int v56 = *v50++;
            v44 += byte_20EBFB6[v56];
            v49 -= 8;
          }
          while (v49 > 8u);
          goto LABEL_36;
        }
        __int16 v46 = 0;
        uint64_t v47 = v45 + 1;
        uint64_t v48 = (v45 + 1) & 0x3FFE;
        unsigned __int16 v49 = v26 - 8 * v48;
        uint64_t v50 = &v43[v48];
        uint64_t v51 = (unsigned __int8 *)(v21 + 16 * v25);
        uint64_t v52 = v48;
        do
        {
          uint64_t v53 = *(v51 - 1);
          int v54 = *v51;
          v51 += 2;
          v44 += byte_20EBFB6[v53];
          v46 += byte_20EBFB6[v54];
          v52 -= 2;
        }
        while (v52);
        v44 += v46;
        if (v47 != v48) {
          goto LABEL_35;
        }
LABEL_36:
        __int16 v55 = &v43[((unsigned __int16)(v26 - 9) >> 3) + 1];
LABEL_37:
        if (v15 != *(void *)(v27
                              + 12
                              * (unsigned __int16)(v44
                                                 + byte_20EBFB6[~(-1 << v49) & (unint64_t)*v55])))
          goto LABEL_10;
        if (v24 != -1)
        {
          if ((unsigned __int16)(v24 - 48 * v25) < 9u)
          {
            __int16 v59 = 0;
            uint64_t v4 = v320;
          }
          else
          {
            if ((((_WORD)v24 - 48 * (_WORD)v25 - 8) & 0xFFF8) != 0) {
              __int16 v57 = 8;
            }
            else {
              __int16 v57 = v24 - 48 * v25 - 8;
            }
            unsigned __int16 v58 = ~v57 + v24 - 48 * v25;
            uint64_t v4 = v320;
            __int16 v59 = 0;
            if (v58 < 8u)
            {
              unsigned __int16 v60 = v26;
              uint64_t v61 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
              goto LABEL_97;
            }
            __int16 v107 = 0;
            uint64_t v108 = (v58 >> 3) + 1;
            unsigned __int16 v60 = v26 - 8 * (((v58 >> 3) + 1) & 0x3FFE);
            uint64_t v61 = &v43[v108 & 0x3FFE];
            __int16 v109 = (unsigned __int8 *)(v20 + 16 * v25 + 11);
            uint64_t v110 = v108 & 0x3FFE;
            do
            {
              uint64_t v111 = *(v109 - 1);
              int v112 = *v109;
              v109 += 2;
              v59 += byte_20EBFB6[v111];
              v107 += byte_20EBFB6[v112];
              v110 -= 2;
            }
            while (v110);
            v59 += v107;
            if ((v108 & 0x3FFE) != v108)
            {
              do
              {
LABEL_97:
                int v113 = *v61++;
                v59 += byte_20EBFB6[v113];
                v60 -= 8;
              }
              while (v60 > 8u);
            }
            v43 += ((unsigned __int16)(v26 - 9) >> 3) + 1;
            LOBYTE(v26) = v60;
          }
          uint64_t v114 = *(void *)(v16 + 56);
          unsigned __int16 v115 = v59 + byte_20EBFB6[~(-1 << v26) & (unint64_t)*v43];
          uint64_t v116 = v20 + 16 * v25;
          if (*(unsigned __int16 *)(v116 + 8) != v115 || v116 + 16 == v114)
          {
            __int16 v106 = (_DWORD *)(v27 + 12 * v115);
          }
          else
          {
            uint64_t v118 = v116 + 32;
            do
            {
              if (*(_WORD *)(v118 - 8)) {
                BOOL v119 = 1;
              }
              else {
                BOOL v119 = v118 == v114;
              }
              v118 += 16;
            }
            while (!v119);
            __int16 v106 = *(_DWORD **)(v118 - 32);
          }
          goto LABEL_111;
        }
        unint64_t v62 = -1;
        if (!sub_AD2F40(v16, 1))
        {
LABEL_92:
          unint64_t v347 = v15;
          int v348 = -1;
          sub_AD3484(v16, (uint64_t *)&v347, v62, &v349);
          __int16 v106 = v351;
          uint64_t v4 = v320;
          goto LABEL_111;
        }
LABEL_49:
        uint64_t v63 = 0;
        unint64_t v347 = v15;
        int v348 = -1;
        uint64_t v64 = *(void *)(v16 + 72) - 1;
        uint64_t v65 = *(void *)(v16 + 48);
        uint64_t v66 = v65 + 11;
        uint64_t v67 = -1;
        while (2)
        {
          uint64_t v68 = v19 & v64;
          unint64_t v69 = (v19 & v64) / 0x30;
          unint64_t v70 = (v19 & v64) % 0x30;
          if (((*(unsigned __int8 *)(v65 + 16 * v69 + (v70 >> 3) + 10) >> (v70 & 7)) & 1) == 0)
          {
            if (v67 == -1) {
              unint64_t v105 = v19 & v64;
            }
            else {
              unint64_t v105 = v67;
            }
            goto LABEL_90;
          }
          uint64_t v71 = *(void *)(v16 + 40);
          uint64_t v72 = *(void *)(v65 + 16 * v69);
          if (!v71) {
            break;
          }
          uint64_t v73 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
          if ((unsigned __int16)((v19 & v64) % 0x30) < 9u)
          {
            __int16 v74 = 0;
            LOBYTE(v75) = (v19 & v64) % 0x30;
            goto LABEL_65;
          }
          __int16 v74 = 0;
          uint64_t v75 = (unsigned __int16)(v68 - 48 * v69 - 9) >> 3;
          if (!((unsigned __int16)(v68 - 48 * v69 - 9) >> 3))
          {
            LODWORD(v75) = (v19 & v64) % 0x30;
            uint64_t v79 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
            do
            {
LABEL_63:
              int v84 = *v79++;
              v74 += byte_20EBFB6[v84];
              LOWORD(v75) = v75 - 8;
            }
            while ((unsigned __int16)v75 > 8u);
            goto LABEL_64;
          }
          __int16 v76 = 0;
          uint64_t v77 = v75 + 1;
          uint64_t v78 = (v75 + 1) & 0x3FFE;
          LOWORD(v75) = v70 - 8 * v78;
          uint64_t v79 = &v73[v78];
          uint64_t v80 = (unsigned __int8 *)(v66 + 16 * v69);
          uint64_t v81 = v78;
          do
          {
            uint64_t v82 = *(v80 - 1);
            int v83 = *v80;
            v80 += 2;
            v74 += byte_20EBFB6[v82];
            v76 += byte_20EBFB6[v83];
            v81 -= 2;
          }
          while (v81);
          v74 += v76;
          if (v77 != v78) {
            goto LABEL_63;
          }
LABEL_64:
          v73 += ((unsigned __int16)(v70 - 9) >> 3) + 1;
LABEL_65:
          __int16 v85 = (_DWORD *)(v72
                         + 12
                         * (unsigned __int16)(v74 + byte_20EBFB6[~(-1 << v75) & (unint64_t)*v73]));
          if (*(_DWORD *)(v16 + 36) == v85[1] && *(_DWORD *)(v16 + 32) == *v85)
          {
            if (v67 == -1) {
              uint64_t v67 = v19 & v64;
            }
LABEL_52:
            unint64_t v19 = ++v63 + v68;
            continue;
          }
          break;
        }
        uint64_t v87 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
        if ((unsigned __int16)((v19 & v64) % 0x30) < 9u)
        {
          __int16 v88 = 0;
          int v98 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
          LOBYTE(v89) = (v19 & v64) % 0x30;
          goto LABEL_79;
        }
        __int16 v88 = 0;
        uint64_t v89 = (unsigned __int16)(v68 - 48 * v69 - 9) >> 3;
        if (!((unsigned __int16)(v68 - 48 * v69 - 9) >> 3))
        {
          LODWORD(v89) = (v19 & v64) % 0x30;
          uint64_t v93 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
          do
          {
LABEL_77:
            int v99 = *v93++;
            v88 += byte_20EBFB6[v99];
            LOWORD(v89) = v89 - 8;
          }
          while ((unsigned __int16)v89 > 8u);
          goto LABEL_78;
        }
        __int16 v90 = 0;
        uint64_t v91 = v89 + 1;
        uint64_t v92 = (v89 + 1) & 0x3FFE;
        LOWORD(v89) = v70 - 8 * v92;
        uint64_t v93 = &v87[v92];
        uint64_t v94 = (unsigned __int8 *)(v66 + 16 * v69);
        uint64_t v95 = v92;
        do
        {
          uint64_t v96 = *(v94 - 1);
          int v97 = *v94;
          v94 += 2;
          v88 += byte_20EBFB6[v96];
          v90 += byte_20EBFB6[v97];
          v95 -= 2;
        }
        while (v95);
        v88 += v90;
        if (v91 != v92) {
          goto LABEL_77;
        }
LABEL_78:
        int v98 = &v87[((unsigned __int16)(v70 - 9) >> 3) + 1];
LABEL_79:
        if (v15 != *(void *)(v72
                              + 12
                              * (unsigned __int16)(v88
                                                 + byte_20EBFB6[~(-1 << v89) & (unint64_t)*v98])))
          goto LABEL_52;
        if (v68 == -1)
        {
          unint64_t v105 = -1;
LABEL_90:
          uint64_t v4 = v320;
          sub_AD3484(v16, (uint64_t *)&v347, v105, &v349);
          __int16 v106 = v351;
          goto LABEL_111;
        }
        uint64_t v4 = v320;
        if ((unsigned __int16)((v19 & v64) % 0x30) < 9u)
        {
          __int16 v102 = 0;
        }
        else
        {
          if ((((_WORD)v68 - 48 * (_WORD)v69 - 8) & 0xFFF8) != 0) {
            __int16 v100 = 8;
          }
          else {
            __int16 v100 = v68 - 48 * v69 - 8;
          }
          unsigned __int16 v101 = ~v100 + v68 - 48 * v69;
          if (v101 < 8u)
          {
            __int16 v102 = 0;
            unsigned __int16 v103 = v70;
            unint64_t v104 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
            goto LABEL_179;
          }
          __int16 v175 = 0;
          __int16 v176 = 0;
          uint64_t v177 = (v101 >> 3) + 1;
          unsigned __int16 v103 = v70 - 8 * (((v101 >> 3) + 1) & 0x3FFE);
          unint64_t v104 = &v87[v177 & 0x3FFE];
          uint64_t v178 = (unsigned __int8 *)(v65 + 16 * v69 + 11);
          uint64_t v179 = v177 & 0x3FFE;
          do
          {
            uint64_t v180 = *(v178 - 1);
            int v181 = *v178;
            v178 += 2;
            v175 += byte_20EBFB6[v180];
            v176 += byte_20EBFB6[v181];
            v179 -= 2;
          }
          while (v179);
          __int16 v102 = v176 + v175;
          if ((v177 & 0x3FFE) != v177)
          {
            do
            {
LABEL_179:
              int v182 = *v104++;
              v102 += byte_20EBFB6[v182];
              v103 -= 8;
            }
            while (v103 > 8u);
          }
          v87 += ((unsigned __int16)(v70 - 9) >> 3) + 1;
          LOBYTE(v70) = v103;
        }
        uint64_t v183 = v65 + 16 * v69;
        int32x2_t v184 = *(_DWORD ***)(v16 + 56);
        unsigned __int16 v185 = v102 + byte_20EBFB6[~(-1 << v70) & (unint64_t)*v87];
        __int16 v106 = (_DWORD *)(v72 + 12 * v185);
        if (*(unsigned __int16 *)(v183 + 8) == v185)
        {
          uint64_t v186 = v183 + 16;
          if ((_DWORD **)(v183 + 16) != v184)
          {
            while (1)
            {
              long long v187 = (_DWORD **)v186;
              if (*(_WORD *)(v186 + 8)) {
                break;
              }
              v186 += 16;
              if (v187 + 2 == v184)
              {
                uint64_t v183 = *(void *)(v16 + 56);
                goto LABEL_187;
              }
            }
            uint64_t v183 = v186;
LABEL_187:
            __int16 v106 = *v187;
            goto LABEL_188;
          }
        }
        else
        {
LABEL_188:
          if ((_DWORD **)v183 != v184 && v71)
          {
            do
            {
              if (*(_DWORD *)(v16 + 36) != v106[1] || *(_DWORD *)(v16 + 32) != *v106) {
                break;
              }
              v106 += 3;
              if (v106 == (_DWORD *)(*(void *)v183 + 12 * *(unsigned __int16 *)(v183 + 8)))
              {
                v183 += 16;
                if ((_DWORD **)v183 != v184)
                {
                  do
                  {
                    if (*(_WORD *)(v183 + 8))
                    {
                      __int16 v106 = *(_DWORD **)v183;
                      goto LABEL_192;
                    }
                    v183 += 16;
                  }
                  while ((_DWORD **)v183 != v184);
                  __int16 v106 = *(_DWORD **)(v183 - 16);
                }
                break;
              }
LABEL_192:
              ;
            }
            while ((_DWORD **)v183 != v184);
          }
        }
LABEL_111:
        unsigned int v120 = v106[2];
        if (v120 != -1) {
          goto LABEL_135;
        }
        int v121 = *(_DWORD *)(v16 + 112);
        *(_DWORD *)(v16 + 112) = v121 + 1;
        v106[2] = v121;
        int v123 = *(unint64_t **)(v16 + 96);
        unint64_t v122 = *(void *)(v16 + 104);
        if ((unint64_t)v123 < v122)
        {
          *int v123 = v15;
          uint64_t v124 = (uint64_t)(v123 + 1);
          goto LABEL_134;
        }
        uint64_t v125 = (unint64_t **)(v16 + 88);
        unsigned __int16 v126 = *(char **)(v16 + 88);
        uint64_t v127 = ((char *)v123 - v126) >> 3;
        unint64_t v128 = v127 + 1;
        if ((unint64_t)(v127 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v129 = v122 - (void)v126;
        if (v129 >> 2 > v128) {
          unint64_t v128 = v129 >> 2;
        }
        if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v128 = 0x1FFFFFFFFFFFFFFFLL;
        }
        if (!v128)
        {
          unint64_t v130 = 0;
          uint64_t v131 = 0;
          uint64_t v132 = (unint64_t *)(8 * v127);
          *(void *)(8 * v127) = v15;
          uint64_t v124 = 8 * v127 + 8;
          if (v123 != (unint64_t *)v126) {
            goto LABEL_122;
          }
LABEL_125:
          *(void *)(v16 + 88) = v132;
          *(void *)(v16 + 96) = v124;
          *(void *)(v16 + 104) = &v131[8 * v130];
          uint64_t v4 = v320;
          if (v123) {
            goto LABEL_133;
          }
          goto LABEL_134;
        }
        if (v128 >> 61) {
          sub_188D718();
        }
        unint64_t v130 = v128;
        uint64_t v131 = (char *)operator new(8 * v128);
        uint64_t v125 = (unint64_t **)(v16 + 88);
        uint64_t v132 = (unint64_t *)&v131[8 * v127];
        *uint64_t v132 = v15;
        uint64_t v124 = (uint64_t)(v132 + 1);
        if (v123 == (unint64_t *)v126) {
          goto LABEL_125;
        }
LABEL_122:
        unint64_t v133 = (char *)(v123 - 1) - v126;
        if (v133 < 0x58) {
          goto LABEL_363;
        }
        if ((unint64_t)(v126 - v131) < 0x20) {
          goto LABEL_363;
        }
        uint64_t v134 = (v133 >> 3) + 1;
        uint64_t v135 = 8 * (v134 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v136 = &v123[v135 / 0xFFFFFFFFFFFFFFF8];
        uint64_t v132 = (unint64_t *)((char *)v132 - v135);
        long long v137 = &v131[8 * v127 - 16];
        unint64_t v138 = v123 - 2;
        uint64_t v139 = v134 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v140 = *(_OWORD *)v138;
          *((_OWORD *)v137 - 1) = *((_OWORD *)v138 - 1);
          *(_OWORD *)long long v137 = v140;
          v137 -= 32;
          v138 -= 4;
          v139 -= 4;
        }
        while (v139);
        int v123 = v136;
        if (v134 != (v134 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_363:
          do
          {
            unint64_t v141 = *--v123;
            *--uint64_t v132 = v141;
          }
          while (v123 != (unint64_t *)v126);
        }
        int v123 = *v125;
        *(void *)(v16 + 88) = v132;
        *(void *)(v16 + 96) = v124;
        *(void *)(v16 + 104) = &v131[8 * v130];
        uint64_t v4 = v320;
        if (v123) {
LABEL_133:
        }
          operator delete(v123);
LABEL_134:
        *(void *)(v16 + 96) = v124;
        unsigned int v120 = v106[2];
LABEL_135:
        LODWORD(v347) = v120;
        unint64_t result = sub_BD5C18(v319, v120, v15);
        if ((result & 1) == 0)
        {
          if (!*(unsigned char *)(v4 + 21))
          {
            LODWORD(v349) = 0;
            uint64_t v155 = *(void *)(v4 + 192);
            uint64_t v156 = (char *)(v155
                          + ((unint64_t)*(unsigned int *)(sub_AE36B4((uint64_t)v318, (unsigned int *)&v349) + 4) << 6));
            LODWORD(v349) = 0;
            uint64_t v157 = *(void *)(v4 + 192);
            uint64_t v158 = sub_AE36B4((uint64_t)v318, (unsigned int *)&v349);
            unint64_t result = (unint64_t)sub_AE32F0((uint64_t)v318, 0, v156, (unsigned char *)(v157 + ((unint64_t)*(unsigned int *)(v158 + 8) << 6)));
          }
          goto LABEL_257;
        }
        LODWORD(v349) = 0;
        if (*(void *)(v4 + 184) == *(void *)(v4 + 144)) {
          goto LABEL_222;
        }
        unint64_t result = sub_AE3914((uint64_t)v318, (unsigned int *)&v349);
        if (result == -1) {
          goto LABEL_222;
        }
        uint64_t v142 = *(void *)(v4 + 152);
        uint64_t v143 = v142 + 16 * (result / 0x30);
        unint64_t v144 = (unsigned __int8 *)(v143 + 10);
        int v145 = result % 0x30;
        if ((unsigned __int16)(result % 0x30) < 9u)
        {
          __int16 v146 = 0;
          goto LABEL_152;
        }
        __int16 v146 = 0;
        uint64_t v147 = (unsigned __int16)(result % 0x30 - 9) >> 3;
        if (!((unsigned __int16)(result % 0x30 - 9) >> 3))
        {
          LODWORD(v147) = result % 0x30;
          __int16 v151 = (unsigned __int8 *)(v143 + 10);
          do
          {
LABEL_150:
            int v159 = *v151++;
            v146 += byte_20EBEB6[v159];
            LOWORD(v147) = v147 - 8;
          }
          while ((unsigned __int16)v147 > 8u);
          goto LABEL_151;
        }
        __int16 v148 = 0;
        uint64_t v149 = v147 + 1;
        uint64_t v150 = (v147 + 1) & 0x3FFE;
        LOWORD(v147) = v145 - 8 * v150;
        __int16 v151 = &v144[v150];
        unint64_t result = v142 + 16 * (result / 0x30) + 11;
        uint64_t v152 = v150;
        do
        {
          uint64_t v153 = *(unsigned __int8 *)(result - 1);
          int v154 = *(unsigned __int8 *)result;
          result += 2;
          v146 += byte_20EBEB6[v153];
          v148 += byte_20EBEB6[v154];
          v152 -= 2;
        }
        while (v152);
        v146 += v148;
        if (v149 != v150) {
          goto LABEL_150;
        }
LABEL_151:
        v144 += ((unsigned __int16)(v145 - 9) >> 3) + 1;
        LOBYTE(v145) = v147;
LABEL_152:
        uint64_t v160 = *(void *)(v4 + 160);
        unsigned __int16 v161 = v146 + byte_20EBEB6[~(-1 << v145) & (unint64_t)*v144];
        if (*(unsigned __int16 *)(v143 + 8) == v161)
        {
          v143 += 16;
          if (v143 != v160)
          {
            while (1)
            {
              uint64_t v162 = v143;
              if (*(_WORD *)(v143 + 8)) {
                break;
              }
              v143 += 16;
              if (v162 + 16 == v160) {
                goto LABEL_222;
              }
            }
            uint64_t v163 = *(_DWORD **)v143;
            if (v143 != v160)
            {
LABEL_160:
              if (*(void *)(v4 + 144))
              {
                while (*(_DWORD *)(v4 + 136) == *v163)
                {
                  v163 += 3;
                  if (v163 == (_DWORD *)(*(void *)v143 + 12 * *(unsigned __int16 *)(v143 + 8)))
                  {
                    while (1)
                    {
                      v143 += 16;
                      if (v143 == v160) {
                        goto LABEL_222;
                      }
                      if (*(_WORD *)(v143 + 8))
                      {
                        uint64_t v163 = *(_DWORD **)v143;
                        break;
                      }
                    }
                  }
                  if (v143 == v160) {
                    break;
                  }
                }
              }
              if (v143 != v160 && v163[2] != v163[1])
              {
                LODWORD(v349) = 0;
                uint64_t v164 = *(void *)(v4 + 192);
                uint64_t v165 = (_DWORD *)(v164
                                + ((unint64_t)*(unsigned int *)(sub_AE36B4((uint64_t)v318, (unsigned int *)&v349)
                                                                     + 4) << 6));
                LODWORD(v349) = 0;
                uint64_t v166 = *(void *)(v4 + 192);
                unint64_t v167 = (_DWORD *)(v166
                                + ((unint64_t)*(unsigned int *)(sub_AE36B4((uint64_t)v318, (unsigned int *)&v349)
                                                                     + 8) << 6));
                if (v165 != v167)
                {
                  int v168 = v341;
                  uint64_t v169 = v339;
                  uint64_t v170 = v334;
                  unint64_t v171 = ((unint64_t)v336 - v335) >> 4;
                  do
                  {
                    unsigned int v174 = v165[13];
                    if (v168)
                    {
                      unsigned int v342 = v165[14];
                      int v172 = v165[15];
                      int v343 = v172;
                    }
                    else
                    {
                      int v172 = *(_DWORD *)(v169 + 12 * v174);
                    }
                    uint64_t v173 = (unsigned int *)((char *)v170 + *(unsigned __int16 *)((char *)v170 - *v170 + 6));
                    v165[7] = *(unsigned int *)((char *)&v173[2
                                                            * (*(_DWORD *)(v169 + 12 * v174 + 4) + v171)
                                                            + 1]
                                              + *v173)
                            + v172;
                    v165 += 16;
                  }
                  while (v165 != v167);
                  v340 = (int *)(v169 + 12 * v174);
                }
                sub_AE7258(v318, 0);
                if ((*((unsigned char *)v336 + 15) & 1) != 0
                  && (!v338
                   || (*(_DWORD *)(v338 + 4 * (((unint64_t)v336 - v335) >> 4)) & v317) == 0))
                {
                  int v189 = *(_DWORD *)(v4 + 96);
                  if (*(unsigned char *)(v4 + 20))
                  {
                    unsigned int v190 = v189 + v189 * *(_DWORD *)(v4 + 416);
                    int v191 = v347;
                    uint64_t v192 = *(void *)(v4 + 48);
                    if (v192) {
                      goto LABEL_209;
                    }
LABEL_211:
                    int v193 = 2147483646;
                  }
                  else
                  {
                    unsigned int v190 = -1;
                    int v191 = v347;
                    uint64_t v192 = *(void *)(v4 + 48);
                    if (!v192) {
                      goto LABEL_211;
                    }
LABEL_209:
                    int v193 = sub_AD7004(v192, v191, *(_DWORD *)(v4 + 100) + v305);
                  }
                  if (sub_AE74A8(v318, 0, v306 + v189 + v189 * v191, v189 + v189 * v191, v190, v193)) {
                    sub_A3EF14(v304, &v347);
                  }
                }
                LODWORD(v349) = 0;
                uint64_t v194 = *(void *)(v4 + 192);
                uint64_t v195 = (_DWORD *)(v194
                                + ((unint64_t)*(unsigned int *)(sub_AE36B4((uint64_t)v318, (unsigned int *)&v349)
                                                                     + 4) << 6));
                LODWORD(v349) = 0;
                uint64_t v196 = *(void *)(v4 + 192);
                uint64_t v197 = (_DWORD *)(v196
                                + ((unint64_t)*(unsigned int *)(sub_AE36B4((uint64_t)v318, (unsigned int *)&v349)
                                                                     + 8) << 6));
                if (v195 != v197)
                {
                  int v198 = v341;
                  uint64_t v199 = v339;
                  uint64_t v200 = v334;
                  unint64_t v201 = ((unint64_t)v336 - v335) >> 4;
                  do
                  {
                    unsigned int v204 = v195[13];
                    if (v198)
                    {
                      unsigned int v342 = v195[14];
                      int v202 = v195[15];
                      int v343 = v202;
                    }
                    else
                    {
                      int v202 = *(_DWORD *)(v199 + 12 * v204);
                    }
                    uint64_t v203 = (unsigned int *)((char *)v200 + *(unsigned __int16 *)((char *)v200 - *v200 + 6));
                    v195[7] = *(unsigned int *)((char *)&v203[2
                                                            * (*(_DWORD *)(v199 + 12 * v204 + 4) + v201)
                                                            + 2]
                                              + *v203)
                            + v202;
                    v195 += 16;
                  }
                  while (v195 != v197);
                  v340 = (int *)(v199 + 12 * v204);
                }
                unint64_t result = (unint64_t)sub_AE7258(v318, 0);
              }
            }
          }
        }
        else
        {
          uint64_t v163 = (_DWORD *)(*(void *)v143 + 12 * v161);
          if (v143 != v160) {
            goto LABEL_160;
          }
        }
LABEL_222:
        if ((*((unsigned char *)v336 + 15) & 2) == 0) {
          goto LABEL_257;
        }
        if (!v338)
        {
          if (!v317) {
            goto LABEL_227;
          }
          goto LABEL_257;
        }
        if (*(_DWORD *)(v338 + 4 * (((unint64_t)v336 - v335) >> 4)) != v317) {
          goto LABEL_257;
        }
LABEL_227:
        unsigned int v205 = v316 + *(_DWORD *)(v4 + 96) + *(_DWORD *)(v4 + 96) * v347;
        LODWORD(v349) = v205;
        if (*(void *)(v4 + 184) == *(void *)(v4 + 144)) {
          goto LABEL_257;
        }
        unint64_t result = sub_AE3914((uint64_t)v318, (unsigned int *)&v349);
        if (result == -1) {
          goto LABEL_257;
        }
        uint64_t v206 = *(void *)(v4 + 152);
        uint64_t v207 = v206 + 16 * (result / 0x30);
        uint64_t v208 = (unsigned __int8 *)(v207 + 10);
        int v209 = result % 0x30;
        if ((unsigned __int16)(result % 0x30) < 9u)
        {
          __int16 v210 = 0;
          goto LABEL_239;
        }
        __int16 v210 = 0;
        uint64_t v211 = (unsigned __int16)(result % 0x30 - 9) >> 3;
        if (!((unsigned __int16)(result % 0x30 - 9) >> 3))
        {
          LODWORD(v211) = result % 0x30;
          uint64_t v215 = (unsigned __int8 *)(v207 + 10);
          do
          {
LABEL_237:
            int v219 = *v215++;
            v210 += byte_20EBEB6[v219];
            LOWORD(v211) = v211 - 8;
          }
          while ((unsigned __int16)v211 > 8u);
          goto LABEL_238;
        }
        __int16 v212 = 0;
        uint64_t v213 = v211 + 1;
        uint64_t v214 = (v211 + 1) & 0x3FFE;
        LOWORD(v211) = v209 - 8 * v214;
        uint64_t v215 = &v208[v214];
        unint64_t result = v206 + 16 * (result / 0x30) + 11;
        uint64_t v216 = v214;
        do
        {
          uint64_t v217 = *(unsigned __int8 *)(result - 1);
          int v218 = *(unsigned __int8 *)result;
          result += 2;
          v210 += byte_20EBEB6[v217];
          v212 += byte_20EBEB6[v218];
          v216 -= 2;
        }
        while (v216);
        v210 += v212;
        if (v213 != v214) {
          goto LABEL_237;
        }
LABEL_238:
        v208 += ((unsigned __int16)(v209 - 9) >> 3) + 1;
        LOBYTE(v209) = v211;
LABEL_239:
        uint64_t v220 = *(void *)(v4 + 160);
        unsigned __int16 v221 = v210 + byte_20EBEB6[~(-1 << v209) & (unint64_t)*v208];
        if (*(unsigned __int16 *)(v207 + 8) == v221)
        {
          v207 += 16;
          if (v207 != v220)
          {
            while (1)
            {
              uint64_t v222 = v207;
              if (*(_WORD *)(v207 + 8)) {
                break;
              }
              v207 += 16;
              if (v222 + 16 == v220) {
                goto LABEL_257;
              }
            }
            uint64_t v223 = *(_DWORD **)v207;
            if (v207 != v220) {
              goto LABEL_247;
            }
          }
          goto LABEL_257;
        }
        uint64_t v223 = (_DWORD *)(*(void *)v207 + 12 * v221);
        if (v207 == v220) {
          goto LABEL_257;
        }
LABEL_247:
        if (*(void *)(v4 + 144))
        {
          do
          {
            if (*(_DWORD *)(v4 + 136) != *v223) {
              break;
            }
            v223 += 3;
            if (v223 == (_DWORD *)(*(void *)v207 + 12 * *(unsigned __int16 *)(v207 + 8)))
            {
              do
              {
                v207 += 16;
                if (v207 == v220) {
                  goto LABEL_257;
                }
              }
              while (!*(_WORD *)(v207 + 8));
              uint64_t v223 = *(_DWORD **)v207;
            }
          }
          while (v207 != v220);
        }
        if (v207 != v220)
        {
          uint64_t v226 = v223 + 1;
          int v225 = v223[1];
          int v224 = v226[1];
          uint64_t v227 = (v224 - v225);
          if (v224 != v225)
          {
            unsigned int v234 = 0;
            unsigned int v307 = v205;
            do
            {
              uint64_t v235 = sub_AE5380(v318, v205, v234);
              signed int v236 = *((_DWORD *)v336 + 2) + *(_DWORD *)(v235 + 28);
              if (v341)
              {
                unint64_t result = sub_A1F39C(*(void *)(v4 + 24), (uint64_t)&v332, v236, 1);
                if ((result & 1) == 0) {
                  goto LABEL_281;
                }
              }
              else
              {
                unint64_t result = sub_A1F8B4((uint64_t)&v332, v236, 1);
                if (!result) {
                  goto LABEL_281;
                }
              }
              uint64_t v237 = v227;
              uint64_t v311 = *(void *)(v235 + 20);
              int v238 = *(_DWORD *)(v235 + 36);
              int v313 = *(_DWORD *)(v235 + 40);
              int v314 = *(_DWORD *)(v235 + 32);
              int v310 = *(_DWORD *)(v235 + 44);
              int v312 = *(_DWORD *)(v235 + 48);
              uint64_t v239 = (void *)(*(void *)(v4 + 24) + 4136);
              if (sub_A10E20(v239, v309))
              {
                unint64_t v240 = (int *)sub_A1120C(*(void *)(*v239 + 3944), v315);
              }
              else
              {
                if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                  && __cxa_guard_acquire(&qword_24F7308))
                {
                  sub_518C8(0x3B60u, 0x7FCAu);
                  dword_24F7300 = v301 | 0x40000000;
                  __cxa_guard_release(&qword_24F7308);
                  uint64_t v4 = v320;
                }
                uint64_t v241 = *v239;
                if (dword_24F7300 == v309)
                {
                  unint64_t v242 = *(unsigned int **)(*(void *)(v241 + 3976) + 72);
                  if (!v242)
                  {
                    exception = __cxa_allocate_exception(0x40uLL);
                    v349 = (char *)operator new(0x40uLL);
                    long long v350 = xmmword_20B9A90;
                    strcpy(v349, "Realtime stop pattern quad data requested on nullptr buffer");
                    int v303 = (void *)sub_2F404((uint64_t)exception, (long long *)&v349);
                  }
                  unsigned int v243 = (int *)((char *)v242 + *v242);
                  unsigned __int16 v244 = (unsigned __int16 *)((char *)v243 - *v243);
                  if (*v244 >= 5u && (uint64_t v245 = v244[2]) != 0) {
                    unint64_t v246 = (unsigned int *)((char *)v243 + v245 + *(unsigned int *)((char *)v243 + v245));
                  }
                  else {
                    unint64_t v246 = 0;
                  }
                  unint64_t v240 = (int *)sub_A1139C(v246, v315);
                }
                else
                {
                  unint64_t v240 = (int *)sub_A11500(v241 + 24, v315, 0, "stop pattern");
                }
              }
              uint64_t v247 = v240;
              uint64_t v248 = *v239;
              uint64_t v249 = (unsigned __int16 *)((char *)v240 - *v240);
              if (*v249 >= 0xFu && (uint64_t v250 = v249[7]) != 0)
              {
                uint64_t v251 = v248 + 3896;
                char v252 = sub_49442C(*(unsigned __int16 *)((char *)v240 + v250));
                if (sub_C25A10(v251, v252)) {
                  goto LABEL_304;
                }
              }
              else
              {
                uint64_t v256 = v248 + 3896;
                char v257 = sub_49442C(0x7FFFu);
                if (sub_C25A10(v256, v257))
                {
LABEL_304:
                  int v258 = 128;
                  goto LABEL_307;
                }
              }
              long long v253 = (unsigned __int16 *)((char *)v247 - *v247);
              if (*v253 >= 0xBu && (uint64_t v254 = v253[5]) != 0) {
                char v255 = *((unsigned char *)v247 + v254);
              }
              else {
                char v255 = 0;
              }
              int v258 = sub_A2BF48(v255);
LABEL_307:
              int v259 = v343;
              unint64_t v260 = 0xFFFFFFFF00000000;
              if (v341) {
                unint64_t v260 = (unint64_t)v342 << 32;
              }
              unint64_t v261 = (-1431655765 * (((unint64_t)v340 - v339) >> 2)) | v260;
              if (!v341) {
                int v259 = 0x7FFFFFFF;
              }
              unint64_t v262 = (unsigned int *)((char *)v334 + *(unsigned __int16 *)((char *)v334 - *v334 + 6));
              unint64_t v263 = (char *)v262 + *v262;
              uint8x8_t v264 = &v343;
              if (!v341) {
                uint8x8_t v264 = v340;
              }
              int v265 = *v264;
              unint64_t v266 = ((unint64_t)v336 - v335) >> 4;
              int v267 = *(_DWORD *)&v263[8 * (v340[1] + v266) + 4];
              int v268 = *(_DWORD *)&v263[8 * (v340[1] + v266) + 8] + v265;
              int v269 = 10 * (v265 - *(_DWORD *)(v235 + 28) + v267);
              LODWORD(v321) = v266;
              *(void *)((char *)&v321 + 4) = v261;
              HIDWORD(v321) = v259;
              unsigned int v322 = v346;
              uint64_t v323 = v311;
              int v324 = v268;
              int v325 = v314;
              int v326 = v258 + v238;
              int v327 = v313;
              int v328 = (v269 & ~(v269 >> 31)) + v310;
              int v329 = v312;
              unint64_t v330 = v261;
              int v331 = v259;
              LODWORD(v349) = 0;
              uint64_t v227 = v237;
              unsigned int v205 = v307;
              if (*(void *)(v4 + 184) == *(void *)(v4 + 144)) {
                goto LABEL_280;
              }
              unint64_t v270 = sub_AE3914((uint64_t)v318, (unsigned int *)&v349);
              if (v270 == -1) {
                goto LABEL_280;
              }
              uint64_t v271 = *(void *)(v4 + 152);
              uint64_t v272 = v271 + 16 * (v270 / 0x30);
              int v273 = (unsigned __int8 *)(v272 + 10);
              int v274 = v270 % 0x30;
              if ((unsigned __int16)(v270 % 0x30) < 9u)
              {
                __int16 v275 = 0;
                goto LABEL_325;
              }
              __int16 v275 = 0;
              uint64_t v276 = (unsigned __int16)(v270 % 0x30 - 9) >> 3;
              if ((unsigned __int16)(v270 % 0x30 - 9) >> 3)
              {
                __int16 v277 = 0;
                uint64_t v278 = v276 + 1;
                uint64_t v279 = (v276 + 1) & 0x3FFE;
                LOWORD(v276) = v274 - 8 * v279;
                uint64_t v280 = &v273[v279];
                int v281 = (unsigned __int8 *)(v271 + 16 * (v270 / 0x30) + 11);
                uint64_t v282 = v279;
                do
                {
                  uint64_t v283 = *(v281 - 1);
                  int v284 = *v281;
                  v281 += 2;
                  v275 += byte_20EBEB6[v283];
                  v277 += byte_20EBEB6[v284];
                  v282 -= 2;
                }
                while (v282);
                v275 += v277;
                if (v278 == v279) {
                  goto LABEL_324;
                }
              }
              else
              {
                LODWORD(v276) = v270 % 0x30;
                uint64_t v280 = (unsigned __int8 *)(v272 + 10);
              }
              do
              {
                int v285 = *v280++;
                v275 += byte_20EBEB6[v285];
                LOWORD(v276) = v276 - 8;
              }
              while ((unsigned __int16)v276 > 8u);
LABEL_324:
              v273 += ((unsigned __int16)(v274 - 9) >> 3) + 1;
              LOBYTE(v274) = v276;
LABEL_325:
              uint64_t v286 = *(void *)(v4 + 160);
              unsigned __int16 v287 = v275 + byte_20EBEB6[~(-1 << v274) & (unint64_t)*v273];
              if (*(unsigned __int16 *)(v272 + 8) == v287)
              {
                v272 += 16;
                if (v272 != v286)
                {
                  while (1)
                  {
                    uint64_t v288 = v272;
                    if (*(_WORD *)(v272 + 8)) {
                      break;
                    }
                    v272 += 16;
                    if (v288 + 16 == v286) {
                      goto LABEL_280;
                    }
                  }
                  unint64_t v289 = *(_DWORD **)v272;
                  if (v272 != v286)
                  {
LABEL_333:
                    if (*(void *)(v4 + 144))
                    {
                      while (*(_DWORD *)(v4 + 136) == *v289)
                      {
                        v289 += 3;
                        if (v289 == (_DWORD *)(*(void *)v272 + 12 * *(unsigned __int16 *)(v272 + 8)))
                        {
                          while (1)
                          {
                            v272 += 16;
                            if (v272 == v286) {
                              goto LABEL_280;
                            }
                            if (*(_WORD *)(v272 + 8))
                            {
                              unint64_t v289 = *(_DWORD **)v272;
                              break;
                            }
                          }
                        }
                        if (v272 == v286) {
                          break;
                        }
                      }
                    }
                    if (v272 != v286 && v289[2] != v289[1])
                    {
                      unint64_t result = sub_AE4E28((uint64_t)v318, (uint64_t)&v321, 0, 0, 0);
                      if ((result & 0x100) != 0)
                      {
                        LODWORD(v349) = 0;
                        uint64_t v290 = *(void *)(v4 + 192);
                        uint64_t v291 = v290
                             + ((unint64_t)*(unsigned int *)(sub_AE36B4((uint64_t)v318, (unsigned int *)&v349) + 4) << 6);
                        LODWORD(v349) = 0;
                        uint64_t v292 = *(void *)(v4 + 192);
                        uint64_t v293 = sub_AE36B4((uint64_t)v318, (unsigned int *)&v349);
                        long long v294 = (long long *)(v292 + ((unint64_t)*(unsigned int *)(v293 + 8) << 6));
                        if ((long long *)v291 != v294)
                        {
                          while (*(_DWORD *)(v291 + 28) != 0x7FFFFFFF)
                          {
                            v291 += 64;
                            if ((long long *)v291 == v294)
                            {
                              uint64_t v291 = v292 + ((unint64_t)*(unsigned int *)(v293 + 8) << 6);
                              goto LABEL_354;
                            }
                          }
                          if ((long long *)v291 != v294)
                          {
                            for (j = (long long *)(v291 + 64); j != v294; j += 4)
                            {
                              if (*((_DWORD *)j + 7) != 0x7FFFFFFF)
                              {
                                long long v296 = *j;
                                long long v297 = j[1];
                                long long v298 = j[3];
                                *(_OWORD *)(v291 + 32) = j[2];
                                *(_OWORD *)(v291 + 48) = v298;
                                *(_OWORD *)uint64_t v291 = v296;
                                *(_OWORD *)(v291 + 16) = v297;
                                v291 += 64;
                              }
                            }
                          }
                        }
LABEL_354:
                        LODWORD(v349) = 0;
                        uint64_t v299 = *(void *)(v4 + 192);
                        uint64_t v300 = sub_AE36B4((uint64_t)v318, (unsigned int *)&v349);
                        unint64_t result = (unint64_t)sub_AE32F0((uint64_t)v318, 0, (char *)v291, (unsigned char *)(v299+ ((unint64_t)*(unsigned int *)(v300 + 8) << 6)));
                      }
                      goto LABEL_281;
                    }
                  }
                }
              }
              else
              {
                unint64_t v289 = (_DWORD *)(*(void *)v272 + 12 * v287);
                if (v272 != v286) {
                  goto LABEL_333;
                }
              }
LABEL_280:
              unint64_t result = sub_AE4980((uint64_t)v318, 0, &v321);
LABEL_281:
              ++v234;
            }
            while (v234 != v227);
          }
        }
LABEL_257:
        unint64_t v13 = v335;
        unsigned int v12 = v336 + 2;
        v336 += 2;
        if (*(unsigned char *)(v332 + 16)) {
          BOOL v228 = v333 == 0;
        }
        else {
          BOOL v228 = 0;
        }
        if (v228 && (unint64_t)v12 >= v335 && (unint64_t)v12 < v337)
        {
          do
          {
            unint64_t v231 = __ROR8__(*v12, 32);
            if (HIDWORD(v231) == 1 && (v231 + 3) < 2) {
              break;
            }
            unint64_t result = sub_2AB7E4(**(void **)(v332 + 4120));
            unint64_t v13 = v335;
            unsigned int v12 = v336;
            if (result) {
              break;
            }
            unsigned int v12 = v336 + 2;
            v336 = v12;
          }
          while ((unint64_t)v12 >= v335 && (unint64_t)v12 < v337);
        }
      }
      uint64_t v7 = v344 + 4;
      int v344 = v7;
    }
    while ((unint64_t)v7 < v345);
  }
  return result;
}

void sub_AE7210(_Unwind_Exception *a1)
{
}

void sub_AE7228(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 153) < 0) {
    operator delete(*(void **)(v1 - 176));
  }
  _Unwind_Resume(exception_object);
}

void sub_AE7244(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_AE7258(void *a1, unsigned int a2)
{
  v36[0] = a2;
  sub_AE51B4(a1, v36, v32);
  uint64_t v4 = a1[6];
  uint64_t v5 = a1[7];
  uint64_t v23 = a1;
  uint64_t v24 = v4;
  uint64_t v25 = v5;
  uint64_t v26 = v5;
  uint64_t v27 = 0;
  uint64_t v28 = v4;
  uint64_t v29 = v5;
  uint64_t v30 = v5;
  uint64_t v31 = 0;
  unint64_t result = (char *)sub_AE47A0(&v23);
  if (v32[1] == v24 && v33 == v25 && v34 == v26 && (v34 == v33 || v35 == v27)) {
    return result;
  }
  int v7 = *(_DWORD *)(v35 + 4);
  int v8 = *(_DWORD *)(v35 + 8);
  unsigned int v9 = v8 - v7;
  if (v8 == v7) {
    return result;
  }
  char v22 = 0;
  unsigned int v10 = 0;
  unsigned int v11 = 1;
LABEL_6:
  while (2)
  {
    if (v11 <= v9) {
      unsigned int v12 = v9;
    }
    else {
      unsigned int v12 = v11;
    }
    unint64_t result = (char *)sub_AE5380(a1, a2, v10++);
    if (*((_DWORD *)result + 7) != 0x7FFFFFFF && v10 < v9)
    {
      uint64_t v14 = result;
      for (unsigned int i = v10; v12 != i; ++i)
      {
        unint64_t result = (char *)sub_AE5380(a1, a2, i);
        int v16 = *((_DWORD *)result + 7);
        if (v16 != 0x7FFFFFFF)
        {
          int v17 = *((_DWORD *)v14 + 7);
          if (v17 > v16
            || *((_DWORD *)v14 + 8) > *((_DWORD *)result + 8)
            || (unsigned int v18 = *((_DWORD *)result + 9), v19 = *((_DWORD *)v14 + 9), v19 > v18)
            || v19 == v18 && v17 == v16 && 10 * v17 - *((_DWORD *)v14 + 11) > 10 * v16 - *((_DWORD *)result + 11))
          {
            if (v16 <= v17 && *((_DWORD *)result + 8) <= *((_DWORD *)v14 + 8))
            {
              unsigned int v20 = *((_DWORD *)v14 + 9);
              unsigned int v21 = *((_DWORD *)result + 9);
              if (v21 <= v20
                && (v21 != v20 || v16 != v17 || 10 * v16 - *((_DWORD *)result + 11) <= 10 * v17 - *((_DWORD *)v14 + 11)))
              {
                *((_DWORD *)v14 + 7) = 0x7FFFFFFF;
                if (v10 == v9) {
                  return sub_AE50A8((uint64_t)a1, a2);
                }
                char v22 = 1;
                ++v11;
                goto LABEL_6;
              }
            }
          }
          else
          {
            *((_DWORD *)result + 7) = 0x7FFFFFFF;
            char v22 = 1;
          }
        }
      }
    }
    if (v10 != v9)
    {
      ++v11;
      continue;
    }
    break;
  }
  if ((v22 & 1) == 0) {
    return result;
  }
  return sub_AE50A8((uint64_t)a1, a2);
}

BOOL sub_AE74A8(void *a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  unsigned int v37 = a2;
  sub_AE51B4(a1, &v37, v34);
  uint64_t v12 = a1[6];
  uint64_t v13 = a1[7];
  uint64_t v26 = a1;
  *(void *)&long long v27 = v12;
  *((void *)&v27 + 1) = v13;
  uint64_t v28 = v13;
  uint64_t v29 = 0;
  uint64_t v30 = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v13;
  uint64_t v33 = 0;
  sub_AE47A0(&v26);
  if (*(_OWORD *)&v34[8] == v27
    && *(void *)&v34[24] == v28
    && (*(void *)&v34[24] == *(void *)&v34[16] || (void)v35 == v29))
  {
    goto LABEL_7;
  }
  int v14 = *(_DWORD *)(v35 + 4);
  int v15 = *(_DWORD *)(v35 + 8);
  int v16 = v15 - v14;
  if (v15 == v14) {
    goto LABEL_7;
  }
  if (a6 == 0x7FFFFFFF)
  {
    unsigned int v17 = 0;
    do
      sub_AE5380(a1, a2, v17++);
    while (v16 != v17);
LABEL_7:
    LOBYTE(v18) = 0;
    return v18 != 0;
  }
  __int16 v18 = 0;
  unsigned int v20 = 0;
  do
  {
    unsigned int v21 = (_OWORD *)sub_AE5380(a1, a2, v20);
    long long v22 = v21[2];
    long long v23 = v21[3];
    long long v24 = v21[1];
    *(_OWORD *)uint64_t v34 = *v21;
    *(_OWORD *)&v34[16] = v24;
    long long v35 = v22;
    long long v36 = v23;
    if (SHIDWORD(v24) <= a6)
    {
      __int16 v25 = sub_AE7668((uint64_t)a1, v34, a3, a4, a5);
      __int16 v18 = v25 | v18 | (v25 | v18) & 0xFF00;
    }
    ++v20;
  }
  while (v16 != v20);
  if ((v18 & 0xFF00) != 0) {
    sub_AE50A8((uint64_t)a1, a3);
  }
  return v18 != 0;
}

unint64_t sub_AE7668(uint64_t a1, _DWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  if (a5 != -1)
  {
    unsigned int v38 = a5;
    uint64_t v10 = *(void *)(a1 + 88);
    unsigned int v11 = (_DWORD *)(v10 + ((unint64_t)*(unsigned int *)(sub_AE36B4(a1, &v38) + 4) << 6));
    unsigned int v38 = a5;
    uint64_t v12 = *(void *)(a1 + 88);
    uint64_t v13 = (_DWORD *)(v12 + ((unint64_t)*(unsigned int *)(sub_AE36B4(a1, &v38) + 8) << 6));
    if (v11 != v13)
    {
      int v14 = a2[7];
      unsigned int v15 = a2[9];
      do
      {
        int v16 = v11[7];
        if (v16 != 0x7FFFFFFF && v16 <= v14 && v11[8] <= a2[8])
        {
          unsigned int v18 = v11[9];
          if (v18 <= v15)
          {
            BOOL v19 = 10 * v16 - v11[11] > 10 * v14 - a2[11] && v16 == v14;
            if (!v19 || v18 != v15) {
              goto LABEL_37;
            }
          }
        }
        v11 += 16;
      }
      while (v11 != v13);
    }
  }
  unsigned int v38 = a4;
  uint64_t v21 = *(void *)(a1 + 88);
  long long v22 = (_DWORD *)(v21 + ((unint64_t)*(unsigned int *)(sub_AE36B4(a1, &v38) + 4) << 6));
  unsigned int v38 = a4;
  uint64_t v23 = *(void *)(a1 + 88);
  long long v24 = (_DWORD *)(v23 + ((unint64_t)*(unsigned int *)(sub_AE36B4(a1, &v38) + 8) << 6));
  if (v22 != v24)
  {
    int v25 = a2[7];
    unsigned int v26 = a2[9];
    while (1)
    {
      int v27 = v22[7];
      if (v27 != 0x7FFFFFFF && v27 <= v25 && v22[8] <= a2[8])
      {
        unsigned int v29 = v22[9];
        if (v29 <= v26)
        {
          BOOL v30 = 10 * v27 - v22[11] > 10 * v25 - a2[11] && v27 == v25;
          if (!v30 || v29 != v26) {
            break;
          }
        }
      }
      v22 += 16;
      if (v22 == v24) {
        goto LABEL_38;
      }
    }
LABEL_37:
    LOBYTE(v32) = 0;
    uint64_t v33 = 0;
    unint64_t v34 = 0;
    return ((unint64_t)v32 << 8) | (v34 << 16) | v33;
  }
LABEL_38:
  unint64_t v35 = sub_AE4E28(a1, (uint64_t)a2, a3, 1, 1);
  unint64_t v32 = v35 >> 8;
  unint64_t v34 = v35 >> 16;
  uint64_t v33 = v35;
  if ((_BYTE)v35)
  {
    *(void *)(v36 + 52) = -1;
    *(_DWORD *)(v36 + 60) = 0x7FFFFFFF;
  }
  return ((unint64_t)v32 << 8) | (v34 << 16) | v33;
}

uint64_t sub_AE7874(uint64_t a1)
{
  uint64_t v20 = 0;
  long long v19 = 0u;
  memset(v18, 0, sizeof(v18));
  *(_OWORD *)long long __p = 0u;
  memset(v16, 0, sizeof(v16));
  char v22 = 0;
  LOBYTE(v21) = 0;
  sub_C50BD8((char *)__p, &v21);
  if (v22 < 0) {
    operator delete((void *)v21);
  }
  BYTE8(v18[8]) = 0;
  uint64_t v20 = 0;
  long long v19 = 0uLL;
  unint64_t v2 = (void **)(a1 + 136);
  unint64_t v3 = *(void **)(a1 + 136);
  *(_DWORD *)(a1 + 128) = v16[0];
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 144);
    uint64_t v5 = v3;
    if ((void *)v4 != v3)
    {
      do
      {
        v4 -= 296;
        sub_9F5E28(a1 + 152, v4);
      }
      while ((void *)v4 != v3);
      uint64_t v5 = *v2;
    }
    *(void *)(a1 + 144) = v3;
    operator delete(v5);
    *unint64_t v2 = 0;
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
  }
  *(_OWORD *)(a1 + 136) = *(_OWORD *)&v16[1];
  *(void **)(a1 + 152) = v16[3];
  memset(&v16[1], 0, 24);
  uint64_t v6 = (void **)(a1 + 160);
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)uint64_t v6 = *(_OWORD *)__p;
  *(void *)(a1 + 176) = *(void *)&v18[0];
  BYTE7(v18[0]) = 0;
  LOBYTE(__p[0]) = 0;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)((char *)&v18[4] + 8);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)((char *)v18 + 8);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)((char *)&v18[1] + 8);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)((char *)&v18[2] + 8);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)((char *)&v18[3] + 8);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)((char *)&v18[5] + 8);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)((char *)&v18[6] + 8);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)((char *)&v18[7] + 8);
  *(unsigned char *)(a1 + 312) = BYTE8(v18[8]);
  int v7 = *(void **)(a1 + 320);
  if (v7)
  {
    *(void *)(a1 + 328) = v7;
    operator delete(v7);
    *(void *)(a1 + 320) = 0;
    *(void *)(a1 + 328) = 0;
    *(void *)(a1 + 336) = 0;
    int v8 = SBYTE7(v18[0]);
    *(_OWORD *)(a1 + 320) = v19;
    *(void *)(a1 + 336) = v20;
    uint64_t v20 = 0;
    long long v19 = 0uLL;
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)(a1 + 320) = v19;
    *(void *)(a1 + 336) = v20;
    uint64_t v20 = 0;
    long long v19 = 0uLL;
  }
  if (v16[1])
  {
    unsigned int v9 = (char *)v16[2];
    uint64_t v10 = v16[1];
    if (v16[2] != v16[1])
    {
      do
      {
        v9 -= 296;
        sub_9F5E28((uint64_t)&v16[3], (uint64_t)v9);
      }
      while (v9 != v16[1]);
      uint64_t v10 = v16[1];
    }
    v16[2] = v16[1];
    operator delete(v10);
  }
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a1 + 88);
  if (*(void *)(a1 + 384) | *(void *)(a1 + 424))
  {
    for (uint64_t i = *(void *)(a1 + 392); i != *(void *)(a1 + 400); i += 16)
    {
      if (*(void *)i)
      {
        free(*(void **)i);
        *(void *)uint64_t i = 0;
      }
      *(void *)(i + 8) = 0;
    }
    *(void *)(a1 + 424) = 0;
  }
  *(uint64x2_t *)(a1 + 344) = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 360), (float)*(unint64_t *)(a1 + 416))));
  *(unsigned char *)(a1 + 368) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 440) = *(void *)(a1 + 432);
  *(_DWORD *)(a1 + 456) = 0;
  if (*(void *)(a1 + 504) | *(void *)(a1 + 544))
  {
    for (uint64_t j = *(void *)(a1 + 512); j != *(void *)(a1 + 520); j += 16)
    {
      if (*(void *)j)
      {
        free(*(void **)j);
        *(void *)uint64_t j = 0;
      }
      *(void *)(j + 8) = 0;
    }
    *(void *)(a1 + 544) = 0;
  }
  *(uint64x2_t *)(a1 + 464) = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 480), (float)*(unint64_t *)(a1 + 536))));
  *(unsigned char *)(a1 + 488) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 560) = *(void *)(a1 + 552);
  *(_DWORD *)(a1 + 576) = 0;
  *(void *)(a1 + 2016) = 0;
  *(void *)(a1 + 2032) = 0;
  *(void *)(a1 + 2024) = 0;
  int v13 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 1352) = v13;
  *(unsigned char *)(a1 + 1356) = *(unsigned char *)(a1 + 28);
  char v14 = *(unsigned char *)(a1 + 72);
  *(unsigned char *)(a1 + 1357) = v14;
  *(_DWORD *)(a1 + 616) = v13;
  *(unsigned char *)(a1 + 634) = 0;
  *(_DWORD *)(a1 + 636) = 0;
  *(unsigned char *)(a1 + 640) = v14;
  v16[0] = (void *)0x1FFFFFFFELL;
  uint64_t result = sub_AD28B0(a1 + 344, (uint64_t *)v16);
  *(_DWORD *)(a1 + 584) = result;
  return result;
}

void sub_AE7BE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 - 81) < 0) {
    operator delete(*(void **)(v2 - 104));
  }
  sub_20ADF74(v2 - 104, (uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_AE7C18(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v18 = 0;
  long long v19 = 0;
  unsigned int v15 = 0;
  int v16 = 0;
  uint64_t v24 = 0;
  int v25 = 0;
  sub_ACDFB0((uint64_t)&v26, v2, a1 + 344, a1 + 464, (void *)(a1 + 592), &v18, &v15, &v24);
  unint64_t v3 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)v19;
  if (v19 && !atomic_fetch_add((atomic_ullong *volatile)v19 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v26 = *(void *)(a1 + 8);
  uint64_t v28 = v6;
  int v27 = *(_DWORD *)(a1 + 24);
  char v29 = *(unsigned char *)(a1 + 28);
  char v31 = *(unsigned char *)(a1 + 72);
  int v30 = *(_DWORD *)(a1 + 120);
  sub_AD8EF4((uint64_t)&v26, (_OWORD *)(a1 + 88));
  sub_C50C4C(a1 + 160, (uint64_t)&v32, (uint64_t)&__p);
  if (v23 < 0) {
    operator delete(__p);
  }
  unint64_t v7 = *(void *)(a1 + 2016);
  unint64_t v8 = *(void *)(a1 + 304);
  if (v7 > v8) {
    unint64_t v8 = *(void *)(a1 + 2016);
  }
  *(void *)(a1 + 2016) = v8 + v7;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v18);
    sub_188FC78(&v18, (uint64_t)"Primary SPA scanned ", 20);
    unsigned int v9 = (void *)std::ostream::operator<<();
    sub_188FC78(v9, (uint64_t)" stop patterns and obtained ", 28);
    uint64_t v10 = (void *)std::ostream::operator<<();
    sub_188FC78(v10, (uint64_t)" journeys in ", 13);
    unsigned int v11 = (void *)std::ostream::operator<<();
    uint64_t v12 = sub_188FC78(v11, (uint64_t)" ms using ", 10);
    int v13 = (void *)sub_38EC58((uint64_t)v12, &v33);
    sub_188FC78(v13, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v15, 2u);
    if (v17 < 0) {
      operator delete(v15);
    }
    if (v21 < 0) {
      operator delete(v20);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return sub_9FD504((uint64_t)&v26);
}

void sub_AE7F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_9FD504((uint64_t)&a69);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_9FD504((uint64_t)&a69);
  _Unwind_Resume(a1);
}

uint64_t sub_AE8000(uint64_t a1, int a2)
{
  int v84 = a2;
  *(_DWORD *)(a1 + 616) = a2;
  long long v3 = *(_OWORD *)(a1 + 104);
  v83[0] = *(_OWORD *)(a1 + 88);
  v83[1] = v3;
  LOBYTE(v83[0]) = 0;
  v82[0] = (uint64_t)v83;
  v82[1] = a1;
  v82[2] = (uint64_t)&v84;
  uint64_t v4 = *(_DWORD **)(a1 + 592);
  LODWORD(v78) = (*(_DWORD *)(a1 + 584) << *v4) | (2 * a2) | 1;
  int v5 = *(_DWORD *)(sub_AF1DB0((uint64_t)(v4 + 2), (unsigned int *)&v78) + 4);
  int v6 = v5;
  unint64_t v8 = (_DWORD *)(a1 + 92);
  unsigned int v7 = *(_DWORD *)(a1 + 92);
  unsigned int v85 = v7;
  if (!*(unsigned char *)(a1 + 49)) {
    goto LABEL_71;
  }
  int v9 = 10 * (v7 - v5);
  if (v9 >= *(_DWORD *)(a1 + 52))
  {
    int v10 = sub_AE96C8(v82, v5);
    LODWORD(v74[0]) = v10;
    unsigned int v7 = v85;
    if (v10 != 0x7FFFFFFF && v10 < (int)v85)
    {
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)&v78);
        sub_188FC78(&v78, (uint64_t)"[", 1);
        uint64_t v12 = (void *)std::ostream::operator<<();
        int v13 = sub_188FC78(v12, (uint64_t)"] Tightening only improved the journey's departure (arrival) from ", 66);
        char v14 = (void *)sub_266E4((uint64_t)v13);
        unsigned int v15 = sub_188FC78(v14, (uint64_t)" to ", 4);
        sub_266E4((uint64_t)v15);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 2u);
        if (v77 < 0) {
          operator delete(__p[0]);
        }
        if (v81 < 0) {
          operator delete(v80);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      unsigned int v7 = v74[0];
      unsigned int v85 = v74[0];
    }
    if (!*(unsigned char *)(a1 + 49)) {
      goto LABEL_71;
    }
  }
  if (v9 < *(_DWORD *)(a1 + 52)) {
    goto LABEL_71;
  }
  int v71 = v5;
  sub_725D0((uint64_t)__p);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v78);
    sub_188FC78(&v78, (uint64_t)"[", 1);
    int v16 = (void *)std::ostream::operator<<();
    sub_188FC78(v16, (uint64_t)"] Journey duration (", 20);
    char v17 = (void *)std::ostream::operator<<();
    sub_188FC78(v17, (uint64_t)" sec) exceeds tightening threshold; performing tightening by time shift", 71);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v74, 2u);
    if (v75 < 0) {
      operator delete(v74[0]);
    }
    if (v81 < 0) {
      operator delete(v80);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  int v18 = *(_DWORD *)(a1 + 60);
  if (v18 > *(_DWORD *)(a1 + 56)) {
    goto LABEL_70;
  }
  while (1)
  {
    *(double *)(a1 + 272) = *(double *)(a1 + 272) + 1.0;
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v78);
      sub_188FC78(&v78, (uint64_t)"[", 1);
      uint64_t v20 = (void *)std::ostream::operator<<();
      sub_188FC78(v20, (uint64_t)"] Examining time shift of ", 26);
      int v21 = v18 % 10;
      char v22 = (void *)std::ostream::operator<<();
      sub_188FC78(v22, (uint64_t)" sec (exponential search)", 25);
      std::stringbuf::str();
      sub_7246C((uint64_t *)v74, 2u);
      if (v75 < 0) {
        operator delete(v74[0]);
      }
      uint64_t v78 = v73;
      *(uint64_t *)((char *)&v78 + *(void *)(v73 - 24)) = v72;
      if (v81 < 0) {
        operator delete(v80);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    else
    {
      int v21 = v18 % 10;
    }
    char v23 = v18 < 0 ? -5 : 5;
    int v24 = v18 / -10 + v5 + (((-103 * (char)(v23 + v21)) >> 15) & 1) + ((-103 * (char)(v23 + v21)) >> 10);
    unsigned int v25 = sub_AE96C8(v82, v24);
    if (*(double *)(a1 + 64) * (double)(int)fabs((double)(int)(10 * (v25 - v85))) >= (double)(int)fabs((double)(10 * (v24 - v5)))) {
      break;
    }
    double v19 = (double)v18 + (double)v18;
    if (v19 >= 0.0)
    {
      if (v19 >= 4.50359963e15) {
        goto LABEL_26;
      }
      uint64_t v26 = (uint64_t)(v19 + v19) + 1;
    }
    else
    {
      if (v19 <= -4.50359963e15) {
        goto LABEL_26;
      }
      uint64_t v26 = (uint64_t)(v19 + v19);
      if (v26 >= 1) {
        --v26;
      }
    }
    double v19 = (double)(v26 >> 1);
LABEL_26:
    int v18 = (int)v19;
    if (*(_DWORD *)(a1 + 56) < (int)v19) {
      goto LABEL_70;
    }
  }
  unsigned int v27 = v25;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v78);
    sub_188FC78(&v78, (uint64_t)"[", 1);
    uint64_t v28 = (void *)std::ostream::operator<<();
    sub_188FC78(v28, (uint64_t)"] Journey duration improved from ", 33);
    char v29 = (void *)std::ostream::operator<<();
    sub_188FC78(v29, (uint64_t)" to ", 4);
    int v30 = (void *)std::ostream::operator<<();
    sub_188FC78(v30, (uint64_t)" sec for time shift of ", 23);
    char v31 = (void *)std::ostream::operator<<();
    sub_188FC78(v31, (uint64_t)" sec", 4);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v74, 2u);
    if (v75 < 0) {
      operator delete(v74[0]);
    }
    uint64_t v78 = v73;
    *(uint64_t *)((char *)&v78 + *(void *)(v73 - 24)) = v72;
    if (v81 < 0) {
      operator delete(v80);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unsigned int v85 = v27;
  if (v24 != v5)
  {
    double v32 = (double)v18 * 0.5;
    if (v32 >= 0.0)
    {
      if (v32 < 4.50359963e15)
      {
        uint64_t v33 = (uint64_t)(v32 + v32) + 1;
        goto LABEL_59;
      }
    }
    else if (v32 > -4.50359963e15)
    {
      uint64_t v33 = (uint64_t)(v32 + v32);
      if (v33 >= 1) {
        --v33;
      }
LABEL_59:
      double v32 = (double)(v33 >> 1);
    }
    double v34 = (double)v18 * 0.25;
    if (v34 >= 0.0)
    {
      if (v34 < 4.50359963e15)
      {
        uint64_t v35 = (uint64_t)(v34 + v34) + 1;
        goto LABEL_67;
      }
    }
    else if (v34 > -4.50359963e15)
    {
      uint64_t v35 = (uint64_t)(v34 + v34);
      if (v35 >= 1) {
        --v35;
      }
LABEL_67:
      double v34 = (double)(v35 >> 1);
    }
    int v36 = (int)v34;
    if (*(_DWORD *)(a1 + 60) > (int)v34)
    {
      int v71 = v24;
      goto LABEL_70;
    }
    int v55 = (int)v32;
    int v71 = v24;
    while (2)
    {
      *(double *)(a1 + 272) = *(double *)(a1 + 272) + 1.0;
      int v57 = v36 + v55;
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)&v78);
        sub_188FC78(&v78, (uint64_t)"[", 1);
        unsigned __int16 v58 = (void *)std::ostream::operator<<();
        sub_188FC78(v58, (uint64_t)"] Examining time shift of ", 26);
        int v59 = v57 % 10;
        unsigned __int16 v60 = (void *)std::ostream::operator<<();
        sub_188FC78(v60, (uint64_t)" sec (binary refinement search)", 31);
        std::stringbuf::str();
        sub_7246C((uint64_t *)v74, 2u);
        int v61 = v71;
        if (v75 < 0) {
          operator delete(v74[0]);
        }
        uint64_t v78 = v73;
        *(uint64_t *)((char *)&v78 + *(void *)(v73 - 24)) = v72;
        if (v81 < 0) {
          operator delete(v80);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      else
      {
        int v59 = v57 % 10;
        int v61 = v71;
      }
      if (v57 < 0) {
        char v62 = -5;
      }
      else {
        char v62 = 5;
      }
      int v63 = v57 / -10 + v5 + (((-103 * (char)(v62 + v59)) >> 15) & 1) + ((-103 * (char)(v62 + v59)) >> 10);
      unsigned int v64 = sub_AE96C8(v82, v63);
      if (*(double *)(a1 + 64) * (double)(int)fabs((double)(int)(10 * (v85 - v64))) >= (double)(int)fabs((double)(10 * (v61 - v63))))
      {
        v55 += v36;
        double v56 = (double)v36 * 0.5;
        int v71 = v61;
        if (v56 >= 0.0) {
          goto LABEL_114;
        }
      }
      else
      {
        unsigned int v65 = v64;
        if (sub_723EC(2u))
        {
          sub_6BAC((uint64_t)&v78);
          sub_188FC78(&v78, (uint64_t)"[", 1);
          uint64_t v66 = (void *)std::ostream::operator<<();
          sub_188FC78(v66, (uint64_t)"] Journey duration improved from ", 33);
          uint64_t v67 = (void *)std::ostream::operator<<();
          sub_188FC78(v67, (uint64_t)" to ", 4);
          uint64_t v68 = (void *)std::ostream::operator<<();
          sub_188FC78(v68, (uint64_t)" sec for time shift of ", 23);
          unint64_t v69 = (void *)std::ostream::operator<<();
          sub_188FC78(v69, (uint64_t)" sec", 4);
          std::stringbuf::str();
          sub_7246C((uint64_t *)v74, 2u);
          if (v75 < 0) {
            operator delete(v74[0]);
          }
          uint64_t v78 = v73;
          *(uint64_t *)((char *)&v78 + *(void *)(v73 - 24)) = v72;
          if (v81 < 0) {
            operator delete(v80);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        unsigned int v85 = v65;
        double v56 = (double)v36 * 0.5;
        int v71 = v63;
        if (v56 >= 0.0)
        {
LABEL_114:
          if (v56 < 4.50359963e15)
          {
            uint64_t v70 = (uint64_t)(v56 + v56) + 1;
            goto LABEL_94;
          }
          goto LABEL_95;
        }
      }
      if (v56 > -4.50359963e15)
      {
        uint64_t v70 = (uint64_t)(v56 + v56);
        if (v70 >= 1) {
          --v70;
        }
LABEL_94:
        double v56 = (double)(v70 >> 1);
      }
LABEL_95:
      int v36 = (int)v56;
      if (*(_DWORD *)(a1 + 60) > (int)v56) {
        break;
      }
      continue;
    }
  }
LABEL_70:
  *(double *)(a1 + 208) = sub_72688((uint64_t)__p);
  unsigned int v7 = v85;
  unint64_t v8 = (_DWORD *)(a1 + 92);
  int v6 = v71;
LABEL_71:
  if (v7 != *v8)
  {
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v78);
      sub_188FC78(&v78, (uint64_t)"[", 1);
      unsigned int v37 = (void *)std::ostream::operator<<();
      unsigned int v38 = sub_188FC78(v37, (uint64_t)"] Shifting ", 11);
      int v39 = sub_188FC78(v38, (uint64_t)"arrival", 7);
      int v40 = sub_188FC78(v39, (uint64_t)" time from ", 11);
      long long v41 = (void *)sub_266E4((uint64_t)v40);
      long long v42 = sub_188FC78(v41, (uint64_t)" to ", 4);
      sub_266E4((uint64_t)v42);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 2u);
      if (v77 < 0) {
        operator delete(__p[0]);
      }
      if (v81 < 0) {
        operator delete(v80);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *(void *)(a1 + 280) = 0x3FF0000000000000;
  }
  int v43 = v84;
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_86;
  }
  int v44 = v84 + 1;
  int v45 = *(_DWORD *)(a1 + 24);
  if (v84 + 1 <= (v45 + 1)) {
    int v44 = v45 + 1;
  }
  if (v84 + 1 < (v45 + 1))
  {
    int v46 = v44 - 1;
    int v47 = 2 * v84 + 3;
    int v48 = v84;
    while (1)
    {
      unsigned __int16 v49 = *(_DWORD **)(a1 + 592);
      LODWORD(v78) = (*(_DWORD *)(a1 + 584) << *v49) | v47;
      if (*(_DWORD *)(sub_AF1DB0((uint64_t)(v49 + 2), (unsigned int *)&v78) + 4) != 0x7FFFFFFF) {
        break;
      }
      ++v48;
      v47 += 2;
      if (v46 == v48) {
        goto LABEL_86;
      }
    }
  }
  else
  {
LABEL_86:
    if (*(_DWORD *)(a1 + 24) >= (*(_DWORD *)(a1 + 124) + v43)) {
      int v48 = *(_DWORD *)(a1 + 124) + v43;
    }
    else {
      int v48 = *(_DWORD *)(a1 + 24);
    }
  }
  *(_DWORD *)(a1 + 616) = v48;
  int v50 = *(_DWORD *)(a1 + 120);
  int v51 = v50 / -10;
  int v52 = v50 % 10;
  if (v50 < 0) {
    char v53 = -5;
  }
  else {
    char v53 = 5;
  }
  sub_AE96C8(v82, v51 + v6 + (((-103 * (char)(v53 + v52)) >> 15) & 1) + ((-103 * (char)(v53 + v52)) >> 10));
  return v85;
}

void sub_AE9190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a22 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a29);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_AE92F4(uint64_t a1, int a2, int a3)
{
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_8;
  }
  int v6 = a2 + 1;
  int v7 = *(_DWORD *)(a1 + 24);
  if (a2 + 1 <= (v7 + 1)) {
    int v6 = v7 + 1;
  }
  if (a2 + 1 < (v7 + 1))
  {
    int v8 = v6 - 1;
    int v9 = 2 * a2 + 3;
    int v10 = a2;
    while (1)
    {
      unsigned int v11 = *(_DWORD **)(a1 + 592);
      LODWORD(v26[0]) = (*(_DWORD *)(a1 + 584) << *v11) | v9;
      if (*(_DWORD *)(sub_AF1DB0((uint64_t)(v11 + 2), (unsigned int *)v26) + 4) != 0x7FFFFFFF) {
        break;
      }
      ++v10;
      v9 += 2;
      if (v8 == v10) {
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    if (*(_DWORD *)(a1 + 24) >= (*(_DWORD *)(a1 + 124) + a2)) {
      int v10 = *(_DWORD *)(a1 + 124) + a2;
    }
    else {
      int v10 = *(_DWORD *)(a1 + 24);
    }
  }
  long long v12 = *(_OWORD *)(a1 + 104);
  v38[0] = *(_OWORD *)(a1 + 88);
  v38[1] = v12;
  DWORD1(v38[0]) = a3;
  *(_DWORD *)(a1 + 1352) = v10;
  sub_AE9984(a1 + 1336, v38);
  sub_AE9C28(a1 + 1336, (uint64_t)v30);
  sub_C50C4C(a1 + 160, a1 + 1864, (uint64_t)&__p);
  if (v29 < 0) {
    operator delete(__p);
  }
  unint64_t v13 = *(void *)(a1 + 2008);
  *(void *)(a1 + 304) -= v13;
  unint64_t v14 = *(void *)(a1 + 2032);
  if (v14 <= v13) {
    unint64_t v14 = v13;
  }
  *(void *)(a1 + 2032) = v14;
  sub_A4D564((uint64_t)v26, (uint64_t)v31, (uint64_t)v32, a1 + 136);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v26);
    sub_188FC78(v26, (uint64_t)"[", 1);
    unsigned int v15 = (void *)std::ostream::operator<<();
    sub_188FC78(v15, (uint64_t)"] McSPA scanned ", 16);
    int v16 = (void *)std::ostream::operator<<();
    sub_188FC78(v16, (uint64_t)" stop patterns and obtained ", 28);
    char v17 = (void *)std::ostream::operator<<();
    sub_188FC78(v17, (uint64_t)" journeys in ", 13);
    int v18 = (void *)std::ostream::operator<<();
    double v19 = sub_188FC78(v18, (uint64_t)" ms using ", 10);
    uint64_t v20 = (void *)sub_38EC58((uint64_t)v19, (unint64_t *)(a1 + 2008));
    sub_188FC78(v20, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v24, 2u);
    if (v25 < 0) {
      operator delete(v24);
    }
    if (v27 < 0) {
      operator delete((void *)v26[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (v36)
  {
    unsigned int v37 = v36;
    operator delete(v36);
  }
  if (v35 < 0) {
    operator delete(v34);
  }
  int v21 = (char *)v31;
  if (v31)
  {
    char v22 = v32;
    char v23 = v31;
    if (v32 != v31)
    {
      do
      {
        v22 -= 296;
        sub_9F5E28((uint64_t)&v33, (uint64_t)v22);
      }
      while (v22 != v21);
      char v23 = v31;
    }
    double v32 = v21;
    operator delete(v23);
  }
}

void sub_AE964C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_9F53E0((uint64_t)&a67);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_9F53E0((uint64_t)&a67);
  _Unwind_Resume(a1);
}

uint64_t sub_AE96C8(uint64_t *a1, int a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  *(_DWORD *)(v2 + 4) = a2;
  sub_AD3BC4(v3 + 608, (_OWORD *)v2);
  sub_C50C4C(v3 + 160, v3 + 1184, (uint64_t)&v20);
  if (v21 < 0) {
    operator delete(v20);
  }
  unint64_t v4 = *(void *)(v3 + 1328);
  *(void *)(v3 + 304) -= v4;
  unint64_t v5 = *(void *)(v3 + 2024);
  if (v5 <= v4) {
    unint64_t v5 = v4;
  }
  *(void *)(v3 + 2024) = v5;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v18);
    sub_188FC78(v18, (uint64_t)"[", 1);
    int v6 = (void *)std::ostream::operator<<();
    sub_188FC78(v6, (uint64_t)"] Secondary SPA scanned ", 24);
    int v7 = (void *)std::ostream::operator<<();
    sub_188FC78(v7, (uint64_t)" stop patterns and obtained ", 28);
    int v8 = (void *)std::ostream::operator<<();
    sub_188FC78(v8, (uint64_t)" journeys in ", 13);
    int v9 = (void *)std::ostream::operator<<();
    int v10 = sub_188FC78(v9, (uint64_t)" ms using ", 10);
    unsigned int v11 = (void *)sub_38EC58((uint64_t)v10, (unint64_t *)(v3 + 1328));
    sub_188FC78(v11, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (v17 < 0) {
      operator delete(__p);
    }
    if (v19 < 0) {
      operator delete((void *)v18[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unint64_t v12 = *(unsigned int *)(v3 + 1040);
  uint64_t v13 = *(void *)(v3 + 800);
  unint64_t v14 = (*(void *)(v3 + 808) - v13) >> 2;
  if (v14 <= v12)
  {
    sub_5BBEE0(v3 + 800, v12 - v14 + 1);
    uint64_t v13 = *(void *)(v3 + 800);
  }
  return *(unsigned int *)(v13 + 4 * v12);
}

void sub_AE9938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_AE9984(uint64_t a1, _OWORD *a2)
{
  sub_725D0((uint64_t)v36);
  long long v4 = a2[1];
  *(_OWORD *)(a1 + 64) = *a2;
  *(_OWORD *)(a1 + 80) = v4;
  sub_AEC1BC(a1);
  uint64_t v5 = *(void *)(a1 + 32);
  v37[0] = 0x1FFFFFFFELL;
  *(_DWORD *)(a1 + 416) = sub_AD28B0(v5, v37);
  sub_AEC414(a1);
  if (*(_DWORD *)(a1 + 100) >= 2u)
  {
    uint64_t v6 = 1;
    while (1)
    {
      if (v6)
      {
        char v17 = *(unsigned int **)(a1 + 320);
        int v18 = *(unsigned int **)(a1 + 328);
        if (v17 != v18)
        {
          uint64_t v19 = *(void *)(a1 + 296);
          uint64_t v20 = *(unsigned int **)(a1 + 320);
          do
          {
            unsigned int v21 = *v20++;
            *(void *)(v19 + (((unint64_t)v21 >> 3) & 0x1FFFFFF8)) &= ~(1 << v21);
          }
          while (v20 != v18);
        }
        *(void *)(a1 + 328) = v17;
        sub_AEC580(a1, v6);
        sub_AEC83C(a1, v6);
        uint64_t v16 = *(void *)(a1 + 320);
        if (v16 == *(void *)(a1 + 328)) {
          goto LABEL_22;
        }
        uint64_t v15 = *(void *)(a1 + 272);
      }
      else
      {
        int v7 = *(unsigned int **)(a1 + 272);
        int v8 = *(unsigned int **)(a1 + 280);
        if (v7 != v8)
        {
          uint64_t v9 = *(void *)(a1 + 248);
          int v10 = *(unsigned int **)(a1 + 272);
          do
          {
            unsigned int v11 = *v10++;
            *(void *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) &= ~(1 << v11);
          }
          while (v10 != v8);
        }
        *(void *)(a1 + 280) = v7;
        sub_AEDE40((void *)a1);
        sub_725D0((uint64_t)v37);
        unint64_t v12 = *(unsigned int **)(a1 + 392);
        uint64_t v13 = *(unsigned int **)(a1 + 400);
        while (v12 != v13)
        {
          unsigned int v14 = *v12++;
          sub_AEFD14(a1, v6, v14);
        }
        *(double *)(a1 + 560) = sub_72688((uint64_t)v37) + *(double *)(a1 + 560);
        uint64_t v15 = *(void *)(a1 + 272);
        if (v15 == *(void *)(a1 + 280)) {
          goto LABEL_22;
        }
        uint64_t v16 = *(void *)(a1 + 320);
      }
      uint64_t v34 = *(void *)(a1 + 208);
      uint64_t v35 = *(void *)(a1 + 176);
      uint64_t v32 = 8 * (*(void *)(a1 + 232) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v33 = *(void *)(a1 + 192);
      uint64_t v22 = *(void *)(a1 + 288);
      uint64_t v23 = 8 * (*(void *)(a1 + 312) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v24 = *(void *)(a1 + 360);
      uint64_t v25 = *(void *)(a1 + 336);
      uint64_t v30 = *(void *)(a1 + 344);
      uint64_t v31 = 8 * (*(void *)(a1 + 264) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v29 = *(void *)(a1 + 392);
      uint64_t v26 = 8 * (*(void *)(a1 + 384) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v27 = *(void *)(a1 + 408);
      unint64_t v28 = v34
          + 12 * v35
          - v33
          + v32
          + v22
          + v31
          - v15
          + v25
          + v23
          + v24
          - (v16
           + v30)
          + v26
          + v27
          - v29
          + sub_BD6170((void *)(a1 + 424))
          + 680;
      if (*(void *)(a1 + 672) > v28) {
        unint64_t v28 = *(void *)(a1 + 672);
      }
      *(void *)(a1 + 672) = v28;
      if (!sub_AE2B6C(a1) && ++v6 < (unint64_t)*(unsigned int *)(a1 + 100)) {
        continue;
      }
      goto LABEL_22;
    }
  }
  LODWORD(v6) = 1;
LABEL_22:
  sub_AEF3A4(a1);
  *(double *)(a1 + 600) = (double)v6;
  *(double *)(a1 + 552) = sub_72688((uint64_t)v36);
}

std::string *sub_AE9C28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0;
  unint64_t v330 = (uint64_t *)(a2 + 8);
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  HIBYTE(v364) = 0;
  LOBYTE(__p[0]) = 0;
  int v328 = (std::string *)(a2 + 32);
  sub_C50BD8((char *)(a2 + 32), (long long *)__p);
  if (SHIBYTE(v364) < 0) {
    operator delete(*(void **)__p);
  }
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  *(unsigned char *)(a2 + 184) = *(unsigned char *)(a1 + 64);
  unsigned int v3 = *(_DWORD *)(a1 + 100);
  if (v3 <= 1) {
    int v4 = 1;
  }
  else {
    int v4 = *(_DWORD *)(a1 + 100);
  }
  int v329 = v4;
  if (v3 >= 2)
  {
    uint64_t v6 = (void *)(a1 + 104);
    __asm { FMOV            V0.2D, #1.0 }
    long long v332 = _Q0;
    int v331 = 1;
    uint64_t v336 = a1 + 104;
    uint64_t v337 = a1;
    while (1)
    {
      __p[0] = 0;
      uint64_t v10 = *(void *)(a1 + 192);
      uint64_t v11 = *(unsigned int *)(sub_AE36B4((uint64_t)v6, __p) + 4);
      __p[0] = 0;
      uint64_t v12 = *(void *)(a1 + 192);
      uint64_t v13 = sub_AE36B4((uint64_t)v6, __p);
      sub_AE32F0((uint64_t)v6, 0, (char *)(v10 + (v11 << 6)), (unsigned char *)(v12 + ((unint64_t)*(unsigned int *)(v13 + 8) << 6)));
      sub_AEFBC0(v6, v331 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * *(_DWORD *)(a1 + 416) + 2, 0);
      __p[0] = 0;
      uint64_t v14 = *(void *)(a1 + 192);
      uint64_t v15 = *(unsigned int *)(sub_AE36B4((uint64_t)v6, __p) + 4);
      __p[0] = 0;
      uint64_t v16 = *(void *)(a1 + 192);
      unint64_t v335 = (unsigned int *)(v14 + (v15 << 6));
      char v333 = (unsigned int *)(v16 + ((unint64_t)*(unsigned int *)(sub_AE36B4((uint64_t)v6, __p) + 8) << 6));
      if (v335 != v333) {
        break;
      }
LABEL_9:
      ++v331;
      uint64_t v6 = (void *)v336;
      if (v331 == v329) {
        goto LABEL_7;
      }
    }
    while (1)
    {
      LOWORD(__p[0]) = 0;
      BYTE2(__p[0]) = 0;
      *(void *)&__p[1] = 0;
      *(void *)&__p[3] = 0x7FFFFFFFFFFFFFFFLL;
      int v364 = 0x7FFFFFFF;
      __int16 v365 = 0;
      unint64_t v366 = 0x8000000080000000;
      __int16 v367 = 0;
      unint64_t v368 = 0x8000000080000000;
      int v369 = 0x7FFFFFFF;
      __int16 v370 = 0;
      unint64_t v371 = 0x8000000080000000;
      __int16 v372 = 0;
      unint64_t v373 = 0x8000000080000000;
      __int16 v374 = 0;
      unint64_t v375 = 0xFFFFFFFF00000000;
      int v376 = -1;
      uint64_t v377 = 0;
      unint64_t v379 = 0;
      uint64_t v380 = 0;
      uint64_t v381 = 0;
      int v378 = 0x7FFFFFFF;
      int v382 = 100;
      int v383 = -1;
      long long v384 = v332;
      long long v385 = v332;
      long long v386 = v332;
      long long v387 = 0u;
      long long v388 = 0u;
      long long v389 = 0u;
      long long v390 = 0u;
      uint64_t v17 = *(void *)(a1 + 24);
      long long v391 = 0u;
      long long v392 = 0u;
      if (!sub_C259C0(v17 + 3896)) {
        goto LABEL_16;
      }
      if (*(void *)(v17 + 3944))
      {
        BOOL v18 = 1;
      }
      else
      {
LABEL_16:
        uint64_t v19 = *(void *)(a1 + 24);
        BOOL v18 = sub_C259D4(v19 + 3896) && *(void *)(v19 + 3960) != 0;
      }
      BYTE1(__p[0]) = v18;
      uint64_t v20 = *(void *)(a1 + 24);
      if (!sub_C259D4(v20 + 3896)) {
        break;
      }
      __p[1] = 2 * (*(void *)(v20 + 3960) != 0);
      if (*v335 != -1) {
        goto LABEL_23;
      }
LABEL_390:
      sub_A29D50((uint64_t)__p);
      unint64_t v303 = *(void *)(a2 + 16);
      if (v303 < *(void *)(a2 + 24))
      {
        sub_9F68D4(*(void *)(a2 + 16), (long long *)__p);
        *(void *)(a2 + 16) = v303 + 296;
        *(void *)(a2 + 16) = v303 + 296;
        int v304 = (void *)*((void *)&v391 + 1);
        if (!*((void *)&v391 + 1)) {
          goto LABEL_395;
        }
LABEL_394:
        *(void *)&long long v392 = v304;
        operator delete(v304);
        goto LABEL_395;
      }
      *(void *)(a2 + 16) = sub_A4D268(v330, (long long *)__p);
      int v304 = (void *)*((void *)&v391 + 1);
      if (*((void *)&v391 + 1)) {
        goto LABEL_394;
      }
LABEL_395:
      if ((void)v390)
      {
        *((void *)&v390 + 1) = v390;
        operator delete((void *)v390);
      }
      if (*((void *)&v388 + 1))
      {
        *(void *)&long long v389 = *((void *)&v388 + 1);
        operator delete(*((void **)&v388 + 1));
      }
      int v305 = (void **)v387;
      if ((void)v387)
      {
        uint64_t v306 = *((void *)&v387 + 1);
        unsigned int v307 = (void *)v387;
        if (*((void *)&v387 + 1) != (void)v387)
        {
          do
          {
            unint64_t v309 = *(void **)(v306 - 40);
            if (v309)
            {
              *(void *)(v306 - 32) = v309;
              operator delete(v309);
            }
            int v310 = (void **)(v306 - 72);
            uint64_t v311 = *(void *)(v306 - 72);
            if (v311)
            {
              uint64_t v312 = *(void *)(v306 - 64);
              unsigned int v308 = *(void **)(v306 - 72);
              if (v312 != v311)
              {
                do
                {
                  if (!*(_DWORD *)(v312 - 8))
                  {
                    int v313 = *(void **)(v312 - 48);
                    if (v313)
                    {
                      *(void *)(v312 - 40) = v313;
                      operator delete(v313);
                    }
                    int v314 = *(void **)(v312 - 80);
                    if (v314)
                    {
                      *(void *)(v312 - 72) = v314;
                      operator delete(v314);
                    }
                    unint64_t v315 = *(void **)(v312 - 104);
                    if (v315)
                    {
                      *(void *)(v312 - 96) = v315;
                      operator delete(v315);
                    }
                  }
                  v312 -= 168;
                }
                while (v312 != v311);
                unsigned int v308 = *v310;
              }
              *(void *)(v306 - 64) = v311;
              operator delete(v308);
            }
            v306 -= 72;
          }
          while (v310 != v305);
          unsigned int v307 = (void *)v387;
        }
        *((void *)&v387 + 1) = v305;
        operator delete(v307);
      }
      if (SHIBYTE(v381) < 0) {
        operator delete(v379);
      }
      v335 += 16;
      if (v335 == v333) {
        goto LABEL_9;
      }
    }
    __p[1] = 0;
    if (*v335 == -1) {
      goto LABEL_390;
    }
LABEL_23:
    unsigned int v21 = *(_DWORD *)(a1 + 416);
    uint64_t v22 = v335;
    int v338 = v331;
LABEL_27:
    v355 = 0;
    v356 = 0;
    unint64_t v357 = 0;
    int v360 = 0;
    uint64_t v361 = 0;
    unint64_t v359 = 0;
    v362[0] = 1;
    *(void *)&v362[4] = 0x8000000080000000;
    *(_WORD *)&v362[12] = 0;
    v362[14] = 0;
    int v415 = -1;
    if (v22[4] == -1)
    {
LABEL_275:
      char v358 = 1;
      unsigned int v239 = v22[7];
      unsigned int v240 = v22[3];
      uint64_t v241 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), v21);
      uint64_t v242 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), *v22);
      *(_DWORD *)long long v395 = 0;
      *(_DWORD *)&v395[4] = v239;
      *(void *)&v395[12] = v241;
      *(void *)&v395[20] = v242;
      *(_DWORD *)&v395[8] = v240;
      int v404 = 1;
      if (v415)
      {
        if (v415 == 1)
        {
          *(_OWORD *)v405 = *(_OWORD *)v395;
          *(_OWORD *)&v405[12] = *(_OWORD *)&v395[12];
          goto LABEL_287;
        }
LABEL_286:
        *(_OWORD *)v405 = *(_OWORD *)v395;
        *(_OWORD *)&v405[12] = *(_OWORD *)&v395[12];
        int v415 = 1;
      }
      else
      {
        if ((void)v412)
        {
          *((void *)&v412 + 1) = v412;
          operator delete((void *)v412);
        }
        if ((void)v409)
        {
          *((void *)&v409 + 1) = v409;
          operator delete((void *)v409);
        }
        if (v407[0])
        {
          v407[1] = v407[0];
          operator delete(v407[0]);
        }
        if (v404)
        {
          if (v404 == 1) {
            goto LABEL_286;
          }
          int v415 = v404;
        }
        else
        {
          sub_9F6FA0((uint64_t)v405, (long long *)v395);
          int v415 = v404;
          if (!v404)
          {
            if ((void)v401)
            {
              *((void *)&v401 + 1) = v401;
              operator delete((void *)v401);
            }
            if (v399[0])
            {
              v399[1] = v399[0];
              operator delete(v399[0]);
            }
            if ((void)v397)
            {
              *((void *)&v397 + 1) = v397;
              operator delete((void *)v397);
            }
          }
        }
      }
LABEL_287:
      unsigned int v21 = *v22;
      uint64_t v236 = (uint64_t)v356;
      if ((unint64_t)v356 >= v357) {
        goto LABEL_288;
      }
LABEL_270:
      *(_DWORD *)(v236 + 160) = v415;
      if (v415 == 1)
      {
        long long v270 = *(_OWORD *)v405;
        *(_OWORD *)(v236 + 12) = *(_OWORD *)&v405[12];
        *(_OWORD *)uint64_t v236 = v270;
        v356 = (char *)(v236 + 168);
        uint64_t v237 = *((void *)&v387 + 1);
        if (*((void *)&v387 + 1) < (unint64_t)v388) {
          goto LABEL_289;
        }
      }
      else
      {
        if (!v415) {
          sub_9F6FA0(v236, (long long *)v405);
        }
        v356 = (char *)(v236 + 168);
        uint64_t v237 = *((void *)&v387 + 1);
        if (*((void *)&v387 + 1) < (unint64_t)v388) {
          goto LABEL_289;
        }
      }
LABEL_274:
      int v238 = sub_A4CECC((void ***)&v387, (uint64_t)&v355);
      goto LABEL_302;
    }
    long long v339 = xmmword_20E12E0;
    __int16 v340 = 0;
    unint64_t v341 = 0x8000000080000000;
    __int16 v342 = 0;
    *(_OWORD *)int v343 = xmmword_20EB6B0;
    *(void *)&v343[16] = 0xFFFFFFFF7FFFFFFFLL;
    long long v345 = 0u;
    long long v346 = 0u;
    long long v347 = 0u;
    int v344 = -1;
    int v348 = 0x7FFFFFFF;
    long long v350 = 0;
    uint64_t v351 = 0;
    v349 = 0;
    char v352 = 1;
    unint64_t v353 = 0x8000000080000000;
    int v354 = 0;
    char v358 = 0;
    uint64_t v24 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 40) + 88), v22[4]);
    *(void *)int v343 = v24;
    uint64_t v25 = *(void *)(v22 + 1);
    *(_DWORD *)&v343[16] = v22[3];
    *(void *)&v343[8] = v25;
    int v344 = *v22;
    unsigned int v26 = v344;
    uint64_t v27 = *(void *)(a1 + 24);
    unint64_t v393 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), v21);
    sub_A1E9A0((uint64_t)v395, v27, v24, v26, 0, 0);
    *(void *)&long long v397 = *(void *)&v396[24] + 12 * *(unsigned int *)&v343[8];
    if (LOBYTE(v399[1])) {
      *(void **)((char *)&v399[1] + 4) = *(void **)&v343[12];
    }
    if (*(void *)&v396[16]) {
      uint64_t v28 = *(unsigned int *)(*(void *)&v396[16] + 4 * ((*(void *)v396 - *(void *)&v395[24]) >> 4));
    }
    else {
      uint64_t v28 = 0;
    }
    sub_A56ED0((uint64_t)v395, &v393, v28);
    _CF = *(void *)v396 < *(void *)&v396[8] && *(void *)v396 >= *(void *)&v395[24];
    uint64_t v30 = (*(void *)v396 - *(void *)&v395[24]) >> 4;
    if (!_CF) {
      LODWORD(v30) = -1;
    }
    *(_DWORD *)&v343[20] = v30;
    uint64_t v31 = *(void *)(a1 + 32);
    uint64_t v32 = (void *)(*(void *)(a1 + 24) + 4136);
    unint64_t v33 = *(void *)v343;
    unsigned int v34 = v344;
    uint64_t v35 = HIDWORD(*(void *)v343);
    if (sub_A10E20(v32, *(int *)&v343[4]))
    {
      int v36 = (int *)sub_A1120C(*(void *)(*v32 + 3944), v33);
    }
    else
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_24F7308))
      {
        sub_518C8(0x3B60u, 0x7FCAu);
        dword_24F7300 = v299 | 0x40000000;
        __cxa_guard_release(&qword_24F7308);
      }
      uint64_t v37 = *v32;
      if (dword_24F7300 == v35)
      {
        unsigned int v38 = *(unsigned int **)(*(void *)(v37 + 3976) + 72);
        if (!v38)
        {
          exception = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(v395, "Realtime stop pattern quad data requested on nullptr buffer");
          int v325 = (void *)sub_2F404((uint64_t)exception, (long long *)v395);
        }
        int v39 = (int *)((char *)v38 + *v38);
        int v40 = (unsigned __int16 *)((char *)v39 - *v39);
        if (*v40 >= 5u && (uint64_t v41 = v40[2]) != 0) {
          long long v42 = (unsigned int *)((char *)v39 + v41 + *(unsigned int *)((char *)v39 + v41));
        }
        else {
          long long v42 = 0;
        }
        int v36 = (int *)sub_A1139C(v42, v33);
      }
      else
      {
        int v36 = (int *)sub_A11500(v37 + 24, v33, 0, "stop pattern");
      }
    }
    int v43 = (unsigned __int16 *)((char *)v36 - *v36);
    if (*v43 >= 9u && (uint64_t v44 = v43[4]) != 0) {
      int v45 = (unsigned int *)((char *)v36 + v44 + *(unsigned int *)((char *)v36 + v44));
    }
    else {
      int v45 = 0;
    }
    int v46 = (void *)sub_A10764(v45, v34);
    uint64_t v47 = 0;
    unint64_t v48 = __ROR8__(*v46, 32);
    uint64_t v49 = *(void *)(v31 + 72) - 1;
    unint64_t v50 = 0xC4CEB9FE1A85EC53
        * ((0xFF51AFD7ED558CCDLL * (v48 ^ (v48 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v48 ^ (v48 >> 33))) >> 33));
    unint64_t v51 = v50 ^ (v50 >> 33);
    uint64_t v52 = *(void *)(v31 + 48);
    uint64_t v53 = v52 + 11;
    uint64_t v54 = -1;
    for (unint64_t i = v51; ; unint64_t i = v47 + v56)
    {
      uint64_t v56 = i & v49;
      unint64_t v57 = i & v49;
      unint64_t v58 = (i & v49) / 0x30;
      unint64_t v59 = v57 % 0x30;
      if (((*(unsigned __int8 *)(v52 + 16 * (v57 / 0x30) + ((v57 % 0x30) >> 3) + 10) >> ((v57 % 0x30) & 7)) & 1) == 0)
      {
        if (v54 == -1) {
          unint64_t v93 = v56;
        }
        else {
          unint64_t v93 = v54;
        }
        goto LABEL_94;
      }
      uint64_t v60 = *(void *)(v52 + 16 * v58);
      if (!*(void *)(v31 + 40)) {
        goto LABEL_73;
      }
      int v61 = (unsigned __int8 *)(v52 + 16 * v58 + 10);
      if ((unsigned __int16)(v57 % 0x30) < 9u)
      {
        __int16 v62 = 0;
        unint64_t v63 = v57 % 0x30;
        goto LABEL_69;
      }
      __int16 v62 = 0;
      unint64_t v63 = (unsigned __int16)(v56 - 48 * v58 - 9) >> 3;
      if ((unsigned __int16)(v56 - 48 * v58 - 9) >> 3)
      {
        __int16 v64 = 0;
        unint64_t v65 = v63 + 1;
        uint64_t v66 = (v63 + 1) & 0x3FFE;
        LOWORD(v63) = v59 - 8 * v66;
        uint64_t v67 = &v61[v66];
        uint64_t v68 = (unsigned __int8 *)(v53 + 16 * v58);
        uint64_t v69 = v66;
        do
        {
          uint64_t v70 = *(v68 - 1);
          int v71 = *v68;
          v68 += 2;
          v62 += byte_20EBFB6[v70];
          v64 += byte_20EBFB6[v71];
          v69 -= 2;
        }
        while (v69);
        v62 += v64;
        if (v65 == v66) {
          goto LABEL_68;
        }
      }
      else
      {
        unint64_t v63 = v57 % 0x30;
        uint64_t v67 = (unsigned __int8 *)(v52 + 16 * v58 + 10);
      }
      do
      {
        int v72 = *v67++;
        v62 += byte_20EBFB6[v72];
        LOWORD(v63) = v63 - 8;
      }
      while ((unsigned __int16)v63 > 8u);
LABEL_68:
      v61 += ((unsigned __int16)(v59 - 9) >> 3) + 1;
LABEL_69:
      uint64_t v73 = (_DWORD *)(v60
                     + 12
                     * (unsigned __int16)(v62 + byte_20EBFB6[~(-1 << v63) & (unint64_t)*v61]));
      if (*(_DWORD *)(v31 + 36) == v73[1] && *(_DWORD *)(v31 + 32) == *v73)
      {
        if (v54 == -1) {
          uint64_t v54 = v56;
        }
        goto LABEL_56;
      }
LABEL_73:
      char v75 = (unsigned __int8 *)(v52 + 16 * v58 + 10);
      if ((unsigned __int16)(v57 % 0x30) < 9u)
      {
        __int16 v76 = 0;
        __int16 v86 = (unsigned __int8 *)(v52 + 16 * v58 + 10);
        unint64_t v77 = v57 % 0x30;
        goto LABEL_83;
      }
      __int16 v76 = 0;
      unint64_t v77 = (unsigned __int16)(v56 - 48 * v58 - 9) >> 3;
      if ((unsigned __int16)(v56 - 48 * v58 - 9) >> 3)
      {
        __int16 v78 = 0;
        unint64_t v79 = v77 + 1;
        uint64_t v80 = (v77 + 1) & 0x3FFE;
        LOWORD(v77) = v59 - 8 * v80;
        char v81 = &v75[v80];
        uint64_t v82 = (unsigned __int8 *)(v53 + 16 * v58);
        uint64_t v83 = v80;
        do
        {
          uint64_t v84 = *(v82 - 1);
          int v85 = *v82;
          v82 += 2;
          v76 += byte_20EBFB6[v84];
          v78 += byte_20EBFB6[v85];
          v83 -= 2;
        }
        while (v83);
        v76 += v78;
        if (v79 == v80) {
          goto LABEL_82;
        }
      }
      else
      {
        unint64_t v77 = v57 % 0x30;
        char v81 = (unsigned __int8 *)(v52 + 16 * v58 + 10);
      }
      do
      {
        int v87 = *v81++;
        v76 += byte_20EBFB6[v87];
        LOWORD(v77) = v77 - 8;
      }
      while ((unsigned __int16)v77 > 8u);
LABEL_82:
      __int16 v86 = &v75[((unsigned __int16)(v59 - 9) >> 3) + 1];
LABEL_83:
      if (v48 == *(void *)(v60
                            + 12
                            * (unsigned __int16)(v76 + byte_20EBFB6[~(-1 << v77) & (unint64_t)*v86])))
      {
        if (v56 != -1)
        {
          if ((unsigned __int16)(v57 % 0x30) < 9u)
          {
            __int16 v90 = 0;
          }
          else
          {
            if ((((_WORD)v56 - 48 * (_WORD)v58 - 8) & 0xFFF8) != 0) {
              __int16 v88 = 8;
            }
            else {
              __int16 v88 = v56 - 48 * v58 - 8;
            }
            unsigned __int16 v89 = ~v88 + v56 - 48 * v58;
            if (v89 < 8u)
            {
              __int16 v90 = 0;
              unint64_t v91 = v57 % 0x30;
              uint64_t v92 = (unsigned __int8 *)(v52 + 16 * v58 + 10);
              goto LABEL_339;
            }
            __int16 v271 = 0;
            __int16 v272 = 0;
            uint64_t v273 = (v89 >> 3) + 1;
            LOWORD(v91) = v59 - 8 * (((v89 >> 3) + 1) & 0x3FFE);
            uint64_t v92 = &v75[v273 & 0x3FFE];
            int v274 = (unsigned __int8 *)(v52 + 16 * v58 + 11);
            uint64_t v275 = v273 & 0x3FFE;
            do
            {
              uint64_t v276 = *(v274 - 1);
              int v277 = *v274;
              v274 += 2;
              v271 += byte_20EBFB6[v276];
              v272 += byte_20EBFB6[v277];
              v275 -= 2;
            }
            while (v275);
            __int16 v90 = v272 + v271;
            if ((v273 & 0x3FFE) != v273)
            {
              do
              {
LABEL_339:
                int v278 = *v92++;
                v90 += byte_20EBFB6[v278];
                LOWORD(v91) = v91 - 8;
              }
              while ((unsigned __int16)v91 > 8u);
            }
            v75 += ((unsigned __int16)(v59 - 9) >> 3) + 1;
            LOBYTE(v59) = v91;
          }
          uint64_t v279 = *(void *)(v31 + 56);
          unsigned __int16 v280 = v90 + byte_20EBFB6[~(-1 << v59) & (unint64_t)*v75];
          uint64_t v281 = v52 + 16 * v58;
          if (*(unsigned __int16 *)(v281 + 8) != v280 || v281 + 16 == v279)
          {
            unint64_t v138 = (_DWORD *)(v60 + 12 * v280);
          }
          else
          {
            uint64_t v283 = v281 + 32;
            do
            {
              if (*(_WORD *)(v283 - 8)) {
                BOOL v284 = 1;
              }
              else {
                BOOL v284 = v283 == v279;
              }
              v283 += 16;
            }
            while (!v284);
            unint64_t v138 = *(_DWORD **)(v283 - 32);
          }
          goto LABEL_139;
        }
        unint64_t v93 = -1;
LABEL_94:
        if (!sub_AD2F40(v31, 1))
        {
          unint64_t v393 = v48;
          int v394 = -1;
          sub_AD3484(v31, (uint64_t *)&v393, v93, v395);
LABEL_138:
          unint64_t v138 = *(_DWORD **)v396;
          goto LABEL_139;
        }
        uint64_t v94 = 0;
        unint64_t v393 = v48;
        int v394 = -1;
        uint64_t v95 = *(void *)(v31 + 72) - 1;
        uint64_t v96 = *(void *)(v31 + 48);
        uint64_t v97 = v96 + 11;
        uint64_t v98 = -1;
        while (2)
        {
          uint64_t v99 = v51 & v95;
          unint64_t v100 = (v51 & v95) / 0x30;
          unint64_t v101 = (v51 & v95) % 0x30;
          if (((*(unsigned __int8 *)(v96 + 16 * v100 + (v101 >> 3) + 10) >> (v101 & 7)) & 1) == 0)
          {
            if (v98 == -1) {
              unint64_t v137 = v51 & v95;
            }
            else {
              unint64_t v137 = v98;
            }
            goto LABEL_137;
          }
          uint64_t v102 = *(void *)(v31 + 40);
          uint64_t v103 = *(void *)(v96 + 16 * v100);
          if (!v102) {
            break;
          }
          unint64_t v104 = (unsigned __int8 *)(v96 + 16 * v100 + 10);
          if ((unsigned __int16)((v51 & v95) % 0x30) < 9u)
          {
            __int16 v105 = 0;
            unint64_t v106 = (v51 & v95) % 0x30;
            goto LABEL_111;
          }
          __int16 v105 = 0;
          unint64_t v106 = (unsigned __int16)(v99 - 48 * v100 - 9) >> 3;
          if (!((unsigned __int16)(v99 - 48 * v100 - 9) >> 3))
          {
            unint64_t v106 = (v51 & v95) % 0x30;
            uint64_t v110 = (unsigned __int8 *)(v96 + 16 * v100 + 10);
            do
            {
LABEL_109:
              int v115 = *v110++;
              v105 += byte_20EBFB6[v115];
              LOWORD(v106) = v106 - 8;
            }
            while ((unsigned __int16)v106 > 8u);
            goto LABEL_110;
          }
          __int16 v107 = 0;
          unint64_t v108 = v106 + 1;
          uint64_t v109 = (v106 + 1) & 0x3FFE;
          LOWORD(v106) = v101 - 8 * v109;
          uint64_t v110 = &v104[v109];
          uint64_t v111 = (unsigned __int8 *)(v97 + 16 * v100);
          uint64_t v112 = v109;
          do
          {
            uint64_t v113 = *(v111 - 1);
            int v114 = *v111;
            v111 += 2;
            v105 += byte_20EBFB6[v113];
            v107 += byte_20EBFB6[v114];
            v112 -= 2;
          }
          while (v112);
          v105 += v107;
          if (v108 != v109) {
            goto LABEL_109;
          }
LABEL_110:
          v104 += ((unsigned __int16)(v101 - 9) >> 3) + 1;
LABEL_111:
          uint64_t v116 = (_DWORD *)(v103
                          + 12
                          * (unsigned __int16)(v105 + byte_20EBFB6[~(-1 << v106) & (unint64_t)*v104]));
          if (*(_DWORD *)(v31 + 36) == v116[1] && *(_DWORD *)(v31 + 32) == *v116)
          {
            if (v98 == -1) {
              uint64_t v98 = v99;
            }
LABEL_98:
            unint64_t v51 = ++v94 + v99;
            continue;
          }
          break;
        }
        uint64_t v118 = (unsigned __int8 *)(v96 + 16 * v100 + 10);
        if ((unsigned __int16)v101 < 9u)
        {
          __int16 v119 = 0;
          unint64_t v130 = (unsigned __int8 *)(v96 + 16 * v100 + 10);
          LOBYTE(v124) = v101;
          goto LABEL_125;
        }
        __int16 v119 = 0;
        uint64_t v120 = (unsigned __int16)(v99 - 48 * v100 - 9) >> 3;
        if (!((unsigned __int16)(v99 - 48 * v100 - 9) >> 3))
        {
          unsigned __int16 v124 = v101;
          uint64_t v125 = (unsigned __int8 *)(v96 + 16 * v100 + 10);
          do
          {
LABEL_123:
            int v131 = *v125++;
            v119 += byte_20EBFB6[v131];
            v124 -= 8;
          }
          while (v124 > 8u);
          goto LABEL_124;
        }
        __int16 v121 = 0;
        uint64_t v122 = v120 + 1;
        uint64_t v123 = (v120 + 1) & 0x3FFE;
        unsigned __int16 v124 = v101 - 8 * v123;
        uint64_t v125 = &v118[v123];
        unsigned __int16 v126 = (unsigned __int8 *)(v97 + 16 * v100);
        uint64_t v127 = v123;
        do
        {
          uint64_t v128 = *(v126 - 1);
          int v129 = *v126;
          v126 += 2;
          v119 += byte_20EBFB6[v128];
          v121 += byte_20EBFB6[v129];
          v127 -= 2;
        }
        while (v127);
        v119 += v121;
        if (v122 != v123) {
          goto LABEL_123;
        }
LABEL_124:
        unint64_t v130 = &v118[((unsigned __int16)(v101 - 9) >> 3) + 1];
LABEL_125:
        if (v48 != *(void *)(v103
                              + 12
                              * (unsigned __int16)(v119
                                                 + byte_20EBFB6[~(-1 << v124) & (unint64_t)*v130])))
          goto LABEL_98;
        if (v99 == -1)
        {
          unint64_t v137 = -1;
LABEL_137:
          sub_AD3484(v31, (uint64_t *)&v393, v137, v395);
          goto LABEL_138;
        }
        if ((unsigned __int16)v101 < 9u)
        {
          __int16 v134 = 0;
        }
        else
        {
          if ((((_WORD)v99 - 48 * (_WORD)v100 - 8) & 0xFFF8) != 0) {
            __int16 v132 = 8;
          }
          else {
            __int16 v132 = v99 - 48 * v100 - 8;
          }
          unsigned __int16 v133 = ~v132 + v99 - 48 * v100;
          if (v133 < 8u)
          {
            __int16 v134 = 0;
            unsigned __int16 v135 = v101;
            uint64_t v136 = (unsigned __int8 *)(v96 + 16 * v100 + 10);
            goto LABEL_358;
          }
          __int16 v285 = 0;
          __int16 v286 = 0;
          uint64_t v287 = (v133 >> 3) + 1;
          unsigned __int16 v135 = v101 - 8 * (((v133 >> 3) + 1) & 0x3FFE);
          uint64_t v136 = &v118[v287 & 0x3FFE];
          uint64_t v288 = (unsigned __int8 *)(v96 + 16 * v100 + 11);
          uint64_t v289 = v287 & 0x3FFE;
          do
          {
            uint64_t v290 = *(v288 - 1);
            int v291 = *v288;
            v288 += 2;
            v285 += byte_20EBFB6[v290];
            v286 += byte_20EBFB6[v291];
            v289 -= 2;
          }
          while (v289);
          __int16 v134 = v286 + v285;
          if ((v287 & 0x3FFE) != v287)
          {
            do
            {
LABEL_358:
              int v292 = *v136++;
              v134 += byte_20EBFB6[v292];
              v135 -= 8;
            }
            while (v135 > 8u);
          }
          v118 += ((unsigned __int16)(v101 - 9) >> 3) + 1;
          LOBYTE(v101) = v135;
        }
        uint64_t v293 = v96 + 16 * v100;
        long long v294 = *(_DWORD ***)(v31 + 56);
        unsigned __int16 v295 = v134 + byte_20EBFB6[~(-1 << v101) & (unint64_t)*v118];
        unint64_t v138 = (_DWORD *)(v103 + 12 * v295);
        if (*(unsigned __int16 *)(v293 + 8) == v295)
        {
          uint64_t v296 = v293 + 16;
          if ((_DWORD **)(v293 + 16) != v294)
          {
            while (1)
            {
              long long v297 = (_DWORD **)v296;
              if (*(_WORD *)(v296 + 8)) {
                break;
              }
              v296 += 16;
              if (v297 + 2 == v294)
              {
                uint64_t v293 = *(void *)(v31 + 56);
                goto LABEL_366;
              }
            }
            uint64_t v293 = v296;
LABEL_366:
            unint64_t v138 = *v297;
            goto LABEL_367;
          }
        }
        else
        {
LABEL_367:
          if ((_DWORD **)v293 != v294 && v102)
          {
            do
            {
              if (*(_DWORD *)(v31 + 36) != v138[1] || *(_DWORD *)(v31 + 32) != *v138) {
                break;
              }
              v138 += 3;
              if (v138 == (_DWORD *)(*(void *)v293 + 12 * *(unsigned __int16 *)(v293 + 8)))
              {
                v293 += 16;
                if ((_DWORD **)v293 != v294)
                {
                  do
                  {
                    if (*(_WORD *)(v293 + 8))
                    {
                      unint64_t v138 = *(_DWORD **)v293;
                      goto LABEL_371;
                    }
                    v293 += 16;
                  }
                  while ((_DWORD **)v293 != v294);
                  unint64_t v138 = *(_DWORD **)(v293 - 16);
                }
                break;
              }
LABEL_371:
              ;
            }
            while ((_DWORD **)v293 != v294);
          }
        }
LABEL_139:
        unsigned int v21 = v138[2];
        if (v21 == -1)
        {
          int v139 = *(_DWORD *)(v31 + 112);
          *(_DWORD *)(v31 + 112) = v139 + 1;
          v138[2] = v139;
          unint64_t v141 = *(char **)(v31 + 96);
          unint64_t v140 = *(void *)(v31 + 104);
          if ((unint64_t)v141 < v140)
          {
            *(void *)unint64_t v141 = v48;
            uint64_t v142 = (uint64_t)(v141 + 8);
            goto LABEL_164;
          }
          uint64_t v143 = (char **)(v31 + 88);
          unint64_t v144 = *(char **)(v31 + 88);
          int v145 = (char *)(v141 - v144);
          uint64_t v146 = (v141 - v144) >> 3;
          unint64_t v147 = v146 + 1;
          if ((unint64_t)(v146 + 1) >> 61) {
            sub_2E00();
          }
          uint64_t v148 = v140 - (void)v144;
          if (v148 >> 2 > v147) {
            unint64_t v147 = v148 >> 2;
          }
          if ((unint64_t)v148 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v149 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v149 = v147;
          }
          if (v149)
          {
            if (v149 >> 61) {
              sub_188D718();
            }
            unint64_t v150 = v149;
            __int16 v151 = operator new(8 * v149);
            uint64_t v143 = (char **)(v31 + 88);
            unint64_t v149 = v150;
            int v145 = (char *)(v141 - v144);
            uint64_t v152 = (unint64_t *)&v151[8 * v146];
            *uint64_t v152 = v48;
            uint64_t v142 = (uint64_t)(v152 + 1);
            if (v141 == v144) {
              goto LABEL_162;
            }
LABEL_155:
            unint64_t v153 = v141 - 8 - v144;
            if (v153 < 0x58) {
              goto LABEL_432;
            }
            if ((unint64_t)(v141 - v151 - (void)v145) < 0x20) {
              goto LABEL_432;
            }
            uint64_t v154 = (v153 >> 3) + 1;
            uint64_t v155 = 8 * (v154 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v156 = &v141[-v155];
            uint64_t v152 = (unint64_t *)((char *)v152 - v155);
            uint64_t v157 = &v151[8 * v146 - 16];
            uint64_t v158 = v141 - 16;
            uint64_t v159 = v154 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v160 = *(_OWORD *)v158;
              *(v157 - 1) = *((_OWORD *)v158 - 1);
              *uint64_t v157 = v160;
              v157 -= 2;
              v158 -= 32;
              v159 -= 4;
            }
            while (v159);
            unint64_t v141 = v156;
            if (v154 != (v154 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_432:
              do
              {
                unint64_t v161 = *((void *)v141 - 1);
                v141 -= 8;
                *--uint64_t v152 = v161;
              }
              while (v141 != v144);
            }
            unint64_t v141 = *v143;
          }
          else
          {
            __int16 v151 = 0;
            uint64_t v152 = (unint64_t *)(8 * v146);
            *(void *)(8 * v146) = v48;
            uint64_t v142 = 8 * v146 + 8;
            if (v141 != v144) {
              goto LABEL_155;
            }
          }
LABEL_162:
          *(void *)(v31 + 88) = v152;
          *(void *)(v31 + 96) = v142;
          *(void *)(v31 + 104) = &v151[8 * v149];
          if (v141) {
            operator delete(v141);
          }
LABEL_164:
          *(void *)(v31 + 96) = v142;
          unsigned int v21 = v138[2];
        }
        uint64_t v162 = (void *)(*(void *)(v337 + 24) + 4136);
        unint64_t v163 = *(void *)v343;
        unsigned int v164 = *(_DWORD *)&v343[20];
        uint64_t v165 = HIDWORD(*(void *)v343);
        if (sub_A10E20(v162, *(int *)&v343[4]))
        {
          uint64_t v166 = (int *)sub_A1120C(*(void *)(*v162 + 3944), v163);
        }
        else
        {
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_24F7308))
          {
            sub_518C8(0x3B60u, 0x7FCAu);
            dword_24F7300 = v300 | 0x40000000;
            __cxa_guard_release(&qword_24F7308);
          }
          uint64_t v167 = *v162;
          if (dword_24F7300 == v165)
          {
            int v168 = *(unsigned int **)(*(void *)(v167 + 3976) + 72);
            if (!v168)
            {
              unsigned int v322 = __cxa_allocate_exception(0x40uLL);
              sub_5E5C(v395, "Realtime stop pattern quad data requested on nullptr buffer");
              uint64_t v323 = (void *)sub_2F404((uint64_t)v322, (long long *)v395);
            }
            uint64_t v169 = (int *)((char *)v168 + *v168);
            uint64_t v170 = (unsigned __int16 *)((char *)v169 - *v169);
            if (*v170 >= 5u && (uint64_t v171 = v170[2]) != 0) {
              int v172 = (unsigned int *)((char *)v169 + v171 + *(unsigned int *)((char *)v169 + v171));
            }
            else {
              int v172 = 0;
            }
            uint64_t v166 = (int *)sub_A1139C(v172, v163);
          }
          else
          {
            uint64_t v166 = (int *)sub_A11500(v167 + 24, v163, 0, "stop pattern");
          }
        }
        uint64_t v173 = (unsigned __int16 *)((char *)v166 - *v166);
        if (*v173 >= 9u && (uint64_t v174 = v173[4]) != 0) {
          __int16 v175 = (unsigned int *)((char *)v166 + v174 + *(unsigned int *)((char *)v166 + v174));
        }
        else {
          __int16 v175 = 0;
        }
        DWORD1(v339) = 10 * *(_DWORD *)(sub_A10764(v175, v164) + 8);
        uint64_t v176 = *(void *)(v337 + 24);
        unint64_t v177 = *(void *)v343;
        uint64_t v178 = (uint64_t *)(v176 + 4136);
        unsigned int v179 = *(_DWORD *)&v343[20];
        int v180 = *(_DWORD *)&v343[8];
        uint64_t v181 = HIDWORD(*(void *)v343);
        if (sub_A10E20((void *)(v176 + 4136), *(int *)&v343[4]))
        {
          int v182 = *(unsigned int **)(*(void *)(*v178 + 3944) + 72);
          if (!v182)
          {
            int v316 = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(v395, "Incident stop pattern quad data requested on nullptr buffer");
            uint64_t v317 = (void *)sub_2F404((uint64_t)v316, (long long *)v395);
          }
          goto LABEL_186;
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F7308))
        {
          sub_518C8(0x3B60u, 0x7FCAu);
          dword_24F7300 = v301 | 0x40000000;
          __cxa_guard_release(&qword_24F7308);
        }
        uint64_t v183 = *v178;
        if (dword_24F7300 != v181)
        {
          int32x2_t v184 = sub_A10B80(v183 + 24, v177, 0);
          unsigned __int16 v185 = &v184[-*(int *)v184];
          if (*(unsigned __int16 *)v185 >= 5u) {
            goto LABEL_187;
          }
LABEL_190:
          uint64_t v186 = 0;
          goto LABEL_191;
        }
        int v182 = *(unsigned int **)(*(void *)(v183 + 3976) + 72);
        if (!v182)
        {
          int v326 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(v395, "Realtime stop pattern quad data requested on nullptr buffer");
          int v327 = (void *)sub_2F404((uint64_t)v326, (long long *)v395);
        }
LABEL_186:
        int32x2_t v184 = (char *)v182 + *v182;
        unsigned __int16 v185 = &v184[-*(int *)v184];
        if (*(unsigned __int16 *)v185 < 5u) {
          goto LABEL_190;
        }
LABEL_187:
        uint64_t v186 = *((unsigned __int16 *)v185 + 2);
        if (v186) {
          v186 += (uint64_t)&v184[*(unsigned int *)&v184[v186]];
        }
LABEL_191:
        long long v187 = (int *)(v186 + 4 * v177 + 4 + *(unsigned int *)(v186 + 4 * v177 + 4));
        int v188 = (unsigned __int16 *)((char *)v187 - *v187);
        if (*v188 >= 9u && (uint64_t v189 = v188[4]) != 0) {
          unsigned int v190 = (unsigned int *)((char *)v187 + v189 + *(unsigned int *)((char *)v187 + v189));
        }
        else {
          unsigned int v190 = 0;
        }
        uint64_t v191 = sub_A10764(v190, v179);
        uint64_t v192 = &v184[-*(int *)v184];
        if (*(unsigned __int16 *)v192 < 0xBu)
        {
          int v193 = 0;
          uint64_t v194 = (unsigned __int16 *)((char *)v187 - *v187);
          if (*v194 >= 0x11u) {
            goto LABEL_199;
          }
LABEL_202:
          LODWORD(v195) = 0;
          goto LABEL_203;
        }
        int v193 = (unsigned int *)*((unsigned __int16 *)v192 + 5);
        if (v193) {
          int v193 = (unsigned int *)((char *)v193 + (void)v184 + *(unsigned int *)((char *)v193 + (void)v184));
        }
        uint64_t v194 = (unsigned __int16 *)((char *)v187 - *v187);
        if (*v194 < 0x11u) {
          goto LABEL_202;
        }
LABEL_199:
        uint64_t v195 = v194[8];
        if (v194[8]) {
          LODWORD(v195) = *(int *)((char *)v187 + v195);
        }
LABEL_203:
        uint64_t v196 = sub_A108C4(v193, v195+ *(int *)((char *)v187 + v194[2] + *(unsigned int *)((char *)v187 + v194[2])) * v180+ *(unsigned __int8 *)(v191 + 14));
        if (v196)
        {
          uint64_t v197 = __ROR8__(*(void *)v196, 32);
          int v198 = *(_DWORD *)(v196 + 8);
        }
        else
        {
          int v198 = 0;
          uint64_t v197 = 0xFFFFFFFFLL;
        }
        *(void *)long long v395 = v197;
        *(_DWORD *)&v395[8] = v198;
        uint64_t v199 = (int *)sub_A11094((void *)(v176 + 4136), v177);
        uint64_t v200 = (unsigned __int16 *)((char *)v199 - *v199);
        if (*v200 >= 9u && (uint64_t v201 = v200[4]) != 0) {
          int v202 = (unsigned int *)((char *)v199 + v201 + *(unsigned int *)((char *)v199 + v201));
        }
        else {
          int v202 = 0;
        }
        unsigned int v203 = *(unsigned __int16 *)(sub_A10764(v202, v179) + 12);
        if (*(_DWORD *)&v343[12] == -1) {
          int v204 = 0x7FFFFFFF;
        }
        else {
          int v204 = *(_DWORD *)&v343[16];
        }
        *((void *)&v339 + 1) = sub_A0FAA0((uint64_t *)(v176 + 4184), (unsigned int *)v395, v203, v204);
        __int16 v340 = v205;
        uint64_t v206 = *(void *)(v337 + 24);
        unint64_t v207 = *(void *)v343;
        uint64_t v208 = (uint64_t *)(v206 + 4136);
        unsigned int v209 = v344;
        int v210 = *(_DWORD *)&v343[8];
        uint64_t v211 = HIDWORD(*(void *)v343);
        if (sub_A10E20((void *)(v206 + 4136), *(int *)&v343[4]))
        {
          __int16 v212 = *(unsigned int **)(*(void *)(*v208 + 3944) + 72);
          if (!v212)
          {
            uint64_t v318 = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(v395, "Incident stop pattern quad data requested on nullptr buffer");
            uint64_t v319 = (void *)sub_2F404((uint64_t)v318, (long long *)v395);
          }
          goto LABEL_219;
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F7308))
        {
          sub_518C8(0x3B60u, 0x7FCAu);
          dword_24F7300 = v302 | 0x40000000;
          __cxa_guard_release(&qword_24F7308);
        }
        uint64_t v213 = *v208;
        if (dword_24F7300 != v211)
        {
          uint64_t v214 = sub_A10B80(v213 + 24, v207, 0);
          uint64_t v215 = &v214[-*(int *)v214];
          if (*(unsigned __int16 *)v215 >= 5u) {
            goto LABEL_220;
          }
LABEL_223:
          uint64_t v216 = 0;
          goto LABEL_224;
        }
        __int16 v212 = *(unsigned int **)(*(void *)(v213 + 3976) + 72);
        if (!v212)
        {
          uint64_t v320 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(v395, "Realtime stop pattern quad data requested on nullptr buffer");
          long long v321 = (void *)sub_2F404((uint64_t)v320, (long long *)v395);
        }
LABEL_219:
        uint64_t v214 = (char *)v212 + *v212;
        uint64_t v215 = &v214[-*(int *)v214];
        if (*(unsigned __int16 *)v215 < 5u) {
          goto LABEL_223;
        }
LABEL_220:
        uint64_t v216 = *((unsigned __int16 *)v215 + 2);
        if (v216) {
          v216 += (uint64_t)&v214[*(unsigned int *)&v214[v216]];
        }
LABEL_224:
        uint64_t v217 = (int *)(v216 + 4 * v207 + 4 + *(unsigned int *)(v216 + 4 * v207 + 4));
        int v218 = (unsigned __int16 *)((char *)v217 - *v217);
        if (*v218 >= 9u && (uint64_t v219 = v218[4]) != 0) {
          uint64_t v220 = (unsigned int *)((char *)v217 + v219 + *(unsigned int *)((char *)v217 + v219));
        }
        else {
          uint64_t v220 = 0;
        }
        uint64_t v221 = sub_A10764(v220, v209);
        uint64_t v222 = &v214[-*(int *)v214];
        if (*(unsigned __int16 *)v222 < 0xBu)
        {
          uint64_t v223 = 0;
          int v224 = (unsigned __int16 *)((char *)v217 - *v217);
          if (*v224 >= 0x11u) {
            goto LABEL_232;
          }
LABEL_235:
          LODWORD(v225) = 0;
          goto LABEL_236;
        }
        uint64_t v223 = (unsigned int *)*((unsigned __int16 *)v222 + 5);
        if (v223) {
          uint64_t v223 = (unsigned int *)((char *)v223 + (void)v214 + *(unsigned int *)((char *)v223 + (void)v214));
        }
        int v224 = (unsigned __int16 *)((char *)v217 - *v217);
        if (*v224 < 0x11u) {
          goto LABEL_235;
        }
LABEL_232:
        uint64_t v225 = v224[8];
        if (v224[8]) {
          LODWORD(v225) = *(int *)((char *)v217 + v225);
        }
LABEL_236:
        uint64_t v226 = sub_A108C4(v223, v225+ *(int *)((char *)v217 + v224[2] + *(unsigned int *)((char *)v217 + v224[2])) * v210+ *(unsigned __int8 *)(v221 + 14));
        if (v226)
        {
          uint64_t v227 = __ROR8__(*(void *)v226, 32);
          int v228 = *(_DWORD *)(v226 + 8);
        }
        else
        {
          int v228 = 0;
          uint64_t v227 = 0xFFFFFFFFLL;
        }
        *(void *)long long v395 = v227;
        *(_DWORD *)&v395[8] = v228;
        uint64_t v229 = (int *)sub_A11094((void *)(v206 + 4136), v207);
        uint64_t v230 = (unsigned __int16 *)((char *)v229 - *v229);
        if (*v230 >= 9u && (uint64_t v231 = v230[4]) != 0) {
          long long v232 = (unsigned int *)((char *)v229 + v231 + *(unsigned int *)((char *)v229 + v231));
        }
        else {
          long long v232 = 0;
        }
        unsigned int v233 = *(unsigned __int16 *)(sub_A10764(v232, v209) + 12);
        if (*(_DWORD *)&v343[12] == -1) {
          int v234 = 0x7FFFFFFF;
        }
        else {
          int v234 = *(_DWORD *)&v343[16];
        }
        unint64_t v341 = sub_A0FDF4((uint64_t *)(v206 + 4184), (unsigned int *)v395, v233, v234);
        __int16 v342 = v235;
        int v404 = -1;
        sub_9F6FA0((uint64_t)v395, &v339);
        int v404 = 0;
        if (v415)
        {
          sub_9F6FA0((uint64_t)v405, (long long *)v395);
          a1 = v337;
          int v415 = v404;
          if (!v404) {
            goto LABEL_256;
          }
        }
        else
        {
          *(_OWORD *)v405 = *(_OWORD *)v395;
          *(_OWORD *)&v405[16] = *(_OWORD *)&v395[16];
          v406[0] = *(_OWORD *)v396;
          *(_OWORD *)((char *)v406 + 12) = *(_OWORD *)&v396[12];
          a1 = v337;
          if (v407[0])
          {
            v407[1] = v407[0];
            operator delete(v407[0]);
          }
          *(_OWORD *)long long v407 = v397;
          uint64_t v408 = v398;
          uint64_t v398 = 0;
          long long v397 = 0uLL;
          if ((void)v409)
          {
            *((void *)&v409 + 1) = v409;
            operator delete((void *)v409);
          }
          long long v409 = *(_OWORD *)v399;
          int v410 = v399[2];
          memset(v399, 0, sizeof(v399));
          int v411 = v400;
          if ((void)v412)
          {
            *((void *)&v412 + 1) = v412;
            operator delete((void *)v412);
          }
          long long v412 = v401;
          uint64_t v413 = v402;
          uint64_t v402 = 0;
          long long v401 = 0uLL;
          long long v414 = v403;
          if (!v404)
          {
LABEL_256:
            if ((void)v401)
            {
              *((void *)&v401 + 1) = v401;
              operator delete((void *)v401);
            }
            if (v399[0])
            {
              v399[1] = v399[0];
              operator delete(v399[0]);
            }
            if ((void)v397)
            {
              *((void *)&v397 + 1) = v397;
              operator delete((void *)v397);
            }
          }
        }
        if (v349)
        {
          long long v350 = v349;
          operator delete(v349);
        }
        if (*((void *)&v346 + 1))
        {
          *(void *)&long long v347 = *((void *)&v346 + 1);
          operator delete(*((void **)&v346 + 1));
        }
        if ((void)v345)
        {
          *((void *)&v345 + 1) = v345;
          operator delete((void *)v345);
        }
        if (v22[4] == -1) {
          goto LABEL_275;
        }
        uint64_t v236 = (uint64_t)v356;
        if ((unint64_t)v356 < v357) {
          goto LABEL_270;
        }
LABEL_288:
        v356 = (char *)sub_A4CBF4((uint64_t *)&v355, (uint64_t)v405);
        uint64_t v237 = *((void *)&v387 + 1);
        if (*((void *)&v387 + 1) >= (unint64_t)v388) {
          goto LABEL_274;
        }
LABEL_289:
        *(void *)uint64_t v237 = 0;
        *(void *)(v237 + 8) = 0;
        *(void *)(v237 + 16) = 0;
        unsigned int v243 = (char *)v355;
        unsigned __int16 v244 = v356;
        int64_t v245 = v356 - (unsigned char *)v355;
        if (v356 != v355)
        {
          unint64_t v246 = 0xCF3CF3CF3CF3CF3DLL * (v245 >> 3);
          if (v246 >= 0x186186186186187) {
            sub_2E00();
          }
          uint64_t v247 = (char *)operator new(v245);
          uint64_t v248 = 0;
          *(void *)uint64_t v237 = v247;
          *(void *)(v237 + 8) = v247;
          *(void *)(v237 + 16) = &v247[168 * v246];
          do
          {
            uint64_t v250 = (long long *)&v247[v248];
            uint64_t v251 = (long long *)&v243[v248];
            *(_DWORD *)&v247[v248 + 160] = *(_DWORD *)&v243[v248 + 160];
            int v252 = *(_DWORD *)&v243[v248 + 160];
            if (v252 == 1)
            {
              long long v249 = *v251;
              *(long long *)((char *)v250 + 12) = *(long long *)((char *)v251 + 12);
              long long *v250 = v249;
            }
            else if (!v252)
            {
              sub_9F6FA0((uint64_t)v250, v251);
            }
            v248 += 168;
          }
          while (&v243[v248] != v244);
          *(void *)(v237 + 8) = &v247[v248];
        }
        char v253 = v358;
        *(void *)(v237 + 32) = 0;
        *(unsigned char *)(v237 + 24) = v253;
        *(void *)(v237 + 40) = 0;
        *(void *)(v237 + 48) = 0;
        uint64_t v254 = v359;
        uint64_t v255 = v360 - (unsigned char *)v359;
        if (v360 != v359)
        {
          if (0xCCCCCCCCCCCCCCCDLL * (v255 >> 3) >= 0x666666666666667) {
            sub_2E00();
          }
          uint64_t v256 = (char *)operator new(v360 - (unsigned char *)v359);
          *(void *)(v237 + 32) = v256;
          *(void *)(v237 + 40) = v256;
          char v257 = &v256[8 * (v255 >> 3)];
          *(void *)(v237 + 48) = v257;
          memcpy(v256, v254, v255 - 7);
          *(void *)(v237 + 40) = v257;
        }
        uint64_t v258 = *(void *)v362;
        *(void *)(v237 + 63) = *(void *)&v362[7];
        *(void *)(v237 + 56) = v258;
        int v238 = (char *)(v237 + 72);
LABEL_302:
        *((void *)&v387 + 1) = v238;
        unsigned int v260 = v22[5];
        *(_DWORD *)long long v395 = v338 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * v21 + 1;
        int v259 = *(_DWORD *)v395;
        uint64_t v261 = *(void *)(a1 + 192);
        uint64_t v262 = *(unsigned int *)(sub_AE36B4(v336, (unsigned int *)v395) + 4);
        *(_DWORD *)long long v395 = v259;
        uint64_t v263 = *(void *)(a1 + 192);
        uint64_t v22 = (unsigned int *)(v261 + (v262 << 6));
        uint8x8_t v264 = (unsigned int *)(v263
                              + ((unint64_t)*(unsigned int *)(sub_AE36B4(v336, (unsigned int *)v395) + 8) << 6));
        if (v22 == v264)
        {
LABEL_305:
          uint64_t v22 = 0;
        }
        else
        {
          while (v22[6] != v260)
          {
            v22 += 16;
            if (v22 == v264) {
              goto LABEL_305;
            }
          }
        }
        if (!v415)
        {
          if ((void)v412)
          {
            *((void *)&v412 + 1) = v412;
            operator delete((void *)v412);
          }
          if ((void)v409)
          {
            *((void *)&v409 + 1) = v409;
            operator delete((void *)v409);
          }
          if (v407[0])
          {
            v407[1] = v407[0];
            operator delete(v407[0]);
          }
        }
        if (v359)
        {
          int v360 = v359;
          operator delete(v359);
        }
        int v265 = (char *)v355;
        if (v355)
        {
          unint64_t v266 = v356;
          uint64_t v23 = v355;
          if (v356 != v355)
          {
            do
            {
              if (!*((_DWORD *)v266 - 2))
              {
                int v267 = (void *)*((void *)v266 - 6);
                if (v267)
                {
                  *((void *)v266 - 5) = v267;
                  operator delete(v267);
                }
                int v268 = (void *)*((void *)v266 - 10);
                if (v268)
                {
                  *((void *)v266 - 9) = v268;
                  operator delete(v268);
                }
                int v269 = (void *)*((void *)v266 - 13);
                if (v269)
                {
                  *((void *)v266 - 12) = v269;
                  operator delete(v269);
                }
              }
              v266 -= 168;
            }
            while (v266 != v265);
            uint64_t v23 = v355;
          }
          v356 = v265;
          operator delete(v23);
        }
        --v338;
        if (*v22 == -1) {
          goto LABEL_390;
        }
        goto LABEL_27;
      }
LABEL_56:
      ++v47;
    }
  }
LABEL_7:
  uint64_t result = std::string::operator=(v328, (const std::string *)(a1 + 528));
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a1 + 616);
  *(_OWORD *)(a2 + 136) = *(_OWORD *)(a1 + 632);
  *(_OWORD *)(a2 + 152) = *(_OWORD *)(a1 + 648);
  *(_OWORD *)(a2 + 168) = *(_OWORD *)(a1 + 664);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 552);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 568);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 584);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 600);
  return result;
}

void sub_AEBC8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  __cxa_guard_abort(&qword_24F7308);
  if (__p)
  {
    operator delete(__p);
    uint64_t v67 = a52;
    if (!a52)
    {
LABEL_3:
      uint64_t v68 = a49;
      if (!a49) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v67 = a52;
    if (!a52) {
      goto LABEL_3;
    }
  }
  operator delete(v67);
  uint64_t v68 = a49;
  if (!a49)
  {
LABEL_4:
    if (LODWORD(STACK[0x470])) {
      goto LABEL_13;
    }
LABEL_9:
    uint64_t v69 = (void *)STACK[0x448];
    if (STACK[0x448])
    {
      STACK[0x450] = (unint64_t)v69;
      operator delete(v69);
      uint64_t v70 = (void *)STACK[0x428];
      if (!STACK[0x428])
      {
LABEL_11:
        int v71 = (void *)STACK[0x410];
        if (!STACK[0x410]) {
          goto LABEL_13;
        }
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v70 = (void *)STACK[0x428];
      if (!STACK[0x428]) {
        goto LABEL_11;
      }
    }
    STACK[0x430] = (unint64_t)v70;
    operator delete(v70);
    int v71 = (void *)STACK[0x410];
    if (!STACK[0x410])
    {
LABEL_13:
      if (a66)
      {
        operator delete(a66);
        int v72 = a62;
        if (!a62)
        {
LABEL_15:
          uint64_t v73 = (void *)STACK[0x300];
          if (!STACK[0x300]) {
            goto LABEL_16;
          }
          goto LABEL_40;
        }
      }
      else
      {
        int v72 = a62;
        if (!a62) {
          goto LABEL_15;
        }
      }
      uint64_t v79 = a63;
      uint64_t v80 = v72;
      if ((void *)a63 != v72)
      {
        do
        {
          if (!*(_DWORD *)(v79 - 8))
          {
            char v81 = *(void **)(v79 - 48);
            if (v81)
            {
              *(void *)(v79 - 40) = v81;
              operator delete(v81);
            }
            uint64_t v82 = *(void **)(v79 - 80);
            if (v82)
            {
              *(void *)(v79 - 72) = v82;
              operator delete(v82);
            }
            uint64_t v83 = *(void **)(v79 - 104);
            if (v83)
            {
              *(void *)(v79 - 96) = v83;
              operator delete(v83);
            }
          }
          v79 -= 168;
        }
        while ((void *)v79 != v72);
        uint64_t v80 = a62;
      }
      operator delete(v80);
      uint64_t v73 = (void *)STACK[0x300];
      if (!STACK[0x300])
      {
LABEL_16:
        __int16 v74 = (void *)STACK[0x2E8];
        if (!STACK[0x2E8]) {
          goto LABEL_17;
        }
        goto LABEL_41;
      }
LABEL_40:
      STACK[0x308] = (unint64_t)v73;
      operator delete(v73);
      __int16 v74 = (void *)STACK[0x2E8];
      if (!STACK[0x2E8])
      {
LABEL_17:
        char v75 = (void *)STACK[0x2D0];
        if (!STACK[0x2D0]) {
          goto LABEL_18;
        }
        goto LABEL_42;
      }
LABEL_41:
      STACK[0x2F0] = (unint64_t)v74;
      operator delete(v74);
      char v75 = (void *)STACK[0x2D0];
      if (!STACK[0x2D0])
      {
LABEL_18:
        unint64_t v76 = STACK[0x2B8];
        if (!STACK[0x2B8]) {
          goto LABEL_19;
        }
        goto LABEL_43;
      }
LABEL_42:
      STACK[0x2D8] = (unint64_t)v75;
      operator delete(v75);
      unint64_t v76 = STACK[0x2B8];
      if (!STACK[0x2B8])
      {
LABEL_19:
        if (SLOBYTE(STACK[0x277]) < 0) {
          goto LABEL_20;
        }
        goto LABEL_47;
      }
LABEL_43:
      uint64_t v84 = (void **)STACK[0x2C0];
      int v85 = (void *)v76;
      if (STACK[0x2C0] != v76)
      {
        do
        {
          v84 -= 9;
          sub_9F5F58(a9, v84);
        }
        while (v84 != (void **)v76);
        int v85 = (void *)STACK[0x2B8];
      }
      STACK[0x2C0] = v76;
      operator delete(v85);
      if (SLOBYTE(STACK[0x277]) < 0)
      {
LABEL_20:
        operator delete((void *)STACK[0x260]);
        unint64_t v77 = *a10;
        if (*a10) {
          goto LABEL_21;
        }
        goto LABEL_48;
      }
LABEL_47:
      unint64_t v77 = *a10;
      if (*a10)
      {
LABEL_21:
        *(void *)(a20 + 200) = v77;
        operator delete(v77);
        if ((*(char *)(a20 + 55) & 0x80000000) == 0) {
          goto LABEL_22;
        }
        goto LABEL_49;
      }
LABEL_48:
      if ((*(char *)(a20 + 55) & 0x80000000) == 0)
      {
LABEL_22:
        __int16 v78 = *a13;
        if (!*a13) {
          goto LABEL_23;
        }
        goto LABEL_50;
      }
LABEL_49:
      operator delete(*a11);
      __int16 v78 = *a13;
      if (!*a13) {
LABEL_23:
      }
        _Unwind_Resume(a1);
LABEL_50:
      uint64_t v86 = a20;
      uint64_t v87 = *(void *)(a20 + 16);
      __int16 v88 = v78;
      if ((void *)v87 != v78)
      {
        do
        {
          v87 -= 296;
          sub_9F5E28(a20 + 24, v87);
        }
        while ((void *)v87 != v78);
        __int16 v88 = *a13;
        uint64_t v86 = a20;
      }
      *(void *)(v86 + 16) = v78;
      operator delete(v88);
      _Unwind_Resume(a1);
    }
LABEL_12:
    STACK[0x418] = (unint64_t)v71;
    operator delete(v71);
    goto LABEL_13;
  }
LABEL_8:
  operator delete(v68);
  if (LODWORD(STACK[0x470])) {
    goto LABEL_13;
  }
  goto LABEL_9;
}

void sub_AEC1BC(uint64_t a1)
{
  *(_DWORD *)(a1 + 240) = 0;
  if (*(void *)(a1 + 144) | *(void *)(a1 + 184))
  {
    for (uint64_t i = *(void *)(a1 + 152); i != *(void *)(a1 + 160); i += 16)
    {
      if (*(void *)i)
      {
        free(*(void **)i);
        *(void *)uint64_t i = 0;
      }
      *(void *)(i + 8) = 0;
    }
    *(void *)(a1 + 184) = 0;
  }
  *(uint64x2_t *)(a1 + 104) = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 120), (float)*(unint64_t *)(a1 + 176))));
  *(unsigned char *)(a1 + 128) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 200) = *(void *)(a1 + 192);
  *(void *)(a1 + 224) = 0;
  unsigned int v3 = *(unsigned int **)(a1 + 272);
  int v4 = *(unsigned int **)(a1 + 280);
  if (v3 != v4)
  {
    uint64_t v5 = *(void *)(a1 + 248);
    uint64_t v6 = *(unsigned int **)(a1 + 272);
    do
    {
      unsigned int v7 = *v6++;
      *(void *)(v5 + (((unint64_t)v7 >> 3) & 0x1FFFFFF8)) &= ~(1 << v7);
    }
    while (v6 != v4);
  }
  *(void *)(a1 + 280) = v3;
  int v8 = *(unsigned int **)(a1 + 320);
  uint64_t v9 = *(unsigned int **)(a1 + 328);
  if (v8 != v9)
  {
    uint64_t v10 = *(void *)(a1 + 296);
    uint64_t v11 = *(unsigned int **)(a1 + 320);
    do
    {
      unsigned int v12 = *v11++;
      *(void *)(v10 + (((unint64_t)v12 >> 3) & 0x1FFFFFF8)) &= ~(1 << v12);
    }
    while (v11 != v9);
  }
  *(void *)(a1 + 328) = v8;
  uint64_t v13 = *(unsigned int **)(a1 + 392);
  uint64_t v14 = *(unsigned int **)(a1 + 400);
  if (v13 != v14)
  {
    uint64_t v15 = *(void *)(a1 + 368);
    uint64_t v16 = *(void *)(a1 + 344);
    uint64_t v17 = *(unsigned int **)(a1 + 392);
    do
    {
      unsigned int v18 = *v17++;
      *(void *)(v15 + (((unint64_t)v18 >> 3) & 0x1FFFFFF8)) &= ~(1 << v18);
      *(_DWORD *)(v16 + 4 * v18) = -1;
    }
    while (v17 != v14);
  }
  *(void *)(a1 + 400) = v13;
  sub_BD5698(a1 + 424);
  char v21 = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)&__dst, &__p);
  uint64_t v19 = (void **)(a1 + 528);
  if (*(char *)(a1 + 551) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)uint64_t v19 = __dst;
  *(void *)(a1 + 544) = v23;
  HIBYTE(v23) = 0;
  LOBYTE(__dst) = 0;
  *(_OWORD *)(a1 + 616) = v28;
  *(_OWORD *)(a1 + 632) = v29;
  *(_OWORD *)(a1 + 648) = v30;
  *(_OWORD *)(a1 + 664) = v31;
  *(_OWORD *)(a1 + 552) = v24;
  *(_OWORD *)(a1 + 568) = v25;
  *(_OWORD *)(a1 + 584) = v26;
  *(_OWORD *)(a1 + 600) = v27;
  if (v21 < 0) {
    operator delete((void *)__p);
  }
  *(int32x2_t *)(a1 + 96) = vadd_s32(vdup_n_s32(2 * *(_DWORD *)(a1 + 16)), (int32x2_t)0x200000004);
  sub_BD5704(a1 + 424, *(void *)(a1 + 8));
}

void sub_AEC3F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_AEC414(uint64_t a1)
{
  if (sub_A276F8(*(void *)(a1 + 24)))
  {
    int v2 = *(_DWORD *)(a1 + 68);
    int v3 = *(_DWORD *)(a1 + 240);
    *(_DWORD *)(a1 + 240) = v3 + 1;
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v21 = 0x1FFFFFFFDLL;
    int v5 = sub_AD28B0(v4, &v21);
    int v22 = v5;
    LODWORD(v21) = 0;
    uint64_t v6 = *(void *)(a1 + 192);
    unsigned int v7 = (char *)(v6 + ((unint64_t)*(unsigned int *)(sub_AE36B4(a1 + 104, (unsigned int *)&v21) + 4) << 6));
    LODWORD(v21) = 0;
    uint64_t v8 = *(void *)(a1 + 192);
    uint64_t v9 = sub_AE36B4(a1 + 104, (unsigned int *)&v21);
    sub_AE32F0(a1 + 104, 0, v7, (unsigned char *)(v8 + ((unint64_t)*(unsigned int *)(v9 + 8) << 6)));
    long long v13 = xmmword_20E2060;
    uint64_t v14 = -1;
    int v15 = v3;
    int v16 = v2;
    uint64_t v17 = 0;
    int v18 = 10 * v2;
    uint64_t v19 = -1;
    int v20 = 0x7FFFFFFF;
    sub_AEF4DC((void *)(a1 + 104), &v13, 0, 0, 1);
    int v10 = *(_DWORD *)(a1 + 96);
    unsigned int v11 = v10 + v10 * v5;
    unsigned int v12 = v11 + 2;
    if (*(unsigned char *)(a1 + 20))
    {
      if (!sub_AEF60C((void *)(a1 + 104), 0, v12, v11, v10 + v10 * *(_DWORD *)(a1 + 416), 0x80000000)) {
        return;
      }
    }
    else if (!sub_AEF60C((void *)(a1 + 104), 0, v12, v11, 0xFFFFFFFF, 0x80000000))
    {
      return;
    }
    sub_A3EF14((uint64_t *)(a1 + 248), &v22);
  }
}

double sub_AEC580(uint64_t a1, int a2)
{
  sub_725D0((uint64_t)v34);
  uint64_t v4 = *(unsigned int **)(a1 + 272);
  int v5 = *(unsigned int **)(a1 + 280);
  if (v4 != v5)
  {
    int v6 = a2 + 1;
    int v7 = a2 + 2;
    int v32 = ~a2;
    while (1)
    {
      unsigned int v33 = *v4;
      unint64_t v8 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), v33);
      if (HIDWORD(v8) == 1 && (v8 + 3) < 2)
      {
LABEL_12:
        int v13 = 0;
        goto LABEL_17;
      }
      uint64_t v10 = *(void *)(*(void *)(a1 + 24) + 4120);
      uint64_t v11 = v10 + 24;
      if (*(unsigned char *)(v10 + 17)) {
        break;
      }
      unsigned int v12 = (int *)sub_498D5C(v11, __ROR8__(v8, 32), 0, "stop");
      int v16 = (unsigned __int16 *)((char *)v12 - *v12);
      if (*v16 >= 0x15u)
      {
        unsigned int v15 = v16[10];
        if (v15) {
          goto LABEL_15;
        }
      }
      int v13 = 300;
LABEL_17:
      unsigned int v35 = 0;
      uint64_t v17 = *(void *)(a1 + 192);
      int v18 = (char *)(v17 + ((unint64_t)*(unsigned int *)(sub_AE36B4(a1 + 104, &v35) + 4) << 6));
      unsigned int v35 = 0;
      uint64_t v19 = *(void *)(a1 + 192);
      uint64_t v20 = sub_AE36B4(a1 + 104, &v35);
      sub_AE32F0(a1 + 104, 0, v18, (unsigned char *)(v19 + ((unint64_t)*(unsigned int *)(v20 + 8) << 6)));
      sub_AEFBC0((void *)(a1 + 104), v6 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * v33, 0);
      unsigned int v35 = 0;
      uint64_t v21 = *(void *)(a1 + 192);
      int v22 = (unsigned int *)(v21 + ((unint64_t)*(unsigned int *)(sub_AE36B4(a1 + 104, &v35) + 4) << 6));
      unsigned int v35 = 0;
      uint64_t v23 = *(void *)(a1 + 192);
      for (uint64_t i = (unsigned int *)(v23 + ((unint64_t)*(unsigned int *)(sub_AE36B4(a1 + 104, &v35) + 8) << 6));
            v22 != i;
            v22 += 16)
      {
        unsigned int *v22 = v33;
        unsigned int v25 = v22[7];
        v22[3] = v25;
        v22[4] = -1;
        v22[7] = v25 + v13 / -10;
      }
      unsigned int v26 = v33;
      int v27 = *(_DWORD *)(a1 + 96);
      if (*(unsigned char *)(a1 + 20))
      {
        unsigned int v28 = v27 + v27 * *(_DWORD *)(a1 + 416) + 1;
        uint64_t v29 = *(void *)(a1 + 48);
        if (!v29) {
          goto LABEL_23;
        }
      }
      else
      {
        unsigned int v28 = -1;
        uint64_t v29 = *(void *)(a1 + 48);
        if (!v29)
        {
LABEL_23:
          int v30 = 0x80000000;
          goto LABEL_24;
        }
      }
      int v30 = sub_AD7004(v29, v33, *(_DWORD *)(a1 + 100) + v32);
LABEL_24:
      if (sub_AEF60C((void *)(a1 + 104), 0, v7 + v27 + v27 * v26, v27 + v27 * v26 + 1, v28, v30)) {
        sub_A3EF14((uint64_t *)(a1 + 296), &v33);
      }
      if (++v4 == v5) {
        goto LABEL_26;
      }
    }
    unsigned int v12 = (int *)sub_A1A290(v11, v8, 0, "transfers at stop");
    int v13 = 0;
    uint64_t v14 = (unsigned __int16 *)((char *)v12 - *v12);
    if (*v14 < 5u) {
      goto LABEL_17;
    }
    unsigned int v15 = v14[2];
    if (!v15) {
      goto LABEL_12;
    }
LABEL_15:
    int v13 = 10 * *(int *)((char *)v12 + v15);
    goto LABEL_17;
  }
LABEL_26:
  double result = sub_72688((uint64_t)v34) + *(double *)(a1 + 568);
  *(double *)(a1 + 568) = result;
  return result;
}

double sub_AEC83C(uint64_t a1, int a2)
{
  sub_725D0((uint64_t)v290);
  uint64_t v4 = *(unsigned int **)(a1 + 272);
  __int16 v271 = *(unsigned int **)(a1 + 280);
  if (v4 != v271)
  {
    int v276 = a2 + 2;
    int v277 = a2 + 1;
    int v274 = ~a2;
    uint64_t v275 = (uint64_t *)(a1 + 296);
    long long v270 = (void **)(a1 + 320);
    uint64_t v273 = a1;
    uint64_t v282 = (void *)(a1 + 104);
    while (1)
    {
      __int16 v272 = v4;
      unsigned int v283 = *v4;
      int v5 = (unint64_t *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), *v4);
      sub_A28D38((uint64_t)&v284, *(void *)(a1 + 24), *v5);
      int v6 = v285;
      int v7 = &v286;
      if (v289) {
        int v7 = v288;
      }
      if ((unint64_t)v285 < *v7) {
        break;
      }
LABEL_3:
      uint64_t v4 = v272 + 1;
      if (v272 + 1 == v271) {
        goto LABEL_316;
      }
    }
LABEL_13:
    uint64_t v11 = 0;
    unint64_t v12 = __ROR8__(*v6, 32);
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = *(void *)(v13 + 72) - 1;
    unint64_t v15 = 0xC4CEB9FE1A85EC53
        * ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) >> 33));
    unint64_t v16 = v15 ^ (v15 >> 33);
    uint64_t v17 = *(void *)(v13 + 48);
    uint64_t v18 = v17 + 11;
    uint64_t v19 = -1;
    for (unint64_t i = v16; ; unint64_t i = v11 + v21)
    {
      uint64_t v21 = i & v14;
      unint64_t v22 = (i & v14) / 0x30;
      unint64_t v23 = v21 - 48 * v22;
      if (((*(unsigned __int8 *)(v17 + 16 * v22 + (v23 >> 3) + 10) >> (v23 & 7)) & 1) == 0)
      {
        if (v19 == -1) {
          unint64_t v59 = v21;
        }
        else {
          unint64_t v59 = v19;
        }
        if (!sub_AD2F40(*(void *)(a1 + 32), 1)) {
          goto LABEL_98;
        }
        goto LABEL_55;
      }
      uint64_t v24 = *(void *)(v17 + 16 * v22);
      if (!*(void *)(v13 + 40)) {
        goto LABEL_33;
      }
      unsigned int v25 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
      if ((unsigned __int16)(v21 - 48 * v22) < 9u)
      {
        __int16 v26 = 0;
        LOBYTE(v31) = v21 - 48 * v22;
        goto LABEL_29;
      }
      __int16 v26 = 0;
      uint64_t v27 = (unsigned __int16)(v21 - 48 * v22 - 9) >> 3;
      if ((unsigned __int16)(v21 - 48 * v22 - 9) >> 3)
      {
        __int16 v28 = 0;
        uint64_t v29 = v27 + 1;
        uint64_t v30 = (v27 + 1) & 0x3FFE;
        unsigned __int16 v31 = v23 - 8 * v30;
        int v32 = &v25[v30];
        unsigned int v33 = (unsigned __int8 *)(v18 + 16 * v22);
        uint64_t v34 = v30;
        do
        {
          uint64_t v35 = *(v33 - 1);
          int v36 = *v33;
          v33 += 2;
          v26 += byte_20EBFB6[v35];
          v28 += byte_20EBFB6[v36];
          v34 -= 2;
        }
        while (v34);
        v26 += v28;
        if (v29 == v30) {
          goto LABEL_28;
        }
      }
      else
      {
        unsigned __int16 v31 = v21 - 48 * v22;
        int v32 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
      }
      do
      {
        int v37 = *v32++;
        v26 += byte_20EBFB6[v37];
        v31 -= 8;
      }
      while (v31 > 8u);
LABEL_28:
      v25 += ((unsigned __int16)(v23 - 9) >> 3) + 1;
LABEL_29:
      unsigned int v38 = (_DWORD *)(v24
                     + 12
                     * (unsigned __int16)(v26 + byte_20EBFB6[~(-1 << v31) & (unint64_t)*v25]));
      BOOL v39 = *(_DWORD *)(v13 + 36) == v38[1] && *(_DWORD *)(v13 + 32) == *v38;
      if (v39)
      {
        if (v19 == -1) {
          uint64_t v19 = v21;
        }
        goto LABEL_16;
      }
LABEL_33:
      int v40 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
      if ((unsigned __int16)(v21 - 48 * v22) < 9u)
      {
        __int16 v41 = 0;
        uint64_t v52 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
        LOBYTE(v46) = v21 - 48 * v22;
        goto LABEL_43;
      }
      __int16 v41 = 0;
      uint64_t v42 = (unsigned __int16)(v21 - 48 * v22 - 9) >> 3;
      if ((unsigned __int16)(v21 - 48 * v22 - 9) >> 3)
      {
        __int16 v43 = 0;
        uint64_t v44 = v42 + 1;
        uint64_t v45 = (v42 + 1) & 0x3FFE;
        unsigned __int16 v46 = v23 - 8 * v45;
        uint64_t v47 = &v40[v45];
        unint64_t v48 = (unsigned __int8 *)(v18 + 16 * v22);
        uint64_t v49 = v45;
        do
        {
          uint64_t v50 = *(v48 - 1);
          int v51 = *v48;
          v48 += 2;
          v41 += byte_20EBFB6[v50];
          v43 += byte_20EBFB6[v51];
          v49 -= 2;
        }
        while (v49);
        v41 += v43;
        if (v44 == v45) {
          goto LABEL_42;
        }
      }
      else
      {
        unsigned __int16 v46 = v21 - 48 * v22;
        uint64_t v47 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
      }
      do
      {
        int v53 = *v47++;
        v41 += byte_20EBFB6[v53];
        v46 -= 8;
      }
      while (v46 > 8u);
LABEL_42:
      uint64_t v52 = &v40[((unsigned __int16)(v23 - 9) >> 3) + 1];
LABEL_43:
      if (v12 == *(void *)(v24
                            + 12
                            * (unsigned __int16)(v41 + byte_20EBFB6[~(-1 << v46) & (unint64_t)*v52])))
      {
        if (v21 != -1)
        {
          if ((unsigned __int16)(v21 - 48 * v22) < 9u)
          {
            __int16 v56 = 0;
          }
          else
          {
            if ((((_WORD)v21 - 48 * (_WORD)v22 - 8) & 0xFFF8) != 0) {
              __int16 v54 = 8;
            }
            else {
              __int16 v54 = v21 - 48 * v22 - 8;
            }
            unsigned __int16 v55 = ~v54 + v21 - 48 * v22;
            if (v55 < 8u)
            {
              __int16 v56 = 0;
              unsigned __int16 v57 = v23;
              unint64_t v58 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
              goto LABEL_103;
            }
            __int16 v105 = 0;
            __int16 v106 = 0;
            uint64_t v107 = (v55 >> 3) + 1;
            unsigned __int16 v57 = v23 - 8 * (((v55 >> 3) + 1) & 0x3FFE);
            unint64_t v58 = &v40[v107 & 0x3FFE];
            unint64_t v108 = (unsigned __int8 *)(v17 + 16 * v22 + 11);
            uint64_t v109 = v107 & 0x3FFE;
            do
            {
              uint64_t v110 = *(v108 - 1);
              int v111 = *v108;
              v108 += 2;
              v105 += byte_20EBFB6[v110];
              v106 += byte_20EBFB6[v111];
              v109 -= 2;
            }
            while (v109);
            __int16 v56 = v106 + v105;
            if ((v107 & 0x3FFE) != v107)
            {
              do
              {
LABEL_103:
                int v112 = *v58++;
                v56 += byte_20EBFB6[v112];
                v57 -= 8;
              }
              while (v57 > 8u);
            }
            v40 += ((unsigned __int16)(v23 - 9) >> 3) + 1;
            LOBYTE(v23) = v57;
          }
          uint64_t v113 = *(void *)(v13 + 56);
          unsigned __int16 v114 = v56 + byte_20EBFB6[~(-1 << v23) & (unint64_t)*v40];
          uint64_t v115 = v17 + 16 * v22;
          if (*(unsigned __int16 *)(v115 + 8) != v114 || v115 + 16 == v113)
          {
            unint64_t v104 = (_DWORD *)(v24 + 12 * v114);
          }
          else
          {
            uint64_t v117 = v115 + 32;
            do
            {
              if (*(_WORD *)(v117 - 8)) {
                BOOL v118 = 1;
              }
              else {
                BOOL v118 = v117 == v113;
              }
              v117 += 16;
            }
            while (!v118);
            unint64_t v104 = *(_DWORD **)(v117 - 32);
          }
          goto LABEL_117;
        }
        unint64_t v59 = -1;
        if (!sub_AD2F40(*(void *)(a1 + 32), 1))
        {
LABEL_98:
          unint64_t v291 = v12;
          int v292 = -1;
          sub_AD3484(v13, (uint64_t *)&v291, v59, v293);
          unint64_t v104 = (_DWORD *)v294;
          goto LABEL_117;
        }
LABEL_55:
        uint64_t v60 = 0;
        unint64_t v291 = v12;
        int v292 = -1;
        uint64_t v61 = *(void *)(v13 + 72) - 1;
        uint64_t v62 = *(void *)(v13 + 48);
        uint64_t v63 = v62 + 11;
        uint64_t v64 = -1;
        while (2)
        {
          uint64_t v65 = v16 & v61;
          unint64_t v66 = (v16 & v61) / 0x30;
          unint64_t v67 = (v16 & v61) % 0x30;
          if (((*(unsigned __int8 *)(v62 + 16 * v66 + (v67 >> 3) + 10) >> (v67 & 7)) & 1) == 0)
          {
            if (v64 == -1) {
              unint64_t v103 = v16 & v61;
            }
            else {
              unint64_t v103 = v64;
            }
            goto LABEL_96;
          }
          uint64_t v68 = *(void *)(v13 + 40);
          uint64_t v69 = *(void *)(v62 + 16 * v66);
          if (!v68) {
            break;
          }
          uint64_t v70 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
          if ((unsigned __int16)((v16 & v61) % 0x30) < 9u)
          {
            __int16 v71 = 0;
            LOBYTE(v72) = (v16 & v61) % 0x30;
            goto LABEL_71;
          }
          __int16 v71 = 0;
          uint64_t v72 = (unsigned __int16)(v65 - 48 * v66 - 9) >> 3;
          if (!((unsigned __int16)(v65 - 48 * v66 - 9) >> 3))
          {
            LODWORD(v72) = (v16 & v61) % 0x30;
            unint64_t v76 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
            do
            {
LABEL_69:
              int v81 = *v76++;
              v71 += byte_20EBFB6[v81];
              LOWORD(v72) = v72 - 8;
            }
            while ((unsigned __int16)v72 > 8u);
            goto LABEL_70;
          }
          __int16 v73 = 0;
          uint64_t v74 = v72 + 1;
          uint64_t v75 = (v72 + 1) & 0x3FFE;
          LOWORD(v72) = v67 - 8 * v75;
          unint64_t v76 = &v70[v75];
          unint64_t v77 = (unsigned __int8 *)(v63 + 16 * v66);
          uint64_t v78 = v75;
          do
          {
            uint64_t v79 = *(v77 - 1);
            int v80 = *v77;
            v77 += 2;
            v71 += byte_20EBFB6[v79];
            v73 += byte_20EBFB6[v80];
            v78 -= 2;
          }
          while (v78);
          v71 += v73;
          if (v74 != v75) {
            goto LABEL_69;
          }
LABEL_70:
          v70 += ((unsigned __int16)(v67 - 9) >> 3) + 1;
LABEL_71:
          uint64_t v82 = (_DWORD *)(v69
                         + 12
                         * (unsigned __int16)(v71 + byte_20EBFB6[~(-1 << v72) & (unint64_t)*v70]));
          if (*(_DWORD *)(v13 + 36) == v82[1] && *(_DWORD *)(v13 + 32) == *v82)
          {
            if (v64 == -1) {
              uint64_t v64 = v16 & v61;
            }
LABEL_58:
            unint64_t v16 = ++v60 + v65;
            continue;
          }
          break;
        }
        uint64_t v84 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
        if ((unsigned __int16)((v16 & v61) % 0x30) < 9u)
        {
          __int16 v85 = 0;
          uint64_t v96 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
          LOBYTE(v90) = (v16 & v61) % 0x30;
          goto LABEL_85;
        }
        __int16 v85 = 0;
        uint64_t v86 = (unsigned __int16)(v65 - 48 * v66 - 9) >> 3;
        if (!((unsigned __int16)(v65 - 48 * v66 - 9) >> 3))
        {
          unsigned __int16 v90 = (v16 & v61) % 0x30;
          unint64_t v91 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
          do
          {
LABEL_83:
            int v97 = *v91++;
            v85 += byte_20EBFB6[v97];
            v90 -= 8;
          }
          while (v90 > 8u);
          goto LABEL_84;
        }
        __int16 v87 = 0;
        uint64_t v88 = v86 + 1;
        uint64_t v89 = (v86 + 1) & 0x3FFE;
        unsigned __int16 v90 = v67 - 8 * v89;
        unint64_t v91 = &v84[v89];
        uint64_t v92 = (unsigned __int8 *)(v63 + 16 * v66);
        uint64_t v93 = v89;
        do
        {
          uint64_t v94 = *(v92 - 1);
          int v95 = *v92;
          v92 += 2;
          v85 += byte_20EBFB6[v94];
          v87 += byte_20EBFB6[v95];
          v93 -= 2;
        }
        while (v93);
        v85 += v87;
        if (v88 != v89) {
          goto LABEL_83;
        }
LABEL_84:
        uint64_t v96 = &v84[((unsigned __int16)(v67 - 9) >> 3) + 1];
LABEL_85:
        if (v12 != *(void *)(v69
                              + 12
                              * (unsigned __int16)(v85
                                                 + byte_20EBFB6[~(-1 << v90) & (unint64_t)*v96])))
          goto LABEL_58;
        if (v65 == -1)
        {
          unint64_t v103 = -1;
LABEL_96:
          sub_AD3484(v13, (uint64_t *)&v291, v103, v293);
          unint64_t v104 = (_DWORD *)v294;
          goto LABEL_117;
        }
        if ((unsigned __int16)((v16 & v61) % 0x30) < 9u)
        {
          __int16 v100 = 0;
        }
        else
        {
          if ((((_WORD)v65 - 48 * (_WORD)v66 - 8) & 0xFFF8) != 0) {
            __int16 v98 = 8;
          }
          else {
            __int16 v98 = v65 - 48 * v66 - 8;
          }
          unsigned __int16 v99 = ~v98 + v65 - 48 * v66;
          if (v99 < 8u)
          {
            __int16 v100 = 0;
            unsigned __int16 v101 = v67;
            uint64_t v102 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
            goto LABEL_185;
          }
          __int16 v181 = 0;
          __int16 v182 = 0;
          uint64_t v183 = (v99 >> 3) + 1;
          unsigned __int16 v101 = v67 - 8 * (((v99 >> 3) + 1) & 0x3FFE);
          uint64_t v102 = &v84[v183 & 0x3FFE];
          int32x2_t v184 = (unsigned __int8 *)(v62 + 16 * v66 + 11);
          uint64_t v185 = v183 & 0x3FFE;
          do
          {
            uint64_t v186 = *(v184 - 1);
            int v187 = *v184;
            v184 += 2;
            v181 += byte_20EBFB6[v186];
            v182 += byte_20EBFB6[v187];
            v185 -= 2;
          }
          while (v185);
          __int16 v100 = v182 + v181;
          if ((v183 & 0x3FFE) != v183)
          {
            do
            {
LABEL_185:
              int v188 = *v102++;
              v100 += byte_20EBFB6[v188];
              v101 -= 8;
            }
            while (v101 > 8u);
          }
          v84 += ((unsigned __int16)(v67 - 9) >> 3) + 1;
          LOBYTE(v67) = v101;
        }
        uint64_t v189 = v62 + 16 * v66;
        unsigned int v190 = *(_DWORD ***)(v13 + 56);
        unsigned __int16 v191 = v100 + byte_20EBFB6[~(-1 << v67) & (unint64_t)*v84];
        unint64_t v104 = (_DWORD *)(v69 + 12 * v191);
        if (*(unsigned __int16 *)(v189 + 8) == v191)
        {
          uint64_t v192 = v189 + 16;
          if ((_DWORD **)(v189 + 16) != v190)
          {
            while (1)
            {
              int v193 = (_DWORD **)v192;
              if (*(_WORD *)(v192 + 8)) {
                break;
              }
              v192 += 16;
              if (v193 + 2 == v190)
              {
                uint64_t v189 = *(void *)(v13 + 56);
                goto LABEL_193;
              }
            }
            uint64_t v189 = v192;
LABEL_193:
            unint64_t v104 = *v193;
            goto LABEL_194;
          }
        }
        else
        {
LABEL_194:
          if ((_DWORD **)v189 != v190 && v68)
          {
            do
            {
              if (*(_DWORD *)(v13 + 36) != v104[1] || *(_DWORD *)(v13 + 32) != *v104) {
                break;
              }
              v104 += 3;
              if (v104 == (_DWORD *)(*(void *)v189 + 12 * *(unsigned __int16 *)(v189 + 8)))
              {
                v189 += 16;
                if ((_DWORD **)v189 != v190)
                {
                  do
                  {
                    if (*(_WORD *)(v189 + 8))
                    {
                      unint64_t v104 = *(_DWORD **)v189;
                      goto LABEL_198;
                    }
                    v189 += 16;
                  }
                  while ((_DWORD **)v189 != v190);
                  unint64_t v104 = *(_DWORD **)(v189 - 16);
                }
                break;
              }
LABEL_198:
              ;
            }
            while ((_DWORD **)v189 != v190);
          }
        }
LABEL_117:
        unsigned int v119 = v104[2];
        if (v119 == -1)
        {
          int v120 = *(_DWORD *)(v13 + 112);
          *(_DWORD *)(v13 + 112) = v120 + 1;
          v104[2] = v120;
          uint64_t v122 = *(unint64_t **)(v13 + 96);
          unint64_t v121 = *(void *)(v13 + 104);
          if ((unint64_t)v122 < v121)
          {
            unint64_t *v122 = v12;
            uint64_t v123 = (uint64_t)(v122 + 1);
            goto LABEL_142;
          }
          unsigned __int16 v124 = (unint64_t **)(v13 + 88);
          uint64_t v125 = *(char **)(v13 + 88);
          uint64_t v126 = ((char *)v122 - v125) >> 3;
          unint64_t v127 = v126 + 1;
          if ((unint64_t)(v126 + 1) >> 61) {
            sub_2E00();
          }
          uint64_t v128 = v121 - (void)v125;
          if (v128 >> 2 > v127) {
            unint64_t v127 = v128 >> 2;
          }
          if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v127 = 0x1FFFFFFFFFFFFFFFLL;
          }
          unint64_t v279 = v127;
          if (v127)
          {
            if (v127 >> 61) {
LABEL_318:
            }
              sub_188D718();
            int v129 = (char *)operator new(8 * v127);
            unsigned __int16 v124 = (unint64_t **)(v13 + 88);
            unint64_t v130 = (unint64_t *)&v129[8 * v126];
            *unint64_t v130 = v12;
            uint64_t v123 = (uint64_t)(v130 + 1);
            if (v122 != (unint64_t *)v125)
            {
LABEL_130:
              unint64_t v131 = (char *)(v122 - 1) - v125;
              if (v131 < 0x58)
              {
                a1 = v273;
                goto LABEL_139;
              }
              a1 = v273;
              if ((unint64_t)(v125 - v129) < 0x20) {
                goto LABEL_322;
              }
              uint64_t v132 = (v131 >> 3) + 1;
              uint64_t v133 = 8 * (v132 & 0x3FFFFFFFFFFFFFFCLL);
              __int16 v134 = &v122[v133 / 0xFFFFFFFFFFFFFFF8];
              unint64_t v130 = (unint64_t *)((char *)v130 - v133);
              unsigned __int16 v135 = &v129[8 * v126 - 16];
              uint64_t v136 = v122 - 2;
              uint64_t v137 = v132 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v138 = *(_OWORD *)v136;
                *((_OWORD *)v135 - 1) = *((_OWORD *)v136 - 1);
                *(_OWORD *)unsigned __int16 v135 = v138;
                v135 -= 32;
                v136 -= 4;
                v137 -= 4;
              }
              while (v137);
              uint64_t v122 = v134;
              if (v132 != (v132 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_322:
                do
                {
LABEL_139:
                  unint64_t v139 = *--v122;
                  *--unint64_t v130 = v139;
                }
                while (v122 != (unint64_t *)v125);
              }
              uint64_t v122 = *v124;
              *(void *)(v13 + 88) = v130;
              *(void *)(v13 + 96) = v123;
              *(void *)(v13 + 104) = &v129[8 * v279];
              if (v122) {
LABEL_141:
              }
                operator delete(v122);
LABEL_142:
              *(void *)(v13 + 96) = v123;
              unsigned int v119 = v104[2];
              *(double *)(a1 + 624) = *(double *)(a1 + 624) + 1.0;
              if (v283 == v119) {
                goto LABEL_273;
              }
              goto LABEL_143;
            }
          }
          else
          {
            int v129 = 0;
            unint64_t v130 = (unint64_t *)(8 * v126);
            *(void *)(8 * v126) = v12;
            uint64_t v123 = 8 * v126 + 8;
            if (v122 != (unint64_t *)v125) {
              goto LABEL_130;
            }
          }
          a1 = v273;
          *(void *)(v13 + 88) = v130;
          *(void *)(v13 + 96) = v123;
          *(void *)(v13 + 104) = &v129[8 * v279];
          if (v122) {
            goto LABEL_141;
          }
          goto LABEL_142;
        }
        *(double *)(a1 + 624) = *(double *)(a1 + 624) + 1.0;
        if (v283 == v119) {
          goto LABEL_273;
        }
LABEL_143:
        LODWORD(v293[0]) = 0;
        uint64_t v140 = *(void *)(a1 + 192);
        unint64_t v141 = (char *)(v140
                      + ((unint64_t)*(unsigned int *)(sub_AE36B4((uint64_t)v282, (unsigned int *)v293) + 4) << 6));
        LODWORD(v293[0]) = 0;
        uint64_t v142 = *(void *)(a1 + 192);
        uint64_t v143 = sub_AE36B4((uint64_t)v282, (unsigned int *)v293);
        sub_AE32F0((uint64_t)v282, 0, v141, (unsigned char *)(v142 + ((unint64_t)*(unsigned int *)(v143 + 8) << 6)));
        unsigned int v144 = v277 + *(_DWORD *)(a1 + 96) * (v283 + 1);
        LODWORD(v293[0]) = v144;
        if (*(void *)(a1 + 184) == *(void *)(a1 + 144)) {
          goto LABEL_216;
        }
        unint64_t v145 = sub_AE3914((uint64_t)v282, (unsigned int *)v293);
        if (v145 == -1) {
          goto LABEL_216;
        }
        uint64_t v146 = *(void *)(a1 + 152);
        uint64_t v147 = v146 + 16 * (v145 / 0x30);
        uint64_t v148 = (unsigned __int8 *)(v147 + 10);
        int v149 = v145 % 0x30;
        if ((unsigned __int16)(v145 % 0x30) < 9u)
        {
          __int16 v151 = 0;
          goto LABEL_157;
        }
        uint64_t v150 = (unsigned __int16)(v145 % 0x30 - 9) >> 3;
        __int16 v151 = 0;
        if (!((unsigned __int16)(v145 % 0x30 - 9) >> 3))
        {
          unsigned __int16 v155 = v145 % 0x30;
          uint64_t v156 = (unsigned __int8 *)(v147 + 10);
          do
          {
LABEL_155:
            int v161 = *v156++;
            v151 += byte_20EBEB6[v161];
            v155 -= 8;
          }
          while (v155 > 8u);
          goto LABEL_156;
        }
        __int16 v152 = 0;
        uint64_t v153 = v150 + 1;
        uint64_t v154 = (v150 + 1) & 0x3FFE;
        unsigned __int16 v155 = v149 - 8 * v154;
        uint64_t v156 = &v148[v154];
        uint64_t v157 = (unsigned __int8 *)(v146 + 16 * (v145 / 0x30) + 11);
        uint64_t v158 = v154;
        do
        {
          uint64_t v159 = *(v157 - 1);
          int v160 = *v157;
          v157 += 2;
          v151 += byte_20EBEB6[v159];
          v152 += byte_20EBEB6[v160];
          v158 -= 2;
        }
        while (v158);
        v151 += v152;
        if (v153 != v154) {
          goto LABEL_155;
        }
LABEL_156:
        v148 += ((unsigned __int16)(v149 - 9) >> 3) + 1;
        LOBYTE(v149) = v155;
LABEL_157:
        uint64_t v162 = *(_DWORD ***)(a1 + 160);
        unsigned __int16 v163 = v151 + byte_20EBEB6[~(-1 << v149) & (unint64_t)*v148];
        if (*(unsigned __int16 *)(v147 + 8) != v163)
        {
          uint64_t v165 = (_DWORD *)(*(void *)v147 + 12 * v163);
          if ((_DWORD **)v147 != v162) {
            goto LABEL_165;
          }
          goto LABEL_173;
        }
        v147 += 16;
        if ((_DWORD **)v147 != v162)
        {
          while (1)
          {
            unsigned int v164 = (_DWORD **)v147;
            if (*(_WORD *)(v147 + 8)) {
              break;
            }
            v147 += 16;
            if (v164 + 2 == v162)
            {
              uint64_t v147 = *(void *)(a1 + 160);
              break;
            }
          }
          uint64_t v165 = *v164;
          if ((_DWORD **)v147 != v162)
          {
LABEL_165:
            if (*(void *)(a1 + 144))
            {
              while (*(_DWORD *)(a1 + 136) == *v165)
              {
                v165 += 3;
                if (v165 == (_DWORD *)(*(void *)v147 + 12 * *(unsigned __int16 *)(v147 + 8)))
                {
                  while (1)
                  {
                    v147 += 16;
                    if ((_DWORD **)v147 == v162) {
                      goto LABEL_216;
                    }
                    if (*(_WORD *)(v147 + 8))
                    {
                      uint64_t v165 = *(_DWORD **)v147;
                      break;
                    }
                  }
                }
                if ((_DWORD **)v147 == v162) {
                  break;
                }
              }
            }
          }
LABEL_173:
          if ((_DWORD **)v147 != v162)
          {
            int v168 = v165 + 1;
            int v167 = v165[1];
            int v166 = v168[1];
            int v169 = v166 - v167;
            if (v166 != v167)
            {
              uint64_t v170 = 0;
              unsigned int v171 = 0;
              do
              {
                int v172 = (_OWORD *)sub_AE5380(v282, v144, v171);
                long long v173 = v172[2];
                long long v174 = v172[3];
                long long v175 = v172[1];
                v293[0] = *v172;
                long long v294 = v173;
                long long v295 = v174;
                v293[1] = v175;
                v170 |= sub_AEF7D8((uint64_t)v282, (uint64_t)v293, 0, 0, 1) & 0xFF00;
                ++v171;
              }
              while (v169 != v171);
              if (v170)
              {
                LODWORD(v293[0]) = 0;
                uint64_t v176 = *(void *)(a1 + 192);
                uint64_t v177 = v176
                     + ((unint64_t)*(unsigned int *)(sub_AE36B4((uint64_t)v282, (unsigned int *)v293) + 4) << 6);
                LODWORD(v293[0]) = 0;
                uint64_t v178 = *(void *)(a1 + 192);
                uint64_t v179 = sub_AE36B4((uint64_t)v282, (unsigned int *)v293);
                int v180 = (long long *)(v178 + ((unint64_t)*(unsigned int *)(v179 + 8) << 6));
                if ((long long *)v177 != v180)
                {
                  while (*(_DWORD *)(v177 + 28) != 0x7FFFFFFF)
                  {
                    v177 += 64;
                    if ((long long *)v177 == v180)
                    {
                      uint64_t v177 = v178 + ((unint64_t)*(unsigned int *)(v179 + 8) << 6);
                      goto LABEL_215;
                    }
                  }
                  if ((long long *)v177 != v180)
                  {
                    for (uint64_t j = (long long *)(v177 + 64); j != v180; j += 4)
                    {
                      if (*((_DWORD *)j + 7) != 0x7FFFFFFF)
                      {
                        long long v196 = *j;
                        long long v197 = j[1];
                        long long v198 = j[3];
                        *(_OWORD *)(v177 + 32) = j[2];
                        *(_OWORD *)(v177 + 48) = v198;
                        *(_OWORD *)uint64_t v177 = v196;
                        *(_OWORD *)(v177 + 16) = v197;
                        v177 += 64;
                      }
                    }
                  }
                }
LABEL_215:
                LODWORD(v293[0]) = 0;
                uint64_t v199 = *(void *)(a1 + 192);
                uint64_t v200 = sub_AE36B4((uint64_t)v282, (unsigned int *)v293);
                sub_AE32F0((uint64_t)v282, 0, (char *)v177, (unsigned char *)(v199 + ((unint64_t)*(unsigned int *)(v200 + 8) << 6)));
              }
            }
          }
        }
LABEL_216:
        LODWORD(v293[0]) = 0;
        uint64_t v201 = *(void *)(a1 + 192);
        int v202 = (unsigned int *)(v201
                              + ((unint64_t)*(unsigned int *)(sub_AE36B4((uint64_t)v282, (unsigned int *)v293) + 4) << 6));
        LODWORD(v293[0]) = 0;
        uint64_t v203 = *(void *)(a1 + 192);
        int v204 = (unsigned int *)(v203
                              + ((unint64_t)*(unsigned int *)(sub_AE36B4((uint64_t)v282, (unsigned int *)v293) + 8) << 6));
        if (v202 != v204)
        {
          __int16 v205 = v285;
          do
          {
            unsigned int *v202 = v283;
            unsigned int v206 = v202[7];
            unsigned int v207 = v202[8];
            v202[3] = v206;
            v202[4] = -1;
            int v208 = *((_DWORD *)v205 + 2);
            int v209 = v208 / -10;
            int v210 = v208 / 10;
            int v211 = v208 % 10;
            if (v208 < 0) {
              char v212 = -5;
            }
            else {
              char v212 = 5;
            }
            int v213 = (char)(v212 + v211);
            v202[7] = v209 + v206 + (((-103 * v213) >> 15) & 1) + ((-103 * v213) >> 10);
            v202[8] = v207 + v210 + (((103 * v213) >> 15) & 1) + ((103 * v213) >> 10);
            v202 += 16;
          }
          while (v202 != v204);
        }
        if (*(unsigned char *)(a1 + 20))
        {
          unsigned int v278 = *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * *(_DWORD *)(a1 + 416) + 1;
          int v280 = *(_DWORD *)(a1 + 96);
          uint64_t v214 = *(void *)(a1 + 48);
          if (v214) {
            goto LABEL_224;
          }
LABEL_268:
          int v238 = 0x80000000;
LABEL_269:
          if (!sub_AEF60C(v282, 0, v276 + v280 * (v119 + 1), v280 * (v119 + 1) + 1, v278, v238)) {
            goto LABEL_273;
          }
          if (*(void *)(a1 + 304) <= (unint64_t)v119) {
            sub_A3E96C((uint64_t)v275, v119 + 1, 0);
          }
          uint64_t v242 = *v275;
          if ((*(void *)(*v275 + 8 * ((unint64_t)v119 >> 6)) & (1 << v119)) != 0)
          {
LABEL_273:
            unint64_t v9 = (unint64_t)v286;
            int v6 = (void *)((char *)v285 + 12);
            __int16 v285 = v6;
            if (v6 != v286) {
              goto LABEL_274;
            }
LABEL_298:
            int v6 = v287;
            unint64_t v10 = v288[0];
            __int16 v285 = v287;
            int v8 = 1;
            unsigned __int8 v289 = 1;
            if (*(unsigned char *)(v284 + 16)) {
              goto LABEL_299;
            }
            goto LABEL_10;
          }
          unsigned __int16 v244 = *(char **)(a1 + 328);
          unint64_t v243 = *(void *)(a1 + 336);
          if ((unint64_t)v244 < v243)
          {
            *(_DWORD *)unsigned __int16 v244 = v119;
            uint64_t v245 = (uint64_t)(v244 + 4);
            goto LABEL_297;
          }
          unint64_t v246 = (char *)*v270;
          uint64_t v247 = v244 - (unsigned char *)*v270;
          uint64_t v248 = v247 >> 2;
          unint64_t v249 = (v247 >> 2) + 1;
          if (v249 >> 62) {
            sub_2E00();
          }
          uint64_t v250 = v243 - (void)v246;
          if (v250 >> 1 > v249) {
            unint64_t v249 = v250 >> 1;
          }
          if ((unint64_t)v250 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v249 = 0x3FFFFFFFFFFFFFFFLL;
          }
          unint64_t v281 = v249;
          if (!v249)
          {
            uint64_t v251 = 0;
            int v252 = (unsigned int *)(4 * v248);
            *(_DWORD *)(4 * v248) = v119;
            uint64_t v245 = 4 * v248 + 4;
            if (v244 == v246) {
              goto LABEL_289;
            }
LABEL_286:
            unint64_t v253 = v244 - 4 - v246;
            unint64_t v254 = v281;
            if (v253 >= 0x2C)
            {
              unint64_t v255 = v244 - &v251[v247];
              a1 = v273;
              if (v255 >= 0x20)
              {
                uint64_t v256 = (v253 >> 2) + 1;
                uint64_t v257 = 4 * (v256 & 0x7FFFFFFFFFFFFFF8);
                uint64_t v258 = &v244[-v257];
                int v252 = (unsigned int *)((char *)v252 - v257);
                int v259 = &v251[4 * v248 - 16];
                unsigned int v260 = v244 - 16;
                uint64_t v261 = v256 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v262 = *(_OWORD *)v260;
                  *(v259 - 1) = *((_OWORD *)v260 - 1);
                  *int v259 = v262;
                  v259 -= 2;
                  v260 -= 32;
                  v261 -= 8;
                }
                while (v261);
                unsigned __int16 v244 = v258;
                if (v256 == (v256 & 0x7FFFFFFFFFFFFFF8)) {
                  goto LABEL_295;
                }
              }
            }
            else
            {
              a1 = v273;
            }
            do
            {
              unsigned int v263 = *((_DWORD *)v244 - 1);
              v244 -= 4;
              *--int v252 = v263;
            }
            while (v244 != v246);
            goto LABEL_295;
          }
          if (v249 >> 62) {
            goto LABEL_318;
          }
          uint64_t v251 = operator new(4 * v249);
          int v252 = (unsigned int *)&v251[4 * v248];
          *int v252 = v119;
          uint64_t v245 = (uint64_t)(v252 + 1);
          if (v244 != v246) {
            goto LABEL_286;
          }
LABEL_289:
          a1 = v273;
          unint64_t v254 = v281;
LABEL_295:
          *(void *)(a1 + 320) = v252;
          *(void *)(a1 + 328) = v245;
          *(void *)(a1 + 336) = &v251[4 * v254];
          if (v246)
          {
            uint64_t v264 = v245;
            operator delete(v246);
            uint64_t v245 = v264;
            uint64_t v242 = *v275;
          }
LABEL_297:
          *(void *)(a1 + 328) = v245;
          *(void *)(v242 + 8 * ((unint64_t)v119 >> 6)) |= 1 << v119;
          unint64_t v9 = (unint64_t)v286;
          int v6 = (void *)((char *)v285 + 12);
          __int16 v285 = v6;
          if (v6 == v286) {
            goto LABEL_298;
          }
LABEL_274:
          int v8 = v289;
          unint64_t v10 = v288[0];
          if (*(unsigned char *)(v284 + 16))
          {
LABEL_299:
            if (v8) {
              unint64_t v265 = v10;
            }
            else {
              unint64_t v265 = v9;
            }
            if ((unint64_t)v6 < v265)
            {
              while (1)
              {
                unint64_t v267 = __ROR8__(*v6, 32);
                if (HIDWORD(v267) == 1 && (v267 + 3) < 2) {
                  break;
                }
                if (sub_2AB7E4(**(void **)(v284 + 4120)))
                {
                  LOBYTE(v8) = v289;
                  int v6 = v285;
                  unint64_t v9 = (unint64_t)v286;
                  break;
                }
                unint64_t v9 = (unint64_t)v286;
                int v6 = (void *)((char *)v285 + 12);
                __int16 v285 = v6;
                if (v6 == v286)
                {
                  int v6 = v287;
                  __int16 v285 = v287;
                  LOBYTE(v8) = 1;
                  unsigned __int8 v289 = 1;
                  if ((unint64_t)v287 >= v288[0]) {
                    break;
                  }
                }
                else
                {
                  LOBYTE(v8) = v289;
                  unint64_t v266 = &v286;
                  if (v289) {
                    unint64_t v266 = v288;
                  }
                  if ((unint64_t)v6 >= *v266) {
                    break;
                  }
                }
              }
              unint64_t v10 = v288[0];
            }
          }
LABEL_10:
          if ((_BYTE)v8) {
            unint64_t v9 = v10;
          }
          if ((unint64_t)v6 >= v9) {
            goto LABEL_3;
          }
          goto LABEL_13;
        }
        unsigned int v278 = -1;
        int v280 = *(_DWORD *)(a1 + 96);
        uint64_t v214 = *(void *)(a1 + 48);
        if (!v214) {
          goto LABEL_268;
        }
LABEL_224:
        unsigned int v215 = 0;
        unsigned int v216 = *(_DWORD *)(a1 + 100) + v274;
        while (2)
        {
          while (2)
          {
            LODWORD(v293[0]) = (v119 << *(_DWORD *)v214) | (v216 - v215);
            if (*(void *)(v214 + 88) == *(void *)(v214 + 48)
              || (unint64_t v217 = sub_AD72DC(v214 + 8, (unsigned int *)v293), v217 == -1))
            {
LABEL_253:
              int v238 = *(_DWORD *)(v214 + 4);
              v215 += 2;
              if (v238 != 0x7FFFFFFF || v215 > v216) {
                goto LABEL_269;
              }
              continue;
            }
            break;
          }
          uint64_t v218 = *(void *)(v214 + 56);
          uint64_t v219 = (_DWORD **)(v218 + 16 * (v217 / 0x30));
          uint64_t v220 = (unsigned __int8 *)v219 + 10;
          int v221 = v217 % 0x30;
          if ((unsigned __int16)(v217 % 0x30) >= 9u)
          {
            __int16 v222 = 0;
            uint64_t v223 = (unsigned __int16)(v217 % 0x30 - 9) >> 3;
            if ((unsigned __int16)(v217 % 0x30 - 9) >> 3)
            {
              __int16 v224 = 0;
              uint64_t v225 = v223 + 1;
              uint64_t v226 = (v223 + 1) & 0x3FFE;
              unsigned __int16 v227 = v221 - 8 * v226;
              int v228 = &v220[v226];
              uint64_t v229 = (unsigned __int8 *)(v218 + 16 * (v217 / 0x30) + 11);
              uint64_t v230 = v226;
              do
              {
                uint64_t v231 = *(v229 - 1);
                int v232 = *v229;
                v229 += 2;
                v222 += byte_20EBDB6[v231];
                v224 += byte_20EBDB6[v232];
                v230 -= 2;
              }
              while (v230);
              v222 += v224;
              if (v225 == v226)
              {
LABEL_236:
                v220 += ((unsigned __int16)(v221 - 9) >> 3) + 1;
                LOBYTE(v221) = v227;
                goto LABEL_237;
              }
            }
            else
            {
              unsigned __int16 v227 = v217 % 0x30;
              int v228 = (unsigned __int8 *)v219 + 10;
            }
            do
            {
              int v233 = *v228++;
              v222 += byte_20EBDB6[v233];
              v227 -= 8;
            }
            while (v227 > 8u);
            goto LABEL_236;
          }
          __int16 v222 = 0;
LABEL_237:
          int v234 = *(_DWORD ***)(v214 + 64);
          unsigned __int16 v235 = v222 + byte_20EBDB6[~(-1 << v221) & (unint64_t)*v220];
          if (*((unsigned __int16 *)v219 + 4) == v235)
          {
            v219 += 2;
            if (v219 == v234) {
              goto LABEL_253;
            }
            while (1)
            {
              uint64_t v236 = v219;
              if (*((_WORD *)v219 + 4)) {
                break;
              }
              v219 += 2;
              if (v236 + 2 == v234)
              {
                uint64_t v219 = *(_DWORD ***)(v214 + 64);
                break;
              }
            }
            uint64_t v237 = *v236;
            if (v219 == v234) {
              goto LABEL_253;
            }
          }
          else
          {
            uint64_t v237 = &(*v219)[2 * v235];
            if (v219 == v234) {
              goto LABEL_253;
            }
          }
          if (*(void *)(v214 + 48))
          {
            while (*(_DWORD *)(v214 + 40) == *v237)
            {
              v237 += 2;
              if (v237 == &(*v219)[2 * *((unsigned __int16 *)v219 + 4)])
              {
                while (1)
                {
                  v219 += 2;
                  if (v219 == v234) {
                    goto LABEL_253;
                  }
                  if (*((_WORD *)v219 + 4))
                  {
                    uint64_t v237 = *v219;
                    break;
                  }
                }
              }
              if (v219 == v234) {
                break;
              }
            }
          }
          BOOL v39 = v219 == v234;
          unsigned int v240 = v237 + 1;
          if (v39) {
            unsigned int v240 = (int *)(v214 + 4);
          }
          int v238 = *v240;
          v215 += 2;
          if (*v240 != 0x7FFFFFFF || v215 > v216) {
            goto LABEL_269;
          }
          continue;
        }
      }
LABEL_16:
      ++v11;
    }
  }
LABEL_316:
  double result = sub_72688((uint64_t)v290) + *(double *)(a1 + 568);
  *(double *)(a1 + 568) = result;
  return result;
}

void sub_AEDE40(void *a1)
{
  uint64_t v1 = a1;
  int v2 = (unsigned int *)a1[49];
  int v3 = (unsigned int *)a1[50];
  if (v2 != v3)
  {
    uint64_t v4 = a1[46];
    uint64_t v5 = a1[43];
    int v6 = (unsigned int *)a1[49];
    do
    {
      unsigned int v7 = *v6++;
      *(void *)(v4 + (((unint64_t)v7 >> 3) & 0x1FFFFFF8)) &= ~(1 << v7);
      *(_DWORD *)(v5 + 4 * v7) = -1;
    }
    while (v6 != v3);
  }
  a1[50] = v2;
  int v8 = (unsigned int *)a1[40];
  __int16 v285 = (unsigned int *)a1[41];
  if (v8 != v285)
  {
    unsigned int v283 = (void **)(a1 + 49);
    unint64_t v291 = a1 + 46;
    while (1)
    {
      int v292 = v8;
      unint64_t v9 = (unint64_t *)sub_A3F32C((void *)(v1[4] + 88), *v8);
      sub_A1DF34((uint64_t)v294, (void *)v1[3], *v9, 0, 0, 0);
      unint64_t v10 = v297;
LABEL_8:
      unint64_t v11 = (unint64_t)v298;
LABEL_9:
      if ((unint64_t)v10 < v11) {
        break;
      }
LABEL_6:
      int v8 = v292 + 1;
      if (v292 + 1 == v285) {
        return;
      }
    }
    uint64_t v12 = 0;
    unint64_t v13 = __ROR8__(*v10, 32);
    uint64_t v14 = v1[5];
    uint64_t v15 = *(void *)(v14 + 72) - 1;
    unint64_t v16 = 0xC4CEB9FE1A85EC53
        * ((0xFF51AFD7ED558CCDLL * (v13 ^ (v13 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v13 ^ (v13 >> 33))) >> 33));
    unint64_t v17 = v16 ^ (v16 >> 33);
    uint64_t v18 = *(void *)(v14 + 48);
    uint64_t v19 = v18 + 11;
    uint64_t v20 = -1;
    for (unint64_t i = v17; ; unint64_t i = v12 + v22)
    {
      uint64_t v22 = i & v15;
      unint64_t v23 = (i & v15) / 0x30;
      unint64_t v24 = v22 - 48 * v23;
      if (((*(unsigned __int8 *)(v18 + 16 * v23 + (v24 >> 3) + 10) >> (v24 & 7)) & 1) == 0)
      {
        if (v20 == -1) {
          unint64_t v60 = v22;
        }
        else {
          unint64_t v60 = v20;
        }
        if (!sub_AD2F40(v1[5], 1)) {
          goto LABEL_95;
        }
        goto LABEL_52;
      }
      uint64_t v25 = *(void *)(v18 + 16 * v23);
      if (!*(void *)(v14 + 40)) {
        goto LABEL_30;
      }
      __int16 v26 = (unsigned __int8 *)(v18 + 16 * v23 + 10);
      if ((unsigned __int16)(v22 - 48 * v23) < 9u)
      {
        __int16 v27 = 0;
        LOBYTE(v32) = v22 - 48 * v23;
        goto LABEL_26;
      }
      __int16 v27 = 0;
      uint64_t v28 = (unsigned __int16)(v22 - 48 * v23 - 9) >> 3;
      if ((unsigned __int16)(v22 - 48 * v23 - 9) >> 3)
      {
        __int16 v29 = 0;
        uint64_t v30 = v28 + 1;
        uint64_t v31 = (v28 + 1) & 0x3FFE;
        unsigned __int16 v32 = v24 - 8 * v31;
        unsigned int v33 = &v26[v31];
        uint64_t v34 = (unsigned __int8 *)(v19 + 16 * v23);
        uint64_t v35 = v31;
        do
        {
          uint64_t v36 = *(v34 - 1);
          int v37 = *v34;
          v34 += 2;
          v27 += byte_20EBFB6[v36];
          v29 += byte_20EBFB6[v37];
          v35 -= 2;
        }
        while (v35);
        v27 += v29;
        if (v30 == v31) {
          goto LABEL_25;
        }
      }
      else
      {
        unsigned __int16 v32 = v22 - 48 * v23;
        unsigned int v33 = (unsigned __int8 *)(v18 + 16 * v23 + 10);
      }
      do
      {
        int v38 = *v33++;
        v27 += byte_20EBFB6[v38];
        v32 -= 8;
      }
      while (v32 > 8u);
LABEL_25:
      v26 += ((unsigned __int16)(v24 - 9) >> 3) + 1;
LABEL_26:
      BOOL v39 = (_DWORD *)(v25
                     + 12
                     * (unsigned __int16)(v27 + byte_20EBFB6[~(-1 << v32) & (unint64_t)*v26]));
      if (*(_DWORD *)(v14 + 36) == v39[1] && *(_DWORD *)(v14 + 32) == *v39)
      {
        if (v20 == -1) {
          uint64_t v20 = v22;
        }
        goto LABEL_13;
      }
LABEL_30:
      __int16 v41 = (unsigned __int8 *)(v18 + 16 * v23 + 10);
      if ((unsigned __int16)(v22 - 48 * v23) < 9u)
      {
        __int16 v42 = 0;
        int v53 = (unsigned __int8 *)(v18 + 16 * v23 + 10);
        LOBYTE(v47) = v22 - 48 * v23;
        goto LABEL_40;
      }
      __int16 v42 = 0;
      uint64_t v43 = (unsigned __int16)(v22 - 48 * v23 - 9) >> 3;
      if ((unsigned __int16)(v22 - 48 * v23 - 9) >> 3)
      {
        __int16 v44 = 0;
        uint64_t v45 = v43 + 1;
        uint64_t v46 = (v43 + 1) & 0x3FFE;
        unsigned __int16 v47 = v24 - 8 * v46;
        unint64_t v48 = &v41[v46];
        uint64_t v49 = (unsigned __int8 *)(v19 + 16 * v23);
        uint64_t v50 = v46;
        do
        {
          uint64_t v51 = *(v49 - 1);
          int v52 = *v49;
          v49 += 2;
          v42 += byte_20EBFB6[v51];
          v44 += byte_20EBFB6[v52];
          v50 -= 2;
        }
        while (v50);
        v42 += v44;
        if (v45 == v46) {
          goto LABEL_39;
        }
      }
      else
      {
        unsigned __int16 v47 = v22 - 48 * v23;
        unint64_t v48 = (unsigned __int8 *)(v18 + 16 * v23 + 10);
      }
      do
      {
        int v54 = *v48++;
        v42 += byte_20EBFB6[v54];
        v47 -= 8;
      }
      while (v47 > 8u);
LABEL_39:
      int v53 = &v41[((unsigned __int16)(v24 - 9) >> 3) + 1];
LABEL_40:
      if (v13 == *(void *)(v25
                            + 12
                            * (unsigned __int16)(v42 + byte_20EBFB6[~(-1 << v47) & (unint64_t)*v53])))
      {
        if (v22 != -1)
        {
          if ((unsigned __int16)(v22 - 48 * v23) < 9u)
          {
            __int16 v57 = 0;
          }
          else
          {
            if ((((_WORD)v22 - 48 * (_WORD)v23 - 8) & 0xFFF8) != 0) {
              __int16 v55 = 8;
            }
            else {
              __int16 v55 = v22 - 48 * v23 - 8;
            }
            unsigned __int16 v56 = ~v55 + v22 - 48 * v23;
            if (v56 < 8u)
            {
              __int16 v57 = 0;
              unsigned __int16 v58 = v24;
              unint64_t v59 = (unsigned __int8 *)(v18 + 16 * v23 + 10);
              goto LABEL_100;
            }
            __int16 v106 = 0;
            __int16 v107 = 0;
            uint64_t v108 = (v56 >> 3) + 1;
            unsigned __int16 v58 = v24 - 8 * (((v56 >> 3) + 1) & 0x3FFE);
            unint64_t v59 = &v41[v108 & 0x3FFE];
            uint64_t v109 = (unsigned __int8 *)(v18 + 16 * v23 + 11);
            uint64_t v110 = v108 & 0x3FFE;
            do
            {
              uint64_t v111 = *(v109 - 1);
              int v112 = *v109;
              v109 += 2;
              v106 += byte_20EBFB6[v111];
              v107 += byte_20EBFB6[v112];
              v110 -= 2;
            }
            while (v110);
            __int16 v57 = v107 + v106;
            if ((v108 & 0x3FFE) != v108)
            {
              do
              {
LABEL_100:
                int v113 = *v59++;
                v57 += byte_20EBFB6[v113];
                v58 -= 8;
              }
              while (v58 > 8u);
            }
            v41 += ((unsigned __int16)(v24 - 9) >> 3) + 1;
            LOBYTE(v24) = v58;
          }
          uint64_t v114 = *(void *)(v14 + 56);
          unsigned __int16 v115 = v57 + byte_20EBFB6[~(-1 << v24) & (unint64_t)*v41];
          uint64_t v116 = v18 + 16 * v23;
          if (*(unsigned __int16 *)(v116 + 8) != v115 || v116 + 16 == v114)
          {
            __int16 v105 = (_DWORD *)(v25 + 12 * v115);
          }
          else
          {
            uint64_t v118 = v116 + 32;
            do
            {
              if (*(_WORD *)(v118 - 8)) {
                BOOL v119 = 1;
              }
              else {
                BOOL v119 = v118 == v114;
              }
              v118 += 16;
            }
            while (!v119);
            __int16 v105 = *(_DWORD **)(v118 - 32);
          }
          goto LABEL_114;
        }
        unint64_t v60 = -1;
        if (!sub_AD2F40(v1[5], 1))
        {
LABEL_95:
          unint64_t v301 = v13;
          int v302 = -1;
          sub_AD3484(v14, (uint64_t *)&v301, v60, v303);
          __int16 v105 = v304;
          goto LABEL_114;
        }
LABEL_52:
        uint64_t v61 = 0;
        unint64_t v301 = v13;
        int v302 = -1;
        uint64_t v62 = *(void *)(v14 + 72) - 1;
        uint64_t v63 = *(void *)(v14 + 48);
        uint64_t v64 = v63 + 11;
        uint64_t v65 = -1;
        while (2)
        {
          uint64_t v66 = v17 & v62;
          unint64_t v67 = (v17 & v62) / 0x30;
          unint64_t v68 = (v17 & v62) % 0x30;
          if (((*(unsigned __int8 *)(v63 + 16 * v67 + (v68 >> 3) + 10) >> (v68 & 7)) & 1) == 0)
          {
            if (v65 == -1) {
              unint64_t v104 = v17 & v62;
            }
            else {
              unint64_t v104 = v65;
            }
            goto LABEL_93;
          }
          uint64_t v69 = *(void *)(v14 + 40);
          uint64_t v70 = *(void *)(v63 + 16 * v67);
          if (!v69) {
            break;
          }
          __int16 v71 = (unsigned __int8 *)(v63 + 16 * v67 + 10);
          if ((unsigned __int16)((v17 & v62) % 0x30) < 9u)
          {
            __int16 v72 = 0;
            LOBYTE(v73) = (v17 & v62) % 0x30;
            goto LABEL_68;
          }
          __int16 v72 = 0;
          uint64_t v73 = (unsigned __int16)(v66 - 48 * v67 - 9) >> 3;
          if (!((unsigned __int16)(v66 - 48 * v67 - 9) >> 3))
          {
            LODWORD(v73) = (v17 & v62) % 0x30;
            unint64_t v77 = (unsigned __int8 *)(v63 + 16 * v67 + 10);
            do
            {
LABEL_66:
              int v82 = *v77++;
              v72 += byte_20EBFB6[v82];
              LOWORD(v73) = v73 - 8;
            }
            while ((unsigned __int16)v73 > 8u);
            goto LABEL_67;
          }
          __int16 v74 = 0;
          uint64_t v75 = v73 + 1;
          uint64_t v76 = (v73 + 1) & 0x3FFE;
          LOWORD(v73) = v68 - 8 * v76;
          unint64_t v77 = &v71[v76];
          uint64_t v78 = (unsigned __int8 *)(v64 + 16 * v67);
          uint64_t v79 = v76;
          do
          {
            uint64_t v80 = *(v78 - 1);
            int v81 = *v78;
            v78 += 2;
            v72 += byte_20EBFB6[v80];
            v74 += byte_20EBFB6[v81];
            v79 -= 2;
          }
          while (v79);
          v72 += v74;
          if (v75 != v76) {
            goto LABEL_66;
          }
LABEL_67:
          v71 += ((unsigned __int16)(v68 - 9) >> 3) + 1;
LABEL_68:
          uint64_t v83 = (_DWORD *)(v70
                         + 12
                         * (unsigned __int16)(v72 + byte_20EBFB6[~(-1 << v73) & (unint64_t)*v71]));
          if (*(_DWORD *)(v14 + 36) == v83[1] && *(_DWORD *)(v14 + 32) == *v83)
          {
            if (v65 == -1) {
              uint64_t v65 = v66;
            }
LABEL_55:
            unint64_t v17 = ++v61 + v66;
            continue;
          }
          break;
        }
        __int16 v85 = (unsigned __int8 *)(v63 + 16 * v67 + 10);
        if ((unsigned __int16)v68 < 9u)
        {
          __int16 v86 = 0;
          int v97 = (unsigned __int8 *)(v63 + 16 * v67 + 10);
          LOBYTE(v91) = v68;
          goto LABEL_82;
        }
        __int16 v86 = 0;
        uint64_t v87 = (unsigned __int16)(v66 - 48 * v67 - 9) >> 3;
        if (!((unsigned __int16)(v66 - 48 * v67 - 9) >> 3))
        {
          unsigned __int16 v91 = v68;
          uint64_t v92 = (unsigned __int8 *)(v63 + 16 * v67 + 10);
          do
          {
LABEL_80:
            int v98 = *v92++;
            v86 += byte_20EBFB6[v98];
            v91 -= 8;
          }
          while (v91 > 8u);
          goto LABEL_81;
        }
        __int16 v88 = 0;
        uint64_t v89 = v87 + 1;
        uint64_t v90 = (v87 + 1) & 0x3FFE;
        unsigned __int16 v91 = v68 - 8 * v90;
        uint64_t v92 = &v85[v90];
        uint64_t v93 = (unsigned __int8 *)(v64 + 16 * v67);
        uint64_t v94 = v90;
        do
        {
          uint64_t v95 = *(v93 - 1);
          int v96 = *v93;
          v93 += 2;
          v86 += byte_20EBFB6[v95];
          v88 += byte_20EBFB6[v96];
          v94 -= 2;
        }
        while (v94);
        v86 += v88;
        if (v89 != v90) {
          goto LABEL_80;
        }
LABEL_81:
        int v97 = &v85[((unsigned __int16)(v68 - 9) >> 3) + 1];
LABEL_82:
        if (v13 != *(void *)(v70
                              + 12
                              * (unsigned __int16)(v86
                                                 + byte_20EBFB6[~(-1 << v91) & (unint64_t)*v97])))
          goto LABEL_55;
        if (v66 == -1)
        {
          unint64_t v104 = -1;
LABEL_93:
          sub_AD3484(v14, (uint64_t *)&v301, v104, v303);
          __int16 v105 = v304;
          goto LABEL_114;
        }
        if ((unsigned __int16)v68 < 9u)
        {
          __int16 v101 = 0;
        }
        else
        {
          if ((((_WORD)v66 - 48 * (_WORD)v67 - 8) & 0xFFF8) != 0) {
            __int16 v99 = 8;
          }
          else {
            __int16 v99 = v66 - 48 * v67 - 8;
          }
          unsigned __int16 v100 = ~v99 + v66 - 48 * v67;
          if (v100 < 8u)
          {
            __int16 v101 = 0;
            unsigned __int16 v102 = v68;
            unint64_t v103 = (unsigned __int8 *)(v63 + 16 * v67 + 10);
            goto LABEL_220;
          }
          __int16 v212 = 0;
          __int16 v213 = 0;
          uint64_t v214 = (v100 >> 3) + 1;
          unsigned __int16 v102 = v68 - 8 * (((v100 >> 3) + 1) & 0x3FFE);
          unint64_t v103 = &v85[v214 & 0x3FFE];
          unsigned int v215 = (unsigned __int8 *)(v63 + 16 * v67 + 11);
          uint64_t v216 = v214 & 0x3FFE;
          do
          {
            uint64_t v217 = *(v215 - 1);
            int v218 = *v215;
            v215 += 2;
            v212 += byte_20EBFB6[v217];
            v213 += byte_20EBFB6[v218];
            v216 -= 2;
          }
          while (v216);
          __int16 v101 = v213 + v212;
          if ((v214 & 0x3FFE) != v214)
          {
            do
            {
LABEL_220:
              int v219 = *v103++;
              v101 += byte_20EBFB6[v219];
              v102 -= 8;
            }
            while (v102 > 8u);
          }
          v85 += ((unsigned __int16)(v68 - 9) >> 3) + 1;
          LOBYTE(v68) = v102;
        }
        uint64_t v220 = v63 + 16 * v67;
        int v221 = *(_DWORD ***)(v14 + 56);
        unsigned __int16 v222 = v101 + byte_20EBFB6[~(-1 << v68) & (unint64_t)*v85];
        __int16 v105 = (_DWORD *)(v70 + 12 * v222);
        if (*(unsigned __int16 *)(v220 + 8) == v222)
        {
          uint64_t v223 = v220 + 16;
          if ((_DWORD **)(v220 + 16) != v221)
          {
            while (1)
            {
              __int16 v224 = (_DWORD **)v223;
              if (*(_WORD *)(v223 + 8)) {
                break;
              }
              v223 += 16;
              if (v224 + 2 == v221)
              {
                uint64_t v220 = *(void *)(v14 + 56);
                goto LABEL_228;
              }
            }
            uint64_t v220 = v223;
LABEL_228:
            __int16 v105 = *v224;
            goto LABEL_229;
          }
        }
        else
        {
LABEL_229:
          if ((_DWORD **)v220 != v221 && v69)
          {
            do
            {
              if (*(_DWORD *)(v14 + 36) != v105[1] || *(_DWORD *)(v14 + 32) != *v105) {
                break;
              }
              v105 += 3;
              if (v105 == (_DWORD *)(*(void *)v220 + 12 * *(unsigned __int16 *)(v220 + 8)))
              {
                v220 += 16;
                if ((_DWORD **)v220 != v221)
                {
                  do
                  {
                    if (*(_WORD *)(v220 + 8))
                    {
                      __int16 v105 = *(_DWORD **)v220;
                      goto LABEL_233;
                    }
                    v220 += 16;
                  }
                  while ((_DWORD **)v220 != v221);
                  __int16 v105 = *(_DWORD **)(v220 - 16);
                }
                break;
              }
LABEL_233:
              ;
            }
            while ((_DWORD **)v220 != v221);
          }
        }
LABEL_114:
        unsigned int v120 = v105[2];
        if (v120 != -1) {
          goto LABEL_138;
        }
        int v121 = *(_DWORD *)(v14 + 112);
        *(_DWORD *)(v14 + 112) = v121 + 1;
        v105[2] = v121;
        uint64_t v123 = *(unint64_t **)(v14 + 96);
        unint64_t v122 = *(void *)(v14 + 104);
        if ((unint64_t)v123 < v122)
        {
          *uint64_t v123 = v13;
          uint64_t v124 = (uint64_t)(v123 + 1);
          goto LABEL_137;
        }
        uint64_t v125 = (unint64_t **)(v14 + 88);
        uint64_t v126 = *(char **)(v14 + 88);
        uint64_t v127 = ((char *)v123 - v126) >> 3;
        unint64_t v128 = v127 + 1;
        if ((unint64_t)(v127 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v129 = v122 - (void)v126;
        if (v129 >> 2 > v128) {
          unint64_t v128 = v129 >> 2;
        }
        if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v128 = 0x1FFFFFFFFFFFFFFFLL;
        }
        if (!v128)
        {
          unint64_t v130 = 0;
          unint64_t v131 = 0;
          uint64_t v132 = (unint64_t *)(8 * v127);
          *(void *)(8 * v127) = v13;
          uint64_t v124 = 8 * v127 + 8;
          if (v123 != (unint64_t *)v126) {
            goto LABEL_125;
          }
LABEL_128:
          *(void *)(v14 + 88) = v132;
          *(void *)(v14 + 96) = v124;
          *(void *)(v14 + 104) = &v131[8 * v130];
          uint64_t v1 = a1;
          if (v123) {
            goto LABEL_136;
          }
          goto LABEL_137;
        }
        if (v128 >> 61) {
          goto LABEL_325;
        }
        unint64_t v130 = v128;
        unint64_t v131 = (char *)operator new(8 * v128);
        uint64_t v125 = (unint64_t **)(v14 + 88);
        uint64_t v132 = (unint64_t *)&v131[8 * v127];
        *uint64_t v132 = v13;
        uint64_t v124 = (uint64_t)(v132 + 1);
        if (v123 == (unint64_t *)v126) {
          goto LABEL_128;
        }
LABEL_125:
        unint64_t v133 = (char *)(v123 - 1) - v126;
        if (v133 < 0x58) {
          goto LABEL_330;
        }
        if ((unint64_t)(v126 - v131) < 0x20) {
          goto LABEL_330;
        }
        uint64_t v134 = (v133 >> 3) + 1;
        uint64_t v135 = 8 * (v134 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v136 = &v123[v135 / 0xFFFFFFFFFFFFFFF8];
        uint64_t v132 = (unint64_t *)((char *)v132 - v135);
        uint64_t v137 = &v131[8 * v127 - 16];
        long long v138 = v123 - 2;
        uint64_t v139 = v134 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v140 = *(_OWORD *)v138;
          *((_OWORD *)v137 - 1) = *((_OWORD *)v138 - 1);
          *(_OWORD *)uint64_t v137 = v140;
          v137 -= 32;
          v138 -= 4;
          v139 -= 4;
        }
        while (v139);
        uint64_t v123 = v136;
        if (v134 != (v134 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_330:
          do
          {
            unint64_t v141 = *--v123;
            *--uint64_t v132 = v141;
          }
          while (v123 != (unint64_t *)v126);
        }
        uint64_t v123 = *v125;
        *(void *)(v14 + 88) = v132;
        *(void *)(v14 + 96) = v124;
        *(void *)(v14 + 104) = &v131[8 * v130];
        uint64_t v1 = a1;
        if (v123) {
LABEL_136:
        }
          operator delete(v123);
LABEL_137:
        *(void *)(v14 + 96) = v124;
        unsigned int v120 = v105[2];
LABEL_138:
        unsigned int v142 = *((unsigned __int16 *)v297 + 5);
        unint64_t v143 = v120;
        unint64_t v144 = (unint64_t)v120 >> 6;
        if (v1[47] <= (unint64_t)v120)
        {
          uint64_t v148 = (unsigned char *)v1[43];
          __int16 v151 = (unsigned char *)v1[44];
          int64_t v152 = v151 - v148;
          unint64_t v153 = (v151 - v148) >> 2;
          if (v153 <= v120) {
            goto LABEL_146;
          }
LABEL_183:
          uint64_t v189 = *(void *)(*v291 + 8 * v144);
          uint64_t v1 = a1;
          if ((v189 & (1 << v143)) == 0)
          {
            *(void *)(*v291 + 8 * v144) = v189 | (1 << v143);
            unsigned __int16 v191 = (char *)a1[50];
            unint64_t v190 = a1[51];
            if ((unint64_t)v191 < v190)
            {
              *(_DWORD *)unsigned __int16 v191 = v120;
              uint64_t v192 = (uint64_t)(v191 + 4);
              goto LABEL_206;
            }
            int v193 = (char *)*v283;
            uint64_t v194 = v191 - (unsigned char *)*v283;
            uint64_t v195 = v194 >> 2;
            unint64_t v196 = (v194 >> 2) + 1;
            if (v196 >> 62) {
LABEL_326:
            }
              sub_2E00();
            uint64_t v197 = v190 - (void)v193;
            if (v197 >> 1 > v196) {
              unint64_t v196 = v197 >> 1;
            }
            if ((unint64_t)v197 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v198 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v198 = v196;
            }
            if (v198)
            {
              if (v198 >> 62) {
                goto LABEL_325;
              }
              unsigned int v199 = v120;
              uint64_t v200 = operator new(4 * v198);
              uint64_t v201 = (unsigned int *)&v200[4 * v195];
              unsigned int *v201 = v199;
              uint64_t v192 = (uint64_t)(v201 + 1);
              if (v191 != v193)
              {
LABEL_195:
                unint64_t v202 = v191 - 4 - v193;
                if (v202 < 0x2C) {
                  goto LABEL_331;
                }
                if ((unint64_t)(v191 - &v200[v194]) < 0x20) {
                  goto LABEL_331;
                }
                uint64_t v203 = (v202 >> 2) + 1;
                uint64_t v204 = 4 * (v203 & 0x7FFFFFFFFFFFFFF8);
                __int16 v205 = &v191[-v204];
                uint64_t v201 = (unsigned int *)((char *)v201 - v204);
                unsigned int v206 = &v200[4 * v195 - 16];
                unsigned int v207 = v191 - 16;
                uint64_t v208 = v203 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v209 = *(_OWORD *)v207;
                  *(v206 - 1) = *((_OWORD *)v207 - 1);
                  *unsigned int v206 = v209;
                  v206 -= 2;
                  v207 -= 32;
                  v208 -= 8;
                }
                while (v208);
                unsigned __int16 v191 = v205;
                if (v203 != (v203 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_331:
                  do
                  {
                    unsigned int v210 = *((_DWORD *)v191 - 1);
                    v191 -= 4;
                    *--uint64_t v201 = v210;
                  }
                  while (v191 != v193);
                }
              }
            }
            else
            {
              uint64_t v200 = 0;
              uint64_t v201 = (unsigned int *)(4 * v195);
              *(_DWORD *)(4 * v195) = v120;
              uint64_t v192 = 4 * v195 + 4;
              if (v191 != v193) {
                goto LABEL_195;
              }
            }
            uint64_t v1 = a1;
            a1[49] = v201;
            a1[50] = v192;
            a1[51] = &v200[4 * v198];
            if (v193) {
              operator delete(v193);
            }
LABEL_206:
            v1[50] = v192;
          }
          *(_DWORD *)(v1[43] + 4 * v143) = v142;
          goto LABEL_208;
        }
        uint64_t v145 = v1[46];
        uint64_t v146 = *(void *)(v145 + 8 * v144);
        uint64_t v147 = 1 << v120;
        uint64_t v148 = (unsigned char *)v1[43];
        if ((v146 & (1 << v120)) == 0) {
          goto LABEL_143;
        }
        int v149 = (unsigned char *)v1[44];
        unint64_t v150 = (v149 - v148) >> 2;
        if (v150 <= v120)
        {
          unint64_t v167 = v120 + 1;
          BOOL v168 = v167 >= v150;
          unint64_t v169 = v167 - v150;
          unsigned int v284 = *((unsigned __int16 *)v297 + 5);
          unsigned int v287 = v120;
          unint64_t v289 = (unint64_t)v120 >> 6;
          if (v167 <= v150)
          {
            uint64_t v1 = a1;
            if (!v168) {
              a1[44] = &v148[4 * v167];
            }
          }
          else
          {
            uint64_t v170 = a1[45];
            if (v169 <= (v170 - (uint64_t)v149) >> 2)
            {
              uint64_t v179 = 4 * v169;
              unint64_t v180 = v120 + 1;
              memset(v149, 255, 4 * v169);
              unint64_t v167 = v180;
              a1[44] = &v149[v179];
              uint64_t v1 = a1;
            }
            else
            {
              unint64_t v171 = v167 - v150;
              uint64_t v172 = v170 - (void)v148;
              uint64_t v173 = v172 >> 1;
              *(void *)uint64_t v282 = v120 + 1;
              if (v172 >> 1 <= v167) {
                uint64_t v173 = v120 + 1;
              }
              BOOL v168 = (unint64_t)v172 >= 0x7FFFFFFFFFFFFFFCLL;
              unint64_t v174 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v168) {
                unint64_t v174 = v173;
              }
              if (v174 >> 62) {
                goto LABEL_325;
              }
              uint64_t v280 = 4 * v174;
              unsigned int v278 = operator new(4 * v174);
              int v277 = &v278[4 * v150];
              memset(v277, 255, 4 * v171);
              if (v149 == v148)
              {
                long long v175 = &v278[4 * v150];
                uint64_t v177 = v175;
                unint64_t v167 = *(void *)v282;
                uint64_t v178 = v278;
              }
              else
              {
                long long v175 = &v278[4 * v150];
                unint64_t v176 = v149 - 4 - v148;
                if (v176 < 0x2C)
                {
                  uint64_t v177 = &v278[4 * v150];
                  unint64_t v167 = *(void *)v282;
                  uint64_t v178 = v278;
                  goto LABEL_249;
                }
                uint64_t v178 = v278;
                uint64_t v177 = &v278[4 * v150];
                unint64_t v167 = *(void *)v282;
                if ((unint64_t)(v148 - v278) < 0x20) {
                  goto LABEL_332;
                }
                uint64_t v226 = (v176 >> 2) + 1;
                uint64_t v227 = 4 * (v226 & 0x7FFFFFFFFFFFFFF8);
                int v228 = &v149[-v227];
                uint64_t v177 = &v277[-v227];
                uint64_t v229 = &v278[4 * v150 - 16];
                uint64_t v230 = (long long *)(v149 - 16);
                uint64_t v231 = v226 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v232 = *v230;
                  *(v229 - 1) = *(v230 - 1);
                  *uint64_t v229 = v232;
                  v229 -= 2;
                  v230 -= 2;
                  v231 -= 8;
                }
                while (v231);
                int v149 = v228;
                if (v226 != (v226 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_332:
                  do
                  {
LABEL_249:
                    int v233 = *((_DWORD *)v149 - 1);
                    v149 -= 4;
                    *((_DWORD *)v177 - 1) = v233;
                    v177 -= 4;
                  }
                  while (v149 != v148);
                }
              }
              uint64_t v1 = a1;
              a1[43] = v177;
              a1[44] = &v175[4 * v171];
              a1[45] = &v178[v280];
              if (v148)
              {
                operator delete(v148);
                unint64_t v167 = *(void *)v282;
              }
            }
          }
          sub_A3E96C((uint64_t)v291, v167, 0);
          uint64_t v145 = *v291;
          unint64_t v144 = v289;
          uint64_t v146 = *(void *)(*v291 + 8 * v289);
          unsigned int v142 = v284;
          unsigned int v120 = v287;
          if ((v146 & v147) == 0) {
            goto LABEL_253;
          }
LABEL_142:
          uint64_t v148 = (unsigned char *)v1[43];
          if (*(_DWORD *)&v148[4 * v143] >= v142) {
            goto LABEL_208;
          }
LABEL_143:
          __int16 v151 = (unsigned char *)v1[44];
          int64_t v152 = v151 - v148;
          unint64_t v153 = (v151 - v148) >> 2;
          if (v153 > v143) {
            goto LABEL_183;
          }
LABEL_146:
          unint64_t v154 = v120 + 1;
          unint64_t v155 = v154 - v153;
          unsigned int v286 = v120;
          unint64_t v288 = v144;
          if (v154 <= v153)
          {
            if (v154 < v153) {
              a1[44] = &v148[4 * v154];
            }
          }
          else
          {
            uint64_t v156 = a1[45];
            if (v155 <= (v156 - (uint64_t)v151) >> 2)
            {
              memset(v151, 255, 4 * v155);
              a1[44] = &v151[4 * v155];
            }
            else
            {
              uint64_t v157 = v156 - (void)v148;
              uint64_t v158 = v157 >> 1;
              if (v157 >> 1 <= v154) {
                uint64_t v158 = v120 + 1;
              }
              BOOL v168 = (unint64_t)v157 >= 0x7FFFFFFFFFFFFFFCLL;
              unint64_t v159 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v168) {
                unint64_t v159 = v158;
              }
              if (v159 >> 62) {
                goto LABEL_325;
              }
              *(void *)unint64_t v281 = 4 * v159;
              unint64_t v279 = operator new(4 * v159);
              memset(&v279[4 * v153], 255, 4 * v155);
              if (v151 == v148)
              {
                uint64_t v162 = &v279[4 * v153];
                unsigned __int16 v163 = a1;
                unsigned int v164 = v279;
                uint64_t v165 = *(void *)v281;
                int v161 = v162;
                uint64_t v166 = 4 * v155;
              }
              else
              {
                unint64_t v160 = v151 - 4 - v148;
                if (v160 < 0x2C)
                {
                  int v161 = &v279[4 * v153];
                  uint64_t v162 = v161;
                  unsigned __int16 v163 = a1;
                  unsigned int v164 = v279;
                  uint64_t v165 = *(void *)v281;
                  uint64_t v166 = 4 * v155;
                  goto LABEL_179;
                }
                unsigned int v164 = v279;
                uint64_t v165 = *(void *)v281;
                int v161 = &v279[4 * v153];
                uint64_t v162 = v161;
                unsigned __int16 v163 = a1;
                uint64_t v166 = 4 * v155;
                if ((unint64_t)(&v151[-v152] - v279) < 0x20) {
                  goto LABEL_333;
                }
                uint64_t v181 = (v160 >> 2) + 1;
                uint64_t v182 = 4 * (v181 & 0x7FFFFFFFFFFFFFF8);
                uint64_t v183 = &v151[-v182];
                uint64_t v162 = &v161[-v182];
                int32x2_t v184 = &v279[4 * v153 - 16];
                uint64_t v185 = (long long *)(v151 - 16);
                uint64_t v186 = v181 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v187 = *v185;
                  *(v184 - 1) = *(v185 - 1);
                  *int32x2_t v184 = v187;
                  v184 -= 2;
                  v185 -= 2;
                  v186 -= 8;
                }
                while (v186);
                __int16 v151 = v183;
                if (v181 != (v181 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_333:
                  do
                  {
LABEL_179:
                    int v188 = *((_DWORD *)v151 - 1);
                    v151 -= 4;
                    *((_DWORD *)v162 - 1) = v188;
                    v162 -= 4;
                  }
                  while (v151 != v148);
                }
              }
              v163[43] = v162;
              v163[44] = &v161[v166];
              v163[45] = &v164[v165];
              if (v148) {
                operator delete(v148);
              }
            }
          }
          sub_A3E96C((uint64_t)v291, v154, 0);
          unsigned int v120 = v286;
          unint64_t v144 = v288;
          goto LABEL_183;
        }
        uint64_t v1 = a1;
        if ((v146 & v147) != 0) {
          goto LABEL_142;
        }
LABEL_253:
        *(void *)(v145 + 8 * v144) = v146 | v147;
        unsigned __int16 v235 = (char *)v1[50];
        unint64_t v234 = v1[51];
        if ((unint64_t)v235 < v234)
        {
          *(_DWORD *)unsigned __int16 v235 = v120;
          uint64_t v236 = (uint64_t)(v235 + 4);
          goto LABEL_276;
        }
        uint64_t v237 = (char *)*v283;
        uint64_t v238 = v235 - (unsigned char *)*v283;
        uint64_t v239 = v238 >> 2;
        unint64_t v240 = (v238 >> 2) + 1;
        if (v240 >> 62) {
          goto LABEL_326;
        }
        uint64_t v241 = v234 - (void)v237;
        if (v241 >> 1 > v240) {
          unint64_t v240 = v241 >> 1;
        }
        if ((unint64_t)v241 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v242 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v242 = v240;
        }
        unint64_t v290 = v144;
        if (v242)
        {
          if (!(v242 >> 62))
          {
            unsigned int v243 = v120;
            unsigned __int16 v244 = operator new(4 * v242);
            unsigned int v120 = v243;
            uint64_t v245 = (unsigned int *)&v244[4 * v239];
            *uint64_t v245 = v243;
            uint64_t v236 = (uint64_t)(v245 + 1);
            if (v235 != v237) {
              goto LABEL_264;
            }
            goto LABEL_273;
          }
LABEL_325:
          sub_188D718();
        }
        unsigned __int16 v244 = 0;
        uint64_t v245 = (unsigned int *)(4 * v239);
        *(_DWORD *)(4 * v239) = v120;
        uint64_t v236 = 4 * v239 + 4;
        if (v235 != v237)
        {
LABEL_264:
          unint64_t v246 = v235 - 4 - v237;
          if (v246 < 0x2C) {
            goto LABEL_334;
          }
          if ((unint64_t)(v235 - &v244[v238]) < 0x20) {
            goto LABEL_334;
          }
          uint64_t v247 = (v246 >> 2) + 1;
          uint64_t v248 = 4 * (v247 & 0x7FFFFFFFFFFFFFF8);
          unint64_t v249 = &v235[-v248];
          uint64_t v245 = (unsigned int *)((char *)v245 - v248);
          uint64_t v250 = &v244[4 * v239 - 16];
          uint64_t v251 = v235 - 16;
          uint64_t v252 = v247 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v253 = *(_OWORD *)v251;
            *(v250 - 1) = *((_OWORD *)v251 - 1);
            _OWORD *v250 = v253;
            v250 -= 2;
            v251 -= 32;
            v252 -= 8;
          }
          while (v252);
          unsigned __int16 v235 = v249;
          if (v247 != (v247 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_334:
            do
            {
              unsigned int v254 = *((_DWORD *)v235 - 1);
              v235 -= 4;
              *--uint64_t v245 = v254;
            }
            while (v235 != v237);
          }
        }
LABEL_273:
        uint64_t v1 = a1;
        a1[49] = v245;
        a1[50] = v236;
        a1[51] = &v244[4 * v242];
        if (v237)
        {
          unsigned int v255 = v120;
          operator delete(v237);
          unsigned int v120 = v255;
        }
        unint64_t v144 = v290;
LABEL_276:
        v1[50] = v236;
        uint64_t v148 = (unsigned char *)v1[43];
        if (*(_DWORD *)&v148[4 * v143] < v142) {
          goto LABEL_143;
        }
LABEL_208:
        unint64_t v11 = (unint64_t)v298;
        unint64_t v10 = v297 + 2;
        long long v297 = v10;
        if (v10 == v298)
        {
          int v211 = v295 + 2;
          long long v295 = v211;
          if ((unint64_t)v211 >= v296) {
            goto LABEL_6;
          }
          while (1)
          {
            unint64_t v10 = (void *)*v211;
            unint64_t v11 = v211[1];
            if (*v211 != v11) {
              break;
            }
            v211 += 2;
            long long v295 = v211;
            if ((unint64_t)v211 >= v296) {
              goto LABEL_6;
            }
          }
          long long v297 = (void *)*v211;
          long long v298 = (void *)v11;
          if ((unint64_t)v10 < v11)
          {
            while (1)
            {
LABEL_281:
              if (!v300)
              {
                uint64_t v256 = v294[0];
                uint64_t v257 = *v10;
                uint64_t v258 = *(void *)(v294[0] + 4136);
                if (sub_C259C0(v258 + 3896))
                {
                  if (*(void *)(v258 + 3944))
                  {
                    unint64_t v259 = __ROR8__(v257, 32);
                    if (!sub_A10E20((void *)(v256 + 4136), SHIDWORD(v259)))
                    {
                      unsigned int v260 = *(void **)(*(void *)(v256 + 4136) + 3944);
                      int8x8_t v261 = (int8x8_t)v260[1];
                      if (v261)
                      {
                        unint64_t v262 = 0xC4CEB9FE1A85EC53
                             * ((0xFF51AFD7ED558CCDLL * (v259 ^ (v259 >> 33))) ^ ((0xFF51AFD7ED558CCDLL
                                                                                 * (v259 ^ (v259 >> 33))) >> 33));
                        unint64_t v263 = v262 ^ (v262 >> 33);
                        uint8x8_t v264 = (uint8x8_t)vcnt_s8(v261);
                        v264.i16[0] = vaddlv_u8(v264);
                        if (v264.u32[0] > 1uLL)
                        {
                          unint64_t v265 = v263;
                          if (v263 >= *(void *)&v261) {
                            unint64_t v265 = v263 % *(void *)&v261;
                          }
                        }
                        else
                        {
                          unint64_t v265 = (*(void *)&v261 - 1) & v263;
                        }
                        int v268 = *(uint64_t ***)(*v260 + 8 * v265);
                        if (v268)
                        {
                          int v269 = *v268;
                          if (v269)
                          {
                            if (v264.u32[0] < 2uLL)
                            {
                              uint64_t v270 = *(void *)&v261 - 1;
                              while (1)
                              {
                                uint64_t v274 = v269[1];
                                if (v263 == v274)
                                {
                                  if (*((_DWORD *)v269 + 5) == HIDWORD(v259) && *((_DWORD *)v269 + 4) == v259) {
                                    goto LABEL_278;
                                  }
                                }
                                else if ((v274 & v270) != v265)
                                {
                                  goto LABEL_317;
                                }
                                int v269 = (uint64_t *)*v269;
                                if (!v269) {
                                  goto LABEL_317;
                                }
                              }
                            }
                            do
                            {
                              unint64_t v272 = v269[1];
                              if (v263 == v272)
                              {
                                if (*((_DWORD *)v269 + 5) == HIDWORD(v259) && *((_DWORD *)v269 + 4) == v259)
                                {
LABEL_278:
                                  unint64_t v10 = v297;
                                  goto LABEL_279;
                                }
                              }
                              else
                              {
                                if (v272 >= *(void *)&v261) {
                                  v272 %= *(void *)&v261;
                                }
                                if (v272 != v265) {
                                  break;
                                }
                              }
                              int v269 = (uint64_t *)*v269;
                            }
                            while (v269);
                          }
                        }
                      }
                    }
                  }
                }
              }
LABEL_317:
              if (v299) {
                break;
              }
              unsigned int v275 = sub_C2599C(v294[0] + 3896);
              unint64_t v10 = v297;
              if (v275 >= *((unsigned __int8 *)v297 + 14))
              {
                if (v299) {
                  goto LABEL_8;
                }
                char v276 = sub_51D60((unsigned __int8 *)(v294[0] + 3896));
                unint64_t v10 = v297;
                if ((v276 & 1) != 0 || (*((unsigned char *)v297 + 15) & 1) == 0) {
                  goto LABEL_8;
                }
              }
LABEL_279:
              v10 += 2;
              long long v297 = v10;
              if (v10 == v298)
              {
                unint64_t v266 = v295 + 2;
                long long v295 = v266;
                if ((unint64_t)v266 >= v296) {
                  goto LABEL_8;
                }
                while (1)
                {
                  unint64_t v10 = (void *)*v266;
                  unint64_t v267 = v266[1];
                  if (*v266 != v267) {
                    break;
                  }
                  v266 += 2;
                  long long v295 = v266;
                  if ((unint64_t)v266 >= v296) {
                    goto LABEL_6;
                  }
                }
                long long v297 = (void *)*v266;
                long long v298 = (void *)v267;
                if ((unint64_t)v10 >= v267) {
                  goto LABEL_8;
                }
              }
              else if (v10 >= v298)
              {
                goto LABEL_8;
              }
            }
            unint64_t v10 = v297;
            goto LABEL_8;
          }
        }
        else if (v10 < v298)
        {
          goto LABEL_281;
        }
        goto LABEL_9;
      }
LABEL_13:
      ++v12;
    }
  }
}

uint64_t sub_AEF3A4(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 100);
  if (v1)
  {
    uint64_t v2 = result;
    int v3 = 0;
    uint64_t v4 = (void *)(result + 104);
    do
    {
      unsigned int v15 = 0;
      uint64_t v5 = *(void *)(v2 + 192);
      int v6 = (char *)(v5 + ((unint64_t)*(unsigned int *)(sub_AE36B4((uint64_t)v4, &v15) + 4) << 6));
      unsigned int v15 = 0;
      uint64_t v7 = *(void *)(v2 + 192);
      uint64_t v8 = sub_AE36B4((uint64_t)v4, &v15);
      sub_AE32F0((uint64_t)v4, 0, v6, (unsigned char *)(v7 + ((unint64_t)*(unsigned int *)(v8 + 8) << 6)));
      sub_AEFBC0(v4, v3 + *(_DWORD *)(v2 + 96) + *(_DWORD *)(v2 + 96) * *(_DWORD *)(v2 + 416) + 2, 0);
      unsigned int v15 = 0;
      uint64_t v9 = *(void *)(v2 + 192);
      uint64_t v10 = v9 + ((unint64_t)*(unsigned int *)(sub_AE36B4((uint64_t)v4, &v15) + 4) << 6);
      unsigned int v15 = 0;
      uint64_t v11 = *(void *)(v2 + 192);
      double result = sub_AE36B4((uint64_t)v4, &v15);
      uint64_t v12 = v11 + ((unint64_t)*(unsigned int *)(result + 8) << 6);
      if (v10 != v12)
      {
        double v13 = *(double *)(v2 + 592);
        uint64_t v14 = *(void *)(v2 + 584);
        do
        {
          double v13 = v13 + 1.0;
          v14 += *(int *)(v10 + 28);
          v10 += 64;
        }
        while (v10 != v12);
        *(double *)(v2 + 592) = v13;
        *(void *)(v2 + 584) = v14;
      }
      ++v3;
    }
    while (v3 != v1);
  }
  return result;
}

uint64_t sub_AEF4DC(void *a1, long long *a2, unsigned int a3, int a4, int a5)
{
  unsigned int v28 = a3;
  sub_AE51B4(a1, &v28, v24);
  uint64_t v10 = a1[6];
  uint64_t v11 = a1[7];
  unsigned int v15 = a1;
  uint64_t v16 = v10;
  uint64_t v17 = v11;
  uint64_t v18 = v11;
  uint64_t v19 = 0;
  uint64_t v20 = v10;
  uint64_t v21 = v11;
  uint64_t v22 = v11;
  uint64_t v23 = 0;
  sub_AE47A0(&v15);
  if (v24[1] == v16 && v25 == v17 && v26 == v18 && (v26 == v25 || v27 == v19)
    || *(_DWORD *)(v27 + 8) == *(_DWORD *)(v27 + 4))
  {
    sub_AE4980((uint64_t)a1, a3, a2);
    return 1;
  }
  else
  {
    __int16 v13 = sub_AEF7D8((uint64_t)a1, (uint64_t)a2, a3, a4, a5);
    char v14 = v13;
    if ((v13 & 0x100) != 0) {
      sub_AE50A8((uint64_t)a1, a3);
    }
    return v14 & 1;
  }
}

BOOL sub_AEF60C(void *a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  unsigned int v37 = a2;
  sub_AE51B4(a1, &v37, v34);
  uint64_t v12 = a1[6];
  uint64_t v13 = a1[7];
  uint64_t v26 = a1;
  *(void *)&long long v27 = v12;
  *((void *)&v27 + 1) = v13;
  uint64_t v28 = v13;
  uint64_t v29 = 0;
  uint64_t v30 = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v13;
  uint64_t v33 = 0;
  sub_AE47A0(&v26);
  if (*(_OWORD *)&v34[8] == v27
    && *(void *)&v34[24] == v28
    && (*(void *)&v34[24] == *(void *)&v34[16] || (void)v35 == v29))
  {
    goto LABEL_7;
  }
  int v14 = *(_DWORD *)(v35 + 4);
  int v15 = *(_DWORD *)(v35 + 8);
  int v16 = v15 - v14;
  if (v15 == v14) {
    goto LABEL_7;
  }
  if (a6 == 0x7FFFFFFF)
  {
    unsigned int v17 = 0;
    do
      sub_AE5380(a1, a2, v17++);
    while (v16 != v17);
LABEL_7:
    LOBYTE(v18) = 0;
    return v18 != 0;
  }
  __int16 v18 = 0;
  unsigned int v20 = 0;
  do
  {
    uint64_t v21 = (_OWORD *)sub_AE5380(a1, a2, v20);
    long long v22 = v21[2];
    long long v23 = v21[3];
    long long v24 = v21[1];
    *(_OWORD *)uint64_t v34 = *v21;
    *(_OWORD *)&v34[16] = v24;
    long long v35 = v22;
    long long v36 = v23;
    if (SHIDWORD(v24) >= a6)
    {
      __int16 v25 = sub_AEFA48((uint64_t)a1, v34, a3, a4, a5);
      __int16 v18 = v25 | v18 | (v25 | v18) & 0xFF00;
    }
    ++v20;
  }
  while (v16 != v20);
  if ((v18 & 0xFF00) != 0)
  {
    sub_AE50A8((uint64_t)a1, a3);
    sub_AE50A8((uint64_t)a1, a4);
  }
  return v18 != 0;
}

unint64_t sub_AEF7D8(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int a5)
{
  unsigned int v40 = a3;
  sub_AE51B4((void *)a1, &v40, v36);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v27 = a1;
  uint64_t v28 = v10;
  uint64_t v29 = v11;
  uint64_t v30 = v11;
  uint64_t v31 = 0;
  uint64_t v32 = v10;
  uint64_t v33 = v11;
  uint64_t v34 = v11;
  uint64_t v35 = 0;
  sub_AE47A0(&v27);
  if (v36[1] == v28 && v37 == v29 && v38 == v30 && (v38 == v37 || v39 == v31)
    || *(_DWORD *)(v39 + 8) == *(_DWORD *)(v39 + 4))
  {
    unsigned __int8 v12 = 0;
    uint64_t v13 = sub_AE4980(a1, a3, (long long *)a2);
    if (!a5) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  LODWORD(v36[0]) = a3;
  uint64_t v14 = *(void *)(a1 + 88);
  int v15 = (_DWORD *)(v14 + ((unint64_t)*(unsigned int *)(sub_AE36B4(a1, (unsigned int *)v36) + 4) << 6));
  LODWORD(v36[0]) = a3;
  uint64_t v16 = *(void *)(a1 + 88);
  unsigned int v17 = (_DWORD *)(v16 + ((unint64_t)*(unsigned int *)(sub_AE36B4(a1, (unsigned int *)v36) + 8) << 6));
  if (v15 != v17)
  {
    unsigned __int8 v12 = 0;
    while (1)
    {
      int v18 = v15[7];
      if (v18 != 0x7FFFFFFF)
      {
        int v19 = *(_DWORD *)(a2 + 28);
        if (v18 >= v19 && v15[8] <= *(_DWORD *)(a2 + 32))
        {
          unsigned int v20 = *(_DWORD *)(a2 + 36);
          unsigned int v21 = v15[9];
          if (v21 <= v20 && (v21 != v20 || v18 != v19 || v15[11] - 10 * v18 <= *(_DWORD *)(a2 + 44) - 10 * v19))
          {
            uint64_t v25 = 0;
            return v25 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v12 << 8);
          }
        }
        if (v19 >= v18 && *(_DWORD *)(a2 + 32) <= v15[8])
        {
          unsigned int v22 = v15[9];
          unsigned int v23 = *(_DWORD *)(a2 + 36);
          if (v23 <= v22 && (v23 != v22 || v19 != v18 || *(_DWORD *)(a2 + 44) - 10 * v19 <= v15[11] - 10 * v18))
          {
            v15[7] = 0x7FFFFFFF;
            unsigned __int8 v12 = 1;
          }
        }
      }
      v15 += 16;
      if (v15 == v17) {
        goto LABEL_26;
      }
    }
  }
  unsigned __int8 v12 = 0;
LABEL_26:
  uint64_t v13 = sub_AE4980(a1, a3, (long long *)a2);
  if (a5)
  {
LABEL_27:
    *(void *)(v13 + 52) = -1;
    *(_DWORD *)(v13 + 60) = 0x7FFFFFFF;
  }
LABEL_28:
  if (a4)
  {
    int v24 = *(_DWORD *)(a1 + 136);
    *(_DWORD *)(a1 + 136) = v24 + 1;
    *(_DWORD *)(v13 + 24) = v24;
    *(_DWORD *)(v13 + 20) = *(_DWORD *)(a2 + 24);
  }
  uint64_t v25 = 1;
  return v25 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v12 << 8);
}

unint64_t sub_AEFA48(uint64_t a1, _DWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  if (a5 == -1
    || (unsigned int v27 = a5,
        uint64_t v10 = *(void *)(a1 + 88),
        uint64_t v11 = (_DWORD *)(v10 + ((unint64_t)*(unsigned int *)(sub_AE36B4(a1, &v27) + 4) << 6)),
        unsigned int v28 = a5,
        uint64_t v12 = *(void *)(a1 + 88),
        uint64_t v13 = (_DWORD *)(v12 + ((unint64_t)*(unsigned int *)(sub_AE36B4(a1, &v28) + 8) << 6)),
        v11 == v13))
  {
LABEL_19:
    unint64_t v24 = sub_AEF7D8(a1, (uint64_t)a2, a4, 0, 1);
    unint64_t v22 = v24 >> 8;
    unint64_t v23 = v24 >> 16;
    uint64_t v21 = v24;
    if ((_BYTE)v24)
    {
      sub_AEF7D8(a1, (uint64_t)a2, a3, 1, 1);
      *(void *)(v25 + 52) = -1;
      *(_DWORD *)(v25 + 60) = 0x7FFFFFFF;
    }
  }
  else
  {
    int v14 = a2[7];
    unsigned int v15 = a2[9];
    while (1)
    {
      int v16 = v11[7];
      if (v16 != 0x7FFFFFFF && v16 >= v14 && v11[8] <= a2[8])
      {
        unsigned int v18 = v11[9];
        if (v18 <= v15)
        {
          BOOL v19 = v11[11] - 10 * v16 > a2[11] - 10 * v14 && v16 == v14;
          if (!v19 || v18 != v15) {
            break;
          }
        }
      }
      v11 += 16;
      if (v11 == v13) {
        goto LABEL_19;
      }
    }
    uint64_t v21 = 0;
    LOBYTE(v22) = 0;
    unint64_t v23 = 0;
  }
  return ((unint64_t)v22 << 8) | (v23 << 16) | v21;
}

BOOL sub_AEFBC0(void *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v31 = a2;
  sub_AE51B4(a1, &v31, v28);
  uint64_t v6 = a1[6];
  uint64_t v7 = a1[7];
  unsigned int v20 = a1;
  *(void *)&long long v21 = v6;
  *((void *)&v21 + 1) = v7;
  uint64_t v22 = v7;
  uint64_t v23 = 0;
  uint64_t v24 = v6;
  uint64_t v25 = v7;
  uint64_t v26 = v7;
  uint64_t v27 = 0;
  sub_AE47A0(&v20);
  if (*(_OWORD *)&v28[8] == v21
    && *(void *)&v28[24] == v22
    && (*(void *)&v28[24] == *(void *)&v28[16] || (void)v29 == v23))
  {
    LOBYTE(v10) = 0;
  }
  else
  {
    int v8 = *(_DWORD *)(v29 + 4);
    int v9 = *(_DWORD *)(v29 + 8);
    __int16 v10 = 0;
    int v11 = v9 - v8;
    if (v9 != v8)
    {
      unsigned int v12 = 0;
      do
      {
        uint64_t v13 = (long long *)sub_AE5380(a1, a2, v12);
        long long v14 = v13[3];
        long long v16 = *v13;
        long long v15 = v13[1];
        long long v29 = v13[2];
        long long v30 = v14;
        *(_OWORD *)unsigned int v28 = v16;
        *(_OWORD *)&v28[16] = v15;
        __int16 v17 = sub_AEF7D8((uint64_t)a1, (uint64_t)v28, a3, 0, 1);
        uint64_t v18 = (unsigned __int16)(v17 | v10) & 0xFF00;
        __int16 v10 = v17 | v10 | v18;
        ++v12;
      }
      while (v11 != v12);
      if (v18) {
        sub_AE50A8((uint64_t)a1, a3);
      }
    }
  }
  return v10 != 0;
}

unint64_t sub_AEFD14(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4 = a1;
  unsigned int v345 = a3;
  *(double *)(a1 + 608) = *(double *)(a1 + 608) + 1.0;
  unint64_t v5 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 40) + 88), a3);
  unsigned int v307 = *(_DWORD *)sub_A3F74C((void *)(v4 + 344), &v345);
  unint64_t v314 = v5;
  unint64_t result = (unint64_t)sub_A40514(&v343, *(void *)(v4 + 24), v5);
  uint64_t v7 = v343;
  if ((unint64_t)v343 < v344)
  {
    uint64_t v317 = (void *)(v4 + 104);
    uint64_t v318 = v4 + 424;
    int v304 = ~a2;
    int v305 = a2 + 2;
    unint64_t v303 = (uint64_t *)(v4 + 248);
    int v315 = a2 + 1;
    unint64_t v308 = HIDWORD(v5);
    uint64_t v319 = v4;
    do
    {
      *(double *)(v4 + 616) = *(double *)(v4 + 616) + 1.0;
      uint64_t v316 = *(unsigned int *)v7;
      LODWORD(v331) = 0;
      uint64_t v8 = *(void *)(v4 + 192);
      int v9 = (char *)(v8 + ((unint64_t)*(unsigned int *)(sub_AE36B4((uint64_t)v317, (unsigned int *)&v331) + 4) << 6));
      LODWORD(v331) = 0;
      uint64_t v10 = *(void *)(v4 + 192);
      uint64_t v11 = sub_AE36B4((uint64_t)v317, (unsigned int *)&v331);
      sub_AE32F0((uint64_t)v317, 0, v9, (unsigned char *)(v10 + ((unint64_t)*(unsigned int *)(v11 + 8) << 6)));
      unint64_t result = sub_A1E9A0((uint64_t)&v331, *(void *)(v4 + 24), v314, v307, 0, 1);
      unint64_t v13 = v334;
      unsigned int v12 = v335;
      while ((unint64_t)v12 >= v13 && (unint64_t)v12 < v336)
      {
        uint64_t v14 = 0;
        unint64_t v15 = __ROR8__(*v12, 32);
        uint64_t v16 = *(void *)(v4 + 32);
        uint64_t v17 = *(void *)(v16 + 72) - 1;
        unint64_t v18 = 0xC4CEB9FE1A85EC53
            * ((0xFF51AFD7ED558CCDLL * (v15 ^ (v15 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v15 ^ (v15 >> 33))) >> 33));
        unint64_t v19 = v18 ^ (v18 >> 33);
        uint64_t v20 = *(void *)(v16 + 48);
        uint64_t v21 = v20 + 11;
        uint64_t v22 = -1;
        for (unint64_t i = v19; ; unint64_t i = v14 + v24)
        {
          uint64_t v24 = i & v17;
          unint64_t v25 = (i & v17) / 0x30;
          unint64_t v26 = v24 - 48 * v25;
          if (((*(unsigned __int8 *)(v20 + 16 * v25 + (v26 >> 3) + 10) >> (v26 & 7)) & 1) == 0)
          {
            if (v22 == -1) {
              unint64_t v62 = v24;
            }
            else {
              unint64_t v62 = v22;
            }
            if (!sub_AD2F40(v16, 1)) {
              goto LABEL_92;
            }
            goto LABEL_49;
          }
          uint64_t v27 = *(void *)(v20 + 16 * v25);
          if (!*(void *)(v16 + 40)) {
            break;
          }
          unsigned int v28 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
          if ((unsigned __int16)(v24 - 48 * v25) < 9u)
          {
            __int16 v29 = 0;
            LOBYTE(v34) = v24 - 48 * v25;
            goto LABEL_23;
          }
          __int16 v29 = 0;
          uint64_t v30 = (unsigned __int16)(v24 - 48 * v25 - 9) >> 3;
          if ((unsigned __int16)(v24 - 48 * v25 - 9) >> 3)
          {
            __int16 v31 = 0;
            uint64_t v32 = v30 + 1;
            uint64_t v33 = (v30 + 1) & 0x3FFE;
            unsigned __int16 v34 = v26 - 8 * v33;
            uint64_t v35 = &v28[v33];
            long long v36 = (unsigned __int8 *)(v21 + 16 * v25);
            uint64_t v37 = v33;
            do
            {
              uint64_t v38 = *(v36 - 1);
              int v39 = *v36;
              v36 += 2;
              v29 += byte_20EBFB6[v38];
              v31 += byte_20EBFB6[v39];
              v37 -= 2;
            }
            while (v37);
            v29 += v31;
            if (v32 == v33) {
              goto LABEL_22;
            }
          }
          else
          {
            unsigned __int16 v34 = v24 - 48 * v25;
            uint64_t v35 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
          }
          do
          {
            int v40 = *v35++;
            v29 += byte_20EBFB6[v40];
            v34 -= 8;
          }
          while (v34 > 8u);
LABEL_22:
          v28 += ((unsigned __int16)(v26 - 9) >> 3) + 1;
LABEL_23:
          __int16 v41 = (_DWORD *)(v27
                         + 12
                         * (unsigned __int16)(v29 + byte_20EBFB6[~(-1 << v34) & (unint64_t)*v28]));
          if (*(_DWORD *)(v16 + 36) != v41[1] || *(_DWORD *)(v16 + 32) != *v41) {
            break;
          }
          if (v22 == -1) {
            uint64_t v22 = v24;
          }
LABEL_10:
          ++v14;
        }
        uint64_t v43 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
        if ((unsigned __int16)(v24 - 48 * v25) < 9u)
        {
          __int16 v44 = 0;
          __int16 v55 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
          LOBYTE(v49) = v24 - 48 * v25;
          goto LABEL_37;
        }
        __int16 v44 = 0;
        uint64_t v45 = (unsigned __int16)(v24 - 48 * v25 - 9) >> 3;
        if (!((unsigned __int16)(v24 - 48 * v25 - 9) >> 3))
        {
          unsigned __int16 v49 = v24 - 48 * v25;
          uint64_t v50 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
          do
          {
LABEL_35:
            int v56 = *v50++;
            v44 += byte_20EBFB6[v56];
            v49 -= 8;
          }
          while (v49 > 8u);
          goto LABEL_36;
        }
        __int16 v46 = 0;
        uint64_t v47 = v45 + 1;
        uint64_t v48 = (v45 + 1) & 0x3FFE;
        unsigned __int16 v49 = v26 - 8 * v48;
        uint64_t v50 = &v43[v48];
        uint64_t v51 = (unsigned __int8 *)(v21 + 16 * v25);
        uint64_t v52 = v48;
        do
        {
          uint64_t v53 = *(v51 - 1);
          int v54 = *v51;
          v51 += 2;
          v44 += byte_20EBFB6[v53];
          v46 += byte_20EBFB6[v54];
          v52 -= 2;
        }
        while (v52);
        v44 += v46;
        if (v47 != v48) {
          goto LABEL_35;
        }
LABEL_36:
        __int16 v55 = &v43[((unsigned __int16)(v26 - 9) >> 3) + 1];
LABEL_37:
        if (v15 != *(void *)(v27
                              + 12
                              * (unsigned __int16)(v44
                                                 + byte_20EBFB6[~(-1 << v49) & (unint64_t)*v55])))
          goto LABEL_10;
        if (v24 != -1)
        {
          if ((unsigned __int16)(v24 - 48 * v25) < 9u)
          {
            __int16 v59 = 0;
            uint64_t v4 = v319;
          }
          else
          {
            if ((((_WORD)v24 - 48 * (_WORD)v25 - 8) & 0xFFF8) != 0) {
              __int16 v57 = 8;
            }
            else {
              __int16 v57 = v24 - 48 * v25 - 8;
            }
            unsigned __int16 v58 = ~v57 + v24 - 48 * v25;
            uint64_t v4 = v319;
            __int16 v59 = 0;
            if (v58 < 8u)
            {
              unsigned __int16 v60 = v26;
              uint64_t v61 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
              goto LABEL_97;
            }
            __int16 v107 = 0;
            uint64_t v108 = (v58 >> 3) + 1;
            unsigned __int16 v60 = v26 - 8 * (((v58 >> 3) + 1) & 0x3FFE);
            uint64_t v61 = &v43[v108 & 0x3FFE];
            uint64_t v109 = (unsigned __int8 *)(v20 + 16 * v25 + 11);
            uint64_t v110 = v108 & 0x3FFE;
            do
            {
              uint64_t v111 = *(v109 - 1);
              int v112 = *v109;
              v109 += 2;
              v59 += byte_20EBFB6[v111];
              v107 += byte_20EBFB6[v112];
              v110 -= 2;
            }
            while (v110);
            v59 += v107;
            if ((v108 & 0x3FFE) != v108)
            {
              do
              {
LABEL_97:
                int v113 = *v61++;
                v59 += byte_20EBFB6[v113];
                v60 -= 8;
              }
              while (v60 > 8u);
            }
            v43 += ((unsigned __int16)(v26 - 9) >> 3) + 1;
            LOBYTE(v26) = v60;
          }
          uint64_t v114 = *(void *)(v16 + 56);
          unsigned __int16 v115 = v59 + byte_20EBFB6[~(-1 << v26) & (unint64_t)*v43];
          uint64_t v116 = v20 + 16 * v25;
          if (*(unsigned __int16 *)(v116 + 8) != v115 || v116 + 16 == v114)
          {
            __int16 v106 = (_DWORD *)(v27 + 12 * v115);
          }
          else
          {
            uint64_t v118 = v116 + 32;
            do
            {
              if (*(_WORD *)(v118 - 8)) {
                BOOL v119 = 1;
              }
              else {
                BOOL v119 = v118 == v114;
              }
              v118 += 16;
            }
            while (!v119);
            __int16 v106 = *(_DWORD **)(v118 - 32);
          }
          goto LABEL_111;
        }
        unint64_t v62 = -1;
        if (!sub_AD2F40(v16, 1))
        {
LABEL_92:
          unint64_t v346 = v15;
          int v347 = -1;
          sub_AD3484(v16, (uint64_t *)&v346, v62, &v348);
          __int16 v106 = v350;
          uint64_t v4 = v319;
          goto LABEL_111;
        }
LABEL_49:
        uint64_t v63 = 0;
        unint64_t v346 = v15;
        int v347 = -1;
        uint64_t v64 = *(void *)(v16 + 72) - 1;
        uint64_t v65 = *(void *)(v16 + 48);
        uint64_t v66 = v65 + 11;
        uint64_t v67 = -1;
        while (2)
        {
          uint64_t v68 = v19 & v64;
          unint64_t v69 = (v19 & v64) / 0x30;
          unint64_t v70 = (v19 & v64) % 0x30;
          if (((*(unsigned __int8 *)(v65 + 16 * v69 + (v70 >> 3) + 10) >> (v70 & 7)) & 1) == 0)
          {
            if (v67 == -1) {
              unint64_t v105 = v19 & v64;
            }
            else {
              unint64_t v105 = v67;
            }
            goto LABEL_90;
          }
          uint64_t v71 = *(void *)(v16 + 40);
          uint64_t v72 = *(void *)(v65 + 16 * v69);
          if (!v71) {
            break;
          }
          uint64_t v73 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
          if ((unsigned __int16)((v19 & v64) % 0x30) < 9u)
          {
            __int16 v74 = 0;
            LOBYTE(v75) = (v19 & v64) % 0x30;
            goto LABEL_65;
          }
          __int16 v74 = 0;
          uint64_t v75 = (unsigned __int16)(v68 - 48 * v69 - 9) >> 3;
          if (!((unsigned __int16)(v68 - 48 * v69 - 9) >> 3))
          {
            LODWORD(v75) = (v19 & v64) % 0x30;
            uint64_t v79 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
            do
            {
LABEL_63:
              int v84 = *v79++;
              v74 += byte_20EBFB6[v84];
              LOWORD(v75) = v75 - 8;
            }
            while ((unsigned __int16)v75 > 8u);
            goto LABEL_64;
          }
          __int16 v76 = 0;
          uint64_t v77 = v75 + 1;
          uint64_t v78 = (v75 + 1) & 0x3FFE;
          LOWORD(v75) = v70 - 8 * v78;
          uint64_t v79 = &v73[v78];
          uint64_t v80 = (unsigned __int8 *)(v66 + 16 * v69);
          uint64_t v81 = v78;
          do
          {
            uint64_t v82 = *(v80 - 1);
            int v83 = *v80;
            v80 += 2;
            v74 += byte_20EBFB6[v82];
            v76 += byte_20EBFB6[v83];
            v81 -= 2;
          }
          while (v81);
          v74 += v76;
          if (v77 != v78) {
            goto LABEL_63;
          }
LABEL_64:
          v73 += ((unsigned __int16)(v70 - 9) >> 3) + 1;
LABEL_65:
          __int16 v85 = (_DWORD *)(v72
                         + 12
                         * (unsigned __int16)(v74 + byte_20EBFB6[~(-1 << v75) & (unint64_t)*v73]));
          if (*(_DWORD *)(v16 + 36) == v85[1] && *(_DWORD *)(v16 + 32) == *v85)
          {
            if (v67 == -1) {
              uint64_t v67 = v19 & v64;
            }
LABEL_52:
            unint64_t v19 = ++v63 + v68;
            continue;
          }
          break;
        }
        uint64_t v87 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
        if ((unsigned __int16)((v19 & v64) % 0x30) < 9u)
        {
          __int16 v88 = 0;
          int v98 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
          LOBYTE(v89) = (v19 & v64) % 0x30;
          goto LABEL_79;
        }
        __int16 v88 = 0;
        uint64_t v89 = (unsigned __int16)(v68 - 48 * v69 - 9) >> 3;
        if (!((unsigned __int16)(v68 - 48 * v69 - 9) >> 3))
        {
          LODWORD(v89) = (v19 & v64) % 0x30;
          uint64_t v93 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
          do
          {
LABEL_77:
            int v99 = *v93++;
            v88 += byte_20EBFB6[v99];
            LOWORD(v89) = v89 - 8;
          }
          while ((unsigned __int16)v89 > 8u);
          goto LABEL_78;
        }
        __int16 v90 = 0;
        uint64_t v91 = v89 + 1;
        uint64_t v92 = (v89 + 1) & 0x3FFE;
        LOWORD(v89) = v70 - 8 * v92;
        uint64_t v93 = &v87[v92];
        uint64_t v94 = (unsigned __int8 *)(v66 + 16 * v69);
        uint64_t v95 = v92;
        do
        {
          uint64_t v96 = *(v94 - 1);
          int v97 = *v94;
          v94 += 2;
          v88 += byte_20EBFB6[v96];
          v90 += byte_20EBFB6[v97];
          v95 -= 2;
        }
        while (v95);
        v88 += v90;
        if (v91 != v92) {
          goto LABEL_77;
        }
LABEL_78:
        int v98 = &v87[((unsigned __int16)(v70 - 9) >> 3) + 1];
LABEL_79:
        if (v15 != *(void *)(v72
                              + 12
                              * (unsigned __int16)(v88
                                                 + byte_20EBFB6[~(-1 << v89) & (unint64_t)*v98])))
          goto LABEL_52;
        if (v68 == -1)
        {
          unint64_t v105 = -1;
LABEL_90:
          uint64_t v4 = v319;
          sub_AD3484(v16, (uint64_t *)&v346, v105, &v348);
          __int16 v106 = v350;
          goto LABEL_111;
        }
        uint64_t v4 = v319;
        if ((unsigned __int16)((v19 & v64) % 0x30) < 9u)
        {
          __int16 v102 = 0;
        }
        else
        {
          if ((((_WORD)v68 - 48 * (_WORD)v69 - 8) & 0xFFF8) != 0) {
            __int16 v100 = 8;
          }
          else {
            __int16 v100 = v68 - 48 * v69 - 8;
          }
          unsigned __int16 v101 = ~v100 + v68 - 48 * v69;
          if (v101 < 8u)
          {
            __int16 v102 = 0;
            unsigned __int16 v103 = v70;
            unint64_t v104 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
            goto LABEL_179;
          }
          __int16 v176 = 0;
          __int16 v177 = 0;
          uint64_t v178 = (v101 >> 3) + 1;
          unsigned __int16 v103 = v70 - 8 * (((v101 >> 3) + 1) & 0x3FFE);
          unint64_t v104 = &v87[v178 & 0x3FFE];
          uint64_t v179 = (unsigned __int8 *)(v65 + 16 * v69 + 11);
          uint64_t v180 = v178 & 0x3FFE;
          do
          {
            uint64_t v181 = *(v179 - 1);
            int v182 = *v179;
            v179 += 2;
            v176 += byte_20EBFB6[v181];
            v177 += byte_20EBFB6[v182];
            v180 -= 2;
          }
          while (v180);
          __int16 v102 = v177 + v176;
          if ((v178 & 0x3FFE) != v178)
          {
            do
            {
LABEL_179:
              int v183 = *v104++;
              v102 += byte_20EBFB6[v183];
              v103 -= 8;
            }
            while (v103 > 8u);
          }
          v87 += ((unsigned __int16)(v70 - 9) >> 3) + 1;
          LOBYTE(v70) = v103;
        }
        uint64_t v184 = v65 + 16 * v69;
        uint64_t v185 = *(_DWORD ***)(v16 + 56);
        unsigned __int16 v186 = v102 + byte_20EBFB6[~(-1 << v70) & (unint64_t)*v87];
        __int16 v106 = (_DWORD *)(v72 + 12 * v186);
        if (*(unsigned __int16 *)(v184 + 8) == v186)
        {
          uint64_t v187 = v184 + 16;
          if ((_DWORD **)(v184 + 16) != v185)
          {
            while (1)
            {
              int v188 = (_DWORD **)v187;
              if (*(_WORD *)(v187 + 8)) {
                break;
              }
              v187 += 16;
              if (v188 + 2 == v185)
              {
                uint64_t v184 = *(void *)(v16 + 56);
                goto LABEL_187;
              }
            }
            uint64_t v184 = v187;
LABEL_187:
            __int16 v106 = *v188;
            goto LABEL_188;
          }
        }
        else
        {
LABEL_188:
          if ((_DWORD **)v184 != v185 && v71)
          {
            do
            {
              if (*(_DWORD *)(v16 + 36) != v106[1] || *(_DWORD *)(v16 + 32) != *v106) {
                break;
              }
              v106 += 3;
              if (v106 == (_DWORD *)(*(void *)v184 + 12 * *(unsigned __int16 *)(v184 + 8)))
              {
                v184 += 16;
                if ((_DWORD **)v184 != v185)
                {
                  do
                  {
                    if (*(_WORD *)(v184 + 8))
                    {
                      __int16 v106 = *(_DWORD **)v184;
                      goto LABEL_192;
                    }
                    v184 += 16;
                  }
                  while ((_DWORD **)v184 != v185);
                  __int16 v106 = *(_DWORD **)(v184 - 16);
                }
                break;
              }
LABEL_192:
              ;
            }
            while ((_DWORD **)v184 != v185);
          }
        }
LABEL_111:
        unsigned int v120 = v106[2];
        if (v120 != -1) {
          goto LABEL_135;
        }
        int v121 = *(_DWORD *)(v16 + 112);
        *(_DWORD *)(v16 + 112) = v121 + 1;
        v106[2] = v121;
        uint64_t v123 = *(unint64_t **)(v16 + 96);
        unint64_t v122 = *(void *)(v16 + 104);
        if ((unint64_t)v123 < v122)
        {
          *uint64_t v123 = v15;
          uint64_t v124 = (uint64_t)(v123 + 1);
          goto LABEL_134;
        }
        uint64_t v125 = (unint64_t **)(v16 + 88);
        uint64_t v126 = *(char **)(v16 + 88);
        uint64_t v127 = ((char *)v123 - v126) >> 3;
        unint64_t v128 = v127 + 1;
        if ((unint64_t)(v127 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v129 = v122 - (void)v126;
        if (v129 >> 2 > v128) {
          unint64_t v128 = v129 >> 2;
        }
        if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v128 = 0x1FFFFFFFFFFFFFFFLL;
        }
        if (!v128)
        {
          unint64_t v130 = 0;
          unint64_t v131 = 0;
          uint64_t v132 = (unint64_t *)(8 * v127);
          *(void *)(8 * v127) = v15;
          uint64_t v124 = 8 * v127 + 8;
          if (v123 != (unint64_t *)v126) {
            goto LABEL_122;
          }
LABEL_125:
          *(void *)(v16 + 88) = v132;
          *(void *)(v16 + 96) = v124;
          *(void *)(v16 + 104) = &v131[8 * v130];
          uint64_t v4 = v319;
          if (v123) {
            goto LABEL_133;
          }
          goto LABEL_134;
        }
        if (v128 >> 61) {
          sub_188D718();
        }
        unint64_t v130 = v128;
        unint64_t v131 = (char *)operator new(8 * v128);
        uint64_t v125 = (unint64_t **)(v16 + 88);
        uint64_t v132 = (unint64_t *)&v131[8 * v127];
        *uint64_t v132 = v15;
        uint64_t v124 = (uint64_t)(v132 + 1);
        if (v123 == (unint64_t *)v126) {
          goto LABEL_125;
        }
LABEL_122:
        unint64_t v133 = (char *)(v123 - 1) - v126;
        if (v133 < 0x58) {
          goto LABEL_363;
        }
        if ((unint64_t)(v126 - v131) < 0x20) {
          goto LABEL_363;
        }
        uint64_t v134 = (v133 >> 3) + 1;
        uint64_t v135 = 8 * (v134 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v136 = &v123[v135 / 0xFFFFFFFFFFFFFFF8];
        uint64_t v132 = (unint64_t *)((char *)v132 - v135);
        uint64_t v137 = &v131[8 * v127 - 16];
        long long v138 = v123 - 2;
        uint64_t v139 = v134 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v140 = *(_OWORD *)v138;
          *((_OWORD *)v137 - 1) = *((_OWORD *)v138 - 1);
          *(_OWORD *)uint64_t v137 = v140;
          v137 -= 32;
          v138 -= 4;
          v139 -= 4;
        }
        while (v139);
        uint64_t v123 = v136;
        if (v134 != (v134 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_363:
          do
          {
            unint64_t v141 = *--v123;
            *--uint64_t v132 = v141;
          }
          while (v123 != (unint64_t *)v126);
        }
        uint64_t v123 = *v125;
        *(void *)(v16 + 88) = v132;
        *(void *)(v16 + 96) = v124;
        *(void *)(v16 + 104) = &v131[8 * v130];
        uint64_t v4 = v319;
        if (v123) {
LABEL_133:
        }
          operator delete(v123);
LABEL_134:
        *(void *)(v16 + 96) = v124;
        unsigned int v120 = v106[2];
LABEL_135:
        LODWORD(v346) = v120;
        unint64_t result = sub_BD5C18(v318, v120, v15);
        if ((result & 1) == 0)
        {
          if (!*(unsigned char *)(v4 + 21))
          {
            LODWORD(v348) = 0;
            uint64_t v155 = *(void *)(v4 + 192);
            uint64_t v156 = (char *)(v155
                          + ((unint64_t)*(unsigned int *)(sub_AE36B4((uint64_t)v317, (unsigned int *)&v348) + 4) << 6));
            LODWORD(v348) = 0;
            uint64_t v157 = *(void *)(v4 + 192);
            uint64_t v158 = sub_AE36B4((uint64_t)v317, (unsigned int *)&v348);
            unint64_t result = (unint64_t)sub_AE32F0((uint64_t)v317, 0, v156, (unsigned char *)(v157 + ((unint64_t)*(unsigned int *)(v158 + 8) << 6)));
          }
          goto LABEL_257;
        }
        LODWORD(v348) = 0;
        if (*(void *)(v4 + 184) == *(void *)(v4 + 144)) {
          goto LABEL_222;
        }
        unint64_t result = sub_AE3914((uint64_t)v317, (unsigned int *)&v348);
        if (result == -1) {
          goto LABEL_222;
        }
        uint64_t v142 = *(void *)(v4 + 152);
        uint64_t v143 = v142 + 16 * (result / 0x30);
        unint64_t v144 = (unsigned __int8 *)(v143 + 10);
        int v145 = result % 0x30;
        if ((unsigned __int16)(result % 0x30) < 9u)
        {
          __int16 v146 = 0;
          goto LABEL_152;
        }
        __int16 v146 = 0;
        uint64_t v147 = (unsigned __int16)(result % 0x30 - 9) >> 3;
        if (!((unsigned __int16)(result % 0x30 - 9) >> 3))
        {
          LODWORD(v147) = result % 0x30;
          __int16 v151 = (unsigned __int8 *)(v143 + 10);
          do
          {
LABEL_150:
            int v159 = *v151++;
            v146 += byte_20EBEB6[v159];
            LOWORD(v147) = v147 - 8;
          }
          while ((unsigned __int16)v147 > 8u);
          goto LABEL_151;
        }
        __int16 v148 = 0;
        uint64_t v149 = v147 + 1;
        uint64_t v150 = (v147 + 1) & 0x3FFE;
        LOWORD(v147) = v145 - 8 * v150;
        __int16 v151 = &v144[v150];
        unint64_t result = v142 + 16 * (result / 0x30) + 11;
        uint64_t v152 = v150;
        do
        {
          uint64_t v153 = *(unsigned __int8 *)(result - 1);
          int v154 = *(unsigned __int8 *)result;
          result += 2;
          v146 += byte_20EBEB6[v153];
          v148 += byte_20EBEB6[v154];
          v152 -= 2;
        }
        while (v152);
        v146 += v148;
        if (v149 != v150) {
          goto LABEL_150;
        }
LABEL_151:
        v144 += ((unsigned __int16)(v145 - 9) >> 3) + 1;
        LOBYTE(v145) = v147;
LABEL_152:
        uint64_t v160 = *(void *)(v4 + 160);
        unsigned __int16 v161 = v146 + byte_20EBEB6[~(-1 << v145) & (unint64_t)*v144];
        if (*(unsigned __int16 *)(v143 + 8) == v161)
        {
          v143 += 16;
          if (v143 != v160)
          {
            while (1)
            {
              uint64_t v162 = v143;
              if (*(_WORD *)(v143 + 8)) {
                break;
              }
              v143 += 16;
              if (v162 + 16 == v160) {
                goto LABEL_222;
              }
            }
            unsigned __int16 v163 = *(_DWORD **)v143;
            if (v143 != v160)
            {
LABEL_160:
              if (*(void *)(v4 + 144))
              {
                while (*(_DWORD *)(v4 + 136) == *v163)
                {
                  v163 += 3;
                  if (v163 == (_DWORD *)(*(void *)v143 + 12 * *(unsigned __int16 *)(v143 + 8)))
                  {
                    while (1)
                    {
                      v143 += 16;
                      if (v143 == v160) {
                        goto LABEL_222;
                      }
                      if (*(_WORD *)(v143 + 8))
                      {
                        unsigned __int16 v163 = *(_DWORD **)v143;
                        break;
                      }
                    }
                  }
                  if (v143 == v160) {
                    break;
                  }
                }
              }
              if (v143 != v160 && v163[2] != v163[1])
              {
                LODWORD(v348) = 0;
                uint64_t v164 = *(void *)(v4 + 192);
                uint64_t v165 = (_DWORD *)(v164
                                + ((unint64_t)*(unsigned int *)(sub_AE36B4((uint64_t)v317, (unsigned int *)&v348)
                                                                     + 4) << 6));
                LODWORD(v348) = 0;
                uint64_t v166 = *(void *)(v4 + 192);
                unint64_t v167 = (_DWORD *)(v166
                                + ((unint64_t)*(unsigned int *)(sub_AE36B4((uint64_t)v317, (unsigned int *)&v348)
                                                                     + 8) << 6));
                if (v165 != v167)
                {
                  int v168 = v340;
                  uint64_t v169 = v338;
                  uint64_t v170 = v335;
                  unint64_t v171 = v333;
                  unint64_t v172 = ((unint64_t)v335 - v334) >> 4;
                  do
                  {
                    unsigned int v175 = v165[13];
                    if (v168)
                    {
                      unsigned int v341 = v165[14];
                      int v173 = v165[15];
                      int v342 = v173;
                    }
                    else
                    {
                      int v173 = *(_DWORD *)(v169 + 12 * v175);
                    }
                    unint64_t v174 = (unsigned int *)((char *)v171 + *(unsigned __int16 *)((char *)v171 - *v171 + 6));
                    v165[7] = *(unsigned int *)((char *)&v174[2
                                                            * (*(_DWORD *)(v169 + 12 * v175 + 4) + v172)
                                                            + 2]
                                              + *v174)
                            + v173
                            - *((_DWORD *)v170 + 2);
                    v165 += 16;
                  }
                  while (v165 != v167);
                  long long v339 = (int *)(v169 + 12 * v175);
                }
                sub_AF17B4(v317, 0);
                if ((*((unsigned char *)v335 + 15) & 2) != 0
                  && (!v337
                   || (*(_DWORD *)(v337 + 4 * (((unint64_t)v335 - v334) >> 4)) & v316) == 0))
                {
                  int v190 = *(_DWORD *)(v4 + 96);
                  if (*(unsigned char *)(v4 + 20))
                  {
                    unsigned int v191 = v190 + v190 * *(_DWORD *)(v4 + 416);
                    int v192 = v346;
                    uint64_t v193 = *(void *)(v4 + 48);
                    if (v193) {
                      goto LABEL_209;
                    }
LABEL_211:
                    int v194 = 0x80000000;
                  }
                  else
                  {
                    unsigned int v191 = -1;
                    int v192 = v346;
                    uint64_t v193 = *(void *)(v4 + 48);
                    if (!v193) {
                      goto LABEL_211;
                    }
LABEL_209:
                    int v194 = sub_AD7004(v193, v192, *(_DWORD *)(v4 + 100) + v304);
                  }
                  if (sub_AF19F4(v317, 0, v305 + v190 + v190 * v192, v190 + v190 * v192, v191, v194)) {
                    sub_A3EF14(v303, &v346);
                  }
                }
                LODWORD(v348) = 0;
                uint64_t v195 = *(void *)(v4 + 192);
                unint64_t v196 = (_DWORD *)(v195
                                + ((unint64_t)*(unsigned int *)(sub_AE36B4((uint64_t)v317, (unsigned int *)&v348)
                                                                     + 4) << 6));
                LODWORD(v348) = 0;
                uint64_t v197 = *(void *)(v4 + 192);
                unint64_t v198 = (_DWORD *)(v197
                                + ((unint64_t)*(unsigned int *)(sub_AE36B4((uint64_t)v317, (unsigned int *)&v348)
                                                                     + 8) << 6));
                if (v196 != v198)
                {
                  int v199 = v340;
                  uint64_t v200 = v338;
                  uint64_t v201 = v333;
                  unint64_t v202 = ((unint64_t)v335 - v334) >> 4;
                  do
                  {
                    unsigned int v205 = v196[13];
                    if (v199)
                    {
                      unsigned int v341 = v196[14];
                      int v203 = v196[15];
                      int v342 = v203;
                    }
                    else
                    {
                      int v203 = *(_DWORD *)(v200 + 12 * v205);
                    }
                    uint64_t v204 = (unsigned int *)((char *)v201 + *(unsigned __int16 *)((char *)v201 - *v201 + 6));
                    v196[7] = *(unsigned int *)((char *)&v204[2
                                                            * (*(_DWORD *)(v200 + 12 * v205 + 4) + v202)
                                                            + 1]
                                              + *v204)
                            + v203;
                    v196 += 16;
                  }
                  while (v196 != v198);
                  long long v339 = (int *)(v200 + 12 * v205);
                }
                unint64_t result = (unint64_t)sub_AF17B4(v317, 0);
              }
            }
          }
        }
        else
        {
          unsigned __int16 v163 = (_DWORD *)(*(void *)v143 + 12 * v161);
          if (v143 != v160) {
            goto LABEL_160;
          }
        }
LABEL_222:
        if ((*((unsigned char *)v335 + 15) & 1) == 0) {
          goto LABEL_257;
        }
        if (!v337)
        {
          if (!v316) {
            goto LABEL_227;
          }
          goto LABEL_257;
        }
        if (*(_DWORD *)(v337 + 4 * (((unint64_t)v335 - v334) >> 4)) != v316) {
          goto LABEL_257;
        }
LABEL_227:
        unsigned int v206 = v315 + *(_DWORD *)(v4 + 96) + *(_DWORD *)(v4 + 96) * v346;
        LODWORD(v348) = v206;
        if (*(void *)(v4 + 184) == *(void *)(v4 + 144)) {
          goto LABEL_257;
        }
        unint64_t result = sub_AE3914((uint64_t)v317, (unsigned int *)&v348);
        if (result == -1) {
          goto LABEL_257;
        }
        uint64_t v207 = *(void *)(v4 + 152);
        uint64_t v208 = v207 + 16 * (result / 0x30);
        long long v209 = (unsigned __int8 *)(v208 + 10);
        int v210 = result % 0x30;
        if ((unsigned __int16)(result % 0x30) < 9u)
        {
          __int16 v211 = 0;
          goto LABEL_239;
        }
        __int16 v211 = 0;
        uint64_t v212 = (unsigned __int16)(result % 0x30 - 9) >> 3;
        if (!((unsigned __int16)(result % 0x30 - 9) >> 3))
        {
          LODWORD(v212) = result % 0x30;
          uint64_t v216 = (unsigned __int8 *)(v208 + 10);
          do
          {
LABEL_237:
            int v220 = *v216++;
            v211 += byte_20EBEB6[v220];
            LOWORD(v212) = v212 - 8;
          }
          while ((unsigned __int16)v212 > 8u);
          goto LABEL_238;
        }
        __int16 v213 = 0;
        uint64_t v214 = v212 + 1;
        uint64_t v215 = (v212 + 1) & 0x3FFE;
        LOWORD(v212) = v210 - 8 * v215;
        uint64_t v216 = &v209[v215];
        unint64_t result = v207 + 16 * (result / 0x30) + 11;
        uint64_t v217 = v215;
        do
        {
          uint64_t v218 = *(unsigned __int8 *)(result - 1);
          int v219 = *(unsigned __int8 *)result;
          result += 2;
          v211 += byte_20EBEB6[v218];
          v213 += byte_20EBEB6[v219];
          v217 -= 2;
        }
        while (v217);
        v211 += v213;
        if (v214 != v215) {
          goto LABEL_237;
        }
LABEL_238:
        v209 += ((unsigned __int16)(v210 - 9) >> 3) + 1;
        LOBYTE(v210) = v212;
LABEL_239:
        uint64_t v221 = *(void *)(v4 + 160);
        unsigned __int16 v222 = v211 + byte_20EBEB6[~(-1 << v210) & (unint64_t)*v209];
        if (*(unsigned __int16 *)(v208 + 8) == v222)
        {
          v208 += 16;
          if (v208 != v221)
          {
            while (1)
            {
              uint64_t v223 = v208;
              if (*(_WORD *)(v208 + 8)) {
                break;
              }
              v208 += 16;
              if (v223 + 16 == v221) {
                goto LABEL_257;
              }
            }
            __int16 v224 = *(_DWORD **)v208;
            if (v208 != v221) {
              goto LABEL_247;
            }
          }
          goto LABEL_257;
        }
        __int16 v224 = (_DWORD *)(*(void *)v208 + 12 * v222);
        if (v208 == v221) {
          goto LABEL_257;
        }
LABEL_247:
        if (*(void *)(v4 + 144))
        {
          do
          {
            if (*(_DWORD *)(v4 + 136) != *v224) {
              break;
            }
            v224 += 3;
            if (v224 == (_DWORD *)(*(void *)v208 + 12 * *(unsigned __int16 *)(v208 + 8)))
            {
              do
              {
                v208 += 16;
                if (v208 == v221) {
                  goto LABEL_257;
                }
              }
              while (!*(_WORD *)(v208 + 8));
              __int16 v224 = *(_DWORD **)v208;
            }
          }
          while (v208 != v221);
        }
        if (v208 != v221)
        {
          uint64_t v227 = v224 + 1;
          int v226 = v224[1];
          int v225 = v227[1];
          uint64_t v228 = (v225 - v226);
          if (v225 != v226)
          {
            unsigned int v235 = 0;
            unsigned int v306 = v206;
            do
            {
              uint64_t v236 = sub_AE5380(v317, v206, v235);
              int v237 = *(_DWORD *)(v236 + 28);
              if (v340)
              {
                unint64_t result = sub_A2B620(*(void *)(v4 + 24), (uint64_t)&v331, v237, 1);
                if ((result & 1) == 0) {
                  goto LABEL_281;
                }
              }
              else
              {
                unint64_t result = sub_A2BC00((uint64_t)&v331, v237, 1);
                if (!result) {
                  goto LABEL_281;
                }
              }
              uint64_t v238 = v228;
              uint64_t v310 = *(void *)(v236 + 20);
              int v239 = *(_DWORD *)(v236 + 36);
              int v312 = *(_DWORD *)(v236 + 40);
              int v313 = *(_DWORD *)(v236 + 32);
              int v309 = *(_DWORD *)(v236 + 44);
              int v311 = *(_DWORD *)(v236 + 48);
              unint64_t v240 = (void *)(*(void *)(v4 + 24) + 4136);
              if (sub_A10E20(v240, v308))
              {
                uint64_t v241 = (int *)sub_A1120C(*(void *)(*v240 + 3944), v314);
              }
              else
              {
                if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                  && __cxa_guard_acquire(&qword_24F7308))
                {
                  sub_518C8(0x3B60u, 0x7FCAu);
                  dword_24F7300 = v300 | 0x40000000;
                  __cxa_guard_release(&qword_24F7308);
                  uint64_t v4 = v319;
                }
                uint64_t v242 = *v240;
                if (dword_24F7300 == v308)
                {
                  unsigned int v243 = *(unsigned int **)(*(void *)(v242 + 3976) + 72);
                  if (!v243)
                  {
                    exception = __cxa_allocate_exception(0x40uLL);
                    int v348 = (char *)operator new(0x40uLL);
                    long long v349 = xmmword_20B9A90;
                    strcpy(v348, "Realtime stop pattern quad data requested on nullptr buffer");
                    int v302 = (void *)sub_2F404((uint64_t)exception, (long long *)&v348);
                  }
                  unsigned __int16 v244 = (int *)((char *)v243 + *v243);
                  uint64_t v245 = (unsigned __int16 *)((char *)v244 - *v244);
                  if (*v245 >= 5u && (uint64_t v246 = v245[2]) != 0) {
                    uint64_t v247 = (unsigned int *)((char *)v244 + v246 + *(unsigned int *)((char *)v244 + v246));
                  }
                  else {
                    uint64_t v247 = 0;
                  }
                  uint64_t v241 = (int *)sub_A1139C(v247, v314);
                }
                else
                {
                  uint64_t v241 = (int *)sub_A11500(v242 + 24, v314, 0, "stop pattern");
                }
              }
              uint64_t v248 = v241;
              uint64_t v249 = *v240;
              uint64_t v250 = (unsigned __int16 *)((char *)v241 - *v241);
              if (*v250 >= 0xFu && (uint64_t v251 = v250[7]) != 0)
              {
                uint64_t v252 = v249 + 3896;
                char v253 = sub_49442C(*(unsigned __int16 *)((char *)v241 + v251));
                if (sub_C25A10(v252, v253)) {
                  goto LABEL_304;
                }
              }
              else
              {
                uint64_t v257 = v249 + 3896;
                char v258 = sub_49442C(0x7FFFu);
                if (sub_C25A10(v257, v258))
                {
LABEL_304:
                  int v259 = 128;
                  goto LABEL_307;
                }
              }
              unsigned int v254 = (unsigned __int16 *)((char *)v248 - *v248);
              if (*v254 >= 0xBu && (uint64_t v255 = v254[5]) != 0) {
                char v256 = *((unsigned char *)v248 + v255);
              }
              else {
                char v256 = 0;
              }
              int v259 = sub_A2BF48(v256);
LABEL_307:
              int v260 = v342;
              unint64_t v261 = 0xFFFFFFFF00000000;
              if (v340) {
                unint64_t v261 = (unint64_t)v341 << 32;
              }
              unint64_t v262 = (-1431655765 * (((unint64_t)v339 - v338) >> 2)) | v261;
              if (!v340) {
                int v260 = 0x7FFFFFFF;
              }
              unint64_t v263 = (unsigned int *)((char *)v333 + *(unsigned __int16 *)((char *)v333 - *v333 + 6));
              uint8x8_t v264 = (char *)v263 + *v263;
              unint64_t v265 = &v342;
              if (!v340) {
                unint64_t v265 = v339;
              }
              int v266 = *v265;
              unint64_t v267 = &v264[8 * v339[1] + 8 * (((unint64_t)v335 - v334) >> 4)];
              int v268 = *((_DWORD *)v267 + 1);
              LODWORD(v267) = 10 * (*(_DWORD *)(v236 + 28) - v266 - *((_DWORD *)v267 + 2));
              LODWORD(v320) = ((unint64_t)v335 - v334) >> 4;
              *(void *)((char *)&v320 + 4) = v262;
              HIDWORD(v320) = v260;
              unsigned int v321 = v345;
              uint64_t v322 = v310;
              int v323 = v268 + v266;
              int v324 = v313;
              int v325 = v259 + v239;
              int v326 = v312;
              int v327 = v309 - (v267 & ~((int)v267 >> 31));
              int v328 = v311;
              unint64_t v329 = v262;
              int v330 = v260;
              LODWORD(v348) = 0;
              uint64_t v228 = v238;
              unsigned int v206 = v306;
              if (*(void *)(v4 + 184) == *(void *)(v4 + 144)) {
                goto LABEL_280;
              }
              unint64_t v269 = sub_AE3914((uint64_t)v317, (unsigned int *)&v348);
              if (v269 == -1) {
                goto LABEL_280;
              }
              uint64_t v270 = *(void *)(v4 + 152);
              uint64_t v271 = v270 + 16 * (v269 / 0x30);
              unint64_t v272 = (unsigned __int8 *)(v271 + 10);
              int v273 = v269 % 0x30;
              if ((unsigned __int16)(v269 % 0x30) < 9u)
              {
                __int16 v274 = 0;
                goto LABEL_325;
              }
              __int16 v274 = 0;
              uint64_t v275 = (unsigned __int16)(v269 % 0x30 - 9) >> 3;
              if ((unsigned __int16)(v269 % 0x30 - 9) >> 3)
              {
                __int16 v276 = 0;
                uint64_t v277 = v275 + 1;
                uint64_t v278 = (v275 + 1) & 0x3FFE;
                LOWORD(v275) = v273 - 8 * v278;
                unint64_t v279 = &v272[v278];
                uint64_t v280 = (unsigned __int8 *)(v270 + 16 * (v269 / 0x30) + 11);
                uint64_t v281 = v278;
                do
                {
                  uint64_t v282 = *(v280 - 1);
                  int v283 = *v280;
                  v280 += 2;
                  v274 += byte_20EBEB6[v282];
                  v276 += byte_20EBEB6[v283];
                  v281 -= 2;
                }
                while (v281);
                v274 += v276;
                if (v277 == v278) {
                  goto LABEL_324;
                }
              }
              else
              {
                LODWORD(v275) = v269 % 0x30;
                unint64_t v279 = (unsigned __int8 *)(v271 + 10);
              }
              do
              {
                int v284 = *v279++;
                v274 += byte_20EBEB6[v284];
                LOWORD(v275) = v275 - 8;
              }
              while ((unsigned __int16)v275 > 8u);
LABEL_324:
              v272 += ((unsigned __int16)(v273 - 9) >> 3) + 1;
              LOBYTE(v273) = v275;
LABEL_325:
              uint64_t v285 = *(void *)(v4 + 160);
              unsigned __int16 v286 = v274 + byte_20EBEB6[~(-1 << v273) & (unint64_t)*v272];
              if (*(unsigned __int16 *)(v271 + 8) == v286)
              {
                v271 += 16;
                if (v271 != v285)
                {
                  while (1)
                  {
                    uint64_t v287 = v271;
                    if (*(_WORD *)(v271 + 8)) {
                      break;
                    }
                    v271 += 16;
                    if (v287 + 16 == v285) {
                      goto LABEL_280;
                    }
                  }
                  unint64_t v288 = *(_DWORD **)v271;
                  if (v271 != v285)
                  {
LABEL_333:
                    if (*(void *)(v4 + 144))
                    {
                      while (*(_DWORD *)(v4 + 136) == *v288)
                      {
                        v288 += 3;
                        if (v288 == (_DWORD *)(*(void *)v271 + 12 * *(unsigned __int16 *)(v271 + 8)))
                        {
                          while (1)
                          {
                            v271 += 16;
                            if (v271 == v285) {
                              goto LABEL_280;
                            }
                            if (*(_WORD *)(v271 + 8))
                            {
                              unint64_t v288 = *(_DWORD **)v271;
                              break;
                            }
                          }
                        }
                        if (v271 == v285) {
                          break;
                        }
                      }
                    }
                    if (v271 != v285 && v288[2] != v288[1])
                    {
                      unint64_t result = sub_AEF7D8((uint64_t)v317, (uint64_t)&v320, 0, 0, 0);
                      if ((result & 0x100) != 0)
                      {
                        LODWORD(v348) = 0;
                        uint64_t v289 = *(void *)(v4 + 192);
                        uint64_t v290 = v289
                             + ((unint64_t)*(unsigned int *)(sub_AE36B4((uint64_t)v317, (unsigned int *)&v348) + 4) << 6);
                        LODWORD(v348) = 0;
                        uint64_t v291 = *(void *)(v4 + 192);
                        uint64_t v292 = sub_AE36B4((uint64_t)v317, (unsigned int *)&v348);
                        uint64_t v293 = (long long *)(v291 + ((unint64_t)*(unsigned int *)(v292 + 8) << 6));
                        if ((long long *)v290 != v293)
                        {
                          while (*(_DWORD *)(v290 + 28) != 0x7FFFFFFF)
                          {
                            v290 += 64;
                            if ((long long *)v290 == v293)
                            {
                              uint64_t v290 = v291 + ((unint64_t)*(unsigned int *)(v292 + 8) << 6);
                              goto LABEL_354;
                            }
                          }
                          if ((long long *)v290 != v293)
                          {
                            for (uint64_t j = (long long *)(v290 + 64); j != v293; j += 4)
                            {
                              if (*((_DWORD *)j + 7) != 0x7FFFFFFF)
                              {
                                long long v295 = *j;
                                long long v296 = j[1];
                                long long v297 = j[3];
                                *(_OWORD *)(v290 + 32) = j[2];
                                *(_OWORD *)(v290 + 48) = v297;
                                *(_OWORD *)uint64_t v290 = v295;
                                *(_OWORD *)(v290 + 16) = v296;
                                v290 += 64;
                              }
                            }
                          }
                        }
LABEL_354:
                        LODWORD(v348) = 0;
                        uint64_t v298 = *(void *)(v4 + 192);
                        uint64_t v299 = sub_AE36B4((uint64_t)v317, (unsigned int *)&v348);
                        unint64_t result = (unint64_t)sub_AE32F0((uint64_t)v317, 0, (char *)v290, (unsigned char *)(v298+ ((unint64_t)*(unsigned int *)(v299 + 8) << 6)));
                      }
                      goto LABEL_281;
                    }
                  }
                }
              }
              else
              {
                unint64_t v288 = (_DWORD *)(*(void *)v271 + 12 * v286);
                if (v271 != v285) {
                  goto LABEL_333;
                }
              }
LABEL_280:
              unint64_t result = sub_AE4980((uint64_t)v317, 0, &v320);
LABEL_281:
              ++v235;
            }
            while (v235 != v228);
          }
        }
LABEL_257:
        unint64_t v13 = v334;
        unsigned int v12 = v335 - 2;
        v335 -= 2;
        if (*(unsigned char *)(v331 + 16)) {
          BOOL v229 = v332 == 0;
        }
        else {
          BOOL v229 = 0;
        }
        if (v229 && (unint64_t)v12 >= v334 && (unint64_t)v12 < v336)
        {
          do
          {
            unint64_t v232 = __ROR8__(*v12, 32);
            if (HIDWORD(v232) == 1 && (v232 + 3) < 2) {
              break;
            }
            unint64_t result = sub_2AB7E4(**(void **)(v331 + 4120));
            unint64_t v13 = v334;
            unsigned int v12 = v335;
            if (result) {
              break;
            }
            unsigned int v12 = v335 - 2;
            unint64_t v335 = v12;
          }
          while ((unint64_t)v12 >= v334 && (unint64_t)v12 < v336);
        }
      }
      uint64_t v7 = v343 + 4;
      int v343 = v7;
    }
    while ((unint64_t)v7 < v344);
  }
  return result;
}

void sub_AF176C(_Unwind_Exception *a1)
{
}

void sub_AF1784(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 153) < 0) {
    operator delete(*(void **)(v1 - 176));
  }
  _Unwind_Resume(exception_object);
}

void sub_AF17A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_AF17B4(void *a1, unsigned int a2)
{
  v36[0] = a2;
  sub_AE51B4(a1, v36, v32);
  uint64_t v4 = a1[6];
  uint64_t v5 = a1[7];
  uint64_t v23 = a1;
  uint64_t v24 = v4;
  uint64_t v25 = v5;
  uint64_t v26 = v5;
  uint64_t v27 = 0;
  uint64_t v28 = v4;
  uint64_t v29 = v5;
  uint64_t v30 = v5;
  uint64_t v31 = 0;
  unint64_t result = (char *)sub_AE47A0(&v23);
  if (v32[1] == v24 && v33 == v25 && v34 == v26 && (v34 == v33 || v35 == v27)) {
    return result;
  }
  int v7 = *(_DWORD *)(v35 + 4);
  int v8 = *(_DWORD *)(v35 + 8);
  unsigned int v9 = v8 - v7;
  if (v8 == v7) {
    return result;
  }
  char v22 = 0;
  unsigned int v10 = 0;
  unsigned int v11 = 1;
LABEL_6:
  while (2)
  {
    if (v11 <= v9) {
      unsigned int v12 = v9;
    }
    else {
      unsigned int v12 = v11;
    }
    unint64_t result = (char *)sub_AE5380(a1, a2, v10++);
    if (*((_DWORD *)result + 7) != 0x7FFFFFFF && v10 < v9)
    {
      uint64_t v14 = result;
      for (unsigned int i = v10; v12 != i; ++i)
      {
        unint64_t result = (char *)sub_AE5380(a1, a2, i);
        int v16 = *((_DWORD *)result + 7);
        if (v16 != 0x7FFFFFFF)
        {
          int v17 = *((_DWORD *)v14 + 7);
          if (v17 < v16
            || *((_DWORD *)v14 + 8) > *((_DWORD *)result + 8)
            || (unsigned int v18 = *((_DWORD *)result + 9), v19 = *((_DWORD *)v14 + 9), v19 > v18)
            || v19 == v18 && v17 == v16 && *((_DWORD *)v14 + 11) - 10 * v17 > *((_DWORD *)result + 11) - 10 * v16)
          {
            if (v16 >= v17 && *((_DWORD *)result + 8) <= *((_DWORD *)v14 + 8))
            {
              unsigned int v20 = *((_DWORD *)v14 + 9);
              unsigned int v21 = *((_DWORD *)result + 9);
              if (v21 <= v20
                && (v21 != v20 || v16 != v17 || *((_DWORD *)result + 11) - 10 * v16 <= *((_DWORD *)v14 + 11) - 10 * v17))
              {
                *((_DWORD *)v14 + 7) = 0x7FFFFFFF;
                if (v10 == v9) {
                  return sub_AE50A8((uint64_t)a1, a2);
                }
                char v22 = 1;
                ++v11;
                goto LABEL_6;
              }
            }
          }
          else
          {
            *((_DWORD *)result + 7) = 0x7FFFFFFF;
            char v22 = 1;
          }
        }
      }
    }
    if (v10 != v9)
    {
      ++v11;
      continue;
    }
    break;
  }
  if ((v22 & 1) == 0) {
    return result;
  }
  return sub_AE50A8((uint64_t)a1, a2);
}

BOOL sub_AF19F4(void *a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  unsigned int v37 = a2;
  sub_AE51B4(a1, &v37, v34);
  uint64_t v12 = a1[6];
  uint64_t v13 = a1[7];
  uint64_t v26 = a1;
  *(void *)&long long v27 = v12;
  *((void *)&v27 + 1) = v13;
  uint64_t v28 = v13;
  uint64_t v29 = 0;
  uint64_t v30 = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v13;
  uint64_t v33 = 0;
  sub_AE47A0(&v26);
  if (*(_OWORD *)&v34[8] == v27
    && *(void *)&v34[24] == v28
    && (*(void *)&v34[24] == *(void *)&v34[16] || (void)v35 == v29))
  {
    goto LABEL_7;
  }
  int v14 = *(_DWORD *)(v35 + 4);
  int v15 = *(_DWORD *)(v35 + 8);
  int v16 = v15 - v14;
  if (v15 == v14) {
    goto LABEL_7;
  }
  if (a6 == 0x7FFFFFFF)
  {
    unsigned int v17 = 0;
    do
      sub_AE5380(a1, a2, v17++);
    while (v16 != v17);
LABEL_7:
    LOBYTE(v18) = 0;
    return v18 != 0;
  }
  __int16 v18 = 0;
  unsigned int v20 = 0;
  do
  {
    unsigned int v21 = (_OWORD *)sub_AE5380(a1, a2, v20);
    long long v22 = v21[2];
    long long v23 = v21[3];
    long long v24 = v21[1];
    *(_OWORD *)uint64_t v34 = *v21;
    *(_OWORD *)&v34[16] = v24;
    long long v35 = v22;
    long long v36 = v23;
    if (SHIDWORD(v24) >= a6)
    {
      __int16 v25 = sub_AF1BB4((uint64_t)a1, v34, a3, a4, a5);
      __int16 v18 = v25 | v18 | (v25 | v18) & 0xFF00;
    }
    ++v20;
  }
  while (v16 != v20);
  if ((v18 & 0xFF00) != 0) {
    sub_AE50A8((uint64_t)a1, a3);
  }
  return v18 != 0;
}

unint64_t sub_AF1BB4(uint64_t a1, _DWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  if (a5 != -1)
  {
    unsigned int v38 = a5;
    uint64_t v10 = *(void *)(a1 + 88);
    unsigned int v11 = (_DWORD *)(v10 + ((unint64_t)*(unsigned int *)(sub_AE36B4(a1, &v38) + 4) << 6));
    unsigned int v38 = a5;
    uint64_t v12 = *(void *)(a1 + 88);
    uint64_t v13 = (_DWORD *)(v12 + ((unint64_t)*(unsigned int *)(sub_AE36B4(a1, &v38) + 8) << 6));
    if (v11 != v13)
    {
      int v14 = a2[7];
      unsigned int v15 = a2[9];
      do
      {
        int v16 = v11[7];
        if (v16 != 0x7FFFFFFF && v16 >= v14 && v11[8] <= a2[8])
        {
          unsigned int v18 = v11[9];
          if (v18 <= v15)
          {
            BOOL v19 = v11[11] - 10 * v16 > a2[11] - 10 * v14 && v16 == v14;
            if (!v19 || v18 != v15) {
              goto LABEL_35;
            }
          }
        }
        v11 += 16;
      }
      while (v11 != v13);
    }
  }
  unsigned int v38 = a4;
  uint64_t v21 = *(void *)(a1 + 88);
  long long v22 = (_DWORD *)(v21 + ((unint64_t)*(unsigned int *)(sub_AE36B4(a1, &v38) + 4) << 6));
  unsigned int v38 = a4;
  uint64_t v23 = *(void *)(a1 + 88);
  long long v24 = (_DWORD *)(v23 + ((unint64_t)*(unsigned int *)(sub_AE36B4(a1, &v38) + 8) << 6));
  if (v22 != v24)
  {
    int v25 = a2[7];
    unsigned int v26 = a2[9];
    while (1)
    {
      int v27 = v22[7];
      if (v27 != 0x7FFFFFFF && v27 >= v25 && v22[8] <= a2[8])
      {
        unsigned int v29 = v22[9];
        if (v29 <= v26)
        {
          BOOL v30 = v22[11] - 10 * v27 > a2[11] - 10 * v25 && v27 == v25;
          if (!v30 || v29 != v26) {
            break;
          }
        }
      }
      v22 += 16;
      if (v22 == v24) {
        goto LABEL_36;
      }
    }
LABEL_35:
    LOBYTE(v32) = 0;
    uint64_t v33 = 0;
    unint64_t v34 = 0;
    return ((unint64_t)v32 << 8) | (v34 << 16) | v33;
  }
LABEL_36:
  unint64_t v35 = sub_AEF7D8(a1, (uint64_t)a2, a3, 1, 1);
  unint64_t v32 = v35 >> 8;
  unint64_t v34 = v35 >> 16;
  uint64_t v33 = v35;
  if ((_BYTE)v35)
  {
    *(void *)(v36 + 52) = -1;
    *(_DWORD *)(v36 + 60) = 0x7FFFFFFF;
  }
  return ((unint64_t)v32 << 8) | (v34 << 16) | v33;
}

uint64_t sub_AF1DB0(uint64_t a1, unsigned int *a2)
{
  unint64_t v4 = sub_AD72DC(a1, a2);
  if (v4 == -1)
  {
    unint64_t v25 = v5;
    if (sub_AF1FB8(a1, 1))
    {
      uint64_t v34 = *a2 | 0x7FFFFFFF00000000;
      sub_AF22EC(a1, (unsigned int *)&v34, (uint64_t)v35);
    }
    else
    {
      uint64_t v34 = *a2 | 0x7FFFFFFF00000000;
      sub_AF2504(a1, &v34, v25, v35);
    }
    return v35[4];
  }
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v6 = *(uint64_t **)(a1 + 56);
  unint64_t v8 = v4 / 0x30;
  unsigned int v9 = (uint64_t *)(v7 + 16 * (v4 / 0x30));
  unsigned int v11 = (unsigned __int8 *)v9 + 10;
  uint64_t v10 = *v9;
  int v12 = v4 % 0x30;
  if ((unsigned __int16)(v4 % 0x30) < 9u)
  {
    __int16 v15 = 0;
    goto LABEL_16;
  }
  unsigned __int16 v13 = v12 - 9;
  unsigned __int16 v14 = v4 % 0x30 - 9;
  __int16 v15 = 0;
  uint64_t v16 = v14 >> 3;
  if (v16)
  {
    __int16 v17 = 0;
    uint64_t v18 = v16 + 1;
    uint64_t v19 = (v16 + 1) & 0x3FFE;
    LOWORD(v12) = v12 - 8 * v19;
    unsigned int v20 = &v11[v19];
    uint64_t v21 = (unsigned __int8 *)(v7 + 16 * v8 + 11);
    uint64_t v22 = v19;
    do
    {
      uint64_t v23 = *(v21 - 1);
      int v24 = *v21;
      v21 += 2;
      v15 += byte_20EBDB6[v23];
      v17 += byte_20EBDB6[v24];
      v22 -= 2;
    }
    while (v22);
    v15 += v17;
    if (v18 == v19) {
      goto LABEL_15;
    }
  }
  else
  {
    unsigned int v20 = (unsigned __int8 *)v9 + 10;
  }
  do
  {
    int v27 = *v20++;
    v15 += byte_20EBDB6[v27];
    LOWORD(v12) = v12 - 8;
  }
  while ((unsigned __int16)v12 > 8u);
LABEL_15:
  v11 += (v13 >> 3) + 1;
LABEL_16:
  unsigned __int16 v28 = v15 + byte_20EBDB6[~(-1 << v12) & (unint64_t)*v11];
  int v29 = *((unsigned __int16 *)v9 + 4);
  BOOL v30 = v9 + 2;
  if (v29 != v28 || v30 == v6) {
    return v10 + 8 * v28;
  }
  uint64_t v32 = v7 + 16 * v8 + 32;
  do
  {
    if (*(_WORD *)(v32 - 8)) {
      BOOL v33 = 1;
    }
    else {
      BOOL v33 = v32 == (void)v6;
    }
    v32 += 16;
  }
  while (!v33);
  return *(void *)(v32 - 32);
}

uint64_t sub_AF1FB8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t result = sub_AF2868(a1);
    unint64_t v5 = *(void *)(a1 + 80);
    if (v5 >= ~a2) {
      goto LABEL_32;
    }
  }
  else
  {
    uint64_t result = 0;
    unint64_t v5 = *(void *)(a1 + 80);
    if (v5 >= ~a2) {
      goto LABEL_32;
    }
  }
  unint64_t v6 = *(void *)(a1 + 72);
  unint64_t v7 = v5 + a2;
  if (v6 < 4 || v7 > *(void *)a1)
  {
    float v8 = *(float *)(a1 + 16);
    if (v7 >= vcvts_n_u32_f32(v8, 2uLL))
    {
      unint64_t v9 = 4;
      while ((v9 & 0x8000000000000000) == 0)
      {
        v9 *= 2;
        if (v7 < (unint64_t)(float)(v8 * (float)v9)) {
          goto LABEL_12;
        }
      }
LABEL_32:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_2E18(exception, "resize overflow");
    }
    unint64_t v9 = 4;
LABEL_12:
    if (v9 > v6)
    {
      unint64_t v10 = v5 - *(void *)(a1 + 40) + a2;
      unint64_t v11 = 4;
      if (v6 > 4) {
        goto LABEL_15;
      }
LABEL_14:
      if (v10 >= (unint64_t)(float)(v8 * (float)v11))
      {
LABEL_15:
        while ((v11 & 0x8000000000000000) == 0)
        {
          v11 *= 2;
          if (v11 >= v6) {
            goto LABEL_14;
          }
        }
        goto LABEL_32;
      }
      if (v11 < v9
        && v11 <= 0x7FFFFFFFFFFFFFFELL
        && v10 >= (unint64_t)(float)(*(float *)(a1 + 20) * (float)(2 * v11)))
      {
        v11 *= 2;
      }
      long long v29 = *(_OWORD *)(a1 + 16);
      int v30 = *(_DWORD *)(a1 + 32);
      memset(v31, 0, sizeof(v31));
      long long v32 = 0u;
      uint64x2_t v28 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_f32(*(float32x2_t *)&v29, 0)));
      BYTE8(v29) = 0;
      sub_ACD1C8((uint64_t)&v28, 0, (void *)a1, v11);
      int v12 = *(_DWORD *)(a1 + 32);
      *(_DWORD *)(a1 + 32) = v30;
      int v30 = v12;
      unsigned __int16 v13 = *(void **)(a1 + 40);
      unsigned __int16 v14 = *(char **)(a1 + 48);
      *(void **)(a1 + 40) = v31[0];
      uint64x2_t v16 = *(uint64x2_t *)a1;
      long long v15 = *(_OWORD *)(a1 + 16);
      long long v17 = v29;
      *(uint64x2_t *)a1 = v28;
      *(_OWORD *)(a1 + 16) = v17;
      uint64x2_t v28 = v16;
      long long v29 = v15;
      long long v18 = *(_OWORD *)&v31[1];
      v31[0] = v13;
      v31[1] = v14;
      uint64_t v19 = v31[3];
      long long v20 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)(a1 + 48) = v18;
      *(void *)(a1 + 64) = v19;
      *(_OWORD *)&v31[2] = v20;
      *(void *)&long long v18 = v32;
      long long v21 = *(_OWORD *)(a1 + 72);
      *(_OWORD *)(a1 + 72) = v32;
      long long v32 = v21;
      *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)(unint64_t)v18)));
      *(unsigned char *)(a1 + 24) = 0;
      uint64x2_t v28 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v29, (float)(unint64_t)v21)));
      BYTE8(v29) = 0;
      if (v14)
      {
        uint64_t v22 = (char *)v20;
        uint64_t v23 = v14;
        if ((char *)v20 != v14)
        {
          int v24 = (char *)v20;
          do
          {
            unsigned int v26 = (void *)*((void *)v24 - 2);
            v24 -= 16;
            unint64_t v25 = v26;
            if (v26)
            {
              free(v25);
              *((void *)v22 - 2) = 0;
            }
            uint64_t v22 = v24;
          }
          while (v24 != v14);
          uint64_t v23 = (char *)v31[1];
        }
        v31[2] = v14;
        free(v23);
      }
      return 1;
    }
  }
  return result;
}

void sub_AF228C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    sub_20AE0F0((uint64_t)&a9, a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_AF22B0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AF22C4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AF22D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 sub_AF22EC@<Q0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = sub_AD72DC(a1, a2);
  if (v6 == -1)
  {
    sub_AF2504(a1, (uint64_t *)a2, v7, &v33);
    long long v25 = v36;
    *(_OWORD *)(a3 + 32) = v35;
    *(_OWORD *)(a3 + 48) = v25;
    *(void *)(a3 + 64) = v37;
    __n128 result = v34;
    *(_OWORD *)a3 = v33;
    *(__n128 *)(a3 + 16) = result;
    *(unsigned char *)(a3 + 72) = 1;
    return result;
  }
  uint64_t v9 = *(void *)(a1 + 48);
  float v8 = *(uint64_t **)(a1 + 56);
  unint64_t v10 = v6 / 0x30;
  unint64_t v11 = v9 + 16 * (v6 / 0x30);
  int v12 = (unsigned __int8 *)(v11 + 10);
  int v13 = v6 % 0x30;
  if ((unsigned __int16)(v6 % 0x30) < 9u)
  {
    __int16 v15 = 0;
    goto LABEL_13;
  }
  unsigned __int16 v14 = v13 - 9;
  __int16 v15 = 0;
  uint64_t v16 = (unsigned __int16)(v6 % 0x30 - 9) >> 3;
  if ((unsigned __int16)(v6 % 0x30 - 9) >> 3)
  {
    __int16 v17 = 0;
    uint64_t v18 = v16 + 1;
    uint64_t v19 = (v16 + 1) & 0x3FFE;
    LOWORD(v13) = v13 - 8 * v19;
    long long v20 = &v12[v19];
    long long v21 = (unsigned __int8 *)(v9 + 16 * v10 + 11);
    uint64_t v22 = v19;
    do
    {
      uint64_t v23 = *(v21 - 1);
      int v24 = *v21;
      v21 += 2;
      v15 += byte_20EBDB6[v23];
      v17 += byte_20EBDB6[v24];
      v22 -= 2;
    }
    while (v22);
    v15 += v17;
    if (v18 == v19) {
      goto LABEL_12;
    }
  }
  else
  {
    long long v20 = (unsigned __int8 *)(v11 + 10);
  }
  do
  {
    int v27 = *v20++;
    v15 += byte_20EBDB6[v27];
    LOWORD(v13) = v13 - 8;
  }
  while ((unsigned __int16)v13 > 8u);
LABEL_12:
  v12 += (v14 >> 3) + 1;
LABEL_13:
  unsigned __int16 v28 = v15 + byte_20EBDB6[~(-1 << v13) & (unint64_t)*v12];
  uint64_t v29 = *(void *)v11 + 8 * v28;
  if (*(unsigned __int16 *)(v11 + 8) == v28)
  {
    unint64_t v30 = v11 + 16;
    unint64_t v11 = *(void *)(a1 + 56);
    if ((uint64_t *)v30 != v8)
    {
      while (1)
      {
        uint64_t v31 = (uint64_t *)v30;
        if (*(_WORD *)(v30 + 8)) {
          break;
        }
        v30 += 16;
        if (v31 + 2 == v8)
        {
          unint64_t v11 = *(void *)(a1 + 56);
          goto LABEL_19;
        }
      }
      unint64_t v11 = v30;
LABEL_19:
      uint64_t v29 = *v31;
    }
  }
  *(void *)&long long v33 = a1;
  *((void *)&v33 + 1) = v9;
  v34.n128_u64[0] = (unint64_t)v8;
  v34.n128_u64[1] = v11;
  *(void *)&long long v35 = v29;
  *((void *)&v35 + 1) = v9;
  *(void *)&long long v36 = v8;
  *((void *)&v36 + 1) = v8;
  uint64_t v37 = 0;
  sub_AD76D0(&v33);
  long long v32 = v36;
  *(_OWORD *)(a3 + 32) = v35;
  *(_OWORD *)(a3 + 48) = v32;
  *(void *)(a3 + 64) = v37;
  __n128 result = v34;
  *(_OWORD *)a3 = v33;
  *(__n128 *)(a3 + 16) = result;
  *(unsigned char *)(a3 + 72) = 0;
  return result;
}

void *sub_AF2504@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 40);
  if ((unint64_t)(*(void *)(a1 + 80) - v5) >= 0x1FFFFFFFFFFFFFFFLL)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2E18(exception, "insert overflow");
  }
  unint64_t v9 = a3 / 0x30;
  unint64_t v10 = a3 % 0x30;
  if (!v5)
  {
    uint64_t v11 = *(void *)(a1 + 48);
    goto LABEL_17;
  }
  uint64_t v11 = *(void *)(a1 + 48);
  int v12 = (uint64_t *)(v11 + 16 * v9);
  if (((*((unsigned __int8 *)v12 + (v10 >> 3) + 10) >> (v10 & 7)) & 1) == 0) {
    goto LABEL_17;
  }
  uint64_t v15 = *v12;
  unsigned __int16 v14 = (unsigned __int8 *)v12 + 10;
  uint64_t v13 = v15;
  if ((unsigned __int16)(a3 % 0x30) < 9u)
  {
    __int16 v16 = 0;
    unint64_t v17 = a3 % 0x30;
    goto LABEL_15;
  }
  __int16 v16 = 0;
  unint64_t v17 = (unsigned __int16)(a3 % 0x30 - 9) >> 3;
  if ((unsigned __int16)(a3 % 0x30 - 9) >> 3)
  {
    __int16 v18 = 0;
    unint64_t v19 = v17 + 1;
    uint64_t v20 = (v17 + 1) & 0x3FFE;
    LOWORD(v17) = v10 - 8 * v20;
    long long v21 = &v14[v20];
    uint64_t v22 = (unsigned __int8 *)(v11 + 16 * v9 + 11);
    uint64_t v23 = v20;
    do
    {
      uint64_t v24 = *(v22 - 1);
      int v25 = *v22;
      v22 += 2;
      v16 += byte_20EBDB6[v24];
      v18 += byte_20EBDB6[v25];
      v23 -= 2;
    }
    while (v23);
    v16 += v18;
    if (v19 == v20) {
      goto LABEL_14;
    }
  }
  else
  {
    unint64_t v17 = a3 % 0x30;
    long long v21 = v14;
  }
  do
  {
    int v26 = *v21++;
    v16 += byte_20EBDB6[v26];
    LOWORD(v17) = v17 - 8;
  }
  while ((unsigned __int16)v17 > 8u);
LABEL_14:
  v14 += ((unsigned __int16)(v10 - 9) >> 3) + 1;
LABEL_15:
  if (*(_DWORD *)(a1 + 32) == *(_DWORD *)(v13
                                         + 8
                                         * (unsigned __int16)(v16
                                                            + byte_20EBDB6[~(-1 << v17) & (unint64_t)*v14])))
    *(void *)(a1 + 40) = v5 - 1;
LABEL_17:
  uint64_t v27 = v11 + 16 * v9;
  uint64_t v28 = *(unsigned __int16 *)(v27 + 8);
  sub_ACDCB4(v27, a3 % 0x30, a2);
  uint64_t v29 = *(void *)(a1 + 48);
  unint64_t v30 = *(uint64_t **)(a1 + 56);
  uint64_t v31 = (uint64_t *)(v29 + 16 * v9);
  uint64_t v32 = *((unsigned __int16 *)v31 + 4);
  *(void *)(a1 + 80) = *(void *)(a1 + 80) - v28 + v32;
  long long v33 = (unsigned __int8 *)v31 + 10;
  if ((unsigned __int16)(a3 % 0x30) >= 9u)
  {
    unsigned __int16 v34 = v10 - 9;
    __int16 v35 = 0;
    uint64_t v36 = (unsigned __int16)(a3 % 0x30 - 9) >> 3;
    if ((unsigned __int16)(a3 % 0x30 - 9) >> 3)
    {
      __int16 v37 = 0;
      uint64_t v38 = v36 + 1;
      uint64_t v39 = (v36 + 1) & 0x3FFE;
      LOWORD(v10) = v10 - 8 * v39;
      int v40 = &v33[v39];
      __int16 v41 = (unsigned __int8 *)(v29 + 16 * v9 + 11);
      uint64_t v42 = v39;
      do
      {
        uint64_t v43 = *(v41 - 1);
        int v44 = *v41;
        v41 += 2;
        v35 += byte_20EBDB6[v43];
        v37 += byte_20EBDB6[v44];
        v42 -= 2;
      }
      while (v42);
      v35 += v37;
      if (v38 == v39) {
        goto LABEL_26;
      }
    }
    else
    {
      int v40 = (unsigned __int8 *)(v29 + 16 * v9 + 10);
    }
    do
    {
      int v45 = *v40++;
      v35 += byte_20EBDB6[v45];
      LOWORD(v10) = v10 - 8;
    }
    while ((unsigned __int16)v10 > 8u);
LABEL_26:
    v33 += (v34 >> 3) + 1;
    goto LABEL_27;
  }
  __int16 v35 = 0;
LABEL_27:
  unsigned __int16 v46 = v35 + byte_20EBDB6[~(-1 << v10) & (unint64_t)*v33];
  uint64_t v47 = *(void *)(v29 + 16 * v9) + 8 * v46;
  if (v32 == v46)
  {
    uint64_t v48 = v31 + 2;
    uint64_t v31 = v30;
    if (v48 != v30)
    {
      while (1)
      {
        unsigned __int16 v49 = v48;
        if (*((_WORD *)v48 + 4)) {
          break;
        }
        v48 += 2;
        if (v49 + 2 == v30)
        {
          uint64_t v31 = v30;
          goto LABEL_33;
        }
      }
      uint64_t v31 = v48;
LABEL_33:
      uint64_t v47 = *v49;
    }
  }
  *a4 = a1;
  a4[1] = v29;
  a4[2] = v30;
  a4[3] = v31;
  a4[4] = v47;
  a4[5] = v29;
  a4[6] = v30;
  a4[7] = v30;
  a4[8] = 0;

  return sub_AD76D0(a4);
}

void sub_AF2854(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_AF2868(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 80) - *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    BOOL v4 = v2 >= v3;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4 || (unint64_t v5 = *(void *)(a1 + 72), v5 < 0x21))
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    do
    {
      unint64_t v6 = v5;
      v5 >>= 1;
    }
    while (v6 >= 0x42 && v2 < (unint64_t)(float)(*(float *)(a1 + 20) * (float)v5));
    long long v24 = *(_OWORD *)(a1 + 16);
    int v25 = *(_DWORD *)(a1 + 32);
    memset(v26, 0, sizeof(v26));
    long long v27 = 0u;
    uint64x2_t v23 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_f32(*(float32x2_t *)&v24, 0)));
    BYTE8(v24) = 0;
    sub_ACD1C8((uint64_t)&v23, 0, (void *)a1, v5);
    int v7 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v25;
    int v25 = v7;
    float v8 = *(void **)(a1 + 40);
    unint64_t v9 = *(char **)(a1 + 48);
    *(void **)(a1 + 40) = v26[0];
    uint64x2_t v11 = *(uint64x2_t *)a1;
    long long v10 = *(_OWORD *)(a1 + 16);
    long long v12 = v24;
    *(uint64x2_t *)a1 = v23;
    *(_OWORD *)(a1 + 16) = v12;
    uint64x2_t v23 = v11;
    long long v24 = v10;
    long long v13 = *(_OWORD *)&v26[1];
    v26[0] = v8;
    v26[1] = v9;
    unsigned __int16 v14 = v26[3];
    long long v15 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 48) = v13;
    *(void *)(a1 + 64) = v14;
    *(_OWORD *)&v26[2] = v15;
    *(void *)&long long v13 = v27;
    long long v16 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)(a1 + 72) = v27;
    long long v27 = v16;
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)(unint64_t)v13)));
    *(unsigned char *)(a1 + 24) = 0;
    uint64x2_t v23 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v24, (float)(unint64_t)v16)));
    BYTE8(v24) = 0;
    if (v9)
    {
      unint64_t v17 = (char *)v15;
      __int16 v18 = v9;
      if ((char *)v15 != v9)
      {
        unint64_t v19 = (char *)v15;
        do
        {
          long long v21 = (void *)*((void *)v19 - 2);
          v19 -= 16;
          uint64_t v20 = v21;
          if (v21)
          {
            free(v20);
            *((void *)v17 - 2) = 0;
          }
          unint64_t v17 = v19;
        }
        while (v19 != v9);
        __int16 v18 = (char *)v26[1];
      }
      v26[2] = v9;
      free(v18);
    }
    uint64_t result = 1;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return result;
}

void sub_AF2A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    sub_20AE0F0((uint64_t)&a9, a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_AF2A5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  *(_OWORD *)a1 = xmmword_20E2060;
  *(_DWORD *)(a1 + 16) = 8;
  *(_WORD *)(a1 + 20) = 1;
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = a4;
  *(void *)(a1 + 48) = *a5;
  uint64_t v7 = a5[1];
  *(void *)(a1 + 56) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)&long long v8 = 0x8000000080000000;
  *((void *)&v8 + 1) = 0x8000000080000000;
  *(_OWORD *)(a1 + 68) = v8;
  *(void *)(a1 + 88) = 10;
  *(void *)(a1 + 96) = 0x100000004;
  sub_AF2BDC(a1 + 104);
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_DWORD *)(a1 + 416) = -1;
  *(void *)(a1 + 408) = 0;
  sub_BD5668(a1 + 424, a2);
  char v11 = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)(a1 + 528), &__p);
  if (v11 < 0) {
    operator delete((void *)__p);
  }
  return a1;
}

void sub_AF2B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_A387B0(v19);
  sub_A387FC(v18 + 96);
  sub_A3884C(v16 + 296);
  sub_A3884C(v18);
  sub_A3888C(v17);
  sub_14A84(v15);
  _Unwind_Resume(a1);
}

void sub_AF2BC8(_Unwind_Exception *a1)
{
  sub_14A84(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_AF2BDC(uint64_t a1)
{
  *(_WORD *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 26) = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0x3EA3D70A3F4CCCCDLL;
  *(void *)(a1 + 28) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 40) = 0;
  sub_AF2CD8((uint64_t *)(a1 + 48), 32);
  *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)*(unint64_t *)(a1 + 72))));
  *(unsigned char *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  sub_AF31EC(a1);
  *(unsigned char *)(a1 + 26) = 1;
  *(_DWORD *)(a1 + 32) = -1;
  return a1;
}

void sub_AF2C90(_Unwind_Exception *a1)
{
  BOOL v4 = *(void **)(v1 + 112);
  if (v4)
  {
    operator delete(v4);
    unint64_t v5 = *v2;
    if (!*v2)
    {
LABEL_3:
      sub_A38920(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    unint64_t v5 = *v2;
    if (!*v2) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 96) = v5;
  operator delete(v5);
  sub_A38920(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_AF2CD8(uint64_t *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = a2;
  a1[4] = 0;
  if (a2)
  {
    v4[0] = 0;
    v4[1] = 0;
    sub_AF2D6C(a1, (a2 - 1) / 0x30uLL + 1, (uint64_t **)v4);
    if (v4[0]) {
      free(v4[0]);
    }
  }
  return a1;
}

void sub_AF2D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (a9) {
    free(a9);
  }
  sub_20AE094((uint64_t)&a9, v9);
  _Unwind_Resume(a1);
}

void sub_AF2D6C(uint64_t *a1, unint64_t a2, uint64_t **a3)
{
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v6 = a1[2];
  uint64_t v8 = a1[1];
  if (a2 <= (v6 - v8) >> 4)
  {
    if (a2)
    {
      uint64_t v14 = v8 + 16 * a2;
      do
      {
        *(void *)uint64_t v8 = 0;
        int v16 = *((unsigned __int16 *)a3 + 4);
        *(_WORD *)(v8 + 8) = v16;
        if (v16)
        {
          uint64_t v17 = *((unsigned __int16 *)a3 + 4);
          uint64_t v18 = malloc_type_malloc(12 * v17, 0x10000403E1C8BA9uLL);
          if (!v18)
          {
            fprintf(__stderrp, "sparsehash FATAL ERROR: failed to allocate %lu groups\n", v17);
            exit(1);
          }
          *(void *)uint64_t v8 = v18;
          if (*((_WORD *)a3 + 4))
          {
            unint64_t v19 = *a3;
            uint64_t v20 = 12 * *((unsigned __int16 *)a3 + 4);
            do
            {
              uint64_t v21 = *v19;
              v18[2] = *((_DWORD *)v19 + 2);
              *(void *)uint64_t v18 = v21;
              v18 += 3;
              unint64_t v19 = (uint64_t *)((char *)v19 + 12);
              v20 -= 12;
            }
            while (v20);
          }
        }
        int v15 = *(_DWORD *)((char *)a3 + 10);
        *(_WORD *)(v8 + 14) = *((_WORD *)a3 + 7);
        *(_DWORD *)(v8 + 10) = v15;
        v8 += 16;
      }
      while (v8 != v14);
      uint64_t v8 = v14;
    }
    a1[1] = v8;
  }
  else
  {
    uint64_t v9 = (v8 - *a1) >> 4;
    if ((v9 + a2) >> 60) {
      sub_2E00();
    }
    uint64_t v10 = v6 - *a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= v9 + a2) {
      uint64_t v11 = v9 + a2;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      uint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v12 = v11;
    }
    if (v12) {
      long long v13 = (char *)malloc_type_malloc(16 * v12, 0x1020040EDED9539uLL);
    }
    else {
      long long v13 = 0;
    }
    uint64_t v22 = (uint64_t)&v13[16 * v9];
    uint64x2_t v23 = &v13[16 * v12];
    unint64_t v24 = v22 + 16 * a2;
    uint64_t v25 = v22;
    do
    {
      *(void *)uint64_t v25 = 0;
      int v27 = *((unsigned __int16 *)a3 + 4);
      *(_WORD *)(v25 + 8) = v27;
      if (v27)
      {
        uint64_t v28 = *((unsigned __int16 *)a3 + 4);
        uint64_t v29 = malloc_type_malloc(12 * v28, 0x10000403E1C8BA9uLL);
        if (!v29)
        {
          fprintf(__stderrp, "sparsehash FATAL ERROR: failed to allocate %lu groups\n", v28);
          exit(1);
        }
        *(void *)uint64_t v25 = v29;
        if (*((_WORD *)a3 + 4))
        {
          unint64_t v30 = *a3;
          uint64_t v31 = 12 * *((unsigned __int16 *)a3 + 4);
          do
          {
            uint64_t v32 = *v30;
            v29[2] = *((_DWORD *)v30 + 2);
            *(void *)uint64_t v29 = v32;
            v29 += 3;
            unint64_t v30 = (uint64_t *)((char *)v30 + 12);
            v31 -= 12;
          }
          while (v31);
        }
      }
      int v26 = *(_DWORD *)((char *)a3 + 10);
      *(_WORD *)(v25 + 14) = *((_WORD *)a3 + 7);
      *(_DWORD *)(v25 + 10) = v26;
      v25 += 16;
    }
    while (v25 != v24);
    sub_AF3094(v7, a1[1], a1[1], *a1, *a1, v22, v22);
    long long v33 = (char *)*a1;
    unsigned __int16 v34 = (char *)a1[1];
    *a1 = v35;
    a1[1] = v24;
    a1[2] = (uint64_t)v23;
    if (v34 != v33)
    {
      uint64_t v36 = v34;
      do
      {
        uint64_t v38 = (void *)*((void *)v36 - 2);
        v36 -= 16;
        __int16 v37 = v38;
        if (v38)
        {
          free(v37);
          *((void *)v34 - 2) = 0;
        }
        unsigned __int16 v34 = v36;
      }
      while (v36 != v33);
    }
    if (v33) {
      free(v33);
    }
  }
}

void sub_AF3040(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_ACCDC8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_AF3054(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_AF305C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_AF3064(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_ACCDC8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_AF307C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_ACCDC8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_AF3094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  uint64_t v18 = a6;
  uint64_t v19 = a7;
  if (a3 != a5)
  {
    uint64_t v9 = a3;
    do
    {
      *(void *)(v7 - 16) = 0;
      int v11 = *(unsigned __int16 *)(v9 - 8);
      *(_WORD *)(v7 - 8) = v11;
      if (v11)
      {
        uint64_t v12 = *(unsigned __int16 *)(v9 - 8);
        long long v13 = malloc_type_malloc(12 * v12, 0x10000403E1C8BA9uLL);
        if (!v13)
        {
          fprintf(__stderrp, "sparsehash FATAL ERROR: failed to allocate %lu groups\n", v12);
          exit(1);
        }
        *(void *)(v7 - 16) = v13;
        if (*(_WORD *)(v9 - 8))
        {
          uint64_t v14 = *(uint64_t **)(v9 - 16);
          uint64_t v15 = 12 * *(unsigned __int16 *)(v9 - 8);
          do
          {
            uint64_t v16 = *v14;
            v13[2] = *((_DWORD *)v14 + 2);
            *(void *)long long v13 = v16;
            v13 += 3;
            uint64_t v14 = (uint64_t *)((char *)v14 + 12);
            v15 -= 12;
          }
          while (v15);
        }
      }
      int v10 = *(_DWORD *)(v9 - 6);
      *(_WORD *)(v7 - 2) = *(_WORD *)(v9 - 2);
      *(_DWORD *)(v7 - 6) = v10;
      uint64_t v7 = v19 - 16;
      v19 -= 16;
      v9 -= 16;
    }
    while (v9 != a5);
    return v18;
  }
  return a6;
}

void sub_AF31C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_ACCFD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_AF31D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_ACCFD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_AF31EC(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    long long v18 = *(_OWORD *)(a1 + 16);
    int v19 = *(_DWORD *)(a1 + 32);
    memset(v20, 0, sizeof(v20));
    long long v21 = 0u;
    uint64x2_t v17 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_f32(*(float32x2_t *)&v18, 0)));
    BYTE8(v18) = 0;
    sub_AF3378((uint64_t)&v17, 1, (void *)a1, 0x20uLL);
    int v2 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v19;
    int v19 = v2;
    unint64_t v3 = *(void **)(a1 + 40);
    BOOL v4 = *(char **)(a1 + 48);
    *(void **)(a1 + 40) = v20[0];
    uint64x2_t v6 = *(uint64x2_t *)a1;
    long long v5 = *(_OWORD *)(a1 + 16);
    long long v7 = v18;
    *(uint64x2_t *)a1 = v17;
    *(_OWORD *)(a1 + 16) = v7;
    uint64x2_t v17 = v6;
    long long v18 = v5;
    long long v8 = *(_OWORD *)&v20[1];
    v20[0] = v3;
    v20[1] = v4;
    uint64_t v9 = v20[3];
    long long v10 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 48) = v8;
    *(void *)(a1 + 64) = v9;
    *(_OWORD *)&v20[2] = v10;
    *(void *)&long long v8 = v21;
    long long v11 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)(a1 + 72) = v21;
    long long v21 = v11;
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)(unint64_t)v8)));
    *(unsigned char *)(a1 + 24) = 0;
    uint64x2_t v17 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v18, (float)(unint64_t)v11)));
    BYTE8(v18) = 0;
    if (v4)
    {
      uint64_t v12 = (char *)v10;
      long long v13 = v4;
      if ((char *)v10 != v4)
      {
        uint64_t v14 = (char *)v10;
        do
        {
          uint64_t v16 = (void *)*((void *)v14 - 2);
          v14 -= 16;
          uint64_t v15 = v16;
          if (v16)
          {
            free(v15);
            *((void *)v12 - 2) = 0;
          }
          uint64_t v12 = v14;
        }
        while (v14 != v4);
        long long v13 = (char *)v20[1];
      }
      v20[2] = v4;
      free(v13);
    }
  }
}

void sub_AF3354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    sub_20AE0F0((uint64_t)&a9, a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_AF3378(uint64_t a1, int a2, void *a3, unint64_t a4)
{
  if (*(void *)(a1 + 40) | *(void *)(a1 + 80))
  {
    for (uint64_t i = *(void *)(a1 + 48); i != *(void *)(a1 + 56); i += 16)
    {
      if (*(void *)i)
      {
        free(*(void **)i);
        *(void *)uint64_t i = 0;
      }
      *(void *)(i + 8) = 0;
    }
    *(void *)(a1 + 80) = 0;
  }
  unint64_t v9 = *(void *)(a1 + 72);
  float32x2_t v10 = *(float32x2_t *)(a1 + 16);
  *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(v10, (float)v9)));
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 40) = 0;
  if (a2 == 1)
  {
    unint64_t v11 = a3[9];
  }
  else
  {
    unint64_t v11 = 4;
    if (a4 > 4) {
      goto LABEL_28;
    }
    while (a3[10] - a3[5] >= (unint64_t)(float)(v10.f32[0] * (float)v11))
    {
      do
      {
LABEL_28:
        if ((v11 & 0x8000000000000000) != 0)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_2E18(exception, "resize overflow");
        }
        v11 *= 2;
      }
      while (v11 < a4);
    }
  }
  if (v11 > v9)
  {
    sub_AF35EC((uint64_t *)(a1 + 48), v11);
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)*(unint64_t *)(a1 + 72))));
    *(unsigned char *)(a1 + 24) = 0;
  }
  sub_ACEFB0((uint64_t)a3, &v21);
  uint64_t v12 = a3[7];
  if (v22 != a3[6] || v23 != v12 || v24 != v12)
  {
    while (1)
    {
      uint64_t v15 = *(void *)(a1 + 72) - 1;
      unint64_t v16 = v15 & *(_DWORD *)v25;
      uint64_t v17 = *(void *)(a1 + 48);
      if ((*(unsigned __int8 *)(v17 + 16 * (v16 / 0x30) + (((v15 & *(_DWORD *)v25) % 0x30) >> 3) + 10) >> (((v15 & *(_DWORD *)v25) % 0x30) & 7)))
      {
        uint64_t v18 = 1;
        do
          unint64_t v16 = (v16 + v18++) & v15;
        while (((*(unsigned __int8 *)(v17 + 16 * (v16 / 0x30) + ((v16 % 0x30) >> 3) + 10) >> ((v16 % 0x30) & 7)) & 1) != 0);
      }
      sub_AF379C((uint64_t *)(a1 + 48), v16, v25);
      sub_ACF3EC(&v21);
      if (v22 == a3[6])
      {
        uint64_t v19 = a3[7];
        if (v23 == v19 && v24 == v19) {
          break;
        }
      }
    }
  }
  ++*(_DWORD *)(a1 + 28);
}

void sub_AF35D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AF35EC(uint64_t *a1, unint64_t a2)
{
  if (a2) {
    unint64_t v4 = (a2 - 1) / 0x30 + 1;
  }
  else {
    unint64_t v4 = 0;
  }
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v5 = a1[1];
  unint64_t v6 = (v5 - *a1) >> 4;
  if (v4 <= v6)
  {
    if (v4 < v6)
    {
      uint64_t v7 = *a1 + 16 * v4;
      if (v5 != v7)
      {
        uint64_t v8 = a1[1];
        do
        {
          float32x2_t v10 = *(void **)(v8 - 16);
          v8 -= 16;
          unint64_t v9 = v10;
          if (v10)
          {
            free(v9);
            *(void *)(v5 - 16) = 0;
          }
          uint64_t v5 = v8;
        }
        while (v8 != v7);
      }
      a1[1] = v7;
    }
  }
  else
  {
    sub_AF2D6C(a1, v4 - v6, (uint64_t **)v23);
    if (v23[0]) {
      free(v23[0]);
    }
  }
  if (a1[3] > a2)
  {
    uint64_t v11 = a1[1];
    if (a2 % 0x30)
    {
      sub_AF3970(v11 - 16, v11 - 16, a2 % 0x30, v11 - 16, 0x30u);
      uint64_t v11 = a1[1];
    }
    a1[4] = 0;
    uint64_t v12 = *a1;
    if (*a1 != v11)
    {
      unint64_t v13 = v11 - v12 - 16;
      if (v13 >= 0x10)
      {
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        uint64_t v18 = (v13 >> 4) + 1;
        uint64_t v15 = v12 + 16 * (v18 & 0x1FFFFFFFFFFFFFFELL);
        uint64_t v19 = (unsigned __int16 *)(v12 + 24);
        uint64_t v20 = v18 & 0x1FFFFFFFFFFFFFFELL;
        do
        {
          uint64_t v21 = *(v19 - 8);
          unsigned int v22 = *v19;
          v19 += 16;
          v16 += v21;
          v17 += v22;
          v20 -= 2;
        }
        while (v20);
        uint64_t v14 = v17 + v16;
        if (v18 == (v18 & 0x1FFFFFFFFFFFFFFELL)) {
          goto LABEL_24;
        }
      }
      else
      {
        uint64_t v14 = 0;
        uint64_t v15 = *a1;
      }
      do
      {
        v14 += *(unsigned __int16 *)(v15 + 8);
        v15 += 16;
      }
      while (v15 != v11);
LABEL_24:
      a1[4] = v14;
    }
  }
  a1[3] = a2;
}

void sub_AF3784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (a9) {
    free(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_AF379C(uint64_t *a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v5 = a2 / 0x30;
  uint64_t v6 = *a1;
  uint64_t v7 = v6 + 16 * (a2 / 0x30);
  unint64_t v8 = a2 % 0x30;
  unint64_t v9 = (unsigned __int8 *)(v7 + 10);
  if ((unsigned __int16)(a2 % 0x30) < 9u)
  {
    __int16 v10 = 0;
    unint64_t v11 = a2 % 0x30;
    goto LABEL_11;
  }
  __int16 v10 = 0;
  unint64_t v11 = (unsigned __int16)(a2 % 0x30 - 9) >> 3;
  if ((unsigned __int16)(a2 % 0x30 - 9) >> 3)
  {
    __int16 v12 = 0;
    unint64_t v13 = v11 + 1;
    uint64_t v14 = (v11 + 1) & 0x3FFE;
    LOWORD(v11) = v8 - 8 * v14;
    uint64_t v15 = &v9[v14];
    uint64_t v16 = (unsigned __int8 *)(v6 + 16 * v5 + 11);
    uint64_t v17 = v14;
    do
    {
      uint64_t v18 = *(v16 - 1);
      int v19 = *v16;
      v16 += 2;
      v10 += byte_20EC0B6[v18];
      v12 += byte_20EC0B6[v19];
      v17 -= 2;
    }
    while (v17);
    v10 += v12;
    if (v13 == v14) {
      goto LABEL_10;
    }
  }
  else
  {
    unint64_t v11 = a2 % 0x30;
    uint64_t v15 = (unsigned __int8 *)(v7 + 10);
  }
  do
  {
    int v20 = *v15++;
    v10 += byte_20EC0B6[v20];
    LOWORD(v11) = v11 - 8;
  }
  while ((unsigned __int16)v11 > 8u);
LABEL_10:
  v9 += ((unsigned __int16)(v8 - 9) >> 3) + 1;
LABEL_11:
  uint64_t v21 = *(unsigned __int16 *)(v7 + 8);
  unint64_t v22 = v7 + (v8 >> 3);
  int v24 = *(unsigned __int8 *)(v22 + 10);
  uint64_t v23 = (unsigned char *)(v22 + 10);
  unsigned __int16 v25 = v10 + byte_20EC0B6[~(-1 << v11) & (unint64_t)*v9];
  int v26 = 1 << (v8 & 7);
  if ((v26 & v24) == 0)
  {
    sub_ACF864(v7, (unsigned __int16)(v10 + byte_20EC0B6[~(-1 << v11) & (unint64_t)*v9]));
    ++*(_WORD *)(v7 + 8);
    *v23 |= v26;
  }
  uint64_t v27 = 12 * v25;
  uint64_t v28 = *(void *)v7 + v27;
  uint64_t v29 = *a3;
  *(_DWORD *)(v28 + 8) = *((_DWORD *)a3 + 2);
  *(void *)uint64_t v28 = v29;
  uint64_t result = *(void *)v7 + v27;
  a1[4] = a1[4] - v21 + *(unsigned __int16 *)(*a1 + 16 * v5 + 8);
  return result;
}

void sub_AF3970(uint64_t a1, uint64_t a2, unsigned __int16 a3, uint64_t a4, unsigned __int16 a5)
{
  unsigned __int16 v8 = a3;
  if (a2 != a4 || a3 != a5)
  {
    __int16 v9 = 0;
    uint64_t v10 = a1 + 10;
    unsigned __int16 v11 = a3 - 9;
    uint64_t v28 = (unsigned __int8 *)(a1 + 11);
    __int16 v29 = a3 - 9;
    while (1)
    {
      uint64_t v12 = a1 + (v8 >> 3);
      int v14 = *(unsigned __int8 *)(v12 + 10);
      unint64_t v13 = (unsigned char *)(v12 + 10);
      int v15 = 1 << (v8 & 7);
      if ((v15 & v14) == 0) {
        goto LABEL_19;
      }
      if (v8 < 9u)
      {
        __int16 v16 = 0;
        int v19 = (unsigned __int8 *)(a1 + 10);
        LOBYTE(v17) = v8;
        if (*(_WORD *)(a1 + 8) == 1) {
          goto LABEL_15;
        }
        goto LABEL_9;
      }
      if ((unsigned __int16)(v29 + v9) < 8u) {
        break;
      }
      __int16 v20 = 0;
      __int16 v21 = 0;
      uint64_t v22 = ((v11 >> 3) + 1) & 0x3FFE;
      unsigned __int16 v17 = v8 - 8 * ((((unsigned __int16)(v29 + v9) >> 3) + 1) & 0x3FFE);
      uint64_t v18 = (unsigned __int8 *)(v10 + ((((unsigned __int16)(v29 + v9) >> 3) + 1) & 0x3FFE));
      int v24 = v28;
      do
      {
        uint64_t v25 = *(v24 - 1);
        int v26 = *v24;
        v24 += 2;
        v20 += byte_20EC0B6[v25];
        v21 += byte_20EC0B6[v26];
        v22 -= 2;
      }
      while (v22);
      __int16 v16 = v21 + v20;
      uint64_t v23 = ((unsigned __int16)(v29 + v9) >> 3) + 1;
      if ((v23 & 0x3FFE) != v23) {
        goto LABEL_13;
      }
LABEL_14:
      int v19 = (unsigned __int8 *)(v10 + ((unsigned __int16)(v8 - 9) >> 3) + 1);
      if (*(_WORD *)(a1 + 8) == 1)
      {
LABEL_15:
        if (*(void *)a1) {
          free(*(void **)a1);
        }
        *(void *)a1 = 0;
        goto LABEL_18;
      }
LABEL_9:
      sub_ACF740(a1, (unsigned __int16)(v16 + byte_20EC0B6[~(-1 << v17) & *v19]));
LABEL_18:
      --*(_WORD *)(a1 + 8);
      *v13 &= ~(_BYTE)v15;
LABEL_19:
      ++v8;
      ++v9;
      ++v11;
      if (a2 == a4 && v8 == a5) {
        return;
      }
    }
    __int16 v16 = 0;
    unsigned __int16 v17 = v8;
    uint64_t v18 = (unsigned __int8 *)(a1 + 10);
    do
    {
LABEL_13:
      int v27 = *v18++;
      v16 += byte_20EC0B6[v27];
      v17 -= 8;
    }
    while (v17 > 8u);
    goto LABEL_14;
  }
}

uint64_t sub_AF3B78(uint64_t a1)
{
  uint64_t v20 = 0;
  long long v19 = 0u;
  memset(v18, 0, sizeof(v18));
  *(_OWORD *)long long __p = 0u;
  memset(v16, 0, sizeof(v16));
  char v22 = 0;
  LOBYTE(v21) = 0;
  sub_C50BD8((char *)__p, &v21);
  if (v22 < 0) {
    operator delete((void *)v21);
  }
  BYTE8(v18[8]) = 0;
  uint64_t v20 = 0;
  long long v19 = 0uLL;
  int v2 = (void **)(a1 + 136);
  unint64_t v3 = *(void **)(a1 + 136);
  *(_DWORD *)(a1 + 128) = v16[0];
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 144);
    unint64_t v5 = v3;
    if ((void *)v4 != v3)
    {
      do
      {
        v4 -= 296;
        sub_9F5E28(a1 + 152, v4);
      }
      while ((void *)v4 != v3);
      unint64_t v5 = *v2;
    }
    *(void *)(a1 + 144) = v3;
    operator delete(v5);
    *int v2 = 0;
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
  }
  *(_OWORD *)(a1 + 136) = *(_OWORD *)&v16[1];
  *(void **)(a1 + 152) = v16[3];
  memset(&v16[1], 0, 24);
  uint64_t v6 = (void **)(a1 + 160);
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)uint64_t v6 = *(_OWORD *)__p;
  *(void *)(a1 + 176) = *(void *)&v18[0];
  BYTE7(v18[0]) = 0;
  LOBYTE(__p[0]) = 0;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)((char *)&v18[4] + 8);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)((char *)v18 + 8);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)((char *)&v18[1] + 8);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)((char *)&v18[2] + 8);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)((char *)&v18[3] + 8);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)((char *)&v18[5] + 8);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)((char *)&v18[6] + 8);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)((char *)&v18[7] + 8);
  *(unsigned char *)(a1 + 312) = BYTE8(v18[8]);
  uint64_t v7 = *(void **)(a1 + 320);
  if (v7)
  {
    *(void *)(a1 + 328) = v7;
    operator delete(v7);
    *(void *)(a1 + 320) = 0;
    *(void *)(a1 + 328) = 0;
    *(void *)(a1 + 336) = 0;
    int v8 = SBYTE7(v18[0]);
    *(_OWORD *)(a1 + 320) = v19;
    *(void *)(a1 + 336) = v20;
    uint64_t v20 = 0;
    long long v19 = 0uLL;
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)(a1 + 320) = v19;
    *(void *)(a1 + 336) = v20;
    uint64_t v20 = 0;
    long long v19 = 0uLL;
  }
  if (v16[1])
  {
    __int16 v9 = (char *)v16[2];
    uint64_t v10 = v16[1];
    if (v16[2] != v16[1])
    {
      do
      {
        v9 -= 296;
        sub_9F5E28((uint64_t)&v16[3], (uint64_t)v9);
      }
      while (v9 != v16[1]);
      uint64_t v10 = v16[1];
    }
    v16[2] = v16[1];
    operator delete(v10);
  }
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a1 + 88);
  if (*(void *)(a1 + 384) | *(void *)(a1 + 424))
  {
    for (uint64_t i = *(void *)(a1 + 392); i != *(void *)(a1 + 400); i += 16)
    {
      if (*(void *)i)
      {
        free(*(void **)i);
        *(void *)uint64_t i = 0;
      }
      *(void *)(i + 8) = 0;
    }
    *(void *)(a1 + 424) = 0;
  }
  *(uint64x2_t *)(a1 + 344) = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 360), (float)*(unint64_t *)(a1 + 416))));
  *(unsigned char *)(a1 + 368) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 440) = *(void *)(a1 + 432);
  *(_DWORD *)(a1 + 456) = 0;
  if (*(void *)(a1 + 504) | *(void *)(a1 + 544))
  {
    for (uint64_t j = *(void *)(a1 + 512); j != *(void *)(a1 + 520); j += 16)
    {
      if (*(void *)j)
      {
        free(*(void **)j);
        *(void *)uint64_t j = 0;
      }
      *(void *)(j + 8) = 0;
    }
    *(void *)(a1 + 544) = 0;
  }
  *(uint64x2_t *)(a1 + 464) = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 480), (float)*(unint64_t *)(a1 + 536))));
  *(unsigned char *)(a1 + 488) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 560) = *(void *)(a1 + 552);
  *(_DWORD *)(a1 + 576) = 0;
  *(void *)(a1 + 2016) = 0;
  *(void *)(a1 + 2032) = 0;
  *(void *)(a1 + 2024) = 0;
  int v13 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 1352) = v13;
  *(unsigned char *)(a1 + 1356) = *(unsigned char *)(a1 + 28);
  char v14 = *(unsigned char *)(a1 + 72);
  *(unsigned char *)(a1 + 1357) = v14;
  *(_DWORD *)(a1 + 616) = v13;
  *(unsigned char *)(a1 + 634) = 0;
  *(_DWORD *)(a1 + 636) = 0;
  *(unsigned char *)(a1 + 640) = v14;
  v16[0] = (void *)0x1FFFFFFFDLL;
  uint64_t result = sub_AD28B0(a1 + 344, (uint64_t *)v16);
  *(_DWORD *)(a1 + 584) = result;
  return result;
}

void sub_AF3EF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 - 81) < 0) {
    operator delete(*(void **)(v2 - 104));
  }
  sub_20ADF74(v2 - 104, (uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_AF3F20(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v18 = 0;
  long long v19 = 0;
  int v15 = 0;
  __int16 v16 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  sub_ACDFB0((uint64_t)&v26, v2, a1 + 344, a1 + 464, (void *)(a1 + 592), &v18, &v15, &v24);
  unint64_t v3 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)v19;
  if (v19 && !atomic_fetch_add((atomic_ullong *volatile)v19 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v26 = *(void *)(a1 + 8);
  uint64_t v28 = v6;
  int v27 = *(_DWORD *)(a1 + 24);
  char v29 = *(unsigned char *)(a1 + 28);
  char v31 = *(unsigned char *)(a1 + 72);
  int v30 = *(_DWORD *)(a1 + 120);
  sub_AD3BC4((uint64_t)&v26, (_OWORD *)(a1 + 88));
  sub_C50C4C(a1 + 160, (uint64_t)&v32, (uint64_t)&__p);
  if (v23 < 0) {
    operator delete(__p);
  }
  unint64_t v7 = *(void *)(a1 + 2016);
  unint64_t v8 = *(void *)(a1 + 304);
  if (v7 > v8) {
    unint64_t v8 = *(void *)(a1 + 2016);
  }
  *(void *)(a1 + 2016) = v8 + v7;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v18);
    sub_188FC78(&v18, (uint64_t)"Primary SPA scanned ", 20);
    __int16 v9 = (void *)std::ostream::operator<<();
    sub_188FC78(v9, (uint64_t)" stop patterns and obtained ", 28);
    uint64_t v10 = (void *)std::ostream::operator<<();
    sub_188FC78(v10, (uint64_t)" journeys in ", 13);
    unsigned __int16 v11 = (void *)std::ostream::operator<<();
    uint64_t v12 = sub_188FC78(v11, (uint64_t)" ms using ", 10);
    int v13 = (void *)sub_38EC58((uint64_t)v12, &v33);
    sub_188FC78(v13, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v15, 2u);
    if (v17 < 0) {
      operator delete(v15);
    }
    if (v21 < 0) {
      operator delete(v20);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return sub_9FD504((uint64_t)&v26);
}

void sub_AF4268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_9FD504((uint64_t)&a69);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_9FD504((uint64_t)&a69);
  _Unwind_Resume(a1);
}

uint64_t sub_AF4308(uint64_t a1, int a2)
{
  int v85 = a2;
  *(_DWORD *)(a1 + 616) = a2;
  long long v3 = *(_OWORD *)(a1 + 104);
  v84[0] = *(_OWORD *)(a1 + 88);
  v84[1] = v3;
  LOBYTE(v84[0]) = 1;
  v83[0] = (uint64_t)v84;
  v83[1] = a1;
  _OWORD v83[2] = (uint64_t)&v85;
  uint64_t v4 = *(_DWORD **)(a1 + 592);
  LODWORD(v79) = (*(_DWORD *)(a1 + 584) << *v4) | (2 * a2) | 1;
  int v5 = *(_DWORD *)(sub_AF1DB0((uint64_t)(v4 + 2), (unsigned int *)&v79) + 4);
  unint64_t v7 = (_DWORD *)(a1 + 92);
  unsigned int v6 = *(_DWORD *)(a1 + 92);
  unsigned int v86 = v6;
  if (*(unsigned char *)(a1 + 49))
  {
    int v8 = 10 * (v5 - v6);
    if (v8 < *(_DWORD *)(a1 + 52)) {
      goto LABEL_16;
    }
    int v9 = sub_AF5934(v83, v5);
    LODWORD(v75[0]) = v9;
    unsigned int v6 = v86;
    if (v9 != 0x7FFFFFFF && (int)v86 < v9)
    {
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)&v79);
        sub_188FC78(&v79, (uint64_t)"[", 1);
        unsigned __int16 v11 = (void *)std::ostream::operator<<();
        uint64_t v12 = sub_188FC78(v11, (uint64_t)"] Tightening only improved the journey's departure (arrival) from ", 66);
        int v13 = (void *)sub_266E4((uint64_t)v12);
        char v14 = sub_188FC78(v13, (uint64_t)" to ", 4);
        sub_266E4((uint64_t)v14);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 2u);
        if (v78 < 0) {
          operator delete(__p[0]);
        }
        if (v82 < 0) {
          operator delete(v81);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      unsigned int v6 = v75[0];
      unsigned int v86 = v75[0];
    }
    if (*(unsigned char *)(a1 + 49))
    {
LABEL_16:
      if (v8 >= *(_DWORD *)(a1 + 52))
      {
        sub_725D0((uint64_t)__p);
        if (sub_723EC(2u))
        {
          sub_6BAC((uint64_t)&v79);
          sub_188FC78(&v79, (uint64_t)"[", 1);
          int v15 = (void *)std::ostream::operator<<();
          sub_188FC78(v15, (uint64_t)"] Journey duration (", 20);
          __int16 v16 = (void *)std::ostream::operator<<();
          sub_188FC78(v16, (uint64_t)" sec) exceeds tightening threshold; performing tightening by time shift", 71);
          std::stringbuf::str();
          sub_7246C((uint64_t *)v75, 2u);
          if (v76 < 0) {
            operator delete(v75[0]);
          }
          if (v82 < 0) {
            operator delete(v81);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        int v17 = *(_DWORD *)(a1 + 60);
        if (v17 > *(_DWORD *)(a1 + 56))
        {
LABEL_24:
          int v18 = v5;
LABEL_25:
          *(double *)(a1 + 208) = sub_72688((uint64_t)__p);
          unsigned int v6 = v86;
          int v5 = v18;
          unint64_t v7 = (_DWORD *)(a1 + 92);
          goto LABEL_26;
        }
        while (1)
        {
          *(double *)(a1 + 272) = *(double *)(a1 + 272) + 1.0;
          if (sub_723EC(2u))
          {
            sub_6BAC((uint64_t)&v79);
            sub_188FC78(&v79, (uint64_t)"[", 1);
            uint64_t v38 = (void *)std::ostream::operator<<();
            sub_188FC78(v38, (uint64_t)"] Examining time shift of ", 26);
            int v39 = v17 / 10;
            int v40 = v17 % 10;
            __int16 v41 = (void *)std::ostream::operator<<();
            sub_188FC78(v41, (uint64_t)" sec (exponential search)", 25);
            std::stringbuf::str();
            sub_7246C((uint64_t *)v75, 2u);
            if (v76 < 0) {
              operator delete(v75[0]);
            }
            uint64_t v79 = v74;
            *(uint64_t *)((char *)&v79 + *(void *)(v74 - 24)) = v73;
            if (v82 < 0) {
              operator delete(v81);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            std::ios::~ios();
          }
          else
          {
            int v39 = v17 / 10;
            int v40 = v17 % 10;
          }
          if (v17 < 0) {
            char v42 = -5;
          }
          else {
            char v42 = 5;
          }
          unsigned int v43 = v39 + (((103 * (char)(v42 + v40)) >> 15) & 1) + ((103 * (char)(v42 + v40)) >> 10);
          int v44 = v5;
          int v18 = v43 + v5;
          unsigned int v45 = sub_AF5934(v83, v43 + v5);
          if (*(double *)(a1 + 64) * (double)(int)fabs((double)(int)(10 * (v45 - v86))) >= (double)(int)fabs((double)(int)(10 * v43)))
          {
            unsigned int v47 = v45;
            if (sub_723EC(2u))
            {
              sub_6BAC((uint64_t)&v79);
              sub_188FC78(&v79, (uint64_t)"[", 1);
              uint64_t v48 = (void *)std::ostream::operator<<();
              sub_188FC78(v48, (uint64_t)"] Journey duration improved from ", 33);
              unsigned __int16 v49 = (void *)std::ostream::operator<<();
              sub_188FC78(v49, (uint64_t)" to ", 4);
              uint64_t v50 = (void *)std::ostream::operator<<();
              sub_188FC78(v50, (uint64_t)" sec for time shift of ", 23);
              uint64_t v51 = (void *)std::ostream::operator<<();
              sub_188FC78(v51, (uint64_t)" sec", 4);
              std::stringbuf::str();
              sub_7246C((uint64_t *)v75, 2u);
              if (v76 < 0) {
                operator delete(v75[0]);
              }
              uint64_t v79 = v74;
              *(uint64_t *)((char *)&v79 + *(void *)(v74 - 24)) = v73;
              if (v82 < 0) {
                operator delete(v81);
              }
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              std::ios::~ios();
            }
            unsigned int v86 = v47;
            if (!v43) {
              goto LABEL_25;
            }
            double v52 = (double)v17 * 0.5;
            if (v52 >= 0.0)
            {
              if (v52 < 4.50359963e15)
              {
                uint64_t v53 = (uint64_t)(v52 + v52) + 1;
                goto LABEL_83;
              }
            }
            else if (v52 > -4.50359963e15)
            {
              uint64_t v53 = (uint64_t)(v52 + v52);
              if (v53 >= 1) {
                --v53;
              }
LABEL_83:
              double v52 = (double)(v53 >> 1);
            }
            double v54 = (double)v17 * 0.25;
            if (v54 >= 0.0)
            {
              if (v54 < 4.50359963e15)
              {
                uint64_t v55 = (uint64_t)(v54 + v54) + 1;
                goto LABEL_91;
              }
            }
            else if (v54 > -4.50359963e15)
            {
              uint64_t v55 = (uint64_t)(v54 + v54);
              if (v55 >= 1) {
                --v55;
              }
LABEL_91:
              double v54 = (double)(v55 >> 1);
            }
            int v56 = (int)v54;
            if (*(_DWORD *)(a1 + 60) > (int)v54) {
              goto LABEL_25;
            }
            int v57 = (int)v52;
            while (2)
            {
              *(double *)(a1 + 272) = *(double *)(a1 + 272) + 1.0;
              int v59 = v56 + v57;
              if (sub_723EC(2u))
              {
                sub_6BAC((uint64_t)&v79);
                sub_188FC78(&v79, (uint64_t)"[", 1);
                unsigned __int16 v60 = (void *)std::ostream::operator<<();
                sub_188FC78(v60, (uint64_t)"] Examining time shift of ", 26);
                int v61 = v59 / 10;
                int v62 = v59 % 10;
                uint64_t v63 = (void *)std::ostream::operator<<();
                sub_188FC78(v63, (uint64_t)" sec (binary refinement search)", 31);
                std::stringbuf::str();
                sub_7246C((uint64_t *)v75, 2u);
                if (v76 < 0) {
                  operator delete(v75[0]);
                }
                uint64_t v79 = v74;
                *(uint64_t *)((char *)&v79 + *(void *)(v74 - 24)) = v73;
                if (v82 < 0) {
                  operator delete(v81);
                }
                std::streambuf::~streambuf();
                std::ostream::~ostream();
                std::ios::~ios();
              }
              else
              {
                int v61 = v59 / 10;
                int v62 = v59 % 10;
              }
              if (v59 < 0) {
                char v64 = -5;
              }
              else {
                char v64 = 5;
              }
              unsigned int v65 = v61 + (((103 * (char)(v64 + v62)) >> 15) & 1) + ((103 * (char)(v64 + v62)) >> 10);
              unsigned int v66 = sub_AF5934(v83, v65 + v44);
              if (*(double *)(a1 + 64) * (double)(int)fabs((double)(int)(10 * (v86 - v66))) >= (double)(int)fabs((double)(int)(10 * (v18 - (v65 + v44)))))
              {
                v57 += v56;
                double v58 = (double)v56 * 0.5;
                if (v58 >= 0.0) {
                  goto LABEL_114;
                }
              }
              else
              {
                unsigned int v67 = v66;
                if (sub_723EC(2u))
                {
                  sub_6BAC((uint64_t)&v79);
                  sub_188FC78(&v79, (uint64_t)"[", 1);
                  uint64_t v68 = (void *)std::ostream::operator<<();
                  sub_188FC78(v68, (uint64_t)"] Journey duration improved from ", 33);
                  unint64_t v69 = (void *)std::ostream::operator<<();
                  sub_188FC78(v69, (uint64_t)" to ", 4);
                  unint64_t v70 = (void *)std::ostream::operator<<();
                  sub_188FC78(v70, (uint64_t)" sec for time shift of ", 23);
                  uint64_t v71 = (void *)std::ostream::operator<<();
                  sub_188FC78(v71, (uint64_t)" sec", 4);
                  std::stringbuf::str();
                  sub_7246C((uint64_t *)v75, 2u);
                  if (v76 < 0) {
                    operator delete(v75[0]);
                  }
                  uint64_t v79 = v74;
                  *(uint64_t *)((char *)&v79 + *(void *)(v74 - 24)) = v73;
                  if (v82 < 0) {
                    operator delete(v81);
                  }
                  std::streambuf::~streambuf();
                  std::ostream::~ostream();
                  std::ios::~ios();
                }
                unsigned int v86 = v67;
                int v18 = v65 + v44;
                double v58 = (double)v56 * 0.5;
                if (v58 >= 0.0)
                {
LABEL_114:
                  if (v58 < 4.50359963e15)
                  {
                    uint64_t v72 = (uint64_t)(v58 + v58) + 1;
                    goto LABEL_94;
                  }
                  goto LABEL_95;
                }
              }
              if (v58 > -4.50359963e15)
              {
                uint64_t v72 = (uint64_t)(v58 + v58);
                if (v72 >= 1) {
                  --v72;
                }
LABEL_94:
                double v58 = (double)(v72 >> 1);
              }
LABEL_95:
              int v56 = (int)v58;
              if (*(_DWORD *)(a1 + 60) > (int)v58) {
                goto LABEL_25;
              }
              continue;
            }
          }
          double v37 = (double)v17 + (double)v17;
          if (v37 >= 0.0)
          {
            if (v37 >= 4.50359963e15) {
              goto LABEL_50;
            }
            uint64_t v46 = (uint64_t)(v37 + v37) + 1;
          }
          else
          {
            if (v37 <= -4.50359963e15) {
              goto LABEL_50;
            }
            uint64_t v46 = (uint64_t)(v37 + v37);
            if (v46 >= 1) {
              --v46;
            }
          }
          double v37 = (double)(v46 >> 1);
LABEL_50:
          int v17 = (int)v37;
          if (*(_DWORD *)(a1 + 56) < (int)v37) {
            goto LABEL_24;
          }
        }
      }
    }
  }
LABEL_26:
  if (v6 != *v7)
  {
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v79);
      sub_188FC78(&v79, (uint64_t)"[", 1);
      long long v19 = (void *)std::ostream::operator<<();
      uint64_t v20 = sub_188FC78(v19, (uint64_t)"] Shifting ", 11);
      char v21 = sub_188FC78(v20, (uint64_t)"departure", 9);
      char v22 = sub_188FC78(v21, (uint64_t)" time from ", 11);
      char v23 = (void *)sub_266E4((uint64_t)v22);
      uint64_t v24 = sub_188FC78(v23, (uint64_t)" to ", 4);
      sub_266E4((uint64_t)v24);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 2u);
      if (v78 < 0) {
        operator delete(__p[0]);
      }
      if (v82 < 0) {
        operator delete(v81);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *(void *)(a1 + 280) = 0x3FF0000000000000;
  }
  int v25 = v85;
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_41;
  }
  int v26 = v85 + 1;
  int v27 = *(_DWORD *)(a1 + 24);
  if (v85 + 1 <= (v27 + 1)) {
    int v26 = v27 + 1;
  }
  if (v85 + 1 < (v27 + 1))
  {
    int v28 = v26 - 1;
    int v29 = 2 * v85 + 3;
    int v30 = v85;
    while (1)
    {
      char v31 = *(_DWORD **)(a1 + 592);
      LODWORD(v79) = (*(_DWORD *)(a1 + 584) << *v31) | v29;
      if (*(_DWORD *)(sub_AF1DB0((uint64_t)(v31 + 2), (unsigned int *)&v79) + 4) != 0x7FFFFFFF) {
        break;
      }
      ++v30;
      v29 += 2;
      if (v28 == v30) {
        goto LABEL_41;
      }
    }
  }
  else
  {
LABEL_41:
    if (*(_DWORD *)(a1 + 24) >= (*(_DWORD *)(a1 + 124) + v25)) {
      int v30 = *(_DWORD *)(a1 + 124) + v25;
    }
    else {
      int v30 = *(_DWORD *)(a1 + 24);
    }
  }
  *(_DWORD *)(a1 + 616) = v30;
  int v32 = *(_DWORD *)(a1 + 120);
  int v33 = v32 / 10;
  int v34 = v32 % 10;
  if (v32 < 0) {
    char v35 = -5;
  }
  else {
    char v35 = 5;
  }
  sub_AF5934(v83, v33 + v5 + (((103 * (char)(v35 + v34)) >> 15) & 1) + ((103 * (char)(v35 + v34)) >> 10));
  return v86;
}

void sub_AF53EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a22 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a29);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_AF5560(uint64_t a1, int a2, int a3)
{
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_8;
  }
  int v6 = a2 + 1;
  int v7 = *(_DWORD *)(a1 + 24);
  if (a2 + 1 <= (v7 + 1)) {
    int v6 = v7 + 1;
  }
  if (a2 + 1 < (v7 + 1))
  {
    int v8 = v6 - 1;
    int v9 = 2 * a2 + 3;
    int v10 = a2;
    while (1)
    {
      unsigned __int16 v11 = *(_DWORD **)(a1 + 592);
      LODWORD(v26[0]) = (*(_DWORD *)(a1 + 584) << *v11) | v9;
      if (*(_DWORD *)(sub_AF1DB0((uint64_t)(v11 + 2), (unsigned int *)v26) + 4) != 0x7FFFFFFF) {
        break;
      }
      ++v10;
      v9 += 2;
      if (v8 == v10) {
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    if (*(_DWORD *)(a1 + 24) >= (*(_DWORD *)(a1 + 124) + a2)) {
      int v10 = *(_DWORD *)(a1 + 124) + a2;
    }
    else {
      int v10 = *(_DWORD *)(a1 + 24);
    }
  }
  long long v12 = *(_OWORD *)(a1 + 104);
  v38[0] = *(_OWORD *)(a1 + 88);
  v38[1] = v12;
  DWORD1(v38[0]) = a3;
  *(_DWORD *)(a1 + 1352) = v10;
  sub_AF5BF0(a1 + 1336, v38);
  sub_AF5E98(a1 + 1336, (uint64_t)v30);
  sub_C50C4C(a1 + 160, a1 + 1864, (uint64_t)&__p);
  if (v29 < 0) {
    operator delete(__p);
  }
  unint64_t v13 = *(void *)(a1 + 2008);
  *(void *)(a1 + 304) -= v13;
  unint64_t v14 = *(void *)(a1 + 2032);
  if (v14 <= v13) {
    unint64_t v14 = v13;
  }
  *(void *)(a1 + 2032) = v14;
  sub_A4D564((uint64_t)v26, (uint64_t)v31, (uint64_t)v32, a1 + 136);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v26);
    sub_188FC78(v26, (uint64_t)"[", 1);
    int v15 = (void *)std::ostream::operator<<();
    sub_188FC78(v15, (uint64_t)"] McSPA scanned ", 16);
    __int16 v16 = (void *)std::ostream::operator<<();
    sub_188FC78(v16, (uint64_t)" stop patterns and obtained ", 28);
    int v17 = (void *)std::ostream::operator<<();
    sub_188FC78(v17, (uint64_t)" journeys in ", 13);
    int v18 = (void *)std::ostream::operator<<();
    long long v19 = sub_188FC78(v18, (uint64_t)" ms using ", 10);
    uint64_t v20 = (void *)sub_38EC58((uint64_t)v19, (unint64_t *)(a1 + 2008));
    sub_188FC78(v20, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v24, 2u);
    if (v25 < 0) {
      operator delete(v24);
    }
    if (v27 < 0) {
      operator delete((void *)v26[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (v36)
  {
    double v37 = v36;
    operator delete(v36);
  }
  if (v35 < 0) {
    operator delete(v34);
  }
  char v21 = (char *)v31;
  if (v31)
  {
    char v22 = v32;
    char v23 = v31;
    if (v32 != v31)
    {
      do
      {
        v22 -= 296;
        sub_9F5E28((uint64_t)&v33, (uint64_t)v22);
      }
      while (v22 != v21);
      char v23 = v31;
    }
    int v32 = v21;
    operator delete(v23);
  }
}

void sub_AF58B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_9F53E0((uint64_t)&a67);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_9F53E0((uint64_t)&a67);
  _Unwind_Resume(a1);
}

uint64_t sub_AF5934(uint64_t *a1, int a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  *(_DWORD *)(v2 + 4) = a2;
  sub_AD8EF4(v3 + 608, (_OWORD *)v2);
  sub_C50C4C(v3 + 160, v3 + 1184, (uint64_t)&v20);
  if (v21 < 0) {
    operator delete(v20);
  }
  unint64_t v4 = *(void *)(v3 + 1328);
  *(void *)(v3 + 304) -= v4;
  unint64_t v5 = *(void *)(v3 + 2024);
  if (v5 <= v4) {
    unint64_t v5 = v4;
  }
  *(void *)(v3 + 2024) = v5;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v18);
    sub_188FC78(v18, (uint64_t)"[", 1);
    int v6 = (void *)std::ostream::operator<<();
    sub_188FC78(v6, (uint64_t)"] Secondary SPA scanned ", 24);
    int v7 = (void *)std::ostream::operator<<();
    sub_188FC78(v7, (uint64_t)" stop patterns and obtained ", 28);
    int v8 = (void *)std::ostream::operator<<();
    sub_188FC78(v8, (uint64_t)" journeys in ", 13);
    int v9 = (void *)std::ostream::operator<<();
    int v10 = sub_188FC78(v9, (uint64_t)" ms using ", 10);
    unsigned __int16 v11 = (void *)sub_38EC58((uint64_t)v10, (unint64_t *)(v3 + 1328));
    sub_188FC78(v11, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (v17 < 0) {
      operator delete(__p);
    }
    if (v19 < 0) {
      operator delete((void *)v18[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unint64_t v12 = *(unsigned int *)(v3 + 1040);
  uint64_t v13 = *(void *)(v3 + 800);
  unint64_t v14 = (*(void *)(v3 + 808) - v13) >> 2;
  if (v14 <= v12)
  {
    sub_5BBEE0(v3 + 800, v12 - v14 + 1);
    uint64_t v13 = *(void *)(v3 + 800);
  }
  return *(unsigned int *)(v13 + 4 * v12);
}

void sub_AF5BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_AF5BF0(uint64_t a1, _OWORD *a2)
{
  sub_725D0((uint64_t)v36);
  long long v4 = a2[1];
  *(_OWORD *)(a1 + 64) = *a2;
  *(_OWORD *)(a1 + 80) = v4;
  sub_AF8428(a1);
  uint64_t v5 = *(void *)(a1 + 32);
  v37[0] = 0x1FFFFFFFDLL;
  *(_DWORD *)(a1 + 416) = sub_AD28B0(v5, v37);
  sub_AF8680(a1);
  if (*(_DWORD *)(a1 + 100) >= 2u)
  {
    uint64_t v6 = 1;
    while (1)
    {
      if (v6)
      {
        char v17 = *(unsigned int **)(a1 + 320);
        int v18 = *(unsigned int **)(a1 + 328);
        if (v17 != v18)
        {
          uint64_t v19 = *(void *)(a1 + 296);
          uint64_t v20 = *(unsigned int **)(a1 + 320);
          do
          {
            unsigned int v21 = *v20++;
            *(void *)(v19 + (((unint64_t)v21 >> 3) & 0x1FFFFFF8)) &= ~(1 << v21);
          }
          while (v20 != v18);
        }
        *(void *)(a1 + 328) = v17;
        sub_AF87EC(a1, v6);
        sub_AF8A8C(a1, v6);
        uint64_t v16 = *(void *)(a1 + 320);
        if (v16 == *(void *)(a1 + 328)) {
          goto LABEL_22;
        }
        uint64_t v15 = *(void *)(a1 + 272);
      }
      else
      {
        int v7 = *(unsigned int **)(a1 + 272);
        int v8 = *(unsigned int **)(a1 + 280);
        if (v7 != v8)
        {
          uint64_t v9 = *(void *)(a1 + 248);
          int v10 = *(unsigned int **)(a1 + 272);
          do
          {
            unsigned int v11 = *v10++;
            *(void *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) &= ~(1 << v11);
          }
          while (v10 != v8);
        }
        *(void *)(a1 + 280) = v7;
        sub_AE1608((void *)a1);
        sub_725D0((uint64_t)v37);
        unint64_t v12 = *(unsigned int **)(a1 + 392);
        uint64_t v13 = *(unsigned int **)(a1 + 400);
        while (v12 != v13)
        {
          unsigned int v14 = *v12++;
          sub_AFCB44(a1, v6, v14);
        }
        *(double *)(a1 + 560) = sub_72688((uint64_t)v37) + *(double *)(a1 + 560);
        uint64_t v15 = *(void *)(a1 + 272);
        if (v15 == *(void *)(a1 + 280)) {
          goto LABEL_22;
        }
        uint64_t v16 = *(void *)(a1 + 320);
      }
      uint64_t v34 = *(void *)(a1 + 208);
      uint64_t v35 = *(void *)(a1 + 176);
      uint64_t v32 = 8 * (*(void *)(a1 + 232) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v33 = *(void *)(a1 + 192);
      uint64_t v22 = *(void *)(a1 + 288);
      uint64_t v23 = 8 * (*(void *)(a1 + 312) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v24 = *(void *)(a1 + 360);
      uint64_t v25 = *(void *)(a1 + 336);
      uint64_t v30 = *(void *)(a1 + 344);
      uint64_t v31 = 8 * (*(void *)(a1 + 264) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v29 = *(void *)(a1 + 392);
      uint64_t v26 = 8 * (*(void *)(a1 + 384) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v27 = *(void *)(a1 + 408);
      unint64_t v28 = v34
          + 12 * v35
          - v33
          + v32
          + v22
          + v31
          - v15
          + v25
          + v23
          + v24
          - (v16
           + v30)
          + v26
          + v27
          - v29
          + sub_BD6170((void *)(a1 + 424))
          + 680;
      if (*(void *)(a1 + 672) > v28) {
        unint64_t v28 = *(void *)(a1 + 672);
      }
      *(void *)(a1 + 672) = v28;
      if (!sub_AFA090(a1) && ++v6 < (unint64_t)*(unsigned int *)(a1 + 100)) {
        continue;
      }
      goto LABEL_22;
    }
  }
  LODWORD(v6) = 1;
LABEL_22:
  sub_AFA3E0(a1);
  *(double *)(a1 + 600) = (double)v6;
  *(double *)(a1 + 552) = sub_72688((uint64_t)v36);
}

std::string *sub_AF5E98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0;
  unint64_t v336 = (uint64_t *)(a2 + 8);
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  HIBYTE(v370) = 0;
  LOBYTE(__p[0]) = 0;
  unint64_t v334 = (std::string *)(a2 + 32);
  sub_C50BD8((char *)(a2 + 32), (long long *)__p);
  if (SHIBYTE(v370) < 0) {
    operator delete(*(void **)__p);
  }
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  uint64_t v4 = a2 + 192;
  *(void *)(v4 + 16) = 0;
  *(unsigned char *)(v4 - 8) = *(unsigned char *)(a1 + 64);
  unsigned int v5 = *(_DWORD *)(a1 + 100);
  if (v5 <= 1) {
    int v6 = 1;
  }
  else {
    int v6 = *(_DWORD *)(a1 + 100);
  }
  int v335 = v6;
  if (v5 >= 2)
  {
    int v8 = (void *)(a1 + 104);
    __asm { FMOV            V0.2D, #1.0 }
    long long v338 = _Q0;
    int v337 = 1;
    uint64_t v342 = a1 + 104;
    uint64_t v343 = a1;
    do
    {
      __p[0] = 0;
      uint64_t v12 = *(void *)(a1 + 192);
      uint64_t v13 = *(unsigned int *)(sub_AFAD84((uint64_t)v8, __p) + 4);
      __p[0] = 0;
      uint64_t v14 = *(void *)(a1 + 192);
      uint64_t v15 = sub_AFAD84((uint64_t)v8, __p);
      sub_AFA9C0((uint64_t)v8, 0, (char *)(v12 + (v13 << 6)), (unsigned char *)(v14 + ((unint64_t)*(unsigned int *)(v15 + 8) << 6)));
      sub_AFC9F0(v8, v337 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * *(_DWORD *)(a1 + 416) + 2, 0);
      __p[0] = 0;
      uint64_t v16 = *(void *)(a1 + 192);
      uint64_t v17 = *(unsigned int *)(sub_AFAD84((uint64_t)v8, __p) + 4);
      __p[0] = 0;
      uint64_t v18 = *(void *)(a1 + 192);
      unsigned int v341 = (unsigned int *)(v16 + (v17 << 6));
      long long v339 = (unsigned int *)(v18 + ((unint64_t)*(unsigned int *)(sub_AFAD84((uint64_t)v8, __p) + 8) << 6));
      for (_ZF = v341 == v339; !_ZF; _ZF = v341 == v339)
      {
        LOWORD(__p[0]) = 0;
        BYTE2(__p[0]) = 0;
        *(void *)&__p[1] = 0;
        *(void *)&__p[3] = 0x7FFFFFFFFFFFFFFFLL;
        int v370 = 0x7FFFFFFF;
        __int16 v371 = 0;
        unint64_t v372 = 0x8000000080000000;
        __int16 v373 = 0;
        unint64_t v374 = 0x8000000080000000;
        int v375 = 0x7FFFFFFF;
        __int16 v376 = 0;
        unint64_t v377 = 0x8000000080000000;
        __int16 v378 = 0;
        unint64_t v379 = 0x8000000080000000;
        __int16 v380 = 0;
        unint64_t v381 = 0xFFFFFFFF00000000;
        int v382 = -1;
        uint64_t v383 = 0;
        long long v385 = 0;
        uint64_t v386 = 0;
        uint64_t v387 = 0;
        int v384 = 0x7FFFFFFF;
        int v388 = 100;
        int v389 = -1;
        long long v390 = v338;
        long long v391 = v338;
        long long v392 = v338;
        long long v393 = 0u;
        long long v394 = 0u;
        long long v395 = 0u;
        long long v396 = 0u;
        uint64_t v20 = *(void *)(a1 + 24);
        long long v397 = 0u;
        long long v398 = 0u;
        if (sub_C259C0(v20 + 3896) && *(void *)(v20 + 3944))
        {
          BOOL v21 = 1;
        }
        else
        {
          uint64_t v22 = *(void *)(a1 + 24);
          BOOL v21 = sub_C259D4(v22 + 3896) && *(void *)(v22 + 3960) != 0;
        }
        BYTE1(__p[0]) = v21;
        uint64_t v23 = *(void *)(a1 + 24);
        if (!sub_C259D4(v23 + 3896))
        {
          __p[1] = 0;
          if (*v341 == -1) {
            goto LABEL_390;
          }
LABEL_23:
          unsigned int v24 = *(_DWORD *)(a1 + 416);
          uint64_t v25 = v341;
          int v344 = v337;
          while (2)
          {
            uint64_t v361 = 0;
            v362 = 0;
            unint64_t v363 = 0;
            unint64_t v366 = 0;
            uint64_t v367 = 0;
            __int16 v365 = 0;
            v368[0] = 1;
            *(void *)&v368[4] = 0x8000000080000000;
            *(_WORD *)&v368[12] = 0;
            v368[14] = 0;
            int v421 = -1;
            if (v25[4] == -1)
            {
LABEL_275:
              char v364 = 1;
              unsigned int v243 = v25[3];
              unsigned int v244 = v25[7];
              uint64_t v245 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), *v25);
              uint64_t v246 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), v24);
              *(_DWORD *)long long v401 = 0;
              *(_DWORD *)&v401[4] = v243;
              *(void *)&v401[12] = v245;
              *(void *)&v401[20] = v246;
              *(_DWORD *)&v401[8] = v244;
              int v410 = 1;
              if (v421)
              {
                if (v421 == 1)
                {
                  *(_OWORD *)int v411 = *(_OWORD *)v401;
                  *(_OWORD *)&v411[12] = *(_OWORD *)&v401[12];
                  goto LABEL_287;
                }
LABEL_286:
                *(_OWORD *)int v411 = *(_OWORD *)v401;
                *(_OWORD *)&v411[12] = *(_OWORD *)&v401[12];
                int v421 = 1;
              }
              else
              {
                if ((void)v418)
                {
                  *((void *)&v418 + 1) = v418;
                  operator delete((void *)v418);
                }
                if ((void)v415)
                {
                  *((void *)&v415 + 1) = v415;
                  operator delete((void *)v415);
                }
                if (v413[0])
                {
                  v413[1] = v413[0];
                  operator delete(v413[0]);
                }
                if (v410)
                {
                  if (v410 == 1) {
                    goto LABEL_286;
                  }
                  int v421 = v410;
                }
                else
                {
                  sub_9F6FA0((uint64_t)v411, (long long *)v401);
                  int v421 = v410;
                  if (!v410)
                  {
                    if ((void)v407)
                    {
                      *((void *)&v407 + 1) = v407;
                      operator delete((void *)v407);
                    }
                    if (v405[0])
                    {
                      v405[1] = v405[0];
                      operator delete(v405[0]);
                    }
                    if ((void)v403)
                    {
                      *((void *)&v403 + 1) = v403;
                      operator delete((void *)v403);
                    }
                  }
                }
              }
LABEL_287:
              unsigned int v24 = *v25;
              uint64_t v240 = (uint64_t)v362;
              if ((unint64_t)v362 >= v363) {
                goto LABEL_288;
              }
LABEL_270:
              *(_DWORD *)(v240 + 160) = v421;
              if (v421 == 1)
              {
                long long v274 = *(_OWORD *)v411;
                *(_OWORD *)(v240 + 12) = *(_OWORD *)&v411[12];
                *(_OWORD *)uint64_t v240 = v274;
                v362 = (char *)(v240 + 168);
                uint64_t v241 = *((void *)&v393 + 1);
                if (*((void *)&v393 + 1) < (unint64_t)v394) {
                  goto LABEL_289;
                }
              }
              else
              {
                if (!v421) {
                  sub_9F6FA0(v240, (long long *)v411);
                }
                v362 = (char *)(v240 + 168);
                uint64_t v241 = *((void *)&v393 + 1);
                if (*((void *)&v393 + 1) < (unint64_t)v394) {
                  goto LABEL_289;
                }
              }
LABEL_274:
              uint64_t v242 = sub_A4CECC((void ***)&v393, (uint64_t)&v361);
              goto LABEL_302;
            }
            long long v345 = xmmword_20E12E0;
            __int16 v346 = 0;
            unint64_t v347 = 0x8000000080000000;
            __int16 v348 = 0;
            *(_OWORD *)long long v349 = xmmword_20EB6B0;
            *(void *)&v349[16] = 0xFFFFFFFF7FFFFFFFLL;
            long long v351 = 0u;
            long long v352 = 0u;
            long long v353 = 0u;
            int v350 = -1;
            int v354 = 0x7FFFFFFF;
            v356 = 0;
            uint64_t v357 = 0;
            v355 = 0;
            char v358 = 1;
            unint64_t v359 = 0x8000000080000000;
            int v360 = 0;
            char v364 = 0;
            uint64_t v27 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 40) + 88), v25[4]);
            *(void *)long long v349 = v27;
            uint64_t v28 = *(void *)(v25 + 1);
            *(_DWORD *)&v349[16] = v25[3];
            *(void *)&v349[8] = v28;
            *(_DWORD *)&v349[20] = *v25;
            unsigned int v29 = *(_DWORD *)&v349[20];
            uint64_t v30 = *(void *)(a1 + 24);
            unint64_t v399 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), v24);
            sub_A1E9A0((uint64_t)v401, v30, v27, v29, 0, 0);
            *(void *)&long long v403 = *(void *)&v402[24] + 12 * *(unsigned int *)&v349[8];
            if (LOBYTE(v405[1])) {
              *(void **)((char *)&v405[1] + 4) = *(void **)&v349[12];
            }
            if (*(void *)&v402[16]) {
              uint64_t v31 = *(unsigned int *)(*(void *)&v402[16]
            }
                                    + 4 * ((*(void *)v402 - *(void *)&v401[24]) >> 4));
            else {
              uint64_t v31 = 0;
            }
            sub_A4C9D4((uint64_t)v401, &v399, v31);
            _CF = *(void *)v402 < *(void *)&v402[8] && *(void *)v402 >= *(void *)&v401[24];
            uint64_t v33 = (*(void *)v402 - *(void *)&v401[24]) >> 4;
            if (!_CF) {
              LODWORD(v33) = -1;
            }
            int v350 = v33;
            uint64_t v34 = *(void *)(a1 + 32);
            uint64_t v35 = (void *)(*(void *)(a1 + 24) + 4136);
            unint64_t v36 = *(void *)v349;
            unsigned int v37 = *(_DWORD *)&v349[20];
            uint64_t v38 = HIDWORD(*(void *)v349);
            if (sub_A10E20(v35, *(int *)&v349[4]))
            {
              int v39 = (int *)sub_A1120C(*(void *)(*v35 + 3944), v36);
            }
            else
            {
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                && __cxa_guard_acquire(&qword_24F7308))
              {
                sub_518C8(0x3B60u, 0x7FCAu);
                dword_24F7300 = v303 | 0x40000000;
                __cxa_guard_release(&qword_24F7308);
              }
              uint64_t v40 = *v35;
              if (dword_24F7300 == v38)
              {
                __int16 v41 = *(unsigned int **)(*(void *)(v40 + 3976) + 72);
                if (!v41)
                {
                  exception = __cxa_allocate_exception(0x40uLL);
                  sub_5E5C(v401, "Realtime stop pattern quad data requested on nullptr buffer");
                  uint64_t v331 = (void *)sub_2F404((uint64_t)exception, (long long *)v401);
                }
                char v42 = (int *)((char *)v41 + *v41);
                unsigned int v43 = (unsigned __int16 *)((char *)v42 - *v42);
                if (*v43 >= 5u && (uint64_t v44 = v43[2]) != 0) {
                  unsigned int v45 = (unsigned int *)((char *)v42 + v44 + *(unsigned int *)((char *)v42 + v44));
                }
                else {
                  unsigned int v45 = 0;
                }
                int v39 = (int *)sub_A1139C(v45, v36);
              }
              else
              {
                int v39 = (int *)sub_A11500(v40 + 24, v36, 0, "stop pattern");
              }
            }
            uint64_t v46 = (unsigned __int16 *)((char *)v39 - *v39);
            if (*v46 >= 9u && (uint64_t v47 = v46[4]) != 0) {
              uint64_t v48 = (unsigned int *)((char *)v39 + v47 + *(unsigned int *)((char *)v39 + v47));
            }
            else {
              uint64_t v48 = 0;
            }
            unsigned __int16 v49 = (void *)sub_A10764(v48, v37);
            uint64_t v50 = 0;
            unint64_t v51 = __ROR8__(*v49, 32);
            uint64_t v52 = *(void *)(v34 + 72) - 1;
            unint64_t v53 = 0xC4CEB9FE1A85EC53
                * ((0xFF51AFD7ED558CCDLL * (v51 ^ (v51 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v51 ^ (v51 >> 33))) >> 33));
            unint64_t v54 = v53 ^ (v53 >> 33);
            uint64_t v55 = *(void *)(v34 + 48);
            uint64_t v56 = v55 + 11;
            uint64_t v57 = -1;
            unint64_t v58 = v54;
LABEL_57:
            uint64_t v59 = v58 & v52;
            unint64_t v60 = (v58 & v52) / 0x30;
            unint64_t v61 = v59 - 48 * v60;
            if (((*(unsigned __int8 *)(v55 + 16 * v60 + (v61 >> 3) + 10) >> (v61 & 7)) & 1) == 0)
            {
              if (v57 == -1) {
                unint64_t v97 = v59;
              }
              else {
                unint64_t v97 = v57;
              }
              goto LABEL_94;
            }
            uint64_t v62 = *(void *)(v55 + 16 * v60);
            if (!*(void *)(v34 + 40)) {
              goto LABEL_73;
            }
            uint64_t v63 = (unsigned __int8 *)(v55 + 16 * v60 + 10);
            if ((unsigned __int16)(v59 - 48 * v60) < 9u)
            {
              __int16 v64 = 0;
              LOBYTE(v69) = v59 - 48 * v60;
              goto LABEL_69;
            }
            __int16 v64 = 0;
            uint64_t v65 = (unsigned __int16)(v59 - 48 * v60 - 9) >> 3;
            if ((unsigned __int16)(v59 - 48 * v60 - 9) >> 3)
            {
              __int16 v66 = 0;
              uint64_t v67 = v65 + 1;
              uint64_t v68 = (v65 + 1) & 0x3FFE;
              unsigned __int16 v69 = v61 - 8 * v68;
              unint64_t v70 = &v63[v68];
              uint64_t v71 = (unsigned __int8 *)(v56 + 16 * v60);
              uint64_t v72 = v68;
              do
              {
                uint64_t v73 = *(v71 - 1);
                int v74 = *v71;
                v71 += 2;
                v64 += byte_20EBFB6[v73];
                v66 += byte_20EBFB6[v74];
                v72 -= 2;
              }
              while (v72);
              v64 += v66;
              if (v67 == v68)
              {
LABEL_68:
                v63 += ((unsigned __int16)(v61 - 9) >> 3) + 1;
LABEL_69:
                char v76 = (_DWORD *)(v62
                               + 12
                               * (unsigned __int16)(v64
                                                  + byte_20EBFB6[~(-1 << v69) & (unint64_t)*v63]));
                if (*(_DWORD *)(v34 + 36) == v76[1] && *(_DWORD *)(v34 + 32) == *v76)
                {
                  if (v57 == -1) {
                    uint64_t v57 = v59;
                  }
                }
                else
                {
LABEL_73:
                  char v78 = (unsigned __int8 *)(v55 + 16 * v60 + 10);
                  if ((unsigned __int16)(v59 - 48 * v60) >= 9u)
                  {
                    __int16 v79 = 0;
                    uint64_t v80 = (unsigned __int16)(v59 - 48 * v60 - 9) >> 3;
                    if ((unsigned __int16)(v59 - 48 * v60 - 9) >> 3)
                    {
                      __int16 v81 = 0;
                      uint64_t v82 = v80 + 1;
                      uint64_t v83 = (v80 + 1) & 0x3FFE;
                      unsigned __int16 v84 = v61 - 8 * v83;
                      int v85 = &v78[v83];
                      unsigned int v86 = (unsigned __int8 *)(v56 + 16 * v60);
                      uint64_t v87 = v83;
                      do
                      {
                        uint64_t v88 = *(v86 - 1);
                        int v89 = *v86;
                        v86 += 2;
                        v79 += byte_20EBFB6[v88];
                        v81 += byte_20EBFB6[v89];
                        v87 -= 2;
                      }
                      while (v87);
                      v79 += v81;
                      if (v82 == v83)
                      {
LABEL_82:
                        __int16 v90 = &v78[((unsigned __int16)(v61 - 9) >> 3) + 1];
                        goto LABEL_83;
                      }
                    }
                    else
                    {
                      unsigned __int16 v84 = v59 - 48 * v60;
                      int v85 = (unsigned __int8 *)(v55 + 16 * v60 + 10);
                    }
                    do
                    {
                      int v91 = *v85++;
                      v79 += byte_20EBFB6[v91];
                      v84 -= 8;
                    }
                    while (v84 > 8u);
                    goto LABEL_82;
                  }
                  __int16 v79 = 0;
                  __int16 v90 = (unsigned __int8 *)(v55 + 16 * v60 + 10);
                  LOBYTE(v84) = v59 - 48 * v60;
LABEL_83:
                  if (v51 == *(void *)(v62
                                        + 12
                                        * (unsigned __int16)(v79
                                                           + byte_20EBFB6[~(-1 << v84) & (unint64_t)*v90])))
                  {
                    if (v59 != -1)
                    {
                      if ((unsigned __int16)(v59 - 48 * v60) < 9u)
                      {
                        __int16 v94 = 0;
                      }
                      else
                      {
                        if ((((_WORD)v59 - 48 * (_WORD)v60 - 8) & 0xFFF8) != 0) {
                          __int16 v92 = 8;
                        }
                        else {
                          __int16 v92 = v59 - 48 * v60 - 8;
                        }
                        unsigned __int16 v93 = ~v92 + v59 - 48 * v60;
                        if (v93 < 8u)
                        {
                          __int16 v94 = 0;
                          unsigned __int16 v95 = v61;
                          uint64_t v96 = (unsigned __int8 *)(v55 + 16 * v60 + 10);
                          goto LABEL_339;
                        }
                        __int16 v275 = 0;
                        __int16 v276 = 0;
                        uint64_t v277 = (v93 >> 3) + 1;
                        unsigned __int16 v95 = v61 - 8 * (((v93 >> 3) + 1) & 0x3FFE);
                        uint64_t v96 = &v78[v277 & 0x3FFE];
                        uint64_t v278 = (unsigned __int8 *)(v55 + 16 * v60 + 11);
                        uint64_t v279 = v277 & 0x3FFE;
                        do
                        {
                          uint64_t v280 = *(v278 - 1);
                          int v281 = *v278;
                          v278 += 2;
                          v275 += byte_20EBFB6[v280];
                          v276 += byte_20EBFB6[v281];
                          v279 -= 2;
                        }
                        while (v279);
                        __int16 v94 = v276 + v275;
                        if ((v277 & 0x3FFE) != v277)
                        {
                          do
                          {
LABEL_339:
                            int v282 = *v96++;
                            v94 += byte_20EBFB6[v282];
                            v95 -= 8;
                          }
                          while (v95 > 8u);
                        }
                        v78 += ((unsigned __int16)(v61 - 9) >> 3) + 1;
                        LOBYTE(v61) = v95;
                      }
                      uint64_t v283 = *(void *)(v34 + 56);
                      unsigned __int16 v284 = v94 + byte_20EBFB6[~(-1 << v61) & (unint64_t)*v78];
                      uint64_t v285 = v55 + 16 * v60;
                      if (*(unsigned __int16 *)(v285 + 8) != v284 || v285 + 16 == v283)
                      {
                        uint64_t v142 = (_DWORD *)(v62 + 12 * v284);
                      }
                      else
                      {
                        uint64_t v287 = v285 + 32;
                        do
                        {
                          if (*(_WORD *)(v287 - 8)) {
                            BOOL v288 = 1;
                          }
                          else {
                            BOOL v288 = v287 == v283;
                          }
                          v287 += 16;
                        }
                        while (!v288);
                        uint64_t v142 = *(_DWORD **)(v287 - 32);
                      }
                      goto LABEL_139;
                    }
                    unint64_t v97 = -1;
LABEL_94:
                    if (!sub_AD2F40(v34, 1))
                    {
                      unint64_t v399 = v51;
                      int v400 = -1;
                      sub_AD3484(v34, (uint64_t *)&v399, v97, v401);
LABEL_138:
                      uint64_t v142 = *(_DWORD **)v402;
                      goto LABEL_139;
                    }
                    uint64_t v98 = 0;
                    unint64_t v399 = v51;
                    int v400 = -1;
                    uint64_t v99 = *(void *)(v34 + 72) - 1;
                    uint64_t v100 = *(void *)(v34 + 48);
                    uint64_t v101 = v100 + 11;
                    uint64_t v102 = -1;
                    while (2)
                    {
                      uint64_t v103 = v54 & v99;
                      unint64_t v104 = (v54 & v99) / 0x30;
                      unint64_t v105 = (v54 & v99) % 0x30;
                      if (((*(unsigned __int8 *)(v100 + 16 * v104 + (v105 >> 3) + 10) >> (v105 & 7)) & 1) == 0)
                      {
                        if (v102 == -1) {
                          unint64_t v141 = v54 & v99;
                        }
                        else {
                          unint64_t v141 = v102;
                        }
                        goto LABEL_137;
                      }
                      uint64_t v106 = *(void *)(v34 + 40);
                      uint64_t v107 = *(void *)(v100 + 16 * v104);
                      if (!v106) {
                        break;
                      }
                      uint64_t v108 = (unsigned __int8 *)(v100 + 16 * v104 + 10);
                      if ((unsigned __int16)((v54 & v99) % 0x30) < 9u)
                      {
                        __int16 v109 = 0;
                        unint64_t v110 = (v54 & v99) % 0x30;
                        goto LABEL_111;
                      }
                      __int16 v109 = 0;
                      unint64_t v110 = (unsigned __int16)(v103 - 48 * v104 - 9) >> 3;
                      if (!((unsigned __int16)(v103 - 48 * v104 - 9) >> 3))
                      {
                        unint64_t v110 = (v54 & v99) % 0x30;
                        uint64_t v114 = (unsigned __int8 *)(v100 + 16 * v104 + 10);
                        do
                        {
LABEL_109:
                          int v119 = *v114++;
                          v109 += byte_20EBFB6[v119];
                          LOWORD(v110) = v110 - 8;
                        }
                        while ((unsigned __int16)v110 > 8u);
                        goto LABEL_110;
                      }
                      __int16 v111 = 0;
                      unint64_t v112 = v110 + 1;
                      uint64_t v113 = (v110 + 1) & 0x3FFE;
                      LOWORD(v110) = v105 - 8 * v113;
                      uint64_t v114 = &v108[v113];
                      unsigned __int16 v115 = (unsigned __int8 *)(v101 + 16 * v104);
                      uint64_t v116 = v113;
                      do
                      {
                        uint64_t v117 = *(v115 - 1);
                        int v118 = *v115;
                        v115 += 2;
                        v109 += byte_20EBFB6[v117];
                        v111 += byte_20EBFB6[v118];
                        v116 -= 2;
                      }
                      while (v116);
                      v109 += v111;
                      if (v112 != v113) {
                        goto LABEL_109;
                      }
LABEL_110:
                      v108 += ((unsigned __int16)(v105 - 9) >> 3) + 1;
LABEL_111:
                      unsigned int v120 = (_DWORD *)(v107
                                      + 12
                                      * (unsigned __int16)(v109
                                                         + byte_20EBFB6[~(-1 << v110) & (unint64_t)*v108]));
                      if (*(_DWORD *)(v34 + 36) == v120[1] && *(_DWORD *)(v34 + 32) == *v120)
                      {
                        if (v102 == -1) {
                          uint64_t v102 = v103;
                        }
LABEL_98:
                        unint64_t v54 = ++v98 + v103;
                        continue;
                      }
                      break;
                    }
                    unint64_t v122 = (unsigned __int8 *)(v100 + 16 * v104 + 10);
                    if ((unsigned __int16)v105 < 9u)
                    {
                      __int16 v123 = 0;
                      uint64_t v134 = (unsigned __int8 *)(v100 + 16 * v104 + 10);
                      LOBYTE(v128) = v105;
                      goto LABEL_125;
                    }
                    __int16 v123 = 0;
                    uint64_t v124 = (unsigned __int16)(v103 - 48 * v104 - 9) >> 3;
                    if (!((unsigned __int16)(v103 - 48 * v104 - 9) >> 3))
                    {
                      unsigned __int16 v128 = v105;
                      uint64_t v129 = (unsigned __int8 *)(v100 + 16 * v104 + 10);
                      do
                      {
LABEL_123:
                        int v135 = *v129++;
                        v123 += byte_20EBFB6[v135];
                        v128 -= 8;
                      }
                      while (v128 > 8u);
                      goto LABEL_124;
                    }
                    __int16 v125 = 0;
                    uint64_t v126 = v124 + 1;
                    uint64_t v127 = (v124 + 1) & 0x3FFE;
                    unsigned __int16 v128 = v105 - 8 * v127;
                    uint64_t v129 = &v122[v127];
                    unint64_t v130 = (unsigned __int8 *)(v101 + 16 * v104);
                    uint64_t v131 = v127;
                    do
                    {
                      uint64_t v132 = *(v130 - 1);
                      int v133 = *v130;
                      v130 += 2;
                      v123 += byte_20EBFB6[v132];
                      v125 += byte_20EBFB6[v133];
                      v131 -= 2;
                    }
                    while (v131);
                    v123 += v125;
                    if (v126 != v127) {
                      goto LABEL_123;
                    }
LABEL_124:
                    uint64_t v134 = &v122[((unsigned __int16)(v105 - 9) >> 3) + 1];
LABEL_125:
                    if (v51 != *(void *)(v107
                                          + 12
                                          * (unsigned __int16)(v123
                                                             + byte_20EBFB6[~(-1 << v128) & (unint64_t)*v134])))
                      goto LABEL_98;
                    if (v103 == -1)
                    {
                      unint64_t v141 = -1;
LABEL_137:
                      sub_AD3484(v34, (uint64_t *)&v399, v141, v401);
                      goto LABEL_138;
                    }
                    if ((unsigned __int16)v105 < 9u)
                    {
                      __int16 v138 = 0;
                    }
                    else
                    {
                      if ((((_WORD)v103 - 48 * (_WORD)v104 - 8) & 0xFFF8) != 0) {
                        __int16 v136 = 8;
                      }
                      else {
                        __int16 v136 = v103 - 48 * v104 - 8;
                      }
                      unsigned __int16 v137 = ~v136 + v103 - 48 * v104;
                      if (v137 < 8u)
                      {
                        __int16 v138 = 0;
                        unsigned __int16 v139 = v105;
                        long long v140 = (unsigned __int8 *)(v100 + 16 * v104 + 10);
                        goto LABEL_358;
                      }
                      __int16 v289 = 0;
                      __int16 v290 = 0;
                      uint64_t v291 = (v137 >> 3) + 1;
                      unsigned __int16 v139 = v105 - 8 * (((v137 >> 3) + 1) & 0x3FFE);
                      long long v140 = &v122[v291 & 0x3FFE];
                      uint64_t v292 = (unsigned __int8 *)(v100 + 16 * v104 + 11);
                      uint64_t v293 = v291 & 0x3FFE;
                      do
                      {
                        uint64_t v294 = *(v292 - 1);
                        int v295 = *v292;
                        v292 += 2;
                        v289 += byte_20EBFB6[v294];
                        v290 += byte_20EBFB6[v295];
                        v293 -= 2;
                      }
                      while (v293);
                      __int16 v138 = v290 + v289;
                      if ((v291 & 0x3FFE) != v291)
                      {
                        do
                        {
LABEL_358:
                          int v296 = *v140++;
                          v138 += byte_20EBFB6[v296];
                          v139 -= 8;
                        }
                        while (v139 > 8u);
                      }
                      v122 += ((unsigned __int16)(v105 - 9) >> 3) + 1;
                      LOBYTE(v105) = v139;
                    }
                    uint64_t v297 = v100 + 16 * v104;
                    uint64_t v298 = *(_DWORD ***)(v34 + 56);
                    unsigned __int16 v299 = v138 + byte_20EBFB6[~(-1 << v105) & (unint64_t)*v122];
                    uint64_t v142 = (_DWORD *)(v107 + 12 * v299);
                    if (*(unsigned __int16 *)(v297 + 8) == v299)
                    {
                      uint64_t v300 = v297 + 16;
                      if ((_DWORD **)(v297 + 16) != v298)
                      {
                        while (1)
                        {
                          unint64_t v301 = (_DWORD **)v300;
                          if (*(_WORD *)(v300 + 8)) {
                            break;
                          }
                          v300 += 16;
                          if (v301 + 2 == v298)
                          {
                            uint64_t v297 = *(void *)(v34 + 56);
                            goto LABEL_366;
                          }
                        }
                        uint64_t v297 = v300;
LABEL_366:
                        uint64_t v142 = *v301;
                        goto LABEL_367;
                      }
                    }
                    else
                    {
LABEL_367:
                      if ((_DWORD **)v297 != v298 && v106)
                      {
                        do
                        {
                          if (*(_DWORD *)(v34 + 36) != v142[1] || *(_DWORD *)(v34 + 32) != *v142) {
                            break;
                          }
                          v142 += 3;
                          if (v142 == (_DWORD *)(*(void *)v297 + 12 * *(unsigned __int16 *)(v297 + 8)))
                          {
                            v297 += 16;
                            if ((_DWORD **)v297 != v298)
                            {
                              do
                              {
                                if (*(_WORD *)(v297 + 8))
                                {
                                  uint64_t v142 = *(_DWORD **)v297;
                                  goto LABEL_371;
                                }
                                v297 += 16;
                              }
                              while ((_DWORD **)v297 != v298);
                              uint64_t v142 = *(_DWORD **)(v297 - 16);
                            }
                            break;
                          }
LABEL_371:
                          ;
                        }
                        while ((_DWORD **)v297 != v298);
                      }
                    }
LABEL_139:
                    unsigned int v24 = v142[2];
                    if (v24 == -1)
                    {
                      int v143 = *(_DWORD *)(v34 + 112);
                      *(_DWORD *)(v34 + 112) = v143 + 1;
                      v142[2] = v143;
                      int v145 = *(char **)(v34 + 96);
                      unint64_t v144 = *(void *)(v34 + 104);
                      if ((unint64_t)v145 < v144)
                      {
                        *(void *)int v145 = v51;
                        uint64_t v146 = (uint64_t)(v145 + 8);
                        goto LABEL_164;
                      }
                      uint64_t v147 = (char **)(v34 + 88);
                      __int16 v148 = *(char **)(v34 + 88);
                      uint64_t v149 = (char *)(v145 - v148);
                      uint64_t v150 = (v145 - v148) >> 3;
                      unint64_t v151 = v150 + 1;
                      if ((unint64_t)(v150 + 1) >> 61) {
                        sub_2E00();
                      }
                      uint64_t v152 = v144 - (void)v148;
                      if (v152 >> 2 > v151) {
                        unint64_t v151 = v152 >> 2;
                      }
                      if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v153 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v153 = v151;
                      }
                      if (v153)
                      {
                        if (v153 >> 61) {
                          sub_188D718();
                        }
                        unint64_t v154 = v153;
                        uint64_t v155 = operator new(8 * v153);
                        uint64_t v147 = (char **)(v34 + 88);
                        unint64_t v153 = v154;
                        uint64_t v149 = (char *)(v145 - v148);
                        uint64_t v156 = (unint64_t *)&v155[8 * v150];
                        *uint64_t v156 = v51;
                        uint64_t v146 = (uint64_t)(v156 + 1);
                        if (v145 == v148) {
                          goto LABEL_162;
                        }
LABEL_155:
                        unint64_t v157 = v145 - 8 - v148;
                        if (v157 < 0x58) {
                          goto LABEL_435;
                        }
                        if ((unint64_t)(v145 - v155 - (void)v149) < 0x20) {
                          goto LABEL_435;
                        }
                        uint64_t v158 = (v157 >> 3) + 1;
                        uint64_t v159 = 8 * (v158 & 0x3FFFFFFFFFFFFFFCLL);
                        uint64_t v160 = &v145[-v159];
                        uint64_t v156 = (unint64_t *)((char *)v156 - v159);
                        unsigned __int16 v161 = &v155[8 * v150 - 16];
                        uint64_t v162 = v145 - 16;
                        uint64_t v163 = v158 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          long long v164 = *(_OWORD *)v162;
                          *(v161 - 1) = *((_OWORD *)v162 - 1);
                          *unsigned __int16 v161 = v164;
                          v161 -= 2;
                          v162 -= 32;
                          v163 -= 4;
                        }
                        while (v163);
                        int v145 = v160;
                        if (v158 != (v158 & 0x3FFFFFFFFFFFFFFCLL))
                        {
LABEL_435:
                          do
                          {
                            unint64_t v165 = *((void *)v145 - 1);
                            v145 -= 8;
                            *--uint64_t v156 = v165;
                          }
                          while (v145 != v148);
                        }
                        int v145 = *v147;
                      }
                      else
                      {
                        uint64_t v155 = 0;
                        uint64_t v156 = (unint64_t *)(8 * v150);
                        *(void *)(8 * v150) = v51;
                        uint64_t v146 = 8 * v150 + 8;
                        if (v145 != v148) {
                          goto LABEL_155;
                        }
                      }
LABEL_162:
                      *(void *)(v34 + 88) = v156;
                      *(void *)(v34 + 96) = v146;
                      *(void *)(v34 + 104) = &v155[8 * v153];
                      if (v145) {
                        operator delete(v145);
                      }
LABEL_164:
                      *(void *)(v34 + 96) = v146;
                      unsigned int v24 = v142[2];
                    }
                    uint64_t v166 = (void *)(*(void *)(v343 + 24) + 4136);
                    unint64_t v167 = *(void *)v349;
                    unsigned int v168 = *(_DWORD *)&v349[20];
                    uint64_t v169 = HIDWORD(*(void *)v349);
                    if (sub_A10E20(v166, *(int *)&v349[4]))
                    {
                      uint64_t v170 = (int *)sub_A1120C(*(void *)(*v166 + 3944), v167);
                    }
                    else
                    {
                      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                        && __cxa_guard_acquire(&qword_24F7308))
                      {
                        sub_518C8(0x3B60u, 0x7FCAu);
                        dword_24F7300 = v304 | 0x40000000;
                        __cxa_guard_release(&qword_24F7308);
                      }
                      uint64_t v171 = *v166;
                      if (dword_24F7300 == v169)
                      {
                        unint64_t v172 = *(unsigned int **)(*(void *)(v171 + 3976) + 72);
                        if (!v172)
                        {
                          int v328 = __cxa_allocate_exception(0x40uLL);
                          sub_5E5C(v401, "Realtime stop pattern quad data requested on nullptr buffer");
                          unint64_t v329 = (void *)sub_2F404((uint64_t)v328, (long long *)v401);
                        }
                        int v173 = (int *)((char *)v172 + *v172);
                        unint64_t v174 = (unsigned __int16 *)((char *)v173 - *v173);
                        if (*v174 >= 5u && (uint64_t v175 = v174[2]) != 0) {
                          __int16 v176 = (unsigned int *)((char *)v173 + v175 + *(unsigned int *)((char *)v173 + v175));
                        }
                        else {
                          __int16 v176 = 0;
                        }
                        uint64_t v170 = (int *)sub_A1139C(v176, v167);
                      }
                      else
                      {
                        uint64_t v170 = (int *)sub_A11500(v171 + 24, v167, 0, "stop pattern");
                      }
                    }
                    __int16 v177 = (unsigned __int16 *)((char *)v170 - *v170);
                    if (*v177 >= 9u && (uint64_t v178 = v177[4]) != 0) {
                      uint64_t v179 = (unsigned int *)((char *)v170 + v178 + *(unsigned int *)((char *)v170 + v178));
                    }
                    else {
                      uint64_t v179 = 0;
                    }
                    DWORD1(v345) = 10 * *(_DWORD *)(sub_A10764(v179, v168) + 8);
                    uint64_t v180 = *(void *)(v343 + 24);
                    unint64_t v181 = *(void *)v349;
                    int v182 = (uint64_t *)(v180 + 4136);
                    unsigned int v183 = *(_DWORD *)&v349[20];
                    int v184 = *(_DWORD *)&v349[8];
                    uint64_t v185 = HIDWORD(*(void *)v349);
                    if (sub_A10E20((void *)(v180 + 4136), *(int *)&v349[4]))
                    {
                      unsigned __int16 v186 = *(unsigned int **)(*(void *)(*v182 + 3944) + 72);
                      if (!v186)
                      {
                        uint64_t v322 = __cxa_allocate_exception(0x40uLL);
                        sub_5E5C(v401, "Incident stop pattern quad data requested on nullptr buffer");
                        int v323 = (void *)sub_2F404((uint64_t)v322, (long long *)v401);
                      }
                      goto LABEL_186;
                    }
                    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                      && __cxa_guard_acquire(&qword_24F7308))
                    {
                      sub_518C8(0x3B60u, 0x7FCAu);
                      dword_24F7300 = v305 | 0x40000000;
                      __cxa_guard_release(&qword_24F7308);
                    }
                    uint64_t v187 = *v182;
                    if (dword_24F7300 != v185)
                    {
                      int v188 = sub_A10B80(v187 + 24, v181, 0);
                      uint64_t v189 = &v188[-*(int *)v188];
                      if (*(unsigned __int16 *)v189 >= 5u) {
                        goto LABEL_187;
                      }
LABEL_190:
                      uint64_t v190 = 0;
                      goto LABEL_191;
                    }
                    unsigned __int16 v186 = *(unsigned int **)(*(void *)(v187 + 3976) + 72);
                    if (!v186)
                    {
                      char v332 = __cxa_allocate_exception(0x40uLL);
                      sub_5E5C(v401, "Realtime stop pattern quad data requested on nullptr buffer");
                      char v333 = (void *)sub_2F404((uint64_t)v332, (long long *)v401);
                    }
LABEL_186:
                    int v188 = (char *)v186 + *v186;
                    uint64_t v189 = &v188[-*(int *)v188];
                    if (*(unsigned __int16 *)v189 < 5u) {
                      goto LABEL_190;
                    }
LABEL_187:
                    uint64_t v190 = *((unsigned __int16 *)v189 + 2);
                    if (v190) {
                      v190 += (uint64_t)&v188[*(unsigned int *)&v188[v190]];
                    }
LABEL_191:
                    unsigned int v191 = (int *)(v190
                                 + 4 * v181
                                 + 4
                                 + *(unsigned int *)(v190 + 4 * v181 + 4));
                    int v192 = (unsigned __int16 *)((char *)v191 - *v191);
                    if (*v192 >= 9u && (uint64_t v193 = v192[4]) != 0) {
                      int v194 = (unsigned int *)((char *)v191 + v193 + *(unsigned int *)((char *)v191 + v193));
                    }
                    else {
                      int v194 = 0;
                    }
                    uint64_t v195 = sub_A10764(v194, v183);
                    unint64_t v196 = &v188[-*(int *)v188];
                    if (*(unsigned __int16 *)v196 < 0xBu)
                    {
                      uint64_t v197 = 0;
                      unint64_t v198 = (unsigned __int16 *)((char *)v191 - *v191);
                      if (*v198 >= 0x11u) {
                        goto LABEL_199;
                      }
LABEL_202:
                      LODWORD(v199) = 0;
                      goto LABEL_203;
                    }
                    uint64_t v197 = (unsigned int *)*((unsigned __int16 *)v196 + 5);
                    if (v197) {
                      uint64_t v197 = (unsigned int *)((char *)v197
                    }
                                            + (void)v188
                                            + *(unsigned int *)((char *)v197 + (void)v188));
                    unint64_t v198 = (unsigned __int16 *)((char *)v191 - *v191);
                    if (*v198 < 0x11u) {
                      goto LABEL_202;
                    }
LABEL_199:
                    uint64_t v199 = v198[8];
                    if (v198[8]) {
                      LODWORD(v199) = *(int *)((char *)v191 + v199);
                    }
LABEL_203:
                    uint64_t v200 = sub_A108C4(v197, v199+ *(int *)((char *)v191 + v198[2] + *(unsigned int *)((char *)v191 + v198[2])) * v184+ *(unsigned __int8 *)(v195 + 14));
                    if (v200)
                    {
                      uint64_t v201 = __ROR8__(*(void *)v200, 32);
                      int v202 = *(_DWORD *)(v200 + 8);
                    }
                    else
                    {
                      int v202 = 0;
                      uint64_t v201 = 0xFFFFFFFFLL;
                    }
                    *(void *)long long v401 = v201;
                    *(_DWORD *)&v401[8] = v202;
                    int v203 = (int *)sub_A11094((void *)(v180 + 4136), v181);
                    uint64_t v204 = (unsigned __int16 *)((char *)v203 - *v203);
                    if (*v204 >= 9u && (uint64_t v205 = v204[4]) != 0) {
                      unsigned int v206 = (unsigned int *)((char *)v203 + v205 + *(unsigned int *)((char *)v203 + v205));
                    }
                    else {
                      unsigned int v206 = 0;
                    }
                    unsigned int v207 = *(unsigned __int16 *)(sub_A10764(v206, v183) + 12);
                    if (*(_DWORD *)&v349[12] == -1) {
                      int v208 = 0x7FFFFFFF;
                    }
                    else {
                      int v208 = *(_DWORD *)&v349[16];
                    }
                    *((void *)&v345 + 1) = sub_A0FAA0((uint64_t *)(v180 + 4184), (unsigned int *)v401, v207, v208);
                    __int16 v346 = v209;
                    uint64_t v210 = *(void *)(v343 + 24);
                    unint64_t v211 = *(void *)v349;
                    uint64_t v212 = (uint64_t *)(v210 + 4136);
                    unsigned int v213 = v350;
                    int v214 = *(_DWORD *)&v349[8];
                    uint64_t v215 = HIDWORD(*(void *)v349);
                    if (sub_A10E20((void *)(v210 + 4136), *(int *)&v349[4]))
                    {
                      uint64_t v216 = *(unsigned int **)(*(void *)(*v212 + 3944) + 72);
                      if (!v216)
                      {
                        int v324 = __cxa_allocate_exception(0x40uLL);
                        sub_5E5C(v401, "Incident stop pattern quad data requested on nullptr buffer");
                        int v325 = (void *)sub_2F404((uint64_t)v324, (long long *)v401);
                      }
                      goto LABEL_219;
                    }
                    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                      && __cxa_guard_acquire(&qword_24F7308))
                    {
                      sub_518C8(0x3B60u, 0x7FCAu);
                      dword_24F7300 = v306 | 0x40000000;
                      __cxa_guard_release(&qword_24F7308);
                    }
                    uint64_t v217 = *v212;
                    if (dword_24F7300 != v215)
                    {
                      uint64_t v218 = sub_A10B80(v217 + 24, v211, 0);
                      int v219 = &v218[-*(int *)v218];
                      if (*(unsigned __int16 *)v219 >= 5u) {
                        goto LABEL_220;
                      }
LABEL_223:
                      uint64_t v220 = 0;
                      goto LABEL_224;
                    }
                    uint64_t v216 = *(unsigned int **)(*(void *)(v217 + 3976) + 72);
                    if (!v216)
                    {
                      int v326 = __cxa_allocate_exception(0x40uLL);
                      sub_5E5C(v401, "Realtime stop pattern quad data requested on nullptr buffer");
                      int v327 = (void *)sub_2F404((uint64_t)v326, (long long *)v401);
                    }
LABEL_219:
                    uint64_t v218 = (char *)v216 + *v216;
                    int v219 = &v218[-*(int *)v218];
                    if (*(unsigned __int16 *)v219 < 5u) {
                      goto LABEL_223;
                    }
LABEL_220:
                    uint64_t v220 = *((unsigned __int16 *)v219 + 2);
                    if (v220) {
                      v220 += (uint64_t)&v218[*(unsigned int *)&v218[v220]];
                    }
LABEL_224:
                    uint64_t v221 = (int *)(v220
                                 + 4 * v211
                                 + 4
                                 + *(unsigned int *)(v220 + 4 * v211 + 4));
                    unsigned __int16 v222 = (unsigned __int16 *)((char *)v221 - *v221);
                    if (*v222 >= 9u && (uint64_t v223 = v222[4]) != 0) {
                      __int16 v224 = (unsigned int *)((char *)v221 + v223 + *(unsigned int *)((char *)v221 + v223));
                    }
                    else {
                      __int16 v224 = 0;
                    }
                    uint64_t v225 = sub_A10764(v224, v213);
                    int v226 = &v218[-*(int *)v218];
                    if (*(unsigned __int16 *)v226 < 0xBu)
                    {
                      uint64_t v227 = 0;
                      uint64_t v228 = (unsigned __int16 *)((char *)v221 - *v221);
                      if (*v228 >= 0x11u) {
                        goto LABEL_232;
                      }
LABEL_235:
                      LODWORD(v229) = 0;
                      goto LABEL_236;
                    }
                    uint64_t v227 = (unsigned int *)*((unsigned __int16 *)v226 + 5);
                    if (v227) {
                      uint64_t v227 = (unsigned int *)((char *)v227
                    }
                                            + (void)v218
                                            + *(unsigned int *)((char *)v227 + (void)v218));
                    uint64_t v228 = (unsigned __int16 *)((char *)v221 - *v221);
                    if (*v228 < 0x11u) {
                      goto LABEL_235;
                    }
LABEL_232:
                    uint64_t v229 = v228[8];
                    if (v228[8]) {
                      LODWORD(v229) = *(int *)((char *)v221 + v229);
                    }
LABEL_236:
                    uint64_t v230 = sub_A108C4(v227, v229+ *(int *)((char *)v221 + v228[2] + *(unsigned int *)((char *)v221 + v228[2])) * v214+ *(unsigned __int8 *)(v225 + 14));
                    if (v230)
                    {
                      uint64_t v231 = __ROR8__(*(void *)v230, 32);
                      int v232 = *(_DWORD *)(v230 + 8);
                    }
                    else
                    {
                      int v232 = 0;
                      uint64_t v231 = 0xFFFFFFFFLL;
                    }
                    *(void *)long long v401 = v231;
                    *(_DWORD *)&v401[8] = v232;
                    int v233 = (int *)sub_A11094((void *)(v210 + 4136), v211);
                    unint64_t v234 = (unsigned __int16 *)((char *)v233 - *v233);
                    if (*v234 >= 9u && (uint64_t v235 = v234[4]) != 0) {
                      uint64_t v236 = (unsigned int *)((char *)v233 + v235 + *(unsigned int *)((char *)v233 + v235));
                    }
                    else {
                      uint64_t v236 = 0;
                    }
                    unsigned int v237 = *(unsigned __int16 *)(sub_A10764(v236, v213) + 12);
                    if (*(_DWORD *)&v349[12] == -1) {
                      int v238 = 0x7FFFFFFF;
                    }
                    else {
                      int v238 = *(_DWORD *)&v349[16];
                    }
                    unint64_t v347 = sub_A0FDF4((uint64_t *)(v210 + 4184), (unsigned int *)v401, v237, v238);
                    __int16 v348 = v239;
                    int v410 = -1;
                    sub_9F6FA0((uint64_t)v401, &v345);
                    int v410 = 0;
                    if (v421)
                    {
                      sub_9F6FA0((uint64_t)v411, (long long *)v401);
                      a1 = v343;
                      int v421 = v410;
                      if (!v410) {
                        goto LABEL_256;
                      }
                    }
                    else
                    {
                      *(_OWORD *)int v411 = *(_OWORD *)v401;
                      *(_OWORD *)&v411[16] = *(_OWORD *)&v401[16];
                      v412[0] = *(_OWORD *)v402;
                      *(_OWORD *)((char *)v412 + 12) = *(_OWORD *)&v402[12];
                      a1 = v343;
                      if (v413[0])
                      {
                        v413[1] = v413[0];
                        operator delete(v413[0]);
                      }
                      *(_OWORD *)uint64_t v413 = v403;
                      uint64_t v414 = v404;
                      uint64_t v404 = 0;
                      long long v403 = 0uLL;
                      if ((void)v415)
                      {
                        *((void *)&v415 + 1) = v415;
                        operator delete((void *)v415);
                      }
                      long long v415 = *(_OWORD *)v405;
                      v416 = v405[2];
                      memset(v405, 0, sizeof(v405));
                      int v417 = v406;
                      if ((void)v418)
                      {
                        *((void *)&v418 + 1) = v418;
                        operator delete((void *)v418);
                      }
                      long long v418 = v407;
                      uint64_t v419 = v408;
                      uint64_t v408 = 0;
                      long long v407 = 0uLL;
                      long long v420 = v409;
                      if (!v410)
                      {
LABEL_256:
                        if ((void)v407)
                        {
                          *((void *)&v407 + 1) = v407;
                          operator delete((void *)v407);
                        }
                        if (v405[0])
                        {
                          v405[1] = v405[0];
                          operator delete(v405[0]);
                        }
                        if ((void)v403)
                        {
                          *((void *)&v403 + 1) = v403;
                          operator delete((void *)v403);
                        }
                      }
                    }
                    if (v355)
                    {
                      v356 = v355;
                      operator delete(v355);
                    }
                    if (*((void *)&v352 + 1))
                    {
                      *(void *)&long long v353 = *((void *)&v352 + 1);
                      operator delete(*((void **)&v352 + 1));
                    }
                    if ((void)v351)
                    {
                      *((void *)&v351 + 1) = v351;
                      operator delete((void *)v351);
                    }
                    if (v25[4] == -1) {
                      goto LABEL_275;
                    }
                    uint64_t v240 = (uint64_t)v362;
                    if ((unint64_t)v362 < v363) {
                      goto LABEL_270;
                    }
LABEL_288:
                    v362 = (char *)sub_A4CBF4((uint64_t *)&v361, (uint64_t)v411);
                    uint64_t v241 = *((void *)&v393 + 1);
                    if (*((void *)&v393 + 1) >= (unint64_t)v394) {
                      goto LABEL_274;
                    }
LABEL_289:
                    *(void *)uint64_t v241 = 0;
                    *(void *)(v241 + 8) = 0;
                    *(void *)(v241 + 16) = 0;
                    uint64_t v247 = (char *)v361;
                    uint64_t v248 = v362;
                    int64_t v249 = v362 - (unsigned char *)v361;
                    if (v362 != v361)
                    {
                      unint64_t v250 = 0xCF3CF3CF3CF3CF3DLL * (v249 >> 3);
                      if (v250 >= 0x186186186186187) {
                        sub_2E00();
                      }
                      uint64_t v251 = (char *)operator new(v249);
                      uint64_t v252 = 0;
                      *(void *)uint64_t v241 = v251;
                      *(void *)(v241 + 8) = v251;
                      *(void *)(v241 + 16) = &v251[168 * v250];
                      do
                      {
                        unsigned int v254 = (long long *)&v251[v252];
                        uint64_t v255 = (long long *)&v247[v252];
                        *(_DWORD *)&v251[v252 + 160] = *(_DWORD *)&v247[v252 + 160];
                        int v256 = *(_DWORD *)&v247[v252 + 160];
                        if (v256 == 1)
                        {
                          long long v253 = *v255;
                          *(long long *)((char *)v254 + 12) = *(long long *)((char *)v255 + 12);
                          long long *v254 = v253;
                        }
                        else if (!v256)
                        {
                          sub_9F6FA0((uint64_t)v254, v255);
                        }
                        v252 += 168;
                      }
                      while (&v247[v252] != v248);
                      *(void *)(v241 + 8) = &v251[v252];
                    }
                    char v257 = v364;
                    *(void *)(v241 + 32) = 0;
                    *(unsigned char *)(v241 + 24) = v257;
                    *(void *)(v241 + 40) = 0;
                    *(void *)(v241 + 48) = 0;
                    char v258 = v365;
                    uint64_t v259 = v366 - (unsigned char *)v365;
                    if (v366 != v365)
                    {
                      if (0xCCCCCCCCCCCCCCCDLL * (v259 >> 3) >= 0x666666666666667) {
                        sub_2E00();
                      }
                      int v260 = (char *)operator new(v366 - (unsigned char *)v365);
                      *(void *)(v241 + 32) = v260;
                      *(void *)(v241 + 40) = v260;
                      unint64_t v261 = &v260[8 * (v259 >> 3)];
                      *(void *)(v241 + 48) = v261;
                      memcpy(v260, v258, v259 - 7);
                      *(void *)(v241 + 40) = v261;
                    }
                    uint64_t v262 = *(void *)v368;
                    *(void *)(v241 + 63) = *(void *)&v368[7];
                    *(void *)(v241 + 56) = v262;
                    uint64_t v242 = (char *)(v241 + 72);
LABEL_302:
                    *((void *)&v393 + 1) = v242;
                    unsigned int v264 = v25[5];
                    *(_DWORD *)long long v401 = v344 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * v24 + 1;
                    int v263 = *(_DWORD *)v401;
                    uint64_t v265 = *(void *)(a1 + 192);
                    uint64_t v266 = *(unsigned int *)(sub_AFAD84(v342, (unsigned int *)v401) + 4);
                    *(_DWORD *)long long v401 = v263;
                    uint64_t v267 = *(void *)(a1 + 192);
                    uint64_t v25 = (unsigned int *)(v265 + (v266 << 6));
                    int v268 = (unsigned int *)(v267
                                          + ((unint64_t)*(unsigned int *)(sub_AFAD84(v342, (unsigned int *)v401)
                                                                               + 8) << 6));
                    if (v25 == v268)
                    {
LABEL_305:
                      uint64_t v25 = 0;
                    }
                    else
                    {
                      while (v25[6] != v264)
                      {
                        v25 += 16;
                        if (v25 == v268) {
                          goto LABEL_305;
                        }
                      }
                    }
                    if (!v421)
                    {
                      if ((void)v418)
                      {
                        *((void *)&v418 + 1) = v418;
                        operator delete((void *)v418);
                      }
                      if ((void)v415)
                      {
                        *((void *)&v415 + 1) = v415;
                        operator delete((void *)v415);
                      }
                      if (v413[0])
                      {
                        v413[1] = v413[0];
                        operator delete(v413[0]);
                      }
                    }
                    if (v365)
                    {
                      unint64_t v366 = v365;
                      operator delete(v365);
                    }
                    unint64_t v269 = (char *)v361;
                    if (v361)
                    {
                      uint64_t v270 = v362;
                      uint64_t v26 = v361;
                      if (v362 != v361)
                      {
                        do
                        {
                          if (!*((_DWORD *)v270 - 2))
                          {
                            uint64_t v271 = (void *)*((void *)v270 - 6);
                            if (v271)
                            {
                              *((void *)v270 - 5) = v271;
                              operator delete(v271);
                            }
                            unint64_t v272 = (void *)*((void *)v270 - 10);
                            if (v272)
                            {
                              *((void *)v270 - 9) = v272;
                              operator delete(v272);
                            }
                            int v273 = (void *)*((void *)v270 - 13);
                            if (v273)
                            {
                              *((void *)v270 - 12) = v273;
                              operator delete(v273);
                            }
                          }
                          v270 -= 168;
                        }
                        while (v270 != v269);
                        uint64_t v26 = v361;
                      }
                      v362 = v269;
                      operator delete(v26);
                    }
                    --v344;
                    if (*v25 == -1) {
                      goto LABEL_390;
                    }
                    continue;
                  }
                }
                unint64_t v58 = ++v50 + v59;
                goto LABEL_57;
              }
            }
            else
            {
              unsigned __int16 v69 = v59 - 48 * v60;
              unint64_t v70 = (unsigned __int8 *)(v55 + 16 * v60 + 10);
            }
            break;
          }
          do
          {
            int v75 = *v70++;
            v64 += byte_20EBFB6[v75];
            v69 -= 8;
          }
          while (v69 > 8u);
          goto LABEL_68;
        }
        __p[1] = 2 * (*(void *)(v23 + 3960) != 0);
        if (*v341 != -1) {
          goto LABEL_23;
        }
LABEL_390:
        unint64_t v307 = v393;
        if ((void)v393 != *((void *)&v393 + 1))
        {
          unint64_t v308 = *((void *)&v393 + 1) - 72;
          if (*((void *)&v393 + 1) - 72 > (unint64_t)v393)
          {
            do
            {
              sub_A4D0C8(v307, v308);
              v307 += 72;
              v308 -= 72;
            }
            while (v307 < v308);
          }
        }
        sub_A29D50((uint64_t)__p);
        unint64_t v309 = *(void *)(a2 + 16);
        if (v309 >= *(void *)(a2 + 24))
        {
          *(void *)(a2 + 16) = sub_A4D268(v336, (long long *)__p);
          uint64_t v310 = (void *)*((void *)&v397 + 1);
          if (!*((void *)&v397 + 1)) {
            goto LABEL_398;
          }
LABEL_397:
          *(void *)&long long v398 = v310;
          operator delete(v310);
          goto LABEL_398;
        }
        sub_9F68D4(*(void *)(a2 + 16), (long long *)__p);
        *(void *)(a2 + 16) = v309 + 296;
        *(void *)(a2 + 16) = v309 + 296;
        uint64_t v310 = (void *)*((void *)&v397 + 1);
        if (*((void *)&v397 + 1)) {
          goto LABEL_397;
        }
LABEL_398:
        if ((void)v396)
        {
          *((void *)&v396 + 1) = v396;
          operator delete((void *)v396);
        }
        if (*((void *)&v394 + 1))
        {
          *(void *)&long long v395 = *((void *)&v394 + 1);
          operator delete(*((void **)&v394 + 1));
        }
        int v311 = (void **)v393;
        if ((void)v393)
        {
          uint64_t v312 = *((void *)&v393 + 1);
          int v313 = (void *)v393;
          if (*((void *)&v393 + 1) != (void)v393)
          {
            do
            {
              int v315 = *(void **)(v312 - 40);
              if (v315)
              {
                *(void *)(v312 - 32) = v315;
                operator delete(v315);
              }
              uint64_t v316 = (void **)(v312 - 72);
              uint64_t v317 = *(void *)(v312 - 72);
              if (v317)
              {
                uint64_t v318 = *(void *)(v312 - 64);
                unint64_t v314 = *(void **)(v312 - 72);
                if (v318 != v317)
                {
                  do
                  {
                    if (!*(_DWORD *)(v318 - 8))
                    {
                      uint64_t v319 = *(void **)(v318 - 48);
                      if (v319)
                      {
                        *(void *)(v318 - 40) = v319;
                        operator delete(v319);
                      }
                      long long v320 = *(void **)(v318 - 80);
                      if (v320)
                      {
                        *(void *)(v318 - 72) = v320;
                        operator delete(v320);
                      }
                      unsigned int v321 = *(void **)(v318 - 104);
                      if (v321)
                      {
                        *(void *)(v318 - 96) = v321;
                        operator delete(v321);
                      }
                    }
                    v318 -= 168;
                  }
                  while (v318 != v317);
                  unint64_t v314 = *v316;
                }
                *(void *)(v312 - 64) = v317;
                operator delete(v314);
              }
              v312 -= 72;
            }
            while (v316 != v311);
            int v313 = (void *)v393;
          }
          *((void *)&v393 + 1) = v311;
          operator delete(v313);
        }
        if (SHIBYTE(v387) < 0) {
          operator delete(v385);
        }
        v341 += 16;
      }
      ++v337;
      int v8 = (void *)v342;
    }
    while (v337 != v335);
  }
  uint64_t result = std::string::operator=(v334, (const std::string *)(a1 + 528));
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a1 + 616);
  *(_OWORD *)(a2 + 136) = *(_OWORD *)(a1 + 632);
  *(_OWORD *)(a2 + 152) = *(_OWORD *)(a1 + 648);
  *(_OWORD *)(a2 + 168) = *(_OWORD *)(a1 + 664);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 552);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 568);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 584);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 600);
  return result;
}

void sub_AF7F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char *a62,uint64_t a63)
{
  __cxa_guard_abort(&qword_24F7308);
  if (__p)
  {
    operator delete(__p);
    uint64_t v67 = a52;
    if (!a52)
    {
LABEL_3:
      uint64_t v68 = a49;
      if (!a49) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v67 = a52;
    if (!a52) {
      goto LABEL_3;
    }
  }
  operator delete(v67);
  uint64_t v68 = a49;
  if (!a49)
  {
LABEL_4:
    if (LODWORD(STACK[0x470])) {
      goto LABEL_13;
    }
LABEL_9:
    unsigned __int16 v69 = (void *)STACK[0x448];
    if (STACK[0x448])
    {
      STACK[0x450] = (unint64_t)v69;
      operator delete(v69);
      unint64_t v70 = (void *)STACK[0x428];
      if (!STACK[0x428])
      {
LABEL_11:
        uint64_t v71 = (void *)STACK[0x410];
        if (!STACK[0x410]) {
          goto LABEL_13;
        }
        goto LABEL_12;
      }
    }
    else
    {
      unint64_t v70 = (void *)STACK[0x428];
      if (!STACK[0x428]) {
        goto LABEL_11;
      }
    }
    STACK[0x430] = (unint64_t)v70;
    operator delete(v70);
    uint64_t v71 = (void *)STACK[0x410];
    if (!STACK[0x410])
    {
LABEL_13:
      if (a66) {
        operator delete(a66);
      }
      if (a62)
      {
        uint64_t v72 = (char *)a63;
        uint64_t v73 = a62;
        if ((char *)a63 != a62)
        {
          do
          {
            if (!*((_DWORD *)v72 - 2))
            {
              int v74 = (void *)*((void *)v72 - 6);
              if (v74)
              {
                *((void *)v72 - 5) = v74;
                operator delete(v74);
              }
              int v75 = (void *)*((void *)v72 - 10);
              if (v75)
              {
                *((void *)v72 - 9) = v75;
                operator delete(v75);
              }
              char v76 = (void *)*((void *)v72 - 13);
              if (v76)
              {
                *((void *)v72 - 12) = v76;
                operator delete(v76);
              }
            }
            v72 -= 168;
          }
          while (v72 != a62);
          uint64_t v73 = a62;
        }
        operator delete(v73);
      }
      uint64_t v77 = a20;
      char v78 = (void *)STACK[0x300];
      if (STACK[0x300])
      {
        STACK[0x308] = (unint64_t)v78;
        operator delete(v78);
        __int16 v79 = (void *)STACK[0x2E8];
        if (!STACK[0x2E8])
        {
LABEL_33:
          uint64_t v80 = (void *)STACK[0x2D0];
          if (!STACK[0x2D0]) {
            goto LABEL_34;
          }
          goto LABEL_42;
        }
      }
      else
      {
        __int16 v79 = (void *)STACK[0x2E8];
        if (!STACK[0x2E8]) {
          goto LABEL_33;
        }
      }
      STACK[0x2F0] = (unint64_t)v79;
      operator delete(v79);
      uint64_t v80 = (void *)STACK[0x2D0];
      if (!STACK[0x2D0])
      {
LABEL_34:
        unint64_t v81 = STACK[0x2B8];
        if (!STACK[0x2B8]) {
          goto LABEL_35;
        }
        goto LABEL_43;
      }
LABEL_42:
      STACK[0x2D8] = (unint64_t)v80;
      operator delete(v80);
      unint64_t v81 = STACK[0x2B8];
      if (!STACK[0x2B8])
      {
LABEL_35:
        if (SLOBYTE(STACK[0x277]) < 0) {
          goto LABEL_36;
        }
        goto LABEL_47;
      }
LABEL_43:
      unsigned __int16 v84 = (void **)STACK[0x2C0];
      int v85 = (void *)v81;
      if (STACK[0x2C0] != v81)
      {
        do
        {
          v84 -= 9;
          sub_9F5F58(a9, v84);
        }
        while (v84 != (void **)v81);
        int v85 = (void *)STACK[0x2B8];
      }
      STACK[0x2C0] = v81;
      operator delete(v85);
      uint64_t v77 = a20;
      if (SLOBYTE(STACK[0x277]) < 0)
      {
LABEL_36:
        operator delete((void *)STACK[0x260]);
        uint64_t v82 = *a10;
        if (*a10) {
          goto LABEL_37;
        }
        goto LABEL_48;
      }
LABEL_47:
      uint64_t v82 = *a10;
      if (*a10)
      {
LABEL_37:
        *(void *)(v77 + 200) = v82;
        operator delete(v82);
        if ((*(char *)(v77 + 55) & 0x80000000) == 0) {
          goto LABEL_38;
        }
        goto LABEL_49;
      }
LABEL_48:
      if ((*(char *)(v77 + 55) & 0x80000000) == 0)
      {
LABEL_38:
        uint64_t v83 = *a13;
        if (!*a13) {
          goto LABEL_39;
        }
        goto LABEL_50;
      }
LABEL_49:
      operator delete(*a11);
      uint64_t v83 = *a13;
      if (!*a13) {
LABEL_39:
      }
        _Unwind_Resume(a1);
LABEL_50:
      uint64_t v86 = v77;
      uint64_t v87 = *(void *)(v77 + 16);
      uint64_t v88 = v83;
      if ((void *)v87 != v83)
      {
        uint64_t v89 = v86 + 24;
        do
        {
          v87 -= 296;
          sub_9F5E28(v89, v87);
        }
        while ((void *)v87 != v83);
        uint64_t v88 = *a13;
        uint64_t v86 = a20;
      }
      *(void *)(v86 + 16) = v83;
      operator delete(v88);
      _Unwind_Resume(a1);
    }
LABEL_12:
    STACK[0x418] = (unint64_t)v71;
    operator delete(v71);
    goto LABEL_13;
  }
LABEL_8:
  operator delete(v68);
  if (LODWORD(STACK[0x470])) {
    goto LABEL_13;
  }
  goto LABEL_9;
}

void sub_AF8428(uint64_t a1)
{
  *(_DWORD *)(a1 + 240) = 0;
  if (*(void *)(a1 + 144) | *(void *)(a1 + 184))
  {
    for (uint64_t i = *(void *)(a1 + 152); i != *(void *)(a1 + 160); i += 16)
    {
      if (*(void *)i)
      {
        free(*(void **)i);
        *(void *)uint64_t i = 0;
      }
      *(void *)(i + 8) = 0;
    }
    *(void *)(a1 + 184) = 0;
  }
  *(uint64x2_t *)(a1 + 104) = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 120), (float)*(unint64_t *)(a1 + 176))));
  *(unsigned char *)(a1 + 128) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 200) = *(void *)(a1 + 192);
  *(void *)(a1 + 224) = 0;
  uint64_t v3 = *(unsigned int **)(a1 + 272);
  uint64_t v4 = *(unsigned int **)(a1 + 280);
  if (v3 != v4)
  {
    uint64_t v5 = *(void *)(a1 + 248);
    int v6 = *(unsigned int **)(a1 + 272);
    do
    {
      unsigned int v7 = *v6++;
      *(void *)(v5 + (((unint64_t)v7 >> 3) & 0x1FFFFFF8)) &= ~(1 << v7);
    }
    while (v6 != v4);
  }
  *(void *)(a1 + 280) = v3;
  int v8 = *(unsigned int **)(a1 + 320);
  uint64_t v9 = *(unsigned int **)(a1 + 328);
  if (v8 != v9)
  {
    uint64_t v10 = *(void *)(a1 + 296);
    unsigned int v11 = *(unsigned int **)(a1 + 320);
    do
    {
      unsigned int v12 = *v11++;
      *(void *)(v10 + (((unint64_t)v12 >> 3) & 0x1FFFFFF8)) &= ~(1 << v12);
    }
    while (v11 != v9);
  }
  *(void *)(a1 + 328) = v8;
  uint64_t v13 = *(unsigned int **)(a1 + 392);
  uint64_t v14 = *(unsigned int **)(a1 + 400);
  if (v13 != v14)
  {
    uint64_t v15 = *(void *)(a1 + 368);
    uint64_t v16 = *(void *)(a1 + 344);
    uint64_t v17 = *(unsigned int **)(a1 + 392);
    do
    {
      unsigned int v18 = *v17++;
      *(void *)(v15 + (((unint64_t)v18 >> 3) & 0x1FFFFFF8)) &= ~(1 << v18);
      *(_DWORD *)(v16 + 4 * v18) = -1;
    }
    while (v17 != v14);
  }
  *(void *)(a1 + 400) = v13;
  sub_BD5698(a1 + 424);
  char v21 = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)&__dst, &__p);
  uint64_t v19 = (void **)(a1 + 528);
  if (*(char *)(a1 + 551) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)uint64_t v19 = __dst;
  *(void *)(a1 + 544) = v23;
  HIBYTE(v23) = 0;
  LOBYTE(__dst) = 0;
  *(_OWORD *)(a1 + 616) = v28;
  *(_OWORD *)(a1 + 632) = v29;
  *(_OWORD *)(a1 + 648) = v30;
  *(_OWORD *)(a1 + 664) = v31;
  *(_OWORD *)(a1 + 552) = v24;
  *(_OWORD *)(a1 + 568) = v25;
  *(_OWORD *)(a1 + 584) = v26;
  *(_OWORD *)(a1 + 600) = v27;
  if (v21 < 0) {
    operator delete((void *)__p);
  }
  *(int32x2_t *)(a1 + 96) = vadd_s32(vdup_n_s32(2 * *(_DWORD *)(a1 + 16)), (int32x2_t)0x200000004);
  sub_BD5704(a1 + 424, *(void *)(a1 + 8));
}

void sub_AF8664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_AF8680(uint64_t a1)
{
  if (sub_A276F8(*(void *)(a1 + 24)))
  {
    int v2 = *(_DWORD *)(a1 + 68);
    int v3 = *(_DWORD *)(a1 + 240);
    *(_DWORD *)(a1 + 240) = v3 + 1;
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v22 = 0x1FFFFFFFELL;
    int v5 = sub_AD28B0(v4, &v22);
    int v23 = v5;
    LODWORD(v22) = 0;
    uint64_t v6 = *(void *)(a1 + 192);
    unsigned int v7 = (char *)(v6 + ((unint64_t)*(unsigned int *)(sub_AFAD84(a1 + 104, (unsigned int *)&v22) + 4) << 6));
    LODWORD(v22) = 0;
    uint64_t v8 = *(void *)(a1 + 192);
    uint64_t v9 = sub_AFAD84(a1 + 104, (unsigned int *)&v22);
    sub_AFA9C0(a1 + 104, 0, v7, (unsigned char *)(v8 + ((unint64_t)*(unsigned int *)(v9 + 8) << 6)));
    long long v13 = xmmword_20E2060;
    uint64_t v14 = -1;
    int v15 = v3;
    int v16 = v2;
    uint64_t v17 = 0;
    int v18 = 10 * v2;
    char v19 = 0;
    uint64_t v20 = -1;
    int v21 = 0x7FFFFFFF;
    sub_AFA518((void *)(a1 + 104), &v13, 0, 0, 1);
    int v10 = *(_DWORD *)(a1 + 96);
    unsigned int v11 = v10 + v10 * v5;
    unsigned int v12 = v11 + 2;
    if (*(unsigned char *)(a1 + 20))
    {
      if (!sub_AFA648((void *)(a1 + 104), 0, v12, v11, v10 + v10 * *(_DWORD *)(a1 + 416), 2147483646)) {
        return;
      }
    }
    else if (!sub_AFA648((void *)(a1 + 104), 0, v12, v11, -1, 2147483646))
    {
      return;
    }
    sub_A3EF14((uint64_t *)(a1 + 248), &v23);
  }
}

double sub_AF87EC(uint64_t a1, int a2)
{
  sub_725D0((uint64_t)v34);
  uint64_t v4 = *(unsigned int **)(a1 + 272);
  int v5 = *(unsigned int **)(a1 + 280);
  if (v4 != v5)
  {
    int v6 = a2 + 1;
    int v7 = a2 + 2;
    int v32 = ~a2;
    while (1)
    {
      unsigned int v33 = *v4;
      unint64_t v8 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), v33);
      if (HIDWORD(v8) == 1 && (v8 + 3) < 2)
      {
LABEL_12:
        int v13 = 0;
        goto LABEL_17;
      }
      uint64_t v10 = *(void *)(*(void *)(a1 + 24) + 4120);
      uint64_t v11 = v10 + 24;
      if (*(unsigned char *)(v10 + 17)) {
        break;
      }
      unsigned int v12 = (int *)sub_498D5C(v11, __ROR8__(v8, 32), 0, "stop");
      int v16 = (unsigned __int16 *)((char *)v12 - *v12);
      if (*v16 >= 0x15u)
      {
        unsigned int v15 = v16[10];
        if (v15) {
          goto LABEL_15;
        }
      }
      int v13 = 30;
LABEL_17:
      unsigned int v35 = 0;
      uint64_t v17 = *(void *)(a1 + 192);
      int v18 = (char *)(v17 + ((unint64_t)*(unsigned int *)(sub_AFAD84(a1 + 104, &v35) + 4) << 6));
      unsigned int v35 = 0;
      uint64_t v19 = *(void *)(a1 + 192);
      uint64_t v20 = sub_AFAD84(a1 + 104, &v35);
      sub_AFA9C0(a1 + 104, 0, v18, (unsigned char *)(v19 + ((unint64_t)*(unsigned int *)(v20 + 8) << 6)));
      sub_AFC9F0((void *)(a1 + 104), v6 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * v33, 0);
      unsigned int v35 = 0;
      uint64_t v21 = *(void *)(a1 + 192);
      uint64_t v22 = (unsigned int *)(v21 + ((unint64_t)*(unsigned int *)(sub_AFAD84(a1 + 104, &v35) + 4) << 6));
      unsigned int v35 = 0;
      uint64_t v23 = *(void *)(a1 + 192);
      for (uint64_t i = (unsigned int *)(v23 + ((unint64_t)*(unsigned int *)(sub_AFAD84(a1 + 104, &v35) + 8) << 6));
            v22 != i;
            v22 += 16)
      {
        unsigned int *v22 = v33;
        unsigned int v25 = v22[7];
        v22[3] = v25;
        v22[4] = -1;
        v22[7] = v25 + v13;
      }
      unsigned int v26 = v33;
      int v27 = *(_DWORD *)(a1 + 96);
      if (*(unsigned char *)(a1 + 20))
      {
        int v28 = v27 + v27 * *(_DWORD *)(a1 + 416) + 1;
        uint64_t v29 = *(void *)(a1 + 48);
        if (!v29) {
          goto LABEL_23;
        }
      }
      else
      {
        int v28 = -1;
        uint64_t v29 = *(void *)(a1 + 48);
        if (!v29)
        {
LABEL_23:
          int v30 = 2147483646;
          goto LABEL_24;
        }
      }
      int v30 = sub_AD7004(v29, v33, *(_DWORD *)(a1 + 100) + v32);
LABEL_24:
      if (sub_AFA648((void *)(a1 + 104), 0, v7 + v27 + v27 * v26, v27 + v27 * v26 + 1, v28, v30)) {
        sub_A3EF14((uint64_t *)(a1 + 296), &v33);
      }
      if (++v4 == v5) {
        goto LABEL_26;
      }
    }
    unsigned int v12 = (int *)sub_A1A290(v11, v8, 0, "transfers at stop");
    int v13 = 0;
    uint64_t v14 = (unsigned __int16 *)((char *)v12 - *v12);
    if (*v14 < 5u) {
      goto LABEL_17;
    }
    unsigned int v15 = v14[2];
    if (!v15) {
      goto LABEL_12;
    }
LABEL_15:
    int v13 = *(int *)((char *)v12 + v15);
    goto LABEL_17;
  }
LABEL_26:
  double result = sub_72688((uint64_t)v34) + *(double *)(a1 + 568);
  *(double *)(a1 + 568) = result;
  return result;
}

double sub_AF8A8C(uint64_t a1, int a2)
{
  sub_725D0((uint64_t)v289);
  uint64_t v4 = *(unsigned int **)(a1 + 272);
  unint64_t v269 = *(unsigned int **)(a1 + 280);
  if (v4 != v269)
  {
    int v273 = a2 + 2;
    int v274 = a2 + 1;
    int v271 = ~a2;
    unint64_t v272 = (uint64_t *)(a1 + 296);
    int v268 = (void **)(a1 + 320);
    int v281 = (void *)(a1 + 104);
    uint64_t v282 = a1;
    while (1)
    {
      uint64_t v270 = v4;
      unsigned int v280 = *v4;
      int v5 = (unint64_t *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), *v4);
      sub_A19FA8((uint64_t)&v283, *(void *)(a1 + 24), *v5);
      int v6 = v284;
      int v7 = &v285;
      if (v288) {
        int v7 = v287;
      }
      if ((unint64_t)v284 < *v7) {
        break;
      }
LABEL_3:
      uint64_t v4 = v270 + 1;
      if (v270 + 1 == v269) {
        goto LABEL_317;
      }
    }
LABEL_13:
    uint64_t v11 = 0;
    unint64_t v12 = __ROR8__(*v6, 32);
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = *(void *)(v13 + 72) - 1;
    unint64_t v15 = 0xC4CEB9FE1A85EC53
        * ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) >> 33));
    unint64_t v16 = v15 ^ (v15 >> 33);
    uint64_t v17 = *(void *)(v13 + 48);
    uint64_t v18 = v17 + 11;
    uint64_t v19 = -1;
    for (unint64_t i = v16; ; unint64_t i = v11 + v21)
    {
      uint64_t v21 = i & v14;
      unint64_t v22 = (i & v14) / 0x30;
      unint64_t v23 = v21 - 48 * v22;
      if (((*(unsigned __int8 *)(v17 + 16 * v22 + (v23 >> 3) + 10) >> (v23 & 7)) & 1) == 0)
      {
        if (v19 == -1) {
          unint64_t v59 = v21;
        }
        else {
          unint64_t v59 = v19;
        }
        if (!sub_AD2F40(v13, 1)) {
          goto LABEL_98;
        }
        goto LABEL_55;
      }
      uint64_t v24 = *(void *)(v17 + 16 * v22);
      if (!*(void *)(v13 + 40)) {
        goto LABEL_33;
      }
      unsigned int v25 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
      if ((unsigned __int16)(v21 - 48 * v22) < 9u)
      {
        __int16 v26 = 0;
        LOBYTE(v31) = v21 - 48 * v22;
        goto LABEL_29;
      }
      __int16 v26 = 0;
      uint64_t v27 = (unsigned __int16)(v21 - 48 * v22 - 9) >> 3;
      if ((unsigned __int16)(v21 - 48 * v22 - 9) >> 3)
      {
        __int16 v28 = 0;
        uint64_t v29 = v27 + 1;
        uint64_t v30 = (v27 + 1) & 0x3FFE;
        unsigned __int16 v31 = v23 - 8 * v30;
        int v32 = &v25[v30];
        unsigned int v33 = (unsigned __int8 *)(v18 + 16 * v22);
        uint64_t v34 = v30;
        do
        {
          uint64_t v35 = *(v33 - 1);
          int v36 = *v33;
          v33 += 2;
          v26 += byte_20EBFB6[v35];
          v28 += byte_20EBFB6[v36];
          v34 -= 2;
        }
        while (v34);
        v26 += v28;
        if (v29 == v30) {
          goto LABEL_28;
        }
      }
      else
      {
        unsigned __int16 v31 = v21 - 48 * v22;
        int v32 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
      }
      do
      {
        int v37 = *v32++;
        v26 += byte_20EBFB6[v37];
        v31 -= 8;
      }
      while (v31 > 8u);
LABEL_28:
      v25 += ((unsigned __int16)(v23 - 9) >> 3) + 1;
LABEL_29:
      uint64_t v38 = (_DWORD *)(v24
                     + 12
                     * (unsigned __int16)(v26 + byte_20EBFB6[~(-1 << v31) & (unint64_t)*v25]));
      BOOL v39 = *(_DWORD *)(v13 + 36) == v38[1] && *(_DWORD *)(v13 + 32) == *v38;
      if (v39)
      {
        if (v19 == -1) {
          uint64_t v19 = v21;
        }
        goto LABEL_16;
      }
LABEL_33:
      uint64_t v40 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
      if ((unsigned __int16)(v21 - 48 * v22) < 9u)
      {
        __int16 v41 = 0;
        uint64_t v52 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
        LOBYTE(v46) = v21 - 48 * v22;
        goto LABEL_43;
      }
      __int16 v41 = 0;
      uint64_t v42 = (unsigned __int16)(v21 - 48 * v22 - 9) >> 3;
      if ((unsigned __int16)(v21 - 48 * v22 - 9) >> 3)
      {
        __int16 v43 = 0;
        uint64_t v44 = v42 + 1;
        uint64_t v45 = (v42 + 1) & 0x3FFE;
        unsigned __int16 v46 = v23 - 8 * v45;
        uint64_t v47 = &v40[v45];
        uint64_t v48 = (unsigned __int8 *)(v18 + 16 * v22);
        uint64_t v49 = v45;
        do
        {
          uint64_t v50 = *(v48 - 1);
          int v51 = *v48;
          v48 += 2;
          v41 += byte_20EBFB6[v50];
          v43 += byte_20EBFB6[v51];
          v49 -= 2;
        }
        while (v49);
        v41 += v43;
        if (v44 == v45) {
          goto LABEL_42;
        }
      }
      else
      {
        unsigned __int16 v46 = v21 - 48 * v22;
        uint64_t v47 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
      }
      do
      {
        int v53 = *v47++;
        v41 += byte_20EBFB6[v53];
        v46 -= 8;
      }
      while (v46 > 8u);
LABEL_42:
      uint64_t v52 = &v40[((unsigned __int16)(v23 - 9) >> 3) + 1];
LABEL_43:
      if (v12 == *(void *)(v24
                            + 12
                            * (unsigned __int16)(v41 + byte_20EBFB6[~(-1 << v46) & (unint64_t)*v52])))
      {
        if (v21 != -1)
        {
          if ((unsigned __int16)(v21 - 48 * v22) < 9u)
          {
            __int16 v56 = 0;
          }
          else
          {
            if ((((_WORD)v21 - 48 * (_WORD)v22 - 8) & 0xFFF8) != 0) {
              __int16 v54 = 8;
            }
            else {
              __int16 v54 = v21 - 48 * v22 - 8;
            }
            unsigned __int16 v55 = ~v54 + v21 - 48 * v22;
            if (v55 < 8u)
            {
              __int16 v56 = 0;
              unsigned __int16 v57 = v23;
              unint64_t v58 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
              goto LABEL_119;
            }
            __int16 v117 = 0;
            __int16 v118 = 0;
            uint64_t v119 = (v55 >> 3) + 1;
            unsigned __int16 v57 = v23 - 8 * (((v55 >> 3) + 1) & 0x3FFE);
            unint64_t v58 = &v40[v119 & 0x3FFE];
            unsigned int v120 = (unsigned __int8 *)(v17 + 16 * v22 + 11);
            uint64_t v121 = v119 & 0x3FFE;
            do
            {
              uint64_t v122 = *(v120 - 1);
              int v123 = *v120;
              v120 += 2;
              v117 += byte_20EBFB6[v122];
              v118 += byte_20EBFB6[v123];
              v121 -= 2;
            }
            while (v121);
            __int16 v56 = v118 + v117;
            if ((v119 & 0x3FFE) != v119)
            {
              do
              {
LABEL_119:
                int v124 = *v58++;
                v56 += byte_20EBFB6[v124];
                v57 -= 8;
              }
              while (v57 > 8u);
            }
            v40 += ((unsigned __int16)(v23 - 9) >> 3) + 1;
            LOBYTE(v23) = v57;
          }
          uint64_t v125 = *(void *)(v13 + 56);
          unsigned __int16 v126 = v56 + byte_20EBFB6[~(-1 << v23) & (unint64_t)*v40];
          uint64_t v127 = v17 + 16 * v22;
          if (*(unsigned __int16 *)(v127 + 8) != v126 || v127 + 16 == v125)
          {
            uint64_t v103 = (_DWORD *)(v24 + 12 * v126);
          }
          else
          {
            uint64_t v129 = v127 + 32;
            do
            {
              if (*(_WORD *)(v129 - 8)) {
                BOOL v130 = 1;
              }
              else {
                BOOL v130 = v129 == v125;
              }
              v129 += 16;
            }
            while (!v130);
            uint64_t v103 = *(_DWORD **)(v129 - 32);
          }
          goto LABEL_99;
        }
        unint64_t v59 = -1;
        if (!sub_AD2F40(v13, 1))
        {
LABEL_98:
          unint64_t v290 = v12;
          int v291 = -1;
          sub_AD3484(v13, (uint64_t *)&v290, v59, v292);
          uint64_t v103 = (_DWORD *)v293;
          goto LABEL_99;
        }
LABEL_55:
        uint64_t v60 = 0;
        unint64_t v290 = v12;
        int v291 = -1;
        uint64_t v61 = *(void *)(v13 + 72) - 1;
        uint64_t v62 = *(void *)(v13 + 48);
        uint64_t v63 = v62 + 11;
        uint64_t v64 = -1;
        while (2)
        {
          uint64_t v65 = v16 & v61;
          unint64_t v66 = (v16 & v61) / 0x30;
          unint64_t v67 = (v16 & v61) % 0x30;
          if (((*(unsigned __int8 *)(v62 + 16 * v66 + (v67 >> 3) + 10) >> (v67 & 7)) & 1) == 0)
          {
            if (v64 == -1) {
              unint64_t v102 = v16 & v61;
            }
            else {
              unint64_t v102 = v64;
            }
            goto LABEL_96;
          }
          uint64_t v68 = *(void *)(v13 + 40);
          uint64_t v69 = *(void *)(v62 + 16 * v66);
          if (!v68) {
            break;
          }
          unint64_t v70 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
          if ((unsigned __int16)((v16 & v61) % 0x30) < 9u)
          {
            __int16 v71 = 0;
            LOBYTE(v72) = (v16 & v61) % 0x30;
            goto LABEL_71;
          }
          __int16 v71 = 0;
          uint64_t v72 = (unsigned __int16)(v65 - 48 * v66 - 9) >> 3;
          if (!((unsigned __int16)(v65 - 48 * v66 - 9) >> 3))
          {
            LODWORD(v72) = (v16 & v61) % 0x30;
            char v76 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
            do
            {
LABEL_69:
              int v81 = *v76++;
              v71 += byte_20EBFB6[v81];
              LOWORD(v72) = v72 - 8;
            }
            while ((unsigned __int16)v72 > 8u);
            goto LABEL_70;
          }
          __int16 v73 = 0;
          uint64_t v74 = v72 + 1;
          uint64_t v75 = (v72 + 1) & 0x3FFE;
          LOWORD(v72) = v67 - 8 * v75;
          char v76 = &v70[v75];
          uint64_t v77 = (unsigned __int8 *)(v63 + 16 * v66);
          uint64_t v78 = v75;
          do
          {
            uint64_t v79 = *(v77 - 1);
            int v80 = *v77;
            v77 += 2;
            v71 += byte_20EBFB6[v79];
            v73 += byte_20EBFB6[v80];
            v78 -= 2;
          }
          while (v78);
          v71 += v73;
          if (v74 != v75) {
            goto LABEL_69;
          }
LABEL_70:
          v70 += ((unsigned __int16)(v67 - 9) >> 3) + 1;
LABEL_71:
          uint64_t v82 = (_DWORD *)(v69
                         + 12
                         * (unsigned __int16)(v71 + byte_20EBFB6[~(-1 << v72) & (unint64_t)*v70]));
          if (*(_DWORD *)(v13 + 36) == v82[1] && *(_DWORD *)(v13 + 32) == *v82)
          {
            if (v64 == -1) {
              uint64_t v64 = v16 & v61;
            }
LABEL_58:
            unint64_t v16 = ++v60 + v65;
            continue;
          }
          break;
        }
        unsigned __int16 v84 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
        if ((unsigned __int16)((v16 & v61) % 0x30) < 9u)
        {
          __int16 v85 = 0;
          unsigned __int16 v95 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
          LOBYTE(v86) = (v16 & v61) % 0x30;
          goto LABEL_85;
        }
        __int16 v85 = 0;
        uint64_t v86 = (unsigned __int16)(v65 - 48 * v66 - 9) >> 3;
        if (!((unsigned __int16)(v65 - 48 * v66 - 9) >> 3))
        {
          LODWORD(v86) = (v16 & v61) % 0x30;
          __int16 v90 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
          do
          {
LABEL_83:
            int v96 = *v90++;
            v85 += byte_20EBFB6[v96];
            LOWORD(v86) = v86 - 8;
          }
          while ((unsigned __int16)v86 > 8u);
          goto LABEL_84;
        }
        __int16 v87 = 0;
        uint64_t v88 = v86 + 1;
        uint64_t v89 = (v86 + 1) & 0x3FFE;
        LOWORD(v86) = v67 - 8 * v89;
        __int16 v90 = &v84[v89];
        int v91 = (unsigned __int8 *)(v63 + 16 * v66);
        uint64_t v92 = v89;
        do
        {
          uint64_t v93 = *(v91 - 1);
          int v94 = *v91;
          v91 += 2;
          v85 += byte_20EBFB6[v93];
          v87 += byte_20EBFB6[v94];
          v92 -= 2;
        }
        while (v92);
        v85 += v87;
        if (v88 != v89) {
          goto LABEL_83;
        }
LABEL_84:
        unsigned __int16 v95 = &v84[((unsigned __int16)(v67 - 9) >> 3) + 1];
LABEL_85:
        if (v12 != *(void *)(v69
                              + 12
                              * (unsigned __int16)(v85
                                                 + byte_20EBFB6[~(-1 << v86) & (unint64_t)*v95])))
          goto LABEL_58;
        if (v65 == -1)
        {
          unint64_t v102 = -1;
LABEL_96:
          sub_AD3484(v13, (uint64_t *)&v290, v102, v292);
          uint64_t v103 = (_DWORD *)v293;
          goto LABEL_99;
        }
        if ((unsigned __int16)((v16 & v61) % 0x30) < 9u)
        {
          __int16 v99 = 0;
        }
        else
        {
          if ((((_WORD)v65 - 48 * (_WORD)v66 - 8) & 0xFFF8) != 0) {
            __int16 v97 = 8;
          }
          else {
            __int16 v97 = v65 - 48 * v66 - 8;
          }
          unsigned __int16 v98 = ~v97 + v65 - 48 * v66;
          if (v98 < 8u)
          {
            __int16 v99 = 0;
            unsigned __int16 v100 = v67;
            uint64_t v101 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
            goto LABEL_257;
          }
          __int16 v234 = 0;
          __int16 v235 = 0;
          uint64_t v236 = (v98 >> 3) + 1;
          unsigned __int16 v100 = v67 - 8 * (((v98 >> 3) + 1) & 0x3FFE);
          uint64_t v101 = &v84[v236 & 0x3FFE];
          unsigned int v237 = (unsigned __int8 *)(v62 + 16 * v66 + 11);
          uint64_t v238 = v236 & 0x3FFE;
          do
          {
            uint64_t v239 = *(v237 - 1);
            int v240 = *v237;
            v237 += 2;
            v234 += byte_20EBFB6[v239];
            v235 += byte_20EBFB6[v240];
            v238 -= 2;
          }
          while (v238);
          __int16 v99 = v235 + v234;
          if ((v236 & 0x3FFE) != v236)
          {
            do
            {
LABEL_257:
              int v241 = *v101++;
              v99 += byte_20EBFB6[v241];
              v100 -= 8;
            }
            while (v100 > 8u);
          }
          v84 += ((unsigned __int16)(v67 - 9) >> 3) + 1;
          LOBYTE(v67) = v100;
        }
        uint64_t v242 = v62 + 16 * v66;
        unsigned int v243 = *(_DWORD ***)(v13 + 56);
        unsigned __int16 v244 = v99 + byte_20EBFB6[~(-1 << v67) & (unint64_t)*v84];
        uint64_t v103 = (_DWORD *)(v69 + 12 * v244);
        if (*(unsigned __int16 *)(v242 + 8) == v244)
        {
          uint64_t v245 = v242 + 16;
          if ((_DWORD **)(v242 + 16) != v243)
          {
            while (1)
            {
              uint64_t v246 = (_DWORD **)v245;
              if (*(_WORD *)(v245 + 8)) {
                break;
              }
              v245 += 16;
              if (v246 + 2 == v243)
              {
                uint64_t v242 = *(void *)(v13 + 56);
                goto LABEL_267;
              }
            }
            uint64_t v242 = v245;
LABEL_267:
            uint64_t v103 = *v246;
            goto LABEL_268;
          }
        }
        else
        {
LABEL_268:
          if ((_DWORD **)v242 != v243 && v68)
          {
            do
            {
              if (*(_DWORD *)(v13 + 36) != v103[1] || *(_DWORD *)(v13 + 32) != *v103) {
                break;
              }
              v103 += 3;
              if (v103 == (_DWORD *)(*(void *)v242 + 12 * *(unsigned __int16 *)(v242 + 8)))
              {
                v242 += 16;
                if ((_DWORD **)v242 != v243)
                {
                  do
                  {
                    if (*(_WORD *)(v242 + 8))
                    {
                      uint64_t v103 = *(_DWORD **)v242;
                      goto LABEL_272;
                    }
                    v242 += 16;
                  }
                  while ((_DWORD **)v242 != v243);
                  uint64_t v103 = *(_DWORD **)(v242 - 16);
                }
                break;
              }
LABEL_272:
              ;
            }
            while ((_DWORD **)v242 != v243);
          }
        }
LABEL_99:
        unsigned int v104 = v103[2];
        if (v104 != -1) {
          goto LABEL_141;
        }
        int v105 = *(_DWORD *)(v13 + 112);
        *(_DWORD *)(v13 + 112) = v105 + 1;
        v103[2] = v105;
        uint64_t v107 = *(unint64_t **)(v13 + 96);
        unint64_t v106 = *(void *)(v13 + 104);
        if ((unint64_t)v107 < v106)
        {
          *uint64_t v107 = v12;
          uint64_t v108 = (uint64_t)(v107 + 1);
          goto LABEL_140;
        }
        __int16 v109 = (unint64_t **)(v13 + 88);
        unint64_t v110 = *(char **)(v13 + 88);
        uint64_t v111 = ((char *)v107 - v110) >> 3;
        unint64_t v112 = v111 + 1;
        if ((unint64_t)(v111 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v113 = v106 - (void)v110;
        if (v113 >> 2 > v112) {
          unint64_t v112 = v113 >> 2;
        }
        if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v112 = 0x1FFFFFFFFFFFFFFFLL;
        }
        unint64_t v276 = v112;
        if (!v112)
        {
          uint64_t v114 = 0;
          unsigned __int16 v115 = (unint64_t *)(8 * v111);
          *(void *)(8 * v111) = v12;
          uint64_t v108 = 8 * v111 + 8;
          if (v107 != (unint64_t *)v110) {
            goto LABEL_110;
          }
LABEL_114:
          *(void *)(v13 + 88) = v115;
          *(void *)(v13 + 96) = v108;
          *(void *)(v13 + 104) = &v114[8 * v276];
          if (v107) {
            goto LABEL_139;
          }
          goto LABEL_140;
        }
        if (v112 >> 61) {
          goto LABEL_319;
        }
        uint64_t v114 = (char *)operator new(8 * v112);
        __int16 v109 = (unint64_t **)(v13 + 88);
        unsigned __int16 v115 = (unint64_t *)&v114[8 * v111];
        *unsigned __int16 v115 = v12;
        uint64_t v108 = (uint64_t)(v115 + 1);
        if (v107 == (unint64_t *)v110) {
          goto LABEL_114;
        }
LABEL_110:
        unint64_t v116 = (char *)(v107 - 1) - v110;
        if (v116 < 0x58) {
          goto LABEL_323;
        }
        if ((unint64_t)(v110 - v114) < 0x20) {
          goto LABEL_323;
        }
        uint64_t v131 = (v116 >> 3) + 1;
        uint64_t v132 = 8 * (v131 & 0x3FFFFFFFFFFFFFFCLL);
        int v133 = &v107[v132 / 0xFFFFFFFFFFFFFFF8];
        unsigned __int16 v115 = (unint64_t *)((char *)v115 - v132);
        uint64_t v134 = &v114[8 * v111 - 16];
        int v135 = v107 - 2;
        uint64_t v136 = v131 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v137 = *(_OWORD *)v135;
          *((_OWORD *)v134 - 1) = *((_OWORD *)v135 - 1);
          *(_OWORD *)uint64_t v134 = v137;
          v134 -= 32;
          v135 -= 4;
          v136 -= 4;
        }
        while (v136);
        uint64_t v107 = v133;
        if (v131 != (v131 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_323:
          do
          {
            unint64_t v138 = *--v107;
            *--unsigned __int16 v115 = v138;
          }
          while (v107 != (unint64_t *)v110);
        }
        uint64_t v107 = *v109;
        *(void *)(v13 + 88) = v115;
        *(void *)(v13 + 96) = v108;
        *(void *)(v13 + 104) = &v114[8 * v276];
        if (v107) {
LABEL_139:
        }
          operator delete(v107);
LABEL_140:
        *(void *)(v13 + 96) = v108;
        unsigned int v104 = v103[2];
LABEL_141:
        *(double *)(v282 + 624) = *(double *)(v282 + 624) + 1.0;
        if (v280 == v104) {
          goto LABEL_239;
        }
        LODWORD(v292[0]) = 0;
        uint64_t v139 = *(void *)(v282 + 192);
        long long v140 = (char *)(v139
                      + ((unint64_t)*(unsigned int *)(sub_AFAD84((uint64_t)v281, (unsigned int *)v292) + 4) << 6));
        LODWORD(v292[0]) = 0;
        uint64_t v141 = *(void *)(v282 + 192);
        uint64_t v142 = sub_AFAD84((uint64_t)v281, (unsigned int *)v292);
        sub_AFA9C0((uint64_t)v281, 0, v140, (unsigned char *)(v141 + ((unint64_t)*(unsigned int *)(v142 + 8) << 6)));
        unsigned int v143 = v274 + *(_DWORD *)(v282 + 96) * (v280 + 1);
        LODWORD(v292[0]) = v143;
        if (*(void *)(v282 + 184) == *(void *)(v282 + 144)) {
          goto LABEL_181;
        }
        unint64_t v144 = sub_AFAFE4((uint64_t)v281, (unsigned int *)v292);
        if (v144 == -1) {
          goto LABEL_181;
        }
        uint64_t v145 = *(void *)(v282 + 152);
        uint64_t v146 = v145 + 16 * (v144 / 0x30);
        uint64_t v147 = (unsigned __int8 *)(v146 + 10);
        int v148 = v144 % 0x30;
        if ((unsigned __int16)(v144 % 0x30) < 9u)
        {
          __int16 v150 = 0;
          goto LABEL_156;
        }
        uint64_t v149 = (unsigned __int16)(v144 % 0x30 - 9) >> 3;
        __int16 v150 = 0;
        if (!((unsigned __int16)(v144 % 0x30 - 9) >> 3))
        {
          unsigned __int16 v154 = v144 % 0x30;
          uint64_t v155 = (unsigned __int8 *)(v146 + 10);
          do
          {
LABEL_154:
            int v160 = *v155++;
            v150 += byte_20EC0B6[v160];
            v154 -= 8;
          }
          while (v154 > 8u);
          goto LABEL_155;
        }
        __int16 v151 = 0;
        uint64_t v152 = v149 + 1;
        uint64_t v153 = (v149 + 1) & 0x3FFE;
        unsigned __int16 v154 = v148 - 8 * v153;
        uint64_t v155 = &v147[v153];
        uint64_t v156 = (unsigned __int8 *)(v145 + 16 * (v144 / 0x30) + 11);
        uint64_t v157 = v153;
        do
        {
          uint64_t v158 = *(v156 - 1);
          int v159 = *v156;
          v156 += 2;
          v150 += byte_20EC0B6[v158];
          v151 += byte_20EC0B6[v159];
          v157 -= 2;
        }
        while (v157);
        v150 += v151;
        if (v152 != v153) {
          goto LABEL_154;
        }
LABEL_155:
        v147 += ((unsigned __int16)(v148 - 9) >> 3) + 1;
        LOBYTE(v148) = v154;
LABEL_156:
        unsigned __int16 v161 = *(_DWORD ***)(v282 + 160);
        unsigned __int16 v162 = v150 + byte_20EC0B6[~(-1 << v148) & (unint64_t)*v147];
        if (*(unsigned __int16 *)(v146 + 8) != v162)
        {
          long long v164 = (_DWORD *)(*(void *)v146 + 12 * v162);
          if ((_DWORD **)v146 != v161) {
            goto LABEL_164;
          }
          goto LABEL_172;
        }
        v146 += 16;
        if ((_DWORD **)v146 == v161) {
          goto LABEL_181;
        }
        while (1)
        {
          uint64_t v163 = (_DWORD **)v146;
          if (*(_WORD *)(v146 + 8)) {
            break;
          }
          v146 += 16;
          if (v163 + 2 == v161)
          {
            uint64_t v146 = *(void *)(v282 + 160);
            break;
          }
        }
        long long v164 = *v163;
        if ((_DWORD **)v146 != v161)
        {
LABEL_164:
          if (*(void *)(v282 + 144))
          {
            while (*(_DWORD *)(v282 + 136) == *v164)
            {
              v164 += 3;
              if (v164 == (_DWORD *)(*(void *)v146 + 12 * *(unsigned __int16 *)(v146 + 8)))
              {
                while (1)
                {
                  v146 += 16;
                  if ((_DWORD **)v146 == v161) {
                    goto LABEL_181;
                  }
                  if (*(_WORD *)(v146 + 8))
                  {
                    long long v164 = *(_DWORD **)v146;
                    break;
                  }
                }
              }
              if ((_DWORD **)v146 == v161) {
                break;
              }
            }
          }
        }
LABEL_172:
        if ((_DWORD **)v146 == v161)
        {
LABEL_181:
          unsigned int v166 = v280;
          goto LABEL_182;
        }
        uint64_t v165 = (v164[2] - v164[1]);
        unsigned int v166 = v280;
        if (v165)
        {
          unsigned int v277 = v104;
          uint64_t v167 = 0;
          unsigned int v168 = 0;
          do
          {
            uint64_t v169 = v165;
            uint64_t v170 = (_OWORD *)sub_AFC890(v281, v143, v168);
            long long v171 = v170[2];
            long long v172 = v170[3];
            long long v173 = v170[1];
            v292[0] = *v170;
            long long v293 = v171;
            long long v294 = v172;
            v292[1] = v173;
            v167 |= sub_AFC318((uint64_t)v281, (uint64_t)v292, 0, 0, 1) & 0xFF00;
            uint64_t v165 = v169;
            ++v168;
          }
          while (v169 != v168);
          unsigned int v104 = v277;
          if (v167)
          {
            LODWORD(v292[0]) = 0;
            uint64_t v174 = *(void *)(v282 + 192);
            uint64_t v175 = v174
                 + ((unint64_t)*(unsigned int *)(sub_AFAD84((uint64_t)v281, (unsigned int *)v292) + 4) << 6);
            LODWORD(v292[0]) = 0;
            uint64_t v176 = *(void *)(v282 + 192);
            uint64_t v177 = sub_AFAD84((uint64_t)v281, (unsigned int *)v292);
            uint64_t v178 = (long long *)(v176 + ((unint64_t)*(unsigned int *)(v177 + 8) << 6));
            if ((long long *)v175 != v178)
            {
              while (*(_DWORD *)(v175 + 28) != 0x7FFFFFFF)
              {
                v175 += 64;
                if ((long long *)v175 == v178)
                {
                  uint64_t v175 = v176 + ((unint64_t)*(unsigned int *)(v177 + 8) << 6);
                  goto LABEL_316;
                }
              }
              if ((long long *)v175 != v178)
              {
                for (uint64_t j = (long long *)(v175 + 64); j != v178; j += 4)
                {
                  if (*((_DWORD *)j + 7) != 0x7FFFFFFF)
                  {
                    long long v262 = *j;
                    long long v263 = j[1];
                    long long v264 = j[3];
                    *(_OWORD *)(v175 + 32) = j[2];
                    *(_OWORD *)(v175 + 48) = v264;
                    *(_OWORD *)uint64_t v175 = v262;
                    *(_OWORD *)(v175 + 16) = v263;
                    v175 += 64;
                  }
                }
              }
            }
LABEL_316:
            LODWORD(v292[0]) = 0;
            uint64_t v265 = *(void *)(v282 + 192);
            uint64_t v266 = sub_AFAD84((uint64_t)v281, (unsigned int *)v292);
            sub_AFA9C0((uint64_t)v281, 0, (char *)v175, (unsigned char *)(v265 + ((unint64_t)*(unsigned int *)(v266 + 8) << 6)));
          }
        }
LABEL_182:
        LODWORD(v292[0]) = 0;
        uint64_t v179 = *(void *)(v282 + 192);
        uint64_t v180 = v179 + ((unint64_t)*(unsigned int *)(sub_AFAD84((uint64_t)v281, (unsigned int *)v292) + 4) << 6);
        LODWORD(v292[0]) = 0;
        uint64_t v181 = *(void *)(v282 + 192);
        uint64_t v182 = v181 + ((unint64_t)*(unsigned int *)(sub_AFAD84((uint64_t)v281, (unsigned int *)v292) + 8) << 6);
        if (v180 != v182)
        {
          unsigned int v183 = v284;
          do
          {
            *(_DWORD *)uint64_t v180 = v166;
            *(_DWORD *)(v180 + 16) = -1;
            int32x2_t v184 = *(int32x2_t *)(v180 + 28);
            *(_DWORD *)(v180 + 12) = v184.i32[0];
            int v185 = *((_DWORD *)v183 + 2);
            int v186 = v185 / 10;
            int v187 = v185 % 10;
            if (v185 < 0) {
              char v188 = -5;
            }
            else {
              char v188 = 5;
            }
            *(int32x2_t *)(v180 + 28) = vadd_s32(vdup_n_s32(v186+ (((103 * (char)(v188 + v187)) >> 15) & 1)+ ((103 * (char)(v188 + v187)) >> 10)), v184);
            v180 += 64;
          }
          while (v180 != v182);
        }
        if (*(unsigned char *)(v282 + 20))
        {
          int v275 = *(_DWORD *)(v282 + 96) + *(_DWORD *)(v282 + 96) * *(_DWORD *)(v282 + 416) + 1;
          int v278 = *(_DWORD *)(v282 + 96);
          uint64_t v189 = *(void *)(v282 + 48);
          if (v189) {
            goto LABEL_190;
          }
LABEL_234:
          int v213 = 2147483646;
LABEL_235:
          if (!sub_AFA648(v281, 0, v273 + v278 * (v104 + 1), v278 * (v104 + 1) + 1, v275, v213)) {
            goto LABEL_239;
          }
          if (*(void *)(v282 + 304) <= (unint64_t)v104) {
            sub_A3E96C((uint64_t)v272, v104 + 1, 0);
          }
          uint64_t v217 = *v272;
          unint64_t v218 = (unint64_t)v104 >> 6;
          uint64_t v219 = 1 << v104;
          if ((*(void *)(*v272 + 8 * v218) & (1 << v104)) != 0)
          {
LABEL_239:
            unint64_t v9 = (unint64_t)v285;
            int v6 = (void *)((char *)v284 + 12);
            unsigned __int16 v284 = v6;
            if (v6 != v285) {
              goto LABEL_240;
            }
LABEL_292:
            int v6 = v286;
            unint64_t v10 = v287[0];
            unsigned __int16 v284 = v286;
            int v8 = 1;
            unsigned __int8 v288 = 1;
            a1 = v282;
            if (*(unsigned char *)(v283 + 16)) {
              goto LABEL_293;
            }
            goto LABEL_10;
          }
          uint64_t v220 = (void *)v282;
          unsigned __int16 v222 = *(char **)(v282 + 328);
          unint64_t v221 = *(void *)(v282 + 336);
          if ((unint64_t)v222 < v221)
          {
            *(_DWORD *)unsigned __int16 v222 = v104;
            uint64_t v223 = (uint64_t)(v222 + 4);
            goto LABEL_291;
          }
          __int16 v224 = (char *)*v268;
          uint64_t v225 = v222 - (unsigned char *)*v268;
          uint64_t v226 = v225 >> 2;
          unint64_t v227 = (v225 >> 2) + 1;
          if (v227 >> 62) {
            sub_2E00();
          }
          uint64_t v228 = v221 - (void)v224;
          if (v228 >> 1 > v227) {
            unint64_t v227 = v228 >> 1;
          }
          if ((unint64_t)v228 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v227 = 0x3FFFFFFFFFFFFFFFLL;
          }
          unint64_t v279 = v227;
          if (v227)
          {
            if (!(v227 >> 62))
            {
              uint64_t v229 = operator new(4 * v227);
              uint64_t v230 = (unsigned int *)&v229[4 * v226];
              unsigned int *v230 = v104;
              uint64_t v223 = (uint64_t)(v230 + 1);
              if (v222 != v224) {
                goto LABEL_252;
              }
LABEL_265:
              int v233 = (void *)v282;
              unint64_t v232 = v279;
              goto LABEL_288;
            }
LABEL_319:
            sub_188D718();
          }
          uint64_t v229 = 0;
          uint64_t v230 = (unsigned int *)(4 * v226);
          *(_DWORD *)(4 * v226) = v104;
          uint64_t v223 = 4 * v226 + 4;
          if (v222 == v224) {
            goto LABEL_265;
          }
LABEL_252:
          unint64_t v231 = v222 - 4 - v224;
          unint64_t v232 = v279;
          if (v231 >= 0x2C)
          {
            int v233 = (void *)v282;
            if ((unint64_t)(v222 - &v229[v225]) >= 0x20)
            {
              uint64_t v248 = (v231 >> 2) + 1;
              uint64_t v249 = 4 * (v248 & 0x7FFFFFFFFFFFFFF8);
              unint64_t v250 = &v222[-v249];
              uint64_t v230 = (unsigned int *)((char *)v230 - v249);
              uint64_t v251 = &v229[4 * v226 - 16];
              uint64_t v252 = v222 - 16;
              uint64_t v253 = v248 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v254 = *(_OWORD *)v252;
                *(v251 - 1) = *((_OWORD *)v252 - 1);
                *uint64_t v251 = v254;
                v251 -= 2;
                v252 -= 32;
                v253 -= 8;
              }
              while (v253);
              unsigned __int16 v222 = v250;
              if (v248 == (v248 & 0x7FFFFFFFFFFFFFF8)) {
                goto LABEL_288;
              }
            }
          }
          else
          {
            int v233 = (void *)v282;
          }
          do
          {
            unsigned int v255 = *((_DWORD *)v222 - 1);
            v222 -= 4;
            *--uint64_t v230 = v255;
          }
          while (v222 != v224);
LABEL_288:
          v233[40] = v230;
          v233[41] = v223;
          v233[42] = &v229[4 * v232];
          if (v224)
          {
            uint64_t v256 = v223;
            operator delete(v224);
            uint64_t v223 = v256;
            uint64_t v217 = *v272;
          }
          uint64_t v220 = v233;
LABEL_291:
          v220[41] = v223;
          *(void *)(v217 + 8 * v218) |= v219;
          unint64_t v9 = (unint64_t)v285;
          int v6 = (void *)((char *)v284 + 12);
          unsigned __int16 v284 = v6;
          if (v6 == v285) {
            goto LABEL_292;
          }
LABEL_240:
          int v8 = v288;
          a1 = v282;
          unint64_t v10 = v287[0];
          if (*(unsigned char *)(v283 + 16))
          {
LABEL_293:
            if (v8) {
              unint64_t v257 = v10;
            }
            else {
              unint64_t v257 = v9;
            }
            if ((unint64_t)v6 < v257)
            {
              while (1)
              {
                unint64_t v259 = __ROR8__(*v6, 32);
                if (HIDWORD(v259) == 1 && (v259 + 3) < 2) {
                  break;
                }
                if (sub_2AB7E4(**(void **)(v283 + 4120)))
                {
                  LOBYTE(v8) = v288;
                  int v6 = v284;
                  unint64_t v9 = (unint64_t)v285;
                  break;
                }
                unint64_t v9 = (unint64_t)v285;
                int v6 = (void *)((char *)v284 + 12);
                unsigned __int16 v284 = v6;
                if (v6 == v285)
                {
                  int v6 = v286;
                  unsigned __int16 v284 = v286;
                  LOBYTE(v8) = 1;
                  unsigned __int8 v288 = 1;
                  if ((unint64_t)v286 >= v287[0]) {
                    break;
                  }
                }
                else
                {
                  LOBYTE(v8) = v288;
                  char v258 = &v285;
                  if (v288) {
                    char v258 = v287;
                  }
                  if ((unint64_t)v6 >= *v258) {
                    break;
                  }
                }
              }
              unint64_t v10 = v287[0];
            }
          }
LABEL_10:
          if ((_BYTE)v8) {
            unint64_t v9 = v10;
          }
          if ((unint64_t)v6 >= v9) {
            goto LABEL_3;
          }
          goto LABEL_13;
        }
        int v275 = -1;
        int v278 = *(_DWORD *)(v282 + 96);
        uint64_t v189 = *(void *)(v282 + 48);
        if (!v189) {
          goto LABEL_234;
        }
LABEL_190:
        unsigned int v190 = 0;
        unsigned int v191 = *(_DWORD *)(v282 + 100) + v271;
        while (2)
        {
          while (2)
          {
            LODWORD(v292[0]) = (v104 << *(_DWORD *)v189) | (v191 - v190);
            if (*(void *)(v189 + 88) == *(void *)(v189 + 48)
              || (unint64_t v192 = sub_AD72DC(v189 + 8, (unsigned int *)v292), v192 == -1))
            {
LABEL_219:
              int v213 = *(_DWORD *)(v189 + 4);
              v190 += 2;
              if (v213 != 0x7FFFFFFF || v190 > v191) {
                goto LABEL_235;
              }
              continue;
            }
            break;
          }
          uint64_t v193 = *(void *)(v189 + 56);
          int v194 = (_DWORD **)(v193 + 16 * (v192 / 0x30));
          uint64_t v195 = (unsigned __int8 *)v194 + 10;
          int v196 = v192 % 0x30;
          if ((unsigned __int16)(v192 % 0x30) >= 9u)
          {
            __int16 v197 = 0;
            uint64_t v198 = (unsigned __int16)(v192 % 0x30 - 9) >> 3;
            if ((unsigned __int16)(v192 % 0x30 - 9) >> 3)
            {
              __int16 v199 = 0;
              uint64_t v200 = v198 + 1;
              uint64_t v201 = (v198 + 1) & 0x3FFE;
              unsigned __int16 v202 = v196 - 8 * v201;
              int v203 = &v195[v201];
              uint64_t v204 = (unsigned __int8 *)(v193 + 16 * (v192 / 0x30) + 11);
              uint64_t v205 = v201;
              do
              {
                uint64_t v206 = *(v204 - 1);
                int v207 = *v204;
                v204 += 2;
                v197 += byte_20EBDB6[v206];
                v199 += byte_20EBDB6[v207];
                v205 -= 2;
              }
              while (v205);
              v197 += v199;
              if (v200 == v201)
              {
LABEL_202:
                v195 += ((unsigned __int16)(v196 - 9) >> 3) + 1;
                LOBYTE(v196) = v202;
                goto LABEL_203;
              }
            }
            else
            {
              unsigned __int16 v202 = v192 % 0x30;
              int v203 = (unsigned __int8 *)v194 + 10;
            }
            do
            {
              int v208 = *v203++;
              v197 += byte_20EBDB6[v208];
              v202 -= 8;
            }
            while (v202 > 8u);
            goto LABEL_202;
          }
          __int16 v197 = 0;
LABEL_203:
          __int16 v209 = *(_DWORD ***)(v189 + 64);
          unsigned __int16 v210 = v197 + byte_20EBDB6[~(-1 << v196) & (unint64_t)*v195];
          if (*((unsigned __int16 *)v194 + 4) == v210)
          {
            v194 += 2;
            if (v194 == v209) {
              goto LABEL_219;
            }
            while (1)
            {
              unint64_t v211 = v194;
              if (*((_WORD *)v194 + 4)) {
                break;
              }
              v194 += 2;
              if (v211 + 2 == v209)
              {
                int v194 = *(_DWORD ***)(v189 + 64);
                break;
              }
            }
            uint64_t v212 = *v211;
            if (v194 == v209) {
              goto LABEL_219;
            }
          }
          else
          {
            uint64_t v212 = &(*v194)[2 * v210];
            if (v194 == v209) {
              goto LABEL_219;
            }
          }
          if (*(void *)(v189 + 48))
          {
            while (*(_DWORD *)(v189 + 40) == *v212)
            {
              v212 += 2;
              if (v212 == &(*v194)[2 * *((unsigned __int16 *)v194 + 4)])
              {
                while (1)
                {
                  v194 += 2;
                  if (v194 == v209) {
                    goto LABEL_219;
                  }
                  if (*((_WORD *)v194 + 4))
                  {
                    uint64_t v212 = *v194;
                    break;
                  }
                }
              }
              if (v194 == v209) {
                break;
              }
            }
          }
          BOOL v39 = v194 == v209;
          uint64_t v215 = v212 + 1;
          if (v39) {
            uint64_t v215 = (int *)(v189 + 4);
          }
          int v213 = *v215;
          v190 += 2;
          if (*v215 != 0x7FFFFFFF || v190 > v191) {
            goto LABEL_235;
          }
          continue;
        }
      }
LABEL_16:
      ++v11;
    }
  }
LABEL_317:
  double result = sub_72688((uint64_t)v289) + *(double *)(a1 + 568);
  *(double *)(a1 + 568) = result;
  return result;
}

BOOL sub_AFA090(uint64_t a1)
{
  if (*(void *)a1 == -1) {
    return 0;
  }
  uint64_t v25 = *(void *)(a1 + 192);
  uint64_t v26 = *(void *)(a1 + 208);
  uint64_t v23 = 12 * *(void *)(a1 + 176);
  uint64_t v24 = 8 * (*(void *)(a1 + 232) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v2 = 8 * (*(void *)(a1 + 264) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v3 = *(void *)(a1 + 288);
  uint64_t v21 = *(void *)(a1 + 320);
  uint64_t v22 = *(void *)(a1 + 272);
  uint64_t v4 = 8 * (*(void *)(a1 + 312) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v5 = *(void *)(a1 + 360);
  uint64_t v6 = *(void *)(a1 + 336);
  uint64_t v19 = *(void *)(a1 + 392);
  uint64_t v20 = *(void *)(a1 + 344);
  uint64_t v7 = 8 * (*(void *)(a1 + 384) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v8 = *(void *)(a1 + 408);
  uint64_t v9 = sub_BD6170((void *)(a1 + 424));
  uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 104)
      - *(void *)(*(void *)(a1 + 32) + 88)
      + *(void *)(*(void *)(a1 + 40) + 104)
      + 12 * (*(void *)(*(void *)(a1 + 40) + 72) + *(void *)(*(void *)(a1 + 32) + 72))
      - *(void *)(*(void *)(a1 + 40) + 88);
  uint64_t v11 = *(void *)(a1 + 48);
  if (v11) {
    v10 += 8 * *(void *)(v11 + 80);
  }
  unint64_t v31 = v23
      + v26
      - v25
      + v24
      + v3
      + v2
      - v22
      + v6
      + v4
      + v5
      - (v21
       + v20)
      + v7
      + v8
      - v19
      + sub_A409C0(*(uint64_t **)(a1 + 24))
      + v9
      + v10;
  BOOL v12 = v31 > *(void *)a1;
  if (v31 > *(void *)a1 && sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v29);
    uint64_t v13 = sub_188FC78(v29, (uint64_t)"Exceeded memory limit of ", 25);
    uint64_t v14 = (void *)sub_38EC58((uint64_t)v13, (unint64_t *)a1);
    unint64_t v15 = sub_188FC78(v14, (uint64_t)" in directional McSPA (", 23);
    unint64_t v16 = (void *)sub_38EC58((uint64_t)v15, &v31);
    uint64_t v17 = sub_188FC78(v16, (uint64_t)") in round ", 11);
    std::ostream::operator<<();
    sub_188FC78(v17, (uint64_t)"; terminating algorithm.", 24);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v28 < 0) {
      operator delete(__p);
    }
    if (v30 < 0) {
      operator delete((void *)v29[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return v12;
}

void sub_AFA394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a24 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a25);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_AFA3E0(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 100);
  if (v1)
  {
    uint64_t v2 = result;
    int v3 = 0;
    uint64_t v4 = (void *)(result + 104);
    do
    {
      unsigned int v15 = 0;
      uint64_t v5 = *(void *)(v2 + 192);
      uint64_t v6 = (char *)(v5 + ((unint64_t)*(unsigned int *)(sub_AFAD84((uint64_t)v4, &v15) + 4) << 6));
      unsigned int v15 = 0;
      uint64_t v7 = *(void *)(v2 + 192);
      uint64_t v8 = sub_AFAD84((uint64_t)v4, &v15);
      sub_AFA9C0((uint64_t)v4, 0, v6, (unsigned char *)(v7 + ((unint64_t)*(unsigned int *)(v8 + 8) << 6)));
      sub_AFC9F0(v4, v3 + *(_DWORD *)(v2 + 96) + *(_DWORD *)(v2 + 96) * *(_DWORD *)(v2 + 416) + 2, 0);
      unsigned int v15 = 0;
      uint64_t v9 = *(void *)(v2 + 192);
      uint64_t v10 = v9 + ((unint64_t)*(unsigned int *)(sub_AFAD84((uint64_t)v4, &v15) + 4) << 6);
      unsigned int v15 = 0;
      uint64_t v11 = *(void *)(v2 + 192);
      double result = sub_AFAD84((uint64_t)v4, &v15);
      uint64_t v12 = v11 + ((unint64_t)*(unsigned int *)(result + 8) << 6);
      if (v10 != v12)
      {
        double v13 = *(double *)(v2 + 592);
        uint64_t v14 = *(void *)(v2 + 584);
        do
        {
          double v13 = v13 + 1.0;
          v14 += *(int *)(v10 + 28);
          v10 += 64;
        }
        while (v10 != v12);
        *(double *)(v2 + 592) = v13;
        *(void *)(v2 + 584) = v14;
      }
      ++v3;
    }
    while (v3 != v1);
  }
  return result;
}

uint64_t sub_AFA518(void *a1, long long *a2, unsigned int a3, int a4, int a5)
{
  unsigned int v28 = a3;
  sub_AFC6C4(a1, &v28, v24);
  uint64_t v10 = a1[6];
  uint64_t v11 = a1[7];
  unsigned int v15 = a1;
  uint64_t v16 = v10;
  uint64_t v17 = v11;
  uint64_t v18 = v11;
  uint64_t v19 = 0;
  uint64_t v20 = v10;
  uint64_t v21 = v11;
  uint64_t v22 = v11;
  uint64_t v23 = 0;
  sub_AE47A0(&v15);
  if (v24[1] == v16 && v25 == v17 && v26 == v18 && (v26 == v25 || v27 == v19)
    || *(_DWORD *)(v27 + 8) == *(_DWORD *)(v27 + 4))
  {
    sub_AFBE70((uint64_t)a1, a3, a2);
    return 1;
  }
  else
  {
    __int16 v13 = sub_AFC318((uint64_t)a1, (uint64_t)a2, a3, a4, a5);
    char v14 = v13;
    if ((v13 & 0x100) != 0) {
      sub_AFC5B8((uint64_t)a1, a3);
    }
    return v14 & 1;
  }
}

BOOL sub_AFA648(void *a1, unsigned int a2, unsigned int a3, unsigned int a4, int a5, int a6)
{
  v56[0] = a2;
  sub_AFC6C4(a1, v56, v53);
  uint64_t v12 = a1[6];
  uint64_t v13 = a1[7];
  uint64_t v45 = a1;
  *(void *)&long long v46 = v12;
  *((void *)&v46 + 1) = v13;
  uint64_t v47 = v13;
  uint64_t v48 = 0;
  uint64_t v49 = v12;
  uint64_t v50 = v13;
  uint64_t v51 = v13;
  uint64_t v52 = 0;
  sub_AE47A0(&v45);
  if (*(_OWORD *)&v53[8] == v46
    && *(void *)&v53[24] == v47
    && (*(void *)&v53[24] == *(void *)&v53[16] || (void)v54 == v48))
  {
    goto LABEL_7;
  }
  int v14 = *(_DWORD *)(v54 + 4);
  int v15 = *(_DWORD *)(v54 + 8);
  int v16 = v15 - v14;
  if (v15 == v14) {
    goto LABEL_7;
  }
  if (a6 == 0x7FFFFFFF)
  {
    unsigned int v17 = 0;
    do
      sub_AFC890(a1, a2, v17++);
    while (v16 != v17);
LABEL_7:
    LOBYTE(v18) = 0;
    return v18 != 0;
  }
  unsigned int v43 = a3;
  unsigned int v44 = a4;
  if (a5 == -1)
  {
    __int16 v18 = 0;
    unsigned int v20 = 0;
    do
    {
      uint64_t v21 = (_OWORD *)sub_AFC890(a1, a2, v20);
      long long v22 = v21[2];
      long long v23 = v21[3];
      long long v24 = v21[1];
      *(_OWORD *)int v53 = *v21;
      *(_OWORD *)&v53[16] = v24;
      long long v54 = v22;
      long long v55 = v23;
      if (SHIDWORD(v24) <= a6)
      {
        __int16 v25 = sub_AFC318((uint64_t)a1, (uint64_t)v53, a4, 0, 1);
        if ((_BYTE)v25)
        {
          sub_AFC318((uint64_t)a1, (uint64_t)v53, a3, 1, 1);
          *(void *)(v26 + 52) = -1;
          *(_DWORD *)(v26 + 60) = 0x7FFFFFFF;
        }
        v18 |= v25 & 0xFF00 | v25;
      }
      ++v20;
    }
    while (v16 != v20);
  }
  else
  {
    __int16 v18 = 0;
    unsigned int v27 = 0;
    do
    {
      char v30 = (_OWORD *)sub_AFC890(a1, a2, v27);
      long long v31 = v30[2];
      long long v32 = v30[3];
      long long v33 = v30[1];
      *(_OWORD *)int v53 = *v30;
      *(_OWORD *)&v53[16] = v33;
      long long v54 = v31;
      long long v55 = v32;
      if (SHIDWORD(v33) <= a6)
      {
        LODWORD(v45) = a5;
        uint64_t v34 = a1[11];
        uint64_t v35 = v34 + ((unint64_t)*(unsigned int *)(sub_AFAD84((uint64_t)a1, (unsigned int *)&v45) + 4) << 6);
        LODWORD(v45) = a5;
        uint64_t v36 = a1[11];
        uint64_t v37 = v36 + ((unint64_t)*(unsigned int *)(sub_AFAD84((uint64_t)a1, (unsigned int *)&v45) + 8) << 6);
        if (v35 == v37)
        {
LABEL_36:
          unint64_t v41 = sub_AFC318((uint64_t)a1, (uint64_t)v53, v44, 0, 1);
          unint64_t v29 = v41 >> 8;
          __int16 v28 = v41;
          if ((_BYTE)v41)
          {
            sub_AFC318((uint64_t)a1, (uint64_t)v53, v43, 1, 1);
            *(void *)(v42 + 52) = -1;
            *(_DWORD *)(v42 + 60) = 0x7FFFFFFF;
          }
        }
        else
        {
          while (1)
          {
            int v38 = *(_DWORD *)(v35 + 28);
            if (v38 != 0x7FFFFFFF && v38 <= *(_DWORD *)&v53[28] && *(_DWORD *)(v35 + 32) <= (int)v54)
            {
              unsigned int v40 = *(_DWORD *)(v35 + 36);
              if (v40 <= DWORD1(v54)
                && (v40 != DWORD1(v54)
                 || v38 != *(_DWORD *)&v53[28]
                 || 10 * v38 - *(_DWORD *)(v35 + 44) <= 10 * *(_DWORD *)&v53[28] - HIDWORD(v54))
                && (*(unsigned __int8 *)(v35 + 48) & ~v55) == 0)
              {
                break;
              }
            }
            v35 += 64;
            if (v35 == v37) {
              goto LABEL_36;
            }
          }
          __int16 v28 = 0;
          LOWORD(v29) = 0;
        }
        __int16 v18 = v28 | v18 | v18 & 0xFF00 | ((_WORD)v29 << 8);
      }
      ++v27;
    }
    while (v27 != v16);
  }
  if ((v18 & 0xFF00) != 0)
  {
    sub_AFC5B8((uint64_t)a1, v43);
    sub_AFC5B8((uint64_t)a1, v44);
  }
  return v18 != 0;
}

char *sub_AFA9C0(uint64_t a1, unsigned int a2, char *a3, unsigned char *a4)
{
  unsigned int v49 = a2;
  uint64_t v7 = sub_AFAD84(a1, &v49);
  unsigned int v50 = v49;
  uint64_t v8 = *(void *)(a1 + 88);
  if ((unsigned char *)(v8 + ((unint64_t)*(unsigned int *)(sub_AFAD84(a1, &v50) + 8) << 6)) == a4)
  {
    uint64_t v26 = *(void *)(a1 + 112);
    uint64_t v27 = *(void *)(a1 + 88);
    unint64_t v28 = (uint64_t)&a3[-v27] >> 6;
    if ((uint64_t)&a3[-v27] <= -64) {
      uint64_t v29 = -(uint64_t)((63 - v28) >> 6);
    }
    else {
      uint64_t v29 = v28 >> 6;
    }
    char v30 = (void *)(v26 + 8 * v29);
    uint64_t v31 = (uint64_t)&a4[-v27];
    uint64_t v32 = v31 >> 6;
    if (v31 <= -64) {
      unint64_t v33 = -(uint64_t)((unint64_t)(63 - (v31 >> 6)) >> 6);
    }
    else {
      unint64_t v33 = (unint64_t)(v31 >> 6) >> 6;
    }
    unint64_t v34 = (v32 & 0x3F) - (v28 & 0x3F) + 8 * (v26 + 8 * v33 - (void)v30);
    if (v34)
    {
      if ((v28 & 0x3F) != 0)
      {
        if (64 - (v28 & 0x3F) >= v34) {
          uint64_t v35 = (v32 & 0x3F) - (v28 & 0x3F) + 8 * (v26 + 8 * v33 - (void)v30);
        }
        else {
          uint64_t v35 = 64 - (v28 & 0x3F);
        }
        *v30++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - (v28 & 0x3Fu) - v35)) & (-1 << (v28 & 0x3F)));
        v34 -= v35;
      }
      if (v34 >= 0x40) {
        bzero(v30, 8 * (v34 >> 6));
      }
      if ((v34 & 0x3F) != 0) {
        v30[v34 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v34 & 0x3F));
      }
    }
    *(_DWORD *)(v7 + 8) = v28;
  }
  else
  {
    unsigned int v50 = v49;
    uint64_t v9 = *(void *)(a1 + 88);
    if ((char *)(v9 + ((unint64_t)*(unsigned int *)(sub_AFAD84(a1, &v50) + 4) << 6)) == a3)
    {
      uint64_t v36 = *(void *)(a1 + 88);
      unint64_t v37 = (uint64_t)&a3[-v36] >> 6;
      if ((uint64_t)&a3[-v36] <= -64) {
        uint64_t v38 = -(uint64_t)((63 - v37) >> 6);
      }
      else {
        uint64_t v38 = v37 >> 6;
      }
      BOOL v39 = (void *)(*(void *)(a1 + 112) + 8 * v38);
      uint64_t v40 = (uint64_t)&a4[-v36];
      uint64_t v41 = v40 >> 6;
      if (v40 <= -64) {
        unint64_t v42 = -(uint64_t)((unint64_t)(63 - (v40 >> 6)) >> 6);
      }
      else {
        unint64_t v42 = (unint64_t)(v40 >> 6) >> 6;
      }
      char v43 = v37 & 0x3F;
      unint64_t v44 = (v41 & 0x3F) - (v37 & 0x3F) + 8 * (8 * v42 - 8 * v38);
      if (v44)
      {
        int v45 = v37 & 0x3F;
        if (v45)
        {
          unint64_t v46 = (64 - v45);
          if (v46 >= v44) {
            unint64_t v47 = v44;
          }
          else {
            unint64_t v47 = v46;
          }
          *v39++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (v46 - v47)) & (-1 << v43));
          v44 -= v47;
        }
        if (v44 >= 0x40) {
          bzero(v39, 8 * (v44 >> 6));
        }
        if ((v44 & 0x3F) != 0) {
          v39[v44 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v44 & 0x3F));
        }
      }
      *(_DWORD *)(v7 + 4) = v41;
      return a4;
    }
    else
    {
      unsigned int v50 = v49;
      uint64_t v10 = *(void *)(a1 + 88);
      uint64_t v11 = (unsigned char *)(v10 + ((unint64_t)*(unsigned int *)(sub_AFAD84(a1, &v50) + 8) << 6));
      int64_t v12 = v11 - a4;
      if (v11 != a4) {
        memmove(a3, a4, v11 - a4);
      }
      uint64_t v13 = &a3[v12];
      uint64_t v14 = *(void *)(a1 + 112);
      uint64_t v15 = *(void *)(a1 + 88);
      unint64_t v16 = (uint64_t)&v13[-v15] >> 6;
      if ((uint64_t)&v13[-v15] <= -64) {
        uint64_t v17 = -(uint64_t)((63 - v16) >> 6);
      }
      else {
        uint64_t v17 = v16 >> 6;
      }
      __int16 v18 = (void *)(v14 + 8 * v17);
      unsigned int v50 = v49;
      uint64_t v19 = v15 + ((unint64_t)*(unsigned int *)(sub_AFAD84(a1, &v50) + 8) << 6);
      uint64_t v20 = *(void *)(a1 + 88);
      uint64_t v21 = v19 - v20;
      uint64_t v22 = v21 >> 6;
      if (v21 <= -64) {
        unint64_t v23 = -(uint64_t)((unint64_t)(63 - (v21 >> 6)) >> 6);
      }
      else {
        unint64_t v23 = (unint64_t)(v21 >> 6) >> 6;
      }
      unint64_t v24 = (v22 & 0x3F) - (v16 & 0x3F) + 8 * (v14 + 8 * v23 - (void)v18);
      if (v24)
      {
        if ((v16 & 0x3F) != 0)
        {
          if (64 - (v16 & 0x3F) >= v24) {
            unint64_t v25 = v24;
          }
          else {
            unint64_t v25 = 64 - (v16 & 0x3F);
          }
          *v18++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - (v16 & 0x3Fu) - v25)) & (-1 << (v16 & 0x3F)));
          v24 -= v25;
        }
        if (v24 >= 0x40) {
          bzero(v18, 8 * (v24 >> 6));
        }
        if ((v24 & 0x3F) != 0) {
          v18[v24 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v24 & 0x3F));
        }
      }
      *(_DWORD *)(v7 + 8) = (unint64_t)&v13[-v20] >> 6;
    }
  }
  return a3;
}

uint64_t sub_AFAD84(uint64_t a1, unsigned int *a2)
{
  unint64_t v4 = sub_AFAFE4(a1, a2);
  if (v4 == -1)
  {
    unint64_t v25 = v5;
    if (sub_AFB3D8(a1, 1))
    {
      *(_DWORD *)unint64_t v34 = *a2;
      *(void *)&v34[4] = 0;
      uint64_t v36 = *(void *)v34;
      int v37 = 0;
      sub_AFB70C(a1, (unsigned int *)&v36, (uint64_t)v34);
    }
    else
    {
      *(_DWORD *)unint64_t v34 = *a2;
      *(void *)&v34[4] = 0;
      uint64_t v36 = *(void *)v34;
      int v37 = 0;
      sub_AFB92C(a1, &v36, v25, v34);
    }
    return v35;
  }
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v6 = *(uint64_t **)(a1 + 56);
  unint64_t v8 = v4 / 0x30;
  uint64_t v9 = (uint64_t *)(v7 + 16 * (v4 / 0x30));
  uint64_t v11 = (unsigned __int8 *)v9 + 10;
  uint64_t v10 = *v9;
  int v12 = v4 % 0x30;
  if ((unsigned __int16)(v4 % 0x30) < 9u)
  {
    __int16 v15 = 0;
    goto LABEL_16;
  }
  unsigned __int16 v13 = v12 - 9;
  unsigned __int16 v14 = v4 % 0x30 - 9;
  __int16 v15 = 0;
  uint64_t v16 = v14 >> 3;
  if (v16)
  {
    __int16 v17 = 0;
    uint64_t v18 = v16 + 1;
    uint64_t v19 = (v16 + 1) & 0x3FFE;
    LOWORD(v12) = v12 - 8 * v19;
    uint64_t v20 = &v11[v19];
    uint64_t v21 = (unsigned __int8 *)(v7 + 16 * v8 + 11);
    uint64_t v22 = v19;
    do
    {
      uint64_t v23 = *(v21 - 1);
      int v24 = *v21;
      v21 += 2;
      v15 += byte_20EC0B6[v23];
      v17 += byte_20EC0B6[v24];
      v22 -= 2;
    }
    while (v22);
    v15 += v17;
    if (v18 == v19) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v20 = (unsigned __int8 *)v9 + 10;
  }
  do
  {
    int v27 = *v20++;
    v15 += byte_20EC0B6[v27];
    LOWORD(v12) = v12 - 8;
  }
  while ((unsigned __int16)v12 > 8u);
LABEL_15:
  v11 += (v13 >> 3) + 1;
LABEL_16:
  unsigned __int16 v28 = v15 + byte_20EC0B6[~(-1 << v12) & (unint64_t)*v11];
  int v29 = *((unsigned __int16 *)v9 + 4);
  char v30 = v9 + 2;
  if (v29 != v28 || v30 == v6) {
    return v10 + 12 * v28;
  }
  uint64_t v32 = v7 + 16 * v8 + 32;
  do
  {
    if (*(_WORD *)(v32 - 8)) {
      BOOL v33 = 1;
    }
    else {
      BOOL v33 = v32 == (void)v6;
    }
    v32 += 16;
  }
  while (!v33);
  return *(void *)(v32 - 32);
}

unint64_t sub_AFAFE4(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = *(void *)(a1 + 72) - 1;
  uint64_t v4 = *a2;
  unint64_t result = v3 & v4;
  uint64_t v6 = *(void *)(a1 + 48);
  unint64_t v7 = (v3 & v4) / 0x30uLL;
  LODWORD(v8) = (v3 & v4) % 0x30;
  if ((*(unsigned __int8 *)(v6 + 16 * v7 + (v8 >> 3) + 10) >> (v8 & 7)))
  {
    if (*(void *)(a1 + 40))
    {
      uint64_t v9 = 0;
      uint64_t v10 = v6 + 11;
      int v11 = *(_DWORD *)(a1 + 32);
      uint64_t v12 = -1;
      while (1)
      {
        unsigned __int16 v13 = (uint64_t *)(v6 + 16 * v7);
        uint64_t v16 = *v13;
        __int16 v15 = (unsigned __int8 *)v13 + 10;
        uint64_t v14 = v16;
        if ((unsigned __int16)v8 < 9u)
        {
          __int16 v18 = 0;
          uint64_t v21 = v15;
          LOBYTE(v19) = v8;
          goto LABEL_16;
        }
        uint64_t v17 = ((unsigned __int16)(v8 - 9) >> 3) + 1;
        if ((unsigned __int16)(v8 - 9) >= 8u)
        {
          __int16 v22 = 0;
          __int16 v23 = 0;
          unsigned __int16 v19 = v8 - 8 * ((((unsigned __int16)(v8 - 9) >> 3) + 1) & 0x3FFE);
          uint64_t v20 = &v15[(((unsigned __int16)(v8 - 9) >> 3) + 1) & 0x3FFE];
          uint64_t v24 = (((unsigned __int16)(v8 - 9) >> 3) + 1) & 0x3FFE;
          unint64_t v25 = (unsigned __int8 *)(v10 + 16 * v7);
          do
          {
            uint64_t v26 = *(v25 - 1);
            unsigned int v27 = *v25;
            v25 += 2;
            v22 += byte_20EC0B6[v26];
            v23 += byte_20EC0B6[v27];
            v24 -= 2;
          }
          while (v24);
          __int16 v18 = v23 + v22;
          if ((v17 & 0x3FFE) == v17) {
            goto LABEL_15;
          }
        }
        else
        {
          __int16 v18 = 0;
          unsigned __int16 v19 = v8;
          uint64_t v20 = v15;
        }
        do
        {
          unsigned int v28 = *v20++;
          v18 += byte_20EC0B6[v28];
          v19 -= 8;
        }
        while (v19 > 8u);
LABEL_15:
        uint64_t v21 = &v15[v17];
LABEL_16:
        if (v11 == *(_DWORD *)(v14
                              + 12
                              * (unsigned __int16)(v18
                                                 + byte_20EC0B6[~(-1 << v19) & (unint64_t)*v21])))
        {
          if (v12 == -1) {
            uint64_t v12 = result;
          }
          goto LABEL_6;
        }
        if ((unsigned __int16)v8 < 9u)
        {
          __int16 v30 = 0;
          goto LABEL_26;
        }
        uint64_t v29 = ((unsigned __int16)(v8 - 9) >> 3) + 1;
        if ((unsigned __int16)(v8 - 9) >= 8u)
        {
          __int16 v32 = 0;
          __int16 v33 = 0;
          LOWORD(v8) = v8 - 8 * ((((unsigned __int16)(v8 - 9) >> 3) + 1) & 0x3FFE);
          uint64_t v31 = &v15[v29 & 0x3FFE];
          uint64_t v34 = v29 & 0x3FFE;
          uint64_t v35 = (unsigned __int8 *)(v10 + 16 * v7);
          do
          {
            uint64_t v36 = *(v35 - 1);
            unsigned int v37 = *v35;
            v35 += 2;
            v32 += byte_20EC0B6[v36];
            v33 += byte_20EC0B6[v37];
            v34 -= 2;
          }
          while (v34);
          __int16 v30 = v33 + v32;
          if ((v29 & 0x3FFE) == v29) {
            goto LABEL_25;
          }
        }
        else
        {
          __int16 v30 = 0;
          uint64_t v31 = v15;
        }
        do
        {
          unsigned int v38 = *v31++;
          v30 += byte_20EC0B6[v38];
          LOWORD(v8) = v8 - 8;
        }
        while ((unsigned __int16)v8 > 8u);
LABEL_25:
        v15 += v29;
LABEL_26:
        if (v4 == *(_DWORD *)(v14
                                     + 12
                                     * (unsigned __int16)(v30
                                                        + byte_20EC0B6[~(-1 << v8) & (unint64_t)*v15])))
          return result;
LABEL_6:
        unint64_t result = (++v9 + result) & v3;
        unint64_t v7 = result / 0x30;
        unint64_t v8 = result % 0x30;
        if (((*(unsigned __int8 *)(v6 + 16 * (result / 0x30) + (v8 >> 3) + 10) >> (v8 & 7)) & 1) == 0) {
          return -1;
        }
      }
    }
    uint64_t v39 = 0;
    LODWORD(v40) = (v3 & v4) % 0x30;
    while (1)
    {
      uint64_t v41 = (uint64_t *)(v6 + 16 * v7);
      uint64_t v44 = *v41;
      char v43 = (unsigned __int8 *)v41 + 10;
      uint64_t v42 = v44;
      if ((unsigned __int16)v40 >= 9u) {
        break;
      }
      __int16 v46 = 0;
LABEL_39:
      if (v4 == *(_DWORD *)(v42
                                   + 12
                                   * (unsigned __int16)(v46
                                                      + byte_20EC0B6[~(-1 << v40) & (unint64_t)*v43])))
        return result;
      unint64_t result = (++v39 + result) & v3;
      unint64_t v7 = result / 0x30;
      unint64_t v40 = result % 0x30;
      if (((*(unsigned __int8 *)(v6 + 16 * (result / 0x30) + (v40 >> 3) + 10) >> (v40 & 7)) & 1) == 0) {
        return -1;
      }
    }
    uint64_t v45 = ((unsigned __int16)(v40 - 9) >> 3) + 1;
    if ((unsigned __int16)(v40 - 9) >= 8u)
    {
      __int16 v48 = 0;
      __int16 v49 = 0;
      LOWORD(v40) = v40 - 8 * ((((unsigned __int16)(v40 - 9) >> 3) + 1) & 0x3FFE);
      unint64_t v47 = &v43[v45 & 0x3FFE];
      uint64_t v50 = v45 & 0x3FFE;
      uint64_t v51 = (unsigned __int8 *)(v6 + 11 + 16 * v7);
      do
      {
        uint64_t v52 = *(v51 - 1);
        unsigned int v53 = *v51;
        v51 += 2;
        v48 += byte_20EC0B6[v52];
        v49 += byte_20EC0B6[v53];
        v50 -= 2;
      }
      while (v50);
      __int16 v46 = v49 + v48;
      if ((v45 & 0x3FFE) == v45) {
        goto LABEL_38;
      }
    }
    else
    {
      __int16 v46 = 0;
      unint64_t v47 = v43;
    }
    do
    {
      unsigned int v54 = *v47++;
      v46 += byte_20EC0B6[v54];
      LOWORD(v40) = v40 - 8;
    }
    while ((unsigned __int16)v40 > 8u);
LABEL_38:
    v43 += v45;
    goto LABEL_39;
  }
  return -1;
}

uint64_t sub_AFB3D8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t result = sub_AFBC7C(a1);
    unint64_t v5 = *(void *)(a1 + 80);
    if (v5 >= ~a2) {
      goto LABEL_32;
    }
  }
  else
  {
    uint64_t result = 0;
    unint64_t v5 = *(void *)(a1 + 80);
    if (v5 >= ~a2) {
      goto LABEL_32;
    }
  }
  unint64_t v6 = *(void *)(a1 + 72);
  unint64_t v7 = v5 + a2;
  if (v6 < 4 || v7 > *(void *)a1)
  {
    float v8 = *(float *)(a1 + 16);
    if (v7 >= vcvts_n_u32_f32(v8, 2uLL))
    {
      unint64_t v9 = 4;
      while ((v9 & 0x8000000000000000) == 0)
      {
        v9 *= 2;
        if (v7 < (unint64_t)(float)(v8 * (float)v9)) {
          goto LABEL_12;
        }
      }
LABEL_32:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_2E18(exception, "resize overflow");
    }
    unint64_t v9 = 4;
LABEL_12:
    if (v9 > v6)
    {
      unint64_t v10 = v5 - *(void *)(a1 + 40) + a2;
      unint64_t v11 = 4;
      if (v6 > 4) {
        goto LABEL_15;
      }
LABEL_14:
      if (v10 >= (unint64_t)(float)(v8 * (float)v11))
      {
LABEL_15:
        while ((v11 & 0x8000000000000000) == 0)
        {
          v11 *= 2;
          if (v11 >= v6) {
            goto LABEL_14;
          }
        }
        goto LABEL_32;
      }
      if (v11 < v9
        && v11 <= 0x7FFFFFFFFFFFFFFELL
        && v10 >= (unint64_t)(float)(*(float *)(a1 + 20) * (float)(2 * v11)))
      {
        v11 *= 2;
      }
      long long v29 = *(_OWORD *)(a1 + 16);
      int v30 = *(_DWORD *)(a1 + 32);
      memset(v31, 0, sizeof(v31));
      long long v32 = 0u;
      uint64x2_t v28 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_f32(*(float32x2_t *)&v29, 0)));
      BYTE8(v29) = 0;
      sub_AF3378((uint64_t)&v28, 0, (void *)a1, v11);
      int v12 = *(_DWORD *)(a1 + 32);
      *(_DWORD *)(a1 + 32) = v30;
      int v30 = v12;
      unsigned __int16 v13 = *(void **)(a1 + 40);
      uint64_t v14 = *(char **)(a1 + 48);
      *(void **)(a1 + 40) = v31[0];
      uint64x2_t v16 = *(uint64x2_t *)a1;
      long long v15 = *(_OWORD *)(a1 + 16);
      long long v17 = v29;
      *(uint64x2_t *)a1 = v28;
      *(_OWORD *)(a1 + 16) = v17;
      uint64x2_t v28 = v16;
      long long v29 = v15;
      long long v18 = *(_OWORD *)&v31[1];
      v31[0] = v13;
      v31[1] = v14;
      unsigned __int16 v19 = v31[3];
      long long v20 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)(a1 + 48) = v18;
      *(void *)(a1 + 64) = v19;
      *(_OWORD *)&v31[2] = v20;
      *(void *)&long long v18 = v32;
      long long v21 = *(_OWORD *)(a1 + 72);
      *(_OWORD *)(a1 + 72) = v32;
      long long v32 = v21;
      *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)(unint64_t)v18)));
      *(unsigned char *)(a1 + 24) = 0;
      uint64x2_t v28 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v29, (float)(unint64_t)v21)));
      BYTE8(v29) = 0;
      if (v14)
      {
        __int16 v22 = (char *)v20;
        __int16 v23 = v14;
        if ((char *)v20 != v14)
        {
          uint64_t v24 = (char *)v20;
          do
          {
            uint64_t v26 = (void *)*((void *)v24 - 2);
            v24 -= 16;
            unint64_t v25 = v26;
            if (v26)
            {
              free(v25);
              *((void *)v22 - 2) = 0;
            }
            __int16 v22 = v24;
          }
          while (v24 != v14);
          __int16 v23 = (char *)v31[1];
        }
        v31[2] = v14;
        free(v23);
      }
      return 1;
    }
  }
  return result;
}

void sub_AFB6AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    sub_20AE0F0((uint64_t)&a9, a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_AFB6D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AFB6E4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AFB6F8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 sub_AFB70C@<Q0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = sub_AFAFE4(a1, a2);
  if (v6 == -1)
  {
    sub_AFB92C(a1, (uint64_t *)a2, v7, &v33);
    long long v25 = v36;
    *(_OWORD *)(a3 + 32) = v35;
    *(_OWORD *)(a3 + 48) = v25;
    *(void *)(a3 + 64) = v37;
    __n128 result = v34;
    *(_OWORD *)a3 = v33;
    *(__n128 *)(a3 + 16) = result;
    *(unsigned char *)(a3 + 72) = 1;
    return result;
  }
  uint64_t v9 = *(void *)(a1 + 48);
  float v8 = *(uint64_t **)(a1 + 56);
  unint64_t v10 = v6 / 0x30;
  unint64_t v11 = v9 + 16 * (v6 / 0x30);
  int v12 = (unsigned __int8 *)(v11 + 10);
  int v13 = v6 % 0x30;
  if ((unsigned __int16)(v6 % 0x30) < 9u)
  {
    __int16 v15 = 0;
    goto LABEL_13;
  }
  unsigned __int16 v14 = v13 - 9;
  __int16 v15 = 0;
  uint64_t v16 = (unsigned __int16)(v6 % 0x30 - 9) >> 3;
  if ((unsigned __int16)(v6 % 0x30 - 9) >> 3)
  {
    __int16 v17 = 0;
    uint64_t v18 = v16 + 1;
    uint64_t v19 = (v16 + 1) & 0x3FFE;
    LOWORD(v13) = v13 - 8 * v19;
    long long v20 = &v12[v19];
    long long v21 = (unsigned __int8 *)(v9 + 16 * v10 + 11);
    uint64_t v22 = v19;
    do
    {
      uint64_t v23 = *(v21 - 1);
      int v24 = *v21;
      v21 += 2;
      v15 += byte_20EC0B6[v23];
      v17 += byte_20EC0B6[v24];
      v22 -= 2;
    }
    while (v22);
    v15 += v17;
    if (v18 == v19) {
      goto LABEL_12;
    }
  }
  else
  {
    long long v20 = (unsigned __int8 *)(v11 + 10);
  }
  do
  {
    int v27 = *v20++;
    v15 += byte_20EC0B6[v27];
    LOWORD(v13) = v13 - 8;
  }
  while ((unsigned __int16)v13 > 8u);
LABEL_12:
  v12 += (v14 >> 3) + 1;
LABEL_13:
  unsigned __int16 v28 = v15 + byte_20EC0B6[~(-1 << v13) & (unint64_t)*v12];
  uint64_t v29 = *(void *)v11 + 12 * v28;
  if (*(unsigned __int16 *)(v11 + 8) == v28)
  {
    unint64_t v30 = v11 + 16;
    unint64_t v11 = *(void *)(a1 + 56);
    if ((uint64_t *)v30 != v8)
    {
      while (1)
      {
        uint64_t v31 = (uint64_t *)v30;
        if (*(_WORD *)(v30 + 8)) {
          break;
        }
        v30 += 16;
        if (v31 + 2 == v8)
        {
          unint64_t v11 = *(void *)(a1 + 56);
          goto LABEL_19;
        }
      }
      unint64_t v11 = v30;
LABEL_19:
      uint64_t v29 = *v31;
    }
  }
  *(void *)&long long v33 = a1;
  *((void *)&v33 + 1) = v9;
  v34.n128_u64[0] = (unint64_t)v8;
  v34.n128_u64[1] = v11;
  *(void *)&long long v35 = v29;
  *((void *)&v35 + 1) = v9;
  *(void *)&long long v36 = v8;
  *((void *)&v36 + 1) = v8;
  uint64_t v37 = 0;
  sub_AE47A0(&v33);
  long long v32 = v36;
  *(_OWORD *)(a3 + 32) = v35;
  *(_OWORD *)(a3 + 48) = v32;
  *(void *)(a3 + 64) = v37;
  __n128 result = v34;
  *(_OWORD *)a3 = v33;
  *(__n128 *)(a3 + 16) = result;
  *(unsigned char *)(a3 + 72) = 0;
  return result;
}

void *sub_AFB92C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 40);
  if ((unint64_t)(*(void *)(a1 + 80) - v5) >= 0x1555555555555555)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2E18(exception, "insert overflow");
  }
  if (!v5)
  {
    unint64_t v8 = a3 / 0x30;
    LODWORD(v10) = a3 % 0x30;
    goto LABEL_17;
  }
  unint64_t v8 = a3 / 0x30;
  uint64_t v9 = *(void *)(a1 + 48);
  unint64_t v10 = a3 % 0x30;
  unint64_t v11 = (uint64_t *)(v9 + 16 * (a3 / 0x30));
  if (((*((unsigned __int8 *)v11 + ((a3 % 0x30) >> 3) + 10) >> ((a3 % 0x30) & 7)) & 1) == 0) {
    goto LABEL_17;
  }
  uint64_t v14 = *v11;
  int v13 = (unsigned __int8 *)v11 + 10;
  uint64_t v12 = v14;
  if ((unsigned __int16)(a3 % 0x30) < 9u)
  {
    __int16 v15 = 0;
    unint64_t v16 = a3 % 0x30;
    goto LABEL_15;
  }
  __int16 v15 = 0;
  unint64_t v16 = (unsigned __int16)(a3 % 0x30 - 9) >> 3;
  if ((unsigned __int16)(a3 % 0x30 - 9) >> 3)
  {
    __int16 v17 = 0;
    unint64_t v18 = v16 + 1;
    uint64_t v19 = (v16 + 1) & 0x3FFE;
    LOWORD(v16) = v10 - 8 * v19;
    long long v20 = &v13[v19];
    long long v21 = (unsigned __int8 *)(v9 + 16 * v8 + 11);
    uint64_t v22 = v19;
    do
    {
      uint64_t v23 = *(v21 - 1);
      int v24 = *v21;
      v21 += 2;
      v15 += byte_20EC0B6[v23];
      v17 += byte_20EC0B6[v24];
      v22 -= 2;
    }
    while (v22);
    v15 += v17;
    if (v18 == v19) {
      goto LABEL_14;
    }
  }
  else
  {
    unint64_t v16 = a3 % 0x30;
    long long v20 = v13;
  }
  do
  {
    int v25 = *v20++;
    v15 += byte_20EC0B6[v25];
    LOWORD(v16) = v16 - 8;
  }
  while ((unsigned __int16)v16 > 8u);
LABEL_14:
  v13 += ((unsigned __int16)(v10 - 9) >> 3) + 1;
LABEL_15:
  if (*(_DWORD *)(a1 + 32) == *(_DWORD *)(v12
                                         + 12
                                         * (unsigned __int16)(v15
                                                            + byte_20EC0B6[~(-1 << v16) & (unint64_t)*v13])))
    *(void *)(a1 + 40) = v5 - 1;
LABEL_17:
  sub_AF379C((uint64_t *)(a1 + 48), a3, a2);
  uint64_t v27 = *(void *)(a1 + 48);
  uint64_t v26 = *(uint64_t **)(a1 + 56);
  uint64_t v28 = v27 + 16 * v8;
  uint64_t v29 = (unsigned __int8 *)(v28 + 10);
  if ((unsigned __int16)v10 >= 9u)
  {
    uint64_t v30 = ((unsigned __int16)(v10 - 9) >> 3) + 1;
    if ((unsigned __int16)(v10 - 9) >= 8u)
    {
      __int16 v33 = 0;
      __int16 v34 = 0;
      LOWORD(v10) = v10 - 8 * ((((unsigned __int16)(v10 - 9) >> 3) + 1) & 0x3FFE);
      long long v32 = &v29[v30 & 0x3FFE];
      long long v35 = (unsigned __int8 *)(v27 + 16 * v8 + 11);
      uint64_t v36 = v30 & 0x3FFE;
      do
      {
        uint64_t v37 = *(v35 - 1);
        int v38 = *v35;
        v35 += 2;
        v33 += byte_20EC0B6[v37];
        v34 += byte_20EC0B6[v38];
        v36 -= 2;
      }
      while (v36);
      __int16 v31 = v34 + v33;
      if ((v30 & 0x3FFE) == v30) {
        goto LABEL_25;
      }
    }
    else
    {
      __int16 v31 = 0;
      long long v32 = (unsigned __int8 *)(v28 + 10);
    }
    do
    {
      int v39 = *v32++;
      v31 += byte_20EC0B6[v39];
      LOWORD(v10) = v10 - 8;
    }
    while ((unsigned __int16)v10 > 8u);
LABEL_25:
    v29 += v30;
    goto LABEL_26;
  }
  __int16 v31 = 0;
LABEL_26:
  unsigned __int16 v40 = v31 + byte_20EC0B6[~(-1 << v10) & (unint64_t)*v29];
  uint64_t v41 = *(void *)v28 + 12 * v40;
  if (*(unsigned __int16 *)(v28 + 8) == v40)
  {
    uint64_t v42 = v28 + 16;
    uint64_t v28 = *(void *)(a1 + 56);
    if ((uint64_t *)v42 != v26)
    {
      while (1)
      {
        char v43 = (uint64_t *)v42;
        if (*(_WORD *)(v42 + 8)) {
          break;
        }
        v42 += 16;
        if (v43 + 2 == v26)
        {
          uint64_t v28 = *(void *)(a1 + 56);
          goto LABEL_32;
        }
      }
      uint64_t v28 = v42;
LABEL_32:
      uint64_t v41 = *v43;
    }
  }
  *a4 = a1;
  a4[1] = v27;
  a4[2] = v26;
  a4[3] = v28;
  a4[4] = v41;
  a4[5] = v27;
  a4[6] = v26;
  a4[7] = v26;
  a4[8] = 0;

  return sub_AE47A0(a4);
}

void sub_AFBC68(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_AFBC7C(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 80) - *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    BOOL v4 = v2 >= v3;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4 || (unint64_t v5 = *(void *)(a1 + 72), v5 < 0x21))
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    do
    {
      unint64_t v6 = v5;
      v5 >>= 1;
    }
    while (v6 >= 0x42 && v2 < (unint64_t)(float)(*(float *)(a1 + 20) * (float)v5));
    long long v24 = *(_OWORD *)(a1 + 16);
    int v25 = *(_DWORD *)(a1 + 32);
    memset(v26, 0, sizeof(v26));
    long long v27 = 0u;
    uint64x2_t v23 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_f32(*(float32x2_t *)&v24, 0)));
    BYTE8(v24) = 0;
    sub_AF3378((uint64_t)&v23, 0, (void *)a1, v5);
    int v7 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v25;
    int v25 = v7;
    unint64_t v8 = *(void **)(a1 + 40);
    uint64_t v9 = *(char **)(a1 + 48);
    *(void **)(a1 + 40) = v26[0];
    uint64x2_t v11 = *(uint64x2_t *)a1;
    long long v10 = *(_OWORD *)(a1 + 16);
    long long v12 = v24;
    *(uint64x2_t *)a1 = v23;
    *(_OWORD *)(a1 + 16) = v12;
    uint64x2_t v23 = v11;
    long long v24 = v10;
    long long v13 = *(_OWORD *)&v26[1];
    v26[0] = v8;
    v26[1] = v9;
    uint64_t v14 = v26[3];
    long long v15 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 48) = v13;
    *(void *)(a1 + 64) = v14;
    *(_OWORD *)&v26[2] = v15;
    *(void *)&long long v13 = v27;
    long long v16 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)(a1 + 72) = v27;
    long long v27 = v16;
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)(unint64_t)v13)));
    *(unsigned char *)(a1 + 24) = 0;
    uint64x2_t v23 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v24, (float)(unint64_t)v16)));
    BYTE8(v24) = 0;
    if (v9)
    {
      __int16 v17 = (char *)v15;
      unint64_t v18 = v9;
      if ((char *)v15 != v9)
      {
        uint64_t v19 = (char *)v15;
        do
        {
          long long v21 = (void *)*((void *)v19 - 2);
          v19 -= 16;
          long long v20 = v21;
          if (v21)
          {
            free(v20);
            *((void *)v17 - 2) = 0;
          }
          __int16 v17 = v19;
        }
        while (v19 != v9);
        unint64_t v18 = (char *)v26[1];
      }
      v26[2] = v9;
      free(v18);
    }
    uint64_t result = 1;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return result;
}

void sub_AFBE4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    sub_20AE0F0((uint64_t)&a9, a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_AFBE70(uint64_t a1, unsigned int a2, long long *a3)
{
  unsigned int v57 = a2;
  uint64_t v5 = sub_AFAD84(a1, &v57);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 4);
  if (v7
    && (unint64_t v8 = (v7 - 1), ((*(void *)(*(void *)(a1 + 112) + ((v8 >> 3) & 0x1FFFFFF8)) >> v8) & 1) == 0))
  {
    *(_DWORD *)(v5 + 4) = v8;
    __int16 v46 = (_OWORD *)(*(void *)(a1 + 88) + (v8 << 6));
    long long v47 = *a3;
    long long v48 = a3[1];
    long long v49 = a3[3];
    v46[2] = a3[2];
    v46[3] = v49;
    *__int16 v46 = v47;
    v46[1] = v48;
    unint64_t v44 = *(unsigned int *)(v5 + 4);
    *(void *)(*(void *)(a1 + 112) + ((v44 >> 3) & 0x1FFFFFF8)) |= 1 << v44;
    uint64_t v45 = *(void *)(a1 + 88);
  }
  else
  {
    unint64_t v9 = *(unsigned int *)(v5 + 8);
    uint64_t v10 = *(void *)(a1 + 88);
    uint64x2_t v11 = (uint64_t *)(a1 + 88);
    unint64_t v12 = *(void *)(a1 + 96) - v10;
    if ((v9 + 1) >= (unint64_t)((uint64_t)v12 >> 6)
      || ((*(void *)(*(void *)(a1 + 112) + ((v9 >> 3) & 0x1FFFFFF8)) >> v9) & 1) != 0)
    {
      v72[0] = v57;
      sub_AFC6C4((void *)a1, v72, &v67);
      uint64_t v13 = *(void *)(a1 + 48);
      uint64_t v14 = *(void *)(a1 + 56);
      uint64_t v58 = a1;
      uint64_t v59 = v13;
      uint64_t v60 = v14;
      uint64_t v61 = v14;
      uint64_t v62 = 0;
      uint64_t v63 = v13;
      uint64_t v64 = v14;
      uint64_t v65 = v14;
      uint64_t v66 = 0;
      sub_AE47A0(&v58);
      if (v68 == v59 && v69 == v60 && v70 == v61 && (v70 == v69 || v71 == v62)) {
        int v15 = 0;
      }
      else {
        int v15 = *(_DWORD *)(v71 + 8) - *(_DWORD *)(v71 + 4);
      }
      uint64_t v16 = (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 6;
      v72[0] = v57;
      sub_AFC6C4((void *)a1, v72, &v67);
      uint64_t v17 = *(void *)(a1 + 48);
      uint64_t v18 = *(void *)(a1 + 56);
      uint64_t v58 = a1;
      uint64_t v59 = v17;
      uint64_t v60 = v18;
      uint64_t v61 = v18;
      uint64_t v62 = 0;
      uint64_t v63 = v17;
      uint64_t v64 = v18;
      uint64_t v65 = v18;
      uint64_t v66 = 0;
      sub_AE47A0(&v58);
      if (v68 == v59 && v69 == v60 && v70 == v61 && (v70 == v69 || v71 == v62)) {
        uint64_t v19 = 2;
      }
      else {
        uint64_t v19 = (2 * (*(_DWORD *)(v71 + 8) - *(_DWORD *)(v71 + 4)) + 2);
      }
      unint64_t v20 = v19 + v16;
      uint64_t v22 = *(void *)(a1 + 88);
      uint64_t v21 = *(void *)(a1 + 96);
      unint64_t v23 = (v21 - v22) >> 6;
      long long v55 = a3;
      if (v20 <= v23)
      {
        if (v20 < v23)
        {
          uint64_t v21 = v22 + (v20 << 6);
          *(void *)(a1 + 96) = v21;
        }
      }
      else
      {
        sub_A876B0((void **)(a1 + 88), v20 - v23);
        uint64_t v22 = *(void *)(a1 + 88);
        uint64_t v21 = *(void *)(a1 + 96);
      }
      long long v24 = (uint64_t *)(a1 + 112);
      sub_A3E96C((uint64_t)v24, (v21 - v22) >> 6, 0);
      uint64_t v25 = *(unsigned int *)(v6 + 4);
      uint64_t v26 = *(unsigned int *)(v6 + 8);
      unint64_t v56 = v12;
      unint64_t v27 = (v12 >> 6);
      unsigned int v28 = v25;
      if (v26 != v25)
      {
        memmove((void *)(*v11 + (v27 << 6)), (const void *)(*v11 + (v25 << 6)), *v11 + (v26 << 6) - (*v11 + (v25 << 6)));
        unsigned int v28 = *(_DWORD *)(v6 + 4);
        LODWORD(v25) = *(_DWORD *)(v6 + 8);
      }
      unint64_t v29 = v12 >> 6;
      unint64_t v30 = v15 + (v12 >> 6);
      uint64_t v31 = *v24;
      long long v32 = (void *)(*v24 + 8 * (v28 >> 6));
      uint64_t v33 = v28 & 0x3F;
      unint64_t v34 = (v25 & 0x3F) - v33 + 8 * (*v24 + 8 * (v25 >> 6) - (void)v32);
      if (v34)
      {
        if (v33)
        {
          if ((64 - v33) >= v34) {
            uint64_t v35 = (v25 & 0x3F) - v33 + 8 * (*v24 + 8 * (v25 >> 6) - (void)v32);
          }
          else {
            uint64_t v35 = (64 - v33);
          }
          *v32++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v33 - v35)) & (-1 << v33));
          v34 -= v35;
        }
        if (v34 >= 0x40) {
          bzero(v32, 8 * (v34 >> 6));
        }
        if ((v34 & 0x3F) != 0) {
          v32[v34 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v34 & 0x3F));
        }
      }
      uint64_t v36 = (void *)(v31 + ((v27 >> 3) & 0x1FFFFFF8));
      uint64_t v37 = (v56 >> 6) & 0x3F;
      unint64_t v38 = (v30 & 0x3F) - v37 + 8 * (((v30 >> 3) & 0x1FFFFFF8) - ((v27 >> 3) & 0x1FFFFFF8));
      if (v38)
      {
        if ((v29 & 0x3F) != 0)
        {
          if (64 - (v29 & 0x3F) >= v38) {
            uint64_t v39 = (v30 & 0x3F) - v37 + 8 * (((v30 >> 3) & 0x1FFFFFF8) - ((v27 >> 3) & 0x1FFFFFF8));
          }
          else {
            uint64_t v39 = 64 - (v29 & 0x3F);
          }
          *v36++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - (v29 & 0x3Fu) - v39)) & (-1 << v37);
          v38 -= v39;
        }
        if (v38 >= 0x40) {
          memset(v36, 255, 8 * (v38 >> 6));
        }
        if ((v38 & 0x3F) != 0) {
          v36[v38 >> 6] |= 0xFFFFFFFFFFFFFFFFLL >> -(v38 & 0x3F);
        }
      }
      *(_DWORD *)(v6 + 4) = v29;
      *(_DWORD *)(v6 + 8) = v30;
      unsigned __int16 v40 = (_OWORD *)(*v11 + (v30 << 6));
      long long v41 = *v55;
      long long v42 = v55[1];
      long long v43 = v55[3];
      v40[2] = v55[2];
      uint64_t v40[3] = v43;
      *unsigned __int16 v40 = v41;
      v40[1] = v42;
      unint64_t v44 = *(unsigned int *)(v6 + 8);
      *(void *)(*v24 + ((v44 >> 3) & 0x1FFFFFF8)) |= 1 << v44;
      uint64_t v45 = *v11;
    }
    else
    {
      uint64_t v51 = (_OWORD *)(v10 + (v9 << 6));
      long long v52 = *a3;
      long long v53 = a3[1];
      long long v54 = a3[3];
      v51[2] = a3[2];
      v51[3] = v54;
      *uint64_t v51 = v52;
      v51[1] = v53;
      unint64_t v44 = *(unsigned int *)(v5 + 8);
      *(void *)(*(void *)(a1 + 112) + ((v44 >> 3) & 0x1FFFFFF8)) |= 1 << v44;
      uint64_t v45 = *(void *)(a1 + 88);
    }
    *(_DWORD *)(v6 + 8) = v44 + 1;
  }
  return v45 + (v44 << 6);
}

unint64_t sub_AFC318(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int a5)
{
  unsigned int v41 = a3;
  sub_AFC6C4((void *)a1, &v41, v37);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v28 = a1;
  uint64_t v29 = v10;
  uint64_t v30 = v11;
  uint64_t v31 = v11;
  uint64_t v32 = 0;
  uint64_t v33 = v10;
  uint64_t v34 = v11;
  uint64_t v35 = v11;
  uint64_t v36 = 0;
  sub_AE47A0(&v28);
  if (v37[1] == v29 && v38 == v30 && v39 == v31 && (v39 == v38 || v40 == v32)
    || *(_DWORD *)(v40 + 8) == *(_DWORD *)(v40 + 4))
  {
    unsigned __int8 v12 = 0;
    uint64_t v13 = sub_AFBE70(a1, a3, (long long *)a2);
    if (!a5) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  LODWORD(v37[0]) = a3;
  uint64_t v14 = *(void *)(a1 + 88);
  uint64_t v15 = v14 + ((unint64_t)*(unsigned int *)(sub_AFAD84(a1, (unsigned int *)v37) + 4) << 6);
  LODWORD(v37[0]) = a3;
  uint64_t v16 = *(void *)(a1 + 88);
  uint64_t v17 = v16 + ((unint64_t)*(unsigned int *)(sub_AFAD84(a1, (unsigned int *)v37) + 8) << 6);
  if (v15 != v17)
  {
    unsigned __int8 v12 = 0;
    int v18 = *(unsigned __int8 *)(a2 + 48);
    while (1)
    {
      int v19 = *(_DWORD *)(v15 + 28);
      if (v19 != 0x7FFFFFFF)
      {
        int v20 = *(_DWORD *)(a2 + 28);
        if (v19 <= v20 && *(_DWORD *)(v15 + 32) <= *(_DWORD *)(a2 + 32))
        {
          unsigned int v21 = *(_DWORD *)(a2 + 36);
          unsigned int v22 = *(_DWORD *)(v15 + 36);
          if (v22 <= v21
            && (v22 != v21 || v19 != v20 || 10 * v19 - *(_DWORD *)(v15 + 44) <= 10 * v20 - *(_DWORD *)(a2 + 44))
            && (*(unsigned __int8 *)(v15 + 48) & ~*(unsigned __int8 *)(a2 + 48)) == 0)
          {
            uint64_t v26 = 0;
            return v26 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v12 << 8);
          }
        }
        if (v20 <= v19 && *(_DWORD *)(a2 + 32) <= *(_DWORD *)(v15 + 32))
        {
          unsigned int v23 = *(_DWORD *)(v15 + 36);
          unsigned int v24 = *(_DWORD *)(a2 + 36);
          if (v24 <= v23
            && (v24 != v23 || v20 != v19 || 10 * v20 - *(_DWORD *)(a2 + 44) <= 10 * v19 - *(_DWORD *)(v15 + 44))
            && (v18 & ~*(unsigned __int8 *)(v15 + 48)) == 0)
          {
            *(_DWORD *)(v15 + 28) = 0x7FFFFFFF;
            unsigned __int8 v12 = 1;
          }
        }
      }
      v15 += 64;
      if (v15 == v17) {
        goto LABEL_27;
      }
    }
  }
  unsigned __int8 v12 = 0;
LABEL_27:
  uint64_t v13 = sub_AFBE70(a1, a3, (long long *)a2);
  if (a5)
  {
LABEL_28:
    *(void *)(v13 + 52) = -1;
    *(_DWORD *)(v13 + 60) = 0x7FFFFFFF;
  }
LABEL_29:
  if (a4)
  {
    int v25 = *(_DWORD *)(a1 + 136);
    *(_DWORD *)(a1 + 136) = v25 + 1;
    *(_DWORD *)(v13 + 24) = v25;
    *(_DWORD *)(v13 + 20) = *(_DWORD *)(a2 + 24);
  }
  uint64_t v26 = 1;
  return v26 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v12 << 8);
}

char *sub_AFC5B8(uint64_t a1, unsigned int a2)
{
  unsigned int v17 = a2;
  uint64_t v4 = *(void *)(a1 + 88);
  uint64_t v5 = v4 + ((unint64_t)*(unsigned int *)(sub_AFAD84(a1, &v17) + 4) << 6);
  unsigned int v18 = a2;
  uint64_t v6 = *(void *)(a1 + 88);
  uint64_t v7 = sub_AFAD84(a1, &v18);
  unint64_t v8 = (long long *)(v6 + ((unint64_t)*(unsigned int *)(v7 + 8) << 6));
  if ((long long *)v5 != v8)
  {
    while (*(_DWORD *)(v5 + 28) != 0x7FFFFFFF)
    {
      v5 += 64;
      if ((long long *)v5 == v8)
      {
        uint64_t v5 = v6 + ((unint64_t)*(unsigned int *)(v7 + 8) << 6);
        goto LABEL_11;
      }
    }
    if ((long long *)v5 != v8)
    {
      for (unint64_t i = (long long *)(v5 + 64); i != v8; i += 4)
      {
        if (*((_DWORD *)i + 7) != 0x7FFFFFFF)
        {
          long long v10 = *i;
          long long v11 = i[1];
          long long v12 = i[3];
          *(_OWORD *)(v5 + 32) = i[2];
          *(_OWORD *)(v5 + 48) = v12;
          *(_OWORD *)uint64_t v5 = v10;
          *(_OWORD *)(v5 + 16) = v11;
          v5 += 64;
        }
      }
    }
  }
LABEL_11:
  unsigned int v13 = a2;
  unsigned int v19 = a2;
  uint64_t v14 = *(void *)(a1 + 88);
  uint64_t v15 = sub_AFAD84(a1, &v19);
  return sub_AFA9C0(a1, v13, (char *)v5, (unsigned char *)(v14 + ((unint64_t)*(unsigned int *)(v15 + 8) << 6)));
}

void *sub_AFC6C4@<X0>(void *a1@<X0>, unsigned int *a2@<X1>, void *a3@<X8>)
{
  if (a1[10] == a1[5] || (unint64_t v5 = sub_AFAFE4((uint64_t)a1, a2), v5 == -1))
  {
    uint64_t v23 = 0;
    uint64_t v6 = a1[6];
    uint64_t v7 = (uint64_t *)a1[7];
    *a3 = a1;
    a3[1] = v6;
    a3[2] = v7;
    a3[3] = v7;
    goto LABEL_22;
  }
  uint64_t v6 = a1[6];
  uint64_t v7 = (uint64_t *)a1[7];
  unint64_t v8 = v5 / 0x30;
  uint64_t v9 = v6 + 16 * (v5 / 0x30);
  long long v10 = (unsigned __int8 *)(v9 + 10);
  int v11 = v5 % 0x30;
  if ((unsigned __int16)(v5 % 0x30) < 9u)
  {
    __int16 v13 = 0;
    goto LABEL_14;
  }
  unsigned __int16 v12 = v11 - 9;
  __int16 v13 = 0;
  uint64_t v14 = (unsigned __int16)(v5 % 0x30 - 9) >> 3;
  if ((unsigned __int16)(v5 % 0x30 - 9) >> 3)
  {
    __int16 v15 = 0;
    uint64_t v16 = v14 + 1;
    uint64_t v17 = (v14 + 1) & 0x3FFE;
    LOWORD(v11) = v11 - 8 * v17;
    unsigned int v18 = &v10[v17];
    unsigned int v19 = (unsigned __int8 *)(v6 + 16 * v8 + 11);
    uint64_t v20 = v17;
    do
    {
      uint64_t v21 = *(v19 - 1);
      int v22 = *v19;
      v19 += 2;
      v13 += byte_20EC0B6[v21];
      v15 += byte_20EC0B6[v22];
      v20 -= 2;
    }
    while (v20);
    v13 += v15;
    if (v16 == v17) {
      goto LABEL_13;
    }
  }
  else
  {
    unsigned int v18 = (unsigned __int8 *)(v9 + 10);
  }
  do
  {
    int v24 = *v18++;
    v13 += byte_20EC0B6[v24];
    LOWORD(v11) = v11 - 8;
  }
  while ((unsigned __int16)v11 > 8u);
LABEL_13:
  v10 += (v12 >> 3) + 1;
LABEL_14:
  unsigned __int16 v25 = v13 + byte_20EC0B6[~(-1 << v11) & (unint64_t)*v10];
  uint64_t v23 = *(void *)v9 + 12 * v25;
  if (*(unsigned __int16 *)(v9 + 8) == v25)
  {
    uint64_t v26 = v9 + 16;
    uint64_t v9 = a1[7];
    if ((uint64_t *)v26 != v7)
    {
      while (1)
      {
        unint64_t v27 = (uint64_t *)v26;
        if (*(_WORD *)(v26 + 8)) {
          break;
        }
        v26 += 16;
        if (v27 + 2 == v7)
        {
          uint64_t v9 = a1[7];
          goto LABEL_20;
        }
      }
      uint64_t v9 = v26;
LABEL_20:
      uint64_t v23 = *v27;
    }
  }
  *a3 = a1;
  a3[1] = v6;
  a3[2] = v7;
  a3[3] = v9;
LABEL_22:
  a3[4] = v23;
  a3[5] = v6;
  a3[6] = v7;
  a3[7] = v7;
  a3[8] = 0;

  return sub_AE47A0(a3);
}

uint64_t sub_AFC890(void *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v11 = a2;
  unsigned int v25 = a2;
  sub_AFC6C4(a1, &v25, v21);
  uint64_t v5 = a1[6];
  uint64_t v6 = a1[7];
  unsigned __int16 v12 = a1;
  uint64_t v13 = v5;
  uint64_t v14 = v6;
  uint64_t v15 = v6;
  uint64_t v16 = 0;
  uint64_t v17 = v5;
  uint64_t v18 = v6;
  uint64_t v19 = v6;
  uint64_t v20 = 0;
  sub_AE47A0(&v12);
  if (v21[1] == v13 && v22 == v14 && v23 == v15 && (v23 == v22 || v24 == v16)
    || *(_DWORD *)(v24 + 8) - *(_DWORD *)(v24 + 4) <= a3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_188D9E0(exception, "key does not exist and cannot be added");
    goto LABEL_11;
  }
  unint64_t v7 = *(_DWORD *)(sub_AFAD84((uint64_t)a1, &v11) + 4) + a3;
  uint64_t v8 = a1[11];
  if (v7 >= (a1[12] - v8) >> 6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_188D9E0(exception, "index out of range");
LABEL_11:
  }
  return v8 + (v7 << 6);
}

void sub_AFC9C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AFC9DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_AFC9F0(void *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v31 = a2;
  sub_AFC6C4(a1, &v31, v28);
  uint64_t v6 = a1[6];
  uint64_t v7 = a1[7];
  uint64_t v20 = a1;
  *(void *)&long long v21 = v6;
  *((void *)&v21 + 1) = v7;
  uint64_t v22 = v7;
  uint64_t v23 = 0;
  uint64_t v24 = v6;
  uint64_t v25 = v7;
  uint64_t v26 = v7;
  uint64_t v27 = 0;
  sub_AE47A0(&v20);
  if (*(_OWORD *)&v28[8] == v21
    && *(void *)&v28[24] == v22
    && (*(void *)&v28[24] == *(void *)&v28[16] || (void)v29 == v23))
  {
    LOBYTE(v10) = 0;
  }
  else
  {
    int v8 = *(_DWORD *)(v29 + 4);
    int v9 = *(_DWORD *)(v29 + 8);
    __int16 v10 = 0;
    int v11 = v9 - v8;
    if (v9 != v8)
    {
      unsigned int v12 = 0;
      do
      {
        uint64_t v13 = (long long *)sub_AFC890(a1, a2, v12);
        long long v14 = v13[3];
        long long v16 = *v13;
        long long v15 = v13[1];
        long long v29 = v13[2];
        long long v30 = v14;
        *(_OWORD *)uint64_t v28 = v16;
        *(_OWORD *)&v28[16] = v15;
        __int16 v17 = sub_AFC318((uint64_t)a1, (uint64_t)v28, a3, 0, 1);
        uint64_t v18 = (unsigned __int16)(v17 | v10) & 0xFF00;
        __int16 v10 = v17 | v10 | v18;
        ++v12;
      }
      while (v11 != v12);
      if (v18) {
        sub_AFC5B8((uint64_t)a1, a3);
      }
    }
  }
  return v10 != 0;
}

unint64_t sub_AFCB44(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4 = a1;
  unsigned int v364 = a3;
  *(double *)(a1 + 608) = *(double *)(a1 + 608) + 1.0;
  unint64_t v5 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 40) + 88), a3);
  unsigned int v324 = *(_DWORD *)sub_A3F74C((void *)(v4 + 344), &v364);
  unint64_t result = (unint64_t)sub_A40514(&v362, *(void *)(v4 + 24), v5);
  uint64_t v7 = v362;
  if ((unint64_t)v362 < v363)
  {
    char v332 = (void *)(v4 + 104);
    uint64_t v333 = v4 + 424;
    int v321 = ~a2;
    int v322 = a2 + 2;
    long long v320 = (uint64_t *)(v4 + 248);
    int v330 = a2 + 1;
    uint64_t v334 = v4;
    do
    {
      *(double *)(v4 + 616) = *(double *)(v4 + 616) + 1.0;
      uint64_t v331 = *(unsigned int *)v7;
      LODWORD(v350) = 0;
      uint64_t v8 = *(void *)(v4 + 192);
      int v9 = (char *)(v8 + ((unint64_t)*(unsigned int *)(sub_AFAD84((uint64_t)v332, (unsigned int *)&v350) + 4) << 6));
      LODWORD(v350) = 0;
      uint64_t v10 = *(void *)(v4 + 192);
      uint64_t v11 = sub_AFAD84((uint64_t)v332, (unsigned int *)&v350);
      sub_AFA9C0((uint64_t)v332, 0, v9, (unsigned char *)(v10 + ((unint64_t)*(unsigned int *)(v11 + 8) << 6)));
      unint64_t result = sub_A1E9A0((uint64_t)&v350, *(void *)(v4 + 24), v5, v324, 0, 1);
      unint64_t v13 = v353;
      unsigned int v12 = v354;
      while ((unint64_t)v12 >= v13 && (unint64_t)v12 < v355)
      {
        uint64_t v14 = 0;
        unint64_t v15 = __ROR8__(*v12, 32);
        uint64_t v16 = *(void *)(v4 + 32);
        uint64_t v17 = *(void *)(v16 + 72) - 1;
        unint64_t v18 = 0xC4CEB9FE1A85EC53
            * ((0xFF51AFD7ED558CCDLL * (v15 ^ (v15 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v15 ^ (v15 >> 33))) >> 33));
        unint64_t v19 = v18 ^ (v18 >> 33);
        uint64_t v20 = *(void *)(v16 + 48);
        uint64_t v21 = v20 + 11;
        uint64_t v22 = -1;
        for (unint64_t i = v19; ; unint64_t i = v14 + v24)
        {
          uint64_t v24 = i & v17;
          unint64_t v25 = (i & v17) / 0x30;
          unint64_t v26 = v24 - 48 * v25;
          if (((*(unsigned __int8 *)(v20 + 16 * v25 + (v26 >> 3) + 10) >> (v26 & 7)) & 1) == 0)
          {
            if (v22 == -1) {
              unint64_t v62 = v24;
            }
            else {
              unint64_t v62 = v22;
            }
            if (!sub_AD2F40(v16, 1)) {
              goto LABEL_92;
            }
            goto LABEL_49;
          }
          uint64_t v27 = *(void *)(v20 + 16 * v25);
          if (!*(void *)(v16 + 40)) {
            break;
          }
          uint64_t v28 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
          if ((unsigned __int16)(v24 - 48 * v25) < 9u)
          {
            __int16 v29 = 0;
            LOBYTE(v34) = v24 - 48 * v25;
            goto LABEL_23;
          }
          __int16 v29 = 0;
          uint64_t v30 = (unsigned __int16)(v24 - 48 * v25 - 9) >> 3;
          if ((unsigned __int16)(v24 - 48 * v25 - 9) >> 3)
          {
            __int16 v31 = 0;
            uint64_t v32 = v30 + 1;
            uint64_t v33 = (v30 + 1) & 0x3FFE;
            unsigned __int16 v34 = v26 - 8 * v33;
            uint64_t v35 = &v28[v33];
            uint64_t v36 = (unsigned __int8 *)(v21 + 16 * v25);
            uint64_t v37 = v33;
            do
            {
              uint64_t v38 = *(v36 - 1);
              int v39 = *v36;
              v36 += 2;
              v29 += byte_20EBFB6[v38];
              v31 += byte_20EBFB6[v39];
              v37 -= 2;
            }
            while (v37);
            v29 += v31;
            if (v32 == v33) {
              goto LABEL_22;
            }
          }
          else
          {
            unsigned __int16 v34 = v24 - 48 * v25;
            uint64_t v35 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
          }
          do
          {
            int v40 = *v35++;
            v29 += byte_20EBFB6[v40];
            v34 -= 8;
          }
          while (v34 > 8u);
LABEL_22:
          v28 += ((unsigned __int16)(v26 - 9) >> 3) + 1;
LABEL_23:
          unsigned int v41 = (_DWORD *)(v27
                         + 12
                         * (unsigned __int16)(v29 + byte_20EBFB6[~(-1 << v34) & (unint64_t)*v28]));
          if (*(_DWORD *)(v16 + 36) != v41[1] || *(_DWORD *)(v16 + 32) != *v41) {
            break;
          }
          if (v22 == -1) {
            uint64_t v22 = v24;
          }
LABEL_10:
          ++v14;
        }
        long long v43 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
        if ((unsigned __int16)(v24 - 48 * v25) < 9u)
        {
          __int16 v44 = 0;
          long long v55 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
          LOBYTE(v49) = v24 - 48 * v25;
          goto LABEL_37;
        }
        __int16 v44 = 0;
        uint64_t v45 = (unsigned __int16)(v24 - 48 * v25 - 9) >> 3;
        if (!((unsigned __int16)(v24 - 48 * v25 - 9) >> 3))
        {
          unsigned __int16 v49 = v24 - 48 * v25;
          uint64_t v50 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
          do
          {
LABEL_35:
            int v56 = *v50++;
            v44 += byte_20EBFB6[v56];
            v49 -= 8;
          }
          while (v49 > 8u);
          goto LABEL_36;
        }
        __int16 v46 = 0;
        uint64_t v47 = v45 + 1;
        uint64_t v48 = (v45 + 1) & 0x3FFE;
        unsigned __int16 v49 = v26 - 8 * v48;
        uint64_t v50 = &v43[v48];
        uint64_t v51 = (unsigned __int8 *)(v21 + 16 * v25);
        uint64_t v52 = v48;
        do
        {
          uint64_t v53 = *(v51 - 1);
          int v54 = *v51;
          v51 += 2;
          v44 += byte_20EBFB6[v53];
          v46 += byte_20EBFB6[v54];
          v52 -= 2;
        }
        while (v52);
        v44 += v46;
        if (v47 != v48) {
          goto LABEL_35;
        }
LABEL_36:
        long long v55 = &v43[((unsigned __int16)(v26 - 9) >> 3) + 1];
LABEL_37:
        if (v15 != *(void *)(v27
                              + 12
                              * (unsigned __int16)(v44
                                                 + byte_20EBFB6[~(-1 << v49) & (unint64_t)*v55])))
          goto LABEL_10;
        if (v24 != -1)
        {
          if ((unsigned __int16)(v24 - 48 * v25) < 9u)
          {
            __int16 v59 = 0;
            uint64_t v4 = v334;
          }
          else
          {
            if ((((_WORD)v24 - 48 * (_WORD)v25 - 8) & 0xFFF8) != 0) {
              __int16 v57 = 8;
            }
            else {
              __int16 v57 = v24 - 48 * v25 - 8;
            }
            unsigned __int16 v58 = ~v57 + v24 - 48 * v25;
            uint64_t v4 = v334;
            __int16 v59 = 0;
            if (v58 < 8u)
            {
              unsigned __int16 v60 = v26;
              uint64_t v61 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
              goto LABEL_97;
            }
            __int16 v107 = 0;
            uint64_t v108 = (v58 >> 3) + 1;
            unsigned __int16 v60 = v26 - 8 * (((v58 >> 3) + 1) & 0x3FFE);
            uint64_t v61 = &v43[v108 & 0x3FFE];
            __int16 v109 = (unsigned __int8 *)(v20 + 16 * v25 + 11);
            uint64_t v110 = v108 & 0x3FFE;
            do
            {
              uint64_t v111 = *(v109 - 1);
              int v112 = *v109;
              v109 += 2;
              v59 += byte_20EBFB6[v111];
              v107 += byte_20EBFB6[v112];
              v110 -= 2;
            }
            while (v110);
            v59 += v107;
            if ((v108 & 0x3FFE) != v108)
            {
              do
              {
LABEL_97:
                int v113 = *v61++;
                v59 += byte_20EBFB6[v113];
                v60 -= 8;
              }
              while (v60 > 8u);
            }
            v43 += ((unsigned __int16)(v26 - 9) >> 3) + 1;
            LOBYTE(v26) = v60;
          }
          uint64_t v114 = *(void *)(v16 + 56);
          unsigned __int16 v115 = v59 + byte_20EBFB6[~(-1 << v26) & (unint64_t)*v43];
          uint64_t v116 = v20 + 16 * v25;
          if (*(unsigned __int16 *)(v116 + 8) != v115 || v116 + 16 == v114)
          {
            unint64_t v106 = (_DWORD *)(v27 + 12 * v115);
          }
          else
          {
            uint64_t v118 = v116 + 32;
            do
            {
              if (*(_WORD *)(v118 - 8)) {
                BOOL v119 = 1;
              }
              else {
                BOOL v119 = v118 == v114;
              }
              v118 += 16;
            }
            while (!v119);
            unint64_t v106 = *(_DWORD **)(v118 - 32);
          }
          goto LABEL_111;
        }
        unint64_t v62 = -1;
        if (!sub_AD2F40(v16, 1))
        {
LABEL_92:
          unint64_t v365 = v15;
          int v366 = -1;
          sub_AD3484(v16, (uint64_t *)&v365, v62, &v367);
          unint64_t v106 = v369;
          uint64_t v4 = v334;
          goto LABEL_111;
        }
LABEL_49:
        uint64_t v63 = 0;
        unint64_t v365 = v15;
        int v366 = -1;
        uint64_t v64 = *(void *)(v16 + 72) - 1;
        uint64_t v65 = *(void *)(v16 + 48);
        uint64_t v66 = v65 + 11;
        uint64_t v67 = -1;
        while (2)
        {
          uint64_t v68 = v19 & v64;
          unint64_t v69 = (v19 & v64) / 0x30;
          unint64_t v70 = (v19 & v64) % 0x30;
          if (((*(unsigned __int8 *)(v65 + 16 * v69 + (v70 >> 3) + 10) >> (v70 & 7)) & 1) == 0)
          {
            if (v67 == -1) {
              unint64_t v105 = v19 & v64;
            }
            else {
              unint64_t v105 = v67;
            }
            goto LABEL_90;
          }
          uint64_t v71 = *(void *)(v16 + 40);
          uint64_t v72 = *(void *)(v65 + 16 * v69);
          if (!v71) {
            break;
          }
          __int16 v73 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
          if ((unsigned __int16)((v19 & v64) % 0x30) < 9u)
          {
            __int16 v74 = 0;
            LOBYTE(v75) = (v19 & v64) % 0x30;
            goto LABEL_65;
          }
          __int16 v74 = 0;
          uint64_t v75 = (unsigned __int16)(v68 - 48 * v69 - 9) >> 3;
          if (!((unsigned __int16)(v68 - 48 * v69 - 9) >> 3))
          {
            LODWORD(v75) = (v19 & v64) % 0x30;
            uint64_t v79 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
            do
            {
LABEL_63:
              int v84 = *v79++;
              v74 += byte_20EBFB6[v84];
              LOWORD(v75) = v75 - 8;
            }
            while ((unsigned __int16)v75 > 8u);
            goto LABEL_64;
          }
          __int16 v76 = 0;
          uint64_t v77 = v75 + 1;
          uint64_t v78 = (v75 + 1) & 0x3FFE;
          LOWORD(v75) = v70 - 8 * v78;
          uint64_t v79 = &v73[v78];
          int v80 = (unsigned __int8 *)(v66 + 16 * v69);
          uint64_t v81 = v78;
          do
          {
            uint64_t v82 = *(v80 - 1);
            int v83 = *v80;
            v80 += 2;
            v74 += byte_20EBFB6[v82];
            v76 += byte_20EBFB6[v83];
            v81 -= 2;
          }
          while (v81);
          v74 += v76;
          if (v77 != v78) {
            goto LABEL_63;
          }
LABEL_64:
          v73 += ((unsigned __int16)(v70 - 9) >> 3) + 1;
LABEL_65:
          __int16 v85 = (_DWORD *)(v72
                         + 12
                         * (unsigned __int16)(v74 + byte_20EBFB6[~(-1 << v75) & (unint64_t)*v73]));
          if (*(_DWORD *)(v16 + 36) == v85[1] && *(_DWORD *)(v16 + 32) == *v85)
          {
            if (v67 == -1) {
              uint64_t v67 = v19 & v64;
            }
LABEL_52:
            unint64_t v19 = ++v63 + v68;
            continue;
          }
          break;
        }
        __int16 v87 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
        if ((unsigned __int16)((v19 & v64) % 0x30) < 9u)
        {
          __int16 v88 = 0;
          unsigned __int16 v98 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
          LOBYTE(v89) = (v19 & v64) % 0x30;
          goto LABEL_79;
        }
        __int16 v88 = 0;
        uint64_t v89 = (unsigned __int16)(v68 - 48 * v69 - 9) >> 3;
        if (!((unsigned __int16)(v68 - 48 * v69 - 9) >> 3))
        {
          LODWORD(v89) = (v19 & v64) % 0x30;
          uint64_t v93 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
          do
          {
LABEL_77:
            int v99 = *v93++;
            v88 += byte_20EBFB6[v99];
            LOWORD(v89) = v89 - 8;
          }
          while ((unsigned __int16)v89 > 8u);
          goto LABEL_78;
        }
        __int16 v90 = 0;
        uint64_t v91 = v89 + 1;
        uint64_t v92 = (v89 + 1) & 0x3FFE;
        LOWORD(v89) = v70 - 8 * v92;
        uint64_t v93 = &v87[v92];
        int v94 = (unsigned __int8 *)(v66 + 16 * v69);
        uint64_t v95 = v92;
        do
        {
          uint64_t v96 = *(v94 - 1);
          int v97 = *v94;
          v94 += 2;
          v88 += byte_20EBFB6[v96];
          v90 += byte_20EBFB6[v97];
          v95 -= 2;
        }
        while (v95);
        v88 += v90;
        if (v91 != v92) {
          goto LABEL_77;
        }
LABEL_78:
        unsigned __int16 v98 = &v87[((unsigned __int16)(v70 - 9) >> 3) + 1];
LABEL_79:
        if (v15 != *(void *)(v72
                              + 12
                              * (unsigned __int16)(v88
                                                 + byte_20EBFB6[~(-1 << v89) & (unint64_t)*v98])))
          goto LABEL_52;
        if (v68 == -1)
        {
          unint64_t v105 = -1;
LABEL_90:
          uint64_t v4 = v334;
          sub_AD3484(v16, (uint64_t *)&v365, v105, &v367);
          unint64_t v106 = v369;
          goto LABEL_111;
        }
        uint64_t v4 = v334;
        if ((unsigned __int16)((v19 & v64) % 0x30) < 9u)
        {
          __int16 v102 = 0;
        }
        else
        {
          if ((((_WORD)v68 - 48 * (_WORD)v69 - 8) & 0xFFF8) != 0) {
            __int16 v100 = 8;
          }
          else {
            __int16 v100 = v68 - 48 * v69 - 8;
          }
          unsigned __int16 v101 = ~v100 + v68 - 48 * v69;
          if (v101 < 8u)
          {
            __int16 v102 = 0;
            unsigned __int16 v103 = v70;
            unsigned int v104 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
            goto LABEL_179;
          }
          __int16 v175 = 0;
          __int16 v176 = 0;
          uint64_t v177 = (v101 >> 3) + 1;
          unsigned __int16 v103 = v70 - 8 * (((v101 >> 3) + 1) & 0x3FFE);
          unsigned int v104 = &v87[v177 & 0x3FFE];
          uint64_t v178 = (unsigned __int8 *)(v65 + 16 * v69 + 11);
          uint64_t v179 = v177 & 0x3FFE;
          do
          {
            uint64_t v180 = *(v178 - 1);
            int v181 = *v178;
            v178 += 2;
            v175 += byte_20EBFB6[v180];
            v176 += byte_20EBFB6[v181];
            v179 -= 2;
          }
          while (v179);
          __int16 v102 = v176 + v175;
          if ((v177 & 0x3FFE) != v177)
          {
            do
            {
LABEL_179:
              int v182 = *v104++;
              v102 += byte_20EBFB6[v182];
              v103 -= 8;
            }
            while (v103 > 8u);
          }
          v87 += ((unsigned __int16)(v70 - 9) >> 3) + 1;
          LOBYTE(v70) = v103;
        }
        uint64_t v183 = v65 + 16 * v69;
        int32x2_t v184 = *(_DWORD ***)(v16 + 56);
        unsigned __int16 v185 = v102 + byte_20EBFB6[~(-1 << v70) & (unint64_t)*v87];
        unint64_t v106 = (_DWORD *)(v72 + 12 * v185);
        if (*(unsigned __int16 *)(v183 + 8) == v185)
        {
          uint64_t v186 = v183 + 16;
          if ((_DWORD **)(v183 + 16) != v184)
          {
            while (1)
            {
              int v187 = (_DWORD **)v186;
              if (*(_WORD *)(v186 + 8)) {
                break;
              }
              v186 += 16;
              if (v187 + 2 == v184)
              {
                uint64_t v183 = *(void *)(v16 + 56);
                goto LABEL_187;
              }
            }
            uint64_t v183 = v186;
LABEL_187:
            unint64_t v106 = *v187;
            goto LABEL_188;
          }
        }
        else
        {
LABEL_188:
          if ((_DWORD **)v183 != v184 && v71)
          {
            do
            {
              if (*(_DWORD *)(v16 + 36) != v106[1] || *(_DWORD *)(v16 + 32) != *v106) {
                break;
              }
              v106 += 3;
              if (v106 == (_DWORD *)(*(void *)v183 + 12 * *(unsigned __int16 *)(v183 + 8)))
              {
                v183 += 16;
                if ((_DWORD **)v183 != v184)
                {
                  do
                  {
                    if (*(_WORD *)(v183 + 8))
                    {
                      unint64_t v106 = *(_DWORD **)v183;
                      goto LABEL_192;
                    }
                    v183 += 16;
                  }
                  while ((_DWORD **)v183 != v184);
                  unint64_t v106 = *(_DWORD **)(v183 - 16);
                }
                break;
              }
LABEL_192:
              ;
            }
            while ((_DWORD **)v183 != v184);
          }
        }
LABEL_111:
        unsigned int v120 = v106[2];
        if (v120 != -1) {
          goto LABEL_135;
        }
        int v121 = *(_DWORD *)(v16 + 112);
        *(_DWORD *)(v16 + 112) = v121 + 1;
        v106[2] = v121;
        int v123 = *(unint64_t **)(v16 + 96);
        unint64_t v122 = *(void *)(v16 + 104);
        if ((unint64_t)v123 < v122)
        {
          *int v123 = v15;
          uint64_t v124 = (uint64_t)(v123 + 1);
          goto LABEL_134;
        }
        uint64_t v125 = (unint64_t **)(v16 + 88);
        unsigned __int16 v126 = *(char **)(v16 + 88);
        uint64_t v127 = ((char *)v123 - v126) >> 3;
        unint64_t v128 = v127 + 1;
        if ((unint64_t)(v127 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v129 = v122 - (void)v126;
        if (v129 >> 2 > v128) {
          unint64_t v128 = v129 >> 2;
        }
        if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v128 = 0x1FFFFFFFFFFFFFFFLL;
        }
        if (!v128)
        {
          unint64_t v130 = 0;
          uint64_t v131 = 0;
          uint64_t v132 = (unint64_t *)(8 * v127);
          *(void *)(8 * v127) = v15;
          uint64_t v124 = 8 * v127 + 8;
          if (v123 != (unint64_t *)v126) {
            goto LABEL_122;
          }
LABEL_125:
          *(void *)(v16 + 88) = v132;
          *(void *)(v16 + 96) = v124;
          *(void *)(v16 + 104) = &v131[8 * v130];
          uint64_t v4 = v334;
          if (v123) {
            goto LABEL_133;
          }
          goto LABEL_134;
        }
        if (v128 >> 61) {
          sub_188D718();
        }
        unint64_t v130 = v128;
        uint64_t v131 = (char *)operator new(8 * v128);
        uint64_t v125 = (unint64_t **)(v16 + 88);
        uint64_t v132 = (unint64_t *)&v131[8 * v127];
        *uint64_t v132 = v15;
        uint64_t v124 = (uint64_t)(v132 + 1);
        if (v123 == (unint64_t *)v126) {
          goto LABEL_125;
        }
LABEL_122:
        unint64_t v133 = (char *)(v123 - 1) - v126;
        if (v133 < 0x58) {
          goto LABEL_389;
        }
        if ((unint64_t)(v126 - v131) < 0x20) {
          goto LABEL_389;
        }
        uint64_t v134 = (v133 >> 3) + 1;
        uint64_t v135 = 8 * (v134 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v136 = &v123[v135 / 0xFFFFFFFFFFFFFFF8];
        uint64_t v132 = (unint64_t *)((char *)v132 - v135);
        long long v137 = &v131[8 * v127 - 16];
        unint64_t v138 = v123 - 2;
        uint64_t v139 = v134 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v140 = *(_OWORD *)v138;
          *((_OWORD *)v137 - 1) = *((_OWORD *)v138 - 1);
          *(_OWORD *)long long v137 = v140;
          v137 -= 32;
          v138 -= 4;
          v139 -= 4;
        }
        while (v139);
        int v123 = v136;
        if (v134 != (v134 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_389:
          do
          {
            unint64_t v141 = *--v123;
            *--uint64_t v132 = v141;
          }
          while (v123 != (unint64_t *)v126);
        }
        int v123 = *v125;
        *(void *)(v16 + 88) = v132;
        *(void *)(v16 + 96) = v124;
        *(void *)(v16 + 104) = &v131[8 * v130];
        uint64_t v4 = v334;
        if (v123) {
LABEL_133:
        }
          operator delete(v123);
LABEL_134:
        *(void *)(v16 + 96) = v124;
        unsigned int v120 = v106[2];
LABEL_135:
        LODWORD(v365) = v120;
        unint64_t result = sub_BD5C18(v333, v120, v15);
        if ((result & 1) == 0)
        {
          if (!*(unsigned char *)(v4 + 21))
          {
            LODWORD(v367) = 0;
            uint64_t v155 = *(void *)(v4 + 192);
            uint64_t v156 = (char *)(v155
                          + ((unint64_t)*(unsigned int *)(sub_AFAD84((uint64_t)v332, (unsigned int *)&v367) + 4) << 6));
            LODWORD(v367) = 0;
            uint64_t v157 = *(void *)(v4 + 192);
            uint64_t v158 = sub_AFAD84((uint64_t)v332, (unsigned int *)&v367);
            unint64_t result = (unint64_t)sub_AFA9C0((uint64_t)v332, 0, v156, (unsigned char *)(v157 + ((unint64_t)*(unsigned int *)(v158 + 8) << 6)));
          }
          goto LABEL_257;
        }
        LODWORD(v367) = 0;
        if (*(void *)(v4 + 184) == *(void *)(v4 + 144)) {
          goto LABEL_222;
        }
        unint64_t result = sub_AFAFE4((uint64_t)v332, (unsigned int *)&v367);
        if (result == -1) {
          goto LABEL_222;
        }
        uint64_t v142 = *(void *)(v4 + 152);
        uint64_t v143 = v142 + 16 * (result / 0x30);
        unint64_t v144 = (unsigned __int8 *)(v143 + 10);
        int v145 = result % 0x30;
        if ((unsigned __int16)(result % 0x30) < 9u)
        {
          __int16 v146 = 0;
          goto LABEL_152;
        }
        __int16 v146 = 0;
        uint64_t v147 = (unsigned __int16)(result % 0x30 - 9) >> 3;
        if (!((unsigned __int16)(result % 0x30 - 9) >> 3))
        {
          LODWORD(v147) = result % 0x30;
          __int16 v151 = (unsigned __int8 *)(v143 + 10);
          do
          {
LABEL_150:
            int v159 = *v151++;
            v146 += byte_20EC0B6[v159];
            LOWORD(v147) = v147 - 8;
          }
          while ((unsigned __int16)v147 > 8u);
          goto LABEL_151;
        }
        __int16 v148 = 0;
        uint64_t v149 = v147 + 1;
        uint64_t v150 = (v147 + 1) & 0x3FFE;
        LOWORD(v147) = v145 - 8 * v150;
        __int16 v151 = &v144[v150];
        unint64_t result = v142 + 16 * (result / 0x30) + 11;
        uint64_t v152 = v150;
        do
        {
          uint64_t v153 = *(unsigned __int8 *)(result - 1);
          int v154 = *(unsigned __int8 *)result;
          result += 2;
          v146 += byte_20EC0B6[v153];
          v148 += byte_20EC0B6[v154];
          v152 -= 2;
        }
        while (v152);
        v146 += v148;
        if (v149 != v150) {
          goto LABEL_150;
        }
LABEL_151:
        v144 += ((unsigned __int16)(v145 - 9) >> 3) + 1;
        LOBYTE(v145) = v147;
LABEL_152:
        uint64_t v160 = *(void *)(v4 + 160);
        unsigned __int16 v161 = v146 + byte_20EC0B6[~(-1 << v145) & (unint64_t)*v144];
        if (*(unsigned __int16 *)(v143 + 8) == v161)
        {
          v143 += 16;
          if (v143 != v160)
          {
            while (1)
            {
              uint64_t v162 = v143;
              if (*(_WORD *)(v143 + 8)) {
                break;
              }
              v143 += 16;
              if (v162 + 16 == v160) {
                goto LABEL_222;
              }
            }
            uint64_t v163 = *(_DWORD **)v143;
            if (v143 != v160)
            {
LABEL_160:
              if (*(void *)(v4 + 144))
              {
                while (*(_DWORD *)(v4 + 136) == *v163)
                {
                  v163 += 3;
                  if (v163 == (_DWORD *)(*(void *)v143 + 12 * *(unsigned __int16 *)(v143 + 8)))
                  {
                    while (1)
                    {
                      v143 += 16;
                      if (v143 == v160) {
                        goto LABEL_222;
                      }
                      if (*(_WORD *)(v143 + 8))
                      {
                        uint64_t v163 = *(_DWORD **)v143;
                        break;
                      }
                    }
                  }
                  if (v143 == v160) {
                    break;
                  }
                }
              }
              if (v143 != v160 && v163[2] != v163[1])
              {
                LODWORD(v367) = 0;
                uint64_t v164 = *(void *)(v4 + 192);
                uint64_t v165 = (_DWORD *)(v164
                                + ((unint64_t)*(unsigned int *)(sub_AFAD84((uint64_t)v332, (unsigned int *)&v367)
                                                                     + 4) << 6));
                LODWORD(v367) = 0;
                uint64_t v166 = *(void *)(v4 + 192);
                uint64_t v167 = (_DWORD *)(v166
                                + ((unint64_t)*(unsigned int *)(sub_AFAD84((uint64_t)v332, (unsigned int *)&v367)
                                                                     + 8) << 6));
                if (v165 != v167)
                {
                  int v168 = v359;
                  uint64_t v169 = v357;
                  uint64_t v170 = v352;
                  unint64_t v171 = ((unint64_t)v354 - v353) >> 4;
                  do
                  {
                    unsigned int v174 = v165[13];
                    if (v168)
                    {
                      unsigned int v360 = v165[14];
                      int v172 = v165[15];
                      int v361 = v172;
                    }
                    else
                    {
                      int v172 = *(_DWORD *)(v169 + 12 * v174);
                    }
                    long long v173 = (unsigned int *)((char *)v170 + *(unsigned __int16 *)((char *)v170 - *v170 + 6));
                    v165[7] = *(unsigned int *)((char *)&v173[2
                                                            * (*(_DWORD *)(v169 + 12 * v174 + 4) + v171)
                                                            + 1]
                                              + *v173)
                            + v172;
                    v165 += 16;
                  }
                  while (v165 != v167);
                  char v358 = (int *)(v169 + 12 * v174);
                }
                sub_AFE944(v332, 0);
                if ((*((unsigned char *)v354 + 15) & 1) != 0
                  && (!v356
                   || (*(_DWORD *)(v356 + 4 * (((unint64_t)v354 - v353) >> 4)) & v331) == 0))
                {
                  int v189 = *(_DWORD *)(v4 + 96);
                  if (*(unsigned char *)(v4 + 20))
                  {
                    int v190 = v189 + v189 * *(_DWORD *)(v4 + 416);
                    int v191 = v365;
                    uint64_t v192 = *(void *)(v4 + 48);
                    if (v192) {
                      goto LABEL_209;
                    }
LABEL_211:
                    int v193 = 2147483646;
                  }
                  else
                  {
                    int v190 = -1;
                    int v191 = v365;
                    uint64_t v192 = *(void *)(v4 + 48);
                    if (!v192) {
                      goto LABEL_211;
                    }
LABEL_209:
                    int v193 = sub_AD7004(v192, v191, *(_DWORD *)(v4 + 100) + v321);
                  }
                  if (sub_AFEBBC(v332, 0, v322 + v189 + v189 * v191, v189 + v189 * v191, v190, v193)) {
                    sub_A3EF14(v320, &v365);
                  }
                }
                LODWORD(v367) = 0;
                uint64_t v194 = *(void *)(v4 + 192);
                uint64_t v195 = (_DWORD *)(v194
                                + ((unint64_t)*(unsigned int *)(sub_AFAD84((uint64_t)v332, (unsigned int *)&v367)
                                                                     + 4) << 6));
                LODWORD(v367) = 0;
                uint64_t v196 = *(void *)(v4 + 192);
                __int16 v197 = (_DWORD *)(v196
                                + ((unint64_t)*(unsigned int *)(sub_AFAD84((uint64_t)v332, (unsigned int *)&v367)
                                                                     + 8) << 6));
                if (v195 != v197)
                {
                  int v198 = v359;
                  uint64_t v199 = v357;
                  uint64_t v200 = v352;
                  unint64_t v201 = ((unint64_t)v354 - v353) >> 4;
                  do
                  {
                    unsigned int v204 = v195[13];
                    if (v198)
                    {
                      unsigned int v360 = v195[14];
                      int v202 = v195[15];
                      int v361 = v202;
                    }
                    else
                    {
                      int v202 = *(_DWORD *)(v199 + 12 * v204);
                    }
                    int v203 = (unsigned int *)((char *)v200 + *(unsigned __int16 *)((char *)v200 - *v200 + 6));
                    v195[7] = *(unsigned int *)((char *)&v203[2
                                                            * (*(_DWORD *)(v199 + 12 * v204 + 4) + v201)
                                                            + 2]
                                              + *v203)
                            + v202;
                    v195 += 16;
                  }
                  while (v195 != v197);
                  char v358 = (int *)(v199 + 12 * v204);
                }
                unint64_t result = (unint64_t)sub_AFE944(v332, 0);
              }
            }
          }
        }
        else
        {
          uint64_t v163 = (_DWORD *)(*(void *)v143 + 12 * v161);
          if (v143 != v160) {
            goto LABEL_160;
          }
        }
LABEL_222:
        if ((*((unsigned char *)v354 + 15) & 2) == 0) {
          goto LABEL_257;
        }
        if (!v356)
        {
          if (!v331) {
            goto LABEL_227;
          }
          goto LABEL_257;
        }
        if (*(_DWORD *)(v356 + 4 * (((unint64_t)v354 - v353) >> 4)) != v331) {
          goto LABEL_257;
        }
LABEL_227:
        unsigned int v205 = v330 + *(_DWORD *)(v4 + 96) + *(_DWORD *)(v4 + 96) * v365;
        LODWORD(v367) = v205;
        if (*(void *)(v4 + 184) == *(void *)(v4 + 144)) {
          goto LABEL_257;
        }
        unint64_t result = sub_AFAFE4((uint64_t)v332, (unsigned int *)&v367);
        if (result == -1) {
          goto LABEL_257;
        }
        uint64_t v206 = *(void *)(v4 + 152);
        uint64_t v207 = v206 + 16 * (result / 0x30);
        int v208 = (unsigned __int8 *)(v207 + 10);
        int v209 = result % 0x30;
        if ((unsigned __int16)(result % 0x30) < 9u)
        {
          __int16 v210 = 0;
          goto LABEL_239;
        }
        __int16 v210 = 0;
        uint64_t v211 = (unsigned __int16)(result % 0x30 - 9) >> 3;
        if (!((unsigned __int16)(result % 0x30 - 9) >> 3))
        {
          LODWORD(v211) = result % 0x30;
          uint64_t v215 = (unsigned __int8 *)(v207 + 10);
          do
          {
LABEL_237:
            int v219 = *v215++;
            v210 += byte_20EC0B6[v219];
            LOWORD(v211) = v211 - 8;
          }
          while ((unsigned __int16)v211 > 8u);
          goto LABEL_238;
        }
        __int16 v212 = 0;
        uint64_t v213 = v211 + 1;
        uint64_t v214 = (v211 + 1) & 0x3FFE;
        LOWORD(v211) = v209 - 8 * v214;
        uint64_t v215 = &v208[v214];
        unint64_t result = v206 + 16 * (result / 0x30) + 11;
        uint64_t v216 = v214;
        do
        {
          uint64_t v217 = *(unsigned __int8 *)(result - 1);
          int v218 = *(unsigned __int8 *)result;
          result += 2;
          v210 += byte_20EC0B6[v217];
          v212 += byte_20EC0B6[v218];
          v216 -= 2;
        }
        while (v216);
        v210 += v212;
        if (v213 != v214) {
          goto LABEL_237;
        }
LABEL_238:
        v208 += ((unsigned __int16)(v209 - 9) >> 3) + 1;
        LOBYTE(v209) = v211;
LABEL_239:
        uint64_t v220 = *(void *)(v4 + 160);
        unsigned __int16 v221 = v210 + byte_20EC0B6[~(-1 << v209) & (unint64_t)*v208];
        if (*(unsigned __int16 *)(v207 + 8) == v221)
        {
          v207 += 16;
          if (v207 != v220)
          {
            while (1)
            {
              uint64_t v222 = v207;
              if (*(_WORD *)(v207 + 8)) {
                break;
              }
              v207 += 16;
              if (v222 + 16 == v220) {
                goto LABEL_257;
              }
            }
            uint64_t v223 = *(_DWORD **)v207;
            if (v207 != v220) {
              goto LABEL_247;
            }
          }
          goto LABEL_257;
        }
        uint64_t v223 = (_DWORD *)(*(void *)v207 + 12 * v221);
        if (v207 == v220) {
          goto LABEL_257;
        }
LABEL_247:
        if (*(void *)(v4 + 144))
        {
          do
          {
            if (*(_DWORD *)(v4 + 136) != *v223) {
              break;
            }
            v223 += 3;
            if (v223 == (_DWORD *)(*(void *)v207 + 12 * *(unsigned __int16 *)(v207 + 8)))
            {
              do
              {
                v207 += 16;
                if (v207 == v220) {
                  goto LABEL_257;
                }
              }
              while (!*(_WORD *)(v207 + 8));
              uint64_t v223 = *(_DWORD **)v207;
            }
          }
          while (v207 != v220);
        }
        if (v207 != v220)
        {
          uint64_t v226 = v223 + 1;
          int v225 = v223[1];
          int v224 = v226[1];
          uint64_t v227 = (v224 - v225);
          if (v224 != v225)
          {
            unsigned int v234 = 0;
            unsigned int v323 = v205;
            do
            {
              uint64_t v235 = sub_AFC890(v332, v205, v234);
              signed int v236 = *((_DWORD *)v354 + 2) + *(_DWORD *)(v235 + 28);
              if (v359)
              {
                unint64_t result = sub_A1F39C(*(void *)(v4 + 24), (uint64_t)&v350, v236, 1);
                if ((result & 1) == 0) {
                  goto LABEL_281;
                }
              }
              else
              {
                unint64_t result = sub_A1F8B4((uint64_t)&v350, v236, 1);
                if (!result) {
                  goto LABEL_281;
                }
              }
              uint64_t v328 = *(void *)(v235 + 20);
              int v237 = *(_DWORD *)(v235 + 32);
              int v329 = *(_DWORD *)(v235 + 40);
              int v326 = *(_DWORD *)(v235 + 36);
              int v327 = *(_DWORD *)(v235 + 44);
              int v325 = *(unsigned __int8 *)(v235 + 48);
              __int16 v348 = *(_WORD *)(v235 + 49);
              uint64_t v238 = (void *)(*(void *)(v4 + 24) + 4136);
              char v349 = *(unsigned char *)(v235 + 51);
              if (sub_A10E20(v238, SHIDWORD(v5)))
              {
                uint64_t v239 = (int *)sub_A1120C(*(void *)(*v238 + 3944), v5);
              }
              else
              {
                if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                  && __cxa_guard_acquire(&qword_24F7308))
                {
                  sub_518C8(0x3B60u, 0x7FCAu);
                  dword_24F7300 = v314 | 0x40000000;
                  __cxa_guard_release(&qword_24F7308);
                  uint64_t v4 = v334;
                }
                uint64_t v240 = *v238;
                if (dword_24F7300 == HIDWORD(v5))
                {
                  int v241 = *(unsigned int **)(*(void *)(v240 + 3976) + 72);
                  if (!v241)
                  {
                    exception = __cxa_allocate_exception(0x40uLL);
                    uint64_t v367 = (char *)operator new(0x40uLL);
                    long long v368 = xmmword_20B9A90;
                    strcpy(v367, "Realtime stop pattern quad data requested on nullptr buffer");
                    uint64_t v317 = (void *)sub_2F404((uint64_t)exception, (long long *)&v367);
                  }
                  uint64_t v242 = (int *)((char *)v241 + *v241);
                  unsigned int v243 = (unsigned __int16 *)((char *)v242 - *v242);
                  if (*v243 >= 5u && (uint64_t v244 = v243[2]) != 0) {
                    uint64_t v245 = (unsigned int *)((char *)v242 + v244 + *(unsigned int *)((char *)v242 + v244));
                  }
                  else {
                    uint64_t v245 = 0;
                  }
                  uint64_t v239 = (int *)sub_A1139C(v245, v5);
                }
                else
                {
                  uint64_t v239 = (int *)sub_A11500(v240 + 24, v5, 0, "stop pattern");
                }
              }
              uint64_t v246 = v239;
              uint64_t v247 = *v238;
              uint64_t v248 = (unsigned __int16 *)((char *)v239 - *v239);
              if (*v248 >= 0xFu && (uint64_t v249 = v248[7]) != 0)
              {
                uint64_t v250 = v227;
                uint64_t v251 = v247 + 3896;
                char v252 = sub_49442C(*(unsigned __int16 *)((char *)v239 + v249));
                if (sub_C25A10(v251, v252)) {
                  goto LABEL_305;
                }
              }
              else
              {
                uint64_t v250 = v227;
                uint64_t v256 = v247 + 3896;
                char v257 = sub_49442C(0x7FFFu);
                if (sub_C25A10(v256, v257))
                {
LABEL_305:
                  int v255 = 128;
                  uint64_t v227 = v250;
                  unsigned int v205 = v323;
                  if (sub_A10E20(v238, SHIDWORD(v5))) {
                    goto LABEL_319;
                  }
                  goto LABEL_306;
                }
              }
              uint64_t v253 = (unsigned __int16 *)((char *)v246 - *v246);
              uint64_t v227 = v250;
              if (*v253 < 0xBu)
              {
                unsigned int v205 = v323;
                int v255 = sub_A2BF48(0);
                if (sub_A10E20(v238, SHIDWORD(v5))) {
                  goto LABEL_319;
                }
              }
              else
              {
                uint64_t v254 = v253[5];
                unsigned int v205 = v323;
                if (v254)
                {
                  int v255 = sub_A2BF48(*((unsigned char *)v246 + v254));
                  if (sub_A10E20(v238, SHIDWORD(v5))) {
                    goto LABEL_319;
                  }
                }
                else
                {
                  int v255 = sub_A2BF48(0);
                  if (sub_A10E20(v238, SHIDWORD(v5)))
                  {
LABEL_319:
                    long long v264 = (int *)sub_A1120C(*(void *)(*v238 + 3944), v5);
LABEL_320:
                    uint64_t v265 = (unsigned __int16 *)((char *)v264 - *v264);
                    if (*v265 < 0xFu) {
                      goto LABEL_324;
                    }
                    goto LABEL_321;
                  }
                }
              }
LABEL_306:
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                && __cxa_guard_acquire(&qword_24F7308))
              {
                sub_518C8(0x3B60u, 0x7FCAu);
                dword_24F7300 = v315 | 0x40000000;
                __cxa_guard_release(&qword_24F7308);
                uint64_t v4 = v334;
                unsigned int v205 = v323;
              }
              uint64_t v258 = *v238;
              if (dword_24F7300 != HIDWORD(v5))
              {
                long long v264 = (int *)sub_A11500(v258 + 24, v5, 0, "stop pattern");
                goto LABEL_320;
              }
              unint64_t v259 = *(unsigned int **)(*(void *)(v258 + 3976) + 72);
              if (!v259)
              {
                uint64_t v318 = __cxa_allocate_exception(0x40uLL);
                uint64_t v367 = (char *)operator new(0x40uLL);
                long long v368 = xmmword_20B9A90;
                strcpy(v367, "Realtime stop pattern quad data requested on nullptr buffer");
                uint64_t v319 = (void *)sub_2F404((uint64_t)v318, (long long *)&v367);
              }
              int v260 = (int *)((char *)v259 + *v259);
              unint64_t v261 = (unsigned __int16 *)((char *)v260 - *v260);
              if (*v261 >= 5u && (uint64_t v262 = v261[2]) != 0) {
                long long v263 = (unsigned int *)((char *)v260 + v262 + *(unsigned int *)((char *)v260 + v262));
              }
              else {
                long long v263 = 0;
              }
              long long v264 = (int *)sub_A1139C(v263, v5);
              uint64_t v265 = (unsigned __int16 *)((char *)v264 - *v264);
              if (*v265 < 0xFu)
              {
LABEL_324:
                char v267 = 3;
                int v269 = v329;
                goto LABEL_325;
              }
LABEL_321:
              uint64_t v266 = v265[7];
              if (!v266) {
                goto LABEL_324;
              }
              char v267 = 0;
              unsigned int v268 = *(unsigned __int16 *)((char *)v264 + v266);
              int v269 = v329;
              switch(v268)
              {
                case 0u:
                case 1u:
                case 2u:
                case 0xCu:
                  break;
                case 3u:
                  char v267 = 1;
                  break;
                case 4u:
                  char v267 = 2;
                  break;
                case 5u:
                case 6u:
                case 7u:
                  goto LABEL_323;
                case 8u:
                case 9u:
                case 0xAu:
                case 0xBu:
                  goto LABEL_367;
                default:
                  int v269 = v329;
                  if (v268 != 900)
                  {
LABEL_367:
                    uint64_t v307 = ((5243 * (v268 >> 2)) >> 17) - 1;
                    if (v307 > 0xB) {
LABEL_323:
                    }
                      char v267 = 3;
                    else {
                      char v267 = byte_20EC3B6[v307];
                    }
                  }
                  break;
              }
LABEL_325:
              int v270 = (1 << v267) | v325;
              int v271 = v361;
              unint64_t v272 = 0xFFFFFFFF00000000;
              if (v359) {
                unint64_t v272 = (unint64_t)v360 << 32;
              }
              unint64_t v273 = (-1431655765 * (((unint64_t)v358 - v357) >> 2)) | v272;
              if (!v359) {
                int v271 = 0x7FFFFFFF;
              }
              int v274 = (unsigned int *)((char *)v352 + *(unsigned __int16 *)((char *)v352 - *v352 + 6));
              int v275 = (char *)v274 + *v274;
              unint64_t v276 = &v361;
              if (!v359) {
                unint64_t v276 = v358;
              }
              int v277 = *v276;
              unint64_t v278 = ((unint64_t)v354 - v353) >> 4;
              int v279 = *(_DWORD *)&v275[8 * (v358[1] + v278) + 4];
              int v280 = *(_DWORD *)&v275[8 * (v358[1] + v278) + 8] + v277;
              int v281 = 10 * (v277 - *(_DWORD *)(v235 + 28) + v279);
              LODWORD(v335) = v278;
              *(void *)((char *)&v335 + 4) = v273;
              HIDWORD(v335) = v271;
              unsigned int v336 = v364;
              uint64_t v337 = v328;
              int v338 = v280;
              int v339 = v237;
              int v340 = v255 + v326;
              int v341 = v269;
              int v342 = (v281 & ~(v281 >> 31)) + v327;
              char v343 = v270;
              __int16 v344 = v348;
              char v345 = v349;
              unint64_t v346 = v273;
              int v347 = v271;
              LODWORD(v367) = 0;
              if (*(void *)(v4 + 184) == *(void *)(v4 + 144)) {
                goto LABEL_280;
              }
              unint64_t v282 = sub_AFAFE4((uint64_t)v332, (unsigned int *)&v367);
              if (v282 == -1) {
                goto LABEL_280;
              }
              uint64_t v283 = *(void *)(v4 + 152);
              uint64_t v284 = v283 + 16 * (v282 / 0x30);
              uint64_t v285 = (unsigned __int8 *)(v284 + 10);
              int v286 = v282 % 0x30;
              if ((unsigned __int16)(v282 % 0x30) < 9u)
              {
                __int16 v287 = 0;
                goto LABEL_343;
              }
              __int16 v287 = 0;
              uint64_t v288 = (unsigned __int16)(v282 % 0x30 - 9) >> 3;
              if ((unsigned __int16)(v282 % 0x30 - 9) >> 3)
              {
                __int16 v289 = 0;
                uint64_t v290 = v288 + 1;
                uint64_t v291 = (v288 + 1) & 0x3FFE;
                LOWORD(v288) = v286 - 8 * v291;
                uint64_t v292 = &v285[v291];
                long long v293 = (unsigned __int8 *)(v283 + 16 * (v282 / 0x30) + 11);
                uint64_t v294 = v291;
                do
                {
                  uint64_t v295 = *(v293 - 1);
                  int v296 = *v293;
                  v293 += 2;
                  v287 += byte_20EC0B6[v295];
                  v289 += byte_20EC0B6[v296];
                  v294 -= 2;
                }
                while (v294);
                v287 += v289;
                if (v290 == v291) {
                  goto LABEL_342;
                }
              }
              else
              {
                LODWORD(v288) = v282 % 0x30;
                uint64_t v292 = (unsigned __int8 *)(v284 + 10);
              }
              do
              {
                int v297 = *v292++;
                v287 += byte_20EC0B6[v297];
                LOWORD(v288) = v288 - 8;
              }
              while ((unsigned __int16)v288 > 8u);
LABEL_342:
              v285 += ((unsigned __int16)(v286 - 9) >> 3) + 1;
              LOBYTE(v286) = v288;
LABEL_343:
              uint64_t v298 = *(void *)(v4 + 160);
              unsigned __int16 v299 = v287 + byte_20EC0B6[~(-1 << v286) & (unint64_t)*v285];
              if (*(unsigned __int16 *)(v284 + 8) == v299)
              {
                v284 += 16;
                if (v284 != v298)
                {
                  while (1)
                  {
                    uint64_t v300 = v284;
                    if (*(_WORD *)(v284 + 8)) {
                      break;
                    }
                    v284 += 16;
                    if (v300 + 16 == v298) {
                      goto LABEL_280;
                    }
                  }
                  unint64_t v301 = *(_DWORD **)v284;
                  if (v284 != v298)
                  {
LABEL_351:
                    if (*(void *)(v4 + 144))
                    {
                      while (*(_DWORD *)(v4 + 136) == *v301)
                      {
                        v301 += 3;
                        if (v301 == (_DWORD *)(*(void *)v284 + 12 * *(unsigned __int16 *)(v284 + 8)))
                        {
                          while (1)
                          {
                            v284 += 16;
                            if (v284 == v298) {
                              goto LABEL_280;
                            }
                            if (*(_WORD *)(v284 + 8))
                            {
                              unint64_t v301 = *(_DWORD **)v284;
                              break;
                            }
                          }
                        }
                        if (v284 == v298) {
                          break;
                        }
                      }
                    }
                    if (v284 != v298 && v301[2] != v301[1])
                    {
                      unint64_t result = sub_AFC318((uint64_t)v332, (uint64_t)&v335, 0, 0, 0);
                      if ((result & 0x100) != 0)
                      {
                        LODWORD(v367) = 0;
                        uint64_t v302 = *(void *)(v4 + 192);
                        uint64_t v303 = v302
                             + ((unint64_t)*(unsigned int *)(sub_AFAD84((uint64_t)v332, (unsigned int *)&v367) + 4) << 6);
                        LODWORD(v367) = 0;
                        uint64_t v304 = *(void *)(v4 + 192);
                        uint64_t v305 = sub_AFAD84((uint64_t)v332, (unsigned int *)&v367);
                        int v306 = (long long *)(v304 + ((unint64_t)*(unsigned int *)(v305 + 8) << 6));
                        if ((long long *)v303 != v306)
                        {
                          while (*(_DWORD *)(v303 + 28) != 0x7FFFFFFF)
                          {
                            v303 += 64;
                            if ((long long *)v303 == v306)
                            {
                              uint64_t v303 = v304 + ((unint64_t)*(unsigned int *)(v305 + 8) << 6);
                              goto LABEL_377;
                            }
                          }
                          if ((long long *)v303 != v306)
                          {
                            for (uint64_t j = (long long *)(v303 + 64); j != v306; j += 4)
                            {
                              if (*((_DWORD *)j + 7) != 0x7FFFFFFF)
                              {
                                long long v309 = *j;
                                long long v310 = j[1];
                                long long v311 = j[3];
                                *(_OWORD *)(v303 + 32) = j[2];
                                *(_OWORD *)(v303 + 48) = v311;
                                *(_OWORD *)uint64_t v303 = v309;
                                *(_OWORD *)(v303 + 16) = v310;
                                v303 += 64;
                              }
                            }
                          }
                        }
LABEL_377:
                        LODWORD(v367) = 0;
                        uint64_t v312 = *(void *)(v4 + 192);
                        uint64_t v313 = sub_AFAD84((uint64_t)v332, (unsigned int *)&v367);
                        unint64_t result = (unint64_t)sub_AFA9C0((uint64_t)v332, 0, (char *)v303, (unsigned char *)(v312+ ((unint64_t)*(unsigned int *)(v313 + 8) << 6)));
                      }
                      goto LABEL_281;
                    }
                  }
                }
              }
              else
              {
                unint64_t v301 = (_DWORD *)(*(void *)v284 + 12 * v299);
                if (v284 != v298) {
                  goto LABEL_351;
                }
              }
LABEL_280:
              unint64_t result = sub_AFBE70((uint64_t)v332, 0, &v335);
LABEL_281:
              ++v234;
            }
            while (v234 != v227);
          }
        }
LABEL_257:
        unint64_t v13 = v353;
        unsigned int v12 = v354 + 2;
        v354 += 2;
        if (*(unsigned char *)(v350 + 16)) {
          BOOL v228 = v351 == 0;
        }
        else {
          BOOL v228 = 0;
        }
        if (v228 && (unint64_t)v12 >= v353 && (unint64_t)v12 < v355)
        {
          do
          {
            unint64_t v231 = __ROR8__(*v12, 32);
            if (HIDWORD(v231) == 1 && (v231 + 3) < 2) {
              break;
            }
            unint64_t result = sub_2AB7E4(**(void **)(v350 + 4120));
            unint64_t v13 = v353;
            unsigned int v12 = v354;
            if (result) {
              break;
            }
            unsigned int v12 = v354 + 2;
            int v354 = v12;
          }
          while ((unint64_t)v12 >= v353 && (unint64_t)v12 < v355);
        }
      }
      v362 += 4;
      uint64_t v7 = v362;
    }
    while ((unint64_t)v362 < v363);
  }
  return result;
}

void sub_AFE898(_Unwind_Exception *a1)
{
}

void sub_AFE8B0(_Unwind_Exception *a1)
{
}

void sub_AFE8C8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 - 153) < 0) {
    operator delete(*(void **)(v1 + 152));
  }
  _Unwind_Resume(exception_object);
}

void sub_AFE8FC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_AFE944(void *a1, unsigned int a2)
{
  v36[0] = a2;
  sub_AFC6C4(a1, v36, v32);
  uint64_t v4 = a1[6];
  uint64_t v5 = a1[7];
  uint64_t v23 = a1;
  uint64_t v24 = v4;
  uint64_t v25 = v5;
  uint64_t v26 = v5;
  uint64_t v27 = 0;
  uint64_t v28 = v4;
  uint64_t v29 = v5;
  uint64_t v30 = v5;
  uint64_t v31 = 0;
  unint64_t result = (char *)sub_AE47A0(&v23);
  if (v32[1] == v24 && v33 == v25 && v34 == v26 && (v34 == v33 || v35 == v27)) {
    return result;
  }
  int v7 = *(_DWORD *)(v35 + 4);
  int v8 = *(_DWORD *)(v35 + 8);
  unsigned int v9 = v8 - v7;
  if (v8 == v7) {
    return result;
  }
  char v22 = 0;
  unsigned int v10 = 0;
  unsigned int v11 = 1;
LABEL_6:
  while (2)
  {
    if (v11 <= v9) {
      unsigned int v12 = v9;
    }
    else {
      unsigned int v12 = v11;
    }
    unint64_t result = (char *)sub_AFC890(a1, a2, v10++);
    if (*((_DWORD *)result + 7) != 0x7FFFFFFF && v10 < v9)
    {
      uint64_t v14 = result;
      for (unsigned int i = v10; v12 != i; ++i)
      {
        unint64_t result = (char *)sub_AFC890(a1, a2, i);
        int v16 = *((_DWORD *)result + 7);
        if (v16 != 0x7FFFFFFF)
        {
          int v17 = *((_DWORD *)v14 + 7);
          if (v17 > v16
            || *((_DWORD *)v14 + 8) > *((_DWORD *)result + 8)
            || (unsigned int v18 = *((_DWORD *)result + 9), v19 = *((_DWORD *)v14 + 9), v19 > v18)
            || v19 == v18 && v17 == v16 && 10 * v17 - *((_DWORD *)v14 + 11) > 10 * v16 - *((_DWORD *)result + 11)
            || (v14[48] & ~result[48]) != 0)
          {
            if (v16 <= v17 && *((_DWORD *)result + 8) <= *((_DWORD *)v14 + 8))
            {
              unsigned int v20 = *((_DWORD *)v14 + 9);
              unsigned int v21 = *((_DWORD *)result + 9);
              if (v21 <= v20
                && (v21 != v20 || v16 != v17 || 10 * v16 - *((_DWORD *)result + 11) <= 10 * v17 - *((_DWORD *)v14 + 11))
                && (result[48] & ~v14[48]) == 0)
              {
                *((_DWORD *)v14 + 7) = 0x7FFFFFFF;
                if (v10 == v9) {
                  return sub_AFC5B8((uint64_t)a1, a2);
                }
                char v22 = 1;
                ++v11;
                goto LABEL_6;
              }
            }
          }
          else
          {
            *((_DWORD *)result + 7) = 0x7FFFFFFF;
            char v22 = 1;
          }
        }
      }
    }
    if (v10 != v9)
    {
      ++v11;
      continue;
    }
    break;
  }
  if ((v22 & 1) == 0) {
    return result;
  }
  return sub_AFC5B8((uint64_t)a1, a2);
}

BOOL sub_AFEBBC(void *a1, unsigned int a2, unsigned int a3, int a4, int a5, int a6)
{
  v55[0] = a2;
  sub_AFC6C4(a1, v55, v52);
  uint64_t v11 = a1[6];
  uint64_t v12 = a1[7];
  __int16 v44 = a1;
  *(void *)&long long v45 = v11;
  *((void *)&v45 + 1) = v12;
  uint64_t v46 = v12;
  uint64_t v47 = 0;
  uint64_t v48 = v11;
  uint64_t v49 = v12;
  uint64_t v50 = v12;
  uint64_t v51 = 0;
  sub_AE47A0(&v44);
  if (*(_OWORD *)&v52[8] == v45
    && *(void *)&v52[24] == v46
    && (*(void *)&v52[24] == *(void *)&v52[16] || (void)v53 == v47))
  {
    goto LABEL_7;
  }
  int v13 = *(_DWORD *)(v53 + 4);
  int v14 = *(_DWORD *)(v53 + 8);
  int v15 = v14 - v13;
  if (v14 == v13) {
    goto LABEL_7;
  }
  if (a6 == 0x7FFFFFFF)
  {
    unsigned int v16 = 0;
    do
      sub_AFC890(a1, a2, v16++);
    while (v15 != v16);
LABEL_7:
    LOBYTE(v17) = 0;
    return v17 != 0;
  }
  __int16 v17 = 0;
  unsigned int v19 = 0;
  unsigned int v43 = a3;
  do
  {
    char v22 = (_OWORD *)sub_AFC890(a1, a2, v19);
    long long v23 = v22[2];
    long long v24 = v22[3];
    long long v25 = v22[1];
    *(_OWORD *)uint64_t v52 = *v22;
    *(_OWORD *)&v52[16] = v25;
    long long v53 = v23;
    long long v54 = v24;
    if (SHIDWORD(v25) <= a6)
    {
      if (a5 == 0xFFFFFFFFLL
        || (LODWORD(v44) = a5,
            uint64_t v26 = a1[11],
            uint64_t v27 = v26 + ((unint64_t)*(unsigned int *)(sub_AFAD84((uint64_t)a1, (unsigned int *)&v44) + 4) << 6),
            LODWORD(v44) = a5,
            uint64_t v28 = a1[11],
            uint64_t v29 = v28 + ((unint64_t)*(unsigned int *)(sub_AFAD84((uint64_t)a1, (unsigned int *)&v44) + 8) << 6),
            v27 == v29))
      {
LABEL_30:
        LODWORD(v44) = a4;
        uint64_t v33 = a1[11];
        uint64_t v34 = v33 + ((unint64_t)*(unsigned int *)(sub_AFAD84((uint64_t)a1, (unsigned int *)&v44) + 4) << 6);
        LODWORD(v44) = a4;
        uint64_t v35 = a1[11];
        uint64_t v36 = v35 + ((unint64_t)*(unsigned int *)(sub_AFAD84((uint64_t)a1, (unsigned int *)&v44) + 8) << 6);
        if (v34 == v36)
        {
LABEL_45:
          unint64_t v40 = sub_AFC318((uint64_t)a1, (uint64_t)v52, v43, 1, 1);
          unint64_t v20 = v40 >> 8;
          __int16 v21 = v40;
          if ((_BYTE)v40)
          {
            *(void *)(v41 + 52) = -1;
            *(_DWORD *)(v41 + 60) = 0x7FFFFFFF;
          }
          goto LABEL_11;
        }
        while (1)
        {
          int v37 = *(_DWORD *)(v34 + 28);
          if (v37 != 0x7FFFFFFF && v37 <= *(_DWORD *)&v52[28] && *(_DWORD *)(v34 + 32) <= (int)v53)
          {
            unsigned int v39 = *(_DWORD *)(v34 + 36);
            if (v39 <= DWORD1(v53)
              && (v39 != DWORD1(v53)
               || v37 != *(_DWORD *)&v52[28]
               || 10 * v37 - *(_DWORD *)(v34 + 44) <= 10 * *(_DWORD *)&v52[28] - HIDWORD(v53))
              && (*(unsigned __int8 *)(v34 + 48) & ~v54) == 0)
            {
              break;
            }
          }
          v34 += 64;
          if (v34 == v36) {
            goto LABEL_45;
          }
        }
      }
      else
      {
        while (1)
        {
          int v30 = *(_DWORD *)(v27 + 28);
          if (v30 != 0x7FFFFFFF && v30 <= *(_DWORD *)&v52[28] && *(_DWORD *)(v27 + 32) <= (int)v53)
          {
            unsigned int v32 = *(_DWORD *)(v27 + 36);
            if (v32 <= DWORD1(v53)
              && (v32 != DWORD1(v53)
               || v30 != *(_DWORD *)&v52[28]
               || 10 * v30 - *(_DWORD *)(v27 + 44) <= 10 * *(_DWORD *)&v52[28] - HIDWORD(v53))
              && (*(unsigned __int8 *)(v27 + 48) & ~v54) == 0)
            {
              break;
            }
          }
          v27 += 64;
          if (v27 == v29) {
            goto LABEL_30;
          }
        }
      }
      LOWORD(v20) = 0;
      __int16 v21 = 0;
LABEL_11:
      __int16 v17 = v21 | v17 | v17 & 0xFF00 | ((_WORD)v20 << 8);
    }
    ++v19;
  }
  while (v19 != v15);
  if ((v17 & 0xFF00) != 0) {
    sub_AFC5B8((uint64_t)a1, v43);
  }
  return v17 != 0;
}

uint64_t sub_AFEF40(uint64_t a1)
{
  uint64_t v20 = 0;
  long long v19 = 0u;
  memset(v18, 0, sizeof(v18));
  *(_OWORD *)long long __p = 0u;
  memset(v16, 0, sizeof(v16));
  char v22 = 0;
  LOBYTE(v21) = 0;
  sub_C50BD8((char *)__p, &v21);
  if (v22 < 0) {
    operator delete((void *)v21);
  }
  BYTE8(v18[8]) = 0;
  uint64_t v20 = 0;
  long long v19 = 0uLL;
  uint64_t v2 = (void **)(a1 + 136);
  unint64_t v3 = *(void **)(a1 + 136);
  *(_DWORD *)(a1 + 128) = v16[0];
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 144);
    uint64_t v5 = v3;
    if ((void *)v4 != v3)
    {
      do
      {
        v4 -= 296;
        sub_9F5E28(a1 + 152, v4);
      }
      while ((void *)v4 != v3);
      uint64_t v5 = *v2;
    }
    *(void *)(a1 + 144) = v3;
    operator delete(v5);
    *uint64_t v2 = 0;
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
  }
  *(_OWORD *)(a1 + 136) = *(_OWORD *)&v16[1];
  *(void **)(a1 + 152) = v16[3];
  memset(&v16[1], 0, 24);
  uint64_t v6 = (void **)(a1 + 160);
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)uint64_t v6 = *(_OWORD *)__p;
  *(void *)(a1 + 176) = *(void *)&v18[0];
  BYTE7(v18[0]) = 0;
  LOBYTE(__p[0]) = 0;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)((char *)&v18[4] + 8);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)((char *)v18 + 8);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)((char *)&v18[1] + 8);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)((char *)&v18[2] + 8);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)((char *)&v18[3] + 8);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)((char *)&v18[5] + 8);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)((char *)&v18[6] + 8);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)((char *)&v18[7] + 8);
  *(unsigned char *)(a1 + 312) = BYTE8(v18[8]);
  int v7 = *(void **)(a1 + 320);
  if (v7)
  {
    *(void *)(a1 + 328) = v7;
    operator delete(v7);
    *(void *)(a1 + 320) = 0;
    *(void *)(a1 + 328) = 0;
    *(void *)(a1 + 336) = 0;
    int v8 = SBYTE7(v18[0]);
    *(_OWORD *)(a1 + 320) = v19;
    *(void *)(a1 + 336) = v20;
    uint64_t v20 = 0;
    long long v19 = 0uLL;
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)(a1 + 320) = v19;
    *(void *)(a1 + 336) = v20;
    uint64_t v20 = 0;
    long long v19 = 0uLL;
  }
  if (v16[1])
  {
    unsigned int v9 = (char *)v16[2];
    unsigned int v10 = v16[1];
    if (v16[2] != v16[1])
    {
      do
      {
        v9 -= 296;
        sub_9F5E28((uint64_t)&v16[3], (uint64_t)v9);
      }
      while (v9 != v16[1]);
      unsigned int v10 = v16[1];
    }
    v16[2] = v16[1];
    operator delete(v10);
  }
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a1 + 88);
  if (*(void *)(a1 + 384) | *(void *)(a1 + 424))
  {
    for (uint64_t i = *(void *)(a1 + 392); i != *(void *)(a1 + 400); i += 16)
    {
      if (*(void *)i)
      {
        free(*(void **)i);
        *(void *)uint64_t i = 0;
      }
      *(void *)(i + 8) = 0;
    }
    *(void *)(a1 + 424) = 0;
  }
  *(uint64x2_t *)(a1 + 344) = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 360), (float)*(unint64_t *)(a1 + 416))));
  *(unsigned char *)(a1 + 368) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 440) = *(void *)(a1 + 432);
  *(_DWORD *)(a1 + 456) = 0;
  if (*(void *)(a1 + 504) | *(void *)(a1 + 544))
  {
    for (uint64_t j = *(void *)(a1 + 512); j != *(void *)(a1 + 520); j += 16)
    {
      if (*(void *)j)
      {
        free(*(void **)j);
        *(void *)uint64_t j = 0;
      }
      *(void *)(j + 8) = 0;
    }
    *(void *)(a1 + 544) = 0;
  }
  *(uint64x2_t *)(a1 + 464) = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 480), (float)*(unint64_t *)(a1 + 536))));
  *(unsigned char *)(a1 + 488) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 560) = *(void *)(a1 + 552);
  *(_DWORD *)(a1 + 576) = 0;
  *(void *)(a1 + 2016) = 0;
  *(void *)(a1 + 2032) = 0;
  *(void *)(a1 + 2024) = 0;
  int v13 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 1352) = v13;
  *(unsigned char *)(a1 + 1356) = *(unsigned char *)(a1 + 28);
  char v14 = *(unsigned char *)(a1 + 72);
  *(unsigned char *)(a1 + 1357) = v14;
  *(_DWORD *)(a1 + 616) = v13;
  *(unsigned char *)(a1 + 634) = 0;
  *(_DWORD *)(a1 + 636) = 0;
  *(unsigned char *)(a1 + 640) = v14;
  v16[0] = (void *)0x1FFFFFFFELL;
  uint64_t result = sub_AD28B0(a1 + 344, (uint64_t *)v16);
  *(_DWORD *)(a1 + 584) = result;
  return result;
}

void sub_AFF2B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 - 81) < 0) {
    operator delete(*(void **)(v2 - 104));
  }
  sub_20ADF74(v2 - 104, (uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_AFF2E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v18 = 0;
  long long v19 = 0;
  int v15 = 0;
  unsigned int v16 = 0;
  uint64_t v24 = 0;
  long long v25 = 0;
  sub_ACDFB0((uint64_t)&v26, v2, a1 + 344, a1 + 464, (void *)(a1 + 592), &v18, &v15, &v24);
  unint64_t v3 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)v19;
  if (v19 && !atomic_fetch_add((atomic_ullong *volatile)v19 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v26 = *(void *)(a1 + 8);
  uint64_t v28 = v6;
  int v27 = *(_DWORD *)(a1 + 24);
  char v29 = *(unsigned char *)(a1 + 28);
  char v31 = *(unsigned char *)(a1 + 72);
  int v30 = *(_DWORD *)(a1 + 120);
  sub_AD8EF4((uint64_t)&v26, (_OWORD *)(a1 + 88));
  sub_C50C4C(a1 + 160, (uint64_t)&v32, (uint64_t)&__p);
  if (v23 < 0) {
    operator delete(__p);
  }
  unint64_t v7 = *(void *)(a1 + 2016);
  unint64_t v8 = *(void *)(a1 + 304);
  if (v7 > v8) {
    unint64_t v8 = *(void *)(a1 + 2016);
  }
  *(void *)(a1 + 2016) = v8 + v7;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v18);
    sub_188FC78(&v18, (uint64_t)"Primary SPA scanned ", 20);
    unsigned int v9 = (void *)std::ostream::operator<<();
    sub_188FC78(v9, (uint64_t)" stop patterns and obtained ", 28);
    unsigned int v10 = (void *)std::ostream::operator<<();
    sub_188FC78(v10, (uint64_t)" journeys in ", 13);
    uint64_t v11 = (void *)std::ostream::operator<<();
    uint64_t v12 = sub_188FC78(v11, (uint64_t)" ms using ", 10);
    int v13 = (void *)sub_38EC58((uint64_t)v12, &v33);
    sub_188FC78(v13, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v15, 2u);
    if (v17 < 0) {
      operator delete(v15);
    }
    if (v21 < 0) {
      operator delete(v20);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return sub_9FD504((uint64_t)&v26);
}

void sub_AFF62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_9FD504((uint64_t)&a69);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_9FD504((uint64_t)&a69);
  _Unwind_Resume(a1);
}

uint64_t sub_AFF6CC(uint64_t a1, int a2)
{
  int v84 = a2;
  *(_DWORD *)(a1 + 616) = a2;
  long long v3 = *(_OWORD *)(a1 + 104);
  v83[0] = *(_OWORD *)(a1 + 88);
  v83[1] = v3;
  LOBYTE(v83[0]) = 0;
  v82[0] = (uint64_t)v83;
  v82[1] = a1;
  v82[2] = (uint64_t)&v84;
  uint64_t v4 = *(_DWORD **)(a1 + 592);
  LODWORD(v78) = (*(_DWORD *)(a1 + 584) << *v4) | (2 * a2) | 1;
  int v5 = *(_DWORD *)(sub_AF1DB0((uint64_t)(v4 + 2), (unsigned int *)&v78) + 4);
  int v6 = v5;
  unint64_t v8 = (_DWORD *)(a1 + 92);
  unsigned int v7 = *(_DWORD *)(a1 + 92);
  unsigned int v85 = v7;
  if (!*(unsigned char *)(a1 + 49)) {
    goto LABEL_71;
  }
  int v9 = 10 * (v7 - v5);
  if (v9 >= *(_DWORD *)(a1 + 52))
  {
    int v10 = sub_B00D94(v82, v5);
    LODWORD(v74[0]) = v10;
    unsigned int v7 = v85;
    if (v10 != 0x7FFFFFFF && v10 < (int)v85)
    {
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)&v78);
        sub_188FC78(&v78, (uint64_t)"[", 1);
        uint64_t v12 = (void *)std::ostream::operator<<();
        int v13 = sub_188FC78(v12, (uint64_t)"] Tightening only improved the journey's departure (arrival) from ", 66);
        char v14 = (void *)sub_266E4((uint64_t)v13);
        int v15 = sub_188FC78(v14, (uint64_t)" to ", 4);
        sub_266E4((uint64_t)v15);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 2u);
        if (v77 < 0) {
          operator delete(__p[0]);
        }
        if (v81 < 0) {
          operator delete(v80);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      unsigned int v7 = v74[0];
      unsigned int v85 = v74[0];
    }
    if (!*(unsigned char *)(a1 + 49)) {
      goto LABEL_71;
    }
  }
  if (v9 < *(_DWORD *)(a1 + 52)) {
    goto LABEL_71;
  }
  int v71 = v5;
  sub_725D0((uint64_t)__p);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v78);
    sub_188FC78(&v78, (uint64_t)"[", 1);
    unsigned int v16 = (void *)std::ostream::operator<<();
    sub_188FC78(v16, (uint64_t)"] Journey duration (", 20);
    char v17 = (void *)std::ostream::operator<<();
    sub_188FC78(v17, (uint64_t)" sec) exceeds tightening threshold; performing tightening by time shift", 71);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v74, 2u);
    if (v75 < 0) {
      operator delete(v74[0]);
    }
    if (v81 < 0) {
      operator delete(v80);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  int v18 = *(_DWORD *)(a1 + 60);
  if (v18 > *(_DWORD *)(a1 + 56)) {
    goto LABEL_70;
  }
  while (1)
  {
    *(double *)(a1 + 272) = *(double *)(a1 + 272) + 1.0;
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v78);
      sub_188FC78(&v78, (uint64_t)"[", 1);
      uint64_t v20 = (void *)std::ostream::operator<<();
      sub_188FC78(v20, (uint64_t)"] Examining time shift of ", 26);
      int v21 = v18 % 10;
      char v22 = (void *)std::ostream::operator<<();
      sub_188FC78(v22, (uint64_t)" sec (exponential search)", 25);
      std::stringbuf::str();
      sub_7246C((uint64_t *)v74, 2u);
      if (v75 < 0) {
        operator delete(v74[0]);
      }
      uint64_t v78 = v73;
      *(uint64_t *)((char *)&v78 + *(void *)(v73 - 24)) = v72;
      if (v81 < 0) {
        operator delete(v80);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    else
    {
      int v21 = v18 % 10;
    }
    char v23 = v18 < 0 ? -5 : 5;
    int v24 = v18 / -10 + v5 + (((-103 * (char)(v23 + v21)) >> 15) & 1) + ((-103 * (char)(v23 + v21)) >> 10);
    unsigned int v25 = sub_B00D94(v82, v24);
    if (*(double *)(a1 + 64) * (double)(int)fabs((double)(int)(10 * (v25 - v85))) >= (double)(int)fabs((double)(10 * (v24 - v5)))) {
      break;
    }
    double v19 = (double)v18 + (double)v18;
    if (v19 >= 0.0)
    {
      if (v19 >= 4.50359963e15) {
        goto LABEL_26;
      }
      uint64_t v26 = (uint64_t)(v19 + v19) + 1;
    }
    else
    {
      if (v19 <= -4.50359963e15) {
        goto LABEL_26;
      }
      uint64_t v26 = (uint64_t)(v19 + v19);
      if (v26 >= 1) {
        --v26;
      }
    }
    double v19 = (double)(v26 >> 1);
LABEL_26:
    int v18 = (int)v19;
    if (*(_DWORD *)(a1 + 56) < (int)v19) {
      goto LABEL_70;
    }
  }
  unsigned int v27 = v25;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v78);
    sub_188FC78(&v78, (uint64_t)"[", 1);
    uint64_t v28 = (void *)std::ostream::operator<<();
    sub_188FC78(v28, (uint64_t)"] Journey duration improved from ", 33);
    char v29 = (void *)std::ostream::operator<<();
    sub_188FC78(v29, (uint64_t)" to ", 4);
    int v30 = (void *)std::ostream::operator<<();
    sub_188FC78(v30, (uint64_t)" sec for time shift of ", 23);
    char v31 = (void *)std::ostream::operator<<();
    sub_188FC78(v31, (uint64_t)" sec", 4);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v74, 2u);
    if (v75 < 0) {
      operator delete(v74[0]);
    }
    uint64_t v78 = v73;
    *(uint64_t *)((char *)&v78 + *(void *)(v73 - 24)) = v72;
    if (v81 < 0) {
      operator delete(v80);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unsigned int v85 = v27;
  if (v24 != v5)
  {
    double v32 = (double)v18 * 0.5;
    if (v32 >= 0.0)
    {
      if (v32 < 4.50359963e15)
      {
        uint64_t v33 = (uint64_t)(v32 + v32) + 1;
        goto LABEL_59;
      }
    }
    else if (v32 > -4.50359963e15)
    {
      uint64_t v33 = (uint64_t)(v32 + v32);
      if (v33 >= 1) {
        --v33;
      }
LABEL_59:
      double v32 = (double)(v33 >> 1);
    }
    double v34 = (double)v18 * 0.25;
    if (v34 >= 0.0)
    {
      if (v34 < 4.50359963e15)
      {
        uint64_t v35 = (uint64_t)(v34 + v34) + 1;
        goto LABEL_67;
      }
    }
    else if (v34 > -4.50359963e15)
    {
      uint64_t v35 = (uint64_t)(v34 + v34);
      if (v35 >= 1) {
        --v35;
      }
LABEL_67:
      double v34 = (double)(v35 >> 1);
    }
    int v36 = (int)v34;
    if (*(_DWORD *)(a1 + 60) > (int)v34)
    {
      int v71 = v24;
      goto LABEL_70;
    }
    int v55 = (int)v32;
    int v71 = v24;
    while (2)
    {
      *(double *)(a1 + 272) = *(double *)(a1 + 272) + 1.0;
      int v57 = v36 + v55;
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)&v78);
        sub_188FC78(&v78, (uint64_t)"[", 1);
        unsigned __int16 v58 = (void *)std::ostream::operator<<();
        sub_188FC78(v58, (uint64_t)"] Examining time shift of ", 26);
        int v59 = v57 % 10;
        unsigned __int16 v60 = (void *)std::ostream::operator<<();
        sub_188FC78(v60, (uint64_t)" sec (binary refinement search)", 31);
        std::stringbuf::str();
        sub_7246C((uint64_t *)v74, 2u);
        int v61 = v71;
        if (v75 < 0) {
          operator delete(v74[0]);
        }
        uint64_t v78 = v73;
        *(uint64_t *)((char *)&v78 + *(void *)(v73 - 24)) = v72;
        if (v81 < 0) {
          operator delete(v80);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      else
      {
        int v59 = v57 % 10;
        int v61 = v71;
      }
      if (v57 < 0) {
        char v62 = -5;
      }
      else {
        char v62 = 5;
      }
      int v63 = v57 / -10 + v5 + (((-103 * (char)(v62 + v59)) >> 15) & 1) + ((-103 * (char)(v62 + v59)) >> 10);
      unsigned int v64 = sub_B00D94(v82, v63);
      if (*(double *)(a1 + 64) * (double)(int)fabs((double)(int)(10 * (v85 - v64))) >= (double)(int)fabs((double)(10 * (v61 - v63))))
      {
        v55 += v36;
        double v56 = (double)v36 * 0.5;
        int v71 = v61;
        if (v56 >= 0.0) {
          goto LABEL_114;
        }
      }
      else
      {
        unsigned int v65 = v64;
        if (sub_723EC(2u))
        {
          sub_6BAC((uint64_t)&v78);
          sub_188FC78(&v78, (uint64_t)"[", 1);
          uint64_t v66 = (void *)std::ostream::operator<<();
          sub_188FC78(v66, (uint64_t)"] Journey duration improved from ", 33);
          uint64_t v67 = (void *)std::ostream::operator<<();
          sub_188FC78(v67, (uint64_t)" to ", 4);
          uint64_t v68 = (void *)std::ostream::operator<<();
          sub_188FC78(v68, (uint64_t)" sec for time shift of ", 23);
          unint64_t v69 = (void *)std::ostream::operator<<();
          sub_188FC78(v69, (uint64_t)" sec", 4);
          std::stringbuf::str();
          sub_7246C((uint64_t *)v74, 2u);
          if (v75 < 0) {
            operator delete(v74[0]);
          }
          uint64_t v78 = v73;
          *(uint64_t *)((char *)&v78 + *(void *)(v73 - 24)) = v72;
          if (v81 < 0) {
            operator delete(v80);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        unsigned int v85 = v65;
        double v56 = (double)v36 * 0.5;
        int v71 = v63;
        if (v56 >= 0.0)
        {
LABEL_114:
          if (v56 < 4.50359963e15)
          {
            uint64_t v70 = (uint64_t)(v56 + v56) + 1;
            goto LABEL_94;
          }
          goto LABEL_95;
        }
      }
      if (v56 > -4.50359963e15)
      {
        uint64_t v70 = (uint64_t)(v56 + v56);
        if (v70 >= 1) {
          --v70;
        }
LABEL_94:
        double v56 = (double)(v70 >> 1);
      }
LABEL_95:
      int v36 = (int)v56;
      if (*(_DWORD *)(a1 + 60) > (int)v56) {
        break;
      }
      continue;
    }
  }
LABEL_70:
  *(double *)(a1 + 208) = sub_72688((uint64_t)__p);
  unsigned int v7 = v85;
  unint64_t v8 = (_DWORD *)(a1 + 92);
  int v6 = v71;
LABEL_71:
  if (v7 != *v8)
  {
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v78);
      sub_188FC78(&v78, (uint64_t)"[", 1);
      int v37 = (void *)std::ostream::operator<<();
      uint64_t v38 = sub_188FC78(v37, (uint64_t)"] Shifting ", 11);
      unsigned int v39 = sub_188FC78(v38, (uint64_t)"arrival", 7);
      unint64_t v40 = sub_188FC78(v39, (uint64_t)" time from ", 11);
      uint64_t v41 = (void *)sub_266E4((uint64_t)v40);
      long long v42 = sub_188FC78(v41, (uint64_t)" to ", 4);
      sub_266E4((uint64_t)v42);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 2u);
      if (v77 < 0) {
        operator delete(__p[0]);
      }
      if (v81 < 0) {
        operator delete(v80);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *(void *)(a1 + 280) = 0x3FF0000000000000;
  }
  int v43 = v84;
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_86;
  }
  int v44 = v84 + 1;
  int v45 = *(_DWORD *)(a1 + 24);
  if (v84 + 1 <= (v45 + 1)) {
    int v44 = v45 + 1;
  }
  if (v84 + 1 < (v45 + 1))
  {
    int v46 = v44 - 1;
    int v47 = 2 * v84 + 3;
    int v48 = v84;
    while (1)
    {
      uint64_t v49 = *(_DWORD **)(a1 + 592);
      LODWORD(v78) = (*(_DWORD *)(a1 + 584) << *v49) | v47;
      if (*(_DWORD *)(sub_AF1DB0((uint64_t)(v49 + 2), (unsigned int *)&v78) + 4) != 0x7FFFFFFF) {
        break;
      }
      ++v48;
      v47 += 2;
      if (v46 == v48) {
        goto LABEL_86;
      }
    }
  }
  else
  {
LABEL_86:
    if (*(_DWORD *)(a1 + 24) >= (*(_DWORD *)(a1 + 124) + v43)) {
      int v48 = *(_DWORD *)(a1 + 124) + v43;
    }
    else {
      int v48 = *(_DWORD *)(a1 + 24);
    }
  }
  *(_DWORD *)(a1 + 616) = v48;
  int v50 = *(_DWORD *)(a1 + 120);
  int v51 = v50 / -10;
  int v52 = v50 % 10;
  if (v50 < 0) {
    char v53 = -5;
  }
  else {
    char v53 = 5;
  }
  sub_B00D94(v82, v51 + v6 + (((-103 * (char)(v53 + v52)) >> 15) & 1) + ((-103 * (char)(v53 + v52)) >> 10));
  return v85;
}

void sub_B0085C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a22 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a29);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_B009C0(uint64_t a1, int a2, int a3)
{
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_8;
  }
  int v6 = a2 + 1;
  int v7 = *(_DWORD *)(a1 + 24);
  if (a2 + 1 <= (v7 + 1)) {
    int v6 = v7 + 1;
  }
  if (a2 + 1 < (v7 + 1))
  {
    int v8 = v6 - 1;
    int v9 = 2 * a2 + 3;
    int v10 = a2;
    while (1)
    {
      uint64_t v11 = *(_DWORD **)(a1 + 592);
      LODWORD(v26[0]) = (*(_DWORD *)(a1 + 584) << *v11) | v9;
      if (*(_DWORD *)(sub_AF1DB0((uint64_t)(v11 + 2), (unsigned int *)v26) + 4) != 0x7FFFFFFF) {
        break;
      }
      ++v10;
      v9 += 2;
      if (v8 == v10) {
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    if (*(_DWORD *)(a1 + 24) >= (*(_DWORD *)(a1 + 124) + a2)) {
      int v10 = *(_DWORD *)(a1 + 124) + a2;
    }
    else {
      int v10 = *(_DWORD *)(a1 + 24);
    }
  }
  long long v12 = *(_OWORD *)(a1 + 104);
  v38[0] = *(_OWORD *)(a1 + 88);
  v38[1] = v12;
  DWORD1(v38[0]) = a3;
  *(_DWORD *)(a1 + 1352) = v10;
  sub_B01050(a1 + 1336, v38);
  sub_B012F4(a1 + 1336, (uint64_t)v30);
  sub_C50C4C(a1 + 160, a1 + 1864, (uint64_t)&__p);
  if (v29 < 0) {
    operator delete(__p);
  }
  unint64_t v13 = *(void *)(a1 + 2008);
  *(void *)(a1 + 304) -= v13;
  unint64_t v14 = *(void *)(a1 + 2032);
  if (v14 <= v13) {
    unint64_t v14 = v13;
  }
  *(void *)(a1 + 2032) = v14;
  sub_A4D564((uint64_t)v26, (uint64_t)v31, (uint64_t)v32, a1 + 136);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v26);
    sub_188FC78(v26, (uint64_t)"[", 1);
    int v15 = (void *)std::ostream::operator<<();
    sub_188FC78(v15, (uint64_t)"] McSPA scanned ", 16);
    unsigned int v16 = (void *)std::ostream::operator<<();
    sub_188FC78(v16, (uint64_t)" stop patterns and obtained ", 28);
    char v17 = (void *)std::ostream::operator<<();
    sub_188FC78(v17, (uint64_t)" journeys in ", 13);
    int v18 = (void *)std::ostream::operator<<();
    double v19 = sub_188FC78(v18, (uint64_t)" ms using ", 10);
    uint64_t v20 = (void *)sub_38EC58((uint64_t)v19, (unint64_t *)(a1 + 2008));
    sub_188FC78(v20, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v24, 2u);
    if (v25 < 0) {
      operator delete(v24);
    }
    if (v27 < 0) {
      operator delete((void *)v26[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (v36)
  {
    int v37 = v36;
    operator delete(v36);
  }
  if (v35 < 0) {
    operator delete(v34);
  }
  int v21 = (char *)v31;
  if (v31)
  {
    char v22 = v32;
    char v23 = v31;
    if (v32 != v31)
    {
      do
      {
        v22 -= 296;
        sub_9F5E28((uint64_t)&v33, (uint64_t)v22);
      }
      while (v22 != v21);
      char v23 = v31;
    }
    double v32 = v21;
    operator delete(v23);
  }
}

void sub_B00D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_9F53E0((uint64_t)&a67);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_9F53E0((uint64_t)&a67);
  _Unwind_Resume(a1);
}

uint64_t sub_B00D94(uint64_t *a1, int a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  *(_DWORD *)(v2 + 4) = a2;
  sub_AD3BC4(v3 + 608, (_OWORD *)v2);
  sub_C50C4C(v3 + 160, v3 + 1184, (uint64_t)&v20);
  if (v21 < 0) {
    operator delete(v20);
  }
  unint64_t v4 = *(void *)(v3 + 1328);
  *(void *)(v3 + 304) -= v4;
  unint64_t v5 = *(void *)(v3 + 2024);
  if (v5 <= v4) {
    unint64_t v5 = v4;
  }
  *(void *)(v3 + 2024) = v5;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v18);
    sub_188FC78(v18, (uint64_t)"[", 1);
    int v6 = (void *)std::ostream::operator<<();
    sub_188FC78(v6, (uint64_t)"] Secondary SPA scanned ", 24);
    int v7 = (void *)std::ostream::operator<<();
    sub_188FC78(v7, (uint64_t)" stop patterns and obtained ", 28);
    int v8 = (void *)std::ostream::operator<<();
    sub_188FC78(v8, (uint64_t)" journeys in ", 13);
    int v9 = (void *)std::ostream::operator<<();
    int v10 = sub_188FC78(v9, (uint64_t)" ms using ", 10);
    uint64_t v11 = (void *)sub_38EC58((uint64_t)v10, (unint64_t *)(v3 + 1328));
    sub_188FC78(v11, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (v17 < 0) {
      operator delete(__p);
    }
    if (v19 < 0) {
      operator delete((void *)v18[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unint64_t v12 = *(unsigned int *)(v3 + 1040);
  uint64_t v13 = *(void *)(v3 + 800);
  unint64_t v14 = (*(void *)(v3 + 808) - v13) >> 2;
  if (v14 <= v12)
  {
    sub_5BBEE0(v3 + 800, v12 - v14 + 1);
    uint64_t v13 = *(void *)(v3 + 800);
  }
  return *(unsigned int *)(v13 + 4 * v12);
}

void sub_B01004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_B01050(uint64_t a1, _OWORD *a2)
{
  sub_725D0((uint64_t)v36);
  long long v4 = a2[1];
  *(_OWORD *)(a1 + 64) = *a2;
  *(_OWORD *)(a1 + 80) = v4;
  sub_B03888(a1);
  uint64_t v5 = *(void *)(a1 + 32);
  v37[0] = 0x1FFFFFFFELL;
  *(_DWORD *)(a1 + 416) = sub_AD28B0(v5, v37);
  sub_B03AE0(a1);
  if (*(_DWORD *)(a1 + 100) >= 2u)
  {
    uint64_t v6 = 1;
    while (1)
    {
      if (v6)
      {
        char v17 = *(unsigned int **)(a1 + 320);
        int v18 = *(unsigned int **)(a1 + 328);
        if (v17 != v18)
        {
          uint64_t v19 = *(void *)(a1 + 296);
          uint64_t v20 = *(unsigned int **)(a1 + 320);
          do
          {
            unsigned int v21 = *v20++;
            *(void *)(v19 + (((unint64_t)v21 >> 3) & 0x1FFFFFF8)) &= ~(1 << v21);
          }
          while (v20 != v18);
        }
        *(void *)(a1 + 328) = v17;
        sub_B03C50(a1, v6);
        sub_B03F0C(a1, v6);
        uint64_t v16 = *(void *)(a1 + 320);
        if (v16 == *(void *)(a1 + 328)) {
          goto LABEL_22;
        }
        uint64_t v15 = *(void *)(a1 + 272);
      }
      else
      {
        int v7 = *(unsigned int **)(a1 + 272);
        int v8 = *(unsigned int **)(a1 + 280);
        if (v7 != v8)
        {
          uint64_t v9 = *(void *)(a1 + 248);
          int v10 = *(unsigned int **)(a1 + 272);
          do
          {
            unsigned int v11 = *v10++;
            *(void *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) &= ~(1 << v11);
          }
          while (v10 != v8);
        }
        *(void *)(a1 + 280) = v7;
        sub_AEDE40((void *)a1);
        sub_725D0((uint64_t)v37);
        unint64_t v12 = *(unsigned int **)(a1 + 392);
        uint64_t v13 = *(unsigned int **)(a1 + 400);
        while (v12 != v13)
        {
          unsigned int v14 = *v12++;
          sub_B05ECC(a1, v6, v14);
        }
        *(double *)(a1 + 560) = sub_72688((uint64_t)v37) + *(double *)(a1 + 560);
        uint64_t v15 = *(void *)(a1 + 272);
        if (v15 == *(void *)(a1 + 280)) {
          goto LABEL_22;
        }
        uint64_t v16 = *(void *)(a1 + 320);
      }
      uint64_t v34 = *(void *)(a1 + 208);
      uint64_t v35 = *(void *)(a1 + 176);
      uint64_t v32 = 8 * (*(void *)(a1 + 232) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v33 = *(void *)(a1 + 192);
      uint64_t v22 = *(void *)(a1 + 288);
      uint64_t v23 = 8 * (*(void *)(a1 + 312) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v24 = *(void *)(a1 + 360);
      uint64_t v25 = *(void *)(a1 + 336);
      uint64_t v30 = *(void *)(a1 + 344);
      uint64_t v31 = 8 * (*(void *)(a1 + 264) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v29 = *(void *)(a1 + 392);
      uint64_t v26 = 8 * (*(void *)(a1 + 384) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v27 = *(void *)(a1 + 408);
      unint64_t v28 = v34
          + 12 * v35
          - v33
          + v32
          + v22
          + v31
          - v15
          + v25
          + v23
          + v24
          - (v16
           + v30)
          + v26
          + v27
          - v29
          + sub_BD6170((void *)(a1 + 424))
          + 680;
      if (*(void *)(a1 + 672) > v28) {
        unint64_t v28 = *(void *)(a1 + 672);
      }
      *(void *)(a1 + 672) = v28;
      if (!sub_AFA090(a1) && ++v6 < (unint64_t)*(unsigned int *)(a1 + 100)) {
        continue;
      }
      goto LABEL_22;
    }
  }
  LODWORD(v6) = 1;
LABEL_22:
  sub_B05510(a1);
  *(double *)(a1 + 600) = (double)v6;
  *(double *)(a1 + 552) = sub_72688((uint64_t)v36);
}

std::string *sub_B012F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0;
  int v330 = (uint64_t *)(a2 + 8);
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  HIBYTE(v364) = 0;
  LOBYTE(__p[0]) = 0;
  uint64_t v328 = (std::string *)(a2 + 32);
  sub_C50BD8((char *)(a2 + 32), (long long *)__p);
  if (SHIBYTE(v364) < 0) {
    operator delete(*(void **)__p);
  }
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  *(unsigned char *)(a2 + 184) = *(unsigned char *)(a1 + 64);
  unsigned int v3 = *(_DWORD *)(a1 + 100);
  if (v3 <= 1) {
    int v4 = 1;
  }
  else {
    int v4 = *(_DWORD *)(a1 + 100);
  }
  int v329 = v4;
  if (v3 >= 2)
  {
    uint64_t v6 = (void *)(a1 + 104);
    __asm { FMOV            V0.2D, #1.0 }
    long long v332 = _Q0;
    int v331 = 1;
    uint64_t v336 = a1 + 104;
    uint64_t v337 = a1;
    while (1)
    {
      __p[0] = 0;
      uint64_t v10 = *(void *)(a1 + 192);
      uint64_t v11 = *(unsigned int *)(sub_AFAD84((uint64_t)v6, __p) + 4);
      __p[0] = 0;
      uint64_t v12 = *(void *)(a1 + 192);
      uint64_t v13 = sub_AFAD84((uint64_t)v6, __p);
      sub_AFA9C0((uint64_t)v6, 0, (char *)(v10 + (v11 << 6)), (unsigned char *)(v12 + ((unint64_t)*(unsigned int *)(v13 + 8) << 6)));
      sub_B05D78(v6, v331 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * *(_DWORD *)(a1 + 416) + 2, 0);
      __p[0] = 0;
      uint64_t v14 = *(void *)(a1 + 192);
      uint64_t v15 = *(unsigned int *)(sub_AFAD84((uint64_t)v6, __p) + 4);
      __p[0] = 0;
      uint64_t v16 = *(void *)(a1 + 192);
      long long v335 = (unsigned int *)(v14 + (v15 << 6));
      uint64_t v333 = (unsigned int *)(v16 + ((unint64_t)*(unsigned int *)(sub_AFAD84((uint64_t)v6, __p) + 8) << 6));
      if (v335 != v333) {
        break;
      }
LABEL_9:
      ++v331;
      uint64_t v6 = (void *)v336;
      if (v331 == v329) {
        goto LABEL_7;
      }
    }
    while (1)
    {
      LOWORD(__p[0]) = 0;
      BYTE2(__p[0]) = 0;
      *(void *)&__p[1] = 0;
      *(void *)&__p[3] = 0x7FFFFFFFFFFFFFFFLL;
      int v364 = 0x7FFFFFFF;
      __int16 v365 = 0;
      unint64_t v366 = 0x8000000080000000;
      __int16 v367 = 0;
      unint64_t v368 = 0x8000000080000000;
      int v369 = 0x7FFFFFFF;
      __int16 v370 = 0;
      unint64_t v371 = 0x8000000080000000;
      __int16 v372 = 0;
      unint64_t v373 = 0x8000000080000000;
      __int16 v374 = 0;
      unint64_t v375 = 0xFFFFFFFF00000000;
      int v376 = -1;
      uint64_t v377 = 0;
      unint64_t v379 = 0;
      uint64_t v380 = 0;
      uint64_t v381 = 0;
      int v378 = 0x7FFFFFFF;
      int v382 = 100;
      int v383 = -1;
      long long v384 = v332;
      long long v385 = v332;
      long long v386 = v332;
      long long v387 = 0u;
      long long v388 = 0u;
      long long v389 = 0u;
      long long v390 = 0u;
      uint64_t v17 = *(void *)(a1 + 24);
      long long v391 = 0u;
      long long v392 = 0u;
      if (!sub_C259C0(v17 + 3896)) {
        goto LABEL_16;
      }
      if (*(void *)(v17 + 3944))
      {
        BOOL v18 = 1;
      }
      else
      {
LABEL_16:
        uint64_t v19 = *(void *)(a1 + 24);
        BOOL v18 = sub_C259D4(v19 + 3896) && *(void *)(v19 + 3960) != 0;
      }
      BYTE1(__p[0]) = v18;
      uint64_t v20 = *(void *)(a1 + 24);
      if (!sub_C259D4(v20 + 3896)) {
        break;
      }
      __p[1] = 2 * (*(void *)(v20 + 3960) != 0);
      if (*v335 != -1) {
        goto LABEL_23;
      }
LABEL_390:
      sub_A29D50((uint64_t)__p);
      unint64_t v303 = *(void *)(a2 + 16);
      if (v303 < *(void *)(a2 + 24))
      {
        sub_9F68D4(*(void *)(a2 + 16), (long long *)__p);
        *(void *)(a2 + 16) = v303 + 296;
        *(void *)(a2 + 16) = v303 + 296;
        uint64_t v304 = (void *)*((void *)&v391 + 1);
        if (!*((void *)&v391 + 1)) {
          goto LABEL_395;
        }
LABEL_394:
        *(void *)&long long v392 = v304;
        operator delete(v304);
        goto LABEL_395;
      }
      *(void *)(a2 + 16) = sub_A4D268(v330, (long long *)__p);
      uint64_t v304 = (void *)*((void *)&v391 + 1);
      if (*((void *)&v391 + 1)) {
        goto LABEL_394;
      }
LABEL_395:
      if ((void)v390)
      {
        *((void *)&v390 + 1) = v390;
        operator delete((void *)v390);
      }
      if (*((void *)&v388 + 1))
      {
        *(void *)&long long v389 = *((void *)&v388 + 1);
        operator delete(*((void **)&v388 + 1));
      }
      uint64_t v305 = (void **)v387;
      if ((void)v387)
      {
        uint64_t v306 = *((void *)&v387 + 1);
        uint64_t v307 = (void *)v387;
        if (*((void *)&v387 + 1) != (void)v387)
        {
          do
          {
            long long v309 = *(void **)(v306 - 40);
            if (v309)
            {
              *(void *)(v306 - 32) = v309;
              operator delete(v309);
            }
            long long v310 = (void **)(v306 - 72);
            uint64_t v311 = *(void *)(v306 - 72);
            if (v311)
            {
              uint64_t v312 = *(void *)(v306 - 64);
              unint64_t v308 = *(void **)(v306 - 72);
              if (v312 != v311)
              {
                do
                {
                  if (!*(_DWORD *)(v312 - 8))
                  {
                    uint64_t v313 = *(void **)(v312 - 48);
                    if (v313)
                    {
                      *(void *)(v312 - 40) = v313;
                      operator delete(v313);
                    }
                    int v314 = *(void **)(v312 - 80);
                    if (v314)
                    {
                      *(void *)(v312 - 72) = v314;
                      operator delete(v314);
                    }
                    int v315 = *(void **)(v312 - 104);
                    if (v315)
                    {
                      *(void *)(v312 - 96) = v315;
                      operator delete(v315);
                    }
                  }
                  v312 -= 168;
                }
                while (v312 != v311);
                unint64_t v308 = *v310;
              }
              *(void *)(v306 - 64) = v311;
              operator delete(v308);
            }
            v306 -= 72;
          }
          while (v310 != v305);
          uint64_t v307 = (void *)v387;
        }
        *((void *)&v387 + 1) = v305;
        operator delete(v307);
      }
      if (SHIBYTE(v381) < 0) {
        operator delete(v379);
      }
      v335 += 16;
      if (v335 == v333) {
        goto LABEL_9;
      }
    }
    __p[1] = 0;
    if (*v335 == -1) {
      goto LABEL_390;
    }
LABEL_23:
    unsigned int v21 = *(_DWORD *)(a1 + 416);
    uint64_t v22 = v335;
    int v338 = v331;
LABEL_27:
    unint64_t v355 = 0;
    uint64_t v356 = 0;
    unint64_t v357 = 0;
    unsigned int v360 = 0;
    uint64_t v361 = 0;
    unsigned __int8 v359 = 0;
    v362[0] = 1;
    *(void *)&v362[4] = 0x8000000080000000;
    *(_WORD *)&v362[12] = 0;
    v362[14] = 0;
    int v415 = -1;
    if (v22[4] == -1)
    {
LABEL_275:
      char v358 = 1;
      unsigned int v239 = v22[7];
      unsigned int v240 = v22[3];
      uint64_t v241 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), v21);
      uint64_t v242 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), *v22);
      *(_DWORD *)long long v395 = 0;
      *(_DWORD *)&v395[4] = v239;
      *(void *)&v395[12] = v241;
      *(void *)&v395[20] = v242;
      *(_DWORD *)&v395[8] = v240;
      int v404 = 1;
      if (v415)
      {
        if (v415 == 1)
        {
          *(_OWORD *)v405 = *(_OWORD *)v395;
          *(_OWORD *)&v405[12] = *(_OWORD *)&v395[12];
          goto LABEL_287;
        }
LABEL_286:
        *(_OWORD *)v405 = *(_OWORD *)v395;
        *(_OWORD *)&v405[12] = *(_OWORD *)&v395[12];
        int v415 = 1;
      }
      else
      {
        if ((void)v412)
        {
          *((void *)&v412 + 1) = v412;
          operator delete((void *)v412);
        }
        if ((void)v409)
        {
          *((void *)&v409 + 1) = v409;
          operator delete((void *)v409);
        }
        if (v407[0])
        {
          v407[1] = v407[0];
          operator delete(v407[0]);
        }
        if (v404)
        {
          if (v404 == 1) {
            goto LABEL_286;
          }
          int v415 = v404;
        }
        else
        {
          sub_9F6FA0((uint64_t)v405, (long long *)v395);
          int v415 = v404;
          if (!v404)
          {
            if ((void)v401)
            {
              *((void *)&v401 + 1) = v401;
              operator delete((void *)v401);
            }
            if (v399[0])
            {
              v399[1] = v399[0];
              operator delete(v399[0]);
            }
            if ((void)v397)
            {
              *((void *)&v397 + 1) = v397;
              operator delete((void *)v397);
            }
          }
        }
      }
LABEL_287:
      unsigned int v21 = *v22;
      uint64_t v236 = (uint64_t)v356;
      if ((unint64_t)v356 >= v357) {
        goto LABEL_288;
      }
LABEL_270:
      *(_DWORD *)(v236 + 160) = v415;
      if (v415 == 1)
      {
        long long v270 = *(_OWORD *)v405;
        *(_OWORD *)(v236 + 12) = *(_OWORD *)&v405[12];
        *(_OWORD *)uint64_t v236 = v270;
        uint64_t v356 = (char *)(v236 + 168);
        uint64_t v237 = *((void *)&v387 + 1);
        if (*((void *)&v387 + 1) < (unint64_t)v388) {
          goto LABEL_289;
        }
      }
      else
      {
        if (!v415) {
          sub_9F6FA0(v236, (long long *)v405);
        }
        uint64_t v356 = (char *)(v236 + 168);
        uint64_t v237 = *((void *)&v387 + 1);
        if (*((void *)&v387 + 1) < (unint64_t)v388) {
          goto LABEL_289;
        }
      }
LABEL_274:
      uint64_t v238 = sub_A4CECC((void ***)&v387, (uint64_t)&v355);
      goto LABEL_302;
    }
    long long v339 = xmmword_20E12E0;
    __int16 v340 = 0;
    unint64_t v341 = 0x8000000080000000;
    __int16 v342 = 0;
    *(_OWORD *)char v343 = xmmword_20EB6B0;
    *(void *)&v343[16] = 0xFFFFFFFF7FFFFFFFLL;
    long long v345 = 0u;
    long long v346 = 0u;
    long long v347 = 0u;
    int v344 = -1;
    int v348 = 0x7FFFFFFF;
    uint64_t v350 = 0;
    uint64_t v351 = 0;
    char v349 = 0;
    char v352 = 1;
    unint64_t v353 = 0x8000000080000000;
    int v354 = 0;
    char v358 = 0;
    uint64_t v24 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 40) + 88), v22[4]);
    *(void *)char v343 = v24;
    uint64_t v25 = *(void *)(v22 + 1);
    *(_DWORD *)&v343[16] = v22[3];
    *(void *)&v343[8] = v25;
    int v344 = *v22;
    unsigned int v26 = v344;
    uint64_t v27 = *(void *)(a1 + 24);
    unint64_t v393 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), v21);
    sub_A1E9A0((uint64_t)v395, v27, v24, v26, 0, 0);
    *(void *)&long long v397 = *(void *)&v396[24] + 12 * *(unsigned int *)&v343[8];
    if (LOBYTE(v399[1])) {
      *(void **)((char *)&v399[1] + 4) = *(void **)&v343[12];
    }
    if (*(void *)&v396[16]) {
      uint64_t v28 = *(unsigned int *)(*(void *)&v396[16] + 4 * ((*(void *)v396 - *(void *)&v395[24]) >> 4));
    }
    else {
      uint64_t v28 = 0;
    }
    sub_A56ED0((uint64_t)v395, &v393, v28);
    _CF = *(void *)v396 < *(void *)&v396[8] && *(void *)v396 >= *(void *)&v395[24];
    uint64_t v30 = (*(void *)v396 - *(void *)&v395[24]) >> 4;
    if (!_CF) {
      LODWORD(v30) = -1;
    }
    *(_DWORD *)&v343[20] = v30;
    uint64_t v31 = *(void *)(a1 + 32);
    uint64_t v32 = (void *)(*(void *)(a1 + 24) + 4136);
    unint64_t v33 = *(void *)v343;
    unsigned int v34 = v344;
    uint64_t v35 = HIDWORD(*(void *)v343);
    if (sub_A10E20(v32, *(int *)&v343[4]))
    {
      int v36 = (int *)sub_A1120C(*(void *)(*v32 + 3944), v33);
    }
    else
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_24F7308))
      {
        sub_518C8(0x3B60u, 0x7FCAu);
        dword_24F7300 = v299 | 0x40000000;
        __cxa_guard_release(&qword_24F7308);
      }
      uint64_t v37 = *v32;
      if (dword_24F7300 == v35)
      {
        uint64_t v38 = *(unsigned int **)(*(void *)(v37 + 3976) + 72);
        if (!v38)
        {
          exception = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(v395, "Realtime stop pattern quad data requested on nullptr buffer");
          int v325 = (void *)sub_2F404((uint64_t)exception, (long long *)v395);
        }
        unsigned int v39 = (int *)((char *)v38 + *v38);
        unint64_t v40 = (unsigned __int16 *)((char *)v39 - *v39);
        if (*v40 >= 5u && (uint64_t v41 = v40[2]) != 0) {
          long long v42 = (unsigned int *)((char *)v39 + v41 + *(unsigned int *)((char *)v39 + v41));
        }
        else {
          long long v42 = 0;
        }
        int v36 = (int *)sub_A1139C(v42, v33);
      }
      else
      {
        int v36 = (int *)sub_A11500(v37 + 24, v33, 0, "stop pattern");
      }
    }
    int v43 = (unsigned __int16 *)((char *)v36 - *v36);
    if (*v43 >= 9u && (uint64_t v44 = v43[4]) != 0) {
      int v45 = (unsigned int *)((char *)v36 + v44 + *(unsigned int *)((char *)v36 + v44));
    }
    else {
      int v45 = 0;
    }
    int v46 = (void *)sub_A10764(v45, v34);
    uint64_t v47 = 0;
    unint64_t v48 = __ROR8__(*v46, 32);
    uint64_t v49 = *(void *)(v31 + 72) - 1;
    unint64_t v50 = 0xC4CEB9FE1A85EC53
        * ((0xFF51AFD7ED558CCDLL * (v48 ^ (v48 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v48 ^ (v48 >> 33))) >> 33));
    unint64_t v51 = v50 ^ (v50 >> 33);
    uint64_t v52 = *(void *)(v31 + 48);
    uint64_t v53 = v52 + 11;
    uint64_t v54 = -1;
    for (unint64_t i = v51; ; unint64_t i = v47 + v56)
    {
      uint64_t v56 = i & v49;
      unint64_t v57 = i & v49;
      unint64_t v58 = (i & v49) / 0x30;
      unint64_t v59 = v57 % 0x30;
      if (((*(unsigned __int8 *)(v52 + 16 * (v57 / 0x30) + ((v57 % 0x30) >> 3) + 10) >> ((v57 % 0x30) & 7)) & 1) == 0)
      {
        if (v54 == -1) {
          unint64_t v93 = v56;
        }
        else {
          unint64_t v93 = v54;
        }
        goto LABEL_94;
      }
      uint64_t v60 = *(void *)(v52 + 16 * v58);
      if (!*(void *)(v31 + 40)) {
        goto LABEL_73;
      }
      int v61 = (unsigned __int8 *)(v52 + 16 * v58 + 10);
      if ((unsigned __int16)(v57 % 0x30) < 9u)
      {
        __int16 v62 = 0;
        unint64_t v63 = v57 % 0x30;
        goto LABEL_69;
      }
      __int16 v62 = 0;
      unint64_t v63 = (unsigned __int16)(v56 - 48 * v58 - 9) >> 3;
      if ((unsigned __int16)(v56 - 48 * v58 - 9) >> 3)
      {
        __int16 v64 = 0;
        unint64_t v65 = v63 + 1;
        uint64_t v66 = (v63 + 1) & 0x3FFE;
        LOWORD(v63) = v59 - 8 * v66;
        uint64_t v67 = &v61[v66];
        uint64_t v68 = (unsigned __int8 *)(v53 + 16 * v58);
        uint64_t v69 = v66;
        do
        {
          uint64_t v70 = *(v68 - 1);
          int v71 = *v68;
          v68 += 2;
          v62 += byte_20EBFB6[v70];
          v64 += byte_20EBFB6[v71];
          v69 -= 2;
        }
        while (v69);
        v62 += v64;
        if (v65 == v66) {
          goto LABEL_68;
        }
      }
      else
      {
        unint64_t v63 = v57 % 0x30;
        uint64_t v67 = (unsigned __int8 *)(v52 + 16 * v58 + 10);
      }
      do
      {
        int v72 = *v67++;
        v62 += byte_20EBFB6[v72];
        LOWORD(v63) = v63 - 8;
      }
      while ((unsigned __int16)v63 > 8u);
LABEL_68:
      v61 += ((unsigned __int16)(v59 - 9) >> 3) + 1;
LABEL_69:
      uint64_t v73 = (_DWORD *)(v60
                     + 12
                     * (unsigned __int16)(v62 + byte_20EBFB6[~(-1 << v63) & (unint64_t)*v61]));
      if (*(_DWORD *)(v31 + 36) == v73[1] && *(_DWORD *)(v31 + 32) == *v73)
      {
        if (v54 == -1) {
          uint64_t v54 = v56;
        }
        goto LABEL_56;
      }
LABEL_73:
      char v75 = (unsigned __int8 *)(v52 + 16 * v58 + 10);
      if ((unsigned __int16)(v57 % 0x30) < 9u)
      {
        __int16 v76 = 0;
        uint64_t v86 = (unsigned __int8 *)(v52 + 16 * v58 + 10);
        unint64_t v77 = v57 % 0x30;
        goto LABEL_83;
      }
      __int16 v76 = 0;
      unint64_t v77 = (unsigned __int16)(v56 - 48 * v58 - 9) >> 3;
      if ((unsigned __int16)(v56 - 48 * v58 - 9) >> 3)
      {
        __int16 v78 = 0;
        unint64_t v79 = v77 + 1;
        uint64_t v80 = (v77 + 1) & 0x3FFE;
        LOWORD(v77) = v59 - 8 * v80;
        char v81 = &v75[v80];
        uint64_t v82 = (unsigned __int8 *)(v53 + 16 * v58);
        uint64_t v83 = v80;
        do
        {
          uint64_t v84 = *(v82 - 1);
          int v85 = *v82;
          v82 += 2;
          v76 += byte_20EBFB6[v84];
          v78 += byte_20EBFB6[v85];
          v83 -= 2;
        }
        while (v83);
        v76 += v78;
        if (v79 == v80) {
          goto LABEL_82;
        }
      }
      else
      {
        unint64_t v77 = v57 % 0x30;
        char v81 = (unsigned __int8 *)(v52 + 16 * v58 + 10);
      }
      do
      {
        int v87 = *v81++;
        v76 += byte_20EBFB6[v87];
        LOWORD(v77) = v77 - 8;
      }
      while ((unsigned __int16)v77 > 8u);
LABEL_82:
      uint64_t v86 = &v75[((unsigned __int16)(v59 - 9) >> 3) + 1];
LABEL_83:
      if (v48 == *(void *)(v60
                            + 12
                            * (unsigned __int16)(v76 + byte_20EBFB6[~(-1 << v77) & (unint64_t)*v86])))
      {
        if (v56 != -1)
        {
          if ((unsigned __int16)(v57 % 0x30) < 9u)
          {
            __int16 v90 = 0;
          }
          else
          {
            if ((((_WORD)v56 - 48 * (_WORD)v58 - 8) & 0xFFF8) != 0) {
              __int16 v88 = 8;
            }
            else {
              __int16 v88 = v56 - 48 * v58 - 8;
            }
            unsigned __int16 v89 = ~v88 + v56 - 48 * v58;
            if (v89 < 8u)
            {
              __int16 v90 = 0;
              unint64_t v91 = v57 % 0x30;
              uint64_t v92 = (unsigned __int8 *)(v52 + 16 * v58 + 10);
              goto LABEL_339;
            }
            __int16 v271 = 0;
            __int16 v272 = 0;
            uint64_t v273 = (v89 >> 3) + 1;
            LOWORD(v91) = v59 - 8 * (((v89 >> 3) + 1) & 0x3FFE);
            uint64_t v92 = &v75[v273 & 0x3FFE];
            int v274 = (unsigned __int8 *)(v52 + 16 * v58 + 11);
            uint64_t v275 = v273 & 0x3FFE;
            do
            {
              uint64_t v276 = *(v274 - 1);
              int v277 = *v274;
              v274 += 2;
              v271 += byte_20EBFB6[v276];
              v272 += byte_20EBFB6[v277];
              v275 -= 2;
            }
            while (v275);
            __int16 v90 = v272 + v271;
            if ((v273 & 0x3FFE) != v273)
            {
              do
              {
LABEL_339:
                int v278 = *v92++;
                v90 += byte_20EBFB6[v278];
                LOWORD(v91) = v91 - 8;
              }
              while ((unsigned __int16)v91 > 8u);
            }
            v75 += ((unsigned __int16)(v59 - 9) >> 3) + 1;
            LOBYTE(v59) = v91;
          }
          uint64_t v279 = *(void *)(v31 + 56);
          unsigned __int16 v280 = v90 + byte_20EBFB6[~(-1 << v59) & (unint64_t)*v75];
          uint64_t v281 = v52 + 16 * v58;
          if (*(unsigned __int16 *)(v281 + 8) != v280 || v281 + 16 == v279)
          {
            unint64_t v138 = (_DWORD *)(v60 + 12 * v280);
          }
          else
          {
            uint64_t v283 = v281 + 32;
            do
            {
              if (*(_WORD *)(v283 - 8)) {
                BOOL v284 = 1;
              }
              else {
                BOOL v284 = v283 == v279;
              }
              v283 += 16;
            }
            while (!v284);
            unint64_t v138 = *(_DWORD **)(v283 - 32);
          }
          goto LABEL_139;
        }
        unint64_t v93 = -1;
LABEL_94:
        if (!sub_AD2F40(v31, 1))
        {
          unint64_t v393 = v48;
          int v394 = -1;
          sub_AD3484(v31, (uint64_t *)&v393, v93, v395);
LABEL_138:
          unint64_t v138 = *(_DWORD **)v396;
          goto LABEL_139;
        }
        uint64_t v94 = 0;
        unint64_t v393 = v48;
        int v394 = -1;
        uint64_t v95 = *(void *)(v31 + 72) - 1;
        uint64_t v96 = *(void *)(v31 + 48);
        uint64_t v97 = v96 + 11;
        uint64_t v98 = -1;
        while (2)
        {
          uint64_t v99 = v51 & v95;
          unint64_t v100 = (v51 & v95) / 0x30;
          unint64_t v101 = (v51 & v95) % 0x30;
          if (((*(unsigned __int8 *)(v96 + 16 * v100 + (v101 >> 3) + 10) >> (v101 & 7)) & 1) == 0)
          {
            if (v98 == -1) {
              unint64_t v137 = v51 & v95;
            }
            else {
              unint64_t v137 = v98;
            }
            goto LABEL_137;
          }
          uint64_t v102 = *(void *)(v31 + 40);
          uint64_t v103 = *(void *)(v96 + 16 * v100);
          if (!v102) {
            break;
          }
          unsigned int v104 = (unsigned __int8 *)(v96 + 16 * v100 + 10);
          if ((unsigned __int16)((v51 & v95) % 0x30) < 9u)
          {
            __int16 v105 = 0;
            unint64_t v106 = (v51 & v95) % 0x30;
            goto LABEL_111;
          }
          __int16 v105 = 0;
          unint64_t v106 = (unsigned __int16)(v99 - 48 * v100 - 9) >> 3;
          if (!((unsigned __int16)(v99 - 48 * v100 - 9) >> 3))
          {
            unint64_t v106 = (v51 & v95) % 0x30;
            uint64_t v110 = (unsigned __int8 *)(v96 + 16 * v100 + 10);
            do
            {
LABEL_109:
              int v115 = *v110++;
              v105 += byte_20EBFB6[v115];
              LOWORD(v106) = v106 - 8;
            }
            while ((unsigned __int16)v106 > 8u);
            goto LABEL_110;
          }
          __int16 v107 = 0;
          unint64_t v108 = v106 + 1;
          uint64_t v109 = (v106 + 1) & 0x3FFE;
          LOWORD(v106) = v101 - 8 * v109;
          uint64_t v110 = &v104[v109];
          uint64_t v111 = (unsigned __int8 *)(v97 + 16 * v100);
          uint64_t v112 = v109;
          do
          {
            uint64_t v113 = *(v111 - 1);
            int v114 = *v111;
            v111 += 2;
            v105 += byte_20EBFB6[v113];
            v107 += byte_20EBFB6[v114];
            v112 -= 2;
          }
          while (v112);
          v105 += v107;
          if (v108 != v109) {
            goto LABEL_109;
          }
LABEL_110:
          v104 += ((unsigned __int16)(v101 - 9) >> 3) + 1;
LABEL_111:
          uint64_t v116 = (_DWORD *)(v103
                          + 12
                          * (unsigned __int16)(v105 + byte_20EBFB6[~(-1 << v106) & (unint64_t)*v104]));
          if (*(_DWORD *)(v31 + 36) == v116[1] && *(_DWORD *)(v31 + 32) == *v116)
          {
            if (v98 == -1) {
              uint64_t v98 = v99;
            }
LABEL_98:
            unint64_t v51 = ++v94 + v99;
            continue;
          }
          break;
        }
        uint64_t v118 = (unsigned __int8 *)(v96 + 16 * v100 + 10);
        if ((unsigned __int16)v101 < 9u)
        {
          __int16 v119 = 0;
          unint64_t v130 = (unsigned __int8 *)(v96 + 16 * v100 + 10);
          LOBYTE(v124) = v101;
          goto LABEL_125;
        }
        __int16 v119 = 0;
        uint64_t v120 = (unsigned __int16)(v99 - 48 * v100 - 9) >> 3;
        if (!((unsigned __int16)(v99 - 48 * v100 - 9) >> 3))
        {
          unsigned __int16 v124 = v101;
          uint64_t v125 = (unsigned __int8 *)(v96 + 16 * v100 + 10);
          do
          {
LABEL_123:
            int v131 = *v125++;
            v119 += byte_20EBFB6[v131];
            v124 -= 8;
          }
          while (v124 > 8u);
          goto LABEL_124;
        }
        __int16 v121 = 0;
        uint64_t v122 = v120 + 1;
        uint64_t v123 = (v120 + 1) & 0x3FFE;
        unsigned __int16 v124 = v101 - 8 * v123;
        uint64_t v125 = &v118[v123];
        unsigned __int16 v126 = (unsigned __int8 *)(v97 + 16 * v100);
        uint64_t v127 = v123;
        do
        {
          uint64_t v128 = *(v126 - 1);
          int v129 = *v126;
          v126 += 2;
          v119 += byte_20EBFB6[v128];
          v121 += byte_20EBFB6[v129];
          v127 -= 2;
        }
        while (v127);
        v119 += v121;
        if (v122 != v123) {
          goto LABEL_123;
        }
LABEL_124:
        unint64_t v130 = &v118[((unsigned __int16)(v101 - 9) >> 3) + 1];
LABEL_125:
        if (v48 != *(void *)(v103
                              + 12
                              * (unsigned __int16)(v119
                                                 + byte_20EBFB6[~(-1 << v124) & (unint64_t)*v130])))
          goto LABEL_98;
        if (v99 == -1)
        {
          unint64_t v137 = -1;
LABEL_137:
          sub_AD3484(v31, (uint64_t *)&v393, v137, v395);
          goto LABEL_138;
        }
        if ((unsigned __int16)v101 < 9u)
        {
          __int16 v134 = 0;
        }
        else
        {
          if ((((_WORD)v99 - 48 * (_WORD)v100 - 8) & 0xFFF8) != 0) {
            __int16 v132 = 8;
          }
          else {
            __int16 v132 = v99 - 48 * v100 - 8;
          }
          unsigned __int16 v133 = ~v132 + v99 - 48 * v100;
          if (v133 < 8u)
          {
            __int16 v134 = 0;
            unsigned __int16 v135 = v101;
            uint64_t v136 = (unsigned __int8 *)(v96 + 16 * v100 + 10);
            goto LABEL_358;
          }
          __int16 v285 = 0;
          __int16 v286 = 0;
          uint64_t v287 = (v133 >> 3) + 1;
          unsigned __int16 v135 = v101 - 8 * (((v133 >> 3) + 1) & 0x3FFE);
          uint64_t v136 = &v118[v287 & 0x3FFE];
          uint64_t v288 = (unsigned __int8 *)(v96 + 16 * v100 + 11);
          uint64_t v289 = v287 & 0x3FFE;
          do
          {
            uint64_t v290 = *(v288 - 1);
            int v291 = *v288;
            v288 += 2;
            v285 += byte_20EBFB6[v290];
            v286 += byte_20EBFB6[v291];
            v289 -= 2;
          }
          while (v289);
          __int16 v134 = v286 + v285;
          if ((v287 & 0x3FFE) != v287)
          {
            do
            {
LABEL_358:
              int v292 = *v136++;
              v134 += byte_20EBFB6[v292];
              v135 -= 8;
            }
            while (v135 > 8u);
          }
          v118 += ((unsigned __int16)(v101 - 9) >> 3) + 1;
          LOBYTE(v101) = v135;
        }
        uint64_t v293 = v96 + 16 * v100;
        uint64_t v294 = *(_DWORD ***)(v31 + 56);
        unsigned __int16 v295 = v134 + byte_20EBFB6[~(-1 << v101) & (unint64_t)*v118];
        unint64_t v138 = (_DWORD *)(v103 + 12 * v295);
        if (*(unsigned __int16 *)(v293 + 8) == v295)
        {
          uint64_t v296 = v293 + 16;
          if ((_DWORD **)(v293 + 16) != v294)
          {
            while (1)
            {
              int v297 = (_DWORD **)v296;
              if (*(_WORD *)(v296 + 8)) {
                break;
              }
              v296 += 16;
              if (v297 + 2 == v294)
              {
                uint64_t v293 = *(void *)(v31 + 56);
                goto LABEL_366;
              }
            }
            uint64_t v293 = v296;
LABEL_366:
            unint64_t v138 = *v297;
            goto LABEL_367;
          }
        }
        else
        {
LABEL_367:
          if ((_DWORD **)v293 != v294 && v102)
          {
            do
            {
              if (*(_DWORD *)(v31 + 36) != v138[1] || *(_DWORD *)(v31 + 32) != *v138) {
                break;
              }
              v138 += 3;
              if (v138 == (_DWORD *)(*(void *)v293 + 12 * *(unsigned __int16 *)(v293 + 8)))
              {
                v293 += 16;
                if ((_DWORD **)v293 != v294)
                {
                  do
                  {
                    if (*(_WORD *)(v293 + 8))
                    {
                      unint64_t v138 = *(_DWORD **)v293;
                      goto LABEL_371;
                    }
                    v293 += 16;
                  }
                  while ((_DWORD **)v293 != v294);
                  unint64_t v138 = *(_DWORD **)(v293 - 16);
                }
                break;
              }
LABEL_371:
              ;
            }
            while ((_DWORD **)v293 != v294);
          }
        }
LABEL_139:
        unsigned int v21 = v138[2];
        if (v21 == -1)
        {
          int v139 = *(_DWORD *)(v31 + 112);
          *(_DWORD *)(v31 + 112) = v139 + 1;
          v138[2] = v139;
          unint64_t v141 = *(char **)(v31 + 96);
          unint64_t v140 = *(void *)(v31 + 104);
          if ((unint64_t)v141 < v140)
          {
            *(void *)unint64_t v141 = v48;
            uint64_t v142 = (uint64_t)(v141 + 8);
            goto LABEL_164;
          }
          uint64_t v143 = (char **)(v31 + 88);
          unint64_t v144 = *(char **)(v31 + 88);
          int v145 = (char *)(v141 - v144);
          uint64_t v146 = (v141 - v144) >> 3;
          unint64_t v147 = v146 + 1;
          if ((unint64_t)(v146 + 1) >> 61) {
            sub_2E00();
          }
          uint64_t v148 = v140 - (void)v144;
          if (v148 >> 2 > v147) {
            unint64_t v147 = v148 >> 2;
          }
          if ((unint64_t)v148 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v149 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v149 = v147;
          }
          if (v149)
          {
            if (v149 >> 61) {
              sub_188D718();
            }
            unint64_t v150 = v149;
            __int16 v151 = operator new(8 * v149);
            uint64_t v143 = (char **)(v31 + 88);
            unint64_t v149 = v150;
            int v145 = (char *)(v141 - v144);
            uint64_t v152 = (unint64_t *)&v151[8 * v146];
            *uint64_t v152 = v48;
            uint64_t v142 = (uint64_t)(v152 + 1);
            if (v141 == v144) {
              goto LABEL_162;
            }
LABEL_155:
            unint64_t v153 = v141 - 8 - v144;
            if (v153 < 0x58) {
              goto LABEL_432;
            }
            if ((unint64_t)(v141 - v151 - (void)v145) < 0x20) {
              goto LABEL_432;
            }
            uint64_t v154 = (v153 >> 3) + 1;
            uint64_t v155 = 8 * (v154 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v156 = &v141[-v155];
            uint64_t v152 = (unint64_t *)((char *)v152 - v155);
            uint64_t v157 = &v151[8 * v146 - 16];
            uint64_t v158 = v141 - 16;
            uint64_t v159 = v154 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v160 = *(_OWORD *)v158;
              *(v157 - 1) = *((_OWORD *)v158 - 1);
              *uint64_t v157 = v160;
              v157 -= 2;
              v158 -= 32;
              v159 -= 4;
            }
            while (v159);
            unint64_t v141 = v156;
            if (v154 != (v154 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_432:
              do
              {
                unint64_t v161 = *((void *)v141 - 1);
                v141 -= 8;
                *--uint64_t v152 = v161;
              }
              while (v141 != v144);
            }
            unint64_t v141 = *v143;
          }
          else
          {
            __int16 v151 = 0;
            uint64_t v152 = (unint64_t *)(8 * v146);
            *(void *)(8 * v146) = v48;
            uint64_t v142 = 8 * v146 + 8;
            if (v141 != v144) {
              goto LABEL_155;
            }
          }
LABEL_162:
          *(void *)(v31 + 88) = v152;
          *(void *)(v31 + 96) = v142;
          *(void *)(v31 + 104) = &v151[8 * v149];
          if (v141) {
            operator delete(v141);
          }
LABEL_164:
          *(void *)(v31 + 96) = v142;
          unsigned int v21 = v138[2];
        }
        uint64_t v162 = (void *)(*(void *)(v337 + 24) + 4136);
        unint64_t v163 = *(void *)v343;
        unsigned int v164 = *(_DWORD *)&v343[20];
        uint64_t v165 = HIDWORD(*(void *)v343);
        if (sub_A10E20(v162, *(int *)&v343[4]))
        {
          uint64_t v166 = (int *)sub_A1120C(*(void *)(*v162 + 3944), v163);
        }
        else
        {
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_24F7308))
          {
            sub_518C8(0x3B60u, 0x7FCAu);
            dword_24F7300 = v300 | 0x40000000;
            __cxa_guard_release(&qword_24F7308);
          }
          uint64_t v167 = *v162;
          if (dword_24F7300 == v165)
          {
            int v168 = *(unsigned int **)(*(void *)(v167 + 3976) + 72);
            if (!v168)
            {
              int v322 = __cxa_allocate_exception(0x40uLL);
              sub_5E5C(v395, "Realtime stop pattern quad data requested on nullptr buffer");
              unsigned int v323 = (void *)sub_2F404((uint64_t)v322, (long long *)v395);
            }
            uint64_t v169 = (int *)((char *)v168 + *v168);
            uint64_t v170 = (unsigned __int16 *)((char *)v169 - *v169);
            if (*v170 >= 5u && (uint64_t v171 = v170[2]) != 0) {
              int v172 = (unsigned int *)((char *)v169 + v171 + *(unsigned int *)((char *)v169 + v171));
            }
            else {
              int v172 = 0;
            }
            uint64_t v166 = (int *)sub_A1139C(v172, v163);
          }
          else
          {
            uint64_t v166 = (int *)sub_A11500(v167 + 24, v163, 0, "stop pattern");
          }
        }
        long long v173 = (unsigned __int16 *)((char *)v166 - *v166);
        if (*v173 >= 9u && (uint64_t v174 = v173[4]) != 0) {
          __int16 v175 = (unsigned int *)((char *)v166 + v174 + *(unsigned int *)((char *)v166 + v174));
        }
        else {
          __int16 v175 = 0;
        }
        DWORD1(v339) = 10 * *(_DWORD *)(sub_A10764(v175, v164) + 8);
        uint64_t v176 = *(void *)(v337 + 24);
        unint64_t v177 = *(void *)v343;
        uint64_t v178 = (uint64_t *)(v176 + 4136);
        unsigned int v179 = *(_DWORD *)&v343[20];
        int v180 = *(_DWORD *)&v343[8];
        uint64_t v181 = HIDWORD(*(void *)v343);
        if (sub_A10E20((void *)(v176 + 4136), *(int *)&v343[4]))
        {
          int v182 = *(unsigned int **)(*(void *)(*v178 + 3944) + 72);
          if (!v182)
          {
            uint64_t v316 = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(v395, "Incident stop pattern quad data requested on nullptr buffer");
            uint64_t v317 = (void *)sub_2F404((uint64_t)v316, (long long *)v395);
          }
          goto LABEL_186;
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F7308))
        {
          sub_518C8(0x3B60u, 0x7FCAu);
          dword_24F7300 = v301 | 0x40000000;
          __cxa_guard_release(&qword_24F7308);
        }
        uint64_t v183 = *v178;
        if (dword_24F7300 != v181)
        {
          int32x2_t v184 = sub_A10B80(v183 + 24, v177, 0);
          unsigned __int16 v185 = &v184[-*(int *)v184];
          if (*(unsigned __int16 *)v185 >= 5u) {
            goto LABEL_187;
          }
LABEL_190:
          uint64_t v186 = 0;
          goto LABEL_191;
        }
        int v182 = *(unsigned int **)(*(void *)(v183 + 3976) + 72);
        if (!v182)
        {
          int v326 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(v395, "Realtime stop pattern quad data requested on nullptr buffer");
          int v327 = (void *)sub_2F404((uint64_t)v326, (long long *)v395);
        }
LABEL_186:
        int32x2_t v184 = (char *)v182 + *v182;
        unsigned __int16 v185 = &v184[-*(int *)v184];
        if (*(unsigned __int16 *)v185 < 5u) {
          goto LABEL_190;
        }
LABEL_187:
        uint64_t v186 = *((unsigned __int16 *)v185 + 2);
        if (v186) {
          v186 += (uint64_t)&v184[*(unsigned int *)&v184[v186]];
        }
LABEL_191:
        int v187 = (int *)(v186 + 4 * v177 + 4 + *(unsigned int *)(v186 + 4 * v177 + 4));
        char v188 = (unsigned __int16 *)((char *)v187 - *v187);
        if (*v188 >= 9u && (uint64_t v189 = v188[4]) != 0) {
          int v190 = (unsigned int *)((char *)v187 + v189 + *(unsigned int *)((char *)v187 + v189));
        }
        else {
          int v190 = 0;
        }
        uint64_t v191 = sub_A10764(v190, v179);
        uint64_t v192 = &v184[-*(int *)v184];
        if (*(unsigned __int16 *)v192 < 0xBu)
        {
          int v193 = 0;
          uint64_t v194 = (unsigned __int16 *)((char *)v187 - *v187);
          if (*v194 >= 0x11u) {
            goto LABEL_199;
          }
LABEL_202:
          LODWORD(v195) = 0;
          goto LABEL_203;
        }
        int v193 = (unsigned int *)*((unsigned __int16 *)v192 + 5);
        if (v193) {
          int v193 = (unsigned int *)((char *)v193 + (void)v184 + *(unsigned int *)((char *)v193 + (void)v184));
        }
        uint64_t v194 = (unsigned __int16 *)((char *)v187 - *v187);
        if (*v194 < 0x11u) {
          goto LABEL_202;
        }
LABEL_199:
        uint64_t v195 = v194[8];
        if (v194[8]) {
          LODWORD(v195) = *(int *)((char *)v187 + v195);
        }
LABEL_203:
        uint64_t v196 = sub_A108C4(v193, v195+ *(int *)((char *)v187 + v194[2] + *(unsigned int *)((char *)v187 + v194[2])) * v180+ *(unsigned __int8 *)(v191 + 14));
        if (v196)
        {
          uint64_t v197 = __ROR8__(*(void *)v196, 32);
          int v198 = *(_DWORD *)(v196 + 8);
        }
        else
        {
          int v198 = 0;
          uint64_t v197 = 0xFFFFFFFFLL;
        }
        *(void *)long long v395 = v197;
        *(_DWORD *)&v395[8] = v198;
        uint64_t v199 = (int *)sub_A11094((void *)(v176 + 4136), v177);
        uint64_t v200 = (unsigned __int16 *)((char *)v199 - *v199);
        if (*v200 >= 9u && (uint64_t v201 = v200[4]) != 0) {
          int v202 = (unsigned int *)((char *)v199 + v201 + *(unsigned int *)((char *)v199 + v201));
        }
        else {
          int v202 = 0;
        }
        unsigned int v203 = *(unsigned __int16 *)(sub_A10764(v202, v179) + 12);
        if (*(_DWORD *)&v343[12] == -1) {
          int v204 = 0x7FFFFFFF;
        }
        else {
          int v204 = *(_DWORD *)&v343[16];
        }
        *((void *)&v339 + 1) = sub_A0FAA0((uint64_t *)(v176 + 4184), (unsigned int *)v395, v203, v204);
        __int16 v340 = v205;
        uint64_t v206 = *(void *)(v337 + 24);
        unint64_t v207 = *(void *)v343;
        int v208 = (uint64_t *)(v206 + 4136);
        unsigned int v209 = v344;
        int v210 = *(_DWORD *)&v343[8];
        uint64_t v211 = HIDWORD(*(void *)v343);
        if (sub_A10E20((void *)(v206 + 4136), *(int *)&v343[4]))
        {
          __int16 v212 = *(unsigned int **)(*(void *)(*v208 + 3944) + 72);
          if (!v212)
          {
            uint64_t v318 = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(v395, "Incident stop pattern quad data requested on nullptr buffer");
            uint64_t v319 = (void *)sub_2F404((uint64_t)v318, (long long *)v395);
          }
          goto LABEL_219;
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F7308))
        {
          sub_518C8(0x3B60u, 0x7FCAu);
          dword_24F7300 = v302 | 0x40000000;
          __cxa_guard_release(&qword_24F7308);
        }
        uint64_t v213 = *v208;
        if (dword_24F7300 != v211)
        {
          uint64_t v214 = sub_A10B80(v213 + 24, v207, 0);
          uint64_t v215 = &v214[-*(int *)v214];
          if (*(unsigned __int16 *)v215 >= 5u) {
            goto LABEL_220;
          }
LABEL_223:
          uint64_t v216 = 0;
          goto LABEL_224;
        }
        __int16 v212 = *(unsigned int **)(*(void *)(v213 + 3976) + 72);
        if (!v212)
        {
          long long v320 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(v395, "Realtime stop pattern quad data requested on nullptr buffer");
          int v321 = (void *)sub_2F404((uint64_t)v320, (long long *)v395);
        }
LABEL_219:
        uint64_t v214 = (char *)v212 + *v212;
        uint64_t v215 = &v214[-*(int *)v214];
        if (*(unsigned __int16 *)v215 < 5u) {
          goto LABEL_223;
        }
LABEL_220:
        uint64_t v216 = *((unsigned __int16 *)v215 + 2);
        if (v216) {
          v216 += (uint64_t)&v214[*(unsigned int *)&v214[v216]];
        }
LABEL_224:
        uint64_t v217 = (int *)(v216 + 4 * v207 + 4 + *(unsigned int *)(v216 + 4 * v207 + 4));
        int v218 = (unsigned __int16 *)((char *)v217 - *v217);
        if (*v218 >= 9u && (uint64_t v219 = v218[4]) != 0) {
          uint64_t v220 = (unsigned int *)((char *)v217 + v219 + *(unsigned int *)((char *)v217 + v219));
        }
        else {
          uint64_t v220 = 0;
        }
        uint64_t v221 = sub_A10764(v220, v209);
        uint64_t v222 = &v214[-*(int *)v214];
        if (*(unsigned __int16 *)v222 < 0xBu)
        {
          uint64_t v223 = 0;
          int v224 = (unsigned __int16 *)((char *)v217 - *v217);
          if (*v224 >= 0x11u) {
            goto LABEL_232;
          }
LABEL_235:
          LODWORD(v225) = 0;
          goto LABEL_236;
        }
        uint64_t v223 = (unsigned int *)*((unsigned __int16 *)v222 + 5);
        if (v223) {
          uint64_t v223 = (unsigned int *)((char *)v223 + (void)v214 + *(unsigned int *)((char *)v223 + (void)v214));
        }
        int v224 = (unsigned __int16 *)((char *)v217 - *v217);
        if (*v224 < 0x11u) {
          goto LABEL_235;
        }
LABEL_232:
        uint64_t v225 = v224[8];
        if (v224[8]) {
          LODWORD(v225) = *(int *)((char *)v217 + v225);
        }
LABEL_236:
        uint64_t v226 = sub_A108C4(v223, v225+ *(int *)((char *)v217 + v224[2] + *(unsigned int *)((char *)v217 + v224[2])) * v210+ *(unsigned __int8 *)(v221 + 14));
        if (v226)
        {
          uint64_t v227 = __ROR8__(*(void *)v226, 32);
          int v228 = *(_DWORD *)(v226 + 8);
        }
        else
        {
          int v228 = 0;
          uint64_t v227 = 0xFFFFFFFFLL;
        }
        *(void *)long long v395 = v227;
        *(_DWORD *)&v395[8] = v228;
        uint64_t v229 = (int *)sub_A11094((void *)(v206 + 4136), v207);
        uint64_t v230 = (unsigned __int16 *)((char *)v229 - *v229);
        if (*v230 >= 9u && (uint64_t v231 = v230[4]) != 0) {
          unint64_t v232 = (unsigned int *)((char *)v229 + v231 + *(unsigned int *)((char *)v229 + v231));
        }
        else {
          unint64_t v232 = 0;
        }
        unsigned int v233 = *(unsigned __int16 *)(sub_A10764(v232, v209) + 12);
        if (*(_DWORD *)&v343[12] == -1) {
          int v234 = 0x7FFFFFFF;
        }
        else {
          int v234 = *(_DWORD *)&v343[16];
        }
        unint64_t v341 = sub_A0FDF4((uint64_t *)(v206 + 4184), (unsigned int *)v395, v233, v234);
        __int16 v342 = v235;
        int v404 = -1;
        sub_9F6FA0((uint64_t)v395, &v339);
        int v404 = 0;
        if (v415)
        {
          sub_9F6FA0((uint64_t)v405, (long long *)v395);
          a1 = v337;
          int v415 = v404;
          if (!v404) {
            goto LABEL_256;
          }
        }
        else
        {
          *(_OWORD *)v405 = *(_OWORD *)v395;
          *(_OWORD *)&v405[16] = *(_OWORD *)&v395[16];
          v406[0] = *(_OWORD *)v396;
          *(_OWORD *)((char *)v406 + 12) = *(_OWORD *)&v396[12];
          a1 = v337;
          if (v407[0])
          {
            v407[1] = v407[0];
            operator delete(v407[0]);
          }
          *(_OWORD *)long long v407 = v397;
          uint64_t v408 = v398;
          uint64_t v398 = 0;
          long long v397 = 0uLL;
          if ((void)v409)
          {
            *((void *)&v409 + 1) = v409;
            operator delete((void *)v409);
          }
          long long v409 = *(_OWORD *)v399;
          int v410 = v399[2];
          memset(v399, 0, sizeof(v399));
          int v411 = v400;
          if ((void)v412)
          {
            *((void *)&v412 + 1) = v412;
            operator delete((void *)v412);
          }
          long long v412 = v401;
          uint64_t v413 = v402;
          uint64_t v402 = 0;
          long long v401 = 0uLL;
          long long v414 = v403;
          if (!v404)
          {
LABEL_256:
            if ((void)v401)
            {
              *((void *)&v401 + 1) = v401;
              operator delete((void *)v401);
            }
            if (v399[0])
            {
              v399[1] = v399[0];
              operator delete(v399[0]);
            }
            if ((void)v397)
            {
              *((void *)&v397 + 1) = v397;
              operator delete((void *)v397);
            }
          }
        }
        if (v349)
        {
          uint64_t v350 = v349;
          operator delete(v349);
        }
        if (*((void *)&v346 + 1))
        {
          *(void *)&long long v347 = *((void *)&v346 + 1);
          operator delete(*((void **)&v346 + 1));
        }
        if ((void)v345)
        {
          *((void *)&v345 + 1) = v345;
          operator delete((void *)v345);
        }
        if (v22[4] == -1) {
          goto LABEL_275;
        }
        uint64_t v236 = (uint64_t)v356;
        if ((unint64_t)v356 < v357) {
          goto LABEL_270;
        }
LABEL_288:
        uint64_t v356 = (char *)sub_A4CBF4((uint64_t *)&v355, (uint64_t)v405);
        uint64_t v237 = *((void *)&v387 + 1);
        if (*((void *)&v387 + 1) >= (unint64_t)v388) {
          goto LABEL_274;
        }
LABEL_289:
        *(void *)uint64_t v237 = 0;
        *(void *)(v237 + 8) = 0;
        *(void *)(v237 + 16) = 0;
        unsigned int v243 = (char *)v355;
        uint64_t v244 = v356;
        int64_t v245 = v356 - (unsigned char *)v355;
        if (v356 != v355)
        {
          unint64_t v246 = 0xCF3CF3CF3CF3CF3DLL * (v245 >> 3);
          if (v246 >= 0x186186186186187) {
            sub_2E00();
          }
          uint64_t v247 = (char *)operator new(v245);
          uint64_t v248 = 0;
          *(void *)uint64_t v237 = v247;
          *(void *)(v237 + 8) = v247;
          *(void *)(v237 + 16) = &v247[168 * v246];
          do
          {
            uint64_t v250 = (long long *)&v247[v248];
            uint64_t v251 = (long long *)&v243[v248];
            *(_DWORD *)&v247[v248 + 160] = *(_DWORD *)&v243[v248 + 160];
            int v252 = *(_DWORD *)&v243[v248 + 160];
            if (v252 == 1)
            {
              long long v249 = *v251;
              *(long long *)((char *)v250 + 12) = *(long long *)((char *)v251 + 12);
              long long *v250 = v249;
            }
            else if (!v252)
            {
              sub_9F6FA0((uint64_t)v250, v251);
            }
            v248 += 168;
          }
          while (&v243[v248] != v244);
          *(void *)(v237 + 8) = &v247[v248];
        }
        char v253 = v358;
        *(void *)(v237 + 32) = 0;
        *(unsigned char *)(v237 + 24) = v253;
        *(void *)(v237 + 40) = 0;
        *(void *)(v237 + 48) = 0;
        uint64_t v254 = v359;
        uint64_t v255 = v360 - (unsigned char *)v359;
        if (v360 != v359)
        {
          if (0xCCCCCCCCCCCCCCCDLL * (v255 >> 3) >= 0x666666666666667) {
            sub_2E00();
          }
          uint64_t v256 = (char *)operator new(v360 - (unsigned char *)v359);
          *(void *)(v237 + 32) = v256;
          *(void *)(v237 + 40) = v256;
          char v257 = &v256[8 * (v255 >> 3)];
          *(void *)(v237 + 48) = v257;
          memcpy(v256, v254, v255 - 7);
          *(void *)(v237 + 40) = v257;
        }
        uint64_t v258 = *(void *)v362;
        *(void *)(v237 + 63) = *(void *)&v362[7];
        *(void *)(v237 + 56) = v258;
        uint64_t v238 = (char *)(v237 + 72);
LABEL_302:
        *((void *)&v387 + 1) = v238;
        unsigned int v260 = v22[5];
        *(_DWORD *)long long v395 = v338 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * v21 + 1;
        int v259 = *(_DWORD *)v395;
        uint64_t v261 = *(void *)(a1 + 192);
        uint64_t v262 = *(unsigned int *)(sub_AFAD84(v336, (unsigned int *)v395) + 4);
        *(_DWORD *)long long v395 = v259;
        uint64_t v263 = *(void *)(a1 + 192);
        uint64_t v22 = (unsigned int *)(v261 + (v262 << 6));
        long long v264 = (unsigned int *)(v263
                              + ((unint64_t)*(unsigned int *)(sub_AFAD84(v336, (unsigned int *)v395) + 8) << 6));
        if (v22 == v264)
        {
LABEL_305:
          uint64_t v22 = 0;
        }
        else
        {
          while (v22[6] != v260)
          {
            v22 += 16;
            if (v22 == v264) {
              goto LABEL_305;
            }
          }
        }
        if (!v415)
        {
          if ((void)v412)
          {
            *((void *)&v412 + 1) = v412;
            operator delete((void *)v412);
          }
          if ((void)v409)
          {
            *((void *)&v409 + 1) = v409;
            operator delete((void *)v409);
          }
          if (v407[0])
          {
            v407[1] = v407[0];
            operator delete(v407[0]);
          }
        }
        if (v359)
        {
          unsigned int v360 = v359;
          operator delete(v359);
        }
        uint64_t v265 = (char *)v355;
        if (v355)
        {
          uint64_t v266 = v356;
          uint64_t v23 = v355;
          if (v356 != v355)
          {
            do
            {
              if (!*((_DWORD *)v266 - 2))
              {
                char v267 = (void *)*((void *)v266 - 6);
                if (v267)
                {
                  *((void *)v266 - 5) = v267;
                  operator delete(v267);
                }
                unsigned int v268 = (void *)*((void *)v266 - 10);
                if (v268)
                {
                  *((void *)v266 - 9) = v268;
                  operator delete(v268);
                }
                int v269 = (void *)*((void *)v266 - 13);
                if (v269)
                {
                  *((void *)v266 - 12) = v269;
                  operator delete(v269);
                }
              }
              v266 -= 168;
            }
            while (v266 != v265);
            uint64_t v23 = v355;
          }
          uint64_t v356 = v265;
          operator delete(v23);
        }
        --v338;
        if (*v22 == -1) {
          goto LABEL_390;
        }
        goto LABEL_27;
      }
LABEL_56:
      ++v47;
    }
  }
LABEL_7:
  uint64_t result = std::string::operator=(v328, (const std::string *)(a1 + 528));
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a1 + 616);
  *(_OWORD *)(a2 + 136) = *(_OWORD *)(a1 + 632);
  *(_OWORD *)(a2 + 152) = *(_OWORD *)(a1 + 648);
  *(_OWORD *)(a2 + 168) = *(_OWORD *)(a1 + 664);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 552);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 568);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 584);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 600);
  return result;
}

void sub_B03358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  __cxa_guard_abort(&qword_24F7308);
  if (__p)
  {
    operator delete(__p);
    uint64_t v67 = a52;
    if (!a52)
    {
LABEL_3:
      uint64_t v68 = a49;
      if (!a49) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v67 = a52;
    if (!a52) {
      goto LABEL_3;
    }
  }
  operator delete(v67);
  uint64_t v68 = a49;
  if (!a49)
  {
LABEL_4:
    if (LODWORD(STACK[0x470])) {
      goto LABEL_13;
    }
LABEL_9:
    uint64_t v69 = (void *)STACK[0x448];
    if (STACK[0x448])
    {
      STACK[0x450] = (unint64_t)v69;
      operator delete(v69);
      uint64_t v70 = (void *)STACK[0x428];
      if (!STACK[0x428])
      {
LABEL_11:
        int v71 = (void *)STACK[0x410];
        if (!STACK[0x410]) {
          goto LABEL_13;
        }
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v70 = (void *)STACK[0x428];
      if (!STACK[0x428]) {
        goto LABEL_11;
      }
    }
    STACK[0x430] = (unint64_t)v70;
    operator delete(v70);
    int v71 = (void *)STACK[0x410];
    if (!STACK[0x410])
    {
LABEL_13:
      if (a66)
      {
        operator delete(a66);
        int v72 = a62;
        if (!a62)
        {
LABEL_15:
          uint64_t v73 = (void *)STACK[0x300];
          if (!STACK[0x300]) {
            goto LABEL_16;
          }
          goto LABEL_40;
        }
      }
      else
      {
        int v72 = a62;
        if (!a62) {
          goto LABEL_15;
        }
      }
      uint64_t v79 = a63;
      uint64_t v80 = v72;
      if ((void *)a63 != v72)
      {
        do
        {
          if (!*(_DWORD *)(v79 - 8))
          {
            char v81 = *(void **)(v79 - 48);
            if (v81)
            {
              *(void *)(v79 - 40) = v81;
              operator delete(v81);
            }
            uint64_t v82 = *(void **)(v79 - 80);
            if (v82)
            {
              *(void *)(v79 - 72) = v82;
              operator delete(v82);
            }
            uint64_t v83 = *(void **)(v79 - 104);
            if (v83)
            {
              *(void *)(v79 - 96) = v83;
              operator delete(v83);
            }
          }
          v79 -= 168;
        }
        while ((void *)v79 != v72);
        uint64_t v80 = a62;
      }
      operator delete(v80);
      uint64_t v73 = (void *)STACK[0x300];
      if (!STACK[0x300])
      {
LABEL_16:
        __int16 v74 = (void *)STACK[0x2E8];
        if (!STACK[0x2E8]) {
          goto LABEL_17;
        }
        goto LABEL_41;
      }
LABEL_40:
      STACK[0x308] = (unint64_t)v73;
      operator delete(v73);
      __int16 v74 = (void *)STACK[0x2E8];
      if (!STACK[0x2E8])
      {
LABEL_17:
        char v75 = (void *)STACK[0x2D0];
        if (!STACK[0x2D0]) {
          goto LABEL_18;
        }
        goto LABEL_42;
      }
LABEL_41:
      STACK[0x2F0] = (unint64_t)v74;
      operator delete(v74);
      char v75 = (void *)STACK[0x2D0];
      if (!STACK[0x2D0])
      {
LABEL_18:
        unint64_t v76 = STACK[0x2B8];
        if (!STACK[0x2B8]) {
          goto LABEL_19;
        }
        goto LABEL_43;
      }
LABEL_42:
      STACK[0x2D8] = (unint64_t)v75;
      operator delete(v75);
      unint64_t v76 = STACK[0x2B8];
      if (!STACK[0x2B8])
      {
LABEL_19:
        if (SLOBYTE(STACK[0x277]) < 0) {
          goto LABEL_20;
        }
        goto LABEL_47;
      }
LABEL_43:
      uint64_t v84 = (void **)STACK[0x2C0];
      int v85 = (void *)v76;
      if (STACK[0x2C0] != v76)
      {
        do
        {
          v84 -= 9;
          sub_9F5F58(a9, v84);
        }
        while (v84 != (void **)v76);
        int v85 = (void *)STACK[0x2B8];
      }
      STACK[0x2C0] = v76;
      operator delete(v85);
      if (SLOBYTE(STACK[0x277]) < 0)
      {
LABEL_20:
        operator delete((void *)STACK[0x260]);
        unint64_t v77 = *a10;
        if (*a10) {
          goto LABEL_21;
        }
        goto LABEL_48;
      }
LABEL_47:
      unint64_t v77 = *a10;
      if (*a10)
      {
LABEL_21:
        *(void *)(a20 + 200) = v77;
        operator delete(v77);
        if ((*(char *)(a20 + 55) & 0x80000000) == 0) {
          goto LABEL_22;
        }
        goto LABEL_49;
      }
LABEL_48:
      if ((*(char *)(a20 + 55) & 0x80000000) == 0)
      {
LABEL_22:
        __int16 v78 = *a13;
        if (!*a13) {
          goto LABEL_23;
        }
        goto LABEL_50;
      }
LABEL_49:
      operator delete(*a11);
      __int16 v78 = *a13;
      if (!*a13) {
LABEL_23:
      }
        _Unwind_Resume(a1);
LABEL_50:
      uint64_t v86 = a20;
      uint64_t v87 = *(void *)(a20 + 16);
      __int16 v88 = v78;
      if ((void *)v87 != v78)
      {
        do
        {
          v87 -= 296;
          sub_9F5E28(a20 + 24, v87);
        }
        while ((void *)v87 != v78);
        __int16 v88 = *a13;
        uint64_t v86 = a20;
      }
      *(void *)(v86 + 16) = v78;
      operator delete(v88);
      _Unwind_Resume(a1);
    }
LABEL_12:
    STACK[0x418] = (unint64_t)v71;
    operator delete(v71);
    goto LABEL_13;
  }
LABEL_8:
  operator delete(v68);
  if (LODWORD(STACK[0x470])) {
    goto LABEL_13;
  }
  goto LABEL_9;
}

void sub_B03888(uint64_t a1)
{
  *(_DWORD *)(a1 + 240) = 0;
  if (*(void *)(a1 + 144) | *(void *)(a1 + 184))
  {
    for (uint64_t i = *(void *)(a1 + 152); i != *(void *)(a1 + 160); i += 16)
    {
      if (*(void *)i)
      {
        free(*(void **)i);
        *(void *)uint64_t i = 0;
      }
      *(void *)(i + 8) = 0;
    }
    *(void *)(a1 + 184) = 0;
  }
  *(uint64x2_t *)(a1 + 104) = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 120), (float)*(unint64_t *)(a1 + 176))));
  *(unsigned char *)(a1 + 128) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 200) = *(void *)(a1 + 192);
  *(void *)(a1 + 224) = 0;
  unsigned int v3 = *(unsigned int **)(a1 + 272);
  int v4 = *(unsigned int **)(a1 + 280);
  if (v3 != v4)
  {
    uint64_t v5 = *(void *)(a1 + 248);
    uint64_t v6 = *(unsigned int **)(a1 + 272);
    do
    {
      unsigned int v7 = *v6++;
      *(void *)(v5 + (((unint64_t)v7 >> 3) & 0x1FFFFFF8)) &= ~(1 << v7);
    }
    while (v6 != v4);
  }
  *(void *)(a1 + 280) = v3;
  int v8 = *(unsigned int **)(a1 + 320);
  uint64_t v9 = *(unsigned int **)(a1 + 328);
  if (v8 != v9)
  {
    uint64_t v10 = *(void *)(a1 + 296);
    uint64_t v11 = *(unsigned int **)(a1 + 320);
    do
    {
      unsigned int v12 = *v11++;
      *(void *)(v10 + (((unint64_t)v12 >> 3) & 0x1FFFFFF8)) &= ~(1 << v12);
    }
    while (v11 != v9);
  }
  *(void *)(a1 + 328) = v8;
  uint64_t v13 = *(unsigned int **)(a1 + 392);
  uint64_t v14 = *(unsigned int **)(a1 + 400);
  if (v13 != v14)
  {
    uint64_t v15 = *(void *)(a1 + 368);
    uint64_t v16 = *(void *)(a1 + 344);
    uint64_t v17 = *(unsigned int **)(a1 + 392);
    do
    {
      unsigned int v18 = *v17++;
      *(void *)(v15 + (((unint64_t)v18 >> 3) & 0x1FFFFFF8)) &= ~(1 << v18);
      *(_DWORD *)(v16 + 4 * v18) = -1;
    }
    while (v17 != v14);
  }
  *(void *)(a1 + 400) = v13;
  sub_BD5698(a1 + 424);
  char v21 = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)&__dst, &__p);
  uint64_t v19 = (void **)(a1 + 528);
  if (*(char *)(a1 + 551) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)uint64_t v19 = __dst;
  *(void *)(a1 + 544) = v23;
  HIBYTE(v23) = 0;
  LOBYTE(__dst) = 0;
  *(_OWORD *)(a1 + 616) = v28;
  *(_OWORD *)(a1 + 632) = v29;
  *(_OWORD *)(a1 + 648) = v30;
  *(_OWORD *)(a1 + 664) = v31;
  *(_OWORD *)(a1 + 552) = v24;
  *(_OWORD *)(a1 + 568) = v25;
  *(_OWORD *)(a1 + 584) = v26;
  *(_OWORD *)(a1 + 600) = v27;
  if (v21 < 0) {
    operator delete((void *)__p);
  }
  *(int32x2_t *)(a1 + 96) = vadd_s32(vdup_n_s32(2 * *(_DWORD *)(a1 + 16)), (int32x2_t)0x200000004);
  sub_BD5704(a1 + 424, *(void *)(a1 + 8));
}

void sub_B03AC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_B03AE0(uint64_t a1)
{
  if (sub_A276F8(*(void *)(a1 + 24)))
  {
    int v2 = *(_DWORD *)(a1 + 68);
    int v3 = *(_DWORD *)(a1 + 240);
    *(_DWORD *)(a1 + 240) = v3 + 1;
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v22 = 0x1FFFFFFFDLL;
    int v5 = sub_AD28B0(v4, &v22);
    int v23 = v5;
    LODWORD(v22) = 0;
    uint64_t v6 = *(void *)(a1 + 192);
    unsigned int v7 = (char *)(v6 + ((unint64_t)*(unsigned int *)(sub_AFAD84(a1 + 104, (unsigned int *)&v22) + 4) << 6));
    LODWORD(v22) = 0;
    uint64_t v8 = *(void *)(a1 + 192);
    uint64_t v9 = sub_AFAD84(a1 + 104, (unsigned int *)&v22);
    sub_AFA9C0(a1 + 104, 0, v7, (unsigned char *)(v8 + ((unint64_t)*(unsigned int *)(v9 + 8) << 6)));
    long long v13 = xmmword_20E2060;
    uint64_t v14 = -1;
    int v15 = v3;
    int v16 = v2;
    uint64_t v17 = 0;
    int v18 = 10 * v2;
    char v19 = 0;
    uint64_t v20 = -1;
    int v21 = 0x7FFFFFFF;
    sub_B05648((void *)(a1 + 104), &v13, 0, 0, 1);
    int v10 = *(_DWORD *)(a1 + 96);
    unsigned int v11 = v10 + v10 * v5;
    unsigned int v12 = v11 + 2;
    if (*(unsigned char *)(a1 + 20))
    {
      if (!sub_B05778((void *)(a1 + 104), 0, v12, v11, v10 + v10 * *(_DWORD *)(a1 + 416), 0x80000000)) {
        return;
      }
    }
    else if (!sub_B05778((void *)(a1 + 104), 0, v12, v11, -1, 0x80000000))
    {
      return;
    }
    sub_A3EF14((uint64_t *)(a1 + 248), &v23);
  }
}

double sub_B03C50(uint64_t a1, int a2)
{
  sub_725D0((uint64_t)v34);
  uint64_t v4 = *(unsigned int **)(a1 + 272);
  int v5 = *(unsigned int **)(a1 + 280);
  if (v4 != v5)
  {
    int v6 = a2 + 1;
    int v7 = a2 + 2;
    int v32 = ~a2;
    while (1)
    {
      unsigned int v33 = *v4;
      unint64_t v8 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), v33);
      if (HIDWORD(v8) == 1 && (v8 + 3) < 2)
      {
LABEL_12:
        int v13 = 0;
        goto LABEL_17;
      }
      uint64_t v10 = *(void *)(*(void *)(a1 + 24) + 4120);
      uint64_t v11 = v10 + 24;
      if (*(unsigned char *)(v10 + 17)) {
        break;
      }
      unsigned int v12 = (int *)sub_498D5C(v11, __ROR8__(v8, 32), 0, "stop");
      int v16 = (unsigned __int16 *)((char *)v12 - *v12);
      if (*v16 >= 0x15u)
      {
        unsigned int v15 = v16[10];
        if (v15) {
          goto LABEL_15;
        }
      }
      int v13 = 300;
LABEL_17:
      unsigned int v35 = 0;
      uint64_t v17 = *(void *)(a1 + 192);
      int v18 = (char *)(v17 + ((unint64_t)*(unsigned int *)(sub_AFAD84(a1 + 104, &v35) + 4) << 6));
      unsigned int v35 = 0;
      uint64_t v19 = *(void *)(a1 + 192);
      uint64_t v20 = sub_AFAD84(a1 + 104, &v35);
      sub_AFA9C0(a1 + 104, 0, v18, (unsigned char *)(v19 + ((unint64_t)*(unsigned int *)(v20 + 8) << 6)));
      sub_B05D78((void *)(a1 + 104), v6 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * v33, 0);
      unsigned int v35 = 0;
      uint64_t v21 = *(void *)(a1 + 192);
      uint64_t v22 = (unsigned int *)(v21 + ((unint64_t)*(unsigned int *)(sub_AFAD84(a1 + 104, &v35) + 4) << 6));
      unsigned int v35 = 0;
      uint64_t v23 = *(void *)(a1 + 192);
      for (uint64_t i = (unsigned int *)(v23 + ((unint64_t)*(unsigned int *)(sub_AFAD84(a1 + 104, &v35) + 8) << 6));
            v22 != i;
            v22 += 16)
      {
        unsigned int *v22 = v33;
        unsigned int v25 = v22[7];
        v22[3] = v25;
        v22[4] = -1;
        v22[7] = v25 + v13 / -10;
      }
      unsigned int v26 = v33;
      int v27 = *(_DWORD *)(a1 + 96);
      if (*(unsigned char *)(a1 + 20))
      {
        int v28 = v27 + v27 * *(_DWORD *)(a1 + 416) + 1;
        uint64_t v29 = *(void *)(a1 + 48);
        if (!v29) {
          goto LABEL_23;
        }
      }
      else
      {
        int v28 = -1;
        uint64_t v29 = *(void *)(a1 + 48);
        if (!v29)
        {
LABEL_23:
          int v30 = 0x80000000;
          goto LABEL_24;
        }
      }
      int v30 = sub_AD7004(v29, v33, *(_DWORD *)(a1 + 100) + v32);
LABEL_24:
      if (sub_B05778((void *)(a1 + 104), 0, v7 + v27 + v27 * v26, v27 + v27 * v26 + 1, v28, v30)) {
        sub_A3EF14((uint64_t *)(a1 + 296), &v33);
      }
      if (++v4 == v5) {
        goto LABEL_26;
      }
    }
    unsigned int v12 = (int *)sub_A1A290(v11, v8, 0, "transfers at stop");
    int v13 = 0;
    uint64_t v14 = (unsigned __int16 *)((char *)v12 - *v12);
    if (*v14 < 5u) {
      goto LABEL_17;
    }
    unsigned int v15 = v14[2];
    if (!v15) {
      goto LABEL_12;
    }
LABEL_15:
    int v13 = 10 * *(int *)((char *)v12 + v15);
    goto LABEL_17;
  }
LABEL_26:
  double result = sub_72688((uint64_t)v34) + *(double *)(a1 + 568);
  *(double *)(a1 + 568) = result;
  return result;
}

double sub_B03F0C(uint64_t a1, int a2)
{
  sub_725D0((uint64_t)v290);
  uint64_t v4 = *(unsigned int **)(a1 + 272);
  __int16 v271 = *(unsigned int **)(a1 + 280);
  if (v4 != v271)
  {
    int v276 = a2 + 2;
    int v277 = a2 + 1;
    int v274 = ~a2;
    uint64_t v275 = (uint64_t *)(a1 + 296);
    long long v270 = (void **)(a1 + 320);
    uint64_t v273 = a1;
    unint64_t v282 = (void *)(a1 + 104);
    while (1)
    {
      __int16 v272 = v4;
      unsigned int v283 = *v4;
      int v5 = (unint64_t *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), *v4);
      sub_A28D38((uint64_t)&v284, *(void *)(a1 + 24), *v5);
      int v6 = v285;
      int v7 = &v286;
      if (v289) {
        int v7 = v288;
      }
      if ((unint64_t)v285 < *v7) {
        break;
      }
LABEL_3:
      uint64_t v4 = v272 + 1;
      if (v272 + 1 == v271) {
        goto LABEL_316;
      }
    }
LABEL_13:
    uint64_t v11 = 0;
    unint64_t v12 = __ROR8__(*v6, 32);
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = *(void *)(v13 + 72) - 1;
    unint64_t v15 = 0xC4CEB9FE1A85EC53
        * ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) >> 33));
    unint64_t v16 = v15 ^ (v15 >> 33);
    uint64_t v17 = *(void *)(v13 + 48);
    uint64_t v18 = v17 + 11;
    uint64_t v19 = -1;
    for (unint64_t i = v16; ; unint64_t i = v11 + v21)
    {
      uint64_t v21 = i & v14;
      unint64_t v22 = (i & v14) / 0x30;
      unint64_t v23 = v21 - 48 * v22;
      if (((*(unsigned __int8 *)(v17 + 16 * v22 + (v23 >> 3) + 10) >> (v23 & 7)) & 1) == 0)
      {
        if (v19 == -1) {
          unint64_t v59 = v21;
        }
        else {
          unint64_t v59 = v19;
        }
        if (!sub_AD2F40(*(void *)(a1 + 32), 1)) {
          goto LABEL_98;
        }
        goto LABEL_55;
      }
      uint64_t v24 = *(void *)(v17 + 16 * v22);
      if (!*(void *)(v13 + 40)) {
        goto LABEL_33;
      }
      unsigned int v25 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
      if ((unsigned __int16)(v21 - 48 * v22) < 9u)
      {
        __int16 v26 = 0;
        LOBYTE(v31) = v21 - 48 * v22;
        goto LABEL_29;
      }
      __int16 v26 = 0;
      uint64_t v27 = (unsigned __int16)(v21 - 48 * v22 - 9) >> 3;
      if ((unsigned __int16)(v21 - 48 * v22 - 9) >> 3)
      {
        __int16 v28 = 0;
        uint64_t v29 = v27 + 1;
        uint64_t v30 = (v27 + 1) & 0x3FFE;
        unsigned __int16 v31 = v23 - 8 * v30;
        int v32 = &v25[v30];
        unsigned int v33 = (unsigned __int8 *)(v18 + 16 * v22);
        uint64_t v34 = v30;
        do
        {
          uint64_t v35 = *(v33 - 1);
          int v36 = *v33;
          v33 += 2;
          v26 += byte_20EBFB6[v35];
          v28 += byte_20EBFB6[v36];
          v34 -= 2;
        }
        while (v34);
        v26 += v28;
        if (v29 == v30) {
          goto LABEL_28;
        }
      }
      else
      {
        unsigned __int16 v31 = v21 - 48 * v22;
        int v32 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
      }
      do
      {
        int v37 = *v32++;
        v26 += byte_20EBFB6[v37];
        v31 -= 8;
      }
      while (v31 > 8u);
LABEL_28:
      v25 += ((unsigned __int16)(v23 - 9) >> 3) + 1;
LABEL_29:
      uint64_t v38 = (_DWORD *)(v24
                     + 12
                     * (unsigned __int16)(v26 + byte_20EBFB6[~(-1 << v31) & (unint64_t)*v25]));
      BOOL v39 = *(_DWORD *)(v13 + 36) == v38[1] && *(_DWORD *)(v13 + 32) == *v38;
      if (v39)
      {
        if (v19 == -1) {
          uint64_t v19 = v21;
        }
        goto LABEL_16;
      }
LABEL_33:
      unint64_t v40 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
      if ((unsigned __int16)(v21 - 48 * v22) < 9u)
      {
        __int16 v41 = 0;
        uint64_t v52 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
        LOBYTE(v46) = v21 - 48 * v22;
        goto LABEL_43;
      }
      __int16 v41 = 0;
      uint64_t v42 = (unsigned __int16)(v21 - 48 * v22 - 9) >> 3;
      if ((unsigned __int16)(v21 - 48 * v22 - 9) >> 3)
      {
        __int16 v43 = 0;
        uint64_t v44 = v42 + 1;
        uint64_t v45 = (v42 + 1) & 0x3FFE;
        unsigned __int16 v46 = v23 - 8 * v45;
        uint64_t v47 = &v40[v45];
        unint64_t v48 = (unsigned __int8 *)(v18 + 16 * v22);
        uint64_t v49 = v45;
        do
        {
          uint64_t v50 = *(v48 - 1);
          int v51 = *v48;
          v48 += 2;
          v41 += byte_20EBFB6[v50];
          v43 += byte_20EBFB6[v51];
          v49 -= 2;
        }
        while (v49);
        v41 += v43;
        if (v44 == v45) {
          goto LABEL_42;
        }
      }
      else
      {
        unsigned __int16 v46 = v21 - 48 * v22;
        uint64_t v47 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
      }
      do
      {
        int v53 = *v47++;
        v41 += byte_20EBFB6[v53];
        v46 -= 8;
      }
      while (v46 > 8u);
LABEL_42:
      uint64_t v52 = &v40[((unsigned __int16)(v23 - 9) >> 3) + 1];
LABEL_43:
      if (v12 == *(void *)(v24
                            + 12
                            * (unsigned __int16)(v41 + byte_20EBFB6[~(-1 << v46) & (unint64_t)*v52])))
      {
        if (v21 != -1)
        {
          if ((unsigned __int16)(v21 - 48 * v22) < 9u)
          {
            __int16 v56 = 0;
          }
          else
          {
            if ((((_WORD)v21 - 48 * (_WORD)v22 - 8) & 0xFFF8) != 0) {
              __int16 v54 = 8;
            }
            else {
              __int16 v54 = v21 - 48 * v22 - 8;
            }
            unsigned __int16 v55 = ~v54 + v21 - 48 * v22;
            if (v55 < 8u)
            {
              __int16 v56 = 0;
              unsigned __int16 v57 = v23;
              unint64_t v58 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
              goto LABEL_103;
            }
            __int16 v105 = 0;
            __int16 v106 = 0;
            uint64_t v107 = (v55 >> 3) + 1;
            unsigned __int16 v57 = v23 - 8 * (((v55 >> 3) + 1) & 0x3FFE);
            unint64_t v58 = &v40[v107 & 0x3FFE];
            unint64_t v108 = (unsigned __int8 *)(v17 + 16 * v22 + 11);
            uint64_t v109 = v107 & 0x3FFE;
            do
            {
              uint64_t v110 = *(v108 - 1);
              int v111 = *v108;
              v108 += 2;
              v105 += byte_20EBFB6[v110];
              v106 += byte_20EBFB6[v111];
              v109 -= 2;
            }
            while (v109);
            __int16 v56 = v106 + v105;
            if ((v107 & 0x3FFE) != v107)
            {
              do
              {
LABEL_103:
                int v112 = *v58++;
                v56 += byte_20EBFB6[v112];
                v57 -= 8;
              }
              while (v57 > 8u);
            }
            v40 += ((unsigned __int16)(v23 - 9) >> 3) + 1;
            LOBYTE(v23) = v57;
          }
          uint64_t v113 = *(void *)(v13 + 56);
          unsigned __int16 v114 = v56 + byte_20EBFB6[~(-1 << v23) & (unint64_t)*v40];
          uint64_t v115 = v17 + 16 * v22;
          if (*(unsigned __int16 *)(v115 + 8) != v114 || v115 + 16 == v113)
          {
            unsigned int v104 = (_DWORD *)(v24 + 12 * v114);
          }
          else
          {
            uint64_t v117 = v115 + 32;
            do
            {
              if (*(_WORD *)(v117 - 8)) {
                BOOL v118 = 1;
              }
              else {
                BOOL v118 = v117 == v113;
              }
              v117 += 16;
            }
            while (!v118);
            unsigned int v104 = *(_DWORD **)(v117 - 32);
          }
          goto LABEL_117;
        }
        unint64_t v59 = -1;
        if (!sub_AD2F40(*(void *)(a1 + 32), 1))
        {
LABEL_98:
          unint64_t v291 = v12;
          int v292 = -1;
          sub_AD3484(v13, (uint64_t *)&v291, v59, v293);
          unsigned int v104 = (_DWORD *)v294;
          goto LABEL_117;
        }
LABEL_55:
        uint64_t v60 = 0;
        unint64_t v291 = v12;
        int v292 = -1;
        uint64_t v61 = *(void *)(v13 + 72) - 1;
        uint64_t v62 = *(void *)(v13 + 48);
        uint64_t v63 = v62 + 11;
        uint64_t v64 = -1;
        while (2)
        {
          uint64_t v65 = v16 & v61;
          unint64_t v66 = (v16 & v61) / 0x30;
          unint64_t v67 = (v16 & v61) % 0x30;
          if (((*(unsigned __int8 *)(v62 + 16 * v66 + (v67 >> 3) + 10) >> (v67 & 7)) & 1) == 0)
          {
            if (v64 == -1) {
              unint64_t v103 = v16 & v61;
            }
            else {
              unint64_t v103 = v64;
            }
            goto LABEL_96;
          }
          uint64_t v68 = *(void *)(v13 + 40);
          uint64_t v69 = *(void *)(v62 + 16 * v66);
          if (!v68) {
            break;
          }
          uint64_t v70 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
          if ((unsigned __int16)((v16 & v61) % 0x30) < 9u)
          {
            __int16 v71 = 0;
            LOBYTE(v72) = (v16 & v61) % 0x30;
            goto LABEL_71;
          }
          __int16 v71 = 0;
          uint64_t v72 = (unsigned __int16)(v65 - 48 * v66 - 9) >> 3;
          if (!((unsigned __int16)(v65 - 48 * v66 - 9) >> 3))
          {
            LODWORD(v72) = (v16 & v61) % 0x30;
            unint64_t v76 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
            do
            {
LABEL_69:
              int v81 = *v76++;
              v71 += byte_20EBFB6[v81];
              LOWORD(v72) = v72 - 8;
            }
            while ((unsigned __int16)v72 > 8u);
            goto LABEL_70;
          }
          __int16 v73 = 0;
          uint64_t v74 = v72 + 1;
          uint64_t v75 = (v72 + 1) & 0x3FFE;
          LOWORD(v72) = v67 - 8 * v75;
          unint64_t v76 = &v70[v75];
          unint64_t v77 = (unsigned __int8 *)(v63 + 16 * v66);
          uint64_t v78 = v75;
          do
          {
            uint64_t v79 = *(v77 - 1);
            int v80 = *v77;
            v77 += 2;
            v71 += byte_20EBFB6[v79];
            v73 += byte_20EBFB6[v80];
            v78 -= 2;
          }
          while (v78);
          v71 += v73;
          if (v74 != v75) {
            goto LABEL_69;
          }
LABEL_70:
          v70 += ((unsigned __int16)(v67 - 9) >> 3) + 1;
LABEL_71:
          uint64_t v82 = (_DWORD *)(v69
                         + 12
                         * (unsigned __int16)(v71 + byte_20EBFB6[~(-1 << v72) & (unint64_t)*v70]));
          if (*(_DWORD *)(v13 + 36) == v82[1] && *(_DWORD *)(v13 + 32) == *v82)
          {
            if (v64 == -1) {
              uint64_t v64 = v16 & v61;
            }
LABEL_58:
            unint64_t v16 = ++v60 + v65;
            continue;
          }
          break;
        }
        uint64_t v84 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
        if ((unsigned __int16)((v16 & v61) % 0x30) < 9u)
        {
          __int16 v85 = 0;
          uint64_t v96 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
          LOBYTE(v90) = (v16 & v61) % 0x30;
          goto LABEL_85;
        }
        __int16 v85 = 0;
        uint64_t v86 = (unsigned __int16)(v65 - 48 * v66 - 9) >> 3;
        if (!((unsigned __int16)(v65 - 48 * v66 - 9) >> 3))
        {
          unsigned __int16 v90 = (v16 & v61) % 0x30;
          unint64_t v91 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
          do
          {
LABEL_83:
            int v97 = *v91++;
            v85 += byte_20EBFB6[v97];
            v90 -= 8;
          }
          while (v90 > 8u);
          goto LABEL_84;
        }
        __int16 v87 = 0;
        uint64_t v88 = v86 + 1;
        uint64_t v89 = (v86 + 1) & 0x3FFE;
        unsigned __int16 v90 = v67 - 8 * v89;
        unint64_t v91 = &v84[v89];
        uint64_t v92 = (unsigned __int8 *)(v63 + 16 * v66);
        uint64_t v93 = v89;
        do
        {
          uint64_t v94 = *(v92 - 1);
          int v95 = *v92;
          v92 += 2;
          v85 += byte_20EBFB6[v94];
          v87 += byte_20EBFB6[v95];
          v93 -= 2;
        }
        while (v93);
        v85 += v87;
        if (v88 != v89) {
          goto LABEL_83;
        }
LABEL_84:
        uint64_t v96 = &v84[((unsigned __int16)(v67 - 9) >> 3) + 1];
LABEL_85:
        if (v12 != *(void *)(v69
                              + 12
                              * (unsigned __int16)(v85
                                                 + byte_20EBFB6[~(-1 << v90) & (unint64_t)*v96])))
          goto LABEL_58;
        if (v65 == -1)
        {
          unint64_t v103 = -1;
LABEL_96:
          sub_AD3484(v13, (uint64_t *)&v291, v103, v293);
          unsigned int v104 = (_DWORD *)v294;
          goto LABEL_117;
        }
        if ((unsigned __int16)((v16 & v61) % 0x30) < 9u)
        {
          __int16 v100 = 0;
        }
        else
        {
          if ((((_WORD)v65 - 48 * (_WORD)v66 - 8) & 0xFFF8) != 0) {
            __int16 v98 = 8;
          }
          else {
            __int16 v98 = v65 - 48 * v66 - 8;
          }
          unsigned __int16 v99 = ~v98 + v65 - 48 * v66;
          if (v99 < 8u)
          {
            __int16 v100 = 0;
            unsigned __int16 v101 = v67;
            uint64_t v102 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
            goto LABEL_185;
          }
          __int16 v181 = 0;
          __int16 v182 = 0;
          uint64_t v183 = (v99 >> 3) + 1;
          unsigned __int16 v101 = v67 - 8 * (((v99 >> 3) + 1) & 0x3FFE);
          uint64_t v102 = &v84[v183 & 0x3FFE];
          int32x2_t v184 = (unsigned __int8 *)(v62 + 16 * v66 + 11);
          uint64_t v185 = v183 & 0x3FFE;
          do
          {
            uint64_t v186 = *(v184 - 1);
            int v187 = *v184;
            v184 += 2;
            v181 += byte_20EBFB6[v186];
            v182 += byte_20EBFB6[v187];
            v185 -= 2;
          }
          while (v185);
          __int16 v100 = v182 + v181;
          if ((v183 & 0x3FFE) != v183)
          {
            do
            {
LABEL_185:
              int v188 = *v102++;
              v100 += byte_20EBFB6[v188];
              v101 -= 8;
            }
            while (v101 > 8u);
          }
          v84 += ((unsigned __int16)(v67 - 9) >> 3) + 1;
          LOBYTE(v67) = v101;
        }
        uint64_t v189 = v62 + 16 * v66;
        int v190 = *(_DWORD ***)(v13 + 56);
        unsigned __int16 v191 = v100 + byte_20EBFB6[~(-1 << v67) & (unint64_t)*v84];
        unsigned int v104 = (_DWORD *)(v69 + 12 * v191);
        if (*(unsigned __int16 *)(v189 + 8) == v191)
        {
          uint64_t v192 = v189 + 16;
          if ((_DWORD **)(v189 + 16) != v190)
          {
            while (1)
            {
              int v193 = (_DWORD **)v192;
              if (*(_WORD *)(v192 + 8)) {
                break;
              }
              v192 += 16;
              if (v193 + 2 == v190)
              {
                uint64_t v189 = *(void *)(v13 + 56);
                goto LABEL_193;
              }
            }
            uint64_t v189 = v192;
LABEL_193:
            unsigned int v104 = *v193;
            goto LABEL_194;
          }
        }
        else
        {
LABEL_194:
          if ((_DWORD **)v189 != v190 && v68)
          {
            do
            {
              if (*(_DWORD *)(v13 + 36) != v104[1] || *(_DWORD *)(v13 + 32) != *v104) {
                break;
              }
              v104 += 3;
              if (v104 == (_DWORD *)(*(void *)v189 + 12 * *(unsigned __int16 *)(v189 + 8)))
              {
                v189 += 16;
                if ((_DWORD **)v189 != v190)
                {
                  do
                  {
                    if (*(_WORD *)(v189 + 8))
                    {
                      unsigned int v104 = *(_DWORD **)v189;
                      goto LABEL_198;
                    }
                    v189 += 16;
                  }
                  while ((_DWORD **)v189 != v190);
                  unsigned int v104 = *(_DWORD **)(v189 - 16);
                }
                break;
              }
LABEL_198:
              ;
            }
            while ((_DWORD **)v189 != v190);
          }
        }
LABEL_117:
        unsigned int v119 = v104[2];
        if (v119 == -1)
        {
          int v120 = *(_DWORD *)(v13 + 112);
          *(_DWORD *)(v13 + 112) = v120 + 1;
          v104[2] = v120;
          uint64_t v122 = *(unint64_t **)(v13 + 96);
          unint64_t v121 = *(void *)(v13 + 104);
          if ((unint64_t)v122 < v121)
          {
            unint64_t *v122 = v12;
            uint64_t v123 = (uint64_t)(v122 + 1);
            goto LABEL_142;
          }
          unsigned __int16 v124 = (unint64_t **)(v13 + 88);
          uint64_t v125 = *(char **)(v13 + 88);
          uint64_t v126 = ((char *)v122 - v125) >> 3;
          unint64_t v127 = v126 + 1;
          if ((unint64_t)(v126 + 1) >> 61) {
            sub_2E00();
          }
          uint64_t v128 = v121 - (void)v125;
          if (v128 >> 2 > v127) {
            unint64_t v127 = v128 >> 2;
          }
          if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v127 = 0x1FFFFFFFFFFFFFFFLL;
          }
          unint64_t v279 = v127;
          if (v127)
          {
            if (v127 >> 61) {
LABEL_318:
            }
              sub_188D718();
            int v129 = (char *)operator new(8 * v127);
            unsigned __int16 v124 = (unint64_t **)(v13 + 88);
            unint64_t v130 = (unint64_t *)&v129[8 * v126];
            *unint64_t v130 = v12;
            uint64_t v123 = (uint64_t)(v130 + 1);
            if (v122 != (unint64_t *)v125)
            {
LABEL_130:
              unint64_t v131 = (char *)(v122 - 1) - v125;
              if (v131 < 0x58)
              {
                a1 = v273;
                goto LABEL_139;
              }
              a1 = v273;
              if ((unint64_t)(v125 - v129) < 0x20) {
                goto LABEL_322;
              }
              uint64_t v132 = (v131 >> 3) + 1;
              uint64_t v133 = 8 * (v132 & 0x3FFFFFFFFFFFFFFCLL);
              __int16 v134 = &v122[v133 / 0xFFFFFFFFFFFFFFF8];
              unint64_t v130 = (unint64_t *)((char *)v130 - v133);
              unsigned __int16 v135 = &v129[8 * v126 - 16];
              uint64_t v136 = v122 - 2;
              uint64_t v137 = v132 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v138 = *(_OWORD *)v136;
                *((_OWORD *)v135 - 1) = *((_OWORD *)v136 - 1);
                *(_OWORD *)unsigned __int16 v135 = v138;
                v135 -= 32;
                v136 -= 4;
                v137 -= 4;
              }
              while (v137);
              uint64_t v122 = v134;
              if (v132 != (v132 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_322:
                do
                {
LABEL_139:
                  unint64_t v139 = *--v122;
                  *--unint64_t v130 = v139;
                }
                while (v122 != (unint64_t *)v125);
              }
              uint64_t v122 = *v124;
              *(void *)(v13 + 88) = v130;
              *(void *)(v13 + 96) = v123;
              *(void *)(v13 + 104) = &v129[8 * v279];
              if (v122) {
LABEL_141:
              }
                operator delete(v122);
LABEL_142:
              *(void *)(v13 + 96) = v123;
              unsigned int v119 = v104[2];
              *(double *)(a1 + 624) = *(double *)(a1 + 624) + 1.0;
              if (v283 == v119) {
                goto LABEL_273;
              }
              goto LABEL_143;
            }
          }
          else
          {
            int v129 = 0;
            unint64_t v130 = (unint64_t *)(8 * v126);
            *(void *)(8 * v126) = v12;
            uint64_t v123 = 8 * v126 + 8;
            if (v122 != (unint64_t *)v125) {
              goto LABEL_130;
            }
          }
          a1 = v273;
          *(void *)(v13 + 88) = v130;
          *(void *)(v13 + 96) = v123;
          *(void *)(v13 + 104) = &v129[8 * v279];
          if (v122) {
            goto LABEL_141;
          }
          goto LABEL_142;
        }
        *(double *)(a1 + 624) = *(double *)(a1 + 624) + 1.0;
        if (v283 == v119) {
          goto LABEL_273;
        }
LABEL_143:
        LODWORD(v293[0]) = 0;
        uint64_t v140 = *(void *)(a1 + 192);
        unint64_t v141 = (char *)(v140
                      + ((unint64_t)*(unsigned int *)(sub_AFAD84((uint64_t)v282, (unsigned int *)v293) + 4) << 6));
        LODWORD(v293[0]) = 0;
        uint64_t v142 = *(void *)(a1 + 192);
        uint64_t v143 = sub_AFAD84((uint64_t)v282, (unsigned int *)v293);
        sub_AFA9C0((uint64_t)v282, 0, v141, (unsigned char *)(v142 + ((unint64_t)*(unsigned int *)(v143 + 8) << 6)));
        unsigned int v144 = v277 + *(_DWORD *)(a1 + 96) * (v283 + 1);
        LODWORD(v293[0]) = v144;
        if (*(void *)(a1 + 184) == *(void *)(a1 + 144)) {
          goto LABEL_216;
        }
        unint64_t v145 = sub_AFAFE4((uint64_t)v282, (unsigned int *)v293);
        if (v145 == -1) {
          goto LABEL_216;
        }
        uint64_t v146 = *(void *)(a1 + 152);
        uint64_t v147 = v146 + 16 * (v145 / 0x30);
        uint64_t v148 = (unsigned __int8 *)(v147 + 10);
        int v149 = v145 % 0x30;
        if ((unsigned __int16)(v145 % 0x30) < 9u)
        {
          __int16 v151 = 0;
          goto LABEL_157;
        }
        uint64_t v150 = (unsigned __int16)(v145 % 0x30 - 9) >> 3;
        __int16 v151 = 0;
        if (!((unsigned __int16)(v145 % 0x30 - 9) >> 3))
        {
          unsigned __int16 v155 = v145 % 0x30;
          uint64_t v156 = (unsigned __int8 *)(v147 + 10);
          do
          {
LABEL_155:
            int v161 = *v156++;
            v151 += byte_20EC0B6[v161];
            v155 -= 8;
          }
          while (v155 > 8u);
          goto LABEL_156;
        }
        __int16 v152 = 0;
        uint64_t v153 = v150 + 1;
        uint64_t v154 = (v150 + 1) & 0x3FFE;
        unsigned __int16 v155 = v149 - 8 * v154;
        uint64_t v156 = &v148[v154];
        uint64_t v157 = (unsigned __int8 *)(v146 + 16 * (v145 / 0x30) + 11);
        uint64_t v158 = v154;
        do
        {
          uint64_t v159 = *(v157 - 1);
          int v160 = *v157;
          v157 += 2;
          v151 += byte_20EC0B6[v159];
          v152 += byte_20EC0B6[v160];
          v158 -= 2;
        }
        while (v158);
        v151 += v152;
        if (v153 != v154) {
          goto LABEL_155;
        }
LABEL_156:
        v148 += ((unsigned __int16)(v149 - 9) >> 3) + 1;
        LOBYTE(v149) = v155;
LABEL_157:
        uint64_t v162 = *(_DWORD ***)(a1 + 160);
        unsigned __int16 v163 = v151 + byte_20EC0B6[~(-1 << v149) & (unint64_t)*v148];
        if (*(unsigned __int16 *)(v147 + 8) != v163)
        {
          uint64_t v165 = (_DWORD *)(*(void *)v147 + 12 * v163);
          if ((_DWORD **)v147 != v162) {
            goto LABEL_165;
          }
          goto LABEL_173;
        }
        v147 += 16;
        if ((_DWORD **)v147 != v162)
        {
          while (1)
          {
            unsigned int v164 = (_DWORD **)v147;
            if (*(_WORD *)(v147 + 8)) {
              break;
            }
            v147 += 16;
            if (v164 + 2 == v162)
            {
              uint64_t v147 = *(void *)(a1 + 160);
              break;
            }
          }
          uint64_t v165 = *v164;
          if ((_DWORD **)v147 != v162)
          {
LABEL_165:
            if (*(void *)(a1 + 144))
            {
              while (*(_DWORD *)(a1 + 136) == *v165)
              {
                v165 += 3;
                if (v165 == (_DWORD *)(*(void *)v147 + 12 * *(unsigned __int16 *)(v147 + 8)))
                {
                  while (1)
                  {
                    v147 += 16;
                    if ((_DWORD **)v147 == v162) {
                      goto LABEL_216;
                    }
                    if (*(_WORD *)(v147 + 8))
                    {
                      uint64_t v165 = *(_DWORD **)v147;
                      break;
                    }
                  }
                }
                if ((_DWORD **)v147 == v162) {
                  break;
                }
              }
            }
          }
LABEL_173:
          if ((_DWORD **)v147 != v162)
          {
            int v168 = v165 + 1;
            int v167 = v165[1];
            int v166 = v168[1];
            int v169 = v166 - v167;
            if (v166 != v167)
            {
              uint64_t v170 = 0;
              unsigned int v171 = 0;
              do
              {
                int v172 = (_OWORD *)sub_AFC890(v282, v144, v171);
                long long v173 = v172[2];
                long long v174 = v172[3];
                long long v175 = v172[1];
                v293[0] = *v172;
                long long v294 = v173;
                long long v295 = v174;
                v293[1] = v175;
                v170 |= sub_B05AE8((uint64_t)v282, (uint64_t)v293, 0, 0, 1) & 0xFF00;
                ++v171;
              }
              while (v169 != v171);
              if (v170)
              {
                LODWORD(v293[0]) = 0;
                uint64_t v176 = *(void *)(a1 + 192);
                uint64_t v177 = v176
                     + ((unint64_t)*(unsigned int *)(sub_AFAD84((uint64_t)v282, (unsigned int *)v293) + 4) << 6);
                LODWORD(v293[0]) = 0;
                uint64_t v178 = *(void *)(a1 + 192);
                uint64_t v179 = sub_AFAD84((uint64_t)v282, (unsigned int *)v293);
                int v180 = (long long *)(v178 + ((unint64_t)*(unsigned int *)(v179 + 8) << 6));
                if ((long long *)v177 != v180)
                {
                  while (*(_DWORD *)(v177 + 28) != 0x7FFFFFFF)
                  {
                    v177 += 64;
                    if ((long long *)v177 == v180)
                    {
                      uint64_t v177 = v178 + ((unint64_t)*(unsigned int *)(v179 + 8) << 6);
                      goto LABEL_215;
                    }
                  }
                  if ((long long *)v177 != v180)
                  {
                    for (uint64_t j = (long long *)(v177 + 64); j != v180; j += 4)
                    {
                      if (*((_DWORD *)j + 7) != 0x7FFFFFFF)
                      {
                        long long v196 = *j;
                        long long v197 = j[1];
                        long long v198 = j[3];
                        *(_OWORD *)(v177 + 32) = j[2];
                        *(_OWORD *)(v177 + 48) = v198;
                        *(_OWORD *)uint64_t v177 = v196;
                        *(_OWORD *)(v177 + 16) = v197;
                        v177 += 64;
                      }
                    }
                  }
                }
LABEL_215:
                LODWORD(v293[0]) = 0;
                uint64_t v199 = *(void *)(a1 + 192);
                uint64_t v200 = sub_AFAD84((uint64_t)v282, (unsigned int *)v293);
                sub_AFA9C0((uint64_t)v282, 0, (char *)v177, (unsigned char *)(v199 + ((unint64_t)*(unsigned int *)(v200 + 8) << 6)));
              }
            }
          }
        }
LABEL_216:
        LODWORD(v293[0]) = 0;
        uint64_t v201 = *(void *)(a1 + 192);
        int v202 = (unsigned int *)(v201
                              + ((unint64_t)*(unsigned int *)(sub_AFAD84((uint64_t)v282, (unsigned int *)v293) + 4) << 6));
        LODWORD(v293[0]) = 0;
        uint64_t v203 = *(void *)(a1 + 192);
        int v204 = (unsigned int *)(v203
                              + ((unint64_t)*(unsigned int *)(sub_AFAD84((uint64_t)v282, (unsigned int *)v293) + 8) << 6));
        if (v202 != v204)
        {
          __int16 v205 = v285;
          do
          {
            unsigned int *v202 = v283;
            unsigned int v206 = v202[7];
            unsigned int v207 = v202[8];
            v202[3] = v206;
            v202[4] = -1;
            int v208 = *((_DWORD *)v205 + 2);
            int v209 = v208 / -10;
            int v210 = v208 / 10;
            int v211 = v208 % 10;
            if (v208 < 0) {
              char v212 = -5;
            }
            else {
              char v212 = 5;
            }
            int v213 = (char)(v212 + v211);
            v202[7] = v209 + v206 + (((-103 * v213) >> 15) & 1) + ((-103 * v213) >> 10);
            v202[8] = v207 + v210 + (((103 * v213) >> 15) & 1) + ((103 * v213) >> 10);
            v202 += 16;
          }
          while (v202 != v204);
        }
        if (*(unsigned char *)(a1 + 20))
        {
          int v278 = *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * *(_DWORD *)(a1 + 416) + 1;
          int v280 = *(_DWORD *)(a1 + 96);
          uint64_t v214 = *(void *)(a1 + 48);
          if (v214) {
            goto LABEL_224;
          }
LABEL_268:
          int v238 = 0x80000000;
LABEL_269:
          if (!sub_B05778(v282, 0, v276 + v280 * (v119 + 1), v280 * (v119 + 1) + 1, v278, v238)) {
            goto LABEL_273;
          }
          if (*(void *)(a1 + 304) <= (unint64_t)v119) {
            sub_A3E96C((uint64_t)v275, v119 + 1, 0);
          }
          uint64_t v242 = *v275;
          if ((*(void *)(*v275 + 8 * ((unint64_t)v119 >> 6)) & (1 << v119)) != 0)
          {
LABEL_273:
            unint64_t v9 = (unint64_t)v286;
            int v6 = (void *)((char *)v285 + 12);
            __int16 v285 = v6;
            if (v6 != v286) {
              goto LABEL_274;
            }
LABEL_298:
            int v6 = v287;
            unint64_t v10 = v288[0];
            __int16 v285 = v287;
            int v8 = 1;
            unsigned __int8 v289 = 1;
            if (*(unsigned char *)(v284 + 16)) {
              goto LABEL_299;
            }
            goto LABEL_10;
          }
          uint64_t v244 = *(char **)(a1 + 328);
          unint64_t v243 = *(void *)(a1 + 336);
          if ((unint64_t)v244 < v243)
          {
            *(_DWORD *)uint64_t v244 = v119;
            uint64_t v245 = (uint64_t)(v244 + 4);
            goto LABEL_297;
          }
          unint64_t v246 = (char *)*v270;
          uint64_t v247 = v244 - (unsigned char *)*v270;
          uint64_t v248 = v247 >> 2;
          unint64_t v249 = (v247 >> 2) + 1;
          if (v249 >> 62) {
            sub_2E00();
          }
          uint64_t v250 = v243 - (void)v246;
          if (v250 >> 1 > v249) {
            unint64_t v249 = v250 >> 1;
          }
          if ((unint64_t)v250 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v249 = 0x3FFFFFFFFFFFFFFFLL;
          }
          unint64_t v281 = v249;
          if (!v249)
          {
            uint64_t v251 = 0;
            int v252 = (unsigned int *)(4 * v248);
            *(_DWORD *)(4 * v248) = v119;
            uint64_t v245 = 4 * v248 + 4;
            if (v244 == v246) {
              goto LABEL_289;
            }
LABEL_286:
            unint64_t v253 = v244 - 4 - v246;
            unint64_t v254 = v281;
            if (v253 >= 0x2C)
            {
              unint64_t v255 = v244 - &v251[v247];
              a1 = v273;
              if (v255 >= 0x20)
              {
                uint64_t v256 = (v253 >> 2) + 1;
                uint64_t v257 = 4 * (v256 & 0x7FFFFFFFFFFFFFF8);
                uint64_t v258 = &v244[-v257];
                int v252 = (unsigned int *)((char *)v252 - v257);
                int v259 = &v251[4 * v248 - 16];
                unsigned int v260 = v244 - 16;
                uint64_t v261 = v256 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v262 = *(_OWORD *)v260;
                  *(v259 - 1) = *((_OWORD *)v260 - 1);
                  *int v259 = v262;
                  v259 -= 2;
                  v260 -= 32;
                  v261 -= 8;
                }
                while (v261);
                uint64_t v244 = v258;
                if (v256 == (v256 & 0x7FFFFFFFFFFFFFF8)) {
                  goto LABEL_295;
                }
              }
            }
            else
            {
              a1 = v273;
            }
            do
            {
              unsigned int v263 = *((_DWORD *)v244 - 1);
              v244 -= 4;
              *--int v252 = v263;
            }
            while (v244 != v246);
            goto LABEL_295;
          }
          if (v249 >> 62) {
            goto LABEL_318;
          }
          uint64_t v251 = operator new(4 * v249);
          int v252 = (unsigned int *)&v251[4 * v248];
          *int v252 = v119;
          uint64_t v245 = (uint64_t)(v252 + 1);
          if (v244 != v246) {
            goto LABEL_286;
          }
LABEL_289:
          a1 = v273;
          unint64_t v254 = v281;
LABEL_295:
          *(void *)(a1 + 320) = v252;
          *(void *)(a1 + 328) = v245;
          *(void *)(a1 + 336) = &v251[4 * v254];
          if (v246)
          {
            uint64_t v264 = v245;
            operator delete(v246);
            uint64_t v245 = v264;
            uint64_t v242 = *v275;
          }
LABEL_297:
          *(void *)(a1 + 328) = v245;
          *(void *)(v242 + 8 * ((unint64_t)v119 >> 6)) |= 1 << v119;
          unint64_t v9 = (unint64_t)v286;
          int v6 = (void *)((char *)v285 + 12);
          __int16 v285 = v6;
          if (v6 == v286) {
            goto LABEL_298;
          }
LABEL_274:
          int v8 = v289;
          unint64_t v10 = v288[0];
          if (*(unsigned char *)(v284 + 16))
          {
LABEL_299:
            if (v8) {
              unint64_t v265 = v10;
            }
            else {
              unint64_t v265 = v9;
            }
            if ((unint64_t)v6 < v265)
            {
              while (1)
              {
                unint64_t v267 = __ROR8__(*v6, 32);
                if (HIDWORD(v267) == 1 && (v267 + 3) < 2) {
                  break;
                }
                if (sub_2AB7E4(**(void **)(v284 + 4120)))
                {
                  LOBYTE(v8) = v289;
                  int v6 = v285;
                  unint64_t v9 = (unint64_t)v286;
                  break;
                }
                unint64_t v9 = (unint64_t)v286;
                int v6 = (void *)((char *)v285 + 12);
                __int16 v285 = v6;
                if (v6 == v286)
                {
                  int v6 = v287;
                  __int16 v285 = v287;
                  LOBYTE(v8) = 1;
                  unsigned __int8 v289 = 1;
                  if ((unint64_t)v287 >= v288[0]) {
                    break;
                  }
                }
                else
                {
                  LOBYTE(v8) = v289;
                  uint64_t v266 = &v286;
                  if (v289) {
                    uint64_t v266 = v288;
                  }
                  if ((unint64_t)v6 >= *v266) {
                    break;
                  }
                }
              }
              unint64_t v10 = v288[0];
            }
          }
LABEL_10:
          if ((_BYTE)v8) {
            unint64_t v9 = v10;
          }
          if ((unint64_t)v6 >= v9) {
            goto LABEL_3;
          }
          goto LABEL_13;
        }
        int v278 = -1;
        int v280 = *(_DWORD *)(a1 + 96);
        uint64_t v214 = *(void *)(a1 + 48);
        if (!v214) {
          goto LABEL_268;
        }
LABEL_224:
        unsigned int v215 = 0;
        unsigned int v216 = *(_DWORD *)(a1 + 100) + v274;
        while (2)
        {
          while (2)
          {
            LODWORD(v293[0]) = (v119 << *(_DWORD *)v214) | (v216 - v215);
            if (*(void *)(v214 + 88) == *(void *)(v214 + 48)
              || (unint64_t v217 = sub_AD72DC(v214 + 8, (unsigned int *)v293), v217 == -1))
            {
LABEL_253:
              int v238 = *(_DWORD *)(v214 + 4);
              v215 += 2;
              if (v238 != 0x7FFFFFFF || v215 > v216) {
                goto LABEL_269;
              }
              continue;
            }
            break;
          }
          uint64_t v218 = *(void *)(v214 + 56);
          uint64_t v219 = (_DWORD **)(v218 + 16 * (v217 / 0x30));
          uint64_t v220 = (unsigned __int8 *)v219 + 10;
          int v221 = v217 % 0x30;
          if ((unsigned __int16)(v217 % 0x30) >= 9u)
          {
            __int16 v222 = 0;
            uint64_t v223 = (unsigned __int16)(v217 % 0x30 - 9) >> 3;
            if ((unsigned __int16)(v217 % 0x30 - 9) >> 3)
            {
              __int16 v224 = 0;
              uint64_t v225 = v223 + 1;
              uint64_t v226 = (v223 + 1) & 0x3FFE;
              unsigned __int16 v227 = v221 - 8 * v226;
              int v228 = &v220[v226];
              uint64_t v229 = (unsigned __int8 *)(v218 + 16 * (v217 / 0x30) + 11);
              uint64_t v230 = v226;
              do
              {
                uint64_t v231 = *(v229 - 1);
                int v232 = *v229;
                v229 += 2;
                v222 += byte_20EBDB6[v231];
                v224 += byte_20EBDB6[v232];
                v230 -= 2;
              }
              while (v230);
              v222 += v224;
              if (v225 == v226)
              {
LABEL_236:
                v220 += ((unsigned __int16)(v221 - 9) >> 3) + 1;
                LOBYTE(v221) = v227;
                goto LABEL_237;
              }
            }
            else
            {
              unsigned __int16 v227 = v217 % 0x30;
              int v228 = (unsigned __int8 *)v219 + 10;
            }
            do
            {
              int v233 = *v228++;
              v222 += byte_20EBDB6[v233];
              v227 -= 8;
            }
            while (v227 > 8u);
            goto LABEL_236;
          }
          __int16 v222 = 0;
LABEL_237:
          int v234 = *(_DWORD ***)(v214 + 64);
          unsigned __int16 v235 = v222 + byte_20EBDB6[~(-1 << v221) & (unint64_t)*v220];
          if (*((unsigned __int16 *)v219 + 4) == v235)
          {
            v219 += 2;
            if (v219 == v234) {
              goto LABEL_253;
            }
            while (1)
            {
              uint64_t v236 = v219;
              if (*((_WORD *)v219 + 4)) {
                break;
              }
              v219 += 2;
              if (v236 + 2 == v234)
              {
                uint64_t v219 = *(_DWORD ***)(v214 + 64);
                break;
              }
            }
            uint64_t v237 = *v236;
            if (v219 == v234) {
              goto LABEL_253;
            }
          }
          else
          {
            uint64_t v237 = &(*v219)[2 * v235];
            if (v219 == v234) {
              goto LABEL_253;
            }
          }
          if (*(void *)(v214 + 48))
          {
            while (*(_DWORD *)(v214 + 40) == *v237)
            {
              v237 += 2;
              if (v237 == &(*v219)[2 * *((unsigned __int16 *)v219 + 4)])
              {
                while (1)
                {
                  v219 += 2;
                  if (v219 == v234) {
                    goto LABEL_253;
                  }
                  if (*((_WORD *)v219 + 4))
                  {
                    uint64_t v237 = *v219;
                    break;
                  }
                }
              }
              if (v219 == v234) {
                break;
              }
            }
          }
          BOOL v39 = v219 == v234;
          unsigned int v240 = v237 + 1;
          if (v39) {
            unsigned int v240 = (int *)(v214 + 4);
          }
          int v238 = *v240;
          v215 += 2;
          if (*v240 != 0x7FFFFFFF || v215 > v216) {
            goto LABEL_269;
          }
          continue;
        }
      }
LABEL_16:
      ++v11;
    }
  }
LABEL_316:
  double result = sub_72688((uint64_t)v290) + *(double *)(a1 + 568);
  *(double *)(a1 + 568) = result;
  return result;
}

uint64_t sub_B05510(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 100);
  if (v1)
  {
    uint64_t v2 = result;
    int v3 = 0;
    uint64_t v4 = (void *)(result + 104);
    do
    {
      unsigned int v15 = 0;
      uint64_t v5 = *(void *)(v2 + 192);
      int v6 = (char *)(v5 + ((unint64_t)*(unsigned int *)(sub_AFAD84((uint64_t)v4, &v15) + 4) << 6));
      unsigned int v15 = 0;
      uint64_t v7 = *(void *)(v2 + 192);
      uint64_t v8 = sub_AFAD84((uint64_t)v4, &v15);
      sub_AFA9C0((uint64_t)v4, 0, v6, (unsigned char *)(v7 + ((unint64_t)*(unsigned int *)(v8 + 8) << 6)));
      sub_B05D78(v4, v3 + *(_DWORD *)(v2 + 96) + *(_DWORD *)(v2 + 96) * *(_DWORD *)(v2 + 416) + 2, 0);
      unsigned int v15 = 0;
      uint64_t v9 = *(void *)(v2 + 192);
      uint64_t v10 = v9 + ((unint64_t)*(unsigned int *)(sub_AFAD84((uint64_t)v4, &v15) + 4) << 6);
      unsigned int v15 = 0;
      uint64_t v11 = *(void *)(v2 + 192);
      double result = sub_AFAD84((uint64_t)v4, &v15);
      uint64_t v12 = v11 + ((unint64_t)*(unsigned int *)(result + 8) << 6);
      if (v10 != v12)
      {
        double v13 = *(double *)(v2 + 592);
        uint64_t v14 = *(void *)(v2 + 584);
        do
        {
          double v13 = v13 + 1.0;
          v14 += *(int *)(v10 + 28);
          v10 += 64;
        }
        while (v10 != v12);
        *(double *)(v2 + 592) = v13;
        *(void *)(v2 + 584) = v14;
      }
      ++v3;
    }
    while (v3 != v1);
  }
  return result;
}

uint64_t sub_B05648(void *a1, long long *a2, unsigned int a3, int a4, int a5)
{
  unsigned int v28 = a3;
  sub_AFC6C4(a1, &v28, v24);
  uint64_t v10 = a1[6];
  uint64_t v11 = a1[7];
  unsigned int v15 = a1;
  uint64_t v16 = v10;
  uint64_t v17 = v11;
  uint64_t v18 = v11;
  uint64_t v19 = 0;
  uint64_t v20 = v10;
  uint64_t v21 = v11;
  uint64_t v22 = v11;
  uint64_t v23 = 0;
  sub_AE47A0(&v15);
  if (v24[1] == v16 && v25 == v17 && v26 == v18 && (v26 == v25 || v27 == v19)
    || *(_DWORD *)(v27 + 8) == *(_DWORD *)(v27 + 4))
  {
    sub_AFBE70((uint64_t)a1, a3, a2);
    return 1;
  }
  else
  {
    __int16 v13 = sub_B05AE8((uint64_t)a1, (uint64_t)a2, a3, a4, a5);
    char v14 = v13;
    if ((v13 & 0x100) != 0) {
      sub_AFC5B8((uint64_t)a1, a3);
    }
    return v14 & 1;
  }
}

BOOL sub_B05778(void *a1, unsigned int a2, unsigned int a3, unsigned int a4, int a5, int a6)
{
  v56[0] = a2;
  sub_AFC6C4(a1, v56, v53);
  uint64_t v12 = a1[6];
  uint64_t v13 = a1[7];
  uint64_t v45 = a1;
  *(void *)&long long v46 = v12;
  *((void *)&v46 + 1) = v13;
  uint64_t v47 = v13;
  uint64_t v48 = 0;
  uint64_t v49 = v12;
  uint64_t v50 = v13;
  uint64_t v51 = v13;
  uint64_t v52 = 0;
  sub_AE47A0(&v45);
  if (*(_OWORD *)&v53[8] == v46
    && *(void *)&v53[24] == v47
    && (*(void *)&v53[24] == *(void *)&v53[16] || (void)v54 == v48))
  {
    goto LABEL_7;
  }
  int v14 = *(_DWORD *)(v54 + 4);
  int v15 = *(_DWORD *)(v54 + 8);
  int v16 = v15 - v14;
  if (v15 == v14) {
    goto LABEL_7;
  }
  if (a6 == 0x7FFFFFFF)
  {
    unsigned int v17 = 0;
    do
      sub_AFC890(a1, a2, v17++);
    while (v16 != v17);
LABEL_7:
    LOBYTE(v18) = 0;
    return v18 != 0;
  }
  unsigned int v43 = a3;
  unsigned int v44 = a4;
  if (a5 == -1)
  {
    __int16 v18 = 0;
    unsigned int v20 = 0;
    do
    {
      uint64_t v21 = (_OWORD *)sub_AFC890(a1, a2, v20);
      long long v22 = v21[2];
      long long v23 = v21[3];
      long long v24 = v21[1];
      *(_OWORD *)int v53 = *v21;
      *(_OWORD *)&v53[16] = v24;
      long long v54 = v22;
      long long v55 = v23;
      if (SHIDWORD(v24) >= a6)
      {
        __int16 v25 = sub_B05AE8((uint64_t)a1, (uint64_t)v53, a4, 0, 1);
        if ((_BYTE)v25)
        {
          sub_B05AE8((uint64_t)a1, (uint64_t)v53, a3, 1, 1);
          *(void *)(v26 + 52) = -1;
          *(_DWORD *)(v26 + 60) = 0x7FFFFFFF;
        }
        v18 |= v25 & 0xFF00 | v25;
      }
      ++v20;
    }
    while (v16 != v20);
  }
  else
  {
    __int16 v18 = 0;
    unsigned int v27 = 0;
    do
    {
      uint64_t v30 = (_OWORD *)sub_AFC890(a1, a2, v27);
      long long v31 = v30[2];
      long long v32 = v30[3];
      long long v33 = v30[1];
      *(_OWORD *)int v53 = *v30;
      *(_OWORD *)&v53[16] = v33;
      long long v54 = v31;
      long long v55 = v32;
      if (SHIDWORD(v33) >= a6)
      {
        LODWORD(v45) = a5;
        uint64_t v34 = a1[11];
        uint64_t v35 = v34 + ((unint64_t)*(unsigned int *)(sub_AFAD84((uint64_t)a1, (unsigned int *)&v45) + 4) << 6);
        LODWORD(v45) = a5;
        uint64_t v36 = a1[11];
        uint64_t v37 = v36 + ((unint64_t)*(unsigned int *)(sub_AFAD84((uint64_t)a1, (unsigned int *)&v45) + 8) << 6);
        if (v35 == v37)
        {
LABEL_35:
          unint64_t v41 = sub_B05AE8((uint64_t)a1, (uint64_t)v53, v44, 0, 1);
          unint64_t v29 = v41 >> 8;
          __int16 v28 = v41;
          if ((_BYTE)v41)
          {
            sub_B05AE8((uint64_t)a1, (uint64_t)v53, v43, 1, 1);
            *(void *)(v42 + 52) = -1;
            *(_DWORD *)(v42 + 60) = 0x7FFFFFFF;
          }
        }
        else
        {
          while (1)
          {
            int v38 = *(_DWORD *)(v35 + 28);
            if (v38 != 0x7FFFFFFF && v38 >= *(_DWORD *)&v53[28] && *(_DWORD *)(v35 + 32) <= (int)v54)
            {
              unsigned int v40 = *(_DWORD *)(v35 + 36);
              if (v40 <= DWORD1(v54)
                && (v40 != DWORD1(v54)
                 || v38 != *(_DWORD *)&v53[28]
                 || *(_DWORD *)(v35 + 44) - 10 * v38 <= HIDWORD(v54) - 10 * *(_DWORD *)&v53[28])
                && (*(unsigned __int8 *)(v35 + 48) & ~v55) == 0)
              {
                break;
              }
            }
            v35 += 64;
            if (v35 == v37) {
              goto LABEL_35;
            }
          }
          __int16 v28 = 0;
          LOWORD(v29) = 0;
        }
        __int16 v18 = v28 | v18 | v18 & 0xFF00 | ((_WORD)v29 << 8);
      }
      ++v27;
    }
    while (v27 != v16);
  }
  if ((v18 & 0xFF00) != 0)
  {
    sub_AFC5B8((uint64_t)a1, v43);
    sub_AFC5B8((uint64_t)a1, v44);
  }
  return v18 != 0;
}

unint64_t sub_B05AE8(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int a5)
{
  unsigned int v41 = a3;
  sub_AFC6C4((void *)a1, &v41, v37);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v28 = a1;
  uint64_t v29 = v10;
  uint64_t v30 = v11;
  uint64_t v31 = v11;
  uint64_t v32 = 0;
  uint64_t v33 = v10;
  uint64_t v34 = v11;
  uint64_t v35 = v11;
  uint64_t v36 = 0;
  sub_AE47A0(&v28);
  if (v37[1] == v29 && v38 == v30 && v39 == v31 && (v39 == v38 || v40 == v32)
    || *(_DWORD *)(v40 + 8) == *(_DWORD *)(v40 + 4))
  {
    unsigned __int8 v12 = 0;
    uint64_t v13 = sub_AFBE70(a1, a3, (long long *)a2);
    if (!a5) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  LODWORD(v37[0]) = a3;
  uint64_t v14 = *(void *)(a1 + 88);
  uint64_t v15 = v14 + ((unint64_t)*(unsigned int *)(sub_AFAD84(a1, (unsigned int *)v37) + 4) << 6);
  LODWORD(v37[0]) = a3;
  uint64_t v16 = *(void *)(a1 + 88);
  uint64_t v17 = v16 + ((unint64_t)*(unsigned int *)(sub_AFAD84(a1, (unsigned int *)v37) + 8) << 6);
  if (v15 != v17)
  {
    unsigned __int8 v12 = 0;
    int v18 = *(unsigned __int8 *)(a2 + 48);
    while (1)
    {
      int v19 = *(_DWORD *)(v15 + 28);
      if (v19 != 0x7FFFFFFF)
      {
        int v20 = *(_DWORD *)(a2 + 28);
        if (v19 >= v20 && *(_DWORD *)(v15 + 32) <= *(_DWORD *)(a2 + 32))
        {
          unsigned int v21 = *(_DWORD *)(a2 + 36);
          unsigned int v22 = *(_DWORD *)(v15 + 36);
          if (v22 <= v21
            && (v22 != v21 || v19 != v20 || *(_DWORD *)(v15 + 44) - 10 * v19 <= *(_DWORD *)(a2 + 44) - 10 * v20)
            && (*(unsigned __int8 *)(v15 + 48) & ~*(unsigned __int8 *)(a2 + 48)) == 0)
          {
            uint64_t v26 = 0;
            return v26 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v12 << 8);
          }
        }
        if (v20 >= v19 && *(_DWORD *)(a2 + 32) <= *(_DWORD *)(v15 + 32))
        {
          unsigned int v23 = *(_DWORD *)(v15 + 36);
          unsigned int v24 = *(_DWORD *)(a2 + 36);
          if (v24 <= v23
            && (v24 != v23 || v20 != v19 || *(_DWORD *)(a2 + 44) - 10 * v20 <= *(_DWORD *)(v15 + 44) - 10 * v19)
            && (v18 & ~*(unsigned __int8 *)(v15 + 48)) == 0)
          {
            *(_DWORD *)(v15 + 28) = 0x7FFFFFFF;
            unsigned __int8 v12 = 1;
          }
        }
      }
      v15 += 64;
      if (v15 == v17) {
        goto LABEL_27;
      }
    }
  }
  unsigned __int8 v12 = 0;
LABEL_27:
  uint64_t v13 = sub_AFBE70(a1, a3, (long long *)a2);
  if (a5)
  {
LABEL_28:
    *(void *)(v13 + 52) = -1;
    *(_DWORD *)(v13 + 60) = 0x7FFFFFFF;
  }
LABEL_29:
  if (a4)
  {
    int v25 = *(_DWORD *)(a1 + 136);
    *(_DWORD *)(a1 + 136) = v25 + 1;
    *(_DWORD *)(v13 + 24) = v25;
    *(_DWORD *)(v13 + 20) = *(_DWORD *)(a2 + 24);
  }
  uint64_t v26 = 1;
  return v26 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v12 << 8);
}

BOOL sub_B05D78(void *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v31 = a2;
  sub_AFC6C4(a1, &v31, v28);
  uint64_t v6 = a1[6];
  uint64_t v7 = a1[7];
  int v20 = a1;
  *(void *)&long long v21 = v6;
  *((void *)&v21 + 1) = v7;
  uint64_t v22 = v7;
  uint64_t v23 = 0;
  uint64_t v24 = v6;
  uint64_t v25 = v7;
  uint64_t v26 = v7;
  uint64_t v27 = 0;
  sub_AE47A0(&v20);
  if (*(_OWORD *)&v28[8] == v21
    && *(void *)&v28[24] == v22
    && (*(void *)&v28[24] == *(void *)&v28[16] || (void)v29 == v23))
  {
    LOBYTE(v10) = 0;
  }
  else
  {
    int v8 = *(_DWORD *)(v29 + 4);
    int v9 = *(_DWORD *)(v29 + 8);
    __int16 v10 = 0;
    int v11 = v9 - v8;
    if (v9 != v8)
    {
      unsigned int v12 = 0;
      do
      {
        uint64_t v13 = (long long *)sub_AFC890(a1, a2, v12);
        long long v14 = v13[3];
        long long v16 = *v13;
        long long v15 = v13[1];
        long long v29 = v13[2];
        long long v30 = v14;
        *(_OWORD *)uint64_t v28 = v16;
        *(_OWORD *)&v28[16] = v15;
        __int16 v17 = sub_B05AE8((uint64_t)a1, (uint64_t)v28, a3, 0, 1);
        uint64_t v18 = (unsigned __int16)(v17 | v10) & 0xFF00;
        __int16 v10 = v17 | v10 | v18;
        ++v12;
      }
      while (v11 != v12);
      if (v18) {
        sub_AFC5B8((uint64_t)a1, a3);
      }
    }
  }
  return v10 != 0;
}

unint64_t sub_B05ECC(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4 = a1;
  unsigned int v363 = a3;
  *(double *)(a1 + 608) = *(double *)(a1 + 608) + 1.0;
  unint64_t v5 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 40) + 88), a3);
  unsigned int v323 = *(_DWORD *)sub_A3F74C((void *)(v4 + 344), &v363);
  unint64_t result = (unint64_t)sub_A40514(&v361, *(void *)(v4 + 24), v5);
  uint64_t v7 = v361;
  if ((unint64_t)v361 < v362)
  {
    int v331 = (void *)(v4 + 104);
    uint64_t v332 = v4 + 424;
    int v320 = ~a2;
    int v321 = a2 + 2;
    uint64_t v319 = (uint64_t *)(v4 + 248);
    int v329 = a2 + 1;
    uint64_t v333 = v4;
    do
    {
      *(double *)(v4 + 616) = *(double *)(v4 + 616) + 1.0;
      uint64_t v330 = *(unsigned int *)v7;
      LODWORD(v349) = 0;
      uint64_t v8 = *(void *)(v4 + 192);
      int v9 = (char *)(v8 + ((unint64_t)*(unsigned int *)(sub_AFAD84((uint64_t)v331, (unsigned int *)&v349) + 4) << 6));
      LODWORD(v349) = 0;
      uint64_t v10 = *(void *)(v4 + 192);
      uint64_t v11 = sub_AFAD84((uint64_t)v331, (unsigned int *)&v349);
      sub_AFA9C0((uint64_t)v331, 0, v9, (unsigned char *)(v10 + ((unint64_t)*(unsigned int *)(v11 + 8) << 6)));
      unint64_t result = sub_A1E9A0((uint64_t)&v349, *(void *)(v4 + 24), v5, v323, 0, 1);
      unint64_t v13 = v352;
      unsigned int v12 = v353;
      while ((unint64_t)v12 >= v13 && (unint64_t)v12 < v354)
      {
        uint64_t v14 = 0;
        unint64_t v15 = __ROR8__(*v12, 32);
        uint64_t v16 = *(void *)(v4 + 32);
        uint64_t v17 = *(void *)(v16 + 72) - 1;
        unint64_t v18 = 0xC4CEB9FE1A85EC53
            * ((0xFF51AFD7ED558CCDLL * (v15 ^ (v15 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v15 ^ (v15 >> 33))) >> 33));
        unint64_t v19 = v18 ^ (v18 >> 33);
        uint64_t v20 = *(void *)(v16 + 48);
        uint64_t v21 = v20 + 11;
        uint64_t v22 = -1;
        for (unint64_t i = v19; ; unint64_t i = v14 + v24)
        {
          uint64_t v24 = i & v17;
          unint64_t v25 = (i & v17) / 0x30;
          unint64_t v26 = v24 - 48 * v25;
          if (((*(unsigned __int8 *)(v20 + 16 * v25 + (v26 >> 3) + 10) >> (v26 & 7)) & 1) == 0)
          {
            if (v22 == -1) {
              unint64_t v62 = v24;
            }
            else {
              unint64_t v62 = v22;
            }
            if (!sub_AD2F40(v16, 1)) {
              goto LABEL_92;
            }
            goto LABEL_49;
          }
          uint64_t v27 = *(void *)(v20 + 16 * v25);
          if (!*(void *)(v16 + 40)) {
            break;
          }
          uint64_t v28 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
          if ((unsigned __int16)(v24 - 48 * v25) < 9u)
          {
            __int16 v29 = 0;
            LOBYTE(v34) = v24 - 48 * v25;
            goto LABEL_23;
          }
          __int16 v29 = 0;
          uint64_t v30 = (unsigned __int16)(v24 - 48 * v25 - 9) >> 3;
          if ((unsigned __int16)(v24 - 48 * v25 - 9) >> 3)
          {
            __int16 v31 = 0;
            uint64_t v32 = v30 + 1;
            uint64_t v33 = (v30 + 1) & 0x3FFE;
            unsigned __int16 v34 = v26 - 8 * v33;
            uint64_t v35 = &v28[v33];
            uint64_t v36 = (unsigned __int8 *)(v21 + 16 * v25);
            uint64_t v37 = v33;
            do
            {
              uint64_t v38 = *(v36 - 1);
              int v39 = *v36;
              v36 += 2;
              v29 += byte_20EBFB6[v38];
              v31 += byte_20EBFB6[v39];
              v37 -= 2;
            }
            while (v37);
            v29 += v31;
            if (v32 == v33) {
              goto LABEL_22;
            }
          }
          else
          {
            unsigned __int16 v34 = v24 - 48 * v25;
            uint64_t v35 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
          }
          do
          {
            int v40 = *v35++;
            v29 += byte_20EBFB6[v40];
            v34 -= 8;
          }
          while (v34 > 8u);
LABEL_22:
          v28 += ((unsigned __int16)(v26 - 9) >> 3) + 1;
LABEL_23:
          unsigned int v41 = (_DWORD *)(v27
                         + 12
                         * (unsigned __int16)(v29 + byte_20EBFB6[~(-1 << v34) & (unint64_t)*v28]));
          if (*(_DWORD *)(v16 + 36) != v41[1] || *(_DWORD *)(v16 + 32) != *v41) {
            break;
          }
          if (v22 == -1) {
            uint64_t v22 = v24;
          }
LABEL_10:
          ++v14;
        }
        unsigned int v43 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
        if ((unsigned __int16)(v24 - 48 * v25) < 9u)
        {
          __int16 v44 = 0;
          long long v55 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
          LOBYTE(v49) = v24 - 48 * v25;
          goto LABEL_37;
        }
        __int16 v44 = 0;
        uint64_t v45 = (unsigned __int16)(v24 - 48 * v25 - 9) >> 3;
        if (!((unsigned __int16)(v24 - 48 * v25 - 9) >> 3))
        {
          unsigned __int16 v49 = v24 - 48 * v25;
          uint64_t v50 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
          do
          {
LABEL_35:
            int v56 = *v50++;
            v44 += byte_20EBFB6[v56];
            v49 -= 8;
          }
          while (v49 > 8u);
          goto LABEL_36;
        }
        __int16 v46 = 0;
        uint64_t v47 = v45 + 1;
        uint64_t v48 = (v45 + 1) & 0x3FFE;
        unsigned __int16 v49 = v26 - 8 * v48;
        uint64_t v50 = &v43[v48];
        uint64_t v51 = (unsigned __int8 *)(v21 + 16 * v25);
        uint64_t v52 = v48;
        do
        {
          uint64_t v53 = *(v51 - 1);
          int v54 = *v51;
          v51 += 2;
          v44 += byte_20EBFB6[v53];
          v46 += byte_20EBFB6[v54];
          v52 -= 2;
        }
        while (v52);
        v44 += v46;
        if (v47 != v48) {
          goto LABEL_35;
        }
LABEL_36:
        long long v55 = &v43[((unsigned __int16)(v26 - 9) >> 3) + 1];
LABEL_37:
        if (v15 != *(void *)(v27
                              + 12
                              * (unsigned __int16)(v44
                                                 + byte_20EBFB6[~(-1 << v49) & (unint64_t)*v55])))
          goto LABEL_10;
        if (v24 != -1)
        {
          if ((unsigned __int16)(v24 - 48 * v25) < 9u)
          {
            __int16 v59 = 0;
            uint64_t v4 = v333;
          }
          else
          {
            if ((((_WORD)v24 - 48 * (_WORD)v25 - 8) & 0xFFF8) != 0) {
              __int16 v57 = 8;
            }
            else {
              __int16 v57 = v24 - 48 * v25 - 8;
            }
            unsigned __int16 v58 = ~v57 + v24 - 48 * v25;
            uint64_t v4 = v333;
            __int16 v59 = 0;
            if (v58 < 8u)
            {
              unsigned __int16 v60 = v26;
              uint64_t v61 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
              goto LABEL_97;
            }
            __int16 v107 = 0;
            uint64_t v108 = (v58 >> 3) + 1;
            unsigned __int16 v60 = v26 - 8 * (((v58 >> 3) + 1) & 0x3FFE);
            uint64_t v61 = &v43[v108 & 0x3FFE];
            uint64_t v109 = (unsigned __int8 *)(v20 + 16 * v25 + 11);
            uint64_t v110 = v108 & 0x3FFE;
            do
            {
              uint64_t v111 = *(v109 - 1);
              int v112 = *v109;
              v109 += 2;
              v59 += byte_20EBFB6[v111];
              v107 += byte_20EBFB6[v112];
              v110 -= 2;
            }
            while (v110);
            v59 += v107;
            if ((v108 & 0x3FFE) != v108)
            {
              do
              {
LABEL_97:
                int v113 = *v61++;
                v59 += byte_20EBFB6[v113];
                v60 -= 8;
              }
              while (v60 > 8u);
            }
            v43 += ((unsigned __int16)(v26 - 9) >> 3) + 1;
            LOBYTE(v26) = v60;
          }
          uint64_t v114 = *(void *)(v16 + 56);
          unsigned __int16 v115 = v59 + byte_20EBFB6[~(-1 << v26) & (unint64_t)*v43];
          uint64_t v116 = v20 + 16 * v25;
          if (*(unsigned __int16 *)(v116 + 8) != v115 || v116 + 16 == v114)
          {
            __int16 v106 = (_DWORD *)(v27 + 12 * v115);
          }
          else
          {
            uint64_t v118 = v116 + 32;
            do
            {
              if (*(_WORD *)(v118 - 8)) {
                BOOL v119 = 1;
              }
              else {
                BOOL v119 = v118 == v114;
              }
              v118 += 16;
            }
            while (!v119);
            __int16 v106 = *(_DWORD **)(v118 - 32);
          }
          goto LABEL_111;
        }
        unint64_t v62 = -1;
        if (!sub_AD2F40(v16, 1))
        {
LABEL_92:
          unint64_t v364 = v15;
          int v365 = -1;
          sub_AD3484(v16, (uint64_t *)&v364, v62, &v366);
          __int16 v106 = v368;
          uint64_t v4 = v333;
          goto LABEL_111;
        }
LABEL_49:
        uint64_t v63 = 0;
        unint64_t v364 = v15;
        int v365 = -1;
        uint64_t v64 = *(void *)(v16 + 72) - 1;
        uint64_t v65 = *(void *)(v16 + 48);
        uint64_t v66 = v65 + 11;
        uint64_t v67 = -1;
        while (2)
        {
          uint64_t v68 = v19 & v64;
          unint64_t v69 = (v19 & v64) / 0x30;
          unint64_t v70 = (v19 & v64) % 0x30;
          if (((*(unsigned __int8 *)(v65 + 16 * v69 + (v70 >> 3) + 10) >> (v70 & 7)) & 1) == 0)
          {
            if (v67 == -1) {
              unint64_t v105 = v19 & v64;
            }
            else {
              unint64_t v105 = v67;
            }
            goto LABEL_90;
          }
          uint64_t v71 = *(void *)(v16 + 40);
          uint64_t v72 = *(void *)(v65 + 16 * v69);
          if (!v71) {
            break;
          }
          __int16 v73 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
          if ((unsigned __int16)((v19 & v64) % 0x30) < 9u)
          {
            __int16 v74 = 0;
            LOBYTE(v75) = (v19 & v64) % 0x30;
            goto LABEL_65;
          }
          __int16 v74 = 0;
          uint64_t v75 = (unsigned __int16)(v68 - 48 * v69 - 9) >> 3;
          if (!((unsigned __int16)(v68 - 48 * v69 - 9) >> 3))
          {
            LODWORD(v75) = (v19 & v64) % 0x30;
            uint64_t v79 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
            do
            {
LABEL_63:
              int v84 = *v79++;
              v74 += byte_20EBFB6[v84];
              LOWORD(v75) = v75 - 8;
            }
            while ((unsigned __int16)v75 > 8u);
            goto LABEL_64;
          }
          __int16 v76 = 0;
          uint64_t v77 = v75 + 1;
          uint64_t v78 = (v75 + 1) & 0x3FFE;
          LOWORD(v75) = v70 - 8 * v78;
          uint64_t v79 = &v73[v78];
          int v80 = (unsigned __int8 *)(v66 + 16 * v69);
          uint64_t v81 = v78;
          do
          {
            uint64_t v82 = *(v80 - 1);
            int v83 = *v80;
            v80 += 2;
            v74 += byte_20EBFB6[v82];
            v76 += byte_20EBFB6[v83];
            v81 -= 2;
          }
          while (v81);
          v74 += v76;
          if (v77 != v78) {
            goto LABEL_63;
          }
LABEL_64:
          v73 += ((unsigned __int16)(v70 - 9) >> 3) + 1;
LABEL_65:
          __int16 v85 = (_DWORD *)(v72
                         + 12
                         * (unsigned __int16)(v74 + byte_20EBFB6[~(-1 << v75) & (unint64_t)*v73]));
          if (*(_DWORD *)(v16 + 36) == v85[1] && *(_DWORD *)(v16 + 32) == *v85)
          {
            if (v67 == -1) {
              uint64_t v67 = v19 & v64;
            }
LABEL_52:
            unint64_t v19 = ++v63 + v68;
            continue;
          }
          break;
        }
        __int16 v87 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
        if ((unsigned __int16)((v19 & v64) % 0x30) < 9u)
        {
          __int16 v88 = 0;
          __int16 v98 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
          LOBYTE(v89) = (v19 & v64) % 0x30;
          goto LABEL_79;
        }
        __int16 v88 = 0;
        uint64_t v89 = (unsigned __int16)(v68 - 48 * v69 - 9) >> 3;
        if (!((unsigned __int16)(v68 - 48 * v69 - 9) >> 3))
        {
          LODWORD(v89) = (v19 & v64) % 0x30;
          uint64_t v93 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
          do
          {
LABEL_77:
            int v99 = *v93++;
            v88 += byte_20EBFB6[v99];
            LOWORD(v89) = v89 - 8;
          }
          while ((unsigned __int16)v89 > 8u);
          goto LABEL_78;
        }
        __int16 v90 = 0;
        uint64_t v91 = v89 + 1;
        uint64_t v92 = (v89 + 1) & 0x3FFE;
        LOWORD(v89) = v70 - 8 * v92;
        uint64_t v93 = &v87[v92];
        uint64_t v94 = (unsigned __int8 *)(v66 + 16 * v69);
        uint64_t v95 = v92;
        do
        {
          uint64_t v96 = *(v94 - 1);
          int v97 = *v94;
          v94 += 2;
          v88 += byte_20EBFB6[v96];
          v90 += byte_20EBFB6[v97];
          v95 -= 2;
        }
        while (v95);
        v88 += v90;
        if (v91 != v92) {
          goto LABEL_77;
        }
LABEL_78:
        __int16 v98 = &v87[((unsigned __int16)(v70 - 9) >> 3) + 1];
LABEL_79:
        if (v15 != *(void *)(v72
                              + 12
                              * (unsigned __int16)(v88
                                                 + byte_20EBFB6[~(-1 << v89) & (unint64_t)*v98])))
          goto LABEL_52;
        if (v68 == -1)
        {
          unint64_t v105 = -1;
LABEL_90:
          uint64_t v4 = v333;
          sub_AD3484(v16, (uint64_t *)&v364, v105, &v366);
          __int16 v106 = v368;
          goto LABEL_111;
        }
        uint64_t v4 = v333;
        if ((unsigned __int16)((v19 & v64) % 0x30) < 9u)
        {
          __int16 v102 = 0;
        }
        else
        {
          if ((((_WORD)v68 - 48 * (_WORD)v69 - 8) & 0xFFF8) != 0) {
            __int16 v100 = 8;
          }
          else {
            __int16 v100 = v68 - 48 * v69 - 8;
          }
          unsigned __int16 v101 = ~v100 + v68 - 48 * v69;
          if (v101 < 8u)
          {
            __int16 v102 = 0;
            unsigned __int16 v103 = v70;
            unsigned int v104 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
            goto LABEL_179;
          }
          __int16 v176 = 0;
          __int16 v177 = 0;
          uint64_t v178 = (v101 >> 3) + 1;
          unsigned __int16 v103 = v70 - 8 * (((v101 >> 3) + 1) & 0x3FFE);
          unsigned int v104 = &v87[v178 & 0x3FFE];
          uint64_t v179 = (unsigned __int8 *)(v65 + 16 * v69 + 11);
          uint64_t v180 = v178 & 0x3FFE;
          do
          {
            uint64_t v181 = *(v179 - 1);
            int v182 = *v179;
            v179 += 2;
            v176 += byte_20EBFB6[v181];
            v177 += byte_20EBFB6[v182];
            v180 -= 2;
          }
          while (v180);
          __int16 v102 = v177 + v176;
          if ((v178 & 0x3FFE) != v178)
          {
            do
            {
LABEL_179:
              int v183 = *v104++;
              v102 += byte_20EBFB6[v183];
              v103 -= 8;
            }
            while (v103 > 8u);
          }
          v87 += ((unsigned __int16)(v70 - 9) >> 3) + 1;
          LOBYTE(v70) = v103;
        }
        uint64_t v184 = v65 + 16 * v69;
        uint64_t v185 = *(_DWORD ***)(v16 + 56);
        unsigned __int16 v186 = v102 + byte_20EBFB6[~(-1 << v70) & (unint64_t)*v87];
        __int16 v106 = (_DWORD *)(v72 + 12 * v186);
        if (*(unsigned __int16 *)(v184 + 8) == v186)
        {
          uint64_t v187 = v184 + 16;
          if ((_DWORD **)(v184 + 16) != v185)
          {
            while (1)
            {
              int v188 = (_DWORD **)v187;
              if (*(_WORD *)(v187 + 8)) {
                break;
              }
              v187 += 16;
              if (v188 + 2 == v185)
              {
                uint64_t v184 = *(void *)(v16 + 56);
                goto LABEL_187;
              }
            }
            uint64_t v184 = v187;
LABEL_187:
            __int16 v106 = *v188;
            goto LABEL_188;
          }
        }
        else
        {
LABEL_188:
          if ((_DWORD **)v184 != v185 && v71)
          {
            do
            {
              if (*(_DWORD *)(v16 + 36) != v106[1] || *(_DWORD *)(v16 + 32) != *v106) {
                break;
              }
              v106 += 3;
              if (v106 == (_DWORD *)(*(void *)v184 + 12 * *(unsigned __int16 *)(v184 + 8)))
              {
                v184 += 16;
                if ((_DWORD **)v184 != v185)
                {
                  do
                  {
                    if (*(_WORD *)(v184 + 8))
                    {
                      __int16 v106 = *(_DWORD **)v184;
                      goto LABEL_192;
                    }
                    v184 += 16;
                  }
                  while ((_DWORD **)v184 != v185);
                  __int16 v106 = *(_DWORD **)(v184 - 16);
                }
                break;
              }
LABEL_192:
              ;
            }
            while ((_DWORD **)v184 != v185);
          }
        }
LABEL_111:
        unsigned int v120 = v106[2];
        if (v120 != -1) {
          goto LABEL_135;
        }
        int v121 = *(_DWORD *)(v16 + 112);
        *(_DWORD *)(v16 + 112) = v121 + 1;
        v106[2] = v121;
        uint64_t v123 = *(unint64_t **)(v16 + 96);
        unint64_t v122 = *(void *)(v16 + 104);
        if ((unint64_t)v123 < v122)
        {
          *uint64_t v123 = v15;
          uint64_t v124 = (uint64_t)(v123 + 1);
          goto LABEL_134;
        }
        uint64_t v125 = (unint64_t **)(v16 + 88);
        uint64_t v126 = *(char **)(v16 + 88);
        uint64_t v127 = ((char *)v123 - v126) >> 3;
        unint64_t v128 = v127 + 1;
        if ((unint64_t)(v127 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v129 = v122 - (void)v126;
        if (v129 >> 2 > v128) {
          unint64_t v128 = v129 >> 2;
        }
        if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v128 = 0x1FFFFFFFFFFFFFFFLL;
        }
        if (!v128)
        {
          unint64_t v130 = 0;
          unint64_t v131 = 0;
          uint64_t v132 = (unint64_t *)(8 * v127);
          *(void *)(8 * v127) = v15;
          uint64_t v124 = 8 * v127 + 8;
          if (v123 != (unint64_t *)v126) {
            goto LABEL_122;
          }
LABEL_125:
          *(void *)(v16 + 88) = v132;
          *(void *)(v16 + 96) = v124;
          *(void *)(v16 + 104) = &v131[8 * v130];
          uint64_t v4 = v333;
          if (v123) {
            goto LABEL_133;
          }
          goto LABEL_134;
        }
        if (v128 >> 61) {
          sub_188D718();
        }
        unint64_t v130 = v128;
        unint64_t v131 = (char *)operator new(8 * v128);
        uint64_t v125 = (unint64_t **)(v16 + 88);
        uint64_t v132 = (unint64_t *)&v131[8 * v127];
        *uint64_t v132 = v15;
        uint64_t v124 = (uint64_t)(v132 + 1);
        if (v123 == (unint64_t *)v126) {
          goto LABEL_125;
        }
LABEL_122:
        unint64_t v133 = (char *)(v123 - 1) - v126;
        if (v133 < 0x58) {
          goto LABEL_389;
        }
        if ((unint64_t)(v126 - v131) < 0x20) {
          goto LABEL_389;
        }
        uint64_t v134 = (v133 >> 3) + 1;
        uint64_t v135 = 8 * (v134 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v136 = &v123[v135 / 0xFFFFFFFFFFFFFFF8];
        uint64_t v132 = (unint64_t *)((char *)v132 - v135);
        uint64_t v137 = &v131[8 * v127 - 16];
        long long v138 = v123 - 2;
        uint64_t v139 = v134 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v140 = *(_OWORD *)v138;
          *((_OWORD *)v137 - 1) = *((_OWORD *)v138 - 1);
          *(_OWORD *)uint64_t v137 = v140;
          v137 -= 32;
          v138 -= 4;
          v139 -= 4;
        }
        while (v139);
        uint64_t v123 = v136;
        if (v134 != (v134 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_389:
          do
          {
            unint64_t v141 = *--v123;
            *--uint64_t v132 = v141;
          }
          while (v123 != (unint64_t *)v126);
        }
        uint64_t v123 = *v125;
        *(void *)(v16 + 88) = v132;
        *(void *)(v16 + 96) = v124;
        *(void *)(v16 + 104) = &v131[8 * v130];
        uint64_t v4 = v333;
        if (v123) {
LABEL_133:
        }
          operator delete(v123);
LABEL_134:
        *(void *)(v16 + 96) = v124;
        unsigned int v120 = v106[2];
LABEL_135:
        LODWORD(v364) = v120;
        unint64_t result = sub_BD5C18(v332, v120, v15);
        if ((result & 1) == 0)
        {
          if (!*(unsigned char *)(v4 + 21))
          {
            LODWORD(v366) = 0;
            uint64_t v155 = *(void *)(v4 + 192);
            uint64_t v156 = (char *)(v155
                          + ((unint64_t)*(unsigned int *)(sub_AFAD84((uint64_t)v331, (unsigned int *)&v366) + 4) << 6));
            LODWORD(v366) = 0;
            uint64_t v157 = *(void *)(v4 + 192);
            uint64_t v158 = sub_AFAD84((uint64_t)v331, (unsigned int *)&v366);
            unint64_t result = (unint64_t)sub_AFA9C0((uint64_t)v331, 0, v156, (unsigned char *)(v157 + ((unint64_t)*(unsigned int *)(v158 + 8) << 6)));
          }
          goto LABEL_257;
        }
        LODWORD(v366) = 0;
        if (*(void *)(v4 + 184) == *(void *)(v4 + 144)) {
          goto LABEL_222;
        }
        unint64_t result = sub_AFAFE4((uint64_t)v331, (unsigned int *)&v366);
        if (result == -1) {
          goto LABEL_222;
        }
        uint64_t v142 = *(void *)(v4 + 152);
        uint64_t v143 = v142 + 16 * (result / 0x30);
        unsigned int v144 = (unsigned __int8 *)(v143 + 10);
        int v145 = result % 0x30;
        if ((unsigned __int16)(result % 0x30) < 9u)
        {
          __int16 v146 = 0;
          goto LABEL_152;
        }
        __int16 v146 = 0;
        uint64_t v147 = (unsigned __int16)(result % 0x30 - 9) >> 3;
        if (!((unsigned __int16)(result % 0x30 - 9) >> 3))
        {
          LODWORD(v147) = result % 0x30;
          __int16 v151 = (unsigned __int8 *)(v143 + 10);
          do
          {
LABEL_150:
            int v159 = *v151++;
            v146 += byte_20EC0B6[v159];
            LOWORD(v147) = v147 - 8;
          }
          while ((unsigned __int16)v147 > 8u);
          goto LABEL_151;
        }
        __int16 v148 = 0;
        uint64_t v149 = v147 + 1;
        uint64_t v150 = (v147 + 1) & 0x3FFE;
        LOWORD(v147) = v145 - 8 * v150;
        __int16 v151 = &v144[v150];
        unint64_t result = v142 + 16 * (result / 0x30) + 11;
        uint64_t v152 = v150;
        do
        {
          uint64_t v153 = *(unsigned __int8 *)(result - 1);
          int v154 = *(unsigned __int8 *)result;
          result += 2;
          v146 += byte_20EC0B6[v153];
          v148 += byte_20EC0B6[v154];
          v152 -= 2;
        }
        while (v152);
        v146 += v148;
        if (v149 != v150) {
          goto LABEL_150;
        }
LABEL_151:
        v144 += ((unsigned __int16)(v145 - 9) >> 3) + 1;
        LOBYTE(v145) = v147;
LABEL_152:
        uint64_t v160 = *(void *)(v4 + 160);
        unsigned __int16 v161 = v146 + byte_20EC0B6[~(-1 << v145) & (unint64_t)*v144];
        if (*(unsigned __int16 *)(v143 + 8) == v161)
        {
          v143 += 16;
          if (v143 != v160)
          {
            while (1)
            {
              uint64_t v162 = v143;
              if (*(_WORD *)(v143 + 8)) {
                break;
              }
              v143 += 16;
              if (v162 + 16 == v160) {
                goto LABEL_222;
              }
            }
            unsigned __int16 v163 = *(_DWORD **)v143;
            if (v143 != v160)
            {
LABEL_160:
              if (*(void *)(v4 + 144))
              {
                while (*(_DWORD *)(v4 + 136) == *v163)
                {
                  v163 += 3;
                  if (v163 == (_DWORD *)(*(void *)v143 + 12 * *(unsigned __int16 *)(v143 + 8)))
                  {
                    while (1)
                    {
                      v143 += 16;
                      if (v143 == v160) {
                        goto LABEL_222;
                      }
                      if (*(_WORD *)(v143 + 8))
                      {
                        unsigned __int16 v163 = *(_DWORD **)v143;
                        break;
                      }
                    }
                  }
                  if (v143 == v160) {
                    break;
                  }
                }
              }
              if (v143 != v160 && v163[2] != v163[1])
              {
                LODWORD(v366) = 0;
                uint64_t v164 = *(void *)(v4 + 192);
                uint64_t v165 = (_DWORD *)(v164
                                + ((unint64_t)*(unsigned int *)(sub_AFAD84((uint64_t)v331, (unsigned int *)&v366)
                                                                     + 4) << 6));
                LODWORD(v366) = 0;
                uint64_t v166 = *(void *)(v4 + 192);
                int v167 = (_DWORD *)(v166
                                + ((unint64_t)*(unsigned int *)(sub_AFAD84((uint64_t)v331, (unsigned int *)&v366)
                                                                     + 8) << 6));
                if (v165 != v167)
                {
                  int v168 = v358;
                  uint64_t v169 = v356;
                  uint64_t v170 = v353;
                  unsigned int v171 = v351;
                  unint64_t v172 = ((unint64_t)v353 - v352) >> 4;
                  do
                  {
                    unsigned int v175 = v165[13];
                    if (v168)
                    {
                      unsigned int v359 = v165[14];
                      int v173 = v165[15];
                      int v360 = v173;
                    }
                    else
                    {
                      int v173 = *(_DWORD *)(v169 + 12 * v175);
                    }
                    long long v174 = (unsigned int *)((char *)v171 + *(unsigned __int16 *)((char *)v171 - *v171 + 6));
                    v165[7] = *(unsigned int *)((char *)&v174[2
                                                            * (*(_DWORD *)(v169 + 12 * v175 + 4) + v172)
                                                            + 2]
                                              + *v174)
                            + v173
                            - *((_DWORD *)v170 + 2);
                    v165 += 16;
                  }
                  while (v165 != v167);
                  unint64_t v357 = (int *)(v169 + 12 * v175);
                }
                sub_B07CC8(v331, 0);
                if ((*((unsigned char *)v353 + 15) & 2) != 0
                  && (!v355
                   || (*(_DWORD *)(v355 + 4 * (((unint64_t)v353 - v352) >> 4)) & v330) == 0))
                {
                  int v190 = *(_DWORD *)(v4 + 96);
                  if (*(unsigned char *)(v4 + 20))
                  {
                    int v191 = v190 + v190 * *(_DWORD *)(v4 + 416);
                    int v192 = v364;
                    uint64_t v193 = *(void *)(v4 + 48);
                    if (v193) {
                      goto LABEL_209;
                    }
LABEL_211:
                    int v194 = 0x80000000;
                  }
                  else
                  {
                    int v191 = -1;
                    int v192 = v364;
                    uint64_t v193 = *(void *)(v4 + 48);
                    if (!v193) {
                      goto LABEL_211;
                    }
LABEL_209:
                    int v194 = sub_AD7004(v193, v192, *(_DWORD *)(v4 + 100) + v320);
                  }
                  if (sub_B07F30(v331, 0, v321 + v190 + v190 * v192, v190 + v190 * v192, v191, v194)) {
                    sub_A3EF14(v319, &v364);
                  }
                }
                LODWORD(v366) = 0;
                uint64_t v195 = *(void *)(v4 + 192);
                long long v196 = (_DWORD *)(v195
                                + ((unint64_t)*(unsigned int *)(sub_AFAD84((uint64_t)v331, (unsigned int *)&v366)
                                                                     + 4) << 6));
                LODWORD(v366) = 0;
                uint64_t v197 = *(void *)(v4 + 192);
                long long v198 = (_DWORD *)(v197
                                + ((unint64_t)*(unsigned int *)(sub_AFAD84((uint64_t)v331, (unsigned int *)&v366)
                                                                     + 8) << 6));
                if (v196 != v198)
                {
                  int v199 = v358;
                  uint64_t v200 = v356;
                  uint64_t v201 = v351;
                  unint64_t v202 = ((unint64_t)v353 - v352) >> 4;
                  do
                  {
                    unsigned int v205 = v196[13];
                    if (v199)
                    {
                      unsigned int v359 = v196[14];
                      int v203 = v196[15];
                      int v360 = v203;
                    }
                    else
                    {
                      int v203 = *(_DWORD *)(v200 + 12 * v205);
                    }
                    int v204 = (unsigned int *)((char *)v201 + *(unsigned __int16 *)((char *)v201 - *v201 + 6));
                    v196[7] = *(unsigned int *)((char *)&v204[2
                                                            * (*(_DWORD *)(v200 + 12 * v205 + 4) + v202)
                                                            + 1]
                                              + *v204)
                            + v203;
                    v196 += 16;
                  }
                  while (v196 != v198);
                  unint64_t v357 = (int *)(v200 + 12 * v205);
                }
                unint64_t result = (unint64_t)sub_B07CC8(v331, 0);
              }
            }
          }
        }
        else
        {
          unsigned __int16 v163 = (_DWORD *)(*(void *)v143 + 12 * v161);
          if (v143 != v160) {
            goto LABEL_160;
          }
        }
LABEL_222:
        if ((*((unsigned char *)v353 + 15) & 1) == 0) {
          goto LABEL_257;
        }
        if (!v355)
        {
          if (!v330) {
            goto LABEL_227;
          }
          goto LABEL_257;
        }
        if (*(_DWORD *)(v355 + 4 * (((unint64_t)v353 - v352) >> 4)) != v330) {
          goto LABEL_257;
        }
LABEL_227:
        unsigned int v206 = v329 + *(_DWORD *)(v4 + 96) + *(_DWORD *)(v4 + 96) * v364;
        LODWORD(v366) = v206;
        if (*(void *)(v4 + 184) == *(void *)(v4 + 144)) {
          goto LABEL_257;
        }
        unint64_t result = sub_AFAFE4((uint64_t)v331, (unsigned int *)&v366);
        if (result == -1) {
          goto LABEL_257;
        }
        uint64_t v207 = *(void *)(v4 + 152);
        uint64_t v208 = v207 + 16 * (result / 0x30);
        int v209 = (unsigned __int8 *)(v208 + 10);
        int v210 = result % 0x30;
        if ((unsigned __int16)(result % 0x30) < 9u)
        {
          __int16 v211 = 0;
          goto LABEL_239;
        }
        __int16 v211 = 0;
        uint64_t v212 = (unsigned __int16)(result % 0x30 - 9) >> 3;
        if (!((unsigned __int16)(result % 0x30 - 9) >> 3))
        {
          LODWORD(v212) = result % 0x30;
          unsigned int v216 = (unsigned __int8 *)(v208 + 10);
          do
          {
LABEL_237:
            int v220 = *v216++;
            v211 += byte_20EC0B6[v220];
            LOWORD(v212) = v212 - 8;
          }
          while ((unsigned __int16)v212 > 8u);
          goto LABEL_238;
        }
        __int16 v213 = 0;
        uint64_t v214 = v212 + 1;
        uint64_t v215 = (v212 + 1) & 0x3FFE;
        LOWORD(v212) = v210 - 8 * v215;
        unsigned int v216 = &v209[v215];
        unint64_t result = v207 + 16 * (result / 0x30) + 11;
        uint64_t v217 = v215;
        do
        {
          uint64_t v218 = *(unsigned __int8 *)(result - 1);
          int v219 = *(unsigned __int8 *)result;
          result += 2;
          v211 += byte_20EC0B6[v218];
          v213 += byte_20EC0B6[v219];
          v217 -= 2;
        }
        while (v217);
        v211 += v213;
        if (v214 != v215) {
          goto LABEL_237;
        }
LABEL_238:
        v209 += ((unsigned __int16)(v210 - 9) >> 3) + 1;
        LOBYTE(v210) = v212;
LABEL_239:
        uint64_t v221 = *(void *)(v4 + 160);
        unsigned __int16 v222 = v211 + byte_20EC0B6[~(-1 << v210) & (unint64_t)*v209];
        if (*(unsigned __int16 *)(v208 + 8) == v222)
        {
          v208 += 16;
          if (v208 != v221)
          {
            while (1)
            {
              uint64_t v223 = v208;
              if (*(_WORD *)(v208 + 8)) {
                break;
              }
              v208 += 16;
              if (v223 + 16 == v221) {
                goto LABEL_257;
              }
            }
            __int16 v224 = *(_DWORD **)v208;
            if (v208 != v221) {
              goto LABEL_247;
            }
          }
          goto LABEL_257;
        }
        __int16 v224 = (_DWORD *)(*(void *)v208 + 12 * v222);
        if (v208 == v221) {
          goto LABEL_257;
        }
LABEL_247:
        if (*(void *)(v4 + 144))
        {
          do
          {
            if (*(_DWORD *)(v4 + 136) != *v224) {
              break;
            }
            v224 += 3;
            if (v224 == (_DWORD *)(*(void *)v208 + 12 * *(unsigned __int16 *)(v208 + 8)))
            {
              do
              {
                v208 += 16;
                if (v208 == v221) {
                  goto LABEL_257;
                }
              }
              while (!*(_WORD *)(v208 + 8));
              __int16 v224 = *(_DWORD **)v208;
            }
          }
          while (v208 != v221);
        }
        if (v208 != v221)
        {
          unsigned __int16 v227 = v224 + 1;
          int v226 = v224[1];
          int v225 = v227[1];
          uint64_t v228 = (v225 - v226);
          if (v225 != v226)
          {
            unsigned int v235 = 0;
            unsigned int v322 = v206;
            do
            {
              uint64_t v236 = sub_AFC890(v331, v206, v235);
              int v237 = *(_DWORD *)(v236 + 28);
              if (v358)
              {
                unint64_t result = sub_A2B620(*(void *)(v4 + 24), (uint64_t)&v349, v237, 1);
                if ((result & 1) == 0) {
                  goto LABEL_281;
                }
              }
              else
              {
                unint64_t result = sub_A2BC00((uint64_t)&v349, v237, 1);
                if (!result) {
                  goto LABEL_281;
                }
              }
              uint64_t v327 = *(void *)(v236 + 20);
              int v238 = *(_DWORD *)(v236 + 32);
              int v328 = *(_DWORD *)(v236 + 40);
              int v325 = *(_DWORD *)(v236 + 36);
              int v326 = *(_DWORD *)(v236 + 44);
              int v324 = *(unsigned __int8 *)(v236 + 48);
              __int16 v347 = *(_WORD *)(v236 + 49);
              unsigned int v239 = (void *)(*(void *)(v4 + 24) + 4136);
              char v348 = *(unsigned char *)(v236 + 51);
              if (sub_A10E20(v239, SHIDWORD(v5)))
              {
                unsigned int v240 = (int *)sub_A1120C(*(void *)(*v239 + 3944), v5);
              }
              else
              {
                if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                  && __cxa_guard_acquire(&qword_24F7308))
                {
                  sub_518C8(0x3B60u, 0x7FCAu);
                  dword_24F7300 = v313 | 0x40000000;
                  __cxa_guard_release(&qword_24F7308);
                  uint64_t v4 = v333;
                }
                uint64_t v241 = *v239;
                if (dword_24F7300 == HIDWORD(v5))
                {
                  uint64_t v242 = *(unsigned int **)(*(void *)(v241 + 3976) + 72);
                  if (!v242)
                  {
                    exception = __cxa_allocate_exception(0x40uLL);
                    unint64_t v366 = (char *)operator new(0x40uLL);
                    long long v367 = xmmword_20B9A90;
                    strcpy(v366, "Realtime stop pattern quad data requested on nullptr buffer");
                    uint64_t v316 = (void *)sub_2F404((uint64_t)exception, (long long *)&v366);
                  }
                  unint64_t v243 = (int *)((char *)v242 + *v242);
                  uint64_t v244 = (unsigned __int16 *)((char *)v243 - *v243);
                  if (*v244 >= 5u && (uint64_t v245 = v244[2]) != 0) {
                    unint64_t v246 = (unsigned int *)((char *)v243 + v245 + *(unsigned int *)((char *)v243 + v245));
                  }
                  else {
                    unint64_t v246 = 0;
                  }
                  unsigned int v240 = (int *)sub_A1139C(v246, v5);
                }
                else
                {
                  unsigned int v240 = (int *)sub_A11500(v241 + 24, v5, 0, "stop pattern");
                }
              }
              uint64_t v247 = v240;
              uint64_t v248 = *v239;
              unint64_t v249 = (unsigned __int16 *)((char *)v240 - *v240);
              if (*v249 >= 0xFu && (uint64_t v250 = v249[7]) != 0)
              {
                uint64_t v251 = v228;
                uint64_t v252 = v248 + 3896;
                char v253 = sub_49442C(*(unsigned __int16 *)((char *)v240 + v250));
                if (sub_C25A10(v252, v253)) {
                  goto LABEL_305;
                }
              }
              else
              {
                uint64_t v251 = v228;
                uint64_t v257 = v248 + 3896;
                char v258 = sub_49442C(0x7FFFu);
                if (sub_C25A10(v257, v258))
                {
LABEL_305:
                  int v256 = 128;
                  uint64_t v228 = v251;
                  unsigned int v206 = v322;
                  if (sub_A10E20(v239, SHIDWORD(v5))) {
                    goto LABEL_319;
                  }
                  goto LABEL_306;
                }
              }
              unint64_t v254 = (unsigned __int16 *)((char *)v247 - *v247);
              uint64_t v228 = v251;
              if (*v254 < 0xBu)
              {
                unsigned int v206 = v322;
                int v256 = sub_A2BF48(0);
                if (sub_A10E20(v239, SHIDWORD(v5))) {
                  goto LABEL_319;
                }
              }
              else
              {
                uint64_t v255 = v254[5];
                unsigned int v206 = v322;
                if (v255)
                {
                  int v256 = sub_A2BF48(*((unsigned char *)v247 + v255));
                  if (sub_A10E20(v239, SHIDWORD(v5))) {
                    goto LABEL_319;
                  }
                }
                else
                {
                  int v256 = sub_A2BF48(0);
                  if (sub_A10E20(v239, SHIDWORD(v5)))
                  {
LABEL_319:
                    unint64_t v265 = (int *)sub_A1120C(*(void *)(*v239 + 3944), v5);
LABEL_320:
                    uint64_t v266 = (unsigned __int16 *)((char *)v265 - *v265);
                    if (*v266 < 0xFu) {
                      goto LABEL_324;
                    }
                    goto LABEL_321;
                  }
                }
              }
LABEL_306:
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                && __cxa_guard_acquire(&qword_24F7308))
              {
                sub_518C8(0x3B60u, 0x7FCAu);
                dword_24F7300 = v314 | 0x40000000;
                __cxa_guard_release(&qword_24F7308);
                uint64_t v4 = v333;
                unsigned int v206 = v322;
              }
              uint64_t v259 = *v239;
              if (dword_24F7300 != HIDWORD(v5))
              {
                unint64_t v265 = (int *)sub_A11500(v259 + 24, v5, 0, "stop pattern");
                goto LABEL_320;
              }
              unsigned int v260 = *(unsigned int **)(*(void *)(v259 + 3976) + 72);
              if (!v260)
              {
                uint64_t v317 = __cxa_allocate_exception(0x40uLL);
                unint64_t v366 = (char *)operator new(0x40uLL);
                long long v367 = xmmword_20B9A90;
                strcpy(v366, "Realtime stop pattern quad data requested on nullptr buffer");
                uint64_t v318 = (void *)sub_2F404((uint64_t)v317, (long long *)&v366);
              }
              uint64_t v261 = (int *)((char *)v260 + *v260);
              long long v262 = (unsigned __int16 *)((char *)v261 - *v261);
              if (*v262 >= 5u && (uint64_t v263 = v262[2]) != 0) {
                uint64_t v264 = (unsigned int *)((char *)v261 + v263 + *(unsigned int *)((char *)v261 + v263));
              }
              else {
                uint64_t v264 = 0;
              }
              unint64_t v265 = (int *)sub_A1139C(v264, v5);
              uint64_t v266 = (unsigned __int16 *)((char *)v265 - *v265);
              if (*v266 < 0xFu)
              {
LABEL_324:
                char v268 = 3;
                int v270 = v328;
                goto LABEL_325;
              }
LABEL_321:
              uint64_t v267 = v266[7];
              if (!v267) {
                goto LABEL_324;
              }
              char v268 = 0;
              unsigned int v269 = *(unsigned __int16 *)((char *)v265 + v267);
              int v270 = v328;
              switch(v269)
              {
                case 0u:
                case 1u:
                case 2u:
                case 0xCu:
                  break;
                case 3u:
                  char v268 = 1;
                  break;
                case 4u:
                  char v268 = 2;
                  break;
                case 5u:
                case 6u:
                case 7u:
                  goto LABEL_323;
                case 8u:
                case 9u:
                case 0xAu:
                case 0xBu:
                  goto LABEL_367;
                default:
                  int v270 = v328;
                  if (v269 != 900)
                  {
LABEL_367:
                    uint64_t v306 = ((5243 * (v269 >> 2)) >> 17) - 1;
                    if (v306 > 0xB) {
LABEL_323:
                    }
                      char v268 = 3;
                    else {
                      char v268 = byte_20EC3B6[v306];
                    }
                  }
                  break;
              }
LABEL_325:
              int v271 = (1 << v268) | v324;
              int v272 = v360;
              unint64_t v273 = 0xFFFFFFFF00000000;
              if (v358) {
                unint64_t v273 = (unint64_t)v359 << 32;
              }
              unint64_t v274 = (-1431655765 * (((unint64_t)v357 - v356) >> 2)) | v273;
              if (!v358) {
                int v272 = 0x7FFFFFFF;
              }
              uint64_t v275 = (unsigned int *)((char *)v351 + *(unsigned __int16 *)((char *)v351 - *v351 + 6));
              int v276 = (char *)v275 + *v275;
              int v277 = &v360;
              if (!v358) {
                int v277 = v357;
              }
              int v278 = *v277;
              unint64_t v279 = &v276[8 * v357[1] + 8 * (((unint64_t)v353 - v352) >> 4)];
              int v280 = *((_DWORD *)v279 + 1) + v278;
              LODWORD(v279) = 10 * (*(_DWORD *)(v236 + 28) - v278 - *((_DWORD *)v279 + 2));
              LODWORD(v334) = ((unint64_t)v353 - v352) >> 4;
              *(void *)((char *)&v334 + 4) = v274;
              HIDWORD(v334) = v272;
              unsigned int v335 = v363;
              uint64_t v336 = v327;
              int v337 = v280;
              int v338 = v238;
              int v339 = v256 + v325;
              int v340 = v270;
              int v341 = v326 - (v279 & ~((int)v279 >> 31));
              char v342 = v271;
              __int16 v343 = v347;
              char v344 = v348;
              unint64_t v345 = v274;
              int v346 = v272;
              LODWORD(v366) = 0;
              if (*(void *)(v4 + 184) == *(void *)(v4 + 144)) {
                goto LABEL_280;
              }
              unint64_t v281 = sub_AFAFE4((uint64_t)v331, (unsigned int *)&v366);
              if (v281 == -1) {
                goto LABEL_280;
              }
              uint64_t v282 = *(void *)(v4 + 152);
              uint64_t v283 = v282 + 16 * (v281 / 0x30);
              uint64_t v284 = (unsigned __int8 *)(v283 + 10);
              int v285 = v281 % 0x30;
              if ((unsigned __int16)(v281 % 0x30) < 9u)
              {
                __int16 v286 = 0;
                goto LABEL_343;
              }
              __int16 v286 = 0;
              uint64_t v287 = (unsigned __int16)(v281 % 0x30 - 9) >> 3;
              if ((unsigned __int16)(v281 % 0x30 - 9) >> 3)
              {
                __int16 v288 = 0;
                uint64_t v289 = v287 + 1;
                uint64_t v290 = (v287 + 1) & 0x3FFE;
                LOWORD(v287) = v285 - 8 * v290;
                unint64_t v291 = &v284[v290];
                int v292 = (unsigned __int8 *)(v282 + 16 * (v281 / 0x30) + 11);
                uint64_t v293 = v290;
                do
                {
                  uint64_t v294 = *(v292 - 1);
                  int v295 = *v292;
                  v292 += 2;
                  v286 += byte_20EC0B6[v294];
                  v288 += byte_20EC0B6[v295];
                  v293 -= 2;
                }
                while (v293);
                v286 += v288;
                if (v289 == v290) {
                  goto LABEL_342;
                }
              }
              else
              {
                LODWORD(v287) = v281 % 0x30;
                unint64_t v291 = (unsigned __int8 *)(v283 + 10);
              }
              do
              {
                int v296 = *v291++;
                v286 += byte_20EC0B6[v296];
                LOWORD(v287) = v287 - 8;
              }
              while ((unsigned __int16)v287 > 8u);
LABEL_342:
              v284 += ((unsigned __int16)(v285 - 9) >> 3) + 1;
              LOBYTE(v285) = v287;
LABEL_343:
              uint64_t v297 = *(void *)(v4 + 160);
              unsigned __int16 v298 = v286 + byte_20EC0B6[~(-1 << v285) & (unint64_t)*v284];
              if (*(unsigned __int16 *)(v283 + 8) == v298)
              {
                v283 += 16;
                if (v283 != v297)
                {
                  while (1)
                  {
                    uint64_t v299 = v283;
                    if (*(_WORD *)(v283 + 8)) {
                      break;
                    }
                    v283 += 16;
                    if (v299 + 16 == v297) {
                      goto LABEL_280;
                    }
                  }
                  int v300 = *(_DWORD **)v283;
                  if (v283 != v297)
                  {
LABEL_351:
                    if (*(void *)(v4 + 144))
                    {
                      while (*(_DWORD *)(v4 + 136) == *v300)
                      {
                        v300 += 3;
                        if (v300 == (_DWORD *)(*(void *)v283 + 12 * *(unsigned __int16 *)(v283 + 8)))
                        {
                          while (1)
                          {
                            v283 += 16;
                            if (v283 == v297) {
                              goto LABEL_280;
                            }
                            if (*(_WORD *)(v283 + 8))
                            {
                              int v300 = *(_DWORD **)v283;
                              break;
                            }
                          }
                        }
                        if (v283 == v297) {
                          break;
                        }
                      }
                    }
                    if (v283 != v297 && v300[2] != v300[1])
                    {
                      unint64_t result = sub_B05AE8((uint64_t)v331, (uint64_t)&v334, 0, 0, 0);
                      if ((result & 0x100) != 0)
                      {
                        LODWORD(v366) = 0;
                        uint64_t v301 = *(void *)(v4 + 192);
                        uint64_t v302 = v301
                             + ((unint64_t)*(unsigned int *)(sub_AFAD84((uint64_t)v331, (unsigned int *)&v366) + 4) << 6);
                        LODWORD(v366) = 0;
                        uint64_t v303 = *(void *)(v4 + 192);
                        uint64_t v304 = sub_AFAD84((uint64_t)v331, (unsigned int *)&v366);
                        uint64_t v305 = (long long *)(v303 + ((unint64_t)*(unsigned int *)(v304 + 8) << 6));
                        if ((long long *)v302 != v305)
                        {
                          while (*(_DWORD *)(v302 + 28) != 0x7FFFFFFF)
                          {
                            v302 += 64;
                            if ((long long *)v302 == v305)
                            {
                              uint64_t v302 = v303 + ((unint64_t)*(unsigned int *)(v304 + 8) << 6);
                              goto LABEL_377;
                            }
                          }
                          if ((long long *)v302 != v305)
                          {
                            for (uint64_t j = (long long *)(v302 + 64); j != v305; j += 4)
                            {
                              if (*((_DWORD *)j + 7) != 0x7FFFFFFF)
                              {
                                long long v308 = *j;
                                long long v309 = j[1];
                                long long v310 = j[3];
                                *(_OWORD *)(v302 + 32) = j[2];
                                *(_OWORD *)(v302 + 48) = v310;
                                *(_OWORD *)uint64_t v302 = v308;
                                *(_OWORD *)(v302 + 16) = v309;
                                v302 += 64;
                              }
                            }
                          }
                        }
LABEL_377:
                        LODWORD(v366) = 0;
                        uint64_t v311 = *(void *)(v4 + 192);
                        uint64_t v312 = sub_AFAD84((uint64_t)v331, (unsigned int *)&v366);
                        unint64_t result = (unint64_t)sub_AFA9C0((uint64_t)v331, 0, (char *)v302, (unsigned char *)(v311+ ((unint64_t)*(unsigned int *)(v312 + 8) << 6)));
                      }
                      goto LABEL_281;
                    }
                  }
                }
              }
              else
              {
                int v300 = (_DWORD *)(*(void *)v283 + 12 * v298);
                if (v283 != v297) {
                  goto LABEL_351;
                }
              }
LABEL_280:
              unint64_t result = sub_AFBE70((uint64_t)v331, 0, &v334);
LABEL_281:
              ++v235;
            }
            while (v235 != v228);
          }
        }
LABEL_257:
        unint64_t v13 = v352;
        unsigned int v12 = v353 - 2;
        v353 -= 2;
        if (*(unsigned char *)(v349 + 16)) {
          BOOL v229 = v350 == 0;
        }
        else {
          BOOL v229 = 0;
        }
        if (v229 && (unint64_t)v12 >= v352 && (unint64_t)v12 < v354)
        {
          do
          {
            unint64_t v232 = __ROR8__(*v12, 32);
            if (HIDWORD(v232) == 1 && (v232 + 3) < 2) {
              break;
            }
            unint64_t result = sub_2AB7E4(**(void **)(v349 + 4120));
            unint64_t v13 = v352;
            unsigned int v12 = v353;
            if (result) {
              break;
            }
            unsigned int v12 = v353 - 2;
            unint64_t v353 = v12;
          }
          while ((unint64_t)v12 >= v352 && (unint64_t)v12 < v354);
        }
      }
      v361 += 4;
      uint64_t v7 = v361;
    }
    while ((unint64_t)v361 < v362);
  }
  return result;
}

void sub_B07C1C(_Unwind_Exception *a1)
{
}

void sub_B07C34(_Unwind_Exception *a1)
{
}

void sub_B07C4C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 - 153) < 0) {
    operator delete(*(void **)(v1 + 152));
  }
  _Unwind_Resume(exception_object);
}

void sub_B07C80(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_B07CC8(void *a1, unsigned int a2)
{
  v36[0] = a2;
  sub_AFC6C4(a1, v36, v32);
  uint64_t v4 = a1[6];
  uint64_t v5 = a1[7];
  uint64_t v23 = a1;
  uint64_t v24 = v4;
  uint64_t v25 = v5;
  uint64_t v26 = v5;
  uint64_t v27 = 0;
  uint64_t v28 = v4;
  uint64_t v29 = v5;
  uint64_t v30 = v5;
  uint64_t v31 = 0;
  unint64_t result = (char *)sub_AE47A0(&v23);
  if (v32[1] == v24 && v33 == v25 && v34 == v26 && (v34 == v33 || v35 == v27)) {
    return result;
  }
  int v7 = *(_DWORD *)(v35 + 4);
  int v8 = *(_DWORD *)(v35 + 8);
  unsigned int v9 = v8 - v7;
  if (v8 == v7) {
    return result;
  }
  char v22 = 0;
  unsigned int v10 = 0;
  unsigned int v11 = 1;
LABEL_6:
  while (2)
  {
    if (v11 <= v9) {
      unsigned int v12 = v9;
    }
    else {
      unsigned int v12 = v11;
    }
    unint64_t result = (char *)sub_AFC890(a1, a2, v10++);
    if (*((_DWORD *)result + 7) != 0x7FFFFFFF && v10 < v9)
    {
      uint64_t v14 = result;
      for (unsigned int i = v10; v12 != i; ++i)
      {
        unint64_t result = (char *)sub_AFC890(a1, a2, i);
        int v16 = *((_DWORD *)result + 7);
        if (v16 != 0x7FFFFFFF)
        {
          int v17 = *((_DWORD *)v14 + 7);
          if (v17 < v16
            || *((_DWORD *)v14 + 8) > *((_DWORD *)result + 8)
            || (unsigned int v18 = *((_DWORD *)result + 9), v19 = *((_DWORD *)v14 + 9), v19 > v18)
            || v19 == v18 && v17 == v16 && *((_DWORD *)v14 + 11) - 10 * v17 > *((_DWORD *)result + 11) - 10 * v16
            || (v14[48] & ~result[48]) != 0)
          {
            if (v16 >= v17 && *((_DWORD *)result + 8) <= *((_DWORD *)v14 + 8))
            {
              unsigned int v20 = *((_DWORD *)v14 + 9);
              unsigned int v21 = *((_DWORD *)result + 9);
              if (v21 <= v20
                && (v21 != v20 || v16 != v17 || *((_DWORD *)result + 11) - 10 * v16 <= *((_DWORD *)v14 + 11) - 10 * v17)
                && (result[48] & ~v14[48]) == 0)
              {
                *((_DWORD *)v14 + 7) = 0x7FFFFFFF;
                if (v10 == v9) {
                  return sub_AFC5B8((uint64_t)a1, a2);
                }
                char v22 = 1;
                ++v11;
                goto LABEL_6;
              }
            }
          }
          else
          {
            *((_DWORD *)result + 7) = 0x7FFFFFFF;
            char v22 = 1;
          }
        }
      }
    }
    if (v10 != v9)
    {
      ++v11;
      continue;
    }
    break;
  }
  if ((v22 & 1) == 0) {
    return result;
  }
  return sub_AFC5B8((uint64_t)a1, a2);
}

BOOL sub_B07F30(void *a1, unsigned int a2, unsigned int a3, int a4, int a5, int a6)
{
  v55[0] = a2;
  sub_AFC6C4(a1, v55, v52);
  uint64_t v11 = a1[6];
  uint64_t v12 = a1[7];
  __int16 v44 = a1;
  *(void *)&long long v45 = v11;
  *((void *)&v45 + 1) = v12;
  uint64_t v46 = v12;
  uint64_t v47 = 0;
  uint64_t v48 = v11;
  uint64_t v49 = v12;
  uint64_t v50 = v12;
  uint64_t v51 = 0;
  sub_AE47A0(&v44);
  if (*(_OWORD *)&v52[8] == v45
    && *(void *)&v52[24] == v46
    && (*(void *)&v52[24] == *(void *)&v52[16] || (void)v53 == v47))
  {
    goto LABEL_7;
  }
  int v13 = *(_DWORD *)(v53 + 4);
  int v14 = *(_DWORD *)(v53 + 8);
  int v15 = v14 - v13;
  if (v14 == v13) {
    goto LABEL_7;
  }
  if (a6 == 0x7FFFFFFF)
  {
    unsigned int v16 = 0;
    do
      sub_AFC890(a1, a2, v16++);
    while (v15 != v16);
LABEL_7:
    LOBYTE(v17) = 0;
    return v17 != 0;
  }
  __int16 v17 = 0;
  unsigned int v19 = 0;
  unsigned int v43 = a3;
  do
  {
    char v22 = (_OWORD *)sub_AFC890(a1, a2, v19);
    long long v23 = v22[2];
    long long v24 = v22[3];
    long long v25 = v22[1];
    *(_OWORD *)uint64_t v52 = *v22;
    *(_OWORD *)&v52[16] = v25;
    long long v53 = v23;
    long long v54 = v24;
    if (SHIDWORD(v25) >= a6)
    {
      if (a5 == 0xFFFFFFFFLL
        || (LODWORD(v44) = a5,
            uint64_t v26 = a1[11],
            uint64_t v27 = v26 + ((unint64_t)*(unsigned int *)(sub_AFAD84((uint64_t)a1, (unsigned int *)&v44) + 4) << 6),
            LODWORD(v44) = a5,
            uint64_t v28 = a1[11],
            uint64_t v29 = v28 + ((unint64_t)*(unsigned int *)(sub_AFAD84((uint64_t)a1, (unsigned int *)&v44) + 8) << 6),
            v27 == v29))
      {
LABEL_29:
        LODWORD(v44) = a4;
        uint64_t v33 = a1[11];
        uint64_t v34 = v33 + ((unint64_t)*(unsigned int *)(sub_AFAD84((uint64_t)a1, (unsigned int *)&v44) + 4) << 6);
        LODWORD(v44) = a4;
        uint64_t v35 = a1[11];
        uint64_t v36 = v35 + ((unint64_t)*(unsigned int *)(sub_AFAD84((uint64_t)a1, (unsigned int *)&v44) + 8) << 6);
        if (v34 == v36)
        {
LABEL_43:
          unint64_t v40 = sub_B05AE8((uint64_t)a1, (uint64_t)v52, v43, 1, 1);
          unint64_t v20 = v40 >> 8;
          __int16 v21 = v40;
          if ((_BYTE)v40)
          {
            *(void *)(v41 + 52) = -1;
            *(_DWORD *)(v41 + 60) = 0x7FFFFFFF;
          }
          goto LABEL_11;
        }
        while (1)
        {
          int v37 = *(_DWORD *)(v34 + 28);
          if (v37 != 0x7FFFFFFF && v37 >= *(_DWORD *)&v52[28] && *(_DWORD *)(v34 + 32) <= (int)v53)
          {
            unsigned int v39 = *(_DWORD *)(v34 + 36);
            if (v39 <= DWORD1(v53)
              && (v39 != DWORD1(v53)
               || v37 != *(_DWORD *)&v52[28]
               || *(_DWORD *)(v34 + 44) - 10 * v37 <= HIDWORD(v53) - 10 * *(_DWORD *)&v52[28])
              && (*(unsigned __int8 *)(v34 + 48) & ~v54) == 0)
            {
              break;
            }
          }
          v34 += 64;
          if (v34 == v36) {
            goto LABEL_43;
          }
        }
      }
      else
      {
        while (1)
        {
          int v30 = *(_DWORD *)(v27 + 28);
          if (v30 != 0x7FFFFFFF && v30 >= *(_DWORD *)&v52[28] && *(_DWORD *)(v27 + 32) <= (int)v53)
          {
            unsigned int v32 = *(_DWORD *)(v27 + 36);
            if (v32 <= DWORD1(v53)
              && (v32 != DWORD1(v53)
               || v30 != *(_DWORD *)&v52[28]
               || *(_DWORD *)(v27 + 44) - 10 * v30 <= HIDWORD(v53) - 10 * *(_DWORD *)&v52[28])
              && (*(unsigned __int8 *)(v27 + 48) & ~v54) == 0)
            {
              break;
            }
          }
          v27 += 64;
          if (v27 == v29) {
            goto LABEL_29;
          }
        }
      }
      LOWORD(v20) = 0;
      __int16 v21 = 0;
LABEL_11:
      __int16 v17 = v21 | v17 | v17 & 0xFF00 | ((_WORD)v20 << 8);
    }
    ++v19;
  }
  while (v19 != v15);
  if ((v17 & 0xFF00) != 0) {
    sub_AFC5B8((uint64_t)a1, v43);
  }
  return v17 != 0;
}

uint64_t sub_B082A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  *(_OWORD *)a1 = xmmword_20E2060;
  *(_DWORD *)(a1 + 16) = 8;
  *(_WORD *)(a1 + 20) = 1;
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = a4;
  *(void *)(a1 + 48) = *a5;
  uint64_t v7 = a5[1];
  *(void *)(a1 + 56) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)&long long v8 = 0x8000000080000000;
  *((void *)&v8 + 1) = 0x8000000080000000;
  *(_OWORD *)(a1 + 68) = v8;
  *(void *)(a1 + 88) = 10;
  *(void *)(a1 + 96) = 0x100000004;
  sub_B08424(a1 + 104);
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_DWORD *)(a1 + 416) = -1;
  *(void *)(a1 + 408) = 0;
  sub_BD5668(a1 + 424, a2);
  char v11 = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)(a1 + 528), &__p);
  if (v11 < 0) {
    operator delete((void *)__p);
  }
  return a1;
}

void sub_B083BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_A387B0(v19);
  sub_A387FC(v18 + 96);
  sub_A3884C(v16 + 296);
  sub_A3884C(v18);
  sub_A3888C(v17);
  sub_14A84(v15);
  _Unwind_Resume(a1);
}

void sub_B08410(_Unwind_Exception *a1)
{
  sub_14A84(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_B08424(uint64_t a1)
{
  *(_WORD *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 26) = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0x3EA3D70A3F4CCCCDLL;
  *(void *)(a1 + 28) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 40) = 0;
  sub_B08520((uint64_t *)(a1 + 48), 32);
  *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)*(unint64_t *)(a1 + 72))));
  *(unsigned char *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  sub_B08A34(a1);
  *(unsigned char *)(a1 + 26) = 1;
  *(_DWORD *)(a1 + 32) = -1;
  return a1;
}

void sub_B084D8(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)(v1 + 112);
  if (v4)
  {
    operator delete(v4);
    uint64_t v5 = *v2;
    if (!*v2)
    {
LABEL_3:
      sub_A38920(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v5 = *v2;
    if (!*v2) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 96) = v5;
  operator delete(v5);
  sub_A38920(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_B08520(uint64_t *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = a2;
  a1[4] = 0;
  if (a2)
  {
    v4[0] = 0;
    v4[1] = 0;
    sub_B085B4(a1, (a2 - 1) / 0x30uLL + 1, (uint64_t **)v4);
    if (v4[0]) {
      free(v4[0]);
    }
  }
  return a1;
}

void sub_B08590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (a9) {
    free(a9);
  }
  sub_20AE094((uint64_t)&a9, v9);
  _Unwind_Resume(a1);
}

void sub_B085B4(uint64_t *a1, unint64_t a2, uint64_t **a3)
{
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v6 = a1[2];
  uint64_t v8 = a1[1];
  if (a2 <= (v6 - v8) >> 4)
  {
    if (a2)
    {
      uint64_t v14 = v8 + 16 * a2;
      do
      {
        *(void *)uint64_t v8 = 0;
        int v16 = *((unsigned __int16 *)a3 + 4);
        *(_WORD *)(v8 + 8) = v16;
        if (v16)
        {
          uint64_t v17 = *((unsigned __int16 *)a3 + 4);
          uint64_t v18 = malloc_type_malloc(12 * v17, 0x10000403E1C8BA9uLL);
          if (!v18)
          {
            fprintf(__stderrp, "sparsehash FATAL ERROR: failed to allocate %lu groups\n", v17);
            exit(1);
          }
          *(void *)uint64_t v8 = v18;
          if (*((_WORD *)a3 + 4))
          {
            unsigned int v19 = *a3;
            uint64_t v20 = 12 * *((unsigned __int16 *)a3 + 4);
            do
            {
              uint64_t v21 = *v19;
              v18[2] = *((_DWORD *)v19 + 2);
              *(void *)uint64_t v18 = v21;
              v18 += 3;
              unsigned int v19 = (uint64_t *)((char *)v19 + 12);
              v20 -= 12;
            }
            while (v20);
          }
        }
        int v15 = *(_DWORD *)((char *)a3 + 10);
        *(_WORD *)(v8 + 14) = *((_WORD *)a3 + 7);
        *(_DWORD *)(v8 + 10) = v15;
        v8 += 16;
      }
      while (v8 != v14);
      uint64_t v8 = v14;
    }
    a1[1] = v8;
  }
  else
  {
    uint64_t v9 = (v8 - *a1) >> 4;
    if ((v9 + a2) >> 60) {
      sub_2E00();
    }
    uint64_t v10 = v6 - *a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= v9 + a2) {
      uint64_t v11 = v9 + a2;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      uint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v12 = v11;
    }
    if (v12) {
      int v13 = (char *)malloc_type_malloc(16 * v12, 0x1020040EDED9539uLL);
    }
    else {
      int v13 = 0;
    }
    uint64_t v22 = (uint64_t)&v13[16 * v9];
    long long v23 = &v13[16 * v12];
    unint64_t v24 = v22 + 16 * a2;
    uint64_t v25 = v22;
    do
    {
      *(void *)uint64_t v25 = 0;
      int v27 = *((unsigned __int16 *)a3 + 4);
      *(_WORD *)(v25 + 8) = v27;
      if (v27)
      {
        uint64_t v28 = *((unsigned __int16 *)a3 + 4);
        uint64_t v29 = malloc_type_malloc(12 * v28, 0x10000403E1C8BA9uLL);
        if (!v29)
        {
          fprintf(__stderrp, "sparsehash FATAL ERROR: failed to allocate %lu groups\n", v28);
          exit(1);
        }
        *(void *)uint64_t v25 = v29;
        if (*((_WORD *)a3 + 4))
        {
          int v30 = *a3;
          uint64_t v31 = 12 * *((unsigned __int16 *)a3 + 4);
          do
          {
            uint64_t v32 = *v30;
            v29[2] = *((_DWORD *)v30 + 2);
            *(void *)uint64_t v29 = v32;
            v29 += 3;
            int v30 = (uint64_t *)((char *)v30 + 12);
            v31 -= 12;
          }
          while (v31);
        }
      }
      int v26 = *(_DWORD *)((char *)a3 + 10);
      *(_WORD *)(v25 + 14) = *((_WORD *)a3 + 7);
      *(_DWORD *)(v25 + 10) = v26;
      v25 += 16;
    }
    while (v25 != v24);
    sub_B088DC(v7, a1[1], a1[1], *a1, *a1, v22, v22);
    uint64_t v33 = (char *)*a1;
    uint64_t v34 = (char *)a1[1];
    *a1 = v35;
    a1[1] = v24;
    a1[2] = (uint64_t)v23;
    if (v34 != v33)
    {
      uint64_t v36 = v34;
      do
      {
        uint64_t v38 = (void *)*((void *)v36 - 2);
        v36 -= 16;
        int v37 = v38;
        if (v38)
        {
          free(v37);
          *((void *)v34 - 2) = 0;
        }
        uint64_t v34 = v36;
      }
      while (v36 != v33);
    }
    if (v33) {
      free(v33);
    }
  }
}

void sub_B08888(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_ACCDC8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_B0889C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_B088A4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_B088AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_ACCDC8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_B088C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_ACCDC8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_B088DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  uint64_t v18 = a6;
  uint64_t v19 = a7;
  if (a3 != a5)
  {
    uint64_t v9 = a3;
    do
    {
      *(void *)(v7 - 16) = 0;
      int v11 = *(unsigned __int16 *)(v9 - 8);
      *(_WORD *)(v7 - 8) = v11;
      if (v11)
      {
        uint64_t v12 = *(unsigned __int16 *)(v9 - 8);
        int v13 = malloc_type_malloc(12 * v12, 0x10000403E1C8BA9uLL);
        if (!v13)
        {
          fprintf(__stderrp, "sparsehash FATAL ERROR: failed to allocate %lu groups\n", v12);
          exit(1);
        }
        *(void *)(v7 - 16) = v13;
        if (*(_WORD *)(v9 - 8))
        {
          uint64_t v14 = *(uint64_t **)(v9 - 16);
          uint64_t v15 = 12 * *(unsigned __int16 *)(v9 - 8);
          do
          {
            uint64_t v16 = *v14;
            v13[2] = *((_DWORD *)v14 + 2);
            *(void *)int v13 = v16;
            v13 += 3;
            uint64_t v14 = (uint64_t *)((char *)v14 + 12);
            v15 -= 12;
          }
          while (v15);
        }
      }
      int v10 = *(_DWORD *)(v9 - 6);
      *(_WORD *)(v7 - 2) = *(_WORD *)(v9 - 2);
      *(_DWORD *)(v7 - 6) = v10;
      uint64_t v7 = v19 - 16;
      v19 -= 16;
      v9 -= 16;
    }
    while (v9 != a5);
    return v18;
  }
  return a6;
}

void sub_B08A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_ACCFD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_B08A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_ACCFD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_B08A34(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    long long v18 = *(_OWORD *)(a1 + 16);
    int v19 = *(_DWORD *)(a1 + 32);
    memset(v20, 0, sizeof(v20));
    long long v21 = 0u;
    uint64x2_t v17 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_f32(*(float32x2_t *)&v18, 0)));
    BYTE8(v18) = 0;
    sub_B08BC0((uint64_t)&v17, 1, (void *)a1, 0x20uLL);
    int v2 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v19;
    int v19 = v2;
    int v3 = *(void **)(a1 + 40);
    uint64_t v4 = *(char **)(a1 + 48);
    *(void **)(a1 + 40) = v20[0];
    uint64x2_t v6 = *(uint64x2_t *)a1;
    long long v5 = *(_OWORD *)(a1 + 16);
    long long v7 = v18;
    *(uint64x2_t *)a1 = v17;
    *(_OWORD *)(a1 + 16) = v7;
    uint64x2_t v17 = v6;
    long long v18 = v5;
    long long v8 = *(_OWORD *)&v20[1];
    v20[0] = v3;
    v20[1] = v4;
    uint64_t v9 = v20[3];
    long long v10 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 48) = v8;
    *(void *)(a1 + 64) = v9;
    *(_OWORD *)&v20[2] = v10;
    *(void *)&long long v8 = v21;
    long long v11 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)(a1 + 72) = v21;
    long long v21 = v11;
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)(unint64_t)v8)));
    *(unsigned char *)(a1 + 24) = 0;
    uint64x2_t v17 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v18, (float)(unint64_t)v11)));
    BYTE8(v18) = 0;
    if (v4)
    {
      uint64_t v12 = (char *)v10;
      int v13 = v4;
      if ((char *)v10 != v4)
      {
        uint64_t v14 = (char *)v10;
        do
        {
          uint64_t v16 = (void *)*((void *)v14 - 2);
          v14 -= 16;
          uint64_t v15 = v16;
          if (v16)
          {
            free(v15);
            *((void *)v12 - 2) = 0;
          }
          uint64_t v12 = v14;
        }
        while (v14 != v4);
        int v13 = (char *)v20[1];
      }
      v20[2] = v4;
      free(v13);
    }
  }
}

void sub_B08B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    sub_20AE0F0((uint64_t)&a9, a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_B08BC0(uint64_t a1, int a2, void *a3, unint64_t a4)
{
  if (*(void *)(a1 + 40) | *(void *)(a1 + 80))
  {
    for (uint64_t i = *(void *)(a1 + 48); i != *(void *)(a1 + 56); i += 16)
    {
      if (*(void *)i)
      {
        free(*(void **)i);
        *(void *)uint64_t i = 0;
      }
      *(void *)(i + 8) = 0;
    }
    *(void *)(a1 + 80) = 0;
  }
  unint64_t v9 = *(void *)(a1 + 72);
  float32x2_t v10 = *(float32x2_t *)(a1 + 16);
  *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(v10, (float)v9)));
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 40) = 0;
  if (a2 == 1)
  {
    unint64_t v11 = a3[9];
  }
  else
  {
    unint64_t v11 = 4;
    if (a4 > 4) {
      goto LABEL_28;
    }
    while (a3[10] - a3[5] >= (unint64_t)(float)(v10.f32[0] * (float)v11))
    {
      do
      {
LABEL_28:
        if ((v11 & 0x8000000000000000) != 0)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_2E18(exception, "resize overflow");
        }
        v11 *= 2;
      }
      while (v11 < a4);
    }
  }
  if (v11 > v9)
  {
    sub_B08E34((uint64_t *)(a1 + 48), v11);
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)*(unint64_t *)(a1 + 72))));
    *(unsigned char *)(a1 + 24) = 0;
  }
  sub_ACEFB0((uint64_t)a3, &v21);
  uint64_t v12 = a3[7];
  if (v22 != a3[6] || v23 != v12 || v24 != v12)
  {
    while (1)
    {
      uint64_t v15 = *(void *)(a1 + 72) - 1;
      unint64_t v16 = v15 & *(_DWORD *)v25;
      uint64_t v17 = *(void *)(a1 + 48);
      if ((*(unsigned __int8 *)(v17 + 16 * (v16 / 0x30) + (((v15 & *(_DWORD *)v25) % 0x30) >> 3) + 10) >> (((v15 & *(_DWORD *)v25) % 0x30) & 7)))
      {
        uint64_t v18 = 1;
        do
          unint64_t v16 = (v16 + v18++) & v15;
        while (((*(unsigned __int8 *)(v17 + 16 * (v16 / 0x30) + ((v16 % 0x30) >> 3) + 10) >> ((v16 % 0x30) & 7)) & 1) != 0);
      }
      sub_B08FE4((uint64_t *)(a1 + 48), v16, v25);
      sub_ACF3EC(&v21);
      if (v22 == a3[6])
      {
        uint64_t v19 = a3[7];
        if (v23 == v19 && v24 == v19) {
          break;
        }
      }
    }
  }
  ++*(_DWORD *)(a1 + 28);
}

void sub_B08E20(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_B08E34(uint64_t *a1, unint64_t a2)
{
  if (a2) {
    unint64_t v4 = (a2 - 1) / 0x30 + 1;
  }
  else {
    unint64_t v4 = 0;
  }
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v5 = a1[1];
  unint64_t v6 = (v5 - *a1) >> 4;
  if (v4 <= v6)
  {
    if (v4 < v6)
    {
      uint64_t v7 = *a1 + 16 * v4;
      if (v5 != v7)
      {
        uint64_t v8 = a1[1];
        do
        {
          float32x2_t v10 = *(void **)(v8 - 16);
          v8 -= 16;
          unint64_t v9 = v10;
          if (v10)
          {
            free(v9);
            *(void *)(v5 - 16) = 0;
          }
          uint64_t v5 = v8;
        }
        while (v8 != v7);
      }
      a1[1] = v7;
    }
  }
  else
  {
    sub_B085B4(a1, v4 - v6, (uint64_t **)v23);
    if (v23[0]) {
      free(v23[0]);
    }
  }
  if (a1[3] > a2)
  {
    uint64_t v11 = a1[1];
    if (a2 % 0x30)
    {
      sub_B091B8(v11 - 16, v11 - 16, a2 % 0x30, v11 - 16, 0x30u);
      uint64_t v11 = a1[1];
    }
    a1[4] = 0;
    uint64_t v12 = *a1;
    if (*a1 != v11)
    {
      unint64_t v13 = v11 - v12 - 16;
      if (v13 >= 0x10)
      {
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        uint64_t v18 = (v13 >> 4) + 1;
        uint64_t v15 = v12 + 16 * (v18 & 0x1FFFFFFFFFFFFFFELL);
        uint64_t v19 = (unsigned __int16 *)(v12 + 24);
        uint64_t v20 = v18 & 0x1FFFFFFFFFFFFFFELL;
        do
        {
          uint64_t v21 = *(v19 - 8);
          unsigned int v22 = *v19;
          v19 += 16;
          v16 += v21;
          v17 += v22;
          v20 -= 2;
        }
        while (v20);
        uint64_t v14 = v17 + v16;
        if (v18 == (v18 & 0x1FFFFFFFFFFFFFFELL)) {
          goto LABEL_24;
        }
      }
      else
      {
        uint64_t v14 = 0;
        uint64_t v15 = *a1;
      }
      do
      {
        v14 += *(unsigned __int16 *)(v15 + 8);
        v15 += 16;
      }
      while (v15 != v11);
LABEL_24:
      a1[4] = v14;
    }
  }
  a1[3] = a2;
}

void sub_B08FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (a9) {
    free(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B08FE4(uint64_t *a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v5 = a2 / 0x30;
  uint64_t v6 = *a1;
  uint64_t v7 = v6 + 16 * (a2 / 0x30);
  unint64_t v8 = a2 % 0x30;
  unint64_t v9 = (unsigned __int8 *)(v7 + 10);
  if ((unsigned __int16)(a2 % 0x30) < 9u)
  {
    __int16 v10 = 0;
    unint64_t v11 = a2 % 0x30;
    goto LABEL_11;
  }
  __int16 v10 = 0;
  unint64_t v11 = (unsigned __int16)(a2 % 0x30 - 9) >> 3;
  if ((unsigned __int16)(a2 % 0x30 - 9) >> 3)
  {
    __int16 v12 = 0;
    unint64_t v13 = v11 + 1;
    uint64_t v14 = (v11 + 1) & 0x3FFE;
    LOWORD(v11) = v8 - 8 * v14;
    uint64_t v15 = &v9[v14];
    uint64_t v16 = (unsigned __int8 *)(v6 + 16 * v5 + 11);
    uint64_t v17 = v14;
    do
    {
      uint64_t v18 = *(v16 - 1);
      int v19 = *v16;
      v16 += 2;
      v10 += byte_20EC1B6[v18];
      v12 += byte_20EC1B6[v19];
      v17 -= 2;
    }
    while (v17);
    v10 += v12;
    if (v13 == v14) {
      goto LABEL_10;
    }
  }
  else
  {
    unint64_t v11 = a2 % 0x30;
    uint64_t v15 = (unsigned __int8 *)(v7 + 10);
  }
  do
  {
    int v20 = *v15++;
    v10 += byte_20EC1B6[v20];
    LOWORD(v11) = v11 - 8;
  }
  while ((unsigned __int16)v11 > 8u);
LABEL_10:
  v9 += ((unsigned __int16)(v8 - 9) >> 3) + 1;
LABEL_11:
  uint64_t v21 = *(unsigned __int16 *)(v7 + 8);
  unint64_t v22 = v7 + (v8 >> 3);
  int v24 = *(unsigned __int8 *)(v22 + 10);
  uint64_t v23 = (unsigned char *)(v22 + 10);
  unsigned __int16 v25 = v10 + byte_20EC1B6[~(-1 << v11) & (unint64_t)*v9];
  int v26 = 1 << (v8 & 7);
  if ((v26 & v24) == 0)
  {
    sub_ACF864(v7, (unsigned __int16)(v10 + byte_20EC1B6[~(-1 << v11) & (unint64_t)*v9]));
    ++*(_WORD *)(v7 + 8);
    *v23 |= v26;
  }
  uint64_t v27 = 12 * v25;
  uint64_t v28 = *(void *)v7 + v27;
  uint64_t v29 = *a3;
  *(_DWORD *)(v28 + 8) = *((_DWORD *)a3 + 2);
  *(void *)uint64_t v28 = v29;
  uint64_t result = *(void *)v7 + v27;
  a1[4] = a1[4] - v21 + *(unsigned __int16 *)(*a1 + 16 * v5 + 8);
  return result;
}

void sub_B091B8(uint64_t a1, uint64_t a2, unsigned __int16 a3, uint64_t a4, unsigned __int16 a5)
{
  unsigned __int16 v8 = a3;
  if (a2 != a4 || a3 != a5)
  {
    __int16 v9 = 0;
    uint64_t v10 = a1 + 10;
    unsigned __int16 v11 = a3 - 9;
    uint64_t v28 = (unsigned __int8 *)(a1 + 11);
    __int16 v29 = a3 - 9;
    while (1)
    {
      uint64_t v12 = a1 + (v8 >> 3);
      int v14 = *(unsigned __int8 *)(v12 + 10);
      unint64_t v13 = (unsigned char *)(v12 + 10);
      int v15 = 1 << (v8 & 7);
      if ((v15 & v14) == 0) {
        goto LABEL_19;
      }
      if (v8 < 9u)
      {
        __int16 v16 = 0;
        int v19 = (unsigned __int8 *)(a1 + 10);
        LOBYTE(v17) = v8;
        if (*(_WORD *)(a1 + 8) == 1) {
          goto LABEL_15;
        }
        goto LABEL_9;
      }
      if ((unsigned __int16)(v29 + v9) < 8u) {
        break;
      }
      __int16 v20 = 0;
      __int16 v21 = 0;
      uint64_t v22 = ((v11 >> 3) + 1) & 0x3FFE;
      unsigned __int16 v17 = v8 - 8 * ((((unsigned __int16)(v29 + v9) >> 3) + 1) & 0x3FFE);
      uint64_t v18 = (unsigned __int8 *)(v10 + ((((unsigned __int16)(v29 + v9) >> 3) + 1) & 0x3FFE));
      int v24 = v28;
      do
      {
        uint64_t v25 = *(v24 - 1);
        int v26 = *v24;
        v24 += 2;
        v20 += byte_20EC1B6[v25];
        v21 += byte_20EC1B6[v26];
        v22 -= 2;
      }
      while (v22);
      __int16 v16 = v21 + v20;
      uint64_t v23 = ((unsigned __int16)(v29 + v9) >> 3) + 1;
      if ((v23 & 0x3FFE) != v23) {
        goto LABEL_13;
      }
LABEL_14:
      int v19 = (unsigned __int8 *)(v10 + ((unsigned __int16)(v8 - 9) >> 3) + 1);
      if (*(_WORD *)(a1 + 8) == 1)
      {
LABEL_15:
        if (*(void *)a1) {
          free(*(void **)a1);
        }
        *(void *)a1 = 0;
        goto LABEL_18;
      }
LABEL_9:
      sub_ACF740(a1, (unsigned __int16)(v16 + byte_20EC1B6[~(-1 << v17) & *v19]));
LABEL_18:
      --*(_WORD *)(a1 + 8);
      *v13 &= ~(_BYTE)v15;
LABEL_19:
      ++v8;
      ++v9;
      ++v11;
      if (a2 == a4 && v8 == a5) {
        return;
      }
    }
    __int16 v16 = 0;
    unsigned __int16 v17 = v8;
    uint64_t v18 = (unsigned __int8 *)(a1 + 10);
    do
    {
LABEL_13:
      int v27 = *v18++;
      v16 += byte_20EC1B6[v27];
      v17 -= 8;
    }
    while (v17 > 8u);
    goto LABEL_14;
  }
}

uint64_t sub_B093C0(uint64_t a1)
{
  uint64_t v20 = 0;
  long long v19 = 0u;
  memset(v18, 0, sizeof(v18));
  *(_OWORD *)long long __p = 0u;
  memset(v16, 0, sizeof(v16));
  char v22 = 0;
  LOBYTE(v21) = 0;
  sub_C50BD8((char *)__p, &v21);
  if (v22 < 0) {
    operator delete((void *)v21);
  }
  BYTE8(v18[8]) = 0;
  uint64_t v20 = 0;
  long long v19 = 0uLL;
  int v2 = (void **)(a1 + 136);
  int v3 = *(void **)(a1 + 136);
  *(_DWORD *)(a1 + 128) = v16[0];
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 144);
    unint64_t v5 = v3;
    if ((void *)v4 != v3)
    {
      do
      {
        v4 -= 296;
        sub_9F5E28(a1 + 152, v4);
      }
      while ((void *)v4 != v3);
      unint64_t v5 = *v2;
    }
    *(void *)(a1 + 144) = v3;
    operator delete(v5);
    *int v2 = 0;
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
  }
  *(_OWORD *)(a1 + 136) = *(_OWORD *)&v16[1];
  *(void **)(a1 + 152) = v16[3];
  memset(&v16[1], 0, 24);
  uint64_t v6 = (void **)(a1 + 160);
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)uint64_t v6 = *(_OWORD *)__p;
  *(void *)(a1 + 176) = *(void *)&v18[0];
  BYTE7(v18[0]) = 0;
  LOBYTE(__p[0]) = 0;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)((char *)&v18[4] + 8);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)((char *)v18 + 8);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)((char *)&v18[1] + 8);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)((char *)&v18[2] + 8);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)((char *)&v18[3] + 8);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)((char *)&v18[5] + 8);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)((char *)&v18[6] + 8);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)((char *)&v18[7] + 8);
  *(unsigned char *)(a1 + 312) = BYTE8(v18[8]);
  uint64_t v7 = *(void **)(a1 + 320);
  if (v7)
  {
    *(void *)(a1 + 328) = v7;
    operator delete(v7);
    *(void *)(a1 + 320) = 0;
    *(void *)(a1 + 328) = 0;
    *(void *)(a1 + 336) = 0;
    int v8 = SBYTE7(v18[0]);
    *(_OWORD *)(a1 + 320) = v19;
    *(void *)(a1 + 336) = v20;
    uint64_t v20 = 0;
    long long v19 = 0uLL;
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)(a1 + 320) = v19;
    *(void *)(a1 + 336) = v20;
    uint64_t v20 = 0;
    long long v19 = 0uLL;
  }
  if (v16[1])
  {
    __int16 v9 = (char *)v16[2];
    uint64_t v10 = v16[1];
    if (v16[2] != v16[1])
    {
      do
      {
        v9 -= 296;
        sub_9F5E28((uint64_t)&v16[3], (uint64_t)v9);
      }
      while (v9 != v16[1]);
      uint64_t v10 = v16[1];
    }
    v16[2] = v16[1];
    operator delete(v10);
  }
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a1 + 88);
  if (*(void *)(a1 + 384) | *(void *)(a1 + 424))
  {
    for (uint64_t i = *(void *)(a1 + 392); i != *(void *)(a1 + 400); i += 16)
    {
      if (*(void *)i)
      {
        free(*(void **)i);
        *(void *)uint64_t i = 0;
      }
      *(void *)(i + 8) = 0;
    }
    *(void *)(a1 + 424) = 0;
  }
  *(uint64x2_t *)(a1 + 344) = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 360), (float)*(unint64_t *)(a1 + 416))));
  *(unsigned char *)(a1 + 368) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 440) = *(void *)(a1 + 432);
  *(_DWORD *)(a1 + 456) = 0;
  if (*(void *)(a1 + 504) | *(void *)(a1 + 544))
  {
    for (uint64_t j = *(void *)(a1 + 512); j != *(void *)(a1 + 520); j += 16)
    {
      if (*(void *)j)
      {
        free(*(void **)j);
        *(void *)uint64_t j = 0;
      }
      *(void *)(j + 8) = 0;
    }
    *(void *)(a1 + 544) = 0;
  }
  *(uint64x2_t *)(a1 + 464) = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 480), (float)*(unint64_t *)(a1 + 536))));
  *(unsigned char *)(a1 + 488) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 560) = *(void *)(a1 + 552);
  *(_DWORD *)(a1 + 576) = 0;
  *(void *)(a1 + 2016) = 0;
  *(void *)(a1 + 2032) = 0;
  *(void *)(a1 + 2024) = 0;
  int v13 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 1352) = v13;
  *(unsigned char *)(a1 + 1356) = *(unsigned char *)(a1 + 28);
  char v14 = *(unsigned char *)(a1 + 72);
  *(unsigned char *)(a1 + 1357) = v14;
  *(_DWORD *)(a1 + 616) = v13;
  *(unsigned char *)(a1 + 634) = 0;
  *(_DWORD *)(a1 + 636) = 0;
  *(unsigned char *)(a1 + 640) = v14;
  v16[0] = (void *)0x1FFFFFFFDLL;
  uint64_t result = sub_AD28B0(a1 + 344, (uint64_t *)v16);
  *(_DWORD *)(a1 + 584) = result;
  return result;
}

void sub_B09738(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 - 81) < 0) {
    operator delete(*(void **)(v2 - 104));
  }
  sub_20ADF74(v2 - 104, (uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_B09768(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v18 = 0;
  long long v19 = 0;
  int v15 = 0;
  __int16 v16 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  sub_ACDFB0((uint64_t)&v26, v2, a1 + 344, a1 + 464, (void *)(a1 + 592), &v18, &v15, &v24);
  int v3 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)v19;
  if (v19 && !atomic_fetch_add((atomic_ullong *volatile)v19 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v26 = *(void *)(a1 + 8);
  uint64_t v28 = v6;
  int v27 = *(_DWORD *)(a1 + 24);
  char v29 = *(unsigned char *)(a1 + 28);
  char v31 = *(unsigned char *)(a1 + 72);
  int v30 = *(_DWORD *)(a1 + 120);
  sub_AD3BC4((uint64_t)&v26, (_OWORD *)(a1 + 88));
  sub_C50C4C(a1 + 160, (uint64_t)&v32, (uint64_t)&__p);
  if (v23 < 0) {
    operator delete(__p);
  }
  unint64_t v7 = *(void *)(a1 + 2016);
  unint64_t v8 = *(void *)(a1 + 304);
  if (v7 > v8) {
    unint64_t v8 = *(void *)(a1 + 2016);
  }
  *(void *)(a1 + 2016) = v8 + v7;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v18);
    sub_188FC78(&v18, (uint64_t)"Primary SPA scanned ", 20);
    __int16 v9 = (void *)std::ostream::operator<<();
    sub_188FC78(v9, (uint64_t)" stop patterns and obtained ", 28);
    uint64_t v10 = (void *)std::ostream::operator<<();
    sub_188FC78(v10, (uint64_t)" journeys in ", 13);
    unsigned __int16 v11 = (void *)std::ostream::operator<<();
    uint64_t v12 = sub_188FC78(v11, (uint64_t)" ms using ", 10);
    int v13 = (void *)sub_38EC58((uint64_t)v12, &v33);
    sub_188FC78(v13, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v15, 2u);
    if (v17 < 0) {
      operator delete(v15);
    }
    if (v21 < 0) {
      operator delete(v20);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return sub_9FD504((uint64_t)&v26);
}

void sub_B09AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_9FD504((uint64_t)&a69);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_9FD504((uint64_t)&a69);
  _Unwind_Resume(a1);
}

uint64_t sub_B09B50(uint64_t a1, int a2)
{
  int v85 = a2;
  *(_DWORD *)(a1 + 616) = a2;
  long long v3 = *(_OWORD *)(a1 + 104);
  v84[0] = *(_OWORD *)(a1 + 88);
  v84[1] = v3;
  LOBYTE(v84[0]) = 1;
  v83[0] = (uint64_t)v84;
  v83[1] = a1;
  _OWORD v83[2] = (uint64_t)&v85;
  uint64_t v4 = *(_DWORD **)(a1 + 592);
  LODWORD(v79) = (*(_DWORD *)(a1 + 584) << *v4) | (2 * a2) | 1;
  int v5 = *(_DWORD *)(sub_AF1DB0((uint64_t)(v4 + 2), (unsigned int *)&v79) + 4);
  unint64_t v7 = (_DWORD *)(a1 + 92);
  unsigned int v6 = *(_DWORD *)(a1 + 92);
  unsigned int v86 = v6;
  if (*(unsigned char *)(a1 + 49))
  {
    int v8 = 10 * (v5 - v6);
    if (v8 < *(_DWORD *)(a1 + 52)) {
      goto LABEL_16;
    }
    int v9 = sub_B0B17C(v83, v5);
    LODWORD(v75[0]) = v9;
    unsigned int v6 = v86;
    if (v9 != 0x7FFFFFFF && (int)v86 < v9)
    {
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)&v79);
        sub_188FC78(&v79, (uint64_t)"[", 1);
        unsigned __int16 v11 = (void *)std::ostream::operator<<();
        uint64_t v12 = sub_188FC78(v11, (uint64_t)"] Tightening only improved the journey's departure (arrival) from ", 66);
        int v13 = (void *)sub_266E4((uint64_t)v12);
        char v14 = sub_188FC78(v13, (uint64_t)" to ", 4);
        sub_266E4((uint64_t)v14);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 2u);
        if (v78 < 0) {
          operator delete(__p[0]);
        }
        if (v82 < 0) {
          operator delete(v81);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      unsigned int v6 = v75[0];
      unsigned int v86 = v75[0];
    }
    if (*(unsigned char *)(a1 + 49))
    {
LABEL_16:
      if (v8 >= *(_DWORD *)(a1 + 52))
      {
        sub_725D0((uint64_t)__p);
        if (sub_723EC(2u))
        {
          sub_6BAC((uint64_t)&v79);
          sub_188FC78(&v79, (uint64_t)"[", 1);
          int v15 = (void *)std::ostream::operator<<();
          sub_188FC78(v15, (uint64_t)"] Journey duration (", 20);
          __int16 v16 = (void *)std::ostream::operator<<();
          sub_188FC78(v16, (uint64_t)" sec) exceeds tightening threshold; performing tightening by time shift", 71);
          std::stringbuf::str();
          sub_7246C((uint64_t *)v75, 2u);
          if (v76 < 0) {
            operator delete(v75[0]);
          }
          if (v82 < 0) {
            operator delete(v81);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        int v17 = *(_DWORD *)(a1 + 60);
        if (v17 > *(_DWORD *)(a1 + 56))
        {
LABEL_24:
          int v18 = v5;
LABEL_25:
          *(double *)(a1 + 208) = sub_72688((uint64_t)__p);
          unsigned int v6 = v86;
          int v5 = v18;
          unint64_t v7 = (_DWORD *)(a1 + 92);
          goto LABEL_26;
        }
        while (1)
        {
          *(double *)(a1 + 272) = *(double *)(a1 + 272) + 1.0;
          if (sub_723EC(2u))
          {
            sub_6BAC((uint64_t)&v79);
            sub_188FC78(&v79, (uint64_t)"[", 1);
            uint64_t v38 = (void *)std::ostream::operator<<();
            sub_188FC78(v38, (uint64_t)"] Examining time shift of ", 26);
            int v39 = v17 / 10;
            int v40 = v17 % 10;
            uint64_t v41 = (void *)std::ostream::operator<<();
            sub_188FC78(v41, (uint64_t)" sec (exponential search)", 25);
            std::stringbuf::str();
            sub_7246C((uint64_t *)v75, 2u);
            if (v76 < 0) {
              operator delete(v75[0]);
            }
            uint64_t v79 = v74;
            *(uint64_t *)((char *)&v79 + *(void *)(v74 - 24)) = v73;
            if (v82 < 0) {
              operator delete(v81);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            std::ios::~ios();
          }
          else
          {
            int v39 = v17 / 10;
            int v40 = v17 % 10;
          }
          if (v17 < 0) {
            char v42 = -5;
          }
          else {
            char v42 = 5;
          }
          unsigned int v43 = v39 + (((103 * (char)(v42 + v40)) >> 15) & 1) + ((103 * (char)(v42 + v40)) >> 10);
          int v44 = v5;
          int v18 = v43 + v5;
          unsigned int v45 = sub_B0B17C(v83, v43 + v5);
          if (*(double *)(a1 + 64) * (double)(int)fabs((double)(int)(10 * (v45 - v86))) >= (double)(int)fabs((double)(int)(10 * v43)))
          {
            unsigned int v47 = v45;
            if (sub_723EC(2u))
            {
              sub_6BAC((uint64_t)&v79);
              sub_188FC78(&v79, (uint64_t)"[", 1);
              uint64_t v48 = (void *)std::ostream::operator<<();
              sub_188FC78(v48, (uint64_t)"] Journey duration improved from ", 33);
              uint64_t v49 = (void *)std::ostream::operator<<();
              sub_188FC78(v49, (uint64_t)" to ", 4);
              uint64_t v50 = (void *)std::ostream::operator<<();
              sub_188FC78(v50, (uint64_t)" sec for time shift of ", 23);
              uint64_t v51 = (void *)std::ostream::operator<<();
              sub_188FC78(v51, (uint64_t)" sec", 4);
              std::stringbuf::str();
              sub_7246C((uint64_t *)v75, 2u);
              if (v76 < 0) {
                operator delete(v75[0]);
              }
              uint64_t v79 = v74;
              *(uint64_t *)((char *)&v79 + *(void *)(v74 - 24)) = v73;
              if (v82 < 0) {
                operator delete(v81);
              }
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              std::ios::~ios();
            }
            unsigned int v86 = v47;
            if (!v43) {
              goto LABEL_25;
            }
            double v52 = (double)v17 * 0.5;
            if (v52 >= 0.0)
            {
              if (v52 < 4.50359963e15)
              {
                uint64_t v53 = (uint64_t)(v52 + v52) + 1;
                goto LABEL_83;
              }
            }
            else if (v52 > -4.50359963e15)
            {
              uint64_t v53 = (uint64_t)(v52 + v52);
              if (v53 >= 1) {
                --v53;
              }
LABEL_83:
              double v52 = (double)(v53 >> 1);
            }
            double v54 = (double)v17 * 0.25;
            if (v54 >= 0.0)
            {
              if (v54 < 4.50359963e15)
              {
                uint64_t v55 = (uint64_t)(v54 + v54) + 1;
                goto LABEL_91;
              }
            }
            else if (v54 > -4.50359963e15)
            {
              uint64_t v55 = (uint64_t)(v54 + v54);
              if (v55 >= 1) {
                --v55;
              }
LABEL_91:
              double v54 = (double)(v55 >> 1);
            }
            int v56 = (int)v54;
            if (*(_DWORD *)(a1 + 60) > (int)v54) {
              goto LABEL_25;
            }
            int v57 = (int)v52;
            while (2)
            {
              *(double *)(a1 + 272) = *(double *)(a1 + 272) + 1.0;
              int v59 = v56 + v57;
              if (sub_723EC(2u))
              {
                sub_6BAC((uint64_t)&v79);
                sub_188FC78(&v79, (uint64_t)"[", 1);
                unsigned __int16 v60 = (void *)std::ostream::operator<<();
                sub_188FC78(v60, (uint64_t)"] Examining time shift of ", 26);
                int v61 = v59 / 10;
                int v62 = v59 % 10;
                uint64_t v63 = (void *)std::ostream::operator<<();
                sub_188FC78(v63, (uint64_t)" sec (binary refinement search)", 31);
                std::stringbuf::str();
                sub_7246C((uint64_t *)v75, 2u);
                if (v76 < 0) {
                  operator delete(v75[0]);
                }
                uint64_t v79 = v74;
                *(uint64_t *)((char *)&v79 + *(void *)(v74 - 24)) = v73;
                if (v82 < 0) {
                  operator delete(v81);
                }
                std::streambuf::~streambuf();
                std::ostream::~ostream();
                std::ios::~ios();
              }
              else
              {
                int v61 = v59 / 10;
                int v62 = v59 % 10;
              }
              if (v59 < 0) {
                char v64 = -5;
              }
              else {
                char v64 = 5;
              }
              unsigned int v65 = v61 + (((103 * (char)(v64 + v62)) >> 15) & 1) + ((103 * (char)(v64 + v62)) >> 10);
              unsigned int v66 = sub_B0B17C(v83, v65 + v44);
              if (*(double *)(a1 + 64) * (double)(int)fabs((double)(int)(10 * (v86 - v66))) >= (double)(int)fabs((double)(int)(10 * (v18 - (v65 + v44)))))
              {
                v57 += v56;
                double v58 = (double)v56 * 0.5;
                if (v58 >= 0.0) {
                  goto LABEL_114;
                }
              }
              else
              {
                unsigned int v67 = v66;
                if (sub_723EC(2u))
                {
                  sub_6BAC((uint64_t)&v79);
                  sub_188FC78(&v79, (uint64_t)"[", 1);
                  uint64_t v68 = (void *)std::ostream::operator<<();
                  sub_188FC78(v68, (uint64_t)"] Journey duration improved from ", 33);
                  unint64_t v69 = (void *)std::ostream::operator<<();
                  sub_188FC78(v69, (uint64_t)" to ", 4);
                  unint64_t v70 = (void *)std::ostream::operator<<();
                  sub_188FC78(v70, (uint64_t)" sec for time shift of ", 23);
                  uint64_t v71 = (void *)std::ostream::operator<<();
                  sub_188FC78(v71, (uint64_t)" sec", 4);
                  std::stringbuf::str();
                  sub_7246C((uint64_t *)v75, 2u);
                  if (v76 < 0) {
                    operator delete(v75[0]);
                  }
                  uint64_t v79 = v74;
                  *(uint64_t *)((char *)&v79 + *(void *)(v74 - 24)) = v73;
                  if (v82 < 0) {
                    operator delete(v81);
                  }
                  std::streambuf::~streambuf();
                  std::ostream::~ostream();
                  std::ios::~ios();
                }
                unsigned int v86 = v67;
                int v18 = v65 + v44;
                double v58 = (double)v56 * 0.5;
                if (v58 >= 0.0)
                {
LABEL_114:
                  if (v58 < 4.50359963e15)
                  {
                    uint64_t v72 = (uint64_t)(v58 + v58) + 1;
                    goto LABEL_94;
                  }
                  goto LABEL_95;
                }
              }
              if (v58 > -4.50359963e15)
              {
                uint64_t v72 = (uint64_t)(v58 + v58);
                if (v72 >= 1) {
                  --v72;
                }
LABEL_94:
                double v58 = (double)(v72 >> 1);
              }
LABEL_95:
              int v56 = (int)v58;
              if (*(_DWORD *)(a1 + 60) > (int)v58) {
                goto LABEL_25;
              }
              continue;
            }
          }
          double v37 = (double)v17 + (double)v17;
          if (v37 >= 0.0)
          {
            if (v37 >= 4.50359963e15) {
              goto LABEL_50;
            }
            uint64_t v46 = (uint64_t)(v37 + v37) + 1;
          }
          else
          {
            if (v37 <= -4.50359963e15) {
              goto LABEL_50;
            }
            uint64_t v46 = (uint64_t)(v37 + v37);
            if (v46 >= 1) {
              --v46;
            }
          }
          double v37 = (double)(v46 >> 1);
LABEL_50:
          int v17 = (int)v37;
          if (*(_DWORD *)(a1 + 56) < (int)v37) {
            goto LABEL_24;
          }
        }
      }
    }
  }
LABEL_26:
  if (v6 != *v7)
  {
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v79);
      sub_188FC78(&v79, (uint64_t)"[", 1);
      long long v19 = (void *)std::ostream::operator<<();
      uint64_t v20 = sub_188FC78(v19, (uint64_t)"] Shifting ", 11);
      char v21 = sub_188FC78(v20, (uint64_t)"departure", 9);
      char v22 = sub_188FC78(v21, (uint64_t)" time from ", 11);
      char v23 = (void *)sub_266E4((uint64_t)v22);
      uint64_t v24 = sub_188FC78(v23, (uint64_t)" to ", 4);
      sub_266E4((uint64_t)v24);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 2u);
      if (v78 < 0) {
        operator delete(__p[0]);
      }
      if (v82 < 0) {
        operator delete(v81);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *(void *)(a1 + 280) = 0x3FF0000000000000;
  }
  int v25 = v85;
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_41;
  }
  int v26 = v85 + 1;
  int v27 = *(_DWORD *)(a1 + 24);
  if (v85 + 1 <= (v27 + 1)) {
    int v26 = v27 + 1;
  }
  if (v85 + 1 < (v27 + 1))
  {
    int v28 = v26 - 1;
    int v29 = 2 * v85 + 3;
    int v30 = v85;
    while (1)
    {
      char v31 = *(_DWORD **)(a1 + 592);
      LODWORD(v79) = (*(_DWORD *)(a1 + 584) << *v31) | v29;
      if (*(_DWORD *)(sub_AF1DB0((uint64_t)(v31 + 2), (unsigned int *)&v79) + 4) != 0x7FFFFFFF) {
        break;
      }
      ++v30;
      v29 += 2;
      if (v28 == v30) {
        goto LABEL_41;
      }
    }
  }
  else
  {
LABEL_41:
    if (*(_DWORD *)(a1 + 24) >= (*(_DWORD *)(a1 + 124) + v25)) {
      int v30 = *(_DWORD *)(a1 + 124) + v25;
    }
    else {
      int v30 = *(_DWORD *)(a1 + 24);
    }
  }
  *(_DWORD *)(a1 + 616) = v30;
  int v32 = *(_DWORD *)(a1 + 120);
  int v33 = v32 / 10;
  int v34 = v32 % 10;
  if (v32 < 0) {
    char v35 = -5;
  }
  else {
    char v35 = 5;
  }
  sub_B0B17C(v83, v33 + v5 + (((103 * (char)(v35 + v34)) >> 15) & 1) + ((103 * (char)(v35 + v34)) >> 10));
  return v86;
}

void sub_B0AC34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a22 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a29);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_B0ADA8(uint64_t a1, int a2, int a3)
{
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_8;
  }
  int v6 = a2 + 1;
  int v7 = *(_DWORD *)(a1 + 24);
  if (a2 + 1 <= (v7 + 1)) {
    int v6 = v7 + 1;
  }
  if (a2 + 1 < (v7 + 1))
  {
    int v8 = v6 - 1;
    int v9 = 2 * a2 + 3;
    int v10 = a2;
    while (1)
    {
      unsigned __int16 v11 = *(_DWORD **)(a1 + 592);
      LODWORD(v26[0]) = (*(_DWORD *)(a1 + 584) << *v11) | v9;
      if (*(_DWORD *)(sub_AF1DB0((uint64_t)(v11 + 2), (unsigned int *)v26) + 4) != 0x7FFFFFFF) {
        break;
      }
      ++v10;
      v9 += 2;
      if (v8 == v10) {
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    if (*(_DWORD *)(a1 + 24) >= (*(_DWORD *)(a1 + 124) + a2)) {
      int v10 = *(_DWORD *)(a1 + 124) + a2;
    }
    else {
      int v10 = *(_DWORD *)(a1 + 24);
    }
  }
  long long v12 = *(_OWORD *)(a1 + 104);
  v38[0] = *(_OWORD *)(a1 + 88);
  v38[1] = v12;
  DWORD1(v38[0]) = a3;
  *(_DWORD *)(a1 + 1352) = v10;
  sub_B0B438(a1 + 1336, v38);
  sub_B0B6E0(a1 + 1336, (uint64_t)v30);
  sub_C50C4C(a1 + 160, a1 + 1864, (uint64_t)&__p);
  if (v29 < 0) {
    operator delete(__p);
  }
  unint64_t v13 = *(void *)(a1 + 2008);
  *(void *)(a1 + 304) -= v13;
  unint64_t v14 = *(void *)(a1 + 2032);
  if (v14 <= v13) {
    unint64_t v14 = v13;
  }
  *(void *)(a1 + 2032) = v14;
  sub_A4D564((uint64_t)v26, (uint64_t)v31, (uint64_t)v32, a1 + 136);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v26);
    sub_188FC78(v26, (uint64_t)"[", 1);
    int v15 = (void *)std::ostream::operator<<();
    sub_188FC78(v15, (uint64_t)"] McSPA scanned ", 16);
    __int16 v16 = (void *)std::ostream::operator<<();
    sub_188FC78(v16, (uint64_t)" stop patterns and obtained ", 28);
    int v17 = (void *)std::ostream::operator<<();
    sub_188FC78(v17, (uint64_t)" journeys in ", 13);
    int v18 = (void *)std::ostream::operator<<();
    long long v19 = sub_188FC78(v18, (uint64_t)" ms using ", 10);
    uint64_t v20 = (void *)sub_38EC58((uint64_t)v19, (unint64_t *)(a1 + 2008));
    sub_188FC78(v20, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v24, 2u);
    if (v25 < 0) {
      operator delete(v24);
    }
    if (v27 < 0) {
      operator delete((void *)v26[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (v36)
  {
    double v37 = v36;
    operator delete(v36);
  }
  if (v35 < 0) {
    operator delete(v34);
  }
  char v21 = (char *)v31;
  if (v31)
  {
    char v22 = v32;
    char v23 = v31;
    if (v32 != v31)
    {
      do
      {
        v22 -= 296;
        sub_9F5E28((uint64_t)&v33, (uint64_t)v22);
      }
      while (v22 != v21);
      char v23 = v31;
    }
    int v32 = v21;
    operator delete(v23);
  }
}

void sub_B0B100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_9F53E0((uint64_t)&a67);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_9F53E0((uint64_t)&a67);
  _Unwind_Resume(a1);
}

uint64_t sub_B0B17C(uint64_t *a1, int a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  *(_DWORD *)(v2 + 4) = a2;
  sub_AD8EF4(v3 + 608, (_OWORD *)v2);
  sub_C50C4C(v3 + 160, v3 + 1184, (uint64_t)&v20);
  if (v21 < 0) {
    operator delete(v20);
  }
  unint64_t v4 = *(void *)(v3 + 1328);
  *(void *)(v3 + 304) -= v4;
  unint64_t v5 = *(void *)(v3 + 2024);
  if (v5 <= v4) {
    unint64_t v5 = v4;
  }
  *(void *)(v3 + 2024) = v5;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v18);
    sub_188FC78(v18, (uint64_t)"[", 1);
    int v6 = (void *)std::ostream::operator<<();
    sub_188FC78(v6, (uint64_t)"] Secondary SPA scanned ", 24);
    int v7 = (void *)std::ostream::operator<<();
    sub_188FC78(v7, (uint64_t)" stop patterns and obtained ", 28);
    int v8 = (void *)std::ostream::operator<<();
    sub_188FC78(v8, (uint64_t)" journeys in ", 13);
    int v9 = (void *)std::ostream::operator<<();
    int v10 = sub_188FC78(v9, (uint64_t)" ms using ", 10);
    unsigned __int16 v11 = (void *)sub_38EC58((uint64_t)v10, (unint64_t *)(v3 + 1328));
    sub_188FC78(v11, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (v17 < 0) {
      operator delete(__p);
    }
    if (v19 < 0) {
      operator delete((void *)v18[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unint64_t v12 = *(unsigned int *)(v3 + 1040);
  uint64_t v13 = *(void *)(v3 + 800);
  unint64_t v14 = (*(void *)(v3 + 808) - v13) >> 2;
  if (v14 <= v12)
  {
    sub_5BBEE0(v3 + 800, v12 - v14 + 1);
    uint64_t v13 = *(void *)(v3 + 800);
  }
  return *(unsigned int *)(v13 + 4 * v12);
}

void sub_B0B3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_B0B438(uint64_t a1, _OWORD *a2)
{
  sub_725D0((uint64_t)v36);
  long long v4 = a2[1];
  *(_OWORD *)(a1 + 64) = *a2;
  *(_OWORD *)(a1 + 80) = v4;
  sub_B0DC70(a1);
  uint64_t v5 = *(void *)(a1 + 32);
  v37[0] = 0x1FFFFFFFDLL;
  *(_DWORD *)(a1 + 416) = sub_AD28B0(v5, v37);
  sub_B0DEC8(a1);
  if (*(_DWORD *)(a1 + 100) >= 2u)
  {
    uint64_t v6 = 1;
    while (1)
    {
      if (v6)
      {
        char v17 = *(unsigned int **)(a1 + 320);
        int v18 = *(unsigned int **)(a1 + 328);
        if (v17 != v18)
        {
          uint64_t v19 = *(void *)(a1 + 296);
          uint64_t v20 = *(unsigned int **)(a1 + 320);
          do
          {
            unsigned int v21 = *v20++;
            *(void *)(v19 + (((unint64_t)v21 >> 3) & 0x1FFFFFF8)) &= ~(1 << v21);
          }
          while (v20 != v18);
        }
        *(void *)(a1 + 328) = v17;
        sub_B0E030(a1, v6);
        sub_B0E2D0(a1, v6);
        uint64_t v16 = *(void *)(a1 + 320);
        if (v16 == *(void *)(a1 + 328)) {
          goto LABEL_22;
        }
        uint64_t v15 = *(void *)(a1 + 272);
      }
      else
      {
        int v7 = *(unsigned int **)(a1 + 272);
        int v8 = *(unsigned int **)(a1 + 280);
        if (v7 != v8)
        {
          uint64_t v9 = *(void *)(a1 + 248);
          int v10 = *(unsigned int **)(a1 + 272);
          do
          {
            unsigned int v11 = *v10++;
            *(void *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) &= ~(1 << v11);
          }
          while (v10 != v8);
        }
        *(void *)(a1 + 280) = v7;
        sub_AE1608((void *)a1);
        sub_725D0((uint64_t)v37);
        unint64_t v12 = *(unsigned int **)(a1 + 392);
        uint64_t v13 = *(unsigned int **)(a1 + 400);
        while (v12 != v13)
        {
          unsigned int v14 = *v12++;
          sub_B12344(a1, v6, v14);
        }
        *(double *)(a1 + 560) = sub_72688((uint64_t)v37) + *(double *)(a1 + 560);
        uint64_t v15 = *(void *)(a1 + 272);
        if (v15 == *(void *)(a1 + 280)) {
          goto LABEL_22;
        }
        uint64_t v16 = *(void *)(a1 + 320);
      }
      uint64_t v34 = *(void *)(a1 + 208);
      uint64_t v35 = *(void *)(a1 + 176);
      uint64_t v32 = 8 * (*(void *)(a1 + 232) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v33 = *(void *)(a1 + 192);
      uint64_t v22 = *(void *)(a1 + 288);
      uint64_t v23 = 8 * (*(void *)(a1 + 312) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v24 = *(void *)(a1 + 360);
      uint64_t v25 = *(void *)(a1 + 336);
      uint64_t v30 = *(void *)(a1 + 344);
      uint64_t v31 = 8 * (*(void *)(a1 + 264) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v29 = *(void *)(a1 + 392);
      uint64_t v26 = 8 * (*(void *)(a1 + 384) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v27 = *(void *)(a1 + 408);
      unint64_t v28 = v34
          + 12 * v35
          - v33
          + v32
          + v22
          + v31
          - v15
          + v25
          + v23
          + v24
          - (v16
           + v30)
          + v26
          + v27
          - v29
          + sub_BD6170((void *)(a1 + 424))
          + 680;
      if (*(void *)(a1 + 672) > v28) {
        unint64_t v28 = *(void *)(a1 + 672);
      }
      *(void *)(a1 + 672) = v28;
      if (!sub_B0F8D4(a1) && ++v6 < (unint64_t)*(unsigned int *)(a1 + 100)) {
        continue;
      }
      goto LABEL_22;
    }
  }
  LODWORD(v6) = 1;
LABEL_22:
  sub_B0FC24(a1);
  *(double *)(a1 + 600) = (double)v6;
  *(double *)(a1 + 552) = sub_72688((uint64_t)v36);
}

std::string *sub_B0B6E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0;
  uint64_t v336 = (uint64_t *)(a2 + 8);
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  HIBYTE(v370) = 0;
  LOBYTE(__p[0]) = 0;
  long long v334 = (std::string *)(a2 + 32);
  sub_C50BD8((char *)(a2 + 32), (long long *)__p);
  if (SHIBYTE(v370) < 0) {
    operator delete(*(void **)__p);
  }
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  uint64_t v4 = a2 + 192;
  *(void *)(v4 + 16) = 0;
  *(unsigned char *)(v4 - 8) = *(unsigned char *)(a1 + 64);
  unsigned int v5 = *(_DWORD *)(a1 + 100);
  if (v5 <= 1) {
    int v6 = 1;
  }
  else {
    int v6 = *(_DWORD *)(a1 + 100);
  }
  int v335 = v6;
  if (v5 >= 2)
  {
    int v8 = (void *)(a1 + 104);
    __asm { FMOV            V0.2D, #1.0 }
    long long v338 = _Q0;
    int v337 = 1;
    uint64_t v342 = a1 + 104;
    uint64_t v343 = a1;
    do
    {
      __p[0] = 0;
      uint64_t v12 = *(void *)(a1 + 192);
      uint64_t v13 = *(unsigned int *)(sub_B1041C((uint64_t)v8, __p) + 4);
      __p[0] = 0;
      uint64_t v14 = *(void *)(a1 + 192);
      uint64_t v15 = sub_B1041C((uint64_t)v8, __p);
      sub_B10058((uint64_t)v8, 0, (char *)(v12 + (v13 << 6)), (unsigned char *)(v14 + ((unint64_t)*(unsigned int *)(v15 + 8) << 6)));
      sub_B121F0(v8, v337 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * *(_DWORD *)(a1 + 416) + 2, 0);
      __p[0] = 0;
      uint64_t v16 = *(void *)(a1 + 192);
      uint64_t v17 = *(unsigned int *)(sub_B1041C((uint64_t)v8, __p) + 4);
      __p[0] = 0;
      uint64_t v18 = *(void *)(a1 + 192);
      int v341 = (unsigned int *)(v16 + (v17 << 6));
      int v339 = (unsigned int *)(v18 + ((unint64_t)*(unsigned int *)(sub_B1041C((uint64_t)v8, __p) + 8) << 6));
      for (_ZF = v341 == v339; !_ZF; _ZF = v341 == v339)
      {
        LOWORD(__p[0]) = 0;
        BYTE2(__p[0]) = 0;
        *(void *)&__p[1] = 0;
        *(void *)&__p[3] = 0x7FFFFFFFFFFFFFFFLL;
        int v370 = 0x7FFFFFFF;
        __int16 v371 = 0;
        unint64_t v372 = 0x8000000080000000;
        __int16 v373 = 0;
        unint64_t v374 = 0x8000000080000000;
        int v375 = 0x7FFFFFFF;
        __int16 v376 = 0;
        unint64_t v377 = 0x8000000080000000;
        __int16 v378 = 0;
        unint64_t v379 = 0x8000000080000000;
        __int16 v380 = 0;
        unint64_t v381 = 0xFFFFFFFF00000000;
        int v382 = -1;
        uint64_t v383 = 0;
        long long v385 = 0;
        uint64_t v386 = 0;
        uint64_t v387 = 0;
        int v384 = 0x7FFFFFFF;
        int v388 = 100;
        int v389 = -1;
        long long v390 = v338;
        long long v391 = v338;
        long long v392 = v338;
        long long v393 = 0u;
        long long v394 = 0u;
        long long v395 = 0u;
        long long v396 = 0u;
        uint64_t v20 = *(void *)(a1 + 24);
        long long v397 = 0u;
        long long v398 = 0u;
        if (sub_C259C0(v20 + 3896) && *(void *)(v20 + 3944))
        {
          BOOL v21 = 1;
        }
        else
        {
          uint64_t v22 = *(void *)(a1 + 24);
          BOOL v21 = sub_C259D4(v22 + 3896) && *(void *)(v22 + 3960) != 0;
        }
        BYTE1(__p[0]) = v21;
        uint64_t v23 = *(void *)(a1 + 24);
        if (!sub_C259D4(v23 + 3896))
        {
          __p[1] = 0;
          if (*v341 == -1) {
            goto LABEL_390;
          }
LABEL_23:
          unsigned int v24 = *(_DWORD *)(a1 + 416);
          uint64_t v25 = v341;
          int v344 = v337;
          while (2)
          {
            uint64_t v361 = 0;
            unint64_t v362 = 0;
            unint64_t v363 = 0;
            unint64_t v366 = 0;
            uint64_t v367 = 0;
            int v365 = 0;
            v368[0] = 1;
            *(void *)&v368[4] = 0x8000000080000000;
            *(_WORD *)&v368[12] = 0;
            v368[14] = 0;
            int v421 = -1;
            if (v25[4] == -1)
            {
LABEL_275:
              char v364 = 1;
              unsigned int v243 = v25[3];
              unsigned int v244 = v25[7];
              uint64_t v245 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), *v25);
              uint64_t v246 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), v24);
              *(_DWORD *)long long v401 = 0;
              *(_DWORD *)&v401[4] = v243;
              *(void *)&v401[12] = v245;
              *(void *)&v401[20] = v246;
              *(_DWORD *)&v401[8] = v244;
              int v410 = 1;
              if (v421)
              {
                if (v421 == 1)
                {
                  *(_OWORD *)int v411 = *(_OWORD *)v401;
                  *(_OWORD *)&v411[12] = *(_OWORD *)&v401[12];
                  goto LABEL_287;
                }
LABEL_286:
                *(_OWORD *)int v411 = *(_OWORD *)v401;
                *(_OWORD *)&v411[12] = *(_OWORD *)&v401[12];
                int v421 = 1;
              }
              else
              {
                if ((void)v418)
                {
                  *((void *)&v418 + 1) = v418;
                  operator delete((void *)v418);
                }
                if ((void)v415)
                {
                  *((void *)&v415 + 1) = v415;
                  operator delete((void *)v415);
                }
                if (v413[0])
                {
                  v413[1] = v413[0];
                  operator delete(v413[0]);
                }
                if (v410)
                {
                  if (v410 == 1) {
                    goto LABEL_286;
                  }
                  int v421 = v410;
                }
                else
                {
                  sub_9F6FA0((uint64_t)v411, (long long *)v401);
                  int v421 = v410;
                  if (!v410)
                  {
                    if ((void)v407)
                    {
                      *((void *)&v407 + 1) = v407;
                      operator delete((void *)v407);
                    }
                    if (v405[0])
                    {
                      v405[1] = v405[0];
                      operator delete(v405[0]);
                    }
                    if ((void)v403)
                    {
                      *((void *)&v403 + 1) = v403;
                      operator delete((void *)v403);
                    }
                  }
                }
              }
LABEL_287:
              unsigned int v24 = *v25;
              uint64_t v240 = (uint64_t)v362;
              if ((unint64_t)v362 >= v363) {
                goto LABEL_288;
              }
LABEL_270:
              *(_DWORD *)(v240 + 160) = v421;
              if (v421 == 1)
              {
                long long v274 = *(_OWORD *)v411;
                *(_OWORD *)(v240 + 12) = *(_OWORD *)&v411[12];
                *(_OWORD *)uint64_t v240 = v274;
                unint64_t v362 = (char *)(v240 + 168);
                uint64_t v241 = *((void *)&v393 + 1);
                if (*((void *)&v393 + 1) < (unint64_t)v394) {
                  goto LABEL_289;
                }
              }
              else
              {
                if (!v421) {
                  sub_9F6FA0(v240, (long long *)v411);
                }
                unint64_t v362 = (char *)(v240 + 168);
                uint64_t v241 = *((void *)&v393 + 1);
                if (*((void *)&v393 + 1) < (unint64_t)v394) {
                  goto LABEL_289;
                }
              }
LABEL_274:
              uint64_t v242 = sub_A4CECC((void ***)&v393, (uint64_t)&v361);
              goto LABEL_302;
            }
            long long v345 = xmmword_20E12E0;
            __int16 v346 = 0;
            unint64_t v347 = 0x8000000080000000;
            __int16 v348 = 0;
            *(_OWORD *)uint64_t v349 = xmmword_20EB6B0;
            *(void *)&v349[16] = 0xFFFFFFFF7FFFFFFFLL;
            long long v351 = 0u;
            long long v352 = 0u;
            long long v353 = 0u;
            int v350 = -1;
            int v354 = 0x7FFFFFFF;
            uint64_t v356 = 0;
            uint64_t v357 = 0;
            uint64_t v355 = 0;
            char v358 = 1;
            unint64_t v359 = 0x8000000080000000;
            int v360 = 0;
            char v364 = 0;
            uint64_t v27 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 40) + 88), v25[4]);
            *(void *)uint64_t v349 = v27;
            uint64_t v28 = *(void *)(v25 + 1);
            *(_DWORD *)&v349[16] = v25[3];
            *(void *)&v349[8] = v28;
            *(_DWORD *)&v349[20] = *v25;
            unsigned int v29 = *(_DWORD *)&v349[20];
            uint64_t v30 = *(void *)(a1 + 24);
            unint64_t v399 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), v24);
            sub_A1E9A0((uint64_t)v401, v30, v27, v29, 0, 0);
            *(void *)&long long v403 = *(void *)&v402[24] + 12 * *(unsigned int *)&v349[8];
            if (LOBYTE(v405[1])) {
              *(void **)((char *)&v405[1] + 4) = *(void **)&v349[12];
            }
            if (*(void *)&v402[16]) {
              uint64_t v31 = *(unsigned int *)(*(void *)&v402[16]
            }
                                    + 4 * ((*(void *)v402 - *(void *)&v401[24]) >> 4));
            else {
              uint64_t v31 = 0;
            }
            sub_A4C9D4((uint64_t)v401, &v399, v31);
            _CF = *(void *)v402 < *(void *)&v402[8] && *(void *)v402 >= *(void *)&v401[24];
            uint64_t v33 = (*(void *)v402 - *(void *)&v401[24]) >> 4;
            if (!_CF) {
              LODWORD(v33) = -1;
            }
            int v350 = v33;
            uint64_t v34 = *(void *)(a1 + 32);
            uint64_t v35 = (void *)(*(void *)(a1 + 24) + 4136);
            unint64_t v36 = *(void *)v349;
            unsigned int v37 = *(_DWORD *)&v349[20];
            uint64_t v38 = HIDWORD(*(void *)v349);
            if (sub_A10E20(v35, *(int *)&v349[4]))
            {
              int v39 = (int *)sub_A1120C(*(void *)(*v35 + 3944), v36);
            }
            else
            {
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                && __cxa_guard_acquire(&qword_24F7308))
              {
                sub_518C8(0x3B60u, 0x7FCAu);
                dword_24F7300 = v303 | 0x40000000;
                __cxa_guard_release(&qword_24F7308);
              }
              uint64_t v40 = *v35;
              if (dword_24F7300 == v38)
              {
                uint64_t v41 = *(unsigned int **)(*(void *)(v40 + 3976) + 72);
                if (!v41)
                {
                  exception = __cxa_allocate_exception(0x40uLL);
                  sub_5E5C(v401, "Realtime stop pattern quad data requested on nullptr buffer");
                  int v331 = (void *)sub_2F404((uint64_t)exception, (long long *)v401);
                }
                char v42 = (int *)((char *)v41 + *v41);
                unsigned int v43 = (unsigned __int16 *)((char *)v42 - *v42);
                if (*v43 >= 5u && (uint64_t v44 = v43[2]) != 0) {
                  unsigned int v45 = (unsigned int *)((char *)v42 + v44 + *(unsigned int *)((char *)v42 + v44));
                }
                else {
                  unsigned int v45 = 0;
                }
                int v39 = (int *)sub_A1139C(v45, v36);
              }
              else
              {
                int v39 = (int *)sub_A11500(v40 + 24, v36, 0, "stop pattern");
              }
            }
            uint64_t v46 = (unsigned __int16 *)((char *)v39 - *v39);
            if (*v46 >= 9u && (uint64_t v47 = v46[4]) != 0) {
              uint64_t v48 = (unsigned int *)((char *)v39 + v47 + *(unsigned int *)((char *)v39 + v47));
            }
            else {
              uint64_t v48 = 0;
            }
            uint64_t v49 = (void *)sub_A10764(v48, v37);
            uint64_t v50 = 0;
            unint64_t v51 = __ROR8__(*v49, 32);
            uint64_t v52 = *(void *)(v34 + 72) - 1;
            unint64_t v53 = 0xC4CEB9FE1A85EC53
                * ((0xFF51AFD7ED558CCDLL * (v51 ^ (v51 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v51 ^ (v51 >> 33))) >> 33));
            unint64_t v54 = v53 ^ (v53 >> 33);
            uint64_t v55 = *(void *)(v34 + 48);
            uint64_t v56 = v55 + 11;
            uint64_t v57 = -1;
            unint64_t v58 = v54;
LABEL_57:
            uint64_t v59 = v58 & v52;
            unint64_t v60 = (v58 & v52) / 0x30;
            unint64_t v61 = v59 - 48 * v60;
            if (((*(unsigned __int8 *)(v55 + 16 * v60 + (v61 >> 3) + 10) >> (v61 & 7)) & 1) == 0)
            {
              if (v57 == -1) {
                unint64_t v97 = v59;
              }
              else {
                unint64_t v97 = v57;
              }
              goto LABEL_94;
            }
            uint64_t v62 = *(void *)(v55 + 16 * v60);
            if (!*(void *)(v34 + 40)) {
              goto LABEL_73;
            }
            uint64_t v63 = (unsigned __int8 *)(v55 + 16 * v60 + 10);
            if ((unsigned __int16)(v59 - 48 * v60) < 9u)
            {
              __int16 v64 = 0;
              LOBYTE(v69) = v59 - 48 * v60;
              goto LABEL_69;
            }
            __int16 v64 = 0;
            uint64_t v65 = (unsigned __int16)(v59 - 48 * v60 - 9) >> 3;
            if ((unsigned __int16)(v59 - 48 * v60 - 9) >> 3)
            {
              __int16 v66 = 0;
              uint64_t v67 = v65 + 1;
              uint64_t v68 = (v65 + 1) & 0x3FFE;
              unsigned __int16 v69 = v61 - 8 * v68;
              unint64_t v70 = &v63[v68];
              uint64_t v71 = (unsigned __int8 *)(v56 + 16 * v60);
              uint64_t v72 = v68;
              do
              {
                uint64_t v73 = *(v71 - 1);
                int v74 = *v71;
                v71 += 2;
                v64 += byte_20EBFB6[v73];
                v66 += byte_20EBFB6[v74];
                v72 -= 2;
              }
              while (v72);
              v64 += v66;
              if (v67 == v68)
              {
LABEL_68:
                v63 += ((unsigned __int16)(v61 - 9) >> 3) + 1;
LABEL_69:
                char v76 = (_DWORD *)(v62
                               + 12
                               * (unsigned __int16)(v64
                                                  + byte_20EBFB6[~(-1 << v69) & (unint64_t)*v63]));
                if (*(_DWORD *)(v34 + 36) == v76[1] && *(_DWORD *)(v34 + 32) == *v76)
                {
                  if (v57 == -1) {
                    uint64_t v57 = v59;
                  }
                }
                else
                {
LABEL_73:
                  char v78 = (unsigned __int8 *)(v55 + 16 * v60 + 10);
                  if ((unsigned __int16)(v59 - 48 * v60) >= 9u)
                  {
                    __int16 v79 = 0;
                    uint64_t v80 = (unsigned __int16)(v59 - 48 * v60 - 9) >> 3;
                    if ((unsigned __int16)(v59 - 48 * v60 - 9) >> 3)
                    {
                      __int16 v81 = 0;
                      uint64_t v82 = v80 + 1;
                      uint64_t v83 = (v80 + 1) & 0x3FFE;
                      unsigned __int16 v84 = v61 - 8 * v83;
                      int v85 = &v78[v83];
                      unsigned int v86 = (unsigned __int8 *)(v56 + 16 * v60);
                      uint64_t v87 = v83;
                      do
                      {
                        uint64_t v88 = *(v86 - 1);
                        int v89 = *v86;
                        v86 += 2;
                        v79 += byte_20EBFB6[v88];
                        v81 += byte_20EBFB6[v89];
                        v87 -= 2;
                      }
                      while (v87);
                      v79 += v81;
                      if (v82 == v83)
                      {
LABEL_82:
                        __int16 v90 = &v78[((unsigned __int16)(v61 - 9) >> 3) + 1];
                        goto LABEL_83;
                      }
                    }
                    else
                    {
                      unsigned __int16 v84 = v59 - 48 * v60;
                      int v85 = (unsigned __int8 *)(v55 + 16 * v60 + 10);
                    }
                    do
                    {
                      int v91 = *v85++;
                      v79 += byte_20EBFB6[v91];
                      v84 -= 8;
                    }
                    while (v84 > 8u);
                    goto LABEL_82;
                  }
                  __int16 v79 = 0;
                  __int16 v90 = (unsigned __int8 *)(v55 + 16 * v60 + 10);
                  LOBYTE(v84) = v59 - 48 * v60;
LABEL_83:
                  if (v51 == *(void *)(v62
                                        + 12
                                        * (unsigned __int16)(v79
                                                           + byte_20EBFB6[~(-1 << v84) & (unint64_t)*v90])))
                  {
                    if (v59 != -1)
                    {
                      if ((unsigned __int16)(v59 - 48 * v60) < 9u)
                      {
                        __int16 v94 = 0;
                      }
                      else
                      {
                        if ((((_WORD)v59 - 48 * (_WORD)v60 - 8) & 0xFFF8) != 0) {
                          __int16 v92 = 8;
                        }
                        else {
                          __int16 v92 = v59 - 48 * v60 - 8;
                        }
                        unsigned __int16 v93 = ~v92 + v59 - 48 * v60;
                        if (v93 < 8u)
                        {
                          __int16 v94 = 0;
                          unsigned __int16 v95 = v61;
                          uint64_t v96 = (unsigned __int8 *)(v55 + 16 * v60 + 10);
                          goto LABEL_339;
                        }
                        __int16 v275 = 0;
                        __int16 v276 = 0;
                        uint64_t v277 = (v93 >> 3) + 1;
                        unsigned __int16 v95 = v61 - 8 * (((v93 >> 3) + 1) & 0x3FFE);
                        uint64_t v96 = &v78[v277 & 0x3FFE];
                        int v278 = (unsigned __int8 *)(v55 + 16 * v60 + 11);
                        uint64_t v279 = v277 & 0x3FFE;
                        do
                        {
                          uint64_t v280 = *(v278 - 1);
                          int v281 = *v278;
                          v278 += 2;
                          v275 += byte_20EBFB6[v280];
                          v276 += byte_20EBFB6[v281];
                          v279 -= 2;
                        }
                        while (v279);
                        __int16 v94 = v276 + v275;
                        if ((v277 & 0x3FFE) != v277)
                        {
                          do
                          {
LABEL_339:
                            int v282 = *v96++;
                            v94 += byte_20EBFB6[v282];
                            v95 -= 8;
                          }
                          while (v95 > 8u);
                        }
                        v78 += ((unsigned __int16)(v61 - 9) >> 3) + 1;
                        LOBYTE(v61) = v95;
                      }
                      uint64_t v283 = *(void *)(v34 + 56);
                      unsigned __int16 v284 = v94 + byte_20EBFB6[~(-1 << v61) & (unint64_t)*v78];
                      uint64_t v285 = v55 + 16 * v60;
                      if (*(unsigned __int16 *)(v285 + 8) != v284 || v285 + 16 == v283)
                      {
                        uint64_t v142 = (_DWORD *)(v62 + 12 * v284);
                      }
                      else
                      {
                        uint64_t v287 = v285 + 32;
                        do
                        {
                          if (*(_WORD *)(v287 - 8)) {
                            BOOL v288 = 1;
                          }
                          else {
                            BOOL v288 = v287 == v283;
                          }
                          v287 += 16;
                        }
                        while (!v288);
                        uint64_t v142 = *(_DWORD **)(v287 - 32);
                      }
                      goto LABEL_139;
                    }
                    unint64_t v97 = -1;
LABEL_94:
                    if (!sub_AD2F40(v34, 1))
                    {
                      unint64_t v399 = v51;
                      int v400 = -1;
                      sub_AD3484(v34, (uint64_t *)&v399, v97, v401);
LABEL_138:
                      uint64_t v142 = *(_DWORD **)v402;
                      goto LABEL_139;
                    }
                    uint64_t v98 = 0;
                    unint64_t v399 = v51;
                    int v400 = -1;
                    uint64_t v99 = *(void *)(v34 + 72) - 1;
                    uint64_t v100 = *(void *)(v34 + 48);
                    uint64_t v101 = v100 + 11;
                    uint64_t v102 = -1;
                    while (2)
                    {
                      uint64_t v103 = v54 & v99;
                      unint64_t v104 = (v54 & v99) / 0x30;
                      unint64_t v105 = (v54 & v99) % 0x30;
                      if (((*(unsigned __int8 *)(v100 + 16 * v104 + (v105 >> 3) + 10) >> (v105 & 7)) & 1) == 0)
                      {
                        if (v102 == -1) {
                          unint64_t v141 = v54 & v99;
                        }
                        else {
                          unint64_t v141 = v102;
                        }
                        goto LABEL_137;
                      }
                      uint64_t v106 = *(void *)(v34 + 40);
                      uint64_t v107 = *(void *)(v100 + 16 * v104);
                      if (!v106) {
                        break;
                      }
                      uint64_t v108 = (unsigned __int8 *)(v100 + 16 * v104 + 10);
                      if ((unsigned __int16)((v54 & v99) % 0x30) < 9u)
                      {
                        __int16 v109 = 0;
                        unint64_t v110 = (v54 & v99) % 0x30;
                        goto LABEL_111;
                      }
                      __int16 v109 = 0;
                      unint64_t v110 = (unsigned __int16)(v103 - 48 * v104 - 9) >> 3;
                      if (!((unsigned __int16)(v103 - 48 * v104 - 9) >> 3))
                      {
                        unint64_t v110 = (v54 & v99) % 0x30;
                        uint64_t v114 = (unsigned __int8 *)(v100 + 16 * v104 + 10);
                        do
                        {
LABEL_109:
                          int v119 = *v114++;
                          v109 += byte_20EBFB6[v119];
                          LOWORD(v110) = v110 - 8;
                        }
                        while ((unsigned __int16)v110 > 8u);
                        goto LABEL_110;
                      }
                      __int16 v111 = 0;
                      unint64_t v112 = v110 + 1;
                      uint64_t v113 = (v110 + 1) & 0x3FFE;
                      LOWORD(v110) = v105 - 8 * v113;
                      uint64_t v114 = &v108[v113];
                      unsigned __int16 v115 = (unsigned __int8 *)(v101 + 16 * v104);
                      uint64_t v116 = v113;
                      do
                      {
                        uint64_t v117 = *(v115 - 1);
                        int v118 = *v115;
                        v115 += 2;
                        v109 += byte_20EBFB6[v117];
                        v111 += byte_20EBFB6[v118];
                        v116 -= 2;
                      }
                      while (v116);
                      v109 += v111;
                      if (v112 != v113) {
                        goto LABEL_109;
                      }
LABEL_110:
                      v108 += ((unsigned __int16)(v105 - 9) >> 3) + 1;
LABEL_111:
                      unsigned int v120 = (_DWORD *)(v107
                                      + 12
                                      * (unsigned __int16)(v109
                                                         + byte_20EBFB6[~(-1 << v110) & (unint64_t)*v108]));
                      if (*(_DWORD *)(v34 + 36) == v120[1] && *(_DWORD *)(v34 + 32) == *v120)
                      {
                        if (v102 == -1) {
                          uint64_t v102 = v103;
                        }
LABEL_98:
                        unint64_t v54 = ++v98 + v103;
                        continue;
                      }
                      break;
                    }
                    unint64_t v122 = (unsigned __int8 *)(v100 + 16 * v104 + 10);
                    if ((unsigned __int16)v105 < 9u)
                    {
                      __int16 v123 = 0;
                      uint64_t v134 = (unsigned __int8 *)(v100 + 16 * v104 + 10);
                      LOBYTE(v128) = v105;
                      goto LABEL_125;
                    }
                    __int16 v123 = 0;
                    uint64_t v124 = (unsigned __int16)(v103 - 48 * v104 - 9) >> 3;
                    if (!((unsigned __int16)(v103 - 48 * v104 - 9) >> 3))
                    {
                      unsigned __int16 v128 = v105;
                      uint64_t v129 = (unsigned __int8 *)(v100 + 16 * v104 + 10);
                      do
                      {
LABEL_123:
                        int v135 = *v129++;
                        v123 += byte_20EBFB6[v135];
                        v128 -= 8;
                      }
                      while (v128 > 8u);
                      goto LABEL_124;
                    }
                    __int16 v125 = 0;
                    uint64_t v126 = v124 + 1;
                    uint64_t v127 = (v124 + 1) & 0x3FFE;
                    unsigned __int16 v128 = v105 - 8 * v127;
                    uint64_t v129 = &v122[v127];
                    unint64_t v130 = (unsigned __int8 *)(v101 + 16 * v104);
                    uint64_t v131 = v127;
                    do
                    {
                      uint64_t v132 = *(v130 - 1);
                      int v133 = *v130;
                      v130 += 2;
                      v123 += byte_20EBFB6[v132];
                      v125 += byte_20EBFB6[v133];
                      v131 -= 2;
                    }
                    while (v131);
                    v123 += v125;
                    if (v126 != v127) {
                      goto LABEL_123;
                    }
LABEL_124:
                    uint64_t v134 = &v122[((unsigned __int16)(v105 - 9) >> 3) + 1];
LABEL_125:
                    if (v51 != *(void *)(v107
                                          + 12
                                          * (unsigned __int16)(v123
                                                             + byte_20EBFB6[~(-1 << v128) & (unint64_t)*v134])))
                      goto LABEL_98;
                    if (v103 == -1)
                    {
                      unint64_t v141 = -1;
LABEL_137:
                      sub_AD3484(v34, (uint64_t *)&v399, v141, v401);
                      goto LABEL_138;
                    }
                    if ((unsigned __int16)v105 < 9u)
                    {
                      __int16 v138 = 0;
                    }
                    else
                    {
                      if ((((_WORD)v103 - 48 * (_WORD)v104 - 8) & 0xFFF8) != 0) {
                        __int16 v136 = 8;
                      }
                      else {
                        __int16 v136 = v103 - 48 * v104 - 8;
                      }
                      unsigned __int16 v137 = ~v136 + v103 - 48 * v104;
                      if (v137 < 8u)
                      {
                        __int16 v138 = 0;
                        unsigned __int16 v139 = v105;
                        long long v140 = (unsigned __int8 *)(v100 + 16 * v104 + 10);
                        goto LABEL_358;
                      }
                      __int16 v289 = 0;
                      __int16 v290 = 0;
                      uint64_t v291 = (v137 >> 3) + 1;
                      unsigned __int16 v139 = v105 - 8 * (((v137 >> 3) + 1) & 0x3FFE);
                      long long v140 = &v122[v291 & 0x3FFE];
                      int v292 = (unsigned __int8 *)(v100 + 16 * v104 + 11);
                      uint64_t v293 = v291 & 0x3FFE;
                      do
                      {
                        uint64_t v294 = *(v292 - 1);
                        int v295 = *v292;
                        v292 += 2;
                        v289 += byte_20EBFB6[v294];
                        v290 += byte_20EBFB6[v295];
                        v293 -= 2;
                      }
                      while (v293);
                      __int16 v138 = v290 + v289;
                      if ((v291 & 0x3FFE) != v291)
                      {
                        do
                        {
LABEL_358:
                          int v296 = *v140++;
                          v138 += byte_20EBFB6[v296];
                          v139 -= 8;
                        }
                        while (v139 > 8u);
                      }
                      v122 += ((unsigned __int16)(v105 - 9) >> 3) + 1;
                      LOBYTE(v105) = v139;
                    }
                    uint64_t v297 = v100 + 16 * v104;
                    unsigned __int16 v298 = *(_DWORD ***)(v34 + 56);
                    unsigned __int16 v299 = v138 + byte_20EBFB6[~(-1 << v105) & (unint64_t)*v122];
                    uint64_t v142 = (_DWORD *)(v107 + 12 * v299);
                    if (*(unsigned __int16 *)(v297 + 8) == v299)
                    {
                      uint64_t v300 = v297 + 16;
                      if ((_DWORD **)(v297 + 16) != v298)
                      {
                        while (1)
                        {
                          uint64_t v301 = (_DWORD **)v300;
                          if (*(_WORD *)(v300 + 8)) {
                            break;
                          }
                          v300 += 16;
                          if (v301 + 2 == v298)
                          {
                            uint64_t v297 = *(void *)(v34 + 56);
                            goto LABEL_366;
                          }
                        }
                        uint64_t v297 = v300;
LABEL_366:
                        uint64_t v142 = *v301;
                        goto LABEL_367;
                      }
                    }
                    else
                    {
LABEL_367:
                      if ((_DWORD **)v297 != v298 && v106)
                      {
                        do
                        {
                          if (*(_DWORD *)(v34 + 36) != v142[1] || *(_DWORD *)(v34 + 32) != *v142) {
                            break;
                          }
                          v142 += 3;
                          if (v142 == (_DWORD *)(*(void *)v297 + 12 * *(unsigned __int16 *)(v297 + 8)))
                          {
                            v297 += 16;
                            if ((_DWORD **)v297 != v298)
                            {
                              do
                              {
                                if (*(_WORD *)(v297 + 8))
                                {
                                  uint64_t v142 = *(_DWORD **)v297;
                                  goto LABEL_371;
                                }
                                v297 += 16;
                              }
                              while ((_DWORD **)v297 != v298);
                              uint64_t v142 = *(_DWORD **)(v297 - 16);
                            }
                            break;
                          }
LABEL_371:
                          ;
                        }
                        while ((_DWORD **)v297 != v298);
                      }
                    }
LABEL_139:
                    unsigned int v24 = v142[2];
                    if (v24 == -1)
                    {
                      int v143 = *(_DWORD *)(v34 + 112);
                      *(_DWORD *)(v34 + 112) = v143 + 1;
                      v142[2] = v143;
                      int v145 = *(char **)(v34 + 96);
                      unint64_t v144 = *(void *)(v34 + 104);
                      if ((unint64_t)v145 < v144)
                      {
                        *(void *)int v145 = v51;
                        uint64_t v146 = (uint64_t)(v145 + 8);
                        goto LABEL_164;
                      }
                      uint64_t v147 = (char **)(v34 + 88);
                      __int16 v148 = *(char **)(v34 + 88);
                      uint64_t v149 = (char *)(v145 - v148);
                      uint64_t v150 = (v145 - v148) >> 3;
                      unint64_t v151 = v150 + 1;
                      if ((unint64_t)(v150 + 1) >> 61) {
                        sub_2E00();
                      }
                      uint64_t v152 = v144 - (void)v148;
                      if (v152 >> 2 > v151) {
                        unint64_t v151 = v152 >> 2;
                      }
                      if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v153 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v153 = v151;
                      }
                      if (v153)
                      {
                        if (v153 >> 61) {
                          sub_188D718();
                        }
                        unint64_t v154 = v153;
                        uint64_t v155 = operator new(8 * v153);
                        uint64_t v147 = (char **)(v34 + 88);
                        unint64_t v153 = v154;
                        uint64_t v149 = (char *)(v145 - v148);
                        uint64_t v156 = (unint64_t *)&v155[8 * v150];
                        *uint64_t v156 = v51;
                        uint64_t v146 = (uint64_t)(v156 + 1);
                        if (v145 == v148) {
                          goto LABEL_162;
                        }
LABEL_155:
                        unint64_t v157 = v145 - 8 - v148;
                        if (v157 < 0x58) {
                          goto LABEL_435;
                        }
                        if ((unint64_t)(v145 - v155 - (void)v149) < 0x20) {
                          goto LABEL_435;
                        }
                        uint64_t v158 = (v157 >> 3) + 1;
                        uint64_t v159 = 8 * (v158 & 0x3FFFFFFFFFFFFFFCLL);
                        uint64_t v160 = &v145[-v159];
                        uint64_t v156 = (unint64_t *)((char *)v156 - v159);
                        unsigned __int16 v161 = &v155[8 * v150 - 16];
                        uint64_t v162 = v145 - 16;
                        uint64_t v163 = v158 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          long long v164 = *(_OWORD *)v162;
                          *(v161 - 1) = *((_OWORD *)v162 - 1);
                          *unsigned __int16 v161 = v164;
                          v161 -= 2;
                          v162 -= 32;
                          v163 -= 4;
                        }
                        while (v163);
                        int v145 = v160;
                        if (v158 != (v158 & 0x3FFFFFFFFFFFFFFCLL))
                        {
LABEL_435:
                          do
                          {
                            unint64_t v165 = *((void *)v145 - 1);
                            v145 -= 8;
                            *--uint64_t v156 = v165;
                          }
                          while (v145 != v148);
                        }
                        int v145 = *v147;
                      }
                      else
                      {
                        uint64_t v155 = 0;
                        uint64_t v156 = (unint64_t *)(8 * v150);
                        *(void *)(8 * v150) = v51;
                        uint64_t v146 = 8 * v150 + 8;
                        if (v145 != v148) {
                          goto LABEL_155;
                        }
                      }
LABEL_162:
                      *(void *)(v34 + 88) = v156;
                      *(void *)(v34 + 96) = v146;
                      *(void *)(v34 + 104) = &v155[8 * v153];
                      if (v145) {
                        operator delete(v145);
                      }
LABEL_164:
                      *(void *)(v34 + 96) = v146;
                      unsigned int v24 = v142[2];
                    }
                    uint64_t v166 = (void *)(*(void *)(v343 + 24) + 4136);
                    unint64_t v167 = *(void *)v349;
                    unsigned int v168 = *(_DWORD *)&v349[20];
                    uint64_t v169 = HIDWORD(*(void *)v349);
                    if (sub_A10E20(v166, *(int *)&v349[4]))
                    {
                      uint64_t v170 = (int *)sub_A1120C(*(void *)(*v166 + 3944), v167);
                    }
                    else
                    {
                      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                        && __cxa_guard_acquire(&qword_24F7308))
                      {
                        sub_518C8(0x3B60u, 0x7FCAu);
                        dword_24F7300 = v304 | 0x40000000;
                        __cxa_guard_release(&qword_24F7308);
                      }
                      uint64_t v171 = *v166;
                      if (dword_24F7300 == v169)
                      {
                        unint64_t v172 = *(unsigned int **)(*(void *)(v171 + 3976) + 72);
                        if (!v172)
                        {
                          int v328 = __cxa_allocate_exception(0x40uLL);
                          sub_5E5C(v401, "Realtime stop pattern quad data requested on nullptr buffer");
                          int v329 = (void *)sub_2F404((uint64_t)v328, (long long *)v401);
                        }
                        int v173 = (int *)((char *)v172 + *v172);
                        long long v174 = (unsigned __int16 *)((char *)v173 - *v173);
                        if (*v174 >= 5u && (uint64_t v175 = v174[2]) != 0) {
                          __int16 v176 = (unsigned int *)((char *)v173 + v175 + *(unsigned int *)((char *)v173 + v175));
                        }
                        else {
                          __int16 v176 = 0;
                        }
                        uint64_t v170 = (int *)sub_A1139C(v176, v167);
                      }
                      else
                      {
                        uint64_t v170 = (int *)sub_A11500(v171 + 24, v167, 0, "stop pattern");
                      }
                    }
                    __int16 v177 = (unsigned __int16 *)((char *)v170 - *v170);
                    if (*v177 >= 9u && (uint64_t v178 = v177[4]) != 0) {
                      uint64_t v179 = (unsigned int *)((char *)v170 + v178 + *(unsigned int *)((char *)v170 + v178));
                    }
                    else {
                      uint64_t v179 = 0;
                    }
                    DWORD1(v345) = 10 * *(_DWORD *)(sub_A10764(v179, v168) + 8);
                    uint64_t v180 = *(void *)(v343 + 24);
                    unint64_t v181 = *(void *)v349;
                    int v182 = (uint64_t *)(v180 + 4136);
                    unsigned int v183 = *(_DWORD *)&v349[20];
                    int v184 = *(_DWORD *)&v349[8];
                    uint64_t v185 = HIDWORD(*(void *)v349);
                    if (sub_A10E20((void *)(v180 + 4136), *(int *)&v349[4]))
                    {
                      unsigned __int16 v186 = *(unsigned int **)(*(void *)(*v182 + 3944) + 72);
                      if (!v186)
                      {
                        unsigned int v322 = __cxa_allocate_exception(0x40uLL);
                        sub_5E5C(v401, "Incident stop pattern quad data requested on nullptr buffer");
                        unsigned int v323 = (void *)sub_2F404((uint64_t)v322, (long long *)v401);
                      }
                      goto LABEL_186;
                    }
                    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                      && __cxa_guard_acquire(&qword_24F7308))
                    {
                      sub_518C8(0x3B60u, 0x7FCAu);
                      dword_24F7300 = v305 | 0x40000000;
                      __cxa_guard_release(&qword_24F7308);
                    }
                    uint64_t v187 = *v182;
                    if (dword_24F7300 != v185)
                    {
                      int v188 = sub_A10B80(v187 + 24, v181, 0);
                      uint64_t v189 = &v188[-*(int *)v188];
                      if (*(unsigned __int16 *)v189 >= 5u) {
                        goto LABEL_187;
                      }
LABEL_190:
                      uint64_t v190 = 0;
                      goto LABEL_191;
                    }
                    unsigned __int16 v186 = *(unsigned int **)(*(void *)(v187 + 3976) + 72);
                    if (!v186)
                    {
                      uint64_t v332 = __cxa_allocate_exception(0x40uLL);
                      sub_5E5C(v401, "Realtime stop pattern quad data requested on nullptr buffer");
                      uint64_t v333 = (void *)sub_2F404((uint64_t)v332, (long long *)v401);
                    }
LABEL_186:
                    int v188 = (char *)v186 + *v186;
                    uint64_t v189 = &v188[-*(int *)v188];
                    if (*(unsigned __int16 *)v189 < 5u) {
                      goto LABEL_190;
                    }
LABEL_187:
                    uint64_t v190 = *((unsigned __int16 *)v189 + 2);
                    if (v190) {
                      v190 += (uint64_t)&v188[*(unsigned int *)&v188[v190]];
                    }
LABEL_191:
                    int v191 = (int *)(v190
                                 + 4 * v181
                                 + 4
                                 + *(unsigned int *)(v190 + 4 * v181 + 4));
                    int v192 = (unsigned __int16 *)((char *)v191 - *v191);
                    if (*v192 >= 9u && (uint64_t v193 = v192[4]) != 0) {
                      int v194 = (unsigned int *)((char *)v191 + v193 + *(unsigned int *)((char *)v191 + v193));
                    }
                    else {
                      int v194 = 0;
                    }
                    uint64_t v195 = sub_A10764(v194, v183);
                    long long v196 = &v188[-*(int *)v188];
                    if (*(unsigned __int16 *)v196 < 0xBu)
                    {
                      uint64_t v197 = 0;
                      long long v198 = (unsigned __int16 *)((char *)v191 - *v191);
                      if (*v198 >= 0x11u) {
                        goto LABEL_199;
                      }
LABEL_202:
                      LODWORD(v199) = 0;
                      goto LABEL_203;
                    }
                    uint64_t v197 = (unsigned int *)*((unsigned __int16 *)v196 + 5);
                    if (v197) {
                      uint64_t v197 = (unsigned int *)((char *)v197
                    }
                                            + (void)v188
                                            + *(unsigned int *)((char *)v197 + (void)v188));
                    long long v198 = (unsigned __int16 *)((char *)v191 - *v191);
                    if (*v198 < 0x11u) {
                      goto LABEL_202;
                    }
LABEL_199:
                    uint64_t v199 = v198[8];
                    if (v198[8]) {
                      LODWORD(v199) = *(int *)((char *)v191 + v199);
                    }
LABEL_203:
                    uint64_t v200 = sub_A108C4(v197, v199+ *(int *)((char *)v191 + v198[2] + *(unsigned int *)((char *)v191 + v198[2])) * v184+ *(unsigned __int8 *)(v195 + 14));
                    if (v200)
                    {
                      uint64_t v201 = __ROR8__(*(void *)v200, 32);
                      int v202 = *(_DWORD *)(v200 + 8);
                    }
                    else
                    {
                      int v202 = 0;
                      uint64_t v201 = 0xFFFFFFFFLL;
                    }
                    *(void *)long long v401 = v201;
                    *(_DWORD *)&v401[8] = v202;
                    int v203 = (int *)sub_A11094((void *)(v180 + 4136), v181);
                    int v204 = (unsigned __int16 *)((char *)v203 - *v203);
                    if (*v204 >= 9u && (uint64_t v205 = v204[4]) != 0) {
                      unsigned int v206 = (unsigned int *)((char *)v203 + v205 + *(unsigned int *)((char *)v203 + v205));
                    }
                    else {
                      unsigned int v206 = 0;
                    }
                    unsigned int v207 = *(unsigned __int16 *)(sub_A10764(v206, v183) + 12);
                    if (*(_DWORD *)&v349[12] == -1) {
                      int v208 = 0x7FFFFFFF;
                    }
                    else {
                      int v208 = *(_DWORD *)&v349[16];
                    }
                    *((void *)&v345 + 1) = sub_A0FAA0((uint64_t *)(v180 + 4184), (unsigned int *)v401, v207, v208);
                    __int16 v346 = v209;
                    uint64_t v210 = *(void *)(v343 + 24);
                    unint64_t v211 = *(void *)v349;
                    uint64_t v212 = (uint64_t *)(v210 + 4136);
                    unsigned int v213 = v350;
                    int v214 = *(_DWORD *)&v349[8];
                    uint64_t v215 = HIDWORD(*(void *)v349);
                    if (sub_A10E20((void *)(v210 + 4136), *(int *)&v349[4]))
                    {
                      unsigned int v216 = *(unsigned int **)(*(void *)(*v212 + 3944) + 72);
                      if (!v216)
                      {
                        int v324 = __cxa_allocate_exception(0x40uLL);
                        sub_5E5C(v401, "Incident stop pattern quad data requested on nullptr buffer");
                        int v325 = (void *)sub_2F404((uint64_t)v324, (long long *)v401);
                      }
                      goto LABEL_219;
                    }
                    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                      && __cxa_guard_acquire(&qword_24F7308))
                    {
                      sub_518C8(0x3B60u, 0x7FCAu);
                      dword_24F7300 = v306 | 0x40000000;
                      __cxa_guard_release(&qword_24F7308);
                    }
                    uint64_t v217 = *v212;
                    if (dword_24F7300 != v215)
                    {
                      uint64_t v218 = sub_A10B80(v217 + 24, v211, 0);
                      int v219 = &v218[-*(int *)v218];
                      if (*(unsigned __int16 *)v219 >= 5u) {
                        goto LABEL_220;
                      }
LABEL_223:
                      uint64_t v220 = 0;
                      goto LABEL_224;
                    }
                    unsigned int v216 = *(unsigned int **)(*(void *)(v217 + 3976) + 72);
                    if (!v216)
                    {
                      int v326 = __cxa_allocate_exception(0x40uLL);
                      sub_5E5C(v401, "Realtime stop pattern quad data requested on nullptr buffer");
                      uint64_t v327 = (void *)sub_2F404((uint64_t)v326, (long long *)v401);
                    }
LABEL_219:
                    uint64_t v218 = (char *)v216 + *v216;
                    int v219 = &v218[-*(int *)v218];
                    if (*(unsigned __int16 *)v219 < 5u) {
                      goto LABEL_223;
                    }
LABEL_220:
                    uint64_t v220 = *((unsigned __int16 *)v219 + 2);
                    if (v220) {
                      v220 += (uint64_t)&v218[*(unsigned int *)&v218[v220]];
                    }
LABEL_224:
                    uint64_t v221 = (int *)(v220
                                 + 4 * v211
                                 + 4
                                 + *(unsigned int *)(v220 + 4 * v211 + 4));
                    unsigned __int16 v222 = (unsigned __int16 *)((char *)v221 - *v221);
                    if (*v222 >= 9u && (uint64_t v223 = v222[4]) != 0) {
                      __int16 v224 = (unsigned int *)((char *)v221 + v223 + *(unsigned int *)((char *)v221 + v223));
                    }
                    else {
                      __int16 v224 = 0;
                    }
                    uint64_t v225 = sub_A10764(v224, v213);
                    int v226 = &v218[-*(int *)v218];
                    if (*(unsigned __int16 *)v226 < 0xBu)
                    {
                      unsigned __int16 v227 = 0;
                      uint64_t v228 = (unsigned __int16 *)((char *)v221 - *v221);
                      if (*v228 >= 0x11u) {
                        goto LABEL_232;
                      }
LABEL_235:
                      LODWORD(v229) = 0;
                      goto LABEL_236;
                    }
                    unsigned __int16 v227 = (unsigned int *)*((unsigned __int16 *)v226 + 5);
                    if (v227) {
                      unsigned __int16 v227 = (unsigned int *)((char *)v227
                    }
                                            + (void)v218
                                            + *(unsigned int *)((char *)v227 + (void)v218));
                    uint64_t v228 = (unsigned __int16 *)((char *)v221 - *v221);
                    if (*v228 < 0x11u) {
                      goto LABEL_235;
                    }
LABEL_232:
                    uint64_t v229 = v228[8];
                    if (v228[8]) {
                      LODWORD(v229) = *(int *)((char *)v221 + v229);
                    }
LABEL_236:
                    uint64_t v230 = sub_A108C4(v227, v229+ *(int *)((char *)v221 + v228[2] + *(unsigned int *)((char *)v221 + v228[2])) * v214+ *(unsigned __int8 *)(v225 + 14));
                    if (v230)
                    {
                      uint64_t v231 = __ROR8__(*(void *)v230, 32);
                      int v232 = *(_DWORD *)(v230 + 8);
                    }
                    else
                    {
                      int v232 = 0;
                      uint64_t v231 = 0xFFFFFFFFLL;
                    }
                    *(void *)long long v401 = v231;
                    *(_DWORD *)&v401[8] = v232;
                    int v233 = (int *)sub_A11094((void *)(v210 + 4136), v211);
                    int v234 = (unsigned __int16 *)((char *)v233 - *v233);
                    if (*v234 >= 9u && (uint64_t v235 = v234[4]) != 0) {
                      uint64_t v236 = (unsigned int *)((char *)v233 + v235 + *(unsigned int *)((char *)v233 + v235));
                    }
                    else {
                      uint64_t v236 = 0;
                    }
                    unsigned int v237 = *(unsigned __int16 *)(sub_A10764(v236, v213) + 12);
                    if (*(_DWORD *)&v349[12] == -1) {
                      int v238 = 0x7FFFFFFF;
                    }
                    else {
                      int v238 = *(_DWORD *)&v349[16];
                    }
                    unint64_t v347 = sub_A0FDF4((uint64_t *)(v210 + 4184), (unsigned int *)v401, v237, v238);
                    __int16 v348 = v239;
                    int v410 = -1;
                    sub_9F6FA0((uint64_t)v401, &v345);
                    int v410 = 0;
                    if (v421)
                    {
                      sub_9F6FA0((uint64_t)v411, (long long *)v401);
                      a1 = v343;
                      int v421 = v410;
                      if (!v410) {
                        goto LABEL_256;
                      }
                    }
                    else
                    {
                      *(_OWORD *)int v411 = *(_OWORD *)v401;
                      *(_OWORD *)&v411[16] = *(_OWORD *)&v401[16];
                      v412[0] = *(_OWORD *)v402;
                      *(_OWORD *)((char *)v412 + 12) = *(_OWORD *)&v402[12];
                      a1 = v343;
                      if (v413[0])
                      {
                        v413[1] = v413[0];
                        operator delete(v413[0]);
                      }
                      *(_OWORD *)uint64_t v413 = v403;
                      uint64_t v414 = v404;
                      uint64_t v404 = 0;
                      long long v403 = 0uLL;
                      if ((void)v415)
                      {
                        *((void *)&v415 + 1) = v415;
                        operator delete((void *)v415);
                      }
                      long long v415 = *(_OWORD *)v405;
                      v416 = v405[2];
                      memset(v405, 0, sizeof(v405));
                      int v417 = v406;
                      if ((void)v418)
                      {
                        *((void *)&v418 + 1) = v418;
                        operator delete((void *)v418);
                      }
                      long long v418 = v407;
                      uint64_t v419 = v408;
                      uint64_t v408 = 0;
                      long long v407 = 0uLL;
                      long long v420 = v409;
                      if (!v410)
                      {
LABEL_256:
                        if ((void)v407)
                        {
                          *((void *)&v407 + 1) = v407;
                          operator delete((void *)v407);
                        }
                        if (v405[0])
                        {
                          v405[1] = v405[0];
                          operator delete(v405[0]);
                        }
                        if ((void)v403)
                        {
                          *((void *)&v403 + 1) = v403;
                          operator delete((void *)v403);
                        }
                      }
                    }
                    if (v355)
                    {
                      uint64_t v356 = v355;
                      operator delete(v355);
                    }
                    if (*((void *)&v352 + 1))
                    {
                      *(void *)&long long v353 = *((void *)&v352 + 1);
                      operator delete(*((void **)&v352 + 1));
                    }
                    if ((void)v351)
                    {
                      *((void *)&v351 + 1) = v351;
                      operator delete((void *)v351);
                    }
                    if (v25[4] == -1) {
                      goto LABEL_275;
                    }
                    uint64_t v240 = (uint64_t)v362;
                    if ((unint64_t)v362 < v363) {
                      goto LABEL_270;
                    }
LABEL_288:
                    unint64_t v362 = (char *)sub_A4CBF4((uint64_t *)&v361, (uint64_t)v411);
                    uint64_t v241 = *((void *)&v393 + 1);
                    if (*((void *)&v393 + 1) >= (unint64_t)v394) {
                      goto LABEL_274;
                    }
LABEL_289:
                    *(void *)uint64_t v241 = 0;
                    *(void *)(v241 + 8) = 0;
                    *(void *)(v241 + 16) = 0;
                    uint64_t v247 = (char *)v361;
                    uint64_t v248 = v362;
                    int64_t v249 = v362 - (unsigned char *)v361;
                    if (v362 != v361)
                    {
                      unint64_t v250 = 0xCF3CF3CF3CF3CF3DLL * (v249 >> 3);
                      if (v250 >= 0x186186186186187) {
                        sub_2E00();
                      }
                      uint64_t v251 = (char *)operator new(v249);
                      uint64_t v252 = 0;
                      *(void *)uint64_t v241 = v251;
                      *(void *)(v241 + 8) = v251;
                      *(void *)(v241 + 16) = &v251[168 * v250];
                      do
                      {
                        unint64_t v254 = (long long *)&v251[v252];
                        uint64_t v255 = (long long *)&v247[v252];
                        *(_DWORD *)&v251[v252 + 160] = *(_DWORD *)&v247[v252 + 160];
                        int v256 = *(_DWORD *)&v247[v252 + 160];
                        if (v256 == 1)
                        {
                          long long v253 = *v255;
                          *(long long *)((char *)v254 + 12) = *(long long *)((char *)v255 + 12);
                          long long *v254 = v253;
                        }
                        else if (!v256)
                        {
                          sub_9F6FA0((uint64_t)v254, v255);
                        }
                        v252 += 168;
                      }
                      while (&v247[v252] != v248);
                      *(void *)(v241 + 8) = &v251[v252];
                    }
                    char v257 = v364;
                    *(void *)(v241 + 32) = 0;
                    *(unsigned char *)(v241 + 24) = v257;
                    *(void *)(v241 + 40) = 0;
                    *(void *)(v241 + 48) = 0;
                    char v258 = v365;
                    uint64_t v259 = v366 - (unsigned char *)v365;
                    if (v366 != v365)
                    {
                      if (0xCCCCCCCCCCCCCCCDLL * (v259 >> 3) >= 0x666666666666667) {
                        sub_2E00();
                      }
                      unsigned int v260 = (char *)operator new(v366 - (unsigned char *)v365);
                      *(void *)(v241 + 32) = v260;
                      *(void *)(v241 + 40) = v260;
                      uint64_t v261 = &v260[8 * (v259 >> 3)];
                      *(void *)(v241 + 48) = v261;
                      memcpy(v260, v258, v259 - 7);
                      *(void *)(v241 + 40) = v261;
                    }
                    uint64_t v262 = *(void *)v368;
                    *(void *)(v241 + 63) = *(void *)&v368[7];
                    *(void *)(v241 + 56) = v262;
                    uint64_t v242 = (char *)(v241 + 72);
LABEL_302:
                    *((void *)&v393 + 1) = v242;
                    unsigned int v264 = v25[5];
                    *(_DWORD *)long long v401 = v344 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * v24 + 1;
                    int v263 = *(_DWORD *)v401;
                    uint64_t v265 = *(void *)(a1 + 192);
                    uint64_t v266 = *(unsigned int *)(sub_B1041C(v342, (unsigned int *)v401) + 4);
                    *(_DWORD *)long long v401 = v263;
                    uint64_t v267 = *(void *)(a1 + 192);
                    uint64_t v25 = (unsigned int *)(v265 + (v266 << 6));
                    char v268 = (unsigned int *)(v267
                                          + ((unint64_t)*(unsigned int *)(sub_B1041C(v342, (unsigned int *)v401)
                                                                               + 8) << 6));
                    if (v25 == v268)
                    {
LABEL_305:
                      uint64_t v25 = 0;
                    }
                    else
                    {
                      while (v25[6] != v264)
                      {
                        v25 += 16;
                        if (v25 == v268) {
                          goto LABEL_305;
                        }
                      }
                    }
                    if (!v421)
                    {
                      if ((void)v418)
                      {
                        *((void *)&v418 + 1) = v418;
                        operator delete((void *)v418);
                      }
                      if ((void)v415)
                      {
                        *((void *)&v415 + 1) = v415;
                        operator delete((void *)v415);
                      }
                      if (v413[0])
                      {
                        v413[1] = v413[0];
                        operator delete(v413[0]);
                      }
                    }
                    if (v365)
                    {
                      unint64_t v366 = v365;
                      operator delete(v365);
                    }
                    unsigned int v269 = (char *)v361;
                    if (v361)
                    {
                      int v270 = v362;
                      uint64_t v26 = v361;
                      if (v362 != v361)
                      {
                        do
                        {
                          if (!*((_DWORD *)v270 - 2))
                          {
                            int v271 = (void *)*((void *)v270 - 6);
                            if (v271)
                            {
                              *((void *)v270 - 5) = v271;
                              operator delete(v271);
                            }
                            int v272 = (void *)*((void *)v270 - 10);
                            if (v272)
                            {
                              *((void *)v270 - 9) = v272;
                              operator delete(v272);
                            }
                            unint64_t v273 = (void *)*((void *)v270 - 13);
                            if (v273)
                            {
                              *((void *)v270 - 12) = v273;
                              operator delete(v273);
                            }
                          }
                          v270 -= 168;
                        }
                        while (v270 != v269);
                        uint64_t v26 = v361;
                      }
                      unint64_t v362 = v269;
                      operator delete(v26);
                    }
                    --v344;
                    if (*v25 == -1) {
                      goto LABEL_390;
                    }
                    continue;
                  }
                }
                unint64_t v58 = ++v50 + v59;
                goto LABEL_57;
              }
            }
            else
            {
              unsigned __int16 v69 = v59 - 48 * v60;
              unint64_t v70 = (unsigned __int8 *)(v55 + 16 * v60 + 10);
            }
            break;
          }
          do
          {
            int v75 = *v70++;
            v64 += byte_20EBFB6[v75];
            v69 -= 8;
          }
          while (v69 > 8u);
          goto LABEL_68;
        }
        __p[1] = 2 * (*(void *)(v23 + 3960) != 0);
        if (*v341 != -1) {
          goto LABEL_23;
        }
LABEL_390:
        unint64_t v307 = v393;
        if ((void)v393 != *((void *)&v393 + 1))
        {
          unint64_t v308 = *((void *)&v393 + 1) - 72;
          if (*((void *)&v393 + 1) - 72 > (unint64_t)v393)
          {
            do
            {
              sub_A4D0C8(v307, v308);
              v307 += 72;
              v308 -= 72;
            }
            while (v307 < v308);
          }
        }
        sub_A29D50((uint64_t)__p);
        unint64_t v309 = *(void *)(a2 + 16);
        if (v309 >= *(void *)(a2 + 24))
        {
          *(void *)(a2 + 16) = sub_A4D268(v336, (long long *)__p);
          long long v310 = (void *)*((void *)&v397 + 1);
          if (!*((void *)&v397 + 1)) {
            goto LABEL_398;
          }
LABEL_397:
          *(void *)&long long v398 = v310;
          operator delete(v310);
          goto LABEL_398;
        }
        sub_9F68D4(*(void *)(a2 + 16), (long long *)__p);
        *(void *)(a2 + 16) = v309 + 296;
        *(void *)(a2 + 16) = v309 + 296;
        long long v310 = (void *)*((void *)&v397 + 1);
        if (*((void *)&v397 + 1)) {
          goto LABEL_397;
        }
LABEL_398:
        if ((void)v396)
        {
          *((void *)&v396 + 1) = v396;
          operator delete((void *)v396);
        }
        if (*((void *)&v394 + 1))
        {
          *(void *)&long long v395 = *((void *)&v394 + 1);
          operator delete(*((void **)&v394 + 1));
        }
        uint64_t v311 = (void **)v393;
        if ((void)v393)
        {
          uint64_t v312 = *((void *)&v393 + 1);
          int v313 = (void *)v393;
          if (*((void *)&v393 + 1) != (void)v393)
          {
            do
            {
              int v315 = *(void **)(v312 - 40);
              if (v315)
              {
                *(void *)(v312 - 32) = v315;
                operator delete(v315);
              }
              uint64_t v316 = (void **)(v312 - 72);
              uint64_t v317 = *(void *)(v312 - 72);
              if (v317)
              {
                uint64_t v318 = *(void *)(v312 - 64);
                int v314 = *(void **)(v312 - 72);
                if (v318 != v317)
                {
                  do
                  {
                    if (!*(_DWORD *)(v318 - 8))
                    {
                      uint64_t v319 = *(void **)(v318 - 48);
                      if (v319)
                      {
                        *(void *)(v318 - 40) = v319;
                        operator delete(v319);
                      }
                      int v320 = *(void **)(v318 - 80);
                      if (v320)
                      {
                        *(void *)(v318 - 72) = v320;
                        operator delete(v320);
                      }
                      int v321 = *(void **)(v318 - 104);
                      if (v321)
                      {
                        *(void *)(v318 - 96) = v321;
                        operator delete(v321);
                      }
                    }
                    v318 -= 168;
                  }
                  while (v318 != v317);
                  int v314 = *v316;
                }
                *(void *)(v312 - 64) = v317;
                operator delete(v314);
              }
              v312 -= 72;
            }
            while (v316 != v311);
            int v313 = (void *)v393;
          }
          *((void *)&v393 + 1) = v311;
          operator delete(v313);
        }
        if (SHIBYTE(v387) < 0) {
          operator delete(v385);
        }
        v341 += 16;
      }
      ++v337;
      int v8 = (void *)v342;
    }
    while (v337 != v335);
  }
  uint64_t result = std::string::operator=(v334, (const std::string *)(a1 + 528));
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a1 + 616);
  *(_OWORD *)(a2 + 136) = *(_OWORD *)(a1 + 632);
  *(_OWORD *)(a2 + 152) = *(_OWORD *)(a1 + 648);
  *(_OWORD *)(a2 + 168) = *(_OWORD *)(a1 + 664);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 552);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 568);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 584);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 600);
  return result;
}

void sub_B0D75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char *a62,uint64_t a63)
{
  __cxa_guard_abort(&qword_24F7308);
  if (__p)
  {
    operator delete(__p);
    uint64_t v67 = a52;
    if (!a52)
    {
LABEL_3:
      uint64_t v68 = a49;
      if (!a49) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v67 = a52;
    if (!a52) {
      goto LABEL_3;
    }
  }
  operator delete(v67);
  uint64_t v68 = a49;
  if (!a49)
  {
LABEL_4:
    if (LODWORD(STACK[0x470])) {
      goto LABEL_13;
    }
LABEL_9:
    unsigned __int16 v69 = (void *)STACK[0x448];
    if (STACK[0x448])
    {
      STACK[0x450] = (unint64_t)v69;
      operator delete(v69);
      unint64_t v70 = (void *)STACK[0x428];
      if (!STACK[0x428])
      {
LABEL_11:
        uint64_t v71 = (void *)STACK[0x410];
        if (!STACK[0x410]) {
          goto LABEL_13;
        }
        goto LABEL_12;
      }
    }
    else
    {
      unint64_t v70 = (void *)STACK[0x428];
      if (!STACK[0x428]) {
        goto LABEL_11;
      }
    }
    STACK[0x430] = (unint64_t)v70;
    operator delete(v70);
    uint64_t v71 = (void *)STACK[0x410];
    if (!STACK[0x410])
    {
LABEL_13:
      if (a66) {
        operator delete(a66);
      }
      if (a62)
      {
        uint64_t v72 = (char *)a63;
        uint64_t v73 = a62;
        if ((char *)a63 != a62)
        {
          do
          {
            if (!*((_DWORD *)v72 - 2))
            {
              int v74 = (void *)*((void *)v72 - 6);
              if (v74)
              {
                *((void *)v72 - 5) = v74;
                operator delete(v74);
              }
              int v75 = (void *)*((void *)v72 - 10);
              if (v75)
              {
                *((void *)v72 - 9) = v75;
                operator delete(v75);
              }
              char v76 = (void *)*((void *)v72 - 13);
              if (v76)
              {
                *((void *)v72 - 12) = v76;
                operator delete(v76);
              }
            }
            v72 -= 168;
          }
          while (v72 != a62);
          uint64_t v73 = a62;
        }
        operator delete(v73);
      }
      uint64_t v77 = a20;
      char v78 = (void *)STACK[0x300];
      if (STACK[0x300])
      {
        STACK[0x308] = (unint64_t)v78;
        operator delete(v78);
        __int16 v79 = (void *)STACK[0x2E8];
        if (!STACK[0x2E8])
        {
LABEL_33:
          uint64_t v80 = (void *)STACK[0x2D0];
          if (!STACK[0x2D0]) {
            goto LABEL_34;
          }
          goto LABEL_42;
        }
      }
      else
      {
        __int16 v79 = (void *)STACK[0x2E8];
        if (!STACK[0x2E8]) {
          goto LABEL_33;
        }
      }
      STACK[0x2F0] = (unint64_t)v79;
      operator delete(v79);
      uint64_t v80 = (void *)STACK[0x2D0];
      if (!STACK[0x2D0])
      {
LABEL_34:
        unint64_t v81 = STACK[0x2B8];
        if (!STACK[0x2B8]) {
          goto LABEL_35;
        }
        goto LABEL_43;
      }
LABEL_42:
      STACK[0x2D8] = (unint64_t)v80;
      operator delete(v80);
      unint64_t v81 = STACK[0x2B8];
      if (!STACK[0x2B8])
      {
LABEL_35:
        if (SLOBYTE(STACK[0x277]) < 0) {
          goto LABEL_36;
        }
        goto LABEL_47;
      }
LABEL_43:
      unsigned __int16 v84 = (void **)STACK[0x2C0];
      int v85 = (void *)v81;
      if (STACK[0x2C0] != v81)
      {
        do
        {
          v84 -= 9;
          sub_9F5F58(a9, v84);
        }
        while (v84 != (void **)v81);
        int v85 = (void *)STACK[0x2B8];
      }
      STACK[0x2C0] = v81;
      operator delete(v85);
      uint64_t v77 = a20;
      if (SLOBYTE(STACK[0x277]) < 0)
      {
LABEL_36:
        operator delete((void *)STACK[0x260]);
        uint64_t v82 = *a10;
        if (*a10) {
          goto LABEL_37;
        }
        goto LABEL_48;
      }
LABEL_47:
      uint64_t v82 = *a10;
      if (*a10)
      {
LABEL_37:
        *(void *)(v77 + 200) = v82;
        operator delete(v82);
        if ((*(char *)(v77 + 55) & 0x80000000) == 0) {
          goto LABEL_38;
        }
        goto LABEL_49;
      }
LABEL_48:
      if ((*(char *)(v77 + 55) & 0x80000000) == 0)
      {
LABEL_38:
        uint64_t v83 = *a13;
        if (!*a13) {
          goto LABEL_39;
        }
        goto LABEL_50;
      }
LABEL_49:
      operator delete(*a11);
      uint64_t v83 = *a13;
      if (!*a13) {
LABEL_39:
      }
        _Unwind_Resume(a1);
LABEL_50:
      uint64_t v86 = v77;
      uint64_t v87 = *(void *)(v77 + 16);
      uint64_t v88 = v83;
      if ((void *)v87 != v83)
      {
        uint64_t v89 = v86 + 24;
        do
        {
          v87 -= 296;
          sub_9F5E28(v89, v87);
        }
        while ((void *)v87 != v83);
        uint64_t v88 = *a13;
        uint64_t v86 = a20;
      }
      *(void *)(v86 + 16) = v83;
      operator delete(v88);
      _Unwind_Resume(a1);
    }
LABEL_12:
    STACK[0x418] = (unint64_t)v71;
    operator delete(v71);
    goto LABEL_13;
  }
LABEL_8:
  operator delete(v68);
  if (LODWORD(STACK[0x470])) {
    goto LABEL_13;
  }
  goto LABEL_9;
}

void sub_B0DC70(uint64_t a1)
{
  *(_DWORD *)(a1 + 240) = 0;
  if (*(void *)(a1 + 144) | *(void *)(a1 + 184))
  {
    for (uint64_t i = *(void *)(a1 + 152); i != *(void *)(a1 + 160); i += 16)
    {
      if (*(void *)i)
      {
        free(*(void **)i);
        *(void *)uint64_t i = 0;
      }
      *(void *)(i + 8) = 0;
    }
    *(void *)(a1 + 184) = 0;
  }
  *(uint64x2_t *)(a1 + 104) = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 120), (float)*(unint64_t *)(a1 + 176))));
  *(unsigned char *)(a1 + 128) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 200) = *(void *)(a1 + 192);
  *(void *)(a1 + 224) = 0;
  uint64_t v3 = *(unsigned int **)(a1 + 272);
  uint64_t v4 = *(unsigned int **)(a1 + 280);
  if (v3 != v4)
  {
    uint64_t v5 = *(void *)(a1 + 248);
    int v6 = *(unsigned int **)(a1 + 272);
    do
    {
      unsigned int v7 = *v6++;
      *(void *)(v5 + (((unint64_t)v7 >> 3) & 0x1FFFFFF8)) &= ~(1 << v7);
    }
    while (v6 != v4);
  }
  *(void *)(a1 + 280) = v3;
  int v8 = *(unsigned int **)(a1 + 320);
  uint64_t v9 = *(unsigned int **)(a1 + 328);
  if (v8 != v9)
  {
    uint64_t v10 = *(void *)(a1 + 296);
    unsigned int v11 = *(unsigned int **)(a1 + 320);
    do
    {
      unsigned int v12 = *v11++;
      *(void *)(v10 + (((unint64_t)v12 >> 3) & 0x1FFFFFF8)) &= ~(1 << v12);
    }
    while (v11 != v9);
  }
  *(void *)(a1 + 328) = v8;
  uint64_t v13 = *(unsigned int **)(a1 + 392);
  uint64_t v14 = *(unsigned int **)(a1 + 400);
  if (v13 != v14)
  {
    uint64_t v15 = *(void *)(a1 + 368);
    uint64_t v16 = *(void *)(a1 + 344);
    uint64_t v17 = *(unsigned int **)(a1 + 392);
    do
    {
      unsigned int v18 = *v17++;
      *(void *)(v15 + (((unint64_t)v18 >> 3) & 0x1FFFFFF8)) &= ~(1 << v18);
      *(_DWORD *)(v16 + 4 * v18) = -1;
    }
    while (v17 != v14);
  }
  *(void *)(a1 + 400) = v13;
  sub_BD5698(a1 + 424);
  char v21 = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)&__dst, &__p);
  uint64_t v19 = (void **)(a1 + 528);
  if (*(char *)(a1 + 551) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)uint64_t v19 = __dst;
  *(void *)(a1 + 544) = v23;
  HIBYTE(v23) = 0;
  LOBYTE(__dst) = 0;
  *(_OWORD *)(a1 + 616) = v28;
  *(_OWORD *)(a1 + 632) = v29;
  *(_OWORD *)(a1 + 648) = v30;
  *(_OWORD *)(a1 + 664) = v31;
  *(_OWORD *)(a1 + 552) = v24;
  *(_OWORD *)(a1 + 568) = v25;
  *(_OWORD *)(a1 + 584) = v26;
  *(_OWORD *)(a1 + 600) = v27;
  if (v21 < 0) {
    operator delete((void *)__p);
  }
  *(int32x2_t *)(a1 + 96) = vadd_s32(vdup_n_s32(2 * *(_DWORD *)(a1 + 16)), (int32x2_t)0x200000004);
  sub_BD5704(a1 + 424, *(void *)(a1 + 8));
}

void sub_B0DEAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_B0DEC8(uint64_t a1)
{
  if (sub_A276F8(*(void *)(a1 + 24)))
  {
    int v2 = *(_DWORD *)(a1 + 68);
    int v3 = *(_DWORD *)(a1 + 240);
    *(_DWORD *)(a1 + 240) = v3 + 1;
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v22 = 0x1FFFFFFFELL;
    int v5 = sub_AD28B0(v4, &v22);
    int v23 = v5;
    LODWORD(v22) = 0;
    uint64_t v6 = *(void *)(a1 + 192);
    unsigned int v7 = (char *)(v6 + ((unint64_t)*(unsigned int *)(sub_B1041C(a1 + 104, (unsigned int *)&v22) + 4) << 6));
    LODWORD(v22) = 0;
    uint64_t v8 = *(void *)(a1 + 192);
    uint64_t v9 = sub_B1041C(a1 + 104, (unsigned int *)&v22);
    sub_B10058(a1 + 104, 0, v7, (unsigned char *)(v8 + ((unint64_t)*(unsigned int *)(v9 + 8) << 6)));
    long long v13 = xmmword_20E2060;
    uint64_t v14 = -1;
    int v15 = v3;
    int v16 = v2;
    uint64_t v17 = 0;
    int v18 = 0;
    int v19 = 10 * v2;
    uint64_t v20 = -1;
    int v21 = 0x7FFFFFFF;
    sub_B0FD5C((void *)(a1 + 104), &v13, 0, 0, 1);
    int v10 = *(_DWORD *)(a1 + 96);
    unsigned int v11 = v10 + v10 * v5;
    unsigned int v12 = v11 + 2;
    if (*(unsigned char *)(a1 + 20))
    {
      if (!sub_B0FE8C((void *)(a1 + 104), 0, v12, v11, v10 + v10 * *(_DWORD *)(a1 + 416), 2147483646)) {
        return;
      }
    }
    else if (!sub_B0FE8C((void *)(a1 + 104), 0, v12, v11, 0xFFFFFFFF, 2147483646))
    {
      return;
    }
    sub_A3EF14((uint64_t *)(a1 + 248), &v23);
  }
}

double sub_B0E030(uint64_t a1, int a2)
{
  sub_725D0((uint64_t)v34);
  uint64_t v4 = *(unsigned int **)(a1 + 272);
  int v5 = *(unsigned int **)(a1 + 280);
  if (v4 != v5)
  {
    int v6 = a2 + 1;
    int v7 = a2 + 2;
    int v32 = ~a2;
    while (1)
    {
      unsigned int v33 = *v4;
      unint64_t v8 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), v33);
      if (HIDWORD(v8) == 1 && (v8 + 3) < 2)
      {
LABEL_12:
        int v13 = 0;
        goto LABEL_17;
      }
      uint64_t v10 = *(void *)(*(void *)(a1 + 24) + 4120);
      uint64_t v11 = v10 + 24;
      if (*(unsigned char *)(v10 + 17)) {
        break;
      }
      unsigned int v12 = (int *)sub_498D5C(v11, __ROR8__(v8, 32), 0, "stop");
      int v16 = (unsigned __int16 *)((char *)v12 - *v12);
      if (*v16 >= 0x15u)
      {
        unsigned int v15 = v16[10];
        if (v15) {
          goto LABEL_15;
        }
      }
      int v13 = 30;
LABEL_17:
      unsigned int v35 = 0;
      uint64_t v17 = *(void *)(a1 + 192);
      int v18 = (char *)(v17 + ((unint64_t)*(unsigned int *)(sub_B1041C(a1 + 104, &v35) + 4) << 6));
      unsigned int v35 = 0;
      uint64_t v19 = *(void *)(a1 + 192);
      uint64_t v20 = sub_B1041C(a1 + 104, &v35);
      sub_B10058(a1 + 104, 0, v18, (unsigned char *)(v19 + ((unint64_t)*(unsigned int *)(v20 + 8) << 6)));
      sub_B121F0((void *)(a1 + 104), v6 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * v33, 0);
      unsigned int v35 = 0;
      uint64_t v21 = *(void *)(a1 + 192);
      uint64_t v22 = (unsigned int *)(v21 + ((unint64_t)*(unsigned int *)(sub_B1041C(a1 + 104, &v35) + 4) << 6));
      unsigned int v35 = 0;
      uint64_t v23 = *(void *)(a1 + 192);
      for (uint64_t i = (unsigned int *)(v23 + ((unint64_t)*(unsigned int *)(sub_B1041C(a1 + 104, &v35) + 8) << 6));
            v22 != i;
            v22 += 16)
      {
        unsigned int *v22 = v33;
        unsigned int v25 = v22[7];
        v22[3] = v25;
        v22[4] = -1;
        v22[7] = v25 + v13;
      }
      unsigned int v26 = v33;
      int v27 = *(_DWORD *)(a1 + 96);
      if (*(unsigned char *)(a1 + 20))
      {
        unsigned int v28 = v27 + v27 * *(_DWORD *)(a1 + 416) + 1;
        uint64_t v29 = *(void *)(a1 + 48);
        if (!v29) {
          goto LABEL_23;
        }
      }
      else
      {
        unsigned int v28 = -1;
        uint64_t v29 = *(void *)(a1 + 48);
        if (!v29)
        {
LABEL_23:
          int v30 = 2147483646;
          goto LABEL_24;
        }
      }
      int v30 = sub_AD7004(v29, v33, *(_DWORD *)(a1 + 100) + v32);
LABEL_24:
      if (sub_B0FE8C((void *)(a1 + 104), 0, v7 + v27 + v27 * v26, v27 + v27 * v26 + 1, v28, v30)) {
        sub_A3EF14((uint64_t *)(a1 + 296), &v33);
      }
      if (++v4 == v5) {
        goto LABEL_26;
      }
    }
    unsigned int v12 = (int *)sub_A1A290(v11, v8, 0, "transfers at stop");
    int v13 = 0;
    uint64_t v14 = (unsigned __int16 *)((char *)v12 - *v12);
    if (*v14 < 5u) {
      goto LABEL_17;
    }
    unsigned int v15 = v14[2];
    if (!v15) {
      goto LABEL_12;
    }
LABEL_15:
    int v13 = *(int *)((char *)v12 + v15);
    goto LABEL_17;
  }
LABEL_26:
  double result = sub_72688((uint64_t)v34) + *(double *)(a1 + 568);
  *(double *)(a1 + 568) = result;
  return result;
}

double sub_B0E2D0(uint64_t a1, int a2)
{
  sub_725D0((uint64_t)v289);
  uint64_t v4 = *(unsigned int **)(a1 + 272);
  unsigned int v269 = *(unsigned int **)(a1 + 280);
  if (v4 != v269)
  {
    int v273 = a2 + 2;
    int v274 = a2 + 1;
    int v271 = ~a2;
    int v272 = (uint64_t *)(a1 + 296);
    char v268 = (void **)(a1 + 320);
    int v281 = (void *)(a1 + 104);
    uint64_t v282 = a1;
    while (1)
    {
      int v270 = v4;
      unsigned int v280 = *v4;
      int v5 = (unint64_t *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), *v4);
      sub_A19FA8((uint64_t)&v283, *(void *)(a1 + 24), *v5);
      int v6 = v284;
      int v7 = &v285;
      if (v288) {
        int v7 = v287;
      }
      if ((unint64_t)v284 < *v7) {
        break;
      }
LABEL_3:
      uint64_t v4 = v270 + 1;
      if (v270 + 1 == v269) {
        goto LABEL_317;
      }
    }
LABEL_13:
    uint64_t v11 = 0;
    unint64_t v12 = __ROR8__(*v6, 32);
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = *(void *)(v13 + 72) - 1;
    unint64_t v15 = 0xC4CEB9FE1A85EC53
        * ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) >> 33));
    unint64_t v16 = v15 ^ (v15 >> 33);
    uint64_t v17 = *(void *)(v13 + 48);
    uint64_t v18 = v17 + 11;
    uint64_t v19 = -1;
    for (unint64_t i = v16; ; unint64_t i = v11 + v21)
    {
      uint64_t v21 = i & v14;
      unint64_t v22 = (i & v14) / 0x30;
      unint64_t v23 = v21 - 48 * v22;
      if (((*(unsigned __int8 *)(v17 + 16 * v22 + (v23 >> 3) + 10) >> (v23 & 7)) & 1) == 0)
      {
        if (v19 == -1) {
          unint64_t v59 = v21;
        }
        else {
          unint64_t v59 = v19;
        }
        if (!sub_AD2F40(v13, 1)) {
          goto LABEL_98;
        }
        goto LABEL_55;
      }
      uint64_t v24 = *(void *)(v17 + 16 * v22);
      if (!*(void *)(v13 + 40)) {
        goto LABEL_33;
      }
      unsigned int v25 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
      if ((unsigned __int16)(v21 - 48 * v22) < 9u)
      {
        __int16 v26 = 0;
        LOBYTE(v31) = v21 - 48 * v22;
        goto LABEL_29;
      }
      __int16 v26 = 0;
      uint64_t v27 = (unsigned __int16)(v21 - 48 * v22 - 9) >> 3;
      if ((unsigned __int16)(v21 - 48 * v22 - 9) >> 3)
      {
        __int16 v28 = 0;
        uint64_t v29 = v27 + 1;
        uint64_t v30 = (v27 + 1) & 0x3FFE;
        unsigned __int16 v31 = v23 - 8 * v30;
        int v32 = &v25[v30];
        unsigned int v33 = (unsigned __int8 *)(v18 + 16 * v22);
        uint64_t v34 = v30;
        do
        {
          uint64_t v35 = *(v33 - 1);
          int v36 = *v33;
          v33 += 2;
          v26 += byte_20EBFB6[v35];
          v28 += byte_20EBFB6[v36];
          v34 -= 2;
        }
        while (v34);
        v26 += v28;
        if (v29 == v30) {
          goto LABEL_28;
        }
      }
      else
      {
        unsigned __int16 v31 = v21 - 48 * v22;
        int v32 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
      }
      do
      {
        int v37 = *v32++;
        v26 += byte_20EBFB6[v37];
        v31 -= 8;
      }
      while (v31 > 8u);
LABEL_28:
      v25 += ((unsigned __int16)(v23 - 9) >> 3) + 1;
LABEL_29:
      uint64_t v38 = (_DWORD *)(v24
                     + 12
                     * (unsigned __int16)(v26 + byte_20EBFB6[~(-1 << v31) & (unint64_t)*v25]));
      BOOL v39 = *(_DWORD *)(v13 + 36) == v38[1] && *(_DWORD *)(v13 + 32) == *v38;
      if (v39)
      {
        if (v19 == -1) {
          uint64_t v19 = v21;
        }
        goto LABEL_16;
      }
LABEL_33:
      uint64_t v40 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
      if ((unsigned __int16)(v21 - 48 * v22) < 9u)
      {
        __int16 v41 = 0;
        uint64_t v52 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
        LOBYTE(v46) = v21 - 48 * v22;
        goto LABEL_43;
      }
      __int16 v41 = 0;
      uint64_t v42 = (unsigned __int16)(v21 - 48 * v22 - 9) >> 3;
      if ((unsigned __int16)(v21 - 48 * v22 - 9) >> 3)
      {
        __int16 v43 = 0;
        uint64_t v44 = v42 + 1;
        uint64_t v45 = (v42 + 1) & 0x3FFE;
        unsigned __int16 v46 = v23 - 8 * v45;
        uint64_t v47 = &v40[v45];
        uint64_t v48 = (unsigned __int8 *)(v18 + 16 * v22);
        uint64_t v49 = v45;
        do
        {
          uint64_t v50 = *(v48 - 1);
          int v51 = *v48;
          v48 += 2;
          v41 += byte_20EBFB6[v50];
          v43 += byte_20EBFB6[v51];
          v49 -= 2;
        }
        while (v49);
        v41 += v43;
        if (v44 == v45) {
          goto LABEL_42;
        }
      }
      else
      {
        unsigned __int16 v46 = v21 - 48 * v22;
        uint64_t v47 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
      }
      do
      {
        int v53 = *v47++;
        v41 += byte_20EBFB6[v53];
        v46 -= 8;
      }
      while (v46 > 8u);
LABEL_42:
      uint64_t v52 = &v40[((unsigned __int16)(v23 - 9) >> 3) + 1];
LABEL_43:
      if (v12 == *(void *)(v24
                            + 12
                            * (unsigned __int16)(v41 + byte_20EBFB6[~(-1 << v46) & (unint64_t)*v52])))
      {
        if (v21 != -1)
        {
          if ((unsigned __int16)(v21 - 48 * v22) < 9u)
          {
            __int16 v56 = 0;
          }
          else
          {
            if ((((_WORD)v21 - 48 * (_WORD)v22 - 8) & 0xFFF8) != 0) {
              __int16 v54 = 8;
            }
            else {
              __int16 v54 = v21 - 48 * v22 - 8;
            }
            unsigned __int16 v55 = ~v54 + v21 - 48 * v22;
            if (v55 < 8u)
            {
              __int16 v56 = 0;
              unsigned __int16 v57 = v23;
              unint64_t v58 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
              goto LABEL_119;
            }
            __int16 v117 = 0;
            __int16 v118 = 0;
            uint64_t v119 = (v55 >> 3) + 1;
            unsigned __int16 v57 = v23 - 8 * (((v55 >> 3) + 1) & 0x3FFE);
            unint64_t v58 = &v40[v119 & 0x3FFE];
            unsigned int v120 = (unsigned __int8 *)(v17 + 16 * v22 + 11);
            uint64_t v121 = v119 & 0x3FFE;
            do
            {
              uint64_t v122 = *(v120 - 1);
              int v123 = *v120;
              v120 += 2;
              v117 += byte_20EBFB6[v122];
              v118 += byte_20EBFB6[v123];
              v121 -= 2;
            }
            while (v121);
            __int16 v56 = v118 + v117;
            if ((v119 & 0x3FFE) != v119)
            {
              do
              {
LABEL_119:
                int v124 = *v58++;
                v56 += byte_20EBFB6[v124];
                v57 -= 8;
              }
              while (v57 > 8u);
            }
            v40 += ((unsigned __int16)(v23 - 9) >> 3) + 1;
            LOBYTE(v23) = v57;
          }
          uint64_t v125 = *(void *)(v13 + 56);
          unsigned __int16 v126 = v56 + byte_20EBFB6[~(-1 << v23) & (unint64_t)*v40];
          uint64_t v127 = v17 + 16 * v22;
          if (*(unsigned __int16 *)(v127 + 8) != v126 || v127 + 16 == v125)
          {
            uint64_t v103 = (_DWORD *)(v24 + 12 * v126);
          }
          else
          {
            uint64_t v129 = v127 + 32;
            do
            {
              if (*(_WORD *)(v129 - 8)) {
                BOOL v130 = 1;
              }
              else {
                BOOL v130 = v129 == v125;
              }
              v129 += 16;
            }
            while (!v130);
            uint64_t v103 = *(_DWORD **)(v129 - 32);
          }
          goto LABEL_99;
        }
        unint64_t v59 = -1;
        if (!sub_AD2F40(v13, 1))
        {
LABEL_98:
          unint64_t v290 = v12;
          int v291 = -1;
          sub_AD3484(v13, (uint64_t *)&v290, v59, v292);
          uint64_t v103 = (_DWORD *)v293;
          goto LABEL_99;
        }
LABEL_55:
        uint64_t v60 = 0;
        unint64_t v290 = v12;
        int v291 = -1;
        uint64_t v61 = *(void *)(v13 + 72) - 1;
        uint64_t v62 = *(void *)(v13 + 48);
        uint64_t v63 = v62 + 11;
        uint64_t v64 = -1;
        while (2)
        {
          uint64_t v65 = v16 & v61;
          unint64_t v66 = (v16 & v61) / 0x30;
          unint64_t v67 = (v16 & v61) % 0x30;
          if (((*(unsigned __int8 *)(v62 + 16 * v66 + (v67 >> 3) + 10) >> (v67 & 7)) & 1) == 0)
          {
            if (v64 == -1) {
              unint64_t v102 = v16 & v61;
            }
            else {
              unint64_t v102 = v64;
            }
            goto LABEL_96;
          }
          uint64_t v68 = *(void *)(v13 + 40);
          uint64_t v69 = *(void *)(v62 + 16 * v66);
          if (!v68) {
            break;
          }
          unint64_t v70 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
          if ((unsigned __int16)((v16 & v61) % 0x30) < 9u)
          {
            __int16 v71 = 0;
            LOBYTE(v72) = (v16 & v61) % 0x30;
            goto LABEL_71;
          }
          __int16 v71 = 0;
          uint64_t v72 = (unsigned __int16)(v65 - 48 * v66 - 9) >> 3;
          if (!((unsigned __int16)(v65 - 48 * v66 - 9) >> 3))
          {
            LODWORD(v72) = (v16 & v61) % 0x30;
            char v76 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
            do
            {
LABEL_69:
              int v81 = *v76++;
              v71 += byte_20EBFB6[v81];
              LOWORD(v72) = v72 - 8;
            }
            while ((unsigned __int16)v72 > 8u);
            goto LABEL_70;
          }
          __int16 v73 = 0;
          uint64_t v74 = v72 + 1;
          uint64_t v75 = (v72 + 1) & 0x3FFE;
          LOWORD(v72) = v67 - 8 * v75;
          char v76 = &v70[v75];
          uint64_t v77 = (unsigned __int8 *)(v63 + 16 * v66);
          uint64_t v78 = v75;
          do
          {
            uint64_t v79 = *(v77 - 1);
            int v80 = *v77;
            v77 += 2;
            v71 += byte_20EBFB6[v79];
            v73 += byte_20EBFB6[v80];
            v78 -= 2;
          }
          while (v78);
          v71 += v73;
          if (v74 != v75) {
            goto LABEL_69;
          }
LABEL_70:
          v70 += ((unsigned __int16)(v67 - 9) >> 3) + 1;
LABEL_71:
          uint64_t v82 = (_DWORD *)(v69
                         + 12
                         * (unsigned __int16)(v71 + byte_20EBFB6[~(-1 << v72) & (unint64_t)*v70]));
          if (*(_DWORD *)(v13 + 36) == v82[1] && *(_DWORD *)(v13 + 32) == *v82)
          {
            if (v64 == -1) {
              uint64_t v64 = v16 & v61;
            }
LABEL_58:
            unint64_t v16 = ++v60 + v65;
            continue;
          }
          break;
        }
        unsigned __int16 v84 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
        if ((unsigned __int16)((v16 & v61) % 0x30) < 9u)
        {
          __int16 v85 = 0;
          unsigned __int16 v95 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
          LOBYTE(v86) = (v16 & v61) % 0x30;
          goto LABEL_85;
        }
        __int16 v85 = 0;
        uint64_t v86 = (unsigned __int16)(v65 - 48 * v66 - 9) >> 3;
        if (!((unsigned __int16)(v65 - 48 * v66 - 9) >> 3))
        {
          LODWORD(v86) = (v16 & v61) % 0x30;
          __int16 v90 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
          do
          {
LABEL_83:
            int v96 = *v90++;
            v85 += byte_20EBFB6[v96];
            LOWORD(v86) = v86 - 8;
          }
          while ((unsigned __int16)v86 > 8u);
          goto LABEL_84;
        }
        __int16 v87 = 0;
        uint64_t v88 = v86 + 1;
        uint64_t v89 = (v86 + 1) & 0x3FFE;
        LOWORD(v86) = v67 - 8 * v89;
        __int16 v90 = &v84[v89];
        int v91 = (unsigned __int8 *)(v63 + 16 * v66);
        uint64_t v92 = v89;
        do
        {
          uint64_t v93 = *(v91 - 1);
          int v94 = *v91;
          v91 += 2;
          v85 += byte_20EBFB6[v93];
          v87 += byte_20EBFB6[v94];
          v92 -= 2;
        }
        while (v92);
        v85 += v87;
        if (v88 != v89) {
          goto LABEL_83;
        }
LABEL_84:
        unsigned __int16 v95 = &v84[((unsigned __int16)(v67 - 9) >> 3) + 1];
LABEL_85:
        if (v12 != *(void *)(v69
                              + 12
                              * (unsigned __int16)(v85
                                                 + byte_20EBFB6[~(-1 << v86) & (unint64_t)*v95])))
          goto LABEL_58;
        if (v65 == -1)
        {
          unint64_t v102 = -1;
LABEL_96:
          sub_AD3484(v13, (uint64_t *)&v290, v102, v292);
          uint64_t v103 = (_DWORD *)v293;
          goto LABEL_99;
        }
        if ((unsigned __int16)((v16 & v61) % 0x30) < 9u)
        {
          __int16 v99 = 0;
        }
        else
        {
          if ((((_WORD)v65 - 48 * (_WORD)v66 - 8) & 0xFFF8) != 0) {
            __int16 v97 = 8;
          }
          else {
            __int16 v97 = v65 - 48 * v66 - 8;
          }
          unsigned __int16 v98 = ~v97 + v65 - 48 * v66;
          if (v98 < 8u)
          {
            __int16 v99 = 0;
            unsigned __int16 v100 = v67;
            uint64_t v101 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
            goto LABEL_257;
          }
          __int16 v234 = 0;
          __int16 v235 = 0;
          uint64_t v236 = (v98 >> 3) + 1;
          unsigned __int16 v100 = v67 - 8 * (((v98 >> 3) + 1) & 0x3FFE);
          uint64_t v101 = &v84[v236 & 0x3FFE];
          unsigned int v237 = (unsigned __int8 *)(v62 + 16 * v66 + 11);
          uint64_t v238 = v236 & 0x3FFE;
          do
          {
            uint64_t v239 = *(v237 - 1);
            int v240 = *v237;
            v237 += 2;
            v234 += byte_20EBFB6[v239];
            v235 += byte_20EBFB6[v240];
            v238 -= 2;
          }
          while (v238);
          __int16 v99 = v235 + v234;
          if ((v236 & 0x3FFE) != v236)
          {
            do
            {
LABEL_257:
              int v241 = *v101++;
              v99 += byte_20EBFB6[v241];
              v100 -= 8;
            }
            while (v100 > 8u);
          }
          v84 += ((unsigned __int16)(v67 - 9) >> 3) + 1;
          LOBYTE(v67) = v100;
        }
        uint64_t v242 = v62 + 16 * v66;
        unsigned int v243 = *(_DWORD ***)(v13 + 56);
        unsigned __int16 v244 = v99 + byte_20EBFB6[~(-1 << v67) & (unint64_t)*v84];
        uint64_t v103 = (_DWORD *)(v69 + 12 * v244);
        if (*(unsigned __int16 *)(v242 + 8) == v244)
        {
          uint64_t v245 = v242 + 16;
          if ((_DWORD **)(v242 + 16) != v243)
          {
            while (1)
            {
              uint64_t v246 = (_DWORD **)v245;
              if (*(_WORD *)(v245 + 8)) {
                break;
              }
              v245 += 16;
              if (v246 + 2 == v243)
              {
                uint64_t v242 = *(void *)(v13 + 56);
                goto LABEL_267;
              }
            }
            uint64_t v242 = v245;
LABEL_267:
            uint64_t v103 = *v246;
            goto LABEL_268;
          }
        }
        else
        {
LABEL_268:
          if ((_DWORD **)v242 != v243 && v68)
          {
            do
            {
              if (*(_DWORD *)(v13 + 36) != v103[1] || *(_DWORD *)(v13 + 32) != *v103) {
                break;
              }
              v103 += 3;
              if (v103 == (_DWORD *)(*(void *)v242 + 12 * *(unsigned __int16 *)(v242 + 8)))
              {
                v242 += 16;
                if ((_DWORD **)v242 != v243)
                {
                  do
                  {
                    if (*(_WORD *)(v242 + 8))
                    {
                      uint64_t v103 = *(_DWORD **)v242;
                      goto LABEL_272;
                    }
                    v242 += 16;
                  }
                  while ((_DWORD **)v242 != v243);
                  uint64_t v103 = *(_DWORD **)(v242 - 16);
                }
                break;
              }
LABEL_272:
              ;
            }
            while ((_DWORD **)v242 != v243);
          }
        }
LABEL_99:
        unsigned int v104 = v103[2];
        if (v104 != -1) {
          goto LABEL_141;
        }
        int v105 = *(_DWORD *)(v13 + 112);
        *(_DWORD *)(v13 + 112) = v105 + 1;
        v103[2] = v105;
        uint64_t v107 = *(unint64_t **)(v13 + 96);
        unint64_t v106 = *(void *)(v13 + 104);
        if ((unint64_t)v107 < v106)
        {
          *uint64_t v107 = v12;
          uint64_t v108 = (uint64_t)(v107 + 1);
          goto LABEL_140;
        }
        __int16 v109 = (unint64_t **)(v13 + 88);
        unint64_t v110 = *(char **)(v13 + 88);
        uint64_t v111 = ((char *)v107 - v110) >> 3;
        unint64_t v112 = v111 + 1;
        if ((unint64_t)(v111 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v113 = v106 - (void)v110;
        if (v113 >> 2 > v112) {
          unint64_t v112 = v113 >> 2;
        }
        if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v112 = 0x1FFFFFFFFFFFFFFFLL;
        }
        unint64_t v276 = v112;
        if (!v112)
        {
          uint64_t v114 = 0;
          unsigned __int16 v115 = (unint64_t *)(8 * v111);
          *(void *)(8 * v111) = v12;
          uint64_t v108 = 8 * v111 + 8;
          if (v107 != (unint64_t *)v110) {
            goto LABEL_110;
          }
LABEL_114:
          *(void *)(v13 + 88) = v115;
          *(void *)(v13 + 96) = v108;
          *(void *)(v13 + 104) = &v114[8 * v276];
          if (v107) {
            goto LABEL_139;
          }
          goto LABEL_140;
        }
        if (v112 >> 61) {
          goto LABEL_319;
        }
        uint64_t v114 = (char *)operator new(8 * v112);
        __int16 v109 = (unint64_t **)(v13 + 88);
        unsigned __int16 v115 = (unint64_t *)&v114[8 * v111];
        *unsigned __int16 v115 = v12;
        uint64_t v108 = (uint64_t)(v115 + 1);
        if (v107 == (unint64_t *)v110) {
          goto LABEL_114;
        }
LABEL_110:
        unint64_t v116 = (char *)(v107 - 1) - v110;
        if (v116 < 0x58) {
          goto LABEL_323;
        }
        if ((unint64_t)(v110 - v114) < 0x20) {
          goto LABEL_323;
        }
        uint64_t v131 = (v116 >> 3) + 1;
        uint64_t v132 = 8 * (v131 & 0x3FFFFFFFFFFFFFFCLL);
        int v133 = &v107[v132 / 0xFFFFFFFFFFFFFFF8];
        unsigned __int16 v115 = (unint64_t *)((char *)v115 - v132);
        uint64_t v134 = &v114[8 * v111 - 16];
        int v135 = v107 - 2;
        uint64_t v136 = v131 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v137 = *(_OWORD *)v135;
          *((_OWORD *)v134 - 1) = *((_OWORD *)v135 - 1);
          *(_OWORD *)uint64_t v134 = v137;
          v134 -= 32;
          v135 -= 4;
          v136 -= 4;
        }
        while (v136);
        uint64_t v107 = v133;
        if (v131 != (v131 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_323:
          do
          {
            unint64_t v138 = *--v107;
            *--unsigned __int16 v115 = v138;
          }
          while (v107 != (unint64_t *)v110);
        }
        uint64_t v107 = *v109;
        *(void *)(v13 + 88) = v115;
        *(void *)(v13 + 96) = v108;
        *(void *)(v13 + 104) = &v114[8 * v276];
        if (v107) {
LABEL_139:
        }
          operator delete(v107);
LABEL_140:
        *(void *)(v13 + 96) = v108;
        unsigned int v104 = v103[2];
LABEL_141:
        *(double *)(v282 + 624) = *(double *)(v282 + 624) + 1.0;
        if (v280 == v104) {
          goto LABEL_239;
        }
        LODWORD(v292[0]) = 0;
        uint64_t v139 = *(void *)(v282 + 192);
        long long v140 = (char *)(v139
                      + ((unint64_t)*(unsigned int *)(sub_B1041C((uint64_t)v281, (unsigned int *)v292) + 4) << 6));
        LODWORD(v292[0]) = 0;
        uint64_t v141 = *(void *)(v282 + 192);
        uint64_t v142 = sub_B1041C((uint64_t)v281, (unsigned int *)v292);
        sub_B10058((uint64_t)v281, 0, v140, (unsigned char *)(v141 + ((unint64_t)*(unsigned int *)(v142 + 8) << 6)));
        unsigned int v143 = v274 + *(_DWORD *)(v282 + 96) * (v280 + 1);
        LODWORD(v292[0]) = v143;
        if (*(void *)(v282 + 184) == *(void *)(v282 + 144)) {
          goto LABEL_181;
        }
        unint64_t v144 = sub_B1067C((uint64_t)v281, (unsigned int *)v292);
        if (v144 == -1) {
          goto LABEL_181;
        }
        uint64_t v145 = *(void *)(v282 + 152);
        uint64_t v146 = v145 + 16 * (v144 / 0x30);
        uint64_t v147 = (unsigned __int8 *)(v146 + 10);
        int v148 = v144 % 0x30;
        if ((unsigned __int16)(v144 % 0x30) < 9u)
        {
          __int16 v150 = 0;
          goto LABEL_156;
        }
        uint64_t v149 = (unsigned __int16)(v144 % 0x30 - 9) >> 3;
        __int16 v150 = 0;
        if (!((unsigned __int16)(v144 % 0x30 - 9) >> 3))
        {
          unsigned __int16 v154 = v144 % 0x30;
          uint64_t v155 = (unsigned __int8 *)(v146 + 10);
          do
          {
LABEL_154:
            int v160 = *v155++;
            v150 += byte_20EC1B6[v160];
            v154 -= 8;
          }
          while (v154 > 8u);
          goto LABEL_155;
        }
        __int16 v151 = 0;
        uint64_t v152 = v149 + 1;
        uint64_t v153 = (v149 + 1) & 0x3FFE;
        unsigned __int16 v154 = v148 - 8 * v153;
        uint64_t v155 = &v147[v153];
        uint64_t v156 = (unsigned __int8 *)(v145 + 16 * (v144 / 0x30) + 11);
        uint64_t v157 = v153;
        do
        {
          uint64_t v158 = *(v156 - 1);
          int v159 = *v156;
          v156 += 2;
          v150 += byte_20EC1B6[v158];
          v151 += byte_20EC1B6[v159];
          v157 -= 2;
        }
        while (v157);
        v150 += v151;
        if (v152 != v153) {
          goto LABEL_154;
        }
LABEL_155:
        v147 += ((unsigned __int16)(v148 - 9) >> 3) + 1;
        LOBYTE(v148) = v154;
LABEL_156:
        unsigned __int16 v161 = *(_DWORD ***)(v282 + 160);
        unsigned __int16 v162 = v150 + byte_20EC1B6[~(-1 << v148) & (unint64_t)*v147];
        if (*(unsigned __int16 *)(v146 + 8) != v162)
        {
          long long v164 = (_DWORD *)(*(void *)v146 + 12 * v162);
          if ((_DWORD **)v146 != v161) {
            goto LABEL_164;
          }
          goto LABEL_172;
        }
        v146 += 16;
        if ((_DWORD **)v146 == v161) {
          goto LABEL_181;
        }
        while (1)
        {
          uint64_t v163 = (_DWORD **)v146;
          if (*(_WORD *)(v146 + 8)) {
            break;
          }
          v146 += 16;
          if (v163 + 2 == v161)
          {
            uint64_t v146 = *(void *)(v282 + 160);
            break;
          }
        }
        long long v164 = *v163;
        if ((_DWORD **)v146 != v161)
        {
LABEL_164:
          if (*(void *)(v282 + 144))
          {
            while (*(_DWORD *)(v282 + 136) == *v164)
            {
              v164 += 3;
              if (v164 == (_DWORD *)(*(void *)v146 + 12 * *(unsigned __int16 *)(v146 + 8)))
              {
                while (1)
                {
                  v146 += 16;
                  if ((_DWORD **)v146 == v161) {
                    goto LABEL_181;
                  }
                  if (*(_WORD *)(v146 + 8))
                  {
                    long long v164 = *(_DWORD **)v146;
                    break;
                  }
                }
              }
              if ((_DWORD **)v146 == v161) {
                break;
              }
            }
          }
        }
LABEL_172:
        if ((_DWORD **)v146 == v161)
        {
LABEL_181:
          unsigned int v166 = v280;
          goto LABEL_182;
        }
        uint64_t v165 = (v164[2] - v164[1]);
        unsigned int v166 = v280;
        if (v165)
        {
          unsigned int v277 = v104;
          uint64_t v167 = 0;
          unsigned int v168 = 0;
          do
          {
            uint64_t v169 = v165;
            uint64_t v170 = (_OWORD *)sub_B11F04(v281, v143, v168);
            long long v171 = v170[2];
            long long v172 = v170[3];
            long long v173 = v170[1];
            v292[0] = *v170;
            long long v293 = v171;
            long long v294 = v172;
            v292[1] = v173;
            v167 |= sub_B119B0((uint64_t)v281, (uint64_t)v292, 0, 0, 1) & 0xFF00;
            uint64_t v165 = v169;
            ++v168;
          }
          while (v169 != v168);
          unsigned int v104 = v277;
          if (v167)
          {
            LODWORD(v292[0]) = 0;
            uint64_t v174 = *(void *)(v282 + 192);
            uint64_t v175 = v174
                 + ((unint64_t)*(unsigned int *)(sub_B1041C((uint64_t)v281, (unsigned int *)v292) + 4) << 6);
            LODWORD(v292[0]) = 0;
            uint64_t v176 = *(void *)(v282 + 192);
            uint64_t v177 = sub_B1041C((uint64_t)v281, (unsigned int *)v292);
            uint64_t v178 = (long long *)(v176 + ((unint64_t)*(unsigned int *)(v177 + 8) << 6));
            if ((long long *)v175 != v178)
            {
              while (*(_DWORD *)(v175 + 28) != 0x7FFFFFFF)
              {
                v175 += 64;
                if ((long long *)v175 == v178)
                {
                  uint64_t v175 = v176 + ((unint64_t)*(unsigned int *)(v177 + 8) << 6);
                  goto LABEL_316;
                }
              }
              if ((long long *)v175 != v178)
              {
                for (uint64_t j = (long long *)(v175 + 64); j != v178; j += 4)
                {
                  if (*((_DWORD *)j + 7) != 0x7FFFFFFF)
                  {
                    long long v262 = *j;
                    long long v263 = j[1];
                    long long v264 = j[3];
                    *(_OWORD *)(v175 + 32) = j[2];
                    *(_OWORD *)(v175 + 48) = v264;
                    *(_OWORD *)uint64_t v175 = v262;
                    *(_OWORD *)(v175 + 16) = v263;
                    v175 += 64;
                  }
                }
              }
            }
LABEL_316:
            LODWORD(v292[0]) = 0;
            uint64_t v265 = *(void *)(v282 + 192);
            uint64_t v266 = sub_B1041C((uint64_t)v281, (unsigned int *)v292);
            sub_B10058((uint64_t)v281, 0, (char *)v175, (unsigned char *)(v265 + ((unint64_t)*(unsigned int *)(v266 + 8) << 6)));
          }
        }
LABEL_182:
        LODWORD(v292[0]) = 0;
        uint64_t v179 = *(void *)(v282 + 192);
        uint64_t v180 = v179 + ((unint64_t)*(unsigned int *)(sub_B1041C((uint64_t)v281, (unsigned int *)v292) + 4) << 6);
        LODWORD(v292[0]) = 0;
        uint64_t v181 = *(void *)(v282 + 192);
        uint64_t v182 = v181 + ((unint64_t)*(unsigned int *)(sub_B1041C((uint64_t)v281, (unsigned int *)v292) + 8) << 6);
        if (v180 != v182)
        {
          unsigned int v183 = v284;
          do
          {
            *(_DWORD *)uint64_t v180 = v166;
            *(_DWORD *)(v180 + 16) = -1;
            int32x2_t v184 = *(int32x2_t *)(v180 + 28);
            *(_DWORD *)(v180 + 12) = v184.i32[0];
            int v185 = *((_DWORD *)v183 + 2);
            int v186 = v185 / 10;
            int v187 = v185 % 10;
            if (v185 < 0) {
              char v188 = -5;
            }
            else {
              char v188 = 5;
            }
            *(int32x2_t *)(v180 + 28) = vadd_s32(vdup_n_s32(v186+ (((103 * (char)(v188 + v187)) >> 15) & 1)+ ((103 * (char)(v188 + v187)) >> 10)), v184);
            v180 += 64;
          }
          while (v180 != v182);
        }
        if (*(unsigned char *)(v282 + 20))
        {
          unsigned int v275 = *(_DWORD *)(v282 + 96) + *(_DWORD *)(v282 + 96) * *(_DWORD *)(v282 + 416) + 1;
          int v278 = *(_DWORD *)(v282 + 96);
          uint64_t v189 = *(void *)(v282 + 48);
          if (v189) {
            goto LABEL_190;
          }
LABEL_234:
          int v213 = 2147483646;
LABEL_235:
          if (!sub_B0FE8C(v281, 0, v273 + v278 * (v104 + 1), v278 * (v104 + 1) + 1, v275, v213)) {
            goto LABEL_239;
          }
          if (*(void *)(v282 + 304) <= (unint64_t)v104) {
            sub_A3E96C((uint64_t)v272, v104 + 1, 0);
          }
          uint64_t v217 = *v272;
          unint64_t v218 = (unint64_t)v104 >> 6;
          uint64_t v219 = 1 << v104;
          if ((*(void *)(*v272 + 8 * v218) & (1 << v104)) != 0)
          {
LABEL_239:
            unint64_t v9 = (unint64_t)v285;
            int v6 = (void *)((char *)v284 + 12);
            unsigned __int16 v284 = v6;
            if (v6 != v285) {
              goto LABEL_240;
            }
LABEL_292:
            int v6 = v286;
            unint64_t v10 = v287[0];
            unsigned __int16 v284 = v286;
            int v8 = 1;
            unsigned __int8 v288 = 1;
            a1 = v282;
            if (*(unsigned char *)(v283 + 16)) {
              goto LABEL_293;
            }
            goto LABEL_10;
          }
          uint64_t v220 = (void *)v282;
          unsigned __int16 v222 = *(char **)(v282 + 328);
          unint64_t v221 = *(void *)(v282 + 336);
          if ((unint64_t)v222 < v221)
          {
            *(_DWORD *)unsigned __int16 v222 = v104;
            uint64_t v223 = (uint64_t)(v222 + 4);
            goto LABEL_291;
          }
          __int16 v224 = (char *)*v268;
          uint64_t v225 = v222 - (unsigned char *)*v268;
          uint64_t v226 = v225 >> 2;
          unint64_t v227 = (v225 >> 2) + 1;
          if (v227 >> 62) {
            sub_2E00();
          }
          uint64_t v228 = v221 - (void)v224;
          if (v228 >> 1 > v227) {
            unint64_t v227 = v228 >> 1;
          }
          if ((unint64_t)v228 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v227 = 0x3FFFFFFFFFFFFFFFLL;
          }
          unint64_t v279 = v227;
          if (v227)
          {
            if (!(v227 >> 62))
            {
              uint64_t v229 = operator new(4 * v227);
              uint64_t v230 = (unsigned int *)&v229[4 * v226];
              unsigned int *v230 = v104;
              uint64_t v223 = (uint64_t)(v230 + 1);
              if (v222 != v224) {
                goto LABEL_252;
              }
LABEL_265:
              int v233 = (void *)v282;
              unint64_t v232 = v279;
              goto LABEL_288;
            }
LABEL_319:
            sub_188D718();
          }
          uint64_t v229 = 0;
          uint64_t v230 = (unsigned int *)(4 * v226);
          *(_DWORD *)(4 * v226) = v104;
          uint64_t v223 = 4 * v226 + 4;
          if (v222 == v224) {
            goto LABEL_265;
          }
LABEL_252:
          unint64_t v231 = v222 - 4 - v224;
          unint64_t v232 = v279;
          if (v231 >= 0x2C)
          {
            int v233 = (void *)v282;
            if ((unint64_t)(v222 - &v229[v225]) >= 0x20)
            {
              uint64_t v248 = (v231 >> 2) + 1;
              uint64_t v249 = 4 * (v248 & 0x7FFFFFFFFFFFFFF8);
              unint64_t v250 = &v222[-v249];
              uint64_t v230 = (unsigned int *)((char *)v230 - v249);
              uint64_t v251 = &v229[4 * v226 - 16];
              uint64_t v252 = v222 - 16;
              uint64_t v253 = v248 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v254 = *(_OWORD *)v252;
                *(v251 - 1) = *((_OWORD *)v252 - 1);
                *uint64_t v251 = v254;
                v251 -= 2;
                v252 -= 32;
                v253 -= 8;
              }
              while (v253);
              unsigned __int16 v222 = v250;
              if (v248 == (v248 & 0x7FFFFFFFFFFFFFF8)) {
                goto LABEL_288;
              }
            }
          }
          else
          {
            int v233 = (void *)v282;
          }
          do
          {
            unsigned int v255 = *((_DWORD *)v222 - 1);
            v222 -= 4;
            *--uint64_t v230 = v255;
          }
          while (v222 != v224);
LABEL_288:
          v233[40] = v230;
          v233[41] = v223;
          v233[42] = &v229[4 * v232];
          if (v224)
          {
            uint64_t v256 = v223;
            operator delete(v224);
            uint64_t v223 = v256;
            uint64_t v217 = *v272;
          }
          uint64_t v220 = v233;
LABEL_291:
          v220[41] = v223;
          *(void *)(v217 + 8 * v218) |= v219;
          unint64_t v9 = (unint64_t)v285;
          int v6 = (void *)((char *)v284 + 12);
          unsigned __int16 v284 = v6;
          if (v6 == v285) {
            goto LABEL_292;
          }
LABEL_240:
          int v8 = v288;
          a1 = v282;
          unint64_t v10 = v287[0];
          if (*(unsigned char *)(v283 + 16))
          {
LABEL_293:
            if (v8) {
              unint64_t v257 = v10;
            }
            else {
              unint64_t v257 = v9;
            }
            if ((unint64_t)v6 < v257)
            {
              while (1)
              {
                unint64_t v259 = __ROR8__(*v6, 32);
                if (HIDWORD(v259) == 1 && (v259 + 3) < 2) {
                  break;
                }
                if (sub_2AB7E4(**(void **)(v283 + 4120)))
                {
                  LOBYTE(v8) = v288;
                  int v6 = v284;
                  unint64_t v9 = (unint64_t)v285;
                  break;
                }
                unint64_t v9 = (unint64_t)v285;
                int v6 = (void *)((char *)v284 + 12);
                unsigned __int16 v284 = v6;
                if (v6 == v285)
                {
                  int v6 = v286;
                  unsigned __int16 v284 = v286;
                  LOBYTE(v8) = 1;
                  unsigned __int8 v288 = 1;
                  if ((unint64_t)v286 >= v287[0]) {
                    break;
                  }
                }
                else
                {
                  LOBYTE(v8) = v288;
                  char v258 = &v285;
                  if (v288) {
                    char v258 = v287;
                  }
                  if ((unint64_t)v6 >= *v258) {
                    break;
                  }
                }
              }
              unint64_t v10 = v287[0];
            }
          }
LABEL_10:
          if ((_BYTE)v8) {
            unint64_t v9 = v10;
          }
          if ((unint64_t)v6 >= v9) {
            goto LABEL_3;
          }
          goto LABEL_13;
        }
        unsigned int v275 = -1;
        int v278 = *(_DWORD *)(v282 + 96);
        uint64_t v189 = *(void *)(v282 + 48);
        if (!v189) {
          goto LABEL_234;
        }
LABEL_190:
        unsigned int v190 = 0;
        unsigned int v191 = *(_DWORD *)(v282 + 100) + v271;
        while (2)
        {
          while (2)
          {
            LODWORD(v292[0]) = (v104 << *(_DWORD *)v189) | (v191 - v190);
            if (*(void *)(v189 + 88) == *(void *)(v189 + 48)
              || (unint64_t v192 = sub_AD72DC(v189 + 8, (unsigned int *)v292), v192 == -1))
            {
LABEL_219:
              int v213 = *(_DWORD *)(v189 + 4);
              v190 += 2;
              if (v213 != 0x7FFFFFFF || v190 > v191) {
                goto LABEL_235;
              }
              continue;
            }
            break;
          }
          uint64_t v193 = *(void *)(v189 + 56);
          int v194 = (_DWORD **)(v193 + 16 * (v192 / 0x30));
          uint64_t v195 = (unsigned __int8 *)v194 + 10;
          int v196 = v192 % 0x30;
          if ((unsigned __int16)(v192 % 0x30) >= 9u)
          {
            __int16 v197 = 0;
            uint64_t v198 = (unsigned __int16)(v192 % 0x30 - 9) >> 3;
            if ((unsigned __int16)(v192 % 0x30 - 9) >> 3)
            {
              __int16 v199 = 0;
              uint64_t v200 = v198 + 1;
              uint64_t v201 = (v198 + 1) & 0x3FFE;
              unsigned __int16 v202 = v196 - 8 * v201;
              int v203 = &v195[v201];
              int v204 = (unsigned __int8 *)(v193 + 16 * (v192 / 0x30) + 11);
              uint64_t v205 = v201;
              do
              {
                uint64_t v206 = *(v204 - 1);
                int v207 = *v204;
                v204 += 2;
                v197 += byte_20EBDB6[v206];
                v199 += byte_20EBDB6[v207];
                v205 -= 2;
              }
              while (v205);
              v197 += v199;
              if (v200 == v201)
              {
LABEL_202:
                v195 += ((unsigned __int16)(v196 - 9) >> 3) + 1;
                LOBYTE(v196) = v202;
                goto LABEL_203;
              }
            }
            else
            {
              unsigned __int16 v202 = v192 % 0x30;
              int v203 = (unsigned __int8 *)v194 + 10;
            }
            do
            {
              int v208 = *v203++;
              v197 += byte_20EBDB6[v208];
              v202 -= 8;
            }
            while (v202 > 8u);
            goto LABEL_202;
          }
          __int16 v197 = 0;
LABEL_203:
          __int16 v209 = *(_DWORD ***)(v189 + 64);
          unsigned __int16 v210 = v197 + byte_20EBDB6[~(-1 << v196) & (unint64_t)*v195];
          if (*((unsigned __int16 *)v194 + 4) == v210)
          {
            v194 += 2;
            if (v194 == v209) {
              goto LABEL_219;
            }
            while (1)
            {
              unint64_t v211 = v194;
              if (*((_WORD *)v194 + 4)) {
                break;
              }
              v194 += 2;
              if (v211 + 2 == v209)
              {
                int v194 = *(_DWORD ***)(v189 + 64);
                break;
              }
            }
            uint64_t v212 = *v211;
            if (v194 == v209) {
              goto LABEL_219;
            }
          }
          else
          {
            uint64_t v212 = &(*v194)[2 * v210];
            if (v194 == v209) {
              goto LABEL_219;
            }
          }
          if (*(void *)(v189 + 48))
          {
            while (*(_DWORD *)(v189 + 40) == *v212)
            {
              v212 += 2;
              if (v212 == &(*v194)[2 * *((unsigned __int16 *)v194 + 4)])
              {
                while (1)
                {
                  v194 += 2;
                  if (v194 == v209) {
                    goto LABEL_219;
                  }
                  if (*((_WORD *)v194 + 4))
                  {
                    uint64_t v212 = *v194;
                    break;
                  }
                }
              }
              if (v194 == v209) {
                break;
              }
            }
          }
          BOOL v39 = v194 == v209;
          uint64_t v215 = v212 + 1;
          if (v39) {
            uint64_t v215 = (int *)(v189 + 4);
          }
          int v213 = *v215;
          v190 += 2;
          if (*v215 != 0x7FFFFFFF || v190 > v191) {
            goto LABEL_235;
          }
          continue;
        }
      }
LABEL_16:
      ++v11;
    }
  }
LABEL_317:
  double result = sub_72688((uint64_t)v289) + *(double *)(a1 + 568);
  *(double *)(a1 + 568) = result;
  return result;
}

BOOL sub_B0F8D4(uint64_t a1)
{
  if (*(void *)a1 == -1) {
    return 0;
  }
  uint64_t v25 = *(void *)(a1 + 192);
  uint64_t v26 = *(void *)(a1 + 208);
  uint64_t v23 = 12 * *(void *)(a1 + 176);
  uint64_t v24 = 8 * (*(void *)(a1 + 232) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v2 = 8 * (*(void *)(a1 + 264) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v3 = *(void *)(a1 + 288);
  uint64_t v21 = *(void *)(a1 + 320);
  uint64_t v22 = *(void *)(a1 + 272);
  uint64_t v4 = 8 * (*(void *)(a1 + 312) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v5 = *(void *)(a1 + 360);
  uint64_t v6 = *(void *)(a1 + 336);
  uint64_t v19 = *(void *)(a1 + 392);
  uint64_t v20 = *(void *)(a1 + 344);
  uint64_t v7 = 8 * (*(void *)(a1 + 384) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v8 = *(void *)(a1 + 408);
  uint64_t v9 = sub_BD6170((void *)(a1 + 424));
  uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 104)
      - *(void *)(*(void *)(a1 + 32) + 88)
      + *(void *)(*(void *)(a1 + 40) + 104)
      + 12 * (*(void *)(*(void *)(a1 + 40) + 72) + *(void *)(*(void *)(a1 + 32) + 72))
      - *(void *)(*(void *)(a1 + 40) + 88);
  uint64_t v11 = *(void *)(a1 + 48);
  if (v11) {
    v10 += 8 * *(void *)(v11 + 80);
  }
  unint64_t v31 = v23
      + v26
      - v25
      + v24
      + v3
      + v2
      - v22
      + v6
      + v4
      + v5
      - (v21
       + v20)
      + v7
      + v8
      - v19
      + sub_A409C0(*(uint64_t **)(a1 + 24))
      + v9
      + v10;
  BOOL v12 = v31 > *(void *)a1;
  if (v31 > *(void *)a1 && sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v29);
    uint64_t v13 = sub_188FC78(v29, (uint64_t)"Exceeded memory limit of ", 25);
    uint64_t v14 = (void *)sub_38EC58((uint64_t)v13, (unint64_t *)a1);
    unint64_t v15 = sub_188FC78(v14, (uint64_t)" in directional McSPA (", 23);
    unint64_t v16 = (void *)sub_38EC58((uint64_t)v15, &v31);
    uint64_t v17 = sub_188FC78(v16, (uint64_t)") in round ", 11);
    std::ostream::operator<<();
    sub_188FC78(v17, (uint64_t)"; terminating algorithm.", 24);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v28 < 0) {
      operator delete(__p);
    }
    if (v30 < 0) {
      operator delete((void *)v29[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return v12;
}

void sub_B0FBD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a24 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a25);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_B0FC24(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 100);
  if (v1)
  {
    uint64_t v2 = result;
    int v3 = 0;
    uint64_t v4 = (void *)(result + 104);
    do
    {
      unsigned int v15 = 0;
      uint64_t v5 = *(void *)(v2 + 192);
      uint64_t v6 = (char *)(v5 + ((unint64_t)*(unsigned int *)(sub_B1041C((uint64_t)v4, &v15) + 4) << 6));
      unsigned int v15 = 0;
      uint64_t v7 = *(void *)(v2 + 192);
      uint64_t v8 = sub_B1041C((uint64_t)v4, &v15);
      sub_B10058((uint64_t)v4, 0, v6, (unsigned char *)(v7 + ((unint64_t)*(unsigned int *)(v8 + 8) << 6)));
      sub_B121F0(v4, v3 + *(_DWORD *)(v2 + 96) + *(_DWORD *)(v2 + 96) * *(_DWORD *)(v2 + 416) + 2, 0);
      unsigned int v15 = 0;
      uint64_t v9 = *(void *)(v2 + 192);
      uint64_t v10 = v9 + ((unint64_t)*(unsigned int *)(sub_B1041C((uint64_t)v4, &v15) + 4) << 6);
      unsigned int v15 = 0;
      uint64_t v11 = *(void *)(v2 + 192);
      double result = sub_B1041C((uint64_t)v4, &v15);
      uint64_t v12 = v11 + ((unint64_t)*(unsigned int *)(result + 8) << 6);
      if (v10 != v12)
      {
        double v13 = *(double *)(v2 + 592);
        uint64_t v14 = *(void *)(v2 + 584);
        do
        {
          double v13 = v13 + 1.0;
          v14 += *(int *)(v10 + 28);
          v10 += 64;
        }
        while (v10 != v12);
        *(double *)(v2 + 592) = v13;
        *(void *)(v2 + 584) = v14;
      }
      ++v3;
    }
    while (v3 != v1);
  }
  return result;
}

uint64_t sub_B0FD5C(void *a1, long long *a2, unsigned int a3, int a4, int a5)
{
  unsigned int v28 = a3;
  sub_B11D38(a1, &v28, v24);
  uint64_t v10 = a1[6];
  uint64_t v11 = a1[7];
  unsigned int v15 = a1;
  uint64_t v16 = v10;
  uint64_t v17 = v11;
  uint64_t v18 = v11;
  uint64_t v19 = 0;
  uint64_t v20 = v10;
  uint64_t v21 = v11;
  uint64_t v22 = v11;
  uint64_t v23 = 0;
  sub_AE47A0(&v15);
  if (v24[1] == v16 && v25 == v17 && v26 == v18 && (v26 == v25 || v27 == v19)
    || *(_DWORD *)(v27 + 8) == *(_DWORD *)(v27 + 4))
  {
    sub_B11508((uint64_t)a1, a3, a2);
    return 1;
  }
  else
  {
    __int16 v13 = sub_B119B0((uint64_t)a1, (uint64_t)a2, a3, a4, a5);
    char v14 = v13;
    if ((v13 & 0x100) != 0) {
      sub_B11C2C((uint64_t)a1, a3);
    }
    return v14 & 1;
  }
}

BOOL sub_B0FE8C(void *a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  unsigned int v37 = a2;
  sub_B11D38(a1, &v37, v34);
  uint64_t v12 = a1[6];
  uint64_t v13 = a1[7];
  uint64_t v26 = a1;
  *(void *)&long long v27 = v12;
  *((void *)&v27 + 1) = v13;
  uint64_t v28 = v13;
  uint64_t v29 = 0;
  uint64_t v30 = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v13;
  uint64_t v33 = 0;
  sub_AE47A0(&v26);
  if (*(_OWORD *)&v34[8] == v27
    && *(void *)&v34[24] == v28
    && (*(void *)&v34[24] == *(void *)&v34[16] || (void)v35 == v29))
  {
    goto LABEL_7;
  }
  int v14 = *(_DWORD *)(v35 + 4);
  int v15 = *(_DWORD *)(v35 + 8);
  int v16 = v15 - v14;
  if (v15 == v14) {
    goto LABEL_7;
  }
  if (a6 == 0x7FFFFFFF)
  {
    unsigned int v17 = 0;
    do
      sub_B11F04(a1, a2, v17++);
    while (v16 != v17);
LABEL_7:
    LOBYTE(v18) = 0;
    return v18 != 0;
  }
  __int16 v18 = 0;
  unsigned int v20 = 0;
  do
  {
    uint64_t v21 = (_OWORD *)sub_B11F04(a1, a2, v20);
    long long v22 = v21[2];
    long long v23 = v21[3];
    long long v24 = v21[1];
    *(_OWORD *)uint64_t v34 = *v21;
    *(_OWORD *)&v34[16] = v24;
    long long v35 = v22;
    long long v36 = v23;
    if (SHIDWORD(v24) <= a6)
    {
      __int16 v25 = sub_B12064((uint64_t)a1, v34, a3, a4, a5);
      __int16 v18 = v25 | v18 | (v25 | v18) & 0xFF00;
    }
    ++v20;
  }
  while (v16 != v20);
  if ((v18 & 0xFF00) != 0)
  {
    sub_B11C2C((uint64_t)a1, a3);
    sub_B11C2C((uint64_t)a1, a4);
  }
  return v18 != 0;
}

char *sub_B10058(uint64_t a1, unsigned int a2, char *a3, unsigned char *a4)
{
  unsigned int v49 = a2;
  uint64_t v7 = sub_B1041C(a1, &v49);
  unsigned int v50 = v49;
  uint64_t v8 = *(void *)(a1 + 88);
  if ((unsigned char *)(v8 + ((unint64_t)*(unsigned int *)(sub_B1041C(a1, &v50) + 8) << 6)) == a4)
  {
    uint64_t v26 = *(void *)(a1 + 112);
    uint64_t v27 = *(void *)(a1 + 88);
    unint64_t v28 = (uint64_t)&a3[-v27] >> 6;
    if ((uint64_t)&a3[-v27] <= -64) {
      uint64_t v29 = -(uint64_t)((63 - v28) >> 6);
    }
    else {
      uint64_t v29 = v28 >> 6;
    }
    uint64_t v30 = (void *)(v26 + 8 * v29);
    uint64_t v31 = (uint64_t)&a4[-v27];
    uint64_t v32 = v31 >> 6;
    if (v31 <= -64) {
      unint64_t v33 = -(uint64_t)((unint64_t)(63 - (v31 >> 6)) >> 6);
    }
    else {
      unint64_t v33 = (unint64_t)(v31 >> 6) >> 6;
    }
    unint64_t v34 = (v32 & 0x3F) - (v28 & 0x3F) + 8 * (v26 + 8 * v33 - (void)v30);
    if (v34)
    {
      if ((v28 & 0x3F) != 0)
      {
        if (64 - (v28 & 0x3F) >= v34) {
          uint64_t v35 = (v32 & 0x3F) - (v28 & 0x3F) + 8 * (v26 + 8 * v33 - (void)v30);
        }
        else {
          uint64_t v35 = 64 - (v28 & 0x3F);
        }
        *v30++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - (v28 & 0x3Fu) - v35)) & (-1 << (v28 & 0x3F)));
        v34 -= v35;
      }
      if (v34 >= 0x40) {
        bzero(v30, 8 * (v34 >> 6));
      }
      if ((v34 & 0x3F) != 0) {
        v30[v34 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v34 & 0x3F));
      }
    }
    *(_DWORD *)(v7 + 8) = v28;
  }
  else
  {
    unsigned int v50 = v49;
    uint64_t v9 = *(void *)(a1 + 88);
    if ((char *)(v9 + ((unint64_t)*(unsigned int *)(sub_B1041C(a1, &v50) + 4) << 6)) == a3)
    {
      uint64_t v36 = *(void *)(a1 + 88);
      unint64_t v37 = (uint64_t)&a3[-v36] >> 6;
      if ((uint64_t)&a3[-v36] <= -64) {
        uint64_t v38 = -(uint64_t)((63 - v37) >> 6);
      }
      else {
        uint64_t v38 = v37 >> 6;
      }
      BOOL v39 = (void *)(*(void *)(a1 + 112) + 8 * v38);
      uint64_t v40 = (uint64_t)&a4[-v36];
      uint64_t v41 = v40 >> 6;
      if (v40 <= -64) {
        unint64_t v42 = -(uint64_t)((unint64_t)(63 - (v40 >> 6)) >> 6);
      }
      else {
        unint64_t v42 = (unint64_t)(v40 >> 6) >> 6;
      }
      char v43 = v37 & 0x3F;
      unint64_t v44 = (v41 & 0x3F) - (v37 & 0x3F) + 8 * (8 * v42 - 8 * v38);
      if (v44)
      {
        int v45 = v37 & 0x3F;
        if (v45)
        {
          unint64_t v46 = (64 - v45);
          if (v46 >= v44) {
            unint64_t v47 = v44;
          }
          else {
            unint64_t v47 = v46;
          }
          *v39++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (v46 - v47)) & (-1 << v43));
          v44 -= v47;
        }
        if (v44 >= 0x40) {
          bzero(v39, 8 * (v44 >> 6));
        }
        if ((v44 & 0x3F) != 0) {
          v39[v44 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v44 & 0x3F));
        }
      }
      *(_DWORD *)(v7 + 4) = v41;
      return a4;
    }
    else
    {
      unsigned int v50 = v49;
      uint64_t v10 = *(void *)(a1 + 88);
      uint64_t v11 = (unsigned char *)(v10 + ((unint64_t)*(unsigned int *)(sub_B1041C(a1, &v50) + 8) << 6));
      int64_t v12 = v11 - a4;
      if (v11 != a4) {
        memmove(a3, a4, v11 - a4);
      }
      uint64_t v13 = &a3[v12];
      uint64_t v14 = *(void *)(a1 + 112);
      uint64_t v15 = *(void *)(a1 + 88);
      unint64_t v16 = (uint64_t)&v13[-v15] >> 6;
      if ((uint64_t)&v13[-v15] <= -64) {
        uint64_t v17 = -(uint64_t)((63 - v16) >> 6);
      }
      else {
        uint64_t v17 = v16 >> 6;
      }
      __int16 v18 = (void *)(v14 + 8 * v17);
      unsigned int v50 = v49;
      uint64_t v19 = v15 + ((unint64_t)*(unsigned int *)(sub_B1041C(a1, &v50) + 8) << 6);
      uint64_t v20 = *(void *)(a1 + 88);
      uint64_t v21 = v19 - v20;
      uint64_t v22 = v21 >> 6;
      if (v21 <= -64) {
        unint64_t v23 = -(uint64_t)((unint64_t)(63 - (v21 >> 6)) >> 6);
      }
      else {
        unint64_t v23 = (unint64_t)(v21 >> 6) >> 6;
      }
      unint64_t v24 = (v22 & 0x3F) - (v16 & 0x3F) + 8 * (v14 + 8 * v23 - (void)v18);
      if (v24)
      {
        if ((v16 & 0x3F) != 0)
        {
          if (64 - (v16 & 0x3F) >= v24) {
            unint64_t v25 = v24;
          }
          else {
            unint64_t v25 = 64 - (v16 & 0x3F);
          }
          *v18++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - (v16 & 0x3Fu) - v25)) & (-1 << (v16 & 0x3F)));
          v24 -= v25;
        }
        if (v24 >= 0x40) {
          bzero(v18, 8 * (v24 >> 6));
        }
        if ((v24 & 0x3F) != 0) {
          v18[v24 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v24 & 0x3F));
        }
      }
      *(_DWORD *)(v7 + 8) = (unint64_t)&v13[-v20] >> 6;
    }
  }
  return a3;
}

uint64_t sub_B1041C(uint64_t a1, unsigned int *a2)
{
  unint64_t v4 = sub_B1067C(a1, a2);
  if (v4 == -1)
  {
    unint64_t v25 = v5;
    if (sub_B10A70(a1, 1))
    {
      *(_DWORD *)unint64_t v34 = *a2;
      *(void *)&v34[4] = 0;
      uint64_t v36 = *(void *)v34;
      int v37 = 0;
      sub_B10DA4(a1, (unsigned int *)&v36, (uint64_t)v34);
    }
    else
    {
      *(_DWORD *)unint64_t v34 = *a2;
      *(void *)&v34[4] = 0;
      uint64_t v36 = *(void *)v34;
      int v37 = 0;
      sub_B10FC4(a1, &v36, v25, v34);
    }
    return v35;
  }
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v6 = *(uint64_t **)(a1 + 56);
  unint64_t v8 = v4 / 0x30;
  uint64_t v9 = (uint64_t *)(v7 + 16 * (v4 / 0x30));
  uint64_t v11 = (unsigned __int8 *)v9 + 10;
  uint64_t v10 = *v9;
  int v12 = v4 % 0x30;
  if ((unsigned __int16)(v4 % 0x30) < 9u)
  {
    __int16 v15 = 0;
    goto LABEL_16;
  }
  unsigned __int16 v13 = v12 - 9;
  unsigned __int16 v14 = v4 % 0x30 - 9;
  __int16 v15 = 0;
  uint64_t v16 = v14 >> 3;
  if (v16)
  {
    __int16 v17 = 0;
    uint64_t v18 = v16 + 1;
    uint64_t v19 = (v16 + 1) & 0x3FFE;
    LOWORD(v12) = v12 - 8 * v19;
    uint64_t v20 = &v11[v19];
    uint64_t v21 = (unsigned __int8 *)(v7 + 16 * v8 + 11);
    uint64_t v22 = v19;
    do
    {
      uint64_t v23 = *(v21 - 1);
      int v24 = *v21;
      v21 += 2;
      v15 += byte_20EC1B6[v23];
      v17 += byte_20EC1B6[v24];
      v22 -= 2;
    }
    while (v22);
    v15 += v17;
    if (v18 == v19) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v20 = (unsigned __int8 *)v9 + 10;
  }
  do
  {
    int v27 = *v20++;
    v15 += byte_20EC1B6[v27];
    LOWORD(v12) = v12 - 8;
  }
  while ((unsigned __int16)v12 > 8u);
LABEL_15:
  v11 += (v13 >> 3) + 1;
LABEL_16:
  unsigned __int16 v28 = v15 + byte_20EC1B6[~(-1 << v12) & (unint64_t)*v11];
  int v29 = *((unsigned __int16 *)v9 + 4);
  uint64_t v30 = v9 + 2;
  if (v29 != v28 || v30 == v6) {
    return v10 + 12 * v28;
  }
  uint64_t v32 = v7 + 16 * v8 + 32;
  do
  {
    if (*(_WORD *)(v32 - 8)) {
      BOOL v33 = 1;
    }
    else {
      BOOL v33 = v32 == (void)v6;
    }
    v32 += 16;
  }
  while (!v33);
  return *(void *)(v32 - 32);
}

unint64_t sub_B1067C(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = *(void *)(a1 + 72) - 1;
  uint64_t v4 = *a2;
  unint64_t result = v3 & v4;
  uint64_t v6 = *(void *)(a1 + 48);
  unint64_t v7 = (v3 & v4) / 0x30uLL;
  LODWORD(v8) = (v3 & v4) % 0x30;
  if ((*(unsigned __int8 *)(v6 + 16 * v7 + (v8 >> 3) + 10) >> (v8 & 7)))
  {
    if (*(void *)(a1 + 40))
    {
      uint64_t v9 = 0;
      uint64_t v10 = v6 + 11;
      int v11 = *(_DWORD *)(a1 + 32);
      uint64_t v12 = -1;
      while (1)
      {
        unsigned __int16 v13 = (uint64_t *)(v6 + 16 * v7);
        uint64_t v16 = *v13;
        __int16 v15 = (unsigned __int8 *)v13 + 10;
        uint64_t v14 = v16;
        if ((unsigned __int16)v8 < 9u)
        {
          __int16 v18 = 0;
          uint64_t v21 = v15;
          LOBYTE(v19) = v8;
          goto LABEL_16;
        }
        uint64_t v17 = ((unsigned __int16)(v8 - 9) >> 3) + 1;
        if ((unsigned __int16)(v8 - 9) >= 8u)
        {
          __int16 v22 = 0;
          __int16 v23 = 0;
          unsigned __int16 v19 = v8 - 8 * ((((unsigned __int16)(v8 - 9) >> 3) + 1) & 0x3FFE);
          uint64_t v20 = &v15[(((unsigned __int16)(v8 - 9) >> 3) + 1) & 0x3FFE];
          uint64_t v24 = (((unsigned __int16)(v8 - 9) >> 3) + 1) & 0x3FFE;
          unint64_t v25 = (unsigned __int8 *)(v10 + 16 * v7);
          do
          {
            uint64_t v26 = *(v25 - 1);
            unsigned int v27 = *v25;
            v25 += 2;
            v22 += byte_20EC1B6[v26];
            v23 += byte_20EC1B6[v27];
            v24 -= 2;
          }
          while (v24);
          __int16 v18 = v23 + v22;
          if ((v17 & 0x3FFE) == v17) {
            goto LABEL_15;
          }
        }
        else
        {
          __int16 v18 = 0;
          unsigned __int16 v19 = v8;
          uint64_t v20 = v15;
        }
        do
        {
          unsigned int v28 = *v20++;
          v18 += byte_20EC1B6[v28];
          v19 -= 8;
        }
        while (v19 > 8u);
LABEL_15:
        uint64_t v21 = &v15[v17];
LABEL_16:
        if (v11 == *(_DWORD *)(v14
                              + 12
                              * (unsigned __int16)(v18
                                                 + byte_20EC1B6[~(-1 << v19) & (unint64_t)*v21])))
        {
          if (v12 == -1) {
            uint64_t v12 = result;
          }
          goto LABEL_6;
        }
        if ((unsigned __int16)v8 < 9u)
        {
          __int16 v30 = 0;
          goto LABEL_26;
        }
        uint64_t v29 = ((unsigned __int16)(v8 - 9) >> 3) + 1;
        if ((unsigned __int16)(v8 - 9) >= 8u)
        {
          __int16 v32 = 0;
          __int16 v33 = 0;
          LOWORD(v8) = v8 - 8 * ((((unsigned __int16)(v8 - 9) >> 3) + 1) & 0x3FFE);
          uint64_t v31 = &v15[v29 & 0x3FFE];
          uint64_t v34 = v29 & 0x3FFE;
          uint64_t v35 = (unsigned __int8 *)(v10 + 16 * v7);
          do
          {
            uint64_t v36 = *(v35 - 1);
            unsigned int v37 = *v35;
            v35 += 2;
            v32 += byte_20EC1B6[v36];
            v33 += byte_20EC1B6[v37];
            v34 -= 2;
          }
          while (v34);
          __int16 v30 = v33 + v32;
          if ((v29 & 0x3FFE) == v29) {
            goto LABEL_25;
          }
        }
        else
        {
          __int16 v30 = 0;
          uint64_t v31 = v15;
        }
        do
        {
          unsigned int v38 = *v31++;
          v30 += byte_20EC1B6[v38];
          LOWORD(v8) = v8 - 8;
        }
        while ((unsigned __int16)v8 > 8u);
LABEL_25:
        v15 += v29;
LABEL_26:
        if (v4 == *(_DWORD *)(v14
                                     + 12
                                     * (unsigned __int16)(v30
                                                        + byte_20EC1B6[~(-1 << v8) & (unint64_t)*v15])))
          return result;
LABEL_6:
        unint64_t result = (++v9 + result) & v3;
        unint64_t v7 = result / 0x30;
        unint64_t v8 = result % 0x30;
        if (((*(unsigned __int8 *)(v6 + 16 * (result / 0x30) + (v8 >> 3) + 10) >> (v8 & 7)) & 1) == 0) {
          return -1;
        }
      }
    }
    uint64_t v39 = 0;
    LODWORD(v40) = (v3 & v4) % 0x30;
    while (1)
    {
      uint64_t v41 = (uint64_t *)(v6 + 16 * v7);
      uint64_t v44 = *v41;
      char v43 = (unsigned __int8 *)v41 + 10;
      uint64_t v42 = v44;
      if ((unsigned __int16)v40 >= 9u) {
        break;
      }
      __int16 v46 = 0;
LABEL_39:
      if (v4 == *(_DWORD *)(v42
                                   + 12
                                   * (unsigned __int16)(v46
                                                      + byte_20EC1B6[~(-1 << v40) & (unint64_t)*v43])))
        return result;
      unint64_t result = (++v39 + result) & v3;
      unint64_t v7 = result / 0x30;
      unint64_t v40 = result % 0x30;
      if (((*(unsigned __int8 *)(v6 + 16 * (result / 0x30) + (v40 >> 3) + 10) >> (v40 & 7)) & 1) == 0) {
        return -1;
      }
    }
    uint64_t v45 = ((unsigned __int16)(v40 - 9) >> 3) + 1;
    if ((unsigned __int16)(v40 - 9) >= 8u)
    {
      __int16 v48 = 0;
      __int16 v49 = 0;
      LOWORD(v40) = v40 - 8 * ((((unsigned __int16)(v40 - 9) >> 3) + 1) & 0x3FFE);
      unint64_t v47 = &v43[v45 & 0x3FFE];
      uint64_t v50 = v45 & 0x3FFE;
      int v51 = (unsigned __int8 *)(v6 + 11 + 16 * v7);
      do
      {
        uint64_t v52 = *(v51 - 1);
        unsigned int v53 = *v51;
        v51 += 2;
        v48 += byte_20EC1B6[v52];
        v49 += byte_20EC1B6[v53];
        v50 -= 2;
      }
      while (v50);
      __int16 v46 = v49 + v48;
      if ((v45 & 0x3FFE) == v45) {
        goto LABEL_38;
      }
    }
    else
    {
      __int16 v46 = 0;
      unint64_t v47 = v43;
    }
    do
    {
      unsigned int v54 = *v47++;
      v46 += byte_20EC1B6[v54];
      LOWORD(v40) = v40 - 8;
    }
    while ((unsigned __int16)v40 > 8u);
LABEL_38:
    v43 += v45;
    goto LABEL_39;
  }
  return -1;
}

uint64_t sub_B10A70(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t result = sub_B11314(a1);
    unint64_t v5 = *(void *)(a1 + 80);
    if (v5 >= ~a2) {
      goto LABEL_32;
    }
  }
  else
  {
    uint64_t result = 0;
    unint64_t v5 = *(void *)(a1 + 80);
    if (v5 >= ~a2) {
      goto LABEL_32;
    }
  }
  unint64_t v6 = *(void *)(a1 + 72);
  unint64_t v7 = v5 + a2;
  if (v6 < 4 || v7 > *(void *)a1)
  {
    float v8 = *(float *)(a1 + 16);
    if (v7 >= vcvts_n_u32_f32(v8, 2uLL))
    {
      unint64_t v9 = 4;
      while ((v9 & 0x8000000000000000) == 0)
      {
        v9 *= 2;
        if (v7 < (unint64_t)(float)(v8 * (float)v9)) {
          goto LABEL_12;
        }
      }
LABEL_32:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_2E18(exception, "resize overflow");
    }
    unint64_t v9 = 4;
LABEL_12:
    if (v9 > v6)
    {
      unint64_t v10 = v5 - *(void *)(a1 + 40) + a2;
      unint64_t v11 = 4;
      if (v6 > 4) {
        goto LABEL_15;
      }
LABEL_14:
      if (v10 >= (unint64_t)(float)(v8 * (float)v11))
      {
LABEL_15:
        while ((v11 & 0x8000000000000000) == 0)
        {
          v11 *= 2;
          if (v11 >= v6) {
            goto LABEL_14;
          }
        }
        goto LABEL_32;
      }
      if (v11 < v9
        && v11 <= 0x7FFFFFFFFFFFFFFELL
        && v10 >= (unint64_t)(float)(*(float *)(a1 + 20) * (float)(2 * v11)))
      {
        v11 *= 2;
      }
      long long v29 = *(_OWORD *)(a1 + 16);
      int v30 = *(_DWORD *)(a1 + 32);
      memset(v31, 0, sizeof(v31));
      long long v32 = 0u;
      uint64x2_t v28 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_f32(*(float32x2_t *)&v29, 0)));
      BYTE8(v29) = 0;
      sub_B08BC0((uint64_t)&v28, 0, (void *)a1, v11);
      int v12 = *(_DWORD *)(a1 + 32);
      *(_DWORD *)(a1 + 32) = v30;
      int v30 = v12;
      unsigned __int16 v13 = *(void **)(a1 + 40);
      uint64_t v14 = *(char **)(a1 + 48);
      *(void **)(a1 + 40) = v31[0];
      uint64x2_t v16 = *(uint64x2_t *)a1;
      long long v15 = *(_OWORD *)(a1 + 16);
      long long v17 = v29;
      *(uint64x2_t *)a1 = v28;
      *(_OWORD *)(a1 + 16) = v17;
      uint64x2_t v28 = v16;
      long long v29 = v15;
      long long v18 = *(_OWORD *)&v31[1];
      v31[0] = v13;
      v31[1] = v14;
      unsigned __int16 v19 = v31[3];
      long long v20 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)(a1 + 48) = v18;
      *(void *)(a1 + 64) = v19;
      *(_OWORD *)&v31[2] = v20;
      *(void *)&long long v18 = v32;
      long long v21 = *(_OWORD *)(a1 + 72);
      *(_OWORD *)(a1 + 72) = v32;
      long long v32 = v21;
      *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)(unint64_t)v18)));
      *(unsigned char *)(a1 + 24) = 0;
      uint64x2_t v28 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v29, (float)(unint64_t)v21)));
      BYTE8(v29) = 0;
      if (v14)
      {
        __int16 v22 = (char *)v20;
        __int16 v23 = v14;
        if ((char *)v20 != v14)
        {
          uint64_t v24 = (char *)v20;
          do
          {
            uint64_t v26 = (void *)*((void *)v24 - 2);
            v24 -= 16;
            unint64_t v25 = v26;
            if (v26)
            {
              free(v25);
              *((void *)v22 - 2) = 0;
            }
            __int16 v22 = v24;
          }
          while (v24 != v14);
          __int16 v23 = (char *)v31[1];
        }
        v31[2] = v14;
        free(v23);
      }
      return 1;
    }
  }
  return result;
}

void sub_B10D44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    sub_20AE0F0((uint64_t)&a9, a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_B10D68(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_B10D7C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_B10D90(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 sub_B10DA4@<Q0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = sub_B1067C(a1, a2);
  if (v6 == -1)
  {
    sub_B10FC4(a1, (uint64_t *)a2, v7, &v33);
    long long v25 = v36;
    *(_OWORD *)(a3 + 32) = v35;
    *(_OWORD *)(a3 + 48) = v25;
    *(void *)(a3 + 64) = v37;
    __n128 result = v34;
    *(_OWORD *)a3 = v33;
    *(__n128 *)(a3 + 16) = result;
    *(unsigned char *)(a3 + 72) = 1;
    return result;
  }
  uint64_t v9 = *(void *)(a1 + 48);
  float v8 = *(uint64_t **)(a1 + 56);
  unint64_t v10 = v6 / 0x30;
  unint64_t v11 = v9 + 16 * (v6 / 0x30);
  int v12 = (unsigned __int8 *)(v11 + 10);
  int v13 = v6 % 0x30;
  if ((unsigned __int16)(v6 % 0x30) < 9u)
  {
    __int16 v15 = 0;
    goto LABEL_13;
  }
  unsigned __int16 v14 = v13 - 9;
  __int16 v15 = 0;
  uint64_t v16 = (unsigned __int16)(v6 % 0x30 - 9) >> 3;
  if ((unsigned __int16)(v6 % 0x30 - 9) >> 3)
  {
    __int16 v17 = 0;
    uint64_t v18 = v16 + 1;
    uint64_t v19 = (v16 + 1) & 0x3FFE;
    LOWORD(v13) = v13 - 8 * v19;
    long long v20 = &v12[v19];
    long long v21 = (unsigned __int8 *)(v9 + 16 * v10 + 11);
    uint64_t v22 = v19;
    do
    {
      uint64_t v23 = *(v21 - 1);
      int v24 = *v21;
      v21 += 2;
      v15 += byte_20EC1B6[v23];
      v17 += byte_20EC1B6[v24];
      v22 -= 2;
    }
    while (v22);
    v15 += v17;
    if (v18 == v19) {
      goto LABEL_12;
    }
  }
  else
  {
    long long v20 = (unsigned __int8 *)(v11 + 10);
  }
  do
  {
    int v27 = *v20++;
    v15 += byte_20EC1B6[v27];
    LOWORD(v13) = v13 - 8;
  }
  while ((unsigned __int16)v13 > 8u);
LABEL_12:
  v12 += (v14 >> 3) + 1;
LABEL_13:
  unsigned __int16 v28 = v15 + byte_20EC1B6[~(-1 << v13) & (unint64_t)*v12];
  uint64_t v29 = *(void *)v11 + 12 * v28;
  if (*(unsigned __int16 *)(v11 + 8) == v28)
  {
    unint64_t v30 = v11 + 16;
    unint64_t v11 = *(void *)(a1 + 56);
    if ((uint64_t *)v30 != v8)
    {
      while (1)
      {
        uint64_t v31 = (uint64_t *)v30;
        if (*(_WORD *)(v30 + 8)) {
          break;
        }
        v30 += 16;
        if (v31 + 2 == v8)
        {
          unint64_t v11 = *(void *)(a1 + 56);
          goto LABEL_19;
        }
      }
      unint64_t v11 = v30;
LABEL_19:
      uint64_t v29 = *v31;
    }
  }
  *(void *)&long long v33 = a1;
  *((void *)&v33 + 1) = v9;
  v34.n128_u64[0] = (unint64_t)v8;
  v34.n128_u64[1] = v11;
  *(void *)&long long v35 = v29;
  *((void *)&v35 + 1) = v9;
  *(void *)&long long v36 = v8;
  *((void *)&v36 + 1) = v8;
  uint64_t v37 = 0;
  sub_AE47A0(&v33);
  long long v32 = v36;
  *(_OWORD *)(a3 + 32) = v35;
  *(_OWORD *)(a3 + 48) = v32;
  *(void *)(a3 + 64) = v37;
  __n128 result = v34;
  *(_OWORD *)a3 = v33;
  *(__n128 *)(a3 + 16) = result;
  *(unsigned char *)(a3 + 72) = 0;
  return result;
}

void *sub_B10FC4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 40);
  if ((unint64_t)(*(void *)(a1 + 80) - v5) >= 0x1555555555555555)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2E18(exception, "insert overflow");
  }
  if (!v5)
  {
    unint64_t v8 = a3 / 0x30;
    LODWORD(v10) = a3 % 0x30;
    goto LABEL_17;
  }
  unint64_t v8 = a3 / 0x30;
  uint64_t v9 = *(void *)(a1 + 48);
  unint64_t v10 = a3 % 0x30;
  unint64_t v11 = (uint64_t *)(v9 + 16 * (a3 / 0x30));
  if (((*((unsigned __int8 *)v11 + ((a3 % 0x30) >> 3) + 10) >> ((a3 % 0x30) & 7)) & 1) == 0) {
    goto LABEL_17;
  }
  uint64_t v14 = *v11;
  int v13 = (unsigned __int8 *)v11 + 10;
  uint64_t v12 = v14;
  if ((unsigned __int16)(a3 % 0x30) < 9u)
  {
    __int16 v15 = 0;
    unint64_t v16 = a3 % 0x30;
    goto LABEL_15;
  }
  __int16 v15 = 0;
  unint64_t v16 = (unsigned __int16)(a3 % 0x30 - 9) >> 3;
  if ((unsigned __int16)(a3 % 0x30 - 9) >> 3)
  {
    __int16 v17 = 0;
    unint64_t v18 = v16 + 1;
    uint64_t v19 = (v16 + 1) & 0x3FFE;
    LOWORD(v16) = v10 - 8 * v19;
    long long v20 = &v13[v19];
    long long v21 = (unsigned __int8 *)(v9 + 16 * v8 + 11);
    uint64_t v22 = v19;
    do
    {
      uint64_t v23 = *(v21 - 1);
      int v24 = *v21;
      v21 += 2;
      v15 += byte_20EC1B6[v23];
      v17 += byte_20EC1B6[v24];
      v22 -= 2;
    }
    while (v22);
    v15 += v17;
    if (v18 == v19) {
      goto LABEL_14;
    }
  }
  else
  {
    unint64_t v16 = a3 % 0x30;
    long long v20 = v13;
  }
  do
  {
    int v25 = *v20++;
    v15 += byte_20EC1B6[v25];
    LOWORD(v16) = v16 - 8;
  }
  while ((unsigned __int16)v16 > 8u);
LABEL_14:
  v13 += ((unsigned __int16)(v10 - 9) >> 3) + 1;
LABEL_15:
  if (*(_DWORD *)(a1 + 32) == *(_DWORD *)(v12
                                         + 12
                                         * (unsigned __int16)(v15
                                                            + byte_20EC1B6[~(-1 << v16) & (unint64_t)*v13])))
    *(void *)(a1 + 40) = v5 - 1;
LABEL_17:
  sub_B08FE4((uint64_t *)(a1 + 48), a3, a2);
  uint64_t v27 = *(void *)(a1 + 48);
  uint64_t v26 = *(uint64_t **)(a1 + 56);
  uint64_t v28 = v27 + 16 * v8;
  uint64_t v29 = (unsigned __int8 *)(v28 + 10);
  if ((unsigned __int16)v10 >= 9u)
  {
    uint64_t v30 = ((unsigned __int16)(v10 - 9) >> 3) + 1;
    if ((unsigned __int16)(v10 - 9) >= 8u)
    {
      __int16 v33 = 0;
      __int16 v34 = 0;
      LOWORD(v10) = v10 - 8 * ((((unsigned __int16)(v10 - 9) >> 3) + 1) & 0x3FFE);
      long long v32 = &v29[v30 & 0x3FFE];
      long long v35 = (unsigned __int8 *)(v27 + 16 * v8 + 11);
      uint64_t v36 = v30 & 0x3FFE;
      do
      {
        uint64_t v37 = *(v35 - 1);
        int v38 = *v35;
        v35 += 2;
        v33 += byte_20EC1B6[v37];
        v34 += byte_20EC1B6[v38];
        v36 -= 2;
      }
      while (v36);
      __int16 v31 = v34 + v33;
      if ((v30 & 0x3FFE) == v30) {
        goto LABEL_25;
      }
    }
    else
    {
      __int16 v31 = 0;
      long long v32 = (unsigned __int8 *)(v28 + 10);
    }
    do
    {
      int v39 = *v32++;
      v31 += byte_20EC1B6[v39];
      LOWORD(v10) = v10 - 8;
    }
    while ((unsigned __int16)v10 > 8u);
LABEL_25:
    v29 += v30;
    goto LABEL_26;
  }
  __int16 v31 = 0;
LABEL_26:
  unsigned __int16 v40 = v31 + byte_20EC1B6[~(-1 << v10) & (unint64_t)*v29];
  uint64_t v41 = *(void *)v28 + 12 * v40;
  if (*(unsigned __int16 *)(v28 + 8) == v40)
  {
    uint64_t v42 = v28 + 16;
    uint64_t v28 = *(void *)(a1 + 56);
    if ((uint64_t *)v42 != v26)
    {
      while (1)
      {
        char v43 = (uint64_t *)v42;
        if (*(_WORD *)(v42 + 8)) {
          break;
        }
        v42 += 16;
        if (v43 + 2 == v26)
        {
          uint64_t v28 = *(void *)(a1 + 56);
          goto LABEL_32;
        }
      }
      uint64_t v28 = v42;
LABEL_32:
      uint64_t v41 = *v43;
    }
  }
  *a4 = a1;
  a4[1] = v27;
  a4[2] = v26;
  a4[3] = v28;
  a4[4] = v41;
  a4[5] = v27;
  a4[6] = v26;
  a4[7] = v26;
  a4[8] = 0;

  return sub_AE47A0(a4);
}

void sub_B11300(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_B11314(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 80) - *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    BOOL v4 = v2 >= v3;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4 || (unint64_t v5 = *(void *)(a1 + 72), v5 < 0x21))
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    do
    {
      unint64_t v6 = v5;
      v5 >>= 1;
    }
    while (v6 >= 0x42 && v2 < (unint64_t)(float)(*(float *)(a1 + 20) * (float)v5));
    long long v24 = *(_OWORD *)(a1 + 16);
    int v25 = *(_DWORD *)(a1 + 32);
    memset(v26, 0, sizeof(v26));
    long long v27 = 0u;
    uint64x2_t v23 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_f32(*(float32x2_t *)&v24, 0)));
    BYTE8(v24) = 0;
    sub_B08BC0((uint64_t)&v23, 0, (void *)a1, v5);
    int v7 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v25;
    int v25 = v7;
    unint64_t v8 = *(void **)(a1 + 40);
    uint64_t v9 = *(char **)(a1 + 48);
    *(void **)(a1 + 40) = v26[0];
    uint64x2_t v11 = *(uint64x2_t *)a1;
    long long v10 = *(_OWORD *)(a1 + 16);
    long long v12 = v24;
    *(uint64x2_t *)a1 = v23;
    *(_OWORD *)(a1 + 16) = v12;
    uint64x2_t v23 = v11;
    long long v24 = v10;
    long long v13 = *(_OWORD *)&v26[1];
    v26[0] = v8;
    v26[1] = v9;
    uint64_t v14 = v26[3];
    long long v15 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 48) = v13;
    *(void *)(a1 + 64) = v14;
    *(_OWORD *)&v26[2] = v15;
    *(void *)&long long v13 = v27;
    long long v16 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)(a1 + 72) = v27;
    long long v27 = v16;
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)(unint64_t)v13)));
    *(unsigned char *)(a1 + 24) = 0;
    uint64x2_t v23 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v24, (float)(unint64_t)v16)));
    BYTE8(v24) = 0;
    if (v9)
    {
      __int16 v17 = (char *)v15;
      unint64_t v18 = v9;
      if ((char *)v15 != v9)
      {
        uint64_t v19 = (char *)v15;
        do
        {
          long long v21 = (void *)*((void *)v19 - 2);
          v19 -= 16;
          long long v20 = v21;
          if (v21)
          {
            free(v20);
            *((void *)v17 - 2) = 0;
          }
          __int16 v17 = v19;
        }
        while (v19 != v9);
        unint64_t v18 = (char *)v26[1];
      }
      v26[2] = v9;
      free(v18);
    }
    uint64_t result = 1;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return result;
}

void sub_B114E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    sub_20AE0F0((uint64_t)&a9, a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B11508(uint64_t a1, unsigned int a2, long long *a3)
{
  unsigned int v57 = a2;
  uint64_t v5 = sub_B1041C(a1, &v57);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 4);
  if (v7
    && (unint64_t v8 = (v7 - 1), ((*(void *)(*(void *)(a1 + 112) + ((v8 >> 3) & 0x1FFFFFF8)) >> v8) & 1) == 0))
  {
    *(_DWORD *)(v5 + 4) = v8;
    __int16 v46 = (_OWORD *)(*(void *)(a1 + 88) + (v8 << 6));
    long long v47 = *a3;
    long long v48 = a3[1];
    long long v49 = a3[3];
    v46[2] = a3[2];
    v46[3] = v49;
    *__int16 v46 = v47;
    v46[1] = v48;
    unint64_t v44 = *(unsigned int *)(v5 + 4);
    *(void *)(*(void *)(a1 + 112) + ((v44 >> 3) & 0x1FFFFFF8)) |= 1 << v44;
    uint64_t v45 = *(void *)(a1 + 88);
  }
  else
  {
    unint64_t v9 = *(unsigned int *)(v5 + 8);
    uint64_t v10 = *(void *)(a1 + 88);
    uint64x2_t v11 = (uint64_t *)(a1 + 88);
    unint64_t v12 = *(void *)(a1 + 96) - v10;
    if ((v9 + 1) >= (unint64_t)((uint64_t)v12 >> 6)
      || ((*(void *)(*(void *)(a1 + 112) + ((v9 >> 3) & 0x1FFFFFF8)) >> v9) & 1) != 0)
    {
      v72[0] = v57;
      sub_B11D38((void *)a1, v72, &v67);
      uint64_t v13 = *(void *)(a1 + 48);
      uint64_t v14 = *(void *)(a1 + 56);
      uint64_t v58 = a1;
      uint64_t v59 = v13;
      uint64_t v60 = v14;
      uint64_t v61 = v14;
      uint64_t v62 = 0;
      uint64_t v63 = v13;
      uint64_t v64 = v14;
      uint64_t v65 = v14;
      uint64_t v66 = 0;
      sub_AE47A0(&v58);
      if (v68 == v59 && v69 == v60 && v70 == v61 && (v70 == v69 || v71 == v62)) {
        int v15 = 0;
      }
      else {
        int v15 = *(_DWORD *)(v71 + 8) - *(_DWORD *)(v71 + 4);
      }
      uint64_t v16 = (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 6;
      v72[0] = v57;
      sub_B11D38((void *)a1, v72, &v67);
      uint64_t v17 = *(void *)(a1 + 48);
      uint64_t v18 = *(void *)(a1 + 56);
      uint64_t v58 = a1;
      uint64_t v59 = v17;
      uint64_t v60 = v18;
      uint64_t v61 = v18;
      uint64_t v62 = 0;
      uint64_t v63 = v17;
      uint64_t v64 = v18;
      uint64_t v65 = v18;
      uint64_t v66 = 0;
      sub_AE47A0(&v58);
      if (v68 == v59 && v69 == v60 && v70 == v61 && (v70 == v69 || v71 == v62)) {
        uint64_t v19 = 2;
      }
      else {
        uint64_t v19 = (2 * (*(_DWORD *)(v71 + 8) - *(_DWORD *)(v71 + 4)) + 2);
      }
      unint64_t v20 = v19 + v16;
      uint64_t v22 = *(void *)(a1 + 88);
      uint64_t v21 = *(void *)(a1 + 96);
      unint64_t v23 = (v21 - v22) >> 6;
      unsigned __int16 v55 = a3;
      if (v20 <= v23)
      {
        if (v20 < v23)
        {
          uint64_t v21 = v22 + (v20 << 6);
          *(void *)(a1 + 96) = v21;
        }
      }
      else
      {
        sub_AAD9B8((void **)(a1 + 88), v20 - v23);
        uint64_t v22 = *(void *)(a1 + 88);
        uint64_t v21 = *(void *)(a1 + 96);
      }
      long long v24 = (uint64_t *)(a1 + 112);
      sub_A3E96C((uint64_t)v24, (v21 - v22) >> 6, 0);
      uint64_t v25 = *(unsigned int *)(v6 + 4);
      uint64_t v26 = *(unsigned int *)(v6 + 8);
      unint64_t v56 = v12;
      unint64_t v27 = (v12 >> 6);
      unsigned int v28 = v25;
      if (v26 != v25)
      {
        memmove((void *)(*v11 + (v27 << 6)), (const void *)(*v11 + (v25 << 6)), *v11 + (v26 << 6) - (*v11 + (v25 << 6)));
        unsigned int v28 = *(_DWORD *)(v6 + 4);
        LODWORD(v25) = *(_DWORD *)(v6 + 8);
      }
      unint64_t v29 = v12 >> 6;
      unint64_t v30 = v15 + (v12 >> 6);
      uint64_t v31 = *v24;
      long long v32 = (void *)(*v24 + 8 * (v28 >> 6));
      uint64_t v33 = v28 & 0x3F;
      unint64_t v34 = (v25 & 0x3F) - v33 + 8 * (*v24 + 8 * (v25 >> 6) - (void)v32);
      if (v34)
      {
        if (v33)
        {
          if ((64 - v33) >= v34) {
            uint64_t v35 = (v25 & 0x3F) - v33 + 8 * (*v24 + 8 * (v25 >> 6) - (void)v32);
          }
          else {
            uint64_t v35 = (64 - v33);
          }
          *v32++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v33 - v35)) & (-1 << v33));
          v34 -= v35;
        }
        if (v34 >= 0x40) {
          bzero(v32, 8 * (v34 >> 6));
        }
        if ((v34 & 0x3F) != 0) {
          v32[v34 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v34 & 0x3F));
        }
      }
      uint64_t v36 = (void *)(v31 + ((v27 >> 3) & 0x1FFFFFF8));
      uint64_t v37 = (v56 >> 6) & 0x3F;
      unint64_t v38 = (v30 & 0x3F) - v37 + 8 * (((v30 >> 3) & 0x1FFFFFF8) - ((v27 >> 3) & 0x1FFFFFF8));
      if (v38)
      {
        if ((v29 & 0x3F) != 0)
        {
          if (64 - (v29 & 0x3F) >= v38) {
            uint64_t v39 = (v30 & 0x3F) - v37 + 8 * (((v30 >> 3) & 0x1FFFFFF8) - ((v27 >> 3) & 0x1FFFFFF8));
          }
          else {
            uint64_t v39 = 64 - (v29 & 0x3F);
          }
          *v36++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - (v29 & 0x3Fu) - v39)) & (-1 << v37);
          v38 -= v39;
        }
        if (v38 >= 0x40) {
          memset(v36, 255, 8 * (v38 >> 6));
        }
        if ((v38 & 0x3F) != 0) {
          v36[v38 >> 6] |= 0xFFFFFFFFFFFFFFFFLL >> -(v38 & 0x3F);
        }
      }
      *(_DWORD *)(v6 + 4) = v29;
      *(_DWORD *)(v6 + 8) = v30;
      unsigned __int16 v40 = (_OWORD *)(*v11 + (v30 << 6));
      long long v41 = *v55;
      long long v42 = v55[1];
      long long v43 = v55[3];
      v40[2] = v55[2];
      uint64_t v40[3] = v43;
      *unsigned __int16 v40 = v41;
      v40[1] = v42;
      unint64_t v44 = *(unsigned int *)(v6 + 8);
      *(void *)(*v24 + ((v44 >> 3) & 0x1FFFFFF8)) |= 1 << v44;
      uint64_t v45 = *v11;
    }
    else
    {
      int v51 = (_OWORD *)(v10 + (v9 << 6));
      long long v52 = *a3;
      long long v53 = a3[1];
      long long v54 = a3[3];
      v51[2] = a3[2];
      v51[3] = v54;
      *int v51 = v52;
      v51[1] = v53;
      unint64_t v44 = *(unsigned int *)(v5 + 8);
      *(void *)(*(void *)(a1 + 112) + ((v44 >> 3) & 0x1FFFFFF8)) |= 1 << v44;
      uint64_t v45 = *(void *)(a1 + 88);
    }
    *(_DWORD *)(v6 + 8) = v44 + 1;
  }
  return v45 + (v44 << 6);
}

unint64_t sub_B119B0(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int a5)
{
  unsigned int v40 = a3;
  sub_B11D38((void *)a1, &v40, v36);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v27 = a1;
  uint64_t v28 = v10;
  uint64_t v29 = v11;
  uint64_t v30 = v11;
  uint64_t v31 = 0;
  uint64_t v32 = v10;
  uint64_t v33 = v11;
  uint64_t v34 = v11;
  uint64_t v35 = 0;
  sub_AE47A0(&v27);
  if ((v36[1] != v28 || v37 != v29 || v38 != v30 || v38 != v37 && v39 != v31)
    && *(_DWORD *)(v39 + 8) != *(_DWORD *)(v39 + 4))
  {
    LODWORD(v36[0]) = a3;
    uint64_t v12 = *(void *)(a1 + 88);
    uint64_t v13 = (_DWORD *)(v12 + ((unint64_t)*(unsigned int *)(sub_B1041C(a1, (unsigned int *)v36) + 4) << 6));
    LODWORD(v36[0]) = a3;
    uint64_t v14 = *(void *)(a1 + 88);
    int v15 = (_DWORD *)(v14 + ((unint64_t)*(unsigned int *)(sub_B1041C(a1, (unsigned int *)v36) + 8) << 6));
    if (v13 != v15)
    {
      unsigned __int8 v16 = 0;
      while (1)
      {
        int v17 = v13[7];
        if (v17 != 0x7FFFFFFF)
        {
          int v18 = *(_DWORD *)(a2 + 28);
          if (v17 <= v18 && v13[8] <= *(_DWORD *)(a2 + 32))
          {
            unsigned int v19 = *(_DWORD *)(a2 + 36);
            unsigned int v20 = v13[9];
            if (v20 <= v19
              && v13[10] <= *(_DWORD *)(a2 + 40)
              && (v20 != v19 || v17 != v18 || 10 * v17 - v13[11] <= 10 * v18 - *(_DWORD *)(a2 + 44)))
            {
              uint64_t v25 = 0;
              return v25 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v16 << 8);
            }
          }
          if (v18 <= v17 && *(_DWORD *)(a2 + 32) <= v13[8])
          {
            unsigned int v21 = v13[9];
            unsigned int v22 = *(_DWORD *)(a2 + 36);
            if (v22 <= v21
              && *(_DWORD *)(a2 + 40) <= v13[10]
              && (v22 != v21 || v18 != v17 || 10 * v18 - *(_DWORD *)(a2 + 44) <= 10 * v17 - v13[11]))
            {
              v13[7] = 0x7FFFFFFF;
              unsigned __int8 v16 = 1;
            }
          }
        }
        v13 += 16;
        if (v13 == v15) {
          goto LABEL_28;
        }
      }
    }
  }
  unsigned __int8 v16 = 0;
LABEL_28:
  uint64_t v23 = sub_B11508(a1, a3, (long long *)a2);
  if (a5)
  {
    *(void *)(v23 + 52) = -1;
    *(_DWORD *)(v23 + 60) = 0x7FFFFFFF;
  }
  if (a4)
  {
    int v24 = *(_DWORD *)(a1 + 136);
    *(_DWORD *)(a1 + 136) = v24 + 1;
    *(_DWORD *)(v23 + 24) = v24;
    *(_DWORD *)(v23 + 20) = *(_DWORD *)(a2 + 24);
  }
  uint64_t v25 = 1;
  return v25 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v16 << 8);
}

char *sub_B11C2C(uint64_t a1, unsigned int a2)
{
  unsigned int v17 = a2;
  uint64_t v4 = *(void *)(a1 + 88);
  uint64_t v5 = v4 + ((unint64_t)*(unsigned int *)(sub_B1041C(a1, &v17) + 4) << 6);
  unsigned int v18 = a2;
  uint64_t v6 = *(void *)(a1 + 88);
  uint64_t v7 = sub_B1041C(a1, &v18);
  unint64_t v8 = (long long *)(v6 + ((unint64_t)*(unsigned int *)(v7 + 8) << 6));
  if ((long long *)v5 != v8)
  {
    while (*(_DWORD *)(v5 + 28) != 0x7FFFFFFF)
    {
      v5 += 64;
      if ((long long *)v5 == v8)
      {
        uint64_t v5 = v6 + ((unint64_t)*(unsigned int *)(v7 + 8) << 6);
        goto LABEL_11;
      }
    }
    if ((long long *)v5 != v8)
    {
      for (unint64_t i = (long long *)(v5 + 64); i != v8; i += 4)
      {
        if (*((_DWORD *)i + 7) != 0x7FFFFFFF)
        {
          long long v10 = *i;
          long long v11 = i[1];
          long long v12 = i[3];
          *(_OWORD *)(v5 + 32) = i[2];
          *(_OWORD *)(v5 + 48) = v12;
          *(_OWORD *)uint64_t v5 = v10;
          *(_OWORD *)(v5 + 16) = v11;
          v5 += 64;
        }
      }
    }
  }
LABEL_11:
  unsigned int v13 = a2;
  unsigned int v19 = a2;
  uint64_t v14 = *(void *)(a1 + 88);
  uint64_t v15 = sub_B1041C(a1, &v19);
  return sub_B10058(a1, v13, (char *)v5, (unsigned char *)(v14 + ((unint64_t)*(unsigned int *)(v15 + 8) << 6)));
}

void *sub_B11D38@<X0>(void *a1@<X0>, unsigned int *a2@<X1>, void *a3@<X8>)
{
  if (a1[10] == a1[5] || (unint64_t v5 = sub_B1067C((uint64_t)a1, a2), v5 == -1))
  {
    uint64_t v23 = 0;
    uint64_t v6 = a1[6];
    uint64_t v7 = (uint64_t *)a1[7];
    *a3 = a1;
    a3[1] = v6;
    a3[2] = v7;
    a3[3] = v7;
    goto LABEL_22;
  }
  uint64_t v6 = a1[6];
  uint64_t v7 = (uint64_t *)a1[7];
  unint64_t v8 = v5 / 0x30;
  uint64_t v9 = v6 + 16 * (v5 / 0x30);
  long long v10 = (unsigned __int8 *)(v9 + 10);
  int v11 = v5 % 0x30;
  if ((unsigned __int16)(v5 % 0x30) < 9u)
  {
    __int16 v13 = 0;
    goto LABEL_14;
  }
  unsigned __int16 v12 = v11 - 9;
  __int16 v13 = 0;
  uint64_t v14 = (unsigned __int16)(v5 % 0x30 - 9) >> 3;
  if ((unsigned __int16)(v5 % 0x30 - 9) >> 3)
  {
    __int16 v15 = 0;
    uint64_t v16 = v14 + 1;
    uint64_t v17 = (v14 + 1) & 0x3FFE;
    LOWORD(v11) = v11 - 8 * v17;
    unsigned int v18 = &v10[v17];
    unsigned int v19 = (unsigned __int8 *)(v6 + 16 * v8 + 11);
    uint64_t v20 = v17;
    do
    {
      uint64_t v21 = *(v19 - 1);
      int v22 = *v19;
      v19 += 2;
      v13 += byte_20EC1B6[v21];
      v15 += byte_20EC1B6[v22];
      v20 -= 2;
    }
    while (v20);
    v13 += v15;
    if (v16 == v17) {
      goto LABEL_13;
    }
  }
  else
  {
    unsigned int v18 = (unsigned __int8 *)(v9 + 10);
  }
  do
  {
    int v24 = *v18++;
    v13 += byte_20EC1B6[v24];
    LOWORD(v11) = v11 - 8;
  }
  while ((unsigned __int16)v11 > 8u);
LABEL_13:
  v10 += (v12 >> 3) + 1;
LABEL_14:
  unsigned __int16 v25 = v13 + byte_20EC1B6[~(-1 << v11) & (unint64_t)*v10];
  uint64_t v23 = *(void *)v9 + 12 * v25;
  if (*(unsigned __int16 *)(v9 + 8) == v25)
  {
    uint64_t v26 = v9 + 16;
    uint64_t v9 = a1[7];
    if ((uint64_t *)v26 != v7)
    {
      while (1)
      {
        uint64_t v27 = (uint64_t *)v26;
        if (*(_WORD *)(v26 + 8)) {
          break;
        }
        v26 += 16;
        if (v27 + 2 == v7)
        {
          uint64_t v9 = a1[7];
          goto LABEL_20;
        }
      }
      uint64_t v9 = v26;
LABEL_20:
      uint64_t v23 = *v27;
    }
  }
  *a3 = a1;
  a3[1] = v6;
  a3[2] = v7;
  a3[3] = v9;
LABEL_22:
  a3[4] = v23;
  a3[5] = v6;
  a3[6] = v7;
  a3[7] = v7;
  a3[8] = 0;

  return sub_AE47A0(a3);
}

uint64_t sub_B11F04(void *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v11 = a2;
  unsigned int v25 = a2;
  sub_B11D38(a1, &v25, v21);
  uint64_t v5 = a1[6];
  uint64_t v6 = a1[7];
  unsigned __int16 v12 = a1;
  uint64_t v13 = v5;
  uint64_t v14 = v6;
  uint64_t v15 = v6;
  uint64_t v16 = 0;
  uint64_t v17 = v5;
  uint64_t v18 = v6;
  uint64_t v19 = v6;
  uint64_t v20 = 0;
  sub_AE47A0(&v12);
  if (v21[1] == v13 && v22 == v14 && v23 == v15 && (v23 == v22 || v24 == v16)
    || *(_DWORD *)(v24 + 8) - *(_DWORD *)(v24 + 4) <= a3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_188D9E0(exception, "key does not exist and cannot be added");
    goto LABEL_11;
  }
  unint64_t v7 = *(_DWORD *)(sub_B1041C((uint64_t)a1, &v11) + 4) + a3;
  uint64_t v8 = a1[11];
  if (v7 >= (a1[12] - v8) >> 6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_188D9E0(exception, "index out of range");
LABEL_11:
  }
  return v8 + (v7 << 6);
}

void sub_B1203C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_B12050(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_B12064(uint64_t a1, _DWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  if (a5 == -1
    || (unsigned int v27 = a5,
        uint64_t v10 = *(void *)(a1 + 88),
        unsigned int v11 = (_DWORD *)(v10 + ((unint64_t)*(unsigned int *)(sub_B1041C(a1, &v27) + 4) << 6)),
        unsigned int v28 = a5,
        uint64_t v12 = *(void *)(a1 + 88),
        uint64_t v13 = (_DWORD *)(v12 + ((unint64_t)*(unsigned int *)(sub_B1041C(a1, &v28) + 8) << 6)),
        v11 == v13))
  {
LABEL_21:
    unint64_t v24 = sub_B119B0(a1, (uint64_t)a2, a4, 0, 1);
    unint64_t v22 = v24 >> 8;
    unint64_t v23 = v24 >> 16;
    uint64_t v21 = v24;
    if ((_BYTE)v24)
    {
      sub_B119B0(a1, (uint64_t)a2, a3, 1, 1);
      *(void *)(v25 + 52) = -1;
      *(_DWORD *)(v25 + 60) = 0x7FFFFFFF;
    }
  }
  else
  {
    int v14 = a2[7];
    unsigned int v15 = a2[9];
    while (1)
    {
      int v16 = v11[7];
      if (v16 != 0x7FFFFFFF && v16 <= v14 && v11[8] <= a2[8])
      {
        unsigned int v18 = v11[9];
        if (v18 <= v15 && v11[10] <= a2[10])
        {
          BOOL v19 = 10 * v16 - v11[11] > 10 * v14 - a2[11] && v16 == v14;
          if (!v19 || v18 != v15) {
            break;
          }
        }
      }
      v11 += 16;
      if (v11 == v13) {
        goto LABEL_21;
      }
    }
    uint64_t v21 = 0;
    LOBYTE(v22) = 0;
    unint64_t v23 = 0;
  }
  return ((unint64_t)v22 << 8) | (v23 << 16) | v21;
}

BOOL sub_B121F0(void *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v31 = a2;
  sub_B11D38(a1, &v31, v28);
  uint64_t v6 = a1[6];
  uint64_t v7 = a1[7];
  uint64_t v20 = a1;
  *(void *)&long long v21 = v6;
  *((void *)&v21 + 1) = v7;
  uint64_t v22 = v7;
  uint64_t v23 = 0;
  uint64_t v24 = v6;
  uint64_t v25 = v7;
  uint64_t v26 = v7;
  uint64_t v27 = 0;
  sub_AE47A0(&v20);
  if (*(_OWORD *)&v28[8] == v21
    && *(void *)&v28[24] == v22
    && (*(void *)&v28[24] == *(void *)&v28[16] || (void)v29 == v23))
  {
    LOBYTE(v10) = 0;
  }
  else
  {
    int v8 = *(_DWORD *)(v29 + 4);
    int v9 = *(_DWORD *)(v29 + 8);
    __int16 v10 = 0;
    int v11 = v9 - v8;
    if (v9 != v8)
    {
      unsigned int v12 = 0;
      do
      {
        uint64_t v13 = (long long *)sub_B11F04(a1, a2, v12);
        long long v14 = v13[3];
        long long v16 = *v13;
        long long v15 = v13[1];
        long long v29 = v13[2];
        long long v30 = v14;
        *(_OWORD *)unsigned int v28 = v16;
        *(_OWORD *)&v28[16] = v15;
        __int16 v17 = sub_B119B0((uint64_t)a1, (uint64_t)v28, a3, 0, 1);
        uint64_t v18 = (unsigned __int16)(v17 | v10) & 0xFF00;
        __int16 v10 = v17 | v10 | v18;
        ++v12;
      }
      while (v11 != v12);
      if (v18) {
        sub_B11C2C((uint64_t)a1, a3);
      }
    }
  }
  return v10 != 0;
}

unint64_t sub_B12344(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4 = a1;
  unsigned int v360 = a3;
  *(double *)(a1 + 608) = *(double *)(a1 + 608) + 1.0;
  unint64_t v5 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 40) + 88), a3);
  unsigned int v322 = *(_DWORD *)sub_A3F74C((void *)(v4 + 344), &v360);
  unint64_t v330 = v5;
  unint64_t result = (unint64_t)sub_A40514(&v358, *(void *)(v4 + 24), v5);
  uint64_t v7 = v358;
  if ((unint64_t)v358 < v359)
  {
    uint64_t v332 = (void *)(v4 + 104);
    uint64_t v333 = v4 + 424;
    int v319 = ~a2;
    int v320 = a2 + 2;
    uint64_t v318 = (uint64_t *)(v4 + 248);
    int v328 = a2 + 1;
    unint64_t v329 = HIDWORD(v5);
    uint64_t v334 = v4;
    do
    {
      *(double *)(v4 + 616) = *(double *)(v4 + 616) + 1.0;
      uint64_t v331 = *(unsigned int *)v7;
      LODWORD(v346) = 0;
      uint64_t v8 = *(void *)(v4 + 192);
      int v9 = (char *)(v8 + ((unint64_t)*(unsigned int *)(sub_B1041C((uint64_t)v332, (unsigned int *)&v346) + 4) << 6));
      LODWORD(v346) = 0;
      uint64_t v10 = *(void *)(v4 + 192);
      uint64_t v11 = sub_B1041C((uint64_t)v332, (unsigned int *)&v346);
      sub_B10058((uint64_t)v332, 0, v9, (unsigned char *)(v10 + ((unint64_t)*(unsigned int *)(v11 + 8) << 6)));
      unint64_t result = sub_A1E9A0((uint64_t)&v346, *(void *)(v4 + 24), v330, v322, 0, 1);
      unint64_t v13 = v349;
      unsigned int v12 = v350;
      while ((unint64_t)v12 >= v13 && (unint64_t)v12 < v351)
      {
        uint64_t v14 = 0;
        unint64_t v15 = __ROR8__(*v12, 32);
        uint64_t v16 = *(void *)(v4 + 32);
        uint64_t v17 = *(void *)(v16 + 72) - 1;
        unint64_t v18 = 0xC4CEB9FE1A85EC53
            * ((0xFF51AFD7ED558CCDLL * (v15 ^ (v15 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v15 ^ (v15 >> 33))) >> 33));
        unint64_t v19 = v18 ^ (v18 >> 33);
        uint64_t v20 = *(void *)(v16 + 48);
        uint64_t v21 = v20 + 11;
        uint64_t v22 = -1;
        for (unint64_t i = v19; ; unint64_t i = v14 + v24)
        {
          uint64_t v24 = i & v17;
          unint64_t v25 = (i & v17) / 0x30;
          unint64_t v26 = v24 - 48 * v25;
          if (((*(unsigned __int8 *)(v20 + 16 * v25 + (v26 >> 3) + 10) >> (v26 & 7)) & 1) == 0)
          {
            if (v22 == -1) {
              unint64_t v62 = v24;
            }
            else {
              unint64_t v62 = v22;
            }
            if (!sub_AD2F40(v16, 1)) {
              goto LABEL_92;
            }
            goto LABEL_49;
          }
          uint64_t v27 = *(void *)(v20 + 16 * v25);
          if (!*(void *)(v16 + 40)) {
            break;
          }
          unsigned int v28 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
          if ((unsigned __int16)(v24 - 48 * v25) < 9u)
          {
            __int16 v29 = 0;
            LOBYTE(v34) = v24 - 48 * v25;
            goto LABEL_23;
          }
          __int16 v29 = 0;
          uint64_t v30 = (unsigned __int16)(v24 - 48 * v25 - 9) >> 3;
          if ((unsigned __int16)(v24 - 48 * v25 - 9) >> 3)
          {
            __int16 v31 = 0;
            uint64_t v32 = v30 + 1;
            uint64_t v33 = (v30 + 1) & 0x3FFE;
            unsigned __int16 v34 = v26 - 8 * v33;
            uint64_t v35 = &v28[v33];
            uint64_t v36 = (unsigned __int8 *)(v21 + 16 * v25);
            uint64_t v37 = v33;
            do
            {
              uint64_t v38 = *(v36 - 1);
              int v39 = *v36;
              v36 += 2;
              v29 += byte_20EBFB6[v38];
              v31 += byte_20EBFB6[v39];
              v37 -= 2;
            }
            while (v37);
            v29 += v31;
            if (v32 == v33) {
              goto LABEL_22;
            }
          }
          else
          {
            unsigned __int16 v34 = v24 - 48 * v25;
            uint64_t v35 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
          }
          do
          {
            int v40 = *v35++;
            v29 += byte_20EBFB6[v40];
            v34 -= 8;
          }
          while (v34 > 8u);
LABEL_22:
          v28 += ((unsigned __int16)(v26 - 9) >> 3) + 1;
LABEL_23:
          long long v41 = (_DWORD *)(v27
                         + 12
                         * (unsigned __int16)(v29 + byte_20EBFB6[~(-1 << v34) & (unint64_t)*v28]));
          if (*(_DWORD *)(v16 + 36) != v41[1] || *(_DWORD *)(v16 + 32) != *v41) {
            break;
          }
          if (v22 == -1) {
            uint64_t v22 = v24;
          }
LABEL_10:
          ++v14;
        }
        long long v43 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
        if ((unsigned __int16)(v24 - 48 * v25) < 9u)
        {
          __int16 v44 = 0;
          unsigned __int16 v55 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
          LOBYTE(v49) = v24 - 48 * v25;
          goto LABEL_37;
        }
        __int16 v44 = 0;
        uint64_t v45 = (unsigned __int16)(v24 - 48 * v25 - 9) >> 3;
        if (!((unsigned __int16)(v24 - 48 * v25 - 9) >> 3))
        {
          unsigned __int16 v49 = v24 - 48 * v25;
          uint64_t v50 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
          do
          {
LABEL_35:
            int v56 = *v50++;
            v44 += byte_20EBFB6[v56];
            v49 -= 8;
          }
          while (v49 > 8u);
          goto LABEL_36;
        }
        __int16 v46 = 0;
        uint64_t v47 = v45 + 1;
        uint64_t v48 = (v45 + 1) & 0x3FFE;
        unsigned __int16 v49 = v26 - 8 * v48;
        uint64_t v50 = &v43[v48];
        int v51 = (unsigned __int8 *)(v21 + 16 * v25);
        uint64_t v52 = v48;
        do
        {
          uint64_t v53 = *(v51 - 1);
          int v54 = *v51;
          v51 += 2;
          v44 += byte_20EBFB6[v53];
          v46 += byte_20EBFB6[v54];
          v52 -= 2;
        }
        while (v52);
        v44 += v46;
        if (v47 != v48) {
          goto LABEL_35;
        }
LABEL_36:
        unsigned __int16 v55 = &v43[((unsigned __int16)(v26 - 9) >> 3) + 1];
LABEL_37:
        if (v15 != *(void *)(v27
                              + 12
                              * (unsigned __int16)(v44
                                                 + byte_20EBFB6[~(-1 << v49) & (unint64_t)*v55])))
          goto LABEL_10;
        if (v24 != -1)
        {
          if ((unsigned __int16)(v24 - 48 * v25) < 9u)
          {
            __int16 v59 = 0;
            uint64_t v4 = v334;
          }
          else
          {
            if ((((_WORD)v24 - 48 * (_WORD)v25 - 8) & 0xFFF8) != 0) {
              __int16 v57 = 8;
            }
            else {
              __int16 v57 = v24 - 48 * v25 - 8;
            }
            unsigned __int16 v58 = ~v57 + v24 - 48 * v25;
            uint64_t v4 = v334;
            __int16 v59 = 0;
            if (v58 < 8u)
            {
              unsigned __int16 v60 = v26;
              uint64_t v61 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
              goto LABEL_97;
            }
            __int16 v107 = 0;
            uint64_t v108 = (v58 >> 3) + 1;
            unsigned __int16 v60 = v26 - 8 * (((v58 >> 3) + 1) & 0x3FFE);
            uint64_t v61 = &v43[v108 & 0x3FFE];
            __int16 v109 = (unsigned __int8 *)(v20 + 16 * v25 + 11);
            uint64_t v110 = v108 & 0x3FFE;
            do
            {
              uint64_t v111 = *(v109 - 1);
              int v112 = *v109;
              v109 += 2;
              v59 += byte_20EBFB6[v111];
              v107 += byte_20EBFB6[v112];
              v110 -= 2;
            }
            while (v110);
            v59 += v107;
            if ((v108 & 0x3FFE) != v108)
            {
              do
              {
LABEL_97:
                int v113 = *v61++;
                v59 += byte_20EBFB6[v113];
                v60 -= 8;
              }
              while (v60 > 8u);
            }
            v43 += ((unsigned __int16)(v26 - 9) >> 3) + 1;
            LOBYTE(v26) = v60;
          }
          uint64_t v114 = *(void *)(v16 + 56);
          unsigned __int16 v115 = v59 + byte_20EBFB6[~(-1 << v26) & (unint64_t)*v43];
          uint64_t v116 = v20 + 16 * v25;
          if (*(unsigned __int16 *)(v116 + 8) != v115 || v116 + 16 == v114)
          {
            unint64_t v106 = (_DWORD *)(v27 + 12 * v115);
          }
          else
          {
            uint64_t v118 = v116 + 32;
            do
            {
              if (*(_WORD *)(v118 - 8)) {
                BOOL v119 = 1;
              }
              else {
                BOOL v119 = v118 == v114;
              }
              v118 += 16;
            }
            while (!v119);
            unint64_t v106 = *(_DWORD **)(v118 - 32);
          }
          goto LABEL_111;
        }
        unint64_t v62 = -1;
        if (!sub_AD2F40(v16, 1))
        {
LABEL_92:
          unint64_t v361 = v15;
          int v362 = -1;
          sub_AD3484(v16, (uint64_t *)&v361, v62, &v363);
          unint64_t v106 = v365;
          uint64_t v4 = v334;
          goto LABEL_111;
        }
LABEL_49:
        uint64_t v63 = 0;
        unint64_t v361 = v15;
        int v362 = -1;
        uint64_t v64 = *(void *)(v16 + 72) - 1;
        uint64_t v65 = *(void *)(v16 + 48);
        uint64_t v66 = v65 + 11;
        uint64_t v67 = -1;
        while (2)
        {
          uint64_t v68 = v19 & v64;
          unint64_t v69 = (v19 & v64) / 0x30;
          unint64_t v70 = (v19 & v64) % 0x30;
          if (((*(unsigned __int8 *)(v65 + 16 * v69 + (v70 >> 3) + 10) >> (v70 & 7)) & 1) == 0)
          {
            if (v67 == -1) {
              unint64_t v105 = v19 & v64;
            }
            else {
              unint64_t v105 = v67;
            }
            goto LABEL_90;
          }
          uint64_t v71 = *(void *)(v16 + 40);
          uint64_t v72 = *(void *)(v65 + 16 * v69);
          if (!v71) {
            break;
          }
          __int16 v73 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
          if ((unsigned __int16)((v19 & v64) % 0x30) < 9u)
          {
            __int16 v74 = 0;
            LOBYTE(v75) = (v19 & v64) % 0x30;
            goto LABEL_65;
          }
          __int16 v74 = 0;
          uint64_t v75 = (unsigned __int16)(v68 - 48 * v69 - 9) >> 3;
          if (!((unsigned __int16)(v68 - 48 * v69 - 9) >> 3))
          {
            LODWORD(v75) = (v19 & v64) % 0x30;
            uint64_t v79 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
            do
            {
LABEL_63:
              int v84 = *v79++;
              v74 += byte_20EBFB6[v84];
              LOWORD(v75) = v75 - 8;
            }
            while ((unsigned __int16)v75 > 8u);
            goto LABEL_64;
          }
          __int16 v76 = 0;
          uint64_t v77 = v75 + 1;
          uint64_t v78 = (v75 + 1) & 0x3FFE;
          LOWORD(v75) = v70 - 8 * v78;
          uint64_t v79 = &v73[v78];
          int v80 = (unsigned __int8 *)(v66 + 16 * v69);
          uint64_t v81 = v78;
          do
          {
            uint64_t v82 = *(v80 - 1);
            int v83 = *v80;
            v80 += 2;
            v74 += byte_20EBFB6[v82];
            v76 += byte_20EBFB6[v83];
            v81 -= 2;
          }
          while (v81);
          v74 += v76;
          if (v77 != v78) {
            goto LABEL_63;
          }
LABEL_64:
          v73 += ((unsigned __int16)(v70 - 9) >> 3) + 1;
LABEL_65:
          __int16 v85 = (_DWORD *)(v72
                         + 12
                         * (unsigned __int16)(v74 + byte_20EBFB6[~(-1 << v75) & (unint64_t)*v73]));
          if (*(_DWORD *)(v16 + 36) == v85[1] && *(_DWORD *)(v16 + 32) == *v85)
          {
            if (v67 == -1) {
              uint64_t v67 = v19 & v64;
            }
LABEL_52:
            unint64_t v19 = ++v63 + v68;
            continue;
          }
          break;
        }
        __int16 v87 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
        if ((unsigned __int16)((v19 & v64) % 0x30) < 9u)
        {
          __int16 v88 = 0;
          unsigned __int16 v98 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
          LOBYTE(v89) = (v19 & v64) % 0x30;
          goto LABEL_79;
        }
        __int16 v88 = 0;
        uint64_t v89 = (unsigned __int16)(v68 - 48 * v69 - 9) >> 3;
        if (!((unsigned __int16)(v68 - 48 * v69 - 9) >> 3))
        {
          LODWORD(v89) = (v19 & v64) % 0x30;
          uint64_t v93 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
          do
          {
LABEL_77:
            int v99 = *v93++;
            v88 += byte_20EBFB6[v99];
            LOWORD(v89) = v89 - 8;
          }
          while ((unsigned __int16)v89 > 8u);
          goto LABEL_78;
        }
        __int16 v90 = 0;
        uint64_t v91 = v89 + 1;
        uint64_t v92 = (v89 + 1) & 0x3FFE;
        LOWORD(v89) = v70 - 8 * v92;
        uint64_t v93 = &v87[v92];
        int v94 = (unsigned __int8 *)(v66 + 16 * v69);
        uint64_t v95 = v92;
        do
        {
          uint64_t v96 = *(v94 - 1);
          int v97 = *v94;
          v94 += 2;
          v88 += byte_20EBFB6[v96];
          v90 += byte_20EBFB6[v97];
          v95 -= 2;
        }
        while (v95);
        v88 += v90;
        if (v91 != v92) {
          goto LABEL_77;
        }
LABEL_78:
        unsigned __int16 v98 = &v87[((unsigned __int16)(v70 - 9) >> 3) + 1];
LABEL_79:
        if (v15 != *(void *)(v72
                              + 12
                              * (unsigned __int16)(v88
                                                 + byte_20EBFB6[~(-1 << v89) & (unint64_t)*v98])))
          goto LABEL_52;
        if (v68 == -1)
        {
          unint64_t v105 = -1;
LABEL_90:
          uint64_t v4 = v334;
          sub_AD3484(v16, (uint64_t *)&v361, v105, &v363);
          unint64_t v106 = v365;
          goto LABEL_111;
        }
        uint64_t v4 = v334;
        if ((unsigned __int16)((v19 & v64) % 0x30) < 9u)
        {
          __int16 v102 = 0;
        }
        else
        {
          if ((((_WORD)v68 - 48 * (_WORD)v69 - 8) & 0xFFF8) != 0) {
            __int16 v100 = 8;
          }
          else {
            __int16 v100 = v68 - 48 * v69 - 8;
          }
          unsigned __int16 v101 = ~v100 + v68 - 48 * v69;
          if (v101 < 8u)
          {
            __int16 v102 = 0;
            unsigned __int16 v103 = v70;
            unsigned int v104 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
            goto LABEL_179;
          }
          __int16 v175 = 0;
          __int16 v176 = 0;
          uint64_t v177 = (v101 >> 3) + 1;
          unsigned __int16 v103 = v70 - 8 * (((v101 >> 3) + 1) & 0x3FFE);
          unsigned int v104 = &v87[v177 & 0x3FFE];
          uint64_t v178 = (unsigned __int8 *)(v65 + 16 * v69 + 11);
          uint64_t v179 = v177 & 0x3FFE;
          do
          {
            uint64_t v180 = *(v178 - 1);
            int v181 = *v178;
            v178 += 2;
            v175 += byte_20EBFB6[v180];
            v176 += byte_20EBFB6[v181];
            v179 -= 2;
          }
          while (v179);
          __int16 v102 = v176 + v175;
          if ((v177 & 0x3FFE) != v177)
          {
            do
            {
LABEL_179:
              int v182 = *v104++;
              v102 += byte_20EBFB6[v182];
              v103 -= 8;
            }
            while (v103 > 8u);
          }
          v87 += ((unsigned __int16)(v70 - 9) >> 3) + 1;
          LOBYTE(v70) = v103;
        }
        uint64_t v183 = v65 + 16 * v69;
        int32x2_t v184 = *(_DWORD ***)(v16 + 56);
        unsigned __int16 v185 = v102 + byte_20EBFB6[~(-1 << v70) & (unint64_t)*v87];
        unint64_t v106 = (_DWORD *)(v72 + 12 * v185);
        if (*(unsigned __int16 *)(v183 + 8) == v185)
        {
          uint64_t v186 = v183 + 16;
          if ((_DWORD **)(v183 + 16) != v184)
          {
            while (1)
            {
              int v187 = (_DWORD **)v186;
              if (*(_WORD *)(v186 + 8)) {
                break;
              }
              v186 += 16;
              if (v187 + 2 == v184)
              {
                uint64_t v183 = *(void *)(v16 + 56);
                goto LABEL_187;
              }
            }
            uint64_t v183 = v186;
LABEL_187:
            unint64_t v106 = *v187;
            goto LABEL_188;
          }
        }
        else
        {
LABEL_188:
          if ((_DWORD **)v183 != v184 && v71)
          {
            do
            {
              if (*(_DWORD *)(v16 + 36) != v106[1] || *(_DWORD *)(v16 + 32) != *v106) {
                break;
              }
              v106 += 3;
              if (v106 == (_DWORD *)(*(void *)v183 + 12 * *(unsigned __int16 *)(v183 + 8)))
              {
                v183 += 16;
                if ((_DWORD **)v183 != v184)
                {
                  do
                  {
                    if (*(_WORD *)(v183 + 8))
                    {
                      unint64_t v106 = *(_DWORD **)v183;
                      goto LABEL_192;
                    }
                    v183 += 16;
                  }
                  while ((_DWORD **)v183 != v184);
                  unint64_t v106 = *(_DWORD **)(v183 - 16);
                }
                break;
              }
LABEL_192:
              ;
            }
            while ((_DWORD **)v183 != v184);
          }
        }
LABEL_111:
        unsigned int v120 = v106[2];
        if (v120 != -1) {
          goto LABEL_135;
        }
        int v121 = *(_DWORD *)(v16 + 112);
        *(_DWORD *)(v16 + 112) = v121 + 1;
        v106[2] = v121;
        int v123 = *(unint64_t **)(v16 + 96);
        unint64_t v122 = *(void *)(v16 + 104);
        if ((unint64_t)v123 < v122)
        {
          *int v123 = v15;
          uint64_t v124 = (uint64_t)(v123 + 1);
          goto LABEL_134;
        }
        uint64_t v125 = (unint64_t **)(v16 + 88);
        unsigned __int16 v126 = *(char **)(v16 + 88);
        uint64_t v127 = ((char *)v123 - v126) >> 3;
        unint64_t v128 = v127 + 1;
        if ((unint64_t)(v127 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v129 = v122 - (void)v126;
        if (v129 >> 2 > v128) {
          unint64_t v128 = v129 >> 2;
        }
        if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v128 = 0x1FFFFFFFFFFFFFFFLL;
        }
        if (!v128)
        {
          unint64_t v130 = 0;
          uint64_t v131 = 0;
          uint64_t v132 = (unint64_t *)(8 * v127);
          *(void *)(8 * v127) = v15;
          uint64_t v124 = 8 * v127 + 8;
          if (v123 != (unint64_t *)v126) {
            goto LABEL_122;
          }
LABEL_125:
          *(void *)(v16 + 88) = v132;
          *(void *)(v16 + 96) = v124;
          *(void *)(v16 + 104) = &v131[8 * v130];
          uint64_t v4 = v334;
          if (v123) {
            goto LABEL_133;
          }
          goto LABEL_134;
        }
        if (v128 >> 61) {
          sub_188D718();
        }
        unint64_t v130 = v128;
        uint64_t v131 = (char *)operator new(8 * v128);
        uint64_t v125 = (unint64_t **)(v16 + 88);
        uint64_t v132 = (unint64_t *)&v131[8 * v127];
        *uint64_t v132 = v15;
        uint64_t v124 = (uint64_t)(v132 + 1);
        if (v123 == (unint64_t *)v126) {
          goto LABEL_125;
        }
LABEL_122:
        unint64_t v133 = (char *)(v123 - 1) - v126;
        if (v133 < 0x58) {
          goto LABEL_383;
        }
        if ((unint64_t)(v126 - v131) < 0x20) {
          goto LABEL_383;
        }
        uint64_t v134 = (v133 >> 3) + 1;
        uint64_t v135 = 8 * (v134 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v136 = &v123[v135 / 0xFFFFFFFFFFFFFFF8];
        uint64_t v132 = (unint64_t *)((char *)v132 - v135);
        long long v137 = &v131[8 * v127 - 16];
        unint64_t v138 = v123 - 2;
        uint64_t v139 = v134 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v140 = *(_OWORD *)v138;
          *((_OWORD *)v137 - 1) = *((_OWORD *)v138 - 1);
          *(_OWORD *)long long v137 = v140;
          v137 -= 32;
          v138 -= 4;
          v139 -= 4;
        }
        while (v139);
        int v123 = v136;
        if (v134 != (v134 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_383:
          do
          {
            unint64_t v141 = *--v123;
            *--uint64_t v132 = v141;
          }
          while (v123 != (unint64_t *)v126);
        }
        int v123 = *v125;
        *(void *)(v16 + 88) = v132;
        *(void *)(v16 + 96) = v124;
        *(void *)(v16 + 104) = &v131[8 * v130];
        uint64_t v4 = v334;
        if (v123) {
LABEL_133:
        }
          operator delete(v123);
LABEL_134:
        *(void *)(v16 + 96) = v124;
        unsigned int v120 = v106[2];
LABEL_135:
        LODWORD(v361) = v120;
        unint64_t result = sub_BD5C18(v333, v120, v15);
        if ((result & 1) == 0)
        {
          if (!*(unsigned char *)(v4 + 21))
          {
            LODWORD(v363) = 0;
            uint64_t v155 = *(void *)(v4 + 192);
            uint64_t v156 = (char *)(v155
                          + ((unint64_t)*(unsigned int *)(sub_B1041C((uint64_t)v332, (unsigned int *)&v363) + 4) << 6));
            LODWORD(v363) = 0;
            uint64_t v157 = *(void *)(v4 + 192);
            uint64_t v158 = sub_B1041C((uint64_t)v332, (unsigned int *)&v363);
            unint64_t result = (unint64_t)sub_B10058((uint64_t)v332, 0, v156, (unsigned char *)(v157 + ((unint64_t)*(unsigned int *)(v158 + 8) << 6)));
          }
          goto LABEL_257;
        }
        LODWORD(v363) = 0;
        if (*(void *)(v4 + 184) == *(void *)(v4 + 144)) {
          goto LABEL_222;
        }
        unint64_t result = sub_B1067C((uint64_t)v332, (unsigned int *)&v363);
        if (result == -1) {
          goto LABEL_222;
        }
        uint64_t v142 = *(void *)(v4 + 152);
        uint64_t v143 = v142 + 16 * (result / 0x30);
        unint64_t v144 = (unsigned __int8 *)(v143 + 10);
        int v145 = result % 0x30;
        if ((unsigned __int16)(result % 0x30) < 9u)
        {
          __int16 v146 = 0;
          goto LABEL_152;
        }
        __int16 v146 = 0;
        uint64_t v147 = (unsigned __int16)(result % 0x30 - 9) >> 3;
        if (!((unsigned __int16)(result % 0x30 - 9) >> 3))
        {
          LODWORD(v147) = result % 0x30;
          __int16 v151 = (unsigned __int8 *)(v143 + 10);
          do
          {
LABEL_150:
            int v159 = *v151++;
            v146 += byte_20EC1B6[v159];
            LOWORD(v147) = v147 - 8;
          }
          while ((unsigned __int16)v147 > 8u);
          goto LABEL_151;
        }
        __int16 v148 = 0;
        uint64_t v149 = v147 + 1;
        uint64_t v150 = (v147 + 1) & 0x3FFE;
        LOWORD(v147) = v145 - 8 * v150;
        __int16 v151 = &v144[v150];
        unint64_t result = v142 + 16 * (result / 0x30) + 11;
        uint64_t v152 = v150;
        do
        {
          uint64_t v153 = *(unsigned __int8 *)(result - 1);
          int v154 = *(unsigned __int8 *)result;
          result += 2;
          v146 += byte_20EC1B6[v153];
          v148 += byte_20EC1B6[v154];
          v152 -= 2;
        }
        while (v152);
        v146 += v148;
        if (v149 != v150) {
          goto LABEL_150;
        }
LABEL_151:
        v144 += ((unsigned __int16)(v145 - 9) >> 3) + 1;
        LOBYTE(v145) = v147;
LABEL_152:
        uint64_t v160 = *(void *)(v4 + 160);
        unsigned __int16 v161 = v146 + byte_20EC1B6[~(-1 << v145) & (unint64_t)*v144];
        if (*(unsigned __int16 *)(v143 + 8) == v161)
        {
          v143 += 16;
          if (v143 != v160)
          {
            while (1)
            {
              uint64_t v162 = v143;
              if (*(_WORD *)(v143 + 8)) {
                break;
              }
              v143 += 16;
              if (v162 + 16 == v160) {
                goto LABEL_222;
              }
            }
            uint64_t v163 = *(_DWORD **)v143;
            if (v143 != v160)
            {
LABEL_160:
              if (*(void *)(v4 + 144))
              {
                while (*(_DWORD *)(v4 + 136) == *v163)
                {
                  v163 += 3;
                  if (v163 == (_DWORD *)(*(void *)v143 + 12 * *(unsigned __int16 *)(v143 + 8)))
                  {
                    while (1)
                    {
                      v143 += 16;
                      if (v143 == v160) {
                        goto LABEL_222;
                      }
                      if (*(_WORD *)(v143 + 8))
                      {
                        uint64_t v163 = *(_DWORD **)v143;
                        break;
                      }
                    }
                  }
                  if (v143 == v160) {
                    break;
                  }
                }
              }
              if (v143 != v160 && v163[2] != v163[1])
              {
                LODWORD(v363) = 0;
                uint64_t v164 = *(void *)(v4 + 192);
                uint64_t v165 = (_DWORD *)(v164
                                + ((unint64_t)*(unsigned int *)(sub_B1041C((uint64_t)v332, (unsigned int *)&v363)
                                                                     + 4) << 6));
                LODWORD(v363) = 0;
                uint64_t v166 = *(void *)(v4 + 192);
                uint64_t v167 = (_DWORD *)(v166
                                + ((unint64_t)*(unsigned int *)(sub_B1041C((uint64_t)v332, (unsigned int *)&v363)
                                                                     + 8) << 6));
                if (v165 != v167)
                {
                  int v168 = v355;
                  uint64_t v169 = v353;
                  uint64_t v170 = v348;
                  unint64_t v171 = ((unint64_t)v350 - v349) >> 4;
                  do
                  {
                    unsigned int v174 = v165[13];
                    if (v168)
                    {
                      unsigned int v356 = v165[14];
                      int v172 = v165[15];
                      int v357 = v172;
                    }
                    else
                    {
                      int v172 = *(_DWORD *)(v169 + 12 * v174);
                    }
                    long long v173 = (unsigned int *)((char *)v170 + *(unsigned __int16 *)((char *)v170 - *v170 + 6));
                    v165[7] = *(unsigned int *)((char *)&v173[2
                                                            * (*(_DWORD *)(v169 + 12 * v174 + 4) + v171)
                                                            + 1]
                                              + *v173)
                            + v172;
                    v165 += 16;
                  }
                  while (v165 != v167);
                  int v354 = (int *)(v169 + 12 * v174);
                }
                sub_B13FE4(v332, 0);
                if ((*((unsigned char *)v350 + 15) & 1) != 0
                  && (!v352
                   || (*(_DWORD *)(v352 + 4 * (((unint64_t)v350 - v349) >> 4)) & v331) == 0))
                {
                  int v189 = *(_DWORD *)(v4 + 96);
                  if (*(unsigned char *)(v4 + 20))
                  {
                    unsigned int v190 = v189 + v189 * *(_DWORD *)(v4 + 416);
                    int v191 = v361;
                    uint64_t v192 = *(void *)(v4 + 48);
                    if (v192) {
                      goto LABEL_209;
                    }
LABEL_211:
                    int v193 = 2147483646;
                  }
                  else
                  {
                    unsigned int v190 = -1;
                    int v191 = v361;
                    uint64_t v192 = *(void *)(v4 + 48);
                    if (!v192) {
                      goto LABEL_211;
                    }
LABEL_209:
                    int v193 = sub_AD7004(v192, v191, *(_DWORD *)(v4 + 100) + v319);
                  }
                  if (sub_B14254(v332, 0, v320 + v189 + v189 * v191, v189 + v189 * v191, v190, v193)) {
                    sub_A3EF14(v318, &v361);
                  }
                }
                LODWORD(v363) = 0;
                uint64_t v194 = *(void *)(v4 + 192);
                uint64_t v195 = (_DWORD *)(v194
                                + ((unint64_t)*(unsigned int *)(sub_B1041C((uint64_t)v332, (unsigned int *)&v363)
                                                                     + 4) << 6));
                LODWORD(v363) = 0;
                uint64_t v196 = *(void *)(v4 + 192);
                __int16 v197 = (_DWORD *)(v196
                                + ((unint64_t)*(unsigned int *)(sub_B1041C((uint64_t)v332, (unsigned int *)&v363)
                                                                     + 8) << 6));
                if (v195 != v197)
                {
                  int v198 = v355;
                  uint64_t v199 = v353;
                  uint64_t v200 = v348;
                  unint64_t v201 = ((unint64_t)v350 - v349) >> 4;
                  do
                  {
                    unsigned int v204 = v195[13];
                    if (v198)
                    {
                      unsigned int v356 = v195[14];
                      int v202 = v195[15];
                      int v357 = v202;
                    }
                    else
                    {
                      int v202 = *(_DWORD *)(v199 + 12 * v204);
                    }
                    int v203 = (unsigned int *)((char *)v200 + *(unsigned __int16 *)((char *)v200 - *v200 + 6));
                    v195[7] = *(unsigned int *)((char *)&v203[2
                                                            * (*(_DWORD *)(v199 + 12 * v204 + 4) + v201)
                                                            + 2]
                                              + *v203)
                            + v202;
                    v195 += 16;
                  }
                  while (v195 != v197);
                  int v354 = (int *)(v199 + 12 * v204);
                }
                unint64_t result = (unint64_t)sub_B13FE4(v332, 0);
              }
            }
          }
        }
        else
        {
          uint64_t v163 = (_DWORD *)(*(void *)v143 + 12 * v161);
          if (v143 != v160) {
            goto LABEL_160;
          }
        }
LABEL_222:
        if ((*((unsigned char *)v350 + 15) & 2) == 0) {
          goto LABEL_257;
        }
        if (!v352)
        {
          if (!v331) {
            goto LABEL_227;
          }
          goto LABEL_257;
        }
        if (*(_DWORD *)(v352 + 4 * (((unint64_t)v350 - v349) >> 4)) != v331) {
          goto LABEL_257;
        }
LABEL_227:
        unsigned int v205 = v328 + *(_DWORD *)(v4 + 96) + *(_DWORD *)(v4 + 96) * v361;
        LODWORD(v363) = v205;
        if (*(void *)(v4 + 184) == *(void *)(v4 + 144)) {
          goto LABEL_257;
        }
        unint64_t result = sub_B1067C((uint64_t)v332, (unsigned int *)&v363);
        if (result == -1) {
          goto LABEL_257;
        }
        uint64_t v206 = *(void *)(v4 + 152);
        uint64_t v207 = v206 + 16 * (result / 0x30);
        int v208 = (unsigned __int8 *)(v207 + 10);
        int v209 = result % 0x30;
        if ((unsigned __int16)(result % 0x30) < 9u)
        {
          __int16 v210 = 0;
          goto LABEL_239;
        }
        __int16 v210 = 0;
        uint64_t v211 = (unsigned __int16)(result % 0x30 - 9) >> 3;
        if (!((unsigned __int16)(result % 0x30 - 9) >> 3))
        {
          LODWORD(v211) = result % 0x30;
          uint64_t v215 = (unsigned __int8 *)(v207 + 10);
          do
          {
LABEL_237:
            int v219 = *v215++;
            v210 += byte_20EC1B6[v219];
            LOWORD(v211) = v211 - 8;
          }
          while ((unsigned __int16)v211 > 8u);
          goto LABEL_238;
        }
        __int16 v212 = 0;
        uint64_t v213 = v211 + 1;
        uint64_t v214 = (v211 + 1) & 0x3FFE;
        LOWORD(v211) = v209 - 8 * v214;
        uint64_t v215 = &v208[v214];
        unint64_t result = v206 + 16 * (result / 0x30) + 11;
        uint64_t v216 = v214;
        do
        {
          uint64_t v217 = *(unsigned __int8 *)(result - 1);
          int v218 = *(unsigned __int8 *)result;
          result += 2;
          v210 += byte_20EC1B6[v217];
          v212 += byte_20EC1B6[v218];
          v216 -= 2;
        }
        while (v216);
        v210 += v212;
        if (v213 != v214) {
          goto LABEL_237;
        }
LABEL_238:
        v208 += ((unsigned __int16)(v209 - 9) >> 3) + 1;
        LOBYTE(v209) = v211;
LABEL_239:
        uint64_t v220 = *(void *)(v4 + 160);
        unsigned __int16 v221 = v210 + byte_20EC1B6[~(-1 << v209) & (unint64_t)*v208];
        if (*(unsigned __int16 *)(v207 + 8) == v221)
        {
          v207 += 16;
          if (v207 != v220)
          {
            while (1)
            {
              uint64_t v222 = v207;
              if (*(_WORD *)(v207 + 8)) {
                break;
              }
              v207 += 16;
              if (v222 + 16 == v220) {
                goto LABEL_257;
              }
            }
            uint64_t v223 = *(_DWORD **)v207;
            if (v207 != v220) {
              goto LABEL_247;
            }
          }
          goto LABEL_257;
        }
        uint64_t v223 = (_DWORD *)(*(void *)v207 + 12 * v221);
        if (v207 == v220) {
          goto LABEL_257;
        }
LABEL_247:
        if (*(void *)(v4 + 144))
        {
          do
          {
            if (*(_DWORD *)(v4 + 136) != *v223) {
              break;
            }
            v223 += 3;
            if (v223 == (_DWORD *)(*(void *)v207 + 12 * *(unsigned __int16 *)(v207 + 8)))
            {
              do
              {
                v207 += 16;
                if (v207 == v220) {
                  goto LABEL_257;
                }
              }
              while (!*(_WORD *)(v207 + 8));
              uint64_t v223 = *(_DWORD **)v207;
            }
          }
          while (v207 != v220);
        }
        if (v207 != v220)
        {
          uint64_t v226 = v223 + 1;
          int v225 = v223[1];
          int v224 = v226[1];
          int v227 = v224 - v225;
          if (v224 != v225)
          {
            unsigned int v234 = 0;
            int v321 = v224 - v225;
            do
            {
              uint64_t v235 = sub_B11F04(v332, v205, v234);
              signed int v236 = *((_DWORD *)v350 + 2) + *(_DWORD *)(v235 + 28);
              if (v355)
              {
                unint64_t result = sub_A1F39C(*(void *)(v4 + 24), (uint64_t)&v346, v236, 1);
                if ((result & 1) == 0) {
                  goto LABEL_281;
                }
              }
              else
              {
                unint64_t result = sub_A1F8B4((uint64_t)&v346, v236, 1);
                if (!result) {
                  goto LABEL_281;
                }
              }
              uint64_t v325 = *(void *)(v235 + 20);
              int v237 = *(_DWORD *)(v235 + 36);
              unsigned int v323 = *(_DWORD *)(v235 + 40);
              int v324 = *(_DWORD *)(v235 + 44);
              int v326 = *(_DWORD *)(v235 + 48);
              int v327 = *(_DWORD *)(v235 + 32);
              uint64_t v238 = (void *)(*(void *)(v4 + 24) + 4136);
              if (sub_A10E20(v238, v329))
              {
                uint64_t v239 = (int *)sub_A1120C(*(void *)(*v238 + 3944), v330);
              }
              else
              {
                if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                  && __cxa_guard_acquire(&qword_24F7308))
                {
                  sub_518C8(0x3B60u, 0x7FCAu);
                  dword_24F7300 = v312 | 0x40000000;
                  __cxa_guard_release(&qword_24F7308);
                  uint64_t v4 = v334;
                }
                uint64_t v240 = *v238;
                if (dword_24F7300 == v329)
                {
                  int v241 = *(unsigned int **)(*(void *)(v240 + 3976) + 72);
                  if (!v241)
                  {
                    exception = __cxa_allocate_exception(0x40uLL);
                    unint64_t v363 = (char *)operator new(0x40uLL);
                    long long v364 = xmmword_20B9A90;
                    strcpy(v363, "Realtime stop pattern quad data requested on nullptr buffer");
                    int v315 = (void *)sub_2F404((uint64_t)exception, (long long *)&v363);
                  }
                  uint64_t v242 = (int *)((char *)v241 + *v241);
                  unsigned int v243 = (unsigned __int16 *)((char *)v242 - *v242);
                  if (*v243 >= 5u && (uint64_t v244 = v243[2]) != 0) {
                    uint64_t v245 = (unsigned int *)((char *)v242 + v244 + *(unsigned int *)((char *)v242 + v244));
                  }
                  else {
                    uint64_t v245 = 0;
                  }
                  uint64_t v239 = (int *)sub_A1139C(v245, v330);
                }
                else
                {
                  uint64_t v239 = (int *)sub_A11500(v240 + 24, v330, 0, "stop pattern");
                }
              }
              uint64_t v246 = v239;
              uint64_t v247 = *v238;
              uint64_t v248 = (unsigned __int16 *)((char *)v239 - *v239);
              if (*v248 >= 0xFu && (uint64_t v249 = v248[7]) != 0)
              {
                uint64_t v250 = v247 + 3896;
                char v251 = sub_49442C(*(unsigned __int16 *)((char *)v239 + v249));
                if (sub_C25A10(v250, v251)) {
                  goto LABEL_305;
                }
              }
              else
              {
                uint64_t v255 = v247 + 3896;
                char v256 = sub_49442C(0x7FFFu);
                if (sub_C25A10(v255, v256))
                {
LABEL_305:
                  int v254 = 128;
                  int v227 = v321;
                  if (sub_A10E20(v238, v329)) {
                    goto LABEL_306;
                  }
                  goto LABEL_308;
                }
              }
              uint64_t v252 = (unsigned __int16 *)((char *)v246 - *v246);
              int v227 = v321;
              if (*v252 >= 0xBu && (uint64_t v253 = v252[5]) != 0)
              {
                int v254 = sub_A2BF48(*((unsigned char *)v246 + v253));
                if (sub_A10E20(v238, v329)) {
                  goto LABEL_306;
                }
              }
              else
              {
                int v254 = sub_A2BF48(0);
                if (sub_A10E20(v238, v329))
                {
LABEL_306:
                  unint64_t v257 = (int *)sub_A1120C(*(void *)(*v238 + 3944), v330);
                  goto LABEL_315;
                }
              }
LABEL_308:
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                && __cxa_guard_acquire(&qword_24F7308))
              {
                sub_518C8(0x3B60u, 0x7FCAu);
                dword_24F7300 = v313 | 0x40000000;
                __cxa_guard_release(&qword_24F7308);
                uint64_t v4 = v334;
                int v227 = v321;
              }
              uint64_t v258 = *v238;
              if (dword_24F7300 != v329)
              {
                unint64_t v257 = (int *)sub_A11500(v258 + 24, v330, 0, "stop pattern");
LABEL_315:
                long long v264 = (unsigned __int16 *)((char *)v257 - *v257);
                if (*v264 < 0x19u) {
                  goto LABEL_321;
                }
                goto LABEL_319;
              }
              unint64_t v259 = *(unsigned int **)(*(void *)(v258 + 3976) + 72);
              if (!v259)
              {
                uint64_t v316 = __cxa_allocate_exception(0x40uLL);
                unint64_t v363 = (char *)operator new(0x40uLL);
                long long v364 = xmmword_20B9A90;
                strcpy(v363, "Realtime stop pattern quad data requested on nullptr buffer");
                uint64_t v317 = (void *)sub_2F404((uint64_t)v316, (long long *)&v363);
              }
              unsigned int v260 = (int *)((char *)v259 + *v259);
              uint64_t v261 = (unsigned __int16 *)((char *)v260 - *v260);
              if (*v261 >= 5u && (uint64_t v262 = v261[2]) != 0) {
                long long v263 = (unsigned int *)((char *)v260 + v262 + *(unsigned int *)((char *)v260 + v262));
              }
              else {
                long long v263 = 0;
              }
              unint64_t v257 = (int *)sub_A1139C(v263, v330);
              long long v264 = (unsigned __int16 *)((char *)v257 - *v257);
              if (*v264 < 0x19u) {
                goto LABEL_321;
              }
LABEL_319:
              uint64_t v265 = v264[12];
              if (v265)
              {
                unsigned int v266 = *((unsigned __int8 *)v257 + v265);
                goto LABEL_322;
              }
LABEL_321:
              unsigned int v266 = 2;
LABEL_322:
              int v267 = v254 + v237;
              unsigned int v268 = sub_A2BF38(v266);
              unsigned int v269 = v323;
              if (v323 <= v268) {
                unsigned int v269 = v268;
              }
              int v270 = v357;
              unint64_t v271 = 0xFFFFFFFF00000000;
              if (v355) {
                unint64_t v271 = (unint64_t)v356 << 32;
              }
              unint64_t v272 = (-1431655765 * (((unint64_t)v354 - v353) >> 2)) | v271;
              if (!v355) {
                int v270 = 0x7FFFFFFF;
              }
              int v273 = (unsigned int *)((char *)v348 + *(unsigned __int16 *)((char *)v348 - *v348 + 6));
              int v274 = (char *)v273 + *v273;
              unsigned int v275 = &v357;
              if (!v355) {
                unsigned int v275 = v354;
              }
              int v276 = *v275;
              unint64_t v277 = ((unint64_t)v350 - v349) >> 4;
              int v278 = *(_DWORD *)&v274[8 * (v354[1] + v277) + 4];
              int v279 = *(_DWORD *)&v274[8 * (v354[1] + v277) + 8] + v276;
              int v280 = 10 * (v276 - *(_DWORD *)(v235 + 28) + v278);
              LODWORD(v335) = v277;
              *(void *)((char *)&v335 + 4) = v272;
              HIDWORD(v335) = v270;
              unsigned int v336 = v360;
              uint64_t v337 = v325;
              int v338 = v279;
              int v339 = v327;
              int v340 = v267;
              unsigned int v341 = v269;
              int v342 = (v280 & ~(v280 >> 31)) + v324;
              int v343 = v326;
              unint64_t v344 = v272;
              int v345 = v270;
              LODWORD(v363) = 0;
              if (*(void *)(v4 + 184) == *(void *)(v4 + 144)) {
                goto LABEL_280;
              }
              unint64_t v281 = sub_B1067C((uint64_t)v332, (unsigned int *)&v363);
              if (v281 == -1) {
                goto LABEL_280;
              }
              uint64_t v282 = *(void *)(v4 + 152);
              uint64_t v283 = v282 + 16 * (v281 / 0x30);
              unsigned __int16 v284 = (unsigned __int8 *)(v283 + 10);
              int v285 = v281 % 0x30;
              if ((unsigned __int16)(v281 % 0x30) < 9u)
              {
                __int16 v286 = 0;
                goto LABEL_342;
              }
              __int16 v286 = 0;
              uint64_t v287 = (unsigned __int16)(v281 % 0x30 - 9) >> 3;
              if ((unsigned __int16)(v281 % 0x30 - 9) >> 3)
              {
                __int16 v288 = 0;
                uint64_t v289 = v287 + 1;
                uint64_t v290 = (v287 + 1) & 0x3FFE;
                LOWORD(v287) = v285 - 8 * v290;
                int v291 = &v284[v290];
                int v292 = (unsigned __int8 *)(v282 + 16 * (v281 / 0x30) + 11);
                uint64_t v293 = v290;
                do
                {
                  uint64_t v294 = *(v292 - 1);
                  int v295 = *v292;
                  v292 += 2;
                  v286 += byte_20EC1B6[v294];
                  v288 += byte_20EC1B6[v295];
                  v293 -= 2;
                }
                while (v293);
                v286 += v288;
                if (v289 == v290) {
                  goto LABEL_341;
                }
              }
              else
              {
                LODWORD(v287) = v281 % 0x30;
                int v291 = (unsigned __int8 *)(v283 + 10);
              }
              do
              {
                int v296 = *v291++;
                v286 += byte_20EC1B6[v296];
                LOWORD(v287) = v287 - 8;
              }
              while ((unsigned __int16)v287 > 8u);
LABEL_341:
              v284 += ((unsigned __int16)(v285 - 9) >> 3) + 1;
              LOBYTE(v285) = v287;
LABEL_342:
              uint64_t v297 = *(void *)(v4 + 160);
              unsigned __int16 v298 = v286 + byte_20EC1B6[~(-1 << v285) & (unint64_t)*v284];
              if (*(unsigned __int16 *)(v283 + 8) == v298)
              {
                v283 += 16;
                if (v283 != v297)
                {
                  while (1)
                  {
                    uint64_t v299 = v283;
                    if (*(_WORD *)(v283 + 8)) {
                      break;
                    }
                    v283 += 16;
                    if (v299 + 16 == v297) {
                      goto LABEL_280;
                    }
                  }
                  uint64_t v300 = *(_DWORD **)v283;
                  if (v283 != v297)
                  {
LABEL_350:
                    if (*(void *)(v4 + 144))
                    {
                      while (*(_DWORD *)(v4 + 136) == *v300)
                      {
                        v300 += 3;
                        if (v300 == (_DWORD *)(*(void *)v283 + 12 * *(unsigned __int16 *)(v283 + 8)))
                        {
                          while (1)
                          {
                            v283 += 16;
                            if (v283 == v297) {
                              goto LABEL_280;
                            }
                            if (*(_WORD *)(v283 + 8))
                            {
                              uint64_t v300 = *(_DWORD **)v283;
                              break;
                            }
                          }
                        }
                        if (v283 == v297) {
                          break;
                        }
                      }
                    }
                    if (v283 != v297 && v300[2] != v300[1])
                    {
                      unint64_t result = sub_B119B0((uint64_t)v332, (uint64_t)&v335, 0, 0, 0);
                      if ((result & 0x100) != 0)
                      {
                        LODWORD(v363) = 0;
                        uint64_t v301 = *(void *)(v4 + 192);
                        uint64_t v302 = v301
                             + ((unint64_t)*(unsigned int *)(sub_B1041C((uint64_t)v332, (unsigned int *)&v363) + 4) << 6);
                        LODWORD(v363) = 0;
                        uint64_t v303 = *(void *)(v4 + 192);
                        uint64_t v304 = sub_B1041C((uint64_t)v332, (unsigned int *)&v363);
                        int v305 = (long long *)(v303 + ((unint64_t)*(unsigned int *)(v304 + 8) << 6));
                        if ((long long *)v302 != v305)
                        {
                          while (*(_DWORD *)(v302 + 28) != 0x7FFFFFFF)
                          {
                            v302 += 64;
                            if ((long long *)v302 == v305)
                            {
                              uint64_t v302 = v303 + ((unint64_t)*(unsigned int *)(v304 + 8) << 6);
                              goto LABEL_371;
                            }
                          }
                          if ((long long *)v302 != v305)
                          {
                            for (uint64_t j = (long long *)(v302 + 64); j != v305; j += 4)
                            {
                              if (*((_DWORD *)j + 7) != 0x7FFFFFFF)
                              {
                                long long v307 = *j;
                                long long v308 = j[1];
                                long long v309 = j[3];
                                *(_OWORD *)(v302 + 32) = j[2];
                                *(_OWORD *)(v302 + 48) = v309;
                                *(_OWORD *)uint64_t v302 = v307;
                                *(_OWORD *)(v302 + 16) = v308;
                                v302 += 64;
                              }
                            }
                          }
                        }
LABEL_371:
                        LODWORD(v363) = 0;
                        uint64_t v310 = *(void *)(v4 + 192);
                        uint64_t v311 = sub_B1041C((uint64_t)v332, (unsigned int *)&v363);
                        unint64_t result = (unint64_t)sub_B10058((uint64_t)v332, 0, (char *)v302, (unsigned char *)(v310+ ((unint64_t)*(unsigned int *)(v311 + 8) << 6)));
                      }
                      goto LABEL_281;
                    }
                  }
                }
              }
              else
              {
                uint64_t v300 = (_DWORD *)(*(void *)v283 + 12 * v298);
                if (v283 != v297) {
                  goto LABEL_350;
                }
              }
LABEL_280:
              unint64_t result = sub_B11508((uint64_t)v332, 0, &v335);
LABEL_281:
              ++v234;
            }
            while (v234 != v227);
          }
        }
LABEL_257:
        unint64_t v13 = v349;
        unsigned int v12 = v350 + 2;
        v350 += 2;
        if (*(unsigned char *)(v346 + 16)) {
          BOOL v228 = v347 == 0;
        }
        else {
          BOOL v228 = 0;
        }
        if (v228 && (unint64_t)v12 >= v349 && (unint64_t)v12 < v351)
        {
          do
          {
            unint64_t v231 = __ROR8__(*v12, 32);
            if (HIDWORD(v231) == 1 && (v231 + 3) < 2) {
              break;
            }
            unint64_t result = sub_2AB7E4(**(void **)(v346 + 4120));
            unint64_t v13 = v349;
            unsigned int v12 = v350;
            if (result) {
              break;
            }
            unsigned int v12 = v350 + 2;
            int v350 = v12;
          }
          while ((unint64_t)v12 >= v349 && (unint64_t)v12 < v351);
        }
      }
      uint64_t v7 = v358 + 4;
      char v358 = v7;
    }
    while ((unint64_t)v7 < v359);
  }
  return result;
}

void sub_B13F6C(_Unwind_Exception *a1)
{
}

void sub_B13F84(_Unwind_Exception *a1)
{
}

void sub_B13F9C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 153) < 0) {
    operator delete(*(void **)(v1 - 176));
  }
  _Unwind_Resume(exception_object);
}

void sub_B13FD0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_B13FE4(void *a1, unsigned int a2)
{
  v36[0] = a2;
  sub_B11D38(a1, v36, v32);
  uint64_t v4 = a1[6];
  uint64_t v5 = a1[7];
  uint64_t v23 = a1;
  uint64_t v24 = v4;
  uint64_t v25 = v5;
  uint64_t v26 = v5;
  uint64_t v27 = 0;
  uint64_t v28 = v4;
  uint64_t v29 = v5;
  uint64_t v30 = v5;
  uint64_t v31 = 0;
  unint64_t result = (char *)sub_AE47A0(&v23);
  if (v32[1] == v24 && v33 == v25 && v34 == v26 && (v34 == v33 || v35 == v27)) {
    return result;
  }
  int v7 = *(_DWORD *)(v35 + 4);
  int v8 = *(_DWORD *)(v35 + 8);
  unsigned int v9 = v8 - v7;
  if (v8 == v7) {
    return result;
  }
  char v22 = 0;
  unsigned int v10 = 0;
  unsigned int v11 = 1;
LABEL_6:
  while (2)
  {
    if (v11 <= v9) {
      unsigned int v12 = v9;
    }
    else {
      unsigned int v12 = v11;
    }
    unint64_t result = (char *)sub_B11F04(a1, a2, v10++);
    if (*((_DWORD *)result + 7) != 0x7FFFFFFF && v10 < v9)
    {
      uint64_t v14 = result;
      for (unsigned int i = v10; v12 != i; ++i)
      {
        unint64_t result = (char *)sub_B11F04(a1, a2, i);
        int v16 = *((_DWORD *)result + 7);
        if (v16 != 0x7FFFFFFF)
        {
          int v17 = *((_DWORD *)v14 + 7);
          if (v17 > v16
            || *((_DWORD *)v14 + 8) > *((_DWORD *)result + 8)
            || (unsigned int v18 = *((_DWORD *)result + 9), v19 = *((_DWORD *)v14 + 9), v19 > v18)
            || *((_DWORD *)v14 + 10) > *((_DWORD *)result + 10)
            || v19 == v18 && v17 == v16 && 10 * v17 - *((_DWORD *)v14 + 11) > 10 * v16 - *((_DWORD *)result + 11))
          {
            if (v16 <= v17 && *((_DWORD *)result + 8) <= *((_DWORD *)v14 + 8))
            {
              unsigned int v20 = *((_DWORD *)v14 + 9);
              unsigned int v21 = *((_DWORD *)result + 9);
              if (v21 <= v20
                && *((_DWORD *)result + 10) <= *((_DWORD *)v14 + 10)
                && (v21 != v20 || v16 != v17 || 10 * v16 - *((_DWORD *)result + 11) <= 10 * v17 - *((_DWORD *)v14 + 11)))
              {
                *((_DWORD *)v14 + 7) = 0x7FFFFFFF;
                if (v10 == v9) {
                  return sub_B11C2C((uint64_t)a1, a2);
                }
                char v22 = 1;
                ++v11;
                goto LABEL_6;
              }
            }
          }
          else
          {
            *((_DWORD *)result + 7) = 0x7FFFFFFF;
            char v22 = 1;
          }
        }
      }
    }
    if (v10 != v9)
    {
      ++v11;
      continue;
    }
    break;
  }
  if ((v22 & 1) == 0) {
    return result;
  }
  return sub_B11C2C((uint64_t)a1, a2);
}

BOOL sub_B14254(void *a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  unsigned int v37 = a2;
  sub_B11D38(a1, &v37, v34);
  uint64_t v12 = a1[6];
  uint64_t v13 = a1[7];
  uint64_t v26 = a1;
  *(void *)&long long v27 = v12;
  *((void *)&v27 + 1) = v13;
  uint64_t v28 = v13;
  uint64_t v29 = 0;
  uint64_t v30 = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v13;
  uint64_t v33 = 0;
  sub_AE47A0(&v26);
  if (*(_OWORD *)&v34[8] == v27
    && *(void *)&v34[24] == v28
    && (*(void *)&v34[24] == *(void *)&v34[16] || (void)v35 == v29))
  {
    goto LABEL_7;
  }
  int v14 = *(_DWORD *)(v35 + 4);
  int v15 = *(_DWORD *)(v35 + 8);
  int v16 = v15 - v14;
  if (v15 == v14) {
    goto LABEL_7;
  }
  if (a6 == 0x7FFFFFFF)
  {
    unsigned int v17 = 0;
    do
      sub_B11F04(a1, a2, v17++);
    while (v16 != v17);
LABEL_7:
    LOBYTE(v18) = 0;
    return v18 != 0;
  }
  __int16 v18 = 0;
  unsigned int v20 = 0;
  do
  {
    unsigned int v21 = (_OWORD *)sub_B11F04(a1, a2, v20);
    long long v22 = v21[2];
    long long v23 = v21[3];
    long long v24 = v21[1];
    *(_OWORD *)uint64_t v34 = *v21;
    *(_OWORD *)&v34[16] = v24;
    long long v35 = v22;
    long long v36 = v23;
    if (SHIDWORD(v24) <= a6)
    {
      __int16 v25 = sub_B14414((uint64_t)a1, v34, a3, a4, a5);
      __int16 v18 = v25 | v18 | (v25 | v18) & 0xFF00;
    }
    ++v20;
  }
  while (v16 != v20);
  if ((v18 & 0xFF00) != 0) {
    sub_B11C2C((uint64_t)a1, a3);
  }
  return v18 != 0;
}

unint64_t sub_B14414(uint64_t a1, _DWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  if (a5 != -1)
  {
    unsigned int v38 = a5;
    uint64_t v10 = *(void *)(a1 + 88);
    unsigned int v11 = (_DWORD *)(v10 + ((unint64_t)*(unsigned int *)(sub_B1041C(a1, &v38) + 4) << 6));
    unsigned int v38 = a5;
    uint64_t v12 = *(void *)(a1 + 88);
    uint64_t v13 = (_DWORD *)(v12 + ((unint64_t)*(unsigned int *)(sub_B1041C(a1, &v38) + 8) << 6));
    if (v11 != v13)
    {
      int v14 = a2[7];
      unsigned int v15 = a2[9];
      do
      {
        int v16 = v11[7];
        if (v16 != 0x7FFFFFFF && v16 <= v14 && v11[8] <= a2[8])
        {
          unsigned int v18 = v11[9];
          if (v18 <= v15 && v11[10] <= a2[10])
          {
            BOOL v19 = 10 * v16 - v11[11] > 10 * v14 - a2[11] && v16 == v14;
            if (!v19 || v18 != v15) {
              goto LABEL_39;
            }
          }
        }
        v11 += 16;
      }
      while (v11 != v13);
    }
  }
  unsigned int v38 = a4;
  uint64_t v21 = *(void *)(a1 + 88);
  long long v22 = (_DWORD *)(v21 + ((unint64_t)*(unsigned int *)(sub_B1041C(a1, &v38) + 4) << 6));
  unsigned int v38 = a4;
  uint64_t v23 = *(void *)(a1 + 88);
  long long v24 = (_DWORD *)(v23 + ((unint64_t)*(unsigned int *)(sub_B1041C(a1, &v38) + 8) << 6));
  if (v22 != v24)
  {
    int v25 = a2[7];
    unsigned int v26 = a2[9];
    while (1)
    {
      int v27 = v22[7];
      if (v27 != 0x7FFFFFFF && v27 <= v25 && v22[8] <= a2[8])
      {
        unsigned int v29 = v22[9];
        if (v29 <= v26 && v22[10] <= a2[10])
        {
          BOOL v30 = 10 * v27 - v22[11] > 10 * v25 - a2[11] && v27 == v25;
          if (!v30 || v29 != v26) {
            break;
          }
        }
      }
      v22 += 16;
      if (v22 == v24) {
        goto LABEL_40;
      }
    }
LABEL_39:
    LOBYTE(v32) = 0;
    uint64_t v33 = 0;
    unint64_t v34 = 0;
    return ((unint64_t)v32 << 8) | (v34 << 16) | v33;
  }
LABEL_40:
  unint64_t v35 = sub_B119B0(a1, (uint64_t)a2, a3, 1, 1);
  unint64_t v32 = v35 >> 8;
  unint64_t v34 = v35 >> 16;
  uint64_t v33 = v35;
  if ((_BYTE)v35)
  {
    *(void *)(v36 + 52) = -1;
    *(_DWORD *)(v36 + 60) = 0x7FFFFFFF;
  }
  return ((unint64_t)v32 << 8) | (v34 << 16) | v33;
}

uint64_t sub_B14638(uint64_t a1)
{
  uint64_t v20 = 0;
  long long v19 = 0u;
  memset(v18, 0, sizeof(v18));
  *(_OWORD *)long long __p = 0u;
  memset(v16, 0, sizeof(v16));
  char v22 = 0;
  LOBYTE(v21) = 0;
  sub_C50BD8((char *)__p, &v21);
  if (v22 < 0) {
    operator delete((void *)v21);
  }
  BYTE8(v18[8]) = 0;
  uint64_t v20 = 0;
  long long v19 = 0uLL;
  unint64_t v2 = (void **)(a1 + 136);
  unint64_t v3 = *(void **)(a1 + 136);
  *(_DWORD *)(a1 + 128) = v16[0];
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 144);
    uint64_t v5 = v3;
    if ((void *)v4 != v3)
    {
      do
      {
        v4 -= 296;
        sub_9F5E28(a1 + 152, v4);
      }
      while ((void *)v4 != v3);
      uint64_t v5 = *v2;
    }
    *(void *)(a1 + 144) = v3;
    operator delete(v5);
    *unint64_t v2 = 0;
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
  }
  *(_OWORD *)(a1 + 136) = *(_OWORD *)&v16[1];
  *(void **)(a1 + 152) = v16[3];
  memset(&v16[1], 0, 24);
  uint64_t v6 = (void **)(a1 + 160);
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)uint64_t v6 = *(_OWORD *)__p;
  *(void *)(a1 + 176) = *(void *)&v18[0];
  BYTE7(v18[0]) = 0;
  LOBYTE(__p[0]) = 0;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)((char *)&v18[4] + 8);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)((char *)v18 + 8);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)((char *)&v18[1] + 8);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)((char *)&v18[2] + 8);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)((char *)&v18[3] + 8);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)((char *)&v18[5] + 8);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)((char *)&v18[6] + 8);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)((char *)&v18[7] + 8);
  *(unsigned char *)(a1 + 312) = BYTE8(v18[8]);
  int v7 = *(void **)(a1 + 320);
  if (v7)
  {
    *(void *)(a1 + 328) = v7;
    operator delete(v7);
    *(void *)(a1 + 320) = 0;
    *(void *)(a1 + 328) = 0;
    *(void *)(a1 + 336) = 0;
    int v8 = SBYTE7(v18[0]);
    *(_OWORD *)(a1 + 320) = v19;
    *(void *)(a1 + 336) = v20;
    uint64_t v20 = 0;
    long long v19 = 0uLL;
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)(a1 + 320) = v19;
    *(void *)(a1 + 336) = v20;
    uint64_t v20 = 0;
    long long v19 = 0uLL;
  }
  if (v16[1])
  {
    unsigned int v9 = (char *)v16[2];
    uint64_t v10 = v16[1];
    if (v16[2] != v16[1])
    {
      do
      {
        v9 -= 296;
        sub_9F5E28((uint64_t)&v16[3], (uint64_t)v9);
      }
      while (v9 != v16[1]);
      uint64_t v10 = v16[1];
    }
    v16[2] = v16[1];
    operator delete(v10);
  }
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a1 + 88);
  if (*(void *)(a1 + 384) | *(void *)(a1 + 424))
  {
    for (uint64_t i = *(void *)(a1 + 392); i != *(void *)(a1 + 400); i += 16)
    {
      if (*(void *)i)
      {
        free(*(void **)i);
        *(void *)uint64_t i = 0;
      }
      *(void *)(i + 8) = 0;
    }
    *(void *)(a1 + 424) = 0;
  }
  *(uint64x2_t *)(a1 + 344) = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 360), (float)*(unint64_t *)(a1 + 416))));
  *(unsigned char *)(a1 + 368) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 440) = *(void *)(a1 + 432);
  *(_DWORD *)(a1 + 456) = 0;
  if (*(void *)(a1 + 504) | *(void *)(a1 + 544))
  {
    for (uint64_t j = *(void *)(a1 + 512); j != *(void *)(a1 + 520); j += 16)
    {
      if (*(void *)j)
      {
        free(*(void **)j);
        *(void *)uint64_t j = 0;
      }
      *(void *)(j + 8) = 0;
    }
    *(void *)(a1 + 544) = 0;
  }
  *(uint64x2_t *)(a1 + 464) = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 480), (float)*(unint64_t *)(a1 + 536))));
  *(unsigned char *)(a1 + 488) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 560) = *(void *)(a1 + 552);
  *(_DWORD *)(a1 + 576) = 0;
  *(void *)(a1 + 2016) = 0;
  *(void *)(a1 + 2032) = 0;
  *(void *)(a1 + 2024) = 0;
  int v13 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 1352) = v13;
  *(unsigned char *)(a1 + 1356) = *(unsigned char *)(a1 + 28);
  char v14 = *(unsigned char *)(a1 + 72);
  *(unsigned char *)(a1 + 1357) = v14;
  *(_DWORD *)(a1 + 616) = v13;
  *(unsigned char *)(a1 + 634) = 0;
  *(_DWORD *)(a1 + 636) = 0;
  *(unsigned char *)(a1 + 640) = v14;
  v16[0] = (void *)0x1FFFFFFFELL;
  uint64_t result = sub_AD28B0(a1 + 344, (uint64_t *)v16);
  *(_DWORD *)(a1 + 584) = result;
  return result;
}

void sub_B149AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 - 81) < 0) {
    operator delete(*(void **)(v2 - 104));
  }
  sub_20ADF74(v2 - 104, (uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_B149DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v18 = 0;
  long long v19 = 0;
  unsigned int v15 = 0;
  int v16 = 0;
  uint64_t v24 = 0;
  int v25 = 0;
  sub_ACDFB0((uint64_t)&v26, v2, a1 + 344, a1 + 464, (void *)(a1 + 592), &v18, &v15, &v24);
  unint64_t v3 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)v19;
  if (v19 && !atomic_fetch_add((atomic_ullong *volatile)v19 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v26 = *(void *)(a1 + 8);
  uint64_t v28 = v6;
  int v27 = *(_DWORD *)(a1 + 24);
  char v29 = *(unsigned char *)(a1 + 28);
  char v31 = *(unsigned char *)(a1 + 72);
  int v30 = *(_DWORD *)(a1 + 120);
  sub_AD8EF4((uint64_t)&v26, (_OWORD *)(a1 + 88));
  sub_C50C4C(a1 + 160, (uint64_t)&v32, (uint64_t)&__p);
  if (v23 < 0) {
    operator delete(__p);
  }
  unint64_t v7 = *(void *)(a1 + 2016);
  unint64_t v8 = *(void *)(a1 + 304);
  if (v7 > v8) {
    unint64_t v8 = *(void *)(a1 + 2016);
  }
  *(void *)(a1 + 2016) = v8 + v7;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v18);
    sub_188FC78(&v18, (uint64_t)"Primary SPA scanned ", 20);
    unsigned int v9 = (void *)std::ostream::operator<<();
    sub_188FC78(v9, (uint64_t)" stop patterns and obtained ", 28);
    uint64_t v10 = (void *)std::ostream::operator<<();
    sub_188FC78(v10, (uint64_t)" journeys in ", 13);
    unsigned int v11 = (void *)std::ostream::operator<<();
    uint64_t v12 = sub_188FC78(v11, (uint64_t)" ms using ", 10);
    int v13 = (void *)sub_38EC58((uint64_t)v12, &v33);
    sub_188FC78(v13, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v15, 2u);
    if (v17 < 0) {
      operator delete(v15);
    }
    if (v21 < 0) {
      operator delete(v20);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return sub_9FD504((uint64_t)&v26);
}

void sub_B14D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_9FD504((uint64_t)&a69);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_9FD504((uint64_t)&a69);
  _Unwind_Resume(a1);
}

uint64_t sub_B14DC4(uint64_t a1, int a2)
{
  int v84 = a2;
  *(_DWORD *)(a1 + 616) = a2;
  long long v3 = *(_OWORD *)(a1 + 104);
  v83[0] = *(_OWORD *)(a1 + 88);
  v83[1] = v3;
  LOBYTE(v83[0]) = 0;
  v82[0] = (uint64_t)v83;
  v82[1] = a1;
  v82[2] = (uint64_t)&v84;
  uint64_t v4 = *(_DWORD **)(a1 + 592);
  LODWORD(v78) = (*(_DWORD *)(a1 + 584) << *v4) | (2 * a2) | 1;
  int v5 = *(_DWORD *)(sub_AF1DB0((uint64_t)(v4 + 2), (unsigned int *)&v78) + 4);
  int v6 = v5;
  unint64_t v8 = (_DWORD *)(a1 + 92);
  unsigned int v7 = *(_DWORD *)(a1 + 92);
  unsigned int v85 = v7;
  if (!*(unsigned char *)(a1 + 49)) {
    goto LABEL_71;
  }
  int v9 = 10 * (v7 - v5);
  if (v9 >= *(_DWORD *)(a1 + 52))
  {
    int v10 = sub_B1648C(v82, v5);
    LODWORD(v74[0]) = v10;
    unsigned int v7 = v85;
    if (v10 != 0x7FFFFFFF && v10 < (int)v85)
    {
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)&v78);
        sub_188FC78(&v78, (uint64_t)"[", 1);
        uint64_t v12 = (void *)std::ostream::operator<<();
        int v13 = sub_188FC78(v12, (uint64_t)"] Tightening only improved the journey's departure (arrival) from ", 66);
        char v14 = (void *)sub_266E4((uint64_t)v13);
        unsigned int v15 = sub_188FC78(v14, (uint64_t)" to ", 4);
        sub_266E4((uint64_t)v15);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 2u);
        if (v77 < 0) {
          operator delete(__p[0]);
        }
        if (v81 < 0) {
          operator delete(v80);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      unsigned int v7 = v74[0];
      unsigned int v85 = v74[0];
    }
    if (!*(unsigned char *)(a1 + 49)) {
      goto LABEL_71;
    }
  }
  if (v9 < *(_DWORD *)(a1 + 52)) {
    goto LABEL_71;
  }
  int v71 = v5;
  sub_725D0((uint64_t)__p);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v78);
    sub_188FC78(&v78, (uint64_t)"[", 1);
    int v16 = (void *)std::ostream::operator<<();
    sub_188FC78(v16, (uint64_t)"] Journey duration (", 20);
    char v17 = (void *)std::ostream::operator<<();
    sub_188FC78(v17, (uint64_t)" sec) exceeds tightening threshold; performing tightening by time shift", 71);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v74, 2u);
    if (v75 < 0) {
      operator delete(v74[0]);
    }
    if (v81 < 0) {
      operator delete(v80);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  int v18 = *(_DWORD *)(a1 + 60);
  if (v18 > *(_DWORD *)(a1 + 56)) {
    goto LABEL_70;
  }
  while (1)
  {
    *(double *)(a1 + 272) = *(double *)(a1 + 272) + 1.0;
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v78);
      sub_188FC78(&v78, (uint64_t)"[", 1);
      uint64_t v20 = (void *)std::ostream::operator<<();
      sub_188FC78(v20, (uint64_t)"] Examining time shift of ", 26);
      int v21 = v18 % 10;
      char v22 = (void *)std::ostream::operator<<();
      sub_188FC78(v22, (uint64_t)" sec (exponential search)", 25);
      std::stringbuf::str();
      sub_7246C((uint64_t *)v74, 2u);
      if (v75 < 0) {
        operator delete(v74[0]);
      }
      uint64_t v78 = v73;
      *(uint64_t *)((char *)&v78 + *(void *)(v73 - 24)) = v72;
      if (v81 < 0) {
        operator delete(v80);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    else
    {
      int v21 = v18 % 10;
    }
    char v23 = v18 < 0 ? -5 : 5;
    int v24 = v18 / -10 + v5 + (((-103 * (char)(v23 + v21)) >> 15) & 1) + ((-103 * (char)(v23 + v21)) >> 10);
    unsigned int v25 = sub_B1648C(v82, v24);
    if (*(double *)(a1 + 64) * (double)(int)fabs((double)(int)(10 * (v25 - v85))) >= (double)(int)fabs((double)(10 * (v24 - v5)))) {
      break;
    }
    double v19 = (double)v18 + (double)v18;
    if (v19 >= 0.0)
    {
      if (v19 >= 4.50359963e15) {
        goto LABEL_26;
      }
      uint64_t v26 = (uint64_t)(v19 + v19) + 1;
    }
    else
    {
      if (v19 <= -4.50359963e15) {
        goto LABEL_26;
      }
      uint64_t v26 = (uint64_t)(v19 + v19);
      if (v26 >= 1) {
        --v26;
      }
    }
    double v19 = (double)(v26 >> 1);
LABEL_26:
    int v18 = (int)v19;
    if (*(_DWORD *)(a1 + 56) < (int)v19) {
      goto LABEL_70;
    }
  }
  unsigned int v27 = v25;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v78);
    sub_188FC78(&v78, (uint64_t)"[", 1);
    uint64_t v28 = (void *)std::ostream::operator<<();
    sub_188FC78(v28, (uint64_t)"] Journey duration improved from ", 33);
    char v29 = (void *)std::ostream::operator<<();
    sub_188FC78(v29, (uint64_t)" to ", 4);
    int v30 = (void *)std::ostream::operator<<();
    sub_188FC78(v30, (uint64_t)" sec for time shift of ", 23);
    char v31 = (void *)std::ostream::operator<<();
    sub_188FC78(v31, (uint64_t)" sec", 4);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v74, 2u);
    if (v75 < 0) {
      operator delete(v74[0]);
    }
    uint64_t v78 = v73;
    *(uint64_t *)((char *)&v78 + *(void *)(v73 - 24)) = v72;
    if (v81 < 0) {
      operator delete(v80);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unsigned int v85 = v27;
  if (v24 != v5)
  {
    double v32 = (double)v18 * 0.5;
    if (v32 >= 0.0)
    {
      if (v32 < 4.50359963e15)
      {
        uint64_t v33 = (uint64_t)(v32 + v32) + 1;
        goto LABEL_59;
      }
    }
    else if (v32 > -4.50359963e15)
    {
      uint64_t v33 = (uint64_t)(v32 + v32);
      if (v33 >= 1) {
        --v33;
      }
LABEL_59:
      double v32 = (double)(v33 >> 1);
    }
    double v34 = (double)v18 * 0.25;
    if (v34 >= 0.0)
    {
      if (v34 < 4.50359963e15)
      {
        uint64_t v35 = (uint64_t)(v34 + v34) + 1;
        goto LABEL_67;
      }
    }
    else if (v34 > -4.50359963e15)
    {
      uint64_t v35 = (uint64_t)(v34 + v34);
      if (v35 >= 1) {
        --v35;
      }
LABEL_67:
      double v34 = (double)(v35 >> 1);
    }
    int v36 = (int)v34;
    if (*(_DWORD *)(a1 + 60) > (int)v34)
    {
      int v71 = v24;
      goto LABEL_70;
    }
    int v55 = (int)v32;
    int v71 = v24;
    while (2)
    {
      *(double *)(a1 + 272) = *(double *)(a1 + 272) + 1.0;
      int v57 = v36 + v55;
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)&v78);
        sub_188FC78(&v78, (uint64_t)"[", 1);
        unsigned __int16 v58 = (void *)std::ostream::operator<<();
        sub_188FC78(v58, (uint64_t)"] Examining time shift of ", 26);
        int v59 = v57 % 10;
        unsigned __int16 v60 = (void *)std::ostream::operator<<();
        sub_188FC78(v60, (uint64_t)" sec (binary refinement search)", 31);
        std::stringbuf::str();
        sub_7246C((uint64_t *)v74, 2u);
        int v61 = v71;
        if (v75 < 0) {
          operator delete(v74[0]);
        }
        uint64_t v78 = v73;
        *(uint64_t *)((char *)&v78 + *(void *)(v73 - 24)) = v72;
        if (v81 < 0) {
          operator delete(v80);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      else
      {
        int v59 = v57 % 10;
        int v61 = v71;
      }
      if (v57 < 0) {
        char v62 = -5;
      }
      else {
        char v62 = 5;
      }
      int v63 = v57 / -10 + v5 + (((-103 * (char)(v62 + v59)) >> 15) & 1) + ((-103 * (char)(v62 + v59)) >> 10);
      unsigned int v64 = sub_B1648C(v82, v63);
      if (*(double *)(a1 + 64) * (double)(int)fabs((double)(int)(10 * (v85 - v64))) >= (double)(int)fabs((double)(10 * (v61 - v63))))
      {
        v55 += v36;
        double v56 = (double)v36 * 0.5;
        int v71 = v61;
        if (v56 >= 0.0) {
          goto LABEL_114;
        }
      }
      else
      {
        unsigned int v65 = v64;
        if (sub_723EC(2u))
        {
          sub_6BAC((uint64_t)&v78);
          sub_188FC78(&v78, (uint64_t)"[", 1);
          uint64_t v66 = (void *)std::ostream::operator<<();
          sub_188FC78(v66, (uint64_t)"] Journey duration improved from ", 33);
          uint64_t v67 = (void *)std::ostream::operator<<();
          sub_188FC78(v67, (uint64_t)" to ", 4);
          uint64_t v68 = (void *)std::ostream::operator<<();
          sub_188FC78(v68, (uint64_t)" sec for time shift of ", 23);
          unint64_t v69 = (void *)std::ostream::operator<<();
          sub_188FC78(v69, (uint64_t)" sec", 4);
          std::stringbuf::str();
          sub_7246C((uint64_t *)v74, 2u);
          if (v75 < 0) {
            operator delete(v74[0]);
          }
          uint64_t v78 = v73;
          *(uint64_t *)((char *)&v78 + *(void *)(v73 - 24)) = v72;
          if (v81 < 0) {
            operator delete(v80);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        unsigned int v85 = v65;
        double v56 = (double)v36 * 0.5;
        int v71 = v63;
        if (v56 >= 0.0)
        {
LABEL_114:
          if (v56 < 4.50359963e15)
          {
            uint64_t v70 = (uint64_t)(v56 + v56) + 1;
            goto LABEL_94;
          }
          goto LABEL_95;
        }
      }
      if (v56 > -4.50359963e15)
      {
        uint64_t v70 = (uint64_t)(v56 + v56);
        if (v70 >= 1) {
          --v70;
        }
LABEL_94:
        double v56 = (double)(v70 >> 1);
      }
LABEL_95:
      int v36 = (int)v56;
      if (*(_DWORD *)(a1 + 60) > (int)v56) {
        break;
      }
      continue;
    }
  }
LABEL_70:
  *(double *)(a1 + 208) = sub_72688((uint64_t)__p);
  unsigned int v7 = v85;
  unint64_t v8 = (_DWORD *)(a1 + 92);
  int v6 = v71;
LABEL_71:
  if (v7 != *v8)
  {
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v78);
      sub_188FC78(&v78, (uint64_t)"[", 1);
      unsigned int v37 = (void *)std::ostream::operator<<();
      unsigned int v38 = sub_188FC78(v37, (uint64_t)"] Shifting ", 11);
      int v39 = sub_188FC78(v38, (uint64_t)"arrival", 7);
      int v40 = sub_188FC78(v39, (uint64_t)" time from ", 11);
      long long v41 = (void *)sub_266E4((uint64_t)v40);
      long long v42 = sub_188FC78(v41, (uint64_t)" to ", 4);
      sub_266E4((uint64_t)v42);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 2u);
      if (v77 < 0) {
        operator delete(__p[0]);
      }
      if (v81 < 0) {
        operator delete(v80);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *(void *)(a1 + 280) = 0x3FF0000000000000;
  }
  int v43 = v84;
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_86;
  }
  int v44 = v84 + 1;
  int v45 = *(_DWORD *)(a1 + 24);
  if (v84 + 1 <= (v45 + 1)) {
    int v44 = v45 + 1;
  }
  if (v84 + 1 < (v45 + 1))
  {
    int v46 = v44 - 1;
    int v47 = 2 * v84 + 3;
    int v48 = v84;
    while (1)
    {
      unsigned __int16 v49 = *(_DWORD **)(a1 + 592);
      LODWORD(v78) = (*(_DWORD *)(a1 + 584) << *v49) | v47;
      if (*(_DWORD *)(sub_AF1DB0((uint64_t)(v49 + 2), (unsigned int *)&v78) + 4) != 0x7FFFFFFF) {
        break;
      }
      ++v48;
      v47 += 2;
      if (v46 == v48) {
        goto LABEL_86;
      }
    }
  }
  else
  {
LABEL_86:
    if (*(_DWORD *)(a1 + 24) >= (*(_DWORD *)(a1 + 124) + v43)) {
      int v48 = *(_DWORD *)(a1 + 124) + v43;
    }
    else {
      int v48 = *(_DWORD *)(a1 + 24);
    }
  }
  *(_DWORD *)(a1 + 616) = v48;
  int v50 = *(_DWORD *)(a1 + 120);
  int v51 = v50 / -10;
  int v52 = v50 % 10;
  if (v50 < 0) {
    char v53 = -5;
  }
  else {
    char v53 = 5;
  }
  sub_B1648C(v82, v51 + v6 + (((-103 * (char)(v53 + v52)) >> 15) & 1) + ((-103 * (char)(v53 + v52)) >> 10));
  return v85;
}

void sub_B15F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a22 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a29);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_B160B8(uint64_t a1, int a2, int a3)
{
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_8;
  }
  int v6 = a2 + 1;
  int v7 = *(_DWORD *)(a1 + 24);
  if (a2 + 1 <= (v7 + 1)) {
    int v6 = v7 + 1;
  }
  if (a2 + 1 < (v7 + 1))
  {
    int v8 = v6 - 1;
    int v9 = 2 * a2 + 3;
    int v10 = a2;
    while (1)
    {
      unsigned int v11 = *(_DWORD **)(a1 + 592);
      LODWORD(v26[0]) = (*(_DWORD *)(a1 + 584) << *v11) | v9;
      if (*(_DWORD *)(sub_AF1DB0((uint64_t)(v11 + 2), (unsigned int *)v26) + 4) != 0x7FFFFFFF) {
        break;
      }
      ++v10;
      v9 += 2;
      if (v8 == v10) {
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    if (*(_DWORD *)(a1 + 24) >= (*(_DWORD *)(a1 + 124) + a2)) {
      int v10 = *(_DWORD *)(a1 + 124) + a2;
    }
    else {
      int v10 = *(_DWORD *)(a1 + 24);
    }
  }
  long long v12 = *(_OWORD *)(a1 + 104);
  v38[0] = *(_OWORD *)(a1 + 88);
  v38[1] = v12;
  DWORD1(v38[0]) = a3;
  *(_DWORD *)(a1 + 1352) = v10;
  sub_B16748(a1 + 1336, v38);
  sub_B169EC(a1 + 1336, (uint64_t)v30);
  sub_C50C4C(a1 + 160, a1 + 1864, (uint64_t)&__p);
  if (v29 < 0) {
    operator delete(__p);
  }
  unint64_t v13 = *(void *)(a1 + 2008);
  *(void *)(a1 + 304) -= v13;
  unint64_t v14 = *(void *)(a1 + 2032);
  if (v14 <= v13) {
    unint64_t v14 = v13;
  }
  *(void *)(a1 + 2032) = v14;
  sub_A4D564((uint64_t)v26, (uint64_t)v31, (uint64_t)v32, a1 + 136);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v26);
    sub_188FC78(v26, (uint64_t)"[", 1);
    unsigned int v15 = (void *)std::ostream::operator<<();
    sub_188FC78(v15, (uint64_t)"] McSPA scanned ", 16);
    int v16 = (void *)std::ostream::operator<<();
    sub_188FC78(v16, (uint64_t)" stop patterns and obtained ", 28);
    char v17 = (void *)std::ostream::operator<<();
    sub_188FC78(v17, (uint64_t)" journeys in ", 13);
    int v18 = (void *)std::ostream::operator<<();
    double v19 = sub_188FC78(v18, (uint64_t)" ms using ", 10);
    uint64_t v20 = (void *)sub_38EC58((uint64_t)v19, (unint64_t *)(a1 + 2008));
    sub_188FC78(v20, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v24, 2u);
    if (v25 < 0) {
      operator delete(v24);
    }
    if (v27 < 0) {
      operator delete((void *)v26[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (v36)
  {
    unsigned int v37 = v36;
    operator delete(v36);
  }
  if (v35 < 0) {
    operator delete(v34);
  }
  int v21 = (char *)v31;
  if (v31)
  {
    char v22 = v32;
    char v23 = v31;
    if (v32 != v31)
    {
      do
      {
        v22 -= 296;
        sub_9F5E28((uint64_t)&v33, (uint64_t)v22);
      }
      while (v22 != v21);
      char v23 = v31;
    }
    double v32 = v21;
    operator delete(v23);
  }
}

void sub_B16410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_9F53E0((uint64_t)&a67);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_9F53E0((uint64_t)&a67);
  _Unwind_Resume(a1);
}

uint64_t sub_B1648C(uint64_t *a1, int a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  *(_DWORD *)(v2 + 4) = a2;
  sub_AD3BC4(v3 + 608, (_OWORD *)v2);
  sub_C50C4C(v3 + 160, v3 + 1184, (uint64_t)&v20);
  if (v21 < 0) {
    operator delete(v20);
  }
  unint64_t v4 = *(void *)(v3 + 1328);
  *(void *)(v3 + 304) -= v4;
  unint64_t v5 = *(void *)(v3 + 2024);
  if (v5 <= v4) {
    unint64_t v5 = v4;
  }
  *(void *)(v3 + 2024) = v5;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v18);
    sub_188FC78(v18, (uint64_t)"[", 1);
    int v6 = (void *)std::ostream::operator<<();
    sub_188FC78(v6, (uint64_t)"] Secondary SPA scanned ", 24);
    int v7 = (void *)std::ostream::operator<<();
    sub_188FC78(v7, (uint64_t)" stop patterns and obtained ", 28);
    int v8 = (void *)std::ostream::operator<<();
    sub_188FC78(v8, (uint64_t)" journeys in ", 13);
    int v9 = (void *)std::ostream::operator<<();
    int v10 = sub_188FC78(v9, (uint64_t)" ms using ", 10);
    unsigned int v11 = (void *)sub_38EC58((uint64_t)v10, (unint64_t *)(v3 + 1328));
    sub_188FC78(v11, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (v17 < 0) {
      operator delete(__p);
    }
    if (v19 < 0) {
      operator delete((void *)v18[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unint64_t v12 = *(unsigned int *)(v3 + 1040);
  uint64_t v13 = *(void *)(v3 + 800);
  unint64_t v14 = (*(void *)(v3 + 808) - v13) >> 2;
  if (v14 <= v12)
  {
    sub_5BBEE0(v3 + 800, v12 - v14 + 1);
    uint64_t v13 = *(void *)(v3 + 800);
  }
  return *(unsigned int *)(v13 + 4 * v12);
}

void sub_B166FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_B16748(uint64_t a1, _OWORD *a2)
{
  sub_725D0((uint64_t)v36);
  long long v4 = a2[1];
  *(_OWORD *)(a1 + 64) = *a2;
  *(_OWORD *)(a1 + 80) = v4;
  sub_B18F80(a1);
  uint64_t v5 = *(void *)(a1 + 32);
  v37[0] = 0x1FFFFFFFELL;
  *(_DWORD *)(a1 + 416) = sub_AD28B0(v5, v37);
  sub_B191D8(a1);
  if (*(_DWORD *)(a1 + 100) >= 2u)
  {
    uint64_t v6 = 1;
    while (1)
    {
      if (v6)
      {
        char v17 = *(unsigned int **)(a1 + 320);
        int v18 = *(unsigned int **)(a1 + 328);
        if (v17 != v18)
        {
          uint64_t v19 = *(void *)(a1 + 296);
          uint64_t v20 = *(unsigned int **)(a1 + 320);
          do
          {
            unsigned int v21 = *v20++;
            *(void *)(v19 + (((unint64_t)v21 >> 3) & 0x1FFFFFF8)) &= ~(1 << v21);
          }
          while (v20 != v18);
        }
        *(void *)(a1 + 328) = v17;
        sub_B19344(a1, v6);
        sub_B19600(a1, v6);
        uint64_t v16 = *(void *)(a1 + 320);
        if (v16 == *(void *)(a1 + 328)) {
          goto LABEL_22;
        }
        uint64_t v15 = *(void *)(a1 + 272);
      }
      else
      {
        int v7 = *(unsigned int **)(a1 + 272);
        int v8 = *(unsigned int **)(a1 + 280);
        if (v7 != v8)
        {
          uint64_t v9 = *(void *)(a1 + 248);
          int v10 = *(unsigned int **)(a1 + 272);
          do
          {
            unsigned int v11 = *v10++;
            *(void *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) &= ~(1 << v11);
          }
          while (v10 != v8);
        }
        *(void *)(a1 + 280) = v7;
        sub_AEDE40((void *)a1);
        sub_725D0((uint64_t)v37);
        unint64_t v12 = *(unsigned int **)(a1 + 392);
        uint64_t v13 = *(unsigned int **)(a1 + 400);
        while (v12 != v13)
        {
          unsigned int v14 = *v12++;
          sub_B1B57C(a1, v6, v14);
        }
        *(double *)(a1 + 560) = sub_72688((uint64_t)v37) + *(double *)(a1 + 560);
        uint64_t v15 = *(void *)(a1 + 272);
        if (v15 == *(void *)(a1 + 280)) {
          goto LABEL_22;
        }
        uint64_t v16 = *(void *)(a1 + 320);
      }
      uint64_t v34 = *(void *)(a1 + 208);
      uint64_t v35 = *(void *)(a1 + 176);
      uint64_t v32 = 8 * (*(void *)(a1 + 232) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v33 = *(void *)(a1 + 192);
      uint64_t v22 = *(void *)(a1 + 288);
      uint64_t v23 = 8 * (*(void *)(a1 + 312) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v24 = *(void *)(a1 + 360);
      uint64_t v25 = *(void *)(a1 + 336);
      uint64_t v30 = *(void *)(a1 + 344);
      uint64_t v31 = 8 * (*(void *)(a1 + 264) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v29 = *(void *)(a1 + 392);
      uint64_t v26 = 8 * (*(void *)(a1 + 384) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v27 = *(void *)(a1 + 408);
      unint64_t v28 = v34
          + 12 * v35
          - v33
          + v32
          + v22
          + v31
          - v15
          + v25
          + v23
          + v24
          - (v16
           + v30)
          + v26
          + v27
          - v29
          + sub_BD6170((void *)(a1 + 424))
          + 680;
      if (*(void *)(a1 + 672) > v28) {
        unint64_t v28 = *(void *)(a1 + 672);
      }
      *(void *)(a1 + 672) = v28;
      if (!sub_B0F8D4(a1) && ++v6 < (unint64_t)*(unsigned int *)(a1 + 100)) {
        continue;
      }
      goto LABEL_22;
    }
  }
  LODWORD(v6) = 1;
LABEL_22:
  sub_B1AC04(a1);
  *(double *)(a1 + 600) = (double)v6;
  *(double *)(a1 + 552) = sub_72688((uint64_t)v36);
}

std::string *sub_B169EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0;
  unint64_t v330 = (uint64_t *)(a2 + 8);
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  HIBYTE(v364) = 0;
  LOBYTE(__p[0]) = 0;
  int v328 = (std::string *)(a2 + 32);
  sub_C50BD8((char *)(a2 + 32), (long long *)__p);
  if (SHIBYTE(v364) < 0) {
    operator delete(*(void **)__p);
  }
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  *(unsigned char *)(a2 + 184) = *(unsigned char *)(a1 + 64);
  unsigned int v3 = *(_DWORD *)(a1 + 100);
  if (v3 <= 1) {
    int v4 = 1;
  }
  else {
    int v4 = *(_DWORD *)(a1 + 100);
  }
  int v329 = v4;
  if (v3 >= 2)
  {
    uint64_t v6 = (void *)(a1 + 104);
    __asm { FMOV            V0.2D, #1.0 }
    long long v332 = _Q0;
    int v331 = 1;
    uint64_t v336 = a1 + 104;
    uint64_t v337 = a1;
    while (1)
    {
      __p[0] = 0;
      uint64_t v10 = *(void *)(a1 + 192);
      uint64_t v11 = *(unsigned int *)(sub_B1041C((uint64_t)v6, __p) + 4);
      __p[0] = 0;
      uint64_t v12 = *(void *)(a1 + 192);
      uint64_t v13 = sub_B1041C((uint64_t)v6, __p);
      sub_B10058((uint64_t)v6, 0, (char *)(v10 + (v11 << 6)), (unsigned char *)(v12 + ((unint64_t)*(unsigned int *)(v13 + 8) << 6)));
      sub_B1B428(v6, v331 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * *(_DWORD *)(a1 + 416) + 2, 0);
      __p[0] = 0;
      uint64_t v14 = *(void *)(a1 + 192);
      uint64_t v15 = *(unsigned int *)(sub_B1041C((uint64_t)v6, __p) + 4);
      __p[0] = 0;
      uint64_t v16 = *(void *)(a1 + 192);
      long long v335 = (unsigned int *)(v14 + (v15 << 6));
      uint64_t v333 = (unsigned int *)(v16 + ((unint64_t)*(unsigned int *)(sub_B1041C((uint64_t)v6, __p) + 8) << 6));
      if (v335 != v333) {
        break;
      }
LABEL_9:
      ++v331;
      uint64_t v6 = (void *)v336;
      if (v331 == v329) {
        goto LABEL_7;
      }
    }
    while (1)
    {
      LOWORD(__p[0]) = 0;
      BYTE2(__p[0]) = 0;
      *(void *)&__p[1] = 0;
      *(void *)&__p[3] = 0x7FFFFFFFFFFFFFFFLL;
      int v364 = 0x7FFFFFFF;
      __int16 v365 = 0;
      unint64_t v366 = 0x8000000080000000;
      __int16 v367 = 0;
      unint64_t v368 = 0x8000000080000000;
      int v369 = 0x7FFFFFFF;
      __int16 v370 = 0;
      unint64_t v371 = 0x8000000080000000;
      __int16 v372 = 0;
      unint64_t v373 = 0x8000000080000000;
      __int16 v374 = 0;
      unint64_t v375 = 0xFFFFFFFF00000000;
      int v376 = -1;
      uint64_t v377 = 0;
      unint64_t v379 = 0;
      uint64_t v380 = 0;
      uint64_t v381 = 0;
      int v378 = 0x7FFFFFFF;
      int v382 = 100;
      int v383 = -1;
      long long v384 = v332;
      long long v385 = v332;
      long long v386 = v332;
      long long v387 = 0u;
      long long v388 = 0u;
      long long v389 = 0u;
      long long v390 = 0u;
      uint64_t v17 = *(void *)(a1 + 24);
      long long v391 = 0u;
      long long v392 = 0u;
      if (!sub_C259C0(v17 + 3896)) {
        goto LABEL_16;
      }
      if (*(void *)(v17 + 3944))
      {
        BOOL v18 = 1;
      }
      else
      {
LABEL_16:
        uint64_t v19 = *(void *)(a1 + 24);
        BOOL v18 = sub_C259D4(v19 + 3896) && *(void *)(v19 + 3960) != 0;
      }
      BYTE1(__p[0]) = v18;
      uint64_t v20 = *(void *)(a1 + 24);
      if (!sub_C259D4(v20 + 3896)) {
        break;
      }
      __p[1] = 2 * (*(void *)(v20 + 3960) != 0);
      if (*v335 != -1) {
        goto LABEL_23;
      }
LABEL_390:
      sub_A29D50((uint64_t)__p);
      unint64_t v303 = *(void *)(a2 + 16);
      if (v303 < *(void *)(a2 + 24))
      {
        sub_9F68D4(*(void *)(a2 + 16), (long long *)__p);
        *(void *)(a2 + 16) = v303 + 296;
        *(void *)(a2 + 16) = v303 + 296;
        uint64_t v304 = (void *)*((void *)&v391 + 1);
        if (!*((void *)&v391 + 1)) {
          goto LABEL_395;
        }
LABEL_394:
        *(void *)&long long v392 = v304;
        operator delete(v304);
        goto LABEL_395;
      }
      *(void *)(a2 + 16) = sub_A4D268(v330, (long long *)__p);
      uint64_t v304 = (void *)*((void *)&v391 + 1);
      if (*((void *)&v391 + 1)) {
        goto LABEL_394;
      }
LABEL_395:
      if ((void)v390)
      {
        *((void *)&v390 + 1) = v390;
        operator delete((void *)v390);
      }
      if (*((void *)&v388 + 1))
      {
        *(void *)&long long v389 = *((void *)&v388 + 1);
        operator delete(*((void **)&v388 + 1));
      }
      int v305 = (void **)v387;
      if ((void)v387)
      {
        uint64_t v306 = *((void *)&v387 + 1);
        long long v307 = (void *)v387;
        if (*((void *)&v387 + 1) != (void)v387)
        {
          do
          {
            long long v309 = *(void **)(v306 - 40);
            if (v309)
            {
              *(void *)(v306 - 32) = v309;
              operator delete(v309);
            }
            uint64_t v310 = (void **)(v306 - 72);
            uint64_t v311 = *(void *)(v306 - 72);
            if (v311)
            {
              uint64_t v312 = *(void *)(v306 - 64);
              long long v308 = *(void **)(v306 - 72);
              if (v312 != v311)
              {
                do
                {
                  if (!*(_DWORD *)(v312 - 8))
                  {
                    int v313 = *(void **)(v312 - 48);
                    if (v313)
                    {
                      *(void *)(v312 - 40) = v313;
                      operator delete(v313);
                    }
                    int v314 = *(void **)(v312 - 80);
                    if (v314)
                    {
                      *(void *)(v312 - 72) = v314;
                      operator delete(v314);
                    }
                    int v315 = *(void **)(v312 - 104);
                    if (v315)
                    {
                      *(void *)(v312 - 96) = v315;
                      operator delete(v315);
                    }
                  }
                  v312 -= 168;
                }
                while (v312 != v311);
                long long v308 = *v310;
              }
              *(void *)(v306 - 64) = v311;
              operator delete(v308);
            }
            v306 -= 72;
          }
          while (v310 != v305);
          long long v307 = (void *)v387;
        }
        *((void *)&v387 + 1) = v305;
        operator delete(v307);
      }
      if (SHIBYTE(v381) < 0) {
        operator delete(v379);
      }
      v335 += 16;
      if (v335 == v333) {
        goto LABEL_9;
      }
    }
    __p[1] = 0;
    if (*v335 == -1) {
      goto LABEL_390;
    }
LABEL_23:
    unsigned int v21 = *(_DWORD *)(a1 + 416);
    uint64_t v22 = v335;
    int v338 = v331;
LABEL_27:
    unsigned __int8 v355 = 0;
    unsigned int v356 = 0;
    unint64_t v357 = 0;
    unsigned int v360 = 0;
    uint64_t v361 = 0;
    unint64_t v359 = 0;
    v362[0] = 1;
    *(void *)&v362[4] = 0x8000000080000000;
    *(_WORD *)&v362[12] = 0;
    v362[14] = 0;
    int v415 = -1;
    if (v22[4] == -1)
    {
LABEL_275:
      char v358 = 1;
      unsigned int v239 = v22[7];
      unsigned int v240 = v22[3];
      uint64_t v241 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), v21);
      uint64_t v242 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), *v22);
      *(_DWORD *)long long v395 = 0;
      *(_DWORD *)&v395[4] = v239;
      *(void *)&v395[12] = v241;
      *(void *)&v395[20] = v242;
      *(_DWORD *)&v395[8] = v240;
      int v404 = 1;
      if (v415)
      {
        if (v415 == 1)
        {
          *(_OWORD *)v405 = *(_OWORD *)v395;
          *(_OWORD *)&v405[12] = *(_OWORD *)&v395[12];
          goto LABEL_287;
        }
LABEL_286:
        *(_OWORD *)v405 = *(_OWORD *)v395;
        *(_OWORD *)&v405[12] = *(_OWORD *)&v395[12];
        int v415 = 1;
      }
      else
      {
        if ((void)v412)
        {
          *((void *)&v412 + 1) = v412;
          operator delete((void *)v412);
        }
        if ((void)v409)
        {
          *((void *)&v409 + 1) = v409;
          operator delete((void *)v409);
        }
        if (v407[0])
        {
          v407[1] = v407[0];
          operator delete(v407[0]);
        }
        if (v404)
        {
          if (v404 == 1) {
            goto LABEL_286;
          }
          int v415 = v404;
        }
        else
        {
          sub_9F6FA0((uint64_t)v405, (long long *)v395);
          int v415 = v404;
          if (!v404)
          {
            if ((void)v401)
            {
              *((void *)&v401 + 1) = v401;
              operator delete((void *)v401);
            }
            if (v399[0])
            {
              v399[1] = v399[0];
              operator delete(v399[0]);
            }
            if ((void)v397)
            {
              *((void *)&v397 + 1) = v397;
              operator delete((void *)v397);
            }
          }
        }
      }
LABEL_287:
      unsigned int v21 = *v22;
      uint64_t v236 = (uint64_t)v356;
      if ((unint64_t)v356 >= v357) {
        goto LABEL_288;
      }
LABEL_270:
      *(_DWORD *)(v236 + 160) = v415;
      if (v415 == 1)
      {
        long long v270 = *(_OWORD *)v405;
        *(_OWORD *)(v236 + 12) = *(_OWORD *)&v405[12];
        *(_OWORD *)uint64_t v236 = v270;
        unsigned int v356 = (char *)(v236 + 168);
        uint64_t v237 = *((void *)&v387 + 1);
        if (*((void *)&v387 + 1) < (unint64_t)v388) {
          goto LABEL_289;
        }
      }
      else
      {
        if (!v415) {
          sub_9F6FA0(v236, (long long *)v405);
        }
        unsigned int v356 = (char *)(v236 + 168);
        uint64_t v237 = *((void *)&v387 + 1);
        if (*((void *)&v387 + 1) < (unint64_t)v388) {
          goto LABEL_289;
        }
      }
LABEL_274:
      uint64_t v238 = sub_A4CECC((void ***)&v387, (uint64_t)&v355);
      goto LABEL_302;
    }
    long long v339 = xmmword_20E12E0;
    __int16 v340 = 0;
    unint64_t v341 = 0x8000000080000000;
    __int16 v342 = 0;
    *(_OWORD *)int v343 = xmmword_20EB6B0;
    *(void *)&v343[16] = 0xFFFFFFFF7FFFFFFFLL;
    long long v345 = 0u;
    long long v346 = 0u;
    long long v347 = 0u;
    int v344 = -1;
    int v348 = 0x7FFFFFFF;
    int v350 = 0;
    uint64_t v351 = 0;
    unint64_t v349 = 0;
    char v352 = 1;
    unint64_t v353 = 0x8000000080000000;
    int v354 = 0;
    char v358 = 0;
    uint64_t v24 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 40) + 88), v22[4]);
    *(void *)int v343 = v24;
    uint64_t v25 = *(void *)(v22 + 1);
    *(_DWORD *)&v343[16] = v22[3];
    *(void *)&v343[8] = v25;
    int v344 = *v22;
    unsigned int v26 = v344;
    uint64_t v27 = *(void *)(a1 + 24);
    unint64_t v393 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), v21);
    sub_A1E9A0((uint64_t)v395, v27, v24, v26, 0, 0);
    *(void *)&long long v397 = *(void *)&v396[24] + 12 * *(unsigned int *)&v343[8];
    if (LOBYTE(v399[1])) {
      *(void **)((char *)&v399[1] + 4) = *(void **)&v343[12];
    }
    if (*(void *)&v396[16]) {
      uint64_t v28 = *(unsigned int *)(*(void *)&v396[16] + 4 * ((*(void *)v396 - *(void *)&v395[24]) >> 4));
    }
    else {
      uint64_t v28 = 0;
    }
    sub_A56ED0((uint64_t)v395, &v393, v28);
    _CF = *(void *)v396 < *(void *)&v396[8] && *(void *)v396 >= *(void *)&v395[24];
    uint64_t v30 = (*(void *)v396 - *(void *)&v395[24]) >> 4;
    if (!_CF) {
      LODWORD(v30) = -1;
    }
    *(_DWORD *)&v343[20] = v30;
    uint64_t v31 = *(void *)(a1 + 32);
    uint64_t v32 = (void *)(*(void *)(a1 + 24) + 4136);
    unint64_t v33 = *(void *)v343;
    unsigned int v34 = v344;
    uint64_t v35 = HIDWORD(*(void *)v343);
    if (sub_A10E20(v32, *(int *)&v343[4]))
    {
      int v36 = (int *)sub_A1120C(*(void *)(*v32 + 3944), v33);
    }
    else
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_24F7308))
      {
        sub_518C8(0x3B60u, 0x7FCAu);
        dword_24F7300 = v299 | 0x40000000;
        __cxa_guard_release(&qword_24F7308);
      }
      uint64_t v37 = *v32;
      if (dword_24F7300 == v35)
      {
        unsigned int v38 = *(unsigned int **)(*(void *)(v37 + 3976) + 72);
        if (!v38)
        {
          exception = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(v395, "Realtime stop pattern quad data requested on nullptr buffer");
          uint64_t v325 = (void *)sub_2F404((uint64_t)exception, (long long *)v395);
        }
        int v39 = (int *)((char *)v38 + *v38);
        int v40 = (unsigned __int16 *)((char *)v39 - *v39);
        if (*v40 >= 5u && (uint64_t v41 = v40[2]) != 0) {
          long long v42 = (unsigned int *)((char *)v39 + v41 + *(unsigned int *)((char *)v39 + v41));
        }
        else {
          long long v42 = 0;
        }
        int v36 = (int *)sub_A1139C(v42, v33);
      }
      else
      {
        int v36 = (int *)sub_A11500(v37 + 24, v33, 0, "stop pattern");
      }
    }
    int v43 = (unsigned __int16 *)((char *)v36 - *v36);
    if (*v43 >= 9u && (uint64_t v44 = v43[4]) != 0) {
      int v45 = (unsigned int *)((char *)v36 + v44 + *(unsigned int *)((char *)v36 + v44));
    }
    else {
      int v45 = 0;
    }
    int v46 = (void *)sub_A10764(v45, v34);
    uint64_t v47 = 0;
    unint64_t v48 = __ROR8__(*v46, 32);
    uint64_t v49 = *(void *)(v31 + 72) - 1;
    unint64_t v50 = 0xC4CEB9FE1A85EC53
        * ((0xFF51AFD7ED558CCDLL * (v48 ^ (v48 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v48 ^ (v48 >> 33))) >> 33));
    unint64_t v51 = v50 ^ (v50 >> 33);
    uint64_t v52 = *(void *)(v31 + 48);
    uint64_t v53 = v52 + 11;
    uint64_t v54 = -1;
    for (unint64_t i = v51; ; unint64_t i = v47 + v56)
    {
      uint64_t v56 = i & v49;
      unint64_t v57 = i & v49;
      unint64_t v58 = (i & v49) / 0x30;
      unint64_t v59 = v57 % 0x30;
      if (((*(unsigned __int8 *)(v52 + 16 * (v57 / 0x30) + ((v57 % 0x30) >> 3) + 10) >> ((v57 % 0x30) & 7)) & 1) == 0)
      {
        if (v54 == -1) {
          unint64_t v93 = v56;
        }
        else {
          unint64_t v93 = v54;
        }
        goto LABEL_94;
      }
      uint64_t v60 = *(void *)(v52 + 16 * v58);
      if (!*(void *)(v31 + 40)) {
        goto LABEL_73;
      }
      int v61 = (unsigned __int8 *)(v52 + 16 * v58 + 10);
      if ((unsigned __int16)(v57 % 0x30) < 9u)
      {
        __int16 v62 = 0;
        unint64_t v63 = v57 % 0x30;
        goto LABEL_69;
      }
      __int16 v62 = 0;
      unint64_t v63 = (unsigned __int16)(v56 - 48 * v58 - 9) >> 3;
      if ((unsigned __int16)(v56 - 48 * v58 - 9) >> 3)
      {
        __int16 v64 = 0;
        unint64_t v65 = v63 + 1;
        uint64_t v66 = (v63 + 1) & 0x3FFE;
        LOWORD(v63) = v59 - 8 * v66;
        uint64_t v67 = &v61[v66];
        uint64_t v68 = (unsigned __int8 *)(v53 + 16 * v58);
        uint64_t v69 = v66;
        do
        {
          uint64_t v70 = *(v68 - 1);
          int v71 = *v68;
          v68 += 2;
          v62 += byte_20EBFB6[v70];
          v64 += byte_20EBFB6[v71];
          v69 -= 2;
        }
        while (v69);
        v62 += v64;
        if (v65 == v66) {
          goto LABEL_68;
        }
      }
      else
      {
        unint64_t v63 = v57 % 0x30;
        uint64_t v67 = (unsigned __int8 *)(v52 + 16 * v58 + 10);
      }
      do
      {
        int v72 = *v67++;
        v62 += byte_20EBFB6[v72];
        LOWORD(v63) = v63 - 8;
      }
      while ((unsigned __int16)v63 > 8u);
LABEL_68:
      v61 += ((unsigned __int16)(v59 - 9) >> 3) + 1;
LABEL_69:
      uint64_t v73 = (_DWORD *)(v60
                     + 12
                     * (unsigned __int16)(v62 + byte_20EBFB6[~(-1 << v63) & (unint64_t)*v61]));
      if (*(_DWORD *)(v31 + 36) == v73[1] && *(_DWORD *)(v31 + 32) == *v73)
      {
        if (v54 == -1) {
          uint64_t v54 = v56;
        }
        goto LABEL_56;
      }
LABEL_73:
      char v75 = (unsigned __int8 *)(v52 + 16 * v58 + 10);
      if ((unsigned __int16)(v57 % 0x30) < 9u)
      {
        __int16 v76 = 0;
        uint64_t v86 = (unsigned __int8 *)(v52 + 16 * v58 + 10);
        unint64_t v77 = v57 % 0x30;
        goto LABEL_83;
      }
      __int16 v76 = 0;
      unint64_t v77 = (unsigned __int16)(v56 - 48 * v58 - 9) >> 3;
      if ((unsigned __int16)(v56 - 48 * v58 - 9) >> 3)
      {
        __int16 v78 = 0;
        unint64_t v79 = v77 + 1;
        uint64_t v80 = (v77 + 1) & 0x3FFE;
        LOWORD(v77) = v59 - 8 * v80;
        char v81 = &v75[v80];
        uint64_t v82 = (unsigned __int8 *)(v53 + 16 * v58);
        uint64_t v83 = v80;
        do
        {
          uint64_t v84 = *(v82 - 1);
          int v85 = *v82;
          v82 += 2;
          v76 += byte_20EBFB6[v84];
          v78 += byte_20EBFB6[v85];
          v83 -= 2;
        }
        while (v83);
        v76 += v78;
        if (v79 == v80) {
          goto LABEL_82;
        }
      }
      else
      {
        unint64_t v77 = v57 % 0x30;
        char v81 = (unsigned __int8 *)(v52 + 16 * v58 + 10);
      }
      do
      {
        int v87 = *v81++;
        v76 += byte_20EBFB6[v87];
        LOWORD(v77) = v77 - 8;
      }
      while ((unsigned __int16)v77 > 8u);
LABEL_82:
      uint64_t v86 = &v75[((unsigned __int16)(v59 - 9) >> 3) + 1];
LABEL_83:
      if (v48 == *(void *)(v60
                            + 12
                            * (unsigned __int16)(v76 + byte_20EBFB6[~(-1 << v77) & (unint64_t)*v86])))
      {
        if (v56 != -1)
        {
          if ((unsigned __int16)(v57 % 0x30) < 9u)
          {
            __int16 v90 = 0;
          }
          else
          {
            if ((((_WORD)v56 - 48 * (_WORD)v58 - 8) & 0xFFF8) != 0) {
              __int16 v88 = 8;
            }
            else {
              __int16 v88 = v56 - 48 * v58 - 8;
            }
            unsigned __int16 v89 = ~v88 + v56 - 48 * v58;
            if (v89 < 8u)
            {
              __int16 v90 = 0;
              unint64_t v91 = v57 % 0x30;
              uint64_t v92 = (unsigned __int8 *)(v52 + 16 * v58 + 10);
              goto LABEL_339;
            }
            __int16 v271 = 0;
            __int16 v272 = 0;
            uint64_t v273 = (v89 >> 3) + 1;
            LOWORD(v91) = v59 - 8 * (((v89 >> 3) + 1) & 0x3FFE);
            uint64_t v92 = &v75[v273 & 0x3FFE];
            int v274 = (unsigned __int8 *)(v52 + 16 * v58 + 11);
            uint64_t v275 = v273 & 0x3FFE;
            do
            {
              uint64_t v276 = *(v274 - 1);
              int v277 = *v274;
              v274 += 2;
              v271 += byte_20EBFB6[v276];
              v272 += byte_20EBFB6[v277];
              v275 -= 2;
            }
            while (v275);
            __int16 v90 = v272 + v271;
            if ((v273 & 0x3FFE) != v273)
            {
              do
              {
LABEL_339:
                int v278 = *v92++;
                v90 += byte_20EBFB6[v278];
                LOWORD(v91) = v91 - 8;
              }
              while ((unsigned __int16)v91 > 8u);
            }
            v75 += ((unsigned __int16)(v59 - 9) >> 3) + 1;
            LOBYTE(v59) = v91;
          }
          uint64_t v279 = *(void *)(v31 + 56);
          unsigned __int16 v280 = v90 + byte_20EBFB6[~(-1 << v59) & (unint64_t)*v75];
          uint64_t v281 = v52 + 16 * v58;
          if (*(unsigned __int16 *)(v281 + 8) != v280 || v281 + 16 == v279)
          {
            unint64_t v138 = (_DWORD *)(v60 + 12 * v280);
          }
          else
          {
            uint64_t v283 = v281 + 32;
            do
            {
              if (*(_WORD *)(v283 - 8)) {
                BOOL v284 = 1;
              }
              else {
                BOOL v284 = v283 == v279;
              }
              v283 += 16;
            }
            while (!v284);
            unint64_t v138 = *(_DWORD **)(v283 - 32);
          }
          goto LABEL_139;
        }
        unint64_t v93 = -1;
LABEL_94:
        if (!sub_AD2F40(v31, 1))
        {
          unint64_t v393 = v48;
          int v394 = -1;
          sub_AD3484(v31, (uint64_t *)&v393, v93, v395);
LABEL_138:
          unint64_t v138 = *(_DWORD **)v396;
          goto LABEL_139;
        }
        uint64_t v94 = 0;
        unint64_t v393 = v48;
        int v394 = -1;
        uint64_t v95 = *(void *)(v31 + 72) - 1;
        uint64_t v96 = *(void *)(v31 + 48);
        uint64_t v97 = v96 + 11;
        uint64_t v98 = -1;
        while (2)
        {
          uint64_t v99 = v51 & v95;
          unint64_t v100 = (v51 & v95) / 0x30;
          unint64_t v101 = (v51 & v95) % 0x30;
          if (((*(unsigned __int8 *)(v96 + 16 * v100 + (v101 >> 3) + 10) >> (v101 & 7)) & 1) == 0)
          {
            if (v98 == -1) {
              unint64_t v137 = v51 & v95;
            }
            else {
              unint64_t v137 = v98;
            }
            goto LABEL_137;
          }
          uint64_t v102 = *(void *)(v31 + 40);
          uint64_t v103 = *(void *)(v96 + 16 * v100);
          if (!v102) {
            break;
          }
          unsigned int v104 = (unsigned __int8 *)(v96 + 16 * v100 + 10);
          if ((unsigned __int16)((v51 & v95) % 0x30) < 9u)
          {
            __int16 v105 = 0;
            unint64_t v106 = (v51 & v95) % 0x30;
            goto LABEL_111;
          }
          __int16 v105 = 0;
          unint64_t v106 = (unsigned __int16)(v99 - 48 * v100 - 9) >> 3;
          if (!((unsigned __int16)(v99 - 48 * v100 - 9) >> 3))
          {
            unint64_t v106 = (v51 & v95) % 0x30;
            uint64_t v110 = (unsigned __int8 *)(v96 + 16 * v100 + 10);
            do
            {
LABEL_109:
              int v115 = *v110++;
              v105 += byte_20EBFB6[v115];
              LOWORD(v106) = v106 - 8;
            }
            while ((unsigned __int16)v106 > 8u);
            goto LABEL_110;
          }
          __int16 v107 = 0;
          unint64_t v108 = v106 + 1;
          uint64_t v109 = (v106 + 1) & 0x3FFE;
          LOWORD(v106) = v101 - 8 * v109;
          uint64_t v110 = &v104[v109];
          uint64_t v111 = (unsigned __int8 *)(v97 + 16 * v100);
          uint64_t v112 = v109;
          do
          {
            uint64_t v113 = *(v111 - 1);
            int v114 = *v111;
            v111 += 2;
            v105 += byte_20EBFB6[v113];
            v107 += byte_20EBFB6[v114];
            v112 -= 2;
          }
          while (v112);
          v105 += v107;
          if (v108 != v109) {
            goto LABEL_109;
          }
LABEL_110:
          v104 += ((unsigned __int16)(v101 - 9) >> 3) + 1;
LABEL_111:
          uint64_t v116 = (_DWORD *)(v103
                          + 12
                          * (unsigned __int16)(v105 + byte_20EBFB6[~(-1 << v106) & (unint64_t)*v104]));
          if (*(_DWORD *)(v31 + 36) == v116[1] && *(_DWORD *)(v31 + 32) == *v116)
          {
            if (v98 == -1) {
              uint64_t v98 = v99;
            }
LABEL_98:
            unint64_t v51 = ++v94 + v99;
            continue;
          }
          break;
        }
        uint64_t v118 = (unsigned __int8 *)(v96 + 16 * v100 + 10);
        if ((unsigned __int16)v101 < 9u)
        {
          __int16 v119 = 0;
          unint64_t v130 = (unsigned __int8 *)(v96 + 16 * v100 + 10);
          LOBYTE(v124) = v101;
          goto LABEL_125;
        }
        __int16 v119 = 0;
        uint64_t v120 = (unsigned __int16)(v99 - 48 * v100 - 9) >> 3;
        if (!((unsigned __int16)(v99 - 48 * v100 - 9) >> 3))
        {
          unsigned __int16 v124 = v101;
          uint64_t v125 = (unsigned __int8 *)(v96 + 16 * v100 + 10);
          do
          {
LABEL_123:
            int v131 = *v125++;
            v119 += byte_20EBFB6[v131];
            v124 -= 8;
          }
          while (v124 > 8u);
          goto LABEL_124;
        }
        __int16 v121 = 0;
        uint64_t v122 = v120 + 1;
        uint64_t v123 = (v120 + 1) & 0x3FFE;
        unsigned __int16 v124 = v101 - 8 * v123;
        uint64_t v125 = &v118[v123];
        unsigned __int16 v126 = (unsigned __int8 *)(v97 + 16 * v100);
        uint64_t v127 = v123;
        do
        {
          uint64_t v128 = *(v126 - 1);
          int v129 = *v126;
          v126 += 2;
          v119 += byte_20EBFB6[v128];
          v121 += byte_20EBFB6[v129];
          v127 -= 2;
        }
        while (v127);
        v119 += v121;
        if (v122 != v123) {
          goto LABEL_123;
        }
LABEL_124:
        unint64_t v130 = &v118[((unsigned __int16)(v101 - 9) >> 3) + 1];
LABEL_125:
        if (v48 != *(void *)(v103
                              + 12
                              * (unsigned __int16)(v119
                                                 + byte_20EBFB6[~(-1 << v124) & (unint64_t)*v130])))
          goto LABEL_98;
        if (v99 == -1)
        {
          unint64_t v137 = -1;
LABEL_137:
          sub_AD3484(v31, (uint64_t *)&v393, v137, v395);
          goto LABEL_138;
        }
        if ((unsigned __int16)v101 < 9u)
        {
          __int16 v134 = 0;
        }
        else
        {
          if ((((_WORD)v99 - 48 * (_WORD)v100 - 8) & 0xFFF8) != 0) {
            __int16 v132 = 8;
          }
          else {
            __int16 v132 = v99 - 48 * v100 - 8;
          }
          unsigned __int16 v133 = ~v132 + v99 - 48 * v100;
          if (v133 < 8u)
          {
            __int16 v134 = 0;
            unsigned __int16 v135 = v101;
            uint64_t v136 = (unsigned __int8 *)(v96 + 16 * v100 + 10);
            goto LABEL_358;
          }
          __int16 v285 = 0;
          __int16 v286 = 0;
          uint64_t v287 = (v133 >> 3) + 1;
          unsigned __int16 v135 = v101 - 8 * (((v133 >> 3) + 1) & 0x3FFE);
          uint64_t v136 = &v118[v287 & 0x3FFE];
          __int16 v288 = (unsigned __int8 *)(v96 + 16 * v100 + 11);
          uint64_t v289 = v287 & 0x3FFE;
          do
          {
            uint64_t v290 = *(v288 - 1);
            int v291 = *v288;
            v288 += 2;
            v285 += byte_20EBFB6[v290];
            v286 += byte_20EBFB6[v291];
            v289 -= 2;
          }
          while (v289);
          __int16 v134 = v286 + v285;
          if ((v287 & 0x3FFE) != v287)
          {
            do
            {
LABEL_358:
              int v292 = *v136++;
              v134 += byte_20EBFB6[v292];
              v135 -= 8;
            }
            while (v135 > 8u);
          }
          v118 += ((unsigned __int16)(v101 - 9) >> 3) + 1;
          LOBYTE(v101) = v135;
        }
        uint64_t v293 = v96 + 16 * v100;
        uint64_t v294 = *(_DWORD ***)(v31 + 56);
        unsigned __int16 v295 = v134 + byte_20EBFB6[~(-1 << v101) & (unint64_t)*v118];
        unint64_t v138 = (_DWORD *)(v103 + 12 * v295);
        if (*(unsigned __int16 *)(v293 + 8) == v295)
        {
          uint64_t v296 = v293 + 16;
          if ((_DWORD **)(v293 + 16) != v294)
          {
            while (1)
            {
              uint64_t v297 = (_DWORD **)v296;
              if (*(_WORD *)(v296 + 8)) {
                break;
              }
              v296 += 16;
              if (v297 + 2 == v294)
              {
                uint64_t v293 = *(void *)(v31 + 56);
                goto LABEL_366;
              }
            }
            uint64_t v293 = v296;
LABEL_366:
            unint64_t v138 = *v297;
            goto LABEL_367;
          }
        }
        else
        {
LABEL_367:
          if ((_DWORD **)v293 != v294 && v102)
          {
            do
            {
              if (*(_DWORD *)(v31 + 36) != v138[1] || *(_DWORD *)(v31 + 32) != *v138) {
                break;
              }
              v138 += 3;
              if (v138 == (_DWORD *)(*(void *)v293 + 12 * *(unsigned __int16 *)(v293 + 8)))
              {
                v293 += 16;
                if ((_DWORD **)v293 != v294)
                {
                  do
                  {
                    if (*(_WORD *)(v293 + 8))
                    {
                      unint64_t v138 = *(_DWORD **)v293;
                      goto LABEL_371;
                    }
                    v293 += 16;
                  }
                  while ((_DWORD **)v293 != v294);
                  unint64_t v138 = *(_DWORD **)(v293 - 16);
                }
                break;
              }
LABEL_371:
              ;
            }
            while ((_DWORD **)v293 != v294);
          }
        }
LABEL_139:
        unsigned int v21 = v138[2];
        if (v21 == -1)
        {
          int v139 = *(_DWORD *)(v31 + 112);
          *(_DWORD *)(v31 + 112) = v139 + 1;
          v138[2] = v139;
          unint64_t v141 = *(char **)(v31 + 96);
          unint64_t v140 = *(void *)(v31 + 104);
          if ((unint64_t)v141 < v140)
          {
            *(void *)unint64_t v141 = v48;
            uint64_t v142 = (uint64_t)(v141 + 8);
            goto LABEL_164;
          }
          uint64_t v143 = (char **)(v31 + 88);
          unint64_t v144 = *(char **)(v31 + 88);
          int v145 = (char *)(v141 - v144);
          uint64_t v146 = (v141 - v144) >> 3;
          unint64_t v147 = v146 + 1;
          if ((unint64_t)(v146 + 1) >> 61) {
            sub_2E00();
          }
          uint64_t v148 = v140 - (void)v144;
          if (v148 >> 2 > v147) {
            unint64_t v147 = v148 >> 2;
          }
          if ((unint64_t)v148 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v149 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v149 = v147;
          }
          if (v149)
          {
            if (v149 >> 61) {
              sub_188D718();
            }
            unint64_t v150 = v149;
            __int16 v151 = operator new(8 * v149);
            uint64_t v143 = (char **)(v31 + 88);
            unint64_t v149 = v150;
            int v145 = (char *)(v141 - v144);
            uint64_t v152 = (unint64_t *)&v151[8 * v146];
            *uint64_t v152 = v48;
            uint64_t v142 = (uint64_t)(v152 + 1);
            if (v141 == v144) {
              goto LABEL_162;
            }
LABEL_155:
            unint64_t v153 = v141 - 8 - v144;
            if (v153 < 0x58) {
              goto LABEL_432;
            }
            if ((unint64_t)(v141 - v151 - (void)v145) < 0x20) {
              goto LABEL_432;
            }
            uint64_t v154 = (v153 >> 3) + 1;
            uint64_t v155 = 8 * (v154 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v156 = &v141[-v155];
            uint64_t v152 = (unint64_t *)((char *)v152 - v155);
            uint64_t v157 = &v151[8 * v146 - 16];
            uint64_t v158 = v141 - 16;
            uint64_t v159 = v154 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v160 = *(_OWORD *)v158;
              *(v157 - 1) = *((_OWORD *)v158 - 1);
              *uint64_t v157 = v160;
              v157 -= 2;
              v158 -= 32;
              v159 -= 4;
            }
            while (v159);
            unint64_t v141 = v156;
            if (v154 != (v154 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_432:
              do
              {
                unint64_t v161 = *((void *)v141 - 1);
                v141 -= 8;
                *--uint64_t v152 = v161;
              }
              while (v141 != v144);
            }
            unint64_t v141 = *v143;
          }
          else
          {
            __int16 v151 = 0;
            uint64_t v152 = (unint64_t *)(8 * v146);
            *(void *)(8 * v146) = v48;
            uint64_t v142 = 8 * v146 + 8;
            if (v141 != v144) {
              goto LABEL_155;
            }
          }
LABEL_162:
          *(void *)(v31 + 88) = v152;
          *(void *)(v31 + 96) = v142;
          *(void *)(v31 + 104) = &v151[8 * v149];
          if (v141) {
            operator delete(v141);
          }
LABEL_164:
          *(void *)(v31 + 96) = v142;
          unsigned int v21 = v138[2];
        }
        uint64_t v162 = (void *)(*(void *)(v337 + 24) + 4136);
        unint64_t v163 = *(void *)v343;
        unsigned int v164 = *(_DWORD *)&v343[20];
        uint64_t v165 = HIDWORD(*(void *)v343);
        if (sub_A10E20(v162, *(int *)&v343[4]))
        {
          uint64_t v166 = (int *)sub_A1120C(*(void *)(*v162 + 3944), v163);
        }
        else
        {
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_24F7308))
          {
            sub_518C8(0x3B60u, 0x7FCAu);
            dword_24F7300 = v300 | 0x40000000;
            __cxa_guard_release(&qword_24F7308);
          }
          uint64_t v167 = *v162;
          if (dword_24F7300 == v165)
          {
            int v168 = *(unsigned int **)(*(void *)(v167 + 3976) + 72);
            if (!v168)
            {
              unsigned int v322 = __cxa_allocate_exception(0x40uLL);
              sub_5E5C(v395, "Realtime stop pattern quad data requested on nullptr buffer");
              unsigned int v323 = (void *)sub_2F404((uint64_t)v322, (long long *)v395);
            }
            uint64_t v169 = (int *)((char *)v168 + *v168);
            uint64_t v170 = (unsigned __int16 *)((char *)v169 - *v169);
            if (*v170 >= 5u && (uint64_t v171 = v170[2]) != 0) {
              int v172 = (unsigned int *)((char *)v169 + v171 + *(unsigned int *)((char *)v169 + v171));
            }
            else {
              int v172 = 0;
            }
            uint64_t v166 = (int *)sub_A1139C(v172, v163);
          }
          else
          {
            uint64_t v166 = (int *)sub_A11500(v167 + 24, v163, 0, "stop pattern");
          }
        }
        long long v173 = (unsigned __int16 *)((char *)v166 - *v166);
        if (*v173 >= 9u && (uint64_t v174 = v173[4]) != 0) {
          __int16 v175 = (unsigned int *)((char *)v166 + v174 + *(unsigned int *)((char *)v166 + v174));
        }
        else {
          __int16 v175 = 0;
        }
        DWORD1(v339) = 10 * *(_DWORD *)(sub_A10764(v175, v164) + 8);
        uint64_t v176 = *(void *)(v337 + 24);
        unint64_t v177 = *(void *)v343;
        uint64_t v178 = (uint64_t *)(v176 + 4136);
        unsigned int v179 = *(_DWORD *)&v343[20];
        int v180 = *(_DWORD *)&v343[8];
        uint64_t v181 = HIDWORD(*(void *)v343);
        if (sub_A10E20((void *)(v176 + 4136), *(int *)&v343[4]))
        {
          int v182 = *(unsigned int **)(*(void *)(*v178 + 3944) + 72);
          if (!v182)
          {
            uint64_t v316 = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(v395, "Incident stop pattern quad data requested on nullptr buffer");
            uint64_t v317 = (void *)sub_2F404((uint64_t)v316, (long long *)v395);
          }
          goto LABEL_186;
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F7308))
        {
          sub_518C8(0x3B60u, 0x7FCAu);
          dword_24F7300 = v301 | 0x40000000;
          __cxa_guard_release(&qword_24F7308);
        }
        uint64_t v183 = *v178;
        if (dword_24F7300 != v181)
        {
          int32x2_t v184 = sub_A10B80(v183 + 24, v177, 0);
          unsigned __int16 v185 = &v184[-*(int *)v184];
          if (*(unsigned __int16 *)v185 >= 5u) {
            goto LABEL_187;
          }
LABEL_190:
          uint64_t v186 = 0;
          goto LABEL_191;
        }
        int v182 = *(unsigned int **)(*(void *)(v183 + 3976) + 72);
        if (!v182)
        {
          int v326 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(v395, "Realtime stop pattern quad data requested on nullptr buffer");
          int v327 = (void *)sub_2F404((uint64_t)v326, (long long *)v395);
        }
LABEL_186:
        int32x2_t v184 = (char *)v182 + *v182;
        unsigned __int16 v185 = &v184[-*(int *)v184];
        if (*(unsigned __int16 *)v185 < 5u) {
          goto LABEL_190;
        }
LABEL_187:
        uint64_t v186 = *((unsigned __int16 *)v185 + 2);
        if (v186) {
          v186 += (uint64_t)&v184[*(unsigned int *)&v184[v186]];
        }
LABEL_191:
        int v187 = (int *)(v186 + 4 * v177 + 4 + *(unsigned int *)(v186 + 4 * v177 + 4));
        char v188 = (unsigned __int16 *)((char *)v187 - *v187);
        if (*v188 >= 9u && (uint64_t v189 = v188[4]) != 0) {
          unsigned int v190 = (unsigned int *)((char *)v187 + v189 + *(unsigned int *)((char *)v187 + v189));
        }
        else {
          unsigned int v190 = 0;
        }
        uint64_t v191 = sub_A10764(v190, v179);
        uint64_t v192 = &v184[-*(int *)v184];
        if (*(unsigned __int16 *)v192 < 0xBu)
        {
          int v193 = 0;
          uint64_t v194 = (unsigned __int16 *)((char *)v187 - *v187);
          if (*v194 >= 0x11u) {
            goto LABEL_199;
          }
LABEL_202:
          LODWORD(v195) = 0;
          goto LABEL_203;
        }
        int v193 = (unsigned int *)*((unsigned __int16 *)v192 + 5);
        if (v193) {
          int v193 = (unsigned int *)((char *)v193 + (void)v184 + *(unsigned int *)((char *)v193 + (void)v184));
        }
        uint64_t v194 = (unsigned __int16 *)((char *)v187 - *v187);
        if (*v194 < 0x11u) {
          goto LABEL_202;
        }
LABEL_199:
        uint64_t v195 = v194[8];
        if (v194[8]) {
          LODWORD(v195) = *(int *)((char *)v187 + v195);
        }
LABEL_203:
        uint64_t v196 = sub_A108C4(v193, v195+ *(int *)((char *)v187 + v194[2] + *(unsigned int *)((char *)v187 + v194[2])) * v180+ *(unsigned __int8 *)(v191 + 14));
        if (v196)
        {
          uint64_t v197 = __ROR8__(*(void *)v196, 32);
          int v198 = *(_DWORD *)(v196 + 8);
        }
        else
        {
          int v198 = 0;
          uint64_t v197 = 0xFFFFFFFFLL;
        }
        *(void *)long long v395 = v197;
        *(_DWORD *)&v395[8] = v198;
        uint64_t v199 = (int *)sub_A11094((void *)(v176 + 4136), v177);
        uint64_t v200 = (unsigned __int16 *)((char *)v199 - *v199);
        if (*v200 >= 9u && (uint64_t v201 = v200[4]) != 0) {
          int v202 = (unsigned int *)((char *)v199 + v201 + *(unsigned int *)((char *)v199 + v201));
        }
        else {
          int v202 = 0;
        }
        unsigned int v203 = *(unsigned __int16 *)(sub_A10764(v202, v179) + 12);
        if (*(_DWORD *)&v343[12] == -1) {
          int v204 = 0x7FFFFFFF;
        }
        else {
          int v204 = *(_DWORD *)&v343[16];
        }
        *((void *)&v339 + 1) = sub_A0FAA0((uint64_t *)(v176 + 4184), (unsigned int *)v395, v203, v204);
        __int16 v340 = v205;
        uint64_t v206 = *(void *)(v337 + 24);
        unint64_t v207 = *(void *)v343;
        int v208 = (uint64_t *)(v206 + 4136);
        unsigned int v209 = v344;
        int v210 = *(_DWORD *)&v343[8];
        uint64_t v211 = HIDWORD(*(void *)v343);
        if (sub_A10E20((void *)(v206 + 4136), *(int *)&v343[4]))
        {
          __int16 v212 = *(unsigned int **)(*(void *)(*v208 + 3944) + 72);
          if (!v212)
          {
            uint64_t v318 = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(v395, "Incident stop pattern quad data requested on nullptr buffer");
            int v319 = (void *)sub_2F404((uint64_t)v318, (long long *)v395);
          }
          goto LABEL_219;
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F7308))
        {
          sub_518C8(0x3B60u, 0x7FCAu);
          dword_24F7300 = v302 | 0x40000000;
          __cxa_guard_release(&qword_24F7308);
        }
        uint64_t v213 = *v208;
        if (dword_24F7300 != v211)
        {
          uint64_t v214 = sub_A10B80(v213 + 24, v207, 0);
          uint64_t v215 = &v214[-*(int *)v214];
          if (*(unsigned __int16 *)v215 >= 5u) {
            goto LABEL_220;
          }
LABEL_223:
          uint64_t v216 = 0;
          goto LABEL_224;
        }
        __int16 v212 = *(unsigned int **)(*(void *)(v213 + 3976) + 72);
        if (!v212)
        {
          int v320 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(v395, "Realtime stop pattern quad data requested on nullptr buffer");
          int v321 = (void *)sub_2F404((uint64_t)v320, (long long *)v395);
        }
LABEL_219:
        uint64_t v214 = (char *)v212 + *v212;
        uint64_t v215 = &v214[-*(int *)v214];
        if (*(unsigned __int16 *)v215 < 5u) {
          goto LABEL_223;
        }
LABEL_220:
        uint64_t v216 = *((unsigned __int16 *)v215 + 2);
        if (v216) {
          v216 += (uint64_t)&v214[*(unsigned int *)&v214[v216]];
        }
LABEL_224:
        uint64_t v217 = (int *)(v216 + 4 * v207 + 4 + *(unsigned int *)(v216 + 4 * v207 + 4));
        int v218 = (unsigned __int16 *)((char *)v217 - *v217);
        if (*v218 >= 9u && (uint64_t v219 = v218[4]) != 0) {
          uint64_t v220 = (unsigned int *)((char *)v217 + v219 + *(unsigned int *)((char *)v217 + v219));
        }
        else {
          uint64_t v220 = 0;
        }
        uint64_t v221 = sub_A10764(v220, v209);
        uint64_t v222 = &v214[-*(int *)v214];
        if (*(unsigned __int16 *)v222 < 0xBu)
        {
          uint64_t v223 = 0;
          int v224 = (unsigned __int16 *)((char *)v217 - *v217);
          if (*v224 >= 0x11u) {
            goto LABEL_232;
          }
LABEL_235:
          LODWORD(v225) = 0;
          goto LABEL_236;
        }
        uint64_t v223 = (unsigned int *)*((unsigned __int16 *)v222 + 5);
        if (v223) {
          uint64_t v223 = (unsigned int *)((char *)v223 + (void)v214 + *(unsigned int *)((char *)v223 + (void)v214));
        }
        int v224 = (unsigned __int16 *)((char *)v217 - *v217);
        if (*v224 < 0x11u) {
          goto LABEL_235;
        }
LABEL_232:
        uint64_t v225 = v224[8];
        if (v224[8]) {
          LODWORD(v225) = *(int *)((char *)v217 + v225);
        }
LABEL_236:
        uint64_t v226 = sub_A108C4(v223, v225+ *(int *)((char *)v217 + v224[2] + *(unsigned int *)((char *)v217 + v224[2])) * v210+ *(unsigned __int8 *)(v221 + 14));
        if (v226)
        {
          uint64_t v227 = __ROR8__(*(void *)v226, 32);
          int v228 = *(_DWORD *)(v226 + 8);
        }
        else
        {
          int v228 = 0;
          uint64_t v227 = 0xFFFFFFFFLL;
        }
        *(void *)long long v395 = v227;
        *(_DWORD *)&v395[8] = v228;
        uint64_t v229 = (int *)sub_A11094((void *)(v206 + 4136), v207);
        uint64_t v230 = (unsigned __int16 *)((char *)v229 - *v229);
        if (*v230 >= 9u && (uint64_t v231 = v230[4]) != 0) {
          unint64_t v232 = (unsigned int *)((char *)v229 + v231 + *(unsigned int *)((char *)v229 + v231));
        }
        else {
          unint64_t v232 = 0;
        }
        unsigned int v233 = *(unsigned __int16 *)(sub_A10764(v232, v209) + 12);
        if (*(_DWORD *)&v343[12] == -1) {
          int v234 = 0x7FFFFFFF;
        }
        else {
          int v234 = *(_DWORD *)&v343[16];
        }
        unint64_t v341 = sub_A0FDF4((uint64_t *)(v206 + 4184), (unsigned int *)v395, v233, v234);
        __int16 v342 = v235;
        int v404 = -1;
        sub_9F6FA0((uint64_t)v395, &v339);
        int v404 = 0;
        if (v415)
        {
          sub_9F6FA0((uint64_t)v405, (long long *)v395);
          a1 = v337;
          int v415 = v404;
          if (!v404) {
            goto LABEL_256;
          }
        }
        else
        {
          *(_OWORD *)v405 = *(_OWORD *)v395;
          *(_OWORD *)&v405[16] = *(_OWORD *)&v395[16];
          v406[0] = *(_OWORD *)v396;
          *(_OWORD *)((char *)v406 + 12) = *(_OWORD *)&v396[12];
          a1 = v337;
          if (v407[0])
          {
            v407[1] = v407[0];
            operator delete(v407[0]);
          }
          *(_OWORD *)long long v407 = v397;
          uint64_t v408 = v398;
          uint64_t v398 = 0;
          long long v397 = 0uLL;
          if ((void)v409)
          {
            *((void *)&v409 + 1) = v409;
            operator delete((void *)v409);
          }
          long long v409 = *(_OWORD *)v399;
          int v410 = v399[2];
          memset(v399, 0, sizeof(v399));
          int v411 = v400;
          if ((void)v412)
          {
            *((void *)&v412 + 1) = v412;
            operator delete((void *)v412);
          }
          long long v412 = v401;
          uint64_t v413 = v402;
          uint64_t v402 = 0;
          long long v401 = 0uLL;
          long long v414 = v403;
          if (!v404)
          {
LABEL_256:
            if ((void)v401)
            {
              *((void *)&v401 + 1) = v401;
              operator delete((void *)v401);
            }
            if (v399[0])
            {
              v399[1] = v399[0];
              operator delete(v399[0]);
            }
            if ((void)v397)
            {
              *((void *)&v397 + 1) = v397;
              operator delete((void *)v397);
            }
          }
        }
        if (v349)
        {
          int v350 = v349;
          operator delete(v349);
        }
        if (*((void *)&v346 + 1))
        {
          *(void *)&long long v347 = *((void *)&v346 + 1);
          operator delete(*((void **)&v346 + 1));
        }
        if ((void)v345)
        {
          *((void *)&v345 + 1) = v345;
          operator delete((void *)v345);
        }
        if (v22[4] == -1) {
          goto LABEL_275;
        }
        uint64_t v236 = (uint64_t)v356;
        if ((unint64_t)v356 < v357) {
          goto LABEL_270;
        }
LABEL_288:
        unsigned int v356 = (char *)sub_A4CBF4((uint64_t *)&v355, (uint64_t)v405);
        uint64_t v237 = *((void *)&v387 + 1);
        if (*((void *)&v387 + 1) >= (unint64_t)v388) {
          goto LABEL_274;
        }
LABEL_289:
        *(void *)uint64_t v237 = 0;
        *(void *)(v237 + 8) = 0;
        *(void *)(v237 + 16) = 0;
        unsigned int v243 = (char *)v355;
        uint64_t v244 = v356;
        int64_t v245 = v356 - (unsigned char *)v355;
        if (v356 != v355)
        {
          unint64_t v246 = 0xCF3CF3CF3CF3CF3DLL * (v245 >> 3);
          if (v246 >= 0x186186186186187) {
            sub_2E00();
          }
          uint64_t v247 = (char *)operator new(v245);
          uint64_t v248 = 0;
          *(void *)uint64_t v237 = v247;
          *(void *)(v237 + 8) = v247;
          *(void *)(v237 + 16) = &v247[168 * v246];
          do
          {
            uint64_t v250 = (long long *)&v247[v248];
            char v251 = (long long *)&v243[v248];
            *(_DWORD *)&v247[v248 + 160] = *(_DWORD *)&v243[v248 + 160];
            int v252 = *(_DWORD *)&v243[v248 + 160];
            if (v252 == 1)
            {
              long long v249 = *v251;
              *(long long *)((char *)v250 + 12) = *(long long *)((char *)v251 + 12);
              long long *v250 = v249;
            }
            else if (!v252)
            {
              sub_9F6FA0((uint64_t)v250, v251);
            }
            v248 += 168;
          }
          while (&v243[v248] != v244);
          *(void *)(v237 + 8) = &v247[v248];
        }
        char v253 = v358;
        *(void *)(v237 + 32) = 0;
        *(unsigned char *)(v237 + 24) = v253;
        *(void *)(v237 + 40) = 0;
        *(void *)(v237 + 48) = 0;
        int v254 = v359;
        uint64_t v255 = v360 - (unsigned char *)v359;
        if (v360 != v359)
        {
          if (0xCCCCCCCCCCCCCCCDLL * (v255 >> 3) >= 0x666666666666667) {
            sub_2E00();
          }
          char v256 = (char *)operator new(v360 - (unsigned char *)v359);
          *(void *)(v237 + 32) = v256;
          *(void *)(v237 + 40) = v256;
          unint64_t v257 = &v256[8 * (v255 >> 3)];
          *(void *)(v237 + 48) = v257;
          memcpy(v256, v254, v255 - 7);
          *(void *)(v237 + 40) = v257;
        }
        uint64_t v258 = *(void *)v362;
        *(void *)(v237 + 63) = *(void *)&v362[7];
        *(void *)(v237 + 56) = v258;
        uint64_t v238 = (char *)(v237 + 72);
LABEL_302:
        *((void *)&v387 + 1) = v238;
        unsigned int v260 = v22[5];
        *(_DWORD *)long long v395 = v338 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * v21 + 1;
        int v259 = *(_DWORD *)v395;
        uint64_t v261 = *(void *)(a1 + 192);
        uint64_t v262 = *(unsigned int *)(sub_B1041C(v336, (unsigned int *)v395) + 4);
        *(_DWORD *)long long v395 = v259;
        uint64_t v263 = *(void *)(a1 + 192);
        uint64_t v22 = (unsigned int *)(v261 + (v262 << 6));
        long long v264 = (unsigned int *)(v263
                              + ((unint64_t)*(unsigned int *)(sub_B1041C(v336, (unsigned int *)v395) + 8) << 6));
        if (v22 == v264)
        {
LABEL_305:
          uint64_t v22 = 0;
        }
        else
        {
          while (v22[6] != v260)
          {
            v22 += 16;
            if (v22 == v264) {
              goto LABEL_305;
            }
          }
        }
        if (!v415)
        {
          if ((void)v412)
          {
            *((void *)&v412 + 1) = v412;
            operator delete((void *)v412);
          }
          if ((void)v409)
          {
            *((void *)&v409 + 1) = v409;
            operator delete((void *)v409);
          }
          if (v407[0])
          {
            v407[1] = v407[0];
            operator delete(v407[0]);
          }
        }
        if (v359)
        {
          unsigned int v360 = v359;
          operator delete(v359);
        }
        uint64_t v265 = (char *)v355;
        if (v355)
        {
          unsigned int v266 = v356;
          uint64_t v23 = v355;
          if (v356 != v355)
          {
            do
            {
              if (!*((_DWORD *)v266 - 2))
              {
                int v267 = (void *)*((void *)v266 - 6);
                if (v267)
                {
                  *((void *)v266 - 5) = v267;
                  operator delete(v267);
                }
                unsigned int v268 = (void *)*((void *)v266 - 10);
                if (v268)
                {
                  *((void *)v266 - 9) = v268;
                  operator delete(v268);
                }
                unsigned int v269 = (void *)*((void *)v266 - 13);
                if (v269)
                {
                  *((void *)v266 - 12) = v269;
                  operator delete(v269);
                }
              }
              v266 -= 168;
            }
            while (v266 != v265);
            uint64_t v23 = v355;
          }
          unsigned int v356 = v265;
          operator delete(v23);
        }
        --v338;
        if (*v22 == -1) {
          goto LABEL_390;
        }
        goto LABEL_27;
      }
LABEL_56:
      ++v47;
    }
  }
LABEL_7:
  uint64_t result = std::string::operator=(v328, (const std::string *)(a1 + 528));
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a1 + 616);
  *(_OWORD *)(a2 + 136) = *(_OWORD *)(a1 + 632);
  *(_OWORD *)(a2 + 152) = *(_OWORD *)(a1 + 648);
  *(_OWORD *)(a2 + 168) = *(_OWORD *)(a1 + 664);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 552);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 568);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 584);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 600);
  return result;
}

void sub_B18A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  __cxa_guard_abort(&qword_24F7308);
  if (__p)
  {
    operator delete(__p);
    uint64_t v67 = a52;
    if (!a52)
    {
LABEL_3:
      uint64_t v68 = a49;
      if (!a49) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v67 = a52;
    if (!a52) {
      goto LABEL_3;
    }
  }
  operator delete(v67);
  uint64_t v68 = a49;
  if (!a49)
  {
LABEL_4:
    if (LODWORD(STACK[0x470])) {
      goto LABEL_13;
    }
LABEL_9:
    uint64_t v69 = (void *)STACK[0x448];
    if (STACK[0x448])
    {
      STACK[0x450] = (unint64_t)v69;
      operator delete(v69);
      uint64_t v70 = (void *)STACK[0x428];
      if (!STACK[0x428])
      {
LABEL_11:
        int v71 = (void *)STACK[0x410];
        if (!STACK[0x410]) {
          goto LABEL_13;
        }
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v70 = (void *)STACK[0x428];
      if (!STACK[0x428]) {
        goto LABEL_11;
      }
    }
    STACK[0x430] = (unint64_t)v70;
    operator delete(v70);
    int v71 = (void *)STACK[0x410];
    if (!STACK[0x410])
    {
LABEL_13:
      if (a66)
      {
        operator delete(a66);
        int v72 = a62;
        if (!a62)
        {
LABEL_15:
          uint64_t v73 = (void *)STACK[0x300];
          if (!STACK[0x300]) {
            goto LABEL_16;
          }
          goto LABEL_40;
        }
      }
      else
      {
        int v72 = a62;
        if (!a62) {
          goto LABEL_15;
        }
      }
      uint64_t v79 = a63;
      uint64_t v80 = v72;
      if ((void *)a63 != v72)
      {
        do
        {
          if (!*(_DWORD *)(v79 - 8))
          {
            char v81 = *(void **)(v79 - 48);
            if (v81)
            {
              *(void *)(v79 - 40) = v81;
              operator delete(v81);
            }
            uint64_t v82 = *(void **)(v79 - 80);
            if (v82)
            {
              *(void *)(v79 - 72) = v82;
              operator delete(v82);
            }
            uint64_t v83 = *(void **)(v79 - 104);
            if (v83)
            {
              *(void *)(v79 - 96) = v83;
              operator delete(v83);
            }
          }
          v79 -= 168;
        }
        while ((void *)v79 != v72);
        uint64_t v80 = a62;
      }
      operator delete(v80);
      uint64_t v73 = (void *)STACK[0x300];
      if (!STACK[0x300])
      {
LABEL_16:
        __int16 v74 = (void *)STACK[0x2E8];
        if (!STACK[0x2E8]) {
          goto LABEL_17;
        }
        goto LABEL_41;
      }
LABEL_40:
      STACK[0x308] = (unint64_t)v73;
      operator delete(v73);
      __int16 v74 = (void *)STACK[0x2E8];
      if (!STACK[0x2E8])
      {
LABEL_17:
        char v75 = (void *)STACK[0x2D0];
        if (!STACK[0x2D0]) {
          goto LABEL_18;
        }
        goto LABEL_42;
      }
LABEL_41:
      STACK[0x2F0] = (unint64_t)v74;
      operator delete(v74);
      char v75 = (void *)STACK[0x2D0];
      if (!STACK[0x2D0])
      {
LABEL_18:
        unint64_t v76 = STACK[0x2B8];
        if (!STACK[0x2B8]) {
          goto LABEL_19;
        }
        goto LABEL_43;
      }
LABEL_42:
      STACK[0x2D8] = (unint64_t)v75;
      operator delete(v75);
      unint64_t v76 = STACK[0x2B8];
      if (!STACK[0x2B8])
      {
LABEL_19:
        if (SLOBYTE(STACK[0x277]) < 0) {
          goto LABEL_20;
        }
        goto LABEL_47;
      }
LABEL_43:
      uint64_t v84 = (void **)STACK[0x2C0];
      int v85 = (void *)v76;
      if (STACK[0x2C0] != v76)
      {
        do
        {
          v84 -= 9;
          sub_9F5F58(a9, v84);
        }
        while (v84 != (void **)v76);
        int v85 = (void *)STACK[0x2B8];
      }
      STACK[0x2C0] = v76;
      operator delete(v85);
      if (SLOBYTE(STACK[0x277]) < 0)
      {
LABEL_20:
        operator delete((void *)STACK[0x260]);
        unint64_t v77 = *a10;
        if (*a10) {
          goto LABEL_21;
        }
        goto LABEL_48;
      }
LABEL_47:
      unint64_t v77 = *a10;
      if (*a10)
      {
LABEL_21:
        *(void *)(a20 + 200) = v77;
        operator delete(v77);
        if ((*(char *)(a20 + 55) & 0x80000000) == 0) {
          goto LABEL_22;
        }
        goto LABEL_49;
      }
LABEL_48:
      if ((*(char *)(a20 + 55) & 0x80000000) == 0)
      {
LABEL_22:
        __int16 v78 = *a13;
        if (!*a13) {
          goto LABEL_23;
        }
        goto LABEL_50;
      }
LABEL_49:
      operator delete(*a11);
      __int16 v78 = *a13;
      if (!*a13) {
LABEL_23:
      }
        _Unwind_Resume(a1);
LABEL_50:
      uint64_t v86 = a20;
      uint64_t v87 = *(void *)(a20 + 16);
      __int16 v88 = v78;
      if ((void *)v87 != v78)
      {
        do
        {
          v87 -= 296;
          sub_9F5E28(a20 + 24, v87);
        }
        while ((void *)v87 != v78);
        __int16 v88 = *a13;
        uint64_t v86 = a20;
      }
      *(void *)(v86 + 16) = v78;
      operator delete(v88);
      _Unwind_Resume(a1);
    }
LABEL_12:
    STACK[0x418] = (unint64_t)v71;
    operator delete(v71);
    goto LABEL_13;
  }
LABEL_8:
  operator delete(v68);
  if (LODWORD(STACK[0x470])) {
    goto LABEL_13;
  }
  goto LABEL_9;
}

void sub_B18F80(uint64_t a1)
{
  *(_DWORD *)(a1 + 240) = 0;
  if (*(void *)(a1 + 144) | *(void *)(a1 + 184))
  {
    for (uint64_t i = *(void *)(a1 + 152); i != *(void *)(a1 + 160); i += 16)
    {
      if (*(void *)i)
      {
        free(*(void **)i);
        *(void *)uint64_t i = 0;
      }
      *(void *)(i + 8) = 0;
    }
    *(void *)(a1 + 184) = 0;
  }
  *(uint64x2_t *)(a1 + 104) = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 120), (float)*(unint64_t *)(a1 + 176))));
  *(unsigned char *)(a1 + 128) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 200) = *(void *)(a1 + 192);
  *(void *)(a1 + 224) = 0;
  unsigned int v3 = *(unsigned int **)(a1 + 272);
  int v4 = *(unsigned int **)(a1 + 280);
  if (v3 != v4)
  {
    uint64_t v5 = *(void *)(a1 + 248);
    uint64_t v6 = *(unsigned int **)(a1 + 272);
    do
    {
      unsigned int v7 = *v6++;
      *(void *)(v5 + (((unint64_t)v7 >> 3) & 0x1FFFFFF8)) &= ~(1 << v7);
    }
    while (v6 != v4);
  }
  *(void *)(a1 + 280) = v3;
  int v8 = *(unsigned int **)(a1 + 320);
  uint64_t v9 = *(unsigned int **)(a1 + 328);
  if (v8 != v9)
  {
    uint64_t v10 = *(void *)(a1 + 296);
    uint64_t v11 = *(unsigned int **)(a1 + 320);
    do
    {
      unsigned int v12 = *v11++;
      *(void *)(v10 + (((unint64_t)v12 >> 3) & 0x1FFFFFF8)) &= ~(1 << v12);
    }
    while (v11 != v9);
  }
  *(void *)(a1 + 328) = v8;
  uint64_t v13 = *(unsigned int **)(a1 + 392);
  uint64_t v14 = *(unsigned int **)(a1 + 400);
  if (v13 != v14)
  {
    uint64_t v15 = *(void *)(a1 + 368);
    uint64_t v16 = *(void *)(a1 + 344);
    uint64_t v17 = *(unsigned int **)(a1 + 392);
    do
    {
      unsigned int v18 = *v17++;
      *(void *)(v15 + (((unint64_t)v18 >> 3) & 0x1FFFFFF8)) &= ~(1 << v18);
      *(_DWORD *)(v16 + 4 * v18) = -1;
    }
    while (v17 != v14);
  }
  *(void *)(a1 + 400) = v13;
  sub_BD5698(a1 + 424);
  char v21 = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)&__dst, &__p);
  uint64_t v19 = (void **)(a1 + 528);
  if (*(char *)(a1 + 551) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)uint64_t v19 = __dst;
  *(void *)(a1 + 544) = v23;
  HIBYTE(v23) = 0;
  LOBYTE(__dst) = 0;
  *(_OWORD *)(a1 + 616) = v28;
  *(_OWORD *)(a1 + 632) = v29;
  *(_OWORD *)(a1 + 648) = v30;
  *(_OWORD *)(a1 + 664) = v31;
  *(_OWORD *)(a1 + 552) = v24;
  *(_OWORD *)(a1 + 568) = v25;
  *(_OWORD *)(a1 + 584) = v26;
  *(_OWORD *)(a1 + 600) = v27;
  if (v21 < 0) {
    operator delete((void *)__p);
  }
  *(int32x2_t *)(a1 + 96) = vadd_s32(vdup_n_s32(2 * *(_DWORD *)(a1 + 16)), (int32x2_t)0x200000004);
  sub_BD5704(a1 + 424, *(void *)(a1 + 8));
}

void sub_B191BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_B191D8(uint64_t a1)
{
  if (sub_A276F8(*(void *)(a1 + 24)))
  {
    int v2 = *(_DWORD *)(a1 + 68);
    int v3 = *(_DWORD *)(a1 + 240);
    *(_DWORD *)(a1 + 240) = v3 + 1;
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v22 = 0x1FFFFFFFDLL;
    int v5 = sub_AD28B0(v4, &v22);
    int v23 = v5;
    LODWORD(v22) = 0;
    uint64_t v6 = *(void *)(a1 + 192);
    unsigned int v7 = (char *)(v6 + ((unint64_t)*(unsigned int *)(sub_B1041C(a1 + 104, (unsigned int *)&v22) + 4) << 6));
    LODWORD(v22) = 0;
    uint64_t v8 = *(void *)(a1 + 192);
    uint64_t v9 = sub_B1041C(a1 + 104, (unsigned int *)&v22);
    sub_B10058(a1 + 104, 0, v7, (unsigned char *)(v8 + ((unint64_t)*(unsigned int *)(v9 + 8) << 6)));
    long long v13 = xmmword_20E2060;
    uint64_t v14 = -1;
    int v15 = v3;
    int v16 = v2;
    uint64_t v17 = 0;
    int v18 = 0;
    int v19 = 10 * v2;
    uint64_t v20 = -1;
    int v21 = 0x7FFFFFFF;
    sub_B1AD3C((void *)(a1 + 104), &v13, 0, 0, 1);
    int v10 = *(_DWORD *)(a1 + 96);
    unsigned int v11 = v10 + v10 * v5;
    unsigned int v12 = v11 + 2;
    if (*(unsigned char *)(a1 + 20))
    {
      if (!sub_B1AE6C((void *)(a1 + 104), 0, v12, v11, v10 + v10 * *(_DWORD *)(a1 + 416), 0x80000000)) {
        return;
      }
    }
    else if (!sub_B1AE6C((void *)(a1 + 104), 0, v12, v11, 0xFFFFFFFF, 0x80000000))
    {
      return;
    }
    sub_A3EF14((uint64_t *)(a1 + 248), &v23);
  }
}

double sub_B19344(uint64_t a1, int a2)
{
  sub_725D0((uint64_t)v34);
  uint64_t v4 = *(unsigned int **)(a1 + 272);
  int v5 = *(unsigned int **)(a1 + 280);
  if (v4 != v5)
  {
    int v6 = a2 + 1;
    int v7 = a2 + 2;
    int v32 = ~a2;
    while (1)
    {
      unsigned int v33 = *v4;
      unint64_t v8 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), v33);
      if (HIDWORD(v8) == 1 && (v8 + 3) < 2)
      {
LABEL_12:
        int v13 = 0;
        goto LABEL_17;
      }
      uint64_t v10 = *(void *)(*(void *)(a1 + 24) + 4120);
      uint64_t v11 = v10 + 24;
      if (*(unsigned char *)(v10 + 17)) {
        break;
      }
      unsigned int v12 = (int *)sub_498D5C(v11, __ROR8__(v8, 32), 0, "stop");
      int v16 = (unsigned __int16 *)((char *)v12 - *v12);
      if (*v16 >= 0x15u)
      {
        unsigned int v15 = v16[10];
        if (v15) {
          goto LABEL_15;
        }
      }
      int v13 = 300;
LABEL_17:
      unsigned int v35 = 0;
      uint64_t v17 = *(void *)(a1 + 192);
      int v18 = (char *)(v17 + ((unint64_t)*(unsigned int *)(sub_B1041C(a1 + 104, &v35) + 4) << 6));
      unsigned int v35 = 0;
      uint64_t v19 = *(void *)(a1 + 192);
      uint64_t v20 = sub_B1041C(a1 + 104, &v35);
      sub_B10058(a1 + 104, 0, v18, (unsigned char *)(v19 + ((unint64_t)*(unsigned int *)(v20 + 8) << 6)));
      sub_B1B428((void *)(a1 + 104), v6 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * v33, 0);
      unsigned int v35 = 0;
      uint64_t v21 = *(void *)(a1 + 192);
      uint64_t v22 = (unsigned int *)(v21 + ((unint64_t)*(unsigned int *)(sub_B1041C(a1 + 104, &v35) + 4) << 6));
      unsigned int v35 = 0;
      uint64_t v23 = *(void *)(a1 + 192);
      for (uint64_t i = (unsigned int *)(v23 + ((unint64_t)*(unsigned int *)(sub_B1041C(a1 + 104, &v35) + 8) << 6));
            v22 != i;
            v22 += 16)
      {
        unsigned int *v22 = v33;
        unsigned int v25 = v22[7];
        v22[3] = v25;
        v22[4] = -1;
        v22[7] = v25 + v13 / -10;
      }
      unsigned int v26 = v33;
      int v27 = *(_DWORD *)(a1 + 96);
      if (*(unsigned char *)(a1 + 20))
      {
        unsigned int v28 = v27 + v27 * *(_DWORD *)(a1 + 416) + 1;
        uint64_t v29 = *(void *)(a1 + 48);
        if (!v29) {
          goto LABEL_23;
        }
      }
      else
      {
        unsigned int v28 = -1;
        uint64_t v29 = *(void *)(a1 + 48);
        if (!v29)
        {
LABEL_23:
          int v30 = 0x80000000;
          goto LABEL_24;
        }
      }
      int v30 = sub_AD7004(v29, v33, *(_DWORD *)(a1 + 100) + v32);
LABEL_24:
      if (sub_B1AE6C((void *)(a1 + 104), 0, v7 + v27 + v27 * v26, v27 + v27 * v26 + 1, v28, v30)) {
        sub_A3EF14((uint64_t *)(a1 + 296), &v33);
      }
      if (++v4 == v5) {
        goto LABEL_26;
      }
    }
    unsigned int v12 = (int *)sub_A1A290(v11, v8, 0, "transfers at stop");
    int v13 = 0;
    uint64_t v14 = (unsigned __int16 *)((char *)v12 - *v12);
    if (*v14 < 5u) {
      goto LABEL_17;
    }
    unsigned int v15 = v14[2];
    if (!v15) {
      goto LABEL_12;
    }
LABEL_15:
    int v13 = 10 * *(int *)((char *)v12 + v15);
    goto LABEL_17;
  }
LABEL_26:
  double result = sub_72688((uint64_t)v34) + *(double *)(a1 + 568);
  *(double *)(a1 + 568) = result;
  return result;
}

double sub_B19600(uint64_t a1, int a2)
{
  sub_725D0((uint64_t)v290);
  uint64_t v4 = *(unsigned int **)(a1 + 272);
  __int16 v271 = *(unsigned int **)(a1 + 280);
  if (v4 != v271)
  {
    int v276 = a2 + 2;
    int v277 = a2 + 1;
    int v274 = ~a2;
    uint64_t v275 = (uint64_t *)(a1 + 296);
    long long v270 = (void **)(a1 + 320);
    uint64_t v273 = a1;
    uint64_t v282 = (void *)(a1 + 104);
    while (1)
    {
      __int16 v272 = v4;
      unsigned int v283 = *v4;
      int v5 = (unint64_t *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), *v4);
      sub_A28D38((uint64_t)&v284, *(void *)(a1 + 24), *v5);
      int v6 = v285;
      int v7 = &v286;
      if (v289) {
        int v7 = v288;
      }
      if ((unint64_t)v285 < *v7) {
        break;
      }
LABEL_3:
      uint64_t v4 = v272 + 1;
      if (v272 + 1 == v271) {
        goto LABEL_316;
      }
    }
LABEL_13:
    uint64_t v11 = 0;
    unint64_t v12 = __ROR8__(*v6, 32);
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = *(void *)(v13 + 72) - 1;
    unint64_t v15 = 0xC4CEB9FE1A85EC53
        * ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) >> 33));
    unint64_t v16 = v15 ^ (v15 >> 33);
    uint64_t v17 = *(void *)(v13 + 48);
    uint64_t v18 = v17 + 11;
    uint64_t v19 = -1;
    for (unint64_t i = v16; ; unint64_t i = v11 + v21)
    {
      uint64_t v21 = i & v14;
      unint64_t v22 = (i & v14) / 0x30;
      unint64_t v23 = v21 - 48 * v22;
      if (((*(unsigned __int8 *)(v17 + 16 * v22 + (v23 >> 3) + 10) >> (v23 & 7)) & 1) == 0)
      {
        if (v19 == -1) {
          unint64_t v59 = v21;
        }
        else {
          unint64_t v59 = v19;
        }
        if (!sub_AD2F40(*(void *)(a1 + 32), 1)) {
          goto LABEL_98;
        }
        goto LABEL_55;
      }
      uint64_t v24 = *(void *)(v17 + 16 * v22);
      if (!*(void *)(v13 + 40)) {
        goto LABEL_33;
      }
      unsigned int v25 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
      if ((unsigned __int16)(v21 - 48 * v22) < 9u)
      {
        __int16 v26 = 0;
        LOBYTE(v31) = v21 - 48 * v22;
        goto LABEL_29;
      }
      __int16 v26 = 0;
      uint64_t v27 = (unsigned __int16)(v21 - 48 * v22 - 9) >> 3;
      if ((unsigned __int16)(v21 - 48 * v22 - 9) >> 3)
      {
        __int16 v28 = 0;
        uint64_t v29 = v27 + 1;
        uint64_t v30 = (v27 + 1) & 0x3FFE;
        unsigned __int16 v31 = v23 - 8 * v30;
        int v32 = &v25[v30];
        unsigned int v33 = (unsigned __int8 *)(v18 + 16 * v22);
        uint64_t v34 = v30;
        do
        {
          uint64_t v35 = *(v33 - 1);
          int v36 = *v33;
          v33 += 2;
          v26 += byte_20EBFB6[v35];
          v28 += byte_20EBFB6[v36];
          v34 -= 2;
        }
        while (v34);
        v26 += v28;
        if (v29 == v30) {
          goto LABEL_28;
        }
      }
      else
      {
        unsigned __int16 v31 = v21 - 48 * v22;
        int v32 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
      }
      do
      {
        int v37 = *v32++;
        v26 += byte_20EBFB6[v37];
        v31 -= 8;
      }
      while (v31 > 8u);
LABEL_28:
      v25 += ((unsigned __int16)(v23 - 9) >> 3) + 1;
LABEL_29:
      unsigned int v38 = (_DWORD *)(v24
                     + 12
                     * (unsigned __int16)(v26 + byte_20EBFB6[~(-1 << v31) & (unint64_t)*v25]));
      BOOL v39 = *(_DWORD *)(v13 + 36) == v38[1] && *(_DWORD *)(v13 + 32) == *v38;
      if (v39)
      {
        if (v19 == -1) {
          uint64_t v19 = v21;
        }
        goto LABEL_16;
      }
LABEL_33:
      int v40 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
      if ((unsigned __int16)(v21 - 48 * v22) < 9u)
      {
        __int16 v41 = 0;
        uint64_t v52 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
        LOBYTE(v46) = v21 - 48 * v22;
        goto LABEL_43;
      }
      __int16 v41 = 0;
      uint64_t v42 = (unsigned __int16)(v21 - 48 * v22 - 9) >> 3;
      if ((unsigned __int16)(v21 - 48 * v22 - 9) >> 3)
      {
        __int16 v43 = 0;
        uint64_t v44 = v42 + 1;
        uint64_t v45 = (v42 + 1) & 0x3FFE;
        unsigned __int16 v46 = v23 - 8 * v45;
        uint64_t v47 = &v40[v45];
        unint64_t v48 = (unsigned __int8 *)(v18 + 16 * v22);
        uint64_t v49 = v45;
        do
        {
          uint64_t v50 = *(v48 - 1);
          int v51 = *v48;
          v48 += 2;
          v41 += byte_20EBFB6[v50];
          v43 += byte_20EBFB6[v51];
          v49 -= 2;
        }
        while (v49);
        v41 += v43;
        if (v44 == v45) {
          goto LABEL_42;
        }
      }
      else
      {
        unsigned __int16 v46 = v21 - 48 * v22;
        uint64_t v47 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
      }
      do
      {
        int v53 = *v47++;
        v41 += byte_20EBFB6[v53];
        v46 -= 8;
      }
      while (v46 > 8u);
LABEL_42:
      uint64_t v52 = &v40[((unsigned __int16)(v23 - 9) >> 3) + 1];
LABEL_43:
      if (v12 == *(void *)(v24
                            + 12
                            * (unsigned __int16)(v41 + byte_20EBFB6[~(-1 << v46) & (unint64_t)*v52])))
      {
        if (v21 != -1)
        {
          if ((unsigned __int16)(v21 - 48 * v22) < 9u)
          {
            __int16 v56 = 0;
          }
          else
          {
            if ((((_WORD)v21 - 48 * (_WORD)v22 - 8) & 0xFFF8) != 0) {
              __int16 v54 = 8;
            }
            else {
              __int16 v54 = v21 - 48 * v22 - 8;
            }
            unsigned __int16 v55 = ~v54 + v21 - 48 * v22;
            if (v55 < 8u)
            {
              __int16 v56 = 0;
              unsigned __int16 v57 = v23;
              unint64_t v58 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
              goto LABEL_103;
            }
            __int16 v105 = 0;
            __int16 v106 = 0;
            uint64_t v107 = (v55 >> 3) + 1;
            unsigned __int16 v57 = v23 - 8 * (((v55 >> 3) + 1) & 0x3FFE);
            unint64_t v58 = &v40[v107 & 0x3FFE];
            unint64_t v108 = (unsigned __int8 *)(v17 + 16 * v22 + 11);
            uint64_t v109 = v107 & 0x3FFE;
            do
            {
              uint64_t v110 = *(v108 - 1);
              int v111 = *v108;
              v108 += 2;
              v105 += byte_20EBFB6[v110];
              v106 += byte_20EBFB6[v111];
              v109 -= 2;
            }
            while (v109);
            __int16 v56 = v106 + v105;
            if ((v107 & 0x3FFE) != v107)
            {
              do
              {
LABEL_103:
                int v112 = *v58++;
                v56 += byte_20EBFB6[v112];
                v57 -= 8;
              }
              while (v57 > 8u);
            }
            v40 += ((unsigned __int16)(v23 - 9) >> 3) + 1;
            LOBYTE(v23) = v57;
          }
          uint64_t v113 = *(void *)(v13 + 56);
          unsigned __int16 v114 = v56 + byte_20EBFB6[~(-1 << v23) & (unint64_t)*v40];
          uint64_t v115 = v17 + 16 * v22;
          if (*(unsigned __int16 *)(v115 + 8) != v114 || v115 + 16 == v113)
          {
            unsigned int v104 = (_DWORD *)(v24 + 12 * v114);
          }
          else
          {
            uint64_t v117 = v115 + 32;
            do
            {
              if (*(_WORD *)(v117 - 8)) {
                BOOL v118 = 1;
              }
              else {
                BOOL v118 = v117 == v113;
              }
              v117 += 16;
            }
            while (!v118);
            unsigned int v104 = *(_DWORD **)(v117 - 32);
          }
          goto LABEL_117;
        }
        unint64_t v59 = -1;
        if (!sub_AD2F40(*(void *)(a1 + 32), 1))
        {
LABEL_98:
          unint64_t v291 = v12;
          int v292 = -1;
          sub_AD3484(v13, (uint64_t *)&v291, v59, v293);
          unsigned int v104 = (_DWORD *)v294;
          goto LABEL_117;
        }
LABEL_55:
        uint64_t v60 = 0;
        unint64_t v291 = v12;
        int v292 = -1;
        uint64_t v61 = *(void *)(v13 + 72) - 1;
        uint64_t v62 = *(void *)(v13 + 48);
        uint64_t v63 = v62 + 11;
        uint64_t v64 = -1;
        while (2)
        {
          uint64_t v65 = v16 & v61;
          unint64_t v66 = (v16 & v61) / 0x30;
          unint64_t v67 = (v16 & v61) % 0x30;
          if (((*(unsigned __int8 *)(v62 + 16 * v66 + (v67 >> 3) + 10) >> (v67 & 7)) & 1) == 0)
          {
            if (v64 == -1) {
              unint64_t v103 = v16 & v61;
            }
            else {
              unint64_t v103 = v64;
            }
            goto LABEL_96;
          }
          uint64_t v68 = *(void *)(v13 + 40);
          uint64_t v69 = *(void *)(v62 + 16 * v66);
          if (!v68) {
            break;
          }
          uint64_t v70 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
          if ((unsigned __int16)((v16 & v61) % 0x30) < 9u)
          {
            __int16 v71 = 0;
            LOBYTE(v72) = (v16 & v61) % 0x30;
            goto LABEL_71;
          }
          __int16 v71 = 0;
          uint64_t v72 = (unsigned __int16)(v65 - 48 * v66 - 9) >> 3;
          if (!((unsigned __int16)(v65 - 48 * v66 - 9) >> 3))
          {
            LODWORD(v72) = (v16 & v61) % 0x30;
            unint64_t v76 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
            do
            {
LABEL_69:
              int v81 = *v76++;
              v71 += byte_20EBFB6[v81];
              LOWORD(v72) = v72 - 8;
            }
            while ((unsigned __int16)v72 > 8u);
            goto LABEL_70;
          }
          __int16 v73 = 0;
          uint64_t v74 = v72 + 1;
          uint64_t v75 = (v72 + 1) & 0x3FFE;
          LOWORD(v72) = v67 - 8 * v75;
          unint64_t v76 = &v70[v75];
          unint64_t v77 = (unsigned __int8 *)(v63 + 16 * v66);
          uint64_t v78 = v75;
          do
          {
            uint64_t v79 = *(v77 - 1);
            int v80 = *v77;
            v77 += 2;
            v71 += byte_20EBFB6[v79];
            v73 += byte_20EBFB6[v80];
            v78 -= 2;
          }
          while (v78);
          v71 += v73;
          if (v74 != v75) {
            goto LABEL_69;
          }
LABEL_70:
          v70 += ((unsigned __int16)(v67 - 9) >> 3) + 1;
LABEL_71:
          uint64_t v82 = (_DWORD *)(v69
                         + 12
                         * (unsigned __int16)(v71 + byte_20EBFB6[~(-1 << v72) & (unint64_t)*v70]));
          if (*(_DWORD *)(v13 + 36) == v82[1] && *(_DWORD *)(v13 + 32) == *v82)
          {
            if (v64 == -1) {
              uint64_t v64 = v16 & v61;
            }
LABEL_58:
            unint64_t v16 = ++v60 + v65;
            continue;
          }
          break;
        }
        uint64_t v84 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
        if ((unsigned __int16)((v16 & v61) % 0x30) < 9u)
        {
          __int16 v85 = 0;
          uint64_t v96 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
          LOBYTE(v90) = (v16 & v61) % 0x30;
          goto LABEL_85;
        }
        __int16 v85 = 0;
        uint64_t v86 = (unsigned __int16)(v65 - 48 * v66 - 9) >> 3;
        if (!((unsigned __int16)(v65 - 48 * v66 - 9) >> 3))
        {
          unsigned __int16 v90 = (v16 & v61) % 0x30;
          unint64_t v91 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
          do
          {
LABEL_83:
            int v97 = *v91++;
            v85 += byte_20EBFB6[v97];
            v90 -= 8;
          }
          while (v90 > 8u);
          goto LABEL_84;
        }
        __int16 v87 = 0;
        uint64_t v88 = v86 + 1;
        uint64_t v89 = (v86 + 1) & 0x3FFE;
        unsigned __int16 v90 = v67 - 8 * v89;
        unint64_t v91 = &v84[v89];
        uint64_t v92 = (unsigned __int8 *)(v63 + 16 * v66);
        uint64_t v93 = v89;
        do
        {
          uint64_t v94 = *(v92 - 1);
          int v95 = *v92;
          v92 += 2;
          v85 += byte_20EBFB6[v94];
          v87 += byte_20EBFB6[v95];
          v93 -= 2;
        }
        while (v93);
        v85 += v87;
        if (v88 != v89) {
          goto LABEL_83;
        }
LABEL_84:
        uint64_t v96 = &v84[((unsigned __int16)(v67 - 9) >> 3) + 1];
LABEL_85:
        if (v12 != *(void *)(v69
                              + 12
                              * (unsigned __int16)(v85
                                                 + byte_20EBFB6[~(-1 << v90) & (unint64_t)*v96])))
          goto LABEL_58;
        if (v65 == -1)
        {
          unint64_t v103 = -1;
LABEL_96:
          sub_AD3484(v13, (uint64_t *)&v291, v103, v293);
          unsigned int v104 = (_DWORD *)v294;
          goto LABEL_117;
        }
        if ((unsigned __int16)((v16 & v61) % 0x30) < 9u)
        {
          __int16 v100 = 0;
        }
        else
        {
          if ((((_WORD)v65 - 48 * (_WORD)v66 - 8) & 0xFFF8) != 0) {
            __int16 v98 = 8;
          }
          else {
            __int16 v98 = v65 - 48 * v66 - 8;
          }
          unsigned __int16 v99 = ~v98 + v65 - 48 * v66;
          if (v99 < 8u)
          {
            __int16 v100 = 0;
            unsigned __int16 v101 = v67;
            uint64_t v102 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
            goto LABEL_185;
          }
          __int16 v181 = 0;
          __int16 v182 = 0;
          uint64_t v183 = (v99 >> 3) + 1;
          unsigned __int16 v101 = v67 - 8 * (((v99 >> 3) + 1) & 0x3FFE);
          uint64_t v102 = &v84[v183 & 0x3FFE];
          int32x2_t v184 = (unsigned __int8 *)(v62 + 16 * v66 + 11);
          uint64_t v185 = v183 & 0x3FFE;
          do
          {
            uint64_t v186 = *(v184 - 1);
            int v187 = *v184;
            v184 += 2;
            v181 += byte_20EBFB6[v186];
            v182 += byte_20EBFB6[v187];
            v185 -= 2;
          }
          while (v185);
          __int16 v100 = v182 + v181;
          if ((v183 & 0x3FFE) != v183)
          {
            do
            {
LABEL_185:
              int v188 = *v102++;
              v100 += byte_20EBFB6[v188];
              v101 -= 8;
            }
            while (v101 > 8u);
          }
          v84 += ((unsigned __int16)(v67 - 9) >> 3) + 1;
          LOBYTE(v67) = v101;
        }
        uint64_t v189 = v62 + 16 * v66;
        unsigned int v190 = *(_DWORD ***)(v13 + 56);
        unsigned __int16 v191 = v100 + byte_20EBFB6[~(-1 << v67) & (unint64_t)*v84];
        unsigned int v104 = (_DWORD *)(v69 + 12 * v191);
        if (*(unsigned __int16 *)(v189 + 8) == v191)
        {
          uint64_t v192 = v189 + 16;
          if ((_DWORD **)(v189 + 16) != v190)
          {
            while (1)
            {
              int v193 = (_DWORD **)v192;
              if (*(_WORD *)(v192 + 8)) {
                break;
              }
              v192 += 16;
              if (v193 + 2 == v190)
              {
                uint64_t v189 = *(void *)(v13 + 56);
                goto LABEL_193;
              }
            }
            uint64_t v189 = v192;
LABEL_193:
            unsigned int v104 = *v193;
            goto LABEL_194;
          }
        }
        else
        {
LABEL_194:
          if ((_DWORD **)v189 != v190 && v68)
          {
            do
            {
              if (*(_DWORD *)(v13 + 36) != v104[1] || *(_DWORD *)(v13 + 32) != *v104) {
                break;
              }
              v104 += 3;
              if (v104 == (_DWORD *)(*(void *)v189 + 12 * *(unsigned __int16 *)(v189 + 8)))
              {
                v189 += 16;
                if ((_DWORD **)v189 != v190)
                {
                  do
                  {
                    if (*(_WORD *)(v189 + 8))
                    {
                      unsigned int v104 = *(_DWORD **)v189;
                      goto LABEL_198;
                    }
                    v189 += 16;
                  }
                  while ((_DWORD **)v189 != v190);
                  unsigned int v104 = *(_DWORD **)(v189 - 16);
                }
                break;
              }
LABEL_198:
              ;
            }
            while ((_DWORD **)v189 != v190);
          }
        }
LABEL_117:
        unsigned int v119 = v104[2];
        if (v119 == -1)
        {
          int v120 = *(_DWORD *)(v13 + 112);
          *(_DWORD *)(v13 + 112) = v120 + 1;
          v104[2] = v120;
          uint64_t v122 = *(unint64_t **)(v13 + 96);
          unint64_t v121 = *(void *)(v13 + 104);
          if ((unint64_t)v122 < v121)
          {
            unint64_t *v122 = v12;
            uint64_t v123 = (uint64_t)(v122 + 1);
            goto LABEL_142;
          }
          unsigned __int16 v124 = (unint64_t **)(v13 + 88);
          uint64_t v125 = *(char **)(v13 + 88);
          uint64_t v126 = ((char *)v122 - v125) >> 3;
          unint64_t v127 = v126 + 1;
          if ((unint64_t)(v126 + 1) >> 61) {
            sub_2E00();
          }
          uint64_t v128 = v121 - (void)v125;
          if (v128 >> 2 > v127) {
            unint64_t v127 = v128 >> 2;
          }
          if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v127 = 0x1FFFFFFFFFFFFFFFLL;
          }
          unint64_t v279 = v127;
          if (v127)
          {
            if (v127 >> 61) {
LABEL_318:
            }
              sub_188D718();
            int v129 = (char *)operator new(8 * v127);
            unsigned __int16 v124 = (unint64_t **)(v13 + 88);
            unint64_t v130 = (unint64_t *)&v129[8 * v126];
            *unint64_t v130 = v12;
            uint64_t v123 = (uint64_t)(v130 + 1);
            if (v122 != (unint64_t *)v125)
            {
LABEL_130:
              unint64_t v131 = (char *)(v122 - 1) - v125;
              if (v131 < 0x58)
              {
                a1 = v273;
                goto LABEL_139;
              }
              a1 = v273;
              if ((unint64_t)(v125 - v129) < 0x20) {
                goto LABEL_322;
              }
              uint64_t v132 = (v131 >> 3) + 1;
              uint64_t v133 = 8 * (v132 & 0x3FFFFFFFFFFFFFFCLL);
              __int16 v134 = &v122[v133 / 0xFFFFFFFFFFFFFFF8];
              unint64_t v130 = (unint64_t *)((char *)v130 - v133);
              unsigned __int16 v135 = &v129[8 * v126 - 16];
              uint64_t v136 = v122 - 2;
              uint64_t v137 = v132 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v138 = *(_OWORD *)v136;
                *((_OWORD *)v135 - 1) = *((_OWORD *)v136 - 1);
                *(_OWORD *)unsigned __int16 v135 = v138;
                v135 -= 32;
                v136 -= 4;
                v137 -= 4;
              }
              while (v137);
              uint64_t v122 = v134;
              if (v132 != (v132 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_322:
                do
                {
LABEL_139:
                  unint64_t v139 = *--v122;
                  *--unint64_t v130 = v139;
                }
                while (v122 != (unint64_t *)v125);
              }
              uint64_t v122 = *v124;
              *(void *)(v13 + 88) = v130;
              *(void *)(v13 + 96) = v123;
              *(void *)(v13 + 104) = &v129[8 * v279];
              if (v122) {
LABEL_141:
              }
                operator delete(v122);
LABEL_142:
              *(void *)(v13 + 96) = v123;
              unsigned int v119 = v104[2];
              *(double *)(a1 + 624) = *(double *)(a1 + 624) + 1.0;
              if (v283 == v119) {
                goto LABEL_273;
              }
              goto LABEL_143;
            }
          }
          else
          {
            int v129 = 0;
            unint64_t v130 = (unint64_t *)(8 * v126);
            *(void *)(8 * v126) = v12;
            uint64_t v123 = 8 * v126 + 8;
            if (v122 != (unint64_t *)v125) {
              goto LABEL_130;
            }
          }
          a1 = v273;
          *(void *)(v13 + 88) = v130;
          *(void *)(v13 + 96) = v123;
          *(void *)(v13 + 104) = &v129[8 * v279];
          if (v122) {
            goto LABEL_141;
          }
          goto LABEL_142;
        }
        *(double *)(a1 + 624) = *(double *)(a1 + 624) + 1.0;
        if (v283 == v119) {
          goto LABEL_273;
        }
LABEL_143:
        LODWORD(v293[0]) = 0;
        uint64_t v140 = *(void *)(a1 + 192);
        unint64_t v141 = (char *)(v140
                      + ((unint64_t)*(unsigned int *)(sub_B1041C((uint64_t)v282, (unsigned int *)v293) + 4) << 6));
        LODWORD(v293[0]) = 0;
        uint64_t v142 = *(void *)(a1 + 192);
        uint64_t v143 = sub_B1041C((uint64_t)v282, (unsigned int *)v293);
        sub_B10058((uint64_t)v282, 0, v141, (unsigned char *)(v142 + ((unint64_t)*(unsigned int *)(v143 + 8) << 6)));
        unsigned int v144 = v277 + *(_DWORD *)(a1 + 96) * (v283 + 1);
        LODWORD(v293[0]) = v144;
        if (*(void *)(a1 + 184) == *(void *)(a1 + 144)) {
          goto LABEL_216;
        }
        unint64_t v145 = sub_B1067C((uint64_t)v282, (unsigned int *)v293);
        if (v145 == -1) {
          goto LABEL_216;
        }
        uint64_t v146 = *(void *)(a1 + 152);
        uint64_t v147 = v146 + 16 * (v145 / 0x30);
        uint64_t v148 = (unsigned __int8 *)(v147 + 10);
        int v149 = v145 % 0x30;
        if ((unsigned __int16)(v145 % 0x30) < 9u)
        {
          __int16 v151 = 0;
          goto LABEL_157;
        }
        uint64_t v150 = (unsigned __int16)(v145 % 0x30 - 9) >> 3;
        __int16 v151 = 0;
        if (!((unsigned __int16)(v145 % 0x30 - 9) >> 3))
        {
          unsigned __int16 v155 = v145 % 0x30;
          uint64_t v156 = (unsigned __int8 *)(v147 + 10);
          do
          {
LABEL_155:
            int v161 = *v156++;
            v151 += byte_20EC1B6[v161];
            v155 -= 8;
          }
          while (v155 > 8u);
          goto LABEL_156;
        }
        __int16 v152 = 0;
        uint64_t v153 = v150 + 1;
        uint64_t v154 = (v150 + 1) & 0x3FFE;
        unsigned __int16 v155 = v149 - 8 * v154;
        uint64_t v156 = &v148[v154];
        uint64_t v157 = (unsigned __int8 *)(v146 + 16 * (v145 / 0x30) + 11);
        uint64_t v158 = v154;
        do
        {
          uint64_t v159 = *(v157 - 1);
          int v160 = *v157;
          v157 += 2;
          v151 += byte_20EC1B6[v159];
          v152 += byte_20EC1B6[v160];
          v158 -= 2;
        }
        while (v158);
        v151 += v152;
        if (v153 != v154) {
          goto LABEL_155;
        }
LABEL_156:
        v148 += ((unsigned __int16)(v149 - 9) >> 3) + 1;
        LOBYTE(v149) = v155;
LABEL_157:
        uint64_t v162 = *(_DWORD ***)(a1 + 160);
        unsigned __int16 v163 = v151 + byte_20EC1B6[~(-1 << v149) & (unint64_t)*v148];
        if (*(unsigned __int16 *)(v147 + 8) != v163)
        {
          uint64_t v165 = (_DWORD *)(*(void *)v147 + 12 * v163);
          if ((_DWORD **)v147 != v162) {
            goto LABEL_165;
          }
          goto LABEL_173;
        }
        v147 += 16;
        if ((_DWORD **)v147 != v162)
        {
          while (1)
          {
            unsigned int v164 = (_DWORD **)v147;
            if (*(_WORD *)(v147 + 8)) {
              break;
            }
            v147 += 16;
            if (v164 + 2 == v162)
            {
              uint64_t v147 = *(void *)(a1 + 160);
              break;
            }
          }
          uint64_t v165 = *v164;
          if ((_DWORD **)v147 != v162)
          {
LABEL_165:
            if (*(void *)(a1 + 144))
            {
              while (*(_DWORD *)(a1 + 136) == *v165)
              {
                v165 += 3;
                if (v165 == (_DWORD *)(*(void *)v147 + 12 * *(unsigned __int16 *)(v147 + 8)))
                {
                  while (1)
                  {
                    v147 += 16;
                    if ((_DWORD **)v147 == v162) {
                      goto LABEL_216;
                    }
                    if (*(_WORD *)(v147 + 8))
                    {
                      uint64_t v165 = *(_DWORD **)v147;
                      break;
                    }
                  }
                }
                if ((_DWORD **)v147 == v162) {
                  break;
                }
              }
            }
          }
LABEL_173:
          if ((_DWORD **)v147 != v162)
          {
            int v168 = v165 + 1;
            int v167 = v165[1];
            int v166 = v168[1];
            int v169 = v166 - v167;
            if (v166 != v167)
            {
              uint64_t v170 = 0;
              unsigned int v171 = 0;
              do
              {
                int v172 = (_OWORD *)sub_B11F04(v282, v144, v171);
                long long v173 = v172[2];
                long long v174 = v172[3];
                long long v175 = v172[1];
                v293[0] = *v172;
                long long v294 = v173;
                long long v295 = v174;
                v293[1] = v175;
                v170 |= sub_B1B038((uint64_t)v282, (uint64_t)v293, 0, 0, 1) & 0xFF00;
                ++v171;
              }
              while (v169 != v171);
              if (v170)
              {
                LODWORD(v293[0]) = 0;
                uint64_t v176 = *(void *)(a1 + 192);
                uint64_t v177 = v176
                     + ((unint64_t)*(unsigned int *)(sub_B1041C((uint64_t)v282, (unsigned int *)v293) + 4) << 6);
                LODWORD(v293[0]) = 0;
                uint64_t v178 = *(void *)(a1 + 192);
                uint64_t v179 = sub_B1041C((uint64_t)v282, (unsigned int *)v293);
                int v180 = (long long *)(v178 + ((unint64_t)*(unsigned int *)(v179 + 8) << 6));
                if ((long long *)v177 != v180)
                {
                  while (*(_DWORD *)(v177 + 28) != 0x7FFFFFFF)
                  {
                    v177 += 64;
                    if ((long long *)v177 == v180)
                    {
                      uint64_t v177 = v178 + ((unint64_t)*(unsigned int *)(v179 + 8) << 6);
                      goto LABEL_215;
                    }
                  }
                  if ((long long *)v177 != v180)
                  {
                    for (uint64_t j = (long long *)(v177 + 64); j != v180; j += 4)
                    {
                      if (*((_DWORD *)j + 7) != 0x7FFFFFFF)
                      {
                        long long v196 = *j;
                        long long v197 = j[1];
                        long long v198 = j[3];
                        *(_OWORD *)(v177 + 32) = j[2];
                        *(_OWORD *)(v177 + 48) = v198;
                        *(_OWORD *)uint64_t v177 = v196;
                        *(_OWORD *)(v177 + 16) = v197;
                        v177 += 64;
                      }
                    }
                  }
                }
LABEL_215:
                LODWORD(v293[0]) = 0;
                uint64_t v199 = *(void *)(a1 + 192);
                uint64_t v200 = sub_B1041C((uint64_t)v282, (unsigned int *)v293);
                sub_B10058((uint64_t)v282, 0, (char *)v177, (unsigned char *)(v199 + ((unint64_t)*(unsigned int *)(v200 + 8) << 6)));
              }
            }
          }
        }
LABEL_216:
        LODWORD(v293[0]) = 0;
        uint64_t v201 = *(void *)(a1 + 192);
        int v202 = (unsigned int *)(v201
                              + ((unint64_t)*(unsigned int *)(sub_B1041C((uint64_t)v282, (unsigned int *)v293) + 4) << 6));
        LODWORD(v293[0]) = 0;
        uint64_t v203 = *(void *)(a1 + 192);
        int v204 = (unsigned int *)(v203
                              + ((unint64_t)*(unsigned int *)(sub_B1041C((uint64_t)v282, (unsigned int *)v293) + 8) << 6));
        if (v202 != v204)
        {
          __int16 v205 = v285;
          do
          {
            unsigned int *v202 = v283;
            unsigned int v206 = v202[7];
            unsigned int v207 = v202[8];
            v202[3] = v206;
            v202[4] = -1;
            int v208 = *((_DWORD *)v205 + 2);
            int v209 = v208 / -10;
            int v210 = v208 / 10;
            int v211 = v208 % 10;
            if (v208 < 0) {
              char v212 = -5;
            }
            else {
              char v212 = 5;
            }
            int v213 = (char)(v212 + v211);
            v202[7] = v209 + v206 + (((-103 * v213) >> 15) & 1) + ((-103 * v213) >> 10);
            v202[8] = v207 + v210 + (((103 * v213) >> 15) & 1) + ((103 * v213) >> 10);
            v202 += 16;
          }
          while (v202 != v204);
        }
        if (*(unsigned char *)(a1 + 20))
        {
          unsigned int v278 = *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * *(_DWORD *)(a1 + 416) + 1;
          int v280 = *(_DWORD *)(a1 + 96);
          uint64_t v214 = *(void *)(a1 + 48);
          if (v214) {
            goto LABEL_224;
          }
LABEL_268:
          int v238 = 0x80000000;
LABEL_269:
          if (!sub_B1AE6C(v282, 0, v276 + v280 * (v119 + 1), v280 * (v119 + 1) + 1, v278, v238)) {
            goto LABEL_273;
          }
          if (*(void *)(a1 + 304) <= (unint64_t)v119) {
            sub_A3E96C((uint64_t)v275, v119 + 1, 0);
          }
          uint64_t v242 = *v275;
          if ((*(void *)(*v275 + 8 * ((unint64_t)v119 >> 6)) & (1 << v119)) != 0)
          {
LABEL_273:
            unint64_t v9 = (unint64_t)v286;
            int v6 = (void *)((char *)v285 + 12);
            __int16 v285 = v6;
            if (v6 != v286) {
              goto LABEL_274;
            }
LABEL_298:
            int v6 = v287;
            unint64_t v10 = v288[0];
            __int16 v285 = v287;
            int v8 = 1;
            unsigned __int8 v289 = 1;
            if (*(unsigned char *)(v284 + 16)) {
              goto LABEL_299;
            }
            goto LABEL_10;
          }
          uint64_t v244 = *(char **)(a1 + 328);
          unint64_t v243 = *(void *)(a1 + 336);
          if ((unint64_t)v244 < v243)
          {
            *(_DWORD *)uint64_t v244 = v119;
            uint64_t v245 = (uint64_t)(v244 + 4);
            goto LABEL_297;
          }
          unint64_t v246 = (char *)*v270;
          uint64_t v247 = v244 - (unsigned char *)*v270;
          uint64_t v248 = v247 >> 2;
          unint64_t v249 = (v247 >> 2) + 1;
          if (v249 >> 62) {
            sub_2E00();
          }
          uint64_t v250 = v243 - (void)v246;
          if (v250 >> 1 > v249) {
            unint64_t v249 = v250 >> 1;
          }
          if ((unint64_t)v250 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v249 = 0x3FFFFFFFFFFFFFFFLL;
          }
          unint64_t v281 = v249;
          if (!v249)
          {
            char v251 = 0;
            int v252 = (unsigned int *)(4 * v248);
            *(_DWORD *)(4 * v248) = v119;
            uint64_t v245 = 4 * v248 + 4;
            if (v244 == v246) {
              goto LABEL_289;
            }
LABEL_286:
            unint64_t v253 = v244 - 4 - v246;
            unint64_t v254 = v281;
            if (v253 >= 0x2C)
            {
              unint64_t v255 = v244 - &v251[v247];
              a1 = v273;
              if (v255 >= 0x20)
              {
                uint64_t v256 = (v253 >> 2) + 1;
                uint64_t v257 = 4 * (v256 & 0x7FFFFFFFFFFFFFF8);
                uint64_t v258 = &v244[-v257];
                int v252 = (unsigned int *)((char *)v252 - v257);
                int v259 = &v251[4 * v248 - 16];
                unsigned int v260 = v244 - 16;
                uint64_t v261 = v256 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v262 = *(_OWORD *)v260;
                  *(v259 - 1) = *((_OWORD *)v260 - 1);
                  *int v259 = v262;
                  v259 -= 2;
                  v260 -= 32;
                  v261 -= 8;
                }
                while (v261);
                uint64_t v244 = v258;
                if (v256 == (v256 & 0x7FFFFFFFFFFFFFF8)) {
                  goto LABEL_295;
                }
              }
            }
            else
            {
              a1 = v273;
            }
            do
            {
              unsigned int v263 = *((_DWORD *)v244 - 1);
              v244 -= 4;
              *--int v252 = v263;
            }
            while (v244 != v246);
            goto LABEL_295;
          }
          if (v249 >> 62) {
            goto LABEL_318;
          }
          char v251 = operator new(4 * v249);
          int v252 = (unsigned int *)&v251[4 * v248];
          *int v252 = v119;
          uint64_t v245 = (uint64_t)(v252 + 1);
          if (v244 != v246) {
            goto LABEL_286;
          }
LABEL_289:
          a1 = v273;
          unint64_t v254 = v281;
LABEL_295:
          *(void *)(a1 + 320) = v252;
          *(void *)(a1 + 328) = v245;
          *(void *)(a1 + 336) = &v251[4 * v254];
          if (v246)
          {
            uint64_t v264 = v245;
            operator delete(v246);
            uint64_t v245 = v264;
            uint64_t v242 = *v275;
          }
LABEL_297:
          *(void *)(a1 + 328) = v245;
          *(void *)(v242 + 8 * ((unint64_t)v119 >> 6)) |= 1 << v119;
          unint64_t v9 = (unint64_t)v286;
          int v6 = (void *)((char *)v285 + 12);
          __int16 v285 = v6;
          if (v6 == v286) {
            goto LABEL_298;
          }
LABEL_274:
          int v8 = v289;
          unint64_t v10 = v288[0];
          if (*(unsigned char *)(v284 + 16))
          {
LABEL_299:
            if (v8) {
              unint64_t v265 = v10;
            }
            else {
              unint64_t v265 = v9;
            }
            if ((unint64_t)v6 < v265)
            {
              while (1)
              {
                unint64_t v267 = __ROR8__(*v6, 32);
                if (HIDWORD(v267) == 1 && (v267 + 3) < 2) {
                  break;
                }
                if (sub_2AB7E4(**(void **)(v284 + 4120)))
                {
                  LOBYTE(v8) = v289;
                  int v6 = v285;
                  unint64_t v9 = (unint64_t)v286;
                  break;
                }
                unint64_t v9 = (unint64_t)v286;
                int v6 = (void *)((char *)v285 + 12);
                __int16 v285 = v6;
                if (v6 == v286)
                {
                  int v6 = v287;
                  __int16 v285 = v287;
                  LOBYTE(v8) = 1;
                  unsigned __int8 v289 = 1;
                  if ((unint64_t)v287 >= v288[0]) {
                    break;
                  }
                }
                else
                {
                  LOBYTE(v8) = v289;
                  unsigned int v266 = &v286;
                  if (v289) {
                    unsigned int v266 = v288;
                  }
                  if ((unint64_t)v6 >= *v266) {
                    break;
                  }
                }
              }
              unint64_t v10 = v288[0];
            }
          }
LABEL_10:
          if ((_BYTE)v8) {
            unint64_t v9 = v10;
          }
          if ((unint64_t)v6 >= v9) {
            goto LABEL_3;
          }
          goto LABEL_13;
        }
        unsigned int v278 = -1;
        int v280 = *(_DWORD *)(a1 + 96);
        uint64_t v214 = *(void *)(a1 + 48);
        if (!v214) {
          goto LABEL_268;
        }
LABEL_224:
        unsigned int v215 = 0;
        unsigned int v216 = *(_DWORD *)(a1 + 100) + v274;
        while (2)
        {
          while (2)
          {
            LODWORD(v293[0]) = (v119 << *(_DWORD *)v214) | (v216 - v215);
            if (*(void *)(v214 + 88) == *(void *)(v214 + 48)
              || (unint64_t v217 = sub_AD72DC(v214 + 8, (unsigned int *)v293), v217 == -1))
            {
LABEL_253:
              int v238 = *(_DWORD *)(v214 + 4);
              v215 += 2;
              if (v238 != 0x7FFFFFFF || v215 > v216) {
                goto LABEL_269;
              }
              continue;
            }
            break;
          }
          uint64_t v218 = *(void *)(v214 + 56);
          uint64_t v219 = (_DWORD **)(v218 + 16 * (v217 / 0x30));
          uint64_t v220 = (unsigned __int8 *)v219 + 10;
          int v221 = v217 % 0x30;
          if ((unsigned __int16)(v217 % 0x30) >= 9u)
          {
            __int16 v222 = 0;
            uint64_t v223 = (unsigned __int16)(v217 % 0x30 - 9) >> 3;
            if ((unsigned __int16)(v217 % 0x30 - 9) >> 3)
            {
              __int16 v224 = 0;
              uint64_t v225 = v223 + 1;
              uint64_t v226 = (v223 + 1) & 0x3FFE;
              unsigned __int16 v227 = v221 - 8 * v226;
              int v228 = &v220[v226];
              uint64_t v229 = (unsigned __int8 *)(v218 + 16 * (v217 / 0x30) + 11);
              uint64_t v230 = v226;
              do
              {
                uint64_t v231 = *(v229 - 1);
                int v232 = *v229;
                v229 += 2;
                v222 += byte_20EBDB6[v231];
                v224 += byte_20EBDB6[v232];
                v230 -= 2;
              }
              while (v230);
              v222 += v224;
              if (v225 == v226)
              {
LABEL_236:
                v220 += ((unsigned __int16)(v221 - 9) >> 3) + 1;
                LOBYTE(v221) = v227;
                goto LABEL_237;
              }
            }
            else
            {
              unsigned __int16 v227 = v217 % 0x30;
              int v228 = (unsigned __int8 *)v219 + 10;
            }
            do
            {
              int v233 = *v228++;
              v222 += byte_20EBDB6[v233];
              v227 -= 8;
            }
            while (v227 > 8u);
            goto LABEL_236;
          }
          __int16 v222 = 0;
LABEL_237:
          int v234 = *(_DWORD ***)(v214 + 64);
          unsigned __int16 v235 = v222 + byte_20EBDB6[~(-1 << v221) & (unint64_t)*v220];
          if (*((unsigned __int16 *)v219 + 4) == v235)
          {
            v219 += 2;
            if (v219 == v234) {
              goto LABEL_253;
            }
            while (1)
            {
              uint64_t v236 = v219;
              if (*((_WORD *)v219 + 4)) {
                break;
              }
              v219 += 2;
              if (v236 + 2 == v234)
              {
                uint64_t v219 = *(_DWORD ***)(v214 + 64);
                break;
              }
            }
            uint64_t v237 = *v236;
            if (v219 == v234) {
              goto LABEL_253;
            }
          }
          else
          {
            uint64_t v237 = &(*v219)[2 * v235];
            if (v219 == v234) {
              goto LABEL_253;
            }
          }
          if (*(void *)(v214 + 48))
          {
            while (*(_DWORD *)(v214 + 40) == *v237)
            {
              v237 += 2;
              if (v237 == &(*v219)[2 * *((unsigned __int16 *)v219 + 4)])
              {
                while (1)
                {
                  v219 += 2;
                  if (v219 == v234) {
                    goto LABEL_253;
                  }
                  if (*((_WORD *)v219 + 4))
                  {
                    uint64_t v237 = *v219;
                    break;
                  }
                }
              }
              if (v219 == v234) {
                break;
              }
            }
          }
          BOOL v39 = v219 == v234;
          unsigned int v240 = v237 + 1;
          if (v39) {
            unsigned int v240 = (int *)(v214 + 4);
          }
          int v238 = *v240;
          v215 += 2;
          if (*v240 != 0x7FFFFFFF || v215 > v216) {
            goto LABEL_269;
          }
          continue;
        }
      }
LABEL_16:
      ++v11;
    }
  }
LABEL_316:
  double result = sub_72688((uint64_t)v290) + *(double *)(a1 + 568);
  *(double *)(a1 + 568) = result;
  return result;
}

uint64_t sub_B1AC04(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 100);
  if (v1)
  {
    uint64_t v2 = result;
    int v3 = 0;
    uint64_t v4 = (void *)(result + 104);
    do
    {
      unsigned int v15 = 0;
      uint64_t v5 = *(void *)(v2 + 192);
      int v6 = (char *)(v5 + ((unint64_t)*(unsigned int *)(sub_B1041C((uint64_t)v4, &v15) + 4) << 6));
      unsigned int v15 = 0;
      uint64_t v7 = *(void *)(v2 + 192);
      uint64_t v8 = sub_B1041C((uint64_t)v4, &v15);
      sub_B10058((uint64_t)v4, 0, v6, (unsigned char *)(v7 + ((unint64_t)*(unsigned int *)(v8 + 8) << 6)));
      sub_B1B428(v4, v3 + *(_DWORD *)(v2 + 96) + *(_DWORD *)(v2 + 96) * *(_DWORD *)(v2 + 416) + 2, 0);
      unsigned int v15 = 0;
      uint64_t v9 = *(void *)(v2 + 192);
      uint64_t v10 = v9 + ((unint64_t)*(unsigned int *)(sub_B1041C((uint64_t)v4, &v15) + 4) << 6);
      unsigned int v15 = 0;
      uint64_t v11 = *(void *)(v2 + 192);
      double result = sub_B1041C((uint64_t)v4, &v15);
      uint64_t v12 = v11 + ((unint64_t)*(unsigned int *)(result + 8) << 6);
      if (v10 != v12)
      {
        double v13 = *(double *)(v2 + 592);
        uint64_t v14 = *(void *)(v2 + 584);
        do
        {
          double v13 = v13 + 1.0;
          v14 += *(int *)(v10 + 28);
          v10 += 64;
        }
        while (v10 != v12);
        *(double *)(v2 + 592) = v13;
        *(void *)(v2 + 584) = v14;
      }
      ++v3;
    }
    while (v3 != v1);
  }
  return result;
}

uint64_t sub_B1AD3C(void *a1, long long *a2, unsigned int a3, int a4, int a5)
{
  unsigned int v28 = a3;
  sub_B11D38(a1, &v28, v24);
  uint64_t v10 = a1[6];
  uint64_t v11 = a1[7];
  unsigned int v15 = a1;
  uint64_t v16 = v10;
  uint64_t v17 = v11;
  uint64_t v18 = v11;
  uint64_t v19 = 0;
  uint64_t v20 = v10;
  uint64_t v21 = v11;
  uint64_t v22 = v11;
  uint64_t v23 = 0;
  sub_AE47A0(&v15);
  if (v24[1] == v16 && v25 == v17 && v26 == v18 && (v26 == v25 || v27 == v19)
    || *(_DWORD *)(v27 + 8) == *(_DWORD *)(v27 + 4))
  {
    sub_B11508((uint64_t)a1, a3, a2);
    return 1;
  }
  else
  {
    __int16 v13 = sub_B1B038((uint64_t)a1, (uint64_t)a2, a3, a4, a5);
    char v14 = v13;
    if ((v13 & 0x100) != 0) {
      sub_B11C2C((uint64_t)a1, a3);
    }
    return v14 & 1;
  }
}

BOOL sub_B1AE6C(void *a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  unsigned int v37 = a2;
  sub_B11D38(a1, &v37, v34);
  uint64_t v12 = a1[6];
  uint64_t v13 = a1[7];
  uint64_t v26 = a1;
  *(void *)&long long v27 = v12;
  *((void *)&v27 + 1) = v13;
  uint64_t v28 = v13;
  uint64_t v29 = 0;
  uint64_t v30 = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v13;
  uint64_t v33 = 0;
  sub_AE47A0(&v26);
  if (*(_OWORD *)&v34[8] == v27
    && *(void *)&v34[24] == v28
    && (*(void *)&v34[24] == *(void *)&v34[16] || (void)v35 == v29))
  {
    goto LABEL_7;
  }
  int v14 = *(_DWORD *)(v35 + 4);
  int v15 = *(_DWORD *)(v35 + 8);
  int v16 = v15 - v14;
  if (v15 == v14) {
    goto LABEL_7;
  }
  if (a6 == 0x7FFFFFFF)
  {
    unsigned int v17 = 0;
    do
      sub_B11F04(a1, a2, v17++);
    while (v16 != v17);
LABEL_7:
    LOBYTE(v18) = 0;
    return v18 != 0;
  }
  __int16 v18 = 0;
  unsigned int v20 = 0;
  do
  {
    uint64_t v21 = (_OWORD *)sub_B11F04(a1, a2, v20);
    long long v22 = v21[2];
    long long v23 = v21[3];
    long long v24 = v21[1];
    *(_OWORD *)uint64_t v34 = *v21;
    *(_OWORD *)&v34[16] = v24;
    long long v35 = v22;
    long long v36 = v23;
    if (SHIDWORD(v24) >= a6)
    {
      __int16 v25 = sub_B1B2A4((uint64_t)a1, v34, a3, a4, a5);
      __int16 v18 = v25 | v18 | (v25 | v18) & 0xFF00;
    }
    ++v20;
  }
  while (v16 != v20);
  if ((v18 & 0xFF00) != 0)
  {
    sub_B11C2C((uint64_t)a1, a3);
    sub_B11C2C((uint64_t)a1, a4);
  }
  return v18 != 0;
}

unint64_t sub_B1B038(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int a5)
{
  unsigned int v40 = a3;
  sub_B11D38((void *)a1, &v40, v36);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v27 = a1;
  uint64_t v28 = v10;
  uint64_t v29 = v11;
  uint64_t v30 = v11;
  uint64_t v31 = 0;
  uint64_t v32 = v10;
  uint64_t v33 = v11;
  uint64_t v34 = v11;
  uint64_t v35 = 0;
  sub_AE47A0(&v27);
  if ((v36[1] != v28 || v37 != v29 || v38 != v30 || v38 != v37 && v39 != v31)
    && *(_DWORD *)(v39 + 8) != *(_DWORD *)(v39 + 4))
  {
    LODWORD(v36[0]) = a3;
    uint64_t v12 = *(void *)(a1 + 88);
    uint64_t v13 = (_DWORD *)(v12 + ((unint64_t)*(unsigned int *)(sub_B1041C(a1, (unsigned int *)v36) + 4) << 6));
    LODWORD(v36[0]) = a3;
    uint64_t v14 = *(void *)(a1 + 88);
    int v15 = (_DWORD *)(v14 + ((unint64_t)*(unsigned int *)(sub_B1041C(a1, (unsigned int *)v36) + 8) << 6));
    if (v13 != v15)
    {
      unsigned __int8 v16 = 0;
      while (1)
      {
        int v17 = v13[7];
        if (v17 != 0x7FFFFFFF)
        {
          int v18 = *(_DWORD *)(a2 + 28);
          if (v17 >= v18 && v13[8] <= *(_DWORD *)(a2 + 32))
          {
            unsigned int v19 = *(_DWORD *)(a2 + 36);
            unsigned int v20 = v13[9];
            if (v20 <= v19
              && v13[10] <= *(_DWORD *)(a2 + 40)
              && (v20 != v19 || v17 != v18 || v13[11] - 10 * v17 <= *(_DWORD *)(a2 + 44) - 10 * v18))
            {
              uint64_t v25 = 0;
              return v25 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v16 << 8);
            }
          }
          if (v18 >= v17 && *(_DWORD *)(a2 + 32) <= v13[8])
          {
            unsigned int v21 = v13[9];
            unsigned int v22 = *(_DWORD *)(a2 + 36);
            if (v22 <= v21
              && *(_DWORD *)(a2 + 40) <= v13[10]
              && (v22 != v21 || v18 != v17 || *(_DWORD *)(a2 + 44) - 10 * v18 <= v13[11] - 10 * v17))
            {
              v13[7] = 0x7FFFFFFF;
              unsigned __int8 v16 = 1;
            }
          }
        }
        v13 += 16;
        if (v13 == v15) {
          goto LABEL_28;
        }
      }
    }
  }
  unsigned __int8 v16 = 0;
LABEL_28:
  uint64_t v23 = sub_B11508(a1, a3, (long long *)a2);
  if (a5)
  {
    *(void *)(v23 + 52) = -1;
    *(_DWORD *)(v23 + 60) = 0x7FFFFFFF;
  }
  if (a4)
  {
    int v24 = *(_DWORD *)(a1 + 136);
    *(_DWORD *)(a1 + 136) = v24 + 1;
    *(_DWORD *)(v23 + 24) = v24;
    *(_DWORD *)(v23 + 20) = *(_DWORD *)(a2 + 24);
  }
  uint64_t v25 = 1;
  return v25 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v16 << 8);
}

unint64_t sub_B1B2A4(uint64_t a1, _DWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  if (a5 == -1
    || (unsigned int v27 = a5,
        uint64_t v10 = *(void *)(a1 + 88),
        uint64_t v11 = (_DWORD *)(v10 + ((unint64_t)*(unsigned int *)(sub_B1041C(a1, &v27) + 4) << 6)),
        unsigned int v28 = a5,
        uint64_t v12 = *(void *)(a1 + 88),
        uint64_t v13 = (_DWORD *)(v12 + ((unint64_t)*(unsigned int *)(sub_B1041C(a1, &v28) + 8) << 6)),
        v11 == v13))
  {
LABEL_20:
    unint64_t v24 = sub_B1B038(a1, (uint64_t)a2, a4, 0, 1);
    unint64_t v22 = v24 >> 8;
    unint64_t v23 = v24 >> 16;
    uint64_t v21 = v24;
    if ((_BYTE)v24)
    {
      sub_B1B038(a1, (uint64_t)a2, a3, 1, 1);
      *(void *)(v25 + 52) = -1;
      *(_DWORD *)(v25 + 60) = 0x7FFFFFFF;
    }
  }
  else
  {
    int v14 = a2[7];
    unsigned int v15 = a2[9];
    while (1)
    {
      int v16 = v11[7];
      if (v16 != 0x7FFFFFFF && v16 >= v14 && v11[8] <= a2[8])
      {
        unsigned int v18 = v11[9];
        if (v18 <= v15 && v11[10] <= a2[10])
        {
          BOOL v19 = v11[11] - 10 * v16 > a2[11] - 10 * v14 && v16 == v14;
          if (!v19 || v18 != v15) {
            break;
          }
        }
      }
      v11 += 16;
      if (v11 == v13) {
        goto LABEL_20;
      }
    }
    uint64_t v21 = 0;
    LOBYTE(v22) = 0;
    unint64_t v23 = 0;
  }
  return ((unint64_t)v22 << 8) | (v23 << 16) | v21;
}

BOOL sub_B1B428(void *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v31 = a2;
  sub_B11D38(a1, &v31, v28);
  uint64_t v6 = a1[6];
  uint64_t v7 = a1[7];
  unsigned int v20 = a1;
  *(void *)&long long v21 = v6;
  *((void *)&v21 + 1) = v7;
  uint64_t v22 = v7;
  uint64_t v23 = 0;
  uint64_t v24 = v6;
  uint64_t v25 = v7;
  uint64_t v26 = v7;
  uint64_t v27 = 0;
  sub_AE47A0(&v20);
  if (*(_OWORD *)&v28[8] == v21
    && *(void *)&v28[24] == v22
    && (*(void *)&v28[24] == *(void *)&v28[16] || (void)v29 == v23))
  {
    LOBYTE(v10) = 0;
  }
  else
  {
    int v8 = *(_DWORD *)(v29 + 4);
    int v9 = *(_DWORD *)(v29 + 8);
    __int16 v10 = 0;
    int v11 = v9 - v8;
    if (v9 != v8)
    {
      unsigned int v12 = 0;
      do
      {
        uint64_t v13 = (long long *)sub_B11F04(a1, a2, v12);
        long long v14 = v13[3];
        long long v16 = *v13;
        long long v15 = v13[1];
        long long v29 = v13[2];
        long long v30 = v14;
        *(_OWORD *)unsigned int v28 = v16;
        *(_OWORD *)&v28[16] = v15;
        __int16 v17 = sub_B1B038((uint64_t)a1, (uint64_t)v28, a3, 0, 1);
        uint64_t v18 = (unsigned __int16)(v17 | v10) & 0xFF00;
        __int16 v10 = v17 | v10 | v18;
        ++v12;
      }
      while (v11 != v12);
      if (v18) {
        sub_B11C2C((uint64_t)a1, a3);
      }
    }
  }
  return v10 != 0;
}

unint64_t sub_B1B57C(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4 = a1;
  unsigned int v359 = a3;
  *(double *)(a1 + 608) = *(double *)(a1 + 608) + 1.0;
  unint64_t v5 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 40) + 88), a3);
  unsigned int v321 = *(_DWORD *)sub_A3F74C((void *)(v4 + 344), &v359);
  unint64_t v329 = v5;
  unint64_t result = (unint64_t)sub_A40514(&v357, *(void *)(v4 + 24), v5);
  uint64_t v7 = v357;
  if ((unint64_t)v357 < v358)
  {
    int v331 = (void *)(v4 + 104);
    uint64_t v332 = v4 + 424;
    int v318 = ~a2;
    int v319 = a2 + 2;
    uint64_t v317 = (uint64_t *)(v4 + 248);
    int v327 = a2 + 1;
    unint64_t v328 = HIDWORD(v5);
    uint64_t v333 = v4;
    do
    {
      *(double *)(v4 + 616) = *(double *)(v4 + 616) + 1.0;
      uint64_t v330 = *(unsigned int *)v7;
      LODWORD(v345) = 0;
      uint64_t v8 = *(void *)(v4 + 192);
      int v9 = (char *)(v8 + ((unint64_t)*(unsigned int *)(sub_B1041C((uint64_t)v331, (unsigned int *)&v345) + 4) << 6));
      LODWORD(v345) = 0;
      uint64_t v10 = *(void *)(v4 + 192);
      uint64_t v11 = sub_B1041C((uint64_t)v331, (unsigned int *)&v345);
      sub_B10058((uint64_t)v331, 0, v9, (unsigned char *)(v10 + ((unint64_t)*(unsigned int *)(v11 + 8) << 6)));
      unint64_t result = sub_A1E9A0((uint64_t)&v345, *(void *)(v4 + 24), v329, v321, 0, 1);
      unint64_t v13 = v348;
      unsigned int v12 = v349;
      while ((unint64_t)v12 >= v13 && (unint64_t)v12 < v350)
      {
        uint64_t v14 = 0;
        unint64_t v15 = __ROR8__(*v12, 32);
        uint64_t v16 = *(void *)(v4 + 32);
        uint64_t v17 = *(void *)(v16 + 72) - 1;
        unint64_t v18 = 0xC4CEB9FE1A85EC53
            * ((0xFF51AFD7ED558CCDLL * (v15 ^ (v15 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v15 ^ (v15 >> 33))) >> 33));
        unint64_t v19 = v18 ^ (v18 >> 33);
        uint64_t v20 = *(void *)(v16 + 48);
        uint64_t v21 = v20 + 11;
        uint64_t v22 = -1;
        for (unint64_t i = v19; ; unint64_t i = v14 + v24)
        {
          uint64_t v24 = i & v17;
          unint64_t v25 = (i & v17) / 0x30;
          unint64_t v26 = v24 - 48 * v25;
          if (((*(unsigned __int8 *)(v20 + 16 * v25 + (v26 >> 3) + 10) >> (v26 & 7)) & 1) == 0)
          {
            if (v22 == -1) {
              unint64_t v62 = v24;
            }
            else {
              unint64_t v62 = v22;
            }
            if (!sub_AD2F40(v16, 1)) {
              goto LABEL_92;
            }
            goto LABEL_49;
          }
          uint64_t v27 = *(void *)(v20 + 16 * v25);
          if (!*(void *)(v16 + 40)) {
            break;
          }
          unsigned int v28 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
          if ((unsigned __int16)(v24 - 48 * v25) < 9u)
          {
            __int16 v29 = 0;
            LOBYTE(v34) = v24 - 48 * v25;
            goto LABEL_23;
          }
          __int16 v29 = 0;
          uint64_t v30 = (unsigned __int16)(v24 - 48 * v25 - 9) >> 3;
          if ((unsigned __int16)(v24 - 48 * v25 - 9) >> 3)
          {
            __int16 v31 = 0;
            uint64_t v32 = v30 + 1;
            uint64_t v33 = (v30 + 1) & 0x3FFE;
            unsigned __int16 v34 = v26 - 8 * v33;
            uint64_t v35 = &v28[v33];
            long long v36 = (unsigned __int8 *)(v21 + 16 * v25);
            uint64_t v37 = v33;
            do
            {
              uint64_t v38 = *(v36 - 1);
              int v39 = *v36;
              v36 += 2;
              v29 += byte_20EBFB6[v38];
              v31 += byte_20EBFB6[v39];
              v37 -= 2;
            }
            while (v37);
            v29 += v31;
            if (v32 == v33) {
              goto LABEL_22;
            }
          }
          else
          {
            unsigned __int16 v34 = v24 - 48 * v25;
            uint64_t v35 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
          }
          do
          {
            int v40 = *v35++;
            v29 += byte_20EBFB6[v40];
            v34 -= 8;
          }
          while (v34 > 8u);
LABEL_22:
          v28 += ((unsigned __int16)(v26 - 9) >> 3) + 1;
LABEL_23:
          __int16 v41 = (_DWORD *)(v27
                         + 12
                         * (unsigned __int16)(v29 + byte_20EBFB6[~(-1 << v34) & (unint64_t)*v28]));
          if (*(_DWORD *)(v16 + 36) != v41[1] || *(_DWORD *)(v16 + 32) != *v41) {
            break;
          }
          if (v22 == -1) {
            uint64_t v22 = v24;
          }
LABEL_10:
          ++v14;
        }
        __int16 v43 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
        if ((unsigned __int16)(v24 - 48 * v25) < 9u)
        {
          __int16 v44 = 0;
          unsigned __int16 v55 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
          LOBYTE(v49) = v24 - 48 * v25;
          goto LABEL_37;
        }
        __int16 v44 = 0;
        uint64_t v45 = (unsigned __int16)(v24 - 48 * v25 - 9) >> 3;
        if (!((unsigned __int16)(v24 - 48 * v25 - 9) >> 3))
        {
          unsigned __int16 v49 = v24 - 48 * v25;
          uint64_t v50 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
          do
          {
LABEL_35:
            int v56 = *v50++;
            v44 += byte_20EBFB6[v56];
            v49 -= 8;
          }
          while (v49 > 8u);
          goto LABEL_36;
        }
        __int16 v46 = 0;
        uint64_t v47 = v45 + 1;
        uint64_t v48 = (v45 + 1) & 0x3FFE;
        unsigned __int16 v49 = v26 - 8 * v48;
        uint64_t v50 = &v43[v48];
        int v51 = (unsigned __int8 *)(v21 + 16 * v25);
        uint64_t v52 = v48;
        do
        {
          uint64_t v53 = *(v51 - 1);
          int v54 = *v51;
          v51 += 2;
          v44 += byte_20EBFB6[v53];
          v46 += byte_20EBFB6[v54];
          v52 -= 2;
        }
        while (v52);
        v44 += v46;
        if (v47 != v48) {
          goto LABEL_35;
        }
LABEL_36:
        unsigned __int16 v55 = &v43[((unsigned __int16)(v26 - 9) >> 3) + 1];
LABEL_37:
        if (v15 != *(void *)(v27
                              + 12
                              * (unsigned __int16)(v44
                                                 + byte_20EBFB6[~(-1 << v49) & (unint64_t)*v55])))
          goto LABEL_10;
        if (v24 != -1)
        {
          if ((unsigned __int16)(v24 - 48 * v25) < 9u)
          {
            __int16 v59 = 0;
            uint64_t v4 = v333;
          }
          else
          {
            if ((((_WORD)v24 - 48 * (_WORD)v25 - 8) & 0xFFF8) != 0) {
              __int16 v57 = 8;
            }
            else {
              __int16 v57 = v24 - 48 * v25 - 8;
            }
            unsigned __int16 v58 = ~v57 + v24 - 48 * v25;
            uint64_t v4 = v333;
            __int16 v59 = 0;
            if (v58 < 8u)
            {
              unsigned __int16 v60 = v26;
              uint64_t v61 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
              goto LABEL_97;
            }
            __int16 v107 = 0;
            uint64_t v108 = (v58 >> 3) + 1;
            unsigned __int16 v60 = v26 - 8 * (((v58 >> 3) + 1) & 0x3FFE);
            uint64_t v61 = &v43[v108 & 0x3FFE];
            uint64_t v109 = (unsigned __int8 *)(v20 + 16 * v25 + 11);
            uint64_t v110 = v108 & 0x3FFE;
            do
            {
              uint64_t v111 = *(v109 - 1);
              int v112 = *v109;
              v109 += 2;
              v59 += byte_20EBFB6[v111];
              v107 += byte_20EBFB6[v112];
              v110 -= 2;
            }
            while (v110);
            v59 += v107;
            if ((v108 & 0x3FFE) != v108)
            {
              do
              {
LABEL_97:
                int v113 = *v61++;
                v59 += byte_20EBFB6[v113];
                v60 -= 8;
              }
              while (v60 > 8u);
            }
            v43 += ((unsigned __int16)(v26 - 9) >> 3) + 1;
            LOBYTE(v26) = v60;
          }
          uint64_t v114 = *(void *)(v16 + 56);
          unsigned __int16 v115 = v59 + byte_20EBFB6[~(-1 << v26) & (unint64_t)*v43];
          uint64_t v116 = v20 + 16 * v25;
          if (*(unsigned __int16 *)(v116 + 8) != v115 || v116 + 16 == v114)
          {
            __int16 v106 = (_DWORD *)(v27 + 12 * v115);
          }
          else
          {
            uint64_t v118 = v116 + 32;
            do
            {
              if (*(_WORD *)(v118 - 8)) {
                BOOL v119 = 1;
              }
              else {
                BOOL v119 = v118 == v114;
              }
              v118 += 16;
            }
            while (!v119);
            __int16 v106 = *(_DWORD **)(v118 - 32);
          }
          goto LABEL_111;
        }
        unint64_t v62 = -1;
        if (!sub_AD2F40(v16, 1))
        {
LABEL_92:
          unint64_t v360 = v15;
          int v361 = -1;
          sub_AD3484(v16, (uint64_t *)&v360, v62, &v362);
          __int16 v106 = v364;
          uint64_t v4 = v333;
          goto LABEL_111;
        }
LABEL_49:
        uint64_t v63 = 0;
        unint64_t v360 = v15;
        int v361 = -1;
        uint64_t v64 = *(void *)(v16 + 72) - 1;
        uint64_t v65 = *(void *)(v16 + 48);
        uint64_t v66 = v65 + 11;
        uint64_t v67 = -1;
        while (2)
        {
          uint64_t v68 = v19 & v64;
          unint64_t v69 = (v19 & v64) / 0x30;
          unint64_t v70 = (v19 & v64) % 0x30;
          if (((*(unsigned __int8 *)(v65 + 16 * v69 + (v70 >> 3) + 10) >> (v70 & 7)) & 1) == 0)
          {
            if (v67 == -1) {
              unint64_t v105 = v19 & v64;
            }
            else {
              unint64_t v105 = v67;
            }
            goto LABEL_90;
          }
          uint64_t v71 = *(void *)(v16 + 40);
          uint64_t v72 = *(void *)(v65 + 16 * v69);
          if (!v71) {
            break;
          }
          __int16 v73 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
          if ((unsigned __int16)((v19 & v64) % 0x30) < 9u)
          {
            __int16 v74 = 0;
            LOBYTE(v75) = (v19 & v64) % 0x30;
            goto LABEL_65;
          }
          __int16 v74 = 0;
          uint64_t v75 = (unsigned __int16)(v68 - 48 * v69 - 9) >> 3;
          if (!((unsigned __int16)(v68 - 48 * v69 - 9) >> 3))
          {
            LODWORD(v75) = (v19 & v64) % 0x30;
            uint64_t v79 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
            do
            {
LABEL_63:
              int v84 = *v79++;
              v74 += byte_20EBFB6[v84];
              LOWORD(v75) = v75 - 8;
            }
            while ((unsigned __int16)v75 > 8u);
            goto LABEL_64;
          }
          __int16 v76 = 0;
          uint64_t v77 = v75 + 1;
          uint64_t v78 = (v75 + 1) & 0x3FFE;
          LOWORD(v75) = v70 - 8 * v78;
          uint64_t v79 = &v73[v78];
          int v80 = (unsigned __int8 *)(v66 + 16 * v69);
          uint64_t v81 = v78;
          do
          {
            uint64_t v82 = *(v80 - 1);
            int v83 = *v80;
            v80 += 2;
            v74 += byte_20EBFB6[v82];
            v76 += byte_20EBFB6[v83];
            v81 -= 2;
          }
          while (v81);
          v74 += v76;
          if (v77 != v78) {
            goto LABEL_63;
          }
LABEL_64:
          v73 += ((unsigned __int16)(v70 - 9) >> 3) + 1;
LABEL_65:
          __int16 v85 = (_DWORD *)(v72
                         + 12
                         * (unsigned __int16)(v74 + byte_20EBFB6[~(-1 << v75) & (unint64_t)*v73]));
          if (*(_DWORD *)(v16 + 36) == v85[1] && *(_DWORD *)(v16 + 32) == *v85)
          {
            if (v67 == -1) {
              uint64_t v67 = v19 & v64;
            }
LABEL_52:
            unint64_t v19 = ++v63 + v68;
            continue;
          }
          break;
        }
        __int16 v87 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
        if ((unsigned __int16)((v19 & v64) % 0x30) < 9u)
        {
          __int16 v88 = 0;
          __int16 v98 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
          LOBYTE(v89) = (v19 & v64) % 0x30;
          goto LABEL_79;
        }
        __int16 v88 = 0;
        uint64_t v89 = (unsigned __int16)(v68 - 48 * v69 - 9) >> 3;
        if (!((unsigned __int16)(v68 - 48 * v69 - 9) >> 3))
        {
          LODWORD(v89) = (v19 & v64) % 0x30;
          uint64_t v93 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
          do
          {
LABEL_77:
            int v99 = *v93++;
            v88 += byte_20EBFB6[v99];
            LOWORD(v89) = v89 - 8;
          }
          while ((unsigned __int16)v89 > 8u);
          goto LABEL_78;
        }
        __int16 v90 = 0;
        uint64_t v91 = v89 + 1;
        uint64_t v92 = (v89 + 1) & 0x3FFE;
        LOWORD(v89) = v70 - 8 * v92;
        uint64_t v93 = &v87[v92];
        uint64_t v94 = (unsigned __int8 *)(v66 + 16 * v69);
        uint64_t v95 = v92;
        do
        {
          uint64_t v96 = *(v94 - 1);
          int v97 = *v94;
          v94 += 2;
          v88 += byte_20EBFB6[v96];
          v90 += byte_20EBFB6[v97];
          v95 -= 2;
        }
        while (v95);
        v88 += v90;
        if (v91 != v92) {
          goto LABEL_77;
        }
LABEL_78:
        __int16 v98 = &v87[((unsigned __int16)(v70 - 9) >> 3) + 1];
LABEL_79:
        if (v15 != *(void *)(v72
                              + 12
                              * (unsigned __int16)(v88
                                                 + byte_20EBFB6[~(-1 << v89) & (unint64_t)*v98])))
          goto LABEL_52;
        if (v68 == -1)
        {
          unint64_t v105 = -1;
LABEL_90:
          uint64_t v4 = v333;
          sub_AD3484(v16, (uint64_t *)&v360, v105, &v362);
          __int16 v106 = v364;
          goto LABEL_111;
        }
        uint64_t v4 = v333;
        if ((unsigned __int16)((v19 & v64) % 0x30) < 9u)
        {
          __int16 v102 = 0;
        }
        else
        {
          if ((((_WORD)v68 - 48 * (_WORD)v69 - 8) & 0xFFF8) != 0) {
            __int16 v100 = 8;
          }
          else {
            __int16 v100 = v68 - 48 * v69 - 8;
          }
          unsigned __int16 v101 = ~v100 + v68 - 48 * v69;
          if (v101 < 8u)
          {
            __int16 v102 = 0;
            unsigned __int16 v103 = v70;
            unsigned int v104 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
            goto LABEL_179;
          }
          __int16 v176 = 0;
          __int16 v177 = 0;
          uint64_t v178 = (v101 >> 3) + 1;
          unsigned __int16 v103 = v70 - 8 * (((v101 >> 3) + 1) & 0x3FFE);
          unsigned int v104 = &v87[v178 & 0x3FFE];
          uint64_t v179 = (unsigned __int8 *)(v65 + 16 * v69 + 11);
          uint64_t v180 = v178 & 0x3FFE;
          do
          {
            uint64_t v181 = *(v179 - 1);
            int v182 = *v179;
            v179 += 2;
            v176 += byte_20EBFB6[v181];
            v177 += byte_20EBFB6[v182];
            v180 -= 2;
          }
          while (v180);
          __int16 v102 = v177 + v176;
          if ((v178 & 0x3FFE) != v178)
          {
            do
            {
LABEL_179:
              int v183 = *v104++;
              v102 += byte_20EBFB6[v183];
              v103 -= 8;
            }
            while (v103 > 8u);
          }
          v87 += ((unsigned __int16)(v70 - 9) >> 3) + 1;
          LOBYTE(v70) = v103;
        }
        uint64_t v184 = v65 + 16 * v69;
        uint64_t v185 = *(_DWORD ***)(v16 + 56);
        unsigned __int16 v186 = v102 + byte_20EBFB6[~(-1 << v70) & (unint64_t)*v87];
        __int16 v106 = (_DWORD *)(v72 + 12 * v186);
        if (*(unsigned __int16 *)(v184 + 8) == v186)
        {
          uint64_t v187 = v184 + 16;
          if ((_DWORD **)(v184 + 16) != v185)
          {
            while (1)
            {
              int v188 = (_DWORD **)v187;
              if (*(_WORD *)(v187 + 8)) {
                break;
              }
              v187 += 16;
              if (v188 + 2 == v185)
              {
                uint64_t v184 = *(void *)(v16 + 56);
                goto LABEL_187;
              }
            }
            uint64_t v184 = v187;
LABEL_187:
            __int16 v106 = *v188;
            goto LABEL_188;
          }
        }
        else
        {
LABEL_188:
          if ((_DWORD **)v184 != v185 && v71)
          {
            do
            {
              if (*(_DWORD *)(v16 + 36) != v106[1] || *(_DWORD *)(v16 + 32) != *v106) {
                break;
              }
              v106 += 3;
              if (v106 == (_DWORD *)(*(void *)v184 + 12 * *(unsigned __int16 *)(v184 + 8)))
              {
                v184 += 16;
                if ((_DWORD **)v184 != v185)
                {
                  do
                  {
                    if (*(_WORD *)(v184 + 8))
                    {
                      __int16 v106 = *(_DWORD **)v184;
                      goto LABEL_192;
                    }
                    v184 += 16;
                  }
                  while ((_DWORD **)v184 != v185);
                  __int16 v106 = *(_DWORD **)(v184 - 16);
                }
                break;
              }
LABEL_192:
              ;
            }
            while ((_DWORD **)v184 != v185);
          }
        }
LABEL_111:
        unsigned int v120 = v106[2];
        if (v120 != -1) {
          goto LABEL_135;
        }
        int v121 = *(_DWORD *)(v16 + 112);
        *(_DWORD *)(v16 + 112) = v121 + 1;
        v106[2] = v121;
        uint64_t v123 = *(unint64_t **)(v16 + 96);
        unint64_t v122 = *(void *)(v16 + 104);
        if ((unint64_t)v123 < v122)
        {
          *uint64_t v123 = v15;
          uint64_t v124 = (uint64_t)(v123 + 1);
          goto LABEL_134;
        }
        uint64_t v125 = (unint64_t **)(v16 + 88);
        uint64_t v126 = *(char **)(v16 + 88);
        uint64_t v127 = ((char *)v123 - v126) >> 3;
        unint64_t v128 = v127 + 1;
        if ((unint64_t)(v127 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v129 = v122 - (void)v126;
        if (v129 >> 2 > v128) {
          unint64_t v128 = v129 >> 2;
        }
        if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v128 = 0x1FFFFFFFFFFFFFFFLL;
        }
        if (!v128)
        {
          unint64_t v130 = 0;
          unint64_t v131 = 0;
          uint64_t v132 = (unint64_t *)(8 * v127);
          *(void *)(8 * v127) = v15;
          uint64_t v124 = 8 * v127 + 8;
          if (v123 != (unint64_t *)v126) {
            goto LABEL_122;
          }
LABEL_125:
          *(void *)(v16 + 88) = v132;
          *(void *)(v16 + 96) = v124;
          *(void *)(v16 + 104) = &v131[8 * v130];
          uint64_t v4 = v333;
          if (v123) {
            goto LABEL_133;
          }
          goto LABEL_134;
        }
        if (v128 >> 61) {
          sub_188D718();
        }
        unint64_t v130 = v128;
        unint64_t v131 = (char *)operator new(8 * v128);
        uint64_t v125 = (unint64_t **)(v16 + 88);
        uint64_t v132 = (unint64_t *)&v131[8 * v127];
        *uint64_t v132 = v15;
        uint64_t v124 = (uint64_t)(v132 + 1);
        if (v123 == (unint64_t *)v126) {
          goto LABEL_125;
        }
LABEL_122:
        unint64_t v133 = (char *)(v123 - 1) - v126;
        if (v133 < 0x58) {
          goto LABEL_383;
        }
        if ((unint64_t)(v126 - v131) < 0x20) {
          goto LABEL_383;
        }
        uint64_t v134 = (v133 >> 3) + 1;
        uint64_t v135 = 8 * (v134 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v136 = &v123[v135 / 0xFFFFFFFFFFFFFFF8];
        uint64_t v132 = (unint64_t *)((char *)v132 - v135);
        uint64_t v137 = &v131[8 * v127 - 16];
        long long v138 = v123 - 2;
        uint64_t v139 = v134 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v140 = *(_OWORD *)v138;
          *((_OWORD *)v137 - 1) = *((_OWORD *)v138 - 1);
          *(_OWORD *)uint64_t v137 = v140;
          v137 -= 32;
          v138 -= 4;
          v139 -= 4;
        }
        while (v139);
        uint64_t v123 = v136;
        if (v134 != (v134 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_383:
          do
          {
            unint64_t v141 = *--v123;
            *--uint64_t v132 = v141;
          }
          while (v123 != (unint64_t *)v126);
        }
        uint64_t v123 = *v125;
        *(void *)(v16 + 88) = v132;
        *(void *)(v16 + 96) = v124;
        *(void *)(v16 + 104) = &v131[8 * v130];
        uint64_t v4 = v333;
        if (v123) {
LABEL_133:
        }
          operator delete(v123);
LABEL_134:
        *(void *)(v16 + 96) = v124;
        unsigned int v120 = v106[2];
LABEL_135:
        LODWORD(v360) = v120;
        unint64_t result = sub_BD5C18(v332, v120, v15);
        if ((result & 1) == 0)
        {
          if (!*(unsigned char *)(v4 + 21))
          {
            LODWORD(v362) = 0;
            uint64_t v155 = *(void *)(v4 + 192);
            uint64_t v156 = (char *)(v155
                          + ((unint64_t)*(unsigned int *)(sub_B1041C((uint64_t)v331, (unsigned int *)&v362) + 4) << 6));
            LODWORD(v362) = 0;
            uint64_t v157 = *(void *)(v4 + 192);
            uint64_t v158 = sub_B1041C((uint64_t)v331, (unsigned int *)&v362);
            unint64_t result = (unint64_t)sub_B10058((uint64_t)v331, 0, v156, (unsigned char *)(v157 + ((unint64_t)*(unsigned int *)(v158 + 8) << 6)));
          }
          goto LABEL_257;
        }
        LODWORD(v362) = 0;
        if (*(void *)(v4 + 184) == *(void *)(v4 + 144)) {
          goto LABEL_222;
        }
        unint64_t result = sub_B1067C((uint64_t)v331, (unsigned int *)&v362);
        if (result == -1) {
          goto LABEL_222;
        }
        uint64_t v142 = *(void *)(v4 + 152);
        uint64_t v143 = v142 + 16 * (result / 0x30);
        unsigned int v144 = (unsigned __int8 *)(v143 + 10);
        int v145 = result % 0x30;
        if ((unsigned __int16)(result % 0x30) < 9u)
        {
          __int16 v146 = 0;
          goto LABEL_152;
        }
        __int16 v146 = 0;
        uint64_t v147 = (unsigned __int16)(result % 0x30 - 9) >> 3;
        if (!((unsigned __int16)(result % 0x30 - 9) >> 3))
        {
          LODWORD(v147) = result % 0x30;
          __int16 v151 = (unsigned __int8 *)(v143 + 10);
          do
          {
LABEL_150:
            int v159 = *v151++;
            v146 += byte_20EC1B6[v159];
            LOWORD(v147) = v147 - 8;
          }
          while ((unsigned __int16)v147 > 8u);
          goto LABEL_151;
        }
        __int16 v148 = 0;
        uint64_t v149 = v147 + 1;
        uint64_t v150 = (v147 + 1) & 0x3FFE;
        LOWORD(v147) = v145 - 8 * v150;
        __int16 v151 = &v144[v150];
        unint64_t result = v142 + 16 * (result / 0x30) + 11;
        uint64_t v152 = v150;
        do
        {
          uint64_t v153 = *(unsigned __int8 *)(result - 1);
          int v154 = *(unsigned __int8 *)result;
          result += 2;
          v146 += byte_20EC1B6[v153];
          v148 += byte_20EC1B6[v154];
          v152 -= 2;
        }
        while (v152);
        v146 += v148;
        if (v149 != v150) {
          goto LABEL_150;
        }
LABEL_151:
        v144 += ((unsigned __int16)(v145 - 9) >> 3) + 1;
        LOBYTE(v145) = v147;
LABEL_152:
        uint64_t v160 = *(void *)(v4 + 160);
        unsigned __int16 v161 = v146 + byte_20EC1B6[~(-1 << v145) & (unint64_t)*v144];
        if (*(unsigned __int16 *)(v143 + 8) == v161)
        {
          v143 += 16;
          if (v143 != v160)
          {
            while (1)
            {
              uint64_t v162 = v143;
              if (*(_WORD *)(v143 + 8)) {
                break;
              }
              v143 += 16;
              if (v162 + 16 == v160) {
                goto LABEL_222;
              }
            }
            unsigned __int16 v163 = *(_DWORD **)v143;
            if (v143 != v160)
            {
LABEL_160:
              if (*(void *)(v4 + 144))
              {
                while (*(_DWORD *)(v4 + 136) == *v163)
                {
                  v163 += 3;
                  if (v163 == (_DWORD *)(*(void *)v143 + 12 * *(unsigned __int16 *)(v143 + 8)))
                  {
                    while (1)
                    {
                      v143 += 16;
                      if (v143 == v160) {
                        goto LABEL_222;
                      }
                      if (*(_WORD *)(v143 + 8))
                      {
                        unsigned __int16 v163 = *(_DWORD **)v143;
                        break;
                      }
                    }
                  }
                  if (v143 == v160) {
                    break;
                  }
                }
              }
              if (v143 != v160 && v163[2] != v163[1])
              {
                LODWORD(v362) = 0;
                uint64_t v164 = *(void *)(v4 + 192);
                uint64_t v165 = (_DWORD *)(v164
                                + ((unint64_t)*(unsigned int *)(sub_B1041C((uint64_t)v331, (unsigned int *)&v362)
                                                                     + 4) << 6));
                LODWORD(v362) = 0;
                uint64_t v166 = *(void *)(v4 + 192);
                int v167 = (_DWORD *)(v166
                                + ((unint64_t)*(unsigned int *)(sub_B1041C((uint64_t)v331, (unsigned int *)&v362)
                                                                     + 8) << 6));
                if (v165 != v167)
                {
                  int v168 = v354;
                  uint64_t v169 = v352;
                  uint64_t v170 = v349;
                  unsigned int v171 = v347;
                  unint64_t v172 = ((unint64_t)v349 - v348) >> 4;
                  do
                  {
                    unsigned int v175 = v165[13];
                    if (v168)
                    {
                      unsigned int v355 = v165[14];
                      int v173 = v165[15];
                      int v356 = v173;
                    }
                    else
                    {
                      int v173 = *(_DWORD *)(v169 + 12 * v175);
                    }
                    long long v174 = (unsigned int *)((char *)v171 + *(unsigned __int16 *)((char *)v171 - *v171 + 6));
                    v165[7] = *(unsigned int *)((char *)&v174[2
                                                            * (*(_DWORD *)(v169 + 12 * v175 + 4) + v172)
                                                            + 2]
                                              + *v174)
                            + v173
                            - *((_DWORD *)v170 + 2);
                    v165 += 16;
                  }
                  while (v165 != v167);
                  unint64_t v353 = (int *)(v169 + 12 * v175);
                }
                sub_B1D218(v331, 0);
                if ((*((unsigned char *)v349 + 15) & 2) != 0
                  && (!v351
                   || (*(_DWORD *)(v351 + 4 * (((unint64_t)v349 - v348) >> 4)) & v330) == 0))
                {
                  int v190 = *(_DWORD *)(v4 + 96);
                  if (*(unsigned char *)(v4 + 20))
                  {
                    unsigned int v191 = v190 + v190 * *(_DWORD *)(v4 + 416);
                    int v192 = v360;
                    uint64_t v193 = *(void *)(v4 + 48);
                    if (v193) {
                      goto LABEL_209;
                    }
LABEL_211:
                    int v194 = 0x80000000;
                  }
                  else
                  {
                    unsigned int v191 = -1;
                    int v192 = v360;
                    uint64_t v193 = *(void *)(v4 + 48);
                    if (!v193) {
                      goto LABEL_211;
                    }
LABEL_209:
                    int v194 = sub_AD7004(v193, v192, *(_DWORD *)(v4 + 100) + v318);
                  }
                  if (sub_B1D478(v331, 0, v319 + v190 + v190 * v192, v190 + v190 * v192, v191, v194)) {
                    sub_A3EF14(v317, &v360);
                  }
                }
                LODWORD(v362) = 0;
                uint64_t v195 = *(void *)(v4 + 192);
                long long v196 = (_DWORD *)(v195
                                + ((unint64_t)*(unsigned int *)(sub_B1041C((uint64_t)v331, (unsigned int *)&v362)
                                                                     + 4) << 6));
                LODWORD(v362) = 0;
                uint64_t v197 = *(void *)(v4 + 192);
                long long v198 = (_DWORD *)(v197
                                + ((unint64_t)*(unsigned int *)(sub_B1041C((uint64_t)v331, (unsigned int *)&v362)
                                                                     + 8) << 6));
                if (v196 != v198)
                {
                  int v199 = v354;
                  uint64_t v200 = v352;
                  uint64_t v201 = v347;
                  unint64_t v202 = ((unint64_t)v349 - v348) >> 4;
                  do
                  {
                    unsigned int v205 = v196[13];
                    if (v199)
                    {
                      unsigned int v355 = v196[14];
                      int v203 = v196[15];
                      int v356 = v203;
                    }
                    else
                    {
                      int v203 = *(_DWORD *)(v200 + 12 * v205);
                    }
                    int v204 = (unsigned int *)((char *)v201 + *(unsigned __int16 *)((char *)v201 - *v201 + 6));
                    v196[7] = *(unsigned int *)((char *)&v204[2
                                                            * (*(_DWORD *)(v200 + 12 * v205 + 4) + v202)
                                                            + 1]
                                              + *v204)
                            + v203;
                    v196 += 16;
                  }
                  while (v196 != v198);
                  unint64_t v353 = (int *)(v200 + 12 * v205);
                }
                unint64_t result = (unint64_t)sub_B1D218(v331, 0);
              }
            }
          }
        }
        else
        {
          unsigned __int16 v163 = (_DWORD *)(*(void *)v143 + 12 * v161);
          if (v143 != v160) {
            goto LABEL_160;
          }
        }
LABEL_222:
        if ((*((unsigned char *)v349 + 15) & 1) == 0) {
          goto LABEL_257;
        }
        if (!v351)
        {
          if (!v330) {
            goto LABEL_227;
          }
          goto LABEL_257;
        }
        if (*(_DWORD *)(v351 + 4 * (((unint64_t)v349 - v348) >> 4)) != v330) {
          goto LABEL_257;
        }
LABEL_227:
        unsigned int v206 = v327 + *(_DWORD *)(v4 + 96) + *(_DWORD *)(v4 + 96) * v360;
        LODWORD(v362) = v206;
        if (*(void *)(v4 + 184) == *(void *)(v4 + 144)) {
          goto LABEL_257;
        }
        unint64_t result = sub_B1067C((uint64_t)v331, (unsigned int *)&v362);
        if (result == -1) {
          goto LABEL_257;
        }
        uint64_t v207 = *(void *)(v4 + 152);
        uint64_t v208 = v207 + 16 * (result / 0x30);
        int v209 = (unsigned __int8 *)(v208 + 10);
        int v210 = result % 0x30;
        if ((unsigned __int16)(result % 0x30) < 9u)
        {
          __int16 v211 = 0;
          goto LABEL_239;
        }
        __int16 v211 = 0;
        uint64_t v212 = (unsigned __int16)(result % 0x30 - 9) >> 3;
        if (!((unsigned __int16)(result % 0x30 - 9) >> 3))
        {
          LODWORD(v212) = result % 0x30;
          unsigned int v216 = (unsigned __int8 *)(v208 + 10);
          do
          {
LABEL_237:
            int v220 = *v216++;
            v211 += byte_20EC1B6[v220];
            LOWORD(v212) = v212 - 8;
          }
          while ((unsigned __int16)v212 > 8u);
          goto LABEL_238;
        }
        __int16 v213 = 0;
        uint64_t v214 = v212 + 1;
        uint64_t v215 = (v212 + 1) & 0x3FFE;
        LOWORD(v212) = v210 - 8 * v215;
        unsigned int v216 = &v209[v215];
        unint64_t result = v207 + 16 * (result / 0x30) + 11;
        uint64_t v217 = v215;
        do
        {
          uint64_t v218 = *(unsigned __int8 *)(result - 1);
          int v219 = *(unsigned __int8 *)result;
          result += 2;
          v211 += byte_20EC1B6[v218];
          v213 += byte_20EC1B6[v219];
          v217 -= 2;
        }
        while (v217);
        v211 += v213;
        if (v214 != v215) {
          goto LABEL_237;
        }
LABEL_238:
        v209 += ((unsigned __int16)(v210 - 9) >> 3) + 1;
        LOBYTE(v210) = v212;
LABEL_239:
        uint64_t v221 = *(void *)(v4 + 160);
        unsigned __int16 v222 = v211 + byte_20EC1B6[~(-1 << v210) & (unint64_t)*v209];
        if (*(unsigned __int16 *)(v208 + 8) == v222)
        {
          v208 += 16;
          if (v208 != v221)
          {
            while (1)
            {
              uint64_t v223 = v208;
              if (*(_WORD *)(v208 + 8)) {
                break;
              }
              v208 += 16;
              if (v223 + 16 == v221) {
                goto LABEL_257;
              }
            }
            __int16 v224 = *(_DWORD **)v208;
            if (v208 != v221) {
              goto LABEL_247;
            }
          }
          goto LABEL_257;
        }
        __int16 v224 = (_DWORD *)(*(void *)v208 + 12 * v222);
        if (v208 == v221) {
          goto LABEL_257;
        }
LABEL_247:
        if (*(void *)(v4 + 144))
        {
          do
          {
            if (*(_DWORD *)(v4 + 136) != *v224) {
              break;
            }
            v224 += 3;
            if (v224 == (_DWORD *)(*(void *)v208 + 12 * *(unsigned __int16 *)(v208 + 8)))
            {
              do
              {
                v208 += 16;
                if (v208 == v221) {
                  goto LABEL_257;
                }
              }
              while (!*(_WORD *)(v208 + 8));
              __int16 v224 = *(_DWORD **)v208;
            }
          }
          while (v208 != v221);
        }
        if (v208 != v221)
        {
          unsigned __int16 v227 = v224 + 1;
          int v226 = v224[1];
          int v225 = v227[1];
          int v228 = v225 - v226;
          if (v225 != v226)
          {
            unsigned int v235 = 0;
            int v320 = v225 - v226;
            do
            {
              uint64_t v236 = sub_B11F04(v331, v206, v235);
              int v237 = *(_DWORD *)(v236 + 28);
              if (v354)
              {
                unint64_t result = sub_A2B620(*(void *)(v4 + 24), (uint64_t)&v345, v237, 1);
                if ((result & 1) == 0) {
                  goto LABEL_281;
                }
              }
              else
              {
                unint64_t result = sub_A2BC00((uint64_t)&v345, v237, 1);
                if (!result) {
                  goto LABEL_281;
                }
              }
              uint64_t v324 = *(void *)(v236 + 20);
              int v238 = *(_DWORD *)(v236 + 36);
              unsigned int v322 = *(_DWORD *)(v236 + 40);
              int v323 = *(_DWORD *)(v236 + 44);
              int v325 = *(_DWORD *)(v236 + 48);
              int v326 = *(_DWORD *)(v236 + 32);
              unsigned int v239 = (void *)(*(void *)(v4 + 24) + 4136);
              if (sub_A10E20(v239, v328))
              {
                unsigned int v240 = (int *)sub_A1120C(*(void *)(*v239 + 3944), v329);
              }
              else
              {
                if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                  && __cxa_guard_acquire(&qword_24F7308))
                {
                  sub_518C8(0x3B60u, 0x7FCAu);
                  dword_24F7300 = v311 | 0x40000000;
                  __cxa_guard_release(&qword_24F7308);
                  uint64_t v4 = v333;
                }
                uint64_t v241 = *v239;
                if (dword_24F7300 == v328)
                {
                  uint64_t v242 = *(unsigned int **)(*(void *)(v241 + 3976) + 72);
                  if (!v242)
                  {
                    exception = __cxa_allocate_exception(0x40uLL);
                    int v362 = (char *)operator new(0x40uLL);
                    long long v363 = xmmword_20B9A90;
                    strcpy(v362, "Realtime stop pattern quad data requested on nullptr buffer");
                    int v314 = (void *)sub_2F404((uint64_t)exception, (long long *)&v362);
                  }
                  unint64_t v243 = (int *)((char *)v242 + *v242);
                  uint64_t v244 = (unsigned __int16 *)((char *)v243 - *v243);
                  if (*v244 >= 5u && (uint64_t v245 = v244[2]) != 0) {
                    unint64_t v246 = (unsigned int *)((char *)v243 + v245 + *(unsigned int *)((char *)v243 + v245));
                  }
                  else {
                    unint64_t v246 = 0;
                  }
                  unsigned int v240 = (int *)sub_A1139C(v246, v329);
                }
                else
                {
                  unsigned int v240 = (int *)sub_A11500(v241 + 24, v329, 0, "stop pattern");
                }
              }
              uint64_t v247 = v240;
              uint64_t v248 = *v239;
              unint64_t v249 = (unsigned __int16 *)((char *)v240 - *v240);
              if (*v249 >= 0xFu && (uint64_t v250 = v249[7]) != 0)
              {
                uint64_t v251 = v248 + 3896;
                char v252 = sub_49442C(*(unsigned __int16 *)((char *)v240 + v250));
                if (sub_C25A10(v251, v252)) {
                  goto LABEL_305;
                }
              }
              else
              {
                uint64_t v256 = v248 + 3896;
                char v257 = sub_49442C(0x7FFFu);
                if (sub_C25A10(v256, v257))
                {
LABEL_305:
                  int v255 = 128;
                  int v228 = v320;
                  if (sub_A10E20(v239, v328)) {
                    goto LABEL_306;
                  }
                  goto LABEL_308;
                }
              }
              unint64_t v253 = (unsigned __int16 *)((char *)v247 - *v247);
              int v228 = v320;
              if (*v253 >= 0xBu && (uint64_t v254 = v253[5]) != 0)
              {
                int v255 = sub_A2BF48(*((unsigned char *)v247 + v254));
                if (sub_A10E20(v239, v328)) {
                  goto LABEL_306;
                }
              }
              else
              {
                int v255 = sub_A2BF48(0);
                if (sub_A10E20(v239, v328))
                {
LABEL_306:
                  uint64_t v258 = (int *)sub_A1120C(*(void *)(*v239 + 3944), v329);
                  goto LABEL_315;
                }
              }
LABEL_308:
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                && __cxa_guard_acquire(&qword_24F7308))
              {
                sub_518C8(0x3B60u, 0x7FCAu);
                dword_24F7300 = v312 | 0x40000000;
                __cxa_guard_release(&qword_24F7308);
                uint64_t v4 = v333;
                int v228 = v320;
              }
              uint64_t v259 = *v239;
              if (dword_24F7300 != v328)
              {
                uint64_t v258 = (int *)sub_A11500(v259 + 24, v329, 0, "stop pattern");
LABEL_315:
                unint64_t v265 = (unsigned __int16 *)((char *)v258 - *v258);
                if (*v265 < 0x19u) {
                  goto LABEL_321;
                }
                goto LABEL_319;
              }
              unsigned int v260 = *(unsigned int **)(*(void *)(v259 + 3976) + 72);
              if (!v260)
              {
                int v315 = __cxa_allocate_exception(0x40uLL);
                int v362 = (char *)operator new(0x40uLL);
                long long v363 = xmmword_20B9A90;
                strcpy(v362, "Realtime stop pattern quad data requested on nullptr buffer");
                uint64_t v316 = (void *)sub_2F404((uint64_t)v315, (long long *)&v362);
              }
              uint64_t v261 = (int *)((char *)v260 + *v260);
              long long v262 = (unsigned __int16 *)((char *)v261 - *v261);
              if (*v262 >= 5u && (uint64_t v263 = v262[2]) != 0) {
                uint64_t v264 = (unsigned int *)((char *)v261 + v263 + *(unsigned int *)((char *)v261 + v263));
              }
              else {
                uint64_t v264 = 0;
              }
              uint64_t v258 = (int *)sub_A1139C(v264, v329);
              unint64_t v265 = (unsigned __int16 *)((char *)v258 - *v258);
              if (*v265 < 0x19u) {
                goto LABEL_321;
              }
LABEL_319:
              uint64_t v266 = v265[12];
              if (v266)
              {
                unsigned int v267 = *((unsigned __int8 *)v258 + v266);
                goto LABEL_322;
              }
LABEL_321:
              unsigned int v267 = 2;
LABEL_322:
              int v268 = v255 + v238;
              unsigned int v269 = sub_A2BF38(v267);
              unsigned int v270 = v322;
              if (v322 <= v269) {
                unsigned int v270 = v269;
              }
              int v271 = v356;
              unint64_t v272 = 0xFFFFFFFF00000000;
              if (v354) {
                unint64_t v272 = (unint64_t)v355 << 32;
              }
              unint64_t v273 = (-1431655765 * (((unint64_t)v353 - v352) >> 2)) | v272;
              if (!v354) {
                int v271 = 0x7FFFFFFF;
              }
              int v274 = (unsigned int *)((char *)v347 + *(unsigned __int16 *)((char *)v347 - *v347 + 6));
              uint64_t v275 = (char *)v274 + *v274;
              int v276 = &v356;
              if (!v354) {
                int v276 = v353;
              }
              int v277 = *v276;
              unsigned int v278 = &v275[8 * v353[1] + 8 * (((unint64_t)v349 - v348) >> 4)];
              int v279 = *((_DWORD *)v278 + 1);
              LODWORD(v278) = 10 * (*(_DWORD *)(v236 + 28) - v277 - *((_DWORD *)v278 + 2));
              LODWORD(v334) = ((unint64_t)v349 - v348) >> 4;
              *(void *)((char *)&v334 + 4) = v273;
              HIDWORD(v334) = v271;
              unsigned int v335 = v359;
              uint64_t v336 = v324;
              int v337 = v279 + v277;
              int v338 = v326;
              int v339 = v268;
              unsigned int v340 = v270;
              int v341 = v323 - (v278 & ~((int)v278 >> 31));
              int v342 = v325;
              unint64_t v343 = v273;
              int v344 = v271;
              LODWORD(v362) = 0;
              if (*(void *)(v4 + 184) == *(void *)(v4 + 144)) {
                goto LABEL_280;
              }
              unint64_t v280 = sub_B1067C((uint64_t)v331, (unsigned int *)&v362);
              if (v280 == -1) {
                goto LABEL_280;
              }
              uint64_t v281 = *(void *)(v4 + 152);
              uint64_t v282 = v281 + 16 * (v280 / 0x30);
              unsigned int v283 = (unsigned __int8 *)(v282 + 10);
              int v284 = v280 % 0x30;
              if ((unsigned __int16)(v280 % 0x30) < 9u)
              {
                __int16 v285 = 0;
                goto LABEL_342;
              }
              __int16 v285 = 0;
              uint64_t v286 = (unsigned __int16)(v280 % 0x30 - 9) >> 3;
              if ((unsigned __int16)(v280 % 0x30 - 9) >> 3)
              {
                __int16 v287 = 0;
                uint64_t v288 = v286 + 1;
                uint64_t v289 = (v286 + 1) & 0x3FFE;
                LOWORD(v286) = v284 - 8 * v289;
                uint64_t v290 = &v283[v289];
                unint64_t v291 = (unsigned __int8 *)(v281 + 16 * (v280 / 0x30) + 11);
                uint64_t v292 = v289;
                do
                {
                  uint64_t v293 = *(v291 - 1);
                  int v294 = *v291;
                  v291 += 2;
                  v285 += byte_20EC1B6[v293];
                  v287 += byte_20EC1B6[v294];
                  v292 -= 2;
                }
                while (v292);
                v285 += v287;
                if (v288 == v289) {
                  goto LABEL_341;
                }
              }
              else
              {
                LODWORD(v286) = v280 % 0x30;
                uint64_t v290 = (unsigned __int8 *)(v282 + 10);
              }
              do
              {
                int v295 = *v290++;
                v285 += byte_20EC1B6[v295];
                LOWORD(v286) = v286 - 8;
              }
              while ((unsigned __int16)v286 > 8u);
LABEL_341:
              v283 += ((unsigned __int16)(v284 - 9) >> 3) + 1;
              LOBYTE(v284) = v286;
LABEL_342:
              uint64_t v296 = *(void *)(v4 + 160);
              unsigned __int16 v297 = v285 + byte_20EC1B6[~(-1 << v284) & (unint64_t)*v283];
              if (*(unsigned __int16 *)(v282 + 8) == v297)
              {
                v282 += 16;
                if (v282 != v296)
                {
                  while (1)
                  {
                    uint64_t v298 = v282;
                    if (*(_WORD *)(v282 + 8)) {
                      break;
                    }
                    v282 += 16;
                    if (v298 + 16 == v296) {
                      goto LABEL_280;
                    }
                  }
                  int v299 = *(_DWORD **)v282;
                  if (v282 != v296)
                  {
LABEL_350:
                    if (*(void *)(v4 + 144))
                    {
                      while (*(_DWORD *)(v4 + 136) == *v299)
                      {
                        v299 += 3;
                        if (v299 == (_DWORD *)(*(void *)v282 + 12 * *(unsigned __int16 *)(v282 + 8)))
                        {
                          while (1)
                          {
                            v282 += 16;
                            if (v282 == v296) {
                              goto LABEL_280;
                            }
                            if (*(_WORD *)(v282 + 8))
                            {
                              int v299 = *(_DWORD **)v282;
                              break;
                            }
                          }
                        }
                        if (v282 == v296) {
                          break;
                        }
                      }
                    }
                    if (v282 != v296 && v299[2] != v299[1])
                    {
                      unint64_t result = sub_B1B038((uint64_t)v331, (uint64_t)&v334, 0, 0, 0);
                      if ((result & 0x100) != 0)
                      {
                        LODWORD(v362) = 0;
                        uint64_t v300 = *(void *)(v4 + 192);
                        uint64_t v301 = v300
                             + ((unint64_t)*(unsigned int *)(sub_B1041C((uint64_t)v331, (unsigned int *)&v362) + 4) << 6);
                        LODWORD(v362) = 0;
                        uint64_t v302 = *(void *)(v4 + 192);
                        uint64_t v303 = sub_B1041C((uint64_t)v331, (unsigned int *)&v362);
                        uint64_t v304 = (long long *)(v302 + ((unint64_t)*(unsigned int *)(v303 + 8) << 6));
                        if ((long long *)v301 != v304)
                        {
                          while (*(_DWORD *)(v301 + 28) != 0x7FFFFFFF)
                          {
                            v301 += 64;
                            if ((long long *)v301 == v304)
                            {
                              uint64_t v301 = v302 + ((unint64_t)*(unsigned int *)(v303 + 8) << 6);
                              goto LABEL_371;
                            }
                          }
                          if ((long long *)v301 != v304)
                          {
                            for (uint64_t j = (long long *)(v301 + 64); j != v304; j += 4)
                            {
                              if (*((_DWORD *)j + 7) != 0x7FFFFFFF)
                              {
                                long long v306 = *j;
                                long long v307 = j[1];
                                long long v308 = j[3];
                                *(_OWORD *)(v301 + 32) = j[2];
                                *(_OWORD *)(v301 + 48) = v308;
                                *(_OWORD *)uint64_t v301 = v306;
                                *(_OWORD *)(v301 + 16) = v307;
                                v301 += 64;
                              }
                            }
                          }
                        }
LABEL_371:
                        LODWORD(v362) = 0;
                        uint64_t v309 = *(void *)(v4 + 192);
                        uint64_t v310 = sub_B1041C((uint64_t)v331, (unsigned int *)&v362);
                        unint64_t result = (unint64_t)sub_B10058((uint64_t)v331, 0, (char *)v301, (unsigned char *)(v309+ ((unint64_t)*(unsigned int *)(v310 + 8) << 6)));
                      }
                      goto LABEL_281;
                    }
                  }
                }
              }
              else
              {
                int v299 = (_DWORD *)(*(void *)v282 + 12 * v297);
                if (v282 != v296) {
                  goto LABEL_350;
                }
              }
LABEL_280:
              unint64_t result = sub_B11508((uint64_t)v331, 0, &v334);
LABEL_281:
              ++v235;
            }
            while (v235 != v228);
          }
        }
LABEL_257:
        unint64_t v13 = v348;
        unsigned int v12 = v349 - 2;
        v349 -= 2;
        if (*(unsigned char *)(v345 + 16)) {
          BOOL v229 = v346 == 0;
        }
        else {
          BOOL v229 = 0;
        }
        if (v229 && (unint64_t)v12 >= v348 && (unint64_t)v12 < v350)
        {
          do
          {
            unint64_t v232 = __ROR8__(*v12, 32);
            if (HIDWORD(v232) == 1 && (v232 + 3) < 2) {
              break;
            }
            unint64_t result = sub_2AB7E4(**(void **)(v345 + 4120));
            unint64_t v13 = v348;
            unsigned int v12 = v349;
            if (result) {
              break;
            }
            unsigned int v12 = v349 - 2;
            unint64_t v349 = v12;
          }
          while ((unint64_t)v12 >= v348 && (unint64_t)v12 < v350);
        }
      }
      uint64_t v7 = v357 + 4;
      unint64_t v357 = v7;
    }
    while ((unint64_t)v7 < v358);
  }
  return result;
}

void sub_B1D1A0(_Unwind_Exception *a1)
{
}

void sub_B1D1B8(_Unwind_Exception *a1)
{
}

void sub_B1D1D0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 153) < 0) {
    operator delete(*(void **)(v1 - 176));
  }
  _Unwind_Resume(exception_object);
}

void sub_B1D204(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_B1D218(void *a1, unsigned int a2)
{
  v36[0] = a2;
  sub_B11D38(a1, v36, v32);
  uint64_t v4 = a1[6];
  uint64_t v5 = a1[7];
  uint64_t v23 = a1;
  uint64_t v24 = v4;
  uint64_t v25 = v5;
  uint64_t v26 = v5;
  uint64_t v27 = 0;
  uint64_t v28 = v4;
  uint64_t v29 = v5;
  uint64_t v30 = v5;
  uint64_t v31 = 0;
  unint64_t result = (char *)sub_AE47A0(&v23);
  if (v32[1] == v24 && v33 == v25 && v34 == v26 && (v34 == v33 || v35 == v27)) {
    return result;
  }
  int v7 = *(_DWORD *)(v35 + 4);
  int v8 = *(_DWORD *)(v35 + 8);
  unsigned int v9 = v8 - v7;
  if (v8 == v7) {
    return result;
  }
  char v22 = 0;
  unsigned int v10 = 0;
  unsigned int v11 = 1;
LABEL_6:
  while (2)
  {
    if (v11 <= v9) {
      unsigned int v12 = v9;
    }
    else {
      unsigned int v12 = v11;
    }
    unint64_t result = (char *)sub_B11F04(a1, a2, v10++);
    if (*((_DWORD *)result + 7) != 0x7FFFFFFF && v10 < v9)
    {
      uint64_t v14 = result;
      for (unsigned int i = v10; v12 != i; ++i)
      {
        unint64_t result = (char *)sub_B11F04(a1, a2, i);
        int v16 = *((_DWORD *)result + 7);
        if (v16 != 0x7FFFFFFF)
        {
          int v17 = *((_DWORD *)v14 + 7);
          if (v17 < v16
            || *((_DWORD *)v14 + 8) > *((_DWORD *)result + 8)
            || (unsigned int v18 = *((_DWORD *)result + 9), v19 = *((_DWORD *)v14 + 9), v19 > v18)
            || *((_DWORD *)v14 + 10) > *((_DWORD *)result + 10)
            || v19 == v18 && v17 == v16 && *((_DWORD *)v14 + 11) - 10 * v17 > *((_DWORD *)result + 11) - 10 * v16)
          {
            if (v16 >= v17 && *((_DWORD *)result + 8) <= *((_DWORD *)v14 + 8))
            {
              unsigned int v20 = *((_DWORD *)v14 + 9);
              unsigned int v21 = *((_DWORD *)result + 9);
              if (v21 <= v20
                && *((_DWORD *)result + 10) <= *((_DWORD *)v14 + 10)
                && (v21 != v20 || v16 != v17 || *((_DWORD *)result + 11) - 10 * v16 <= *((_DWORD *)v14 + 11) - 10 * v17))
              {
                *((_DWORD *)v14 + 7) = 0x7FFFFFFF;
                if (v10 == v9) {
                  return sub_B11C2C((uint64_t)a1, a2);
                }
                char v22 = 1;
                ++v11;
                goto LABEL_6;
              }
            }
          }
          else
          {
            *((_DWORD *)result + 7) = 0x7FFFFFFF;
            char v22 = 1;
          }
        }
      }
    }
    if (v10 != v9)
    {
      ++v11;
      continue;
    }
    break;
  }
  if ((v22 & 1) == 0) {
    return result;
  }
  return sub_B11C2C((uint64_t)a1, a2);
}

BOOL sub_B1D478(void *a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  unsigned int v37 = a2;
  sub_B11D38(a1, &v37, v34);
  uint64_t v12 = a1[6];
  uint64_t v13 = a1[7];
  uint64_t v26 = a1;
  *(void *)&long long v27 = v12;
  *((void *)&v27 + 1) = v13;
  uint64_t v28 = v13;
  uint64_t v29 = 0;
  uint64_t v30 = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v13;
  uint64_t v33 = 0;
  sub_AE47A0(&v26);
  if (*(_OWORD *)&v34[8] == v27
    && *(void *)&v34[24] == v28
    && (*(void *)&v34[24] == *(void *)&v34[16] || (void)v35 == v29))
  {
    goto LABEL_7;
  }
  int v14 = *(_DWORD *)(v35 + 4);
  int v15 = *(_DWORD *)(v35 + 8);
  int v16 = v15 - v14;
  if (v15 == v14) {
    goto LABEL_7;
  }
  if (a6 == 0x7FFFFFFF)
  {
    unsigned int v17 = 0;
    do
      sub_B11F04(a1, a2, v17++);
    while (v16 != v17);
LABEL_7:
    LOBYTE(v18) = 0;
    return v18 != 0;
  }
  __int16 v18 = 0;
  unsigned int v20 = 0;
  do
  {
    unsigned int v21 = (_OWORD *)sub_B11F04(a1, a2, v20);
    long long v22 = v21[2];
    long long v23 = v21[3];
    long long v24 = v21[1];
    *(_OWORD *)uint64_t v34 = *v21;
    *(_OWORD *)&v34[16] = v24;
    long long v35 = v22;
    long long v36 = v23;
    if (SHIDWORD(v24) >= a6)
    {
      __int16 v25 = sub_B1D638((uint64_t)a1, v34, a3, a4, a5);
      __int16 v18 = v25 | v18 | (v25 | v18) & 0xFF00;
    }
    ++v20;
  }
  while (v16 != v20);
  if ((v18 & 0xFF00) != 0) {
    sub_B11C2C((uint64_t)a1, a3);
  }
  return v18 != 0;
}

unint64_t sub_B1D638(uint64_t a1, _DWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  if (a5 != -1)
  {
    unsigned int v38 = a5;
    uint64_t v10 = *(void *)(a1 + 88);
    unsigned int v11 = (_DWORD *)(v10 + ((unint64_t)*(unsigned int *)(sub_B1041C(a1, &v38) + 4) << 6));
    unsigned int v38 = a5;
    uint64_t v12 = *(void *)(a1 + 88);
    uint64_t v13 = (_DWORD *)(v12 + ((unint64_t)*(unsigned int *)(sub_B1041C(a1, &v38) + 8) << 6));
    if (v11 != v13)
    {
      int v14 = a2[7];
      unsigned int v15 = a2[9];
      do
      {
        int v16 = v11[7];
        if (v16 != 0x7FFFFFFF && v16 >= v14 && v11[8] <= a2[8])
        {
          unsigned int v18 = v11[9];
          if (v18 <= v15 && v11[10] <= a2[10])
          {
            BOOL v19 = v11[11] - 10 * v16 > a2[11] - 10 * v14 && v16 == v14;
            if (!v19 || v18 != v15) {
              goto LABEL_37;
            }
          }
        }
        v11 += 16;
      }
      while (v11 != v13);
    }
  }
  unsigned int v38 = a4;
  uint64_t v21 = *(void *)(a1 + 88);
  long long v22 = (_DWORD *)(v21 + ((unint64_t)*(unsigned int *)(sub_B1041C(a1, &v38) + 4) << 6));
  unsigned int v38 = a4;
  uint64_t v23 = *(void *)(a1 + 88);
  long long v24 = (_DWORD *)(v23 + ((unint64_t)*(unsigned int *)(sub_B1041C(a1, &v38) + 8) << 6));
  if (v22 != v24)
  {
    int v25 = a2[7];
    unsigned int v26 = a2[9];
    while (1)
    {
      int v27 = v22[7];
      if (v27 != 0x7FFFFFFF && v27 >= v25 && v22[8] <= a2[8])
      {
        unsigned int v29 = v22[9];
        if (v29 <= v26 && v22[10] <= a2[10])
        {
          BOOL v30 = v22[11] - 10 * v27 > a2[11] - 10 * v25 && v27 == v25;
          if (!v30 || v29 != v26) {
            break;
          }
        }
      }
      v22 += 16;
      if (v22 == v24) {
        goto LABEL_38;
      }
    }
LABEL_37:
    LOBYTE(v32) = 0;
    uint64_t v33 = 0;
    unint64_t v34 = 0;
    return ((unint64_t)v32 << 8) | (v34 << 16) | v33;
  }
LABEL_38:
  unint64_t v35 = sub_B1B038(a1, (uint64_t)a2, a3, 1, 1);
  unint64_t v32 = v35 >> 8;
  unint64_t v34 = v35 >> 16;
  uint64_t v33 = v35;
  if ((_BYTE)v35)
  {
    *(void *)(v36 + 52) = -1;
    *(_DWORD *)(v36 + 60) = 0x7FFFFFFF;
  }
  return ((unint64_t)v32 << 8) | (v34 << 16) | v33;
}

uint64_t sub_B1D84C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  *(_OWORD *)a1 = xmmword_20E2060;
  *(_DWORD *)(a1 + 16) = 8;
  *(_WORD *)(a1 + 20) = 1;
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = a4;
  *(void *)(a1 + 48) = *a5;
  uint64_t v7 = a5[1];
  *(void *)(a1 + 56) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)&long long v8 = 0x8000000080000000;
  *((void *)&v8 + 1) = 0x8000000080000000;
  *(_OWORD *)(a1 + 68) = v8;
  *(void *)(a1 + 88) = 10;
  *(void *)(a1 + 96) = 0x100000004;
  sub_B1D9CC(a1 + 104);
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_DWORD *)(a1 + 416) = -1;
  *(void *)(a1 + 408) = 0;
  sub_BD5668(a1 + 424, a2);
  char v11 = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)(a1 + 528), &__p);
  if (v11 < 0) {
    operator delete((void *)__p);
  }
  return a1;
}

void sub_B1D964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_A387B0(v19);
  sub_A387FC(v18 + 96);
  sub_A3884C(v16 + 296);
  sub_A3884C(v18);
  sub_A3888C(v17);
  sub_14A84(v15);
  _Unwind_Resume(a1);
}

void sub_B1D9B8(_Unwind_Exception *a1)
{
  sub_14A84(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_B1D9CC(uint64_t a1)
{
  *(_WORD *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 26) = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0x3EA3D70A3F4CCCCDLL;
  *(void *)(a1 + 28) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 40) = 0;
  sub_B1DAC8((uint64_t *)(a1 + 48), 32);
  *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)*(unint64_t *)(a1 + 72))));
  *(unsigned char *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  sub_B1DFDC(a1);
  *(unsigned char *)(a1 + 26) = 1;
  *(_DWORD *)(a1 + 32) = -1;
  return a1;
}

void sub_B1DA80(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)(v1 + 112);
  if (v4)
  {
    operator delete(v4);
    uint64_t v5 = *v2;
    if (!*v2)
    {
LABEL_3:
      sub_A38920(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v5 = *v2;
    if (!*v2) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 96) = v5;
  operator delete(v5);
  sub_A38920(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_B1DAC8(uint64_t *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = a2;
  a1[4] = 0;
  if (a2)
  {
    v4[0] = 0;
    v4[1] = 0;
    sub_B1DB5C(a1, (a2 - 1) / 0x30uLL + 1, (uint64_t **)v4);
    if (v4[0]) {
      free(v4[0]);
    }
  }
  return a1;
}

void sub_B1DB38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (a9) {
    free(a9);
  }
  sub_20AE094((uint64_t)&a9, v9);
  _Unwind_Resume(a1);
}

void sub_B1DB5C(uint64_t *a1, unint64_t a2, uint64_t **a3)
{
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v6 = a1[2];
  uint64_t v8 = a1[1];
  if (a2 <= (v6 - v8) >> 4)
  {
    if (a2)
    {
      uint64_t v14 = v8 + 16 * a2;
      do
      {
        *(void *)uint64_t v8 = 0;
        int v16 = *((unsigned __int16 *)a3 + 4);
        *(_WORD *)(v8 + 8) = v16;
        if (v16)
        {
          uint64_t v17 = *((unsigned __int16 *)a3 + 4);
          uint64_t v18 = malloc_type_malloc(12 * v17, 0x10000403E1C8BA9uLL);
          if (!v18)
          {
            fprintf(__stderrp, "sparsehash FATAL ERROR: failed to allocate %lu groups\n", v17);
            exit(1);
          }
          *(void *)uint64_t v8 = v18;
          if (*((_WORD *)a3 + 4))
          {
            BOOL v19 = *a3;
            uint64_t v20 = 12 * *((unsigned __int16 *)a3 + 4);
            do
            {
              uint64_t v21 = *v19;
              v18[2] = *((_DWORD *)v19 + 2);
              *(void *)uint64_t v18 = v21;
              v18 += 3;
              BOOL v19 = (uint64_t *)((char *)v19 + 12);
              v20 -= 12;
            }
            while (v20);
          }
        }
        int v15 = *(_DWORD *)((char *)a3 + 10);
        *(_WORD *)(v8 + 14) = *((_WORD *)a3 + 7);
        *(_DWORD *)(v8 + 10) = v15;
        v8 += 16;
      }
      while (v8 != v14);
      uint64_t v8 = v14;
    }
    a1[1] = v8;
  }
  else
  {
    uint64_t v9 = (v8 - *a1) >> 4;
    if ((v9 + a2) >> 60) {
      sub_2E00();
    }
    uint64_t v10 = v6 - *a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= v9 + a2) {
      uint64_t v11 = v9 + a2;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      uint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v12 = v11;
    }
    if (v12) {
      uint64_t v13 = (char *)malloc_type_malloc(16 * v12, 0x1020040EDED9539uLL);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v22 = (uint64_t)&v13[16 * v9];
    uint64_t v23 = &v13[16 * v12];
    unint64_t v24 = v22 + 16 * a2;
    uint64_t v25 = v22;
    do
    {
      *(void *)uint64_t v25 = 0;
      int v27 = *((unsigned __int16 *)a3 + 4);
      *(_WORD *)(v25 + 8) = v27;
      if (v27)
      {
        uint64_t v28 = *((unsigned __int16 *)a3 + 4);
        unsigned int v29 = malloc_type_malloc(12 * v28, 0x10000403E1C8BA9uLL);
        if (!v29)
        {
          fprintf(__stderrp, "sparsehash FATAL ERROR: failed to allocate %lu groups\n", v28);
          exit(1);
        }
        *(void *)uint64_t v25 = v29;
        if (*((_WORD *)a3 + 4))
        {
          BOOL v30 = *a3;
          uint64_t v31 = 12 * *((unsigned __int16 *)a3 + 4);
          do
          {
            uint64_t v32 = *v30;
            v29[2] = *((_DWORD *)v30 + 2);
            *(void *)unsigned int v29 = v32;
            v29 += 3;
            BOOL v30 = (uint64_t *)((char *)v30 + 12);
            v31 -= 12;
          }
          while (v31);
        }
      }
      int v26 = *(_DWORD *)((char *)a3 + 10);
      *(_WORD *)(v25 + 14) = *((_WORD *)a3 + 7);
      *(_DWORD *)(v25 + 10) = v26;
      v25 += 16;
    }
    while (v25 != v24);
    sub_B1DE84(v7, a1[1], a1[1], *a1, *a1, v22, v22);
    uint64_t v33 = (char *)*a1;
    unint64_t v34 = (char *)a1[1];
    *a1 = v35;
    a1[1] = v24;
    a1[2] = (uint64_t)v23;
    if (v34 != v33)
    {
      uint64_t v36 = v34;
      do
      {
        unsigned int v38 = (void *)*((void *)v36 - 2);
        v36 -= 16;
        unsigned int v37 = v38;
        if (v38)
        {
          free(v37);
          *((void *)v34 - 2) = 0;
        }
        unint64_t v34 = v36;
      }
      while (v36 != v33);
    }
    if (v33) {
      free(v33);
    }
  }
}

void sub_B1DE30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_ACCDC8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_B1DE44(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_B1DE4C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_B1DE54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_ACCDC8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_B1DE6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_ACCDC8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_B1DE84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  uint64_t v18 = a6;
  uint64_t v19 = a7;
  if (a3 != a5)
  {
    uint64_t v9 = a3;
    do
    {
      *(void *)(v7 - 16) = 0;
      int v11 = *(unsigned __int16 *)(v9 - 8);
      *(_WORD *)(v7 - 8) = v11;
      if (v11)
      {
        uint64_t v12 = *(unsigned __int16 *)(v9 - 8);
        uint64_t v13 = malloc_type_malloc(12 * v12, 0x10000403E1C8BA9uLL);
        if (!v13)
        {
          fprintf(__stderrp, "sparsehash FATAL ERROR: failed to allocate %lu groups\n", v12);
          exit(1);
        }
        *(void *)(v7 - 16) = v13;
        if (*(_WORD *)(v9 - 8))
        {
          uint64_t v14 = *(uint64_t **)(v9 - 16);
          uint64_t v15 = 12 * *(unsigned __int16 *)(v9 - 8);
          do
          {
            uint64_t v16 = *v14;
            v13[2] = *((_DWORD *)v14 + 2);
            *(void *)uint64_t v13 = v16;
            v13 += 3;
            uint64_t v14 = (uint64_t *)((char *)v14 + 12);
            v15 -= 12;
          }
          while (v15);
        }
      }
      int v10 = *(_DWORD *)(v9 - 6);
      *(_WORD *)(v7 - 2) = *(_WORD *)(v9 - 2);
      *(_DWORD *)(v7 - 6) = v10;
      uint64_t v7 = v19 - 16;
      v19 -= 16;
      v9 -= 16;
    }
    while (v9 != a5);
    return v18;
  }
  return a6;
}

void sub_B1DFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_ACCFD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_B1DFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_ACCFD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_B1DFDC(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    long long v18 = *(_OWORD *)(a1 + 16);
    int v19 = *(_DWORD *)(a1 + 32);
    memset(v20, 0, sizeof(v20));
    long long v21 = 0u;
    uint64x2_t v17 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_f32(*(float32x2_t *)&v18, 0)));
    BYTE8(v18) = 0;
    sub_B1E168((uint64_t)&v17, 1, (void *)a1, 0x20uLL);
    int v2 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v19;
    int v19 = v2;
    int v3 = *(void **)(a1 + 40);
    uint64_t v4 = *(char **)(a1 + 48);
    *(void **)(a1 + 40) = v20[0];
    uint64x2_t v6 = *(uint64x2_t *)a1;
    long long v5 = *(_OWORD *)(a1 + 16);
    long long v7 = v18;
    *(uint64x2_t *)a1 = v17;
    *(_OWORD *)(a1 + 16) = v7;
    uint64x2_t v17 = v6;
    long long v18 = v5;
    long long v8 = *(_OWORD *)&v20[1];
    v20[0] = v3;
    v20[1] = v4;
    uint64_t v9 = v20[3];
    long long v10 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 48) = v8;
    *(void *)(a1 + 64) = v9;
    *(_OWORD *)&v20[2] = v10;
    *(void *)&long long v8 = v21;
    long long v11 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)(a1 + 72) = v21;
    long long v21 = v11;
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)(unint64_t)v8)));
    *(unsigned char *)(a1 + 24) = 0;
    uint64x2_t v17 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v18, (float)(unint64_t)v11)));
    BYTE8(v18) = 0;
    if (v4)
    {
      uint64_t v12 = (char *)v10;
      uint64_t v13 = v4;
      if ((char *)v10 != v4)
      {
        uint64_t v14 = (char *)v10;
        do
        {
          uint64_t v16 = (void *)*((void *)v14 - 2);
          v14 -= 16;
          uint64_t v15 = v16;
          if (v16)
          {
            free(v15);
            *((void *)v12 - 2) = 0;
          }
          uint64_t v12 = v14;
        }
        while (v14 != v4);
        uint64_t v13 = (char *)v20[1];
      }
      v20[2] = v4;
      free(v13);
    }
  }
}

void sub_B1E144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    sub_20AE0F0((uint64_t)&a9, a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_B1E168(uint64_t a1, int a2, void *a3, unint64_t a4)
{
  if (*(void *)(a1 + 40) | *(void *)(a1 + 80))
  {
    for (uint64_t i = *(void *)(a1 + 48); i != *(void *)(a1 + 56); i += 16)
    {
      if (*(void *)i)
      {
        free(*(void **)i);
        *(void *)uint64_t i = 0;
      }
      *(void *)(i + 8) = 0;
    }
    *(void *)(a1 + 80) = 0;
  }
  unint64_t v9 = *(void *)(a1 + 72);
  float32x2_t v10 = *(float32x2_t *)(a1 + 16);
  *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(v10, (float)v9)));
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 40) = 0;
  if (a2 == 1)
  {
    unint64_t v11 = a3[9];
  }
  else
  {
    unint64_t v11 = 4;
    if (a4 > 4) {
      goto LABEL_28;
    }
    while (a3[10] - a3[5] >= (unint64_t)(float)(v10.f32[0] * (float)v11))
    {
      do
      {
LABEL_28:
        if ((v11 & 0x8000000000000000) != 0)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_2E18(exception, "resize overflow");
        }
        v11 *= 2;
      }
      while (v11 < a4);
    }
  }
  if (v11 > v9)
  {
    sub_B1E3DC((uint64_t *)(a1 + 48), v11);
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)*(unint64_t *)(a1 + 72))));
    *(unsigned char *)(a1 + 24) = 0;
  }
  sub_ACEFB0((uint64_t)a3, &v21);
  uint64_t v12 = a3[7];
  if (v22 != a3[6] || v23 != v12 || v24 != v12)
  {
    while (1)
    {
      uint64_t v15 = *(void *)(a1 + 72) - 1;
      unint64_t v16 = v15 & *(_DWORD *)v25;
      uint64_t v17 = *(void *)(a1 + 48);
      if ((*(unsigned __int8 *)(v17 + 16 * (v16 / 0x30) + (((v15 & *(_DWORD *)v25) % 0x30) >> 3) + 10) >> (((v15 & *(_DWORD *)v25) % 0x30) & 7)))
      {
        uint64_t v18 = 1;
        do
          unint64_t v16 = (v16 + v18++) & v15;
        while (((*(unsigned __int8 *)(v17 + 16 * (v16 / 0x30) + ((v16 % 0x30) >> 3) + 10) >> ((v16 % 0x30) & 7)) & 1) != 0);
      }
      sub_B1E58C((uint64_t *)(a1 + 48), v16, v25);
      sub_ACF3EC(&v21);
      if (v22 == a3[6])
      {
        uint64_t v19 = a3[7];
        if (v23 == v19 && v24 == v19) {
          break;
        }
      }
    }
  }
  ++*(_DWORD *)(a1 + 28);
}

void sub_B1E3C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_B1E3DC(uint64_t *a1, unint64_t a2)
{
  if (a2) {
    unint64_t v4 = (a2 - 1) / 0x30 + 1;
  }
  else {
    unint64_t v4 = 0;
  }
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v5 = a1[1];
  unint64_t v6 = (v5 - *a1) >> 4;
  if (v4 <= v6)
  {
    if (v4 < v6)
    {
      uint64_t v7 = *a1 + 16 * v4;
      if (v5 != v7)
      {
        uint64_t v8 = a1[1];
        do
        {
          float32x2_t v10 = *(void **)(v8 - 16);
          v8 -= 16;
          unint64_t v9 = v10;
          if (v10)
          {
            free(v9);
            *(void *)(v5 - 16) = 0;
          }
          uint64_t v5 = v8;
        }
        while (v8 != v7);
      }
      a1[1] = v7;
    }
  }
  else
  {
    sub_B1DB5C(a1, v4 - v6, (uint64_t **)v23);
    if (v23[0]) {
      free(v23[0]);
    }
  }
  if (a1[3] > a2)
  {
    uint64_t v11 = a1[1];
    if (a2 % 0x30)
    {
      sub_B1E760(v11 - 16, v11 - 16, a2 % 0x30, v11 - 16, 0x30u);
      uint64_t v11 = a1[1];
    }
    a1[4] = 0;
    uint64_t v12 = *a1;
    if (*a1 != v11)
    {
      unint64_t v13 = v11 - v12 - 16;
      if (v13 >= 0x10)
      {
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        uint64_t v18 = (v13 >> 4) + 1;
        uint64_t v15 = v12 + 16 * (v18 & 0x1FFFFFFFFFFFFFFELL);
        uint64_t v19 = (unsigned __int16 *)(v12 + 24);
        uint64_t v20 = v18 & 0x1FFFFFFFFFFFFFFELL;
        do
        {
          uint64_t v21 = *(v19 - 8);
          unsigned int v22 = *v19;
          v19 += 16;
          v16 += v21;
          v17 += v22;
          v20 -= 2;
        }
        while (v20);
        uint64_t v14 = v17 + v16;
        if (v18 == (v18 & 0x1FFFFFFFFFFFFFFELL)) {
          goto LABEL_24;
        }
      }
      else
      {
        uint64_t v14 = 0;
        uint64_t v15 = *a1;
      }
      do
      {
        v14 += *(unsigned __int16 *)(v15 + 8);
        v15 += 16;
      }
      while (v15 != v11);
LABEL_24:
      a1[4] = v14;
    }
  }
  a1[3] = a2;
}

void sub_B1E574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (a9) {
    free(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B1E58C(uint64_t *a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v5 = a2 / 0x30;
  uint64_t v6 = *a1;
  uint64_t v7 = v6 + 16 * (a2 / 0x30);
  unint64_t v8 = a2 % 0x30;
  unint64_t v9 = (unsigned __int8 *)(v7 + 10);
  if ((unsigned __int16)(a2 % 0x30) < 9u)
  {
    __int16 v10 = 0;
    unint64_t v11 = a2 % 0x30;
    goto LABEL_11;
  }
  __int16 v10 = 0;
  unint64_t v11 = (unsigned __int16)(a2 % 0x30 - 9) >> 3;
  if ((unsigned __int16)(a2 % 0x30 - 9) >> 3)
  {
    __int16 v12 = 0;
    unint64_t v13 = v11 + 1;
    uint64_t v14 = (v11 + 1) & 0x3FFE;
    LOWORD(v11) = v8 - 8 * v14;
    uint64_t v15 = &v9[v14];
    uint64_t v16 = (unsigned __int8 *)(v6 + 16 * v5 + 11);
    uint64_t v17 = v14;
    do
    {
      uint64_t v18 = *(v16 - 1);
      int v19 = *v16;
      v16 += 2;
      v10 += byte_20EC2B6[v18];
      v12 += byte_20EC2B6[v19];
      v17 -= 2;
    }
    while (v17);
    v10 += v12;
    if (v13 == v14) {
      goto LABEL_10;
    }
  }
  else
  {
    unint64_t v11 = a2 % 0x30;
    uint64_t v15 = (unsigned __int8 *)(v7 + 10);
  }
  do
  {
    int v20 = *v15++;
    v10 += byte_20EC2B6[v20];
    LOWORD(v11) = v11 - 8;
  }
  while ((unsigned __int16)v11 > 8u);
LABEL_10:
  v9 += ((unsigned __int16)(v8 - 9) >> 3) + 1;
LABEL_11:
  uint64_t v21 = *(unsigned __int16 *)(v7 + 8);
  unint64_t v22 = v7 + (v8 >> 3);
  int v24 = *(unsigned __int8 *)(v22 + 10);
  uint64_t v23 = (unsigned char *)(v22 + 10);
  unsigned __int16 v25 = v10 + byte_20EC2B6[~(-1 << v11) & (unint64_t)*v9];
  int v26 = 1 << (v8 & 7);
  if ((v26 & v24) == 0)
  {
    sub_ACF864(v7, (unsigned __int16)(v10 + byte_20EC2B6[~(-1 << v11) & (unint64_t)*v9]));
    ++*(_WORD *)(v7 + 8);
    *v23 |= v26;
  }
  uint64_t v27 = 12 * v25;
  uint64_t v28 = *(void *)v7 + v27;
  uint64_t v29 = *a3;
  *(_DWORD *)(v28 + 8) = *((_DWORD *)a3 + 2);
  *(void *)uint64_t v28 = v29;
  uint64_t result = *(void *)v7 + v27;
  a1[4] = a1[4] - v21 + *(unsigned __int16 *)(*a1 + 16 * v5 + 8);
  return result;
}

void sub_B1E760(uint64_t a1, uint64_t a2, unsigned __int16 a3, uint64_t a4, unsigned __int16 a5)
{
  unsigned __int16 v8 = a3;
  if (a2 != a4 || a3 != a5)
  {
    __int16 v9 = 0;
    uint64_t v10 = a1 + 10;
    unsigned __int16 v11 = a3 - 9;
    uint64_t v28 = (unsigned __int8 *)(a1 + 11);
    __int16 v29 = a3 - 9;
    while (1)
    {
      uint64_t v12 = a1 + (v8 >> 3);
      int v14 = *(unsigned __int8 *)(v12 + 10);
      unint64_t v13 = (unsigned char *)(v12 + 10);
      int v15 = 1 << (v8 & 7);
      if ((v15 & v14) == 0) {
        goto LABEL_19;
      }
      if (v8 < 9u)
      {
        __int16 v16 = 0;
        int v19 = (unsigned __int8 *)(a1 + 10);
        LOBYTE(v17) = v8;
        if (*(_WORD *)(a1 + 8) == 1) {
          goto LABEL_15;
        }
        goto LABEL_9;
      }
      if ((unsigned __int16)(v29 + v9) < 8u) {
        break;
      }
      __int16 v20 = 0;
      __int16 v21 = 0;
      uint64_t v22 = ((v11 >> 3) + 1) & 0x3FFE;
      unsigned __int16 v17 = v8 - 8 * ((((unsigned __int16)(v29 + v9) >> 3) + 1) & 0x3FFE);
      uint64_t v18 = (unsigned __int8 *)(v10 + ((((unsigned __int16)(v29 + v9) >> 3) + 1) & 0x3FFE));
      int v24 = v28;
      do
      {
        uint64_t v25 = *(v24 - 1);
        int v26 = *v24;
        v24 += 2;
        v20 += byte_20EC2B6[v25];
        v21 += byte_20EC2B6[v26];
        v22 -= 2;
      }
      while (v22);
      __int16 v16 = v21 + v20;
      uint64_t v23 = ((unsigned __int16)(v29 + v9) >> 3) + 1;
      if ((v23 & 0x3FFE) != v23) {
        goto LABEL_13;
      }
LABEL_14:
      int v19 = (unsigned __int8 *)(v10 + ((unsigned __int16)(v8 - 9) >> 3) + 1);
      if (*(_WORD *)(a1 + 8) == 1)
      {
LABEL_15:
        if (*(void *)a1) {
          free(*(void **)a1);
        }
        *(void *)a1 = 0;
        goto LABEL_18;
      }
LABEL_9:
      sub_ACF740(a1, (unsigned __int16)(v16 + byte_20EC2B6[~(-1 << v17) & *v19]));
LABEL_18:
      --*(_WORD *)(a1 + 8);
      *v13 &= ~(_BYTE)v15;
LABEL_19:
      ++v8;
      ++v9;
      ++v11;
      if (a2 == a4 && v8 == a5) {
        return;
      }
    }
    __int16 v16 = 0;
    unsigned __int16 v17 = v8;
    uint64_t v18 = (unsigned __int8 *)(a1 + 10);
    do
    {
LABEL_13:
      int v27 = *v18++;
      v16 += byte_20EC2B6[v27];
      v17 -= 8;
    }
    while (v17 > 8u);
    goto LABEL_14;
  }
}

uint64_t sub_B1E968(uint64_t a1)
{
  uint64_t v20 = 0;
  long long v19 = 0u;
  memset(v18, 0, sizeof(v18));
  *(_OWORD *)long long __p = 0u;
  memset(v16, 0, sizeof(v16));
  char v22 = 0;
  LOBYTE(v21) = 0;
  sub_C50BD8((char *)__p, &v21);
  if (v22 < 0) {
    operator delete((void *)v21);
  }
  BYTE8(v18[8]) = 0;
  uint64_t v20 = 0;
  long long v19 = 0uLL;
  int v2 = (void **)(a1 + 136);
  int v3 = *(void **)(a1 + 136);
  *(_DWORD *)(a1 + 128) = v16[0];
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 144);
    unint64_t v5 = v3;
    if ((void *)v4 != v3)
    {
      do
      {
        v4 -= 296;
        sub_9F5E28(a1 + 152, v4);
      }
      while ((void *)v4 != v3);
      unint64_t v5 = *v2;
    }
    *(void *)(a1 + 144) = v3;
    operator delete(v5);
    *int v2 = 0;
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
  }
  *(_OWORD *)(a1 + 136) = *(_OWORD *)&v16[1];
  *(void **)(a1 + 152) = v16[3];
  memset(&v16[1], 0, 24);
  uint64_t v6 = (void **)(a1 + 160);
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)uint64_t v6 = *(_OWORD *)__p;
  *(void *)(a1 + 176) = *(void *)&v18[0];
  BYTE7(v18[0]) = 0;
  LOBYTE(__p[0]) = 0;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)((char *)&v18[4] + 8);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)((char *)v18 + 8);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)((char *)&v18[1] + 8);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)((char *)&v18[2] + 8);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)((char *)&v18[3] + 8);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)((char *)&v18[5] + 8);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)((char *)&v18[6] + 8);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)((char *)&v18[7] + 8);
  *(unsigned char *)(a1 + 312) = BYTE8(v18[8]);
  uint64_t v7 = *(void **)(a1 + 320);
  if (v7)
  {
    *(void *)(a1 + 328) = v7;
    operator delete(v7);
    *(void *)(a1 + 320) = 0;
    *(void *)(a1 + 328) = 0;
    *(void *)(a1 + 336) = 0;
    int v8 = SBYTE7(v18[0]);
    *(_OWORD *)(a1 + 320) = v19;
    *(void *)(a1 + 336) = v20;
    uint64_t v20 = 0;
    long long v19 = 0uLL;
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)(a1 + 320) = v19;
    *(void *)(a1 + 336) = v20;
    uint64_t v20 = 0;
    long long v19 = 0uLL;
  }
  if (v16[1])
  {
    __int16 v9 = (char *)v16[2];
    uint64_t v10 = v16[1];
    if (v16[2] != v16[1])
    {
      do
      {
        v9 -= 296;
        sub_9F5E28((uint64_t)&v16[3], (uint64_t)v9);
      }
      while (v9 != v16[1]);
      uint64_t v10 = v16[1];
    }
    v16[2] = v16[1];
    operator delete(v10);
  }
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a1 + 88);
  if (*(void *)(a1 + 384) | *(void *)(a1 + 424))
  {
    for (uint64_t i = *(void *)(a1 + 392); i != *(void *)(a1 + 400); i += 16)
    {
      if (*(void *)i)
      {
        free(*(void **)i);
        *(void *)uint64_t i = 0;
      }
      *(void *)(i + 8) = 0;
    }
    *(void *)(a1 + 424) = 0;
  }
  *(uint64x2_t *)(a1 + 344) = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 360), (float)*(unint64_t *)(a1 + 416))));
  *(unsigned char *)(a1 + 368) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 440) = *(void *)(a1 + 432);
  *(_DWORD *)(a1 + 456) = 0;
  if (*(void *)(a1 + 504) | *(void *)(a1 + 544))
  {
    for (uint64_t j = *(void *)(a1 + 512); j != *(void *)(a1 + 520); j += 16)
    {
      if (*(void *)j)
      {
        free(*(void **)j);
        *(void *)uint64_t j = 0;
      }
      *(void *)(j + 8) = 0;
    }
    *(void *)(a1 + 544) = 0;
  }
  *(uint64x2_t *)(a1 + 464) = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 480), (float)*(unint64_t *)(a1 + 536))));
  *(unsigned char *)(a1 + 488) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 560) = *(void *)(a1 + 552);
  *(_DWORD *)(a1 + 576) = 0;
  *(void *)(a1 + 2016) = 0;
  *(void *)(a1 + 2032) = 0;
  *(void *)(a1 + 2024) = 0;
  int v13 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 1352) = v13;
  *(unsigned char *)(a1 + 1356) = *(unsigned char *)(a1 + 28);
  char v14 = *(unsigned char *)(a1 + 72);
  *(unsigned char *)(a1 + 1357) = v14;
  *(_DWORD *)(a1 + 616) = v13;
  *(unsigned char *)(a1 + 634) = 0;
  *(_DWORD *)(a1 + 636) = 0;
  *(unsigned char *)(a1 + 640) = v14;
  v16[0] = (void *)0x1FFFFFFFDLL;
  uint64_t result = sub_AD28B0(a1 + 344, (uint64_t *)v16);
  *(_DWORD *)(a1 + 584) = result;
  return result;
}

void sub_B1ECE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 - 81) < 0) {
    operator delete(*(void **)(v2 - 104));
  }
  sub_20ADF74(v2 - 104, (uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_B1ED10(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v18 = 0;
  long long v19 = 0;
  int v15 = 0;
  __int16 v16 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  sub_ACDFB0((uint64_t)&v26, v2, a1 + 344, a1 + 464, (void *)(a1 + 592), &v18, &v15, &v24);
  int v3 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)v19;
  if (v19 && !atomic_fetch_add((atomic_ullong *volatile)v19 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v26 = *(void *)(a1 + 8);
  uint64_t v28 = v6;
  int v27 = *(_DWORD *)(a1 + 24);
  char v29 = *(unsigned char *)(a1 + 28);
  char v31 = *(unsigned char *)(a1 + 72);
  int v30 = *(_DWORD *)(a1 + 120);
  sub_AD3BC4((uint64_t)&v26, (_OWORD *)(a1 + 88));
  sub_C50C4C(a1 + 160, (uint64_t)&v32, (uint64_t)&__p);
  if (v23 < 0) {
    operator delete(__p);
  }
  unint64_t v7 = *(void *)(a1 + 2016);
  unint64_t v8 = *(void *)(a1 + 304);
  if (v7 > v8) {
    unint64_t v8 = *(void *)(a1 + 2016);
  }
  *(void *)(a1 + 2016) = v8 + v7;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v18);
    sub_188FC78(&v18, (uint64_t)"Primary SPA scanned ", 20);
    __int16 v9 = (void *)std::ostream::operator<<();
    sub_188FC78(v9, (uint64_t)" stop patterns and obtained ", 28);
    uint64_t v10 = (void *)std::ostream::operator<<();
    sub_188FC78(v10, (uint64_t)" journeys in ", 13);
    unsigned __int16 v11 = (void *)std::ostream::operator<<();
    uint64_t v12 = sub_188FC78(v11, (uint64_t)" ms using ", 10);
    int v13 = (void *)sub_38EC58((uint64_t)v12, &v33);
    sub_188FC78(v13, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v15, 2u);
    if (v17 < 0) {
      operator delete(v15);
    }
    if (v21 < 0) {
      operator delete(v20);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return sub_9FD504((uint64_t)&v26);
}

void sub_B1F058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_9FD504((uint64_t)&a69);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_9FD504((uint64_t)&a69);
  _Unwind_Resume(a1);
}

uint64_t sub_B1F0F8(uint64_t a1, int a2)
{
  int v85 = a2;
  *(_DWORD *)(a1 + 616) = a2;
  long long v3 = *(_OWORD *)(a1 + 104);
  v84[0] = *(_OWORD *)(a1 + 88);
  v84[1] = v3;
  LOBYTE(v84[0]) = 1;
  v83[0] = (uint64_t)v84;
  v83[1] = a1;
  _OWORD v83[2] = (uint64_t)&v85;
  uint64_t v4 = *(_DWORD **)(a1 + 592);
  LODWORD(v79) = (*(_DWORD *)(a1 + 584) << *v4) | (2 * a2) | 1;
  int v5 = *(_DWORD *)(sub_AF1DB0((uint64_t)(v4 + 2), (unsigned int *)&v79) + 4);
  unint64_t v7 = (_DWORD *)(a1 + 92);
  unsigned int v6 = *(_DWORD *)(a1 + 92);
  unsigned int v86 = v6;
  if (*(unsigned char *)(a1 + 49))
  {
    int v8 = 10 * (v5 - v6);
    if (v8 < *(_DWORD *)(a1 + 52)) {
      goto LABEL_16;
    }
    int v9 = sub_B20724(v83, v5);
    LODWORD(v75[0]) = v9;
    unsigned int v6 = v86;
    if (v9 != 0x7FFFFFFF && (int)v86 < v9)
    {
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)&v79);
        sub_188FC78(&v79, (uint64_t)"[", 1);
        unsigned __int16 v11 = (void *)std::ostream::operator<<();
        uint64_t v12 = sub_188FC78(v11, (uint64_t)"] Tightening only improved the journey's departure (arrival) from ", 66);
        int v13 = (void *)sub_266E4((uint64_t)v12);
        char v14 = sub_188FC78(v13, (uint64_t)" to ", 4);
        sub_266E4((uint64_t)v14);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 2u);
        if (v78 < 0) {
          operator delete(__p[0]);
        }
        if (v82 < 0) {
          operator delete(v81);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      unsigned int v6 = v75[0];
      unsigned int v86 = v75[0];
    }
    if (*(unsigned char *)(a1 + 49))
    {
LABEL_16:
      if (v8 >= *(_DWORD *)(a1 + 52))
      {
        sub_725D0((uint64_t)__p);
        if (sub_723EC(2u))
        {
          sub_6BAC((uint64_t)&v79);
          sub_188FC78(&v79, (uint64_t)"[", 1);
          int v15 = (void *)std::ostream::operator<<();
          sub_188FC78(v15, (uint64_t)"] Journey duration (", 20);
          __int16 v16 = (void *)std::ostream::operator<<();
          sub_188FC78(v16, (uint64_t)" sec) exceeds tightening threshold; performing tightening by time shift", 71);
          std::stringbuf::str();
          sub_7246C((uint64_t *)v75, 2u);
          if (v76 < 0) {
            operator delete(v75[0]);
          }
          if (v82 < 0) {
            operator delete(v81);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        int v17 = *(_DWORD *)(a1 + 60);
        if (v17 > *(_DWORD *)(a1 + 56))
        {
LABEL_24:
          int v18 = v5;
LABEL_25:
          *(double *)(a1 + 208) = sub_72688((uint64_t)__p);
          unsigned int v6 = v86;
          int v5 = v18;
          unint64_t v7 = (_DWORD *)(a1 + 92);
          goto LABEL_26;
        }
        while (1)
        {
          *(double *)(a1 + 272) = *(double *)(a1 + 272) + 1.0;
          if (sub_723EC(2u))
          {
            sub_6BAC((uint64_t)&v79);
            sub_188FC78(&v79, (uint64_t)"[", 1);
            unsigned int v38 = (void *)std::ostream::operator<<();
            sub_188FC78(v38, (uint64_t)"] Examining time shift of ", 26);
            int v39 = v17 / 10;
            int v40 = v17 % 10;
            __int16 v41 = (void *)std::ostream::operator<<();
            sub_188FC78(v41, (uint64_t)" sec (exponential search)", 25);
            std::stringbuf::str();
            sub_7246C((uint64_t *)v75, 2u);
            if (v76 < 0) {
              operator delete(v75[0]);
            }
            uint64_t v79 = v74;
            *(uint64_t *)((char *)&v79 + *(void *)(v74 - 24)) = v73;
            if (v82 < 0) {
              operator delete(v81);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            std::ios::~ios();
          }
          else
          {
            int v39 = v17 / 10;
            int v40 = v17 % 10;
          }
          if (v17 < 0) {
            char v42 = -5;
          }
          else {
            char v42 = 5;
          }
          unsigned int v43 = v39 + (((103 * (char)(v42 + v40)) >> 15) & 1) + ((103 * (char)(v42 + v40)) >> 10);
          int v44 = v5;
          int v18 = v43 + v5;
          unsigned int v45 = sub_B20724(v83, v43 + v5);
          if (*(double *)(a1 + 64) * (double)(int)fabs((double)(int)(10 * (v45 - v86))) >= (double)(int)fabs((double)(int)(10 * v43)))
          {
            unsigned int v47 = v45;
            if (sub_723EC(2u))
            {
              sub_6BAC((uint64_t)&v79);
              sub_188FC78(&v79, (uint64_t)"[", 1);
              uint64_t v48 = (void *)std::ostream::operator<<();
              sub_188FC78(v48, (uint64_t)"] Journey duration improved from ", 33);
              unsigned __int16 v49 = (void *)std::ostream::operator<<();
              sub_188FC78(v49, (uint64_t)" to ", 4);
              uint64_t v50 = (void *)std::ostream::operator<<();
              sub_188FC78(v50, (uint64_t)" sec for time shift of ", 23);
              int v51 = (void *)std::ostream::operator<<();
              sub_188FC78(v51, (uint64_t)" sec", 4);
              std::stringbuf::str();
              sub_7246C((uint64_t *)v75, 2u);
              if (v76 < 0) {
                operator delete(v75[0]);
              }
              uint64_t v79 = v74;
              *(uint64_t *)((char *)&v79 + *(void *)(v74 - 24)) = v73;
              if (v82 < 0) {
                operator delete(v81);
              }
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              std::ios::~ios();
            }
            unsigned int v86 = v47;
            if (!v43) {
              goto LABEL_25;
            }
            double v52 = (double)v17 * 0.5;
            if (v52 >= 0.0)
            {
              if (v52 < 4.50359963e15)
              {
                uint64_t v53 = (uint64_t)(v52 + v52) + 1;
                goto LABEL_83;
              }
            }
            else if (v52 > -4.50359963e15)
            {
              uint64_t v53 = (uint64_t)(v52 + v52);
              if (v53 >= 1) {
                --v53;
              }
LABEL_83:
              double v52 = (double)(v53 >> 1);
            }
            double v54 = (double)v17 * 0.25;
            if (v54 >= 0.0)
            {
              if (v54 < 4.50359963e15)
              {
                uint64_t v55 = (uint64_t)(v54 + v54) + 1;
                goto LABEL_91;
              }
            }
            else if (v54 > -4.50359963e15)
            {
              uint64_t v55 = (uint64_t)(v54 + v54);
              if (v55 >= 1) {
                --v55;
              }
LABEL_91:
              double v54 = (double)(v55 >> 1);
            }
            int v56 = (int)v54;
            if (*(_DWORD *)(a1 + 60) > (int)v54) {
              goto LABEL_25;
            }
            int v57 = (int)v52;
            while (2)
            {
              *(double *)(a1 + 272) = *(double *)(a1 + 272) + 1.0;
              int v59 = v56 + v57;
              if (sub_723EC(2u))
              {
                sub_6BAC((uint64_t)&v79);
                sub_188FC78(&v79, (uint64_t)"[", 1);
                unsigned __int16 v60 = (void *)std::ostream::operator<<();
                sub_188FC78(v60, (uint64_t)"] Examining time shift of ", 26);
                int v61 = v59 / 10;
                int v62 = v59 % 10;
                uint64_t v63 = (void *)std::ostream::operator<<();
                sub_188FC78(v63, (uint64_t)" sec (binary refinement search)", 31);
                std::stringbuf::str();
                sub_7246C((uint64_t *)v75, 2u);
                if (v76 < 0) {
                  operator delete(v75[0]);
                }
                uint64_t v79 = v74;
                *(uint64_t *)((char *)&v79 + *(void *)(v74 - 24)) = v73;
                if (v82 < 0) {
                  operator delete(v81);
                }
                std::streambuf::~streambuf();
                std::ostream::~ostream();
                std::ios::~ios();
              }
              else
              {
                int v61 = v59 / 10;
                int v62 = v59 % 10;
              }
              if (v59 < 0) {
                char v64 = -5;
              }
              else {
                char v64 = 5;
              }
              unsigned int v65 = v61 + (((103 * (char)(v64 + v62)) >> 15) & 1) + ((103 * (char)(v64 + v62)) >> 10);
              unsigned int v66 = sub_B20724(v83, v65 + v44);
              if (*(double *)(a1 + 64) * (double)(int)fabs((double)(int)(10 * (v86 - v66))) >= (double)(int)fabs((double)(int)(10 * (v18 - (v65 + v44)))))
              {
                v57 += v56;
                double v58 = (double)v56 * 0.5;
                if (v58 >= 0.0) {
                  goto LABEL_114;
                }
              }
              else
              {
                unsigned int v67 = v66;
                if (sub_723EC(2u))
                {
                  sub_6BAC((uint64_t)&v79);
                  sub_188FC78(&v79, (uint64_t)"[", 1);
                  uint64_t v68 = (void *)std::ostream::operator<<();
                  sub_188FC78(v68, (uint64_t)"] Journey duration improved from ", 33);
                  unint64_t v69 = (void *)std::ostream::operator<<();
                  sub_188FC78(v69, (uint64_t)" to ", 4);
                  unint64_t v70 = (void *)std::ostream::operator<<();
                  sub_188FC78(v70, (uint64_t)" sec for time shift of ", 23);
                  uint64_t v71 = (void *)std::ostream::operator<<();
                  sub_188FC78(v71, (uint64_t)" sec", 4);
                  std::stringbuf::str();
                  sub_7246C((uint64_t *)v75, 2u);
                  if (v76 < 0) {
                    operator delete(v75[0]);
                  }
                  uint64_t v79 = v74;
                  *(uint64_t *)((char *)&v79 + *(void *)(v74 - 24)) = v73;
                  if (v82 < 0) {
                    operator delete(v81);
                  }
                  std::streambuf::~streambuf();
                  std::ostream::~ostream();
                  std::ios::~ios();
                }
                unsigned int v86 = v67;
                int v18 = v65 + v44;
                double v58 = (double)v56 * 0.5;
                if (v58 >= 0.0)
                {
LABEL_114:
                  if (v58 < 4.50359963e15)
                  {
                    uint64_t v72 = (uint64_t)(v58 + v58) + 1;
                    goto LABEL_94;
                  }
                  goto LABEL_95;
                }
              }
              if (v58 > -4.50359963e15)
              {
                uint64_t v72 = (uint64_t)(v58 + v58);
                if (v72 >= 1) {
                  --v72;
                }
LABEL_94:
                double v58 = (double)(v72 >> 1);
              }
LABEL_95:
              int v56 = (int)v58;
              if (*(_DWORD *)(a1 + 60) > (int)v58) {
                goto LABEL_25;
              }
              continue;
            }
          }
          double v37 = (double)v17 + (double)v17;
          if (v37 >= 0.0)
          {
            if (v37 >= 4.50359963e15) {
              goto LABEL_50;
            }
            uint64_t v46 = (uint64_t)(v37 + v37) + 1;
          }
          else
          {
            if (v37 <= -4.50359963e15) {
              goto LABEL_50;
            }
            uint64_t v46 = (uint64_t)(v37 + v37);
            if (v46 >= 1) {
              --v46;
            }
          }
          double v37 = (double)(v46 >> 1);
LABEL_50:
          int v17 = (int)v37;
          if (*(_DWORD *)(a1 + 56) < (int)v37) {
            goto LABEL_24;
          }
        }
      }
    }
  }
LABEL_26:
  if (v6 != *v7)
  {
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v79);
      sub_188FC78(&v79, (uint64_t)"[", 1);
      long long v19 = (void *)std::ostream::operator<<();
      uint64_t v20 = sub_188FC78(v19, (uint64_t)"] Shifting ", 11);
      char v21 = sub_188FC78(v20, (uint64_t)"departure", 9);
      char v22 = sub_188FC78(v21, (uint64_t)" time from ", 11);
      char v23 = (void *)sub_266E4((uint64_t)v22);
      uint64_t v24 = sub_188FC78(v23, (uint64_t)" to ", 4);
      sub_266E4((uint64_t)v24);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 2u);
      if (v78 < 0) {
        operator delete(__p[0]);
      }
      if (v82 < 0) {
        operator delete(v81);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *(void *)(a1 + 280) = 0x3FF0000000000000;
  }
  int v25 = v85;
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_41;
  }
  int v26 = v85 + 1;
  int v27 = *(_DWORD *)(a1 + 24);
  if (v85 + 1 <= (v27 + 1)) {
    int v26 = v27 + 1;
  }
  if (v85 + 1 < (v27 + 1))
  {
    int v28 = v26 - 1;
    int v29 = 2 * v85 + 3;
    int v30 = v85;
    while (1)
    {
      char v31 = *(_DWORD **)(a1 + 592);
      LODWORD(v79) = (*(_DWORD *)(a1 + 584) << *v31) | v29;
      if (*(_DWORD *)(sub_AF1DB0((uint64_t)(v31 + 2), (unsigned int *)&v79) + 4) != 0x7FFFFFFF) {
        break;
      }
      ++v30;
      v29 += 2;
      if (v28 == v30) {
        goto LABEL_41;
      }
    }
  }
  else
  {
LABEL_41:
    if (*(_DWORD *)(a1 + 24) >= (*(_DWORD *)(a1 + 124) + v25)) {
      int v30 = *(_DWORD *)(a1 + 124) + v25;
    }
    else {
      int v30 = *(_DWORD *)(a1 + 24);
    }
  }
  *(_DWORD *)(a1 + 616) = v30;
  int v32 = *(_DWORD *)(a1 + 120);
  int v33 = v32 / 10;
  int v34 = v32 % 10;
  if (v32 < 0) {
    char v35 = -5;
  }
  else {
    char v35 = 5;
  }
  sub_B20724(v83, v33 + v5 + (((103 * (char)(v35 + v34)) >> 15) & 1) + ((103 * (char)(v35 + v34)) >> 10));
  return v86;
}

void sub_B201DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a22 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a29);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_B20350(uint64_t a1, int a2, int a3)
{
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_8;
  }
  int v6 = a2 + 1;
  int v7 = *(_DWORD *)(a1 + 24);
  if (a2 + 1 <= (v7 + 1)) {
    int v6 = v7 + 1;
  }
  if (a2 + 1 < (v7 + 1))
  {
    int v8 = v6 - 1;
    int v9 = 2 * a2 + 3;
    int v10 = a2;
    while (1)
    {
      unsigned __int16 v11 = *(_DWORD **)(a1 + 592);
      LODWORD(v26[0]) = (*(_DWORD *)(a1 + 584) << *v11) | v9;
      if (*(_DWORD *)(sub_AF1DB0((uint64_t)(v11 + 2), (unsigned int *)v26) + 4) != 0x7FFFFFFF) {
        break;
      }
      ++v10;
      v9 += 2;
      if (v8 == v10) {
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    if (*(_DWORD *)(a1 + 24) >= (*(_DWORD *)(a1 + 124) + a2)) {
      int v10 = *(_DWORD *)(a1 + 124) + a2;
    }
    else {
      int v10 = *(_DWORD *)(a1 + 24);
    }
  }
  long long v12 = *(_OWORD *)(a1 + 104);
  v38[0] = *(_OWORD *)(a1 + 88);
  v38[1] = v12;
  DWORD1(v38[0]) = a3;
  *(_DWORD *)(a1 + 1352) = v10;
  sub_B209E0(a1 + 1336, v38);
  sub_B20C88(a1 + 1336, (uint64_t)v30);
  sub_C50C4C(a1 + 160, a1 + 1864, (uint64_t)&__p);
  if (v29 < 0) {
    operator delete(__p);
  }
  unint64_t v13 = *(void *)(a1 + 2008);
  *(void *)(a1 + 304) -= v13;
  unint64_t v14 = *(void *)(a1 + 2032);
  if (v14 <= v13) {
    unint64_t v14 = v13;
  }
  *(void *)(a1 + 2032) = v14;
  sub_A4D564((uint64_t)v26, (uint64_t)v31, (uint64_t)v32, a1 + 136);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v26);
    sub_188FC78(v26, (uint64_t)"[", 1);
    int v15 = (void *)std::ostream::operator<<();
    sub_188FC78(v15, (uint64_t)"] McSPA scanned ", 16);
    __int16 v16 = (void *)std::ostream::operator<<();
    sub_188FC78(v16, (uint64_t)" stop patterns and obtained ", 28);
    int v17 = (void *)std::ostream::operator<<();
    sub_188FC78(v17, (uint64_t)" journeys in ", 13);
    int v18 = (void *)std::ostream::operator<<();
    long long v19 = sub_188FC78(v18, (uint64_t)" ms using ", 10);
    uint64_t v20 = (void *)sub_38EC58((uint64_t)v19, (unint64_t *)(a1 + 2008));
    sub_188FC78(v20, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v24, 2u);
    if (v25 < 0) {
      operator delete(v24);
    }
    if (v27 < 0) {
      operator delete((void *)v26[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (v36)
  {
    double v37 = v36;
    operator delete(v36);
  }
  if (v35 < 0) {
    operator delete(v34);
  }
  char v21 = (char *)v31;
  if (v31)
  {
    char v22 = v32;
    char v23 = v31;
    if (v32 != v31)
    {
      do
      {
        v22 -= 296;
        sub_9F5E28((uint64_t)&v33, (uint64_t)v22);
      }
      while (v22 != v21);
      char v23 = v31;
    }
    int v32 = v21;
    operator delete(v23);
  }
}

void sub_B206A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_9F53E0((uint64_t)&a67);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_9F53E0((uint64_t)&a67);
  _Unwind_Resume(a1);
}

uint64_t sub_B20724(uint64_t *a1, int a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  *(_DWORD *)(v2 + 4) = a2;
  sub_AD8EF4(v3 + 608, (_OWORD *)v2);
  sub_C50C4C(v3 + 160, v3 + 1184, (uint64_t)&v20);
  if (v21 < 0) {
    operator delete(v20);
  }
  unint64_t v4 = *(void *)(v3 + 1328);
  *(void *)(v3 + 304) -= v4;
  unint64_t v5 = *(void *)(v3 + 2024);
  if (v5 <= v4) {
    unint64_t v5 = v4;
  }
  *(void *)(v3 + 2024) = v5;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v18);
    sub_188FC78(v18, (uint64_t)"[", 1);
    int v6 = (void *)std::ostream::operator<<();
    sub_188FC78(v6, (uint64_t)"] Secondary SPA scanned ", 24);
    int v7 = (void *)std::ostream::operator<<();
    sub_188FC78(v7, (uint64_t)" stop patterns and obtained ", 28);
    int v8 = (void *)std::ostream::operator<<();
    sub_188FC78(v8, (uint64_t)" journeys in ", 13);
    int v9 = (void *)std::ostream::operator<<();
    int v10 = sub_188FC78(v9, (uint64_t)" ms using ", 10);
    unsigned __int16 v11 = (void *)sub_38EC58((uint64_t)v10, (unint64_t *)(v3 + 1328));
    sub_188FC78(v11, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (v17 < 0) {
      operator delete(__p);
    }
    if (v19 < 0) {
      operator delete((void *)v18[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unint64_t v12 = *(unsigned int *)(v3 + 1040);
  uint64_t v13 = *(void *)(v3 + 800);
  unint64_t v14 = (*(void *)(v3 + 808) - v13) >> 2;
  if (v14 <= v12)
  {
    sub_5BBEE0(v3 + 800, v12 - v14 + 1);
    uint64_t v13 = *(void *)(v3 + 800);
  }
  return *(unsigned int *)(v13 + 4 * v12);
}

void sub_B20994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_B209E0(uint64_t a1, _OWORD *a2)
{
  sub_725D0((uint64_t)v36);
  long long v4 = a2[1];
  *(_OWORD *)(a1 + 64) = *a2;
  *(_OWORD *)(a1 + 80) = v4;
  sub_B23218(a1);
  uint64_t v5 = *(void *)(a1 + 32);
  v37[0] = 0x1FFFFFFFDLL;
  *(_DWORD *)(a1 + 416) = sub_AD28B0(v5, v37);
  sub_B23470(a1);
  if (*(_DWORD *)(a1 + 100) >= 2u)
  {
    uint64_t v6 = 1;
    while (1)
    {
      if (v6)
      {
        char v17 = *(unsigned int **)(a1 + 320);
        int v18 = *(unsigned int **)(a1 + 328);
        if (v17 != v18)
        {
          uint64_t v19 = *(void *)(a1 + 296);
          uint64_t v20 = *(unsigned int **)(a1 + 320);
          do
          {
            unsigned int v21 = *v20++;
            *(void *)(v19 + (((unint64_t)v21 >> 3) & 0x1FFFFFF8)) &= ~(1 << v21);
          }
          while (v20 != v18);
        }
        *(void *)(a1 + 328) = v17;
        sub_B235DC(a1, v6);
        sub_B2387C(a1, v6);
        uint64_t v16 = *(void *)(a1 + 320);
        if (v16 == *(void *)(a1 + 328)) {
          goto LABEL_22;
        }
        uint64_t v15 = *(void *)(a1 + 272);
      }
      else
      {
        int v7 = *(unsigned int **)(a1 + 272);
        int v8 = *(unsigned int **)(a1 + 280);
        if (v7 != v8)
        {
          uint64_t v9 = *(void *)(a1 + 248);
          int v10 = *(unsigned int **)(a1 + 272);
          do
          {
            unsigned int v11 = *v10++;
            *(void *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) &= ~(1 << v11);
          }
          while (v10 != v8);
        }
        *(void *)(a1 + 280) = v7;
        sub_AE1608((void *)a1);
        sub_725D0((uint64_t)v37);
        unint64_t v12 = *(unsigned int **)(a1 + 392);
        uint64_t v13 = *(unsigned int **)(a1 + 400);
        while (v12 != v13)
        {
          unsigned int v14 = *v12++;
          sub_B27960(a1, v6, v14);
        }
        *(double *)(a1 + 560) = sub_72688((uint64_t)v37) + *(double *)(a1 + 560);
        uint64_t v15 = *(void *)(a1 + 272);
        if (v15 == *(void *)(a1 + 280)) {
          goto LABEL_22;
        }
        uint64_t v16 = *(void *)(a1 + 320);
      }
      uint64_t v34 = *(void *)(a1 + 208);
      uint64_t v35 = *(void *)(a1 + 176);
      uint64_t v32 = 8 * (*(void *)(a1 + 232) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v33 = *(void *)(a1 + 192);
      uint64_t v22 = *(void *)(a1 + 288);
      uint64_t v23 = 8 * (*(void *)(a1 + 312) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v24 = *(void *)(a1 + 360);
      uint64_t v25 = *(void *)(a1 + 336);
      uint64_t v30 = *(void *)(a1 + 344);
      uint64_t v31 = 8 * (*(void *)(a1 + 264) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v29 = *(void *)(a1 + 392);
      uint64_t v26 = 8 * (*(void *)(a1 + 384) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v27 = *(void *)(a1 + 408);
      unint64_t v28 = v34
          + 12 * v35
          - v33
          + v32
          + v22
          + v31
          - v15
          + v25
          + v23
          + v24
          - (v16
           + v30)
          + v26
          + v27
          - v29
          + sub_BD6170((void *)(a1 + 424))
          + 680;
      if (*(void *)(a1 + 672) > v28) {
        unint64_t v28 = *(void *)(a1 + 672);
      }
      *(void *)(a1 + 672) = v28;
      if (!sub_B24E80(a1) && ++v6 < (unint64_t)*(unsigned int *)(a1 + 100)) {
        continue;
      }
      goto LABEL_22;
    }
  }
  LODWORD(v6) = 1;
LABEL_22:
  sub_B251D0(a1);
  *(double *)(a1 + 600) = (double)v6;
  *(double *)(a1 + 552) = sub_72688((uint64_t)v36);
}

std::string *sub_B20C88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0;
  uint64_t v336 = (uint64_t *)(a2 + 8);
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  HIBYTE(v370) = 0;
  LOBYTE(__p[0]) = 0;
  long long v334 = (std::string *)(a2 + 32);
  sub_C50BD8((char *)(a2 + 32), (long long *)__p);
  if (SHIBYTE(v370) < 0) {
    operator delete(*(void **)__p);
  }
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  uint64_t v4 = a2 + 192;
  *(void *)(v4 + 16) = 0;
  *(unsigned char *)(v4 - 8) = *(unsigned char *)(a1 + 64);
  unsigned int v5 = *(_DWORD *)(a1 + 100);
  if (v5 <= 1) {
    int v6 = 1;
  }
  else {
    int v6 = *(_DWORD *)(a1 + 100);
  }
  int v335 = v6;
  if (v5 >= 2)
  {
    int v8 = (void *)(a1 + 104);
    __asm { FMOV            V0.2D, #1.0 }
    long long v338 = _Q0;
    int v337 = 1;
    uint64_t v342 = a1 + 104;
    uint64_t v343 = a1;
    do
    {
      __p[0] = 0;
      uint64_t v12 = *(void *)(a1 + 192);
      uint64_t v13 = *(unsigned int *)(sub_B25B80((uint64_t)v8, __p) + 4);
      __p[0] = 0;
      uint64_t v14 = *(void *)(a1 + 192);
      uint64_t v15 = sub_B25B80((uint64_t)v8, __p);
      sub_B257BC((uint64_t)v8, 0, (char *)(v12 + (v13 << 6)), (unsigned char *)(v14 + ((unint64_t)*(unsigned int *)(v15 + 8) << 6)));
      sub_B2780C(v8, v337 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * *(_DWORD *)(a1 + 416) + 2, 0);
      __p[0] = 0;
      uint64_t v16 = *(void *)(a1 + 192);
      uint64_t v17 = *(unsigned int *)(sub_B25B80((uint64_t)v8, __p) + 4);
      __p[0] = 0;
      uint64_t v18 = *(void *)(a1 + 192);
      int v341 = (unsigned int *)(v16 + (v17 << 6));
      int v339 = (unsigned int *)(v18 + ((unint64_t)*(unsigned int *)(sub_B25B80((uint64_t)v8, __p) + 8) << 6));
      for (_ZF = v341 == v339; !_ZF; _ZF = v341 == v339)
      {
        LOWORD(__p[0]) = 0;
        BYTE2(__p[0]) = 0;
        *(void *)&__p[1] = 0;
        *(void *)&__p[3] = 0x7FFFFFFFFFFFFFFFLL;
        int v370 = 0x7FFFFFFF;
        __int16 v371 = 0;
        unint64_t v372 = 0x8000000080000000;
        __int16 v373 = 0;
        unint64_t v374 = 0x8000000080000000;
        int v375 = 0x7FFFFFFF;
        __int16 v376 = 0;
        unint64_t v377 = 0x8000000080000000;
        __int16 v378 = 0;
        unint64_t v379 = 0x8000000080000000;
        __int16 v380 = 0;
        unint64_t v381 = 0xFFFFFFFF00000000;
        int v382 = -1;
        uint64_t v383 = 0;
        long long v385 = 0;
        uint64_t v386 = 0;
        uint64_t v387 = 0;
        int v384 = 0x7FFFFFFF;
        int v388 = 100;
        int v389 = -1;
        long long v390 = v338;
        long long v391 = v338;
        long long v392 = v338;
        long long v393 = 0u;
        long long v394 = 0u;
        long long v395 = 0u;
        long long v396 = 0u;
        uint64_t v20 = *(void *)(a1 + 24);
        long long v397 = 0u;
        long long v398 = 0u;
        if (sub_C259C0(v20 + 3896) && *(void *)(v20 + 3944))
        {
          BOOL v21 = 1;
        }
        else
        {
          uint64_t v22 = *(void *)(a1 + 24);
          BOOL v21 = sub_C259D4(v22 + 3896) && *(void *)(v22 + 3960) != 0;
        }
        BYTE1(__p[0]) = v21;
        uint64_t v23 = *(void *)(a1 + 24);
        if (!sub_C259D4(v23 + 3896))
        {
          __p[1] = 0;
          if (*v341 == -1) {
            goto LABEL_390;
          }
LABEL_23:
          unsigned int v24 = *(_DWORD *)(a1 + 416);
          uint64_t v25 = v341;
          int v344 = v337;
          while (2)
          {
            int v361 = 0;
            int v362 = 0;
            unint64_t v363 = 0;
            unint64_t v366 = 0;
            uint64_t v367 = 0;
            __int16 v365 = 0;
            v368[0] = 1;
            *(void *)&v368[4] = 0x8000000080000000;
            *(_WORD *)&v368[12] = 0;
            v368[14] = 0;
            int v421 = -1;
            if (v25[4] == -1)
            {
LABEL_275:
              char v364 = 1;
              unsigned int v243 = v25[3];
              unsigned int v244 = v25[7];
              uint64_t v245 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), *v25);
              uint64_t v246 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), v24);
              *(_DWORD *)long long v401 = 0;
              *(_DWORD *)&v401[4] = v243;
              *(void *)&v401[12] = v245;
              *(void *)&v401[20] = v246;
              *(_DWORD *)&v401[8] = v244;
              int v410 = 1;
              if (v421)
              {
                if (v421 == 1)
                {
                  *(_OWORD *)int v411 = *(_OWORD *)v401;
                  *(_OWORD *)&v411[12] = *(_OWORD *)&v401[12];
                  goto LABEL_287;
                }
LABEL_286:
                *(_OWORD *)int v411 = *(_OWORD *)v401;
                *(_OWORD *)&v411[12] = *(_OWORD *)&v401[12];
                int v421 = 1;
              }
              else
              {
                if ((void)v418)
                {
                  *((void *)&v418 + 1) = v418;
                  operator delete((void *)v418);
                }
                if ((void)v415)
                {
                  *((void *)&v415 + 1) = v415;
                  operator delete((void *)v415);
                }
                if (v413[0])
                {
                  v413[1] = v413[0];
                  operator delete(v413[0]);
                }
                if (v410)
                {
                  if (v410 == 1) {
                    goto LABEL_286;
                  }
                  int v421 = v410;
                }
                else
                {
                  sub_9F6FA0((uint64_t)v411, (long long *)v401);
                  int v421 = v410;
                  if (!v410)
                  {
                    if ((void)v407)
                    {
                      *((void *)&v407 + 1) = v407;
                      operator delete((void *)v407);
                    }
                    if (v405[0])
                    {
                      v405[1] = v405[0];
                      operator delete(v405[0]);
                    }
                    if ((void)v403)
                    {
                      *((void *)&v403 + 1) = v403;
                      operator delete((void *)v403);
                    }
                  }
                }
              }
LABEL_287:
              unsigned int v24 = *v25;
              uint64_t v240 = (uint64_t)v362;
              if ((unint64_t)v362 >= v363) {
                goto LABEL_288;
              }
LABEL_270:
              *(_DWORD *)(v240 + 160) = v421;
              if (v421 == 1)
              {
                long long v274 = *(_OWORD *)v411;
                *(_OWORD *)(v240 + 12) = *(_OWORD *)&v411[12];
                *(_OWORD *)uint64_t v240 = v274;
                int v362 = (char *)(v240 + 168);
                uint64_t v241 = *((void *)&v393 + 1);
                if (*((void *)&v393 + 1) < (unint64_t)v394) {
                  goto LABEL_289;
                }
              }
              else
              {
                if (!v421) {
                  sub_9F6FA0(v240, (long long *)v411);
                }
                int v362 = (char *)(v240 + 168);
                uint64_t v241 = *((void *)&v393 + 1);
                if (*((void *)&v393 + 1) < (unint64_t)v394) {
                  goto LABEL_289;
                }
              }
LABEL_274:
              uint64_t v242 = sub_A4CECC((void ***)&v393, (uint64_t)&v361);
              goto LABEL_302;
            }
            long long v345 = xmmword_20E12E0;
            __int16 v346 = 0;
            unint64_t v347 = 0x8000000080000000;
            __int16 v348 = 0;
            *(_OWORD *)unint64_t v349 = xmmword_20EB6B0;
            *(void *)&v349[16] = 0xFFFFFFFF7FFFFFFFLL;
            long long v351 = 0u;
            long long v352 = 0u;
            long long v353 = 0u;
            int v350 = -1;
            int v354 = 0x7FFFFFFF;
            int v356 = 0;
            uint64_t v357 = 0;
            unsigned int v355 = 0;
            char v358 = 1;
            unint64_t v359 = 0x8000000080000000;
            int v360 = 0;
            char v364 = 0;
            uint64_t v27 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 40) + 88), v25[4]);
            *(void *)unint64_t v349 = v27;
            uint64_t v28 = *(void *)(v25 + 1);
            *(_DWORD *)&v349[16] = v25[3];
            *(void *)&v349[8] = v28;
            *(_DWORD *)&v349[20] = *v25;
            unsigned int v29 = *(_DWORD *)&v349[20];
            uint64_t v30 = *(void *)(a1 + 24);
            unint64_t v399 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), v24);
            sub_A1E9A0((uint64_t)v401, v30, v27, v29, 0, 0);
            *(void *)&long long v403 = *(void *)&v402[24] + 12 * *(unsigned int *)&v349[8];
            if (LOBYTE(v405[1])) {
              *(void **)((char *)&v405[1] + 4) = *(void **)&v349[12];
            }
            if (*(void *)&v402[16]) {
              uint64_t v31 = *(unsigned int *)(*(void *)&v402[16]
            }
                                    + 4 * ((*(void *)v402 - *(void *)&v401[24]) >> 4));
            else {
              uint64_t v31 = 0;
            }
            sub_A4C9D4((uint64_t)v401, &v399, v31);
            _CF = *(void *)v402 < *(void *)&v402[8] && *(void *)v402 >= *(void *)&v401[24];
            uint64_t v33 = (*(void *)v402 - *(void *)&v401[24]) >> 4;
            if (!_CF) {
              LODWORD(v33) = -1;
            }
            int v350 = v33;
            uint64_t v34 = *(void *)(a1 + 32);
            uint64_t v35 = (void *)(*(void *)(a1 + 24) + 4136);
            unint64_t v36 = *(void *)v349;
            unsigned int v37 = *(_DWORD *)&v349[20];
            uint64_t v38 = HIDWORD(*(void *)v349);
            if (sub_A10E20(v35, *(int *)&v349[4]))
            {
              int v39 = (int *)sub_A1120C(*(void *)(*v35 + 3944), v36);
            }
            else
            {
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                && __cxa_guard_acquire(&qword_24F7308))
              {
                sub_518C8(0x3B60u, 0x7FCAu);
                dword_24F7300 = v303 | 0x40000000;
                __cxa_guard_release(&qword_24F7308);
              }
              uint64_t v40 = *v35;
              if (dword_24F7300 == v38)
              {
                __int16 v41 = *(unsigned int **)(*(void *)(v40 + 3976) + 72);
                if (!v41)
                {
                  exception = __cxa_allocate_exception(0x40uLL);
                  sub_5E5C(v401, "Realtime stop pattern quad data requested on nullptr buffer");
                  int v331 = (void *)sub_2F404((uint64_t)exception, (long long *)v401);
                }
                char v42 = (int *)((char *)v41 + *v41);
                unsigned int v43 = (unsigned __int16 *)((char *)v42 - *v42);
                if (*v43 >= 5u && (uint64_t v44 = v43[2]) != 0) {
                  unsigned int v45 = (unsigned int *)((char *)v42 + v44 + *(unsigned int *)((char *)v42 + v44));
                }
                else {
                  unsigned int v45 = 0;
                }
                int v39 = (int *)sub_A1139C(v45, v36);
              }
              else
              {
                int v39 = (int *)sub_A11500(v40 + 24, v36, 0, "stop pattern");
              }
            }
            uint64_t v46 = (unsigned __int16 *)((char *)v39 - *v39);
            if (*v46 >= 9u && (uint64_t v47 = v46[4]) != 0) {
              uint64_t v48 = (unsigned int *)((char *)v39 + v47 + *(unsigned int *)((char *)v39 + v47));
            }
            else {
              uint64_t v48 = 0;
            }
            unsigned __int16 v49 = (void *)sub_A10764(v48, v37);
            uint64_t v50 = 0;
            unint64_t v51 = __ROR8__(*v49, 32);
            uint64_t v52 = *(void *)(v34 + 72) - 1;
            unint64_t v53 = 0xC4CEB9FE1A85EC53
                * ((0xFF51AFD7ED558CCDLL * (v51 ^ (v51 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v51 ^ (v51 >> 33))) >> 33));
            unint64_t v54 = v53 ^ (v53 >> 33);
            uint64_t v55 = *(void *)(v34 + 48);
            uint64_t v56 = v55 + 11;
            uint64_t v57 = -1;
            unint64_t v58 = v54;
LABEL_57:
            uint64_t v59 = v58 & v52;
            unint64_t v60 = (v58 & v52) / 0x30;
            unint64_t v61 = v59 - 48 * v60;
            if (((*(unsigned __int8 *)(v55 + 16 * v60 + (v61 >> 3) + 10) >> (v61 & 7)) & 1) == 0)
            {
              if (v57 == -1) {
                unint64_t v97 = v59;
              }
              else {
                unint64_t v97 = v57;
              }
              goto LABEL_94;
            }
            uint64_t v62 = *(void *)(v55 + 16 * v60);
            if (!*(void *)(v34 + 40)) {
              goto LABEL_73;
            }
            uint64_t v63 = (unsigned __int8 *)(v55 + 16 * v60 + 10);
            if ((unsigned __int16)(v59 - 48 * v60) < 9u)
            {
              __int16 v64 = 0;
              LOBYTE(v69) = v59 - 48 * v60;
              goto LABEL_69;
            }
            __int16 v64 = 0;
            uint64_t v65 = (unsigned __int16)(v59 - 48 * v60 - 9) >> 3;
            if ((unsigned __int16)(v59 - 48 * v60 - 9) >> 3)
            {
              __int16 v66 = 0;
              uint64_t v67 = v65 + 1;
              uint64_t v68 = (v65 + 1) & 0x3FFE;
              unsigned __int16 v69 = v61 - 8 * v68;
              unint64_t v70 = &v63[v68];
              uint64_t v71 = (unsigned __int8 *)(v56 + 16 * v60);
              uint64_t v72 = v68;
              do
              {
                uint64_t v73 = *(v71 - 1);
                int v74 = *v71;
                v71 += 2;
                v64 += byte_20EBFB6[v73];
                v66 += byte_20EBFB6[v74];
                v72 -= 2;
              }
              while (v72);
              v64 += v66;
              if (v67 == v68)
              {
LABEL_68:
                v63 += ((unsigned __int16)(v61 - 9) >> 3) + 1;
LABEL_69:
                char v76 = (_DWORD *)(v62
                               + 12
                               * (unsigned __int16)(v64
                                                  + byte_20EBFB6[~(-1 << v69) & (unint64_t)*v63]));
                if (*(_DWORD *)(v34 + 36) == v76[1] && *(_DWORD *)(v34 + 32) == *v76)
                {
                  if (v57 == -1) {
                    uint64_t v57 = v59;
                  }
                }
                else
                {
LABEL_73:
                  char v78 = (unsigned __int8 *)(v55 + 16 * v60 + 10);
                  if ((unsigned __int16)(v59 - 48 * v60) >= 9u)
                  {
                    __int16 v79 = 0;
                    uint64_t v80 = (unsigned __int16)(v59 - 48 * v60 - 9) >> 3;
                    if ((unsigned __int16)(v59 - 48 * v60 - 9) >> 3)
                    {
                      __int16 v81 = 0;
                      uint64_t v82 = v80 + 1;
                      uint64_t v83 = (v80 + 1) & 0x3FFE;
                      unsigned __int16 v84 = v61 - 8 * v83;
                      int v85 = &v78[v83];
                      unsigned int v86 = (unsigned __int8 *)(v56 + 16 * v60);
                      uint64_t v87 = v83;
                      do
                      {
                        uint64_t v88 = *(v86 - 1);
                        int v89 = *v86;
                        v86 += 2;
                        v79 += byte_20EBFB6[v88];
                        v81 += byte_20EBFB6[v89];
                        v87 -= 2;
                      }
                      while (v87);
                      v79 += v81;
                      if (v82 == v83)
                      {
LABEL_82:
                        __int16 v90 = &v78[((unsigned __int16)(v61 - 9) >> 3) + 1];
                        goto LABEL_83;
                      }
                    }
                    else
                    {
                      unsigned __int16 v84 = v59 - 48 * v60;
                      int v85 = (unsigned __int8 *)(v55 + 16 * v60 + 10);
                    }
                    do
                    {
                      int v91 = *v85++;
                      v79 += byte_20EBFB6[v91];
                      v84 -= 8;
                    }
                    while (v84 > 8u);
                    goto LABEL_82;
                  }
                  __int16 v79 = 0;
                  __int16 v90 = (unsigned __int8 *)(v55 + 16 * v60 + 10);
                  LOBYTE(v84) = v59 - 48 * v60;
LABEL_83:
                  if (v51 == *(void *)(v62
                                        + 12
                                        * (unsigned __int16)(v79
                                                           + byte_20EBFB6[~(-1 << v84) & (unint64_t)*v90])))
                  {
                    if (v59 != -1)
                    {
                      if ((unsigned __int16)(v59 - 48 * v60) < 9u)
                      {
                        __int16 v94 = 0;
                      }
                      else
                      {
                        if ((((_WORD)v59 - 48 * (_WORD)v60 - 8) & 0xFFF8) != 0) {
                          __int16 v92 = 8;
                        }
                        else {
                          __int16 v92 = v59 - 48 * v60 - 8;
                        }
                        unsigned __int16 v93 = ~v92 + v59 - 48 * v60;
                        if (v93 < 8u)
                        {
                          __int16 v94 = 0;
                          unsigned __int16 v95 = v61;
                          uint64_t v96 = (unsigned __int8 *)(v55 + 16 * v60 + 10);
                          goto LABEL_339;
                        }
                        __int16 v275 = 0;
                        __int16 v276 = 0;
                        uint64_t v277 = (v93 >> 3) + 1;
                        unsigned __int16 v95 = v61 - 8 * (((v93 >> 3) + 1) & 0x3FFE);
                        uint64_t v96 = &v78[v277 & 0x3FFE];
                        unsigned int v278 = (unsigned __int8 *)(v55 + 16 * v60 + 11);
                        uint64_t v279 = v277 & 0x3FFE;
                        do
                        {
                          uint64_t v280 = *(v278 - 1);
                          int v281 = *v278;
                          v278 += 2;
                          v275 += byte_20EBFB6[v280];
                          v276 += byte_20EBFB6[v281];
                          v279 -= 2;
                        }
                        while (v279);
                        __int16 v94 = v276 + v275;
                        if ((v277 & 0x3FFE) != v277)
                        {
                          do
                          {
LABEL_339:
                            int v282 = *v96++;
                            v94 += byte_20EBFB6[v282];
                            v95 -= 8;
                          }
                          while (v95 > 8u);
                        }
                        v78 += ((unsigned __int16)(v61 - 9) >> 3) + 1;
                        LOBYTE(v61) = v95;
                      }
                      uint64_t v283 = *(void *)(v34 + 56);
                      unsigned __int16 v284 = v94 + byte_20EBFB6[~(-1 << v61) & (unint64_t)*v78];
                      uint64_t v285 = v55 + 16 * v60;
                      if (*(unsigned __int16 *)(v285 + 8) != v284 || v285 + 16 == v283)
                      {
                        uint64_t v142 = (_DWORD *)(v62 + 12 * v284);
                      }
                      else
                      {
                        uint64_t v287 = v285 + 32;
                        do
                        {
                          if (*(_WORD *)(v287 - 8)) {
                            BOOL v288 = 1;
                          }
                          else {
                            BOOL v288 = v287 == v283;
                          }
                          v287 += 16;
                        }
                        while (!v288);
                        uint64_t v142 = *(_DWORD **)(v287 - 32);
                      }
                      goto LABEL_139;
                    }
                    unint64_t v97 = -1;
LABEL_94:
                    if (!sub_AD2F40(v34, 1))
                    {
                      unint64_t v399 = v51;
                      int v400 = -1;
                      sub_AD3484(v34, (uint64_t *)&v399, v97, v401);
LABEL_138:
                      uint64_t v142 = *(_DWORD **)v402;
                      goto LABEL_139;
                    }
                    uint64_t v98 = 0;
                    unint64_t v399 = v51;
                    int v400 = -1;
                    uint64_t v99 = *(void *)(v34 + 72) - 1;
                    uint64_t v100 = *(void *)(v34 + 48);
                    uint64_t v101 = v100 + 11;
                    uint64_t v102 = -1;
                    while (2)
                    {
                      uint64_t v103 = v54 & v99;
                      unint64_t v104 = (v54 & v99) / 0x30;
                      unint64_t v105 = (v54 & v99) % 0x30;
                      if (((*(unsigned __int8 *)(v100 + 16 * v104 + (v105 >> 3) + 10) >> (v105 & 7)) & 1) == 0)
                      {
                        if (v102 == -1) {
                          unint64_t v141 = v54 & v99;
                        }
                        else {
                          unint64_t v141 = v102;
                        }
                        goto LABEL_137;
                      }
                      uint64_t v106 = *(void *)(v34 + 40);
                      uint64_t v107 = *(void *)(v100 + 16 * v104);
                      if (!v106) {
                        break;
                      }
                      uint64_t v108 = (unsigned __int8 *)(v100 + 16 * v104 + 10);
                      if ((unsigned __int16)((v54 & v99) % 0x30) < 9u)
                      {
                        __int16 v109 = 0;
                        unint64_t v110 = (v54 & v99) % 0x30;
                        goto LABEL_111;
                      }
                      __int16 v109 = 0;
                      unint64_t v110 = (unsigned __int16)(v103 - 48 * v104 - 9) >> 3;
                      if (!((unsigned __int16)(v103 - 48 * v104 - 9) >> 3))
                      {
                        unint64_t v110 = (v54 & v99) % 0x30;
                        uint64_t v114 = (unsigned __int8 *)(v100 + 16 * v104 + 10);
                        do
                        {
LABEL_109:
                          int v119 = *v114++;
                          v109 += byte_20EBFB6[v119];
                          LOWORD(v110) = v110 - 8;
                        }
                        while ((unsigned __int16)v110 > 8u);
                        goto LABEL_110;
                      }
                      __int16 v111 = 0;
                      unint64_t v112 = v110 + 1;
                      uint64_t v113 = (v110 + 1) & 0x3FFE;
                      LOWORD(v110) = v105 - 8 * v113;
                      uint64_t v114 = &v108[v113];
                      unsigned __int16 v115 = (unsigned __int8 *)(v101 + 16 * v104);
                      uint64_t v116 = v113;
                      do
                      {
                        uint64_t v117 = *(v115 - 1);
                        int v118 = *v115;
                        v115 += 2;
                        v109 += byte_20EBFB6[v117];
                        v111 += byte_20EBFB6[v118];
                        v116 -= 2;
                      }
                      while (v116);
                      v109 += v111;
                      if (v112 != v113) {
                        goto LABEL_109;
                      }
LABEL_110:
                      v108 += ((unsigned __int16)(v105 - 9) >> 3) + 1;
LABEL_111:
                      unsigned int v120 = (_DWORD *)(v107
                                      + 12
                                      * (unsigned __int16)(v109
                                                         + byte_20EBFB6[~(-1 << v110) & (unint64_t)*v108]));
                      if (*(_DWORD *)(v34 + 36) == v120[1] && *(_DWORD *)(v34 + 32) == *v120)
                      {
                        if (v102 == -1) {
                          uint64_t v102 = v103;
                        }
LABEL_98:
                        unint64_t v54 = ++v98 + v103;
                        continue;
                      }
                      break;
                    }
                    unint64_t v122 = (unsigned __int8 *)(v100 + 16 * v104 + 10);
                    if ((unsigned __int16)v105 < 9u)
                    {
                      __int16 v123 = 0;
                      uint64_t v134 = (unsigned __int8 *)(v100 + 16 * v104 + 10);
                      LOBYTE(v128) = v105;
                      goto LABEL_125;
                    }
                    __int16 v123 = 0;
                    uint64_t v124 = (unsigned __int16)(v103 - 48 * v104 - 9) >> 3;
                    if (!((unsigned __int16)(v103 - 48 * v104 - 9) >> 3))
                    {
                      unsigned __int16 v128 = v105;
                      uint64_t v129 = (unsigned __int8 *)(v100 + 16 * v104 + 10);
                      do
                      {
LABEL_123:
                        int v135 = *v129++;
                        v123 += byte_20EBFB6[v135];
                        v128 -= 8;
                      }
                      while (v128 > 8u);
                      goto LABEL_124;
                    }
                    __int16 v125 = 0;
                    uint64_t v126 = v124 + 1;
                    uint64_t v127 = (v124 + 1) & 0x3FFE;
                    unsigned __int16 v128 = v105 - 8 * v127;
                    uint64_t v129 = &v122[v127];
                    unint64_t v130 = (unsigned __int8 *)(v101 + 16 * v104);
                    uint64_t v131 = v127;
                    do
                    {
                      uint64_t v132 = *(v130 - 1);
                      int v133 = *v130;
                      v130 += 2;
                      v123 += byte_20EBFB6[v132];
                      v125 += byte_20EBFB6[v133];
                      v131 -= 2;
                    }
                    while (v131);
                    v123 += v125;
                    if (v126 != v127) {
                      goto LABEL_123;
                    }
LABEL_124:
                    uint64_t v134 = &v122[((unsigned __int16)(v105 - 9) >> 3) + 1];
LABEL_125:
                    if (v51 != *(void *)(v107
                                          + 12
                                          * (unsigned __int16)(v123
                                                             + byte_20EBFB6[~(-1 << v128) & (unint64_t)*v134])))
                      goto LABEL_98;
                    if (v103 == -1)
                    {
                      unint64_t v141 = -1;
LABEL_137:
                      sub_AD3484(v34, (uint64_t *)&v399, v141, v401);
                      goto LABEL_138;
                    }
                    if ((unsigned __int16)v105 < 9u)
                    {
                      __int16 v138 = 0;
                    }
                    else
                    {
                      if ((((_WORD)v103 - 48 * (_WORD)v104 - 8) & 0xFFF8) != 0) {
                        __int16 v136 = 8;
                      }
                      else {
                        __int16 v136 = v103 - 48 * v104 - 8;
                      }
                      unsigned __int16 v137 = ~v136 + v103 - 48 * v104;
                      if (v137 < 8u)
                      {
                        __int16 v138 = 0;
                        unsigned __int16 v139 = v105;
                        long long v140 = (unsigned __int8 *)(v100 + 16 * v104 + 10);
                        goto LABEL_358;
                      }
                      __int16 v289 = 0;
                      __int16 v290 = 0;
                      uint64_t v291 = (v137 >> 3) + 1;
                      unsigned __int16 v139 = v105 - 8 * (((v137 >> 3) + 1) & 0x3FFE);
                      long long v140 = &v122[v291 & 0x3FFE];
                      uint64_t v292 = (unsigned __int8 *)(v100 + 16 * v104 + 11);
                      uint64_t v293 = v291 & 0x3FFE;
                      do
                      {
                        uint64_t v294 = *(v292 - 1);
                        int v295 = *v292;
                        v292 += 2;
                        v289 += byte_20EBFB6[v294];
                        v290 += byte_20EBFB6[v295];
                        v293 -= 2;
                      }
                      while (v293);
                      __int16 v138 = v290 + v289;
                      if ((v291 & 0x3FFE) != v291)
                      {
                        do
                        {
LABEL_358:
                          int v296 = *v140++;
                          v138 += byte_20EBFB6[v296];
                          v139 -= 8;
                        }
                        while (v139 > 8u);
                      }
                      v122 += ((unsigned __int16)(v105 - 9) >> 3) + 1;
                      LOBYTE(v105) = v139;
                    }
                    uint64_t v297 = v100 + 16 * v104;
                    uint64_t v298 = *(_DWORD ***)(v34 + 56);
                    unsigned __int16 v299 = v138 + byte_20EBFB6[~(-1 << v105) & (unint64_t)*v122];
                    uint64_t v142 = (_DWORD *)(v107 + 12 * v299);
                    if (*(unsigned __int16 *)(v297 + 8) == v299)
                    {
                      uint64_t v300 = v297 + 16;
                      if ((_DWORD **)(v297 + 16) != v298)
                      {
                        while (1)
                        {
                          uint64_t v301 = (_DWORD **)v300;
                          if (*(_WORD *)(v300 + 8)) {
                            break;
                          }
                          v300 += 16;
                          if (v301 + 2 == v298)
                          {
                            uint64_t v297 = *(void *)(v34 + 56);
                            goto LABEL_366;
                          }
                        }
                        uint64_t v297 = v300;
LABEL_366:
                        uint64_t v142 = *v301;
                        goto LABEL_367;
                      }
                    }
                    else
                    {
LABEL_367:
                      if ((_DWORD **)v297 != v298 && v106)
                      {
                        do
                        {
                          if (*(_DWORD *)(v34 + 36) != v142[1] || *(_DWORD *)(v34 + 32) != *v142) {
                            break;
                          }
                          v142 += 3;
                          if (v142 == (_DWORD *)(*(void *)v297 + 12 * *(unsigned __int16 *)(v297 + 8)))
                          {
                            v297 += 16;
                            if ((_DWORD **)v297 != v298)
                            {
                              do
                              {
                                if (*(_WORD *)(v297 + 8))
                                {
                                  uint64_t v142 = *(_DWORD **)v297;
                                  goto LABEL_371;
                                }
                                v297 += 16;
                              }
                              while ((_DWORD **)v297 != v298);
                              uint64_t v142 = *(_DWORD **)(v297 - 16);
                            }
                            break;
                          }
LABEL_371:
                          ;
                        }
                        while ((_DWORD **)v297 != v298);
                      }
                    }
LABEL_139:
                    unsigned int v24 = v142[2];
                    if (v24 == -1)
                    {
                      int v143 = *(_DWORD *)(v34 + 112);
                      *(_DWORD *)(v34 + 112) = v143 + 1;
                      v142[2] = v143;
                      int v145 = *(char **)(v34 + 96);
                      unint64_t v144 = *(void *)(v34 + 104);
                      if ((unint64_t)v145 < v144)
                      {
                        *(void *)int v145 = v51;
                        uint64_t v146 = (uint64_t)(v145 + 8);
                        goto LABEL_164;
                      }
                      uint64_t v147 = (char **)(v34 + 88);
                      __int16 v148 = *(char **)(v34 + 88);
                      uint64_t v149 = (char *)(v145 - v148);
                      uint64_t v150 = (v145 - v148) >> 3;
                      unint64_t v151 = v150 + 1;
                      if ((unint64_t)(v150 + 1) >> 61) {
                        sub_2E00();
                      }
                      uint64_t v152 = v144 - (void)v148;
                      if (v152 >> 2 > v151) {
                        unint64_t v151 = v152 >> 2;
                      }
                      if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v153 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v153 = v151;
                      }
                      if (v153)
                      {
                        if (v153 >> 61) {
                          sub_188D718();
                        }
                        unint64_t v154 = v153;
                        uint64_t v155 = operator new(8 * v153);
                        uint64_t v147 = (char **)(v34 + 88);
                        unint64_t v153 = v154;
                        uint64_t v149 = (char *)(v145 - v148);
                        uint64_t v156 = (unint64_t *)&v155[8 * v150];
                        *uint64_t v156 = v51;
                        uint64_t v146 = (uint64_t)(v156 + 1);
                        if (v145 == v148) {
                          goto LABEL_162;
                        }
LABEL_155:
                        unint64_t v157 = v145 - 8 - v148;
                        if (v157 < 0x58) {
                          goto LABEL_435;
                        }
                        if ((unint64_t)(v145 - v155 - (void)v149) < 0x20) {
                          goto LABEL_435;
                        }
                        uint64_t v158 = (v157 >> 3) + 1;
                        uint64_t v159 = 8 * (v158 & 0x3FFFFFFFFFFFFFFCLL);
                        uint64_t v160 = &v145[-v159];
                        uint64_t v156 = (unint64_t *)((char *)v156 - v159);
                        unsigned __int16 v161 = &v155[8 * v150 - 16];
                        uint64_t v162 = v145 - 16;
                        uint64_t v163 = v158 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          long long v164 = *(_OWORD *)v162;
                          *(v161 - 1) = *((_OWORD *)v162 - 1);
                          *unsigned __int16 v161 = v164;
                          v161 -= 2;
                          v162 -= 32;
                          v163 -= 4;
                        }
                        while (v163);
                        int v145 = v160;
                        if (v158 != (v158 & 0x3FFFFFFFFFFFFFFCLL))
                        {
LABEL_435:
                          do
                          {
                            unint64_t v165 = *((void *)v145 - 1);
                            v145 -= 8;
                            *--uint64_t v156 = v165;
                          }
                          while (v145 != v148);
                        }
                        int v145 = *v147;
                      }
                      else
                      {
                        uint64_t v155 = 0;
                        uint64_t v156 = (unint64_t *)(8 * v150);
                        *(void *)(8 * v150) = v51;
                        uint64_t v146 = 8 * v150 + 8;
                        if (v145 != v148) {
                          goto LABEL_155;
                        }
                      }
LABEL_162:
                      *(void *)(v34 + 88) = v156;
                      *(void *)(v34 + 96) = v146;
                      *(void *)(v34 + 104) = &v155[8 * v153];
                      if (v145) {
                        operator delete(v145);
                      }
LABEL_164:
                      *(void *)(v34 + 96) = v146;
                      unsigned int v24 = v142[2];
                    }
                    uint64_t v166 = (void *)(*(void *)(v343 + 24) + 4136);
                    unint64_t v167 = *(void *)v349;
                    unsigned int v168 = *(_DWORD *)&v349[20];
                    uint64_t v169 = HIDWORD(*(void *)v349);
                    if (sub_A10E20(v166, *(int *)&v349[4]))
                    {
                      uint64_t v170 = (int *)sub_A1120C(*(void *)(*v166 + 3944), v167);
                    }
                    else
                    {
                      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                        && __cxa_guard_acquire(&qword_24F7308))
                      {
                        sub_518C8(0x3B60u, 0x7FCAu);
                        dword_24F7300 = v304 | 0x40000000;
                        __cxa_guard_release(&qword_24F7308);
                      }
                      uint64_t v171 = *v166;
                      if (dword_24F7300 == v169)
                      {
                        unint64_t v172 = *(unsigned int **)(*(void *)(v171 + 3976) + 72);
                        if (!v172)
                        {
                          unint64_t v328 = __cxa_allocate_exception(0x40uLL);
                          sub_5E5C(v401, "Realtime stop pattern quad data requested on nullptr buffer");
                          unint64_t v329 = (void *)sub_2F404((uint64_t)v328, (long long *)v401);
                        }
                        int v173 = (int *)((char *)v172 + *v172);
                        long long v174 = (unsigned __int16 *)((char *)v173 - *v173);
                        if (*v174 >= 5u && (uint64_t v175 = v174[2]) != 0) {
                          __int16 v176 = (unsigned int *)((char *)v173 + v175 + *(unsigned int *)((char *)v173 + v175));
                        }
                        else {
                          __int16 v176 = 0;
                        }
                        uint64_t v170 = (int *)sub_A1139C(v176, v167);
                      }
                      else
                      {
                        uint64_t v170 = (int *)sub_A11500(v171 + 24, v167, 0, "stop pattern");
                      }
                    }
                    __int16 v177 = (unsigned __int16 *)((char *)v170 - *v170);
                    if (*v177 >= 9u && (uint64_t v178 = v177[4]) != 0) {
                      uint64_t v179 = (unsigned int *)((char *)v170 + v178 + *(unsigned int *)((char *)v170 + v178));
                    }
                    else {
                      uint64_t v179 = 0;
                    }
                    DWORD1(v345) = 10 * *(_DWORD *)(sub_A10764(v179, v168) + 8);
                    uint64_t v180 = *(void *)(v343 + 24);
                    unint64_t v181 = *(void *)v349;
                    int v182 = (uint64_t *)(v180 + 4136);
                    unsigned int v183 = *(_DWORD *)&v349[20];
                    int v184 = *(_DWORD *)&v349[8];
                    uint64_t v185 = HIDWORD(*(void *)v349);
                    if (sub_A10E20((void *)(v180 + 4136), *(int *)&v349[4]))
                    {
                      unsigned __int16 v186 = *(unsigned int **)(*(void *)(*v182 + 3944) + 72);
                      if (!v186)
                      {
                        unsigned int v322 = __cxa_allocate_exception(0x40uLL);
                        sub_5E5C(v401, "Incident stop pattern quad data requested on nullptr buffer");
                        int v323 = (void *)sub_2F404((uint64_t)v322, (long long *)v401);
                      }
                      goto LABEL_186;
                    }
                    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                      && __cxa_guard_acquire(&qword_24F7308))
                    {
                      sub_518C8(0x3B60u, 0x7FCAu);
                      dword_24F7300 = v305 | 0x40000000;
                      __cxa_guard_release(&qword_24F7308);
                    }
                    uint64_t v187 = *v182;
                    if (dword_24F7300 != v185)
                    {
                      int v188 = sub_A10B80(v187 + 24, v181, 0);
                      uint64_t v189 = &v188[-*(int *)v188];
                      if (*(unsigned __int16 *)v189 >= 5u) {
                        goto LABEL_187;
                      }
LABEL_190:
                      uint64_t v190 = 0;
                      goto LABEL_191;
                    }
                    unsigned __int16 v186 = *(unsigned int **)(*(void *)(v187 + 3976) + 72);
                    if (!v186)
                    {
                      uint64_t v332 = __cxa_allocate_exception(0x40uLL);
                      sub_5E5C(v401, "Realtime stop pattern quad data requested on nullptr buffer");
                      uint64_t v333 = (void *)sub_2F404((uint64_t)v332, (long long *)v401);
                    }
LABEL_186:
                    int v188 = (char *)v186 + *v186;
                    uint64_t v189 = &v188[-*(int *)v188];
                    if (*(unsigned __int16 *)v189 < 5u) {
                      goto LABEL_190;
                    }
LABEL_187:
                    uint64_t v190 = *((unsigned __int16 *)v189 + 2);
                    if (v190) {
                      v190 += (uint64_t)&v188[*(unsigned int *)&v188[v190]];
                    }
LABEL_191:
                    unsigned int v191 = (int *)(v190
                                 + 4 * v181
                                 + 4
                                 + *(unsigned int *)(v190 + 4 * v181 + 4));
                    int v192 = (unsigned __int16 *)((char *)v191 - *v191);
                    if (*v192 >= 9u && (uint64_t v193 = v192[4]) != 0) {
                      int v194 = (unsigned int *)((char *)v191 + v193 + *(unsigned int *)((char *)v191 + v193));
                    }
                    else {
                      int v194 = 0;
                    }
                    uint64_t v195 = sub_A10764(v194, v183);
                    long long v196 = &v188[-*(int *)v188];
                    if (*(unsigned __int16 *)v196 < 0xBu)
                    {
                      uint64_t v197 = 0;
                      long long v198 = (unsigned __int16 *)((char *)v191 - *v191);
                      if (*v198 >= 0x11u) {
                        goto LABEL_199;
                      }
LABEL_202:
                      LODWORD(v199) = 0;
                      goto LABEL_203;
                    }
                    uint64_t v197 = (unsigned int *)*((unsigned __int16 *)v196 + 5);
                    if (v197) {
                      uint64_t v197 = (unsigned int *)((char *)v197
                    }
                                            + (void)v188
                                            + *(unsigned int *)((char *)v197 + (void)v188));
                    long long v198 = (unsigned __int16 *)((char *)v191 - *v191);
                    if (*v198 < 0x11u) {
                      goto LABEL_202;
                    }
LABEL_199:
                    uint64_t v199 = v198[8];
                    if (v198[8]) {
                      LODWORD(v199) = *(int *)((char *)v191 + v199);
                    }
LABEL_203:
                    uint64_t v200 = sub_A108C4(v197, v199+ *(int *)((char *)v191 + v198[2] + *(unsigned int *)((char *)v191 + v198[2])) * v184+ *(unsigned __int8 *)(v195 + 14));
                    if (v200)
                    {
                      uint64_t v201 = __ROR8__(*(void *)v200, 32);
                      int v202 = *(_DWORD *)(v200 + 8);
                    }
                    else
                    {
                      int v202 = 0;
                      uint64_t v201 = 0xFFFFFFFFLL;
                    }
                    *(void *)long long v401 = v201;
                    *(_DWORD *)&v401[8] = v202;
                    int v203 = (int *)sub_A11094((void *)(v180 + 4136), v181);
                    int v204 = (unsigned __int16 *)((char *)v203 - *v203);
                    if (*v204 >= 9u && (uint64_t v205 = v204[4]) != 0) {
                      unsigned int v206 = (unsigned int *)((char *)v203 + v205 + *(unsigned int *)((char *)v203 + v205));
                    }
                    else {
                      unsigned int v206 = 0;
                    }
                    unsigned int v207 = *(unsigned __int16 *)(sub_A10764(v206, v183) + 12);
                    if (*(_DWORD *)&v349[12] == -1) {
                      int v208 = 0x7FFFFFFF;
                    }
                    else {
                      int v208 = *(_DWORD *)&v349[16];
                    }
                    *((void *)&v345 + 1) = sub_A0FAA0((uint64_t *)(v180 + 4184), (unsigned int *)v401, v207, v208);
                    __int16 v346 = v209;
                    uint64_t v210 = *(void *)(v343 + 24);
                    unint64_t v211 = *(void *)v349;
                    uint64_t v212 = (uint64_t *)(v210 + 4136);
                    unsigned int v213 = v350;
                    int v214 = *(_DWORD *)&v349[8];
                    uint64_t v215 = HIDWORD(*(void *)v349);
                    if (sub_A10E20((void *)(v210 + 4136), *(int *)&v349[4]))
                    {
                      unsigned int v216 = *(unsigned int **)(*(void *)(*v212 + 3944) + 72);
                      if (!v216)
                      {
                        uint64_t v324 = __cxa_allocate_exception(0x40uLL);
                        sub_5E5C(v401, "Incident stop pattern quad data requested on nullptr buffer");
                        int v325 = (void *)sub_2F404((uint64_t)v324, (long long *)v401);
                      }
                      goto LABEL_219;
                    }
                    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                      && __cxa_guard_acquire(&qword_24F7308))
                    {
                      sub_518C8(0x3B60u, 0x7FCAu);
                      dword_24F7300 = v306 | 0x40000000;
                      __cxa_guard_release(&qword_24F7308);
                    }
                    uint64_t v217 = *v212;
                    if (dword_24F7300 != v215)
                    {
                      uint64_t v218 = sub_A10B80(v217 + 24, v211, 0);
                      int v219 = &v218[-*(int *)v218];
                      if (*(unsigned __int16 *)v219 >= 5u) {
                        goto LABEL_220;
                      }
LABEL_223:
                      uint64_t v220 = 0;
                      goto LABEL_224;
                    }
                    unsigned int v216 = *(unsigned int **)(*(void *)(v217 + 3976) + 72);
                    if (!v216)
                    {
                      int v326 = __cxa_allocate_exception(0x40uLL);
                      sub_5E5C(v401, "Realtime stop pattern quad data requested on nullptr buffer");
                      int v327 = (void *)sub_2F404((uint64_t)v326, (long long *)v401);
                    }
LABEL_219:
                    uint64_t v218 = (char *)v216 + *v216;
                    int v219 = &v218[-*(int *)v218];
                    if (*(unsigned __int16 *)v219 < 5u) {
                      goto LABEL_223;
                    }
LABEL_220:
                    uint64_t v220 = *((unsigned __int16 *)v219 + 2);
                    if (v220) {
                      v220 += (uint64_t)&v218[*(unsigned int *)&v218[v220]];
                    }
LABEL_224:
                    uint64_t v221 = (int *)(v220
                                 + 4 * v211
                                 + 4
                                 + *(unsigned int *)(v220 + 4 * v211 + 4));
                    unsigned __int16 v222 = (unsigned __int16 *)((char *)v221 - *v221);
                    if (*v222 >= 9u && (uint64_t v223 = v222[4]) != 0) {
                      __int16 v224 = (unsigned int *)((char *)v221 + v223 + *(unsigned int *)((char *)v221 + v223));
                    }
                    else {
                      __int16 v224 = 0;
                    }
                    uint64_t v225 = sub_A10764(v224, v213);
                    int v226 = &v218[-*(int *)v218];
                    if (*(unsigned __int16 *)v226 < 0xBu)
                    {
                      unsigned __int16 v227 = 0;
                      int v228 = (unsigned __int16 *)((char *)v221 - *v221);
                      if (*v228 >= 0x11u) {
                        goto LABEL_232;
                      }
LABEL_235:
                      LODWORD(v229) = 0;
                      goto LABEL_236;
                    }
                    unsigned __int16 v227 = (unsigned int *)*((unsigned __int16 *)v226 + 5);
                    if (v227) {
                      unsigned __int16 v227 = (unsigned int *)((char *)v227
                    }
                                            + (void)v218
                                            + *(unsigned int *)((char *)v227 + (void)v218));
                    int v228 = (unsigned __int16 *)((char *)v221 - *v221);
                    if (*v228 < 0x11u) {
                      goto LABEL_235;
                    }
LABEL_232:
                    uint64_t v229 = v228[8];
                    if (v228[8]) {
                      LODWORD(v229) = *(int *)((char *)v221 + v229);
                    }
LABEL_236:
                    uint64_t v230 = sub_A108C4(v227, v229+ *(int *)((char *)v221 + v228[2] + *(unsigned int *)((char *)v221 + v228[2])) * v214+ *(unsigned __int8 *)(v225 + 14));
                    if (v230)
                    {
                      uint64_t v231 = __ROR8__(*(void *)v230, 32);
                      int v232 = *(_DWORD *)(v230 + 8);
                    }
                    else
                    {
                      int v232 = 0;
                      uint64_t v231 = 0xFFFFFFFFLL;
                    }
                    *(void *)long long v401 = v231;
                    *(_DWORD *)&v401[8] = v232;
                    int v233 = (int *)sub_A11094((void *)(v210 + 4136), v211);
                    int v234 = (unsigned __int16 *)((char *)v233 - *v233);
                    if (*v234 >= 9u && (uint64_t v235 = v234[4]) != 0) {
                      uint64_t v236 = (unsigned int *)((char *)v233 + v235 + *(unsigned int *)((char *)v233 + v235));
                    }
                    else {
                      uint64_t v236 = 0;
                    }
                    unsigned int v237 = *(unsigned __int16 *)(sub_A10764(v236, v213) + 12);
                    if (*(_DWORD *)&v349[12] == -1) {
                      int v238 = 0x7FFFFFFF;
                    }
                    else {
                      int v238 = *(_DWORD *)&v349[16];
                    }
                    unint64_t v347 = sub_A0FDF4((uint64_t *)(v210 + 4184), (unsigned int *)v401, v237, v238);
                    __int16 v348 = v239;
                    int v410 = -1;
                    sub_9F6FA0((uint64_t)v401, &v345);
                    int v410 = 0;
                    if (v421)
                    {
                      sub_9F6FA0((uint64_t)v411, (long long *)v401);
                      a1 = v343;
                      int v421 = v410;
                      if (!v410) {
                        goto LABEL_256;
                      }
                    }
                    else
                    {
                      *(_OWORD *)int v411 = *(_OWORD *)v401;
                      *(_OWORD *)&v411[16] = *(_OWORD *)&v401[16];
                      v412[0] = *(_OWORD *)v402;
                      *(_OWORD *)((char *)v412 + 12) = *(_OWORD *)&v402[12];
                      a1 = v343;
                      if (v413[0])
                      {
                        v413[1] = v413[0];
                        operator delete(v413[0]);
                      }
                      *(_OWORD *)uint64_t v413 = v403;
                      uint64_t v414 = v404;
                      uint64_t v404 = 0;
                      long long v403 = 0uLL;
                      if ((void)v415)
                      {
                        *((void *)&v415 + 1) = v415;
                        operator delete((void *)v415);
                      }
                      long long v415 = *(_OWORD *)v405;
                      v416 = v405[2];
                      memset(v405, 0, sizeof(v405));
                      int v417 = v406;
                      if ((void)v418)
                      {
                        *((void *)&v418 + 1) = v418;
                        operator delete((void *)v418);
                      }
                      long long v418 = v407;
                      uint64_t v419 = v408;
                      uint64_t v408 = 0;
                      long long v407 = 0uLL;
                      long long v420 = v409;
                      if (!v410)
                      {
LABEL_256:
                        if ((void)v407)
                        {
                          *((void *)&v407 + 1) = v407;
                          operator delete((void *)v407);
                        }
                        if (v405[0])
                        {
                          v405[1] = v405[0];
                          operator delete(v405[0]);
                        }
                        if ((void)v403)
                        {
                          *((void *)&v403 + 1) = v403;
                          operator delete((void *)v403);
                        }
                      }
                    }
                    if (v355)
                    {
                      int v356 = v355;
                      operator delete(v355);
                    }
                    if (*((void *)&v352 + 1))
                    {
                      *(void *)&long long v353 = *((void *)&v352 + 1);
                      operator delete(*((void **)&v352 + 1));
                    }
                    if ((void)v351)
                    {
                      *((void *)&v351 + 1) = v351;
                      operator delete((void *)v351);
                    }
                    if (v25[4] == -1) {
                      goto LABEL_275;
                    }
                    uint64_t v240 = (uint64_t)v362;
                    if ((unint64_t)v362 < v363) {
                      goto LABEL_270;
                    }
LABEL_288:
                    int v362 = (char *)sub_A4CBF4((uint64_t *)&v361, (uint64_t)v411);
                    uint64_t v241 = *((void *)&v393 + 1);
                    if (*((void *)&v393 + 1) >= (unint64_t)v394) {
                      goto LABEL_274;
                    }
LABEL_289:
                    *(void *)uint64_t v241 = 0;
                    *(void *)(v241 + 8) = 0;
                    *(void *)(v241 + 16) = 0;
                    uint64_t v247 = (char *)v361;
                    uint64_t v248 = v362;
                    int64_t v249 = v362 - (unsigned char *)v361;
                    if (v362 != v361)
                    {
                      unint64_t v250 = 0xCF3CF3CF3CF3CF3DLL * (v249 >> 3);
                      if (v250 >= 0x186186186186187) {
                        sub_2E00();
                      }
                      uint64_t v251 = (char *)operator new(v249);
                      uint64_t v252 = 0;
                      *(void *)uint64_t v241 = v251;
                      *(void *)(v241 + 8) = v251;
                      *(void *)(v241 + 16) = &v251[168 * v250];
                      do
                      {
                        uint64_t v254 = (long long *)&v251[v252];
                        int v255 = (long long *)&v247[v252];
                        *(_DWORD *)&v251[v252 + 160] = *(_DWORD *)&v247[v252 + 160];
                        int v256 = *(_DWORD *)&v247[v252 + 160];
                        if (v256 == 1)
                        {
                          long long v253 = *v255;
                          *(long long *)((char *)v254 + 12) = *(long long *)((char *)v255 + 12);
                          long long *v254 = v253;
                        }
                        else if (!v256)
                        {
                          sub_9F6FA0((uint64_t)v254, v255);
                        }
                        v252 += 168;
                      }
                      while (&v247[v252] != v248);
                      *(void *)(v241 + 8) = &v251[v252];
                    }
                    char v257 = v364;
                    *(void *)(v241 + 32) = 0;
                    *(unsigned char *)(v241 + 24) = v257;
                    *(void *)(v241 + 40) = 0;
                    *(void *)(v241 + 48) = 0;
                    uint64_t v258 = v365;
                    uint64_t v259 = v366 - (unsigned char *)v365;
                    if (v366 != v365)
                    {
                      if (0xCCCCCCCCCCCCCCCDLL * (v259 >> 3) >= 0x666666666666667) {
                        sub_2E00();
                      }
                      unsigned int v260 = (char *)operator new(v366 - (unsigned char *)v365);
                      *(void *)(v241 + 32) = v260;
                      *(void *)(v241 + 40) = v260;
                      uint64_t v261 = &v260[8 * (v259 >> 3)];
                      *(void *)(v241 + 48) = v261;
                      memcpy(v260, v258, v259 - 7);
                      *(void *)(v241 + 40) = v261;
                    }
                    uint64_t v262 = *(void *)v368;
                    *(void *)(v241 + 63) = *(void *)&v368[7];
                    *(void *)(v241 + 56) = v262;
                    uint64_t v242 = (char *)(v241 + 72);
LABEL_302:
                    *((void *)&v393 + 1) = v242;
                    unsigned int v264 = v25[5];
                    *(_DWORD *)long long v401 = v344 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * v24 + 1;
                    int v263 = *(_DWORD *)v401;
                    uint64_t v265 = *(void *)(a1 + 192);
                    uint64_t v266 = *(unsigned int *)(sub_B25B80(v342, (unsigned int *)v401) + 4);
                    *(_DWORD *)long long v401 = v263;
                    uint64_t v267 = *(void *)(a1 + 192);
                    uint64_t v25 = (unsigned int *)(v265 + (v266 << 6));
                    int v268 = (unsigned int *)(v267
                                          + ((unint64_t)*(unsigned int *)(sub_B25B80(v342, (unsigned int *)v401)
                                                                               + 8) << 6));
                    if (v25 == v268)
                    {
LABEL_305:
                      uint64_t v25 = 0;
                    }
                    else
                    {
                      while (v25[6] != v264)
                      {
                        v25 += 16;
                        if (v25 == v268) {
                          goto LABEL_305;
                        }
                      }
                    }
                    if (!v421)
                    {
                      if ((void)v418)
                      {
                        *((void *)&v418 + 1) = v418;
                        operator delete((void *)v418);
                      }
                      if ((void)v415)
                      {
                        *((void *)&v415 + 1) = v415;
                        operator delete((void *)v415);
                      }
                      if (v413[0])
                      {
                        v413[1] = v413[0];
                        operator delete(v413[0]);
                      }
                    }
                    if (v365)
                    {
                      unint64_t v366 = v365;
                      operator delete(v365);
                    }
                    unsigned int v269 = (char *)v361;
                    if (v361)
                    {
                      unsigned int v270 = v362;
                      uint64_t v26 = v361;
                      if (v362 != v361)
                      {
                        do
                        {
                          if (!*((_DWORD *)v270 - 2))
                          {
                            int v271 = (void *)*((void *)v270 - 6);
                            if (v271)
                            {
                              *((void *)v270 - 5) = v271;
                              operator delete(v271);
                            }
                            unint64_t v272 = (void *)*((void *)v270 - 10);
                            if (v272)
                            {
                              *((void *)v270 - 9) = v272;
                              operator delete(v272);
                            }
                            unint64_t v273 = (void *)*((void *)v270 - 13);
                            if (v273)
                            {
                              *((void *)v270 - 12) = v273;
                              operator delete(v273);
                            }
                          }
                          v270 -= 168;
                        }
                        while (v270 != v269);
                        uint64_t v26 = v361;
                      }
                      int v362 = v269;
                      operator delete(v26);
                    }
                    --v344;
                    if (*v25 == -1) {
                      goto LABEL_390;
                    }
                    continue;
                  }
                }
                unint64_t v58 = ++v50 + v59;
                goto LABEL_57;
              }
            }
            else
            {
              unsigned __int16 v69 = v59 - 48 * v60;
              unint64_t v70 = (unsigned __int8 *)(v55 + 16 * v60 + 10);
            }
            break;
          }
          do
          {
            int v75 = *v70++;
            v64 += byte_20EBFB6[v75];
            v69 -= 8;
          }
          while (v69 > 8u);
          goto LABEL_68;
        }
        __p[1] = 2 * (*(void *)(v23 + 3960) != 0);
        if (*v341 != -1) {
          goto LABEL_23;
        }
LABEL_390:
        unint64_t v307 = v393;
        if ((void)v393 != *((void *)&v393 + 1))
        {
          unint64_t v308 = *((void *)&v393 + 1) - 72;
          if (*((void *)&v393 + 1) - 72 > (unint64_t)v393)
          {
            do
            {
              sub_A4D0C8(v307, v308);
              v307 += 72;
              v308 -= 72;
            }
            while (v307 < v308);
          }
        }
        sub_A29D50((uint64_t)__p);
        unint64_t v309 = *(void *)(a2 + 16);
        if (v309 >= *(void *)(a2 + 24))
        {
          *(void *)(a2 + 16) = sub_A4D268(v336, (long long *)__p);
          uint64_t v310 = (void *)*((void *)&v397 + 1);
          if (!*((void *)&v397 + 1)) {
            goto LABEL_398;
          }
LABEL_397:
          *(void *)&long long v398 = v310;
          operator delete(v310);
          goto LABEL_398;
        }
        sub_9F68D4(*(void *)(a2 + 16), (long long *)__p);
        *(void *)(a2 + 16) = v309 + 296;
        *(void *)(a2 + 16) = v309 + 296;
        uint64_t v310 = (void *)*((void *)&v397 + 1);
        if (*((void *)&v397 + 1)) {
          goto LABEL_397;
        }
LABEL_398:
        if ((void)v396)
        {
          *((void *)&v396 + 1) = v396;
          operator delete((void *)v396);
        }
        if (*((void *)&v394 + 1))
        {
          *(void *)&long long v395 = *((void *)&v394 + 1);
          operator delete(*((void **)&v394 + 1));
        }
        int v311 = (void **)v393;
        if ((void)v393)
        {
          uint64_t v312 = *((void *)&v393 + 1);
          int v313 = (void *)v393;
          if (*((void *)&v393 + 1) != (void)v393)
          {
            do
            {
              int v315 = *(void **)(v312 - 40);
              if (v315)
              {
                *(void *)(v312 - 32) = v315;
                operator delete(v315);
              }
              uint64_t v316 = (void **)(v312 - 72);
              uint64_t v317 = *(void *)(v312 - 72);
              if (v317)
              {
                uint64_t v318 = *(void *)(v312 - 64);
                int v314 = *(void **)(v312 - 72);
                if (v318 != v317)
                {
                  do
                  {
                    if (!*(_DWORD *)(v318 - 8))
                    {
                      int v319 = *(void **)(v318 - 48);
                      if (v319)
                      {
                        *(void *)(v318 - 40) = v319;
                        operator delete(v319);
                      }
                      int v320 = *(void **)(v318 - 80);
                      if (v320)
                      {
                        *(void *)(v318 - 72) = v320;
                        operator delete(v320);
                      }
                      unsigned int v321 = *(void **)(v318 - 104);
                      if (v321)
                      {
                        *(void *)(v318 - 96) = v321;
                        operator delete(v321);
                      }
                    }
                    v318 -= 168;
                  }
                  while (v318 != v317);
                  int v314 = *v316;
                }
                *(void *)(v312 - 64) = v317;
                operator delete(v314);
              }
              v312 -= 72;
            }
            while (v316 != v311);
            int v313 = (void *)v393;
          }
          *((void *)&v393 + 1) = v311;
          operator delete(v313);
        }
        if (SHIBYTE(v387) < 0) {
          operator delete(v385);
        }
        v341 += 16;
      }
      ++v337;
      int v8 = (void *)v342;
    }
    while (v337 != v335);
  }
  uint64_t result = std::string::operator=(v334, (const std::string *)(a1 + 528));
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a1 + 616);
  *(_OWORD *)(a2 + 136) = *(_OWORD *)(a1 + 632);
  *(_OWORD *)(a2 + 152) = *(_OWORD *)(a1 + 648);
  *(_OWORD *)(a2 + 168) = *(_OWORD *)(a1 + 664);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 552);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 568);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 584);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 600);
  return result;
}

void sub_B22D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char *a62,uint64_t a63)
{
  __cxa_guard_abort(&qword_24F7308);
  if (__p)
  {
    operator delete(__p);
    uint64_t v67 = a52;
    if (!a52)
    {
LABEL_3:
      uint64_t v68 = a49;
      if (!a49) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v67 = a52;
    if (!a52) {
      goto LABEL_3;
    }
  }
  operator delete(v67);
  uint64_t v68 = a49;
  if (!a49)
  {
LABEL_4:
    if (LODWORD(STACK[0x470])) {
      goto LABEL_13;
    }
LABEL_9:
    unsigned __int16 v69 = (void *)STACK[0x448];
    if (STACK[0x448])
    {
      STACK[0x450] = (unint64_t)v69;
      operator delete(v69);
      unint64_t v70 = (void *)STACK[0x428];
      if (!STACK[0x428])
      {
LABEL_11:
        uint64_t v71 = (void *)STACK[0x410];
        if (!STACK[0x410]) {
          goto LABEL_13;
        }
        goto LABEL_12;
      }
    }
    else
    {
      unint64_t v70 = (void *)STACK[0x428];
      if (!STACK[0x428]) {
        goto LABEL_11;
      }
    }
    STACK[0x430] = (unint64_t)v70;
    operator delete(v70);
    uint64_t v71 = (void *)STACK[0x410];
    if (!STACK[0x410])
    {
LABEL_13:
      if (a66) {
        operator delete(a66);
      }
      if (a62)
      {
        uint64_t v72 = (char *)a63;
        uint64_t v73 = a62;
        if ((char *)a63 != a62)
        {
          do
          {
            if (!*((_DWORD *)v72 - 2))
            {
              int v74 = (void *)*((void *)v72 - 6);
              if (v74)
              {
                *((void *)v72 - 5) = v74;
                operator delete(v74);
              }
              int v75 = (void *)*((void *)v72 - 10);
              if (v75)
              {
                *((void *)v72 - 9) = v75;
                operator delete(v75);
              }
              char v76 = (void *)*((void *)v72 - 13);
              if (v76)
              {
                *((void *)v72 - 12) = v76;
                operator delete(v76);
              }
            }
            v72 -= 168;
          }
          while (v72 != a62);
          uint64_t v73 = a62;
        }
        operator delete(v73);
      }
      uint64_t v77 = a20;
      char v78 = (void *)STACK[0x300];
      if (STACK[0x300])
      {
        STACK[0x308] = (unint64_t)v78;
        operator delete(v78);
        __int16 v79 = (void *)STACK[0x2E8];
        if (!STACK[0x2E8])
        {
LABEL_33:
          uint64_t v80 = (void *)STACK[0x2D0];
          if (!STACK[0x2D0]) {
            goto LABEL_34;
          }
          goto LABEL_42;
        }
      }
      else
      {
        __int16 v79 = (void *)STACK[0x2E8];
        if (!STACK[0x2E8]) {
          goto LABEL_33;
        }
      }
      STACK[0x2F0] = (unint64_t)v79;
      operator delete(v79);
      uint64_t v80 = (void *)STACK[0x2D0];
      if (!STACK[0x2D0])
      {
LABEL_34:
        unint64_t v81 = STACK[0x2B8];
        if (!STACK[0x2B8]) {
          goto LABEL_35;
        }
        goto LABEL_43;
      }
LABEL_42:
      STACK[0x2D8] = (unint64_t)v80;
      operator delete(v80);
      unint64_t v81 = STACK[0x2B8];
      if (!STACK[0x2B8])
      {
LABEL_35:
        if (SLOBYTE(STACK[0x277]) < 0) {
          goto LABEL_36;
        }
        goto LABEL_47;
      }
LABEL_43:
      unsigned __int16 v84 = (void **)STACK[0x2C0];
      int v85 = (void *)v81;
      if (STACK[0x2C0] != v81)
      {
        do
        {
          v84 -= 9;
          sub_9F5F58(a9, v84);
        }
        while (v84 != (void **)v81);
        int v85 = (void *)STACK[0x2B8];
      }
      STACK[0x2C0] = v81;
      operator delete(v85);
      uint64_t v77 = a20;
      if (SLOBYTE(STACK[0x277]) < 0)
      {
LABEL_36:
        operator delete((void *)STACK[0x260]);
        uint64_t v82 = *a10;
        if (*a10) {
          goto LABEL_37;
        }
        goto LABEL_48;
      }
LABEL_47:
      uint64_t v82 = *a10;
      if (*a10)
      {
LABEL_37:
        *(void *)(v77 + 200) = v82;
        operator delete(v82);
        if ((*(char *)(v77 + 55) & 0x80000000) == 0) {
          goto LABEL_38;
        }
        goto LABEL_49;
      }
LABEL_48:
      if ((*(char *)(v77 + 55) & 0x80000000) == 0)
      {
LABEL_38:
        uint64_t v83 = *a13;
        if (!*a13) {
          goto LABEL_39;
        }
        goto LABEL_50;
      }
LABEL_49:
      operator delete(*a11);
      uint64_t v83 = *a13;
      if (!*a13) {
LABEL_39:
      }
        _Unwind_Resume(a1);
LABEL_50:
      uint64_t v86 = v77;
      uint64_t v87 = *(void *)(v77 + 16);
      uint64_t v88 = v83;
      if ((void *)v87 != v83)
      {
        uint64_t v89 = v86 + 24;
        do
        {
          v87 -= 296;
          sub_9F5E28(v89, v87);
        }
        while ((void *)v87 != v83);
        uint64_t v88 = *a13;
        uint64_t v86 = a20;
      }
      *(void *)(v86 + 16) = v83;
      operator delete(v88);
      _Unwind_Resume(a1);
    }
LABEL_12:
    STACK[0x418] = (unint64_t)v71;
    operator delete(v71);
    goto LABEL_13;
  }
LABEL_8:
  operator delete(v68);
  if (LODWORD(STACK[0x470])) {
    goto LABEL_13;
  }
  goto LABEL_9;
}

void sub_B23218(uint64_t a1)
{
  *(_DWORD *)(a1 + 240) = 0;
  if (*(void *)(a1 + 144) | *(void *)(a1 + 184))
  {
    for (uint64_t i = *(void *)(a1 + 152); i != *(void *)(a1 + 160); i += 16)
    {
      if (*(void *)i)
      {
        free(*(void **)i);
        *(void *)uint64_t i = 0;
      }
      *(void *)(i + 8) = 0;
    }
    *(void *)(a1 + 184) = 0;
  }
  *(uint64x2_t *)(a1 + 104) = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 120), (float)*(unint64_t *)(a1 + 176))));
  *(unsigned char *)(a1 + 128) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 200) = *(void *)(a1 + 192);
  *(void *)(a1 + 224) = 0;
  uint64_t v3 = *(unsigned int **)(a1 + 272);
  uint64_t v4 = *(unsigned int **)(a1 + 280);
  if (v3 != v4)
  {
    uint64_t v5 = *(void *)(a1 + 248);
    int v6 = *(unsigned int **)(a1 + 272);
    do
    {
      unsigned int v7 = *v6++;
      *(void *)(v5 + (((unint64_t)v7 >> 3) & 0x1FFFFFF8)) &= ~(1 << v7);
    }
    while (v6 != v4);
  }
  *(void *)(a1 + 280) = v3;
  int v8 = *(unsigned int **)(a1 + 320);
  uint64_t v9 = *(unsigned int **)(a1 + 328);
  if (v8 != v9)
  {
    uint64_t v10 = *(void *)(a1 + 296);
    unsigned int v11 = *(unsigned int **)(a1 + 320);
    do
    {
      unsigned int v12 = *v11++;
      *(void *)(v10 + (((unint64_t)v12 >> 3) & 0x1FFFFFF8)) &= ~(1 << v12);
    }
    while (v11 != v9);
  }
  *(void *)(a1 + 328) = v8;
  uint64_t v13 = *(unsigned int **)(a1 + 392);
  uint64_t v14 = *(unsigned int **)(a1 + 400);
  if (v13 != v14)
  {
    uint64_t v15 = *(void *)(a1 + 368);
    uint64_t v16 = *(void *)(a1 + 344);
    uint64_t v17 = *(unsigned int **)(a1 + 392);
    do
    {
      unsigned int v18 = *v17++;
      *(void *)(v15 + (((unint64_t)v18 >> 3) & 0x1FFFFFF8)) &= ~(1 << v18);
      *(_DWORD *)(v16 + 4 * v18) = -1;
    }
    while (v17 != v14);
  }
  *(void *)(a1 + 400) = v13;
  sub_BD5698(a1 + 424);
  char v21 = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)&__dst, &__p);
  uint64_t v19 = (void **)(a1 + 528);
  if (*(char *)(a1 + 551) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)uint64_t v19 = __dst;
  *(void *)(a1 + 544) = v23;
  HIBYTE(v23) = 0;
  LOBYTE(__dst) = 0;
  *(_OWORD *)(a1 + 616) = v28;
  *(_OWORD *)(a1 + 632) = v29;
  *(_OWORD *)(a1 + 648) = v30;
  *(_OWORD *)(a1 + 664) = v31;
  *(_OWORD *)(a1 + 552) = v24;
  *(_OWORD *)(a1 + 568) = v25;
  *(_OWORD *)(a1 + 584) = v26;
  *(_OWORD *)(a1 + 600) = v27;
  if (v21 < 0) {
    operator delete((void *)__p);
  }
  *(int32x2_t *)(a1 + 96) = vadd_s32(vdup_n_s32(2 * *(_DWORD *)(a1 + 16)), (int32x2_t)0x200000004);
  sub_BD5704(a1 + 424, *(void *)(a1 + 8));
}

void sub_B23454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_B23470(uint64_t a1)
{
  if (sub_A276F8(*(void *)(a1 + 24)))
  {
    int v2 = *(_DWORD *)(a1 + 68);
    int v3 = *(_DWORD *)(a1 + 240);
    *(_DWORD *)(a1 + 240) = v3 + 1;
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v23 = 0x1FFFFFFFELL;
    int v5 = sub_AD28B0(v4, &v23);
    int v24 = v5;
    LODWORD(v23) = 0;
    uint64_t v6 = *(void *)(a1 + 192);
    unsigned int v7 = (char *)(v6 + ((unint64_t)*(unsigned int *)(sub_B25B80(a1 + 104, (unsigned int *)&v23) + 4) << 6));
    LODWORD(v23) = 0;
    uint64_t v8 = *(void *)(a1 + 192);
    uint64_t v9 = sub_B25B80(a1 + 104, (unsigned int *)&v23);
    sub_B257BC(a1 + 104, 0, v7, (unsigned char *)(v8 + ((unint64_t)*(unsigned int *)(v9 + 8) << 6)));
    long long v13 = xmmword_20E2060;
    uint64_t v14 = -1;
    int v15 = v3;
    int v16 = v2;
    uint64_t v17 = 0;
    int v18 = 0;
    int v19 = 10 * v2;
    char v20 = 0;
    uint64_t v21 = -1;
    int v22 = 0x7FFFFFFF;
    sub_B25308((void *)(a1 + 104), &v13, 0, 0, 1);
    int v10 = *(_DWORD *)(a1 + 96);
    unsigned int v11 = v10 + v10 * v5;
    unsigned int v12 = v11 + 2;
    if (*(unsigned char *)(a1 + 20))
    {
      if (!sub_B25438((void *)(a1 + 104), 0, v12, v11, v10 + v10 * *(_DWORD *)(a1 + 416), 2147483646)) {
        return;
      }
    }
    else if (!sub_B25438((void *)(a1 + 104), 0, v12, v11, -1, 2147483646))
    {
      return;
    }
    sub_A3EF14((uint64_t *)(a1 + 248), &v24);
  }
}

double sub_B235DC(uint64_t a1, int a2)
{
  sub_725D0((uint64_t)v34);
  uint64_t v4 = *(unsigned int **)(a1 + 272);
  int v5 = *(unsigned int **)(a1 + 280);
  if (v4 != v5)
  {
    int v6 = a2 + 1;
    int v7 = a2 + 2;
    int v32 = ~a2;
    while (1)
    {
      unsigned int v33 = *v4;
      unint64_t v8 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), v33);
      if (HIDWORD(v8) == 1 && (v8 + 3) < 2)
      {
LABEL_12:
        int v13 = 0;
        goto LABEL_17;
      }
      uint64_t v10 = *(void *)(*(void *)(a1 + 24) + 4120);
      uint64_t v11 = v10 + 24;
      if (*(unsigned char *)(v10 + 17)) {
        break;
      }
      unsigned int v12 = (int *)sub_498D5C(v11, __ROR8__(v8, 32), 0, "stop");
      int v16 = (unsigned __int16 *)((char *)v12 - *v12);
      if (*v16 >= 0x15u)
      {
        unsigned int v15 = v16[10];
        if (v15) {
          goto LABEL_15;
        }
      }
      int v13 = 30;
LABEL_17:
      unsigned int v35 = 0;
      uint64_t v17 = *(void *)(a1 + 192);
      int v18 = (char *)(v17 + ((unint64_t)*(unsigned int *)(sub_B25B80(a1 + 104, &v35) + 4) << 6));
      unsigned int v35 = 0;
      uint64_t v19 = *(void *)(a1 + 192);
      uint64_t v20 = sub_B25B80(a1 + 104, &v35);
      sub_B257BC(a1 + 104, 0, v18, (unsigned char *)(v19 + ((unint64_t)*(unsigned int *)(v20 + 8) << 6)));
      sub_B2780C((void *)(a1 + 104), v6 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * v33, 0);
      unsigned int v35 = 0;
      uint64_t v21 = *(void *)(a1 + 192);
      int v22 = (unsigned int *)(v21 + ((unint64_t)*(unsigned int *)(sub_B25B80(a1 + 104, &v35) + 4) << 6));
      unsigned int v35 = 0;
      uint64_t v23 = *(void *)(a1 + 192);
      for (uint64_t i = (unsigned int *)(v23 + ((unint64_t)*(unsigned int *)(sub_B25B80(a1 + 104, &v35) + 8) << 6));
            v22 != i;
            v22 += 16)
      {
        unsigned int *v22 = v33;
        unsigned int v25 = v22[7];
        v22[3] = v25;
        v22[4] = -1;
        v22[7] = v25 + v13;
      }
      unsigned int v26 = v33;
      int v27 = *(_DWORD *)(a1 + 96);
      if (*(unsigned char *)(a1 + 20))
      {
        int v28 = v27 + v27 * *(_DWORD *)(a1 + 416) + 1;
        uint64_t v29 = *(void *)(a1 + 48);
        if (!v29) {
          goto LABEL_23;
        }
      }
      else
      {
        int v28 = -1;
        uint64_t v29 = *(void *)(a1 + 48);
        if (!v29)
        {
LABEL_23:
          int v30 = 2147483646;
          goto LABEL_24;
        }
      }
      int v30 = sub_AD7004(v29, v33, *(_DWORD *)(a1 + 100) + v32);
LABEL_24:
      if (sub_B25438((void *)(a1 + 104), 0, v7 + v27 + v27 * v26, v27 + v27 * v26 + 1, v28, v30)) {
        sub_A3EF14((uint64_t *)(a1 + 296), &v33);
      }
      if (++v4 == v5) {
        goto LABEL_26;
      }
    }
    unsigned int v12 = (int *)sub_A1A290(v11, v8, 0, "transfers at stop");
    int v13 = 0;
    uint64_t v14 = (unsigned __int16 *)((char *)v12 - *v12);
    if (*v14 < 5u) {
      goto LABEL_17;
    }
    unsigned int v15 = v14[2];
    if (!v15) {
      goto LABEL_12;
    }
LABEL_15:
    int v13 = *(int *)((char *)v12 + v15);
    goto LABEL_17;
  }
LABEL_26:
  double result = sub_72688((uint64_t)v34) + *(double *)(a1 + 568);
  *(double *)(a1 + 568) = result;
  return result;
}

double sub_B2387C(uint64_t a1, int a2)
{
  sub_725D0((uint64_t)v289);
  uint64_t v4 = *(unsigned int **)(a1 + 272);
  unsigned int v269 = *(unsigned int **)(a1 + 280);
  if (v4 != v269)
  {
    int v273 = a2 + 2;
    int v274 = a2 + 1;
    int v271 = ~a2;
    unint64_t v272 = (uint64_t *)(a1 + 296);
    int v268 = (void **)(a1 + 320);
    int v281 = (void *)(a1 + 104);
    uint64_t v282 = a1;
    while (1)
    {
      unsigned int v270 = v4;
      unsigned int v280 = *v4;
      int v5 = (unint64_t *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), *v4);
      sub_A19FA8((uint64_t)&v283, *(void *)(a1 + 24), *v5);
      int v6 = v284;
      int v7 = &v285;
      if (v288) {
        int v7 = v287;
      }
      if ((unint64_t)v284 < *v7) {
        break;
      }
LABEL_3:
      uint64_t v4 = v270 + 1;
      if (v270 + 1 == v269) {
        goto LABEL_317;
      }
    }
LABEL_13:
    uint64_t v11 = 0;
    unint64_t v12 = __ROR8__(*v6, 32);
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = *(void *)(v13 + 72) - 1;
    unint64_t v15 = 0xC4CEB9FE1A85EC53
        * ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) >> 33));
    unint64_t v16 = v15 ^ (v15 >> 33);
    uint64_t v17 = *(void *)(v13 + 48);
    uint64_t v18 = v17 + 11;
    uint64_t v19 = -1;
    for (unint64_t i = v16; ; unint64_t i = v11 + v21)
    {
      uint64_t v21 = i & v14;
      unint64_t v22 = (i & v14) / 0x30;
      unint64_t v23 = v21 - 48 * v22;
      if (((*(unsigned __int8 *)(v17 + 16 * v22 + (v23 >> 3) + 10) >> (v23 & 7)) & 1) == 0)
      {
        if (v19 == -1) {
          unint64_t v59 = v21;
        }
        else {
          unint64_t v59 = v19;
        }
        if (!sub_AD2F40(v13, 1)) {
          goto LABEL_98;
        }
        goto LABEL_55;
      }
      uint64_t v24 = *(void *)(v17 + 16 * v22);
      if (!*(void *)(v13 + 40)) {
        goto LABEL_33;
      }
      unsigned int v25 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
      if ((unsigned __int16)(v21 - 48 * v22) < 9u)
      {
        __int16 v26 = 0;
        LOBYTE(v31) = v21 - 48 * v22;
        goto LABEL_29;
      }
      __int16 v26 = 0;
      uint64_t v27 = (unsigned __int16)(v21 - 48 * v22 - 9) >> 3;
      if ((unsigned __int16)(v21 - 48 * v22 - 9) >> 3)
      {
        __int16 v28 = 0;
        uint64_t v29 = v27 + 1;
        uint64_t v30 = (v27 + 1) & 0x3FFE;
        unsigned __int16 v31 = v23 - 8 * v30;
        int v32 = &v25[v30];
        unsigned int v33 = (unsigned __int8 *)(v18 + 16 * v22);
        uint64_t v34 = v30;
        do
        {
          uint64_t v35 = *(v33 - 1);
          int v36 = *v33;
          v33 += 2;
          v26 += byte_20EBFB6[v35];
          v28 += byte_20EBFB6[v36];
          v34 -= 2;
        }
        while (v34);
        v26 += v28;
        if (v29 == v30) {
          goto LABEL_28;
        }
      }
      else
      {
        unsigned __int16 v31 = v21 - 48 * v22;
        int v32 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
      }
      do
      {
        int v37 = *v32++;
        v26 += byte_20EBFB6[v37];
        v31 -= 8;
      }
      while (v31 > 8u);
LABEL_28:
      v25 += ((unsigned __int16)(v23 - 9) >> 3) + 1;
LABEL_29:
      uint64_t v38 = (_DWORD *)(v24
                     + 12
                     * (unsigned __int16)(v26 + byte_20EBFB6[~(-1 << v31) & (unint64_t)*v25]));
      BOOL v39 = *(_DWORD *)(v13 + 36) == v38[1] && *(_DWORD *)(v13 + 32) == *v38;
      if (v39)
      {
        if (v19 == -1) {
          uint64_t v19 = v21;
        }
        goto LABEL_16;
      }
LABEL_33:
      uint64_t v40 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
      if ((unsigned __int16)(v21 - 48 * v22) < 9u)
      {
        __int16 v41 = 0;
        uint64_t v52 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
        LOBYTE(v46) = v21 - 48 * v22;
        goto LABEL_43;
      }
      __int16 v41 = 0;
      uint64_t v42 = (unsigned __int16)(v21 - 48 * v22 - 9) >> 3;
      if ((unsigned __int16)(v21 - 48 * v22 - 9) >> 3)
      {
        __int16 v43 = 0;
        uint64_t v44 = v42 + 1;
        uint64_t v45 = (v42 + 1) & 0x3FFE;
        unsigned __int16 v46 = v23 - 8 * v45;
        uint64_t v47 = &v40[v45];
        uint64_t v48 = (unsigned __int8 *)(v18 + 16 * v22);
        uint64_t v49 = v45;
        do
        {
          uint64_t v50 = *(v48 - 1);
          int v51 = *v48;
          v48 += 2;
          v41 += byte_20EBFB6[v50];
          v43 += byte_20EBFB6[v51];
          v49 -= 2;
        }
        while (v49);
        v41 += v43;
        if (v44 == v45) {
          goto LABEL_42;
        }
      }
      else
      {
        unsigned __int16 v46 = v21 - 48 * v22;
        uint64_t v47 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
      }
      do
      {
        int v53 = *v47++;
        v41 += byte_20EBFB6[v53];
        v46 -= 8;
      }
      while (v46 > 8u);
LABEL_42:
      uint64_t v52 = &v40[((unsigned __int16)(v23 - 9) >> 3) + 1];
LABEL_43:
      if (v12 == *(void *)(v24
                            + 12
                            * (unsigned __int16)(v41 + byte_20EBFB6[~(-1 << v46) & (unint64_t)*v52])))
      {
        if (v21 != -1)
        {
          if ((unsigned __int16)(v21 - 48 * v22) < 9u)
          {
            __int16 v56 = 0;
          }
          else
          {
            if ((((_WORD)v21 - 48 * (_WORD)v22 - 8) & 0xFFF8) != 0) {
              __int16 v54 = 8;
            }
            else {
              __int16 v54 = v21 - 48 * v22 - 8;
            }
            unsigned __int16 v55 = ~v54 + v21 - 48 * v22;
            if (v55 < 8u)
            {
              __int16 v56 = 0;
              unsigned __int16 v57 = v23;
              unint64_t v58 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
              goto LABEL_119;
            }
            __int16 v117 = 0;
            __int16 v118 = 0;
            uint64_t v119 = (v55 >> 3) + 1;
            unsigned __int16 v57 = v23 - 8 * (((v55 >> 3) + 1) & 0x3FFE);
            unint64_t v58 = &v40[v119 & 0x3FFE];
            unsigned int v120 = (unsigned __int8 *)(v17 + 16 * v22 + 11);
            uint64_t v121 = v119 & 0x3FFE;
            do
            {
              uint64_t v122 = *(v120 - 1);
              int v123 = *v120;
              v120 += 2;
              v117 += byte_20EBFB6[v122];
              v118 += byte_20EBFB6[v123];
              v121 -= 2;
            }
            while (v121);
            __int16 v56 = v118 + v117;
            if ((v119 & 0x3FFE) != v119)
            {
              do
              {
LABEL_119:
                int v124 = *v58++;
                v56 += byte_20EBFB6[v124];
                v57 -= 8;
              }
              while (v57 > 8u);
            }
            v40 += ((unsigned __int16)(v23 - 9) >> 3) + 1;
            LOBYTE(v23) = v57;
          }
          uint64_t v125 = *(void *)(v13 + 56);
          unsigned __int16 v126 = v56 + byte_20EBFB6[~(-1 << v23) & (unint64_t)*v40];
          uint64_t v127 = v17 + 16 * v22;
          if (*(unsigned __int16 *)(v127 + 8) != v126 || v127 + 16 == v125)
          {
            uint64_t v103 = (_DWORD *)(v24 + 12 * v126);
          }
          else
          {
            uint64_t v129 = v127 + 32;
            do
            {
              if (*(_WORD *)(v129 - 8)) {
                BOOL v130 = 1;
              }
              else {
                BOOL v130 = v129 == v125;
              }
              v129 += 16;
            }
            while (!v130);
            uint64_t v103 = *(_DWORD **)(v129 - 32);
          }
          goto LABEL_99;
        }
        unint64_t v59 = -1;
        if (!sub_AD2F40(v13, 1))
        {
LABEL_98:
          unint64_t v290 = v12;
          int v291 = -1;
          sub_AD3484(v13, (uint64_t *)&v290, v59, v292);
          uint64_t v103 = (_DWORD *)v293;
          goto LABEL_99;
        }
LABEL_55:
        uint64_t v60 = 0;
        unint64_t v290 = v12;
        int v291 = -1;
        uint64_t v61 = *(void *)(v13 + 72) - 1;
        uint64_t v62 = *(void *)(v13 + 48);
        uint64_t v63 = v62 + 11;
        uint64_t v64 = -1;
        while (2)
        {
          uint64_t v65 = v16 & v61;
          unint64_t v66 = (v16 & v61) / 0x30;
          unint64_t v67 = (v16 & v61) % 0x30;
          if (((*(unsigned __int8 *)(v62 + 16 * v66 + (v67 >> 3) + 10) >> (v67 & 7)) & 1) == 0)
          {
            if (v64 == -1) {
              unint64_t v102 = v16 & v61;
            }
            else {
              unint64_t v102 = v64;
            }
            goto LABEL_96;
          }
          uint64_t v68 = *(void *)(v13 + 40);
          uint64_t v69 = *(void *)(v62 + 16 * v66);
          if (!v68) {
            break;
          }
          unint64_t v70 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
          if ((unsigned __int16)((v16 & v61) % 0x30) < 9u)
          {
            __int16 v71 = 0;
            LOBYTE(v72) = (v16 & v61) % 0x30;
            goto LABEL_71;
          }
          __int16 v71 = 0;
          uint64_t v72 = (unsigned __int16)(v65 - 48 * v66 - 9) >> 3;
          if (!((unsigned __int16)(v65 - 48 * v66 - 9) >> 3))
          {
            LODWORD(v72) = (v16 & v61) % 0x30;
            char v76 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
            do
            {
LABEL_69:
              int v81 = *v76++;
              v71 += byte_20EBFB6[v81];
              LOWORD(v72) = v72 - 8;
            }
            while ((unsigned __int16)v72 > 8u);
            goto LABEL_70;
          }
          __int16 v73 = 0;
          uint64_t v74 = v72 + 1;
          uint64_t v75 = (v72 + 1) & 0x3FFE;
          LOWORD(v72) = v67 - 8 * v75;
          char v76 = &v70[v75];
          uint64_t v77 = (unsigned __int8 *)(v63 + 16 * v66);
          uint64_t v78 = v75;
          do
          {
            uint64_t v79 = *(v77 - 1);
            int v80 = *v77;
            v77 += 2;
            v71 += byte_20EBFB6[v79];
            v73 += byte_20EBFB6[v80];
            v78 -= 2;
          }
          while (v78);
          v71 += v73;
          if (v74 != v75) {
            goto LABEL_69;
          }
LABEL_70:
          v70 += ((unsigned __int16)(v67 - 9) >> 3) + 1;
LABEL_71:
          uint64_t v82 = (_DWORD *)(v69
                         + 12
                         * (unsigned __int16)(v71 + byte_20EBFB6[~(-1 << v72) & (unint64_t)*v70]));
          if (*(_DWORD *)(v13 + 36) == v82[1] && *(_DWORD *)(v13 + 32) == *v82)
          {
            if (v64 == -1) {
              uint64_t v64 = v16 & v61;
            }
LABEL_58:
            unint64_t v16 = ++v60 + v65;
            continue;
          }
          break;
        }
        unsigned __int16 v84 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
        if ((unsigned __int16)((v16 & v61) % 0x30) < 9u)
        {
          __int16 v85 = 0;
          unsigned __int16 v95 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
          LOBYTE(v86) = (v16 & v61) % 0x30;
          goto LABEL_85;
        }
        __int16 v85 = 0;
        uint64_t v86 = (unsigned __int16)(v65 - 48 * v66 - 9) >> 3;
        if (!((unsigned __int16)(v65 - 48 * v66 - 9) >> 3))
        {
          LODWORD(v86) = (v16 & v61) % 0x30;
          __int16 v90 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
          do
          {
LABEL_83:
            int v96 = *v90++;
            v85 += byte_20EBFB6[v96];
            LOWORD(v86) = v86 - 8;
          }
          while ((unsigned __int16)v86 > 8u);
          goto LABEL_84;
        }
        __int16 v87 = 0;
        uint64_t v88 = v86 + 1;
        uint64_t v89 = (v86 + 1) & 0x3FFE;
        LOWORD(v86) = v67 - 8 * v89;
        __int16 v90 = &v84[v89];
        int v91 = (unsigned __int8 *)(v63 + 16 * v66);
        uint64_t v92 = v89;
        do
        {
          uint64_t v93 = *(v91 - 1);
          int v94 = *v91;
          v91 += 2;
          v85 += byte_20EBFB6[v93];
          v87 += byte_20EBFB6[v94];
          v92 -= 2;
        }
        while (v92);
        v85 += v87;
        if (v88 != v89) {
          goto LABEL_83;
        }
LABEL_84:
        unsigned __int16 v95 = &v84[((unsigned __int16)(v67 - 9) >> 3) + 1];
LABEL_85:
        if (v12 != *(void *)(v69
                              + 12
                              * (unsigned __int16)(v85
                                                 + byte_20EBFB6[~(-1 << v86) & (unint64_t)*v95])))
          goto LABEL_58;
        if (v65 == -1)
        {
          unint64_t v102 = -1;
LABEL_96:
          sub_AD3484(v13, (uint64_t *)&v290, v102, v292);
          uint64_t v103 = (_DWORD *)v293;
          goto LABEL_99;
        }
        if ((unsigned __int16)((v16 & v61) % 0x30) < 9u)
        {
          __int16 v99 = 0;
        }
        else
        {
          if ((((_WORD)v65 - 48 * (_WORD)v66 - 8) & 0xFFF8) != 0) {
            __int16 v97 = 8;
          }
          else {
            __int16 v97 = v65 - 48 * v66 - 8;
          }
          unsigned __int16 v98 = ~v97 + v65 - 48 * v66;
          if (v98 < 8u)
          {
            __int16 v99 = 0;
            unsigned __int16 v100 = v67;
            uint64_t v101 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
            goto LABEL_257;
          }
          __int16 v234 = 0;
          __int16 v235 = 0;
          uint64_t v236 = (v98 >> 3) + 1;
          unsigned __int16 v100 = v67 - 8 * (((v98 >> 3) + 1) & 0x3FFE);
          uint64_t v101 = &v84[v236 & 0x3FFE];
          unsigned int v237 = (unsigned __int8 *)(v62 + 16 * v66 + 11);
          uint64_t v238 = v236 & 0x3FFE;
          do
          {
            uint64_t v239 = *(v237 - 1);
            int v240 = *v237;
            v237 += 2;
            v234 += byte_20EBFB6[v239];
            v235 += byte_20EBFB6[v240];
            v238 -= 2;
          }
          while (v238);
          __int16 v99 = v235 + v234;
          if ((v236 & 0x3FFE) != v236)
          {
            do
            {
LABEL_257:
              int v241 = *v101++;
              v99 += byte_20EBFB6[v241];
              v100 -= 8;
            }
            while (v100 > 8u);
          }
          v84 += ((unsigned __int16)(v67 - 9) >> 3) + 1;
          LOBYTE(v67) = v100;
        }
        uint64_t v242 = v62 + 16 * v66;
        unsigned int v243 = *(_DWORD ***)(v13 + 56);
        unsigned __int16 v244 = v99 + byte_20EBFB6[~(-1 << v67) & (unint64_t)*v84];
        uint64_t v103 = (_DWORD *)(v69 + 12 * v244);
        if (*(unsigned __int16 *)(v242 + 8) == v244)
        {
          uint64_t v245 = v242 + 16;
          if ((_DWORD **)(v242 + 16) != v243)
          {
            while (1)
            {
              uint64_t v246 = (_DWORD **)v245;
              if (*(_WORD *)(v245 + 8)) {
                break;
              }
              v245 += 16;
              if (v246 + 2 == v243)
              {
                uint64_t v242 = *(void *)(v13 + 56);
                goto LABEL_267;
              }
            }
            uint64_t v242 = v245;
LABEL_267:
            uint64_t v103 = *v246;
            goto LABEL_268;
          }
        }
        else
        {
LABEL_268:
          if ((_DWORD **)v242 != v243 && v68)
          {
            do
            {
              if (*(_DWORD *)(v13 + 36) != v103[1] || *(_DWORD *)(v13 + 32) != *v103) {
                break;
              }
              v103 += 3;
              if (v103 == (_DWORD *)(*(void *)v242 + 12 * *(unsigned __int16 *)(v242 + 8)))
              {
                v242 += 16;
                if ((_DWORD **)v242 != v243)
                {
                  do
                  {
                    if (*(_WORD *)(v242 + 8))
                    {
                      uint64_t v103 = *(_DWORD **)v242;
                      goto LABEL_272;
                    }
                    v242 += 16;
                  }
                  while ((_DWORD **)v242 != v243);
                  uint64_t v103 = *(_DWORD **)(v242 - 16);
                }
                break;
              }
LABEL_272:
              ;
            }
            while ((_DWORD **)v242 != v243);
          }
        }
LABEL_99:
        unsigned int v104 = v103[2];
        if (v104 != -1) {
          goto LABEL_141;
        }
        int v105 = *(_DWORD *)(v13 + 112);
        *(_DWORD *)(v13 + 112) = v105 + 1;
        v103[2] = v105;
        uint64_t v107 = *(unint64_t **)(v13 + 96);
        unint64_t v106 = *(void *)(v13 + 104);
        if ((unint64_t)v107 < v106)
        {
          *uint64_t v107 = v12;
          uint64_t v108 = (uint64_t)(v107 + 1);
          goto LABEL_140;
        }
        __int16 v109 = (unint64_t **)(v13 + 88);
        unint64_t v110 = *(char **)(v13 + 88);
        uint64_t v111 = ((char *)v107 - v110) >> 3;
        unint64_t v112 = v111 + 1;
        if ((unint64_t)(v111 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v113 = v106 - (void)v110;
        if (v113 >> 2 > v112) {
          unint64_t v112 = v113 >> 2;
        }
        if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v112 = 0x1FFFFFFFFFFFFFFFLL;
        }
        unint64_t v276 = v112;
        if (!v112)
        {
          uint64_t v114 = 0;
          unsigned __int16 v115 = (unint64_t *)(8 * v111);
          *(void *)(8 * v111) = v12;
          uint64_t v108 = 8 * v111 + 8;
          if (v107 != (unint64_t *)v110) {
            goto LABEL_110;
          }
LABEL_114:
          *(void *)(v13 + 88) = v115;
          *(void *)(v13 + 96) = v108;
          *(void *)(v13 + 104) = &v114[8 * v276];
          if (v107) {
            goto LABEL_139;
          }
          goto LABEL_140;
        }
        if (v112 >> 61) {
          goto LABEL_319;
        }
        uint64_t v114 = (char *)operator new(8 * v112);
        __int16 v109 = (unint64_t **)(v13 + 88);
        unsigned __int16 v115 = (unint64_t *)&v114[8 * v111];
        *unsigned __int16 v115 = v12;
        uint64_t v108 = (uint64_t)(v115 + 1);
        if (v107 == (unint64_t *)v110) {
          goto LABEL_114;
        }
LABEL_110:
        unint64_t v116 = (char *)(v107 - 1) - v110;
        if (v116 < 0x58) {
          goto LABEL_323;
        }
        if ((unint64_t)(v110 - v114) < 0x20) {
          goto LABEL_323;
        }
        uint64_t v131 = (v116 >> 3) + 1;
        uint64_t v132 = 8 * (v131 & 0x3FFFFFFFFFFFFFFCLL);
        int v133 = &v107[v132 / 0xFFFFFFFFFFFFFFF8];
        unsigned __int16 v115 = (unint64_t *)((char *)v115 - v132);
        uint64_t v134 = &v114[8 * v111 - 16];
        int v135 = v107 - 2;
        uint64_t v136 = v131 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v137 = *(_OWORD *)v135;
          *((_OWORD *)v134 - 1) = *((_OWORD *)v135 - 1);
          *(_OWORD *)uint64_t v134 = v137;
          v134 -= 32;
          v135 -= 4;
          v136 -= 4;
        }
        while (v136);
        uint64_t v107 = v133;
        if (v131 != (v131 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_323:
          do
          {
            unint64_t v138 = *--v107;
            *--unsigned __int16 v115 = v138;
          }
          while (v107 != (unint64_t *)v110);
        }
        uint64_t v107 = *v109;
        *(void *)(v13 + 88) = v115;
        *(void *)(v13 + 96) = v108;
        *(void *)(v13 + 104) = &v114[8 * v276];
        if (v107) {
LABEL_139:
        }
          operator delete(v107);
LABEL_140:
        *(void *)(v13 + 96) = v108;
        unsigned int v104 = v103[2];
LABEL_141:
        *(double *)(v282 + 624) = *(double *)(v282 + 624) + 1.0;
        if (v280 == v104) {
          goto LABEL_239;
        }
        LODWORD(v292[0]) = 0;
        uint64_t v139 = *(void *)(v282 + 192);
        long long v140 = (char *)(v139
                      + ((unint64_t)*(unsigned int *)(sub_B25B80((uint64_t)v281, (unsigned int *)v292) + 4) << 6));
        LODWORD(v292[0]) = 0;
        uint64_t v141 = *(void *)(v282 + 192);
        uint64_t v142 = sub_B25B80((uint64_t)v281, (unsigned int *)v292);
        sub_B257BC((uint64_t)v281, 0, v140, (unsigned char *)(v141 + ((unint64_t)*(unsigned int *)(v142 + 8) << 6)));
        unsigned int v143 = v274 + *(_DWORD *)(v282 + 96) * (v280 + 1);
        LODWORD(v292[0]) = v143;
        if (*(void *)(v282 + 184) == *(void *)(v282 + 144)) {
          goto LABEL_181;
        }
        unint64_t v144 = sub_B25DE0((uint64_t)v281, (unsigned int *)v292);
        if (v144 == -1) {
          goto LABEL_181;
        }
        uint64_t v145 = *(void *)(v282 + 152);
        uint64_t v146 = v145 + 16 * (v144 / 0x30);
        uint64_t v147 = (unsigned __int8 *)(v146 + 10);
        int v148 = v144 % 0x30;
        if ((unsigned __int16)(v144 % 0x30) < 9u)
        {
          __int16 v150 = 0;
          goto LABEL_156;
        }
        uint64_t v149 = (unsigned __int16)(v144 % 0x30 - 9) >> 3;
        __int16 v150 = 0;
        if (!((unsigned __int16)(v144 % 0x30 - 9) >> 3))
        {
          unsigned __int16 v154 = v144 % 0x30;
          uint64_t v155 = (unsigned __int8 *)(v146 + 10);
          do
          {
LABEL_154:
            int v160 = *v155++;
            v150 += byte_20EC2B6[v160];
            v154 -= 8;
          }
          while (v154 > 8u);
          goto LABEL_155;
        }
        __int16 v151 = 0;
        uint64_t v152 = v149 + 1;
        uint64_t v153 = (v149 + 1) & 0x3FFE;
        unsigned __int16 v154 = v148 - 8 * v153;
        uint64_t v155 = &v147[v153];
        uint64_t v156 = (unsigned __int8 *)(v145 + 16 * (v144 / 0x30) + 11);
        uint64_t v157 = v153;
        do
        {
          uint64_t v158 = *(v156 - 1);
          int v159 = *v156;
          v156 += 2;
          v150 += byte_20EC2B6[v158];
          v151 += byte_20EC2B6[v159];
          v157 -= 2;
        }
        while (v157);
        v150 += v151;
        if (v152 != v153) {
          goto LABEL_154;
        }
LABEL_155:
        v147 += ((unsigned __int16)(v148 - 9) >> 3) + 1;
        LOBYTE(v148) = v154;
LABEL_156:
        unsigned __int16 v161 = *(_DWORD ***)(v282 + 160);
        unsigned __int16 v162 = v150 + byte_20EC2B6[~(-1 << v148) & (unint64_t)*v147];
        if (*(unsigned __int16 *)(v146 + 8) != v162)
        {
          long long v164 = (_DWORD *)(*(void *)v146 + 12 * v162);
          if ((_DWORD **)v146 != v161) {
            goto LABEL_164;
          }
          goto LABEL_172;
        }
        v146 += 16;
        if ((_DWORD **)v146 == v161) {
          goto LABEL_181;
        }
        while (1)
        {
          uint64_t v163 = (_DWORD **)v146;
          if (*(_WORD *)(v146 + 8)) {
            break;
          }
          v146 += 16;
          if (v163 + 2 == v161)
          {
            uint64_t v146 = *(void *)(v282 + 160);
            break;
          }
        }
        long long v164 = *v163;
        if ((_DWORD **)v146 != v161)
        {
LABEL_164:
          if (*(void *)(v282 + 144))
          {
            while (*(_DWORD *)(v282 + 136) == *v164)
            {
              v164 += 3;
              if (v164 == (_DWORD *)(*(void *)v146 + 12 * *(unsigned __int16 *)(v146 + 8)))
              {
                while (1)
                {
                  v146 += 16;
                  if ((_DWORD **)v146 == v161) {
                    goto LABEL_181;
                  }
                  if (*(_WORD *)(v146 + 8))
                  {
                    long long v164 = *(_DWORD **)v146;
                    break;
                  }
                }
              }
              if ((_DWORD **)v146 == v161) {
                break;
              }
            }
          }
        }
LABEL_172:
        if ((_DWORD **)v146 == v161)
        {
LABEL_181:
          unsigned int v166 = v280;
          goto LABEL_182;
        }
        uint64_t v165 = (v164[2] - v164[1]);
        unsigned int v166 = v280;
        if (v165)
        {
          unsigned int v277 = v104;
          uint64_t v167 = 0;
          unsigned int v168 = 0;
          do
          {
            uint64_t v169 = v165;
            uint64_t v170 = (_OWORD *)sub_B276AC(v281, v143, v168);
            long long v171 = v170[2];
            long long v172 = v170[3];
            long long v173 = v170[1];
            v292[0] = *v170;
            long long v293 = v171;
            long long v294 = v172;
            v292[1] = v173;
            v167 |= sub_B27114((uint64_t)v281, (uint64_t)v292, 0, 0, 1) & 0xFF00;
            uint64_t v165 = v169;
            ++v168;
          }
          while (v169 != v168);
          unsigned int v104 = v277;
          if (v167)
          {
            LODWORD(v292[0]) = 0;
            uint64_t v174 = *(void *)(v282 + 192);
            uint64_t v175 = v174
                 + ((unint64_t)*(unsigned int *)(sub_B25B80((uint64_t)v281, (unsigned int *)v292) + 4) << 6);
            LODWORD(v292[0]) = 0;
            uint64_t v176 = *(void *)(v282 + 192);
            uint64_t v177 = sub_B25B80((uint64_t)v281, (unsigned int *)v292);
            uint64_t v178 = (long long *)(v176 + ((unint64_t)*(unsigned int *)(v177 + 8) << 6));
            if ((long long *)v175 != v178)
            {
              while (*(_DWORD *)(v175 + 28) != 0x7FFFFFFF)
              {
                v175 += 64;
                if ((long long *)v175 == v178)
                {
                  uint64_t v175 = v176 + ((unint64_t)*(unsigned int *)(v177 + 8) << 6);
                  goto LABEL_316;
                }
              }
              if ((long long *)v175 != v178)
              {
                for (uint64_t j = (long long *)(v175 + 64); j != v178; j += 4)
                {
                  if (*((_DWORD *)j + 7) != 0x7FFFFFFF)
                  {
                    long long v262 = *j;
                    long long v263 = j[1];
                    long long v264 = j[3];
                    *(_OWORD *)(v175 + 32) = j[2];
                    *(_OWORD *)(v175 + 48) = v264;
                    *(_OWORD *)uint64_t v175 = v262;
                    *(_OWORD *)(v175 + 16) = v263;
                    v175 += 64;
                  }
                }
              }
            }
LABEL_316:
            LODWORD(v292[0]) = 0;
            uint64_t v265 = *(void *)(v282 + 192);
            uint64_t v266 = sub_B25B80((uint64_t)v281, (unsigned int *)v292);
            sub_B257BC((uint64_t)v281, 0, (char *)v175, (unsigned char *)(v265 + ((unint64_t)*(unsigned int *)(v266 + 8) << 6)));
          }
        }
LABEL_182:
        LODWORD(v292[0]) = 0;
        uint64_t v179 = *(void *)(v282 + 192);
        uint64_t v180 = v179 + ((unint64_t)*(unsigned int *)(sub_B25B80((uint64_t)v281, (unsigned int *)v292) + 4) << 6);
        LODWORD(v292[0]) = 0;
        uint64_t v181 = *(void *)(v282 + 192);
        uint64_t v182 = v181 + ((unint64_t)*(unsigned int *)(sub_B25B80((uint64_t)v281, (unsigned int *)v292) + 8) << 6);
        if (v180 != v182)
        {
          unsigned int v183 = v284;
          do
          {
            *(_DWORD *)uint64_t v180 = v166;
            *(_DWORD *)(v180 + 16) = -1;
            int32x2_t v184 = *(int32x2_t *)(v180 + 28);
            *(_DWORD *)(v180 + 12) = v184.i32[0];
            int v185 = *((_DWORD *)v183 + 2);
            int v186 = v185 / 10;
            int v187 = v185 % 10;
            if (v185 < 0) {
              char v188 = -5;
            }
            else {
              char v188 = 5;
            }
            *(int32x2_t *)(v180 + 28) = vadd_s32(vdup_n_s32(v186+ (((103 * (char)(v188 + v187)) >> 15) & 1)+ ((103 * (char)(v188 + v187)) >> 10)), v184);
            v180 += 64;
          }
          while (v180 != v182);
        }
        if (*(unsigned char *)(v282 + 20))
        {
          int v275 = *(_DWORD *)(v282 + 96) + *(_DWORD *)(v282 + 96) * *(_DWORD *)(v282 + 416) + 1;
          int v278 = *(_DWORD *)(v282 + 96);
          uint64_t v189 = *(void *)(v282 + 48);
          if (v189) {
            goto LABEL_190;
          }
LABEL_234:
          int v213 = 2147483646;
LABEL_235:
          if (!sub_B25438(v281, 0, v273 + v278 * (v104 + 1), v278 * (v104 + 1) + 1, v275, v213)) {
            goto LABEL_239;
          }
          if (*(void *)(v282 + 304) <= (unint64_t)v104) {
            sub_A3E96C((uint64_t)v272, v104 + 1, 0);
          }
          uint64_t v217 = *v272;
          unint64_t v218 = (unint64_t)v104 >> 6;
          uint64_t v219 = 1 << v104;
          if ((*(void *)(*v272 + 8 * v218) & (1 << v104)) != 0)
          {
LABEL_239:
            unint64_t v9 = (unint64_t)v285;
            int v6 = (void *)((char *)v284 + 12);
            unsigned __int16 v284 = v6;
            if (v6 != v285) {
              goto LABEL_240;
            }
LABEL_292:
            int v6 = v286;
            unint64_t v10 = v287[0];
            unsigned __int16 v284 = v286;
            int v8 = 1;
            unsigned __int8 v288 = 1;
            a1 = v282;
            if (*(unsigned char *)(v283 + 16)) {
              goto LABEL_293;
            }
            goto LABEL_10;
          }
          uint64_t v220 = (void *)v282;
          unsigned __int16 v222 = *(char **)(v282 + 328);
          unint64_t v221 = *(void *)(v282 + 336);
          if ((unint64_t)v222 < v221)
          {
            *(_DWORD *)unsigned __int16 v222 = v104;
            uint64_t v223 = (uint64_t)(v222 + 4);
            goto LABEL_291;
          }
          __int16 v224 = (char *)*v268;
          uint64_t v225 = v222 - (unsigned char *)*v268;
          uint64_t v226 = v225 >> 2;
          unint64_t v227 = (v225 >> 2) + 1;
          if (v227 >> 62) {
            sub_2E00();
          }
          uint64_t v228 = v221 - (void)v224;
          if (v228 >> 1 > v227) {
            unint64_t v227 = v228 >> 1;
          }
          if ((unint64_t)v228 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v227 = 0x3FFFFFFFFFFFFFFFLL;
          }
          unint64_t v279 = v227;
          if (v227)
          {
            if (!(v227 >> 62))
            {
              uint64_t v229 = operator new(4 * v227);
              uint64_t v230 = (unsigned int *)&v229[4 * v226];
              unsigned int *v230 = v104;
              uint64_t v223 = (uint64_t)(v230 + 1);
              if (v222 != v224) {
                goto LABEL_252;
              }
LABEL_265:
              int v233 = (void *)v282;
              unint64_t v232 = v279;
              goto LABEL_288;
            }
LABEL_319:
            sub_188D718();
          }
          uint64_t v229 = 0;
          uint64_t v230 = (unsigned int *)(4 * v226);
          *(_DWORD *)(4 * v226) = v104;
          uint64_t v223 = 4 * v226 + 4;
          if (v222 == v224) {
            goto LABEL_265;
          }
LABEL_252:
          unint64_t v231 = v222 - 4 - v224;
          unint64_t v232 = v279;
          if (v231 >= 0x2C)
          {
            int v233 = (void *)v282;
            if ((unint64_t)(v222 - &v229[v225]) >= 0x20)
            {
              uint64_t v248 = (v231 >> 2) + 1;
              uint64_t v249 = 4 * (v248 & 0x7FFFFFFFFFFFFFF8);
              unint64_t v250 = &v222[-v249];
              uint64_t v230 = (unsigned int *)((char *)v230 - v249);
              uint64_t v251 = &v229[4 * v226 - 16];
              uint64_t v252 = v222 - 16;
              uint64_t v253 = v248 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v254 = *(_OWORD *)v252;
                *(v251 - 1) = *((_OWORD *)v252 - 1);
                *uint64_t v251 = v254;
                v251 -= 2;
                v252 -= 32;
                v253 -= 8;
              }
              while (v253);
              unsigned __int16 v222 = v250;
              if (v248 == (v248 & 0x7FFFFFFFFFFFFFF8)) {
                goto LABEL_288;
              }
            }
          }
          else
          {
            int v233 = (void *)v282;
          }
          do
          {
            unsigned int v255 = *((_DWORD *)v222 - 1);
            v222 -= 4;
            *--uint64_t v230 = v255;
          }
          while (v222 != v224);
LABEL_288:
          v233[40] = v230;
          v233[41] = v223;
          v233[42] = &v229[4 * v232];
          if (v224)
          {
            uint64_t v256 = v223;
            operator delete(v224);
            uint64_t v223 = v256;
            uint64_t v217 = *v272;
          }
          uint64_t v220 = v233;
LABEL_291:
          v220[41] = v223;
          *(void *)(v217 + 8 * v218) |= v219;
          unint64_t v9 = (unint64_t)v285;
          int v6 = (void *)((char *)v284 + 12);
          unsigned __int16 v284 = v6;
          if (v6 == v285) {
            goto LABEL_292;
          }
LABEL_240:
          int v8 = v288;
          a1 = v282;
          unint64_t v10 = v287[0];
          if (*(unsigned char *)(v283 + 16))
          {
LABEL_293:
            if (v8) {
              unint64_t v257 = v10;
            }
            else {
              unint64_t v257 = v9;
            }
            if ((unint64_t)v6 < v257)
            {
              while (1)
              {
                unint64_t v259 = __ROR8__(*v6, 32);
                if (HIDWORD(v259) == 1 && (v259 + 3) < 2) {
                  break;
                }
                if (sub_2AB7E4(**(void **)(v283 + 4120)))
                {
                  LOBYTE(v8) = v288;
                  int v6 = v284;
                  unint64_t v9 = (unint64_t)v285;
                  break;
                }
                unint64_t v9 = (unint64_t)v285;
                int v6 = (void *)((char *)v284 + 12);
                unsigned __int16 v284 = v6;
                if (v6 == v285)
                {
                  int v6 = v286;
                  unsigned __int16 v284 = v286;
                  LOBYTE(v8) = 1;
                  unsigned __int8 v288 = 1;
                  if ((unint64_t)v286 >= v287[0]) {
                    break;
                  }
                }
                else
                {
                  LOBYTE(v8) = v288;
                  uint64_t v258 = &v285;
                  if (v288) {
                    uint64_t v258 = v287;
                  }
                  if ((unint64_t)v6 >= *v258) {
                    break;
                  }
                }
              }
              unint64_t v10 = v287[0];
            }
          }
LABEL_10:
          if ((_BYTE)v8) {
            unint64_t v9 = v10;
          }
          if ((unint64_t)v6 >= v9) {
            goto LABEL_3;
          }
          goto LABEL_13;
        }
        int v275 = -1;
        int v278 = *(_DWORD *)(v282 + 96);
        uint64_t v189 = *(void *)(v282 + 48);
        if (!v189) {
          goto LABEL_234;
        }
LABEL_190:
        unsigned int v190 = 0;
        unsigned int v191 = *(_DWORD *)(v282 + 100) + v271;
        while (2)
        {
          while (2)
          {
            LODWORD(v292[0]) = (v104 << *(_DWORD *)v189) | (v191 - v190);
            if (*(void *)(v189 + 88) == *(void *)(v189 + 48)
              || (unint64_t v192 = sub_AD72DC(v189 + 8, (unsigned int *)v292), v192 == -1))
            {
LABEL_219:
              int v213 = *(_DWORD *)(v189 + 4);
              v190 += 2;
              if (v213 != 0x7FFFFFFF || v190 > v191) {
                goto LABEL_235;
              }
              continue;
            }
            break;
          }
          uint64_t v193 = *(void *)(v189 + 56);
          int v194 = (_DWORD **)(v193 + 16 * (v192 / 0x30));
          uint64_t v195 = (unsigned __int8 *)v194 + 10;
          int v196 = v192 % 0x30;
          if ((unsigned __int16)(v192 % 0x30) >= 9u)
          {
            __int16 v197 = 0;
            uint64_t v198 = (unsigned __int16)(v192 % 0x30 - 9) >> 3;
            if ((unsigned __int16)(v192 % 0x30 - 9) >> 3)
            {
              __int16 v199 = 0;
              uint64_t v200 = v198 + 1;
              uint64_t v201 = (v198 + 1) & 0x3FFE;
              unsigned __int16 v202 = v196 - 8 * v201;
              int v203 = &v195[v201];
              int v204 = (unsigned __int8 *)(v193 + 16 * (v192 / 0x30) + 11);
              uint64_t v205 = v201;
              do
              {
                uint64_t v206 = *(v204 - 1);
                int v207 = *v204;
                v204 += 2;
                v197 += byte_20EBDB6[v206];
                v199 += byte_20EBDB6[v207];
                v205 -= 2;
              }
              while (v205);
              v197 += v199;
              if (v200 == v201)
              {
LABEL_202:
                v195 += ((unsigned __int16)(v196 - 9) >> 3) + 1;
                LOBYTE(v196) = v202;
                goto LABEL_203;
              }
            }
            else
            {
              unsigned __int16 v202 = v192 % 0x30;
              int v203 = (unsigned __int8 *)v194 + 10;
            }
            do
            {
              int v208 = *v203++;
              v197 += byte_20EBDB6[v208];
              v202 -= 8;
            }
            while (v202 > 8u);
            goto LABEL_202;
          }
          __int16 v197 = 0;
LABEL_203:
          __int16 v209 = *(_DWORD ***)(v189 + 64);
          unsigned __int16 v210 = v197 + byte_20EBDB6[~(-1 << v196) & (unint64_t)*v195];
          if (*((unsigned __int16 *)v194 + 4) == v210)
          {
            v194 += 2;
            if (v194 == v209) {
              goto LABEL_219;
            }
            while (1)
            {
              unint64_t v211 = v194;
              if (*((_WORD *)v194 + 4)) {
                break;
              }
              v194 += 2;
              if (v211 + 2 == v209)
              {
                int v194 = *(_DWORD ***)(v189 + 64);
                break;
              }
            }
            uint64_t v212 = *v211;
            if (v194 == v209) {
              goto LABEL_219;
            }
          }
          else
          {
            uint64_t v212 = &(*v194)[2 * v210];
            if (v194 == v209) {
              goto LABEL_219;
            }
          }
          if (*(void *)(v189 + 48))
          {
            while (*(_DWORD *)(v189 + 40) == *v212)
            {
              v212 += 2;
              if (v212 == &(*v194)[2 * *((unsigned __int16 *)v194 + 4)])
              {
                while (1)
                {
                  v194 += 2;
                  if (v194 == v209) {
                    goto LABEL_219;
                  }
                  if (*((_WORD *)v194 + 4))
                  {
                    uint64_t v212 = *v194;
                    break;
                  }
                }
              }
              if (v194 == v209) {
                break;
              }
            }
          }
          BOOL v39 = v194 == v209;
          uint64_t v215 = v212 + 1;
          if (v39) {
            uint64_t v215 = (int *)(v189 + 4);
          }
          int v213 = *v215;
          v190 += 2;
          if (*v215 != 0x7FFFFFFF || v190 > v191) {
            goto LABEL_235;
          }
          continue;
        }
      }
LABEL_16:
      ++v11;
    }
  }
LABEL_317:
  double result = sub_72688((uint64_t)v289) + *(double *)(a1 + 568);
  *(double *)(a1 + 568) = result;
  return result;
}

BOOL sub_B24E80(uint64_t a1)
{
  if (*(void *)a1 == -1) {
    return 0;
  }
  uint64_t v25 = *(void *)(a1 + 192);
  uint64_t v26 = *(void *)(a1 + 208);
  uint64_t v23 = 12 * *(void *)(a1 + 176);
  uint64_t v24 = 8 * (*(void *)(a1 + 232) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v2 = 8 * (*(void *)(a1 + 264) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v3 = *(void *)(a1 + 288);
  uint64_t v21 = *(void *)(a1 + 320);
  uint64_t v22 = *(void *)(a1 + 272);
  uint64_t v4 = 8 * (*(void *)(a1 + 312) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v5 = *(void *)(a1 + 360);
  uint64_t v6 = *(void *)(a1 + 336);
  uint64_t v19 = *(void *)(a1 + 392);
  uint64_t v20 = *(void *)(a1 + 344);
  uint64_t v7 = 8 * (*(void *)(a1 + 384) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v8 = *(void *)(a1 + 408);
  uint64_t v9 = sub_BD6170((void *)(a1 + 424));
  uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 104)
      - *(void *)(*(void *)(a1 + 32) + 88)
      + *(void *)(*(void *)(a1 + 40) + 104)
      + 12 * (*(void *)(*(void *)(a1 + 40) + 72) + *(void *)(*(void *)(a1 + 32) + 72))
      - *(void *)(*(void *)(a1 + 40) + 88);
  uint64_t v11 = *(void *)(a1 + 48);
  if (v11) {
    v10 += 8 * *(void *)(v11 + 80);
  }
  unint64_t v31 = v23
      + v26
      - v25
      + v24
      + v3
      + v2
      - v22
      + v6
      + v4
      + v5
      - (v21
       + v20)
      + v7
      + v8
      - v19
      + sub_A409C0(*(uint64_t **)(a1 + 24))
      + v9
      + v10;
  BOOL v12 = v31 > *(void *)a1;
  if (v31 > *(void *)a1 && sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v29);
    uint64_t v13 = sub_188FC78(v29, (uint64_t)"Exceeded memory limit of ", 25);
    uint64_t v14 = (void *)sub_38EC58((uint64_t)v13, (unint64_t *)a1);
    unint64_t v15 = sub_188FC78(v14, (uint64_t)" in directional McSPA (", 23);
    unint64_t v16 = (void *)sub_38EC58((uint64_t)v15, &v31);
    uint64_t v17 = sub_188FC78(v16, (uint64_t)") in round ", 11);
    std::ostream::operator<<();
    sub_188FC78(v17, (uint64_t)"; terminating algorithm.", 24);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v28 < 0) {
      operator delete(__p);
    }
    if (v30 < 0) {
      operator delete((void *)v29[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return v12;
}

void sub_B25184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a24 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a25);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_B251D0(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 100);
  if (v1)
  {
    uint64_t v2 = result;
    int v3 = 0;
    uint64_t v4 = (void *)(result + 104);
    do
    {
      unsigned int v15 = 0;
      uint64_t v5 = *(void *)(v2 + 192);
      uint64_t v6 = (char *)(v5 + ((unint64_t)*(unsigned int *)(sub_B25B80((uint64_t)v4, &v15) + 4) << 6));
      unsigned int v15 = 0;
      uint64_t v7 = *(void *)(v2 + 192);
      uint64_t v8 = sub_B25B80((uint64_t)v4, &v15);
      sub_B257BC((uint64_t)v4, 0, v6, (unsigned char *)(v7 + ((unint64_t)*(unsigned int *)(v8 + 8) << 6)));
      sub_B2780C(v4, v3 + *(_DWORD *)(v2 + 96) + *(_DWORD *)(v2 + 96) * *(_DWORD *)(v2 + 416) + 2, 0);
      unsigned int v15 = 0;
      uint64_t v9 = *(void *)(v2 + 192);
      uint64_t v10 = v9 + ((unint64_t)*(unsigned int *)(sub_B25B80((uint64_t)v4, &v15) + 4) << 6);
      unsigned int v15 = 0;
      uint64_t v11 = *(void *)(v2 + 192);
      double result = sub_B25B80((uint64_t)v4, &v15);
      uint64_t v12 = v11 + ((unint64_t)*(unsigned int *)(result + 8) << 6);
      if (v10 != v12)
      {
        double v13 = *(double *)(v2 + 592);
        uint64_t v14 = *(void *)(v2 + 584);
        do
        {
          double v13 = v13 + 1.0;
          v14 += *(int *)(v10 + 28);
          v10 += 64;
        }
        while (v10 != v12);
        *(double *)(v2 + 592) = v13;
        *(void *)(v2 + 584) = v14;
      }
      ++v3;
    }
    while (v3 != v1);
  }
  return result;
}

uint64_t sub_B25308(void *a1, long long *a2, unsigned int a3, int a4, int a5)
{
  unsigned int v28 = a3;
  sub_B274E0(a1, &v28, v24);
  uint64_t v10 = a1[6];
  uint64_t v11 = a1[7];
  unsigned int v15 = a1;
  uint64_t v16 = v10;
  uint64_t v17 = v11;
  uint64_t v18 = v11;
  uint64_t v19 = 0;
  uint64_t v20 = v10;
  uint64_t v21 = v11;
  uint64_t v22 = v11;
  uint64_t v23 = 0;
  sub_AE47A0(&v15);
  if (v24[1] == v16 && v25 == v17 && v26 == v18 && (v26 == v25 || v27 == v19)
    || *(_DWORD *)(v27 + 8) == *(_DWORD *)(v27 + 4))
  {
    sub_B26C6C((uint64_t)a1, a3, a2);
    return 1;
  }
  else
  {
    __int16 v13 = sub_B27114((uint64_t)a1, (uint64_t)a2, a3, a4, a5);
    char v14 = v13;
    if ((v13 & 0x100) != 0) {
      sub_B273D4((uint64_t)a1, a3);
    }
    return v14 & 1;
  }
}

BOOL sub_B25438(void *a1, unsigned int a2, unsigned int a3, unsigned int a4, int a5, int a6)
{
  v56[0] = a2;
  sub_B274E0(a1, v56, v53);
  uint64_t v12 = a1[6];
  uint64_t v13 = a1[7];
  uint64_t v45 = a1;
  *(void *)&long long v46 = v12;
  *((void *)&v46 + 1) = v13;
  uint64_t v47 = v13;
  uint64_t v48 = 0;
  uint64_t v49 = v12;
  uint64_t v50 = v13;
  uint64_t v51 = v13;
  uint64_t v52 = 0;
  sub_AE47A0(&v45);
  if (*(_OWORD *)&v53[8] == v46
    && *(void *)&v53[24] == v47
    && (*(void *)&v53[24] == *(void *)&v53[16] || (void)v54 == v48))
  {
    goto LABEL_7;
  }
  int v14 = *(_DWORD *)(v54 + 4);
  int v15 = *(_DWORD *)(v54 + 8);
  int v16 = v15 - v14;
  if (v15 == v14) {
    goto LABEL_7;
  }
  if (a6 == 0x7FFFFFFF)
  {
    unsigned int v17 = 0;
    do
      sub_B276AC(a1, a2, v17++);
    while (v16 != v17);
LABEL_7:
    LOBYTE(v18) = 0;
    return v18 != 0;
  }
  unsigned int v43 = a3;
  unsigned int v44 = a4;
  if (a5 == -1)
  {
    __int16 v18 = 0;
    unsigned int v20 = 0;
    do
    {
      uint64_t v21 = (_OWORD *)sub_B276AC(a1, a2, v20);
      long long v22 = v21[2];
      long long v23 = v21[3];
      long long v24 = v21[1];
      *(_OWORD *)int v53 = *v21;
      *(_OWORD *)&v53[16] = v24;
      long long v54 = v22;
      long long v55 = v23;
      if (SHIDWORD(v24) <= a6)
      {
        __int16 v25 = sub_B27114((uint64_t)a1, (uint64_t)v53, a4, 0, 1);
        if ((_BYTE)v25)
        {
          sub_B27114((uint64_t)a1, (uint64_t)v53, a3, 1, 1);
          *(void *)(v26 + 52) = -1;
          *(_DWORD *)(v26 + 60) = 0x7FFFFFFF;
        }
        v18 |= v25 & 0xFF00 | v25;
      }
      ++v20;
    }
    while (v16 != v20);
  }
  else
  {
    __int16 v18 = 0;
    unsigned int v27 = 0;
    do
    {
      char v30 = (_OWORD *)sub_B276AC(a1, a2, v27);
      long long v31 = v30[2];
      long long v32 = v30[3];
      long long v33 = v30[1];
      *(_OWORD *)int v53 = *v30;
      *(_OWORD *)&v53[16] = v33;
      long long v54 = v31;
      long long v55 = v32;
      if (SHIDWORD(v33) <= a6)
      {
        LODWORD(v45) = a5;
        uint64_t v34 = a1[11];
        uint64_t v35 = v34 + ((unint64_t)*(unsigned int *)(sub_B25B80((uint64_t)a1, (unsigned int *)&v45) + 4) << 6);
        LODWORD(v45) = a5;
        uint64_t v36 = a1[11];
        uint64_t v37 = v36 + ((unint64_t)*(unsigned int *)(sub_B25B80((uint64_t)a1, (unsigned int *)&v45) + 8) << 6);
        if (v35 == v37)
        {
LABEL_40:
          unint64_t v41 = sub_B27114((uint64_t)a1, (uint64_t)v53, v44, 0, 1);
          unint64_t v29 = v41 >> 8;
          __int16 v28 = v41;
          if ((_BYTE)v41)
          {
            sub_B27114((uint64_t)a1, (uint64_t)v53, v43, 1, 1);
            *(void *)(v42 + 52) = -1;
            *(_DWORD *)(v42 + 60) = 0x7FFFFFFF;
          }
        }
        else
        {
          while (1)
          {
            int v38 = *(_DWORD *)(v35 + 28);
            if (v38 != 0x7FFFFFFF && v38 <= *(_DWORD *)&v53[28] && *(_DWORD *)(v35 + 32) <= (int)v54)
            {
              unsigned int v40 = *(_DWORD *)(v35 + 36);
              if (v40 <= DWORD1(v54)
                && *(_DWORD *)(v35 + 40) <= DWORD2(v54)
                && (v40 != DWORD1(v54)
                 || v38 != *(_DWORD *)&v53[28]
                 || 10 * v38 - *(_DWORD *)(v35 + 44) <= 10 * *(_DWORD *)&v53[28] - HIDWORD(v54))
                && (*(unsigned __int8 *)(v35 + 48) & ~v55) == 0)
              {
                break;
              }
            }
            v35 += 64;
            if (v35 == v37) {
              goto LABEL_40;
            }
          }
          __int16 v28 = 0;
          LOWORD(v29) = 0;
        }
        __int16 v18 = v28 | v18 | v18 & 0xFF00 | ((_WORD)v29 << 8);
      }
      ++v27;
    }
    while (v27 != v16);
  }
  if ((v18 & 0xFF00) != 0)
  {
    sub_B273D4((uint64_t)a1, v43);
    sub_B273D4((uint64_t)a1, v44);
  }
  return v18 != 0;
}

char *sub_B257BC(uint64_t a1, unsigned int a2, char *a3, unsigned char *a4)
{
  unsigned int v49 = a2;
  uint64_t v7 = sub_B25B80(a1, &v49);
  unsigned int v50 = v49;
  uint64_t v8 = *(void *)(a1 + 88);
  if ((unsigned char *)(v8 + ((unint64_t)*(unsigned int *)(sub_B25B80(a1, &v50) + 8) << 6)) == a4)
  {
    uint64_t v26 = *(void *)(a1 + 112);
    uint64_t v27 = *(void *)(a1 + 88);
    unint64_t v28 = (uint64_t)&a3[-v27] >> 6;
    if ((uint64_t)&a3[-v27] <= -64) {
      uint64_t v29 = -(uint64_t)((63 - v28) >> 6);
    }
    else {
      uint64_t v29 = v28 >> 6;
    }
    char v30 = (void *)(v26 + 8 * v29);
    uint64_t v31 = (uint64_t)&a4[-v27];
    uint64_t v32 = v31 >> 6;
    if (v31 <= -64) {
      unint64_t v33 = -(uint64_t)((unint64_t)(63 - (v31 >> 6)) >> 6);
    }
    else {
      unint64_t v33 = (unint64_t)(v31 >> 6) >> 6;
    }
    unint64_t v34 = (v32 & 0x3F) - (v28 & 0x3F) + 8 * (v26 + 8 * v33 - (void)v30);
    if (v34)
    {
      if ((v28 & 0x3F) != 0)
      {
        if (64 - (v28 & 0x3F) >= v34) {
          uint64_t v35 = (v32 & 0x3F) - (v28 & 0x3F) + 8 * (v26 + 8 * v33 - (void)v30);
        }
        else {
          uint64_t v35 = 64 - (v28 & 0x3F);
        }
        *v30++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - (v28 & 0x3Fu) - v35)) & (-1 << (v28 & 0x3F)));
        v34 -= v35;
      }
      if (v34 >= 0x40) {
        bzero(v30, 8 * (v34 >> 6));
      }
      if ((v34 & 0x3F) != 0) {
        v30[v34 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v34 & 0x3F));
      }
    }
    *(_DWORD *)(v7 + 8) = v28;
  }
  else
  {
    unsigned int v50 = v49;
    uint64_t v9 = *(void *)(a1 + 88);
    if ((char *)(v9 + ((unint64_t)*(unsigned int *)(sub_B25B80(a1, &v50) + 4) << 6)) == a3)
    {
      uint64_t v36 = *(void *)(a1 + 88);
      unint64_t v37 = (uint64_t)&a3[-v36] >> 6;
      if ((uint64_t)&a3[-v36] <= -64) {
        uint64_t v38 = -(uint64_t)((63 - v37) >> 6);
      }
      else {
        uint64_t v38 = v37 >> 6;
      }
      BOOL v39 = (void *)(*(void *)(a1 + 112) + 8 * v38);
      uint64_t v40 = (uint64_t)&a4[-v36];
      uint64_t v41 = v40 >> 6;
      if (v40 <= -64) {
        unint64_t v42 = -(uint64_t)((unint64_t)(63 - (v40 >> 6)) >> 6);
      }
      else {
        unint64_t v42 = (unint64_t)(v40 >> 6) >> 6;
      }
      char v43 = v37 & 0x3F;
      unint64_t v44 = (v41 & 0x3F) - (v37 & 0x3F) + 8 * (8 * v42 - 8 * v38);
      if (v44)
      {
        int v45 = v37 & 0x3F;
        if (v45)
        {
          unint64_t v46 = (64 - v45);
          if (v46 >= v44) {
            unint64_t v47 = v44;
          }
          else {
            unint64_t v47 = v46;
          }
          *v39++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (v46 - v47)) & (-1 << v43));
          v44 -= v47;
        }
        if (v44 >= 0x40) {
          bzero(v39, 8 * (v44 >> 6));
        }
        if ((v44 & 0x3F) != 0) {
          v39[v44 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v44 & 0x3F));
        }
      }
      *(_DWORD *)(v7 + 4) = v41;
      return a4;
    }
    else
    {
      unsigned int v50 = v49;
      uint64_t v10 = *(void *)(a1 + 88);
      uint64_t v11 = (unsigned char *)(v10 + ((unint64_t)*(unsigned int *)(sub_B25B80(a1, &v50) + 8) << 6));
      int64_t v12 = v11 - a4;
      if (v11 != a4) {
        memmove(a3, a4, v11 - a4);
      }
      uint64_t v13 = &a3[v12];
      uint64_t v14 = *(void *)(a1 + 112);
      uint64_t v15 = *(void *)(a1 + 88);
      unint64_t v16 = (uint64_t)&v13[-v15] >> 6;
      if ((uint64_t)&v13[-v15] <= -64) {
        uint64_t v17 = -(uint64_t)((63 - v16) >> 6);
      }
      else {
        uint64_t v17 = v16 >> 6;
      }
      __int16 v18 = (void *)(v14 + 8 * v17);
      unsigned int v50 = v49;
      uint64_t v19 = v15 + ((unint64_t)*(unsigned int *)(sub_B25B80(a1, &v50) + 8) << 6);
      uint64_t v20 = *(void *)(a1 + 88);
      uint64_t v21 = v19 - v20;
      uint64_t v22 = v21 >> 6;
      if (v21 <= -64) {
        unint64_t v23 = -(uint64_t)((unint64_t)(63 - (v21 >> 6)) >> 6);
      }
      else {
        unint64_t v23 = (unint64_t)(v21 >> 6) >> 6;
      }
      unint64_t v24 = (v22 & 0x3F) - (v16 & 0x3F) + 8 * (v14 + 8 * v23 - (void)v18);
      if (v24)
      {
        if ((v16 & 0x3F) != 0)
        {
          if (64 - (v16 & 0x3F) >= v24) {
            unint64_t v25 = v24;
          }
          else {
            unint64_t v25 = 64 - (v16 & 0x3F);
          }
          *v18++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - (v16 & 0x3Fu) - v25)) & (-1 << (v16 & 0x3F)));
          v24 -= v25;
        }
        if (v24 >= 0x40) {
          bzero(v18, 8 * (v24 >> 6));
        }
        if ((v24 & 0x3F) != 0) {
          v18[v24 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v24 & 0x3F));
        }
      }
      *(_DWORD *)(v7 + 8) = (unint64_t)&v13[-v20] >> 6;
    }
  }
  return a3;
}

uint64_t sub_B25B80(uint64_t a1, unsigned int *a2)
{
  unint64_t v4 = sub_B25DE0(a1, a2);
  if (v4 == -1)
  {
    unint64_t v25 = v5;
    if (sub_B261D4(a1, 1))
    {
      *(_DWORD *)unint64_t v34 = *a2;
      *(void *)&v34[4] = 0;
      uint64_t v36 = *(void *)v34;
      int v37 = 0;
      sub_B26508(a1, (unsigned int *)&v36, (uint64_t)v34);
    }
    else
    {
      *(_DWORD *)unint64_t v34 = *a2;
      *(void *)&v34[4] = 0;
      uint64_t v36 = *(void *)v34;
      int v37 = 0;
      sub_B26728(a1, &v36, v25, v34);
    }
    return v35;
  }
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v6 = *(uint64_t **)(a1 + 56);
  unint64_t v8 = v4 / 0x30;
  uint64_t v9 = (uint64_t *)(v7 + 16 * (v4 / 0x30));
  uint64_t v11 = (unsigned __int8 *)v9 + 10;
  uint64_t v10 = *v9;
  int v12 = v4 % 0x30;
  if ((unsigned __int16)(v4 % 0x30) < 9u)
  {
    __int16 v15 = 0;
    goto LABEL_16;
  }
  unsigned __int16 v13 = v12 - 9;
  unsigned __int16 v14 = v4 % 0x30 - 9;
  __int16 v15 = 0;
  uint64_t v16 = v14 >> 3;
  if (v16)
  {
    __int16 v17 = 0;
    uint64_t v18 = v16 + 1;
    uint64_t v19 = (v16 + 1) & 0x3FFE;
    LOWORD(v12) = v12 - 8 * v19;
    uint64_t v20 = &v11[v19];
    uint64_t v21 = (unsigned __int8 *)(v7 + 16 * v8 + 11);
    uint64_t v22 = v19;
    do
    {
      uint64_t v23 = *(v21 - 1);
      int v24 = *v21;
      v21 += 2;
      v15 += byte_20EC2B6[v23];
      v17 += byte_20EC2B6[v24];
      v22 -= 2;
    }
    while (v22);
    v15 += v17;
    if (v18 == v19) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v20 = (unsigned __int8 *)v9 + 10;
  }
  do
  {
    int v27 = *v20++;
    v15 += byte_20EC2B6[v27];
    LOWORD(v12) = v12 - 8;
  }
  while ((unsigned __int16)v12 > 8u);
LABEL_15:
  v11 += (v13 >> 3) + 1;
LABEL_16:
  unsigned __int16 v28 = v15 + byte_20EC2B6[~(-1 << v12) & (unint64_t)*v11];
  int v29 = *((unsigned __int16 *)v9 + 4);
  char v30 = v9 + 2;
  if (v29 != v28 || v30 == v6) {
    return v10 + 12 * v28;
  }
  uint64_t v32 = v7 + 16 * v8 + 32;
  do
  {
    if (*(_WORD *)(v32 - 8)) {
      BOOL v33 = 1;
    }
    else {
      BOOL v33 = v32 == (void)v6;
    }
    v32 += 16;
  }
  while (!v33);
  return *(void *)(v32 - 32);
}

unint64_t sub_B25DE0(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = *(void *)(a1 + 72) - 1;
  uint64_t v4 = *a2;
  unint64_t result = v3 & v4;
  uint64_t v6 = *(void *)(a1 + 48);
  unint64_t v7 = (v3 & v4) / 0x30uLL;
  LODWORD(v8) = (v3 & v4) % 0x30;
  if ((*(unsigned __int8 *)(v6 + 16 * v7 + (v8 >> 3) + 10) >> (v8 & 7)))
  {
    if (*(void *)(a1 + 40))
    {
      uint64_t v9 = 0;
      uint64_t v10 = v6 + 11;
      int v11 = *(_DWORD *)(a1 + 32);
      uint64_t v12 = -1;
      while (1)
      {
        unsigned __int16 v13 = (uint64_t *)(v6 + 16 * v7);
        uint64_t v16 = *v13;
        __int16 v15 = (unsigned __int8 *)v13 + 10;
        uint64_t v14 = v16;
        if ((unsigned __int16)v8 < 9u)
        {
          __int16 v18 = 0;
          uint64_t v21 = v15;
          LOBYTE(v19) = v8;
          goto LABEL_16;
        }
        uint64_t v17 = ((unsigned __int16)(v8 - 9) >> 3) + 1;
        if ((unsigned __int16)(v8 - 9) >= 8u)
        {
          __int16 v22 = 0;
          __int16 v23 = 0;
          unsigned __int16 v19 = v8 - 8 * ((((unsigned __int16)(v8 - 9) >> 3) + 1) & 0x3FFE);
          uint64_t v20 = &v15[(((unsigned __int16)(v8 - 9) >> 3) + 1) & 0x3FFE];
          uint64_t v24 = (((unsigned __int16)(v8 - 9) >> 3) + 1) & 0x3FFE;
          unint64_t v25 = (unsigned __int8 *)(v10 + 16 * v7);
          do
          {
            uint64_t v26 = *(v25 - 1);
            unsigned int v27 = *v25;
            v25 += 2;
            v22 += byte_20EC2B6[v26];
            v23 += byte_20EC2B6[v27];
            v24 -= 2;
          }
          while (v24);
          __int16 v18 = v23 + v22;
          if ((v17 & 0x3FFE) == v17) {
            goto LABEL_15;
          }
        }
        else
        {
          __int16 v18 = 0;
          unsigned __int16 v19 = v8;
          uint64_t v20 = v15;
        }
        do
        {
          unsigned int v28 = *v20++;
          v18 += byte_20EC2B6[v28];
          v19 -= 8;
        }
        while (v19 > 8u);
LABEL_15:
        uint64_t v21 = &v15[v17];
LABEL_16:
        if (v11 == *(_DWORD *)(v14
                              + 12
                              * (unsigned __int16)(v18
                                                 + byte_20EC2B6[~(-1 << v19) & (unint64_t)*v21])))
        {
          if (v12 == -1) {
            uint64_t v12 = result;
          }
          goto LABEL_6;
        }
        if ((unsigned __int16)v8 < 9u)
        {
          __int16 v30 = 0;
          goto LABEL_26;
        }
        uint64_t v29 = ((unsigned __int16)(v8 - 9) >> 3) + 1;
        if ((unsigned __int16)(v8 - 9) >= 8u)
        {
          __int16 v32 = 0;
          __int16 v33 = 0;
          LOWORD(v8) = v8 - 8 * ((((unsigned __int16)(v8 - 9) >> 3) + 1) & 0x3FFE);
          uint64_t v31 = &v15[v29 & 0x3FFE];
          uint64_t v34 = v29 & 0x3FFE;
          uint64_t v35 = (unsigned __int8 *)(v10 + 16 * v7);
          do
          {
            uint64_t v36 = *(v35 - 1);
            unsigned int v37 = *v35;
            v35 += 2;
            v32 += byte_20EC2B6[v36];
            v33 += byte_20EC2B6[v37];
            v34 -= 2;
          }
          while (v34);
          __int16 v30 = v33 + v32;
          if ((v29 & 0x3FFE) == v29) {
            goto LABEL_25;
          }
        }
        else
        {
          __int16 v30 = 0;
          uint64_t v31 = v15;
        }
        do
        {
          unsigned int v38 = *v31++;
          v30 += byte_20EC2B6[v38];
          LOWORD(v8) = v8 - 8;
        }
        while ((unsigned __int16)v8 > 8u);
LABEL_25:
        v15 += v29;
LABEL_26:
        if (v4 == *(_DWORD *)(v14
                                     + 12
                                     * (unsigned __int16)(v30
                                                        + byte_20EC2B6[~(-1 << v8) & (unint64_t)*v15])))
          return result;
LABEL_6:
        unint64_t result = (++v9 + result) & v3;
        unint64_t v7 = result / 0x30;
        unint64_t v8 = result % 0x30;
        if (((*(unsigned __int8 *)(v6 + 16 * (result / 0x30) + (v8 >> 3) + 10) >> (v8 & 7)) & 1) == 0) {
          return -1;
        }
      }
    }
    uint64_t v39 = 0;
    LODWORD(v40) = (v3 & v4) % 0x30;
    while (1)
    {
      uint64_t v41 = (uint64_t *)(v6 + 16 * v7);
      uint64_t v44 = *v41;
      char v43 = (unsigned __int8 *)v41 + 10;
      uint64_t v42 = v44;
      if ((unsigned __int16)v40 >= 9u) {
        break;
      }
      __int16 v46 = 0;
LABEL_39:
      if (v4 == *(_DWORD *)(v42
                                   + 12
                                   * (unsigned __int16)(v46
                                                      + byte_20EC2B6[~(-1 << v40) & (unint64_t)*v43])))
        return result;
      unint64_t result = (++v39 + result) & v3;
      unint64_t v7 = result / 0x30;
      unint64_t v40 = result % 0x30;
      if (((*(unsigned __int8 *)(v6 + 16 * (result / 0x30) + (v40 >> 3) + 10) >> (v40 & 7)) & 1) == 0) {
        return -1;
      }
    }
    uint64_t v45 = ((unsigned __int16)(v40 - 9) >> 3) + 1;
    if ((unsigned __int16)(v40 - 9) >= 8u)
    {
      __int16 v48 = 0;
      __int16 v49 = 0;
      LOWORD(v40) = v40 - 8 * ((((unsigned __int16)(v40 - 9) >> 3) + 1) & 0x3FFE);
      unint64_t v47 = &v43[v45 & 0x3FFE];
      uint64_t v50 = v45 & 0x3FFE;
      uint64_t v51 = (unsigned __int8 *)(v6 + 11 + 16 * v7);
      do
      {
        uint64_t v52 = *(v51 - 1);
        unsigned int v53 = *v51;
        v51 += 2;
        v48 += byte_20EC2B6[v52];
        v49 += byte_20EC2B6[v53];
        v50 -= 2;
      }
      while (v50);
      __int16 v46 = v49 + v48;
      if ((v45 & 0x3FFE) == v45) {
        goto LABEL_38;
      }
    }
    else
    {
      __int16 v46 = 0;
      unint64_t v47 = v43;
    }
    do
    {
      unsigned int v54 = *v47++;
      v46 += byte_20EC2B6[v54];
      LOWORD(v40) = v40 - 8;
    }
    while ((unsigned __int16)v40 > 8u);
LABEL_38:
    v43 += v45;
    goto LABEL_39;
  }
  return -1;
}

uint64_t sub_B261D4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t result = sub_B26A78(a1);
    unint64_t v5 = *(void *)(a1 + 80);
    if (v5 >= ~a2) {
      goto LABEL_32;
    }
  }
  else
  {
    uint64_t result = 0;
    unint64_t v5 = *(void *)(a1 + 80);
    if (v5 >= ~a2) {
      goto LABEL_32;
    }
  }
  unint64_t v6 = *(void *)(a1 + 72);
  unint64_t v7 = v5 + a2;
  if (v6 < 4 || v7 > *(void *)a1)
  {
    float v8 = *(float *)(a1 + 16);
    if (v7 >= vcvts_n_u32_f32(v8, 2uLL))
    {
      unint64_t v9 = 4;
      while ((v9 & 0x8000000000000000) == 0)
      {
        v9 *= 2;
        if (v7 < (unint64_t)(float)(v8 * (float)v9)) {
          goto LABEL_12;
        }
      }
LABEL_32:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_2E18(exception, "resize overflow");
    }
    unint64_t v9 = 4;
LABEL_12:
    if (v9 > v6)
    {
      unint64_t v10 = v5 - *(void *)(a1 + 40) + a2;
      unint64_t v11 = 4;
      if (v6 > 4) {
        goto LABEL_15;
      }
LABEL_14:
      if (v10 >= (unint64_t)(float)(v8 * (float)v11))
      {
LABEL_15:
        while ((v11 & 0x8000000000000000) == 0)
        {
          v11 *= 2;
          if (v11 >= v6) {
            goto LABEL_14;
          }
        }
        goto LABEL_32;
      }
      if (v11 < v9
        && v11 <= 0x7FFFFFFFFFFFFFFELL
        && v10 >= (unint64_t)(float)(*(float *)(a1 + 20) * (float)(2 * v11)))
      {
        v11 *= 2;
      }
      long long v29 = *(_OWORD *)(a1 + 16);
      int v30 = *(_DWORD *)(a1 + 32);
      memset(v31, 0, sizeof(v31));
      long long v32 = 0u;
      uint64x2_t v28 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_f32(*(float32x2_t *)&v29, 0)));
      BYTE8(v29) = 0;
      sub_B1E168((uint64_t)&v28, 0, (void *)a1, v11);
      int v12 = *(_DWORD *)(a1 + 32);
      *(_DWORD *)(a1 + 32) = v30;
      int v30 = v12;
      unsigned __int16 v13 = *(void **)(a1 + 40);
      uint64_t v14 = *(char **)(a1 + 48);
      *(void **)(a1 + 40) = v31[0];
      uint64x2_t v16 = *(uint64x2_t *)a1;
      long long v15 = *(_OWORD *)(a1 + 16);
      long long v17 = v29;
      *(uint64x2_t *)a1 = v28;
      *(_OWORD *)(a1 + 16) = v17;
      uint64x2_t v28 = v16;
      long long v29 = v15;
      long long v18 = *(_OWORD *)&v31[1];
      v31[0] = v13;
      v31[1] = v14;
      unsigned __int16 v19 = v31[3];
      long long v20 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)(a1 + 48) = v18;
      *(void *)(a1 + 64) = v19;
      *(_OWORD *)&v31[2] = v20;
      *(void *)&long long v18 = v32;
      long long v21 = *(_OWORD *)(a1 + 72);
      *(_OWORD *)(a1 + 72) = v32;
      long long v32 = v21;
      *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)(unint64_t)v18)));
      *(unsigned char *)(a1 + 24) = 0;
      uint64x2_t v28 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v29, (float)(unint64_t)v21)));
      BYTE8(v29) = 0;
      if (v14)
      {
        __int16 v22 = (char *)v20;
        __int16 v23 = v14;
        if ((char *)v20 != v14)
        {
          uint64_t v24 = (char *)v20;
          do
          {
            uint64_t v26 = (void *)*((void *)v24 - 2);
            v24 -= 16;
            unint64_t v25 = v26;
            if (v26)
            {
              free(v25);
              *((void *)v22 - 2) = 0;
            }
            __int16 v22 = v24;
          }
          while (v24 != v14);
          __int16 v23 = (char *)v31[1];
        }
        v31[2] = v14;
        free(v23);
      }
      return 1;
    }
  }
  return result;
}

void sub_B264A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    sub_20AE0F0((uint64_t)&a9, a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_B264CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_B264E0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_B264F4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 sub_B26508@<Q0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = sub_B25DE0(a1, a2);
  if (v6 == -1)
  {
    sub_B26728(a1, (uint64_t *)a2, v7, &v33);
    long long v25 = v36;
    *(_OWORD *)(a3 + 32) = v35;
    *(_OWORD *)(a3 + 48) = v25;
    *(void *)(a3 + 64) = v37;
    __n128 result = v34;
    *(_OWORD *)a3 = v33;
    *(__n128 *)(a3 + 16) = result;
    *(unsigned char *)(a3 + 72) = 1;
    return result;
  }
  uint64_t v9 = *(void *)(a1 + 48);
  float v8 = *(uint64_t **)(a1 + 56);
  unint64_t v10 = v6 / 0x30;
  unint64_t v11 = v9 + 16 * (v6 / 0x30);
  int v12 = (unsigned __int8 *)(v11 + 10);
  int v13 = v6 % 0x30;
  if ((unsigned __int16)(v6 % 0x30) < 9u)
  {
    __int16 v15 = 0;
    goto LABEL_13;
  }
  unsigned __int16 v14 = v13 - 9;
  __int16 v15 = 0;
  uint64_t v16 = (unsigned __int16)(v6 % 0x30 - 9) >> 3;
  if ((unsigned __int16)(v6 % 0x30 - 9) >> 3)
  {
    __int16 v17 = 0;
    uint64_t v18 = v16 + 1;
    uint64_t v19 = (v16 + 1) & 0x3FFE;
    LOWORD(v13) = v13 - 8 * v19;
    long long v20 = &v12[v19];
    long long v21 = (unsigned __int8 *)(v9 + 16 * v10 + 11);
    uint64_t v22 = v19;
    do
    {
      uint64_t v23 = *(v21 - 1);
      int v24 = *v21;
      v21 += 2;
      v15 += byte_20EC2B6[v23];
      v17 += byte_20EC2B6[v24];
      v22 -= 2;
    }
    while (v22);
    v15 += v17;
    if (v18 == v19) {
      goto LABEL_12;
    }
  }
  else
  {
    long long v20 = (unsigned __int8 *)(v11 + 10);
  }
  do
  {
    int v27 = *v20++;
    v15 += byte_20EC2B6[v27];
    LOWORD(v13) = v13 - 8;
  }
  while ((unsigned __int16)v13 > 8u);
LABEL_12:
  v12 += (v14 >> 3) + 1;
LABEL_13:
  unsigned __int16 v28 = v15 + byte_20EC2B6[~(-1 << v13) & (unint64_t)*v12];
  uint64_t v29 = *(void *)v11 + 12 * v28;
  if (*(unsigned __int16 *)(v11 + 8) == v28)
  {
    unint64_t v30 = v11 + 16;
    unint64_t v11 = *(void *)(a1 + 56);
    if ((uint64_t *)v30 != v8)
    {
      while (1)
      {
        uint64_t v31 = (uint64_t *)v30;
        if (*(_WORD *)(v30 + 8)) {
          break;
        }
        v30 += 16;
        if (v31 + 2 == v8)
        {
          unint64_t v11 = *(void *)(a1 + 56);
          goto LABEL_19;
        }
      }
      unint64_t v11 = v30;
LABEL_19:
      uint64_t v29 = *v31;
    }
  }
  *(void *)&long long v33 = a1;
  *((void *)&v33 + 1) = v9;
  v34.n128_u64[0] = (unint64_t)v8;
  v34.n128_u64[1] = v11;
  *(void *)&long long v35 = v29;
  *((void *)&v35 + 1) = v9;
  *(void *)&long long v36 = v8;
  *((void *)&v36 + 1) = v8;
  uint64_t v37 = 0;
  sub_AE47A0(&v33);
  long long v32 = v36;
  *(_OWORD *)(a3 + 32) = v35;
  *(_OWORD *)(a3 + 48) = v32;
  *(void *)(a3 + 64) = v37;
  __n128 result = v34;
  *(_OWORD *)a3 = v33;
  *(__n128 *)(a3 + 16) = result;
  *(unsigned char *)(a3 + 72) = 0;
  return result;
}

void *sub_B26728@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 40);
  if ((unint64_t)(*(void *)(a1 + 80) - v5) >= 0x1555555555555555)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2E18(exception, "insert overflow");
  }
  if (!v5)
  {
    unint64_t v8 = a3 / 0x30;
    LODWORD(v10) = a3 % 0x30;
    goto LABEL_17;
  }
  unint64_t v8 = a3 / 0x30;
  uint64_t v9 = *(void *)(a1 + 48);
  unint64_t v10 = a3 % 0x30;
  unint64_t v11 = (uint64_t *)(v9 + 16 * (a3 / 0x30));
  if (((*((unsigned __int8 *)v11 + ((a3 % 0x30) >> 3) + 10) >> ((a3 % 0x30) & 7)) & 1) == 0) {
    goto LABEL_17;
  }
  uint64_t v14 = *v11;
  int v13 = (unsigned __int8 *)v11 + 10;
  uint64_t v12 = v14;
  if ((unsigned __int16)(a3 % 0x30) < 9u)
  {
    __int16 v15 = 0;
    unint64_t v16 = a3 % 0x30;
    goto LABEL_15;
  }
  __int16 v15 = 0;
  unint64_t v16 = (unsigned __int16)(a3 % 0x30 - 9) >> 3;
  if ((unsigned __int16)(a3 % 0x30 - 9) >> 3)
  {
    __int16 v17 = 0;
    unint64_t v18 = v16 + 1;
    uint64_t v19 = (v16 + 1) & 0x3FFE;
    LOWORD(v16) = v10 - 8 * v19;
    long long v20 = &v13[v19];
    long long v21 = (unsigned __int8 *)(v9 + 16 * v8 + 11);
    uint64_t v22 = v19;
    do
    {
      uint64_t v23 = *(v21 - 1);
      int v24 = *v21;
      v21 += 2;
      v15 += byte_20EC2B6[v23];
      v17 += byte_20EC2B6[v24];
      v22 -= 2;
    }
    while (v22);
    v15 += v17;
    if (v18 == v19) {
      goto LABEL_14;
    }
  }
  else
  {
    unint64_t v16 = a3 % 0x30;
    long long v20 = v13;
  }
  do
  {
    int v25 = *v20++;
    v15 += byte_20EC2B6[v25];
    LOWORD(v16) = v16 - 8;
  }
  while ((unsigned __int16)v16 > 8u);
LABEL_14:
  v13 += ((unsigned __int16)(v10 - 9) >> 3) + 1;
LABEL_15:
  if (*(_DWORD *)(a1 + 32) == *(_DWORD *)(v12
                                         + 12
                                         * (unsigned __int16)(v15
                                                            + byte_20EC2B6[~(-1 << v16) & (unint64_t)*v13])))
    *(void *)(a1 + 40) = v5 - 1;
LABEL_17:
  sub_B1E58C((uint64_t *)(a1 + 48), a3, a2);
  uint64_t v27 = *(void *)(a1 + 48);
  uint64_t v26 = *(uint64_t **)(a1 + 56);
  uint64_t v28 = v27 + 16 * v8;
  uint64_t v29 = (unsigned __int8 *)(v28 + 10);
  if ((unsigned __int16)v10 >= 9u)
  {
    uint64_t v30 = ((unsigned __int16)(v10 - 9) >> 3) + 1;
    if ((unsigned __int16)(v10 - 9) >= 8u)
    {
      __int16 v33 = 0;
      __int16 v34 = 0;
      LOWORD(v10) = v10 - 8 * ((((unsigned __int16)(v10 - 9) >> 3) + 1) & 0x3FFE);
      long long v32 = &v29[v30 & 0x3FFE];
      long long v35 = (unsigned __int8 *)(v27 + 16 * v8 + 11);
      uint64_t v36 = v30 & 0x3FFE;
      do
      {
        uint64_t v37 = *(v35 - 1);
        int v38 = *v35;
        v35 += 2;
        v33 += byte_20EC2B6[v37];
        v34 += byte_20EC2B6[v38];
        v36 -= 2;
      }
      while (v36);
      __int16 v31 = v34 + v33;
      if ((v30 & 0x3FFE) == v30) {
        goto LABEL_25;
      }
    }
    else
    {
      __int16 v31 = 0;
      long long v32 = (unsigned __int8 *)(v28 + 10);
    }
    do
    {
      int v39 = *v32++;
      v31 += byte_20EC2B6[v39];
      LOWORD(v10) = v10 - 8;
    }
    while ((unsigned __int16)v10 > 8u);
LABEL_25:
    v29 += v30;
    goto LABEL_26;
  }
  __int16 v31 = 0;
LABEL_26:
  unsigned __int16 v40 = v31 + byte_20EC2B6[~(-1 << v10) & (unint64_t)*v29];
  uint64_t v41 = *(void *)v28 + 12 * v40;
  if (*(unsigned __int16 *)(v28 + 8) == v40)
  {
    uint64_t v42 = v28 + 16;
    uint64_t v28 = *(void *)(a1 + 56);
    if ((uint64_t *)v42 != v26)
    {
      while (1)
      {
        char v43 = (uint64_t *)v42;
        if (*(_WORD *)(v42 + 8)) {
          break;
        }
        v42 += 16;
        if (v43 + 2 == v26)
        {
          uint64_t v28 = *(void *)(a1 + 56);
          goto LABEL_32;
        }
      }
      uint64_t v28 = v42;
LABEL_32:
      uint64_t v41 = *v43;
    }
  }
  *a4 = a1;
  a4[1] = v27;
  a4[2] = v26;
  a4[3] = v28;
  a4[4] = v41;
  a4[5] = v27;
  a4[6] = v26;
  a4[7] = v26;
  a4[8] = 0;

  return sub_AE47A0(a4);
}

void sub_B26A64(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_B26A78(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 80) - *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    BOOL v4 = v2 >= v3;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4 || (unint64_t v5 = *(void *)(a1 + 72), v5 < 0x21))
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    do
    {
      unint64_t v6 = v5;
      v5 >>= 1;
    }
    while (v6 >= 0x42 && v2 < (unint64_t)(float)(*(float *)(a1 + 20) * (float)v5));
    long long v24 = *(_OWORD *)(a1 + 16);
    int v25 = *(_DWORD *)(a1 + 32);
    memset(v26, 0, sizeof(v26));
    long long v27 = 0u;
    uint64x2_t v23 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_f32(*(float32x2_t *)&v24, 0)));
    BYTE8(v24) = 0;
    sub_B1E168((uint64_t)&v23, 0, (void *)a1, v5);
    int v7 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v25;
    int v25 = v7;
    unint64_t v8 = *(void **)(a1 + 40);
    uint64_t v9 = *(char **)(a1 + 48);
    *(void **)(a1 + 40) = v26[0];
    uint64x2_t v11 = *(uint64x2_t *)a1;
    long long v10 = *(_OWORD *)(a1 + 16);
    long long v12 = v24;
    *(uint64x2_t *)a1 = v23;
    *(_OWORD *)(a1 + 16) = v12;
    uint64x2_t v23 = v11;
    long long v24 = v10;
    long long v13 = *(_OWORD *)&v26[1];
    v26[0] = v8;
    v26[1] = v9;
    uint64_t v14 = v26[3];
    long long v15 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 48) = v13;
    *(void *)(a1 + 64) = v14;
    *(_OWORD *)&v26[2] = v15;
    *(void *)&long long v13 = v27;
    long long v16 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)(a1 + 72) = v27;
    long long v27 = v16;
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)(unint64_t)v13)));
    *(unsigned char *)(a1 + 24) = 0;
    uint64x2_t v23 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v24, (float)(unint64_t)v16)));
    BYTE8(v24) = 0;
    if (v9)
    {
      __int16 v17 = (char *)v15;
      unint64_t v18 = v9;
      if ((char *)v15 != v9)
      {
        uint64_t v19 = (char *)v15;
        do
        {
          long long v21 = (void *)*((void *)v19 - 2);
          v19 -= 16;
          long long v20 = v21;
          if (v21)
          {
            free(v20);
            *((void *)v17 - 2) = 0;
          }
          __int16 v17 = v19;
        }
        while (v19 != v9);
        unint64_t v18 = (char *)v26[1];
      }
      v26[2] = v9;
      free(v18);
    }
    uint64_t result = 1;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return result;
}

void sub_B26C48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    sub_20AE0F0((uint64_t)&a9, a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B26C6C(uint64_t a1, unsigned int a2, long long *a3)
{
  unsigned int v57 = a2;
  uint64_t v5 = sub_B25B80(a1, &v57);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 4);
  if (v7
    && (unint64_t v8 = (v7 - 1), ((*(void *)(*(void *)(a1 + 112) + ((v8 >> 3) & 0x1FFFFFF8)) >> v8) & 1) == 0))
  {
    *(_DWORD *)(v5 + 4) = v8;
    __int16 v46 = (_OWORD *)(*(void *)(a1 + 88) + (v8 << 6));
    long long v47 = *a3;
    long long v48 = a3[1];
    long long v49 = a3[3];
    v46[2] = a3[2];
    v46[3] = v49;
    *__int16 v46 = v47;
    v46[1] = v48;
    unint64_t v44 = *(unsigned int *)(v5 + 4);
    *(void *)(*(void *)(a1 + 112) + ((v44 >> 3) & 0x1FFFFFF8)) |= 1 << v44;
    uint64_t v45 = *(void *)(a1 + 88);
  }
  else
  {
    unint64_t v9 = *(unsigned int *)(v5 + 8);
    uint64_t v10 = *(void *)(a1 + 88);
    uint64x2_t v11 = (uint64_t *)(a1 + 88);
    unint64_t v12 = *(void *)(a1 + 96) - v10;
    if ((v9 + 1) >= (unint64_t)((uint64_t)v12 >> 6)
      || ((*(void *)(*(void *)(a1 + 112) + ((v9 >> 3) & 0x1FFFFFF8)) >> v9) & 1) != 0)
    {
      v72[0] = v57;
      sub_B274E0((void *)a1, v72, &v67);
      uint64_t v13 = *(void *)(a1 + 48);
      uint64_t v14 = *(void *)(a1 + 56);
      uint64_t v58 = a1;
      uint64_t v59 = v13;
      uint64_t v60 = v14;
      uint64_t v61 = v14;
      uint64_t v62 = 0;
      uint64_t v63 = v13;
      uint64_t v64 = v14;
      uint64_t v65 = v14;
      uint64_t v66 = 0;
      sub_AE47A0(&v58);
      if (v68 == v59 && v69 == v60 && v70 == v61 && (v70 == v69 || v71 == v62)) {
        int v15 = 0;
      }
      else {
        int v15 = *(_DWORD *)(v71 + 8) - *(_DWORD *)(v71 + 4);
      }
      uint64_t v16 = (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 6;
      v72[0] = v57;
      sub_B274E0((void *)a1, v72, &v67);
      uint64_t v17 = *(void *)(a1 + 48);
      uint64_t v18 = *(void *)(a1 + 56);
      uint64_t v58 = a1;
      uint64_t v59 = v17;
      uint64_t v60 = v18;
      uint64_t v61 = v18;
      uint64_t v62 = 0;
      uint64_t v63 = v17;
      uint64_t v64 = v18;
      uint64_t v65 = v18;
      uint64_t v66 = 0;
      sub_AE47A0(&v58);
      if (v68 == v59 && v69 == v60 && v70 == v61 && (v70 == v69 || v71 == v62)) {
        uint64_t v19 = 2;
      }
      else {
        uint64_t v19 = (2 * (*(_DWORD *)(v71 + 8) - *(_DWORD *)(v71 + 4)) + 2);
      }
      unint64_t v20 = v19 + v16;
      uint64_t v22 = *(void *)(a1 + 88);
      uint64_t v21 = *(void *)(a1 + 96);
      unint64_t v23 = (v21 - v22) >> 6;
      long long v55 = a3;
      if (v20 <= v23)
      {
        if (v20 < v23)
        {
          uint64_t v21 = v22 + (v20 << 6);
          *(void *)(a1 + 96) = v21;
        }
      }
      else
      {
        sub_AAD9B8((void **)(a1 + 88), v20 - v23);
        uint64_t v22 = *(void *)(a1 + 88);
        uint64_t v21 = *(void *)(a1 + 96);
      }
      long long v24 = (uint64_t *)(a1 + 112);
      sub_A3E96C((uint64_t)v24, (v21 - v22) >> 6, 0);
      uint64_t v25 = *(unsigned int *)(v6 + 4);
      uint64_t v26 = *(unsigned int *)(v6 + 8);
      unint64_t v56 = v12;
      unint64_t v27 = (v12 >> 6);
      unsigned int v28 = v25;
      if (v26 != v25)
      {
        memmove((void *)(*v11 + (v27 << 6)), (const void *)(*v11 + (v25 << 6)), *v11 + (v26 << 6) - (*v11 + (v25 << 6)));
        unsigned int v28 = *(_DWORD *)(v6 + 4);
        LODWORD(v25) = *(_DWORD *)(v6 + 8);
      }
      unint64_t v29 = v12 >> 6;
      unint64_t v30 = v15 + (v12 >> 6);
      uint64_t v31 = *v24;
      long long v32 = (void *)(*v24 + 8 * (v28 >> 6));
      uint64_t v33 = v28 & 0x3F;
      unint64_t v34 = (v25 & 0x3F) - v33 + 8 * (*v24 + 8 * (v25 >> 6) - (void)v32);
      if (v34)
      {
        if (v33)
        {
          if ((64 - v33) >= v34) {
            uint64_t v35 = (v25 & 0x3F) - v33 + 8 * (*v24 + 8 * (v25 >> 6) - (void)v32);
          }
          else {
            uint64_t v35 = (64 - v33);
          }
          *v32++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v33 - v35)) & (-1 << v33));
          v34 -= v35;
        }
        if (v34 >= 0x40) {
          bzero(v32, 8 * (v34 >> 6));
        }
        if ((v34 & 0x3F) != 0) {
          v32[v34 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v34 & 0x3F));
        }
      }
      uint64_t v36 = (void *)(v31 + ((v27 >> 3) & 0x1FFFFFF8));
      uint64_t v37 = (v56 >> 6) & 0x3F;
      unint64_t v38 = (v30 & 0x3F) - v37 + 8 * (((v30 >> 3) & 0x1FFFFFF8) - ((v27 >> 3) & 0x1FFFFFF8));
      if (v38)
      {
        if ((v29 & 0x3F) != 0)
        {
          if (64 - (v29 & 0x3F) >= v38) {
            uint64_t v39 = (v30 & 0x3F) - v37 + 8 * (((v30 >> 3) & 0x1FFFFFF8) - ((v27 >> 3) & 0x1FFFFFF8));
          }
          else {
            uint64_t v39 = 64 - (v29 & 0x3F);
          }
          *v36++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - (v29 & 0x3Fu) - v39)) & (-1 << v37);
          v38 -= v39;
        }
        if (v38 >= 0x40) {
          memset(v36, 255, 8 * (v38 >> 6));
        }
        if ((v38 & 0x3F) != 0) {
          v36[v38 >> 6] |= 0xFFFFFFFFFFFFFFFFLL >> -(v38 & 0x3F);
        }
      }
      *(_DWORD *)(v6 + 4) = v29;
      *(_DWORD *)(v6 + 8) = v30;
      unsigned __int16 v40 = (_OWORD *)(*v11 + (v30 << 6));
      long long v41 = *v55;
      long long v42 = v55[1];
      long long v43 = v55[3];
      v40[2] = v55[2];
      uint64_t v40[3] = v43;
      *unsigned __int16 v40 = v41;
      v40[1] = v42;
      unint64_t v44 = *(unsigned int *)(v6 + 8);
      *(void *)(*v24 + ((v44 >> 3) & 0x1FFFFFF8)) |= 1 << v44;
      uint64_t v45 = *v11;
    }
    else
    {
      uint64_t v51 = (_OWORD *)(v10 + (v9 << 6));
      long long v52 = *a3;
      long long v53 = a3[1];
      long long v54 = a3[3];
      v51[2] = a3[2];
      v51[3] = v54;
      *uint64_t v51 = v52;
      v51[1] = v53;
      unint64_t v44 = *(unsigned int *)(v5 + 8);
      *(void *)(*(void *)(a1 + 112) + ((v44 >> 3) & 0x1FFFFFF8)) |= 1 << v44;
      uint64_t v45 = *(void *)(a1 + 88);
    }
    *(_DWORD *)(v6 + 8) = v44 + 1;
  }
  return v45 + (v44 << 6);
}

unint64_t sub_B27114(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int a5)
{
  unsigned int v41 = a3;
  sub_B274E0((void *)a1, &v41, v37);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v28 = a1;
  uint64_t v29 = v10;
  uint64_t v30 = v11;
  uint64_t v31 = v11;
  uint64_t v32 = 0;
  uint64_t v33 = v10;
  uint64_t v34 = v11;
  uint64_t v35 = v11;
  uint64_t v36 = 0;
  sub_AE47A0(&v28);
  if (v37[1] == v29 && v38 == v30 && v39 == v31 && (v39 == v38 || v40 == v32)
    || *(_DWORD *)(v40 + 8) == *(_DWORD *)(v40 + 4))
  {
    unsigned __int8 v12 = 0;
    uint64_t v13 = sub_B26C6C(a1, a3, (long long *)a2);
    if (!a5) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  LODWORD(v37[0]) = a3;
  uint64_t v14 = *(void *)(a1 + 88);
  uint64_t v15 = v14 + ((unint64_t)*(unsigned int *)(sub_B25B80(a1, (unsigned int *)v37) + 4) << 6);
  LODWORD(v37[0]) = a3;
  uint64_t v16 = *(void *)(a1 + 88);
  uint64_t v17 = v16 + ((unint64_t)*(unsigned int *)(sub_B25B80(a1, (unsigned int *)v37) + 8) << 6);
  if (v15 != v17)
  {
    unsigned __int8 v12 = 0;
    int v18 = *(unsigned __int8 *)(a2 + 48);
    while (1)
    {
      int v19 = *(_DWORD *)(v15 + 28);
      if (v19 != 0x7FFFFFFF)
      {
        int v20 = *(_DWORD *)(a2 + 28);
        if (v19 <= v20 && *(_DWORD *)(v15 + 32) <= *(_DWORD *)(a2 + 32))
        {
          unsigned int v21 = *(_DWORD *)(a2 + 36);
          unsigned int v22 = *(_DWORD *)(v15 + 36);
          if (v22 <= v21
            && *(_DWORD *)(v15 + 40) <= *(_DWORD *)(a2 + 40)
            && (v22 != v21 || v19 != v20 || 10 * v19 - *(_DWORD *)(v15 + 44) <= 10 * v20 - *(_DWORD *)(a2 + 44))
            && (*(unsigned __int8 *)(v15 + 48) & ~*(unsigned __int8 *)(a2 + 48)) == 0)
          {
            uint64_t v26 = 0;
            return v26 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v12 << 8);
          }
        }
        if (v20 <= v19 && *(_DWORD *)(a2 + 32) <= *(_DWORD *)(v15 + 32))
        {
          unsigned int v23 = *(_DWORD *)(v15 + 36);
          unsigned int v24 = *(_DWORD *)(a2 + 36);
          if (v24 <= v23
            && *(_DWORD *)(a2 + 40) <= *(_DWORD *)(v15 + 40)
            && (v24 != v23 || v20 != v19 || 10 * v20 - *(_DWORD *)(a2 + 44) <= 10 * v19 - *(_DWORD *)(v15 + 44))
            && (v18 & ~*(unsigned __int8 *)(v15 + 48)) == 0)
          {
            *(_DWORD *)(v15 + 28) = 0x7FFFFFFF;
            unsigned __int8 v12 = 1;
          }
        }
      }
      v15 += 64;
      if (v15 == v17) {
        goto LABEL_29;
      }
    }
  }
  unsigned __int8 v12 = 0;
LABEL_29:
  uint64_t v13 = sub_B26C6C(a1, a3, (long long *)a2);
  if (a5)
  {
LABEL_30:
    *(void *)(v13 + 52) = -1;
    *(_DWORD *)(v13 + 60) = 0x7FFFFFFF;
  }
LABEL_31:
  if (a4)
  {
    int v25 = *(_DWORD *)(a1 + 136);
    *(_DWORD *)(a1 + 136) = v25 + 1;
    *(_DWORD *)(v13 + 24) = v25;
    *(_DWORD *)(v13 + 20) = *(_DWORD *)(a2 + 24);
  }
  uint64_t v26 = 1;
  return v26 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v12 << 8);
}

char *sub_B273D4(uint64_t a1, unsigned int a2)
{
  unsigned int v17 = a2;
  uint64_t v4 = *(void *)(a1 + 88);
  uint64_t v5 = v4 + ((unint64_t)*(unsigned int *)(sub_B25B80(a1, &v17) + 4) << 6);
  unsigned int v18 = a2;
  uint64_t v6 = *(void *)(a1 + 88);
  uint64_t v7 = sub_B25B80(a1, &v18);
  unint64_t v8 = (long long *)(v6 + ((unint64_t)*(unsigned int *)(v7 + 8) << 6));
  if ((long long *)v5 != v8)
  {
    while (*(_DWORD *)(v5 + 28) != 0x7FFFFFFF)
    {
      v5 += 64;
      if ((long long *)v5 == v8)
      {
        uint64_t v5 = v6 + ((unint64_t)*(unsigned int *)(v7 + 8) << 6);
        goto LABEL_11;
      }
    }
    if ((long long *)v5 != v8)
    {
      for (unint64_t i = (long long *)(v5 + 64); i != v8; i += 4)
      {
        if (*((_DWORD *)i + 7) != 0x7FFFFFFF)
        {
          long long v10 = *i;
          long long v11 = i[1];
          long long v12 = i[3];
          *(_OWORD *)(v5 + 32) = i[2];
          *(_OWORD *)(v5 + 48) = v12;
          *(_OWORD *)uint64_t v5 = v10;
          *(_OWORD *)(v5 + 16) = v11;
          v5 += 64;
        }
      }
    }
  }
LABEL_11:
  unsigned int v13 = a2;
  unsigned int v19 = a2;
  uint64_t v14 = *(void *)(a1 + 88);
  uint64_t v15 = sub_B25B80(a1, &v19);
  return sub_B257BC(a1, v13, (char *)v5, (unsigned char *)(v14 + ((unint64_t)*(unsigned int *)(v15 + 8) << 6)));
}

void *sub_B274E0@<X0>(void *a1@<X0>, unsigned int *a2@<X1>, void *a3@<X8>)
{
  if (a1[10] == a1[5] || (unint64_t v5 = sub_B25DE0((uint64_t)a1, a2), v5 == -1))
  {
    uint64_t v23 = 0;
    uint64_t v6 = a1[6];
    uint64_t v7 = (uint64_t *)a1[7];
    *a3 = a1;
    a3[1] = v6;
    a3[2] = v7;
    a3[3] = v7;
    goto LABEL_22;
  }
  uint64_t v6 = a1[6];
  uint64_t v7 = (uint64_t *)a1[7];
  unint64_t v8 = v5 / 0x30;
  uint64_t v9 = v6 + 16 * (v5 / 0x30);
  long long v10 = (unsigned __int8 *)(v9 + 10);
  int v11 = v5 % 0x30;
  if ((unsigned __int16)(v5 % 0x30) < 9u)
  {
    __int16 v13 = 0;
    goto LABEL_14;
  }
  unsigned __int16 v12 = v11 - 9;
  __int16 v13 = 0;
  uint64_t v14 = (unsigned __int16)(v5 % 0x30 - 9) >> 3;
  if ((unsigned __int16)(v5 % 0x30 - 9) >> 3)
  {
    __int16 v15 = 0;
    uint64_t v16 = v14 + 1;
    uint64_t v17 = (v14 + 1) & 0x3FFE;
    LOWORD(v11) = v11 - 8 * v17;
    unsigned int v18 = &v10[v17];
    unsigned int v19 = (unsigned __int8 *)(v6 + 16 * v8 + 11);
    uint64_t v20 = v17;
    do
    {
      uint64_t v21 = *(v19 - 1);
      int v22 = *v19;
      v19 += 2;
      v13 += byte_20EC2B6[v21];
      v15 += byte_20EC2B6[v22];
      v20 -= 2;
    }
    while (v20);
    v13 += v15;
    if (v16 == v17) {
      goto LABEL_13;
    }
  }
  else
  {
    unsigned int v18 = (unsigned __int8 *)(v9 + 10);
  }
  do
  {
    int v24 = *v18++;
    v13 += byte_20EC2B6[v24];
    LOWORD(v11) = v11 - 8;
  }
  while ((unsigned __int16)v11 > 8u);
LABEL_13:
  v10 += (v12 >> 3) + 1;
LABEL_14:
  unsigned __int16 v25 = v13 + byte_20EC2B6[~(-1 << v11) & (unint64_t)*v10];
  uint64_t v23 = *(void *)v9 + 12 * v25;
  if (*(unsigned __int16 *)(v9 + 8) == v25)
  {
    uint64_t v26 = v9 + 16;
    uint64_t v9 = a1[7];
    if ((uint64_t *)v26 != v7)
    {
      while (1)
      {
        unint64_t v27 = (uint64_t *)v26;
        if (*(_WORD *)(v26 + 8)) {
          break;
        }
        v26 += 16;
        if (v27 + 2 == v7)
        {
          uint64_t v9 = a1[7];
          goto LABEL_20;
        }
      }
      uint64_t v9 = v26;
LABEL_20:
      uint64_t v23 = *v27;
    }
  }
  *a3 = a1;
  a3[1] = v6;
  a3[2] = v7;
  a3[3] = v9;
LABEL_22:
  a3[4] = v23;
  a3[5] = v6;
  a3[6] = v7;
  a3[7] = v7;
  a3[8] = 0;

  return sub_AE47A0(a3);
}

uint64_t sub_B276AC(void *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v11 = a2;
  unsigned int v25 = a2;
  sub_B274E0(a1, &v25, v21);
  uint64_t v5 = a1[6];
  uint64_t v6 = a1[7];
  unsigned __int16 v12 = a1;
  uint64_t v13 = v5;
  uint64_t v14 = v6;
  uint64_t v15 = v6;
  uint64_t v16 = 0;
  uint64_t v17 = v5;
  uint64_t v18 = v6;
  uint64_t v19 = v6;
  uint64_t v20 = 0;
  sub_AE47A0(&v12);
  if (v21[1] == v13 && v22 == v14 && v23 == v15 && (v23 == v22 || v24 == v16)
    || *(_DWORD *)(v24 + 8) - *(_DWORD *)(v24 + 4) <= a3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_188D9E0(exception, "key does not exist and cannot be added");
    goto LABEL_11;
  }
  unint64_t v7 = *(_DWORD *)(sub_B25B80((uint64_t)a1, &v11) + 4) + a3;
  uint64_t v8 = a1[11];
  if (v7 >= (a1[12] - v8) >> 6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_188D9E0(exception, "index out of range");
LABEL_11:
  }
  return v8 + (v7 << 6);
}

void sub_B277E4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_B277F8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_B2780C(void *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v31 = a2;
  sub_B274E0(a1, &v31, v28);
  uint64_t v6 = a1[6];
  uint64_t v7 = a1[7];
  uint64_t v20 = a1;
  *(void *)&long long v21 = v6;
  *((void *)&v21 + 1) = v7;
  uint64_t v22 = v7;
  uint64_t v23 = 0;
  uint64_t v24 = v6;
  uint64_t v25 = v7;
  uint64_t v26 = v7;
  uint64_t v27 = 0;
  sub_AE47A0(&v20);
  if (*(_OWORD *)&v28[8] == v21
    && *(void *)&v28[24] == v22
    && (*(void *)&v28[24] == *(void *)&v28[16] || (void)v29 == v23))
  {
    LOBYTE(v10) = 0;
  }
  else
  {
    int v8 = *(_DWORD *)(v29 + 4);
    int v9 = *(_DWORD *)(v29 + 8);
    __int16 v10 = 0;
    int v11 = v9 - v8;
    if (v9 != v8)
    {
      unsigned int v12 = 0;
      do
      {
        uint64_t v13 = (long long *)sub_B276AC(a1, a2, v12);
        long long v14 = v13[3];
        long long v16 = *v13;
        long long v15 = v13[1];
        long long v29 = v13[2];
        long long v30 = v14;
        *(_OWORD *)uint64_t v28 = v16;
        *(_OWORD *)&v28[16] = v15;
        __int16 v17 = sub_B27114((uint64_t)a1, (uint64_t)v28, a3, 0, 1);
        uint64_t v18 = (unsigned __int16)(v17 | v10) & 0xFF00;
        __int16 v10 = v17 | v10 | v18;
        ++v12;
      }
      while (v11 != v12);
      if (v18) {
        sub_B273D4((uint64_t)a1, a3);
      }
    }
  }
  return v10 != 0;
}

unint64_t sub_B27960(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4 = a1;
  unsigned int v384 = a3;
  *(double *)(a1 + 608) = *(double *)(a1 + 608) + 1.0;
  unint64_t v5 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 40) + 88), a3);
  unsigned int v340 = *(_DWORD *)sub_A3F74C((void *)(v4 + 344), &v384);
  unint64_t v349 = v5;
  unint64_t result = (unint64_t)sub_A40514(&v382, *(void *)(v4 + 24), v5);
  uint64_t v7 = v382;
  if ((unint64_t)v382 < v383)
  {
    int v354 = (void *)(v4 + 104);
    uint64_t v8 = v4 + 424;
    int v337 = ~a2;
    int v338 = a2 + 2;
    uint64_t v336 = (uint64_t *)(v4 + 248);
    int v348 = a2 + 1;
    unint64_t v350 = HIDWORD(v5);
    uint64_t v351 = v4;
    uint64_t v353 = v4 + 424;
    do
    {
      *(double *)(v4 + 616) = *(double *)(v4 + 616) + 1.0;
      uint64_t v352 = *(unsigned int *)v7;
      LODWORD(v370) = 0;
      uint64_t v9 = *(void *)(v4 + 192);
      __int16 v10 = (char *)(v9
                   + ((unint64_t)*(unsigned int *)(sub_B25B80((uint64_t)v354, (unsigned int *)&v370) + 4) << 6));
      LODWORD(v370) = 0;
      uint64_t v11 = *(void *)(v4 + 192);
      uint64_t v12 = sub_B25B80((uint64_t)v354, (unsigned int *)&v370);
      sub_B257BC((uint64_t)v354, 0, v10, (unsigned char *)(v11 + ((unint64_t)*(unsigned int *)(v12 + 8) << 6)));
      unint64_t result = sub_A1E9A0((uint64_t)&v370, *(void *)(v4 + 24), v349, v340, 0, 1);
      unint64_t v14 = v373;
      uint64_t v13 = v374;
      while ((unint64_t)v13 >= v14 && (unint64_t)v13 < v375)
      {
        uint64_t v15 = 0;
        unint64_t v16 = __ROR8__(*v13, 32);
        uint64_t v17 = *(void *)(v4 + 32);
        uint64_t v18 = *(void *)(v17 + 72) - 1;
        unint64_t v19 = 0xC4CEB9FE1A85EC53
            * ((0xFF51AFD7ED558CCDLL * (v16 ^ (v16 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v16 ^ (v16 >> 33))) >> 33));
        unint64_t v20 = v19 ^ (v19 >> 33);
        uint64_t v21 = *(void *)(v17 + 48);
        uint64_t v22 = v21 + 11;
        uint64_t v23 = -1;
        for (unint64_t i = v20; ; unint64_t i = v15 + v25)
        {
          uint64_t v25 = i & v18;
          unint64_t v26 = (i & v18) / 0x30;
          unint64_t v27 = v25 - 48 * v26;
          if (((*(unsigned __int8 *)(v21 + 16 * v26 + (v27 >> 3) + 10) >> (v27 & 7)) & 1) == 0)
          {
            if (v23 == -1) {
              unint64_t v63 = v25;
            }
            else {
              unint64_t v63 = v23;
            }
            if (!sub_AD2F40(*(void *)(v4 + 32), 1)) {
              goto LABEL_92;
            }
            goto LABEL_49;
          }
          uint64_t v28 = *(void *)(v21 + 16 * v26);
          if (!*(void *)(v17 + 40)) {
            break;
          }
          long long v29 = (unsigned __int8 *)(v21 + 16 * v26 + 10);
          if ((unsigned __int16)(v25 - 48 * v26) < 9u)
          {
            __int16 v30 = 0;
            LOBYTE(v35) = v25 - 48 * v26;
            goto LABEL_23;
          }
          __int16 v30 = 0;
          uint64_t v31 = (unsigned __int16)(v25 - 48 * v26 - 9) >> 3;
          if ((unsigned __int16)(v25 - 48 * v26 - 9) >> 3)
          {
            __int16 v32 = 0;
            uint64_t v33 = v31 + 1;
            uint64_t v34 = (v31 + 1) & 0x3FFE;
            unsigned __int16 v35 = v27 - 8 * v34;
            uint64_t v36 = &v29[v34];
            uint64_t v37 = (unsigned __int8 *)(v22 + 16 * v26);
            uint64_t v38 = v34;
            do
            {
              uint64_t v39 = *(v37 - 1);
              int v40 = *v37;
              v37 += 2;
              v30 += byte_20EBFB6[v39];
              v32 += byte_20EBFB6[v40];
              v38 -= 2;
            }
            while (v38);
            v30 += v32;
            if (v33 == v34) {
              goto LABEL_22;
            }
          }
          else
          {
            unsigned __int16 v35 = v25 - 48 * v26;
            uint64_t v36 = (unsigned __int8 *)(v21 + 16 * v26 + 10);
          }
          do
          {
            int v41 = *v36++;
            v30 += byte_20EBFB6[v41];
            v35 -= 8;
          }
          while (v35 > 8u);
LABEL_22:
          v29 += ((unsigned __int16)(v27 - 9) >> 3) + 1;
LABEL_23:
          long long v42 = (_DWORD *)(v28
                         + 12
                         * (unsigned __int16)(v30 + byte_20EBFB6[~(-1 << v35) & (unint64_t)*v29]));
          if (*(_DWORD *)(v17 + 36) != v42[1] || *(_DWORD *)(v17 + 32) != *v42) {
            break;
          }
          if (v23 == -1) {
            uint64_t v23 = v25;
          }
LABEL_10:
          ++v15;
        }
        unint64_t v44 = (unsigned __int8 *)(v21 + 16 * v26 + 10);
        if ((unsigned __int16)(v25 - 48 * v26) < 9u)
        {
          __int16 v45 = 0;
          unint64_t v56 = (unsigned __int8 *)(v21 + 16 * v26 + 10);
          LOBYTE(v50) = v25 - 48 * v26;
          goto LABEL_37;
        }
        __int16 v45 = 0;
        uint64_t v46 = (unsigned __int16)(v25 - 48 * v26 - 9) >> 3;
        if (!((unsigned __int16)(v25 - 48 * v26 - 9) >> 3))
        {
          unsigned __int16 v50 = v25 - 48 * v26;
          uint64_t v51 = (unsigned __int8 *)(v21 + 16 * v26 + 10);
          do
          {
LABEL_35:
            int v57 = *v51++;
            v45 += byte_20EBFB6[v57];
            v50 -= 8;
          }
          while (v50 > 8u);
          goto LABEL_36;
        }
        __int16 v47 = 0;
        uint64_t v48 = v46 + 1;
        uint64_t v49 = (v46 + 1) & 0x3FFE;
        unsigned __int16 v50 = v27 - 8 * v49;
        uint64_t v51 = &v44[v49];
        long long v52 = (unsigned __int8 *)(v22 + 16 * v26);
        uint64_t v53 = v49;
        do
        {
          uint64_t v54 = *(v52 - 1);
          int v55 = *v52;
          v52 += 2;
          v45 += byte_20EBFB6[v54];
          v47 += byte_20EBFB6[v55];
          v53 -= 2;
        }
        while (v53);
        v45 += v47;
        if (v48 != v49) {
          goto LABEL_35;
        }
LABEL_36:
        unint64_t v56 = &v44[((unsigned __int16)(v27 - 9) >> 3) + 1];
LABEL_37:
        if (v16 != *(void *)(v28
                              + 12
                              * (unsigned __int16)(v45
                                                 + byte_20EBFB6[~(-1 << v50) & (unint64_t)*v56])))
          goto LABEL_10;
        if (v25 != -1)
        {
          if ((unsigned __int16)(v25 - 48 * v26) < 9u)
          {
            __int16 v60 = 0;
          }
          else
          {
            if ((((_WORD)v25 - 48 * (_WORD)v26 - 8) & 0xFFF8) != 0) {
              __int16 v58 = 8;
            }
            else {
              __int16 v58 = v25 - 48 * v26 - 8;
            }
            unsigned __int16 v59 = ~v58 + v25 - 48 * v26;
            if (v59 < 8u)
            {
              __int16 v60 = 0;
              unsigned __int16 v61 = v27;
              uint64_t v62 = (unsigned __int8 *)(v21 + 16 * v26 + 10);
              goto LABEL_97;
            }
            __int16 v109 = 0;
            __int16 v110 = 0;
            uint64_t v111 = (v59 >> 3) + 1;
            unsigned __int16 v61 = v27 - 8 * (((v59 >> 3) + 1) & 0x3FFE);
            uint64_t v62 = &v44[v111 & 0x3FFE];
            unint64_t v112 = (unsigned __int8 *)(v21 + 16 * v26 + 11);
            uint64_t v113 = v111 & 0x3FFE;
            do
            {
              uint64_t v114 = *(v112 - 1);
              int v115 = *v112;
              v112 += 2;
              v109 += byte_20EBFB6[v114];
              v110 += byte_20EBFB6[v115];
              v113 -= 2;
            }
            while (v113);
            __int16 v60 = v110 + v109;
            if ((v111 & 0x3FFE) != v111)
            {
              do
              {
LABEL_97:
                int v116 = *v62++;
                v60 += byte_20EBFB6[v116];
                v61 -= 8;
              }
              while (v61 > 8u);
            }
            v44 += ((unsigned __int16)(v27 - 9) >> 3) + 1;
            LOBYTE(v27) = v61;
          }
          uint64_t v117 = *(void *)(v17 + 56);
          unsigned __int16 v118 = v60 + byte_20EBFB6[~(-1 << v27) & (unint64_t)*v44];
          uint64_t v119 = v21 + 16 * v26;
          if (*(unsigned __int16 *)(v119 + 8) != v118 || v119 + 16 == v117)
          {
            uint64_t v108 = (_DWORD *)(v28 + 12 * v118);
          }
          else
          {
            uint64_t v121 = v119 + 32;
            do
            {
              if (*(_WORD *)(v121 - 8)) {
                BOOL v122 = 1;
              }
              else {
                BOOL v122 = v121 == v117;
              }
              v121 += 16;
            }
            while (!v122);
            uint64_t v108 = *(_DWORD **)(v121 - 32);
          }
          goto LABEL_111;
        }
        unint64_t v63 = -1;
        if (!sub_AD2F40(*(void *)(v4 + 32), 1))
        {
LABEL_92:
          unint64_t v385 = v16;
          int v386 = -1;
          sub_AD3484(v17, (uint64_t *)&v385, v63, &v387);
          uint64_t v108 = v389;
          goto LABEL_111;
        }
LABEL_49:
        uint64_t v64 = 0;
        unint64_t v385 = v16;
        int v386 = -1;
        uint64_t v65 = *(void *)(v17 + 72) - 1;
        uint64_t v66 = *(void *)(v17 + 48);
        uint64_t v67 = v66 + 11;
        uint64_t v68 = -1;
        while (2)
        {
          uint64_t v69 = v20 & v65;
          unint64_t v70 = (v20 & v65) / 0x30;
          unint64_t v71 = (v20 & v65) % 0x30;
          if (((*(unsigned __int8 *)(v66 + 16 * v70 + (v71 >> 3) + 10) >> (v71 & 7)) & 1) == 0)
          {
            if (v68 == -1) {
              unint64_t v107 = v20 & v65;
            }
            else {
              unint64_t v107 = v68;
            }
            goto LABEL_90;
          }
          uint64_t v72 = *(void *)(v17 + 40);
          uint64_t v73 = *(void *)(v66 + 16 * v70);
          if (!v72) {
            break;
          }
          uint64_t v74 = (unsigned __int8 *)(v66 + 16 * v70 + 10);
          if ((unsigned __int16)((v20 & v65) % 0x30) < 9u)
          {
            __int16 v75 = 0;
            LOBYTE(v76) = (v20 & v65) % 0x30;
            goto LABEL_65;
          }
          __int16 v75 = 0;
          uint64_t v76 = (unsigned __int16)(v69 - 48 * v70 - 9) >> 3;
          if (!((unsigned __int16)(v69 - 48 * v70 - 9) >> 3))
          {
            LODWORD(v76) = (v20 & v65) % 0x30;
            int v80 = (unsigned __int8 *)(v66 + 16 * v70 + 10);
            do
            {
LABEL_63:
              int v85 = *v80++;
              v75 += byte_20EBFB6[v85];
              LOWORD(v76) = v76 - 8;
            }
            while ((unsigned __int16)v76 > 8u);
            goto LABEL_64;
          }
          __int16 v77 = 0;
          uint64_t v78 = v76 + 1;
          uint64_t v79 = (v76 + 1) & 0x3FFE;
          LOWORD(v76) = v71 - 8 * v79;
          int v80 = &v74[v79];
          int v81 = (unsigned __int8 *)(v67 + 16 * v70);
          uint64_t v82 = v79;
          do
          {
            uint64_t v83 = *(v81 - 1);
            int v84 = *v81;
            v81 += 2;
            v75 += byte_20EBFB6[v83];
            v77 += byte_20EBFB6[v84];
            v82 -= 2;
          }
          while (v82);
          v75 += v77;
          if (v78 != v79) {
            goto LABEL_63;
          }
LABEL_64:
          v74 += ((unsigned __int16)(v71 - 9) >> 3) + 1;
LABEL_65:
          uint64_t v86 = (_DWORD *)(v73
                         + 12
                         * (unsigned __int16)(v75 + byte_20EBFB6[~(-1 << v76) & (unint64_t)*v74]));
          if (*(_DWORD *)(v17 + 36) == v86[1] && *(_DWORD *)(v17 + 32) == *v86)
          {
            if (v68 == -1) {
              uint64_t v68 = v69;
            }
LABEL_52:
            unint64_t v20 = ++v64 + v69;
            continue;
          }
          break;
        }
        uint64_t v88 = (unsigned __int8 *)(v66 + 16 * v70 + 10);
        if ((unsigned __int16)v71 < 9u)
        {
          __int16 v89 = 0;
          unsigned __int16 v100 = (unsigned __int8 *)(v66 + 16 * v70 + 10);
          LOBYTE(v94) = v71;
          goto LABEL_79;
        }
        __int16 v89 = 0;
        uint64_t v90 = (unsigned __int16)(v69 - 48 * v70 - 9) >> 3;
        if (!((unsigned __int16)(v69 - 48 * v70 - 9) >> 3))
        {
          unsigned __int16 v94 = v71;
          unsigned __int16 v95 = (unsigned __int8 *)(v66 + 16 * v70 + 10);
          do
          {
LABEL_77:
            int v101 = *v95++;
            v89 += byte_20EBFB6[v101];
            v94 -= 8;
          }
          while (v94 > 8u);
          goto LABEL_78;
        }
        __int16 v91 = 0;
        uint64_t v92 = v90 + 1;
        uint64_t v93 = (v90 + 1) & 0x3FFE;
        unsigned __int16 v94 = v71 - 8 * v93;
        unsigned __int16 v95 = &v88[v93];
        int v96 = (unsigned __int8 *)(v67 + 16 * v70);
        uint64_t v97 = v93;
        do
        {
          uint64_t v98 = *(v96 - 1);
          int v99 = *v96;
          v96 += 2;
          v89 += byte_20EBFB6[v98];
          v91 += byte_20EBFB6[v99];
          v97 -= 2;
        }
        while (v97);
        v89 += v91;
        if (v92 != v93) {
          goto LABEL_77;
        }
LABEL_78:
        unsigned __int16 v100 = &v88[((unsigned __int16)(v71 - 9) >> 3) + 1];
LABEL_79:
        if (v16 != *(void *)(v73
                              + 12
                              * (unsigned __int16)(v89
                                                 + byte_20EBFB6[~(-1 << v94) & (unint64_t)*v100])))
          goto LABEL_52;
        if (v69 == -1)
        {
          unint64_t v107 = -1;
LABEL_90:
          sub_AD3484(v17, (uint64_t *)&v385, v107, &v387);
          uint64_t v108 = v389;
          goto LABEL_111;
        }
        if ((unsigned __int16)v71 < 9u)
        {
          __int16 v104 = 0;
        }
        else
        {
          if ((((_WORD)v69 - 48 * (_WORD)v70 - 8) & 0xFFF8) != 0) {
            __int16 v102 = 8;
          }
          else {
            __int16 v102 = v69 - 48 * v70 - 8;
          }
          unsigned __int16 v103 = ~v102 + v69 - 48 * v70;
          if (v103 < 8u)
          {
            __int16 v104 = 0;
            unsigned __int16 v105 = v71;
            unint64_t v106 = (unsigned __int8 *)(v66 + 16 * v70 + 10);
            goto LABEL_179;
          }
          __int16 v178 = 0;
          __int16 v179 = 0;
          uint64_t v180 = (v103 >> 3) + 1;
          unsigned __int16 v105 = v71 - 8 * (((v103 >> 3) + 1) & 0x3FFE);
          unint64_t v106 = &v88[v180 & 0x3FFE];
          uint64_t v181 = (unsigned __int8 *)(v66 + 16 * v70 + 11);
          uint64_t v182 = v180 & 0x3FFE;
          do
          {
            uint64_t v183 = *(v181 - 1);
            int v184 = *v181;
            v181 += 2;
            v178 += byte_20EBFB6[v183];
            v179 += byte_20EBFB6[v184];
            v182 -= 2;
          }
          while (v182);
          __int16 v104 = v179 + v178;
          if ((v180 & 0x3FFE) != v180)
          {
            do
            {
LABEL_179:
              int v185 = *v106++;
              v104 += byte_20EBFB6[v185];
              v105 -= 8;
            }
            while (v105 > 8u);
          }
          v88 += ((unsigned __int16)(v71 - 9) >> 3) + 1;
          LOBYTE(v71) = v105;
        }
        uint64_t v186 = v66 + 16 * v70;
        int v187 = *(_DWORD ***)(v17 + 56);
        unsigned __int16 v188 = v104 + byte_20EBFB6[~(-1 << v71) & (unint64_t)*v88];
        uint64_t v108 = (_DWORD *)(v73 + 12 * v188);
        if (*(unsigned __int16 *)(v186 + 8) == v188)
        {
          uint64_t v189 = v186 + 16;
          if ((_DWORD **)(v186 + 16) != v187)
          {
            while (1)
            {
              unsigned int v190 = (_DWORD **)v189;
              if (*(_WORD *)(v189 + 8)) {
                break;
              }
              v189 += 16;
              if (v190 + 2 == v187)
              {
                uint64_t v186 = *(void *)(v17 + 56);
                goto LABEL_187;
              }
            }
            uint64_t v186 = v189;
LABEL_187:
            uint64_t v108 = *v190;
            goto LABEL_188;
          }
        }
        else
        {
LABEL_188:
          if ((_DWORD **)v186 != v187 && v72)
          {
            do
            {
              if (*(_DWORD *)(v17 + 36) != v108[1] || *(_DWORD *)(v17 + 32) != *v108) {
                break;
              }
              v108 += 3;
              if (v108 == (_DWORD *)(*(void *)v186 + 12 * *(unsigned __int16 *)(v186 + 8)))
              {
                v186 += 16;
                if ((_DWORD **)v186 != v187)
                {
                  do
                  {
                    if (*(_WORD *)(v186 + 8))
                    {
                      uint64_t v108 = *(_DWORD **)v186;
                      goto LABEL_192;
                    }
                    v186 += 16;
                  }
                  while ((_DWORD **)v186 != v187);
                  uint64_t v108 = *(_DWORD **)(v186 - 16);
                }
                break;
              }
LABEL_192:
              ;
            }
            while ((_DWORD **)v186 != v187);
          }
        }
LABEL_111:
        unsigned int v123 = v108[2];
        if (v123 == -1)
        {
          int v124 = *(_DWORD *)(v17 + 112);
          *(_DWORD *)(v17 + 112) = v124 + 1;
          v108[2] = v124;
          unsigned __int16 v126 = *(unint64_t **)(v17 + 96);
          unint64_t v125 = *(void *)(v17 + 104);
          if ((unint64_t)v126 < v125)
          {
            *unsigned __int16 v126 = v16;
            uint64_t v127 = (uint64_t)(v126 + 1);
            goto LABEL_134;
          }
          unsigned __int16 v128 = (unint64_t **)(v17 + 88);
          uint64_t v129 = *(char **)(v17 + 88);
          uint64_t v130 = ((char *)v126 - v129) >> 3;
          unint64_t v131 = v130 + 1;
          if ((unint64_t)(v130 + 1) >> 61) {
            sub_2E00();
          }
          uint64_t v132 = v125 - (void)v129;
          if (v132 >> 2 > v131) {
            unint64_t v131 = v132 >> 2;
          }
          if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v131 = 0x1FFFFFFFFFFFFFFFLL;
          }
          if (v131)
          {
            if (v131 >> 61) {
              sub_188D718();
            }
            unint64_t v133 = v131;
            uint64_t v134 = (char *)operator new(8 * v131);
            unsigned __int16 v128 = (unint64_t **)(v17 + 88);
            int v135 = (unint64_t *)&v134[8 * v130];
            *int v135 = v16;
            uint64_t v127 = (uint64_t)(v135 + 1);
            if (v126 != (unint64_t *)v129)
            {
LABEL_122:
              unint64_t v136 = (char *)(v126 - 1) - v129;
              if (v136 < 0x58) {
                goto LABEL_409;
              }
              if ((unint64_t)(v129 - v134) < 0x20) {
                goto LABEL_409;
              }
              uint64_t v137 = (v136 >> 3) + 1;
              uint64_t v138 = 8 * (v137 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v139 = &v126[v138 / 0xFFFFFFFFFFFFFFF8];
              int v135 = (unint64_t *)((char *)v135 - v138);
              long long v140 = &v134[8 * v130 - 16];
              uint64_t v141 = v126 - 2;
              uint64_t v142 = v137 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v143 = *(_OWORD *)v141;
                *((_OWORD *)v140 - 1) = *((_OWORD *)v141 - 1);
                *(_OWORD *)long long v140 = v143;
                v140 -= 32;
                v141 -= 4;
                v142 -= 4;
              }
              while (v142);
              unsigned __int16 v126 = v139;
              if (v137 != (v137 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_409:
                do
                {
                  unint64_t v144 = *--v126;
                  *--int v135 = v144;
                }
                while (v126 != (unint64_t *)v129);
              }
              unsigned __int16 v126 = *v128;
            }
          }
          else
          {
            unint64_t v133 = 0;
            uint64_t v134 = 0;
            int v135 = (unint64_t *)(8 * v130);
            *(void *)(8 * v130) = v16;
            uint64_t v127 = 8 * v130 + 8;
            if (v126 != (unint64_t *)v129) {
              goto LABEL_122;
            }
          }
          *(void *)(v17 + 88) = v135;
          *(void *)(v17 + 96) = v127;
          *(void *)(v17 + 104) = &v134[8 * v133];
          uint64_t v4 = v351;
          if (v126) {
            operator delete(v126);
          }
LABEL_134:
          *(void *)(v17 + 96) = v127;
          unsigned int v123 = v108[2];
          uint64_t v8 = v353;
        }
        LODWORD(v385) = v123;
        unint64_t result = sub_BD5C18(v8, v123, v16);
        if ((result & 1) == 0)
        {
          if (!*(unsigned char *)(v4 + 21))
          {
            LODWORD(v387) = 0;
            uint64_t v158 = *(void *)(v4 + 192);
            int v159 = (char *)(v158
                          + ((unint64_t)*(unsigned int *)(sub_B25B80((uint64_t)v354, (unsigned int *)&v387) + 4) << 6));
            LODWORD(v387) = 0;
            uint64_t v160 = *(void *)(v4 + 192);
            uint64_t v161 = sub_B25B80((uint64_t)v354, (unsigned int *)&v387);
            unint64_t result = (unint64_t)sub_B257BC((uint64_t)v354, 0, v159, (unsigned char *)(v160 + ((unint64_t)*(unsigned int *)(v161 + 8) << 6)));
          }
          goto LABEL_257;
        }
        LODWORD(v387) = 0;
        if (*(void *)(v4 + 184) == *(void *)(v4 + 144)) {
          goto LABEL_222;
        }
        unint64_t result = sub_B25DE0((uint64_t)v354, (unsigned int *)&v387);
        if (result == -1) {
          goto LABEL_222;
        }
        uint64_t v145 = *(void *)(v4 + 152);
        uint64_t v146 = v145 + 16 * (result / 0x30);
        uint64_t v147 = (unsigned __int8 *)(v146 + 10);
        int v148 = result % 0x30;
        if ((unsigned __int16)(result % 0x30) < 9u)
        {
          __int16 v149 = 0;
          goto LABEL_152;
        }
        __int16 v149 = 0;
        uint64_t v150 = (unsigned __int16)(result % 0x30 - 9) >> 3;
        if (!((unsigned __int16)(result % 0x30 - 9) >> 3))
        {
          LODWORD(v150) = result % 0x30;
          unsigned __int16 v154 = (unsigned __int8 *)(v146 + 10);
          do
          {
LABEL_150:
            int v162 = *v154++;
            v149 += byte_20EC2B6[v162];
            LOWORD(v150) = v150 - 8;
          }
          while ((unsigned __int16)v150 > 8u);
          goto LABEL_151;
        }
        __int16 v151 = 0;
        uint64_t v152 = v150 + 1;
        uint64_t v153 = (v150 + 1) & 0x3FFE;
        LOWORD(v150) = v148 - 8 * v153;
        unsigned __int16 v154 = &v147[v153];
        unint64_t result = v145 + 16 * (result / 0x30) + 11;
        uint64_t v155 = v153;
        do
        {
          uint64_t v156 = *(unsigned __int8 *)(result - 1);
          int v157 = *(unsigned __int8 *)result;
          result += 2;
          v149 += byte_20EC2B6[v156];
          v151 += byte_20EC2B6[v157];
          v155 -= 2;
        }
        while (v155);
        v149 += v151;
        if (v152 != v153) {
          goto LABEL_150;
        }
LABEL_151:
        v147 += ((unsigned __int16)(v148 - 9) >> 3) + 1;
        LOBYTE(v148) = v150;
LABEL_152:
        uint64_t v163 = *(void *)(v4 + 160);
        unsigned __int16 v164 = v149 + byte_20EC2B6[~(-1 << v148) & (unint64_t)*v147];
        if (*(unsigned __int16 *)(v146 + 8) == v164)
        {
          v146 += 16;
          if (v146 != v163)
          {
            while (1)
            {
              uint64_t v165 = v146;
              if (*(_WORD *)(v146 + 8)) {
                break;
              }
              v146 += 16;
              if (v165 + 16 == v163) {
                goto LABEL_222;
              }
            }
            unsigned int v166 = *(_DWORD **)v146;
            if (v146 != v163)
            {
LABEL_160:
              if (*(void *)(v4 + 144))
              {
                while (*(_DWORD *)(v4 + 136) == *v166)
                {
                  v166 += 3;
                  if (v166 == (_DWORD *)(*(void *)v146 + 12 * *(unsigned __int16 *)(v146 + 8)))
                  {
                    while (1)
                    {
                      v146 += 16;
                      if (v146 == v163) {
                        goto LABEL_222;
                      }
                      if (*(_WORD *)(v146 + 8))
                      {
                        unsigned int v166 = *(_DWORD **)v146;
                        break;
                      }
                    }
                  }
                  if (v146 == v163) {
                    break;
                  }
                }
              }
              if (v146 != v163 && v166[2] != v166[1])
              {
                LODWORD(v387) = 0;
                uint64_t v167 = *(void *)(v4 + 192);
                unsigned int v168 = (_DWORD *)(v167
                                + ((unint64_t)*(unsigned int *)(sub_B25B80((uint64_t)v354, (unsigned int *)&v387)
                                                                     + 4) << 6));
                LODWORD(v387) = 0;
                uint64_t v169 = *(void *)(v4 + 192);
                uint64_t v170 = (_DWORD *)(v169
                                + ((unint64_t)*(unsigned int *)(sub_B25B80((uint64_t)v354, (unsigned int *)&v387)
                                                                     + 8) << 6));
                if (v168 != v170)
                {
                  int v171 = v379;
                  uint64_t v172 = v377;
                  long long v173 = v372;
                  unint64_t v174 = ((unint64_t)v374 - v373) >> 4;
                  do
                  {
                    unsigned int v177 = v168[13];
                    if (v171)
                    {
                      unsigned int v380 = v168[14];
                      int v175 = v168[15];
                      int v381 = v175;
                    }
                    else
                    {
                      int v175 = *(_DWORD *)(v172 + 12 * v177);
                    }
                    uint64_t v176 = (unsigned int *)((char *)v173 + *(unsigned __int16 *)((char *)v173 - *v173 + 6));
                    v168[7] = *(unsigned int *)((char *)&v176[2
                                                            * (*(_DWORD *)(v172 + 12 * v177 + 4) + v174)
                                                            + 1]
                                              + *v176)
                            + v175;
                    v168 += 16;
                  }
                  while (v168 != v170);
                  __int16 v378 = (int *)(v172 + 12 * v177);
                }
                sub_B29900(v354, 0);
                if ((*((unsigned char *)v374 + 15) & 1) != 0
                  && (!v376
                   || (*(_DWORD *)(v376 + 4 * (((unint64_t)v374 - v373) >> 4)) & v352) == 0))
                {
                  int v192 = *(_DWORD *)(v4 + 96);
                  if (*(unsigned char *)(v4 + 20))
                  {
                    int v193 = v192 + v192 * *(_DWORD *)(v4 + 416);
                    int v194 = v385;
                    uint64_t v195 = *(void *)(v4 + 48);
                    if (v195) {
                      goto LABEL_209;
                    }
LABEL_211:
                    int v196 = 2147483646;
                  }
                  else
                  {
                    int v193 = -1;
                    int v194 = v385;
                    uint64_t v195 = *(void *)(v4 + 48);
                    if (!v195) {
                      goto LABEL_211;
                    }
LABEL_209:
                    int v196 = sub_AD7004(v195, v194, *(_DWORD *)(v4 + 100) + v337);
                  }
                  if (sub_B29B98(v354, 0, v338 + v192 + v192 * v194, v192 + v192 * v194, v193, v196)) {
                    sub_A3EF14(v336, &v385);
                  }
                }
                LODWORD(v387) = 0;
                uint64_t v197 = *(void *)(v4 + 192);
                uint64_t v198 = (_DWORD *)(v197
                                + ((unint64_t)*(unsigned int *)(sub_B25B80((uint64_t)v354, (unsigned int *)&v387)
                                                                     + 4) << 6));
                LODWORD(v387) = 0;
                uint64_t v199 = *(void *)(v4 + 192);
                uint64_t v200 = (_DWORD *)(v199
                                + ((unint64_t)*(unsigned int *)(sub_B25B80((uint64_t)v354, (unsigned int *)&v387)
                                                                     + 8) << 6));
                if (v198 != v200)
                {
                  int v201 = v379;
                  uint64_t v202 = v377;
                  int v203 = v372;
                  unint64_t v204 = ((unint64_t)v374 - v373) >> 4;
                  do
                  {
                    unsigned int v207 = v198[13];
                    if (v201)
                    {
                      unsigned int v380 = v198[14];
                      int v205 = v198[15];
                      int v381 = v205;
                    }
                    else
                    {
                      int v205 = *(_DWORD *)(v202 + 12 * v207);
                    }
                    uint64_t v206 = (unsigned int *)((char *)v203 + *(unsigned __int16 *)((char *)v203 - *v203 + 6));
                    v198[7] = *(unsigned int *)((char *)&v206[2
                                                            * (*(_DWORD *)(v202 + 12 * v207 + 4) + v204)
                                                            + 2]
                                              + *v206)
                            + v205;
                    v198 += 16;
                  }
                  while (v198 != v200);
                  __int16 v378 = (int *)(v202 + 12 * v207);
                }
                unint64_t result = (unint64_t)sub_B29900(v354, 0);
              }
            }
          }
        }
        else
        {
          unsigned int v166 = (_DWORD *)(*(void *)v146 + 12 * v164);
          if (v146 != v163) {
            goto LABEL_160;
          }
        }
LABEL_222:
        if ((*((unsigned char *)v374 + 15) & 2) == 0) {
          goto LABEL_257;
        }
        if (!v376)
        {
          if (!v352) {
            goto LABEL_227;
          }
          goto LABEL_257;
        }
        if (*(_DWORD *)(v376 + 4 * (((unint64_t)v374 - v373) >> 4)) != v352) {
          goto LABEL_257;
        }
LABEL_227:
        unsigned int v208 = v348 + *(_DWORD *)(v4 + 96) + *(_DWORD *)(v4 + 96) * v385;
        LODWORD(v387) = v208;
        if (*(void *)(v4 + 184) == *(void *)(v4 + 144)) {
          goto LABEL_257;
        }
        unint64_t result = sub_B25DE0((uint64_t)v354, (unsigned int *)&v387);
        if (result == -1) {
          goto LABEL_257;
        }
        uint64_t v209 = *(void *)(v4 + 152);
        uint64_t v210 = v209 + 16 * (result / 0x30);
        unint64_t v211 = (unsigned __int8 *)(v210 + 10);
        int v212 = result % 0x30;
        if ((unsigned __int16)(result % 0x30) < 9u)
        {
          __int16 v213 = 0;
          goto LABEL_239;
        }
        __int16 v213 = 0;
        uint64_t v214 = (unsigned __int16)(result % 0x30 - 9) >> 3;
        if (!((unsigned __int16)(result % 0x30 - 9) >> 3))
        {
          LODWORD(v214) = result % 0x30;
          unint64_t v218 = (unsigned __int8 *)(v210 + 10);
          do
          {
LABEL_237:
            int v222 = *v218++;
            v213 += byte_20EC2B6[v222];
            LOWORD(v214) = v214 - 8;
          }
          while ((unsigned __int16)v214 > 8u);
          goto LABEL_238;
        }
        __int16 v215 = 0;
        uint64_t v216 = v214 + 1;
        uint64_t v217 = (v214 + 1) & 0x3FFE;
        LOWORD(v214) = v212 - 8 * v217;
        unint64_t v218 = &v211[v217];
        unint64_t result = v209 + 16 * (result / 0x30) + 11;
        uint64_t v219 = v217;
        do
        {
          uint64_t v220 = *(unsigned __int8 *)(result - 1);
          int v221 = *(unsigned __int8 *)result;
          result += 2;
          v213 += byte_20EC2B6[v220];
          v215 += byte_20EC2B6[v221];
          v219 -= 2;
        }
        while (v219);
        v213 += v215;
        if (v216 != v217) {
          goto LABEL_237;
        }
LABEL_238:
        v211 += ((unsigned __int16)(v212 - 9) >> 3) + 1;
        LOBYTE(v212) = v214;
LABEL_239:
        uint64_t v223 = *(void *)(v4 + 160);
        unsigned __int16 v224 = v213 + byte_20EC2B6[~(-1 << v212) & (unint64_t)*v211];
        if (*(unsigned __int16 *)(v210 + 8) == v224)
        {
          v210 += 16;
          if (v210 != v223)
          {
            while (1)
            {
              uint64_t v225 = v210;
              if (*(_WORD *)(v210 + 8)) {
                break;
              }
              v210 += 16;
              if (v225 + 16 == v223) {
                goto LABEL_257;
              }
            }
            uint64_t v226 = *(_DWORD **)v210;
            if (v210 != v223) {
              goto LABEL_247;
            }
          }
          goto LABEL_257;
        }
        uint64_t v226 = (_DWORD *)(*(void *)v210 + 12 * v224);
        if (v210 == v223) {
          goto LABEL_257;
        }
LABEL_247:
        if (*(void *)(v4 + 144))
        {
          do
          {
            if (*(_DWORD *)(v4 + 136) != *v226) {
              break;
            }
            v226 += 3;
            if (v226 == (_DWORD *)(*(void *)v210 + 12 * *(unsigned __int16 *)(v210 + 8)))
            {
              do
              {
                v210 += 16;
                if (v210 == v223) {
                  goto LABEL_257;
                }
              }
              while (!*(_WORD *)(v210 + 8));
              uint64_t v226 = *(_DWORD **)v210;
            }
          }
          while (v210 != v223);
        }
        if (v210 != v223)
        {
          uint64_t v229 = v226 + 1;
          int v228 = v226[1];
          int v227 = v229[1];
          int v230 = v227 - v228;
          if (v227 != v228)
          {
            unsigned int v237 = 0;
            int v339 = v227 - v228;
            unsigned int v347 = v208;
            do
            {
              uint64_t v238 = sub_B276AC(v354, v208, v237);
              signed int v239 = *((_DWORD *)v374 + 2) + *(_DWORD *)(v238 + 28);
              if (v379)
              {
                unint64_t result = sub_A1F39C(*(void *)(v4 + 24), (uint64_t)&v370, v239, 1);
                if ((result & 1) == 0) {
                  goto LABEL_281;
                }
              }
              else
              {
                unint64_t result = sub_A1F8B4((uint64_t)&v370, v239, 1);
                if (!result) {
                  goto LABEL_281;
                }
              }
              uint64_t v344 = *(void *)(v238 + 20);
              int v345 = *(_DWORD *)(v238 + 32);
              unsigned int v346 = *(_DWORD *)(v238 + 40);
              int v342 = *(_DWORD *)(v238 + 36);
              int v343 = *(_DWORD *)(v238 + 44);
              int v341 = *(unsigned __int8 *)(v238 + 48);
              __int16 v368 = *(_WORD *)(v238 + 49);
              int v240 = (void *)(*(void *)(v4 + 24) + 4136);
              char v369 = *(unsigned char *)(v238 + 51);
              if (sub_A10E20(v240, v350))
              {
                int v241 = (int *)sub_A1120C(*(void *)(*v240 + 3944), v349);
              }
              else
              {
                if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                  && __cxa_guard_acquire(&qword_24F7308))
                {
                  sub_518C8(0x3B60u, 0x7FCAu);
                  dword_24F7300 = v327 | 0x40000000;
                  __cxa_guard_release(&qword_24F7308);
                  uint64_t v4 = v351;
                  uint64_t v8 = v353;
                }
                uint64_t v242 = *v240;
                if (dword_24F7300 == v350)
                {
                  unsigned int v243 = *(unsigned int **)(*(void *)(v242 + 3976) + 72);
                  if (!v243)
                  {
                    exception = __cxa_allocate_exception(0x40uLL);
                    uint64_t v387 = (char *)operator new(0x40uLL);
                    long long v388 = xmmword_20B9A90;
                    strcpy(v387, "Realtime stop pattern quad data requested on nullptr buffer");
                    uint64_t v333 = (void *)sub_2F404((uint64_t)exception, (long long *)&v387);
                  }
                  unsigned __int16 v244 = (int *)((char *)v243 + *v243);
                  uint64_t v245 = (unsigned __int16 *)((char *)v244 - *v244);
                  if (*v245 >= 5u && (uint64_t v246 = v245[2]) != 0) {
                    uint64_t v247 = (unsigned int *)((char *)v244 + v246 + *(unsigned int *)((char *)v244 + v246));
                  }
                  else {
                    uint64_t v247 = 0;
                  }
                  int v241 = (int *)sub_A1139C(v247, v349);
                }
                else
                {
                  int v241 = (int *)sub_A11500(v242 + 24, v349, 0, "stop pattern");
                }
              }
              uint64_t v248 = v241;
              uint64_t v249 = *v240;
              unint64_t v250 = (unsigned __int16 *)((char *)v241 - *v241);
              if (*v250 >= 0xFu && (uint64_t v251 = v250[7]) != 0)
              {
                uint64_t v252 = v249 + 3896;
                char v253 = sub_49442C(*(unsigned __int16 *)((char *)v241 + v251));
                if (sub_C25A10(v252, v253)) {
                  goto LABEL_305;
                }
              }
              else
              {
                uint64_t v257 = v249 + 3896;
                char v258 = sub_49442C(0x7FFFu);
                if (sub_C25A10(v257, v258))
                {
LABEL_305:
                  int v256 = 128;
                  if (sub_A10E20(v240, v350)) {
                    goto LABEL_306;
                  }
                  goto LABEL_309;
                }
              }
              long long v254 = (unsigned __int16 *)((char *)v248 - *v248);
              if (*v254 >= 0xBu && (uint64_t v255 = v254[5]) != 0)
              {
                int v256 = sub_A2BF48(*((unsigned char *)v248 + v255));
                if (sub_A10E20(v240, v350)) {
                  goto LABEL_306;
                }
              }
              else
              {
                int v256 = sub_A2BF48(0);
                if (sub_A10E20(v240, v350))
                {
LABEL_306:
                  unint64_t v259 = (int *)sub_A1120C(*(void *)(*v240 + 3944), v349);
                  unsigned int v260 = (unsigned __int16 *)((char *)v259 - *v259);
                  if (*v260 < 0x19u) {
                    goto LABEL_321;
                  }
                  goto LABEL_319;
                }
              }
LABEL_309:
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                && __cxa_guard_acquire(&qword_24F7308))
              {
                sub_518C8(0x3B60u, 0x7FCAu);
                dword_24F7300 = v328 | 0x40000000;
                __cxa_guard_release(&qword_24F7308);
                uint64_t v4 = v351;
                uint64_t v8 = v353;
              }
              uint64_t v261 = *v240;
              if (dword_24F7300 == v350)
              {
                long long v262 = *(unsigned int **)(*(void *)(v261 + 3976) + 72);
                if (!v262)
                {
                  uint64_t v330 = __cxa_allocate_exception(0x40uLL);
                  uint64_t v387 = (char *)operator new(0x40uLL);
                  long long v388 = xmmword_20B9A90;
                  strcpy(v387, "Realtime stop pattern quad data requested on nullptr buffer");
                  int v331 = (void *)sub_2F404((uint64_t)v330, (long long *)&v387);
                }
                long long v263 = (int *)((char *)v262 + *v262);
                long long v264 = (unsigned __int16 *)((char *)v263 - *v263);
                if (*v264 >= 5u && (uint64_t v265 = v264[2]) != 0) {
                  uint64_t v266 = (unsigned int *)((char *)v263 + v265 + *(unsigned int *)((char *)v263 + v265));
                }
                else {
                  uint64_t v266 = 0;
                }
                unint64_t v259 = (int *)sub_A1139C(v266, v349);
                unsigned int v260 = (unsigned __int16 *)((char *)v259 - *v259);
                if (*v260 < 0x19u) {
                  goto LABEL_321;
                }
              }
              else
              {
                unint64_t v259 = (int *)sub_A11500(v261 + 24, v349, 0, "stop pattern");
                unsigned int v260 = (unsigned __int16 *)((char *)v259 - *v259);
                if (*v260 < 0x19u) {
                  goto LABEL_321;
                }
              }
LABEL_319:
              uint64_t v267 = v260[12];
              if (v267)
              {
                unsigned int v268 = *((unsigned __int8 *)v259 + v267);
                goto LABEL_322;
              }
LABEL_321:
              unsigned int v268 = 2;
LABEL_322:
              unsigned int v269 = sub_A2BF38(v268);
              if (v346 <= v269) {
                unsigned int v270 = v269;
              }
              else {
                unsigned int v270 = v346;
              }
              if (sub_A10E20(v240, v350))
              {
                int v271 = (int *)sub_A1120C(*(void *)(*v240 + 3944), v349);
                goto LABEL_334;
              }
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                && __cxa_guard_acquire(&qword_24F7308))
              {
                sub_518C8(0x3B60u, 0x7FCAu);
                dword_24F7300 = v329 | 0x40000000;
                __cxa_guard_release(&qword_24F7308);
                uint64_t v4 = v351;
                uint64_t v8 = v353;
              }
              uint64_t v272 = *v240;
              if (dword_24F7300 != v350)
              {
                int v271 = (int *)sub_A11500(v272 + 24, v349, 0, "stop pattern");
LABEL_334:
                int v278 = (unsigned __int16 *)((char *)v271 - *v271);
                if (*v278 < 0xFu) {
                  goto LABEL_341;
                }
                goto LABEL_338;
              }
              int v273 = *(unsigned int **)(*(void *)(v272 + 3976) + 72);
              if (!v273)
              {
                long long v334 = __cxa_allocate_exception(0x40uLL);
                uint64_t v387 = (char *)operator new(0x40uLL);
                long long v388 = xmmword_20B9A90;
                strcpy(v387, "Realtime stop pattern quad data requested on nullptr buffer");
                int v335 = (void *)sub_2F404((uint64_t)v334, (long long *)&v387);
              }
              int v274 = (int *)((char *)v273 + *v273);
              int v275 = (unsigned __int16 *)((char *)v274 - *v274);
              if (*v275 >= 5u && (uint64_t v276 = v275[2]) != 0) {
                unsigned int v277 = (unsigned int *)((char *)v274 + v276 + *(unsigned int *)((char *)v274 + v276));
              }
              else {
                unsigned int v277 = 0;
              }
              int v271 = (int *)sub_A1139C(v277, v349);
              int v278 = (unsigned __int16 *)((char *)v271 - *v271);
              if (*v278 < 0xFu)
              {
LABEL_341:
                char v280 = 3;
                int v282 = v345;
                goto LABEL_342;
              }
LABEL_338:
              uint64_t v279 = v278[7];
              if (!v279) {
                goto LABEL_341;
              }
              char v280 = 0;
              unsigned int v281 = *(unsigned __int16 *)((char *)v271 + v279);
              int v282 = v345;
              switch(v281)
              {
                case 0u:
                case 1u:
                case 2u:
                case 0xCu:
                  break;
                case 3u:
                  char v280 = 1;
                  break;
                case 4u:
                  char v280 = 2;
                  break;
                case 5u:
                case 6u:
                case 7u:
                  goto LABEL_340;
                case 8u:
                case 9u:
                case 0xAu:
                case 0xBu:
                  goto LABEL_384;
                default:
                  int v282 = v345;
                  if (v281 != 900)
                  {
LABEL_384:
                    uint64_t v320 = ((5243 * (v281 >> 2)) >> 17) - 1;
                    if (v320 > 0xB) {
LABEL_340:
                    }
                      char v280 = 3;
                    else {
                      char v280 = byte_20EC3B6[v320];
                    }
                  }
                  break;
              }
LABEL_342:
              int v283 = (1 << v280) | v341;
              int v284 = v381;
              unint64_t v285 = 0xFFFFFFFF00000000;
              if (v379) {
                unint64_t v285 = (unint64_t)v380 << 32;
              }
              unint64_t v286 = (-1431655765 * (((unint64_t)v378 - v377) >> 2)) | v285;
              if (!v379) {
                int v284 = 0x7FFFFFFF;
              }
              uint64_t v287 = (unsigned int *)((char *)v372 + *(unsigned __int16 *)((char *)v372 - *v372 + 6));
              unsigned __int8 v288 = (char *)v287 + *v287;
              __int16 v289 = &v381;
              if (!v379) {
                __int16 v289 = v378;
              }
              int v290 = *v289;
              unint64_t v291 = ((unint64_t)v374 - v373) >> 4;
              int v292 = *(_DWORD *)&v288[8 * (v378[1] + v291) + 4];
              int v293 = *(_DWORD *)&v288[8 * (v378[1] + v291) + 8] + v290;
              int v294 = 10 * (v290 - *(_DWORD *)(v238 + 28) + v292);
              LODWORD(v355) = v291;
              *(void *)((char *)&v355 + 4) = v286;
              HIDWORD(v355) = v284;
              unsigned int v356 = v384;
              uint64_t v357 = v344;
              int v358 = v293;
              int v359 = v282;
              int v360 = v256 + v342;
              unsigned int v361 = v270;
              int v362 = (v294 & ~(v294 >> 31)) + v343;
              char v363 = v283;
              __int16 v364 = v368;
              char v365 = v369;
              unint64_t v366 = v286;
              int v367 = v284;
              LODWORD(v387) = 0;
              int v230 = v339;
              if (*(void *)(v4 + 184) == *(void *)(v4 + 144)) {
                goto LABEL_280;
              }
              unint64_t v295 = sub_B25DE0((uint64_t)v354, (unsigned int *)&v387);
              if (v295 == -1) {
                goto LABEL_280;
              }
              uint64_t v296 = *(void *)(v4 + 152);
              uint64_t v297 = v296 + 16 * (v295 / 0x30);
              uint64_t v298 = (unsigned __int8 *)(v297 + 10);
              int v299 = v295 % 0x30;
              if ((unsigned __int16)(v295 % 0x30) < 9u)
              {
                __int16 v300 = 0;
                goto LABEL_360;
              }
              __int16 v300 = 0;
              uint64_t v301 = (unsigned __int16)(v295 % 0x30 - 9) >> 3;
              if ((unsigned __int16)(v295 % 0x30 - 9) >> 3)
              {
                __int16 v302 = 0;
                uint64_t v303 = v301 + 1;
                uint64_t v304 = (v301 + 1) & 0x3FFE;
                LOWORD(v301) = v299 - 8 * v304;
                int v305 = &v298[v304];
                int v306 = (unsigned __int8 *)(v296 + 16 * (v295 / 0x30) + 11);
                uint64_t v307 = v304;
                do
                {
                  uint64_t v308 = *(v306 - 1);
                  int v309 = *v306;
                  v306 += 2;
                  v300 += byte_20EC2B6[v308];
                  v302 += byte_20EC2B6[v309];
                  v307 -= 2;
                }
                while (v307);
                v300 += v302;
                if (v303 == v304) {
                  goto LABEL_359;
                }
              }
              else
              {
                LODWORD(v301) = v295 % 0x30;
                int v305 = (unsigned __int8 *)(v297 + 10);
              }
              do
              {
                int v310 = *v305++;
                v300 += byte_20EC2B6[v310];
                LOWORD(v301) = v301 - 8;
              }
              while ((unsigned __int16)v301 > 8u);
LABEL_359:
              v298 += ((unsigned __int16)(v299 - 9) >> 3) + 1;
              LOBYTE(v299) = v301;
LABEL_360:
              uint64_t v311 = *(void *)(v4 + 160);
              unsigned __int16 v312 = v300 + byte_20EC2B6[~(-1 << v299) & (unint64_t)*v298];
              if (*(unsigned __int16 *)(v297 + 8) == v312)
              {
                v297 += 16;
                if (v297 != v311)
                {
                  while (1)
                  {
                    uint64_t v313 = v297;
                    if (*(_WORD *)(v297 + 8)) {
                      break;
                    }
                    v297 += 16;
                    if (v313 + 16 == v311) {
                      goto LABEL_280;
                    }
                  }
                  int v314 = *(_DWORD **)v297;
                  if (v297 != v311)
                  {
LABEL_368:
                    if (*(void *)(v4 + 144))
                    {
                      while (*(_DWORD *)(v4 + 136) == *v314)
                      {
                        v314 += 3;
                        if (v314 == (_DWORD *)(*(void *)v297 + 12 * *(unsigned __int16 *)(v297 + 8)))
                        {
                          while (1)
                          {
                            v297 += 16;
                            if (v297 == v311) {
                              goto LABEL_280;
                            }
                            if (*(_WORD *)(v297 + 8))
                            {
                              int v314 = *(_DWORD **)v297;
                              break;
                            }
                          }
                        }
                        if (v297 == v311) {
                          break;
                        }
                      }
                    }
                    if (v297 != v311 && v314[2] != v314[1])
                    {
                      unint64_t result = sub_B27114((uint64_t)v354, (uint64_t)&v355, 0, 0, 0);
                      if ((result & 0x100) != 0)
                      {
                        LODWORD(v387) = 0;
                        uint64_t v315 = *(void *)(v4 + 192);
                        uint64_t v316 = v315
                             + ((unint64_t)*(unsigned int *)(sub_B25B80((uint64_t)v354, (unsigned int *)&v387) + 4) << 6);
                        LODWORD(v387) = 0;
                        uint64_t v317 = *(void *)(v4 + 192);
                        uint64_t v318 = sub_B25B80((uint64_t)v354, (unsigned int *)&v387);
                        int v319 = (long long *)(v317 + ((unint64_t)*(unsigned int *)(v318 + 8) << 6));
                        if ((long long *)v316 != v319)
                        {
                          while (*(_DWORD *)(v316 + 28) != 0x7FFFFFFF)
                          {
                            v316 += 64;
                            if ((long long *)v316 == v319)
                            {
                              uint64_t v316 = v317 + ((unint64_t)*(unsigned int *)(v318 + 8) << 6);
                              goto LABEL_394;
                            }
                          }
                          if ((long long *)v316 != v319)
                          {
                            for (uint64_t j = (long long *)(v316 + 64); j != v319; j += 4)
                            {
                              if (*((_DWORD *)j + 7) != 0x7FFFFFFF)
                              {
                                long long v322 = *j;
                                long long v323 = j[1];
                                long long v324 = j[3];
                                *(_OWORD *)(v316 + 32) = j[2];
                                *(_OWORD *)(v316 + 48) = v324;
                                *(_OWORD *)uint64_t v316 = v322;
                                *(_OWORD *)(v316 + 16) = v323;
                                v316 += 64;
                              }
                            }
                          }
                        }
LABEL_394:
                        LODWORD(v387) = 0;
                        uint64_t v325 = *(void *)(v4 + 192);
                        uint64_t v326 = sub_B25B80((uint64_t)v354, (unsigned int *)&v387);
                        unint64_t result = (unint64_t)sub_B257BC((uint64_t)v354, 0, (char *)v316, (unsigned char *)(v325+ ((unint64_t)*(unsigned int *)(v326 + 8) << 6)));
                        int v230 = v339;
                      }
                      goto LABEL_281;
                    }
                  }
                }
              }
              else
              {
                int v314 = (_DWORD *)(*(void *)v297 + 12 * v312);
                if (v297 != v311) {
                  goto LABEL_368;
                }
              }
LABEL_280:
              unint64_t result = sub_B26C6C((uint64_t)v354, 0, &v355);
LABEL_281:
              ++v237;
              unsigned int v208 = v347;
            }
            while (v237 != v230);
          }
        }
LABEL_257:
        unint64_t v14 = v373;
        uint64_t v13 = v374 + 2;
        v374 += 2;
        if (*(unsigned char *)(v370 + 16)) {
          BOOL v231 = v371 == 0;
        }
        else {
          BOOL v231 = 0;
        }
        if (v231 && (unint64_t)v13 >= v373 && (unint64_t)v13 < v375)
        {
          do
          {
            unint64_t v234 = __ROR8__(*v13, 32);
            if (HIDWORD(v234) == 1 && (v234 + 3) < 2) {
              break;
            }
            unint64_t result = sub_2AB7E4(**(void **)(v370 + 4120));
            unint64_t v14 = v373;
            uint64_t v13 = v374;
            if (result) {
              break;
            }
            uint64_t v13 = v374 + 2;
            unint64_t v374 = v13;
          }
          while ((unint64_t)v13 >= v373 && (unint64_t)v13 < v375);
        }
      }
      uint64_t v7 = v382 + 4;
      int v382 = v7;
    }
    while ((unint64_t)v7 < v383);
  }
  return result;
}

void sub_B29824(_Unwind_Exception *a1)
{
}

void sub_B2983C(_Unwind_Exception *a1)
{
}

void sub_B29854(_Unwind_Exception *a1)
{
}

void sub_B2986C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 - 153) < 0) {
    operator delete(*(void **)(v1 + 152));
  }
  _Unwind_Resume(exception_object);
}

void sub_B298B8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_B29900(void *a1, unsigned int a2)
{
  v36[0] = a2;
  sub_B274E0(a1, v36, v32);
  uint64_t v4 = a1[6];
  uint64_t v5 = a1[7];
  uint64_t v23 = a1;
  uint64_t v24 = v4;
  uint64_t v25 = v5;
  uint64_t v26 = v5;
  uint64_t v27 = 0;
  uint64_t v28 = v4;
  uint64_t v29 = v5;
  uint64_t v30 = v5;
  uint64_t v31 = 0;
  unint64_t result = (char *)sub_AE47A0(&v23);
  if (v32[1] == v24 && v33 == v25 && v34 == v26 && (v34 == v33 || v35 == v27)) {
    return result;
  }
  int v7 = *(_DWORD *)(v35 + 4);
  int v8 = *(_DWORD *)(v35 + 8);
  unsigned int v9 = v8 - v7;
  if (v8 == v7) {
    return result;
  }
  char v22 = 0;
  unsigned int v10 = 0;
  unsigned int v11 = 1;
LABEL_6:
  while (2)
  {
    if (v11 <= v9) {
      unsigned int v12 = v9;
    }
    else {
      unsigned int v12 = v11;
    }
    unint64_t result = (char *)sub_B276AC(a1, a2, v10++);
    if (*((_DWORD *)result + 7) != 0x7FFFFFFF && v10 < v9)
    {
      unint64_t v14 = result;
      for (unsigned int i = v10; v12 != i; ++i)
      {
        unint64_t result = (char *)sub_B276AC(a1, a2, i);
        int v16 = *((_DWORD *)result + 7);
        if (v16 != 0x7FFFFFFF)
        {
          int v17 = *((_DWORD *)v14 + 7);
          if (v17 > v16
            || *((_DWORD *)v14 + 8) > *((_DWORD *)result + 8)
            || (unsigned int v18 = *((_DWORD *)result + 9), v19 = *((_DWORD *)v14 + 9), v19 > v18)
            || *((_DWORD *)v14 + 10) > *((_DWORD *)result + 10)
            || v19 == v18 && v17 == v16 && 10 * v17 - *((_DWORD *)v14 + 11) > 10 * v16 - *((_DWORD *)result + 11)
            || (v14[48] & ~result[48]) != 0)
          {
            if (v16 <= v17 && *((_DWORD *)result + 8) <= *((_DWORD *)v14 + 8))
            {
              unsigned int v20 = *((_DWORD *)v14 + 9);
              unsigned int v21 = *((_DWORD *)result + 9);
              if (v21 <= v20
                && *((_DWORD *)result + 10) <= *((_DWORD *)v14 + 10)
                && (v21 != v20 || v16 != v17 || 10 * v16 - *((_DWORD *)result + 11) <= 10 * v17 - *((_DWORD *)v14 + 11))
                && (result[48] & ~v14[48]) == 0)
              {
                *((_DWORD *)v14 + 7) = 0x7FFFFFFF;
                if (v10 == v9) {
                  return sub_B273D4((uint64_t)a1, a2);
                }
                char v22 = 1;
                ++v11;
                goto LABEL_6;
              }
            }
          }
          else
          {
            *((_DWORD *)result + 7) = 0x7FFFFFFF;
            char v22 = 1;
          }
        }
      }
    }
    if (v10 != v9)
    {
      ++v11;
      continue;
    }
    break;
  }
  if ((v22 & 1) == 0) {
    return result;
  }
  return sub_B273D4((uint64_t)a1, a2);
}

BOOL sub_B29B98(void *a1, unsigned int a2, unsigned int a3, int a4, int a5, int a6)
{
  v55[0] = a2;
  sub_B274E0(a1, v55, v52);
  uint64_t v11 = a1[6];
  uint64_t v12 = a1[7];
  unint64_t v44 = a1;
  *(void *)&long long v45 = v11;
  *((void *)&v45 + 1) = v12;
  uint64_t v46 = v12;
  uint64_t v47 = 0;
  uint64_t v48 = v11;
  uint64_t v49 = v12;
  uint64_t v50 = v12;
  uint64_t v51 = 0;
  sub_AE47A0(&v44);
  if (*(_OWORD *)&v52[8] == v45
    && *(void *)&v52[24] == v46
    && (*(void *)&v52[24] == *(void *)&v52[16] || (void)v53 == v47))
  {
    goto LABEL_7;
  }
  int v13 = *(_DWORD *)(v53 + 4);
  int v14 = *(_DWORD *)(v53 + 8);
  int v15 = v14 - v13;
  if (v14 == v13) {
    goto LABEL_7;
  }
  if (a6 == 0x7FFFFFFF)
  {
    unsigned int v16 = 0;
    do
      sub_B276AC(a1, a2, v16++);
    while (v15 != v16);
LABEL_7:
    LOBYTE(v17) = 0;
    return v17 != 0;
  }
  __int16 v17 = 0;
  unsigned int v19 = 0;
  unsigned int v43 = a3;
  do
  {
    char v22 = (_OWORD *)sub_B276AC(a1, a2, v19);
    long long v23 = v22[2];
    long long v24 = v22[3];
    long long v25 = v22[1];
    *(_OWORD *)long long v52 = *v22;
    *(_OWORD *)&v52[16] = v25;
    long long v53 = v23;
    long long v54 = v24;
    if (SHIDWORD(v25) <= a6)
    {
      if (a5 == 0xFFFFFFFFLL
        || (LODWORD(v44) = a5,
            uint64_t v26 = a1[11],
            uint64_t v27 = v26 + ((unint64_t)*(unsigned int *)(sub_B25B80((uint64_t)a1, (unsigned int *)&v44) + 4) << 6),
            LODWORD(v44) = a5,
            uint64_t v28 = a1[11],
            uint64_t v29 = v28 + ((unint64_t)*(unsigned int *)(sub_B25B80((uint64_t)a1, (unsigned int *)&v44) + 8) << 6),
            v27 == v29))
      {
LABEL_31:
        LODWORD(v44) = a4;
        uint64_t v33 = a1[11];
        uint64_t v34 = v33 + ((unint64_t)*(unsigned int *)(sub_B25B80((uint64_t)a1, (unsigned int *)&v44) + 4) << 6);
        LODWORD(v44) = a4;
        uint64_t v35 = a1[11];
        uint64_t v36 = v35 + ((unint64_t)*(unsigned int *)(sub_B25B80((uint64_t)a1, (unsigned int *)&v44) + 8) << 6);
        if (v34 == v36)
        {
LABEL_47:
          unint64_t v40 = sub_B27114((uint64_t)a1, (uint64_t)v52, v43, 1, 1);
          unint64_t v20 = v40 >> 8;
          __int16 v21 = v40;
          if ((_BYTE)v40)
          {
            *(void *)(v41 + 52) = -1;
            *(_DWORD *)(v41 + 60) = 0x7FFFFFFF;
          }
          goto LABEL_11;
        }
        while (1)
        {
          int v37 = *(_DWORD *)(v34 + 28);
          if (v37 != 0x7FFFFFFF && v37 <= *(_DWORD *)&v52[28] && *(_DWORD *)(v34 + 32) <= (int)v53)
          {
            unsigned int v39 = *(_DWORD *)(v34 + 36);
            if (v39 <= DWORD1(v53)
              && *(_DWORD *)(v34 + 40) <= DWORD2(v53)
              && (v39 != DWORD1(v53)
               || v37 != *(_DWORD *)&v52[28]
               || 10 * v37 - *(_DWORD *)(v34 + 44) <= 10 * *(_DWORD *)&v52[28] - HIDWORD(v53))
              && (*(unsigned __int8 *)(v34 + 48) & ~v54) == 0)
            {
              break;
            }
          }
          v34 += 64;
          if (v34 == v36) {
            goto LABEL_47;
          }
        }
      }
      else
      {
        while (1)
        {
          int v30 = *(_DWORD *)(v27 + 28);
          if (v30 != 0x7FFFFFFF && v30 <= *(_DWORD *)&v52[28] && *(_DWORD *)(v27 + 32) <= (int)v53)
          {
            unsigned int v32 = *(_DWORD *)(v27 + 36);
            if (v32 <= DWORD1(v53)
              && *(_DWORD *)(v27 + 40) <= DWORD2(v53)
              && (v32 != DWORD1(v53)
               || v30 != *(_DWORD *)&v52[28]
               || 10 * v30 - *(_DWORD *)(v27 + 44) <= 10 * *(_DWORD *)&v52[28] - HIDWORD(v53))
              && (*(unsigned __int8 *)(v27 + 48) & ~v54) == 0)
            {
              break;
            }
          }
          v27 += 64;
          if (v27 == v29) {
            goto LABEL_31;
          }
        }
      }
      LOWORD(v20) = 0;
      __int16 v21 = 0;
LABEL_11:
      __int16 v17 = v21 | v17 | v17 & 0xFF00 | ((_WORD)v20 << 8);
    }
    ++v19;
  }
  while (v19 != v15);
  if ((v17 & 0xFF00) != 0) {
    sub_B273D4((uint64_t)a1, v43);
  }
  return v17 != 0;
}

uint64_t sub_B29F3C(uint64_t a1)
{
  uint64_t v20 = 0;
  long long v19 = 0u;
  memset(v18, 0, sizeof(v18));
  *(_OWORD *)long long __p = 0u;
  memset(v16, 0, sizeof(v16));
  char v22 = 0;
  LOBYTE(v21) = 0;
  sub_C50BD8((char *)__p, &v21);
  if (v22 < 0) {
    operator delete((void *)v21);
  }
  BYTE8(v18[8]) = 0;
  uint64_t v20 = 0;
  long long v19 = 0uLL;
  uint64_t v2 = (void **)(a1 + 136);
  unint64_t v3 = *(void **)(a1 + 136);
  *(_DWORD *)(a1 + 128) = v16[0];
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 144);
    uint64_t v5 = v3;
    if ((void *)v4 != v3)
    {
      do
      {
        v4 -= 296;
        sub_9F5E28(a1 + 152, v4);
      }
      while ((void *)v4 != v3);
      uint64_t v5 = *v2;
    }
    *(void *)(a1 + 144) = v3;
    operator delete(v5);
    *uint64_t v2 = 0;
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
  }
  *(_OWORD *)(a1 + 136) = *(_OWORD *)&v16[1];
  *(void **)(a1 + 152) = v16[3];
  memset(&v16[1], 0, 24);
  uint64_t v6 = (void **)(a1 + 160);
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)uint64_t v6 = *(_OWORD *)__p;
  *(void *)(a1 + 176) = *(void *)&v18[0];
  BYTE7(v18[0]) = 0;
  LOBYTE(__p[0]) = 0;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)((char *)&v18[4] + 8);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)((char *)v18 + 8);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)((char *)&v18[1] + 8);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)((char *)&v18[2] + 8);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)((char *)&v18[3] + 8);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)((char *)&v18[5] + 8);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)((char *)&v18[6] + 8);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)((char *)&v18[7] + 8);
  *(unsigned char *)(a1 + 312) = BYTE8(v18[8]);
  int v7 = *(void **)(a1 + 320);
  if (v7)
  {
    *(void *)(a1 + 328) = v7;
    operator delete(v7);
    *(void *)(a1 + 320) = 0;
    *(void *)(a1 + 328) = 0;
    *(void *)(a1 + 336) = 0;
    int v8 = SBYTE7(v18[0]);
    *(_OWORD *)(a1 + 320) = v19;
    *(void *)(a1 + 336) = v20;
    uint64_t v20 = 0;
    long long v19 = 0uLL;
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)(a1 + 320) = v19;
    *(void *)(a1 + 336) = v20;
    uint64_t v20 = 0;
    long long v19 = 0uLL;
  }
  if (v16[1])
  {
    unsigned int v9 = (char *)v16[2];
    unsigned int v10 = v16[1];
    if (v16[2] != v16[1])
    {
      do
      {
        v9 -= 296;
        sub_9F5E28((uint64_t)&v16[3], (uint64_t)v9);
      }
      while (v9 != v16[1]);
      unsigned int v10 = v16[1];
    }
    v16[2] = v16[1];
    operator delete(v10);
  }
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a1 + 88);
  if (*(void *)(a1 + 384) | *(void *)(a1 + 424))
  {
    for (uint64_t i = *(void *)(a1 + 392); i != *(void *)(a1 + 400); i += 16)
    {
      if (*(void *)i)
      {
        free(*(void **)i);
        *(void *)uint64_t i = 0;
      }
      *(void *)(i + 8) = 0;
    }
    *(void *)(a1 + 424) = 0;
  }
  *(uint64x2_t *)(a1 + 344) = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 360), (float)*(unint64_t *)(a1 + 416))));
  *(unsigned char *)(a1 + 368) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 440) = *(void *)(a1 + 432);
  *(_DWORD *)(a1 + 456) = 0;
  if (*(void *)(a1 + 504) | *(void *)(a1 + 544))
  {
    for (uint64_t j = *(void *)(a1 + 512); j != *(void *)(a1 + 520); j += 16)
    {
      if (*(void *)j)
      {
        free(*(void **)j);
        *(void *)uint64_t j = 0;
      }
      *(void *)(j + 8) = 0;
    }
    *(void *)(a1 + 544) = 0;
  }
  *(uint64x2_t *)(a1 + 464) = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 480), (float)*(unint64_t *)(a1 + 536))));
  *(unsigned char *)(a1 + 488) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 560) = *(void *)(a1 + 552);
  *(_DWORD *)(a1 + 576) = 0;
  *(void *)(a1 + 2016) = 0;
  *(void *)(a1 + 2032) = 0;
  *(void *)(a1 + 2024) = 0;
  int v13 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 1352) = v13;
  *(unsigned char *)(a1 + 1356) = *(unsigned char *)(a1 + 28);
  char v14 = *(unsigned char *)(a1 + 72);
  *(unsigned char *)(a1 + 1357) = v14;
  *(_DWORD *)(a1 + 616) = v13;
  *(unsigned char *)(a1 + 634) = 0;
  *(_DWORD *)(a1 + 636) = 0;
  *(unsigned char *)(a1 + 640) = v14;
  v16[0] = (void *)0x1FFFFFFFELL;
  uint64_t result = sub_AD28B0(a1 + 344, (uint64_t *)v16);
  *(_DWORD *)(a1 + 584) = result;
  return result;
}

void sub_B2A2B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 - 81) < 0) {
    operator delete(*(void **)(v2 - 104));
  }
  sub_20ADF74(v2 - 104, (uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_B2A2E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v18 = 0;
  long long v19 = 0;
  int v15 = 0;
  unsigned int v16 = 0;
  uint64_t v24 = 0;
  long long v25 = 0;
  sub_ACDFB0((uint64_t)&v26, v2, a1 + 344, a1 + 464, (void *)(a1 + 592), &v18, &v15, &v24);
  unint64_t v3 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)v19;
  if (v19 && !atomic_fetch_add((atomic_ullong *volatile)v19 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v26 = *(void *)(a1 + 8);
  uint64_t v28 = v6;
  int v27 = *(_DWORD *)(a1 + 24);
  char v29 = *(unsigned char *)(a1 + 28);
  char v31 = *(unsigned char *)(a1 + 72);
  int v30 = *(_DWORD *)(a1 + 120);
  sub_AD8EF4((uint64_t)&v26, (_OWORD *)(a1 + 88));
  sub_C50C4C(a1 + 160, (uint64_t)&v32, (uint64_t)&__p);
  if (v23 < 0) {
    operator delete(__p);
  }
  unint64_t v7 = *(void *)(a1 + 2016);
  unint64_t v8 = *(void *)(a1 + 304);
  if (v7 > v8) {
    unint64_t v8 = *(void *)(a1 + 2016);
  }
  *(void *)(a1 + 2016) = v8 + v7;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v18);
    sub_188FC78(&v18, (uint64_t)"Primary SPA scanned ", 20);
    unsigned int v9 = (void *)std::ostream::operator<<();
    sub_188FC78(v9, (uint64_t)" stop patterns and obtained ", 28);
    unsigned int v10 = (void *)std::ostream::operator<<();
    sub_188FC78(v10, (uint64_t)" journeys in ", 13);
    uint64_t v11 = (void *)std::ostream::operator<<();
    uint64_t v12 = sub_188FC78(v11, (uint64_t)" ms using ", 10);
    int v13 = (void *)sub_38EC58((uint64_t)v12, &v33);
    sub_188FC78(v13, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v15, 2u);
    if (v17 < 0) {
      operator delete(v15);
    }
    if (v21 < 0) {
      operator delete(v20);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return sub_9FD504((uint64_t)&v26);
}

void sub_B2A628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_9FD504((uint64_t)&a69);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_9FD504((uint64_t)&a69);
  _Unwind_Resume(a1);
}

uint64_t sub_B2A6C8(uint64_t a1, int a2)
{
  int v84 = a2;
  *(_DWORD *)(a1 + 616) = a2;
  long long v3 = *(_OWORD *)(a1 + 104);
  v83[0] = *(_OWORD *)(a1 + 88);
  v83[1] = v3;
  LOBYTE(v83[0]) = 0;
  v82[0] = (uint64_t)v83;
  v82[1] = a1;
  v82[2] = (uint64_t)&v84;
  uint64_t v4 = *(_DWORD **)(a1 + 592);
  LODWORD(v78) = (*(_DWORD *)(a1 + 584) << *v4) | (2 * a2) | 1;
  int v5 = *(_DWORD *)(sub_AF1DB0((uint64_t)(v4 + 2), (unsigned int *)&v78) + 4);
  int v6 = v5;
  unint64_t v8 = (_DWORD *)(a1 + 92);
  unsigned int v7 = *(_DWORD *)(a1 + 92);
  unsigned int v85 = v7;
  if (!*(unsigned char *)(a1 + 49)) {
    goto LABEL_71;
  }
  int v9 = 10 * (v7 - v5);
  if (v9 >= *(_DWORD *)(a1 + 52))
  {
    int v10 = sub_B2BD90(v82, v5);
    LODWORD(v74[0]) = v10;
    unsigned int v7 = v85;
    if (v10 != 0x7FFFFFFF && v10 < (int)v85)
    {
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)&v78);
        sub_188FC78(&v78, (uint64_t)"[", 1);
        uint64_t v12 = (void *)std::ostream::operator<<();
        int v13 = sub_188FC78(v12, (uint64_t)"] Tightening only improved the journey's departure (arrival) from ", 66);
        char v14 = (void *)sub_266E4((uint64_t)v13);
        int v15 = sub_188FC78(v14, (uint64_t)" to ", 4);
        sub_266E4((uint64_t)v15);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 2u);
        if (v77 < 0) {
          operator delete(__p[0]);
        }
        if (v81 < 0) {
          operator delete(v80);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      unsigned int v7 = v74[0];
      unsigned int v85 = v74[0];
    }
    if (!*(unsigned char *)(a1 + 49)) {
      goto LABEL_71;
    }
  }
  if (v9 < *(_DWORD *)(a1 + 52)) {
    goto LABEL_71;
  }
  int v71 = v5;
  sub_725D0((uint64_t)__p);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v78);
    sub_188FC78(&v78, (uint64_t)"[", 1);
    unsigned int v16 = (void *)std::ostream::operator<<();
    sub_188FC78(v16, (uint64_t)"] Journey duration (", 20);
    char v17 = (void *)std::ostream::operator<<();
    sub_188FC78(v17, (uint64_t)" sec) exceeds tightening threshold; performing tightening by time shift", 71);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v74, 2u);
    if (v75 < 0) {
      operator delete(v74[0]);
    }
    if (v81 < 0) {
      operator delete(v80);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  int v18 = *(_DWORD *)(a1 + 60);
  if (v18 > *(_DWORD *)(a1 + 56)) {
    goto LABEL_70;
  }
  while (1)
  {
    *(double *)(a1 + 272) = *(double *)(a1 + 272) + 1.0;
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v78);
      sub_188FC78(&v78, (uint64_t)"[", 1);
      uint64_t v20 = (void *)std::ostream::operator<<();
      sub_188FC78(v20, (uint64_t)"] Examining time shift of ", 26);
      int v21 = v18 % 10;
      char v22 = (void *)std::ostream::operator<<();
      sub_188FC78(v22, (uint64_t)" sec (exponential search)", 25);
      std::stringbuf::str();
      sub_7246C((uint64_t *)v74, 2u);
      if (v75 < 0) {
        operator delete(v74[0]);
      }
      uint64_t v78 = v73;
      *(uint64_t *)((char *)&v78 + *(void *)(v73 - 24)) = v72;
      if (v81 < 0) {
        operator delete(v80);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    else
    {
      int v21 = v18 % 10;
    }
    char v23 = v18 < 0 ? -5 : 5;
    int v24 = v18 / -10 + v5 + (((-103 * (char)(v23 + v21)) >> 15) & 1) + ((-103 * (char)(v23 + v21)) >> 10);
    unsigned int v25 = sub_B2BD90(v82, v24);
    if (*(double *)(a1 + 64) * (double)(int)fabs((double)(int)(10 * (v25 - v85))) >= (double)(int)fabs((double)(10 * (v24 - v5)))) {
      break;
    }
    double v19 = (double)v18 + (double)v18;
    if (v19 >= 0.0)
    {
      if (v19 >= 4.50359963e15) {
        goto LABEL_26;
      }
      uint64_t v26 = (uint64_t)(v19 + v19) + 1;
    }
    else
    {
      if (v19 <= -4.50359963e15) {
        goto LABEL_26;
      }
      uint64_t v26 = (uint64_t)(v19 + v19);
      if (v26 >= 1) {
        --v26;
      }
    }
    double v19 = (double)(v26 >> 1);
LABEL_26:
    int v18 = (int)v19;
    if (*(_DWORD *)(a1 + 56) < (int)v19) {
      goto LABEL_70;
    }
  }
  unsigned int v27 = v25;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v78);
    sub_188FC78(&v78, (uint64_t)"[", 1);
    uint64_t v28 = (void *)std::ostream::operator<<();
    sub_188FC78(v28, (uint64_t)"] Journey duration improved from ", 33);
    char v29 = (void *)std::ostream::operator<<();
    sub_188FC78(v29, (uint64_t)" to ", 4);
    int v30 = (void *)std::ostream::operator<<();
    sub_188FC78(v30, (uint64_t)" sec for time shift of ", 23);
    char v31 = (void *)std::ostream::operator<<();
    sub_188FC78(v31, (uint64_t)" sec", 4);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v74, 2u);
    if (v75 < 0) {
      operator delete(v74[0]);
    }
    uint64_t v78 = v73;
    *(uint64_t *)((char *)&v78 + *(void *)(v73 - 24)) = v72;
    if (v81 < 0) {
      operator delete(v80);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unsigned int v85 = v27;
  if (v24 != v5)
  {
    double v32 = (double)v18 * 0.5;
    if (v32 >= 0.0)
    {
      if (v32 < 4.50359963e15)
      {
        uint64_t v33 = (uint64_t)(v32 + v32) + 1;
        goto LABEL_59;
      }
    }
    else if (v32 > -4.50359963e15)
    {
      uint64_t v33 = (uint64_t)(v32 + v32);
      if (v33 >= 1) {
        --v33;
      }
LABEL_59:
      double v32 = (double)(v33 >> 1);
    }
    double v34 = (double)v18 * 0.25;
    if (v34 >= 0.0)
    {
      if (v34 < 4.50359963e15)
      {
        uint64_t v35 = (uint64_t)(v34 + v34) + 1;
        goto LABEL_67;
      }
    }
    else if (v34 > -4.50359963e15)
    {
      uint64_t v35 = (uint64_t)(v34 + v34);
      if (v35 >= 1) {
        --v35;
      }
LABEL_67:
      double v34 = (double)(v35 >> 1);
    }
    int v36 = (int)v34;
    if (*(_DWORD *)(a1 + 60) > (int)v34)
    {
      int v71 = v24;
      goto LABEL_70;
    }
    int v55 = (int)v32;
    int v71 = v24;
    while (2)
    {
      *(double *)(a1 + 272) = *(double *)(a1 + 272) + 1.0;
      int v57 = v36 + v55;
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)&v78);
        sub_188FC78(&v78, (uint64_t)"[", 1);
        __int16 v58 = (void *)std::ostream::operator<<();
        sub_188FC78(v58, (uint64_t)"] Examining time shift of ", 26);
        int v59 = v57 % 10;
        __int16 v60 = (void *)std::ostream::operator<<();
        sub_188FC78(v60, (uint64_t)" sec (binary refinement search)", 31);
        std::stringbuf::str();
        sub_7246C((uint64_t *)v74, 2u);
        int v61 = v71;
        if (v75 < 0) {
          operator delete(v74[0]);
        }
        uint64_t v78 = v73;
        *(uint64_t *)((char *)&v78 + *(void *)(v73 - 24)) = v72;
        if (v81 < 0) {
          operator delete(v80);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      else
      {
        int v59 = v57 % 10;
        int v61 = v71;
      }
      if (v57 < 0) {
        char v62 = -5;
      }
      else {
        char v62 = 5;
      }
      int v63 = v57 / -10 + v5 + (((-103 * (char)(v62 + v59)) >> 15) & 1) + ((-103 * (char)(v62 + v59)) >> 10);
      unsigned int v64 = sub_B2BD90(v82, v63);
      if (*(double *)(a1 + 64) * (double)(int)fabs((double)(int)(10 * (v85 - v64))) >= (double)(int)fabs((double)(10 * (v61 - v63))))
      {
        v55 += v36;
        double v56 = (double)v36 * 0.5;
        int v71 = v61;
        if (v56 >= 0.0) {
          goto LABEL_114;
        }
      }
      else
      {
        unsigned int v65 = v64;
        if (sub_723EC(2u))
        {
          sub_6BAC((uint64_t)&v78);
          sub_188FC78(&v78, (uint64_t)"[", 1);
          uint64_t v66 = (void *)std::ostream::operator<<();
          sub_188FC78(v66, (uint64_t)"] Journey duration improved from ", 33);
          uint64_t v67 = (void *)std::ostream::operator<<();
          sub_188FC78(v67, (uint64_t)" to ", 4);
          uint64_t v68 = (void *)std::ostream::operator<<();
          sub_188FC78(v68, (uint64_t)" sec for time shift of ", 23);
          uint64_t v69 = (void *)std::ostream::operator<<();
          sub_188FC78(v69, (uint64_t)" sec", 4);
          std::stringbuf::str();
          sub_7246C((uint64_t *)v74, 2u);
          if (v75 < 0) {
            operator delete(v74[0]);
          }
          uint64_t v78 = v73;
          *(uint64_t *)((char *)&v78 + *(void *)(v73 - 24)) = v72;
          if (v81 < 0) {
            operator delete(v80);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        unsigned int v85 = v65;
        double v56 = (double)v36 * 0.5;
        int v71 = v63;
        if (v56 >= 0.0)
        {
LABEL_114:
          if (v56 < 4.50359963e15)
          {
            uint64_t v70 = (uint64_t)(v56 + v56) + 1;
            goto LABEL_94;
          }
          goto LABEL_95;
        }
      }
      if (v56 > -4.50359963e15)
      {
        uint64_t v70 = (uint64_t)(v56 + v56);
        if (v70 >= 1) {
          --v70;
        }
LABEL_94:
        double v56 = (double)(v70 >> 1);
      }
LABEL_95:
      int v36 = (int)v56;
      if (*(_DWORD *)(a1 + 60) > (int)v56) {
        break;
      }
      continue;
    }
  }
LABEL_70:
  *(double *)(a1 + 208) = sub_72688((uint64_t)__p);
  unsigned int v7 = v85;
  unint64_t v8 = (_DWORD *)(a1 + 92);
  int v6 = v71;
LABEL_71:
  if (v7 != *v8)
  {
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v78);
      sub_188FC78(&v78, (uint64_t)"[", 1);
      int v37 = (void *)std::ostream::operator<<();
      uint64_t v38 = sub_188FC78(v37, (uint64_t)"] Shifting ", 11);
      unsigned int v39 = sub_188FC78(v38, (uint64_t)"arrival", 7);
      unint64_t v40 = sub_188FC78(v39, (uint64_t)" time from ", 11);
      uint64_t v41 = (void *)sub_266E4((uint64_t)v40);
      long long v42 = sub_188FC78(v41, (uint64_t)" to ", 4);
      sub_266E4((uint64_t)v42);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 2u);
      if (v77 < 0) {
        operator delete(__p[0]);
      }
      if (v81 < 0) {
        operator delete(v80);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *(void *)(a1 + 280) = 0x3FF0000000000000;
  }
  int v43 = v84;
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_86;
  }
  int v44 = v84 + 1;
  int v45 = *(_DWORD *)(a1 + 24);
  if (v84 + 1 <= (v45 + 1)) {
    int v44 = v45 + 1;
  }
  if (v84 + 1 < (v45 + 1))
  {
    int v46 = v44 - 1;
    int v47 = 2 * v84 + 3;
    int v48 = v84;
    while (1)
    {
      uint64_t v49 = *(_DWORD **)(a1 + 592);
      LODWORD(v78) = (*(_DWORD *)(a1 + 584) << *v49) | v47;
      if (*(_DWORD *)(sub_AF1DB0((uint64_t)(v49 + 2), (unsigned int *)&v78) + 4) != 0x7FFFFFFF) {
        break;
      }
      ++v48;
      v47 += 2;
      if (v46 == v48) {
        goto LABEL_86;
      }
    }
  }
  else
  {
LABEL_86:
    if (*(_DWORD *)(a1 + 24) >= (*(_DWORD *)(a1 + 124) + v43)) {
      int v48 = *(_DWORD *)(a1 + 124) + v43;
    }
    else {
      int v48 = *(_DWORD *)(a1 + 24);
    }
  }
  *(_DWORD *)(a1 + 616) = v48;
  int v50 = *(_DWORD *)(a1 + 120);
  int v51 = v50 / -10;
  int v52 = v50 % 10;
  if (v50 < 0) {
    char v53 = -5;
  }
  else {
    char v53 = 5;
  }
  sub_B2BD90(v82, v51 + v6 + (((-103 * (char)(v53 + v52)) >> 15) & 1) + ((-103 * (char)(v53 + v52)) >> 10));
  return v85;
}

void sub_B2B858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a22 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a29);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_B2B9BC(uint64_t a1, int a2, int a3)
{
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_8;
  }
  int v6 = a2 + 1;
  int v7 = *(_DWORD *)(a1 + 24);
  if (a2 + 1 <= (v7 + 1)) {
    int v6 = v7 + 1;
  }
  if (a2 + 1 < (v7 + 1))
  {
    int v8 = v6 - 1;
    int v9 = 2 * a2 + 3;
    int v10 = a2;
    while (1)
    {
      uint64_t v11 = *(_DWORD **)(a1 + 592);
      LODWORD(v26[0]) = (*(_DWORD *)(a1 + 584) << *v11) | v9;
      if (*(_DWORD *)(sub_AF1DB0((uint64_t)(v11 + 2), (unsigned int *)v26) + 4) != 0x7FFFFFFF) {
        break;
      }
      ++v10;
      v9 += 2;
      if (v8 == v10) {
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    if (*(_DWORD *)(a1 + 24) >= (*(_DWORD *)(a1 + 124) + a2)) {
      int v10 = *(_DWORD *)(a1 + 124) + a2;
    }
    else {
      int v10 = *(_DWORD *)(a1 + 24);
    }
  }
  long long v12 = *(_OWORD *)(a1 + 104);
  v38[0] = *(_OWORD *)(a1 + 88);
  v38[1] = v12;
  DWORD1(v38[0]) = a3;
  *(_DWORD *)(a1 + 1352) = v10;
  sub_B2C04C(a1 + 1336, v38);
  sub_B2C2F0(a1 + 1336, (uint64_t)v30);
  sub_C50C4C(a1 + 160, a1 + 1864, (uint64_t)&__p);
  if (v29 < 0) {
    operator delete(__p);
  }
  unint64_t v13 = *(void *)(a1 + 2008);
  *(void *)(a1 + 304) -= v13;
  unint64_t v14 = *(void *)(a1 + 2032);
  if (v14 <= v13) {
    unint64_t v14 = v13;
  }
  *(void *)(a1 + 2032) = v14;
  sub_A4D564((uint64_t)v26, (uint64_t)v31, (uint64_t)v32, a1 + 136);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v26);
    sub_188FC78(v26, (uint64_t)"[", 1);
    int v15 = (void *)std::ostream::operator<<();
    sub_188FC78(v15, (uint64_t)"] McSPA scanned ", 16);
    unsigned int v16 = (void *)std::ostream::operator<<();
    sub_188FC78(v16, (uint64_t)" stop patterns and obtained ", 28);
    char v17 = (void *)std::ostream::operator<<();
    sub_188FC78(v17, (uint64_t)" journeys in ", 13);
    int v18 = (void *)std::ostream::operator<<();
    double v19 = sub_188FC78(v18, (uint64_t)" ms using ", 10);
    uint64_t v20 = (void *)sub_38EC58((uint64_t)v19, (unint64_t *)(a1 + 2008));
    sub_188FC78(v20, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v24, 2u);
    if (v25 < 0) {
      operator delete(v24);
    }
    if (v27 < 0) {
      operator delete((void *)v26[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (v36)
  {
    int v37 = v36;
    operator delete(v36);
  }
  if (v35 < 0) {
    operator delete(v34);
  }
  int v21 = (char *)v31;
  if (v31)
  {
    char v22 = v32;
    char v23 = v31;
    if (v32 != v31)
    {
      do
      {
        v22 -= 296;
        sub_9F5E28((uint64_t)&v33, (uint64_t)v22);
      }
      while (v22 != v21);
      char v23 = v31;
    }
    double v32 = v21;
    operator delete(v23);
  }
}

void sub_B2BD14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_9F53E0((uint64_t)&a67);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_9F53E0((uint64_t)&a67);
  _Unwind_Resume(a1);
}

uint64_t sub_B2BD90(uint64_t *a1, int a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  *(_DWORD *)(v2 + 4) = a2;
  sub_AD3BC4(v3 + 608, (_OWORD *)v2);
  sub_C50C4C(v3 + 160, v3 + 1184, (uint64_t)&v20);
  if (v21 < 0) {
    operator delete(v20);
  }
  unint64_t v4 = *(void *)(v3 + 1328);
  *(void *)(v3 + 304) -= v4;
  unint64_t v5 = *(void *)(v3 + 2024);
  if (v5 <= v4) {
    unint64_t v5 = v4;
  }
  *(void *)(v3 + 2024) = v5;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v18);
    sub_188FC78(v18, (uint64_t)"[", 1);
    int v6 = (void *)std::ostream::operator<<();
    sub_188FC78(v6, (uint64_t)"] Secondary SPA scanned ", 24);
    int v7 = (void *)std::ostream::operator<<();
    sub_188FC78(v7, (uint64_t)" stop patterns and obtained ", 28);
    int v8 = (void *)std::ostream::operator<<();
    sub_188FC78(v8, (uint64_t)" journeys in ", 13);
    int v9 = (void *)std::ostream::operator<<();
    int v10 = sub_188FC78(v9, (uint64_t)" ms using ", 10);
    uint64_t v11 = (void *)sub_38EC58((uint64_t)v10, (unint64_t *)(v3 + 1328));
    sub_188FC78(v11, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (v17 < 0) {
      operator delete(__p);
    }
    if (v19 < 0) {
      operator delete((void *)v18[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unint64_t v12 = *(unsigned int *)(v3 + 1040);
  uint64_t v13 = *(void *)(v3 + 800);
  unint64_t v14 = (*(void *)(v3 + 808) - v13) >> 2;
  if (v14 <= v12)
  {
    sub_5BBEE0(v3 + 800, v12 - v14 + 1);
    uint64_t v13 = *(void *)(v3 + 800);
  }
  return *(unsigned int *)(v13 + 4 * v12);
}

void sub_B2C000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_B2C04C(uint64_t a1, _OWORD *a2)
{
  sub_725D0((uint64_t)v36);
  long long v4 = a2[1];
  *(_OWORD *)(a1 + 64) = *a2;
  *(_OWORD *)(a1 + 80) = v4;
  sub_B2E884(a1);
  uint64_t v5 = *(void *)(a1 + 32);
  v37[0] = 0x1FFFFFFFELL;
  *(_DWORD *)(a1 + 416) = sub_AD28B0(v5, v37);
  sub_B2EADC(a1);
  if (*(_DWORD *)(a1 + 100) >= 2u)
  {
    uint64_t v6 = 1;
    while (1)
    {
      if (v6)
      {
        char v17 = *(unsigned int **)(a1 + 320);
        int v18 = *(unsigned int **)(a1 + 328);
        if (v17 != v18)
        {
          uint64_t v19 = *(void *)(a1 + 296);
          uint64_t v20 = *(unsigned int **)(a1 + 320);
          do
          {
            unsigned int v21 = *v20++;
            *(void *)(v19 + (((unint64_t)v21 >> 3) & 0x1FFFFFF8)) &= ~(1 << v21);
          }
          while (v20 != v18);
        }
        *(void *)(a1 + 328) = v17;
        sub_B2EC4C(a1, v6);
        sub_B2EF08(a1, v6);
        uint64_t v16 = *(void *)(a1 + 320);
        if (v16 == *(void *)(a1 + 328)) {
          goto LABEL_22;
        }
        uint64_t v15 = *(void *)(a1 + 272);
      }
      else
      {
        int v7 = *(unsigned int **)(a1 + 272);
        int v8 = *(unsigned int **)(a1 + 280);
        if (v7 != v8)
        {
          uint64_t v9 = *(void *)(a1 + 248);
          int v10 = *(unsigned int **)(a1 + 272);
          do
          {
            unsigned int v11 = *v10++;
            *(void *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) &= ~(1 << v11);
          }
          while (v10 != v8);
        }
        *(void *)(a1 + 280) = v7;
        sub_AEDE40((void *)a1);
        sub_725D0((uint64_t)v37);
        unint64_t v12 = *(unsigned int **)(a1 + 392);
        uint64_t v13 = *(unsigned int **)(a1 + 400);
        while (v12 != v13)
        {
          unsigned int v14 = *v12++;
          sub_B30EF4(a1, v6, v14);
        }
        *(double *)(a1 + 560) = sub_72688((uint64_t)v37) + *(double *)(a1 + 560);
        uint64_t v15 = *(void *)(a1 + 272);
        if (v15 == *(void *)(a1 + 280)) {
          goto LABEL_22;
        }
        uint64_t v16 = *(void *)(a1 + 320);
      }
      uint64_t v34 = *(void *)(a1 + 208);
      uint64_t v35 = *(void *)(a1 + 176);
      uint64_t v32 = 8 * (*(void *)(a1 + 232) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v33 = *(void *)(a1 + 192);
      uint64_t v22 = *(void *)(a1 + 288);
      uint64_t v23 = 8 * (*(void *)(a1 + 312) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v24 = *(void *)(a1 + 360);
      uint64_t v25 = *(void *)(a1 + 336);
      uint64_t v30 = *(void *)(a1 + 344);
      uint64_t v31 = 8 * (*(void *)(a1 + 264) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v29 = *(void *)(a1 + 392);
      uint64_t v26 = 8 * (*(void *)(a1 + 384) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v27 = *(void *)(a1 + 408);
      unint64_t v28 = v34
          + 12 * v35
          - v33
          + v32
          + v22
          + v31
          - v15
          + v25
          + v23
          + v24
          - (v16
           + v30)
          + v26
          + v27
          - v29
          + sub_BD6170((void *)(a1 + 424))
          + 680;
      if (*(void *)(a1 + 672) > v28) {
        unint64_t v28 = *(void *)(a1 + 672);
      }
      *(void *)(a1 + 672) = v28;
      if (!sub_B24E80(a1) && ++v6 < (unint64_t)*(unsigned int *)(a1 + 100)) {
        continue;
      }
      goto LABEL_22;
    }
  }
  LODWORD(v6) = 1;
LABEL_22:
  sub_B3050C(a1);
  *(double *)(a1 + 600) = (double)v6;
  *(double *)(a1 + 552) = sub_72688((uint64_t)v36);
}

std::string *sub_B2C2F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0;
  uint64_t v330 = (uint64_t *)(a2 + 8);
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  HIBYTE(v364) = 0;
  LOBYTE(__p[0]) = 0;
  int v328 = (std::string *)(a2 + 32);
  sub_C50BD8((char *)(a2 + 32), (long long *)__p);
  if (SHIBYTE(v364) < 0) {
    operator delete(*(void **)__p);
  }
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  *(unsigned char *)(a2 + 184) = *(unsigned char *)(a1 + 64);
  unsigned int v3 = *(_DWORD *)(a1 + 100);
  if (v3 <= 1) {
    int v4 = 1;
  }
  else {
    int v4 = *(_DWORD *)(a1 + 100);
  }
  int v329 = v4;
  if (v3 >= 2)
  {
    uint64_t v6 = (void *)(a1 + 104);
    __asm { FMOV            V0.2D, #1.0 }
    long long v332 = _Q0;
    int v331 = 1;
    uint64_t v336 = a1 + 104;
    uint64_t v337 = a1;
    while (1)
    {
      __p[0] = 0;
      uint64_t v10 = *(void *)(a1 + 192);
      uint64_t v11 = *(unsigned int *)(sub_B25B80((uint64_t)v6, __p) + 4);
      __p[0] = 0;
      uint64_t v12 = *(void *)(a1 + 192);
      uint64_t v13 = sub_B25B80((uint64_t)v6, __p);
      sub_B257BC((uint64_t)v6, 0, (char *)(v10 + (v11 << 6)), (unsigned char *)(v12 + ((unint64_t)*(unsigned int *)(v13 + 8) << 6)));
      sub_B30DA0(v6, v331 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * *(_DWORD *)(a1 + 416) + 2, 0);
      __p[0] = 0;
      uint64_t v14 = *(void *)(a1 + 192);
      uint64_t v15 = *(unsigned int *)(sub_B25B80((uint64_t)v6, __p) + 4);
      __p[0] = 0;
      uint64_t v16 = *(void *)(a1 + 192);
      int v335 = (unsigned int *)(v14 + (v15 << 6));
      uint64_t v333 = (unsigned int *)(v16 + ((unint64_t)*(unsigned int *)(sub_B25B80((uint64_t)v6, __p) + 8) << 6));
      if (v335 != v333) {
        break;
      }
LABEL_9:
      ++v331;
      uint64_t v6 = (void *)v336;
      if (v331 == v329) {
        goto LABEL_7;
      }
    }
    while (1)
    {
      LOWORD(__p[0]) = 0;
      BYTE2(__p[0]) = 0;
      *(void *)&__p[1] = 0;
      *(void *)&__p[3] = 0x7FFFFFFFFFFFFFFFLL;
      int v364 = 0x7FFFFFFF;
      __int16 v365 = 0;
      unint64_t v366 = 0x8000000080000000;
      __int16 v367 = 0;
      unint64_t v368 = 0x8000000080000000;
      int v369 = 0x7FFFFFFF;
      __int16 v370 = 0;
      unint64_t v371 = 0x8000000080000000;
      __int16 v372 = 0;
      unint64_t v373 = 0x8000000080000000;
      __int16 v374 = 0;
      unint64_t v375 = 0xFFFFFFFF00000000;
      int v376 = -1;
      uint64_t v377 = 0;
      unsigned __int8 v379 = 0;
      uint64_t v380 = 0;
      uint64_t v381 = 0;
      int v378 = 0x7FFFFFFF;
      int v382 = 100;
      int v383 = -1;
      long long v384 = v332;
      long long v385 = v332;
      long long v386 = v332;
      long long v387 = 0u;
      long long v388 = 0u;
      long long v389 = 0u;
      long long v390 = 0u;
      uint64_t v17 = *(void *)(a1 + 24);
      long long v391 = 0u;
      long long v392 = 0u;
      if (!sub_C259C0(v17 + 3896)) {
        goto LABEL_16;
      }
      if (*(void *)(v17 + 3944))
      {
        BOOL v18 = 1;
      }
      else
      {
LABEL_16:
        uint64_t v19 = *(void *)(a1 + 24);
        BOOL v18 = sub_C259D4(v19 + 3896) && *(void *)(v19 + 3960) != 0;
      }
      BYTE1(__p[0]) = v18;
      uint64_t v20 = *(void *)(a1 + 24);
      if (!sub_C259D4(v20 + 3896)) {
        break;
      }
      __p[1] = 2 * (*(void *)(v20 + 3960) != 0);
      if (*v335 != -1) {
        goto LABEL_23;
      }
LABEL_390:
      sub_A29D50((uint64_t)__p);
      unint64_t v303 = *(void *)(a2 + 16);
      if (v303 < *(void *)(a2 + 24))
      {
        sub_9F68D4(*(void *)(a2 + 16), (long long *)__p);
        *(void *)(a2 + 16) = v303 + 296;
        *(void *)(a2 + 16) = v303 + 296;
        uint64_t v304 = (void *)*((void *)&v391 + 1);
        if (!*((void *)&v391 + 1)) {
          goto LABEL_395;
        }
LABEL_394:
        *(void *)&long long v392 = v304;
        operator delete(v304);
        goto LABEL_395;
      }
      *(void *)(a2 + 16) = sub_A4D268(v330, (long long *)__p);
      uint64_t v304 = (void *)*((void *)&v391 + 1);
      if (*((void *)&v391 + 1)) {
        goto LABEL_394;
      }
LABEL_395:
      if ((void)v390)
      {
        *((void *)&v390 + 1) = v390;
        operator delete((void *)v390);
      }
      if (*((void *)&v388 + 1))
      {
        *(void *)&long long v389 = *((void *)&v388 + 1);
        operator delete(*((void **)&v388 + 1));
      }
      int v305 = (void **)v387;
      if ((void)v387)
      {
        uint64_t v306 = *((void *)&v387 + 1);
        uint64_t v307 = (void *)v387;
        if (*((void *)&v387 + 1) != (void)v387)
        {
          do
          {
            int v309 = *(void **)(v306 - 40);
            if (v309)
            {
              *(void *)(v306 - 32) = v309;
              operator delete(v309);
            }
            int v310 = (void **)(v306 - 72);
            uint64_t v311 = *(void *)(v306 - 72);
            if (v311)
            {
              uint64_t v312 = *(void *)(v306 - 64);
              uint64_t v308 = *(void **)(v306 - 72);
              if (v312 != v311)
              {
                do
                {
                  if (!*(_DWORD *)(v312 - 8))
                  {
                    uint64_t v313 = *(void **)(v312 - 48);
                    if (v313)
                    {
                      *(void *)(v312 - 40) = v313;
                      operator delete(v313);
                    }
                    int v314 = *(void **)(v312 - 80);
                    if (v314)
                    {
                      *(void *)(v312 - 72) = v314;
                      operator delete(v314);
                    }
                    uint64_t v315 = *(void **)(v312 - 104);
                    if (v315)
                    {
                      *(void *)(v312 - 96) = v315;
                      operator delete(v315);
                    }
                  }
                  v312 -= 168;
                }
                while (v312 != v311);
                uint64_t v308 = *v310;
              }
              *(void *)(v306 - 64) = v311;
              operator delete(v308);
            }
            v306 -= 72;
          }
          while (v310 != v305);
          uint64_t v307 = (void *)v387;
        }
        *((void *)&v387 + 1) = v305;
        operator delete(v307);
      }
      if (SHIBYTE(v381) < 0) {
        operator delete(v379);
      }
      v335 += 16;
      if (v335 == v333) {
        goto LABEL_9;
      }
    }
    __p[1] = 0;
    if (*v335 == -1) {
      goto LABEL_390;
    }
LABEL_23:
    unsigned int v21 = *(_DWORD *)(a1 + 416);
    uint64_t v22 = v335;
    int v338 = v331;
LABEL_27:
    long long v355 = 0;
    unsigned int v356 = 0;
    unint64_t v357 = 0;
    int v360 = 0;
    uint64_t v361 = 0;
    int v359 = 0;
    v362[0] = 1;
    *(void *)&v362[4] = 0x8000000080000000;
    *(_WORD *)&v362[12] = 0;
    v362[14] = 0;
    int v415 = -1;
    if (v22[4] == -1)
    {
LABEL_275:
      char v358 = 1;
      unsigned int v239 = v22[7];
      unsigned int v240 = v22[3];
      uint64_t v241 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), v21);
      uint64_t v242 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), *v22);
      *(_DWORD *)long long v395 = 0;
      *(_DWORD *)&v395[4] = v239;
      *(void *)&v395[12] = v241;
      *(void *)&v395[20] = v242;
      *(_DWORD *)&v395[8] = v240;
      int v404 = 1;
      if (v415)
      {
        if (v415 == 1)
        {
          *(_OWORD *)v405 = *(_OWORD *)v395;
          *(_OWORD *)&v405[12] = *(_OWORD *)&v395[12];
          goto LABEL_287;
        }
LABEL_286:
        *(_OWORD *)v405 = *(_OWORD *)v395;
        *(_OWORD *)&v405[12] = *(_OWORD *)&v395[12];
        int v415 = 1;
      }
      else
      {
        if ((void)v412)
        {
          *((void *)&v412 + 1) = v412;
          operator delete((void *)v412);
        }
        if ((void)v409)
        {
          *((void *)&v409 + 1) = v409;
          operator delete((void *)v409);
        }
        if (v407[0])
        {
          v407[1] = v407[0];
          operator delete(v407[0]);
        }
        if (v404)
        {
          if (v404 == 1) {
            goto LABEL_286;
          }
          int v415 = v404;
        }
        else
        {
          sub_9F6FA0((uint64_t)v405, (long long *)v395);
          int v415 = v404;
          if (!v404)
          {
            if ((void)v401)
            {
              *((void *)&v401 + 1) = v401;
              operator delete((void *)v401);
            }
            if (v399[0])
            {
              v399[1] = v399[0];
              operator delete(v399[0]);
            }
            if ((void)v397)
            {
              *((void *)&v397 + 1) = v397;
              operator delete((void *)v397);
            }
          }
        }
      }
LABEL_287:
      unsigned int v21 = *v22;
      uint64_t v236 = (uint64_t)v356;
      if ((unint64_t)v356 >= v357) {
        goto LABEL_288;
      }
LABEL_270:
      *(_DWORD *)(v236 + 160) = v415;
      if (v415 == 1)
      {
        long long v270 = *(_OWORD *)v405;
        *(_OWORD *)(v236 + 12) = *(_OWORD *)&v405[12];
        *(_OWORD *)uint64_t v236 = v270;
        unsigned int v356 = (char *)(v236 + 168);
        uint64_t v237 = *((void *)&v387 + 1);
        if (*((void *)&v387 + 1) < (unint64_t)v388) {
          goto LABEL_289;
        }
      }
      else
      {
        if (!v415) {
          sub_9F6FA0(v236, (long long *)v405);
        }
        unsigned int v356 = (char *)(v236 + 168);
        uint64_t v237 = *((void *)&v387 + 1);
        if (*((void *)&v387 + 1) < (unint64_t)v388) {
          goto LABEL_289;
        }
      }
LABEL_274:
      uint64_t v238 = sub_A4CECC((void ***)&v387, (uint64_t)&v355);
      goto LABEL_302;
    }
    long long v339 = xmmword_20E12E0;
    __int16 v340 = 0;
    unint64_t v341 = 0x8000000080000000;
    __int16 v342 = 0;
    *(_OWORD *)int v343 = xmmword_20EB6B0;
    *(void *)&v343[16] = 0xFFFFFFFF7FFFFFFFLL;
    long long v345 = 0u;
    long long v346 = 0u;
    long long v347 = 0u;
    int v344 = -1;
    int v348 = 0x7FFFFFFF;
    unint64_t v350 = 0;
    uint64_t v351 = 0;
    unint64_t v349 = 0;
    char v352 = 1;
    unint64_t v353 = 0x8000000080000000;
    int v354 = 0;
    char v358 = 0;
    uint64_t v24 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 40) + 88), v22[4]);
    *(void *)int v343 = v24;
    uint64_t v25 = *(void *)(v22 + 1);
    *(_DWORD *)&v343[16] = v22[3];
    *(void *)&v343[8] = v25;
    int v344 = *v22;
    unsigned int v26 = v344;
    uint64_t v27 = *(void *)(a1 + 24);
    unint64_t v393 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), v21);
    sub_A1E9A0((uint64_t)v395, v27, v24, v26, 0, 0);
    *(void *)&long long v397 = *(void *)&v396[24] + 12 * *(unsigned int *)&v343[8];
    if (LOBYTE(v399[1])) {
      *(void **)((char *)&v399[1] + 4) = *(void **)&v343[12];
    }
    if (*(void *)&v396[16]) {
      uint64_t v28 = *(unsigned int *)(*(void *)&v396[16] + 4 * ((*(void *)v396 - *(void *)&v395[24]) >> 4));
    }
    else {
      uint64_t v28 = 0;
    }
    sub_A56ED0((uint64_t)v395, &v393, v28);
    _CF = *(void *)v396 < *(void *)&v396[8] && *(void *)v396 >= *(void *)&v395[24];
    uint64_t v30 = (*(void *)v396 - *(void *)&v395[24]) >> 4;
    if (!_CF) {
      LODWORD(v30) = -1;
    }
    *(_DWORD *)&v343[20] = v30;
    uint64_t v31 = *(void *)(a1 + 32);
    uint64_t v32 = (void *)(*(void *)(a1 + 24) + 4136);
    unint64_t v33 = *(void *)v343;
    unsigned int v34 = v344;
    uint64_t v35 = HIDWORD(*(void *)v343);
    if (sub_A10E20(v32, *(int *)&v343[4]))
    {
      int v36 = (int *)sub_A1120C(*(void *)(*v32 + 3944), v33);
    }
    else
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_24F7308))
      {
        sub_518C8(0x3B60u, 0x7FCAu);
        dword_24F7300 = v299 | 0x40000000;
        __cxa_guard_release(&qword_24F7308);
      }
      uint64_t v37 = *v32;
      if (dword_24F7300 == v35)
      {
        uint64_t v38 = *(unsigned int **)(*(void *)(v37 + 3976) + 72);
        if (!v38)
        {
          exception = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(v395, "Realtime stop pattern quad data requested on nullptr buffer");
          uint64_t v325 = (void *)sub_2F404((uint64_t)exception, (long long *)v395);
        }
        unsigned int v39 = (int *)((char *)v38 + *v38);
        unint64_t v40 = (unsigned __int16 *)((char *)v39 - *v39);
        if (*v40 >= 5u && (uint64_t v41 = v40[2]) != 0) {
          long long v42 = (unsigned int *)((char *)v39 + v41 + *(unsigned int *)((char *)v39 + v41));
        }
        else {
          long long v42 = 0;
        }
        int v36 = (int *)sub_A1139C(v42, v33);
      }
      else
      {
        int v36 = (int *)sub_A11500(v37 + 24, v33, 0, "stop pattern");
      }
    }
    int v43 = (unsigned __int16 *)((char *)v36 - *v36);
    if (*v43 >= 9u && (uint64_t v44 = v43[4]) != 0) {
      int v45 = (unsigned int *)((char *)v36 + v44 + *(unsigned int *)((char *)v36 + v44));
    }
    else {
      int v45 = 0;
    }
    int v46 = (void *)sub_A10764(v45, v34);
    uint64_t v47 = 0;
    unint64_t v48 = __ROR8__(*v46, 32);
    uint64_t v49 = *(void *)(v31 + 72) - 1;
    unint64_t v50 = 0xC4CEB9FE1A85EC53
        * ((0xFF51AFD7ED558CCDLL * (v48 ^ (v48 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v48 ^ (v48 >> 33))) >> 33));
    unint64_t v51 = v50 ^ (v50 >> 33);
    uint64_t v52 = *(void *)(v31 + 48);
    uint64_t v53 = v52 + 11;
    uint64_t v54 = -1;
    for (unint64_t i = v51; ; unint64_t i = v47 + v56)
    {
      uint64_t v56 = i & v49;
      unint64_t v57 = i & v49;
      unint64_t v58 = (i & v49) / 0x30;
      unint64_t v59 = v57 % 0x30;
      if (((*(unsigned __int8 *)(v52 + 16 * (v57 / 0x30) + ((v57 % 0x30) >> 3) + 10) >> ((v57 % 0x30) & 7)) & 1) == 0)
      {
        if (v54 == -1) {
          unint64_t v93 = v56;
        }
        else {
          unint64_t v93 = v54;
        }
        goto LABEL_94;
      }
      uint64_t v60 = *(void *)(v52 + 16 * v58);
      if (!*(void *)(v31 + 40)) {
        goto LABEL_73;
      }
      int v61 = (unsigned __int8 *)(v52 + 16 * v58 + 10);
      if ((unsigned __int16)(v57 % 0x30) < 9u)
      {
        __int16 v62 = 0;
        unint64_t v63 = v57 % 0x30;
        goto LABEL_69;
      }
      __int16 v62 = 0;
      unint64_t v63 = (unsigned __int16)(v56 - 48 * v58 - 9) >> 3;
      if ((unsigned __int16)(v56 - 48 * v58 - 9) >> 3)
      {
        __int16 v64 = 0;
        unint64_t v65 = v63 + 1;
        uint64_t v66 = (v63 + 1) & 0x3FFE;
        LOWORD(v63) = v59 - 8 * v66;
        uint64_t v67 = &v61[v66];
        uint64_t v68 = (unsigned __int8 *)(v53 + 16 * v58);
        uint64_t v69 = v66;
        do
        {
          uint64_t v70 = *(v68 - 1);
          int v71 = *v68;
          v68 += 2;
          v62 += byte_20EBFB6[v70];
          v64 += byte_20EBFB6[v71];
          v69 -= 2;
        }
        while (v69);
        v62 += v64;
        if (v65 == v66) {
          goto LABEL_68;
        }
      }
      else
      {
        unint64_t v63 = v57 % 0x30;
        uint64_t v67 = (unsigned __int8 *)(v52 + 16 * v58 + 10);
      }
      do
      {
        int v72 = *v67++;
        v62 += byte_20EBFB6[v72];
        LOWORD(v63) = v63 - 8;
      }
      while ((unsigned __int16)v63 > 8u);
LABEL_68:
      v61 += ((unsigned __int16)(v59 - 9) >> 3) + 1;
LABEL_69:
      uint64_t v73 = (_DWORD *)(v60
                     + 12
                     * (unsigned __int16)(v62 + byte_20EBFB6[~(-1 << v63) & (unint64_t)*v61]));
      if (*(_DWORD *)(v31 + 36) == v73[1] && *(_DWORD *)(v31 + 32) == *v73)
      {
        if (v54 == -1) {
          uint64_t v54 = v56;
        }
        goto LABEL_56;
      }
LABEL_73:
      char v75 = (unsigned __int8 *)(v52 + 16 * v58 + 10);
      if ((unsigned __int16)(v57 % 0x30) < 9u)
      {
        __int16 v76 = 0;
        uint64_t v86 = (unsigned __int8 *)(v52 + 16 * v58 + 10);
        unint64_t v77 = v57 % 0x30;
        goto LABEL_83;
      }
      __int16 v76 = 0;
      unint64_t v77 = (unsigned __int16)(v56 - 48 * v58 - 9) >> 3;
      if ((unsigned __int16)(v56 - 48 * v58 - 9) >> 3)
      {
        __int16 v78 = 0;
        unint64_t v79 = v77 + 1;
        uint64_t v80 = (v77 + 1) & 0x3FFE;
        LOWORD(v77) = v59 - 8 * v80;
        char v81 = &v75[v80];
        uint64_t v82 = (unsigned __int8 *)(v53 + 16 * v58);
        uint64_t v83 = v80;
        do
        {
          uint64_t v84 = *(v82 - 1);
          int v85 = *v82;
          v82 += 2;
          v76 += byte_20EBFB6[v84];
          v78 += byte_20EBFB6[v85];
          v83 -= 2;
        }
        while (v83);
        v76 += v78;
        if (v79 == v80) {
          goto LABEL_82;
        }
      }
      else
      {
        unint64_t v77 = v57 % 0x30;
        char v81 = (unsigned __int8 *)(v52 + 16 * v58 + 10);
      }
      do
      {
        int v87 = *v81++;
        v76 += byte_20EBFB6[v87];
        LOWORD(v77) = v77 - 8;
      }
      while ((unsigned __int16)v77 > 8u);
LABEL_82:
      uint64_t v86 = &v75[((unsigned __int16)(v59 - 9) >> 3) + 1];
LABEL_83:
      if (v48 == *(void *)(v60
                            + 12
                            * (unsigned __int16)(v76 + byte_20EBFB6[~(-1 << v77) & (unint64_t)*v86])))
      {
        if (v56 != -1)
        {
          if ((unsigned __int16)(v57 % 0x30) < 9u)
          {
            __int16 v90 = 0;
          }
          else
          {
            if ((((_WORD)v56 - 48 * (_WORD)v58 - 8) & 0xFFF8) != 0) {
              __int16 v88 = 8;
            }
            else {
              __int16 v88 = v56 - 48 * v58 - 8;
            }
            unsigned __int16 v89 = ~v88 + v56 - 48 * v58;
            if (v89 < 8u)
            {
              __int16 v90 = 0;
              unint64_t v91 = v57 % 0x30;
              uint64_t v92 = (unsigned __int8 *)(v52 + 16 * v58 + 10);
              goto LABEL_339;
            }
            __int16 v271 = 0;
            __int16 v272 = 0;
            uint64_t v273 = (v89 >> 3) + 1;
            LOWORD(v91) = v59 - 8 * (((v89 >> 3) + 1) & 0x3FFE);
            uint64_t v92 = &v75[v273 & 0x3FFE];
            int v274 = (unsigned __int8 *)(v52 + 16 * v58 + 11);
            uint64_t v275 = v273 & 0x3FFE;
            do
            {
              uint64_t v276 = *(v274 - 1);
              int v277 = *v274;
              v274 += 2;
              v271 += byte_20EBFB6[v276];
              v272 += byte_20EBFB6[v277];
              v275 -= 2;
            }
            while (v275);
            __int16 v90 = v272 + v271;
            if ((v273 & 0x3FFE) != v273)
            {
              do
              {
LABEL_339:
                int v278 = *v92++;
                v90 += byte_20EBFB6[v278];
                LOWORD(v91) = v91 - 8;
              }
              while ((unsigned __int16)v91 > 8u);
            }
            v75 += ((unsigned __int16)(v59 - 9) >> 3) + 1;
            LOBYTE(v59) = v91;
          }
          uint64_t v279 = *(void *)(v31 + 56);
          unsigned __int16 v280 = v90 + byte_20EBFB6[~(-1 << v59) & (unint64_t)*v75];
          uint64_t v281 = v52 + 16 * v58;
          if (*(unsigned __int16 *)(v281 + 8) != v280 || v281 + 16 == v279)
          {
            uint64_t v138 = (_DWORD *)(v60 + 12 * v280);
          }
          else
          {
            uint64_t v283 = v281 + 32;
            do
            {
              if (*(_WORD *)(v283 - 8)) {
                BOOL v284 = 1;
              }
              else {
                BOOL v284 = v283 == v279;
              }
              v283 += 16;
            }
            while (!v284);
            uint64_t v138 = *(_DWORD **)(v283 - 32);
          }
          goto LABEL_139;
        }
        unint64_t v93 = -1;
LABEL_94:
        if (!sub_AD2F40(v31, 1))
        {
          unint64_t v393 = v48;
          int v394 = -1;
          sub_AD3484(v31, (uint64_t *)&v393, v93, v395);
LABEL_138:
          uint64_t v138 = *(_DWORD **)v396;
          goto LABEL_139;
        }
        uint64_t v94 = 0;
        unint64_t v393 = v48;
        int v394 = -1;
        uint64_t v95 = *(void *)(v31 + 72) - 1;
        uint64_t v96 = *(void *)(v31 + 48);
        uint64_t v97 = v96 + 11;
        uint64_t v98 = -1;
        while (2)
        {
          uint64_t v99 = v51 & v95;
          unint64_t v100 = (v51 & v95) / 0x30;
          unint64_t v101 = (v51 & v95) % 0x30;
          if (((*(unsigned __int8 *)(v96 + 16 * v100 + (v101 >> 3) + 10) >> (v101 & 7)) & 1) == 0)
          {
            if (v98 == -1) {
              unint64_t v137 = v51 & v95;
            }
            else {
              unint64_t v137 = v98;
            }
            goto LABEL_137;
          }
          uint64_t v102 = *(void *)(v31 + 40);
          uint64_t v103 = *(void *)(v96 + 16 * v100);
          if (!v102) {
            break;
          }
          __int16 v104 = (unsigned __int8 *)(v96 + 16 * v100 + 10);
          if ((unsigned __int16)((v51 & v95) % 0x30) < 9u)
          {
            __int16 v105 = 0;
            unint64_t v106 = (v51 & v95) % 0x30;
            goto LABEL_111;
          }
          __int16 v105 = 0;
          unint64_t v106 = (unsigned __int16)(v99 - 48 * v100 - 9) >> 3;
          if (!((unsigned __int16)(v99 - 48 * v100 - 9) >> 3))
          {
            unint64_t v106 = (v51 & v95) % 0x30;
            __int16 v110 = (unsigned __int8 *)(v96 + 16 * v100 + 10);
            do
            {
LABEL_109:
              int v115 = *v110++;
              v105 += byte_20EBFB6[v115];
              LOWORD(v106) = v106 - 8;
            }
            while ((unsigned __int16)v106 > 8u);
            goto LABEL_110;
          }
          __int16 v107 = 0;
          unint64_t v108 = v106 + 1;
          uint64_t v109 = (v106 + 1) & 0x3FFE;
          LOWORD(v106) = v101 - 8 * v109;
          __int16 v110 = &v104[v109];
          uint64_t v111 = (unsigned __int8 *)(v97 + 16 * v100);
          uint64_t v112 = v109;
          do
          {
            uint64_t v113 = *(v111 - 1);
            int v114 = *v111;
            v111 += 2;
            v105 += byte_20EBFB6[v113];
            v107 += byte_20EBFB6[v114];
            v112 -= 2;
          }
          while (v112);
          v105 += v107;
          if (v108 != v109) {
            goto LABEL_109;
          }
LABEL_110:
          v104 += ((unsigned __int16)(v101 - 9) >> 3) + 1;
LABEL_111:
          int v116 = (_DWORD *)(v103
                          + 12
                          * (unsigned __int16)(v105 + byte_20EBFB6[~(-1 << v106) & (unint64_t)*v104]));
          if (*(_DWORD *)(v31 + 36) == v116[1] && *(_DWORD *)(v31 + 32) == *v116)
          {
            if (v98 == -1) {
              uint64_t v98 = v99;
            }
LABEL_98:
            unint64_t v51 = ++v94 + v99;
            continue;
          }
          break;
        }
        unsigned __int16 v118 = (unsigned __int8 *)(v96 + 16 * v100 + 10);
        if ((unsigned __int16)v101 < 9u)
        {
          __int16 v119 = 0;
          uint64_t v130 = (unsigned __int8 *)(v96 + 16 * v100 + 10);
          LOBYTE(v124) = v101;
          goto LABEL_125;
        }
        __int16 v119 = 0;
        uint64_t v120 = (unsigned __int16)(v99 - 48 * v100 - 9) >> 3;
        if (!((unsigned __int16)(v99 - 48 * v100 - 9) >> 3))
        {
          unsigned __int16 v124 = v101;
          unint64_t v125 = (unsigned __int8 *)(v96 + 16 * v100 + 10);
          do
          {
LABEL_123:
            int v131 = *v125++;
            v119 += byte_20EBFB6[v131];
            v124 -= 8;
          }
          while (v124 > 8u);
          goto LABEL_124;
        }
        __int16 v121 = 0;
        uint64_t v122 = v120 + 1;
        uint64_t v123 = (v120 + 1) & 0x3FFE;
        unsigned __int16 v124 = v101 - 8 * v123;
        unint64_t v125 = &v118[v123];
        unsigned __int16 v126 = (unsigned __int8 *)(v97 + 16 * v100);
        uint64_t v127 = v123;
        do
        {
          uint64_t v128 = *(v126 - 1);
          int v129 = *v126;
          v126 += 2;
          v119 += byte_20EBFB6[v128];
          v121 += byte_20EBFB6[v129];
          v127 -= 2;
        }
        while (v127);
        v119 += v121;
        if (v122 != v123) {
          goto LABEL_123;
        }
LABEL_124:
        uint64_t v130 = &v118[((unsigned __int16)(v101 - 9) >> 3) + 1];
LABEL_125:
        if (v48 != *(void *)(v103
                              + 12
                              * (unsigned __int16)(v119
                                                 + byte_20EBFB6[~(-1 << v124) & (unint64_t)*v130])))
          goto LABEL_98;
        if (v99 == -1)
        {
          unint64_t v137 = -1;
LABEL_137:
          sub_AD3484(v31, (uint64_t *)&v393, v137, v395);
          goto LABEL_138;
        }
        if ((unsigned __int16)v101 < 9u)
        {
          __int16 v134 = 0;
        }
        else
        {
          if ((((_WORD)v99 - 48 * (_WORD)v100 - 8) & 0xFFF8) != 0) {
            __int16 v132 = 8;
          }
          else {
            __int16 v132 = v99 - 48 * v100 - 8;
          }
          unsigned __int16 v133 = ~v132 + v99 - 48 * v100;
          if (v133 < 8u)
          {
            __int16 v134 = 0;
            unsigned __int16 v135 = v101;
            unint64_t v136 = (unsigned __int8 *)(v96 + 16 * v100 + 10);
            goto LABEL_358;
          }
          __int16 v285 = 0;
          __int16 v286 = 0;
          uint64_t v287 = (v133 >> 3) + 1;
          unsigned __int16 v135 = v101 - 8 * (((v133 >> 3) + 1) & 0x3FFE);
          unint64_t v136 = &v118[v287 & 0x3FFE];
          unsigned __int8 v288 = (unsigned __int8 *)(v96 + 16 * v100 + 11);
          uint64_t v289 = v287 & 0x3FFE;
          do
          {
            uint64_t v290 = *(v288 - 1);
            int v291 = *v288;
            v288 += 2;
            v285 += byte_20EBFB6[v290];
            v286 += byte_20EBFB6[v291];
            v289 -= 2;
          }
          while (v289);
          __int16 v134 = v286 + v285;
          if ((v287 & 0x3FFE) != v287)
          {
            do
            {
LABEL_358:
              int v292 = *v136++;
              v134 += byte_20EBFB6[v292];
              v135 -= 8;
            }
            while (v135 > 8u);
          }
          v118 += ((unsigned __int16)(v101 - 9) >> 3) + 1;
          LOBYTE(v101) = v135;
        }
        uint64_t v293 = v96 + 16 * v100;
        int v294 = *(_DWORD ***)(v31 + 56);
        unsigned __int16 v295 = v134 + byte_20EBFB6[~(-1 << v101) & (unint64_t)*v118];
        uint64_t v138 = (_DWORD *)(v103 + 12 * v295);
        if (*(unsigned __int16 *)(v293 + 8) == v295)
        {
          uint64_t v296 = v293 + 16;
          if ((_DWORD **)(v293 + 16) != v294)
          {
            while (1)
            {
              uint64_t v297 = (_DWORD **)v296;
              if (*(_WORD *)(v296 + 8)) {
                break;
              }
              v296 += 16;
              if (v297 + 2 == v294)
              {
                uint64_t v293 = *(void *)(v31 + 56);
                goto LABEL_366;
              }
            }
            uint64_t v293 = v296;
LABEL_366:
            uint64_t v138 = *v297;
            goto LABEL_367;
          }
        }
        else
        {
LABEL_367:
          if ((_DWORD **)v293 != v294 && v102)
          {
            do
            {
              if (*(_DWORD *)(v31 + 36) != v138[1] || *(_DWORD *)(v31 + 32) != *v138) {
                break;
              }
              v138 += 3;
              if (v138 == (_DWORD *)(*(void *)v293 + 12 * *(unsigned __int16 *)(v293 + 8)))
              {
                v293 += 16;
                if ((_DWORD **)v293 != v294)
                {
                  do
                  {
                    if (*(_WORD *)(v293 + 8))
                    {
                      uint64_t v138 = *(_DWORD **)v293;
                      goto LABEL_371;
                    }
                    v293 += 16;
                  }
                  while ((_DWORD **)v293 != v294);
                  uint64_t v138 = *(_DWORD **)(v293 - 16);
                }
                break;
              }
LABEL_371:
              ;
            }
            while ((_DWORD **)v293 != v294);
          }
        }
LABEL_139:
        unsigned int v21 = v138[2];
        if (v21 == -1)
        {
          int v139 = *(_DWORD *)(v31 + 112);
          *(_DWORD *)(v31 + 112) = v139 + 1;
          v138[2] = v139;
          uint64_t v141 = *(char **)(v31 + 96);
          unint64_t v140 = *(void *)(v31 + 104);
          if ((unint64_t)v141 < v140)
          {
            *(void *)uint64_t v141 = v48;
            uint64_t v142 = (uint64_t)(v141 + 8);
            goto LABEL_164;
          }
          long long v143 = (char **)(v31 + 88);
          unint64_t v144 = *(char **)(v31 + 88);
          uint64_t v145 = (char *)(v141 - v144);
          uint64_t v146 = (v141 - v144) >> 3;
          unint64_t v147 = v146 + 1;
          if ((unint64_t)(v146 + 1) >> 61) {
            sub_2E00();
          }
          uint64_t v148 = v140 - (void)v144;
          if (v148 >> 2 > v147) {
            unint64_t v147 = v148 >> 2;
          }
          if ((unint64_t)v148 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v149 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v149 = v147;
          }
          if (v149)
          {
            if (v149 >> 61) {
              sub_188D718();
            }
            unint64_t v150 = v149;
            __int16 v151 = operator new(8 * v149);
            long long v143 = (char **)(v31 + 88);
            unint64_t v149 = v150;
            uint64_t v145 = (char *)(v141 - v144);
            uint64_t v152 = (unint64_t *)&v151[8 * v146];
            *uint64_t v152 = v48;
            uint64_t v142 = (uint64_t)(v152 + 1);
            if (v141 == v144) {
              goto LABEL_162;
            }
LABEL_155:
            unint64_t v153 = v141 - 8 - v144;
            if (v153 < 0x58) {
              goto LABEL_432;
            }
            if ((unint64_t)(v141 - v151 - (void)v145) < 0x20) {
              goto LABEL_432;
            }
            uint64_t v154 = (v153 >> 3) + 1;
            uint64_t v155 = 8 * (v154 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v156 = &v141[-v155];
            uint64_t v152 = (unint64_t *)((char *)v152 - v155);
            int v157 = &v151[8 * v146 - 16];
            uint64_t v158 = v141 - 16;
            uint64_t v159 = v154 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v160 = *(_OWORD *)v158;
              *(v157 - 1) = *((_OWORD *)v158 - 1);
              *int v157 = v160;
              v157 -= 2;
              v158 -= 32;
              v159 -= 4;
            }
            while (v159);
            uint64_t v141 = v156;
            if (v154 != (v154 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_432:
              do
              {
                unint64_t v161 = *((void *)v141 - 1);
                v141 -= 8;
                *--uint64_t v152 = v161;
              }
              while (v141 != v144);
            }
            uint64_t v141 = *v143;
          }
          else
          {
            __int16 v151 = 0;
            uint64_t v152 = (unint64_t *)(8 * v146);
            *(void *)(8 * v146) = v48;
            uint64_t v142 = 8 * v146 + 8;
            if (v141 != v144) {
              goto LABEL_155;
            }
          }
LABEL_162:
          *(void *)(v31 + 88) = v152;
          *(void *)(v31 + 96) = v142;
          *(void *)(v31 + 104) = &v151[8 * v149];
          if (v141) {
            operator delete(v141);
          }
LABEL_164:
          *(void *)(v31 + 96) = v142;
          unsigned int v21 = v138[2];
        }
        int v162 = (void *)(*(void *)(v337 + 24) + 4136);
        unint64_t v163 = *(void *)v343;
        unsigned int v164 = *(_DWORD *)&v343[20];
        uint64_t v165 = HIDWORD(*(void *)v343);
        if (sub_A10E20(v162, *(int *)&v343[4]))
        {
          unsigned int v166 = (int *)sub_A1120C(*(void *)(*v162 + 3944), v163);
        }
        else
        {
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_24F7308))
          {
            sub_518C8(0x3B60u, 0x7FCAu);
            dword_24F7300 = v300 | 0x40000000;
            __cxa_guard_release(&qword_24F7308);
          }
          uint64_t v167 = *v162;
          if (dword_24F7300 == v165)
          {
            unsigned int v168 = *(unsigned int **)(*(void *)(v167 + 3976) + 72);
            if (!v168)
            {
              long long v322 = __cxa_allocate_exception(0x40uLL);
              sub_5E5C(v395, "Realtime stop pattern quad data requested on nullptr buffer");
              long long v323 = (void *)sub_2F404((uint64_t)v322, (long long *)v395);
            }
            uint64_t v169 = (int *)((char *)v168 + *v168);
            uint64_t v170 = (unsigned __int16 *)((char *)v169 - *v169);
            if (*v170 >= 5u && (uint64_t v171 = v170[2]) != 0) {
              uint64_t v172 = (unsigned int *)((char *)v169 + v171 + *(unsigned int *)((char *)v169 + v171));
            }
            else {
              uint64_t v172 = 0;
            }
            unsigned int v166 = (int *)sub_A1139C(v172, v163);
          }
          else
          {
            unsigned int v166 = (int *)sub_A11500(v167 + 24, v163, 0, "stop pattern");
          }
        }
        long long v173 = (unsigned __int16 *)((char *)v166 - *v166);
        if (*v173 >= 9u && (uint64_t v174 = v173[4]) != 0) {
          int v175 = (unsigned int *)((char *)v166 + v174 + *(unsigned int *)((char *)v166 + v174));
        }
        else {
          int v175 = 0;
        }
        DWORD1(v339) = 10 * *(_DWORD *)(sub_A10764(v175, v164) + 8);
        uint64_t v176 = *(void *)(v337 + 24);
        unint64_t v177 = *(void *)v343;
        __int16 v178 = (uint64_t *)(v176 + 4136);
        unsigned int v179 = *(_DWORD *)&v343[20];
        int v180 = *(_DWORD *)&v343[8];
        uint64_t v181 = HIDWORD(*(void *)v343);
        if (sub_A10E20((void *)(v176 + 4136), *(int *)&v343[4]))
        {
          uint64_t v182 = *(unsigned int **)(*(void *)(*v178 + 3944) + 72);
          if (!v182)
          {
            uint64_t v316 = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(v395, "Incident stop pattern quad data requested on nullptr buffer");
            uint64_t v317 = (void *)sub_2F404((uint64_t)v316, (long long *)v395);
          }
          goto LABEL_186;
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F7308))
        {
          sub_518C8(0x3B60u, 0x7FCAu);
          dword_24F7300 = v301 | 0x40000000;
          __cxa_guard_release(&qword_24F7308);
        }
        uint64_t v183 = *v178;
        if (dword_24F7300 != v181)
        {
          int v184 = sub_A10B80(v183 + 24, v177, 0);
          int v185 = &v184[-*(int *)v184];
          if (*(unsigned __int16 *)v185 >= 5u) {
            goto LABEL_187;
          }
LABEL_190:
          uint64_t v186 = 0;
          goto LABEL_191;
        }
        uint64_t v182 = *(unsigned int **)(*(void *)(v183 + 3976) + 72);
        if (!v182)
        {
          uint64_t v326 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(v395, "Realtime stop pattern quad data requested on nullptr buffer");
          int v327 = (void *)sub_2F404((uint64_t)v326, (long long *)v395);
        }
LABEL_186:
        int v184 = (char *)v182 + *v182;
        int v185 = &v184[-*(int *)v184];
        if (*(unsigned __int16 *)v185 < 5u) {
          goto LABEL_190;
        }
LABEL_187:
        uint64_t v186 = *((unsigned __int16 *)v185 + 2);
        if (v186) {
          v186 += (uint64_t)&v184[*(unsigned int *)&v184[v186]];
        }
LABEL_191:
        int v187 = (int *)(v186 + 4 * v177 + 4 + *(unsigned int *)(v186 + 4 * v177 + 4));
        unsigned __int16 v188 = (unsigned __int16 *)((char *)v187 - *v187);
        if (*v188 >= 9u && (uint64_t v189 = v188[4]) != 0) {
          unsigned int v190 = (unsigned int *)((char *)v187 + v189 + *(unsigned int *)((char *)v187 + v189));
        }
        else {
          unsigned int v190 = 0;
        }
        uint64_t v191 = sub_A10764(v190, v179);
        int v192 = &v184[-*(int *)v184];
        if (*(unsigned __int16 *)v192 < 0xBu)
        {
          int v193 = 0;
          int v194 = (unsigned __int16 *)((char *)v187 - *v187);
          if (*v194 >= 0x11u) {
            goto LABEL_199;
          }
LABEL_202:
          LODWORD(v195) = 0;
          goto LABEL_203;
        }
        int v193 = (unsigned int *)*((unsigned __int16 *)v192 + 5);
        if (v193) {
          int v193 = (unsigned int *)((char *)v193 + (void)v184 + *(unsigned int *)((char *)v193 + (void)v184));
        }
        int v194 = (unsigned __int16 *)((char *)v187 - *v187);
        if (*v194 < 0x11u) {
          goto LABEL_202;
        }
LABEL_199:
        uint64_t v195 = v194[8];
        if (v194[8]) {
          LODWORD(v195) = *(int *)((char *)v187 + v195);
        }
LABEL_203:
        uint64_t v196 = sub_A108C4(v193, v195+ *(int *)((char *)v187 + v194[2] + *(unsigned int *)((char *)v187 + v194[2])) * v180+ *(unsigned __int8 *)(v191 + 14));
        if (v196)
        {
          uint64_t v197 = __ROR8__(*(void *)v196, 32);
          int v198 = *(_DWORD *)(v196 + 8);
        }
        else
        {
          int v198 = 0;
          uint64_t v197 = 0xFFFFFFFFLL;
        }
        *(void *)long long v395 = v197;
        *(_DWORD *)&v395[8] = v198;
        uint64_t v199 = (int *)sub_A11094((void *)(v176 + 4136), v177);
        uint64_t v200 = (unsigned __int16 *)((char *)v199 - *v199);
        if (*v200 >= 9u && (uint64_t v201 = v200[4]) != 0) {
          uint64_t v202 = (unsigned int *)((char *)v199 + v201 + *(unsigned int *)((char *)v199 + v201));
        }
        else {
          uint64_t v202 = 0;
        }
        unsigned int v203 = *(unsigned __int16 *)(sub_A10764(v202, v179) + 12);
        if (*(_DWORD *)&v343[12] == -1) {
          int v204 = 0x7FFFFFFF;
        }
        else {
          int v204 = *(_DWORD *)&v343[16];
        }
        *((void *)&v339 + 1) = sub_A0FAA0((uint64_t *)(v176 + 4184), (unsigned int *)v395, v203, v204);
        __int16 v340 = v205;
        uint64_t v206 = *(void *)(v337 + 24);
        unint64_t v207 = *(void *)v343;
        unsigned int v208 = (uint64_t *)(v206 + 4136);
        unsigned int v209 = v344;
        int v210 = *(_DWORD *)&v343[8];
        uint64_t v211 = HIDWORD(*(void *)v343);
        if (sub_A10E20((void *)(v206 + 4136), *(int *)&v343[4]))
        {
          int v212 = *(unsigned int **)(*(void *)(*v208 + 3944) + 72);
          if (!v212)
          {
            uint64_t v318 = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(v395, "Incident stop pattern quad data requested on nullptr buffer");
            int v319 = (void *)sub_2F404((uint64_t)v318, (long long *)v395);
          }
          goto LABEL_219;
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F7308))
        {
          sub_518C8(0x3B60u, 0x7FCAu);
          dword_24F7300 = v302 | 0x40000000;
          __cxa_guard_release(&qword_24F7308);
        }
        uint64_t v213 = *v208;
        if (dword_24F7300 != v211)
        {
          uint64_t v214 = sub_A10B80(v213 + 24, v207, 0);
          __int16 v215 = &v214[-*(int *)v214];
          if (*(unsigned __int16 *)v215 >= 5u) {
            goto LABEL_220;
          }
LABEL_223:
          uint64_t v216 = 0;
          goto LABEL_224;
        }
        int v212 = *(unsigned int **)(*(void *)(v213 + 3976) + 72);
        if (!v212)
        {
          uint64_t v320 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(v395, "Realtime stop pattern quad data requested on nullptr buffer");
          unsigned int v321 = (void *)sub_2F404((uint64_t)v320, (long long *)v395);
        }
LABEL_219:
        uint64_t v214 = (char *)v212 + *v212;
        __int16 v215 = &v214[-*(int *)v214];
        if (*(unsigned __int16 *)v215 < 5u) {
          goto LABEL_223;
        }
LABEL_220:
        uint64_t v216 = *((unsigned __int16 *)v215 + 2);
        if (v216) {
          v216 += (uint64_t)&v214[*(unsigned int *)&v214[v216]];
        }
LABEL_224:
        uint64_t v217 = (int *)(v216 + 4 * v207 + 4 + *(unsigned int *)(v216 + 4 * v207 + 4));
        unint64_t v218 = (unsigned __int16 *)((char *)v217 - *v217);
        if (*v218 >= 9u && (uint64_t v219 = v218[4]) != 0) {
          uint64_t v220 = (unsigned int *)((char *)v217 + v219 + *(unsigned int *)((char *)v217 + v219));
        }
        else {
          uint64_t v220 = 0;
        }
        uint64_t v221 = sub_A10764(v220, v209);
        int v222 = &v214[-*(int *)v214];
        if (*(unsigned __int16 *)v222 < 0xBu)
        {
          uint64_t v223 = 0;
          unsigned __int16 v224 = (unsigned __int16 *)((char *)v217 - *v217);
          if (*v224 >= 0x11u) {
            goto LABEL_232;
          }
LABEL_235:
          LODWORD(v225) = 0;
          goto LABEL_236;
        }
        uint64_t v223 = (unsigned int *)*((unsigned __int16 *)v222 + 5);
        if (v223) {
          uint64_t v223 = (unsigned int *)((char *)v223 + (void)v214 + *(unsigned int *)((char *)v223 + (void)v214));
        }
        unsigned __int16 v224 = (unsigned __int16 *)((char *)v217 - *v217);
        if (*v224 < 0x11u) {
          goto LABEL_235;
        }
LABEL_232:
        uint64_t v225 = v224[8];
        if (v224[8]) {
          LODWORD(v225) = *(int *)((char *)v217 + v225);
        }
LABEL_236:
        uint64_t v226 = sub_A108C4(v223, v225+ *(int *)((char *)v217 + v224[2] + *(unsigned int *)((char *)v217 + v224[2])) * v210+ *(unsigned __int8 *)(v221 + 14));
        if (v226)
        {
          uint64_t v227 = __ROR8__(*(void *)v226, 32);
          int v228 = *(_DWORD *)(v226 + 8);
        }
        else
        {
          int v228 = 0;
          uint64_t v227 = 0xFFFFFFFFLL;
        }
        *(void *)long long v395 = v227;
        *(_DWORD *)&v395[8] = v228;
        uint64_t v229 = (int *)sub_A11094((void *)(v206 + 4136), v207);
        int v230 = (unsigned __int16 *)((char *)v229 - *v229);
        if (*v230 >= 9u && (uint64_t v231 = v230[4]) != 0) {
          unint64_t v232 = (unsigned int *)((char *)v229 + v231 + *(unsigned int *)((char *)v229 + v231));
        }
        else {
          unint64_t v232 = 0;
        }
        unsigned int v233 = *(unsigned __int16 *)(sub_A10764(v232, v209) + 12);
        if (*(_DWORD *)&v343[12] == -1) {
          int v234 = 0x7FFFFFFF;
        }
        else {
          int v234 = *(_DWORD *)&v343[16];
        }
        unint64_t v341 = sub_A0FDF4((uint64_t *)(v206 + 4184), (unsigned int *)v395, v233, v234);
        __int16 v342 = v235;
        int v404 = -1;
        sub_9F6FA0((uint64_t)v395, &v339);
        int v404 = 0;
        if (v415)
        {
          sub_9F6FA0((uint64_t)v405, (long long *)v395);
          a1 = v337;
          int v415 = v404;
          if (!v404) {
            goto LABEL_256;
          }
        }
        else
        {
          *(_OWORD *)v405 = *(_OWORD *)v395;
          *(_OWORD *)&v405[16] = *(_OWORD *)&v395[16];
          v406[0] = *(_OWORD *)v396;
          *(_OWORD *)((char *)v406 + 12) = *(_OWORD *)&v396[12];
          a1 = v337;
          if (v407[0])
          {
            v407[1] = v407[0];
            operator delete(v407[0]);
          }
          *(_OWORD *)long long v407 = v397;
          uint64_t v408 = v398;
          uint64_t v398 = 0;
          long long v397 = 0uLL;
          if ((void)v409)
          {
            *((void *)&v409 + 1) = v409;
            operator delete((void *)v409);
          }
          long long v409 = *(_OWORD *)v399;
          int v410 = v399[2];
          memset(v399, 0, sizeof(v399));
          int v411 = v400;
          if ((void)v412)
          {
            *((void *)&v412 + 1) = v412;
            operator delete((void *)v412);
          }
          long long v412 = v401;
          uint64_t v413 = v402;
          uint64_t v402 = 0;
          long long v401 = 0uLL;
          long long v414 = v403;
          if (!v404)
          {
LABEL_256:
            if ((void)v401)
            {
              *((void *)&v401 + 1) = v401;
              operator delete((void *)v401);
            }
            if (v399[0])
            {
              v399[1] = v399[0];
              operator delete(v399[0]);
            }
            if ((void)v397)
            {
              *((void *)&v397 + 1) = v397;
              operator delete((void *)v397);
            }
          }
        }
        if (v349)
        {
          unint64_t v350 = v349;
          operator delete(v349);
        }
        if (*((void *)&v346 + 1))
        {
          *(void *)&long long v347 = *((void *)&v346 + 1);
          operator delete(*((void **)&v346 + 1));
        }
        if ((void)v345)
        {
          *((void *)&v345 + 1) = v345;
          operator delete((void *)v345);
        }
        if (v22[4] == -1) {
          goto LABEL_275;
        }
        uint64_t v236 = (uint64_t)v356;
        if ((unint64_t)v356 < v357) {
          goto LABEL_270;
        }
LABEL_288:
        unsigned int v356 = (char *)sub_A4CBF4((uint64_t *)&v355, (uint64_t)v405);
        uint64_t v237 = *((void *)&v387 + 1);
        if (*((void *)&v387 + 1) >= (unint64_t)v388) {
          goto LABEL_274;
        }
LABEL_289:
        *(void *)uint64_t v237 = 0;
        *(void *)(v237 + 8) = 0;
        *(void *)(v237 + 16) = 0;
        unsigned int v243 = (char *)v355;
        unsigned __int16 v244 = v356;
        int64_t v245 = v356 - (unsigned char *)v355;
        if (v356 != v355)
        {
          unint64_t v246 = 0xCF3CF3CF3CF3CF3DLL * (v245 >> 3);
          if (v246 >= 0x186186186186187) {
            sub_2E00();
          }
          uint64_t v247 = (char *)operator new(v245);
          uint64_t v248 = 0;
          *(void *)uint64_t v237 = v247;
          *(void *)(v237 + 8) = v247;
          *(void *)(v237 + 16) = &v247[168 * v246];
          do
          {
            unint64_t v250 = (long long *)&v247[v248];
            uint64_t v251 = (long long *)&v243[v248];
            *(_DWORD *)&v247[v248 + 160] = *(_DWORD *)&v243[v248 + 160];
            int v252 = *(_DWORD *)&v243[v248 + 160];
            if (v252 == 1)
            {
              long long v249 = *v251;
              *(long long *)((char *)v250 + 12) = *(long long *)((char *)v251 + 12);
              long long *v250 = v249;
            }
            else if (!v252)
            {
              sub_9F6FA0((uint64_t)v250, v251);
            }
            v248 += 168;
          }
          while (&v243[v248] != v244);
          *(void *)(v237 + 8) = &v247[v248];
        }
        char v253 = v358;
        *(void *)(v237 + 32) = 0;
        *(unsigned char *)(v237 + 24) = v253;
        *(void *)(v237 + 40) = 0;
        *(void *)(v237 + 48) = 0;
        long long v254 = v359;
        uint64_t v255 = v360 - (unsigned char *)v359;
        if (v360 != v359)
        {
          if (0xCCCCCCCCCCCCCCCDLL * (v255 >> 3) >= 0x666666666666667) {
            sub_2E00();
          }
          int v256 = (char *)operator new(v360 - (unsigned char *)v359);
          *(void *)(v237 + 32) = v256;
          *(void *)(v237 + 40) = v256;
          uint64_t v257 = &v256[8 * (v255 >> 3)];
          *(void *)(v237 + 48) = v257;
          memcpy(v256, v254, v255 - 7);
          *(void *)(v237 + 40) = v257;
        }
        uint64_t v258 = *(void *)v362;
        *(void *)(v237 + 63) = *(void *)&v362[7];
        *(void *)(v237 + 56) = v258;
        uint64_t v238 = (char *)(v237 + 72);
LABEL_302:
        *((void *)&v387 + 1) = v238;
        unsigned int v260 = v22[5];
        *(_DWORD *)long long v395 = v338 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * v21 + 1;
        int v259 = *(_DWORD *)v395;
        uint64_t v261 = *(void *)(a1 + 192);
        uint64_t v262 = *(unsigned int *)(sub_B25B80(v336, (unsigned int *)v395) + 4);
        *(_DWORD *)long long v395 = v259;
        uint64_t v263 = *(void *)(a1 + 192);
        uint64_t v22 = (unsigned int *)(v261 + (v262 << 6));
        long long v264 = (unsigned int *)(v263
                              + ((unint64_t)*(unsigned int *)(sub_B25B80(v336, (unsigned int *)v395) + 8) << 6));
        if (v22 == v264)
        {
LABEL_305:
          uint64_t v22 = 0;
        }
        else
        {
          while (v22[6] != v260)
          {
            v22 += 16;
            if (v22 == v264) {
              goto LABEL_305;
            }
          }
        }
        if (!v415)
        {
          if ((void)v412)
          {
            *((void *)&v412 + 1) = v412;
            operator delete((void *)v412);
          }
          if ((void)v409)
          {
            *((void *)&v409 + 1) = v409;
            operator delete((void *)v409);
          }
          if (v407[0])
          {
            v407[1] = v407[0];
            operator delete(v407[0]);
          }
        }
        if (v359)
        {
          int v360 = v359;
          operator delete(v359);
        }
        uint64_t v265 = (char *)v355;
        if (v355)
        {
          uint64_t v266 = v356;
          uint64_t v23 = v355;
          if (v356 != v355)
          {
            do
            {
              if (!*((_DWORD *)v266 - 2))
              {
                uint64_t v267 = (void *)*((void *)v266 - 6);
                if (v267)
                {
                  *((void *)v266 - 5) = v267;
                  operator delete(v267);
                }
                unsigned int v268 = (void *)*((void *)v266 - 10);
                if (v268)
                {
                  *((void *)v266 - 9) = v268;
                  operator delete(v268);
                }
                unsigned int v269 = (void *)*((void *)v266 - 13);
                if (v269)
                {
                  *((void *)v266 - 12) = v269;
                  operator delete(v269);
                }
              }
              v266 -= 168;
            }
            while (v266 != v265);
            uint64_t v23 = v355;
          }
          unsigned int v356 = v265;
          operator delete(v23);
        }
        --v338;
        if (*v22 == -1) {
          goto LABEL_390;
        }
        goto LABEL_27;
      }
LABEL_56:
      ++v47;
    }
  }
LABEL_7:
  uint64_t result = std::string::operator=(v328, (const std::string *)(a1 + 528));
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a1 + 616);
  *(_OWORD *)(a2 + 136) = *(_OWORD *)(a1 + 632);
  *(_OWORD *)(a2 + 152) = *(_OWORD *)(a1 + 648);
  *(_OWORD *)(a2 + 168) = *(_OWORD *)(a1 + 664);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 552);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 568);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 584);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 600);
  return result;
}

void sub_B2E354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  __cxa_guard_abort(&qword_24F7308);
  if (__p)
  {
    operator delete(__p);
    uint64_t v67 = a52;
    if (!a52)
    {
LABEL_3:
      uint64_t v68 = a49;
      if (!a49) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v67 = a52;
    if (!a52) {
      goto LABEL_3;
    }
  }
  operator delete(v67);
  uint64_t v68 = a49;
  if (!a49)
  {
LABEL_4:
    if (LODWORD(STACK[0x470])) {
      goto LABEL_13;
    }
LABEL_9:
    uint64_t v69 = (void *)STACK[0x448];
    if (STACK[0x448])
    {
      STACK[0x450] = (unint64_t)v69;
      operator delete(v69);
      uint64_t v70 = (void *)STACK[0x428];
      if (!STACK[0x428])
      {
LABEL_11:
        int v71 = (void *)STACK[0x410];
        if (!STACK[0x410]) {
          goto LABEL_13;
        }
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v70 = (void *)STACK[0x428];
      if (!STACK[0x428]) {
        goto LABEL_11;
      }
    }
    STACK[0x430] = (unint64_t)v70;
    operator delete(v70);
    int v71 = (void *)STACK[0x410];
    if (!STACK[0x410])
    {
LABEL_13:
      if (a66)
      {
        operator delete(a66);
        int v72 = a62;
        if (!a62)
        {
LABEL_15:
          uint64_t v73 = (void *)STACK[0x300];
          if (!STACK[0x300]) {
            goto LABEL_16;
          }
          goto LABEL_40;
        }
      }
      else
      {
        int v72 = a62;
        if (!a62) {
          goto LABEL_15;
        }
      }
      uint64_t v79 = a63;
      uint64_t v80 = v72;
      if ((void *)a63 != v72)
      {
        do
        {
          if (!*(_DWORD *)(v79 - 8))
          {
            char v81 = *(void **)(v79 - 48);
            if (v81)
            {
              *(void *)(v79 - 40) = v81;
              operator delete(v81);
            }
            uint64_t v82 = *(void **)(v79 - 80);
            if (v82)
            {
              *(void *)(v79 - 72) = v82;
              operator delete(v82);
            }
            uint64_t v83 = *(void **)(v79 - 104);
            if (v83)
            {
              *(void *)(v79 - 96) = v83;
              operator delete(v83);
            }
          }
          v79 -= 168;
        }
        while ((void *)v79 != v72);
        uint64_t v80 = a62;
      }
      operator delete(v80);
      uint64_t v73 = (void *)STACK[0x300];
      if (!STACK[0x300])
      {
LABEL_16:
        uint64_t v74 = (void *)STACK[0x2E8];
        if (!STACK[0x2E8]) {
          goto LABEL_17;
        }
        goto LABEL_41;
      }
LABEL_40:
      STACK[0x308] = (unint64_t)v73;
      operator delete(v73);
      uint64_t v74 = (void *)STACK[0x2E8];
      if (!STACK[0x2E8])
      {
LABEL_17:
        char v75 = (void *)STACK[0x2D0];
        if (!STACK[0x2D0]) {
          goto LABEL_18;
        }
        goto LABEL_42;
      }
LABEL_41:
      STACK[0x2F0] = (unint64_t)v74;
      operator delete(v74);
      char v75 = (void *)STACK[0x2D0];
      if (!STACK[0x2D0])
      {
LABEL_18:
        unint64_t v76 = STACK[0x2B8];
        if (!STACK[0x2B8]) {
          goto LABEL_19;
        }
        goto LABEL_43;
      }
LABEL_42:
      STACK[0x2D8] = (unint64_t)v75;
      operator delete(v75);
      unint64_t v76 = STACK[0x2B8];
      if (!STACK[0x2B8])
      {
LABEL_19:
        if (SLOBYTE(STACK[0x277]) < 0) {
          goto LABEL_20;
        }
        goto LABEL_47;
      }
LABEL_43:
      uint64_t v84 = (void **)STACK[0x2C0];
      int v85 = (void *)v76;
      if (STACK[0x2C0] != v76)
      {
        do
        {
          v84 -= 9;
          sub_9F5F58(a9, v84);
        }
        while (v84 != (void **)v76);
        int v85 = (void *)STACK[0x2B8];
      }
      STACK[0x2C0] = v76;
      operator delete(v85);
      if (SLOBYTE(STACK[0x277]) < 0)
      {
LABEL_20:
        operator delete((void *)STACK[0x260]);
        unint64_t v77 = *a10;
        if (*a10) {
          goto LABEL_21;
        }
        goto LABEL_48;
      }
LABEL_47:
      unint64_t v77 = *a10;
      if (*a10)
      {
LABEL_21:
        *(void *)(a20 + 200) = v77;
        operator delete(v77);
        if ((*(char *)(a20 + 55) & 0x80000000) == 0) {
          goto LABEL_22;
        }
        goto LABEL_49;
      }
LABEL_48:
      if ((*(char *)(a20 + 55) & 0x80000000) == 0)
      {
LABEL_22:
        __int16 v78 = *a13;
        if (!*a13) {
          goto LABEL_23;
        }
        goto LABEL_50;
      }
LABEL_49:
      operator delete(*a11);
      __int16 v78 = *a13;
      if (!*a13) {
LABEL_23:
      }
        _Unwind_Resume(a1);
LABEL_50:
      uint64_t v86 = a20;
      uint64_t v87 = *(void *)(a20 + 16);
      __int16 v88 = v78;
      if ((void *)v87 != v78)
      {
        do
        {
          v87 -= 296;
          sub_9F5E28(a20 + 24, v87);
        }
        while ((void *)v87 != v78);
        __int16 v88 = *a13;
        uint64_t v86 = a20;
      }
      *(void *)(v86 + 16) = v78;
      operator delete(v88);
      _Unwind_Resume(a1);
    }
LABEL_12:
    STACK[0x418] = (unint64_t)v71;
    operator delete(v71);
    goto LABEL_13;
  }
LABEL_8:
  operator delete(v68);
  if (LODWORD(STACK[0x470])) {
    goto LABEL_13;
  }
  goto LABEL_9;
}

void sub_B2E884(uint64_t a1)
{
  *(_DWORD *)(a1 + 240) = 0;
  if (*(void *)(a1 + 144) | *(void *)(a1 + 184))
  {
    for (uint64_t i = *(void *)(a1 + 152); i != *(void *)(a1 + 160); i += 16)
    {
      if (*(void *)i)
      {
        free(*(void **)i);
        *(void *)uint64_t i = 0;
      }
      *(void *)(i + 8) = 0;
    }
    *(void *)(a1 + 184) = 0;
  }
  *(uint64x2_t *)(a1 + 104) = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 120), (float)*(unint64_t *)(a1 + 176))));
  *(unsigned char *)(a1 + 128) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 200) = *(void *)(a1 + 192);
  *(void *)(a1 + 224) = 0;
  unsigned int v3 = *(unsigned int **)(a1 + 272);
  int v4 = *(unsigned int **)(a1 + 280);
  if (v3 != v4)
  {
    uint64_t v5 = *(void *)(a1 + 248);
    uint64_t v6 = *(unsigned int **)(a1 + 272);
    do
    {
      unsigned int v7 = *v6++;
      *(void *)(v5 + (((unint64_t)v7 >> 3) & 0x1FFFFFF8)) &= ~(1 << v7);
    }
    while (v6 != v4);
  }
  *(void *)(a1 + 280) = v3;
  int v8 = *(unsigned int **)(a1 + 320);
  uint64_t v9 = *(unsigned int **)(a1 + 328);
  if (v8 != v9)
  {
    uint64_t v10 = *(void *)(a1 + 296);
    uint64_t v11 = *(unsigned int **)(a1 + 320);
    do
    {
      unsigned int v12 = *v11++;
      *(void *)(v10 + (((unint64_t)v12 >> 3) & 0x1FFFFFF8)) &= ~(1 << v12);
    }
    while (v11 != v9);
  }
  *(void *)(a1 + 328) = v8;
  uint64_t v13 = *(unsigned int **)(a1 + 392);
  uint64_t v14 = *(unsigned int **)(a1 + 400);
  if (v13 != v14)
  {
    uint64_t v15 = *(void *)(a1 + 368);
    uint64_t v16 = *(void *)(a1 + 344);
    uint64_t v17 = *(unsigned int **)(a1 + 392);
    do
    {
      unsigned int v18 = *v17++;
      *(void *)(v15 + (((unint64_t)v18 >> 3) & 0x1FFFFFF8)) &= ~(1 << v18);
      *(_DWORD *)(v16 + 4 * v18) = -1;
    }
    while (v17 != v14);
  }
  *(void *)(a1 + 400) = v13;
  sub_BD5698(a1 + 424);
  char v21 = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)&__dst, &__p);
  uint64_t v19 = (void **)(a1 + 528);
  if (*(char *)(a1 + 551) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)uint64_t v19 = __dst;
  *(void *)(a1 + 544) = v23;
  HIBYTE(v23) = 0;
  LOBYTE(__dst) = 0;
  *(_OWORD *)(a1 + 616) = v28;
  *(_OWORD *)(a1 + 632) = v29;
  *(_OWORD *)(a1 + 648) = v30;
  *(_OWORD *)(a1 + 664) = v31;
  *(_OWORD *)(a1 + 552) = v24;
  *(_OWORD *)(a1 + 568) = v25;
  *(_OWORD *)(a1 + 584) = v26;
  *(_OWORD *)(a1 + 600) = v27;
  if (v21 < 0) {
    operator delete((void *)__p);
  }
  *(int32x2_t *)(a1 + 96) = vadd_s32(vdup_n_s32(2 * *(_DWORD *)(a1 + 16)), (int32x2_t)0x200000004);
  sub_BD5704(a1 + 424, *(void *)(a1 + 8));
}

void sub_B2EAC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_B2EADC(uint64_t a1)
{
  if (sub_A276F8(*(void *)(a1 + 24)))
  {
    int v2 = *(_DWORD *)(a1 + 68);
    int v3 = *(_DWORD *)(a1 + 240);
    *(_DWORD *)(a1 + 240) = v3 + 1;
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v23 = 0x1FFFFFFFDLL;
    int v5 = sub_AD28B0(v4, &v23);
    int v24 = v5;
    LODWORD(v23) = 0;
    uint64_t v6 = *(void *)(a1 + 192);
    unsigned int v7 = (char *)(v6 + ((unint64_t)*(unsigned int *)(sub_B25B80(a1 + 104, (unsigned int *)&v23) + 4) << 6));
    LODWORD(v23) = 0;
    uint64_t v8 = *(void *)(a1 + 192);
    uint64_t v9 = sub_B25B80(a1 + 104, (unsigned int *)&v23);
    sub_B257BC(a1 + 104, 0, v7, (unsigned char *)(v8 + ((unint64_t)*(unsigned int *)(v9 + 8) << 6)));
    long long v13 = xmmword_20E2060;
    uint64_t v14 = -1;
    int v15 = v3;
    int v16 = v2;
    uint64_t v17 = 0;
    int v18 = 0;
    int v19 = 10 * v2;
    char v20 = 0;
    uint64_t v21 = -1;
    int v22 = 0x7FFFFFFF;
    sub_B30644((void *)(a1 + 104), &v13, 0, 0, 1);
    int v10 = *(_DWORD *)(a1 + 96);
    unsigned int v11 = v10 + v10 * v5;
    unsigned int v12 = v11 + 2;
    if (*(unsigned char *)(a1 + 20))
    {
      if (!sub_B30774((void *)(a1 + 104), 0, v12, v11, v10 + v10 * *(_DWORD *)(a1 + 416), 0x80000000)) {
        return;
      }
    }
    else if (!sub_B30774((void *)(a1 + 104), 0, v12, v11, -1, 0x80000000))
    {
      return;
    }
    sub_A3EF14((uint64_t *)(a1 + 248), &v24);
  }
}

double sub_B2EC4C(uint64_t a1, int a2)
{
  sub_725D0((uint64_t)v34);
  uint64_t v4 = *(unsigned int **)(a1 + 272);
  int v5 = *(unsigned int **)(a1 + 280);
  if (v4 != v5)
  {
    int v6 = a2 + 1;
    int v7 = a2 + 2;
    int v32 = ~a2;
    while (1)
    {
      unsigned int v33 = *v4;
      unint64_t v8 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), v33);
      if (HIDWORD(v8) == 1 && (v8 + 3) < 2)
      {
LABEL_12:
        int v13 = 0;
        goto LABEL_17;
      }
      uint64_t v10 = *(void *)(*(void *)(a1 + 24) + 4120);
      uint64_t v11 = v10 + 24;
      if (*(unsigned char *)(v10 + 17)) {
        break;
      }
      unsigned int v12 = (int *)sub_498D5C(v11, __ROR8__(v8, 32), 0, "stop");
      int v16 = (unsigned __int16 *)((char *)v12 - *v12);
      if (*v16 >= 0x15u)
      {
        unsigned int v15 = v16[10];
        if (v15) {
          goto LABEL_15;
        }
      }
      int v13 = 300;
LABEL_17:
      unsigned int v35 = 0;
      uint64_t v17 = *(void *)(a1 + 192);
      int v18 = (char *)(v17 + ((unint64_t)*(unsigned int *)(sub_B25B80(a1 + 104, &v35) + 4) << 6));
      unsigned int v35 = 0;
      uint64_t v19 = *(void *)(a1 + 192);
      uint64_t v20 = sub_B25B80(a1 + 104, &v35);
      sub_B257BC(a1 + 104, 0, v18, (unsigned char *)(v19 + ((unint64_t)*(unsigned int *)(v20 + 8) << 6)));
      sub_B30DA0((void *)(a1 + 104), v6 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * v33, 0);
      unsigned int v35 = 0;
      uint64_t v21 = *(void *)(a1 + 192);
      int v22 = (unsigned int *)(v21 + ((unint64_t)*(unsigned int *)(sub_B25B80(a1 + 104, &v35) + 4) << 6));
      unsigned int v35 = 0;
      uint64_t v23 = *(void *)(a1 + 192);
      for (uint64_t i = (unsigned int *)(v23 + ((unint64_t)*(unsigned int *)(sub_B25B80(a1 + 104, &v35) + 8) << 6));
            v22 != i;
            v22 += 16)
      {
        unsigned int *v22 = v33;
        unsigned int v25 = v22[7];
        v22[3] = v25;
        v22[4] = -1;
        v22[7] = v25 + v13 / -10;
      }
      unsigned int v26 = v33;
      int v27 = *(_DWORD *)(a1 + 96);
      if (*(unsigned char *)(a1 + 20))
      {
        int v28 = v27 + v27 * *(_DWORD *)(a1 + 416) + 1;
        uint64_t v29 = *(void *)(a1 + 48);
        if (!v29) {
          goto LABEL_23;
        }
      }
      else
      {
        int v28 = -1;
        uint64_t v29 = *(void *)(a1 + 48);
        if (!v29)
        {
LABEL_23:
          int v30 = 0x80000000;
          goto LABEL_24;
        }
      }
      int v30 = sub_AD7004(v29, v33, *(_DWORD *)(a1 + 100) + v32);
LABEL_24:
      if (sub_B30774((void *)(a1 + 104), 0, v7 + v27 + v27 * v26, v27 + v27 * v26 + 1, v28, v30)) {
        sub_A3EF14((uint64_t *)(a1 + 296), &v33);
      }
      if (++v4 == v5) {
        goto LABEL_26;
      }
    }
    unsigned int v12 = (int *)sub_A1A290(v11, v8, 0, "transfers at stop");
    int v13 = 0;
    uint64_t v14 = (unsigned __int16 *)((char *)v12 - *v12);
    if (*v14 < 5u) {
      goto LABEL_17;
    }
    unsigned int v15 = v14[2];
    if (!v15) {
      goto LABEL_12;
    }
LABEL_15:
    int v13 = 10 * *(int *)((char *)v12 + v15);
    goto LABEL_17;
  }
LABEL_26:
  double result = sub_72688((uint64_t)v34) + *(double *)(a1 + 568);
  *(double *)(a1 + 568) = result;
  return result;
}

double sub_B2EF08(uint64_t a1, int a2)
{
  sub_725D0((uint64_t)v290);
  uint64_t v4 = *(unsigned int **)(a1 + 272);
  __int16 v271 = *(unsigned int **)(a1 + 280);
  if (v4 != v271)
  {
    int v276 = a2 + 2;
    int v277 = a2 + 1;
    int v274 = ~a2;
    uint64_t v275 = (uint64_t *)(a1 + 296);
    long long v270 = (void **)(a1 + 320);
    uint64_t v273 = a1;
    int v282 = (void *)(a1 + 104);
    while (1)
    {
      __int16 v272 = v4;
      unsigned int v283 = *v4;
      int v5 = (unint64_t *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), *v4);
      sub_A28D38((uint64_t)&v284, *(void *)(a1 + 24), *v5);
      int v6 = v285;
      int v7 = &v286;
      if (v289) {
        int v7 = v288;
      }
      if ((unint64_t)v285 < *v7) {
        break;
      }
LABEL_3:
      uint64_t v4 = v272 + 1;
      if (v272 + 1 == v271) {
        goto LABEL_316;
      }
    }
LABEL_13:
    uint64_t v11 = 0;
    unint64_t v12 = __ROR8__(*v6, 32);
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = *(void *)(v13 + 72) - 1;
    unint64_t v15 = 0xC4CEB9FE1A85EC53
        * ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) >> 33));
    unint64_t v16 = v15 ^ (v15 >> 33);
    uint64_t v17 = *(void *)(v13 + 48);
    uint64_t v18 = v17 + 11;
    uint64_t v19 = -1;
    for (unint64_t i = v16; ; unint64_t i = v11 + v21)
    {
      uint64_t v21 = i & v14;
      unint64_t v22 = (i & v14) / 0x30;
      unint64_t v23 = v21 - 48 * v22;
      if (((*(unsigned __int8 *)(v17 + 16 * v22 + (v23 >> 3) + 10) >> (v23 & 7)) & 1) == 0)
      {
        if (v19 == -1) {
          unint64_t v59 = v21;
        }
        else {
          unint64_t v59 = v19;
        }
        if (!sub_AD2F40(*(void *)(a1 + 32), 1)) {
          goto LABEL_98;
        }
        goto LABEL_55;
      }
      uint64_t v24 = *(void *)(v17 + 16 * v22);
      if (!*(void *)(v13 + 40)) {
        goto LABEL_33;
      }
      unsigned int v25 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
      if ((unsigned __int16)(v21 - 48 * v22) < 9u)
      {
        __int16 v26 = 0;
        LOBYTE(v31) = v21 - 48 * v22;
        goto LABEL_29;
      }
      __int16 v26 = 0;
      uint64_t v27 = (unsigned __int16)(v21 - 48 * v22 - 9) >> 3;
      if ((unsigned __int16)(v21 - 48 * v22 - 9) >> 3)
      {
        __int16 v28 = 0;
        uint64_t v29 = v27 + 1;
        uint64_t v30 = (v27 + 1) & 0x3FFE;
        unsigned __int16 v31 = v23 - 8 * v30;
        int v32 = &v25[v30];
        unsigned int v33 = (unsigned __int8 *)(v18 + 16 * v22);
        uint64_t v34 = v30;
        do
        {
          uint64_t v35 = *(v33 - 1);
          int v36 = *v33;
          v33 += 2;
          v26 += byte_20EBFB6[v35];
          v28 += byte_20EBFB6[v36];
          v34 -= 2;
        }
        while (v34);
        v26 += v28;
        if (v29 == v30) {
          goto LABEL_28;
        }
      }
      else
      {
        unsigned __int16 v31 = v21 - 48 * v22;
        int v32 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
      }
      do
      {
        int v37 = *v32++;
        v26 += byte_20EBFB6[v37];
        v31 -= 8;
      }
      while (v31 > 8u);
LABEL_28:
      v25 += ((unsigned __int16)(v23 - 9) >> 3) + 1;
LABEL_29:
      uint64_t v38 = (_DWORD *)(v24
                     + 12
                     * (unsigned __int16)(v26 + byte_20EBFB6[~(-1 << v31) & (unint64_t)*v25]));
      BOOL v39 = *(_DWORD *)(v13 + 36) == v38[1] && *(_DWORD *)(v13 + 32) == *v38;
      if (v39)
      {
        if (v19 == -1) {
          uint64_t v19 = v21;
        }
        goto LABEL_16;
      }
LABEL_33:
      unint64_t v40 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
      if ((unsigned __int16)(v21 - 48 * v22) < 9u)
      {
        __int16 v41 = 0;
        uint64_t v52 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
        LOBYTE(v46) = v21 - 48 * v22;
        goto LABEL_43;
      }
      __int16 v41 = 0;
      uint64_t v42 = (unsigned __int16)(v21 - 48 * v22 - 9) >> 3;
      if ((unsigned __int16)(v21 - 48 * v22 - 9) >> 3)
      {
        __int16 v43 = 0;
        uint64_t v44 = v42 + 1;
        uint64_t v45 = (v42 + 1) & 0x3FFE;
        unsigned __int16 v46 = v23 - 8 * v45;
        uint64_t v47 = &v40[v45];
        unint64_t v48 = (unsigned __int8 *)(v18 + 16 * v22);
        uint64_t v49 = v45;
        do
        {
          uint64_t v50 = *(v48 - 1);
          int v51 = *v48;
          v48 += 2;
          v41 += byte_20EBFB6[v50];
          v43 += byte_20EBFB6[v51];
          v49 -= 2;
        }
        while (v49);
        v41 += v43;
        if (v44 == v45) {
          goto LABEL_42;
        }
      }
      else
      {
        unsigned __int16 v46 = v21 - 48 * v22;
        uint64_t v47 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
      }
      do
      {
        int v53 = *v47++;
        v41 += byte_20EBFB6[v53];
        v46 -= 8;
      }
      while (v46 > 8u);
LABEL_42:
      uint64_t v52 = &v40[((unsigned __int16)(v23 - 9) >> 3) + 1];
LABEL_43:
      if (v12 == *(void *)(v24
                            + 12
                            * (unsigned __int16)(v41 + byte_20EBFB6[~(-1 << v46) & (unint64_t)*v52])))
      {
        if (v21 != -1)
        {
          if ((unsigned __int16)(v21 - 48 * v22) < 9u)
          {
            __int16 v56 = 0;
          }
          else
          {
            if ((((_WORD)v21 - 48 * (_WORD)v22 - 8) & 0xFFF8) != 0) {
              __int16 v54 = 8;
            }
            else {
              __int16 v54 = v21 - 48 * v22 - 8;
            }
            unsigned __int16 v55 = ~v54 + v21 - 48 * v22;
            if (v55 < 8u)
            {
              __int16 v56 = 0;
              unsigned __int16 v57 = v23;
              unint64_t v58 = (unsigned __int8 *)(v17 + 16 * v22 + 10);
              goto LABEL_103;
            }
            __int16 v105 = 0;
            __int16 v106 = 0;
            uint64_t v107 = (v55 >> 3) + 1;
            unsigned __int16 v57 = v23 - 8 * (((v55 >> 3) + 1) & 0x3FFE);
            unint64_t v58 = &v40[v107 & 0x3FFE];
            unint64_t v108 = (unsigned __int8 *)(v17 + 16 * v22 + 11);
            uint64_t v109 = v107 & 0x3FFE;
            do
            {
              uint64_t v110 = *(v108 - 1);
              int v111 = *v108;
              v108 += 2;
              v105 += byte_20EBFB6[v110];
              v106 += byte_20EBFB6[v111];
              v109 -= 2;
            }
            while (v109);
            __int16 v56 = v106 + v105;
            if ((v107 & 0x3FFE) != v107)
            {
              do
              {
LABEL_103:
                int v112 = *v58++;
                v56 += byte_20EBFB6[v112];
                v57 -= 8;
              }
              while (v57 > 8u);
            }
            v40 += ((unsigned __int16)(v23 - 9) >> 3) + 1;
            LOBYTE(v23) = v57;
          }
          uint64_t v113 = *(void *)(v13 + 56);
          unsigned __int16 v114 = v56 + byte_20EBFB6[~(-1 << v23) & (unint64_t)*v40];
          uint64_t v115 = v17 + 16 * v22;
          if (*(unsigned __int16 *)(v115 + 8) != v114 || v115 + 16 == v113)
          {
            __int16 v104 = (_DWORD *)(v24 + 12 * v114);
          }
          else
          {
            uint64_t v117 = v115 + 32;
            do
            {
              if (*(_WORD *)(v117 - 8)) {
                BOOL v118 = 1;
              }
              else {
                BOOL v118 = v117 == v113;
              }
              v117 += 16;
            }
            while (!v118);
            __int16 v104 = *(_DWORD **)(v117 - 32);
          }
          goto LABEL_117;
        }
        unint64_t v59 = -1;
        if (!sub_AD2F40(*(void *)(a1 + 32), 1))
        {
LABEL_98:
          unint64_t v291 = v12;
          int v292 = -1;
          sub_AD3484(v13, (uint64_t *)&v291, v59, v293);
          __int16 v104 = (_DWORD *)v294;
          goto LABEL_117;
        }
LABEL_55:
        uint64_t v60 = 0;
        unint64_t v291 = v12;
        int v292 = -1;
        uint64_t v61 = *(void *)(v13 + 72) - 1;
        uint64_t v62 = *(void *)(v13 + 48);
        uint64_t v63 = v62 + 11;
        uint64_t v64 = -1;
        while (2)
        {
          uint64_t v65 = v16 & v61;
          unint64_t v66 = (v16 & v61) / 0x30;
          unint64_t v67 = (v16 & v61) % 0x30;
          if (((*(unsigned __int8 *)(v62 + 16 * v66 + (v67 >> 3) + 10) >> (v67 & 7)) & 1) == 0)
          {
            if (v64 == -1) {
              unint64_t v103 = v16 & v61;
            }
            else {
              unint64_t v103 = v64;
            }
            goto LABEL_96;
          }
          uint64_t v68 = *(void *)(v13 + 40);
          uint64_t v69 = *(void *)(v62 + 16 * v66);
          if (!v68) {
            break;
          }
          uint64_t v70 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
          if ((unsigned __int16)((v16 & v61) % 0x30) < 9u)
          {
            __int16 v71 = 0;
            LOBYTE(v72) = (v16 & v61) % 0x30;
            goto LABEL_71;
          }
          __int16 v71 = 0;
          uint64_t v72 = (unsigned __int16)(v65 - 48 * v66 - 9) >> 3;
          if (!((unsigned __int16)(v65 - 48 * v66 - 9) >> 3))
          {
            LODWORD(v72) = (v16 & v61) % 0x30;
            unint64_t v76 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
            do
            {
LABEL_69:
              int v81 = *v76++;
              v71 += byte_20EBFB6[v81];
              LOWORD(v72) = v72 - 8;
            }
            while ((unsigned __int16)v72 > 8u);
            goto LABEL_70;
          }
          __int16 v73 = 0;
          uint64_t v74 = v72 + 1;
          uint64_t v75 = (v72 + 1) & 0x3FFE;
          LOWORD(v72) = v67 - 8 * v75;
          unint64_t v76 = &v70[v75];
          unint64_t v77 = (unsigned __int8 *)(v63 + 16 * v66);
          uint64_t v78 = v75;
          do
          {
            uint64_t v79 = *(v77 - 1);
            int v80 = *v77;
            v77 += 2;
            v71 += byte_20EBFB6[v79];
            v73 += byte_20EBFB6[v80];
            v78 -= 2;
          }
          while (v78);
          v71 += v73;
          if (v74 != v75) {
            goto LABEL_69;
          }
LABEL_70:
          v70 += ((unsigned __int16)(v67 - 9) >> 3) + 1;
LABEL_71:
          uint64_t v82 = (_DWORD *)(v69
                         + 12
                         * (unsigned __int16)(v71 + byte_20EBFB6[~(-1 << v72) & (unint64_t)*v70]));
          if (*(_DWORD *)(v13 + 36) == v82[1] && *(_DWORD *)(v13 + 32) == *v82)
          {
            if (v64 == -1) {
              uint64_t v64 = v16 & v61;
            }
LABEL_58:
            unint64_t v16 = ++v60 + v65;
            continue;
          }
          break;
        }
        uint64_t v84 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
        if ((unsigned __int16)((v16 & v61) % 0x30) < 9u)
        {
          __int16 v85 = 0;
          uint64_t v96 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
          LOBYTE(v90) = (v16 & v61) % 0x30;
          goto LABEL_85;
        }
        __int16 v85 = 0;
        uint64_t v86 = (unsigned __int16)(v65 - 48 * v66 - 9) >> 3;
        if (!((unsigned __int16)(v65 - 48 * v66 - 9) >> 3))
        {
          unsigned __int16 v90 = (v16 & v61) % 0x30;
          unint64_t v91 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
          do
          {
LABEL_83:
            int v97 = *v91++;
            v85 += byte_20EBFB6[v97];
            v90 -= 8;
          }
          while (v90 > 8u);
          goto LABEL_84;
        }
        __int16 v87 = 0;
        uint64_t v88 = v86 + 1;
        uint64_t v89 = (v86 + 1) & 0x3FFE;
        unsigned __int16 v90 = v67 - 8 * v89;
        unint64_t v91 = &v84[v89];
        uint64_t v92 = (unsigned __int8 *)(v63 + 16 * v66);
        uint64_t v93 = v89;
        do
        {
          uint64_t v94 = *(v92 - 1);
          int v95 = *v92;
          v92 += 2;
          v85 += byte_20EBFB6[v94];
          v87 += byte_20EBFB6[v95];
          v93 -= 2;
        }
        while (v93);
        v85 += v87;
        if (v88 != v89) {
          goto LABEL_83;
        }
LABEL_84:
        uint64_t v96 = &v84[((unsigned __int16)(v67 - 9) >> 3) + 1];
LABEL_85:
        if (v12 != *(void *)(v69
                              + 12
                              * (unsigned __int16)(v85
                                                 + byte_20EBFB6[~(-1 << v90) & (unint64_t)*v96])))
          goto LABEL_58;
        if (v65 == -1)
        {
          unint64_t v103 = -1;
LABEL_96:
          sub_AD3484(v13, (uint64_t *)&v291, v103, v293);
          __int16 v104 = (_DWORD *)v294;
          goto LABEL_117;
        }
        if ((unsigned __int16)((v16 & v61) % 0x30) < 9u)
        {
          __int16 v100 = 0;
        }
        else
        {
          if ((((_WORD)v65 - 48 * (_WORD)v66 - 8) & 0xFFF8) != 0) {
            __int16 v98 = 8;
          }
          else {
            __int16 v98 = v65 - 48 * v66 - 8;
          }
          unsigned __int16 v99 = ~v98 + v65 - 48 * v66;
          if (v99 < 8u)
          {
            __int16 v100 = 0;
            unsigned __int16 v101 = v67;
            uint64_t v102 = (unsigned __int8 *)(v62 + 16 * v66 + 10);
            goto LABEL_185;
          }
          __int16 v181 = 0;
          __int16 v182 = 0;
          uint64_t v183 = (v99 >> 3) + 1;
          unsigned __int16 v101 = v67 - 8 * (((v99 >> 3) + 1) & 0x3FFE);
          uint64_t v102 = &v84[v183 & 0x3FFE];
          int v184 = (unsigned __int8 *)(v62 + 16 * v66 + 11);
          uint64_t v185 = v183 & 0x3FFE;
          do
          {
            uint64_t v186 = *(v184 - 1);
            int v187 = *v184;
            v184 += 2;
            v181 += byte_20EBFB6[v186];
            v182 += byte_20EBFB6[v187];
            v185 -= 2;
          }
          while (v185);
          __int16 v100 = v182 + v181;
          if ((v183 & 0x3FFE) != v183)
          {
            do
            {
LABEL_185:
              int v188 = *v102++;
              v100 += byte_20EBFB6[v188];
              v101 -= 8;
            }
            while (v101 > 8u);
          }
          v84 += ((unsigned __int16)(v67 - 9) >> 3) + 1;
          LOBYTE(v67) = v101;
        }
        uint64_t v189 = v62 + 16 * v66;
        unsigned int v190 = *(_DWORD ***)(v13 + 56);
        unsigned __int16 v191 = v100 + byte_20EBFB6[~(-1 << v67) & (unint64_t)*v84];
        __int16 v104 = (_DWORD *)(v69 + 12 * v191);
        if (*(unsigned __int16 *)(v189 + 8) == v191)
        {
          uint64_t v192 = v189 + 16;
          if ((_DWORD **)(v189 + 16) != v190)
          {
            while (1)
            {
              int v193 = (_DWORD **)v192;
              if (*(_WORD *)(v192 + 8)) {
                break;
              }
              v192 += 16;
              if (v193 + 2 == v190)
              {
                uint64_t v189 = *(void *)(v13 + 56);
                goto LABEL_193;
              }
            }
            uint64_t v189 = v192;
LABEL_193:
            __int16 v104 = *v193;
            goto LABEL_194;
          }
        }
        else
        {
LABEL_194:
          if ((_DWORD **)v189 != v190 && v68)
          {
            do
            {
              if (*(_DWORD *)(v13 + 36) != v104[1] || *(_DWORD *)(v13 + 32) != *v104) {
                break;
              }
              v104 += 3;
              if (v104 == (_DWORD *)(*(void *)v189 + 12 * *(unsigned __int16 *)(v189 + 8)))
              {
                v189 += 16;
                if ((_DWORD **)v189 != v190)
                {
                  do
                  {
                    if (*(_WORD *)(v189 + 8))
                    {
                      __int16 v104 = *(_DWORD **)v189;
                      goto LABEL_198;
                    }
                    v189 += 16;
                  }
                  while ((_DWORD **)v189 != v190);
                  __int16 v104 = *(_DWORD **)(v189 - 16);
                }
                break;
              }
LABEL_198:
              ;
            }
            while ((_DWORD **)v189 != v190);
          }
        }
LABEL_117:
        unsigned int v119 = v104[2];
        if (v119 == -1)
        {
          int v120 = *(_DWORD *)(v13 + 112);
          *(_DWORD *)(v13 + 112) = v120 + 1;
          v104[2] = v120;
          uint64_t v122 = *(unint64_t **)(v13 + 96);
          unint64_t v121 = *(void *)(v13 + 104);
          if ((unint64_t)v122 < v121)
          {
            unint64_t *v122 = v12;
            uint64_t v123 = (uint64_t)(v122 + 1);
            goto LABEL_142;
          }
          unsigned __int16 v124 = (unint64_t **)(v13 + 88);
          unint64_t v125 = *(char **)(v13 + 88);
          uint64_t v126 = ((char *)v122 - v125) >> 3;
          unint64_t v127 = v126 + 1;
          if ((unint64_t)(v126 + 1) >> 61) {
            sub_2E00();
          }
          uint64_t v128 = v121 - (void)v125;
          if (v128 >> 2 > v127) {
            unint64_t v127 = v128 >> 2;
          }
          if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v127 = 0x1FFFFFFFFFFFFFFFLL;
          }
          unint64_t v279 = v127;
          if (v127)
          {
            if (v127 >> 61) {
LABEL_318:
            }
              sub_188D718();
            int v129 = (char *)operator new(8 * v127);
            unsigned __int16 v124 = (unint64_t **)(v13 + 88);
            uint64_t v130 = (unint64_t *)&v129[8 * v126];
            *uint64_t v130 = v12;
            uint64_t v123 = (uint64_t)(v130 + 1);
            if (v122 != (unint64_t *)v125)
            {
LABEL_130:
              unint64_t v131 = (char *)(v122 - 1) - v125;
              if (v131 < 0x58)
              {
                a1 = v273;
                goto LABEL_139;
              }
              a1 = v273;
              if ((unint64_t)(v125 - v129) < 0x20) {
                goto LABEL_322;
              }
              uint64_t v132 = (v131 >> 3) + 1;
              uint64_t v133 = 8 * (v132 & 0x3FFFFFFFFFFFFFFCLL);
              __int16 v134 = &v122[v133 / 0xFFFFFFFFFFFFFFF8];
              uint64_t v130 = (unint64_t *)((char *)v130 - v133);
              unsigned __int16 v135 = &v129[8 * v126 - 16];
              unint64_t v136 = v122 - 2;
              uint64_t v137 = v132 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v138 = *(_OWORD *)v136;
                *((_OWORD *)v135 - 1) = *((_OWORD *)v136 - 1);
                *(_OWORD *)unsigned __int16 v135 = v138;
                v135 -= 32;
                v136 -= 4;
                v137 -= 4;
              }
              while (v137);
              uint64_t v122 = v134;
              if (v132 != (v132 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_322:
                do
                {
LABEL_139:
                  unint64_t v139 = *--v122;
                  *--uint64_t v130 = v139;
                }
                while (v122 != (unint64_t *)v125);
              }
              uint64_t v122 = *v124;
              *(void *)(v13 + 88) = v130;
              *(void *)(v13 + 96) = v123;
              *(void *)(v13 + 104) = &v129[8 * v279];
              if (v122) {
LABEL_141:
              }
                operator delete(v122);
LABEL_142:
              *(void *)(v13 + 96) = v123;
              unsigned int v119 = v104[2];
              *(double *)(a1 + 624) = *(double *)(a1 + 624) + 1.0;
              if (v283 == v119) {
                goto LABEL_273;
              }
              goto LABEL_143;
            }
          }
          else
          {
            int v129 = 0;
            uint64_t v130 = (unint64_t *)(8 * v126);
            *(void *)(8 * v126) = v12;
            uint64_t v123 = 8 * v126 + 8;
            if (v122 != (unint64_t *)v125) {
              goto LABEL_130;
            }
          }
          a1 = v273;
          *(void *)(v13 + 88) = v130;
          *(void *)(v13 + 96) = v123;
          *(void *)(v13 + 104) = &v129[8 * v279];
          if (v122) {
            goto LABEL_141;
          }
          goto LABEL_142;
        }
        *(double *)(a1 + 624) = *(double *)(a1 + 624) + 1.0;
        if (v283 == v119) {
          goto LABEL_273;
        }
LABEL_143:
        LODWORD(v293[0]) = 0;
        uint64_t v140 = *(void *)(a1 + 192);
        uint64_t v141 = (char *)(v140
                      + ((unint64_t)*(unsigned int *)(sub_B25B80((uint64_t)v282, (unsigned int *)v293) + 4) << 6));
        LODWORD(v293[0]) = 0;
        uint64_t v142 = *(void *)(a1 + 192);
        uint64_t v143 = sub_B25B80((uint64_t)v282, (unsigned int *)v293);
        sub_B257BC((uint64_t)v282, 0, v141, (unsigned char *)(v142 + ((unint64_t)*(unsigned int *)(v143 + 8) << 6)));
        unsigned int v144 = v277 + *(_DWORD *)(a1 + 96) * (v283 + 1);
        LODWORD(v293[0]) = v144;
        if (*(void *)(a1 + 184) == *(void *)(a1 + 144)) {
          goto LABEL_216;
        }
        unint64_t v145 = sub_B25DE0((uint64_t)v282, (unsigned int *)v293);
        if (v145 == -1) {
          goto LABEL_216;
        }
        uint64_t v146 = *(void *)(a1 + 152);
        uint64_t v147 = v146 + 16 * (v145 / 0x30);
        uint64_t v148 = (unsigned __int8 *)(v147 + 10);
        int v149 = v145 % 0x30;
        if ((unsigned __int16)(v145 % 0x30) < 9u)
        {
          __int16 v151 = 0;
          goto LABEL_157;
        }
        uint64_t v150 = (unsigned __int16)(v145 % 0x30 - 9) >> 3;
        __int16 v151 = 0;
        if (!((unsigned __int16)(v145 % 0x30 - 9) >> 3))
        {
          unsigned __int16 v155 = v145 % 0x30;
          uint64_t v156 = (unsigned __int8 *)(v147 + 10);
          do
          {
LABEL_155:
            int v161 = *v156++;
            v151 += byte_20EC2B6[v161];
            v155 -= 8;
          }
          while (v155 > 8u);
          goto LABEL_156;
        }
        __int16 v152 = 0;
        uint64_t v153 = v150 + 1;
        uint64_t v154 = (v150 + 1) & 0x3FFE;
        unsigned __int16 v155 = v149 - 8 * v154;
        uint64_t v156 = &v148[v154];
        int v157 = (unsigned __int8 *)(v146 + 16 * (v145 / 0x30) + 11);
        uint64_t v158 = v154;
        do
        {
          uint64_t v159 = *(v157 - 1);
          int v160 = *v157;
          v157 += 2;
          v151 += byte_20EC2B6[v159];
          v152 += byte_20EC2B6[v160];
          v158 -= 2;
        }
        while (v158);
        v151 += v152;
        if (v153 != v154) {
          goto LABEL_155;
        }
LABEL_156:
        v148 += ((unsigned __int16)(v149 - 9) >> 3) + 1;
        LOBYTE(v149) = v155;
LABEL_157:
        int v162 = *(_DWORD ***)(a1 + 160);
        unsigned __int16 v163 = v151 + byte_20EC2B6[~(-1 << v149) & (unint64_t)*v148];
        if (*(unsigned __int16 *)(v147 + 8) != v163)
        {
          uint64_t v165 = (_DWORD *)(*(void *)v147 + 12 * v163);
          if ((_DWORD **)v147 != v162) {
            goto LABEL_165;
          }
          goto LABEL_173;
        }
        v147 += 16;
        if ((_DWORD **)v147 != v162)
        {
          while (1)
          {
            unsigned int v164 = (_DWORD **)v147;
            if (*(_WORD *)(v147 + 8)) {
              break;
            }
            v147 += 16;
            if (v164 + 2 == v162)
            {
              uint64_t v147 = *(void *)(a1 + 160);
              break;
            }
          }
          uint64_t v165 = *v164;
          if ((_DWORD **)v147 != v162)
          {
LABEL_165:
            if (*(void *)(a1 + 144))
            {
              while (*(_DWORD *)(a1 + 136) == *v165)
              {
                v165 += 3;
                if (v165 == (_DWORD *)(*(void *)v147 + 12 * *(unsigned __int16 *)(v147 + 8)))
                {
                  while (1)
                  {
                    v147 += 16;
                    if ((_DWORD **)v147 == v162) {
                      goto LABEL_216;
                    }
                    if (*(_WORD *)(v147 + 8))
                    {
                      uint64_t v165 = *(_DWORD **)v147;
                      break;
                    }
                  }
                }
                if ((_DWORD **)v147 == v162) {
                  break;
                }
              }
            }
          }
LABEL_173:
          if ((_DWORD **)v147 != v162)
          {
            unsigned int v168 = v165 + 1;
            int v167 = v165[1];
            int v166 = v168[1];
            int v169 = v166 - v167;
            if (v166 != v167)
            {
              uint64_t v170 = 0;
              unsigned int v171 = 0;
              do
              {
                uint64_t v172 = (_OWORD *)sub_B276AC(v282, v144, v171);
                long long v173 = v172[2];
                long long v174 = v172[3];
                long long v175 = v172[1];
                v293[0] = *v172;
                long long v294 = v173;
                long long v295 = v174;
                v293[1] = v175;
                v170 |= sub_B30AF0((uint64_t)v282, (uint64_t)v293, 0, 0, 1) & 0xFF00;
                ++v171;
              }
              while (v169 != v171);
              if (v170)
              {
                LODWORD(v293[0]) = 0;
                uint64_t v176 = *(void *)(a1 + 192);
                uint64_t v177 = v176
                     + ((unint64_t)*(unsigned int *)(sub_B25B80((uint64_t)v282, (unsigned int *)v293) + 4) << 6);
                LODWORD(v293[0]) = 0;
                uint64_t v178 = *(void *)(a1 + 192);
                uint64_t v179 = sub_B25B80((uint64_t)v282, (unsigned int *)v293);
                int v180 = (long long *)(v178 + ((unint64_t)*(unsigned int *)(v179 + 8) << 6));
                if ((long long *)v177 != v180)
                {
                  while (*(_DWORD *)(v177 + 28) != 0x7FFFFFFF)
                  {
                    v177 += 64;
                    if ((long long *)v177 == v180)
                    {
                      uint64_t v177 = v178 + ((unint64_t)*(unsigned int *)(v179 + 8) << 6);
                      goto LABEL_215;
                    }
                  }
                  if ((long long *)v177 != v180)
                  {
                    for (uint64_t j = (long long *)(v177 + 64); j != v180; j += 4)
                    {
                      if (*((_DWORD *)j + 7) != 0x7FFFFFFF)
                      {
                        long long v196 = *j;
                        long long v197 = j[1];
                        long long v198 = j[3];
                        *(_OWORD *)(v177 + 32) = j[2];
                        *(_OWORD *)(v177 + 48) = v198;
                        *(_OWORD *)uint64_t v177 = v196;
                        *(_OWORD *)(v177 + 16) = v197;
                        v177 += 64;
                      }
                    }
                  }
                }
LABEL_215:
                LODWORD(v293[0]) = 0;
                uint64_t v199 = *(void *)(a1 + 192);
                uint64_t v200 = sub_B25B80((uint64_t)v282, (unsigned int *)v293);
                sub_B257BC((uint64_t)v282, 0, (char *)v177, (unsigned char *)(v199 + ((unint64_t)*(unsigned int *)(v200 + 8) << 6)));
              }
            }
          }
        }
LABEL_216:
        LODWORD(v293[0]) = 0;
        uint64_t v201 = *(void *)(a1 + 192);
        uint64_t v202 = (unsigned int *)(v201
                              + ((unint64_t)*(unsigned int *)(sub_B25B80((uint64_t)v282, (unsigned int *)v293) + 4) << 6));
        LODWORD(v293[0]) = 0;
        uint64_t v203 = *(void *)(a1 + 192);
        int v204 = (unsigned int *)(v203
                              + ((unint64_t)*(unsigned int *)(sub_B25B80((uint64_t)v282, (unsigned int *)v293) + 8) << 6));
        if (v202 != v204)
        {
          __int16 v205 = v285;
          do
          {
            unsigned int *v202 = v283;
            unsigned int v206 = v202[7];
            unsigned int v207 = v202[8];
            v202[3] = v206;
            v202[4] = -1;
            int v208 = *((_DWORD *)v205 + 2);
            int v209 = v208 / -10;
            int v210 = v208 / 10;
            int v211 = v208 % 10;
            if (v208 < 0) {
              char v212 = -5;
            }
            else {
              char v212 = 5;
            }
            int v213 = (char)(v212 + v211);
            v202[7] = v209 + v206 + (((-103 * v213) >> 15) & 1) + ((-103 * v213) >> 10);
            v202[8] = v207 + v210 + (((103 * v213) >> 15) & 1) + ((103 * v213) >> 10);
            v202 += 16;
          }
          while (v202 != v204);
        }
        if (*(unsigned char *)(a1 + 20))
        {
          int v278 = *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * *(_DWORD *)(a1 + 416) + 1;
          int v280 = *(_DWORD *)(a1 + 96);
          uint64_t v214 = *(void *)(a1 + 48);
          if (v214) {
            goto LABEL_224;
          }
LABEL_268:
          int v238 = 0x80000000;
LABEL_269:
          if (!sub_B30774(v282, 0, v276 + v280 * (v119 + 1), v280 * (v119 + 1) + 1, v278, v238)) {
            goto LABEL_273;
          }
          if (*(void *)(a1 + 304) <= (unint64_t)v119) {
            sub_A3E96C((uint64_t)v275, v119 + 1, 0);
          }
          uint64_t v242 = *v275;
          if ((*(void *)(*v275 + 8 * ((unint64_t)v119 >> 6)) & (1 << v119)) != 0)
          {
LABEL_273:
            unint64_t v9 = (unint64_t)v286;
            int v6 = (void *)((char *)v285 + 12);
            __int16 v285 = v6;
            if (v6 != v286) {
              goto LABEL_274;
            }
LABEL_298:
            int v6 = v287;
            unint64_t v10 = v288[0];
            __int16 v285 = v287;
            int v8 = 1;
            unsigned __int8 v289 = 1;
            if (*(unsigned char *)(v284 + 16)) {
              goto LABEL_299;
            }
            goto LABEL_10;
          }
          unsigned __int16 v244 = *(char **)(a1 + 328);
          unint64_t v243 = *(void *)(a1 + 336);
          if ((unint64_t)v244 < v243)
          {
            *(_DWORD *)unsigned __int16 v244 = v119;
            uint64_t v245 = (uint64_t)(v244 + 4);
            goto LABEL_297;
          }
          unint64_t v246 = (char *)*v270;
          uint64_t v247 = v244 - (unsigned char *)*v270;
          uint64_t v248 = v247 >> 2;
          unint64_t v249 = (v247 >> 2) + 1;
          if (v249 >> 62) {
            sub_2E00();
          }
          uint64_t v250 = v243 - (void)v246;
          if (v250 >> 1 > v249) {
            unint64_t v249 = v250 >> 1;
          }
          if ((unint64_t)v250 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v249 = 0x3FFFFFFFFFFFFFFFLL;
          }
          unint64_t v281 = v249;
          if (!v249)
          {
            uint64_t v251 = 0;
            int v252 = (unsigned int *)(4 * v248);
            *(_DWORD *)(4 * v248) = v119;
            uint64_t v245 = 4 * v248 + 4;
            if (v244 == v246) {
              goto LABEL_289;
            }
LABEL_286:
            unint64_t v253 = v244 - 4 - v246;
            unint64_t v254 = v281;
            if (v253 >= 0x2C)
            {
              unint64_t v255 = v244 - &v251[v247];
              a1 = v273;
              if (v255 >= 0x20)
              {
                uint64_t v256 = (v253 >> 2) + 1;
                uint64_t v257 = 4 * (v256 & 0x7FFFFFFFFFFFFFF8);
                uint64_t v258 = &v244[-v257];
                int v252 = (unsigned int *)((char *)v252 - v257);
                int v259 = &v251[4 * v248 - 16];
                unsigned int v260 = v244 - 16;
                uint64_t v261 = v256 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v262 = *(_OWORD *)v260;
                  *(v259 - 1) = *((_OWORD *)v260 - 1);
                  *int v259 = v262;
                  v259 -= 2;
                  v260 -= 32;
                  v261 -= 8;
                }
                while (v261);
                unsigned __int16 v244 = v258;
                if (v256 == (v256 & 0x7FFFFFFFFFFFFFF8)) {
                  goto LABEL_295;
                }
              }
            }
            else
            {
              a1 = v273;
            }
            do
            {
              unsigned int v263 = *((_DWORD *)v244 - 1);
              v244 -= 4;
              *--int v252 = v263;
            }
            while (v244 != v246);
            goto LABEL_295;
          }
          if (v249 >> 62) {
            goto LABEL_318;
          }
          uint64_t v251 = operator new(4 * v249);
          int v252 = (unsigned int *)&v251[4 * v248];
          *int v252 = v119;
          uint64_t v245 = (uint64_t)(v252 + 1);
          if (v244 != v246) {
            goto LABEL_286;
          }
LABEL_289:
          a1 = v273;
          unint64_t v254 = v281;
LABEL_295:
          *(void *)(a1 + 320) = v252;
          *(void *)(a1 + 328) = v245;
          *(void *)(a1 + 336) = &v251[4 * v254];
          if (v246)
          {
            uint64_t v264 = v245;
            operator delete(v246);
            uint64_t v245 = v264;
            uint64_t v242 = *v275;
          }
LABEL_297:
          *(void *)(a1 + 328) = v245;
          *(void *)(v242 + 8 * ((unint64_t)v119 >> 6)) |= 1 << v119;
          unint64_t v9 = (unint64_t)v286;
          int v6 = (void *)((char *)v285 + 12);
          __int16 v285 = v6;
          if (v6 == v286) {
            goto LABEL_298;
          }
LABEL_274:
          int v8 = v289;
          unint64_t v10 = v288[0];
          if (*(unsigned char *)(v284 + 16))
          {
LABEL_299:
            if (v8) {
              unint64_t v265 = v10;
            }
            else {
              unint64_t v265 = v9;
            }
            if ((unint64_t)v6 < v265)
            {
              while (1)
              {
                unint64_t v267 = __ROR8__(*v6, 32);
                if (HIDWORD(v267) == 1 && (v267 + 3) < 2) {
                  break;
                }
                if (sub_2AB7E4(**(void **)(v284 + 4120)))
                {
                  LOBYTE(v8) = v289;
                  int v6 = v285;
                  unint64_t v9 = (unint64_t)v286;
                  break;
                }
                unint64_t v9 = (unint64_t)v286;
                int v6 = (void *)((char *)v285 + 12);
                __int16 v285 = v6;
                if (v6 == v286)
                {
                  int v6 = v287;
                  __int16 v285 = v287;
                  LOBYTE(v8) = 1;
                  unsigned __int8 v289 = 1;
                  if ((unint64_t)v287 >= v288[0]) {
                    break;
                  }
                }
                else
                {
                  LOBYTE(v8) = v289;
                  uint64_t v266 = &v286;
                  if (v289) {
                    uint64_t v266 = v288;
                  }
                  if ((unint64_t)v6 >= *v266) {
                    break;
                  }
                }
              }
              unint64_t v10 = v288[0];
            }
          }
LABEL_10:
          if ((_BYTE)v8) {
            unint64_t v9 = v10;
          }
          if ((unint64_t)v6 >= v9) {
            goto LABEL_3;
          }
          goto LABEL_13;
        }
        int v278 = -1;
        int v280 = *(_DWORD *)(a1 + 96);
        uint64_t v214 = *(void *)(a1 + 48);
        if (!v214) {
          goto LABEL_268;
        }
LABEL_224:
        unsigned int v215 = 0;
        unsigned int v216 = *(_DWORD *)(a1 + 100) + v274;
        while (2)
        {
          while (2)
          {
            LODWORD(v293[0]) = (v119 << *(_DWORD *)v214) | (v216 - v215);
            if (*(void *)(v214 + 88) == *(void *)(v214 + 48)
              || (unint64_t v217 = sub_AD72DC(v214 + 8, (unsigned int *)v293), v217 == -1))
            {
LABEL_253:
              int v238 = *(_DWORD *)(v214 + 4);
              v215 += 2;
              if (v238 != 0x7FFFFFFF || v215 > v216) {
                goto LABEL_269;
              }
              continue;
            }
            break;
          }
          uint64_t v218 = *(void *)(v214 + 56);
          uint64_t v219 = (_DWORD **)(v218 + 16 * (v217 / 0x30));
          uint64_t v220 = (unsigned __int8 *)v219 + 10;
          int v221 = v217 % 0x30;
          if ((unsigned __int16)(v217 % 0x30) >= 9u)
          {
            __int16 v222 = 0;
            uint64_t v223 = (unsigned __int16)(v217 % 0x30 - 9) >> 3;
            if ((unsigned __int16)(v217 % 0x30 - 9) >> 3)
            {
              __int16 v224 = 0;
              uint64_t v225 = v223 + 1;
              uint64_t v226 = (v223 + 1) & 0x3FFE;
              unsigned __int16 v227 = v221 - 8 * v226;
              int v228 = &v220[v226];
              uint64_t v229 = (unsigned __int8 *)(v218 + 16 * (v217 / 0x30) + 11);
              uint64_t v230 = v226;
              do
              {
                uint64_t v231 = *(v229 - 1);
                int v232 = *v229;
                v229 += 2;
                v222 += byte_20EBDB6[v231];
                v224 += byte_20EBDB6[v232];
                v230 -= 2;
              }
              while (v230);
              v222 += v224;
              if (v225 == v226)
              {
LABEL_236:
                v220 += ((unsigned __int16)(v221 - 9) >> 3) + 1;
                LOBYTE(v221) = v227;
                goto LABEL_237;
              }
            }
            else
            {
              unsigned __int16 v227 = v217 % 0x30;
              int v228 = (unsigned __int8 *)v219 + 10;
            }
            do
            {
              int v233 = *v228++;
              v222 += byte_20EBDB6[v233];
              v227 -= 8;
            }
            while (v227 > 8u);
            goto LABEL_236;
          }
          __int16 v222 = 0;
LABEL_237:
          int v234 = *(_DWORD ***)(v214 + 64);
          unsigned __int16 v235 = v222 + byte_20EBDB6[~(-1 << v221) & (unint64_t)*v220];
          if (*((unsigned __int16 *)v219 + 4) == v235)
          {
            v219 += 2;
            if (v219 == v234) {
              goto LABEL_253;
            }
            while (1)
            {
              uint64_t v236 = v219;
              if (*((_WORD *)v219 + 4)) {
                break;
              }
              v219 += 2;
              if (v236 + 2 == v234)
              {
                uint64_t v219 = *(_DWORD ***)(v214 + 64);
                break;
              }
            }
            uint64_t v237 = *v236;
            if (v219 == v234) {
              goto LABEL_253;
            }
          }
          else
          {
            uint64_t v237 = &(*v219)[2 * v235];
            if (v219 == v234) {
              goto LABEL_253;
            }
          }
          if (*(void *)(v214 + 48))
          {
            while (*(_DWORD *)(v214 + 40) == *v237)
            {
              v237 += 2;
              if (v237 == &(*v219)[2 * *((unsigned __int16 *)v219 + 4)])
              {
                while (1)
                {
                  v219 += 2;
                  if (v219 == v234) {
                    goto LABEL_253;
                  }
                  if (*((_WORD *)v219 + 4))
                  {
                    uint64_t v237 = *v219;
                    break;
                  }
                }
              }
              if (v219 == v234) {
                break;
              }
            }
          }
          BOOL v39 = v219 == v234;
          unsigned int v240 = v237 + 1;
          if (v39) {
            unsigned int v240 = (int *)(v214 + 4);
          }
          int v238 = *v240;
          v215 += 2;
          if (*v240 != 0x7FFFFFFF || v215 > v216) {
            goto LABEL_269;
          }
          continue;
        }
      }
LABEL_16:
      ++v11;
    }
  }
LABEL_316:
  double result = sub_72688((uint64_t)v290) + *(double *)(a1 + 568);
  *(double *)(a1 + 568) = result;
  return result;
}

uint64_t sub_B3050C(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 100);
  if (v1)
  {
    uint64_t v2 = result;
    int v3 = 0;
    uint64_t v4 = (void *)(result + 104);
    do
    {
      unsigned int v15 = 0;
      uint64_t v5 = *(void *)(v2 + 192);
      int v6 = (char *)(v5 + ((unint64_t)*(unsigned int *)(sub_B25B80((uint64_t)v4, &v15) + 4) << 6));
      unsigned int v15 = 0;
      uint64_t v7 = *(void *)(v2 + 192);
      uint64_t v8 = sub_B25B80((uint64_t)v4, &v15);
      sub_B257BC((uint64_t)v4, 0, v6, (unsigned char *)(v7 + ((unint64_t)*(unsigned int *)(v8 + 8) << 6)));
      sub_B30DA0(v4, v3 + *(_DWORD *)(v2 + 96) + *(_DWORD *)(v2 + 96) * *(_DWORD *)(v2 + 416) + 2, 0);
      unsigned int v15 = 0;
      uint64_t v9 = *(void *)(v2 + 192);
      uint64_t v10 = v9 + ((unint64_t)*(unsigned int *)(sub_B25B80((uint64_t)v4, &v15) + 4) << 6);
      unsigned int v15 = 0;
      uint64_t v11 = *(void *)(v2 + 192);
      double result = sub_B25B80((uint64_t)v4, &v15);
      uint64_t v12 = v11 + ((unint64_t)*(unsigned int *)(result + 8) << 6);
      if (v10 != v12)
      {
        double v13 = *(double *)(v2 + 592);
        uint64_t v14 = *(void *)(v2 + 584);
        do
        {
          double v13 = v13 + 1.0;
          v14 += *(int *)(v10 + 28);
          v10 += 64;
        }
        while (v10 != v12);
        *(double *)(v2 + 592) = v13;
        *(void *)(v2 + 584) = v14;
      }
      ++v3;
    }
    while (v3 != v1);
  }
  return result;
}

uint64_t sub_B30644(void *a1, long long *a2, unsigned int a3, int a4, int a5)
{
  unsigned int v28 = a3;
  sub_B274E0(a1, &v28, v24);
  uint64_t v10 = a1[6];
  uint64_t v11 = a1[7];
  unsigned int v15 = a1;
  uint64_t v16 = v10;
  uint64_t v17 = v11;
  uint64_t v18 = v11;
  uint64_t v19 = 0;
  uint64_t v20 = v10;
  uint64_t v21 = v11;
  uint64_t v22 = v11;
  uint64_t v23 = 0;
  sub_AE47A0(&v15);
  if (v24[1] == v16 && v25 == v17 && v26 == v18 && (v26 == v25 || v27 == v19)
    || *(_DWORD *)(v27 + 8) == *(_DWORD *)(v27 + 4))
  {
    sub_B26C6C((uint64_t)a1, a3, a2);
    return 1;
  }
  else
  {
    __int16 v13 = sub_B30AF0((uint64_t)a1, (uint64_t)a2, a3, a4, a5);
    char v14 = v13;
    if ((v13 & 0x100) != 0) {
      sub_B273D4((uint64_t)a1, a3);
    }
    return v14 & 1;
  }
}

BOOL sub_B30774(void *a1, unsigned int a2, unsigned int a3, unsigned int a4, int a5, int a6)
{
  v56[0] = a2;
  sub_B274E0(a1, v56, v53);
  uint64_t v12 = a1[6];
  uint64_t v13 = a1[7];
  uint64_t v45 = a1;
  *(void *)&long long v46 = v12;
  *((void *)&v46 + 1) = v13;
  uint64_t v47 = v13;
  uint64_t v48 = 0;
  uint64_t v49 = v12;
  uint64_t v50 = v13;
  uint64_t v51 = v13;
  uint64_t v52 = 0;
  sub_AE47A0(&v45);
  if (*(_OWORD *)&v53[8] == v46
    && *(void *)&v53[24] == v47
    && (*(void *)&v53[24] == *(void *)&v53[16] || (void)v54 == v48))
  {
    goto LABEL_7;
  }
  int v14 = *(_DWORD *)(v54 + 4);
  int v15 = *(_DWORD *)(v54 + 8);
  int v16 = v15 - v14;
  if (v15 == v14) {
    goto LABEL_7;
  }
  if (a6 == 0x7FFFFFFF)
  {
    unsigned int v17 = 0;
    do
      sub_B276AC(a1, a2, v17++);
    while (v16 != v17);
LABEL_7:
    LOBYTE(v18) = 0;
    return v18 != 0;
  }
  unsigned int v43 = a3;
  unsigned int v44 = a4;
  if (a5 == -1)
  {
    __int16 v18 = 0;
    unsigned int v20 = 0;
    do
    {
      uint64_t v21 = (_OWORD *)sub_B276AC(a1, a2, v20);
      long long v22 = v21[2];
      long long v23 = v21[3];
      long long v24 = v21[1];
      *(_OWORD *)int v53 = *v21;
      *(_OWORD *)&v53[16] = v24;
      long long v54 = v22;
      long long v55 = v23;
      if (SHIDWORD(v24) >= a6)
      {
        __int16 v25 = sub_B30AF0((uint64_t)a1, (uint64_t)v53, a4, 0, 1);
        if ((_BYTE)v25)
        {
          sub_B30AF0((uint64_t)a1, (uint64_t)v53, a3, 1, 1);
          *(void *)(v26 + 52) = -1;
          *(_DWORD *)(v26 + 60) = 0x7FFFFFFF;
        }
        v18 |= v25 & 0xFF00 | v25;
      }
      ++v20;
    }
    while (v16 != v20);
  }
  else
  {
    __int16 v18 = 0;
    unsigned int v27 = 0;
    do
    {
      uint64_t v30 = (_OWORD *)sub_B276AC(a1, a2, v27);
      long long v31 = v30[2];
      long long v32 = v30[3];
      long long v33 = v30[1];
      *(_OWORD *)int v53 = *v30;
      *(_OWORD *)&v53[16] = v33;
      long long v54 = v31;
      long long v55 = v32;
      if (SHIDWORD(v33) >= a6)
      {
        LODWORD(v45) = a5;
        uint64_t v34 = a1[11];
        uint64_t v35 = v34 + ((unint64_t)*(unsigned int *)(sub_B25B80((uint64_t)a1, (unsigned int *)&v45) + 4) << 6);
        LODWORD(v45) = a5;
        uint64_t v36 = a1[11];
        uint64_t v37 = v36 + ((unint64_t)*(unsigned int *)(sub_B25B80((uint64_t)a1, (unsigned int *)&v45) + 8) << 6);
        if (v35 == v37)
        {
LABEL_39:
          unint64_t v41 = sub_B30AF0((uint64_t)a1, (uint64_t)v53, v44, 0, 1);
          unint64_t v29 = v41 >> 8;
          __int16 v28 = v41;
          if ((_BYTE)v41)
          {
            sub_B30AF0((uint64_t)a1, (uint64_t)v53, v43, 1, 1);
            *(void *)(v42 + 52) = -1;
            *(_DWORD *)(v42 + 60) = 0x7FFFFFFF;
          }
        }
        else
        {
          while (1)
          {
            int v38 = *(_DWORD *)(v35 + 28);
            if (v38 != 0x7FFFFFFF && v38 >= *(_DWORD *)&v53[28] && *(_DWORD *)(v35 + 32) <= (int)v54)
            {
              unsigned int v40 = *(_DWORD *)(v35 + 36);
              if (v40 <= DWORD1(v54)
                && *(_DWORD *)(v35 + 40) <= DWORD2(v54)
                && (v40 != DWORD1(v54)
                 || v38 != *(_DWORD *)&v53[28]
                 || *(_DWORD *)(v35 + 44) - 10 * v38 <= HIDWORD(v54) - 10 * *(_DWORD *)&v53[28])
                && (*(unsigned __int8 *)(v35 + 48) & ~v55) == 0)
              {
                break;
              }
            }
            v35 += 64;
            if (v35 == v37) {
              goto LABEL_39;
            }
          }
          __int16 v28 = 0;
          LOWORD(v29) = 0;
        }
        __int16 v18 = v28 | v18 | v18 & 0xFF00 | ((_WORD)v29 << 8);
      }
      ++v27;
    }
    while (v27 != v16);
  }
  if ((v18 & 0xFF00) != 0)
  {
    sub_B273D4((uint64_t)a1, v43);
    sub_B273D4((uint64_t)a1, v44);
  }
  return v18 != 0;
}

unint64_t sub_B30AF0(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int a5)
{
  unsigned int v41 = a3;
  sub_B274E0((void *)a1, &v41, v37);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v28 = a1;
  uint64_t v29 = v10;
  uint64_t v30 = v11;
  uint64_t v31 = v11;
  uint64_t v32 = 0;
  uint64_t v33 = v10;
  uint64_t v34 = v11;
  uint64_t v35 = v11;
  uint64_t v36 = 0;
  sub_AE47A0(&v28);
  if (v37[1] == v29 && v38 == v30 && v39 == v31 && (v39 == v38 || v40 == v32)
    || *(_DWORD *)(v40 + 8) == *(_DWORD *)(v40 + 4))
  {
    unsigned __int8 v12 = 0;
    uint64_t v13 = sub_B26C6C(a1, a3, (long long *)a2);
    if (!a5) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  LODWORD(v37[0]) = a3;
  uint64_t v14 = *(void *)(a1 + 88);
  uint64_t v15 = v14 + ((unint64_t)*(unsigned int *)(sub_B25B80(a1, (unsigned int *)v37) + 4) << 6);
  LODWORD(v37[0]) = a3;
  uint64_t v16 = *(void *)(a1 + 88);
  uint64_t v17 = v16 + ((unint64_t)*(unsigned int *)(sub_B25B80(a1, (unsigned int *)v37) + 8) << 6);
  if (v15 != v17)
  {
    unsigned __int8 v12 = 0;
    int v18 = *(unsigned __int8 *)(a2 + 48);
    while (1)
    {
      int v19 = *(_DWORD *)(v15 + 28);
      if (v19 != 0x7FFFFFFF)
      {
        int v20 = *(_DWORD *)(a2 + 28);
        if (v19 >= v20 && *(_DWORD *)(v15 + 32) <= *(_DWORD *)(a2 + 32))
        {
          unsigned int v21 = *(_DWORD *)(a2 + 36);
          unsigned int v22 = *(_DWORD *)(v15 + 36);
          if (v22 <= v21
            && *(_DWORD *)(v15 + 40) <= *(_DWORD *)(a2 + 40)
            && (v22 != v21 || v19 != v20 || *(_DWORD *)(v15 + 44) - 10 * v19 <= *(_DWORD *)(a2 + 44) - 10 * v20)
            && (*(unsigned __int8 *)(v15 + 48) & ~*(unsigned __int8 *)(a2 + 48)) == 0)
          {
            uint64_t v26 = 0;
            return v26 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v12 << 8);
          }
        }
        if (v20 >= v19 && *(_DWORD *)(a2 + 32) <= *(_DWORD *)(v15 + 32))
        {
          unsigned int v23 = *(_DWORD *)(v15 + 36);
          unsigned int v24 = *(_DWORD *)(a2 + 36);
          if (v24 <= v23
            && *(_DWORD *)(a2 + 40) <= *(_DWORD *)(v15 + 40)
            && (v24 != v23 || v20 != v19 || *(_DWORD *)(a2 + 44) - 10 * v20 <= *(_DWORD *)(v15 + 44) - 10 * v19)
            && (v18 & ~*(unsigned __int8 *)(v15 + 48)) == 0)
          {
            *(_DWORD *)(v15 + 28) = 0x7FFFFFFF;
            unsigned __int8 v12 = 1;
          }
        }
      }
      v15 += 64;
      if (v15 == v17) {
        goto LABEL_29;
      }
    }
  }
  unsigned __int8 v12 = 0;
LABEL_29:
  uint64_t v13 = sub_B26C6C(a1, a3, (long long *)a2);
  if (a5)
  {
LABEL_30:
    *(void *)(v13 + 52) = -1;
    *(_DWORD *)(v13 + 60) = 0x7FFFFFFF;
  }
LABEL_31:
  if (a4)
  {
    int v25 = *(_DWORD *)(a1 + 136);
    *(_DWORD *)(a1 + 136) = v25 + 1;
    *(_DWORD *)(v13 + 24) = v25;
    *(_DWORD *)(v13 + 20) = *(_DWORD *)(a2 + 24);
  }
  uint64_t v26 = 1;
  return v26 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v12 << 8);
}

BOOL sub_B30DA0(void *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v31 = a2;
  sub_B274E0(a1, &v31, v28);
  uint64_t v6 = a1[6];
  uint64_t v7 = a1[7];
  int v20 = a1;
  *(void *)&long long v21 = v6;
  *((void *)&v21 + 1) = v7;
  uint64_t v22 = v7;
  uint64_t v23 = 0;
  uint64_t v24 = v6;
  uint64_t v25 = v7;
  uint64_t v26 = v7;
  uint64_t v27 = 0;
  sub_AE47A0(&v20);
  if (*(_OWORD *)&v28[8] == v21
    && *(void *)&v28[24] == v22
    && (*(void *)&v28[24] == *(void *)&v28[16] || (void)v29 == v23))
  {
    LOBYTE(v10) = 0;
  }
  else
  {
    int v8 = *(_DWORD *)(v29 + 4);
    int v9 = *(_DWORD *)(v29 + 8);
    __int16 v10 = 0;
    int v11 = v9 - v8;
    if (v9 != v8)
    {
      unsigned int v12 = 0;
      do
      {
        uint64_t v13 = (long long *)sub_B276AC(a1, a2, v12);
        long long v14 = v13[3];
        long long v16 = *v13;
        long long v15 = v13[1];
        long long v29 = v13[2];
        long long v30 = v14;
        *(_OWORD *)uint64_t v28 = v16;
        *(_OWORD *)&v28[16] = v15;
        __int16 v17 = sub_B30AF0((uint64_t)a1, (uint64_t)v28, a3, 0, 1);
        uint64_t v18 = (unsigned __int16)(v17 | v10) & 0xFF00;
        __int16 v10 = v17 | v10 | v18;
        ++v12;
      }
      while (v11 != v12);
      if (v18) {
        sub_B273D4((uint64_t)a1, a3);
      }
    }
  }
  return v10 != 0;
}

unint64_t sub_B30EF4(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4 = a1;
  unsigned int v383 = a3;
  *(double *)(a1 + 608) = *(double *)(a1 + 608) + 1.0;
  unint64_t v5 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 40) + 88), a3);
  unsigned int v339 = *(_DWORD *)sub_A3F74C((void *)(v4 + 344), &v383);
  unint64_t v348 = v5;
  unint64_t result = (unint64_t)sub_A40514(&v381, *(void *)(v4 + 24), v5);
  uint64_t v7 = v381;
  if ((unint64_t)v381 < v382)
  {
    unint64_t v353 = (void *)(v4 + 104);
    uint64_t v8 = v4 + 424;
    int v336 = ~a2;
    int v337 = a2 + 2;
    int v335 = (uint64_t *)(v4 + 248);
    int v347 = a2 + 1;
    unint64_t v349 = HIDWORD(v5);
    uint64_t v350 = v4;
    uint64_t v352 = v4 + 424;
    do
    {
      *(double *)(v4 + 616) = *(double *)(v4 + 616) + 1.0;
      uint64_t v351 = *(unsigned int *)v7;
      LODWORD(v369) = 0;
      uint64_t v9 = *(void *)(v4 + 192);
      __int16 v10 = (char *)(v9
                   + ((unint64_t)*(unsigned int *)(sub_B25B80((uint64_t)v353, (unsigned int *)&v369) + 4) << 6));
      LODWORD(v369) = 0;
      uint64_t v11 = *(void *)(v4 + 192);
      uint64_t v12 = sub_B25B80((uint64_t)v353, (unsigned int *)&v369);
      sub_B257BC((uint64_t)v353, 0, v10, (unsigned char *)(v11 + ((unint64_t)*(unsigned int *)(v12 + 8) << 6)));
      unint64_t result = sub_A1E9A0((uint64_t)&v369, *(void *)(v4 + 24), v348, v339, 0, 1);
      unint64_t v14 = v372;
      uint64_t v13 = v373;
      while ((unint64_t)v13 >= v14 && (unint64_t)v13 < v374)
      {
        uint64_t v15 = 0;
        unint64_t v16 = __ROR8__(*v13, 32);
        uint64_t v17 = *(void *)(v4 + 32);
        uint64_t v18 = *(void *)(v17 + 72) - 1;
        unint64_t v19 = 0xC4CEB9FE1A85EC53
            * ((0xFF51AFD7ED558CCDLL * (v16 ^ (v16 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v16 ^ (v16 >> 33))) >> 33));
        unint64_t v20 = v19 ^ (v19 >> 33);
        uint64_t v21 = *(void *)(v17 + 48);
        uint64_t v22 = v21 + 11;
        uint64_t v23 = -1;
        for (unint64_t i = v20; ; unint64_t i = v15 + v25)
        {
          uint64_t v25 = i & v18;
          unint64_t v26 = (i & v18) / 0x30;
          unint64_t v27 = v25 - 48 * v26;
          if (((*(unsigned __int8 *)(v21 + 16 * v26 + (v27 >> 3) + 10) >> (v27 & 7)) & 1) == 0)
          {
            if (v23 == -1) {
              unint64_t v63 = v25;
            }
            else {
              unint64_t v63 = v23;
            }
            if (!sub_AD2F40(*(void *)(v4 + 32), 1)) {
              goto LABEL_92;
            }
            goto LABEL_49;
          }
          uint64_t v28 = *(void *)(v21 + 16 * v26);
          if (!*(void *)(v17 + 40)) {
            break;
          }
          long long v29 = (unsigned __int8 *)(v21 + 16 * v26 + 10);
          if ((unsigned __int16)(v25 - 48 * v26) < 9u)
          {
            __int16 v30 = 0;
            LOBYTE(v35) = v25 - 48 * v26;
            goto LABEL_23;
          }
          __int16 v30 = 0;
          uint64_t v31 = (unsigned __int16)(v25 - 48 * v26 - 9) >> 3;
          if ((unsigned __int16)(v25 - 48 * v26 - 9) >> 3)
          {
            __int16 v32 = 0;
            uint64_t v33 = v31 + 1;
            uint64_t v34 = (v31 + 1) & 0x3FFE;
            unsigned __int16 v35 = v27 - 8 * v34;
            uint64_t v36 = &v29[v34];
            uint64_t v37 = (unsigned __int8 *)(v22 + 16 * v26);
            uint64_t v38 = v34;
            do
            {
              uint64_t v39 = *(v37 - 1);
              int v40 = *v37;
              v37 += 2;
              v30 += byte_20EBFB6[v39];
              v32 += byte_20EBFB6[v40];
              v38 -= 2;
            }
            while (v38);
            v30 += v32;
            if (v33 == v34) {
              goto LABEL_22;
            }
          }
          else
          {
            unsigned __int16 v35 = v25 - 48 * v26;
            uint64_t v36 = (unsigned __int8 *)(v21 + 16 * v26 + 10);
          }
          do
          {
            int v41 = *v36++;
            v30 += byte_20EBFB6[v41];
            v35 -= 8;
          }
          while (v35 > 8u);
LABEL_22:
          v29 += ((unsigned __int16)(v27 - 9) >> 3) + 1;
LABEL_23:
          uint64_t v42 = (_DWORD *)(v28
                         + 12
                         * (unsigned __int16)(v30 + byte_20EBFB6[~(-1 << v35) & (unint64_t)*v29]));
          if (*(_DWORD *)(v17 + 36) != v42[1] || *(_DWORD *)(v17 + 32) != *v42) {
            break;
          }
          if (v23 == -1) {
            uint64_t v23 = v25;
          }
LABEL_10:
          ++v15;
        }
        unsigned int v44 = (unsigned __int8 *)(v21 + 16 * v26 + 10);
        if ((unsigned __int16)(v25 - 48 * v26) < 9u)
        {
          __int16 v45 = 0;
          __int16 v56 = (unsigned __int8 *)(v21 + 16 * v26 + 10);
          LOBYTE(v50) = v25 - 48 * v26;
          goto LABEL_37;
        }
        __int16 v45 = 0;
        uint64_t v46 = (unsigned __int16)(v25 - 48 * v26 - 9) >> 3;
        if (!((unsigned __int16)(v25 - 48 * v26 - 9) >> 3))
        {
          unsigned __int16 v50 = v25 - 48 * v26;
          uint64_t v51 = (unsigned __int8 *)(v21 + 16 * v26 + 10);
          do
          {
LABEL_35:
            int v57 = *v51++;
            v45 += byte_20EBFB6[v57];
            v50 -= 8;
          }
          while (v50 > 8u);
          goto LABEL_36;
        }
        __int16 v47 = 0;
        uint64_t v48 = v46 + 1;
        uint64_t v49 = (v46 + 1) & 0x3FFE;
        unsigned __int16 v50 = v27 - 8 * v49;
        uint64_t v51 = &v44[v49];
        uint64_t v52 = (unsigned __int8 *)(v22 + 16 * v26);
        uint64_t v53 = v49;
        do
        {
          uint64_t v54 = *(v52 - 1);
          int v55 = *v52;
          v52 += 2;
          v45 += byte_20EBFB6[v54];
          v47 += byte_20EBFB6[v55];
          v53 -= 2;
        }
        while (v53);
        v45 += v47;
        if (v48 != v49) {
          goto LABEL_35;
        }
LABEL_36:
        __int16 v56 = &v44[((unsigned __int16)(v27 - 9) >> 3) + 1];
LABEL_37:
        if (v16 != *(void *)(v28
                              + 12
                              * (unsigned __int16)(v45
                                                 + byte_20EBFB6[~(-1 << v50) & (unint64_t)*v56])))
          goto LABEL_10;
        if (v25 != -1)
        {
          if ((unsigned __int16)(v25 - 48 * v26) < 9u)
          {
            __int16 v60 = 0;
          }
          else
          {
            if ((((_WORD)v25 - 48 * (_WORD)v26 - 8) & 0xFFF8) != 0) {
              __int16 v58 = 8;
            }
            else {
              __int16 v58 = v25 - 48 * v26 - 8;
            }
            unsigned __int16 v59 = ~v58 + v25 - 48 * v26;
            if (v59 < 8u)
            {
              __int16 v60 = 0;
              unsigned __int16 v61 = v27;
              uint64_t v62 = (unsigned __int8 *)(v21 + 16 * v26 + 10);
              goto LABEL_97;
            }
            __int16 v109 = 0;
            __int16 v110 = 0;
            uint64_t v111 = (v59 >> 3) + 1;
            unsigned __int16 v61 = v27 - 8 * (((v59 >> 3) + 1) & 0x3FFE);
            uint64_t v62 = &v44[v111 & 0x3FFE];
            int v112 = (unsigned __int8 *)(v21 + 16 * v26 + 11);
            uint64_t v113 = v111 & 0x3FFE;
            do
            {
              uint64_t v114 = *(v112 - 1);
              int v115 = *v112;
              v112 += 2;
              v109 += byte_20EBFB6[v114];
              v110 += byte_20EBFB6[v115];
              v113 -= 2;
            }
            while (v113);
            __int16 v60 = v110 + v109;
            if ((v111 & 0x3FFE) != v111)
            {
              do
              {
LABEL_97:
                int v116 = *v62++;
                v60 += byte_20EBFB6[v116];
                v61 -= 8;
              }
              while (v61 > 8u);
            }
            v44 += ((unsigned __int16)(v27 - 9) >> 3) + 1;
            LOBYTE(v27) = v61;
          }
          uint64_t v117 = *(void *)(v17 + 56);
          unsigned __int16 v118 = v60 + byte_20EBFB6[~(-1 << v27) & (unint64_t)*v44];
          uint64_t v119 = v21 + 16 * v26;
          if (*(unsigned __int16 *)(v119 + 8) != v118 || v119 + 16 == v117)
          {
            unint64_t v108 = (_DWORD *)(v28 + 12 * v118);
          }
          else
          {
            uint64_t v121 = v119 + 32;
            do
            {
              if (*(_WORD *)(v121 - 8)) {
                BOOL v122 = 1;
              }
              else {
                BOOL v122 = v121 == v117;
              }
              v121 += 16;
            }
            while (!v122);
            unint64_t v108 = *(_DWORD **)(v121 - 32);
          }
          goto LABEL_111;
        }
        unint64_t v63 = -1;
        if (!sub_AD2F40(*(void *)(v4 + 32), 1))
        {
LABEL_92:
          unint64_t v384 = v16;
          int v385 = -1;
          sub_AD3484(v17, (uint64_t *)&v384, v63, &v386);
          unint64_t v108 = v388;
          goto LABEL_111;
        }
LABEL_49:
        uint64_t v64 = 0;
        unint64_t v384 = v16;
        int v385 = -1;
        uint64_t v65 = *(void *)(v17 + 72) - 1;
        uint64_t v66 = *(void *)(v17 + 48);
        uint64_t v67 = v66 + 11;
        uint64_t v68 = -1;
        while (2)
        {
          uint64_t v69 = v20 & v65;
          unint64_t v70 = (v20 & v65) / 0x30;
          unint64_t v71 = (v20 & v65) % 0x30;
          if (((*(unsigned __int8 *)(v66 + 16 * v70 + (v71 >> 3) + 10) >> (v71 & 7)) & 1) == 0)
          {
            if (v68 == -1) {
              unint64_t v107 = v20 & v65;
            }
            else {
              unint64_t v107 = v68;
            }
            goto LABEL_90;
          }
          uint64_t v72 = *(void *)(v17 + 40);
          uint64_t v73 = *(void *)(v66 + 16 * v70);
          if (!v72) {
            break;
          }
          uint64_t v74 = (unsigned __int8 *)(v66 + 16 * v70 + 10);
          if ((unsigned __int16)((v20 & v65) % 0x30) < 9u)
          {
            __int16 v75 = 0;
            LOBYTE(v76) = (v20 & v65) % 0x30;
            goto LABEL_65;
          }
          __int16 v75 = 0;
          uint64_t v76 = (unsigned __int16)(v69 - 48 * v70 - 9) >> 3;
          if (!((unsigned __int16)(v69 - 48 * v70 - 9) >> 3))
          {
            LODWORD(v76) = (v20 & v65) % 0x30;
            int v80 = (unsigned __int8 *)(v66 + 16 * v70 + 10);
            do
            {
LABEL_63:
              int v85 = *v80++;
              v75 += byte_20EBFB6[v85];
              LOWORD(v76) = v76 - 8;
            }
            while ((unsigned __int16)v76 > 8u);
            goto LABEL_64;
          }
          __int16 v77 = 0;
          uint64_t v78 = v76 + 1;
          uint64_t v79 = (v76 + 1) & 0x3FFE;
          LOWORD(v76) = v71 - 8 * v79;
          int v80 = &v74[v79];
          int v81 = (unsigned __int8 *)(v67 + 16 * v70);
          uint64_t v82 = v79;
          do
          {
            uint64_t v83 = *(v81 - 1);
            int v84 = *v81;
            v81 += 2;
            v75 += byte_20EBFB6[v83];
            v77 += byte_20EBFB6[v84];
            v82 -= 2;
          }
          while (v82);
          v75 += v77;
          if (v78 != v79) {
            goto LABEL_63;
          }
LABEL_64:
          v74 += ((unsigned __int16)(v71 - 9) >> 3) + 1;
LABEL_65:
          uint64_t v86 = (_DWORD *)(v73
                         + 12
                         * (unsigned __int16)(v75 + byte_20EBFB6[~(-1 << v76) & (unint64_t)*v74]));
          if (*(_DWORD *)(v17 + 36) == v86[1] && *(_DWORD *)(v17 + 32) == *v86)
          {
            if (v68 == -1) {
              uint64_t v68 = v69;
            }
LABEL_52:
            unint64_t v20 = ++v64 + v69;
            continue;
          }
          break;
        }
        uint64_t v88 = (unsigned __int8 *)(v66 + 16 * v70 + 10);
        if ((unsigned __int16)v71 < 9u)
        {
          __int16 v89 = 0;
          __int16 v100 = (unsigned __int8 *)(v66 + 16 * v70 + 10);
          LOBYTE(v94) = v71;
          goto LABEL_79;
        }
        __int16 v89 = 0;
        uint64_t v90 = (unsigned __int16)(v69 - 48 * v70 - 9) >> 3;
        if (!((unsigned __int16)(v69 - 48 * v70 - 9) >> 3))
        {
          unsigned __int16 v94 = v71;
          int v95 = (unsigned __int8 *)(v66 + 16 * v70 + 10);
          do
          {
LABEL_77:
            int v101 = *v95++;
            v89 += byte_20EBFB6[v101];
            v94 -= 8;
          }
          while (v94 > 8u);
          goto LABEL_78;
        }
        __int16 v91 = 0;
        uint64_t v92 = v90 + 1;
        uint64_t v93 = (v90 + 1) & 0x3FFE;
        unsigned __int16 v94 = v71 - 8 * v93;
        int v95 = &v88[v93];
        uint64_t v96 = (unsigned __int8 *)(v67 + 16 * v70);
        uint64_t v97 = v93;
        do
        {
          uint64_t v98 = *(v96 - 1);
          int v99 = *v96;
          v96 += 2;
          v89 += byte_20EBFB6[v98];
          v91 += byte_20EBFB6[v99];
          v97 -= 2;
        }
        while (v97);
        v89 += v91;
        if (v92 != v93) {
          goto LABEL_77;
        }
LABEL_78:
        __int16 v100 = &v88[((unsigned __int16)(v71 - 9) >> 3) + 1];
LABEL_79:
        if (v16 != *(void *)(v73
                              + 12
                              * (unsigned __int16)(v89
                                                 + byte_20EBFB6[~(-1 << v94) & (unint64_t)*v100])))
          goto LABEL_52;
        if (v69 == -1)
        {
          unint64_t v107 = -1;
LABEL_90:
          sub_AD3484(v17, (uint64_t *)&v384, v107, &v386);
          unint64_t v108 = v388;
          goto LABEL_111;
        }
        if ((unsigned __int16)v71 < 9u)
        {
          __int16 v104 = 0;
        }
        else
        {
          if ((((_WORD)v69 - 48 * (_WORD)v70 - 8) & 0xFFF8) != 0) {
            __int16 v102 = 8;
          }
          else {
            __int16 v102 = v69 - 48 * v70 - 8;
          }
          unsigned __int16 v103 = ~v102 + v69 - 48 * v70;
          if (v103 < 8u)
          {
            __int16 v104 = 0;
            unsigned __int16 v105 = v71;
            __int16 v106 = (unsigned __int8 *)(v66 + 16 * v70 + 10);
            goto LABEL_179;
          }
          __int16 v179 = 0;
          __int16 v180 = 0;
          uint64_t v181 = (v103 >> 3) + 1;
          unsigned __int16 v105 = v71 - 8 * (((v103 >> 3) + 1) & 0x3FFE);
          __int16 v106 = &v88[v181 & 0x3FFE];
          __int16 v182 = (unsigned __int8 *)(v66 + 16 * v70 + 11);
          uint64_t v183 = v181 & 0x3FFE;
          do
          {
            uint64_t v184 = *(v182 - 1);
            int v185 = *v182;
            v182 += 2;
            v179 += byte_20EBFB6[v184];
            v180 += byte_20EBFB6[v185];
            v183 -= 2;
          }
          while (v183);
          __int16 v104 = v180 + v179;
          if ((v181 & 0x3FFE) != v181)
          {
            do
            {
LABEL_179:
              int v186 = *v106++;
              v104 += byte_20EBFB6[v186];
              v105 -= 8;
            }
            while (v105 > 8u);
          }
          v88 += ((unsigned __int16)(v71 - 9) >> 3) + 1;
          LOBYTE(v71) = v105;
        }
        uint64_t v187 = v66 + 16 * v70;
        int v188 = *(_DWORD ***)(v17 + 56);
        unsigned __int16 v189 = v104 + byte_20EBFB6[~(-1 << v71) & (unint64_t)*v88];
        unint64_t v108 = (_DWORD *)(v73 + 12 * v189);
        if (*(unsigned __int16 *)(v187 + 8) == v189)
        {
          uint64_t v190 = v187 + 16;
          if ((_DWORD **)(v187 + 16) != v188)
          {
            while (1)
            {
              unsigned __int16 v191 = (_DWORD **)v190;
              if (*(_WORD *)(v190 + 8)) {
                break;
              }
              v190 += 16;
              if (v191 + 2 == v188)
              {
                uint64_t v187 = *(void *)(v17 + 56);
                goto LABEL_187;
              }
            }
            uint64_t v187 = v190;
LABEL_187:
            unint64_t v108 = *v191;
            goto LABEL_188;
          }
        }
        else
        {
LABEL_188:
          if ((_DWORD **)v187 != v188 && v72)
          {
            do
            {
              if (*(_DWORD *)(v17 + 36) != v108[1] || *(_DWORD *)(v17 + 32) != *v108) {
                break;
              }
              v108 += 3;
              if (v108 == (_DWORD *)(*(void *)v187 + 12 * *(unsigned __int16 *)(v187 + 8)))
              {
                v187 += 16;
                if ((_DWORD **)v187 != v188)
                {
                  do
                  {
                    if (*(_WORD *)(v187 + 8))
                    {
                      unint64_t v108 = *(_DWORD **)v187;
                      goto LABEL_192;
                    }
                    v187 += 16;
                  }
                  while ((_DWORD **)v187 != v188);
                  unint64_t v108 = *(_DWORD **)(v187 - 16);
                }
                break;
              }
LABEL_192:
              ;
            }
            while ((_DWORD **)v187 != v188);
          }
        }
LABEL_111:
        unsigned int v123 = v108[2];
        if (v123 == -1)
        {
          int v124 = *(_DWORD *)(v17 + 112);
          *(_DWORD *)(v17 + 112) = v124 + 1;
          v108[2] = v124;
          uint64_t v126 = *(unint64_t **)(v17 + 96);
          unint64_t v125 = *(void *)(v17 + 104);
          if ((unint64_t)v126 < v125)
          {
            *uint64_t v126 = v16;
            uint64_t v127 = (uint64_t)(v126 + 1);
            goto LABEL_134;
          }
          uint64_t v128 = (unint64_t **)(v17 + 88);
          int v129 = *(char **)(v17 + 88);
          uint64_t v130 = ((char *)v126 - v129) >> 3;
          unint64_t v131 = v130 + 1;
          if ((unint64_t)(v130 + 1) >> 61) {
            sub_2E00();
          }
          uint64_t v132 = v125 - (void)v129;
          if (v132 >> 2 > v131) {
            unint64_t v131 = v132 >> 2;
          }
          if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v131 = 0x1FFFFFFFFFFFFFFFLL;
          }
          if (v131)
          {
            if (v131 >> 61) {
              sub_188D718();
            }
            unint64_t v133 = v131;
            __int16 v134 = (char *)operator new(8 * v131);
            uint64_t v128 = (unint64_t **)(v17 + 88);
            unsigned __int16 v135 = (unint64_t *)&v134[8 * v130];
            *unsigned __int16 v135 = v16;
            uint64_t v127 = (uint64_t)(v135 + 1);
            if (v126 != (unint64_t *)v129)
            {
LABEL_122:
              unint64_t v136 = (char *)(v126 - 1) - v129;
              if (v136 < 0x58) {
                goto LABEL_409;
              }
              if ((unint64_t)(v129 - v134) < 0x20) {
                goto LABEL_409;
              }
              uint64_t v137 = (v136 >> 3) + 1;
              uint64_t v138 = 8 * (v137 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v139 = &v126[v138 / 0xFFFFFFFFFFFFFFF8];
              unsigned __int16 v135 = (unint64_t *)((char *)v135 - v138);
              uint64_t v140 = &v134[8 * v130 - 16];
              uint64_t v141 = v126 - 2;
              uint64_t v142 = v137 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v143 = *(_OWORD *)v141;
                *((_OWORD *)v140 - 1) = *((_OWORD *)v141 - 1);
                *(_OWORD *)uint64_t v140 = v143;
                v140 -= 32;
                v141 -= 4;
                v142 -= 4;
              }
              while (v142);
              uint64_t v126 = v139;
              if (v137 != (v137 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_409:
                do
                {
                  unint64_t v144 = *--v126;
                  *--unsigned __int16 v135 = v144;
                }
                while (v126 != (unint64_t *)v129);
              }
              uint64_t v126 = *v128;
            }
          }
          else
          {
            unint64_t v133 = 0;
            __int16 v134 = 0;
            unsigned __int16 v135 = (unint64_t *)(8 * v130);
            *(void *)(8 * v130) = v16;
            uint64_t v127 = 8 * v130 + 8;
            if (v126 != (unint64_t *)v129) {
              goto LABEL_122;
            }
          }
          *(void *)(v17 + 88) = v135;
          *(void *)(v17 + 96) = v127;
          *(void *)(v17 + 104) = &v134[8 * v133];
          uint64_t v4 = v350;
          if (v126) {
            operator delete(v126);
          }
LABEL_134:
          *(void *)(v17 + 96) = v127;
          unsigned int v123 = v108[2];
          uint64_t v8 = v352;
        }
        LODWORD(v384) = v123;
        unint64_t result = sub_BD5C18(v8, v123, v16);
        if ((result & 1) == 0)
        {
          if (!*(unsigned char *)(v4 + 21))
          {
            LODWORD(v386) = 0;
            uint64_t v158 = *(void *)(v4 + 192);
            uint64_t v159 = (char *)(v158
                          + ((unint64_t)*(unsigned int *)(sub_B25B80((uint64_t)v353, (unsigned int *)&v386) + 4) << 6));
            LODWORD(v386) = 0;
            uint64_t v160 = *(void *)(v4 + 192);
            uint64_t v161 = sub_B25B80((uint64_t)v353, (unsigned int *)&v386);
            unint64_t result = (unint64_t)sub_B257BC((uint64_t)v353, 0, v159, (unsigned char *)(v160 + ((unint64_t)*(unsigned int *)(v161 + 8) << 6)));
          }
          goto LABEL_257;
        }
        LODWORD(v386) = 0;
        if (*(void *)(v4 + 184) == *(void *)(v4 + 144)) {
          goto LABEL_222;
        }
        unint64_t result = sub_B25DE0((uint64_t)v353, (unsigned int *)&v386);
        if (result == -1) {
          goto LABEL_222;
        }
        uint64_t v145 = *(void *)(v4 + 152);
        uint64_t v146 = v145 + 16 * (result / 0x30);
        uint64_t v147 = (unsigned __int8 *)(v146 + 10);
        int v148 = result % 0x30;
        if ((unsigned __int16)(result % 0x30) < 9u)
        {
          __int16 v149 = 0;
          goto LABEL_152;
        }
        __int16 v149 = 0;
        uint64_t v150 = (unsigned __int16)(result % 0x30 - 9) >> 3;
        if (!((unsigned __int16)(result % 0x30 - 9) >> 3))
        {
          LODWORD(v150) = result % 0x30;
          uint64_t v154 = (unsigned __int8 *)(v146 + 10);
          do
          {
LABEL_150:
            int v162 = *v154++;
            v149 += byte_20EC2B6[v162];
            LOWORD(v150) = v150 - 8;
          }
          while ((unsigned __int16)v150 > 8u);
          goto LABEL_151;
        }
        __int16 v151 = 0;
        uint64_t v152 = v150 + 1;
        uint64_t v153 = (v150 + 1) & 0x3FFE;
        LOWORD(v150) = v148 - 8 * v153;
        uint64_t v154 = &v147[v153];
        unint64_t result = v145 + 16 * (result / 0x30) + 11;
        uint64_t v155 = v153;
        do
        {
          uint64_t v156 = *(unsigned __int8 *)(result - 1);
          int v157 = *(unsigned __int8 *)result;
          result += 2;
          v149 += byte_20EC2B6[v156];
          v151 += byte_20EC2B6[v157];
          v155 -= 2;
        }
        while (v155);
        v149 += v151;
        if (v152 != v153) {
          goto LABEL_150;
        }
LABEL_151:
        v147 += ((unsigned __int16)(v148 - 9) >> 3) + 1;
        LOBYTE(v148) = v150;
LABEL_152:
        uint64_t v163 = *(void *)(v4 + 160);
        unsigned __int16 v164 = v149 + byte_20EC2B6[~(-1 << v148) & (unint64_t)*v147];
        if (*(unsigned __int16 *)(v146 + 8) == v164)
        {
          v146 += 16;
          if (v146 != v163)
          {
            while (1)
            {
              uint64_t v165 = v146;
              if (*(_WORD *)(v146 + 8)) {
                break;
              }
              v146 += 16;
              if (v165 + 16 == v163) {
                goto LABEL_222;
              }
            }
            int v166 = *(_DWORD **)v146;
            if (v146 != v163)
            {
LABEL_160:
              if (*(void *)(v4 + 144))
              {
                while (*(_DWORD *)(v4 + 136) == *v166)
                {
                  v166 += 3;
                  if (v166 == (_DWORD *)(*(void *)v146 + 12 * *(unsigned __int16 *)(v146 + 8)))
                  {
                    while (1)
                    {
                      v146 += 16;
                      if (v146 == v163) {
                        goto LABEL_222;
                      }
                      if (*(_WORD *)(v146 + 8))
                      {
                        int v166 = *(_DWORD **)v146;
                        break;
                      }
                    }
                  }
                  if (v146 == v163) {
                    break;
                  }
                }
              }
              if (v146 != v163 && v166[2] != v166[1])
              {
                LODWORD(v386) = 0;
                uint64_t v167 = *(void *)(v4 + 192);
                unsigned int v168 = (_DWORD *)(v167
                                + ((unint64_t)*(unsigned int *)(sub_B25B80((uint64_t)v353, (unsigned int *)&v386)
                                                                     + 4) << 6));
                LODWORD(v386) = 0;
                uint64_t v169 = *(void *)(v4 + 192);
                uint64_t v170 = (_DWORD *)(v169
                                + ((unint64_t)*(unsigned int *)(sub_B25B80((uint64_t)v353, (unsigned int *)&v386)
                                                                     + 8) << 6));
                if (v168 != v170)
                {
                  int v171 = v378;
                  uint64_t v172 = v376;
                  long long v173 = v373;
                  long long v174 = v371;
                  unint64_t v175 = ((unint64_t)v373 - v372) >> 4;
                  do
                  {
                    unsigned int v178 = v168[13];
                    if (v171)
                    {
                      unsigned int v379 = v168[14];
                      int v176 = v168[15];
                      int v380 = v176;
                    }
                    else
                    {
                      int v176 = *(_DWORD *)(v172 + 12 * v178);
                    }
                    uint64_t v177 = (unsigned int *)((char *)v174 + *(unsigned __int16 *)((char *)v174 - *v174 + 6));
                    v168[7] = *(unsigned int *)((char *)&v177[2
                                                            * (*(_DWORD *)(v172 + 12 * v178 + 4) + v175)
                                                            + 2]
                                              + *v177)
                            + v176
                            - *((_DWORD *)v173 + 2);
                    v168 += 16;
                  }
                  while (v168 != v170);
                  uint64_t v377 = (int *)(v172 + 12 * v178);
                }
                sub_B32E90(v353, 0);
                if ((*((unsigned char *)v373 + 15) & 2) != 0
                  && (!v375
                   || (*(_DWORD *)(v375 + 4 * (((unint64_t)v373 - v372) >> 4)) & v351) == 0))
                {
                  int v193 = *(_DWORD *)(v4 + 96);
                  if (*(unsigned char *)(v4 + 20))
                  {
                    int v194 = v193 + v193 * *(_DWORD *)(v4 + 416);
                    int v195 = v384;
                    uint64_t v196 = *(void *)(v4 + 48);
                    if (v196) {
                      goto LABEL_209;
                    }
LABEL_211:
                    int v197 = 0x80000000;
                  }
                  else
                  {
                    int v194 = -1;
                    int v195 = v384;
                    uint64_t v196 = *(void *)(v4 + 48);
                    if (!v196) {
                      goto LABEL_211;
                    }
LABEL_209:
                    int v197 = sub_AD7004(v196, v195, *(_DWORD *)(v4 + 100) + v336);
                  }
                  if (sub_B33118(v353, 0, v337 + v193 + v193 * v195, v193 + v193 * v195, v194, v197)) {
                    sub_A3EF14(v335, &v384);
                  }
                }
                LODWORD(v386) = 0;
                uint64_t v198 = *(void *)(v4 + 192);
                uint64_t v199 = (_DWORD *)(v198
                                + ((unint64_t)*(unsigned int *)(sub_B25B80((uint64_t)v353, (unsigned int *)&v386)
                                                                     + 4) << 6));
                LODWORD(v386) = 0;
                uint64_t v200 = *(void *)(v4 + 192);
                uint64_t v201 = (_DWORD *)(v200
                                + ((unint64_t)*(unsigned int *)(sub_B25B80((uint64_t)v353, (unsigned int *)&v386)
                                                                     + 8) << 6));
                if (v199 != v201)
                {
                  int v202 = v378;
                  uint64_t v203 = v376;
                  int v204 = v371;
                  unint64_t v205 = ((unint64_t)v373 - v372) >> 4;
                  do
                  {
                    unsigned int v208 = v199[13];
                    if (v202)
                    {
                      unsigned int v379 = v199[14];
                      int v206 = v199[15];
                      int v380 = v206;
                    }
                    else
                    {
                      int v206 = *(_DWORD *)(v203 + 12 * v208);
                    }
                    unsigned int v207 = (unsigned int *)((char *)v204 + *(unsigned __int16 *)((char *)v204 - *v204 + 6));
                    v199[7] = *(unsigned int *)((char *)&v207[2
                                                            * (*(_DWORD *)(v203 + 12 * v208 + 4) + v205)
                                                            + 1]
                                              + *v207)
                            + v206;
                    v199 += 16;
                  }
                  while (v199 != v201);
                  uint64_t v377 = (int *)(v203 + 12 * v208);
                }
                unint64_t result = (unint64_t)sub_B32E90(v353, 0);
              }
            }
          }
        }
        else
        {
          int v166 = (_DWORD *)(*(void *)v146 + 12 * v164);
          if (v146 != v163) {
            goto LABEL_160;
          }
        }
LABEL_222:
        if ((*((unsigned char *)v373 + 15) & 1) == 0) {
          goto LABEL_257;
        }
        if (!v375)
        {
          if (!v351) {
            goto LABEL_227;
          }
          goto LABEL_257;
        }
        if (*(_DWORD *)(v375 + 4 * (((unint64_t)v373 - v372) >> 4)) != v351) {
          goto LABEL_257;
        }
LABEL_227:
        unsigned int v209 = v347 + *(_DWORD *)(v4 + 96) + *(_DWORD *)(v4 + 96) * v384;
        LODWORD(v386) = v209;
        if (*(void *)(v4 + 184) == *(void *)(v4 + 144)) {
          goto LABEL_257;
        }
        unint64_t result = sub_B25DE0((uint64_t)v353, (unsigned int *)&v386);
        if (result == -1) {
          goto LABEL_257;
        }
        uint64_t v210 = *(void *)(v4 + 152);
        uint64_t v211 = v210 + 16 * (result / 0x30);
        char v212 = (unsigned __int8 *)(v211 + 10);
        int v213 = result % 0x30;
        if ((unsigned __int16)(result % 0x30) < 9u)
        {
          __int16 v214 = 0;
          goto LABEL_239;
        }
        __int16 v214 = 0;
        uint64_t v215 = (unsigned __int16)(result % 0x30 - 9) >> 3;
        if (!((unsigned __int16)(result % 0x30 - 9) >> 3))
        {
          LODWORD(v215) = result % 0x30;
          uint64_t v219 = (unsigned __int8 *)(v211 + 10);
          do
          {
LABEL_237:
            int v223 = *v219++;
            v214 += byte_20EC2B6[v223];
            LOWORD(v215) = v215 - 8;
          }
          while ((unsigned __int16)v215 > 8u);
          goto LABEL_238;
        }
        __int16 v216 = 0;
        uint64_t v217 = v215 + 1;
        uint64_t v218 = (v215 + 1) & 0x3FFE;
        LOWORD(v215) = v213 - 8 * v218;
        uint64_t v219 = &v212[v218];
        unint64_t result = v210 + 16 * (result / 0x30) + 11;
        uint64_t v220 = v218;
        do
        {
          uint64_t v221 = *(unsigned __int8 *)(result - 1);
          int v222 = *(unsigned __int8 *)result;
          result += 2;
          v214 += byte_20EC2B6[v221];
          v216 += byte_20EC2B6[v222];
          v220 -= 2;
        }
        while (v220);
        v214 += v216;
        if (v217 != v218) {
          goto LABEL_237;
        }
LABEL_238:
        v212 += ((unsigned __int16)(v213 - 9) >> 3) + 1;
        LOBYTE(v213) = v215;
LABEL_239:
        uint64_t v224 = *(void *)(v4 + 160);
        unsigned __int16 v225 = v214 + byte_20EC2B6[~(-1 << v213) & (unint64_t)*v212];
        if (*(unsigned __int16 *)(v211 + 8) == v225)
        {
          v211 += 16;
          if (v211 != v224)
          {
            while (1)
            {
              uint64_t v226 = v211;
              if (*(_WORD *)(v211 + 8)) {
                break;
              }
              v211 += 16;
              if (v226 + 16 == v224) {
                goto LABEL_257;
              }
            }
            unsigned __int16 v227 = *(_DWORD **)v211;
            if (v211 != v224) {
              goto LABEL_247;
            }
          }
          goto LABEL_257;
        }
        unsigned __int16 v227 = (_DWORD *)(*(void *)v211 + 12 * v225);
        if (v211 == v224) {
          goto LABEL_257;
        }
LABEL_247:
        if (*(void *)(v4 + 144))
        {
          do
          {
            if (*(_DWORD *)(v4 + 136) != *v227) {
              break;
            }
            v227 += 3;
            if (v227 == (_DWORD *)(*(void *)v211 + 12 * *(unsigned __int16 *)(v211 + 8)))
            {
              do
              {
                v211 += 16;
                if (v211 == v224) {
                  goto LABEL_257;
                }
              }
              while (!*(_WORD *)(v211 + 8));
              unsigned __int16 v227 = *(_DWORD **)v211;
            }
          }
          while (v211 != v224);
        }
        if (v211 != v224)
        {
          uint64_t v230 = v227 + 1;
          int v229 = v227[1];
          int v228 = v230[1];
          int v231 = v228 - v229;
          if (v228 != v229)
          {
            unsigned int v238 = 0;
            int v338 = v228 - v229;
            unsigned int v346 = v209;
            do
            {
              uint64_t v239 = sub_B276AC(v353, v209, v238);
              int v240 = *(_DWORD *)(v239 + 28);
              if (v378)
              {
                unint64_t result = sub_A2B620(*(void *)(v4 + 24), (uint64_t)&v369, v240, 1);
                if ((result & 1) == 0) {
                  goto LABEL_281;
                }
              }
              else
              {
                unint64_t result = sub_A2BC00((uint64_t)&v369, v240, 1);
                if (!result) {
                  goto LABEL_281;
                }
              }
              uint64_t v343 = *(void *)(v239 + 20);
              int v344 = *(_DWORD *)(v239 + 32);
              unsigned int v345 = *(_DWORD *)(v239 + 40);
              int v341 = *(_DWORD *)(v239 + 36);
              int v342 = *(_DWORD *)(v239 + 44);
              int v340 = *(unsigned __int8 *)(v239 + 48);
              __int16 v367 = *(_WORD *)(v239 + 49);
              uint64_t v241 = (void *)(*(void *)(v4 + 24) + 4136);
              char v368 = *(unsigned char *)(v239 + 51);
              if (sub_A10E20(v241, v349))
              {
                uint64_t v242 = (int *)sub_A1120C(*(void *)(*v241 + 3944), v348);
              }
              else
              {
                if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                  && __cxa_guard_acquire(&qword_24F7308))
                {
                  sub_518C8(0x3B60u, 0x7FCAu);
                  dword_24F7300 = v326 | 0x40000000;
                  __cxa_guard_release(&qword_24F7308);
                  uint64_t v4 = v350;
                  uint64_t v8 = v352;
                }
                uint64_t v243 = *v241;
                if (dword_24F7300 == v349)
                {
                  unsigned __int16 v244 = *(unsigned int **)(*(void *)(v243 + 3976) + 72);
                  if (!v244)
                  {
                    exception = __cxa_allocate_exception(0x40uLL);
                    long long v386 = (char *)operator new(0x40uLL);
                    long long v387 = xmmword_20B9A90;
                    strcpy(v386, "Realtime stop pattern quad data requested on nullptr buffer");
                    long long v332 = (void *)sub_2F404((uint64_t)exception, (long long *)&v386);
                  }
                  uint64_t v245 = (int *)((char *)v244 + *v244);
                  unint64_t v246 = (unsigned __int16 *)((char *)v245 - *v245);
                  if (*v246 >= 5u && (uint64_t v247 = v246[2]) != 0) {
                    uint64_t v248 = (unsigned int *)((char *)v245 + v247 + *(unsigned int *)((char *)v245 + v247));
                  }
                  else {
                    uint64_t v248 = 0;
                  }
                  uint64_t v242 = (int *)sub_A1139C(v248, v348);
                }
                else
                {
                  uint64_t v242 = (int *)sub_A11500(v243 + 24, v348, 0, "stop pattern");
                }
              }
              unint64_t v249 = v242;
              uint64_t v250 = *v241;
              uint64_t v251 = (unsigned __int16 *)((char *)v242 - *v242);
              if (*v251 >= 0xFu && (uint64_t v252 = v251[7]) != 0)
              {
                uint64_t v253 = v250 + 3896;
                char v254 = sub_49442C(*(unsigned __int16 *)((char *)v242 + v252));
                if (sub_C25A10(v253, v254)) {
                  goto LABEL_305;
                }
              }
              else
              {
                uint64_t v258 = v250 + 3896;
                char v259 = sub_49442C(0x7FFFu);
                if (sub_C25A10(v258, v259))
                {
LABEL_305:
                  int v257 = 128;
                  if (sub_A10E20(v241, v349)) {
                    goto LABEL_306;
                  }
                  goto LABEL_309;
                }
              }
              unint64_t v255 = (unsigned __int16 *)((char *)v249 - *v249);
              if (*v255 >= 0xBu && (uint64_t v256 = v255[5]) != 0)
              {
                int v257 = sub_A2BF48(*((unsigned char *)v249 + v256));
                if (sub_A10E20(v241, v349)) {
                  goto LABEL_306;
                }
              }
              else
              {
                int v257 = sub_A2BF48(0);
                if (sub_A10E20(v241, v349))
                {
LABEL_306:
                  unsigned int v260 = (int *)sub_A1120C(*(void *)(*v241 + 3944), v348);
                  uint64_t v261 = (unsigned __int16 *)((char *)v260 - *v260);
                  if (*v261 < 0x19u) {
                    goto LABEL_321;
                  }
                  goto LABEL_319;
                }
              }
LABEL_309:
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                && __cxa_guard_acquire(&qword_24F7308))
              {
                sub_518C8(0x3B60u, 0x7FCAu);
                dword_24F7300 = v327 | 0x40000000;
                __cxa_guard_release(&qword_24F7308);
                uint64_t v4 = v350;
                uint64_t v8 = v352;
              }
              uint64_t v262 = *v241;
              if (dword_24F7300 == v349)
              {
                unsigned int v263 = *(unsigned int **)(*(void *)(v262 + 3976) + 72);
                if (!v263)
                {
                  int v329 = __cxa_allocate_exception(0x40uLL);
                  long long v386 = (char *)operator new(0x40uLL);
                  long long v387 = xmmword_20B9A90;
                  strcpy(v386, "Realtime stop pattern quad data requested on nullptr buffer");
                  uint64_t v330 = (void *)sub_2F404((uint64_t)v329, (long long *)&v386);
                }
                uint64_t v264 = (int *)((char *)v263 + *v263);
                unint64_t v265 = (unsigned __int16 *)((char *)v264 - *v264);
                if (*v265 >= 5u && (uint64_t v266 = v265[2]) != 0) {
                  unint64_t v267 = (unsigned int *)((char *)v264 + v266 + *(unsigned int *)((char *)v264 + v266));
                }
                else {
                  unint64_t v267 = 0;
                }
                unsigned int v260 = (int *)sub_A1139C(v267, v348);
                uint64_t v261 = (unsigned __int16 *)((char *)v260 - *v260);
                if (*v261 < 0x19u) {
                  goto LABEL_321;
                }
              }
              else
              {
                unsigned int v260 = (int *)sub_A11500(v262 + 24, v348, 0, "stop pattern");
                uint64_t v261 = (unsigned __int16 *)((char *)v260 - *v260);
                if (*v261 < 0x19u) {
                  goto LABEL_321;
                }
              }
LABEL_319:
              uint64_t v268 = v261[12];
              if (v268)
              {
                unsigned int v269 = *((unsigned __int8 *)v260 + v268);
                goto LABEL_322;
              }
LABEL_321:
              unsigned int v269 = 2;
LABEL_322:
              unsigned int v270 = sub_A2BF38(v269);
              if (v345 <= v270) {
                unsigned int v271 = v270;
              }
              else {
                unsigned int v271 = v345;
              }
              if (sub_A10E20(v241, v349))
              {
                __int16 v272 = (int *)sub_A1120C(*(void *)(*v241 + 3944), v348);
                goto LABEL_334;
              }
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                && __cxa_guard_acquire(&qword_24F7308))
              {
                sub_518C8(0x3B60u, 0x7FCAu);
                dword_24F7300 = v328 | 0x40000000;
                __cxa_guard_release(&qword_24F7308);
                uint64_t v4 = v350;
                uint64_t v8 = v352;
              }
              uint64_t v273 = *v241;
              if (dword_24F7300 != v349)
              {
                __int16 v272 = (int *)sub_A11500(v273 + 24, v348, 0, "stop pattern");
LABEL_334:
                unint64_t v279 = (unsigned __int16 *)((char *)v272 - *v272);
                if (*v279 < 0xFu) {
                  goto LABEL_341;
                }
                goto LABEL_338;
              }
              int v274 = *(unsigned int **)(*(void *)(v273 + 3976) + 72);
              if (!v274)
              {
                uint64_t v333 = __cxa_allocate_exception(0x40uLL);
                long long v386 = (char *)operator new(0x40uLL);
                long long v387 = xmmword_20B9A90;
                strcpy(v386, "Realtime stop pattern quad data requested on nullptr buffer");
                long long v334 = (void *)sub_2F404((uint64_t)v333, (long long *)&v386);
              }
              uint64_t v275 = (int *)((char *)v274 + *v274);
              int v276 = (unsigned __int16 *)((char *)v275 - *v275);
              if (*v276 >= 5u && (uint64_t v277 = v276[2]) != 0) {
                int v278 = (unsigned int *)((char *)v275 + v277 + *(unsigned int *)((char *)v275 + v277));
              }
              else {
                int v278 = 0;
              }
              __int16 v272 = (int *)sub_A1139C(v278, v348);
              unint64_t v279 = (unsigned __int16 *)((char *)v272 - *v272);
              if (*v279 < 0xFu)
              {
LABEL_341:
                char v281 = 3;
                int v283 = v344;
                goto LABEL_342;
              }
LABEL_338:
              uint64_t v280 = v279[7];
              if (!v280) {
                goto LABEL_341;
              }
              char v281 = 0;
              unsigned int v282 = *(unsigned __int16 *)((char *)v272 + v280);
              int v283 = v344;
              switch(v282)
              {
                case 0u:
                case 1u:
                case 2u:
                case 0xCu:
                  break;
                case 3u:
                  char v281 = 1;
                  break;
                case 4u:
                  char v281 = 2;
                  break;
                case 5u:
                case 6u:
                case 7u:
                  goto LABEL_340;
                case 8u:
                case 9u:
                case 0xAu:
                case 0xBu:
                  goto LABEL_384;
                default:
                  int v283 = v344;
                  if (v282 != 900)
                  {
LABEL_384:
                    uint64_t v319 = ((5243 * (v282 >> 2)) >> 17) - 1;
                    if (v319 > 0xB) {
LABEL_340:
                    }
                      char v281 = 3;
                    else {
                      char v281 = byte_20EC3B6[v319];
                    }
                  }
                  break;
              }
LABEL_342:
              int v284 = (1 << v281) | v340;
              int v285 = v380;
              unint64_t v286 = 0xFFFFFFFF00000000;
              if (v378) {
                unint64_t v286 = (unint64_t)v379 << 32;
              }
              unint64_t v287 = (-1431655765 * (((unint64_t)v377 - v376) >> 2)) | v286;
              if (!v378) {
                int v285 = 0x7FFFFFFF;
              }
              unsigned __int8 v288 = (unsigned int *)((char *)v371 + *(unsigned __int16 *)((char *)v371 - *v371 + 6));
              unsigned __int8 v289 = (char *)v288 + *v288;
              uint64_t v290 = &v380;
              if (!v378) {
                uint64_t v290 = v377;
              }
              int v291 = *v290;
              int v292 = &v289[8 * v377[1] + 8 * (((unint64_t)v373 - v372) >> 4)];
              int v293 = *((_DWORD *)v292 + 1) + v291;
              LODWORD(v292) = 10 * (*(_DWORD *)(v239 + 28) - v291 - *((_DWORD *)v292 + 2));
              LODWORD(v354) = ((unint64_t)v373 - v372) >> 4;
              *(void *)((char *)&v354 + 4) = v287;
              HIDWORD(v354) = v285;
              unsigned int v355 = v383;
              uint64_t v356 = v343;
              int v357 = v293;
              int v358 = v283;
              int v359 = v257 + v341;
              unsigned int v360 = v271;
              int v361 = v342 - (v292 & ~((int)v292 >> 31));
              char v362 = v284;
              __int16 v363 = v367;
              char v364 = v368;
              unint64_t v365 = v287;
              int v366 = v285;
              LODWORD(v386) = 0;
              int v231 = v338;
              if (*(void *)(v4 + 184) == *(void *)(v4 + 144)) {
                goto LABEL_280;
              }
              unint64_t v294 = sub_B25DE0((uint64_t)v353, (unsigned int *)&v386);
              if (v294 == -1) {
                goto LABEL_280;
              }
              uint64_t v295 = *(void *)(v4 + 152);
              uint64_t v296 = v295 + 16 * (v294 / 0x30);
              uint64_t v297 = (unsigned __int8 *)(v296 + 10);
              int v298 = v294 % 0x30;
              if ((unsigned __int16)(v294 % 0x30) < 9u)
              {
                __int16 v299 = 0;
                goto LABEL_360;
              }
              __int16 v299 = 0;
              uint64_t v300 = (unsigned __int16)(v294 % 0x30 - 9) >> 3;
              if ((unsigned __int16)(v294 % 0x30 - 9) >> 3)
              {
                __int16 v301 = 0;
                uint64_t v302 = v300 + 1;
                uint64_t v303 = (v300 + 1) & 0x3FFE;
                LOWORD(v300) = v298 - 8 * v303;
                uint64_t v304 = &v297[v303];
                int v305 = (unsigned __int8 *)(v295 + 16 * (v294 / 0x30) + 11);
                uint64_t v306 = v303;
                do
                {
                  uint64_t v307 = *(v305 - 1);
                  int v308 = *v305;
                  v305 += 2;
                  v299 += byte_20EC2B6[v307];
                  v301 += byte_20EC2B6[v308];
                  v306 -= 2;
                }
                while (v306);
                v299 += v301;
                if (v302 == v303) {
                  goto LABEL_359;
                }
              }
              else
              {
                LODWORD(v300) = v294 % 0x30;
                uint64_t v304 = (unsigned __int8 *)(v296 + 10);
              }
              do
              {
                int v309 = *v304++;
                v299 += byte_20EC2B6[v309];
                LOWORD(v300) = v300 - 8;
              }
              while ((unsigned __int16)v300 > 8u);
LABEL_359:
              v297 += ((unsigned __int16)(v298 - 9) >> 3) + 1;
              LOBYTE(v298) = v300;
LABEL_360:
              uint64_t v310 = *(void *)(v4 + 160);
              unsigned __int16 v311 = v299 + byte_20EC2B6[~(-1 << v298) & (unint64_t)*v297];
              if (*(unsigned __int16 *)(v296 + 8) == v311)
              {
                v296 += 16;
                if (v296 != v310)
                {
                  while (1)
                  {
                    uint64_t v312 = v296;
                    if (*(_WORD *)(v296 + 8)) {
                      break;
                    }
                    v296 += 16;
                    if (v312 + 16 == v310) {
                      goto LABEL_280;
                    }
                  }
                  uint64_t v313 = *(_DWORD **)v296;
                  if (v296 != v310)
                  {
LABEL_368:
                    if (*(void *)(v4 + 144))
                    {
                      while (*(_DWORD *)(v4 + 136) == *v313)
                      {
                        v313 += 3;
                        if (v313 == (_DWORD *)(*(void *)v296 + 12 * *(unsigned __int16 *)(v296 + 8)))
                        {
                          while (1)
                          {
                            v296 += 16;
                            if (v296 == v310) {
                              goto LABEL_280;
                            }
                            if (*(_WORD *)(v296 + 8))
                            {
                              uint64_t v313 = *(_DWORD **)v296;
                              break;
                            }
                          }
                        }
                        if (v296 == v310) {
                          break;
                        }
                      }
                    }
                    if (v296 != v310 && v313[2] != v313[1])
                    {
                      unint64_t result = sub_B30AF0((uint64_t)v353, (uint64_t)&v354, 0, 0, 0);
                      if ((result & 0x100) != 0)
                      {
                        LODWORD(v386) = 0;
                        uint64_t v314 = *(void *)(v4 + 192);
                        uint64_t v315 = v314
                             + ((unint64_t)*(unsigned int *)(sub_B25B80((uint64_t)v353, (unsigned int *)&v386) + 4) << 6);
                        LODWORD(v386) = 0;
                        uint64_t v316 = *(void *)(v4 + 192);
                        uint64_t v317 = sub_B25B80((uint64_t)v353, (unsigned int *)&v386);
                        uint64_t v318 = (long long *)(v316 + ((unint64_t)*(unsigned int *)(v317 + 8) << 6));
                        if ((long long *)v315 != v318)
                        {
                          while (*(_DWORD *)(v315 + 28) != 0x7FFFFFFF)
                          {
                            v315 += 64;
                            if ((long long *)v315 == v318)
                            {
                              uint64_t v315 = v316 + ((unint64_t)*(unsigned int *)(v317 + 8) << 6);
                              goto LABEL_394;
                            }
                          }
                          if ((long long *)v315 != v318)
                          {
                            for (uint64_t j = (long long *)(v315 + 64); j != v318; j += 4)
                            {
                              if (*((_DWORD *)j + 7) != 0x7FFFFFFF)
                              {
                                long long v321 = *j;
                                long long v322 = j[1];
                                long long v323 = j[3];
                                *(_OWORD *)(v315 + 32) = j[2];
                                *(_OWORD *)(v315 + 48) = v323;
                                *(_OWORD *)uint64_t v315 = v321;
                                *(_OWORD *)(v315 + 16) = v322;
                                v315 += 64;
                              }
                            }
                          }
                        }
LABEL_394:
                        LODWORD(v386) = 0;
                        uint64_t v324 = *(void *)(v4 + 192);
                        uint64_t v325 = sub_B25B80((uint64_t)v353, (unsigned int *)&v386);
                        unint64_t result = (unint64_t)sub_B257BC((uint64_t)v353, 0, (char *)v315, (unsigned char *)(v324+ ((unint64_t)*(unsigned int *)(v325 + 8) << 6)));
                        int v231 = v338;
                      }
                      goto LABEL_281;
                    }
                  }
                }
              }
              else
              {
                uint64_t v313 = (_DWORD *)(*(void *)v296 + 12 * v311);
                if (v296 != v310) {
                  goto LABEL_368;
                }
              }
LABEL_280:
              unint64_t result = sub_B26C6C((uint64_t)v353, 0, &v354);
LABEL_281:
              ++v238;
              unsigned int v209 = v346;
            }
            while (v238 != v231);
          }
        }
LABEL_257:
        unint64_t v14 = v372;
        uint64_t v13 = v373 - 2;
        v373 -= 2;
        if (*(unsigned char *)(v369 + 16)) {
          BOOL v232 = v370 == 0;
        }
        else {
          BOOL v232 = 0;
        }
        if (v232 && (unint64_t)v13 >= v372 && (unint64_t)v13 < v374)
        {
          do
          {
            unint64_t v235 = __ROR8__(*v13, 32);
            if (HIDWORD(v235) == 1 && (v235 + 3) < 2) {
              break;
            }
            unint64_t result = sub_2AB7E4(**(void **)(v369 + 4120));
            unint64_t v14 = v372;
            uint64_t v13 = v373;
            if (result) {
              break;
            }
            uint64_t v13 = v373 - 2;
            unint64_t v373 = v13;
          }
          while ((unint64_t)v13 >= v372 && (unint64_t)v13 < v374);
        }
      }
      uint64_t v7 = v381 + 4;
      uint64_t v381 = v7;
    }
    while ((unint64_t)v7 < v382);
  }
  return result;
}

void sub_B32DB4(_Unwind_Exception *a1)
{
}

void sub_B32DCC(_Unwind_Exception *a1)
{
}

void sub_B32DE4(_Unwind_Exception *a1)
{
}

void sub_B32DFC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 - 153) < 0) {
    operator delete(*(void **)(v1 + 152));
  }
  _Unwind_Resume(exception_object);
}

void sub_B32E48(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_B32E90(void *a1, unsigned int a2)
{
  v36[0] = a2;
  sub_B274E0(a1, v36, v32);
  uint64_t v4 = a1[6];
  uint64_t v5 = a1[7];
  uint64_t v23 = a1;
  uint64_t v24 = v4;
  uint64_t v25 = v5;
  uint64_t v26 = v5;
  uint64_t v27 = 0;
  uint64_t v28 = v4;
  uint64_t v29 = v5;
  uint64_t v30 = v5;
  uint64_t v31 = 0;
  unint64_t result = (char *)sub_AE47A0(&v23);
  if (v32[1] == v24 && v33 == v25 && v34 == v26 && (v34 == v33 || v35 == v27)) {
    return result;
  }
  int v7 = *(_DWORD *)(v35 + 4);
  int v8 = *(_DWORD *)(v35 + 8);
  unsigned int v9 = v8 - v7;
  if (v8 == v7) {
    return result;
  }
  char v22 = 0;
  unsigned int v10 = 0;
  unsigned int v11 = 1;
LABEL_6:
  while (2)
  {
    if (v11 <= v9) {
      unsigned int v12 = v9;
    }
    else {
      unsigned int v12 = v11;
    }
    unint64_t result = (char *)sub_B276AC(a1, a2, v10++);
    if (*((_DWORD *)result + 7) != 0x7FFFFFFF && v10 < v9)
    {
      unint64_t v14 = result;
      for (unsigned int i = v10; v12 != i; ++i)
      {
        unint64_t result = (char *)sub_B276AC(a1, a2, i);
        int v16 = *((_DWORD *)result + 7);
        if (v16 != 0x7FFFFFFF)
        {
          int v17 = *((_DWORD *)v14 + 7);
          if (v17 < v16
            || *((_DWORD *)v14 + 8) > *((_DWORD *)result + 8)
            || (unsigned int v18 = *((_DWORD *)result + 9), v19 = *((_DWORD *)v14 + 9), v19 > v18)
            || *((_DWORD *)v14 + 10) > *((_DWORD *)result + 10)
            || v19 == v18 && v17 == v16 && *((_DWORD *)v14 + 11) - 10 * v17 > *((_DWORD *)result + 11) - 10 * v16
            || (v14[48] & ~result[48]) != 0)
          {
            if (v16 >= v17 && *((_DWORD *)result + 8) <= *((_DWORD *)v14 + 8))
            {
              unsigned int v20 = *((_DWORD *)v14 + 9);
              unsigned int v21 = *((_DWORD *)result + 9);
              if (v21 <= v20
                && *((_DWORD *)result + 10) <= *((_DWORD *)v14 + 10)
                && (v21 != v20 || v16 != v17 || *((_DWORD *)result + 11) - 10 * v16 <= *((_DWORD *)v14 + 11) - 10 * v17)
                && (result[48] & ~v14[48]) == 0)
              {
                *((_DWORD *)v14 + 7) = 0x7FFFFFFF;
                if (v10 == v9) {
                  return sub_B273D4((uint64_t)a1, a2);
                }
                char v22 = 1;
                ++v11;
                goto LABEL_6;
              }
            }
          }
          else
          {
            *((_DWORD *)result + 7) = 0x7FFFFFFF;
            char v22 = 1;
          }
        }
      }
    }
    if (v10 != v9)
    {
      ++v11;
      continue;
    }
    break;
  }
  if ((v22 & 1) == 0) {
    return result;
  }
  return sub_B273D4((uint64_t)a1, a2);
}

BOOL sub_B33118(void *a1, unsigned int a2, unsigned int a3, int a4, int a5, int a6)
{
  v55[0] = a2;
  sub_B274E0(a1, v55, v52);
  uint64_t v11 = a1[6];
  uint64_t v12 = a1[7];
  unsigned int v44 = a1;
  *(void *)&long long v45 = v11;
  *((void *)&v45 + 1) = v12;
  uint64_t v46 = v12;
  uint64_t v47 = 0;
  uint64_t v48 = v11;
  uint64_t v49 = v12;
  uint64_t v50 = v12;
  uint64_t v51 = 0;
  sub_AE47A0(&v44);
  if (*(_OWORD *)&v52[8] == v45
    && *(void *)&v52[24] == v46
    && (*(void *)&v52[24] == *(void *)&v52[16] || (void)v53 == v47))
  {
    goto LABEL_7;
  }
  int v13 = *(_DWORD *)(v53 + 4);
  int v14 = *(_DWORD *)(v53 + 8);
  int v15 = v14 - v13;
  if (v14 == v13) {
    goto LABEL_7;
  }
  if (a6 == 0x7FFFFFFF)
  {
    unsigned int v16 = 0;
    do
      sub_B276AC(a1, a2, v16++);
    while (v15 != v16);
LABEL_7:
    LOBYTE(v17) = 0;
    return v17 != 0;
  }
  __int16 v17 = 0;
  unsigned int v19 = 0;
  unsigned int v43 = a3;
  do
  {
    char v22 = (_OWORD *)sub_B276AC(a1, a2, v19);
    long long v23 = v22[2];
    long long v24 = v22[3];
    long long v25 = v22[1];
    *(_OWORD *)uint64_t v52 = *v22;
    *(_OWORD *)&v52[16] = v25;
    long long v53 = v23;
    long long v54 = v24;
    if (SHIDWORD(v25) >= a6)
    {
      if (a5 == 0xFFFFFFFFLL
        || (LODWORD(v44) = a5,
            uint64_t v26 = a1[11],
            uint64_t v27 = v26 + ((unint64_t)*(unsigned int *)(sub_B25B80((uint64_t)a1, (unsigned int *)&v44) + 4) << 6),
            LODWORD(v44) = a5,
            uint64_t v28 = a1[11],
            uint64_t v29 = v28 + ((unint64_t)*(unsigned int *)(sub_B25B80((uint64_t)a1, (unsigned int *)&v44) + 8) << 6),
            v27 == v29))
      {
LABEL_30:
        LODWORD(v44) = a4;
        uint64_t v33 = a1[11];
        uint64_t v34 = v33 + ((unint64_t)*(unsigned int *)(sub_B25B80((uint64_t)a1, (unsigned int *)&v44) + 4) << 6);
        LODWORD(v44) = a4;
        uint64_t v35 = a1[11];
        uint64_t v36 = v35 + ((unint64_t)*(unsigned int *)(sub_B25B80((uint64_t)a1, (unsigned int *)&v44) + 8) << 6);
        if (v34 == v36)
        {
LABEL_45:
          unint64_t v40 = sub_B30AF0((uint64_t)a1, (uint64_t)v52, v43, 1, 1);
          unint64_t v20 = v40 >> 8;
          __int16 v21 = v40;
          if ((_BYTE)v40)
          {
            *(void *)(v41 + 52) = -1;
            *(_DWORD *)(v41 + 60) = 0x7FFFFFFF;
          }
          goto LABEL_11;
        }
        while (1)
        {
          int v37 = *(_DWORD *)(v34 + 28);
          if (v37 != 0x7FFFFFFF && v37 >= *(_DWORD *)&v52[28] && *(_DWORD *)(v34 + 32) <= (int)v53)
          {
            unsigned int v39 = *(_DWORD *)(v34 + 36);
            if (v39 <= DWORD1(v53)
              && *(_DWORD *)(v34 + 40) <= DWORD2(v53)
              && (v39 != DWORD1(v53)
               || v37 != *(_DWORD *)&v52[28]
               || *(_DWORD *)(v34 + 44) - 10 * v37 <= HIDWORD(v53) - 10 * *(_DWORD *)&v52[28])
              && (*(unsigned __int8 *)(v34 + 48) & ~v54) == 0)
            {
              break;
            }
          }
          v34 += 64;
          if (v34 == v36) {
            goto LABEL_45;
          }
        }
      }
      else
      {
        while (1)
        {
          int v30 = *(_DWORD *)(v27 + 28);
          if (v30 != 0x7FFFFFFF && v30 >= *(_DWORD *)&v52[28] && *(_DWORD *)(v27 + 32) <= (int)v53)
          {
            unsigned int v32 = *(_DWORD *)(v27 + 36);
            if (v32 <= DWORD1(v53)
              && *(_DWORD *)(v27 + 40) <= DWORD2(v53)
              && (v32 != DWORD1(v53)
               || v30 != *(_DWORD *)&v52[28]
               || *(_DWORD *)(v27 + 44) - 10 * v30 <= HIDWORD(v53) - 10 * *(_DWORD *)&v52[28])
              && (*(unsigned __int8 *)(v27 + 48) & ~v54) == 0)
            {
              break;
            }
          }
          v27 += 64;
          if (v27 == v29) {
            goto LABEL_30;
          }
        }
      }
      LOWORD(v20) = 0;
      __int16 v21 = 0;
LABEL_11:
      __int16 v17 = v21 | v17 | v17 & 0xFF00 | ((_WORD)v20 << 8);
    }
    ++v19;
  }
  while (v19 != v15);
  if ((v17 & 0xFF00) != 0) {
    sub_B273D4((uint64_t)a1, v43);
  }
  return v17 != 0;
}

uint64_t sub_B334AC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_B334C4()
{
  return v0;
}

void sub_B334D8()
{
  sub_9F5E28(v1, v0 - 296);
}

uint64_t sub_B33524()
{
  return v0;
}

uint64_t sub_B33544(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "max_memory_footprint");
  uint64_t v4 = sub_561B0(a2, (uint64_t)__p);
  *(void *)a1 = sub_A2D4C4(v4);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "max_distance");
  uint64_t v5 = sub_561B0(a2, (uint64_t)__p);
  *(void *)(a1 + 8) = sub_A2D5F4(v5);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 13;
  strcpy((char *)__p, "max_num_trips");
  int v6 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 16) = v6;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "enable_target_pruning");
  BOOL v7 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 20) = v7;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "enable_travel_via_missing_stops");
  BOOL v8 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 21) = v8;
  return a1;
}

void sub_B336FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B33728(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)a1 = off_243D3F0;
  sub_B33544(a1 + 8, a3);
  *(_OWORD *)(a1 + 32) = xmmword_20B98A0;
  *(void *)(a1 + 48) = 0x3E4CCCCD3F000000;
  *(void *)(a1 + 60) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 76) = 0;
  *(void *)(a1 + 68) = 0;
  *(_DWORD *)(a1 + 84) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(_WORD *)(a1 + 57) = 1;
  *(_OWORD *)(a1 + 88) = xmmword_20EB770;
  *(_DWORD *)(a1 + 104) = -1;
  uint64_t v5 = malloc_type_malloc(0x180uLL, 0x10000403E1C8BA9uLL);
  *(void *)(a1 + 112) = v5;
  uint64_t v6 = *(void *)(a1 + 88);
  if (v6)
  {
    uint64_t v7 = 12 * v6;
    do
    {
      uint64_t v8 = *(void *)(a1 + 96);
      v5[2] = *(_DWORD *)(a1 + 104);
      *(void *)uint64_t v5 = v8;
      v5 += 3;
      v7 -= 12;
    }
    while (v7);
  }
  *(_OWORD *)(a1 + 152) = xmmword_20B98A0;
  *(void *)(a1 + 168) = 0x3E4CCCCD3F000000;
  *(void *)(a1 + 180) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(unsigned char *)(a1 + 176) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = 0;
  *(_WORD *)(a1 + 177) = 1;
  *(_OWORD *)(a1 + 208) = xmmword_20EB770;
  *(_DWORD *)(a1 + 224) = -1;
  unsigned int v9 = malloc_type_malloc(0x180uLL, 0x10000403E1C8BA9uLL);
  *(void *)(a1 + 232) = v9;
  uint64_t v10 = *(void *)(a1 + 208);
  if (v10)
  {
    uint64_t v11 = 12 * v10;
    do
    {
      uint64_t v12 = *(void *)(a1 + 216);
      v9[2] = *(_DWORD *)(a1 + 224);
      *(void *)unsigned int v9 = v12;
      v9 += 3;
      v11 -= 12;
    }
    while (v11);
  }
  uint64_t v15 = 0;
  unsigned int v16 = 0;
  sub_A395D4(a1 + 272, a2, a1 + 32, a1 + 152, &v15);
  int v13 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  return a1;
}

void sub_B33948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_14A84((uint64_t)va);
  sub_A2DC14(v6);
  sub_A2DC14(v5);
  _Unwind_Resume(a1);
}

void sub_B33990(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 128) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(v1 + 112);
  if (!v5) {
    _Unwind_Resume(exception_object);
  }
  free(v5);
  _Unwind_Resume(exception_object);
}

double sub_B339C4@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  sub_A3B6BC(a1 + 32);
  *(void *)(a1 + 128) = *(void *)(a1 + 120);
  *(_DWORD *)(a1 + 144) = 0;
  sub_A3B6BC(a1 + 152);
  *(void *)(a1 + 248) = *(void *)(a1 + 240);
  *(_DWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a1 + 24);
  *(_WORD *)(a1 + 292) = *(_WORD *)(a1 + 28);
  if (*(unsigned char *)a2)
  {
    sub_A4F7F4(a1 + 272, a2);
    sub_A4FAA4((void *)(a1 + 272), a3);
  }
  else
  {
    sub_A440AC(a1 + 272, a2);
    sub_A44360((void *)(a1 + 272), a3);
  }
  double result = (double)(unint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72));
  double v7 = (double)(unint64_t)(*(void *)(a1 + 200) - *(void *)(a1 + 192));
  *(double *)(a3 + 160) = result;
  *(double *)(a3 + 168) = v7;
  *(void *)(a3 + 176) += *(void *)(a1 + 136)
                         - *(void *)(a1 + 120)
                         + *(void *)(a1 + 256)
                         + 12 * (*(void *)(a1 + 208) + *(void *)(a1 + 88))
                         - *(void *)(a1 + 240)
                         + 888;
  return result;
}

void sub_B33AD0(std::string *a1@<X8>)
{
  sub_A2E0AC(&v3);
  uint64_t v2 = std::string::insert(&v3, 0, "mcspa-");
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
}

void sub_B33B4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B33B68(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "max_memory_footprint");
  uint64_t v4 = sub_561B0(a2, (uint64_t)__p);
  *(void *)a1 = sub_A2D4C4(v4);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "max_distance");
  uint64_t v5 = sub_561B0(a2, (uint64_t)__p);
  *(void *)(a1 + 8) = sub_A2D5F4(v5);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 13;
  strcpy((char *)__p, "max_num_trips");
  int v6 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 16) = v6;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "enable_target_pruning");
  BOOL v7 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 20) = v7;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "enable_travel_via_missing_stops");
  BOOL v8 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 21) = v8;
  return a1;
}

void sub_B33D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B33D4C(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)a1 = off_243D420;
  sub_B33B68(a1 + 8, a3);
  *(_OWORD *)(a1 + 32) = xmmword_20B98A0;
  *(void *)(a1 + 48) = 0x3E4CCCCD3F000000;
  *(void *)(a1 + 60) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 76) = 0;
  *(void *)(a1 + 68) = 0;
  *(_DWORD *)(a1 + 84) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(_WORD *)(a1 + 57) = 1;
  *(_OWORD *)(a1 + 88) = xmmword_20EB770;
  *(_DWORD *)(a1 + 104) = -1;
  uint64_t v5 = malloc_type_malloc(0x180uLL, 0x10000403E1C8BA9uLL);
  *(void *)(a1 + 112) = v5;
  uint64_t v6 = *(void *)(a1 + 88);
  if (v6)
  {
    uint64_t v7 = 12 * v6;
    do
    {
      uint64_t v8 = *(void *)(a1 + 96);
      v5[2] = *(_DWORD *)(a1 + 104);
      *(void *)uint64_t v5 = v8;
      v5 += 3;
      v7 -= 12;
    }
    while (v7);
  }
  *(_OWORD *)(a1 + 152) = xmmword_20B98A0;
  *(void *)(a1 + 168) = 0x3E4CCCCD3F000000;
  *(void *)(a1 + 180) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(unsigned char *)(a1 + 176) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = 0;
  *(_WORD *)(a1 + 177) = 1;
  *(_OWORD *)(a1 + 208) = xmmword_20EB770;
  *(_DWORD *)(a1 + 224) = -1;
  unsigned int v9 = malloc_type_malloc(0x180uLL, 0x10000403E1C8BA9uLL);
  *(void *)(a1 + 232) = v9;
  uint64_t v10 = *(void *)(a1 + 208);
  if (v10)
  {
    uint64_t v11 = 12 * v10;
    do
    {
      uint64_t v12 = *(void *)(a1 + 216);
      v9[2] = *(_DWORD *)(a1 + 224);
      *(void *)unsigned int v9 = v12;
      v9 += 3;
      v11 -= 12;
    }
    while (v11);
  }
  uint64_t v15 = 0;
  unsigned int v16 = 0;
  sub_A570FC(a1 + 272, a2, a1 + 32, a1 + 152, &v15);
  int v13 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  return a1;
}

void sub_B33F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_14A84((uint64_t)va);
  sub_A2DC14(v6);
  sub_A2DC14(v5);
  _Unwind_Resume(a1);
}

void sub_B33FB4(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 128) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(v1 + 112);
  if (!v5) {
    _Unwind_Resume(exception_object);
  }
  free(v5);
  _Unwind_Resume(exception_object);
}

double sub_B33FE8@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  sub_A3B6BC(a1 + 32);
  *(void *)(a1 + 128) = *(void *)(a1 + 120);
  *(_DWORD *)(a1 + 144) = 0;
  sub_A3B6BC(a1 + 152);
  *(void *)(a1 + 248) = *(void *)(a1 + 240);
  *(_DWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a1 + 24);
  *(_WORD *)(a1 + 292) = *(_WORD *)(a1 + 28);
  if (*(unsigned char *)a2)
  {
    sub_A6317C(a1 + 272, a2);
    sub_A6342C((void *)(a1 + 272), a3);
  }
  else
  {
    sub_A59304(a1 + 272, a2);
    sub_A595B8((void *)(a1 + 272), a3);
  }
  double result = (double)(unint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72));
  double v7 = (double)(unint64_t)(*(void *)(a1 + 200) - *(void *)(a1 + 192));
  *(double *)(a3 + 160) = result;
  *(double *)(a3 + 168) = v7;
  *(void *)(a3 + 176) += *(void *)(a1 + 136)
                         - *(void *)(a1 + 120)
                         + *(void *)(a1 + 256)
                         + 12 * (*(void *)(a1 + 208) + *(void *)(a1 + 88))
                         - *(void *)(a1 + 240)
                         + 888;
  return result;
}

void sub_B340F4(std::string *a1@<X8>)
{
  sub_A2F2D4(&v3);
  uint64_t v2 = std::string::insert(&v3, 0, "mcspa-");
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
}

void sub_B34170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B3418C(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "max_memory_footprint");
  uint64_t v4 = sub_561B0(a2, (uint64_t)__p);
  *(void *)a1 = sub_A2D4C4(v4);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "max_distance");
  uint64_t v5 = sub_561B0(a2, (uint64_t)__p);
  *(void *)(a1 + 8) = sub_A2D5F4(v5);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 13;
  strcpy((char *)__p, "max_num_trips");
  int v6 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 16) = v6;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "enable_target_pruning");
  BOOL v7 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 20) = v7;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "enable_travel_via_missing_stops");
  BOOL v8 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 21) = v8;
  return a1;
}

void sub_B34344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B34370(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)a1 = off_243D450;
  sub_B3418C(a1 + 8, a3);
  *(_OWORD *)(a1 + 32) = xmmword_20B98A0;
  *(void *)(a1 + 48) = 0x3E4CCCCD3F000000;
  *(void *)(a1 + 60) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 76) = 0;
  *(void *)(a1 + 68) = 0;
  *(_DWORD *)(a1 + 84) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(_WORD *)(a1 + 57) = 1;
  *(_OWORD *)(a1 + 88) = xmmword_20EB770;
  *(_DWORD *)(a1 + 104) = -1;
  uint64_t v5 = malloc_type_malloc(0x180uLL, 0x10000403E1C8BA9uLL);
  *(void *)(a1 + 112) = v5;
  uint64_t v6 = *(void *)(a1 + 88);
  if (v6)
  {
    uint64_t v7 = 12 * v6;
    do
    {
      uint64_t v8 = *(void *)(a1 + 96);
      v5[2] = *(_DWORD *)(a1 + 104);
      *(void *)uint64_t v5 = v8;
      v5 += 3;
      v7 -= 12;
    }
    while (v7);
  }
  *(_OWORD *)(a1 + 152) = xmmword_20B98A0;
  *(void *)(a1 + 168) = 0x3E4CCCCD3F000000;
  *(void *)(a1 + 180) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(unsigned char *)(a1 + 176) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = 0;
  *(_WORD *)(a1 + 177) = 1;
  *(_OWORD *)(a1 + 208) = xmmword_20EB770;
  *(_DWORD *)(a1 + 224) = -1;
  unsigned int v9 = malloc_type_malloc(0x180uLL, 0x10000403E1C8BA9uLL);
  *(void *)(a1 + 232) = v9;
  uint64_t v10 = *(void *)(a1 + 208);
  if (v10)
  {
    uint64_t v11 = 12 * v10;
    do
    {
      uint64_t v12 = *(void *)(a1 + 216);
      v9[2] = *(_DWORD *)(a1 + 224);
      *(void *)unsigned int v9 = v12;
      v9 += 3;
      v11 -= 12;
    }
    while (v11);
  }
  uint64_t v15 = 0;
  unsigned int v16 = 0;
  sub_A6A478(a1 + 272, a2, a1 + 32, a1 + 152, &v15);
  int v13 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  return a1;
}

void sub_B34590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_14A84((uint64_t)va);
  sub_A2DC14(v6);
  sub_A2DC14(v5);
  _Unwind_Resume(a1);
}

void sub_B345D8(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 128) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(v1 + 112);
  if (!v5) {
    _Unwind_Resume(exception_object);
  }
  free(v5);
  _Unwind_Resume(exception_object);
}

double sub_B3460C@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  sub_A3B6BC(a1 + 32);
  *(void *)(a1 + 128) = *(void *)(a1 + 120);
  *(_DWORD *)(a1 + 144) = 0;
  sub_A3B6BC(a1 + 152);
  *(void *)(a1 + 248) = *(void *)(a1 + 240);
  *(_DWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a1 + 24);
  *(_WORD *)(a1 + 292) = *(_WORD *)(a1 + 28);
  if (*(unsigned char *)a2)
  {
    sub_A774C0(a1 + 272, a2);
    sub_A77770((void *)(a1 + 272), a3);
  }
  else
  {
    sub_A6C680(a1 + 272, a2);
    sub_A6C934((void *)(a1 + 272), a3);
  }
  double result = (double)(unint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72));
  double v7 = (double)(unint64_t)(*(void *)(a1 + 200) - *(void *)(a1 + 192));
  *(double *)(a3 + 160) = result;
  *(double *)(a3 + 168) = v7;
  *(void *)(a3 + 176) += *(void *)(a1 + 136)
                         - *(void *)(a1 + 120)
                         + *(void *)(a1 + 256)
                         + 12 * (*(void *)(a1 + 208) + *(void *)(a1 + 88))
                         - *(void *)(a1 + 240)
                         + 888;
  return result;
}

void sub_B34718(std::string *a1@<X8>)
{
  sub_A30500(&v3);
  uint64_t v2 = std::string::insert(&v3, 0, "mcspa-");
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
}

void sub_B34794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B347B0(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "max_memory_footprint");
  uint64_t v4 = sub_561B0(a2, (uint64_t)__p);
  *(void *)a1 = sub_A2D4C4(v4);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "max_distance");
  uint64_t v5 = sub_561B0(a2, (uint64_t)__p);
  *(void *)(a1 + 8) = sub_A2D5F4(v5);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 13;
  strcpy((char *)__p, "max_num_trips");
  int v6 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 16) = v6;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "enable_target_pruning");
  BOOL v7 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 20) = v7;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "enable_travel_via_missing_stops");
  BOOL v8 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 21) = v8;
  return a1;
}

void sub_B34968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B34994(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)a1 = off_243D480;
  sub_B347B0(a1 + 8, a3);
  *(_OWORD *)(a1 + 32) = xmmword_20B98A0;
  *(void *)(a1 + 48) = 0x3E4CCCCD3F000000;
  *(void *)(a1 + 60) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 76) = 0;
  *(void *)(a1 + 68) = 0;
  *(_DWORD *)(a1 + 84) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(_WORD *)(a1 + 57) = 1;
  *(_OWORD *)(a1 + 88) = xmmword_20EB770;
  *(_DWORD *)(a1 + 104) = -1;
  uint64_t v5 = malloc_type_malloc(0x180uLL, 0x10000403E1C8BA9uLL);
  *(void *)(a1 + 112) = v5;
  uint64_t v6 = *(void *)(a1 + 88);
  if (v6)
  {
    uint64_t v7 = 12 * v6;
    do
    {
      uint64_t v8 = *(void *)(a1 + 96);
      v5[2] = *(_DWORD *)(a1 + 104);
      *(void *)uint64_t v5 = v8;
      v5 += 3;
      v7 -= 12;
    }
    while (v7);
  }
  *(_OWORD *)(a1 + 152) = xmmword_20B98A0;
  *(void *)(a1 + 168) = 0x3E4CCCCD3F000000;
  *(void *)(a1 + 180) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(unsigned char *)(a1 + 176) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = 0;
  *(_WORD *)(a1 + 177) = 1;
  *(_OWORD *)(a1 + 208) = xmmword_20EB770;
  *(_DWORD *)(a1 + 224) = -1;
  unsigned int v9 = malloc_type_malloc(0x180uLL, 0x10000403E1C8BA9uLL);
  *(void *)(a1 + 232) = v9;
  uint64_t v10 = *(void *)(a1 + 208);
  if (v10)
  {
    uint64_t v11 = 12 * v10;
    do
    {
      uint64_t v12 = *(void *)(a1 + 216);
      v9[2] = *(_DWORD *)(a1 + 224);
      *(void *)unsigned int v9 = v12;
      v9 += 3;
      v11 -= 12;
    }
    while (v11);
  }
  uint64_t v15 = 0;
  unsigned int v16 = 0;
  sub_A7EFB4(a1 + 272, a2, a1 + 32, a1 + 152, &v15);
  int v13 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  return a1;
}

void sub_B34BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_14A84((uint64_t)va);
  sub_A2DC14(v6);
  sub_A2DC14(v5);
  _Unwind_Resume(a1);
}

void sub_B34BFC(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 128) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(v1 + 112);
  if (!v5) {
    _Unwind_Resume(exception_object);
  }
  free(v5);
  _Unwind_Resume(exception_object);
}

double sub_B34C30@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  sub_A3B6BC(a1 + 32);
  *(void *)(a1 + 128) = *(void *)(a1 + 120);
  *(_DWORD *)(a1 + 144) = 0;
  sub_A3B6BC(a1 + 152);
  *(void *)(a1 + 248) = *(void *)(a1 + 240);
  *(_DWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a1 + 24);
  *(_WORD *)(a1 + 292) = *(_WORD *)(a1 + 28);
  if (*(unsigned char *)a2)
  {
    sub_A8B5A0(a1 + 272, a2);
    sub_A8B850((void *)(a1 + 272), a3);
  }
  else
  {
    sub_A811BC(a1 + 272, a2);
    sub_A81470((void *)(a1 + 272), a3);
  }
  double result = (double)(unint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72));
  double v7 = (double)(unint64_t)(*(void *)(a1 + 200) - *(void *)(a1 + 192));
  *(double *)(a3 + 160) = result;
  *(double *)(a3 + 168) = v7;
  *(void *)(a3 + 176) += *(void *)(a1 + 136)
                         - *(void *)(a1 + 120)
                         + *(void *)(a1 + 256)
                         + 12 * (*(void *)(a1 + 208) + *(void *)(a1 + 88))
                         - *(void *)(a1 + 240)
                         + 888;
  return result;
}

void sub_B34D3C(std::string *a1@<X8>)
{
  sub_A3173C(&v3);
  uint64_t v2 = std::string::insert(&v3, 0, "mcspa-");
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
}

void sub_B34DB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B34DD4(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "max_memory_footprint");
  uint64_t v4 = sub_561B0(a2, (uint64_t)__p);
  *(void *)a1 = sub_A2D4C4(v4);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "max_distance");
  uint64_t v5 = sub_561B0(a2, (uint64_t)__p);
  *(void *)(a1 + 8) = sub_A2D5F4(v5);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 13;
  strcpy((char *)__p, "max_num_trips");
  int v6 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 16) = v6;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "enable_target_pruning");
  BOOL v7 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 20) = v7;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "enable_travel_via_missing_stops");
  BOOL v8 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 21) = v8;
  return a1;
}

void sub_B34F8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B34FB8(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)a1 = off_243D4B0;
  sub_B34DD4(a1 + 8, a3);
  *(_OWORD *)(a1 + 32) = xmmword_20B98A0;
  *(void *)(a1 + 48) = 0x3E4CCCCD3F000000;
  *(void *)(a1 + 60) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 76) = 0;
  *(void *)(a1 + 68) = 0;
  *(_DWORD *)(a1 + 84) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(_WORD *)(a1 + 57) = 1;
  *(_OWORD *)(a1 + 88) = xmmword_20EB770;
  *(_DWORD *)(a1 + 104) = -1;
  uint64_t v5 = malloc_type_malloc(0x180uLL, 0x10000403E1C8BA9uLL);
  *(void *)(a1 + 112) = v5;
  uint64_t v6 = *(void *)(a1 + 88);
  if (v6)
  {
    uint64_t v7 = 12 * v6;
    do
    {
      uint64_t v8 = *(void *)(a1 + 96);
      v5[2] = *(_DWORD *)(a1 + 104);
      *(void *)uint64_t v5 = v8;
      v5 += 3;
      v7 -= 12;
    }
    while (v7);
  }
  *(_OWORD *)(a1 + 152) = xmmword_20B98A0;
  *(void *)(a1 + 168) = 0x3E4CCCCD3F000000;
  *(void *)(a1 + 180) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(unsigned char *)(a1 + 176) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = 0;
  *(_WORD *)(a1 + 177) = 1;
  *(_OWORD *)(a1 + 208) = xmmword_20EB770;
  *(_DWORD *)(a1 + 224) = -1;
  unsigned int v9 = malloc_type_malloc(0x180uLL, 0x10000403E1C8BA9uLL);
  *(void *)(a1 + 232) = v9;
  uint64_t v10 = *(void *)(a1 + 208);
  if (v10)
  {
    uint64_t v11 = 12 * v10;
    do
    {
      uint64_t v12 = *(void *)(a1 + 216);
      v9[2] = *(_DWORD *)(a1 + 224);
      *(void *)unsigned int v9 = v12;
      v9 += 3;
      v11 -= 12;
    }
    while (v11);
  }
  uint64_t v15 = 0;
  unsigned int v16 = 0;
  sub_A92774(a1 + 272, a2, a1 + 32, a1 + 152, &v15);
  int v13 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  return a1;
}

void sub_B351D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_14A84((uint64_t)va);
  sub_A2DC14(v6);
  sub_A2DC14(v5);
  _Unwind_Resume(a1);
}

void sub_B35220(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 128) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(v1 + 112);
  if (!v5) {
    _Unwind_Resume(exception_object);
  }
  free(v5);
  _Unwind_Resume(exception_object);
}

double sub_B35254@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  sub_A3B6BC(a1 + 32);
  *(void *)(a1 + 128) = *(void *)(a1 + 120);
  *(_DWORD *)(a1 + 144) = 0;
  sub_A3B6BC(a1 + 152);
  *(void *)(a1 + 248) = *(void *)(a1 + 240);
  *(_DWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a1 + 24);
  *(_WORD *)(a1 + 292) = *(_WORD *)(a1 + 28);
  if (*(unsigned char *)a2)
  {
    sub_A9E450(a1 + 272, a2);
    sub_A9E700((void *)(a1 + 272), a3);
  }
  else
  {
    sub_A9497C(a1 + 272, a2);
    sub_A94C30((void *)(a1 + 272), a3);
  }
  double result = (double)(unint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72));
  double v7 = (double)(unint64_t)(*(void *)(a1 + 200) - *(void *)(a1 + 192));
  *(double *)(a3 + 160) = result;
  *(double *)(a3 + 168) = v7;
  *(void *)(a3 + 176) += *(void *)(a1 + 136)
                         - *(void *)(a1 + 120)
                         + *(void *)(a1 + 256)
                         + 12 * (*(void *)(a1 + 208) + *(void *)(a1 + 88))
                         - *(void *)(a1 + 240)
                         + 888;
  return result;
}

void sub_B35360(std::string *a1@<X8>)
{
  sub_A32980(&v3);
  uint64_t v2 = std::string::insert(&v3, 0, "mcspa-");
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
}

void sub_B353DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B353F8(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "max_memory_footprint");
  uint64_t v4 = sub_561B0(a2, (uint64_t)__p);
  *(void *)a1 = sub_A2D4C4(v4);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "max_distance");
  uint64_t v5 = sub_561B0(a2, (uint64_t)__p);
  *(void *)(a1 + 8) = sub_A2D5F4(v5);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 13;
  strcpy((char *)__p, "max_num_trips");
  int v6 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 16) = v6;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "enable_target_pruning");
  BOOL v7 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 20) = v7;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "enable_travel_via_missing_stops");
  BOOL v8 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 21) = v8;
  return a1;
}

void sub_B355B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B355DC(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)a1 = off_243D4E0;
  sub_B353F8(a1 + 8, a3);
  *(_OWORD *)(a1 + 32) = xmmword_20B98A0;
  *(void *)(a1 + 48) = 0x3E4CCCCD3F000000;
  *(void *)(a1 + 60) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 76) = 0;
  *(void *)(a1 + 68) = 0;
  *(_DWORD *)(a1 + 84) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(_WORD *)(a1 + 57) = 1;
  *(_OWORD *)(a1 + 88) = xmmword_20EB770;
  *(_DWORD *)(a1 + 104) = -1;
  uint64_t v5 = malloc_type_malloc(0x180uLL, 0x10000403E1C8BA9uLL);
  *(void *)(a1 + 112) = v5;
  uint64_t v6 = *(void *)(a1 + 88);
  if (v6)
  {
    uint64_t v7 = 12 * v6;
    do
    {
      uint64_t v8 = *(void *)(a1 + 96);
      v5[2] = *(_DWORD *)(a1 + 104);
      *(void *)uint64_t v5 = v8;
      v5 += 3;
      v7 -= 12;
    }
    while (v7);
  }
  *(_OWORD *)(a1 + 152) = xmmword_20B98A0;
  *(void *)(a1 + 168) = 0x3E4CCCCD3F000000;
  *(void *)(a1 + 180) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(unsigned char *)(a1 + 176) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = 0;
  *(_WORD *)(a1 + 177) = 1;
  *(_OWORD *)(a1 + 208) = xmmword_20EB770;
  *(_DWORD *)(a1 + 224) = -1;
  unsigned int v9 = malloc_type_malloc(0x180uLL, 0x10000403E1C8BA9uLL);
  *(void *)(a1 + 232) = v9;
  uint64_t v10 = *(void *)(a1 + 208);
  if (v10)
  {
    uint64_t v11 = 12 * v10;
    do
    {
      uint64_t v12 = *(void *)(a1 + 216);
      v9[2] = *(_DWORD *)(a1 + 224);
      *(void *)unsigned int v9 = v12;
      v9 += 3;
      v11 -= 12;
    }
    while (v11);
  }
  uint64_t v15 = 0;
  unsigned int v16 = 0;
  sub_AA59B0(a1 + 272, a2, a1 + 32, a1 + 152, &v15);
  int v13 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  return a1;
}

void sub_B357FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_14A84((uint64_t)va);
  sub_A2DC14(v6);
  sub_A2DC14(v5);
  _Unwind_Resume(a1);
}

void sub_B35844(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 128) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(v1 + 112);
  if (!v5) {
    _Unwind_Resume(exception_object);
  }
  free(v5);
  _Unwind_Resume(exception_object);
}

double sub_B35878@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  sub_A3B6BC(a1 + 32);
  *(void *)(a1 + 128) = *(void *)(a1 + 120);
  *(_DWORD *)(a1 + 144) = 0;
  sub_A3B6BC(a1 + 152);
  *(void *)(a1 + 248) = *(void *)(a1 + 240);
  *(_DWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a1 + 24);
  *(_WORD *)(a1 + 292) = *(_WORD *)(a1 + 28);
  if (*(unsigned char *)a2)
  {
    sub_AB1B44(a1 + 272, a2);
    sub_AB1DF4((void *)(a1 + 272), a3);
  }
  else
  {
    sub_AA7BB8(a1 + 272, a2);
    sub_AA7E6C((void *)(a1 + 272), a3);
  }
  double result = (double)(unint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72));
  double v7 = (double)(unint64_t)(*(void *)(a1 + 200) - *(void *)(a1 + 192));
  *(double *)(a3 + 160) = result;
  *(double *)(a3 + 168) = v7;
  *(void *)(a3 + 176) += *(void *)(a1 + 136)
                         - *(void *)(a1 + 120)
                         + *(void *)(a1 + 256)
                         + 12 * (*(void *)(a1 + 208) + *(void *)(a1 + 88))
                         - *(void *)(a1 + 240)
                         + 888;
  return result;
}

void sub_B35984(std::string *a1@<X8>)
{
  sub_A33BC8(&v3);
  uint64_t v2 = std::string::insert(&v3, 0, "mcspa-");
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
}

void sub_B35A00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B35A1C(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "max_memory_footprint");
  uint64_t v4 = sub_561B0(a2, (uint64_t)__p);
  *(void *)a1 = sub_A2D4C4(v4);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "max_distance");
  uint64_t v5 = sub_561B0(a2, (uint64_t)__p);
  *(void *)(a1 + 8) = sub_A2D5F4(v5);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 13;
  strcpy((char *)__p, "max_num_trips");
  int v6 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 16) = v6;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "enable_target_pruning");
  BOOL v7 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 20) = v7;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "enable_travel_via_missing_stops");
  BOOL v8 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 21) = v8;
  return a1;
}

void sub_B35BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B35C00(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)a1 = off_243D510;
  sub_B35A1C(a1 + 8, a3);
  *(_OWORD *)(a1 + 32) = xmmword_20B98A0;
  *(void *)(a1 + 48) = 0x3E4CCCCD3F000000;
  *(void *)(a1 + 60) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 76) = 0;
  *(void *)(a1 + 68) = 0;
  *(_DWORD *)(a1 + 84) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(_WORD *)(a1 + 57) = 1;
  *(_OWORD *)(a1 + 88) = xmmword_20EB770;
  *(_DWORD *)(a1 + 104) = -1;
  uint64_t v5 = malloc_type_malloc(0x180uLL, 0x10000403E1C8BA9uLL);
  *(void *)(a1 + 112) = v5;
  uint64_t v6 = *(void *)(a1 + 88);
  if (v6)
  {
    uint64_t v7 = 12 * v6;
    do
    {
      uint64_t v8 = *(void *)(a1 + 96);
      v5[2] = *(_DWORD *)(a1 + 104);
      *(void *)uint64_t v5 = v8;
      v5 += 3;
      v7 -= 12;
    }
    while (v7);
  }
  *(_OWORD *)(a1 + 152) = xmmword_20B98A0;
  *(void *)(a1 + 168) = 0x3E4CCCCD3F000000;
  *(void *)(a1 + 180) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(unsigned char *)(a1 + 176) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = 0;
  *(_WORD *)(a1 + 177) = 1;
  *(_OWORD *)(a1 + 208) = xmmword_20EB770;
  *(_DWORD *)(a1 + 224) = -1;
  unsigned int v9 = malloc_type_malloc(0x180uLL, 0x10000403E1C8BA9uLL);
  *(void *)(a1 + 232) = v9;
  uint64_t v10 = *(void *)(a1 + 208);
  if (v10)
  {
    uint64_t v11 = 12 * v10;
    do
    {
      uint64_t v12 = *(void *)(a1 + 216);
      v9[2] = *(_DWORD *)(a1 + 224);
      *(void *)unsigned int v9 = v12;
      v9 += 3;
      v11 -= 12;
    }
    while (v11);
  }
  uint64_t v15 = 0;
  unsigned int v16 = 0;
  sub_AB8FF0(a1 + 272, a2, a1 + 32, a1 + 152, &v15);
  int v13 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  return a1;
}

void sub_B35E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_14A84((uint64_t)va);
  sub_A2DC14(v6);
  sub_A2DC14(v5);
  _Unwind_Resume(a1);
}

void sub_B35E68(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 128) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(v1 + 112);
  if (!v5) {
    _Unwind_Resume(exception_object);
  }
  free(v5);
  _Unwind_Resume(exception_object);
}

double sub_B35E9C@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  sub_A3B6BC(a1 + 32);
  *(void *)(a1 + 128) = *(void *)(a1 + 120);
  *(_DWORD *)(a1 + 144) = 0;
  sub_A3B6BC(a1 + 152);
  *(void *)(a1 + 248) = *(void *)(a1 + 240);
  *(_DWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a1 + 24);
  *(_WORD *)(a1 + 292) = *(_WORD *)(a1 + 28);
  if (*(unsigned char *)a2)
  {
    sub_AC4F70(a1 + 272, a2);
    sub_AC5220((void *)(a1 + 272), a3);
  }
  else
  {
    sub_ABB1F8(a1 + 272, a2);
    sub_ABB4AC((void *)(a1 + 272), a3);
  }
  double result = (double)(unint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72));
  double v7 = (double)(unint64_t)(*(void *)(a1 + 200) - *(void *)(a1 + 192));
  *(double *)(a3 + 160) = result;
  *(double *)(a3 + 168) = v7;
  *(void *)(a3 + 176) += *(void *)(a1 + 136)
                         - *(void *)(a1 + 120)
                         + *(void *)(a1 + 256)
                         + 12 * (*(void *)(a1 + 208) + *(void *)(a1 + 88))
                         - *(void *)(a1 + 240)
                         + 888;
  return result;
}

void sub_B35FA8(std::string *a1@<X8>)
{
  sub_A34E10(&v3);
  uint64_t v2 = std::string::insert(&v3, 0, "mcspa-");
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
}

void sub_B36024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_B36040(void *a1)
{
  sub_A23D80((uint64_t)(a1 + 34));
  uint64_t v2 = (void *)a1[30];
  if (v2)
  {
    a1[31] = v2;
    operator delete(v2);
  }
  std::string v3 = (void *)a1[29];
  if (v3) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[15];
  if (v4)
  {
    a1[16] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[14];
  if (v5) {
    free(v5);
  }
  return a1;
}

void sub_B360A4(void *a1)
{
  sub_A23D80((uint64_t)(a1 + 34));
  uint64_t v2 = (void *)a1[30];
  if (v2)
  {
    a1[31] = v2;
    operator delete(v2);
  }
  std::string v3 = (void *)a1[29];
  if (v3) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[15];
  if (v4)
  {
    a1[16] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[14];
  if (v5) {
    free(v5);
  }

  operator delete();
}

void *sub_B36128(void *a1)
{
  sub_A23D80((uint64_t)(a1 + 34));
  uint64_t v2 = (void *)a1[30];
  if (v2)
  {
    a1[31] = v2;
    operator delete(v2);
  }
  std::string v3 = (void *)a1[29];
  if (v3) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[15];
  if (v4)
  {
    a1[16] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[14];
  if (v5) {
    free(v5);
  }
  return a1;
}

void sub_B3618C(void *a1)
{
  sub_A23D80((uint64_t)(a1 + 34));
  uint64_t v2 = (void *)a1[30];
  if (v2)
  {
    a1[31] = v2;
    operator delete(v2);
  }
  std::string v3 = (void *)a1[29];
  if (v3) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[15];
  if (v4)
  {
    a1[16] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[14];
  if (v5) {
    free(v5);
  }

  operator delete();
}

void *sub_B36210(void *a1)
{
  sub_A23D80((uint64_t)(a1 + 34));
  uint64_t v2 = (void *)a1[30];
  if (v2)
  {
    a1[31] = v2;
    operator delete(v2);
  }
  std::string v3 = (void *)a1[29];
  if (v3) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[15];
  if (v4)
  {
    a1[16] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[14];
  if (v5) {
    free(v5);
  }
  return a1;
}

void sub_B36274(void *a1)
{
  sub_A23D80((uint64_t)(a1 + 34));
  uint64_t v2 = (void *)a1[30];
  if (v2)
  {
    a1[31] = v2;
    operator delete(v2);
  }
  std::string v3 = (void *)a1[29];
  if (v3) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[15];
  if (v4)
  {
    a1[16] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[14];
  if (v5) {
    free(v5);
  }

  operator delete();
}

void *sub_B362F8(void *a1)
{
  sub_A23D80((uint64_t)(a1 + 34));
  uint64_t v2 = (void *)a1[30];
  if (v2)
  {
    a1[31] = v2;
    operator delete(v2);
  }
  std::string v3 = (void *)a1[29];
  if (v3) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[15];
  if (v4)
  {
    a1[16] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[14];
  if (v5) {
    free(v5);
  }
  return a1;
}

void sub_B3635C(void *a1)
{
  sub_A23D80((uint64_t)(a1 + 34));
  uint64_t v2 = (void *)a1[30];
  if (v2)
  {
    a1[31] = v2;
    operator delete(v2);
  }
  std::string v3 = (void *)a1[29];
  if (v3) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[15];
  if (v4)
  {
    a1[16] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[14];
  if (v5) {
    free(v5);
  }

  operator delete();
}

void *sub_B363E0(void *a1)
{
  sub_A23D80((uint64_t)(a1 + 34));
  uint64_t v2 = (void *)a1[30];
  if (v2)
  {
    a1[31] = v2;
    operator delete(v2);
  }
  std::string v3 = (void *)a1[29];
  if (v3) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[15];
  if (v4)
  {
    a1[16] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[14];
  if (v5) {
    free(v5);
  }
  return a1;
}

void sub_B36444(void *a1)
{
  sub_A23D80((uint64_t)(a1 + 34));
  uint64_t v2 = (void *)a1[30];
  if (v2)
  {
    a1[31] = v2;
    operator delete(v2);
  }
  std::string v3 = (void *)a1[29];
  if (v3) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[15];
  if (v4)
  {
    a1[16] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[14];
  if (v5) {
    free(v5);
  }

  operator delete();
}

void *sub_B364C8(void *a1)
{
  sub_A23D80((uint64_t)(a1 + 34));
  uint64_t v2 = (void *)a1[30];
  if (v2)
  {
    a1[31] = v2;
    operator delete(v2);
  }
  std::string v3 = (void *)a1[29];
  if (v3) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[15];
  if (v4)
  {
    a1[16] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[14];
  if (v5) {
    free(v5);
  }
  return a1;
}

void sub_B3652C(void *a1)
{
  sub_A23D80((uint64_t)(a1 + 34));
  uint64_t v2 = (void *)a1[30];
  if (v2)
  {
    a1[31] = v2;
    operator delete(v2);
  }
  std::string v3 = (void *)a1[29];
  if (v3) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[15];
  if (v4)
  {
    a1[16] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[14];
  if (v5) {
    free(v5);
  }

  operator delete();
}

void *sub_B365B0(void *a1)
{
  sub_A23D80((uint64_t)(a1 + 34));
  uint64_t v2 = (void *)a1[30];
  if (v2)
  {
    a1[31] = v2;
    operator delete(v2);
  }
  std::string v3 = (void *)a1[29];
  if (v3) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[15];
  if (v4)
  {
    a1[16] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[14];
  if (v5) {
    free(v5);
  }
  return a1;
}

void sub_B36614(void *a1)
{
  sub_A23D80((uint64_t)(a1 + 34));
  uint64_t v2 = (void *)a1[30];
  if (v2)
  {
    a1[31] = v2;
    operator delete(v2);
  }
  std::string v3 = (void *)a1[29];
  if (v3) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[15];
  if (v4)
  {
    a1[16] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[14];
  if (v5) {
    free(v5);
  }

  operator delete();
}

uint64_t sub_B36698(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 8) = a2;
  *(void *)(result + 16) = a3;
  return result;
}

void sub_B366A0(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v11 = *a1;
  uint64_t v3 = v11;
  int v12 = *((_DWORD *)a1 + 2);
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 32) = 0;
  if (v3 != -1 || HIDWORD(v3) != -1)
  {
    sub_B367A4();
    long long v9 = 0uLL;
    uint64_t v10 = 0;
    uint64_t v5 = __p;
    for (unsigned int i = (void **)&v9; v5 != v8; ++v5)
      sub_2A98DC(&i, v5);
    uint64_t v6 = v10;
    *(_OWORD *)(a2 + 8) = v9;
    *(void *)(a2 + 24) = v6;
    uint64_t v10 = 0;
    long long v9 = 0uLL;
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_B36768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v15 = a10;
    if (!a10) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v15 = a10;
    if (!a10) {
      goto LABEL_3;
    }
  }
  operator delete(v15);
  _Unwind_Resume(exception_object);
}

void sub_B367A4()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = sub_375A24(*(void **)(v0 + 8));
  uint64_t v6 = *(std::__shared_weak_count **)(v5 + 8);
  uint64_t v23 = *(void *)v5;
  long long v24 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memcpy(v25, (const void *)(v5 + 16), sizeof(v25));
  double v7 = *(std::__shared_weak_count **)(v5 + 3880);
  uint64_t v26 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memcpy(v27, (const void *)(v5 + 3888), sizeof(v27));
  uint64_t v8 = *(std::__shared_weak_count **)(v5 + 7752);
  uint64_t v28 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v29 = *(unsigned char *)(v5 + 7760);
  unint64_t v20 = 0;
  __int16 v21 = 0;
  uint64_t v22 = 0;
  sub_B36DCC((uint64_t)&v23, v2, (uint64_t)&v30, (uint64_t)&v20);
  long long v9 = v20;
  uint64_t v10 = v21;
  v4[1] = 0;
  v4[2] = 0;
  *uint64_t v4 = 0;
  uint64_t v11 = (char *)v10 - (char *)v9;
  if (v10 != v9)
  {
    if (v11 < 0) {
      sub_2E00();
    }
    int v12 = (char *)operator new((char *)v10 - (char *)v9);
    *uint64_t v4 = (unint64_t)v12;
    v4[1] = (unint64_t)v12;
    v4[2] = (unint64_t)&v12[8 * (v11 >> 3)];
    do
    {
      int v13 = sub_B390E0((uint64_t)&v23, *v9);
      int v14 = &v13[-*(int *)v13];
      if (*(unsigned __int16 *)v14 >= 5u && (unsigned __int16 v15 = *((_WORD *)v14 + 2)) != 0) {
        unint64_t v16 = *(unsigned int *)&v13[v15 + 4] | ((unint64_t)*(unsigned int *)&v13[v15] << 32);
      }
      else {
        unint64_t v16 = 0xFFFFFFFFLL;
      }
      uint64_t v30 = __ROR8__(v16, 32);
      int v12 = sub_B39364(v4, v12, &v30) + 8;
      ++v9;
    }
    while (v9 != v10);
    long long v9 = v20;
  }
  if (v9)
  {
    __int16 v21 = v9;
    operator delete(v9);
  }
  __int16 v17 = v28;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  unsigned int v18 = v26;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  unsigned int v19 = v24;
  if (v24)
  {
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_B36A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (!__p)
  {
    sub_B36CB4(&a13);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  sub_B36CB4(&a13);
  _Unwind_Resume(a1);
}

void sub_B36AA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + 8);
  for (unsigned int i = *(void **)(a2 + 16); v2 != i; v2 += 37)
    sub_B36AF0(a1, v2);
}

double sub_B36AF0(uint64_t a1, void *a2)
{
  if (0x8E38E38E38E38E39 * ((uint64_t)(a2[26] - a2[25]) >> 3) < 3) {
    return result;
  }
  uint64_t v4 = (void *)sub_A2AD08(a2 + 25, 1uLL);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = sub_A2AF48(v4, 0);
  if (*(_DWORD *)(v6 + 160))
  {
    unint64_t v8 = *(void *)(v6 + 12);
    if (HIDWORD(v8) == 1 && (v8 + 3) < 2)
    {
LABEL_21:
      unint64_t v13 = -1;
      goto LABEL_22;
    }
  }
  else
  {
    int v14 = (void *)(v5 + 4136);
    unsigned int v15 = *(_DWORD *)(v6 + 52);
    unint64_t v16 = (int *)sub_A11094(v14, *(void *)(v6 + 32));
    __int16 v17 = (unsigned __int16 *)((char *)v16 - *v16);
    if (*v17 >= 9u && (uint64_t v18 = v17[4]) != 0) {
      unsigned int v19 = (unsigned int *)((char *)v16 + v18 + *(unsigned int *)((char *)v16 + v18));
    }
    else {
      unsigned int v19 = 0;
    }
    unint64_t v8 = __ROR8__(*(void *)sub_A10764(v19, v15), 32);
    if (HIDWORD(v8) == 1 && (v8 + 3) < 2) {
      goto LABEL_21;
    }
  }
  uint64_t v10 = (int *)sub_498D5C(*(void *)(*(void *)(a1 + 16) + 4120) + 24, __ROR8__(v8, 32), 0, "stop");
  uint64_t v11 = (uint64_t)v10 + *(unsigned __int16 *)((char *)v10 - *v10 + 6);
  uint64_t v12 = *(unsigned int *)v11;
  LODWORD(v11) = *(_DWORD *)(v11 + 4);
  if (v11 >= 0xFFFFFFFE) {
    uint64_t v11 = 4294967294;
  }
  else {
    uint64_t v11 = v11;
  }
  unint64_t v13 = v12 | (v11 << 32);
  if (v13 == -1)
  {
LABEL_22:
    if (v13 > 0xFFFFFFFEFFFFFFFFLL) {
      return result;
    }
  }
  sub_B367A4();
  __int16 v21 = (void *)a2[34];
  if (v21)
  {
    a2[35] = v21;
    operator delete(v21);
  }
  double result = *(double *)&v22;
  *((_OWORD *)a2 + 17) = v22;
  a2[36] = v23;
  return result;
}

void *sub_B36CB4(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[969];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[485];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[485];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (!v4 || atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_B36DCC(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a4 + 8) = *(void *)a4;
  sub_518C8(*a2 >> 17, a2[1] >> 17);
  unsigned int v7 = v6 | 0x40000000;
  while (2)
  {
    unsigned int v8 = v7;
    long long v9 = sub_B37630(a1, v7, 1);
    if (!v9) {
      goto LABEL_2;
    }
    uint64_t v10 = &v9[-*(int *)v9];
    if (*(unsigned __int16 *)v10 < 9u || !*((_WORD *)v10 + 4)) {
      goto LABEL_2;
    }
    unsigned int v55 = v8;
    sub_B372B0(a1, v8, (uint64_t)&__p);
    uint64_t v11 = __p;
    uint64_t v12 = v60;
    if (__p != v60)
    {
      unint64_t v13 = *(void **)(a4 + 8);
      while (1)
      {
        unint64_t v15 = *(void *)(a4 + 16);
        if ((unint64_t)v13 < v15)
        {
          *unint64_t v13 = *v11;
          uint64_t v14 = (uint64_t)(v13 + 1);
          goto LABEL_9;
        }
        unint64_t v16 = *(char **)a4;
        uint64_t v17 = (uint64_t)v13 - *(void *)a4;
        uint64_t v18 = v17 >> 3;
        unint64_t v19 = (v17 >> 3) + 1;
        if (v19 >> 61) {
          sub_2E00();
        }
        uint64_t v20 = v15 - (void)v16;
        if (v20 >> 2 > v19) {
          unint64_t v19 = v20 >> 2;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v19;
        }
        if (v21)
        {
          if (v21 >> 61) {
            sub_188D718();
          }
          long long v22 = operator new(8 * v21);
          uint64_t v23 = &v22[8 * v18];
          *uint64_t v23 = *v11;
          uint64_t v14 = (uint64_t)(v23 + 1);
          if (v13 == (void *)v16)
          {
LABEL_20:
            *(void *)a4 = v23;
            *(void *)(a4 + 8) = v14;
            *(void *)(a4 + 16) = &v22[8 * v21];
            if (!v13) {
              goto LABEL_9;
            }
LABEL_27:
            operator delete(v13);
            goto LABEL_9;
          }
        }
        else
        {
          long long v22 = 0;
          uint64_t v23 = (void *)(8 * v18);
          *(void *)(8 * v18) = *v11;
          uint64_t v14 = 8 * v18 + 8;
          if (v13 == (void *)v16) {
            goto LABEL_20;
          }
        }
        unint64_t v24 = (char *)(v13 - 1) - v16;
        if (v24 < 0x168)
        {
          long long v25 = (char *)v13;
          goto LABEL_25;
        }
        if (&v22[v17 - 8 - (v24 & 0xFFFFFFFFFFFFFFF8)] > &v22[v17 - 8]) {
          break;
        }
        if ((void *)((char *)v13 - (v24 & 0xFFFFFFFFFFFFFFF8) - 8) > v13 - 1)
        {
          long long v25 = (char *)v13;
          goto LABEL_25;
        }
        if ((unint64_t)((char *)v13 - v22 - v17) < 0x20)
        {
          long long v25 = (char *)v13;
          goto LABEL_25;
        }
        uint64_t v27 = (v24 >> 3) + 1;
        uint64_t v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
        long long v25 = (char *)&v13[v28 / 0xFFFFFFFFFFFFFFF8];
        uint64_t v23 = (void *)((char *)v23 - v28);
        char v29 = &v22[8 * v18 - 16];
        uint64_t v30 = (long long *)(v13 - 2);
        uint64_t v31 = v27 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v32 = *v30;
          *(v29 - 1) = *(v30 - 1);
          _OWORD *v29 = v32;
          v29 -= 2;
          v30 -= 2;
          v31 -= 4;
        }
        while (v31);
        if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_25;
        }
LABEL_26:
        unint64_t v13 = *(void **)a4;
        *(void *)a4 = v23;
        *(void *)(a4 + 8) = v14;
        *(void *)(a4 + 16) = &v22[8 * v21];
        if (v13) {
          goto LABEL_27;
        }
LABEL_9:
        *(void *)(a4 + 8) = v14;
        ++v11;
        unint64_t v13 = (void *)v14;
        if (v11 == v12) {
          goto LABEL_38;
        }
      }
      long long v25 = (char *)v13;
      do
      {
LABEL_25:
        uint64_t v26 = *((void *)v25 - 1);
        v25 -= 8;
        *--uint64_t v23 = v26;
      }
      while (v25 != v16);
      goto LABEL_26;
    }
LABEL_38:
    unsigned int v8 = v55;
    sub_B373E0(a1, v55, (uint64_t)&v57);
    uint64_t v33 = v57;
    uint64_t v34 = v58;
    if (v57 == v58)
    {
      if (v57) {
        goto LABEL_40;
      }
      goto LABEL_41;
    }
    do
    {
      unint64_t v61 = *v33;
      if (sub_B37D5C(a1, &v61, a2))
      {
        int v37 = *(unint64_t **)(a4 + 8);
        unint64_t v36 = *(void *)(a4 + 16);
        if ((unint64_t)v37 < v36)
        {
          unint64_t *v37 = *v33;
          uint64_t v35 = (uint64_t)(v37 + 1);
LABEL_44:
          *(void *)(a4 + 8) = v35;
          goto LABEL_45;
        }
        uint64_t v38 = *(unint64_t **)a4;
        uint64_t v39 = (uint64_t)v37 - *(void *)a4;
        uint64_t v40 = v39 >> 3;
        unint64_t v41 = (v39 >> 3) + 1;
        if (v41 >> 61) {
          sub_2E00();
        }
        uint64_t v42 = v36 - (void)v38;
        if (v42 >> 2 > v41) {
          unint64_t v41 = v42 >> 2;
        }
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v43 = v41;
        }
        if (v43)
        {
          if (v43 >> 61) {
            sub_188D718();
          }
          unsigned int v44 = operator new(8 * v43);
          long long v45 = (unint64_t *)&v44[8 * v40];
          unint64_t *v45 = *v33;
          uint64_t v35 = (uint64_t)(v45 + 1);
          if (v37 == v38)
          {
LABEL_57:
            *(void *)a4 = v45;
            *(void *)(a4 + 8) = v35;
            *(void *)(a4 + 16) = &v44[8 * v43];
            if (!v37) {
              goto LABEL_44;
            }
            goto LABEL_67;
          }
        }
        else
        {
          unsigned int v44 = 0;
          long long v45 = (unint64_t *)(8 * v40);
          *(void *)(8 * v40) = *v33;
          uint64_t v35 = 8 * v40 + 8;
          if (v37 == v38) {
            goto LABEL_57;
          }
        }
        unint64_t v46 = (char *)(v37 - 1) - (char *)v38;
        if (v46 < 0x58) {
          goto LABEL_77;
        }
        if ((unint64_t)((char *)v37 - &v44[v39]) < 0x20) {
          goto LABEL_77;
        }
        uint64_t v47 = (v46 >> 3) + 1;
        uint64_t v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v49 = &v37[v48 / 0xFFFFFFFFFFFFFFF8];
        long long v45 = (unint64_t *)((char *)v45 - v48);
        uint64_t v50 = &v44[8 * v40 - 16];
        uint64_t v51 = v37 - 2;
        uint64_t v52 = v47 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v53 = *(_OWORD *)v51;
          *(v50 - 1) = *((_OWORD *)v51 - 1);
          *uint64_t v50 = v53;
          v50 -= 2;
          v51 -= 4;
          v52 -= 4;
        }
        while (v52);
        int v37 = v49;
        if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_77:
          do
          {
            unint64_t v54 = *--v37;
            *--long long v45 = v54;
          }
          while (v37 != v38);
        }
        int v37 = *(unint64_t **)a4;
        *(void *)a4 = v45;
        *(void *)(a4 + 8) = v35;
        *(void *)(a4 + 16) = &v44[8 * v43];
        if (!v37) {
          goto LABEL_44;
        }
LABEL_67:
        operator delete(v37);
        goto LABEL_44;
      }
LABEL_45:
      ++v33;
    }
    while (v33 != v34);
    uint64_t v33 = v57;
    unsigned int v8 = v55;
    if (!v57) {
      goto LABEL_41;
    }
LABEL_40:
    __int16 v58 = v33;
    operator delete(v33);
LABEL_41:
    if (__p)
    {
      __int16 v60 = __p;
      operator delete(__p);
    }
LABEL_2:
    unsigned int v7 = v8 >> 2;
    if (v8 >= 4) {
      continue;
    }
    break;
  }
  sub_B37510((int8x16_t **)a4);
}

void sub_B37240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_B372B0@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  double result = sub_B37630(a1, a2, 1);
  if (result
    && (uint64_t v5 = &result[-*(int *)result], *(unsigned __int16 *)v5 >= 9u)
    && (uint64_t v6 = *((unsigned __int16 *)v5 + 4)) != 0)
  {
    unsigned int v7 = &result[v6 + *(unsigned int *)&result[v6]];
    unsigned int v8 = &v7[-*(int *)v7];
    if (*(unsigned __int16 *)v8 >= 7u
      && (uint64_t v9 = *((unsigned __int16 *)v8 + 3)) != 0
      && (uint64_t v10 = &v7[v9 + *(unsigned int *)&v7[v9]], v11 = *(unsigned int *)v10, v11))
    {
      uint64_t v12 = v11;
      unint64_t v13 = operator new(8 * v11);
      *(void *)&long long v17 = v13;
      *((void *)&v17 + 1) = v13;
      uint64_t v18 = &v13[v12];
      uint64_t v14 = (uint64_t *)(v10 + 4);
      do
      {
        uint64_t v19 = *v14;
        double result = sub_B379EC((unint64_t *)&v17, v13, &v19);
        unint64_t v13 = result + 8;
        ++v14;
        --v12;
      }
      while (v12 * 8);
      long long v15 = v17;
      unint64_t v16 = v18;
    }
    else
    {
      unint64_t v16 = 0;
      long long v15 = 0uLL;
    }
    *(_OWORD *)a3 = v15;
    *(void *)(a3 + 16) = v16;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_B373C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_B373E0@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  double result = sub_B37630(a1, a2, 1);
  if (result
    && (uint64_t v5 = &result[-*(int *)result], *(unsigned __int16 *)v5 >= 9u)
    && (uint64_t v6 = *((unsigned __int16 *)v5 + 4)) != 0)
  {
    unsigned int v7 = &result[v6 + *(unsigned int *)&result[v6]];
    unsigned int v8 = &v7[-*(int *)v7];
    if (*(unsigned __int16 *)v8 >= 9u
      && (uint64_t v9 = *((unsigned __int16 *)v8 + 4)) != 0
      && (uint64_t v10 = &v7[v9 + *(unsigned int *)&v7[v9]], v11 = *(unsigned int *)v10, v11))
    {
      uint64_t v12 = v11;
      unint64_t v13 = operator new(8 * v11);
      *(void *)&long long v17 = v13;
      *((void *)&v17 + 1) = v13;
      uint64_t v18 = &v13[v12];
      uint64_t v14 = (uint64_t *)(v10 + 4);
      do
      {
        uint64_t v19 = *v14;
        double result = sub_B379EC((unint64_t *)&v17, v13, &v19);
        unint64_t v13 = result + 8;
        ++v14;
        --v12;
      }
      while (v12 * 8);
      long long v15 = v17;
      unint64_t v16 = v18;
    }
    else
    {
      unint64_t v16 = 0;
      long long v15 = 0uLL;
    }
    *(_OWORD *)a3 = v15;
    *(void *)(a3 + 16) = v16;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_B374F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_B37510(int8x16_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v4 = 126 - 2 * __clz(((char *)v3 - (char *)v2) >> 3);
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  sub_B384C8(v2, v3, (uint64_t)&v14, v5, 1);
  uint64_t v6 = a1[1];
  if (*a1 != v6)
  {
    unsigned int v7 = &(*a1)[-1].i32[2];
    do
    {
      if (v7 + 4 == (__int32 *)v6) {
        return;
      }
      __int32 v8 = v7[2];
      v7 += 2;
      LODWORD(v9) = v7[2];
    }
    while (v8 != v9 || v7[1] != v7[3]);
    uint64_t v11 = (int8x16_t *)(v7 + 4);
    if (v7 + 4 == (__int32 *)v6)
    {
      uint64_t v12 = (int8x16_t *)(v7 + 2);
      if (v7 + 2 == (__int32 *)v6) {
        return;
      }
      goto LABEL_22;
    }
    do
    {
      if (v9 != v11->i32[0] || v7[1] != v11->i32[1])
      {
        uint64_t v9 = v11->i64[0];
        *((void *)v7 + 1) = v11->i64[0];
        v7 += 2;
      }
      uint64_t v11 = (int8x16_t *)((char *)v11 + 8);
    }
    while (v11 != v6);
    uint64_t v12 = (int8x16_t *)(v7 + 2);
    if (v7 + 2 != (__int32 *)a1[1]) {
LABEL_22:
    }
      a1[1] = v12;
  }
}

char *sub_B37630(uint64_t a1, unsigned int a2, int a3)
{
  int v25 = a3;
  unsigned int v26 = a2;
  v24[0] = &v25;
  v24[1] = (int *)&v26;
  unint64_t v4 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v4;
  uint64_t v5 = *(void *)a1;
  if (v5)
  {
    uint64_t v6 = a1 + 16;
    if (*(_DWORD *)(a1 + 2608) == a2)
    {
      unsigned int v7 = 108;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 2632) == a2)
    {
      unsigned int v7 = 109;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 2656) == a2)
    {
      unsigned int v7 = 110;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 2680) == a2)
    {
      unsigned int v7 = 111;
LABEL_10:
      ++*(void *)(a1 + 3864);
      uint64_t v8 = v6 + 24 * v7;
      *(void *)(v8 + 8) = v4;
      uint64_t v9 = *(unsigned int **)(v8 + 16);
      if (v9) {
        return (char *)v9 + *v9;
      }
      goto LABEL_32;
    }
    unint64_t v11 = *(void *)(a1 + 2664);
    unint64_t v12 = *(void *)(a1 + 2640);
    unint64_t v13 = *(void *)(a1 + 2616);
    BOOL v14 = v13 >= v4;
    if (v13 < v4) {
      unint64_t v4 = *(void *)(a1 + 2616);
    }
    int v15 = 108;
    if (v14) {
      int v15 = 0;
    }
    BOOL v16 = v12 >= v4;
    if (v12 < v4) {
      unint64_t v4 = *(void *)(a1 + 2640);
    }
    int v17 = 109;
    if (v16) {
      int v17 = v15;
    }
    if (v11 >= v4) {
      unint64_t v18 = v4;
    }
    else {
      unint64_t v18 = *(void *)(a1 + 2664);
    }
    unint64_t v19 = *(void *)(a1 + 2688);
    if (v11 >= v4) {
      int v20 = v17;
    }
    else {
      int v20 = 110;
    }
    unint64_t v21 = (unsigned int *)sub_2AB884(v5, 27, a2, 1);
    unsigned int v22 = 111;
    if (v19 >= v18) {
      unsigned int v22 = v20;
    }
    uint64_t v23 = v6 + 24 * v22;
    *(_DWORD *)uint64_t v23 = v26;
    *(void *)(v23 + 8) = *(void *)(a1 + 3856);
    *(void *)(v23 + 16) = v21;
    if (v21) {
      return (char *)v21 + *v21;
    }
  }
LABEL_32:
  sub_B377C0(v24);
  return 0;
}

uint64_t sub_B377C0(int **a1)
{
  int v1 = **a1;
  if (v1 != 1)
  {
    if (!v1)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      std::to_string(&v15, *a1[1]);
      uint64_t v5 = std::string::insert(&v15, 0, "Failed to acquire Flatbuffer data in quad node ");
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v16.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      unsigned int v7 = std::string::append(&v16, " on layer ");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v17.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      uint64_t v9 = sub_736EC(0x1Bu);
      uint64_t v10 = std::string::append(&v17, v9);
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      std::string::size_type v19 = v10->__r_.__value_.__r.__words[2];
      long long v18 = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      unint64_t v12 = (void *)sub_2F404((uint64_t)exception, &v18);
    }
    unint64_t v13 = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v18, "Unknown data access error policy");
    BOOL v14 = (void *)sub_2F404((uint64_t)v13, &v18);
  }
  return 0;
}

void sub_B37918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  if (a28 < 0)
  {
    operator delete(a23);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_6;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
LABEL_9:
  }
    _Unwind_Resume(a1);
LABEL_6:
  operator delete(__p);
  goto LABEL_9;
}

char *sub_B379EC(unint64_t *a1, void *a2, void *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = v7 >> 3;
  uint64_t v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)uint64_t v9 = *a3;
      a1[1] = (unint64_t)(v9 + 8);
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    unint64_t v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      std::string::size_type v19 = (void *)a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      std::string v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 8;
      if (v5 > v16) {
        unint64_t v16 = a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x58)
      {
        std::string::size_type v19 = (void *)a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        std::string::size_type v19 = (void *)a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          unint64_t v13 = (uint64_t *)((char *)v13 + v21);
          std::string::size_type v19 = (void *)(v5 + v21);
          unsigned int v22 = (_OWORD *)(v5 + 16);
          uint64_t v23 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            _OWORD *v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        uint64_t v56 = *v13++;
        *v19++ = v56;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = (unint64_t)v19;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    *(void *)uint64_t v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v26 >> 61) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 2 > v26) {
    unint64_t v26 = v28 >> 2;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 61) {
      sub_188D718();
    }
    uint64_t v30 = (char *)operator new(8 * v29);
    uint64_t v31 = &v30[8 * v8];
    long long v32 = &v30[8 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v30 = 0;
    uint64_t v31 = (char *)(8 * v8);
    long long v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((void *)v6 == a2) {
      unint64_t v53 = 1;
    }
    else {
      unint64_t v53 = v7 >> 2;
    }
    if (v53 >> 61) {
      sub_188D718();
    }
    unint64_t v54 = (char *)operator new(8 * v53);
    uint64_t v31 = &v54[8 * (v53 >> 2)];
    long long v32 = &v54[8 * v53];
    if (v30)
    {
      unsigned int v55 = &v54[8 * v53];
      operator delete(v30);
      long long v32 = v55;
      uint64_t v34 = (char *)*a1;
      *(void *)uint64_t v31 = *a3;
      uint64_t v35 = v31 + 8;
      unint64_t v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
LABEL_28:
  uint64_t v34 = (char *)v6;
  *(void *)uint64_t v31 = *a3;
  uint64_t v35 = v31 + 8;
  unint64_t v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    int v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v38 = v37 - v34 - 8;
    uint64_t v39 = v9;
    unint64_t v36 = v31;
    if (v38 < 0x58) {
      goto LABEL_59;
    }
    uint64_t v39 = v9;
    unint64_t v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 3) + 1;
    uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v39 = &v9[-v41];
    unint64_t v36 = &v31[-v41];
    uint64_t v42 = v31 - 16;
    unint64_t v43 = (long long *)(v6 + 8 * v8 - 16);
    uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)uint64_t v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        uint64_t v46 = *((void *)v39 - 1);
        v39 -= 8;
        *((void *)v36 - 1) = v46;
        v36 -= 8;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  uint64_t v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    uint64_t v49 = v9;
    size_t v50 = v47 - v9;
    uint64_t v51 = v32;
    memmove(v35, v49, v50);
    long long v32 = v51;
  }
  uint64_t v52 = (void *)*a1;
  *a1 = (unint64_t)v36;
  a1[1] = (unint64_t)&v35[v48];
  a1[2] = (unint64_t)v32;
  if (v52) {
    operator delete(v52);
  }
  return v31;
}

void sub_B37D44(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B37D5C(uint64_t a1, unint64_t *a2, _DWORD *a3)
{
  sub_B37F40(a1, *a2, (uint64_t)v35);
  if (!sub_34554(v35, a3)) {
    return 0;
  }
  sub_B38164(a1, *a2, &__p);
  uint64_t v9 = (void **)__p;
  unint64_t v10 = v34;
  if (__p == v34)
  {
    uint64_t v22 = 0;
    uint64_t v23 = __p;
    if (!__p) {
      return v22;
    }
  }
  else
  {
    unsigned int v11 = a3[1];
    LODWORD(v6) = *a3;
    double v12 = (double)v6;
    unint64_t v13 = (void **)__p;
    while (1)
    {
      unint64_t v14 = *v13;
      std::string v15 = v13[1];
      if (*v13 != v15)
      {
        int v16 = 0;
        do
        {
          unint64_t v17 = (_DWORD *)v14[1];
          unint64_t v18 = (_DWORD *)(*v14 + 12);
          if ((_DWORD *)*v14 != v17 && v18 != v17)
          {
            do
            {
              unsigned int v20 = *(v18 - 2);
              unsigned int v21 = v18[1];
              if (v20 >= v11)
              {
                if (v21 < v11)
                {
LABEL_20:
                  LODWORD(v7) = *v18;
                  LODWORD(v8) = *(v18 - 3);
                  double v8 = (double)*(unint64_t *)&v8;
                  double v7 = ((double)v11 - (double)v20)
                     / ((double)v21 - (double)v20)
                     * ((double)*(unint64_t *)&v7 - v8)
                     + v8;
                  if (v7 < v12) {
                    v16 ^= 1u;
                  }
                }
              }
              else if (v21 >= v11)
              {
                goto LABEL_20;
              }
              v18 += 3;
            }
            while (v18 != v17);
          }
          v14 += 3;
        }
        while (v14 != v15);
        if (v16) {
          break;
        }
      }
      v13 += 3;
      if (v13 == v34)
      {
        uint64_t v22 = 0;
        if (!__p) {
          return v22;
        }
        goto LABEL_28;
      }
    }
    uint64_t v22 = 1;
    if (!__p) {
      return v22;
    }
LABEL_28:
    uint64_t v24 = v34;
    do
    {
      uint64_t v27 = (char *)*(v24 - 3);
      v24 -= 3;
      unint64_t v26 = v27;
      if (v27)
      {
        uint64_t v28 = (char *)*(v10 - 2);
        long long v25 = v26;
        if (v28 != v26)
        {
          unint64_t v29 = (char *)*(v10 - 2);
          do
          {
            uint64_t v31 = (void *)*((void *)v29 - 3);
            v29 -= 24;
            uint64_t v30 = v31;
            if (v31)
            {
              *((void *)v28 - 2) = v30;
              operator delete(v30);
            }
            uint64_t v28 = v29;
          }
          while (v29 != v26);
          long long v25 = *v24;
        }
        *(v10 - 2) = v26;
        operator delete(v25);
      }
      unint64_t v10 = v24;
    }
    while (v24 != v9);
    uint64_t v23 = __p;
  }
  uint64_t v34 = v9;
  operator delete(v23);
  return v22;
}

uint64_t sub_B37F40@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v26 = a2;
  unint64_t v5 = sub_B37630(a1, a2, 1);
  if (!v5
    || (unint64_t v6 = &v5[-*(int *)v5], *(unsigned __int16 *)v6 < 9u)
    || (uint64_t v7 = *((unsigned __int16 *)v6 + 4)) == 0
    || (double v8 = &v5[v7 + *(unsigned int *)&v5[v7]], v9 = &v8[-*(int *)v8], *(unsigned __int16 *)v9 < 5u)
    || !*((_WORD *)v9 + 2)
    || (unint64_t v10 = &v8[*((unsigned __int16 *)v9 + 2) + *(unsigned int *)&v8[*((unsigned __int16 *)v9 + 2)]],
        *(_DWORD *)v10 <= HIDWORD(a2)))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_B3835C((unsigned int *)&v26, &v22);
    unint64_t v17 = std::string::insert(&v22, 0, "Referenced polygon ");
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v19 = std::string::append(&v23, " does not exist.");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    std::string::size_type v25 = v19->__r_.__value_.__r.__words[2];
    long long v24 = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    unsigned int v21 = (void *)sub_2F404((uint64_t)exception, &v24);
  }
  unsigned int v11 = &v10[4 * HIDWORD(a2) + 4 + *(unsigned int *)&v10[4 * HIDWORD(a2) + 4]];
  uint64_t v12 = (uint64_t)&v11[*(unsigned __int16 *)&v11[-*(int *)v11 + 6]];
  LODWORD(v13) = *(_DWORD *)(v12 + 4);
  if (v13 >= 0xFFFFFFFE) {
    uint64_t v13 = 4294967294;
  }
  else {
    uint64_t v13 = v13;
  }
  *(void *)&long long v24 = *(unsigned int *)v12 | (unint64_t)(v13 << 32);
  DWORD2(v24) = 0x7FFFFFFF;
  uint64_t v14 = *(unsigned int *)(v12 + 8);
  LODWORD(v12) = *(_DWORD *)(v12 + 12);
  if (v12 >= 0xFFFFFFFE) {
    uint64_t v12 = 4294967294;
  }
  else {
    uint64_t v12 = v12;
  }
  v23.__r_.__value_.__r.__words[0] = v14 | (v12 << 32);
  LODWORD(v23.__r_.__value_.__r.__words[1]) = 0x7FFFFFFF;
  return sub_3392C(a3, (unsigned int *)&v24, (unsigned int *)&v23);
}

void sub_B380E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void sub_B38164(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v24 = a2;
  unint64_t v5 = sub_B37630(a1, a2, 1);
  if (!v5
    || (unint64_t v6 = &v5[-*(int *)v5], *(unsigned __int16 *)v6 < 9u)
    || (uint64_t v7 = *((unsigned __int16 *)v6 + 4)) == 0
    || (double v8 = &v5[v7 + *(unsigned int *)&v5[v7]], v9 = &v8[-*(int *)v8], *(unsigned __int16 *)v9 < 5u)
    || !*((_WORD *)v9 + 2)
    || (unint64_t v10 = &v8[*((unsigned __int16 *)v9 + 2) + *(unsigned int *)&v8[*((unsigned __int16 *)v9 + 2)]],
        *(_DWORD *)v10 <= HIDWORD(a2)))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_B3835C((unsigned int *)&v24, &v20);
    std::string v15 = std::string::insert(&v20, 0, "Referenced polygon ");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    unint64_t v17 = std::string::append(&v21, " does not exist.");
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    std::string::size_type v23 = v17->__r_.__value_.__r.__words[2];
    long long v22 = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v19 = (void *)sub_2F404((uint64_t)exception, &v22);
  }
  unsigned int v11 = &v10[4 * HIDWORD(a2) + 4 + *(unsigned int *)&v10[4 * HIDWORD(a2) + 4]];
  uint64_t v12 = &v11[*(unsigned __int16 *)&v11[-*(int *)v11 + 4]];
  uint64_t v13 = (int *)&v12[*(unsigned int *)v12];

  sub_2A9A54(v13, a3);
}

void sub_B382DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void sub_B3835C(unsigned int *a1@<X0>, std::string *a2@<X8>)
{
  std::to_string(&v10, *a1);
  unint64_t v4 = std::string::append(&v10, ".");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v11.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a1[1]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  double v8 = std::string::append(&v11, (const std::string::value_type *)p_p, size);
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_13:
      operator delete(v10.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_13;
  }
}

void sub_B38454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a26 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a20 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a26 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

int8x16_t sub_B384C8(int8x16_t *a1, int8x16_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    uint64_t v12 = a1;
    while (1)
    {
      while (1)
      {
        a1 = v12;
        uint64_t v13 = (char *)a2 - (char *)v12;
        unint64_t v14 = ((char *)a2 - (char *)v12) >> 3;
        if (v6 || !v5)
        {
          switch(v14)
          {
            case 0uLL:
            case 1uLL:
              return result;
            case 2uLL:
              if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) >= (v12->u32[1] | ((unint64_t)v12->u32[0] << 32))) {
                return result;
              }
              uint64_t v89 = v12->i64[0];
              goto LABEL_106;
            case 3uLL:
              unint64_t v87 = v12->u32[3] | ((unint64_t)v12->u32[2] << 32);
              unint64_t v88 = a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32);
              if (v87 >= (v12->u32[1] | ((unint64_t)v12->u32[0] << 32)))
              {
                if (v88 < v87)
                {
                  uint64_t v104 = v12->i64[1];
                  v12->i64[1] = a2[-1].i64[1];
                  a2[-1].i64[1] = v104;
                  if ((v12->u32[3] | ((unint64_t)v12->u32[2] << 32)) < (v12->u32[1] | ((unint64_t)v12->u32[0] << 32)))
                  {
                    int8x16_t result = vextq_s8(*v12, *v12, 8uLL);
                    *uint64_t v12 = result;
                  }
                }
              }
              else
              {
                uint64_t v89 = v12->i64[0];
                if (v88 < v87)
                {
LABEL_106:
                  v12->i64[0] = a2[-1].i64[1];
                }
                else
                {
                  v12->i64[0] = v12->i64[1];
                  v12->i64[1] = v89;
                  if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) >= __ROR8__(v89, 32)) {
                    return result;
                  }
                  v12->i64[1] = a2[-1].i64[1];
                }
                a2[-1].i64[1] = v89;
              }
              break;
            case 4uLL:
              sub_2A9374((unsigned int *)v12, &v12->u32[2], (unsigned int *)&v12[1], &a2[-1].u32[2]);
              return result;
            case 5uLL:
              sub_2A94B0((unsigned int *)v12, &v12->u32[2], (unsigned int *)&v12[1], &v12[1].u32[2], &a2[-1].u32[2]);
              return result;
            default:
              JUMPOUT(0);
          }
          return result;
        }
        if (v13 <= 191)
        {
          uint64_t v90 = (int8x16_t *)&v12->u64[1];
          BOOL v92 = v12 == a2 || v90 == a2;
          if (a5)
          {
            if (!v92)
            {
              uint64_t v93 = 0;
              unsigned __int16 v94 = v12;
              do
              {
                uint64_t v96 = v94->u32[2];
                uint64_t v97 = v94->u32[3];
                uint64_t v98 = v94->u32[0];
                uint64_t v99 = v94->u32[1];
                unsigned __int16 v94 = v90;
                if ((v97 | (unint64_t)(v96 << 32)) < (v99 | (unint64_t)(v98 << 32)))
                {
                  uint64_t v100 = v90->i64[0];
                  unint64_t v101 = __ROR8__(v94->i64[0], 32);
                  uint64_t v102 = v93;
                  do
                  {
                    unsigned __int16 v103 = &v12->i8[v102];
                    *(uint64_t *)((char *)&v12->i64[1] + v102) = *(uint64_t *)((char *)v12->i64 + v102);
                    if (!v102)
                    {
                      int v95 = (uint64_t *)v12;
                      goto LABEL_124;
                    }
                    v102 -= 8;
                  }
                  while (v101 < (*((unsigned int *)v103 - 1) | ((unint64_t)*((unsigned int *)v103 - 2) << 32)));
                  int v95 = (uint64_t *)((char *)&v12->i64[1] + v102);
LABEL_124:
                  *int v95 = v100;
                }
                uint64_t v90 = (int8x16_t *)&v94->u64[1];
                v93 += 8;
              }
              while (&v94->u64[1] != (unint64_t *)a2);
            }
          }
          else if (!v92)
          {
            do
            {
              uint64_t v105 = a1->u32[2];
              uint64_t v106 = a1->u32[3];
              uint64_t v107 = a1->u32[0];
              uint64_t v108 = a1->u32[1];
              a1 = v90;
              if ((v106 | (unint64_t)(v105 << 32)) < (v108 | (unint64_t)(v107 << 32)))
              {
                uint64_t v109 = v90->i64[0];
                unint64_t v110 = __ROR8__(v90->i64[0], 32);
                do
                {
                  uint64_t v111 = (uint64_t *)v90;
                  uint64_t v112 = v90[-1].i64[1];
                  uint64_t v90 = (int8x16_t *)((char *)v90 - 8);
                  *uint64_t v111 = v112;
                }
                while (v110 < (*((unsigned int *)v111 - 3) | ((unint64_t)*((unsigned int *)v111 - 4) << 32)));
                v90->i64[0] = v109;
              }
              uint64_t v90 = (int8x16_t *)&a1->u64[1];
            }
            while (&a1->u64[1] != (unint64_t *)a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v12 != a2)
          {
            sub_2A9598((unsigned int *)v12, (unsigned int *)a2, (unsigned int *)a2, a3);
          }
          return result;
        }
        unint64_t v15 = v14 >> 1;
        long long v16 = (unsigned int *)v12 + 2 * (v14 >> 1);
        unint64_t v17 = a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32);
        if ((unint64_t)v13 >= 0x401) {
          break;
        }
        unint64_t v21 = v12->u32[1] | ((unint64_t)v12->u32[0] << 32);
        long long v22 = &v12->u32[2 * v15 + 1];
        if (v21 < (*v22 | ((unint64_t)*v16 << 32)))
        {
          uint64_t v23 = *(void *)v16;
          if (v17 >= v21)
          {
            *(void *)long long v16 = v12->i64[0];
            v12->i64[0] = v23;
            if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) >= __ROR8__(v23, 32)) {
              goto LABEL_32;
            }
            v12->i64[0] = a2[-1].i64[1];
          }
          else
          {
            *(void *)long long v16 = a2[-1].i64[1];
          }
          a2[-1].i64[1] = v23;
LABEL_32:
          --a4;
          if ((a5 & 1) == 0) {
            goto LABEL_56;
          }
          goto LABEL_33;
        }
        if (v17 >= v21) {
          goto LABEL_32;
        }
        uint64_t v26 = v12->i64[0];
        v12->i64[0] = a2[-1].i64[1];
        a2[-1].i64[1] = v26;
        if ((v12->u32[1] | ((unint64_t)v12->u32[0] << 32)) >= (*v22 | ((unint64_t)*v16 << 32))) {
          goto LABEL_32;
        }
        uint64_t v27 = *(void *)v16;
        *(void *)long long v16 = v12->i64[0];
        v12->i64[0] = v27;
        --a4;
        if (a5) {
          goto LABEL_33;
        }
LABEL_56:
        uint64_t v37 = v12->i64[0];
        if ((v12[-1].u32[3] | ((unint64_t)v12[-1].u32[2] << 32)) < (v12->u32[1] | ((unint64_t)v12->u32[0] << 32))) {
          goto LABEL_57;
        }
        unint64_t v73 = __ROR8__(v37, 32);
        if (v73 < (a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)))
        {
          do
          {
            uint64_t v74 = v12->u32[2];
            uint64_t v75 = v12->u32[3];
            uint64_t v12 = (int8x16_t *)((char *)v12 + 8);
          }
          while (v73 >= (v75 | (unint64_t)(v74 << 32)));
        }
        else
        {
          uint64_t v76 = (int8x16_t *)&v12->u64[1];
          do
          {
            uint64_t v12 = v76;
            if (v76 >= a2) {
              break;
            }
            unint64_t v77 = v76->u32[1] | ((unint64_t)v76->u32[0] << 32);
            uint64_t v76 = (int8x16_t *)((char *)v76 + 8);
          }
          while (v73 >= v77);
        }
        uint64_t v78 = a2;
        if (v12 < a2)
        {
          uint64_t v78 = a2;
          do
          {
            uint64_t v79 = v78[-1].u32[2];
            uint64_t v80 = v78[-1].u32[3];
            uint64_t v78 = (int8x16_t *)((char *)v78 - 8);
          }
          while (v73 < (v80 | (unint64_t)(v79 << 32)));
        }
        while (v12 < v78)
        {
          uint64_t v81 = v12->i64[0];
          v12->i64[0] = v78->i64[0];
          v78->i64[0] = v81;
          do
          {
            uint64_t v82 = v12->u32[2];
            uint64_t v83 = v12->u32[3];
            uint64_t v12 = (int8x16_t *)((char *)v12 + 8);
          }
          while (v73 >= (v83 | (unint64_t)(v82 << 32)));
          do
          {
            uint64_t v84 = v78[-1].u32[2];
            uint64_t v85 = v78[-1].u32[3];
            uint64_t v78 = (int8x16_t *)((char *)v78 - 8);
          }
          while (v73 < (v85 | (unint64_t)(v84 << 32)));
        }
        uint64_t v86 = &v12[-1].i64[1];
        BOOL v5 = &v12[-1].u64[1] >= (unint64_t *)a1;
        BOOL v6 = &v12[-1].u64[1] == (unint64_t *)a1;
        if (&v12[-1].u64[1] != (unint64_t *)a1) {
          a1->i64[0] = *v86;
        }
        a5 = 0;
        *uint64_t v86 = v37;
      }
      long long v18 = &v12->u32[2 * v15 + 1];
      unint64_t v19 = *v18 | ((unint64_t)*v16 << 32);
      if (v19 >= (v12->u32[1] | ((unint64_t)v12->u32[0] << 32)))
      {
        if (v17 < v19)
        {
          uint64_t v24 = *(void *)v16;
          *(void *)long long v16 = a2[-1].i64[1];
          a2[-1].i64[1] = v24;
          if ((*v18 | ((unint64_t)*v16 << 32)) < (v12->u32[1] | ((unint64_t)v12->u32[0] << 32)))
          {
            uint64_t v25 = v12->i64[0];
            v12->i64[0] = *(void *)v16;
            *(void *)long long v16 = v25;
          }
        }
      }
      else
      {
        uint64_t v20 = v12->i64[0];
        if (v17 >= v19)
        {
          v12->i64[0] = *(void *)v16;
          *(void *)long long v16 = v20;
          if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) >= __ROR8__(v20, 32)) {
            goto LABEL_23;
          }
          *(void *)long long v16 = a2[-1].i64[1];
        }
        else
        {
          v12->i64[0] = a2[-1].i64[1];
        }
        a2[-1].i64[1] = v20;
      }
LABEL_23:
      uint64_t v28 = &v12->i8[8 * v15];
      unsigned int v30 = *((_DWORD *)v28 - 2);
      unint64_t v29 = v28 - 8;
      uint64_t v31 = (unsigned int *)(v29 + 4);
      unint64_t v32 = *((unsigned int *)v29 + 1) | ((unint64_t)v30 << 32);
      unint64_t v33 = a2[-1].u32[1] | ((unint64_t)a2[-1].u32[0] << 32);
      if (v32 >= (v12->u32[3] | ((unint64_t)v12->u32[2] << 32)))
      {
        if (v33 < v32)
        {
          uint64_t v35 = *(void *)v29;
          *(void *)unint64_t v29 = a2[-1].i64[0];
          a2[-1].i64[0] = v35;
          if ((*v31 | ((unint64_t)*(unsigned int *)v29 << 32)) < (v12->u32[3] | ((unint64_t)v12->u32[2] << 32)))
          {
            uint64_t v36 = v12->i64[1];
            v12->i64[1] = *(void *)v29;
            *(void *)unint64_t v29 = v36;
          }
        }
      }
      else
      {
        uint64_t v34 = v12->i64[1];
        if (v33 >= v32)
        {
          v12->i64[1] = *(void *)v29;
          *(void *)unint64_t v29 = v34;
          if ((a2[-1].u32[1] | ((unint64_t)a2[-1].u32[0] << 32)) >= __ROR8__(v34, 32)) {
            goto LABEL_37;
          }
          *(void *)unint64_t v29 = a2[-1].i64[0];
        }
        else
        {
          v12->i64[1] = a2[-1].i64[0];
        }
        a2[-1].i64[0] = v34;
      }
LABEL_37:
      unint64_t v38 = &v12->i8[8 * v15];
      unsigned int v40 = *((_DWORD *)v38 + 2);
      uint64_t v39 = (unsigned int *)(v38 + 8);
      uint64_t v41 = v39 + 1;
      unint64_t v42 = v39[1] | ((unint64_t)v40 << 32);
      unint64_t v43 = a2[-2].u32[3] | ((unint64_t)a2[-2].u32[2] << 32);
      if (v42 >= (v12[1].u32[1] | ((unint64_t)v12[1].u32[0] << 32)))
      {
        if (v43 < v42)
        {
          uint64_t v45 = *(void *)v39;
          *(void *)uint64_t v39 = a2[-2].i64[1];
          a2[-2].i64[1] = v45;
          if ((*v41 | ((unint64_t)*v39 << 32)) < (v12[1].u32[1] | ((unint64_t)v12[1].u32[0] << 32)))
          {
            uint64_t v46 = v12[1].i64[0];
            v12[1].i64[0] = *(void *)v39;
            *(void *)uint64_t v39 = v46;
          }
        }
      }
      else
      {
        uint64_t v44 = v12[1].i64[0];
        if (v43 >= v42)
        {
          v12[1].i64[0] = *(void *)v39;
          *(void *)uint64_t v39 = v44;
          if ((a2[-2].u32[3] | ((unint64_t)a2[-2].u32[2] << 32)) >= __ROR8__(v44, 32)) {
            goto LABEL_46;
          }
          *(void *)uint64_t v39 = a2[-2].i64[1];
        }
        else
        {
          v12[1].i64[0] = a2[-2].i64[1];
        }
        a2[-2].i64[1] = v44;
      }
LABEL_46:
      unint64_t v47 = *v18 | ((unint64_t)*v16 << 32);
      unint64_t v48 = *v31 | ((unint64_t)*(unsigned int *)v29 << 32);
      unint64_t v49 = *v41 | ((unint64_t)*v39 << 32);
      if (v47 >= v48)
      {
        uint64_t v50 = *(void *)v16;
        if (v49 < v47)
        {
          uint64_t v51 = *(void *)v39;
          *(void *)long long v16 = *(void *)v39;
          *(void *)uint64_t v39 = v50;
          uint64_t v50 = v51;
          if ((*v18 | (unint64_t)(v51 << 32)) < v48)
          {
            uint64_t v52 = *(void *)v29;
            *(void *)unint64_t v29 = v51;
            *(void *)long long v16 = v52;
LABEL_54:
            uint64_t v50 = v52;
          }
        }
      }
      else
      {
        uint64_t v50 = *(void *)v29;
        if (v49 < v47)
        {
          *(void *)unint64_t v29 = *(void *)v39;
          *(void *)uint64_t v39 = v50;
          uint64_t v50 = *(void *)v16;
          goto LABEL_55;
        }
        *(void *)unint64_t v29 = *(void *)v16;
        *(void *)long long v16 = v50;
        if (v49 < __ROR8__(v50, 32))
        {
          uint64_t v52 = *(void *)v39;
          *(void *)long long v16 = *(void *)v39;
          *(void *)uint64_t v39 = v50;
          goto LABEL_54;
        }
      }
LABEL_55:
      uint64_t v53 = v12->i64[0];
      v12->i64[0] = v50;
      *(void *)long long v16 = v53;
      --a4;
      if ((a5 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_33:
      uint64_t v37 = v12->i64[0];
LABEL_57:
      uint64_t v54 = 0;
      unint64_t v55 = __ROR8__(v37, 32);
      do
      {
        unint64_t v56 = v12->u32[v54 + 3] | ((unint64_t)v12->u32[v54 + 2] << 32);
        v54 += 2;
      }
      while (v56 < v55);
      int v57 = &v12->i8[v54 * 4];
      __int16 v58 = a2;
      if (v54 == 2)
      {
        __int16 v58 = a2;
        do
        {
          if (v57 >= (char *)v58) {
            break;
          }
          uint64_t v61 = v58[-1].u32[2];
          uint64_t v62 = v58[-1].u32[3];
          __int16 v58 = (int8x16_t *)((char *)v58 - 8);
        }
        while ((v62 | (unint64_t)(v61 << 32)) >= v55);
      }
      else
      {
        do
        {
          uint64_t v59 = v58[-1].u32[2];
          uint64_t v60 = v58[-1].u32[3];
          __int16 v58 = (int8x16_t *)((char *)v58 - 8);
        }
        while ((v60 | (unint64_t)(v59 << 32)) >= v55);
      }
      if (v57 >= (char *)v58)
      {
        unint64_t v70 = v57 - 8;
        if (v57 - 8 == (char *)v12) {
          goto LABEL_75;
        }
LABEL_74:
        v12->i64[0] = *(void *)v70;
        goto LABEL_75;
      }
      unint64_t v63 = (unint64_t)v57;
      uint64_t v64 = (uint64_t *)v58;
      do
      {
        uint64_t v65 = *(void *)v63;
        *(void *)unint64_t v63 = *v64;
        *uint64_t v64 = v65;
        do
        {
          uint64_t v66 = *(unsigned int *)(v63 + 8);
          uint64_t v67 = *(unsigned int *)(v63 + 12);
          v63 += 8;
        }
        while ((v67 | (unint64_t)(v66 << 32)) < v55);
        do
        {
          uint64_t v68 = *((unsigned int *)v64 - 2);
          uint64_t v69 = *((unsigned int *)v64-- - 1);
        }
        while ((v69 | (unint64_t)(v68 << 32)) >= v55);
      }
      while (v63 < (unint64_t)v64);
      unint64_t v70 = (char *)(v63 - 8);
      if ((int8x16_t *)(v63 - 8) != v12) {
        goto LABEL_74;
      }
LABEL_75:
      *(void *)unint64_t v70 = v37;
      if (v57 < (char *)v58) {
        goto LABEL_78;
      }
      BOOL v71 = sub_B38DF0(v12, (int8x16_t *)v70);
      uint64_t v12 = (int8x16_t *)(v70 + 8);
      if (sub_B38DF0((int8x16_t *)(v70 + 8), a2)) {
        break;
      }
      if (!v71)
      {
LABEL_78:
        sub_B384C8(a1, v70, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v12 = (int8x16_t *)(v70 + 8);
      }
    }
    a2 = (int8x16_t *)v70;
    if (!v71) {
      continue;
    }
    return result;
  }
}