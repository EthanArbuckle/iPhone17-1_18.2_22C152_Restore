void sub_8D99C8(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int **v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int **v13;
  char v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int **v21;
  unsigned __int16 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  _DWORD *v28;
  void *v29;

  v8 = (uint64_t)(a1 + 2);
  v9 = (int **)sub_46C8EC(a2, a3);
  if (!sub_663238(v8, v9))
  {
LABEL_27:
    *(void *)a4 = 0;
    return;
  }
  v10 = a3 + 1;
  do
  {
    v11 = v10;
    v12 = sub_46C760(a2);
    if (v11 >= v12)
    {
      v18 = 0;
      goto LABEL_20;
    }
    v13 = (int **)sub_46C8EC(a2, v11);
    v14 = sub_663238(v8, v13);
    v10 = v11 + 1;
  }
  while ((v14 & 1) != 0);
  v15 = (unsigned __int16 *)((char *)*v13 - **v13);
  if (*v15 >= 0x1Du && (v16 = v15[14]) != 0) {
    v17 = *(void *)((char *)*v13 + v16);
  }
  else {
    v17 = 0;
  }
  if (*((unsigned char *)v13 + 38)) {
    v19 = -v17;
  }
  else {
    v19 = v17;
  }
  sub_29A494(*a1, v19, &v28);
  if (v28 != (_DWORD *)v29)
  {
    if (*((void *)v28 + 2)) {
      v18 = 0;
    }
    else {
      v18 = v28[3];
    }
    goto LABEL_19;
  }
  v18 = 0;
  if (v28)
  {
LABEL_19:
    v29 = v28;
    operator delete(v28);
  }
LABEL_20:
  v20 = a3 - 1;
  do
  {
    if (v20 == -1)
    {
      if (v11 >= v12) {
        goto LABEL_27;
      }
      goto LABEL_36;
    }
    v21 = (int **)sub_46C8EC(a2, v20--);
  }
  while ((sub_663238(v8, v21) & 1) != 0);
  v22 = (unsigned __int16 *)((char *)*v21 - **v21);
  if (*v22 >= 0x1Du && (v23 = v22[14]) != 0) {
    v24 = *(void *)((char *)*v21 + v23);
  }
  else {
    v24 = 0;
  }
  if (*((unsigned char *)v21 + 38)) {
    v25 = -v24;
  }
  else {
    v25 = v24;
  }
  sub_29A494(*a1, v25, &v28);
  if (v28 == (_DWORD *)v29 || *(v29 - 1))
  {
    v18 = 0;
    if (!v28) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  v26 = *((_DWORD *)v29 - 5);
  if (v18 <= v26) {
    v27 = *((_DWORD *)v29 - 5);
  }
  else {
    v27 = v18;
  }
  if (v26) {
    v18 = v27;
  }
  else {
    v18 = 0;
  }
  if (v28)
  {
LABEL_35:
    v29 = v28;
    operator delete(v28);
  }
LABEL_36:
  *(_DWORD *)a4 = v18;
  *(unsigned char *)(a4 + 4) = 1;
}

char *sub_8D9BCC(char **a1)
{
  v3 = a1[1];
  unint64_t v2 = (unint64_t)a1[2];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 5;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 59) {
      sub_2E00();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 4 > v7) {
      unint64_t v7 = v8 >> 4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 >> 59) {
        sub_188D718();
      }
      v10 = (char *)operator new(32 * v9);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[32 * v6];
    *(void *)v11 = 0x7FFFFFFFFFFFFFFFLL;
    *((_DWORD *)v11 + 2) = -1;
    *(void *)(v11 + 20) = 0;
    *(void *)(v11 + 12) = 0;
    *((_DWORD *)v11 + 7) = 0;
    v4 = v11 + 32;
    if (v3 != v5)
    {
      do
      {
        long long v12 = *((_OWORD *)v3 - 1);
        *((_OWORD *)v11 - 2) = *((_OWORD *)v3 - 2);
        *((_OWORD *)v11 - 1) = v12;
        v11 -= 32;
        v3 -= 32;
      }
      while (v3 != v5);
      v3 = *a1;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = &v10[32 * v9];
    if (v3) {
      operator delete(v3);
    }
  }
  else
  {
    *(void *)v3 = 0x7FFFFFFFFFFFFFFFLL;
    *((_DWORD *)v3 + 2) = -1;
    *(void *)(v3 + 20) = 0;
    *(void *)(v3 + 12) = 0;
    v4 = v3 + 32;
    *((_DWORD *)v3 + 7) = 0;
  }
  a1[1] = v4;
  return v4 - 32;
}

char *sub_8D9CF4(char **a1, void *a2, uint64_t *a3, _DWORD *a4)
{
  unint64_t v9 = a1[1];
  unint64_t v8 = (unint64_t)a1[2];
  if ((unint64_t)v9 >= v8)
  {
    v11 = *a1;
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v9 - *a1) >> 3);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)v11) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x555555555555555) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 > 0xAAAAAAAAAAAAAAALL) {
        sub_188D718();
      }
      v16 = (char *)operator new(24 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[24 * v12];
    uint64_t v18 = *a3;
    *(void *)v17 = *a2;
    *((void *)v17 + 1) = v18;
    *((_DWORD *)v17 + 4) = *a4;
    v10 = v17 + 24;
    if (v9 != v11)
    {
      do
      {
        long long v19 = *(_OWORD *)(v9 - 24);
        *((void *)v17 - 1) = *((void *)v9 - 1);
        *(_OWORD *)(v17 - 24) = v19;
        v17 -= 24;
        v9 -= 24;
      }
      while (v9 != v11);
      unint64_t v9 = *a1;
    }
    *a1 = v17;
    a1[1] = v10;
    a1[2] = &v16[24 * v15];
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *(void *)unint64_t v9 = *a2;
    *((void *)v9 + 1) = *a3;
    *((_DWORD *)v9 + 4) = *a4;
    v10 = v9 + 24;
  }
  a1[1] = v10;
  return v10 - 24;
}

BOOL *sub_8D9E54(BOOL *a1, void *a2)
{
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9800;
  strcpy((char *)__p[0], "treat_unknown_traffic_as_green");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *a1 = v4;
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "show_traffic_colors");
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[1] = v5;
  return a1;
}

void sub_8D9F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_8D9F50(uint64_t a1, void *a2)
{
  *(void *)a1 = sub_374D14(a2);
  *(void *)(a1 + 8) = sub_3750CC(a2);
  __p[0] = 0;
  __p[1] = 0;
  v17 = 0;
  sub_663938(a1 + 16, a2, 1, 0, (uint64_t)__p);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(v15[2]) = 21;
  strcpy((char *)v15, "TrafficColorUtilities");
  unint64_t v12 = 0;
  unint64_t v13 = 0;
  uint64_t v14 = 0;
  BOOL v4 = sub_374CDC((uint64_t)a2, (uint64_t)v15, (uint64_t *)&v12);
  sub_3CB370(v4, 2, 0, __p);
  sub_8DA140((BOOL *)(a1 + 2912), __p);
  BOOL v5 = v17;
  if (v17)
  {
    do
    {
      v10 = *(char **)v5;
      sub_57AC8((uint64_t *)v5 + 5);
      if (v5[39] < 0) {
        operator delete(*((void **)v5 + 2));
      }
      operator delete(v5);
      BOOL v5 = v10;
    }
    while (v10);
  }
  uint64_t v6 = __p[0];
  __p[0] = 0;
  if (v6) {
    operator delete(v6);
  }
  unint64_t v7 = (void **)v12;
  if (v12)
  {
    unint64_t v8 = v13;
    unint64_t v9 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      unint64_t v9 = v12;
    }
    unint64_t v13 = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v15[2]) < 0) {
    operator delete(v15[0]);
  }
  return a1;
}

void sub_8DA0E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_5450C((uint64_t)&a19);
  sub_1A668(&a10);
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_68D148(v24);
  _Unwind_Resume(a1);
}

BOOL *sub_8DA140(BOOL *a1, void *a2)
{
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9800;
  strcpy((char *)__p[0], "treat_unknown_traffic_as_green");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *a1 = v4;
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "show_traffic_colors");
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[1] = v5;
  return a1;
}

void sub_8DA21C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_8DA23C(uint64_t a1, void *a2)
{
  *(void *)a1 = sub_374D14(a2);
  *(void *)(a1 + 8) = sub_3750CC(a2);
  __p[0] = 0;
  __p[1] = 0;
  v17 = 0;
  sub_660948(a1 + 16, a2, 1, 0, (uint64_t)__p);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(v15[2]) = 21;
  strcpy((char *)v15, "TrafficColorUtilities");
  unint64_t v12 = 0;
  unint64_t v13 = 0;
  uint64_t v14 = 0;
  BOOL v4 = sub_374CDC((uint64_t)a2, (uint64_t)v15, (uint64_t *)&v12);
  sub_3CB370(v4, 3, 0, __p);
  sub_8DA42C((BOOL *)(a1 + 2912), __p);
  BOOL v5 = v17;
  if (v17)
  {
    do
    {
      v10 = *(char **)v5;
      sub_57AC8((uint64_t *)v5 + 5);
      if (v5[39] < 0) {
        operator delete(*((void **)v5 + 2));
      }
      operator delete(v5);
      BOOL v5 = v10;
    }
    while (v10);
  }
  uint64_t v6 = __p[0];
  __p[0] = 0;
  if (v6) {
    operator delete(v6);
  }
  unint64_t v7 = (void **)v12;
  if (v12)
  {
    unint64_t v8 = v13;
    unint64_t v9 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      unint64_t v9 = v12;
    }
    unint64_t v13 = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v15[2]) < 0) {
    operator delete(v15[0]);
  }
  return a1;
}

void sub_8DA3D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_5450C((uint64_t)&a19);
  sub_1A668(&a10);
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_68D148(v24);
  _Unwind_Resume(a1);
}

BOOL *sub_8DA42C(BOOL *a1, void *a2)
{
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9800;
  strcpy((char *)__p[0], "treat_unknown_traffic_as_green");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *a1 = v4;
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "show_traffic_colors");
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[1] = v5;
  return a1;
}

void sub_8DA508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_8DA528(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  uint64_t v19 = 0;
  BOOL v4 = (char **)(a4 + 916);
  if (a3)
  {
    unint64_t result = sub_470ADC(a4);
    if (result)
    {
      unint64_t v7 = result;
      for (uint64_t i = 0; i != v7; ++i)
      {
        unint64_t v17 = i;
        BOOL v18 = *(void *)sub_470B40(a4, i) >> 62 == 0;
        sub_8D9CF4(v4, &v19, (uint64_t *)&v17, &v18);
        unint64_t result = sub_470F2C(a4, v17, v9);
        v19 += result;
      }
    }
    uint64_t v10 = a4[916];
    uint64_t v11 = a4[917];
    if (v10 != v11)
    {
      uint64_t v12 = v10 - 24;
      while (v12 + 48 != v11)
      {
        int v13 = *(_DWORD *)(v12 + 40);
        int v14 = *(_DWORD *)(v12 + 64);
        v12 += 24;
        if (v13 == v14)
        {
          uint64_t v15 = v12 + 48;
          if (v12 + 48 != v11)
          {
            do
            {
              if (*(_DWORD *)(v12 + 16) != *(_DWORD *)(v15 + 16))
              {
                *(void *)(v12 + 24) = *(void *)v15;
                v12 += 24;
                *(void *)(v12 + 8) = *(void *)(v15 + 8);
                *(_DWORD *)(v12 + 16) = *(_DWORD *)(v15 + 16);
              }
              v15 += 24;
            }
            while (v15 != v11);
            uint64_t v11 = a4[917];
          }
          uint64_t v16 = v12 + 24;
          if (v16 != v11) {
            a4[917] = v16;
          }
          return result;
        }
      }
    }
  }
  else
  {
    LODWORD(v17) = 0;
    BOOL v18 = 0;
    return (unint64_t)sub_8D9868(v4, &v19, (int *)&v17, &v18);
  }
  return result;
}

void sub_8DA6E4(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t *)nullsub_1(a4);
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  if (*v6 != v8 && *a2 == 2)
  {
LABEL_6:
    sub_8D9208(a1, v7);
    while (1)
    {
      v7 += 12328;
      if (v7 == v8) {
        break;
      }
      if (*a2 == 2) {
        goto LABEL_6;
      }
    }
  }
}

void *sub_8DA76C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  unint64_t result = (void *)nullsub_1(a4);
  uint64_t v7 = (void *)*result;
  uint64_t v8 = (void *)result[1];
  if ((void *)*result != v8)
  {
    do
    {
      unint64_t result = (void *)sub_8DA528((uint64_t)result, v6, a3, v7);
      v7 += 1541;
    }
    while (v7 != v8);
  }
  return result;
}

double sub_8DA7C4()
{
  byte_25D04BF = 1;
  word_25D04A8 = 65;
  byte_25D04D7 = 1;
  word_25D04C0 = 65;
  byte_25D04EF = 8;
  strcpy((char *)&qword_25D04D8, "any_mode");
  byte_25D0507 = 7;
  strcpy((char *)&dword_25D04F0, "cycling");
  byte_25D051F = 7;
  strcpy((char *)&dword_25D0508, "driving");
  byte_25D0537 = 7;
  strcpy((char *)&dword_25D0520, "walking");
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25D0568 = 0u;
  *(_OWORD *)&qword_25D0578 = 0u;
  dword_25D0588 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25D0568, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25D0568, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25D0568, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25D0568, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  qword_25D0540 = 0;
  qword_25D0548 = 0;
  qword_25D0538 = 0;
  v0 = operator new(9uLL);
  *(void *)v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25D0538 = (uint64_t)v0;
  qword_25D0540 = (uint64_t)(v0 + 9);
  qword_25D0548 = (uint64_t)(v0 + 9);
  qword_25D0550 = 0;
  qword_25D0558 = 0;
  unk_25D0560 = 0;
  v1 = (char *)operator new(9uLL);
  qword_25D0558 = (uint64_t)(v1 + 9);
  unk_25D0560 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25D0550 = (uint64_t)v1;
  return result;
}

void sub_8DAA80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25D0578) {
    sub_20AB574((void **)qword_25D0578);
  }
  v37 = (void *)xmmword_25D0568;
  *(void *)&xmmword_25D0568 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_8DAB20(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return -1;
  }
  int v4 = -1431655765 * ((unint64_t)(v2 - *a1) >> 2);
  unint64_t v5 = (v4 - 1);
  if ((int)v5 >= -1) {
    int v6 = -1;
  }
  else {
    int v6 = v4 - 1;
  }
  if ((v5 & 0x80000000) == 0)
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    int v10 = v6 - v4 + 1;
    float64x2_t v42 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
    float64x2_t v43 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
    float64x2_t v40 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
    float64x2_t v41 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
    while (1)
    {
      uint64_t v11 = a1[1];
      uint64_t v12 = (unsigned int *)sub_413C0(a1, v5);
      unsigned int v14 = *(_DWORD *)(v11 - 12);
      unsigned int v13 = *(_DWORD *)(v11 - 8);
      BOOL v15 = v14 == -1 && v13 == -1;
      if (v15 || ((v17 = *v12, v16 = v12[1], *v12 == -1) ? (BOOL v18 = v16 == -1) : (BOOL v18 = 0), v18))
      {
LABEL_41:
        v38 = a1;
        unint64_t v39 = v5;
        return *(void *)sub_413C0(v38, v39);
      }
      long double v19 = exp(3.14159265 - (double)v13 * 6.28318531 / 4294967300.0);
      long double v20 = atan((v19 - 1.0 / v19) * 0.5) * 57.2957795 * 0.0174532925;
      v21.i64[0] = v14;
      v21.i64[1] = v17;
      long double v22 = exp(3.14159265 - (double)v16 * 6.28318531 / 4294967300.0);
      long double v23 = atan((v22 - 1.0 / v22) * 0.5) * 57.2957795 * 0.0174532925;
      int64x2_t v24 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v21), v43), v42), v41), v40);
      double v44 = vsubq_f64((float64x2_t)v24, (float64x2_t)vdupq_laneq_s64(v24, 1)).f64[0];
      long double v25 = sin((v20 - v23) * 0.5);
      long double v26 = v25 * v25;
      double v27 = cos(v20);
      long double v28 = v27 * cos(v23);
      long double v29 = sin(0.5 * v44);
      long double v30 = atan2(sqrt(v29 * v29 * v28 + v26), sqrt(1.0 - (v29 * v29 * v28 + v26)));
      double v31 = (v30 + v30) * 6372797.56 * 100.0;
      if (v31 >= 0.0)
      {
        double v32 = v31;
        if (v31 >= 4.50359963e15) {
          goto LABEL_23;
        }
        uint64_t v33 = (uint64_t)(v31 + v31) + 1;
      }
      else
      {
        double v32 = v31;
        if (v31 <= -4.50359963e15) {
          goto LABEL_23;
        }
        uint64_t v33 = (uint64_t)(v31 + v31);
        if (v33 >= 1) {
          --v33;
        }
      }
      double v32 = (double)(v33 >> 1);
LABEL_23:
      if (v32 >= 9.22337204e18)
      {
        uint64_t v35 = 0x7FFFFFFFFFFFFFFELL;
        if (a2 != 0x7FFFFFFFFFFFFFFFLL) {
          goto LABEL_41;
        }
        goto LABEL_35;
      }
      if (v31 >= 0.0)
      {
        if (v31 >= 4.50359963e15) {
          goto LABEL_34;
        }
        uint64_t v34 = (uint64_t)(v31 + v31) + 1;
      }
      else
      {
        if (v31 <= -4.50359963e15) {
          goto LABEL_34;
        }
        uint64_t v34 = (uint64_t)(v31 + v31);
        if (v34 >= 1) {
          --v34;
        }
      }
      double v31 = (double)(v34 >> 1);
LABEL_34:
      uint64_t v35 = (uint64_t)v31;
      if ((uint64_t)v31 >= a2) {
        goto LABEL_41;
      }
LABEL_35:
      if (v35 > v9)
      {
        uint64_t v9 = v35;
        unint64_t v8 = v5;
      }
      --v5;
      if (__CFADD__(v10++, 1)) {
        goto LABEL_43;
      }
    }
  }
  unint64_t v8 = 0;
LABEL_43:
  v38 = a1;
  unint64_t v39 = v8;
  return *(void *)sub_413C0(v38, v39);
}

uint64_t *sub_8DAEA8(uint64_t a1)
{
  double result = (uint64_t *)nullsub_1(a1);
  uint64_t v2 = *result;
  uint64_t v14 = result[1];
  if (*result != v14)
  {
    do
    {
      if (*(unsigned char *)(v2 + 9976))
      {
        uint64_t v3 = *(void *)(v2 + 10176);
        uint64_t v4 = *(void *)(v2 + 10184);
        uint64_t v15 = v4;
        while (v3 != v4)
        {
          uint64_t v5 = *(void *)(v3 + 20);
          uint64_t v6 = HIDWORD(*(void *)(v3 + 20));
          int v7 = *(_DWORD *)(v3 + 28);
          uint64_t v8 = *(void *)(v3 + 32);
          uint64_t v9 = *(void *)(v3 + 40);
          while (v8 != v9)
          {
            if (!*(unsigned char *)(v8 + 44))
            {
              int v10 = sub_650EEC(v2, *(void *)v8);
              unint64_t v11 = sub_8DAB20(v10, *(void *)(v8 + 24));
              int v13 = v12;
              double result = (uint64_t *)sub_63A034(v8);
              if ((result & 1) != 0 || v5 == 0xFFFFFFFFLL && (uint64_t v5 = 0xFFFFFFFFLL, v6 == 0xFFFFFFFFLL))
              {
                uint64_t v5 = v11;
                uint64_t v6 = HIDWORD(v11);
                int v7 = v13;
              }
            }
            v8 += 176;
          }
          *(void *)(v3 + 20) = v5 | (v6 << 32);
          *(_DWORD *)(v3 + 28) = v7;
          v3 += 104;
          uint64_t v4 = v15;
        }
      }
      v2 += 12328;
    }
    while (v2 != v14);
  }
  return result;
}

double sub_8DAFD0()
{
  byte_25D05A7 = 1;
  word_25D0590 = 65;
  byte_25D05BF = 1;
  word_25D05A8 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25D0650 = 0u;
  *(_OWORD *)&qword_25D0660 = 0u;
  dword_25D0670 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25D0650, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25D0650, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25D0650, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25D0650, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25D05D7 = 8;
  strcpy((char *)&qword_25D05C0, "any_mode");
  byte_25D05EF = 7;
  strcpy((char *)&dword_25D05D8, "cycling");
  byte_25D0607 = 7;
  strcpy((char *)&dword_25D05F0, "driving");
  byte_25D061F = 7;
  strcpy((char *)&dword_25D0608, "walking");
  qword_25D0628 = 0;
  qword_25D0630 = 0;
  qword_25D0620 = 0;
  v0 = operator new(9uLL);
  *(void *)v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25D0620 = (uint64_t)v0;
  qword_25D0628 = (uint64_t)(v0 + 9);
  qword_25D0630 = (uint64_t)(v0 + 9);
  qword_25D0638 = 0;
  qword_25D0640 = 0;
  unk_25D0648 = 0;
  v1 = (char *)operator new(9uLL);
  qword_25D0640 = (uint64_t)(v1 + 9);
  unk_25D0648 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25D0638 = (uint64_t)v1;
  return result;
}

void sub_8DB298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25D0660) {
    sub_20AB5B8((void **)qword_25D0660);
  }
  v37 = (void *)xmmword_25D0650;
  *(void *)&xmmword_25D0650 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

BOOL sub_8DB338(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = (unsigned int *)sub_470B40(a2, a3);
  sub_6B7AD0((uint64_t *)a1, v6, (uint64_t)&v81);
  unint64_t v7 = a3 + 1;
  int v8 = (unsigned int *)sub_470B40(a2, a3 + 1);
  sub_6B7AD0((uint64_t *)a1, v8, (uint64_t)v79);
  uint64_t v9 = (unsigned __int16 *)(*(void *)&v79[0] - (int)**(_DWORD **)&v79[0]);
  if (*v9 >= 0x2Fu && (uint64_t v10 = v9[23]) != 0)
  {
    int v11 = *(unsigned __int8 *)(*(void *)&v79[0] + v10);
    long long v76 = v81;
    long long v77 = v82;
    unint64_t v78 = v83;
    if (v11 == 50)
    {
      if (v7 < sub_470ADC(a2) - 1)
      {
        int v12 = 1;
        while (1)
        {
          char v13 = *(int **)(sub_470B40(a2, v7) + 8);
          int v14 = (unsigned __int16 *)((char *)v13 - *v13);
          if (*v14 < 0x2Fu) {
            break;
          }
          uint64_t v15 = v14[23];
          if (!v15) {
            break;
          }
          unsigned int v16 = *((unsigned __int8 *)v13 + v15);
          BOOL v17 = v16 > 0x36;
          uint64_t v18 = (1 << v16) & 0x44000000000008;
          if (v17 || v18 == 0) {
            break;
          }
          long double v20 = (unsigned int *)sub_470B40(a2, v7);
          sub_6B7AD0((uint64_t *)a1, v20, (uint64_t)&v84);
          long long v76 = v84;
          long long v77 = v85;
          unint64_t v78 = (unint64_t)v86;
          if (++v7 >= sub_470ADC(a2) - 1) {
            goto LABEL_26;
          }
        }
        v69 = (unsigned int *)sub_470B40(a2, v7);
        sub_6B7AD0((uint64_t *)a1, v69, (uint64_t)&v84);
        BOOL v67 = 0;
        if (sub_69EB54(a1, (int **)&v84, (int **)&v76, 0)) {
          return v67;
        }
      }
      int v12 = 1;
      goto LABEL_26;
    }
  }
  else
  {
    long long v76 = v81;
    long long v77 = v82;
    unint64_t v78 = v83;
  }
  if (v7 < sub_470ADC(a2) - 1)
  {
    while (1)
    {
      uint64x2_t v21 = *(int **)(sub_470B40(a2, v7) + 8);
      long double v22 = (unsigned __int16 *)((char *)v21 - *v21);
      if (*v22 < 0x2Fu) {
        break;
      }
      uint64_t v23 = v22[23];
      if (!v23) {
        break;
      }
      unsigned int v24 = *((unsigned __int8 *)v21 + v23);
      BOOL v17 = v24 > 0x36;
      uint64_t v25 = (1 << v24) & 0x44000000000008;
      if (v17 || v25 == 0) {
        break;
      }
      double v27 = (unsigned int *)sub_470B40(a2, v7);
      sub_6B7AD0((uint64_t *)a1, v27, (uint64_t)&v84);
      long long v76 = v84;
      long long v77 = v85;
      unint64_t v78 = (unint64_t)v86;
      if (++v7 >= sub_470ADC(a2) - 1) {
        goto LABEL_25;
      }
    }
    long double v28 = (unsigned int *)sub_470B40(a2, v7);
    sub_6B7AD0((uint64_t *)a1, v28, (uint64_t)&v84);
  }
LABEL_25:
  int v12 = 0;
LABEL_26:
  long double v29 = (unsigned int *)sub_470B40(a2, v7);
  uint64_t v30 = *v29;
  unsigned int v31 = v29[1];
  __p = 0;
  v74 = 0;
  uint64_t v75 = 0;
  long long v70 = v79[0];
  long long v71 = v79[1];
  unint64_t v72 = v80;
  double v32 = (unsigned __int16 *)(v81 - *(int *)v81);
  if (*v32 < 0x2Fu
    || !v32[23]
    || ((v33 = *(unsigned __int8 *)(v81 + v32[23]), BOOL v17 = v33 > 0x36, v34 = (1 << v33) & 0x44000000000008, !v17)
      ? (BOOL v35 = v34 == 0)
      : (BOOL v35 = 1),
        v35))
  {
    float64x2_t v40 = (unsigned __int16 *)(v70 - *(int *)v70);
    if (*v40 >= 9u && (uint64_t v41 = v40[4]) != 0) {
      uint64_t v42 = *(unsigned int *)(v70 + v41);
    }
    else {
      uint64_t v42 = 0;
    }
    goto LABEL_43;
  }
  uint64_t v36 = v32[4];
  if (!v36)
  {
    uint64_t v37 = 0;
    uint64_t v38 = v70;
    unint64_t v39 = (unsigned __int16 *)(v70 - *(int *)v70);
    if (*v39 >= 9u) {
      goto LABEL_40;
    }
LABEL_42:
    uint64_t v42 = v37;
    goto LABEL_43;
  }
  uint64_t v37 = *(unsigned int *)(v81 + v36);
  uint64_t v38 = v70;
  unint64_t v39 = (unsigned __int16 *)(v70 - *(int *)v70);
  if (*v39 < 9u) {
    goto LABEL_42;
  }
LABEL_40:
  uint64_t v43 = v39[4];
  if (!v43) {
    goto LABEL_42;
  }
  uint64_t v42 = *(unsigned int *)(v38 + v43) + v37;
LABEL_43:
  unsigned __int8 v44 = 0;
  char v45 = 0;
  unint64_t v46 = v30 | ((unint64_t)(unsigned __int16)v31 << 32);
  long long v76 = v81;
  long long v77 = v82;
  unint64_t v78 = v83;
  uint64_t v47 = v42;
  while (1)
  {
    sub_2E44A4(*(void *)a1, (uint64_t)&v70, &__p);
    v48 = (int **)__p;
    v49 = v74;
    v50 = (int **)__p;
    if (__p != v74)
    {
      while (1)
      {
        unint64_t v51 = (unint64_t)v50[4];
        if ((v51 & 0xFFFFFFFFFFFFLL) == v46 && ((v31 & 0x20000000) == 0) != ((v51 & 0xFF000000000000) == 0)) {
          break;
        }
        v50 += 5;
        if (v50 == v74)
        {
          v50 = v74;
          break;
        }
      }
      v45 |= v50 != v74;
      v50 = (int **)__p;
      while (1)
      {
        v52 = (unsigned __int16 *)((char *)*v50 - **v50);
        if (*v52 >= 0x2Fu)
        {
          uint64_t v53 = v52[23];
          if (v53)
          {
            unsigned int v54 = *((unsigned __int8 *)*v50 + v53);
            BOOL v17 = v54 > 0x36;
            uint64_t v55 = (1 << v54) & 0x44000000000008;
            if (!v17 && v55 != 0) {
              break;
            }
          }
        }
        v50 += 5;
        if (v50 == v74) {
          goto LABEL_83;
        }
      }
    }
    if (v50 == v74) {
      break;
    }
    long long v76 = v70;
    long long v77 = v71;
    unint64_t v78 = v72;
    long long v58 = *(_OWORD *)v50;
    long long v57 = *((_OWORD *)v50 + 1);
    unint64_t v59 = (unint64_t)v50[4];
    unint64_t v72 = v59;
    long long v70 = v58;
    long long v71 = v57;
    if ((v59 & 0xFFFFFFFFFFFFLL) == (v80 & 0xFFFFFFFFFFFFLL) && ((v59 & 0xFF000000000000) == 0) != (HIWORD(v80) & 1)) {
      break;
    }
    uint64_t v60 = 0;
    if ((v45 & 1) == 0)
    {
      if (*(unsigned __int16 *)(v70 - *(int *)v70) < 9u)
      {
        uint64_t v60 = 0;
        v61 = (unsigned __int16 *)(v70 - *(int *)v70);
        if (*v61 < 9u) {
          goto LABEL_72;
        }
        goto LABEL_69;
      }
      uint64_t v60 = *(unsigned __int16 *)(v70 - *(int *)v70 + 8);
      if (*(_WORD *)(v70 - *(int *)v70 + 8)) {
        uint64_t v60 = *(unsigned int *)(v70 + v60);
      }
    }
    v61 = (unsigned __int16 *)(v70 - *(int *)v70);
    if (*v61 < 9u) {
      goto LABEL_72;
    }
LABEL_69:
    uint64_t v62 = v61[4];
    if (v62)
    {
      uint64_t v63 = *(unsigned int *)(v70 + v62);
      v47 += v60;
      if (v47 > *(void *)(a1 + 664)) {
        goto LABEL_87;
      }
      goto LABEL_73;
    }
LABEL_72:
    uint64_t v63 = 0;
    v47 += v60;
    if (v47 > *(void *)(a1 + 664)) {
      goto LABEL_87;
    }
LABEL_73:
    v42 += v63;
    if (v42 > *(void *)(a1 + 672)) {
      goto LABEL_87;
    }
    if (__p == v74)
    {
      v66 = (int **)__p;
    }
    else
    {
      while (1)
      {
        long long v64 = *(_OWORD *)v48;
        long long v65 = *((_OWORD *)v48 + 1);
        v86 = v48[4];
        long long v84 = v64;
        long long v85 = v65;
        if (sub_6C54C8(a1, &v81, &v70, (int **)&v84, (int **)&v76, v12, 0)) {
          break;
        }
        v48 += 5;
        if (v48 == v49)
        {
          v48 = v49;
          break;
        }
      }
      v66 = v48;
      v48 = v74;
    }
    v44 += (v66 != v48) & (v45 ^ 1);
    if (*(unsigned __int8 *)(a1 + 680) <= v44)
    {
      BOOL v67 = 0;
      v48 = (int **)__p;
      if (!__p) {
        return v67;
      }
      goto LABEL_88;
    }
  }
LABEL_83:
  if (v47 < *(void *)(a1 + 664) && v42 < *(void *)(a1 + 672))
  {
    BOOL v67 = *(unsigned __int8 *)(a1 + 680) > v44;
    if (!__p) {
      return v67;
    }
    goto LABEL_88;
  }
LABEL_87:
  BOOL v67 = 0;
  if (!__p) {
    return v67;
  }
LABEL_88:
  v74 = v48;
  operator delete(v48);
  return v67;
}

void sub_8DB970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_8DB990(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *a1;
  uint64_t v9 = (unsigned int *)sub_470B40(a2, a3);
  uint64_t v10 = *v9;
  unint64_t v11 = ((unint64_t)(v9[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v9[1] << 32) | v10;
  char v12 = BYTE6(v11) ^ 1;
  unint64_t v13 = (v11 ^ 0x1000000000000) >> 32;
  unint64_t v14 = v11 & 0xFFFFFFFFFFFFLL;
  uint64_t v15 = (int *)sub_2D5D58(v8, v11 & 0xFFFFFFFFFFFFLL);
  uint64_t v129 = a4;
  if (*(unsigned char *)(v8 + 7772))
  {
    unsigned int v16 = sub_2DB8E0(v8 + 3896, v10, 0);
    BOOL v17 = &v16[-*(int *)v16];
    if (*(unsigned __int16 *)v17 < 5u)
    {
      uint64_t v18 = 0;
    }
    else
    {
      uint64_t v18 = *((unsigned __int16 *)v17 + 2);
      if (v18) {
        v18 += (uint64_t)&v16[*(unsigned int *)&v16[v18]];
      }
    }
    long double v19 = (int *)(v18 + 4 * (unsigned __int16)v13 + 4 + *(unsigned int *)(v18 + 4 * (unsigned __int16)v13 + 4));
  }
  else
  {
    long double v19 = 0;
  }
  v134[0] = v15;
  v134[1] = v19;
  v134[2] = (int *)sub_2E5C38(v8, v14, 1);
  v134[3] = v20;
  LODWORD(v135) = v10;
  WORD2(v135) = v13;
  BYTE6(v135) = v12;
  unint64_t v130 = a3;
  uint64_t v21 = a3 + 1;
  v131 = a1;
  uint64_t v22 = *a1;
  uint64_t v23 = (unsigned int *)sub_470B40(a2, a3 + 1);
  uint64_t v24 = *v23;
  unsigned int v128 = v23[1];
  unint64_t v25 = v24 | ((unint64_t)(unsigned __int16)v128 << 32);
  long double v26 = (int *)sub_2D5D58(v22, v25);
  if (*(unsigned char *)(v22 + 7772)) {
    sub_2DB8E0(v22 + 3896, v24, 0);
  }
  sub_2E5C38(v22, v25, 1);
  sub_46B058();
  long double v28 = v27;
  unint64_t v30 = v29;
  sub_46B058();
  double v32 = v31;
  unint64_t v34 = v21 + v33;
  if (!v28)
  {
    if (v31 && v34 < sub_470ADC(v31))
    {
      while (1)
      {
        char v45 = *(int **)(sub_470B40(0, v30) + 8);
        unint64_t v46 = (unsigned __int16 *)((char *)v45 - *v45);
        if (*v46 < 0x2Fu) {
          break;
        }
        uint64_t v47 = v46[23];
        if (!v47) {
          break;
        }
        unsigned int v48 = *((unsigned __int8 *)v45 + v47);
        BOOL v42 = v48 > 0x36;
        uint64_t v49 = (1 << v48) & 0x44000000000008;
        if (v42 || v49 == 0) {
          break;
        }
        ++v30;
        if (v34 >= sub_470ADC(v32)) {
          goto LABEL_43;
        }
      }
LABEL_44:
      int v51 = 0;
      goto LABEL_46;
    }
LABEL_43:
    int v51 = 1;
    goto LABEL_46;
  }
  if (!v31)
  {
    if (v30 < sub_470ADC(v28))
    {
      while (1)
      {
        v52 = *(int **)(sub_470B40(v28, v30) + 8);
        uint64_t v53 = (unsigned __int16 *)((char *)v52 - *v52);
        if (*v53 < 0x2Fu) {
          goto LABEL_44;
        }
        uint64_t v54 = v53[23];
        if (!v54) {
          goto LABEL_44;
        }
        unsigned int v55 = *((unsigned __int8 *)v52 + v54);
        BOOL v42 = v55 > 0x36;
        uint64_t v56 = (1 << v55) & 0x44000000000008;
        if (v42 || v56 == 0) {
          goto LABEL_44;
        }
        if (++v30 >= sub_470ADC(v28)) {
          goto LABEL_43;
        }
      }
    }
    goto LABEL_43;
  }
  while (1)
  {
    unint64_t v35 = sub_470ADC(v28);
    unint64_t v36 = sub_470ADC(v32);
    if (v30 >= v35 || v34 >= v36) {
      break;
    }
    uint64_t v37 = sub_470B40(v28, v30);
    if (v37 == sub_470B40(v32, v34)) {
      goto LABEL_45;
    }
LABEL_17:
    uint64_t v38 = *(int **)(sub_470B40(v28, v30) + 8);
    unint64_t v39 = (unsigned __int16 *)((char *)v38 - *v38);
    if (*v39 < 0x2Fu
      || (uint64_t v40 = v39[23]) == 0
      || ((unsigned int v41 = *((unsigned __int8 *)v38 + v40), v42 = v41 > 0x36, v43 = (1 << v41) & 0x44000000000008, !v42)
        ? (BOOL v44 = v43 == 0)
        : (BOOL v44 = 1),
          v44))
    {
      int v51 = 0;
      goto LABEL_46;
    }
    ++v30;
  }
  if (v30 < v35 != v34 < v36) {
    goto LABEL_17;
  }
LABEL_45:
  int v51 = 1;
LABEL_46:
  sub_46B058();
  unint64_t v59 = v58;
  unint64_t v61 = v21 + v60;
  sub_46FF18();
  long long v64 = v62;
  unint64_t v65 = v63;
  if (!v59)
  {
    if (v62 && v63 < sub_470ADC(v62))
    {
      while (1)
      {
        uint64_t v75 = *(int **)(sub_470B40(0, v61) + 8);
        long long v76 = (unsigned __int16 *)((char *)v75 - *v75);
        if (*v76 < 0x2Fu) {
          break;
        }
        uint64_t v77 = v76[23];
        if (!v77) {
          break;
        }
        unsigned int v78 = *((unsigned __int8 *)v75 + v77);
        BOOL v42 = v78 > 0x36;
        uint64_t v79 = (1 << v78) & 0x44000000000008;
        if (v42 || v79 == 0) {
          break;
        }
        ++v61;
        if (v65 >= sub_470ADC(v64)) {
          goto LABEL_79;
        }
      }
LABEL_81:
      int v81 = 0;
      unint64_t v88 = v25;
      uint64_t v89 = (uint64_t)v131;
      v90 = (unsigned __int16 *)((char *)v15 - *v15);
      unsigned int v91 = *v90;
      if (v91 >= 0x2F) {
        goto LABEL_85;
      }
      goto LABEL_91;
    }
LABEL_79:
    int v81 = 1;
    unint64_t v88 = v25;
    uint64_t v89 = (uint64_t)v131;
    v90 = (unsigned __int16 *)((char *)v15 - *v15);
    unsigned int v91 = *v90;
    if (v91 >= 0x2F) {
      goto LABEL_85;
    }
    goto LABEL_91;
  }
  if (!v62)
  {
    if (v61 < sub_470ADC(v59))
    {
      while (1)
      {
        long long v82 = *(int **)(sub_470B40(v59, v61) + 8);
        unint64_t v83 = (unsigned __int16 *)((char *)v82 - *v82);
        if (*v83 < 0x2Fu) {
          goto LABEL_81;
        }
        uint64_t v84 = v83[23];
        if (!v84) {
          goto LABEL_81;
        }
        unsigned int v85 = *((unsigned __int8 *)v82 + v84);
        BOOL v42 = v85 > 0x36;
        uint64_t v86 = (1 << v85) & 0x44000000000008;
        if (v42 || v86 == 0) {
          goto LABEL_81;
        }
        if (++v61 >= sub_470ADC(v59)) {
          goto LABEL_79;
        }
      }
    }
    goto LABEL_79;
  }
  while (1)
  {
    unint64_t v66 = sub_470ADC(v59);
    unint64_t v67 = sub_470ADC(v64);
    if (v61 >= v66 || v65 >= v67) {
      break;
    }
    uint64_t v68 = sub_470B40(v59, v61);
    if (v68 == sub_470B40(v64, v65)) {
      goto LABEL_83;
    }
LABEL_53:
    v69 = *(int **)(sub_470B40(v59, v61) + 8);
    long long v70 = (unsigned __int16 *)((char *)v69 - *v69);
    if (*v70 < 0x2Fu
      || (uint64_t v71 = v70[23]) == 0
      || ((v72 = *((unsigned __int8 *)v69 + v71), BOOL v42 = v72 > 0x36, v73 = (1 << v72) & 0x44000000000008, !v42)
        ? (BOOL v74 = v73 == 0)
        : (BOOL v74 = 1),
          v74))
    {
      int v81 = 0;
      goto LABEL_84;
    }
    ++v61;
  }
  if (v61 < v66 != v65 < v67) {
    goto LABEL_53;
  }
LABEL_83:
  int v81 = 1;
LABEL_84:
  unint64_t v88 = v25;
  uint64_t v89 = (uint64_t)v131;
  v90 = (unsigned __int16 *)((char *)v15 - *v15);
  unsigned int v91 = *v90;
  if (v91 >= 0x2F)
  {
LABEL_85:
    uint64_t v92 = v90[23];
    if (v90[23])
    {
      unsigned int v93 = *((unsigned __int8 *)v15 + v92);
      BOOL v42 = v93 > 0x36;
      uint64_t v94 = (1 << v93) & 0x44000000000008;
      if (!v42 && v94 != 0)
      {
LABEL_100:
        unsigned int v102 = *((unsigned __int8 *)v15 + v92);
        BOOL v42 = v102 > 0x36;
        uint64_t v103 = (1 << v102) & 0x44000000000008;
        if (v42 || v103 == 0) {
          return 0;
        }
        v105 = (unsigned __int16 *)((char *)v26 - *v26);
        if (*v105 >= 0x2Fu)
        {
          uint64_t v106 = v105[23];
          if (v106)
          {
            unsigned int v107 = *((unsigned __int8 *)v26 + v106);
            BOOL v42 = v107 > 0x36;
            uint64_t v108 = (1 << v107) & 0x44000000000008;
            if (!v42 && v108 != 0) {
              return 0;
            }
          }
        }
        if (v51)
        {
          uint64_t v101 = 0;
          goto LABEL_113;
        }
        v132 = v26;
        BOOL v111 = 0;
LABEL_115:
        unint64_t v112 = (v88 | ((unint64_t)(v128 & 0x20000000) << 19)) ^ 0x1000000000000;
        if (*(unsigned char *)(v89 + 692)) {
          int v113 = v111;
        }
        else {
          int v113 = 0;
        }
        sub_6C597C((uint64_t *)v89, a2, v130, v113, v89 + 64);
        unint64_t v114 = *(void *)(v89 + 168);
        unint64_t v133 = v135;
        sub_2D5B74((char **)v129, &v133);
        unint64_t v133 = v112;
        sub_2D5B74((char **)v129, &v133);
        if ((v81 | v51 | v113 ^ 1))
        {
          if ((v81 & v113) == 1)
          {
            *(_DWORD *)(v129 + 24) = 0;
            return 1;
          }
          if ((v51 & v113) == 1)
          {
            uint64_t v110 = 1;
            *(_DWORD *)(v129 + 24) = sub_6B91C0(v89, v134, (uint64_t *)(v89 + 144), v114, 1, 0, 0);
            return v110;
          }
          if ((v113 & 1) == 0 && *(unsigned char *)(v89 + 693))
          {
            uint64_t v110 = 1;
            int v116 = sub_6B91C0(v89, v134, (uint64_t *)(v89 + 144), v114, 1, 0, 0);
            int v117 = sub_6B91C0(v89, v134, (uint64_t *)(v89 + 144), v114, 1, 1, 0);
            if (v116) {
              int v118 = v116;
            }
            else {
              int v118 = v117;
            }
            *(_DWORD *)(v129 + 24) = v118;
            if (v118 == v116)
            {
              if ((v119 = (unsigned __int16 *)((char *)v134[0] - *v134[0]), *v119 < 0x2Fu)
                || (uint64_t v120 = v119[23]) == 0
                || ((unsigned int v121 = *((unsigned __int8 *)v134[0] + v120),
                     BOOL v42 = v121 > 0x36,
                     uint64_t v122 = (1 << v121) & 0x44000000000008,
                     !v42)
                  ? (BOOL v123 = v122 == 0)
                  : (BOOL v123 = 1),
                    v123))
              {
                v124 = (unsigned __int16 *)((char *)v132 - *v132);
                if (*v124 >= 0x2Fu)
                {
                  uint64_t v125 = v124[23];
                  if (v125)
                  {
                    unsigned int v126 = *((unsigned __int8 *)v132 + v125);
                    if (v126 <= 0x36 && ((1 << v126) & 0x44000000000008) != 0) {
                      *(void *)(v129 + 112) = v114;
                    }
                  }
                }
              }
            }
            return v110;
          }
          sub_6BF228(v89, a2, v130, (int **)(v89 + 64), v129, 0);
        }
        else
        {
          sub_6BF228(v89, a2, v130, (int **)(v89 + 64), v129, 0);
          int v115 = *(_DWORD *)(v129 + 24);
          if (v115 == 2)
          {
            *(_DWORD *)(v129 + 24) = 87;
          }
          else if (v115 == 1)
          {
            *(_DWORD *)(v129 + 24) = 86;
          }
        }
        return 1;
      }
    }
  }
LABEL_91:
  v96 = (unsigned __int16 *)((char *)v26 - *v26);
  if (*v96 >= 0x2Fu)
  {
    uint64_t v97 = v96[23];
    if (v97)
    {
      unsigned int v98 = *((unsigned __int8 *)v26 + v97);
      BOOL v42 = v98 > 0x36;
      uint64_t v99 = (1 << v98) & 0x44000000000008;
      BOOL v100 = v42 || v99 == 0;
      uint64_t v101 = v130;
      if (!v100)
      {
LABEL_113:
        v132 = v26;
        BOOL v111 = sub_8DB338(v89, a2, v101);
        goto LABEL_115;
      }
    }
  }
  if (v91 >= 0x2F)
  {
    LODWORD(v92) = v90[23];
    if (v90[23]) {
      goto LABEL_100;
    }
  }
  return 0;
}

BOOL sub_8DC2B0(uint64_t a1, char **a2, char **a3)
{
  uint64_t v4 = a1 + 1160;
  int v5 = sub_6D7A80(a1 + 1160, a2);
  return v5 == sub_6D7A80(v4, a3);
}

uint64_t sub_8DC2FC(uint64_t a1, void *a2, int **a3, int **a4)
{
  uint64_t v4 = (unsigned __int16 *)((char *)*a3 - **a3);
  unsigned int v5 = *v4;
  if (*((unsigned char *)a3 + 38))
  {
    if (v5 < 0x49) {
      goto LABEL_11;
    }
    unsigned int v6 = v4[36];
    if (!v6) {
      goto LABEL_11;
    }
  }
  else if (v5 < 0x4B || (unsigned int v6 = v4[37]) == 0)
  {
LABEL_11:
    __int16 v7 = -1;
    uint64_t v8 = (char *)*a4;
    uint64_t v9 = (unsigned __int16 *)((char *)*a4 - **a4);
    unsigned int v10 = *v9;
    if (*((unsigned char *)a4 + 38)) {
      goto LABEL_12;
    }
LABEL_8:
    if (v10 >= 0x49)
    {
      unsigned int v11 = v9[36];
      if (v9[36]) {
        goto LABEL_14;
      }
    }
    goto LABEL_15;
  }
  __int16 v7 = *(_WORD *)((char *)*a3 + v6);
  uint64_t v8 = (char *)*a4;
  uint64_t v9 = (unsigned __int16 *)((char *)*a4 - **a4);
  unsigned int v10 = *v9;
  if (!*((unsigned char *)a4 + 38)) {
    goto LABEL_8;
  }
LABEL_12:
  if (v10 >= 0x4B)
  {
    unsigned int v11 = v9[37];
    if (v9[37])
    {
LABEL_14:
      int v12 = *(unsigned __int16 *)&v8[v11];
      goto LABEL_16;
    }
  }
LABEL_15:
  int v12 = 0xFFFF;
LABEL_16:
  unsigned __int16 v13 = v7 + 18000;
  unsigned __int16 v14 = v7 - 18000;
  if ((unsigned __int16)(v13 >> 5) < 0x465u) {
    unsigned __int16 v14 = v13;
  }
  int v15 = v12 - v14;
  if (v15 > 18000) {
    v15 -= 36000;
  }
  if (v15 < -17999) {
    v15 += 36000;
  }
  if (fabs((double)v15 / 100.0) <= *(double *)(a1 + 200)) {
    return 0;
  }
  unsigned int v16 = (unsigned __int16 *)(*a2 - *(int *)*a2);
  if (*v16 < 0xBu) {
    return 0;
  }
  uint64_t v17 = v16[5];
  if (!v17) {
    return 0;
  }
  if ((*(unsigned char *)(*a2 + v17) & 3) == 0 || v10 < 0xB) {
    return 0;
  }
  uint64_t v19 = v9[5];
  if (!v19) {
    return 0;
  }
  unsigned int v20 = *(_DWORD *)&v8[v19];
  if (v20) {
    return 1;
  }
  else {
    return (v20 >> 1) & 1;
  }
}

BOOL sub_8DC460(uint64_t a1, int **a2, int **a3)
{
  double v5 = sub_6D82EC(a1 + 1160, a2, a3);
  unsigned int v6 = *a2;
  __int16 v7 = (unsigned __int16 *)((char *)*a2 - **a2);
  unsigned int v8 = *v7;
  if (v8 < 0xB) {
    return fabs(v5) >= *(double *)(a1 + 200);
  }
  if (v7[5])
  {
    if (v8 < 0x39 || (*(int *)((char *)v6 + v7[5]) & 3) != 0) {
      return fabs(v5) >= *(double *)(a1 + 200);
    }
  }
  else if (v8 < 0x39)
  {
    return fabs(v5) >= *(double *)(a1 + 200);
  }
  uint64_t v10 = v7[28];
  if (v10)
  {
    int v11 = *(int *)((char *)v6 + v10);
    if ((v11 & 0x23) != 0 || (v11 & 7) == 4) {
      return 0;
    }
  }
  return fabs(v5) >= *(double *)(a1 + 200);
}

double sub_8DC510()
{
  byte_25D068F = 1;
  word_25D0678 = 65;
  byte_25D06A7 = 1;
  word_25D0690 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25D06D8 = 0u;
  *(_OWORD *)&qword_25D06E8 = 0u;
  dword_25D06F8 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25D06D8, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25D06D8, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25D06D8, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25D06D8, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  qword_25D06B0 = 0;
  qword_25D06B8 = 0;
  qword_25D06A8 = 0;
  v0 = operator new(9uLL);
  *(void *)v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25D06A8 = (uint64_t)v0;
  qword_25D06B0 = (uint64_t)(v0 + 9);
  qword_25D06B8 = (uint64_t)(v0 + 9);
  qword_25D06C0 = 0;
  qword_25D06C8 = 0;
  unk_25D06D0 = 0;
  v1 = (char *)operator new(9uLL);
  qword_25D06C8 = (uint64_t)(v1 + 9);
  unk_25D06D0 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25D06C0 = (uint64_t)v1;
  return result;
}

void sub_8DC74C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25D06E8) {
    sub_20AB5FC((void **)qword_25D06E8);
  }
  uint64_t v37 = (void *)xmmword_25D06D8;
  *(void *)&xmmword_25D06D8 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_8DC7EC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = sub_3750CC(a2);
  strcpy((char *)v17, "WindshieldModeDetector");
  HIBYTE(v17[2]) = 22;
  __p = 0;
  int v15 = 0;
  uint64_t v16 = 0;
  int v8 = sub_374CDC((uint64_t)a2, (uint64_t)v17, (uint64_t *)&__p);
  *(_DWORD *)(a1 + 18) = 131074;
  int64x2_t v9 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(unsigned char *)(a1 + 40) = 0;
  *(int64x2_t *)(a1 + 48) = v9;
  *(void *)(a1 + 64) = 0x8000000080000000;
  *(int64x2_t *)(a1 + 72) = v9;
  *(void *)(a1 + 88) = 0x8000000080000000;
  *(int64x2_t *)(a1 + 96) = v9;
  *(void *)(a1 + 112) = 0x8000000080000000;
  *(int64x2_t *)(a1 + 120) = v9;
  *(int64x2_t *)(a1 + 136) = v9;
  *(unsigned char *)(a1 + 152) = 1;
  sub_8DE38C(a1 + 8, v8);
  char v10 = (void **)__p;
  if (__p)
  {
    int v11 = v15;
    int v12 = __p;
    if (v15 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != v10);
      int v12 = __p;
    }
    int v15 = v10;
    operator delete(v12);
  }
  if (SHIBYTE(v17[2]) < 0) {
    operator delete(v17[0]);
  }
  sub_725694(a1 + 168, a2);
  *(void *)(a1 + 248) = a3;
  *(void *)(a1 + 256) = a4;
  return a1;
}

void sub_8DC92C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL sub_8DC954(uint64_t a1)
{
  return *(unsigned char *)(a1 + 40) && *(unsigned char *)(*(void *)(a1 + 248) + 1518) != 0;
}

void sub_8DC97C(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 8) && *(unsigned char *)(*(void *)(a1 + 248) + 1450))
  {
    sub_8DCC28(a2, v25);
    __p = 0;
    long long v24 = 0uLL;
    uint64_t v4 = a2[134] - a2[133];
    if (v4)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0x2FC962FC962FC963 * (v4 >> 5);
      do
      {
        sub_8DCDBC(a1, (uint64_t *)v25, a2, v5, (uint64_t *)&__p);
        char v7 = (unsigned __int8 *)__p;
        int v8 = (unsigned __int8 *)v24;
        while (v7 != v8)
        {
          sub_63BB70(v7[4], a1 + 168, v26);
          int64x2_t v9 = (void *)*((void *)v7 + 7);
          if (v9)
          {
            *((void *)v7 + 8) = v9;
            operator delete(v9);
          }
          *(_OWORD *)(v7 + 56) = v26[0];
          *((void *)v7 + 9) = *(void *)&v26[1];
          v7 += 616;
        }
        ++v5;
      }
      while (v5 != v6);
    }
    sub_8DD070(a1, a2, (uint64_t *)&__p, (uint64_t *)v25);
    memset(v26, 0, 24);
    char v10 = __p;
    int v11 = (void *)v24;
    if (__p != (void *)v24)
    {
      do
      {
        sub_8DDA10((void *)a1, v10, (uint64_t *)v26);
        v10 += 77;
      }
      while (v10 != v11);
      char v10 = __p;
    }
    if (v10)
    {
      int v12 = v10;
      if ((void *)v24 != v10)
      {
        uint64_t v13 = v24 - 560;
        do
        {
          int v15 = *(void **)(v13 + 496);
          if (v15)
          {
            *(void *)(v13 + 504) = v15;
            operator delete(v15);
          }
          sub_510298(v13 + 24);
          uint64_t v16 = *(void **)v13;
          if (*(void *)v13)
          {
            *(void *)(v13 + 8) = v16;
            operator delete(v16);
          }
          int v14 = (void *)(v13 - 56);
          v13 -= 616;
        }
        while (v14 != v10);
        int v12 = __p;
      }
      *(void *)&long long v24 = v10;
      operator delete(v12);
    }
    __p = *(void **)&v26[0];
    long long v24 = *(_OWORD *)((char *)v26 + 8);
    sub_708010(a2 + 1251, a2[1252], *(long long **)&v26[0], *((long long **)&v26[0] + 1), 0x4FCACE213F2B3885 * ((uint64_t)(*((void *)&v26[0] + 1) - *(void *)&v26[0]) >> 3));
    uint64_t v17 = __p;
    if (__p)
    {
      uint64_t v18 = __p;
      if ((void *)v24 != __p)
      {
        uint64_t v19 = v24 - 560;
        do
        {
          uint64_t v21 = *(void **)(v19 + 496);
          if (v21)
          {
            *(void *)(v19 + 504) = v21;
            operator delete(v21);
          }
          sub_510298(v19 + 24);
          uint64_t v22 = *(void **)v19;
          if (*(void *)v19)
          {
            *(void *)(v19 + 8) = v22;
            operator delete(v22);
          }
          unsigned int v20 = (void *)(v19 - 56);
          v19 -= 616;
        }
        while (v20 != v17);
        uint64_t v18 = __p;
      }
      *(void *)&long long v24 = v17;
      operator delete(v18);
    }
    if (v25[0])
    {
      v25[1] = v25[0];
      operator delete(v25[0]);
    }
  }
}

void sub_8DCBE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

unint64_t sub_8DCC28@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = sub_46C760(a1);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v4)
  {
    if (v4 >> 61) {
      sub_2E00();
    }
    size_t v5 = v4;
    uint64_t v6 = operator new(8 * v4);
    *a2 = v6;
    a2[2] = &v6[v5];
    memset_pattern16(v6, &xmmword_20B8FC0, v5 * 8);
    a2[1] = &v6[v5];
  }
  else
  {
    uint64_t v6 = 0;
  }
  *uint64_t v6 = 0;
  unint64_t result = sub_46C760(a1);
  unint64_t v8 = result;
  if (result)
  {
    unint64_t result = sub_46C760(a1);
    if (result >= 2)
    {
      unint64_t result = sub_46CCC8(a1, 0, v9);
      v6[1] = result;
    }
    unint64_t v10 = v8 - 1;
    if (v10)
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        unint64_t result = sub_46C760(a1);
        if (i + 2 < result)
        {
          unint64_t result = sub_46CCC8(a1, i + 1, v12);
          v6[i + 2] = v6[i + 1] + result;
        }
      }
    }
  }
  return result;
}

void sub_8DCD44(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_8DCD5C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_8DCD74(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_8DCD8C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_8DCDA4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_8DCDBC(uint64_t result, uint64_t *a2, void *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a3[133];
  uint64_t v6 = (void *)(v5 + 2400 * a4);
  uint64_t v7 = v6[226];
  unsigned int v31 = v6;
  uint64_t v8 = v6[227];
  if (v7 != v8)
  {
    uint64_t v9 = result;
    uint64_t v10 = 0;
    char v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = (v8 - v7) / 336;
    uint64_t v14 = v5 + 2400 * a4;
    int v15 = (void *)(v14 + 872);
    uint64_t v16 = (_DWORD *)(v14 + 1860);
    uint64_t v17 = (unsigned char *)(v14 + 1856);
    double v27 = (unsigned char *)(v14 + 1856);
    long double v28 = (void *)(v14 + 872);
    while (2)
    {
      uint64_t v18 = v31[226] + v10;
      unint64_t result = sub_683488(v18);
      uint64_t v19 = 48;
      if (result) {
        uint64_t v19 = 56;
      }
      if (*v15 >= *(void *)(v9 + v19))
      {
        switch(*v16)
        {
          case 0:
            uint64_t v20 = 9;
            if (result) {
              uint64_t v20 = 13;
            }
            if (*(unsigned char *)(v9 + v20)) {
              goto LABEL_24;
            }
            break;
          case 1:
            uint64_t v21 = 10;
            if (result) {
              uint64_t v21 = 14;
            }
            if (*(unsigned char *)(v9 + v21)) {
              goto LABEL_24;
            }
            break;
          case 2:
            uint64_t v22 = 11;
            if (result) {
              uint64_t v22 = 15;
            }
            if (*(unsigned char *)(v9 + v22)) {
              goto LABEL_24;
            }
            break;
          case 3:
            uint64_t v23 = 12;
            if (result) {
              uint64_t v23 = 16;
            }
            if (*(unsigned char *)(v9 + v23))
            {
LABEL_24:
              if (*v17) {
                char v24 = result;
              }
              else {
                char v24 = 0;
              }
              if ((v24 & 1) == 0)
              {
                unint64_t result = sub_8DD3E8(v9, v18);
                if (result)
                {
                  uint64_t v34 = sub_8DD24C(v9, a3, (uint64_t)v31, v12, a2, v11 & 1);
                  uint64_t v33 = sub_8DD760(v9, a3, v31, v12, a2);
                  if (sub_683488(v18))
                  {
                    if (sub_673BD4((uint64_t)v31))
                    {
                      char v25 = 7;
                    }
                    else if (sub_673A90((uint64_t)v31))
                    {
                      char v25 = 6;
                    }
                    else
                    {
                      char v25 = 2;
                    }
                  }
                  else
                  {
                    char v25 = 2;
                  }
                  uint64_t v17 = v27;
                  int v15 = v28;
                  if (sub_6828E4(v18)) {
                    unsigned __int8 v26 = sub_682540(v18);
                  }
                  else {
                    unsigned __int8 v26 = sub_682728(v18);
                  }
                  unint64_t result = sub_8DD894(v9, v25, &v34, &v33, v26, a2, a5);
                  char v11 = 1;
                }
                else
                {
                  char v11 = 0;
                }
              }
              ++v12;
              v10 += 336;
              if (v13 != v12) {
                continue;
              }
            }
            break;
          default:
            return result;
        }
      }
      break;
    }
  }
  return result;
}

void sub_8DD070(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  if (*a3 == v6)
  {
    uint64_t v10 = *a3;
  }
  else
  {
    uint64_t v10 = a3[1];
    while (!sub_8DE184(a1, a2, v5, a4))
    {
      v5 += 616;
      if (v5 == v6) {
        goto LABEL_17;
      }
    }
    if (v5 != v6)
    {
      uint64_t v11 = v5 + 616;
      uint64_t v10 = v5;
      while (v11 != v6)
      {
        if (!sub_8DE184(a1, a2, v11, a4))
        {
          long long v14 = *(_OWORD *)v11;
          long long v15 = *(_OWORD *)(v11 + 16);
          long long v16 = *(_OWORD *)(v11 + 32);
          *(void *)(v10 + 48) = *(void *)(v11 + 48);
          *(_OWORD *)(v10 + 16) = v15;
          *(_OWORD *)(v10 + 32) = v16;
          *(_OWORD *)uint64_t v10 = v14;
          uint64_t v17 = *(void **)(v10 + 56);
          if (v17)
          {
            *(void *)(v10 + 64) = v17;
            operator delete(v17);
            *(void *)(v10 + 56) = 0;
            *(void *)(v10 + 64) = 0;
            *(void *)(v10 + 72) = 0;
          }
          *(_OWORD *)(v10 + 56) = *(_OWORD *)(v11 + 56);
          *(void *)(v10 + 72) = *(void *)(v11 + 72);
          *(void *)(v11 + 56) = 0;
          *(void *)(v11 + 64) = 0;
          *(void *)(v11 + 72) = 0;
          sub_5729B0(v10 + 80, (uint64_t *)(v11 + 80));
          uint64_t v18 = (void *)(v10 + 552);
          uint64_t v19 = *(void **)(v10 + 552);
          if (v19)
          {
            *(void *)(v10 + 560) = v19;
            operator delete(v19);
            *uint64_t v18 = 0;
            *(void *)(v10 + 560) = 0;
            *(void *)(v10 + 568) = 0;
          }
          *(_OWORD *)uint64_t v18 = *(_OWORD *)(v11 + 552);
          *(void *)(v10 + 568) = *(void *)(v11 + 568);
          *(void *)(v11 + 568) = 0;
          *(_OWORD *)(v11 + 552) = 0u;
          long long v12 = *(_OWORD *)(v11 + 576);
          long long v13 = *(_OWORD *)(v11 + 592);
          *(void *)(v10 + 608) = *(void *)(v11 + 608);
          *(_OWORD *)(v10 + 576) = v12;
          *(_OWORD *)(v10 + 592) = v13;
          v10 += 616;
        }
        v11 += 616;
      }
    }
  }
LABEL_17:
  uint64_t v20 = (long long *)a3[1];
  if ((long long *)v10 != v20)
  {
    sub_78C2E0(v20, (long long *)a3[1], v10);
    uint64_t v22 = v21;
    uint64_t v23 = a3[1];
    if (v23 != v21)
    {
      uint64_t v24 = v23 - 560;
      do
      {
        unsigned __int8 v26 = *(void **)(v24 + 496);
        if (v26)
        {
          *(void *)(v24 + 504) = v26;
          operator delete(v26);
        }
        sub_510298(v24 + 24);
        double v27 = *(void **)v24;
        if (*(void *)v24)
        {
          *(void *)(v24 + 8) = v27;
          operator delete(v27);
        }
        uint64_t v25 = v24 - 56;
        v24 -= 616;
      }
      while (v25 != v22);
    }
    a3[1] = v22;
  }
}

uint64_t sub_8DD24C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t *a5, int a6)
{
  if (*(unsigned char *)(a1 + 40) && *(unsigned char *)(*(void *)(a1 + 248) + 1518))
  {
    uint64_t v12 = *(void *)(a3 + 1808) + 336 * a4;
    BOOL v13 = sub_683488(v12);
    unint64_t v14 = sub_682208(v12);
    uint64_t v16 = sub_46CCC8(a2, v14, v15);
    uint64_t v18 = 64;
    if (v13) {
      uint64_t v18 = 68;
    }
    uint64_t v19 = sub_653410(a2, v14, v16, *(void *)(*a5 + 8 * v14) + v16, *(_DWORD *)(a1 + v18), 1, v17);
    if (*(void *)(*a5 + 8 * *(void *)(a3 + 40)) <= v19) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = *(void *)(*a5 + 8 * *(void *)(a3 + 40));
    }
    uint64_t v21 = v20;
    if (!a6) {
      goto LABEL_21;
    }
LABEL_19:
    uint64_t v32 = *(void *)(a3 + 1808) + 336 * a4 - 336;
    BOOL v33 = sub_8DD3E8(a1, v32);
    uint64_t v21 = v20;
    if (v33) {
      uint64_t v21 = *(void *)(*a5 + 8 * sub_682208(v32));
    }
    goto LABEL_21;
  }
  uint64_t v22 = *(void *)(a3 + 1808) + 336 * a4;
  BOOL v23 = sub_683488(v22);
  unint64_t v24 = sub_682208(v22);
  uint64_t v25 = *a5;
  uint64_t v27 = *(void *)(v25 + 8 * v24) + sub_46CCC8(a2, v24, v26);
  uint64_t v28 = 48;
  if (v23) {
    uint64_t v28 = 56;
  }
  uint64_t v29 = *(void *)(a1 + v28);
  BOOL v30 = v27 <= v29;
  uint64_t v31 = v27 - v29;
  if (v30) {
    uint64_t v31 = 0;
  }
  if (*(void *)(*a5 + 8 * *(void *)(a3 + 40)) <= v31) {
    uint64_t v20 = v31;
  }
  else {
    uint64_t v20 = *(void *)(*a5 + 8 * *(void *)(a3 + 40));
  }
  uint64_t v21 = v20;
  if (a6) {
    goto LABEL_19;
  }
LABEL_21:
  if (v21 <= v20) {
    return v20;
  }
  else {
    return v21;
  }
}

BOOL sub_8DD3E8(uint64_t a1, uint64_t a2)
{
  BOOL v4 = sub_683488(a2);
  unsigned __int8 v5 = sub_682244(a2);
  uint64_t v6 = 18;
  if (v4) {
    uint64_t v6 = 20;
  }
  if (*(unsigned __int16 *)(a1 + v6) > v5) {
    return 0;
  }
  unsigned __int8 v7 = v5;
  unsigned __int8 v8 = sub_682728(a2);
  unsigned __int8 v9 = sub_6827BC(a2);
  char v10 = sub_682AFC(a2);
  uint64_t v11 = 24;
  if (v4) {
    uint64_t v11 = 32;
  }
  if (*(double *)(a1 + v11) * (double)(v10 + v7) < (double)v8) {
    return 0;
  }
  unsigned __int8 v44 = v9;
  unsigned __int8 v45 = v8;
  if (v7)
  {
    uint64_t v13 = 0;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    uint64_t v48 = v7;
    while (1)
    {
      unint64_t v14 = (const void **)sub_6838A0(a2, v13);
      uint64_t v16 = *v14;
      double v15 = v14[1];
      size_t v17 = v15 - (unsigned char *)*v14;
      if (v15 == *v14)
      {
        uint64_t v19 = 0;
        uint64_t v18 = 0;
      }
      else
      {
        if ((v17 & 0x8000000000000000) != 0) {
          sub_2E00();
        }
        uint64_t v18 = (char *)operator new(v15 - (unsigned char *)*v14);
        uint64_t v19 = (unsigned __int8 *)&v18[v17];
        memcpy(v18, v16, v17);
      }
      if (sub_682F48(a2, v13))
      {
        if (v18 != (char *)v19)
        {
          uint64_t v20 = (unsigned __int8 *)v18;
          uint64_t v21 = (unsigned __int8 *)v18;
          if (v4)
          {
            while (1)
            {
              unsigned int v22 = *v21 - 1;
              if (v22 < 0xB && ((0x603u >> v22) & 1) != 0) {
                break;
              }
              if (++v21 == v19)
              {
LABEL_38:
                int v24 = 0;
                goto LABEL_39;
              }
            }
          }
          else
          {
            while (1)
            {
              unsigned int v23 = *v20 - 1;
              if (v23 < 0xC && ((0xE03u >> v23) & 1) != 0) {
                break;
              }
              if (++v20 == v19) {
                goto LABEL_38;
              }
            }
          }
          int v24 = 1;
LABEL_39:
          BOOL v30 = (unsigned __int8 *)v18;
          while (1)
          {
            unsigned int v31 = *v30;
            BOOL v32 = v31 > 0xC;
            int v33 = (1 << v31) & 0x1C06;
            if (v32 || v33 == 0) {
              break;
            }
            if (++v30 == v19)
            {
              uint64_t v35 = 1;
              goto LABEL_46;
            }
          }
          uint64_t v35 = 0;
LABEL_46:
          uint64_t v36 = v47;
          uint64_t v37 = v35 + v47;
          if (v24) {
            uint64_t v36 = v37;
          }
          uint64_t v47 = v36;
        }
      }
      else if (v18 != (char *)v19)
      {
        uint64_t v25 = (unsigned __int8 *)v18;
        double v26 = (unsigned __int8 *)v18;
        if (v4)
        {
          while (1)
          {
            unsigned int v27 = *v26 - 1;
            if (v27 < 0xC && ((0xE03u >> v27) & 1) != 0) {
              break;
            }
            if (++v26 == v19)
            {
LABEL_51:
              int v29 = 0;
              goto LABEL_52;
            }
          }
        }
        else
        {
          while (1)
          {
            unsigned int v28 = *v25 - 1;
            if (v28 < 0xB && ((0x603u >> v28) & 1) != 0) {
              break;
            }
            if (++v25 == v19) {
              goto LABEL_51;
            }
          }
        }
        int v29 = 1;
LABEL_52:
        uint64_t v38 = (unsigned __int8 *)v18;
        while (1)
        {
          unsigned int v39 = *v38;
          BOOL v32 = v39 > 0xC;
          int v40 = (1 << v39) & 0x1C06;
          if (v32 || v40 == 0) {
            break;
          }
          if (++v38 == v19)
          {
            uint64_t v42 = v46;
            if (v29) {
              uint64_t v42 = v46 + 1;
            }
            uint64_t v46 = v42;
            if (!v18) {
              goto LABEL_10;
            }
            goto LABEL_61;
          }
        }
        uint64_t v43 = v46;
        if (v29) {
          uint64_t v43 = v46;
        }
        uint64_t v46 = v43;
        if (v18) {
          goto LABEL_61;
        }
        goto LABEL_10;
      }
      if (v18) {
LABEL_61:
      }
        operator delete(v18);
LABEL_10:
      if (++v13 == v48) {
        return v47 == v45 && v46 == v44;
      }
    }
  }
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  return v47 == v45 && v46 == v44;
}

void sub_8DD734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_8DD760(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  if (*(unsigned char *)(a1 + 40) && *(unsigned char *)(*(void *)(a1 + 248) + 1518))
  {
    uint64_t v9 = a3[226] + 336 * a4;
    BOOL v10 = sub_683488(v9);
    uint64_t v11 = a3[109] + *(void *)(*a5 + 8 * a3[5]);
    if (!v10)
    {
      unint64_t v12 = sub_682208(v9);
      uint64_t v14 = sub_46CCC8(a2, v12, v13);
      uint64_t result = sub_653518(a2, v12, v14, *(void *)(*a5 + 8 * v12) + v14, *(_DWORD *)(a1 + 112), 1);
      if (v11 < result) {
        return v11;
      }
      return result;
    }
    return v11;
  }
  uint64_t v16 = a3[226] + 336 * a4;
  BOOL v17 = sub_683488(v16);
  uint64_t v11 = a3[109] + *(void *)(*a5 + 8 * a3[5]);
  if (v17) {
    return v11;
  }
  uint64_t v18 = sub_6834B0(v16);
  uint64_t v19 = *(void *)(a1 + 96);
  if (v11 >= v11 - v18 + v19) {
    return v11 - v18 + v19;
  }
  else {
    return v11;
  }
}

uint64_t sub_8DD894(uint64_t a1, char a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, uint64_t *a7)
{
  char v35 = a2;
  uint64_t v34 = a5;
  if (*(unsigned char *)(a1 + 40))
  {
    char v9 = *(unsigned char *)(*(void *)(a1 + 248) + 1518) == 0;
    char v33 = v9;
    unint64_t v10 = a7[1];
    if (v10 < a7[2]) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = sub_8DF264(a7, &v35, a3, a4, &v34, &v33);
    a7[1] = result;
    uint64_t v12 = *(void *)(result - 608);
    double v13 = (void *)*a6;
    uint64_t v14 = (void *)a6[1];
    uint64_t v15 = (uint64_t)v14 - *a6;
    if (v14 == (void *)*a6) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  char v9 = 1;
  char v33 = 1;
  unint64_t v10 = a7[1];
  if (v10 >= a7[2]) {
    goto LABEL_6;
  }
LABEL_3:
  sub_63BAB0(v10, a2, a3, a4, a5, v9);
  uint64_t result = v10 + 616;
  a7[1] = v10 + 616;
  a7[1] = v10 + 616;
  uint64_t v12 = *(void *)(v10 + 8);
  double v13 = (void *)*a6;
  uint64_t v14 = (void *)a6[1];
  uint64_t v15 = (uint64_t)v14 - *a6;
  if (v14 == (void *)*a6)
  {
LABEL_4:
    uint64_t v16 = v14;
    goto LABEL_12;
  }
LABEL_7:
  unint64_t v17 = v15 >> 3;
  uint64_t v16 = v13;
  do
  {
    unint64_t v18 = v17 >> 1;
    uint64_t v19 = &v16[v17 >> 1];
    uint64_t v21 = *v19;
    uint64_t v20 = v19 + 1;
    v17 += ~(v17 >> 1);
    if (v21 < v12) {
      uint64_t v16 = v20;
    }
    else {
      unint64_t v17 = v18;
    }
  }
  while (v17);
LABEL_12:
  BOOL v22 = *v16 != v12 && v16 > v13;
  uint64_t v23 = v22;
  *(void *)(result - 592) = v16 - v13 - v23;
  if (v14 != v13)
  {
    unint64_t v24 = v14 - v13;
    uint64_t v14 = v13;
    do
    {
      unint64_t v25 = v24 >> 1;
      double v26 = &v14[v24 >> 1];
      uint64_t v28 = *v26;
      unsigned int v27 = v26 + 1;
      v24 += ~(v24 >> 1);
      if (v28 < *(void *)(result - 600)) {
        uint64_t v14 = v27;
      }
      else {
        unint64_t v24 = v25;
      }
    }
    while (v24);
  }
  BOOL v29 = v14 >= v13;
  uint64_t v30 = (char *)v14 - (char *)v13;
  BOOL v22 = v30 != 0 && v29;
  uint64_t v31 = v30 >> 3;
  uint64_t v32 = v22;
  *(void *)(result - 584) = v31 - v32;
  return result;
}

void sub_8DDA08(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *sub_8DDA10(void *a1, void *a2, uint64_t *a3)
{
  uint64_t v5 = a3[1];
  if (*a3 != v5 && sub_63BC84((uint64_t)a2) && sub_63BC84(v5 - 616))
  {
    int v7 = sub_63B320(a2 + 73);
    unsigned __int8 v8 = (void *)(v5 - 600);
    switch(v7)
    {
      case 0:
        if (a2[1] > *v8 + a1[15]) {
          goto LABEL_14;
        }
        break;
      case 1:
        if (a2[1] > *v8 + a1[16]) {
          goto LABEL_14;
        }
        break;
      case 2:
        if (a2[1] > *v8 + a1[17]) {
          goto LABEL_14;
        }
        break;
      default:
        if (a2[1] > *v8 + a1[18]) {
          goto LABEL_14;
        }
        break;
    }
    char v9 = (void *)(a3[1] - 616);
    return sub_63BAB4(v9, a2);
  }
  else
  {
LABEL_14:
    unint64_t v11 = a3[1];
    if (v11 >= a3[2])
    {
      uint64_t result = (void *)sub_8DF4F8(a3, (long long *)a2);
      a3[1] = (uint64_t)result;
    }
    else
    {
      sub_50FFE0(a3[1], (long long *)a2);
      uint64_t result = (void *)(v11 + 616);
      a3[1] = v11 + 616;
      a3[1] = v11 + 616;
    }
  }
  return result;
}

BOOL sub_8DDB9C(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *(void *)(a3 + 24);
  unint64_t v7 = *(void *)(a3 + 32);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = sub_46C8EC(a2, v8);
  sub_2954EC(v9, *(void *)(v10 + 32), (uint64_t)v33);
  unint64_t v11 = __p;
  if (__p != v35)
  {
    unint64_t v12 = sub_2E1AA4((uint64_t)v33);
    unint64_t v11 = __p;
    uint64_t v13 = HIDWORD(v12);
    uint64_t v14 = v12;
    if (!__p) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v14 = 0xFFFFFFFFLL;
  uint64_t v13 = 0xFFFFFFFFLL;
  if (__p)
  {
LABEL_3:
    char v35 = v11;
    operator delete(v11);
  }
LABEL_4:
  uint64_t v15 = *(void *)a1;
  uint64_t v16 = sub_46C8EC(a2, v7);
  sub_2954EC(v15, *(void *)(v16 + 32), (uint64_t)v33);
  unint64_t v17 = __p;
  if (__p != v35)
  {
    unint64_t v18 = sub_2E1AA4((uint64_t)v33);
    unint64_t v17 = __p;
    uint64_t v19 = HIDWORD(v18);
    uint64_t v20 = v18;
    if (!__p) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v20 = 0xFFFFFFFFLL;
  uint64_t v19 = 0xFFFFFFFFLL;
  if (__p)
  {
LABEL_6:
    char v35 = v17;
    operator delete(v17);
  }
LABEL_7:
  double v21 = sqrt((double)(unint64_t)((v14 - v20) * (v14 - v20) + (v13 - v19) * (v13 - v19))) / 100.0 * 100.0;
  if (v21 >= 0.0)
  {
    double v22 = v21;
    if (v21 >= 4.50359963e15) {
      goto LABEL_15;
    }
    uint64_t v23 = (uint64_t)(v21 + v21) + 1;
  }
  else
  {
    double v22 = v21;
    if (v21 <= -4.50359963e15) {
      goto LABEL_15;
    }
    uint64_t v23 = (uint64_t)(v21 + v21);
    if (v23 >= 1) {
      --v23;
    }
  }
  double v22 = (double)(v23 >> 1);
LABEL_15:
  double v24 = 9.22337204e18;
  if (v22 >= 9.22337204e18) {
    goto LABEL_29;
  }
  if (v21 >= 0.0)
  {
    if (v21 < 4.50359963e15)
    {
      uint64_t v25 = (uint64_t)(v21 + v21) + 1;
LABEL_27:
      double v21 = (double)(v25 >> 1);
    }
  }
  else if (v21 > -4.50359963e15)
  {
    uint64_t v25 = (uint64_t)(v21 + v21);
    if (v25 >= 1) {
      --v25;
    }
    goto LABEL_27;
  }
  *(void *)&double v21 = (uint64_t)v21;
  double v24 = (double)*(uint64_t *)&v21;
LABEL_29:
  uint64_t v26 = *a4;
  uint64_t v27 = *(void *)(*a4 + 8 * v7);
  uint64_t v28 = *(void *)(v26 + 8 * v8);
  uint64_t v29 = sub_46CCC8(a2, v7, v21);
  double v30 = v24 * *(double *)(a1 + 160);
  if (v30 >= 0.0)
  {
    if (v30 < 4.50359963e15)
    {
      uint64_t v31 = (uint64_t)(v30 + v30) + 1;
LABEL_36:
      double v30 = (double)(v31 >> 1);
    }
  }
  else if (v30 > -4.50359963e15)
  {
    uint64_t v31 = (uint64_t)(v30 + v30);
    if (v31 >= 1) {
      --v31;
    }
    goto LABEL_36;
  }
  return v27 - v28 + v29 > (uint64_t)v30;
}

void sub_8DDE24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_8DDE44(uint64_t *a1, void *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a2[133];
  unint64_t v9 = 0;
  uint64_t v10 = a2[134] - v8;
  if (!v10)
  {
    unint64_t v15 = 0;
    uint64_t v16 = a4;
    if (*(void *)(a3 + 24) != a4) {
      goto LABEL_23;
    }
    goto LABEL_13;
  }
  unint64_t v11 = v10 / 2400;
  unint64_t v12 = *(void *)(a3 + 24);
  if (v11 <= 1) {
    unint64_t v11 = 1;
  }
  uint64_t v13 = (unint64_t *)(v8 + 40);
  while (*v13 < v12)
  {
    v13 += 300;
    if (v11 == ++v9)
    {
      unint64_t v9 = v11;
      break;
    }
  }
  BOOL v14 = v9 != 0;
  unint64_t v15 = v9 - 1;
  if (!v14) {
    unint64_t v15 = 0;
  }
  uint64_t v16 = a4;
  if (v12 == a4)
  {
LABEL_13:
    unint64_t v17 = *(void *)(v8 + 2400 * v15 + 40);
    uint64_t v16 = a4;
    if (v17 < a4)
    {
      uint64_t v16 = a4;
      while (1)
      {
        unint64_t v18 = (void *)sub_46C8EC(a2, v16);
        uint64_t v19 = (unsigned __int16 *)(*v18 - *(int *)*v18);
        if (*v19 < 0x2Fu) {
          break;
        }
        uint64_t v20 = v19[23];
        if (!v20) {
          break;
        }
        unsigned int v21 = *(unsigned __int8 *)(*v18 + v20);
        BOOL v22 = v21 > 0x2A;
        uint64_t v23 = (1 << v21) & 0x50426810004;
        if (v22 || v23 == 0) {
          break;
        }
        if (--v16 <= v17)
        {
          uint64_t v16 = v17;
          break;
        }
      }
    }
  }
LABEL_23:
  unint64_t v25 = *(void *)(a3 + 32);
  uint64_t v26 = sub_46C8EC(a2, a4);
  sub_2954EC(*a1, *(void *)(v26 + 32), (uint64_t)v49);
  uint64_t v27 = __p;
  if (__p != v51)
  {
    unint64_t v28 = sub_2E1AA4((uint64_t)v49);
    uint64_t v27 = __p;
    uint64_t v29 = HIDWORD(v28);
    uint64_t v30 = v28;
    if (!__p) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  uint64_t v30 = 0xFFFFFFFFLL;
  uint64_t v29 = 0xFFFFFFFFLL;
  if (__p)
  {
LABEL_25:
    int v51 = v27;
    operator delete(v27);
  }
LABEL_26:
  uint64_t v31 = sub_46C8EC(a2, v16);
  sub_2954EC(*a1, *(void *)(v31 + 32), (uint64_t)v49);
  uint64_t v32 = __p;
  if (__p == v51)
  {
    uint64_t v35 = 0xFFFFFFFFLL;
    uint64_t v34 = 0xFFFFFFFFLL;
    if (!__p) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  unint64_t v33 = sub_2E1AA4((uint64_t)v49);
  uint64_t v32 = __p;
  uint64_t v34 = HIDWORD(v33);
  uint64_t v35 = v33;
  if (__p)
  {
LABEL_28:
    int v51 = v32;
    operator delete(v32);
  }
LABEL_29:
  int v36 = 0;
  double v37 = sqrt((double)(unint64_t)((v35 - v30) * (v35 - v30) + (v34 - v29) * (v34 - v29))) / 100.0;
  unint64_t v38 = v16 + 1;
  while (1)
  {
    unint64_t v39 = v38;
    if (v38 > v25) {
      return v39 <= v25;
    }
    int v40 = v36;
    uint64_t v41 = sub_46C8EC(a2, v38);
    sub_2954EC(*a1, *(void *)(v41 + 32), (uint64_t)v49);
    uint64_t v42 = __p;
    if (__p != v51)
    {
      unint64_t v43 = sub_2E1AA4((uint64_t)v49);
      unsigned int v44 = v43;
      unint64_t v45 = v43 & 0xFFFFFFFF00000000;
      uint64_t v42 = __p;
      uint64_t v46 = v44;
      if (!__p) {
        goto LABEL_34;
      }
LABEL_33:
      int v51 = v42;
      operator delete(v42);
      goto LABEL_34;
    }
    unint64_t v45 = 0xFFFFFFFF00000000;
    uint64_t v46 = 0xFFFFFFFFLL;
    if (__p) {
      goto LABEL_33;
    }
LABEL_34:
    double v47 = sqrt((double)((v35 - v46) * (v35 - v46) + (v34 - HIDWORD(v45)) * (v34 - HIDWORD(v45)))) / 100.0;
    BOOL v22 = v47 <= v37;
    int v36 = (v47 > v37) | v40;
    unint64_t v38 = v39 + 1;
    double v37 = v47;
    if (v22)
    {
      double v37 = v47;
      if (((v40 ^ 1) & 1) == 0) {
        return v39 <= v25;
      }
    }
  }
}

void sub_8DE160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_8DE184(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  for (unint64_t i = *(void *)(a3 + 24); i < *(void *)(a3 + 32); ++i)
  {
    unint64_t v9 = (char **)sub_46C8EC(a2, i);
    uint64_t v10 = (int *)v9[1];
    unint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
    if (*v11 < 0x11u) {
      return 1;
    }
    uint64_t v12 = v11[8];
    if (!v12) {
      return 1;
    }
    __int16 v13 = *(_WORD *)((char *)v10 + v12);
    if (*(unsigned char *)(*(void *)(a1 + 256) + 2025)) {
      BOOL v14 = (v13 & 0x40) == 0;
    }
    else {
      BOOL v14 = 0;
    }
    if (v14)
    {
      if ((v13 & 0x80) == 0) {
        return 1;
      }
    }
    else if ((v13 & 0x40) == 0)
    {
      return 1;
    }
    unint64_t v15 = *v9;
    uint64_t v16 = &(*v9)[-*(int *)*v9];
    unsigned int v17 = *(unsigned __int16 *)v16;
    if (v17 < 0xB) {
      continue;
    }
    if (!*((_WORD *)v16 + 5)) {
      goto LABEL_17;
    }
    int v18 = *(_DWORD *)&v15[*((unsigned __int16 *)v16 + 5)];
    if ((v18 & 0x10000800) != 0) {
      return 1;
    }
    if ((v18 & 0x8000) != 0)
    {
      if (v17 < 0x71)
      {
LABEL_25:
        if (v17 < 0x2F) {
          continue;
        }
        goto LABEL_26;
      }
      if (*((_WORD *)v16 + 56) && v15[*((unsigned __int16 *)v16 + 56)] - 1 < 2) {
        return 1;
      }
    }
    else
    {
LABEL_17:
      if (v17 < 0x71) {
        goto LABEL_25;
      }
      if (*((_WORD *)v16 + 56) && (v15[*((unsigned __int16 *)v16 + 56)] & 0xFD) == 1) {
        return 1;
      }
    }
LABEL_26:
    uint64_t v19 = *((unsigned __int16 *)v16 + 23);
    if (v19)
    {
      unsigned int v20 = v15[v19];
      BOOL v21 = v20 > 0x2A;
      uint64_t v22 = (1 << v20) & 0x50426810004;
      if (!v21 && v22 != 0)
      {
        return sub_8DDE44((uint64_t *)a1, a2, a3, i);
      }
    }
  }
  if (!*(unsigned char *)(a1 + 152)) {
    return 0;
  }

  return sub_8DDB9C(a1, a2, a3, a4);
}

void sub_8DE38C(uint64_t a1, void *a2)
{
  uint64_t v34 = (char *)operator new(0x20uLL);
  long long v35 = xmmword_20B8E90;
  strcpy(v34, "enable_windshield_mode_detector");
  BOOL v4 = sub_58070(a2, (uint64_t)&v34);
  if (v4 && (int v5 = *((_DWORD *)v4 + 12), (v5 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)a1 = v5 == 4;
    if (SHIBYTE(v35) < 0) {
      goto LABEL_6;
    }
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a1 != 0;
    if (SHIBYTE(v35) < 0) {
LABEL_6:
    }
      operator delete(v34);
  }
  uint64_t v34 = (char *)operator new(0x30uLL);
  long long v35 = xmmword_20B93E0;
  strcpy(v34, "enable_midstep_bifurcation_on_freeway_roads");
  uint64_t v6 = sub_58070(a2, (uint64_t)&v34);
  if (v6 && (int v7 = *((_DWORD *)v6 + 12), (v7 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1) = v7 == 4;
    if (SHIBYTE(v35) < 0) {
      goto LABEL_12;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1) = *(unsigned char *)(a1 + 1) != 0;
    if (SHIBYTE(v35) < 0) {
LABEL_12:
    }
      operator delete(v34);
  }
  uint64_t v34 = (char *)operator new(0x38uLL);
  long long v35 = xmmword_20B9A20;
  strcpy(v34, "enable_midstep_bifurcation_on_major_arterial_roads");
  uint64_t v8 = sub_58070(a2, (uint64_t)&v34);
  if (v8 && (int v9 = *((_DWORD *)v8 + 12), (v9 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 2) = v9 == 4;
    if (SHIBYTE(v35) < 0) {
      goto LABEL_18;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 2) = *(unsigned char *)(a1 + 2) != 0;
    if (SHIBYTE(v35) < 0) {
LABEL_18:
    }
      operator delete(v34);
  }
  uint64_t v34 = (char *)operator new(0x38uLL);
  long long v35 = xmmword_20B9A20;
  strcpy(v34, "enable_midstep_bifurcation_on_minor_arterial_roads");
  uint64_t v10 = sub_58070(a2, (uint64_t)&v34);
  if (v10 && (int v11 = *((_DWORD *)v10 + 12), (v11 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 3) = v11 == 4;
    if (SHIBYTE(v35) < 0) {
      goto LABEL_24;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 3) = *(unsigned char *)(a1 + 3) != 0;
    if (SHIBYTE(v35) < 0) {
LABEL_24:
    }
      operator delete(v34);
  }
  uint64_t v34 = (char *)operator new(0x30uLL);
  long long v35 = xmmword_20B93D0;
  strcpy(v34, "enable_midstep_bifurcation_on_local_roads");
  uint64_t v12 = sub_58070(a2, (uint64_t)&v34);
  if (v12 && (int v13 = *((_DWORD *)v12 + 12), (v13 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 4) = v13 == 4;
    if (SHIBYTE(v35) < 0) {
      goto LABEL_30;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 4) = *(unsigned char *)(a1 + 4) != 0;
    if (SHIBYTE(v35) < 0) {
LABEL_30:
    }
      operator delete(v34);
  }
  uint64_t v34 = (char *)operator new(0x30uLL);
  long long v35 = xmmword_20E1380;
  strcpy(v34, "enable_maneuver_bifurcation_on_freeway_roads");
  BOOL v14 = sub_58070(a2, (uint64_t)&v34);
  if (v14 && (int v15 = *((_DWORD *)v14 + 12), (v15 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 5) = v15 == 4;
    if (SHIBYTE(v35) < 0) {
      goto LABEL_36;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 5) = *(unsigned char *)(a1 + 5) != 0;
    if (SHIBYTE(v35) < 0) {
LABEL_36:
    }
      operator delete(v34);
  }
  uint64_t v34 = (char *)operator new(0x38uLL);
  long long v35 = xmmword_20B99F0;
  strcpy(v34, "enable_maneuver_bifurcation_on_major_arterial_roads");
  uint64_t v16 = sub_58070(a2, (uint64_t)&v34);
  if (v16 && (int v17 = *((_DWORD *)v16 + 12), (v17 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 6) = v17 == 4;
    if (SHIBYTE(v35) < 0) {
      goto LABEL_42;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 6) = *(unsigned char *)(a1 + 6) != 0;
    if (SHIBYTE(v35) < 0) {
LABEL_42:
    }
      operator delete(v34);
  }
  uint64_t v34 = (char *)operator new(0x38uLL);
  long long v35 = xmmword_20B99F0;
  strcpy(v34, "enable_maneuver_bifurcation_on_minor_arterial_roads");
  int v18 = sub_58070(a2, (uint64_t)&v34);
  if (v18 && (int v19 = *((_DWORD *)v18 + 12), (v19 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 7) = v19 == 4;
    if (SHIBYTE(v35) < 0) {
      goto LABEL_48;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 7) = *(unsigned char *)(a1 + 7) != 0;
    if (SHIBYTE(v35) < 0) {
LABEL_48:
    }
      operator delete(v34);
  }
  uint64_t v34 = (char *)operator new(0x30uLL);
  long long v35 = xmmword_20B9A40;
  strcpy(v34, "enable_maneuver_bifurcation_on_local_roads");
  unsigned int v20 = sub_58070(a2, (uint64_t)&v34);
  if (v20 && (int v21 = *((_DWORD *)v20 + 12), (v21 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 8) = v21 == 4;
    if (SHIBYTE(v35) < 0) {
      goto LABEL_54;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a1 + 8) != 0;
    if (SHIBYTE(v35) < 0) {
LABEL_54:
    }
      operator delete(v34);
  }
  uint64_t v34 = (char *)operator new(0x28uLL);
  long long v35 = xmmword_20E12D0;
  strcpy(v34, "midstep_bifurcation_minimum_lane_count");
  uint64_t v22 = sub_58070(a2, (uint64_t)&v34);
  if (v22 && *((_DWORD *)v22 + 12) == 1)
  {
    *(_WORD *)(a1 + 10) = (int)*((double *)v22 + 5);
    if (SHIBYTE(v35) < 0) {
      goto LABEL_60;
    }
  }
  else
  {
    *(_WORD *)(a1 + 10) = *(_WORD *)(a1 + 10);
    if (SHIBYTE(v35) < 0) {
LABEL_60:
    }
      operator delete(v34);
  }
  uint64_t v34 = (char *)operator new(0x28uLL);
  long long v35 = xmmword_20B9960;
  strcpy(v34, "maneuver_bifurcation_minimum_lane_count");
  uint64_t v23 = sub_58070(a2, (uint64_t)&v34);
  if (v23 && *((_DWORD *)v23 + 12) == 1)
  {
    *(_WORD *)(a1 + 12) = (int)*((double *)v23 + 5);
    if (SHIBYTE(v35) < 0) {
      goto LABEL_66;
    }
  }
  else
  {
    *(_WORD *)(a1 + 12) = *(_WORD *)(a1 + 12);
    if (SHIBYTE(v35) < 0) {
LABEL_66:
    }
      operator delete(v34);
  }
  uint64_t v34 = (char *)operator new(0x38uLL);
  long long v35 = xmmword_20B9AD0;
  strcpy(v34, "midstep_bifurcation_max_valid_to_total_lane_count_ratio");
  double v24 = sub_58070(a2, (uint64_t)&v34);
  unint64_t v25 = (void *)(a1 + 16);
  if (v24)
  {
    unint64_t v25 = v24 + 5;
    if (*((_DWORD *)v24 + 12) != 1) {
      unint64_t v25 = (void *)(a1 + 16);
    }
  }
  *(void *)(a1 + 16) = *v25;
  if (SHIBYTE(v35) < 0) {
    operator delete(v34);
  }
  uint64_t v34 = (char *)operator new(0x40uLL);
  long long v35 = xmmword_20B98C0;
  strcpy(v34, "maneuver_bifurcation_max_valid_to_total_lane_count_ratio");
  uint64_t v26 = sub_58070(a2, (uint64_t)&v34);
  uint64_t v27 = (void *)(a1 + 24);
  if (v26)
  {
    uint64_t v27 = v26 + 5;
    if (*((_DWORD *)v26 + 12) != 1) {
      uint64_t v27 = (void *)(a1 + 24);
    }
  }
  *(void *)(a1 + 24) = *v27;
  if (SHIBYTE(v35) < 0) {
    operator delete(v34);
  }
  uint64_t v34 = (char *)operator new(0x30uLL);
  long long v35 = xmmword_20B93C0;
  strcpy(v34, "use_duration_based_traffic_aware_timings");
  unint64_t v28 = sub_58070(a2, (uint64_t)&v34);
  if (v28 && (int v29 = *((_DWORD *)v28 + 12), (v29 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 32) = v29 == 4;
    if ((SHIBYTE(v35) & 0x80000000) == 0) {
      goto LABEL_83;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a1 + 32) != 0;
    if ((SHIBYTE(v35) & 0x80000000) == 0) {
      goto LABEL_83;
    }
  }
  operator delete(v34);
LABEL_83:
  uint64_t v34 = (char *)operator new(0x30uLL);
  long long v35 = xmmword_20E1380;
  strcpy(v34, "midstep_pre_bifurcation_spacing_min_distance");
  sub_5C8A4(a2, (uint64_t)&v34, (uint64_t *)(a1 + 40));
  if (SHIBYTE(v35) < 0) {
    operator delete(v34);
  }
  uint64_t v34 = (char *)operator new(0x30uLL);
  long long v35 = xmmword_20B93B0;
  strcpy(v34, "maneuver_pre_bifurcation_spacing_min_distance");
  sub_5C8A4(a2, (uint64_t)&v34, (uint64_t *)(a1 + 48));
  if (SHIBYTE(v35) < 0) {
    operator delete(v34);
  }
  uint64_t v34 = (char *)operator new(0x30uLL);
  long long v35 = xmmword_20B93C0;
  strcpy(v34, "midstep_pre_bifurcation_spacing_duration");
  sub_5D498(a2, (uint64_t)&v34, (_DWORD *)(a1 + 56));
  if (SHIBYTE(v35) < 0) {
    operator delete(v34);
  }
  uint64_t v34 = (char *)operator new(0x30uLL);
  long long v35 = xmmword_20B93D0;
  strcpy(v34, "maneuver_pre_bifurcation_spacing_duration");
  sub_5D498(a2, (uint64_t)&v34, (_DWORD *)(a1 + 60));
  if (SHIBYTE(v35) < 0) {
    operator delete(v34);
  }
  uint64_t v34 = (char *)operator new(0x40uLL);
  long long v35 = xmmword_20B9A70;
  strcpy(v34, "midstep_bifurcation_pre_lane_visuals_spacing_min_distance");
  sub_5C8A4(a2, (uint64_t)&v34, (uint64_t *)(a1 + 64));
  if (SHIBYTE(v35) < 0) {
    operator delete(v34);
  }
  uint64_t v34 = (char *)operator new(0x40uLL);
  long long v35 = xmmword_20B9A30;
  strcpy(v34, "maneuver_bifurcation_pre_lane_visuals_spacing_min_distance");
  sub_5C8A4(a2, (uint64_t)&v34, (uint64_t *)(a1 + 72));
  if (SHIBYTE(v35) < 0) {
    operator delete(v34);
  }
  uint64_t v34 = (char *)operator new(0x38uLL);
  long long v35 = xmmword_20B99E0;
  strcpy(v34, "midstep_bifurcation_pre_lane_visuals_spacing_duration");
  sub_5D498(a2, (uint64_t)&v34, (_DWORD *)(a1 + 80));
  if (SHIBYTE(v35) < 0) {
    operator delete(v34);
  }
  uint64_t v34 = (char *)operator new(0x38uLL);
  long long v35 = xmmword_20B8DF0;
  strcpy(v34, "maneuver_bifurcation_pre_lane_visuals_spacing_duration");
  sub_5D498(a2, (uint64_t)&v34, (_DWORD *)(a1 + 84));
  if (SHIBYTE(v35) < 0) {
    operator delete(v34);
  }
  uint64_t v34 = (char *)operator new(0x30uLL);
  long long v35 = xmmword_20B93B0;
  strcpy(v34, "midstep_post_bifurcation_spacing_max_distance");
  sub_5C8A4(a2, (uint64_t)&v34, (uint64_t *)(a1 + 88));
  if (SHIBYTE(v35) < 0) {
    operator delete(v34);
  }
  uint64_t v34 = (char *)operator new(0x30uLL);
  long long v35 = xmmword_20B9A80;
  strcpy(v34, "maneuver_post_bifurcation_spacing_max_distance");
  sub_5C8A4(a2, (uint64_t)&v34, (uint64_t *)(a1 + 96));
  if (SHIBYTE(v35) < 0) {
    operator delete(v34);
  }
  uint64_t v34 = (char *)operator new(0x30uLL);
  long long v35 = xmmword_20B93D0;
  strcpy(v34, "midstep_post_bifurcation_spacing_duration");
  sub_5D498(a2, (uint64_t)&v34, (_DWORD *)(a1 + 104));
  if (SHIBYTE(v35) < 0) {
    operator delete(v34);
  }
  uint64_t v34 = (char *)operator new(0x30uLL);
  long long v35 = xmmword_20B9A40;
  strcpy(v34, "maneuver_post_bifurcation_spacing_duration");
  sub_5D498(a2, (uint64_t)&v34, (_DWORD *)(a1 + 108));
  if (SHIBYTE(v35) < 0) {
    operator delete(v34);
  }
  uint64_t v34 = (char *)operator new(0x40uLL);
  long long v35 = xmmword_20B9A70;
  strcpy(v34, "max_distance_gap_to_combine_adjacent_bifurcations_freeway");
  sub_5C8A4(a2, (uint64_t)&v34, (uint64_t *)(a1 + 112));
  if (SHIBYTE(v35) < 0) {
    operator delete(v34);
  }
  uint64_t v34 = (char *)operator new(0x48uLL);
  long long v35 = xmmword_20B9A00;
  strcpy(v34, "max_distance_gap_to_combine_adjacent_bifurcations_major_arterial");
  sub_5C8A4(a2, (uint64_t)&v34, (uint64_t *)(a1 + 120));
  if (SHIBYTE(v35) < 0) {
    operator delete(v34);
  }
  uint64_t v34 = (char *)operator new(0x48uLL);
  long long v35 = xmmword_20B9A00;
  strcpy(v34, "max_distance_gap_to_combine_adjacent_bifurcations_minor_arterial");
  sub_5C8A4(a2, (uint64_t)&v34, (uint64_t *)(a1 + 128));
  if (SHIBYTE(v35) < 0) {
    operator delete(v34);
  }
  uint64_t v34 = (char *)operator new(0x38uLL);
  long long v35 = xmmword_20B9AD0;
  strcpy(v34, "max_distance_gap_to_combine_adjacent_bifurcations_local");
  sub_5C8A4(a2, (uint64_t)&v34, (uint64_t *)(a1 + 136));
  if (SHIBYTE(v35) < 0) {
    operator delete(v34);
  }
  uint64_t v34 = (char *)operator new(0x30uLL);
  long long v35 = xmmword_20B9A80;
  strcpy(v34, "enable_suppress_windshield_mode_on_windy_roads");
  uint64_t v30 = sub_58070(a2, (uint64_t)&v34);
  if (v30 && (int v31 = *((_DWORD *)v30 + 12), (v31 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 144) = v31 == 4;
    if (SHIBYTE(v35) < 0) {
      goto LABEL_120;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 144) = *(unsigned char *)(a1 + 144) != 0;
    if (SHIBYTE(v35) < 0) {
LABEL_120:
    }
      operator delete(v34);
  }
  uint64_t v34 = (char *)operator new(0x20uLL);
  long long v35 = xmmword_20B91C0;
  strcpy(v34, "max_road_curviness_ratio");
  uint64_t v32 = sub_58070(a2, (uint64_t)&v34);
  unint64_t v33 = (void *)(a1 + 152);
  if (v32)
  {
    unint64_t v33 = v32 + 5;
    if (*((_DWORD *)v32 + 12) != 1) {
      unint64_t v33 = (void *)(a1 + 152);
    }
  }
  *(void *)(a1 + 152) = *v33;
  if (SHIBYTE(v35) < 0) {
    operator delete(v34);
  }
}

void sub_8DF1CC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 17) < 0) {
    operator delete(*(void **)(v1 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_8DF264(uint64_t *a1, char *a2, void *a3, uint64_t *a4, uint64_t *a5, char *a6)
{
  uint64_t v7 = 0x4FCACE213F2B3885 * ((a1[1] - *a1) >> 3);
  unint64_t v8 = v7 + 1;
  if ((unint64_t)(v7 + 1) > 0x6A63BD81A98EF6) {
    sub_2E00();
  }
  if (0x9F959C427E56710ALL * ((a1[2] - *a1) >> 3) > v8) {
    unint64_t v8 = 0x9F959C427E56710ALL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x4FCACE213F2B3885 * ((a1[2] - *a1) >> 3)) >= 0x3531DEC0D4C77BLL) {
    unint64_t v14 = 0x6A63BD81A98EF6;
  }
  else {
    unint64_t v14 = v8;
  }
  if (v14)
  {
    if (v14 > 0x6A63BD81A98EF6) {
      sub_188D718();
    }
    int v15 = (char *)operator new(616 * v14);
  }
  else
  {
    int v15 = 0;
  }
  uint64_t v36 = (uint64_t)&v15[616 * v7];
  double v37 = &v15[616 * v14];
  sub_63BAB0(v36, *a2, a3, a4, *a5, *a6);
  uint64_t v16 = v36 + 616;
  int v18 = (char *)*a1;
  int v17 = (char *)a1[1];
  if (v17 == (char *)*a1)
  {
    *a1 = v36;
    a1[1] = v16;
    a1[2] = (uint64_t)v37;
  }
  else
  {
    uint64_t v19 = 0;
    do
    {
      uint64_t v20 = v36 + v19;
      uint64_t v21 = v36 + v19 - 616;
      uint64_t v22 = &v17[v19];
      long long v23 = *(_OWORD *)&v17[v19 - 616];
      long long v24 = *(_OWORD *)&v17[v19 - 600];
      long long v25 = *(_OWORD *)&v17[v19 - 584];
      *(void *)(v21 + 48) = *(void *)&v17[v19 - 568];
      *(_OWORD *)(v21 + 16) = v24;
      *(_OWORD *)(v21 + 32) = v25;
      *(_OWORD *)uint64_t v21 = v23;
      uint64_t v26 = v36 + v19 - 560;
      uint64_t v27 = (uint64_t)&v17[v19 - 560];
      *(void *)uint64_t v26 = 0;
      *(_OWORD *)(v26 + 8) = 0u;
      *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
      *(void *)(v36 + v19 - 544) = *(void *)&v17[v19 - 544];
      *(void *)(v27 + 16) = 0;
      *(_OWORD *)uint64_t v27 = 0u;
      sub_571CE4(v36 + v19 - 536, (uint64_t *)&v17[v19 - 536]);
      *(void *)(v20 - 64) = 0;
      *(void *)(v20 - 56) = 0;
      *(void *)(v20 - 48) = 0;
      *(_OWORD *)(v20 - 64) = *(_OWORD *)&v17[v19 - 64];
      *(void *)(v20 - 48) = *(void *)&v17[v19 - 48];
      *((void *)v22 - 8) = 0;
      *((void *)v22 - 7) = 0;
      *((void *)v22 - 6) = 0;
      long long v28 = *(_OWORD *)&v17[v19 - 40];
      long long v29 = *(_OWORD *)&v17[v19 - 24];
      *(void *)(v20 - 8) = *(void *)&v17[v19 - 8];
      *(_OWORD *)(v20 - 24) = v29;
      *(_OWORD *)(v20 - 40) = v28;
      v19 -= 616;
    }
    while (&v17[v19] != v18);
    uint64_t v30 = (char *)*a1;
    int v17 = (char *)a1[1];
    *a1 = v36 + v19;
    a1[1] = v16;
    a1[2] = (uint64_t)v37;
    if (v17 != v30)
    {
      int v31 = v17 - 560;
      do
      {
        unint64_t v33 = (void *)*((void *)v31 + 62);
        if (v33)
        {
          *((void *)v31 + 63) = v33;
          operator delete(v33);
        }
        sub_510298((uint64_t)(v31 + 24));
        uint64_t v34 = *(void **)v31;
        if (*(void *)v31)
        {
          *((void *)v31 + 1) = v34;
          operator delete(v34);
        }
        uint64_t v32 = v31 - 56;
        v31 -= 616;
      }
      while (v32 != v30);
      int v17 = v30;
    }
  }
  if (v17) {
    operator delete(v17);
  }
  return v36 + 616;
}

void sub_8DF4E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7079FC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_8DF4F8(uint64_t *a1, long long *a2)
{
  uint64_t v3 = 0x4FCACE213F2B3885 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x6A63BD81A98EF6) {
    sub_2E00();
  }
  if (0x9F959C427E56710ALL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x9F959C427E56710ALL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x4FCACE213F2B3885 * ((a1[2] - *a1) >> 3)) >= 0x3531DEC0D4C77BLL) {
    unint64_t v6 = 0x6A63BD81A98EF6;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x6A63BD81A98EF6) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(616 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v28 = (uint64_t)&v7[616 * v3];
  long long v29 = &v7[616 * v6];
  sub_50FFE0(v28, a2);
  uint64_t v8 = v28 + 616;
  uint64_t v10 = (char *)*a1;
  int v9 = (char *)a1[1];
  if (v9 == (char *)*a1)
  {
    *a1 = v28;
    a1[1] = v8;
    a1[2] = (uint64_t)v29;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = v28 + v11;
      uint64_t v13 = v28 + v11 - 616;
      unint64_t v14 = &v9[v11];
      long long v15 = *(_OWORD *)&v9[v11 - 616];
      long long v16 = *(_OWORD *)&v9[v11 - 600];
      long long v17 = *(_OWORD *)&v9[v11 - 584];
      *(void *)(v13 + 48) = *(void *)&v9[v11 - 568];
      *(_OWORD *)(v13 + 16) = v16;
      *(_OWORD *)(v13 + 32) = v17;
      *(_OWORD *)uint64_t v13 = v15;
      uint64_t v18 = v28 + v11 - 560;
      uint64_t v19 = (uint64_t)&v9[v11 - 560];
      *(void *)uint64_t v18 = 0;
      *(_OWORD *)(v18 + 8) = 0u;
      *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
      *(void *)(v28 + v11 - 544) = *(void *)&v9[v11 - 544];
      *(void *)(v19 + 16) = 0;
      *(_OWORD *)uint64_t v19 = 0u;
      sub_571CE4(v28 + v11 - 536, (uint64_t *)&v9[v11 - 536]);
      *(void *)(v12 - 64) = 0;
      *(void *)(v12 - 56) = 0;
      *(void *)(v12 - 48) = 0;
      *(_OWORD *)(v12 - 64) = *(_OWORD *)&v9[v11 - 64];
      *(void *)(v12 - 48) = *(void *)&v9[v11 - 48];
      *((void *)v14 - 8) = 0;
      *((void *)v14 - 7) = 0;
      *((void *)v14 - 6) = 0;
      long long v20 = *(_OWORD *)&v9[v11 - 40];
      long long v21 = *(_OWORD *)&v9[v11 - 24];
      *(void *)(v12 - 8) = *(void *)&v9[v11 - 8];
      *(_OWORD *)(v12 - 24) = v21;
      *(_OWORD *)(v12 - 40) = v20;
      v11 -= 616;
    }
    while (&v9[v11] != v10);
    uint64_t v22 = (char *)*a1;
    int v9 = (char *)a1[1];
    *a1 = v28 + v11;
    a1[1] = v8;
    a1[2] = (uint64_t)v29;
    if (v9 != v22)
    {
      long long v23 = v9 - 560;
      do
      {
        long long v25 = (void *)*((void *)v23 + 62);
        if (v25)
        {
          *((void *)v23 + 63) = v25;
          operator delete(v25);
        }
        sub_510298((uint64_t)(v23 + 24));
        uint64_t v26 = *(void **)v23;
        if (*(void *)v23)
        {
          *((void *)v23 + 1) = v26;
          operator delete(v26);
        }
        long long v24 = v23 - 56;
        v23 -= 616;
      }
      while (v24 != v22);
      int v9 = v22;
    }
  }
  if (v9) {
    operator delete(v9);
  }
  return v28 + 616;
}

void sub_8DF758(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7079FC((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_8DF76C()
{
  byte_25D0717 = 1;
  word_25D0700 = 65;
  byte_25D072F = 1;
  word_25D0718 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25D0760 = 0u;
  *(_OWORD *)&qword_25D0770 = 0u;
  dword_25D0780 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25D0760, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25D0760, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25D0760, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25D0760, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  qword_25D0738 = 0;
  qword_25D0740 = 0;
  qword_25D0730 = 0;
  v0 = operator new(9uLL);
  *(void *)v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25D0730 = (uint64_t)v0;
  qword_25D0738 = (uint64_t)(v0 + 9);
  qword_25D0740 = (uint64_t)(v0 + 9);
  qword_25D0748 = 0;
  qword_25D0750 = 0;
  unk_25D0758 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25D0750 = (uint64_t)(v1 + 9);
  unk_25D0758 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25D0748 = (uint64_t)v1;
  return result;
}

void sub_8DF9A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25D0770) {
    sub_20AB640((void **)qword_25D0770);
  }
  double v37 = (void *)xmmword_25D0760;
  *(void *)&xmmword_25D0760 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_8DFA48(uint64_t a1, uint64_t a2)
{
  strcpy((char *)v12, "BoundsComponentBuilder");
  HIBYTE(v12[2]) = 22;
  int v9 = 0;
  char v10 = 0;
  uint64_t v11 = 0;
  char v4 = sub_374CDC(a2, (uint64_t)v12, (uint64_t *)&v9);
  char v14 = 11;
  strcpy((char *)__p, "ttl_seconds");
  *(_DWORD *)a1 = 10 * sub_319F48(v4, (uint64_t)__p);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  int v5 = (void **)v9;
  if (v9)
  {
    unint64_t v6 = v10;
    char v7 = v9;
    if (v10 != v9)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      char v7 = v9;
    }
    char v10 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v12[2]) < 0) {
    operator delete(v12[0]);
  }
  *(void *)(a1 + 8) = a2;
  return a1;
}

void sub_8DFB60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
  {
    operator delete(__p);
    sub_1A668(&a10);
    if ((a18 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    sub_1A668(&a10);
    if ((a18 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(a13);
  _Unwind_Resume(a1);
}

int *sub_8DFBC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = &off_243AEC8;
  *(_OWORD *)(a3 + 8) = xmmword_20E9E20;
  *(_OWORD *)(a3 + 24) = xmmword_20B8EA0;
  sub_8ECABC(a2, (uint64_t)&v17);
  double result = (int *)sub_3755E4(*(void **)(a1 + 8));
  if (v18 == 4)
  {
    double result = (int *)sub_8DFD1C((uint64_t)result, v17, 0, "line");
    unint64_t v6 = (unsigned __int16 *)((char *)result - *result);
    if (*v6 >= 0x53u)
    {
      unsigned __int16 v7 = v6[41];
      if (v7)
      {
        uint64_t v8 = (uint64_t)result + v7;
        LODWORD(v9) = *(_DWORD *)(v8 + 4);
        if (v9 >= 0xFFFFFFFE) {
          uint64_t v9 = 4294967294;
        }
        else {
          uint64_t v9 = v9;
        }
        unint64_t v13 = *(unsigned int *)v8 | (unint64_t)(v9 << 32);
        int v14 = 0x7FFFFFFF;
        uint64_t v10 = *(unsigned int *)(v8 + 8);
        LODWORD(v8) = *(_DWORD *)(v8 + 12);
        if (v8 >= 0xFFFFFFFE) {
          uint64_t v8 = 4294967294;
        }
        else {
          uint64_t v8 = v8;
        }
        uint64_t v11 = v10 | (v8 << 32);
        int v12 = 0x7FFFFFFF;
        double result = (int *)sub_3392C((uint64_t)&v15, (unsigned int *)&v13, (unsigned int *)&v11);
        *(_OWORD *)(a3 + 16) = v15;
        *(void *)(a3 + 32) = v16;
      }
    }
  }
  *(_DWORD *)(a3 + 8) = *(_DWORD *)a1;
  return result;
}

BOOL sub_8DFD14(uint64_t a1)
{
  return sub_344C4((_DWORD *)(a1 + 16));
}

uint64_t sub_8DFD1C(uint64_t a1, unint64_t a2, int a3, char *a4)
{
  unsigned int v6 = a2;
  unint64_t v8 = HIDWORD(a2);
  LODWORD(v61.__r_.__value_.__l.__data_) = a2;
  LODWORD(v60.__r_.__value_.__l.__data_) = a3;
  *(void *)&long long v62 = &v60;
  *((void *)&v62 + 1) = &v61;
  unint64_t v9 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v9;
  uint64_t v10 = *(void *)a1;
  if (!v10) {
    goto LABEL_38;
  }
  uint64_t v11 = a1 + 16;
  if (*(_DWORD *)(a1 + 592) == a2)
  {
    unsigned int v12 = 24;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 616) == a2)
  {
    unsigned int v12 = 25;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 640) == a2)
  {
    unsigned int v12 = 26;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 664) == a2)
  {
    unsigned int v12 = 27;
LABEL_10:
    ++*(void *)(a1 + 3864);
    uint64_t v13 = v11 + 24 * v12;
    *(void *)(v13 + 8) = v9;
    int v14 = *(unsigned int **)(v13 + 16);
    if (v14) {
      goto LABEL_11;
    }
LABEL_38:
    sub_2A54B4((int **)&v62);
    int v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
    return 0;
  }
  unint64_t v20 = *(void *)(a1 + 648);
  unint64_t v21 = *(void *)(a1 + 624);
  if (*(void *)(a1 + 600) >= v9)
  {
    int v22 = 0;
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + 600);
    int v22 = 24;
  }
  BOOL v23 = v21 >= v9;
  if (v21 < v9) {
    unint64_t v9 = *(void *)(a1 + 624);
  }
  int v24 = 25;
  if (v23) {
    int v24 = v22;
  }
  if (v20 >= v9) {
    unint64_t v25 = v9;
  }
  else {
    unint64_t v25 = *(void *)(a1 + 648);
  }
  unint64_t v26 = *(void *)(a1 + 672);
  if (v20 >= v9) {
    int v27 = v24;
  }
  else {
    int v27 = 26;
  }
  int v14 = (unsigned int *)sub_2AB884(v10, 6, a2, 1);
  unsigned int v28 = 27;
  if (v26 >= v25) {
    unsigned int v28 = v27;
  }
  uint64_t v29 = v11 + 24 * v28;
  *(_DWORD *)uint64_t v29 = v61.__r_.__value_.__l.__data_;
  *(void *)(v29 + 8) = *(void *)(a1 + 3856);
  *(void *)(v29 + 16) = v14;
  if (!v14) {
    goto LABEL_38;
  }
LABEL_11:
  long long v15 = (int *)((char *)v14 + *v14);
  uint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 < 0xFu)
  {
    int v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v17 = v16[7];
    if (v17)
    {
      int v18 = (int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
      if (*v18 > v8) {
        return (uint64_t)&v18[v8 + 1] + v18[v8 + 1];
      }
    }
    else
    {
      int v18 = 0;
    }
    if (a3 != 1)
    {
LABEL_19:
      if (!a3)
      {
        exception = __cxa_allocate_exception(0x40uLL);
        int v31 = a4;
        uint64_t v32 = (uint64_t)exception;
        sub_5E5C(&v55, v31);
        unint64_t v33 = std::string::insert(&v55, 0, "Failed to acquire entity \"");
        long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v56.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        long long v35 = std::string::append(&v56, "\" in quad node ");
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v57.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v54, v6);
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          double v37 = &v54;
        }
        else {
          double v37 = (std::string *)v54.__r_.__value_.__r.__words[0];
        }
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v54.__r_.__value_.__l.__size_;
        }
        unint64_t v39 = std::string::append(&v57, (const std::string::value_type *)v37, size);
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v58.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        uint64_t v41 = std::string::append(&v58, " at position ");
        long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v59.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v53, v8);
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v43 = &v53;
        }
        else {
          unint64_t v43 = (std::string *)v53.__r_.__value_.__r.__words[0];
        }
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v44 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v44 = v53.__r_.__value_.__l.__size_;
        }
        unint64_t v45 = std::string::append(&v59, (const std::string::value_type *)v43, v44);
        long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        v60.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        double v47 = std::string::append(&v60, " on layer ");
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v61.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        uint64_t v49 = sub_736EC(6u);
        v50 = std::string::append(&v61, v49);
        long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        std::string::size_type v63 = v50->__r_.__value_.__r.__words[2];
        long long v62 = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        v52 = (void *)sub_2F404(v32, &v62);
      }
      return (uint64_t)&v18[v8 + 1] + v18[v8 + 1];
    }
  }
  return 0;
}

void sub_8E00B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (*(char *)(v54 - 105) < 0) {
    operator delete(*(void **)(v54 - 128));
  }
  if (*(char *)(v54 - 137) < 0)
  {
    operator delete(*(void **)(v54 - 160));
    if ((*(char *)(v54 - 169) & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
  }
  else if ((*(char *)(v54 - 169) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v54 - 192));
  if ((a15 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a54 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a10);
  if ((a54 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a49);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a42);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a40 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a16);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a35);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_12;
  }
LABEL_20:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0) {
LABEL_21:
  }
    _Unwind_Resume(a1);
LABEL_12:
  operator delete(__p);
  goto LABEL_21;
}

double sub_8E0270()
{
  byte_25D079F = 1;
  word_25D0788 = 65;
  byte_25D07B7 = 1;
  word_25D07A0 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25D0848 = 0u;
  *(_OWORD *)&qword_25D0858 = 0u;
  dword_25D0868 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25D0848, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25D0848, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25D0848, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25D0848, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25D07CF = 8;
  strcpy((char *)&qword_25D07B8, "any_mode");
  byte_25D07E7 = 7;
  strcpy((char *)&dword_25D07D0, "cycling");
  byte_25D07FF = 7;
  strcpy((char *)&dword_25D07E8, "driving");
  byte_25D0817 = 7;
  strcpy((char *)&dword_25D0800, "walking");
  qword_25D0820 = 0;
  qword_25D0828 = 0;
  qword_25D0818 = 0;
  v0 = operator new(9uLL);
  *(void *)v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25D0818 = (uint64_t)v0;
  qword_25D0820 = (uint64_t)(v0 + 9);
  qword_25D0828 = (uint64_t)(v0 + 9);
  qword_25D0830 = 0;
  qword_25D0838 = 0;
  unk_25D0840 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25D0838 = (uint64_t)(v1 + 9);
  unk_25D0840 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25D0830 = (uint64_t)v1;
  return result;
}

void sub_8E0538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25D0858) {
    sub_20AB684((void **)qword_25D0858);
  }
  double v37 = (void *)xmmword_25D0848;
  *(void *)&xmmword_25D0848 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_8E05D8(uint64_t a1, void *a2)
{
  *(void *)__p = operator new(0x40uLL);
  *(_OWORD *)&__p[8] = xmmword_20B9A30;
  strcpy(*(char **)__p, "suppress_system_name_given_nonempty_line_name_in_container");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(unsigned char *)a1 = v4;
  __p[23] = 11;
  strcpy(__p, "ttl_seconds");
  *(_DWORD *)(a1 + 4) = 10 * sub_319F48(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  return a1;
}

void sub_8E06D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_8E06F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  strcpy((char *)v14, "EntityComponentBuilder");
  HIBYTE(v14[2]) = 22;
  __p = 0;
  unsigned int v12 = 0;
  uint64_t v13 = 0;
  unsigned int v6 = sub_374CDC(a2, (uint64_t)v14, (uint64_t *)&__p);
  sub_8E05D8(a1, v6);
  char v7 = (void **)__p;
  if (__p)
  {
    int v8 = v12;
    unint64_t v9 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      unint64_t v9 = __p;
    }
    unsigned int v12 = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v14[2]) < 0) {
    operator delete(v14[0]);
  }
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  return a1;
}

void sub_8E07DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_8E0804(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 8) = 0x27FFFFFFFLL;
  *(void *)a3 = &off_243AF08;
  *(_OWORD *)(a3 + 16) = 0u;
  uint64_t v5 = a3 + 16;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  sub_8E090C((unsigned __int8 *)a1, a2, (uint64_t)__p);
  if (*(char *)(a3 + 39) < 0) {
    operator delete(*(void **)v5);
  }
  *(_OWORD *)uint64_t v5 = *(_OWORD *)__p;
  *(void *)(v5 + 16) = v9;
  HIBYTE(v9) = 0;
  LOBYTE(__p[0]) = 0;
  unsigned int v6 = (void **)(a3 + 40);
  if (*(char *)(a3 + 63) < 0)
  {
    operator delete(*v6);
    int v7 = SHIBYTE(v9);
    *(_OWORD *)unsigned int v6 = v10;
    *(void *)(a3 + 56) = v11;
    HIBYTE(v11) = 0;
    LOBYTE(v10) = 0;
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)unsigned int v6 = v10;
    *(void *)(a3 + 56) = v11;
  }
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 4);
}

void sub_8E08F8(_Unwind_Exception *a1)
{
  sub_8E0B7C(v1);
  _Unwind_Resume(a1);
}

void sub_8E090C(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_8ECABC(a2, (uint64_t)&v22);
  if (v23 == 4)
  {
    unsigned int v6 = (uint64_t *)sub_374EF4(*((uint64_t **)a1 + 1));
    sub_688A04(v6, 5u, *(_DWORD *)(*((void *)a1 + 2) + 968), &v20);
    unint64_t v7 = v22;
    int v8 = *a1;
    uint64_t v9 = v20;
    uint64_t v10 = sub_3757C8(*((void **)a1 + 1));
    uint64_t v11 = sub_3755E4(*((void **)a1 + 1));
    sub_90C330(v7, v8 != 0, v9, v10, v11, *((void *)a1 + 2), &v15);
    sub_65AF0(*(_DWORD *)(*((void *)a1 + 2) + 968), v18);
    __n128 v12 = sub_76504(a3, (long long *)v18, (__n128 *)&v15);
    if (v19 < 0)
    {
      operator delete(v18[0]);
      if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_4:
        uint64_t v13 = v21;
        if (!v21) {
          return;
        }
        goto LABEL_13;
      }
    }
    else if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(v15.__r_.__value_.__l.__data_);
    uint64_t v13 = v21;
    if (!v21) {
      return;
    }
LABEL_13:
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, __n128))v13->__on_zero_shared)(v13, v12);
      std::__shared_weak_count::__release_weak(v13);
    }
    return;
  }
  uint64_t v14 = sub_375500(*((void **)a1 + 1));
  sub_90C818(a2, v14, *((void *)a1 + 2), (uint64_t)&v15);
  sub_76504(a3, &__p, (__n128 *)&v15);
  if (v17 < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
  }
  else if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    return;
  }
  operator delete(v15.__r_.__value_.__l.__data_);
}

void sub_8E0AEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4A0638((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_8E0B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  if (a25 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      sub_14A84((uint64_t)&a26);
      _Unwind_Resume(a1);
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  sub_14A84((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_8E0B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_14A84((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_8E0B7C(uint64_t a1)
{
  *(void *)a1 = &off_243AF08;
  if (*(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    if ((*(char *)(a1 + 39) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 39) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 16));
  return a1;
}

BOOL sub_8E0BF4(uint64_t a1)
{
  return sub_76538(a1 + 16);
}

double sub_8E0BFC()
{
  byte_25D0887 = 1;
  word_25D0870 = 65;
  byte_25D089F = 1;
  word_25D0888 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25D0930 = 0u;
  *(_OWORD *)&qword_25D0940 = 0u;
  dword_25D0950 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25D0930, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25D0930, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25D0930, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25D0930, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25D08B7 = 8;
  strcpy((char *)&qword_25D08A0, "any_mode");
  byte_25D08CF = 7;
  strcpy((char *)&dword_25D08B8, "cycling");
  byte_25D08E7 = 7;
  strcpy((char *)&dword_25D08D0, "driving");
  byte_25D08FF = 7;
  strcpy((char *)&dword_25D08E8, "walking");
  qword_25D0908 = 0;
  qword_25D0910 = 0;
  qword_25D0900 = 0;
  v0 = operator new(9uLL);
  *(void *)v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25D0900 = (uint64_t)v0;
  qword_25D0908 = (uint64_t)(v0 + 9);
  qword_25D0910 = (uint64_t)(v0 + 9);
  qword_25D0918 = 0;
  qword_25D0920 = 0;
  unk_25D0928 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25D0920 = (uint64_t)(v1 + 9);
  unk_25D0928 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25D0918 = (uint64_t)v1;
  return result;
}

void sub_8E0EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25D0940) {
    sub_20AB6C8((void **)qword_25D0940);
  }
  double v37 = (void *)xmmword_25D0930;
  *(void *)&xmmword_25D0930 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_8E0F64(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  uint64_t v11 = 0;
  __n128 v12 = operator new(0x20uLL);
  long long v13 = xmmword_20B91B0;
  strcpy((char *)v12, "HikeGeometryComponentBuilder");
  uint64_t v9 = 0;
  char v10 = 0;
  char v4 = sub_374CDC(a2, (uint64_t)&v12, (uint64_t *)&v9);
  char v15 = 5;
  strcpy((char *)__p, "ttl_s");
  *(_DWORD *)(a1 + 8) = sub_5D2EC(v4, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  int v5 = (void **)v9;
  if (v9)
  {
    unsigned int v6 = v10;
    char v7 = v9;
    if (v10 != v9)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      char v7 = v9;
    }
    char v10 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12);
  }
  return a1;
}

void sub_8E1090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
  {
    operator delete(__p);
    sub_1A668(&a10);
    if ((a18 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    sub_1A668(&a10);
    if ((a18 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(a13);
  _Unwind_Resume(a1);
}

uint64_t sub_8E10F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 8) = 0x27FFFFFFFLL;
  *(void *)a3 = &off_243AF38;
  *(_OWORD *)(a3 + 16) = 0u;
  uint64_t v5 = a3 + 16;
  unsigned int v6 = (void *)(a3 + 340);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(void *)(a3 + 128) = 0;
  *(_DWORD *)(a3 + 136) = -1;
  *(_DWORD *)(a3 + 144) = -1;
  *(void *)(a3 + 152) = 0;
  *(void *)(a3 + 158) = 0;
  *(_DWORD *)(a3 + 168) = 0x7FFFFFFF;
  *(_OWORD *)(a3 + 184) = 0u;
  *(_DWORD *)(a3 + 176) = 0x7FFFFFFF;
  *(void *)(a3 + 180) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)&long long v7 = 0x8000000080000000;
  *(void *)(a3 + 200) = 0x8000000080000000;
  *(unsigned char *)(a3 + 256) = 0;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_DWORD *)(a3 + 260) = 0x7FFFFFFF;
  *(void *)(a3 + 264) = 0x8000000080000000;
  *(_DWORD *)(a3 + 280) = -1;
  *(_OWORD *)(a3 + 288) = xmmword_20E8160;
  *(_DWORD *)(a3 + 304) = -1;
  *(void *)(a3 + 312) = 0;
  *(void *)(a3 + 318) = 0;
  *(_DWORD *)(a3 + 328) = 0x7FFFFFFF;
  *(_OWORD *)(a3 + 344) = 0u;
  *(_DWORD *)(a3 + 336) = 0x7FFFFFFF;
  *unsigned int v6 = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a3 + 360) = 0x8000000080000000;
  *(unsigned char *)(a3 + 416) = 0;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_DWORD *)(a3 + 420) = 0x7FFFFFFF;
  *(void *)(a3 + 424) = 0x8000000080000000;
  *(_DWORD *)(a3 + 440) = -1;
  *(_OWORD *)(a3 + 448) = xmmword_20E8160;
  *(_DWORD *)(a3 + 464) = 0x7FFFFFFF;
  v6[16] = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a3 + 496) = 0;
  *(_OWORD *)(a3 + 480) = 0u;
  *(void *)(a3 + 504) = 0x8000000080000000;
  *(_DWORD *)(a3 + 512) = 0x7FFFFFFF;
  *(void *)(a3 + 520) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a3 + 528) = 0x8000000080000000;
  *(_DWORD *)(a3 + 536) = 0x7FFFFFFF;
  *(_OWORD *)(a3 + 544) = 0u;
  *(_OWORD *)(a3 + 560) = 0u;
  *(_OWORD *)(a3 + 576) = 0u;
  *(_OWORD *)(a3 + 592) = 0u;
  *(_OWORD *)(a3 + 608) = 0u;
  *(_OWORD *)(a3 + 624) = 0u;
  *(_OWORD *)(a3 + 640) = 0u;
  *(_OWORD *)(a3 + 656) = 0u;
  *(_OWORD *)(a3 + 672) = 0u;
  *(_OWORD *)(a3 + 688) = 0u;
  *(_OWORD *)(a3 + 704) = 0u;
  *(_OWORD *)(a3 + 720) = 0u;
  *(_OWORD *)(a3 + 736) = 0u;
  *(_OWORD *)(a3 + 752) = 0u;
  *((void *)&v7 + 1) = 0x8000000080000000;
  *(_OWORD *)(a3 + 768) = 0u;
  *(_OWORD *)(a3 + 784) = v7;
  *(void *)(a3 + 832) = 0;
  *(_OWORD *)(a3 + 800) = v7;
  *(_OWORD *)(a3 + 816) = 0u;
  *(unsigned char *)(a3 + 840) = 1;
  *(_DWORD *)(a3 + 841) = 0;
  *(unsigned char *)(a3 + 845) = 1;
  *(_DWORD *)(a3 + 849) = 0;
  *(_DWORD *)(a3 + 846) = 0;
  *(void *)(a3 + 1064) = 0;
  *(_OWORD *)(a3 + 1048) = 0u;
  *(_OWORD *)(a3 + 1032) = 0u;
  *(_OWORD *)(a3 + 1016) = 0u;
  *(_OWORD *)(a3 + 1000) = 0u;
  *(_OWORD *)(a3 + 984) = 0u;
  *(_OWORD *)(a3 + 968) = 0u;
  *(_OWORD *)(a3 + 952) = 0u;
  *(_OWORD *)(a3 + 936) = 0u;
  *(_OWORD *)(a3 + 920) = 0u;
  *(_OWORD *)(a3 + 904) = 0u;
  *(_OWORD *)(a3 + 888) = 0u;
  *(_OWORD *)(a3 + 872) = 0u;
  uint64_t v8 = a2 + 576;
  *(_OWORD *)(a3 + 856) = 0u;
  uint64_t result = sub_470B5C((void *)(a2 + 576));
  if (result) {
    uint64_t result = sub_471250(v5, v8);
  }
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 8);
  return result;
}

void sub_8E12E4(_Unwind_Exception *a1)
{
  void *v1 = v2;
  sub_3AFFFC(v3);
  _Unwind_Resume(a1);
}

BOOL sub_8E12FC(uint64_t a1)
{
  return sub_470B5C((void *)(a1 + 16));
}

double sub_8E1304()
{
  byte_25D096F = 1;
  word_25D0958 = 65;
  byte_25D0987 = 1;
  word_25D0970 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25D0A18 = 0u;
  *(_OWORD *)&qword_25D0A28 = 0u;
  dword_25D0A38 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25D0A18, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25D0A18, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25D0A18, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25D0A18, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25D099F = 8;
  strcpy((char *)&qword_25D0988, "any_mode");
  byte_25D09B7 = 7;
  strcpy((char *)&dword_25D09A0, "cycling");
  byte_25D09CF = 7;
  strcpy((char *)&dword_25D09B8, "driving");
  byte_25D09E7 = 7;
  strcpy((char *)&dword_25D09D0, "walking");
  qword_25D09F0 = 0;
  qword_25D09F8 = 0;
  qword_25D09E8 = 0;
  v0 = operator new(9uLL);
  *(void *)v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25D09E8 = (uint64_t)v0;
  qword_25D09F0 = (uint64_t)(v0 + 9);
  qword_25D09F8 = (uint64_t)(v0 + 9);
  qword_25D0A00 = 0;
  qword_25D0A08 = 0;
  unk_25D0A10 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25D0A08 = (uint64_t)(v1 + 9);
  unk_25D0A10 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25D0A00 = (uint64_t)v1;
  return result;
}

void sub_8E15CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25D0A28) {
    sub_20AB70C((void **)qword_25D0A28);
  }
  double v37 = (void *)xmmword_25D0A18;
  *(void *)&xmmword_25D0A18 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t *sub_8E166C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a2;
  a1[1] = a3;
  uint64_t v12 = 0;
  char v13 = operator new(0x20uLL);
  long long v14 = xmmword_20B91A0;
  strcpy((char *)v13, "HikeSummaryComponentBuilder");
  long long __p = 0;
  int v11 = 0;
  int v5 = sub_374CDC(a2, (uint64_t)&v13, (uint64_t *)&__p);
  sub_8E1794((uint64_t)(a1 + 2), v5);
  unsigned int v6 = (void **)__p;
  if (__p)
  {
    char v7 = v11;
    int v8 = __p;
    if (v11 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      int v8 = __p;
    }
    int v11 = v6;
    operator delete(v8);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(v13);
  }
  return a1;
}

void sub_8E176C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_8E1794(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 5;
  strcpy((char *)__p, "ttl_s");
  *(_DWORD *)a1 = sub_5D2EC(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "prefer_curated_length");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 4) = v4;
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "prefer_curated_duration");
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 5) = v5;
  return a1;
}

void sub_8E18A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_8E18CC(void **a1@<X0>, uint64_t a2@<X1>, int64x2_t *a3@<X8>)
{
  a3->i64[1] = 0x27FFFFFFFLL;
  a3->i64[0] = (uint64_t)&off_243AF68;
  a3[1].i64[0] = 0x7FFFFFFFFFFFFFFFLL;
  a3[1].i32[2] = 0x7FFFFFFF;
  a3[2] = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  sub_5F3B34((uint64_t)a3[3].i64);
  a3->i32[2] = *((_DWORD *)a1 + 4);
  if (*(_DWORD *)(a2 + 376) != 4
    || !*(_DWORD *)(a2 + 8)
    || *(_DWORD *)(a2 + 12) == -1
    || !sub_470B5C((void *)(a2 + 576)))
  {
    return;
  }
  sub_5C29CC(v24, *a1, (uint64_t)a1[1]);
  a3[2].i64[0] = sub_5C3D64((uint64_t)v24, *(void *)(a2 + 8), (void *)(a2 + 576));
  a3[2].i64[1] = v6;
  if (!*((unsigned char *)a1 + 20)
    || (unint64_t v7 = *(void *)(a2 + 8),
        uint64_t v8 = sub_377754(*a1),
        uint64_t v9 = (int *)sub_5C4BD0(v8, v7, 0),
        char v10 = (unsigned __int16 *)((char *)v9 - *v9),
        *v10 < 0xDu)
    || (uint64_t v11 = v10[6]) == 0
    || (uint64_t v12 = *(unsigned int *)((char *)v9 + v11), v12 == -1))
  {
    uint64_t v12 = *(void *)(a2 + 1080);
  }
  a3[1].i64[0] = v12;
  if (!*((unsigned char *)a1 + 21)) {
    goto LABEL_20;
  }
  unint64_t v13 = *(void *)(a2 + 8);
  uint64_t v14 = sub_377754(*a1);
  char v15 = (int *)sub_5C4BD0(v14, v13, 0);
  uint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 < 0x17u)
  {
    char v17 = 0;
    int v18 = (_WORD *)(&loc_1120530 + 1);
    if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 7u) {
      goto LABEL_20;
    }
  }
  else
  {
    char v17 = (int *)v16[11];
    if (v17) {
      char v17 = (int *)((char *)v17 + (void)v15 + *(unsigned int *)((char *)v17 + (void)v15));
    }
    int v18 = (unsigned __int16 *)((char *)v17 - *v17);
    if (*v18 < 7u) {
      goto LABEL_20;
    }
  }
  uint64_t v19 = v18[3];
  if (v19)
  {
    int v20 = *(int *)((char *)v17 + v19);
    if (v20 != -1)
    {
      int v21 = 10 * v20;
      goto LABEL_21;
    }
  }
LABEL_20:
  int v21 = sub_471160((unsigned int *)(a2 + 576), 0);
LABEL_21:
  a3[1].i32[2] = v21;
  sub_8E1B7C(a1, *(void *)(a2 + 8), (uint64_t)v23);
  sub_4D90B4((uint64_t)a3[3].i64, (uint64_t)v23);
  sub_4D4B58((uint64_t)v23);
  unint64_t v22 = v25;
  if (v25)
  {
    if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_8E1B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_4AF400((uint64_t)&a29);
  *uint64_t v29 = v30;
  sub_4D4B58(v31);
  _Unwind_Resume(a1);
}

void sub_8E1B7C(uint64_t **a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_377754(*a1);
  unint64_t v7 = (int *)sub_5C4BD0(v6, a2, 0);
  uint64_t v8 = (unsigned __int16 *)((char *)v7 - *v7);
  if (*v8 >= 7u && (uint64_t v9 = v8[3]) != 0)
  {
    switch(*((unsigned char *)v7 + v9))
    {
      case 0:
        goto LABEL_4;
      case 1:
        v26[0] = operator new(0x20uLL);
        *(_OWORD *)&v26[1] = xmmword_20B91C0;
        strcpy((char *)v26[0], "Hike_Type_Point_To_Point");
        goto LABEL_26;
      case 2:
        uint64_t v21 = 22;
        HIBYTE(v26[2]) = 22;
        qmemcpy(v26, "Hike_Type_Out_And_Back", 22);
        goto LABEL_25;
      case 3:
        uint64_t v21 = 14;
        HIBYTE(v26[2]) = 14;
        qmemcpy(v26, "Hike_Type_Loop", 14);
LABEL_25:
        *((unsigned char *)v26 + v21) = 0;
LABEL_26:
        unint64_t v22 = (uint64_t *)sub_374EF4(*a1);
        sub_688A04(v22, 6u, *((_DWORD *)a1[1] + 242), (uint64_t *)&__p);
        int v23 = sub_8D7730((uint64_t)__p, (uint64_t)v26);
        if (*((char *)v23 + 23) < 0)
        {
          sub_4200(__dst, (void *)*v23, v23[1]);
        }
        else
        {
          long long v24 = *(_OWORD *)v23;
          uint64_t v31 = v23[2];
          *(_OWORD *)__dst = v24;
        }
        sub_5F3D48(a3, (uint64_t)__dst);
        if (SHIBYTE(v31) < 0) {
          operator delete(__dst[0]);
        }
        unint64_t v25 = v28;
        if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
        if (SHIBYTE(v26[2]) < 0) {
          operator delete(v26[0]);
        }
        break;
      default:
        goto LABEL_20;
    }
  }
  else
  {
LABEL_4:
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)__dst);
      sub_188FC78(__dst, (uint64_t)"Hiking tour (", 13);
      char v10 = (int *)sub_5C4BD0(v6, a2, 0);
      uint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
      if (*v11 >= 5u && (uint64_t v12 = v11[2]) != 0) {
        uint64_t v13 = *(void *)((char *)v10 + v12);
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = sub_4461D4(v6 + 16, 1u, 0);
      char v15 = &v14[-*(int *)v14];
      if (*(unsigned __int16 *)v15 >= 5u)
      {
        uint64_t v16 = *((unsigned __int16 *)v15 + 2);
        if (v16)
        {
          char v17 = &v14[v16 + *(unsigned int *)&v14[v16]];
          int v18 = &v17[-*(int *)v17];
          if (*(unsigned __int16 *)v18 >= 5u)
          {
            uint64_t v19 = *((unsigned __int16 *)v18 + 2);
            if (v19)
            {
              if (v17[v19]) {
                nullsub_1(v13);
              }
            }
          }
        }
      }
      int v20 = (void *)std::ostream::operator<<();
      sub_188FC78(v20, (uint64_t)") has a hiking tour type value of UNKNOWN", 41);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      if (v29 < 0) {
        operator delete(__p);
      }
      if (v33 < 0) {
        operator delete(v32);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
LABEL_20:
    sub_5F3B34(a3);
  }
}

void sub_8E1F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  sub_14A84((uint64_t)&a15);
  if (a14 < 0)
  {
    operator delete(a9);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_8E2010(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0x7FFFFFFFFFFFFFFFLL;
}

double sub_8E2024()
{
  byte_25D0A57 = 1;
  word_25D0A40 = 65;
  byte_25D0A6F = 1;
  word_25D0A58 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25D0B00 = 0u;
  *(_OWORD *)&qword_25D0B10 = 0u;
  dword_25D0B20 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25D0B00, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25D0B00, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25D0B00, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25D0B00, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25D0A87 = 8;
  strcpy((char *)&qword_25D0A70, "any_mode");
  byte_25D0A9F = 7;
  strcpy((char *)&dword_25D0A88, "cycling");
  byte_25D0AB7 = 7;
  strcpy((char *)&dword_25D0AA0, "driving");
  byte_25D0ACF = 7;
  strcpy((char *)&dword_25D0AB8, "walking");
  qword_25D0AD8 = 0;
  qword_25D0AE0 = 0;
  qword_25D0AD0 = 0;
  v0 = operator new(9uLL);
  *(void *)v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25D0AD0 = (uint64_t)v0;
  qword_25D0AD8 = (uint64_t)(v0 + 9);
  qword_25D0AE0 = (uint64_t)(v0 + 9);
  qword_25D0AE8 = 0;
  qword_25D0AF0 = 0;
  unk_25D0AF8 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25D0AF0 = (uint64_t)(v1 + 9);
  unk_25D0AF8 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25D0AE8 = (uint64_t)v1;
  return result;
}

void sub_8E22EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25D0B10) {
    sub_20AB750((void **)qword_25D0B10);
  }
  double v37 = (void *)xmmword_25D0B00;
  *(void *)&xmmword_25D0B00 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_8E238C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)a2 != v5)
  {
    char v7 = (uint64_t *)result;
    uint64_t v8 = a2 + 32;
    uint64_t v20 = a2 + 1568;
    while (1)
    {
      LODWORD(v25) = 0;
      sub_8E3ABC((uint64_t)v26);
      int v10 = *(_DWORD *)(v4 + 376);
      if (!v10) {
        break;
      }
      int v11 = (uint64_t *)v4;
      if (v10 == 4) {
        goto LABEL_11;
      }
      if (v10 == 3)
      {
        uint64_t v50 = *(void *)(v4 + 8);
        int v12 = *(_DWORD *)(v4 + 384);
        if (!v12) {
          goto LABEL_14;
        }
      }
      else
      {
        uint64_t v50 = -1;
        int v12 = *(_DWORD *)(v4 + 384);
        if (!v12)
        {
LABEL_14:
          if (sub_8ECA0C(v4))
          {
            if (*(unsigned char *)(a2 + 1586))
            {
              sub_8EE3A0((uint64_t)&v51, (void *)*v7, v8);
              sub_8EE3A4(&v51, (_DWORD *)v4, (uint64_t)&v21);
              uint64_t v37 = v22;
              uint64_t v13 = __p;
              if ((void)__p)
              {
                uint64_t v14 = *((void *)&__p + 1);
                char v15 = (void *)__p;
                if (*((void *)&__p + 1) != (void)__p)
                {
                  do
                  {
                    if (*(char *)(v14 - 1) < 0) {
                      operator delete(*(void **)(v14 - 24));
                    }
                    v14 -= 24;
                  }
                  while (v14 != v13);
                  char v15 = (void *)__p;
                }
                *((void *)&__p + 1) = v13;
                operator delete(v15);
              }
              long long __p = v23;
              uint64_t v39 = v24;
            }
            if (*(unsigned char *)(a2 + 1595))
            {
              sub_8DFBC4((uint64_t)&v21, *v7);
              sub_8DFBC8((uint64_t)&v21, v4, (uint64_t)&v51);
              v26[1] = v51.i64[1];
              long long v27 = v52;
              uint64_t v28 = v53;
            }
            sub_8E29A0(v7, a2, v4, (uint64_t)&v25);
            if (*(unsigned char *)(a2 + 1599))
            {
              sub_8E10F4((uint64_t)&v21, *v7);
              sub_8E10F8((uint64_t)&v21, v4, (uint64_t)&v51);
              uint64_t v29 = v51.i64[1];
              sub_8E5980((uint64_t)v30, (uint64_t)&v52);
              v51.i64[0] = (uint64_t)&off_243AF38;
              sub_3AFFFC((uint64_t)&v52);
            }
            if (*(unsigned char *)(a2 + 1598))
            {
              sub_8E1790((uint64_t *)&v21, *v7, v8);
              sub_8E18CC(&v21, v4, &v51);
              v30[133] = v51.i64[1];
              long long v31 = v52;
              long long v32 = v53;
              sub_4D90B4((uint64_t)v33, (uint64_t)v54);
              v51.i64[0] = (uint64_t)&off_243AF68;
              sub_4D4B58((uint64_t)v54);
            }
            if (*(unsigned char *)(a2 + 1587))
            {
              sub_8F04D8((uint64_t)&v51, (void *)*v7, *(_DWORD *)(a2 + 24), v20, *(unsigned char *)(a2 + 1592));
              sub_8F04E0((uint64_t)&v51, v4, &v21);
              uint64_t v43 = v22;
              uint64_t v16 = v44;
              if ((void)v44)
              {
                uint64_t v17 = *((void *)&v44 + 1);
                int v18 = (void *)v44;
                if (*((void *)&v44 + 1) != (void)v44)
                {
                  do
                    uint64_t v17 = sub_361164(v17 - 456);
                  while (v17 != v16);
                  int v18 = (void *)v44;
                }
                *((void *)&v44 + 1) = v16;
                operator delete(v18);
              }
              long long v44 = v23;
              uint64_t v45 = v24;
            }
            sub_8E2AE0((uint64_t **)v7, a2, v4, (uint64_t)&v25);
            if (*(unsigned char *)(a2 + 1585))
            {
              sub_8F82D4((uint64_t)&v21, *v7, v8);
              sub_8F82D8((unsigned __int8 *)&v21, v4, (uint64_t)&v51);
              uint64_t v46 = v51.i64[1];
              sub_8E5544((uint64_t)v47, (uint64_t)&v52);
              sub_8E56D8((uint64_t)&v51);
            }
            sub_8E2BC0((uint64_t **)v7, a2, (void *)v4, &v25);
            if (*(unsigned char *)(a2 + 1597))
            {
              sub_8ECD0C((uint64_t)&v21, *v7, v8);
              sub_8ECD10((uint64_t)&v21, v4, (uint64_t)&v51);
              v33[21] = v51.i64[1];
              v33[22] = v52;
              int v34 = DWORD2(v52);
              if (SHIBYTE(v36) < 0) {
                operator delete((void *)v35);
              }
              long long v35 = v53;
              uint64_t v36 = v54[0];
            }
            sub_8E2DC8((uint64_t **)v7, a2, v4, (uint64_t)&v25);
            if (*(unsigned char *)(a2 + 1593))
            {
              sub_91A910((uint64_t)&v21, (void *)*v7);
              sub_91A914((uint64_t)&v21, v4, (uint64_t)&v51);
              uint64_t v40 = v51.i64[1];
              if ((void)v41)
              {
                *((void *)&v41 + 1) = v41;
                operator delete((void *)v41);
              }
              long long v41 = v52;
              uint64_t v42 = v53;
            }
            sub_8E2FA8((void **)v7, a2, v4, &v25);
            if (*(unsigned char *)(a2 + 1591))
            {
              sub_91FF04(&v21, (void *)*v7);
              sub_91FF08((uint64_t)&v21, v4, &v51);
              v47[48] = v51.i64[1];
              if ((void)v48)
              {
                *((void *)&v48 + 1) = v48;
                operator delete((void *)v48);
              }
              long long v48 = v52;
              uint64_t v49 = v53;
            }
            sub_8E30A0(v7, a2, v4, &v25);
            sub_8E31AC(v7, a2, v4, (uint64_t)&v25);
          }
          else
          {
            LODWORD(v25) = 42;
          }
          goto LABEL_54;
        }
      }
LABEL_12:
      LODWORD(v25) = v12;
LABEL_54:
      unint64_t v19 = *(void *)(a3 + 8);
      if (v19 >= *(void *)(a3 + 16))
      {
        uint64_t v9 = sub_8E6244((void **)a3, (uint64_t)&v25);
      }
      else
      {
        *(_DWORD *)unint64_t v19 = v25;
        sub_8E6430(v19 + 8, (uint64_t)v26);
        *(void *)(v19 + 2440) = v50;
        uint64_t v9 = (char *)(v19 + 2448);
        *(void *)(a3 + 8) = v19 + 2448;
      }
      *(void *)(a3 + 8) = v9;
      double result = sub_8E42D4((uint64_t)v26);
      v4 += 1632;
      if (v4 == v5) {
        return result;
      }
    }
    int v11 = (uint64_t *)(v4 + 48);
LABEL_11:
    uint64_t v50 = *v11;
    int v12 = *(_DWORD *)(v4 + 384);
    if (!v12) {
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  return result;
}

void sub_8E2950(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v3;
  sub_8E42D4(v2);
  sub_8E3354((void **)v1);
  _Unwind_Resume(a1);
}

void sub_8E2970(_Unwind_Exception *a1)
{
  sub_8E3354(v1);
  _Unwind_Resume(a1);
}

void sub_8E2984(_Unwind_Exception *a1)
{
  sub_8E42D4(v2);
  sub_8E3354(v1);
  _Unwind_Resume(a1);
}

void sub_8E29A0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a2 + 1596))
  {
    uint64_t v6 = sub_8E0800((uint64_t)v15, *a1, a2 + 32);
    sub_8E0804(v6, a3, (uint64_t)v10);
    *(void *)(a4 + 56) = v10[1];
    char v7 = (void **)(a4 + 64);
    if (*(char *)(a4 + 87) < 0) {
      operator delete(*v7);
    }
    *(_OWORD *)char v7 = __p;
    *(void *)(a4 + 80) = v12;
    HIBYTE(v12) = 0;
    LOBYTE(__p) = 0;
    uint64_t v8 = (void **)(a4 + 88);
    if (*(char *)(a4 + 111) < 0)
    {
      operator delete(*v8);
      int v9 = SHIBYTE(v12);
      *(_OWORD *)uint64_t v8 = v13;
      *(void *)(a4 + 104) = v14;
      HIBYTE(v14) = 0;
      LOBYTE(v13) = 0;
      v10[0] = &off_243AF08;
      if (v9 < 0) {
        operator delete((void *)__p);
      }
    }
    else
    {
      *(_OWORD *)uint64_t v8 = v13;
      *(void *)(a4 + 104) = v14;
      HIBYTE(v14) = 0;
      LOBYTE(v13) = 0;
      v10[0] = &off_243AF08;
    }
  }
}

void sub_8E2AE0(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a2 + 1584))
  {
    uint64_t v6 = sub_8F0F28(v9, *a1, a2 + 32);
    sub_8F0F2C((uint64_t)v6, a3, (uint64_t)v8);
    sub_8E36F4(a4 + 1568, (uint64_t)v8);
    sub_8E52AC((uint64_t)v8);
    char v7 = v10;
    if (v10)
    {
      if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_8E2BAC(_Unwind_Exception *a1)
{
  sub_8E39A0(v1 - 88);
  _Unwind_Resume(a1);
}

void sub_8E2BC0(uint64_t **a1, uint64_t a2, void *a3, void *a4)
{
  if (*(unsigned char *)(a2 + 1588))
  {
    sub_8FFEB8((uint64_t)v22, *a1, a2 + 32, *(_DWORD *)(a2 + 24), a2 + 1568);
    sub_8FFEC0((uint64_t)v22, a3, (uint64_t)v16);
    a4[245] = v16[1];
    uint64_t v6 = a4[246];
    if (v6)
    {
      char v7 = (void **)(a4 + 246);
      uint64_t v8 = a4[247];
      int v9 = (void *)a4[246];
      if (v8 != v6)
      {
        do
          uint64_t v8 = sub_8E41A0(v8 - 160);
        while (v8 != v6);
        int v9 = *v7;
      }
      a4[247] = v6;
      operator delete(v9);
      *char v7 = 0;
      a4[247] = 0;
      a4[248] = 0;
    }
    *((_OWORD *)a4 + 123) = *(_OWORD *)v17;
    a4[248] = v18;
    v17[1] = 0;
    uint64_t v18 = 0;
    v17[0] = 0;
    int v10 = (void **)(a4 + 249);
    uint64_t v11 = a4[249];
    if (v11)
    {
      sub_8E40F8((uint64_t)(a4 + 249), v11);
      operator delete(*v10);
      std::__shared_weak_count *v10 = 0;
      a4[250] = 0;
      a4[251] = 0;
    }
    *(_OWORD *)int v10 = *(_OWORD *)__p;
    a4[251] = v20;
    __p[1] = 0;
    uint64_t v20 = 0;
    __p[0] = 0;
    sub_62BDC((uint64_t)(a4 + 252), v21);
    v16[0] = &off_243B0D0;
    sub_5450C((uint64_t)v21);
    if (__p[0])
    {
      sub_8E40F8((uint64_t)__p, (uint64_t)__p[0]);
      operator delete(__p[0]);
    }
    uint64_t v12 = v17[0];
    if (v17[0])
    {
      long long v13 = v17[1];
      uint64_t v14 = v17[0];
      if (v17[1] != v17[0])
      {
        do
          long long v13 = (void *)sub_8E41A0((uint64_t)v13 - 160);
        while (v13 != v12);
        uint64_t v14 = v17[0];
      }
      v17[1] = v12;
      operator delete(v14);
    }
    char v15 = v23;
    if (v23)
    {
      if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
}

void sub_8E2DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_8E34CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_8E2DC8(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a2 + 1592))
  {
    sub_905080(v21, *a1, a2 + 32, a2 + 1568);
    sub_905084((uint64_t)v21, a3, (uint64_t)v15);
    *(void *)(a4 + 2064) = v15[1];
    uint64_t v6 = (void **)(a4 + 2072);
    uint64_t v7 = *(void *)(a4 + 2072);
    if (v7)
    {
      uint64_t v8 = *(void *)(a4 + 2080);
      int v9 = *(void **)(a4 + 2072);
      if (v8 != v7)
      {
        do
          uint64_t v8 = sub_8E49DC(v8 - 312);
        while (v8 != v7);
        int v9 = *v6;
      }
      *(void *)(a4 + 2080) = v7;
      operator delete(v9);
      *uint64_t v6 = 0;
      *(void *)(a4 + 2080) = 0;
      *(void *)(a4 + 2088) = 0;
    }
    *(_OWORD *)uint64_t v6 = *(_OWORD *)__p;
    *(void *)(a4 + 2088) = v17;
    __p[1] = 0;
    uint64_t v17 = 0;
    __p[0] = 0;
    uint64_t v10 = *(void *)(a4 + 2096);
    if (v10)
    {
      sub_8E4C04(a4 + 2096, v10);
      operator delete(*(void **)(a4 + 2096));
      *(void *)(a4 + 2096) = 0;
      *(void *)(a4 + 2104) = 0;
      *(void *)(a4 + 2112) = 0;
    }
    *(_OWORD *)(a4 + 2096) = v18;
    *(void *)(a4 + 2112) = v19;
    uint64_t v19 = 0;
    long long v18 = 0uLL;
    *(_OWORD *)(a4 + 2120) = v20;
    v15[0] = &off_243B100;
    uint64_t v11 = __p[0];
    if (__p[0])
    {
      uint64_t v12 = __p[1];
      long long v13 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v12 = (void *)sub_8E49DC((uint64_t)v12 - 312);
        while (v12 != v11);
        long long v13 = __p[0];
      }
      __p[1] = v11;
      operator delete(v13);
    }
    uint64_t v14 = v22;
    if (v22)
    {
      if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
}

void sub_8E2F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_8E34CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_8E2FA8(void **a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (*(unsigned char *)(a2 + 1590))
  {
    sub_91BB3C(v13, *a1, a2 + 32);
    sub_91BB40((uint64_t)v13, a3, v10);
    a4[268] = v10[1];
    uint64_t v6 = (void **)(a4 + 269);
    uint64_t v7 = a4[269];
    if (v7)
    {
      uint64_t v8 = a4[270];
      int v9 = (void *)a4[269];
      if (v8 != v7)
      {
        do
        {
          v8 -= 152;
          sub_8E4758((uint64_t)(a4 + 271), v8);
        }
        while (v8 != v7);
        int v9 = *v6;
      }
      a4[270] = v7;
      operator delete(v9);
      *uint64_t v6 = 0;
      a4[270] = 0;
      a4[271] = 0;
    }
    *(_OWORD *)uint64_t v6 = v11;
    a4[271] = v12;
    if (__p)
    {
      char v15 = __p;
      operator delete(__p);
    }
  }
}

void sub_8E3084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_8E30A0(uint64_t *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (*(unsigned char *)(a2 + 1589))
  {
    sub_903EEC((uint64_t)v18, *result, a2 + 32);
    sub_903EF0((uint64_t)v18, a3, v14);
    a4[278] = v14[1];
    uint64_t v6 = (void **)(a4 + 279);
    uint64_t v7 = a4[279];
    if (v7)
    {
      uint64_t v8 = a4[280];
      int v9 = (void *)a4[279];
      if (v8 != v7)
      {
        uint64_t v10 = v8 - 568;
        do
        {
          sub_8E57D0((void *)(v10 + 24));
          uint64_t v12 = *(void **)v10;
          if (*(void *)v10)
          {
            *(void *)(v10 + 8) = v12;
            operator delete(v12);
          }
          BOOL v11 = v10 == v7;
          v10 -= 568;
        }
        while (!v11);
        int v9 = *v6;
      }
      a4[280] = v7;
      operator delete(v9);
      *uint64_t v6 = 0;
      a4[280] = 0;
      a4[281] = 0;
    }
    *(_OWORD *)uint64_t v6 = v15;
    uint64_t v13 = v17;
    a4[281] = v16;
    a4[282] = v13;
    return (uint64_t *)sub_8E5894((uint64_t)&v19);
  }
  return result;
}

void sub_8E3198(_Unwind_Exception *a1)
{
  sub_8E5894(v1 + 40);
  _Unwind_Resume(a1);
}

void sub_8E31AC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a2 + 1594))
  {
    sub_2F99CC(v10, *a1, a2 + 32);
    sub_921220(v10, a3, (uint64_t)&v11);
    *(_OWORD *)(a4 + 2272) = v12;
    *(void *)(a4 + 2288) = v13;
    *(_DWORD *)(a4 + 2296) = v14;
    *(_OWORD *)(a4 + 2300) = v15;
    *(void *)(a4 + 2316) = v16;
    sub_4F377C(a4 + 2328, (uint64_t)&v17);
    *(void *)(a4 + 2368) = v22;
    uint64_t v6 = (void **)(a4 + 2376);
    if (*(char *)(a4 + 2399) < 0) {
      operator delete(*v6);
    }
    BOOL v7 = 0;
    *(_OWORD *)uint64_t v6 = *(_OWORD *)__p;
    *(void *)(a4 + 2392) = v24;
    HIBYTE(v24) = 0;
    LOBYTE(__p[0]) = 0;
    *(unsigned char *)(a4 + 2400) = v25;
    uint64_t v8 = (void **)(a4 + 2408);
    if (*(char *)(a4 + 2431) < 0)
    {
      operator delete(*v8);
      BOOL v7 = v24 < 0;
    }
    *(_OWORD *)uint64_t v8 = v26;
    *(void *)(a4 + 2424) = v27;
    HIBYTE(v27) = 0;
    LOBYTE(v26) = 0;
    *(unsigned char *)(a4 + 2432) = v28;
    BOOL v11 = &off_243B1C0;
    if (v7) {
      operator delete(__p[0]);
    }
    if (v21 == 1)
    {
      int v9 = v18;
      if (!v18) {
        return;
      }
      uint64_t v19 = v18;
      goto LABEL_14;
    }
    if (!v21 && v20 < 0)
    {
      int v9 = v18;
LABEL_14:
      operator delete(v9);
    }
  }
}

void **sub_8E3354(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = v3 - 2448;
        sub_8E42D4((uint64_t)(v3 - 2440));
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void *sub_8E33BC(void *a1)
{
  *a1 = &off_243B040;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    uint64_t v3 = a1[3];
    uint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_361164(v3 - 456);
      while ((void *)v3 != v2);
      uint64_t v4 = (void *)a1[2];
    }
    a1[3] = v2;
    operator delete(v4);
  }
  return a1;
}

void *sub_8E3434(void *a1)
{
  *a1 = &off_243B0D0;
  sub_5450C((uint64_t)(a1 + 8));
  uint64_t v2 = a1[5];
  if (v2)
  {
    sub_8E40F8((uint64_t)(a1 + 5), v2);
    operator delete((void *)a1[5]);
  }
  uint64_t v3 = a1[2];
  if (v3)
  {
    uint64_t v4 = a1[3];
    uint64_t v5 = (void *)a1[2];
    if (v4 != v3)
    {
      do
        uint64_t v4 = sub_8E41A0(v4 - 160);
      while (v4 != v3);
      uint64_t v5 = (void *)a1[2];
    }
    a1[3] = v3;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_8E34CC(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 72);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void *sub_8E3548(void *a1)
{
  *a1 = &off_243B130;
  uint64_t v2 = a1[2];
  if (v2)
  {
    uint64_t v3 = a1[3];
    uint64_t v4 = (void *)a1[2];
    if (v3 != v2)
    {
      do
      {
        v3 -= 152;
        sub_8E4758((uint64_t)(a1 + 4), v3);
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[2];
    }
    a1[3] = v2;
    operator delete(v4);
  }
  return a1;
}

void *sub_8E35D0(void *a1)
{
  *a1 = &off_243B100;
  uint64_t v3 = (void **)(a1 + 5);
  uint64_t v2 = a1[5];
  if (v2)
  {
    sub_8E4C04((uint64_t)(a1 + 5), v2);
    operator delete(*v3);
  }
  uint64_t v4 = a1[2];
  if (v4)
  {
    uint64_t v5 = a1[3];
    uint64_t v6 = (void *)a1[2];
    if (v5 != v4)
    {
      do
        uint64_t v5 = sub_8E49DC(v5 - 312);
      while (v5 != v4);
      uint64_t v6 = (void *)a1[2];
    }
    a1[3] = v4;
    operator delete(v6);
  }
  return a1;
}

void *sub_8E3664(void *a1)
{
  *a1 = &off_243AFE0;
  uint64_t v2 = a1[2];
  if (v2)
  {
    uint64_t v3 = a1[3];
    uint64_t v4 = (void *)a1[2];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[2];
    }
    a1[3] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_8E36F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 16;
  uint64_t v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v6 = (void *)(a2 + 16);
  if (v5)
  {
    uint64_t v7 = *(void *)(a1 + 24);
    uint64_t v8 = v5;
    if ((void *)v7 != v5)
    {
      do
        uint64_t v7 = sub_8E4D50(v7 - 696);
      while ((void *)v7 != v5);
      uint64_t v8 = *(void **)v4;
    }
    *(void *)(a1 + 24) = v5;
    operator delete(v8);
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    *(void *)(v4 + 16) = 0;
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *uint64_t v6 = 0;
  v6[1] = 0;
  v6[2] = 0;
  int v9 = (void **)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 40);
  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + 48);
    long long v12 = *(void **)(a1 + 40);
    if (v11 != v10)
    {
      do
        uint64_t v11 = sub_8E5070(v11 - 208);
      while (v11 != v10);
      long long v12 = *v9;
    }
    *(void *)(a1 + 48) = v10;
    operator delete(v12);
    *int v9 = 0;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  uint64_t v13 = (void **)(a1 + 64);
  uint64_t v14 = *(void *)(a1 + 64);
  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 72);
    uint64_t v16 = *(void **)(a1 + 64);
    if (v15 != v14)
    {
      do
      {
        v15 -= 152;
        sub_8E4758(a1 + 80, v15);
      }
      while (v15 != v14);
      uint64_t v16 = *v13;
    }
    *(void *)(a1 + 72) = v14;
    operator delete(v16);
    *uint64_t v13 = 0;
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
  }
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  uint64_t v17 = (void **)(a1 + 88);
  uint64_t v18 = *(void *)(a1 + 88);
  if (v18)
  {
    uint64_t v19 = *(void *)(a1 + 96);
    char v20 = *(void **)(a1 + 88);
    if (v19 != v18)
    {
      do
      {
        v19 -= 144;
        sub_8E48A4(a1 + 104, v19);
      }
      while (v19 != v18);
      char v20 = *v17;
    }
    *(void *)(a1 + 96) = v18;
    operator delete(v20);
    char *v17 = 0;
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
  }
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  uint64_t v22 = (void **)(a1 + 112);
  uint64_t v21 = *(void *)(a1 + 112);
  if (v21)
  {
    sub_8E5184(a1 + 112, v21);
    operator delete(*v22);
    *uint64_t v22 = 0;
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  long long v23 = (void **)(a1 + 136);
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*v23);
  }
  long long v24 = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_OWORD *)long long v23 = v24;
  *(unsigned char *)(a2 + 159) = 0;
  *(unsigned char *)(a2 + 136) = 0;
  char v25 = (void **)(a1 + 160);
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*v25);
  }
  long long v26 = *(_OWORD *)(a2 + 160);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(_OWORD *)char v25 = v26;
  *(unsigned char *)(a2 + 183) = 0;
  *(unsigned char *)(a2 + 160) = 0;
  uint64_t v27 = (void **)(a1 + 184);
  if (*(char *)(a1 + 207) < 0) {
    operator delete(*v27);
  }
  long long v28 = *(_OWORD *)(a2 + 184);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(_OWORD *)uint64_t v27 = v28;
  *(unsigned char *)(a2 + 207) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  return a1;
}

uint64_t sub_8E39A0(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 48);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void *sub_8E3A1C(void *a1)
{
  *a1 = &off_243B190;
  uint64_t v2 = a1[2];
  if (v2)
  {
    uint64_t v3 = a1[3];
    uint64_t v4 = (void *)a1[2];
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 568;
      do
      {
        sub_8E57D0((void *)(v5 + 24));
        uint64_t v7 = *(void **)v5;
        if (*(void *)v5)
        {
          *(void *)(v5 + 8) = v7;
          operator delete(v7);
        }
        BOOL v6 = v5 == v2;
        v5 -= 568;
      }
      while (!v6);
      uint64_t v4 = (void *)a1[2];
    }
    a1[3] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_8E3ABC(uint64_t a1)
{
  *(void *)a1 = &off_243AEC8;
  *(_OWORD *)(a1 + 8) = xmmword_20E9E20;
  *(_OWORD *)(a1 + 24) = xmmword_20B8EA0;
  *(void *)(a1 + 48) = 0x27FFFFFFFLL;
  *(void *)(a1 + 40) = &off_243AF08;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 112) = 0x27FFFFFFFLL;
  *(void *)(a1 + 104) = &off_243AF38;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(void *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 240) = -1;
  *(_DWORD *)(a1 + 248) = -1;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 262) = 0;
  *(_DWORD *)(a1 + 272) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_DWORD *)(a1 + 280) = 0x7FFFFFFF;
  *(void *)(a1 + 284) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 304) = 0x8000000080000000;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(unsigned char *)(a1 + 360) = 0;
  *(_DWORD *)(a1 + 364) = 0x7FFFFFFF;
  *(void *)(a1 + 368) = 0x8000000080000000;
  *(_DWORD *)(a1 + 384) = -1;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 408) = -1;
  *(void *)(a1 + 422) = 0;
  *(void *)(a1 + 416) = 0;
  *(_DWORD *)(a1 + 432) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_DWORD *)(a1 + 440) = 0x7FFFFFFF;
  *(void *)(a1 + 444) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 464) = 0x8000000080000000;
  *(unsigned char *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_DWORD *)(a1 + 524) = 0x7FFFFFFF;
  *(void *)(a1 + 528) = 0x8000000080000000;
  *(_DWORD *)(a1 + 544) = -1;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 560) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 568) = 0x7FFFFFFF;
  *(void *)(a1 + 572) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 600) = 0;
  *(_OWORD *)(a1 + 584) = 0u;
  *(void *)(a1 + 608) = 0x8000000080000000;
  *(_DWORD *)(a1 + 616) = 0x7FFFFFFF;
  *(void *)(a1 + 624) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 632) = 0x8000000080000000;
  *(_DWORD *)(a1 + 640) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(void *)&long long v2 = 0x8000000080000000;
  *((void *)&v2 + 1) = 0x8000000080000000;
  *(_OWORD *)(a1 + 888) = v2;
  *(_OWORD *)(a1 + 904) = v2;
  *(void *)(a1 + 936) = 0;
  *(_OWORD *)(a1 + 920) = 0u;
  *(unsigned char *)(a1 + 944) = 1;
  *(_DWORD *)(a1 + 945) = 0;
  *(unsigned char *)(a1 + 949) = 1;
  *(_DWORD *)(a1 + 953) = 0;
  *(_DWORD *)(a1 + 950) = 0;
  *(void *)(a1 + 1168) = 0;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(void *)(a1 + 1184) = 0x27FFFFFFFLL;
  *(void *)(a1 + 1176) = &off_243AF68;
  *(void *)(a1 + 1192) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 1200) = 0x7FFFFFFF;
  *(void *)(a1 + 1208) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 1216) = 0x7FFFFFFFFFFFFFFFLL;
  sub_5F3B34(a1 + 1224);
  *(void *)(a1 + 1384) = &off_243AFB0;
  *(_OWORD *)(a1 + 1392) = xmmword_20E9E20;
  *(_DWORD *)(a1 + 1408) = 0x7FFFFFFF;
  *(void *)(a1 + 1416) = 0;
  *(void *)(a1 + 1432) = 0;
  *(void *)(a1 + 1424) = 0;
  *(void *)(a1 + 1448) = 0x27FFFFFFFLL;
  *(void *)(a1 + 1440) = &off_243AFE0;
  *(void *)(a1 + 1456) = 0;
  *(void *)(a1 + 1472) = 0;
  *(void *)(a1 + 1464) = 0;
  *(void *)(a1 + 1488) = 0x27FFFFFFFLL;
  *(void *)(a1 + 1480) = &off_243B010;
  *(void *)(a1 + 1496) = 0;
  *(void *)(a1 + 1512) = 0;
  *(void *)(a1 + 1504) = 0;
  *(void *)(a1 + 1528) = 0x27FFFFFFFLL;
  *(void *)(a1 + 1520) = &off_243B040;
  *(void *)(a1 + 1544) = 0;
  *(void *)(a1 + 1536) = 0;
  *(void *)(a1 + 1552) = 0;
  *(void *)(a1 + 1568) = 0x27FFFFFFFLL;
  *(void *)(a1 + 1560) = &off_243B070;
  *(_OWORD *)(a1 + 1576) = 0u;
  *(_OWORD *)(a1 + 1592) = 0u;
  *(_OWORD *)(a1 + 1608) = 0u;
  *(_OWORD *)(a1 + 1624) = 0u;
  *(_OWORD *)(a1 + 1640) = 0u;
  *(_OWORD *)(a1 + 1656) = 0u;
  *(_OWORD *)(a1 + 1672) = 0u;
  *(_OWORD *)(a1 + 1688) = 0u;
  *(_OWORD *)(a1 + 1704) = 0u;
  *(_OWORD *)(a1 + 1720) = 0u;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(_OWORD *)(a1 + 1752) = 0u;
  *(void *)(a1 + 1768) = -1;
  *(void *)(a1 + 1784) = 0x27FFFFFFFLL;
  *(void *)(a1 + 1776) = &off_243B0A0;
  *(void *)(a1 + 1792) = -1;
  *(_OWORD *)(a1 + 1800) = 0u;
  *(_OWORD *)(a1 + 1816) = 0u;
  *(_OWORD *)(a1 + 1832) = 0u;
  *(void *)(a1 + 1848) = -1;
  *(_DWORD *)(a1 + 1856) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 1864) = 0u;
  *(_OWORD *)(a1 + 1880) = 0u;
  *(_OWORD *)(a1 + 1896) = 0u;
  *(_OWORD *)(a1 + 1912) = 0u;
  *(void *)(a1 + 1928) = 0;
  *(_DWORD *)(a1 + 1936) = 0x7FFFFFFF;
  *(unsigned char *)(a1 + 1940) = 0;
  *(void *)(a1 + 1952) = 0x27FFFFFFFLL;
  *(void *)(a1 + 1944) = &off_243B0D0;
  *(_OWORD *)(a1 + 1960) = 0u;
  *(_OWORD *)(a1 + 1976) = 0u;
  *(_OWORD *)(a1 + 1992) = 0u;
  *(_OWORD *)(a1 + 2008) = 0u;
  *(_OWORD *)(a1 + 2024) = 0u;
  *(_DWORD *)(a1 + 2040) = 1065353216;
  *(void *)(a1 + 2056) = 0x27FFFFFFFLL;
  *(void *)(a1 + 2048) = &off_243B100;
  *(_OWORD *)(a1 + 2096) = 0u;
  *(_OWORD *)(a1 + 2080) = 0u;
  *(_OWORD *)(a1 + 2064) = 0u;
  *(_OWORD *)(a1 + 2112) = xmmword_20E81C0;
  *(void *)(a1 + 2136) = 0x27FFFFFFFLL;
  *(void *)(a1 + 2128) = &off_243B130;
  *(void *)(a1 + 2152) = 0;
  *(void *)(a1 + 2144) = 0;
  *(void *)(a1 + 2160) = 0;
  *(void *)(a1 + 2176) = 0x27FFFFFFFLL;
  *(void *)(a1 + 2168) = &off_243B160;
  *(void *)(a1 + 2192) = 0;
  *(void *)(a1 + 2184) = 0;
  *(void *)(a1 + 2200) = 0;
  *(void *)(a1 + 2216) = 0x27FFFFFFFLL;
  *(void *)(a1 + 2208) = &off_243B190;
  *(void *)(a1 + 2232) = 0;
  *(void *)(a1 + 2224) = 0;
  *(void *)(a1 + 2240) = 0;
  *(void *)(a1 + 2248) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 2264) = 0x27FFFFFFFLL;
  *(void *)(a1 + 2256) = &off_243B1C0;
  *(void *)(a1 + 2280) = -1;
  *(void *)(a1 + 2272) = -1;
  *(void *)(a1 + 2288) = 0x8000000080000000;
  *(_WORD *)(a1 + 2296) = -29536;
  *(void *)(a1 + 2304) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 2312) = 0xFFFFFF;
  *(_DWORD *)(a1 + 2352) = -1;
  *(_DWORD *)(a1 + 2363) = -1;
  *(_DWORD *)(a1 + 2360) = -1;
  *(void *)(a1 + 2375) = 0;
  *(void *)(a1 + 2367) = 0;
  *(_WORD *)(a1 + 2391) = 0;
  *(void *)(a1 + 2383) = 0;
  *(void *)(a1 + 2408) = 0;
  *(void *)(a1 + 2400) = 0;
  *(unsigned char *)(a1 + 2424) = 0;
  *(void *)(a1 + 2416) = 0;
  return a1;
}

void sub_8E4040(_Unwind_Exception *a1)
{
  void *v4 = v2;
  sub_3AFFFC(v3);
  sub_8E0B7C(v1);
  _Unwind_Resume(a1);
}

BOOL sub_8E4060(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 16) == -1 && *(_DWORD *)(a1 + 20) == -1) {
    return 0;
  }
  if (*(char *)(a1 + 55) < 0) {
    return *(void *)(a1 + 40) != 0;
  }
  return *(unsigned char *)(a1 + 55) != 0;
}

BOOL sub_8E40A8(uint64_t a1)
{
  return *(void *)(a1 + 16) != *(void *)(a1 + 24);
}

BOOL sub_8E40B8(uint64_t a1)
{
  return *(void *)(a1 + 16) != *(void *)(a1 + 24);
}

BOOL sub_8E40C8(uint64_t a1)
{
  return *(void *)(a1 + 16) != *(void *)(a1 + 24);
}

uint64_t sub_8E40D8()
{
  return 1;
}

uint64_t sub_8E40E0()
{
  return 1;
}

BOOL sub_8E40E8(uint64_t a1)
{
  return *(void *)(a1 + 16) != *(void *)(a1 + 24);
}

void sub_8E40F8(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 152)
  {
    uint64_t v5 = *(void **)(i - 32);
    if (v5)
    {
      *(void *)(i - 24) = v5;
      operator delete(v5);
    }
    BOOL v6 = *(void **)(i - 56);
    if (v6)
    {
      *(void *)(i - 48) = v6;
      operator delete(v6);
    }
    uint64_t v7 = *(void **)(i - 80);
    if (v7)
    {
      *(void *)(i - 72) = v7;
      operator delete(v7);
    }
    if (*(char *)(i - 105) < 0)
    {
      operator delete(*(void **)(i - 128));
      if (*(char *)(i - 129) < 0) {
LABEL_14:
      }
        operator delete(*(void **)(i - 152));
    }
    else if (*(char *)(i - 129) < 0)
    {
      goto LABEL_14;
    }
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t sub_8E41A0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 136);
  if (v2)
  {
    *(void *)(a1 + 144) = v2;
    operator delete(v2);
  }
  if ((*(char *)(a1 + 127) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 95) & 0x80000000) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    operator delete(*(void **)(a1 + 72));
    int v3 = *(_DWORD *)(a1 + 56);
    if (v3 != 1) {
      goto LABEL_6;
    }
LABEL_11:
    uint64_t v4 = *(void **)(a1 + 32);
    if (!v4) {
      goto LABEL_14;
    }
    *(void *)(a1 + 40) = v4;
    goto LABEL_13;
  }
  operator delete(*(void **)(a1 + 104));
  if (*(char *)(a1 + 95) < 0) {
    goto LABEL_10;
  }
LABEL_5:
  int v3 = *(_DWORD *)(a1 + 56);
  if (v3 == 1) {
    goto LABEL_11;
  }
LABEL_6:
  if (!v3 && *(char *)(a1 + 55) < 0)
  {
    uint64_t v4 = *(void **)(a1 + 32);
LABEL_13:
    operator delete(v4);
  }
LABEL_14:
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

BOOL sub_8E4258(uint64_t a1)
{
  return *(void *)(a1 + 16) != *(void *)(a1 + 24)
      && *(_DWORD *)(a1 + 64) != 0x7FFFFFFF
      && *(_DWORD *)(a1 + 68) != 0x7FFFFFFF
      && *(_DWORD *)(a1 + 76) != 0x7FFFFFFF;
}

BOOL sub_8E429C(uint64_t a1)
{
  return *(void *)(a1 + 16) != *(void *)(a1 + 24);
}

BOOL sub_8E42AC(uint64_t a1)
{
  return *(void *)(a1 + 16) != *(void *)(a1 + 24);
}

uint64_t sub_8E42BC()
{
  return 1;
}

BOOL sub_8E42C4(uint64_t a1)
{
  return *(void *)(a1 + 16) != -1;
}

uint64_t sub_8E42D4(uint64_t a1)
{
  *(void *)(a1 + 2256) = &off_243B1C0;
  if ((*(char *)(a1 + 2423) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 2391) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_8:
    operator delete(*(void **)(a1 + 2368));
    int v2 = *(_DWORD *)(a1 + 2352);
    if (v2 != 1) {
      goto LABEL_4;
    }
LABEL_9:
    int v3 = *(void **)(a1 + 2328);
    if (!v3) {
      goto LABEL_12;
    }
    *(void *)(a1 + 2336) = v3;
    goto LABEL_11;
  }
  operator delete(*(void **)(a1 + 2400));
  if (*(char *)(a1 + 2391) < 0) {
    goto LABEL_8;
  }
LABEL_3:
  int v2 = *(_DWORD *)(a1 + 2352);
  if (v2 == 1) {
    goto LABEL_9;
  }
LABEL_4:
  if (!v2 && *(char *)(a1 + 2351) < 0)
  {
    int v3 = *(void **)(a1 + 2328);
LABEL_11:
    operator delete(v3);
  }
LABEL_12:
  *(void *)(a1 + 2208) = &off_243B190;
  uint64_t v4 = *(void *)(a1 + 2224);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 2232);
    BOOL v6 = *(void **)(a1 + 2224);
    if (v5 != v4)
    {
      uint64_t v7 = v5 - 568;
      do
      {
        sub_8E57D0((void *)(v7 + 24));
        int v9 = *(void **)v7;
        if (*(void *)v7)
        {
          *(void *)(v7 + 8) = v9;
          operator delete(v9);
        }
        BOOL v8 = v7 == v4;
        v7 -= 568;
      }
      while (!v8);
      BOOL v6 = *(void **)(a1 + 2224);
    }
    *(void *)(a1 + 2232) = v4;
    operator delete(v6);
  }
  *(void *)(a1 + 2168) = &off_243B160;
  uint64_t v10 = *(void **)(a1 + 2184);
  if (v10)
  {
    *(void *)(a1 + 2192) = v10;
    operator delete(v10);
  }
  *(void *)(a1 + 2128) = &off_243B130;
  uint64_t v11 = *(void *)(a1 + 2144);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 2152);
    uint64_t v13 = *(void **)(a1 + 2144);
    if (v12 != v11)
    {
      do
      {
        v12 -= 152;
        sub_8E4758(a1 + 2160, v12);
      }
      while (v12 != v11);
      uint64_t v13 = *(void **)(a1 + 2144);
    }
    *(void *)(a1 + 2152) = v11;
    operator delete(v13);
  }
  *(void *)(a1 + 2048) = &off_243B100;
  uint64_t v14 = *(void *)(a1 + 2088);
  if (v14)
  {
    sub_8E4C04(a1 + 2088, v14);
    operator delete(*(void **)(a1 + 2088));
  }
  uint64_t v15 = *(void *)(a1 + 2064);
  if (v15)
  {
    uint64_t v16 = *(void *)(a1 + 2072);
    uint64_t v17 = *(void **)(a1 + 2064);
    if (v16 != v15)
    {
      do
        uint64_t v16 = sub_8E49DC(v16 - 312);
      while (v16 != v15);
      uint64_t v17 = *(void **)(a1 + 2064);
    }
    *(void *)(a1 + 2072) = v15;
    operator delete(v17);
  }
  *(void *)(a1 + 1944) = &off_243B0D0;
  sub_5450C(a1 + 2008);
  uint64_t v18 = *(void *)(a1 + 1984);
  if (v18)
  {
    sub_8E40F8(a1 + 1984, v18);
    operator delete(*(void **)(a1 + 1984));
  }
  uint64_t v19 = *(void *)(a1 + 1960);
  if (v19)
  {
    uint64_t v20 = *(void *)(a1 + 1968);
    uint64_t v21 = *(void **)(a1 + 1960);
    if (v20 != v19)
    {
      do
        uint64_t v20 = sub_8E41A0(v20 - 160);
      while (v20 != v19);
      uint64_t v21 = *(void **)(a1 + 1960);
    }
    *(void *)(a1 + 1968) = v19;
    operator delete(v21);
  }
  sub_8E56D8(a1 + 1776);
  sub_8E52AC(a1 + 1560);
  *(void *)(a1 + 1520) = &off_243B040;
  uint64_t v22 = *(void *)(a1 + 1536);
  if (v22)
  {
    uint64_t v23 = *(void *)(a1 + 1544);
    long long v24 = *(void **)(a1 + 1536);
    if (v23 != v22)
    {
      do
        uint64_t v23 = sub_361164(v23 - 456);
      while (v23 != v22);
      long long v24 = *(void **)(a1 + 1536);
    }
    *(void *)(a1 + 1544) = v22;
    operator delete(v24);
  }
  *(void *)(a1 + 1480) = &off_243B010;
  char v25 = *(void **)(a1 + 1496);
  if (v25)
  {
    *(void *)(a1 + 1504) = v25;
    operator delete(v25);
  }
  *(void *)(a1 + 1440) = &off_243AFE0;
  uint64_t v26 = *(void *)(a1 + 1456);
  if (v26)
  {
    uint64_t v27 = *(void *)(a1 + 1464);
    long long v28 = *(void **)(a1 + 1456);
    if (v27 != v26)
    {
      do
      {
        if (*(char *)(v27 - 1) < 0) {
          operator delete(*(void **)(v27 - 24));
        }
        v27 -= 24;
      }
      while (v27 != v26);
      long long v28 = *(void **)(a1 + 1456);
    }
    *(void *)(a1 + 1464) = v26;
    operator delete(v28);
  }
  *(void *)(a1 + 1384) = &off_243AFB0;
  if (*(char *)(a1 + 1439) < 0) {
    operator delete(*(void **)(a1 + 1416));
  }
  *(void *)(a1 + 1176) = &off_243AF68;
  sub_4D4B58(a1 + 1224);
  *(void *)(a1 + 104) = &off_243AF38;
  sub_3AFFFC(a1 + 120);
  *(void *)(a1 + 40) = &off_243AF08;
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if ((*(char *)(a1 + 79) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 56));
  return a1;
}

void sub_8E4758(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 143) < 0)
  {
    operator delete(*(void **)(a2 + 120));
    int v3 = *(void **)(a2 + 96);
    if (!v3)
    {
LABEL_3:
      uint64_t v4 = *(void **)(a2 + 72);
      if (!v4) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    int v3 = *(void **)(a2 + 96);
    if (!v3) {
      goto LABEL_3;
    }
  }
  uint64_t v5 = *(void *)(a2 + 104);
  BOOL v6 = v3;
  if ((void *)v5 != v3)
  {
    do
    {
      v5 -= 144;
      sub_8E48A4(a2 + 112, v5);
    }
    while ((void *)v5 != v3);
    BOOL v6 = *(void **)(a2 + 96);
  }
  *(void *)(a2 + 104) = v3;
  operator delete(v6);
  uint64_t v4 = *(void **)(a2 + 72);
  if (v4)
  {
LABEL_4:
    *(void *)(a2 + 80) = v4;
    operator delete(v4);
  }
LABEL_5:
  if (*(char *)(a2 + 55) < 0)
  {
    operator delete(*(void **)(a2 + 32));
    if ((*(char *)(a2 + 31) & 0x80000000) == 0) {
      return;
    }
  }
  else if ((*(char *)(a2 + 31) & 0x80000000) == 0)
  {
    return;
  }
  uint64_t v7 = *(void **)(a2 + 8);

  operator delete(v7);
}

void **sub_8E4838(void **a1)
{
  int v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v2)
    {
      do
      {
        v3 -= 144;
        sub_8E48A4((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_8E48A4(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 143) < 0)
  {
    operator delete(*(void **)(a2 + 120));
    if ((*(char *)(a2 + 111) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a2 + 79) & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_12:
      operator delete(*(void **)(a2 + 56));
      int v3 = *(_DWORD *)(a2 + 40);
      if (v3 != 1) {
        goto LABEL_5;
      }
      goto LABEL_13;
    }
  }
  else if ((*(char *)(a2 + 111) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a2 + 88));
  if (*(char *)(a2 + 79) < 0) {
    goto LABEL_12;
  }
LABEL_4:
  int v3 = *(_DWORD *)(a2 + 40);
  if (v3 != 1)
  {
LABEL_5:
    if (!v3 && *(char *)(a2 + 39) < 0)
    {
      uint64_t v4 = *(void **)(a2 + 16);
LABEL_9:
      operator delete(v4);
      return;
    }
    return;
  }
LABEL_13:
  uint64_t v4 = *(void **)(a2 + 16);
  if (v4)
  {
    *(void *)(a2 + 24) = v4;
    goto LABEL_9;
  }
}

void **sub_8E4970(void **a1)
{
  int v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v2)
    {
      do
      {
        v3 -= 152;
        sub_8E4758((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_8E49DC(uint64_t a1)
{
  if (*(char *)(a1 + 311) < 0)
  {
    operator delete(*(void **)(a1 + 288));
    if ((*(char *)(a1 + 271) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 239) & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_10:
      operator delete(*(void **)(a1 + 216));
      int v2 = *(_DWORD *)(a1 + 200);
      if (v2 != 1) {
        goto LABEL_5;
      }
LABEL_11:
      uint64_t v3 = *(void **)(a1 + 176);
      if (!v3) {
        goto LABEL_14;
      }
      *(void *)(a1 + 184) = v3;
      goto LABEL_13;
    }
  }
  else if ((*(char *)(a1 + 271) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 248));
  if (*(char *)(a1 + 239) < 0) {
    goto LABEL_10;
  }
LABEL_4:
  int v2 = *(_DWORD *)(a1 + 200);
  if (v2 == 1) {
    goto LABEL_11;
  }
LABEL_5:
  if (!v2 && *(char *)(a1 + 199) < 0)
  {
    uint64_t v3 = *(void **)(a1 + 176);
LABEL_13:
    operator delete(v3);
  }
LABEL_14:
  uint64_t v4 = *(void **)(a1 + 144);
  if (v4)
  {
    *(void *)(a1 + 152) = v4;
    operator delete(v4);
  }
  if (*(char *)(a1 + 143) < 0)
  {
    operator delete(*(void **)(a1 + 120));
    if ((*(char *)(a1 + 119) & 0x80000000) == 0)
    {
LABEL_18:
      if ((*(char *)(a1 + 95) & 0x80000000) == 0) {
        goto LABEL_19;
      }
      goto LABEL_35;
    }
  }
  else if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
    goto LABEL_18;
  }
  operator delete(*(void **)(a1 + 96));
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
LABEL_19:
    uint64_t v5 = *(void **)(a1 + 24);
    if (!v5) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
LABEL_35:
  operator delete(*(void **)(a1 + 72));
  uint64_t v5 = *(void **)(a1 + 24);
  if (v5)
  {
LABEL_20:
    *(void *)(a1 + 32) = v5;
    operator delete(v5);
  }
LABEL_21:
  BOOL v6 = *(void ***)a1;
  if (*(void *)a1)
  {
    uint64_t v7 = *(void ***)(a1 + 8);
    BOOL v8 = *(void ***)a1;
    if (v7 == v6)
    {
LABEL_31:
      *(void *)(a1 + 8) = v6;
      operator delete(v8);
      return a1;
    }
    while (1)
    {
      if (*((char *)v7 - 1) < 0)
      {
        operator delete(*(v7 - 3));
        sub_4D4B58((uint64_t)(v7 - 24));
        if (*((char *)v7 - 201) < 0) {
LABEL_29:
        }
          operator delete(*(v7 - 28));
      }
      else
      {
        sub_4D4B58((uint64_t)(v7 - 24));
        if (*((char *)v7 - 201) < 0) {
          goto LABEL_29;
        }
      }
      v7 -= 30;
      if (v7 == v6)
      {
        BOOL v8 = *(void ***)a1;
        goto LABEL_31;
      }
    }
  }
  return a1;
}

void **sub_8E4B64(void **a1)
{
  int v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    uint64_t v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        sub_4D4B58((uint64_t)(v3 - 24));
        if (*((char *)v3 - 201) < 0) {
LABEL_9:
        }
          operator delete(*(v3 - 28));
      }
      else
      {
        sub_4D4B58((uint64_t)(v3 - 24));
        if (*((char *)v3 - 201) < 0) {
          goto LABEL_9;
        }
      }
      v3 -= 30;
      if (v3 == v2)
      {
        uint64_t v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

void sub_8E4C04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      if (*(char *)(v4 - 1) < 0)
      {
        operator delete(*(void **)(v4 - 24));
        uint64_t v5 = *(void **)(v4 - 56);
        if (!v5)
        {
LABEL_6:
          uint64_t v6 = v4 - 80;
          uint64_t v7 = *(void **)(v4 - 80);
          if (v7) {
            goto LABEL_27;
          }
          goto LABEL_3;
        }
      }
      else
      {
        uint64_t v5 = *(void **)(v4 - 56);
        if (!v5) {
          goto LABEL_6;
        }
      }
      BOOL v8 = *(void **)(v4 - 48);
      int v9 = v5;
      if (v8 == v5) {
        goto LABEL_26;
      }
      uint64_t v10 = (uint64_t)v8 - 56;
      do
      {
        if (*(char *)(v10 + 55) < 0)
        {
          operator delete(*(void **)(v10 + 32));
          if ((*(char *)(v10 + 23) & 0x80000000) == 0)
          {
LABEL_15:
            if ((*(char *)(v10 - 9) & 0x80000000) == 0) {
              goto LABEL_16;
            }
            goto LABEL_22;
          }
        }
        else if ((*(char *)(v10 + 23) & 0x80000000) == 0)
        {
          goto LABEL_15;
        }
        operator delete(*(void **)v10);
        if ((*(char *)(v10 - 9) & 0x80000000) == 0)
        {
LABEL_16:
          int v13 = *(_DWORD *)(v10 - 48);
          if (v13 != 1) {
            goto LABEL_17;
          }
          goto LABEL_23;
        }
LABEL_22:
        operator delete(*(void **)(v10 - 32));
        int v13 = *(_DWORD *)(v10 - 48);
        if (v13 != 1)
        {
LABEL_17:
          if (!v13 && *(char *)(v10 - 49) < 0)
          {
            uint64_t v11 = *(void **)(v10 - 72);
LABEL_11:
            operator delete(v11);
            goto LABEL_12;
          }
          goto LABEL_12;
        }
LABEL_23:
        uint64_t v11 = *(void **)(v10 - 72);
        if (v11)
        {
          *(void *)(v10 - 64) = v11;
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v12 = (void *)(v10 - 88);
        v10 -= 144;
      }
      while (v12 != v5);
      int v9 = *(void **)(v4 - 56);
LABEL_26:
      *(void *)(v4 - 48) = v5;
      operator delete(v9);
      uint64_t v6 = v4 - 80;
      uint64_t v7 = *(void **)(v4 - 80);
      if (v7)
      {
LABEL_27:
        *(void *)(v4 - 72) = v7;
        operator delete(v7);
      }
LABEL_3:
      uint64_t v4 = v6;
    }
    while (v6 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t sub_8E4D50(uint64_t a1)
{
  int v2 = *(void **)(a1 + 672);
  if (v2)
  {
    *(void *)(a1 + 680) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 648);
  if (v3)
  {
    *(void *)(a1 + 656) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 616);
  if (v4)
  {
    *(void *)(a1 + 624) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 592);
  if (v5)
  {
    *(void *)(a1 + 600) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 568);
  if (v6)
  {
    *(void *)(a1 + 576) = v6;
    operator delete(v6);
  }
  if ((*(char *)(a1 + 543) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 511) & 0x80000000) == 0) {
      goto LABEL_13;
    }
LABEL_18:
    operator delete(*(void **)(a1 + 488));
    int v7 = *(_DWORD *)(a1 + 472);
    if (v7 != 1) {
      goto LABEL_14;
    }
LABEL_19:
    BOOL v8 = *(void **)(a1 + 448);
    if (!v8) {
      goto LABEL_22;
    }
    *(void *)(a1 + 456) = v8;
    goto LABEL_21;
  }
  operator delete(*(void **)(a1 + 520));
  if (*(char *)(a1 + 511) < 0) {
    goto LABEL_18;
  }
LABEL_13:
  int v7 = *(_DWORD *)(a1 + 472);
  if (v7 == 1) {
    goto LABEL_19;
  }
LABEL_14:
  if (!v7 && *(char *)(a1 + 471) < 0)
  {
    BOOL v8 = *(void **)(a1 + 448);
LABEL_21:
    operator delete(v8);
  }
LABEL_22:
  if ((*(char *)(a1 + 431) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 399) & 0x80000000) == 0) {
      goto LABEL_24;
    }
LABEL_29:
    operator delete(*(void **)(a1 + 376));
    int v9 = *(_DWORD *)(a1 + 360);
    if (v9 != 1) {
      goto LABEL_25;
    }
LABEL_30:
    uint64_t v10 = *(void **)(a1 + 336);
    if (!v10) {
      goto LABEL_33;
    }
    *(void *)(a1 + 344) = v10;
    goto LABEL_32;
  }
  operator delete(*(void **)(a1 + 408));
  if (*(char *)(a1 + 399) < 0) {
    goto LABEL_29;
  }
LABEL_24:
  int v9 = *(_DWORD *)(a1 + 360);
  if (v9 == 1) {
    goto LABEL_30;
  }
LABEL_25:
  if (!v9 && *(char *)(a1 + 359) < 0)
  {
    uint64_t v10 = *(void **)(a1 + 336);
LABEL_32:
    operator delete(v10);
  }
LABEL_33:
  if ((*(char *)(a1 + 319) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 287) & 0x80000000) == 0) {
      goto LABEL_35;
    }
LABEL_40:
    operator delete(*(void **)(a1 + 264));
    int v11 = *(_DWORD *)(a1 + 248);
    if (v11 != 1) {
      goto LABEL_36;
    }
LABEL_41:
    uint64_t v12 = *(void **)(a1 + 224);
    if (!v12) {
      goto LABEL_44;
    }
    *(void *)(a1 + 232) = v12;
    goto LABEL_43;
  }
  operator delete(*(void **)(a1 + 296));
  if (*(char *)(a1 + 287) < 0) {
    goto LABEL_40;
  }
LABEL_35:
  int v11 = *(_DWORD *)(a1 + 248);
  if (v11 == 1) {
    goto LABEL_41;
  }
LABEL_36:
  if (!v11 && *(char *)(a1 + 247) < 0)
  {
    uint64_t v12 = *(void **)(a1 + 224);
LABEL_43:
    operator delete(v12);
  }
LABEL_44:
  if ((*(char *)(a1 + 207) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 175) & 0x80000000) == 0) {
      goto LABEL_46;
    }
LABEL_51:
    operator delete(*(void **)(a1 + 152));
    int v13 = *(_DWORD *)(a1 + 136);
    if (v13 != 1) {
      goto LABEL_47;
    }
LABEL_52:
    uint64_t v14 = *(void **)(a1 + 112);
    if (!v14) {
      goto LABEL_55;
    }
    *(void *)(a1 + 120) = v14;
    goto LABEL_54;
  }
  operator delete(*(void **)(a1 + 184));
  if (*(char *)(a1 + 175) < 0) {
    goto LABEL_51;
  }
LABEL_46:
  int v13 = *(_DWORD *)(a1 + 136);
  if (v13 == 1) {
    goto LABEL_52;
  }
LABEL_47:
  if (!v13 && *(char *)(a1 + 135) < 0)
  {
    uint64_t v14 = *(void **)(a1 + 112);
LABEL_54:
    operator delete(v14);
  }
LABEL_55:
  uint64_t v15 = *(void **)(a1 + 72);
  if (v15)
  {
    *(void *)(a1 + 80) = v15;
    operator delete(v15);
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v16 = *(void ***)a1;
  if (*(void *)a1)
  {
    uint64_t v17 = *(void ***)(a1 + 8);
    uint64_t v18 = *(void ***)a1;
    if (v17 == v16)
    {
LABEL_69:
      *(void *)(a1 + 8) = v16;
      operator delete(v18);
      return a1;
    }
    while (1)
    {
      if (*((char *)v17 - 1) < 0)
      {
        operator delete(*(v17 - 3));
        if (*((char *)v17 - 33) < 0) {
LABEL_67:
        }
          operator delete(*(v17 - 7));
      }
      else if (*((char *)v17 - 33) < 0)
      {
        goto LABEL_67;
      }
      v17 -= 7;
      if (v17 == v16)
      {
        uint64_t v18 = *(void ***)a1;
        goto LABEL_69;
      }
    }
  }
  return a1;
}

void **sub_8E4FE0(void **a1)
{
  int v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    uint64_t v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if (*((char *)v3 - 33) < 0) {
LABEL_9:
        }
          operator delete(*(v3 - 7));
      }
      else if (*((char *)v3 - 33) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 7;
      if (v3 == v2)
      {
        uint64_t v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

uint64_t sub_8E5070(uint64_t a1)
{
  if ((*(char *)(a1 + 191) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 159) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_8:
    operator delete(*(void **)(a1 + 136));
    int v2 = *(_DWORD *)(a1 + 120);
    if (v2 != 1) {
      goto LABEL_4;
    }
LABEL_9:
    uint64_t v3 = *(void **)(a1 + 96);
    if (!v3) {
      goto LABEL_12;
    }
    *(void *)(a1 + 104) = v3;
    goto LABEL_11;
  }
  operator delete(*(void **)(a1 + 168));
  if (*(char *)(a1 + 159) < 0) {
    goto LABEL_8;
  }
LABEL_3:
  int v2 = *(_DWORD *)(a1 + 120);
  if (v2 == 1) {
    goto LABEL_9;
  }
LABEL_4:
  if (!v2 && *(char *)(a1 + 119) < 0)
  {
    uint64_t v3 = *(void **)(a1 + 96);
LABEL_11:
    operator delete(v3);
  }
LABEL_12:
  uint64_t v4 = *(void **)(a1 + 64);
  if (v4)
  {
    *(void *)(a1 + 72) = v4;
    operator delete(v4);
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v5 = *(void ***)a1;
  if (*(void *)a1)
  {
    uint64_t v6 = *(void ***)(a1 + 8);
    int v7 = *(void ***)a1;
    if (v6 == v5)
    {
LABEL_26:
      *(void *)(a1 + 8) = v5;
      operator delete(v7);
      return a1;
    }
    while (1)
    {
      if (*((char *)v6 - 1) < 0)
      {
        operator delete(*(v6 - 3));
        if (*((char *)v6 - 33) < 0) {
LABEL_24:
        }
          operator delete(*(v6 - 7));
      }
      else if (*((char *)v6 - 33) < 0)
      {
        goto LABEL_24;
      }
      v6 -= 7;
      if (v6 == v5)
      {
        int v7 = *(void ***)a1;
        goto LABEL_26;
      }
    }
  }
  return a1;
}

void sub_8E5184(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 72)
  {
    if (*(char *)(i - 1) < 0)
    {
      operator delete(*(void **)(i - 24));
      uint64_t v6 = *(void **)(i - 48);
      if (!v6) {
        continue;
      }
    }
    else
    {
      uint64_t v6 = *(void **)(i - 48);
      if (!v6) {
        continue;
      }
    }
    int v7 = *(void **)(i - 40);
    uint64_t v5 = v6;
    if (v7 != v6)
    {
      uint64_t v8 = (uint64_t)v7 - 56;
      while (1)
      {
        if (*(char *)(v8 + 55) < 0)
        {
          operator delete(*(void **)(v8 + 32));
          if ((*(char *)(v8 + 23) & 0x80000000) == 0)
          {
LABEL_16:
            if ((*(char *)(v8 - 9) & 0x80000000) == 0) {
              goto LABEL_17;
            }
            goto LABEL_23;
          }
        }
        else if ((*(char *)(v8 + 23) & 0x80000000) == 0)
        {
          goto LABEL_16;
        }
        operator delete(*(void **)v8);
        if ((*(char *)(v8 - 9) & 0x80000000) == 0)
        {
LABEL_17:
          int v11 = *(_DWORD *)(v8 - 48);
          if (v11 != 1) {
            goto LABEL_18;
          }
          goto LABEL_24;
        }
LABEL_23:
        operator delete(*(void **)(v8 - 32));
        int v11 = *(_DWORD *)(v8 - 48);
        if (v11 != 1)
        {
LABEL_18:
          if (v11 || (*(char *)(v8 - 49) & 0x80000000) == 0) {
            goto LABEL_13;
          }
          int v9 = *(void **)(v8 - 72);
          goto LABEL_12;
        }
LABEL_24:
        int v9 = *(void **)(v8 - 72);
        if (!v9) {
          goto LABEL_13;
        }
        *(void *)(v8 - 64) = v9;
LABEL_12:
        operator delete(v9);
LABEL_13:
        uint64_t v10 = (void *)(v8 - 88);
        v8 -= 144;
        if (v10 == v6)
        {
          uint64_t v5 = *(void **)(i - 48);
          break;
        }
      }
    }
    *(void *)(i - 40) = v6;
    operator delete(v5);
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t sub_8E52AC(uint64_t a1)
{
  *(void *)a1 = &off_243B070;
  if (*(char *)(a1 + 207) < 0)
  {
    operator delete(*(void **)(a1 + 184));
    if ((*(char *)(a1 + 183) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 159) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_29;
    }
  }
  else if ((*(char *)(a1 + 183) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 160));
  if ((*(char *)(a1 + 159) & 0x80000000) == 0)
  {
LABEL_4:
    uint64_t v3 = (void **)(a1 + 112);
    uint64_t v2 = *(void *)(a1 + 112);
    if (!v2) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_29:
  operator delete(*(void **)(a1 + 136));
  uint64_t v3 = (void **)(a1 + 112);
  uint64_t v2 = *(void *)(a1 + 112);
  if (v2)
  {
LABEL_5:
    sub_8E5184((uint64_t)v3, v2);
    operator delete(*v3);
  }
LABEL_6:
  uint64_t v4 = *(void *)(a1 + 88);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 96);
    uint64_t v6 = *(void **)(a1 + 88);
    if (v5 != v4)
    {
      do
      {
        v5 -= 144;
        sub_8E48A4(a1 + 104, v5);
      }
      while (v5 != v4);
      uint64_t v6 = *(void **)(a1 + 88);
    }
    *(void *)(a1 + 96) = v4;
    operator delete(v6);
  }
  uint64_t v7 = *(void *)(a1 + 64);
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 72);
    int v9 = *(void **)(a1 + 64);
    if (v8 != v7)
    {
      do
      {
        v8 -= 152;
        sub_8E4758(a1 + 80, v8);
      }
      while (v8 != v7);
      int v9 = *(void **)(a1 + 64);
    }
    *(void *)(a1 + 72) = v7;
    operator delete(v9);
  }
  uint64_t v10 = *(void *)(a1 + 40);
  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + 48);
    uint64_t v12 = *(void **)(a1 + 40);
    if (v11 != v10)
    {
      do
        uint64_t v11 = sub_8E5070(v11 - 208);
      while (v11 != v10);
      uint64_t v12 = *(void **)(a1 + 40);
    }
    *(void *)(a1 + 48) = v10;
    operator delete(v12);
  }
  uint64_t v13 = *(void *)(a1 + 16);
  if (v13)
  {
    uint64_t v14 = *(void *)(a1 + 24);
    uint64_t v15 = *(void **)(a1 + 16);
    if (v14 != v13)
    {
      do
        uint64_t v14 = sub_8E4D50(v14 - 696);
      while (v14 != v13);
      uint64_t v15 = *(void **)(a1 + 16);
    }
    *(void *)(a1 + 24) = v13;
    operator delete(v15);
  }
  return a1;
}

uint64_t *sub_8E5450(uint64_t *a1)
{
  if (*a1)
  {
    sub_8E5184((uint64_t)a1, *a1);
    operator delete((void *)*a1);
  }
  return a1;
}

void **sub_8E548C(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_8E5070(v3 - 208);
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_8E54E8(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_8E4D50(v3 - 696);
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_8E5544(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (long long *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  uint64_t v5 = a1 + 8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)v5);
  }
  long long v6 = *v4;
  *(void *)(v5 + 16) = *((void *)v4 + 2);
  *(_OWORD *)uint64_t v5 = v6;
  *(unsigned char *)(a2 + 31) = 0;
  *(unsigned char *)(a2 + 8) = 0;
  uint64_t v7 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*v7);
  }
  long long v8 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)uint64_t v7 = v8;
  *(unsigned char *)(a2 + 55) = 0;
  *(unsigned char *)(a2 + 32) = 0;
  int v9 = *(_DWORD *)(a2 + 64);
  uint64_t v10 = *(void **)(a1 + 72);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = v9;
  if (v10)
  {
    *(void *)(a1 + 80) = v10;
    operator delete(v10);
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  uint64_t v11 = (void **)(a1 + 96);
  uint64_t v12 = *(void *)(a1 + 96);
  if (v12)
  {
    uint64_t v13 = *(void *)(a1 + 104);
    uint64_t v14 = *(void **)(a1 + 96);
    if (v13 != v12)
    {
      do
      {
        v13 -= 144;
        sub_8E48A4(a1 + 112, v13);
      }
      while (v13 != v12);
      uint64_t v14 = *v11;
    }
    *(void *)(a1 + 104) = v12;
    operator delete(v14);
    void *v11 = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  uint64_t v15 = (void **)(a1 + 120);
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*v15);
  }
  long long v16 = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_OWORD *)uint64_t v15 = v16;
  *(unsigned char *)(a2 + 143) = 0;
  *(unsigned char *)(a2 + 120) = 0;
  int v17 = *(_DWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 148) = *(unsigned char *)(a2 + 148);
  *(_DWORD *)(a1 + 144) = v17;
  return a1;
}

uint64_t sub_8E56D8(uint64_t a1)
{
  *(void *)a1 = &off_243B0A0;
  if (*(char *)(a1 + 159) < 0)
  {
    operator delete(*(void **)(a1 + 136));
    uint64_t v2 = *(void **)(a1 + 112);
    if (!v2)
    {
LABEL_3:
      uint64_t v3 = *(void **)(a1 + 88);
      if (!v3) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v2 = *(void **)(a1 + 112);
    if (!v2) {
      goto LABEL_3;
    }
  }
  uint64_t v5 = *(void *)(a1 + 120);
  long long v6 = v2;
  if ((void *)v5 != v2)
  {
    do
    {
      v5 -= 144;
      sub_8E48A4(a1 + 128, v5);
    }
    while ((void *)v5 != v2);
    long long v6 = *(void **)(a1 + 112);
  }
  *(void *)(a1 + 120) = v2;
  operator delete(v6);
  uint64_t v3 = *(void **)(a1 + 88);
  if (v3)
  {
LABEL_4:
    *(void *)(a1 + 96) = v3;
    operator delete(v3);
  }
LABEL_5:
  if (*(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 24));
  return a1;
}

void *sub_8E57D0(void *a1)
{
  uint64_t v2 = a1[64];
  if (v2)
  {
    uint64_t v3 = a1[65];
    uint64_t v4 = (void *)a1[64];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 9) < 0) {
          operator delete(*(void **)(v3 - 32));
        }
        v3 -= 32;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[64];
    }
    a1[65] = v2;
    operator delete(v4);
  }
  sub_4D4B58((uint64_t)(a1 + 44));
  sub_4D4B58((uint64_t)(a1 + 24));
  uint64_t v5 = a1[21];
  if (v5)
  {
    uint64_t v6 = a1[22];
    uint64_t v7 = (void *)a1[21];
    if (v6 != v5)
    {
      do
        uint64_t v6 = sub_4D4B58(v6 - 160);
      while (v6 != v5);
      uint64_t v7 = (void *)a1[21];
    }
    a1[22] = v5;
    operator delete(v7);
  }
  sub_4D4B58((uint64_t)(a1 + 1));
  return a1;
}

uint64_t sub_8E5894(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 48);
    uint64_t v4 = *(void **)(a1 + 40);
    if (v3 == v2)
    {
LABEL_11:
      *(void *)(a1 + 48) = v2;
      operator delete(v4);
      goto LABEL_12;
    }
    while (1)
    {
      if (*(char *)(v3 - 9) < 0)
      {
        operator delete(*(void **)(v3 - 32));
        if (*(char *)(v3 - 41) < 0) {
LABEL_9:
        }
          operator delete(*(void **)(v3 - 64));
      }
      else if (*(char *)(v3 - 41) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 72;
      if (v3 == v2)
      {
        uint64_t v4 = *(void **)(a1 + 40);
        goto LABEL_11;
      }
    }
  }
LABEL_12:
  uint64_t v5 = *(void ***)(a1 + 16);
  if (v5)
  {
    do
    {
      long long v8 = (void **)*v5;
      if (*((char *)v5 + 79) < 0)
      {
        operator delete(v5[7]);
        if (*((char *)v5 + 47) < 0) {
LABEL_21:
        }
          operator delete(v5[3]);
      }
      else if (*((char *)v5 + 47) < 0)
      {
        goto LABEL_21;
      }
      operator delete(v5);
      uint64_t v5 = v8;
    }
    while (v8);
  }
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = 0;
  if (v6) {
    operator delete(v6);
  }
  return a1;
}

uint64_t sub_8E5980(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(void *)(a1 + 32) = v5;
    operator delete(v5);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  uint64_t v6 = *(void **)(a1 + 48);
  if (v6)
  {
    *(void *)(a1 + 56) = v6;
    operator delete(v6);
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  uint64_t v7 = *(void **)(a1 + 72);
  if (v7)
  {
    *(void *)(a1 + 80) = v7;
    operator delete(v7);
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  long long v8 = *(void **)(a1 + 96);
  if (v8)
  {
    *(void *)(a1 + 104) = v8;
    operator delete(v8);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  int v9 = *(void **)(a1 + 192);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  uint64_t v10 = *(void *)(a2 + 136);
  *(void *)(a1 + 142) = *(void *)(a2 + 142);
  *(void *)(a1 + 136) = v10;
  uint64_t v11 = *(void *)(a2 + 184);
  long long v12 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = v12;
  *(void *)(a1 + 184) = v11;
  if (v9)
  {
    *(void *)(a1 + 200) = v9;
    operator delete(v9);
    *(void *)(a1 + 192) = 0;
    *(void *)(a1 + 200) = 0;
    *(void *)(a1 + 208) = 0;
  }
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  uint64_t v13 = *(void **)(a1 + 216);
  if (v13)
  {
    *(void *)(a1 + 224) = v13;
    operator delete(v13);
    *(void *)(a1 + 216) = 0;
    *(void *)(a1 + 224) = 0;
    *(void *)(a1 + 232) = 0;
  }
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a2 + 216) = 0;
  *(void *)(a2 + 224) = 0;
  *(void *)(a2 + 232) = 0;
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  if (a1 != a2)
  {
    unsigned int v14 = *(_DWORD *)(a1 + 264);
    int v15 = *(_DWORD *)(a2 + 264);
    if (v14 == v15)
    {
      if (v14 <= 1) {
        *(void *)(a1 + 256) = *(void *)(a2 + 256);
      }
    }
    else
    {
      if (v15 == 1)
      {
        *(void *)(a1 + 256) = *(void *)(a2 + 256);
        int v15 = *(_DWORD *)(a2 + 264);
      }
      else if (!v15)
      {
        *(void *)(a1 + 256) = *(void *)(a2 + 256);
      }
      *(_DWORD *)(a1 + 264) = v15;
    }
  }
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  uint64_t v16 = *(void *)(a2 + 296);
  *(void *)(a1 + 302) = *(void *)(a2 + 302);
  *(void *)(a1 + 296) = v16;
  long long v17 = *(_OWORD *)(a2 + 312);
  long long v18 = *(_OWORD *)(a2 + 328);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(_OWORD *)(a1 + 328) = v18;
  *(_OWORD *)(a1 + 312) = v17;
  uint64_t v19 = *(void **)(a1 + 352);
  if (v19)
  {
    *(void *)(a1 + 360) = v19;
    operator delete(v19);
    *(void *)(a1 + 352) = 0;
    *(void *)(a1 + 360) = 0;
    *(void *)(a1 + 368) = 0;
  }
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(void *)(a2 + 352) = 0;
  *(void *)(a2 + 360) = 0;
  *(void *)(a2 + 368) = 0;
  uint64_t v20 = *(void **)(a1 + 376);
  if (v20)
  {
    *(void *)(a1 + 384) = v20;
    operator delete(v20);
    *(void *)(a1 + 376) = 0;
    *(void *)(a1 + 384) = 0;
    *(void *)(a1 + 392) = 0;
  }
  uint64_t v21 = *(void *)(a2 + 384);
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(void *)(a1 + 384) = v21;
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  *(void *)(a2 + 376) = 0;
  *(void *)(a2 + 384) = 0;
  *(void *)(a2 + 392) = 0;
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  if (a1 != a2)
  {
    unsigned int v22 = *(_DWORD *)(a1 + 424);
    int v23 = *(_DWORD *)(a2 + 424);
    if (v22 == v23)
    {
      if (v22 <= 1) {
        *(void *)(a1 + 416) = *(void *)(a2 + 416);
      }
    }
    else
    {
      if (v23 == 1)
      {
        *(void *)(a1 + 416) = *(void *)(a2 + 416);
        int v23 = *(_DWORD *)(a2 + 424);
      }
      else if (!v23)
      {
        *(void *)(a1 + 416) = *(void *)(a2 + 416);
      }
      *(_DWORD *)(a1 + 424) = v23;
    }
  }
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  uint64_t v24 = *(void *)(a2 + 448);
  *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
  *(void *)(a1 + 448) = v24;
  char v25 = *(void **)(a1 + 464);
  if (v25)
  {
    *(void *)(a1 + 472) = v25;
    operator delete(v25);
    *(void *)(a1 + 464) = 0;
    *(void *)(a1 + 472) = 0;
    *(void *)(a1 + 480) = 0;
  }
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(void *)(a1 + 480) = *(void *)(a2 + 480);
  *(void *)(a2 + 464) = 0;
  *(void *)(a2 + 472) = 0;
  *(void *)(a2 + 480) = 0;
  uint64_t v26 = *(void *)(a2 + 488);
  *(_DWORD *)(a1 + 496) = *(_DWORD *)(a2 + 496);
  *(void *)(a1 + 488) = v26;
  *(void *)(a1 + 504) = *(void *)(a2 + 504);
  sub_8E5E5C(a1 + 512, (uint64_t *)(a2 + 512));
  long long v27 = *(_OWORD *)(a2 + 848);
  long long v29 = *(_OWORD *)(a2 + 800);
  long long v28 = *(_OWORD *)(a2 + 816);
  *(_OWORD *)(a1 + 832) = *(_OWORD *)(a2 + 832);
  *(_OWORD *)(a1 + 848) = v27;
  *(_OWORD *)(a1 + 800) = v29;
  *(_OWORD *)(a1 + 816) = v28;
  sub_8E60D0(a1 + 864, a2 + 864);
  uint64_t v30 = *(void **)(a1 + 1008);
  if (v30)
  {
    *(void *)(a1 + 1016) = v30;
    operator delete(v30);
    *(void *)(a1 + 1008) = 0;
    *(void *)(a1 + 1016) = 0;
    *(void *)(a1 + 1024) = 0;
  }
  *(_OWORD *)(a1 + 1008) = *(_OWORD *)(a2 + 1008);
  *(void *)(a1 + 1024) = *(void *)(a2 + 1024);
  *(void *)(a2 + 1008) = 0;
  *(void *)(a2 + 1016) = 0;
  *(void *)(a2 + 1024) = 0;
  uint64_t v31 = *(void *)(a1 + 1032);
  if (v31)
  {
    long long v32 = (void **)(a1 + 1032);
    uint64_t v33 = *(void *)(a1 + 1040);
    int v34 = *(void **)(a1 + 1032);
    if (v33 != v31)
    {
      do
      {
        uint64_t v36 = *(void *)(v33 - 32);
        if (v36)
        {
          uint64_t v37 = *(void *)(v33 - 24);
          long long v35 = *(void **)(v33 - 32);
          if (v37 != v36)
          {
            uint64_t v38 = *(void *)(v33 - 24);
            do
            {
              uint64_t v40 = *(void **)(v38 - 24);
              v38 -= 24;
              uint64_t v39 = v40;
              if (v40)
              {
                *(void *)(v37 - 16) = v39;
                operator delete(v39);
              }
              uint64_t v37 = v38;
            }
            while (v38 != v36);
            long long v35 = *(void **)(v33 - 32);
          }
          *(void *)(v33 - 24) = v36;
          operator delete(v35);
        }
        v33 -= 64;
      }
      while (v33 != v31);
      int v34 = *v32;
    }
    *(void *)(a1 + 1040) = v31;
    operator delete(v34);
    *long long v32 = 0;
    *(void *)(a1 + 1040) = 0;
    *(void *)(a1 + 1048) = 0;
  }
  *(void *)(a1 + 1032) = *(void *)(a2 + 1032);
  *(void *)(a1 + 1040) = *(void *)(a2 + 1040);
  *(void *)(a1 + 1048) = *(void *)(a2 + 1048);
  *(void *)(a2 + 1048) = 0;
  *(_OWORD *)(a2 + 1032) = 0u;
  return a1;
}

uint64_t sub_8E5E5C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)a1 = v4;
  uint64_t v6 = (void *)(a1 + 16);
  uint64_t v5 = *(void **)(a1 + 16);
  uint64_t v7 = a2 + 2;
  if (v5)
  {
    *(void *)(a1 + 24) = v5;
    operator delete(v5);
    *uint64_t v6 = 0;
    v6[1] = 0;
    v6[2] = 0;
  }
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(void *)(a1 + 32) = a2[4];
  *uint64_t v7 = 0;
  v7[1] = 0;
  v7[2] = 0;
  long long v8 = *(void **)(a1 + 40);
  if (v8)
  {
    *(void *)(a1 + 48) = v8;
    operator delete(v8);
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
  *(void *)(a1 + 56) = a2[7];
  a2[5] = 0;
  a2[6] = 0;
  a2[7] = 0;
  int v9 = *(void **)(a1 + 64);
  if (v9)
  {
    *(void *)(a1 + 72) = v9;
    operator delete(v9);
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
  }
  *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
  *(void *)(a1 + 80) = a2[10];
  a2[8] = 0;
  a2[9] = 0;
  a2[10] = 0;
  uint64_t v10 = *(void **)(a1 + 88);
  if (v10)
  {
    *(void *)(a1 + 96) = v10;
    operator delete(v10);
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
  }
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
  *(void *)(a1 + 104) = a2[13];
  a2[11] = 0;
  a2[12] = 0;
  a2[13] = 0;
  uint64_t v11 = *(void **)(a1 + 112);
  if (v11)
  {
    *(void *)(a1 + 120) = v11;
    operator delete(v11);
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
  }
  *(_OWORD *)(a1 + 112) = *((_OWORD *)a2 + 7);
  *(void *)(a1 + 128) = a2[16];
  a2[14] = 0;
  a2[15] = 0;
  a2[16] = 0;
  long long v12 = *(void **)(a1 + 136);
  if (v12)
  {
    *(void *)(a1 + 144) = v12;
    operator delete(v12);
    *(void *)(a1 + 136) = 0;
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
  }
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 17);
  *(void *)(a1 + 152) = a2[19];
  a2[17] = 0;
  a2[18] = 0;
  a2[19] = 0;
  uint64_t v13 = *(void **)(a1 + 160);
  if (v13)
  {
    *(void *)(a1 + 168) = v13;
    operator delete(v13);
    *(void *)(a1 + 160) = 0;
    *(void *)(a1 + 168) = 0;
    *(void *)(a1 + 176) = 0;
  }
  *(_OWORD *)(a1 + 160) = *((_OWORD *)a2 + 10);
  *(void *)(a1 + 176) = a2[22];
  a2[20] = 0;
  a2[21] = 0;
  a2[22] = 0;
  unsigned int v14 = *(void **)(a1 + 184);
  if (v14)
  {
    *(void *)(a1 + 192) = v14;
    operator delete(v14);
    *(void *)(a1 + 184) = 0;
    *(void *)(a1 + 192) = 0;
    *(void *)(a1 + 200) = 0;
  }
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 23);
  *(void *)(a1 + 200) = a2[25];
  a2[23] = 0;
  a2[24] = 0;
  a2[25] = 0;
  int v15 = *(void **)(a1 + 208);
  if (v15)
  {
    *(void *)(a1 + 216) = v15;
    operator delete(v15);
    *(void *)(a1 + 208) = 0;
    *(void *)(a1 + 216) = 0;
    *(void *)(a1 + 224) = 0;
  }
  *(_OWORD *)(a1 + 208) = *((_OWORD *)a2 + 13);
  *(void *)(a1 + 224) = a2[28];
  a2[26] = 0;
  a2[27] = 0;
  a2[28] = 0;
  uint64_t v16 = *(void **)(a1 + 232);
  if (v16)
  {
    *(void *)(a1 + 240) = v16;
    operator delete(v16);
    *(void *)(a1 + 232) = 0;
    *(void *)(a1 + 240) = 0;
    *(void *)(a1 + 248) = 0;
  }
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 29);
  *(void *)(a1 + 248) = a2[31];
  a2[29] = 0;
  a2[30] = 0;
  a2[31] = 0;
  long long v17 = *((_OWORD *)a2 + 17);
  *(_OWORD *)(a1 + 256) = *((_OWORD *)a2 + 16);
  *(_OWORD *)(a1 + 272) = v17;
  return a1;
}

uint64_t sub_8E60D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(void *)(a1 + 32) = v5;
    operator delete(v5);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  uint64_t v6 = *(void **)(a1 + 48);
  if (v6)
  {
    *(void *)(a1 + 56) = v6;
    operator delete(v6);
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  uint64_t v7 = *(void **)(a1 + 72);
  if (v7)
  {
    *(void *)(a1 + 80) = v7;
    operator delete(v7);
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  long long v8 = *(void **)(a1 + 96);
  if (v8)
  {
    *(void *)(a1 + 104) = v8;
    operator delete(v8);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  int v9 = *(void **)(a1 + 120);
  if (v9)
  {
    *(void *)(a1 + 128) = v9;
    operator delete(v9);
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
  }
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  return a1;
}

char *sub_8E6244(void **a1, uint64_t a2)
{
  uint64_t v3 = 0x53A8FE53A8FE53A9 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x1AC5701AC5701ALL) {
    sub_2E00();
  }
  if (0xA751FCA751FCA752 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v4) {
    unint64_t v4 = 0xA751FCA751FCA752 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if ((unint64_t)(0x53A8FE53A8FE53A9 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4)) >= 0xD62B80D62B80DLL) {
    unint64_t v6 = 0x1AC5701AC5701ALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x1AC5701AC5701ALL) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(2448 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  unsigned int v14 = &v7[2448 * v3];
  int v15 = &v7[2448 * v6];
  *(_DWORD *)unsigned int v14 = *(_DWORD *)a2;
  sub_8E6430((uint64_t)(v14 + 8), a2 + 8);
  *((void *)v14 + 305) = *(void *)(a2 + 2440);
  long long v8 = v14 + 2448;
  uint64_t v10 = (char *)*a1;
  int v9 = (char *)a1[1];
  if (v9 == *a1)
  {
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      *(_DWORD *)&v14[v11 - 2448] = *(_DWORD *)&v9[v11 - 2448];
      sub_8E9EF0((uint64_t)&v14[v11 - 2440], (uint64_t)&v9[v11 - 2440]);
      *(void *)&v14[v11 - 8] = *(void *)&v9[v11 - 8];
      v11 -= 2448;
    }
    while (&v9[v11] != v10);
    long long v12 = (char *)*a1;
    int v9 = (char *)a1[1];
    *a1 = &v14[v11];
    a1[1] = v8;
    a1[2] = v15;
    if (v9 != v12)
    {
      do
      {
        sub_8E42D4((uint64_t)(v9 - 2440));
        v9 -= 2448;
      }
      while (v9 != v12);
      int v9 = v12;
    }
  }
  if (v9) {
    operator delete(v9);
  }
  return v14 + 2448;
}

void sub_8E641C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_8E9E98((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_8E6430(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_243AF98;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = &off_243AEC8;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = &off_243AF98;
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = &off_243AF08;
  *(void *)(a1 + 48) = v6;
  if (*(char *)(a2 + 79) < 0)
  {
    sub_4200((unsigned char *)(a1 + 56), *(void **)(a2 + 56), *(void *)(a2 + 64));
    uint64_t v8 = a1 + 80;
    if ((*(char *)(a2 + 103) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v7;
    uint64_t v8 = a1 + 80;
    if ((*(char *)(a2 + 103) & 0x80000000) == 0)
    {
LABEL_3:
      long long v9 = *(_OWORD *)(a2 + 80);
      *(void *)(v8 + 16) = *(void *)(a2 + 96);
      *(_OWORD *)uint64_t v8 = v9;
      goto LABEL_6;
    }
  }
  sub_4200((unsigned char *)v8, *(void **)(a2 + 80), *(void *)(a2 + 88));
LABEL_6:
  *(void *)(a1 + 104) = &off_243AF98;
  uint64_t v10 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = &off_243AF38;
  *(void *)(a1 + 112) = v10;
  sub_7A3ACC(a1 + 120, a2 + 120);
  *(void *)(a1 + 1176) = &off_243AF98;
  *(void *)(a1 + 1184) = *(void *)(a2 + 1184);
  *(void *)(a1 + 1176) = &off_243AF68;
  long long v11 = *(_OWORD *)(a2 + 1208);
  *(_OWORD *)(a1 + 1192) = *(_OWORD *)(a2 + 1192);
  *(_OWORD *)(a1 + 1208) = v11;
  sub_4F58AC(a1 + 1224, a2 + 1224);
  *(void *)(a1 + 1384) = &off_243AF98;
  *(void *)(a1 + 1392) = *(void *)(a2 + 1392);
  *(void *)(a1 + 1384) = &off_243AFB0;
  uint64_t v12 = *(void *)(a2 + 1400);
  *(_DWORD *)(a1 + 1408) = *(_DWORD *)(a2 + 1408);
  *(void *)(a1 + 1400) = v12;
  uint64_t v13 = (unsigned char *)(a1 + 1416);
  if (*(char *)(a2 + 1439) < 0)
  {
    sub_4200(v13, *(void **)(a2 + 1416), *(void *)(a2 + 1424));
  }
  else
  {
    long long v14 = *(_OWORD *)(a2 + 1416);
    *(void *)(a1 + 1432) = *(void *)(a2 + 1432);
    *(_OWORD *)uint64_t v13 = v14;
  }
  *(void *)(a1 + 1440) = &off_243AF98;
  *(void *)(a1 + 1448) = *(void *)(a2 + 1448);
  *(void *)(a1 + 1440) = &off_243AFE0;
  *(void *)(a1 + 1456) = 0;
  *(void *)(a1 + 1472) = 0;
  *(void *)(a1 + 1464) = 0;
  sub_8A6F8((char *)(a1 + 1456), *(void *)(a2 + 1456), *(void *)(a2 + 1464), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 1464) - *(void *)(a2 + 1456)) >> 3));
  *(void *)(a1 + 1480) = &off_243AF98;
  *(void *)(a1 + 1488) = *(void *)(a2 + 1488);
  *(void *)(a1 + 1480) = &off_243B010;
  *(void *)(a1 + 1496) = 0;
  *(void *)(a1 + 1512) = 0;
  *(void *)(a1 + 1504) = 0;
  int v15 = *(unsigned char **)(a2 + 1496);
  uint64_t v16 = *(unsigned char **)(a2 + 1504);
  int64_t v17 = v16 - v15;
  if (v16 != v15)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v17 >> 2) >= 0x1555555555555556) {
      sub_2E00();
    }
    long long v18 = (char *)operator new(v17);
    *(void *)(a1 + 1496) = v18;
    *(void *)(a1 + 1504) = v18;
    uint64_t v19 = &v18[4 * (v17 >> 2)];
    *(void *)(a1 + 1512) = v19;
    memcpy(v18, v15, v17 - 2);
    *(void *)(a1 + 1504) = v19;
  }
  *(void *)(a1 + 1520) = &off_243AF98;
  *(void *)(a1 + 1528) = *(void *)(a2 + 1528);
  *(void *)(a1 + 1520) = &off_243B040;
  *(void *)(a1 + 1536) = 0;
  *(void *)(a1 + 1552) = 0;
  *(void *)(a1 + 1544) = 0;
  sub_8E6E94(a1 + 1536, *(void *)(a2 + 1536), *(void *)(a2 + 1544), 0x823EE08FB823EE09 * ((uint64_t)(*(void *)(a2 + 1544) - *(void *)(a2 + 1536)) >> 3));
  sub_8E7024(a1 + 1560, a2 + 1560);
  *(void *)(a1 + 1776) = &off_243AF98;
  *(void *)(a1 + 1784) = *(void *)(a2 + 1784);
  *(void *)(a1 + 1776) = &off_243B0A0;
  sub_8E7FF8(a1 + 1792, a2 + 1792);
  sub_8E6D3C((void *)(a1 + 1944), (void *)(a2 + 1944));
  *(void *)(a1 + 2048) = &off_243AF98;
  *(void *)(a1 + 2056) = *(void *)(a2 + 2056);
  *(void *)(a1 + 2048) = &off_243B100;
  *(void *)(a1 + 2064) = 0;
  *(void *)(a1 + 2080) = 0;
  *(void *)(a1 + 2072) = 0;
  sub_8E8EBC(a1 + 2064, *(void *)(a2 + 2064), *(void *)(a2 + 2072), 0x6F96F96F96F96F97 * ((uint64_t)(*(void *)(a2 + 2072) - *(void *)(a2 + 2064)) >> 3));
  *(void *)(a1 + 2096) = 0;
  *(void *)(a1 + 2088) = 0;
  *(void *)(a1 + 2104) = 0;
  sub_8E9600(a1 + 2088, *(void *)(a2 + 2088), *(void *)(a2 + 2096), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 2096) - *(void *)(a2 + 2088)) >> 4));
  *(_OWORD *)(a1 + 2112) = *(_OWORD *)(a2 + 2112);
  *(void *)(a1 + 2128) = &off_243AF98;
  *(void *)(a1 + 2136) = *(void *)(a2 + 2136);
  *(void *)(a1 + 2128) = &off_243B130;
  *(void *)(a1 + 2144) = 0;
  *(void *)(a1 + 2160) = 0;
  *(void *)(a1 + 2152) = 0;
  sub_8E7E4C(a1 + 2144, *(void *)(a2 + 2144), *(void *)(a2 + 2152), 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(void *)(a2 + 2152) - *(void *)(a2 + 2144)) >> 3));
  *(void *)(a1 + 2168) = &off_243AF98;
  *(void *)(a1 + 2176) = *(void *)(a2 + 2176);
  *(void *)(a1 + 2168) = &off_243B160;
  *(void *)(a1 + 2184) = 0;
  *(void *)(a1 + 2200) = 0;
  *(void *)(a1 + 2192) = 0;
  uint64_t v20 = *(unsigned char **)(a2 + 2184);
  uint64_t v21 = *(unsigned char **)(a2 + 2192);
  int64_t v22 = v21 - v20;
  if (v21 != v20)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v22 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    int v23 = (char *)operator new(v22);
    *(void *)(a1 + 2184) = v23;
    *(void *)(a1 + 2192) = v23;
    uint64_t v24 = &v23[8 * (v22 >> 3)];
    *(void *)(a1 + 2200) = v24;
    memcpy(v23, v20, v22 - 4);
    *(void *)(a1 + 2192) = v24;
  }
  *(void *)(a1 + 2208) = &off_243AF98;
  *(void *)(a1 + 2216) = *(void *)(a2 + 2216);
  *(void *)(a1 + 2208) = &off_243B190;
  sub_8E99E4((void *)(a1 + 2224), a2 + 2224);
  *(void *)(a1 + 2248) = *(void *)(a2 + 2248);
  *(void *)(a1 + 2256) = &off_243AF98;
  *(void *)(a1 + 2264) = *(void *)(a2 + 2264);
  *(void *)(a1 + 2256) = &off_243B1C0;
  long long v25 = *(_OWORD *)(a2 + 2272);
  long long v26 = *(_OWORD *)(a2 + 2288);
  *(_OWORD *)(a1 + 2300) = *(_OWORD *)(a2 + 2300);
  *(_OWORD *)(a1 + 2288) = v26;
  *(_OWORD *)(a1 + 2272) = v25;
  sub_4F57A0(a1 + 2320, a2 + 2320);
  return a1;
}

void sub_8E6BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  *a22 = a21;
  sub_4D4B58(a20);
  **(void **)(v23 - 96) = *(void *)(v23 - 104);
  sub_3AFFFC(a23);
  sub_8E0B7C(*(void *)(v23 - 88));
  _Unwind_Resume(a1);
}

void sub_8E6D28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  if (!*a17) {
    JUMPOUT(0x8E6CD4);
  }
  JUMPOUT(0x8E6CCCLL);
}

void *sub_8E6D3C(void *a1, void *a2)
{
  *a1 = &off_243AF98;
  uint64_t v4 = a2[1];
  *a1 = &off_243B0D0;
  a1[1] = v4;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  sub_8E87C4(a1 + 2, a2[2], a2[3], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[3] - a2[2]) >> 5));
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  sub_8E8A4C(a1 + 5, a2[5], a2[6], 0x86BCA1AF286BCA1BLL * ((uint64_t)(a2[6] - a2[5]) >> 3));
  sub_54214((uint64_t)(a1 + 8), (uint64_t)(a2 + 8));
  return a1;
}

void sub_8E6E18(_Unwind_Exception *exception_object)
{
  if (*v3)
  {
    sub_8E40F8((uint64_t)v3, *v3);
    operator delete((void *)*v3);
    uint64_t v5 = *v2;
    if (!*v2) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v5 = *v2;
    if (!*v2) {
      goto LABEL_3;
    }
  }
  uint64_t v6 = *(void *)(v1 + 24);
  long long v7 = v5;
  if ((void *)v6 != v5)
  {
    do
      uint64_t v6 = sub_8E41A0(v6 - 160);
    while ((void *)v6 != v5);
    long long v7 = *v2;
  }
  *(void *)(v1 + 24) = v5;
  operator delete(v7);
  _Unwind_Resume(exception_object);
}

uint64_t sub_8E6E94(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = (void *)result;
    if (a4 >= 0x8FB823EE08FB83) {
      sub_2E00();
    }
    double result = (uint64_t)operator new(456 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = result + 456 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        double result = sub_3623F8(v8 + v9, a2 + v9);
        v9 += 456;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_8E6F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_8E6F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 456)
    sub_361164(v10 - 456 + v11);
  *(void *)(v9 + 8) = v10;
  sub_8E6F9C(&a9);
  _Unwind_Resume(a1);
}

void ***sub_8E6F9C(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = (uint64_t)v2[1];
      uint64_t v5 = **v1;
      if ((void *)v4 != v3)
      {
        do
          uint64_t v4 = sub_361164(v4 - 456);
        while ((void *)v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_8E7024(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_243AF98;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = &off_243B070;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  sub_8E72C4(a1 + 16, *(void *)(a2 + 16), *(void *)(a2 + 24), 0x66FD0EB66FD0EB67 * ((uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3));
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  sub_8E7B78(a1 + 40, *(void *)(a2 + 40), *(void *)(a2 + 48), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 4));
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  sub_8E7E4C(a1 + 64, *(void *)(a2 + 64), *(void *)(a2 + 72), 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 3));
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  sub_8E81F0((void *)(a1 + 88), *(void *)(a2 + 88), *(void *)(a2 + 96), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 4));
  sub_8E8440((void *)(a1 + 112), (long long **)(a2 + 112));
  if (*(char *)(a2 + 159) < 0)
  {
    sub_4200((unsigned char *)(a1 + 136), *(void **)(a2 + 136), *(void *)(a2 + 144));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 136);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = v5;
  }
  if (*(char *)(a2 + 183) < 0)
  {
    sub_4200((unsigned char *)(a1 + 160), *(void **)(a2 + 160), *(void *)(a2 + 168));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 160);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = v6;
  }
  long long v7 = (unsigned char *)(a1 + 184);
  if (*(char *)(a2 + 207) < 0)
  {
    sub_4200(v7, *(void **)(a2 + 184), *(void *)(a2 + 192));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 184);
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
    *(_OWORD *)long long v7 = v8;
  }
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  return a1;
}

void sub_8E7220(_Unwind_Exception *a1)
{
  if (*(char *)(v3 + 183) < 0) {
    operator delete(*v8);
  }
  if (*(char *)(v3 + 159) < 0) {
    operator delete(*v7);
  }
  sub_8E5450(v6);
  sub_8E4838(v5);
  sub_8E4970(v4);
  sub_8E548C(v2);
  sub_8E54E8(v1);
  _Unwind_Resume(a1);
}

void sub_8E7294(_Unwind_Exception *a1)
{
  sub_8E548C(v2);
  sub_8E54E8(v1);
  _Unwind_Resume(a1);
}

void sub_8E72B0(_Unwind_Exception *a1)
{
  sub_8E54E8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_8E72C4(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = (void *)result;
    if (a4 >= 0x5E293205E29321) {
      sub_2E00();
    }
    double result = (uint64_t)operator new(696 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = result + 696 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        double result = sub_8E7454(v8 + v9, a2 + v9);
        v9 += 696;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_8E7388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_8E739C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 696)
    sub_8E4D50(v10 - 696 + v11);
  *(void *)(v9 + 8) = v10;
  sub_8E73CC(&a9);
  _Unwind_Resume(a1);
}

void ***sub_8E73CC(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = (uint64_t)v2[1];
      long long v5 = **v1;
      if ((void *)v4 != v3)
      {
        do
          uint64_t v4 = sub_8E4D50(v4 - 696);
        while ((void *)v4 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_8E7454(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_8E7908((char **)a1, (long long **)a2);
  if (*(char *)(a2 + 47) < 0)
  {
    sub_4200((unsigned char *)v4 + 24, *(void **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    v4[5] = *(char **)(a2 + 40);
    *(_OWORD *)(v4 + 3) = v5;
  }
  long long v6 = *(_OWORD *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 48) = v6;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  uint64_t v9 = *(unsigned char **)(a2 + 72);
  uint64_t v8 = *(unsigned char **)(a2 + 80);
  int64_t v10 = v8 - v9;
  if (v8 != v9)
  {
    if (v10 < 0) {
      sub_2E00();
    }
    uint64_t v11 = (char *)operator new(v8 - v9);
    *(void *)(a1 + 72) = v11;
    *(void *)(a1 + 80) = v11;
    uint64_t v12 = &v11[8 * (v10 >> 3)];
    *(void *)(a1 + 88) = v12;
    memcpy(v11, v9, v10);
    *(void *)(a1 + 80) = v12;
  }
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  sub_4F57A0(a1 + 104, a2 + 104);
  sub_4F57A0(a1 + 216, a2 + 216);
  sub_4F57A0(a1 + 328, a2 + 328);
  sub_4F57A0(a1 + 440, a2 + 440);
  uint64_t v13 = *(void *)(a2 + 552);
  *(_WORD *)(a1 + 560) = *(_WORD *)(a2 + 560);
  *(void *)(a1 + 552) = v13;
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 576) = 0;
  long long v14 = *(unsigned char **)(a2 + 568);
  int v15 = *(unsigned char **)(a2 + 576);
  size_t v16 = v15 - v14;
  if (v15 != v14)
  {
    if ((v16 & 0x8000000000000000) != 0) {
      sub_2E00();
    }
    int64_t v17 = (char *)operator new(v15 - v14);
    *(void *)(a1 + 568) = v17;
    *(void *)(a1 + 576) = v17;
    long long v18 = &v17[v16];
    *(void *)(a1 + 584) = &v17[v16];
    memcpy(v17, v14, v16);
    *(void *)(a1 + 576) = v18;
  }
  *(void *)(a1 + 608) = 0;
  *(_OWORD *)(a1 + 592) = 0u;
  uint64_t v19 = *(unsigned char **)(a2 + 592);
  uint64_t v20 = *(unsigned char **)(a2 + 600);
  size_t v21 = v20 - v19;
  if (v20 != v19)
  {
    if ((v21 & 0x8000000000000000) != 0) {
      sub_2E00();
    }
    int64_t v22 = (char *)operator new(v20 - v19);
    *(void *)(a1 + 592) = v22;
    *(void *)(a1 + 600) = v22;
    uint64_t v23 = &v22[v21];
    *(void *)(a1 + 608) = &v22[v21];
    memcpy(v22, v19, v21);
    *(void *)(a1 + 600) = v23;
  }
  *(void *)(a1 + 632) = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  uint64_t v24 = *(unsigned char **)(a2 + 616);
  long long v25 = *(unsigned char **)(a2 + 624);
  size_t v26 = v25 - v24;
  if (v25 != v24)
  {
    if ((v26 & 0x8000000000000000) != 0) {
      sub_2E00();
    }
    long long v27 = (char *)operator new(v25 - v24);
    *(void *)(a1 + 616) = v27;
    *(void *)(a1 + 624) = v27;
    long long v28 = &v27[v26];
    *(void *)(a1 + 632) = &v27[v26];
    memcpy(v27, v24, v26);
    *(void *)(a1 + 624) = v28;
  }
  *(_WORD *)(a1 + 640) = *(_WORD *)(a2 + 640);
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 664) = 0;
  *(void *)(a1 + 656) = 0;
  long long v29 = *(unsigned char **)(a2 + 648);
  uint64_t v30 = *(unsigned char **)(a2 + 656);
  uint64_t v31 = v30 - v29;
  if (v30 != v29)
  {
    if (v31 < 0) {
      sub_2E00();
    }
    long long v32 = (char *)operator new(v30 - v29);
    *(void *)(a1 + 648) = v32;
    *(void *)(a1 + 656) = v32;
    *(void *)(a1 + 664) = &v32[8 * (v31 >> 3)];
    size_t v33 = v31 & 0xFFFFFFFFFFFFFFF8;
    memcpy(v32, v29, v33);
    *(void *)(a1 + 656) = &v32[v33];
  }
  *(void *)(a1 + 688) = 0;
  *(_OWORD *)(a1 + 672) = 0u;
  int v34 = *(unsigned char **)(a2 + 672);
  long long v35 = *(unsigned char **)(a2 + 680);
  int64_t v36 = v35 - v34;
  if (v35 != v34)
  {
    if (v36 < 0) {
      sub_2E00();
    }
    uint64_t v37 = (char *)operator new(v35 - v34);
    *(void *)(a1 + 672) = v37;
    *(void *)(a1 + 680) = v37;
    uint64_t v38 = &v37[16 * (v36 >> 4)];
    *(void *)(a1 + 688) = v38;
    memcpy(v37, v34, v36);
    *(void *)(a1 + 680) = v38;
  }
  return a1;
}

void sub_8E7778(_Unwind_Exception *a1)
{
  sub_8E4FE0(v1);
  _Unwind_Resume(a1);
}

void sub_8E778C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14)
{
  sub_4D9814(v16);
  sub_4D9814(a12);
  sub_4D9814(a14);
  long long v18 = *v15;
  if (*v15)
  {
    *(void *)(v14 + 80) = v18;
    operator delete(v18);
  }
  if ((*(char *)(v14 + 47) & 0x80000000) == 0)
  {
    sub_8E4FE0((void **)v14);
    _Unwind_Resume(a1);
  }
  operator delete(*a13);
  sub_8E4FE0((void **)v14);
  _Unwind_Resume(a1);
}

void sub_8E7878()
{
  if (*v0) {
    JUMPOUT(0x8E7884);
  }
  JUMPOUT(0x8E77D8);
}

void sub_8E7898()
{
  if (*v0) {
    JUMPOUT(0x8E78A4);
  }
  JUMPOUT(0x8E77E0);
}

void sub_8E78BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  if (*a10) {
    JUMPOUT(0x8E78CCLL);
  }
  JUMPOUT(0x8E77ECLL);
}

void sub_8E78E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (!*a11) {
    JUMPOUT(0x8E7800);
  }
  JUMPOUT(0x8E77F8);
}

void sub_8E78F8()
{
  if (!*v0) {
    JUMPOUT(0x8E7830);
  }
  JUMPOUT(0x8E7828);
}

char **sub_8E7908(char **a1, long long **a2)
{
  a1[2] = 0;
  int v3 = a1 + 16;
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  long long v5 = a2[1];
  int64_t v6 = (char *)v5 - (char *)*a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0x6DB6DB6DB6DB6DB7 * (v6 >> 3);
    if (v7 >= 0x492492492492493) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[56 * v7];
    a1[1] = sub_8E79EC(v3, v4, v5, v8);
  }
  return a1;
}

void sub_8E79C0(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1) {
    sub_20AB7FC();
  }
  _Unwind_Resume(exception_object);
}

char *sub_8E79EC(int a1, long long *a2, long long *a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v11 = __dst;
  if (a2 != a3)
  {
    int64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_4200(v4, *(void **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v8 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v4 = v8;
      }
      v4[24] = *((unsigned char *)v6 + 24);
      uint64_t v9 = v4 + 32;
      if (*((char *)v6 + 55) < 0)
      {
        sub_4200(v9, *((void **)v6 + 4), *((void *)v6 + 5));
      }
      else
      {
        long long v7 = v6[2];
        *((void *)v4 + 6) = *((void *)v6 + 6);
        *(_OWORD *)uint64_t v9 = v7;
      }
      int64_t v6 = (long long *)((char *)v6 + 56);
      uint64_t v4 = v11 + 56;
      v11 += 56;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_8E7AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(char *)(v9 + 23) < 0)
  {
    operator delete(*(void **)v9);
    sub_8E7AF8((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  sub_8E7AF8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_8E7AF8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (1)
    {
      if (v3 == v4) {
        return a1;
      }
      if (*(char *)(v3 - 1) < 0)
      {
        operator delete(*(void **)(v3 - 24));
        if ((*(char *)(v3 - 33) & 0x80000000) == 0) {
          goto LABEL_4;
        }
      }
      else if ((*(char *)(v3 - 33) & 0x80000000) == 0)
      {
        goto LABEL_4;
      }
      operator delete(*(void **)(v3 - 56));
LABEL_4:
      v3 -= 56;
    }
  }
  return a1;
}

uint64_t sub_8E7B78(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = (void *)result;
    if (a4 >= 0x13B13B13B13B13CLL) {
      sub_2E00();
    }
    double result = (uint64_t)operator new(208 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = result + 208 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        double result = sub_8E7D08(v8 + v9, a2 + v9);
        v9 += 208;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_8E7C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_8E7C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 208)
    sub_8E5070(v10 - 208 + v11);
  *(void *)(v9 + 8) = v10;
  sub_8E7C80(&a9);
  _Unwind_Resume(a1);
}

void ***sub_8E7C80(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = (uint64_t)v2[1];
      long long v5 = **v1;
      if ((void *)v4 != v3)
      {
        do
          uint64_t v4 = sub_8E5070(v4 - 208);
        while ((void *)v4 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_8E7D08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_8E7908((char **)a1, (long long **)a2);
  if (*(char *)(a2 + 47) < 0)
  {
    sub_4200((unsigned char *)v4 + 24, *(void **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    v4[5] = *(char **)(a2 + 40);
    *(_OWORD *)(v4 + 3) = v5;
  }
  long long v6 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = v6;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  uint64_t v8 = *(unsigned char **)(a2 + 64);
  long long v7 = *(unsigned char **)(a2 + 72);
  int64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0) {
      sub_2E00();
    }
    uint64_t v10 = (char *)operator new(v7 - v8);
    *(void *)(a1 + 64) = v10;
    *(void *)(a1 + 72) = v10;
    uint64_t v11 = &v10[8 * (v9 >> 3)];
    *(void *)(a1 + 80) = v11;
    memcpy(v10, v8, v9);
    *(void *)(a1 + 72) = v11;
  }
  sub_4F57A0(a1 + 88, a2 + 88);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  return a1;
}

void sub_8E7DE8(_Unwind_Exception *a1)
{
  sub_8E4FE0(v1);
  _Unwind_Resume(a1);
}

void sub_8E7DFC(_Unwind_Exception *a1)
{
  long long v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 72) = v5;
    operator delete(v5);
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      sub_8E4FE0((void **)v1);
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v1 + 47) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  sub_8E4FE0((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_8E7E4C(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = (void *)result;
    if (a4 >= 0x1AF286BCA1AF287) {
      sub_2E00();
    }
    double result = (uint64_t)operator new(152 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = result + 152 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        double result = sub_8E7FF8(v8 + v9, a2 + v9);
        v9 += 152;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_8E7F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_8E7F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v12; v12 -= 152)
    sub_8E4758(v11, v10 - 152 + v12);
  *(void *)(v9 + 8) = v10;
  sub_8E7F5C(&a9);
  _Unwind_Resume(a1);
}

void ***sub_8E7F5C(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = (uint64_t)v2[1];
      long long v5 = **result;
      if ((void *)v4 != v3)
      {
        do
        {
          v4 -= 152;
          sub_8E4758((uint64_t)(v2 + 2), v4);
        }
        while ((void *)v4 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_8E7FF8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_4200((unsigned char *)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16));
    uint64_t v5 = a1 + 32;
    if ((*(char *)(a2 + 55) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
    uint64_t v5 = a1 + 32;
    if ((*(char *)(a2 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      long long v6 = *(_OWORD *)(a2 + 32);
      *(void *)(v5 + 16) = *(void *)(a2 + 48);
      *(_OWORD *)uint64_t v5 = v6;
      goto LABEL_6;
    }
  }
  sub_4200((unsigned char *)v5, *(void **)(a2 + 32), *(void *)(a2 + 40));
LABEL_6:
  uint64_t v7 = *(void *)(a2 + 56);
  int v8 = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 64) = v8;
  *(void *)(a1 + 56) = v7;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  uint64_t v10 = *(unsigned char **)(a2 + 72);
  uint64_t v9 = *(unsigned char **)(a2 + 80);
  int64_t v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0) {
      sub_2E00();
    }
    uint64_t v12 = (char *)operator new(v9 - v10);
    *(void *)(a1 + 72) = v12;
    *(void *)(a1 + 80) = v12;
    uint64_t v13 = &v12[8 * (v11 >> 3)];
    *(void *)(a1 + 88) = v13;
    memcpy(v12, v10, v11);
    *(void *)(a1 + 80) = v13;
  }
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  sub_8E81F0((void *)(a1 + 96), *(void *)(a2 + 96), *(void *)(a2 + 104), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 104) - *(void *)(a2 + 96)) >> 4));
  uint64_t v14 = (unsigned char *)(a1 + 120);
  if (*(char *)(a2 + 143) < 0)
  {
    sub_4200(v14, *(void **)(a2 + 120), *(void *)(a2 + 128));
  }
  else
  {
    long long v15 = *(_OWORD *)(a2 + 120);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(_OWORD *)uint64_t v14 = v15;
  }
  int v16 = *(_DWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 148) = *(unsigned char *)(a2 + 148);
  *(_DWORD *)(a1 + 144) = v16;
  return a1;
}

void sub_8E8178(_Unwind_Exception *a1)
{
  sub_8E4838(v5);
  uint64_t v7 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 80) = v7;
    operator delete(v7);
    if (*(char *)(v1 + 55) < 0)
    {
LABEL_3:
      operator delete(*v3);
      if ((*(char *)(v1 + 31) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if (*(char *)(v1 + 55) < 0)
  {
    goto LABEL_3;
  }
  if ((*(char *)(v1 + 31) & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(*v2);
  _Unwind_Resume(a1);
}

void *sub_8E81F0(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = result;
    if (a4 >= 0x1C71C71C71C71C8) {
      sub_2E00();
    }
    double result = operator new(144 * a4);
    int v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = &result[18 * a4];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        double result = sub_8E839C(&v8[v9 / 8], a2 + v9);
        v9 += 144;
      }
      while (a2 + v9 != a3);
      int v8 = (void *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_8E82B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_8E82CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v12; v12 -= 144)
    sub_8E48A4(v11, v10 - 144 + v12);
  *(void *)(v9 + 8) = v10;
  sub_8E8300(&a9);
  _Unwind_Resume(a1);
}

void ***sub_8E8300(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = (uint64_t)v2[1];
      uint64_t v5 = **result;
      if ((void *)v4 != v3)
      {
        do
        {
          v4 -= 144;
          sub_8E48A4((uint64_t)(v2 + 2), v4);
        }
        while ((void *)v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

_DWORD *sub_8E839C(_DWORD *a1, uint64_t a2)
{
  *a1 = *(_DWORD *)a2;
  uint64_t v4 = a1 + 30;
  sub_4F57A0((uint64_t)(a1 + 2), a2 + 8);
  if (*(char *)(a2 + 143) < 0)
  {
    sub_4200(v4, *(void **)(a2 + 120), *(void *)(a2 + 128));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 120);
    *((void *)v4 + 2) = *(void *)(a2 + 136);
    *(_OWORD *)uint64_t v4 = v5;
  }
  return a1;
}

void sub_8E841C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 111) < 0) {
    operator delete(*(void **)(v1 + 88));
  }
  sub_20AB87C(v1);
  _Unwind_Resume(a1);
}

void *sub_8E8440(void *a1, long long **a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  long long v5 = a2[1];
  int64_t v6 = (char *)v5 - (char *)*a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0x8E38E38E38E38E39 * (v6 >> 3);
    if (v7 >= 0x38E38E38E38E38FLL) {
      sub_2E00();
    }
    int v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[72 * v7];
    a1[1] = sub_8E8528(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_8E84F8(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1)
  {
    sub_8E5184((uint64_t)v1, *v1);
    operator delete((void *)*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_8E8528(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v12 = a4;
  if (a2 != a3)
  {
    int64_t v6 = a2 + 3;
    do
    {
      long long v8 = *(v6 - 3);
      *(_DWORD *)(v4 + 16) = *((_DWORD *)v6 - 8);
      *(_OWORD *)uint64_t v4 = v8;
      *(void *)(v4 + 24) = 0;
      *(void *)(v4 + 32) = 0;
      *(void *)(v4 + 40) = 0;
      sub_8E81F0((void *)(v4 + 24), *((void *)v6 - 3), *((void *)v6 - 2), 0x8E38E38E38E38E39 * ((uint64_t)(*((void *)v6 - 2) - *((void *)v6 - 3)) >> 4));
      uint64_t v9 = v6 - 3;
      uint64_t v10 = (unsigned char *)(v4 + 48);
      if (*((char *)v6 + 23) < 0)
      {
        sub_4200(v10, *(void **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v7 = *v6;
        *(void *)(v4 + 64) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v10 = v7;
      }
      uint64_t v4 = v12 + 72;
      v12 += 72;
      int64_t v6 = (long long *)((char *)v6 + 72);
    }
    while ((long long *)((char *)v9 + 72) != a3);
  }
  return v4;
}

void sub_8E861C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*v9)
  {
    sub_20AB8F4();
    sub_8E8658((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  sub_8E8658((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_8E8658(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_8E86A4(*(void *)a1, **(void **)(a1 + 16), **(void **)(a1 + 16), **(void **)(a1 + 8), **(void **)(a1 + 8));
  }
  return a1;
}

void sub_8E86A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 != a5)
  {
    for (uint64_t i = a3; i != a5; i -= 72)
    {
      if (*(char *)(i - 1) < 0)
      {
        operator delete(*(void **)(i - 24));
        long long v8 = *(void **)(i - 48);
        if (!v8) {
          continue;
        }
      }
      else
      {
        long long v8 = *(void **)(i - 48);
        if (!v8) {
          continue;
        }
      }
      uint64_t v9 = *(void **)(i - 40);
      long long v7 = v8;
      if (v9 != v8)
      {
        uint64_t v10 = (uint64_t)v9 - 56;
        while (1)
        {
          if (*(char *)(v10 + 55) < 0)
          {
            operator delete(*(void **)(v10 + 32));
            if ((*(char *)(v10 + 23) & 0x80000000) == 0)
            {
LABEL_16:
              if ((*(char *)(v10 - 9) & 0x80000000) == 0) {
                goto LABEL_17;
              }
              goto LABEL_23;
            }
          }
          else if ((*(char *)(v10 + 23) & 0x80000000) == 0)
          {
            goto LABEL_16;
          }
          operator delete(*(void **)v10);
          if ((*(char *)(v10 - 9) & 0x80000000) == 0)
          {
LABEL_17:
            int v13 = *(_DWORD *)(v10 - 48);
            if (v13 != 1) {
              goto LABEL_18;
            }
            goto LABEL_24;
          }
LABEL_23:
          operator delete(*(void **)(v10 - 32));
          int v13 = *(_DWORD *)(v10 - 48);
          if (v13 != 1)
          {
LABEL_18:
            if (v13 || (*(char *)(v10 - 49) & 0x80000000) == 0) {
              goto LABEL_13;
            }
            uint64_t v11 = *(void **)(v10 - 72);
            goto LABEL_12;
          }
LABEL_24:
          uint64_t v11 = *(void **)(v10 - 72);
          if (!v11) {
            goto LABEL_13;
          }
          *(void *)(v10 - 64) = v11;
LABEL_12:
          operator delete(v11);
LABEL_13:
          uint64_t v12 = (void *)(v10 - 88);
          v10 -= 144;
          if (v12 == v8)
          {
            long long v7 = *(void **)(i - 48);
            break;
          }
        }
      }
      *(void *)(i - 40) = v8;
      operator delete(v7);
    }
  }
}

void *sub_8E87C4(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = result;
    if (a4 >= 0x19999999999999ALL) {
      sub_2E00();
    }
    double result = operator new(160 * a4);
    long long v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = &result[20 * a4];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        double result = sub_8E8950(&v8[v9 / 8], (long long *)(a2 + v9));
        v9 += 160;
      }
      while (a2 + v9 != a3);
      long long v8 = (void *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_8E8884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_8E8898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 160)
    sub_8E41A0(v10 - 160 + v11);
  *(void *)(v9 + 8) = v10;
  sub_8E88C8(&a9);
  _Unwind_Resume(a1);
}

void ***sub_8E88C8(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = (uint64_t)v2[1];
      long long v5 = **v1;
      if ((void *)v4 != v3)
      {
        do
          uint64_t v4 = sub_8E41A0(v4 - 160);
        while ((void *)v4 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void *sub_8E8950(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_4F57A0((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  __dst[17] = 0;
  __dst[18] = 0;
  __dst[19] = 0;
  int64_t v6 = (unsigned char *)*((void *)a2 + 17);
  long long v5 = (unsigned char *)*((void *)a2 + 18);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_2E00();
    }
    long long v8 = (char *)operator new(v5 - v6);
    __dst[17] = v8;
    __dst[18] = v8;
    uint64_t v9 = &v8[8 * (v7 >> 3)];
    __dst[19] = v9;
    memcpy(v8, v6, v7);
    __dst[18] = v9;
  }
  return __dst;
}

void sub_8E8A10(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_8E8A4C(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = result;
    if (a4 >= 0x1AF286BCA1AF287) {
      sub_2E00();
    }
    double result = operator new(152 * a4);
    long long v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = &result[19 * a4];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        double result = sub_8E8BC0((char *)&v8[v9 / 8], (long long *)(a2 + v9));
        v9 += 152;
      }
      while (a2 + v9 != a3);
      long long v8 = (void *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_8E8B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_8E8B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_8E8E1C(v11, v12, v12, v10, v10);
  *(void *)(v9 + 8) = v10;
  sub_8E8B68(&a9);
  _Unwind_Resume(a1);
}

void ***sub_8E8B68(void ***a1)
{
  if (*((unsigned char *)a1 + 8)) {
    return a1;
  }
  uint64_t v3 = (uint64_t *)*a1;
  uint64_t v4 = (uint64_t)**a1;
  if (!v4) {
    return a1;
  }
  sub_8E40F8((uint64_t)v3, v4);
  operator delete(**a1);
  return a1;
}

char *sub_8E8BC0(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a2, *((void *)a2 + 1));
    long long v5 = __dst + 24;
    if ((*((char *)a2 + 47) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
    long long v5 = __dst + 24;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      long long v6 = *(long long *)((char *)a2 + 24);
      *((void *)v5 + 2) = *((void *)a2 + 5);
      *(_OWORD *)long long v5 = v6;
      goto LABEL_6;
    }
  }
  sub_4200(v5, *((void **)a2 + 3), *((void *)a2 + 4));
LABEL_6:
  long long v7 = a2[3];
  uint64_t v8 = *((void *)a2 + 8);
  *((void *)__dst + 9) = 0;
  *((void *)__dst + 8) = v8;
  *((_OWORD *)__dst + 3) = v7;
  *((void *)__dst + 10) = 0;
  *((void *)__dst + 11) = 0;
  uint64_t v10 = (unsigned char *)*((void *)a2 + 9);
  uint64_t v9 = (unsigned char *)*((void *)a2 + 10);
  int64_t v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0) {
      sub_2E00();
    }
    uint64_t v12 = (char *)operator new(v9 - v10);
    *((void *)__dst + 9) = v12;
    *((void *)__dst + 10) = v12;
    int v13 = &v12[8 * (v11 >> 3)];
    *((void *)__dst + 11) = v13;
    memcpy(v12, v10, v11);
    *((void *)__dst + 10) = v13;
  }
  *((void *)__dst + 12) = 0;
  *((void *)__dst + 13) = 0;
  *((void *)__dst + 14) = 0;
  long long v15 = (unsigned char *)*((void *)a2 + 12);
  uint64_t v14 = (unsigned char *)*((void *)a2 + 13);
  int64_t v16 = v14 - v15;
  if (v14 != v15)
  {
    if (v16 < 0) {
      sub_2E00();
    }
    int64_t v17 = (char *)operator new(v14 - v15);
    *((void *)__dst + 12) = v17;
    *((void *)__dst + 13) = v17;
    long long v18 = &v17[8 * (v16 >> 3)];
    *((void *)__dst + 14) = v18;
    memcpy(v17, v15, v16);
    *((void *)__dst + 13) = v18;
  }
  *((void *)__dst + 15) = 0;
  *((void *)__dst + 16) = 0;
  *((void *)__dst + 17) = 0;
  uint64_t v20 = (unsigned char *)*((void *)a2 + 15);
  uint64_t v19 = (unsigned char *)*((void *)a2 + 16);
  int64_t v21 = v19 - v20;
  if (v19 != v20)
  {
    if (v21 < 0) {
      sub_2E00();
    }
    int64_t v22 = (char *)operator new(v19 - v20);
    *((void *)__dst + 15) = v22;
    *((void *)__dst + 16) = v22;
    uint64_t v23 = &v22[8 * (v21 >> 3)];
    *((void *)__dst + 17) = v23;
    memcpy(v22, v20, v21);
    *((void *)__dst + 16) = v23;
  }
  __dst[144] = *((unsigned char *)a2 + 144);
  return __dst;
}

void sub_8E8D68(_Unwind_Exception *exception_object)
{
  if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_8E8E1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 != a5)
  {
    for (uint64_t i = a3; i != a5; i -= 152)
    {
      long long v7 = *(void **)(i - 32);
      if (v7)
      {
        *(void *)(i - 24) = v7;
        operator delete(v7);
      }
      uint64_t v8 = *(void **)(i - 56);
      if (v8)
      {
        *(void *)(i - 48) = v8;
        operator delete(v8);
      }
      uint64_t v9 = *(void **)(i - 80);
      if (v9)
      {
        *(void *)(i - 72) = v9;
        operator delete(v9);
      }
      if (*(char *)(i - 105) < 0)
      {
        operator delete(*(void **)(i - 128));
        if (*(char *)(i - 129) < 0) {
LABEL_14:
        }
          operator delete(*(void **)(i - 152));
      }
      else if (*(char *)(i - 129) < 0)
      {
        goto LABEL_14;
      }
    }
  }
}

uint64_t sub_8E8EBC(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = (void *)result;
    if (a4 >= 0xD20D20D20D20D3) {
      sub_2E00();
    }
    double result = (uint64_t)operator new(312 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = result + 312 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        double result = sub_8E904C(v8 + v9, a2 + v9);
        v9 += 312;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_8E8F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_8E8F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 312)
    sub_8E49DC(v10 - 312 + v11);
  *(void *)(v9 + 8) = v10;
  sub_8E8FC4(&a9);
  _Unwind_Resume(a1);
}

void ***sub_8E8FC4(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = (uint64_t)v2[1];
      long long v5 = **v1;
      if ((void *)v4 != v3)
      {
        do
          uint64_t v4 = sub_8E49DC(v4 - 312);
        while ((void *)v4 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_8E904C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_8E9348((void *)a1, *(void *)a2, *(void *)(a2 + 8), 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4));
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  long long v5 = *(unsigned char **)(a2 + 24);
  uint64_t v4 = *(unsigned char **)(a2 + 32);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v6 >> 3) >= 0x666666666666667) {
      sub_2E00();
    }
    long long v7 = (char *)operator new(v6);
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 32) = v7;
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a1 + 40) = v8;
    memcpy(v7, v5, v6 - 7);
    *(void *)(a1 + 32) = v8;
  }
  long long v9 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v9;
  if (*(char *)(a2 + 95) < 0)
  {
    sub_4200((unsigned char *)(a1 + 72), *(void **)(a2 + 72), *(void *)(a2 + 80));
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = v10;
  }
  if (*(char *)(a2 + 119) < 0)
  {
    sub_4200((unsigned char *)(a1 + 96), *(void **)(a2 + 96), *(void *)(a2 + 104));
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 96);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = v11;
  }
  if (*(char *)(a2 + 143) < 0)
  {
    sub_4200((unsigned char *)(a1 + 120), *(void **)(a2 + 120), *(void *)(a2 + 128));
  }
  else
  {
    long long v12 = *(_OWORD *)(a2 + 120);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = v12;
  }
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  uint64_t v14 = *(unsigned char **)(a2 + 144);
  int v13 = *(unsigned char **)(a2 + 152);
  int64_t v15 = v13 - v14;
  if (v13 != v14)
  {
    if (v15 < 0) {
      sub_2E00();
    }
    int64_t v16 = (char *)operator new(v13 - v14);
    *(void *)(a1 + 144) = v16;
    *(void *)(a1 + 152) = v16;
    int64_t v17 = &v16[8 * (v15 >> 3)];
    *(void *)(a1 + 160) = v17;
    memcpy(v16, v14, v15);
    *(void *)(a1 + 152) = v17;
  }
  sub_4F57A0(a1 + 168, a2 + 168);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  long long v18 = (unsigned char *)(a1 + 288);
  if (*(char *)(a2 + 311) < 0)
  {
    sub_4200(v18, *(void **)(a2 + 288), *(void *)(a2 + 296));
  }
  else
  {
    long long v19 = *(_OWORD *)(a2 + 288);
    *(void *)(a1 + 304) = *(void *)(a2 + 304);
    *(_OWORD *)long long v18 = v19;
  }
  return a1;
}

void sub_8E9260(_Unwind_Exception *a1)
{
  sub_4D9814(v7);
  long long v9 = *v6;
  if (*v6)
  {
    *(void *)(v1 + 152) = v9;
    operator delete(v9);
    if (*(char *)(v1 + 143) < 0)
    {
LABEL_3:
      operator delete(*v5);
      if ((*(char *)(v1 + 119) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if (*(char *)(v1 + 143) < 0)
  {
    goto LABEL_3;
  }
  if ((*(char *)(v1 + 119) & 0x80000000) == 0)
  {
LABEL_4:
    if (*(char *)(v1 + 95) < 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(*v4);
  if (*(char *)(v1 + 95) < 0)
  {
LABEL_5:
    operator delete(*v3);
    long long v10 = *v2;
    if (*v2) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  long long v10 = *v2;
  if (*v2)
  {
LABEL_6:
    *(void *)(v1 + 32) = v10;
    operator delete(v10);
    sub_8E4B64((void **)v1);
    _Unwind_Resume(a1);
  }
LABEL_11:
  sub_8E4B64((void **)v1);
  _Unwind_Resume(a1);
}

void sub_8E9338()
{
  if (*v0) {
    JUMPOUT(0x8E92E0);
  }
  JUMPOUT(0x8E9328);
}

void *sub_8E9348(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = result;
    if (a4 >= 0x111111111111112) {
      sub_2E00();
    }
    double result = operator new(240 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = &result[30 * a4];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        double result = sub_8E9510((uint64_t)(v5 + 2), (uint64_t)&v8[v9 / 8], (uint64_t *)(a2 + v9));
        v9 += 240;
      }
      while (a2 + v9 != a3);
      uint64_t v8 = (void *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_8E9410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_8E9424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  if (v11) {
    sub_20AB960();
  }
  *(void *)(v9 + 8) = v10;
  sub_8E944C(&a9);
  _Unwind_Resume(a1);
}

void ***sub_8E944C(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (void **)**result;
    if (v3)
    {
      uint64_t v4 = (void **)v2[1];
      long long v5 = **result;
      if (v4 == v3)
      {
LABEL_13:
        v2[1] = v3;
        operator delete(v5);
        return v1;
      }
      while (1)
      {
        if (*((char *)v4 - 1) < 0)
        {
          operator delete(*(v4 - 3));
          sub_4D4B58((uint64_t)(v4 - 24));
          if (*((char *)v4 - 201) < 0) {
LABEL_11:
          }
            operator delete(*(v4 - 28));
        }
        else
        {
          sub_4D4B58((uint64_t)(v4 - 24));
          if (*((char *)v4 - 201) < 0) {
            goto LABEL_11;
          }
        }
        v4 -= 30;
        if (v4 == v3)
        {
          long long v5 = **v1;
          goto LABEL_13;
        }
      }
    }
  }
  return result;
}

unsigned char *sub_8E9510(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
  *(void *)a2 = v5;
  int64_t v6 = (unsigned char *)(a2 + 16);
  if (*((char *)a3 + 39) < 0)
  {
    sub_4200(v6, (void *)a3[2], a3[3]);
  }
  else
  {
    long long v7 = *((_OWORD *)a3 + 1);
    *(void *)(a2 + 32) = a3[4];
    *(_OWORD *)int64_t v6 = v7;
  }
  *(void *)(a2 + 40) = a3[5];
  sub_4F58AC(a2 + 48, (uint64_t)(a3 + 6));
  *(_DWORD *)(a2 + 208) = *((_DWORD *)a3 + 52);
  double result = (unsigned char *)(a2 + 216);
  if (*((char *)a3 + 239) < 0) {
    return sub_4200(result, (void *)a3[27], a3[28]);
  }
  long long v9 = *(_OWORD *)(a3 + 27);
  *(void *)(a2 + 232) = a3[29];
  *(_OWORD *)double result = v9;
  return result;
}

void sub_8E95D4(_Unwind_Exception *a1)
{
  sub_4D4B58(v3);
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_8E9600(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = (void *)result;
    if (a4 >= 0x333333333333334) {
      sub_2E00();
    }
    double result = (uint64_t)operator new(80 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = result + 80 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        double result = sub_8E9770(v8 + v9, a2 + v9);
        v9 += 80;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_8E96D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_8E96E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_8E98A0(v11, v12, v12, v10, v10);
  *(void *)(v9 + 8) = v10;
  sub_8E9718(&a9);
  _Unwind_Resume(a1);
}

void ***sub_8E9718(void ***a1)
{
  if (*((unsigned char *)a1 + 8)) {
    return a1;
  }
  uint64_t v3 = (uint64_t *)*a1;
  uint64_t v4 = (uint64_t)**a1;
  if (!v4) {
    return a1;
  }
  sub_8E4C04((uint64_t)v3, v4);
  operator delete(**a1);
  return a1;
}

uint64_t sub_8E9770(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v5 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  int64_t v6 = v4 - *(void *)a2;
  if (v4 != *(void *)a2)
  {
    if (v6 < 0) {
      sub_2E00();
    }
    long long v7 = (char *)operator new(v4 - *(void *)a2);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a1 + 16) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a1 + 8) = v8;
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_8E81F0((void *)(a1 + 24), *(void *)(a2 + 24), *(void *)(a2 + 32), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 4));
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v9 = (unsigned char *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    sub_4200(v9, *(void **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)uint64_t v9 = v10;
  }
  return a1;
}

void sub_8E9870(_Unwind_Exception *a1)
{
  sub_8E4838(v2);
  uint64_t v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void sub_8E98A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 != a5)
  {
    uint64_t v6 = a3;
    do
    {
      if (*(char *)(v6 - 1) < 0)
      {
        operator delete(*(void **)(v6 - 24));
        long long v7 = *(void **)(v6 - 56);
        if (!v7)
        {
LABEL_6:
          uint64_t v8 = v6 - 80;
          uint64_t v9 = *(void **)(v6 - 80);
          if (v9) {
            goto LABEL_27;
          }
          goto LABEL_3;
        }
      }
      else
      {
        long long v7 = *(void **)(v6 - 56);
        if (!v7) {
          goto LABEL_6;
        }
      }
      long long v10 = *(void **)(v6 - 48);
      uint64_t v11 = v7;
      if (v10 == v7) {
        goto LABEL_26;
      }
      uint64_t v12 = (uint64_t)v10 - 56;
      do
      {
        if (*(char *)(v12 + 55) < 0)
        {
          operator delete(*(void **)(v12 + 32));
          if ((*(char *)(v12 + 23) & 0x80000000) == 0)
          {
LABEL_15:
            if ((*(char *)(v12 - 9) & 0x80000000) == 0) {
              goto LABEL_16;
            }
            goto LABEL_22;
          }
        }
        else if ((*(char *)(v12 + 23) & 0x80000000) == 0)
        {
          goto LABEL_15;
        }
        operator delete(*(void **)v12);
        if ((*(char *)(v12 - 9) & 0x80000000) == 0)
        {
LABEL_16:
          int v15 = *(_DWORD *)(v12 - 48);
          if (v15 != 1) {
            goto LABEL_17;
          }
          goto LABEL_23;
        }
LABEL_22:
        operator delete(*(void **)(v12 - 32));
        int v15 = *(_DWORD *)(v12 - 48);
        if (v15 != 1)
        {
LABEL_17:
          if (!v15 && *(char *)(v12 - 49) < 0)
          {
            int v13 = *(void **)(v12 - 72);
LABEL_11:
            operator delete(v13);
            goto LABEL_12;
          }
          goto LABEL_12;
        }
LABEL_23:
        int v13 = *(void **)(v12 - 72);
        if (v13)
        {
          *(void *)(v12 - 64) = v13;
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v14 = (void *)(v12 - 88);
        v12 -= 144;
      }
      while (v14 != v7);
      uint64_t v11 = *(void **)(v6 - 56);
LABEL_26:
      *(void *)(v6 - 48) = v7;
      operator delete(v11);
      uint64_t v8 = v6 - 80;
      uint64_t v9 = *(void **)(v6 - 80);
      if (v9)
      {
LABEL_27:
        *(void *)(v6 - 72) = v9;
        operator delete(v9);
      }
LABEL_3:
      uint64_t v6 = v8;
    }
    while (v8 != a5);
  }
}

void *sub_8E99E4(void *a1, uint64_t a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)(a2 + 8);
  int64_t v6 = (int64_t)v5 - *(void *)a2;
  if (v5 != *(void **)a2)
  {
    unint64_t v7 = 0x193D4BB7E327A977 * (v6 >> 3);
    if (v7 >= 0x73615A240E6C2CLL) {
      sub_2E00();
    }
    uint64_t v8 = operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[71 * v7];
    a1[1] = sub_8E9AC8(v3, v4, v5, v8);
  }
  return a1;
}

void sub_8E9A9C(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1) {
    sub_20AB9B4((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_8E9AC8(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v14 = a4;
  if (a2 != a3)
  {
    int64_t v6 = a2 + 3;
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      uint64_t v8 = (unsigned char *)*(v6 - 3);
      unint64_t v7 = (unsigned char *)*(v6 - 2);
      uint64_t v9 = v6 - 3;
      int64_t v10 = v7 - v8;
      if (v7 != v8)
      {
        if (v10 < 0) {
          sub_2E00();
        }
        uint64_t v11 = (char *)operator new(v7 - v8);
        void *v4 = v11;
        v4[1] = v11;
        uint64_t v12 = &v11[8 * (v10 >> 3)];
        v4[2] = v12;
        memcpy(v11, v8, v10);
        v4[1] = v12;
      }
      sub_8E9C5C((uint64_t)(v4 + 3), v6);
      v4[70] = v6[67];
      uint64_t v4 = v14 + 71;
      v14 += 71;
      v6 += 71;
    }
    while (v9 + 71 != a3);
  }
  return v4;
}

void sub_8E9BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_8E9BE0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_8E9BE0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    if (v3 != v4)
    {
      uint64_t v5 = v3 - 568;
      do
      {
        sub_8E57D0((void *)(v5 + 24));
        unint64_t v7 = *(void **)v5;
        if (*(void *)v5)
        {
          *(void *)(v5 + 8) = v7;
          operator delete(v7);
        }
        BOOL v6 = v5 == v4;
        v5 -= 568;
      }
      while (!v6);
    }
  }
  return a1;
}

uint64_t sub_8E9C5C(uint64_t a1, void *a2)
{
  *(void *)a1 = *a2;
  sub_4F58AC(a1 + 8, (uint64_t)(a2 + 1));
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  sub_5950E8(a1 + 168, a2[21], a2[22], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[22] - a2[21]) >> 5));
  sub_4F58AC(a1 + 192, (uint64_t)(a2 + 24));
  sub_4F58AC(a1 + 352, (uint64_t)(a2 + 44));
  *(void *)(a1 + 528) = 0;
  *(_OWORD *)(a1 + 512) = 0u;
  sub_8E9D68((char *)(a1 + 512), a2[64], a2[65], (uint64_t)(a2[65] - a2[64]) >> 5);
  return a1;
}

void sub_8E9D18(_Unwind_Exception *a1)
{
  sub_4D4B58(v4);
  sub_4D4B58(v3);
  sub_59213C(v2);
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_8E9D54(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

char *sub_8E9D68(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = result;
    if (a4 >> 59) {
      sub_2E00();
    }
    double result = (char *)operator new(32 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = &result[32 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        double result = &v8[v9];
        uint64_t v10 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          double result = (char *)sub_4200(result, *(void **)v10, *(void *)(v10 + 8));
        }
        else
        {
          *(_OWORD *)double result = *(_OWORD *)v10;
          *((void *)result + 2) = *(void *)(v10 + 16);
        }
        v8[v9 + 24] = *(unsigned char *)(a2 + v9 + 24);
        v9 += 32;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_8E9E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_8E9E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 32)
  {
    if (*(char *)(v10 + v11 - 9) < 0) {
      operator delete(*(void **)(v10 + v11 - 32));
    }
  }
  *(void *)(v9 + 8) = v10;
  sub_3D68C4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_8E9E98(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 2448;
    sub_8E42D4(i - 2440);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_8E9EF0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_243AF98;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = &off_243AEC8;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = &off_243AF98;
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = &off_243AF08;
  *(void *)(a1 + 48) = v6;
  long long v7 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v7;
  *(_OWORD *)(a2 + 64) = 0u;
  *(void *)(a2 + 56) = 0;
  long long v8 = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a2 + 88) = 0u;
  *(void *)(a2 + 80) = 0;
  *(void *)(a1 + 104) = &off_243AF98;
  uint64_t v9 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = &off_243AF38;
  *(void *)(a1 + 112) = v9;
  sub_463750(a1 + 120, a2 + 120);
  *(void *)(a1 + 1176) = &off_243AF98;
  *(void *)(a1 + 1184) = *(void *)(a2 + 1184);
  *(void *)(a1 + 1176) = &off_243AF68;
  long long v10 = *(_OWORD *)(a2 + 1208);
  *(_OWORD *)(a1 + 1192) = *(_OWORD *)(a2 + 1192);
  *(_OWORD *)(a1 + 1208) = v10;
  *(void *)(a1 + 1224) = 0;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(void *)(a1 + 1224) = *(void *)(a2 + 1224);
  *(void *)(a1 + 1232) = *(void *)(a2 + 1232);
  *(void *)(a1 + 1240) = *(void *)(a2 + 1240);
  *(void *)(a2 + 1240) = 0;
  *(_OWORD *)(a2 + 1224) = 0u;
  *(void *)(a1 + 1264) = 0;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1248) = *(_OWORD *)(a2 + 1248);
  *(void *)(a1 + 1264) = *(void *)(a2 + 1264);
  *(void *)(a2 + 1264) = 0;
  *(_OWORD *)(a2 + 1248) = 0u;
  *(void *)(a1 + 1288) = 0;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(void *)(a1 + 1272) = *(void *)(a2 + 1272);
  *(void *)(a1 + 1280) = *(void *)(a2 + 1280);
  *(void *)(a1 + 1288) = *(void *)(a2 + 1288);
  *(void *)(a2 + 1288) = 0;
  *(_OWORD *)(a2 + 1272) = 0u;
  *(void *)(a1 + 1312) = 0;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1296) = *(_OWORD *)(a2 + 1296);
  *(void *)(a1 + 1312) = *(void *)(a2 + 1312);
  *(_OWORD *)(a2 + 1296) = 0u;
  uint64_t v11 = *(void *)(a2 + 1320);
  *(_OWORD *)(a2 + 1312) = 0u;
  *(void *)(a1 + 1320) = v11;
  LODWORD(v11) = *(_DWORD *)(a2 + 1328);
  *(unsigned char *)(a1 + 1332) = *(unsigned char *)(a2 + 1332);
  *(_DWORD *)(a1 + 1328) = v11;
  long long v12 = *(_OWORD *)(a2 + 1336);
  *(void *)(a1 + 1352) = *(void *)(a2 + 1352);
  *(_OWORD *)(a1 + 1336) = v12;
  *(void *)(a2 + 1336) = 0;
  *(_OWORD *)(a2 + 1344) = 0u;
  long long v13 = *(_OWORD *)(a2 + 1360);
  *(void *)(a1 + 1376) = *(void *)(a2 + 1376);
  *(_OWORD *)(a1 + 1360) = v13;
  *(_OWORD *)(a2 + 1368) = 0u;
  *(void *)(a2 + 1360) = 0;
  *(void *)(a1 + 1384) = &off_243AF98;
  *(void *)(a1 + 1392) = *(void *)(a2 + 1392);
  *(void *)(a1 + 1384) = &off_243AFB0;
  uint64_t v14 = *(void *)(a2 + 1400);
  *(_DWORD *)(a1 + 1408) = *(_DWORD *)(a2 + 1408);
  *(void *)(a1 + 1400) = v14;
  long long v15 = *(_OWORD *)(a2 + 1416);
  *(void *)(a1 + 1432) = *(void *)(a2 + 1432);
  *(_OWORD *)(a1 + 1416) = v15;
  *(void *)(a2 + 1416) = 0;
  *(_OWORD *)(a2 + 1424) = 0u;
  *(void *)(a1 + 1440) = &off_243AF98;
  *(void *)(a1 + 1448) = *(void *)(a2 + 1448);
  *(void *)(a1 + 1440) = &off_243AFE0;
  *(void *)(a1 + 1456) = 0;
  *(_OWORD *)(a1 + 1464) = 0u;
  *(_OWORD *)(a1 + 1456) = *(_OWORD *)(a2 + 1456);
  *(void *)(a1 + 1472) = *(void *)(a2 + 1472);
  *(void *)(a2 + 1472) = 0;
  *(_OWORD *)(a2 + 1456) = 0u;
  *(void *)(a1 + 1480) = &off_243AF98;
  *(void *)(a1 + 1488) = *(void *)(a2 + 1488);
  *(void *)(a1 + 1480) = &off_243B010;
  *(void *)(a1 + 1496) = 0;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(void *)(a1 + 1496) = *(void *)(a2 + 1496);
  *(void *)(a1 + 1504) = *(void *)(a2 + 1504);
  *(void *)(a1 + 1512) = *(void *)(a2 + 1512);
  *(void *)(a2 + 1512) = 0;
  *(_OWORD *)(a2 + 1496) = 0u;
  *(void *)(a1 + 1520) = &off_243AF98;
  *(void *)(a1 + 1528) = *(void *)(a2 + 1528);
  *(void *)(a1 + 1520) = &off_243B040;
  *(void *)(a1 + 1536) = 0;
  *(_OWORD *)(a1 + 1544) = 0u;
  *(_OWORD *)(a1 + 1536) = *(_OWORD *)(a2 + 1536);
  *(void *)(a1 + 1552) = *(void *)(a2 + 1552);
  *(void *)(a2 + 1552) = 0;
  *(_OWORD *)(a2 + 1536) = 0u;
  *(void *)(a1 + 1560) = &off_243AF98;
  *(void *)(a1 + 1568) = *(void *)(a2 + 1568);
  *(void *)(a1 + 1560) = &off_243B070;
  *(void *)(a1 + 1576) = 0;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(void *)(a1 + 1576) = *(void *)(a2 + 1576);
  *(void *)(a1 + 1584) = *(void *)(a2 + 1584);
  *(void *)(a1 + 1592) = *(void *)(a2 + 1592);
  *(void *)(a2 + 1592) = 0;
  *(_OWORD *)(a2 + 1576) = 0u;
  *(void *)(a1 + 1616) = 0;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_OWORD *)(a1 + 1600) = *(_OWORD *)(a2 + 1600);
  *(void *)(a1 + 1616) = *(void *)(a2 + 1616);
  *(void *)(a2 + 1616) = 0;
  *(_OWORD *)(a2 + 1600) = 0u;
  *(void *)(a1 + 1640) = 0;
  *(_OWORD *)(a1 + 1624) = 0u;
  *(void *)(a1 + 1624) = *(void *)(a2 + 1624);
  *(void *)(a1 + 1632) = *(void *)(a2 + 1632);
  *(void *)(a1 + 1640) = *(void *)(a2 + 1640);
  *(void *)(a2 + 1640) = 0;
  *(_OWORD *)(a2 + 1624) = 0u;
  *(void *)(a1 + 1664) = 0;
  *(_OWORD *)(a1 + 1648) = 0u;
  *(_OWORD *)(a1 + 1648) = *(_OWORD *)(a2 + 1648);
  *(void *)(a1 + 1664) = *(void *)(a2 + 1664);
  *(void *)(a2 + 1664) = 0;
  *(_OWORD *)(a2 + 1648) = 0u;
  *(void *)(a1 + 1688) = 0;
  *(_OWORD *)(a1 + 1672) = 0u;
  *(void *)(a1 + 1672) = *(void *)(a2 + 1672);
  *(void *)(a1 + 1680) = *(void *)(a2 + 1680);
  *(void *)(a1 + 1688) = *(void *)(a2 + 1688);
  *(void *)(a2 + 1688) = 0;
  *(_OWORD *)(a2 + 1672) = 0u;
  long long v16 = *(_OWORD *)(a2 + 1696);
  *(void *)(a1 + 1712) = *(void *)(a2 + 1712);
  *(_OWORD *)(a1 + 1696) = v16;
  *(void *)(a2 + 1696) = 0;
  *(_OWORD *)(a2 + 1704) = 0u;
  long long v17 = *(_OWORD *)(a2 + 1720);
  *(void *)(a1 + 1736) = *(void *)(a2 + 1736);
  *(_OWORD *)(a1 + 1720) = v17;
  *(_OWORD *)(a2 + 1728) = 0u;
  *(void *)(a2 + 1720) = 0;
  long long v18 = *(_OWORD *)(a2 + 1744);
  *(void *)(a1 + 1760) = *(void *)(a2 + 1760);
  *(_OWORD *)(a1 + 1744) = v18;
  *(void *)(a2 + 1760) = 0;
  *(_OWORD *)(a2 + 1744) = 0u;
  *(void *)(a1 + 1768) = *(void *)(a2 + 1768);
  *(void *)(a1 + 1776) = &off_243AF98;
  *(void *)(a1 + 1784) = *(void *)(a2 + 1784);
  *(void *)(a1 + 1776) = &off_243B0A0;
  *(void *)(a1 + 1792) = *(void *)(a2 + 1792);
  long long v19 = *(_OWORD *)(a2 + 1800);
  *(void *)(a1 + 1816) = *(void *)(a2 + 1816);
  *(_OWORD *)(a1 + 1800) = v19;
  *(_OWORD *)(a2 + 1808) = 0u;
  *(void *)(a2 + 1800) = 0;
  long long v20 = *(_OWORD *)(a2 + 1824);
  *(void *)(a1 + 1840) = *(void *)(a2 + 1840);
  *(_OWORD *)(a1 + 1824) = v20;
  *(_OWORD *)(a2 + 1832) = 0u;
  *(void *)(a2 + 1824) = 0;
  uint64_t v21 = *(void *)(a2 + 1848);
  *(_DWORD *)(a1 + 1856) = *(_DWORD *)(a2 + 1856);
  *(void *)(a1 + 1848) = v21;
  *(void *)(a1 + 1864) = 0;
  *(_OWORD *)(a1 + 1872) = 0u;
  *(void *)(a1 + 1864) = *(void *)(a2 + 1864);
  *(void *)(a1 + 1872) = *(void *)(a2 + 1872);
  *(void *)(a1 + 1880) = *(void *)(a2 + 1880);
  *(void *)(a2 + 1880) = 0;
  *(_OWORD *)(a2 + 1864) = 0u;
  *(void *)(a1 + 1904) = 0;
  *(_OWORD *)(a1 + 1888) = 0u;
  *(_OWORD *)(a1 + 1888) = *(_OWORD *)(a2 + 1888);
  *(void *)(a1 + 1904) = *(void *)(a2 + 1904);
  *(void *)(a2 + 1904) = 0;
  *(_OWORD *)(a2 + 1888) = 0u;
  long long v22 = *(_OWORD *)(a2 + 1912);
  *(void *)(a1 + 1928) = *(void *)(a2 + 1928);
  *(_OWORD *)(a1 + 1912) = v22;
  *(void *)(a2 + 1912) = 0;
  *(_OWORD *)(a2 + 1920) = 0u;
  int v23 = *(_DWORD *)(a2 + 1936);
  *(unsigned char *)(a1 + 1940) = *(unsigned char *)(a2 + 1940);
  *(_DWORD *)(a1 + 1936) = v23;
  *(void *)(a1 + 1944) = &off_243AF98;
  *(void *)(a1 + 1952) = *(void *)(a2 + 1952);
  *(void *)(a1 + 1944) = &off_243B0D0;
  *(void *)(a1 + 1960) = 0;
  *(_OWORD *)(a1 + 1968) = 0u;
  *(void *)(a1 + 1960) = *(void *)(a2 + 1960);
  *(void *)(a1 + 1968) = *(void *)(a2 + 1968);
  *(void *)(a1 + 1976) = *(void *)(a2 + 1976);
  *(void *)(a2 + 1976) = 0;
  *(_OWORD *)(a2 + 1960) = 0u;
  *(void *)(a1 + 2000) = 0;
  *(_OWORD *)(a1 + 1984) = 0u;
  *(_OWORD *)(a1 + 1984) = *(_OWORD *)(a2 + 1984);
  *(void *)(a1 + 2000) = *(void *)(a2 + 2000);
  *(_OWORD *)(a2 + 1984) = 0u;
  uint64_t v24 = *(void *)(a2 + 2008);
  *(_OWORD *)(a2 + 2000) = 0u;
  *(void *)(a1 + 2008) = v24;
  *(void *)(a1 + 2016) = *(void *)(a2 + 2016);
  *(void *)(a2 + 2016) = 0;
  uint64_t v25 = *(void *)(a2 + 2024);
  *(void *)(a1 + 2024) = v25;
  uint64_t v26 = *(void *)(a2 + 2032);
  *(void *)(a1 + 2032) = v26;
  *(_DWORD *)(a1 + 2040) = *(_DWORD *)(a2 + 2040);
  if (v26)
  {
    unint64_t v27 = *(void *)(v25 + 8);
    unint64_t v28 = *(void *)(a1 + 2016);
    if ((v28 & (v28 - 1)) != 0)
    {
      if (v27 >= v28) {
        v27 %= v28;
      }
    }
    else
    {
      v27 &= v28 - 1;
    }
    *(void *)(v24 + 8 * v27) = a1 + 2024;
    *(void *)(a2 + 2024) = 0;
    *(void *)(a2 + 2032) = 0;
  }
  *(void *)(a1 + 2048) = &off_243AF98;
  *(void *)(a1 + 2056) = *(void *)(a2 + 2056);
  *(void *)(a1 + 2048) = &off_243B100;
  *(void *)(a1 + 2064) = 0;
  *(void *)(a1 + 2080) = 0;
  *(void *)(a1 + 2072) = 0;
  *(_OWORD *)(a1 + 2064) = *(_OWORD *)(a2 + 2064);
  *(void *)(a1 + 2080) = *(void *)(a2 + 2080);
  *(void *)(a2 + 2072) = 0;
  *(void *)(a2 + 2064) = 0;
  *(void *)(a2 + 2080) = 0;
  *(void *)(a1 + 2096) = 0;
  *(void *)(a1 + 2088) = 0;
  *(void *)(a1 + 2104) = 0;
  *(void *)(a1 + 2088) = *(void *)(a2 + 2088);
  *(void *)(a1 + 2096) = *(void *)(a2 + 2096);
  *(void *)(a1 + 2104) = *(void *)(a2 + 2104);
  *(void *)(a2 + 2104) = 0;
  *(void *)(a2 + 2096) = 0;
  *(void *)(a2 + 2088) = 0;
  *(_OWORD *)(a1 + 2112) = *(_OWORD *)(a2 + 2112);
  *(void *)(a1 + 2128) = &off_243AF98;
  *(void *)(a1 + 2136) = *(void *)(a2 + 2136);
  *(void *)(a1 + 2128) = &off_243B130;
  *(void *)(a1 + 2144) = 0;
  *(void *)(a1 + 2160) = 0;
  *(void *)(a1 + 2152) = 0;
  *(_OWORD *)(a1 + 2144) = *(_OWORD *)(a2 + 2144);
  *(void *)(a1 + 2160) = *(void *)(a2 + 2160);
  *(void *)(a2 + 2152) = 0;
  *(void *)(a2 + 2144) = 0;
  *(void *)(a2 + 2160) = 0;
  *(void *)(a1 + 2168) = &off_243AF98;
  *(void *)(a1 + 2176) = *(void *)(a2 + 2176);
  *(void *)(a1 + 2168) = &off_243B160;
  *(void *)(a1 + 2184) = 0;
  *(void *)(a1 + 2200) = 0;
  *(void *)(a1 + 2192) = 0;
  *(void *)(a1 + 2184) = *(void *)(a2 + 2184);
  *(void *)(a1 + 2192) = *(void *)(a2 + 2192);
  *(void *)(a1 + 2200) = *(void *)(a2 + 2200);
  *(void *)(a2 + 2192) = 0;
  *(void *)(a2 + 2184) = 0;
  *(void *)(a2 + 2200) = 0;
  *(void *)(a1 + 2208) = &off_243AF98;
  *(void *)(a1 + 2216) = *(void *)(a2 + 2216);
  *(void *)(a1 + 2208) = &off_243B190;
  *(void *)(a1 + 2224) = 0;
  *(void *)(a1 + 2240) = 0;
  *(void *)(a1 + 2232) = 0;
  *(_OWORD *)(a1 + 2224) = *(_OWORD *)(a2 + 2224);
  *(void *)(a1 + 2240) = *(void *)(a2 + 2240);
  *(void *)(a2 + 2240) = 0;
  *(void *)(a2 + 2232) = 0;
  *(void *)(a2 + 2224) = 0;
  *(void *)(a1 + 2248) = *(void *)(a2 + 2248);
  *(void *)(a1 + 2256) = &off_243AF98;
  *(void *)(a1 + 2264) = *(void *)(a2 + 2264);
  *(void *)(a1 + 2256) = &off_243B1C0;
  long long v29 = *(_OWORD *)(a2 + 2272);
  long long v30 = *(_OWORD *)(a2 + 2288);
  *(_OWORD *)(a1 + 2300) = *(_OWORD *)(a2 + 2300);
  *(_OWORD *)(a1 + 2288) = v30;
  *(_OWORD *)(a1 + 2272) = v29;
  *(_DWORD *)(a1 + 2352) = *(_DWORD *)(a2 + 2352);
  sub_4F38B0((void *)*(unsigned int *)(a2 + 2352), (uint64_t *)(a2 + 2320), (void *)(a1 + 2320));
  *(void *)(a1 + 2360) = *(void *)(a2 + 2360);
  long long v31 = *(_OWORD *)(a2 + 2368);
  *(void *)(a1 + 2384) = *(void *)(a2 + 2384);
  *(_OWORD *)(a1 + 2368) = v31;
  *(void *)(a2 + 2384) = 0;
  *(void *)(a2 + 2376) = 0;
  *(void *)(a2 + 2368) = 0;
  *(unsigned char *)(a1 + 2392) = *(unsigned char *)(a2 + 2392);
  long long v32 = *(_OWORD *)(a2 + 2400);
  *(void *)(a1 + 2416) = *(void *)(a2 + 2416);
  *(_OWORD *)(a1 + 2400) = v32;
  *(void *)(a2 + 2416) = 0;
  *(void *)(a2 + 2408) = 0;
  *(void *)(a2 + 2400) = 0;
  *(unsigned char *)(a1 + 2424) = *(unsigned char *)(a2 + 2424);
  return a1;
}

double sub_8EA904()
{
  byte_25D0B3F = 1;
  word_25D0B28 = 65;
  byte_25D0B57 = 1;
  word_25D0B40 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25D0BE8 = 0u;
  *(_OWORD *)&qword_25D0BF8 = 0u;
  dword_25D0C08 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25D0BE8, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25D0BE8, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25D0BE8, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25D0BE8, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25D0B6F = 8;
  strcpy((char *)&qword_25D0B58, "any_mode");
  byte_25D0B87 = 7;
  strcpy((char *)&dword_25D0B70, "cycling");
  byte_25D0B9F = 7;
  strcpy((char *)&dword_25D0B88, "driving");
  byte_25D0BB7 = 7;
  strcpy((char *)&dword_25D0BA0, "walking");
  qword_25D0BC0 = 0;
  qword_25D0BC8 = 0;
  qword_25D0BB8 = 0;
  v0 = operator new(9uLL);
  *(void *)v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25D0BB8 = (uint64_t)v0;
  qword_25D0BC0 = (uint64_t)(v0 + 9);
  qword_25D0BC8 = (uint64_t)(v0 + 9);
  qword_25D0BD0 = 0;
  qword_25D0BD8 = 0;
  unk_25D0BE0 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25D0BD8 = (uint64_t)(v1 + 9);
  unk_25D0BE0 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25D0BD0 = (uint64_t)v1;
  return result;
}

void sub_8EABCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25D0BF8) {
    sub_20ABA28((void **)qword_25D0BF8);
  }
  uint64_t v37 = (void *)xmmword_25D0BE8;
  *(void *)&xmmword_25D0BE8 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_8EAC6C(uint64_t a1, uint64_t a2, _DWORD *a3, int a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t a8, int a9, uint64_t a10, _DWORD *a11)
{
  sub_8EB534(a1, a2);
  *(_DWORD *)(v18 + 384) = *a3;
  *(_DWORD *)(v18 + 388) = a4;
  sub_8EB944((void *)(v18 + 392), a5);
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  sub_8EBD78(a1 + 416, *a6, a6[1], 0xEEEEEEEEEEEEEEEFLL * ((a6[1] - *a6) >> 3));
  sub_8EC784((void *)(a1 + 440), a7);
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0;
  long long v19 = *(const void **)a8;
  int64_t v20 = *(void *)(a8 + 8) - *(void *)a8;
  if (v20)
  {
    if (v20 < 0) {
      sub_2E00();
    }
    uint64_t v21 = (char *)operator new(v20);
    *(void *)(a1 + 464) = v21;
    *(void *)(a1 + 472) = v21;
    long long v22 = &v21[8 * (v20 >> 3)];
    *(void *)(a1 + 480) = v22;
    memcpy(v21, v19, v20 - 3);
    *(void *)(a1 + 472) = v22;
  }
  *(_DWORD *)(a1 + 488) = a9;
  sub_54214(a1 + 496, a10);
  *(unsigned char *)(a1 + 560) = 0;
  *(void *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_DWORD *)(a1 + 568) = *a11;
  sub_7A3ACC(a1 + 576, (uint64_t)(a11 + 2));
  return a1;
}

void sub_8EADAC(_Unwind_Exception *a1)
{
  int v8 = v6;
  char v10 = *v8;
  if (*v8)
  {
    *(void *)(v1 + 544) = v10;
    operator delete(v10);
  }
  sub_5450C(v7);
  int v11 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 472) = v11;
    operator delete(v11);
  }
  sub_8EAE48(v4);
  sub_8EAEC0(v3);
  sub_8EAF1C(v2);
  sub_8EAFE0(v1);
  _Unwind_Resume(a1);
}

void **sub_8EAE48(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    char v4 = *a1;
    if (v3 != v2)
    {
      int v5 = (char *)a1[1];
      do
      {
        uint64_t v7 = (void *)*((void *)v5 - 6);
        v5 -= 48;
        uint64_t v6 = v7;
        if (v7)
        {
          *((void *)v3 - 5) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      char v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_8EAEC0(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    char v4 = v2;
    if (v3 != v2)
    {
      do
        uint64_t v3 = sub_8EC658(v3 - 15);
      while (v3 != v2);
      char v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void ***sub_8EAF1C(void ***a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    char v4 = *a1;
    if (v3 != v2)
    {
      int v5 = a1[1];
      do
      {
        int v8 = (char *)*(v5 - 4);
        v5 -= 4;
        uint64_t v7 = v8;
        if (v8)
        {
          uint64_t v9 = (char *)*(v3 - 3);
          uint64_t v6 = v7;
          if (v9 != v7)
          {
            do
            {
              char v10 = (void *)*((void *)v9 - 3);
              if (v10)
              {
                *((void *)v9 - 2) = v10;
                operator delete(v10);
              }
              int v11 = (void *)*((void *)v9 - 7);
              if (v11)
              {
                *((void *)v9 - 6) = v11;
                operator delete(v11);
              }
              v9 -= 56;
            }
            while (v9 != v7);
            uint64_t v6 = *v5;
          }
          *(v3 - 3) = v7;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      char v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_8EAFE0(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 376);
  switch(v2)
  {
    case 2:
      return sub_402C7C(a1);
    case 1:
      return sub_8EB894(a1);
    case 0:
      uint64_t v3 = *(void **)(a1 + 96);
      if (v3)
      {
        *(void *)(a1 + 104) = v3;
        operator delete(v3);
      }
      char v4 = *(void **)(a1 + 72);
      if (v4)
      {
        *(void *)(a1 + 80) = v4;
        operator delete(v4);
      }
      int v5 = *(void **)(a1 + 24);
      if (v5)
      {
        *(void *)(a1 + 32) = v5;
        operator delete(v5);
      }
      break;
  }
  return a1;
}

uint64_t sub_8EB074(uint64_t a1, uint64_t a2, _DWORD *a3, int a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t a8, int a9, uint64_t a10, _DWORD *a11)
{
  return sub_8EAC6C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t sub_8EB08C(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, char a5)
{
  sub_8EB534(a1, a2);
  *(_DWORD *)(v9 + 384) = *a3;
  *(_OWORD *)(v9 + 496) = 0u;
  *(_OWORD *)(v9 + 512) = 0u;
  *(void *)(v9 + 484) = 0;
  *(_OWORD *)(v9 + 452) = 0u;
  *(_OWORD *)(v9 + 468) = 0u;
  *(_OWORD *)(v9 + 420) = 0u;
  *(_OWORD *)(v9 + 436) = 0u;
  *(_OWORD *)(v9 + 388) = 0u;
  *(_OWORD *)(v9 + 404) = 0u;
  *(_DWORD *)(v9 + 528) = 1065353216;
  *(void *)(v9 + 536) = 0;
  *(void *)(v9 + 552) = 0;
  *(void *)(v9 + 544) = 0;
  int v11 = *(const void **)a4;
  uint64_t v10 = *(void *)(a4 + 8);
  int64_t v12 = v10 - *(void *)a4;
  if (v10 != *(void *)a4)
  {
    if (v12 < 0) {
      sub_2E00();
    }
    char v13 = (char *)operator new(v12);
    *(void *)(a1 + 536) = v13;
    *(void *)(a1 + 544) = v13;
    int v14 = &v13[8 * (v12 >> 3)];
    *(void *)(a1 + 552) = v14;
    memcpy(v13, v11, v12);
    *(void *)(a1 + 544) = v14;
  }
  *(unsigned char *)(a1 + 560) = a5;
  *(_DWORD *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(void *)(a1 + 688) = 0;
  *(_DWORD *)(a1 + 696) = -1;
  *(_DWORD *)(a1 + 704) = -1;
  *(void *)(a1 + 712) = 0;
  *(void *)(a1 + 718) = 0;
  *(_DWORD *)(a1 + 728) = 0x7FFFFFFF;
  *(void *)(a1 + 744) = 0;
  *(_DWORD *)(a1 + 736) = 0x7FFFFFFF;
  *(void *)(a1 + 740) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 752) = 0;
  *(void *)&long long v15 = 0x8000000080000000;
  *(void *)(a1 + 760) = 0x8000000080000000;
  *(unsigned char *)(a1 + 816) = 0;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_DWORD *)(a1 + 820) = 0x7FFFFFFF;
  *(void *)(a1 + 824) = 0x8000000080000000;
  *(_DWORD *)(a1 + 840) = -1;
  *(_OWORD *)(a1 + 848) = xmmword_20E8160;
  *(_DWORD *)(a1 + 864) = -1;
  *(void *)(a1 + 878) = 0;
  *(void *)(a1 + 872) = 0;
  *(_DWORD *)(a1 + 888) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_DWORD *)(a1 + 896) = 0x7FFFFFFF;
  *(void *)(a1 + 900) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 920) = 0x8000000080000000;
  *(unsigned char *)(a1 + 976) = 0;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_DWORD *)(a1 + 980) = 0x7FFFFFFF;
  *(void *)(a1 + 984) = 0x8000000080000000;
  *(_DWORD *)(a1 + 1000) = -1;
  *(_OWORD *)(a1 + 1008) = xmmword_20E8160;
  *(_DWORD *)(a1 + 1024) = 0x7FFFFFFF;
  *(void *)(a1 + 1028) = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(void *)(a1 + 1056) = 0;
  *(void *)(a1 + 1064) = 0x8000000080000000;
  *(_DWORD *)(a1 + 1072) = 0x7FFFFFFF;
  *(void *)(a1 + 1080) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 1088) = 0x8000000080000000;
  *(_DWORD *)(a1 + 1096) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *((void *)&v15 + 1) = 0x8000000080000000;
  *(_OWORD *)(a1 + 1344) = v15;
  *(_OWORD *)(a1 + 1360) = v15;
  *(void *)(a1 + 1392) = 0;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(unsigned char *)(a1 + 1400) = 1;
  *(_DWORD *)(a1 + 1401) = 0;
  *(unsigned char *)(a1 + 1405) = 1;
  *(_DWORD *)(a1 + 1409) = 0;
  *(_DWORD *)(a1 + 1406) = 0;
  *(_OWORD *)(a1 + 1416) = 0u;
  *(_OWORD *)(a1 + 1432) = 0u;
  *(_OWORD *)(a1 + 1448) = 0u;
  *(_OWORD *)(a1 + 1464) = 0u;
  *(_OWORD *)(a1 + 1480) = 0u;
  *(_OWORD *)(a1 + 1496) = 0u;
  *(_OWORD *)(a1 + 1512) = 0u;
  *(_OWORD *)(a1 + 1528) = 0u;
  *(_OWORD *)(a1 + 1544) = 0u;
  *(_OWORD *)(a1 + 1560) = 0u;
  *(_OWORD *)(a1 + 1576) = 0u;
  *(_OWORD *)(a1 + 1592) = 0u;
  *(_OWORD *)(a1 + 1608) = 0u;
  *(void *)(a1 + 1624) = 0;
  return a1;
}

void sub_8EB2F0(_Unwind_Exception *a1)
{
  int v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 544) = v5;
    operator delete(v5);
  }
  sub_5450C(v2);
  uint64_t v6 = *(void **)(v1 + 464);
  if (v6)
  {
    *(void *)(v1 + 472) = v6;
    operator delete(v6);
  }
  sub_8EAE48((void **)(v1 + 440));
  sub_8EAEC0((void **)(v1 + 416));
  sub_8EAF1C((void ***)(v1 + 392));
  sub_8EAFE0(v1);
  _Unwind_Resume(a1);
}

double sub_8EB350(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 740);
  sub_8EB534(a1, a2);
  double result = 0.0;
  *(_OWORD *)(v4 + 496) = 0u;
  *(_OWORD *)(v4 + 512) = 0u;
  *(_OWORD *)(v4 + 384) = 0u;
  *(_OWORD *)(v4 + 400) = 0u;
  *(_OWORD *)(v4 + 416) = 0u;
  *(_OWORD *)(v4 + 432) = 0u;
  *(_OWORD *)(v4 + 448) = 0u;
  *(_OWORD *)(v4 + 464) = 0u;
  *(_OWORD *)(v4 + 476) = 0u;
  *(_DWORD *)(v4 + 528) = 1065353216;
  *(_DWORD *)(v4 + 568) = 0;
  *(_OWORD *)(v4 + 576) = 0u;
  *(_OWORD *)(v4 + 592) = 0u;
  *(_OWORD *)(v4 + 608) = 0u;
  *(_OWORD *)(v4 + 624) = 0u;
  *(_OWORD *)(v4 + 640) = 0u;
  *(_OWORD *)(v4 + 656) = 0u;
  *(_OWORD *)(v4 + 672) = 0u;
  *(void *)(v4 + 688) = 0;
  *(unsigned char *)(v4 + 560) = 0;
  *(void *)(v4 + 552) = 0;
  *(_OWORD *)(v4 + 536) = 0u;
  *(_DWORD *)(v4 + 696) = -1;
  *(_DWORD *)(v4 + 704) = -1;
  *(void *)(v4 + 718) = 0;
  *(void *)(v4 + 712) = 0;
  *(_DWORD *)(v4 + 728) = 0x7FFFFFFF;
  *(_OWORD *)(v4 + 744) = 0u;
  *(_DWORD *)(v4 + 736) = 0x7FFFFFFF;
  *uint64_t v2 = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)&long long v5 = 0x8000000080000000;
  *(void *)(v4 + 760) = 0x8000000080000000;
  *(unsigned char *)(v4 + 816) = 0;
  *(_OWORD *)(v4 + 784) = 0u;
  *(_OWORD *)(v4 + 800) = 0u;
  *(_OWORD *)(v4 + 768) = 0u;
  *(_DWORD *)(v4 + 820) = 0x7FFFFFFF;
  *(void *)(v4 + 824) = 0x8000000080000000;
  *(_DWORD *)(v4 + 840) = -1;
  *(_OWORD *)(v4 + 848) = xmmword_20E8160;
  *(_DWORD *)(v4 + 864) = -1;
  *(void *)(v4 + 878) = 0;
  *(void *)(v4 + 872) = 0;
  *(_DWORD *)(v4 + 888) = 0x7FFFFFFF;
  *(_OWORD *)(v4 + 904) = 0u;
  *(_DWORD *)(v4 + 896) = 0x7FFFFFFF;
  v2[20] = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(v4 + 920) = 0x8000000080000000;
  *(unsigned char *)(v4 + 976) = 0;
  *(_OWORD *)(v4 + 944) = 0u;
  *(_OWORD *)(v4 + 960) = 0u;
  *(_OWORD *)(v4 + 928) = 0u;
  *(_DWORD *)(v4 + 980) = 0x7FFFFFFF;
  *(void *)(v4 + 984) = 0x8000000080000000;
  *(_DWORD *)(v4 + 1000) = -1;
  *(_OWORD *)(v4 + 1008) = xmmword_20E8160;
  *(_DWORD *)(v4 + 1024) = 0x7FFFFFFF;
  v2[36] = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)(v4 + 1040) = 0u;
  *(void *)(v4 + 1056) = 0;
  *(void *)(v4 + 1064) = 0x8000000080000000;
  *(_DWORD *)(v4 + 1072) = 0x7FFFFFFF;
  *(void *)(v4 + 1080) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(v4 + 1088) = 0x8000000080000000;
  *(_DWORD *)(v4 + 1096) = 0x7FFFFFFF;
  *(_OWORD *)(v4 + 1328) = 0u;
  *(_OWORD *)(v4 + 1312) = 0u;
  *(_OWORD *)(v4 + 1296) = 0u;
  *(_OWORD *)(v4 + 1280) = 0u;
  *(_OWORD *)(v4 + 1264) = 0u;
  *(_OWORD *)(v4 + 1248) = 0u;
  *(_OWORD *)(v4 + 1232) = 0u;
  *(_OWORD *)(v4 + 1216) = 0u;
  *(_OWORD *)(v4 + 1200) = 0u;
  *(_OWORD *)(v4 + 1184) = 0u;
  *(_OWORD *)(v4 + 1168) = 0u;
  *(_OWORD *)(v4 + 1152) = 0u;
  *(_OWORD *)(v4 + 1136) = 0u;
  *(_OWORD *)(v4 + 1120) = 0u;
  *(_OWORD *)(v4 + 1104) = 0u;
  *((void *)&v5 + 1) = 0x8000000080000000;
  *(_OWORD *)(v4 + 1344) = v5;
  *(_OWORD *)(v4 + 1360) = v5;
  *(void *)(v4 + 1392) = 0;
  *(_OWORD *)(v4 + 1376) = 0u;
  *(unsigned char *)(v4 + 1400) = 1;
  *(_DWORD *)(v4 + 1401) = 0;
  *(unsigned char *)(v4 + 1405) = 1;
  *(_DWORD *)(v4 + 1409) = 0;
  *(_DWORD *)(v4 + 1406) = 0;
  *(_OWORD *)(v4 + 1416) = 0u;
  *(_OWORD *)(v4 + 1432) = 0u;
  *(_OWORD *)(v4 + 1448) = 0u;
  *(_OWORD *)(v4 + 1464) = 0u;
  *(_OWORD *)(v4 + 1480) = 0u;
  *(_OWORD *)(v4 + 1496) = 0u;
  *(_OWORD *)(v4 + 1512) = 0u;
  *(_OWORD *)(v4 + 1528) = 0u;
  *(_OWORD *)(v4 + 1544) = 0u;
  *(_OWORD *)(v4 + 1560) = 0u;
  *(_OWORD *)(v4 + 1576) = 0u;
  *(_OWORD *)(v4 + 1592) = 0u;
  *(_OWORD *)(v4 + 1608) = 0u;
  *(void *)(v4 + 1624) = 0;
  return result;
}

__n128 sub_8EB534(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 376) = *(_DWORD *)(a2 + 376);
  int v4 = *(_DWORD *)(a2 + 376);
  if (v4 == 2)
  {
    sub_48381C(a1, a2);
  }
  else if (v4 == 1)
  {
    sub_8EB7C4((void *)a1, a2);
    int v6 = *(unsigned __int8 *)(a2 + 368);
    *(unsigned char *)(a1 + 368) = v6;
    if (v6) {
      sub_8EB7C4((void *)(a1 + 184), a2 + 184);
    }
  }
  else if (v4)
  {
    if ((v4 - 3) <= 1)
    {
      __n128 result = *(__n128 *)a2;
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
  }
  else
  {
    sub_8EB5F0(a1, (long long *)a2);
  }
  return result;
}

uint64_t sub_8EB5F0(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  int v6 = (unsigned char *)*((void *)a2 + 3);
  long long v5 = (unsigned char *)*((void *)a2 + 4);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_2E00();
    }
    int v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 24) = v8;
    *(void *)(a1 + 32) = v8;
    uint64_t v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a1 + 40) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 32) = v9;
  }
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 16);
  if (*((_DWORD *)a2 + 16) <= 5u) {
    *(void *)(a1 + 56) = *((void *)a2 + 7);
  }
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  int v11 = (unsigned char *)*((void *)a2 + 9);
  uint64_t v10 = (unsigned char *)*((void *)a2 + 10);
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      sub_2E00();
    }
    char v13 = (char *)operator new(v10 - v11);
    *(void *)(a1 + 72) = v13;
    *(void *)(a1 + 80) = v13;
    int v14 = &v13[8 * (v12 >> 3)];
    *(void *)(a1 + 88) = v14;
    memcpy(v13, v11, v12);
    *(void *)(a1 + 80) = v14;
  }
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  long long v16 = (unsigned char *)*((void *)a2 + 12);
  long long v15 = (unsigned char *)*((void *)a2 + 13);
  int64_t v17 = v15 - v16;
  if (v15 != v16)
  {
    if (v17 < 0) {
      sub_2E00();
    }
    uint64_t v18 = (char *)operator new(v15 - v16);
    *(void *)(a1 + 96) = v18;
    *(void *)(a1 + 104) = v18;
    long long v19 = &v18[8 * (v17 >> 3)];
    *(void *)(a1 + 112) = v19;
    memcpy(v18, v16, v17);
    *(void *)(a1 + 104) = v19;
  }
  return a1;
}

void sub_8EB754(_Unwind_Exception *exception_object)
{
  int v6 = *v4;
  if (*v4)
  {
    v1[13] = v6;
    operator delete(v6);
    int64_t v7 = *v3;
    if (!*v3)
    {
LABEL_3:
      int v8 = *v2;
      if (!*v2) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    int64_t v7 = *v3;
    if (!*v3) {
      goto LABEL_3;
    }
  }
  v1[10] = v7;
  operator delete(v7);
  int v8 = *v2;
  if (!*v2) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  v1[4] = v8;
  operator delete(v8);
  goto LABEL_5;
}

void sub_8EB7B4()
{
  if (!*v0) {
    JUMPOUT(0x8EB778);
  }
  JUMPOUT(0x8EB770);
}

void *sub_8EB7C4(void *a1, uint64_t a2)
{
  long long v4 = (void *)sub_44479C((uint64_t)a1, a2);
  v4[20] = 0;
  v4[21] = 0;
  v4[22] = 0;
  int v6 = *(unsigned char **)(a2 + 160);
  long long v5 = *(unsigned char **)(a2 + 168);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v7 >> 3) >= 0x666666666666667) {
      sub_2E00();
    }
    int v8 = (char *)operator new(v7);
    a1[20] = v8;
    a1[21] = v8;
    uint64_t v9 = &v8[8 * (v7 >> 3)];
    a1[22] = v9;
    memcpy(v8, v6, v7 - 7);
    a1[21] = v9;
  }
  return a1;
}

void sub_8EB870(_Unwind_Exception *a1)
{
  long long v4 = *v2;
  if (*v2)
  {
    v1[21] = v4;
    operator delete(v4);
  }
  sub_20ABA6C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_8EB894(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 368))
  {
    uint64_t v2 = *(void **)(a1 + 344);
    if (v2)
    {
      *(void *)(a1 + 352) = v2;
      operator delete(v2);
    }
    uint64_t v3 = *(void **)(a1 + 312);
    if (v3)
    {
      *(void *)(a1 + 320) = v3;
      operator delete(v3);
    }
    long long v4 = *(void **)(a1 + 288);
    if (v4)
    {
      *(void *)(a1 + 296) = v4;
      operator delete(v4);
    }
    long long v5 = *(void **)(a1 + 256);
    if (v5)
    {
      *(void *)(a1 + 264) = v5;
      operator delete(v5);
    }
    *(unsigned char *)(a1 + 368) = 0;
  }
  int v6 = *(void **)(a1 + 160);
  if (v6)
  {
    *(void *)(a1 + 168) = v6;
    operator delete(v6);
  }
  int64_t v7 = *(void **)(a1 + 128);
  if (v7)
  {
    *(void *)(a1 + 136) = v7;
    operator delete(v7);
  }
  int v8 = *(void **)(a1 + 104);
  if (v8)
  {
    *(void *)(a1 + 112) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *(void **)(a1 + 72);
  if (v9)
  {
    *(void *)(a1 + 80) = v9;
    operator delete(v9);
  }
  return a1;
}

void *sub_8EB944(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    if (v6 < 0) {
      sub_2E00();
    }
    int64_t v7 = (char *)operator new(v5 - *a2);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[32 * (v6 >> 5)];
    a1[1] = sub_8EBA00(v3, v4, v5, (uint64_t)v7);
  }
  return a1;
}

void sub_8EB9D4(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1) {
    sub_20ABAD4((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_8EBA00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a4 + v7;
      uint64_t v9 = a2 + v7;
      *(void *)uint64_t v8 = 0;
      *(void *)(v8 + 8) = 0;
      *(void *)(v8 + 16) = 0;
      sub_8EBAC0(a4 + v7, *(void *)(a2 + v7), *(void *)(a2 + v7 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + v7 + 8) - *(void *)(a2 + v7)) >> 3));
      *(unsigned char *)(v8 + 24) = *(unsigned char *)(a2 + v7 + 24);
      v7 += 32;
    }
    while (v9 + 32 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_8EBAA4(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_20ABB88();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_8EBAC0(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = (void *)result;
    if (a4 >= 0x492492492492493) {
      sub_2E00();
    }
    __n128 result = (uint64_t)operator new(56 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = result + 56 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        __n128 result = sub_8EBC68(v8 + v9, a2 + v9);
        v9 += 56;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_8EBB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_8EBB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  if (v11) {
    sub_20ABC18();
  }
  *(void *)(v9 + 8) = v10;
  sub_8EBBC0(&a9);
  _Unwind_Resume(a1);
}

void ***sub_8EBBC0(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (char *)**result;
    if (v3)
    {
      uint64_t v4 = (char *)v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        do
        {
          uint64_t v6 = (void *)*((void *)v4 - 3);
          if (v6)
          {
            *((void *)v4 - 2) = v6;
            operator delete(v6);
          }
          uint64_t v7 = (void *)*((void *)v4 - 7);
          if (v7)
          {
            *((void *)v4 - 6) = v7;
            operator delete(v7);
          }
          v4 -= 56;
        }
        while (v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_8EBC68(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v5 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  int64_t v6 = v4 - *(void *)a2;
  if (v4 != *(void *)a2)
  {
    if (v6 < 0) {
      sub_2E00();
    }
    uint64_t v7 = (char *)operator new(v4 - *(void *)a2);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a1 + 16) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a1 + 8) = v8;
  }
  char v9 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 24) = v9;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v11 = *(unsigned char **)(a2 + 32);
  uint64_t v10 = *(unsigned char **)(a2 + 40);
  uint64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      sub_2E00();
    }
    char v13 = (char *)operator new(v10 - v11);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v13;
    int v14 = &v13[8 * (v12 >> 3)];
    *(void *)(a1 + 48) = v14;
    memcpy(v13, v11, v12 - 3);
    *(void *)(a1 + 40) = v14;
  }
  return a1;
}

void sub_8EBD44(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_8EBD78(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = (void *)result;
    if (a4 >= 0x222222222222223) {
      sub_2E00();
    }
    __n128 result = (uint64_t)operator new(120 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = result + 120 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        __n128 result = sub_8EBF04(v8 + v9, (long long *)(a2 + v9));
        v9 += 120;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_8EBE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_8EBE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 120)
    sub_8EC658((void *)(v10 - 120 + v11));
  *(void *)(v9 + 8) = v10;
  sub_8EBE7C(&a9);
  _Unwind_Resume(a1);
}

void ***sub_8EBE7C(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = v2[1];
      uint64_t v5 = **v1;
      if (v4 != v3)
      {
        do
          uint64_t v4 = sub_8EC658(v4 - 15);
        while (v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_8EBF04(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_8EC0D0((void *)(a1 + 24), *((void *)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 5);
  int v5 = *((_DWORD *)a2 + 12);
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 48) = v5;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  uint64_t v7 = (unsigned char *)*((void *)a2 + 7);
  int64_t v6 = (unsigned char *)*((void *)a2 + 8);
  int64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v8 >> 3) >= 0x666666666666667) {
      sub_2E00();
    }
    uint64_t v9 = (char *)operator new(v8);
    *(void *)(a1 + 56) = v9;
    *(void *)(a1 + 64) = v9;
    uint64_t v10 = &v9[8 * (v8 >> 3)];
    *(void *)(a1 + 72) = v10;
    memcpy(v9, v7, v8 - 7);
    *(void *)(a1 + 64) = v10;
  }
  uint64_t v11 = *((void *)a2 + 10);
  *(_DWORD *)(a1 + 88) = *((_DWORD *)a2 + 22);
  *(void *)(a1 + 80) = v11;
  sub_8EC358((void *)(a1 + 96), (uint64_t *)a2 + 12);
  return a1;
}

void sub_8EC00C(_Unwind_Exception *a1)
{
  int v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 64) = v5;
    operator delete(v5);
  }
  sub_8EC034(v1);
  _Unwind_Resume(a1);
}

void **sub_8EC034(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    long long v4 = *a1;
    if (v3 != v2)
    {
      int v5 = (char *)a1[1];
      do
      {
        uint64_t v7 = (char *)*((void *)v5 - 4);
        v5 -= 32;
        int64_t v6 = v7;
        if (v7)
        {
          for (uint64_t i = (char *)*((void *)v3 - 3); i != v6; i -= 64)
          {
            if (*(i - 4)) {
              *(i - 4) = 0;
            }
          }
          *((void *)v3 - 3) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      long long v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void *sub_8EC0D0(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v5 = result;
    if (a4 >> 59) {
      sub_2E00();
    }
    __n128 result = operator new(32 * a4);
    int64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = &result[4 * a4];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        __n128 result = sub_8EC284(&v8[v9 / 8], (uint64_t *)(a2 + v9));
        *((unsigned char *)result + 24) = *(unsigned char *)(a2 + v9 + 24);
        v9 += 32;
      }
      while (a2 + v9 != a3);
      int64_t v8 = (void *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_8EC188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_8EC19C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  if (v11) {
    sub_20ABC64();
  }
  *(void *)(v9 + 8) = v10;
  sub_8EC1C4(&a9);
  _Unwind_Resume(a1);
}

void ***sub_8EC1C4(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (char *)**result;
    if (v3)
    {
      long long v4 = (char *)v2[1];
      int v5 = **result;
      if (v4 != v3)
      {
        int64_t v6 = (char *)v2[1];
        do
        {
          int64_t v8 = (char *)*((void *)v6 - 4);
          v6 -= 32;
          uint64_t v7 = v8;
          if (v8)
          {
            for (uint64_t i = (char *)*((void *)v4 - 3); i != v7; i -= 64)
            {
              if (*(i - 4)) {
                *(i - 4) = 0;
              }
            }
            *((void *)v4 - 3) = v7;
            operator delete(v7);
          }
          long long v4 = v6;
        }
        while (v6 != v3);
        int v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void *sub_8EC284(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 != *a2)
  {
    if (v5 < 0) {
      sub_2E00();
    }
    int64_t v6 = (char *)operator new(v4 - *a2);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[64 * (v5 >> 6)];
    do
    {
      uint64_t v8 = v3 + v7;
      uint64_t v9 = &v6[v7];
      long long v10 = *(_OWORD *)(v3 + v7);
      long long v11 = *(_OWORD *)(v3 + v7 + 16);
      long long v12 = *(_OWORD *)(v3 + v7 + 32);
      *(void *)(v9 + 46) = *(void *)(v3 + v7 + 46);
      *((_OWORD *)v9 + 1) = v11;
      *((_OWORD *)v9 + 2) = v12;
      *(_OWORD *)uint64_t v9 = v10;
      int v13 = *(unsigned __int8 *)(v3 + v7 + 60);
      v9[60] = v13;
      if (v13) {
        *((_DWORD *)v9 + 14) = *(_DWORD *)(v8 + 56);
      }
      v7 += 64;
    }
    while (v8 + 64 != v4);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_8EC33C(_Unwind_Exception *exception_object)
{
  if (*(void *)v1) {
    sub_20ABCC4((void **)(v1 + 8), *(char **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_8EC358(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0xE21A291C077975B9 * (v6 >> 3);
    if (v7 >= 0x3BCBADC7F10D15) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[1096 * v7];
    a1[1] = sub_8EC43C(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_8EC410(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1) {
    sub_20ABCF0((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_8EC43C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a4 + v7;
      uint64_t v9 = a2 + v7;
      *(_DWORD *)(a4 + v7 + 1088) = *(_DWORD *)(a2 + v7 + 1088);
      uint64_t v10 = *(unsigned int *)(a2 + v7 + 1088);
      if (v10)
      {
        sub_8EC504(v10, (long long *)v9, v8);
      }
      else
      {
        long long v11 = *(_OWORD *)v9;
        long long v12 = *(_OWORD *)(v9 + 16);
        long long v13 = *(_OWORD *)(v9 + 32);
        *(void *)(v8 + 46) = *(void *)(v9 + 46);
        *(_OWORD *)(v8 + 16) = v12;
        *(_OWORD *)(v8 + 32) = v13;
        *(_OWORD *)uint64_t v8 = v11;
        int v14 = *(unsigned __int8 *)(v9 + 60);
        *(unsigned char *)(v8 + 60) = v14;
        if (v14) {
          *(_DWORD *)(a4 + v7 + 56) = *(_DWORD *)(a2 + v7 + 56);
        }
      }
      v7 += 1096;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_8EC4E8(_Unwind_Exception *exception_object)
{
  if (v2) {
    sub_20ABD90(v1 + v2, v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_8EC504(uint64_t result, long long *a2, uint64_t a3)
{
  switch((int)result)
  {
    case 1:
      long long v6 = *a2;
      long long v7 = a2[1];
      *(_OWORD *)(a3 + 28) = *(long long *)((char *)a2 + 28);
      *(void *)(a3 + 48) = 0;
      *(_OWORD *)a3 = v6;
      *(_OWORD *)(a3 + 16) = v7;
      *(void *)(a3 + 56) = 0;
      *(void *)(a3 + 64) = 0;
      uint64_t v9 = (unsigned char *)*((void *)a2 + 6);
      uint64_t v8 = (unsigned char *)*((void *)a2 + 7);
      int64_t v10 = v8 - v9;
      if (v8 != v9)
      {
        if (v10 < 0) {
          sub_2E00();
        }
        long long v11 = (char *)operator new(v8 - v9);
        *(void *)(a3 + 48) = v11;
        *(void *)(a3 + 56) = v11;
        long long v12 = &v11[8 * (v10 >> 3)];
        *(void *)(a3 + 64) = v12;
        __n128 result = (uint64_t)memcpy(v11, v9, v10);
        *(void *)(a3 + 56) = v12;
      }
      *(unsigned char *)(a3 + 72) = *((unsigned char *)a2 + 72);
      break;
    case 2:
    case 4:
      long long v5 = *a2;
      *(_DWORD *)(a3 + 16) = *((_DWORD *)a2 + 4);
      *(_OWORD *)a3 = v5;
      break;
    case 3:
      long long v13 = *a2;
      *(_OWORD *)(a3 + 12) = *(long long *)((char *)a2 + 12);
      *(_OWORD *)a3 = v13;
      uint64_t v14 = (uint64_t)(a2 + 2);
      __n128 result = sub_7A3ACC(a3 + 32, v14);
      break;
    default:
      return result;
  }
  return result;
}

void sub_8EC62C(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 56) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *sub_8EC658(void *a1)
{
  uint64_t v2 = a1[12];
  if (v2)
  {
    uint64_t v3 = a1[13];
    uint64_t v4 = (void *)a1[12];
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 1064;
      do
      {
        int v7 = *(_DWORD *)(v5 + 1056);
        if (v7 == 3)
        {
          sub_3AFFFC(v5);
        }
        else if (v7 == 1)
        {
          uint64_t v8 = *(void **)(v5 + 16);
          if (v8)
          {
            *(void *)(v5 + 24) = v8;
            operator delete(v8);
          }
        }
        else if (!v7 && *(unsigned char *)(v5 + 28))
        {
          *(unsigned char *)(v5 + 28) = 0;
        }
        uint64_t v6 = v5 - 32;
        v5 -= 1096;
      }
      while (v6 != v2);
      uint64_t v4 = (void *)a1[12];
    }
    a1[13] = v2;
    operator delete(v4);
  }
  uint64_t v9 = (void *)a1[7];
  if (v9)
  {
    a1[8] = v9;
    operator delete(v9);
  }
  uint64_t v10 = a1[3];
  if (v10)
  {
    uint64_t v11 = a1[4];
    long long v12 = (void *)a1[3];
    if (v11 != v10)
    {
      uint64_t v13 = a1[4];
      do
      {
        long long v15 = *(char **)(v13 - 32);
        v13 -= 32;
        uint64_t v14 = v15;
        if (v15)
        {
          for (uint64_t i = *(char **)(v11 - 24); i != v14; i -= 64)
          {
            if (*(i - 4)) {
              *(i - 4) = 0;
            }
          }
          *(void *)(v11 - 24) = v14;
          operator delete(v14);
        }
        uint64_t v11 = v13;
      }
      while (v13 != v10);
      long long v12 = (void *)a1[3];
    }
    a1[4] = v10;
    operator delete(v12);
  }
  return a1;
}

void *sub_8EC784(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 4);
    if (v7 >= 0x555555555555556) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[48 * v7];
    a1[1] = sub_8EC85C(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_8EC830(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1) {
    sub_20ABE08((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_8EC85C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
      uint64_t v10 = *(const void **)v6;
      uint64_t v9 = *(void *)(v6 + 8);
      int64_t v11 = v9 - *(void *)v6;
      if (v9 != *(void *)v6)
      {
        if (v11 < 0) {
          sub_2E00();
        }
        long long v12 = (char *)operator new(v9 - *(void *)v6);
        *(void *)a4 = v12;
        *(void *)(a4 + 8) = v12;
        unint64_t v7 = &v12[8 * (v11 >> 3)];
        *(void *)(a4 + 16) = v7;
        memcpy(v12, v10, v11);
        *(void *)(a4 + 8) = v7;
      }
      long long v8 = *(_OWORD *)(v6 + 24);
      *(void *)(a4 + 38) = *(void *)(v6 + 38);
      *(_OWORD *)(a4 + 24) = v8;
      a4 += 48;
      v6 += 48;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_8EC938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_8EC94C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_8EC970((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_8EC970(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    if (v3 != v4)
    {
      uint64_t v5 = **(void **)(a1 + 16);
      do
      {
        unint64_t v7 = *(void **)(v5 - 48);
        v5 -= 48;
        uint64_t v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 40) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v4);
    }
  }
  return a1;
}

void sub_8EC9E0()
{
  unk_25D0C27 = 16641;
  word_25D0C10 = 65;
  byte_25D0C3F = 1;
  byte_25D0C29 = 0;
}

BOOL sub_8ECA0C(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 376))
  {
    case 0:
      BOOL result = *(_DWORD *)(a1 + 64) != -1;
      break;
    case 1:
      BOOL result = *(void *)(a1 + 160) != *(void *)(a1 + 168) || *(void *)(a1 + 104) != *(void *)(a1 + 112);
      break;
    case 2:
      BOOL result = sub_DAA288(a1);
      break;
    case 3:
      if (!*(_DWORD *)a1) {
        goto LABEL_10;
      }
      BOOL result = *(_DWORD *)(a1 + 4) != -1;
      break;
    case 4:
      if (!*(_DWORD *)(a1 + 8)) {
        goto LABEL_10;
      }
      BOOL result = *(_DWORD *)(a1 + 12) != -1;
      break;
    default:
LABEL_10:
      BOOL result = 0;
      break;
  }
  return result;
}

uint64_t sub_8ECABC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(_DWORD *)(result + 376);
  if (v2 == 3)
  {
    if (*(_DWORD *)result && *(_DWORD *)(result + 4) != -1)
    {
      *(void *)a2 = *(void *)result;
      int v4 = 5;
LABEL_9:
      *(_DWORD *)(a2 + 8) = v4;
      return result;
    }
LABEL_8:
    int v4 = -1;
    goto LABEL_9;
  }
  if (v2) {
    goto LABEL_8;
  }
  unsigned int v3 = *(_DWORD *)(result + 64);
  *(_DWORD *)(a2 + 8) = v3;
  if (v3 <= 5) {
    *(void *)a2 = *(void *)(result + 56);
  }
  return result;
}

_DWORD *sub_8ECB18(_DWORD *result)
{
  if (result[94]) {
    return &unk_24F71F8;
  }
  return result;
}

uint64_t sub_8ECB30(_DWORD *a1)
{
  if (a1[94]) {
    uint64_t v1 = &unk_24F71F8;
  }
  else {
    uint64_t v1 = a1;
  }
  return *(void *)v1;
}

void sub_8ECB4C()
{
  unk_25D0C57 = 16641;
  word_25D0C40 = 65;
  byte_25D0C6F = 1;
  byte_25D0C59 = 0;
}

uint64_t sub_8ECB74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = 0;
  uint64_t v14 = operator new(0x20uLL);
  long long v15 = xmmword_20B8870;
  strcpy((char *)v14, "PlaceInfoComponentBuilder");
  int64_t v11 = 0;
  long long v12 = 0;
  uint64_t v6 = sub_374CDC(a2, (uint64_t)&v14, (uint64_t *)&v11);
  char v17 = 11;
  strcpy((char *)__p, "ttl_seconds");
  *(_DWORD *)a1 = 10 * sub_319F48(v6, (uint64_t)__p);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)v11;
  if (v11)
  {
    long long v8 = v12;
    uint64_t v9 = v11;
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      uint64_t v9 = v11;
    }
    long long v12 = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(v14);
  }
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  return a1;
}

void sub_8ECCA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
  {
    operator delete(__p);
    sub_1A668(&a10);
    if ((a18 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    sub_1A668(&a10);
    if ((a18 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(a13);
  _Unwind_Resume(a1);
}

void sub_8ECD10(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = &off_243AFB0;
  *(_OWORD *)(a3 + 8) = xmmword_20E9E20;
  *(_DWORD *)(a3 + 24) = 0x7FFFFFFF;
  *(void *)(a3 + 32) = 0;
  uint64_t v6 = (std::string *)(a3 + 32);
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  sub_8ECABC(a2, (uint64_t)&v40);
  uint64_t v7 = sub_375500(*(void **)(a1 + 8));
  uint64_t v8 = v7;
  switch(v41)
  {
    case -1:
    case 4:
    case 5:
      *(void *)(a3 + 16) = -1;
      goto LABEL_10;
    case 0:
      uint64_t v9 = (int *)sub_498D5C(v7, v40, 0, "stop");
      goto LABEL_6;
    case 1:
      uint64_t v9 = (int *)sub_8ED3D4(v7, v40, 0, "hall");
      goto LABEL_6;
    case 2:
      uint64_t v9 = (int *)sub_8ED928(v7, v40, 0, "station");
LABEL_6:
      uint64_t v10 = (uint64_t)v9 + *(unsigned __int16 *)((char *)v9 - *v9 + 6);
      uint64_t v11 = *(unsigned int *)v10;
      LODWORD(v10) = *(_DWORD *)(v10 + 4);
      if (v10 >= 0xFFFFFFFE) {
        uint64_t v10 = 4294967294;
      }
      else {
        uint64_t v10 = v10;
      }
      *(void *)(a3 + 16) = v11 | (v10 << 32);
LABEL_10:
      *(_DWORD *)(a3 + 24) = 0x7FFFFFFF;
      break;
    case 3:
      sub_8ED2E4(v7, &v40, (uint64_t)__p);
      unint64_t v27 = __p[0];
      if (__p[0] != __p[1])
      {
        v34[0] = *(void **)__p[0];
        *(void *)(a3 + 16) = sub_8ED294(v8, (unint64_t *)v34);
        *(_DWORD *)(a3 + 24) = v28;
        unint64_t v27 = __p[0];
      }
      if (v27)
      {
        __p[1] = v27;
        operator delete(v27);
      }
      break;
    default:
      break;
  }
  *(_DWORD *)(a3 + 8) = *(_DWORD *)a1;
  if (!*(_DWORD *)(a2 + 376))
  {
    long long v12 = *(unint64_t **)(a2 + 24);
    if (v12 != *(unint64_t **)(a2 + 32))
    {
      unint64_t v13 = *v12;
      uint64_t v14 = (int *)sub_498D5C(v8, *v12, 0, "stop");
      long long v15 = (unsigned __int16 *)((char *)v14 - *v14);
      if (*v15 < 0x2Bu || (uint64_t v16 = v15[21]) == 0)
      {
        HIBYTE(v37) = 0;
        LOBYTE(__p[0]) = 0;
        if ((*(char *)(a3 + 55) & 0x80000000) == 0)
        {
LABEL_21:
          *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
          v6->__r_.__value_.__r.__words[2] = v37;
          uint64_t v22 = *(unsigned __int8 *)(a3 + 55);
          if ((v22 & 0x80u) != 0) {
            uint64_t v22 = *(void *)(a3 + 40);
          }
          if (!v22)
          {
            if (sub_723EC(1u))
            {
              sub_6BAC((uint64_t)__p);
              sub_188FC78(__p, (uint64_t)"Could not resolve time zone for stop ", 37);
              int v23 = (int *)sub_498D5C(v8, v13, 0, "stop");
              uint64_t v24 = (unsigned __int16 *)((char *)v23 - *v23);
              if (*v24 >= 5u && (uint64_t v25 = v24[2]) != 0) {
                uint64_t v26 = *(void *)((char *)v23 + v25);
              }
              else {
                uint64_t v26 = 0;
              }
              long long v31 = sub_398020(v8, 0);
              long long v32 = &v31[-*(int *)v31];
              if (*(unsigned __int16 *)v32 >= 0xBu)
              {
                uint64_t v33 = *((unsigned __int16 *)v32 + 5);
                if (v33)
                {
                  if (v31[v33]) {
                    nullsub_1(v26);
                  }
                }
              }
              std::ostream::operator<<();
              std::stringbuf::str();
              sub_7246C((uint64_t *)v34, 1u);
              if (v35 < 0) {
                operator delete(v34[0]);
              }
              if (v39 < 0) {
                operator delete(v38);
              }
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              std::ios::~ios();
            }
            std::string::assign(v6, "UTC");
          }
          return;
        }
LABEL_20:
        operator delete(v6->__r_.__value_.__l.__data_);
        goto LABEL_21;
      }
      char v17 = (unsigned int *)((char *)v14 + v16);
      uint64_t v18 = *v17;
      int64_t v20 = (char *)v17 + v18 + 4;
      size_t v19 = *(unsigned int *)((char *)v17 + v18);
      if (v19 >= 0x17)
      {
        uint64_t v29 = (v19 & 0xFFFFFFF8) + 8;
        if ((v19 | 7) != 0x17) {
          uint64_t v29 = v19 | 7;
        }
        uint64_t v30 = v29 + 1;
        uint64_t v21 = operator new(v29 + 1);
        __p[1] = (void *)v19;
        unint64_t v37 = v30 | 0x8000000000000000;
        __p[0] = v21;
      }
      else
      {
        HIBYTE(v37) = *(unsigned int *)((char *)v17 + v18);
        uint64_t v21 = __p;
        if (!v19)
        {
LABEL_36:
          *((unsigned char *)v21 + v19) = 0;
          if ((*(char *)(a3 + 55) & 0x80000000) == 0) {
            goto LABEL_21;
          }
          goto LABEL_20;
        }
      }
      memcpy(v21, v20, v19);
      goto LABEL_36;
    }
  }
}

void sub_8ED1C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a16);
  *(void *)uint64_t v17 = v18;
  if ((*(char *)(v17 + 55) & 0x80000000) == 0) {
    _Unwind_Resume(a1);
  }
  operator delete(*v19);
  _Unwind_Resume(a1);
}

uint64_t sub_8ED294(uint64_t a1, unint64_t *a2)
{
  int v2 = (int *)sub_8ED928(a1, *a2, 0, "station");
  uint64_t v3 = (uint64_t)v2 + *(unsigned __int16 *)((char *)v2 - *v2 + 6);
  uint64_t v4 = *(unsigned int *)v3;
  LODWORD(v3) = *(_DWORD *)(v3 + 4);
  if (v3 >= 0xFFFFFFFE) {
    uint64_t v3 = 4294967294;
  }
  else {
    uint64_t v3 = v3;
  }
  return v4 | (v3 << 32);
}

int *sub_8ED2E4@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  BOOL result = (int *)sub_499804(a1, *a2, 0, "access point");
  uint64_t v6 = (unsigned __int16 *)((char *)result - *result);
  if (*v6 >= 0x11u && (uint64_t v7 = v6[8]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)result + v7);
    uint64_t v9 = *v8;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v11 = (uint64_t *)((char *)v8 + v9 + 4);
    uint64_t v10 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v14 = (void **)a3;
    if (v10)
    {
      uint64_t v12 = 8 * v10;
      do
      {
        if (!*(unsigned char *)(a1 + 3888) || (BOOL result = (int *)sub_2AB7E4(*(void *)(a1 + 3872)), result))
        {
          uint64_t v13 = *v11;
          BOOL result = (int *)sub_2A98DC(&v14, &v13);
        }
        ++v11;
        v12 -= 8;
      }
      while (v12);
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_8ED3B8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_8ED3D4(uint64_t a1, unint64_t a2, int a3, char *a4)
{
  unsigned int v6 = a2;
  unint64_t v8 = HIDWORD(a2);
  LODWORD(v61.__r_.__value_.__l.__data_) = a2;
  LODWORD(v60.__r_.__value_.__l.__data_) = a3;
  *(void *)&long long v62 = &v60;
  *((void *)&v62 + 1) = &v61;
  unint64_t v9 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v9;
  uint64_t v10 = *(void *)a1;
  if (!v10) {
    goto LABEL_38;
  }
  uint64_t v11 = a1 + 16;
  if (*(_DWORD *)(a1 + 592) == a2)
  {
    unsigned int v12 = 24;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 616) == a2)
  {
    unsigned int v12 = 25;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 640) == a2)
  {
    unsigned int v12 = 26;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 664) == a2)
  {
    unsigned int v12 = 27;
LABEL_10:
    ++*(void *)(a1 + 3864);
    uint64_t v13 = v11 + 24 * v12;
    *(void *)(v13 + 8) = v9;
    uint64_t v14 = *(unsigned int **)(v13 + 16);
    if (v14) {
      goto LABEL_11;
    }
LABEL_38:
    sub_2A54B4((int **)&v62);
    uint64_t v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
    return 0;
  }
  unint64_t v20 = *(void *)(a1 + 648);
  unint64_t v21 = *(void *)(a1 + 624);
  if (*(void *)(a1 + 600) >= v9)
  {
    int v22 = 0;
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + 600);
    int v22 = 24;
  }
  BOOL v23 = v21 >= v9;
  if (v21 < v9) {
    unint64_t v9 = *(void *)(a1 + 624);
  }
  int v24 = 25;
  if (v23) {
    int v24 = v22;
  }
  if (v20 >= v9) {
    unint64_t v25 = v9;
  }
  else {
    unint64_t v25 = *(void *)(a1 + 648);
  }
  unint64_t v26 = *(void *)(a1 + 672);
  if (v20 >= v9) {
    int v27 = v24;
  }
  else {
    int v27 = 26;
  }
  uint64_t v14 = (unsigned int *)sub_2AB884(v10, 6, a2, 1);
  unsigned int v28 = 27;
  if (v26 >= v25) {
    unsigned int v28 = v27;
  }
  uint64_t v29 = v11 + 24 * v28;
  *(_DWORD *)uint64_t v29 = v61.__r_.__value_.__l.__data_;
  *(void *)(v29 + 8) = *(void *)(a1 + 3856);
  *(void *)(v29 + 16) = v14;
  if (!v14) {
    goto LABEL_38;
  }
LABEL_11:
  long long v15 = (int *)((char *)v14 + *v14);
  uint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 < 0xBu)
  {
    uint64_t v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v17 = v16[5];
    if (v17)
    {
      uint64_t v18 = (int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
      if (*v18 > v8) {
        return (uint64_t)&v18[v8 + 1] + v18[v8 + 1];
      }
    }
    else
    {
      uint64_t v18 = 0;
    }
    if (a3 != 1)
    {
LABEL_19:
      if (!a3)
      {
        exception = __cxa_allocate_exception(0x40uLL);
        long long v31 = a4;
        uint64_t v32 = (uint64_t)exception;
        sub_5E5C(&v55, v31);
        uint64_t v33 = std::string::insert(&v55, 0, "Failed to acquire entity \"");
        long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v56.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        char v35 = std::string::append(&v56, "\" in quad node ");
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v57.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v54, v6);
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v37 = &v54;
        }
        else {
          unint64_t v37 = (std::string *)v54.__r_.__value_.__r.__words[0];
        }
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v54.__r_.__value_.__l.__size_;
        }
        char v39 = std::string::append(&v57, (const std::string::value_type *)v37, size);
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v58.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        int v41 = std::string::append(&v58, " at position ");
        long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v59.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v53, v8);
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v43 = &v53;
        }
        else {
          uint64_t v43 = (std::string *)v53.__r_.__value_.__r.__words[0];
        }
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v44 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v44 = v53.__r_.__value_.__l.__size_;
        }
        uint64_t v45 = std::string::append(&v59, (const std::string::value_type *)v43, v44);
        long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        v60.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        double v47 = std::string::append(&v60, " on layer ");
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v61.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        uint64_t v49 = sub_736EC(6u);
        uint64_t v50 = std::string::append(&v61, v49);
        long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        std::string::size_type v63 = v50->__r_.__value_.__r.__words[2];
        long long v62 = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        long long v52 = (void *)sub_2F404(v32, &v62);
      }
      return (uint64_t)&v18[v8 + 1] + v18[v8 + 1];
    }
  }
  return 0;
}

void sub_8ED76C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (*(char *)(v54 - 105) < 0) {
    operator delete(*(void **)(v54 - 128));
  }
  if (*(char *)(v54 - 137) < 0)
  {
    operator delete(*(void **)(v54 - 160));
    if ((*(char *)(v54 - 169) & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
  }
  else if ((*(char *)(v54 - 169) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v54 - 192));
  if ((a15 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a54 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a10);
  if ((a54 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a49);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a42);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a40 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a16);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a35);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_12;
  }
LABEL_20:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0) {
LABEL_21:
  }
    _Unwind_Resume(a1);
LABEL_12:
  operator delete(__p);
  goto LABEL_21;
}

uint64_t sub_8ED928(uint64_t a1, unint64_t a2, int a3, char *a4)
{
  unsigned int v6 = a2;
  unint64_t v8 = HIDWORD(a2);
  LODWORD(v61.__r_.__value_.__l.__data_) = a2;
  LODWORD(v60.__r_.__value_.__l.__data_) = a3;
  *(void *)&long long v62 = &v60;
  *((void *)&v62 + 1) = &v61;
  unint64_t v9 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v9;
  uint64_t v10 = *(void *)a1;
  if (!v10) {
    goto LABEL_38;
  }
  uint64_t v11 = a1 + 16;
  if (*(_DWORD *)(a1 + 592) == a2)
  {
    unsigned int v12 = 24;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 616) == a2)
  {
    unsigned int v12 = 25;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 640) == a2)
  {
    unsigned int v12 = 26;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 664) == a2)
  {
    unsigned int v12 = 27;
LABEL_10:
    ++*(void *)(a1 + 3864);
    uint64_t v13 = v11 + 24 * v12;
    *(void *)(v13 + 8) = v9;
    uint64_t v14 = *(unsigned int **)(v13 + 16);
    if (v14) {
      goto LABEL_11;
    }
LABEL_38:
    sub_2A54B4((int **)&v62);
    uint64_t v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
    return 0;
  }
  unint64_t v20 = *(void *)(a1 + 648);
  unint64_t v21 = *(void *)(a1 + 624);
  if (*(void *)(a1 + 600) >= v9)
  {
    int v22 = 0;
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + 600);
    int v22 = 24;
  }
  BOOL v23 = v21 >= v9;
  if (v21 < v9) {
    unint64_t v9 = *(void *)(a1 + 624);
  }
  int v24 = 25;
  if (v23) {
    int v24 = v22;
  }
  if (v20 >= v9) {
    unint64_t v25 = v9;
  }
  else {
    unint64_t v25 = *(void *)(a1 + 648);
  }
  unint64_t v26 = *(void *)(a1 + 672);
  if (v20 >= v9) {
    int v27 = v24;
  }
  else {
    int v27 = 26;
  }
  uint64_t v14 = (unsigned int *)sub_2AB884(v10, 6, a2, 1);
  unsigned int v28 = 27;
  if (v26 >= v25) {
    unsigned int v28 = v27;
  }
  uint64_t v29 = v11 + 24 * v28;
  *(_DWORD *)uint64_t v29 = v61.__r_.__value_.__l.__data_;
  *(void *)(v29 + 8) = *(void *)(a1 + 3856);
  *(void *)(v29 + 16) = v14;
  if (!v14) {
    goto LABEL_38;
  }
LABEL_11:
  long long v15 = (int *)((char *)v14 + *v14);
  uint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 < 0x19u)
  {
    uint64_t v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v17 = v16[12];
    if (v17)
    {
      uint64_t v18 = (int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
      if (*v18 > v8) {
        return (uint64_t)&v18[v8 + 1] + v18[v8 + 1];
      }
    }
    else
    {
      uint64_t v18 = 0;
    }
    if (a3 != 1)
    {
LABEL_19:
      if (!a3)
      {
        exception = __cxa_allocate_exception(0x40uLL);
        long long v31 = a4;
        uint64_t v32 = (uint64_t)exception;
        sub_5E5C(&v55, v31);
        uint64_t v33 = std::string::insert(&v55, 0, "Failed to acquire entity \"");
        long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v56.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        char v35 = std::string::append(&v56, "\" in quad node ");
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v57.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v54, v6);
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v37 = &v54;
        }
        else {
          unint64_t v37 = (std::string *)v54.__r_.__value_.__r.__words[0];
        }
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v54.__r_.__value_.__l.__size_;
        }
        char v39 = std::string::append(&v57, (const std::string::value_type *)v37, size);
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v58.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        int v41 = std::string::append(&v58, " at position ");
        long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v59.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v53, v8);
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v43 = &v53;
        }
        else {
          uint64_t v43 = (std::string *)v53.__r_.__value_.__r.__words[0];
        }
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v44 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v44 = v53.__r_.__value_.__l.__size_;
        }
        uint64_t v45 = std::string::append(&v59, (const std::string::value_type *)v43, v44);
        long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        v60.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        double v47 = std::string::append(&v60, " on layer ");
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v61.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        uint64_t v49 = sub_736EC(6u);
        uint64_t v50 = std::string::append(&v61, v49);
        long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        std::string::size_type v63 = v50->__r_.__value_.__r.__words[2];
        long long v62 = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        long long v52 = (void *)sub_2F404(v32, &v62);
      }
      return (uint64_t)&v18[v8 + 1] + v18[v8 + 1];
    }
  }
  return 0;
}

void sub_8EDCC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (*(char *)(v54 - 105) < 0) {
    operator delete(*(void **)(v54 - 128));
  }
  if (*(char *)(v54 - 137) < 0)
  {
    operator delete(*(void **)(v54 - 160));
    if ((*(char *)(v54 - 169) & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
  }
  else if ((*(char *)(v54 - 169) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v54 - 192));
  if ((a15 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a54 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a10);
  if ((a54 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a49);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a42);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a40 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a16);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a35);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_12;
  }
LABEL_20:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0) {
LABEL_21:
  }
    _Unwind_Resume(a1);
LABEL_12:
  operator delete(__p);
  goto LABEL_21;
}

double sub_8EDE7C()
{
  byte_25D0C87 = 1;
  word_25D0C70 = 65;
  byte_25D0C9F = 1;
  word_25D0C88 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25D0D30 = 0u;
  *(_OWORD *)&qword_25D0D40 = 0u;
  dword_25D0D50 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25D0D30, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25D0D30, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25D0D30, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25D0D30, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25D0CB7 = 8;
  strcpy((char *)&qword_25D0CA0, "any_mode");
  byte_25D0CCF = 7;
  strcpy((char *)&dword_25D0CB8, "cycling");
  byte_25D0CE7 = 7;
  strcpy((char *)&dword_25D0CD0, "driving");
  byte_25D0CFF = 7;
  strcpy((char *)&dword_25D0CE8, "walking");
  qword_25D0D08 = 0;
  qword_25D0D10 = 0;
  qword_25D0D00 = 0;
  v0 = operator new(9uLL);
  *(void *)v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25D0D00 = (uint64_t)v0;
  qword_25D0D08 = (uint64_t)(v0 + 9);
  qword_25D0D10 = (uint64_t)(v0 + 9);
  qword_25D0D18 = 0;
  qword_25D0D20 = 0;
  unk_25D0D28 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25D0D20 = (uint64_t)(v1 + 9);
  unk_25D0D28 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25D0D18 = (uint64_t)v1;
  return result;
}

void sub_8EE144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25D0D40) {
    sub_20ABE70((void **)qword_25D0D40);
  }
  unint64_t v37 = (void *)xmmword_25D0D30;
  *(void *)&xmmword_25D0D30 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_8EE1E4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v13 = 0;
  int v14 = operator new(0x28uLL);
  long long v15 = xmmword_20B9280;
  strcpy((char *)v14, "TransitAttributionComponentBuilder");
  int v11 = 0;
  unsigned int v12 = 0;
  unsigned int v6 = sub_374CDC((uint64_t)a2, (uint64_t)&v14, (uint64_t *)&v11);
  char v17 = 11;
  strcpy((char *)__p, "ttl_seconds");
  *(_DWORD *)a1 = 10 * sub_319F48(v6, (uint64_t)__p);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  char v7 = (void **)v11;
  if (v11)
  {
    int v8 = v12;
    unint64_t v9 = v11;
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      unint64_t v9 = v11;
    }
    unsigned int v12 = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(v14);
  }
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = sub_375500(a2);
  *(void *)(a1 + 24) = sub_3755E4(a2);
  *(void *)(a1 + 32) = sub_3757C8(a2);
  return a1;
}

void sub_8EE33C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
  {
    operator delete(__p);
    sub_1A668(&a10);
    if ((a18 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    sub_1A668(&a10);
    if ((a18 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(a13);
  _Unwind_Resume(a1);
}

void sub_8EE3A4(_DWORD *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = &off_243AFE0;
  *(void *)(a3 + 16) = 0;
  int v5 = (void **)(a3 + 16);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(_DWORD *)(a3 + 8) = *a1;
  *(_DWORD *)(a3 + 12) = 2;
  sub_8EE4C8((uint64_t)a1, a2, (unint64_t *)v12);
  sub_8EE68C((uint64_t)a1, v12, (uint64_t)&v10);
  unsigned int v6 = (void **)*v5;
  if (*v5)
  {
    char v7 = *(void ***)(a3 + 24);
    int v8 = *v5;
    if (v7 != v6)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      int v8 = *v5;
    }
    *(void *)(a3 + 24) = v6;
    operator delete(v8);
    void *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v10;
  unint64_t v9 = v12[0];
  *(void *)(a3 + 32) = v11;
  if (v9)
  {
    v12[1] = v9;
    operator delete(v9);
  }
}

void sub_8EE490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    operator delete(__p);
    sub_8E3664(v13);
    _Unwind_Resume(a1);
  }
  sub_8E3664(v13);
  _Unwind_Resume(a1);
}

void sub_8EE4C8(uint64_t a1@<X0>, _DWORD *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v6 = sub_8ECB30(a2);
  if (v6 <= 0xFFFFFFFEFFFFFFFFLL && v6)
  {
    char v7 = (int *)sub_369F8C(*(void *)(a1 + 24), v6, 0, "trip");
    unint64_t v8 = *(void *)((char *)v7 + *(unsigned __int16 *)((char *)v7 - *v7 + 6));
    int64_t v9 = 8;
    long long v10 = (unint64_t *)operator new(8uLL);
    unint64_t *v10 = v8;
    unint64_t v11 = (unint64_t)(v10 + 1);
    *a3 = 0;
    a3[2] = 0;
    a3[1] = 0;
    uint64_t v12 = 1;
LABEL_7:
    uint64_t v13 = (char *)operator new(v9);
    *a3 = (unint64_t)v13;
    a3[1] = (unint64_t)v13;
    a3[2] = (unint64_t)&v13[8 * v12];
    int v14 = v10;
    do
    {
      long long v15 = (int *)sub_8DFD1C(*(void *)(a1 + 24), *v14, 0, "line");
      v16[0] = *(void *)((char *)v15 + *(unsigned __int16 *)((char *)v15 - *v15 + 6));
      uint64_t v13 = sub_8EEA30(a3, v13, v16) + 8;
      ++v14;
    }
    while (v14 != (unint64_t *)v11);
    goto LABEL_9;
  }
  sub_90D068((uint64_t)a2, 0, *(void *)(a1 + 16), *(void *)(a1 + 24), v16);
  long long v10 = (unint64_t *)v16[0];
  unint64_t v11 = v16[1];
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  int64_t v9 = v11 - (void)v10;
  if ((unint64_t *)v11 != v10)
  {
    if ((uint64_t)(v11 - (void)v10) < 0) {
      sub_2E00();
    }
    uint64_t v12 = v9 >> 3;
    goto LABEL_7;
  }
LABEL_9:
  sub_8EE910((int8x16_t **)a3);
  if (v10) {
    operator delete(v10);
  }
}

void sub_8EE650(_Unwind_Exception *exception_object)
{
  int v5 = *v1;
  if (*v1)
  {
    void *v3 = v5;
    operator delete(v5);
    if (!v2) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if (!v2)
  {
    goto LABEL_3;
  }
  operator delete(v2);
  _Unwind_Resume(exception_object);
}

void sub_8EE68C(uint64_t a1@<X0>, unint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  nullsub_1(&v20);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_23708(a3, a2[1] - *a2);
  unint64_t v6 = *a2;
  char v7 = a2[1];
  if (*a2 != v7)
  {
    uint64_t v8 = *(void *)(a3 + 8);
    do
    {
      int64_t v9 = (int *)sub_8EF9B8(*(void *)(a1 + 32), *v6, 0, "system");
      long long v10 = (unsigned __int16 *)((char *)v9 - *v9);
      if (*v10 >= 0x1Fu && (uint64_t v11 = v10[15]) != 0) {
        uint64_t v12 = (int *)((char *)v9 + v11 + *(unsigned int *)((char *)v9 + v11));
      }
      else {
        uint64_t v12 = 0;
      }
      sub_4A0694(v12, (uint64_t)v27);
      sub_9973DC((uint64_t)v27, *(void *)(a1 + 8) + 968, (uint64_t)v23);
      *(_OWORD *)unint64_t v21 = *(_OWORD *)v23;
      uint64_t v22 = v24;
      v23[0] = 0;
      v23[1] = 0;
      uint64_t v24 = 0;
      if (v26 < 0 && (operator delete(__p), SHIBYTE(v24) < 0))
      {
        operator delete(v23[0]);
        uint64_t v13 = (void **)v29;
        if (v29)
        {
LABEL_11:
          int v14 = v30;
          long long v15 = v13;
          if (v30 != v13)
          {
            do
            {
              if (*((char *)v14 - 1) < 0) {
                operator delete(*(v14 - 3));
              }
              v14 -= 4;
            }
            while (v14 != v13);
            long long v15 = v29;
          }
          uint64_t v30 = v13;
          operator delete(v15);
        }
      }
      else
      {
        uint64_t v13 = (void **)v29;
        if (v29) {
          goto LABEL_11;
        }
      }
      if (v28 < 0) {
        operator delete(v27[0]);
      }
      uint64_t v16 = sub_8B3D0((void ***)a3, v8, (__n128 *)v21);
      if (SHIBYTE(v22) < 0) {
        operator delete(v21[0]);
      }
      uint64_t v8 = v16 + 24;
      ++v6;
    }
    while (v6 != v7);
  }
  char v17 = *(const void ***)(a3 + 8);
  unint64_t v18 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v17 - *(void *)a3) >> 3));
  if (v17 == *(const void ***)a3) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = v18;
  }
  sub_6EA30(*(void *)a3, v17, (uint64_t)v27, v19, 1);
  sub_86E88((const void ***)a3);
}

void sub_8EE894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  sub_1A668(v32);
  _Unwind_Resume(a1);
}

void sub_8EE910(int8x16_t **a1)
{
  int v2 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v4 = 126 - 2 * __clz(((char *)v3 - (char *)v2) >> 3);
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  sub_8EEDA0(v2, v3, (uint64_t)&v14, v5, 1);
  unint64_t v6 = a1[1];
  if (*a1 != v6)
  {
    char v7 = &(*a1)[-1].i32[2];
    do
    {
      if (v7 + 4 == (__int32 *)v6) {
        return;
      }
      __int32 v8 = v7[2];
      v7 += 2;
      LODWORD(v9) = v7[2];
    }
    while (v8 != v9 || v7[1] != v7[3]);
    uint64_t v11 = (int8x16_t *)(v7 + 4);
    if (v7 + 4 == (__int32 *)v6)
    {
      uint64_t v12 = (int8x16_t *)(v7 + 2);
      if (v7 + 2 == (__int32 *)v6) {
        return;
      }
      goto LABEL_22;
    }
    do
    {
      if (v9 != v11->i32[0] || v7[1] != v11->i32[1])
      {
        uint64_t v9 = v11->i64[0];
        *((void *)v7 + 1) = v11->i64[0];
        v7 += 2;
      }
      uint64_t v11 = (int8x16_t *)((char *)v11 + 8);
    }
    while (v11 != v6);
    uint64_t v12 = (int8x16_t *)(v7 + 2);
    if (v7 + 2 != (__int32 *)a1[1]) {
LABEL_22:
    }
      a1[1] = v12;
  }
}

char *sub_8EEA30(unint64_t *a1, void *a2, void *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = v7 >> 3;
  uint64_t v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)uint64_t v9 = *a3;
      a1[1] = (unint64_t)(v9 + 8);
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    uint64_t v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      uint64_t v19 = (void *)a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      long long v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 8;
      if (v5 > v16) {
        unint64_t v16 = a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x58)
      {
        uint64_t v19 = (void *)a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        uint64_t v19 = (void *)a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v13 = (uint64_t *)((char *)v13 + v21);
          uint64_t v19 = (void *)(v5 + v21);
          uint64_t v22 = (_OWORD *)(v5 + 16);
          BOOL v23 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            *uint64_t v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        uint64_t v56 = *v13++;
        *v19++ = v56;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = (unint64_t)v19;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    *(void *)uint64_t v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v26 >> 61) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 2 > v26) {
    unint64_t v26 = v28 >> 2;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 61) {
      sub_188D718();
    }
    uint64_t v30 = (char *)operator new(8 * v29);
    long long v31 = &v30[8 * v8];
    uint64_t v32 = &v30[8 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v30 = 0;
    long long v31 = (char *)(8 * v8);
    uint64_t v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((void *)v6 == a2) {
      unint64_t v53 = 1;
    }
    else {
      unint64_t v53 = v7 >> 2;
    }
    if (v53 >> 61) {
      sub_188D718();
    }
    uint64_t v54 = (char *)operator new(8 * v53);
    long long v31 = &v54[8 * (v53 >> 2)];
    uint64_t v32 = &v54[8 * v53];
    if (v30)
    {
      std::string v55 = &v54[8 * v53];
      operator delete(v30);
      uint64_t v32 = v55;
      long long v34 = (char *)*a1;
      *(void *)long long v31 = *a3;
      char v35 = v31 + 8;
      long long v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
LABEL_28:
  long long v34 = (char *)v6;
  *(void *)long long v31 = *a3;
  char v35 = v31 + 8;
  long long v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    unint64_t v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v38 = v37 - v34 - 8;
    char v39 = v9;
    long long v36 = v31;
    if (v38 < 0x58) {
      goto LABEL_59;
    }
    char v39 = v9;
    long long v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 3) + 1;
    uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    char v39 = &v9[-v41];
    long long v36 = &v31[-v41];
    long long v42 = v31 - 16;
    uint64_t v43 = (long long *)(v6 + 8 * v8 - 16);
    uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)long long v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        uint64_t v46 = *((void *)v39 - 1);
        v39 -= 8;
        *((void *)v36 - 1) = v46;
        v36 -= 8;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  double v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    uint64_t v49 = v9;
    size_t v50 = v47 - v9;
    long long v51 = v32;
    memmove(v35, v49, v50);
    uint64_t v32 = v51;
  }
  long long v52 = (void *)*a1;
  *a1 = (unint64_t)v36;
  a1[1] = (unint64_t)&v35[v48];
  a1[2] = (unint64_t)v32;
  if (v52) {
    operator delete(v52);
  }
  return v31;
}

void sub_8EED88(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

int8x16_t sub_8EEDA0(int8x16_t *a1, int8x16_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    uint64_t v12 = a1;
    while (1)
    {
      while (1)
      {
        a1 = v12;
        uint64_t v13 = (char *)a2 - (char *)v12;
        unint64_t v14 = ((char *)a2 - (char *)v12) >> 3;
        if (v6 || !v5)
        {
          switch(v14)
          {
            case 0uLL:
            case 1uLL:
              return result;
            case 2uLL:
              if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) >= (v12->u32[1] | ((unint64_t)v12->u32[0] << 32))) {
                return result;
              }
              uint64_t v89 = v12->i64[0];
              goto LABEL_106;
            case 3uLL:
              unint64_t v87 = v12->u32[3] | ((unint64_t)v12->u32[2] << 32);
              unint64_t v88 = a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32);
              if (v87 >= (v12->u32[1] | ((unint64_t)v12->u32[0] << 32)))
              {
                if (v88 < v87)
                {
                  uint64_t v104 = v12->i64[1];
                  v12->i64[1] = a2[-1].i64[1];
                  a2[-1].i64[1] = v104;
                  if ((v12->u32[3] | ((unint64_t)v12->u32[2] << 32)) < (v12->u32[1] | ((unint64_t)v12->u32[0] << 32)))
                  {
                    int8x16_t result = vextq_s8(*v12, *v12, 8uLL);
                    *uint64_t v12 = result;
                  }
                }
              }
              else
              {
                uint64_t v89 = v12->i64[0];
                if (v88 < v87)
                {
LABEL_106:
                  v12->i64[0] = a2[-1].i64[1];
                }
                else
                {
                  v12->i64[0] = v12->i64[1];
                  v12->i64[1] = v89;
                  if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) >= __ROR8__(v89, 32)) {
                    return result;
                  }
                  v12->i64[1] = a2[-1].i64[1];
                }
                a2[-1].i64[1] = v89;
              }
              break;
            case 4uLL:
              sub_2A9374((unsigned int *)v12, &v12->u32[2], (unsigned int *)&v12[1], &a2[-1].u32[2]);
              return result;
            case 5uLL:
              sub_2A94B0((unsigned int *)v12, &v12->u32[2], (unsigned int *)&v12[1], &v12[1].u32[2], &a2[-1].u32[2]);
              return result;
            default:
              JUMPOUT(0);
          }
          return result;
        }
        if (v13 <= 191)
        {
          v90 = (int8x16_t *)&v12->u64[1];
          BOOL v92 = v12 == a2 || v90 == a2;
          if (a5)
          {
            if (!v92)
            {
              uint64_t v93 = 0;
              uint64_t v94 = v12;
              do
              {
                uint64_t v96 = v94->u32[2];
                uint64_t v97 = v94->u32[3];
                uint64_t v98 = v94->u32[0];
                uint64_t v99 = v94->u32[1];
                uint64_t v94 = v90;
                if ((v97 | (unint64_t)(v96 << 32)) < (v99 | (unint64_t)(v98 << 32)))
                {
                  uint64_t v100 = v90->i64[0];
                  unint64_t v101 = __ROR8__(v94->i64[0], 32);
                  uint64_t v102 = v93;
                  do
                  {
                    uint64_t v103 = &v12->i8[v102];
                    *(uint64_t *)((char *)&v12->i64[1] + v102) = *(uint64_t *)((char *)v12->i64 + v102);
                    if (!v102)
                    {
                      v95 = (uint64_t *)v12;
                      goto LABEL_124;
                    }
                    v102 -= 8;
                  }
                  while (v101 < (*((unsigned int *)v103 - 1) | ((unint64_t)*((unsigned int *)v103 - 2) << 32)));
                  v95 = (uint64_t *)((char *)&v12->i64[1] + v102);
LABEL_124:
                  uint64_t *v95 = v100;
                }
                v90 = (int8x16_t *)&v94->u64[1];
                v93 += 8;
              }
              while (&v94->u64[1] != (unint64_t *)a2);
            }
          }
          else if (!v92)
          {
            do
            {
              uint64_t v105 = a1->u32[2];
              uint64_t v106 = a1->u32[3];
              uint64_t v107 = a1->u32[0];
              uint64_t v108 = a1->u32[1];
              a1 = v90;
              if ((v106 | (unint64_t)(v105 << 32)) < (v108 | (unint64_t)(v107 << 32)))
              {
                uint64_t v109 = v90->i64[0];
                unint64_t v110 = __ROR8__(v90->i64[0], 32);
                do
                {
                  BOOL v111 = (uint64_t *)v90;
                  uint64_t v112 = v90[-1].i64[1];
                  v90 = (int8x16_t *)((char *)v90 - 8);
                  *BOOL v111 = v112;
                }
                while (v110 < (*((unsigned int *)v111 - 3) | ((unint64_t)*((unsigned int *)v111 - 4) << 32)));
                v90->i64[0] = v109;
              }
              v90 = (int8x16_t *)&a1->u64[1];
            }
            while (&a1->u64[1] != (unint64_t *)a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v12 != a2)
          {
            sub_2A9598((unsigned int *)v12, (unsigned int *)a2, (unsigned int *)a2, a3);
          }
          return result;
        }
        unint64_t v15 = v14 >> 1;
        unint64_t v16 = (unsigned int *)v12 + 2 * (v14 >> 1);
        unint64_t v17 = a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32);
        if ((unint64_t)v13 >= 0x401) {
          break;
        }
        unint64_t v21 = v12->u32[1] | ((unint64_t)v12->u32[0] << 32);
        uint64_t v22 = &v12->u32[2 * v15 + 1];
        if (v21 < (*v22 | ((unint64_t)*v16 << 32)))
        {
          uint64_t v23 = *(void *)v16;
          if (v17 >= v21)
          {
            *(void *)unint64_t v16 = v12->i64[0];
            v12->i64[0] = v23;
            if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) >= __ROR8__(v23, 32)) {
              goto LABEL_32;
            }
            v12->i64[0] = a2[-1].i64[1];
          }
          else
          {
            *(void *)unint64_t v16 = a2[-1].i64[1];
          }
          a2[-1].i64[1] = v23;
LABEL_32:
          --a4;
          if ((a5 & 1) == 0) {
            goto LABEL_56;
          }
          goto LABEL_33;
        }
        if (v17 >= v21) {
          goto LABEL_32;
        }
        uint64_t v26 = v12->i64[0];
        v12->i64[0] = a2[-1].i64[1];
        a2[-1].i64[1] = v26;
        if ((v12->u32[1] | ((unint64_t)v12->u32[0] << 32)) >= (*v22 | ((unint64_t)*v16 << 32))) {
          goto LABEL_32;
        }
        uint64_t v27 = *(void *)v16;
        *(void *)unint64_t v16 = v12->i64[0];
        v12->i64[0] = v27;
        --a4;
        if (a5) {
          goto LABEL_33;
        }
LABEL_56:
        uint64_t v37 = v12->i64[0];
        if ((v12[-1].u32[3] | ((unint64_t)v12[-1].u32[2] << 32)) < (v12->u32[1] | ((unint64_t)v12->u32[0] << 32))) {
          goto LABEL_57;
        }
        unint64_t v73 = __ROR8__(v37, 32);
        if (v73 < (a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)))
        {
          do
          {
            uint64_t v74 = v12->u32[2];
            uint64_t v75 = v12->u32[3];
            uint64_t v12 = (int8x16_t *)((char *)v12 + 8);
          }
          while (v73 >= (v75 | (unint64_t)(v74 << 32)));
        }
        else
        {
          long long v76 = (int8x16_t *)&v12->u64[1];
          do
          {
            uint64_t v12 = v76;
            if (v76 >= a2) {
              break;
            }
            unint64_t v77 = v76->u32[1] | ((unint64_t)v76->u32[0] << 32);
            long long v76 = (int8x16_t *)((char *)v76 + 8);
          }
          while (v73 >= v77);
        }
        unsigned int v78 = a2;
        if (v12 < a2)
        {
          unsigned int v78 = a2;
          do
          {
            uint64_t v79 = v78[-1].u32[2];
            uint64_t v80 = v78[-1].u32[3];
            unsigned int v78 = (int8x16_t *)((char *)v78 - 8);
          }
          while (v73 < (v80 | (unint64_t)(v79 << 32)));
        }
        while (v12 < v78)
        {
          uint64_t v81 = v12->i64[0];
          v12->i64[0] = v78->i64[0];
          v78->i64[0] = v81;
          do
          {
            uint64_t v82 = v12->u32[2];
            uint64_t v83 = v12->u32[3];
            uint64_t v12 = (int8x16_t *)((char *)v12 + 8);
          }
          while (v73 >= (v83 | (unint64_t)(v82 << 32)));
          do
          {
            uint64_t v84 = v78[-1].u32[2];
            uint64_t v85 = v78[-1].u32[3];
            unsigned int v78 = (int8x16_t *)((char *)v78 - 8);
          }
          while (v73 < (v85 | (unint64_t)(v84 << 32)));
        }
        uint64_t v86 = &v12[-1].i64[1];
        BOOL v5 = &v12[-1].u64[1] >= (unint64_t *)a1;
        BOOL v6 = &v12[-1].u64[1] == (unint64_t *)a1;
        if (&v12[-1].u64[1] != (unint64_t *)a1) {
          a1->i64[0] = *v86;
        }
        a5 = 0;
        uint64_t *v86 = v37;
      }
      unint64_t v18 = &v12->u32[2 * v15 + 1];
      unint64_t v19 = *v18 | ((unint64_t)*v16 << 32);
      if (v19 >= (v12->u32[1] | ((unint64_t)v12->u32[0] << 32)))
      {
        if (v17 < v19)
        {
          uint64_t v24 = *(void *)v16;
          *(void *)unint64_t v16 = a2[-1].i64[1];
          a2[-1].i64[1] = v24;
          if ((*v18 | ((unint64_t)*v16 << 32)) < (v12->u32[1] | ((unint64_t)v12->u32[0] << 32)))
          {
            uint64_t v25 = v12->i64[0];
            v12->i64[0] = *(void *)v16;
            *(void *)unint64_t v16 = v25;
          }
        }
      }
      else
      {
        uint64_t v20 = v12->i64[0];
        if (v17 >= v19)
        {
          v12->i64[0] = *(void *)v16;
          *(void *)unint64_t v16 = v20;
          if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) >= __ROR8__(v20, 32)) {
            goto LABEL_23;
          }
          *(void *)unint64_t v16 = a2[-1].i64[1];
        }
        else
        {
          v12->i64[0] = a2[-1].i64[1];
        }
        a2[-1].i64[1] = v20;
      }
LABEL_23:
      uint64_t v28 = &v12->i8[8 * v15];
      unsigned int v30 = *((_DWORD *)v28 - 2);
      unint64_t v29 = v28 - 8;
      long long v31 = (unsigned int *)(v29 + 4);
      unint64_t v32 = *((unsigned int *)v29 + 1) | ((unint64_t)v30 << 32);
      unint64_t v33 = a2[-1].u32[1] | ((unint64_t)a2[-1].u32[0] << 32);
      if (v32 >= (v12->u32[3] | ((unint64_t)v12->u32[2] << 32)))
      {
        if (v33 < v32)
        {
          uint64_t v35 = *(void *)v29;
          *(void *)unint64_t v29 = a2[-1].i64[0];
          a2[-1].i64[0] = v35;
          if ((*v31 | ((unint64_t)*(unsigned int *)v29 << 32)) < (v12->u32[3] | ((unint64_t)v12->u32[2] << 32)))
          {
            uint64_t v36 = v12->i64[1];
            v12->i64[1] = *(void *)v29;
            *(void *)unint64_t v29 = v36;
          }
        }
      }
      else
      {
        uint64_t v34 = v12->i64[1];
        if (v33 >= v32)
        {
          v12->i64[1] = *(void *)v29;
          *(void *)unint64_t v29 = v34;
          if ((a2[-1].u32[1] | ((unint64_t)a2[-1].u32[0] << 32)) >= __ROR8__(v34, 32)) {
            goto LABEL_37;
          }
          *(void *)unint64_t v29 = a2[-1].i64[0];
        }
        else
        {
          v12->i64[1] = a2[-1].i64[0];
        }
        a2[-1].i64[0] = v34;
      }
LABEL_37:
      unint64_t v38 = &v12->i8[8 * v15];
      unsigned int v40 = *((_DWORD *)v38 + 2);
      char v39 = (unsigned int *)(v38 + 8);
      uint64_t v41 = v39 + 1;
      unint64_t v42 = v39[1] | ((unint64_t)v40 << 32);
      unint64_t v43 = a2[-2].u32[3] | ((unint64_t)a2[-2].u32[2] << 32);
      if (v42 >= (v12[1].u32[1] | ((unint64_t)v12[1].u32[0] << 32)))
      {
        if (v43 < v42)
        {
          uint64_t v45 = *(void *)v39;
          *(void *)char v39 = a2[-2].i64[1];
          a2[-2].i64[1] = v45;
          if ((*v41 | ((unint64_t)*v39 << 32)) < (v12[1].u32[1] | ((unint64_t)v12[1].u32[0] << 32)))
          {
            uint64_t v46 = v12[1].i64[0];
            v12[1].i64[0] = *(void *)v39;
            *(void *)char v39 = v46;
          }
        }
      }
      else
      {
        uint64_t v44 = v12[1].i64[0];
        if (v43 >= v42)
        {
          v12[1].i64[0] = *(void *)v39;
          *(void *)char v39 = v44;
          if ((a2[-2].u32[3] | ((unint64_t)a2[-2].u32[2] << 32)) >= __ROR8__(v44, 32)) {
            goto LABEL_46;
          }
          *(void *)char v39 = a2[-2].i64[1];
        }
        else
        {
          v12[1].i64[0] = a2[-2].i64[1];
        }
        a2[-2].i64[1] = v44;
      }
LABEL_46:
      unint64_t v47 = *v18 | ((unint64_t)*v16 << 32);
      unint64_t v48 = *v31 | ((unint64_t)*(unsigned int *)v29 << 32);
      unint64_t v49 = *v41 | ((unint64_t)*v39 << 32);
      if (v47 >= v48)
      {
        uint64_t v50 = *(void *)v16;
        if (v49 < v47)
        {
          uint64_t v51 = *(void *)v39;
          *(void *)unint64_t v16 = *(void *)v39;
          *(void *)char v39 = v50;
          uint64_t v50 = v51;
          if ((*v18 | (unint64_t)(v51 << 32)) < v48)
          {
            uint64_t v52 = *(void *)v29;
            *(void *)unint64_t v29 = v51;
            *(void *)unint64_t v16 = v52;
LABEL_54:
            uint64_t v50 = v52;
          }
        }
      }
      else
      {
        uint64_t v50 = *(void *)v29;
        if (v49 < v47)
        {
          *(void *)unint64_t v29 = *(void *)v39;
          *(void *)char v39 = v50;
          uint64_t v50 = *(void *)v16;
          goto LABEL_55;
        }
        *(void *)unint64_t v29 = *(void *)v16;
        *(void *)unint64_t v16 = v50;
        if (v49 < __ROR8__(v50, 32))
        {
          uint64_t v52 = *(void *)v39;
          *(void *)unint64_t v16 = *(void *)v39;
          *(void *)char v39 = v50;
          goto LABEL_54;
        }
      }
LABEL_55:
      uint64_t v53 = v12->i64[0];
      v12->i64[0] = v50;
      *(void *)unint64_t v16 = v53;
      --a4;
      if ((a5 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_33:
      uint64_t v37 = v12->i64[0];
LABEL_57:
      uint64_t v54 = 0;
      unint64_t v55 = __ROR8__(v37, 32);
      do
      {
        unint64_t v56 = v12->u32[v54 + 3] | ((unint64_t)v12->u32[v54 + 2] << 32);
        v54 += 2;
      }
      while (v56 < v55);
      std::string v57 = &v12->i8[v54 * 4];
      std::string v58 = a2;
      if (v54 == 2)
      {
        std::string v58 = a2;
        do
        {
          if (v57 >= (char *)v58) {
            break;
          }
          uint64_t v61 = v58[-1].u32[2];
          uint64_t v62 = v58[-1].u32[3];
          std::string v58 = (int8x16_t *)((char *)v58 - 8);
        }
        while ((v62 | (unint64_t)(v61 << 32)) >= v55);
      }
      else
      {
        do
        {
          uint64_t v59 = v58[-1].u32[2];
          uint64_t v60 = v58[-1].u32[3];
          std::string v58 = (int8x16_t *)((char *)v58 - 8);
        }
        while ((v60 | (unint64_t)(v59 << 32)) >= v55);
      }
      if (v57 >= (char *)v58)
      {
        long long v70 = v57 - 8;
        if (v57 - 8 == (char *)v12) {
          goto LABEL_75;
        }
LABEL_74:
        v12->i64[0] = *(void *)v70;
        goto LABEL_75;
      }
      unint64_t v63 = (unint64_t)v57;
      long long v64 = (uint64_t *)v58;
      do
      {
        uint64_t v65 = *(void *)v63;
        *(void *)unint64_t v63 = *v64;
        *long long v64 = v65;
        do
        {
          uint64_t v66 = *(unsigned int *)(v63 + 8);
          uint64_t v67 = *(unsigned int *)(v63 + 12);
          v63 += 8;
        }
        while ((v67 | (unint64_t)(v66 << 32)) < v55);
        do
        {
          uint64_t v68 = *((unsigned int *)v64 - 2);
          uint64_t v69 = *((unsigned int *)v64-- - 1);
        }
        while ((v69 | (unint64_t)(v68 << 32)) >= v55);
      }
      while (v63 < (unint64_t)v64);
      long long v70 = (char *)(v63 - 8);
      if ((int8x16_t *)(v63 - 8) != v12) {
        goto LABEL_74;
      }
LABEL_75:
      *(void *)long long v70 = v37;
      if (v57 < (char *)v58) {
        goto LABEL_78;
      }
      BOOL v71 = sub_8EF6C8(v12, (int8x16_t *)v70);
      uint64_t v12 = (int8x16_t *)(v70 + 8);
      if (sub_8EF6C8((int8x16_t *)(v70 + 8), a2)) {
        break;
      }
      if (!v71)
      {
LABEL_78:
        sub_8EEDA0(a1, v70, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v12 = (int8x16_t *)(v70 + 8);
      }
    }
    a2 = (int8x16_t *)v70;
    if (!v71) {
      continue;
    }
    return result;
  }
}

BOOL sub_8EF6C8(int8x16_t *a1, int8x16_t *a2)
{
  switch(((char *)a2 - (char *)a1) >> 3)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) >= (a1->u32[1] | ((unint64_t)a1->u32[0] << 32))) {
        return 1;
      }
      uint64_t v3 = a1->i64[0];
      goto LABEL_7;
    case 3:
      unint64_t v4 = a1->u32[3] | ((unint64_t)a1->u32[2] << 32);
      unint64_t v5 = a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32);
      if (v4 >= (a1->u32[1] | ((unint64_t)a1->u32[0] << 32)))
      {
        if (v5 < v4)
        {
          uint64_t v11 = a1->i64[1];
          a1->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v11;
          if ((a1->u32[3] | ((unint64_t)a1->u32[2] << 32)) < (a1->u32[1] | ((unint64_t)a1->u32[0] << 32)))
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
            return 1;
          }
        }
      }
      else
      {
        uint64_t v3 = a1->i64[0];
        if (v5 < v4)
        {
LABEL_7:
          a1->i64[0] = a2[-1].i64[1];
          a2[-1].i64[1] = v3;
          return 1;
        }
        a1->i64[0] = a1->i64[1];
        a1->i64[1] = v3;
        if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) < __ROR8__(v3, 32))
        {
          a1->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v3;
          return 1;
        }
      }
      return 1;
    case 4:
      sub_2A9374((unsigned int *)a1, &a1->u32[2], (unsigned int *)&a1[1], &a2[-1].u32[2]);
      return 1;
    case 5:
      sub_2A94B0((unsigned int *)a1, &a1->u32[2], (unsigned int *)&a1[1], &a1[1].u32[2], &a2[-1].u32[2]);
      return 1;
    default:
      BOOL v6 = a1 + 1;
      unint64_t v7 = a1->u32[3] | ((unint64_t)a1->u32[2] << 32);
      unint64_t v8 = a1->u32[1] | ((unint64_t)a1->u32[0] << 32);
      unint64_t v9 = a1[1].u32[1] | ((unint64_t)a1[1].u32[0] << 32);
      if (v7 >= v8)
      {
        if (v9 < v7)
        {
          uint64_t v13 = a1->i64[1];
          uint64_t v12 = a1[1].i64[0];
          a1->i64[1] = v12;
          a1[1].i64[0] = v13;
          if (__ROR8__(v12, 32) < v8)
          {
            uint64_t v14 = a1->i64[0];
            a1->i64[0] = v12;
            a1->i64[1] = v14;
          }
        }
      }
      else
      {
        uint64_t v10 = a1->i64[0];
        if (v9 >= v7)
        {
          a1->i64[0] = a1->i64[1];
          a1->i64[1] = v10;
          if (v9 >= __ROR8__(v10, 32)) {
            goto LABEL_25;
          }
          a1->i64[1] = a1[1].i64[0];
        }
        else
        {
          a1->i64[0] = a1[1].i64[0];
        }
        a1[1].i64[0] = v10;
      }
LABEL_25:
      unint64_t v15 = &a1[1].u32[2];
      if (&a1[1].u64[1] == (unint64_t *)a2) {
        return 1;
      }
      uint64_t v16 = 0;
      int v17 = 0;
      break;
  }
  while ((v15[1] | ((unint64_t)*v15 << 32)) >= (v6->u32[1] | ((unint64_t)v6->u32[0] << 32)))
  {
LABEL_34:
    BOOL v6 = (int8x16_t *)v15;
    v16 += 8;
    v15 += 2;
    if (v15 == (unsigned int *)a2) {
      return 1;
    }
  }
  uint64_t v18 = *(void *)v15;
  unint64_t v19 = __ROR8__(*(void *)v15, 32);
  uint64_t v20 = v16;
  do
  {
    *(uint64_t *)((char *)&a1[1].i64[1] + v20) = *(uint64_t *)((char *)a1[1].i64 + v20);
    if (v20 == -16)
    {
      a1->i64[0] = v18;
      if (++v17 != 8) {
        goto LABEL_34;
      }
      return v15 + 2 == (unsigned int *)a2;
    }
    unint64_t v21 = *(unsigned int *)((char *)&a1->u32[3] + v20) | ((unint64_t)*(unsigned int *)((char *)&a1->u32[2] + v20) << 32);
    v20 -= 8;
  }
  while (v19 < v21);
  *(uint64_t *)((char *)&a1[1].i64[1] + v20) = v18;
  if (++v17 != 8) {
    goto LABEL_34;
  }
  return v15 + 2 == (unsigned int *)a2;
}

uint64_t sub_8EF9B8(uint64_t a1, unint64_t a2, int a3, char *a4)
{
  unsigned int v6 = a2;
  unint64_t v8 = HIDWORD(a2);
  LODWORD(v61.__r_.__value_.__l.__data_) = a2;
  LODWORD(v60.__r_.__value_.__l.__data_) = a3;
  *(void *)&long long v62 = &v60;
  *((void *)&v62 + 1) = &v61;
  unint64_t v9 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v9;
  uint64_t v10 = *(void *)a1;
  if (!v10) {
    goto LABEL_38;
  }
  uint64_t v11 = a1 + 16;
  if (*(_DWORD *)(a1 + 592) == a2)
  {
    unsigned int v12 = 24;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 616) == a2)
  {
    unsigned int v12 = 25;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 640) == a2)
  {
    unsigned int v12 = 26;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 664) == a2)
  {
    unsigned int v12 = 27;
LABEL_10:
    ++*(void *)(a1 + 3864);
    uint64_t v13 = v11 + 24 * v12;
    *(void *)(v13 + 8) = v9;
    uint64_t v14 = *(unsigned int **)(v13 + 16);
    if (v14) {
      goto LABEL_11;
    }
LABEL_38:
    sub_2A54B4((int **)&v62);
    uint64_t v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
    return 0;
  }
  unint64_t v20 = *(void *)(a1 + 648);
  unint64_t v21 = *(void *)(a1 + 624);
  if (*(void *)(a1 + 600) >= v9)
  {
    int v22 = 0;
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + 600);
    int v22 = 24;
  }
  BOOL v23 = v21 >= v9;
  if (v21 < v9) {
    unint64_t v9 = *(void *)(a1 + 624);
  }
  int v24 = 25;
  if (v23) {
    int v24 = v22;
  }
  if (v20 >= v9) {
    unint64_t v25 = v9;
  }
  else {
    unint64_t v25 = *(void *)(a1 + 648);
  }
  unint64_t v26 = *(void *)(a1 + 672);
  if (v20 >= v9) {
    int v27 = v24;
  }
  else {
    int v27 = 26;
  }
  uint64_t v14 = (unsigned int *)sub_2AB884(v10, 6, a2, 1);
  unsigned int v28 = 27;
  if (v26 >= v25) {
    unsigned int v28 = v27;
  }
  uint64_t v29 = v11 + 24 * v28;
  *(_DWORD *)uint64_t v29 = v61.__r_.__value_.__l.__data_;
  *(void *)(v29 + 8) = *(void *)(a1 + 3856);
  *(void *)(v29 + 16) = v14;
  if (!v14) {
    goto LABEL_38;
  }
LABEL_11:
  unint64_t v15 = (int *)((char *)v14 + *v14);
  uint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 < 0x1Fu)
  {
    uint64_t v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v17 = v16[15];
    if (v17)
    {
      uint64_t v18 = (int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
      if (*v18 > v8) {
        return (uint64_t)&v18[v8 + 1] + v18[v8 + 1];
      }
    }
    else
    {
      uint64_t v18 = 0;
    }
    if (a3 != 1)
    {
LABEL_19:
      if (!a3)
      {
        exception = __cxa_allocate_exception(0x40uLL);
        long long v31 = a4;
        uint64_t v32 = (uint64_t)exception;
        sub_5E5C(&v55, v31);
        unint64_t v33 = std::string::insert(&v55, 0, "Failed to acquire entity \"");
        long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v56.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        uint64_t v35 = std::string::append(&v56, "\" in quad node ");
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v57.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v54, v6);
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v37 = &v54;
        }
        else {
          uint64_t v37 = (std::string *)v54.__r_.__value_.__r.__words[0];
        }
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v54.__r_.__value_.__l.__size_;
        }
        char v39 = std::string::append(&v57, (const std::string::value_type *)v37, size);
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v58.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        uint64_t v41 = std::string::append(&v58, " at position ");
        long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v59.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v53, v8);
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v43 = &v53;
        }
        else {
          unint64_t v43 = (std::string *)v53.__r_.__value_.__r.__words[0];
        }
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v44 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v44 = v53.__r_.__value_.__l.__size_;
        }
        uint64_t v45 = std::string::append(&v59, (const std::string::value_type *)v43, v44);
        long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        v60.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        unint64_t v47 = std::string::append(&v60, " on layer ");
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v61.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        unint64_t v49 = sub_736EC(6u);
        uint64_t v50 = std::string::append(&v61, v49);
        long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        std::string::size_type v63 = v50->__r_.__value_.__r.__words[2];
        long long v62 = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        uint64_t v52 = (void *)sub_2F404(v32, &v62);
      }
      return (uint64_t)&v18[v8 + 1] + v18[v8 + 1];
    }
  }
  return 0;
}

void sub_8EFD50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (*(char *)(v54 - 105) < 0) {
    operator delete(*(void **)(v54 - 128));
  }
  if (*(char *)(v54 - 137) < 0)
  {
    operator delete(*(void **)(v54 - 160));
    if ((*(char *)(v54 - 169) & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
  }
  else if ((*(char *)(v54 - 169) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v54 - 192));
  if ((a15 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a54 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a10);
  if ((a54 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a49);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a42);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a40 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a16);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a35);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_12;
  }
LABEL_20:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0) {
LABEL_21:
  }
    _Unwind_Resume(a1);
LABEL_12:
  operator delete(__p);
  goto LABEL_21;
}

double sub_8EFF0C()
{
  byte_25D0D6F = 1;
  word_25D0D58 = 65;
  byte_25D0D87 = 1;
  word_25D0D70 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25D0E18 = 0u;
  *(_OWORD *)&qword_25D0E28 = 0u;
  dword_25D0E38 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25D0E18, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25D0E18, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25D0E18, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25D0E18, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25D0D9F = 8;
  strcpy((char *)&qword_25D0D88, "any_mode");
  byte_25D0DB7 = 7;
  strcpy((char *)&dword_25D0DA0, "cycling");
  byte_25D0DCF = 7;
  strcpy((char *)&dword_25D0DB8, "driving");
  byte_25D0DE7 = 7;
  strcpy((char *)&dword_25D0DD0, "walking");
  qword_25D0DF0 = 0;
  qword_25D0DF8 = 0;
  qword_25D0DE8 = 0;
  v0 = operator new(9uLL);
  *(void *)v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25D0DE8 = (uint64_t)v0;
  qword_25D0DF0 = (uint64_t)(v0 + 9);
  qword_25D0DF8 = (uint64_t)(v0 + 9);
  qword_25D0E00 = 0;
  qword_25D0E08 = 0;
  unk_25D0E10 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25D0E08 = (uint64_t)(v1 + 9);
  unk_25D0E10 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25D0E00 = (uint64_t)v1;
  return result;
}

void sub_8F01D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25D0E28) {
    sub_20ABF1C((void **)qword_25D0E28);
  }
  uint64_t v37 = (void *)xmmword_25D0E18;
  *(void *)&xmmword_25D0E18 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_8F0274(uint64_t a1, void *a2)
{
  __p[23] = 11;
  strcpy(__p, "ttl_seconds");
  *(_DWORD *)a1 = 10 * sub_319F48(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(void *)long long __p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_20B9240;
  strcpy(*(char **)__p, "erase_duplicate_incidents_by_group_id");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  BOOL v5 = v4;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    *(unsigned char *)(a1 + 4) = v5;
  }
  else
  {
    *(unsigned char *)(a1 + 4) = v4;
  }
  return a1;
}

void sub_8F0364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_8F0384(uint64_t a1, void *a2, int a3, uint64_t a4, char a5)
{
  uint64_t v17 = 0;
  uint64_t v18 = operator new(0x20uLL);
  long long v19 = xmmword_20B8E90;
  strcpy((char *)v18, "TransitIncidentComponentBuilder");
  long long __p = 0;
  uint64_t v16 = 0;
  char v10 = sub_374CDC((uint64_t)a2, (uint64_t)&v18, (uint64_t *)&__p);
  sub_8F0274(a1, v10);
  int v11 = (void **)__p;
  if (__p)
  {
    unsigned int v12 = v16;
    char v13 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 3;
      }
      while (v12 != v11);
      char v13 = __p;
    }
    uint64_t v16 = v11;
    operator delete(v13);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete(v18);
  }
  *(void *)(a1 + 8) = sub_3758AC(a2);
  *(void *)(a1 + 16) = sub_375500(a2);
  *(void *)(a1 + 24) = sub_3755E4(a2);
  *(_DWORD *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = a4;
  *(unsigned char *)(a1 + 48) = a5;
  return a1;
}

void sub_8F04B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_8F04D8(uint64_t a1, void *a2, int a3, uint64_t a4, char a5)
{
  return sub_8F0384(a1, a2, a3, a4, a5);
}

void sub_8F04E0(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  a3[1] = 0x27FFFFFFFLL;
  *a3 = &off_243B040;
  a3[2] = 0;
  BOOL v5 = (void **)(a3 + 2);
  a3[3] = 0;
  a3[4] = 0;
  if (*(void *)(*(void *)(a1 + 8) + 11688))
  {
    sub_8F05CC(a1, a2, (uint64_t *)&v9);
    unsigned int v6 = *v5;
    if (*v5)
    {
      uint64_t v7 = a3[3];
      int v8 = *v5;
      if ((void *)v7 != v6)
      {
        do
          uint64_t v7 = sub_361164(v7 - 456);
        while ((void *)v7 != v6);
        int v8 = *v5;
      }
      a3[3] = v6;
      operator delete(v8);
      void *v5 = 0;
      v5[1] = 0;
      v5[2] = 0;
    }
    *((_OWORD *)a3 + 1) = v9;
    a3[4] = v10;
  }
  *((_DWORD *)a3 + 2) = *(_DWORD *)a1;
}

void sub_8F05B8(_Unwind_Exception *a1)
{
  sub_8E33BC(v1);
  _Unwind_Resume(a1);
}

void sub_8F05CC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  sub_9102C0((uint64_t)v18, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(_DWORD *)(a1 + 32));
  unsigned int v6 = (unsigned char *)sub_9102FC((uint64_t)v18, (char **)(a2 + 464));
  uint64_t v7 = sub_5F3038(v6, *(unsigned char *)(a1 + 4));
  sub_911E64((uint64_t)v7, *(uint64_t **)(a1 + 40));
  int v8 = sub_8ECB18((_DWORD *)a2);
  long long v9 = v8;
  if (!*v8 || v8[1] == -1 || v8[3] == -1)
  {
    sub_8ECABC(a2, (uint64_t)v29);
    int v13 = v30 == -1 && *(unsigned char *)(a1 + 48) != 0;
    int v14 = v30 != 4 && *(unsigned char *)(a1 + 48) != 0;
    sub_90CD6C(a2, v13, *(void *)(a1 + 24), (unint64_t *)&__p);
    sub_91037C((uint64_t)v18, (char **)&__p);
    if (__p)
    {
      uint64_t v16 = __p;
      operator delete(__p);
    }
    sub_90D068(a2, v14, *(void *)(a1 + 16), *(void *)(a1 + 24), (unint64_t *)&__p);
    sub_91033C((uint64_t)v18, (char **)&__p);
    if (__p)
    {
      uint64_t v16 = __p;
      operator delete(__p);
    }
  }
  else
  {
    uint64_t v10 = (int *)sub_369F8C(*(void *)(a1 + 24), *(void *)v8, 0, "trip");
    uint64_t v11 = *(void *)((char *)v10 + *(unsigned __int16 *)((char *)v10 - *v10 + 6));
    unsigned int v12 = operator new(8uLL);
    long long __p = v12;
    *unsigned int v12 = v11;
    uint64_t v16 = v12 + 1;
    uint64_t v17 = v12 + 1;
    sub_91033C((uint64_t)v18, (char **)&__p);
    if (__p)
    {
      uint64_t v16 = __p;
      operator delete(__p);
    }
    sub_9103D4(v18, *(void *)v9, v9[3]);
  }
  sub_910800(v18, a3);
  if (v27)
  {
    unsigned int v28 = v27;
    operator delete(v27);
  }
  if (v25)
  {
    unint64_t v26 = v25;
    operator delete(v25);
  }
  if (v23)
  {
    int v24 = v23;
    operator delete(v23);
  }
  if (v21)
  {
    int v22 = v21;
    operator delete(v21);
  }
  if (v19)
  {
    unint64_t v20 = v19;
    operator delete(v19);
  }
}

void sub_8F07E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (__p)
  {
    operator delete(__p);
    sub_8F0844(&a12);
    _Unwind_Resume(a1);
  }
  sub_8F0844(&a12);
  _Unwind_Resume(a1);
}

void *sub_8F0844(void *a1)
{
  int v2 = (void *)a1[16];
  if (v2)
  {
    a1[17] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[13];
  if (v3)
  {
    a1[14] = v3;
    operator delete(v3);
  }
  BOOL v4 = (void *)a1[10];
  if (v4)
  {
    a1[11] = v4;
    operator delete(v4);
  }
  BOOL v5 = (void *)a1[7];
  if (v5)
  {
    a1[8] = v5;
    operator delete(v5);
  }
  unsigned int v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
  }
  return a1;
}

double sub_8F08B8()
{
  byte_25D0E57 = 1;
  word_25D0E40 = 65;
  byte_25D0E6F = 1;
  word_25D0E58 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25D0F00 = 0u;
  *(_OWORD *)&qword_25D0F10 = 0u;
  dword_25D0F20 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25D0F00, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25D0F00, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25D0F00, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25D0F00, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25D0E87 = 8;
  strcpy((char *)&qword_25D0E70, "any_mode");
  byte_25D0E9F = 7;
  strcpy((char *)&dword_25D0E88, "cycling");
  byte_25D0EB7 = 7;
  strcpy((char *)&dword_25D0EA0, "driving");
  byte_25D0ECF = 7;
  strcpy((char *)&dword_25D0EB8, "walking");
  qword_25D0ED8 = 0;
  qword_25D0EE0 = 0;
  qword_25D0ED0 = 0;
  v0 = operator new(9uLL);
  *(void *)v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25D0ED0 = (uint64_t)v0;
  qword_25D0ED8 = (uint64_t)(v0 + 9);
  qword_25D0EE0 = (uint64_t)(v0 + 9);
  qword_25D0EE8 = 0;
  qword_25D0EF0 = 0;
  unk_25D0EF8 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25D0EF0 = (uint64_t)(v1 + 9);
  unk_25D0EF8 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25D0EE8 = (uint64_t)v1;
  return result;
}

void sub_8F0B80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25D0F10) {
    sub_20ABF60((void **)qword_25D0F10);
  }
  uint64_t v37 = (void *)xmmword_25D0F00;
  *(void *)&xmmword_25D0F00 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_8F0C20(uint64_t a1, void *a2)
{
  *(void *)long long __p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_20B8FD0;
  strcpy(*(char **)__p, "include_in_station_walking_leg_times");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(unsigned char *)a1 = v4;
  __p[23] = 14;
  strcpy(__p, "max_num_labels");
  unint64_t v5 = sub_5C9BC(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(void *)(a1 + 8) = v5;
  *(void *)long long __p = operator new(0x48uLL);
  *(_OWORD *)&__p[8] = xmmword_20B9270;
  strcpy(*(char **)__p, "suppress_system_name_given_nonempty_line_name_in_schedule_card_title");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(unsigned char *)(a1 + 16) = v6;
  __p[23] = 11;
  strcpy(__p, "ttl_seconds");
  *(_DWORD *)(a1 + 20) = 10 * sub_319F48(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  return a1;
}

void sub_8F0DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_8F0DF0(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v14 = 0;
  unint64_t v15 = operator new(0x20uLL);
  long long v16 = xmmword_20B91A0;
  strcpy((char *)v15, "TransitInfoComponentBuilder");
  long long __p = 0;
  char v13 = 0;
  BOOL v6 = sub_374CDC((uint64_t)a2, (uint64_t)&v15, (uint64_t *)&__p);
  sub_8F0C20((uint64_t)a1, v6);
  char v7 = (void **)__p;
  if (__p)
  {
    int v8 = v13;
    long long v9 = __p;
    if (v13 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      long long v9 = __p;
    }
    char v13 = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(v15);
  }
  a1[3] = a2;
  a1[4] = a3;
  char v10 = (uint64_t *)sub_374EF4(a2);
  sub_688A04(v10, 5u, *(_DWORD *)(a1[4] + 968), a1 + 5);
  return a1;
}

void sub_8F0F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_8F0F2C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_8F131C(a1, (unsigned int **)(a2 + 416), a2, a3);
  BOOL v6 = sub_8ECB18((_DWORD *)a2);
  if (*v6) {
    BOOL v7 = v6[1] == -1;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    sub_8ECABC(a2, (uint64_t)v29);
    sub_8F19A8();
    long long v9 = (void **)(a3 + 112);
    uint64_t v8 = *(void *)(a3 + 112);
    if (v8)
    {
      sub_8E5184(a3 + 112, v8);
      operator delete(*v9);
      *long long v9 = 0;
      *(void *)(a3 + 120) = 0;
      *(void *)(a3 + 128) = 0;
    }
    *(std::string *)(a3 + 112) = v26;
    sub_8FAF68((uint64_t)v29, *(void *)(a1 + 32), *(void **)(a1 + 24), *(void *)(a1 + 8), (uint64_t)&v26);
    char v10 = (void **)(a3 + 88);
    uint64_t v11 = *(void *)(a3 + 88);
    if (v11)
    {
      uint64_t v12 = *(void *)(a3 + 96);
      char v13 = *(void **)(a3 + 88);
      if (v12 != v11)
      {
        do
        {
          v12 -= 144;
          sub_8E48A4(a3 + 104, v12);
        }
        while (v12 != v11);
        char v13 = *v10;
      }
      *(void *)(a3 + 96) = v11;
      operator delete(v13);
      uint64_t *v10 = 0;
      *(void *)(a3 + 96) = 0;
      *(void *)(a3 + 104) = 0;
    }
    *(std::string *)(a3 + 88) = v26;
  }
  else
  {
    uint64_t v14 = sub_3757C8(*(void **)(a1 + 24));
    uint64_t v15 = sub_3755E4(*(void **)(a1 + 24));
    long long v16 = (int *)sub_369F8C(v15, *(void *)v6, 0, "trip");
    unint64_t v17 = *(void *)((char *)v16 + *(unsigned __int16 *)((char *)v16 - *v16 + 6));
    sub_8FAE08(v17, *(void *)(a1 + 32), *(void **)(a1 + 24), *(void *)(a1 + 8), (void **)&v26.__r_.__value_.__l.__data_);
    long long v19 = (void **)(a3 + 88);
    uint64_t v18 = *(void *)(a3 + 88);
    if (v18)
    {
      uint64_t v20 = *(void *)(a3 + 96);
      unint64_t v21 = *(void **)(a3 + 88);
      if (v20 != v18)
      {
        do
        {
          v20 -= 144;
          sub_8E48A4(a3 + 104, v20);
        }
        while (v20 != v18);
        unint64_t v21 = *v19;
      }
      *(void *)(a3 + 96) = v18;
      operator delete(v21);
      *long long v19 = 0;
      *(void *)(a3 + 96) = 0;
      *(void *)(a3 + 104) = 0;
    }
    *(std::string *)(a3 + 88) = v26;
    sub_90C330(v17, *(unsigned __int8 *)(a1 + 16), *(void *)(a1 + 40), v14, v15, *(void *)(a1 + 32), &v26);
    int v22 = (void **)(a3 + 136);
    if (*(char *)(a3 + 159) < 0) {
      operator delete(*v22);
    }
    *(_OWORD *)int v22 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
    *(void *)(a3 + 152) = *((void *)&v26.__r_.__value_.__l + 2);
    sub_90B40C(*(void *)v6, v6[3], v15, *(void *)(a1 + 32), *(void *)(a1 + 40), 0, &v26);
    BOOL v23 = (void **)(a3 + 160);
    if (*(char *)(a3 + 183) < 0) {
      operator delete(*v23);
    }
    *(_OWORD *)BOOL v23 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
    *(void *)(a3 + 176) = *((void *)&v26.__r_.__value_.__l + 2);
  }
  uint64_t v24 = sub_375500(*(void **)(a1 + 24));
  sub_90C818(a2, v24, *(void *)(a1 + 32), (uint64_t)&v26);
  unint64_t v25 = (void **)(a3 + 184);
  if (*(char *)(a3 + 207) < 0) {
    operator delete(*v25);
  }
  *(_OWORD *)unint64_t v25 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  *(void *)(a3 + 200) = *((void *)&v26.__r_.__value_.__l + 2);
  *((unsigned char *)&v26.__r_.__value_.__s + 23) = 0;
  v26.__r_.__value_.__s.__data_[0] = 0;
  if (v28 < 0)
  {
    operator delete(__p);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
  }
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 20);
}

void sub_8F1240(_Unwind_Exception *a1)
{
  sub_8E52AC(v1);
  _Unwind_Resume(a1);
}

void sub_8F1254(_Unwind_Exception *a1)
{
  sub_8E52AC(v1);
  _Unwind_Resume(a1);
}

void sub_8F1268(_Unwind_Exception *a1)
{
  sub_8E52AC(v1);
  _Unwind_Resume(a1);
}

void sub_8F127C(_Unwind_Exception *a1)
{
  sub_8E52AC(v1);
  _Unwind_Resume(a1);
}

void sub_8F1290(_Unwind_Exception *a1)
{
  sub_8E52AC(v1);
  _Unwind_Resume(a1);
}

void sub_8F12A4(_Unwind_Exception *a1)
{
  sub_8E52AC(v1);
  _Unwind_Resume(a1);
}

void sub_8F12B8(_Unwind_Exception *a1)
{
  sub_8E52AC(v1);
  _Unwind_Resume(a1);
}

void sub_8F12CC(_Unwind_Exception *a1)
{
  sub_8E52AC(v1);
  _Unwind_Resume(a1);
}

void sub_8F12E0(_Unwind_Exception *a1)
{
  sub_8E52AC(v1);
  _Unwind_Resume(a1);
}

void sub_8F12F4(_Unwind_Exception *a1)
{
  sub_8E52AC(v1);
  _Unwind_Resume(a1);
}

void sub_8F1308(_Unwind_Exception *a1)
{
  sub_8E52AC(v1);
  _Unwind_Resume(a1);
}

double sub_8F131C@<D0>(uint64_t a1@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *(***v65)(void **__return_ptr);
  void v66[4];
  unsigned char v67[448];
  _OWORD v68[4];
  long long v69;
  long long v70;
  _OWORD v71[10];
  uint64_t v72;
  void *v73;
  void *v74;

  sub_8F23DC(a1, a2, a3, *(void **)(a1 + 24), (uint64_t)&v73);
  uint64_t v8 = v73;
  if (v73 == v74)
  {
    *(void *)(a4 + 8) = 0x27FFFFFFFLL;
    *(void *)a4 = &off_243B070;
    double result = 0.0;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 96) = 0u;
    *(_OWORD *)(a4 + 112) = 0u;
    *(_OWORD *)(a4 + 128) = 0u;
    *(_OWORD *)(a4 + 144) = 0u;
    *(_OWORD *)(a4 + 160) = 0u;
    *(_OWORD *)(a4 + 176) = 0u;
    *(_OWORD *)(a4 + 192) = 0u;
    *(void *)(a4 + 208) = -1;
    if (v8) {
      goto LABEL_58;
    }
    return result;
  }
  unsigned int v72 = 0;
  memset(v71, 0, sizeof(v71));
  uint64_t v69 = 0u;
  long long v70 = 0u;
  memset(v68, 0, sizeof(v68));
  long long v9 = *(void **)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  long long __p = 0;
  long long v47 = 0uLL;
  sub_970668((uint64_t)v67, 1, v9, v10, (uint64_t)v68, (long long *)&__p);
  if (SHIBYTE(v47) < 0) {
    operator delete(__p);
  }
  uint64_t v11 = v73;
  uint64_t v12 = v74;
  if (v73 != v74)
  {
    do
    {
      uint64_t v13 = (uint64_t)v11 + 8;
      sub_972C9C((uint64_t)v67, (unint64_t *)v11, (void **)v11 + 1);
      uint64_t v11 = (void *)(v13 + 8);
    }
    while ((void *)(v13 + 8) != v12);
  }
  uint64_t v14 = sub_375500(*(void **)(a1 + 24));
  uint64_t v15 = sub_3755E4(*(void **)(a1 + 24));
  uint64_t v16 = sub_3757C8(*(void **)(a1 + 24));
  sub_9EE804(v66, v14, v15, v16);
  sub_497CC0(&v65, (uint64_t)v66);
  sub_9E8ADC(&v65, v68);
  *(void *)(a4 + 8) = 0x27FFFFFFFLL;
  *(void *)a4 = &off_243B070;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(_OWORD *)(a4 + 160) = 0u;
  *(_OWORD *)(a4 + 176) = 0u;
  *(_OWORD *)(a4 + 192) = 0u;
  *(void *)(a4 + 208) = -1;
  if ((long long *)(a4 + 16) != (long long *)((char *)&v69 + 8)) {
    sub_8F54F4((uint64_t *)(a4 + 16), *((uint64_t *)&v69 + 1), v70, 0x66FD0EB66FD0EB67 * ((uint64_t)(v70 - *((void *)&v69 + 1)) >> 3));
  }
  if ((_OWORD *)(a4 + 40) != v71) {
    sub_8F5FC0((uint64_t *)(a4 + 40), *(uint64_t *)&v71[0], *((uint64_t *)&v71[0] + 1), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((void *)&v71[0] + 1) - *(void *)&v71[0]) >> 4));
  }
  *(_OWORD *)long long v62 = 0u;
  *(_OWORD *)std::string::size_type v63 = 0u;
  int v64 = 1065353216;
  unint64_t v17 = *a2;
  uint64_t v18 = a2[1];
  if (*a2 == v18) {
    goto LABEL_53;
  }
  while (2)
  {
    uint64_t v19 = sub_3755E4(*(void **)(a1 + 24));
    uint64_t v20 = *v17;
    unsigned int v21 = v17[3];
    int v22 = sub_369B60(v19, v17[1] | (unint64_t)(v20 << 32), 0);
    BOOL v23 = &v22[-*(int *)v22];
    if (*(unsigned __int16 *)v23 < 5u)
    {
      uint64_t v24 = 0;
    }
    else
    {
      uint64_t v24 = *((unsigned __int16 *)v23 + 2);
      if (*((_WORD *)v23 + 2)) {
        v24 += (uint64_t)&v22[*(unsigned int *)&v22[v24]];
      }
    }
    unint64_t v25 = (int *)(v24 + 4 * v20 + 4 + *(unsigned int *)(v24 + 4 * v20 + 4));
    std::string v26 = (unsigned __int16 *)((char *)v25 - *v25);
    if (*v26 >= 0xDu && (uint64_t v27 = v26[6]) != 0) {
      int v28 = *(int *)((char *)v25 + v27);
    }
    else {
      int v28 = -1;
    }
    uint64_t v61 = *(void *)&v22[24 * v28
                        + 4
                        + 24 * v21
                        + *((unsigned __int16 *)v23 + 3)
                        + *(unsigned int *)&v22[*((unsigned __int16 *)v23 + 3)]];
    if (sub_36F918(v62, &v61)) {
      goto LABEL_13;
    }
    sub_8F6344((uint64_t)v62, &v61, &v61);
    sub_8F2C6C((unsigned __int8 *)a1, (uint64_t *)v17, (uint64_t)&__p);
    unint64_t v29 = *(void *)(a4 + 72);
    if (v29 >= *(void *)(a4 + 80))
    {
      uint64_t v35 = sub_8F66AC((void **)(a4 + 64), (uint64_t)&__p);
      int v36 = SHIBYTE(v58);
      *(void *)(a4 + 72) = v35;
      if (v36 < 0)
      {
        operator delete((void *)v57);
        long long v34 = (char *)v55[0];
        if (!v55[0]) {
          goto LABEL_46;
        }
      }
      else
      {
        long long v34 = (char *)v55[0];
        if (!v55[0]) {
          goto LABEL_46;
        }
      }
    }
    else
    {
      *(void *)unint64_t v29 = __p;
      long long v30 = v47;
      *(void *)(v29 + 24) = v48;
      *(_OWORD *)(v29 + 8) = v30;
      uint64_t v48 = 0;
      long long v47 = 0uLL;
      uint64_t v31 = v50;
      *(_OWORD *)(v29 + 32) = v49;
      *(void *)(v29 + 48) = v31;
      uint64_t v50 = 0;
      long long v49 = 0uLL;
      uint64_t v32 = v51;
      *(_DWORD *)(v29 + 64) = v52;
      *(void *)(v29 + 56) = v32;
      *(void *)(v29 + 72) = 0;
      *(void *)(v29 + 80) = 0;
      *(void *)(v29 + 88) = 0;
      *(void *)(v29 + 96) = 0;
      *(_OWORD *)(v29 + 72) = *(_OWORD *)v53;
      *(void *)(v29 + 88) = v54;
      v53[0] = 0;
      v53[1] = 0;
      uint64_t v54 = 0;
      *(void *)(v29 + 104) = 0;
      *(void *)(v29 + 112) = 0;
      *(_OWORD *)(v29 + 96) = *(_OWORD *)v55;
      *(void *)(v29 + 112) = v56;
      v55[0] = 0;
      v55[1] = 0;
      uint64_t v56 = 0;
      long long v33 = v57;
      *(void *)(v29 + 136) = v58;
      *(_OWORD *)(v29 + 120) = v33;
      uint64_t v58 = 0;
      long long v57 = 0uLL;
      LODWORD(v32) = v59;
      *(unsigned char *)(v29 + 148) = v60;
      *(_DWORD *)(v29 + 144) = v32;
      *(void *)(a4 + 72) = v29 + 152;
      long long v34 = (char *)v55[0];
      if (!v55[0]) {
        goto LABEL_46;
      }
    }
    uint64_t v37 = v34;
    if (v55[1] == v34) {
      goto LABEL_45;
    }
    unint64_t v38 = (void **)((char *)v55[1] - 56);
    do
    {
      if (*((char *)v38 + 55) < 0)
      {
        operator delete(v38[4]);
        if ((*((char *)v38 + 23) & 0x80000000) == 0)
        {
LABEL_34:
          if ((*((char *)v38 - 9) & 0x80000000) == 0) {
            goto LABEL_35;
          }
          goto LABEL_41;
        }
      }
      else if ((*((char *)v38 + 23) & 0x80000000) == 0)
      {
        goto LABEL_34;
      }
      operator delete(*v38);
      if ((*((char *)v38 - 9) & 0x80000000) == 0)
      {
LABEL_35:
        int v40 = *((_DWORD *)v38 - 12);
        if (v40 != 1) {
          goto LABEL_36;
        }
        goto LABEL_42;
      }
LABEL_41:
      operator delete(*(v38 - 4));
      int v40 = *((_DWORD *)v38 - 12);
      if (v40 != 1)
      {
LABEL_36:
        if (!v40 && *((char *)v38 - 49) < 0)
        {
          uint64_t v41 = *(v38 - 9);
LABEL_30:
          operator delete(v41);
          goto LABEL_31;
        }
        goto LABEL_31;
      }
LABEL_42:
      uint64_t v41 = *(v38 - 9);
      if (v41)
      {
        *(v38 - 8) = v41;
        goto LABEL_30;
      }
LABEL_31:
      char v39 = (char *)(v38 - 11);
      v38 -= 18;
    }
    while (v39 != v34);
    uint64_t v37 = (char *)v55[0];
LABEL_45:
    v55[1] = v34;
    operator delete(v37);
LABEL_46:
    if (v53[0])
    {
      v53[1] = v53[0];
      operator delete(v53[0]);
    }
    if (SHIBYTE(v50) < 0)
    {
      operator delete((void *)v49);
      if (SHIBYTE(v48) < 0) {
        goto LABEL_50;
      }
    }
    else if (SHIBYTE(v48) < 0)
    {
LABEL_50:
      operator delete((void *)v47);
    }
LABEL_13:
    v17 += 30;
    if (v17 != v18) {
      continue;
    }
    break;
  }
LABEL_53:
  *(void *)(a4 + 208) = sub_8F3070(a1, a3);
  long long v42 = v63[0];
  if (v63[0])
  {
    do
    {
      unint64_t v43 = (void *)*v42;
      operator delete(v42);
      long long v42 = v43;
    }
    while (v43);
  }
  std::string::size_type v44 = v62[0];
  v62[0] = 0;
  if (v44) {
    operator delete(v44);
  }
  sub_8F3800((uint64_t)v67);
  sub_8F39EC(v68);
  uint64_t v8 = v73;
  if (v73)
  {
LABEL_58:
    uint64_t v74 = v8;
    operator delete(v8);
  }
  return result;
}

void sub_8F18F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  sub_12168((uint64_t)&a35);
  sub_8E52AC(v45);
  sub_8F3800((uint64_t)&a45);
  sub_8F39EC(&STACK[0x2E0]);
  uint64_t v48 = *(void **)(v46 - 112);
  if (v48)
  {
    *(void *)(v46 - 104) = v48;
    operator delete(v48);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_8F19A8()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  unint64_t v5 = v4;
  long long v78 = 0uLL;
  uint64_t v79 = 0;
  uint64_t v6 = sub_375500(*(void **)(v0 + 24));
  BOOL v7 = *(std::__shared_weak_count **)(v6 + 8);
  uint64_t v73 = *(void *)v6;
  uint64_t v74 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memcpy(v75, (const void *)(v6 + 16), sizeof(v75));
  uint64_t v8 = *(std::__shared_weak_count **)(v6 + 3880);
  long long v76 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v77 = *(unsigned char *)(v6 + 3888);
  switch(*(_DWORD *)(v2 + 8))
  {
    case 0:
      long long v9 = (int *)sub_498D5C((uint64_t)&v73, *(void *)v2, 0, "stop");
      unint64_t v10 = *(void *)((char *)v9 + *(unsigned __int16 *)((char *)v9 - *v9 + 12));
      if (v10 <= 0xFFFFFFFEFFFFFFFFLL
        && *(void *)((char *)v9 + *(unsigned __int16 *)((char *)v9 - *v9 + 12)) != 0)
      {
        uint64_t v12 = (void *)v78;
        if (v79 == (void *)v78)
        {
          if (v79)
          {
            *((void *)&v78 + 1) = v79;
            operator delete(v79);
            long long v78 = 0uLL;
            uint64_t v79 = 0;
          }
          uint64_t v12 = operator new(8uLL);
          *(void *)&long long v78 = v12;
          *((void *)&v78 + 1) = v12;
          uint64_t v79 = v12 + 1;
        }
        goto LABEL_23;
      }
      break;
    case 1:
      uint64_t v13 = (int *)sub_8ED3D4((uint64_t)&v73, *(void *)v2, 0, "hall");
      unint64_t v10 = *(void *)((char *)v13 + *(unsigned __int16 *)((char *)v13 - *v13 + 10));
      if (v10 <= 0xFFFFFFFEFFFFFFFFLL
        && *(void *)((char *)v13 + *(unsigned __int16 *)((char *)v13 - *v13 + 10)) != 0)
      {
        uint64_t v12 = (void *)v78;
        if (v79 == (void *)v78)
        {
          if (v79)
          {
            *((void *)&v78 + 1) = v79;
            operator delete(v79);
            long long v78 = 0uLL;
            uint64_t v79 = 0;
          }
          uint64_t v12 = operator new(8uLL);
          *(void *)&long long v78 = v12;
          *((void *)&v78 + 1) = v12;
          uint64_t v79 = v12 + 1;
        }
LABEL_23:
        *uint64_t v12 = v10;
        *((void *)&v78 + 1) = v12 + 1;
        sub_8F35B4((uint64_t)&v73, v10, (uint64_t)__p);
        sub_2A83A4((uint64_t)&v78, *((uint64_t *)&v78 + 1), (char *)__p[0], (char *)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
        uint64_t v15 = __p[0];
        if (__p[0]) {
          goto LABEL_33;
        }
      }
      break;
    case 2:
      sub_8F35B4((uint64_t)&v73, *(void *)v2, (uint64_t)__p);
      if ((void)v78)
      {
        *((void *)&v78 + 1) = v78;
        operator delete((void *)v78);
      }
      long long v78 = *(_OWORD *)__p;
      uint64_t v79 = v70;
      break;
    case 3:
      sub_8ED2E4((uint64_t)&v73, (unint64_t *)v2, (uint64_t)__p);
      uint64_t v15 = __p[0];
      if (__p[0] != __p[1])
      {
        sub_8F35B4((uint64_t)&v73, *(void *)__p[0], (uint64_t)v65);
        if ((void)v78)
        {
          *((void *)&v78 + 1) = v78;
          operator delete((void *)v78);
        }
        long long v78 = *(_OWORD *)v65;
        uint64_t v79 = v66;
        uint64_t v15 = __p[0];
      }
      if (v15)
      {
LABEL_33:
        __p[1] = v15;
        operator delete(v15);
      }
      break;
    default:
      break;
  }
  v5->i64[0] = 0;
  v5->i64[1] = 0;
  v5[1].i64[0] = 0;
  unint64_t v17 = (unint64_t *)*((void *)&v78 + 1);
  for (uint64_t i = (unint64_t *)v78; i != v17; ++i)
  {
    unint64_t v19 = *i;
    __p[0] = (void *)-1;
    __p[1] = (void *)-1;
    LODWORD(v70) = 0x7FFFFFFF;
    *(_OWORD *)BOOL v71 = 0u;
    memset(v72, 0, sizeof(v72));
    uint64_t v80 = (void *)v19;
    LODWORD(v81) = 2;
    sub_8FAF68((uint64_t)&v80, *(void *)(v3 + 32), *(void **)(v3 + 24), *(void *)(v3 + 8), (uint64_t)v65);
    uint64_t v20 = (char *)v71[0];
    if (!v71[0]) {
      goto LABEL_59;
    }
    unsigned int v21 = v71[0];
    if (v71[1] == v71[0]) {
      goto LABEL_58;
    }
    int v22 = (void **)((char *)v71[1] - 56);
    do
    {
      if (*((char *)v22 + 55) < 0)
      {
        operator delete(v22[4]);
        if ((*((char *)v22 + 23) & 0x80000000) == 0)
        {
LABEL_48:
          if ((*((char *)v22 - 9) & 0x80000000) == 0) {
            goto LABEL_49;
          }
          goto LABEL_53;
        }
      }
      else if ((*((char *)v22 + 23) & 0x80000000) == 0)
      {
        goto LABEL_48;
      }
      operator delete(*v22);
      if ((*((char *)v22 - 9) & 0x80000000) == 0)
      {
LABEL_49:
        int v25 = *((_DWORD *)v22 - 12);
        if (v25 == 1) {
          goto LABEL_42;
        }
        goto LABEL_54;
      }
LABEL_53:
      operator delete(*(v22 - 4));
      int v25 = *((_DWORD *)v22 - 12);
      if (v25 == 1)
      {
LABEL_42:
        BOOL v23 = *(v22 - 9);
        if (!v23) {
          goto LABEL_45;
        }
        *(v22 - 8) = v23;
        goto LABEL_44;
      }
LABEL_54:
      if (!v25 && *((char *)v22 - 49) < 0)
      {
        BOOL v23 = *(v22 - 9);
LABEL_44:
        operator delete(v23);
      }
LABEL_45:
      uint64_t v24 = (char *)(v22 - 11);
      v22 -= 18;
    }
    while (v24 != v20);
    unsigned int v21 = v71[0];
LABEL_58:
    v71[1] = v20;
    operator delete(v21);
LABEL_59:
    *(_OWORD *)BOOL v71 = *(_OWORD *)v65;
    v72[0] = v66;
    std::string v26 = (int *)sub_8ED928((uint64_t)&v73, v19, 0, "station");
    uint64_t v27 = (unsigned __int16 *)((char *)v26 - *v26);
    if (*v27 >= 5u && (uint64_t v28 = v27[2]) != 0) {
      unint64_t v29 = *(void **)((char *)v26 + v28);
    }
    else {
      unint64_t v29 = 0;
    }
    long long v30 = sub_398020((uint64_t)&v73, 0);
    uint64_t v31 = &v30[-*(int *)v30];
    if (*(unsigned __int16 *)v31 >= 0xBu)
    {
      uint64_t v32 = *((unsigned __int16 *)v31 + 5);
      if (v32)
      {
        if (v30[v32]) {
          unint64_t v29 = (void *)nullsub_1(v29);
        }
      }
    }
    __p[0] = v29;
    long long v33 = (int *)sub_8ED928((uint64_t)&v73, v19, 0, "station");
    uint64_t v34 = (uint64_t)v33 + *(unsigned __int16 *)((char *)v33 - *v33 + 6);
    uint64_t v35 = *(unsigned int *)v34;
    LODWORD(v34) = *(_DWORD *)(v34 + 4);
    if (v34 >= 0xFFFFFFFE) {
      uint64_t v34 = 4294967294;
    }
    else {
      uint64_t v34 = v34;
    }
    __p[1] = (void *)(v35 | (v34 << 32));
    LODWORD(v70) = 0x7FFFFFFF;
    nullsub_1(&v64);
    int v36 = (int *)sub_8ED928((uint64_t)&v73, v19, 0, "station");
    uint64_t v37 = (unsigned __int16 *)((char *)v36 - *v36);
    if (*v37 >= 9u && (uint64_t v38 = v37[4]) != 0) {
      char v39 = (char **)((char *)v36 + v38 + *(unsigned int *)((char *)v36 + v38));
    }
    else {
      char v39 = 0;
    }
    sub_8F48DC(v39, (void (*)(void **__return_ptr, char *))sub_4A0694, (uint64_t)&v62);
    sub_997050((uint64_t *)&v62, *(void *)(v3 + 32) + 968, &v80);
    sub_9950FC((uint64_t *)&v80, (char *)v65);
    if (SHIBYTE(v72[3]) < 0) {
      operator delete((void *)v72[1]);
    }
    *(_OWORD *)&v72[1] = *(_OWORD *)v65;
    v72[3] = v66;
    HIBYTE(v66) = 0;
    LOBYTE(v65[0]) = 0;
    if (v68 < 0)
    {
      operator delete(v67);
      if (SHIBYTE(v66) < 0)
      {
        operator delete(v65[0]);
        uint64_t v40 = (uint64_t)v80;
        if (!v80) {
          goto LABEL_88;
        }
LABEL_79:
        uint64_t v41 = v81;
        long long v42 = (void *)v40;
        if (v81 == v40)
        {
LABEL_87:
          uint64_t v81 = v40;
          operator delete(v42);
          goto LABEL_88;
        }
        while (1)
        {
          if (*(char *)(v41 - 1) < 0)
          {
            operator delete(*(void **)(v41 - 24));
            if ((*(char *)(v41 - 33) & 0x80000000) == 0) {
              goto LABEL_82;
            }
          }
          else if ((*(char *)(v41 - 33) & 0x80000000) == 0)
          {
LABEL_82:
            v41 -= 56;
            if (v41 == v40) {
              goto LABEL_86;
            }
            continue;
          }
          operator delete(*(void **)(v41 - 56));
          v41 -= 56;
          if (v41 == v40)
          {
LABEL_86:
            long long v42 = v80;
            goto LABEL_87;
          }
        }
      }
    }
    uint64_t v40 = (uint64_t)v80;
    if (v80) {
      goto LABEL_79;
    }
LABEL_88:
    unint64_t v43 = (void **)v62;
    if (v62)
    {
      std::string::size_type v44 = v63;
      uint64_t v45 = v62;
      if (v63 != v62)
      {
        uint64_t v46 = v17;
        do
        {
          long long v47 = (void **)*(v44 - 3);
          if (v47)
          {
            uint64_t v48 = (void **)*(v44 - 2);
            long long v49 = *(v44 - 3);
            if (v48 != v47)
            {
              do
              {
                if (*((char *)v48 - 1) < 0) {
                  operator delete(*(v48 - 3));
                }
                v48 -= 4;
              }
              while (v48 != v47);
              long long v49 = *(v44 - 3);
            }
            *(v44 - 2) = v47;
            operator delete(v49);
          }
          uint64_t v50 = v44 - 8;
          if (*((char *)v44 - 41) < 0) {
            operator delete(*v50);
          }
          v44 -= 8;
        }
        while (v50 != v43);
        uint64_t v45 = v62;
        unint64_t v17 = v46;
      }
      std::string::size_type v63 = v43;
      operator delete(v45);
    }
    unint64_t v51 = v5->u64[1];
    if (v51 >= v5[1].i64[0])
    {
      v5->i64[1] = sub_8F7004(v5, (uint64_t)__p);
      if (SHIBYTE(v72[3]) < 0) {
        goto LABEL_112;
      }
LABEL_108:
      std::string v55 = (char *)v71[0];
      if (v71[0]) {
        goto LABEL_113;
      }
      continue;
    }
    long long v52 = *(_OWORD *)__p;
    *(_DWORD *)(v51 + 16) = v70;
    *(_OWORD *)unint64_t v51 = v52;
    *(void *)(v51 + 24) = 0;
    *(void *)(v51 + 32) = 0;
    *(void *)(v51 + 40) = 0;
    sub_8E81F0((void *)(v51 + 24), (uint64_t)v71[0], (uint64_t)v71[1], 0x8E38E38E38E38E39 * (((char *)v71[1] - (char *)v71[0]) >> 4));
    std::string v53 = (unsigned char *)(v51 + 48);
    if (SHIBYTE(v72[3]) < 0)
    {
      sub_4200(v53, (void *)v72[1], v72[2]);
    }
    else
    {
      long long v54 = *(_OWORD *)&v72[1];
      *(void *)(v51 + 64) = v72[3];
      *(_OWORD *)std::string v53 = v54;
    }
    v5->i64[1] = v51 + 72;
    v5->i64[1] = v51 + 72;
    if ((SHIBYTE(v72[3]) & 0x80000000) == 0) {
      goto LABEL_108;
    }
LABEL_112:
    operator delete((void *)v72[1]);
    std::string v55 = (char *)v71[0];
    if (v71[0])
    {
LABEL_113:
      uint64_t v18 = v55;
      if (v71[1] != v55)
      {
        uint64_t v56 = (void **)((char *)v71[1] - 56);
        while (1)
        {
          if (*((char *)v56 + 55) < 0)
          {
            operator delete(v56[4]);
            if ((*((char *)v56 + 23) & 0x80000000) == 0)
            {
LABEL_119:
              if ((*((char *)v56 - 9) & 0x80000000) == 0) {
                goto LABEL_120;
              }
              goto LABEL_126;
            }
          }
          else if ((*((char *)v56 + 23) & 0x80000000) == 0)
          {
            goto LABEL_119;
          }
          operator delete(*v56);
          if ((*((char *)v56 - 9) & 0x80000000) == 0)
          {
LABEL_120:
            int v58 = *((_DWORD *)v56 - 12);
            if (v58 != 1) {
              goto LABEL_121;
            }
            goto LABEL_127;
          }
LABEL_126:
          operator delete(*(v56 - 4));
          int v58 = *((_DWORD *)v56 - 12);
          if (v58 != 1)
          {
LABEL_121:
            if (v58 || (*((char *)v56 - 49) & 0x80000000) == 0) {
              goto LABEL_116;
            }
            int v59 = *(v56 - 9);
            goto LABEL_115;
          }
LABEL_127:
          int v59 = *(v56 - 9);
          if (!v59) {
            goto LABEL_116;
          }
          *(v56 - 8) = v59;
LABEL_115:
          operator delete(v59);
LABEL_116:
          long long v57 = (char *)(v56 - 11);
          v56 -= 18;
          if (v57 == v55)
          {
            uint64_t v18 = (char *)v71[0];
            break;
          }
        }
      }
      v71[1] = v55;
      operator delete(v18);
    }
  }
  char v60 = v76;
  if (v76 && !atomic_fetch_add(&v76->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
  uint64_t v61 = v74;
  if (v74 && !atomic_fetch_add(&v74->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
    std::__shared_weak_count::__release_weak(v61);
  }
  if ((void)v78)
  {
    *((void *)&v78 + 1) = v78;
    operator delete((void *)v78);
  }
}

void sub_8F22D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  sub_368744((uint64_t)&a30);
  uint64_t v32 = *(void **)(v30 - 144);
  if (!v32) {
    _Unwind_Resume(a1);
  }
  *(void *)(v30 - 136) = v32;
  operator delete(v32);
  _Unwind_Resume(a1);
}

void sub_8F23DC(uint64_t a1@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v102 = sub_375500(a4);
  uint64_t v10 = sub_3755E4(a4);
  uint64_t v11 = sub_8ECB18((_DWORD *)a3);
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(void *)a5 = 0;
  unint64_t v101 = v11;
  if (*v11) {
    BOOL v12 = v11[1] == -1;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    unint64_t v17 = *a2;
    uint64_t v18 = a2[1];
    if (*a2 != v18) {
      goto LABEL_74;
    }
    goto LABEL_60;
  }
  sub_8ECABC(a3, (uint64_t)&v108);
  uint64_t v99 = a2;
  if (v109 == 4)
  {
    uint64_t v13 = v108;
    uint64_t v15 = *(void **)(a5 + 8);
    unint64_t v14 = *(void *)(a5 + 16);
    if ((unint64_t)v15 >= v14)
    {
      char v39 = *(void **)a5;
      uint64_t v40 = ((uint64_t)v15 - *(void *)a5) >> 4;
      unint64_t v41 = v40 + 1;
      if ((unint64_t)(v40 + 1) >> 60) {
        sub_2E00();
      }
      uint64_t v42 = v14 - (void)v39;
      if (v42 >> 3 > v41) {
        unint64_t v41 = v42 >> 3;
      }
      if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v43 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v43 = v41;
      }
      if (v43 >> 60) {
        sub_188D718();
      }
      std::string::size_type v44 = (char *)operator new(16 * v43);
      uint64_t v45 = &v44[16 * v40];
      uint64_t v46 = &v44[16 * v43];
      *(void *)uint64_t v45 = v13;
      *((void *)v45 + 1) = 0xFFFFFFFF00000000;
      uint64_t v16 = v45 + 16;
      if (v15 == v39)
      {
        *(void *)a5 = v45;
        *(void *)(a5 + 8) = v16;
        *(void *)(a5 + 16) = v46;
        if (!v39) {
          goto LABEL_58;
        }
      }
      else
      {
        do
        {
          long long v47 = v45 - 16;
          *((_OWORD *)v45 - 1) = *((_OWORD *)v15 - 1);
          v15 -= 2;
          v45 -= 16;
        }
        while (v15 != v39);
        *(void *)a5 = v47;
        *(void *)(a5 + 8) = v16;
        *(void *)(a5 + 16) = v46;
        if (!v39) {
          goto LABEL_58;
        }
      }
      operator delete(v39);
    }
    else
    {
      *uint64_t v15 = v108;
      v15[1] = 0xFFFFFFFF00000000;
      uint64_t v16 = v15 + 2;
    }
LABEL_58:
    *(void *)(a5 + 8) = v16;
    goto LABEL_59;
  }
  if (!*(_DWORD *)(a3 + 376))
  {
    unint64_t v19 = *(unint64_t **)(a3 + 24);
    for (uint64_t i = *(unint64_t **)(a3 + 32); v19 != i; ++v19)
    {
      unint64_t v106 = *v19;
      uint64_t v20 = (int *)sub_498D5C(v102, v106, 0, "stop");
      unint64_t v21 = *(void *)((char *)v20 + *(unsigned __int16 *)((char *)v20 - *v20 + 12));
      unint64_t v105 = v21;
      if (v21) {
        BOOL v22 = v21 > 0xFFFFFFFEFFFFFFFFLL;
      }
      else {
        BOOL v22 = 1;
      }
      if (v22) {
        sub_8F33D4(v102, &v106, (uint64_t)&v103);
      }
      else {
        sub_8F32E4(v102, &v105, (uint64_t)&v103);
      }
      BOOL v23 = v103;
      uint64_t v24 = v104;
      int v25 = v104;
      if (v103 != v104)
      {
        while (1)
        {
          unint64_t v26 = *v23;
          if (!*(unsigned char *)(*(void *)(a1 + 32) + 1424))
          {
            uint64_t v27 = (int *)sub_8DFD1C(v10, *v23, 0, "line");
            uint64_t v28 = (unsigned __int16 *)((char *)v27 - *v27);
            if (*v28 >= 0x23u)
            {
              uint64_t v29 = v28[17];
              if (v29)
              {
                if (*((unsigned char *)v27 + v29)) {
                  break;
                }
              }
            }
          }
          unsigned int v30 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 1425);
          if (v30 < sub_8F694C(v10, v26)) {
            break;
          }
          if (++v23 == v24) {
            goto LABEL_39;
          }
        }
      }
      if (v23 != v24)
      {
        uint64_t v31 = v23 + 1;
        int v25 = v23;
        while (v31 != v24)
        {
          unint64_t v32 = *v31;
          if (*(unsigned char *)(*(void *)(a1 + 32) + 1424)
            || (long long v33 = (int *)sub_8DFD1C(v10, *v31, 0, "line"),
                uint64_t v34 = (unsigned __int16 *)((char *)v33 - *v33),
                *v34 < 0x23u)
            || (uint64_t v35 = v34[17]) == 0
            || !*((unsigned char *)v33 + v35))
          {
            unsigned int v36 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 1425);
            if (v36 >= sub_8F694C(v10, v32)) {
              *v25++ = *v31;
            }
          }
          ++v31;
        }
      }
LABEL_39:
      uint64_t v37 = v103;
      if (v25 != v104) {
        uint64_t v104 = v25;
      }
      if (v103 != v25)
      {
        uint64_t v38 = *(__n128 **)(a5 + 8);
        do
        {
          v107.n128_u64[0] = *v37;
          v107.n128_u64[1] = v105;
          uint64_t v38 = sub_8F6AE0((__n128 **)a5, (uint64_t)v38, &v107) + 1;
          ++v37;
        }
        while (v37 != v25);
        int v25 = v103;
      }
      if (v25)
      {
        uint64_t v104 = v25;
        operator delete(v25);
      }
    }
  }
LABEL_59:
  unint64_t v17 = *v99;
  uint64_t v18 = v99[1];
  if (*v99 != v18)
  {
    while (1)
    {
LABEL_74:
      uint64_t v58 = *v17;
      unsigned int v59 = v17[3];
      unint64_t v60 = v17[1] | (unint64_t)(v58 << 32);
      uint64_t v61 = (int *)sub_369F8C(v10, v60, 0, "trip");
      unint64_t v62 = *(void *)((char *)v61 + *(unsigned __int16 *)((char *)v61 - *v61 + 6));
      std::string::size_type v63 = sub_369B60(v10, v60, 0);
      char v64 = &v63[-*(int *)v63];
      if (*(unsigned __int16 *)v64 < 5u)
      {
        uint64_t v65 = 0;
      }
      else
      {
        uint64_t v65 = *((unsigned __int16 *)v64 + 2);
        if (*((_WORD *)v64 + 2)) {
          v65 += (uint64_t)&v63[*(unsigned int *)&v63[v65]];
        }
      }
      uint64_t v66 = (int *)(v65 + 4 * v58 + 4 + *(unsigned int *)(v65 + 4 * v58 + 4));
      uint64_t v67 = (unsigned __int16 *)((char *)v66 - *v66);
      if (*v67 >= 0xDu && (uint64_t v68 = v67[6]) != 0) {
        int v69 = *(int *)((char *)v66 + v68);
      }
      else {
        int v69 = -1;
      }
      long long v70 = (int *)sub_498D5C(v102, *(void *)&v63[24 * v69+ 4+ 24 * v59+ *((unsigned __int16 *)v64 + 3)+ *(unsigned int *)&v63[*((unsigned __int16 *)v64 + 3)]], 0, "stop");
      unint64_t v71 = *(void *)((char *)v70 + *(unsigned __int16 *)((char *)v70 - *v70 + 12));
      uint64_t v73 = *(__n128 **)(a5 + 8);
      unint64_t v72 = *(void *)(a5 + 16);
      if ((unint64_t)v73 < v72)
      {
        v73->n128_u64[0] = v62;
        v73->n128_u64[1] = v71;
        uint64_t v48 = v73 + 1;
      }
      else
      {
        uint64_t v74 = *(__n128 **)a5;
        uint64_t v75 = ((uint64_t)v73 - *(void *)a5) >> 4;
        unint64_t v76 = v75 + 1;
        if ((unint64_t)(v75 + 1) >> 60) {
          sub_2E00();
        }
        uint64_t v77 = v72 - (void)v74;
        if (v77 >> 3 > v76) {
          unint64_t v76 = v77 >> 3;
        }
        if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v78 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v78 = v76;
        }
        if (v78)
        {
          if (v78 >> 60) {
            sub_188D718();
          }
          uint64_t v79 = (char *)operator new(16 * v78);
          uint64_t v80 = (__n128 *)&v79[16 * v75];
          v80->n128_u64[0] = v62;
          v80->n128_u64[1] = v71;
          uint64_t v81 = (uint64_t)v80;
          if (v73 != v74)
          {
            do
            {
LABEL_94:
              *(__n128 *)(v81 - 16) = v73[-1];
              v81 -= 16;
              --v73;
            }
            while (v73 != v74);
            uint64_t v73 = *(__n128 **)a5;
            uint64_t v48 = v80 + 1;
            *(void *)a5 = v81;
            *(void *)(a5 + 8) = v80 + 1;
            *(void *)(a5 + 16) = &v79[16 * v78];
            if (!v73) {
              goto LABEL_73;
            }
LABEL_98:
            operator delete(v73);
            goto LABEL_73;
          }
        }
        else
        {
          uint64_t v79 = 0;
          uint64_t v80 = (__n128 *)(16 * v75);
          v80->n128_u64[0] = v62;
          v80->n128_u64[1] = v71;
          uint64_t v81 = 16 * v75;
          if (v73 != v74) {
            goto LABEL_94;
          }
        }
        uint64_t v48 = v80 + 1;
        *(void *)a5 = v81;
        *(void *)(a5 + 8) = v80 + 1;
        *(void *)(a5 + 16) = &v79[16 * v78];
        if (v73) {
          goto LABEL_98;
        }
      }
LABEL_73:
      *(void *)(a5 + 8) = v48;
      v17 += 30;
      if (v17 == v18) {
        goto LABEL_61;
      }
    }
  }
LABEL_60:
  uint64_t v48 = *(__n128 **)(a5 + 8);
LABEL_61:
  if (*(__n128 **)a5 == v48 && *v101 != 0 && v101[1] != -1)
  {
    int v51 = v101[3];
    if (v51 != -1)
    {
      unint64_t v52 = *(void *)v101;
      std::string v53 = (int *)sub_369F8C(v10, *(void *)v101, 0, "trip");
      unint64_t v54 = *(void *)((char *)v53 + *(unsigned __int16 *)((char *)v53 - *v53 + 6));
      std::string v55 = sub_369B60(v10, v52, 0);
      uint64_t v56 = &v55[-*(int *)v55];
      if (*(unsigned __int16 *)v56 < 5u)
      {
        uint64_t v57 = 0;
      }
      else
      {
        uint64_t v57 = *((unsigned __int16 *)v56 + 2);
        if (*((_WORD *)v56 + 2)) {
          v57 += (uint64_t)&v55[*(unsigned int *)&v55[v57]];
        }
      }
      uint64_t v82 = (int *)(v57 + 4 * HIDWORD(v52) + 4 + *(unsigned int *)(v57 + 4 * HIDWORD(v52) + 4));
      uint64_t v83 = (unsigned __int16 *)((char *)v82 - *v82);
      if (*v83 >= 0xDu && (uint64_t v84 = v83[6]) != 0) {
        int v85 = *(int *)((char *)v82 + v84);
      }
      else {
        int v85 = -1;
      }
      uint64_t v86 = (int *)sub_498D5C(v102, *(void *)&v55[24 * (v85 + v51)+ 4+ *((unsigned __int16 *)v56 + 3)+ *(unsigned int *)&v55[*((unsigned __int16 *)v56 + 3)]], 0, "stop");
      unint64_t v87 = *(void *)((char *)v86 + *(unsigned __int16 *)((char *)v86 - *v86 + 12));
      uint64_t v89 = *(__n128 **)(a5 + 8);
      unint64_t v88 = *(void *)(a5 + 16);
      if ((unint64_t)v89 < v88)
      {
        v89->n128_u64[0] = v54;
        v89->n128_u64[1] = v87;
        uint64_t v90 = (uint64_t)&v89[1];
LABEL_122:
        *(void *)(a5 + 8) = v90;
        return;
      }
      unsigned int v91 = *(__n128 **)a5;
      uint64_t v92 = ((uint64_t)v89 - *(void *)a5) >> 4;
      unint64_t v93 = v92 + 1;
      if ((unint64_t)(v92 + 1) >> 60) {
        sub_2E00();
      }
      uint64_t v94 = v88 - (void)v91;
      if (v94 >> 3 > v93) {
        unint64_t v93 = v94 >> 3;
      }
      if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v95 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v95 = v93;
      }
      if (v95)
      {
        if (v95 >> 60) {
          sub_188D718();
        }
        uint64_t v96 = (char *)operator new(16 * v95);
        uint64_t v97 = (__n128 *)&v96[16 * v92];
        uint64_t v98 = &v96[16 * v95];
        v97->n128_u64[0] = v54;
        v97->n128_u64[1] = v87;
        uint64_t v90 = (uint64_t)&v97[1];
        if (v89 == v91)
        {
LABEL_120:
          *(void *)a5 = v97;
          *(void *)(a5 + 8) = v90;
          *(void *)(a5 + 16) = v98;
          if (!v89) {
            goto LABEL_122;
          }
LABEL_121:
          operator delete(v89);
          goto LABEL_122;
        }
      }
      else
      {
        uint64_t v97 = (__n128 *)(16 * v92);
        uint64_t v98 = 0;
        v97->n128_u64[0] = v54;
        v97->n128_u64[1] = v87;
        uint64_t v90 = 16 * v92 + 16;
        if (v89 == v91) {
          goto LABEL_120;
        }
      }
      do
      {
        v97[-1] = v89[-1];
        --v97;
        --v89;
      }
      while (v89 != v91);
      uint64_t v89 = *(__n128 **)a5;
      *(void *)a5 = v97;
      *(void *)(a5 + 8) = v90;
      *(void *)(a5 + 16) = v98;
      if (!v89) {
        goto LABEL_122;
      }
      goto LABEL_121;
    }
  }
}

void sub_8F2C00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  uint64_t v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v16;
    operator delete(v16);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_8F2C6C@<X0>(unsigned __int8 *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = -1;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(void *)(a3 + 56) = -1;
  *(_DWORD *)(a3 + 64) = 0x7FFFFFFF;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(void *)(a3 + 136) = 0;
  *(_DWORD *)(a3 + 144) = 0x7FFFFFFF;
  *(unsigned char *)(a3 + 148) = 0;
  uint64_t v6 = sub_375500(*((void **)a1 + 3));
  uint64_t v7 = sub_3755E4(*((void **)a1 + 3));
  uint64_t v8 = *(unsigned int *)a2;
  unsigned int v9 = *((_DWORD *)a2 + 3);
  uint64_t v10 = sub_369B60(v7, *((unsigned int *)a2 + 1) | (unint64_t)(v8 << 32), 0);
  uint64_t v11 = &v10[-*(int *)v10];
  if (*(unsigned __int16 *)v11 < 5u)
  {
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v12 = *((unsigned __int16 *)v11 + 2);
    if (*((_WORD *)v11 + 2)) {
      v12 += (uint64_t)&v10[*(unsigned int *)&v10[v12]];
    }
  }
  uint64_t v13 = (int *)(v12 + 4 * v8 + 4 + *(unsigned int *)(v12 + 4 * v8 + 4));
  uint64_t v14 = (unsigned __int16 *)((char *)v13 - *v13);
  if (*v14 >= 0xDu && (uint64_t v15 = v14[6]) != 0) {
    int v16 = *(int *)((char *)v13 + v15);
  }
  else {
    int v16 = -1;
  }
  unint64_t v17 = *(void *)&v10[24 * v16
                      + 4
                      + 24 * v9
                      + *((unsigned __int16 *)v11 + 3)
                      + *(unsigned int *)&v10[*((unsigned __int16 *)v11 + 3)]];
  uint64_t v18 = (int *)sub_498D5C(v6, v17, 0, "stop");
  unint64_t v19 = (unsigned __int16 *)((char *)v18 - *v18);
  if (*v19 >= 5u && (uint64_t v20 = v19[2]) != 0) {
    uint64_t v21 = *(void *)((char *)v18 + v20);
  }
  else {
    uint64_t v21 = 0;
  }
  BOOL v22 = sub_398020(v6, 0);
  BOOL v23 = &v22[-*(int *)v22];
  if (*(unsigned __int16 *)v23 >= 0xBu)
  {
    uint64_t v24 = *((unsigned __int16 *)v23 + 5);
    if (v24)
    {
      if (v22[v24]) {
        uint64_t v21 = nullsub_1(v21);
      }
    }
  }
  *(void *)a3 = v21;
  int v25 = (int *)sub_498D5C(v6, v17, 0, "stop");
  unint64_t v26 = (unsigned __int16 *)((char *)v25 - *v25);
  if (*v26 < 0x2Bu || (uint64_t v27 = v26[21]) == 0)
  {
    HIBYTE(v39) = 0;
    LOBYTE(__dst) = 0;
    uint64_t v33 = a3 + 32;
    goto LABEL_24;
  }
  uint64_t v28 = (unsigned int *)((char *)v25 + v27);
  uint64_t v29 = *v28;
  uint64_t v31 = (char *)v28 + v29 + 4;
  size_t v30 = *(unsigned int *)((char *)v28 + v29);
  if (v30 >= 0x17)
  {
    uint64_t v36 = (v30 & 0xFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17) {
      uint64_t v36 = v30 | 7;
    }
    uint64_t v37 = v36 + 1;
    p_dst = (long long *)operator new(v36 + 1);
    *((void *)&__dst + 1) = v30;
    unint64_t v39 = v37 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v39) = *(unsigned int *)((char *)v28 + v29);
    p_dst = &__dst;
    if (!v30)
    {
      *((unsigned char *)&__dst + v30) = 0;
      uint64_t v33 = a3 + 32;
      if (*(char *)(a3 + 55) < 0) {
        goto LABEL_29;
      }
      goto LABEL_24;
    }
  }
  memcpy(p_dst, v31, v30);
  *((unsigned char *)p_dst + v30) = 0;
  uint64_t v33 = a3 + 32;
  if (*(char *)(a3 + 55) < 0) {
LABEL_29:
  }
    operator delete(*(void **)v33);
LABEL_24:
  *(_OWORD *)uint64_t v33 = __dst;
  *(void *)(v33 + 16) = v39;
  uint64_t result = sub_90D4E4(a2 + 12, v6, *a1);
  *(_DWORD *)(a3 + 144) = v35;
  return result;
}

void sub_8F2F1C(_Unwind_Exception *a1)
{
  sub_8F2F94(v1);
  _Unwind_Resume(a1);
}

void sub_8F2F30(_Unwind_Exception *a1)
{
  sub_8F2F94(v1);
  _Unwind_Resume(a1);
}

void sub_8F2F44(_Unwind_Exception *a1)
{
  sub_8F2F94(v1);
  _Unwind_Resume(a1);
}

void sub_8F2F58(_Unwind_Exception *a1)
{
  sub_8F2F94(v1);
  _Unwind_Resume(a1);
}

void sub_8F2F6C(_Unwind_Exception *a1)
{
  sub_8F2F94(v1);
  _Unwind_Resume(a1);
}

void sub_8F2F80(_Unwind_Exception *a1)
{
  sub_8F2F94(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_8F2F94(uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0)
  {
    operator delete(*(void **)(a1 + 120));
    uint64_t v2 = *(void **)(a1 + 96);
    if (!v2)
    {
LABEL_3:
      uint64_t v3 = *(void **)(a1 + 72);
      if (!v3) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v2 = *(void **)(a1 + 96);
    if (!v2) {
      goto LABEL_3;
    }
  }
  uint64_t v5 = *(void *)(a1 + 104);
  uint64_t v6 = v2;
  if ((void *)v5 != v2)
  {
    do
    {
      v5 -= 144;
      sub_8E48A4(a1 + 112, v5);
    }
    while ((void *)v5 != v2);
    uint64_t v6 = *(void **)(a1 + 96);
  }
  *(void *)(a1 + 104) = v2;
  operator delete(v6);
  uint64_t v3 = *(void **)(a1 + 72);
  if (v3)
  {
LABEL_4:
    *(void *)(a1 + 80) = v3;
    operator delete(v3);
  }
LABEL_5:
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_8F3070(uint64_t a1, uint64_t a2)
{
  sub_8ECABC(a2, (uint64_t)&v22);
  uint64_t v3 = sub_375500(*(void **)(a1 + 24));
  uint64_t v4 = sub_3755E4(*(void **)(a1 + 24));
  uint64_t v5 = v4;
  uint64_t v6 = -1;
  switch(v23)
  {
    case -1:
      return v6;
    case 0:
      uint64_t v7 = (int *)sub_498D5C(v3, v22, 0, "stop");
      goto LABEL_6;
    case 1:
      uint64_t v7 = (int *)sub_8ED3D4(v3, v22, 0, "hall");
      goto LABEL_6;
    case 2:
      uint64_t v7 = (int *)sub_8ED928(v3, v22, 0, "station");
LABEL_6:
      unsigned __int16 v10 = *(_WORD *)((char *)v7 - *v7 + 18);
      goto LABEL_8;
    case 3:
      uint64_t v7 = (int *)sub_499804(v3, v22, 0, "access point");
      unsigned __int16 v10 = *(_WORD *)((char *)v7 - *v7 + 22);
LABEL_8:
      uint64_t v8 = *(void *)((char *)v7 + v10);
      unint64_t v9 = v8 & 0xFFFFFFFF00000000;
      break;
    case 4:
      unint64_t v20 = v22;
      sub_8F34C4(v4, &v20, (uint64_t)__p);
      goto LABEL_11;
    case 5:
      uint64_t v11 = (int *)sub_369F8C(v4, v22, 0, "trip");
      unint64_t v20 = *(void *)((char *)v11 + *(unsigned __int16 *)((char *)v11 - *v11 + 6));
      sub_8F34C4(v5, &v20, (uint64_t)__p);
LABEL_11:
      uint64_t v8 = *(void *)__p[0];
      unint64_t v9 = *(void *)__p[0] & 0xFFFFFFFF00000000;
      __p[1] = __p[0];
      operator delete(__p[0]);
      break;
    default:
      LODWORD(v8) = 0;
      unint64_t v9 = 0xFFFFFFFF00000000;
      break;
  }
  uint64_t v12 = sub_3757C8(*(void **)(a1 + 24));
  uint64_t v13 = (int *)sub_8F4388(v12, v9 | v8, 0, "market");
  uint64_t v14 = (unsigned __int16 *)((char *)v13 - *v13);
  if (*v14 >= 5u && (uint64_t v15 = v14[2]) != 0) {
    uint64_t v6 = *(void *)((char *)v13 + v15);
  }
  else {
    uint64_t v6 = 0;
  }
  int v16 = sub_398020(v12, 0);
  unint64_t v17 = &v16[-*(int *)v16];
  if (*(unsigned __int16 *)v17 >= 0xBu)
  {
    uint64_t v18 = *((unsigned __int16 *)v17 + 5);
    if (v18)
    {
      if (v16[v18]) {
        return nullsub_1(v6);
      }
    }
  }
  return v6;
}

int *sub_8F32E4@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = (int *)sub_8ED928(a1, *a2, 0, "station");
  uint64_t v6 = (unsigned __int16 *)((char *)result - *result);
  if (*v6 >= 0xFu && (uint64_t v7 = v6[7]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)result + v7);
    uint64_t v9 = *v8;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v11 = (uint64_t *)((char *)v8 + v9 + 4);
    uint64_t v10 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v14 = (void **)a3;
    if (v10)
    {
      uint64_t v12 = 8 * v10;
      do
      {
        if (!*(unsigned char *)(a1 + 3888) || (uint64_t result = (int *)sub_2AB7E4(*(void *)(a1 + 3872)), result))
        {
          uint64_t v13 = *v11;
          uint64_t result = (int *)sub_2A98DC(&v14, &v13);
        }
        ++v11;
        v12 -= 8;
      }
      while (v12);
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_8F33B8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int *sub_8F33D4@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = (int *)sub_498D5C(a1, *a2, 0, "stop");
  uint64_t v6 = (unsigned __int16 *)((char *)result - *result);
  if (*v6 >= 0xFu && (uint64_t v7 = v6[7]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)result + v7);
    uint64_t v9 = *v8;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v11 = (uint64_t *)((char *)v8 + v9 + 4);
    uint64_t v10 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v14 = (void **)a3;
    if (v10)
    {
      uint64_t v12 = 8 * v10;
      do
      {
        if (!*(unsigned char *)(a1 + 3888) || (uint64_t result = (int *)sub_2AB7E4(*(void *)(a1 + 3872)), result))
        {
          uint64_t v13 = *v11;
          uint64_t result = (int *)sub_2A98DC(&v14, &v13);
        }
        ++v11;
        v12 -= 8;
      }
      while (v12);
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_8F34A8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int *sub_8F34C4@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = (int *)sub_8DFD1C(a1, *a2, 0, "line");
  uint64_t v6 = (unsigned __int16 *)((char *)result - *result);
  if (*v6 >= 9u && (uint64_t v7 = v6[4]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)result + v7);
    uint64_t v9 = *v8;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v11 = (uint64_t *)((char *)v8 + v9 + 4);
    uint64_t v10 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v14 = (void **)a3;
    if (v10)
    {
      uint64_t v12 = 8 * v10;
      do
      {
        if (!*(unsigned char *)(a1 + 3888) || (uint64_t result = (int *)sub_2AB7E4(*(void *)(a1 + 3872)), result))
        {
          uint64_t v13 = *v11;
          uint64_t result = (int *)sub_2A98DC(&v14, &v13);
        }
        ++v11;
        v12 -= 8;
      }
      while (v12);
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_8F3598(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int *sub_8F35B4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = (int *)sub_8ED928(a1, a2, 0, "station");
  uint64_t v6 = (unsigned __int16 *)((char *)result - *result);
  if (*v6 >= 0x2Fu && (uint64_t v7 = v6[23]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)result + v7);
    uint64_t v9 = *v8;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v11 = (uint64_t *)((char *)v8 + v9 + 4);
    uint64_t v10 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v14 = (void **)a3;
    if (v10)
    {
      uint64_t v12 = 8 * v10;
      do
      {
        if (!*(unsigned char *)(a1 + 3888) || (uint64_t result = (int *)sub_2AB7E4(*(void *)(a1 + 3872)), result))
        {
          uint64_t v13 = *v11;
          uint64_t result = (int *)sub_2A98DC(&v14, &v13);
        }
        ++v11;
        v12 -= 8;
      }
      while (v12);
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_8F3684(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ***sub_8F36A0(void ***a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (void **)*(v3 - 3);
        if (v5)
        {
          uint64_t v6 = (void **)*(v3 - 2);
          uint64_t v7 = *(v3 - 3);
          if (v6 != v5)
          {
            do
            {
              if (*((char *)v6 - 1) < 0) {
                operator delete(*(v6 - 3));
              }
              v6 -= 4;
            }
            while (v6 != v5);
            uint64_t v7 = *(v3 - 3);
          }
          *(v3 - 2) = v5;
          operator delete(v7);
        }
        uint64_t v8 = v3 - 8;
        if (*((char *)v3 - 41) < 0) {
          operator delete(*v8);
        }
        v3 -= 8;
      }
      while (v8 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_8F3768(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    uint64_t v2 = *(void **)(a1 + 24);
    if (!v2) {
      return a1;
    }
  }
  else
  {
    uint64_t v2 = *(void **)(a1 + 24);
    if (!v2) {
      return a1;
    }
  }
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = v2;
  if ((void *)v4 != v2)
  {
    do
    {
      v4 -= 144;
      sub_8E48A4(a1 + 40, v4);
    }
    while ((void *)v4 != v2);
    uint64_t v5 = *(void **)(a1 + 24);
  }
  *(void *)(a1 + 32) = v2;
  operator delete(v5);
  return a1;
}

uint64_t sub_8F3800(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 408);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)(a1 + 392);
  *(void *)(a1 + 392) = 0;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 368);
  if (v5)
  {
    do
    {
      uint64_t v28 = (void *)*v5;
      uint64_t v29 = (void *)v5[2];
      if (v29)
      {
        v5[3] = v29;
        operator delete(v29);
      }
      operator delete(v5);
      uint64_t v5 = v28;
    }
    while (v28);
  }
  uint64_t v6 = *(void **)(a1 + 352);
  *(void *)(a1 + 352) = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(a1 + 328);
  if (v7)
  {
    do
    {
      uint64_t v8 = (void *)*v7;
      operator delete(v7);
      uint64_t v7 = v8;
    }
    while (v8);
  }
  uint64_t v9 = *(void **)(a1 + 312);
  *(void *)(a1 + 312) = 0;
  if (v9) {
    operator delete(v9);
  }
  uint64_t v10 = *(void **)(a1 + 288);
  if (v10)
  {
    do
    {
      uint64_t v11 = (void *)*v10;
      operator delete(v10);
      uint64_t v10 = v11;
    }
    while (v11);
  }
  uint64_t v12 = *(void **)(a1 + 272);
  *(void *)(a1 + 272) = 0;
  if (v12) {
    operator delete(v12);
  }
  uint64_t v13 = *(void **)(a1 + 248);
  if (v13)
  {
    do
    {
      uint64_t v14 = (void *)*v13;
      operator delete(v13);
      uint64_t v13 = v14;
    }
    while (v14);
  }
  uint64_t v15 = *(void **)(a1 + 232);
  *(void *)(a1 + 232) = 0;
  if (v15) {
    operator delete(v15);
  }
  int v16 = *(void **)(a1 + 208);
  if (v16)
  {
    do
    {
      unint64_t v17 = (void *)*v16;
      operator delete(v16);
      int v16 = v17;
    }
    while (v17);
  }
  uint64_t v18 = *(void **)(a1 + 192);
  *(void *)(a1 + 192) = 0;
  if (v18) {
    operator delete(v18);
  }
  unint64_t v19 = *(void **)(a1 + 168);
  if (v19)
  {
    do
    {
      unint64_t v20 = (void *)*v19;
      operator delete(v19);
      unint64_t v19 = v20;
    }
    while (v20);
  }
  uint64_t v21 = *(void **)(a1 + 152);
  *(void *)(a1 + 152) = 0;
  if (v21) {
    operator delete(v21);
  }
  unint64_t v22 = *(void **)(a1 + 128);
  if (v22)
  {
    do
    {
      int v23 = (void *)*v22;
      operator delete(v22);
      unint64_t v22 = v23;
    }
    while (v23);
  }
  uint64_t v24 = *(void **)(a1 + 112);
  *(void *)(a1 + 112) = 0;
  if (v24) {
    operator delete(v24);
  }
  if (*(char *)(a1 + 111) < 0)
  {
    operator delete(*(void **)(a1 + 88));
    uint64_t v25 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = 0;
    if (v25)
    {
LABEL_34:
      sub_7334AC(v25);
      operator delete();
    }
  }
  else
  {
    uint64_t v25 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = 0;
    if (v25) {
      goto LABEL_34;
    }
  }
  uint64_t v26 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v26)
  {
    sub_7334AC(v26);
    operator delete();
  }
  return a1;
}

void *sub_8F39EC(void *a1)
{
  uint64_t v2 = a1[30];
  if (v2)
  {
    uint64_t v3 = a1[31];
    uint64_t v4 = (void *)a1[30];
    if (v3 != v2)
    {
      uint64_t v5 = a1[31];
      do
      {
        uint64_t v7 = *(void **)(v5 - 24);
        v5 -= 24;
        uint64_t v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = (void *)a1[30];
    }
    a1[31] = v2;
    operator delete(v4);
  }
  uint64_t v8 = a1[27];
  if (v8)
  {
    uint64_t v9 = a1[28];
    uint64_t v10 = (void *)a1[27];
    if (v9 != v8)
    {
      do
      {
        uint64_t v11 = *(void **)(v9 - 24);
        if (v11)
        {
          *(void *)(v9 - 16) = v11;
          operator delete(v11);
        }
        if (*(char *)(v9 - 25) < 0) {
          operator delete(*(void **)(v9 - 48));
        }
        v9 -= 48;
      }
      while (v9 != v8);
      uint64_t v10 = (void *)a1[27];
    }
    a1[28] = v8;
    operator delete(v10);
  }
  uint64_t v12 = a1[24];
  if (v12)
  {
    uint64_t v13 = a1[25];
    uint64_t v14 = (void *)a1[24];
    if (v13 != v12)
    {
      do
        uint64_t v13 = sub_361164(v13 - 456);
      while (v13 != v12);
      uint64_t v14 = (void *)a1[24];
    }
    a1[25] = v12;
    operator delete(v14);
  }
  uint64_t v15 = a1[21];
  if (v15)
  {
    uint64_t v16 = a1[22];
    unint64_t v17 = (void *)a1[21];
    if (v16 != v15)
    {
      do
        uint64_t v16 = sub_574D4C(v16 - 7560);
      while (v16 != v15);
      unint64_t v17 = (void *)a1[21];
    }
    a1[22] = v15;
    operator delete(v17);
  }
  if (a1[18])
  {
    sub_4F43F0(a1 + 18);
    operator delete((void *)a1[18]);
  }
  uint64_t v18 = a1[15];
  if (v18)
  {
    uint64_t v19 = a1[16];
    unint64_t v20 = (void *)a1[15];
    if (v19 != v18)
    {
      do
        uint64_t v19 = sub_8F3C9C(v19 - 304);
      while (v19 != v18);
      unint64_t v20 = (void *)a1[15];
    }
    a1[16] = v18;
    operator delete(v20);
  }
  uint64_t v21 = a1[12];
  if (v21)
  {
    uint64_t v22 = a1[13];
    int v23 = (void *)a1[12];
    if (v22 != v21)
    {
      do
        uint64_t v22 = sub_8E5070(v22 - 208);
      while (v22 != v21);
      int v23 = (void *)a1[12];
    }
    a1[13] = v21;
    operator delete(v23);
  }
  uint64_t v24 = a1[9];
  if (v24)
  {
    uint64_t v25 = a1[10];
    uint64_t v26 = (void *)a1[9];
    if (v25 != v24)
    {
      do
        uint64_t v25 = sub_8E4D50(v25 - 696);
      while (v25 != v24);
      uint64_t v26 = (void *)a1[9];
    }
    a1[10] = v24;
    operator delete(v26);
  }
  uint64_t v27 = a1[6];
  if (v27)
  {
    uint64_t v28 = a1[7];
    uint64_t v29 = (void *)a1[6];
    if (v28 != v27)
    {
      do
        uint64_t v28 = sub_8F3F28(v28 - 136);
      while (v28 != v27);
      uint64_t v29 = (void *)a1[6];
    }
    a1[7] = v27;
    operator delete(v29);
  }
  uint64_t v30 = a1[3];
  if (v30)
  {
    uint64_t v31 = a1[4];
    unint64_t v32 = (void *)a1[3];
    if (v31 != v30)
    {
      do
        uint64_t v31 = sub_8F410C(v31 - 144);
      while (v31 != v30);
      unint64_t v32 = (void *)a1[3];
    }
    a1[4] = v30;
    operator delete(v32);
  }
  uint64_t v33 = (void *)*a1;
  if (*a1)
  {
    uint64_t v34 = a1[1];
    int v35 = (void *)*a1;
    if ((void *)v34 != v33)
    {
      do
        uint64_t v34 = sub_8F423C(v34 - 168);
      while ((void *)v34 != v33);
      int v35 = (void *)*a1;
    }
    a1[1] = v33;
    operator delete(v35);
  }
  return a1;
}

uint64_t sub_8F3C9C(uint64_t a1)
{
  if (*(char *)(a1 + 295) < 0)
  {
    operator delete(*(void **)(a1 + 272));
    if ((*(char *)(a1 + 263) & 0x80000000) == 0)
    {
LABEL_3:
      int v2 = *(_DWORD *)(a1 + 224);
      if (v2 != 1) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 263) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 240));
  int v2 = *(_DWORD *)(a1 + 224);
  if (v2 != 1)
  {
LABEL_4:
    if (v2 || (*(char *)(a1 + 223) & 0x80000000) == 0) {
      goto LABEL_12;
    }
    uint64_t v3 = *(void **)(a1 + 200);
    goto LABEL_11;
  }
LABEL_9:
  uint64_t v3 = *(void **)(a1 + 200);
  if (!v3) {
    goto LABEL_12;
  }
  *(void *)(a1 + 208) = v3;
LABEL_11:
  operator delete(v3);
LABEL_12:
  uint64_t v4 = *(void **)(a1 + 168);
  if (v4)
  {
    *(void *)(a1 + 176) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void *)(a1 + 136);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 144);
    uint64_t v7 = *(void **)(a1 + 136);
    if (v6 == v5)
    {
LABEL_24:
      *(void *)(a1 + 144) = v5;
      operator delete(v7);
      goto LABEL_25;
    }
    while (1)
    {
      if (*(char *)(v6 - 1) < 0)
      {
        operator delete(*(void **)(v6 - 24));
        if (*(char *)(v6 - 33) < 0) {
LABEL_22:
        }
          operator delete(*(void **)(v6 - 56));
      }
      else if (*(char *)(v6 - 33) < 0)
      {
        goto LABEL_22;
      }
      v6 -= 64;
      if (v6 == v5)
      {
        uint64_t v7 = *(void **)(a1 + 136);
        goto LABEL_24;
      }
    }
  }
LABEL_25:
  uint64_t v8 = *(void *)(a1 + 112);
  if (!v8) {
    goto LABEL_36;
  }
  uint64_t v9 = *(void *)(a1 + 120);
  uint64_t v10 = *(void **)(a1 + 112);
  if (v9 != v8)
  {
    while (1)
    {
      if (*(char *)(v9 - 1) < 0)
      {
        operator delete(*(void **)(v9 - 24));
        if (*(char *)(v9 - 33) < 0) {
LABEL_33:
        }
          operator delete(*(void **)(v9 - 56));
      }
      else if (*(char *)(v9 - 33) < 0)
      {
        goto LABEL_33;
      }
      v9 -= 64;
      if (v9 == v8)
      {
        uint64_t v10 = *(void **)(a1 + 112);
        break;
      }
    }
  }
  *(void *)(a1 + 120) = v8;
  operator delete(v10);
LABEL_36:
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 87) & 0x80000000) == 0) {
      goto LABEL_38;
    }
LABEL_42:
    operator delete(*(void **)(a1 + 64));
    uint64_t v11 = *(void ***)(a1 + 40);
    if (!v11)
    {
LABEL_39:
      uint64_t v12 = *(void ***)(a1 + 16);
      if (v12) {
        goto LABEL_53;
      }
      return a1;
    }
    goto LABEL_43;
  }
  operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0) {
    goto LABEL_42;
  }
LABEL_38:
  uint64_t v11 = *(void ***)(a1 + 40);
  if (!v11) {
    goto LABEL_39;
  }
LABEL_43:
  uint64_t v14 = *(void ***)(a1 + 48);
  if (v14 == v11)
  {
    *(void *)(a1 + 48) = v11;
    operator delete(v11);
    uint64_t v12 = *(void ***)(a1 + 16);
    if (v12) {
      goto LABEL_53;
    }
    return a1;
  }
  do
  {
    if (*((char *)v14 - 1) < 0)
    {
      operator delete(*(v14 - 3));
      if ((*((char *)v14 - 33) & 0x80000000) == 0) {
        goto LABEL_46;
      }
    }
    else if ((*((char *)v14 - 33) & 0x80000000) == 0)
    {
      goto LABEL_46;
    }
    operator delete(*(v14 - 7));
LABEL_46:
    v14 -= 7;
  }
  while (v14 != v11);
  uint64_t v15 = *(void **)(a1 + 40);
  *(void *)(a1 + 48) = v11;
  operator delete(v15);
  uint64_t v12 = *(void ***)(a1 + 16);
  if (!v12) {
    return a1;
  }
LABEL_53:
  uint64_t v16 = *(void ***)(a1 + 24);
  unint64_t v17 = v12;
  if (v16 != v12)
  {
    while (1)
    {
      if (*((char *)v16 - 1) < 0)
      {
        operator delete(*(v16 - 3));
        if (*((char *)v16 - 33) < 0) {
LABEL_60:
        }
          operator delete(*(v16 - 7));
      }
      else if (*((char *)v16 - 33) < 0)
      {
        goto LABEL_60;
      }
      v16 -= 7;
      if (v16 == v12)
      {
        unint64_t v17 = *(void ***)(a1 + 16);
        break;
      }
    }
  }
  *(void *)(a1 + 24) = v12;
  operator delete(v17);
  return a1;
}

uint64_t sub_8F3F28(uint64_t a1)
{
  int v2 = (void **)(a1 + 112);
  if (*(void *)(a1 + 112))
  {
    sub_8F4064((uint64_t *)(a1 + 112));
    operator delete(*v2);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 72);
    uint64_t v5 = *(void **)(a1 + 64);
    if (v4 == v3)
    {
LABEL_13:
      *(void *)(a1 + 72) = v3;
      operator delete(v5);
      goto LABEL_14;
    }
    while (1)
    {
      if (*(char *)(v4 - 1) < 0)
      {
        operator delete(*(void **)(v4 - 24));
        if (*(char *)(v4 - 33) < 0) {
LABEL_11:
        }
          operator delete(*(void **)(v4 - 56));
      }
      else if (*(char *)(v4 - 33) < 0)
      {
        goto LABEL_11;
      }
      v4 -= 64;
      if (v4 == v3)
      {
        uint64_t v5 = *(void **)(a1 + 64);
        goto LABEL_13;
      }
    }
  }
LABEL_14:
  if (*(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    uint64_t v6 = *(void ***)(a1 + 16);
    if (!v6) {
      return a1;
    }
  }
  else
  {
    uint64_t v6 = *(void ***)(a1 + 16);
    if (!v6) {
      return a1;
    }
  }
  uint64_t v8 = *(void ***)(a1 + 24);
  uint64_t v9 = v6;
  if (v8 != v6)
  {
    while (1)
    {
      if (*((char *)v8 - 1) < 0)
      {
        operator delete(*(v8 - 3));
        if (*((char *)v8 - 33) < 0) {
LABEL_25:
        }
          operator delete(*(v8 - 7));
      }
      else if (*((char *)v8 - 33) < 0)
      {
        goto LABEL_25;
      }
      v8 -= 7;
      if (v8 == v6)
      {
        uint64_t v9 = *(void ***)(a1 + 16);
        break;
      }
    }
  }
  *(void *)(a1 + 24) = v6;
  operator delete(v9);
  return a1;
}

void sub_8F4064(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 128)
  {
    if (*(char *)(i - 9) < 0)
    {
      operator delete(*(void **)(i - 32));
      if ((*(char *)(i - 41) & 0x80000000) == 0)
      {
LABEL_7:
        int v5 = *(_DWORD *)(i - 80);
        if (v5 != 1) {
          goto LABEL_8;
        }
        goto LABEL_13;
      }
    }
    else if ((*(char *)(i - 41) & 0x80000000) == 0)
    {
      goto LABEL_7;
    }
    operator delete(*(void **)(i - 64));
    int v5 = *(_DWORD *)(i - 80);
    if (v5 != 1)
    {
LABEL_8:
      if (!v5 && *(char *)(i - 81) < 0)
      {
        uint64_t v4 = *(void **)(i - 104);
LABEL_2:
        operator delete(v4);
        continue;
      }
      continue;
    }
LABEL_13:
    uint64_t v4 = *(void **)(i - 104);
    if (v4)
    {
      *(void *)(i - 96) = v4;
      goto LABEL_2;
    }
  }
  a1[1] = v2;
}

uint64_t sub_8F410C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(void *)(a1 + 128) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 72);
    int v5 = *(void **)(a1 + 64);
    if (v4 == v3)
    {
LABEL_13:
      *(void *)(a1 + 72) = v3;
      operator delete(v5);
      goto LABEL_14;
    }
    while (1)
    {
      if (*(char *)(v4 - 1) < 0)
      {
        operator delete(*(void **)(v4 - 24));
        if (*(char *)(v4 - 33) < 0) {
LABEL_11:
        }
          operator delete(*(void **)(v4 - 56));
      }
      else if (*(char *)(v4 - 33) < 0)
      {
        goto LABEL_11;
      }
      v4 -= 64;
      if (v4 == v3)
      {
        int v5 = *(void **)(a1 + 64);
        goto LABEL_13;
      }
    }
  }
LABEL_14:
  if (*(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    uint64_t v6 = *(void ***)(a1 + 16);
    if (!v6) {
      return a1;
    }
  }
  else
  {
    uint64_t v6 = *(void ***)(a1 + 16);
    if (!v6) {
      return a1;
    }
  }
  uint64_t v8 = *(void ***)(a1 + 24);
  uint64_t v9 = v6;
  if (v8 != v6)
  {
    while (1)
    {
      if (*((char *)v8 - 1) < 0)
      {
        operator delete(*(v8 - 3));
        if (*((char *)v8 - 33) < 0) {
LABEL_25:
        }
          operator delete(*(v8 - 7));
      }
      else if (*((char *)v8 - 33) < 0)
      {
        goto LABEL_25;
      }
      v8 -= 7;
      if (v8 == v6)
      {
        uint64_t v9 = *(void ***)(a1 + 16);
        break;
      }
    }
  }
  *(void *)(a1 + 24) = v6;
  operator delete(v9);
  return a1;
}

uint64_t sub_8F423C(uint64_t a1)
{
  if ((*(char *)(a1 + 159) & 0x80000000) == 0)
  {
    uint64_t v2 = *(void **)(a1 + 112);
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 136));
  uint64_t v2 = *(void **)(a1 + 112);
  if (v2)
  {
LABEL_3:
    *(void *)(a1 + 120) = v2;
    operator delete(v2);
  }
LABEL_4:
  uint64_t v3 = *(void *)(a1 + 64);
  if (!v3) {
    goto LABEL_17;
  }
  uint64_t v4 = *(void *)(a1 + 72);
  int v5 = *(void **)(a1 + 64);
  if (v4 != v3)
  {
    while (1)
    {
      if (*(char *)(v4 - 1) < 0)
      {
        operator delete(*(void **)(v4 - 24));
        if (*(char *)(v4 - 33) < 0) {
LABEL_12:
        }
          operator delete(*(void **)(v4 - 56));
      }
      else if (*(char *)(v4 - 33) < 0)
      {
        goto LABEL_12;
      }
      v4 -= 64;
      if (v4 == v3)
      {
        int v5 = *(void **)(a1 + 64);
        break;
      }
    }
  }
  *(void *)(a1 + 72) = v3;
  operator delete(v5);
LABEL_17:
  if (*(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    uint64_t v6 = *(void ***)(a1 + 16);
    if (!v6) {
      return a1;
    }
  }
  else
  {
    uint64_t v6 = *(void ***)(a1 + 16);
    if (!v6) {
      return a1;
    }
  }
  uint64_t v8 = *(void ***)(a1 + 24);
  uint64_t v9 = v6;
  if (v8 != v6)
  {
    while (1)
    {
      if (*((char *)v8 - 1) < 0)
      {
        operator delete(*(v8 - 3));
        if (*((char *)v8 - 33) < 0) {
LABEL_28:
        }
          operator delete(*(v8 - 7));
      }
      else if (*((char *)v8 - 33) < 0)
      {
        goto LABEL_28;
      }
      v8 -= 7;
      if (v8 == v6)
      {
        uint64_t v9 = *(void ***)(a1 + 16);
        break;
      }
    }
  }
  *(void *)(a1 + 24) = v6;
  operator delete(v9);
  return a1;
}

uint64_t sub_8F4388(uint64_t a1, unint64_t a2, int a3, char *a4)
{
  unsigned int v6 = a2;
  unint64_t v8 = HIDWORD(a2);
  LODWORD(v61.__r_.__value_.__l.__data_) = a2;
  LODWORD(v60.__r_.__value_.__l.__data_) = a3;
  *(void *)&long long v62 = &v60;
  *((void *)&v62 + 1) = &v61;
  unint64_t v9 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v9;
  uint64_t v10 = *(void *)a1;
  if (!v10) {
    goto LABEL_38;
  }
  uint64_t v11 = a1 + 16;
  if (*(_DWORD *)(a1 + 592) == a2)
  {
    unsigned int v12 = 24;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 616) == a2)
  {
    unsigned int v12 = 25;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 640) == a2)
  {
    unsigned int v12 = 26;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 664) == a2)
  {
    unsigned int v12 = 27;
LABEL_10:
    ++*(void *)(a1 + 3864);
    uint64_t v13 = v11 + 24 * v12;
    *(void *)(v13 + 8) = v9;
    uint64_t v14 = *(unsigned int **)(v13 + 16);
    if (v14) {
      goto LABEL_11;
    }
LABEL_38:
    sub_2A54B4((int **)&v62);
    uint64_t v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
    return 0;
  }
  unint64_t v20 = *(void *)(a1 + 648);
  unint64_t v21 = *(void *)(a1 + 624);
  if (*(void *)(a1 + 600) >= v9)
  {
    int v22 = 0;
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + 600);
    int v22 = 24;
  }
  BOOL v23 = v21 >= v9;
  if (v21 < v9) {
    unint64_t v9 = *(void *)(a1 + 624);
  }
  int v24 = 25;
  if (v23) {
    int v24 = v22;
  }
  if (v20 >= v9) {
    unint64_t v25 = v9;
  }
  else {
    unint64_t v25 = *(void *)(a1 + 648);
  }
  unint64_t v26 = *(void *)(a1 + 672);
  if (v20 >= v9) {
    int v27 = v24;
  }
  else {
    int v27 = 26;
  }
  uint64_t v14 = (unsigned int *)sub_2AB884(v10, 6, a2, 1);
  unsigned int v28 = 27;
  if (v26 >= v25) {
    unsigned int v28 = v27;
  }
  uint64_t v29 = v11 + 24 * v28;
  *(_DWORD *)uint64_t v29 = v61.__r_.__value_.__l.__data_;
  *(void *)(v29 + 8) = *(void *)(a1 + 3856);
  *(void *)(v29 + 16) = v14;
  if (!v14) {
    goto LABEL_38;
  }
LABEL_11:
  uint64_t v15 = (int *)((char *)v14 + *v14);
  uint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 < 0x13u)
  {
    uint64_t v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v17 = v16[9];
    if (v17)
    {
      uint64_t v18 = (int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
      if (*v18 > v8) {
        return (uint64_t)&v18[v8 + 1] + v18[v8 + 1];
      }
    }
    else
    {
      uint64_t v18 = 0;
    }
    if (a3 != 1)
    {
LABEL_19:
      if (!a3)
      {
        exception = __cxa_allocate_exception(0x40uLL);
        uint64_t v31 = a4;
        uint64_t v32 = (uint64_t)exception;
        sub_5E5C(&v55, v31);
        uint64_t v33 = std::string::insert(&v55, 0, "Failed to acquire entity \"");
        long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v56.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        int v35 = std::string::append(&v56, "\" in quad node ");
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v57.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v54, v6);
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v37 = &v54;
        }
        else {
          uint64_t v37 = (std::string *)v54.__r_.__value_.__r.__words[0];
        }
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v54.__r_.__value_.__l.__size_;
        }
        unint64_t v39 = std::string::append(&v57, (const std::string::value_type *)v37, size);
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v58.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        unint64_t v41 = std::string::append(&v58, " at position ");
        long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v59.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v53, v8);
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v43 = &v53;
        }
        else {
          unint64_t v43 = (std::string *)v53.__r_.__value_.__r.__words[0];
        }
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v44 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v44 = v53.__r_.__value_.__l.__size_;
        }
        uint64_t v45 = std::string::append(&v59, (const std::string::value_type *)v43, v44);
        long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        v60.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        long long v47 = std::string::append(&v60, " on layer ");
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v61.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        long long v49 = sub_736EC(6u);
        uint64_t v50 = std::string::append(&v61, v49);
        long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        std::string::size_type v63 = v50->__r_.__value_.__r.__words[2];
        long long v62 = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        unint64_t v52 = (void *)sub_2F404(v32, &v62);
      }
      return (uint64_t)&v18[v8 + 1] + v18[v8 + 1];
    }
  }
  return 0;
}

void sub_8F4720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (*(char *)(v54 - 105) < 0) {
    operator delete(*(void **)(v54 - 128));
  }
  if (*(char *)(v54 - 137) < 0)
  {
    operator delete(*(void **)(v54 - 160));
    if ((*(char *)(v54 - 169) & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
  }
  else if ((*(char *)(v54 - 169) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v54 - 192));
  if ((a15 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a54 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a10);
  if ((a54 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a49);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a42);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a40 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a16);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a35);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_12;
  }
LABEL_20:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0) {
LABEL_21:
  }
    _Unwind_Resume(a1);
LABEL_12:
  operator delete(__p);
  goto LABEL_21;
}

char **sub_8F48DC@<X0>(char **result@<X0>, void (*a2)(void **__return_ptr, char *)@<X1>, uint64_t a3@<X8>)
{
  void (*v8)(void **__return_ptr, char *);

  uint64_t v7 = 0;
  unint64_t v8 = a2;
  long long v6 = 0u;
  if (result)
  {
    uint64_t v4 = (unsigned int *)result;
    sub_8F4980((char **)&v6, *(unsigned int *)result);
    uint64_t result = sub_8F4BB0(v4, (char **)&v6, *((uint64_t *)&v6 + 1), &v8);
    uint64_t v5 = v7;
    *(_OWORD *)a3 = v6;
    *(void *)(a3 + 16) = v5;
  }
  else
  {
    *(_OWORD *)a3 = 0uLL;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_8F4964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9)
{
  if (a9) {
    sub_20AC014(&a9, a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_8F4980(char **a1, unint64_t a2)
{
  uint64_t v2 = (void **)*a1;
  if (a2 <= (a1[2] - *a1) >> 6) {
    return;
  }
  if (a2 >> 58) {
    sub_2E00();
  }
  uint64_t v4 = (void **)a1[1];
  unint64_t v5 = a2 << 6;
  long long v6 = (char *)operator new(a2 << 6);
  uint64_t v7 = &v6[v5];
  unint64_t v8 = &v6[(char *)v4 - (char *)v2];
  if (v4 == v2)
  {
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v7;
    if (!v2) {
      return;
    }
    goto LABEL_21;
  }
  unint64_t v9 = &v6[(char *)v4 - (char *)v2];
  do
  {
    long long v10 = *((_OWORD *)v4 - 4);
    *((void *)v9 - 6) = *(v4 - 6);
    *((_OWORD *)v9 - 4) = v10;
    *(v4 - 7) = 0;
    *(v4 - 6) = 0;
    *(v4 - 8) = 0;
    *(_OWORD *)(v9 - 40) = *(_OWORD *)(v4 - 5);
    *(_OWORD *)(v9 - 24) = *(_OWORD *)(v4 - 3);
    *((void *)v9 - 1) = *(v4 - 1);
    v9 -= 64;
    *(v4 - 3) = 0;
    *(v4 - 2) = 0;
    *(v4 - 1) = 0;
    v4 -= 8;
  }
  while (v4 != v2);
  uint64_t v11 = (void **)*a1;
  uint64_t v2 = (void **)a1[1];
  *a1 = v9;
  a1[1] = v8;
  a1[2] = v7;
  if (v2 != v11)
  {
    do
    {
      unsigned int v12 = (void **)*(v2 - 3);
      if (v12)
      {
        uint64_t v13 = (void **)*(v2 - 2);
        uint64_t v14 = *(v2 - 3);
        if (v13 != v12)
        {
          do
          {
            if (*((char *)v13 - 1) < 0) {
              operator delete(*(v13 - 3));
            }
            v13 -= 4;
          }
          while (v13 != v12);
          uint64_t v14 = *(v2 - 3);
        }
        *(v2 - 2) = v12;
        operator delete(v14);
      }
      uint64_t v15 = v2 - 8;
      if (*((char *)v2 - 41) < 0) {
        operator delete(*v15);
      }
      v2 -= 8;
    }
    while (v15 != v11);
    uint64_t v2 = v11;
  }
  if (v2)
  {
LABEL_21:
    operator delete(v2);
  }
}

uint64_t sub_8F4AF8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 64;
    uint64_t v4 = *(void *)(i - 24);
    if (v4)
    {
      uint64_t v5 = *(void *)(i - 16);
      long long v6 = *(void **)(i - 24);
      if (v5 != v4)
      {
        do
        {
          if (*(char *)(v5 - 1) < 0) {
            operator delete(*(void **)(v5 - 24));
          }
          v5 -= 32;
        }
        while (v5 != v4);
        long long v6 = *(void **)(i - 24);
      }
      *(void *)(i - 16) = v4;
      operator delete(v6);
    }
    if (*(char *)(i - 41) < 0) {
      operator delete(*(void **)(i - 64));
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char **sub_8F4BB0(unsigned int *a1, char **a2, uint64_t a3, void (**a4)(void **__return_ptr, char *))
{
  void (*v9)(void **__return_ptr, char *);
  uint64_t v10;
  void **v11;
  void **v12;
  void *v13;
  void *v15[2];
  char v16;
  void *__p;
  void **v18;

  uint64_t v7 = (char *)(a1 + 1);
  uint64_t v6 = *a1;
  if (v6)
  {
    unint64_t v8 = (unsigned int *)&v7[4 * v6];
    unint64_t v9 = *a4;
    (*a4)(v15, &v7[*(unsigned int *)v7]);
    while (1)
    {
      long long v10 = sub_8F4CD8(a2, a3, (uint64_t)v15);
      uint64_t v11 = (void **)__p;
      if (__p)
      {
        unsigned int v12 = v18;
        uint64_t v13 = __p;
        if (v18 != __p)
        {
          do
          {
            if (*((char *)v12 - 1) < 0) {
              operator delete(*(v12 - 3));
            }
            v12 -= 4;
          }
          while (v12 != v11);
          uint64_t v13 = __p;
        }
        uint64_t v18 = v11;
        operator delete(v13);
      }
      if (v16 < 0) {
        operator delete(v15[0]);
      }
      a3 = v10 + 64;
      v7 += 4;
      if (v7 == (char *)v8) {
        break;
      }
      v9(v15, &v7[*(unsigned int *)v7]);
    }
  }
  return a2;
}

void sub_8F4CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a17) {
    sub_20AC0C4((uint64_t)&a18, a17);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_8F4CD8(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v7 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v8 = (a2 - (uint64_t)*a1) >> 6;
  unint64_t v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    unint64_t v19 = ((uint64_t)(v6 - (void)v7) >> 6) + 1;
    if (v19 >> 58) {
      sub_2E00();
    }
    uint64_t v20 = v9 - (void)v7;
    if (v20 >> 5 > v19) {
      unint64_t v19 = v20 >> 5;
    }
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v21 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v21 = v19;
    }
    std::string::size_type v44 = a1 + 2;
    if (v21)
    {
      if (v21 >> 58) {
        sub_188D718();
      }
      int v22 = (char *)operator new(v21 << 6);
    }
    else
    {
      int v22 = 0;
    }
    long long v40 = v22;
    unint64_t v41 = &v22[64 * v8];
    long long v42 = v41;
    unint64_t v43 = &v22[64 * v21];
    sub_8F50D4((uint64_t)&v40, (long long *)a3);
    unint64_t v25 = v41;
    unint64_t v26 = *a1;
    int v27 = v41;
    if (*a1 != (char *)v4)
    {
      unsigned int v28 = v41;
      uint64_t v29 = v4;
      do
      {
        int v27 = v28 - 64;
        long long v30 = *(_OWORD *)(v29 - 64);
        *((void *)v28 - 6) = *(void *)(v29 - 48);
        *((_OWORD *)v28 - 4) = v30;
        *(void *)(v29 - 56) = 0;
        *(void *)(v29 - 48) = 0;
        *(void *)(v29 - 64) = 0;
        *(_OWORD *)(v28 - 40) = *(_OWORD *)(v29 - 40);
        *((void *)v28 - 2) = 0;
        *((void *)v28 - 1) = 0;
        *((void *)v28 - 3) = 0;
        *(_OWORD *)(v28 - 24) = *(_OWORD *)(v29 - 24);
        *((void *)v28 - 1) = *(void *)(v29 - 8);
        *(void *)(v29 - 24) = 0;
        *(void *)(v29 - 16) = 0;
        *(void *)(v29 - 8) = 0;
        v28 -= 64;
        v29 -= 64;
      }
      while ((char *)v29 != v26);
    }
    unint64_t v41 = v27;
    uint64_t v31 = a1[1];
    uint64_t v32 = v42;
    if (v31 != (char *)v4)
    {
      do
      {
        long long v33 = *(_OWORD *)v4;
        *((void *)v32 + 2) = *(void *)(v4 + 16);
        *(_OWORD *)uint64_t v32 = v33;
        *(void *)(v4 + 8) = 0;
        *(void *)(v4 + 16) = 0;
        *(void *)uint64_t v4 = 0;
        *(_OWORD *)(v32 + 24) = *(_OWORD *)(v4 + 24);
        *((void *)v32 + 6) = 0;
        *((void *)v32 + 7) = 0;
        *((void *)v32 + 5) = 0;
        *(_OWORD *)(v32 + 40) = *(_OWORD *)(v4 + 40);
        *((void *)v32 + 7) = *(void *)(v4 + 56);
        *(void *)(v4 + 40) = 0;
        *(void *)(v4 + 48) = 0;
        *(void *)(v4 + 56) = 0;
        v32 += 64;
        v4 += 64;
      }
      while ((char *)v4 != v31);
      int v27 = v41;
      uint64_t v4 = (uint64_t)a1[1];
    }
    long long v34 = *a1;
    *a1 = v27;
    a1[1] = v32;
    int v35 = a1[2];
    a1[2] = v43;
    long long v42 = (char *)v4;
    unint64_t v43 = v35;
    long long v40 = v34;
    unint64_t v41 = v34;
    if ((char *)v4 == v34)
    {
      if (!v4) {
        return (uint64_t)v25;
      }
    }
    else
    {
      do
      {
        long long v42 = (char *)(v4 - 64);
        uint64_t v36 = *(void *)(v4 - 24);
        if (v36)
        {
          uint64_t v37 = *(void *)(v4 - 16);
          uint64_t v38 = *(void **)(v4 - 24);
          if (v37 != v36)
          {
            do
            {
              if (*(char *)(v37 - 1) < 0) {
                operator delete(*(void **)(v37 - 24));
              }
              v37 -= 32;
            }
            while (v37 != v36);
            uint64_t v38 = *(void **)(v4 - 24);
          }
          *(void *)(v4 - 16) = v36;
          operator delete(v38);
        }
        if (*(char *)(v4 - 41) < 0) {
          operator delete(*(void **)(v4 - 64));
        }
        uint64_t v4 = (uint64_t)v42;
      }
      while (v42 != v34);
      uint64_t v4 = (uint64_t)v40;
      if (!v40) {
        return (uint64_t)v25;
      }
    }
    operator delete((void *)v4);
    return (uint64_t)v25;
  }
  if (a2 == v6)
  {
    long long v23 = *(_OWORD *)a3;
    *(void *)(a2 + 16) = *(void *)(a3 + 16);
    *(_OWORD *)a2 = v23;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    int v24 = &v7[64 * v8];
    *(_OWORD *)(v24 + 24) = *(_OWORD *)(a3 + 24);
    *((void *)v24 + 6) = 0;
    *((void *)v24 + 7) = 0;
    *((void *)v24 + 5) = 0;
    *(_OWORD *)(v24 + 40) = *(_OWORD *)(a3 + 40);
    *((void *)v24 + 7) = *(void *)(a3 + 56);
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
    a1[1] = (char *)(a2 + 64);
  }
  else
  {
    long long v10 = a1[1];
    if (v6 >= 0x40)
    {
      unint64_t v11 = v6 - 64;
      long long v10 = a1[1];
      do
      {
        long long v12 = *(_OWORD *)v11;
        *((void *)v10 + 2) = *(void *)(v11 + 16);
        *(_OWORD *)long long v10 = v12;
        *(void *)(v11 + 8) = 0;
        *(void *)(v11 + 16) = 0;
        *(void *)unint64_t v11 = 0;
        *(_OWORD *)(v10 + 24) = *(_OWORD *)(v11 + 24);
        *((void *)v10 + 6) = 0;
        *((void *)v10 + 7) = 0;
        *((void *)v10 + 5) = 0;
        *(_OWORD *)(v10 + 40) = *(_OWORD *)(v11 + 40);
        *((void *)v10 + 7) = *(void *)(v11 + 56);
        *(void *)(v11 + 40) = 0;
        *(void *)(v11 + 48) = 0;
        *(void *)(v11 + 56) = 0;
        v10 += 64;
        v11 += 64;
      }
      while (v11 < v6);
    }
    a1[1] = v10;
    sub_8F52E0(a2, v6 - 64, v6);
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    long long v13 = *(_OWORD *)a3;
    *(void *)(v4 + 16) = *(void *)(a3 + 16);
    *(_OWORD *)uint64_t v4 = v13;
    *(unsigned char *)(a3 + 23) = 0;
    *(unsigned char *)a3 = 0;
    uint64_t v14 = &v7[64 * v8];
    uint64_t v15 = (void **)(v14 + 40);
    uint64_t v16 = (void **)*((void *)v14 + 5);
    *(_OWORD *)(v14 + 24) = *(_OWORD *)(a3 + 24);
    if (v16)
    {
      uint64_t v17 = (void **)*((void *)v14 + 6);
      uint64_t v18 = v16;
      if (v17 != v16)
      {
        do
        {
          if (*((char *)v17 - 1) < 0) {
            operator delete(*(v17 - 3));
          }
          v17 -= 4;
        }
        while (v17 != v16);
        uint64_t v18 = *v15;
      }
      *((void *)v14 + 6) = v16;
      operator delete(v18);
      *uint64_t v15 = 0;
      *((void *)v14 + 6) = 0;
      *((void *)v14 + 7) = 0;
    }
    *(_OWORD *)uint64_t v15 = *(_OWORD *)(a3 + 40);
    *((void *)v14 + 7) = *(void *)(a3 + 56);
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
  }
  return v4;
}

void sub_8F50C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_8F4AF8((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_8F50D4(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(long long **)(a1 + 16);
  if (v4 == *(long long **)(a1 + 24))
  {
    uint64_t v5 = *(long long **)a1;
    unint64_t v6 = *(long long **)(a1 + 8);
    if ((unint64_t)v6 <= *(void *)a1)
    {
      unint64_t v11 = ((char *)v4 - (char *)v5) >> 5;
      if (v4 == v5) {
        unint64_t v11 = 1;
      }
      if (v11 >> 58) {
        sub_188D718();
      }
      unint64_t v12 = v11 >> 2;
      unint64_t v13 = v11 << 6;
      uint64_t v14 = (char *)operator new(v11 << 6);
      uint64_t v15 = &v14[64 * v12];
      uint64_t v16 = &v14[v13];
      if (v4 == v6)
      {
        *(void *)a1 = v14;
        *(void *)(a1 + 8) = v15;
        *(void *)(a1 + 16) = v15;
        *(void *)(a1 + 24) = v16;
      }
      else
      {
        uint64_t v17 = &v15[(char *)v4 - (char *)v6];
        unint64_t v18 = v12 << 6;
        do
        {
          unint64_t v19 = &v14[v18];
          long long v20 = *v6;
          *((void *)v19 + 2) = *((void *)v6 + 2);
          *(_OWORD *)unint64_t v19 = v20;
          *((void *)v6 + 1) = 0;
          *((void *)v6 + 2) = 0;
          *(void *)unint64_t v6 = 0;
          *(_OWORD *)(v19 + 24) = *(long long *)((char *)v6 + 24);
          *(_OWORD *)(v19 + 40) = *(long long *)((char *)v6 + 40);
          *((void *)v19 + 7) = *((void *)v6 + 7);
          *((void *)v6 + 5) = 0;
          *((void *)v6 + 6) = 0;
          *((void *)v6 + 7) = 0;
          v18 += 64;
          v6 += 4;
        }
        while (v19 + 64 != v17);
        uint64_t v5 = *(long long **)a1;
        unint64_t v21 = *(void ***)(a1 + 8);
        int v22 = *(void ***)(a1 + 16);
        *(void *)a1 = v14;
        *(void *)(a1 + 8) = v15;
        *(void *)(a1 + 16) = v17;
        *(void *)(a1 + 24) = v16;
        if (v22 != v21)
        {
          do
          {
            long long v23 = (void **)*(v22 - 3);
            if (v23)
            {
              int v24 = (void **)*(v22 - 2);
              unint64_t v25 = *(v22 - 3);
              if (v24 != v23)
              {
                do
                {
                  if (*((char *)v24 - 1) < 0) {
                    operator delete(*(v24 - 3));
                  }
                  v24 -= 4;
                }
                while (v24 != v23);
                unint64_t v25 = *(v22 - 3);
              }
              *(v22 - 2) = v23;
              operator delete(v25);
            }
            unint64_t v26 = v22 - 8;
            if (*((char *)v22 - 41) < 0) {
              operator delete(*v26);
            }
            v22 -= 8;
          }
          while (v26 != v21);
        }
      }
      if (v5) {
        operator delete(v5);
      }
      uint64_t v4 = *(long long **)(a1 + 16);
    }
    else
    {
      uint64_t v7 = ((uint64_t)v6 - *(void *)a1) >> 6;
      if (v7 >= -1) {
        unint64_t v8 = v7 + 1;
      }
      else {
        unint64_t v8 = v7 + 2;
      }
      unint64_t v9 = v8 >> 1 << 6;
      sub_8F53F8(*(long long **)(a1 + 8), v4, (uint64_t)v6 - v9);
      uint64_t v4 = v10;
      *(void *)(a1 + 8) -= v9;
      *(void *)(a1 + 16) = v10;
    }
  }
  long long v27 = *a2;
  *((void *)v4 + 2) = *((void *)a2 + 2);
  long long *v4 = v27;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(long long *)((char *)v4 + 24) = *(long long *)((char *)a2 + 24);
  *((void *)v4 + 6) = 0;
  *((void *)v4 + 7) = 0;
  *((void *)v4 + 5) = 0;
  __n128 result = *(__n128 *)((char *)a2 + 40);
  *(long long *)((char *)v4 + 40) = (__int128)result;
  *((void *)v4 + 7) = *((void *)a2 + 7);
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 6) = 0;
  *((void *)a2 + 7) = 0;
  *(void *)(a1 + 16) += 64;
  return result;
}

uint64_t sub_8F52E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v6 = a2;
    do
    {
      unint64_t v8 = (void **)(a3 - 64);
      if (*(char *)(a3 - 41) < 0) {
        operator delete(*v8);
      }
      uint64_t v9 = v6 - 64;
      long long v10 = *(_OWORD *)(v6 - 64);
      *(void *)(a3 - 48) = *(void *)(v6 - 48);
      *(_OWORD *)unint64_t v8 = v10;
      *(unsigned char *)(v6 - 41) = 0;
      *(unsigned char *)(v6 - 64) = 0;
      unint64_t v11 = (void **)(a3 - 24);
      unint64_t v12 = *(void ***)(a3 - 24);
      *(_OWORD *)(a3 - 40) = *(_OWORD *)(v6 - 40);
      if (v12)
      {
        unint64_t v13 = *(void ***)(a3 - 16);
        uint64_t v7 = v12;
        if (v13 != v12)
        {
          do
          {
            if (*((char *)v13 - 1) < 0) {
              operator delete(*(v13 - 3));
            }
            v13 -= 4;
          }
          while (v13 != v12);
          uint64_t v7 = *v11;
        }
        *(void *)(a3 - 16) = v12;
        operator delete(v7);
        void *v11 = 0;
        *(void *)(a3 - 16) = 0;
        *(void *)(a3 - 8) = 0;
      }
      *(_OWORD *)(a3 - 24) = *(_OWORD *)(v6 - 24);
      *(void *)(a3 - 8) = *(void *)(v6 - 8);
      *(void *)(v6 - 24) = 0;
      *(void *)(v6 - 16) = 0;
      *(void *)(v6 - 8) = 0;
      a3 -= 64;
      v6 -= 64;
    }
    while (v9 != a1);
  }
  return a2;
}

long long *sub_8F53F8(long long *a1, long long *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      long long v7 = *v4;
      *(void *)(a3 + 16) = *((void *)v4 + 2);
      *(_OWORD *)a3 = v7;
      *((unsigned char *)v4 + 23) = 0;
      *(unsigned char *)uint64_t v4 = 0;
      unint64_t v8 = (void **)(a3 + 40);
      uint64_t v9 = *(void ***)(a3 + 40);
      *(_OWORD *)(a3 + 24) = *(long long *)((char *)v4 + 24);
      if (v9)
      {
        long long v10 = *(void ***)(a3 + 48);
        uint64_t v6 = v9;
        if (v10 != v9)
        {
          do
          {
            if (*((char *)v10 - 1) < 0) {
              operator delete(*(v10 - 3));
            }
            v10 -= 4;
          }
          while (v10 != v9);
          uint64_t v6 = *v8;
        }
        *(void *)(a3 + 48) = v9;
        operator delete(v6);
        *unint64_t v8 = 0;
        *(void *)(a3 + 48) = 0;
        *(void *)(a3 + 56) = 0;
      }
      *(_OWORD *)(a3 + 40) = *(long long *)((char *)v4 + 40);
      *(void *)(a3 + 56) = *((void *)v4 + 7);
      *((void *)v4 + 5) = 0;
      *((void *)v4 + 6) = 0;
      *((void *)v4 + 7) = 0;
      v4 += 4;
      a3 += 64;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t sub_8F54F4(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t v9 = *a1;
  if (0x66FD0EB66FD0EB67 * ((v8 - *a1) >> 3) >= a4)
  {
    uint64_t result = a1[1];
    if (0x66FD0EB66FD0EB67 * ((result - v9) >> 3) >= a4)
    {
      if (a2 == a3)
      {
        uint64_t v23 = v9;
      }
      else
      {
        uint64_t v23 = v9;
        do
        {
          sub_8F579C(v9, v6);
          v6 += 696;
          v9 += 696;
          v23 += 696;
        }
        while (v6 != a3);
        uint64_t result = a1[1];
      }
      while (result != v23)
        uint64_t result = sub_8E4D50(result - 696);
      a1[1] = v23;
    }
    else
    {
      uint64_t v19 = a2 + 8 * ((result - v9) >> 3);
      if (result != v9)
      {
        uint64_t v20 = 8 * ((result - v9) >> 3);
        do
        {
          uint64_t result = sub_8F579C(v9, v6);
          v6 += 696;
          v9 += 696;
          v20 -= 696;
        }
        while (v20);
        uint64_t v9 = a1[1];
      }
      uint64_t v21 = v9;
      if (v19 != a3)
      {
        uint64_t v22 = 0;
        do
        {
          uint64_t result = sub_8E7454(v9 + v22, v19 + v22);
          v22 += 696;
        }
        while (v19 + v22 != a3);
        uint64_t v21 = v9 + v22;
      }
      a1[1] = v21;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = a1[1];
      unint64_t v11 = (void *)v9;
      if (v10 != v9)
      {
        do
          uint64_t v10 = sub_8E4D50(v10 - 696);
        while (v10 != v9);
        unint64_t v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x5E293205E29320) {
      goto LABEL_37;
    }
    unint64_t v12 = 0x66FD0EB66FD0EB67 * (v8 >> 3);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= a4) {
      uint64_t v13 = a4;
    }
    unint64_t v14 = v12 >= 0x2F149902F14990 ? 0x5E293205E29320 : v13;
    if (v14 > 0x5E293205E29320) {
LABEL_37:
    }
      sub_2E00();
    uint64_t v15 = 696 * v14;
    uint64_t result = (uint64_t)operator new(696 * v14);
    uint64_t v17 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = result + v15;
    if (v6 != a3)
    {
      uint64_t v18 = 0;
      do
      {
        uint64_t result = sub_8E7454(v17 + v18, v6 + v18);
        v18 += 696;
      }
      while (v6 + v18 != a3);
      v17 += v18;
    }
    a1[1] = v17;
  }
  return result;
}

uint64_t sub_8F579C(uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
  {
    std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
    uint64_t v5 = *(void *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = v5;
  }
  else
  {
    sub_8F59E0((char **)a1, *(std::string **)a2, *(long long **)(a2 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
    long long v4 = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v4;
    sub_326C0((void *)(a1 + 72), *(char **)(a2 + 72), *(char **)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 3);
  }
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  sub_4F39B8(a1 + 104, (std::string *)(a2 + 104));
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  std::string::operator=((std::string *)(a1 + 152), (const std::string *)(a2 + 152));
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  std::string::operator=((std::string *)(a1 + 184), (const std::string *)(a2 + 184));
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  sub_4F39B8(a1 + 216, (std::string *)(a2 + 216));
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  std::string::operator=((std::string *)(a1 + 264), (const std::string *)(a2 + 264));
  *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
  std::string::operator=((std::string *)(a1 + 296), (const std::string *)(a2 + 296));
  *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
  sub_4F39B8(a1 + 328, (std::string *)(a2 + 328));
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  std::string::operator=((std::string *)(a1 + 376), (const std::string *)(a2 + 376));
  *(unsigned char *)(a1 + 400) = *(unsigned char *)(a2 + 400);
  std::string::operator=((std::string *)(a1 + 408), (const std::string *)(a2 + 408));
  *(unsigned char *)(a1 + 432) = *(unsigned char *)(a2 + 432);
  sub_4F39B8(a1 + 440, (std::string *)(a2 + 440));
  *(void *)(a1 + 480) = *(void *)(a2 + 480);
  std::string::operator=((std::string *)(a1 + 488), (const std::string *)(a2 + 488));
  *(unsigned char *)(a1 + 512) = *(unsigned char *)(a2 + 512);
  std::string::operator=((std::string *)(a1 + 520), (const std::string *)(a2 + 520));
  *(unsigned char *)(a1 + 544) = *(unsigned char *)(a2 + 544);
  uint64_t v6 = *(void *)(a2 + 552);
  *(_WORD *)(a1 + 560) = *(_WORD *)(a2 + 560);
  *(void *)(a1 + 552) = v6;
  if (a1 != a2)
  {
    sub_34E73C((void *)(a1 + 568), *(char **)(a2 + 568), *(char **)(a2 + 576), *(void *)(a2 + 576) - *(void *)(a2 + 568));
    sub_34E73C((void *)(a1 + 592), *(char **)(a2 + 592), *(char **)(a2 + 600), *(void *)(a2 + 600) - *(void *)(a2 + 592));
    sub_34E73C((void *)(a1 + 616), *(char **)(a2 + 616), *(char **)(a2 + 624), *(void *)(a2 + 624) - *(void *)(a2 + 616));
  }
  char v7 = *(unsigned char *)(a2 + 641);
  if (v7)
  {
    *(unsigned char *)(a1 + 640) = *(unsigned char *)(a2 + 640);
    char v7 = 1;
  }
  *(unsigned char *)(a1 + 641) = v7;
  if (a1 != a2)
  {
    sub_8F5C88(a1 + 648, *(char **)(a2 + 648), *(char **)(a2 + 656), (uint64_t)(*(void *)(a2 + 656) - *(void *)(a2 + 648)) >> 3);
    sub_457964((void *)(a1 + 672), *(char **)(a2 + 672), *(char **)(a2 + 680), (uint64_t)(*(void *)(a2 + 680) - *(void *)(a2 + 672)) >> 4);
  }
  return a1;
}

void sub_8F59E0(char **a1, std::string *__str, long long *a3, unint64_t a4)
{
  uint64_t v6 = __str;
  int v9 = a1 + 16;
  uint64_t v8 = (uint64_t)a1[2];
  uint64_t v10 = *a1;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - (uint64_t)*a1) >> 3) < a4)
  {
    if (!v10) {
      goto LABEL_22;
    }
    unint64_t v11 = a1[1];
    unint64_t v12 = *a1;
    if (v11 == v10)
    {
LABEL_21:
      a1[1] = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
LABEL_22:
      if (a4 > 0x492492492492492) {
        goto LABEL_40;
      }
      unint64_t v17 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 3);
      uint64_t v18 = 2 * v17;
      if (2 * v17 <= a4) {
        uint64_t v18 = a4;
      }
      unint64_t v19 = v17 >= 0x249249249249249 ? 0x492492492492492 : v18;
      if (v19 > 0x492492492492492) {
LABEL_40:
      }
        sub_2E00();
      uint64_t v20 = 56 * v19;
      uint64_t v21 = (char *)operator new(56 * v19);
      *a1 = v21;
      a1[1] = v21;
      a1[2] = &v21[v20];
      uint64_t v15 = sub_8E79EC(v9, (long long *)v6, a3, v21);
LABEL_30:
      a1[1] = v15;
      return;
    }
    while (1)
    {
      if (*(v11 - 1) < 0)
      {
        operator delete(*((void **)v11 - 3));
        if (*(v11 - 33) < 0) {
LABEL_10:
        }
          operator delete(*((void **)v11 - 7));
      }
      else if (*(v11 - 33) < 0)
      {
        goto LABEL_10;
      }
      v11 -= 56;
      if (v11 == v10)
      {
        unint64_t v12 = *a1;
        goto LABEL_21;
      }
    }
  }
  uint64_t v13 = a1[1];
  if (0x6DB6DB6DB6DB6DB7 * ((v13 - v10) >> 3) < a4)
  {
    unint64_t v14 = (long long *)(&__str->__r_.__value_.__l.__data_ + ((v13 - v10) >> 3));
    if (v13 != v10)
    {
      do
      {
        std::string::operator=((std::string *)v10, v6);
        v10[24] = v6[1].__r_.__value_.__s.__data_[0];
        std::string::operator=((std::string *)(v10 + 32), (std::string *)((char *)v6 + 32));
        uint64_t v6 = (std::string *)((char *)v6 + 56);
        v10 += 56;
      }
      while (v6 != (std::string *)v14);
      uint64_t v10 = a1[1];
    }
    uint64_t v15 = sub_8E79EC(v9, v14, a3, v10);
    goto LABEL_30;
  }
  if (__str == (std::string *)a3)
  {
    uint64_t v16 = *a1;
  }
  else
  {
    uint64_t v16 = *a1;
    do
    {
      std::string::operator=((std::string *)v10, v6);
      v10[24] = v6[1].__r_.__value_.__s.__data_[0];
      std::string::operator=((std::string *)(v10 + 32), (std::string *)((char *)v6 + 32));
      v16 += 56;
      uint64_t v6 = (std::string *)((char *)v6 + 56);
      v10 += 56;
    }
    while (v6 != (std::string *)a3);
    uint64_t v13 = a1[1];
  }
  while (v13 != v16)
  {
    if (*(v13 - 1) < 0)
    {
      operator delete(*((void **)v13 - 3));
      if ((*(v13 - 33) & 0x80000000) == 0) {
        goto LABEL_32;
      }
    }
    else if ((*(v13 - 33) & 0x80000000) == 0)
    {
      goto LABEL_32;
    }
    operator delete(*((void **)v13 - 7));
LABEL_32:
    v13 -= 56;
  }
  a1[1] = v16;
}

void sub_8F5C78(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_8F5C80(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *sub_8F5C88(uint64_t a1, char *a2, char *a3, size_t __sz)
{
  uint64_t v8 = *(void *)(a1 + 16);
  int v9 = *(void **)a1;
  uint64_t result = v9;
  if (__sz <= (v8 - (uint64_t)v9) >> 3)
  {
    uint64_t v18 = *(void **)(a1 + 8);
    unint64_t v17 = (void *)(a1 + 8);
    unint64_t v14 = v18;
    int64_t v19 = (char *)v18 - (char *)v9;
    unint64_t v20 = v18 - v9;
    if (v20 < __sz)
    {
      uint64_t v21 = &a2[8 * v20];
      if (v14 == v9) {
        goto LABEL_18;
      }
      if ((unint64_t)(v19 - 8) >= 0x78)
      {
        unint64_t v38 = (v19 & 0xFFFFFFFFFFFFFFF8) - 4;
        unint64_t v39 = (char *)v9 + v38;
        long long v40 = &a2[v38];
        unint64_t v41 = a2 + 4;
        BOOL v42 = (char *)v9 + 4 >= &a2[v19 & 0xFFFFFFFFFFFFFFF8] || v41 >= (char *)v9 + (v19 & 0xFFFFFFFFFFFFFFF8);
        char v43 = !v42;
        uint64_t v22 = a2;
        if ((v39 <= a2 || v9 >= (void *)v40) && (v43 & 1) == 0)
        {
          unint64_t v45 = ((unint64_t)(v19 - 8) >> 3) + 1;
          uint64_t v46 = v45 & 0x3FFFFFFFFFFFFFF8;
          uint64_t result = &v9[v46];
          uint64_t v22 = &a2[v46 * 8];
          long long v47 = (long long *)(a2 + 32);
          long long v48 = v9 + 4;
          uint64_t v49 = v45 & 0x3FFFFFFFFFFFFFF8;
          do
          {
            long long v51 = *(v47 - 2);
            long long v50 = *(v47 - 1);
            long long v53 = *v47;
            long long v52 = v47[1];
            v47 += 4;
            *(v48 - 2) = v51;
            *(v48 - 1) = v50;
            *long long v48 = v53;
            v48[1] = v52;
            v48 += 4;
            v49 -= 8;
          }
          while (v49);
          if (v45 == (v45 & 0x3FFFFFFFFFFFFFF8))
          {
LABEL_18:
            if (v21 == a3)
            {
              int64_t v16 = 0;
              goto LABEL_68;
            }
            int v24 = &a2[v19];
            unint64_t v25 = a3 - &a2[v19] - 8;
            if (v25 < 0x38)
            {
              long long v27 = (char *)v14;
            }
            else
            {
              unint64_t v26 = (char *)v14 - v24;
              long long v27 = (char *)v14;
              if (v26 >= 0x20)
              {
                uint64_t v28 = (v25 >> 3) + 1;
                uint64_t v29 = v28 & 0x3FFFFFFFFFFFFFFCLL;
                v21 += v29 * 8;
                long long v27 = (char *)&v14[v29];
                long long v30 = v14 + 2;
                uint64_t v31 = &a2[8 * v20 + 16];
                uint64_t v32 = v28 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v33 = *(_OWORD *)v31;
                  *(v30 - 1) = *((_OWORD *)v31 - 1);
                  *long long v30 = v33;
                  v30 += 2;
                  v31 += 32;
                  v32 -= 4;
                }
                while (v32);
                if (v28 == (v28 & 0x3FFFFFFFFFFFFFFCLL)) {
                  goto LABEL_67;
                }
              }
            }
            do
            {
              uint64_t v70 = *(void *)v21;
              v21 += 8;
              *(void *)long long v27 = v70;
              v27 += 8;
            }
            while (v21 != a3);
LABEL_67:
            int64_t v16 = v27 - (char *)v14;
            goto LABEL_68;
          }
        }
      }
      else
      {
        uint64_t v22 = a2;
      }
      do
      {
        uint64_t v23 = *(void *)v22;
        v22 += 8;
        *result++ = v23;
      }
      while (v22 != v21);
      goto LABEL_18;
    }
    if (a2 == a3)
    {
      int v35 = (char *)v9;
    }
    else
    {
      unint64_t v34 = a3 - a2 - 8;
      if (v34 < 0x78
        || ((unint64_t v54 = v34 & 0xFFFFFFFFFFFFFFF8 | 4,
             std::string v55 = (char *)v9 + v54,
             std::string v56 = &a2[v54],
             unint64_t v57 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8,
             (char *)v9 + 4 < &a2[v57])
          ? (BOOL v58 = a2 + 4 >= (char *)v9 + v57)
          : (BOOL v58 = 1),
            v58 ? (char v59 = 0) : (char v59 = 1),
            v55 > a2 ? (BOOL v60 = v9 >= (void *)v56) : (BOOL v60 = 1),
            !v60 || (v59 & 1) != 0))
      {
        int v35 = (char *)v9;
        uint64_t v36 = a2;
      }
      else
      {
        uint64_t v61 = (v34 >> 3) + 1;
        uint64_t v62 = v61 & 0x3FFFFFFFFFFFFFF8;
        int v35 = (char *)&v9[v62];
        uint64_t v36 = &a2[v62 * 8];
        std::string::size_type v63 = (long long *)(a2 + 32);
        char v64 = v9 + 4;
        uint64_t v65 = v61 & 0x3FFFFFFFFFFFFFF8;
        do
        {
          long long v67 = *(v63 - 2);
          long long v66 = *(v63 - 1);
          long long v69 = *v63;
          long long v68 = v63[1];
          v63 += 4;
          *(v64 - 2) = v67;
          *(v64 - 1) = v66;
          *char v64 = v69;
          v64[1] = v68;
          v64 += 4;
          v65 -= 8;
        }
        while (v65);
        if (v61 == (v61 & 0x3FFFFFFFFFFFFFF8)) {
          goto LABEL_32;
        }
      }
      do
      {
        uint64_t v37 = *(void *)v36;
        v36 += 8;
        *(void *)int v35 = v37;
        v35 += 8;
      }
      while (v36 != a3);
    }
LABEL_32:
    int64_t v16 = v35 - (char *)v9;
    unint64_t v14 = v9;
    goto LABEL_68;
  }
  if (v9)
  {
    *(void *)(a1 + 8) = v9;
    operator delete(v9);
    uint64_t v8 = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  if (__sz >> 61) {
    goto LABEL_69;
  }
  uint64_t v11 = v8 >> 2;
  if (v8 >> 2 <= __sz) {
    uint64_t v11 = __sz;
  }
  BOOL v42 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
  unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v42) {
    unint64_t v12 = v11;
  }
  if (v12 >> 61) {
LABEL_69:
  }
    sub_2E00();
  uint64_t v13 = v12;
  uint64_t result = operator new(8 * v12);
  unint64_t v14 = result;
  *(void *)a1 = result;
  *(void *)(a1 + 8) = result;
  *(void *)(a1 + 16) = &result[v13];
  uint64_t v15 = (char *)result;
  if (a2 != a3)
  {
    uint64_t result = memcpy(result, a2, ((a3 - a2 - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
    uint64_t v15 = (char *)v14 + ((a3 - a2 - 8) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  int64_t v16 = v15 - (char *)v14;
  unint64_t v17 = (void *)(a1 + 8);
LABEL_68:
  void *v17 = (char *)v14 + v16;
  return result;
}

uint64_t sub_8F5FC0(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t v9 = *a1;
  if (0x4EC4EC4EC4EC4EC5 * ((v8 - *a1) >> 4) >= a4)
  {
    uint64_t result = a1[1];
    if (0x4EC4EC4EC4EC4EC5 * ((result - v9) >> 4) >= a4)
    {
      if (a2 == a3)
      {
        uint64_t v23 = v9;
      }
      else
      {
        uint64_t v23 = v9;
        do
        {
          sub_8F6268(v9, v6);
          v6 += 208;
          v9 += 208;
          v23 += 208;
        }
        while (v6 != a3);
        uint64_t result = a1[1];
      }
      while (result != v23)
        uint64_t result = sub_8E5070(result - 208);
      a1[1] = v23;
    }
    else
    {
      uint64_t v19 = a2 + 16 * ((result - v9) >> 4);
      if (result != v9)
      {
        uint64_t v20 = 16 * ((result - v9) >> 4);
        do
        {
          uint64_t result = sub_8F6268(v9, v6);
          v6 += 208;
          v9 += 208;
          v20 -= 208;
        }
        while (v20);
        uint64_t v9 = a1[1];
      }
      uint64_t v21 = v9;
      if (v19 != a3)
      {
        uint64_t v22 = 0;
        do
        {
          uint64_t result = sub_8E7D08(v9 + v22, v19 + v22);
          v22 += 208;
        }
        while (v19 + v22 != a3);
        uint64_t v21 = v9 + v22;
      }
      a1[1] = v21;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = a1[1];
      uint64_t v11 = (void *)v9;
      if (v10 != v9)
      {
        do
          uint64_t v10 = sub_8E5070(v10 - 208);
        while (v10 != v9);
        uint64_t v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x13B13B13B13B13BLL) {
      goto LABEL_37;
    }
    unint64_t v12 = 0x4EC4EC4EC4EC4EC5 * (v8 >> 4);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= a4) {
      uint64_t v13 = a4;
    }
    unint64_t v14 = v12 >= 0x9D89D89D89D89DLL ? 0x13B13B13B13B13BLL : v13;
    if (v14 > 0x13B13B13B13B13BLL) {
LABEL_37:
    }
      sub_2E00();
    uint64_t v15 = 208 * v14;
    uint64_t result = (uint64_t)operator new(208 * v14);
    uint64_t v17 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = result + v15;
    if (v6 != a3)
    {
      uint64_t v18 = 0;
      do
      {
        uint64_t result = sub_8E7D08(v17 + v18, v6 + v18);
        v18 += 208;
      }
      while (v6 + v18 != a3);
      v17 += v18;
    }
    a1[1] = v17;
  }
  return result;
}

uint64_t sub_8F6268(uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
  {
    std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }
  else
  {
    sub_8F59E0((char **)a1, *(std::string **)a2, *(long long **)(a2 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    sub_326C0((void *)(a1 + 64), *(char **)(a2 + 64), *(char **)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 3);
  }
  sub_4F39B8(a1 + 88, (std::string *)(a2 + 88));
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  std::string::operator=((std::string *)(a1 + 136), (const std::string *)(a2 + 136));
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  std::string::operator=((std::string *)(a1 + 168), (const std::string *)(a2 + 168));
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  return a1;
}

uint64_t *sub_8F6344(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = __ROR8__(*a2, 32);
  unint64_t v8 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v7 ^ (v7 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v7 ^ (v7 >> 33))) >> 33));
  unint64_t v9 = v8 ^ (v8 >> 33);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8 ^ (v8 >> 33);
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = v9 & (v10 - 1);
    }
    unint64_t v12 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      uint64_t v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v13[1];
            if (v16 == v9)
            {
              if (*((_DWORD *)v13 + 4) == v6 && *((_DWORD *)v13 + 5) == HIDWORD(v6)) {
                return v13;
              }
            }
            else if ((v16 & (v10 - 1)) != v3)
            {
              goto LABEL_31;
            }
            uint64_t v13 = (uint64_t *)*v13;
            if (!v13) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 4) == v6 && *((_DWORD *)v13 + 5) == HIDWORD(v6)) {
              return v13;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v3) {
              break;
            }
          }
          uint64_t v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_31:
  uint64_t v19 = operator new(0x18uLL);
  *uint64_t v19 = 0;
  v19[1] = v9;
  v19[2] = *a3;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (v10 && (float)(v21 * (float)v10) >= v20)
  {
    uint64_t v22 = *(void *)a1;
    uint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
    if (v23)
    {
LABEL_34:
      *uint64_t v19 = *v23;
LABEL_69:
      *uint64_t v23 = v19;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v24 = 1;
    if (v10 >= 3) {
      BOOL v24 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v10);
    unint64_t v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_45;
    }
    if (prime < v10)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (prime <= v28) {
        size_t prime = v28;
      }
      if (prime < v10) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v31 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v3 = v9 % v10;
        uint64_t v22 = *(void *)a1;
        uint64_t v23 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v23) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v3 = v9;
        uint64_t v22 = *(void *)a1;
        uint64_t v23 = *(void **)(*(void *)a1 + 8 * v9);
        if (v23) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v3 = v31 & v9;
      uint64_t v22 = *(void *)a1;
      uint64_t v23 = *(void **)(*(void *)a1 + 8 * (v31 & v9));
      if (v23) {
        goto LABEL_34;
      }
    }
  }
  *uint64_t v19 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v19;
  *(void *)(v22 + 8 * v3) = a1 + 16;
  if (*v19)
  {
    unint64_t v32 = *(void *)(*v19 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v32 >= v10) {
        v32 %= v10;
      }
    }
    else
    {
      v32 &= v10 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v19;
}

void sub_8F6698(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_8F66AC(void **a1, uint64_t a2)
{
  unint64_t v3 = 0x86BCA1AF286BCA1BLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1AF286BCA1AF286) {
    sub_2E00();
  }
  if (0xD79435E50D79436 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0xD79435E50D79436 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0x86BCA1AF286BCA1BLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0xD79435E50D7943) {
    unint64_t v6 = 0x1AF286BCA1AF286;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x1AF286BCA1AF286) {
      sub_188D718();
    }
    unint64_t v7 = (char *)operator new(152 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  unint64_t v8 = &v7[152 * v3];
  *(void *)unint64_t v8 = *(void *)a2;
  *(_OWORD *)(v8 + 8) = *(_OWORD *)(a2 + 8);
  unint64_t v9 = &v7[152 * v6];
  *((void *)v8 + 3) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *((_OWORD *)v8 + 2) = *(_OWORD *)(a2 + 32);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *((_DWORD *)v8 + 16) = *(_DWORD *)(a2 + 64);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *((void *)v8 + 6) = v10;
  *((void *)v8 + 7) = v11;
  *((void *)v8 + 10) = 0;
  *((void *)v8 + 11) = 0;
  *(_OWORD *)(v8 + 72) = *(_OWORD *)(a2 + 72);
  *((void *)v8 + 11) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *((void *)v8 + 13) = 0;
  *((void *)v8 + 14) = 0;
  *((_OWORD *)v8 + 6) = *(_OWORD *)(a2 + 96);
  *((void *)v8 + 14) = *(void *)(a2 + 112);
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  long long v12 = *(_OWORD *)(a2 + 120);
  *((void *)v8 + 17) = *(void *)(a2 + 136);
  *(_OWORD *)(v8 + 120) = v12;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  LODWORD(v10) = *(_DWORD *)(a2 + 144);
  v8[148] = *(unsigned char *)(a2 + 148);
  *((_DWORD *)v8 + 36) = v10;
  uint64_t v13 = v8 + 152;
  unint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v8;
    a1[1] = v13;
    a1[2] = v9;
    if (!v15) {
      return v13;
    }
    goto LABEL_18;
  }
  uint64_t v16 = 0;
  do
  {
    uint64_t v17 = &v8[v16];
    uint64_t v18 = &v15[v16];
    *((void *)v17 - 19) = *(void *)&v15[v16 - 152];
    long long v19 = *(_OWORD *)&v15[v16 - 144];
    *((void *)v17 - 16) = *(void *)&v15[v16 - 128];
    *((_OWORD *)v17 - 9) = v19;
    *((void *)v18 - 17) = 0;
    *((void *)v18 - 16) = 0;
    *((void *)v18 - 18) = 0;
    long long v20 = *(_OWORD *)&v15[v16 - 120];
    *((void *)v17 - 13) = *(void *)&v15[v16 - 104];
    *(_OWORD *)(v17 - 120) = v20;
    *((void *)v18 - 14) = 0;
    *((void *)v18 - 13) = 0;
    *((void *)v18 - 15) = 0;
    uint64_t v21 = *(void *)&v15[v16 - 96];
    *((_DWORD *)v17 - 22) = *(_DWORD *)&v15[v16 - 88];
    *((void *)v17 - 9) = 0;
    *((void *)v17 - 8) = 0;
    *((void *)v17 - 12) = v21;
    *((_OWORD *)v17 - 5) = *(_OWORD *)&v15[v16 - 80];
    *((void *)v17 - 8) = *(void *)&v15[v16 - 64];
    *((void *)v18 - 10) = 0;
    *((void *)v18 - 9) = 0;
    *((void *)v18 - 8) = 0;
    *((void *)v17 - 6) = 0;
    *((void *)v17 - 5) = 0;
    *(_OWORD *)(v17 - 56) = *(_OWORD *)&v15[v16 - 56];
    *((void *)v17 - 5) = *(void *)&v15[v16 - 40];
    *((void *)v18 - 7) = 0;
    *((void *)v18 - 6) = 0;
    long long v22 = *(_OWORD *)&v15[v16 - 32];
    uint64_t v23 = *(void *)&v15[v16 - 16];
    *((void *)v18 - 5) = 0;
    *((void *)v17 - 2) = v23;
    *((_OWORD *)v17 - 2) = v22;
    *((void *)v18 - 3) = 0;
    *((void *)v18 - 2) = 0;
    *((void *)v18 - 4) = 0;
    LODWORD(v23) = *(_DWORD *)&v15[v16 - 8];
    *(v17 - 4) = v15[v16 - 4];
    *((_DWORD *)v17 - 2) = v23;
    v16 -= 152;
  }
  while (&v15[v16] != v14);
  BOOL v24 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  *a1 = &v8[v16];
  a1[1] = v13;
  a1[2] = v9;
  if (v15 != v24)
  {
    do
    {
      v15 -= 152;
      sub_8E4758((uint64_t)(a1 + 2), (uint64_t)v15);
    }
    while (v15 != v24);
    uint64_t v15 = v24;
  }
  if (v15) {
LABEL_18:
  }
    operator delete(v15);
  return v13;
}

uint64_t sub_8F694C(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = (int *)sub_8DFD1C(a1, a2, 0, "line");
  unint64_t v4 = (unsigned __int16 *)((char *)v3 - *v3);
  if (*v4 < 9u) {
    return 3;
  }
  uint64_t v5 = v4[4];
  if (!v5) {
    return 3;
  }
  unint64_t v6 = (unsigned int *)((char *)v3 + v5);
  uint64_t v7 = *v6;
  long long v19 = 0;
  long long v20 = 0;
  uint64_t v21 = 0;
  unint64_t v9 = (uint64_t *)((char *)v6 + v7 + 4);
  uint64_t v8 = *(unsigned int *)((char *)v6 + v7);
  uint64_t v23 = (void **)&v19;
  if (!v8) {
    return 3;
  }
  uint64_t v10 = 8 * v8;
  do
  {
    if (!*(unsigned char *)(a1 + 3888) || sub_2AB7E4(*(void *)(a1 + 3872)))
    {
      uint64_t v22 = *v9;
      sub_2A98DC(&v23, &v22);
    }
    ++v9;
    v10 -= 8;
  }
  while (v10);
  unint64_t v14 = v19;
  uint64_t v13 = v20;
  uint64_t v11 = 3;
  if (v19 != v20)
  {
    do
    {
      while (1)
      {
        uint64_t v15 = (int *)sub_8F4388(a1, *v14, 0, "market");
        uint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
        if (*v16 < 0x11u) {
          break;
        }
        uint64_t v17 = v16[8];
        if (!v17) {
          break;
        }
        unsigned int v18 = *((unsigned __int8 *)v15 + v17);
        if (v18 >= v11) {
          uint64_t v11 = v11;
        }
        else {
          uint64_t v11 = v18;
        }
        if (++v14 == v13) {
          goto LABEL_24;
        }
      }
      if (v11 <= 1u) {
        uint64_t v11 = v11;
      }
      else {
        uint64_t v11 = 1;
      }
      ++v14;
    }
    while (v14 != v13);
LABEL_24:
    uint64_t v13 = v19;
  }
  if (v13)
  {
    long long v20 = v13;
    operator delete(v13);
  }
  return v11;
}

void sub_8F6AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 *sub_8F6AE0(__n128 **a1, uint64_t a2, __n128 *a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v7 = a2 - (void)*a1;
  uint64_t v8 = v7 >> 4;
  unint64_t v9 = (__n128 *)((char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFF0));
  unint64_t v10 = (unint64_t)a1[2];
  if (v6 >= v10)
  {
    unint64_t v29 = ((uint64_t)(v6 - (void)v5) >> 4) + 1;
    if (v29 >> 60) {
      sub_2E00();
    }
    uint64_t v30 = v10 - (void)v5;
    if (v30 >> 3 > v29) {
      unint64_t v29 = v30 >> 3;
    }
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v31 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v31 = v29;
    }
    long long v48 = a1 + 2;
    if (v31)
    {
      if (v31 >> 60) {
        sub_188D718();
      }
      unint64_t v32 = (__n128 *)operator new(16 * v31);
    }
    else
    {
      unint64_t v32 = 0;
    }
    std::string::size_type v44 = v32;
    unint64_t v45 = &v32[v8];
    uint64_t v46 = v45;
    long long v47 = (char *)&v32[v31];
    sub_8F6DD0((uint64_t)&v44, a3);
    long long v33 = v45;
    unint64_t v34 = *a1;
    int v35 = v45;
    if (*a1 != v9)
    {
      uint64_t v36 = v9;
      uint64_t v37 = v45;
      do
      {
        int v35 = v37 - 1;
        v37[-1] = v36[-1];
        --v36;
        --v37;
      }
      while (v36 != v34);
    }
    unint64_t v45 = v35;
    unint64_t v38 = a1[1];
    unint64_t v39 = v46;
    if (v38 != v9)
    {
      do
      {
        __n128 v40 = *v9++;
        *v39++ = v40;
      }
      while (v9 != v38);
      int v35 = v45;
      unint64_t v9 = a1[1];
    }
    unint64_t v41 = *a1;
    *a1 = v35;
    a1[1] = v39;
    BOOL v42 = (char *)a1[2];
    a1[2] = (__n128 *)v47;
    uint64_t v46 = v9;
    long long v47 = v42;
    std::string::size_type v44 = v41;
    unint64_t v45 = v41;
    if (v9 != v41) {
      uint64_t v46 = (__n128 *)((char *)v9 + (((char *)v41 - (char *)v9 + 15) & 0xFFFFFFFFFFFFFFF0));
    }
    if (v41) {
      operator delete(v41);
    }
    return v33;
  }
  else if (v9 == (__n128 *)v6)
  {
    *unint64_t v9 = *a3;
    a1[1] = v9 + 1;
  }
  else
  {
    uint64_t v11 = v9 + 1;
    unint64_t v12 = v6 - 16;
    uint64_t v13 = a1[1];
    if (v6 >= 0x10)
    {
      unint64_t v14 = (long long *)(v6 - 16);
      uint64_t v13 = a1[1];
      do
      {
        __n128 v15 = (__n128)*v14++;
        *v13++ = v15;
      }
      while ((unint64_t)v14 < v6);
    }
    a1[1] = v13;
    if ((__n128 *)v6 != v11)
    {
      unint64_t v16 = v6 - (void)v11;
      unint64_t v17 = v6 - (void)v11 - 16;
      if (v17 < 0xD0
        || v6 - (v16 & 0xFFFFFFFFFFFFFFF0) < v12
        && (unint64_t)v5->n128_u64 + v16 + (v7 & 0xFFFFFFFFFFFFFFF0) - (v16 & 0xFFFFFFFFFFFFFFF0) < v6)
      {
        goto LABEL_13;
      }
      uint64_t v18 = (v17 >> 4) + 1;
      uint64_t v19 = 16 * (v18 & 0x1FFFFFFFFFFFFFFCLL);
      unint64_t v20 = v6 - v19;
      unint64_t v21 = v12 - v19;
      uint64_t v22 = (const double *)(v6 - 48);
      uint64_t v23 = (double *)(v6 - 32);
      uint64_t v24 = v18 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        float64x2x2_t v49 = vld2q_f64(v22);
        unint64_t v25 = v22 - 4;
        float64x2x2_t v50 = vld2q_f64(v25);
        vst2q_f64(v23, v49);
        unint64_t v26 = v23 - 4;
        vst2q_f64(v26, v50);
        v23 -= 8;
        v22 -= 8;
        v24 -= 4;
      }
      while (v24);
      unint64_t v6 = v20;
      unint64_t v12 = v21;
      if (v18 != (v18 & 0x1FFFFFFFFFFFFFFCLL))
      {
LABEL_13:
        long long v27 = (void *)(v6 - 8);
        do
        {
          uint64_t v28 = *(void *)(v12 - 16);
          v12 -= 16;
          *(v27 - 1) = v28;
          *long long v27 = *(void *)(v12 + 8);
          v27 -= 2;
        }
        while ((__n128 *)v12 != v9);
      }
    }
    v9->n128_u64[0] = a3->n128_u64[0];
    v5[v8].n128_u64[1] = a3->n128_u64[1];
  }
  return v9;
}

void sub_8F6D88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (a12 == a11)
  {
    uint64_t v13 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v13 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

__n128 sub_8F6DD0(uint64_t a1, __n128 *a2)
{
  unint64_t v4 = *(__n128 **)(a1 + 16);
  if (v4 == *(__n128 **)(a1 + 24))
  {
    uint64_t v5 = *(__n128 **)a1;
    unint64_t v6 = *(char **)(a1 + 8);
    if ((unint64_t)v6 > *(void *)a1)
    {
      uint64_t v7 = (uint64_t)&v6[-*(void *)a1] >> 4;
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -v9;
      uint64_t v11 = (__n128 *)&v6[-16 * v9];
      if (v6 == (char *)v4) {
        goto LABEL_61;
      }
      unint64_t v12 = (char *)v4 - v6 - 16;
      if (v12 >= 0x210)
      {
        unint64_t v22 = 16 * v10 + (v12 & 0xFFFFFFFFFFFFFFF0);
        uint64_t v23 = v6 + 8;
        uint64_t v24 = &v6[v22 + 8];
        unint64_t v25 = (unint64_t)&v6[16 * v10 + 8];
        unint64_t v26 = (unint64_t)&v6[v22 + 16];
        unint64_t v27 = (unint64_t)&v6[(v12 & 0xFFFFFFFFFFFFFFF0) + 8];
        unint64_t v28 = (unint64_t)&v6[(v12 & 0xFFFFFFFFFFFFFFF0) + 16];
        BOOL v30 = (unint64_t)v11 < v27 && v6 < v24;
        BOOL v32 = (unint64_t)v11 < v28 && v23 < v24;
        BOOL v34 = v25 < v27 && (unint64_t)v6 < v26;
        BOOL v36 = v25 < v28 && (unint64_t)v23 < v26;
        if (v25 >= (unint64_t)v24 || (unint64_t)v11 >= v26)
        {
          if (v30)
          {
            uint64_t v13 = *(__n128 **)(a1 + 8);
          }
          else if (v32)
          {
            uint64_t v13 = *(__n128 **)(a1 + 8);
          }
          else if (v34)
          {
            uint64_t v13 = *(__n128 **)(a1 + 8);
          }
          else if (v36)
          {
            uint64_t v13 = *(__n128 **)(a1 + 8);
          }
          else
          {
            uint64_t v38 = (v12 >> 4) + 1;
            uint64_t v39 = 16 * (v38 & 0x1FFFFFFFFFFFFFFCLL);
            uint64_t v11 = (__n128 *)((char *)v11 + v39);
            uint64_t v13 = (__n128 *)&v6[v39];
            uint64_t v40 = v38 & 0x1FFFFFFFFFFFFFFCLL;
            do
            {
              unint64_t v41 = &v6[16 * v10];
              long long v42 = *((_OWORD *)v6 + 1);
              long long v44 = *((_OWORD *)v6 + 2);
              long long v43 = *((_OWORD *)v6 + 3);
              *(_OWORD *)unint64_t v41 = *(_OWORD *)v6;
              *((_OWORD *)v41 + 1) = v42;
              *((_OWORD *)v41 + 2) = v44;
              *((_OWORD *)v41 + 3) = v43;
              v6 += 64;
              v40 -= 4;
            }
            while (v40);
            if (v38 == (v38 & 0x1FFFFFFFFFFFFFFCLL)) {
              goto LABEL_60;
            }
          }
        }
        else
        {
          uint64_t v13 = *(__n128 **)(a1 + 8);
        }
      }
      else
      {
        uint64_t v13 = *(__n128 **)(a1 + 8);
      }
      do
      {
        v11->n128_u64[0] = v13->n128_u64[0];
        v11->n128_u64[1] = v13->n128_u64[1];
        ++v11;
        ++v13;
      }
      while (v13 != v4);
LABEL_60:
      unint64_t v4 = *(__n128 **)(a1 + 8);
LABEL_61:
      *(void *)(a1 + 8) = &v4[v10];
      *(void *)(a1 + 16) = v11;
      unint64_t v4 = v11;
      goto LABEL_62;
    }
    if (v4 == v5) {
      unint64_t v14 = 1;
    }
    else {
      unint64_t v14 = ((char *)v4 - (char *)v5) >> 3;
    }
    if (v14 >> 60) {
      sub_188D718();
    }
    __n128 v15 = (char *)operator new(16 * v14);
    unint64_t v16 = (__n128 *)&v15[16 * (v14 >> 2)];
    uint64_t v18 = (char *)v4 - v6;
    BOOL v17 = v4 == (__n128 *)v6;
    unint64_t v4 = v16;
    if (!v17)
    {
      unint64_t v4 = (__n128 *)((char *)v16 + (v18 & 0xFFFFFFFFFFFFFFF0));
      uint64_t v19 = 16 * (v18 >> 4);
      unint64_t v20 = &v15[16 * (v14 >> 2)];
      do
      {
        long long v21 = *(_OWORD *)v6;
        v6 += 16;
        *(_OWORD *)unint64_t v20 = v21;
        v20 += 16;
        v19 -= 16;
      }
      while (v19);
    }
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v16;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = &v15[16 * v14];
    if (v5)
    {
      operator delete(v5);
      unint64_t v4 = *(__n128 **)(a1 + 16);
    }
  }
LABEL_62:
  __n128 result = *a2;
  __n128 *v4 = *a2;
  *(void *)(a1 + 16) += 16;
  return result;
}

uint64_t sub_8F7004(int64x2_t *a1, uint64_t a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * ((a1->i64[1] - a1->i64[0]) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL) {
    sub_2E00();
  }
  if (0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  }
  if (0x8E38E38E38E38E39 * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v6 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v6 = v4;
  }
  unint64_t v22 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x38E38E38E38E38ELL) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(72 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[72 * v3];
  long long __p = v7;
  v20.i64[0] = (uint64_t)v8;
  v20.i64[1] = (uint64_t)v8;
  long long v21 = &v7[72 * v6];
  *(_OWORD *)uint64_t v8 = *(_OWORD *)a2;
  *((_DWORD *)v8 + 4) = *(_DWORD *)(a2 + 16);
  *((void *)v8 + 4) = 0;
  *((void *)v8 + 5) = 0;
  *((void *)v8 + 3) = 0;
  sub_8E81F0((void *)v8 + 3, *(void *)(a2 + 24), *(void *)(a2 + 32), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 4));
  uint64_t v9 = &v7[72 * v3 + 48];
  if (*(char *)(a2 + 71) < 0)
  {
    sub_4200(v9, *(void **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    *(_OWORD *)uint64_t v9 = *(_OWORD *)(a2 + 48);
    *(void *)&v7[72 * v3 + 64] = *(void *)(a2 + 64);
  }
  uint64_t v10 = v20.i64[0];
  uint64_t v11 = v20.i64[1] + 72;
  v20.i64[1] += 72;
  uint64_t v13 = a1->i64[0];
  unint64_t v12 = a1->u64[1];
  if (v12 == a1->i64[0])
  {
    int64x2_t v16 = vdupq_n_s64(v12);
  }
  else
  {
    do
    {
      long long v14 = *(_OWORD *)(v12 - 72);
      *(_DWORD *)(v10 - 56) = *(_DWORD *)(v12 - 56);
      *(_OWORD *)(v10 - 72) = v14;
      *(void *)(v10 - 40) = 0;
      *(void *)(v10 - 32) = 0;
      *(void *)(v10 - 48) = 0;
      *(_OWORD *)(v10 - 48) = *(_OWORD *)(v12 - 48);
      *(void *)(v10 - 32) = *(void *)(v12 - 32);
      *(void *)(v12 - 48) = 0;
      *(void *)(v12 - 40) = 0;
      *(void *)(v12 - 32) = 0;
      long long v15 = *(_OWORD *)(v12 - 24);
      *(void *)(v10 - 8) = *(void *)(v12 - 8);
      *(_OWORD *)(v10 - 24) = v15;
      v10 -= 72;
      *(void *)(v12 - 16) = 0;
      *(void *)(v12 - 8) = 0;
      *(void *)(v12 - 24) = 0;
      v12 -= 72;
    }
    while (v12 != v13);
    int64x2_t v16 = *a1;
    uint64_t v11 = v20.i64[1];
  }
  a1->i64[0] = v10;
  a1->i64[1] = v11;
  int64x2_t v20 = v16;
  BOOL v17 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v21;
  long long v21 = v17;
  long long __p = (void *)v16.i64[0];
  sub_8F72A8((uint64_t)&__p, v16.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v11;
}

void sub_8F7230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (*v12)
  {
    sub_20AC11C(v11, v10, *v12, (void **)v12);
    sub_8F7270((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  sub_8F7270((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_8F7270(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_8F72A8(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 72;
    if (*(char *)(i - 1) < 0)
    {
      operator delete(*(void **)(i - 24));
      unint64_t v6 = *(void **)(i - 48);
      if (!v6) {
        continue;
      }
    }
    else
    {
      unint64_t v6 = *(void **)(i - 48);
      if (!v6) {
        continue;
      }
    }
    uint64_t v7 = *(void **)(i - 40);
    uint64_t v5 = v6;
    if (v7 != v6)
    {
      uint64_t v8 = (uint64_t)v7 - 56;
      while (1)
      {
        if (*(char *)(v8 + 55) < 0)
        {
          operator delete(*(void **)(v8 + 32));
          if ((*(char *)(v8 + 23) & 0x80000000) == 0)
          {
LABEL_16:
            if ((*(char *)(v8 - 9) & 0x80000000) == 0) {
              goto LABEL_17;
            }
            goto LABEL_23;
          }
        }
        else if ((*(char *)(v8 + 23) & 0x80000000) == 0)
        {
          goto LABEL_16;
        }
        operator delete(*(void **)v8);
        if ((*(char *)(v8 - 9) & 0x80000000) == 0)
        {
LABEL_17:
          int v11 = *(_DWORD *)(v8 - 48);
          if (v11 != 1) {
            goto LABEL_18;
          }
          goto LABEL_24;
        }
LABEL_23:
        operator delete(*(void **)(v8 - 32));
        int v11 = *(_DWORD *)(v8 - 48);
        if (v11 != 1)
        {
LABEL_18:
          if (v11 || (*(char *)(v8 - 49) & 0x80000000) == 0) {
            goto LABEL_13;
          }
          uint64_t v9 = *(void **)(v8 - 72);
          goto LABEL_12;
        }
LABEL_24:
        uint64_t v9 = *(void **)(v8 - 72);
        if (!v9) {
          goto LABEL_13;
        }
        *(void *)(v8 - 64) = v9;
LABEL_12:
        operator delete(v9);
LABEL_13:
        uint64_t v10 = (void *)(v8 - 88);
        v8 -= 144;
        if (v10 == v6)
        {
          uint64_t v5 = *(void **)(i - 48);
          break;
        }
      }
    }
    *(void *)(i - 40) = v6;
    operator delete(v5);
  }
}

char *sub_8F73D8()
{
  byte_25D0F3F = 1;
  word_25D0F28 = 65;
  byte_25D0F57 = 1;
  word_25D0F40 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25D1690 = 0u;
  *(_OWORD *)&qword_25D16A0 = 0u;
  dword_25D16B0 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25D1690, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25D1690, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25D1690, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25D1690, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25D0F6F = 8;
  strcpy((char *)&qword_25D0F58, "any_mode");
  byte_25D0F87 = 7;
  strcpy((char *)&dword_25D0F70, "cycling");
  byte_25D0F9F = 7;
  strcpy((char *)&dword_25D0F88, "driving");
  byte_25D0FB7 = 7;
  strcpy((char *)&dword_25D0FA0, "walking");
  qword_25D0FC0 = 0;
  qword_25D0FC8 = 0;
  qword_25D0FB8 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25D0FB8 = (uint64_t)v0;
  qword_25D0FC0 = (uint64_t)(v0 + 9);
  qword_25D0FC8 = (uint64_t)(v0 + 9);
  qword_25D0FD0 = 0;
  qword_25D0FD8 = 0;
  unk_25D0FE0 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25D0FD8 = (uint64_t)(v1 + 9);
  unk_25D0FE0 = v1 + 9;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25D0FD0 = (uint64_t)v1;
  byte_25D0FFF = 6;
  strcpy((char *)&dword_25D0FE8, "{Mode}");
  byte_25D1017 = 11;
  strcpy((char *)&qword_25D1000, "{Direction}");
  byte_25D102F = 6;
  strcpy((char *)&dword_25D1018, "{Line}");
  byte_25D1047 = 12;
  strcpy((char *)&qword_25D1030, "{LineNumber}");
  strcpy(&byte_25D105F, "\n{Headsign1}");
  strcpy((char *)&qword_25D1048, "{Headsign}");
  byte_25D1077 = 11;
  byte_25D108F = 11;
  strcpy((char *)&qword_25D1078, "{Headsign2}");
  byte_25D10A7 = 11;
  strcpy((char *)&qword_25D1090, "{Headsign3}");
  byte_25D10BF = 11;
  strcpy((char *)&qword_25D10A8, "{Headsign4}");
  byte_25D10D7 = 11;
  strcpy((char *)&qword_25D10C0, "{Headsign5}");
  byte_25D10EF = 6;
  strcpy((char *)&dword_25D10D8, "{Stop}");
  byte_25D1107 = 14;
  strcpy((char *)&qword_25D10F0, "{PreviousStop}");
  byte_25D111F = 8;
  strcpy((char *)&qword_25D1108, "{System}");
  byte_25D1137 = 15;
  strcpy((char *)&qword_25D1120, "{VehicleNumber}");
  byte_25D114F = 17;
  strcpy((char *)&xmmword_25D1138, "{AccessPointExit}");
  strcpy(&byte_25D1167, "\n{nextBoardStation}");
  strcpy((char *)&qword_25D1150, "{Platform}");
  byte_25D117F = 18;
  qword_25D1180 = 0;
  unk_25D1188 = 0;
  qword_25D1190 = 0;
  byte_25D11AF = 1;
  word_25D1198 = 32;
  qword_25D11B0 = (uint64_t)operator new(0x20uLL);
  unk_25D11B8 = xmmword_20B8890;
  strcpy((char *)qword_25D11B0, "LeaveStop_Loc_Comma_Separator");
  byte_25D11DF = 5;
  dword_25D11C8 = -1028144608;
  word_25D11CC = 160;
  byte_25D11F7 = 2;
  word_25D11E0 = -24382;
  byte_25D11E2 = 0;
  byte_25D120F = 4;
  dword_25D11F8 = 548913696;
  byte_25D11FC = 0;
  byte_25D1227 = 15;
  strcpy((char *)&qword_25D1210 + 7, "\xB7 {/s:s}");
  strcpy((char *)&qword_25D1210, "{s:s} ·");
  byte_25D123F = 6;
  strcpy((char *)&dword_25D1228, "NoType");
  byte_25D1257 = 14;
  strcpy((char *)&qword_25D1240, "{WalkDistance}");
  strcpy(&byte_25D126F, "\n{OneMinute}");
  strcpy((char *)&qword_25D1258, "{WalkTime}");
  byte_25D1287 = 11;
  byte_25D129F = 14;
  strcpy((char *)&qword_25D1288, "{StepDuration}");
  byte_25D12B7 = 15;
  strcpy((char *)&qword_25D12A0, "{TripFrequency}");
  byte_25D12CF = 11;
  strcpy((char *)&qword_25D12B8, "{BoardTime}");
  byte_25D12E7 = 12;
  strcpy((char *)&qword_25D12D0, "{AlightTime}");
  byte_25D12FF = 21;
  strcpy((char *)&xmmword_25D12E8, "{FutureTimestampList}");
  byte_25D1317 = 15;
  strcpy((char *)&qword_25D1300, "{DepartureTime}");
  byte_25D132F = 13;
  strcpy((char *)&qword_25D1318, "{ArrivalTime}");
  byte_25D1347 = 19;
  strcpy((char *)&xmmword_25D1330, "{TotalWalkDistance}");
  byte_25D135F = 14;
  strcpy((char *)&qword_25D1348, "{TripDuration}");
  byte_25D1377 = 11;
  strcpy((char *)&qword_25D1360, "{DayOfWeek}");
  byte_25D138F = 6;
  strcpy((char *)&dword_25D1378, "{Date}");
  byte_25D13A7 = 16;
  strcpy((char *)&xmmword_25D1390, "{OutTheDoorTime}");
  __n128 result = (char *)operator new(0x20uLL);
  qword_25D13A8 = (uint64_t)result;
  unk_25D13B0 = xmmword_20B91A0;
  strcpy(result, "{FirstVehicleDepartureTime}");
  byte_25D13D7 = 18;
  strcpy(byte_25D13C0, "{RouteArrivalTime}");
  strcpy(&byte_25D13EF, "\n{IC_Artwork}");
  strcpy((char *)&qword_25D13D8, "{BaseFare}");
  byte_25D1407 = 12;
  byte_25D141F = 11;
  strcpy((char *)&qword_25D1408, "{RT_Symbol}");
  byte_25D1437 = 12;
  strcpy((char *)&qword_25D1420, "{TotalPrice}");
  byte_25D144F = 13;
  strcpy((char *)&qword_25D1438, "{CheckInTime}");
  byte_25D1467 = 19;
  strcpy(byte_25D1450, "{LiveDepartureTime}");
  strcpy(&byte_25D147F, "\n{LegDuration}");
  strcpy((char *)&qword_25D1468, "{TimeList}");
  byte_25D1497 = 13;
  byte_25D14AF = 15;
  strcpy((char *)&qword_25D1498, "{CountdownList}");
  byte_25D14C7 = 3;
  dword_25D14B0 = 8217723;
  strcpy(&byte_25D14DF, "\t{AccessPointArt}");
  strcpy((char *)&qword_25D14C8, "{LineArt}");
  byte_25D14F7 = 16;
  byte_25D150F = 11;
  strcpy((char *)&qword_25D14F8, "{SystemArt}");
  strcpy(&byte_25D1527, "\n{ServiceBeginTime}");
  strcpy((char *)&qword_25D1510, "{CardName}");
  byte_25D153F = 18;
  byte_25D1557 = 16;
  strcpy((char *)&xmmword_25D1540, "{ServiceEndTime}");
  byte_25D156F = 6;
  strcpy((char *)&dword_25D1558, "OnTime");
  byte_25D1587 = 6;
  strcpy((char *)&dword_25D1570, "Delays");
  byte_25D159F = 1;
  word_25D1588 = 115;
  byte_25D15B7 = 2;
  strcpy((char *)&word_25D15A0, "cs");
  byte_25D15CF = 1;
  word_25D15B8 = 112;
  byte_25D15E7 = 5;
  strcpy((char *)&dword_25D15D0, "_Line");
  byte_25D15FF = 7;
  strcpy((char *)&dword_25D15E8, "_System");
  strcpy(&byte_25D1617, "\n_VehicleNumber");
  strcpy((char *)&qword_25D1600, "_Direction");
  byte_25D162F = 14;
  byte_25D1647 = 12;
  strcpy((char *)&qword_25D1630, "_To_Headsign");
  byte_25D165F = 16;
  strcpy((char *)&xmmword_25D1648, "_Toward_Headsign");
  strcpy(&byte_25D1677, "\t_LineNumber");
  strcpy((char *)&qword_25D1660, "_Headsign");
  byte_25D168F = 11;
  return result;
}

void sub_8F7FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25D16A0) {
    sub_20AC1A8((void **)qword_25D16A0);
  }
  uint64_t v37 = (void *)xmmword_25D1690;
  *(void *)&xmmword_25D1690 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_8F8060(uint64_t a1, void *a2)
{
  *(void *)long long __p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_20B9390;
  strcpy(*(char **)__p, "override_node_type_hall_with_hub");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(unsigned char *)a1 = v4;
  __p[23] = 14;
  strcpy(__p, "max_num_labels");
  unint64_t v5 = sub_5C9BC(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(void *)(a1 + 8) = v5;
  __p[23] = 11;
  strcpy(__p, "ttl_seconds");
  *(_DWORD *)(a1 + 16) = 10 * sub_319F48(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  return a1;
}

void sub_8F8198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_8F81BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = 0;
  int v14 = operator new(0x28uLL);
  long long v15 = xmmword_20B9280;
  strcpy((char *)v14, "TransitInfoSnippetComponentBuilder");
  long long __p = 0;
  unint64_t v12 = 0;
  unint64_t v6 = sub_374CDC(a2, (uint64_t)&v14, (uint64_t *)&__p);
  sub_8F8060(a1, v6);
  char v7 = (void **)__p;
  if (__p)
  {
    int v8 = v12;
    uint64_t v9 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      uint64_t v9 = __p;
    }
    unint64_t v12 = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(v14);
  }
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = a2;
  return a1;
}

void sub_8F82B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_8F82D8(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 8) = 0x27FFFFFFFLL;
  *(void *)a3 = &off_243B0A0;
  *(void *)(a3 + 16) = -1;
  uint64_t v6 = a3 + 16;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(void *)(a3 + 72) = -1;
  *(_DWORD *)(a3 + 80) = 0x7FFFFFFF;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_OWORD *)(a3 + 136) = 0u;
  *(void *)(a3 + 152) = 0;
  *(_DWORD *)(a3 + 160) = 0x7FFFFFFF;
  *(unsigned char *)(a3 + 164) = 0;
  sub_8ECABC(a2, (uint64_t)v35);
  if (!*(_DWORD *)(a2 + 376) && *(void *)(a2 + 24) != *(void *)(a2 + 32) && v36 != -1)
  {
    unint64_t v18 = *(void *)sub_8F86D8((void *)(a2 + 24), 0);
    uint64_t v19 = sub_375500(*((void **)a1 + 4));
    sub_90AB28(v18, a2, v19, *((void *)a1 + 3), v36 == 0, *a1, (uint64_t)v23);
    sub_8E5544(v6, (uint64_t)v23);
    if (v34 < 0) {
      operator delete(v33);
    }
    int64x2_t v20 = v30;
    if (v30)
    {
      uint64_t v21 = (uint64_t)v31;
      unint64_t v22 = v30;
      if (v31 != v30)
      {
        do
        {
          v21 -= 144;
          sub_8E48A4((uint64_t)&v32, v21);
        }
        while ((void *)v21 != v20);
        unint64_t v22 = v30;
      }
      unint64_t v31 = v20;
      operator delete(v22);
    }
    if (v28)
    {
      unint64_t v29 = v28;
      operator delete(v28);
    }
    if (v27 < 0) {
      operator delete(__p);
    }
    if (v25 < 0) {
      operator delete(v23[1]);
    }
  }
  unint64_t v7 = sub_8ECB30((_DWORD *)a2);
  unint64_t v8 = v7;
  if (v7 <= 0xFFFFFFFEFFFFFFFFLL && v7)
  {
    uint64_t v9 = sub_3755E4(*((void **)a1 + 4));
    char v10 = (int *)sub_369F8C(v9, v8, 0, "trip");
    sub_8FAE08(*(void *)((char *)v10 + *(unsigned __int16 *)((char *)v10 - *v10 + 6)), *((void *)a1 + 3), *((void **)a1 + 4), *((void *)a1 + 1), v23);
    uint64_t v11 = a3 + 112;
    uint64_t v12 = *(void *)(a3 + 112);
    if (!v12) {
      goto LABEL_13;
    }
    uint64_t v13 = *(void *)(a3 + 120);
    int v14 = *(void **)(a3 + 112);
    if (v13 == v12) {
      goto LABEL_12;
    }
    do
    {
      v13 -= 144;
      sub_8E48A4(a3 + 128, v13);
    }
    while (v13 != v12);
    goto LABEL_11;
  }
  sub_8FAF68((uint64_t)v35, *((void *)a1 + 3), *((void **)a1 + 4), *((void *)a1 + 1), (uint64_t)v23);
  uint64_t v11 = a3 + 112;
  uint64_t v12 = *(void *)(a3 + 112);
  if (!v12) {
    goto LABEL_13;
  }
  uint64_t v15 = *(void *)(a3 + 120);
  int v14 = *(void **)(a3 + 112);
  if (v15 != v12)
  {
    do
    {
      v15 -= 144;
      sub_8E48A4(a3 + 128, v15);
    }
    while (v15 != v12);
LABEL_11:
    int v14 = *(void **)v11;
  }
LABEL_12:
  *(void *)(a3 + 120) = v12;
  operator delete(v14);
  *(void *)uint64_t v11 = 0;
  *(void *)(v11 + 8) = 0;
  *(void *)(v11 + 16) = 0;
LABEL_13:
  *(_OWORD *)(a3 + 112) = *(_OWORD *)v23;
  *(void *)(a3 + 128) = v24;
  uint64_t v16 = sub_375500(*((void **)a1 + 4));
  sub_90C818(a2, v16, *((void *)a1 + 3), (uint64_t)v23);
  BOOL v17 = (void **)(a3 + 136);
  if (*(char *)(a3 + 159) < 0) {
    operator delete(*v17);
  }
  *(_OWORD *)BOOL v17 = *(_OWORD *)v23;
  *(void *)(a3 + 152) = v24;
  HIBYTE(v24) = 0;
  LOBYTE(v23[0]) = 0;
  if (v27 < 0)
  {
    operator delete(__p);
    if (SHIBYTE(v24) < 0) {
      operator delete(v23[0]);
    }
  }
  *(_DWORD *)(a3 + 8) = *((_DWORD *)a1 + 4);
}

void sub_8F8638(_Unwind_Exception *a1)
{
  sub_8E56D8(v1);
  _Unwind_Resume(a1);
}

void sub_8F864C(_Unwind_Exception *a1)
{
  sub_8E56D8(v1);
  _Unwind_Resume(a1);
}

void sub_8F8660(_Unwind_Exception *a1)
{
  sub_8E56D8(v1);
  _Unwind_Resume(a1);
}

void sub_8F8674(_Unwind_Exception *a1)
{
  sub_8E56D8(v1);
  _Unwind_Resume(a1);
}

void sub_8F8688(_Unwind_Exception *a1)
{
  sub_8E56D8(v1);
  _Unwind_Resume(a1);
}

void sub_8F869C(_Unwind_Exception *a1)
{
  sub_8E56D8(v1);
  _Unwind_Resume(a1);
}

void sub_8F86B0(_Unwind_Exception *a1)
{
  sub_8E56D8(v1);
  _Unwind_Resume(a1);
}

void sub_8F86C4(_Unwind_Exception *a1)
{
  sub_8E56D8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_8F86D8(void *a1, unint64_t a2)
{
  if (a2 >= (uint64_t)(a1[1] - *a1) >> 3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    uint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    unint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, (uint64_t)(a1[1] - *a1) >> 3);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v10 = &v15;
    }
    else {
      char v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    uint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    int v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 8 * a2;
}

void sub_8F8808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

double sub_8F88E8()
{
  byte_25D16CF = 1;
  word_25D16B8 = 65;
  byte_25D16E7 = 1;
  word_25D16D0 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25D1778 = 0u;
  *(_OWORD *)&qword_25D1788 = 0u;
  dword_25D1798 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25D1778, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25D1778, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25D1778, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25D1778, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25D16FF = 8;
  strcpy((char *)&qword_25D16E8, "any_mode");
  byte_25D1717 = 7;
  strcpy((char *)&dword_25D1700, "cycling");
  byte_25D172F = 7;
  strcpy((char *)&dword_25D1718, "driving");
  byte_25D1747 = 7;
  strcpy((char *)&dword_25D1730, "walking");
  qword_25D1750 = 0;
  qword_25D1758 = 0;
  qword_25D1748 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25D1748 = (uint64_t)v0;
  qword_25D1750 = (uint64_t)(v0 + 9);
  qword_25D1758 = (uint64_t)(v0 + 9);
  qword_25D1760 = 0;
  qword_25D1768 = 0;
  unk_25D1770 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25D1768 = (uint64_t)(v1 + 9);
  unk_25D1770 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25D1760 = (uint64_t)v1;
  return result;
}

void sub_8F8BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25D1788) {
    sub_20AC1EC((void **)qword_25D1788);
  }
  uint64_t v37 = (void *)xmmword_25D1778;
  *(void *)&xmmword_25D1778 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_8F8C50(unint64_t **a1@<X0>, unint64_t **a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, unint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v124 = sub_3757C8(a4);
  uint64_t v120 = sub_375500(a4);
  uint64_t v122 = a3;
  uint64_t v123 = sub_3755E4(a4);
  char v13 = *a2;
  uint64_t v12 = a2[1];
  *(_OWORD *)v132 = 0u;
  long long v133 = 0u;
  int v134 = 1065353216;
  unsigned int v126 = 0;
  unint64_t v127 = 0;
  uint64_t v125 = 0;
  if (v13 == v12)
  {
    uint64_t v37 = 0;
    int v36 = 0;
    goto LABEL_112;
  }
  uint64_t v14 = a3 + 968;
  unint64_t v119 = a5;
  do
  {
    unint64_t v15 = *v13;
    nullsub_1(&v128);
    std::string v16 = (int *)sub_8EF9B8(v124, v15, 0, "system");
    std::string v17 = (unsigned __int16 *)((char *)v16 - *v16);
    if (*v17 >= 7u && (uint64_t v18 = v17[3]) != 0) {
      long long v19 = (char **)((char *)v16 + v18 + *(unsigned int *)((char *)v16 + v18));
    }
    else {
      long long v19 = 0;
    }
    sub_8F48DC(v19, (void (*)(void **__return_ptr, char *))sub_4A0694, (uint64_t)&__str);
    sub_997050((uint64_t *)&__str, v14, &v129);
    std::string::size_type v20 = __str.__r_.__value_.__r.__words[0];
    if (__str.__r_.__value_.__r.__words[0])
    {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
      unint64_t v22 = (void *)__str.__r_.__value_.__r.__words[0];
      if (__str.__r_.__value_.__l.__size_ != __str.__r_.__value_.__r.__words[0])
      {
        uint64_t v23 = v14;
        uint64_t v24 = v12;
        do
        {
          uint64_t v25 = *(void *)(size - 24);
          if (v25)
          {
            uint64_t v26 = *(void *)(size - 16);
            char v27 = *(void **)(size - 24);
            if (v26 != v25)
            {
              do
              {
                if (*(char *)(v26 - 1) < 0) {
                  operator delete(*(void **)(v26 - 24));
                }
                v26 -= 32;
              }
              while (v26 != v25);
              char v27 = *(void **)(size - 24);
            }
            *(void *)(size - 16) = v25;
            operator delete(v27);
          }
          unint64_t v28 = (void **)(size - 64);
          if (*(char *)(size - 41) < 0) {
            operator delete(*v28);
          }
          size -= 64;
        }
        while (v28 != (void **)v20);
        unint64_t v22 = (void *)__str.__r_.__value_.__r.__words[0];
        uint64_t v12 = v24;
        uint64_t v14 = v23;
      }
      __str.__r_.__value_.__l.__size_ = v20;
      operator delete(v22);
    }
    sub_9950E4((uint64_t *)&v129, (char *)&__str);
    *(_DWORD *)v141 = -1;
    *(_DWORD *)&v141[3] = -1;
    *(void *)&v141[15] = 0;
    uint64_t v142 = 0;
    *(void *)&v141[7] = 0;
    __int16 v143 = 0;
    memset(&v144, 0, sizeof(v144));
    char v145 = 0;
    memset(&v146, 0, sizeof(v146));
    int v140 = -1;
    LODWORD(v135) = 1;
    std::string::operator=(&v146, &__str);
    if (v151.__r_.__value_.__s.__data_[7] < 0)
    {
      operator delete(v149);
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_27;
      }
LABEL_30:
      operator delete(__str.__r_.__value_.__l.__data_);
      unint64_t v29 = (char *)v129;
      if (!v129) {
        goto LABEL_40;
      }
LABEL_31:
      BOOL v30 = v130;
      unint64_t v31 = v29;
      if (v130 == v29)
      {
LABEL_39:
        unint64_t v130 = v29;
        operator delete(v31);
        goto LABEL_40;
      }
      while (1)
      {
        if (*(v30 - 1) < 0)
        {
          operator delete(*((void **)v30 - 3));
          if ((*(v30 - 33) & 0x80000000) == 0) {
            goto LABEL_34;
          }
LABEL_37:
          operator delete(*((void **)v30 - 7));
          v30 -= 56;
          if (v30 == v29)
          {
LABEL_38:
            unint64_t v31 = v129;
            goto LABEL_39;
          }
        }
        else
        {
          if (*(v30 - 33) < 0) {
            goto LABEL_37;
          }
LABEL_34:
          v30 -= 56;
          if (v30 == v29) {
            goto LABEL_38;
          }
        }
      }
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_30;
    }
LABEL_27:
    unint64_t v29 = (char *)v129;
    if (v129) {
      goto LABEL_31;
    }
LABEL_40:
    if (sub_8FBF44(v132, (uint64_t)&v135))
    {
      if ((SHIBYTE(v146.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_42;
      }
    }
    else
    {
      sub_8FCA54((uint64_t)v132, (uint64_t)&v135, (uint64_t)&v135);
      char v34 = v126;
      if ((unint64_t)v126 >= v127)
      {
        int v35 = (char *)sub_8FD014(&v125, (uint64_t)&v135);
      }
      else
      {
        sub_8E839C(v126, (uint64_t)&v135);
        int v35 = v34 + 144;
      }
      unsigned int v126 = v35;
      if ((SHIBYTE(v146.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_42:
        if ((SHIBYTE(v144.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_43;
        }
        goto LABEL_53;
      }
    }
    operator delete(v146.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v144.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_43:
      if (((char)v143 & 0x80000000) == 0) {
        goto LABEL_44;
      }
LABEL_54:
      operator delete(*(void **)&v141[8]);
      int v32 = v140;
      if (v140 != 1) {
        goto LABEL_45;
      }
      goto LABEL_55;
    }
LABEL_53:
    operator delete(v144.__r_.__value_.__l.__data_);
    if ((char)v143 < 0) {
      goto LABEL_54;
    }
LABEL_44:
    int v32 = v140;
    if (v140 != 1)
    {
LABEL_45:
      if (!v32 && v139 < 0)
      {
        uint64_t v33 = __p;
LABEL_3:
        operator delete(v33);
        goto LABEL_4;
      }
      goto LABEL_4;
    }
LABEL_55:
    uint64_t v33 = __p;
    if (__p)
    {
      v138 = __p;
      goto LABEL_3;
    }
LABEL_4:
    ++v13;
  }
  while (v13 != v12);
  int v36 = v125;
  uint64_t v37 = v126;
  if (v125 == v126)
  {
    uint64_t v37 = (char *)v125;
    a5 = v119;
    goto LABEL_112;
  }
  uint64_t v38 = 0;
  a5 = v119;
  while (1)
  {
    int v39 = *(_DWORD *)((char *)v125 + v38);
    if (v39 == 4) {
      goto LABEL_59;
    }
    if (v39 != 3) {
      break;
    }
    unint64_t v41 = (char *)v125 + v38;
    int v42 = *(_DWORD *)((char *)v125 + v38 + 40);
    if (v42 == 1)
    {
      long long v44 = v41 + 8;
      int v43 = *((_DWORD *)v41 + 2);
      BOOL v45 = *((_DWORD *)v44 + 1) == -1 && v43 == -1;
      if (v45 && *(void *)((char *)v125 + v38 + 16) == *(void *)((char *)v125 + v38 + 24)) {
        goto LABEL_77;
      }
    }
    else if (v42 || *((_DWORD *)v41 + 2) == -1)
    {
      goto LABEL_77;
    }
LABEL_59:
    v38 += 144;
    if ((char *)v125 + v38 == v126) {
      goto LABEL_112;
    }
  }
  if (v39 == 1)
  {
    uint64_t v40 = *(void *)((char *)v125 + v38 + 128);
    if (*((char *)v125 + v38 + 143) >= 0) {
      uint64_t v40 = *((unsigned __int8 *)v125 + v38 + 143);
    }
    if (v40) {
      goto LABEL_59;
    }
  }
LABEL_77:
  uint64_t v46 = (char *)v125 + v38;
  if ((char *)v125 + v38 == v126 || v46 + 144 == v126) {
    goto LABEL_108;
  }
  long long v47 = v46 + 287;
  while (2)
  {
    int v50 = *(_DWORD *)(v47 - 143);
    switch(v50)
    {
      case 4:
        goto LABEL_99;
      case 3:
        int v52 = *(_DWORD *)(v47 - 103);
        if (v52 == 1)
        {
          BOOL v53 = *(_DWORD *)(v47 - 131) == -1 && *(_DWORD *)(v47 - 135) == -1;
          if (v53 && *(void *)(v47 - 127) == *(void *)(v47 - 119)) {
            break;
          }
        }
        else if (v52 || *(_DWORD *)(v47 - 135) == -1)
        {
          break;
        }
        goto LABEL_99;
      case 1:
        uint64_t v51 = *v47;
        if ((v51 & 0x80u) != 0) {
          uint64_t v51 = *(void *)(v47 - 15);
        }
        if (v51)
        {
LABEL_99:
          *(_DWORD *)uint64_t v46 = v50;
          sub_4F377C((uint64_t)(v46 + 8), (uint64_t)(v47 - 135));
          *((void *)v46 + 6) = *(void *)(v47 - 95);
          unint64_t v54 = (void **)(v46 + 56);
          if (v46[79] < 0) {
            operator delete(*v54);
          }
          long long v55 = *(_OWORD *)(v47 - 87);
          *((void *)v46 + 9) = *(void *)(v47 - 71);
          *(_OWORD *)unint64_t v54 = v55;
          *(v47 - 64) = 0;
          *(v47 - 87) = 0;
          v46[80] = *(v47 - 63);
          std::string v56 = (void **)(v46 + 88);
          if (v46[111] < 0) {
            operator delete(*v56);
          }
          long long v57 = *(_OWORD *)(v47 - 55);
          *((void *)v46 + 13) = *(void *)(v47 - 39);
          *(_OWORD *)std::string v56 = v57;
          *(v47 - 32) = 0;
          *(v47 - 55) = 0;
          v46[112] = *(v47 - 31);
          BOOL v58 = (void **)(v46 + 120);
          if (v46[143] < 0) {
            operator delete(*v58);
          }
          long long v48 = *(_OWORD *)(v47 - 23);
          *((void *)v46 + 17) = *(void *)(v47 - 7);
          *(_OWORD *)BOOL v58 = v48;
          *long long v47 = 0;
          *(v47 - 23) = 0;
          v46 += 144;
        }
        break;
    }
    float64x2x2_t v49 = v47 + 1;
    v47 += 144;
    if (v49 != v37) {
      continue;
    }
    break;
  }
  int v36 = v125;
  uint64_t v37 = v126;
LABEL_108:
  if (v46 != v37)
  {
    sub_8FD2A8((uint64_t)&v135, (uint64_t)v37, (uint64_t)v37, (uint64_t)v46);
    uint64_t v37 = v59;
    for (uint64_t i = v126; i != v37; sub_8E48A4((uint64_t)&v127, (uint64_t)i))
      i -= 144;
    unsigned int v126 = v37;
    int v36 = v125;
  }
LABEL_112:
  if (0x8E38E38E38E38E39 * ((v37 - v36) >> 4) > a5)
  {
    uint64_t v61 = v37 - 144;
    uint64_t v62 = v37 - 144;
    do
    {
      sub_8E48A4((uint64_t)&v127, (uint64_t)v61);
      unsigned int v126 = v61;
      unint64_t v63 = 0x8E38E38E38E38E39 * ((v62 - (unsigned char *)v125) >> 4);
      v62 -= 144;
      v61 -= 144;
    }
    while (v63 > a5);
  }
  char v64 = (void *)v133;
  if ((void)v133)
  {
    do
    {
      uint64_t v65 = (void *)*v64;
      sub_8FCF48((uint64_t)(v64 + 2));
      operator delete(v64);
      char v64 = v65;
    }
    while (v65);
  }
  long long v66 = v132[0];
  v132[0] = 0;
  if (v66) {
    operator delete(v66);
  }
  long long v67 = v125;
  long long v68 = v126;
  unint64_t v69 = 0x8E38E38E38E38E39 * ((v126 - (unsigned char *)v125) >> 4);
  if (v69 > 1)
  {
LABEL_120:
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    sub_8E81F0(a6, (uint64_t)v67, (uint64_t)v68, v69);
    goto LABEL_230;
  }
  uint64_t v70 = *a1;
  unint64_t v71 = a1[1];
  if (*a1 == v71)
  {
    *(_OWORD *)v132 = 0u;
    long long v133 = 0u;
    int v134 = 1065353216;
    unint64_t v130 = 0;
    unint64_t v131 = 0;
    uint64_t v129 = 0;
    goto LABEL_217;
  }
  do
  {
    sub_8FBB94(v123, *v70, (uint64_t)&v135);
    if (v135 == v136)
    {
      if (v135)
      {
        v136 = v135;
        operator delete(v135);
      }
    }
    else
    {
      int v72 = *v135;
      v136 = v135;
      operator delete(v135);
      if (v72 == 4)
      {
        long long v67 = v125;
        long long v68 = v126;
        unint64_t v69 = 0x8E38E38E38E38E39 * ((v126 - (unsigned char *)v125) >> 4);
        goto LABEL_120;
      }
    }
    ++v70;
  }
  while (v70 != v71);
  uint64_t v74 = *a1;
  uint64_t v73 = a1[1];
  *(_OWORD *)v132 = 0u;
  long long v133 = 0u;
  int v134 = 1065353216;
  unint64_t v130 = 0;
  unint64_t v131 = 0;
  uint64_t v129 = 0;
  unsigned int v121 = v73;
  if (v74 == v73) {
    goto LABEL_217;
  }
  while (2)
  {
    unint64_t v76 = *v74;
    sub_9679AC(v124, v120, v123, *v74, v122, (uint64_t)&__str);
    *(_DWORD *)v141 = -1;
    *(_DWORD *)&v141[3] = -1;
    uint64_t v142 = 0;
    *(_OWORD *)&v141[7] = 0uLL;
    __int16 v143 = 0;
    memset(&v144, 0, sizeof(v144));
    char v145 = 0;
    memset(&v146, 0, sizeof(v146));
    int v140 = -1;
    LODWORD(v135) = 3;
    sub_4F39B8((uint64_t)&v136, &__str);
    *(void *)v141 = v150;
    std::string::operator=((std::string *)&v141[8], &v151);
    HIBYTE(v143) = v152;
    std::string::operator=(&v144, &v153);
    char v145 = v154;
    if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v153.__r_.__value_.__l.__data_);
      if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_141;
      }
LABEL_136:
      int v77 = (int)v149;
      if (v149 != 1) {
        goto LABEL_137;
      }
LABEL_142:
      unint64_t v78 = (void *)__str.__r_.__value_.__l.__size_;
      if (__str.__r_.__value_.__l.__size_)
      {
        __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
LABEL_144:
        operator delete(v78);
      }
    }
    else
    {
      if ((SHIBYTE(v151.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_136;
      }
LABEL_141:
      operator delete(v151.__r_.__value_.__l.__data_);
      int v77 = (int)v149;
      if (v149 == 1) {
        goto LABEL_142;
      }
LABEL_137:
      if (!v77 && v148 < 0)
      {
        unint64_t v78 = (void *)__str.__r_.__value_.__l.__size_;
        goto LABEL_144;
      }
    }
    sub_97BE48(v76, v124, v123, v122, &__str);
    if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v144.__r_.__value_.__l.__data_);
    }
    std::string v144 = __str;
    if (sub_8FBF44(v132, (uint64_t)&v135))
    {
      if ((SHIBYTE(v146.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_149;
      }
LABEL_157:
      operator delete(v146.__r_.__value_.__l.__data_);
      if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_158;
      }
LABEL_150:
      if (((char)v143 & 0x80000000) == 0) {
        goto LABEL_151;
      }
LABEL_159:
      operator delete(*(void **)&v141[8]);
      int v79 = v140;
      if (v140 != 1) {
        goto LABEL_160;
      }
LABEL_130:
      uint64_t v75 = __p;
      if (__p)
      {
        v138 = __p;
        goto LABEL_132;
      }
    }
    else
    {
      sub_8FCA54((uint64_t)v132, (uint64_t)&v135, (uint64_t)&v135);
      uint64_t v80 = v130;
      if ((unint64_t)v130 >= v131)
      {
        uint64_t v81 = (char *)sub_8FD014(&v129, (uint64_t)&v135);
      }
      else
      {
        sub_8E839C(v130, (uint64_t)&v135);
        uint64_t v81 = v80 + 144;
      }
      unint64_t v130 = v81;
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_157;
      }
LABEL_149:
      if ((SHIBYTE(v144.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_150;
      }
LABEL_158:
      operator delete(v144.__r_.__value_.__l.__data_);
      if ((char)v143 < 0) {
        goto LABEL_159;
      }
LABEL_151:
      int v79 = v140;
      if (v140 == 1) {
        goto LABEL_130;
      }
LABEL_160:
      if (!v79 && v139 < 0)
      {
        uint64_t v75 = __p;
LABEL_132:
        operator delete(v75);
      }
    }
    if (++v74 != v121) {
      continue;
    }
    break;
  }
  uint64_t v82 = v130;
  if (v129 == v130) {
    goto LABEL_217;
  }
  uint64_t v83 = 0;
  while (2)
  {
    int v84 = *(_DWORD *)((char *)v129 + v83);
    switch(v84)
    {
      case 4:
        goto LABEL_166;
      case 3:
        uint64_t v86 = (char *)v129 + v83;
        int v87 = *(_DWORD *)((char *)v129 + v83 + 40);
        if (v87 == 1)
        {
          uint64_t v89 = v86 + 8;
          int v88 = *((_DWORD *)v86 + 2);
          BOOL v90 = *((_DWORD *)v89 + 1) == -1 && v88 == -1;
          if (v90 && *(void *)((char *)v129 + v83 + 16) == *(void *)((char *)v129 + v83 + 24)) {
            break;
          }
        }
        else if (v87 || *((_DWORD *)v86 + 2) == -1)
        {
          break;
        }
        goto LABEL_166;
      case 1:
        uint64_t v85 = *(void *)((char *)v129 + v83 + 128);
        if (*((char *)v129 + v83 + 143) >= 0) {
          uint64_t v85 = *((unsigned __int8 *)v129 + v83 + 143);
        }
        if (v85)
        {
LABEL_166:
          v83 += 144;
          if ((char *)v129 + v83 == v130) {
            goto LABEL_217;
          }
          continue;
        }
        break;
    }
    break;
  }
  unsigned int v91 = (char *)v129 + v83;
  if ((char *)v129 + v83 == v130 || v91 + 144 == v130) {
    goto LABEL_213;
  }
  uint64_t v92 = v91 + 287;
  while (2)
  {
    int v95 = *(_DWORD *)(v92 - 143);
    switch(v95)
    {
      case 4:
        goto LABEL_206;
      case 3:
        int v97 = *(_DWORD *)(v92 - 103);
        if (v97 == 1)
        {
          BOOL v98 = *(_DWORD *)(v92 - 131) == -1 && *(_DWORD *)(v92 - 135) == -1;
          if (v98 && *(void *)(v92 - 127) == *(void *)(v92 - 119)) {
            break;
          }
        }
        else if (v97 || *(_DWORD *)(v92 - 135) == -1)
        {
          break;
        }
        goto LABEL_206;
      case 1:
        uint64_t v96 = *v92;
        if ((v96 & 0x80u) != 0) {
          uint64_t v96 = *(void *)(v92 - 15);
        }
        if (v96)
        {
LABEL_206:
          *(_DWORD *)unsigned int v91 = v95;
          sub_4F377C((uint64_t)(v91 + 8), (uint64_t)(v92 - 135));
          *((void *)v91 + 6) = *(void *)(v92 - 95);
          uint64_t v99 = (void **)(v91 + 56);
          if (v91[79] < 0) {
            operator delete(*v99);
          }
          long long v100 = *(_OWORD *)(v92 - 87);
          *((void *)v91 + 9) = *(void *)(v92 - 71);
          *(_OWORD *)uint64_t v99 = v100;
          *(v92 - 64) = 0;
          *(v92 - 87) = 0;
          v91[80] = *(v92 - 63);
          unint64_t v101 = (void **)(v91 + 88);
          if (v91[111] < 0) {
            operator delete(*v101);
          }
          long long v102 = *(_OWORD *)(v92 - 55);
          *((void *)v91 + 13) = *(void *)(v92 - 39);
          *(_OWORD *)unint64_t v101 = v102;
          *(v92 - 32) = 0;
          *(v92 - 55) = 0;
          v91[112] = *(v92 - 31);
          uint64_t v103 = (void **)(v91 + 120);
          if (v91[143] < 0) {
            operator delete(*v103);
          }
          long long v93 = *(_OWORD *)(v92 - 23);
          *((void *)v91 + 17) = *(void *)(v92 - 7);
          *(_OWORD *)uint64_t v103 = v93;
          *uint64_t v92 = 0;
          *(v92 - 23) = 0;
          v91 += 144;
        }
        break;
    }
    uint64_t v94 = v92 + 1;
    v92 += 144;
    if (v94 != v82) {
      continue;
    }
    break;
  }
  uint64_t v82 = v130;
LABEL_213:
  if (v91 != v82)
  {
    sub_8FD2A8((uint64_t)&v135, (uint64_t)v82, (uint64_t)v82, (uint64_t)v91);
    unint64_t v105 = v104;
    for (j = v130; j != v105; sub_8E48A4((uint64_t)&v131, (uint64_t)j))
      j -= 144;
    unint64_t v130 = v105;
  }
LABEL_217:
  __n128 v107 = (void *)v133;
  if ((void)v133)
  {
    do
    {
      uint64_t v108 = (void *)*v107;
      sub_8FCF48((uint64_t)(v107 + 2));
      operator delete(v107);
      __n128 v107 = v108;
    }
    while (v108);
  }
  int v109 = v132[0];
  v132[0] = 0;
  if (v109) {
    operator delete(v109);
  }
  unint64_t v110 = v129;
  BOOL v111 = v130;
  if (v129 == v130 || (unint64_t v112 = 0x8E38E38E38E38E39 * ((v130 - (unsigned char *)v129) >> 4), v112 > a5))
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    unint64_t v110 = v125;
    BOOL v111 = v126;
    unint64_t v112 = 0x8E38E38E38E38E39 * ((v126 - (unsigned char *)v125) >> 4);
  }
  else
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
  }
  sub_8E81F0(a6, (uint64_t)v110, (uint64_t)v111, v112);
  int v113 = (char *)v129;
  if (v129)
  {
    unint64_t v114 = v130;
    int v115 = v129;
    if (v130 != v129)
    {
      do
      {
        v114 -= 144;
        sub_8E48A4((uint64_t)&v131, (uint64_t)v114);
      }
      while (v114 != v113);
      int v115 = v129;
    }
    unint64_t v130 = v113;
    operator delete(v115);
  }
LABEL_230:
  int v116 = (char *)v125;
  if (v125)
  {
    int v117 = v126;
    int v118 = v125;
    if (v126 != v125)
    {
      do
      {
        v117 -= 144;
        sub_8E48A4((uint64_t)&v127, (uint64_t)v117);
      }
      while (v117 != v116);
      int v118 = v125;
    }
    unsigned int v126 = v116;
    operator delete(v118);
  }
}

void sub_8F9A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va2, a10);
  va_start(va1, a10);
  va_start(va, a10);
  int v11 = va_arg(va1, void *);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  va_copy(va2, va1);
  std::string v16 = va_arg(va2, void *);
  uint64_t v18 = va_arg(va2, void);
  uint64_t v19 = va_arg(va2, void);
  sub_8E4838((void **)va1);
  sub_8FBEE4((uint64_t)va2);
  sub_8E4838((void **)va);
  _Unwind_Resume(a1);
}

void sub_8F9AE8()
{
}

void sub_8F9B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_8FAB78((uint64_t)&a31);
  sub_4A0638(v31 - 208);
  sub_8E4FE0(&a22);
  sub_8E4838(&a18);
  sub_8FBEE4((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_8F9B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v12 = va_arg(va1, void *);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  sub_8F36A0((void ***)(v10 - 208));
  sub_8E4838((void **)va);
  sub_8FBEE4((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_8F9B8C(unint64_t **a1@<X0>, unint64_t **a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, unint64_t a5@<X4>, void **a6@<X8>)
{
  uint64_t v12 = sub_3757C8(a4);
  uint64_t v125 = sub_375500(a4);
  uint64_t v126 = sub_3755E4(a4);
  uint64_t v13 = *a2;
  uint64_t v14 = a2[1];
  memset(v147, 0, sizeof(v147));
  int v148 = 1065353216;
  v132 = 0;
  unint64_t v133 = 0;
  unint64_t v131 = 0;
  if (v13 == v14)
  {
    std::string::size_type v20 = 0;
    uint64_t v19 = 0;
    goto LABEL_78;
  }
  do
  {
    sub_8FAC38(*v13, v12, a3, (uint64_t)&v137);
    if (sub_8FBF44(v147, (uint64_t)&v137))
    {
      if ((SHIBYTE(v146) & 0x80000000) == 0) {
        goto LABEL_9;
      }
    }
    else
    {
      sub_8FCA54((uint64_t)v147, (uint64_t)&v137, (uint64_t)&v137);
      uint64_t v17 = v132;
      if ((unint64_t)v132 >= v133)
      {
        uint64_t v18 = (char *)sub_8FD014(&v131, (uint64_t)&v137);
      }
      else
      {
        sub_8E839C(v132, (uint64_t)&v137);
        uint64_t v18 = v17 + 144;
      }
      v132 = v18;
      if ((SHIBYTE(v146) & 0x80000000) == 0)
      {
LABEL_9:
        if ((SHIBYTE(v143.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_10;
        }
        goto LABEL_18;
      }
    }
    operator delete((void *)v145);
    if ((SHIBYTE(v143.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_10:
      if ((SHIBYTE(v142[3]) & 0x80000000) == 0) {
        goto LABEL_11;
      }
      goto LABEL_19;
    }
LABEL_18:
    operator delete(v143.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v142[3]) & 0x80000000) == 0)
    {
LABEL_11:
      int v16 = v141;
      if (v141 == 1) {
        goto LABEL_3;
      }
      goto LABEL_20;
    }
LABEL_19:
    operator delete((void *)v142[1]);
    int v16 = v141;
    if (v141 == 1)
    {
LABEL_3:
      uint64_t v15 = (void *)__p;
      if (!(void)__p) {
        goto LABEL_6;
      }
      *((void *)&__p + 1) = __p;
      goto LABEL_5;
    }
LABEL_20:
    if (!v16 && SHIBYTE(v140) < 0)
    {
      uint64_t v15 = (void *)__p;
LABEL_5:
      operator delete(v15);
    }
LABEL_6:
    ++v13;
  }
  while (v13 != v14);
  uint64_t v19 = v131;
  std::string::size_type v20 = v132;
  if (v131 == v132)
  {
    std::string::size_type v20 = (char *)v131;
    goto LABEL_78;
  }
  uint64_t v21 = 0;
  while (2)
  {
    int v22 = *(_DWORD *)((char *)v131 + v21);
    switch(v22)
    {
      case 4:
        goto LABEL_25;
      case 3:
        uint64_t v24 = (char *)v131 + v21;
        int v25 = *(_DWORD *)((char *)v131 + v21 + 40);
        if (v25 == 1)
        {
          char v27 = v24 + 8;
          int v26 = *((_DWORD *)v24 + 2);
          BOOL v28 = *((_DWORD *)v27 + 1) == -1 && v26 == -1;
          if (v28 && *(void *)((char *)v131 + v21 + 16) == *(void *)((char *)v131 + v21 + 24)) {
            break;
          }
        }
        else if (v25 || *((_DWORD *)v24 + 2) == -1)
        {
          break;
        }
        goto LABEL_25;
      case 1:
        uint64_t v23 = *(void *)((char *)v131 + v21 + 128);
        if (*((char *)v131 + v21 + 143) >= 0) {
          uint64_t v23 = *((unsigned __int8 *)v131 + v21 + 143);
        }
        if (v23)
        {
LABEL_25:
          v21 += 144;
          if ((char *)v131 + v21 == v132) {
            goto LABEL_78;
          }
          continue;
        }
        break;
    }
    break;
  }
  unint64_t v29 = (char *)v131 + v21;
  if ((char *)v131 + v21 == v132 || v29 + 144 == v132) {
    goto LABEL_74;
  }
  BOOL v30 = v29 + 287;
  while (2)
  {
    int v33 = *(_DWORD *)(v30 - 143);
    switch(v33)
    {
      case 4:
        goto LABEL_65;
      case 3:
        int v35 = *(_DWORD *)(v30 - 103);
        if (v35 == 1)
        {
          BOOL v36 = *(_DWORD *)(v30 - 131) == -1 && *(_DWORD *)(v30 - 135) == -1;
          if (v36 && *(void *)(v30 - 127) == *(void *)(v30 - 119)) {
            break;
          }
        }
        else if (v35 || *(_DWORD *)(v30 - 135) == -1)
        {
          break;
        }
        goto LABEL_65;
      case 1:
        uint64_t v34 = *v30;
        if ((v34 & 0x80u) != 0) {
          uint64_t v34 = *(void *)(v30 - 15);
        }
        if (v34)
        {
LABEL_65:
          *(_DWORD *)unint64_t v29 = v33;
          sub_4F377C((uint64_t)(v29 + 8), (uint64_t)(v30 - 135));
          *((void *)v29 + 6) = *(void *)(v30 - 95);
          uint64_t v37 = (void **)(v29 + 56);
          if (v29[79] < 0) {
            operator delete(*v37);
          }
          long long v38 = *(_OWORD *)(v30 - 87);
          *((void *)v29 + 9) = *(void *)(v30 - 71);
          *(_OWORD *)uint64_t v37 = v38;
          *(v30 - 64) = 0;
          *(v30 - 87) = 0;
          v29[80] = *(v30 - 63);
          int v39 = (void **)(v29 + 88);
          if (v29[111] < 0) {
            operator delete(*v39);
          }
          long long v40 = *(_OWORD *)(v30 - 55);
          *((void *)v29 + 13) = *(void *)(v30 - 39);
          *(_OWORD *)int v39 = v40;
          *(v30 - 32) = 0;
          *(v30 - 55) = 0;
          v29[112] = *(v30 - 31);
          unint64_t v41 = (void **)(v29 + 120);
          if (v29[143] < 0) {
            operator delete(*v41);
          }
          long long v31 = *(_OWORD *)(v30 - 23);
          *((void *)v29 + 17) = *(void *)(v30 - 7);
          *(_OWORD *)unint64_t v41 = v31;
          *BOOL v30 = 0;
          *(v30 - 23) = 0;
          v29 += 144;
        }
        break;
    }
    int v32 = v30 + 1;
    v30 += 144;
    if (v32 != v20) {
      continue;
    }
    break;
  }
  uint64_t v19 = v131;
  std::string::size_type v20 = v132;
LABEL_74:
  if (v29 != v20)
  {
    sub_8FD2A8((uint64_t)&v137, (uint64_t)v20, (uint64_t)v20, (uint64_t)v29);
    std::string::size_type v20 = v42;
    for (uint64_t i = v132; i != v20; sub_8E48A4((uint64_t)&v133, (uint64_t)i))
      i -= 144;
    v132 = v20;
    uint64_t v19 = v131;
  }
LABEL_78:
  if (0x8E38E38E38E38E39 * ((v20 - v19) >> 4) > a5)
  {
    long long v44 = v20 - 144;
    BOOL v45 = v44;
    do
    {
      sub_8E48A4((uint64_t)&v133, (uint64_t)v44);
      v132 = v44;
      unint64_t v46 = 0x8E38E38E38E38E39 * ((v45 - (unsigned char *)v131) >> 4);
      v45 -= 144;
      v44 -= 144;
    }
    while (v46 > a5);
  }
  long long v47 = *(void **)&v147[16];
  if (*(void *)&v147[16])
  {
    do
    {
      long long v48 = (void *)*v47;
      sub_8FCF48((uint64_t)(v47 + 2));
      operator delete(v47);
      long long v47 = v48;
    }
    while (v48);
  }
  float64x2x2_t v49 = *(void **)v147;
  *(void *)v147 = 0;
  if (v49) {
    operator delete(v49);
  }
  int v50 = v131;
  uint64_t v51 = v132;
  unint64_t v52 = 0x8E38E38E38E38E39 * ((v132 - (unsigned char *)v131) >> 4);
  if (v52 >= 2)
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    sub_8E81F0(a6, (uint64_t)v50, (uint64_t)v51, v52);
    goto LABEL_210;
  }
  unint64_t v54 = *a1;
  BOOL v53 = a1[1];
  *(_OWORD *)int v134 = 0u;
  long long v135 = 0u;
  int v136 = 1065353216;
  uint64_t v129 = 0;
  unint64_t v130 = 0;
  unint64_t v127 = v53;
  char v128 = 0;
  if (v54 == v53) {
    goto LABEL_181;
  }
  unint64_t v123 = a5;
  uint64_t v124 = a6;
  uint64_t v55 = v126;
  while (2)
  {
    unint64_t v56 = *v54;
    sub_8FBB94(v55, *v54, (uint64_t)v147);
    if (*(void *)v147 == *(void *)&v147[8])
    {
      if (*(void *)v147)
      {
        *(void *)&v147[8] = *(void *)v147;
        operator delete(*(void **)v147);
      }
LABEL_97:
      sub_9679AC(v12, v125, v55, v56, a3, (uint64_t)v147);
      LODWORD(v142[0]) = -1;
      *(_DWORD *)((char *)v142 + 3) = -1;
      memset((char *)v142 + 7, 0, 26);
      memset(&v143, 0, sizeof(v143));
      char v144 = 0;
      uint64_t v146 = 0;
      long long v145 = 0uLL;
      int v141 = -1;
      LODWORD(v137) = 3;
      sub_4F39B8((uint64_t)&v138, (std::string *)v147);
      v142[0] = v149;
      std::string::operator=((std::string *)&v142[1], &v150);
      LOBYTE(v142[4]) = v151;
      std::string::operator=(&v143, &v152);
      char v144 = v153;
      if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v152.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v150.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_99:
          int v59 = v148;
          if (v148 != 1) {
            goto LABEL_100;
          }
          goto LABEL_105;
        }
      }
      else if ((SHIBYTE(v150.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_99;
      }
      operator delete(v150.__r_.__value_.__l.__data_);
      int v59 = v148;
      if (v148 != 1)
      {
LABEL_100:
        if (v59 || (v147[31] & 0x80000000) == 0) {
          goto LABEL_108;
        }
        BOOL v60 = *(void **)&v147[8];
        goto LABEL_107;
      }
LABEL_105:
      BOOL v60 = *(void **)&v147[8];
      if (!*(void *)&v147[8])
      {
LABEL_108:
        sub_97BE48(v56, v12, v55, a3, (std::string *)v147);
        if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v143.__r_.__value_.__l.__data_);
        }
        std::string v143 = *(std::string *)v147;
        goto LABEL_111;
      }
      *(void *)&v147[16] = *(void *)&v147[8];
LABEL_107:
      operator delete(v60);
      goto LABEL_108;
    }
    int v57 = **(unsigned char **)v147;
    *(void *)&v147[8] = *(void *)v147;
    operator delete(*(void **)v147);
    BOOL v28 = v57 == 4;
    uint64_t v55 = v126;
    if (!v28) {
      goto LABEL_97;
    }
    BOOL v58 = (int *)sub_8DFD1C(v126, v56, 0, "line");
    sub_8FAC38(*(void *)((char *)v58 + *(unsigned __int16 *)((char *)v58 - *v58 + 6)), v12, a3, (uint64_t)&v137);
LABEL_111:
    if (sub_8FBF44(v134, (uint64_t)&v137))
    {
      if ((SHIBYTE(v146) & 0x80000000) == 0) {
        goto LABEL_113;
      }
LABEL_123:
      operator delete((void *)v145);
      if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_124;
      }
LABEL_114:
      if ((SHIBYTE(v142[3]) & 0x80000000) == 0) {
        goto LABEL_115;
      }
LABEL_125:
      operator delete((void *)v142[1]);
      int v61 = v141;
      if (v141 == 1) {
        goto LABEL_126;
      }
LABEL_116:
      if (!v61 && SHIBYTE(v140) < 0)
      {
        uint64_t v62 = (void *)__p;
        goto LABEL_89;
      }
    }
    else
    {
      sub_8FCA54((uint64_t)v134, (uint64_t)&v137, (uint64_t)&v137);
      unint64_t v63 = v129;
      if ((unint64_t)v129 >= v130)
      {
        char v64 = (char *)sub_8FD014(&v128, (uint64_t)&v137);
      }
      else
      {
        sub_8E839C(v129, (uint64_t)&v137);
        char v64 = v63 + 144;
      }
      uint64_t v129 = v64;
      if (SHIBYTE(v146) < 0) {
        goto LABEL_123;
      }
LABEL_113:
      if ((SHIBYTE(v143.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_114;
      }
LABEL_124:
      operator delete(v143.__r_.__value_.__l.__data_);
      if (SHIBYTE(v142[3]) < 0) {
        goto LABEL_125;
      }
LABEL_115:
      int v61 = v141;
      if (v141 != 1) {
        goto LABEL_116;
      }
LABEL_126:
      uint64_t v62 = (void *)__p;
      if ((void)__p)
      {
        *((void *)&__p + 1) = __p;
LABEL_89:
        operator delete(v62);
      }
    }
    if (++v54 != v127) {
      continue;
    }
    break;
  }
  uint64_t v65 = v129;
  a5 = v123;
  a6 = v124;
  if (v128 == v129) {
    goto LABEL_181;
  }
  uint64_t v66 = 0;
  while (2)
  {
    int v67 = *(_DWORD *)((char *)v128 + v66);
    switch(v67)
    {
      case 4:
        goto LABEL_130;
      case 3:
        unint64_t v69 = (char *)v128 + v66;
        int v70 = *(_DWORD *)((char *)v128 + v66 + 40);
        if (v70 == 1)
        {
          int v72 = v69 + 8;
          int v71 = *((_DWORD *)v69 + 2);
          BOOL v73 = *((_DWORD *)v72 + 1) == -1 && v71 == -1;
          if (v73 && *(void *)((char *)v128 + v66 + 16) == *(void *)((char *)v128 + v66 + 24)) {
            break;
          }
        }
        else if (v70 || *((_DWORD *)v69 + 2) == -1)
        {
          break;
        }
        goto LABEL_130;
      case 1:
        uint64_t v68 = *(void *)((char *)v128 + v66 + 128);
        if (*((char *)v128 + v66 + 143) >= 0) {
          uint64_t v68 = *((unsigned __int8 *)v128 + v66 + 143);
        }
        if (v68)
        {
LABEL_130:
          v66 += 144;
          if ((char *)v128 + v66 == v129) {
            goto LABEL_181;
          }
          continue;
        }
        break;
    }
    break;
  }
  uint64_t v74 = (char *)v128 + v66;
  if ((char *)v128 + v66 == v129 || v74 + 144 == v129) {
    goto LABEL_177;
  }
  uint64_t v75 = v74 + 287;
  while (2)
  {
    int v78 = *(_DWORD *)(v75 - 143);
    switch(v78)
    {
      case 4:
        goto LABEL_170;
      case 3:
        int v80 = *(_DWORD *)(v75 - 103);
        if (v80 == 1)
        {
          BOOL v81 = *(_DWORD *)(v75 - 131) == -1 && *(_DWORD *)(v75 - 135) == -1;
          if (v81 && *(void *)(v75 - 127) == *(void *)(v75 - 119)) {
            break;
          }
        }
        else if (v80 || *(_DWORD *)(v75 - 135) == -1)
        {
          break;
        }
        goto LABEL_170;
      case 1:
        uint64_t v79 = *v75;
        if ((v79 & 0x80u) != 0) {
          uint64_t v79 = *(void *)(v75 - 15);
        }
        if (v79)
        {
LABEL_170:
          *(_DWORD *)uint64_t v74 = v78;
          sub_4F377C((uint64_t)(v74 + 8), (uint64_t)(v75 - 135));
          *((void *)v74 + 6) = *(void *)(v75 - 95);
          uint64_t v82 = (void **)(v74 + 56);
          if (v74[79] < 0) {
            operator delete(*v82);
          }
          long long v83 = *(_OWORD *)(v75 - 87);
          *((void *)v74 + 9) = *(void *)(v75 - 71);
          *(_OWORD *)uint64_t v82 = v83;
          *(v75 - 64) = 0;
          *(v75 - 87) = 0;
          v74[80] = *(v75 - 63);
          int v84 = (void **)(v74 + 88);
          if (v74[111] < 0) {
            operator delete(*v84);
          }
          long long v85 = *(_OWORD *)(v75 - 55);
          *((void *)v74 + 13) = *(void *)(v75 - 39);
          *(_OWORD *)int v84 = v85;
          *(v75 - 32) = 0;
          *(v75 - 55) = 0;
          v74[112] = *(v75 - 31);
          uint64_t v86 = (void **)(v74 + 120);
          if (v74[143] < 0) {
            operator delete(*v86);
          }
          long long v76 = *(_OWORD *)(v75 - 23);
          *((void *)v74 + 17) = *(void *)(v75 - 7);
          *(_OWORD *)uint64_t v86 = v76;
          *uint64_t v75 = 0;
          *(v75 - 23) = 0;
          v74 += 144;
        }
        break;
    }
    int v77 = v75 + 1;
    v75 += 144;
    if (v77 != v65) {
      continue;
    }
    break;
  }
  uint64_t v65 = v129;
LABEL_177:
  if (v74 != v65)
  {
    sub_8FD2A8((uint64_t)&v137, (uint64_t)v65, (uint64_t)v65, (uint64_t)v74);
    int v88 = v87;
    for (j = v129; j != v88; sub_8E48A4((uint64_t)&v130, (uint64_t)j))
      j -= 144;
    uint64_t v129 = v88;
  }
LABEL_181:
  BOOL v90 = (void *)v135;
  if ((void)v135)
  {
    do
    {
      unsigned int v91 = (void *)*v90;
      sub_8FCF48((uint64_t)(v90 + 2));
      operator delete(v90);
      BOOL v90 = v91;
    }
    while (v91);
  }
  uint64_t v92 = v134[0];
  v134[0] = 0;
  if (v92) {
    operator delete(v92);
  }
  long long v93 = v128;
  uint64_t v94 = v129;
  if (v128 == v129)
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    int v95 = v131;
    uint64_t v96 = v132;
    goto LABEL_196;
  }
  int v95 = v131;
  uint64_t v96 = v132;
  unint64_t v97 = 0x8E38E38E38E38E39 * ((v129 - (unsigned char *)v128) >> 4);
  if (v131 == v132)
  {
    if (v97 > a5)
    {
      unint64_t v101 = 0;
      uint64_t v96 = (char *)v131;
      goto LABEL_202;
    }
    *a6 = 0;
    a6[1] = 0;
    int v95 = v93;
    uint64_t v96 = v94;
LABEL_203:
    a6[2] = 0;
    goto LABEL_204;
  }
  if (v97 > a5 || (BOOL v98 = *a1, v99 = a1[1], *a1 == v99))
  {
LABEL_201:
    unint64_t v101 = 0x8E38E38E38E38E39 * ((v96 - v95) >> 4);
    if (v101 + v97 + 1 > a5)
    {
LABEL_202:
      *a6 = 0;
      a6[1] = 0;
      unint64_t v97 = v101;
      goto LABEL_203;
    }
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    sub_8E81F0(a6, (uint64_t)v95, (uint64_t)v96, 0x8E38E38E38E38E39 * ((v96 - v95) >> 4));
    LODWORD(v142[0]) = -1;
    *(_DWORD *)((char *)v142 + 3) = -1;
    memset((char *)v142 + 7, 0, 26);
    memset(&v143, 0, sizeof(v143));
    char v144 = 0;
    uint64_t v146 = 0;
    long long v145 = 0uLL;
    int v141 = -1;
    LODWORD(v137) = 4;
    uint64_t v108 = (char *)a6[1];
    if (v108 >= a6[2])
    {
      BOOL v111 = sub_8FD3E0(a6, (uint64_t)&v137);
      int v112 = SHIBYTE(v146);
      a6[1] = v111;
      if (v112 < 0)
      {
        operator delete((void *)v145);
        if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_236;
        }
      }
      else if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_236;
      }
    }
    else
    {
      *(_DWORD *)uint64_t v108 = 4;
      *((_DWORD *)v108 + 10) = -1;
      if (v141 == 1)
      {
        int v115 = v138;
        *((void *)v108 + 2) = 0;
        *((void *)v108 + 1) = v115;
        *((void *)v108 + 3) = 0;
        *((void *)v108 + 4) = 0;
        int v116 = (const void *)__p;
        int64_t v117 = *((void *)&__p + 1) - __p;
        if (*((void *)&__p + 1) != (void)__p)
        {
          if (v117 < 0) {
            sub_2E00();
          }
          int v118 = (char *)operator new(*((void *)&__p + 1) - __p);
          *((void *)v108 + 2) = v118;
          *((void *)v108 + 3) = v118;
          unint64_t v119 = &v118[8 * (v117 >> 3)];
          *((void *)v108 + 4) = v119;
          memcpy(v118, v116, v117);
          *((void *)v108 + 3) = v119;
        }
      }
      else if (!v141)
      {
        *((void *)v108 + 1) = v138;
        int v109 = v108 + 16;
        if (SHIBYTE(v140) < 0)
        {
          sub_4200(v109, (void *)__p, *((unint64_t *)&__p + 1));
        }
        else
        {
          long long v110 = __p;
          *((void *)v108 + 4) = v140;
          *(_OWORD *)int v109 = v110;
        }
      }
      *((void *)v108 + 6) = v142[0];
      long long v120 = *(_OWORD *)&v142[1];
      *((void *)v108 + 9) = v142[3];
      *(_OWORD *)(v108 + 56) = v120;
      memset(&v142[1], 0, 24);
      v108[80] = v142[4];
      long long v121 = *(_OWORD *)&v143.__r_.__value_.__l.__data_;
      *((void *)v108 + 13) = *((void *)&v143.__r_.__value_.__l + 2);
      *(_OWORD *)(v108 + 88) = v121;
      memset(&v143, 0, sizeof(v143));
      v108[112] = v144;
      long long v122 = v145;
      *((void *)v108 + 17) = v146;
      *(_OWORD *)(v108 + 120) = v122;
      uint64_t v146 = 0;
      long long v145 = 0uLL;
      a6[1] = v108 + 144;
      if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_236:
        operator delete(v143.__r_.__value_.__l.__data_);
        if (SHIBYTE(v142[3]) < 0)
        {
LABEL_237:
          operator delete((void *)v142[1]);
          int v113 = v141;
          if (v141 == 1)
          {
LABEL_238:
            unint64_t v114 = (void *)__p;
            if ((void)__p)
            {
              *((void *)&__p + 1) = __p;
LABEL_240:
              operator delete(v114);
            }
            goto LABEL_241;
          }
LABEL_225:
          if (!v113 && SHIBYTE(v140) < 0)
          {
            unint64_t v114 = (void *)__p;
            goto LABEL_240;
          }
LABEL_241:
          sub_8FD660((uint64_t *)a6, a6[1], (uint64_t)v128, (uint64_t)v129, 0x8E38E38E38E38E39 * ((v129 - (unsigned char *)v128) >> 4));
          goto LABEL_205;
        }
LABEL_224:
        int v113 = v141;
        if (v141 == 1) {
          goto LABEL_238;
        }
        goto LABEL_225;
      }
    }
    if (SHIBYTE(v142[3]) < 0) {
      goto LABEL_237;
    }
    goto LABEL_224;
  }
  while (2)
  {
    sub_8FBB94(v126, *v98, (uint64_t)&v137);
    if (v137 == v138)
    {
      if (v137)
      {
        v138 = v137;
        operator delete(v137);
      }
LABEL_191:
      if (++v98 == v99)
      {
        int v95 = v131;
        uint64_t v96 = v132;
        unint64_t v97 = 0x8E38E38E38E38E39 * ((v129 - (unsigned char *)v128) >> 4);
        goto LABEL_201;
      }
      continue;
    }
    break;
  }
  int v100 = *v137;
  v138 = v137;
  operator delete(v137);
  if (v100 != 4) {
    goto LABEL_191;
  }
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  int v95 = v128;
  uint64_t v96 = v129;
LABEL_196:
  unint64_t v97 = 0x8E38E38E38E38E39 * ((v96 - v95) >> 4);
LABEL_204:
  sub_8E81F0(a6, (uint64_t)v95, (uint64_t)v96, v97);
LABEL_205:
  long long v102 = (char *)v128;
  if (v128)
  {
    uint64_t v103 = v129;
    uint64_t v104 = v128;
    if (v129 != v128)
    {
      do
      {
        v103 -= 144;
        sub_8E48A4((uint64_t)&v130, (uint64_t)v103);
      }
      while (v103 != v102);
      uint64_t v104 = v128;
    }
    uint64_t v129 = v102;
    operator delete(v104);
  }
LABEL_210:
  unint64_t v105 = (char *)v131;
  if (v131)
  {
    unint64_t v106 = v132;
    __n128 v107 = v131;
    if (v132 != v131)
    {
      do
      {
        v106 -= 144;
        sub_8E48A4((uint64_t)&v133, (uint64_t)v106);
      }
      while (v106 != v105);
      __n128 v107 = v131;
    }
    v132 = v105;
    operator delete(v107);
  }
}

void sub_8FAA50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_8FAB78(uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0)
  {
    operator delete(*(void **)(a1 + 120));
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 79) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 88));
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
LABEL_4:
    int v2 = *(_DWORD *)(a1 + 40);
    if (v2 != 1) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*(void **)(a1 + 56));
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2 != 1)
  {
LABEL_5:
    if (v2 || (*(char *)(a1 + 39) & 0x80000000) == 0) {
      return a1;
    }
    operator delete(*(void **)(a1 + 16));
    return a1;
  }
LABEL_11:
  char v4 = *(void **)(a1 + 16);
  if (!v4) {
    return a1;
  }
  *(void *)(a1 + 24) = v4;
  operator delete(v4);
  return a1;
}

double sub_8FAC38@<D0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_96724C(a2, a1, (uint64_t)&__str);
  *(_DWORD *)(a4 + 40) = -1;
  *(_DWORD *)(a4 + 48) = -1;
  *(_DWORD *)(a4 + 51) = -1;
  *(void *)(a4 + 88) = 0;
  int v8 = (void **)(a4 + 88);
  *(void *)(a4 + 55) = 0;
  *(void *)(a4 + 71) = 0;
  *(void *)(a4 + 63) = 0;
  *(_WORD *)(a4 + 79) = 0;
  *(void *)(a4 + 96) = 0;
  *(void *)(a4 + 104) = 0;
  *(unsigned char *)(a4 + 112) = 0;
  *(void *)(a4 + 128) = 0;
  *(void *)(a4 + 136) = 0;
  *(void *)(a4 + 120) = 0;
  *(_DWORD *)a4 = 3;
  sub_4F39B8(a4 + 8, &__str);
  *(void *)(a4 + 48) = v15;
  std::string::operator=((std::string *)(a4 + 56), &v16);
  *(unsigned char *)(a4 + 80) = v17;
  std::string::operator=((std::string *)(a4 + 88), &__p);
  *(unsigned char *)(a4 + 112) = v19;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_8:
    operator delete(v16.__r_.__value_.__l.__data_);
    int v9 = v14;
    if (v14 != 1) {
      goto LABEL_4;
    }
LABEL_9:
    std::string::size_type size = (void *)__str.__r_.__value_.__l.__size_;
    if (!__str.__r_.__value_.__l.__size_) {
      goto LABEL_12;
    }
    __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
    goto LABEL_11;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_8;
  }
LABEL_3:
  int v9 = v14;
  if (v14 == 1) {
    goto LABEL_9;
  }
LABEL_4:
  if (!v9 && v13 < 0)
  {
    std::string::size_type size = (void *)__str.__r_.__value_.__l.__size_;
LABEL_11:
    operator delete(size);
  }
LABEL_12:
  sub_97C458(a1, a2, a3, (uint64_t)&__str);
  if (*(char *)(a4 + 111) < 0) {
    operator delete(*v8);
  }
  double result = *(double *)&__str.__r_.__value_.__l.__data_;
  *(_OWORD *)int v8 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
  *(void *)(a4 + 104) = *((void *)&__str.__r_.__value_.__l + 2);
  return result;
}

void sub_8FADD4(_Unwind_Exception *a1)
{
  sub_8FAB78(v1);
  _Unwind_Resume(a1);
}

void sub_8FADEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_8FAB78(v2);
  sub_4D9814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_8FAE08(unint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unint64_t a4@<X3>, void **a5@<X8>)
{
  uint64_t v10 = (unint64_t *)operator new(8uLL);
  unint64_t *v10 = a1;
  v16[1] = v10 + 1;
  void v16[2] = v10 + 1;
  v16[0] = v10;
  uint64_t v11 = sub_3755E4(a3);
  uint64_t v12 = (int *)sub_8DFD1C(v11, a1, 0, "line");
  unint64_t v13 = *(void *)((char *)v12 + *(unsigned __int16 *)((char *)v12 - *v12 + 6));
  int v14 = (unint64_t *)operator new(8uLL);
  *int v14 = v13;
  v15[1] = v14 + 1;
  void v15[2] = v14 + 1;
  v15[0] = v14;
  if (*(unsigned char *)(a2 + 1425) == 1) {
    sub_8F8C50(v16, v15, a2, a3, a4, a5);
  }
  else {
    sub_8F9B8C(v16, v15, a2, a3, a4, a5);
  }
  operator delete(v14);

  operator delete(v10);
}

void sub_8FAF24(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_8FAF40(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_8FAF54(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_8FAF68(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v52[0] = 0;
  v52[1] = 0;
  uint64_t v53 = 0;
  v50[0] = 0;
  v50[1] = 0;
  uint64_t v51 = 0;
  switch(*(_DWORD *)(a1 + 8))
  {
    case 0xFFFFFFFF:
      uint64_t v10 = 0;
      *(void *)a5 = 0;
      *(void *)(a5 + 8) = 0;
      *(void *)(a5 + 16) = 0;
      goto LABEL_21;
    case 0:
      unint64_t v33 = *(void *)a1;
      uint64_t v34 = sub_375500(a3);
      uint64_t v35 = sub_3755E4(a3);
      sub_8FB4D4(v33, v34, v35, a2, (int8x16_t **)__p);
      int v36 = *(_DWORD *)(a1 + 8);
      *(_OWORD *)unint64_t v52 = *(_OWORD *)__p;
      uint64_t v53 = v49;
      if (v36)
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      unint64_t v37 = *(void *)a1;
      uint64_t v38 = sub_3757C8(a3);
      uint64_t v39 = sub_375500(a3);
      sub_8FB5F4(v37, v38, v39, a2, (int8x16_t **)__p);
      goto LABEL_16;
    case 1:
      unint64_t v19 = *(void *)a1;
      uint64_t v20 = sub_375500(a3);
      uint64_t v21 = sub_3755E4(a3);
      sub_8FB714(v19, v20, v21, a2, (int8x16_t **)__p);
      int v22 = *(_DWORD *)(a1 + 8);
      *(_OWORD *)unint64_t v52 = *(_OWORD *)__p;
      uint64_t v53 = v49;
      if (v22 != 1)
      {
        int v43 = __cxa_allocate_exception(8uLL);
        *int v43 = &off_23FDF58;
      }
      unint64_t v23 = *(void *)a1;
      uint64_t v24 = sub_3757C8(a3);
      uint64_t v25 = sub_375500(a3);
      sub_8FB834(v23, v24, v25, a2, (int8x16_t **)__p);
      goto LABEL_16;
    case 2:
      unint64_t v26 = *(void *)a1;
      uint64_t v27 = sub_375500(a3);
      uint64_t v28 = sub_3755E4(a3);
      sub_8FB954(v26, v27, v28, a2, (int8x16_t **)__p);
      int v29 = *(_DWORD *)(a1 + 8);
      *(_OWORD *)unint64_t v52 = *(_OWORD *)__p;
      uint64_t v53 = v49;
      if (v29 != 2)
      {
        long long v44 = __cxa_allocate_exception(8uLL);
        *long long v44 = &off_23FDF58;
      }
      unint64_t v30 = *(void *)a1;
      uint64_t v31 = sub_3757C8(a3);
      uint64_t v32 = sub_375500(a3);
      sub_8FBA74(v30, v31, v32, a2, (int8x16_t **)__p);
LABEL_16:
      *(_OWORD *)int v50 = *(_OWORD *)__p;
      uint64_t v51 = v49;
      if (*(unsigned char *)(a2 + 1425) != 1) {
        goto LABEL_17;
      }
      goto LABEL_9;
    case 3:
      uint64_t v11 = sub_375500(a3);
      if (*(_DWORD *)(a1 + 8) != 3)
      {
        int v42 = __cxa_allocate_exception(8uLL);
        *int v42 = &off_23FDF58;
      }
      sub_8ED2E4(v11, (unint64_t *)a1, (uint64_t)__p);
      uint64_t v12 = __p[0];
      if (__p[0] != __p[1])
      {
        unint64_t v13 = *(void *)__p[0];
        uint64_t v14 = sub_375500(a3);
        uint64_t v15 = sub_3755E4(a3);
        sub_8FB954(v13, v14, v15, a2, (int8x16_t **)&v46);
        *(_OWORD *)unint64_t v52 = v46;
        uint64_t v53 = v47;
        unint64_t v16 = *(void *)__p[0];
        uint64_t v17 = sub_3757C8(a3);
        uint64_t v18 = sub_375500(a3);
        sub_8FBA74(v16, v17, v18, a2, (int8x16_t **)&v46);
        uint64_t v12 = __p[0];
        *(_OWORD *)int v50 = v46;
        uint64_t v51 = v47;
      }
      if (v12)
      {
        __p[1] = v12;
        operator delete(v12);
      }
      goto LABEL_8;
    case 4:
      sub_8FAE08(*(void *)a1, a2, a3, a4, (void **)a5);
      uint64_t v10 = 0;
      goto LABEL_21;
    case 5:
      uint64_t v40 = sub_3755E4(a3);
      unint64_t v41 = (int *)sub_369F8C(v40, *(void *)a1, 0, "trip");
      sub_8FAE08(*(void *)((char *)v41 + *(unsigned __int16 *)((char *)v41 - *v41 + 6)), a2, a3, a4, (void **)a5);
      goto LABEL_20;
    default:
LABEL_8:
      if (*(unsigned char *)(a2 + 1425) == 1) {
LABEL_9:
      }
        sub_8F8C50((unint64_t **)v52, (unint64_t **)v50, a2, a3, a4, (void *)a5);
      else {
LABEL_17:
      }
        sub_8F9B8C((unint64_t **)v52, (unint64_t **)v50, a2, a3, a4, (void **)a5);
LABEL_20:
      uint64_t v10 = v50[0];
LABEL_21:
      if (v10) {
        operator delete(v10);
      }
      if (v52[0]) {
        operator delete(v52[0]);
      }
      return;
  }
}

void sub_8FB434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t *sub_8FB4D4@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int8x16_t **a5@<X8>)
{
  unint64_t v19 = a1;
  sub_8FDD7C(a2, a1, (uint64_t)a5);
  int v9 = (unint64_t *)*a5;
  uint64_t v10 = (unint64_t *)a5[1];
  if (*a5 == (int8x16_t *)v10)
  {
    sub_8F33D4(a2, &v19, (uint64_t)&v17);
    uint64_t v11 = (unint64_t *)*a5;
    if (*a5)
    {
      a5[1] = (int8x16_t *)v11;
      operator delete(v11);
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
    }
    uint64_t v12 = v17;
    unint64_t v13 = (int8x16_t *)v18;
    *(_OWORD *)(a5 + 1) = v18;
    unint64_t v14 = 126 - 2 * __clz(((char *)v13 - (char *)v12) >> 3);
    *a5 = v12;
    if (v13 == v12) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = v14;
    }
    sub_8FDE68(v12, v13, (uint64_t)&v17, v15, 1);
    int v9 = (unint64_t *)*a5;
    uint64_t v10 = (unint64_t *)a5[1];
  }
  double result = sub_8FEA80(v9, v10, a4, a3);
  if (a5[1] != (int8x16_t *)result) {
    a5[1] = (int8x16_t *)result;
  }
  return result;
}

void sub_8FB5D0(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t *sub_8FB5F4@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int8x16_t **a5@<X8>)
{
  unint64_t v19 = a1;
  sub_8FEBDC(a3, a1, (uint64_t)a5);
  int v9 = (unint64_t *)*a5;
  uint64_t v10 = (unint64_t *)a5[1];
  if (*a5 == (int8x16_t *)v10)
  {
    sub_8FECC8(a3, &v19, (uint64_t)&v17);
    uint64_t v11 = (unint64_t *)*a5;
    if (*a5)
    {
      a5[1] = (int8x16_t *)v11;
      operator delete(v11);
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
    }
    uint64_t v12 = v17;
    unint64_t v13 = (int8x16_t *)v18;
    *(_OWORD *)(a5 + 1) = v18;
    unint64_t v14 = 126 - 2 * __clz(((char *)v13 - (char *)v12) >> 3);
    *a5 = v12;
    if (v13 == v12) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = v14;
    }
    sub_8EEDA0(v12, v13, (uint64_t)&v17, v15, 1);
    int v9 = (unint64_t *)*a5;
    uint64_t v10 = (unint64_t *)a5[1];
  }
  double result = sub_8FEDB8(v9, v10, a4, a2);
  if (a5[1] != (int8x16_t *)result) {
    a5[1] = (int8x16_t *)result;
  }
  return result;
}

void sub_8FB6F0(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t *sub_8FB714@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int8x16_t **a5@<X8>)
{
  unint64_t v19 = a1;
  sub_8FF1F0(a2, a1, (uint64_t)a5);
  int v9 = (unint64_t *)*a5;
  uint64_t v10 = (unint64_t *)a5[1];
  if (*a5 == (int8x16_t *)v10)
  {
    sub_8FF2DC(a2, &v19, (uint64_t)&v17);
    uint64_t v11 = (unint64_t *)*a5;
    if (*a5)
    {
      a5[1] = (int8x16_t *)v11;
      operator delete(v11);
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
    }
    uint64_t v12 = v17;
    unint64_t v13 = (int8x16_t *)v18;
    *(_OWORD *)(a5 + 1) = v18;
    unint64_t v14 = 126 - 2 * __clz(((char *)v13 - (char *)v12) >> 3);
    *a5 = v12;
    if (v13 == v12) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = v14;
    }
    sub_8FDE68(v12, v13, (uint64_t)&v17, v15, 1);
    int v9 = (unint64_t *)*a5;
    uint64_t v10 = (unint64_t *)a5[1];
  }
  double result = sub_8FEA80(v9, v10, a4, a3);
  if (a5[1] != (int8x16_t *)result) {
    a5[1] = (int8x16_t *)result;
  }
  return result;
}

void sub_8FB810(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t *sub_8FB834@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int8x16_t **a5@<X8>)
{
  unint64_t v19 = a1;
  sub_8FF3CC(a3, a1, (uint64_t)a5);
  int v9 = (unint64_t *)*a5;
  uint64_t v10 = (unint64_t *)a5[1];
  if (*a5 == (int8x16_t *)v10)
  {
    sub_8FF4B8(a3, &v19, (uint64_t)&v17);
    uint64_t v11 = (unint64_t *)*a5;
    if (*a5)
    {
      a5[1] = (int8x16_t *)v11;
      operator delete(v11);
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
    }
    uint64_t v12 = v17;
    unint64_t v13 = (int8x16_t *)v18;
    *(_OWORD *)(a5 + 1) = v18;
    unint64_t v14 = 126 - 2 * __clz(((char *)v13 - (char *)v12) >> 3);
    *a5 = v12;
    if (v13 == v12) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = v14;
    }
    sub_8EEDA0(v12, v13, (uint64_t)&v17, v15, 1);
    int v9 = (unint64_t *)*a5;
    uint64_t v10 = (unint64_t *)a5[1];
  }
  double result = sub_8FEDB8(v9, v10, a4, a2);
  if (a5[1] != (int8x16_t *)result) {
    a5[1] = (int8x16_t *)result;
  }
  return result;
}

void sub_8FB930(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t *sub_8FB954@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int8x16_t **a5@<X8>)
{
  unint64_t v19 = a1;
  sub_8FF5A8(a2, a1, (uint64_t)a5);
  int v9 = (unint64_t *)*a5;
  uint64_t v10 = (unint64_t *)a5[1];
  if (*a5 == (int8x16_t *)v10)
  {
    sub_8F32E4(a2, &v19, (uint64_t)&v17);
    uint64_t v11 = (unint64_t *)*a5;
    if (*a5)
    {
      a5[1] = (int8x16_t *)v11;
      operator delete(v11);
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
    }
    uint64_t v12 = v17;
    unint64_t v13 = (int8x16_t *)v18;
    *(_OWORD *)(a5 + 1) = v18;
    unint64_t v14 = 126 - 2 * __clz(((char *)v13 - (char *)v12) >> 3);
    *a5 = v12;
    if (v13 == v12) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = v14;
    }
    sub_8FDE68(v12, v13, (uint64_t)&v17, v15, 1);
    int v9 = (unint64_t *)*a5;
    uint64_t v10 = (unint64_t *)a5[1];
  }
  double result = sub_8FEA80(v9, v10, a4, a3);
  if (a5[1] != (int8x16_t *)result) {
    a5[1] = (int8x16_t *)result;
  }
  return result;
}

void sub_8FBA50(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t *sub_8FBA74@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int8x16_t **a5@<X8>)
{
  unint64_t v19 = a1;
  sub_8FF694(a3, &v19, (uint64_t)a5);
  int v9 = (unint64_t *)*a5;
  uint64_t v10 = (unint64_t *)a5[1];
  if (*a5 == (int8x16_t *)v10)
  {
    sub_8FF784(a3, &v19, (uint64_t)&v17);
    uint64_t v11 = (unint64_t *)*a5;
    if (*a5)
    {
      a5[1] = (int8x16_t *)v11;
      operator delete(v11);
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
    }
    uint64_t v12 = v17;
    unint64_t v13 = (int8x16_t *)v18;
    *(_OWORD *)(a5 + 1) = v18;
    unint64_t v14 = 126 - 2 * __clz(((char *)v13 - (char *)v12) >> 3);
    *a5 = v12;
    if (v13 == v12) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = v14;
    }
    sub_8EEDA0(v12, v13, (uint64_t)&v17, v15, 1);
    int v9 = (unint64_t *)*a5;
    uint64_t v10 = (unint64_t *)a5[1];
  }
  double result = sub_8FEDB8(v9, v10, a4, a2);
  if (a5[1] != (int8x16_t *)result) {
    a5[1] = (int8x16_t *)result;
  }
  return result;
}

void sub_8FBB70(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int *sub_8FBB94@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result = (int *)sub_8DFD1C(a1, a2, 0, "line");
  int v5 = (unsigned __int16 *)((char *)result - *result);
  if (*v5 >= 0x45u
    && (uint64_t v6 = v5[34]) != 0
    && (char v7 = (unsigned int *)((char *)result + v6),
        uint64_t v8 = *v7,
        int v9 = (char *)v7 + v8,
        uint64_t v10 = *(unsigned int *)((char *)v7 + v8),
        v10))
  {
    uint64_t v11 = (char *)operator new(*(unsigned int *)((char *)v7 + v8));
    *(void *)&long long v15 = v11;
    *((void *)&v15 + 1) = v11;
    unint64_t v16 = &v11[v10];
    uint64_t v12 = v9 + 4;
    do
    {
      char v17 = *v12;
      double result = (int *)sub_8FBC7C((uint64_t)&v15, v11, &v17);
      uint64_t v11 = (char *)result + 1;
      ++v12;
      --v10;
    }
    while (v10);
    long long v13 = v15;
    unint64_t v14 = v16;
  }
  else
  {
    unint64_t v14 = 0;
    long long v13 = 0uLL;
  }
  *(_OWORD *)a3 = v13;
  *(void *)(a3 + 16) = v14;
  return result;
}

void sub_8FBC60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_8FBC7C(uint64_t a1, char *__src, char *a3)
{
  char v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    int v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v6[-*(void *)a1 + 1];
    if (v10 < 0) {
      sub_2E00();
    }
    uint64_t v11 = __src - v9;
    unint64_t v12 = v7 - (void)v9;
    if (2 * v12 > v10) {
      uint64_t v10 = 2 * v12;
    }
    if (v12 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v13 = v10;
    }
    if (v13)
    {
      unint64_t v14 = (char *)operator new(v13);
      long long v15 = &v14[v11];
      unint64_t v16 = &v14[v13];
      if (v11 != v13)
      {
LABEL_30:
        *long long v15 = *a3;
        uint64_t v20 = v15;
        if (v9 != v4)
        {
          uint64_t v21 = v4 - v9;
          int v22 = v4;
          uint64_t v20 = v15;
          if ((unint64_t)(v4 - v9) < 0x20) {
            goto LABEL_46;
          }
          int v22 = v4;
          uint64_t v20 = v15;
          if ((unint64_t)(v4 - v15) < 0x20) {
            goto LABEL_46;
          }
          int v22 = &v4[-(v21 & 0xFFFFFFFFFFFFFFE0)];
          uint64_t v20 = &v15[-(v21 & 0xFFFFFFFFFFFFFFE0)];
          unint64_t v23 = v15 - 16;
          uint64_t v24 = v4 - 16;
          unint64_t v25 = v21 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v26 = *(_OWORD *)v24;
            *((_OWORD *)v23 - 1) = *((_OWORD *)v24 - 1);
            *(_OWORD *)unint64_t v23 = v26;
            v23 -= 32;
            v24 -= 32;
            v25 -= 32;
          }
          while (v25);
          if (v21 != (v21 & 0xFFFFFFFFFFFFFFE0))
          {
LABEL_46:
            do
            {
              char v27 = *--v22;
              *--uint64_t v20 = v27;
            }
            while (v22 != v9);
          }
        }
        uint64_t v28 = *(unsigned char **)(a1 + 8);
        uint64_t v29 = v28 - v4;
        if (v28 != v4)
        {
          memmove(v15 + 1, v4, v28 - v4);
          int v9 = *(char **)a1;
        }
        *(void *)a1 = v20;
        *(void *)(a1 + 8) = &v15[v29 + 1];
        *(void *)(a1 + 16) = v16;
        if (v9) {
          operator delete(v9);
        }
        return v15;
      }
    }
    else
    {
      unint64_t v14 = 0;
      long long v15 = (char *)(__src - v9);
      unint64_t v16 = 0;
      if (v11) {
        goto LABEL_30;
      }
    }
    if (v11 < 1)
    {
      if ((unint64_t)(2 * v11) <= 1) {
        size_t v18 = 1;
      }
      else {
        size_t v18 = 2 * v11;
      }
      unint64_t v19 = (char *)operator new(v18);
      long long v15 = &v19[v18 >> 2];
      unint64_t v16 = &v19[v18];
      if (v14)
      {
        operator delete(v14);
        int v9 = *(char **)a1;
      }
    }
    else
    {
      if (v11 + 1 >= 0) {
        uint64_t v17 = v11 + 1;
      }
      else {
        uint64_t v17 = v11 + 2;
      }
      v15 -= v17 >> 1;
    }
    goto LABEL_30;
  }
  if (__src != v6)
  {
    uint64_t v8 = __src + 1;
    if (v6)
    {
      *uint64_t v6 = *(v6 - 1);
      *(void *)(a1 + 8) = v6 + 1;
      if (v6 == v8) {
        goto LABEL_24;
      }
    }
    else
    {
      *(void *)(a1 + 8) = 0;
      if (__src == (char *)-1)
      {
LABEL_24:
        char *v4 = *a3;
        return v4;
      }
    }
    memmove(__src + 1, __src, v6 - v8);
    goto LABEL_24;
  }
  *__src = *a3;
  *(void *)(a1 + 8) = __src + 1;
  return v4;
}

void sub_8FBECC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_8FBEE4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      sub_8FCF48((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  char v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t *sub_8FBF44(void *a1, uint64_t a2)
{
  unint64_t v4 = sub_8FC188((uint64_t)(a1 + 3), (unsigned int *)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v8 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v8 = (*(void *)&v5 - 1) & v4;
  }
  int v9 = *(uint64_t ***)(*a1 + 8 * v8);
  if (!v9) {
    return 0;
  }
  uint64_t v10 = *v9;
  if (*v9)
  {
    uint64_t v11 = (const void **)(a2 + 120);
    if (v7.u32[0] < 2uLL)
    {
      uint64_t v12 = *(void *)&v5 - 1;
      while (1)
      {
        uint64_t v20 = v10[1];
        if (v20 == v6)
        {
          if (*((_DWORD *)v10 + 4) == *(_DWORD *)a2 && sub_4F3B98((uint64_t)(v10 + 3), a2 + 8))
          {
            uint64_t v21 = *((unsigned __int8 *)v10 + 159);
            if ((v21 & 0x80u) == 0) {
              uint64_t v22 = *((unsigned __int8 *)v10 + 159);
            }
            else {
              uint64_t v22 = v10[18];
            }
            uint64_t v23 = *(unsigned __int8 *)(a2 + 143);
            int v24 = (char)v23;
            if ((v23 & 0x80u) != 0) {
              uint64_t v23 = *(void *)(a2 + 128);
            }
            if (v22 == v23)
            {
              if (v24 >= 0) {
                unint64_t v25 = (unsigned __int8 *)(a2 + 120);
              }
              else {
                unint64_t v25 = (unsigned __int8 *)*v11;
              }
              if ((v21 & 0x80) != 0)
              {
                if (!memcmp((const void *)v10[17], v25, v10[18])) {
                  return v10;
                }
              }
              else
              {
                if (!*((unsigned char *)v10 + 159)) {
                  return v10;
                }
                uint64_t v26 = 0;
                while (*((unsigned __int8 *)v10 + v26 + 136) == v25[v26])
                {
                  if (v21 == ++v26) {
                    return v10;
                  }
                }
              }
            }
          }
        }
        else if ((v20 & v12) != v8)
        {
          return 0;
        }
        uint64_t v10 = (uint64_t *)*v10;
        if (!v10) {
          return v10;
        }
      }
    }
    do
    {
      unint64_t v13 = v10[1];
      if (v13 == v6)
      {
        if (*((_DWORD *)v10 + 4) == *(_DWORD *)a2 && sub_4F3B98((uint64_t)(v10 + 3), a2 + 8))
        {
          uint64_t v14 = *((unsigned __int8 *)v10 + 159);
          if ((v14 & 0x80u) == 0) {
            uint64_t v15 = *((unsigned __int8 *)v10 + 159);
          }
          else {
            uint64_t v15 = v10[18];
          }
          uint64_t v16 = *(unsigned __int8 *)(a2 + 143);
          int v17 = (char)v16;
          if ((v16 & 0x80u) != 0) {
            uint64_t v16 = *(void *)(a2 + 128);
          }
          if (v15 == v16)
          {
            if (v17 >= 0) {
              size_t v18 = (unsigned __int8 *)(a2 + 120);
            }
            else {
              size_t v18 = (unsigned __int8 *)*v11;
            }
            if ((v14 & 0x80) != 0)
            {
              if (!memcmp((const void *)v10[17], v18, v10[18])) {
                return v10;
              }
            }
            else
            {
              if (!*((unsigned char *)v10 + 159)) {
                return v10;
              }
              uint64_t v19 = 0;
              while (*((unsigned __int8 *)v10 + v19 + 136) == v18[v19])
              {
                if (v14 == ++v19) {
                  return v10;
                }
              }
            }
          }
        }
      }
      else
      {
        if (v13 >= *(void *)&v5) {
          v13 %= *(void *)&v5;
        }
        if (v13 != v8) {
          return 0;
        }
      }
      uint64_t v10 = (uint64_t *)*v10;
    }
    while (v10);
  }
  return v10;
}

uint64_t sub_8FC188(uint64_t a1, unsigned int *a2)
{
  uint64_t v9 = 3735928559;
  uint64_t v3 = *a2;
  sub_4F57A0((uint64_t)v12, (uint64_t)(a2 + 2));
  if (*((char *)a2 + 143) < 0)
  {
    sub_4200(v7, *((void **)a2 + 15), *((void *)a2 + 16));
  }
  else
  {
    *(_OWORD *)uint8x8_t v7 = *(_OWORD *)(a2 + 30);
    uint64_t v8 = *((void *)a2 + 17);
  }
  uint64_t v9 = (v3 + 0x388152A534) ^ 0xDEADBEEFLL;
  if (SHIBYTE(v8) < 0)
  {
    sub_4200(__p, v7[0], (unint64_t)v7[1]);
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)v7;
    uint64_t v11 = v8;
  }
  sub_8FC384(&v9, (uint64_t)v12, (uint64_t)__p);
  if (SHIBYTE(v11) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v8) & 0x80000000) == 0)
    {
LABEL_9:
      if ((v20 & 0x80000000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_17;
    }
  }
  else if ((SHIBYTE(v8) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v7[0]);
  if ((v20 & 0x80000000) == 0)
  {
LABEL_10:
    if ((v18 & 0x80000000) == 0) {
      goto LABEL_11;
    }
LABEL_18:
    operator delete(v17);
    int v4 = v16;
    if (v16 != 1) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }
LABEL_17:
  operator delete(v19);
  if (v18 < 0) {
    goto LABEL_18;
  }
LABEL_11:
  int v4 = v16;
  if (v16 != 1)
  {
LABEL_12:
    if (!v4 && v15 < 0)
    {
      int8x8_t v5 = v13;
LABEL_21:
      operator delete(v5);
      return v9;
    }
    return v9;
  }
LABEL_19:
  int8x8_t v5 = v13;
  if (v13)
  {
    uint64_t v14 = v13;
    goto LABEL_21;
  }
  return v9;
}

void sub_8FC310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if ((a14 & 0x80000000) == 0)
  {
    sub_4D9814((uint64_t)&a22);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  sub_4D9814((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_8FC384(void *a1, uint64_t a2, uint64_t a3)
{
  sub_4F57A0((uint64_t)__dst, a2);
  *a1 ^= sub_8FC520((uint64_t)&v9, (uint64_t)__dst) + (*a1 << 6) + (*a1 >> 2) + 2654435769u;
  if (v18 < 0)
  {
    operator delete(__p);
    if ((v16 & 0x80000000) == 0)
    {
LABEL_3:
      int v5 = v14;
      if (v14 != 1) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((v16 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v15);
  int v5 = v14;
  if (v14 != 1)
  {
LABEL_4:
    if (v5 || (v13 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    unint64_t v6 = __dst[1];
    goto LABEL_11;
  }
LABEL_9:
  unint64_t v6 = __dst[1];
  if (!__dst[1]) {
    goto LABEL_12;
  }
  uint64_t v12 = __dst[1];
LABEL_11:
  operator delete(v6);
LABEL_12:
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)long long __dst = *(_OWORD *)a3;
    uint64_t v12 = *(void **)(a3 + 16);
  }
  if (SHIBYTE(v12) >= 0) {
    uint8x8_t v7 = (uint64_t *)__dst;
  }
  else {
    uint8x8_t v7 = (uint64_t *)__dst[0];
  }
  if (SHIBYTE(v12) >= 0) {
    unint64_t v8 = HIBYTE(v12);
  }
  else {
    unint64_t v8 = (unint64_t)__dst[1];
  }
  *a1 ^= sub_B128((uint64_t)&v10, v7, v8) + 2654435769u + (*a1 << 6) + (*a1 >> 2);
  if (SHIBYTE(v12) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_8FC4F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_8FC520(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (*(unsigned __int8 *)(a2 + 72) + 0x388152A534) ^ 0xDEADBEEFLL;
  unint64_t v4 = (*(unsigned __int8 *)(a2 + 104) + (v3 << 6) + (v3 >> 2) + 2654435769u) ^ v3;
  int v5 = *(_DWORD *)(a2 + 32);
  if (v5 == 1) {
    uint64_t v6 = 2654435770;
  }
  else {
    uint64_t v6 = 2654435769;
  }
  unint64_t v7 = (v6 + (v4 << 6) + (v4 >> 2)) ^ v4;
  if (v5) {
    uint64_t v8 = 2654435769;
  }
  else {
    uint64_t v8 = 2654435770;
  }
  unint64_t v9 = (v8 + (v7 << 6) + (v7 >> 2)) ^ v7;
  unint64_t v12 = v9;
  if (!v5)
  {
    unint64_t v13 = *(void *)a2;
    if (*(char *)(a2 + 31) < 0)
    {
      sub_4200(&__p, *(void **)(a2 + 8), *(void *)(a2 + 16));
    }
    else
    {
      long long __p = *(_OWORD *)(a2 + 8);
      uint64_t v15 = *(void *)(a2 + 24);
    }
    unint64_t v12 = (sub_8FC904((uint64_t)&v16, (unsigned int *)&v13) + 2654435769 + (v9 << 6) + (v9 >> 2)) ^ v9;
    if (SHIBYTE(v15) < 0) {
      goto LABEL_19;
    }
    return v12;
  }
  if (v5 != 1) {
    return v12;
  }
  sub_8FC6E8(&v12, (unint64_t *)a2);
  if (*(_DWORD *)(a2 + 40) == -1) {
    return v12;
  }
  unint64_t v13 = *(void *)(a2 + 40);
  if (*(char *)(a2 + 71) < 0)
  {
    sub_4200(&__p, *(void **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long __p = *(_OWORD *)(a2 + 48);
    uint64_t v15 = *(void *)(a2 + 64);
  }
  uint64_t v11 = sub_8FC904((uint64_t)&v16, (unsigned int *)&v13);
  v12 ^= v11 + 2654435769 + (v12 << 6) + (v12 >> 2);
  if ((SHIBYTE(v15) & 0x80000000) == 0) {
    return v12;
  }
LABEL_19:
  operator delete((void *)__p);
  return v12;
}

void sub_8FC6C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_8FC6E8(void *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  unint64_t v3 = (unsigned char *)a2[1];
  int v5 = (unsigned char *)a2[2];
  int64_t v6 = v5 - v3;
  if (v5 == v3)
  {
    uint64_t v8 = 0;
    unint64_t v7 = 0;
  }
  else
  {
    if (v6 < 0) {
      sub_2E00();
    }
    unint64_t v7 = (char *)operator new(v5 - v3);
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v3, v6);
  }
  unint64_t v9 = (HIDWORD(v4)
      + (((v4 + 0x388152A534) ^ 0xDEADBEEFLL) << 6)
      + (((v4 + 0x388152A534) ^ 0xDEADBEEFuLL) >> 2)
      + 2654435769u) ^ (v4 + 0x388152A534) ^ 0xDEADBEEFLL;
  uint64_t v10 = v8 - v7;
  if (v8 == v7)
  {
    uint64_t v14 = (v9 << 6) + (v9 >> 2) + 0x17CE538A8;
  }
  else
  {
    if (v10 < 0) {
      sub_2E00();
    }
    uint64_t v11 = (char *)operator new(v8 - v7);
    memcpy(v11, v7, v8 - v7);
    uint64_t v12 = 0;
    unint64_t v13 = 3735928559;
    do
    {
      v13 ^= (v13 << 6)
           + 2654435769u
           + (v13 >> 2)
           + ((HIDWORD(*(void *)&v11[v12])
             + 2654435769
             + (((*(void *)&v11[v12] + 0x388152A534) ^ 0xDEADBEEFLL) << 6)
             + (((*(void *)&v11[v12] + 0x388152A534) ^ 0xDEADBEEFuLL) >> 2)) ^ (*(void *)&v11[v12]
                                                                                                + 0x388152A534) ^ 0xDEADBEEFLL);
      v12 += 8;
    }
    while (8 * (v10 >> 3) != v12);
    uint64_t v14 = (v9 << 6) + 2654435769u + (v9 >> 2) + v13;
    operator delete(v11);
  }
  *a1 ^= (v14 ^ v9) + 2654435769u + (*a1 << 6) + (*a1 >> 2);
  if (v7)
  {
    operator delete(v7);
  }
}

void sub_8FC8C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (v15) {
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_8FC904(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = *a2;
  if (*((char *)a2 + 31) < 0)
  {
    sub_4200(__p, *((void **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)(a2 + 2);
    uint64_t v13 = *((void *)a2 + 3);
  }
  if (v13 >= 0) {
    unint64_t v4 = (uint64_t *)__p;
  }
  else {
    unint64_t v4 = (uint64_t *)__p[0];
  }
  if (v13 >= 0) {
    unint64_t v5 = HIBYTE(v13);
  }
  else {
    unint64_t v5 = (unint64_t)__p[1];
  }
  unint64_t v6 = sub_B128((uint64_t)&v14, v4, v5);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = ((((v3 + 0x388152A534) ^ 0xDEADBEEFLL) << 6) + (((v3 + 0x388152A534) ^ 0xDEADBEEFuLL) >> 2) + v6 + 2654435769u) ^ (v3 + 0x388152A534) ^ 0xDEADBEEFLL;
  unint64_t v8 = a2[1];
  unint64_t v9 = ((v8 - 0x61C8860E9D9A5872) << 6)
     + BYTE2(v8)
     + (((unint64_t)v8 - 0x61C8860E9D9A5872) >> 2)
     - 0x61C8864680B583EDLL;
  unint64_t v10 = (v9 << 6) + BYTE1(v8) + (v9 >> 2) - 0x61C8864680B583EDLL;
  return ((v7 >> 2) + (v8 >> 24) + (v10 >> 2) + ((v10 + v7) << 6) - 0x61C88645E27E0A34) ^ v7;
}

void *sub_8FCA54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_8FC188(a1 + 24, (unsigned int *)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v12 = *(void **)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      uint64_t v13 = (void *)*v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v13[1];
            if (v21 == v9)
            {
              if (*((_DWORD *)v13 + 4) == *(_DWORD *)a2 && sub_4F3B98((uint64_t)(v13 + 3), a2 + 8))
              {
                uint64_t v22 = *((unsigned __int8 *)v13 + 159);
                if ((v22 & 0x80u) == 0) {
                  uint64_t v23 = *((unsigned __int8 *)v13 + 159);
                }
                else {
                  uint64_t v23 = v13[18];
                }
                uint64_t v24 = *(unsigned __int8 *)(a2 + 143);
                int v25 = (char)v24;
                if ((v24 & 0x80u) != 0) {
                  uint64_t v24 = *(void *)(a2 + 128);
                }
                if (v23 == v24)
                {
                  if (v25 >= 0) {
                    uint64_t v26 = (unsigned __int8 *)(a2 + 120);
                  }
                  else {
                    uint64_t v26 = *(unsigned __int8 **)(a2 + 120);
                  }
                  if ((v22 & 0x80) != 0)
                  {
                    if (!memcmp((const void *)v13[17], v26, v13[18])) {
                      return v13;
                    }
                  }
                  else
                  {
                    if (!*((unsigned char *)v13 + 159)) {
                      return v13;
                    }
                    uint64_t v27 = 0;
                    while (*((unsigned __int8 *)v13 + v27 + 136) == v26[v27])
                    {
                      if (v22 == ++v27) {
                        return v13;
                      }
                    }
                  }
                }
              }
            }
            else if ((v21 & (v10 - 1)) != v3)
            {
              goto LABEL_57;
            }
            uint64_t v13 = (void *)*v13;
            if (!v13) {
              goto LABEL_57;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 4) == *(_DWORD *)a2 && sub_4F3B98((uint64_t)(v13 + 3), a2 + 8))
            {
              uint64_t v15 = *((unsigned __int8 *)v13 + 159);
              if ((v15 & 0x80u) == 0) {
                uint64_t v16 = *((unsigned __int8 *)v13 + 159);
              }
              else {
                uint64_t v16 = v13[18];
              }
              uint64_t v17 = *(unsigned __int8 *)(a2 + 143);
              int v18 = (char)v17;
              if ((v17 & 0x80u) != 0) {
                uint64_t v17 = *(void *)(a2 + 128);
              }
              if (v16 == v17)
              {
                if (v18 >= 0) {
                  uint64_t v19 = (unsigned __int8 *)(a2 + 120);
                }
                else {
                  uint64_t v19 = *(unsigned __int8 **)(a2 + 120);
                }
                if ((v15 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v13[17], v19, v13[18])) {
                    return v13;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v13 + 159)) {
                    return v13;
                  }
                  uint64_t v20 = 0;
                  while (*((unsigned __int8 *)v13 + v20 + 136) == v19[v20])
                  {
                    if (v15 == ++v20) {
                      return v13;
                    }
                  }
                }
              }
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v3) {
              break;
            }
          }
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_57:
  int v43 = operator new(0xA0uLL);
  *int v43 = 0;
  v43[1] = v9;
  sub_8E839C((_DWORD *)v43 + 4, a3);
  float v28 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v29 = *(float *)(a1 + 32);
  if (!v10 || (float)(v29 * (float)v10) < v28)
  {
    BOOL v32 = 1;
    if (v10 >= 3) {
      BOOL v32 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v33 = v32 | (2 * v10);
    unint64_t v34 = vcvtps_u32_f32(v28 / v29);
    if (v33 <= v34) {
      size_t prime = v34;
    }
    else {
      size_t prime = v33;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v36 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v36) {
      goto LABEL_71;
    }
    if (prime < *(void *)&v36)
    {
      unint64_t v37 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v36 < 3uLL || (uint8x8_t v38 = (uint8x8_t)vcnt_s8(v36), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
      {
        unint64_t v37 = std::__next_prime(v37);
      }
      else
      {
        uint64_t v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2) {
          unint64_t v37 = v39;
        }
      }
      if (prime <= v37) {
        size_t prime = v37;
      }
      if (prime < *(void *)&v36) {
LABEL_71:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v40 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v3 = v9 % v10;
        unint64_t v30 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        uint64_t v31 = v43;
        if (v30) {
          goto LABEL_60;
        }
      }
      else
      {
        unint64_t v3 = v9;
        unint64_t v30 = *(void **)(*(void *)a1 + 8 * v9);
        uint64_t v31 = v43;
        if (v30) {
          goto LABEL_60;
        }
      }
    }
    else
    {
      unint64_t v3 = v40 & v9;
      unint64_t v30 = *(void **)(*(void *)a1 + 8 * (v40 & v9));
      uint64_t v31 = v43;
      if (v30) {
        goto LABEL_60;
      }
    }
LABEL_84:
    *uint64_t v31 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v43;
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*v43)
    {
      unint64_t v41 = *(void *)(*v43 + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v41 >= v10) {
          v41 %= v10;
        }
      }
      else
      {
        v41 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v41) = v43;
    }
    goto LABEL_95;
  }
  unint64_t v30 = *(void **)(*(void *)a1 + 8 * v3);
  uint64_t v31 = v43;
  if (!v30) {
    goto LABEL_84;
  }
LABEL_60:
  *uint64_t v31 = *v30;
  *unint64_t v30 = v43;
LABEL_95:
  uint64_t v13 = v43;
  ++*v7;
  return v13;
}

void sub_8FCED8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_8FCF00((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_8FCEEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_8FCF00((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_8FCF00(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_8FCF48((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
  return a1;
}

void sub_8FCF48(uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0)
  {
    operator delete(*(void **)(a1 + 120));
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 79) & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_12:
      operator delete(*(void **)(a1 + 56));
      int v2 = *(_DWORD *)(a1 + 40);
      if (v2 != 1) {
        goto LABEL_5;
      }
      goto LABEL_13;
    }
  }
  else if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 79) < 0) {
    goto LABEL_12;
  }
LABEL_4:
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2 != 1)
  {
LABEL_5:
    if (!v2 && *(char *)(a1 + 39) < 0)
    {
      unint64_t v3 = *(void **)(a1 + 16);
LABEL_9:
      operator delete(v3);
      return;
    }
    return;
  }
LABEL_13:
  unint64_t v3 = *(void **)(a1 + 16);
  if (v3)
  {
    *(void *)(a1 + 24) = v3;
    goto LABEL_9;
  }
}

_DWORD *sub_8FD014(void **a1, uint64_t a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1C71C71C71C71C7) {
    sub_2E00();
  }
  if (0x1C71C71C71C71C72 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0x8E38E38E38E38E39 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0xE38E38E38E38E3) {
    unint64_t v6 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v22 = (uint64_t)(a1 + 2);
  if (v6)
  {
    if (v6 > 0x1C71C71C71C71C7) {
      sub_188D718();
    }
    unint64_t v7 = (char *)operator new(144 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v20 = &v7[144 * v3];
  uint64_t v21 = &v7[144 * v6];
  sub_8E839C(v20, a2);
  unint64_t v8 = v20 + 144;
  unint64_t v10 = (char *)*a1;
  unint64_t v9 = (char *)a1[1];
  if (v9 == *a1)
  {
    *a1 = v20;
    a1[1] = v8;
    a1[2] = v21;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = &v20[v11];
      uint64_t v13 = &v9[v11];
      *((_DWORD *)v12 - 36) = *(_DWORD *)&v9[v11 - 144];
      *((_DWORD *)v12 - 26) = *(_DWORD *)&v9[v11 - 104];
      sub_4F38B0((void *)*(unsigned int *)&v9[v11 - 104], (uint64_t *)&v9[v11 - 136], &v20[v11 - 136]);
      *((void *)v12 - 12) = *(void *)&v9[v11 - 96];
      long long v14 = *(_OWORD *)&v9[v11 - 88];
      *((void *)v12 - 9) = *(void *)&v9[v11 - 72];
      *(_OWORD *)(v12 - 88) = v14;
      *((void *)v13 - 10) = 0;
      *((void *)v13 - 9) = 0;
      *((void *)v13 - 11) = 0;
      *(v12 - 64) = v9[v11 - 64];
      long long v15 = *(_OWORD *)&v9[v11 - 56];
      *((void *)v12 - 5) = *(void *)&v9[v11 - 40];
      *(_OWORD *)(v12 - 56) = v15;
      *((void *)v13 - 6) = 0;
      *((void *)v13 - 5) = 0;
      *((void *)v13 - 7) = 0;
      *(v12 - 32) = v9[v11 - 32];
      long long v16 = *(_OWORD *)&v9[v11 - 24];
      *((void *)v12 - 1) = *(void *)&v9[v11 - 8];
      *(_OWORD *)(v12 - 24) = v16;
      *((void *)v13 - 2) = 0;
      *((void *)v13 - 1) = 0;
      *((void *)v13 - 3) = 0;
      v11 -= 144;
    }
    while (&v9[v11] != v10);
    uint64_t v17 = (char *)*a1;
    unint64_t v9 = (char *)a1[1];
    int v18 = &v20[v11];
    unint64_t v8 = v20 + 144;
    *a1 = v18;
    a1[1] = v20 + 144;
    a1[2] = v21;
    if (v9 != v17)
    {
      do
      {
        v9 -= 144;
        sub_8E48A4(v22, (uint64_t)v9);
      }
      while (v9 != v17);
      unint64_t v9 = v17;
    }
  }
  if (v9) {
    operator delete(v9);
  }
  return v8;
}

void sub_8FD238(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_8FD250((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_8FD250(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 16) = i - 144;
    sub_8E48A4(v4, i - 144);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_8FD2A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  uint64_t v7 = 0;
  do
  {
    uint64_t v9 = a4 + v7;
    *(_DWORD *)(a4 + v7) = *(_DWORD *)(a2 + v7);
    uint64_t v10 = a2 + v7 + 8;
    sub_4F377C(a4 + v7 + 8, v10);
    *(void *)(a4 + v7 + 48) = *(void *)(a2 + v7 + 48);
    uint64_t v11 = (void **)(a4 + v7 + 56);
    if (*(char *)(a4 + v7 + 79) < 0) {
      operator delete(*v11);
    }
    long long v12 = *(_OWORD *)(a2 + v7 + 56);
    *(void *)(v9 + 72) = *(void *)(a2 + v7 + 72);
    *(_OWORD *)uint64_t v11 = v12;
    *(unsigned char *)(a2 + v7 + 79) = 0;
    *(unsigned char *)(a2 + v7 + 56) = 0;
    *(unsigned char *)(v9 + 80) = *(unsigned char *)(a2 + v7 + 80);
    uint64_t v13 = (void **)(v9 + 88);
    if (*(char *)(v9 + 111) < 0) {
      operator delete(*v13);
    }
    long long v14 = *(_OWORD *)(a2 + v7 + 88);
    *(void *)(v9 + 104) = *(void *)(a2 + v7 + 104);
    *(_OWORD *)uint64_t v13 = v14;
    *(unsigned char *)(a2 + v7 + 111) = 0;
    *(unsigned char *)(a2 + v7 + 88) = 0;
    *(unsigned char *)(a4 + v7 + 112) = *(unsigned char *)(a2 + v7 + 112);
    long long v15 = (void **)(a4 + v7 + 120);
    if (*(char *)(a4 + v7 + 143) < 0) {
      operator delete(*v15);
    }
    long long v8 = *(_OWORD *)(a2 + v7 + 120);
    *(void *)(a4 + v7 + 136) = *(void *)(a2 + v7 + 136);
    *(_OWORD *)long long v15 = v8;
    *(unsigned char *)(a2 + v7 + 143) = 0;
    *(unsigned char *)(a2 + v7 + 120) = 0;
    v7 += 144;
  }
  while (v10 + 136 != v6);
  return v6;
}

char *sub_8FD3E0(void **a1, uint64_t a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1C71C71C71C71C7) {
    sub_2E00();
  }
  if (0x1C71C71C71C71C72 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0x8E38E38E38E38E39 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0xE38E38E38E38E3) {
    unint64_t v6 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x1C71C71C71C71C7) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(144 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  long long v8 = &v7[144 * v3];
  *(_DWORD *)long long v8 = *(_DWORD *)a2;
  uint64_t v9 = (void *)*(unsigned int *)(a2 + 40);
  *((_DWORD *)v8 + 10) = v9;
  sub_4F38B0(v9, (uint64_t *)(a2 + 8), (void *)v8 + 1);
  *((void *)v8 + 6) = *(void *)(a2 + 48);
  *(_OWORD *)(v8 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v10 = &v7[144 * v6];
  *((void *)v8 + 9) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  v8[80] = *(unsigned char *)(a2 + 80);
  *(_OWORD *)(v8 + 88) = *(_OWORD *)(a2 + 88);
  *((void *)v8 + 13) = *(void *)(a2 + 104);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 88) = 0;
  v8[112] = *(unsigned char *)(a2 + 112);
  long long v11 = *(_OWORD *)(a2 + 120);
  *((void *)v8 + 17) = *(void *)(a2 + 136);
  *(_OWORD *)(v8 + 120) = v11;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  long long v12 = v8 + 144;
  long long v14 = (char *)*a1;
  uint64_t v13 = (char *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v8;
    a1[1] = v12;
    a1[2] = v10;
    if (!v13) {
      return v8 + 144;
    }
    goto LABEL_18;
  }
  uint64_t v15 = 0;
  do
  {
    long long v16 = &v8[v15];
    uint64_t v17 = &v13[v15];
    *((_DWORD *)v16 - 36) = *(_DWORD *)&v13[v15 - 144];
    *((_DWORD *)v16 - 26) = *(_DWORD *)&v13[v15 - 104];
    sub_4F38B0((void *)*(unsigned int *)&v13[v15 - 104], (uint64_t *)&v13[v15 - 136], &v8[v15 - 136]);
    *((void *)v16 - 12) = *(void *)&v13[v15 - 96];
    long long v18 = *(_OWORD *)&v13[v15 - 88];
    *((void *)v16 - 9) = *(void *)&v13[v15 - 72];
    *(_OWORD *)(v16 - 88) = v18;
    *((void *)v17 - 10) = 0;
    *((void *)v17 - 9) = 0;
    *((void *)v17 - 11) = 0;
    *(v16 - 64) = v13[v15 - 64];
    long long v19 = *(_OWORD *)&v13[v15 - 56];
    *((void *)v16 - 5) = *(void *)&v13[v15 - 40];
    *(_OWORD *)(v16 - 56) = v19;
    *((void *)v17 - 6) = 0;
    *((void *)v17 - 5) = 0;
    *((void *)v17 - 7) = 0;
    *(v16 - 32) = v13[v15 - 32];
    long long v20 = *(_OWORD *)&v13[v15 - 24];
    *((void *)v16 - 1) = *(void *)&v13[v15 - 8];
    *(_OWORD *)(v16 - 24) = v20;
    *((void *)v17 - 2) = 0;
    *((void *)v17 - 1) = 0;
    *((void *)v17 - 3) = 0;
    v15 -= 144;
  }
  while (&v13[v15] != v14);
  uint64_t v21 = (char *)*a1;
  uint64_t v13 = (char *)a1[1];
  *a1 = &v8[v15];
  a1[1] = v12;
  a1[2] = v10;
  if (v13 != v21)
  {
    do
    {
      v13 -= 144;
      sub_8E48A4((uint64_t)(a1 + 2), (uint64_t)v13);
    }
    while (v13 != v21);
    uint64_t v13 = v21;
  }
  if (v13) {
LABEL_18:
  }
    operator delete(v13);
  return v8 + 144;
}

_DWORD *sub_8FD660(uint64_t *a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = a2;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = a3;
  uint64_t v9 = a1[2];
  unint64_t v10 = a1[1];
  if ((uint64_t)(0x8E38E38E38E38E39 * ((uint64_t)(v9 - v10) >> 4)) < a5)
  {
    uint64_t v11 = *a1;
    unint64_t v12 = a5 - 0x71C71C71C71C71C7 * ((uint64_t)(v10 - *a1) >> 4);
    if (v12 > 0x1C71C71C71C71C7) {
      sub_2E00();
    }
    unint64_t v13 = 0x8E38E38E38E38E39 * ((v9 - v11) >> 4);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0xE38E38E38E38E3) {
      unint64_t v14 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v14 = v12;
    }
    unint64_t v41 = a1 + 2;
    if (v14)
    {
      if (v14 > 0x1C71C71C71C71C7) {
        sub_188D718();
      }
      uint64_t v15 = (char *)operator new(144 * v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v31 = &v15[16 * (((uint64_t)v5 - v11) >> 4)];
    long long __p = v15;
    uint8x8_t v38 = v31;
    uint64_t v39 = v31;
    unint64_t v40 = &v15[144 * v14];
    uint64_t v32 = 144 * a5;
    unint64_t v33 = &v31[144 * a5];
    do
    {
      sub_8E839C(v31, v7);
      v31 += 144;
      v7 += 144;
      v32 -= 144;
    }
    while (v32);
    uint64_t v39 = v33;
    unint64_t v5 = (_DWORD *)sub_8FDA5C(a1, &__p, v5);
    uint64_t v35 = v38;
    for (uint64_t i = v39; v39 != v35; uint64_t i = v39)
    {
      uint64_t v39 = i - 144;
      sub_8E48A4((uint64_t)v41, (uint64_t)(i - 144));
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v16 = v10 - (void)a2;
  if ((uint64_t)(0x8E38E38E38E38E39 * ((uint64_t)(v10 - (void)a2) >> 4)) >= a5)
  {
    uint64_t v18 = a3 + 144 * a5;
    uint64_t v20 = a1[1];
    unint64_t v21 = v10 - 144 * a5;
    uint64_t v22 = v20;
    if (v21 >= v10) {
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v18 = a3 + 16 * ((uint64_t)(v10 - (void)a2) >> 4);
    if (v18 == a4)
    {
      uint64_t v20 = a1[1];
      a1[1] = v10;
      if (v16 < 1) {
        return v5;
      }
    }
    else
    {
      uint64_t v19 = 0;
      do
      {
        sub_8E839C((_DWORD *)(v10 + v19), v18 + v19);
        v19 += 144;
      }
      while (v18 + v19 != a4);
      uint64_t v20 = v10 + v19;
      a1[1] = v10 + v19;
      if (v16 < 1) {
        return v5;
      }
    }
    unint64_t v21 = v20 - 144 * a5;
    uint64_t v22 = v20;
    if (v21 >= v10) {
      goto LABEL_23;
    }
  }
  unint64_t v23 = v21;
  uint64_t v24 = v20;
  do
  {
    uint64_t v25 = v24;
    *(_DWORD *)uint64_t v24 = *(_DWORD *)v23;
    *(_DWORD *)(v24 + 40) = *(_DWORD *)(v23 + 40);
    unint64_t v26 = v23 + 8;
    sub_4F38B0((void *)*(unsigned int *)(v23 + 40), (uint64_t *)(v23 + 8), (void *)(v24 + 8));
    *(void *)(v25 + 48) = *(void *)(v26 + 40);
    long long v27 = *(_OWORD *)(v26 + 48);
    *(void *)(v25 + 72) = *(void *)(v26 + 64);
    *(_OWORD *)(v25 + 56) = v27;
    *(void *)(v26 + 56) = 0;
    *(void *)(v26 + 64) = 0;
    *(void *)(v26 + 48) = 0;
    *(unsigned char *)(v25 + 80) = *(unsigned char *)(v26 + 72);
    long long v28 = *(_OWORD *)(v26 + 80);
    *(void *)(v25 + 104) = *(void *)(v26 + 96);
    *(_OWORD *)(v25 + 88) = v28;
    *(void *)(v26 + 88) = 0;
    *(void *)(v26 + 96) = 0;
    *(void *)(v26 + 80) = 0;
    *(unsigned char *)(v25 + 112) = *(unsigned char *)(v26 + 104);
    long long v29 = *(_OWORD *)(v26 + 112);
    *(void *)(v25 + 136) = *(void *)(v26 + 128);
    *(_OWORD *)(v25 + 120) = v29;
    *(void *)(v26 + 120) = 0;
    *(void *)(v26 + 128) = 0;
    *(void *)(v26 + 112) = 0;
    unint64_t v23 = v26 + 136;
    uint64_t v24 = v25 + 144;
  }
  while (v26 + 136 < v10);
  uint64_t v22 = v25 + 144;
LABEL_23:
  a1[1] = v22;
  sub_8FDC4C((uint64_t)&__p, (uint64_t)v5, v21, v20);
  if (v18 != v7)
  {
    unint64_t v30 = v5;
    do
    {
      *unint64_t v30 = *(_DWORD *)v7;
      sub_4F39B8((uint64_t)(v30 + 2), (std::string *)(v7 + 8));
      *((void *)v30 + 6) = *(void *)(v7 + 48);
      std::string::operator=((std::string *)(v30 + 14), (const std::string *)(v7 + 56));
      *((unsigned char *)v30 + 80) = *(unsigned char *)(v7 + 80);
      std::string::operator=((std::string *)(v30 + 22), (const std::string *)(v7 + 88));
      *((unsigned char *)v30 + 112) = *(unsigned char *)(v7 + 112);
      std::string::operator=((std::string *)v30 + 5, (const std::string *)(v7 + 120));
      v7 += 144;
      v30 += 36;
    }
    while (v7 != v18);
  }
  return v5;
}

void sub_8FDA00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_8FD250((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_8FDA14(_Unwind_Exception *exception_object)
{
  for (; v4; v4 -= 144)
    sub_8E48A4(v2, v3 - 144 + v4);
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(exception_object);
}

void sub_8FDA44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_8FD250((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_8FDA5C(void *a1, void *a2, _DWORD *a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = a2[1];
  uint64_t v7 = (_DWORD *)*a1;
  uint64_t v8 = v6;
  if ((_DWORD *)*a1 != a3)
  {
    uint64_t v9 = 0;
    do
    {
      uint64_t v10 = v6 + v9 * 4;
      uint64_t v11 = &v3[v9];
      *(_DWORD *)(v10 - 144) = v3[v9 - 36];
      *(_DWORD *)(v10 - 104) = v3[v9 - 26];
      sub_4F38B0((void *)v3[v9 - 26], (uint64_t *)&v3[v9 - 34], (void *)(v6 + v9 * 4 - 136));
      *(void *)(v10 - 96) = *(void *)&v3[v9 - 24];
      long long v12 = *(_OWORD *)&v3[v9 - 22];
      *(void *)(v10 - 72) = *(void *)&v3[v9 - 18];
      *(_OWORD *)(v10 - 88) = v12;
      *((void *)v11 - 10) = 0;
      *((void *)v11 - 9) = 0;
      *((void *)v11 - 11) = 0;
      *(unsigned char *)(v10 - 64) = v3[v9 - 16];
      long long v13 = *(_OWORD *)&v3[v9 - 14];
      *(void *)(v10 - 40) = *(void *)&v3[v9 - 10];
      *(_OWORD *)(v10 - 56) = v13;
      *((void *)v11 - 6) = 0;
      *((void *)v11 - 5) = 0;
      *((void *)v11 - 7) = 0;
      *(unsigned char *)(v10 - 32) = v3[v9 - 8];
      long long v14 = *(_OWORD *)&v3[v9 - 6];
      *(void *)(v10 - 8) = *(void *)&v3[v9 - 2];
      *(_OWORD *)(v10 - 24) = v14;
      *((void *)v11 - 2) = 0;
      *((void *)v11 - 1) = 0;
      *((void *)v11 - 3) = 0;
      v9 -= 36;
    }
    while (&v3[v9] != v7);
    uint64_t v8 = v6 + v9 * 4;
  }
  a2[1] = v8;
  uint64_t v15 = (_DWORD *)a1[1];
  uint64_t v16 = a2[2];
  if (v15 != v3)
  {
    do
    {
      uint64_t v17 = v16;
      *(_DWORD *)uint64_t v16 = *v3;
      *(_DWORD *)(v16 + 40) = v3[10];
      unint64_t v18 = v3[10];
      uint64_t v19 = v3 + 2;
      sub_4F38B0((void *)v18, (uint64_t *)v19, (void *)(v16 + 8));
      *(void *)(v17 + 48) = *((void *)v19 + 5);
      long long v20 = *((_OWORD *)v19 + 3);
      *(void *)(v17 + 72) = *((void *)v19 + 8);
      *(_OWORD *)(v17 + 56) = v20;
      *((void *)v19 + 7) = 0;
      *((void *)v19 + 8) = 0;
      *((void *)v19 + 6) = 0;
      *(unsigned char *)(v17 + 80) = *((unsigned char *)v19 + 72);
      long long v21 = *((_OWORD *)v19 + 5);
      *(void *)(v17 + 104) = *((void *)v19 + 12);
      *(_OWORD *)(v17 + 88) = v21;
      *((void *)v19 + 11) = 0;
      *((void *)v19 + 12) = 0;
      *((void *)v19 + 10) = 0;
      *(unsigned char *)(v17 + 112) = *((unsigned char *)v19 + 104);
      long long v22 = *((_OWORD *)v19 + 7);
      *(void *)(v17 + 136) = *((void *)v19 + 16);
      *(_OWORD *)(v17 + 120) = v22;
      *((void *)v19 + 15) = 0;
      *((void *)v19 + 16) = 0;
      *((void *)v19 + 14) = 0;
      uint64_t v3 = v19 + 34;
      uint64_t v16 = v17 + 144;
    }
    while (v3 != v15);
    uint64_t v16 = v17 + 144;
    uint64_t v8 = a2[1];
  }
  a2[2] = v16;
  unint64_t v23 = (_DWORD *)*a1;
  *a1 = v8;
  a2[1] = v23;
  uint64_t v24 = a1[1];
  a1[1] = a2[2];
  a2[2] = v24;
  uint64_t v25 = a1[2];
  a1[2] = a2[3];
  a2[3] = v25;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_8FDC4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v9 = a3 + v7;
      uint64_t v10 = a4 + v7;
      *(_DWORD *)(a4 + v7 - 144) = *(_DWORD *)(a3 + v7 - 144);
      sub_4F377C(a4 + v7 - 136, a3 + v7 - 136);
      *(void *)(a4 + v7 - 96) = *(void *)(a3 + v7 - 96);
      uint64_t v11 = (void **)(a4 + v7 - 88);
      if (*(char *)(a4 + v7 - 65) < 0) {
        operator delete(*v11);
      }
      long long v12 = *(_OWORD *)(v9 - 88);
      *(void *)(v10 - 72) = *(void *)(v9 - 72);
      *(_OWORD *)uint64_t v11 = v12;
      *(unsigned char *)(v9 - 65) = 0;
      *(unsigned char *)(v9 - 88) = 0;
      *(unsigned char *)(v10 - 64) = *(unsigned char *)(v9 - 64);
      uint64_t v13 = v10 - 56;
      if (*(char *)(v10 - 33) < 0) {
        operator delete(*(void **)v13);
      }
      uint64_t v14 = a3 + v7;
      long long v15 = *(_OWORD *)(a3 + v7 - 56);
      *(void *)(v13 + 16) = *(void *)(a3 + v7 - 40);
      *(_OWORD *)uint64_t v13 = v15;
      *(unsigned char *)(v14 - 33) = 0;
      *(unsigned char *)(v14 - 56) = 0;
      *(unsigned char *)(a4 + v7 - 32) = *(unsigned char *)(a3 + v7 - 32);
      uint64_t v16 = (void **)(a4 + v7 - 24);
      if (*(char *)(a4 + v7 - 1) < 0) {
        operator delete(*v16);
      }
      long long v8 = *(_OWORD *)(v14 - 24);
      *(void *)(a4 + v7 - 8) = *(void *)(v14 - 8);
      *(_OWORD *)uint64_t v16 = v8;
      *(unsigned char *)(v14 - 1) = 0;
      *(unsigned char *)(v14 - 24) = 0;
      v7 -= 144;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

int *sub_8FDD7C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result = (int *)sub_498D5C(a1, a2, 0, "stop");
  uint64_t v6 = (unsigned __int16 *)((char *)result - *result);
  if (*v6 >= 0x39u && (uint64_t v7 = v6[28]) != 0)
  {
    long long v8 = (unsigned int *)((char *)result + v7);
    uint64_t v9 = *v8;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v11 = (uint64_t *)((char *)v8 + v9 + 4);
    uint64_t v10 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v14 = (void **)a3;
    if (v10)
    {
      uint64_t v12 = 8 * v10;
      do
      {
        if (!*(unsigned char *)(a1 + 3888) || (double result = (int *)sub_2AB7E4(*(void *)(a1 + 3872)), result))
        {
          uint64_t v13 = *v11;
          double result = (int *)sub_2A98DC(&v14, &v13);
        }
        ++v11;
        v12 -= 8;
      }
      while (v12);
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_8FDE4C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int8x16_t sub_8FDE68(int8x16_t *a1, int8x16_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    uint64_t v12 = a1;
    while (1)
    {
      while (1)
      {
        a1 = v12;
        uint64_t v13 = (char *)a2 - (char *)v12;
        unint64_t v14 = ((char *)a2 - (char *)v12) >> 3;
        if (v6 || !v5)
        {
          switch(v14)
          {
            case 0uLL:
            case 1uLL:
              return result;
            case 2uLL:
              if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) >= (v12->u32[1] | ((unint64_t)v12->u32[0] << 32))) {
                return result;
              }
              uint64_t v89 = v12->i64[0];
              goto LABEL_106;
            case 3uLL:
              unint64_t v87 = v12->u32[3] | ((unint64_t)v12->u32[2] << 32);
              unint64_t v88 = a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32);
              if (v87 >= (v12->u32[1] | ((unint64_t)v12->u32[0] << 32)))
              {
                if (v88 < v87)
                {
                  uint64_t v104 = v12->i64[1];
                  v12->i64[1] = a2[-1].i64[1];
                  a2[-1].i64[1] = v104;
                  if ((v12->u32[3] | ((unint64_t)v12->u32[2] << 32)) < (v12->u32[1] | ((unint64_t)v12->u32[0] << 32)))
                  {
                    int8x16_t result = vextq_s8(*v12, *v12, 8uLL);
                    *uint64_t v12 = result;
                  }
                }
              }
              else
              {
                uint64_t v89 = v12->i64[0];
                if (v88 < v87)
                {
LABEL_106:
                  v12->i64[0] = a2[-1].i64[1];
                }
                else
                {
                  v12->i64[0] = v12->i64[1];
                  v12->i64[1] = v89;
                  if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) >= __ROR8__(v89, 32)) {
                    return result;
                  }
                  v12->i64[1] = a2[-1].i64[1];
                }
                a2[-1].i64[1] = v89;
              }
              break;
            case 4uLL:
              sub_2A9374((unsigned int *)v12, &v12->u32[2], (unsigned int *)&v12[1], &a2[-1].u32[2]);
              return result;
            case 5uLL:
              sub_2A94B0((unsigned int *)v12, &v12->u32[2], (unsigned int *)&v12[1], &v12[1].u32[2], &a2[-1].u32[2]);
              return result;
            default:
              JUMPOUT(0);
          }
          return result;
        }
        if (v13 <= 191)
        {
          BOOL v90 = (int8x16_t *)&v12->u64[1];
          BOOL v92 = v12 == a2 || v90 == a2;
          if (a5)
          {
            if (!v92)
            {
              uint64_t v93 = 0;
              uint64_t v94 = v12;
              do
              {
                uint64_t v96 = v94->u32[2];
                uint64_t v97 = v94->u32[3];
                uint64_t v98 = v94->u32[0];
                uint64_t v99 = v94->u32[1];
                uint64_t v94 = v90;
                if ((v97 | (unint64_t)(v96 << 32)) < (v99 | (unint64_t)(v98 << 32)))
                {
                  uint64_t v100 = v90->i64[0];
                  unint64_t v101 = __ROR8__(v94->i64[0], 32);
                  uint64_t v102 = v93;
                  do
                  {
                    uint64_t v103 = &v12->i8[v102];
                    *(uint64_t *)((char *)&v12->i64[1] + v102) = *(uint64_t *)((char *)v12->i64 + v102);
                    if (!v102)
                    {
                      int v95 = (uint64_t *)v12;
                      goto LABEL_124;
                    }
                    v102 -= 8;
                  }
                  while (v101 < (*((unsigned int *)v103 - 1) | ((unint64_t)*((unsigned int *)v103 - 2) << 32)));
                  int v95 = (uint64_t *)((char *)&v12->i64[1] + v102);
LABEL_124:
                  uint64_t *v95 = v100;
                }
                BOOL v90 = (int8x16_t *)&v94->u64[1];
                v93 += 8;
              }
              while (&v94->u64[1] != (unint64_t *)a2);
            }
          }
          else if (!v92)
          {
            do
            {
              uint64_t v105 = a1->u32[2];
              uint64_t v106 = a1->u32[3];
              uint64_t v107 = a1->u32[0];
              uint64_t v108 = a1->u32[1];
              a1 = v90;
              if ((v106 | (unint64_t)(v105 << 32)) < (v108 | (unint64_t)(v107 << 32)))
              {
                uint64_t v109 = v90->i64[0];
                unint64_t v110 = __ROR8__(v90->i64[0], 32);
                do
                {
                  BOOL v111 = (uint64_t *)v90;
                  uint64_t v112 = v90[-1].i64[1];
                  BOOL v90 = (int8x16_t *)((char *)v90 - 8);
                  *BOOL v111 = v112;
                }
                while (v110 < (*((unsigned int *)v111 - 3) | ((unint64_t)*((unsigned int *)v111 - 4) << 32)));
                v90->i64[0] = v109;
              }
              BOOL v90 = (int8x16_t *)&a1->u64[1];
            }
            while (&a1->u64[1] != (unint64_t *)a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v12 != a2)
          {
            sub_2A9598((unsigned int *)v12, (unsigned int *)a2, (unsigned int *)a2, a3);
          }
          return result;
        }
        unint64_t v15 = v14 >> 1;
        uint64_t v16 = (unsigned int *)v12 + 2 * (v14 >> 1);
        unint64_t v17 = a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32);
        if ((unint64_t)v13 >= 0x401) {
          break;
        }
        unint64_t v21 = v12->u32[1] | ((unint64_t)v12->u32[0] << 32);
        long long v22 = &v12->u32[2 * v15 + 1];
        if (v21 < (*v22 | ((unint64_t)*v16 << 32)))
        {
          uint64_t v23 = *(void *)v16;
          if (v17 >= v21)
          {
            *(void *)uint64_t v16 = v12->i64[0];
            v12->i64[0] = v23;
            if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) >= __ROR8__(v23, 32)) {
              goto LABEL_32;
            }
            v12->i64[0] = a2[-1].i64[1];
          }
          else
          {
            *(void *)uint64_t v16 = a2[-1].i64[1];
          }
          a2[-1].i64[1] = v23;
LABEL_32:
          --a4;
          if ((a5 & 1) == 0) {
            goto LABEL_56;
          }
          goto LABEL_33;
        }
        if (v17 >= v21) {
          goto LABEL_32;
        }
        uint64_t v26 = v12->i64[0];
        v12->i64[0] = a2[-1].i64[1];
        a2[-1].i64[1] = v26;
        if ((v12->u32[1] | ((unint64_t)v12->u32[0] << 32)) >= (*v22 | ((unint64_t)*v16 << 32))) {
          goto LABEL_32;
        }
        uint64_t v27 = *(void *)v16;
        *(void *)uint64_t v16 = v12->i64[0];
        v12->i64[0] = v27;
        --a4;
        if (a5) {
          goto LABEL_33;
        }
LABEL_56:
        uint64_t v37 = v12->i64[0];
        if ((v12[-1].u32[3] | ((unint64_t)v12[-1].u32[2] << 32)) < (v12->u32[1] | ((unint64_t)v12->u32[0] << 32))) {
          goto LABEL_57;
        }
        unint64_t v73 = __ROR8__(v37, 32);
        if (v73 < (a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)))
        {
          do
          {
            uint64_t v74 = v12->u32[2];
            uint64_t v75 = v12->u32[3];
            uint64_t v12 = (int8x16_t *)((char *)v12 + 8);
          }
          while (v73 >= (v75 | (unint64_t)(v74 << 32)));
        }
        else
        {
          long long v76 = (int8x16_t *)&v12->u64[1];
          do
          {
            uint64_t v12 = v76;
            if (v76 >= a2) {
              break;
            }
            unint64_t v77 = v76->u32[1] | ((unint64_t)v76->u32[0] << 32);
            long long v76 = (int8x16_t *)((char *)v76 + 8);
          }
          while (v73 >= v77);
        }
        int v78 = a2;
        if (v12 < a2)
        {
          int v78 = a2;
          do
          {
            uint64_t v79 = v78[-1].u32[2];
            uint64_t v80 = v78[-1].u32[3];
            int v78 = (int8x16_t *)((char *)v78 - 8);
          }
          while (v73 < (v80 | (unint64_t)(v79 << 32)));
        }
        while (v12 < v78)
        {
          uint64_t v81 = v12->i64[0];
          v12->i64[0] = v78->i64[0];
          v78->i64[0] = v81;
          do
          {
            uint64_t v82 = v12->u32[2];
            uint64_t v83 = v12->u32[3];
            uint64_t v12 = (int8x16_t *)((char *)v12 + 8);
          }
          while (v73 >= (v83 | (unint64_t)(v82 << 32)));
          do
          {
            uint64_t v84 = v78[-1].u32[2];
            uint64_t v85 = v78[-1].u32[3];
            int v78 = (int8x16_t *)((char *)v78 - 8);
          }
          while (v73 < (v85 | (unint64_t)(v84 << 32)));
        }
        uint64_t v86 = &v12[-1].i64[1];
        BOOL v5 = &v12[-1].u64[1] >= (unint64_t *)a1;
        BOOL v6 = &v12[-1].u64[1] == (unint64_t *)a1;
        if (&v12[-1].u64[1] != (unint64_t *)a1) {
          a1->i64[0] = *v86;
        }
        a5 = 0;
        uint64_t *v86 = v37;
      }
      unint64_t v18 = &v12->u32[2 * v15 + 1];
      unint64_t v19 = *v18 | ((unint64_t)*v16 << 32);
      if (v19 >= (v12->u32[1] | ((unint64_t)v12->u32[0] << 32)))
      {
        if (v17 < v19)
        {
          uint64_t v24 = *(void *)v16;
          *(void *)uint64_t v16 = a2[-1].i64[1];
          a2[-1].i64[1] = v24;
          if ((*v18 | ((unint64_t)*v16 << 32)) < (v12->u32[1] | ((unint64_t)v12->u32[0] << 32)))
          {
            uint64_t v25 = v12->i64[0];
            v12->i64[0] = *(void *)v16;
            *(void *)uint64_t v16 = v25;
          }
        }
      }
      else
      {
        uint64_t v20 = v12->i64[0];
        if (v17 >= v19)
        {
          v12->i64[0] = *(void *)v16;
          *(void *)uint64_t v16 = v20;
          if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) >= __ROR8__(v20, 32)) {
            goto LABEL_23;
          }
          *(void *)uint64_t v16 = a2[-1].i64[1];
        }
        else
        {
          v12->i64[0] = a2[-1].i64[1];
        }
        a2[-1].i64[1] = v20;
      }
LABEL_23:
      long long v28 = &v12->i8[8 * v15];
      unsigned int v30 = *((_DWORD *)v28 - 2);
      long long v29 = v28 - 8;
      uint64_t v31 = (unsigned int *)(v29 + 4);
      unint64_t v32 = *((unsigned int *)v29 + 1) | ((unint64_t)v30 << 32);
      unint64_t v33 = a2[-1].u32[1] | ((unint64_t)a2[-1].u32[0] << 32);
      if (v32 >= (v12->u32[3] | ((unint64_t)v12->u32[2] << 32)))
      {
        if (v33 < v32)
        {
          uint64_t v35 = *(void *)v29;
          *(void *)long long v29 = a2[-1].i64[0];
          a2[-1].i64[0] = v35;
          if ((*v31 | ((unint64_t)*(unsigned int *)v29 << 32)) < (v12->u32[3] | ((unint64_t)v12->u32[2] << 32)))
          {
            uint64_t v36 = v12->i64[1];
            v12->i64[1] = *(void *)v29;
            *(void *)long long v29 = v36;
          }
        }
      }
      else
      {
        uint64_t v34 = v12->i64[1];
        if (v33 >= v32)
        {
          v12->i64[1] = *(void *)v29;
          *(void *)long long v29 = v34;
          if ((a2[-1].u32[1] | ((unint64_t)a2[-1].u32[0] << 32)) >= __ROR8__(v34, 32)) {
            goto LABEL_37;
          }
          *(void *)long long v29 = a2[-1].i64[0];
        }
        else
        {
          v12->i64[1] = a2[-1].i64[0];
        }
        a2[-1].i64[0] = v34;
      }
LABEL_37:
      uint8x8_t v38 = &v12->i8[8 * v15];
      unsigned int v40 = *((_DWORD *)v38 + 2);
      uint64_t v39 = (unsigned int *)(v38 + 8);
      unint64_t v41 = v39 + 1;
      unint64_t v42 = v39[1] | ((unint64_t)v40 << 32);
      unint64_t v43 = a2[-2].u32[3] | ((unint64_t)a2[-2].u32[2] << 32);
      if (v42 >= (v12[1].u32[1] | ((unint64_t)v12[1].u32[0] << 32)))
      {
        if (v43 < v42)
        {
          uint64_t v45 = *(void *)v39;
          *(void *)uint64_t v39 = a2[-2].i64[1];
          a2[-2].i64[1] = v45;
          if ((*v41 | ((unint64_t)*v39 << 32)) < (v12[1].u32[1] | ((unint64_t)v12[1].u32[0] << 32)))
          {
            uint64_t v46 = v12[1].i64[0];
            v12[1].i64[0] = *(void *)v39;
            *(void *)uint64_t v39 = v46;
          }
        }
      }
      else
      {
        uint64_t v44 = v12[1].i64[0];
        if (v43 >= v42)
        {
          v12[1].i64[0] = *(void *)v39;
          *(void *)uint64_t v39 = v44;
          if ((a2[-2].u32[3] | ((unint64_t)a2[-2].u32[2] << 32)) >= __ROR8__(v44, 32)) {
            goto LABEL_46;
          }
          *(void *)uint64_t v39 = a2[-2].i64[1];
        }
        else
        {
          v12[1].i64[0] = a2[-2].i64[1];
        }
        a2[-2].i64[1] = v44;
      }
LABEL_46:
      unint64_t v47 = *v18 | ((unint64_t)*v16 << 32);
      unint64_t v48 = *v31 | ((unint64_t)*(unsigned int *)v29 << 32);
      unint64_t v49 = *v41 | ((unint64_t)*v39 << 32);
      if (v47 >= v48)
      {
        uint64_t v50 = *(void *)v16;
        if (v49 < v47)
        {
          uint64_t v51 = *(void *)v39;
          *(void *)uint64_t v16 = *(void *)v39;
          *(void *)uint64_t v39 = v50;
          uint64_t v50 = v51;
          if ((*v18 | (unint64_t)(v51 << 32)) < v48)
          {
            uint64_t v52 = *(void *)v29;
            *(void *)long long v29 = v51;
            *(void *)uint64_t v16 = v52;
LABEL_54:
            uint64_t v50 = v52;
          }
        }
      }
      else
      {
        uint64_t v50 = *(void *)v29;
        if (v49 < v47)
        {
          *(void *)long long v29 = *(void *)v39;
          *(void *)uint64_t v39 = v50;
          uint64_t v50 = *(void *)v16;
          goto LABEL_55;
        }
        *(void *)long long v29 = *(void *)v16;
        *(void *)uint64_t v16 = v50;
        if (v49 < __ROR8__(v50, 32))
        {
          uint64_t v52 = *(void *)v39;
          *(void *)uint64_t v16 = *(void *)v39;
          *(void *)uint64_t v39 = v50;
          goto LABEL_54;
        }
      }
LABEL_55:
      uint64_t v53 = v12->i64[0];
      v12->i64[0] = v50;
      *(void *)uint64_t v16 = v53;
      --a4;
      if ((a5 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_33:
      uint64_t v37 = v12->i64[0];
LABEL_57:
      uint64_t v54 = 0;
      unint64_t v55 = __ROR8__(v37, 32);
      do
      {
        unint64_t v56 = v12->u32[v54 + 3] | ((unint64_t)v12->u32[v54 + 2] << 32);
        v54 += 2;
      }
      while (v56 < v55);
      int v57 = &v12->i8[v54 * 4];
      BOOL v58 = a2;
      if (v54 == 2)
      {
        BOOL v58 = a2;
        do
        {
          if (v57 >= (char *)v58) {
            break;
          }
          uint64_t v61 = v58[-1].u32[2];
          uint64_t v62 = v58[-1].u32[3];
          BOOL v58 = (int8x16_t *)((char *)v58 - 8);
        }
        while ((v62 | (unint64_t)(v61 << 32)) >= v55);
      }
      else
      {
        do
        {
          uint64_t v59 = v58[-1].u32[2];
          uint64_t v60 = v58[-1].u32[3];
          BOOL v58 = (int8x16_t *)((char *)v58 - 8);
        }
        while ((v60 | (unint64_t)(v59 << 32)) >= v55);
      }
      if (v57 >= (char *)v58)
      {
        int v70 = v57 - 8;
        if (v57 - 8 == (char *)v12) {
          goto LABEL_75;
        }
LABEL_74:
        v12->i64[0] = *(void *)v70;
        goto LABEL_75;
      }
      unint64_t v63 = (unint64_t)v57;
      char v64 = (uint64_t *)v58;
      do
      {
        uint64_t v65 = *(void *)v63;
        *(void *)unint64_t v63 = *v64;
        *char v64 = v65;
        do
        {
          uint64_t v66 = *(unsigned int *)(v63 + 8);
          uint64_t v67 = *(unsigned int *)(v63 + 12);
          v63 += 8;
        }
        while ((v67 | (unint64_t)(v66 << 32)) < v55);
        do
        {
          uint64_t v68 = *((unsigned int *)v64 - 2);
          uint64_t v69 = *((unsigned int *)v64-- - 1);
        }
        while ((v69 | (unint64_t)(v68 << 32)) >= v55);
      }
      while (v63 < (unint64_t)v64);
      int v70 = (char *)(v63 - 8);
      if ((int8x16_t *)(v63 - 8) != v12) {
        goto LABEL_74;
      }
LABEL_75:
      *(void *)int v70 = v37;
      if (v57 < (char *)v58) {
        goto LABEL_78;
      }
      BOOL v71 = sub_8FE790(v12, (int8x16_t *)v70);
      uint64_t v12 = (int8x16_t *)(v70 + 8);
      if (sub_8FE790((int8x16_t *)(v70 + 8), a2)) {
        break;
      }
      if (!v71)
      {
LABEL_78:
        sub_8FDE68(a1, v70, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v12 = (int8x16_t *)(v70 + 8);
      }
    }
    a2 = (int8x16_t *)v70;
    if (!v71) {
      continue;
    }
    return result;
  }
}

BOOL sub_8FE790(int8x16_t *a1, int8x16_t *a2)
{
  switch(((char *)a2 - (char *)a1) >> 3)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) >= (a1->u32[1] | ((unint64_t)a1->u32[0] << 32))) {
        return 1;
      }
      uint64_t v3 = a1->i64[0];
      goto LABEL_7;
    case 3:
      unint64_t v4 = a1->u32[3] | ((unint64_t)a1->u32[2] << 32);
      unint64_t v5 = a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32);
      if (v4 >= (a1->u32[1] | ((unint64_t)a1->u32[0] << 32)))
      {
        if (v5 < v4)
        {
          uint64_t v11 = a1->i64[1];
          a1->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v11;
          if ((a1->u32[3] | ((unint64_t)a1->u32[2] << 32)) < (a1->u32[1] | ((unint64_t)a1->u32[0] << 32)))
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
            return 1;
          }
        }
      }
      else
      {
        uint64_t v3 = a1->i64[0];
        if (v5 < v4)
        {
LABEL_7:
          a1->i64[0] = a2[-1].i64[1];
          a2[-1].i64[1] = v3;
          return 1;
        }
        a1->i64[0] = a1->i64[1];
        a1->i64[1] = v3;
        if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) < __ROR8__(v3, 32))
        {
          a1->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v3;
          return 1;
        }
      }
      return 1;
    case 4:
      sub_2A9374((unsigned int *)a1, &a1->u32[2], (unsigned int *)&a1[1], &a2[-1].u32[2]);
      return 1;
    case 5:
      sub_2A94B0((unsigned int *)a1, &a1->u32[2], (unsigned int *)&a1[1], &a1[1].u32[2], &a2[-1].u32[2]);
      return 1;
    default:
      BOOL v6 = a1 + 1;
      unint64_t v7 = a1->u32[3] | ((unint64_t)a1->u32[2] << 32);
      unint64_t v8 = a1->u32[1] | ((unint64_t)a1->u32[0] << 32);
      unint64_t v9 = a1[1].u32[1] | ((unint64_t)a1[1].u32[0] << 32);
      if (v7 >= v8)
      {
        if (v9 < v7)
        {
          uint64_t v13 = a1->i64[1];
          uint64_t v12 = a1[1].i64[0];
          a1->i64[1] = v12;
          a1[1].i64[0] = v13;
          if (__ROR8__(v12, 32) < v8)
          {
            uint64_t v14 = a1->i64[0];
            a1->i64[0] = v12;
            a1->i64[1] = v14;
          }
        }
      }
      else
      {
        uint64_t v10 = a1->i64[0];
        if (v9 >= v7)
        {
          a1->i64[0] = a1->i64[1];
          a1->i64[1] = v10;
          if (v9 >= __ROR8__(v10, 32)) {
            goto LABEL_25;
          }
          a1->i64[1] = a1[1].i64[0];
        }
        else
        {
          a1->i64[0] = a1[1].i64[0];
        }
        a1[1].i64[0] = v10;
      }
LABEL_25:
      unint64_t v15 = &a1[1].u32[2];
      if (&a1[1].u64[1] == (unint64_t *)a2) {
        return 1;
      }
      uint64_t v16 = 0;
      int v17 = 0;
      break;
  }
  while ((v15[1] | ((unint64_t)*v15 << 32)) >= (v6->u32[1] | ((unint64_t)v6->u32[0] << 32)))
  {
LABEL_34:
    BOOL v6 = (int8x16_t *)v15;
    v16 += 8;
    v15 += 2;
    if (v15 == (unsigned int *)a2) {
      return 1;
    }
  }
  uint64_t v18 = *(void *)v15;
  unint64_t v19 = __ROR8__(*(void *)v15, 32);
  uint64_t v20 = v16;
  do
  {
    *(uint64_t *)((char *)&a1[1].i64[1] + v20) = *(uint64_t *)((char *)a1[1].i64 + v20);
    if (v20 == -16)
    {
      a1->i64[0] = v18;
      if (++v17 != 8) {
        goto LABEL_34;
      }
      return v15 + 2 == (unsigned int *)a2;
    }
    unint64_t v21 = *(unsigned int *)((char *)&a1->u32[3] + v20) | ((unint64_t)*(unsigned int *)((char *)&a1->u32[2] + v20) << 32);
    v20 -= 8;
  }
  while (v19 < v21);
  *(uint64_t *)((char *)&a1[1].i64[1] + v20) = v18;
  if (++v17 != 8) {
    goto LABEL_34;
  }
  return v15 + 2 == (unsigned int *)a2;
}

unint64_t *sub_8FEA80(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = a1;
  if (a1 != a2)
  {
    while (1)
    {
      unint64_t v8 = *v7;
      if (!*(unsigned char *)(a3 + 1424))
      {
        unint64_t v9 = (int *)sub_8DFD1C(a4, *v7, 0, "line");
        uint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
        if (*v10 >= 0x23u)
        {
          uint64_t v11 = v10[17];
          if (v11)
          {
            if (*((unsigned char *)v9 + v11)) {
              break;
            }
          }
        }
      }
      unsigned int v12 = *(unsigned __int8 *)(a3 + 1425);
      if (v12 < sub_8F694C(a4, v8)) {
        break;
      }
      if (++v7 == a2) {
        return a2;
      }
    }
  }
  if (v7 == a2) {
    return a2;
  }
  for (uint64_t i = v7 + 1; i != a2; ++i)
  {
    unint64_t v14 = *i;
    if (!*(unsigned char *)(a3 + 1424))
    {
      unint64_t v15 = (int *)sub_8DFD1C(a4, *i, 0, "line");
      uint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
      if (*v16 >= 0x23u)
      {
        uint64_t v17 = v16[17];
        if (v17)
        {
          if (*((unsigned char *)v15 + v17)) {
            continue;
          }
        }
      }
    }
    unsigned int v18 = *(unsigned __int8 *)(a3 + 1425);
    if (v18 >= sub_8F694C(a4, v14)) {
      *v7++ = *i;
    }
  }
  return v7;
}

int *sub_8FEBDC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int8x16_t result = (int *)sub_498D5C(a1, a2, 0, "stop");
  BOOL v6 = (unsigned __int16 *)((char *)result - *result);
  if (*v6 >= 0x37u && (uint64_t v7 = v6[27]) != 0)
  {
    unint64_t v8 = (unsigned int *)((char *)result + v7);
    uint64_t v9 = *v8;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v11 = (uint64_t *)((char *)v8 + v9 + 4);
    uint64_t v10 = *(unsigned int *)((char *)v8 + v9);
    unint64_t v14 = (void **)a3;
    if (v10)
    {
      uint64_t v12 = 8 * v10;
      do
      {
        if (!*(unsigned char *)(a1 + 3888) || (int8x16_t result = (int *)sub_2AB7E4(*(void *)(a1 + 3872)), result))
        {
          uint64_t v13 = *v11;
          int8x16_t result = (int *)sub_2A98DC(&v14, &v13);
        }
        ++v11;
        v12 -= 8;
      }
      while (v12);
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_8FECAC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int *sub_8FECC8@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int8x16_t result = (int *)sub_498D5C(a1, *a2, 0, "stop");
  BOOL v6 = (unsigned __int16 *)((char *)result - *result);
  if (*v6 >= 0x11u && (uint64_t v7 = v6[8]) != 0)
  {
    unint64_t v8 = (unsigned int *)((char *)result + v7);
    uint64_t v9 = *v8;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v11 = (uint64_t *)((char *)v8 + v9 + 4);
    uint64_t v10 = *(unsigned int *)((char *)v8 + v9);
    unint64_t v14 = (void **)a3;
    if (v10)
    {
      uint64_t v12 = 8 * v10;
      do
      {
        if (!*(unsigned char *)(a1 + 3888) || (int8x16_t result = (int *)sub_2AB7E4(*(void *)(a1 + 3872)), result))
        {
          uint64_t v13 = *v11;
          int8x16_t result = (int *)sub_2A98DC(&v14, &v13);
        }
        ++v11;
        v12 -= 8;
      }
      while (v12);
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_8FED9C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t *sub_8FEDB8(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1;
  if (a1 != a2)
  {
    while (1)
    {
      unint64_t v8 = *v7;
      if (!*(unsigned char *)(a3 + 1424) && (sub_8FEEAC(a4, *v7) & 1) != 0) {
        break;
      }
      unsigned int v9 = *(unsigned __int8 *)(a3 + 1425);
      if (v9 < sub_8FF05C(a4, v8)) {
        break;
      }
      if (++v7 == a2) {
        return a2;
      }
    }
  }
  if (v7 == a2) {
    return a2;
  }
  for (uint64_t i = v7 + 1; i != a2; ++i)
  {
    unint64_t v11 = *i;
    if (*(unsigned char *)(a3 + 1424) || (sub_8FEEAC(a4, *i) & 1) == 0)
    {
      unsigned int v12 = *(unsigned __int8 *)(a3 + 1425);
      if (v12 >= sub_8FF05C(a4, v11)) {
        *v7++ = *i;
      }
    }
  }
  return v7;
}

uint64_t sub_8FEEAC(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (int *)sub_8EF9B8(a1, a2, 0, "system");
  unint64_t v4 = (unsigned __int16 *)((char *)v3 - *v3);
  if (*v4 < 9u) {
    return 1;
  }
  uint64_t v5 = v4[4];
  if (!v5) {
    return 1;
  }
  BOOL v6 = (unsigned int *)((char *)v3 + v5);
  uint64_t v7 = *v6;
  long long __p = 0;
  unint64_t v19 = 0;
  uint64_t v20 = 0;
  unsigned int v9 = (uint64_t *)((char *)v6 + v7 + 4);
  uint64_t v8 = *(unsigned int *)((char *)v6 + v7);
  p_p = &__p;
  if (!v8) {
    return 1;
  }
  uint64_t v10 = 8 * v8;
  do
  {
    if (!*(unsigned char *)(a1 + 3888) || sub_2AB7E4(*(void *)(a1 + 3872)))
    {
      uint64_t v21 = *v9;
      sub_2A98DC(&p_p, &v21);
    }
    ++v9;
    v10 -= 8;
  }
  while (v10);
  unint64_t v14 = (unint64_t *)__p;
  uint64_t v13 = v19;
  if (__p != v19)
  {
    while (1)
    {
      unint64_t v15 = (int *)sub_8DFD1C(a1, *v14, 0, "line");
      uint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
      if (*v16 < 0x23u) {
        break;
      }
      uint64_t v17 = v16[17];
      if (!v17 || !*((unsigned char *)v15 + v17)) {
        break;
      }
      if (++v14 == v13)
      {
        uint64_t v11 = 1;
        uint64_t v13 = (unint64_t *)__p;
        if (__p) {
          goto LABEL_23;
        }
        return v11;
      }
    }
    uint64_t v11 = 0;
    uint64_t v13 = (unint64_t *)__p;
    if (__p) {
      goto LABEL_23;
    }
    return v11;
  }
  uint64_t v11 = 1;
  if (!v19) {
    return v11;
  }
LABEL_23:
  unint64_t v19 = v13;
  operator delete(v13);
  return v11;
}

void sub_8FF03C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_8FF05C(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (int *)sub_8EF9B8(a1, a2, 0, "system");
  unint64_t v4 = (unsigned __int16 *)((char *)v3 - *v3);
  if (*v4 < 0xBu) {
    return 3;
  }
  uint64_t v5 = v4[5];
  if (!v5) {
    return 3;
  }
  BOOL v6 = (unsigned int *)((char *)v3 + v5);
  uint64_t v7 = *v6;
  unint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  unsigned int v9 = (uint64_t *)((char *)v6 + v7 + 4);
  uint64_t v8 = *(unsigned int *)((char *)v6 + v7);
  uint64_t v23 = (void **)&v19;
  if (!v8) {
    return 3;
  }
  uint64_t v10 = 8 * v8;
  do
  {
    if (!*(unsigned char *)(a1 + 3888) || sub_2AB7E4(*(void *)(a1 + 3872)))
    {
      uint64_t v22 = *v9;
      sub_2A98DC(&v23, &v22);
    }
    ++v9;
    v10 -= 8;
  }
  while (v10);
  unint64_t v14 = v19;
  uint64_t v13 = v20;
  uint64_t v11 = 3;
  if (v19 != v20)
  {
    do
    {
      while (1)
      {
        unint64_t v15 = (int *)sub_8F4388(a1, *v14, 0, "market");
        uint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
        if (*v16 < 0x11u) {
          break;
        }
        uint64_t v17 = v16[8];
        if (!v17) {
          break;
        }
        unsigned int v18 = *((unsigned __int8 *)v15 + v17);
        if (v18 >= v11) {
          uint64_t v11 = v11;
        }
        else {
          uint64_t v11 = v18;
        }
        if (++v14 == v13) {
          goto LABEL_24;
        }
      }
      if (v11 <= 1u) {
        uint64_t v11 = v11;
      }
      else {
        uint64_t v11 = 1;
      }
      ++v14;
    }
    while (v14 != v13);
LABEL_24:
    uint64_t v13 = v19;
  }
  if (v13)
  {
    uint64_t v20 = v13;
    operator delete(v13);
  }
  return v11;
}

void sub_8FF1D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_8FF1F0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int8x16_t result = (int *)sub_8ED3D4(a1, a2, 0, "hall");
  BOOL v6 = (unsigned __int16 *)((char *)result - *result);
  if (*v6 >= 0x2Bu && (uint64_t v7 = v6[21]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)result + v7);
    uint64_t v9 = *v8;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v11 = (uint64_t *)((char *)v8 + v9 + 4);
    uint64_t v10 = *(unsigned int *)((char *)v8 + v9);
    unint64_t v14 = (void **)a3;
    if (v10)
    {
      uint64_t v12 = 8 * v10;
      do
      {
        if (!*(unsigned char *)(a1 + 3888) || (int8x16_t result = (int *)sub_2AB7E4(*(void *)(a1 + 3872)), result))
        {
          uint64_t v13 = *v11;
          int8x16_t result = (int *)sub_2A98DC(&v14, &v13);
        }
        ++v11;
        v12 -= 8;
      }
      while (v12);
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_8FF2C0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int *sub_8FF2DC@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int8x16_t result = (int *)sub_8ED3D4(a1, *a2, 0, "hall");
  BOOL v6 = (unsigned __int16 *)((char *)result - *result);
  if (*v6 >= 0xFu && (uint64_t v7 = v6[7]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)result + v7);
    uint64_t v9 = *v8;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v11 = (uint64_t *)((char *)v8 + v9 + 4);
    uint64_t v10 = *(unsigned int *)((char *)v8 + v9);
    unint64_t v14 = (void **)a3;
    if (v10)
    {
      uint64_t v12 = 8 * v10;
      do
      {
        if (!*(unsigned char *)(a1 + 3888) || (int8x16_t result = (int *)sub_2AB7E4(*(void *)(a1 + 3872)), result))
        {
          uint64_t v13 = *v11;
          int8x16_t result = (int *)sub_2A98DC(&v14, &v13);
        }
        ++v11;
        v12 -= 8;
      }
      while (v12);
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_8FF3B0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int *sub_8FF3CC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int8x16_t result = (int *)sub_8ED3D4(a1, a2, 0, "hall");
  BOOL v6 = (unsigned __int16 *)((char *)result - *result);
  if (*v6 >= 0x27u && (uint64_t v7 = v6[19]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)result + v7);
    uint64_t v9 = *v8;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v11 = (uint64_t *)((char *)v8 + v9 + 4);
    uint64_t v10 = *(unsigned int *)((char *)v8 + v9);
    unint64_t v14 = (void **)a3;
    if (v10)
    {
      uint64_t v12 = 8 * v10;
      do
      {
        if (!*(unsigned char *)(a1 + 3888) || (int8x16_t result = (int *)sub_2AB7E4(*(void *)(a1 + 3872)), result))
        {
          uint64_t v13 = *v11;
          int8x16_t result = (int *)sub_2A98DC(&v14, &v13);
        }
        ++v11;
        v12 -= 8;
      }
      while (v12);
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_8FF49C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int *sub_8FF4B8@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int8x16_t result = (int *)sub_8ED3D4(a1, *a2, 0, "hall");
  BOOL v6 = (unsigned __int16 *)((char *)result - *result);
  if (*v6 >= 0x11u && (uint64_t v7 = v6[8]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)result + v7);
    uint64_t v9 = *v8;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v11 = (uint64_t *)((char *)v8 + v9 + 4);
    uint64_t v10 = *(unsigned int *)((char *)v8 + v9);
    unint64_t v14 = (void **)a3;
    if (v10)
    {
      uint64_t v12 = 8 * v10;
      do
      {
        if (!*(unsigned char *)(a1 + 3888) || (int8x16_t result = (int *)sub_2AB7E4(*(void *)(a1 + 3872)), result))
        {
          uint64_t v13 = *v11;
          int8x16_t result = (int *)sub_2A98DC(&v14, &v13);
        }
        ++v11;
        v12 -= 8;
      }
      while (v12);
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_8FF58C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int *sub_8FF5A8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int8x16_t result = (int *)sub_8ED928(a1, a2, 0, "station");
  BOOL v6 = (unsigned __int16 *)((char *)result - *result);
  if (*v6 >= 0x2Du && (uint64_t v7 = v6[22]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)result + v7);
    uint64_t v9 = *v8;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v11 = (uint64_t *)((char *)v8 + v9 + 4);
    uint64_t v10 = *(unsigned int *)((char *)v8 + v9);
    unint64_t v14 = (void **)a3;
    if (v10)
    {
      uint64_t v12 = 8 * v10;
      do
      {
        if (!*(unsigned char *)(a1 + 3888) || (int8x16_t result = (int *)sub_2AB7E4(*(void *)(a1 + 3872)), result))
        {
          uint64_t v13 = *v11;
          int8x16_t result = (int *)sub_2A98DC(&v14, &v13);
        }
        ++v11;
        v12 -= 8;
      }
      while (v12);
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_8FF678(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int *sub_8FF694@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int8x16_t result = (int *)sub_8ED928(a1, *a2, 0, "station");
  BOOL v6 = (unsigned __int16 *)((char *)result - *result);
  if (*v6 >= 0x2Bu && (uint64_t v7 = v6[21]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)result + v7);
    uint64_t v9 = *v8;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v11 = (uint64_t *)((char *)v8 + v9 + 4);
    uint64_t v10 = *(unsigned int *)((char *)v8 + v9);
    unint64_t v14 = (void **)a3;
    if (v10)
    {
      uint64_t v12 = 8 * v10;
      do
      {
        if (!*(unsigned char *)(a1 + 3888) || (int8x16_t result = (int *)sub_2AB7E4(*(void *)(a1 + 3872)), result))
        {
          uint64_t v13 = *v11;
          int8x16_t result = (int *)sub_2A98DC(&v14, &v13);
        }
        ++v11;
        v12 -= 8;
      }
      while (v12);
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_8FF768(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int *sub_8FF784@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int8x16_t result = (int *)sub_8ED928(a1, *a2, 0, "station");
  BOOL v6 = (unsigned __int16 *)((char *)result - *result);
  if (*v6 >= 0x11u && (uint64_t v7 = v6[8]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)result + v7);
    uint64_t v9 = *v8;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v11 = (uint64_t *)((char *)v8 + v9 + 4);
    uint64_t v10 = *(unsigned int *)((char *)v8 + v9);
    unint64_t v14 = (void **)a3;
    if (v10)
    {
      uint64_t v12 = 8 * v10;
      do
      {
        if (!*(unsigned char *)(a1 + 3888) || (int8x16_t result = (int *)sub_2AB7E4(*(void *)(a1 + 3872)), result))
        {
          uint64_t v13 = *v11;
          int8x16_t result = (int *)sub_2A98DC(&v14, &v13);
        }
        ++v11;
        v12 -= 8;
      }
      while (v12);
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_8FF858(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_8FF874()
{
  byte_25D17B7 = 1;
  word_25D17A0 = 65;
  byte_25D17CF = 1;
  word_25D17B8 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25D1860 = 0u;
  *(_OWORD *)&qword_25D1870 = 0u;
  dword_25D1880 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25D1860, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25D1860, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25D1860, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25D1860, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25D17E7 = 8;
  strcpy((char *)&qword_25D17D0, "any_mode");
  byte_25D17FF = 7;
  strcpy((char *)&dword_25D17E8, "cycling");
  byte_25D1817 = 7;
  strcpy((char *)&dword_25D1800, "driving");
  byte_25D182F = 7;
  strcpy((char *)&dword_25D1818, "walking");
  qword_25D1838 = 0;
  qword_25D1840 = 0;
  qword_25D1830 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25D1830 = (uint64_t)v0;
  qword_25D1838 = (uint64_t)(v0 + 9);
  qword_25D1840 = (uint64_t)(v0 + 9);
  qword_25D1848 = 0;
  qword_25D1850 = 0;
  unk_25D1858 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25D1850 = (uint64_t)(v1 + 9);
  unk_25D1858 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25D1848 = (uint64_t)v1;
  return result;
}

void sub_8FFB3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25D1870) {
    sub_20AC230((void **)qword_25D1870);
  }
  uint64_t v37 = (void *)xmmword_25D1860;
  *(void *)&xmmword_25D1860 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_8FFBDC(uint64_t a1, void *a2)
{
  __p[23] = 11;
  strcpy(__p, "ttl_seconds");
  *(_DWORD *)a1 = 10 * sub_319F48(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(void *)long long __p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_20B9240;
  strcpy(*(char **)__p, "erase_duplicate_incidents_by_group_id");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(unsigned char *)(a1 + 4) = v4;
  *(void *)long long __p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_20B8FD0;
  strcpy(*(char **)__p, "include_in_station_walking_leg_times");
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(unsigned char *)(a1 + 5) = v5;
  return a1;
}

void sub_8FFD18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_8FFD3C(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v18 = 0;
  unint64_t v19 = operator new(0x28uLL);
  long long v20 = xmmword_20B9240;
  strcpy((char *)v19, "TransitNearbyScheduleComponentBuilder");
  long long __p = 0;
  uint64_t v17 = 0;
  char v10 = sub_374CDC((uint64_t)a2, (uint64_t)&v19, (uint64_t *)&__p);
  sub_8FFBDC(a1, v10);
  int v11 = (void **)__p;
  if (__p)
  {
    uint64_t v12 = v17;
    char v13 = __p;
    if (v17 != __p)
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 3;
      }
      while (v12 != v11);
      char v13 = __p;
    }
    uint64_t v17 = v11;
    operator delete(v13);
  }
  if (SHIBYTE(v20) < 0) {
    operator delete(v19);
  }
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = sub_3758AC(a2);
  *(void *)(a1 + 24) = sub_3757C8(a2);
  *(void *)(a1 + 32) = sub_375500(a2);
  *(void *)(a1 + 40) = sub_3755E4(a2);
  *(_DWORD *)(a1 + 48) = a4;
  *(void *)(a1 + 56) = a5;
  int v14 = (uint64_t *)sub_374EF4(a2);
  sub_688A04(v14, 5u, *(_DWORD *)(a3 + 968), (uint64_t *)(a1 + 64));
  return a1;
}

void sub_8FFE94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_8FFEB8(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, uint64_t a5)
{
  return sub_8FFD3C(a1, a2, a3, a4, a5);
}

void sub_8FFEC0(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a2;
  uint64_t v4 = a1;
  uint64_t i = a3;
  *(void *)(a3 + 8) = 0x27FFFFFFFLL;
  *(void *)a3 = &off_243B0D0;
  *(_OWORD *)(a3 + 16) = 0u;
  uint64_t v146 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  BOOL v6 = (unint64_t ***)a2[49];
  v147 = (unint64_t ***)a2[50];
  if (v6 == v147) {
    goto LABEL_204;
  }
  char v153 = a2 + 55;
  int v148 = (int64x2_t *)(a3 + 40);
  int64x2_t v149 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  do
  {
    __p[1] = 0;
    __p[0] = 0;
    v189 = 0;
    int v194 = -1;
    LODWORD(v195[0]) = -1;
    *(_DWORD *)((char *)v195 + 3) = -1;
    memset((char *)v195 + 7, 0, 26);
    uint64_t v197 = 0;
    long long v196 = 0uLL;
    char v198 = 0;
    v200 = 0;
    v201 = 0;
    v199 = 0;
    sub_901210((void *)v4, v6, v153, (uint64_t)v174);
    if (SHIBYTE(v189) < 0) {
      operator delete(__p[0]);
    }
    *(_OWORD *)long long __p = *(_OWORD *)v174;
    v189 = v175;
    sub_901718((void *)v4, v6, v153, (uint64_t)v174);
    sub_4F377C((uint64_t)&v190, (uint64_t)v174);
    v195[0] = v178;
    if (SHIBYTE(v195[3]) < 0) {
      operator delete((void *)v195[1]);
    }
    char v7 = 0;
    *(_OWORD *)&v195[1] = v179;
    v195[3] = v180;
    HIBYTE(v180) = 0;
    LOBYTE(v179) = 0;
    LOBYTE(v195[4]) = v181;
    if (SHIBYTE(v197) < 0)
    {
      operator delete((void *)v196);
      char v7 = HIBYTE(v180);
    }
    long long v196 = v182;
    uint64_t v197 = v183;
    HIBYTE(v183) = 0;
    LOBYTE(v182) = 0;
    char v198 = (char)v184;
    if (v7 < 0)
    {
      operator delete((void *)v179);
      int v8 = (int)v177;
      if (v177 == 1)
      {
LABEL_16:
        uint64_t v9 = v174[1];
        if (!v174[1]) {
          goto LABEL_19;
        }
        v175 = v174[1];
        goto LABEL_18;
      }
    }
    else
    {
      int v8 = (int)v177;
      if (v177 == 1) {
        goto LABEL_16;
      }
    }
    if (!v8 && v176 < 0)
    {
      uint64_t v9 = v174[1];
LABEL_18:
      operator delete(v9);
    }
LABEL_19:
    char v10 = *v6;
    std::string v150 = v6[1];
    char v151 = v6;
    if (*v6 != v150)
    {
      while (1)
      {
        *(_OWORD *)v165 = 0u;
        memset(v166, 0, sizeof(v166));
        int64x2_t v167 = v149;
        unint64_t v168 = 0x8000000080000000;
        memset(__dst, 0, sizeof(__dst));
        long long v170 = 0u;
        v171 = 0;
        sub_9018DC((uint64_t *)v4, (uint64_t)v10, v153, (uint64_t)v174);
        if (SBYTE7(v166[0]) < 0) {
          operator delete(v165[0]);
        }
        *(_OWORD *)v165 = *(_OWORD *)v174;
        *(void *)&v166[0] = v175;
        sub_901FD0(v4, (uint64_t)v10, v153, (uint64_t)v174);
        if (SHIBYTE(v166[1]) < 0) {
          operator delete(*((void **)&v166[0] + 1));
        }
        *(_OWORD *)((char *)v166 + 8) = *(_OWORD *)v174;
        *((void *)&v166[1] + 1) = v175;
        char v154 = v10;
        if (__dst != (void **)v10) {
          break;
        }
LABEL_49:
        char v172 = *((unsigned char *)v10 + 24);
        sub_9102C0((uint64_t)v174, *(void *)(v4 + 16), *(void *)(v4 + 32), *(void *)(v4 + 40), *(_DWORD *)(v4 + 48));
        uint64_t v23 = (unsigned char *)sub_9102FC((uint64_t)v174, (char **)v10 + 4);
        uint64_t v24 = sub_5F3038(v23, *(unsigned char *)(v4 + 4));
        sub_911E64((uint64_t)v24, *(uint64_t **)(v4 + 56));
        uint64_t v25 = *v10;
        v159 = v10[1];
        if (*v10 != v159)
        {
          do
          {
            uint64_t v36 = v3[55];
            if (0xAAAAAAAAAAAAAAABLL * ((v3[56] - v36) >> 4) <= *v25) {
              sub_66748();
            }
            uint64_t v37 = (char **)(v36 + 48 * *v25);
            uint64_t v39 = *v37;
            uint8x8_t v38 = v37[1];
            uint64_t v40 = v38 - v39;
            if (v38 - v39 < 1) {
              goto LABEL_59;
            }
            uint64_t v41 = v40 >> 3;
            unint64_t v42 = (unint64_t)__dst[3];
            unint64_t v43 = (char *)__dst[4];
            int64_t v44 = (char *)__dst[4] - (char *)__dst[3];
            int64_t v45 = ((char *)__dst[4] - (char *)__dst[3]) >> 3;
            uint64_t v46 = (char *)__dst[3] + (((char *)__dst[4] - (char *)__dst[3]) & 0xFFFFFFFFFFFFFFF8);
            if (v40 >> 3 <= ((char *)__dst[5] - (char *)__dst[4]) >> 3)
            {
              BOOL v58 = (char *)((char *)__dst[4] - (char *)v46);
              uint64_t v59 = ((char *)__dst[4] - (char *)v46) >> 3;
              if (v59 >= v41)
              {
                uint64_t v60 = &v39[8 * v41];
                unint64_t v63 = (char *)__dst[4];
              }
              else
              {
                uint64_t v60 = &v39[8 * v59];
                int64_t v61 = v38 - v60;
                if (v38 != v60)
                {
                  v157 = (char *)__dst[3] + (((char *)__dst[4] - (char *)__dst[3]) & 0xFFFFFFFFFFFFFFF8);
                  int64_t v62 = ((char *)__dst[4] - (char *)__dst[3]) >> 3;
                  memmove(__dst[4], &v39[8 * v59], v38 - v60);
                  int64_t v45 = v62;
                  uint64_t v46 = v157;
                }
                unint64_t v63 = &v43[v61];
                __dst[4] = &v43[v61];
                uint64_t v4 = a1;
                if ((uint64_t)v58 < 1) {
                  goto LABEL_59;
                }
              }
              char v64 = &v46[8 * v41];
              size_t v65 = v63 - v64;
              uint64_t v66 = (v63 - v64) >> 3;
              uint64_t v67 = &v63[-8 * v41];
              uint64_t v68 = v63;
              if (v67 < v43)
              {
                unint64_t v69 = (v44 & 0xFFFFFFFFFFFFFFF8) + v65;
                unint64_t v70 = v42 + v69 + 8;
                if ((unint64_t)v43 > v70) {
                  unint64_t v70 = (unint64_t)v43;
                }
                unint64_t v71 = v70 + ~v42 - v69;
                if (v71 < 0x58)
                {
                  uint64_t v68 = v63;
                  goto LABEL_105;
                }
                uint64_t v68 = v63;
                if ((unint64_t)&v64[-(v44 & 0xFFFFFFFFFFFFFFF8) - v42] < 0x20) {
                  goto LABEL_217;
                }
                uint64_t v89 = (v71 >> 3) + 1;
                uint64_t v90 = 8 * (v89 & 0x3FFFFFFFFFFFFFFCLL);
                v67 += v90;
                uint64_t v68 = &v63[v90];
                unsigned int v91 = v63 + 16;
                BOOL v92 = (long long *)(v42 + 8 * v66 + 8 * v45 + 16);
                uint64_t v93 = v89 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v94 = *v92;
                  *(v91 - 1) = *(v92 - 1);
                  *unsigned int v91 = v94;
                  v91 += 2;
                  v92 += 2;
                  v93 -= 4;
                }
                while (v93);
                if (v89 != (v89 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_217:
                  do
                  {
LABEL_105:
                    uint64_t v95 = *(void *)v67;
                    v67 += 8;
                    *(void *)uint64_t v68 = v95;
                    v68 += 8;
                  }
                  while (v67 < v43);
                }
              }
              __dst[4] = v68;
              if (v63 != v64)
              {
                uint64_t v96 = v46;
                memmove(&v63[-8 * v66], v46, v65);
                uint64_t v46 = v96;
              }
              if (v60 != v39) {
                memmove(v46, v39, v60 - v39);
              }
              goto LABEL_59;
            }
            unint64_t v47 = v45 + v41;
            if ((unint64_t)(v45 + v41) >> 61) {
              sub_2E00();
            }
            int64_t v48 = (char *)__dst[5] - (char *)__dst[3];
            if (((char *)__dst[5] - (char *)__dst[3]) >> 2 > v47) {
              unint64_t v47 = v48 >> 2;
            }
            BOOL v49 = (unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8;
            unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
            if (!v49) {
              unint64_t v50 = v47;
            }
            unint64_t v156 = v50;
            if (v50)
            {
              if (v50 >> 61) {
                sub_188D718();
              }
              int64_t v51 = ((char *)__dst[4] - (char *)__dst[3]) >> 3;
              uint64_t v52 = (char *)__dst[3] + (((char *)__dst[4] - (char *)__dst[3]) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v53 = operator new(8 * v50);
              uint64_t v46 = v52;
              int64_t v45 = v51;
              uint64_t v54 = &v53[8 * v51];
              unint64_t v55 = &v54[8 * v41];
              unint64_t v56 = v40 - 8;
              if ((unint64_t)(v40 - 8) < 0x38)
              {
LABEL_71:
                int v57 = v54;
                do
                {
LABEL_88:
                  uint64_t v79 = *(void *)v39;
                  v39 += 8;
                  *(void *)int v57 = v79;
                  v57 += 8;
                }
                while (v57 != v55);
                goto LABEL_89;
              }
            }
            else
            {
              uint64_t v53 = 0;
              uint64_t v54 = (char *)(8 * v45);
              unint64_t v55 = (char *)(8 * v45 + 8 * v41);
              unint64_t v56 = v40 - 8;
              if ((unint64_t)(v40 - 8) < 0x38) {
                goto LABEL_71;
              }
            }
            int v57 = v54;
            if ((unint64_t)(&v53[v44 & 0xFFFFFFFFFFFFFFF8] - v39) < 0x20) {
              goto LABEL_88;
            }
            uint64_t v72 = (v56 >> 3) + 1;
            uint64_t v73 = 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
            int v57 = &v54[v73];
            uint64_t v74 = &v39[v73];
            uint64_t v75 = (long long *)(v39 + 16);
            long long v76 = &v53[8 * v45 + 16];
            uint64_t v77 = v72 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v78 = *v75;
              *(v76 - 1) = *(v75 - 1);
              *long long v76 = v78;
              v75 += 2;
              v76 += 2;
              v77 -= 4;
            }
            while (v77);
            uint64_t v39 = v74;
            if (v72 != (v72 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_88;
            }
LABEL_89:
            if ((char *)v42 != v43)
            {
              if ((unint64_t)(v44 - 8) >= 0x68)
              {
                uint64_t v80 = v46;
                if (v42 + (v44 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v53[v44 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
                {
                  unint64_t v81 = ((unint64_t)(v44 - 8) >> 3) + 1;
                  uint64_t v82 = 8 * (v81 & 0x3FFFFFFFFFFFFFFCLL);
                  uint64_t v80 = &v46[-v82];
                  v54 -= v82;
                  uint64_t v83 = &v53[8 * v45 - 16];
                  uint64_t v84 = (long long *)(v42 + 8 * v45 - 16);
                  uint64_t v85 = v81 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v86 = *v84;
                    *(v83 - 1) = *(v84 - 1);
                    *uint64_t v83 = v86;
                    v83 -= 2;
                    v84 -= 2;
                    v85 -= 4;
                  }
                  while (v85);
                  if (v81 == (v81 & 0x3FFFFFFFFFFFFFFCLL)) {
                    goto LABEL_97;
                  }
                }
              }
              else
              {
                uint64_t v80 = v46;
              }
              do
              {
                uint64_t v87 = *((void *)v80 - 1);
                v80 -= 8;
                *((void *)v54 - 1) = v87;
                v54 -= 8;
              }
              while (v80 != (char *)v42);
            }
LABEL_97:
            size_t v88 = v43 - v46;
            if (v88) {
              memmove(v55, v46, v88);
            }
            __dst[3] = v54;
            __dst[4] = &v55[v88];
            __dst[5] = &v53[8 * v156];
            uint64_t v4 = a1;
            if (v42) {
              operator delete((void *)v42);
            }
LABEL_59:
            ++v25;
            uint64_t v3 = a2;
          }
          while (v25 != v159);
        }
        uint64_t v26 = (uint64_t *)__dst[3];
        uint64_t v27 = (uint64_t *)__dst[4];
        for (uint64_t i = a3; v26 != v27; ++v26)
        {
          uint64_t v97 = *v26;
          uint64_t v98 = v3[52];
          if (0xEEEEEEEEEEEEEEEFLL * ((v3[53] - v98) >> 3) <= *v26) {
            sub_66748();
          }
          uint64_t v99 = (unsigned int *)(v98 + 120 * v97);
          uint64_t v100 = (int *)sub_369F8C(*(void *)(v4 + 40), v99[1] | ((unint64_t)*v99 << 32), 0, "trip");
          uint64_t v101 = *(void *)((char *)v100 + *(unsigned __int16 *)((char *)v100 - *v100 + 6));
          uint64_t v102 = (uint64_t *)operator new(8uLL);
          v162 = v102;
          *uint64_t v102 = v101;
          v163 = v102 + 1;
          v164 = v102 + 1;
          sub_91033C((uint64_t)v174, (char **)&v162);
          if (v162)
          {
            v163 = (uint64_t *)v162;
            operator delete(v162);
          }
          uint64_t v104 = *v99;
          uint64_t v103 = v99[1];
          unsigned int v105 = v99[3];
          uint64_t v106 = sub_369B60(*(void *)(v4 + 40), v103 | (v104 << 32), 0);
          uint64_t v107 = &v106[-*(int *)v106];
          if (*(unsigned __int16 *)v107 < 5u)
          {
            uint64_t v108 = 0;
          }
          else
          {
            uint64_t v108 = *((unsigned __int16 *)v107 + 2);
            if (*((_WORD *)v107 + 2)) {
              v108 += (uint64_t)&v106[*(unsigned int *)&v106[v108]];
            }
          }
          uint64_t v109 = (int *)(v108 + 4 * v104 + 4 + *(unsigned int *)(v108 + 4 * v104 + 4));
          unint64_t v110 = (unsigned __int16 *)((char *)v109 - *v109);
          if (*v110 >= 0xDu && (uint64_t v111 = v110[6]) != 0) {
            int v112 = *(int *)((char *)v109 + v111);
          }
          else {
            int v112 = -1;
          }
          uint64_t v113 = *(void *)&v106[24 * v112
                                + 4
                                + 24 * v105
                                + *((unsigned __int16 *)v107 + 3)
                                + *(unsigned int *)&v106[*((unsigned __int16 *)v107 + 3)]];
          unint64_t v114 = (uint64_t *)operator new(8uLL);
          v162 = v114;
          *unint64_t v114 = v113;
          v163 = v114 + 1;
          v164 = v114 + 1;
          sub_91037C((uint64_t)v174, (char **)&v162);
          if (v162)
          {
            v163 = (uint64_t *)v162;
            operator delete(v162);
          }
          uint64_t v115 = sub_90D4E4((uint64_t *)(v98 + 120 * v97 + 96), *(void *)(v4 + 32), *(unsigned __int8 *)(v4 + 5));
          if (v115 != 0x7FFFFFFFFFFFFFFFLL)
          {
            if (v167.i64[1] == 0x7FFFFFFFFFFFFFFFLL || v167.i64[1] < v115) {
              v167.i64[1] = v115;
            }
            if (v167.i64[0] == 0x7FFFFFFFFFFFFFFFLL || v167.i64[0] > v115) {
              v167.i64[0] = v115;
            }
          }
          if (v116 != 0x7FFFFFFF)
          {
            if (HIDWORD(v168) == 0x7FFFFFFF || SHIDWORD(v168) < v116) {
              HIDWORD(v168) = v116;
            }
            if (v168 == 0x7FFFFFFF || (int)v168 > v116) {
              LODWORD(v168) = v116;
            }
          }
        }
        sub_910800((uint64_t *)v174, (uint64_t *)&v162);
        long long v28 = (uint64_t *)v162;
        long long v29 = v163;
        v161 = 0;
        long long v160 = 0uLL;
        if (v163 != v162)
        {
          unint64_t v30 = 0x823EE08FB823EE09 * (((char *)v163 - (unsigned char *)v162) >> 3);
          if (v30 >> 61) {
            sub_2E00();
          }
          uint64_t v31 = (char *)operator new(0x11F7047DC11F7048 * (((char *)v163 - (unsigned char *)v162) >> 3));
          *(void *)&long long v160 = v31;
          *((void *)&v160 + 1) = v31;
          v161 = &v31[8 * v30];
          do
          {
            uint64_t v173 = *v28;
            uint64_t v31 = sub_3FD5B4((void **)&v160, v31, &v173) + 8;
            v28 += 57;
          }
          while (v28 != v29);
        }
        if ((void)v170)
        {
          *((void *)&v170 + 1) = v170;
          operator delete((void *)v170);
        }
        long long v170 = v160;
        v171 = v161;
        unint64_t v32 = *(void *)(a3 + 48);
        unint64_t v33 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v32 - *(void *)(a3 + 40)) >> 3);
        uint64_t v34 = v200;
        if (v200 >= v201)
        {
          int64_t v117 = (char *)v199;
          int64_t v118 = v200 - (unsigned char *)v199;
          uint64_t v119 = (v200 - (unsigned char *)v199) >> 3;
          unint64_t v120 = v119 + 1;
          if ((unint64_t)(v119 + 1) >> 61) {
            sub_2E00();
          }
          uint64_t v121 = v201 - (unsigned char *)v199;
          if ((v201 - (unsigned char *)v199) >> 2 > v120) {
            unint64_t v120 = v121 >> 2;
          }
          if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v122 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v122 = v120;
          }
          if (v122)
          {
            if (v122 >> 61) {
              sub_188D718();
            }
            unint64_t v123 = (char *)operator new(8 * v122);
            uint64_t v124 = (unint64_t *)&v123[8 * v119];
            unint64_t *v124 = v33;
            uint64_t v35 = (uint64_t)(v124 + 1);
            if (v34 != v117)
            {
LABEL_148:
              unint64_t v125 = v34 - 8 - v117;
              BOOL v6 = v151;
              if (v125 >= 0x58)
              {
                unint64_t v126 = v34 - &v123[v118];
                uint64_t i = a3;
                if (v126 >= 0x20)
                {
                  uint64_t v127 = (v125 >> 3) + 1;
                  uint64_t v128 = 8 * (v127 & 0x3FFFFFFFFFFFFFFCLL);
                  uint64_t v129 = &v34[-v128];
                  uint64_t v124 = (unint64_t *)((char *)v124 - v128);
                  unint64_t v130 = &v123[8 * v119 - 16];
                  unint64_t v131 = v34 - 16;
                  uint64_t v132 = v127 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v133 = *(_OWORD *)v131;
                    *((_OWORD *)v130 - 1) = *((_OWORD *)v131 - 1);
                    *(_OWORD *)unint64_t v130 = v133;
                    v130 -= 32;
                    v131 -= 32;
                    v132 -= 4;
                  }
                  while (v132);
                  uint64_t v34 = v129;
                  if (v127 == (v127 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_157:
                    v199 = v124;
                    v200 = (char *)v35;
                    v201 = &v123[8 * v122];
                    if (v117)
                    {
                      operator delete(v117);
                      unint64_t v32 = *(void *)(i + 48);
                    }
                    goto LABEL_159;
                  }
                }
              }
              else
              {
                uint64_t i = a3;
              }
              do
              {
                unint64_t v134 = *((void *)v34 - 1);
                v34 -= 8;
                *--uint64_t v124 = v134;
              }
              while (v34 != v117);
              goto LABEL_157;
            }
          }
          else
          {
            unint64_t v123 = 0;
            uint64_t v124 = (unint64_t *)(8 * v119);
            *(void *)(8 * v119) = v33;
            uint64_t v35 = 8 * v119 + 8;
            if (v34 != v117) {
              goto LABEL_148;
            }
          }
          BOOL v6 = v151;
          uint64_t i = a3;
          goto LABEL_157;
        }
        *(void *)v200 = v33;
        uint64_t v35 = (uint64_t)(v34 + 8);
        BOOL v6 = v151;
LABEL_159:
        v200 = (char *)v35;
        if (v32 >= *(void *)(i + 56))
        {
          v138 = sub_902600(v148, (uint64_t)v165);
        }
        else
        {
          long long v135 = *(_OWORD *)v165;
          *(void *)(v32 + 16) = *(void *)&v166[0];
          *(_OWORD *)unint64_t v32 = v135;
          v165[1] = 0;
          *(void *)&v166[0] = 0;
          v165[0] = 0;
          uint64_t v136 = *((void *)&v166[1] + 1);
          *(_OWORD *)(v32 + 24) = *(_OWORD *)((char *)v166 + 8);
          *(void *)(v32 + 40) = v136;
          memset((char *)v166 + 8, 0, 24);
          unint64_t v137 = v168;
          *(int64x2_t *)(v32 + 48) = v167;
          *(void *)(v32 + 64) = v137;
          *(void *)(v32 + 72) = 0;
          *(void *)(v32 + 80) = 0;
          *(void *)(v32 + 88) = 0;
          *(_OWORD *)(v32 + 72) = *(_OWORD *)__dst;
          *(_OWORD *)long long __dst = 0uLL;
          *(void **)(v32 + 88) = __dst[2];
          *(void *)(v32 + 96) = 0;
          __dst[2] = 0;
          *(void *)(v32 + 104) = 0;
          *(void *)(v32 + 112) = 0;
          *(_OWORD *)(v32 + 96) = *(_OWORD *)&__dst[3];
          __dst[3] = 0;
          __dst[4] = 0;
          *(void **)(v32 + 112) = __dst[5];
          *(void *)(v32 + 120) = 0;
          __dst[5] = 0;
          *(void *)(v32 + 128) = 0;
          *(void *)(v32 + 136) = 0;
          *(_OWORD *)(v32 + 120) = v170;
          *(void *)(v32 + 136) = v171;
          long long v170 = 0uLL;
          v171 = 0;
          *(unsigned char *)(v32 + 144) = v172;
          v138 = (char *)(v32 + 152);
        }
        *(void *)(i + 48) = v138;
        char v139 = (uint64_t *)v162;
        if (v162)
        {
          uint64_t v140 = (uint64_t)v163;
          int v141 = v162;
          if (v163 != v162)
          {
            do
              uint64_t v140 = sub_361164(v140 - 456);
            while ((uint64_t *)v140 != v139);
            int v141 = v162;
          }
          v163 = v139;
          operator delete(v141);
        }
        if (v186)
        {
          v187 = v186;
          operator delete(v186);
        }
        if (v184)
        {
          v185 = v184;
          operator delete(v184);
        }
        if ((void)v182)
        {
          *((void *)&v182 + 1) = v182;
          operator delete((void *)v182);
        }
        if (*((void *)&v179 + 1))
        {
          uint64_t v180 = *((void *)&v179 + 1);
          operator delete(*((void **)&v179 + 1));
        }
        if (v177)
        {
          v178 = v177;
          operator delete(v177);
        }
        if ((void)v170)
        {
          *((void *)&v170 + 1) = v170;
          operator delete((void *)v170);
        }
        if (__dst[3])
        {
          __dst[4] = __dst[3];
          operator delete(__dst[3]);
        }
        if (__dst[0])
        {
          __dst[1] = __dst[0];
          operator delete(__dst[0]);
        }
        if (SHIBYTE(v166[1]) < 0)
        {
          operator delete(*((void **)&v166[0] + 1));
          if ((SBYTE7(v166[0]) & 0x80000000) == 0) {
            goto LABEL_22;
          }
LABEL_185:
          operator delete(v165[0]);
          char v10 = v154 + 7;
          if (v154 + 7 == v150) {
            goto LABEL_186;
          }
        }
        else
        {
          if (SBYTE7(v166[0]) < 0) {
            goto LABEL_185;
          }
LABEL_22:
          char v10 = v154 + 7;
          if (v154 + 7 == v150) {
            goto LABEL_186;
          }
        }
      }
      int v11 = *v10;
      uint64_t v12 = v10[1];
      int64_t v13 = (char *)v12 - (char *)*v10;
      unint64_t v14 = v13 >> 3;
      uint64_t v15 = (uint64_t)__dst[2];
      uint64_t v16 = (char *)__dst[0];
      if (v13 >> 3 > (unint64_t)(((char *)__dst[2] - (char *)__dst[0]) >> 3))
      {
        if (__dst[0])
        {
          __dst[1] = __dst[0];
          operator delete(__dst[0]);
          uint64_t v15 = 0;
          memset(__dst, 0, 24);
        }
        if (v13 < 0) {
          goto LABEL_211;
        }
        uint64_t v17 = v15 >> 2;
        if (v15 >> 2 <= v14) {
          uint64_t v17 = v13 >> 3;
        }
        unint64_t v18 = (unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v17;
        if (v18 >> 61) {
LABEL_211:
        }
          sub_2E00();
        unint64_t v19 = (char *)operator new(8 * v18);
        uint64_t v16 = v19;
        __dst[0] = v19;
        __dst[1] = v19;
        __dst[2] = &v19[8 * v18];
        if (v12 != v11) {
          memcpy(v19, v11, v13);
        }
        goto LABEL_48;
      }
      unint64_t v20 = ((char *)__dst[1] - (char *)__dst[0]) >> 3;
      if (v20 >= v14)
      {
        if (v12 == v11)
        {
LABEL_48:
          __dst[1] = &v16[v13];
          char v10 = v154;
          goto LABEL_49;
        }
        uint64_t v22 = __dst[0];
        uint64_t v21 = v11;
      }
      else
      {
        if (__dst[1] != __dst[0])
        {
          memmove(__dst[0], v11, (char *)__dst[1] - (char *)__dst[0]);
          uint64_t v16 = (char *)__dst[1];
        }
        uint64_t v21 = &v11[v20];
        int64_t v13 = (char *)v12 - (char *)v21;
        if (v12 == v21) {
          goto LABEL_48;
        }
        uint64_t v22 = v16;
      }
      memmove(v22, v21, v13);
      goto LABEL_48;
    }
LABEL_186:
    unint64_t v142 = *(void *)(i + 24);
    if (v142 >= *(void *)(i + 32))
    {
      std::string v143 = sub_902940(v146, (long long *)__p);
    }
    else
    {
      sub_8E8950(*(void **)(i + 24), (long long *)__p);
      std::string v143 = (void *)(v142 + 160);
      *(void *)(i + 24) = v142 + 160;
    }
    *(void *)(i + 24) = v143;
    if (v199)
    {
      v200 = (char *)v199;
      operator delete(v199);
    }
    if ((SHIBYTE(v197) & 0x80000000) == 0)
    {
      if ((SHIBYTE(v195[3]) & 0x80000000) == 0) {
        goto LABEL_193;
      }
LABEL_198:
      operator delete((void *)v195[1]);
      int v144 = v194;
      if (v194 != 1) {
        goto LABEL_194;
      }
LABEL_199:
      long long v145 = v191;
      if (!v191) {
        goto LABEL_202;
      }
      v192 = v191;
      goto LABEL_201;
    }
    operator delete((void *)v196);
    if (SHIBYTE(v195[3]) < 0) {
      goto LABEL_198;
    }
LABEL_193:
    int v144 = v194;
    if (v194 == 1) {
      goto LABEL_199;
    }
LABEL_194:
    if (!v144 && v193 < 0)
    {
      long long v145 = v191;
LABEL_201:
      operator delete(v145);
    }
LABEL_202:
    if (SHIBYTE(v189) < 0) {
      operator delete(__p[0]);
    }
    v6 += 4;
  }
  while (v6 != v147);
LABEL_204:
  if ((void *)(i + 64) != v3 + 62)
  {
    *(_DWORD *)(i + 96) = *((_DWORD *)v3 + 132);
    sub_5A4DC((void *)(i + 64), (uint64_t *)v3[64], 0);
  }
  *(_DWORD *)(i + 8) = *(_DWORD *)v4;
}

void sub_900E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  uint64_t *v11 = a10;
  sub_5450C((uint64_t)(v11 + 8));
  uint64_t v13 = v11[5];
  if (v13)
  {
    sub_8E40F8((uint64_t)(v11 + 5), v13);
    operator delete((void *)v11[5]);
    unint64_t v14 = *a11;
    if (!*a11) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    unint64_t v14 = *a11;
    if (!*a11) {
      goto LABEL_3;
    }
  }
  uint64_t v15 = v11[3];
  uint64_t v16 = v14;
  if ((void *)v15 != v14)
  {
    do
      uint64_t v15 = sub_8E41A0(v15 - 160);
    while ((void *)v15 != v14);
    uint64_t v16 = *a11;
  }
  v11[3] = (uint64_t)v14;
  operator delete(v16);
  _Unwind_Resume(a1);
}

void sub_901210(void *a1@<X0>, unint64_t ***a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  switch(*((unsigned char *)a2 + 24))
  {
    case 0:
      BOOL v6 = sub_8D7730(a1[8], (uint64_t)&qword_25D2038);
      if (*((char *)v6 + 23) < 0)
      {
        uint64_t v40 = (void *)*v6;
        unint64_t v41 = v6[1];
        sub_4200((unsigned char *)a4, v40, v41);
      }
      else
      {
        long long v7 = *(_OWORD *)v6;
        *(void *)(a4 + 16) = v6[2];
        *(_OWORD *)a4 = v7;
      }
      return;
    case 1:
      unint64_t v8 = ***a2;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 4) <= v8) {
        goto LABEL_56;
      }
      uint64_t v9 = (int *)sub_369F8C(a1[5], __ROR8__(*(void *)(*a3 + 48 * v8 + 24), 32), 0, "trip");
      char v10 = (int *)sub_8DFD1C(a1[5], *(void *)((char *)v9 + *(unsigned __int16 *)((char *)v9 - *v9 + 6)), 0, "line");
      unint64_t v11 = *(void *)((char *)v10 + *(unsigned __int16 *)((char *)v10 - *v10 + 6));
      nullsub_1(&v44);
      uint64_t v12 = (int *)sub_8EF9B8(a1[3], v11, 0, "system");
      uint64_t v13 = (unsigned __int16 *)((char *)v12 - *v12);
      if (*v13 >= 7u && (uint64_t v14 = v13[3]) != 0) {
        uint64_t v15 = (char **)((char *)v12 + v14 + *(unsigned int *)((char *)v12 + v14));
      }
      else {
        uint64_t v15 = 0;
      }
      sub_8F48DC(v15, (void (*)(void **__return_ptr, char *))sub_4A0694, (uint64_t)&__p);
      sub_997050((uint64_t *)&__p, a1[1] + 968, &v45);
      uint64_t v26 = (void **)__p;
      if (__p)
      {
        uint64_t v27 = v43;
        long long v28 = __p;
        if (v43 != __p)
        {
          do
          {
            long long v29 = (void **)*(v27 - 3);
            if (v29)
            {
              unint64_t v30 = (void **)*(v27 - 2);
              uint64_t v31 = *(v27 - 3);
              if (v30 != v29)
              {
                do
                {
                  if (*((char *)v30 - 1) < 0) {
                    operator delete(*(v30 - 3));
                  }
                  v30 -= 4;
                }
                while (v30 != v29);
                uint64_t v31 = *(v27 - 3);
              }
              *(v27 - 2) = v29;
              operator delete(v31);
            }
            unint64_t v32 = v27 - 8;
            if (*((char *)v27 - 41) < 0) {
              operator delete(*v32);
            }
            v27 -= 8;
          }
          while (v32 != v26);
          long long v28 = __p;
        }
        unint64_t v43 = v26;
        operator delete(v28);
      }
      unint64_t v33 = (int *)sub_8EF9B8(a1[3], v11, 0, "system");
      uint64_t v34 = (unsigned __int16 *)((char *)v33 - *v33);
      if (*v34 >= 0x27u && (uint64_t v35 = v34[19]) != 0) {
        int v36 = *((unsigned __int8 *)v33 + v35);
      }
      else {
        int v36 = 127;
      }
      sub_99515C(v36, (uint64_t *)&v45, a4);
      uint64_t v37 = (void **)v45;
      if (!v45) {
        return;
      }
      uint8x8_t v38 = v46;
      uint64_t v39 = v45;
      if (v46 == v45) {
        goto LABEL_51;
      }
      break;
    case 2:
      unint64_t v16 = ***a2;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 4) <= v16) {
        goto LABEL_56;
      }
      uint64_t v17 = (int *)sub_369F8C(a1[5], __ROR8__(*(void *)(*a3 + 48 * v16 + 24), 32), 0, "trip");
      unint64_t v18 = (int *)sub_8DFD1C(a1[5], *(void *)((char *)v17 + *(unsigned __int16 *)((char *)v17 - *v17 + 6)), 0, "line");
      unint64_t v19 = (int *)sub_8EF9B8(a1[3], *(void *)((char *)v18 + *(unsigned __int16 *)((char *)v18 - *v18 + 6)), 0, "system");
      unint64_t v20 = (unsigned __int16 *)((char *)v19 - *v19);
      if (*v20 < 0x23u) {
        goto LABEL_16;
      }
      uint64_t v21 = v20[17];
      if (!v21) {
        goto LABEL_16;
      }
      goto LABEL_15;
    case 3:
      unint64_t v22 = ***a2;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 4) <= v22) {
LABEL_56:
      }
        sub_66748();
      uint64_t v23 = (int *)sub_369F8C(a1[5], __ROR8__(*(void *)(*a3 + 48 * v22 + 24), 32), 0, "trip");
      unint64_t v19 = (int *)sub_8DFD1C(a1[5], *(void *)((char *)v23 + *(unsigned __int16 *)((char *)v23 - *v23 + 6)), 0, "line");
      uint64_t v24 = (unsigned __int16 *)((char *)v19 - *v19);
      if (*v24 >= 0x2Bu && (uint64_t v21 = v24[21]) != 0) {
LABEL_15:
      }
        uint64_t v25 = *(unsigned __int16 *)((char *)v19 + v21);
      else {
LABEL_16:
      }
        uint64_t v25 = 2;
      sub_902308((uint64_t)a1, v25, a4);
      return;
    default:
      *(void *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
      return;
  }
  do
  {
    while (*((char *)v38 - 1) < 0)
    {
      operator delete(*(v38 - 3));
      if (*((char *)v38 - 33) < 0) {
        goto LABEL_49;
      }
LABEL_46:
      v38 -= 7;
      if (v38 == v37) {
        goto LABEL_50;
      }
    }
    if ((*((char *)v38 - 33) & 0x80000000) == 0) {
      goto LABEL_46;
    }
LABEL_49:
    operator delete(*(v38 - 7));
    v38 -= 7;
  }
  while (v38 != v37);
LABEL_50:
  uint64_t v39 = v45;
LABEL_51:
  uint64_t v46 = v37;
  operator delete(v39);
}

void sub_9016E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_8F36A0((void ***)va);
  _Unwind_Resume(a1);
}

void sub_9016F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_8E4FE0((void **)va);
  _Unwind_Resume(a1);
}

void sub_901718(void *a1@<X0>, unint64_t ***a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 24);
  if ((v6 - 2) >= 2)
  {
    if (v6 != 1)
    {
      *(_OWORD *)(a4 + 32) = 0u;
      *(_OWORD *)(a4 + 48) = 0u;
      *(_OWORD *)(a4 + 64) = 0u;
      *(_OWORD *)(a4 + 80) = 0u;
      *(_OWORD *)(a4 + 96) = 0u;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      *(_DWORD *)(a4 + 32) = -1;
      *(_DWORD *)(a4 + 40) = -1;
      *(_DWORD *)(a4 + 43) = -1;
      *(void *)(a4 + 47) = 0;
      *(void *)(a4 + 55) = 0;
      *(void *)(a4 + 63) = 0;
      *(_WORD *)(a4 + 71) = 0;
      *(void *)(a4 + 80) = 0;
      *(void *)(a4 + 88) = 0;
      *(void *)(a4 + 96) = 0;
      *(unsigned char *)(a4 + 104) = 0;
      return;
    }
    unint64_t v12 = ***a2;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 4) > v12)
    {
      uint64_t v13 = (int *)sub_369F8C(a1[5], __ROR8__(*(void *)(*a3 + 48 * v12 + 24), 32), 0, "trip");
      uint64_t v14 = (int *)sub_8DFD1C(a1[5], *(void *)((char *)v13 + *(unsigned __int16 *)((char *)v13 - *v13 + 6)), 0, "line");
      unint64_t v15 = *(void *)((char *)v14 + *(unsigned __int16 *)((char *)v14 - *v14 + 6));
      uint64_t v16 = a1[3];
      sub_96724C(v16, v15, a4);
      return;
    }
LABEL_12:
    sub_66748();
  }
  unint64_t v7 = ***a2;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 4) <= v7) {
    goto LABEL_12;
  }
  unint64_t v8 = (int *)sub_369F8C(a1[5], __ROR8__(*(void *)(*a3 + 48 * v7 + 24), 32), 0, "trip");
  unint64_t v9 = *(void *)((char *)v8 + *(unsigned __int16 *)((char *)v8 - *v8 + 6));
  uint64_t v10 = a1[5];
  uint64_t v11 = a1[1] + 968;

  sub_966EE4(v10, v9, v11, a4);
}

void sub_9018DC(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5 = **(void **)a2;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 4) <= v5) {
    sub_66748();
  }
  uint64_t v8 = *a3 + 48 * v5;
  int v9 = *(_DWORD *)(v8 + 36);
  unint64_t v10 = __ROR8__(*(void *)(v8 + 24), 32);
  uint64_t v11 = sub_369B60(a1[5], v10, 0);
  unint64_t v12 = &v11[-*(int *)v11];
  if (*(unsigned __int16 *)v12 < 5u)
  {
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = *((unsigned __int16 *)v12 + 2);
    if (*((_WORD *)v12 + 2)) {
      v13 += (uint64_t)&v11[*(unsigned int *)&v11[v13]];
    }
  }
  uint64_t v14 = (int *)(v13 + 4 * HIDWORD(v10) + 4 + *(unsigned int *)(v13 + 4 * HIDWORD(v10) + 4));
  unint64_t v15 = (unsigned __int16 *)((char *)v14 - *v14);
  if (*v15 >= 0xDu && (uint64_t v16 = v15[6]) != 0) {
    int v17 = *(int *)((char *)v14 + v16);
  }
  else {
    int v17 = -1;
  }
  unint64_t v18 = *(void *)&v11[24 * (v17 + v9)
                      + 4
                      + *((unsigned __int16 *)v12 + 3)
                      + *(unsigned int *)&v11[*((unsigned __int16 *)v12 + 3)]];
  unint64_t v19 = (int *)sub_369F8C(a1[5], v10, 0, "trip");
  switch(*(unsigned char *)(a2 + 24))
  {
    case 0:
      unint64_t v20 = (int *)sub_498D5C(a1[4], v18, 0, "stop");
      uint64_t v21 = (int *)sub_8ED928(a1[4], *(void *)((char *)v20 + *(unsigned __int16 *)((char *)v20 - *v20 + 12)), 0, "station");
      unint64_t v22 = (unsigned __int16 *)((char *)v21 - *v21);
      if (*v22 >= 9u && (uint64_t v23 = v22[4]) != 0) {
        uint64_t v24 = (char **)((char *)v21 + v23 + *(unsigned int *)((char *)v21 + v23));
      }
      else {
        uint64_t v24 = 0;
      }
      sub_8F48DC(v24, (void (*)(void **__return_ptr, char *))sub_4A0694, (uint64_t)&__p);
      sub_902524(a4, (uint64_t)a1, (uint64_t *)&__p);
      std::string::size_type v35 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
      {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
        uint64_t v37 = (void *)__p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__l.__size_ == __p.__r_.__value_.__r.__words[0]) {
          goto LABEL_69;
        }
        do
        {
          uint64_t v38 = *(void *)(size - 24);
          if (v38)
          {
            uint64_t v39 = *(void *)(size - 16);
            uint64_t v40 = *(void **)(size - 24);
            if (v39 != v38)
            {
              do
              {
                if (*(char *)(v39 - 1) < 0) {
                  operator delete(*(void **)(v39 - 24));
                }
                v39 -= 32;
              }
              while (v39 != v38);
              uint64_t v40 = *(void **)(size - 24);
            }
            *(void *)(size - 16) = v38;
            operator delete(v40);
          }
          unint64_t v41 = (void **)(size - 64);
          if (*(char *)(size - 41) < 0) {
            operator delete(*v41);
          }
          size -= 64;
        }
        while (v41 != (void **)v35);
        goto LABEL_68;
      }
      break;
    case 1:
      uint64_t v25 = (int *)sub_498D5C(a1[4], v18, 0, "stop");
      uint64_t v26 = (int *)sub_8ED3D4(a1[4], *(void *)((char *)v25 + *(unsigned __int16 *)((char *)v25 - *v25 + 10)), 0, "hall");
      uint64_t v27 = (unsigned __int16 *)((char *)v26 - *v26);
      if (*v27 >= 9u && (uint64_t v28 = v27[4]) != 0) {
        long long v29 = (char **)((char *)v26 + v28 + *(unsigned int *)((char *)v26 + v28));
      }
      else {
        long long v29 = 0;
      }
      sub_8F48DC(v29, (void (*)(void **__return_ptr, char *))sub_4A0694, (uint64_t)&__p);
      sub_902524(a4, (uint64_t)a1, (uint64_t *)&__p);
      std::string::size_type v35 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
      {
        std::string::size_type v42 = __p.__r_.__value_.__l.__size_;
        uint64_t v37 = (void *)__p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__l.__size_ == __p.__r_.__value_.__r.__words[0]) {
          goto LABEL_69;
        }
        do
        {
          uint64_t v43 = *(void *)(v42 - 24);
          if (v43)
          {
            uint64_t v44 = *(void *)(v42 - 16);
            int64_t v45 = *(void **)(v42 - 24);
            if (v44 != v43)
            {
              do
              {
                if (*(char *)(v44 - 1) < 0) {
                  operator delete(*(void **)(v44 - 24));
                }
                v44 -= 32;
              }
              while (v44 != v43);
              int64_t v45 = *(void **)(v42 - 24);
            }
            *(void *)(v42 - 16) = v43;
            operator delete(v45);
          }
          uint64_t v46 = (void **)(v42 - 64);
          if (*(char *)(v42 - 41) < 0) {
            operator delete(*v46);
          }
          v42 -= 64;
        }
        while (v46 != (void **)v35);
        goto LABEL_68;
      }
      break;
    case 2:
      unint64_t v30 = (int *)sub_498D5C(a1[4], v18, 0, "stop");
      uint64_t v31 = (unsigned __int16 *)((char *)v30 - *v30);
      if (*v31 >= 9u && (uint64_t v32 = v31[4]) != 0) {
        unint64_t v33 = (char **)((char *)v30 + v32 + *(unsigned int *)((char *)v30 + v32));
      }
      else {
        unint64_t v33 = 0;
      }
      sub_8F48DC(v33, (void (*)(void **__return_ptr, char *))sub_4A0694, (uint64_t)&__p);
      sub_902524(a4, (uint64_t)a1, (uint64_t *)&__p);
      std::string::size_type v35 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
      {
        std::string::size_type v47 = __p.__r_.__value_.__l.__size_;
        uint64_t v37 = (void *)__p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
        {
          do
          {
            uint64_t v48 = *(void *)(v47 - 24);
            if (v48)
            {
              uint64_t v49 = *(void *)(v47 - 16);
              unint64_t v50 = *(void **)(v47 - 24);
              if (v49 != v48)
              {
                do
                {
                  if (*(char *)(v49 - 1) < 0) {
                    operator delete(*(void **)(v49 - 24));
                  }
                  v49 -= 32;
                }
                while (v49 != v48);
                unint64_t v50 = *(void **)(v47 - 24);
              }
              *(void *)(v47 - 16) = v48;
              operator delete(v50);
            }
            int64_t v51 = (void **)(v47 - 64);
            if (*(char *)(v47 - 41) < 0) {
              operator delete(*v51);
            }
            v47 -= 64;
          }
          while (v51 != (void **)v35);
LABEL_68:
          uint64_t v37 = (void *)__p.__r_.__value_.__r.__words[0];
        }
LABEL_69:
        __p.__r_.__value_.__l.__size_ = v35;
        goto LABEL_70;
      }
      break;
    case 3:
      unint64_t v34 = *(void *)((char *)v19 + *(unsigned __int16 *)((char *)v19 - *v19 + 6));
      if (byte_25D2008[23] < 0) {
        sub_4200(&__p, *(void **)byte_25D2008, *(unint64_t *)&byte_25D2008[8]);
      }
      else {
        std::string __p = *(std::string *)byte_25D2008;
      }
      uint64_t v52 = (int *)sub_8DFD1C(a1[5], v34, 0, "line");
      uint64_t v53 = (unsigned __int16 *)((char *)v52 - *v52);
      if (*v53 >= 0x2Bu && (uint64_t v54 = v53[21]) != 0) {
        uint64_t v55 = *(unsigned __int16 *)((char *)v52 + v54);
      }
      else {
        uint64_t v55 = 2;
      }
      sub_98C68C(v55, (uint64_t)v71);
      int64_t v56 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (byte_25D195F >= 0) {
        BOOL v58 = &qword_25D1948;
      }
      else {
        BOOL v58 = (uint64_t *)qword_25D1948;
      }
      if (byte_25D195F >= 0) {
        int64_t v59 = byte_25D195F;
      }
      else {
        int64_t v59 = unk_25D1950;
      }
      if (v59)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          int64_t v56 = __p.__r_.__value_.__l.__size_;
        }
        if (v56 >= v59)
        {
          uint64_t v60 = (char *)p_p + v56;
          int v61 = *(char *)v58;
          int64_t v62 = p_p;
          do
          {
            int64_t v63 = v56 - v59;
            if (v63 == -1) {
              break;
            }
            char v64 = (char *)memchr(v62, v61, v63 + 1);
            if (!v64) {
              break;
            }
            size_t v65 = v64;
            if (!memcmp(v64, v58, v59))
            {
              if (v65 != v60)
              {
                std::string::size_type v66 = v65 - (char *)p_p;
                if (v65 - (char *)p_p != -1) {
                  goto LABEL_96;
                }
              }
              break;
            }
            int64_t v62 = (std::string *)(v65 + 1);
            int64_t v56 = v60 - (v65 + 1);
          }
          while (v56 >= v59);
        }
      }
      else
      {
        std::string::size_type v66 = 0;
LABEL_96:
        if ((v72 & 0x80u) == 0) {
          uint64_t v67 = v71;
        }
        else {
          uint64_t v67 = (void **)v71[0];
        }
        if ((v72 & 0x80u) == 0) {
          std::string::size_type v68 = v72;
        }
        else {
          std::string::size_type v68 = (std::string::size_type)v71[1];
        }
        std::string::replace(&__p, v66, v59, (const std::string::value_type *)v67, v68);
      }
      if ((char)v72 < 0) {
        operator delete(v71[0]);
      }
      unint64_t v69 = sub_8D7730(a1[8], (uint64_t)&__p);
      if (*((char *)v69 + 23) < 0)
      {
        sub_4200((unsigned char *)a4, (void *)*v69, v69[1]);
      }
      else
      {
        long long v70 = *(_OWORD *)v69;
        *(void *)(a4 + 16) = v69[2];
        *(_OWORD *)a4 = v70;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v37 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_70:
        operator delete(v37);
      }
      break;
    default:
      *(void *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
      break;
  }
}

void sub_901F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_901FD0(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5 = **(void **)a2;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 4) <= v5) {
    sub_66748();
  }
  uint64_t v8 = (int *)sub_369F8C(*(void *)(a1 + 40), __ROR8__(*(void *)(*a3 + 48 * v5 + 24), 32), 0, "trip");
  if (*(unsigned char *)(a2 + 24) == 3)
  {
    unint64_t v9 = *(void *)((char *)v8 + *(unsigned __int16 *)((char *)v8 - *v8 + 6));
    if (byte_25D2020[23] < 0) {
      sub_4200(&__dst, *(void **)byte_25D2020, *(unint64_t *)&byte_25D2020[8]);
    }
    else {
      std::string __dst = *(std::string *)byte_25D2020;
    }
    unint64_t v10 = (int *)sub_8DFD1C(*(void *)(a1 + 40), v9, 0, "line");
    uint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
    if (*v11 >= 0x2Bu && (uint64_t v12 = v11[21]) != 0) {
      uint64_t v13 = *(unsigned __int16 *)((char *)v10 + v12);
    }
    else {
      uint64_t v13 = 2;
    }
    sub_98C68C(v13, (uint64_t)__p);
    int64_t size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_dst = &__dst;
    }
    else {
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if (byte_25D195F >= 0) {
      uint64_t v16 = &qword_25D1948;
    }
    else {
      uint64_t v16 = (uint64_t *)qword_25D1948;
    }
    if (byte_25D195F >= 0) {
      int64_t v17 = byte_25D195F;
    }
    else {
      int64_t v17 = unk_25D1950;
    }
    if (v17)
    {
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int64_t size = __dst.__r_.__value_.__l.__size_;
      }
      if (size >= v17)
      {
        unint64_t v18 = (char *)p_dst + size;
        int v19 = *(char *)v16;
        unint64_t v20 = p_dst;
        do
        {
          int64_t v21 = size - v17;
          if (v21 == -1) {
            break;
          }
          unint64_t v22 = (char *)memchr(v20, v19, v21 + 1);
          if (!v22) {
            break;
          }
          uint64_t v23 = v22;
          if (!memcmp(v22, v16, v17))
          {
            if (v23 != v18)
            {
              std::string::size_type v24 = v23 - (char *)p_dst;
              if (v23 - (char *)p_dst != -1) {
                goto LABEL_32;
              }
            }
            break;
          }
          unint64_t v20 = (std::string *)(v23 + 1);
          int64_t size = v18 - (v23 + 1);
        }
        while (size >= v17);
      }
    }
    else
    {
      std::string::size_type v24 = 0;
LABEL_32:
      if ((v30 & 0x80u) == 0) {
        uint64_t v25 = __p;
      }
      else {
        uint64_t v25 = (void **)__p[0];
      }
      if ((v30 & 0x80u) == 0) {
        std::string::size_type v26 = v30;
      }
      else {
        std::string::size_type v26 = (std::string::size_type)__p[1];
      }
      std::string::replace(&__dst, v24, v17, (const std::string::value_type *)v25, v26);
    }
    if ((char)v30 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v27 = sub_8D7730(*(void *)(a1 + 64), (uint64_t)&__dst);
    if (*((char *)v27 + 23) < 0)
    {
      sub_4200((unsigned char *)a4, (void *)*v27, v27[1]);
    }
    else
    {
      long long v28 = *(_OWORD *)v27;
      *(void *)(a4 + 16) = v27[2];
      *(_OWORD *)a4 = v28;
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
  }
}

void sub_90225C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if (a21 < 0)
    {
LABEL_5:
      operator delete(a16);
      _Unwind_Resume(a1);
    }
  }
  else if (a21 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

void **sub_9022AC(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_361164(v3 - 456);
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_902308(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (byte_25D1FF0[23] < 0) {
    sub_4200(&__dst, *(void **)byte_25D1FF0, *(unint64_t *)&byte_25D1FF0[8]);
  }
  else {
    std::string __dst = *(std::string *)byte_25D1FF0;
  }
  sub_98C68C(a2, (uint64_t)__p);
  int64_t size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_dst = &__dst;
  }
  else {
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if (byte_25D195F >= 0) {
    uint64_t v8 = &qword_25D1948;
  }
  else {
    uint64_t v8 = (uint64_t *)qword_25D1948;
  }
  if (byte_25D195F >= 0) {
    int64_t v9 = byte_25D195F;
  }
  else {
    int64_t v9 = unk_25D1950;
  }
  if (v9)
  {
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int64_t size = __dst.__r_.__value_.__l.__size_;
    }
    if (size >= v9)
    {
      unint64_t v10 = (char *)p_dst + size;
      int v11 = *(char *)v8;
      uint64_t v12 = p_dst;
      do
      {
        int64_t v13 = size - v9;
        if (v13 == -1) {
          break;
        }
        uint64_t v14 = (char *)memchr(v12, v11, v13 + 1);
        if (!v14) {
          break;
        }
        unint64_t v15 = v14;
        if (!memcmp(v14, v8, v9))
        {
          if (v15 != v10)
          {
            std::string::size_type v16 = v15 - (char *)p_dst;
            if (v15 - (char *)p_dst != -1) {
              goto LABEL_24;
            }
          }
          break;
        }
        uint64_t v12 = (std::string *)(v15 + 1);
        int64_t size = v10 - (v15 + 1);
      }
      while (size >= v9);
    }
  }
  else
  {
    std::string::size_type v16 = 0;
LABEL_24:
    if ((v22 & 0x80u) == 0) {
      int64_t v17 = __p;
    }
    else {
      int64_t v17 = (void **)__p[0];
    }
    if ((v22 & 0x80u) == 0) {
      std::string::size_type v18 = v22;
    }
    else {
      std::string::size_type v18 = (std::string::size_type)__p[1];
    }
    std::string::replace(&__dst, v16, v9, (const std::string::value_type *)v17, v18);
  }
  if ((char)v22 < 0) {
    operator delete(__p[0]);
  }
  int v19 = sub_8D7730(*(void *)(a1 + 64), (uint64_t)&__dst);
  if (*((char *)v19 + 23) < 0)
  {
    sub_4200((unsigned char *)a3, (void *)*v19, v19[1]);
  }
  else
  {
    long long v20 = *(_OWORD *)v19;
    *(void *)(a3 + 16) = v19[2];
    *(_OWORD *)a3 = v20;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_9024D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_902524(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  nullsub_1(&v9);
  sub_997050(a3, *(void *)(a2 + 8) + 968, &__p);
  sub_994EAC((uint64_t *)&__p, a1);
  int v6 = (void **)__p;
  if (__p)
  {
    unint64_t v7 = v11;
    uint64_t v8 = __p;
    if (v11 == __p)
    {
LABEL_11:
      int v11 = v6;
      operator delete(v8);
      return;
    }
    while (1)
    {
      if (*((char *)v7 - 1) < 0)
      {
        operator delete(*(v7 - 3));
        if (*((char *)v7 - 33) < 0) {
LABEL_9:
        }
          operator delete(*(v7 - 7));
      }
      else if (*((char *)v7 - 33) < 0)
      {
        goto LABEL_9;
      }
      v7 -= 7;
      if (v7 == v6)
      {
        uint64_t v8 = __p;
        goto LABEL_11;
      }
    }
  }
}

void sub_9025EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_8E4FE0((void **)va);
  _Unwind_Resume(a1);
}

char *sub_902600(int64x2_t *a1, uint64_t a2)
{
  unint64_t v3 = 0x86BCA1AF286BCA1BLL * ((a1->i64[1] - a1->i64[0]) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1AF286BCA1AF286) {
    sub_2E00();
  }
  if (0xD79435E50D79436 * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v4) {
    unint64_t v4 = 0xD79435E50D79436 * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  }
  if (0x86BCA1AF286BCA1BLL * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0xD79435E50D7943) {
    unint64_t v5 = 0x1AF286BCA1AF286;
  }
  else {
    unint64_t v5 = v4;
  }
  std::string::size_type v26 = a1 + 1;
  if (v5 > 0x1AF286BCA1AF286) {
    sub_188D718();
  }
  uint64_t v7 = 152 * v5;
  uint64_t v8 = (char *)operator new(152 * v5);
  char v9 = &v8[152 * v3];
  std::string __p = v8;
  v24.i64[0] = (uint64_t)v9;
  v24.i64[1] = (uint64_t)v9;
  uint64_t v25 = &v8[v7];
  *(_OWORD *)char v9 = *(_OWORD *)a2;
  *((void *)v9 + 2) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(a2 + 24);
  *((void *)v9 + 5) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  long long v10 = *(_OWORD *)(a2 + 48);
  *((void *)v9 + 8) = *(void *)(a2 + 64);
  *((_OWORD *)v9 + 3) = v10;
  *((void *)v9 + 10) = 0;
  *((void *)v9 + 11) = 0;
  *(_OWORD *)(v9 + 72) = *(_OWORD *)(a2 + 72);
  *((void *)v9 + 11) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *((void *)v9 + 13) = 0;
  *((void *)v9 + 14) = 0;
  *((_OWORD *)v9 + 6) = *(_OWORD *)(a2 + 96);
  *((void *)v9 + 14) = *(void *)(a2 + 112);
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *((void *)v9 + 16) = 0;
  *((void *)v9 + 17) = 0;
  *(_OWORD *)(v9 + 120) = *(_OWORD *)(a2 + 120);
  *((void *)v9 + 17) = *(void *)(a2 + 136);
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  v9[144] = *(unsigned char *)(a2 + 144);
  int v11 = v9 + 152;
  uint64_t v13 = a1->i64[0];
  unint64_t v12 = a1->u64[1];
  if (v12 == a1->i64[0])
  {
    int64x2_t v20 = vdupq_n_s64(v12);
  }
  else
  {
    uint64_t v14 = 0;
    do
    {
      unint64_t v15 = &v9[v14];
      uint64_t v16 = v12 + v14;
      long long v17 = *(_OWORD *)(v12 + v14 - 152);
      *((void *)v15 - 17) = *(void *)(v12 + v14 - 136);
      *(_OWORD *)(v15 - 152) = v17;
      *(void *)(v16 - 144) = 0;
      *(void *)(v16 - 136) = 0;
      *(void *)(v16 - 152) = 0;
      long long v18 = *(_OWORD *)(v12 + v14 - 128);
      *((void *)v15 - 14) = *(void *)(v12 + v14 - 112);
      *((_OWORD *)v15 - 8) = v18;
      *(void *)(v16 - 120) = 0;
      *(void *)(v16 - 112) = 0;
      *(void *)(v16 - 128) = 0;
      uint64_t v19 = *(void *)(v12 + v14 - 88);
      *(_OWORD *)(v15 - 104) = *(_OWORD *)(v12 + v14 - 104);
      *((void *)v15 - 11) = v19;
      *((void *)v15 - 10) = 0;
      *((void *)v15 - 9) = 0;
      *((void *)v15 - 8) = 0;
      *((_OWORD *)v15 - 5) = *(_OWORD *)(v12 + v14 - 80);
      *((void *)v15 - 8) = *(void *)(v12 + v14 - 64);
      *(void *)(v16 - 80) = 0;
      *(void *)(v16 - 72) = 0;
      *(void *)(v16 - 64) = 0;
      *((void *)v15 - 7) = 0;
      *((void *)v15 - 6) = 0;
      *((void *)v15 - 5) = 0;
      *(_OWORD *)(v15 - 56) = *(_OWORD *)(v12 + v14 - 56);
      *((void *)v15 - 5) = *(void *)(v12 + v14 - 40);
      *(void *)(v16 - 56) = 0;
      *(void *)(v16 - 48) = 0;
      *(void *)(v16 - 40) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 3) = 0;
      *((void *)v15 - 2) = 0;
      *((_OWORD *)v15 - 2) = *(_OWORD *)(v12 + v14 - 32);
      *((void *)v15 - 2) = *(void *)(v12 + v14 - 16);
      *(void *)(v16 - 32) = 0;
      *(void *)(v16 - 24) = 0;
      *(void *)(v16 - 16) = 0;
      *(v15 - 8) = *(unsigned char *)(v12 + v14 - 8);
      v14 -= 152;
    }
    while (v12 + v14 != v13);
    int64x2_t v20 = *a1;
    v9 += v14;
  }
  a1->i64[0] = (uint64_t)v9;
  a1->i64[1] = (uint64_t)v11;
  int64x2_t v24 = v20;
  int64_t v21 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)&v8[v7];
  uint64_t v25 = v21;
  std::string __p = (void *)v20.i64[0];
  sub_902890((uint64_t)&__p, v20.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v11;
}

void sub_902890(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 152;
    unint64_t v5 = *(void **)(i - 32);
    if (v5)
    {
      *(void *)(i - 24) = v5;
      operator delete(v5);
    }
    int v6 = *(void **)(i - 56);
    if (v6)
    {
      *(void *)(i - 48) = v6;
      operator delete(v6);
    }
    uint64_t v7 = *(void **)(i - 80);
    if (v7)
    {
      *(void *)(i - 72) = v7;
      operator delete(v7);
    }
    if (*(char *)(i - 105) < 0)
    {
      operator delete(*(void **)(i - 128));
      if (*(char *)(i - 129) < 0) {
LABEL_14:
      }
        operator delete(*(void **)(i - 152));
    }
    else if (*(char *)(i - 129) < 0)
    {
      goto LABEL_14;
    }
  }
}

void *sub_902940(void **a1, long long *a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x199999999999999) {
    sub_2E00();
  }
  if (0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) > v4) {
    unint64_t v4 = 0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5);
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) >= 0xCCCCCCCCCCCCCCLL) {
    unint64_t v6 = 0x199999999999999;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x199999999999999) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(160 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  int64x2_t v20 = &v7[160 * v3];
  int64_t v21 = &v7[160 * v6];
  sub_8E8950(v20, a2);
  uint64_t v8 = v20 + 160;
  long long v10 = (char *)*a1;
  char v9 = (char *)a1[1];
  if (v9 == *a1)
  {
    *a1 = v20;
    a1[1] = v8;
    a1[2] = v21;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      unint64_t v12 = &v20[v11];
      uint64_t v13 = &v9[v11];
      long long v14 = *(_OWORD *)&v9[v11 - 160];
      *((void *)v12 - 18) = *(void *)&v9[v11 - 144];
      *((_OWORD *)v12 - 10) = v14;
      *((void *)v13 - 19) = 0;
      *((void *)v13 - 18) = 0;
      *((void *)v13 - 20) = 0;
      *((_DWORD *)v12 - 26) = *(_DWORD *)&v9[v11 - 104];
      sub_4F38B0((void *)*(unsigned int *)&v9[v11 - 104], (uint64_t *)&v9[v11 - 136], &v20[v11 - 136]);
      *((void *)v12 - 12) = *(void *)&v9[v11 - 96];
      long long v15 = *(_OWORD *)&v9[v11 - 88];
      *((void *)v12 - 9) = *(void *)&v9[v11 - 72];
      *(_OWORD *)(v12 - 88) = v15;
      *((void *)v13 - 10) = 0;
      *((void *)v13 - 9) = 0;
      *((void *)v13 - 11) = 0;
      *(v12 - 64) = v9[v11 - 64];
      long long v16 = *(_OWORD *)&v9[v11 - 56];
      *((void *)v12 - 5) = *(void *)&v9[v11 - 40];
      *(_OWORD *)(v12 - 56) = v16;
      *((void *)v13 - 6) = 0;
      *((void *)v13 - 5) = 0;
      *((void *)v13 - 7) = 0;
      *(v12 - 32) = v9[v11 - 32];
      *((void *)v12 - 2) = 0;
      *((void *)v12 - 1) = 0;
      *((void *)v12 - 3) = 0;
      *(_OWORD *)(v12 - 24) = *(_OWORD *)&v9[v11 - 24];
      *((void *)v12 - 1) = *(void *)&v9[v11 - 8];
      *((void *)v13 - 3) = 0;
      *((void *)v13 - 2) = 0;
      *((void *)v13 - 1) = 0;
      v11 -= 160;
    }
    while (&v9[v11] != v10);
    long long v17 = (char *)*a1;
    char v9 = (char *)a1[1];
    long long v18 = &v20[v11];
    uint64_t v8 = v20 + 160;
    *a1 = v18;
    a1[1] = v20 + 160;
    a1[2] = v21;
    if (v9 != v17)
    {
      do
      {
        v9 -= 160;
        sub_8E41A0((uint64_t)v9);
      }
      while (v9 != v17);
      char v9 = v17;
    }
  }
  if (v9) {
    operator delete(v9);
  }
  return v8;
}

void sub_902B5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_902B74((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_902B74(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 160;
    sub_8E41A0(i - 160);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_902BC8()
{
  byte_25D189F = 1;
  word_25D1888 = 65;
  byte_25D18B7 = 1;
  word_25D18A0 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25D2050 = 0u;
  *(_OWORD *)&qword_25D2060 = 0u;
  dword_25D2070 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25D2050, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25D2050, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25D2050, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25D2050, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25D18CF = 8;
  strcpy((char *)&qword_25D18B8, "any_mode");
  byte_25D18E7 = 7;
  strcpy((char *)&dword_25D18D0, "cycling");
  byte_25D18FF = 7;
  strcpy((char *)&dword_25D18E8, "driving");
  byte_25D1917 = 7;
  strcpy((char *)&dword_25D1900, "walking");
  qword_25D1920 = 0;
  qword_25D1928 = 0;
  qword_25D1918 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25D1918 = (uint64_t)v0;
  qword_25D1920 = (uint64_t)(v0 + 9);
  qword_25D1928 = (uint64_t)(v0 + 9);
  qword_25D1930 = 0;
  qword_25D1938 = 0;
  unk_25D1940 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25D1938 = (uint64_t)(v1 + 9);
  unk_25D1940 = v1 + 9;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25D1930 = (uint64_t)v1;
  byte_25D195F = 6;
  strcpy((char *)&qword_25D1948, "{Mode}");
  byte_25D1977 = 11;
  strcpy((char *)&qword_25D1960, "{Direction}");
  byte_25D198F = 6;
  strcpy((char *)&dword_25D1978, "{Line}");
  byte_25D19A7 = 12;
  strcpy((char *)&qword_25D1990, "{LineNumber}");
  strcpy(&byte_25D19BF, "\n{Headsign1}");
  strcpy((char *)&qword_25D19A8, "{Headsign}");
  byte_25D19D7 = 11;
  byte_25D19EF = 11;
  strcpy((char *)&qword_25D19D8, "{Headsign2}");
  byte_25D1A07 = 11;
  strcpy((char *)&qword_25D19F0, "{Headsign3}");
  byte_25D1A1F = 11;
  strcpy((char *)&qword_25D1A08, "{Headsign4}");
  byte_25D1A37 = 11;
  strcpy((char *)&qword_25D1A20, "{Headsign5}");
  byte_25D1A4F = 6;
  strcpy((char *)&dword_25D1A38, "{Stop}");
  byte_25D1A67 = 14;
  strcpy((char *)&qword_25D1A50, "{PreviousStop}");
  byte_25D1A7F = 8;
  strcpy((char *)&qword_25D1A68, "{System}");
  byte_25D1A97 = 15;
  strcpy((char *)&qword_25D1A80, "{VehicleNumber}");
  byte_25D1AAF = 17;
  strcpy((char *)&xmmword_25D1A98, "{AccessPointExit}");
  strcpy(&byte_25D1AC7, "\n{nextBoardStation}");
  strcpy((char *)&qword_25D1AB0, "{Platform}");
  byte_25D1ADF = 18;
  qword_25D1AE0 = 0;
  unk_25D1AE8 = 0;
  qword_25D1AF0 = 0;
  byte_25D1B0F = 1;
  word_25D1AF8 = 32;
  qword_25D1B10 = (uint64_t)operator new(0x20uLL);
  unk_25D1B18 = xmmword_20B8890;
  strcpy((char *)qword_25D1B10, "LeaveStop_Loc_Comma_Separator");
  byte_25D1B3F = 5;
  dword_25D1B28 = -1028144608;
  word_25D1B2C = 160;
  byte_25D1B57 = 2;
  word_25D1B40 = -24382;
  byte_25D1B42 = 0;
  byte_25D1B6F = 4;
  dword_25D1B58 = 548913696;
  byte_25D1B5C = 0;
  byte_25D1B87 = 15;
  strcpy((char *)&qword_25D1B70 + 7, "\xB7 {/s:s}");
  strcpy((char *)&qword_25D1B70, "{s:s} ·");
  byte_25D1B9F = 6;
  strcpy((char *)&dword_25D1B88, "NoType");
  byte_25D1BB7 = 14;
  strcpy((char *)&qword_25D1BA0, "{WalkDistance}");
  strcpy(&byte_25D1BCF, "\n{OneMinute}");
  strcpy((char *)&qword_25D1BB8, "{WalkTime}");
  byte_25D1BE7 = 11;
  byte_25D1BFF = 14;
  strcpy((char *)&qword_25D1BE8, "{StepDuration}");
  byte_25D1C17 = 15;
  strcpy((char *)&qword_25D1C00, "{TripFrequency}");
  byte_25D1C2F = 11;
  strcpy((char *)&qword_25D1C18, "{BoardTime}");
  byte_25D1C47 = 12;
  strcpy((char *)&qword_25D1C30, "{AlightTime}");
  byte_25D1C5F = 21;
  strcpy((char *)&xmmword_25D1C48, "{FutureTimestampList}");
  byte_25D1C77 = 15;
  strcpy((char *)&qword_25D1C60, "{DepartureTime}");
  byte_25D1C8F = 13;
  strcpy((char *)&qword_25D1C78, "{ArrivalTime}");
  byte_25D1CA7 = 19;
  strcpy((char *)&xmmword_25D1C90, "{TotalWalkDistance}");
  byte_25D1CBF = 14;
  strcpy((char *)&qword_25D1CA8, "{TripDuration}");
  byte_25D1CD7 = 11;
  strcpy((char *)&qword_25D1CC0, "{DayOfWeek}");
  byte_25D1CEF = 6;
  strcpy((char *)&dword_25D1CD8, "{Date}");
  byte_25D1D07 = 16;
  strcpy((char *)&xmmword_25D1CF0, "{OutTheDoorTime}");
  qword_25D1D08 = (uint64_t)operator new(0x20uLL);
  unk_25D1D10 = xmmword_20B91A0;
  strcpy((char *)qword_25D1D08, "{FirstVehicleDepartureTime}");
  byte_25D1D37 = 18;
  strcpy(byte_25D1D20, "{RouteArrivalTime}");
  strcpy(&byte_25D1D4F, "\n{IC_Artwork}");
  strcpy((char *)&qword_25D1D38, "{BaseFare}");
  byte_25D1D67 = 12;
  byte_25D1D7F = 11;
  strcpy((char *)&qword_25D1D68, "{RT_Symbol}");
  byte_25D1D97 = 12;
  strcpy((char *)&qword_25D1D80, "{TotalPrice}");
  byte_25D1DAF = 13;
  strcpy((char *)&qword_25D1D98, "{CheckInTime}");
  byte_25D1DC7 = 19;
  strcpy(byte_25D1DB0, "{LiveDepartureTime}");
  strcpy(&byte_25D1DDF, "\n{LegDuration}");
  strcpy((char *)&qword_25D1DC8, "{TimeList}");
  byte_25D1DF7 = 13;
  byte_25D1E0F = 15;
  strcpy((char *)&qword_25D1DF8, "{CountdownList}");
  byte_25D1E27 = 3;
  dword_25D1E10 = 8217723;
  strcpy(&byte_25D1E3F, "\t{AccessPointArt}");
  strcpy((char *)&qword_25D1E28, "{LineArt}");
  byte_25D1E57 = 16;
  byte_25D1E6F = 11;
  strcpy((char *)&qword_25D1E58, "{SystemArt}");
  strcpy(&byte_25D1E87, "\n{ServiceBeginTime}");
  strcpy((char *)&qword_25D1E70, "{CardName}");
  byte_25D1E9F = 18;
  byte_25D1EB7 = 16;
  strcpy((char *)&xmmword_25D1EA0, "{ServiceEndTime}");
  byte_25D1ECF = 6;
  strcpy((char *)&dword_25D1EB8, "OnTime");
  byte_25D1EE7 = 6;
  strcpy((char *)&dword_25D1ED0, "Delays");
  byte_25D1EFF = 1;
  word_25D1EE8 = 115;
  byte_25D1F17 = 2;
  strcpy((char *)&word_25D1F00, "cs");
  byte_25D1F2F = 1;
  word_25D1F18 = 112;
  byte_25D1F47 = 5;
  strcpy((char *)&dword_25D1F30, "_Line");
  byte_25D1F5F = 7;
  strcpy((char *)&dword_25D1F48, "_System");
  strcpy(&byte_25D1F77, "\n_VehicleNumber");
  strcpy((char *)&qword_25D1F60, "_Direction");
  byte_25D1F8F = 14;
  byte_25D1FA7 = 12;
  strcpy((char *)&qword_25D1F90, "_To_Headsign");
  byte_25D1FBF = 16;
  strcpy((char *)&xmmword_25D1FA8, "_Toward_Headsign");
  strcpy(&byte_25D1FD7, "\t_LineNumber");
  strcpy((char *)&qword_25D1FC0, "_Headsign");
  byte_25D1FEF = 11;
  byte_25D2007 = 20;
  strcpy((char *)&xmmword_25D1FF0, "NearbyVehicle_{Mode}");
  double result = (char *)operator new(0x20uLL);
  *(void *)&xmmword_25D2008 = result;
  *(long long *)((char *)&xmmword_25D2008 + 8) = xmmword_20B5EB0;
  strcpy(result, "NearbyVehicle_{Mode}_Lines");
  byte_25D2037 = 19;
  strcpy((char *)&xmmword_25D2020, "Pinned_{Mode}_Lines");
  byte_25D204F = 9;
  strcpy((char *)&qword_25D2038, "Suggested");
  return result;
}

void sub_90385C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25D2060) {
    sub_20AC274((void **)qword_25D2060);
  }
  uint64_t v37 = (void *)xmmword_25D2050;
  *(void *)&xmmword_25D2050 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_9038FC(uint64_t a1, void *a2)
{
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "ttl_within_coverage_min_seconds");
  *(_DWORD *)a1 = 10 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "ttl_within_coverage_max_seconds");
  *(_DWORD *)(a1 + 4) = 10 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "ttl_out_of_coverage_min_seconds");
  *(_DWORD *)(a1 + 8) = 10 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "ttl_out_of_coverage_max_seconds");
  *(_DWORD *)(a1 + 12) = 10 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "caching_radius_meters");
  double v4 = sub_5C7E8(a2, (uint64_t)__p) * 100.0;
  if (v4 >= 0.0)
  {
    double v5 = v4;
    if (v4 >= 4.50359963e15) {
      goto LABEL_17;
    }
    uint64_t v6 = (uint64_t)(v4 + v4) + 1;
  }
  else
  {
    double v5 = v4;
    if (v4 <= -4.50359963e15) {
      goto LABEL_17;
    }
    uint64_t v6 = (uint64_t)(v4 + v4);
    if (v6 >= 1) {
      --v6;
    }
  }
  double v5 = (double)(v6 >> 1);
LABEL_17:
  if (v5 < 9.22337204e18)
  {
    if (v4 >= 0.0)
    {
      if (v4 >= 4.50359963e15) {
        goto LABEL_28;
      }
      uint64_t v7 = (uint64_t)(v4 + v4) + 1;
    }
    else
    {
      if (v4 <= -4.50359963e15) {
        goto LABEL_28;
      }
      uint64_t v7 = (uint64_t)(v4 + v4);
      if (v7 >= 1) {
        --v7;
      }
    }
    double v4 = (double)(v7 >> 1);
LABEL_28:
    *(void *)(a1 + 16) = (uint64_t)v4;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_30;
  }
  *(void *)(a1 + 16) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
    return a1;
  }
LABEL_30:
  operator delete(__p[0]);
  return a1;
}

void sub_903BC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_903BF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v29 = 0;
  __token.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)&__token.__r_.__value_.__r.__words[1] = xmmword_20B93C0;
  strcpy(__token.__r_.__value_.__l.__data_, "TransitPaymentMethodInfoComponentBuilder");
  std::string __p = 0;
  long long v28 = 0;
  uint64_t v6 = sub_374CDC(a2, (uint64_t)&__token, (uint64_t *)&__p);
  sub_9038FC(a1, v6);
  uint64_t v7 = (void **)__p;
  if (__p)
  {
    int v8 = v28;
    char v9 = __p;
    if (v28 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      char v9 = __p;
    }
    long long v28 = v7;
    operator delete(v9);
  }
  if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__token.__r_.__value_.__l.__data_);
  }
  sub_99EC34(a1 + 24, a2, a3);
  *((unsigned char *)&__token.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&__token, "/dev/urandom");
  std::random_device::random_device((std::random_device *)&__p, &__token);
  if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__token.__r_.__value_.__l.__data_);
  }
  unint64_t v10 = std::random_device::operator()((std::random_device *)&__p);
  *(void *)(a1 + 104) = v10;
  uint64_t v11 = 1;
  for (uint64_t i = 14; i != 325; ++i)
  {
    uint64_t v13 = 0x5851F42D4C957F2DLL * (v10 ^ (v10 >> 62));
    unint64_t v10 = v13 + v11;
    *(void *)(a1 + 8 * i) = i + v13 - 13;
    ++v11;
  }
  *(void *)(a1 + 2600) = 0;
  std::random_device::~random_device((std::random_device *)&__p);
  int v14 = *(_DWORD *)(a1 + 4);
  if (*(int *)a1 < 0) {
    char v15 = -5;
  }
  else {
    char v15 = 5;
  }
  int v16 = v14 / 10;
  int v17 = v14 % 10;
  if (v14 < 0) {
    char v18 = -5;
  }
  else {
    char v18 = 5;
  }
  *(_DWORD *)(a1 + 2608) = *(_DWORD *)a1 / 10
                         + (((103 * (char)(v15 + *(_DWORD *)a1 % 10)) >> 15) & 1)
                         + ((103 * (char)(v15 + *(_DWORD *)a1 % 10)) >> 10);
  *(_DWORD *)(a1 + 2612) = v16
                         + (((103 * (char)(v18 + v17)) >> 15) & 1)
                         + ((103 * (char)(v18 + v17)) >> 10);
  int v19 = *(_DWORD *)(a1 + 8);
  int v20 = *(_DWORD *)(a1 + 12);
  int v21 = v19 / 10;
  int v22 = v19 % 10;
  if (v19 < 0) {
    char v23 = -5;
  }
  else {
    char v23 = 5;
  }
  unsigned int v24 = v21 + (((103 * (char)(v23 + v22)) >> 15) & 1) + ((103 * (char)(v23 + v22)) >> 10);
  if (v20 < 0) {
    char v25 = -5;
  }
  else {
    char v25 = 5;
  }
  *(_DWORD *)(a1 + 2616) = v24;
  *(_DWORD *)(a1 + 2620) = v20 / 10
                         + (((103 * (char)(v25 + v20 % 10)) >> 15) & 1)
                         + ((103 * (char)(v25 + v20 % 10)) >> 10);
  return a1;
}

void sub_903E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::random_device::~random_device((std::random_device *)&a9);
  sub_8E5894(v17 + 40);
  _Unwind_Resume(a1);
}

void sub_903EC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_903EF0(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  a3[1] = 0x27FFFFFFFLL;
  *a3 = &off_243B190;
  a3[2] = 0;
  uint64_t v6 = (void **)(a3 + 2);
  a3[3] = 0;
  a3[4] = 0;
  a3[5] = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v7 = *(void *)(a2 + 536);
  uint64_t v8 = *(void *)(a2 + 544);
  int v9 = *(unsigned __int8 *)(a2 + 560);
  uint64_t v10 = a1 + 104;
  BOOL v11 = v7 == v8 && v9 == 0;
  if (v11) {
    int v12 = sub_904154(a1 + 2616, v10, (int *)(a1 + 2616));
  }
  else {
    int v12 = sub_904154(a1 + 2608, v10, (int *)(a1 + 2608));
  }
  *((_DWORD *)a3 + 2) = 10 * v12;
  a3[5] = *(void *)(a1 + 16);
  std::string __p = 0;
  char v18 = 0;
  uint64_t v19 = 0;
  sub_99EC54(a1 + 24, (void ***)(a2 + 536), (uint64_t)&__p, &v20);
  if (__p)
  {
    char v18 = __p;
    operator delete(__p);
  }
  if (v6 != &v20) {
    sub_9042F4((uint64_t)v6, v20, v21, 0x193D4BB7E327A977 * ((v21 - (unsigned char *)v20) >> 3));
  }
  uint64_t v13 = (char *)v20;
  if (v20)
  {
    int v14 = v20;
    if (v21 != v20)
    {
      char v15 = v21 - 568;
      do
      {
        sub_8E57D0((void *)v15 + 3);
        int v16 = *(void **)v15;
        if (*(void *)v15)
        {
          *((void *)v15 + 1) = v16;
          operator delete(v16);
        }
        BOOL v11 = v15 == v13;
        v15 -= 568;
      }
      while (!v11);
      int v14 = v20;
    }
    int v21 = v13;
    operator delete(v14);
  }
}

void sub_904068(_Unwind_Exception *a1)
{
  sub_8E3A1C(v1);
  _Unwind_Resume(a1);
}

void sub_90407C(_Unwind_Exception *a1)
{
  sub_8E3A1C(v1);
  _Unwind_Resume(a1);
}

void sub_904090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_9040D0((void **)va);
  sub_8E3A1C(v4);
  _Unwind_Resume(a1);
}

void sub_9040AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  sub_8E3A1C(v10);
  _Unwind_Resume(a1);
}

void **sub_9040D0(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    double v4 = *a1;
    if (v3 != v2)
    {
      double v5 = v3 - 568;
      do
      {
        sub_8E57D0((void *)v5 + 3);
        uint64_t v7 = *(void **)v5;
        if (*(void *)v5)
        {
          *((void *)v5 + 1) = v7;
          operator delete(v7);
        }
        BOOL v6 = v5 == v2;
        v5 -= 568;
      }
      while (!v6);
      double v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

unint64_t sub_904154(uint64_t a1, uint64_t a2, int *a3)
{
  int v4 = *a3;
  unint64_t result = a3[1];
  if (result != *a3)
  {
    unsigned int v5 = result - *a3 + 1;
    if (result - *a3 == -1)
    {
      uint64_t v15 = *(void *)(a2 + 2496);
      unint64_t v16 = (v15 + 1) % 0x138uLL;
      unint64_t v17 = *(void *)(a2 + 8 * ((v15 + 156) % 0x138uLL)) ^ ((*(void *)(a2 + 8 * v16) & 0x7FFFFFFELL | *(void *)(a2 + 8 * v15) & 0xFFFFFFFF80000000) >> 1) ^ ((uint64_t)(*(void *)(a2 + 8 * v16) << 63) >> 63) & 0xB5026F5AA96619E9;
      *(void *)(a2 + 8 * v15) = v17;
      *(void *)(a2 + 2496) = v16;
      uint64_t v18 = (((v17 >> 29) & 0x555555555 ^ v17) << 17) & 0x71D67FFFEDA60000 ^ (v17 >> 29) & 0x555555555 ^ v17;
      return (((v18 << 37) & 0xFFF7E80000000000 ^ v18) >> 43) ^ v18;
    }
    else
    {
      char v6 = __clz(v5);
      char v7 = -32;
      if (((v5 << v6) & 0x7FFFFFFF) == 0) {
        char v7 = -31;
      }
      unint64_t v8 = 0xFFFFFFFFFFFFFFFFLL >> (v7 + v6);
      unint64_t v9 = *(void *)(a2 + 2496);
      do
      {
        uint64_t v10 = 8 * v9;
        unint64_t v11 = v9 + 156;
        unint64_t v9 = (v9 + 1) % 0x138;
        unint64_t v12 = *(void *)(a2 + 8 * (v11 % 0x138)) ^ ((*(void *)(a2 + 8 * v9) & 0x7FFFFFFELL | *(void *)(a2 + v10) & 0xFFFFFFFF80000000) >> 1) ^ ((uint64_t)(*(void *)(a2 + 8 * v9) << 63) >> 63) & 0xB5026F5AA96619E9;
        *(void *)(a2 + v10) = v12;
        uint64_t v13 = (((v12 >> 29) & 0x555555555 ^ v12) << 17) & 0x71D67FFFEDA60000 ^ (v12 >> 29) & 0x555555555 ^ v12;
        unsigned int v14 = ((((v13 << 37) & 0xFFF7E80000000000 ^ v13) >> 43) ^ v13) & v8;
      }
      while (v5 <= v14);
      *(void *)(a2 + 2496) = v9;
      return v4 + v14;
    }
  }
  return result;
}

void sub_9042F4(uint64_t a1, void *a2, void *a3, unint64_t a4)
{
  char v6 = a2;
  uint64_t v9 = a1 + 16;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v10 = *(void ***)a1;
  if (0x193D4BB7E327A977 * ((v8 - *(void *)a1) >> 3) < a4)
  {
    if (v10)
    {
      unint64_t v11 = *(void ***)(a1 + 8);
      unint64_t v12 = *(void ***)a1;
      if (v11 != v10)
      {
        uint64_t v13 = v11 - 71;
        do
        {
          sub_8E57D0(v13 + 3);
          uint64_t v15 = *v13;
          if (*v13)
          {
            v13[1] = v15;
            operator delete(v15);
          }
          BOOL v14 = v13 == v10;
          v13 -= 71;
        }
        while (!v14);
        unint64_t v12 = *(void ***)a1;
      }
      *(void *)(a1 + 8) = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (a4 > 0x73615A240E6C2BLL) {
      goto LABEL_36;
    }
    unint64_t v21 = 0x193D4BB7E327A977 * (v8 >> 3);
    uint64_t v22 = 2 * v21;
    if (2 * v21 <= a4) {
      uint64_t v22 = a4;
    }
    unint64_t v23 = v21 >= 0x39B0AD12073615 ? 0x73615A240E6C2BLL : v22;
    if (v23 > 0x73615A240E6C2BLL) {
LABEL_36:
    }
      sub_2E00();
    uint64_t v24 = 71 * v23;
    char v25 = operator new(568 * v23);
    *(void *)a1 = v25;
    *(void *)(a1 + 8) = v25;
    *(void *)(a1 + 16) = &v25[v24];
    uint64_t v19 = sub_8E9AC8(v9, v6, a3, v25);
LABEL_29:
    *(void *)(a1 + 8) = v19;
    return;
  }
  unint64_t v16 = *(void ***)(a1 + 8);
  if (0x193D4BB7E327A977 * (v16 - v10) < a4)
  {
    unint64_t v17 = &a2[v16 - v10];
    if (v16 != v10)
    {
      uint64_t v18 = 8 * (v16 - v10);
      do
      {
        sub_904574(v10, (uint64_t)v6);
        v6 += 71;
        v10 += 71;
        v18 -= 568;
      }
      while (v18);
      uint64_t v10 = *(void ***)(a1 + 8);
    }
    uint64_t v19 = sub_8E9AC8(v9, v17, a3, v10);
    goto LABEL_29;
  }
  if (a2 != a3)
  {
    int v20 = *(void ***)a1;
    do
    {
      sub_904574(v10, (uint64_t)v6);
      v6 += 71;
      v10 += 71;
      v20 += 71;
    }
    while (v6 != a3);
    unint64_t v16 = *(void ***)(a1 + 8);
    if (v16 == v20) {
      goto LABEL_35;
    }
LABEL_31:
    std::string::size_type v26 = v16 - 71;
    do
    {
      sub_8E57D0(v26 + 3);
      uint64_t v27 = *v26;
      if (*v26)
      {
        v26[1] = v27;
        operator delete(v27);
      }
      BOOL v14 = v26 == v20;
      v26 -= 71;
    }
    while (!v14);
    goto LABEL_35;
  }
  int v20 = *(void ***)a1;
  if (v16 != v10) {
    goto LABEL_31;
  }
LABEL_35:
  *(void *)(a1 + 8) = v20;
}

void sub_904564(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_90456C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *sub_904574(void *a1, uint64_t a2)
{
  if (a1 == (void *)a2)
  {
    a1[3] = *(void *)(a2 + 24);
    sub_52FD00((uint64_t)(a1 + 4), a2 + 32);
    sub_52FD00((uint64_t)(a1 + 27), (uint64_t)(a1 + 27));
    sub_52FD00((uint64_t)(a1 + 47), (uint64_t)(a1 + 47));
  }
  else
  {
    sub_326C0(a1, *(char **)a2, *(char **)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
    a1[3] = *(void *)(a2 + 24);
    sub_52FD00((uint64_t)(a1 + 4), a2 + 32);
    sub_59DF7C(a1 + 24, *(void *)(a2 + 192), *(void *)(a2 + 200), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 200) - *(void *)(a2 + 192)) >> 5));
    sub_52FD00((uint64_t)(a1 + 27), a2 + 216);
    sub_52FD00((uint64_t)(a1 + 47), a2 + 376);
    sub_904668((uint64_t)(a1 + 67), *(std::string **)(a2 + 536), *(std::string **)(a2 + 544), (uint64_t)(*(void *)(a2 + 544) - *(void *)(a2 + 536)) >> 5);
  }
  a1[70] = *(void *)(a2 + 560);
  return a1;
}

void sub_904668(uint64_t a1, std::string *__str, std::string *a3, size_t __sz)
{
  char v6 = __str;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(std::string **)a1;
  if (__sz <= (v8 - *(void *)a1) >> 5)
  {
    unint64_t v12 = *(std::string **)(a1 + 8);
    unint64_t v13 = ((char *)v12 - (char *)v9) >> 5;
    if (v13 >= __sz)
    {
      if (__str == a3)
      {
        int v20 = *(std::string **)a1;
      }
      else
      {
        int v20 = *(std::string **)a1;
        do
        {
          std::string::operator=(v9, v6);
          v9[1].__r_.__value_.__s.__data_[0] = v6[1].__r_.__value_.__s.__data_[0];
          int v20 = (std::string *)((char *)v20 + 32);
          char v6 = (std::string *)((char *)v6 + 32);
          uint64_t v9 = (std::string *)((char *)v9 + 32);
        }
        while (v6 != a3);
        unint64_t v12 = *(std::string **)(a1 + 8);
      }
      while (v12 != v20)
      {
        if (v12[-1].__r_.__value_.__s.__data_[15] < 0) {
          operator delete((void *)v12[-2].__r_.__value_.__r.__words[2]);
        }
        unint64_t v12 = (std::string *)((char *)v12 - 32);
      }
      *(void *)(a1 + 8) = v20;
    }
    else
    {
      BOOL v14 = (std::string *)((char *)__str + 32 * v13);
      if (v12 != v9)
      {
        do
        {
          std::string::operator=(v9, v6);
          v9[1].__r_.__value_.__s.__data_[0] = v6[1].__r_.__value_.__s.__data_[0];
          char v6 = (std::string *)((char *)v6 + 32);
          uint64_t v9 = (std::string *)((char *)v9 + 32);
        }
        while (v6 != v14);
        uint64_t v9 = *(std::string **)(a1 + 8);
      }
      uint64_t v15 = v9;
      if (v14 != a3)
      {
        unint64_t v16 = 0;
        do
        {
          uint64_t v18 = (char *)v9 + v16;
          uint64_t v19 = (char *)v14 + v16;
          if (SHIBYTE(v14->__r_.__value_.__r.__words[v16 / 8 + 2]) < 0)
          {
            sub_4200(v18, *(void **)v19, *((void *)v19 + 1));
          }
          else
          {
            long long v17 = *(_OWORD *)v19;
            *((void *)v18 + 2) = *((void *)v19 + 2);
            *(_OWORD *)uint64_t v18 = v17;
          }
          v9[1].__r_.__value_.__s.__data_[v16] = v14[1].__r_.__value_.__s.__data_[v16];
          v16 += 32;
        }
        while ((std::string *)((char *)v14 + v16) != a3);
        uint64_t v15 = (std::string *)((char *)v9 + v16);
      }
      *(void *)(a1 + 8) = v15;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = *(std::string **)(a1 + 8);
      unint64_t v11 = *(std::string **)a1;
      if (v10 != v9)
      {
        do
        {
          if (v10[-1].__r_.__value_.__s.__data_[15] < 0) {
            operator delete((void *)v10[-2].__r_.__value_.__r.__words[2]);
          }
          uint64_t v10 = (std::string *)((char *)v10 - 32);
        }
        while (v10 != v9);
        unint64_t v11 = *(std::string **)a1;
      }
      *(void *)(a1 + 8) = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz >> 59) {
      goto LABEL_46;
    }
    uint64_t v21 = v8 >> 4;
    if (v8 >> 4 <= __sz) {
      uint64_t v21 = __sz;
    }
    BOOL v22 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
    unint64_t v23 = 0x7FFFFFFFFFFFFFFLL;
    if (!v22) {
      unint64_t v23 = v21;
    }
    if (v23 >> 59) {
LABEL_46:
    }
      sub_2E00();
    uint64_t v24 = 32 * v23;
    char v25 = operator new(32 * v23);
    *(void *)a1 = v25;
    *(void *)(a1 + 8) = v25;
    *(void *)(a1 + 16) = &v25[v24];
    if (v6 != a3)
    {
      unint64_t v26 = 0;
      do
      {
        uint64_t v27 = &v25[v26];
        long long v28 = (char *)v6 + v26;
        if (SHIBYTE(v6->__r_.__value_.__r.__words[v26 / 8 + 2]) < 0)
        {
          sub_4200(v27, *(void **)v28, *((void *)v28 + 1));
        }
        else
        {
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
          *((void *)v27 + 2) = *((void *)v28 + 2);
        }
        v25[v26 + 24] = v6[1].__r_.__value_.__s.__data_[v26];
        v26 += 32;
      }
      while ((std::string *)((char *)v6 + v26) != a3);
      v25 += v26;
    }
    *(void *)(a1 + 8) = v25;
  }
}

double sub_904964()
{
  byte_25D208F = 1;
  word_25D2078 = 65;
  byte_25D20A7 = 1;
  word_25D2090 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25D2138 = 0u;
  *(_OWORD *)&qword_25D2148 = 0u;
  dword_25D2158 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25D2138, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25D2138, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25D2138, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25D2138, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25D20BF = 8;
  strcpy((char *)&qword_25D20A8, "any_mode");
  byte_25D20D7 = 7;
  strcpy((char *)&dword_25D20C0, "cycling");
  byte_25D20EF = 7;
  strcpy((char *)&dword_25D20D8, "driving");
  byte_25D2107 = 7;
  strcpy((char *)&dword_25D20F0, "walking");
  qword_25D2110 = 0;
  qword_25D2118 = 0;
  qword_25D2108 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25D2108 = (uint64_t)v0;
  qword_25D2110 = (uint64_t)(v0 + 9);
  qword_25D2118 = (uint64_t)(v0 + 9);
  qword_25D2120 = 0;
  qword_25D2128 = 0;
  unk_25D2130 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25D2128 = (uint64_t)(v1 + 9);
  unk_25D2130 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25D2120 = (uint64_t)v1;
  return result;
}

void sub_904C2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25D2148) {
    sub_20AC2B8((void **)qword_25D2148);
  }
  uint64_t v37 = (void *)xmmword_25D2138;
  *(void *)&xmmword_25D2138 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_904CCC(uint64_t a1, void *a2)
{
  *(void *)std::string __p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_20B8890;
  strcpy(*(char **)__p, "realtime_schedule_ttl_seconds");
  *(_DWORD *)a1 = 10 * sub_319F48(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(void *)std::string __p = operator new(0x40uLL);
  *(_OWORD *)&__p[8] = xmmword_20B9A30;
  strcpy(*(char **)__p, "suppress_system_name_given_nonempty_line_name_in_container");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(unsigned char *)(a1 + 4) = v4;
  *(_DWORD *)(a1 + 8) = 0;
  __p[23] = 11;
  strcpy(__p, "ttl_seconds");
  *(_DWORD *)(a1 + 12) = 10 * sub_319F48(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(void *)std::string __p = operator new(0x30uLL);
  *(_OWORD *)&__p[8] = xmmword_20E1380;
  strcpy(*(char **)__p, "suppress_service_frequencies_for_time_styles");
  int v5 = (uint64_t *)sub_5C4AC(a2, (uint64_t)__p);
  char v6 = v5;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    uint64_t v8 = *v6;
    uint64_t v7 = v6[1];
    if (v8 == v7) {
      return a1;
    }
  }
  else
  {
    uint64_t v8 = *v5;
    uint64_t v7 = v5[1];
    if (*v5 == v7) {
      return a1;
    }
  }
  do
  {
    if (*(_DWORD *)(v8 + 8))
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_23FDF58;
    }
    uint64_t v9 = *(void *)v8;
    v8 += 16;
    *(_DWORD *)(a1 + 8) |= 1 << sub_366588(v9);
  }
  while (v8 != v7);
  return a1;
}

void sub_904EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_904F18(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = 0;
  long long v17 = operator new(0x20uLL);
  long long v18 = xmmword_20B8E90;
  strcpy((char *)v17, "TransitScheduleComponentBuilder");
  std::string __p = 0;
  uint64_t v15 = 0;
  uint64_t v8 = sub_374CDC((uint64_t)a2, (uint64_t)&v17, (uint64_t *)&__p);
  sub_904CCC((uint64_t)a1, v8);
  uint64_t v9 = (void **)__p;
  if (__p)
  {
    char v10 = v15;
    int v11 = __p;
    if (v15 != __p)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      int v11 = __p;
    }
    uint64_t v15 = v9;
    operator delete(v11);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(v17);
  }
  a1[2] = a3;
  a1[3] = a4;
  a1[4] = sub_3757C8(a2);
  a1[5] = sub_375500(a2);
  a1[6] = sub_375B24(a2);
  a1[7] = sub_3755E4(a2);
  unint64_t v12 = (uint64_t *)sub_374EF4(a2);
  sub_688A04(v12, 5u, *(_DWORD *)(a3 + 968), a1 + 8);
  return a1;
}

void sub_90505C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_905084(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = &off_243B100;
  *(_OWORD *)(a3 + 16) = 0u;
  char v6 = (uint64_t *)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = xmmword_20E81C0;
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a3 + 12) = 2;
  uint64_t v8 = *(void *)(a2 + 416);
  uint64_t v7 = *(void *)(a2 + 424);
  uint64_t v44 = 0;
  unint64_t v45 = 0;
  uint64_t v43 = 0;
  uint64_t v9 = v7 - v8;
  if (v9)
  {
    if (v9 < 0) {
      sub_2E00();
    }
    unint64_t v10 = 0xEEEEEEEEEEEEEEEFLL * (v9 >> 3);
    uint64_t v43 = operator new(8 * (((v10 - 1) >> 6) + 1));
    uint64_t v44 = 0;
    unint64_t v45 = ((v10 - 1) >> 6) + 1;
    sub_43284(&v43, v10, 0);
  }
  int v11 = *(uint64_t **)(a2 + 392);
  for (uint64_t i = *(uint64_t **)(a2 + 400); v11 != i; v11 += 4)
  {
    uint64_t v13 = *v11;
    uint64_t v14 = v11[1];
    if (*v11 != v14)
    {
      uint64_t v15 = *(void *)(a2 + 440);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 448) - v15) >> 4);
      do
      {
        if (*(unsigned char *)(v13 + 24) == 3)
        {
          long long v18 = *(unint64_t **)v13;
          long long v17 = *(unint64_t **)(v13 + 8);
          if (*(unint64_t **)v13 != v17)
          {
            uint64_t v19 = (char *)v43;
            do
            {
              if (v16 <= *v18) {
                sub_66748();
              }
              int v20 = (unint64_t **)(v15 + 48 * *v18);
              uint64_t v21 = *v20;
              BOOL v22 = v20[1];
              while (v21 != v22)
              {
                unint64_t v23 = *v21++;
                *(void *)&v19[(v23 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v23;
              }
              ++v18;
            }
            while (v18 != v17);
          }
        }
        v13 += 56;
      }
      while (v13 != v14);
    }
  }
  uint64_t v24 = *(void *)(a2 + 424) - *(void *)(a2 + 416);
  if (v24)
  {
    uint64_t v25 = 0;
    unint64_t v26 = 0;
    uint64_t v27 = v24 / 120;
    do
    {
      sub_90556C(a1, (unsigned int *)(*(void *)(a2 + 416) + v25), *(_DWORD *)(a2 + 388), (*(void *)((char *)v43 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v26) & 1, (uint64_t *)v46);
      unint64_t v29 = *(void *)(a3 + 24);
      if (v29 < *(void *)(a3 + 32))
      {
        sub_909000(a3 + 32, *(void *)(a3 + 24), (uint64_t)v46);
        uint64_t v28 = v29 + 312;
      }
      else
      {
        uint64_t v28 = sub_908E8C(v6, (uint64_t)v46);
      }
      *(void *)(a3 + 24) = v28;
      sub_8E49DC((uint64_t)v46);
      ++v26;
      v25 += 120;
    }
    while (v27 != v26);
  }
  uint64_t v30 = *(void *)(a2 + 440);
  uint64_t v31 = *(void *)(a2 + 448);
  while (v30 != v31)
  {
    sub_905E80(a1, v30, (uint64_t)v46);
    unint64_t v32 = *(void *)(a3 + 48);
    if (v32 >= *(void *)(a3 + 56))
    {
      std::string::size_type v35 = sub_909160((int64x2_t *)(a3 + 40), (uint64_t)v46);
      int v36 = SHIBYTE(v52);
      *(void *)(a3 + 48) = v35;
      if (v36 < 0)
      {
        operator delete((void *)v51);
        unint64_t v34 = (char *)__p[0];
        if (!__p[0]) {
          goto LABEL_52;
        }
      }
      else
      {
        unint64_t v34 = (char *)__p[0];
        if (!__p[0]) {
          goto LABEL_52;
        }
      }
    }
    else
    {
      *(void *)(v32 + 16) = 0;
      *(void *)(v32 + 24) = 0;
      *(void *)unint64_t v32 = 0;
      *(void *)(v32 + 8) = 0;
      *(_OWORD *)unint64_t v32 = *(_OWORD *)v46;
      *(void *)(v32 + 16) = v47;
      v46[0] = 0;
      v46[1] = 0;
      uint64_t v47 = 0;
      *(void *)(v32 + 32) = 0;
      *(void *)(v32 + 40) = 0;
      *(_OWORD *)(v32 + 24) = *(_OWORD *)__p;
      *(void *)(v32 + 40) = v49;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v49 = 0;
      *(unsigned char *)(v32 + 48) = v50;
      long long v33 = v51;
      *(void *)(v32 + 72) = v52;
      *(_OWORD *)(v32 + 56) = v33;
      uint64_t v52 = 0;
      long long v51 = 0uLL;
      *(void *)(a3 + 48) = v32 + 80;
      unint64_t v34 = (char *)__p[0];
      if (!__p[0]) {
        goto LABEL_52;
      }
    }
    uint64_t v37 = v34;
    if (__p[1] == v34) {
      goto LABEL_51;
    }
    uint64_t v38 = (void **)((char *)__p[1] - 56);
    do
    {
      if (*((char *)v38 + 55) < 0)
      {
        operator delete(v38[4]);
        if ((*((char *)v38 + 23) & 0x80000000) == 0)
        {
LABEL_41:
          if ((*((char *)v38 - 9) & 0x80000000) == 0) {
            goto LABEL_42;
          }
          goto LABEL_46;
        }
      }
      else if ((*((char *)v38 + 23) & 0x80000000) == 0)
      {
        goto LABEL_41;
      }
      operator delete(*v38);
      if ((*((char *)v38 - 9) & 0x80000000) == 0)
      {
LABEL_42:
        int v41 = *((_DWORD *)v38 - 12);
        if (v41 == 1) {
          goto LABEL_35;
        }
        goto LABEL_47;
      }
LABEL_46:
      operator delete(*(v38 - 4));
      int v41 = *((_DWORD *)v38 - 12);
      if (v41 == 1)
      {
LABEL_35:
        uint64_t v39 = *(v38 - 9);
        if (!v39) {
          goto LABEL_38;
        }
        *(v38 - 8) = v39;
        goto LABEL_37;
      }
LABEL_47:
      if (!v41 && *((char *)v38 - 49) < 0)
      {
        uint64_t v39 = *(v38 - 9);
LABEL_37:
        operator delete(v39);
      }
LABEL_38:
      uint64_t v40 = (char *)(v38 - 11);
      v38 -= 18;
    }
    while (v40 != v34);
    uint64_t v37 = (char *)__p[0];
LABEL_51:
    __p[1] = v34;
    operator delete(v37);
LABEL_52:
    if (v46[0])
    {
      v46[1] = v46[0];
      operator delete(v46[0]);
    }
    v30 += 48;
  }
  std::string::size_type v42 = *(_DWORD **)(a1 + 24);
  *(_DWORD *)(a3 + 64) = *v42;
  *(_DWORD *)(a3 + 68) = v42[1];
  *(_DWORD *)(a3 + 72) = v42[2];
  *(_DWORD *)(a3 + 76) = sub_90651C((void *)a1, a2);
  if (v43) {
    operator delete(v43);
  }
}

void sub_90550C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_8E35D0(v13);
  _Unwind_Resume(a1);
}

double sub_90556C@<D0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  *((_OWORD *)a5 + 1) = 0u;
  *((_OWORD *)a5 + 2) = 0u;
  *(_OWORD *)a5 = 0u;
  a5[6] = 0x8000000080000000;
  a5[7] = -1;
  uint64_t v8 = a5 + 7;
  *(_OWORD *)(a5 + 9) = 0u;
  uint64_t v9 = (std::string *)(a5 + 9);
  a5[8] = -1;
  *(_OWORD *)(a5 + 11) = 0u;
  *(_OWORD *)(a5 + 13) = 0u;
  *(_OWORD *)(a5 + 15) = 0u;
  *(_OWORD *)(a5 + 17) = 0u;
  *(_OWORD *)(a5 + 19) = 0u;
  *((_DWORD *)a5 + 50) = -1;
  *((_DWORD *)a5 + 52) = -1;
  *(_DWORD *)((char *)a5 + 211) = -1;
  *(uint64_t *)((char *)a5 + 215) = 0;
  *(uint64_t *)((char *)a5 + 231) = 0;
  *(uint64_t *)((char *)a5 + 223) = 0;
  *(_WORD *)((char *)a5 + 239) = 0;
  a5[31] = 0;
  unint64_t v10 = a5 + 31;
  *((unsigned char *)a5 + 272) = 0;
  a5[32] = 0;
  a5[33] = 0;
  a5[35] = -1;
  int v11 = a5 + 31;
  v11[5] = 0;
  uint64_t v67 = v11 + 5;
  a5[37] = 0;
  a5[38] = 0;
  unint64_t v12 = (int *)sub_369F8C(*(void *)(a1 + 56), a2[1] | ((unint64_t)*a2 << 32), 0, "trip");
  unint64_t v13 = *(void *)((char *)v12 + *(unsigned __int16 *)((char *)v12 - *v12 + 6));
  uint64_t v14 = *a2;
  unsigned int v15 = a2[3];
  unint64_t v16 = sub_369B60(*(void *)(a1 + 56), a2[1] | (unint64_t)(v14 << 32), 0);
  long long v17 = &v16[-*(int *)v16];
  if (*(unsigned __int16 *)v17 < 5u)
  {
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v18 = *((unsigned __int16 *)v17 + 2);
    if (*((_WORD *)v17 + 2)) {
      v18 += (uint64_t)&v16[*(unsigned int *)&v16[v18]];
    }
  }
  uint64_t v19 = (int *)(v18 + 4 * v14 + 4 + *(unsigned int *)(v18 + 4 * v14 + 4));
  int v20 = (unsigned __int16 *)((char *)v19 - *v19);
  if (*v20 >= 0xDu && (uint64_t v21 = v20[6]) != 0) {
    int v22 = *(int *)((char *)v19 + v21);
  }
  else {
    int v22 = -1;
  }
  unint64_t v23 = *(void *)&v16[24 * v22
                      + 4
                      + 24 * v15
                      + *((unsigned __int16 *)v17 + 3)
                      + *(unsigned int *)&v16[*((unsigned __int16 *)v17 + 3)]];
  uint64_t v24 = *(void *)(a1 + 56);
  uint64_t v25 = (int *)sub_8DFD1C(v24, v13, 0, "line");
  unint64_t v26 = (unsigned __int16 *)((char *)v25 - *v25);
  if (*v26 >= 5u && (uint64_t v27 = v26[2]) != 0) {
    uint64_t v28 = *(void *)((char *)v25 + v27);
  }
  else {
    uint64_t v28 = 0;
  }
  unint64_t v29 = sub_398020(v24, 0);
  uint64_t v30 = &v29[-*(int *)v29];
  if (*(unsigned __int16 *)v30 >= 0xBu)
  {
    uint64_t v31 = *((unsigned __int16 *)v30 + 5);
    if (v31)
    {
      if (v29[v31]) {
        uint64_t v28 = nullsub_1(v28);
      }
    }
  }
  *uint64_t v8 = v28;
  uint64_t v32 = *(void *)(a1 + 40);
  long long v33 = (int *)sub_498D5C(v32, v23, 0, "stop");
  unint64_t v34 = (unsigned __int16 *)((char *)v33 - *v33);
  if (*v34 >= 5u && (uint64_t v35 = v34[2]) != 0) {
    uint64_t v36 = *(void *)((char *)v33 + v35);
  }
  else {
    uint64_t v36 = 0;
  }
  uint64_t v37 = sub_398020(v32, 0);
  uint64_t v38 = &v37[-*(int *)v37];
  if (*(unsigned __int16 *)v38 >= 0xBu)
  {
    uint64_t v39 = *((unsigned __int16 *)v38 + 5);
    if (v39)
    {
      if (v37[v39]) {
        uint64_t v36 = nullsub_1(v36);
      }
    }
  }
  a5[8] = v36;
  sub_90B8C8(a2[1] | ((unint64_t)*a2 << 32), a2[3], *(void *)(a1 + 56), *(void *)(a1 + 16), (uint64_t)__p);
  if (*((char *)a5 + 95) < 0) {
    operator delete(v9->__r_.__value_.__l.__data_);
  }
  *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
  v9->__r_.__value_.__r.__words[2] = (std::string::size_type)v71;
  sub_90BA34(a2[1] | ((unint64_t)*a2 << 32), a2[3], *(void *)(a1 + 56), *(void *)(a1 + 16), (uint64_t)__p);
  uint64_t v40 = (void **)(a5 + 12);
  if (*((char *)a5 + 119) < 0) {
    operator delete(*v40);
  }
  *(_OWORD *)uint64_t v40 = *(_OWORD *)__p;
  a5[14] = (uint64_t)v71;
  sub_906798((uint64_t *)a1, a2, a4, (uint64_t)__p);
  int v41 = (void **)(a5 + 15);
  if (*((char *)a5 + 143) < 0) {
    operator delete(*v41);
  }
  *(_OWORD *)int v41 = *(_OWORD *)__p;
  a5[17] = (uint64_t)v71;
  uint64_t v42 = *((unsigned __int8 *)a5 + 119);
  if ((v42 & 0x80u) != 0) {
    uint64_t v42 = a5[13];
  }
  if (!v42) {
    std::string::operator=((std::string *)a5 + 4, v9);
  }
  uint64_t v43 = (int *)sub_8DFD1C(*(void *)(a1 + 56), v13, 0, "line");
  uint64_t v44 = (unsigned __int16 *)((char *)v43 - *v43);
  if (*v44 >= 0x25u && (uint64_t v45 = v44[18]) != 0) {
    int v46 = *((unsigned __int8 *)v43 + v45);
  }
  else {
    int v46 = 0;
  }
  uint64_t v47 = (int *)sub_369F8C(*(void *)(a1 + 56), a2[1] | ((unint64_t)*a2 << 32), 0, "trip");
  uint64_t v48 = (unsigned __int16 *)((char *)v47 - *v47);
  if ((*v48 >= 0x13u && (uint64_t v49 = v48[9]) != 0 && *(int *)((char *)v47 + v49 + *(unsigned int *)((char *)v47 + v49))
     || v46 == 1
     || *(unsigned __int8 *)(*(void *)(a1 + 16) + 1425) >= 2u)
    && ((*(_DWORD *)(a1 + 8) >> v46) & 1) == 0)
  {
    if (a5 + 3 != (uint64_t *)(a2 + 14)) {
      sub_9094A4(a5 + 3, *((char **)a2 + 7), *((char **)a2 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3));
    }
    char v50 = (int32x2_t *)a5[3];
    long long v51 = (int32x2_t *)a5[4];
    if (v50 != v51)
    {
      if (a3 < 0) {
        char v52 = -5;
      }
      else {
        char v52 = 5;
      }
      int32x2_t v53 = vdup_n_s32(a3 / -10+ (((-103 * (char)(v52 + a3 % 10)) >> 15) & 1)+ ((-103 * (char)(v52 + a3 % 10)) >> 10));
      do
      {
        int32x2_t *v50 = vadd_s32(v53, *v50);
        v50 += 5;
      }
      while (v50 != v51);
    }
  }
  if (a2[21] != 0x7FFFFFFF && a2[22] != 0x7FFFFFFF)
  {
    unsigned int v55 = a2[22];
    if (a3 < 0) {
      char v56 = -5;
    }
    else {
      char v56 = 5;
    }
    unsigned int v57 = a3 / -10 + (((-103 * (char)(v56 + a3 % 10)) >> 15) & 1) + ((-103 * (char)(v56 + a3 % 10)) >> 10);
    *((_DWORD *)a5 + 12) = v57 + a2[21];
    *((_DWORD *)a5 + 13) = v57 + v55;
  }
  sub_906980(a1, a2, __p);
  BOOL v58 = (void *)a5[18];
  if (v58)
  {
    a5[19] = (uint64_t)v58;
    operator delete(v58);
    a5[18] = 0;
    a5[19] = 0;
    a5[20] = 0;
  }
  *((_OWORD *)a5 + 9) = *(_OWORD *)__p;
  a5[20] = (uint64_t)v71;
  sub_906B24((void *)a1, a2, (uint64_t)__p);
  sub_4F377C((uint64_t)(a5 + 21), (uint64_t)__p);
  a5[26] = v74;
  int64_t v59 = (void **)(a5 + 27);
  if (*((char *)a5 + 239) < 0) {
    operator delete(*v59);
  }
  *(_OWORD *)int64_t v59 = *(_OWORD *)v75;
  a5[29] = v76;
  HIBYTE(v76) = 0;
  LOBYTE(v75[0]) = 0;
  *((unsigned char *)a5 + 240) = v77;
  if (*((char *)a5 + 271) < 0)
  {
    operator delete((void *)a5[31]);
    int v62 = SHIBYTE(v76);
    *(_OWORD *)unint64_t v10 = v78;
    void v10[2] = v79;
    HIBYTE(v79) = 0;
    LOBYTE(v78) = 0;
    *((unsigned char *)a5 + 272) = v80;
    if (v62 < 0)
    {
      operator delete(v75[0]);
      int v60 = v73;
      if (v73 == 1) {
        goto LABEL_67;
      }
    }
    else
    {
      int v60 = v73;
      if (v73 == 1) {
        goto LABEL_67;
      }
    }
  }
  else
  {
    *(_OWORD *)unint64_t v10 = v78;
    void v10[2] = v79;
    HIBYTE(v79) = 0;
    LOBYTE(v78) = 0;
    *((unsigned char *)a5 + 272) = v80;
    int v60 = v73;
    if (v73 == 1)
    {
LABEL_67:
      int v61 = __p[1];
      if (!__p[1]) {
        goto LABEL_75;
      }
      unint64_t v71 = __p[1];
      goto LABEL_74;
    }
  }
  if (!v60 && v72 < 0)
  {
    int v61 = __p[1];
LABEL_74:
    operator delete(v61);
  }
LABEL_75:
  a5[35] = sub_906C74(a1, a2);
  sub_906E48((uint64_t *)a1, (uint64_t)a2, a3, (uint64_t *)__p);
  uint64_t v63 = *a5;
  if (!*a5) {
    goto LABEL_85;
  }
  uint64_t v64 = a5[1];
  size_t v65 = (void *)*a5;
  if (v64 != v63)
  {
    while (1)
    {
      if (*(char *)(v64 - 1) < 0)
      {
        operator delete(*(void **)(v64 - 24));
        sub_4D4B58(v64 - 192);
        if ((*(char *)(v64 - 201) & 0x80000000) == 0) {
          goto LABEL_79;
        }
LABEL_82:
        operator delete(*(void **)(v64 - 224));
        v64 -= 240;
        if (v64 == v63)
        {
LABEL_83:
          size_t v65 = (void *)*a5;
          break;
        }
      }
      else
      {
        sub_4D4B58(v64 - 192);
        if (*(char *)(v64 - 201) < 0) {
          goto LABEL_82;
        }
LABEL_79:
        v64 -= 240;
        if (v64 == v63) {
          goto LABEL_83;
        }
      }
    }
  }
  a5[1] = v63;
  operator delete(v65);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
LABEL_85:
  *(_OWORD *)a5 = *(_OWORD *)__p;
  a5[2] = (uint64_t)v71;
  sub_907498(a1, a2, (uint64_t)__p);
  if (*((char *)a5 + 311) < 0) {
    operator delete((void *)*v67);
  }
  double result = *(double *)__p;
  *(_OWORD *)uint64_t v67 = *(_OWORD *)__p;
  v67[2] = (uint64_t)v71;
  return result;
}

void sub_905D40(_Unwind_Exception *a1)
{
  sub_8E49DC(v1);
  _Unwind_Resume(a1);
}

void sub_905D54(_Unwind_Exception *a1)
{
  sub_8E49DC(v1);
  _Unwind_Resume(a1);
}

void sub_905D68(_Unwind_Exception *a1)
{
  sub_8E49DC(v1);
  _Unwind_Resume(a1);
}

void sub_905D7C(_Unwind_Exception *a1)
{
  sub_8E49DC(v1);
  _Unwind_Resume(a1);
}

void sub_905D90(_Unwind_Exception *a1)
{
  sub_8E49DC(v1);
  _Unwind_Resume(a1);
}

void sub_905DA4(_Unwind_Exception *a1)
{
  sub_8E49DC(v1);
  _Unwind_Resume(a1);
}

void sub_905DB8(_Unwind_Exception *a1)
{
  sub_8E49DC(v1);
  _Unwind_Resume(a1);
}

void sub_905DCC(_Unwind_Exception *a1)
{
  sub_8E49DC(v1);
  _Unwind_Resume(a1);
}

void sub_905DE0(_Unwind_Exception *a1)
{
  sub_8E49DC(v1);
  _Unwind_Resume(a1);
}

void sub_905DF4(_Unwind_Exception *a1)
{
  sub_8E49DC(v1);
  _Unwind_Resume(a1);
}

void sub_905E08(_Unwind_Exception *a1)
{
  sub_8E49DC(v1);
  _Unwind_Resume(a1);
}

void sub_905E1C(_Unwind_Exception *a1)
{
  sub_8E49DC(v1);
  _Unwind_Resume(a1);
}

void sub_905E30(_Unwind_Exception *a1)
{
  sub_8E49DC(v1);
  _Unwind_Resume(a1);
}

void sub_905E44(_Unwind_Exception *a1)
{
  sub_8E49DC(v1);
  _Unwind_Resume(a1);
}

void sub_905E58(_Unwind_Exception *a1)
{
  sub_8E49DC(v1);
  _Unwind_Resume(a1);
}

void sub_905E6C(_Unwind_Exception *a1)
{
  sub_8E49DC(v1);
  _Unwind_Resume(a1);
}

void sub_905E80(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  *(unsigned char *)(a3 + 48) = 1;
  *(void *)(a3 + 56) = 0;
  char v6 = (void **)(a3 + 56);
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = 0;
  if (a3 != a2) {
    sub_326C0((void *)a3, *(char **)a2, *(char **)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  }
  uint64_t v7 = (int *)sub_369F8C(*(void *)(a1 + 56), *(unsigned int *)(a2 + 28) | ((unint64_t)*(unsigned int *)(a2 + 24) << 32), 0, "trip");
  sub_90C330(*(void *)((char *)v7 + *(unsigned __int16 *)((char *)v7 - *v7 + 6)), *(unsigned __int8 *)(a1 + 4), *(void *)(a1 + 64), *(void *)(a1 + 32), *(void *)(a1 + 56), *(void *)(a1 + 16), (std::string *)&v48);
  if (*(char *)(a3 + 79) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)char v6 = v48;
  *(void *)(a3 + 72) = v49;
  *(unsigned char *)(a3 + 48) = *(unsigned char *)(a2 + 45);
  uint64_t v8 = (int *)sub_369F8C(*(void *)(a1 + 56), *(unsigned int *)(a2 + 28) | ((unint64_t)*(unsigned int *)(a2 + 24) << 32), 0, "trip");
  unint64_t v9 = *(void *)((char *)v8 + *(unsigned __int16 *)((char *)v8 - *v8 + 6));
  if (*(unsigned char *)(a2 + 44))
  {
    if (*(unsigned char *)(a2 + 44) != 1) {
      return;
    }
    unint64_t v10 = (int *)sub_8DFD1C(*(void *)(a1 + 56), v9, 0, "line");
    sub_96724C(*(void *)(a1 + 32), *(void *)((char *)v10 + *(unsigned __int16 *)((char *)v10 - *v10 + 6)), (uint64_t)&__str);
    LODWORD(v52[0]) = -1;
    *(_DWORD *)((char *)v52 + 3) = -1;
    memset((char *)v52 + 7, 0, 26);
    memset(&v53, 0, sizeof(v53));
    char v54 = 0;
    uint64_t v56 = 0;
    long long __p = 0uLL;
    int v51 = -1;
    LODWORD(v48) = 3;
    sub_4F39B8((uint64_t)&v48 + 8, &__str);
    v52[0] = v43;
    std::string::operator=((std::string *)&v52[1], &v44);
    LOBYTE(v52[4]) = v45;
    std::string::operator=(&v53, &v46);
    char v54 = v47;
    unint64_t v11 = *(void *)(a3 + 32);
    if (v11 >= *(void *)(a3 + 40))
    {
      uint64_t v27 = sub_8FD3E0((void **)(a3 + 24), (uint64_t)&v48);
      int v28 = SHIBYTE(v56);
      *(void *)(a3 + 32) = v27;
      if (v28 < 0)
      {
        operator delete((void *)__p);
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_39;
        }
      }
      else if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_39;
      }
    }
    else
    {
      *(_DWORD *)unint64_t v11 = v48;
      *(_DWORD *)(v11 + 40) = v51;
      if (v51 == 1)
      {
        uint64_t v31 = *((void *)&v48 + 1);
        *(void *)(v11 + 16) = 0;
        *(void *)(v11 + 8) = v31;
        *(void *)(v11 + 24) = 0;
        *(void *)(v11 + 32) = 0;
        uint64_t v32 = (const void *)v49;
        int64_t v33 = *((void *)&v49 + 1) - v49;
        if (*((void *)&v49 + 1) != (void)v49)
        {
          if (v33 < 0) {
            sub_2E00();
          }
          unint64_t v34 = (char *)operator new(*((void *)&v49 + 1) - v49);
          *(void *)(v11 + 16) = v34;
          *(void *)(v11 + 24) = v34;
          uint64_t v35 = &v34[8 * (v33 >> 3)];
          *(void *)(v11 + 32) = v35;
          memcpy(v34, v32, v33);
          *(void *)(v11 + 24) = v35;
        }
      }
      else if (!v51)
      {
        *(void *)(v11 + 8) = *((void *)&v48 + 1);
        unint64_t v12 = (unsigned char *)(v11 + 16);
        if (SHIBYTE(v50) < 0)
        {
          sub_4200(v12, (void *)v49, *((unint64_t *)&v49 + 1));
        }
        else
        {
          long long v13 = v49;
          *(void *)(v11 + 32) = v50;
          *(_OWORD *)unint64_t v12 = v13;
        }
      }
      *(void *)(v11 + 48) = v52[0];
      long long v36 = *(_OWORD *)&v52[1];
      *(void *)(v11 + 72) = v52[3];
      *(_OWORD *)(v11 + 56) = v36;
      memset(&v52[1], 0, 24);
      *(unsigned char *)(v11 + 80) = v52[4];
      long long v37 = *(_OWORD *)&v53.__r_.__value_.__l.__data_;
      *(void *)(v11 + 104) = *((void *)&v53.__r_.__value_.__l + 2);
      *(_OWORD *)(v11 + 88) = v37;
      memset(&v53, 0, sizeof(v53));
      *(unsigned char *)(v11 + 112) = v54;
      long long v38 = __p;
      *(void *)(v11 + 136) = v56;
      *(_OWORD *)(v11 + 120) = v38;
      uint64_t v56 = 0;
      long long __p = 0uLL;
      *(void *)(a3 + 32) = v11 + 144;
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_39:
        operator delete(v53.__r_.__value_.__l.__data_);
        if (SHIBYTE(v52[3]) < 0)
        {
LABEL_40:
          operator delete((void *)v52[1]);
          int v29 = v51;
          if (v51 == 1) {
            goto LABEL_41;
          }
          goto LABEL_29;
        }
LABEL_28:
        int v29 = v51;
        if (v51 == 1)
        {
LABEL_41:
          uint64_t v30 = (void *)v49;
          if (!(void)v49) {
            goto LABEL_44;
          }
          *((void *)&v49 + 1) = v49;
          goto LABEL_43;
        }
LABEL_29:
        if (v29 || (SHIBYTE(v50) & 0x80000000) == 0)
        {
LABEL_44:
          if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v46.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_46:
              int v39 = v42;
              if (v42 != 1)
              {
LABEL_47:
                if (!v39 && v41 < 0)
                {
                  int64_t size = (void *)__str.__r_.__value_.__l.__size_;
LABEL_54:
                  operator delete(size);
                  return;
                }
                return;
              }
LABEL_52:
              int64_t size = (void *)__str.__r_.__value_.__l.__size_;
              if (!__str.__r_.__value_.__l.__size_) {
                return;
              }
              __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
              goto LABEL_54;
            }
          }
          else if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_46;
          }
          operator delete(v44.__r_.__value_.__l.__data_);
          int v39 = v42;
          if (v42 != 1) {
            goto LABEL_47;
          }
          goto LABEL_52;
        }
        uint64_t v30 = (void *)v49;
LABEL_43:
        operator delete(v30);
        goto LABEL_44;
      }
    }
    if (SHIBYTE(v52[3]) < 0) {
      goto LABEL_40;
    }
    goto LABEL_28;
  }
  uint64_t v15 = *(unsigned int *)(a2 + 24);
  uint64_t v14 = *(unsigned int *)(a2 + 28);
  int v16 = *(_DWORD *)(a2 + 36);
  long long v17 = sub_369B60(*(void *)(a1 + 56), v14 | (v15 << 32), 0);
  uint64_t v18 = &v17[-*(int *)v17];
  if (*(unsigned __int16 *)v18 < 5u)
  {
    uint64_t v19 = 0;
  }
  else
  {
    uint64_t v19 = *((unsigned __int16 *)v18 + 2);
    if (*((_WORD *)v18 + 2)) {
      v19 += (uint64_t)&v17[*(unsigned int *)&v17[v19]];
    }
  }
  int v20 = (int *)(v19 + 4 * v15 + 4 + *(unsigned int *)(v19 + 4 * v15 + 4));
  uint64_t v21 = (unsigned __int16 *)((char *)v20 - *v20);
  if (*v21 >= 0xDu && (uint64_t v22 = v21[6]) != 0) {
    int v23 = *(int *)((char *)v20 + v22);
  }
  else {
    int v23 = -1;
  }
  sub_907918((uint64_t *)a1, v9, *(void *)&v17[24 * (v23 + v16)+ 4+ *((unsigned __int16 *)v18 + 3)+ *(unsigned int *)&v17[*((unsigned __int16 *)v18 + 3)]], (uint64_t)&v48);
  sub_8FD660((uint64_t *)(a3 + 24), *(_DWORD **)(a3 + 32), v48, *((uint64_t *)&v48 + 1), 0x8E38E38E38E38E39 * ((uint64_t)(*((void *)&v48 + 1) - v48) >> 4));
  uint64_t v24 = v48;
  if ((void)v48)
  {
    uint64_t v25 = *((void *)&v48 + 1);
    int64_t size = (void *)v48;
    if (*((void *)&v48 + 1) != (void)v48)
    {
      do
      {
        v25 -= 144;
        sub_8E48A4((uint64_t)&v49, v25);
      }
      while (v25 != v24);
      int64_t size = (void *)v48;
    }
    *((void *)&v48 + 1) = v24;
    goto LABEL_54;
  }
}

void sub_9063F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_90647C(uint64_t a1)
{
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    uint64_t v2 = *(void **)(a1 + 24);
    if (!v2) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v5 = *(void *)(a1 + 32);
    char v6 = v2;
    if ((void *)v5 != v2)
    {
      do
      {
        v5 -= 144;
        sub_8E48A4(a1 + 40, v5);
      }
      while ((void *)v5 != v2);
      char v6 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v2;
    operator delete(v6);
    uint64_t v3 = *(void **)a1;
    if (*(void *)a1) {
      goto LABEL_4;
    }
    return a1;
  }
  operator delete(*(void **)(a1 + 56));
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
LABEL_4:
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_90651C(void *a1, uint64_t a2)
{
  BOOL v4 = *(unsigned int **)(a2 + 416);
  long long v37 = *(unsigned int **)(a2 + 424);
  if (v4 == v37)
  {
LABEL_18:
    uint64_t v25 = sub_8ECB18((_DWORD *)a2);
    if (*v25) {
      BOOL v26 = v25[1] == -1;
    }
    else {
      BOOL v26 = 1;
    }
    if (v26) {
      goto LABEL_28;
    }
    int v27 = v25[2];
    if (v27 == -1) {
      goto LABEL_28;
    }
    uint64_t v28 = *(void *)v25;
    uint64_t v29 = a1[7];
    uint64_t v30 = (int *)sub_369F8C(v29, *(void *)v25, 0, "trip");
    uint64_t v31 = (int *)sub_8DFD1C(v29, *(void *)((char *)v30 + *(unsigned __int16 *)((char *)v30 - *v30 + 6)), 0, "line");
    uint64_t v32 = (unsigned __int16 *)((char *)v31 - *v31);
    if (*v32 < 0x3Du || (uint64_t v33 = v32[30]) == 0 || !*((unsigned char *)v31 + v33))
    {
      uint64_t v34 = a1[6];
      uint64_t v35 = **(void **)(v34 + 3896);
      if (!v35 || !sub_367060(v35, v28, v27, *(unsigned char *)(v34 + 3904))) {
LABEL_28:
      }
        a1 = (void *)(a1[3] + 4);
    }
  }
  else
  {
    while (1)
    {
      int v5 = v4[2];
      unint64_t v6 = v4[1] | ((unint64_t)*v4 << 32);
      uint64_t v7 = a1[7];
      uint64_t v8 = (int *)sub_369F8C(v7, v6, 0, "trip");
      unint64_t v9 = (int *)sub_8DFD1C(v7, *(void *)((char *)v8 + *(unsigned __int16 *)((char *)v8 - *v8 + 6)), 0, "line");
      unint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
      if (*v10 >= 0x3Du)
      {
        uint64_t v11 = v10[30];
        if (v11)
        {
          if (*((unsigned char *)v9 + v11)) {
            break;
          }
        }
      }
      uint64_t v12 = a1[6];
      uint64_t v13 = **(void **)(v12 + 3896);
      if (v13)
      {
        if (sub_367060(v13, v6, v5, *(unsigned char *)(v12 + 3904))) {
          break;
        }
      }
      uint64_t v15 = *((void *)v4 + 3);
      uint64_t v14 = *((void *)v4 + 4);
      while (v15 != v14)
      {
        int v16 = *(_DWORD *)(*(void *)v15 + 12);
        unint64_t v17 = *(unsigned int *)(*(void *)v15 + 8) | ((unint64_t)*(unsigned int *)(*(void *)v15 + 4) << 32);
        uint64_t v18 = a1[7];
        uint64_t v19 = (int *)sub_369F8C(v18, v17, 0, "trip");
        int v20 = (int *)sub_8DFD1C(v18, *(void *)((char *)v19 + *(unsigned __int16 *)((char *)v19 - *v19 + 6)), 0, "line");
        uint64_t v21 = (unsigned __int16 *)((char *)v20 - *v20);
        if (*v21 >= 0x3Du)
        {
          uint64_t v22 = v21[30];
          if (v22)
          {
            if (*((unsigned char *)v20 + v22)) {
              return *(unsigned int *)a1;
            }
          }
        }
        uint64_t v23 = a1[6];
        uint64_t v24 = **(void **)(v23 + 3896);
        if (v24)
        {
          if (sub_367060(v24, v17, v16, *(unsigned char *)(v23 + 3904))) {
            return *(unsigned int *)a1;
          }
        }
        v15 += 32;
      }
      v4 += 30;
      if (v4 == v37) {
        goto LABEL_18;
      }
    }
  }
  return *(unsigned int *)a1;
}

void sub_906798(uint64_t *a1@<X0>, unsigned int *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  sub_90B40C(a2[1] | ((unint64_t)*a2 << 32), a2[3], a1[7], a1[2], a1[8], a3 ^ 1, &__src);
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__src.__r_.__value_.__l.__size_)
    {
      sub_4200((unsigned char *)a4, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
      goto LABEL_14;
    }
LABEL_7:
    uint64_t v7 = (int *)sub_369F8C(a1[7], a2[1] | ((unint64_t)*a2 << 32), 0, "trip");
    unint64_t v8 = *(void *)((char *)v7 + *(unsigned __int16 *)((char *)v7 - *v7 + 6));
    sub_90BE98(v8, a1[7], a1[2], __p);
    if (SHIBYTE(v11) < 0)
    {
      if (__p[1])
      {
        sub_4200((unsigned char *)a4, __p[0], (unint64_t)__p[1]);
        goto LABEL_13;
      }
    }
    else if (HIBYTE(v11))
    {
      *(_OWORD *)a4 = *(_OWORD *)__p;
      *(void *)(a4 + 16) = v11;
      goto LABEL_13;
    }
    unint64_t v9 = (int *)sub_8DFD1C(a1[7], v8, 0, "line");
    sub_90C0E4(*(void *)((char *)v9 + *(unsigned __int16 *)((char *)v9 - *v9 + 6)), a1[4], a1[2], (unsigned char *)a4);
LABEL_13:
    if (SHIBYTE(v11) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_17:
      operator delete(__src.__r_.__value_.__l.__data_);
      return;
    }
LABEL_14:
    if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_17;
  }
  if (!*((unsigned char *)&__src.__r_.__value_.__s + 23)) {
    goto LABEL_7;
  }
  *(std::string *)a4 = __src;
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_17;
  }
}

void sub_906928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_906980(uint64_t a1@<X0>, unsigned int *a2@<X1>, void *a3@<X8>)
{
  *(_OWORD *)long long __p = 0u;
  long long v19 = 0u;
  int v20 = 1065353216;
  uint64_t v17 = sub_908A40(a1, a2[1] | ((unint64_t)*a2 << 32), a2[3]);
  if (v17 != -1) {
    sub_909AB8((uint64_t)__p, (unint64_t *)&v17, &v17);
  }
  uint64_t v7 = *((void *)a2 + 3);
  uint64_t v6 = *((void *)a2 + 4);
  while (v7 != v6)
  {
    uint64_t v17 = sub_908A40(a1, *(unsigned int *)(*(void *)v7 + 8) | ((unint64_t)*(unsigned int *)(*(void *)v7 + 4) << 32), *(_DWORD *)(*(void *)v7 + 16));
    if (v17 != -1) {
      sub_909AB8((uint64_t)__p, (unint64_t *)&v17, &v17);
    }
    v7 += 32;
  }
  unint64_t v8 = (void *)v19;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (v8)
  {
    size_t v9 = 0;
    unint64_t v10 = -1;
    uint64_t v11 = v8;
    do
    {
      uint64_t v11 = (void *)*v11;
      ++v10;
      v9 += 8;
    }
    while (v11);
    if (v10 >= 0x1FFFFFFFFFFFFFFFLL) {
      sub_2E00();
    }
    uint64_t v12 = (char *)operator new(v9);
    uint64_t v13 = 0;
    *a3 = v12;
    a3[1] = v12;
    a3[2] = &v12[v9];
    uint64_t v14 = v8;
    do
    {
      *(void *)&v12[v13] = v14[2];
      uint64_t v14 = (void *)*v14;
      v13 += 8;
    }
    while (v14);
    a3[1] = &v12[v13];
    do
    {
      uint64_t v15 = (void *)*v8;
      operator delete(v8);
      unint64_t v8 = v15;
    }
    while (v15);
  }
  int v16 = __p[0];
  __p[0] = 0;
  if (v16) {
    operator delete(v16);
  }
}

void sub_906AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_12168((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_906B24(void *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (int *)sub_369F8C(a1[7], a2[1] | ((unint64_t)*a2 << 32), 0, "trip");
  unint64_t v7 = *(void *)((char *)v6 + *(unsigned __int16 *)((char *)v6 - *v6 + 6));
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  unsigned int v10 = a2[3];
  uint64_t v11 = sub_369B60(a1[7], v8 | (v9 << 32), 0);
  uint64_t v12 = &v11[-*(int *)v11];
  if (*(unsigned __int16 *)v12 < 5u)
  {
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = *((unsigned __int16 *)v12 + 2);
    if (*((_WORD *)v12 + 2)) {
      v13 += (uint64_t)&v11[*(unsigned int *)&v11[v13]];
    }
  }
  uint64_t v14 = (int *)(v13 + 4 * v9 + 4 + *(unsigned int *)(v13 + 4 * v9 + 4));
  uint64_t v15 = (unsigned __int16 *)((char *)v14 - *v14);
  if (*v15 >= 0xDu && (uint64_t v16 = v15[6]) != 0) {
    int v17 = *(int *)((char *)v14 + v16);
  }
  else {
    int v17 = -1;
  }
  uint64_t v18 = (int *)sub_498D5C(a1[5], *(void *)&v11[24 * v17+ 4+ 24 * v10+ *((unsigned __int16 *)v12 + 3)+ *(unsigned int *)&v11[*((unsigned __int16 *)v12 + 3)]], 0, "stop");
  unint64_t v19 = *(void *)((char *)v18 + *(unsigned __int16 *)((char *)v18 - *v18 + 12));
  uint64_t v20 = a1[4];
  uint64_t v21 = a1[5];
  uint64_t v22 = a1[7];
  uint64_t v23 = a1[2];

  sub_967C68(v20, v21, v22, v7, v19, v23, a3);
}

uint64_t sub_906C74(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = *a2;
  unsigned int v4 = a2[3];
  int v5 = sub_369B60(*(void *)(a1 + 56), a2[1] | (unint64_t)(v3 << 32), 0);
  uint64_t v6 = &v5[-*(int *)v5];
  if (*(unsigned __int16 *)v6 < 5u)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = *((unsigned __int16 *)v6 + 2);
    if (*((_WORD *)v6 + 2)) {
      v7 += (uint64_t)&v5[*(unsigned int *)&v5[v7]];
    }
  }
  uint64_t v8 = (int *)(v7 + 4 * v3 + 4 + *(unsigned int *)(v7 + 4 * v3 + 4));
  uint64_t v9 = (unsigned __int16 *)((char *)v8 - *v8);
  if (*v9 >= 0xDu && (uint64_t v10 = v9[6]) != 0) {
    int v11 = *(int *)((char *)v8 + v10);
  }
  else {
    int v11 = -1;
  }
  unint64_t v12 = *(void *)&v5[24 * v11
                     + 4
                     + 24 * v4
                     + *((unsigned __int16 *)v6 + 3)
                     + *(unsigned int *)&v5[*((unsigned __int16 *)v6 + 3)]];
  uint64_t v13 = (int *)sub_498D5C(*(void *)(a1 + 40), v12, 0, "stop");
  unint64_t v14 = *(void *)((char *)v13 + *(unsigned __int16 *)((char *)v13 - *v13 + 12));
  uint64_t v15 = *(void *)(a1 + 40);
  if (v14 > 0xFFFFFFFEFFFFFFFFLL
    || *(void *)((char *)v13 + *(unsigned __int16 *)((char *)v13 - *v13 + 12)) == 0)
  {
    unint64_t v19 = (int *)sub_498D5C(v15, v12, 0, "stop");
    int v17 = (unsigned __int16 *)((char *)v19 - *v19);
    if (*v17 >= 5u)
    {
      uint64_t v18 = v17[2];
      if (v18) {
        goto LABEL_19;
      }
    }
LABEL_20:
    uint64_t v21 = 0;
    goto LABEL_21;
  }
  unint64_t v19 = (int *)sub_8ED928(v15, v14, 0, "station");
  uint64_t v20 = (unsigned __int16 *)((char *)v19 - *v19);
  if (*v20 < 5u) {
    goto LABEL_20;
  }
  uint64_t v18 = v20[2];
  if (!v18) {
    goto LABEL_20;
  }
LABEL_19:
  uint64_t v21 = *(void *)((char *)v19 + v18);
LABEL_21:
  uint64_t v22 = sub_398020(v15, 0);
  uint64_t v23 = &v22[-*(int *)v22];
  if (*(unsigned __int16 *)v23 < 0xBu) {
    return v21;
  }
  uint64_t v24 = *((unsigned __int16 *)v23 + 5);
  if (!v24 || !v22[v24]) {
    return v21;
  }

  return nullsub_1(v21);
}

void sub_906E48(uint64_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  int v5 = *(unsigned __int8 **)(a2 + 24);
  char v54 = *(unsigned __int8 **)(a2 + 32);
  if (v5 != v54)
  {
    if (a3 < 0) {
      char v7 = -5;
    }
    else {
      char v7 = 5;
    }
    unsigned int v8 = a3 / -10 + (((-103 * (char)(v7 + a3 % 10)) >> 15) & 1) + ((-103 * (char)(v7 + a3 % 10)) >> 10);
    while (1)
    {
      uint64_t v9 = *(void *)v5;
      uint64_t v11 = *(unsigned int *)(*(void *)v5 + 4);
      uint64_t v10 = *(unsigned int *)(*(void *)v5 + 8);
      unsigned int v12 = *(_DWORD *)(*(void *)v5 + 16);
      nullsub_1(&v61);
      unint64_t v13 = v10 | (v11 << 32);
      unint64_t v14 = sub_369B60(a1[7], v13, 0);
      uint64_t v15 = &v14[-*(int *)v14];
      unsigned int v16 = *(unsigned __int16 *)v15;
      if (v16 < 5)
      {
        uint64_t v17 = 0;
      }
      else
      {
        uint64_t v17 = *((unsigned __int16 *)v15 + 2);
        if (*((_WORD *)v15 + 2)) {
          v17 += (uint64_t)&v14[*(unsigned int *)&v14[v17]];
        }
      }
      uint64_t v18 = (int *)(v17 + 4 * v11 + 4 + *(unsigned int *)(v17 + 4 * v11 + 4));
      unint64_t v19 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v19 < 0x1Du || (uint64_t v20 = v19[14]) == 0 || (v21 = *(unsigned int *)((char *)v18 + v20), v21 == -1))
      {
        memset(&v55, 0, sizeof(v55));
        char v56 = 2;
        uint64_t v57 = sub_1133328();
        int64_t v59 = 0;
        uint64_t v60 = 0;
        long long __p = 0;
      }
      else
      {
        if (v16 < 0x13)
        {
          uint64_t v22 = 0;
        }
        else
        {
          uint64_t v22 = *((unsigned __int16 *)v15 + 9);
          if (v22) {
            v22 += (uint64_t)&v14[*(unsigned int *)&v14[v22]];
          }
        }
        sub_4A0694((int *)(v22 + 4 * v21 + 4 + *(unsigned int *)(v22 + 4 * v21 + 4)), (uint64_t)&v55);
      }
      sub_9973DC((uint64_t)&v55, a1[2] + 968, (uint64_t)&v62);
      uint64_t v23 = (void **)__p;
      if (__p)
      {
        uint64_t v24 = v59;
        uint64_t v25 = __p;
        if (v59 != __p)
        {
          do
          {
            if (*((char *)v24 - 1) < 0) {
              operator delete(*(v24 - 3));
            }
            v24 -= 4;
          }
          while (v24 != v23);
          uint64_t v25 = __p;
        }
        int64_t v59 = v23;
        operator delete(v25);
      }
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v55.__r_.__value_.__l.__data_);
      }
      uint64_t v26 = a1[7];
      int v27 = (int *)sub_369F8C(v26, v13, 0, "trip");
      uint64_t v28 = (unsigned __int16 *)((char *)v27 - *v27);
      if (*v28 >= 5u && (uint64_t v29 = v28[2]) != 0) {
        uint64_t v30 = *(void *)((char *)v27 + v29);
      }
      else {
        uint64_t v30 = 0;
      }
      uint64_t v31 = sub_398020(v26, 0);
      uint64_t v32 = &v31[-*(int *)v31];
      if (*(unsigned __int16 *)v32 >= 0xBu)
      {
        uint64_t v33 = *((unsigned __int16 *)v32 + 5);
        if (v33)
        {
          if (v31[v33]) {
            uint64_t v30 = nullsub_1(v30);
          }
        }
      }
      uint64_t v61 = v30;
      sub_90837C(a1, v13, v12, &v62, &v55);
      unint64_t v34 = a4[1];
      if (v34 >= a4[2]) {
        break;
      }
      uint64_t v35 = v61;
      *(void *)unint64_t v34 = 0x8000000080000000;
      *(_WORD *)(v34 + 8) = 0;
      if (SHIBYTE(v63) < 0)
      {
        sub_4200((unsigned char *)(v34 + 16), (void *)v62, *((unint64_t *)&v62 + 1));
      }
      else
      {
        uint64_t v36 = v63;
        *(_OWORD *)(v34 + 16) = v62;
        *(void *)(v34 + 32) = v36;
      }
      *(void *)(v34 + 40) = v35;
      sub_5F3B34(v34 + 48);
      *(_DWORD *)(v34 + 208) = 0;
      char v52 = (unsigned char *)(v34 + 216);
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_4200(v52, v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)char v52 = *(_OWORD *)&v55.__r_.__value_.__l.__data_;
        *(void *)(v34 + 232) = *((void *)&v55.__r_.__value_.__l + 2);
      }
      uint64_t v37 = v34 + 240;
      a4[1] = v34 + 240;
      a4[1] = v34 + 240;
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_41;
      }
LABEL_42:
      long long v38 = (int *)sub_369F8C(a1[7], v13, 0, "trip");
      int v39 = (unsigned __int16 *)((char *)v38 - *v38);
      if (*v39 >= 0x13u)
      {
        uint64_t v40 = v39[9];
        if (v40)
        {
          if (*(int *)((char *)v38 + v40 + *(unsigned int *)((char *)v38 + v40))) {
            goto LABEL_68;
          }
        }
      }
      int v41 = *(_DWORD *)(v9 + 28);
      BOOL v42 = a3 == 0x7FFFFFFF || v41 == 0x7FFFFFFF;
      unint64_t v43 = (unint64_t)(v8 + v41) << 32;
      if (v42) {
        unint64_t v43 = 0x7FFFFFFF00000000;
      }
      unint64_t v44 = v43 | (v8 + *(_DWORD *)(v9 + 24));
      __int16 v45 = *(_WORD *)(v9 + 32);
      *(void *)(v37 - 240) = v44;
      *(_WORD *)(v37 - 232) = v45;
      std::string v46 = (int *)sub_369F8C(a1[7], v13, 0, "trip");
      char v47 = (int *)sub_8DFD1C(a1[7], *(void *)((char *)v46 + *(unsigned __int16 *)((char *)v46 - *v46 + 6)), 0, "line");
      long long v48 = (unsigned __int16 *)((char *)v47 - *v47);
      if (*v48 < 0x25u) {
        goto LABEL_68;
      }
      uint64_t v49 = v48[18];
      if (!v49 || *((unsigned char *)v47 + v49) != 1) {
        goto LABEL_68;
      }
      int v50 = v5[24];
      if ((v50 - 3) < 2)
      {
        sub_5F3B74((uint64_t)&v55, (__int16 *)(a1[2] + 1177));
        sub_4D90B4(v37 - 192, (uint64_t)&v55);
        sub_4D4B58((uint64_t)&v55);
        sub_98E840(v5[24], a1[8], v37 - 192, 0, 0x7FFFFFFF);
        int v51 = 3;
        goto LABEL_67;
      }
      if (!v5[24])
      {
        int v51 = 1;
        goto LABEL_67;
      }
      if (v50 == 2)
      {
        sub_5F3B74((uint64_t)&v55, (__int16 *)(a1[2] + 1177));
        sub_4D90B4(v37 - 192, (uint64_t)&v55);
        sub_4D4B58((uint64_t)&v55);
        sub_98E840(v5[24], a1[8], v37 - 192, 0, 0x7FFFFFFF);
        int v51 = 2;
LABEL_67:
        *(_DWORD *)(v37 - 32) = v51;
      }
LABEL_68:
      if (v65 < 0)
      {
        operator delete(v64);
        if ((SHIBYTE(v63) & 0x80000000) == 0) {
          goto LABEL_7;
        }
LABEL_70:
        operator delete((void *)v62);
        v5 += 32;
        if (v5 == v54) {
          return;
        }
      }
      else
      {
        if (SHIBYTE(v63) < 0) {
          goto LABEL_70;
        }
LABEL_7:
        v5 += 32;
        if (v5 == v54) {
          return;
        }
      }
    }
    uint64_t v37 = sub_909628(a4, &v62, &v61, (long long *)&v55);
    a4[1] = v37;
    if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_42;
    }
LABEL_41:
    operator delete(v55.__r_.__value_.__l.__data_);
    uint64_t v37 = a4[1];
    goto LABEL_42;
  }
}

void sub_9073C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_4A0638(v18 - 160);
  sub_8E4B64(v17);
  _Unwind_Resume(a1);
}

void sub_907498(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a2;
  unsigned int v6 = a2[3];
  char v7 = sub_369B60(*(void *)(a1 + 56), a2[1] | (unint64_t)(v5 << 32), 0);
  unsigned int v8 = &v7[-*(int *)v7];
  if (*(unsigned __int16 *)v8 < 5u)
  {
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v9 = *((unsigned __int16 *)v8 + 2);
    if (*((_WORD *)v8 + 2)) {
      v9 += (uint64_t)&v7[*(unsigned int *)&v7[v9]];
    }
  }
  uint64_t v10 = (int *)(v9 + 4 * v5 + 4 + *(unsigned int *)(v9 + 4 * v5 + 4));
  uint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
  if (*v11 >= 0xDu && (uint64_t v12 = v11[6]) != 0) {
    int v13 = *(int *)((char *)v10 + v12);
  }
  else {
    int v13 = -1;
  }
  unint64_t v14 = *(void *)&v7[24 * v13
                     + 4
                     + 24 * v6
                     + *((unsigned __int16 *)v8 + 3)
                     + *(unsigned int *)&v7[*((unsigned __int16 *)v8 + 3)]];
  uint64_t v15 = (int *)sub_498D5C(*(void *)(a1 + 40), v14, 0, "stop");
  unint64_t v16 = *(void *)((char *)v15 + *(unsigned __int16 *)((char *)v15 - *v15 + 10));
  uint64_t v17 = (int *)sub_498D5C(*(void *)(a1 + 40), v14, 0, "stop");
  unint64_t v18 = *(void *)((char *)v17 + *(unsigned __int16 *)((char *)v17 - *v17 + 12));
  if (v18 > 0xFFFFFFFEFFFFFFFFLL
    || *(void *)((char *)v17 + *(unsigned __int16 *)((char *)v17 - *v17 + 12)) == 0)
  {
    if (v16 > 0xFFFFFFFEFFFFFFFFLL || v16 == 0)
    {
      uint64_t v21 = (int *)sub_498D5C(*(void *)(a1 + 40), v14, 0, "stop");
      uint64_t v22 = (unsigned __int16 *)((char *)v21 - *v21);
      if (*v22 >= 9u && (uint64_t v23 = v22[4]) != 0) {
        uint64_t v24 = (char **)((char *)v21 + v23 + *(unsigned int *)((char *)v21 + v23));
      }
      else {
        uint64_t v24 = 0;
      }
      sub_8F48DC(v24, (void (*)(void **__return_ptr, char *))sub_4A0694, (uint64_t)&__p);
      sub_908CC8(a3, a1, (uint64_t *)&__p);
      uint64_t v29 = (void **)__p;
      if (__p)
      {
        uint64_t v40 = v51;
        uint64_t v31 = __p;
        if (v51 == __p) {
          goto LABEL_74;
        }
        do
        {
          int v41 = (void **)*(v40 - 3);
          if (v41)
          {
            BOOL v42 = (void **)*(v40 - 2);
            unint64_t v43 = *(v40 - 3);
            if (v42 != v41)
            {
              do
              {
                if (*((char *)v42 - 1) < 0) {
                  operator delete(*(v42 - 3));
                }
                v42 -= 4;
              }
              while (v42 != v41);
              unint64_t v43 = *(v40 - 3);
            }
            *(v40 - 2) = v41;
            operator delete(v43);
          }
          unint64_t v44 = v40 - 8;
          if (*((char *)v40 - 41) < 0) {
            operator delete(*v44);
          }
          v40 -= 8;
        }
        while (v44 != v29);
        goto LABEL_73;
      }
    }
    else
    {
      uint64_t v36 = (int *)sub_8ED3D4(*(void *)(a1 + 40), v16, 0, "hall");
      uint64_t v37 = (unsigned __int16 *)((char *)v36 - *v36);
      if (*v37 >= 9u && (uint64_t v38 = v37[4]) != 0) {
        int v39 = (char **)((char *)v36 + v38 + *(unsigned int *)((char *)v36 + v38));
      }
      else {
        int v39 = 0;
      }
      sub_8F48DC(v39, (void (*)(void **__return_ptr, char *))sub_4A0694, (uint64_t)&__p);
      sub_908CC8(a3, a1, (uint64_t *)&__p);
      uint64_t v29 = (void **)__p;
      if (__p)
      {
        __int16 v45 = v51;
        uint64_t v31 = __p;
        if (v51 == __p) {
          goto LABEL_74;
        }
        do
        {
          std::string v46 = (void **)*(v45 - 3);
          if (v46)
          {
            char v47 = (void **)*(v45 - 2);
            long long v48 = *(v45 - 3);
            if (v47 != v46)
            {
              do
              {
                if (*((char *)v47 - 1) < 0) {
                  operator delete(*(v47 - 3));
                }
                v47 -= 4;
              }
              while (v47 != v46);
              long long v48 = *(v45 - 3);
            }
            *(v45 - 2) = v46;
            operator delete(v48);
          }
          uint64_t v49 = v45 - 8;
          if (*((char *)v45 - 41) < 0) {
            operator delete(*v49);
          }
          v45 -= 8;
        }
        while (v49 != v29);
        goto LABEL_73;
      }
    }
  }
  else
  {
    uint64_t v25 = (int *)sub_8ED928(*(void *)(a1 + 40), v18, 0, "station");
    uint64_t v26 = (unsigned __int16 *)((char *)v25 - *v25);
    if (*v26 >= 9u && (uint64_t v27 = v26[4]) != 0) {
      uint64_t v28 = (char **)((char *)v25 + v27 + *(unsigned int *)((char *)v25 + v27));
    }
    else {
      uint64_t v28 = 0;
    }
    sub_8F48DC(v28, (void (*)(void **__return_ptr, char *))sub_4A0694, (uint64_t)&__p);
    sub_908CC8(a3, a1, (uint64_t *)&__p);
    uint64_t v29 = (void **)__p;
    if (__p)
    {
      uint64_t v30 = v51;
      uint64_t v31 = __p;
      if (v51 == __p) {
        goto LABEL_74;
      }
      do
      {
        uint64_t v32 = (void **)*(v30 - 3);
        if (v32)
        {
          uint64_t v33 = (void **)*(v30 - 2);
          unint64_t v34 = *(v30 - 3);
          if (v33 != v32)
          {
            do
            {
              if (*((char *)v33 - 1) < 0) {
                operator delete(*(v33 - 3));
              }
              v33 -= 4;
            }
            while (v33 != v32);
            unint64_t v34 = *(v30 - 3);
          }
          *(v30 - 2) = v32;
          operator delete(v34);
        }
        uint64_t v35 = v30 - 8;
        if (*((char *)v30 - 41) < 0) {
          operator delete(*v35);
        }
        v30 -= 8;
      }
      while (v35 != v29);
LABEL_73:
      uint64_t v31 = __p;
LABEL_74:
      int v51 = v29;
      operator delete(v31);
    }
  }
}

void sub_9078DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_8F36A0((void ***)va);
  _Unwind_Resume(a1);
}

void sub_9078F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_8F36A0((void ***)va);
  _Unwind_Resume(a1);
}

void sub_907904(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_8F36A0((void ***)va);
  _Unwind_Resume(a1);
}

void sub_907918(uint64_t *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v6 = a1;
  unsigned int v8 = (int *)sub_8DFD1C(a1[7], a2, 0, "line");
  unint64_t v64 = *(void *)((char *)v8 + *(unsigned __int16 *)((char *)v8 - *v8 + 6));
  uint64_t v9 = (int *)sub_498D5C(v6[5], a3, 0, "stop");
  unint64_t v65 = *(void *)((char *)v9 + *(unsigned __int16 *)((char *)v9 - *v9 + 12));
  unint64_t v66 = a2;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  sub_908DA4(v6[7], a2, (uint64_t)&v67);
  uint64_t v11 = v67;
  uint64_t v10 = v68;
  if (v67 != v68)
  {
    long long v62 = v68;
    uint64_t v63 = v6;
    while (1)
    {
      int v12 = *v11;
      if (v12 != 1)
      {
        if (v12 != 4) {
          goto LABEL_4;
        }
        sub_96724C(v6[4], v64, (uint64_t)&v69);
        LODWORD(v82[0]) = -1;
        *(_DWORD *)((char *)v82 + 3) = -1;
        memset((char *)v82 + 7, 0, 26);
        memset(&v83, 0, sizeof(v83));
        char v84 = 0;
        uint64_t v86 = 0;
        long long v85 = 0uLL;
        int v81 = -1;
        int v77 = 3;
        sub_4F39B8((uint64_t)&v78, &v69);
        v82[0] = v72;
        std::string::operator=((std::string *)&v82[1], &v73);
        LOBYTE(v82[4]) = v74;
        std::string::operator=(&v83, &v75);
        char v84 = v76;
        unint64_t v13 = *(void *)(a4 + 8);
        if (v13 >= *(void *)(a4 + 16))
        {
          unint64_t v19 = sub_8FD3E0((void **)a4, (uint64_t)&v77);
          int v20 = SHIBYTE(v86);
          *(void *)(a4 + 8) = v19;
          if (v20 < 0)
          {
            operator delete((void *)v85);
            if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_43;
            }
          }
          else if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
          {
            goto LABEL_43;
          }
        }
        else
        {
          *(_DWORD *)unint64_t v13 = v77;
          *(_DWORD *)(v13 + 40) = v81;
          if (v81 == 1)
          {
            uint64_t v27 = v78;
            *(void *)(v13 + 16) = 0;
            *(void *)(v13 + 8) = v27;
            *(void *)(v13 + 24) = 0;
            *(void *)(v13 + 32) = 0;
            uint64_t v28 = (const void *)v79;
            int64_t v29 = *((void *)&v79 + 1) - v79;
            if (*((void *)&v79 + 1) != (void)v79)
            {
              if (v29 < 0) {
                sub_2E00();
              }
              uint64_t v30 = (char *)operator new(*((void *)&v79 + 1) - v79);
              *(void *)(v13 + 16) = v30;
              *(void *)(v13 + 24) = v30;
              uint64_t v31 = &v30[8 * (v29 >> 3)];
              *(void *)(v13 + 32) = v31;
              memcpy(v30, v28, v29);
              *(void *)(v13 + 24) = v31;
            }
          }
          else if (!v81)
          {
            *(void *)(v13 + 8) = v78;
            unint64_t v14 = (unsigned char *)(v13 + 16);
            if (SHIBYTE(v80) < 0)
            {
              sub_4200(v14, (void *)v79, *((unint64_t *)&v79 + 1));
            }
            else
            {
              long long v15 = v79;
              *(void *)(v13 + 32) = v80;
              *(_OWORD *)unint64_t v14 = v15;
            }
          }
          *(void *)(v13 + 48) = v82[0];
          long long v37 = *(_OWORD *)&v82[1];
          *(void *)(v13 + 72) = v82[3];
          *(_OWORD *)(v13 + 56) = v37;
          memset(&v82[1], 0, 24);
          *(unsigned char *)(v13 + 80) = v82[4];
          long long v38 = *(_OWORD *)&v83.__r_.__value_.__l.__data_;
          *(void *)(v13 + 104) = *((void *)&v83.__r_.__value_.__l + 2);
          *(_OWORD *)(v13 + 88) = v38;
          memset(&v83, 0, sizeof(v83));
          *(unsigned char *)(v13 + 112) = v84;
          long long v39 = v85;
          *(void *)(v13 + 136) = v86;
          *(_OWORD *)(v13 + 120) = v39;
          uint64_t v86 = 0;
          long long v85 = 0uLL;
          *(void *)(a4 + 8) = v13 + 144;
          uint64_t v10 = v62;
          unsigned int v6 = v63;
          if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_43:
            operator delete(v83.__r_.__value_.__l.__data_);
            if (SHIBYTE(v82[3]) < 0)
            {
LABEL_44:
              operator delete((void *)v82[1]);
              int v21 = v81;
              if (v81 == 1)
              {
LABEL_45:
                uint64_t v22 = (void *)v79;
                if ((void)v79)
                {
                  *((void *)&v79 + 1) = v79;
LABEL_47:
                  operator delete(v22);
                }
                goto LABEL_48;
              }
LABEL_21:
              if (!v21 && SHIBYTE(v80) < 0)
              {
                uint64_t v22 = (void *)v79;
                goto LABEL_47;
              }
LABEL_48:
              if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v75.__r_.__value_.__l.__data_);
                if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
                {
LABEL_52:
                  operator delete(v73.__r_.__value_.__l.__data_);
                  int v40 = v71;
                  if (v71 == 1) {
                    goto LABEL_53;
                  }
                  goto LABEL_65;
                }
              }
              else if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
              {
                goto LABEL_52;
              }
LABEL_64:
              int v40 = v71;
              if (v71 == 1) {
                goto LABEL_53;
              }
              goto LABEL_65;
            }
LABEL_20:
            int v21 = v81;
            if (v81 == 1) {
              goto LABEL_45;
            }
            goto LABEL_21;
          }
        }
        if (SHIBYTE(v82[3]) < 0) {
          goto LABEL_44;
        }
        goto LABEL_20;
      }
      sub_967B48(v6[5], v6[7], v66, v65, v6[2], (uint64_t)&v69);
      LODWORD(v82[0]) = -1;
      *(_DWORD *)((char *)v82 + 3) = -1;
      memset((char *)v82 + 7, 0, 26);
      memset(&v83, 0, sizeof(v83));
      char v84 = 0;
      uint64_t v86 = 0;
      long long v85 = 0uLL;
      int v81 = -1;
      int v77 = 3;
      sub_4F39B8((uint64_t)&v78, &v69);
      v82[0] = v72;
      std::string::operator=((std::string *)&v82[1], &v73);
      LOBYTE(v82[4]) = v74;
      std::string::operator=(&v83, &v75);
      char v84 = v76;
      unint64_t v16 = *(void *)(a4 + 8);
      if (v16 >= *(void *)(a4 + 16))
      {
        uint64_t v23 = sub_8FD3E0((void **)a4, (uint64_t)&v77);
        int v24 = SHIBYTE(v86);
        *(void *)(a4 + 8) = v23;
        if (v24 < 0)
        {
          operator delete((void *)v85);
          if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_26;
          }
        }
        else if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_26;
        }
      }
      else
      {
        *(_DWORD *)unint64_t v16 = v77;
        *(_DWORD *)(v16 + 40) = v81;
        if (v81 == 1)
        {
          uint64_t v32 = v78;
          *(void *)(v16 + 16) = 0;
          *(void *)(v16 + 8) = v32;
          *(void *)(v16 + 24) = 0;
          *(void *)(v16 + 32) = 0;
          uint64_t v33 = (const void *)v79;
          int64_t v34 = *((void *)&v79 + 1) - v79;
          if (*((void *)&v79 + 1) != (void)v79)
          {
            if (v34 < 0) {
              sub_2E00();
            }
            uint64_t v35 = (char *)operator new(*((void *)&v79 + 1) - v79);
            *(void *)(v16 + 16) = v35;
            *(void *)(v16 + 24) = v35;
            uint64_t v36 = &v35[8 * (v34 >> 3)];
            *(void *)(v16 + 32) = v36;
            memcpy(v35, v33, v34);
            *(void *)(v16 + 24) = v36;
          }
        }
        else if (!v81)
        {
          *(void *)(v16 + 8) = v78;
          uint64_t v17 = (unsigned char *)(v16 + 16);
          if (SHIBYTE(v80) < 0)
          {
            sub_4200(v17, (void *)v79, *((unint64_t *)&v79 + 1));
          }
          else
          {
            long long v18 = v79;
            *(void *)(v16 + 32) = v80;
            *(_OWORD *)uint64_t v17 = v18;
          }
        }
        *(void *)(v16 + 48) = v82[0];
        long long v42 = *(_OWORD *)&v82[1];
        *(void *)(v16 + 72) = v82[3];
        *(_OWORD *)(v16 + 56) = v42;
        memset(&v82[1], 0, 24);
        *(unsigned char *)(v16 + 80) = v82[4];
        long long v43 = *(_OWORD *)&v83.__r_.__value_.__l.__data_;
        *(void *)(v16 + 104) = *((void *)&v83.__r_.__value_.__l + 2);
        *(_OWORD *)(v16 + 88) = v43;
        memset(&v83, 0, sizeof(v83));
        *(unsigned char *)(v16 + 112) = v84;
        long long v44 = v85;
        *(void *)(v16 + 136) = v86;
        *(_OWORD *)(v16 + 120) = v44;
        uint64_t v86 = 0;
        long long v85 = 0uLL;
        *(void *)(a4 + 8) = v16 + 144;
        uint64_t v10 = v62;
        unsigned int v6 = v63;
        if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_26:
          if ((SHIBYTE(v82[3]) & 0x80000000) == 0) {
            goto LABEL_27;
          }
          goto LABEL_58;
        }
      }
      operator delete(v83.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v82[3]) & 0x80000000) == 0)
      {
LABEL_27:
        int v25 = v81;
        if (v81 == 1) {
          goto LABEL_59;
        }
        goto LABEL_28;
      }
LABEL_58:
      operator delete((void *)v82[1]);
      int v25 = v81;
      if (v81 == 1)
      {
LABEL_59:
        uint64_t v26 = (void *)v79;
        if (!(void)v79) {
          goto LABEL_62;
        }
        *((void *)&v79 + 1) = v79;
        goto LABEL_61;
      }
LABEL_28:
      if (!v25 && SHIBYTE(v80) < 0)
      {
        uint64_t v26 = (void *)v79;
LABEL_61:
        operator delete(v26);
      }
LABEL_62:
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v75.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_64;
        }
      }
      else if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_64;
      }
      operator delete(v73.__r_.__value_.__l.__data_);
      int v40 = v71;
      if (v71 == 1)
      {
LABEL_53:
        int64_t size = (void *)v69.__r_.__value_.__l.__size_;
        if (!v69.__r_.__value_.__l.__size_) {
          goto LABEL_4;
        }
        v69.__r_.__value_.__r.__words[2] = v69.__r_.__value_.__l.__size_;
        goto LABEL_3;
      }
LABEL_65:
      if (v40 || (v70 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      int64_t size = (void *)v69.__r_.__value_.__l.__size_;
LABEL_3:
      operator delete(size);
LABEL_4:
      if (++v11 == v10)
      {
        uint64_t v11 = v67;
        break;
      }
    }
  }
  if (v11)
  {
    std::string::size_type v68 = v11;
    operator delete(v11);
  }
  if (*(void *)a4 == *(void *)(a4 + 8))
  {
    sub_967C68(v6[4], v6[5], v6[7], v66, v65, v6[2], (uint64_t)&v69);
    LODWORD(v82[0]) = -1;
    *(_DWORD *)((char *)v82 + 3) = -1;
    memset((char *)v82 + 7, 0, 26);
    memset(&v83, 0, sizeof(v83));
    char v84 = 0;
    uint64_t v86 = 0;
    long long v85 = 0uLL;
    int v81 = -1;
    int v77 = 3;
    sub_4F39B8((uint64_t)&v78, &v69);
    v82[0] = v72;
    std::string::operator=((std::string *)&v82[1], &v73);
    LOBYTE(v82[4]) = v74;
    std::string::operator=(&v83, &v75);
    char v84 = v76;
    unint64_t v45 = *(void *)(a4 + 8);
    if (v45 >= *(void *)(a4 + 16))
    {
      long long v48 = sub_8FD3E0((void **)a4, (uint64_t)&v77);
      int v49 = SHIBYTE(v86);
      *(void *)(a4 + 8) = v48;
      if (v49 < 0)
      {
        operator delete((void *)v85);
        if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_95;
        }
      }
      else if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_95;
      }
    }
    else
    {
      *(_DWORD *)unint64_t v45 = v77;
      *(_DWORD *)(v45 + 40) = v81;
      if (v81 == 1)
      {
        uint64_t v52 = v78;
        *(void *)(v45 + 16) = 0;
        *(void *)(v45 + 8) = v52;
        *(void *)(v45 + 24) = 0;
        *(void *)(v45 + 32) = 0;
        std::string v53 = (const void *)v79;
        int64_t v54 = *((void *)&v79 + 1) - v79;
        if (*((void *)&v79 + 1) != (void)v79)
        {
          if (v54 < 0) {
            sub_2E00();
          }
          std::string v55 = (char *)operator new(*((void *)&v79 + 1) - v79);
          *(void *)(v45 + 16) = v55;
          *(void *)(v45 + 24) = v55;
          char v56 = &v55[8 * (v54 >> 3)];
          *(void *)(v45 + 32) = v56;
          memcpy(v55, v53, v54);
          *(void *)(v45 + 24) = v56;
        }
      }
      else if (!v81)
      {
        *(void *)(v45 + 8) = v78;
        std::string v46 = (unsigned char *)(v45 + 16);
        if (SHIBYTE(v80) < 0)
        {
          sub_4200(v46, (void *)v79, *((unint64_t *)&v79 + 1));
        }
        else
        {
          long long v47 = v79;
          *(void *)(v45 + 32) = v80;
          *(_OWORD *)std::string v46 = v47;
        }
      }
      *(void *)(v45 + 48) = v82[0];
      long long v57 = *(_OWORD *)&v82[1];
      *(void *)(v45 + 72) = v82[3];
      *(_OWORD *)(v45 + 56) = v57;
      memset(&v82[1], 0, 24);
      *(unsigned char *)(v45 + 80) = v82[4];
      long long v58 = *(_OWORD *)&v83.__r_.__value_.__l.__data_;
      *(void *)(v45 + 104) = *((void *)&v83.__r_.__value_.__l + 2);
      *(_OWORD *)(v45 + 88) = v58;
      memset(&v83, 0, sizeof(v83));
      *(unsigned char *)(v45 + 112) = v84;
      long long v59 = v85;
      *(void *)(v45 + 136) = v86;
      *(_OWORD *)(v45 + 120) = v59;
      uint64_t v86 = 0;
      long long v85 = 0uLL;
      *(void *)(a4 + 8) = v45 + 144;
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_95:
        operator delete(v83.__r_.__value_.__l.__data_);
        if (SHIBYTE(v82[3]) < 0)
        {
LABEL_96:
          operator delete((void *)v82[1]);
          int v50 = v81;
          if (v81 == 1) {
            goto LABEL_97;
          }
          goto LABEL_85;
        }
LABEL_84:
        int v50 = v81;
        if (v81 == 1)
        {
LABEL_97:
          int v51 = (void *)v79;
          if (!(void)v79) {
            goto LABEL_100;
          }
          *((void *)&v79 + 1) = v79;
          goto LABEL_99;
        }
LABEL_85:
        if (v50 || (SHIBYTE(v80) & 0x80000000) == 0)
        {
LABEL_100:
          if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v75.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_102:
              int v60 = v71;
              if (v71 != 1) {
                goto LABEL_103;
              }
              goto LABEL_108;
            }
          }
          else if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_102;
          }
          operator delete(v73.__r_.__value_.__l.__data_);
          int v60 = v71;
          if (v71 != 1)
          {
LABEL_103:
            if (v60 || (v70 & 0x80000000) == 0) {
              return;
            }
            uint64_t v61 = (void *)v69.__r_.__value_.__l.__size_;
LABEL_110:
            operator delete(v61);
            return;
          }
LABEL_108:
          uint64_t v61 = (void *)v69.__r_.__value_.__l.__size_;
          if (!v69.__r_.__value_.__l.__size_) {
            return;
          }
          v69.__r_.__value_.__r.__words[2] = v69.__r_.__value_.__l.__size_;
          goto LABEL_110;
        }
        int v51 = (void *)v79;
LABEL_99:
        operator delete(v51);
        goto LABEL_100;
      }
    }
    if (SHIBYTE(v82[3]) < 0) {
      goto LABEL_96;
    }
    goto LABEL_84;
  }
}

void sub_90829C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_90837C(uint64_t *a1@<X0>, unint64_t a2@<X1>, unsigned int a3@<W2>, long long *a4@<X3>, std::string *a5@<X8>)
{
  uint64_t v10 = (int *)sub_369F8C(a1[7], a2, 0, "trip");
  uint64_t v11 = (int *)sub_8DFD1C(a1[7], *(void *)((char *)v10 + *(unsigned __int16 *)((char *)v10 - *v10 + 6)), 0, "line");
  LODWORD(v12) = 0;
  unint64_t v13 = (unsigned __int16 *)((char *)v11 - *v11);
  if (*v13 >= 0x25u)
  {
    uint64_t v12 = v13[18];
    if (v13[18]) {
      LODWORD(v12) = *((unsigned __int8 *)v11 + v12);
    }
  }
  uint64_t v14 = *((unsigned __int8 *)a4 + 23);
  if ((v14 & 0x80u) != 0) {
    uint64_t v14 = *((void *)a4 + 1);
  }
  unsigned int v15 = v12 - 4;
  if (v14) {
    BOOL v16 = v15 > 0xFFFFFFFD;
  }
  else {
    BOOL v16 = 0;
  }
  if (!v16)
  {
    a5->__r_.__value_.__r.__words[0] = 0;
    a5->__r_.__value_.__l.__size_ = 0;
    a5->__r_.__value_.__r.__words[2] = 0;
    return;
  }
  uint64_t v17 = a1[7];
  long long v18 = (int *)sub_369F8C(v17, a2, 0, "trip");
  unint64_t v19 = (int *)sub_8DFD1C(v17, *(void *)((char *)v18 + *(unsigned __int16 *)((char *)v18 - *v18 + 6)), 0, "line");
  int v20 = (unsigned __int16 *)((char *)v19 - *v19);
  if (*v20 >= 0x29u && (uint64_t v21 = v20[20]) != 0 && *((unsigned char *)v19 + v21))
  {
    HIBYTE(v43) = 0;
    LOBYTE(v42[0]) = 0;
  }
  else
  {
    sub_90B8C8(a2, a3, a1[7], a1[2], (uint64_t)v42);
  }
  sub_90BA34(a2, a3, a1[7], a1[2], (uint64_t)v40);
  if (byte_25D236F < 0)
  {
    sub_4200(__dst, (void *)xmmword_25D2358, *((unint64_t *)&xmmword_25D2358 + 1));
  }
  else
  {
    *(_OWORD *)std::string __dst = xmmword_25D2358;
    uint64_t v45 = unk_25D2368;
  }
  if (*((char *)a4 + 23) < 0)
  {
    sub_4200(&v46, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v46 = *a4;
    uint64_t v47 = *((void *)a4 + 2);
  }
  if (byte_25D224F < 0)
  {
    sub_4200(&v48, (void *)xmmword_25D2238, *((unint64_t *)&xmmword_25D2238 + 1));
  }
  else
  {
    long long v48 = xmmword_25D2238;
    uint64_t v49 = unk_25D2248;
  }
  if (SHIBYTE(v43) < 0)
  {
    sub_4200(&v50, v42[0], (unint64_t)v42[1]);
  }
  else
  {
    long long v50 = *(_OWORD *)v42;
    uint64_t v51 = v43;
  }
  if (byte_25D2297 < 0)
  {
    sub_4200(&v52, (void *)xmmword_25D2280, *((unint64_t *)&xmmword_25D2280 + 1));
  }
  else
  {
    long long v52 = xmmword_25D2280;
    uint64_t v53 = unk_25D2290;
  }
  if (SHIBYTE(v41) < 0)
  {
    sub_4200(&__p, v40[0], (unint64_t)v40[1]);
  }
  else
  {
    long long __p = *(_OWORD *)v40;
    uint64_t v55 = v41;
  }
  sub_2AAA4((uint64_t)v38, (uint64_t)__dst, 3);
  if (SHIBYTE(v55) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v53) & 0x80000000) == 0)
    {
LABEL_36:
      if ((SHIBYTE(v51) & 0x80000000) == 0) {
        goto LABEL_37;
      }
      goto LABEL_52;
    }
  }
  else if ((SHIBYTE(v53) & 0x80000000) == 0)
  {
    goto LABEL_36;
  }
  operator delete((void *)v52);
  if ((SHIBYTE(v51) & 0x80000000) == 0)
  {
LABEL_37:
    if ((SHIBYTE(v49) & 0x80000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_53;
  }
LABEL_52:
  operator delete((void *)v50);
  if ((SHIBYTE(v49) & 0x80000000) == 0)
  {
LABEL_38:
    if ((SHIBYTE(v47) & 0x80000000) == 0) {
      goto LABEL_39;
    }
LABEL_54:
    operator delete((void *)v46);
    if ((SHIBYTE(v45) & 0x80000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_55;
  }
LABEL_53:
  operator delete((void *)v48);
  if (SHIBYTE(v47) < 0) {
    goto LABEL_54;
  }
LABEL_39:
  if ((SHIBYTE(v45) & 0x80000000) == 0) {
    goto LABEL_40;
  }
LABEL_55:
  operator delete(__dst[0]);
LABEL_40:
  uint64_t v22 = (void *)HIBYTE(v41);
  if (v41 < 0) {
    uint64_t v22 = v40[1];
  }
  uint64_t v23 = 948;
  if (!v22) {
    uint64_t v23 = 960;
  }
  int v24 = &qword_25D28E0;
  if (v22) {
    int v24 = &qword_25D28C8;
  }
  int v25 = &algn_25D28D0[15];
  if (!v22) {
    int v25 = (char *)&unk_25D28F7;
  }
  if (*v25 < 0)
  {
    if (v22) {
      uint64_t v26 = (unint64_t *)algn_25D28D0;
    }
    else {
      uint64_t v26 = (unint64_t *)&unk_25D28E8;
    }
    sub_4200(__dst, *(void **)&word_25D2160[v23], *v26);
  }
  else
  {
    *(_OWORD *)std::string __dst = *(_OWORD *)v24;
    uint64_t v45 = v24[2];
  }
  uint64_t v27 = (int *)sub_369F8C(a1[7], a2, 0, "trip");
  uint64_t v28 = (unsigned __int16 *)((char *)v27 - *v27);
  v30 = *v28 >= 0x1Bu && (uint64_t v29 = v28[13]) != 0 && *((unsigned char *)v27 + v29) != 0;
  sub_98E2D8(v38, 0, 0, v30, a1[8], (uint64_t)__dst);
  uint64_t v31 = a1[9];
  uint64_t v36 = a1[8];
  long long v37 = (std::__shared_weak_count *)v31;
  if (v31) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
  }
  sub_658310((uint64_t)__dst, (uint64_t)v38, &v36, 0, a5);
  uint64_t v32 = v37;
  if (!v37 || atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(v45) & 0x80000000) == 0) {
      goto LABEL_70;
    }
    goto LABEL_69;
  }
  ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
  std::__shared_weak_count::__release_weak(v32);
  if (SHIBYTE(v45) < 0) {
LABEL_69:
  }
    operator delete(__dst[0]);
LABEL_70:
  uint64_t v33 = v39;
  if (v39)
  {
    while (1)
    {
      int64_t v34 = *(char **)v33;
      if (v33[63] < 0)
      {
        operator delete(*((void **)v33 + 5));
        if ((v33[39] & 0x80000000) == 0) {
          goto LABEL_73;
        }
LABEL_76:
        operator delete(*((void **)v33 + 2));
        operator delete(v33);
        uint64_t v33 = v34;
        if (!v34) {
          break;
        }
      }
      else
      {
        if (v33[39] < 0) {
          goto LABEL_76;
        }
LABEL_73:
        operator delete(v33);
        uint64_t v33 = v34;
        if (!v34) {
          break;
        }
      }
    }
  }
  uint64_t v35 = v38[0];
  v38[0] = 0;
  if (v35) {
    operator delete(v35);
  }
  if ((SHIBYTE(v41) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v43) & 0x80000000) == 0) {
      return;
    }
LABEL_83:
    operator delete(v42[0]);
    return;
  }
  operator delete(v40[0]);
  if (SHIBYTE(v43) < 0) {
    goto LABEL_83;
  }
}

void sub_908944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_908A40(uint64_t a1, unint64_t a2, int a3)
{
  unsigned int v6 = (int *)sub_369F8C(*(void *)(a1 + 56), a2, 0, "trip");
  char v7 = (unsigned __int16 *)((char *)v6 - *v6);
  if (*v7 >= 9u)
  {
    uint64_t v8 = v7[4];
    if (v8)
    {
      unsigned int v9 = a3 + 1;
      unsigned int v10 = *(int *)((char *)v6 + v8);
      unsigned int v11 = a3 + 1 <= v10 ? v10 : a3 + 1;
      if (v9 < v10)
      {
        uint64_t v12 = (a2 >> 30) & 0x3FFFFFFFCLL;
        do
        {
          unint64_t v13 = sub_369B60(*(void *)(a1 + 56), a2, 0);
          uint64_t v14 = &v13[-*(int *)v13];
          if (*(unsigned __int16 *)v14 < 5u)
          {
            uint64_t v15 = 0;
          }
          else
          {
            uint64_t v15 = *((unsigned __int16 *)v14 + 2);
            if (*((_WORD *)v14 + 2)) {
              v15 += (uint64_t)&v13[*(unsigned int *)&v13[v15]];
            }
          }
          BOOL v16 = (int *)(v15 + v12 + 4 + *(unsigned int *)(v15 + v12 + 4));
          uint64_t v17 = (unsigned __int16 *)((char *)v16 - *v16);
          if (*v17 >= 0xDu && (uint64_t v18 = v17[6]) != 0) {
            int v19 = *(int *)((char *)v16 + v18);
          }
          else {
            int v19 = -1;
          }
          unint64_t v20 = *(void *)&v13[24 * v19
                              + 4
                              + 24 * v9
                              + *((unsigned __int16 *)v14 + 3)
                              + *(unsigned int *)&v13[*((unsigned __int16 *)v14 + 3)]];
          if (!sub_498D5C(*(void *)(a1 + 40), v20, 1, "stop")) {
            break;
          }
          uint64_t v21 = sub_369B60(*(void *)(a1 + 56), a2, 0);
          uint64_t v22 = &v21[-*(int *)v21];
          if (*(unsigned __int16 *)v22 < 5u)
          {
            uint64_t v23 = 0;
          }
          else
          {
            uint64_t v23 = *((unsigned __int16 *)v22 + 2);
            if (*((_WORD *)v22 + 2)) {
              v23 += (uint64_t)&v21[*(unsigned int *)&v21[v23]];
            }
          }
          int v24 = (int *)(v23 + v12 + 4 + *(unsigned int *)(v23 + v12 + 4));
          int v25 = (unsigned __int16 *)((char *)v24 - *v24);
          if (*v25 >= 0xDu && (uint64_t v26 = v25[6]) != 0) {
            int v27 = *(int *)((char *)v24 + v26);
          }
          else {
            int v27 = -1;
          }
          if (!v21[24 * v27
                  + 22
                  + 24 * v9
                  + *((unsigned __int16 *)v22 + 3)
                  + *(unsigned int *)&v21[*((unsigned __int16 *)v22 + 3)]])
          {
            uint64_t v30 = *(void *)(a1 + 40);
            uint64_t v31 = (int *)sub_498D5C(v30, v20, 0, "stop");
            uint64_t v32 = (unsigned __int16 *)((char *)v31 - *v31);
            if (*v32 >= 5u && (uint64_t v33 = v32[2]) != 0) {
              uint64_t v28 = *(void *)((char *)v31 + v33);
            }
            else {
              uint64_t v28 = 0;
            }
            int64_t v34 = sub_398020(v30, 0);
            uint64_t v35 = &v34[-*(int *)v34];
            if (*(unsigned __int16 *)v35 >= 0xBu)
            {
              uint64_t v36 = *((unsigned __int16 *)v35 + 5);
              if (v36)
              {
                if (v34[v36])
                {
                  return nullsub_1(v28);
                }
              }
            }
            return v28;
          }
          ++v9;
        }
        while (v11 != v9);
      }
    }
  }
  return -1;
}

void sub_908CC8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  nullsub_1(&v9);
  sub_997050(a3, *(void *)(a2 + 16) + 968, &__p);
  sub_994EAC((uint64_t *)&__p, a1);
  unsigned int v6 = (void **)__p;
  if (__p)
  {
    char v7 = v11;
    uint64_t v8 = __p;
    if (v11 == __p)
    {
LABEL_11:
      unsigned int v11 = v6;
      operator delete(v8);
      return;
    }
    while (1)
    {
      if (*((char *)v7 - 1) < 0)
      {
        operator delete(*(v7 - 3));
        if (*((char *)v7 - 33) < 0) {
LABEL_9:
        }
          operator delete(*(v7 - 7));
      }
      else if (*((char *)v7 - 33) < 0)
      {
        goto LABEL_9;
      }
      v7 -= 7;
      if (v7 == v6)
      {
        uint64_t v8 = __p;
        goto LABEL_11;
      }
    }
  }
}

void sub_908D90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_8E4FE0((void **)va);
  _Unwind_Resume(a1);
}

int *sub_908DA4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result = (int *)sub_8DFD1C(a1, a2, 0, "line");
  uint64_t v5 = (unsigned __int16 *)((char *)result - *result);
  if (*v5 >= 0x49u
    && (uint64_t v6 = v5[36]) != 0
    && (char v7 = (unsigned int *)((char *)result + v6),
        uint64_t v8 = *v7,
        char v9 = (char *)v7 + v8,
        uint64_t v10 = *(unsigned int *)((char *)v7 + v8),
        v10))
  {
    unsigned int v11 = (char *)operator new(*(unsigned int *)((char *)v7 + v8));
    *(void *)&long long v15 = v11;
    *((void *)&v15 + 1) = v11;
    BOOL v16 = &v11[v10];
    uint64_t v12 = v9 + 4;
    do
    {
      char v17 = *v12;
      double result = (int *)sub_8FBC7C((uint64_t)&v15, v11, &v17);
      unsigned int v11 = (char *)result + 1;
      ++v12;
      --v10;
    }
    while (v10);
    long long v13 = v15;
    uint64_t v14 = v16;
  }
  else
  {
    uint64_t v14 = 0;
    long long v13 = 0uLL;
  }
  *(_OWORD *)a3 = v13;
  *(void *)(a3 + 16) = v14;
  return result;
}

void sub_908E70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_908E8C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x6F96F96F96F96F97 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0xD20D20D20D20D2) {
    sub_2E00();
  }
  if (0xDF2DF2DF2DF2DF2ELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xDF2DF2DF2DF2DF2ELL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x6F96F96F96F96F97 * ((a1[2] - *a1) >> 3)) >= 0x69069069069069) {
    unint64_t v6 = 0xD20D20D20D20D2;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xD20D20D20D20D2) {
      sub_188D718();
    }
    char v7 = (char *)operator new(312 * v6);
  }
  else
  {
    char v7 = 0;
  }
  uint64_t v8 = (uint64_t)&v7[312 * v3];
  char v9 = &v7[312 * v6];
  sub_909000((uint64_t)(a1 + 2), v8, a2);
  uint64_t v10 = v8 + 312;
  uint64_t v12 = (char *)*a1;
  unsigned int v11 = (char *)a1[1];
  if (v11 == (char *)*a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = (uint64_t)v9;
    if (!v11) {
      return v10;
    }
    goto LABEL_17;
  }
  do
  {
    v8 -= 312;
    v11 -= 312;
    sub_909000((uint64_t)(a1 + 2), v8, (uint64_t)v11);
  }
  while (v11 != v12);
  long long v13 = (char *)*a1;
  unsigned int v11 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = (uint64_t)v9;
  if (v11 != v13)
  {
    do
    {
      v11 -= 312;
      sub_8E49DC((uint64_t)v11);
    }
    while (v11 != v13);
    unsigned int v11 = v13;
  }
  if (v11) {
LABEL_17:
  }
    operator delete(v11);
  return v10;
}

__n128 sub_909000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
  *(void *)(a2 + 40) = *(void *)(a3 + 40);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  long long v5 = *(_OWORD *)(a3 + 48);
  *(void *)(a2 + 64) = *(void *)(a3 + 64);
  *(_OWORD *)(a2 + 48) = v5;
  long long v6 = *(_OWORD *)(a3 + 72);
  *(void *)(a2 + 88) = *(void *)(a3 + 88);
  *(_OWORD *)(a2 + 72) = v6;
  *(void *)(a3 + 80) = 0;
  *(void *)(a3 + 88) = 0;
  *(void *)(a3 + 72) = 0;
  long long v7 = *(_OWORD *)(a3 + 96);
  *(void *)(a2 + 112) = *(void *)(a3 + 112);
  *(_OWORD *)(a2 + 96) = v7;
  *(void *)(a3 + 104) = 0;
  *(void *)(a3 + 112) = 0;
  *(void *)(a3 + 96) = 0;
  long long v8 = *(_OWORD *)(a3 + 120);
  *(void *)(a2 + 136) = *(void *)(a3 + 136);
  *(_OWORD *)(a2 + 120) = v8;
  *(void *)(a3 + 120) = 0;
  *(void *)(a3 + 128) = 0;
  *(void *)(a3 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  *(_OWORD *)(a2 + 144) = *(_OWORD *)(a3 + 144);
  *(void *)(a2 + 160) = *(void *)(a3 + 160);
  *(void *)(a3 + 144) = 0;
  *(void *)(a3 + 152) = 0;
  *(void *)(a3 + 160) = 0;
  *(_DWORD *)(a2 + 200) = *(_DWORD *)(a3 + 200);
  sub_4F38B0((void *)*(unsigned int *)(a3 + 200), (uint64_t *)(a3 + 168), (void *)(a2 + 168));
  *(void *)(a2 + 208) = *(void *)(a3 + 208);
  long long v9 = *(_OWORD *)(a3 + 216);
  *(void *)(a2 + 232) = *(void *)(a3 + 232);
  *(_OWORD *)(a2 + 216) = v9;
  *(void *)(a3 + 224) = 0;
  *(void *)(a3 + 232) = 0;
  *(void *)(a3 + 216) = 0;
  *(unsigned char *)(a2 + 240) = *(unsigned char *)(a3 + 240);
  long long v10 = *(_OWORD *)(a3 + 248);
  *(void *)(a2 + 264) = *(void *)(a3 + 264);
  *(_OWORD *)(a2 + 248) = v10;
  *(void *)(a3 + 256) = 0;
  *(void *)(a3 + 264) = 0;
  *(void *)(a3 + 248) = 0;
  *(unsigned char *)(a2 + 272) = *(unsigned char *)(a3 + 272);
  *(void *)(a2 + 280) = *(void *)(a3 + 280);
  __n128 result = *(__n128 *)(a3 + 288);
  *(void *)(a2 + 304) = *(void *)(a3 + 304);
  *(__n128 *)(a2 + 288) = result;
  *(void *)(a3 + 296) = 0;
  *(void *)(a3 + 304) = 0;
  *(void *)(a3 + 288) = 0;
  return result;
}

char *sub_909160(int64x2_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1->i64[1] - a1->i64[0]) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333) {
    sub_2E00();
  }
  if (0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 4) > v4) {
    unint64_t v4 = 0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[1].i64[0] - a1->i64[0]) >> 4) >= 0x199999999999999) {
    unint64_t v6 = 0x333333333333333;
  }
  else {
    unint64_t v6 = v4;
  }
  int v24 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x333333333333333) {
      sub_188D718();
    }
    long long v7 = (char *)operator new(80 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  long long v8 = &v7[80 * v6];
  uint64_t v23 = v8;
  long long v9 = &v7[80 * v3];
  *(_OWORD *)long long v9 = *(_OWORD *)a2;
  *((void *)v9 + 2) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(a2 + 24);
  *((void *)v9 + 5) = *(void *)(a2 + 40);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  v9[48] = *(unsigned char *)(a2 + 48);
  long long v10 = *(_OWORD *)(a2 + 56);
  *((void *)v9 + 9) = *(void *)(a2 + 72);
  *(_OWORD *)(v9 + 56) = v10;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  unsigned int v11 = v9 + 80;
  long long __p = v7;
  v22.i64[1] = (uint64_t)(v9 + 80);
  uint64_t v13 = a1->i64[0];
  unint64_t v12 = a1->u64[1];
  if (v12 == a1->i64[0])
  {
    int64x2_t v18 = vdupq_n_s64(v12);
  }
  else
  {
    uint64_t v14 = 0;
    do
    {
      long long v15 = &v9[v14];
      uint64_t v16 = v12 + v14;
      *((void *)v15 - 10) = 0;
      *((void *)v15 - 9) = 0;
      *((void *)v15 - 8) = 0;
      *((_OWORD *)v15 - 5) = *(_OWORD *)(v12 + v14 - 80);
      *((void *)v15 - 8) = *(void *)(v12 + v14 - 64);
      *(void *)(v16 - 80) = 0;
      *(void *)(v16 - 72) = 0;
      *(void *)(v16 - 64) = 0;
      *((void *)v15 - 7) = 0;
      *((void *)v15 - 6) = 0;
      *((void *)v15 - 5) = 0;
      *(_OWORD *)(v15 - 56) = *(_OWORD *)(v12 + v14 - 56);
      *((void *)v15 - 5) = *(void *)(v12 + v14 - 40);
      *(void *)(v16 - 56) = 0;
      *(void *)(v16 - 48) = 0;
      *(void *)(v16 - 40) = 0;
      *(v15 - 32) = *(unsigned char *)(v12 + v14 - 32);
      long long v17 = *(_OWORD *)(v12 + v14 - 24);
      *((void *)v15 - 1) = *(void *)(v12 + v14 - 8);
      *(_OWORD *)(v15 - 24) = v17;
      *(void *)(v16 - 16) = 0;
      *(void *)(v16 - 8) = 0;
      *(void *)(v16 - 24) = 0;
      v14 -= 80;
    }
    while (v12 + v14 != v13);
    int64x2_t v18 = *a1;
    v9 += v14;
    unsigned int v11 = (char *)v22.i64[1];
    long long v8 = v23;
  }
  a1->i64[0] = (uint64_t)v9;
  a1->i64[1] = (uint64_t)v11;
  int64x2_t v22 = v18;
  int v19 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v8;
  uint64_t v23 = v19;
  long long __p = (void *)v18.i64[0];
  sub_909358((uint64_t)&__p, v18.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v11;
}

void sub_909358(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    long long v5 = (void **)(i - 80);
    *(void *)(a1 + 16) = i - 80;
    if (*(char *)(i - 1) < 0)
    {
      operator delete(*(void **)(i - 24));
      unint64_t v6 = *(void **)(i - 56);
      if (!v6)
      {
LABEL_6:
        long long v7 = *v5;
        if (*v5) {
          goto LABEL_27;
        }
        continue;
      }
    }
    else
    {
      unint64_t v6 = *(void **)(i - 56);
      if (!v6) {
        goto LABEL_6;
      }
    }
    long long v8 = *(void **)(i - 48);
    long long v9 = v6;
    if (v8 == v6) {
      goto LABEL_26;
    }
    uint64_t v10 = (uint64_t)v8 - 56;
    do
    {
      if (*(char *)(v10 + 55) < 0)
      {
        operator delete(*(void **)(v10 + 32));
        if ((*(char *)(v10 + 23) & 0x80000000) == 0)
        {
LABEL_15:
          if ((*(char *)(v10 - 9) & 0x80000000) == 0) {
            goto LABEL_16;
          }
          goto LABEL_22;
        }
      }
      else if ((*(char *)(v10 + 23) & 0x80000000) == 0)
      {
        goto LABEL_15;
      }
      operator delete(*(void **)v10);
      if ((*(char *)(v10 - 9) & 0x80000000) == 0)
      {
LABEL_16:
        int v13 = *(_DWORD *)(v10 - 48);
        if (v13 != 1) {
          goto LABEL_17;
        }
        goto LABEL_23;
      }
LABEL_22:
      operator delete(*(void **)(v10 - 32));
      int v13 = *(_DWORD *)(v10 - 48);
      if (v13 != 1)
      {
LABEL_17:
        if (!v13 && *(char *)(v10 - 49) < 0)
        {
          unsigned int v11 = *(void **)(v10 - 72);
LABEL_11:
          operator delete(v11);
          goto LABEL_12;
        }
        goto LABEL_12;
      }
LABEL_23:
      unsigned int v11 = *(void **)(v10 - 72);
      if (v11)
      {
        *(void *)(v10 - 64) = v11;
        goto LABEL_11;
      }
LABEL_12:
      unint64_t v12 = (void *)(v10 - 88);
      v10 -= 144;
    }
    while (v12 != v6);
    long long v9 = *(void **)(i - 56);
LABEL_26:
    *(void *)(i - 48) = v6;
    operator delete(v9);
    long long v7 = *v5;
    if (*v5)
    {
LABEL_27:
      *(void *)(i - 72) = v7;
      operator delete(v7);
    }
  }
}

void *sub_9094A4(void *result, char *__src, char *a3, size_t __sz)
{
  unint64_t v6 = __src;
  long long v7 = result;
  uint64_t v8 = result[2];
  long long v9 = (char *)*result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *result) >> 3) < __sz)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *long long v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0x666666666666666) {
      goto LABEL_23;
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= __sz) {
      uint64_t v11 = __sz;
    }
    unint64_t v12 = v10 >= 0x333333333333333 ? 0x666666666666666 : v11;
    if (v12 > 0x666666666666666) {
LABEL_23:
    }
      sub_2E00();
    uint64_t v13 = 5 * v12;
    __n128 result = operator new(40 * v12);
    long long v9 = (char *)result;
    *long long v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    uint64_t v14 = a3 - v6;
    if (v14) {
      __n128 result = memcpy(result, v6, v14 - 7);
    }
    long long v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  long long v15 = (void **)(result + 1);
  uint64_t v16 = (unsigned char *)result[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v16 - v9) >> 3) >= __sz)
  {
    uint64_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    size_t v18 = v14 - 7;
    int v19 = (void *)*result;
LABEL_21:
    __n128 result = memmove(v19, __src, v18);
    goto LABEL_22;
  }
  long long v17 = &__src[8 * ((v16 - v9) >> 3)];
  if (v16 != v9)
  {
    __n128 result = memmove((void *)*result, __src, v16 - v9 - 7);
    long long v9 = (char *)*v15;
  }
  uint64_t v14 = a3 - v17;
  if (v14)
  {
    size_t v18 = v14 - 7;
    int v19 = v9;
    std::string __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *long long v15 = &v9[v14];
  return result;
}

uint64_t sub_909628(uint64_t *a1, long long *a2, uint64_t *a3, long long *a4)
{
  unint64_t v5 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x111111111111111) {
    sub_2E00();
  }
  if (0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 4);
  }
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[2] - *a1) >> 4) >= 0x88888888888888) {
    unint64_t v10 = 0x111111111111111;
  }
  else {
    unint64_t v10 = v6;
  }
  unint64_t v20 = a1 + 2;
  if (v10)
  {
    if (v10 > 0x111111111111111) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(240 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  long long __p = v11;
  long long v17 = &v11[240 * v5];
  uint64_t v18 = (uint64_t)v17;
  int v19 = &v11[240 * v10];
  sub_9097B8((uint64_t)v17, a2, *a3, a4);
  uint64_t v18 = (uint64_t)(v17 + 240);
  sub_9098A0(a1, &__p);
  uint64_t v12 = a1[1];
  uint64_t v13 = (uint64_t)v17;
  while (1)
  {
    uint64_t v14 = v18;
    if (v18 == v13) {
      break;
    }
    v18 -= 240;
    if (*(char *)(v14 - 1) < 0)
    {
      operator delete(*(void **)(v14 - 24));
      sub_4D4B58(v14 - 192);
      if (*(char *)(v14 - 201) < 0) {
        goto LABEL_17;
      }
    }
    else
    {
      sub_4D4B58(v14 - 192);
      if (*(char *)(v14 - 201) < 0) {
LABEL_17:
      }
        operator delete(*(void **)(v14 - 224));
    }
  }
  if (__p) {
    operator delete(__p);
  }
  return v12;
}

void sub_9097A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_909A24((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_9097B8(uint64_t a1, long long *a2, uint64_t a3, long long *a4)
{
  *(void *)a1 = 0x8000000080000000;
  *(_WORD *)(a1 + 8) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200((unsigned char *)(a1 + 16), *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    *(void *)(a1 + 32) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 16) = v7;
  }
  *(void *)(a1 + 40) = a3;
  sub_5F3B34(a1 + 48);
  *(_DWORD *)(a1 + 208) = 0;
  uint64_t v8 = (unsigned char *)(a1 + 216);
  if (*((char *)a4 + 23) < 0)
  {
    sub_4200(v8, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v9 = *a4;
    *(void *)(a1 + 232) = *((void *)a4 + 2);
    *(_OWORD *)uint64_t v8 = v9;
  }
  return a1;
}

void sub_909874(_Unwind_Exception *a1)
{
  sub_4D4B58(v3);
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_9098A0(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      uint64_t v8 = *(void *)(v2 + v5 - 240);
      *(_DWORD *)(v6 - 232) = *(_DWORD *)(v2 + v5 - 232);
      *(void *)(v6 - 240) = v8;
      long long v9 = *(_OWORD *)(v2 + v5 - 224);
      *(void *)(v6 - 208) = *(void *)(v2 + v5 - 208);
      *(_OWORD *)(v6 - 224) = v9;
      *(_OWORD *)(v7 - 216) = 0uLL;
      *(void *)(v7 - 224) = 0;
      *(void *)(v6 - 200) = *(void *)(v2 + v5 - 200);
      *(void *)(v6 - 192) = 0;
      *(_OWORD *)(v6 - 184) = 0uLL;
      *(_OWORD *)(v6 - 192) = *(_OWORD *)(v2 + v5 - 192);
      *(void *)(v6 - 176) = *(void *)(v2 + v5 - 176);
      *(void *)(v7 - 176) = 0;
      *(_OWORD *)(v7 - 192) = 0uLL;
      *(void *)(v6 - 152) = 0;
      *(_OWORD *)(v6 - 168) = 0uLL;
      *(_OWORD *)(v6 - 168) = *(_OWORD *)(v2 + v5 - 168);
      *(void *)(v6 - 152) = *(void *)(v2 + v5 - 152);
      *(void *)(v7 - 152) = 0;
      *(_OWORD *)(v7 - 168) = 0uLL;
      *(void *)(v6 - 128) = 0;
      *(_OWORD *)(v6 - 144) = 0uLL;
      *(_OWORD *)(v6 - 144) = *(_OWORD *)(v2 + v5 - 144);
      *(void *)(v6 - 128) = *(void *)(v2 + v5 - 128);
      *(void *)(v7 - 128) = 0;
      *(_OWORD *)(v7 - 144) = 0uLL;
      *(void *)(v6 - 104) = 0;
      *(_OWORD *)(v6 - 120) = 0uLL;
      *(_OWORD *)(v6 - 120) = *(_OWORD *)(v2 + v5 - 120);
      *(void *)(v6 - 104) = *(void *)(v2 + v5 - 104);
      *(_OWORD *)(v7 - 120) = 0uLL;
      uint64_t v10 = *(void *)(v2 + v5 - 96);
      *(_OWORD *)(v7 - 104) = 0uLL;
      *(void *)(v6 - 96) = v10;
      LODWORD(v10) = *(_DWORD *)(v2 + v5 - 88);
      *(unsigned char *)(v6 - 84) = *(unsigned char *)(v2 + v5 - 84);
      *(_DWORD *)(v6 - 88) = v10;
      long long v11 = *(_OWORD *)(v2 + v5 - 80);
      *(void *)(v6 - 64) = *(void *)(v2 + v5 - 64);
      *(_OWORD *)(v6 - 80) = v11;
      *(void *)(v7 - 72) = 0;
      *(void *)(v7 - 64) = 0;
      *(void *)(v7 - 80) = 0;
      long long v12 = *(_OWORD *)(v2 + v5 - 56);
      *(void *)(v6 - 40) = *(void *)(v2 + v5 - 40);
      *(_OWORD *)(v6 - 56) = v12;
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 56) = 0;
      *(_DWORD *)(v6 - 32) = *(_DWORD *)(v2 + v5 - 32);
      long long v13 = *(_OWORD *)(v2 + v5 - 24);
      *(void *)(v6 - 8) = *(void *)(v2 + v5 - 8);
      *(_OWORD *)(v6 - 24) = v13;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(void *)(v7 - 24) = 0;
      v5 -= 240;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v14 = *result;
  *__n128 result = v4;
  a2[1] = v14;
  uint64_t v15 = result[1];
  result[1] = a2[2];
  a2[2] = v15;
  uint64_t v16 = result[2];
  result[2] = a2[3];
  a2[3] = v16;
  *a2 = a2[1];
  return result;
}

uint64_t sub_909A24(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 240;
    if (*(char *)(i - 1) < 0)
    {
      operator delete(*(void **)(i - 24));
      sub_4D4B58(i - 192);
      if ((*(char *)(i - 201) & 0x80000000) == 0) {
        continue;
      }
    }
    else
    {
      sub_4D4B58(i - 192);
      if ((*(char *)(i - 201) & 0x80000000) == 0) {
        continue;
      }
    }
    operator delete(*(void **)(i - 224));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_909AB8(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    long long v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = (void *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == v6)
            {
              if (v10[2] == v6) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            uint64_t v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  uint64_t v14 = operator new(0x18uLL);
  *uint64_t v14 = 0;
  v14[1] = v6;
  void v14[2] = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    uint64_t v17 = *(void *)a1;
    uint64_t v18 = *(void **)(*(void *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      *uint64_t v14 = *v18;
LABEL_61:
      *uint64_t v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v19 = 1;
    if (v7 >= 3) {
      BOOL v19 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v7);
    unint64_t v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_37;
    }
    if (prime < v7)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < v7) {
LABEL_37:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    unint64_t v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        unint64_t v3 = v6 % v7;
        uint64_t v17 = *(void *)a1;
        uint64_t v18 = *(void **)(*(void *)a1 + 8 * (v6 % v7));
        if (v18) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v6;
        uint64_t v17 = *(void *)a1;
        uint64_t v18 = *(void **)(*(void *)a1 + 8 * v6);
        if (v18) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v26 & v6;
      uint64_t v17 = *(void *)a1;
      uint64_t v18 = *(void **)(*(void *)a1 + 8 * (v26 & v6));
      if (v18) {
        goto LABEL_26;
      }
    }
  }
  *uint64_t v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    unint64_t v27 = *(void *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7) {
        v27 %= v7;
      }
    }
    else
    {
      v27 &= v7 - 1;
    }
    uint64_t v18 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_909DC8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_909DDC()
{
  byte_25D2177 = 1;
  word_25D2160 = 65;
  byte_25D218F = 1;
  word_25D2178 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25D28F8 = 0u;
  *(_OWORD *)&qword_25D2908 = 0u;
  dword_25D2918 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25D28F8, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25D28F8, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25D28F8, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25D28F8, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25D21A7 = 8;
  strcpy((char *)&qword_25D2190, "any_mode");
  byte_25D21BF = 7;
  strcpy((char *)&dword_25D21A8, "cycling");
  byte_25D21D7 = 7;
  strcpy((char *)&dword_25D21C0, "driving");
  byte_25D21EF = 7;
  strcpy((char *)&dword_25D21D8, "walking");
  qword_25D21F8 = 0;
  qword_25D2200 = 0;
  qword_25D21F0 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25D21F0 = (uint64_t)v0;
  qword_25D21F8 = (uint64_t)(v0 + 9);
  qword_25D2200 = (uint64_t)(v0 + 9);
  qword_25D2208 = 0;
  qword_25D2210 = 0;
  unk_25D2218 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25D2210 = (uint64_t)(v1 + 9);
  unk_25D2218 = v1 + 9;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25D2208 = (uint64_t)v1;
  byte_25D2237 = 6;
  strcpy((char *)&dword_25D2220, "{Mode}");
  byte_25D224F = 11;
  strcpy((char *)&xmmword_25D2238, "{Direction}");
  byte_25D2267 = 6;
  strcpy((char *)&dword_25D2250, "{Line}");
  byte_25D227F = 12;
  strcpy((char *)&qword_25D2268, "{LineNumber}");
  strcpy(&byte_25D2297, "\n{Headsign1}");
  strcpy((char *)&xmmword_25D2280, "{Headsign}");
  byte_25D22AF = 11;
  byte_25D22C7 = 11;
  strcpy((char *)&qword_25D22B0, "{Headsign2}");
  byte_25D22DF = 11;
  strcpy((char *)&qword_25D22C8, "{Headsign3}");
  byte_25D22F7 = 11;
  strcpy((char *)&qword_25D22E0, "{Headsign4}");
  byte_25D230F = 11;
  strcpy((char *)&qword_25D22F8, "{Headsign5}");
  byte_25D2327 = 6;
  strcpy((char *)&dword_25D2310, "{Stop}");
  byte_25D233F = 14;
  strcpy((char *)&qword_25D2328, "{PreviousStop}");
  byte_25D2357 = 8;
  strcpy((char *)&qword_25D2340, "{System}");
  byte_25D236F = 15;
  strcpy((char *)&xmmword_25D2358, "{VehicleNumber}");
  byte_25D2387 = 17;
  strcpy((char *)&xmmword_25D2370, "{AccessPointExit}");
  strcpy(&byte_25D239F, "\n{nextBoardStation}");
  strcpy((char *)&qword_25D2388, "{Platform}");
  byte_25D23B7 = 18;
  qword_25D23B8 = 0;
  unk_25D23C0 = 0;
  qword_25D23C8 = 0;
  byte_25D23E7 = 1;
  word_25D23D0 = 32;
  qword_25D23E8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25D23F0 = xmmword_20B8890;
  strcpy((char *)qword_25D23E8, "LeaveStop_Loc_Comma_Separator");
  byte_25D2417 = 5;
  dword_25D2400 = -1028144608;
  word_25D2404 = 160;
  byte_25D242F = 2;
  word_25D2418 = -24382;
  byte_25D241A = 0;
  byte_25D2447 = 4;
  dword_25D2430 = 548913696;
  byte_25D2434 = 0;
  byte_25D245F = 15;
  strcpy((char *)&qword_25D2448 + 7, "\xB7 {/s:s}");
  strcpy((char *)&qword_25D2448, "{s:s} ·");
  byte_25D2477 = 6;
  strcpy((char *)&dword_25D2460, "NoType");
  byte_25D248F = 14;
  strcpy((char *)&qword_25D2478, "{WalkDistance}");
  strcpy(&byte_25D24A7, "\n{OneMinute}");
  strcpy((char *)&qword_25D2490, "{WalkTime}");
  byte_25D24BF = 11;
  byte_25D24D7 = 14;
  strcpy((char *)&qword_25D24C0, "{StepDuration}");
  byte_25D24EF = 15;
  strcpy((char *)&qword_25D24D8, "{TripFrequency}");
  byte_25D2507 = 11;
  strcpy((char *)&qword_25D24F0, "{BoardTime}");
  byte_25D251F = 12;
  strcpy((char *)&qword_25D2508, "{AlightTime}");
  byte_25D2537 = 21;
  strcpy((char *)&xmmword_25D2520, "{FutureTimestampList}");
  byte_25D254F = 15;
  strcpy((char *)&qword_25D2538, "{DepartureTime}");
  byte_25D2567 = 13;
  strcpy((char *)&qword_25D2550, "{ArrivalTime}");
  byte_25D257F = 19;
  strcpy((char *)&xmmword_25D2568, "{TotalWalkDistance}");
  byte_25D2597 = 14;
  strcpy((char *)&qword_25D2580, "{TripDuration}");
  byte_25D25AF = 11;
  strcpy((char *)&qword_25D2598, "{DayOfWeek}");
  byte_25D25C7 = 6;
  strcpy((char *)&dword_25D25B0, "{Date}");
  byte_25D25DF = 16;
  strcpy((char *)&xmmword_25D25C8, "{OutTheDoorTime}");
  qword_25D25E0 = (uint64_t)operator new(0x20uLL);
  unk_25D25E8 = xmmword_20B91A0;
  strcpy((char *)qword_25D25E0, "{FirstVehicleDepartureTime}");
  byte_25D260F = 18;
  strcpy(byte_25D25F8, "{RouteArrivalTime}");
  strcpy(&byte_25D2627, "\n{IC_Artwork}");
  strcpy((char *)&qword_25D2610, "{BaseFare}");
  byte_25D263F = 12;
  byte_25D2657 = 11;
  strcpy((char *)&qword_25D2640, "{RT_Symbol}");
  byte_25D266F = 12;
  strcpy((char *)&qword_25D2658, "{TotalPrice}");
  byte_25D2687 = 13;
  strcpy((char *)&qword_25D2670, "{CheckInTime}");
  byte_25D269F = 19;
  strcpy(byte_25D2688, "{LiveDepartureTime}");
  strcpy(&byte_25D26B7, "\n{LegDuration}");
  strcpy((char *)&qword_25D26A0, "{TimeList}");
  byte_25D26CF = 13;
  byte_25D26E7 = 15;
  strcpy((char *)&qword_25D26D0, "{CountdownList}");
  byte_25D26FF = 3;
  dword_25D26E8 = 8217723;
  strcpy(&byte_25D2717, "\t{AccessPointArt}");
  strcpy((char *)&qword_25D2700, "{LineArt}");
  byte_25D272F = 16;
  byte_25D2747 = 11;
  strcpy((char *)&qword_25D2730, "{SystemArt}");
  strcpy(&byte_25D275F, "\n{ServiceBeginTime}");
  strcpy((char *)&qword_25D2748, "{CardName}");
  byte_25D2777 = 18;
  byte_25D278F = 16;
  strcpy((char *)&xmmword_25D2778, "{ServiceEndTime}");
  byte_25D27A7 = 6;
  strcpy((char *)&dword_25D2790, "OnTime");
  byte_25D27BF = 6;
  strcpy((char *)&dword_25D27A8, "Delays");
  byte_25D27D7 = 1;
  word_25D27C0 = 115;
  byte_25D27EF = 2;
  strcpy((char *)&word_25D27D8, "cs");
  byte_25D2807 = 1;
  word_25D27F0 = 112;
  byte_25D281F = 5;
  strcpy((char *)&dword_25D2808, "_Line");
  byte_25D2837 = 7;
  strcpy((char *)&dword_25D2820, "_System");
  strcpy(&byte_25D284F, "\n_VehicleNumber");
  strcpy((char *)&qword_25D2838, "_Direction");
  byte_25D2867 = 14;
  byte_25D287F = 12;
  strcpy((char *)&qword_25D2868, "_To_Headsign");
  byte_25D2897 = 16;
  strcpy((char *)&xmmword_25D2880, "_Toward_Headsign");
  strcpy(&byte_25D28AF, "\t_LineNumber");
  strcpy((char *)&qword_25D2898, "_Headsign");
  byte_25D28C7 = 11;
  qword_25D28C8 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_25D28D0 = xmmword_20B9A40;
  strcpy((char *)qword_25D28C8, "Places_VehicleNumber_Direction_To_Headsign");
  __n128 result = (char *)operator new(0x28uLL);
  qword_25D28E0 = (uint64_t)result;
  unk_25D28E8 = xmmword_20B9960;
  strcpy(result, "Board_Secondary_VehicleNumber_Direction");
  return result;
}

void sub_90AA3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25D2908) {
    sub_20AC2FC((void **)qword_25D2908);
  }
  long long v37 = (void *)xmmword_25D28F8;
  *(void *)&xmmword_25D28F8 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

double sub_90AADC@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = -1;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = -1;
  *(_DWORD *)(a1 + 64) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0x7FFFFFFF;
  *(unsigned char *)(a1 + 148) = 1;
  return result;
}

double sub_90AB28@<D0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X8>)
{
  *(void *)a7 = -1;
  *(_OWORD *)(a7 + 8) = 0u;
  uint64_t v11 = a7 + 8;
  *(_OWORD *)(a7 + 24) = 0u;
  *(_OWORD *)(a7 + 40) = 0u;
  *(void *)(a7 + 56) = -1;
  *(_DWORD *)(a7 + 64) = 0x7FFFFFFF;
  *(_OWORD *)(a7 + 72) = 0u;
  uint64_t v12 = (void **)(a7 + 72);
  *(_OWORD *)(a7 + 88) = 0u;
  *(_OWORD *)(a7 + 104) = 0u;
  *(_OWORD *)(a7 + 120) = 0u;
  *(void *)(a7 + 136) = 0;
  *(_DWORD *)(a7 + 144) = 0x7FFFFFFF;
  *(unsigned char *)(a7 + 148) = 0;
  *(void *)a7 = sub_90B28C(a1, a2, a3);
  char v13 = (int *)sub_498D5C(a3, a1, 0, "stop");
  int v14 = (unsigned __int16 *)((char *)v13 - *v13);
  if (*v14 < 0x2Bu || (uint64_t v15 = v14[21]) == 0)
  {
    HIBYTE(v59) = 0;
    LOBYTE(__dst[0]) = 0;
    unint64_t v21 = (std::string *)(a7 + 32);
    if ((*(char *)(a7 + 55) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  float v16 = (unsigned int *)((char *)v13 + v15);
  uint64_t v17 = *v16;
  BOOL v19 = (char *)v16 + v17 + 4;
  size_t v18 = *(unsigned int *)((char *)v16 + v17);
  if (v18 >= 0x17)
  {
    uint64_t v50 = (v18 & 0xFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17) {
      uint64_t v50 = v18 | 7;
    }
    uint64_t v51 = v50 + 1;
    unint64_t v20 = operator new(v50 + 1);
    __dst[1] = (void *)v18;
    unint64_t v59 = v51 | 0x8000000000000000;
    __dst[0] = v20;
  }
  else
  {
    HIBYTE(v59) = *(unsigned int *)((char *)v16 + v17);
    unint64_t v20 = __dst;
    if (!v18)
    {
      *((unsigned char *)__dst + v18) = 0;
      unint64_t v21 = (std::string *)(a7 + 32);
      if ((*(char *)(a7 + 55) & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  memcpy(v20, v19, v18);
  *((unsigned char *)v20 + v18) = 0;
  unint64_t v21 = (std::string *)(a7 + 32);
  if (*(char *)(a7 + 55) < 0) {
LABEL_8:
  }
    operator delete(v21->__r_.__value_.__l.__data_);
LABEL_9:
  *(_OWORD *)&v21->__r_.__value_.__l.__data_ = *(_OWORD *)__dst;
  v21->__r_.__value_.__r.__words[2] = v59;
  uint64_t v22 = *(unsigned __int8 *)(a7 + 55);
  if ((v22 & 0x80u) != 0) {
    uint64_t v22 = *(void *)(a7 + 40);
  }
  if (!v22)
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)__dst);
      sub_188FC78(__dst, (uint64_t)"Could not resolve time zone for stop ", 37);
      std::ostream::operator<<();
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
      if (SHIBYTE(v57) < 0) {
        operator delete(__p[0]);
      }
      if (v61 < 0) {
        operator delete(v60);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    std::string::assign(v21, "UTC");
  }
  unint64_t v23 = (int *)sub_498D5C(a3, a1, 0, "stop");
  unint64_t v24 = *(void *)((char *)v23 + *(unsigned __int16 *)((char *)v23 - *v23 + 10));
  if (v24) {
    BOOL v25 = v24 >= 0xFFFFFFFF00000000;
  }
  else {
    BOOL v25 = 1;
  }
  int v26 = !v25;
  if (v26 != 1)
  {
    unint64_t v27 = (int *)sub_498D5C(a3, a1, 0, "stop");
    uint64_t v30 = (unsigned __int16 *)((char *)v27 - *v27);
    if (*v30 < 9u) {
      goto LABEL_32;
    }
    unsigned int v29 = v30[4];
    if (!v29) {
      goto LABEL_32;
    }
LABEL_31:
    uint64_t v31 = (char **)((char *)v27 + v29 + *(int *)((char *)v27 + v29));
    goto LABEL_33;
  }
  unint64_t v27 = (int *)sub_8ED3D4(a3, v24, 0, "hall");
  uint64_t v28 = (unsigned __int16 *)((char *)v27 - *v27);
  if (*v28 >= 9u)
  {
    unsigned int v29 = v28[4];
    if (v29) {
      goto LABEL_31;
    }
  }
LABEL_32:
  uint64_t v31 = 0;
LABEL_33:
  sub_8F48DC(v31, (void (*)(void **__return_ptr, char *))sub_4A0694, (uint64_t)&v54);
  nullsub_1(v62);
  sub_997050((uint64_t *)&v54, a4 + 968, __dst);
  sub_994EAC((uint64_t *)__dst, (uint64_t)__p);
  uint64_t v32 = (void **)__dst[0];
  if (!__dst[0]) {
    goto LABEL_43;
  }
  uint64_t v33 = (void **)__dst[1];
  int64_t v34 = __dst[0];
  if (__dst[1] != __dst[0])
  {
    while (1)
    {
      if (*((char *)v33 - 1) < 0)
      {
        operator delete(*(v33 - 3));
        if ((*((char *)v33 - 33) & 0x80000000) == 0) {
          goto LABEL_37;
        }
LABEL_40:
        operator delete(*(v33 - 7));
        v33 -= 7;
        if (v33 == v32)
        {
LABEL_41:
          int64_t v34 = __dst[0];
          break;
        }
      }
      else
      {
        if (*((char *)v33 - 33) < 0) {
          goto LABEL_40;
        }
LABEL_37:
        v33 -= 7;
        if (v33 == v32) {
          goto LABEL_41;
        }
      }
    }
  }
  __dst[1] = v32;
  operator delete(v34);
LABEL_43:
  if (*(char *)(a7 + 31) < 0) {
    operator delete(*(void **)v11);
  }
  double result = *(double *)__p;
  *(_OWORD *)uint64_t v11 = *(_OWORD *)__p;
  *(void *)(v11 + 16) = v57;
  HIBYTE(v57) = 0;
  LOBYTE(__p[0]) = 0;
  uint64_t v36 = (void **)v54;
  if (v54)
  {
    long long v37 = v55;
    long long v38 = v54;
    if (v55 != v54)
    {
      do
      {
        long long v39 = (void **)*(v37 - 3);
        if (v39)
        {
          int v40 = (void **)*(v37 - 2);
          uint64_t v41 = *(v37 - 3);
          if (v40 != v39)
          {
            do
            {
              if (*((char *)v40 - 1) < 0) {
                operator delete(*(v40 - 3));
              }
              v40 -= 4;
            }
            while (v40 != v39);
            uint64_t v41 = *(v37 - 3);
          }
          *(v37 - 2) = v39;
          operator delete(v41);
        }
        long long v42 = v37 - 8;
        if (*((char *)v37 - 41) < 0) {
          operator delete(*v42);
        }
        v37 -= 8;
      }
      while (v42 != v36);
      long long v38 = v54;
    }
    uint64_t v55 = v36;
    operator delete(v38);
  }
  if (a5)
  {
    if (v26)
    {
      uint64_t v43 = (int *)sub_8ED3D4(a3, v24, 0, "hall");
      uint64_t v44 = (uint64_t)v43 + *(unsigned __int16 *)((char *)v43 - *v43 + 6);
      uint64_t v45 = *(unsigned int *)v44;
      LODWORD(v44) = *(_DWORD *)(v44 + 4);
      if (v44 >= 0xFFFFFFFE) {
        uint64_t v44 = 4294967294;
      }
      else {
        uint64_t v44 = v44;
      }
      *(void *)(a7 + 56) = v45 | (v44 << 32);
      *(_DWORD *)(a7 + 64) = 0x7FFFFFFF;
      sub_947E24(a3, v24, a6, __dst);
    }
    else
    {
      long long v46 = (int *)sub_498D5C(a3, a1, 0, "stop");
      uint64_t v47 = (uint64_t)v46 + *(unsigned __int16 *)((char *)v46 - *v46 + 6);
      uint64_t v48 = *(unsigned int *)v47;
      LODWORD(v47) = *(_DWORD *)(v47 + 4);
      if (v47 >= 0xFFFFFFFE) {
        uint64_t v47 = 4294967294;
      }
      else {
        uint64_t v47 = v47;
      }
      *(void *)(a7 + 56) = v48 | (v47 << 32);
      *(_DWORD *)(a7 + 64) = 0x7FFFFFFF;
      sub_948898(a3, a1, __dst);
    }
    uint64_t v49 = *v12;
    if (*v12)
    {
      *(void *)(a7 + 80) = v49;
      operator delete(v49);
      *uint64_t v12 = 0;
      *(void *)(a7 + 80) = 0;
      *(void *)(a7 + 88) = 0;
    }
    double result = *(double *)__dst;
    *(_OWORD *)(a7 + 72) = *(_OWORD *)__dst;
    *(void *)(a7 + 88) = v59;
  }
  return result;
}

void sub_90B138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a20);
    sub_8F2F94(v20);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a20);
  sub_8F2F94(v20);
  _Unwind_Resume(a1);
}

void sub_90B1E8(_Unwind_Exception *a1)
{
  sub_8F2F94(v1);
  _Unwind_Resume(a1);
}

void sub_90B1FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  int v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_8E4FE0((void **)va1);
  sub_8F36A0((void ***)va);
  sub_8F2F94(v3);
  _Unwind_Resume(a1);
}

void sub_90B220(_Unwind_Exception *a1)
{
  sub_8F2F94(v1);
  _Unwind_Resume(a1);
}

void sub_90B234(_Unwind_Exception *a1)
{
  sub_8F2F94(v1);
  _Unwind_Resume(a1);
}

void sub_90B248(_Unwind_Exception *a1)
{
  sub_8F2F94(v1);
  _Unwind_Resume(a1);
}

void sub_90B25C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_8F36A0((void ***)va);
  sub_8F2F94(v3);
  _Unwind_Resume(a1);
}

void sub_90B278(_Unwind_Exception *a1)
{
  sub_8F2F94(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_90B28C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(_DWORD *)(a2 + 376))
  {
    uint64_t v17 = *(void **)(a2 + 24);
    size_t v18 = *(void **)(a2 + 32);
    if (v17 != v18)
    {
      while (*v17 != a1)
      {
        if (++v17 == v18)
        {
          uint64_t v17 = *(void **)(a2 + 32);
          break;
        }
      }
    }
    if (v17 != v18) {
      return *(void *)(a2 + 48);
    }
  }
  int v5 = (int *)sub_498D5C(a3, a1, 0, "stop");
  unint64_t v6 = *(void *)((char *)v5 + *(unsigned __int16 *)((char *)v5 - *v5 + 10));
  if (v6 > 0xFFFFFFFEFFFFFFFFLL
    || *(void *)((char *)v5 + *(unsigned __int16 *)((char *)v5 - *v5 + 10)) == 0)
  {
    uint64_t v10 = (int *)sub_498D5C(a3, a1, 0, "stop");
    uint64_t v8 = (unsigned __int16 *)((char *)v10 - *v10);
    if (*v8 >= 5u)
    {
      uint64_t v9 = v8[2];
      if (v9) {
        goto LABEL_12;
      }
    }
LABEL_13:
    uint64_t v12 = 0;
    goto LABEL_14;
  }
  uint64_t v10 = (int *)sub_8ED3D4(a3, v6, 0, "hall");
  uint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
  if (*v11 < 5u) {
    goto LABEL_13;
  }
  uint64_t v9 = v11[2];
  if (!v9) {
    goto LABEL_13;
  }
LABEL_12:
  uint64_t v12 = *(void *)((char *)v10 + v9);
LABEL_14:
  char v13 = sub_398020(a3, 0);
  int v14 = &v13[-*(int *)v13];
  if (*(unsigned __int16 *)v14 < 0xBu) {
    return v12;
  }
  uint64_t v15 = *((unsigned __int16 *)v14 + 5);
  if (!v15 || !v13[v15]) {
    return v12;
  }

  return nullsub_1(v12);
}

void sub_90B40C(unint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, std::string *a7@<X8>)
{
  int v14 = (int *)sub_369F8C(a3, a1, 0, "trip");
  uint64_t v15 = (int *)sub_8DFD1C(a3, *(void *)((char *)v14 + *(unsigned __int16 *)((char *)v14 - *v14 + 6)), 0, "line");
  float v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 >= 0x29u && (uint64_t v17 = v16[20]) != 0 && *((unsigned char *)v15 + v17))
  {
    HIBYTE(v28) = 0;
    LOBYTE(v27[0]) = 0;
  }
  else
  {
    sub_90B8C8(a1, a2, a3, a4, (uint64_t)v27);
  }
  sub_90BA34(a1, a2, a3, a4, (uint64_t)__src);
  size_t v18 = (void *)HIBYTE(v28);
  if (v28 < 0) {
    size_t v18 = v27[1];
  }
  if (v18) {
    goto LABEL_9;
  }
  BOOL v19 = (void *)HIBYTE(v26);
  if (v26 < 0) {
    BOOL v19 = __src[1];
  }
  if (!v19)
  {
    a7->__r_.__value_.__r.__words[0] = 0;
    a7->__r_.__value_.__l.__size_ = 0;
    a7->__r_.__value_.__r.__words[2] = 0;
    goto LABEL_47;
  }
  if (!a6)
  {
LABEL_9:
    if (byte_25D2968[23] < 0)
    {
      sub_4200(&__dst, *(void **)byte_25D2968, *(unint64_t *)&byte_25D2968[8]);
      if ((v28 & 0x8000000000000000) == 0) {
        goto LABEL_11;
      }
    }
    else
    {
      std::string __dst = *(std::string *)byte_25D2968;
      if ((v28 & 0x8000000000000000) == 0)
      {
LABEL_11:
        long long v30 = *(_OWORD *)v27;
        uint64_t v31 = v28;
        goto LABEL_20;
      }
    }
    sub_4200(&v30, v27[0], (unint64_t)v27[1]);
LABEL_20:
    if (byte_25D29C7 < 0)
    {
      sub_4200(&v32, (void *)xmmword_25D29B0, *((unint64_t *)&xmmword_25D29B0 + 1));
    }
    else
    {
      long long v32 = xmmword_25D29B0;
      uint64_t v33 = unk_25D29C0;
    }
    if (SHIBYTE(v26) < 0)
    {
      sub_4200(&v34, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      long long v34 = *(_OWORD *)__src;
      int64_t v35 = v26;
    }
    sub_2AAA4((uint64_t)__p, (uint64_t)&__dst, 2);
    if (SHIBYTE(v35) < 0)
    {
      operator delete((void *)v34);
      if ((SHIBYTE(v33) & 0x80000000) == 0)
      {
LABEL_28:
        if ((SHIBYTE(v31) & 0x80000000) == 0) {
          goto LABEL_29;
        }
        goto LABEL_43;
      }
    }
    else if ((SHIBYTE(v33) & 0x80000000) == 0)
    {
      goto LABEL_28;
    }
    operator delete((void *)v32);
    if ((SHIBYTE(v31) & 0x80000000) == 0)
    {
LABEL_29:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_30;
      }
LABEL_44:
      operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_30:
      memset(&__dst, 0, sizeof(__dst));
      std::string::operator=(&__dst, (const std::string *)&qword_25D30B8);
      sub_98E2D8(__p, 0, 0, 0, a5, (uint64_t)&__dst);
      sub_6581AC((uint64_t)&__dst, (uint64_t)__p, a5, 0, a7);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      uint64_t v20 = (void **)v24;
      if (!v24)
      {
LABEL_33:
        unint64_t v21 = __p[0];
        __p[0] = 0;
        if (v21) {
          operator delete(v21);
        }
        goto LABEL_47;
      }
      while (1)
      {
        uint64_t v22 = (void **)*v20;
        if (*((char *)v20 + 63) < 0)
        {
          operator delete(v20[5]);
          if (*((char *)v20 + 39) < 0) {
LABEL_40:
          }
            operator delete(v20[2]);
        }
        else if (*((char *)v20 + 39) < 0)
        {
          goto LABEL_40;
        }
        operator delete(v20);
        uint64_t v20 = v22;
        if (!v22) {
          goto LABEL_33;
        }
      }
    }
LABEL_43:
    operator delete((void *)v30);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_44;
  }
  if (SHIBYTE(v26) < 0)
  {
    sub_4200(a7, __src[0], (unint64_t)__src[1]);
  }
  else
  {
    *(_OWORD *)&a7->__r_.__value_.__l.__data_ = *(_OWORD *)__src;
    a7->__r_.__value_.__r.__words[2] = v26;
  }
LABEL_47:
  if ((SHIBYTE(v26) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v28) & 0x80000000) == 0) {
      return;
    }
LABEL_51:
    operator delete(v27[0]);
    return;
  }
  operator delete(__src[0]);
  if (SHIBYTE(v28) < 0) {
    goto LABEL_51;
  }
}

void sub_90B7E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if (a26 < 0)
    {
LABEL_8:
      operator delete(a21);
      _Unwind_Resume(exception_object);
    }
  }
  else if (a26 < 0)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(exception_object);
}

void sub_90B8C8(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v18 = a1;
  sub_90BBA0(a3, (uint64_t)&v18, a2, (uint64_t)v14);
  nullsub_1(&v9);
  sub_9973DC((uint64_t)v14, a4 + 968, (uint64_t)v10);
  if (SHIBYTE(v11) < 0)
  {
    sub_4200((unsigned char *)a5, v10[0], (unint64_t)v10[1]);
  }
  else
  {
    *(_OWORD *)a5 = *(_OWORD *)v10;
    *(void *)(a5 + 16) = v11;
  }
  if (v13 < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v11) & 0x80000000) == 0)
    {
LABEL_6:
      uint64_t v7 = (void **)v16;
      if (!v16) {
        goto LABEL_7;
      }
      goto LABEL_11;
    }
  }
  else if ((SHIBYTE(v11) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(v10[0]);
  uint64_t v7 = (void **)v16;
  if (!v16)
  {
LABEL_7:
    if ((v15 & 0x80000000) == 0) {
      return;
    }
LABEL_13:
    operator delete(v14[0]);
    return;
  }
LABEL_11:
  uint64_t v8 = v17;
  if (v17 == v7)
  {
    uint64_t v17 = v7;
    operator delete(v7);
    if (v15 < 0) {
      goto LABEL_13;
    }
  }
  else
  {
    do
    {
      if (*((char *)v8 - 1) < 0) {
        operator delete(*(v8 - 3));
      }
      v8 -= 4;
    }
    while (v8 != v7);
    uint64_t v17 = v7;
    operator delete(v16);
    if (v15 < 0) {
      goto LABEL_13;
    }
  }
}

void sub_90BA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_4A0638((uint64_t)va);
  sub_35EA08((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_90BA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_35EA08((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_90BA34(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v18 = a1;
  sub_90BD1C(a3, (uint64_t)&v18, a2, (uint64_t)v14);
  nullsub_1(&v9);
  sub_9973DC((uint64_t)v14, a4 + 968, (uint64_t)v10);
  if (SHIBYTE(v11) < 0)
  {
    sub_4200((unsigned char *)a5, v10[0], (unint64_t)v10[1]);
  }
  else
  {
    *(_OWORD *)a5 = *(_OWORD *)v10;
    *(void *)(a5 + 16) = v11;
  }
  if (v13 < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v11) & 0x80000000) == 0)
    {
LABEL_6:
      uint64_t v7 = (void **)v16;
      if (!v16) {
        goto LABEL_7;
      }
      goto LABEL_11;
    }
  }
  else if ((SHIBYTE(v11) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(v10[0]);
  uint64_t v7 = (void **)v16;
  if (!v16)
  {
LABEL_7:
    if ((v15 & 0x80000000) == 0) {
      return;
    }
LABEL_13:
    operator delete(v14[0]);
    return;
  }
LABEL_11:
  uint64_t v8 = v17;
  if (v17 == v7)
  {
    uint64_t v17 = v7;
    operator delete(v7);
    if (v15 < 0) {
      goto LABEL_13;
    }
  }
  else
  {
    do
    {
      if (*((char *)v8 - 1) < 0) {
        operator delete(*(v8 - 3));
      }
      v8 -= 4;
    }
    while (v8 != v7);
    uint64_t v17 = v7;
    operator delete(v16);
    if (v15 < 0) {
      goto LABEL_13;
    }
  }
}

void sub_90BB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_4A0638((uint64_t)va);
  sub_35EA08((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_90BB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_35EA08((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_90BBA0(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = sub_369B60(a1, *(void *)a2, 0);
  uint64_t v8 = &v7[-*(int *)v7];
  unsigned int v9 = *(unsigned __int16 *)v8;
  if (v9 < 5)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = *((unsigned __int16 *)v8 + 2);
    if (*((_WORD *)v8 + 2)) {
      v10 += (uint64_t)&v7[*(unsigned int *)&v7[v10]];
    }
  }
  uint64_t v11 = v10 + 4 * *(unsigned int *)(a2 + 4);
  uint64_t v12 = (int *)(v11 + 4 + *(unsigned int *)(v11 + 4));
  char v13 = (unsigned __int16 *)((char *)v12 - *v12);
  unsigned int v14 = *v13;
  if (v14 < 0x27)
  {
    if (v14 < 0x11)
    {
LABEL_21:
      *(void *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
      *(unsigned char *)(a4 + 24) = 2;
      *(void *)(a4 + 32) = sub_1133328();
      *(void *)(a4 + 40) = 0;
      *(void *)(a4 + 48) = 0;
      *(void *)(a4 + 56) = 0;
      return;
    }
    char v15 = 0;
    uint64_t v16 = v13[8];
    if (v16)
    {
LABEL_9:
      int v17 = *(int *)((char *)v12 + v16);
      if (a3 == -1) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
  }
  else
  {
    char v15 = (unsigned int *)v13[19];
    if (v13[19]) {
      char v15 = (unsigned int *)((char *)v15 + (void)v12 + *(unsigned int *)((char *)v15 + (void)v12));
    }
    uint64_t v16 = v13[8];
    if (v16) {
      goto LABEL_9;
    }
  }
  int v17 = -1;
  if (a3 == -1) {
    goto LABEL_17;
  }
LABEL_14:
  if (v15)
  {
    if (*v15 > a3)
    {
      unsigned int v18 = v15[a3 + 1];
      if (v18 != -1) {
        goto LABEL_18;
      }
    }
  }
LABEL_17:
  unsigned int v18 = v17;
  if (v17 == -1) {
    goto LABEL_21;
  }
LABEL_18:
  if (v9 < 0xB)
  {
    uint64_t v19 = 0;
  }
  else
  {
    uint64_t v19 = *((unsigned __int16 *)v8 + 5);
    if (v19) {
      v19 += (uint64_t)&v7[*(unsigned int *)&v7[v19]];
    }
  }
  uint64_t v20 = (int *)(v19 + 4 * v18 + 4 + *(unsigned int *)(v19 + 4 * v18 + 4));

  sub_4A0694(v20, a4);
}

void sub_90BD1C(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = sub_369B60(a1, *(void *)a2, 0);
  uint64_t v8 = &v7[-*(int *)v7];
  unsigned int v9 = *(unsigned __int16 *)v8;
  if (v9 < 5)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = *((unsigned __int16 *)v8 + 2);
    if (*((_WORD *)v8 + 2)) {
      v10 += (uint64_t)&v7[*(unsigned int *)&v7[v10]];
    }
  }
  uint64_t v11 = v10 + 4 * *(unsigned int *)(a2 + 4);
  uint64_t v12 = (int *)(v11 + 4 + *(unsigned int *)(v11 + 4));
  char v13 = (unsigned __int16 *)((char *)v12 - *v12);
  unsigned int v14 = *v13;
  if (v14 < 0x25)
  {
    if (v14 < 0xF)
    {
LABEL_21:
      *(void *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
      *(unsigned char *)(a4 + 24) = 2;
      *(void *)(a4 + 32) = sub_1133328();
      *(void *)(a4 + 40) = 0;
      *(void *)(a4 + 48) = 0;
      *(void *)(a4 + 56) = 0;
      return;
    }
    char v15 = 0;
    uint64_t v16 = v13[7];
    if (v16)
    {
LABEL_9:
      int v17 = *(int *)((char *)v12 + v16);
      if (a3 == -1) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
  }
  else
  {
    char v15 = (unsigned int *)v13[18];
    if (v13[18]) {
      char v15 = (unsigned int *)((char *)v15 + (void)v12 + *(unsigned int *)((char *)v15 + (void)v12));
    }
    uint64_t v16 = v13[7];
    if (v16) {
      goto LABEL_9;
    }
  }
  int v17 = -1;
  if (a3 == -1) {
    goto LABEL_17;
  }
LABEL_14:
  if (v15)
  {
    if (*v15 > a3)
    {
      unsigned int v18 = v15[a3 + 1];
      if (v18 != -1) {
        goto LABEL_18;
      }
    }
  }
LABEL_17:
  unsigned int v18 = v17;
  if (v17 == -1) {
    goto LABEL_21;
  }
LABEL_18:
  if (v9 < 9)
  {
    uint64_t v19 = 0;
  }
  else
  {
    uint64_t v19 = *((unsigned __int16 *)v8 + 4);
    if (v19) {
      v19 += (uint64_t)&v7[*(unsigned int *)&v7[v19]];
    }
  }
  uint64_t v20 = (int *)(v19 + 4 * v18 + 4 + *(unsigned int *)(v19 + 4 * v18 + 4));

  sub_4A0694(v20, a4);
}

void sub_90BE98(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  uint64_t v8 = (int *)sub_8DFD1C(a2, a1, 0, "line");
  unsigned int v9 = (unsigned __int16 *)((char *)v8 - *v8);
  if (*v9 >= 0x35u)
  {
    uint64_t v10 = v9[26];
    if (v10)
    {
      if (*((unsigned char *)v8 + v10))
      {
        a4[23] = 0;
        *a4 = 0;
        return;
      }
    }
  }
  uint64_t v11 = (int *)sub_8DFD1C(a2, a1, 0, "line");
  uint64_t v12 = (unsigned __int16 *)((char *)v11 - *v11);
  if (*v12 >= 0xFu && (uint64_t v13 = v12[7]) != 0) {
    unsigned int v14 = (char **)((char *)v11 + v13 + *(unsigned int *)((char *)v11 + v13));
  }
  else {
    unsigned int v14 = 0;
  }
  sub_8F48DC(v14, (void (*)(void **__return_ptr, char *))sub_4A0694, (uint64_t)&v28);
  nullsub_1(&v25);
  sub_997050((uint64_t *)&v28, a3 + 968, &__p);
  sub_995044((uint64_t *)&__p, (uint64_t)a4);
  char v15 = (void **)__p;
  if (__p)
  {
    uint64_t v16 = v27;
    int v17 = __p;
    if (v27 == __p)
    {
LABEL_18:
      unint64_t v27 = v15;
      operator delete(v17);
      goto LABEL_19;
    }
    while (1)
    {
      if (*((char *)v16 - 1) < 0)
      {
        operator delete(*(v16 - 3));
        if ((*((char *)v16 - 33) & 0x80000000) == 0) {
          goto LABEL_13;
        }
LABEL_16:
        operator delete(*(v16 - 7));
        v16 -= 7;
        if (v16 == v15)
        {
LABEL_17:
          int v17 = __p;
          goto LABEL_18;
        }
      }
      else
      {
        if (*((char *)v16 - 33) < 0) {
          goto LABEL_16;
        }
LABEL_13:
        v16 -= 7;
        if (v16 == v15) {
          goto LABEL_17;
        }
      }
    }
  }
LABEL_19:
  unsigned int v18 = (void **)v28;
  if (v28)
  {
    uint64_t v19 = v29;
    uint64_t v20 = v28;
    if (v29 != v28)
    {
      do
      {
        unint64_t v21 = (void **)*(v19 - 3);
        if (v21)
        {
          uint64_t v22 = (void **)*(v19 - 2);
          unint64_t v23 = *(v19 - 3);
          if (v22 != v21)
          {
            do
            {
              if (*((char *)v22 - 1) < 0) {
                operator delete(*(v22 - 3));
              }
              v22 -= 4;
            }
            while (v22 != v21);
            unint64_t v23 = *(v19 - 3);
          }
          *(v19 - 2) = v21;
          operator delete(v23);
        }
        unint64_t v24 = v19 - 8;
        if (*((char *)v19 - 41) < 0) {
          operator delete(*v24);
        }
        v19 -= 8;
      }
      while (v24 != v18);
      uint64_t v20 = v28;
    }
    unsigned int v29 = v18;
    operator delete(v20);
  }
}

void sub_90C0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_8E4FE0((void **)va);
  sub_8F36A0((void ***)va1);
  _Unwind_Resume(a1);
}

void sub_90C0D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_8F36A0((void ***)va);
  _Unwind_Resume(a1);
}

void sub_90C0E4(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  uint64_t v8 = (int *)sub_8EF9B8(a2, a1, 0, "system");
  unsigned int v9 = (unsigned __int16 *)((char *)v8 - *v8);
  if (*v9 >= 0x13u)
  {
    uint64_t v10 = v9[9];
    if (v10)
    {
      if (*((unsigned char *)v8 + v10))
      {
        a4[23] = 0;
        *a4 = 0;
        return;
      }
    }
  }
  uint64_t v11 = (int *)sub_8EF9B8(a2, a1, 0, "system");
  uint64_t v12 = (unsigned __int16 *)((char *)v11 - *v11);
  if (*v12 >= 7u && (uint64_t v13 = v12[3]) != 0) {
    unsigned int v14 = (char **)((char *)v11 + v13 + *(unsigned int *)((char *)v11 + v13));
  }
  else {
    unsigned int v14 = 0;
  }
  sub_8F48DC(v14, (void (*)(void **__return_ptr, char *))sub_4A0694, (uint64_t)&v28);
  nullsub_1(&v25);
  sub_997050((uint64_t *)&v28, a3 + 968, &__p);
  sub_994EAC((uint64_t *)&__p, (uint64_t)a4);
  char v15 = (void **)__p;
  if (__p)
  {
    uint64_t v16 = v27;
    int v17 = __p;
    if (v27 == __p)
    {
LABEL_18:
      unint64_t v27 = v15;
      operator delete(v17);
      goto LABEL_19;
    }
    while (1)
    {
      if (*((char *)v16 - 1) < 0)
      {
        operator delete(*(v16 - 3));
        if ((*((char *)v16 - 33) & 0x80000000) == 0) {
          goto LABEL_13;
        }
LABEL_16:
        operator delete(*(v16 - 7));
        v16 -= 7;
        if (v16 == v15)
        {
LABEL_17:
          int v17 = __p;
          goto LABEL_18;
        }
      }
      else
      {
        if (*((char *)v16 - 33) < 0) {
          goto LABEL_16;
        }
LABEL_13:
        v16 -= 7;
        if (v16 == v15) {
          goto LABEL_17;
        }
      }
    }
  }
LABEL_19:
  unsigned int v18 = (void **)v28;
  if (v28)
  {
    uint64_t v19 = v29;
    uint64_t v20 = v28;
    if (v29 != v28)
    {
      do
      {
        unint64_t v21 = (void **)*(v19 - 3);
        if (v21)
        {
          uint64_t v22 = (void **)*(v19 - 2);
          unint64_t v23 = *(v19 - 3);
          if (v22 != v21)
          {
            do
            {
              if (*((char *)v22 - 1) < 0) {
                operator delete(*(v22 - 3));
              }
              v22 -= 4;
            }
            while (v22 != v21);
            unint64_t v23 = *(v19 - 3);
          }
          *(v19 - 2) = v21;
          operator delete(v23);
        }
        unint64_t v24 = v19 - 8;
        if (*((char *)v19 - 41) < 0) {
          operator delete(*v24);
        }
        v19 -= 8;
      }
      while (v24 != v18);
      uint64_t v20 = v28;
    }
    unsigned int v29 = v18;
    operator delete(v20);
  }
}

void sub_90C300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_8E4FE0((void **)va);
  sub_8F36A0((void ***)va1);
  _Unwind_Resume(a1);
}

void sub_90C31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_8F36A0((void ***)va);
  _Unwind_Resume(a1);
}

void sub_90C330(unint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, std::string *a7@<X8>)
{
  sub_90BE98(a1, a5, a6, v33);
  unsigned int v14 = (int *)sub_8DFD1C(a5, a1, 0, "line");
  unint64_t v15 = *(void *)((char *)v14 + *(unsigned __int16 *)((char *)v14 - *v14 + 6));
  if (!a2) {
    goto LABEL_6;
  }
  uint64_t v16 = (void *)HIBYTE(v34);
  if (v34 < 0) {
    uint64_t v16 = v33[1];
  }
  if (v16)
  {
    HIBYTE(v32) = 0;
    LOBYTE(v31[0]) = 0;
  }
  else
  {
LABEL_6:
    sub_90C0E4(v15, a4, a6, v31);
  }
  if (byte_25D2980[23] < 0) {
    sub_4200(&__dst, *(void **)byte_25D2980, *(unint64_t *)&byte_25D2980[8]);
  }
  else {
    std::string __dst = *(std::string *)byte_25D2980;
  }
  if (SHIBYTE(v34) < 0)
  {
    sub_4200(&v36, v33[0], (unint64_t)v33[1]);
  }
  else
  {
    long long v36 = *(_OWORD *)v33;
    uint64_t v37 = v34;
  }
  if (byte_25D2A87 < 0)
  {
    sub_4200(&v38, (void *)xmmword_25D2A70, *((unint64_t *)&xmmword_25D2A70 + 1));
  }
  else
  {
    long long v38 = xmmword_25D2A70;
    uint64_t v39 = unk_25D2A80;
  }
  if (SHIBYTE(v32) < 0)
  {
    sub_4200(&v40, v31[0], (unint64_t)v31[1]);
  }
  else
  {
    long long v40 = *(_OWORD *)v31;
    uint64_t v41 = v32;
  }
  sub_2AAA4((uint64_t)__p, (uint64_t)&__dst, 2);
  if (SHIBYTE(v41) < 0)
  {
    operator delete((void *)v40);
    if ((SHIBYTE(v39) & 0x80000000) == 0)
    {
LABEL_21:
      if ((SHIBYTE(v37) & 0x80000000) == 0) {
        goto LABEL_22;
      }
LABEL_50:
      operator delete((void *)v36);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_23;
      }
LABEL_51:
      operator delete(__dst.__r_.__value_.__l.__data_);
      goto LABEL_23;
    }
  }
  else if ((SHIBYTE(v39) & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete((void *)v38);
  if (SHIBYTE(v37) < 0) {
    goto LABEL_50;
  }
LABEL_22:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_51;
  }
LABEL_23:
  memset(&__dst, 0, sizeof(__dst));
  int v17 = (int *)sub_8DFD1C(a5, a1, 0, "line");
  unsigned int v18 = (unsigned __int16 *)((char *)v17 - *v17);
  if (*v18 >= 0x4Fu && (uint64_t v19 = v18[39]) != 0 && *((unsigned char *)v17 + v19))
  {
    std::string::operator=(&__dst, (const std::string *)&qword_25D3088);
    uint64_t v20 = (int *)sub_8DFD1C(a5, a1, 0, "line");
    unint64_t v21 = (unsigned __int16 *)((char *)v20 - *v20);
    if (*v21 >= 0x2Bu)
    {
      unsigned int v22 = v21[21];
      int v23 = 1;
      if (!v22) {
        goto LABEL_33;
      }
LABEL_31:
      uint64_t v25 = *(unsigned __int16 *)((char *)v20 + v22);
      goto LABEL_34;
    }
    int v23 = 1;
  }
  else
  {
    std::string::operator=(&__dst, (const std::string *)&qword_25D30A0);
    uint64_t v20 = (int *)sub_8DFD1C(a5, a1, 0, "line");
    unint64_t v24 = (unsigned __int16 *)((char *)v20 - *v20);
    if (*v24 < 0x2Bu)
    {
      int v23 = 0;
    }
    else
    {
      int v23 = 0;
      unsigned int v22 = v24[21];
      if (v22) {
        goto LABEL_31;
      }
    }
  }
LABEL_33:
  uint64_t v25 = 2;
LABEL_34:
  sub_98E2D8(__p, v25, v23, 1, a3, (uint64_t)&__dst);
  sub_6581AC((uint64_t)&__dst, (uint64_t)__p, a3, 0, a7);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int64_t v26 = v30;
  if (v30)
  {
    while (1)
    {
      unint64_t v27 = *(char **)v26;
      if (v26[63] < 0)
      {
        operator delete(*((void **)v26 + 5));
        if ((v26[39] & 0x80000000) == 0) {
          goto LABEL_39;
        }
LABEL_42:
        operator delete(*((void **)v26 + 2));
        operator delete(v26);
        int64_t v26 = v27;
        if (!v27) {
          break;
        }
      }
      else
      {
        if (v26[39] < 0) {
          goto LABEL_42;
        }
LABEL_39:
        operator delete(v26);
        int64_t v26 = v27;
        if (!v27) {
          break;
        }
      }
    }
  }
  uint64_t v28 = __p[0];
  __p[0] = 0;
  if (v28) {
    operator delete(v28);
  }
  if ((SHIBYTE(v32) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v34) & 0x80000000) == 0) {
      return;
    }
LABEL_53:
    operator delete(v33[0]);
    return;
  }
  operator delete(v31[0]);
  if (SHIBYTE(v34) < 0) {
    goto LABEL_53;
  }
}

void sub_90C738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a41 < 0) {
    operator delete(__p);
  }
  sub_1B23C((uint64_t)&a27);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_8;
    }
  }
  else if ((a26 & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(a21);
LABEL_8:
  _Unwind_Resume(a1);
}

void sub_90C818(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v31 = a3;
  sub_8ECABC(a1, (uint64_t)&v32);
  switch(v33)
  {
    case 0:
      uint64_t v7 = (int *)sub_498D5C(a2, v32, 0, "stop");
      uint64_t v8 = (unsigned __int16 *)((char *)v7 - *v7);
      if (*v8 >= 0x3Bu && (uint64_t v9 = v8[29]) != 0) {
        uint64_t v10 = (int *)((char *)v7 + v9 + *(unsigned int *)((char *)v7 + v9));
      }
      else {
        uint64_t v10 = 0;
      }
      sub_4A0694(v10, (uint64_t)v27);
      nullsub_1(&v25);
      sub_9973DC((uint64_t)v27, a3 + 968, a4);
      uint64_t v20 = (void **)__p;
      if (!__p) {
        goto LABEL_38;
      }
      unint64_t v21 = v30;
      unsigned int v22 = __p;
      if (v30 == __p) {
        goto LABEL_37;
      }
      do
      {
        if (*((char *)v21 - 1) < 0) {
          operator delete(*(v21 - 3));
        }
        v21 -= 4;
      }
      while (v21 != v20);
      goto LABEL_36;
    case 1:
      uint64_t v11 = (int *)sub_8ED3D4(a2, v32, 0, "hall");
      uint64_t v12 = (unsigned __int16 *)((char *)v11 - *v11);
      if (*v12 >= 0x29u && (uint64_t v13 = v12[20]) != 0) {
        unsigned int v14 = (int *)((char *)v11 + v13 + *(unsigned int *)((char *)v11 + v13));
      }
      else {
        unsigned int v14 = 0;
      }
      sub_4A0694(v14, (uint64_t)v27);
      nullsub_1(&v25);
      sub_9973DC((uint64_t)v27, a3 + 968, a4);
      uint64_t v20 = (void **)__p;
      if (!__p) {
        goto LABEL_38;
      }
      int v23 = v30;
      unsigned int v22 = __p;
      if (v30 == __p) {
        goto LABEL_37;
      }
      do
      {
        if (*((char *)v23 - 1) < 0) {
          operator delete(*(v23 - 3));
        }
        v23 -= 4;
      }
      while (v23 != v20);
      goto LABEL_36;
    case 2:
      unint64_t v15 = (int *)sub_8ED928(a2, v32, 0, "station");
      uint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
      if (*v16 >= 0x31u && (uint64_t v17 = v16[24]) != 0) {
        unsigned int v18 = (int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
      }
      else {
        unsigned int v18 = 0;
      }
      sub_4A0694(v18, (uint64_t)v27);
      nullsub_1(&v25);
      sub_9973DC((uint64_t)v27, a3 + 968, a4);
      uint64_t v20 = (void **)__p;
      if (!__p) {
        goto LABEL_38;
      }
      unint64_t v24 = v30;
      unsigned int v22 = __p;
      if (v30 == __p) {
        goto LABEL_37;
      }
      do
      {
        if (*((char *)v24 - 1) < 0) {
          operator delete(*(v24 - 3));
        }
        v24 -= 4;
      }
      while (v24 != v20);
LABEL_36:
      unsigned int v22 = __p;
LABEL_37:
      long long v30 = v20;
      operator delete(v22);
LABEL_38:
      if ((v28 & 0x80000000) == 0) {
        return;
      }
      uint64_t v19 = (unint64_t *)v27[0];
      goto LABEL_42;
    case 3:
      sub_8ED2E4(a2, &v32, (uint64_t)&v25);
      uint64_t v19 = v25;
      if (v25 == v26)
      {
        *(_OWORD *)a4 = 0u;
        *(_OWORD *)(a4 + 16) = 0u;
        *(unsigned char *)(a4 + 24) = 2;
        *(void *)(a4 + 40) = 0;
        *(void *)(a4 + 48) = 0;
        *(void *)(a4 + 32) = 0;
        if (!v19) {
          return;
        }
      }
      else
      {
        sub_90CC54(a2, *v25, (uint64_t)v27);
        sub_90CBFC(a4, &v31, (uint64_t)v27);
        sub_35EA08((uint64_t)v27);
        uint64_t v19 = v25;
        if (!v25) {
          return;
        }
      }
      int64_t v26 = v19;
LABEL_42:
      operator delete(v19);
      return;
    default:
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      *(unsigned char *)(a4 + 24) = 2;
      *(void *)(a4 + 40) = 0;
      *(void *)(a4 + 48) = 0;
      *(void *)(a4 + 32) = 0;
      return;
  }
}

void sub_90CB5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_90CBFC(uint64_t a1, void *a2, uint64_t a3)
{
  nullsub_1(&v6);
  sub_9973DC(a3, *a2 + 968, a1);
}

void sub_90CC54(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (int *)sub_8ED928(a1, a2, 0, "station");
  int v5 = (unsigned __int16 *)((char *)v4 - *v4);
  if (*v5 >= 0x31u && (uint64_t v6 = v5[24]) != 0)
  {
    uint64_t v7 = (int *)((char *)v4 + v6 + *(unsigned int *)((char *)v4 + v6));
    uint64_t v8 = a3;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = a3;
  }
  sub_4A0694(v7, v8);
}

void *sub_90CCE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = *(unsigned int *)(a1 + 488);
  uint64_t v4 = *(void *)(a1 + 416);
  if (0xEEEEEEEEEEEEEEEFLL * ((*(void *)(a1 + 424) - v4) >> 3) <= v3) {
    sub_66748();
  }
  uint64_t v5 = v4 + 120 * v3;
  uint64_t v7 = *(void *)(v5 + 24);
  v5 += 24;
  uint64_t v6 = v7;
  unint64_t v8 = *(unsigned int *)(v5 + 24);
  if (v8 >= (*(void *)(v5 + 8) - v7) >> 5) {
    sub_66748();
  }
  uint64_t v9 = v6 + 32 * v8;
  double result = sub_8EC284((void *)a2, (uint64_t *)v9);
  *(unsigned char *)(a2 + 24) = *(unsigned char *)(v9 + 24);
  return result;
}

void sub_90CD6C(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (a2)
  {
    uint64_t v5 = *(unsigned int **)(a1 + 416);
    uint64_t v6 = *(unsigned int **)(a1 + 424);
    if (v5 != v6)
    {
      unint64_t v8 = 0;
      do
      {
        uint64_t v9 = *v5;
        unsigned int v10 = v5[3];
        uint64_t v11 = sub_369B60(a3, v5[1] | (unint64_t)(v9 << 32), 0);
        uint64_t v12 = &v11[-*(int *)v11];
        if (*(unsigned __int16 *)v12 < 5u)
        {
          uint64_t v13 = 0;
        }
        else
        {
          uint64_t v13 = *((unsigned __int16 *)v12 + 2);
          if (*((_WORD *)v12 + 2)) {
            v13 += (uint64_t)&v11[*(unsigned int *)&v11[v13]];
          }
        }
        unsigned int v14 = (int *)(v13 + 4 * v9 + 4 + *(unsigned int *)(v13 + 4 * v9 + 4));
        unint64_t v15 = (unsigned __int16 *)((char *)v14 - *v14);
        if (*v15 >= 0xDu && (uint64_t v16 = v15[6]) != 0) {
          int v17 = *(int *)((char *)v14 + v16);
        }
        else {
          int v17 = -1;
        }
        *(void *)&long long v21 = *(void *)&v11[24 * v17
                                        + 4
                                        + 24 * v10
                                        + *((unsigned __int16 *)v12 + 3)
                                        + *(unsigned int *)&v11[*((unsigned __int16 *)v12 + 3)]];
        unint64_t v8 = sub_90E25C(a4, v8, &v21) + 8;
        v5 += 30;
      }
      while (v5 != v6);
    }
  }
  else if (!*(_DWORD *)(a1 + 376))
  {
    long long v21 = 0uLL;
    unsigned int v18 = *(void **)(a1 + 24);
    uint64_t v19 = *(void **)(a1 + 32);
    unint64_t v22 = 0;
    int v23 = (void **)&v21;
    if (v18 != v19)
    {
      do
        sub_2A98DC(&v23, v18++);
      while (v18 != v19);
      uint64_t v20 = (void *)*a4;
      if (*a4)
      {
        a4[1] = (unint64_t)v20;
        operator delete(v20);
        *a4 = 0;
        a4[1] = 0;
        a4[2] = 0;
      }
    }
    *(_OWORD *)a4 = v21;
    a4[2] = v22;
  }
  sub_90CF48((int8x16_t **)a4);
}

void sub_90CEF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_90CF48(int8x16_t **a1)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  unint64_t v4 = 126 - 2 * __clz(((char *)v3 - (char *)v2) >> 3);
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  sub_90E5CC(v2, v3, (uint64_t)&v14, v5, 1);
  uint64_t v6 = a1[1];
  if (*a1 != v6)
  {
    uint64_t v7 = &(*a1)[-1].i32[2];
    do
    {
      if (v7 + 4 == (__int32 *)v6) {
        return;
      }
      __int32 v8 = v7[2];
      v7 += 2;
      LODWORD(v9) = v7[2];
    }
    while (v8 != v9 || v7[1] != v7[3]);
    uint64_t v11 = (int8x16_t *)(v7 + 4);
    if (v7 + 4 == (__int32 *)v6)
    {
      uint64_t v12 = (int8x16_t *)(v7 + 2);
      if (v7 + 2 == (__int32 *)v6) {
        return;
      }
      goto LABEL_22;
    }
    do
    {
      if (v9 != v11->i32[0] || v7[1] != v11->i32[1])
      {
        uint64_t v9 = v11->i64[0];
        *((void *)v7 + 1) = v11->i64[0];
        v7 += 2;
      }
      uint64_t v11 = (int8x16_t *)((char *)v11 + 8);
    }
    while (v11 != v6);
    uint64_t v12 = (int8x16_t *)(v7 + 2);
    if (v7 + 2 != (__int32 *)a1[1]) {
LABEL_22:
    }
      a1[1] = v12;
  }
}

void sub_90D068(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  sub_8ECABC(a1, (uint64_t)&v22);
  if (a2)
  {
    uint64_t v11 = *(unsigned int **)(a1 + 416);
    uint64_t v10 = *(unsigned int **)(a1 + 424);
    if (v10 != v11)
    {
      if ((0xEEEEEEEEEEEEEEEFLL * (((char *)v10 - (char *)v11) >> 3)) >> 61) {
        sub_2E00();
      }
      uint64_t v12 = (char *)operator new(0x7777777777777778 * (((char *)v10 - (char *)v11) >> 3));
      *a5 = (unint64_t)v12;
      a5[1] = (unint64_t)v12;
      for (a5[2] = (unint64_t)&v12[0x7777777777777778 * (((char *)v10 - (char *)v11) >> 3)]; v11 != v10; v11 += 30)
      {
        uint64_t v13 = (int *)sub_369F8C(a4, v11[1] | ((unint64_t)*v11 << 32), 0, "trip");
        *(void *)&long long __src = *(void *)((char *)v13 + *(unsigned __int16 *)((char *)v13 - *v13 + 6));
        uint64_t v12 = sub_90F1E4(a5, v12, &__src) + 8;
      }
    }
  }
  else
  {
    switch(v23)
    {
      case -1:
        return;
      case 0:
        *(void *)&long long v18 = v22;
        sub_8F33D4(a3, (unint64_t *)&v18, (uint64_t)&__src);
        goto LABEL_19;
      case 1:
        *(void *)&long long v18 = v22;
        sub_8FF2DC(a3, (unint64_t *)&v18, (uint64_t)&__src);
        goto LABEL_19;
      case 2:
        *(void *)&long long v18 = v22;
        sub_8F32E4(a3, (unint64_t *)&v18, (uint64_t)&__src);
LABEL_19:
        uint64_t v16 = (void *)*a5;
        if (*a5)
        {
          a5[1] = (unint64_t)v16;
          operator delete(v16);
          *a5 = 0;
          a5[1] = 0;
          a5[2] = 0;
        }
        *(_OWORD *)a5 = __src;
        a5[2] = v21;
        break;
      case 3:
        *(void *)&long long v18 = v22;
        sub_8ED2E4(a3, (unint64_t *)&v18, (uint64_t)&__src);
        char v14 = (void *)__src;
        if ((void)__src != *((void *)&__src + 1))
        {
          sub_8F32E4(a3, (unint64_t *)__src, (uint64_t)&v18);
          unint64_t v15 = (void *)*a5;
          if (*a5)
          {
            a5[1] = (unint64_t)v15;
            operator delete(v15);
            *a5 = 0;
            a5[1] = 0;
            a5[2] = 0;
          }
          *(_OWORD *)a5 = v18;
          a5[2] = v19;
          char v14 = (void *)__src;
        }
        if (v14)
        {
          *((void *)&__src + 1) = v14;
          operator delete(v14);
        }
        break;
      case 4:
        *(void *)&long long __src = v22;
        sub_326C0(a5, (char *)&__src, (char *)&__src + 8, 1uLL);
        break;
      case 5:
        int v17 = (int *)sub_369F8C(a4, v22, 0, "trip");
        *(void *)&long long __src = *(void *)((char *)v17 + *(unsigned __int16 *)((char *)v17 - *v17 + 6));
        sub_326C0(a5, (char *)&__src, (char *)&__src + 8, 1uLL);
        break;
      default:
        break;
    }
  }
  sub_90D3C4((int8x16_t **)a5);
}

void sub_90D33C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v16 = *(void **)v14;
    if (!*(void *)v14) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v16 = *(void **)v14;
    if (!*(void *)v14) {
      goto LABEL_3;
    }
  }
  *(void *)(v14 + 8) = v16;
  operator delete(v16);
  _Unwind_Resume(exception_object);
}

void sub_90D3C4(int8x16_t **a1)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  unint64_t v4 = 126 - 2 * __clz(((char *)v3 - (char *)v2) >> 3);
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  sub_8FDE68(v2, v3, (uint64_t)&v14, v5, 1);
  uint64_t v6 = a1[1];
  if (*a1 != v6)
  {
    uint64_t v7 = &(*a1)[-1].i32[2];
    do
    {
      if (v7 + 4 == (__int32 *)v6) {
        return;
      }
      __int32 v8 = v7[2];
      v7 += 2;
      LODWORD(v9) = v7[2];
    }
    while (v8 != v9 || v7[1] != v7[3]);
    uint64_t v11 = (int8x16_t *)(v7 + 4);
    if (v7 + 4 == (__int32 *)v6)
    {
      uint64_t v12 = (int8x16_t *)(v7 + 2);
      if (v7 + 2 == (__int32 *)v6) {
        return;
      }
      goto LABEL_22;
    }
    do
    {
      if (v9 != v11->i32[0] || v7[1] != v11->i32[1])
      {
        uint64_t v9 = v11->i64[0];
        *((void *)v7 + 1) = v11->i64[0];
        v7 += 2;
      }
      uint64_t v11 = (int8x16_t *)((char *)v11 + 8);
    }
    while (v11 != v6);
    uint64_t v12 = (int8x16_t *)(v7 + 2);
    if (v7 + 2 != (__int32 *)a1[1]) {
LABEL_22:
    }
      a1[1] = v12;
  }
}

uint64_t sub_90D4E4(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (*a1 == v6)
  {
    uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    if (!a3) {
      return v11;
    }
    BOOL v10 = 0;
LABEL_11:
    uint64_t v13 = *a1;
    uint64_t v12 = a1[1];
    if (!v10 && v13 == v12) {
      return v11;
    }
    goto LABEL_14;
  }
  uint64_t v8 = *a1;
  while (1)
  {
    unsigned int v9 = *(_DWORD *)(v8 + 1088) - 2;
    BOOL v10 = v9 < 3;
    if (v9 <= 2) {
      break;
    }
    v8 += 1096;
    if (v8 == v6)
    {
      uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_6;
    }
  }
  uint64_t v11 = 0;
  do
  {
    int v39 = *(_DWORD *)(v5 + 1088);
    if (v39 == 3)
    {
      v11 += *(void *)(v5 + 536);
    }
    else if (v39 == 2)
    {
      v11 += sub_49A29C(v5, a2);
    }
    v5 += 1096;
  }
  while (v5 != v6);
LABEL_6:
  if (a3) {
    goto LABEL_11;
  }
  if (v9 > 2) {
    return v11;
  }
  uint64_t v13 = *a1;
  uint64_t v12 = a1[1];
LABEL_14:
  if (v13 != v12)
  {
    int v14 = 0;
    do
    {
      int v15 = *(_DWORD *)(v13 + 1088);
      switch(v15)
      {
        case 1:
          if (!a3) {
            goto LABEL_17;
          }
          int v54 = -1;
          long long v22 = *(_OWORD *)v13;
          long long v23 = *(_OWORD *)(v13 + 16);
          *(_OWORD *)((char *)v49 + 12) = *(_OWORD *)(v13 + 28);
          v49[0] = v23;
          long long v48 = v22;
          uint64_t v51 = 0;
          long long v52 = 0;
          uint64_t v50 = 0;
          uint64_t v25 = *(unsigned char **)(v13 + 48);
          unint64_t v24 = *(unsigned char **)(v13 + 56);
          int64_t v26 = v24 - v25;
          if (v24 != v25)
          {
            if (v26 < 0) {
              sub_2E00();
            }
            unint64_t v27 = (char *)operator new(v24 - v25);
            char v28 = &v27[8 * (v26 >> 3)];
            uint64_t v50 = v27;
            long long v52 = v28;
            memcpy(v27, v25, v26);
            uint64_t v51 = v28;
          }
          char v53 = *(unsigned char *)(v13 + 72);
          int v54 = 1;
          unint64_t v17 = sub_49A0F4((unsigned int *)&v48);
          int v47 = -1;
          long long v29 = *(_OWORD *)v13;
          long long v30 = *(_OWORD *)(v13 + 16);
          *(_OWORD *)((char *)v42 + 12) = *(_OWORD *)(v13 + 28);
          long long v41 = v29;
          v42[0] = v30;
          uint64_t v44 = 0;
          uint64_t v45 = 0;
          long long __p = 0;
          unint64_t v32 = *(unsigned char **)(v13 + 48);
          uint64_t v31 = *(unsigned char **)(v13 + 56);
          int64_t v33 = v31 - v32;
          if (v31 != v32)
          {
            if (v33 < 0) {
              sub_2E00();
            }
            uint64_t v34 = (char *)operator new(v31 - v32);
            int64_t v35 = &v34[8 * (v33 >> 3)];
            long long __p = v34;
            uint64_t v45 = v35;
            memcpy(v34, v32, v33);
            uint64_t v44 = v35;
          }
          char v46 = *(unsigned char *)(v13 + 72);
          int v47 = 1;
          unint64_t v19 = sub_499F10((unsigned int *)&v41);
          unint64_t v20 = HIDWORD(v17);
          if (HIDWORD(v17) == 0x7FFFFFFF) {
            goto LABEL_33;
          }
          unint64_t v21 = HIDWORD(v19);
          if (HIDWORD(v19) == 0x7FFFFFFF) {
            goto LABEL_33;
          }
          break;
        case 3:
          v14 += *(_DWORD *)(v13 + 548);
          goto LABEL_17;
        case 2:
          int v16 = *(_DWORD *)(v13 + 16);
          long long v48 = *(_OWORD *)v13;
          LODWORD(v49[0]) = v16;
          int v54 = 2;
          unint64_t v17 = sub_49A0F4((unsigned int *)&v48);
          int v18 = *(_DWORD *)(v13 + 16);
          long long v41 = *(_OWORD *)v13;
          LODWORD(v42[0]) = v18;
          int v47 = 2;
          unint64_t v19 = sub_499F10((unsigned int *)&v41);
          unint64_t v20 = HIDWORD(v17);
          if (HIDWORD(v17) == 0x7FFFFFFF || (unint64_t v21 = HIDWORD(v19), HIDWORD(v19) == 0x7FFFFFFF))
          {
LABEL_33:
            int v36 = 10 * (v17 - v19);
            int v37 = v47;
            if (v47 != 3) {
              goto LABEL_34;
            }
            goto LABEL_42;
          }
          break;
        default:
          goto LABEL_17;
      }
      int v36 = 10 * (v20 - v21);
      int v37 = v47;
      if (v47 != 3)
      {
LABEL_34:
        if (v37 == 1 && __p)
        {
          uint64_t v44 = __p;
          operator delete(__p);
        }
        int v38 = v54;
        if (v54 == 3)
        {
LABEL_43:
          sub_3AFFFC((uint64_t)&v49[1]);
LABEL_44:
          v14 += v36;
          goto LABEL_17;
        }
        goto LABEL_38;
      }
LABEL_42:
      sub_3AFFFC((uint64_t)&v42[1]);
      int v38 = v54;
      if (v54 == 3) {
        goto LABEL_43;
      }
LABEL_38:
      if (v38 != 1 || !v50) {
        goto LABEL_44;
      }
      uint64_t v51 = v50;
      operator delete(v50);
      v14 += v36;
LABEL_17:
      v13 += 1096;
    }
    while (v13 != v12);
  }
  return v11;
}

void sub_90D8A8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p)
{
  if (a2)
  {
    if (__p)
    {
      operator delete(__p);
      sub_58CC(a1);
    }
    sub_58CC(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_90D980(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 416);
  uint64_t v2 = *(void *)(a1 + 424);
  if (v1 == v2) {
    return 0;
  }
  unint64_t v3 = *(unsigned int *)(a1 + 488);
  if (0xEEEEEEEEEEEEEEEFLL * ((v2 - v1) >> 3) <= v3) {
    sub_66748();
  }
  return *(void *)(v1 + 120 * v3 + 24) != *(void *)(v1 + 120 * v3 + 32);
}

BOOL sub_90D9E8(unint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = **(void **)(a4 + 3896);
  if (v8
    && (uint64_t v11 = sub_367060(v8, a1, a2, *(unsigned char *)(a4 + 3904))) != 0
    && (uint64_t v12 = v11[5], 0xCCCCCCCCCCCCCCCDLL * ((v11[6] - v12) >> 2) > a3)
    && *(unsigned __int8 *)(v12 + 20 * a3) != 255)
  {
    uint64_t v13 = (char *)(sub_90DB40(a4, a1, a2, a3, 0) + 18);
  }
  else
  {
    int v14 = sub_369B60(a5, a1, 0);
    int v15 = &v14[-*(int *)v14];
    if (*(unsigned __int16 *)v15 < 5u)
    {
      uint64_t v16 = 0;
    }
    else
    {
      uint64_t v16 = *((unsigned __int16 *)v15 + 2);
      if (*((_WORD *)v15 + 2)) {
        v16 += (uint64_t)&v14[*(unsigned int *)&v14[v16]];
      }
    }
    unint64_t v17 = (int *)(v16 + 4 * HIDWORD(a1) + 4 + *(unsigned int *)(v16 + 4 * HIDWORD(a1) + 4));
    int v18 = (unsigned __int16 *)((char *)v17 - *v17);
    if (*v18 >= 0xDu && (uint64_t v19 = v18[6]) != 0) {
      int v20 = *(int *)((char *)v17 + v19);
    }
    else {
      int v20 = -1;
    }
    uint64_t v13 = &v14[24 * v20
             + 22
             + 24 * a3
             + *((unsigned __int16 *)v15 + 3)
             + *(unsigned int *)&v14[*((unsigned __int16 *)v15 + 3)]];
  }
  return *v13 == 0;
}

uint64_t sub_90DB40(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t v37 = a2;
  uint64_t v8 = sub_90DEBC(a1, a2, a3, a5);
  if (v8)
  {
    unsigned int v9 = a4;
    uint64_t v10 = v8[5];
    if (0xCCCCCCCCCCCCCCCDLL * ((v8[6] - v10) >> 2) > a4 && *(unsigned __int8 *)(v10 + 20 * a4) != 255) {
      return v10 + 20 * v9;
    }
  }
  if (a5 != 1)
  {
    if (!a5)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      sub_90E0F0((unsigned int *)&v37, &v30);
      uint64_t v13 = std::string::insert(&v30, 0, "Could not obtain stop time update for trip ");
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      int v15 = std::string::append(&v31, ", schedule index ");
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v32.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v29, a3);
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v17 = &v29;
      }
      else {
        unint64_t v17 = (std::string *)v29.__r_.__value_.__r.__words[0];
      }
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v29.__r_.__value_.__l.__size_;
      }
      uint64_t v19 = std::string::append(&v32, (const std::string::value_type *)v17, size);
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      unint64_t v21 = std::string::append(&v33, ", and stop index ");
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v34.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v28, a4);
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v23 = &v28;
      }
      else {
        long long v23 = (std::string *)v28.__r_.__value_.__r.__words[0];
      }
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v24 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v24 = v28.__r_.__value_.__l.__size_;
      }
      uint64_t v25 = std::string::append(&v34, (const std::string::value_type *)v23, v24);
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      std::string::size_type v36 = v25->__r_.__value_.__r.__words[2];
      long long v35 = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      unint64_t v27 = (void *)sub_2F404((uint64_t)exception, &v35);
    }
    uint64_t v10 = v8[5];
    unsigned int v9 = a4;
    return v10 + 20 * v9;
  }
  return 0;
}

void sub_90DD58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (*(char *)(v47 - 57) < 0) {
    operator delete(*(void **)(v47 - 80));
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((*(char *)(v47 - 89) & 0x80000000) == 0)
    {
LABEL_5:
      if ((a47 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_13;
    }
  }
  else if ((*(char *)(v47 - 89) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v47 - 112));
  if ((a47 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a42);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a40 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a16);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a35);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_10;
  }
LABEL_16:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0) {
LABEL_17:
  }
    _Unwind_Resume(a1);
LABEL_10:
  operator delete(__p);
  goto LABEL_17;
}

uint64_t *sub_90DEBC(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v25 = a2;
  uint64_t v7 = **(void **)(a1 + 3896);
  if (!v7 || (double result = sub_367060(v7, a2, a3, *(unsigned char *)(a1 + 3904))) == 0)
  {
    if (!a4)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      sub_90E0F0((unsigned int *)&v25, &v20);
      uint64_t v10 = std::string::insert(&v20, 0, "Could not obtain trip update for trip ");
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v21.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      uint64_t v12 = std::string::append(&v21, " and schedule index ");
      long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v22.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v19, a3);
      if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v14 = &v19;
      }
      else {
        long long v14 = (std::string *)v19.__r_.__value_.__r.__words[0];
      }
      if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v19.__r_.__value_.__l.__size_;
      }
      long long v16 = std::string::append(&v22, (const std::string::value_type *)v14, size);
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      std::string::size_type v24 = v16->__r_.__value_.__r.__words[2];
      long long v23 = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      int v18 = (void *)sub_2F404((uint64_t)exception, &v23);
    }
    return 0;
  }
  return result;
}

void sub_90E010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

void sub_90E0F0(unsigned int *a1@<X0>, std::string *a2@<X8>)
{
  std::to_string(&v10, *a1);
  unint64_t v4 = std::string::append(&v10, ".");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v11.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a1[1]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v8 = std::string::append(&v11, (const std::string::value_type *)p_p, size);
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_13:
      operator delete(v10.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_13;
  }
}

void sub_90E1E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a26 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a20 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a26 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *sub_90E25C(unint64_t *a1, void *a2, void *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = v7 >> 3;
  unsigned int v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)unsigned int v9 = *a3;
      a1[1] = (unint64_t)(v9 + 8);
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    long long v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      std::string v19 = (void *)a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      int v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 8;
      if (v5 > v16) {
        unint64_t v16 = a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x58)
      {
        std::string v19 = (void *)a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        std::string v19 = (void *)a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          long long v13 = (uint64_t *)((char *)v13 + v21);
          std::string v19 = (void *)(v5 + v21);
          std::string v22 = (_OWORD *)(v5 + 16);
          long long v23 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            *std::string v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        uint64_t v56 = *v13++;
        *v19++ = v56;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = (unint64_t)v19;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    *(void *)unsigned int v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v26 >> 61) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 2 > v26) {
    unint64_t v26 = v28 >> 2;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 61) {
      sub_188D718();
    }
    std::string v30 = (char *)operator new(8 * v29);
    std::string v31 = &v30[8 * v8];
    std::string v32 = &v30[8 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    std::string v30 = 0;
    std::string v31 = (char *)(8 * v8);
    std::string v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((void *)v6 == a2) {
      unint64_t v53 = 1;
    }
    else {
      unint64_t v53 = v7 >> 2;
    }
    if (v53 >> 61) {
      sub_188D718();
    }
    int v54 = (char *)operator new(8 * v53);
    std::string v31 = &v54[8 * (v53 >> 2)];
    std::string v32 = &v54[8 * v53];
    if (v30)
    {
      uint64_t v55 = &v54[8 * v53];
      operator delete(v30);
      std::string v32 = v55;
      std::string v34 = (char *)*a1;
      *(void *)std::string v31 = *a3;
      long long v35 = v31 + 8;
      std::string::size_type v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
LABEL_28:
  std::string v34 = (char *)v6;
  *(void *)std::string v31 = *a3;
  long long v35 = v31 + 8;
  std::string::size_type v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    uint64_t v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v38 = v37 - v34 - 8;
    int v39 = v9;
    std::string::size_type v36 = v31;
    if (v38 < 0x58) {
      goto LABEL_59;
    }
    int v39 = v9;
    std::string::size_type v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 3) + 1;
    uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    int v39 = &v9[-v41];
    std::string::size_type v36 = &v31[-v41];
    long long v42 = v31 - 16;
    uint64_t v43 = (long long *)(v6 + 8 * v8 - 16);
    uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)long long v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        uint64_t v46 = *((void *)v39 - 1);
        v39 -= 8;
        *((void *)v36 - 1) = v46;
        v36 -= 8;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  uint64_t v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    uint64_t v49 = v9;
    size_t v50 = v47 - v9;
    uint64_t v51 = v32;
    memmove(v35, v49, v50);
    std::string v32 = v51;
  }
  long long v52 = (void *)*a1;
  *a1 = (unint64_t)v36;
  a1[1] = (unint64_t)&v35[v48];
  a1[2] = (unint64_t)v32;
  if (v52) {
    operator delete(v52);
  }
  return v31;
}

void sub_90E5B4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

int8x16_t sub_90E5CC(int8x16_t *a1, int8x16_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    uint64_t v12 = a1;
    while (1)
    {
      while (1)
      {
        a1 = v12;
        uint64_t v13 = (char *)a2 - (char *)v12;
        unint64_t v14 = ((char *)a2 - (char *)v12) >> 3;
        if (v6 || !v5)
        {
          switch(v14)
          {
            case 0uLL:
            case 1uLL:
              return result;
            case 2uLL:
              if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) >= (v12->u32[1] | ((unint64_t)v12->u32[0] << 32))) {
                return result;
              }
              uint64_t v89 = v12->i64[0];
              goto LABEL_106;
            case 3uLL:
              unint64_t v87 = v12->u32[3] | ((unint64_t)v12->u32[2] << 32);
              unint64_t v88 = a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32);
              if (v87 >= (v12->u32[1] | ((unint64_t)v12->u32[0] << 32)))
              {
                if (v88 < v87)
                {
                  uint64_t v104 = v12->i64[1];
                  v12->i64[1] = a2[-1].i64[1];
                  a2[-1].i64[1] = v104;
                  if ((v12->u32[3] | ((unint64_t)v12->u32[2] << 32)) < (v12->u32[1] | ((unint64_t)v12->u32[0] << 32)))
                  {
                    int8x16_t result = vextq_s8(*v12, *v12, 8uLL);
                    *uint64_t v12 = result;
                  }
                }
              }
              else
              {
                uint64_t v89 = v12->i64[0];
                if (v88 < v87)
                {
LABEL_106:
                  v12->i64[0] = a2[-1].i64[1];
                }
                else
                {
                  v12->i64[0] = v12->i64[1];
                  v12->i64[1] = v89;
                  if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) >= __ROR8__(v89, 32)) {
                    return result;
                  }
                  v12->i64[1] = a2[-1].i64[1];
                }
                a2[-1].i64[1] = v89;
              }
              break;
            case 4uLL:
              sub_2A9374((unsigned int *)v12, &v12->u32[2], (unsigned int *)&v12[1], &a2[-1].u32[2]);
              return result;
            case 5uLL:
              sub_2A94B0((unsigned int *)v12, &v12->u32[2], (unsigned int *)&v12[1], &v12[1].u32[2], &a2[-1].u32[2]);
              return result;
            default:
              JUMPOUT(0);
          }
          return result;
        }
        if (v13 <= 191)
        {
          uint64_t v90 = (int8x16_t *)&v12->u64[1];
          BOOL v92 = v12 == a2 || v90 == a2;
          if (a5)
          {
            if (!v92)
            {
              uint64_t v93 = 0;
              long long v94 = v12;
              do
              {
                uint64_t v96 = v94->u32[2];
                uint64_t v97 = v94->u32[3];
                uint64_t v98 = v94->u32[0];
                uint64_t v99 = v94->u32[1];
                long long v94 = v90;
                if ((v97 | (unint64_t)(v96 << 32)) < (v99 | (unint64_t)(v98 << 32)))
                {
                  uint64_t v100 = v90->i64[0];
                  unint64_t v101 = __ROR8__(v94->i64[0], 32);
                  uint64_t v102 = v93;
                  do
                  {
                    uint64_t v103 = &v12->i8[v102];
                    *(uint64_t *)((char *)&v12->i64[1] + v102) = *(uint64_t *)((char *)v12->i64 + v102);
                    if (!v102)
                    {
                      uint64_t v95 = (uint64_t *)v12;
                      goto LABEL_124;
                    }
                    v102 -= 8;
                  }
                  while (v101 < (*((unsigned int *)v103 - 1) | ((unint64_t)*((unsigned int *)v103 - 2) << 32)));
                  uint64_t v95 = (uint64_t *)((char *)&v12->i64[1] + v102);
LABEL_124:
                  uint64_t *v95 = v100;
                }
                uint64_t v90 = (int8x16_t *)&v94->u64[1];
                v93 += 8;
              }
              while (&v94->u64[1] != (unint64_t *)a2);
            }
          }
          else if (!v92)
          {
            do
            {
              uint64_t v105 = a1->u32[2];
              uint64_t v106 = a1->u32[3];
              uint64_t v107 = a1->u32[0];
              uint64_t v108 = a1->u32[1];
              a1 = v90;
              if ((v106 | (unint64_t)(v105 << 32)) < (v108 | (unint64_t)(v107 << 32)))
              {
                uint64_t v109 = v90->i64[0];
                unint64_t v110 = __ROR8__(v90->i64[0], 32);
                do
                {
                  uint64_t v111 = (uint64_t *)v90;
                  uint64_t v112 = v90[-1].i64[1];
                  uint64_t v90 = (int8x16_t *)((char *)v90 - 8);
                  *uint64_t v111 = v112;
                }
                while (v110 < (*((unsigned int *)v111 - 3) | ((unint64_t)*((unsigned int *)v111 - 4) << 32)));
                v90->i64[0] = v109;
              }
              uint64_t v90 = (int8x16_t *)&a1->u64[1];
            }
            while (&a1->u64[1] != (unint64_t *)a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v12 != a2)
          {
            sub_2A9598((unsigned int *)v12, (unsigned int *)a2, (unsigned int *)a2, a3);
          }
          return result;
        }
        unint64_t v15 = v14 >> 1;
        unint64_t v16 = (unsigned int *)v12 + 2 * (v14 >> 1);
        unint64_t v17 = a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32);
        if ((unint64_t)v13 >= 0x401) {
          break;
        }
        unint64_t v21 = v12->u32[1] | ((unint64_t)v12->u32[0] << 32);
        std::string v22 = &v12->u32[2 * v15 + 1];
        if (v21 < (*v22 | ((unint64_t)*v16 << 32)))
        {
          uint64_t v23 = *(void *)v16;
          if (v17 >= v21)
          {
            *(void *)unint64_t v16 = v12->i64[0];
            v12->i64[0] = v23;
            if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) >= __ROR8__(v23, 32)) {
              goto LABEL_32;
            }
            v12->i64[0] = a2[-1].i64[1];
          }
          else
          {
            *(void *)unint64_t v16 = a2[-1].i64[1];
          }
          a2[-1].i64[1] = v23;
LABEL_32:
          --a4;
          if ((a5 & 1) == 0) {
            goto LABEL_56;
          }
          goto LABEL_33;
        }
        if (v17 >= v21) {
          goto LABEL_32;
        }
        uint64_t v26 = v12->i64[0];
        v12->i64[0] = a2[-1].i64[1];
        a2[-1].i64[1] = v26;
        if ((v12->u32[1] | ((unint64_t)v12->u32[0] << 32)) >= (*v22 | ((unint64_t)*v16 << 32))) {
          goto LABEL_32;
        }
        uint64_t v27 = *(void *)v16;
        *(void *)unint64_t v16 = v12->i64[0];
        v12->i64[0] = v27;
        --a4;
        if (a5) {
          goto LABEL_33;
        }
LABEL_56:
        uint64_t v37 = v12->i64[0];
        if ((v12[-1].u32[3] | ((unint64_t)v12[-1].u32[2] << 32)) < (v12->u32[1] | ((unint64_t)v12->u32[0] << 32))) {
          goto LABEL_57;
        }
        unint64_t v73 = __ROR8__(v37, 32);
        if (v73 < (a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)))
        {
          do
          {
            uint64_t v74 = v12->u32[2];
            uint64_t v75 = v12->u32[3];
            uint64_t v12 = (int8x16_t *)((char *)v12 + 8);
          }
          while (v73 >= (v75 | (unint64_t)(v74 << 32)));
        }
        else
        {
          char v76 = (int8x16_t *)&v12->u64[1];
          do
          {
            uint64_t v12 = v76;
            if (v76 >= a2) {
              break;
            }
            unint64_t v77 = v76->u32[1] | ((unint64_t)v76->u32[0] << 32);
            char v76 = (int8x16_t *)((char *)v76 + 8);
          }
          while (v73 >= v77);
        }
        uint64_t v78 = a2;
        if (v12 < a2)
        {
          uint64_t v78 = a2;
          do
          {
            uint64_t v79 = v78[-1].u32[2];
            uint64_t v80 = v78[-1].u32[3];
            uint64_t v78 = (int8x16_t *)((char *)v78 - 8);
          }
          while (v73 < (v80 | (unint64_t)(v79 << 32)));
        }
        while (v12 < v78)
        {
          uint64_t v81 = v12->i64[0];
          v12->i64[0] = v78->i64[0];
          v78->i64[0] = v81;
          do
          {
            uint64_t v82 = v12->u32[2];
            uint64_t v83 = v12->u32[3];
            uint64_t v12 = (int8x16_t *)((char *)v12 + 8);
          }
          while (v73 >= (v83 | (unint64_t)(v82 << 32)));
          do
          {
            uint64_t v84 = v78[-1].u32[2];
            uint64_t v85 = v78[-1].u32[3];
            uint64_t v78 = (int8x16_t *)((char *)v78 - 8);
          }
          while (v73 < (v85 | (unint64_t)(v84 << 32)));
        }
        uint64_t v86 = &v12[-1].i64[1];
        BOOL v5 = &v12[-1].u64[1] >= (unint64_t *)a1;
        BOOL v6 = &v12[-1].u64[1] == (unint64_t *)a1;
        if (&v12[-1].u64[1] != (unint64_t *)a1) {
          a1->i64[0] = *v86;
        }
        a5 = 0;
        uint64_t *v86 = v37;
      }
      unint64_t v18 = &v12->u32[2 * v15 + 1];
      unint64_t v19 = *v18 | ((unint64_t)*v16 << 32);
      if (v19 >= (v12->u32[1] | ((unint64_t)v12->u32[0] << 32)))
      {
        if (v17 < v19)
        {
          uint64_t v24 = *(void *)v16;
          *(void *)unint64_t v16 = a2[-1].i64[1];
          a2[-1].i64[1] = v24;
          if ((*v18 | ((unint64_t)*v16 << 32)) < (v12->u32[1] | ((unint64_t)v12->u32[0] << 32)))
          {
            uint64_t v25 = v12->i64[0];
            v12->i64[0] = *(void *)v16;
            *(void *)unint64_t v16 = v25;
          }
        }
      }
      else
      {
        uint64_t v20 = v12->i64[0];
        if (v17 >= v19)
        {
          v12->i64[0] = *(void *)v16;
          *(void *)unint64_t v16 = v20;
          if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) >= __ROR8__(v20, 32)) {
            goto LABEL_23;
          }
          *(void *)unint64_t v16 = a2[-1].i64[1];
        }
        else
        {
          v12->i64[0] = a2[-1].i64[1];
        }
        a2[-1].i64[1] = v20;
      }
LABEL_23:
      uint64_t v28 = &v12->i8[8 * v15];
      unsigned int v30 = *((_DWORD *)v28 - 2);
      unint64_t v29 = v28 - 8;
      std::string v31 = (unsigned int *)(v29 + 4);
      unint64_t v32 = *((unsigned int *)v29 + 1) | ((unint64_t)v30 << 32);
      unint64_t v33 = a2[-1].u32[1] | ((unint64_t)a2[-1].u32[0] << 32);
      if (v32 >= (v12->u32[3] | ((unint64_t)v12->u32[2] << 32)))
      {
        if (v33 < v32)
        {
          uint64_t v35 = *(void *)v29;
          *(void *)unint64_t v29 = a2[-1].i64[0];
          a2[-1].i64[0] = v35;
          if ((*v31 | ((unint64_t)*(unsigned int *)v29 << 32)) < (v12->u32[3] | ((unint64_t)v12->u32[2] << 32)))
          {
            uint64_t v36 = v12->i64[1];
            v12->i64[1] = *(void *)v29;
            *(void *)unint64_t v29 = v36;
          }
        }
      }
      else
      {
        uint64_t v34 = v12->i64[1];
        if (v33 >= v32)
        {
          v12->i64[1] = *(void *)v29;
          *(void *)unint64_t v29 = v34;
          if ((a2[-1].u32[1] | ((unint64_t)a2[-1].u32[0] << 32)) >= __ROR8__(v34, 32)) {
            goto LABEL_37;
          }
          *(void *)unint64_t v29 = a2[-1].i64[0];
        }
        else
        {
          v12->i64[1] = a2[-1].i64[0];
        }
        a2[-1].i64[0] = v34;
      }
LABEL_37:
      unint64_t v38 = &v12->i8[8 * v15];
      unsigned int v40 = *((_DWORD *)v38 + 2);
      int v39 = (unsigned int *)(v38 + 8);
      uint64_t v41 = v39 + 1;
      unint64_t v42 = v39[1] | ((unint64_t)v40 << 32);
      unint64_t v43 = a2[-2].u32[3] | ((unint64_t)a2[-2].u32[2] << 32);
      if (v42 >= (v12[1].u32[1] | ((unint64_t)v12[1].u32[0] << 32)))
      {
        if (v43 < v42)
        {
          uint64_t v45 = *(void *)v39;
          *(void *)int v39 = a2[-2].i64[1];
          a2[-2].i64[1] = v45;
          if ((*v41 | ((unint64_t)*v39 << 32)) < (v12[1].u32[1] | ((unint64_t)v12[1].u32[0] << 32)))
          {
            uint64_t v46 = v12[1].i64[0];
            v12[1].i64[0] = *(void *)v39;
            *(void *)int v39 = v46;
          }
        }
      }
      else
      {
        uint64_t v44 = v12[1].i64[0];
        if (v43 >= v42)
        {
          v12[1].i64[0] = *(void *)v39;
          *(void *)int v39 = v44;
          if ((a2[-2].u32[3] | ((unint64_t)a2[-2].u32[2] << 32)) >= __ROR8__(v44, 32)) {
            goto LABEL_46;
          }
          *(void *)int v39 = a2[-2].i64[1];
        }
        else
        {
          v12[1].i64[0] = a2[-2].i64[1];
        }
        a2[-2].i64[1] = v44;
      }
LABEL_46:
      unint64_t v47 = *v18 | ((unint64_t)*v16 << 32);
      unint64_t v48 = *v31 | ((unint64_t)*(unsigned int *)v29 << 32);
      unint64_t v49 = *v41 | ((unint64_t)*v39 << 32);
      if (v47 >= v48)
      {
        uint64_t v50 = *(void *)v16;
        if (v49 < v47)
        {
          uint64_t v51 = *(void *)v39;
          *(void *)unint64_t v16 = *(void *)v39;
          *(void *)int v39 = v50;
          uint64_t v50 = v51;
          if ((*v18 | (unint64_t)(v51 << 32)) < v48)
          {
            uint64_t v52 = *(void *)v29;
            *(void *)unint64_t v29 = v51;
            *(void *)unint64_t v16 = v52;
LABEL_54:
            uint64_t v50 = v52;
          }
        }
      }
      else
      {
        uint64_t v50 = *(void *)v29;
        if (v49 < v47)
        {
          *(void *)unint64_t v29 = *(void *)v39;
          *(void *)int v39 = v50;
          uint64_t v50 = *(void *)v16;
          goto LABEL_55;
        }
        *(void *)unint64_t v29 = *(void *)v16;
        *(void *)unint64_t v16 = v50;
        if (v49 < __ROR8__(v50, 32))
        {
          uint64_t v52 = *(void *)v39;
          *(void *)unint64_t v16 = *(void *)v39;
          *(void *)int v39 = v50;
          goto LABEL_54;
        }
      }
LABEL_55:
      uint64_t v53 = v12->i64[0];
      v12->i64[0] = v50;
      *(void *)unint64_t v16 = v53;
      --a4;
      if ((a5 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_33:
      uint64_t v37 = v12->i64[0];
LABEL_57:
      uint64_t v54 = 0;
      unint64_t v55 = __ROR8__(v37, 32);
      do
      {
        unint64_t v56 = v12->u32[v54 + 3] | ((unint64_t)v12->u32[v54 + 2] << 32);
        v54 += 2;
      }
      while (v56 < v55);
      uint64_t v57 = &v12->i8[v54 * 4];
      long long v58 = a2;
      if (v54 == 2)
      {
        long long v58 = a2;
        do
        {
          if (v57 >= (char *)v58) {
            break;
          }
          uint64_t v61 = v58[-1].u32[2];
          uint64_t v62 = v58[-1].u32[3];
          long long v58 = (int8x16_t *)((char *)v58 - 8);
        }
        while ((v62 | (unint64_t)(v61 << 32)) >= v55);
      }
      else
      {
        do
        {
          uint64_t v59 = v58[-1].u32[2];
          uint64_t v60 = v58[-1].u32[3];
          long long v58 = (int8x16_t *)((char *)v58 - 8);
        }
        while ((v60 | (unint64_t)(v59 << 32)) >= v55);
      }
      if (v57 >= (char *)v58)
      {
        char v70 = v57 - 8;
        if (v57 - 8 == (char *)v12) {
          goto LABEL_75;
        }
LABEL_74:
        v12->i64[0] = *(void *)v70;
        goto LABEL_75;
      }
      unint64_t v63 = (unint64_t)v57;
      unint64_t v64 = (uint64_t *)v58;
      do
      {
        uint64_t v65 = *(void *)v63;
        *(void *)unint64_t v63 = *v64;
        *unint64_t v64 = v65;
        do
        {
          uint64_t v66 = *(unsigned int *)(v63 + 8);
          uint64_t v67 = *(unsigned int *)(v63 + 12);
          v63 += 8;
        }
        while ((v67 | (unint64_t)(v66 << 32)) < v55);
        do
        {
          uint64_t v68 = *((unsigned int *)v64 - 2);
          uint64_t v69 = *((unsigned int *)v64-- - 1);
        }
        while ((v69 | (unint64_t)(v68 << 32)) >= v55);
      }
      while (v63 < (unint64_t)v64);
      char v70 = (char *)(v63 - 8);
      if ((int8x16_t *)(v63 - 8) != v12) {
        goto LABEL_74;
      }
LABEL_75:
      *(void *)char v70 = v37;
      if (v57 < (char *)v58) {
        goto LABEL_78;
      }
      BOOL v71 = sub_90EEF4(v12, (int8x16_t *)v70);
      uint64_t v12 = (int8x16_t *)(v70 + 8);
      if (sub_90EEF4((int8x16_t *)(v70 + 8), a2)) {
        break;
      }
      if (!v71)
      {
LABEL_78:
        sub_90E5CC(a1, v70, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v12 = (int8x16_t *)(v70 + 8);
      }
    }
    a2 = (int8x16_t *)v70;
    if (!v71) {
      continue;
    }
    return result;
  }
}

BOOL sub_90EEF4(int8x16_t *a1, int8x16_t *a2)
{
  switch(((char *)a2 - (char *)a1) >> 3)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) >= (a1->u32[1] | ((unint64_t)a1->u32[0] << 32))) {
        return 1;
      }
      uint64_t v3 = a1->i64[0];
      goto LABEL_7;
    case 3:
      unint64_t v4 = a1->u32[3] | ((unint64_t)a1->u32[2] << 32);
      unint64_t v5 = a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32);
      if (v4 >= (a1->u32[1] | ((unint64_t)a1->u32[0] << 32)))
      {
        if (v5 < v4)
        {
          uint64_t v11 = a1->i64[1];
          a1->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v11;
          if ((a1->u32[3] | ((unint64_t)a1->u32[2] << 32)) < (a1->u32[1] | ((unint64_t)a1->u32[0] << 32)))
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
            return 1;
          }
        }
      }
      else
      {
        uint64_t v3 = a1->i64[0];
        if (v5 < v4)
        {
LABEL_7:
          a1->i64[0] = a2[-1].i64[1];
          a2[-1].i64[1] = v3;
          return 1;
        }
        a1->i64[0] = a1->i64[1];
        a1->i64[1] = v3;
        if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) < __ROR8__(v3, 32))
        {
          a1->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v3;
          return 1;
        }
      }
      return 1;
    case 4:
      sub_2A9374((unsigned int *)a1, &a1->u32[2], (unsigned int *)&a1[1], &a2[-1].u32[2]);
      return 1;
    case 5:
      sub_2A94B0((unsigned int *)a1, &a1->u32[2], (unsigned int *)&a1[1], &a1[1].u32[2], &a2[-1].u32[2]);
      return 1;
    default:
      BOOL v6 = a1 + 1;
      unint64_t v7 = a1->u32[3] | ((unint64_t)a1->u32[2] << 32);
      unint64_t v8 = a1->u32[1] | ((unint64_t)a1->u32[0] << 32);
      unint64_t v9 = a1[1].u32[1] | ((unint64_t)a1[1].u32[0] << 32);
      if (v7 >= v8)
      {
        if (v9 < v7)
        {
          uint64_t v13 = a1->i64[1];
          uint64_t v12 = a1[1].i64[0];
          a1->i64[1] = v12;
          a1[1].i64[0] = v13;
          if (__ROR8__(v12, 32) < v8)
          {
            uint64_t v14 = a1->i64[0];
            a1->i64[0] = v12;
            a1->i64[1] = v14;
          }
        }
      }
      else
      {
        uint64_t v10 = a1->i64[0];
        if (v9 >= v7)
        {
          a1->i64[0] = a1->i64[1];
          a1->i64[1] = v10;
          if (v9 >= __ROR8__(v10, 32)) {
            goto LABEL_25;
          }
          a1->i64[1] = a1[1].i64[0];
        }
        else
        {
          a1->i64[0] = a1[1].i64[0];
        }
        a1[1].i64[0] = v10;
      }
LABEL_25:
      unint64_t v15 = &a1[1].u32[2];
      if (&a1[1].u64[1] == (unint64_t *)a2) {
        return 1;
      }
      uint64_t v16 = 0;
      int v17 = 0;
      break;
  }
  while ((v15[1] | ((unint64_t)*v15 << 32)) >= (v6->u32[1] | ((unint64_t)v6->u32[0] << 32)))
  {
LABEL_34:
    BOOL v6 = (int8x16_t *)v15;
    v16 += 8;
    v15 += 2;
    if (v15 == (unsigned int *)a2) {
      return 1;
    }
  }
  uint64_t v18 = *(void *)v15;
  unint64_t v19 = __ROR8__(*(void *)v15, 32);
  uint64_t v20 = v16;
  do
  {
    *(uint64_t *)((char *)&a1[1].i64[1] + v20) = *(uint64_t *)((char *)a1[1].i64 + v20);
    if (v20 == -16)
    {
      a1->i64[0] = v18;
      if (++v17 != 8) {
        goto LABEL_34;
      }
      return v15 + 2 == (unsigned int *)a2;
    }
    unint64_t v21 = *(unsigned int *)((char *)&a1->u32[3] + v20) | ((unint64_t)*(unsigned int *)((char *)&a1->u32[2] + v20) << 32);
    v20 -= 8;
  }
  while (v19 < v21);
  *(uint64_t *)((char *)&a1[1].i64[1] + v20) = v18;
  if (++v17 != 8) {
    goto LABEL_34;
  }
  return v15 + 2 == (unsigned int *)a2;
}

char *sub_90F1E4(unint64_t *a1, void *a2, void *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = v7 >> 3;
  unint64_t v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)unint64_t v9 = *a3;
      a1[1] = (unint64_t)(v9 + 8);
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    uint64_t v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      unint64_t v19 = (void *)a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      unint64_t v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 8;
      if (v5 > v16) {
        unint64_t v16 = a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x58)
      {
        unint64_t v19 = (void *)a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        unint64_t v19 = (void *)a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v13 = (uint64_t *)((char *)v13 + v21);
          unint64_t v19 = (void *)(v5 + v21);
          std::string v22 = (_OWORD *)(v5 + 16);
          uint64_t v23 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            *std::string v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        uint64_t v56 = *v13++;
        *v19++ = v56;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = (unint64_t)v19;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    *(void *)unint64_t v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v26 >> 61) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 2 > v26) {
    unint64_t v26 = v28 >> 2;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 61) {
      sub_188D718();
    }
    unsigned int v30 = (char *)operator new(8 * v29);
    std::string v31 = &v30[8 * v8];
    unint64_t v32 = &v30[8 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    unsigned int v30 = 0;
    std::string v31 = (char *)(8 * v8);
    unint64_t v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((void *)v6 == a2) {
      unint64_t v53 = 1;
    }
    else {
      unint64_t v53 = v7 >> 2;
    }
    if (v53 >> 61) {
      sub_188D718();
    }
    uint64_t v54 = (char *)operator new(8 * v53);
    std::string v31 = &v54[8 * (v53 >> 2)];
    unint64_t v32 = &v54[8 * v53];
    if (v30)
    {
      unint64_t v55 = &v54[8 * v53];
      operator delete(v30);
      unint64_t v32 = v55;
      uint64_t v34 = (char *)*a1;
      *(void *)std::string v31 = *a3;
      uint64_t v35 = v31 + 8;
      uint64_t v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
LABEL_28:
  uint64_t v34 = (char *)v6;
  *(void *)std::string v31 = *a3;
  uint64_t v35 = v31 + 8;
  uint64_t v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    uint64_t v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v38 = v37 - v34 - 8;
    int v39 = v9;
    uint64_t v36 = v31;
    if (v38 < 0x58) {
      goto LABEL_59;
    }
    int v39 = v9;
    uint64_t v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 3) + 1;
    uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    int v39 = &v9[-v41];
    uint64_t v36 = &v31[-v41];
    unint64_t v42 = v31 - 16;
    unint64_t v43 = (long long *)(v6 + 8 * v8 - 16);
    uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)unint64_t v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        uint64_t v46 = *((void *)v39 - 1);
        v39 -= 8;
        *((void *)v36 - 1) = v46;
        v36 -= 8;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  unint64_t v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    unint64_t v49 = v9;
    size_t v50 = v47 - v9;
    uint64_t v51 = v32;
    memmove(v35, v49, v50);
    unint64_t v32 = v51;
  }
  uint64_t v52 = (void *)*a1;
  *a1 = (unint64_t)v36;
  a1[1] = (unint64_t)&v35[v48];
  a1[2] = (unint64_t)v32;
  if (v52) {
    operator delete(v52);
  }
  return v31;
}

void sub_90F53C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

double sub_90F554()
{
  byte_25D2937 = 1;
  word_25D2920 = 65;
  byte_25D294F = 1;
  word_25D2938 = 65;
  byte_25D2967 = 6;
  strcpy((char *)&dword_25D2950, "{Mode}");
  byte_25D297F = 11;
  strcpy((char *)&xmmword_25D2968, "{Direction}");
  byte_25D2997 = 6;
  strcpy((char *)&xmmword_25D2980, "{Line}");
  byte_25D29AF = 12;
  strcpy((char *)&qword_25D2998, "{LineNumber}");
  strcpy(&byte_25D29C7, "\n{Headsign1}");
  strcpy((char *)&xmmword_25D29B0, "{Headsign}");
  byte_25D29DF = 11;
  byte_25D29F7 = 11;
  strcpy((char *)&qword_25D29E0, "{Headsign2}");
  byte_25D2A0F = 11;
  strcpy((char *)&qword_25D29F8, "{Headsign3}");
  byte_25D2A27 = 11;
  strcpy((char *)&qword_25D2A10, "{Headsign4}");
  byte_25D2A3F = 11;
  strcpy((char *)&qword_25D2A28, "{Headsign5}");
  byte_25D2A57 = 6;
  strcpy((char *)&dword_25D2A40, "{Stop}");
  byte_25D2A6F = 14;
  strcpy((char *)&qword_25D2A58, "{PreviousStop}");
  byte_25D2A87 = 8;
  strcpy((char *)&xmmword_25D2A70, "{System}");
  byte_25D2A9F = 15;
  strcpy((char *)&qword_25D2A88, "{VehicleNumber}");
  byte_25D2AB7 = 17;
  strcpy((char *)&xmmword_25D2AA0, "{AccessPointExit}");
  strcpy(&byte_25D2ACF, "\n{nextBoardStation}");
  strcpy((char *)&qword_25D2AB8, "{Platform}");
  byte_25D2AE7 = 18;
  qword_25D2AE8 = 0;
  unk_25D2AF0 = 0;
  qword_25D2AF8 = 0;
  byte_25D2B17 = 1;
  word_25D2B00 = 32;
  qword_25D2B18 = (uint64_t)operator new(0x20uLL);
  xmmword_25D2B20 = xmmword_20B8890;
  strcpy((char *)qword_25D2B18, "LeaveStop_Loc_Comma_Separator");
  byte_25D2B47 = 5;
  dword_25D2B30 = -1028144608;
  word_25D2B34 = 160;
  byte_25D2B5F = 2;
  word_25D2B48 = -24382;
  byte_25D2B4A = 0;
  byte_25D2B77 = 4;
  dword_25D2B60 = 548913696;
  byte_25D2B64 = 0;
  byte_25D2B8F = 15;
  strcpy((char *)&qword_25D2B78 + 7, "\xB7 {/s:s}");
  strcpy((char *)&qword_25D2B78, "{s:s} ·");
  byte_25D2BA7 = 6;
  strcpy((char *)&dword_25D2B90, "NoType");
  byte_25D2BBF = 14;
  strcpy((char *)&qword_25D2BA8, "{WalkDistance}");
  strcpy(&byte_25D2BD7, "\n{OneMinute}");
  strcpy((char *)&qword_25D2BC0, "{WalkTime}");
  byte_25D2BEF = 11;
  byte_25D2C07 = 14;
  strcpy((char *)&qword_25D2BF0, "{StepDuration}");
  byte_25D2C1F = 15;
  strcpy((char *)&qword_25D2C08, "{TripFrequency}");
  byte_25D2C37 = 11;
  strcpy((char *)&qword_25D2C20, "{BoardTime}");
  byte_25D2C4F = 12;
  strcpy((char *)&qword_25D2C38, "{AlightTime}");
  byte_25D2C67 = 21;
  strcpy((char *)&xmmword_25D2C50, "{FutureTimestampList}");
  byte_25D2C7F = 15;
  strcpy((char *)&qword_25D2C68, "{DepartureTime}");
  byte_25D2C97 = 13;
  strcpy((char *)&qword_25D2C80, "{ArrivalTime}");
  byte_25D2CAF = 19;
  strcpy((char *)&xmmword_25D2C98, "{TotalWalkDistance}");
  byte_25D2CC7 = 14;
  strcpy((char *)&qword_25D2CB0, "{TripDuration}");
  byte_25D2CDF = 11;
  strcpy((char *)&qword_25D2CC8, "{DayOfWeek}");
  byte_25D2CF7 = 6;
  strcpy((char *)&dword_25D2CE0, "{Date}");
  byte_25D2D0F = 16;
  strcpy((char *)&xmmword_25D2CF8, "{OutTheDoorTime}");
  qword_25D2D10 = (uint64_t)operator new(0x20uLL);
  unk_25D2D18 = xmmword_20B91A0;
  strcpy((char *)qword_25D2D10, "{FirstVehicleDepartureTime}");
  byte_25D2D3F = 18;
  strcpy((char *)&xmmword_25D2D28, "{RouteArrivalTime}");
  strcpy(&byte_25D2D57, "\n{IC_Artwork}");
  strcpy((char *)&qword_25D2D40, "{BaseFare}");
  byte_25D2D6F = 12;
  byte_25D2D87 = 11;
  strcpy((char *)&qword_25D2D70, "{RT_Symbol}");
  byte_25D2D9F = 12;
  strcpy((char *)&qword_25D2D88, "{TotalPrice}");
  byte_25D2DB7 = 13;
  strcpy((char *)&qword_25D2DA0, "{CheckInTime}");
  byte_25D2DCF = 19;
  strcpy((char *)&xmmword_25D2DB8, "{LiveDepartureTime}");
  strcpy(&byte_25D2DE7, "\n{LegDuration}");
  strcpy((char *)&qword_25D2DD0, "{TimeList}");
  byte_25D2DFF = 13;
  byte_25D2E17 = 15;
  strcpy((char *)&qword_25D2E00, "{CountdownList}");
  byte_25D2E2F = 3;
  byte_25D2E1A = 125;
  word_25D2E18 = 25723;
  byte_25D2E1B = 0;
  strcpy(&byte_25D2E47, "\t{AccessPointArt}");
  strcpy((char *)&qword_25D2E30, "{LineArt}");
  byte_25D2E5F = 16;
  byte_25D2E77 = 11;
  strcpy((char *)&qword_25D2E60, "{SystemArt}");
  strcpy(&byte_25D2E8F, "\n{ServiceBeginTime}");
  strcpy((char *)&qword_25D2E78, "{CardName}");
  byte_25D2EA7 = 18;
  byte_25D2EBF = 16;
  strcpy((char *)&xmmword_25D2EA8, "{ServiceEndTime}");
  byte_25D2ED7 = 6;
  strcpy((char *)&dword_25D2EC0, "OnTime");
  byte_25D2EEF = 6;
  strcpy((char *)&dword_25D2ED8, "Delays");
  byte_25D2F07 = 1;
  word_25D2EF0 = 115;
  byte_25D2F1F = 2;
  strcpy((char *)&word_25D2F08, "cs");
  byte_25D2F37 = 1;
  word_25D2F20 = 112;
  byte_25D2F4F = 5;
  byte_25D2F3C = 101;
  dword_25D2F38 = 1852394591;
  byte_25D2F3D = 0;
  byte_25D2F67 = 7;
  strcpy((char *)&dword_25D2F50, "_System");
  strcpy(&byte_25D2F7F, "\n_VehicleNumber");
  strcpy((char *)&qword_25D2F68, "_Direction");
  byte_25D2F97 = 14;
  byte_25D2FAF = 12;
  strcpy((char *)&qword_25D2F98, "_To_Headsign");
  byte_25D2FC7 = 16;
  strcpy((char *)&xmmword_25D2FB0, "_Toward_Headsign");
  strcpy(&byte_25D2FDF, "\t_LineNumber");
  strcpy((char *)&qword_25D2FC8, "_Headsign");
  byte_25D2FF7 = 11;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25D30E0 = 0u;
  xmmword_25D30D0 = 0u;
  dword_25D30F0 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25D30D0, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25D30D0, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25D30D0, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25D30D0, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25D300F = 8;
  strcpy((char *)&qword_25D2FF8, "any_mode");
  byte_25D3027 = 7;
  strcpy((char *)&dword_25D3010, "cycling");
  byte_25D303F = 7;
  strcpy((char *)&dword_25D3028, "driving");
  byte_25D3057 = 7;
  strcpy((char *)&dword_25D3040, "walking");
  qword_25D3058 = 0;
  unk_25D3060 = 0;
  qword_25D3068 = 0;
  uint64_t v0 = (char *)operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25D3058 = (uint64_t)v0;
  unk_25D3060 = v0 + 9;
  qword_25D3068 = (uint64_t)(v0 + 9);
  qword_25D3070 = 0;
  qword_25D3078 = 0;
  unk_25D3080 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25D3078 = (uint64_t)(v1 + 9);
  unk_25D3080 = v1 + 9;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25D3070 = (uint64_t)v1;
  qword_25D3088 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25D3090 = xmmword_20B8890;
  strcpy((char *)qword_25D3088, "Board_List_System_Line_{Mode}");
  qword_25D30A0 = (uint64_t)operator new(0x28uLL);
  unk_25D30A8 = xmmword_20B8FD0;
  strcpy((char *)qword_25D30A0, "Places_Board_List_System_Line_{Mode}");
  qword_25D30B8 = (uint64_t)operator new(0x20uLL);
  unk_25D30C0 = xmmword_20B91B0;
  strcpy((char *)qword_25D30B8, "Places_Direction_To_Headsign");
  return *(double *)"tion_To_Headsign";
}

void sub_910220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if ((void)xmmword_25D30E0) {
    sub_20AC340((void **)xmmword_25D30E0);
  }
  unint64_t v38 = (void *)xmmword_25D30D0;
  *(void *)&xmmword_25D30D0 = 0;
  if (v38)
  {
    operator delete(v38);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a30 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a30 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a23 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a25);
  if ((a23 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a16 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a18);
  if ((a16 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

double sub_9102C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a4;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(void *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = a5;
  *(void *)&double result = 0x8000000080000000;
  *(void *)(a1 + 156) = 0x8000000080000000;
  *(_DWORD *)(a1 + 164) = 0;
  *(unsigned char *)(a1 + 168) = 0;
  return result;
}

uint64_t sub_9102FC(uint64_t a1, char **a2)
{
  return a1;
}

uint64_t sub_91033C(uint64_t a1, char **a2)
{
  return a1;
}

uint64_t sub_91037C(uint64_t a1, char **a2)
{
  return a1;
}

uint64_t *sub_9103D4(uint64_t *a1, unint64_t a2, int a3)
{
  unint64_t v6 = (int *)sub_369F8C(a1[3], a2, 0, "trip");
  uint64_t v7 = *(void *)((char *)v6 + *(unsigned __int16 *)((char *)v6 - *v6 + 6));
  int v8 = (int *)sub_369F8C(a1[3], a2, 0, "trip");
  unint64_t v9 = (unsigned __int16 *)((char *)v8 - *v8);
  if (*v9 >= 9u)
  {
    uint64_t v10 = v9[4];
    if (v10)
    {
      if (a3 + 1 < *(unsigned int *)((char *)v8 + v10))
      {
        int v11 = sub_369B60(a1[3], a2, 0);
        uint64_t v12 = &v11[-*(int *)v11];
        if (*(unsigned __int16 *)v12 < 5u)
        {
          uint64_t v13 = 0;
        }
        else
        {
          uint64_t v13 = *((unsigned __int16 *)v12 + 2);
          if (*((_WORD *)v12 + 2)) {
            v13 += (uint64_t)&v11[*(unsigned int *)&v11[v13]];
          }
        }
        uint64_t v14 = (a2 >> 30) & 0x3FFFFFFFCLL;
        unint64_t v15 = (int *)(v13 + v14 + 4 + *(unsigned int *)(v13 + v14 + 4));
        unint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
        if (*v16 >= 0xDu && (uint64_t v17 = v16[6]) != 0) {
          int v18 = *(int *)((char *)v15 + v17);
        }
        else {
          int v18 = -1;
        }
        uint64_t v19 = *(void *)&v11[24 * (v18 + a3)
                            + 4
                            + *((unsigned __int16 *)v12 + 3)
                            + *(unsigned int *)&v11[*((unsigned __int16 *)v12 + 3)]];
        uint64_t v20 = sub_369B60(a1[3], a2, 0);
        uint64_t v21 = &v20[-*(int *)v20];
        if (*(unsigned __int16 *)v21 < 5u)
        {
          uint64_t v22 = 0;
        }
        else
        {
          uint64_t v22 = *((unsigned __int16 *)v21 + 2);
          if (*((_WORD *)v21 + 2)) {
            v22 += (uint64_t)&v20[*(unsigned int *)&v20[v22]];
          }
        }
        uint64_t v23 = (int *)(v22 + v14 + 4 + *(unsigned int *)(v22 + v14 + 4));
        uint64_t v24 = (unsigned __int16 *)((char *)v23 - *v23);
        if (*v24 >= 0xDu && (uint64_t v25 = v24[6]) != 0) {
          int v26 = *(int *)((char *)v23 + v25);
        }
        else {
          int v26 = -1;
        }
        uint64_t v27 = *(void *)&v20[24 * (v26 + a3 + 1)
                            + 4
                            + *((unsigned __int16 *)v21 + 3)
                            + *(unsigned int *)&v20[*((unsigned __int16 *)v21 + 3)]];
        unint64_t v29 = (char *)a1[5];
        unint64_t v28 = a1[6];
        if ((unint64_t)v29 < v28)
        {
          *(void *)unint64_t v29 = v19;
          uint64_t v30 = (uint64_t)(v29 + 8);
LABEL_42:
          a1[5] = v30;
          size_t v50 = (char *)a1[14];
          unint64_t v49 = a1[15];
          if ((unint64_t)v50 < v49)
          {
            *(void *)size_t v50 = v7;
            *((void *)v50 + 1) = v19;
            uint64_t v51 = v50 + 24;
            *((void *)v50 + 2) = v27;
            goto LABEL_55;
          }
          uint64_t v52 = (char *)a1[13];
          unint64_t v53 = 0xAAAAAAAAAAAAAAABLL * ((v50 - v52) >> 3) + 1;
          if (v53 > 0xAAAAAAAAAAAAAAALL) {
            sub_2E00();
          }
          unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - (void)v52) >> 3);
          if (2 * v54 > v53) {
            unint64_t v53 = 2 * v54;
          }
          if (v54 >= 0x555555555555555) {
            unint64_t v55 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v55 = v53;
          }
          if (v55 <= 0xAAAAAAAAAAAAAAALL)
          {
            uint64_t v56 = 24 * v55;
            uint64_t v57 = (char *)operator new(24 * v55);
            long long v58 = &v57[8 * ((v50 - v52) >> 3)];
            uint64_t v59 = &v57[v56];
            *(void *)long long v58 = v7;
            *((void *)v58 + 1) = v19;
            *((void *)v58 + 2) = v27;
            uint64_t v51 = v58 + 24;
            if (v50 == v52)
            {
              a1[13] = (uint64_t)v58;
              a1[14] = (uint64_t)v51;
              a1[15] = (uint64_t)v59;
              if (!v52) {
                goto LABEL_55;
              }
            }
            else
            {
              do
              {
                long long v60 = *(_OWORD *)(v50 - 24);
                uint64_t v61 = v58 - 24;
                *((void *)v58 - 1) = *((void *)v50 - 1);
                *(_OWORD *)(v58 - 24) = v60;
                v50 -= 24;
                v58 -= 24;
              }
              while (v50 != v52);
              a1[13] = (uint64_t)v61;
              a1[14] = (uint64_t)v51;
              a1[15] = (uint64_t)v59;
              if (!v52) {
                goto LABEL_55;
              }
            }
            operator delete(v52);
LABEL_55:
            a1[14] = (uint64_t)v51;
            return a1;
          }
LABEL_59:
          sub_188D718();
        }
        std::string v31 = (char *)a1[4];
        uint64_t v32 = (v29 - v31) >> 3;
        unint64_t v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v34 = v28 - (void)v31;
        if (v34 >> 2 > v33) {
          unint64_t v33 = v34 >> 2;
        }
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v35 = v33;
        }
        if (v35)
        {
          if (v35 >> 61) {
            goto LABEL_59;
          }
          uint64_t v36 = (char *)operator new(8 * v35);
          uint64_t v37 = &v36[8 * v32];
          unint64_t v38 = &v36[8 * v35];
          *(void *)uint64_t v37 = v19;
          uint64_t v30 = (uint64_t)(v37 + 8);
          int v39 = (char *)(v29 - v31);
          if (v29 == v31) {
            goto LABEL_40;
          }
        }
        else
        {
          uint64_t v36 = 0;
          uint64_t v37 = (char *)(8 * v32);
          unint64_t v38 = 0;
          *(void *)(8 * v32) = v19;
          uint64_t v30 = 8 * v32 + 8;
          int v39 = (char *)(v29 - v31);
          if (v29 == v31)
          {
LABEL_40:
            a1[4] = (uint64_t)v37;
            a1[5] = v30;
            a1[6] = (uint64_t)v38;
            if (v29) {
              operator delete(v29);
            }
            goto LABEL_42;
          }
        }
        unint64_t v40 = (unint64_t)(v39 - 8);
        if (v40 < 0x58) {
          goto LABEL_64;
        }
        if ((unint64_t)(v31 - v36) < 0x20) {
          goto LABEL_64;
        }
        uint64_t v41 = (v40 >> 3) + 1;
        uint64_t v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v43 = &v29[-v42];
        v37 -= v42;
        uint64_t v44 = &v36[8 * v32 - 16];
        long long v45 = v29 - 16;
        uint64_t v46 = v41 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v47 = *(_OWORD *)v45;
          *((_OWORD *)v44 - 1) = *((_OWORD *)v45 - 1);
          *(_OWORD *)uint64_t v44 = v47;
          v44 -= 32;
          v45 -= 32;
          v46 -= 4;
        }
        while (v46);
        unint64_t v29 = v43;
        if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_64:
          do
          {
            uint64_t v48 = *((void *)v29 - 1);
            v29 -= 8;
            *((void *)v37 - 1) = v48;
            v37 -= 8;
          }
          while (v29 != v31);
        }
        unint64_t v29 = (char *)a1[4];
        goto LABEL_40;
      }
    }
  }
  return a1;
}

void sub_910800(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  if (*(void *)(a1[1] + 11688))
  {
    uint64_t v42 = 0;
    *(void *)unint64_t v43 = 0;
    uint64_t v44 = 0;
    int v5 = (unsigned char *)a1[16];
    char v4 = (unsigned char *)a1[17];
    uint64_t v6 = v4 - v5;
    if (v4 != v5)
    {
      if (v6 < 0) {
        sub_2E00();
      }
      uint64_t v7 = (char *)operator new(v4 - v5);
      int v8 = &v7[8 * (v6 >> 3)];
      uint64_t v42 = v7;
      uint64_t v44 = v8;
      memcpy(v7, v5, v6 - 3);
      *(void *)unint64_t v43 = v8;
    }
    unint64_t v9 = (void *)a1[10];
    for (uint64_t i = (void *)a1[11]; v9 != i; ++v9)
    {
      *(void *)&long long v45 = *v9;
      int v47 = 1;
      sub_910D54((uint64_t)a1, (uint64_t)&v45, (unint64_t *)&__p);
      sub_913EAC((uint64_t)&v42, *(uint64_t *)v43, (char *)__p, v41, (v41 - (unsigned char *)__p) >> 3);
      if (__p)
      {
        uint64_t v41 = (char *)__p;
        operator delete(__p);
      }
    }
    int v11 = (void *)a1[7];
    uint64_t v12 = (void *)a1[8];
    while (v11 != v12)
    {
      *(void *)&long long v45 = *v11;
      int v47 = 0;
      sub_910D54((uint64_t)a1, (uint64_t)&v45, (unint64_t *)&__p);
      sub_913EAC((uint64_t)&v42, *(uint64_t *)v43, (char *)__p, v41, (v41 - (unsigned char *)__p) >> 3);
      if (__p)
      {
        uint64_t v41 = (char *)__p;
        operator delete(__p);
      }
      ++v11;
    }
    uint64_t v13 = a1[13];
    for (uint64_t j = a1[14]; v13 != j; v13 += 24)
    {
      long long v45 = *(_OWORD *)v13;
      uint64_t v46 = *(void *)(v13 + 16);
      int v47 = 2;
      sub_910D54((uint64_t)a1, (uint64_t)&v45, (unint64_t *)&__p);
      sub_913EAC((uint64_t)&v42, *(uint64_t *)v43, (char *)__p, v41, (v41 - (unsigned char *)__p) >> 3);
      if (__p)
      {
        uint64_t v41 = (char *)__p;
        operator delete(__p);
      }
    }
    unint64_t v15 = 126 - 2 * __clz((uint64_t)(*(void *)v43 - (void)v42) >> 3);
    if (*(void **)v43 == v42) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = v15;
    }
    sub_9141E8((uint64_t)v42, *(int **)v43, (uint64_t)&v45, v16, 1);
    uint64_t v17 = v42;
    uint64_t v18 = *(void *)v43;
    if (v42 == *(void **)v43)
    {
      uint64_t v18 = (uint64_t)v42;
    }
    else
    {
      uint64_t v19 = (char *)v42 - 8;
      do
      {
        if (v19 + 16 == *(char **)v43) {
          goto LABEL_44;
        }
        int v20 = *((_DWORD *)v19 + 2);
        v19 += 8;
      }
      while (v20 != *((_DWORD *)v19 + 2) || v19[4] != v19[12]);
      uint64_t v22 = v19 + 16;
      if (v19 + 16 == *(char **)v43)
      {
        uint64_t v23 = v19 + 8;
        if (v19 + 8 == *(char **)v43) {
          goto LABEL_44;
        }
        goto LABEL_43;
      }
      do
      {
        if (*(_DWORD *)v19 != *(_DWORD *)v22 || v19[4] != v22[4])
        {
          char v25 = v22[4];
          *((_DWORD *)v19 + 2) = *(_DWORD *)v22;
          v19 += 8;
          v19[4] = v25;
        }
        v22 += 8;
      }
      while (v22 != (char *)v18);
      uint64_t v18 = *(void *)v43;
      uint64_t v23 = v19 + 8;
      if (v19 + 8 != *(char **)v43)
      {
LABEL_43:
        uint64_t v18 = (uint64_t)v23;
        *(void *)unint64_t v43 = v23;
      }
    }
LABEL_44:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    sub_9155E0(a2, (v18 - (uint64_t)v17) >> 3);
    int v26 = (unsigned int *)v42;
    uint64_t v27 = *(void *)v43;
    if (v42 != *(void **)v43)
    {
      unint64_t v28 = (_OWORD *)a2[1];
      do
      {
        unint64_t v29 = *v26;
        uint64_t v30 = *(void **)(a1[1] + 11688);
        if (*((unsigned char *)v26 + 4))
        {
          uint64_t v31 = v30[1];
          if (0x823EE08FB823EE09 * ((v30[2] - v31) >> 3) <= v29) {
            goto LABEL_64;
          }
        }
        else
        {
          uint64_t v31 = v30[4];
          if (0x823EE08FB823EE09 * ((v30[5] - v31) >> 3) <= v29) {
LABEL_64:
          }
            sub_66748();
        }
        sub_3623F8((uint64_t)&v45, v31 + 456 * v29);
        unint64_t v28 = (_OWORD *)(sub_9156F8(a2, v28, (uint64_t)&v45) + 456);
        sub_361164((uint64_t)&v45);
        v26 += 2;
      }
      while (v26 != (unsigned int *)v27);
    }
    sub_9111B0(a1, a2);
    if (*(unsigned char *)a1) {
      sub_365084((unint64_t *)a2);
    }
    uint64_t v32 = *a2;
    unint64_t v33 = (void *)a2[1];
    uint64_t v34 = (uint64_t)v33 - *a2;
    unint64_t v35 = 0x823EE08FB823EE09 * (v34 >> 3);
    if (v34 < 1)
    {
LABEL_57:
      int v39 = 0;
      unint64_t v36 = 0;
    }
    else
    {
      unint64_t v36 = 0x823EE08FB823EE09 * (v34 >> 3);
      while (1)
      {
        uint64_t v37 = operator new(456 * v36, &std::nothrow);
        if (v37) {
          break;
        }
        BOOL v38 = v36 > 1;
        v36 >>= 1;
        if (!v38) {
          goto LABEL_57;
        }
      }
      int v39 = v37;
    }
    sub_9164E4(v32, v33, v35, (uint64_t)v39, v36);
    if (v39) {
      operator delete(v39);
    }
    if (v42)
    {
      *(void *)unint64_t v43 = v42;
      operator delete(v42);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void sub_910C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (v16) {
    operator delete(v16);
  }
  sub_9022AC(v15);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_910D54(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  int v5 = (unsigned int *)(a1 + 156);
  if (*(_DWORD *)(a1 + 156) != 0x7FFFFFFF)
  {
    if (*(_DWORD *)(a1 + 160) == 0x7FFFFFFF) {
      int v5 = (unsigned int *)(a1 + 152);
    }
    unsigned int v6 = *v5;
    int v7 = *(_DWORD *)(a2 + 24);
    if (v7 != 2) {
      goto LABEL_3;
    }
LABEL_9:
    uint64_t v8 = *(void *)a2;
    uint64_t v9 = *(void *)(a1 + 8);
    *(void *)&long long v10 = 0xFFFFFFFF00000000;
    *((void *)&v10 + 1) = 0xFFFFFFFF00000000;
    long long v42 = *(_OWORD *)(a2 + 8);
    long long v43 = v10;
    unint64_t v40 = 0;
    uint64_t v41 = 0;
    int v39 = 0;
    sub_912588(v9, v42, 0, v6, v6, 1, v8, (uint64_t)&v43, (uint64_t)&v42, &v39);
    int v11 = v39;
    uint64_t v12 = v40;
    uint64_t v13 = v39;
    if (v39 == v40)
    {
LABEL_38:
      if (v13 != v40)
      {
        uint64_t v27 = v13 + 28;
        if (v13 + 28 == v40)
        {
          unint64_t v28 = v13;
        }
        else
        {
          unint64_t v28 = v13;
          do
          {
            unint64_t v30 = *((unsigned int *)v13 + 7);
            int v31 = v13[32];
            uint64_t v13 = v27;
            uint64_t v32 = *(void **)(*(void *)(a1 + 8) + 11688);
            if (v31)
            {
              uint64_t v33 = v32[1];
              if (0x823EE08FB823EE09 * ((v32[2] - v33) >> 3) <= v30) {
                goto LABEL_61;
              }
            }
            else
            {
              uint64_t v33 = v32[4];
              if (0x823EE08FB823EE09 * ((v32[5] - v33) >> 3) <= v30) {
                goto LABEL_61;
              }
            }
            uint64_t v34 = v33 + 456 * v30;
            uint64_t v35 = *(void *)(v34 + 424);
            uint64_t v36 = *(void *)(v34 + 432);
            while (v35 != v36)
            {
              if (*(unsigned char *)(v35 + 96))
              {
                uint64_t v37 = *(void **)(v35 + 16);
                BOOL v38 = *(void **)(v35 + 24);
                if (v37 != v38)
                {
                  while (*v37 != v8)
                  {
                    if (++v37 == v38)
                    {
                      uint64_t v37 = *(void **)(v35 + 24);
                      break;
                    }
                  }
                }
                if (v37 != v38)
                {
                  long long v29 = *(_OWORD *)v13;
                  *(_OWORD *)((char *)v28 + 12) = *(_OWORD *)(v13 + 12);
                  *unint64_t v28 = v29;
                  unint64_t v28 = (_OWORD *)((char *)v28 + 28);
                  break;
                }
              }
              v35 += 104;
            }
            uint64_t v27 = v13 + 28;
          }
          while (v13 + 28 != v12);
        }
        if (v28 != (_OWORD *)v12) {
          uint64_t v12 = (char *)v28;
        }
      }
    }
    else
    {
      uint64_t v14 = *(void **)(*(void *)(a1 + 8) + 11688);
      uint64_t v13 = v39;
      do
      {
        unint64_t v15 = *(unsigned int *)v13;
        if (v13[4])
        {
          uint64_t v16 = v14[1];
          if (0x823EE08FB823EE09 * ((v14[2] - v16) >> 3) <= v15) {
            goto LABEL_61;
          }
        }
        else
        {
          uint64_t v16 = v14[4];
          if (0x823EE08FB823EE09 * ((v14[5] - v16) >> 3) <= v15) {
LABEL_61:
          }
            sub_66748();
        }
        uint64_t v17 = v16 + 456 * v15;
        uint64_t v18 = *(void *)(v17 + 424);
        uint64_t v19 = *(void *)(v17 + 432);
        while (1)
        {
          if (v18 == v19) {
            goto LABEL_38;
          }
          if (*(unsigned char *)(v18 + 96))
          {
            int v20 = *(void **)(v18 + 16);
            uint64_t v21 = *(void **)(v18 + 24);
            if (v20 != v21)
            {
              while (*v20 != v8)
              {
                if (++v20 == v21)
                {
                  int v20 = *(void **)(v18 + 24);
                  break;
                }
              }
            }
            if (v20 != v21) {
              break;
            }
          }
          v18 += 104;
        }
        v13 += 28;
      }
      while (v13 != v40);
    }
    goto LABEL_30;
  }
  unsigned int v6 = *(_DWORD *)(a1 + 152);
  int v7 = *(_DWORD *)(a2 + 24);
  if (v7 == 2) {
    goto LABEL_9;
  }
LABEL_3:
  if (v7 == 1)
  {
    uint64_t v22 = *(void *)(a1 + 8);
    unint64_t v23 = *(void *)a2;
    unint64_t v40 = 0;
    uint64_t v41 = 0;
    int v39 = 0;
    *(void *)&long long v24 = 0xFFFFFFFF00000000;
    *((void *)&v24 + 1) = 0xFFFFFFFF00000000;
    long long v42 = v24;
    long long v43 = v24;
    sub_912588(v22, v23, 0, v6, v6, 0, 0xFFFFFFFF00000000, (uint64_t)&v43, (uint64_t)&v42, &v39);
  }
  else
  {
    if (v7)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      return;
    }
    sub_911E78(*(void *)(a1 + 8), *(void *)a2, 0, v6, v6, &v39);
  }
  int v11 = v39;
  uint64_t v12 = v40;
LABEL_30:
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (v12 != v11)
  {
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v12 - v11) >> 2)) >> 61) {
      sub_2E00();
    }
    char v25 = (char *)operator new(0x6DB6DB6DB6DB6DB8 * ((v12 - v11) >> 2));
    *a3 = (unint64_t)v25;
    a3[1] = (unint64_t)v25;
    a3[2] = (unint64_t)&v25[0x6DB6DB6DB6DB6DB8 * ((v12 - v11) >> 2)];
    int v26 = (char **)v11;
    do
    {
      int v39 = *v26;
      char v25 = sub_918CC4(a3, v25, (int *)&v39) + 8;
      int v26 = (char **)((char *)v26 + 28);
    }
    while (v26 != (char **)v12);
  }
  if (v11) {
    operator delete(v11);
  }
}

void sub_911164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_9111B0(uint64_t *a1, uint64_t *a2)
{
  char v4 = (void *)a1[4];
  int v5 = (void *)a1[5];
  *(_OWORD *)uint64_t v119 = 0u;
  *(_OWORD *)unint64_t v120 = 0u;
  int v121 = 1065353216;
  if (v4 == v5)
  {
    *(_OWORD *)int v116 = 0u;
    *(_OWORD *)int64_t v117 = 0u;
    int v118 = 1065353216;
    *(_OWORD *)uint64_t v113 = 0u;
    *(_OWORD *)unint64_t v114 = 0u;
    int v115 = 1065353216;
  }
  else
  {
    do
    {
      sub_8F6344((uint64_t)v119, v4, v4);
      ++v4;
    }
    while (v4 != v5);
    unsigned int v6 = v120[0];
    *(_OWORD *)int v116 = 0u;
    *(_OWORD *)int64_t v117 = 0u;
    int v118 = 1065353216;
    *(_OWORD *)uint64_t v113 = 0u;
    *(_OWORD *)unint64_t v114 = 0u;
    int v115 = 1065353216;
    if (v120[0])
    {
      do
      {
        int v7 = (int *)sub_498D5C(a1[2], v6[2], 0, "stop");
        uint64_t v8 = *(void **)((char *)v7 + *(unsigned __int16 *)((char *)v7 - *v7 + 10));
        uint64_t v132 = v8;
        if (v8) {
          BOOL v9 = (unint64_t)v8 > 0xFFFFFFFEFFFFFFFFLL;
        }
        else {
          BOOL v9 = 1;
        }
        if (!v9)
        {
          sub_918FB8((uint64_t)v116, &v132, &v132);
          long long v10 = (int *)sub_8ED3D4(a1[2], (unint64_t)v132, 0, "hall");
          *(void *)&long long v142 = *(void *)((char *)v10 + *(unsigned __int16 *)((char *)v10 - *v10 + 10));
          sub_919320((uint64_t)v113, &v142, &v142);
        }
        unsigned int v6 = (void *)*v6;
      }
      while (v6);
    }
  }
  uint64_t v11 = *a2;
  uint64_t v105 = a2[1];
  if (*a2 == v105) {
    goto LABEL_181;
  }
  while (2)
  {
    *(_OWORD *)unint64_t v110 = 0u;
    *(_OWORD *)uint64_t v111 = 0u;
    int v112 = 1065353216;
    uint64_t v12 = *(void **)(v11 + 424);
    uint64_t v13 = *(void **)(v11 + 432);
    uint64_t v14 = (uint64_t)v12;
    if (v12 == v13) {
      goto LABEL_135;
    }
    while (2)
    {
      BYTE8(v139) = *((unsigned char *)v12 + 96);
      if (!BYTE8(v139)) {
        goto LABEL_18;
      }
      sub_360E8C((uint64_t)&v132, (uint64_t)(v12 + 2));
      if (!BYTE8(v139)) {
        goto LABEL_18;
      }
      if (v132 == v133) {
        goto LABEL_121;
      }
      int v15 = *((_DWORD *)v12 + 2);
      if (v15 == 2)
      {
        if (v119[1])
        {
          uint64_t v57 = *v12;
          unint64_t v58 = __ROR8__(*v12, 32);
          unint64_t v59 = 0xC4CEB9FE1A85EC53
              * ((0xFF51AFD7ED558CCDLL * (v58 ^ (v58 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v58 ^ (v58 >> 33))) >> 33));
          unint64_t v60 = v59 ^ (v59 >> 33);
          uint8x8_t v61 = (uint8x8_t)vcnt_s8((int8x8_t)v119[1]);
          v61.i16[0] = vaddlv_u8(v61);
          if (v61.u32[0] > 1uLL)
          {
            unint64_t v62 = v60;
            if ((void *)v60 >= v119[1]) {
              unint64_t v62 = v60 % (unint64_t)v119[1];
            }
          }
          else
          {
            unint64_t v62 = v60 & ((unint64_t)v119[1] - 1);
          }
          uint64_t v69 = (uint64_t **)*((void *)v119[0] + v62);
          if (v69)
          {
            char v70 = *v69;
            if (v70)
            {
              if (v61.u32[0] < 2uLL)
              {
                while (1)
                {
                  unint64_t v74 = v70[1];
                  if (v60 == v74)
                  {
                    if (*((_DWORD *)v70 + 4) == v57 && *((_DWORD *)v70 + 5) == HIDWORD(v57)) {
                      goto LABEL_27;
                    }
                  }
                  else if ((v74 & ((unint64_t)v119[1] - 1)) != v62)
                  {
                    goto LABEL_121;
                  }
                  char v70 = (uint64_t *)*v70;
                  if (!v70) {
                    goto LABEL_121;
                  }
                }
              }
              while (1)
              {
                unint64_t v72 = v70[1];
                if (v60 == v72)
                {
                  if (*((_DWORD *)v70 + 4) == v57 && *((_DWORD *)v70 + 5) == HIDWORD(v57)) {
                    goto LABEL_27;
                  }
                }
                else
                {
                  if ((void *)v72 >= v119[1]) {
                    v72 %= (unint64_t)v119[1];
                  }
                  if (v72 != v62) {
                    goto LABEL_121;
                  }
                }
                char v70 = (uint64_t *)*v70;
                if (!v70) {
                  goto LABEL_121;
                }
              }
            }
          }
        }
        goto LABEL_121;
      }
      if (v15 == 1)
      {
        if (v116[1])
        {
          uint64_t v51 = *v12;
          unint64_t v52 = __ROR8__(*v12, 32);
          unint64_t v53 = 0xC4CEB9FE1A85EC53
              * ((0xFF51AFD7ED558CCDLL * (v52 ^ (v52 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v52 ^ (v52 >> 33))) >> 33));
          unint64_t v54 = v53 ^ (v53 >> 33);
          uint8x8_t v55 = (uint8x8_t)vcnt_s8((int8x8_t)v116[1]);
          v55.i16[0] = vaddlv_u8(v55);
          if (v55.u32[0] > 1uLL)
          {
            unint64_t v56 = v54;
            if ((void *)v54 >= v116[1]) {
              unint64_t v56 = v54 % (unint64_t)v116[1];
            }
          }
          else
          {
            unint64_t v56 = v54 & ((unint64_t)v116[1] - 1);
          }
          unint64_t v63 = (uint64_t **)*((void *)v116[0] + v56);
          if (v63)
          {
            unint64_t v64 = *v63;
            if (v64)
            {
              if (v55.u32[0] < 2uLL)
              {
                while (1)
                {
                  unint64_t v68 = v64[1];
                  if (v54 == v68)
                  {
                    if (*((_DWORD *)v64 + 4) == v51 && *((_DWORD *)v64 + 5) == HIDWORD(v51)) {
                      goto LABEL_27;
                    }
                  }
                  else if ((v68 & ((unint64_t)v116[1] - 1)) != v56)
                  {
                    goto LABEL_121;
                  }
                  unint64_t v64 = (uint64_t *)*v64;
                  if (!v64) {
                    goto LABEL_121;
                  }
                }
              }
              while (1)
              {
                unint64_t v66 = v64[1];
                if (v54 == v66)
                {
                  BOOL v65 = *((_DWORD *)v64 + 4) == v51 && *((_DWORD *)v64 + 5) == HIDWORD(v51);
                  if (v65) {
                    goto LABEL_27;
                  }
                }
                else
                {
                  if ((void *)v66 >= v116[1]) {
                    v66 %= (unint64_t)v116[1];
                  }
                  if (v66 != v56) {
                    goto LABEL_121;
                  }
                }
                unint64_t v64 = (uint64_t *)*v64;
                if (!v64) {
                  goto LABEL_121;
                }
              }
            }
          }
        }
        goto LABEL_121;
      }
      if (v15) {
        goto LABEL_121;
      }
      *(void *)&long long v142 = *v12;
      uint64_t v16 = sub_36F918(v113, &v142);
      int v17 = BYTE8(v139);
      if (!v16) {
        goto LABEL_72;
      }
      if (!BYTE8(v139))
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_2439078;
      }
LABEL_27:
      uint64_t v18 = (void **)v132;
      uint64_t v109 = v133;
      if (v132 == v133)
      {
LABEL_121:
        if (*((void *)&v137 + 1))
        {
          uint64_t v138 = *((void *)&v137 + 1);
          operator delete(*((void **)&v137 + 1));
        }
        if (v135)
        {
          uint64_t v136 = v135;
          operator delete(v135);
        }
        if (v132)
        {
          long long v133 = (void **)v132;
          operator delete(v132);
        }
        goto LABEL_18;
      }
      uint64_t v106 = v13;
      uint64_t v107 = v12;
      uint64_t v108 = v11;
      do
      {
        unint64_t v126 = *v18;
        *(void *)&long long v142 = &v126;
        uint64_t v19 = sub_919688((uint64_t)v110, &v126, (uint64_t)&unk_20F06E0, (uint64_t **)&v142);
        if (!BYTE8(v139))
        {
          uint64_t v103 = __cxa_allocate_exception(8uLL);
          *uint64_t v103 = &off_2439078;
        }
        int v20 = (char *)v135;
        if (v136 - (unsigned char *)v135 >= 1)
        {
          uint64_t v21 = v19;
          unint64_t v23 = (void **)(v19 + 3);
          uint64_t v22 = v19[3];
          uint64_t v24 = (v136 - (unsigned char *)v135) >> 4;
          int v26 = (long long *)v19[4];
          uint64_t v25 = v19[5];
          uint64_t v27 = (uint64_t)v26 - v22;
          unint64_t v28 = (char *)(v22 + (((unint64_t)v26 - v22) & 0xFFFFFFFFFFFFFFF0));
          if (v24 > (v25 - (uint64_t)v26) >> 4)
          {
            uint64_t v29 = v27 >> 4;
            unint64_t v30 = (v27 >> 4) + v24;
            if (v30 >> 60) {
              sub_2E00();
            }
            uint64_t v31 = v25 - v22;
            if (v31 >> 3 > v30) {
              unint64_t v30 = v31 >> 3;
            }
            if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v32 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v32 = v30;
            }
            if (v32)
            {
              if (v32 >> 60) {
                sub_188D718();
              }
              uint64_t v33 = (char *)operator new(16 * v32);
            }
            else
            {
              uint64_t v33 = 0;
            }
            long long v43 = &v33[16 * v29];
            uint64_t v44 = 16 * v24;
            long long v45 = &v43[16 * v24];
            uint64_t v46 = v43;
            do
            {
              long long v47 = *(_OWORD *)v20;
              v20 += 16;
              *(_OWORD *)uint64_t v46 = v47;
              v46 += 16;
              v44 -= 16;
            }
            while (v44);
            uint64_t v48 = (char *)*v23;
            if (*v23 != v28)
            {
              unint64_t v49 = v28;
              do
              {
                *((_OWORD *)v43 - 1) = *((_OWORD *)v49 - 1);
                v43 -= 16;
                v49 -= 16;
              }
              while (v49 != v48);
              int v26 = (long long *)v21[4];
            }
            if (v26 != (long long *)v28) {
              memmove(v45, v28, (char *)v26 - v28);
            }
            size_t v50 = (void *)v21[3];
            v21[3] = v43;
            v21[4] = &v45[(char *)v26 - v28];
            uint64_t v21[5] = &v33[16 * v32];
            if (v50) {
              operator delete(v50);
            }
            goto LABEL_29;
          }
          uint64_t v34 = ((char *)v26 - v28) >> 4;
          if (v34 >= v24)
          {
            uint64_t v35 = (char *)v135 + 16 * v24;
            uint64_t v37 = (char *)v19[4];
            uint64_t v38 = 16 * v24;
            int v39 = &v26[-v24];
            unint64_t v40 = v37;
            if (v39 >= v26) {
              goto LABEL_48;
            }
            goto LABEL_47;
          }
          uint64_t v35 = (char *)v135 + 16 * v34;
          uint64_t v36 = v136 - v35;
          if (v136 != v35) {
            memmove((void *)v19[4], (char *)v135 + 16 * v34, v136 - v35);
          }
          uint64_t v37 = (char *)v26 + v36;
          v21[4] = (char *)v26 + v36;
          if ((char *)v26 - v28 >= 1)
          {
            uint64_t v38 = 16 * v24;
            int v39 = (long long *)&v37[-16 * v24];
            unint64_t v40 = (char *)v26 + v36;
            if (v39 >= v26)
            {
LABEL_48:
              long long v42 = &v28[v38];
              v21[4] = v40;
              if (v37 != v42) {
                memmove(&v37[-16 * ((v37 - v42) >> 4)], v28, v37 - v42);
              }
              if (v35 != v20) {
                memmove(v28, v20, v35 - v20);
              }
              goto LABEL_29;
            }
            do
            {
LABEL_47:
              long long v41 = *v39++;
              *(_OWORD *)unint64_t v40 = v41;
              v40 += 16;
            }
            while (v39 < v26);
            goto LABEL_48;
          }
        }
LABEL_29:
        ++v18;
      }
      while (v18 != v109);
      int v17 = BYTE8(v139);
      uint64_t v12 = v107;
      uint64_t v11 = v108;
      uint64_t v13 = v106;
LABEL_72:
      if (v17) {
        goto LABEL_121;
      }
LABEL_18:
      v12 += 13;
      if (v12 != v13) {
        continue;
      }
      break;
    }
    uint64_t v14 = *(void *)(v11 + 424);
    uint64_t v12 = *(void **)(v11 + 432);
    if ((void *)v14 == v12)
    {
LABEL_134:
      uint64_t v14 = *(void *)(v11 + 432);
    }
    else
    {
      while (!*(unsigned char *)(v14 + 96) || *(void *)(v14 + 16) == *(void *)(v14 + 24))
      {
        v14 += 104;
        if ((void *)v14 == v12) {
          goto LABEL_134;
        }
      }
      if ((void *)v14 != v12)
      {
        uint64_t v92 = v14 + 104;
        if ((void *)(v14 + 104) != v12)
        {
          do
          {
            if (*(unsigned char *)(v92 + 96)) {
              BOOL v93 = *(void *)(v92 + 16) == *(void *)(v92 + 24);
            }
            else {
              BOOL v93 = 1;
            }
            if (v93)
            {
              sub_919AF0(v14, v92);
              v14 += 104;
            }
            v92 += 104;
          }
          while ((void *)v92 != v12);
          uint64_t v12 = *(void **)(v11 + 432);
        }
      }
    }
LABEL_135:
    sub_919A00(v11 + 424, v14, (uint64_t)v12);
    char v76 = v111[0];
    if (v111[0])
    {
      uint64_t v77 = *(void *)(v11 + 432);
      do
      {
        uint64_t v78 = (void *)v76[2];
        unint64_t v122 = v78;
        uint64_t v124 = 0;
        unint64_t v125 = 0;
        unint64_t v123 = 0;
        uint64_t v80 = (unsigned char *)v76[3];
        uint64_t v79 = (unsigned char *)v76[4];
        int64_t v81 = v79 - v80;
        if (v79 == v80)
        {
          uint64_t v83 = 0;
          uint64_t v82 = 0;
        }
        else
        {
          if (v81 < 0) {
            sub_2E00();
          }
          uint64_t v82 = (char *)operator new(v79 - v80);
          uint64_t v83 = &v82[16 * (v81 >> 4)];
          unint64_t v123 = v82;
          unint64_t v125 = v83;
          memcpy(v82, v80, v81);
          uint64_t v124 = v83;
        }
        unint64_t v126 = 0;
        uint64_t v127 = 0;
        *(_DWORD *)((char *)v128 + 7) = 0;
        v128[0] = 0;
        long long v129 = 0u;
        long long v130 = 0u;
        long long v131 = 0u;
        size_t v84 = v83 - v82;
        BOOL v65 = v83 == v82;
        uint64_t v85 = (v83 - v82) >> 4;
        if (v65)
        {
          uint64_t v86 = 0;
        }
        else
        {
          if ((v84 & 0x8000000000000000) != 0) {
            sub_2E00();
          }
          uint64_t v86 = (char *)operator new(v84);
          *(void *)&long long v129 = v86;
          *(void *)&long long v130 = &v86[16 * v85];
          memcpy(v86, v82, v84);
        }
        *((void *)&v129 + 1) = &v86[16 * v85];
        char v150 = 1;
        sub_360E8C((uint64_t)&v142, (uint64_t)&v126);
        LODWORD(v133) = 5;
        uint64_t v132 = v78;
        char v141 = v150;
        if (v150)
        {
          LOWORD(v136) = v144;
          BYTE2(v136) = v145;
          long long v135 = v143;
          uint64_t v138 = v147;
          long long v134 = v142;
          std::string v143 = 0;
          long long v142 = 0uLL;
          long long v137 = v146;
          uint64_t v147 = 0;
          long long v146 = 0uLL;
          long long v139 = v148;
          uint64_t v140 = v149;
          long long v148 = 0uLL;
          uint64_t v149 = 0;
          char v150 = 0;
        }
        if (*((void *)&v130 + 1))
        {
          *(void *)&long long v131 = *((void *)&v130 + 1);
          operator delete(*((void **)&v130 + 1));
        }
        if ((void)v129)
        {
          *((void *)&v129 + 1) = v129;
          operator delete((void *)v129);
        }
        if (v126)
        {
          uint64_t v127 = v126;
          operator delete(v126);
        }
        uint64_t v87 = sub_919D00((uint64_t *)(v11 + 424), v77, (uint64_t)&v132);
        if (v141)
        {
          if ((void)v139)
          {
            *((void *)&v139 + 1) = v139;
            operator delete((void *)v139);
          }
          if ((void)v137)
          {
            *((void *)&v137 + 1) = v137;
            operator delete((void *)v137);
          }
          if ((void)v134)
          {
            *((void *)&v134 + 1) = v134;
            operator delete((void *)v134);
          }
          char v141 = 0;
        }
        if (v82) {
          operator delete(v82);
        }
        uint64_t v77 = v87 + 104;
        char v76 = (void *)*v76;
      }
      while (v76);
      unint64_t v88 = v111[0];
      if (v111[0])
      {
        do
        {
          uint64_t v90 = (void *)*v88;
          unsigned int v91 = (void *)v88[3];
          if (v91)
          {
            v88[4] = v91;
            operator delete(v91);
          }
          operator delete(v88);
          unint64_t v88 = v90;
        }
        while (v90);
      }
    }
    uint64_t v89 = v110[0];
    v110[0] = 0;
    if (v89) {
      operator delete(v89);
    }
    v11 += 456;
    if (v11 != v105) {
      continue;
    }
    break;
  }
LABEL_181:
  long long v94 = v114[0];
  if (v114[0])
  {
    do
    {
      uint64_t v95 = (void *)*v94;
      operator delete(v94);
      long long v94 = v95;
    }
    while (v95);
  }
  uint64_t v96 = v113[0];
  v113[0] = 0;
  if (v96) {
    operator delete(v96);
  }
  uint64_t v97 = v117[0];
  if (v117[0])
  {
    do
    {
      uint64_t v98 = (void *)*v97;
      operator delete(v97);
      uint64_t v97 = v98;
    }
    while (v98);
  }
  uint64_t v99 = v116[0];
  v116[0] = 0;
  if (v99) {
    operator delete(v99);
  }
  uint64_t v100 = v120[0];
  if (v120[0])
  {
    do
    {
      unint64_t v101 = (void *)*v100;
      operator delete(v100);
      uint64_t v100 = v101;
    }
    while (v101);
  }
  uint64_t v102 = v119[0];
  v119[0] = 0;
  if (v102) {
    operator delete(v102);
  }
}

void sub_911CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39)
{
}

uint64_t sub_911E64(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)(result + 161) = *(uint64_t *)((char *)a2 + 5);
  *(void *)(result + 156) = v2;
  return result;
}

void sub_911E78(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, unsigned int a4@<W3>, int a5@<W4>, void *a6@<X8>)
{
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  if (a2 <= 0xFFFFFFFEFFFFFFFFLL && a2)
  {
    uint64_t v10 = a4;
    sub_911FC4(a1, a2, a3, a4, a5, a6);
    uint64_t v12 = (int *)sub_8DFD1C(a1 + 7792, a2, 0, "line");
    unint64_t v13 = *(void *)((char *)v12 + *(unsigned __int16 *)((char *)v12 - *v12 + 6));
    if (v13 <= 0xFFFFFFFEFFFFFFFFLL
      && *(void *)((char *)v12 + *(unsigned __int16 *)((char *)v12 - *v12 + 6)) != 0)
    {
      sub_9122A4(a1, v13, a3, v10, a5, a6);
    }
  }
}

void sub_911F48(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_911F64(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 80))
  {
    uint64_t v2 = *(void **)(a1 + 56);
    if (v2)
    {
      *(void *)(a1 + 64) = v2;
      operator delete(v2);
    }
    uint64_t v3 = *(void **)(a1 + 32);
    if (v3)
    {
      *(void *)(a1 + 40) = v3;
      operator delete(v3);
    }
    char v4 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v4;
      operator delete(v4);
    }
    *(unsigned char *)(a1 + 80) = 0;
  }
  return a1;
}

void sub_911FC4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, void *a6)
{
  uint64_t v35 = a2;
  uint64_t v10 = sub_36F918((void *)(*(void *)(a1 + 11688) + 144), &v35);
  if (v10)
  {
    uint64_t v11 = v10 + 3;
  }
  else if (atomic_load_explicit((atomic_uchar *volatile)&qword_24F7228, memory_order_acquire))
  {
    uint64_t v11 = &qword_24F7210;
  }
  else
  {
    uint64_t v11 = &qword_24F7210;
    if (__cxa_guard_acquire(&qword_24F7228))
    {
      qword_24F7210 = 0;
      *(void *)algn_24F7218 = 0;
      qword_24F7220 = 0;
      __cxa_guard_release(&qword_24F7228);
    }
  }
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  if (*v11 != v13)
  {
    int v34 = a3;
    do
    {
      int v15 = *(_DWORD *)(v12 + 8);
      if (v15 > a5) {
        goto LABEL_9;
      }
      int v16 = *(_DWORD *)(v12 + 12);
      if (v16 < (int)a4) {
        goto LABEL_9;
      }
      char v17 = *(unsigned char *)(v12 + 4);
      if (a3)
      {
        if (!*(unsigned char *)(v12 + 4)) {
          goto LABEL_9;
        }
      }
      int v18 = *(_DWORD *)v12;
      BOOL v19 = v16 == 0x7FFFFFFF || v15 == 0x7FFFFFFF;
      if (v19 || v18 == -1) {
        goto LABEL_9;
      }
      uint64_t v22 = (char *)a6[1];
      unint64_t v21 = a6[2];
      if ((unint64_t)v22 < v21)
      {
        *(_DWORD *)uint64_t v22 = v18;
        v22[4] = v17;
        *((_DWORD *)v22 + 2) = v15;
        *((_DWORD *)v22 + 3) = v16;
        *((_WORD *)v22 + 8) = 0;
        v22[18] = 1;
        *(_DWORD *)(v22 + 19) = 0;
        *(_DWORD *)(v22 + 22) = 0;
        uint64_t v14 = v22 + 28;
        *((_WORD *)v22 + 13) = 1;
      }
      else
      {
        uint64_t v32 = a4;
        uint64_t v33 = (char **)a6;
        unint64_t v23 = (char *)*a6;
        uint64_t v24 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v22[-*a6] >> 2);
        unint64_t v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) > 0x924924924924924) {
          sub_2E00();
        }
        unint64_t v26 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v21 - (void)v23) >> 2);
        if (2 * v26 > v25) {
          unint64_t v25 = 2 * v26;
        }
        if (v26 >= 0x492492492492492) {
          unint64_t v25 = 0x924924924924924;
        }
        unint64_t v31 = v25;
        if (v25)
        {
          if (v25 > 0x924924924924924) {
            sub_188D718();
          }
          uint64_t v27 = (char *)operator new(28 * v25);
        }
        else
        {
          uint64_t v27 = 0;
        }
        unint64_t v28 = &v27[28 * v24];
        *(_DWORD *)unint64_t v28 = v18;
        v28[4] = v17;
        *((_DWORD *)v28 + 2) = v15;
        *((_DWORD *)v28 + 3) = v16;
        *((_WORD *)v28 + 8) = 0;
        v28[18] = 1;
        *(_DWORD *)(v28 + 19) = 0;
        *(_DWORD *)(v28 + 22) = 0;
        *((_WORD *)v28 + 13) = 1;
        uint64_t v29 = v28;
        if (v22 == v23)
        {
          a4 = v32;
          a6 = v33;
          uint64_t v14 = v28 + 28;
          *uint64_t v33 = v28;
          v33[1] = v28 + 28;
          v33[2] = &v27[28 * v31];
          if (!v22) {
            goto LABEL_8;
          }
        }
        else
        {
          a6 = v33;
          do
          {
            long long v30 = *(_OWORD *)(v22 - 28);
            *((_OWORD *)v29 - 1) = *((_OWORD *)v22 - 1);
            *(_OWORD *)(v29 - 28) = v30;
            v29 -= 28;
            v22 -= 28;
          }
          while (v22 != v23);
          uint64_t v22 = *v33;
          uint64_t v14 = v28 + 28;
          *uint64_t v33 = v29;
          v33[1] = v28 + 28;
          v33[2] = &v27[28 * v31];
          a4 = v32;
          if (!v22) {
            goto LABEL_8;
          }
        }
        operator delete(v22);
      }
LABEL_8:
      a6[1] = v14;
      a3 = v34;
LABEL_9:
      v12 += 16;
    }
    while (v12 != v13);
  }
}

void sub_9122A4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, void *a6)
{
  uint64_t v35 = a2;
  uint64_t v10 = sub_36F918((void *)(*(void *)(a1 + 11688) + 304), &v35);
  if (v10)
  {
    uint64_t v11 = v10 + 3;
  }
  else if (atomic_load_explicit((atomic_uchar *volatile)&qword_24F7248, memory_order_acquire))
  {
    uint64_t v11 = &qword_24F7230;
  }
  else
  {
    uint64_t v11 = &qword_24F7230;
    if (__cxa_guard_acquire(&qword_24F7248))
    {
      qword_24F7230 = 0;
      *(void *)algn_24F7238 = 0;
      qword_24F7240 = 0;
      __cxa_guard_release(&qword_24F7248);
    }
  }
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  if (*v11 != v13)
  {
    int v34 = a3;
    do
    {
      int v15 = *(_DWORD *)(v12 + 8);
      if (v15 > a5) {
        goto LABEL_9;
      }
      int v16 = *(_DWORD *)(v12 + 12);
      if (v16 < (int)a4) {
        goto LABEL_9;
      }
      char v17 = *(unsigned char *)(v12 + 4);
      if (a3)
      {
        if (!*(unsigned char *)(v12 + 4)) {
          goto LABEL_9;
        }
      }
      int v18 = *(_DWORD *)v12;
      BOOL v19 = v16 == 0x7FFFFFFF || v15 == 0x7FFFFFFF;
      if (v19 || v18 == -1) {
        goto LABEL_9;
      }
      uint64_t v22 = (char *)a6[1];
      unint64_t v21 = a6[2];
      if ((unint64_t)v22 < v21)
      {
        *(_DWORD *)uint64_t v22 = v18;
        v22[4] = v17;
        *((_DWORD *)v22 + 2) = v15;
        *((_DWORD *)v22 + 3) = v16;
        *((_DWORD *)v22 + 4) = 0;
        *((_WORD *)v22 + 10) = 0;
        *(_DWORD *)(v22 + 22) = 1;
        uint64_t v14 = v22 + 28;
        *((_WORD *)v22 + 13) = 1;
      }
      else
      {
        uint64_t v32 = a4;
        uint64_t v33 = (char **)a6;
        unint64_t v23 = (char *)*a6;
        uint64_t v24 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v22[-*a6] >> 2);
        unint64_t v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) > 0x924924924924924) {
          sub_2E00();
        }
        unint64_t v26 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v21 - (void)v23) >> 2);
        if (2 * v26 > v25) {
          unint64_t v25 = 2 * v26;
        }
        if (v26 >= 0x492492492492492) {
          unint64_t v25 = 0x924924924924924;
        }
        unint64_t v31 = v25;
        if (v25)
        {
          if (v25 > 0x924924924924924) {
            sub_188D718();
          }
          uint64_t v27 = (char *)operator new(28 * v25);
        }
        else
        {
          uint64_t v27 = 0;
        }
        unint64_t v28 = &v27[28 * v24];
        *(_DWORD *)unint64_t v28 = v18;
        v28[4] = v17;
        *((_DWORD *)v28 + 2) = v15;
        *((_DWORD *)v28 + 3) = v16;
        *((_DWORD *)v28 + 4) = 0;
        *((_WORD *)v28 + 10) = 0;
        *(_DWORD *)(v28 + 22) = 1;
        *((_WORD *)v28 + 13) = 1;
        uint64_t v29 = v28;
        if (v22 == v23)
        {
          a4 = v32;
          a6 = v33;
          uint64_t v14 = v28 + 28;
          *uint64_t v33 = v28;
          v33[1] = v28 + 28;
          v33[2] = &v27[28 * v31];
          if (!v22) {
            goto LABEL_8;
          }
        }
        else
        {
          a6 = v33;
          do
          {
            long long v30 = *(_OWORD *)(v22 - 28);
            *((_OWORD *)v29 - 1) = *((_OWORD *)v22 - 1);
            *(_OWORD *)(v29 - 28) = v30;
            v29 -= 28;
            v22 -= 28;
          }
          while (v22 != v23);
          uint64_t v22 = *v33;
          uint64_t v14 = v28 + 28;
          *uint64_t v33 = v29;
          v33[1] = v28 + 28;
          v33[2] = &v27[28 * v31];
          a4 = v32;
          if (!v22) {
            goto LABEL_8;
          }
        }
        operator delete(v22);
      }
LABEL_8:
      a6[1] = v14;
      a3 = v34;
LABEL_9:
      v12 += 16;
    }
    while (v12 != v13);
  }
}

void sub_912588(uint64_t a1, unint64_t a2, int a3, unsigned int a4, int a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, char **a10)
{
  if (a2 <= 0xFFFFFFFEFFFFFFFFLL && a2 != 0)
  {
    v30[11] = v10;
    v30[12] = v11;
    uint64_t v18 = a4;
    v30[0] = a2;
    uint64_t v29 = a7;
    char v28 = a6;
    v27[0] = v30;
    v27[1] = &v28;
    void v27[2] = &v29;
    v27[3] = a8;
    v27[4] = a9;
    v27[5] = a1;
    sub_912894(a1, a2, a3, a4, a5, (uint64_t)v27, a10);
    int v20 = (int *)sub_498D5C(a1 + 3896, a2, 0, "stop");
    unint64_t v21 = *(void *)((char *)v20 + *(unsigned __int16 *)((char *)v20 - *v20 + 10));
    sub_912714(a1, v21, a3, v18, a5, a6, a7, a8, a9, a10);
    if (v21 > 0xFFFFFFFEFFFFFFFFLL || v21 == 0)
    {
      unint64_t v23 = (int *)sub_498D5C(a1 + 3896, a2, 0, "stop");
      unint64_t v24 = *(void *)((char *)v23 + *(unsigned __int16 *)((char *)v23 - *v23 + 18));
      if (v24 <= 0xFFFFFFFEFFFFFFFFLL
        && *(void *)((char *)v23 + *(unsigned __int16 *)((char *)v23 - *v23 + 18)) != 0)
      {
        sub_913BD0(a1, v24, a3, v18, a5, a10);
      }
    }
  }
}

void sub_912714(uint64_t a1, unint64_t a2, int a3, unsigned int a4, int a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, char **a10)
{
  if (a2 <= 0xFFFFFFFEFFFFFFFFLL && a2 != 0)
  {
    uint64_t v32 = a7;
    unint64_t v33 = a2;
    char v31 = a6;
    unint64_t v25 = &v33;
    unint64_t v26 = &v31;
    uint64_t v27 = &v32;
    uint64_t v28 = a8;
    uint64_t v29 = a9;
    uint64_t v30 = a1;
    uint64_t v24 = a4;
    sub_912F04(a1, a2, a3, a4, a5, (uint64_t)&v25, a10);
    uint64_t v18 = (int *)sub_8ED3D4(a1 + 3896, a2, 0, "hall");
    unint64_t v19 = *(void *)((char *)v18 + *(unsigned __int16 *)((char *)v18 - *v18 + 10));
    if (v19 <= 0xFFFFFFFEFFFFFFFFLL
      && *(void *)((char *)v18 + *(unsigned __int16 *)((char *)v18 - *v18 + 10)) != 0)
    {
      uint64_t v32 = a7;
      unint64_t v33 = v19;
      char v31 = a6;
      unint64_t v25 = &v33;
      unint64_t v26 = &v31;
      uint64_t v27 = &v32;
      uint64_t v28 = a8;
      uint64_t v29 = a9;
      uint64_t v30 = a1;
      sub_913574(a1, v19, a3, v24, a5, (uint64_t)&v25, a10);
      unint64_t v21 = (int *)sub_8ED928(a1 + 3896, v19, 0, "station");
      unint64_t v22 = *(void *)((char *)v21 + *(unsigned __int16 *)((char *)v21 - *v21 + 18));
      if (v22 <= 0xFFFFFFFEFFFFFFFFLL
        && *(void *)((char *)v21 + *(unsigned __int16 *)((char *)v21 - *v21 + 18)) != 0)
      {
        sub_913BD0(a1, v22, a3, v24, a5, a10);
      }
    }
  }
}

void sub_912894(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, char **a7)
{
  *(void *)unint64_t v33 = a2;
  uint64_t v12 = sub_36F918((void *)(*(void *)(a1 + 11688) + 264), v33);
  if (v12)
  {
    uint64_t v13 = v12 + 3;
  }
  else if (atomic_load_explicit((atomic_uchar *volatile)&qword_24F7268, memory_order_acquire))
  {
    uint64_t v13 = &qword_24F7250;
  }
  else
  {
    uint64_t v13 = &qword_24F7250;
    if (__cxa_guard_acquire(&qword_24F7268))
    {
      qword_24F7250 = 0;
      *(void *)algn_24F7258 = 0;
      qword_24F7260 = 0;
      __cxa_guard_release(&qword_24F7268);
    }
  }
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  if (*v13 != v15)
  {
    do
    {
      int v18 = *(_DWORD *)(v14 + 8);
      if (v18 > a5) {
        goto LABEL_9;
      }
      int v19 = *(_DWORD *)(v14 + 12);
      if (v19 < a4 || a3 && !*(unsigned char *)(v14 + 4)) {
        goto LABEL_9;
      }
      *(void *)&v33[20] = 0;
      int v20 = *(_DWORD *)v14;
      v33[4] = *(unsigned char *)(v14 + 4);
      *(_DWORD *)unint64_t v33 = v20;
      *(_DWORD *)&v33[16] = 0;
      v33[21] = 1;
      *(_DWORD *)&unsigned char v33[8] = v18;
      *(_DWORD *)&v33[12] = v19;
      sub_912B9C(*(void *)(a6 + 40), **(void **)a6, **(unsigned __int8 **)(a6 + 8), **(void **)(a6 + 16), *(int **)(a6 + 24), *(int **)(a6 + 32), v33);
      if (*(_DWORD *)v33 == -1) {
        goto LABEL_9;
      }
      if (*(_DWORD *)&v33[8] == 0x7FFFFFFF) {
        goto LABEL_9;
      }
      if (*(_DWORD *)&v33[12] == 0x7FFFFFFF) {
        goto LABEL_9;
      }
      v21.i32[0] = *(_DWORD *)&v33[23];
      if (!vmovn_s16((int16x8_t)vmovl_u8(v21)).u32[0] && !v33[27]) {
        goto LABEL_9;
      }
      unint64_t v23 = a7[1];
      unint64_t v22 = (unint64_t)a7[2];
      if ((unint64_t)v23 < v22)
      {
        long long v16 = *(_OWORD *)v33;
        *(_OWORD *)(v23 + 12) = *(_OWORD *)&v33[12];
        *(_OWORD *)unint64_t v23 = v16;
        char v17 = v23 + 28;
      }
      else
      {
        uint64_t v32 = a7;
        uint64_t v24 = *a7;
        unint64_t v25 = 0x6DB6DB6DB6DB6DB7 * ((v23 - v24) >> 2) + 1;
        if (v25 > 0x924924924924924) {
          sub_2E00();
        }
        unint64_t v26 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v22 - (void)v24) >> 2);
        if (2 * v26 > v25) {
          unint64_t v25 = 2 * v26;
        }
        if (v26 >= 0x492492492492492) {
          unint64_t v25 = 0x924924924924924;
        }
        unint64_t v31 = v25;
        if (v25)
        {
          if (v25 > 0x924924924924924) {
            sub_188D718();
          }
          uint64_t v27 = (char *)operator new(28 * v25);
        }
        else
        {
          uint64_t v27 = 0;
        }
        uint64_t v28 = &v27[4 * ((v23 - v24) >> 2)];
        *(_OWORD *)uint64_t v28 = *(_OWORD *)v33;
        *(_OWORD *)(v28 + 12) = *(_OWORD *)&v33[12];
        uint64_t v29 = v28;
        if (v23 != v24)
        {
          do
          {
            long long v30 = *(_OWORD *)(v23 - 28);
            *((_OWORD *)v29 - 1) = *((_OWORD *)v23 - 1);
            *(_OWORD *)(v29 - 28) = v30;
            v29 -= 28;
            v23 -= 28;
          }
          while (v23 != v24);
          a7 = v32;
          unint64_t v23 = *v32;
          char v17 = v28 + 28;
          *uint64_t v32 = v29;
          v32[1] = v28 + 28;
          v32[2] = &v27[28 * v31];
          if (!v23) {
            goto LABEL_8;
          }
LABEL_34:
          operator delete(v23);
          goto LABEL_8;
        }
        a7 = v32;
        char v17 = v28 + 28;
        *uint64_t v32 = v28;
        v32[1] = v28 + 28;
        v32[2] = &v27[28 * v31];
        if (v23) {
          goto LABEL_34;
        }
      }
LABEL_8:
      a7[1] = v17;
LABEL_9:
      v14 += 16;
    }
    while (v14 != v15);
  }
}

uint64_t sub_912B9C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int *a5, int *a6, unsigned char *a7)
{
  uint64_t v7 = *(void *)(a1 + 11688);
  unint64_t v8 = *(unsigned int *)a7;
  if (a7[4])
  {
    uint64_t v11 = *(void *)(v7 + 8);
    uint64_t result = v7 + 8;
    uint64_t v10 = v11;
  }
  else
  {
    uint64_t v12 = *(void *)(v7 + 32);
    uint64_t result = v7 + 32;
    uint64_t v10 = v12;
  }
  if (0x823EE08FB823EE09 * ((*(void *)(result + 8) - v10) >> 3) <= v8) {
    sub_66748();
  }
  uint64_t v13 = v10 + 456 * v8;
  uint64_t v14 = *(void *)(v13 + 424);
  uint64_t v15 = *(void *)(v13 + 432);
  if (v14 != v15)
  {
    if (a4) {
      BOOL v16 = HIDWORD(a4) == -1;
    }
    else {
      BOOL v16 = 1;
    }
    int v17 = !v16;
    int v18 = *a5;
    int v19 = *a6;
    while (1)
    {
      if (*(_DWORD *)(v14 + 8) != 2 || *(void *)v14 != a2) {
        goto LABEL_16;
      }
      int v22 = *(unsigned __int8 *)(v14 + 96);
      if (!*(unsigned char *)(v14 + 96))
      {
        uint64_t result = 1;
        a7[23] = 1;
        BOOL v21 = 0;
        a7[24] |= 1u;
        if (v22) {
          goto LABEL_71;
        }
        goto LABEL_15;
      }
      uint64_t v24 = *(void **)(v14 + 16);
      unint64_t v23 = *(void **)(v14 + 24);
      if (v24 != v23 && a3 != 0)
      {
        if (!v17) {
          goto LABEL_16;
        }
        while (*v24 != a4)
        {
          if (++v24 == v23) {
            goto LABEL_16;
          }
        }
        if (v24 == v23) {
          goto LABEL_16;
        }
      }
      if (!*(unsigned char *)(v14 + 40)) {
        break;
      }
      uint64_t v27 = *(_DWORD **)(v14 + 72);
      unint64_t v26 = *(_DWORD **)(v14 + 80);
      char v28 = 1;
      if (v27 == v26) {
        goto LABEL_48;
      }
      if (!a3) {
        goto LABEL_48;
      }
      char v28 = 0;
      if (!v18) {
        goto LABEL_48;
      }
      int v29 = a5[1];
      if (v29 == -1) {
        goto LABEL_48;
      }
      int v30 = a5[2];
      if (!v30) {
        goto LABEL_48;
      }
      int v31 = a5[3];
      if (v31 == -1) {
        goto LABEL_48;
      }
      while (*v27 != v18 || v27[1] != v29 || v27[2] != v30 || v27[3] != v31)
      {
        v27 += 4;
        if (v27 == v26)
        {
          uint64_t v27 = *(_DWORD **)(v14 + 80);
          break;
        }
      }
      a7[23] |= v27 != v26;
      if (!*(unsigned char *)(v14 + 41))
      {
LABEL_69:
        uint64_t result = 0;
        goto LABEL_70;
      }
LABEL_49:
      unint64_t v33 = *(_DWORD **)(v14 + 48);
      uint64_t v32 = *(_DWORD **)(v14 + 56);
      if (v33 == v32 || a3 == 0)
      {
        uint64_t result = 1;
        BOOL v21 = 0;
        a7[24] |= 1u;
        if (v22) {
          goto LABEL_71;
        }
        goto LABEL_15;
      }
      uint64_t result = 0;
      if (v19)
      {
        int v35 = a6[1];
        if (v35 != -1)
        {
          int v36 = a6[2];
          if (v36)
          {
            int v37 = a6[3];
            if (v37 != -1)
            {
              while (*v33 != v19 || v33[1] != v35 || v33[2] != v36 || v33[3] != v37)
              {
                v33 += 4;
                if (v33 == v32)
                {
                  unint64_t v33 = *(_DWORD **)(v14 + 56);
                  break;
                }
              }
              uint64_t result = v33 != v32;
              BOOL v21 = 0;
              a7[24] |= result;
              if (!v22) {
                goto LABEL_15;
              }
LABEL_71:
              if (*(unsigned char *)(v14 + 42))
              {
                uint64_t v20 = *(void *)(v14 + 48);
                uint64_t v38 = *(void *)(v14 + 56);
                BOOL v21 = 1;
                if (v20 != v38)
                {
                  if (a3)
                  {
                    BOOL v21 = 0;
                    if (v19)
                    {
                      int v39 = a6[1];
                      if (v39 != -1)
                      {
                        uint64_t result = a6[2];
                        if (result)
                        {
                          unsigned int v40 = a6[3];
                          if (v40 != -1)
                          {
                            while (*(_DWORD *)v20 != v19
                                 || *(_DWORD *)(v20 + 4) != v39
                                 || *(void *)(v20 + 8) != __PAIR64__(v40, result))
                            {
                              v20 += 16;
                              if (v20 == v38)
                              {
                                uint64_t v20 = *(void *)(v14 + 56);
                                break;
                              }
                            }
                            BOOL v21 = v20 != v38;
                          }
                        }
                      }
                    }
                  }
                }
              }
              goto LABEL_15;
            }
          }
        }
      }
LABEL_70:
      BOOL v21 = 0;
      a7[24] = a7[24];
      if (v22) {
        goto LABEL_71;
      }
LABEL_15:
      a7[25] |= v21;
LABEL_16:
      v14 += 104;
      if (v14 == v15) {
        return result;
      }
    }
    char v28 = 0;
LABEL_48:
    a7[23] |= v28;
    if (!*(unsigned char *)(v14 + 41)) {
      goto LABEL_69;
    }
    goto LABEL_49;
  }
  return result;
}

void sub_912F04(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, char **a7)
{
  *(void *)unint64_t v33 = a2;
  uint64_t v12 = sub_36F918((void *)(*(void *)(a1 + 11688) + 104), v33);
  if (v12)
  {
    uint64_t v13 = v12 + 3;
  }
  else if (atomic_load_explicit((atomic_uchar *volatile)&qword_24F7288, memory_order_acquire))
  {
    uint64_t v13 = &qword_24F7270;
  }
  else
  {
    uint64_t v13 = &qword_24F7270;
    if (__cxa_guard_acquire(&qword_24F7288))
    {
      qword_24F7270 = 0;
      *(void *)algn_24F7278 = 0;
      qword_24F7280 = 0;
      __cxa_guard_release(&qword_24F7288);
    }
  }
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  if (*v13 != v15)
  {
    do
    {
      int v18 = *(_DWORD *)(v14 + 8);
      if (v18 > a5) {
        goto LABEL_9;
      }
      int v19 = *(_DWORD *)(v14 + 12);
      if (v19 < a4 || a3 && !*(unsigned char *)(v14 + 4)) {
        goto LABEL_9;
      }
      *(void *)&v33[20] = 0;
      int v20 = *(_DWORD *)v14;
      v33[4] = *(unsigned char *)(v14 + 4);
      *(_DWORD *)unint64_t v33 = v20;
      *(_WORD *)&v33[16] = 256;
      *(_DWORD *)&v33[18] = 0;
      *(_DWORD *)&unsigned char v33[8] = v18;
      *(_DWORD *)&v33[12] = v19;
      sub_91320C(*(void *)(a6 + 40), **(void **)a6, **(unsigned __int8 **)(a6 + 8), **(void **)(a6 + 16), *(int **)(a6 + 24), *(int **)(a6 + 32), v33);
      if (*(_DWORD *)v33 == -1) {
        goto LABEL_9;
      }
      if (*(_DWORD *)&v33[8] == 0x7FFFFFFF) {
        goto LABEL_9;
      }
      if (*(_DWORD *)&v33[12] == 0x7FFFFFFF) {
        goto LABEL_9;
      }
      v21.i32[0] = *(_DWORD *)&v33[23];
      if (!vmovn_s16((int16x8_t)vmovl_u8(v21)).u32[0] && !v33[27]) {
        goto LABEL_9;
      }
      unint64_t v23 = a7[1];
      unint64_t v22 = (unint64_t)a7[2];
      if ((unint64_t)v23 < v22)
      {
        long long v16 = *(_OWORD *)v33;
        *(_OWORD *)(v23 + 12) = *(_OWORD *)&v33[12];
        *(_OWORD *)unint64_t v23 = v16;
        int v17 = v23 + 28;
      }
      else
      {
        uint64_t v32 = a7;
        uint64_t v24 = *a7;
        unint64_t v25 = 0x6DB6DB6DB6DB6DB7 * ((v23 - v24) >> 2) + 1;
        if (v25 > 0x924924924924924) {
          sub_2E00();
        }
        unint64_t v26 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v22 - (void)v24) >> 2);
        if (2 * v26 > v25) {
          unint64_t v25 = 2 * v26;
        }
        if (v26 >= 0x492492492492492) {
          unint64_t v25 = 0x924924924924924;
        }
        unint64_t v31 = v25;
        if (v25)
        {
          if (v25 > 0x924924924924924) {
            sub_188D718();
          }
          uint64_t v27 = (char *)operator new(28 * v25);
        }
        else
        {
          uint64_t v27 = 0;
        }
        char v28 = &v27[4 * ((v23 - v24) >> 2)];
        *(_OWORD *)char v28 = *(_OWORD *)v33;
        *(_OWORD *)(v28 + 12) = *(_OWORD *)&v33[12];
        int v29 = v28;
        if (v23 != v24)
        {
          do
          {
            long long v30 = *(_OWORD *)(v23 - 28);
            *((_OWORD *)v29 - 1) = *((_OWORD *)v23 - 1);
            *(_OWORD *)(v29 - 28) = v30;
            v29 -= 28;
            v23 -= 28;
          }
          while (v23 != v24);
          a7 = v32;
          unint64_t v23 = *v32;
          int v17 = v28 + 28;
          *uint64_t v32 = v29;
          v32[1] = v28 + 28;
          v32[2] = &v27[28 * v31];
          if (!v23) {
            goto LABEL_8;
          }
LABEL_34:
          operator delete(v23);
          goto LABEL_8;
        }
        a7 = v32;
        int v17 = v28 + 28;
        *uint64_t v32 = v28;
        v32[1] = v28 + 28;
        v32[2] = &v27[28 * v31];
        if (v23) {
          goto LABEL_34;
        }
      }
LABEL_8:
      a7[1] = v17;
LABEL_9:
      v14 += 16;
    }
    while (v14 != v15);
  }
}

uint64_t sub_91320C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int *a5, int *a6, unsigned char *a7)
{
  uint64_t v7 = *(void *)(a1 + 11688);
  unint64_t v8 = *(unsigned int *)a7;
  if (a7[4])
  {
    uint64_t v11 = *(void *)(v7 + 8);
    uint64_t result = v7 + 8;
    uint64_t v10 = v11;
  }
  else
  {
    uint64_t v12 = *(void *)(v7 + 32);
    uint64_t result = v7 + 32;
    uint64_t v10 = v12;
  }
  if (0x823EE08FB823EE09 * ((*(void *)(result + 8) - v10) >> 3) <= v8) {
    sub_66748();
  }
  uint64_t v13 = v10 + 456 * v8;
  uint64_t v14 = *(void *)(v13 + 424);
  uint64_t v15 = *(void *)(v13 + 432);
  if (v14 != v15)
  {
    if (a4) {
      BOOL v16 = HIDWORD(a4) == -1;
    }
    else {
      BOOL v16 = 1;
    }
    int v17 = !v16;
    int v18 = *a5;
    int v19 = *a6;
    while (1)
    {
      if (*(_DWORD *)(v14 + 8) != 1 || *(void *)v14 != a2) {
        goto LABEL_16;
      }
      int v22 = *(unsigned __int8 *)(v14 + 96);
      if (!*(unsigned char *)(v14 + 96))
      {
        uint64_t result = 1;
        a7[23] = 1;
        BOOL v21 = 0;
        a7[24] |= 1u;
        if (v22) {
          goto LABEL_71;
        }
        goto LABEL_15;
      }
      uint64_t v24 = *(void **)(v14 + 16);
      unint64_t v23 = *(void **)(v14 + 24);
      if (v24 != v23 && a3 != 0)
      {
        if (!v17) {
          goto LABEL_16;
        }
        while (*v24 != a4)
        {
          if (++v24 == v23) {
            goto LABEL_16;
          }
        }
        if (v24 == v23) {
          goto LABEL_16;
        }
      }
      if (!*(unsigned char *)(v14 + 40)) {
        break;
      }
      uint64_t v27 = *(_DWORD **)(v14 + 72);
      unint64_t v26 = *(_DWORD **)(v14 + 80);
      char v28 = 1;
      if (v27 == v26) {
        goto LABEL_48;
      }
      if (!a3) {
        goto LABEL_48;
      }
      char v28 = 0;
      if (!v18) {
        goto LABEL_48;
      }
      int v29 = a5[1];
      if (v29 == -1) {
        goto LABEL_48;
      }
      int v30 = a5[2];
      if (!v30) {
        goto LABEL_48;
      }
      int v31 = a5[3];
      if (v31 == -1) {
        goto LABEL_48;
      }
      while (*v27 != v18 || v27[1] != v29 || v27[2] != v30 || v27[3] != v31)
      {
        v27 += 4;
        if (v27 == v26)
        {
          uint64_t v27 = *(_DWORD **)(v14 + 80);
          break;
        }
      }
      a7[23] |= v27 != v26;
      if (!*(unsigned char *)(v14 + 41))
      {
LABEL_69:
        uint64_t result = 0;
        goto LABEL_70;
      }
LABEL_49:
      unint64_t v33 = *(_DWORD **)(v14 + 48);
      uint64_t v32 = *(_DWORD **)(v14 + 56);
      if (v33 == v32 || a3 == 0)
      {
        uint64_t result = 1;
        BOOL v21 = 0;
        a7[24] |= 1u;
        if (v22) {
          goto LABEL_71;
        }
        goto LABEL_15;
      }
      uint64_t result = 0;
      if (v19)
      {
        int v35 = a6[1];
        if (v35 != -1)
        {
          int v36 = a6[2];
          if (v36)
          {
            int v37 = a6[3];
            if (v37 != -1)
            {
              while (*v33 != v19 || v33[1] != v35 || v33[2] != v36 || v33[3] != v37)
              {
                v33 += 4;
                if (v33 == v32)
                {
                  unint64_t v33 = *(_DWORD **)(v14 + 56);
                  break;
                }
              }
              uint64_t result = v33 != v32;
              BOOL v21 = 0;
              a7[24] |= result;
              if (!v22) {
                goto LABEL_15;
              }
LABEL_71:
              if (*(unsigned char *)(v14 + 42))
              {
                uint64_t v20 = *(void *)(v14 + 48);
                uint64_t v38 = *(void *)(v14 + 56);
                BOOL v21 = 1;
                if (v20 != v38)
                {
                  if (a3)
                  {
                    BOOL v21 = 0;
                    if (v19)
                    {
                      int v39 = a6[1];
                      if (v39 != -1)
                      {
                        uint64_t result = a6[2];
                        if (result)
                        {
                          unsigned int v40 = a6[3];
                          if (v40 != -1)
                          {
                            while (*(_DWORD *)v20 != v19
                                 || *(_DWORD *)(v20 + 4) != v39
                                 || *(void *)(v20 + 8) != __PAIR64__(v40, result))
                            {
                              v20 += 16;
                              if (v20 == v38)
                              {
                                uint64_t v20 = *(void *)(v14 + 56);
                                break;
                              }
                            }
                            BOOL v21 = v20 != v38;
                          }
                        }
                      }
                    }
                  }
                }
              }
              goto LABEL_15;
            }
          }
        }
      }
LABEL_70:
      BOOL v21 = 0;
      a7[24] = a7[24];
      if (v22) {
        goto LABEL_71;
      }
LABEL_15:
      a7[25] |= v21;
LABEL_16:
      v14 += 104;
      if (v14 == v15) {
        return result;
      }
    }
    char v28 = 0;
LABEL_48:
    a7[23] |= v28;
    if (!*(unsigned char *)(v14 + 41)) {
      goto LABEL_69;
    }
    goto LABEL_49;
  }
  return result;
}

void sub_913574(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, char **a7)
{
  *(void *)unint64_t v33 = a2;
  uint64_t v12 = sub_36F918((void *)(*(void *)(a1 + 11688) + 224), v33);
  if (v12)
  {
    uint64_t v13 = v12 + 3;
  }
  else if (atomic_load_explicit((atomic_uchar *volatile)&qword_24F72A8, memory_order_acquire))
  {
    uint64_t v13 = &qword_24F7290;
  }
  else
  {
    uint64_t v13 = &qword_24F7290;
    if (__cxa_guard_acquire(&qword_24F72A8))
    {
      qword_24F7290 = 0;
      *(void *)algn_24F7298 = 0;
      qword_24F72A0 = 0;
      __cxa_guard_release(&qword_24F72A8);
    }
  }
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  if (*v13 != v15)
  {
    do
    {
      int v18 = *(_DWORD *)(v14 + 8);
      if (v18 > a5) {
        goto LABEL_9;
      }
      int v19 = *(_DWORD *)(v14 + 12);
      if (v19 < a4 || a3 && !*(unsigned char *)(v14 + 4)) {
        goto LABEL_9;
      }
      *(void *)&v33[20] = 0;
      int v20 = *(_DWORD *)v14;
      v33[4] = *(unsigned char *)(v14 + 4);
      *(_DWORD *)unint64_t v33 = v20;
      *(_DWORD *)&v33[12] = v19;
      *(_DWORD *)&v33[16] = 0;
      v33[20] = 1;
      *(_DWORD *)&unsigned char v33[8] = v18;
      sub_91386C(*(void *)(a6 + 40), **(void **)a6, **(unsigned __int8 **)(a6 + 8), **(void **)(a6 + 16), *(int **)(a6 + 24), *(int **)(a6 + 32), v33);
      if (*(_DWORD *)v33 == -1) {
        goto LABEL_9;
      }
      if (*(_DWORD *)&v33[8] == 0x7FFFFFFF) {
        goto LABEL_9;
      }
      if (*(_DWORD *)&v33[12] == 0x7FFFFFFF) {
        goto LABEL_9;
      }
      v21.i32[0] = *(_DWORD *)&v33[23];
      if (!vmovn_s16((int16x8_t)vmovl_u8(v21)).u32[0] && !v33[27]) {
        goto LABEL_9;
      }
      unint64_t v23 = a7[1];
      unint64_t v22 = (unint64_t)a7[2];
      if ((unint64_t)v23 < v22)
      {
        long long v16 = *(_OWORD *)v33;
        *(_OWORD *)(v23 + 12) = *(_OWORD *)&v33[12];
        *(_OWORD *)unint64_t v23 = v16;
        int v17 = v23 + 28;
      }
      else
      {
        uint64_t v32 = a7;
        uint64_t v24 = *a7;
        unint64_t v25 = 0x6DB6DB6DB6DB6DB7 * ((v23 - v24) >> 2) + 1;
        if (v25 > 0x924924924924924) {
          sub_2E00();
        }
        unint64_t v26 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v22 - (void)v24) >> 2);
        if (2 * v26 > v25) {
          unint64_t v25 = 2 * v26;
        }
        if (v26 >= 0x492492492492492) {
          unint64_t v27 = 0x924924924924924;
        }
        else {
          unint64_t v27 = v25;
        }
        if (v27)
        {
          if (v27 > 0x924924924924924) {
            sub_188D718();
          }
          char v28 = (char *)operator new(28 * v27);
        }
        else
        {
          char v28 = 0;
        }
        int v29 = &v28[4 * ((v23 - v24) >> 2)];
        *(_OWORD *)int v29 = *(_OWORD *)v33;
        *(_OWORD *)(v29 + 12) = *(_OWORD *)&v33[12];
        int v30 = v29;
        if (v23 == v24)
        {
          a7 = v32;
          int v17 = v29 + 28;
          *uint64_t v32 = v29;
          v32[1] = v29 + 28;
          v32[2] = &v28[28 * v27];
          if (!v23) {
            goto LABEL_8;
          }
        }
        else
        {
          do
          {
            long long v31 = *(_OWORD *)(v23 - 28);
            *((_OWORD *)v30 - 1) = *((_OWORD *)v23 - 1);
            *(_OWORD *)(v30 - 28) = v31;
            v30 -= 28;
            v23 -= 28;
          }
          while (v23 != v24);
          a7 = v32;
          unint64_t v23 = *v32;
          int v17 = v29 + 28;
          *uint64_t v32 = v30;
          v32[1] = v29 + 28;
          v32[2] = &v28[28 * v27];
          if (!v23) {
            goto LABEL_8;
          }
        }
        operator delete(v23);
      }
LABEL_8:
      a7[1] = v17;
LABEL_9:
      v14 += 16;
    }
    while (v14 != v15);
  }
}

uint64_t sub_91386C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int *a5, int *a6, unsigned char *a7)
{
  uint64_t v7 = *(void *)(a1 + 11688);
  unint64_t v8 = *(unsigned int *)a7;
  if (a7[4])
  {
    uint64_t v11 = *(void *)(v7 + 8);
    uint64_t result = v7 + 8;
    uint64_t v10 = v11;
  }
  else
  {
    uint64_t v12 = *(void *)(v7 + 32);
    uint64_t result = v7 + 32;
    uint64_t v10 = v12;
  }
  if (0x823EE08FB823EE09 * ((*(void *)(result + 8) - v10) >> 3) <= v8) {
    sub_66748();
  }
  uint64_t v13 = v10 + 456 * v8;
  uint64_t v14 = *(void *)(v13 + 424);
  uint64_t v15 = *(void *)(v13 + 432);
  if (v14 != v15)
  {
    if (a4) {
      BOOL v16 = HIDWORD(a4) == -1;
    }
    else {
      BOOL v16 = 1;
    }
    int v17 = !v16;
    int v18 = *a5;
    int v19 = *a6;
    while (1)
    {
      if (*(_DWORD *)(v14 + 8) || *(void *)v14 != a2) {
        goto LABEL_16;
      }
      int v22 = *(unsigned __int8 *)(v14 + 96);
      if (!*(unsigned char *)(v14 + 96))
      {
        uint64_t result = 1;
        a7[23] = 1;
        BOOL v21 = 0;
        a7[24] |= 1u;
        if (v22) {
          goto LABEL_71;
        }
        goto LABEL_15;
      }
      uint64_t v24 = *(void **)(v14 + 16);
      unint64_t v23 = *(void **)(v14 + 24);
      if (v24 != v23 && a3 != 0)
      {
        if (!v17) {
          goto LABEL_16;
        }
        while (*v24 != a4)
        {
          if (++v24 == v23) {
            goto LABEL_16;
          }
        }
        if (v24 == v23) {
          goto LABEL_16;
        }
      }
      if (!*(unsigned char *)(v14 + 40)) {
        break;
      }
      unint64_t v27 = *(_DWORD **)(v14 + 72);
      unint64_t v26 = *(_DWORD **)(v14 + 80);
      char v28 = 1;
      if (v27 == v26) {
        goto LABEL_48;
      }
      if (!a3) {
        goto LABEL_48;
      }
      char v28 = 0;
      if (!v18) {
        goto LABEL_48;
      }
      int v29 = a5[1];
      if (v29 == -1) {
        goto LABEL_48;
      }
      int v30 = a5[2];
      if (!v30) {
        goto LABEL_48;
      }
      int v31 = a5[3];
      if (v31 == -1) {
        goto LABEL_48;
      }
      while (*v27 != v18 || v27[1] != v29 || v27[2] != v30 || v27[3] != v31)
      {
        v27 += 4;
        if (v27 == v26)
        {
          unint64_t v27 = *(_DWORD **)(v14 + 80);
          break;
        }
      }
      a7[23] |= v27 != v26;
      if (!*(unsigned char *)(v14 + 41))
      {
LABEL_69:
        uint64_t result = 0;
        goto LABEL_70;
      }
LABEL_49:
      unint64_t v33 = *(_DWORD **)(v14 + 48);
      uint64_t v32 = *(_DWORD **)(v14 + 56);
      if (v33 == v32 || a3 == 0)
      {
        uint64_t result = 1;
        BOOL v21 = 0;
        a7[24] |= 1u;
        if (v22) {
          goto LABEL_71;
        }
        goto LABEL_15;
      }
      uint64_t result = 0;
      if (v19)
      {
        int v35 = a6[1];
        if (v35 != -1)
        {
          int v36 = a6[2];
          if (v36)
          {
            int v37 = a6[3];
            if (v37 != -1)
            {
              while (*v33 != v19 || v33[1] != v35 || v33[2] != v36 || v33[3] != v37)
              {
                v33 += 4;
                if (v33 == v32)
                {
                  unint64_t v33 = *(_DWORD **)(v14 + 56);
                  break;
                }
              }
              uint64_t result = v33 != v32;
              BOOL v21 = 0;
              a7[24] |= result;
              if (!v22) {
                goto LABEL_15;
              }
LABEL_71:
              if (*(unsigned char *)(v14 + 42))
              {
                uint64_t v20 = *(void *)(v14 + 48);
                uint64_t v38 = *(void *)(v14 + 56);
                BOOL v21 = 1;
                if (v20 != v38)
                {
                  if (a3)
                  {
                    BOOL v21 = 0;
                    if (v19)
                    {
                      int v39 = a6[1];
                      if (v39 != -1)
                      {
                        uint64_t result = a6[2];
                        if (result)
                        {
                          unsigned int v40 = a6[3];
                          if (v40 != -1)
                          {
                            while (*(_DWORD *)v20 != v19
                                 || *(_DWORD *)(v20 + 4) != v39
                                 || *(void *)(v20 + 8) != __PAIR64__(v40, result))
                            {
                              v20 += 16;
                              if (v20 == v38)
                              {
                                uint64_t v20 = *(void *)(v14 + 56);
                                break;
                              }
                            }
                            BOOL v21 = v20 != v38;
                          }
                        }
                      }
                    }
                  }
                }
              }
              goto LABEL_15;
            }
          }
        }
      }
LABEL_70:
      BOOL v21 = 0;
      a7[24] = a7[24];
      if (v22) {
        goto LABEL_71;
      }
LABEL_15:
      a7[25] |= v21;
LABEL_16:
      v14 += 104;
      if (v14 == v15) {
        return result;
      }
    }
    char v28 = 0;
LABEL_48:
    a7[23] |= v28;
    if (!*(unsigned char *)(v14 + 41)) {
      goto LABEL_69;
    }
    goto LABEL_49;
  }
  return result;
}

void sub_913BD0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, void *a6)
{
  uint64_t v37 = a2;
  uint64_t v10 = sub_36F918((void *)(*(void *)(a1 + 11688) + 184), &v37);
  if (v10)
  {
    uint64_t v12 = v10 + 3;
  }
  else if (atomic_load_explicit((atomic_uchar *volatile)&qword_24F72C8, memory_order_acquire))
  {
    uint64_t v12 = &qword_24F72B0;
  }
  else
  {
    uint64_t v12 = &qword_24F72B0;
    if (__cxa_guard_acquire(&qword_24F72C8))
    {
      qword_24F72B0 = 0;
      *(void *)algn_24F72B8 = 0;
      qword_24F72C0 = 0;
      __cxa_guard_release(&qword_24F72C8);
    }
  }
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  if (*v12 != v14)
  {
    *(void *)&long long v11 = 257;
    int v36 = a3;
    do
    {
      int v16 = *(_DWORD *)(v13 + 8);
      if (v16 > a5) {
        goto LABEL_9;
      }
      int v17 = *(_DWORD *)(v13 + 12);
      if (v17 < (int)a4) {
        goto LABEL_9;
      }
      char v18 = *(unsigned char *)(v13 + 4);
      if (a3)
      {
        if (!*(unsigned char *)(v13 + 4)) {
          goto LABEL_9;
        }
      }
      int v19 = *(_DWORD *)v13;
      BOOL v20 = v17 == 0x7FFFFFFF || v16 == 0x7FFFFFFF;
      if (v20 || v19 == -1) {
        goto LABEL_9;
      }
      unint64_t v23 = (char *)a6[1];
      unint64_t v22 = a6[2];
      if ((unint64_t)v23 < v22)
      {
        *(_DWORD *)unint64_t v23 = v19;
        v23[4] = v18;
        *((_DWORD *)v23 + 2) = v16;
        *((_DWORD *)v23 + 3) = v17;
        *((void *)v23 + 2) = 0x100000001000000;
        uint64_t v15 = v23 + 28;
        *((_DWORD *)v23 + 6) = v11;
      }
      else
      {
        uint64_t v33 = a4;
        int v34 = (char **)a6;
        uint64_t v24 = (char *)*a6;
        uint64_t v25 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v23[-*a6] >> 2);
        unint64_t v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) > 0x924924924924924) {
          sub_2E00();
        }
        unint64_t v27 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v22 - (void)v24) >> 2);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x492492492492492) {
          unint64_t v26 = 0x924924924924924;
        }
        long long v35 = v11;
        unint64_t v32 = v26;
        if (v26)
        {
          if (v26 > 0x924924924924924) {
            sub_188D718();
          }
          char v28 = (char *)operator new(28 * v26);
          long long v11 = v35;
        }
        else
        {
          char v28 = 0;
        }
        int v29 = &v28[28 * v25];
        *(_DWORD *)int v29 = v19;
        v29[4] = v18;
        *((_DWORD *)v29 + 2) = v16;
        *((_DWORD *)v29 + 3) = v17;
        *((void *)v29 + 2) = 0x100000001000000;
        *((_DWORD *)v29 + 6) = v11;
        int v30 = v29;
        if (v23 == v24)
        {
          a4 = v33;
          a6 = v34;
          uint64_t v15 = v29 + 28;
          *int v34 = v29;
          v34[1] = v29 + 28;
          v34[2] = &v28[28 * v32];
          if (!v23) {
            goto LABEL_8;
          }
        }
        else
        {
          a6 = v34;
          do
          {
            long long v31 = *(_OWORD *)(v23 - 28);
            *((_OWORD *)v30 - 1) = *((_OWORD *)v23 - 1);
            *(_OWORD *)(v30 - 28) = v31;
            v30 -= 28;
            v23 -= 28;
          }
          while (v23 != v24);
          unint64_t v23 = *v34;
          uint64_t v15 = v29 + 28;
          *int v34 = v30;
          v34[1] = v29 + 28;
          v34[2] = &v28[28 * v32];
          a4 = v33;
          if (!v23) {
            goto LABEL_8;
          }
        }
        operator delete(v23);
        long long v11 = v35;
      }
LABEL_8:
      a6[1] = v15;
      a3 = v36;
LABEL_9:
      v13 += 16;
    }
    while (v13 != v14);
  }
}

char *sub_913EAC(uint64_t a1, uint64_t a2, char *__src, char *a4, uint64_t a5)
{
  unint64_t v5 = *(void *)a1;
  uint64_t v6 = a2 - *(void *)a1;
  uint64_t v7 = (char *)(*(void *)a1 + (v6 & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = a5 - 1;
  if (a5 < 1) {
    return v7;
  }
  uint64_t v12 = v6 >> 3;
  uint64_t v14 = *(char **)(a1 + 8);
  uint64_t v13 = *(void *)(a1 + 16);
  if (a5 > (v13 - (uint64_t)v14) >> 3)
  {
    unint64_t v15 = a5 + ((uint64_t)&v14[-v5] >> 3);
    if (v15 >> 61) {
      sub_2E00();
    }
    uint64_t v16 = v13 - v5;
    if (v16 >> 2 > v15) {
      unint64_t v15 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      if (v17 >> 61) {
        sub_188D718();
      }
      char v18 = operator new(8 * v17);
      uint64_t v12 = v6 >> 3;
    }
    else
    {
      char v18 = 0;
    }
    int v39 = &v18[8 * v12];
    unsigned int v40 = &v39[8 * a5];
    long long v41 = v39;
    long long v42 = __src;
    if ((v8 & 0x1FFFFFFFFFFFFFFFuLL) < 7) {
      goto LABEL_55;
    }
    long long v41 = &v18[8 * v12];
    long long v42 = __src;
    if ((unint64_t)(&v18[v6 & 0xFFFFFFFFFFFFFFF8] - __src) < 0x20) {
      goto LABEL_55;
    }
    uint64_t v43 = (v8 & 0x1FFFFFFFFFFFFFFFLL) + 1;
    uint64_t v44 = 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
    long long v41 = &v39[v44];
    long long v42 = &__src[v44];
    long long v45 = (long long *)(__src + 16);
    uint64_t v46 = &v18[8 * v12 + 16];
    uint64_t v47 = v43 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v48 = *v45;
      *(v46 - 1) = *(v45 - 1);
      *uint64_t v46 = v48;
      v45 += 2;
      v46 += 2;
      v47 -= 4;
    }
    while (v47);
    if (v43 != (v43 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_55:
      do
      {
        uint64_t v49 = *(void *)v42;
        v42 += 8;
        *(void *)long long v41 = v49;
        v41 += 8;
      }
      while (v41 != v40);
    }
    size_t v50 = *(char **)a1;
    if (*(char **)a1 == v7)
    {
      unint64_t v52 = &v18[8 * v12];
      unint64_t v56 = &v18[8 * v17];
      uint64_t v57 = v14 - v7;
      if (v14 == v7) {
        goto LABEL_39;
      }
    }
    else
    {
      uint64_t v51 = v7;
      unint64_t v52 = &v18[8 * v12];
      do
      {
        int v53 = *((_DWORD *)v51 - 2);
        v51 -= 8;
        char v54 = v51[4];
        *((_DWORD *)v52 - 2) = v53;
        v52 -= 8;
        v52[4] = v54;
      }
      while (v51 != v50);
      uint8x8_t v55 = *(unsigned char **)(a1 + 8);
      unint64_t v56 = &v18[8 * v17];
      uint64_t v57 = v55 - v7;
      if (v55 == v7) {
        goto LABEL_39;
      }
    }
    memmove(v40, v7, v57 - 3);
LABEL_39:
    unint64_t v58 = *(void **)a1;
    *(void *)a1 = v52;
    *(void *)(a1 + 8) = &v40[v57];
    *(void *)(a1 + 16) = v56;
    if (v58) {
      operator delete(v58);
    }
    return v39;
  }
  uint64_t v19 = (v14 - v7) >> 3;
  if (v19 >= a5)
  {
    BOOL v20 = &__src[8 * a5];
    unint64_t v22 = *(char **)(a1 + 8);
    goto LABEL_18;
  }
  BOOL v20 = &__src[8 * v19];
  int64_t v21 = a4 - v20;
  if (a4 != v20)
  {
    memmove(*(void **)(a1 + 8), &__src[8 * v19], v21 - 3);
    uint64_t v12 = v6 >> 3;
  }
  unint64_t v22 = &v14[v21];
  *(void *)(a1 + 8) = &v14[v21];
  if (v14 - v7 >= 1)
  {
LABEL_18:
    unint64_t v23 = &v7[8 * a5];
    uint64_t v24 = v22 - v23;
    uint64_t v25 = (v22 - v23) >> 3;
    unint64_t v26 = &v22[-8 * a5];
    unint64_t v27 = v22;
    if (v26 < v14)
    {
      uint64_t v28 = (v6 & 0xFFFFFFFFFFFFFFF8) + v24;
      int v29 = (char *)(v28 + v5);
      unint64_t v30 = v28 + v5 + 8;
      if ((unint64_t)v14 > v30) {
        unint64_t v30 = (unint64_t)v14;
      }
      unint64_t v31 = v30 + ~v5 - v28;
      if (v31 < 0x58)
      {
        unint64_t v27 = v22;
      }
      else
      {
        unint64_t v32 = v22 - v29;
        unint64_t v27 = v22;
        if (v32 >= 0x20)
        {
          uint64_t v33 = (v31 >> 3) + 1;
          uint64_t v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
          v26 += v34;
          unint64_t v27 = &v22[v34];
          long long v35 = v22 + 16;
          int v36 = (long long *)(8 * v25 + 8 * v12 + v5 + 16);
          uint64_t v37 = v33 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v38 = *v36;
            *(v35 - 1) = *(v36 - 1);
            *long long v35 = v38;
            v35 += 2;
            v36 += 2;
            v37 -= 4;
          }
          while (v37);
          if (v33 == (v33 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_46;
          }
        }
      }
      do
      {
        uint64_t v59 = *(void *)v26;
        v26 += 8;
        *(void *)unint64_t v27 = v59;
        v27 += 8;
      }
      while (v26 < v14);
    }
LABEL_46:
    *(void *)(a1 + 8) = v27;
    if (v22 != v23) {
      memmove(&v22[-8 * v25], v7, v24 - 3);
    }
    if (v20 != __src) {
      memmove(v7, __src, v20 - __src - 3);
    }
  }
  return v7;
}

uint64_t sub_9141E8(uint64_t result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = (void *)result;
LABEL_2:
  uint64_t v11 = (uint64_t)v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = (void *)v11;
    uint64_t v13 = v12;
    uint64_t v14 = (uint64_t)a2 - v11;
    unint64_t v15 = ((uint64_t)a2 - v11) >> 3;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unint64_t v26 = a2 - 2;
          unsigned int v27 = *(a2 - 2);
          if (v27 < *(_DWORD *)v11
            || *(_DWORD *)v11 >= v27 && *((unsigned __int8 *)a2 - 4) < *(unsigned __int8 *)(v11 + 4))
          {
            uint64_t v28 = *(void *)v11;
            int v29 = *v26;
            *(unsigned char *)(v11 + 4) = *((unsigned char *)a2 - 4);
            *(_DWORD *)uint64_t v11 = v29;
            *unint64_t v26 = v28;
            *((unsigned char *)a2 - 4) = BYTE4(v28);
          }
          break;
        case 3uLL:
          uint64_t result = sub_9147C8((uint64_t *)v11, (unsigned int *)(v11 + 8), (unsigned int *)a2 - 2);
          break;
        case 4uLL:
          unint64_t v30 = (int *)(v11 + 8);
          unint64_t v31 = (int *)(v11 + 16);
          uint64_t result = sub_9147C8((uint64_t *)v11, (unsigned int *)(v11 + 8), (unsigned int *)(v11 + 16));
          unint64_t v32 = a2 - 2;
          unsigned int v33 = *(a2 - 2);
          unsigned int v34 = *(_DWORD *)(v11 + 16);
          if (v33 < v34 || v34 >= v33 && *((unsigned __int8 *)a2 - 4) < *(unsigned __int8 *)(v11 + 20))
          {
            uint64_t v35 = *(void *)(v11 + 16);
            int v36 = *v32;
            *(unsigned char *)(v11 + 20) = *((unsigned char *)a2 - 4);
            *unint64_t v31 = v36;
            *unint64_t v32 = v35;
            *((unsigned char *)a2 - 4) = BYTE4(v35);
            unsigned int v37 = *(_DWORD *)(v11 + 8);
            unsigned int v38 = *(_DWORD *)(v11 + 16);
            if (v38 < v37
              || v37 >= v38 && *(unsigned __int8 *)(v11 + 20) < *(unsigned __int8 *)(v11 + 12))
            {
              uint64_t v39 = *(void *)(v11 + 8);
              *(unsigned char *)(v11 + 12) = *(unsigned char *)(v11 + 20);
              *unint64_t v30 = *v31;
              *(_DWORD *)(v11 + 16) = v39;
              *(unsigned char *)(v11 + 20) = BYTE4(v39);
              unsigned int v40 = *(_DWORD *)(v11 + 8);
              if (v40 < *(_DWORD *)v11
                || *(_DWORD *)v11 >= v40 && *(unsigned __int8 *)(v11 + 12) < *(unsigned __int8 *)(v11 + 4))
              {
                uint64_t v41 = *(void *)v11;
                *(_DWORD *)uint64_t v11 = *v30;
                *(unsigned char *)(v11 + 4) = *(unsigned char *)(v11 + 12);
                *(_DWORD *)(v11 + 8) = v41;
                *(unsigned char *)(v11 + 12) = BYTE4(v41);
              }
            }
          }
          break;
        case 5uLL:
          uint64_t result = sub_914F54(v11, (unsigned int *)(v11 + 8), (unsigned int *)(v11 + 16), (unsigned int *)(v11 + 24), (unsigned int *)a2 - 2);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if ((int *)v11 != a2)
      {
        return (uint64_t)sub_9151C0(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    unint64_t v17 = v11 + 8 * (v15 >> 1);
    if ((unint64_t)v14 >= 0x401)
    {
      sub_9147C8((uint64_t *)v11, (unsigned int *)(v11 + 8 * (v15 >> 1)), (unsigned int *)a2 - 2);
      uint64_t v18 = 8 * v16;
      uint64_t v19 = (unsigned int *)(8 * v16 + v11 - 8);
      sub_9147C8((uint64_t *)(v11 + 8), v19, (unsigned int *)a2 - 4);
      sub_9147C8((uint64_t *)(v11 + 16), (unsigned int *)(v11 + 8 + v18), (unsigned int *)a2 - 6);
      sub_9147C8((uint64_t *)v19, (unsigned int *)v17, (unsigned int *)(v11 + 8 + v18));
      uint64_t v20 = *(void *)v11;
      char v21 = *(unsigned char *)(v17 + 4);
      *(_DWORD *)uint64_t v11 = *(_DWORD *)v17;
      *(unsigned char *)(v11 + 4) = v21;
      *(_DWORD *)unint64_t v17 = v20;
      *(unsigned char *)(v17 + 4) = BYTE4(v20);
      if (a5) {
        goto LABEL_16;
      }
    }
    else
    {
      sub_9147C8((uint64_t *)(v11 + 8 * (v15 >> 1)), (unsigned int *)v11, (unsigned int *)a2 - 2);
      if (a5) {
        goto LABEL_16;
      }
    }
    unsigned int v22 = *(_DWORD *)(v11 - 8);
    if (v22 >= *(_DWORD *)v11
      && (*(_DWORD *)v11 < v22 || *(unsigned __int8 *)(v11 - 4) >= *(unsigned __int8 *)(v11 + 4)))
    {
      uint64_t result = (uint64_t)sub_914964((unsigned int *)v11, (uint64_t *)a2);
      uint64_t v11 = result;
      goto LABEL_21;
    }
LABEL_16:
    unint64_t v23 = sub_914AA0((unsigned int *)v11, (unint64_t)a2);
    if ((v24 & 1) == 0) {
      goto LABEL_19;
    }
    BOOL v25 = sub_914BE4(v11, v23);
    uint64_t v11 = v23 + 8;
    uint64_t result = sub_914BE4(v23 + 8, (uint64_t)a2);
    if (result)
    {
      a4 = -v13;
      a2 = (int *)v23;
      if (v25) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v25)
    {
LABEL_19:
      uint64_t result = sub_9141E8(v10, v23, a3, -v13, a5 & 1);
      uint64_t v11 = v23 + 8;
LABEL_21:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  long long v42 = (int *)(v11 + 8);
  BOOL v44 = (int *)v11 == a2 || v42 == a2;
  if (a5)
  {
    if (!v44)
    {
      uint64_t v45 = 0;
      uint64_t v46 = (void *)v11;
      do
      {
        long long v48 = v46;
        uint64_t v46 = v42;
        unsigned int v49 = *((_DWORD *)v48 + 2);
        if (v49 < *(_DWORD *)v48
          || *(_DWORD *)v48 >= v49 && *((unsigned __int8 *)v48 + 12) < *((unsigned __int8 *)v48 + 4))
        {
          uint64_t v50 = v48[1];
          *(_DWORD *)uint64_t v46 = *(_DWORD *)v48;
          *((unsigned char *)v46 + 4) = *((unsigned char *)v48 + 4);
          uint64_t v47 = v11;
          if (v48 != (void *)v11)
          {
            uint64_t v51 = v45;
            while (1)
            {
              uint64_t v52 = v11 + v51;
              unsigned int v53 = *(_DWORD *)(v11 + v51 - 8);
              if (v53 <= v50)
              {
                if (v53 < v50)
                {
                  uint64_t v47 = v11 + v51;
                  goto LABEL_49;
                }
                if (*(unsigned __int8 *)(v52 - 4) <= BYTE4(v50)) {
                  break;
                }
              }
              --v48;
              *(_DWORD *)uint64_t v52 = *(_DWORD *)(v11 + v51 - 8);
              *(unsigned char *)(v52 + 4) = *(unsigned char *)(v11 + v51 - 4);
              v51 -= 8;
              if (!v51)
              {
                uint64_t v47 = v11;
                goto LABEL_49;
              }
            }
            uint64_t v47 = (uint64_t)v48;
          }
LABEL_49:
          *(_DWORD *)uint64_t v47 = v50;
          *(unsigned char *)(v47 + 4) = BYTE4(v50);
        }
        long long v42 = (int *)(v46 + 1);
        v45 += 8;
      }
      while (v46 + 1 != (void *)a2);
    }
  }
  else if (!v44)
  {
    do
    {
      char v54 = v10;
      uint64_t v10 = v42;
      unsigned int v55 = *((_DWORD *)v54 + 2);
      if (v55 < *(_DWORD *)v54
        || *(_DWORD *)v54 >= v55 && *((unsigned __int8 *)v54 + 12) < *((unsigned __int8 *)v54 + 4))
      {
        uint64_t v56 = *(void *)v42;
        do
        {
          do
          {
            uint64_t v57 = v54;
            *((_DWORD *)v54 + 2) = *(_DWORD *)v54;
            *((unsigned char *)v54 + 12) = *((unsigned char *)v54 + 4);
            unsigned int v58 = *((_DWORD *)v54-- - 2);
            BOOL v59 = v58 >= v56;
          }
          while (v58 > v56);
        }
        while (v59 && *((unsigned __int8 *)v57 - 4) > BYTE4(v56));
        *(_DWORD *)uint64_t v57 = v56;
        *((unsigned char *)v57 + 4) = BYTE4(v56);
      }
      v42 += 2;
    }
    while (v10 + 1 != (void *)a2);
  }
  return result;
}

uint64_t sub_9147C8(uint64_t *a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3 = *a2;
  if (*a2 >= *(_DWORD *)a1
    && (*(_DWORD *)a1 < v3 || *((unsigned __int8 *)a2 + 4) >= *((unsigned __int8 *)a1 + 4)))
  {
    if (*a3 < v3) {
      goto LABEL_7;
    }
    if (v3 < *a3) {
      return 0;
    }
    if (*((unsigned __int8 *)a3 + 4) < *((unsigned __int8 *)a2 + 4))
    {
LABEL_7:
      uint64_t v7 = *(void *)a2;
      unsigned int v8 = *a3;
      *((unsigned char *)a2 + 4) = *((unsigned char *)a3 + 4);
      *a2 = v8;
      *a3 = v7;
      *((unsigned char *)a3 + 4) = BYTE4(v7);
      if (*a2 < *(_DWORD *)a1) {
        goto LABEL_8;
      }
      if (*(_DWORD *)a1 < *a2) {
        return 1;
      }
      if (*((unsigned __int8 *)a2 + 4) < *((unsigned __int8 *)a1 + 4))
      {
LABEL_8:
        uint64_t v9 = *a1;
        unsigned int v10 = *a2;
        *((unsigned char *)a1 + 4) = *((unsigned char *)a2 + 4);
        *(_DWORD *)a1 = v10;
        uint64_t result = 2;
        *a2 = v9;
        *((unsigned char *)a2 + 4) = BYTE4(v9);
        return result;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (*a3 < v3 || v3 >= *a3 && *((unsigned __int8 *)a3 + 4) < *((unsigned __int8 *)a2 + 4))
    {
      uint64_t v4 = *a1;
      unsigned int v5 = *a3;
      *((unsigned char *)a1 + 4) = *((unsigned char *)a3 + 4);
      *(_DWORD *)a1 = v5;
      uint64_t result = 1;
      *a3 = v4;
      *((unsigned char *)a3 + 4) = BYTE4(v4);
      return result;
    }
    uint64_t v11 = *a1;
    unsigned int v12 = *a2;
    *((unsigned char *)a1 + 4) = *((unsigned char *)a2 + 4);
    *(_DWORD *)a1 = v12;
    *a2 = v11;
    *((unsigned char *)a2 + 4) = BYTE4(v11);
    if (*a3 < v11) {
      goto LABEL_12;
    }
    if (*a3 <= v11)
    {
      if (*((unsigned __int8 *)a3 + 4) < BYTE4(v11))
      {
LABEL_12:
        uint64_t v13 = *(void *)a2;
        unsigned int v14 = *a3;
        *((unsigned char *)a2 + 4) = *((unsigned char *)a3 + 4);
        *a2 = v14;
        uint64_t result = 2;
        *a3 = v13;
        *((unsigned char *)a3 + 4) = BYTE4(v13);
        return result;
      }
      return 1;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t *sub_914964(unsigned int *a1, uint64_t *a2)
{
  unsigned int v2 = *((unsigned __int8 *)a1 + 4);
  unsigned int v3 = *a1;
  unsigned int v4 = *((_DWORD *)a2 - 2);
  if (v4 <= *a1 && (v4 < v3 || *((unsigned __int8 *)a2 - 4) <= v2))
  {
    for (uint64_t i = (uint64_t *)(a1 + 2);
          i < a2 && *(_DWORD *)i <= v3 && (*(_DWORD *)i < v3 || *((unsigned __int8 *)i + 4) <= v2);
  }
  else
  {
    uint64_t i = (uint64_t *)a1;
    do
    {
      unsigned int v7 = *((_DWORD *)i++ + 2);
      unsigned int v6 = v7;
    }
    while (v7 <= v3 && (v6 < v3 || *((unsigned __int8 *)i + 4) <= v2));
  }
  if (i < a2)
  {
    for (--a2; v4 > v3 || v4 >= v3 && *((unsigned __int8 *)a2 + 4) > v2; --a2)
    {
      unsigned int v8 = *((_DWORD *)a2 - 2);
      unsigned int v4 = v8;
    }
  }
  while (i < a2)
  {
    uint64_t v9 = *i;
    int v10 = *(_DWORD *)a2;
    *((unsigned char *)i + 4) = *((unsigned char *)a2 + 4);
    *(_DWORD *)uint64_t i = v10;
    *(_DWORD *)a2 = v9;
    *((unsigned char *)a2 + 4) = BYTE4(v9);
    do
    {
      unsigned int v12 = *((_DWORD *)i++ + 2);
      unsigned int v11 = v12;
    }
    while (v12 <= v3 && (v11 < v3 || *((unsigned __int8 *)i + 4) <= v2));
    do
    {
      do
      {
        unsigned int v13 = *((_DWORD *)a2-- - 2);
        BOOL v14 = v13 >= v3;
      }
      while (v13 > v3);
    }
    while (v14 && *((unsigned __int8 *)a2 + 4) > v2);
  }
  if (i - 1 != (uint64_t *)a1)
  {
    unsigned int v15 = *((_DWORD *)i - 2);
    *((unsigned char *)a1 + 4) = *((unsigned char *)i - 4);
    *a1 = v15;
  }
  *((_DWORD *)i - 2) = v3;
  *((unsigned char *)i - 4) = v2;
  return i;
}

unint64_t sub_914AA0(unsigned int *a1, unint64_t a2)
{
  uint64_t v2 = 0;
  unsigned int v3 = *a1;
  unsigned int v4 = *((unsigned __int8 *)a1 + 4);
  while (1)
  {
    unsigned int v5 = a1[v2 + 2];
    if (v5 >= v3 && (v5 > v3 || LOBYTE(a1[v2 + 3]) >= v4)) {
      break;
    }
    v2 += 2;
  }
  unint64_t v6 = (unint64_t)&a1[v2 + 2];
  if (v2 * 4)
  {
    do
    {
      unsigned int v8 = *(_DWORD *)(a2 - 8);
      a2 -= 8;
      unsigned int v7 = v8;
    }
    while (v8 >= v3 && (v7 > v3 || *(unsigned __int8 *)(a2 + 4) >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < a2)
    {
      do
      {
        unsigned int v10 = *(_DWORD *)(a2 - 8);
        a2 -= 8;
        unsigned int v9 = v10;
        if (v10 < v3) {
          break;
        }
        if (v9 > v3) {
          goto LABEL_19;
        }
      }
      while (*(unsigned __int8 *)(a2 + 4) >= v4 && v6 < a2);
    }
  }
  unint64_t v12 = v6;
  if (v6 < a2)
  {
    unint64_t v13 = a2;
    do
    {
      uint64_t v14 = *(void *)v12;
      int v15 = *(_DWORD *)v13;
      *(unsigned char *)(v12 + 4) = *(unsigned char *)(v13 + 4);
      *(_DWORD *)unint64_t v12 = v15;
      *(_DWORD *)unint64_t v13 = v14;
      *(unsigned char *)(v13 + 4) = BYTE4(v14);
      do
      {
        do
        {
          unsigned int v16 = *(_DWORD *)(v12 + 8);
          v12 += 8;
          BOOL v17 = v16 > v3;
        }
        while (v16 < v3);
      }
      while (!v17 && *(unsigned __int8 *)(v12 + 4) < v4);
      do
      {
        unsigned int v19 = *(_DWORD *)(v13 - 8);
        v13 -= 8;
        unsigned int v18 = v19;
      }
      while (v19 >= v3 && (v18 > v3 || *(unsigned __int8 *)(v13 + 4) >= v4));
    }
    while (v12 < v13);
  }
  if ((unsigned int *)(v12 - 8) != a1)
  {
    unsigned int v20 = *(_DWORD *)(v12 - 8);
    *((unsigned char *)a1 + 4) = *(unsigned char *)(v12 - 4);
    *a1 = v20;
  }
  *(_DWORD *)(v12 - 8) = v3;
  *(unsigned char *)(v12 - 4) = v4;
  return v12 - 8;
}

BOOL sub_914BE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v15 = (int *)(a2 - 8);
      unsigned int v16 = *(_DWORD *)(a2 - 8);
      if (v16 < *(_DWORD *)a1
        || *(_DWORD *)a1 >= v16 && *(unsigned __int8 *)(a2 - 4) < *(unsigned __int8 *)(a1 + 4))
      {
        uint64_t v17 = *(void *)a1;
        int v18 = *v15;
        *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 - 4);
        *(_DWORD *)a1 = v18;
        *int v15 = v17;
        *(unsigned char *)(a2 - 4) = BYTE4(v17);
      }
      return result;
    case 3:
      sub_9147C8((uint64_t *)a1, (unsigned int *)(a1 + 8), (unsigned int *)(a2 - 8));
      return 1;
    case 4:
      unsigned int v19 = (_DWORD *)(a1 + 8);
      unsigned int v20 = (_DWORD *)(a1 + 16);
      sub_9147C8((uint64_t *)a1, (unsigned int *)(a1 + 8), (unsigned int *)(a1 + 16));
      char v21 = (int *)(a2 - 8);
      unsigned int v22 = *(_DWORD *)(a2 - 8);
      unsigned int v23 = *(_DWORD *)(a1 + 16);
      if (v22 >= v23 && (v23 < v22 || *(unsigned __int8 *)(a2 - 4) >= *(unsigned __int8 *)(a1 + 20))) {
        return 1;
      }
      uint64_t v24 = *(void *)(a1 + 16);
      int v25 = *v21;
      *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 - 4);
      *unsigned int v20 = v25;
      *char v21 = v24;
      *(unsigned char *)(a2 - 4) = BYTE4(v24);
      unsigned int v26 = *(_DWORD *)(a1 + 8);
      unsigned int v27 = *(_DWORD *)(a1 + 16);
      if (v27 >= v26 && (v26 < v27 || *(unsigned __int8 *)(a1 + 20) >= *(unsigned __int8 *)(a1 + 12))) {
        return 1;
      }
      uint64_t v28 = *(void *)(a1 + 8);
      *(unsigned char *)(a1 + 12) = *(unsigned char *)(a1 + 20);
      *unsigned int v19 = *v20;
      *(_DWORD *)(a1 + 16) = v28;
      *(unsigned char *)(a1 + 20) = BYTE4(v28);
      unsigned int v29 = *(_DWORD *)(a1 + 8);
      if (v29 >= *(_DWORD *)a1
        && (*(_DWORD *)a1 < v29 || *(unsigned __int8 *)(a1 + 12) >= *(unsigned __int8 *)(a1 + 4)))
      {
        return 1;
      }
      uint64_t v30 = *(void *)a1;
      *(_DWORD *)a1 = *v19;
      *(unsigned char *)(a1 + 4) = *(unsigned char *)(a1 + 12);
      *(_DWORD *)(a1 + 8) = v30;
      *(unsigned char *)(a1 + 12) = BYTE4(v30);
      return 1;
    case 5:
      sub_914F54(a1, (unsigned int *)(a1 + 8), (unsigned int *)(a1 + 16), (unsigned int *)(a1 + 24), (unsigned int *)(a2 - 8));
      return 1;
    default:
      uint64_t v6 = a1 + 16;
      sub_9147C8((uint64_t *)a1, (unsigned int *)(a1 + 8), (unsigned int *)(a1 + 16));
      uint64_t v7 = a1 + 24;
      if (a1 + 24 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (1)
  {
    if (*(_DWORD *)v7 < *(_DWORD *)v6
      || *(_DWORD *)v6 >= *(_DWORD *)v7 && *(unsigned __int8 *)(v7 + 4) < *(unsigned __int8 *)(v6 + 4))
    {
      uint64_t v11 = *(void *)v7;
      *(_DWORD *)uint64_t v7 = *(_DWORD *)v6;
      *(unsigned char *)(v7 + 4) = *(unsigned char *)(v6 + 4);
      uint64_t v10 = a1;
      if (v6 != a1)
      {
        uint64_t v12 = v8;
        while (1)
        {
          uint64_t v13 = a1 + v12;
          unsigned int v14 = *(_DWORD *)(a1 + v12 + 8);
          if (v14 <= v11)
          {
            if (v14 < v11)
            {
              uint64_t v10 = v6;
              goto LABEL_6;
            }
            if (*(unsigned __int8 *)(v13 + 12) <= BYTE4(v11)) {
              break;
            }
          }
          v6 -= 8;
          *(_DWORD *)(v13 + 16) = *(_DWORD *)(a1 + v12 + 8);
          *(unsigned char *)(v13 + 20) = *(unsigned char *)(a1 + v12 + 12);
          v12 -= 8;
          if (v12 == -16)
          {
            uint64_t v10 = a1;
            goto LABEL_6;
          }
        }
        uint64_t v10 = a1 + v12 + 16;
      }
LABEL_6:
      *(_DWORD *)uint64_t v10 = v11;
      *(unsigned char *)(v10 + 4) = BYTE4(v11);
      if (++v9 == 8) {
        return v7 + 8 == a2;
      }
    }
    uint64_t v6 = v7;
    v8 += 8;
    v7 += 8;
    if (v7 == a2) {
      return 1;
    }
  }
}

uint64_t sub_914F54(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t result = sub_9147C8((uint64_t *)a1, a2, a3);
  if (*a4 < *a3 || *a3 >= *a4 && *((unsigned __int8 *)a4 + 4) < *((unsigned __int8 *)a3 + 4))
  {
    uint64_t v11 = *(void *)a3;
    unsigned int v12 = *a4;
    *((unsigned char *)a3 + 4) = *((unsigned char *)a4 + 4);
    *a3 = v12;
    *a4 = v11;
    *((unsigned char *)a4 + 4) = BYTE4(v11);
    if (*a3 < *a2 || *a2 >= *a3 && *((unsigned __int8 *)a3 + 4) < *((unsigned __int8 *)a2 + 4))
    {
      uint64_t v13 = *(void *)a2;
      unsigned int v14 = *a3;
      *((unsigned char *)a2 + 4) = *((unsigned char *)a3 + 4);
      *a2 = v14;
      *a3 = v13;
      *((unsigned char *)a3 + 4) = BYTE4(v13);
      if (*a2 < *(_DWORD *)a1
        || *(_DWORD *)a1 >= *a2 && *((unsigned __int8 *)a2 + 4) < *(unsigned __int8 *)(a1 + 4))
      {
        uint64_t v15 = *(void *)a1;
        unsigned int v16 = *a2;
        *(unsigned char *)(a1 + 4) = *((unsigned char *)a2 + 4);
        *(_DWORD *)a1 = v16;
        *a2 = v15;
        *((unsigned char *)a2 + 4) = BYTE4(v15);
      }
    }
  }
  if (*a5 < *a4 || *a4 >= *a5 && *((unsigned __int8 *)a5 + 4) < *((unsigned __int8 *)a4 + 4))
  {
    uint64_t v17 = *(void *)a4;
    unsigned int v18 = *a5;
    *((unsigned char *)a4 + 4) = *((unsigned char *)a5 + 4);
    *a4 = v18;
    *a5 = v17;
    *((unsigned char *)a5 + 4) = BYTE4(v17);
    if (*a4 < *a3 || *a3 >= *a4 && *((unsigned __int8 *)a4 + 4) < *((unsigned __int8 *)a3 + 4))
    {
      uint64_t v19 = *(void *)a3;
      unsigned int v20 = *a4;
      *((unsigned char *)a3 + 4) = *((unsigned char *)a4 + 4);
      *a3 = v20;
      *a4 = v19;
      *((unsigned char *)a4 + 4) = BYTE4(v19);
      if (*a3 < *a2 || *a2 >= *a3 && *((unsigned __int8 *)a3 + 4) < *((unsigned __int8 *)a2 + 4))
      {
        uint64_t v21 = *(void *)a2;
        unsigned int v22 = *a3;
        *((unsigned char *)a2 + 4) = *((unsigned char *)a3 + 4);
        *a2 = v22;
        *a3 = v21;
        *((unsigned char *)a3 + 4) = BYTE4(v21);
        if (*a2 < *(_DWORD *)a1
          || *(_DWORD *)a1 >= *a2 && *((unsigned __int8 *)a2 + 4) < *(unsigned __int8 *)(a1 + 4))
        {
          uint64_t v23 = *(void *)a1;
          unsigned int v24 = *a2;
          *(unsigned char *)(a1 + 4) = *((unsigned char *)a2 + 4);
          *(_DWORD *)a1 = v24;
          *a2 = v23;
          *((unsigned char *)a2 + 4) = BYTE4(v23);
        }
      }
    }
  }
  return result;
}

int *sub_9151C0(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  if ((int *)a1 != a2)
  {
    uint64_t v6 = a2;
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) >> 3;
    if ((uint64_t)a2 - a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      unsigned int v12 = (unsigned int *)(a1 + 8 * v10);
      do
      {
        sub_91548C(a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if (v6 != a3)
    {
      unsigned int v14 = (uint64_t *)v6;
      do
      {
        if (*(_DWORD *)v14 < *(_DWORD *)a1
          || *(_DWORD *)a1 >= *(_DWORD *)v14
          && *((unsigned __int8 *)v14 + 4) < *(unsigned __int8 *)(a1 + 4))
        {
          uint64_t v15 = *v14;
          unsigned int v16 = *(_DWORD *)a1;
          *((unsigned char *)v14 + 4) = *(unsigned char *)(a1 + 4);
          *(_DWORD *)unsigned int v14 = v16;
          *(_DWORD *)a1 = v15;
          *(unsigned char *)(a1 + 4) = BYTE4(v15);
          sub_91548C(a1, a4, v9, (unsigned int *)a1);
        }
        ++v14;
      }
      while (v14 != (uint64_t *)a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 9)
    {
      uint64_t v17 = (unint64_t)v8 >> 3;
      do
      {
        uint64_t v19 = 0;
        uint64_t v20 = *(void *)a1;
        uint64_t v21 = a1;
        do
        {
          uint64_t v23 = v21;
          v21 += 8 * (v19 + 1);
          uint64_t v24 = 2 * v19;
          uint64_t v19 = (2 * v19) | 1;
          uint64_t v25 = v24 + 2;
          if (v25 < v17)
          {
            unsigned int v26 = *(_DWORD *)(v21 + 8);
            if (*(_DWORD *)v21 < v26
              || v26 >= *(_DWORD *)v21 && *(unsigned __int8 *)(v21 + 4) < *(unsigned __int8 *)(v21 + 12))
            {
              v21 += 8;
              uint64_t v19 = v25;
            }
          }
          int v22 = *(_DWORD *)v21;
          *(unsigned char *)(v23 + 4) = *(unsigned char *)(v21 + 4);
          *(_DWORD *)uint64_t v23 = v22;
        }
        while (v19 <= (uint64_t)((unint64_t)(v17 - 2) >> 1));
        v6 -= 2;
        if ((int *)v21 == v6)
        {
          *(_DWORD *)uint64_t v21 = v20;
          *(unsigned char *)(v21 + 4) = BYTE4(v20);
        }
        else
        {
          int v27 = *v6;
          *(unsigned char *)(v21 + 4) = *((unsigned char *)v6 + 4);
          *(_DWORD *)uint64_t v21 = v27;
          *((unsigned char *)v6 + 4) = BYTE4(v20);
          *uint64_t v6 = v20;
          uint64_t v28 = v21 - a1 + 8;
          if (v28 >= 9)
          {
            unint64_t v29 = ((unint64_t)v28 >> 3) - 2;
            unint64_t v30 = v29 >> 1;
            uint64_t v31 = a1 + 8 * (v29 >> 1);
            if (*(_DWORD *)v31 < *(_DWORD *)v21
              || *(_DWORD *)v21 >= *(_DWORD *)v31
              && *(unsigned __int8 *)(v31 + 4) < *(unsigned __int8 *)(v21 + 4))
            {
              uint64_t v32 = *(void *)v21;
              int v33 = *(_DWORD *)v31;
              *(unsigned char *)(v21 + 4) = *(unsigned char *)(v31 + 4);
              *(_DWORD *)uint64_t v21 = v33;
              if (v29 >= 2)
              {
                while (1)
                {
                  unint64_t v36 = v30 - 1;
                  unint64_t v30 = (v30 - 1) >> 1;
                  uint64_t v34 = a1 + 8 * v30;
                  if (*(_DWORD *)v34 >= v32
                    && (*(_DWORD *)v34 > v32 || *(unsigned __int8 *)(v34 + 4) >= BYTE4(v32)))
                  {
                    break;
                  }
                  int v35 = *(_DWORD *)v34;
                  *(unsigned char *)(v31 + 4) = *(unsigned char *)(v34 + 4);
                  *(_DWORD *)uint64_t v31 = v35;
                  uint64_t v31 = a1 + 8 * v30;
                  if (v36 <= 1) {
                    goto LABEL_31;
                  }
                }
              }
              uint64_t v34 = v31;
LABEL_31:
              *(_DWORD *)uint64_t v34 = v32;
              *(unsigned char *)(v34 + 4) = BYTE4(v32);
            }
          }
        }
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_91548C(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = (v4 >> 2) + 1;
      uint64_t v8 = (unsigned int *)(result + 8 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        unsigned int v10 = v8[2];
        if (*v8 < v10 || v10 >= *v8 && *((unsigned __int8 *)v8 + 4) < *((unsigned __int8 *)v8 + 12))
        {
          v8 += 2;
          uint64_t v7 = v9;
        }
      }
      if (*v8 >= *a4 && (*a4 < *v8 || *((unsigned __int8 *)v8 + 4) >= *((unsigned __int8 *)a4 + 4)))
      {
        unsigned int v11 = *a4;
        unsigned int v12 = *((unsigned __int8 *)a4 + 4);
        char v13 = *((unsigned char *)v8 + 4);
        *a4 = *v8;
        *((unsigned char *)a4 + 4) = v13;
        if (v5 >= v7)
        {
          while (1)
          {
            uint64_t v16 = 2 * v7;
            uint64_t v7 = (2 * v7) | 1;
            unsigned int v14 = (unsigned int *)(result + 8 * v7);
            uint64_t v17 = v16 + 2;
            if (v17 < a3)
            {
              unsigned int v18 = v14[2];
              if (*v14 < v18
                || v18 >= *v14 && *((unsigned __int8 *)v14 + 4) < *((unsigned __int8 *)v14 + 12))
              {
                v14 += 2;
                uint64_t v7 = v17;
              }
            }
            if (*v14 < v11 || *v14 <= v11 && *((unsigned __int8 *)v14 + 4) < v12) {
              break;
            }
            unsigned int v15 = *v14;
            *((unsigned char *)v8 + 4) = *((unsigned char *)v14 + 4);
            *uint64_t v8 = v15;
            uint64_t v8 = v14;
            if (v5 < v7) {
              goto LABEL_13;
            }
          }
        }
        unsigned int v14 = v8;
LABEL_13:
        *unsigned int v14 = v11;
        *((unsigned char *)v14 + 4) = v12;
      }
    }
  }
  return result;
}

void sub_9155E0(uint64_t *a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)(a1 + 2);
  uint64_t v3 = *a1;
  if (0x823EE08FB823EE09 * ((a1[2] - *a1) >> 3) < a2)
  {
    if (a2 >= 0x8FB823EE08FB83) {
      sub_2E00();
    }
    uint64_t v5 = a1[1];
    uint64_t v6 = 456 * a2;
    unsigned int v10 = operator new(456 * a2);
    uint64_t v11 = (uint64_t)v10 + v5 - v3;
    sub_3629BC(v2, v5, v5, v3, v3, v11, v11);
    uint64_t v8 = (void *)*a1;
    uint64_t v7 = a1[1];
    *a1 = v9;
    a1[1] = v11;
    for (a1[2] = (uint64_t)v10 + v6; (void *)v7 != v8; uint64_t v7 = sub_361164(v7 - 456))
      ;
    if (v8) {
      operator delete(v8);
    }
  }
}

void sub_9156E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_362968((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_9156F8(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t)a2;
  uint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v8 = ((uint64_t)a2 - *a1) >> 3;
  unint64_t v9 = 0x823EE08FB823EE09 * v8;
  uint64_t v11 = (uint64_t)(a1 + 2);
  unint64_t v10 = a1[2];
  if (v6 >= v10)
  {
    unint64_t v12 = 0x823EE08FB823EE09 * ((uint64_t)(v6 - v7) >> 3) + 1;
    if (v12 > 0x8FB823EE08FB82) {
      sub_2E00();
    }
    unint64_t v13 = 0x823EE08FB823EE09 * ((uint64_t)(v10 - v7) >> 3);
    uint64_t v14 = 2 * v13;
    if (2 * v13 <= v12) {
      uint64_t v14 = v12;
    }
    if (v13 >= 0x47DC11F7047DC1) {
      unint64_t v15 = 0x8FB823EE08FB82;
    }
    else {
      unint64_t v15 = v14;
    }
    unint64_t v36 = a1 + 2;
    if (v15)
    {
      if (v15 > 0x8FB823EE08FB82) {
        sub_188D718();
      }
      uint64_t v16 = (char *)operator new(456 * v15);
    }
    else
    {
      uint64_t v16 = 0;
    }
    int v33 = v16;
    uint64_t v34 = &v16[456 * v9];
    *(void *)&long long v35 = v34;
    *((void *)&v35 + 1) = &v16[456 * v15];
    sub_915D40(&v33, a3);
    uint64_t v25 = (uint64_t)v34;
    sub_3629BC(v11, v4, v4, *a1, *a1, (uint64_t)v34, (uint64_t)v34);
    uint64_t v34 = (char *)v26;
    uint64_t v27 = sub_9162F8(v11, v4, a1[1], v35);
    uint64_t v28 = (void *)*a1;
    uint64_t v29 = *((void *)&v35 + 1);
    long long v30 = *(_OWORD *)(a1 + 1);
    *a1 = (uint64_t)v34;
    a1[1] = v27;
    a1[2] = v29;
    long long v35 = v30;
    int v33 = v28;
    uint64_t v34 = (char *)v28;
    uint64_t v31 = v30;
    if ((void *)v30 != v28)
    {
      do
      {
        *(void *)&long long v35 = v31 - 456;
        sub_361164(v31 - 456);
        uint64_t v31 = v35;
      }
      while ((void *)v35 != v28);
      uint64_t v28 = v33;
    }
    if (v28) {
      operator delete(v28);
    }
    return v25;
  }
  else if (a2 == (_OWORD *)v6)
  {
    *a2 = *(_OWORD *)a3;
    uint64_t v17 = v7 + 8 * v8;
    long long v18 = *(_OWORD *)(a3 + 16);
    *(void *)(v17 + 32) = *(void *)(a3 + 32);
    *(_OWORD *)(v17 + 16) = v18;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 16) = 0;
    *(_OWORD *)(v17 + 40) = *(_OWORD *)(a3 + 40);
    *(void *)(v17 + 64) = 0;
    *(void *)(v17 + 72) = 0;
    *(void *)(v17 + 56) = 0;
    *(_OWORD *)(v17 + 56) = *(_OWORD *)(a3 + 56);
    *(void *)(v17 + 72) = *(void *)(a3 + 72);
    *(void *)(a3 + 56) = 0;
    *(void *)(a3 + 64) = 0;
    *(void *)(a3 + 72) = 0;
    long long v19 = *(_OWORD *)(a3 + 80);
    *(void *)(v17 + 96) = *(void *)(a3 + 96);
    *(_OWORD *)(v17 + 80) = v19;
    *(void *)(a3 + 88) = 0;
    *(void *)(a3 + 96) = 0;
    *(void *)(a3 + 80) = 0;
    *(_OWORD *)(v17 + 104) = *(_OWORD *)(a3 + 104);
    *(void *)(v17 + 128) = 0;
    *(void *)(v17 + 136) = 0;
    *(void *)(v17 + 120) = 0;
    *(_OWORD *)(v17 + 120) = *(_OWORD *)(a3 + 120);
    *(void *)(v17 + 136) = *(void *)(a3 + 136);
    *(void *)(a3 + 120) = 0;
    *(void *)(a3 + 128) = 0;
    *(void *)(a3 + 136) = 0;
    long long v20 = *(_OWORD *)(a3 + 144);
    *(void *)(v17 + 160) = *(void *)(a3 + 160);
    *(_OWORD *)(v17 + 144) = v20;
    *(void *)(a3 + 152) = 0;
    *(void *)(a3 + 160) = 0;
    *(void *)(a3 + 144) = 0;
    *(_OWORD *)(v17 + 168) = *(_OWORD *)(a3 + 168);
    *(void *)(v17 + 192) = 0;
    *(void *)(v17 + 200) = 0;
    *(void *)(v17 + 184) = 0;
    *(_OWORD *)(v17 + 184) = *(_OWORD *)(a3 + 184);
    *(void *)(v17 + 200) = *(void *)(a3 + 200);
    *(void *)(a3 + 184) = 0;
    *(void *)(a3 + 192) = 0;
    *(void *)(a3 + 200) = 0;
    long long v21 = *(_OWORD *)(a3 + 208);
    *(void *)(v17 + 224) = *(void *)(a3 + 224);
    *(_OWORD *)(v17 + 208) = v21;
    *(void *)(a3 + 216) = 0;
    *(void *)(a3 + 224) = 0;
    *(void *)(a3 + 208) = 0;
    *(_OWORD *)(v17 + 232) = *(_OWORD *)(a3 + 232);
    *(void *)(v17 + 256) = 0;
    *(void *)(v17 + 264) = 0;
    *(void *)(v17 + 248) = 0;
    *(_OWORD *)(v17 + 248) = *(_OWORD *)(a3 + 248);
    *(void *)(v17 + 264) = *(void *)(a3 + 264);
    *(void *)(a3 + 248) = 0;
    *(void *)(a3 + 256) = 0;
    *(void *)(a3 + 264) = 0;
    long long v22 = *(_OWORD *)(a3 + 272);
    *(void *)(v17 + 288) = *(void *)(a3 + 288);
    *(_OWORD *)(v17 + 272) = v22;
    *(void *)(a3 + 280) = 0;
    *(void *)(a3 + 288) = 0;
    *(void *)(a3 + 272) = 0;
    *(_OWORD *)(v17 + 296) = *(_OWORD *)(a3 + 296);
    *(void *)(v17 + 320) = 0;
    *(void *)(v17 + 328) = 0;
    *(void *)(v17 + 312) = 0;
    *(_OWORD *)(v17 + 312) = *(_OWORD *)(a3 + 312);
    *(void *)(v17 + 328) = *(void *)(a3 + 328);
    *(void *)(a3 + 312) = 0;
    *(void *)(a3 + 320) = 0;
    *(void *)(a3 + 328) = 0;
    long long v23 = *(_OWORD *)(a3 + 336);
    *(void *)(v17 + 352) = *(void *)(a3 + 352);
    *(_OWORD *)(v17 + 336) = v23;
    *(void *)(a3 + 344) = 0;
    *(void *)(a3 + 352) = 0;
    *(void *)(a3 + 336) = 0;
    *(_OWORD *)(v17 + 360) = *(_OWORD *)(a3 + 360);
    *(void *)(v17 + 384) = 0;
    *(void *)(v17 + 392) = 0;
    *(void *)(v17 + 376) = 0;
    *(_OWORD *)(v17 + 376) = *(_OWORD *)(a3 + 376);
    *(void *)(v17 + 392) = *(void *)(a3 + 392);
    *(void *)(a3 + 376) = 0;
    *(void *)(a3 + 384) = 0;
    *(void *)(a3 + 392) = 0;
    uint64_t v24 = *(void *)(a3 + 416);
    *(_OWORD *)(v17 + 400) = *(_OWORD *)(a3 + 400);
    *(void *)(v17 + 416) = v24;
    *(void *)(v17 + 424) = 0;
    *(void *)(v17 + 432) = 0;
    *(void *)(v17 + 440) = 0;
    *(_OWORD *)(v17 + 424) = *(_OWORD *)(a3 + 424);
    *(void *)(v17 + 440) = *(void *)(a3 + 440);
    *(void *)(a3 + 424) = 0;
    *(void *)(a3 + 432) = 0;
    *(void *)(a3 + 440) = 0;
    *(_WORD *)(v17 + 448) = *(_WORD *)(a3 + 448);
    a1[1] = (uint64_t)a2 + 456;
  }
  else
  {
    sub_915ADC((uint64_t)a1, (uint64_t)a2, v6, (uint64_t)a2 + 456);
    sub_3648AC(v4, a3);
  }
  return v4;
}

void sub_915AC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_362968((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_915ADC(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 8);
  unint64_t v5 = a2 + v4 - a4;
  for (uint64_t i = v4; v5 < a3; v5 += 456)
  {
    *(_OWORD *)uint64_t i = *(_OWORD *)v5;
    long long v7 = *(_OWORD *)(v5 + 16);
    *(void *)(i + 32) = *(void *)(v5 + 32);
    *(_OWORD *)(i + 16) = v7;
    *(void *)(v5 + 24) = 0;
    *(void *)(v5 + 32) = 0;
    *(void *)(v5 + 16) = 0;
    *(_OWORD *)(i + 40) = *(_OWORD *)(v5 + 40);
    *(void *)(i + 64) = 0;
    *(void *)(i + 72) = 0;
    *(void *)(i + 56) = 0;
    *(_OWORD *)(i + 56) = *(_OWORD *)(v5 + 56);
    *(void *)(i + 72) = *(void *)(v5 + 72);
    *(void *)(v5 + 56) = 0;
    *(void *)(v5 + 64) = 0;
    *(void *)(v5 + 72) = 0;
    long long v8 = *(_OWORD *)(v5 + 80);
    *(void *)(i + 96) = *(void *)(v5 + 96);
    *(_OWORD *)(i + 80) = v8;
    *(void *)(v5 + 88) = 0;
    *(void *)(v5 + 96) = 0;
    *(void *)(v5 + 80) = 0;
    *(_OWORD *)(i + 104) = *(_OWORD *)(v5 + 104);
    *(void *)(i + 128) = 0;
    *(void *)(i + 136) = 0;
    *(void *)(i + 120) = 0;
    *(_OWORD *)(i + 120) = *(_OWORD *)(v5 + 120);
    *(void *)(i + 136) = *(void *)(v5 + 136);
    *(void *)(v5 + 120) = 0;
    *(void *)(v5 + 128) = 0;
    *(void *)(v5 + 136) = 0;
    long long v9 = *(_OWORD *)(v5 + 144);
    *(void *)(i + 160) = *(void *)(v5 + 160);
    *(_OWORD *)(i + 144) = v9;
    *(void *)(v5 + 152) = 0;
    *(void *)(v5 + 160) = 0;
    *(void *)(v5 + 144) = 0;
    *(_OWORD *)(i + 168) = *(_OWORD *)(v5 + 168);
    *(void *)(i + 192) = 0;
    *(void *)(i + 200) = 0;
    *(void *)(i + 184) = 0;
    *(_OWORD *)(i + 184) = *(_OWORD *)(v5 + 184);
    *(void *)(i + 200) = *(void *)(v5 + 200);
    *(void *)(v5 + 184) = 0;
    *(void *)(v5 + 192) = 0;
    *(void *)(v5 + 200) = 0;
    long long v10 = *(_OWORD *)(v5 + 208);
    *(void *)(i + 224) = *(void *)(v5 + 224);
    *(_OWORD *)(i + 208) = v10;
    *(void *)(v5 + 216) = 0;
    *(void *)(v5 + 224) = 0;
    *(void *)(v5 + 208) = 0;
    *(_OWORD *)(i + 232) = *(_OWORD *)(v5 + 232);
    *(void *)(i + 256) = 0;
    *(void *)(i + 264) = 0;
    *(void *)(i + 248) = 0;
    *(_OWORD *)(i + 248) = *(_OWORD *)(v5 + 248);
    *(void *)(i + 264) = *(void *)(v5 + 264);
    *(void *)(v5 + 248) = 0;
    *(void *)(v5 + 256) = 0;
    *(void *)(v5 + 264) = 0;
    long long v11 = *(_OWORD *)(v5 + 272);
    *(void *)(i + 288) = *(void *)(v5 + 288);
    *(_OWORD *)(i + 272) = v11;
    *(void *)(v5 + 280) = 0;
    *(void *)(v5 + 288) = 0;
    *(void *)(v5 + 272) = 0;
    *(_OWORD *)(i + 296) = *(_OWORD *)(v5 + 296);
    *(void *)(i + 320) = 0;
    *(void *)(i + 328) = 0;
    *(void *)(i + 312) = 0;
    uint64_t v12 = *(void *)(v5 + 320);
    *(void *)(i + 312) = *(void *)(v5 + 312);
    *(void *)(i + 320) = v12;
    *(void *)(i + 328) = *(void *)(v5 + 328);
    *(void *)(v5 + 312) = 0;
    *(void *)(v5 + 320) = 0;
    *(void *)(v5 + 328) = 0;
    long long v13 = *(_OWORD *)(v5 + 336);
    *(void *)(i + 352) = *(void *)(v5 + 352);
    *(_OWORD *)(i + 336) = v13;
    *(void *)(v5 + 344) = 0;
    *(void *)(v5 + 352) = 0;
    *(void *)(v5 + 336) = 0;
    *(_OWORD *)(i + 360) = *(_OWORD *)(v5 + 360);
    *(void *)(i + 384) = 0;
    *(void *)(i + 392) = 0;
    *(void *)(i + 376) = 0;
    uint64_t v14 = *(void *)(v5 + 384);
    *(void *)(i + 376) = *(void *)(v5 + 376);
    *(void *)(i + 384) = v14;
    *(void *)(i + 392) = *(void *)(v5 + 392);
    *(void *)(v5 + 376) = 0;
    *(void *)(v5 + 384) = 0;
    *(void *)(v5 + 392) = 0;
    uint64_t v15 = *(void *)(v5 + 416);
    *(_OWORD *)(i + 400) = *(_OWORD *)(v5 + 400);
    *(void *)(i + 416) = v15;
    *(void *)(i + 424) = 0;
    *(void *)(i + 432) = 0;
    *(void *)(i + 440) = 0;
    uint64_t v16 = *(void *)(v5 + 432);
    *(void *)(i + 424) = *(void *)(v5 + 424);
    *(void *)(i + 432) = v16;
    *(void *)(i + 440) = *(void *)(v5 + 440);
    *(void *)(v5 + 424) = 0;
    *(void *)(v5 + 432) = 0;
    *(void *)(v5 + 440) = 0;
    *(_WORD *)(i + 448) = *(_WORD *)(v5 + 448);
    i += 456;
  }
  *(void *)(result + 8) = i;
  if (v4 != a4)
  {
    uint64_t v17 = v4 - 456;
    uint64_t v18 = 8 * ((v4 - a4) >> 3);
    uint64_t v19 = a2 - 456;
    do
    {
      uint64_t result = sub_3648AC(v17, v19 + v18);
      v17 -= 456;
      v18 -= 456;
    }
    while (v18);
  }
  return result;
}

__n128 sub_915D40(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  if (v4 == a1[3])
  {
    unint64_t v5 = a1[1];
    if (v5 <= *a1)
    {
      unint64_t v11 = 0x47DC11F7047DC12 * ((v4 - *a1) >> 3);
      if (v4 == *a1) {
        unint64_t v11 = 1;
      }
      uint64_t v30 = a1[4];
      if (v11 >= 0x8FB823EE08FB83) {
        sub_188D718();
      }
      unint64_t v12 = v11 >> 2;
      uint64_t v13 = 456 * v11;
      __p[0] = operator new(456 * v11);
      __p[1] = (char *)__p[0] + 456 * v12;
      *(void **)&long long v29 = __p[1];
      *((void *)&v29 + 1) = (char *)__p[0] + v13;
      sub_916100((uint64_t)__p, v5, 0x823EE08FB823EE09 * ((uint64_t)(v4 - v5) >> 3));
      uint64_t v14 = (void *)*a1;
      uint64_t v15 = (void *)a1[1];
      long long v16 = *(_OWORD *)__p;
      long long v17 = v29;
      __p[0] = *(void **)a1;
      __p[1] = v15;
      long long v18 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v16;
      *((_OWORD *)a1 + 1) = v17;
      long long v29 = v18;
      uint64_t v19 = v18;
      if ((void *)v18 != v15)
      {
        do
        {
          *(void *)&long long v29 = v19 - 456;
          sub_361164(v19 - 456);
          uint64_t v19 = v29;
        }
        while ((void *)v29 != v15);
        uint64_t v14 = __p[0];
      }
      if (v14) {
        operator delete(v14);
      }
      uint64_t v4 = a1[2];
    }
    else
    {
      int64_t v6 = 0x823EE08FB823EE09 * ((uint64_t)(v5 - *a1) >> 3);
      if (v6 >= -1) {
        uint64_t v7 = v6 + 1;
      }
      else {
        uint64_t v7 = v6 + 2;
      }
      uint64_t v8 = v7 >> 1;
      uint64_t v9 = -v8;
      if (v5 == v4)
      {
        unint64_t v10 = v5 - 456 * v8;
      }
      else
      {
        do
        {
          sub_3648AC(v5 + 456 * v9, v5);
          v5 += 456;
        }
        while (v5 != v4);
        uint64_t v4 = a1[1];
        unint64_t v10 = v5 + 456 * v9;
      }
      a1[1] = v4 + 456 * v9;
      a1[2] = v10;
      uint64_t v4 = v10;
    }
  }
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  long long v20 = *(_OWORD *)(a2 + 16);
  *(void *)(v4 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(v4 + 16) = v20;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(v4 + 64) = 0;
  *(void *)(v4 + 72) = 0;
  *(void *)(v4 + 56) = 0;
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(v4 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  long long v21 = *(_OWORD *)(a2 + 80);
  *(void *)(v4 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(v4 + 80) = v21;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 80) = 0;
  *(_OWORD *)(v4 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(v4 + 128) = 0;
  *(void *)(v4 + 136) = 0;
  *(void *)(v4 + 120) = 0;
  *(_OWORD *)(v4 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(v4 + 136) = *(void *)(a2 + 136);
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  long long v22 = *(_OWORD *)(a2 + 144);
  *(void *)(v4 + 160) = *(void *)(a2 + 160);
  *(_OWORD *)(v4 + 144) = v22;
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 144) = 0;
  *(_OWORD *)(v4 + 168) = *(_OWORD *)(a2 + 168);
  *(void *)(v4 + 192) = 0;
  *(void *)(v4 + 200) = 0;
  *(void *)(v4 + 184) = 0;
  *(_OWORD *)(v4 + 184) = *(_OWORD *)(a2 + 184);
  *(void *)(v4 + 200) = *(void *)(a2 + 200);
  *(void *)(a2 + 184) = 0;
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  long long v23 = *(_OWORD *)(a2 + 208);
  *(void *)(v4 + 224) = *(void *)(a2 + 224);
  *(_OWORD *)(v4 + 208) = v23;
  *(void *)(a2 + 216) = 0;
  *(void *)(a2 + 224) = 0;
  *(void *)(a2 + 208) = 0;
  *(_OWORD *)(v4 + 232) = *(_OWORD *)(a2 + 232);
  *(void *)(v4 + 256) = 0;
  *(void *)(v4 + 264) = 0;
  *(void *)(v4 + 248) = 0;
  *(_OWORD *)(v4 + 248) = *(_OWORD *)(a2 + 248);
  *(void *)(v4 + 264) = *(void *)(a2 + 264);
  *(void *)(a2 + 248) = 0;
  *(void *)(a2 + 256) = 0;
  *(void *)(a2 + 264) = 0;
  long long v24 = *(_OWORD *)(a2 + 272);
  *(void *)(v4 + 288) = *(void *)(a2 + 288);
  *(_OWORD *)(v4 + 272) = v24;
  *(void *)(a2 + 280) = 0;
  *(void *)(a2 + 288) = 0;
  *(void *)(a2 + 272) = 0;
  *(_OWORD *)(v4 + 296) = *(_OWORD *)(a2 + 296);
  *(void *)(v4 + 320) = 0;
  *(void *)(v4 + 328) = 0;
  *(void *)(v4 + 312) = 0;
  *(void *)(v4 + 312) = *(void *)(a2 + 312);
  *(void *)(v4 + 320) = *(void *)(a2 + 320);
  *(void *)(v4 + 328) = *(void *)(a2 + 328);
  *(void *)(a2 + 312) = 0;
  *(void *)(a2 + 320) = 0;
  *(void *)(a2 + 328) = 0;
  long long v25 = *(_OWORD *)(a2 + 336);
  *(void *)(v4 + 352) = *(void *)(a2 + 352);
  *(_OWORD *)(v4 + 336) = v25;
  *(void *)(a2 + 344) = 0;
  *(void *)(a2 + 352) = 0;
  *(void *)(a2 + 336) = 0;
  *(_OWORD *)(v4 + 360) = *(_OWORD *)(a2 + 360);
  *(void *)(v4 + 384) = 0;
  *(void *)(v4 + 392) = 0;
  *(void *)(v4 + 376) = 0;
  *(void *)(v4 + 376) = *(void *)(a2 + 376);
  *(void *)(v4 + 384) = *(void *)(a2 + 384);
  *(void *)(v4 + 392) = *(void *)(a2 + 392);
  *(void *)(a2 + 376) = 0;
  *(void *)(a2 + 384) = 0;
  *(void *)(a2 + 392) = 0;
  __n128 result = *(__n128 *)(a2 + 400);
  uint64_t v27 = *(void *)(a2 + 416);
  *(__n128 *)(v4 + 400) = result;
  *(void *)(v4 + 416) = v27;
  *(void *)(v4 + 424) = 0;
  *(void *)(v4 + 432) = 0;
  *(void *)(v4 + 440) = 0;
  *(void *)(v4 + 424) = *(void *)(a2 + 424);
  *(void *)(v4 + 432) = *(void *)(a2 + 432);
  *(void *)(v4 + 440) = *(void *)(a2 + 440);
  *(void *)(a2 + 424) = 0;
  *(void *)(a2 + 432) = 0;
  *(void *)(a2 + 440) = 0;
  *(_WORD *)(v4 + 448) = *(_WORD *)(a2 + 448);
  a1[2] += 456;
  return result;
}

void sub_9160EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_916100(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 16);
  if (a3)
  {
    uint64_t v4 = v3 + 456 * a3;
    do
    {
      *(_OWORD *)uint64_t v3 = *(_OWORD *)a2;
      long long v5 = *(_OWORD *)(a2 + 16);
      *(void *)(v3 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)(v3 + 16) = v5;
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 16) = 0;
      *(_OWORD *)(v3 + 40) = *(_OWORD *)(a2 + 40);
      *(void *)(v3 + 64) = 0;
      *(void *)(v3 + 72) = 0;
      *(void *)(v3 + 56) = 0;
      *(_OWORD *)(v3 + 56) = *(_OWORD *)(a2 + 56);
      *(void *)(v3 + 72) = *(void *)(a2 + 72);
      *(void *)(a2 + 56) = 0;
      *(void *)(a2 + 64) = 0;
      *(void *)(a2 + 72) = 0;
      long long v6 = *(_OWORD *)(a2 + 80);
      *(void *)(v3 + 96) = *(void *)(a2 + 96);
      *(_OWORD *)(v3 + 80) = v6;
      *(void *)(a2 + 88) = 0;
      *(void *)(a2 + 96) = 0;
      *(void *)(a2 + 80) = 0;
      *(_OWORD *)(v3 + 104) = *(_OWORD *)(a2 + 104);
      *(void *)(v3 + 128) = 0;
      *(void *)(v3 + 136) = 0;
      *(void *)(v3 + 120) = 0;
      *(_OWORD *)(v3 + 120) = *(_OWORD *)(a2 + 120);
      *(void *)(v3 + 136) = *(void *)(a2 + 136);
      *(void *)(a2 + 120) = 0;
      *(void *)(a2 + 128) = 0;
      *(void *)(a2 + 136) = 0;
      long long v7 = *(_OWORD *)(a2 + 144);
      *(void *)(v3 + 160) = *(void *)(a2 + 160);
      *(_OWORD *)(v3 + 144) = v7;
      *(void *)(a2 + 152) = 0;
      *(void *)(a2 + 160) = 0;
      *(void *)(a2 + 144) = 0;
      *(_OWORD *)(v3 + 168) = *(_OWORD *)(a2 + 168);
      *(void *)(v3 + 192) = 0;
      *(void *)(v3 + 200) = 0;
      *(void *)(v3 + 184) = 0;
      *(_OWORD *)(v3 + 184) = *(_OWORD *)(a2 + 184);
      *(void *)(v3 + 200) = *(void *)(a2 + 200);
      *(void *)(a2 + 184) = 0;
      *(void *)(a2 + 192) = 0;
      *(void *)(a2 + 200) = 0;
      long long v8 = *(_OWORD *)(a2 + 208);
      *(void *)(v3 + 224) = *(void *)(a2 + 224);
      *(_OWORD *)(v3 + 208) = v8;
      *(void *)(a2 + 216) = 0;
      *(void *)(a2 + 224) = 0;
      *(void *)(a2 + 208) = 0;
      *(_OWORD *)(v3 + 232) = *(_OWORD *)(a2 + 232);
      *(void *)(v3 + 256) = 0;
      *(void *)(v3 + 264) = 0;
      *(void *)(v3 + 248) = 0;
      *(_OWORD *)(v3 + 248) = *(_OWORD *)(a2 + 248);
      *(void *)(v3 + 264) = *(void *)(a2 + 264);
      *(void *)(a2 + 248) = 0;
      *(void *)(a2 + 256) = 0;
      *(void *)(a2 + 264) = 0;
      long long v9 = *(_OWORD *)(a2 + 272);
      *(void *)(v3 + 288) = *(void *)(a2 + 288);
      *(_OWORD *)(v3 + 272) = v9;
      *(void *)(a2 + 280) = 0;
      *(void *)(a2 + 288) = 0;
      *(void *)(a2 + 272) = 0;
      *(_OWORD *)(v3 + 296) = *(_OWORD *)(a2 + 296);
      *(void *)(v3 + 320) = 0;
      *(void *)(v3 + 328) = 0;
      *(void *)(v3 + 312) = 0;
      uint64_t v10 = *(void *)(a2 + 320);
      *(void *)(v3 + 312) = *(void *)(a2 + 312);
      *(void *)(v3 + 320) = v10;
      *(void *)(v3 + 328) = *(void *)(a2 + 328);
      *(void *)(a2 + 312) = 0;
      *(void *)(a2 + 320) = 0;
      *(void *)(a2 + 328) = 0;
      long long v11 = *(_OWORD *)(a2 + 336);
      *(void *)(v3 + 352) = *(void *)(a2 + 352);
      *(_OWORD *)(v3 + 336) = v11;
      *(void *)(a2 + 344) = 0;
      *(void *)(a2 + 352) = 0;
      *(void *)(a2 + 336) = 0;
      *(_OWORD *)(v3 + 360) = *(_OWORD *)(a2 + 360);
      *(void *)(v3 + 384) = 0;
      *(void *)(v3 + 392) = 0;
      *(void *)(v3 + 376) = 0;
      uint64_t v12 = *(void *)(a2 + 384);
      *(void *)(v3 + 376) = *(void *)(a2 + 376);
      *(void *)(v3 + 384) = v12;
      *(void *)(v3 + 392) = *(void *)(a2 + 392);
      *(void *)(a2 + 376) = 0;
      *(void *)(a2 + 384) = 0;
      *(void *)(a2 + 392) = 0;
      uint64_t v13 = *(void *)(a2 + 416);
      *(_OWORD *)(v3 + 400) = *(_OWORD *)(a2 + 400);
      *(void *)(v3 + 416) = v13;
      *(void *)(v3 + 424) = 0;
      *(void *)(v3 + 432) = 0;
      *(void *)(v3 + 440) = 0;
      uint64_t v14 = *(void *)(a2 + 432);
      *(void *)(v3 + 424) = *(void *)(a2 + 424);
      *(void *)(v3 + 432) = v14;
      *(void *)(v3 + 440) = *(void *)(a2 + 440);
      *(void *)(a2 + 424) = 0;
      *(void *)(a2 + 432) = 0;
      *(void *)(a2 + 440) = 0;
      *(_WORD *)(v3 + 448) = *(_WORD *)(a2 + 448);
      v3 += 456;
      a2 += 456;
    }
    while (v3 != v4);
    uint64_t v3 = v4;
  }
  *(void *)(result + 16) = v3;
  return result;
}

uint64_t sub_9162F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  for (uint64_t result = a4; a2 != a3; a2 += 456)
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)a2;
    long long v5 = *(_OWORD *)(a2 + 16);
    *(void *)(result + 32) = *(void *)(a2 + 32);
    *(_OWORD *)(result + 16) = v5;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 16) = 0;
    *(_OWORD *)(result + 40) = *(_OWORD *)(a2 + 40);
    *(void *)(result + 64) = 0;
    *(void *)(result + 72) = 0;
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 56) = *(_OWORD *)(a2 + 56);
    *(void *)(result + 72) = *(void *)(a2 + 72);
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
    *(void *)(a2 + 72) = 0;
    long long v6 = *(_OWORD *)(a2 + 80);
    *(void *)(result + 96) = *(void *)(a2 + 96);
    *(_OWORD *)(result + 80) = v6;
    *(void *)(a2 + 88) = 0;
    *(void *)(a2 + 96) = 0;
    *(void *)(a2 + 80) = 0;
    *(_OWORD *)(result + 104) = *(_OWORD *)(a2 + 104);
    *(void *)(result + 128) = 0;
    *(void *)(result + 136) = 0;
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 120) = *(_OWORD *)(a2 + 120);
    *(void *)(result + 136) = *(void *)(a2 + 136);
    *(void *)(a2 + 120) = 0;
    *(void *)(a2 + 128) = 0;
    *(void *)(a2 + 136) = 0;
    long long v7 = *(_OWORD *)(a2 + 144);
    *(void *)(result + 160) = *(void *)(a2 + 160);
    *(_OWORD *)(result + 144) = v7;
    *(void *)(a2 + 152) = 0;
    *(void *)(a2 + 160) = 0;
    *(void *)(a2 + 144) = 0;
    *(_OWORD *)(result + 168) = *(_OWORD *)(a2 + 168);
    *(void *)(result + 192) = 0;
    *(void *)(result + 200) = 0;
    *(void *)(result + 184) = 0;
    *(_OWORD *)(result + 184) = *(_OWORD *)(a2 + 184);
    *(void *)(result + 200) = *(void *)(a2 + 200);
    *(void *)(a2 + 184) = 0;
    *(void *)(a2 + 192) = 0;
    *(void *)(a2 + 200) = 0;
    long long v8 = *(_OWORD *)(a2 + 208);
    *(void *)(result + 224) = *(void *)(a2 + 224);
    *(_OWORD *)(result + 208) = v8;
    *(void *)(a2 + 216) = 0;
    *(void *)(a2 + 224) = 0;
    *(void *)(a2 + 208) = 0;
    *(_OWORD *)(result + 232) = *(_OWORD *)(a2 + 232);
    *(void *)(result + 256) = 0;
    *(void *)(result + 264) = 0;
    *(void *)(result + 248) = 0;
    *(_OWORD *)(result + 248) = *(_OWORD *)(a2 + 248);
    *(void *)(result + 264) = *(void *)(a2 + 264);
    *(void *)(a2 + 248) = 0;
    *(void *)(a2 + 256) = 0;
    *(void *)(a2 + 264) = 0;
    long long v9 = *(_OWORD *)(a2 + 272);
    *(void *)(result + 288) = *(void *)(a2 + 288);
    *(_OWORD *)(result + 272) = v9;
    *(void *)(a2 + 280) = 0;
    *(void *)(a2 + 288) = 0;
    *(void *)(a2 + 272) = 0;
    *(_OWORD *)(result + 296) = *(_OWORD *)(a2 + 296);
    *(void *)(result + 320) = 0;
    *(void *)(result + 328) = 0;
    *(void *)(result + 312) = 0;
    uint64_t v10 = *(void *)(a2 + 320);
    *(void *)(result + 312) = *(void *)(a2 + 312);
    *(void *)(result + 320) = v10;
    *(void *)(result + 328) = *(void *)(a2 + 328);
    *(void *)(a2 + 312) = 0;
    *(void *)(a2 + 320) = 0;
    *(void *)(a2 + 328) = 0;
    long long v11 = *(_OWORD *)(a2 + 336);
    *(void *)(result + 352) = *(void *)(a2 + 352);
    *(_OWORD *)(result + 336) = v11;
    *(void *)(a2 + 344) = 0;
    *(void *)(a2 + 352) = 0;
    *(void *)(a2 + 336) = 0;
    *(_OWORD *)(result + 360) = *(_OWORD *)(a2 + 360);
    *(void *)(result + 384) = 0;
    *(void *)(result + 392) = 0;
    *(void *)(result + 376) = 0;
    uint64_t v12 = *(void *)(a2 + 384);
    *(void *)(result + 376) = *(void *)(a2 + 376);
    *(void *)(result + 384) = v12;
    *(void *)(result + 392) = *(void *)(a2 + 392);
    *(void *)(a2 + 376) = 0;
    *(void *)(a2 + 384) = 0;
    *(void *)(a2 + 392) = 0;
    uint64_t v13 = *(void *)(a2 + 416);
    *(_OWORD *)(result + 400) = *(_OWORD *)(a2 + 400);
    *(void *)(result + 416) = v13;
    *(void *)(result + 424) = 0;
    *(void *)(result + 432) = 0;
    *(void *)(result + 440) = 0;
    uint64_t v14 = *(void *)(a2 + 432);
    *(void *)(result + 424) = *(void *)(a2 + 424);
    *(void *)(result + 432) = v14;
    *(void *)(result + 440) = *(void *)(a2 + 440);
    *(void *)(a2 + 424) = 0;
    *(void *)(a2 + 432) = 0;
    *(void *)(a2 + 440) = 0;
    *(_WORD *)(result + 448) = *(_WORD *)(a2 + 448);
    result += 456;
  }
  return result;
}

uint64_t sub_9164E4(uint64_t result, void *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  long long v42 = a2;
  uint64_t v43 = result;
  if (a3 >= 2)
  {
    uint64_t v6 = result;
    if (a3 == 2)
    {
      long long v42 = a2 - 57;
      if (*((unsigned __int8 *)a2 - 7) > *(unsigned __int8 *)(result + 449)) {
        return sub_916A00(&v43, (uint64_t *)&v42);
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if ((void *)result != a2)
      {
        uint64_t v13 = (_OWORD *)(result + 456);
        if ((void *)(result + 456) != a2)
        {
          uint64_t v14 = 0;
          uint64_t v15 = result;
          do
          {
            long long v17 = v13;
            if (*(unsigned __int8 *)(v15 + 905) > *(unsigned __int8 *)(v15 + 449))
            {
              v44[0] = *v13;
              v44[1] = *(_OWORD *)(v15 + 472);
              long long v18 = *(_OWORD *)(v15 + 512);
              long long v46 = *(_OWORD *)(v15 + 496);
              long long v47 = v18;
              long long v49 = *(_OWORD *)(v15 + 536);
              long long v19 = *(_OWORD *)(v15 + 576);
              long long v51 = *(_OWORD *)(v15 + 560);
              long long v52 = v19;
              long long v54 = *(_OWORD *)(v15 + 600);
              long long v20 = *(_OWORD *)(v15 + 640);
              long long v56 = *(_OWORD *)(v15 + 624);
              long long v57 = v20;
              long long v59 = *(_OWORD *)(v15 + 664);
              long long v21 = *(_OWORD *)(v15 + 704);
              long long v61 = *(_OWORD *)(v15 + 688);
              uint64_t v45 = *(void *)(v15 + 488);
              *(void *)(v15 + 480) = 0;
              *(void *)(v15 + 488) = 0;
              *(void *)(v15 + 472) = 0;
              uint64_t v22 = *(void *)(v15 + 528);
              *(void *)(v15 + 512) = 0;
              *(void *)(v15 + 520) = 0;
              *(void *)(v15 + 528) = 0;
              uint64_t v50 = *(void *)(v15 + 552);
              *(void *)(v15 + 544) = 0;
              *(void *)(v15 + 536) = 0;
              *(void *)(v15 + 552) = 0;
              uint64_t v23 = *(void *)(v15 + 592);
              uint64_t v48 = v22;
              uint64_t v53 = v23;
              *(void *)(v15 + 584) = 0;
              *(void *)(v15 + 576) = 0;
              *(void *)(v15 + 592) = 0;
              uint64_t v55 = *(void *)(v15 + 616);
              *(void *)(v15 + 608) = 0;
              *(void *)(v15 + 600) = 0;
              *(void *)(v15 + 616) = 0;
              uint64_t v24 = *(void *)(v15 + 656);
              *(void *)(v15 + 648) = 0;
              *(void *)(v15 + 640) = 0;
              *(void *)(v15 + 656) = 0;
              uint64_t v60 = *(void *)(v15 + 680);
              *(void *)(v15 + 672) = 0;
              *(void *)(v15 + 664) = 0;
              *(void *)(v15 + 680) = 0;
              long long v62 = v21;
              uint64_t v25 = *(void *)(v15 + 720);
              uint64_t v58 = v24;
              uint64_t v63 = v25;
              *(void *)(v15 + 712) = 0;
              *(void *)(v15 + 704) = 0;
              *(void *)(v15 + 720) = 0;
              long long v26 = *(_OWORD *)(v15 + 728);
              uint64_t v65 = *(void *)(v15 + 744);
              long long v64 = v26;
              *(void *)(v15 + 736) = 0;
              *(void *)(v15 + 728) = 0;
              *(void *)(v15 + 744) = 0;
              long long v66 = *(_OWORD *)(v15 + 752);
              long long v67 = *(_OWORD *)(v15 + 768);
              uint64_t v27 = *(void *)(v15 + 784);
              *(void *)(v15 + 776) = 0;
              *(void *)(v15 + 768) = 0;
              *(void *)(v15 + 784) = 0;
              long long v28 = *(_OWORD *)(v15 + 792);
              uint64_t v70 = *(void *)(v15 + 808);
              long long v69 = v28;
              *(void *)(v15 + 800) = 0;
              *(void *)(v15 + 792) = 0;
              *(void *)(v15 + 808) = 0;
              long long v71 = *(_OWORD *)(v15 + 816);
              long long v72 = *(_OWORD *)(v15 + 832);
              uint64_t v29 = *(void *)(v15 + 848);
              uint64_t v68 = v27;
              uint64_t v73 = v29;
              *(void *)(v15 + 840) = 0;
              *(void *)(v15 + 832) = 0;
              *(void *)(v15 + 848) = 0;
              long long v30 = *(_OWORD *)(v15 + 856);
              uint64_t v75 = *(void *)(v15 + 872);
              long long v74 = v30;
              long long v76 = *(_OWORD *)(v15 + 880);
              uint64_t v77 = *(void *)(v15 + 896);
              *(void *)(v15 + 888) = 0;
              *(void *)(v15 + 880) = 0;
              *(void *)(v15 + 896) = 0;
              uint64_t v31 = v14;
              __int16 v78 = *(_WORD *)(v15 + 904);
              do
              {
                sub_3648AC(v6 + v31 + 456, v6 + v31);
                if (!v31)
                {
                  uint64_t v16 = v6;
                  goto LABEL_14;
                }
                unsigned int v32 = *(unsigned __int8 *)(v6 + v31 - 7);
                v31 -= 456;
              }
              while (HIBYTE(v78) > v32);
              uint64_t v16 = v6 + v31 + 456;
LABEL_14:
              sub_3648AC(v16, (uint64_t)v44);
              uint64_t result = sub_361164((uint64_t)v44);
            }
            uint64_t v13 = (_OWORD *)((char *)v17 + 456);
            v14 += 456;
            uint64_t v15 = (uint64_t)v17;
          }
          while ((void *)((char *)v17 + 456) != a2);
        }
      }
    }
    else
    {
      uint64_t v9 = a4;
      uint64_t v10 = a3 >> 1;
      uint64_t v11 = result + 456 * (a3 >> 1);
      if ((uint64_t)a3 <= a5)
      {
        unint64_t v41 = 0;
        *(void *)&v44[0] = a4;
        *((void *)&v44[0] + 1) = &v41;
        sub_916BCC(result, (void *)(result + 456 * (a3 >> 1)), a3 >> 1, a4);
        unint64_t v41 = a3 >> 1;
        unint64_t v33 = a3 - v10;
        uint64_t v34 = v9 + 456 * v10;
        sub_916BCC(v6 + 456 * (a3 >> 1), a2, v33, v34);
        unint64_t v41 = a3;
        unint64_t v35 = v9 + 456 * a3;
        uint64_t v36 = v34;
        while (v36 != v35)
        {
          if (*(unsigned __int8 *)(v36 + 449) <= *(unsigned __int8 *)(v9 + 449))
          {
            sub_3648AC(v6, v9);
            v9 += 456;
            v6 += 456;
            if (v9 == v34) {
              goto LABEL_26;
            }
          }
          else
          {
            sub_3648AC(v6, v36);
            v36 += 456;
            v6 += 456;
            if (v9 == v34)
            {
LABEL_26:
              if (v36 != v35)
              {
                uint64_t v37 = 0;
                do
                {
                  sub_3648AC(v6 + v37, v36 + v37);
                  v37 += 456;
                }
                while (v36 + v37 != v35);
              }
              goto LABEL_33;
            }
          }
        }
        if (v9 != v34)
        {
          uint64_t v38 = 0;
          do
          {
            sub_3648AC(v6 + v38, v9 + v38);
            v38 += 456;
          }
          while (v9 + v38 != v34);
        }
LABEL_33:
        uint64_t result = *(void *)&v44[0];
        if (*(void *)&v44[0])
        {
          uint64_t v39 = (unint64_t *)*((void *)&v44[0] + 1);
          if (**((void **)&v44[0] + 1))
          {
            unint64_t v40 = 0;
            do
            {
              ++v40;
              uint64_t result = sub_361164(result) + 456;
            }
            while (v40 < *v39);
          }
        }
      }
      else
      {
        sub_9164E4(result, result + 456 * (a3 >> 1), a3 >> 1, a4, a5);
        uint64_t v12 = a3 - v10;
        sub_9164E4(v11, a2, v12, v9, a5);
        return sub_918430(v6, v11, a2, v10, v12, v9, a5);
      }
    }
  }
  return result;
}

void sub_9169EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_9183D0((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_916A00(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(v2 + 32);
  long long v5 = *(_OWORD *)(v2 + 16);
  v16[0] = *(_OWORD *)v2;
  v16[1] = v5;
  uint64_t v17 = v4;
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 16) = 0;
  long long v18 = *(_OWORD *)(v2 + 40);
  long long v19 = *(_OWORD *)(v2 + 56);
  uint64_t v20 = *(void *)(v2 + 72);
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 72) = 0;
  *(void *)(v2 + 56) = 0;
  long long v6 = *(_OWORD *)(v2 + 80);
  uint64_t v22 = *(void *)(v2 + 96);
  long long v21 = v6;
  *(void *)(v2 + 80) = 0;
  *(void *)(v2 + 88) = 0;
  *(void *)(v2 + 96) = 0;
  long long v23 = *(_OWORD *)(v2 + 104);
  long long v24 = *(_OWORD *)(v2 + 120);
  uint64_t v25 = *(void *)(v2 + 136);
  *(void *)(v2 + 120) = 0;
  *(void *)(v2 + 128) = 0;
  *(void *)(v2 + 136) = 0;
  long long v7 = *(_OWORD *)(v2 + 144);
  uint64_t v27 = *(void *)(v2 + 160);
  long long v26 = v7;
  *(void *)(v2 + 144) = 0;
  *(void *)(v2 + 152) = 0;
  *(void *)(v2 + 160) = 0;
  long long v28 = *(_OWORD *)(v2 + 168);
  long long v29 = *(_OWORD *)(v2 + 184);
  uint64_t v30 = *(void *)(v2 + 200);
  *(void *)(v2 + 184) = 0;
  *(void *)(v2 + 192) = 0;
  *(void *)(v2 + 200) = 0;
  long long v8 = *(_OWORD *)(v2 + 208);
  uint64_t v32 = *(void *)(v2 + 224);
  long long v31 = v8;
  *(void *)(v2 + 208) = 0;
  *(void *)(v2 + 216) = 0;
  *(void *)(v2 + 224) = 0;
  long long v33 = *(_OWORD *)(v2 + 232);
  long long v34 = *(_OWORD *)(v2 + 248);
  uint64_t v35 = *(void *)(v2 + 264);
  *(void *)(v2 + 248) = 0;
  *(void *)(v2 + 256) = 0;
  *(void *)(v2 + 264) = 0;
  long long v9 = *(_OWORD *)(v2 + 272);
  uint64_t v37 = *(void *)(v2 + 288);
  long long v36 = v9;
  *(void *)(v2 + 272) = 0;
  *(void *)(v2 + 280) = 0;
  *(void *)(v2 + 288) = 0;
  long long v38 = *(_OWORD *)(v2 + 296);
  uint64_t v39 = *(void *)(v2 + 312);
  long long v10 = *(_OWORD *)(v2 + 336);
  long long v40 = *(_OWORD *)(v2 + 320);
  *(void *)(v2 + 312) = 0;
  *(void *)(v2 + 320) = 0;
  *(void *)(v2 + 328) = 0;
  uint64_t v42 = *(void *)(v2 + 352);
  long long v41 = v10;
  *(void *)(v2 + 336) = 0;
  *(void *)(v2 + 344) = 0;
  *(void *)(v2 + 352) = 0;
  long long v43 = *(_OWORD *)(v2 + 360);
  uint64_t v11 = *(void *)(v2 + 376);
  long long v12 = *(_OWORD *)(v2 + 400);
  long long v45 = *(_OWORD *)(v2 + 384);
  uint64_t v44 = v11;
  *(void *)(v2 + 376) = 0;
  *(void *)(v2 + 384) = 0;
  *(void *)(v2 + 392) = 0;
  uint64_t v13 = *(void *)(v2 + 416);
  uint64_t v14 = *(void *)(v2 + 424);
  long long v46 = v12;
  uint64_t v47 = v13;
  uint64_t v48 = v14;
  long long v49 = *(_OWORD *)(v2 + 432);
  *(void *)(v2 + 424) = 0;
  *(void *)(v2 + 432) = 0;
  *(void *)(v2 + 440) = 0;
  __int16 v50 = *(_WORD *)(v2 + 448);
  sub_3648AC(v2, v3);
  sub_3648AC(v3, (uint64_t)v16);
  return sub_361164((uint64_t)v16);
}

__n128 sub_916BCC(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v4 = a4;
    uint64_t v7 = a1;
    if (a3 == 2)
    {
      long long v21 = a2 - 57;
      uint64_t v22 = (_OWORD *)(a4 + 16);
      long long v23 = (_OWORD *)(a4 + 40);
      long long v24 = (void *)(a4 + 56);
      uint64_t v25 = (_OWORD *)(a4 + 80);
      long long v26 = (_OWORD *)(a4 + 104);
      uint64_t v27 = (void *)(a4 + 120);
      if (*((unsigned __int8 *)a2 - 7) <= *(unsigned __int8 *)(a1 + 449))
      {
        *(_OWORD *)a4 = *(_OWORD *)a1;
        long long v78 = *(_OWORD *)(a1 + 16);
        *(void *)(a4 + 32) = *(void *)(a1 + 32);
        *uint64_t v22 = v78;
        *(void *)(a1 + 24) = 0;
        *(void *)(a1 + 32) = 0;
        *(void *)(a1 + 16) = 0;
        *long long v23 = *(_OWORD *)(a1 + 40);
        *(void *)(a4 + 64) = 0;
        *(void *)(a4 + 72) = 0;
        void *v24 = 0;
        *(_OWORD *)(a4 + 56) = *(_OWORD *)(a1 + 56);
        *(void *)(a4 + 72) = *(void *)(a1 + 72);
        *(void *)(a1 + 56) = 0;
        *(void *)(a1 + 64) = 0;
        *(void *)(a1 + 72) = 0;
        long long v79 = *(_OWORD *)(a1 + 80);
        *(void *)(a4 + 96) = *(void *)(a1 + 96);
        *uint64_t v25 = v79;
        *(void *)(a1 + 88) = 0;
        *(void *)(a1 + 96) = 0;
        *(void *)(a1 + 80) = 0;
        *long long v26 = *(_OWORD *)(a1 + 104);
        *(void *)(a4 + 128) = 0;
        *(void *)(a4 + 136) = 0;
        *uint64_t v27 = 0;
        *(_OWORD *)(a4 + 120) = *(_OWORD *)(a1 + 120);
        *(void *)(a4 + 136) = *(void *)(a1 + 136);
        *(void *)(a1 + 120) = 0;
        *(void *)(a1 + 128) = 0;
        *(void *)(a1 + 136) = 0;
        long long v80 = *(_OWORD *)(a1 + 144);
        *(void *)(a4 + 160) = *(void *)(a1 + 160);
        *(_OWORD *)(a4 + 144) = v80;
        *(void *)(a1 + 152) = 0;
        *(void *)(a1 + 160) = 0;
        *(void *)(a1 + 144) = 0;
        *(_OWORD *)(a4 + 168) = *(_OWORD *)(a1 + 168);
        *(void *)(a4 + 192) = 0;
        *(void *)(a4 + 200) = 0;
        *(void *)(a4 + 184) = 0;
        *(_OWORD *)(a4 + 184) = *(_OWORD *)(a1 + 184);
        *(void *)(a4 + 200) = *(void *)(a1 + 200);
        *(void *)(a1 + 184) = 0;
        *(void *)(a1 + 192) = 0;
        *(void *)(a1 + 200) = 0;
        long long v81 = *(_OWORD *)(a1 + 208);
        *(void *)(a4 + 224) = *(void *)(a1 + 224);
        *(_OWORD *)(a4 + 208) = v81;
        *(void *)(a1 + 216) = 0;
        *(void *)(a1 + 224) = 0;
        *(void *)(a1 + 208) = 0;
        *(_OWORD *)(a4 + 232) = *(_OWORD *)(a1 + 232);
        *(void *)(a4 + 256) = 0;
        *(void *)(a4 + 264) = 0;
        *(void *)(a4 + 248) = 0;
        *(_OWORD *)(a4 + 248) = *(_OWORD *)(a1 + 248);
        *(void *)(a4 + 264) = *(void *)(a1 + 264);
        *(void *)(a1 + 248) = 0;
        *(void *)(a1 + 256) = 0;
        *(void *)(a1 + 264) = 0;
        long long v82 = *(_OWORD *)(a1 + 272);
        *(void *)(a4 + 288) = *(void *)(a1 + 288);
        *(_OWORD *)(a4 + 272) = v82;
        *(void *)(a1 + 280) = 0;
        *(void *)(a1 + 288) = 0;
        *(void *)(a1 + 272) = 0;
        *(_OWORD *)(a4 + 296) = *(_OWORD *)(a1 + 296);
        *(void *)(a4 + 320) = 0;
        *(void *)(a4 + 328) = 0;
        *(void *)(a4 + 312) = 0;
        uint64_t v83 = *(void *)(a1 + 320);
        *(void *)(a4 + 312) = *(void *)(a1 + 312);
        *(void *)(a4 + 320) = v83;
        *(void *)(a4 + 328) = *(void *)(a1 + 328);
        *(void *)(a1 + 312) = 0;
        *(void *)(a1 + 320) = 0;
        *(void *)(a1 + 328) = 0;
        long long v84 = *(_OWORD *)(a1 + 336);
        *(void *)(a4 + 352) = *(void *)(a1 + 352);
        *(_OWORD *)(a4 + 336) = v84;
        *(void *)(a1 + 344) = 0;
        *(void *)(a1 + 352) = 0;
        *(void *)(a1 + 336) = 0;
        *(_OWORD *)(a4 + 360) = *(_OWORD *)(a1 + 360);
        *(void *)(a4 + 384) = 0;
        *(void *)(a4 + 392) = 0;
        *(void *)(a4 + 376) = 0;
        uint64_t v85 = *(void *)(a1 + 384);
        *(void *)(a4 + 376) = *(void *)(a1 + 376);
        *(void *)(a4 + 384) = v85;
        *(void *)(a4 + 392) = *(void *)(a1 + 392);
        *(void *)(a1 + 376) = 0;
        *(void *)(a1 + 384) = 0;
        *(void *)(a1 + 392) = 0;
        uint64_t v86 = *(void *)(a1 + 416);
        *(_OWORD *)(a4 + 400) = *(_OWORD *)(a1 + 400);
        *(void *)(a4 + 416) = v86;
        *(void *)(a4 + 424) = 0;
        *(void *)(a4 + 432) = 0;
        *(void *)(a4 + 440) = 0;
        uint64_t v87 = *(void *)(a1 + 432);
        *(void *)(a4 + 424) = *(void *)(a1 + 424);
        *(void *)(a4 + 432) = v87;
        *(void *)(a4 + 440) = *(void *)(a1 + 440);
        *(void *)(a1 + 424) = 0;
        *(void *)(a1 + 432) = 0;
        *(void *)(a1 + 440) = 0;
        *(_WORD *)(a4 + 448) = *(_WORD *)(a1 + 448);
        *(_OWORD *)(a4 + 456) = *v21;
        long long v88 = *(_OWORD *)(a2 - 55);
        *(void *)(a4 + 488) = *(a2 - 53);
        *(_OWORD *)(a4 + 472) = v88;
        *(a2 - 54) = 0;
        *(a2 - 53) = 0;
        *(a2 - 55) = 0;
        *(_OWORD *)(a4 + 496) = *((_OWORD *)a2 - 26);
        *(void *)(a4 + 520) = 0;
        *(void *)(a4 + 528) = 0;
        *(void *)(a4 + 512) = 0;
        *(_OWORD *)(a4 + 512) = *((_OWORD *)a2 - 25);
        *(void *)(a4 + 528) = *(a2 - 48);
        *(a2 - 50) = 0;
        *(a2 - 49) = 0;
        *(a2 - 48) = 0;
        long long v89 = *(_OWORD *)(a2 - 47);
        *(void *)(a4 + 552) = *(a2 - 45);
        *(_OWORD *)(a4 + 536) = v89;
        *(a2 - 46) = 0;
        *(a2 - 45) = 0;
        *(a2 - 47) = 0;
        *(_OWORD *)(a4 + 560) = *((_OWORD *)a2 - 22);
        *(void *)(a4 + 584) = 0;
        *(void *)(a4 + 592) = 0;
        *(void *)(a4 + 576) = 0;
        *(_OWORD *)(a4 + 576) = *((_OWORD *)a2 - 21);
        *(void *)(a4 + 592) = *(a2 - 40);
        *(a2 - 42) = 0;
        *(a2 - 41) = 0;
        *(a2 - 40) = 0;
        long long v90 = *(_OWORD *)(a2 - 39);
        *(void *)(a4 + 616) = *(a2 - 37);
        *(_OWORD *)(a4 + 600) = v90;
        *(a2 - 38) = 0;
        *(a2 - 37) = 0;
        *(a2 - 39) = 0;
        *(_OWORD *)(a4 + 624) = *((_OWORD *)a2 - 18);
        *(void *)(a4 + 648) = 0;
        *(void *)(a4 + 656) = 0;
        *(void *)(a4 + 640) = 0;
        *(_OWORD *)(a4 + 640) = *((_OWORD *)a2 - 17);
        *(void *)(a4 + 656) = *(a2 - 32);
        *(a2 - 34) = 0;
        *(a2 - 33) = 0;
        *(a2 - 32) = 0;
        long long v91 = *(_OWORD *)(a2 - 31);
        *(void *)(a4 + 680) = *(a2 - 29);
        *(_OWORD *)(a4 + 664) = v91;
        *(a2 - 30) = 0;
        *(a2 - 29) = 0;
        *(a2 - 31) = 0;
        *(_OWORD *)(a4 + 688) = *((_OWORD *)a2 - 14);
        *(void *)(a4 + 712) = 0;
        *(void *)(a4 + 720) = 0;
        *(void *)(a4 + 704) = 0;
        *(_OWORD *)(a4 + 704) = *((_OWORD *)a2 - 13);
        *(void *)(a4 + 720) = *(a2 - 24);
        *(a2 - 26) = 0;
        *(a2 - 25) = 0;
        *(a2 - 24) = 0;
        long long v92 = *(_OWORD *)(a2 - 23);
        *(void *)(a4 + 744) = *(a2 - 21);
        *(_OWORD *)(a4 + 728) = v92;
        *(a2 - 22) = 0;
        *(a2 - 21) = 0;
        *(a2 - 23) = 0;
        *(_OWORD *)(a4 + 752) = *((_OWORD *)a2 - 10);
        *(void *)(a4 + 776) = 0;
        *(void *)(a4 + 784) = 0;
        *(void *)(a4 + 768) = 0;
        *(_OWORD *)(a4 + 768) = *((_OWORD *)a2 - 9);
        *(void *)(a4 + 784) = *(a2 - 16);
        *(a2 - 18) = 0;
        *(a2 - 17) = 0;
        *(a2 - 16) = 0;
        long long v93 = *(_OWORD *)(a2 - 15);
        *(void *)(a4 + 808) = *(a2 - 13);
        *(_OWORD *)(a4 + 792) = v93;
        *(a2 - 14) = 0;
        *(a2 - 13) = 0;
        *(a2 - 15) = 0;
        *(_OWORD *)(a4 + 816) = *((_OWORD *)a2 - 6);
        *(void *)(a4 + 840) = 0;
        *(void *)(a4 + 848) = 0;
        *(void *)(a4 + 832) = 0;
        *(_OWORD *)(a4 + 832) = *((_OWORD *)a2 - 5);
        *(void *)(a4 + 848) = *(a2 - 8);
        *(a2 - 10) = 0;
        *(a2 - 9) = 0;
        *(a2 - 8) = 0;
        long long v94 = *(_OWORD *)(a2 - 7);
        *(void *)(a4 + 872) = *(a2 - 5);
        *(_OWORD *)(a4 + 856) = v94;
        *(void *)(a4 + 880) = 0;
        *(void *)(a4 + 896) = 0;
        *(void *)(a4 + 888) = 0;
        __n128 result = *((__n128 *)a2 - 2);
        *(__n128 *)(a4 + 880) = result;
        *(void *)(a4 + 896) = *(a2 - 2);
        *(a2 - 4) = 0;
        *(a2 - 3) = 0;
        *(a2 - 2) = 0;
        long long v19 = (_WORD *)(a4 + 904);
        uint64_t v20 = a2 - 1;
      }
      else
      {
        *(_OWORD *)a4 = *v21;
        long long v28 = *(_OWORD *)(a2 - 55);
        *(void *)(a4 + 32) = *(a2 - 53);
        *uint64_t v22 = v28;
        *(a2 - 54) = 0;
        *(a2 - 53) = 0;
        *(a2 - 55) = 0;
        *long long v23 = *((_OWORD *)a2 - 26);
        *(void *)(a4 + 64) = 0;
        *(void *)(a4 + 72) = 0;
        void *v24 = 0;
        *(_OWORD *)(a4 + 56) = *((_OWORD *)a2 - 25);
        *(void *)(a4 + 72) = *(a2 - 48);
        *(a2 - 50) = 0;
        *(a2 - 49) = 0;
        *(a2 - 48) = 0;
        long long v29 = *(_OWORD *)(a2 - 47);
        *(void *)(a4 + 96) = *(a2 - 45);
        *uint64_t v25 = v29;
        *(a2 - 46) = 0;
        *(a2 - 45) = 0;
        *(a2 - 47) = 0;
        *long long v26 = *((_OWORD *)a2 - 22);
        *(void *)(a4 + 128) = 0;
        *(void *)(a4 + 136) = 0;
        *uint64_t v27 = 0;
        *(_OWORD *)(a4 + 120) = *((_OWORD *)a2 - 21);
        *(void *)(a4 + 136) = *(a2 - 40);
        *(a2 - 42) = 0;
        *(a2 - 41) = 0;
        *(a2 - 40) = 0;
        long long v30 = *(_OWORD *)(a2 - 39);
        *(void *)(a4 + 160) = *(a2 - 37);
        *(_OWORD *)(a4 + 144) = v30;
        *(a2 - 38) = 0;
        *(a2 - 37) = 0;
        *(a2 - 39) = 0;
        *(_OWORD *)(a4 + 168) = *((_OWORD *)a2 - 18);
        *(void *)(a4 + 192) = 0;
        *(void *)(a4 + 200) = 0;
        *(void *)(a4 + 184) = 0;
        *(_OWORD *)(a4 + 184) = *((_OWORD *)a2 - 17);
        *(void *)(a4 + 200) = *(a2 - 32);
        *(a2 - 34) = 0;
        *(a2 - 33) = 0;
        *(a2 - 32) = 0;
        long long v31 = *(_OWORD *)(a2 - 31);
        *(void *)(a4 + 224) = *(a2 - 29);
        *(_OWORD *)(a4 + 208) = v31;
        *(a2 - 30) = 0;
        *(a2 - 29) = 0;
        *(a2 - 31) = 0;
        *(_OWORD *)(a4 + 232) = *((_OWORD *)a2 - 14);
        *(void *)(a4 + 256) = 0;
        *(void *)(a4 + 264) = 0;
        *(void *)(a4 + 248) = 0;
        *(_OWORD *)(a4 + 248) = *((_OWORD *)a2 - 13);
        *(void *)(a4 + 264) = *(a2 - 24);
        *(a2 - 26) = 0;
        *(a2 - 25) = 0;
        *(a2 - 24) = 0;
        long long v32 = *(_OWORD *)(a2 - 23);
        *(void *)(a4 + 288) = *(a2 - 21);
        *(_OWORD *)(a4 + 272) = v32;
        *(a2 - 22) = 0;
        *(a2 - 21) = 0;
        *(a2 - 23) = 0;
        *(_OWORD *)(a4 + 296) = *((_OWORD *)a2 - 10);
        *(void *)(a4 + 320) = 0;
        *(void *)(a4 + 328) = 0;
        *(void *)(a4 + 312) = 0;
        *(_OWORD *)(a4 + 312) = *((_OWORD *)a2 - 9);
        *(void *)(a4 + 328) = *(a2 - 16);
        *(a2 - 18) = 0;
        *(a2 - 17) = 0;
        *(a2 - 16) = 0;
        long long v33 = *(_OWORD *)(a2 - 15);
        *(void *)(a4 + 352) = *(a2 - 13);
        *(_OWORD *)(a4 + 336) = v33;
        *(a2 - 14) = 0;
        *(a2 - 13) = 0;
        *(a2 - 15) = 0;
        *(_OWORD *)(a4 + 360) = *((_OWORD *)a2 - 6);
        *(void *)(a4 + 384) = 0;
        *(void *)(a4 + 392) = 0;
        *(void *)(a4 + 376) = 0;
        *(_OWORD *)(a4 + 376) = *((_OWORD *)a2 - 5);
        *(void *)(a4 + 392) = *(a2 - 8);
        *(a2 - 10) = 0;
        *(a2 - 9) = 0;
        *(a2 - 8) = 0;
        long long v34 = *(_OWORD *)(a2 - 7);
        *(void *)(a4 + 416) = *(a2 - 5);
        *(_OWORD *)(a4 + 400) = v34;
        *(void *)(a4 + 432) = 0;
        *(void *)(a4 + 440) = 0;
        *(void *)(a4 + 424) = 0;
        *(_OWORD *)(a4 + 424) = *((_OWORD *)a2 - 2);
        *(void *)(a4 + 440) = *(a2 - 2);
        *(a2 - 4) = 0;
        *(a2 - 3) = 0;
        *(a2 - 2) = 0;
        *(_WORD *)(a4 + 448) = *((_WORD *)a2 - 4);
        *(_OWORD *)(a4 + 456) = *(_OWORD *)a1;
        long long v35 = *(_OWORD *)(a1 + 16);
        *(void *)(a4 + 488) = *(void *)(a1 + 32);
        *(_OWORD *)(a4 + 472) = v35;
        *(void *)(a1 + 24) = 0;
        *(void *)(a1 + 32) = 0;
        *(void *)(a1 + 16) = 0;
        *(_OWORD *)(a4 + 496) = *(_OWORD *)(a1 + 40);
        *(void *)(a4 + 520) = 0;
        *(void *)(a4 + 528) = 0;
        *(void *)(a4 + 512) = 0;
        *(_OWORD *)(a4 + 512) = *(_OWORD *)(a1 + 56);
        *(void *)(a4 + 528) = *(void *)(a1 + 72);
        *(void *)(a1 + 56) = 0;
        *(void *)(a1 + 64) = 0;
        *(void *)(a1 + 72) = 0;
        long long v36 = *(_OWORD *)(a1 + 80);
        *(void *)(a4 + 552) = *(void *)(a1 + 96);
        *(_OWORD *)(a4 + 536) = v36;
        *(void *)(a1 + 88) = 0;
        *(void *)(a1 + 96) = 0;
        *(void *)(a1 + 80) = 0;
        *(_OWORD *)(a4 + 560) = *(_OWORD *)(a1 + 104);
        *(void *)(a4 + 584) = 0;
        *(void *)(a4 + 592) = 0;
        *(void *)(a4 + 576) = 0;
        *(_OWORD *)(a4 + 576) = *(_OWORD *)(a1 + 120);
        *(void *)(a4 + 592) = *(void *)(a1 + 136);
        *(void *)(a1 + 120) = 0;
        *(void *)(a1 + 128) = 0;
        *(void *)(a1 + 136) = 0;
        long long v37 = *(_OWORD *)(a1 + 144);
        *(void *)(a4 + 616) = *(void *)(a1 + 160);
        *(_OWORD *)(a4 + 600) = v37;
        *(void *)(a1 + 152) = 0;
        *(void *)(a1 + 160) = 0;
        *(void *)(a1 + 144) = 0;
        *(_OWORD *)(a4 + 624) = *(_OWORD *)(a1 + 168);
        *(void *)(a4 + 648) = 0;
        *(void *)(a4 + 656) = 0;
        *(void *)(a4 + 640) = 0;
        *(_OWORD *)(a4 + 640) = *(_OWORD *)(a1 + 184);
        *(void *)(a4 + 656) = *(void *)(a1 + 200);
        *(void *)(a1 + 184) = 0;
        *(void *)(a1 + 192) = 0;
        *(void *)(a1 + 200) = 0;
        long long v38 = *(_OWORD *)(a1 + 208);
        *(void *)(a4 + 680) = *(void *)(a1 + 224);
        *(_OWORD *)(a4 + 664) = v38;
        *(void *)(a1 + 216) = 0;
        *(void *)(a1 + 224) = 0;
        *(void *)(a1 + 208) = 0;
        *(_OWORD *)(a4 + 688) = *(_OWORD *)(a1 + 232);
        *(void *)(a4 + 712) = 0;
        *(void *)(a4 + 720) = 0;
        *(void *)(a4 + 704) = 0;
        *(_OWORD *)(a4 + 704) = *(_OWORD *)(a1 + 248);
        *(void *)(a4 + 720) = *(void *)(a1 + 264);
        *(void *)(a1 + 248) = 0;
        *(void *)(a1 + 256) = 0;
        *(void *)(a1 + 264) = 0;
        long long v39 = *(_OWORD *)(a1 + 272);
        *(void *)(a4 + 744) = *(void *)(a1 + 288);
        *(_OWORD *)(a4 + 728) = v39;
        *(void *)(a1 + 280) = 0;
        *(void *)(a1 + 288) = 0;
        *(void *)(a1 + 272) = 0;
        *(_OWORD *)(a4 + 752) = *(_OWORD *)(a1 + 296);
        *(void *)(a4 + 776) = 0;
        *(void *)(a4 + 784) = 0;
        *(void *)(a4 + 768) = 0;
        *(_OWORD *)(a4 + 768) = *(_OWORD *)(a1 + 312);
        *(void *)(a4 + 784) = *(void *)(a1 + 328);
        *(void *)(a1 + 312) = 0;
        *(void *)(a1 + 320) = 0;
        *(void *)(a1 + 328) = 0;
        long long v40 = *(_OWORD *)(a1 + 336);
        *(void *)(a4 + 808) = *(void *)(a1 + 352);
        *(_OWORD *)(a4 + 792) = v40;
        *(void *)(a1 + 344) = 0;
        *(void *)(a1 + 352) = 0;
        *(void *)(a1 + 336) = 0;
        *(_OWORD *)(a4 + 816) = *(_OWORD *)(a1 + 360);
        *(void *)(a4 + 840) = 0;
        *(void *)(a4 + 848) = 0;
        *(void *)(a4 + 832) = 0;
        *(_OWORD *)(a4 + 832) = *(_OWORD *)(a1 + 376);
        *(void *)(a4 + 848) = *(void *)(a1 + 392);
        *(void *)(a1 + 376) = 0;
        *(void *)(a1 + 384) = 0;
        *(void *)(a1 + 392) = 0;
        long long v41 = *(_OWORD *)(a1 + 400);
        *(void *)(a4 + 872) = *(void *)(a1 + 416);
        *(_OWORD *)(a4 + 856) = v41;
        *(void *)(a4 + 880) = 0;
        *(void *)(a4 + 896) = 0;
        *(void *)(a4 + 888) = 0;
        __n128 result = *(__n128 *)(a1 + 424);
        *(__n128 *)(a4 + 880) = result;
        *(void *)(a4 + 896) = *(void *)(a1 + 440);
        *(void *)(a1 + 424) = 0;
        *(void *)(a1 + 432) = 0;
        *(void *)(a1 + 440) = 0;
        long long v19 = (_WORD *)(a4 + 904);
        uint64_t v20 = (_WORD *)(a1 + 448);
      }
      goto LABEL_21;
    }
    if (a3 == 1)
    {
      *(_OWORD *)a4 = *(_OWORD *)a1;
      long long v8 = *(_OWORD *)(a1 + 16);
      *(void *)(a4 + 32) = *(void *)(a1 + 32);
      *(_OWORD *)(a4 + 16) = v8;
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 16) = 0;
      *(_OWORD *)(a4 + 40) = *(_OWORD *)(a1 + 40);
      *(void *)(a4 + 64) = 0;
      *(void *)(a4 + 72) = 0;
      *(void *)(a4 + 56) = 0;
      *(_OWORD *)(a4 + 56) = *(_OWORD *)(a1 + 56);
      *(void *)(a4 + 72) = *(void *)(a1 + 72);
      *(void *)(a1 + 56) = 0;
      *(void *)(a1 + 64) = 0;
      *(void *)(a1 + 72) = 0;
      long long v9 = *(_OWORD *)(a1 + 80);
      *(void *)(a4 + 96) = *(void *)(a1 + 96);
      *(_OWORD *)(a4 + 80) = v9;
      *(void *)(a1 + 88) = 0;
      *(void *)(a1 + 96) = 0;
      *(void *)(a1 + 80) = 0;
      *(_OWORD *)(a4 + 104) = *(_OWORD *)(a1 + 104);
      *(void *)(a4 + 128) = 0;
      *(void *)(a4 + 136) = 0;
      *(void *)(a4 + 120) = 0;
      *(_OWORD *)(a4 + 120) = *(_OWORD *)(a1 + 120);
      *(void *)(a4 + 136) = *(void *)(a1 + 136);
      *(void *)(a1 + 120) = 0;
      *(void *)(a1 + 128) = 0;
      *(void *)(a1 + 136) = 0;
      long long v10 = *(_OWORD *)(a1 + 144);
      *(void *)(a4 + 160) = *(void *)(a1 + 160);
      *(_OWORD *)(a4 + 144) = v10;
      *(void *)(a1 + 152) = 0;
      *(void *)(a1 + 160) = 0;
      *(void *)(a1 + 144) = 0;
      *(_OWORD *)(a4 + 168) = *(_OWORD *)(a1 + 168);
      *(void *)(a4 + 192) = 0;
      *(void *)(a4 + 200) = 0;
      *(void *)(a4 + 184) = 0;
      *(_OWORD *)(a4 + 184) = *(_OWORD *)(a1 + 184);
      *(void *)(a4 + 200) = *(void *)(a1 + 200);
      *(void *)(a1 + 184) = 0;
      *(void *)(a1 + 192) = 0;
      *(void *)(a1 + 200) = 0;
      long long v11 = *(_OWORD *)(a1 + 208);
      *(void *)(a4 + 224) = *(void *)(a1 + 224);
      *(_OWORD *)(a4 + 208) = v11;
      *(void *)(a1 + 216) = 0;
      *(void *)(a1 + 224) = 0;
      *(void *)(a1 + 208) = 0;
      *(_OWORD *)(a4 + 232) = *(_OWORD *)(a1 + 232);
      *(void *)(a4 + 256) = 0;
      *(void *)(a4 + 264) = 0;
      *(void *)(a4 + 248) = 0;
      *(_OWORD *)(a4 + 248) = *(_OWORD *)(a1 + 248);
      *(void *)(a4 + 264) = *(void *)(a1 + 264);
      *(void *)(a1 + 248) = 0;
      *(void *)(a1 + 256) = 0;
      *(void *)(a1 + 264) = 0;
      long long v12 = *(_OWORD *)(a1 + 272);
      *(void *)(a4 + 288) = *(void *)(a1 + 288);
      *(_OWORD *)(a4 + 272) = v12;
      *(void *)(a1 + 280) = 0;
      *(void *)(a1 + 288) = 0;
      *(void *)(a1 + 272) = 0;
      *(_OWORD *)(a4 + 296) = *(_OWORD *)(a1 + 296);
      *(void *)(a4 + 320) = 0;
      *(void *)(a4 + 328) = 0;
      *(void *)(a4 + 312) = 0;
      uint64_t v13 = *(void *)(a1 + 320);
      *(void *)(a4 + 312) = *(void *)(a1 + 312);
      *(void *)(a4 + 320) = v13;
      *(void *)(a4 + 328) = *(void *)(a1 + 328);
      *(void *)(a1 + 312) = 0;
      *(void *)(a1 + 320) = 0;
      *(void *)(a1 + 328) = 0;
      long long v14 = *(_OWORD *)(a1 + 336);
      *(void *)(a4 + 352) = *(void *)(a1 + 352);
      *(_OWORD *)(a4 + 336) = v14;
      *(void *)(a1 + 344) = 0;
      *(void *)(a1 + 352) = 0;
      *(void *)(a1 + 336) = 0;
      *(_OWORD *)(a4 + 360) = *(_OWORD *)(a1 + 360);
      *(void *)(a4 + 384) = 0;
      *(void *)(a4 + 392) = 0;
      *(void *)(a4 + 376) = 0;
      uint64_t v15 = *(void *)(a1 + 384);
      *(void *)(a4 + 376) = *(void *)(a1 + 376);
      *(void *)(a4 + 384) = v15;
      *(void *)(a4 + 392) = *(void *)(a1 + 392);
      *(void *)(a1 + 376) = 0;
      *(void *)(a1 + 384) = 0;
      *(void *)(a1 + 392) = 0;
      __n128 result = *(__n128 *)(a1 + 400);
      uint64_t v17 = *(void *)(a1 + 416);
      *(__n128 *)(a4 + 400) = result;
      *(void *)(a4 + 416) = v17;
      *(void *)(a4 + 424) = 0;
      *(void *)(a4 + 432) = 0;
      *(void *)(a4 + 440) = 0;
      uint64_t v18 = *(void *)(a1 + 432);
      *(void *)(a4 + 424) = *(void *)(a1 + 424);
      *(void *)(a4 + 432) = v18;
      *(void *)(a4 + 440) = *(void *)(a1 + 440);
      *(void *)(a1 + 424) = 0;
      *(void *)(a1 + 432) = 0;
      *(void *)(a1 + 440) = 0;
      long long v19 = (_WORD *)(a4 + 448);
      uint64_t v20 = (_WORD *)(a1 + 448);
LABEL_21:
      *long long v19 = *v20;
      return result;
    }
    if ((uint64_t)a3 > 8)
    {
      unint64_t v95 = a3 >> 1;
      uint64_t v96 = 456 * (a3 >> 1);
      uint64_t v97 = (void *)(a1 + v96);
      sub_9164E4(a1, a1 + v96, a3 >> 1, a4, a3 >> 1);
      sub_9164E4(v7 + v96, a2, a3 - v95, v4 + v96, a3 - v95);
      uint64_t v98 = v7 + v96;
      while ((void *)v98 != a2)
      {
        unint64_t v110 = (_OWORD *)(v4 + 16);
        uint64_t v111 = (_OWORD *)(v4 + 40);
        int v112 = (void *)(v4 + 56);
        uint64_t v113 = (_OWORD *)(v4 + 80);
        unint64_t v114 = (_OWORD *)(v4 + 104);
        int v115 = (void *)(v4 + 120);
        if (*(unsigned __int8 *)(v98 + 449) <= *(unsigned __int8 *)(v7 + 449))
        {
          *(_OWORD *)uint64_t v4 = *(_OWORD *)v7;
          long long v99 = *(_OWORD *)(v7 + 16);
          *(void *)(v4 + 32) = *(void *)(v7 + 32);
          *unint64_t v110 = v99;
          *(void *)(v7 + 24) = 0;
          *(void *)(v7 + 32) = 0;
          *(void *)(v7 + 16) = 0;
          *uint64_t v111 = *(_OWORD *)(v7 + 40);
          *(void *)(v4 + 64) = 0;
          *(void *)(v4 + 72) = 0;
          *int v112 = 0;
          *(_OWORD *)(v4 + 56) = *(_OWORD *)(v7 + 56);
          *(void *)(v4 + 72) = *(void *)(v7 + 72);
          *(void *)(v7 + 56) = 0;
          *(void *)(v7 + 64) = 0;
          *(void *)(v7 + 72) = 0;
          long long v100 = *(_OWORD *)(v7 + 80);
          *(void *)(v4 + 96) = *(void *)(v7 + 96);
          *uint64_t v113 = v100;
          *(void *)(v7 + 88) = 0;
          *(void *)(v7 + 96) = 0;
          *(void *)(v7 + 80) = 0;
          *unint64_t v114 = *(_OWORD *)(v7 + 104);
          *(void *)(v4 + 128) = 0;
          *(void *)(v4 + 136) = 0;
          *int v115 = 0;
          *(_OWORD *)(v4 + 120) = *(_OWORD *)(v7 + 120);
          *(void *)(v4 + 136) = *(void *)(v7 + 136);
          *(void *)(v7 + 120) = 0;
          *(void *)(v7 + 128) = 0;
          *(void *)(v7 + 136) = 0;
          long long v101 = *(_OWORD *)(v7 + 144);
          *(void *)(v4 + 160) = *(void *)(v7 + 160);
          *(_OWORD *)(v4 + 144) = v101;
          *(void *)(v7 + 152) = 0;
          *(void *)(v7 + 160) = 0;
          *(void *)(v7 + 144) = 0;
          *(_OWORD *)(v4 + 168) = *(_OWORD *)(v7 + 168);
          *(void *)(v4 + 192) = 0;
          *(void *)(v4 + 200) = 0;
          *(void *)(v4 + 184) = 0;
          *(_OWORD *)(v4 + 184) = *(_OWORD *)(v7 + 184);
          *(void *)(v4 + 200) = *(void *)(v7 + 200);
          *(void *)(v7 + 184) = 0;
          *(void *)(v7 + 192) = 0;
          *(void *)(v7 + 200) = 0;
          long long v102 = *(_OWORD *)(v7 + 208);
          *(void *)(v4 + 224) = *(void *)(v7 + 224);
          *(_OWORD *)(v4 + 208) = v102;
          *(void *)(v7 + 216) = 0;
          *(void *)(v7 + 224) = 0;
          *(void *)(v7 + 208) = 0;
          *(_OWORD *)(v4 + 232) = *(_OWORD *)(v7 + 232);
          *(void *)(v4 + 256) = 0;
          *(void *)(v4 + 264) = 0;
          *(void *)(v4 + 248) = 0;
          *(_OWORD *)(v4 + 248) = *(_OWORD *)(v7 + 248);
          *(void *)(v4 + 264) = *(void *)(v7 + 264);
          *(void *)(v7 + 248) = 0;
          *(void *)(v7 + 256) = 0;
          *(void *)(v7 + 264) = 0;
          long long v103 = *(_OWORD *)(v7 + 272);
          *(void *)(v4 + 288) = *(void *)(v7 + 288);
          *(_OWORD *)(v4 + 272) = v103;
          *(void *)(v7 + 280) = 0;
          *(void *)(v7 + 288) = 0;
          *(void *)(v7 + 272) = 0;
          *(_OWORD *)(v4 + 296) = *(_OWORD *)(v7 + 296);
          *(void *)(v4 + 320) = 0;
          *(void *)(v4 + 328) = 0;
          *(void *)(v4 + 312) = 0;
          uint64_t v104 = *(void *)(v7 + 320);
          *(void *)(v4 + 312) = *(void *)(v7 + 312);
          *(void *)(v4 + 320) = v104;
          *(void *)(v4 + 328) = *(void *)(v7 + 328);
          *(void *)(v7 + 312) = 0;
          *(void *)(v7 + 320) = 0;
          *(void *)(v7 + 328) = 0;
          long long v105 = *(_OWORD *)(v7 + 336);
          *(void *)(v4 + 352) = *(void *)(v7 + 352);
          *(_OWORD *)(v4 + 336) = v105;
          *(void *)(v7 + 344) = 0;
          *(void *)(v7 + 352) = 0;
          *(void *)(v7 + 336) = 0;
          *(_OWORD *)(v4 + 360) = *(_OWORD *)(v7 + 360);
          *(void *)(v4 + 384) = 0;
          *(void *)(v4 + 392) = 0;
          *(void *)(v4 + 376) = 0;
          uint64_t v106 = *(void *)(v7 + 384);
          *(void *)(v4 + 376) = *(void *)(v7 + 376);
          *(void *)(v4 + 384) = v106;
          *(void *)(v4 + 392) = *(void *)(v7 + 392);
          *(void *)(v7 + 376) = 0;
          *(void *)(v7 + 384) = 0;
          *(void *)(v7 + 392) = 0;
          __n128 result = *(__n128 *)(v7 + 400);
          uint64_t v107 = *(void *)(v7 + 416);
          *(__n128 *)(v4 + 400) = result;
          *(void *)(v4 + 416) = v107;
          *(void *)(v4 + 424) = 0;
          *(void *)(v4 + 432) = 0;
          *(void *)(v4 + 440) = 0;
          uint64_t v108 = *(void *)(v7 + 432);
          *(void *)(v4 + 424) = *(void *)(v7 + 424);
          *(void *)(v4 + 432) = v108;
          *(void *)(v4 + 440) = *(void *)(v7 + 440);
          *(void *)(v7 + 424) = 0;
          *(void *)(v7 + 432) = 0;
          *(void *)(v7 + 440) = 0;
          uint64_t v109 = v7;
          v7 += 456;
          *(_WORD *)(v4 + 448) = *(_WORD *)(v109 + 448);
          v4 += 456;
          if ((void *)v7 == v97) {
            goto LABEL_28;
          }
        }
        else
        {
          *(_OWORD *)uint64_t v4 = *(_OWORD *)v98;
          long long v116 = *(_OWORD *)(v98 + 16);
          *(void *)(v4 + 32) = *(void *)(v98 + 32);
          *unint64_t v110 = v116;
          *(void *)(v98 + 24) = 0;
          *(void *)(v98 + 32) = 0;
          *(void *)(v98 + 16) = 0;
          *uint64_t v111 = *(_OWORD *)(v98 + 40);
          *(void *)(v4 + 64) = 0;
          *(void *)(v4 + 72) = 0;
          *int v112 = 0;
          *(_OWORD *)(v4 + 56) = *(_OWORD *)(v98 + 56);
          *(void *)(v4 + 72) = *(void *)(v98 + 72);
          *(void *)(v98 + 56) = 0;
          *(void *)(v98 + 64) = 0;
          *(void *)(v98 + 72) = 0;
          long long v117 = *(_OWORD *)(v98 + 80);
          *(void *)(v4 + 96) = *(void *)(v98 + 96);
          *uint64_t v113 = v117;
          *(void *)(v98 + 88) = 0;
          *(void *)(v98 + 96) = 0;
          *(void *)(v98 + 80) = 0;
          *unint64_t v114 = *(_OWORD *)(v98 + 104);
          *(void *)(v4 + 128) = 0;
          *(void *)(v4 + 136) = 0;
          *int v115 = 0;
          *(_OWORD *)(v4 + 120) = *(_OWORD *)(v98 + 120);
          *(void *)(v4 + 136) = *(void *)(v98 + 136);
          *(void *)(v98 + 120) = 0;
          *(void *)(v98 + 128) = 0;
          *(void *)(v98 + 136) = 0;
          long long v118 = *(_OWORD *)(v98 + 144);
          *(void *)(v4 + 160) = *(void *)(v98 + 160);
          *(_OWORD *)(v4 + 144) = v118;
          *(void *)(v98 + 152) = 0;
          *(void *)(v98 + 160) = 0;
          *(void *)(v98 + 144) = 0;
          *(_OWORD *)(v4 + 168) = *(_OWORD *)(v98 + 168);
          *(void *)(v4 + 192) = 0;
          *(void *)(v4 + 200) = 0;
          *(void *)(v4 + 184) = 0;
          *(_OWORD *)(v4 + 184) = *(_OWORD *)(v98 + 184);
          *(void *)(v4 + 200) = *(void *)(v98 + 200);
          *(void *)(v98 + 184) = 0;
          *(void *)(v98 + 192) = 0;
          *(void *)(v98 + 200) = 0;
          long long v119 = *(_OWORD *)(v98 + 208);
          *(void *)(v4 + 224) = *(void *)(v98 + 224);
          *(_OWORD *)(v4 + 208) = v119;
          *(void *)(v98 + 216) = 0;
          *(void *)(v98 + 224) = 0;
          *(void *)(v98 + 208) = 0;
          *(_OWORD *)(v4 + 232) = *(_OWORD *)(v98 + 232);
          *(void *)(v4 + 256) = 0;
          *(void *)(v4 + 264) = 0;
          *(void *)(v4 + 248) = 0;
          *(_OWORD *)(v4 + 248) = *(_OWORD *)(v98 + 248);
          *(void *)(v4 + 264) = *(void *)(v98 + 264);
          *(void *)(v98 + 248) = 0;
          *(void *)(v98 + 256) = 0;
          *(void *)(v98 + 264) = 0;
          long long v120 = *(_OWORD *)(v98 + 272);
          *(void *)(v4 + 288) = *(void *)(v98 + 288);
          *(_OWORD *)(v4 + 272) = v120;
          *(void *)(v98 + 280) = 0;
          *(void *)(v98 + 288) = 0;
          *(void *)(v98 + 272) = 0;
          *(_OWORD *)(v4 + 296) = *(_OWORD *)(v98 + 296);
          *(void *)(v4 + 320) = 0;
          *(void *)(v4 + 328) = 0;
          *(void *)(v4 + 312) = 0;
          uint64_t v121 = *(void *)(v98 + 320);
          *(void *)(v4 + 312) = *(void *)(v98 + 312);
          *(void *)(v4 + 320) = v121;
          *(void *)(v4 + 328) = *(void *)(v98 + 328);
          *(void *)(v98 + 312) = 0;
          *(void *)(v98 + 320) = 0;
          *(void *)(v98 + 328) = 0;
          long long v122 = *(_OWORD *)(v98 + 336);
          *(void *)(v4 + 352) = *(void *)(v98 + 352);
          *(_OWORD *)(v4 + 336) = v122;
          *(void *)(v98 + 344) = 0;
          *(void *)(v98 + 352) = 0;
          *(void *)(v98 + 336) = 0;
          *(_OWORD *)(v4 + 360) = *(_OWORD *)(v98 + 360);
          *(void *)(v4 + 384) = 0;
          *(void *)(v4 + 392) = 0;
          *(void *)(v4 + 376) = 0;
          uint64_t v123 = *(void *)(v98 + 384);
          *(void *)(v4 + 376) = *(void *)(v98 + 376);
          *(void *)(v4 + 384) = v123;
          *(void *)(v4 + 392) = *(void *)(v98 + 392);
          *(void *)(v98 + 376) = 0;
          *(void *)(v98 + 384) = 0;
          *(void *)(v98 + 392) = 0;
          __n128 result = *(__n128 *)(v98 + 400);
          uint64_t v124 = *(void *)(v98 + 416);
          *(__n128 *)(v4 + 400) = result;
          *(void *)(v4 + 416) = v124;
          *(void *)(v4 + 424) = 0;
          *(void *)(v4 + 432) = 0;
          *(void *)(v4 + 440) = 0;
          uint64_t v125 = *(void *)(v98 + 432);
          *(void *)(v4 + 424) = *(void *)(v98 + 424);
          *(void *)(v4 + 432) = v125;
          *(void *)(v4 + 440) = *(void *)(v98 + 440);
          *(void *)(v98 + 424) = 0;
          *(void *)(v98 + 432) = 0;
          *(void *)(v98 + 440) = 0;
          uint64_t v126 = v98;
          v98 += 456;
          *(_WORD *)(v4 + 448) = *(_WORD *)(v126 + 448);
          v4 += 456;
          if ((void *)v7 == v97)
          {
LABEL_28:
            if ((void *)v98 != a2)
            {
              uint64_t v127 = 0;
              do
              {
                uint64_t v128 = (void *)(v98 + v127);
                uint64_t v129 = v4 + v127;
                *(_OWORD *)uint64_t v129 = *(_OWORD *)(v98 + v127);
                long long v130 = *(_OWORD *)(v98 + v127 + 16);
                *(void *)(v129 + 32) = *(void *)(v98 + v127 + 32);
                *(_OWORD *)(v129 + 16) = v130;
                v128[3] = 0;
                v128[4] = 0;
                void v128[2] = 0;
                long long v131 = *(_OWORD *)(v98 + v127 + 40);
                *(void *)(v129 + 64) = 0;
                *(void *)(v129 + 72) = 0;
                *(_OWORD *)(v129 + 40) = v131;
                *(void *)(v129 + 56) = 0;
                *(_OWORD *)(v129 + 56) = *(_OWORD *)(v98 + v127 + 56);
                *(void *)(v129 + 72) = *(void *)(v98 + v127 + 72);
                v128[7] = 0;
                v128[8] = 0;
                v128[9] = 0;
                long long v132 = *(_OWORD *)(v98 + v127 + 80);
                *(void *)(v129 + 96) = *(void *)(v98 + v127 + 96);
                *(_OWORD *)(v129 + 80) = v132;
                v128[11] = 0;
                v128[12] = 0;
                v128[10] = 0;
                long long v133 = *(_OWORD *)(v98 + v127 + 104);
                *(void *)(v129 + 128) = 0;
                *(void *)(v129 + 136) = 0;
                *(_OWORD *)(v129 + 104) = v133;
                *(void *)(v129 + 120) = 0;
                *(_OWORD *)(v129 + 120) = *(_OWORD *)(v98 + v127 + 120);
                *(void *)(v129 + 136) = *(void *)(v98 + v127 + 136);
                v128[15] = 0;
                v128[16] = 0;
                v128[17] = 0;
                long long v134 = *(_OWORD *)(v98 + v127 + 144);
                *(void *)(v129 + 160) = *(void *)(v98 + v127 + 160);
                *(_OWORD *)(v129 + 144) = v134;
                v128[19] = 0;
                v128[20] = 0;
                v128[18] = 0;
                *(_OWORD *)(v129 + 168) = *(_OWORD *)(v98 + v127 + 168);
                *(void *)(v129 + 192) = 0;
                *(void *)(v129 + 200) = 0;
                *(void *)(v129 + 184) = 0;
                *(_OWORD *)(v129 + 184) = *(_OWORD *)(v98 + v127 + 184);
                *(void *)(v129 + 200) = *(void *)(v98 + v127 + 200);
                v128[23] = 0;
                v128[24] = 0;
                long long v135 = *(_OWORD *)(v98 + v127 + 208);
                uint64_t v136 = *(void *)(v98 + v127 + 224);
                v128[25] = 0;
                *(void *)(v129 + 224) = v136;
                *(_OWORD *)(v129 + 208) = v135;
                v128[27] = 0;
                v128[28] = 0;
                long long v137 = *(_OWORD *)(v98 + v127 + 232);
                v128[26] = 0;
                *(_OWORD *)(v129 + 232) = v137;
                *(void *)(v129 + 256) = 0;
                *(void *)(v129 + 264) = 0;
                *(void *)(v129 + 248) = 0;
                *(_OWORD *)(v129 + 248) = *(_OWORD *)(v98 + v127 + 248);
                *(void *)(v129 + 264) = *(void *)(v98 + v127 + 264);
                v128[31] = 0;
                v128[32] = 0;
                v128[33] = 0;
                long long v138 = *(_OWORD *)(v98 + v127 + 272);
                *(void *)(v129 + 288) = *(void *)(v98 + v127 + 288);
                *(_OWORD *)(v129 + 272) = v138;
                v128[35] = 0;
                v128[36] = 0;
                v128[34] = 0;
                long long v139 = *(_OWORD *)(v98 + v127 + 296);
                *(void *)(v129 + 320) = 0;
                *(void *)(v129 + 328) = 0;
                *(_OWORD *)(v4 + v127 + 296) = v139;
                *(void *)(v129 + 312) = 0;
                uint64_t v140 = *(void *)(v98 + v127 + 320);
                *(void *)(v129 + 312) = *(void *)(v98 + v127 + 312);
                *(void *)(v129 + 320) = v140;
                *(void *)(v129 + 328) = *(void *)(v98 + v127 + 328);
                v128[39] = 0;
                v128[40] = 0;
                long long v141 = *(_OWORD *)(v98 + v127 + 336);
                uint64_t v142 = *(void *)(v98 + v127 + 352);
                v128[41] = 0;
                *(void *)(v129 + 352) = v142;
                *(_OWORD *)(v129 + 336) = v141;
                v128[43] = 0;
                v128[44] = 0;
                v128[42] = 0;
                long long v143 = *(_OWORD *)(v98 + v127 + 360);
                *(void *)(v129 + 384) = 0;
                *(void *)(v129 + 392) = 0;
                *(void *)(v129 + 376) = 0;
                *(_OWORD *)(v4 + v127 + 360) = v143;
                uint64_t v144 = *(void *)(v98 + v127 + 384);
                *(void *)(v129 + 376) = *(void *)(v98 + v127 + 376);
                *(void *)(v129 + 384) = v144;
                *(void *)(v129 + 392) = *(void *)(v98 + v127 + 392);
                v128[47] = 0;
                v128[48] = 0;
                v128[49] = 0;
                __n128 result = *(__n128 *)(v98 + v127 + 400);
                uint64_t v145 = *(void *)(v98 + v127 + 416);
                *(__n128 *)(v129 + 400) = result;
                *(void *)(v129 + 416) = v145;
                *(void *)(v129 + 424) = 0;
                *(void *)(v129 + 432) = 0;
                *(void *)(v129 + 440) = 0;
                uint64_t v146 = *(void *)(v98 + v127 + 432);
                *(void *)(v129 + 424) = *(void *)(v98 + v127 + 424);
                *(void *)(v129 + 432) = v146;
                *(void *)(v129 + 440) = *(void *)(v98 + v127 + 440);
                v128[53] = 0;
                v128[54] = 0;
                v128[55] = 0;
                *(_WORD *)(v129 + 448) = *(_WORD *)(v98 + v127 + 448);
                v127 += 456;
              }
              while (v128 + 57 != a2);
            }
            return result;
          }
        }
      }
      if ((void *)v7 != v97)
      {
        uint64_t v147 = 0;
        do
        {
          long long v148 = (void *)(v7 + v147);
          uint64_t v149 = v4 + v147;
          *(_OWORD *)uint64_t v149 = *(_OWORD *)(v7 + v147);
          long long v150 = *(_OWORD *)(v7 + v147 + 16);
          *(void *)(v149 + 32) = *(void *)(v7 + v147 + 32);
          *(_OWORD *)(v149 + 16) = v150;
          v148[3] = 0;
          v148[4] = 0;
          v148[2] = 0;
          long long v151 = *(_OWORD *)(v7 + v147 + 40);
          *(void *)(v149 + 64) = 0;
          *(void *)(v149 + 72) = 0;
          *(_OWORD *)(v149 + 40) = v151;
          *(void *)(v149 + 56) = 0;
          *(_OWORD *)(v149 + 56) = *(_OWORD *)(v7 + v147 + 56);
          *(void *)(v149 + 72) = *(void *)(v7 + v147 + 72);
          v148[7] = 0;
          v148[8] = 0;
          v148[9] = 0;
          long long v152 = *(_OWORD *)(v7 + v147 + 80);
          *(void *)(v149 + 96) = *(void *)(v7 + v147 + 96);
          *(_OWORD *)(v149 + 80) = v152;
          v148[11] = 0;
          v148[12] = 0;
          v148[10] = 0;
          long long v153 = *(_OWORD *)(v7 + v147 + 104);
          *(void *)(v149 + 128) = 0;
          *(void *)(v149 + 136) = 0;
          *(_OWORD *)(v149 + 104) = v153;
          *(void *)(v149 + 120) = 0;
          *(_OWORD *)(v149 + 120) = *(_OWORD *)(v7 + v147 + 120);
          *(void *)(v149 + 136) = *(void *)(v7 + v147 + 136);
          v148[15] = 0;
          v148[16] = 0;
          v148[17] = 0;
          long long v154 = *(_OWORD *)(v7 + v147 + 144);
          *(void *)(v149 + 160) = *(void *)(v7 + v147 + 160);
          *(_OWORD *)(v149 + 144) = v154;
          v148[19] = 0;
          v148[20] = 0;
          v148[18] = 0;
          *(_OWORD *)(v149 + 168) = *(_OWORD *)(v7 + v147 + 168);
          *(void *)(v149 + 192) = 0;
          *(void *)(v149 + 200) = 0;
          *(void *)(v149 + 184) = 0;
          *(_OWORD *)(v149 + 184) = *(_OWORD *)(v7 + v147 + 184);
          *(void *)(v149 + 200) = *(void *)(v7 + v147 + 200);
          v148[23] = 0;
          v148[24] = 0;
          long long v155 = *(_OWORD *)(v7 + v147 + 208);
          uint64_t v156 = *(void *)(v7 + v147 + 224);
          v148[25] = 0;
          *(void *)(v149 + 224) = v156;
          *(_OWORD *)(v149 + 208) = v155;
          v148[27] = 0;
          v148[28] = 0;
          long long v157 = *(_OWORD *)(v7 + v147 + 232);
          v148[26] = 0;
          *(_OWORD *)(v149 + 232) = v157;
          *(void *)(v149 + 256) = 0;
          *(void *)(v149 + 264) = 0;
          *(void *)(v149 + 248) = 0;
          *(_OWORD *)(v149 + 248) = *(_OWORD *)(v7 + v147 + 248);
          *(void *)(v149 + 264) = *(void *)(v7 + v147 + 264);
          v148[31] = 0;
          v148[32] = 0;
          v148[33] = 0;
          long long v158 = *(_OWORD *)(v7 + v147 + 272);
          *(void *)(v149 + 288) = *(void *)(v7 + v147 + 288);
          *(_OWORD *)(v149 + 272) = v158;
          v148[35] = 0;
          v148[36] = 0;
          v148[34] = 0;
          long long v159 = *(_OWORD *)(v7 + v147 + 296);
          *(void *)(v149 + 320) = 0;
          *(void *)(v149 + 328) = 0;
          *(_OWORD *)(v4 + v147 + 296) = v159;
          *(void *)(v149 + 312) = 0;
          uint64_t v160 = *(void *)(v7 + v147 + 320);
          *(void *)(v149 + 312) = *(void *)(v7 + v147 + 312);
          *(void *)(v149 + 320) = v160;
          *(void *)(v149 + 328) = *(void *)(v7 + v147 + 328);
          v148[39] = 0;
          v148[40] = 0;
          long long v161 = *(_OWORD *)(v7 + v147 + 336);
          uint64_t v162 = *(void *)(v7 + v147 + 352);
          v148[41] = 0;
          *(void *)(v149 + 352) = v162;
          *(_OWORD *)(v149 + 336) = v161;
          v148[43] = 0;
          v148[44] = 0;
          v148[42] = 0;
          long long v163 = *(_OWORD *)(v7 + v147 + 360);
          *(void *)(v149 + 384) = 0;
          *(void *)(v149 + 392) = 0;
          *(void *)(v149 + 376) = 0;
          *(_OWORD *)(v4 + v147 + 360) = v163;
          uint64_t v164 = *(void *)(v7 + v147 + 384);
          *(void *)(v149 + 376) = *(void *)(v7 + v147 + 376);
          *(void *)(v149 + 384) = v164;
          *(void *)(v149 + 392) = *(void *)(v7 + v147 + 392);
          v148[47] = 0;
          v148[48] = 0;
          v148[49] = 0;
          __n128 result = *(__n128 *)(v7 + v147 + 400);
          uint64_t v165 = *(void *)(v7 + v147 + 416);
          *(__n128 *)(v149 + 400) = result;
          *(void *)(v149 + 416) = v165;
          *(void *)(v149 + 424) = 0;
          *(void *)(v149 + 432) = 0;
          *(void *)(v149 + 440) = 0;
          uint64_t v166 = *(void *)(v7 + v147 + 432);
          *(void *)(v149 + 424) = *(void *)(v7 + v147 + 424);
          *(void *)(v149 + 432) = v166;
          *(void *)(v149 + 440) = *(void *)(v7 + v147 + 440);
          v148[53] = 0;
          v148[54] = 0;
          v148[55] = 0;
          *(_WORD *)(v149 + 448) = *(_WORD *)(v7 + v147 + 448);
          v147 += 456;
        }
        while (v148 + 57 != v97);
      }
    }
    else if ((void *)a1 != a2)
    {
      *(_OWORD *)a4 = *(_OWORD *)a1;
      long long v42 = *(_OWORD *)(a1 + 16);
      *(void *)(a4 + 32) = *(void *)(a1 + 32);
      *(_OWORD *)(a4 + 16) = v42;
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 16) = 0;
      *(_OWORD *)(a4 + 40) = *(_OWORD *)(a1 + 40);
      *(void *)(a4 + 64) = 0;
      *(void *)(a4 + 72) = 0;
      *(void *)(a4 + 56) = 0;
      *(_OWORD *)(a4 + 56) = *(_OWORD *)(a1 + 56);
      *(void *)(a4 + 72) = *(void *)(a1 + 72);
      *(void *)(a1 + 56) = 0;
      *(void *)(a1 + 64) = 0;
      *(void *)(a1 + 72) = 0;
      long long v43 = *(_OWORD *)(a1 + 80);
      *(void *)(a4 + 96) = *(void *)(a1 + 96);
      *(_OWORD *)(a4 + 80) = v43;
      *(void *)(a1 + 88) = 0;
      *(void *)(a1 + 96) = 0;
      *(void *)(a1 + 80) = 0;
      *(_OWORD *)(a4 + 104) = *(_OWORD *)(a1 + 104);
      *(void *)(a4 + 128) = 0;
      *(void *)(a4 + 136) = 0;
      *(void *)(a4 + 120) = 0;
      *(_OWORD *)(a4 + 120) = *(_OWORD *)(a1 + 120);
      *(void *)(a4 + 136) = *(void *)(a1 + 136);
      *(void *)(a1 + 120) = 0;
      *(void *)(a1 + 128) = 0;
      *(void *)(a1 + 136) = 0;
      long long v44 = *(_OWORD *)(a1 + 144);
      *(void *)(a4 + 160) = *(void *)(a1 + 160);
      *(_OWORD *)(a4 + 144) = v44;
      *(void *)(a1 + 152) = 0;
      *(void *)(a1 + 160) = 0;
      *(void *)(a1 + 144) = 0;
      *(_OWORD *)(a4 + 168) = *(_OWORD *)(a1 + 168);
      *(void *)(a4 + 192) = 0;
      *(void *)(a4 + 200) = 0;
      *(void *)(a4 + 184) = 0;
      *(_OWORD *)(a4 + 184) = *(_OWORD *)(a1 + 184);
      *(void *)(a4 + 200) = *(void *)(a1 + 200);
      *(void *)(a1 + 184) = 0;
      *(void *)(a1 + 192) = 0;
      *(void *)(a1 + 200) = 0;
      long long v45 = *(_OWORD *)(a1 + 208);
      *(void *)(a4 + 224) = *(void *)(a1 + 224);
      *(_OWORD *)(a4 + 208) = v45;
      *(void *)(a1 + 216) = 0;
      *(void *)(a1 + 224) = 0;
      *(void *)(a1 + 208) = 0;
      *(_OWORD *)(a4 + 232) = *(_OWORD *)(a1 + 232);
      *(void *)(a4 + 256) = 0;
      *(void *)(a4 + 264) = 0;
      *(void *)(a4 + 248) = 0;
      *(_OWORD *)(a4 + 248) = *(_OWORD *)(a1 + 248);
      *(void *)(a4 + 264) = *(void *)(a1 + 264);
      *(void *)(a1 + 248) = 0;
      *(void *)(a1 + 256) = 0;
      *(void *)(a1 + 264) = 0;
      long long v46 = *(_OWORD *)(a1 + 272);
      *(void *)(a4 + 288) = *(void *)(a1 + 288);
      *(_OWORD *)(a4 + 272) = v46;
      *(void *)(a1 + 280) = 0;
      *(void *)(a1 + 288) = 0;
      *(void *)(a1 + 272) = 0;
      *(_OWORD *)(a4 + 296) = *(_OWORD *)(a1 + 296);
      *(void *)(a4 + 320) = 0;
      *(void *)(a4 + 328) = 0;
      *(void *)(a4 + 312) = 0;
      uint64_t v47 = *(void *)(a1 + 320);
      *(void *)(a4 + 312) = *(void *)(a1 + 312);
      *(void *)(a4 + 320) = v47;
      *(void *)(a4 + 328) = *(void *)(a1 + 328);
      *(void *)(a1 + 312) = 0;
      *(void *)(a1 + 320) = 0;
      *(void *)(a1 + 328) = 0;
      long long v48 = *(_OWORD *)(a1 + 336);
      *(void *)(a4 + 352) = *(void *)(a1 + 352);
      *(_OWORD *)(a4 + 336) = v48;
      *(void *)(a1 + 344) = 0;
      *(void *)(a1 + 352) = 0;
      *(void *)(a1 + 336) = 0;
      *(_OWORD *)(a4 + 360) = *(_OWORD *)(a1 + 360);
      *(void *)(a4 + 384) = 0;
      *(void *)(a4 + 392) = 0;
      *(void *)(a4 + 376) = 0;
      uint64_t v49 = *(void *)(a1 + 384);
      *(void *)(a4 + 376) = *(void *)(a1 + 376);
      *(void *)(a4 + 384) = v49;
      *(void *)(a4 + 392) = *(void *)(a1 + 392);
      *(void *)(a1 + 376) = 0;
      *(void *)(a1 + 384) = 0;
      *(void *)(a1 + 392) = 0;
      __n128 result = *(__n128 *)(a1 + 400);
      uint64_t v50 = *(void *)(a1 + 416);
      *(__n128 *)(a4 + 400) = result;
      *(void *)(a4 + 416) = v50;
      *(void *)(a4 + 424) = 0;
      *(void *)(a4 + 432) = 0;
      *(void *)(a4 + 440) = 0;
      uint64_t v51 = *(void *)(a1 + 432);
      *(void *)(a4 + 424) = *(void *)(a1 + 424);
      *(void *)(a4 + 432) = v51;
      *(void *)(a4 + 440) = *(void *)(a1 + 440);
      *(void *)(a1 + 424) = 0;
      *(void *)(a1 + 432) = 0;
      *(void *)(a1 + 440) = 0;
      *(_WORD *)(a4 + 448) = *(_WORD *)(a1 + 448);
      long long v52 = (_OWORD *)(a1 + 456);
      if ((void *)(a1 + 456) != a2)
      {
        uint64_t v53 = 0;
        long long v54 = (_OWORD *)a4;
        do
        {
          uint64_t v62 = (uint64_t)v52;
          uint64_t v63 = (_OWORD *)((char *)v54 + 456);
          long long v64 = (_OWORD *)((char *)v54 + 472);
          uint64_t v65 = v54 + 31;
          if (*(unsigned __int8 *)(v7 + 905) <= *((unsigned __int8 *)v54 + 449))
          {
            *uint64_t v63 = *v52;
            long long v55 = *(_OWORD *)(v7 + 472);
            *((void *)v54 + 61) = *(void *)(v7 + 488);
            *long long v64 = v55;
            *(void *)(v7 + 480) = 0;
            *(void *)(v7 + 488) = 0;
            *(void *)(v7 + 472) = 0;
            *uint64_t v65 = *(_OWORD *)(v7 + 496);
            *((void *)v54 + 65) = 0;
            *((void *)v54 + 66) = 0;
            *((void *)v54 + 64) = 0;
            v54[32] = *(_OWORD *)(v7 + 512);
            *((void *)v54 + 66) = *(void *)(v7 + 528);
            *(void *)(v7 + 520) = 0;
            *(void *)(v7 + 512) = 0;
            *(void *)(v7 + 528) = 0;
            long long v56 = *(_OWORD *)(v7 + 536);
            *((void *)v54 + 69) = *(void *)(v7 + 552);
            *(_OWORD *)((char *)v54 + 536) = v56;
            *(void *)(v7 + 552) = 0;
            *(void *)(v7 + 544) = 0;
            *(void *)(v7 + 536) = 0;
            v54[35] = *(_OWORD *)(v7 + 560);
            *((void *)v54 + 73) = 0;
            *((void *)v54 + 74) = 0;
            *((void *)v54 + 72) = 0;
            v54[36] = *(_OWORD *)(v7 + 576);
            *((void *)v54 + 74) = *(void *)(v7 + 592);
            *(void *)(v7 + 584) = 0;
            *(void *)(v7 + 576) = 0;
            *(void *)(v7 + 592) = 0;
            long long v57 = *(_OWORD *)(v7 + 600);
            *((void *)v54 + 77) = *(void *)(v7 + 616);
            *(_OWORD *)((char *)v54 + 600) = v57;
            *(void *)(v7 + 616) = 0;
            *(void *)(v7 + 608) = 0;
            *(void *)(v7 + 600) = 0;
            v54[39] = *(_OWORD *)(v7 + 624);
            *((void *)v54 + 81) = 0;
            *((void *)v54 + 82) = 0;
            *((void *)v54 + 80) = 0;
            v54[40] = *(_OWORD *)(v7 + 640);
            *((void *)v54 + 82) = *(void *)(v7 + 656);
            *(void *)(v7 + 648) = 0;
            *(void *)(v7 + 640) = 0;
            *(void *)(v7 + 656) = 0;
            long long v58 = *(_OWORD *)(v7 + 664);
            *((void *)v54 + 85) = *(void *)(v7 + 680);
            *(_OWORD *)((char *)v54 + 664) = v58;
            *(void *)(v7 + 680) = 0;
            *(void *)(v7 + 672) = 0;
            *(void *)(v7 + 664) = 0;
            v54[43] = *(_OWORD *)(v7 + 688);
            *((void *)v54 + 89) = 0;
            *((void *)v54 + 90) = 0;
            *((void *)v54 + 88) = 0;
            v54[44] = *(_OWORD *)(v7 + 704);
            *((void *)v54 + 90) = *(void *)(v7 + 720);
            *(void *)(v7 + 712) = 0;
            *(void *)(v7 + 704) = 0;
            *(void *)(v7 + 720) = 0;
            long long v59 = *(_OWORD *)(v7 + 728);
            *((void *)v54 + 93) = *(void *)(v7 + 744);
            *(_OWORD *)((char *)v54 + 728) = v59;
            *(void *)(v7 + 744) = 0;
            *(void *)(v7 + 736) = 0;
            *(void *)(v7 + 728) = 0;
            v54[47] = *(_OWORD *)(v7 + 752);
            *((void *)v54 + 97) = 0;
            *((void *)v54 + 98) = 0;
            *((void *)v54 + 96) = 0;
            v54[48] = *(_OWORD *)(v7 + 768);
            *((void *)v54 + 98) = *(void *)(v7 + 784);
            *(void *)(v7 + 776) = 0;
            *(void *)(v7 + 768) = 0;
            *(void *)(v7 + 784) = 0;
            long long v60 = *(_OWORD *)(v7 + 792);
            *((void *)v54 + 101) = *(void *)(v7 + 808);
            *(_OWORD *)((char *)v54 + 792) = v60;
            *(void *)(v7 + 808) = 0;
            *(void *)(v7 + 800) = 0;
            *(void *)(v7 + 792) = 0;
            v54[51] = *(_OWORD *)(v7 + 816);
            *((void *)v54 + 105) = 0;
            *((void *)v54 + 106) = 0;
            *((void *)v54 + 104) = 0;
            v54[52] = *(_OWORD *)(v7 + 832);
            *((void *)v54 + 106) = *(void *)(v7 + 848);
            *(void *)(v7 + 840) = 0;
            *(void *)(v7 + 832) = 0;
            *(void *)(v7 + 848) = 0;
            long long v61 = *(_OWORD *)(v7 + 856);
            *((void *)v54 + 109) = *(void *)(v7 + 872);
            *(_OWORD *)((char *)v54 + 856) = v61;
            *((void *)v54 + 110) = 0;
            *((void *)v54 + 112) = 0;
            *((void *)v54 + 111) = 0;
            __n128 result = *(__n128 *)(v7 + 880);
            v54[55] = result;
            *((void *)v54 + 112) = *(void *)(v7 + 896);
            *(void *)(v7 + 888) = 0;
            *(void *)(v7 + 880) = 0;
            *(void *)(v7 + 896) = 0;
            *((_WORD *)v54 + 452) = *(_WORD *)(v7 + 904);
          }
          else
          {
            long long v66 = v54[1];
            *uint64_t v63 = *v54;
            *long long v64 = v66;
            *((void *)v54 + 61) = *((void *)v54 + 4);
            *((void *)v54 + 2) = 0;
            *((void *)v54 + 3) = 0;
            *((void *)v54 + 4) = 0;
            *uint64_t v65 = *(_OWORD *)((char *)v54 + 40);
            v54[32] = *(_OWORD *)((char *)v54 + 56);
            *((void *)v54 + 66) = *((void *)v54 + 9);
            *((void *)v54 + 7) = 0;
            *((void *)v54 + 8) = 0;
            long long v67 = v54[5];
            *((void *)v54 + 69) = *((void *)v54 + 12);
            *(_OWORD *)((char *)v54 + 536) = v67;
            *((void *)v54 + 9) = 0;
            *((void *)v54 + 10) = 0;
            *((void *)v54 + 11) = 0;
            *((void *)v54 + 12) = 0;
            long long v68 = *(_OWORD *)((char *)v54 + 120);
            v54[35] = *(_OWORD *)((char *)v54 + 104);
            v54[36] = v68;
            *((void *)v54 + 74) = *((void *)v54 + 17);
            *((void *)v54 + 15) = 0;
            *((void *)v54 + 16) = 0;
            long long v69 = v54[9];
            *((void *)v54 + 77) = *((void *)v54 + 20);
            *(_OWORD *)((char *)v54 + 600) = v69;
            *((void *)v54 + 17) = 0;
            *((void *)v54 + 18) = 0;
            *((void *)v54 + 19) = 0;
            *((void *)v54 + 20) = 0;
            long long v70 = *(_OWORD *)((char *)v54 + 184);
            v54[39] = *(_OWORD *)((char *)v54 + 168);
            v54[40] = v70;
            *((void *)v54 + 82) = *((void *)v54 + 25);
            *((void *)v54 + 23) = 0;
            *((void *)v54 + 24) = 0;
            long long v71 = v54[13];
            *((void *)v54 + 85) = *((void *)v54 + 28);
            *(_OWORD *)((char *)v54 + 664) = v71;
            *((void *)v54 + 25) = 0;
            *((void *)v54 + 26) = 0;
            *((void *)v54 + 27) = 0;
            *((void *)v54 + 28) = 0;
            long long v72 = *(_OWORD *)((char *)v54 + 248);
            v54[43] = *(_OWORD *)((char *)v54 + 232);
            v54[44] = v72;
            *((void *)v54 + 90) = *((void *)v54 + 33);
            *((void *)v54 + 31) = 0;
            *((void *)v54 + 32) = 0;
            long long v73 = v54[17];
            *((void *)v54 + 93) = *((void *)v54 + 36);
            *(_OWORD *)((char *)v54 + 728) = v73;
            *((void *)v54 + 33) = 0;
            *((void *)v54 + 34) = 0;
            *((void *)v54 + 35) = 0;
            *((void *)v54 + 36) = 0;
            v54[47] = *(_OWORD *)((char *)v54 + 296);
            v54[48] = *(_OWORD *)((char *)v54 + 312);
            *((void *)v54 + 98) = *((void *)v54 + 41);
            *((void *)v54 + 39) = 0;
            *((void *)v54 + 40) = 0;
            *((void *)v54 + 41) = 0;
            long long v74 = v54[21];
            *((void *)v54 + 101) = *((void *)v54 + 44);
            *(_OWORD *)((char *)v54 + 792) = v74;
            *((void *)v54 + 42) = 0;
            *((void *)v54 + 43) = 0;
            *((void *)v54 + 44) = 0;
            v54[51] = *(_OWORD *)((char *)v54 + 360);
            v54[52] = *(_OWORD *)((char *)v54 + 376);
            *((void *)v54 + 106) = *((void *)v54 + 49);
            *((void *)v54 + 47) = 0;
            *((void *)v54 + 48) = 0;
            *((void *)v54 + 49) = 0;
            long long v75 = v54[25];
            *((void *)v54 + 109) = *((void *)v54 + 52);
            *(_OWORD *)((char *)v54 + 856) = v75;
            v54[55] = *(_OWORD *)((char *)v54 + 424);
            *((void *)v54 + 112) = *((void *)v54 + 55);
            *((void *)v54 + 53) = 0;
            *((void *)v54 + 54) = 0;
            *((void *)v54 + 55) = 0;
            uint64_t v76 = v4;
            *((_WORD *)v54 + 452) = *((_WORD *)v54 + 224);
            if (v54 != (_OWORD *)v4)
            {
              uint64_t v77 = v53;
              while (1)
              {
                uint64_t v76 = v4 + v77;
                if (*(unsigned __int8 *)(v7 + 905) <= *(unsigned __int8 *)(v4 + v77 - 7)) {
                  break;
                }
                v77 -= 456;
                sub_3648AC(v76, v77 + v4);
                if (!v77)
                {
                  uint64_t v76 = v4;
                  break;
                }
              }
            }
            sub_3648AC(v76, v62);
          }
          long long v52 = (_OWORD *)(v62 + 456);
          v53 += 456;
          long long v54 = v63;
          uint64_t v7 = v62;
        }
        while ((void *)(v62 + 456) != a2);
      }
    }
  }
  return result;
}

uint64_t *sub_9183D0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = (unint64_t *)a1[1];
    if (*v3)
    {
      unint64_t v4 = 0;
      do
      {
        ++v4;
        uint64_t v2 = sub_361164(v2) + 456;
      }
      while (v4 < *v3);
    }
  }
  return a1;
}

uint64_t sub_918430(uint64_t result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v98 = a2;
  uint64_t v99 = result;
  if (a5)
  {
    uint64_t v9 = a5;
    uint64_t v11 = a2;
    uint64_t v12 = result;
    uint64_t v13 = a2;
    while (v9 > a7 && a4 > a7)
    {
      if (!a4) {
        return result;
      }
      uint64_t v14 = 0;
      uint64_t v15 = -a4;
      while (1)
      {
        uint64_t v16 = v12 + v14;
        if (*(unsigned __int8 *)(v13 + 449) > *(unsigned __int8 *)(v12 + v14 + 449)) {
          break;
        }
        v14 += 456;
        if (__CFADD__(v15++, 1)) {
          return result;
        }
      }
      uint64_t v99 = v12 + v14;
      uint64_t v18 = -v15;
      uint64_t v96 = a3;
      uint64_t v97 = a6;
      uint64_t v95 = a7;
      if (-v15 >= v9)
      {
        if (v15 == -1) {
          return sub_916A00(&v99, &v98);
        }
        if (v15 > 0) {
          uint64_t v18 = 1 - v15;
        }
        uint64_t v28 = v18 >> 1;
        uint64_t v11 = v12 + 456 * (v18 >> 1) + v14;
        if (a3 == (void *)v13)
        {
          uint64_t v22 = (uint64_t)a3;
        }
        else
        {
          unint64_t v29 = 0x823EE08FB823EE09 * (((uint64_t)a3 - v13) >> 3);
          uint64_t v22 = v13;
          do
          {
            unint64_t v30 = v29 >> 1;
            unint64_t v31 = v22 + 456 * (v29 >> 1);
            unsigned int v32 = *(unsigned __int8 *)(v31 + 449);
            uint64_t v33 = v31 + 456;
            v29 += ~(v29 >> 1);
            if (v32 > *(unsigned __int8 *)(v11 + 449)) {
              uint64_t v22 = v33;
            }
            else {
              unint64_t v29 = v30;
            }
          }
          while (v29);
        }
        uint64_t v21 = 0x823EE08FB823EE09 * ((v22 - v13) >> 3);
      }
      else
      {
        uint64_t v19 = v11 - v12;
        if (v9 >= 0) {
          uint64_t v20 = v9;
        }
        else {
          uint64_t v20 = v9 + 1;
        }
        uint64_t v21 = v20 >> 1;
        uint64_t v22 = v11 + 456 * (v20 >> 1);
        if (v19 != v14)
        {
          unint64_t v23 = 0x823EE08FB823EE09 * ((v19 - v14) >> 3);
          uint64_t v11 = v12 + v14;
          do
          {
            unint64_t v24 = v23 >> 1;
            unint64_t v25 = v11 + 456 * (v23 >> 1);
            unsigned int v26 = *(unsigned __int8 *)(v25 + 449);
            uint64_t v27 = v25 + 456;
            v23 += ~(v23 >> 1);
            if (v26 < *(unsigned __int8 *)(v22 + 449)) {
              unint64_t v23 = v24;
            }
            else {
              uint64_t v11 = v27;
            }
          }
          while (v23);
        }
        uint64_t v28 = 0x823EE08FB823EE09 * ((v11 - v12 - v14) >> 3);
      }
      a4 = -(v28 + v15);
      uint64_t v34 = v9 - v21;
      uint64_t v35 = v28;
      uint64_t v36 = sub_918BF0(v11, v13, v22);
      uint64_t v37 = v35;
      uint64_t v38 = v36;
      if (v37 + v21 >= v9 - (v37 + v21) - v15)
      {
        uint64_t v40 = v22;
        a6 = v97;
        uint64_t v41 = v37;
        __n128 result = sub_918430(v36, v40, v96, a4, v34, v97, v95);
        uint64_t v34 = v21;
        a7 = v95;
        a4 = v41;
        a3 = (void *)v38;
      }
      else
      {
        uint64_t v39 = v21;
        a7 = v95;
        __n128 result = sub_918430(v16, v11, v36, v37, v39, v97, v95);
        uint64_t v99 = v38;
        uint64_t v16 = v38;
        uint64_t v11 = v22;
        a6 = v97;
        a3 = v96;
      }
      uint64_t v98 = v11;
      uint64_t v13 = v11;
      uint64_t v12 = v16;
      uint64_t v9 = v34;
      if (!v34) {
        return result;
      }
    }
    if (a4 <= v9)
    {
      if (v12 == v13) {
        return result;
      }
      uint64_t v67 = 0;
      uint64_t v43 = 0;
      do
      {
        long long v68 = (void *)(v12 + v67);
        uint64_t v69 = a6 + v67;
        *(_OWORD *)uint64_t v69 = *(_OWORD *)(v12 + v67);
        long long v70 = *(_OWORD *)(v12 + v67 + 16);
        *(void *)(v69 + 32) = *(void *)(v12 + v67 + 32);
        *(_OWORD *)(v69 + 16) = v70;
        v68[3] = 0;
        v68[4] = 0;
        v68[2] = 0;
        long long v71 = *(_OWORD *)(v12 + v67 + 40);
        *(void *)(v69 + 64) = 0;
        *(void *)(v69 + 72) = 0;
        *(void *)(v69 + 56) = 0;
        *(_OWORD *)(v69 + 40) = v71;
        *(_OWORD *)(v69 + 56) = *(_OWORD *)(v12 + v67 + 56);
        *(void *)(v69 + 72) = *(void *)(v12 + v67 + 72);
        v68[7] = 0;
        v68[8] = 0;
        v68[9] = 0;
        long long v72 = *(_OWORD *)(v12 + v67 + 80);
        *(void *)(v69 + 96) = *(void *)(v12 + v67 + 96);
        *(_OWORD *)(v69 + 80) = v72;
        v68[11] = 0;
        v68[12] = 0;
        v68[10] = 0;
        long long v73 = *(_OWORD *)(v12 + v67 + 104);
        *(void *)(v69 + 128) = 0;
        *(void *)(v69 + 136) = 0;
        *(_OWORD *)(v69 + 104) = v73;
        *(void *)(v69 + 120) = 0;
        *(_OWORD *)(v69 + 120) = *(_OWORD *)(v12 + v67 + 120);
        *(void *)(v69 + 136) = *(void *)(v12 + v67 + 136);
        v68[15] = 0;
        v68[16] = 0;
        v68[17] = 0;
        long long v74 = *(_OWORD *)(v12 + v67 + 144);
        *(void *)(v69 + 160) = *(void *)(v12 + v67 + 160);
        *(_OWORD *)(v69 + 144) = v74;
        v68[19] = 0;
        v68[20] = 0;
        v68[18] = 0;
        long long v75 = *(_OWORD *)(v12 + v67 + 168);
        *(void *)(v69 + 192) = 0;
        *(void *)(v69 + 200) = 0;
        *(_OWORD *)(v69 + 168) = v75;
        *(void *)(v69 + 184) = 0;
        *(_OWORD *)(v69 + 184) = *(_OWORD *)(v12 + v67 + 184);
        *(void *)(v69 + 200) = *(void *)(v12 + v67 + 200);
        v68[23] = 0;
        v68[24] = 0;
        v68[25] = 0;
        long long v76 = *(_OWORD *)(v12 + v67 + 208);
        *(void *)(v69 + 224) = *(void *)(v12 + v67 + 224);
        *(_OWORD *)(v69 + 208) = v76;
        v68[27] = 0;
        v68[28] = 0;
        v68[26] = 0;
        *(_OWORD *)(v69 + 232) = *(_OWORD *)(v12 + v67 + 232);
        *(void *)(v69 + 256) = 0;
        *(void *)(v69 + 264) = 0;
        *(void *)(v69 + 248) = 0;
        *(_OWORD *)(v69 + 248) = *(_OWORD *)(v12 + v67 + 248);
        *(void *)(v69 + 264) = *(void *)(v12 + v67 + 264);
        v68[31] = 0;
        v68[32] = 0;
        long long v77 = *(_OWORD *)(v12 + v67 + 272);
        uint64_t v78 = *(void *)(v12 + v67 + 288);
        v68[33] = 0;
        *(void *)(v69 + 288) = v78;
        *(_OWORD *)(v69 + 272) = v77;
        v68[35] = 0;
        v68[36] = 0;
        v68[34] = 0;
        long long v79 = *(_OWORD *)(v12 + v67 + 296);
        *(void *)(v69 + 320) = 0;
        *(void *)(v69 + 328) = 0;
        *(void *)(v69 + 312) = 0;
        *(_OWORD *)(a6 + v67 + 296) = v79;
        uint64_t v80 = *(void *)(v12 + v67 + 320);
        *(void *)(v69 + 312) = *(void *)(v12 + v67 + 312);
        *(void *)(v69 + 320) = v80;
        *(void *)(v69 + 328) = *(void *)(v12 + v67 + 328);
        v68[39] = 0;
        v68[40] = 0;
        v68[41] = 0;
        long long v81 = *(_OWORD *)(v12 + v67 + 336);
        *(void *)(v69 + 352) = *(void *)(v12 + v67 + 352);
        *(_OWORD *)(v69 + 336) = v81;
        v68[43] = 0;
        v68[44] = 0;
        v68[42] = 0;
        *(_OWORD *)(a6 + v67 + 360) = *(_OWORD *)(v12 + v67 + 360);
        *(void *)(v69 + 384) = 0;
        *(void *)(v69 + 392) = 0;
        *(void *)(v69 + 376) = 0;
        uint64_t v82 = *(void *)(v12 + v67 + 384);
        *(void *)(v69 + 376) = *(void *)(v12 + v67 + 376);
        *(void *)(v69 + 384) = v82;
        *(void *)(v69 + 392) = *(void *)(v12 + v67 + 392);
        v68[47] = 0;
        v68[48] = 0;
        v68[49] = 0;
        uint64_t v83 = *(void *)(v12 + v67 + 416);
        *(_OWORD *)(v69 + 400) = *(_OWORD *)(v12 + v67 + 400);
        *(void *)(v69 + 416) = v83;
        *(void *)(v69 + 424) = 0;
        *(void *)(v69 + 432) = 0;
        *(void *)(v69 + 440) = 0;
        uint64_t v84 = *(void *)(v12 + v67 + 432);
        *(void *)(v69 + 424) = *(void *)(v12 + v67 + 424);
        *(void *)(v69 + 432) = v84;
        *(void *)(v69 + 440) = *(void *)(v12 + v67 + 440);
        v68[53] = 0;
        v68[54] = 0;
        v68[55] = 0;
        *(_WORD *)(v69 + 448) = *(_WORD *)(v12 + v67 + 448);
        ++v43;
        v67 += 456;
      }
      while (v68 + 57 != (void *)v13);
      if (v67)
      {
        uint64_t v85 = a6 + v67;
        uint64_t v86 = a6 + v67 - 456;
        uint64_t v87 = a6;
        while ((void *)v13 != a3)
        {
          if (*(unsigned __int8 *)(v13 + 449) <= *(unsigned __int8 *)(v87 + 449))
          {
            long long v88 = a3;
            uint64_t v89 = v13;
            __n128 result = sub_3648AC(v12, v87);
            uint64_t v13 = v89;
            a3 = v88;
            v87 += 456;
            v12 += 456;
            if (v85 == v87) {
              goto LABEL_72;
            }
          }
          else
          {
            long long v90 = a3;
            uint64_t v91 = v13;
            __n128 result = sub_3648AC(v12, v13);
            a3 = v90;
            uint64_t v13 = v91 + 456;
            v12 += 456;
            if (v85 == v87) {
              goto LABEL_72;
            }
          }
        }
        uint64_t v94 = 0;
        do
        {
          __n128 result = sub_3648AC(v12 + v94, v87 + v94);
          v94 += 456;
        }
        while (v86 != v87 + v94 - 456);
      }
    }
    else
    {
      if ((void *)v13 == a3) {
        return result;
      }
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      do
      {
        uint64_t v44 = a6 + v42;
        long long v45 = (void *)(v13 + v42);
        *(_OWORD *)uint64_t v44 = *(_OWORD *)(v13 + v42);
        long long v46 = *(_OWORD *)(v13 + v42 + 16);
        *(void *)(v44 + 32) = *(void *)(v13 + v42 + 32);
        *(_OWORD *)(v44 + 16) = v46;
        v45[3] = 0;
        v45[4] = 0;
        v45[2] = 0;
        long long v47 = *(_OWORD *)(v13 + v42 + 40);
        *(void *)(v44 + 64) = 0;
        *(void *)(v44 + 72) = 0;
        *(void *)(v44 + 56) = 0;
        *(_OWORD *)(v44 + 40) = v47;
        *(_OWORD *)(v44 + 56) = *(_OWORD *)(v13 + v42 + 56);
        *(void *)(v44 + 72) = *(void *)(v13 + v42 + 72);
        v45[7] = 0;
        v45[8] = 0;
        v45[9] = 0;
        long long v48 = *(_OWORD *)(v13 + v42 + 80);
        *(void *)(v44 + 96) = *(void *)(v13 + v42 + 96);
        *(_OWORD *)(v44 + 80) = v48;
        v45[11] = 0;
        v45[12] = 0;
        v45[10] = 0;
        long long v49 = *(_OWORD *)(v13 + v42 + 104);
        *(void *)(v44 + 128) = 0;
        *(void *)(v44 + 136) = 0;
        *(_OWORD *)(v44 + 104) = v49;
        *(void *)(v44 + 120) = 0;
        *(_OWORD *)(v44 + 120) = *(_OWORD *)(v13 + v42 + 120);
        *(void *)(v44 + 136) = *(void *)(v13 + v42 + 136);
        v45[15] = 0;
        v45[16] = 0;
        v45[17] = 0;
        long long v50 = *(_OWORD *)(v13 + v42 + 144);
        *(void *)(v44 + 160) = *(void *)(v13 + v42 + 160);
        *(_OWORD *)(v44 + 144) = v50;
        v45[19] = 0;
        v45[20] = 0;
        v45[18] = 0;
        long long v51 = *(_OWORD *)(v13 + v42 + 168);
        *(void *)(v44 + 192) = 0;
        *(void *)(v44 + 200) = 0;
        *(_OWORD *)(v44 + 168) = v51;
        *(void *)(v44 + 184) = 0;
        *(_OWORD *)(v44 + 184) = *(_OWORD *)(v13 + v42 + 184);
        *(void *)(v44 + 200) = *(void *)(v13 + v42 + 200);
        v45[23] = 0;
        v45[24] = 0;
        v45[25] = 0;
        long long v52 = *(_OWORD *)(v13 + v42 + 208);
        *(void *)(v44 + 224) = *(void *)(v13 + v42 + 224);
        *(_OWORD *)(v44 + 208) = v52;
        v45[27] = 0;
        v45[28] = 0;
        v45[26] = 0;
        *(_OWORD *)(v44 + 232) = *(_OWORD *)(v13 + v42 + 232);
        *(void *)(v44 + 256) = 0;
        *(void *)(v44 + 264) = 0;
        *(void *)(v44 + 248) = 0;
        *(_OWORD *)(v44 + 248) = *(_OWORD *)(v13 + v42 + 248);
        *(void *)(v44 + 264) = *(void *)(v13 + v42 + 264);
        v45[31] = 0;
        v45[32] = 0;
        long long v53 = *(_OWORD *)(v13 + v42 + 272);
        uint64_t v54 = *(void *)(v13 + v42 + 288);
        v45[33] = 0;
        *(void *)(v44 + 288) = v54;
        *(_OWORD *)(v44 + 272) = v53;
        v45[35] = 0;
        v45[36] = 0;
        v45[34] = 0;
        long long v55 = *(_OWORD *)(v13 + v42 + 296);
        *(void *)(v44 + 320) = 0;
        *(void *)(v44 + 328) = 0;
        *(void *)(v44 + 312) = 0;
        *(_OWORD *)(a6 + v42 + 296) = v55;
        uint64_t v56 = *(void *)(v13 + v42 + 320);
        *(void *)(v44 + 312) = *(void *)(v13 + v42 + 312);
        *(void *)(v44 + 320) = v56;
        *(void *)(v44 + 328) = *(void *)(v13 + v42 + 328);
        v45[39] = 0;
        v45[40] = 0;
        v45[41] = 0;
        long long v57 = *(_OWORD *)(v13 + v42 + 336);
        *(void *)(v44 + 352) = *(void *)(v13 + v42 + 352);
        *(_OWORD *)(v44 + 336) = v57;
        v45[43] = 0;
        v45[44] = 0;
        v45[42] = 0;
        *(_OWORD *)(a6 + v42 + 360) = *(_OWORD *)(v13 + v42 + 360);
        *(void *)(v44 + 384) = 0;
        *(void *)(v44 + 392) = 0;
        *(void *)(v44 + 376) = 0;
        uint64_t v58 = *(void *)(v13 + v42 + 384);
        *(void *)(v44 + 376) = *(void *)(v13 + v42 + 376);
        *(void *)(v44 + 384) = v58;
        *(void *)(v44 + 392) = *(void *)(v13 + v42 + 392);
        v45[47] = 0;
        v45[48] = 0;
        v45[49] = 0;
        uint64_t v59 = *(void *)(v13 + v42 + 416);
        *(_OWORD *)(v44 + 400) = *(_OWORD *)(v13 + v42 + 400);
        *(void *)(v44 + 416) = v59;
        *(void *)(v44 + 424) = 0;
        *(void *)(v44 + 432) = 0;
        *(void *)(v44 + 440) = 0;
        uint64_t v60 = *(void *)(v13 + v42 + 432);
        *(void *)(v44 + 424) = *(void *)(v13 + v42 + 424);
        *(void *)(v44 + 432) = v60;
        *(void *)(v44 + 440) = *(void *)(v13 + v42 + 440);
        v45[53] = 0;
        v45[54] = 0;
        v45[55] = 0;
        *(_WORD *)(v44 + 448) = *(_WORD *)(v13 + v42 + 448);
        ++v43;
        v42 += 456;
      }
      while (v45 + 57 != a3);
      if (v42)
      {
        uint64_t v61 = a6 + v42;
        uint64_t v62 = (uint64_t)(a3 - 57);
        while (v13 != v12)
        {
          unsigned int v63 = *(unsigned __int8 *)(v13 - 7);
          unsigned int v64 = *(unsigned __int8 *)(v61 - 7);
          if (v64 <= v63) {
            uint64_t v65 = v61 - 456;
          }
          else {
            uint64_t v65 = v13 - 456;
          }
          if (v64 <= v63) {
            uint64_t v66 = v13;
          }
          else {
            uint64_t v66 = v13 - 456;
          }
          if (v64 <= v63) {
            v61 -= 456;
          }
          __n128 result = sub_3648AC(v62, v65);
          uint64_t v13 = v66;
          v62 -= 456;
          if (v61 == a6) {
            goto LABEL_72;
          }
        }
        uint64_t v92 = 0;
        do
        {
          uint64_t v93 = v62 + v92;
          v92 -= 456;
          __n128 result = sub_3648AC(v93, v61 + v92);
        }
        while (v61 + v92 != a6);
      }
    }
LABEL_72:
    if (a6)
    {
      do
      {
        __n128 result = sub_361164(a6);
        a6 += 456;
        --v43;
      }
      while (v43);
    }
  }
  return result;
}

uint64_t sub_918BF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3;
  if (a1 != a2)
  {
    uint64_t v5 = a2;
    if (a2 == a3)
    {
      return a1;
    }
    else
    {
      uint64_t v10 = a2;
      uint64_t v11 = a1;
      while (1)
      {
        sub_916A00(&v11, &v10);
        uint64_t v4 = v11 + 456;
        uint64_t v6 = v10 + 456;
        uint64_t v10 = v6;
        v11 += 456;
        if (v6 == a3) {
          break;
        }
        if (v4 == v5) {
          uint64_t v5 = v6;
        }
      }
      if (v4 != v5)
      {
        do
        {
          uint64_t v10 = v5;
          while (1)
          {
            sub_916A00(&v11, &v10);
            uint64_t v7 = v11 + 456;
            uint64_t v8 = v10 + 456;
            uint64_t v10 = v8;
            v11 += 456;
            if (v8 == a3) {
              break;
            }
            if (v7 == v5) {
              uint64_t v5 = v8;
            }
          }
        }
        while (v7 != v5);
      }
    }
  }
  return v4;
}

char *sub_918CC4(unint64_t *a1, unsigned char *a2, int *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (uint64_t)&a2[-*a1];
  uint64_t v8 = v7 >> 3;
  uint64_t v9 = (unsigned char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == (unsigned char *)v5)
    {
      *(void *)uint64_t v9 = *(void *)a3;
      a1[1] = (unint64_t)(v9 + 8);
      return v9;
    }
    uint64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    uint64_t v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      uint64_t v19 = (void *)a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      uint64_t v15 = (unsigned char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 8;
      if (v5 > v16) {
        unint64_t v16 = a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x58)
      {
        uint64_t v19 = (void *)a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        uint64_t v19 = (void *)a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v13 = (uint64_t *)((char *)v13 + v21);
          uint64_t v19 = (void *)(v5 + v21);
          uint64_t v22 = (_OWORD *)(v5 + 16);
          unint64_t v23 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            *uint64_t v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_45;
          }
        }
      }
      do
      {
        uint64_t v43 = *v13++;
        *v19++ = v43;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_45:
    a1[1] = (unint64_t)v19;
    if ((unsigned char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11 - 3);
    }
    int v44 = *a3;
    v9[4] = *((unsigned char *)a3 + 4);
    *(_DWORD *)uint64_t v9 = v44;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v26 >> 61) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 2 > v26) {
    unint64_t v26 = v28 >> 2;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 61) {
      sub_188D718();
    }
    unint64_t v30 = (char *)operator new(8 * v29);
    unint64_t v31 = &v30[8 * v8];
    unsigned int v32 = &v30[8 * v29];
    if (v8 != v29) {
      goto LABEL_35;
    }
    goto LABEL_24;
  }
  unint64_t v30 = 0;
  unint64_t v31 = (char *)(8 * v8);
  unsigned int v32 = 0;
  if (!v8)
  {
LABEL_24:
    if (v7 < 1)
    {
      if ((unsigned char *)v6 == a2) {
        unint64_t v34 = 1;
      }
      else {
        unint64_t v34 = v7 >> 2;
      }
      if (v34 >> 61) {
        sub_188D718();
      }
      uint64_t v35 = (char *)operator new(8 * v34);
      unint64_t v31 = &v35[8 * (v34 >> 2)];
      unsigned int v32 = &v35[8 * v34];
      if (v30)
      {
        operator delete(v30);
        unint64_t v6 = *a1;
      }
    }
    else
    {
      unint64_t v33 = v8 + 2;
      if (v8 >= -1) {
        unint64_t v33 = v8 + 1;
      }
      v31 -= 8 * (v33 >> 1);
    }
  }
LABEL_35:
  *(void *)unint64_t v31 = *(void *)a3;
  uint64_t v36 = v31;
  if ((unsigned char *)v6 != v9)
  {
    uint64_t v37 = v9;
    uint64_t v36 = v31;
    do
    {
      int v38 = *((_DWORD *)v37 - 2);
      v37 -= 8;
      char v39 = v37[4];
      *((_DWORD *)v36 - 2) = v38;
      v36 -= 8;
      v36[4] = v39;
    }
    while (v37 != (unsigned char *)v6);
  }
  uint64_t v40 = (unsigned char *)a1[1];
  uint64_t v41 = v40 - v9;
  if (v40 != v9) {
    memmove(v31 + 8, v9, v41 - 3);
  }
  uint64_t v42 = (unsigned char *)*a1;
  *a1 = (unint64_t)v36;
  a1[1] = (unint64_t)&v31[v41 + 8];
  a1[2] = (unint64_t)v32;
  if (v42) {
    operator delete(v42);
  }
  return v31;
}

void sub_918FA0(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_918FB8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = __ROR8__(*a2, 32);
  unint64_t v8 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v7 ^ (v7 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v7 ^ (v7 >> 33))) >> 33));
  unint64_t v9 = v8 ^ (v8 >> 33);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8 ^ (v8 >> 33);
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = v9 & (v10 - 1);
    }
    uint64_t v12 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      uint64_t v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v13[1];
            if (v16 == v9)
            {
              if (*((_DWORD *)v13 + 4) == v6 && *((_DWORD *)v13 + 5) == HIDWORD(v6)) {
                return v13;
              }
            }
            else if ((v16 & (v10 - 1)) != v3)
            {
              goto LABEL_31;
            }
            uint64_t v13 = (uint64_t *)*v13;
            if (!v13) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 4) == v6 && *((_DWORD *)v13 + 5) == HIDWORD(v6)) {
              return v13;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v3) {
              break;
            }
          }
          uint64_t v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_31:
  uint64_t v19 = operator new(0x18uLL);
  *uint64_t v19 = 0;
  v19[1] = v9;
  v19[2] = *a3;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (v10 && (float)(v21 * (float)v10) >= v20)
  {
    uint64_t v22 = *(void *)a1;
    unint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
    if (v23)
    {
LABEL_34:
      *uint64_t v19 = *v23;
LABEL_69:
      *unint64_t v23 = v19;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v24 = 1;
    if (v10 >= 3) {
      BOOL v24 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v10);
    unint64_t v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_45;
    }
    if (prime < v10)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (prime <= v28) {
        size_t prime = v28;
      }
      if (prime < v10) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v31 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v3 = v9 % v10;
        uint64_t v22 = *(void *)a1;
        unint64_t v23 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v23) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v3 = v9;
        uint64_t v22 = *(void *)a1;
        unint64_t v23 = *(void **)(*(void *)a1 + 8 * v9);
        if (v23) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v3 = v31 & v9;
      uint64_t v22 = *(void *)a1;
      unint64_t v23 = *(void **)(*(void *)a1 + 8 * (v31 & v9));
      if (v23) {
        goto LABEL_34;
      }
    }
  }
  *uint64_t v19 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v19;
  *(void *)(v22 + 8 * v3) = a1 + 16;
  if (*v19)
  {
    unint64_t v32 = *(void *)(*v19 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v32 >= v10) {
        v32 %= v10;
      }
    }
    else
    {
      v32 &= v10 - 1;
    }
    unint64_t v23 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v19;
}

void sub_91930C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_919320(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = __ROR8__(*a2, 32);
  unint64_t v8 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v7 ^ (v7 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v7 ^ (v7 >> 33))) >> 33));
  unint64_t v9 = v8 ^ (v8 >> 33);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8 ^ (v8 >> 33);
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = v9 & (v10 - 1);
    }
    uint64_t v12 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      uint64_t v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v13[1];
            if (v16 == v9)
            {
              if (*((_DWORD *)v13 + 4) == v6 && *((_DWORD *)v13 + 5) == HIDWORD(v6)) {
                return v13;
              }
            }
            else if ((v16 & (v10 - 1)) != v3)
            {
              goto LABEL_31;
            }
            uint64_t v13 = (uint64_t *)*v13;
            if (!v13) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 4) == v6 && *((_DWORD *)v13 + 5) == HIDWORD(v6)) {
              return v13;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v3) {
              break;
            }
          }
          uint64_t v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_31:
  uint64_t v19 = operator new(0x18uLL);
  *uint64_t v19 = 0;
  v19[1] = v9;
  v19[2] = *a3;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (v10 && (float)(v21 * (float)v10) >= v20)
  {
    uint64_t v22 = *(void *)a1;
    unint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
    if (v23)
    {
LABEL_34:
      *uint64_t v19 = *v23;
LABEL_69:
      *unint64_t v23 = v19;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v24 = 1;
    if (v10 >= 3) {
      BOOL v24 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v10);
    unint64_t v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_45;
    }
    if (prime < v10)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (prime <= v28) {
        size_t prime = v28;
      }
      if (prime < v10) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v31 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v3 = v9 % v10;
        uint64_t v22 = *(void *)a1;
        unint64_t v23 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v23) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v3 = v9;
        uint64_t v22 = *(void *)a1;
        unint64_t v23 = *(void **)(*(void *)a1 + 8 * v9);
        if (v23) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v3 = v31 & v9;
      uint64_t v22 = *(void *)a1;
      unint64_t v23 = *(void **)(*(void *)a1 + 8 * (v31 & v9));
      if (v23) {
        goto LABEL_34;
      }
    }
  }
  *uint64_t v19 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v19;
  *(void *)(v22 + 8 * v3) = a1 + 16;
  if (*v19)
  {
    unint64_t v32 = *(void *)(*v19 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v32 >= v10) {
        v32 %= v10;
      }
    }
    else
    {
      v32 &= v10 - 1;
    }
    unint64_t v23 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v19;
}

void sub_919674(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_919688(uint64_t a1, void *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = __ROR8__(*a2, 32);
  unint64_t v9 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) >> 33));
  unint64_t v10 = v9 ^ (v9 >> 33);
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9 ^ (v9 >> 33);
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    uint64_t v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      unint64_t v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v17 = v14[1];
            if (v17 == v10)
            {
              if (*((_DWORD *)v14 + 4) == v7 && *((_DWORD *)v14 + 5) == HIDWORD(v7)) {
                return v14;
              }
            }
            else if ((v17 & (v11 - 1)) != v4)
            {
              goto LABEL_31;
            }
            unint64_t v14 = (void *)*v14;
            if (!v14) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (*((_DWORD *)v14 + 4) == v7 && *((_DWORD *)v14 + 5) == HIDWORD(v7)) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          unint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_31:
  uint64_t v19 = (void *)(a1 + 16);
  unint64_t v14 = operator new(0x30uLL);
  *unint64_t v14 = 0;
  v14[1] = v10;
  uint64_t v20 = **a4;
  v14[4] = 0;
  v14[5] = 0;
  void v14[2] = v20;
  v14[3] = 0;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (v11 && (float)(v22 * (float)v11) >= v21)
  {
    uint64_t v23 = *(void *)a1;
    BOOL v24 = *(void **)(*(void *)a1 + 8 * v4);
    if (v24)
    {
LABEL_34:
      *unint64_t v14 = *v24;
LABEL_69:
      void *v24 = v14;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v25 = 1;
    if (v11 >= 3) {
      BOOL v25 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v11);
    unint64_t v27 = vcvtps_u32_f32(v21 / v22);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_45;
    }
    if (prime < v11)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (prime <= v29) {
        size_t prime = v29;
      }
      if (prime < v11) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v32 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v23 = *(void *)a1;
        BOOL v24 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v24) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v23 = *(void *)a1;
        BOOL v24 = *(void **)(*(void *)a1 + 8 * v10);
        if (v24) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v4 = v32 & v10;
      uint64_t v23 = *(void *)a1;
      BOOL v24 = *(void **)(*(void *)a1 + 8 * (v32 & v10));
      if (v24) {
        goto LABEL_34;
      }
    }
  }
  *unint64_t v14 = *v19;
  *uint64_t v19 = v14;
  *(void *)(v23 + 8 * v4) = v19;
  if (*v14)
  {
    unint64_t v33 = *(void *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v33 >= v11) {
        v33 %= v11;
      }
    }
    else
    {
      v33 &= v11 - 1;
    }
    BOOL v24 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_9199EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3AEA0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_919A00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v5 = a3;
    uint64_t v6 = *(void *)(a1 + 8);
    if (a3 == v6)
    {
      uint64_t v8 = a2;
    }
    else
    {
      uint64_t v7 = 8 * ((a3 - a2) >> 3);
      uint64_t v8 = a2;
      do
      {
        sub_919AF0(v8, v8 + v7);
        v8 += 104;
      }
      while (v8 + v7 != v6);
      uint64_t v5 = *(void *)(a1 + 8);
    }
    while (v5 != v8)
    {
      if (*(unsigned char *)(v5 - 8))
      {
        unint64_t v9 = *(void **)(v5 - 32);
        if (v9)
        {
          *(void *)(v5 - 24) = v9;
          operator delete(v9);
        }
        unint64_t v10 = *(void **)(v5 - 56);
        if (v10)
        {
          *(void *)(v5 - 48) = v10;
          operator delete(v10);
        }
        unint64_t v11 = *(void **)(v5 - 88);
        if (v11)
        {
          *(void *)(v5 - 80) = v11;
          operator delete(v11);
        }
        *(unsigned char *)(v5 - 8) = 0;
      }
      v5 -= 104;
    }
    *(void *)(a1 + 8) = v8;
  }
  return a2;
}

uint64_t sub_919AF0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (result != a2)
  {
    unsigned int v4 = *(_DWORD *)(result + 8);
    unsigned int v5 = *(_DWORD *)(a2 + 8);
    if (v4 == v5)
    {
      if (v4 <= 6) {
        *(void *)__n128 result = *(void *)a2;
      }
    }
    else
    {
      if (v5 <= 6)
      {
        *(void *)__n128 result = *(void *)a2;
        unsigned int v5 = *(_DWORD *)(a2 + 8);
      }
      *(_DWORD *)(result + 8) = v5;
    }
  }
  uint64_t v6 = (void **)(result + 16);
  if (*(unsigned char *)(a2 + 96))
  {
    uint64_t v7 = (void *)(a2 + 16);
    if (*(unsigned char *)(result + 96))
    {
      uint8x8_t v12 = *v6;
      if (*v6)
      {
        *(void *)(v3 + 24) = v12;
        operator delete(v12);
        *uint64_t v6 = 0;
        *(void *)(v3 + 24) = 0;
        *(void *)(v3 + 32) = 0;
      }
      *(_OWORD *)(v3 + 16) = *(_OWORD *)(a2 + 16);
      *(void *)(v3 + 32) = *(void *)(a2 + 32);
      *uint64_t v7 = 0;
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 32) = 0;
      __int16 v13 = *(_WORD *)(a2 + 40);
      unint64_t v14 = *(void **)(v3 + 48);
      *(unsigned char *)(v3 + 42) = *(unsigned char *)(a2 + 42);
      *(_WORD *)(v3 + 40) = v13;
      if (v14)
      {
        *(void *)(v3 + 56) = v14;
        operator delete(v14);
        *(void *)(v3 + 48) = 0;
        *(void *)(v3 + 56) = 0;
        *(void *)(v3 + 64) = 0;
      }
      *(_OWORD *)(v3 + 48) = *(_OWORD *)(a2 + 48);
      *(void *)(v3 + 64) = *(void *)(a2 + 64);
      *(void *)(a2 + 48) = 0;
      *(void *)(a2 + 56) = 0;
      *(void *)(a2 + 64) = 0;
      unint64_t v15 = *(void **)(v3 + 72);
      if (v15)
      {
        *(void *)(v3 + 80) = v15;
        operator delete(v15);
        *(void *)(v3 + 72) = 0;
        *(void *)(v3 + 80) = 0;
        *(void *)(v3 + 88) = 0;
      }
      *(_OWORD *)(v3 + 72) = *(_OWORD *)(a2 + 72);
      *(void *)(v3 + 88) = *(void *)(a2 + 88);
      *(void *)(a2 + 72) = 0;
      *(void *)(a2 + 80) = 0;
      *(void *)(a2 + 88) = 0;
      return v3;
    }
    else
    {
      *uint64_t v6 = 0;
      *(void *)(result + 24) = 0;
      *(void *)(result + 32) = 0;
      *(_OWORD *)(result + 16) = *(_OWORD *)(a2 + 16);
      *(void *)(result + 32) = *(void *)(a2 + 32);
      *uint64_t v7 = 0;
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 32) = 0;
      __int16 v8 = *(_WORD *)(a2 + 40);
      *(unsigned char *)(result + 42) = *(unsigned char *)(a2 + 42);
      *(_WORD *)(result + 40) = v8;
      *(void *)(result + 56) = 0;
      *(void *)(result + 64) = 0;
      *(void *)(result + 48) = 0;
      *(_OWORD *)(result + 48) = *(_OWORD *)(a2 + 48);
      *(void *)(result + 64) = *(void *)(a2 + 64);
      *(void *)(a2 + 48) = 0;
      *(void *)(a2 + 56) = 0;
      *(void *)(a2 + 64) = 0;
      *(void *)(result + 72) = 0;
      *(void *)(result + 80) = 0;
      *(void *)(result + 88) = 0;
      *(_OWORD *)(result + 72) = *(_OWORD *)(a2 + 72);
      *(void *)(result + 88) = *(void *)(a2 + 88);
      *(void *)(a2 + 72) = 0;
      *(void *)(a2 + 80) = 0;
      *(void *)(a2 + 88) = 0;
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else if (*(unsigned char *)(result + 96))
  {
    unint64_t v9 = *(void **)(result + 72);
    if (v9)
    {
      *(void *)(v3 + 80) = v9;
      operator delete(v9);
    }
    unint64_t v10 = *(void **)(v3 + 48);
    if (v10)
    {
      *(void *)(v3 + 56) = v10;
      operator delete(v10);
    }
    unint64_t v11 = *v6;
    if (*v6)
    {
      *(void *)(v3 + 24) = v11;
      operator delete(v11);
    }
    *(unsigned char *)(v3 + 96) = 0;
    return v3;
  }
  return result;
}

uint64_t sub_919D00(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v7 = (a2 - *a1) / 104;
  uint64_t v8 = *a1 + 104 * v7;
  unint64_t v9 = a1[2];
  if (v6 >= v9)
  {
    unint64_t v19 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v6 - v5) >> 3) + 1;
    if (v19 > 0x276276276276276) {
      sub_2E00();
    }
    unint64_t v20 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v9 - v5) >> 3);
    if (2 * v20 > v19) {
      unint64_t v19 = 2 * v20;
    }
    if (v20 >= 0x13B13B13B13B13BLL) {
      unint64_t v21 = 0x276276276276276;
    }
    else {
      unint64_t v21 = v19;
    }
    char v39 = a1 + 2;
    if (v21)
    {
      if (v21 > 0x276276276276276) {
        sub_188D718();
      }
      float v22 = (char *)operator new(104 * v21);
    }
    else
    {
      float v22 = 0;
    }
    std::string __p = v22;
    uint64_t v36 = &v22[104 * v7];
    uint64_t v37 = v36;
    int v38 = &v22[104 * v21];
    sub_91A0E8((uint64_t)&__p, a3);
    uint64_t v8 = sub_91A41C(a1, &__p, v8);
    unint64_t v26 = v36;
    for (uint64_t i = v37; v37 != v26; uint64_t i = v37)
    {
      while (1)
      {
        unint64_t v28 = i - 104;
        uint64_t v37 = i - 104;
        if (*(i - 8)) {
          break;
        }
        i -= 104;
        if (v28 == v26) {
          goto LABEL_28;
        }
      }
      unint64_t v29 = (void *)*((void *)i - 4);
      if (v29)
      {
        *((void *)i - 3) = v29;
        operator delete(v29);
      }
      uint8x8_t v30 = (void *)*((void *)i - 7);
      if (v30)
      {
        *((void *)i - 6) = v30;
        operator delete(v30);
      }
      uint64_t v31 = (void *)*((void *)i - 11);
      if (v31)
      {
        *((void *)i - 10) = v31;
        operator delete(v31);
      }
      *(i - 8) = 0;
    }
LABEL_28:
    if (__p) {
      operator delete(__p);
    }
  }
  else
  {
    if (v8 != v6)
    {
      uint64_t v10 = v8 + 104;
      uint64_t v11 = v6 - 104;
      if (v6 < 0x68)
      {
        a1[1] = v6;
        if (v6 == v10)
        {
LABEL_43:
          sub_919AF0(v8, a3);
          return v8;
        }
      }
      else
      {
        uint64_t v12 = 0;
        uint64_t v13 = v5 + 8 * ((uint64_t)(v6 - (v8 + 104)) >> 3) + 104 * v7;
        do
        {
          uint64_t v14 = v13 + v12;
          *(_DWORD *)(v6 + v12 + 8) = *(_DWORD *)(v13 + v12 + 8);
          if (*(_DWORD *)(v13 + v12 + 8) <= 6u) {
            *(void *)(v6 + v12) = *(void *)v14;
          }
          int v15 = *(unsigned __int8 *)(v14 + 96);
          *(unsigned char *)(v6 + v12 + 96) = v15;
          if (v15)
          {
            uint64_t v16 = (void *)(v13 + v12);
            uint64_t v17 = v6 + v12;
            *(void *)(v17 + 16) = 0;
            *(void *)(v17 + 24) = 0;
            *(void *)(v17 + 32) = 0;
            *(_OWORD *)(v17 + 16) = *(_OWORD *)(v13 + v12 + 16);
            *(void *)(v17 + 32) = *(void *)(v13 + v12 + 32);
            _OWORD v16[2] = 0;
            unint64_t v16[3] = 0;
            v16[4] = 0;
            __int16 v18 = *(_WORD *)(v13 + v12 + 40);
            *(unsigned char *)(v17 + 42) = *(unsigned char *)(v13 + v12 + 42);
            *(_WORD *)(v17 + 40) = v18;
            *(void *)(v17 + 56) = 0;
            *(void *)(v17 + 64) = 0;
            *(void *)(v17 + 48) = 0;
            *(_OWORD *)(v17 + 48) = *(_OWORD *)(v13 + v12 + 48);
            *(void *)(v17 + 64) = *(void *)(v13 + v12 + 64);
            v16[6] = 0;
            v16[7] = 0;
            v16[8] = 0;
            *(void *)(v17 + 72) = 0;
            *(void *)(v17 + 80) = 0;
            *(void *)(v17 + 88) = 0;
            *(_OWORD *)(v17 + 72) = *(_OWORD *)(v13 + v12 + 72);
            *(void *)(v17 + 88) = *(void *)(v13 + v12 + 88);
            v16[9] = 0;
            v16[10] = 0;
            v16[11] = 0;
          }
          v12 += 104;
        }
        while (v13 + v12 < v6);
        a1[1] = v6 + v12;
        if (v6 == v10) {
          goto LABEL_43;
        }
      }
      uint64_t v32 = 8 * ((uint64_t)(v6 - (v8 + 104)) >> 3);
      uint64_t v33 = v5 + 104 * v7 - 104;
      do
      {
        sub_919AF0(v11, v33 + v32);
        v11 -= 104;
        v32 -= 104;
      }
      while (v32);
      goto LABEL_43;
    }
    *(_DWORD *)(v8 + 8) = *(_DWORD *)(a3 + 8);
    if (*(_DWORD *)(a3 + 8) <= 6u) {
      *(void *)uint64_t v8 = *(void *)a3;
    }
    int v23 = *(unsigned __int8 *)(a3 + 96);
    *(unsigned char *)(v5 + 104 * v7 + 96) = v23;
    if (v23)
    {
      uint64_t v24 = v5 + 104 * v7;
      *(void *)(v24 + 16) = 0;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + 32) = 0;
      *(_OWORD *)(v24 + 16) = *(_OWORD *)(a3 + 16);
      *(void *)(v24 + 32) = *(void *)(a3 + 32);
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 32) = 0;
      __int16 v25 = *(_WORD *)(a3 + 40);
      *(unsigned char *)(v24 + 42) = *(unsigned char *)(a3 + 42);
      *(_WORD *)(v24 + 40) = v25;
      *(void *)(v24 + 56) = 0;
      *(void *)(v24 + 64) = 0;
      *(void *)(v24 + 48) = 0;
      *(_OWORD *)(v24 + 48) = *(_OWORD *)(a3 + 48);
      *(void *)(v24 + 64) = *(void *)(a3 + 64);
      *(void *)(a3 + 48) = 0;
      *(void *)(a3 + 56) = 0;
      *(void *)(a3 + 64) = 0;
      *(void *)(v24 + 72) = 0;
      *(void *)(v24 + 80) = 0;
      *(void *)(v24 + 88) = 0;
      *(_OWORD *)(v24 + 72) = *(_OWORD *)(a3 + 72);
      *(void *)(v24 + 88) = *(void *)(a3 + 88);
      *(void *)(a3 + 72) = 0;
      *(void *)(a3 + 80) = 0;
      *(void *)(a3 + 88) = 0;
    }
    a1[1] = v8 + 104;
  }
  return v8;
}

void sub_91A0D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_91A608((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_91A0E8(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(void **)(a1 + 16);
  if (v4 != *(void **)(a1 + 24))
  {
LABEL_32:
    *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
    if (*(_DWORD *)(a2 + 8) > 6u) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  unint64_t v6 = *(unsigned char **)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  if (v5 <= *(void *)a1)
  {
    unint64_t v12 = 0x9D89D89D89D89D8ALL * (((char *)v4 - v6) >> 3);
    if (v4 == (void *)v6) {
      unint64_t v12 = 1;
    }
    if (v12 >= 0x276276276276277) {
      sub_188D718();
    }
    unint64_t v13 = v12 >> 2;
    uint64_t v14 = 104 * v12;
    int v15 = (char *)operator new(104 * v12);
    uint64_t v16 = &v15[104 * v13];
    uint64_t v17 = &v15[v14];
    uint64_t v18 = (uint64_t)v4 - v5;
    if (v4 == (void *)v5)
    {
      *(void *)a1 = v15;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = v17;
      if (!v6) {
        goto LABEL_31;
      }
    }
    else
    {
      uint64_t v19 = 0;
      uint64_t v20 = v18 / 104;
      unint64_t v21 = &v16[104 * (v18 / 104)];
      uint64_t v22 = 104 * v20;
      do
      {
        int v23 = &v16[v19];
        unsigned int v24 = *(_DWORD *)(v5 + v19 + 8);
        *(_DWORD *)&v16[v19 + 8] = v24;
        if (v24 <= 6) {
          *(void *)int v23 = *(void *)(v5 + v19);
        }
        int v25 = *(unsigned __int8 *)(v5 + v19 + 96);
        v23[96] = v25;
        if (v25)
        {
          unint64_t v26 = (void *)(v5 + v19);
          unint64_t v27 = &v16[v19];
          *((_OWORD *)v27 + 1) = *(_OWORD *)(v5 + v19 + 16);
          *((void *)v27 + 4) = *(void *)(v5 + v19 + 32);
          void v26[2] = 0;
          v26[3] = 0;
          v26[4] = 0;
          __int16 v28 = *(_WORD *)(v5 + v19 + 40);
          v27[42] = *(unsigned char *)(v5 + v19 + 42);
          *((_WORD *)v27 + 20) = v28;
          *((_OWORD *)v27 + 3) = *(_OWORD *)(v5 + v19 + 48);
          *((void *)v27 + 8) = *(void *)(v5 + v19 + 64);
          v26[6] = 0;
          v26[7] = 0;
          v26[8] = 0;
          *(_OWORD *)(v27 + 72) = *(_OWORD *)(v5 + v19 + 72);
          *((void *)v27 + 11) = *(void *)(v5 + v19 + 88);
          v26[9] = 0;
          v26[10] = 0;
          v26[11] = 0;
        }
        v19 += 104;
      }
      while (v22 != v19);
      unint64_t v6 = *(unsigned char **)a1;
      uint64_t v29 = *(void *)(a1 + 8);
      uint64_t v30 = *(void *)(a1 + 16);
      *(void *)a1 = v15;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v21;
      for (*(void *)(a1 + 24) = v17; v30 != v29; v30 -= 104)
      {
        if (*(unsigned char *)(v30 - 8))
        {
          uint64_t v31 = *(void **)(v30 - 32);
          if (v31)
          {
            *(void *)(v30 - 24) = v31;
            operator delete(v31);
          }
          uint64_t v32 = *(void **)(v30 - 56);
          if (v32)
          {
            *(void *)(v30 - 48) = v32;
            operator delete(v32);
          }
          uint64_t v33 = *(void **)(v30 - 88);
          if (v33)
          {
            *(void *)(v30 - 80) = v33;
            operator delete(v33);
          }
          *(unsigned char *)(v30 - 8) = 0;
        }
      }
      if (!v6) {
        goto LABEL_31;
      }
    }
    operator delete(v6);
LABEL_31:
    unsigned int v4 = *(void **)(a1 + 16);
    goto LABEL_32;
  }
  uint64_t v7 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v5 - *(void *)a1) >> 3);
  if (v7 >= -1) {
    uint64_t v8 = v7 + 1;
  }
  else {
    uint64_t v8 = v7 + 2;
  }
  uint64_t v9 = v8 >> 1;
  uint64_t v10 = -v9;
  if ((void *)v5 == v4)
  {
    unint64_t v11 = v5 - 104 * v9;
  }
  else
  {
    do
    {
      sub_919AF0(v5 + 104 * v10, v5);
      v5 += 104;
    }
    while ((void *)v5 != v4);
    unsigned int v4 = *(void **)(a1 + 8);
    unint64_t v11 = v5 + 104 * v10;
  }
  *(void *)(a1 + 8) = &v4[13 * v10];
  *(void *)(a1 + 16) = v11;
  unsigned int v4 = (void *)v11;
  *(_DWORD *)(v11 + 8) = *(_DWORD *)(a2 + 8);
  if (*(_DWORD *)(a2 + 8) > 6u) {
    goto LABEL_34;
  }
LABEL_33:
  void *v4 = *(void *)a2;
LABEL_34:
  int v34 = *(unsigned __int8 *)(a2 + 96);
  *((unsigned char *)v4 + 96) = v34;
  if (v34)
  {
    v4[2] = 0;
    v4[3] = 0;
    v4[4] = 0;
    *((_OWORD *)v4 + 1) = *(_OWORD *)(a2 + 16);
    v4[4] = *(void *)(a2 + 32);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    __int16 v35 = *(_WORD *)(a2 + 40);
    *((unsigned char *)v4 + 42) = *(unsigned char *)(a2 + 42);
    *((_WORD *)v4 + 20) = v35;
    v4[7] = 0;
    v4[8] = 0;
    v4[6] = 0;
    *((_OWORD *)v4 + 3) = *(_OWORD *)(a2 + 48);
    v4[8] = *(void *)(a2 + 64);
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
    v4[9] = 0;
    v4[10] = 0;
    v4[11] = 0;
    *(_OWORD *)(v4 + 9) = *(_OWORD *)(a2 + 72);
    v4[11] = *(void *)(a2 + 88);
    *(void *)(a2 + 72) = 0;
    *(void *)(a2 + 80) = 0;
    *(void *)(a2 + 88) = 0;
  }
  *(void *)(a1 + 16) += 104;
}

uint64_t sub_91A41C(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t result = a2[1];
  uint64_t v5 = *a1;
  uint64_t v6 = result;
  if (*a1 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a3 + v7;
      uint64_t v9 = result + v7;
      *(_DWORD *)(result + v7 - 96) = *(_DWORD *)(a3 + v7 - 96);
      if (*(_DWORD *)(a3 + v7 - 96) <= 6u) {
        *(void *)(v9 - 104) = *(void *)(v8 - 104);
      }
      int v10 = *(unsigned __int8 *)(v8 - 8);
      *(unsigned char *)(v9 - 8) = v10;
      if (v10)
      {
        uint64_t v11 = a3 + v7;
        uint64_t v12 = result + v7;
        *(void *)(v12 - 88) = 0;
        *(void *)(v12 - 80) = 0;
        *(void *)(v12 - 72) = 0;
        *(_OWORD *)(v12 - 88) = *(_OWORD *)(a3 + v7 - 88);
        *(void *)(v12 - 72) = *(void *)(a3 + v7 - 72);
        *(void *)(v11 - 88) = 0;
        *(void *)(v11 - 80) = 0;
        *(void *)(v11 - 72) = 0;
        __int16 v13 = *(_WORD *)(a3 + v7 - 64);
        *(unsigned char *)(v12 - 62) = *(unsigned char *)(a3 + v7 - 62);
        *(_WORD *)(v12 - 64) = v13;
        *(void *)(v12 - 48) = 0;
        *(void *)(v12 - 40) = 0;
        *(void *)(v12 - 56) = 0;
        *(_OWORD *)(v12 - 56) = *(_OWORD *)(a3 + v7 - 56);
        *(void *)(v12 - 40) = *(void *)(a3 + v7 - 40);
        *(void *)(v11 - 56) = 0;
        *(void *)(v11 - 48) = 0;
        *(void *)(v11 - 40) = 0;
        *(void *)(v12 - 32) = 0;
        *(void *)(v12 - 24) = 0;
        *(void *)(v12 - 16) = 0;
        *(_OWORD *)(v12 - 32) = *(_OWORD *)(a3 + v7 - 32);
        *(void *)(v12 - 16) = *(void *)(a3 + v7 - 16);
        *(void *)(v11 - 32) = 0;
        *(void *)(v11 - 24) = 0;
        *(void *)(v11 - 16) = 0;
      }
      v7 -= 104;
    }
    while (a3 + v7 != v5);
    uint64_t v6 = result + v7;
  }
  a2[1] = v6;
  uint64_t v14 = a1[1];
  uint64_t v15 = a2[2];
  if (v14 != a3)
  {
    uint64_t v16 = 0;
    do
    {
      uint64_t v17 = a3 + v16;
      *(_DWORD *)(v15 + v16 + 8) = *(_DWORD *)(a3 + v16 + 8);
      if (*(_DWORD *)(a3 + v16 + 8) <= 6u) {
        *(void *)(v15 + v16) = *(void *)v17;
      }
      int v18 = *(unsigned __int8 *)(v17 + 96);
      *(unsigned char *)(v15 + v16 + 96) = v18;
      if (v18)
      {
        uint64_t v19 = (void *)(a3 + v16);
        uint64_t v20 = v15 + v16;
        *(void *)(v20 + 16) = 0;
        *(void *)(v20 + 24) = 0;
        *(void *)(v20 + 32) = 0;
        *(_OWORD *)(v20 + 16) = *(_OWORD *)(a3 + v16 + 16);
        *(void *)(v20 + 32) = *(void *)(a3 + v16 + 32);
        v19[2] = 0;
        v19[3] = 0;
        v19[4] = 0;
        __int16 v21 = *(_WORD *)(a3 + v16 + 40);
        *(unsigned char *)(v20 + 42) = *(unsigned char *)(a3 + v16 + 42);
        *(_WORD *)(v20 + 40) = v21;
        *(void *)(v20 + 56) = 0;
        *(void *)(v20 + 64) = 0;
        *(void *)(v20 + 48) = 0;
        *(_OWORD *)(v20 + 48) = *(_OWORD *)(a3 + v16 + 48);
        *(void *)(v20 + 64) = *(void *)(a3 + v16 + 64);
        v19[6] = 0;
        v19[7] = 0;
        v19[8] = 0;
        *(void *)(v20 + 72) = 0;
        *(void *)(v20 + 80) = 0;
        *(void *)(v20 + 88) = 0;
        *(_OWORD *)(v20 + 72) = *(_OWORD *)(a3 + v16 + 72);
        *(void *)(v20 + 88) = *(void *)(a3 + v16 + 88);
        v19[9] = 0;
        v19[10] = 0;
        v19[11] = 0;
      }
      v16 += 104;
    }
    while (a3 + v16 != v14);
    uint64_t v6 = a2[1];
    v15 += v16;
  }
  a2[2] = v15;
  uint64_t v22 = *a1;
  *a1 = v6;
  a2[1] = v22;
  uint64_t v23 = a1[1];
  a1[1] = a2[2];
  a2[2] = v23;
  uint64_t v24 = a1[2];
  a1[2] = a2[3];
  a2[3] = v24;
  *a2 = a2[1];
  return result;
}

uint64_t sub_91A608(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    while (1)
    {
      uint64_t v5 = i - 104;
      *(void *)(a1 + 16) = i - 104;
      if (*(unsigned char *)(i - 8)) {
        break;
      }
      i -= 104;
      if (v5 == v2) {
        goto LABEL_2;
      }
    }
    uint64_t v6 = *(void **)(i - 32);
    if (v6)
    {
      *(void *)(i - 24) = v6;
      operator delete(v6);
    }
    uint64_t v7 = *(void **)(i - 56);
    if (v7)
    {
      *(void *)(i - 48) = v7;
      operator delete(v7);
    }
    uint64_t v8 = *(void **)(i - 88);
    if (v8)
    {
      *(void *)(i - 80) = v8;
      operator delete(v8);
    }
    *(unsigned char *)(i - 8) = 0;
  }
LABEL_2:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_91A6B0()
{
  unk_25D310F = 16641;
  word_25D30F8 = 65;
  byte_25D3127 = 1;
  byte_25D3111 = 0;
}

uint64_t sub_91A6D8(uint64_t a1, void *a2)
{
  *(void *)std::string __p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_20B9960;
  strcpy(*(char **)__p, "confine_link_stops_to_available_regions");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(unsigned char *)a1 = v4;
  __p[23] = 11;
  strcpy(__p, "ttl_seconds");
  *(_DWORD *)(a1 + 4) = 10 * sub_319F48(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  return a1;
}

void sub_91A7D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_91A7F0(uint64_t a1, void *a2)
{
  uint64_t v11 = 0;
  uint64_t v12 = operator new(0x20uLL);
  long long v13 = xmmword_20B8E90;
  strcpy((char *)v12, "TransitTripLinkComponentBuilder");
  std::string __p = 0;
  int v10 = 0;
  BOOL v4 = sub_374CDC((uint64_t)a2, (uint64_t)&v12, (uint64_t *)&__p);
  sub_91A6D8(a1, v4);
  uint64_t v5 = (void **)__p;
  if (__p)
  {
    uint64_t v6 = v10;
    uint64_t v7 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      uint64_t v7 = __p;
    }
    int v10 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12);
  }
  *(void *)(a1 + 8) = sub_375B24(a2);
  *(void *)(a1 + 16) = sub_3755E4(a2);
  return a1;
}

void sub_91A8EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_91A914(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = (void *)a3;
  *(void *)a3 = &off_243B010;
  *(void *)(a3 + 16) = 0;
  uint64_t v61 = (void **)(a3 + 16);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(a3 + 12) = 2;
  if (sub_90D980(a2))
  {
    sub_90CCE4(a2, (uint64_t)&__p);
    if (v67 == __p) {
      sub_66748();
    }
    unsigned int v64 = *((_DWORD *)__p + 3);
    uint64_t v6 = *(void *)((char *)__p + 4);
    unint64_t v7 = __ROR8__(v6, 32);
    uint64_t v8 = (int *)sub_369F8C(*(void *)(a1 + 16), v7, 0, "trip");
    uint64_t v9 = (unsigned __int16 *)((char *)v8 - *v8);
    if (*v9 >= 0x21u)
    {
      uint64_t v10 = v9[16];
      if (v10)
      {
        uint64_t v63 = *(unsigned int *)((char *)v8 + v10);
        if (v63)
        {
          uint64_t v11 = 0;
          uint64_t v62 = 4 * v6;
          while (1)
          {
            long long v13 = sub_369B60(*(void *)(a1 + 16), v7, 0);
            uint64_t v14 = &v13[-*(int *)v13];
            if (*(unsigned __int16 *)v14 < 5u)
            {
              uint64_t v15 = 0;
            }
            else
            {
              uint64_t v15 = *((unsigned __int16 *)v14 + 2);
              if (*((_WORD *)v14 + 2)) {
                v15 += (uint64_t)&v13[*(unsigned int *)&v13[v15]];
              }
            }
            uint64_t v16 = (int *)(v15 + v62 + 4 + *(unsigned int *)(v15 + v62 + 4));
            uint64_t v17 = (unsigned __int16 *)((char *)v16 - *v16);
            if (*v17 >= 0x1Fu && (uint64_t v18 = v17[15]) != 0) {
              int v19 = *(int *)((char *)v16 + v18);
            }
            else {
              int v19 = -1;
            }
            unint64_t v20 = *(void *)&v13[8 * (v19 + v11)
                                + 4
                                + *((unsigned __int16 *)v14 + 8)
                                + *(unsigned int *)&v13[*((unsigned __int16 *)v14 + 8)]];
            if (sub_91AEE0(*(void *)(a1 + 16), v20))
            {
              if (*(unsigned char *)a1) {
                char v21 = sub_91AFDC(*(void *)(a1 + 16), v20) ^ 1;
              }
              else {
                char v21 = 0;
              }
            }
            else
            {
              char v21 = 1;
            }
            unint64_t v22 = v7;
            BOOL v23 = !sub_90D9E8(v7, v64, v11, *(void *)(a1 + 8), *(void *)(a1 + 16));
            uint64_t v5 = (void *)a3;
            int v25 = *(char **)(a3 + 24);
            unint64_t v24 = *(void *)(a3 + 32);
            if ((unint64_t)v25 < v24)
            {
              *(void *)int v25 = v20;
              v25[8] = v23;
              uint64_t v12 = v25 + 12;
              v25[9] = v21;
            }
            else
            {
              unint64_t v26 = (char *)*v61;
              unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((v25 - (unsigned char *)*v61) >> 2);
              unint64_t v28 = v27 + 1;
              if (v27 + 1 > 0x1555555555555555) {
                sub_2E00();
              }
              unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (void)v26) >> 2);
              if (2 * v29 > v28) {
                unint64_t v28 = 2 * v29;
              }
              if (v29 >= 0xAAAAAAAAAAAAAAALL) {
                unint64_t v30 = 0x1555555555555555;
              }
              else {
                unint64_t v30 = v28;
              }
              if (v30 > 0x1555555555555555) {
                sub_188D718();
              }
              uint64_t v31 = (char *)operator new(12 * v30);
              uint64_t v32 = &v31[12 * v27];
              *(void *)uint64_t v32 = v20;
              v32[8] = v23;
              v32[9] = v21;
              uint64_t v33 = v32;
              if (v25 != v26)
              {
                uint64_t v5 = (void *)a3;
                do
                {
                  uint64_t v34 = *(void *)(v25 - 12);
                  v25 -= 12;
                  __int16 v35 = *((_WORD *)v25 + 4);
                  *(void *)(v33 - 12) = v34;
                  v33 -= 12;
                  *((_WORD *)v33 + 4) = v35;
                }
                while (v25 != v26);
                uint64_t v12 = v32 + 12;
                *(void *)(a3 + 16) = v33;
                *(void *)(a3 + 24) = v32 + 12;
                *(void *)(a3 + 32) = &v31[12 * v30];
                if (!v26) {
                  goto LABEL_8;
                }
LABEL_36:
                operator delete(v26);
                goto LABEL_8;
              }
              uint64_t v5 = (void *)a3;
              uint64_t v12 = v32 + 12;
              *(void *)(a3 + 16) = v32;
              *(void *)(a3 + 24) = v32 + 12;
              *(void *)(a3 + 32) = &v31[12 * v30];
              if (v26) {
                goto LABEL_36;
              }
            }
LABEL_8:
            unint64_t v7 = v22;
            v5[3] = v12;
            if (++v11 == v63) {
              goto LABEL_38;
            }
          }
        }
      }
    }
    uint64_t v12 = (char *)v5[3];
LABEL_38:
    unint64_t v36 = v5[4];
    if ((unint64_t)v12 >= v36)
    {
      int v38 = (char *)*v61;
      unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (unsigned char *)*v61) >> 2);
      unint64_t v40 = v39 + 1;
      if (v39 + 1 > 0x1555555555555555) {
        sub_2E00();
      }
      unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - (void)v38) >> 2);
      if (2 * v41 > v40) {
        unint64_t v40 = 2 * v41;
      }
      if (v41 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v42 = 0x1555555555555555;
      }
      else {
        unint64_t v42 = v40;
      }
      if (v42)
      {
        if (v42 > 0x1555555555555555) {
          sub_188D718();
        }
        uint64_t v43 = (char *)operator new(12 * v42);
      }
      else
      {
        uint64_t v43 = 0;
      }
      int v44 = &v43[12 * v39];
      *(void *)int v44 = 0xFFFFFFFF00000000;
      *((_DWORD *)v44 + 2) = 0;
      uint64_t v37 = v44 + 12;
      if (v12 != v38)
      {
        do
        {
          uint64_t v45 = *(void *)(v12 - 12);
          v12 -= 12;
          __int16 v46 = *((_WORD *)v12 + 4);
          *(void *)(v44 - 12) = v45;
          v44 -= 12;
          *((_WORD *)v44 + 4) = v46;
        }
        while (v12 != v38);
        uint64_t v12 = (char *)*v61;
      }
      v5[2] = v44;
      v5[3] = v37;
      v5[4] = &v43[12 * v42];
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      *(void *)uint64_t v12 = 0xFFFFFFFF00000000;
      *((_DWORD *)v12 + 2) = 0;
      uint64_t v37 = v12 + 12;
    }
    v5[3] = v37;
    uint64_t v47 = v5[2];
    if ((_WORD *)v47 != v37)
    {
      uint64_t v48 = 0;
      uint64_t v49 = v47 - 12;
      uint64_t v50 = v47 - 12;
      uint64_t v51 = v5[2];
      do
      {
        if (*(unsigned char *)(v51 + 8)) {
          BOOL v52 = 1;
        }
        else {
          BOOL v52 = v47 == v51;
        }
        if (!v52)
        {
          uint64_t v53 = v47;
          while (!*(unsigned char *)(v53 + 9))
          {
            v53 += 12;
            if (v53 == v51) {
              goto LABEL_57;
            }
          }
          unint64_t v54 = v49 + 12 * v48 - v47;
          if (v54 < 0xC)
          {
            uint64_t v55 = v47;
            do
            {
LABEL_72:
              *(unsigned char *)(v55 + 9) = 1;
              v55 += 12;
            }
            while (v55 != v51);
LABEL_57:
            uint64_t v47 = v51;
            goto LABEL_58;
          }
          unint64_t v56 = v54 / 0xC + 1;
          uint64_t v55 = v47 + 12 * (v56 & 0x3FFFFFFFFFFFFFFELL);
          long long v57 = (unsigned char *)(v47 + 21);
          unint64_t v58 = ((v50 - v47) / 0xCuLL + 1) & 0x3FFFFFFFFFFFFFFELL;
          do
          {
            *(v57 - 12) = 1;
            *long long v57 = 1;
            v57 += 24;
            v58 -= 2;
          }
          while (v58);
          uint64_t v47 = v51;
          if (v56 != (v56 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_72;
          }
        }
LABEL_58:
        v51 += 12;
        ++v48;
        v50 += 12;
      }
      while ((_WORD *)v51 != v37);
    }
    v5[3] = v37 - 6;
    uint64_t v59 = (char *)__p;
    if (__p)
    {
      uint64_t v60 = v67;
      if (v67 != __p)
      {
        do
        {
          if (*(v60 - 4)) {
            *(v60 - 4) = 0;
          }
          v60 -= 64;
        }
        while (v60 != v59);
      }
      uint64_t v67 = v59;
      operator delete(v59);
    }
  }
}

void sub_91AE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, ...)
{
  va_start(va, a7);
  sub_91B170((char **)va);
  *a7 = a2;
  uint64_t v8 = (void *)a7[2];
  if (v8)
  {
    a7[3] = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_91AEE0(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (int *)sub_49BF34(a1, a2, 1, "link");
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(unsigned __int16 *)((char *)v3 - *v3 + 8);
  uint64_t v5 = *(unsigned int *)((char *)v3 + v4);
  uint64_t v6 = *(unsigned int *)((char *)v3 + v4 + v5);
  if (v6)
  {
    uint64_t v7 = 12 * v6;
    uint64_t v8 = v4 + v5 + 4;
    while (sub_2AB7E4(*(void *)(a1 + 3872)))
    {
      v8 += 12;
      v7 -= 12;
      if (!v7) {
        goto LABEL_6;
      }
    }
    return 0;
  }
LABEL_6:
  if (!sub_2AB7E4(*(void *)(a1 + 3872))) {
    return 0;
  }
  uint64_t v9 = *(void *)(a1 + 3872);

  return sub_2AB7E4(v9);
}

uint64_t sub_91AFDC(uint64_t a1, unint64_t a2)
{
  if (!*(unsigned char *)(a1 + 3888)) {
    return 1;
  }
  uint64_t v3 = (int *)sub_49BF34(a1, a2, 0, "link");
  uint64_t v4 = (unsigned __int16 *)((char *)v3 - *v3);
  unsigned int v5 = *v4;
  if (v5 < 5)
  {
    unint64_t v7 = 0;
    unint64_t v6 = 0xFFFFFFFFLL;
    goto LABEL_8;
  }
  if (!v4[2])
  {
    unint64_t v6 = 0xFFFFFFFFLL;
    unint64_t v7 = 0;
    if (v5 >= 7) {
      goto LABEL_19;
    }
LABEL_8:
    unint64_t v9 = 0xFFFFFFFFLL;
    goto LABEL_9;
  }
  unint64_t v6 = *(unsigned int *)((char *)v3 + v4[2] + 4) | ((unint64_t)*(unsigned int *)((char *)v3 + v4[2]) << 32);
  unint64_t v7 = HIDWORD(v6);
  if (v5 < 7) {
    goto LABEL_8;
  }
LABEL_19:
  unsigned __int16 v17 = v4[3];
  if (!v17) {
    goto LABEL_8;
  }
  unint64_t v9 = *(unsigned int *)((char *)v3 + v17 + 4) | ((unint64_t)*(unsigned int *)((char *)v3 + v17) << 32);
LABEL_9:
  uint64_t v10 = (int *)sub_498D5C(a1, v7 | (v6 << 32), 0, "stop");
  uint64_t v11 = (uint64_t)v10 + *(unsigned __int16 *)((char *)v10 - *v10 + 6);
  uint64_t v12 = *(unsigned int *)v11;
  LODWORD(v11) = *(_DWORD *)(v11 + 4);
  if (v11 >= 0xFFFFFFFE) {
    uint64_t v11 = 4294967294;
  }
  else {
    uint64_t v11 = v11;
  }
  uint64_t v20 = v12 | (v11 << 32);
  int v21 = 0x7FFFFFFF;
  int v13 = sub_73930((void ***)(a1 + 3872), &v20);
  uint64_t result = 0;
  if (v13)
  {
    uint64_t v14 = (int *)sub_498D5C(a1, __ROR8__(v9, 32), 0, "stop");
    uint64_t v15 = (uint64_t)v14 + *(unsigned __int16 *)((char *)v14 - *v14 + 6);
    uint64_t v16 = *(unsigned int *)v15;
    LODWORD(v15) = *(_DWORD *)(v15 + 4);
    if (v15 >= 0xFFFFFFFE) {
      uint64_t v15 = 4294967294;
    }
    else {
      uint64_t v15 = v15;
    }
    uint64_t v18 = v16 | (v15 << 32);
    int v19 = 0x7FFFFFFF;
    return sub_73930((void ***)(a1 + 3872), &v18);
  }
  return result;
}

char **sub_91B170(char **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    for (uint64_t i = a1[1]; i != v2; i -= 64)
    {
      if (*(i - 4)) {
        *(i - 4) = 0;
      }
    }
    a1[1] = v2;
    operator delete(v2);
  }
  return a1;
}

double sub_91B1C8()
{
  byte_25D313F = 1;
  word_25D3128 = 65;
  byte_25D3157 = 1;
  word_25D3140 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25D31E8 = 0u;
  *(_OWORD *)&qword_25D31F8 = 0u;
  dword_25D3208 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25D31E8, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25D31E8, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25D31E8, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25D31E8, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25D316F = 8;
  strcpy((char *)&qword_25D3158, "any_mode");
  byte_25D3187 = 7;
  strcpy((char *)&dword_25D3170, "cycling");
  byte_25D319F = 7;
  strcpy((char *)&dword_25D3188, "driving");
  byte_25D31B7 = 7;
  strcpy((char *)&dword_25D31A0, "walking");
  qword_25D31C0 = 0;
  qword_25D31C8 = 0;
  qword_25D31B8 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25D31B8 = (uint64_t)v0;
  qword_25D31C0 = (uint64_t)(v0 + 9);
  qword_25D31C8 = (uint64_t)(v0 + 9);
  qword_25D31D0 = 0;
  qword_25D31D8 = 0;
  unk_25D31E0 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25D31D8 = (uint64_t)(v1 + 9);
  unk_25D31E0 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25D31D0 = (uint64_t)v1;
  return result;
}

void sub_91B490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25D31F8) {
    sub_20AC384((void **)qword_25D31F8);
  }
  uint64_t v37 = (void *)xmmword_25D31E8;
  *(void *)&xmmword_25D31E8 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_91B530(uint64_t a1, void *a2)
{
  *(void *)std::string __p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_20B9390;
  strcpy(*(char **)__p, "override_node_type_hall_with_hub");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(unsigned char *)a1 = v4;
  *(void *)std::string __p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_20B8E90;
  strcpy(*(char **)__p, "add_connection_labels_for_stops");
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(unsigned char *)(a1 + 1) = v5;
  *(void *)std::string __p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_20B9280;
  strcpy(*(char **)__p, "add_connection_labels_for_stations");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(unsigned char *)(a1 + 2) = v6;
  *(void *)std::string __p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_20B5EB0;
  strcpy(*(char **)__p, "add_line_connection_labels");
  BOOL v7 = sub_29D62C(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(unsigned char *)(a1 + 3) = v7;
  *(void *)std::string __p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_20B91B0;
  strcpy(*(char **)__p, "add_system_connection_labels");
  BOOL v8 = sub_29D62C(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(unsigned char *)(a1 + 4) = v8;
  *(void *)std::string __p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_20B8870;
  strcpy(*(char **)__p, "max_num_connection_labels");
  unint64_t v9 = sub_5C9BC(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(void *)(a1 + 8) = v9;
  *(void *)std::string __p = operator new(0x30uLL);
  *(_OWORD *)&__p[8] = xmmword_20B93E0;
  strcpy(*(char **)__p, "substitute_excessive_line_connection_labels");
  BOOL v10 = sub_29D62C(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 16) = v10;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)std::string __p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_20B9280;
  strcpy(*(char **)__p, "confine_stops_to_available_regions");
  BOOL v11 = sub_29D62C(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(unsigned char *)(a1 + 48) = v11;
  __p[23] = 11;
  strcpy(__p, "ttl_seconds");
  *(_DWORD *)(a1 + 52) = 10 * sub_319F48(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(void *)std::string __p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_20B9280;
  strcpy(*(char **)__p, "line_connection_label_shield_types");
  uint64_t v12 = (uint64_t *)sub_5C4AC(a2, (uint64_t)__p);
  char v13 = v12;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    if (*v13 == v15) {
      return a1;
    }
  }
  else
  {
    uint64_t v14 = *v12;
    uint64_t v15 = v12[1];
    if (*v12 == v15) {
      return a1;
    }
  }
  uint64_t v16 = *(char **)(a1 + 32);
  do
  {
    if (*(_DWORD *)(v14 + 8))
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_23FDF58;
    }
    *(_DWORD *)std::string __p = sub_4A0C0C(*(void *)v14);
    uint64_t v16 = sub_91CCBC((void **)(a1 + 24), v16, __p) + 4;
    v14 += 16;
  }
  while (v14 != v15);
  return a1;
}

void sub_91B96C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  uint64_t v20 = *v18;
  if (*v18)
  {
    *(void *)(v17 + 32) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

void *sub_91B9E0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v13 = 0;
  uint64_t v14 = operator new(0x20uLL);
  long long v15 = xmmword_20B8E90;
  strcpy((char *)v14, "TransitTripStopComponentBuilder");
  std::string __p = 0;
  uint64_t v12 = 0;
  BOOL v6 = sub_374CDC((uint64_t)a2, (uint64_t)&v14, (uint64_t *)&__p);
  sub_91B530((uint64_t)a1, v6);
  BOOL v7 = (void **)__p;
  if (__p)
  {
    BOOL v8 = v12;
    unint64_t v9 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      unint64_t v9 = __p;
    }
    uint64_t v12 = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(v14);
  }
  a1[7] = a3;
  a1[8] = sub_3757C8(a2);
  a1[9] = sub_375500(a2);
  a1[10] = sub_375B24(a2);
  a1[11] = sub_3755E4(a2);
  return a1;
}

void sub_91BB04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_91BB40(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  a3[1] = 0x27FFFFFFFLL;
  *a3 = &off_243B130;
  a3[2] = 0;
  BOOL v6 = (void **)(a3 + 2);
  a3[3] = 0;
  a3[4] = 0;
  if (sub_90D980(a2))
  {
    sub_90CCE4(a2, (uint64_t)&v15);
    sub_91BCBC(a1, (uint64_t *)&v15, a2, v12);
    a3[1] = v12[1];
    uint64_t v7 = a3[2];
    if (v7)
    {
      uint64_t v8 = a3[3];
      unint64_t v9 = (void *)a3[2];
      if (v8 != v7)
      {
        do
        {
          v8 -= 152;
          sub_8E4758((uint64_t)(a3 + 4), v8);
        }
        while (v8 != v7);
        unint64_t v9 = *v6;
      }
      a3[3] = v7;
      operator delete(v9);
      *BOOL v6 = 0;
      a3[3] = 0;
      a3[4] = 0;
    }
    *((_OWORD *)a3 + 1) = v13;
    BOOL v10 = v15;
    a3[4] = v14;
    if (v10)
    {
      for (uint64_t i = v16; i != v10; i -= 64)
      {
        if (*(i - 4)) {
          *(i - 4) = 0;
        }
      }
      uint64_t v16 = v10;
      operator delete(v10);
    }
  }
  *((_DWORD *)a3 + 2) = *(_DWORD *)(a1 + 52);
}

void sub_91BC78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_91B170((char **)va);
  sub_8E3548(v7);
  _Unwind_Resume(a1);
}

void sub_91BC94(_Unwind_Exception *a1)
{
  sub_8E3548(v1);
  _Unwind_Resume(a1);
}

void sub_91BCA8(_Unwind_Exception *a1)
{
  sub_8E3548(v1);
  _Unwind_Resume(a1);
}

void sub_91BCBC(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  a4[1] = 0x27FFFFFFFLL;
  a4[2] = 0;
  BOOL v5 = (void **)(a4 + 2);
  *a4 = &off_243B130;
  a4[3] = 0;
  a4[4] = 0;
  uint64_t v6 = *a2;
  if (a2[1] == *a2) {
    sub_66748();
  }
  uint64_t v9 = *(unsigned int *)(v6 + 12);
  unint64_t v10 = __ROR8__(*(void *)(v6 + 4), 32);
  BOOL v11 = (int *)sub_369F8C(*(void *)(a1 + 88), v10, 0, "trip");
  uint64_t v12 = (unsigned __int16 *)((char *)v11 - *v11);
  if (*v12 < 9u) {
    return;
  }
  uint64_t v13 = v12[4];
  if (!v13) {
    return;
  }
  uint64_t v14 = *(unsigned int *)((char *)v11 + v13);
  if (!v14) {
    return;
  }
  uint64_t v15 = 0;
  uint64_t v16 = (v10 >> 30) & 0x3FFFFFFFCLL;
  while (2)
  {
    if (!sub_90D9E8(v10, v9, v15, *(void *)(a1 + 80), *(void *)(a1 + 88))) {
      goto LABEL_7;
    }
    uint64_t v17 = sub_369B60(*(void *)(a1 + 88), v10, 0);
    uint64_t v18 = &v17[-*(int *)v17];
    if (*(unsigned __int16 *)v18 < 5u)
    {
      uint64_t v19 = 0;
    }
    else
    {
      uint64_t v19 = *((unsigned __int16 *)v18 + 2);
      if (*((_WORD *)v18 + 2)) {
        v19 += (uint64_t)&v17[*(unsigned int *)&v17[v19]];
      }
    }
    uint64_t v20 = (int *)(v19 + v16 + 4 + *(unsigned int *)(v19 + v16 + 4));
    int v21 = (unsigned __int16 *)((char *)v20 - *v20);
    if (*v21 >= 0xDu && (uint64_t v22 = v21[6]) != 0) {
      int v23 = *(int *)((char *)v20 + v22);
    }
    else {
      int v23 = -1;
    }
    sub_91C154((unsigned __int8 *)a1, v10, *(void *)&v17[24 * (v23 + v15)+ 4+ *((unsigned __int16 *)v18 + 3)+ *(unsigned int *)&v17[*((unsigned __int16 *)v18 + 3)]], a3, &v41);
    unint64_t v24 = a4[3];
    if (v24 >= a4[4])
    {
      unint64_t v30 = sub_8F66AC(v5, (uint64_t)&v41);
      int v31 = SHIBYTE(v53);
      a4[3] = v30;
      if (v31 < 0)
      {
        operator delete((void *)v52);
        unint64_t v29 = (char *)v50[0];
        if (!v50[0]) {
          goto LABEL_40;
        }
      }
      else
      {
        unint64_t v29 = (char *)v50[0];
        if (!v50[0]) {
          goto LABEL_40;
        }
      }
    }
    else
    {
      *(void *)unint64_t v24 = v41;
      long long v25 = v42;
      *(void *)(v24 + 24) = v43;
      *(_OWORD *)(v24 + 8) = v25;
      uint64_t v43 = 0;
      long long v42 = 0uLL;
      uint64_t v26 = v45;
      *(_OWORD *)(v24 + 32) = __p;
      *(void *)(v24 + 48) = v26;
      uint64_t v45 = 0;
      long long __p = 0uLL;
      uint64_t v27 = v46;
      *(_DWORD *)(v24 + 64) = v47;
      *(void *)(v24 + 56) = v27;
      *(void *)(v24 + 72) = 0;
      *(void *)(v24 + 80) = 0;
      *(void *)(v24 + 88) = 0;
      *(void *)(v24 + 96) = 0;
      *(_OWORD *)(v24 + 72) = *(_OWORD *)v48;
      *(void *)(v24 + 88) = v49;
      v48[0] = 0;
      v48[1] = 0;
      uint64_t v49 = 0;
      *(void *)(v24 + 104) = 0;
      *(void *)(v24 + 112) = 0;
      *(_OWORD *)(v24 + 96) = *(_OWORD *)v50;
      *(void *)(v24 + 112) = v51;
      v50[0] = 0;
      v50[1] = 0;
      uint64_t v51 = 0;
      long long v28 = v52;
      *(void *)(v24 + 136) = v53;
      *(_OWORD *)(v24 + 120) = v28;
      uint64_t v53 = 0;
      long long v52 = 0uLL;
      LODWORD(v27) = v54;
      *(unsigned char *)(v24 + 148) = v55;
      *(_DWORD *)(v24 + 144) = v27;
      a4[3] = v24 + 152;
      unint64_t v29 = (char *)v50[0];
      if (!v50[0]) {
        goto LABEL_40;
      }
    }
    uint64_t v32 = v29;
    if (v50[1] == v29) {
      goto LABEL_39;
    }
    uint64_t v33 = v14;
    uint64_t v34 = v9;
    __int16 v35 = v5;
    uint64_t v36 = a3;
    uint64_t v37 = (void **)((char *)v50[1] - 56);
    do
    {
      if (*((char *)v37 + 55) < 0)
      {
        operator delete(v37[4]);
        if ((*((char *)v37 + 23) & 0x80000000) == 0)
        {
LABEL_28:
          if ((*((char *)v37 - 9) & 0x80000000) == 0) {
            goto LABEL_29;
          }
          goto LABEL_35;
        }
      }
      else if ((*((char *)v37 + 23) & 0x80000000) == 0)
      {
        goto LABEL_28;
      }
      operator delete(*v37);
      if ((*((char *)v37 - 9) & 0x80000000) == 0)
      {
LABEL_29:
        int v39 = *((_DWORD *)v37 - 12);
        if (v39 != 1) {
          goto LABEL_30;
        }
        goto LABEL_36;
      }
LABEL_35:
      operator delete(*(v37 - 4));
      int v39 = *((_DWORD *)v37 - 12);
      if (v39 != 1)
      {
LABEL_30:
        if (!v39 && *((char *)v37 - 49) < 0)
        {
          unint64_t v40 = *(v37 - 9);
LABEL_24:
          operator delete(v40);
          goto LABEL_25;
        }
        goto LABEL_25;
      }
LABEL_36:
      unint64_t v40 = *(v37 - 9);
      if (v40)
      {
        *(v37 - 8) = v40;
        goto LABEL_24;
      }
LABEL_25:
      int v38 = (char *)(v37 - 11);
      v37 -= 18;
    }
    while (v38 != v29);
    uint64_t v32 = (char *)v50[0];
    a3 = v36;
    BOOL v5 = v35;
    uint64_t v9 = v34;
    uint64_t v14 = v33;
    uint64_t v16 = (v10 >> 30) & 0x3FFFFFFFCLL;
LABEL_39:
    v50[1] = v29;
    operator delete(v32);
LABEL_40:
    if (v48[0])
    {
      v48[1] = v48[0];
      operator delete(v48[0]);
    }
    if (SHIBYTE(v45) < 0)
    {
      operator delete((void *)__p);
      if (SHIBYTE(v43) < 0) {
        goto LABEL_44;
      }
    }
    else if (SHIBYTE(v43) < 0)
    {
LABEL_44:
      operator delete((void *)v42);
    }
LABEL_7:
    if (++v15 != v14) {
      continue;
    }
    break;
  }
}

void sub_91C0D4(_Unwind_Exception *a1)
{
  sub_8E3548(v1);
  _Unwind_Resume(a1);
}

void sub_91C0E8(_Unwind_Exception *a1)
{
  sub_8E3548(v1);
  _Unwind_Resume(a1);
}

void sub_91C0FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_8F2F94((uint64_t)va);
  sub_8E3548(v9);
  _Unwind_Resume(a1);
}

void sub_91C118(_Unwind_Exception *a1)
{
  sub_8E3548(v1);
  _Unwind_Resume(a1);
}

void sub_91C12C(_Unwind_Exception *a1)
{
  sub_8E3548(v1);
  _Unwind_Resume(a1);
}

void sub_91C140(_Unwind_Exception *a1)
{
  sub_8E3548(v1);
  _Unwind_Resume(a1);
}

double sub_91C154@<D0>(unsigned __int8 *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  if (!sub_498D5C(*((void *)a1 + 9), a3, 1, "stop")) {
    return sub_90AADC((uint64_t)a5);
  }
  if (!a1[48]) {
    goto LABEL_7;
  }
  uint64_t v10 = *((void *)a1 + 9);
  BOOL v11 = (int *)sub_498D5C(v10, a3, 0, "stop");
  uint64_t v12 = (uint64_t)v11 + *(unsigned __int16 *)((char *)v11 - *v11 + 6);
  uint64_t v13 = *(unsigned int *)v12;
  LODWORD(v12) = *(_DWORD *)(v12 + 4);
  uint64_t v12 = v12 >= 0xFFFFFFFE ? 4294967294 : v12;
  *(void *)&long long v23 = v13 | (v12 << 32);
  DWORD2(v23) = 0x7FFFFFFF;
  if ((sub_73930((void ***)(v10 + 3872), &v23) & 1) == 0) {
    return sub_90AADC((uint64_t)a5);
  }
LABEL_7:
  sub_90AB28(a3, a4, *((void *)a1 + 9), *((void *)a1 + 7), 1, *a1, (uint64_t)a5);
  uint64_t v14 = (int *)sub_498D5C(*((void *)a1 + 9), a3, 0, "stop");
  unint64_t v16 = *(void *)((char *)v14 + *(unsigned __int16 *)((char *)v14 - *v14 + 12));
  BOOL v17 = v16 > 0xFFFFFFFEFFFFFFFFLL
     || *(void *)((char *)v14 + *(unsigned __int16 *)((char *)v14 - *v14 + 12)) == 0;
  if (!v17 && a1[2])
  {
    sub_91C3A4((uint64_t)a1, a2, v16, (void **)&v23);
    uint64_t v18 = (void **)(a5 + 12);
    uint64_t v19 = a5[12];
    if (v19)
    {
      uint64_t v20 = a5[13];
      int v21 = (void *)a5[12];
      if (v20 != v19)
      {
        do
        {
          v20 -= 144;
          sub_8E48A4((uint64_t)(a5 + 14), v20);
        }
        while (v20 != v19);
LABEL_22:
        int v21 = *v18;
        goto LABEL_23;
      }
      goto LABEL_23;
    }
    goto LABEL_24;
  }
  if (a1[1])
  {
    sub_91C830((uint64_t)a1, a2, a3, (void **)&v23);
    uint64_t v18 = (void **)(a5 + 12);
    uint64_t v19 = a5[12];
    if (v19)
    {
      uint64_t v22 = a5[13];
      int v21 = (void *)a5[12];
      if (v22 != v19)
      {
        do
        {
          v22 -= 144;
          sub_8E48A4((uint64_t)(a5 + 14), v22);
        }
        while (v22 != v19);
        goto LABEL_22;
      }
LABEL_23:
      a5[13] = v19;
      operator delete(v21);
      *uint64_t v18 = 0;
      v18[1] = 0;
      v18[2] = 0;
    }
LABEL_24:
    double result = *(double *)&v23;
    *((_OWORD *)a5 + 6) = v23;
    a5[14] = v24;
  }
  return result;
}

void sub_91C368(_Unwind_Exception *a1)
{
  sub_8F2F94(v1);
  _Unwind_Resume(a1);
}

void sub_91C37C(_Unwind_Exception *a1)
{
  sub_8F2F94(v1);
  _Unwind_Resume(a1);
}

void sub_91C390(_Unwind_Exception *a1)
{
  sub_8F2F94(v1);
  _Unwind_Resume(a1);
}

void sub_91C3A4(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void **a4@<X8>)
{
  unint64_t v40 = 0;
  uint64_t v41 = 0;
  long long v42 = 0;
  uint64_t v37 = 0;
  int v38 = 0;
  uint64_t v39 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  if (*(unsigned char *)(a1 + 3))
  {
    sub_91D02C(a1, a2, a3, (unint64_t **)&__p);
    sub_91D1DC((char **)&v40, (v44 - (unsigned char *)__p) >> 3);
    sub_91D72C((unint64_t *)__p, (unint64_t *)v44, (uint64_t *)&v40, v41, a1);
    if (__p)
    {
      int v44 = (char *)__p;
      operator delete(__p);
    }
  }
  if (*(unsigned char *)(a1 + 4))
  {
    sub_91D3A0(a1, a2, a3, &__p);
    unint64_t v9 = (unint64_t)__p;
    uint64_t v8 = (unint64_t *)v44;
    uint64_t v10 = (unint64_t *)v45;
    sub_91D1DC((char **)&v37, ((unsigned char *)v45 - v44) >> 3);
    sub_91E3E8(v8, v10, (uint64_t *)&v37, v38, a1);
    uint64_t v11 = HIDWORD(v9);
  }
  else
  {
    LODWORD(v9) = 0;
    uint64_t v8 = 0;
    uint64_t v11 = 0xFFFFFFFFLL;
  }
  uint64_t v13 = v40;
  uint64_t v12 = v41;
  uint64_t v14 = v37;
  uint64_t v15 = v38;
  unint64_t v16 = 0x8E38E38E38E38E39 * ((v38 - (unsigned char *)v37) >> 4);
  unint64_t v17 = *(void *)(a1 + 8);
  if (v16 - 0x71C71C71C71C71C7 * ((v41 - (unsigned char *)v40) >> 4) <= v17)
  {
    int v21 = *a4;
    if (*a4)
    {
      uint64_t v22 = (uint64_t)a4[1];
      long long v23 = *a4;
      if ((void *)v22 != v21)
      {
        do
        {
          v22 -= 144;
          sub_8E48A4((uint64_t)(a4 + 2), v22);
        }
        while ((void *)v22 != v21);
        long long v23 = *a4;
      }
      a4[1] = v21;
      operator delete(v23);
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      uint64_t v13 = v40;
      uint64_t v12 = v41;
      uint64_t v14 = v37;
      uint64_t v15 = v38;
      unint64_t v16 = 0x8E38E38E38E38E39 * ((v38 - (unsigned char *)v37) >> 4);
    }
    *a4 = v13;
    a4[1] = v12;
    a4[2] = v42;
    uint64_t v41 = 0;
    long long v42 = 0;
    unint64_t v40 = 0;
    goto LABEL_42;
  }
  if (v17 <= v16 || *(unsigned char *)(a1 + 16) == 0 || v9 == 0 || v11 == -1)
  {
    if (v17 <= v16)
    {
      sub_91E87C(a4, (uint64_t)v37, (uint64_t)v37 + 144 * v17, *(void *)(a1 + 8));
      goto LABEL_43;
    }
    sub_91E87C(a4, (uint64_t)v40, (uint64_t)v40 + 144 * (v17 - v16), v17 - v16);
    goto LABEL_41;
  }
  sub_8FAC38(v9 | (unint64_t)(v11 << 32), *(void *)(a1 + 64), *(void *)(a1 + 56), (uint64_t)&__p);
  sub_91E53C(a4, (uint64_t)&__p, (uint64_t)&v55, 1uLL);
  if (v54 < 0)
  {
    operator delete(v53);
    if ((v52 & 0x80000000) == 0)
    {
LABEL_29:
      if ((v50 & 0x80000000) == 0) {
        goto LABEL_30;
      }
      goto LABEL_37;
    }
  }
  else if ((v52 & 0x80000000) == 0)
  {
    goto LABEL_29;
  }
  operator delete(v51);
  if ((v50 & 0x80000000) == 0)
  {
LABEL_30:
    int v24 = v48;
    if (v48 != 1) {
      goto LABEL_31;
    }
    goto LABEL_38;
  }
LABEL_37:
  operator delete(v49);
  int v24 = v48;
  if (v48 != 1)
  {
LABEL_31:
    if (v24 || (v47 & 0x80000000) == 0) {
      goto LABEL_41;
    }
    long long v25 = v45;
    goto LABEL_40;
  }
LABEL_38:
  long long v25 = v45;
  if (v45)
  {
    uint64_t v46 = v45;
LABEL_40:
    operator delete(v25);
  }
LABEL_41:
  uint64_t v12 = (char *)a4[1];
  uint64_t v14 = v37;
  uint64_t v15 = v38;
  unint64_t v16 = 0x8E38E38E38E38E39 * ((v38 - (unsigned char *)v37) >> 4);
LABEL_42:
  sub_8FD660((uint64_t *)a4, v12, (uint64_t)v14, (uint64_t)v15, v16);
LABEL_43:
  uint64_t v26 = sub_91EBBC((int *)*a4, (int *)a4[1]);
  uint64_t v27 = (uint64_t)a4[1];
  if ((int *)v27 != v26)
  {
    sub_8FD2A8((uint64_t)&__p, v27, (uint64_t)a4[1], (uint64_t)v26);
    unint64_t v29 = v28;
    uint64_t v30 = (uint64_t)a4[1];
    if ((void *)v30 != v28)
    {
      do
      {
        v30 -= 144;
        sub_8E48A4((uint64_t)(a4 + 2), v30);
      }
      while ((void *)v30 != v29);
    }
    a4[1] = v29;
  }
  if (v8) {
    operator delete(v8);
  }
  int v31 = (char *)v37;
  if (v37)
  {
    uint64_t v32 = v38;
    uint64_t v33 = v37;
    if (v38 != v37)
    {
      do
      {
        v32 -= 144;
        sub_8E48A4((uint64_t)&v39, (uint64_t)v32);
      }
      while (v32 != v31);
      uint64_t v33 = v37;
    }
    int v38 = v31;
    operator delete(v33);
  }
  uint64_t v34 = (char *)v40;
  if (v40)
  {
    __int16 v35 = v41;
    uint64_t v36 = v40;
    if (v41 != v40)
    {
      do
      {
        v35 -= 144;
        sub_8E48A4((uint64_t)&v42, (uint64_t)v35);
      }
      while (v35 != v34);
      uint64_t v36 = v40;
    }
    uint64_t v41 = v34;
    operator delete(v36);
  }
}

void sub_91C7B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (v18) {
    operator delete(v18);
  }
  sub_8E4838(v17);
  sub_8E4838(&a10);
  sub_8E4838(&a13);
  _Unwind_Resume(a1);
}

void sub_91C830(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void **a4@<X8>)
{
  unint64_t v40 = 0;
  uint64_t v41 = 0;
  long long v42 = 0;
  uint64_t v37 = 0;
  int v38 = 0;
  uint64_t v39 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  if (*(unsigned char *)(a1 + 3))
  {
    sub_91EE04(a1, a2, a3, (unint64_t **)&__p);
    sub_91D1DC((char **)&v40, (v44 - (unsigned char *)__p) >> 3);
    sub_91F344((unint64_t *)__p, (unint64_t *)v44, (uint64_t *)&v40, v41, a1);
    if (__p)
    {
      int v44 = (char *)__p;
      operator delete(__p);
    }
  }
  if (*(unsigned char *)(a1 + 4))
  {
    sub_91EFB4(a1, a2, a3, &__p);
    unint64_t v9 = (unint64_t)__p;
    uint64_t v8 = (unint64_t *)v44;
    uint64_t v10 = (unint64_t *)v45;
    sub_91D1DC((char **)&v37, ((unsigned char *)v45 - v44) >> 3);
    sub_91F7FC(v8, v10, (uint64_t *)&v37, v38, a1);
    uint64_t v11 = HIDWORD(v9);
  }
  else
  {
    LODWORD(v9) = 0;
    uint64_t v8 = 0;
    uint64_t v11 = 0xFFFFFFFFLL;
  }
  uint64_t v13 = v40;
  uint64_t v12 = v41;
  uint64_t v14 = v37;
  uint64_t v15 = v38;
  unint64_t v16 = 0x8E38E38E38E38E39 * ((v38 - (unsigned char *)v37) >> 4);
  unint64_t v17 = *(void *)(a1 + 8);
  if (v16 - 0x71C71C71C71C71C7 * ((v41 - (unsigned char *)v40) >> 4) <= v17)
  {
    int v21 = *a4;
    if (*a4)
    {
      uint64_t v22 = (uint64_t)a4[1];
      long long v23 = *a4;
      if ((void *)v22 != v21)
      {
        do
        {
          v22 -= 144;
          sub_8E48A4((uint64_t)(a4 + 2), v22);
        }
        while ((void *)v22 != v21);
        long long v23 = *a4;
      }
      a4[1] = v21;
      operator delete(v23);
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      uint64_t v13 = v40;
      uint64_t v12 = v41;
      uint64_t v14 = v37;
      uint64_t v15 = v38;
      unint64_t v16 = 0x8E38E38E38E38E39 * ((v38 - (unsigned char *)v37) >> 4);
    }
    *a4 = v13;
    a4[1] = v12;
    a4[2] = v42;
    uint64_t v41 = 0;
    long long v42 = 0;
    unint64_t v40 = 0;
    goto LABEL_42;
  }
  if (v17 <= v16 || *(unsigned char *)(a1 + 16) == 0 || v9 == 0 || v11 == -1)
  {
    if (v17 <= v16)
    {
      sub_91E87C(a4, (uint64_t)v37, (uint64_t)v37 + 144 * v17, *(void *)(a1 + 8));
      goto LABEL_43;
    }
    sub_91E87C(a4, (uint64_t)v40, (uint64_t)v40 + 144 * (v17 - v16), v17 - v16);
    goto LABEL_41;
  }
  sub_8FAC38(v9 | (unint64_t)(v11 << 32), *(void *)(a1 + 64), *(void *)(a1 + 56), (uint64_t)&__p);
  sub_91E53C(a4, (uint64_t)&__p, (uint64_t)&v55, 1uLL);
  if (v54 < 0)
  {
    operator delete(v53);
    if ((v52 & 0x80000000) == 0)
    {
LABEL_29:
      if ((v50 & 0x80000000) == 0) {
        goto LABEL_30;
      }
      goto LABEL_37;
    }
  }
  else if ((v52 & 0x80000000) == 0)
  {
    goto LABEL_29;
  }
  operator delete(v51);
  if ((v50 & 0x80000000) == 0)
  {
LABEL_30:
    int v24 = v48;
    if (v48 != 1) {
      goto LABEL_31;
    }
    goto LABEL_38;
  }
LABEL_37:
  operator delete(v49);
  int v24 = v48;
  if (v48 != 1)
  {
LABEL_31:
    if (v24 || (v47 & 0x80000000) == 0) {
      goto LABEL_41;
    }
    long long v25 = v45;
    goto LABEL_40;
  }
LABEL_38:
  long long v25 = v45;
  if (v45)
  {
    uint64_t v46 = v45;
LABEL_40:
    operator delete(v25);
  }
LABEL_41:
  uint64_t v12 = (char *)a4[1];
  uint64_t v14 = v37;
  uint64_t v15 = v38;
  unint64_t v16 = 0x8E38E38E38E38E39 * ((v38 - (unsigned char *)v37) >> 4);
LABEL_42:
  sub_8FD660((uint64_t *)a4, v12, (uint64_t)v14, (uint64_t)v15, v16);
LABEL_43:
  uint64_t v26 = sub_91EBBC((int *)*a4, (int *)a4[1]);
  uint64_t v27 = (uint64_t)a4[1];
  if ((int *)v27 != v26)
  {
    sub_8FD2A8((uint64_t)&__p, v27, (uint64_t)a4[1], (uint64_t)v26);
    unint64_t v29 = v28;
    uint64_t v30 = (uint64_t)a4[1];
    if ((void *)v30 != v28)
    {
      do
      {
        v30 -= 144;
        sub_8E48A4((uint64_t)(a4 + 2), v30);
      }
      while ((void *)v30 != v29);
    }
    a4[1] = v29;
  }
  if (v8) {
    operator delete(v8);
  }
  int v31 = (char *)v37;
  if (v37)
  {
    uint64_t v32 = v38;
    uint64_t v33 = v37;
    if (v38 != v37)
    {
      do
      {
        v32 -= 144;
        sub_8E48A4((uint64_t)&v39, (uint64_t)v32);
      }
      while (v32 != v31);
      uint64_t v33 = v37;
    }
    int v38 = v31;
    operator delete(v33);
  }
  uint64_t v34 = (char *)v40;
  if (v40)
  {
    __int16 v35 = v41;
    uint64_t v36 = v40;
    if (v41 != v40)
    {
      do
      {
        v35 -= 144;
        sub_8E48A4((uint64_t)&v42, (uint64_t)v35);
      }
      while (v35 != v34);
      uint64_t v36 = v40;
    }
    uint64_t v41 = v34;
    operator delete(v36);
  }
}

void sub_91CC40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (v18) {
    operator delete(v18);
  }
  sub_8E4838(v17);
  sub_8E4838(&a10);
  sub_8E4838(&a13);
  _Unwind_Resume(a1);
}

char *sub_91CCBC(void **a1, unsigned char *a2, _DWORD *a3)
{
  unint64_t v6 = (unint64_t)*a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - (unsigned char *)*a1;
  uint64_t v8 = v7 >> 2;
  unint64_t v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(_DWORD *)unint64_t v9 = *a3;
      a1[1] = v9 + 4;
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 4);
    uint64_t v12 = v11 >> 2;
    uint64_t v13 = (int *)(v5 - 4);
    if (v5 < 4)
    {
      uint64_t v19 = a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v11;
      uint64_t v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 4;
      if (v5 > v16) {
        unint64_t v16 = (unint64_t)a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x2C)
      {
        uint64_t v19 = a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        uint64_t v19 = a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 2) + 1;
          uint64_t v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v13 = (int *)((char *)v13 + v21);
          uint64_t v19 = (_DWORD *)(v5 + v21);
          uint64_t v22 = (_OWORD *)(v5 + 16);
          long long v23 = (long long *)(4 * v12 + 4 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            *uint64_t v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 8;
          }
          while (v24);
          if (v20 == (v20 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        int v55 = *v13++;
        *v19++ = v55;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = v19;
    if ((char *)v5 != v9 + 4) {
      memmove((void *)(v5 - 4 * v12), v9, v11);
    }
    *(_DWORD *)unint64_t v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 2) + 1;
  if (v26 >> 62) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 1 > v26) {
    unint64_t v26 = v28 >> 1;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 62) {
      sub_188D718();
    }
    uint64_t v30 = (char *)operator new(4 * v29);
    int v31 = &v30[4 * v8];
    uint64_t v32 = &v30[4 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v30 = 0;
    int v31 = (char *)(4 * v8);
    uint64_t v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((unsigned char *)v6 == a2) {
      unint64_t v52 = 1;
    }
    else {
      unint64_t v52 = v7 >> 1;
    }
    if (v52 >> 62) {
      sub_188D718();
    }
    uint64_t v53 = (char *)operator new(4 * v52);
    int v31 = &v53[v52 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v32 = &v53[4 * v52];
    if (v30)
    {
      char v54 = &v53[4 * v52];
      operator delete(v30);
      uint64_t v32 = v54;
      uint64_t v34 = (char *)*a1;
      *(_DWORD *)int v31 = *a3;
      __int16 v35 = v31 + 4;
      uint64_t v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 4 * (v33 >> 1);
  }
LABEL_28:
  uint64_t v34 = (char *)v6;
  *(_DWORD *)int v31 = *a3;
  __int16 v35 = v31 + 4;
  uint64_t v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    uint64_t v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFFCLL) + v6);
    unint64_t v38 = v37 - v34 - 4;
    uint64_t v39 = v9;
    uint64_t v36 = v31;
    if (v38 < 0x2C) {
      goto LABEL_59;
    }
    uint64_t v39 = v9;
    uint64_t v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 2) + 1;
    uint64_t v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v39 = &v9[-v41];
    uint64_t v36 = &v31[-v41];
    long long v42 = v31 - 16;
    uint64_t v43 = (long long *)(v6 + 4 * v8 - 16);
    uint64_t v44 = v40 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)long long v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 8;
    }
    while (v44);
    if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_59:
      do
      {
        int v46 = *((_DWORD *)v39 - 1);
        v39 -= 4;
        *((_DWORD *)v36 - 1) = v46;
        v36 -= 4;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  char v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    uint64_t v49 = v9;
    size_t v50 = v47 - v9;
    uint64_t v51 = v32;
    memmove(v35, v49, v50);
    uint64_t v32 = v51;
    uint64_t v34 = (char *)*a1;
  }
  *a1 = v36;
  a1[1] = &v35[v48];
  a1[2] = v32;
  if (v34) {
    operator delete(v34);
  }
  return v31;
}

void sub_91D014(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_91D02C(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t **a4@<X8>)
{
  unint64_t v16 = a3;
  uint64_t v7 = (int *)sub_369F8C(*(void *)(a1 + 88), a2, 0, "trip");
  unint64_t v15 = *(void *)((char *)v7 + *(unsigned __int16 *)((char *)v7 - *v7 + 6));
  uint64_t v8 = (int *)sub_8DFD1C(*(void *)(a1 + 88), v15, 0, "line");
  uint64_t v14 = *(void *)((char *)v8 + *(unsigned __int16 *)((char *)v8 - *v8 + 6));
  sub_8FF5A8(*(void *)(a1 + 72), a3, (uint64_t)a4);
  unint64_t v9 = *a4;
  unint64_t v10 = a4[1];
  if (*a4 == v10)
  {
    sub_8F32E4(*(void *)(a1 + 72), &v16, (uint64_t)&v17);
    int64_t v11 = *a4;
    if (*a4)
    {
      a4[1] = v11;
      operator delete(v11);
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
    }
    unint64_t v9 = v17;
    *a4 = v17;
    uint64_t v12 = (unint64_t *)v18;
    *(_OWORD *)(a4 + 1) = v18;
    unint64_t v10 = v12;
  }
  unint64_t v17 = (unint64_t *)a1;
  *(void *)&long long v18 = &v15;
  *((void *)&v18 + 1) = &v14;
  if (v9 == v10)
  {
LABEL_8:
    unint64_t v9 = v10;
  }
  else
  {
    while ((sub_91D574((uint64_t *)&v17, *v9) & 1) == 0)
    {
      if (++v9 == v10) {
        goto LABEL_8;
      }
    }
    if (v9 != v10)
    {
      for (uint64_t i = v9 + 1; i != v10; ++i)
      {
        if ((sub_91D574((uint64_t *)&v17, *i) & 1) == 0) {
          *v9++ = *i;
        }
      }
    }
  }
  if (v9 != a4[1]) {
    a4[1] = v9;
  }
}

void sub_91D1B8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_91D1DC(char **a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)(a1 + 2);
  uint64_t v3 = *a1;
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 4) >= a2) {
    return;
  }
  if (a2 >= 0x1C71C71C71C71C8) {
    sub_2E00();
  }
  unint64_t v5 = a1[1];
  uint64_t v6 = 144 * a2;
  uint64_t v7 = (char *)operator new(144 * a2);
  uint64_t v8 = &v7[v6];
  unint64_t v9 = &v7[v5 - v3];
  if (v5 == v3)
  {
    *a1 = v9;
    a1[1] = v9;
    a1[2] = v8;
    if (!v3) {
      return;
    }
    goto LABEL_10;
  }
  uint64_t v10 = 0;
  do
  {
    int64_t v11 = &v9[v10];
    uint64_t v12 = &v5[v10];
    *((_DWORD *)v11 - 36) = *(_DWORD *)&v5[v10 - 144];
    uint64_t v13 = (void *)*(unsigned int *)&v5[v10 - 104];
    *((_DWORD *)v11 - 26) = v13;
    sub_4F38B0(v13, (uint64_t *)&v5[v10 - 136], &v9[v10 - 136]);
    *((void *)v11 - 12) = *(void *)&v5[v10 - 96];
    long long v14 = *(_OWORD *)&v5[v10 - 88];
    *((void *)v11 - 9) = *(void *)&v5[v10 - 72];
    *(_OWORD *)(v11 - 88) = v14;
    *((void *)v12 - 10) = 0;
    *((void *)v12 - 9) = 0;
    *((void *)v12 - 11) = 0;
    *(v11 - 64) = v5[v10 - 64];
    long long v15 = *(_OWORD *)&v5[v10 - 56];
    *((void *)v11 - 5) = *(void *)&v5[v10 - 40];
    *(_OWORD *)(v11 - 56) = v15;
    *((void *)v12 - 6) = 0;
    *((void *)v12 - 5) = 0;
    *((void *)v12 - 7) = 0;
    *(v11 - 32) = v5[v10 - 32];
    long long v16 = *(_OWORD *)&v5[v10 - 24];
    *((void *)v11 - 1) = *(void *)&v5[v10 - 8];
    *(_OWORD *)(v11 - 24) = v16;
    *((void *)v12 - 2) = 0;
    *((void *)v12 - 1) = 0;
    *((void *)v12 - 3) = 0;
    v10 -= 144;
  }
  while (&v5[v10] != v3);
  unint64_t v17 = *a1;
  uint64_t v3 = a1[1];
  *a1 = &v9[v10];
  a1[1] = v9;
  a1[2] = v8;
  if (v3 != v17)
  {
    do
    {
      v3 -= 144;
      sub_8E48A4(v2, (uint64_t)v3);
    }
    while (v3 != v17);
    uint64_t v3 = v17;
  }
  if (v3)
  {
LABEL_10:
    operator delete(v3);
  }
}

void sub_91D3A0(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  unint64_t v20 = a3;
  uint64_t v6 = (int *)sub_369F8C(*(void *)(a1 + 88), a2, 0, "trip");
  uint64_t v7 = (int *)sub_8DFD1C(*(void *)(a1 + 88), *(void *)((char *)v6 + *(unsigned __int16 *)((char *)v6 - *v6 + 6)), 0, "line");
  uint64_t v19 = *(void *)((char *)v7 + *(unsigned __int16 *)((char *)v7 - *v7 + 6));
  sub_8FF694(*(void *)(a1 + 72), &v20, (uint64_t)&__p);
  uint64_t v8 = (unint64_t *)__p;
  unint64_t v9 = (unint64_t *)v18;
  if (__p == (void *)v18)
  {
    sub_8FF784(*(void *)(a1 + 72), &v20, (uint64_t)&v15);
    if (__p)
    {
      *(void *)&long long v18 = __p;
      operator delete(__p);
    }
    uint64_t v8 = v15;
    long long __p = v15;
    long long v18 = v16;
    unint64_t v9 = (unint64_t *)v16;
  }
  uint64_t v10 = sub_91E294(v8, v9, &v19, a1);
  int64_t v11 = (unint64_t *)__p;
  if ((unint64_t *)v18 != v10) {
    *(void *)&long long v18 = v10;
  }
  *a4 = v19;
  a4[1] = 0;
  a4[2] = 0;
  a4[3] = 0;
  if (v10 != v11)
  {
    int64_t v12 = (char *)v10 - (char *)v11;
    if (v12 < 0) {
      sub_2E00();
    }
    uint64_t v13 = (char *)operator new(v12);
    a4[1] = v13;
    long long v14 = &v13[8 * (v12 >> 3)];
    a4[3] = v14;
    memcpy(v13, v11, v12);
    a4[2] = v14;
  }
  if (v11)
  {
    *(void *)&long long v18 = v11;
    operator delete(v11);
  }
}

void sub_91D524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_91D574(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = (int *)sub_8DFD1C(*(void *)(*a1 + 88), a2, 0, "line");
  uint64_t v6 = (int *)((char *)v5 + *(unsigned __int16 *)((char *)v5 - *v5 + 6));
  int v8 = *v6;
  int v7 = v6[1];
  if (*(void *)a1[1] == a2) {
    return 1;
  }
  int64_t v11 = (_DWORD *)a1[2];
  if (*v11 != v8 || v11[1] != v7) {
    return 1;
  }
  sub_8FBB94(*(void *)(v4 + 88), a2, (uint64_t)&__p);
  int64_t v12 = __p;
  if (__p != v19)
  {
    while (*v12 != 1)
    {
      if (++v12 == v19)
      {
        int64_t v12 = v19;
        break;
      }
    }
  }
  if (v12 == v19
    || !*(unsigned char *)(*(void *)(v4 + 56) + 1424)
    && (uint64_t v13 = (int *)sub_8DFD1C(*(void *)(v4 + 88), a2, 0, "line"),
        long long v14 = (unsigned __int16 *)((char *)v13 - *v13),
        *v14 >= 0x23u)
    && (uint64_t v15 = v14[17]) != 0
    && *((unsigned char *)v13 + v15))
  {
    BOOL v9 = 1;
    long long v16 = __p;
    if (!__p) {
      return v9;
    }
  }
  else
  {
    unsigned int v17 = *(unsigned __int8 *)(*(void *)(v4 + 56) + 1425);
    BOOL v9 = v17 < sub_8F694C(*(void *)(v4 + 88), a2);
    long long v16 = __p;
    if (!__p) {
      return v9;
    }
  }
  uint64_t v19 = v16;
  operator delete(v16);
  return v9;
}

void sub_91D710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_91D72C(unint64_t *a1, unint64_t *a2, uint64_t *a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v13 = a5;
  if (a1 != a2)
  {
    for (uint64_t i = a1; i != a2; ++i)
    {
      sub_91D878(&v13, *i, (uint64_t)v14);
      uint64_t v10 = sub_91DBE4(a3, a4, (uint64_t)v14);
      if (v24 < 0)
      {
        operator delete(v23);
        if ((v22 & 0x80000000) == 0)
        {
LABEL_7:
          if ((v20 & 0x80000000) == 0) {
            goto LABEL_8;
          }
          goto LABEL_14;
        }
      }
      else if ((v22 & 0x80000000) == 0)
      {
        goto LABEL_7;
      }
      operator delete(v21);
      if ((v20 & 0x80000000) == 0)
      {
LABEL_8:
        int v11 = v18;
        if (v18 != 1) {
          goto LABEL_9;
        }
        goto LABEL_15;
      }
LABEL_14:
      operator delete(v19);
      int v11 = v18;
      if (v18 != 1)
      {
LABEL_9:
        if (v11 || (v17 & 0x80000000) == 0) {
          goto LABEL_4;
        }
        BOOL v9 = __p;
        goto LABEL_3;
      }
LABEL_15:
      BOOL v9 = __p;
      if (!__p) {
        goto LABEL_4;
      }
      long long v16 = __p;
LABEL_3:
      operator delete(v9);
LABEL_4:
      a4 = (_DWORD *)(v10 + 144);
    }
  }
  return a3;
}

void sub_91D860(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_8FAB78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_91D878(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a1;
  sub_967428(*(void *)(*a1 + 72), *(void *)(v5 + 88), a2, 0xFFFFFFFF00000000, *(void *)(v5 + 56) + 968, (int **)(v5 + 24), (uint64_t)&__str);
  LODWORD(v29[0]) = -1;
  *(_DWORD *)((char *)v29 + 3) = -1;
  memset((char *)v29 + 7, 0, 26);
  memset(&v30, 0, sizeof(v30));
  char v31 = 0;
  uint64_t v33 = 0;
  long long v32 = 0uLL;
  int v28 = -1;
  int v24 = 3;
  sub_4F39B8((uint64_t)&v25, &__str);
  v29[0] = v19;
  std::string::operator=((std::string *)&v29[1], &v20);
  LOBYTE(v29[4]) = v21;
  std::string::operator=(&v30, &__p);
  char v31 = v23;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_8:
    operator delete(v20.__r_.__value_.__l.__data_);
    int v6 = v18;
    if (v18 != 1) {
      goto LABEL_4;
    }
LABEL_9:
    std::string::size_type size = (void *)__str.__r_.__value_.__l.__size_;
    if (!__str.__r_.__value_.__l.__size_) {
      goto LABEL_12;
    }
    __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
    goto LABEL_11;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_8;
  }
LABEL_3:
  int v6 = v18;
  if (v18 == 1) {
    goto LABEL_9;
  }
LABEL_4:
  if (!v6 && v17 < 0)
  {
    std::string::size_type size = (void *)__str.__r_.__value_.__l.__size_;
LABEL_11:
    operator delete(size);
  }
LABEL_12:
  sub_97BE48(a2, *(void *)(v5 + 64), *(void *)(v5 + 88), *(void *)(v5 + 56), &__str);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  std::string v30 = __str;
  int v8 = v28;
  *(_DWORD *)a3 = v24;
  *(_DWORD *)(a3 + 40) = v8;
  if (v8 == 1)
  {
    *(void *)(a3 + 16) = 0;
    uint64_t v10 = (const void *)v26;
    *(void *)(a3 + 8) = v25;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    int64_t v11 = *((void *)&v26 + 1) - (void)v10;
    if (*((const void **)&v26 + 1) != v10)
    {
      if (v11 < 0) {
        sub_2E00();
      }
      int64_t v12 = (char *)operator new(*((void *)&v26 + 1) - (void)v10);
      *(void *)(a3 + 16) = v12;
      *(void *)(a3 + 24) = v12;
      uint64_t v13 = &v12[8 * (v11 >> 3)];
      *(void *)(a3 + 32) = v13;
      memcpy(v12, v10, v11);
      *(void *)(a3 + 24) = v13;
    }
  }
  else if (!v8)
  {
    *(void *)(a3 + 8) = v25;
    BOOL v9 = (unsigned char *)(a3 + 16);
    if (SHIBYTE(v27) < 0)
    {
      sub_4200(v9, (void *)v26, *((unint64_t *)&v26 + 1));
    }
    else
    {
      *(_OWORD *)BOOL v9 = v26;
      *(void *)(a3 + 32) = v27;
    }
  }
  *(void *)(a3 + 48) = v29[0];
  *(_OWORD *)(a3 + 56) = *(_OWORD *)&v29[1];
  *(void *)(a3 + 72) = v29[3];
  memset(&v29[1], 0, 24);
  *(unsigned char *)(a3 + 80) = v29[4];
  *(std::string *)(a3 + 88) = v30;
  memset(&v30, 0, sizeof(v30));
  *(unsigned char *)(a3 + 112) = v31;
  long long v14 = v32;
  *(void *)(a3 + 136) = v33;
  *(_OWORD *)(a3 + 120) = v14;
  long long v32 = 0uLL;
  uint64_t v33 = 0;
  if (v28 == 1)
  {
    uint64_t v15 = (void *)v26;
    if (!(void)v26) {
      return;
    }
    *((void *)&v26 + 1) = v26;
    goto LABEL_28;
  }
  if (!v28 && SHIBYTE(v27) < 0)
  {
    uint64_t v15 = (void *)v26;
LABEL_28:
    operator delete(v15);
  }
}

void sub_91DB74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_91DBC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  sub_8FAB78((uint64_t)va1);
  sub_4D9814((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_91DBE4(uint64_t *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t)a2;
  uint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  unint64_t v8 = 0x8E38E38E38E38E39 * (((uint64_t)a2 - *a1) >> 4);
  unint64_t v9 = a1[2];
  if (v6 >= v9)
  {
    unint64_t v27 = 0x8E38E38E38E38E39 * ((uint64_t)(v6 - v7) >> 4) + 1;
    if (v27 > 0x1C71C71C71C71C7) {
      sub_2E00();
    }
    unint64_t v28 = 0x8E38E38E38E38E39 * ((uint64_t)(v9 - v7) >> 4);
    if (2 * v28 > v27) {
      unint64_t v27 = 2 * v28;
    }
    if (v28 >= 0xE38E38E38E38E3) {
      unint64_t v29 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v29 = v27;
    }
    uint64_t v43 = a1 + 2;
    if (v29)
    {
      if (v29 > 0x1C71C71C71C71C7) {
        sub_188D718();
      }
      std::string v30 = (char *)operator new(144 * v29);
    }
    else
    {
      std::string v30 = 0;
    }
    std::string __p = v30;
    uint64_t v40 = &v30[144 * v8];
    uint64_t v41 = v40;
    long long v42 = &v30[144 * v29];
    sub_91DFD0((uint64_t)&__p, a3);
    uint64_t v4 = sub_8FDA5C(a1, &__p, (_DWORD *)v4);
    uint64_t v37 = v40;
    for (uint64_t i = v41; v41 != v37; uint64_t i = v41)
    {
      uint64_t v41 = i - 144;
      sub_8E48A4((uint64_t)v43, (uint64_t)(i - 144));
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (a2 == (_DWORD *)v6)
  {
    *a2 = *(_DWORD *)a3;
    uint64_t v31 = v7 + 144 * v8;
    *(_DWORD *)(v31 + 40) = *(_DWORD *)(a3 + 40);
    sub_4F38B0((void *)*(unsigned int *)(a3 + 40), (uint64_t *)(a3 + 8), (void *)(v31 + 8));
    uint64_t v32 = v7 + 144 * v8;
    *(void *)(v32 + 48) = *(void *)(a3 + 48);
    long long v33 = *(_OWORD *)(a3 + 56);
    *(void *)(v32 + 72) = *(void *)(a3 + 72);
    *(_OWORD *)(v32 + 56) = v33;
    *(void *)(a3 + 64) = 0;
    *(void *)(a3 + 72) = 0;
    *(void *)(a3 + 56) = 0;
    *(unsigned char *)(v32 + 80) = *(unsigned char *)(a3 + 80);
    long long v34 = *(_OWORD *)(a3 + 88);
    *(void *)(v32 + 104) = *(void *)(a3 + 104);
    *(_OWORD *)(v32 + 88) = v34;
    *(void *)(a3 + 96) = 0;
    *(void *)(a3 + 104) = 0;
    *(void *)(a3 + 88) = 0;
    *(unsigned char *)(v32 + 112) = *(unsigned char *)(a3 + 112);
    long long v35 = *(_OWORD *)(a3 + 120);
    *(void *)(v32 + 136) = *(void *)(a3 + 136);
    *(_OWORD *)(v32 + 120) = v35;
    *(void *)(a3 + 128) = 0;
    *(void *)(a3 + 136) = 0;
    *(void *)(a3 + 120) = 0;
    a1[1] = v4 + 144;
  }
  else
  {
    uint64_t v10 = a1[1];
    if (v6 >= 0x90)
    {
      unint64_t v11 = v6 - 144;
      uint64_t v12 = a1[1];
      do
      {
        uint64_t v13 = v12;
        *(_DWORD *)uint64_t v12 = *(_DWORD *)v11;
        *(_DWORD *)(v12 + 40) = *(_DWORD *)(v11 + 40);
        unint64_t v14 = v11 + 8;
        sub_4F38B0((void *)*(unsigned int *)(v11 + 40), (uint64_t *)(v11 + 8), (void *)(v12 + 8));
        *(void *)(v13 + 48) = *(void *)(v14 + 40);
        long long v15 = *(_OWORD *)(v14 + 48);
        *(void *)(v13 + 72) = *(void *)(v14 + 64);
        *(_OWORD *)(v13 + 56) = v15;
        *(void *)(v14 + 56) = 0;
        *(void *)(v14 + 64) = 0;
        *(void *)(v14 + 48) = 0;
        *(unsigned char *)(v13 + 80) = *(unsigned char *)(v14 + 72);
        long long v16 = *(_OWORD *)(v14 + 80);
        *(void *)(v13 + 104) = *(void *)(v14 + 96);
        *(_OWORD *)(v13 + 88) = v16;
        *(void *)(v14 + 88) = 0;
        *(void *)(v14 + 96) = 0;
        *(void *)(v14 + 80) = 0;
        *(unsigned char *)(v13 + 112) = *(unsigned char *)(v14 + 104);
        long long v17 = *(_OWORD *)(v14 + 112);
        *(void *)(v13 + 136) = *(void *)(v14 + 128);
        *(_OWORD *)(v13 + 120) = v17;
        *(void *)(v14 + 120) = 0;
        *(void *)(v14 + 128) = 0;
        *(void *)(v14 + 112) = 0;
        unint64_t v11 = v14 + 136;
        uint64_t v12 = v13 + 144;
      }
      while (v14 + 136 < v6);
      uint64_t v10 = v13 + 144;
    }
    a1[1] = v10;
    sub_8FDC4C((uint64_t)&__p, v4, v6 - 144, v6);
    *(_DWORD *)uint64_t v4 = *(_DWORD *)a3;
    uint64_t v18 = v7 + 144 * v8;
    sub_4F377C(v18 + 8, a3 + 8);
    *(void *)(v18 + 48) = *(void *)(a3 + 48);
    uint64_t v19 = v18 + 56;
    if (*(char *)(v4 + 79) < 0) {
      operator delete(*(void **)v19);
    }
    long long v20 = *(_OWORD *)(a3 + 56);
    *(void *)(v19 + 16) = *(void *)(a3 + 72);
    *(_OWORD *)uint64_t v19 = v20;
    *(unsigned char *)(a3 + 79) = 0;
    *(unsigned char *)(a3 + 56) = 0;
    uint64_t v21 = v7 + 144 * v8;
    *(unsigned char *)(v21 + 80) = *(unsigned char *)(a3 + 80);
    uint64_t v22 = v21 + 88;
    if (*(char *)(v4 + 111) < 0) {
      operator delete(*(void **)v22);
    }
    long long v23 = *(_OWORD *)(a3 + 88);
    *(void *)(v22 + 16) = *(void *)(a3 + 104);
    *(_OWORD *)uint64_t v22 = v23;
    *(unsigned char *)(a3 + 111) = 0;
    *(unsigned char *)(a3 + 88) = 0;
    uint64_t v24 = v7 + 144 * v8;
    *(unsigned char *)(v24 + 112) = *(unsigned char *)(a3 + 112);
    uint64_t v25 = v24 + 120;
    if (*(char *)(v4 + 143) < 0) {
      operator delete(*(void **)v25);
    }
    long long v26 = *(_OWORD *)(a3 + 120);
    *(void *)(v25 + 16) = *(void *)(a3 + 136);
    *(_OWORD *)uint64_t v25 = v26;
    *(unsigned char *)(a3 + 143) = 0;
    *(unsigned char *)(a3 + 120) = 0;
  }
  return v4;
}

void sub_91DFB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_8FD250((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_91DFD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 != *(void *)(a1 + 24)) {
    goto LABEL_18;
  }
  unint64_t v6 = *(void **)a1;
  uint64_t v5 = *(_DWORD **)(a1 + 8);
  if ((unint64_t)v5 <= *(void *)a1)
  {
    unint64_t v11 = 0x1C71C71C71C71C72 * ((v4 - (uint64_t)v6) >> 4);
    if ((void *)v4 == v6) {
      unint64_t v11 = 1;
    }
    if (v11 >= 0x1C71C71C71C71C8) {
      sub_188D718();
    }
    uint64_t v12 = *(void *)(a1 + 32);
    unint64_t v13 = v11 >> 2;
    uint64_t v14 = 144 * v11;
    long long v15 = (char *)operator new(144 * v11);
    long long v16 = v15;
    long long v17 = &v15[144 * v13];
    uint64_t v18 = &v15[v14];
    if ((_DWORD *)v4 == v5)
    {
      *(void *)a1 = v15;
      *(void *)(a1 + 8) = v17;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = v18;
      if (!v6) {
        goto LABEL_17;
      }
    }
    else
    {
      long long v34 = &v15[144 * v13];
      uint64_t v19 = &v17[v4 - (void)v5];
      uint64_t v20 = 144 * v13;
      do
      {
        uint64_t v21 = &v16[v20];
        *(_DWORD *)uint64_t v21 = *v5;
        unint64_t v22 = v5[10];
        *((_DWORD *)v21 + 10) = v22;
        long long v23 = v5 + 2;
        uint64_t v24 = &v16[v20 + 8];
        sub_4F38B0((void *)v22, (uint64_t *)v23, v24);
        *(void *)&v16[v20 + 48] = *((void *)v23 + 5);
        long long v25 = *((_OWORD *)v23 + 3);
        *(void *)&v16[v20 + 72] = *((void *)v23 + 8);
        *(_OWORD *)&v16[v20 + 56] = v25;
        *((void *)v23 + 7) = 0;
        *((void *)v23 + 8) = 0;
        *((void *)v23 + 6) = 0;
        v16[v20 + 80] = *((unsigned char *)v23 + 72);
        long long v26 = *((_OWORD *)v23 + 5);
        *(void *)&v16[v20 + 104] = *((void *)v23 + 12);
        *(_OWORD *)&v16[v20 + 88] = v26;
        *((void *)v23 + 11) = 0;
        *((void *)v23 + 12) = 0;
        *((void *)v23 + 10) = 0;
        v16[v20 + 112] = *((unsigned char *)v23 + 104);
        long long v27 = *((_OWORD *)v23 + 7);
        *(void *)&v16[v20 + 136] = *((void *)v23 + 16);
        *(_OWORD *)&v16[v20 + 120] = v27;
        *((void *)v23 + 15) = 0;
        *((void *)v23 + 16) = 0;
        *((void *)v23 + 14) = 0;
        v20 += 144;
        unint64_t v28 = v24 + 136;
        uint64_t v5 = v23 + 34;
      }
      while (v28 != v19);
      unint64_t v6 = *(void **)a1;
      uint64_t v29 = *(void *)(a1 + 8);
      uint64_t v30 = *(void *)(a1 + 16);
      *(void *)a1 = v16;
      *(void *)(a1 + 8) = v34;
      *(void *)(a1 + 16) = v19;
      *(void *)(a1 + 24) = v18;
      while (v30 != v29)
      {
        v30 -= 144;
        sub_8E48A4(v12, v30);
      }
      if (!v6) {
        goto LABEL_17;
      }
    }
    operator delete(v6);
LABEL_17:
    uint64_t v4 = *(void *)(a1 + 16);
    goto LABEL_18;
  }
  int64_t v7 = 0x8E38E38E38E38E39 * (((uint64_t)v5 - *(void *)a1) >> 4);
  if (v7 >= -1) {
    uint64_t v8 = v7 + 1;
  }
  else {
    uint64_t v8 = v7 + 2;
  }
  uint64_t v9 = -144 * (v8 >> 1);
  sub_8FD2A8((uint64_t)&v35, *(void *)(a1 + 8), v4, (uint64_t)&v5[-36 * (v8 >> 1)]);
  uint64_t v4 = v10;
  *(void *)(a1 + 8) += v9;
  *(void *)(a1 + 16) = v10;
LABEL_18:
  *(_DWORD *)uint64_t v4 = *(_DWORD *)a2;
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a2 + 40);
  sub_4F38B0((void *)*(unsigned int *)(a2 + 40), (uint64_t *)(a2 + 8), (void *)(v4 + 8));
  *(void *)(v4 + 48) = *(void *)(a2 + 48);
  long long v31 = *(_OWORD *)(a2 + 56);
  *(void *)(v4 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(v4 + 56) = v31;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 56) = 0;
  *(unsigned char *)(v4 + 80) = *(unsigned char *)(a2 + 80);
  long long v32 = *(_OWORD *)(a2 + 88);
  *(void *)(v4 + 104) = *(void *)(a2 + 104);
  *(_OWORD *)(v4 + 88) = v32;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 88) = 0;
  *(unsigned char *)(v4 + 112) = *(unsigned char *)(a2 + 112);
  __n128 result = *(__n128 *)(a2 + 120);
  *(void *)(v4 + 136) = *(void *)(a2 + 136);
  *(__n128 *)(v4 + 120) = result;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 120) = 0;
  *(void *)(a1 + 16) += 144;
  return result;
}

unint64_t *sub_91E294(unint64_t *a1, unint64_t *a2, void *a3, uint64_t a4)
{
  int64_t v7 = a1;
  if (a1 != a2)
  {
    while (1)
    {
      unint64_t v8 = *v7;
      if (*a3 == *v7) {
        break;
      }
      uint64_t v9 = *(void *)(a4 + 56);
      if (!*(unsigned char *)(v9 + 1424))
      {
        if (sub_8FEEAC(*(void *)(a4 + 64), *v7)) {
          break;
        }
        uint64_t v9 = *(void *)(a4 + 56);
      }
      unsigned int v10 = *(unsigned __int8 *)(v9 + 1425);
      if (v10 < sub_8FF05C(*(void *)(a4 + 64), v8)) {
        break;
      }
      if (++v7 == a2) {
        return a2;
      }
    }
  }
  if (v7 != a2)
  {
    for (uint64_t i = v7 + 1; ; ++i)
    {
      if (i == a2) {
        return v7;
      }
      unint64_t v12 = *i;
      if (*a3 != *i)
      {
        uint64_t v13 = *(void *)(a4 + 56);
        if (*(unsigned char *)(v13 + 1424))
        {
          unsigned int v14 = *(unsigned __int8 *)(v13 + 1425);
          if (v14 < sub_8FF05C(*(void *)(a4 + 64), *i)) {
            continue;
          }
LABEL_16:
          *v7++ = *i;
          continue;
        }
        if ((sub_8FEEAC(*(void *)(a4 + 64), *i) & 1) == 0)
        {
          unsigned int v15 = *(unsigned __int8 *)(*(void *)(a4 + 56) + 1425);
          if (v15 >= sub_8FF05C(*(void *)(a4 + 64), v12)) {
            goto LABEL_16;
          }
        }
      }
    }
  }
  return a2;
}

uint64_t *sub_91E3E8(unint64_t *a1, unint64_t *a2, uint64_t *a3, _DWORD *a4, uint64_t a5)
{
  if (a1 != a2)
  {
    for (uint64_t i = a1; i != a2; ++i)
    {
      sub_8FAC38(*i, *(void *)(a5 + 64), *(void *)(a5 + 56), (uint64_t)v14);
      uint64_t v11 = sub_91DBE4(a3, a4, (uint64_t)v14);
      if (v24 < 0)
      {
        operator delete(v23);
        if ((v22 & 0x80000000) == 0)
        {
LABEL_7:
          if ((v20 & 0x80000000) == 0) {
            goto LABEL_8;
          }
          goto LABEL_14;
        }
      }
      else if ((v22 & 0x80000000) == 0)
      {
        goto LABEL_7;
      }
      operator delete(v21);
      if ((v20 & 0x80000000) == 0)
      {
LABEL_8:
        int v12 = v18;
        if (v18 != 1) {
          goto LABEL_9;
        }
        goto LABEL_15;
      }
LABEL_14:
      operator delete(v19);
      int v12 = v18;
      if (v18 != 1)
      {
LABEL_9:
        if (v12 || (v17 & 0x80000000) == 0) {
          goto LABEL_4;
        }
        unsigned int v10 = __p;
        goto LABEL_3;
      }
LABEL_15:
      unsigned int v10 = __p;
      if (!__p) {
        goto LABEL_4;
      }
      long long v16 = __p;
LABEL_3:
      operator delete(v10);
LABEL_4:
      a4 = (_DWORD *)(v11 + 144);
    }
  }
  return a3;
}

void sub_91E524(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_8FAB78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_91E53C(void **a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v8 = (uint64_t)a1[2];
  unsigned int v10 = (char *)*a1;
  if (0x8E38E38E38E38E39 * ((v8 - (uint64_t)*a1) >> 4) < a4)
  {
    if (v10)
    {
      uint64_t v11 = (uint64_t)a1[1];
      int v12 = *a1;
      if ((char *)v11 != v10)
      {
        do
        {
          v11 -= 144;
          sub_8E48A4(v9, v11);
        }
        while ((char *)v11 != v10);
        int v12 = *a1;
      }
      a1[1] = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x1C71C71C71C71C7) {
      goto LABEL_35;
    }
    unint64_t v13 = 0x8E38E38E38E38E39 * (v8 >> 4);
    uint64_t v14 = 2 * v13;
    if (2 * v13 <= a4) {
      uint64_t v14 = a4;
    }
    unint64_t v15 = v13 >= 0xE38E38E38E38E3 ? 0x1C71C71C71C71C7 : v14;
    if (v15 > 0x1C71C71C71C71C7) {
LABEL_35:
    }
      sub_2E00();
    uint64_t v16 = 144 * v15;
    char v17 = (char *)operator new(144 * v15);
    *a1 = v17;
    a1[1] = v17;
    a1[2] = &v17[v16];
    if (v6 != a3)
    {
      uint64_t v18 = 0;
      do
      {
        sub_8E839C(&v17[v18], v6 + v18);
        v18 += 144;
      }
      while (v6 + v18 != a3);
      v17 += v18;
    }
    goto LABEL_34;
  }
  uint64_t v19 = (uint64_t)a1[1];
  if (0x8E38E38E38E38E39 * ((v19 - (uint64_t)v10) >> 4) >= a4)
  {
    if (a2 == a3)
    {
      char v17 = (char *)*a1;
    }
    else
    {
      char v17 = (char *)*a1;
      do
      {
        *(_DWORD *)unsigned int v10 = *(_DWORD *)v6;
        sub_4F39B8((uint64_t)(v10 + 8), (std::string *)(v6 + 8));
        *((void *)v10 + 6) = *(void *)(v6 + 48);
        std::string::operator=((std::string *)(v10 + 56), (const std::string *)(v6 + 56));
        v10[80] = *(unsigned char *)(v6 + 80);
        std::string::operator=((std::string *)(v10 + 88), (const std::string *)(v6 + 88));
        v10[112] = *(unsigned char *)(v6 + 112);
        std::string::operator=((std::string *)v10 + 5, (const std::string *)(v6 + 120));
        v17 += 144;
        v6 += 144;
        v10 += 144;
      }
      while (v6 != a3);
      uint64_t v19 = (uint64_t)a1[1];
    }
    while ((char *)v19 != v17)
    {
      v19 -= 144;
      sub_8E48A4(v9, v19);
    }
LABEL_34:
    a1[1] = v17;
    return;
  }
  uint64_t v20 = a2 + 16 * ((v19 - (uint64_t)v10) >> 4);
  if ((char *)v19 != v10)
  {
    do
    {
      *(_DWORD *)unsigned int v10 = *(_DWORD *)v6;
      sub_4F39B8((uint64_t)(v10 + 8), (std::string *)(v6 + 8));
      *((void *)v10 + 6) = *(void *)(v6 + 48);
      std::string::operator=((std::string *)(v10 + 56), (const std::string *)(v6 + 56));
      v10[80] = *(unsigned char *)(v6 + 80);
      std::string::operator=((std::string *)(v10 + 88), (const std::string *)(v6 + 88));
      v10[112] = *(unsigned char *)(v6 + 112);
      std::string::operator=((std::string *)v10 + 5, (const std::string *)(v6 + 120));
      v6 += 144;
      v10 += 144;
    }
    while (v6 != v20);
    unsigned int v10 = (char *)a1[1];
  }
  uint64_t v21 = v10;
  if (v20 != a3)
  {
    uint64_t v22 = 0;
    do
    {
      sub_8E839C(&v10[v22], v20 + v22);
      v22 += 144;
    }
    while (v20 + v22 != a3);
    uint64_t v21 = &v10[v22];
  }
  a1[1] = v21;
}

void sub_91E850(_Unwind_Exception *exception_object)
{
  for (; v4; v4 -= 144)
    sub_8E48A4(v2, v3 - 144 + v4);
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(exception_object);
}

void sub_91E87C(void **a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v8 = (uint64_t)a1[2];
  unsigned int v10 = (char *)*a1;
  if (0x8E38E38E38E38E39 * ((v8 - (uint64_t)*a1) >> 4) < a4)
  {
    if (v10)
    {
      uint64_t v11 = (uint64_t)a1[1];
      int v12 = *a1;
      if ((char *)v11 != v10)
      {
        do
        {
          v11 -= 144;
          sub_8E48A4(v9, v11);
        }
        while ((char *)v11 != v10);
        int v12 = *a1;
      }
      a1[1] = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x1C71C71C71C71C7) {
      goto LABEL_35;
    }
    unint64_t v13 = 0x8E38E38E38E38E39 * (v8 >> 4);
    uint64_t v14 = 2 * v13;
    if (2 * v13 <= a4) {
      uint64_t v14 = a4;
    }
    unint64_t v15 = v13 >= 0xE38E38E38E38E3 ? 0x1C71C71C71C71C7 : v14;
    if (v15 > 0x1C71C71C71C71C7) {
LABEL_35:
    }
      sub_2E00();
    uint64_t v16 = 144 * v15;
    char v17 = (char *)operator new(144 * v15);
    *a1 = v17;
    a1[1] = v17;
    a1[2] = &v17[v16];
    if (v6 != a3)
    {
      uint64_t v18 = 0;
      do
      {
        sub_8E839C(&v17[v18], v6 + v18);
        v18 += 144;
      }
      while (v6 + v18 != a3);
      v17 += v18;
    }
    goto LABEL_34;
  }
  uint64_t v19 = (uint64_t)a1[1];
  if (0x8E38E38E38E38E39 * ((v19 - (uint64_t)v10) >> 4) >= a4)
  {
    if (a2 == a3)
    {
      char v17 = (char *)*a1;
    }
    else
    {
      char v17 = (char *)*a1;
      do
      {
        *(_DWORD *)unsigned int v10 = *(_DWORD *)v6;
        sub_4F39B8((uint64_t)(v10 + 8), (std::string *)(v6 + 8));
        *((void *)v10 + 6) = *(void *)(v6 + 48);
        std::string::operator=((std::string *)(v10 + 56), (const std::string *)(v6 + 56));
        v10[80] = *(unsigned char *)(v6 + 80);
        std::string::operator=((std::string *)(v10 + 88), (const std::string *)(v6 + 88));
        v10[112] = *(unsigned char *)(v6 + 112);
        std::string::operator=((std::string *)v10 + 5, (const std::string *)(v6 + 120));
        v17 += 144;
        v6 += 144;
        v10 += 144;
      }
      while (v6 != a3);
      uint64_t v19 = (uint64_t)a1[1];
    }
    while ((char *)v19 != v17)
    {
      v19 -= 144;
      sub_8E48A4(v9, v19);
    }
LABEL_34:
    a1[1] = v17;
    return;
  }
  uint64_t v20 = a2 + 16 * ((v19 - (uint64_t)v10) >> 4);
  if ((char *)v19 != v10)
  {
    do
    {
      *(_DWORD *)unsigned int v10 = *(_DWORD *)v6;
      sub_4F39B8((uint64_t)(v10 + 8), (std::string *)(v6 + 8));
      *((void *)v10 + 6) = *(void *)(v6 + 48);
      std::string::operator=((std::string *)(v10 + 56), (const std::string *)(v6 + 56));
      v10[80] = *(unsigned char *)(v6 + 80);
      std::string::operator=((std::string *)(v10 + 88), (const std::string *)(v6 + 88));
      v10[112] = *(unsigned char *)(v6 + 112);
      std::string::operator=((std::string *)v10 + 5, (const std::string *)(v6 + 120));
      v6 += 144;
      v10 += 144;
    }
    while (v6 != v20);
    unsigned int v10 = (char *)a1[1];
  }
  uint64_t v21 = v10;
  if (v20 != a3)
  {
    uint64_t v22 = 0;
    do
    {
      sub_8E839C(&v10[v22], v20 + v22);
      v22 += 144;
    }
    while (v20 + v22 != a3);
    uint64_t v21 = &v10[v22];
  }
  a1[1] = v21;
}

void sub_91EB90(_Unwind_Exception *exception_object)
{
  for (; v4; v4 -= 144)
    sub_8E48A4(v2, v3 - 144 + v4);
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(exception_object);
}

int *sub_91EBBC(int *a1, int *a2)
{
  if (a1 == a2) {
    return a2;
  }
  uint64_t v3 = a1;
  while (1)
  {
    int v4 = *v3;
    if (*v3 != 4)
    {
      if (v4 == 3)
      {
        int v6 = v3[10];
        if (v6 == 1)
        {
          BOOL v7 = v3[3] == -1 && v3[2] == -1;
          if (v7 && *((void *)v3 + 2) == *((void *)v3 + 3)) {
            break;
          }
        }
        else if (v6 || v3[2] == -1)
        {
          break;
        }
        goto LABEL_3;
      }
      if (v4 != 1) {
        break;
      }
      uint64_t v5 = *((unsigned __int8 *)v3 + 143);
      if ((v5 & 0x80u) != 0) {
        uint64_t v5 = *((void *)v3 + 16);
      }
      if (!v5) {
        break;
      }
    }
LABEL_3:
    v3 += 36;
    if (v3 == a2) {
      return a2;
    }
  }
  if (v3 != a2 && v3 + 36 != a2)
  {
    uint64_t v8 = v3;
    while (1)
    {
      int v11 = v3[36];
      if (v11 == 4) {
        goto LABEL_43;
      }
      if (v11 != 3) {
        break;
      }
      int v13 = v3[46];
      if (v13 == 1)
      {
        BOOL v14 = v3[39] == -1 && v3[38] == -1;
        if (!v14 || *((void *)v3 + 20) != *((void *)v3 + 21)) {
          goto LABEL_43;
        }
      }
      else if (!v13 && v3[38] != -1)
      {
        goto LABEL_43;
      }
LABEL_25:
      unsigned int v10 = v3 + 72;
      v3 += 36;
      if (v10 == a2) {
        return v8;
      }
    }
    if (v11 != 1) {
      goto LABEL_25;
    }
    uint64_t v12 = *((unsigned __int8 *)v3 + 287);
    if ((v12 & 0x80u) != 0) {
      uint64_t v12 = *((void *)v3 + 34);
    }
    if (!v12) {
      goto LABEL_25;
    }
LABEL_43:
    *uint64_t v8 = v11;
    sub_4F377C((uint64_t)(v8 + 2), (uint64_t)(v3 + 38));
    *((void *)v8 + 6) = *((void *)v3 + 24);
    unint64_t v15 = (void **)(v8 + 14);
    if (*((char *)v8 + 79) < 0) {
      operator delete(*v15);
    }
    long long v16 = *(_OWORD *)(v3 + 50);
    *((void *)v8 + 9) = *((void *)v3 + 27);
    *(_OWORD *)unint64_t v15 = v16;
    *((unsigned char *)v3 + 223) = 0;
    *((unsigned char *)v3 + 200) = 0;
    *((unsigned char *)v8 + 80) = *((unsigned char *)v3 + 224);
    char v17 = (void **)(v8 + 22);
    if (*((char *)v8 + 111) < 0) {
      operator delete(*v17);
    }
    long long v18 = *(_OWORD *)(v3 + 58);
    *((void *)v8 + 13) = *((void *)v3 + 31);
    *(_OWORD *)char v17 = v18;
    *((unsigned char *)v3 + 255) = 0;
    *((unsigned char *)v3 + 232) = 0;
    *((unsigned char *)v8 + 112) = *((unsigned char *)v3 + 256);
    uint64_t v19 = (void **)(v8 + 30);
    if (*((char *)v8 + 143) < 0) {
      operator delete(*v19);
    }
    long long v9 = *(_OWORD *)(v3 + 66);
    *((void *)v8 + 17) = *((void *)v3 + 35);
    *(_OWORD *)uint64_t v19 = v9;
    *((unsigned char *)v3 + 287) = 0;
    *((unsigned char *)v3 + 264) = 0;
    v8 += 36;
    goto LABEL_25;
  }
  return v3;
}

void sub_91EE04(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t **a4@<X8>)
{
  unint64_t v16 = a3;
  BOOL v7 = (int *)sub_369F8C(*(void *)(a1 + 88), a2, 0, "trip");
  unint64_t v15 = *(void *)((char *)v7 + *(unsigned __int16 *)((char *)v7 - *v7 + 6));
  uint64_t v8 = (int *)sub_8DFD1C(*(void *)(a1 + 88), v15, 0, "line");
  uint64_t v14 = *(void *)((char *)v8 + *(unsigned __int16 *)((char *)v8 - *v8 + 6));
  sub_8FDD7C(*(void *)(a1 + 72), a3, (uint64_t)a4);
  long long v9 = *a4;
  unsigned int v10 = a4[1];
  if (*a4 == v10)
  {
    sub_8F33D4(*(void *)(a1 + 72), &v16, (uint64_t)&v17);
    int v11 = *a4;
    if (*a4)
    {
      a4[1] = v11;
      operator delete(v11);
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
    }
    long long v9 = v17;
    *a4 = v17;
    uint64_t v12 = (unint64_t *)v18;
    *(_OWORD *)(a4 + 1) = v18;
    unsigned int v10 = v12;
  }
  char v17 = (unint64_t *)a1;
  *(void *)&long long v18 = &v15;
  *((void *)&v18 + 1) = &v14;
  if (v9 == v10)
  {
LABEL_8:
    long long v9 = v10;
  }
  else
  {
    while ((sub_91F18C((uint64_t *)&v17, *v9) & 1) == 0)
    {
      if (++v9 == v10) {
        goto LABEL_8;
      }
    }
    if (v9 != v10)
    {
      for (uint64_t i = v9 + 1; i != v10; ++i)
      {
        if ((sub_91F18C((uint64_t *)&v17, *i) & 1) == 0) {
          *v9++ = *i;
        }
      }
    }
  }
  if (v9 != a4[1]) {
    a4[1] = v9;
  }
}

void sub_91EF90(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_91EFB4(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  unint64_t v21 = a3;
  BOOL v7 = (int *)sub_369F8C(*(void *)(a1 + 88), a2, 0, "trip");
  uint64_t v8 = (int *)sub_8DFD1C(*(void *)(a1 + 88), *(void *)((char *)v7 + *(unsigned __int16 *)((char *)v7 - *v7 + 6)), 0, "line");
  uint64_t v20 = *(void *)((char *)v8 + *(unsigned __int16 *)((char *)v8 - *v8 + 6));
  sub_8FEBDC(*(void *)(a1 + 72), a3, (uint64_t)&__p);
  long long v9 = (unint64_t *)__p;
  unsigned int v10 = (unint64_t *)v19;
  if (__p == (void *)v19)
  {
    sub_8FECC8(*(void *)(a1 + 72), &v21, (uint64_t)&v16);
    if (__p)
    {
      *(void *)&long long v19 = __p;
      operator delete(__p);
    }
    long long v9 = v16;
    std::string __p = v16;
    long long v19 = v17;
    unsigned int v10 = (unint64_t *)v17;
  }
  int v11 = sub_91E294(v9, v10, &v20, a1);
  uint64_t v12 = (unint64_t *)__p;
  if ((unint64_t *)v19 != v11) {
    *(void *)&long long v19 = v11;
  }
  *a4 = v20;
  a4[1] = 0;
  a4[2] = 0;
  a4[3] = 0;
  if (v11 != v12)
  {
    int64_t v13 = (char *)v11 - (char *)v12;
    if (v13 < 0) {
      sub_2E00();
    }
    uint64_t v14 = (char *)operator new(v13);
    a4[1] = v14;
    unint64_t v15 = &v14[8 * (v13 >> 3)];
    a4[3] = v15;
    memcpy(v14, v12, v13);
    a4[2] = v15;
  }
  if (v12)
  {
    *(void *)&long long v19 = v12;
    operator delete(v12);
  }
}

void sub_91F13C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_91F18C(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (int *)sub_8DFD1C(*(void *)(*a1 + 88), a2, 0, "line");
  int v6 = (int *)((char *)v5 + *(unsigned __int16 *)((char *)v5 - *v5 + 6));
  int v8 = *v6;
  int v7 = v6[1];
  if (*(void *)a1[1] == a2) {
    return 1;
  }
  int v11 = (_DWORD *)a1[2];
  if (*v11 != v8 || v11[1] != v7) {
    return 1;
  }
  sub_8FBB94(*(void *)(v4 + 88), a2, (uint64_t)&__p);
  uint64_t v12 = __p;
  if (__p != v19)
  {
    while (*v12 != 1)
    {
      if (++v12 == v19)
      {
        uint64_t v12 = v19;
        break;
      }
    }
  }
  if (v12 == v19
    || !*(unsigned char *)(*(void *)(v4 + 56) + 1424)
    && (int64_t v13 = (int *)sub_8DFD1C(*(void *)(v4 + 88), a2, 0, "line"),
        uint64_t v14 = (unsigned __int16 *)((char *)v13 - *v13),
        *v14 >= 0x23u)
    && (uint64_t v15 = v14[17]) != 0
    && *((unsigned char *)v13 + v15))
  {
    BOOL v9 = 1;
    unint64_t v16 = __p;
    if (!__p) {
      return v9;
    }
  }
  else
  {
    unsigned int v17 = *(unsigned __int8 *)(*(void *)(v4 + 56) + 1425);
    BOOL v9 = v17 < sub_8F694C(*(void *)(v4 + 88), a2);
    unint64_t v16 = __p;
    if (!__p) {
      return v9;
    }
  }
  long long v19 = v16;
  operator delete(v16);
  return v9;
}

void sub_91F328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_91F344(unint64_t *a1, unint64_t *a2, uint64_t *a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v13 = a5;
  if (a1 != a2)
  {
    for (uint64_t i = a1; i != a2; ++i)
    {
      sub_91F490(&v13, *i, (uint64_t)v14);
      uint64_t v10 = sub_91DBE4(a3, a4, (uint64_t)v14);
      if (v24 < 0)
      {
        operator delete(v23);
        if ((v22 & 0x80000000) == 0)
        {
LABEL_7:
          if ((v20 & 0x80000000) == 0) {
            goto LABEL_8;
          }
          goto LABEL_14;
        }
      }
      else if ((v22 & 0x80000000) == 0)
      {
        goto LABEL_7;
      }
      operator delete(v21);
      if ((v20 & 0x80000000) == 0)
      {
LABEL_8:
        int v11 = v18;
        if (v18 != 1) {
          goto LABEL_9;
        }
        goto LABEL_15;
      }
LABEL_14:
      operator delete(v19);
      int v11 = v18;
      if (v18 != 1)
      {
LABEL_9:
        if (v11 || (v17 & 0x80000000) == 0) {
          goto LABEL_4;
        }
        BOOL v9 = __p;
        goto LABEL_3;
      }
LABEL_15:
      BOOL v9 = __p;
      if (!__p) {
        goto LABEL_4;
      }
      unint64_t v16 = __p;
LABEL_3:
      operator delete(v9);
LABEL_4:
      a4 = (_DWORD *)(v10 + 144);
    }
  }
  return a3;
}

void sub_91F478(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_8FAB78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_91F490(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a1;
  sub_967428(*(void *)(*a1 + 72), *(void *)(v5 + 88), a2, 0xFFFFFFFF00000000, *(void *)(v5 + 56) + 968, (int **)(v5 + 24), (uint64_t)&__str);
  LODWORD(v29[0]) = -1;
  *(_DWORD *)((char *)v29 + 3) = -1;
  memset((char *)v29 + 7, 0, 26);
  memset(&v30, 0, sizeof(v30));
  char v31 = 0;
  uint64_t v33 = 0;
  long long v32 = 0uLL;
  int v28 = -1;
  int v24 = 3;
  sub_4F39B8((uint64_t)&v25, &__str);
  v29[0] = v19;
  std::string::operator=((std::string *)&v29[1], &v20);
  LOBYTE(v29[4]) = v21;
  std::string::operator=(&v30, &__p);
  char v31 = v23;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_8:
    operator delete(v20.__r_.__value_.__l.__data_);
    int v6 = v18;
    if (v18 != 1) {
      goto LABEL_4;
    }
LABEL_9:
    std::string::size_type size = (void *)__str.__r_.__value_.__l.__size_;
    if (!__str.__r_.__value_.__l.__size_) {
      goto LABEL_12;
    }
    __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
    goto LABEL_11;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_8;
  }
LABEL_3:
  int v6 = v18;
  if (v18 == 1) {
    goto LABEL_9;
  }
LABEL_4:
  if (!v6 && v17 < 0)
  {
    std::string::size_type size = (void *)__str.__r_.__value_.__l.__size_;
LABEL_11:
    operator delete(size);
  }
LABEL_12:
  sub_97BE48(a2, *(void *)(v5 + 64), *(void *)(v5 + 88), *(void *)(v5 + 56), &__str);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  std::string v30 = __str;
  int v8 = v28;
  *(_DWORD *)a3 = v24;
  *(_DWORD *)(a3 + 40) = v8;
  if (v8 == 1)
  {
    *(void *)(a3 + 16) = 0;
    uint64_t v10 = (const void *)v26;
    *(void *)(a3 + 8) = v25;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    int64_t v11 = *((void *)&v26 + 1) - (void)v10;
    if (*((const void **)&v26 + 1) != v10)
    {
      if (v11 < 0) {
        sub_2E00();
      }
      uint64_t v12 = (char *)operator new(*((void *)&v26 + 1) - (void)v10);
      *(void *)(a3 + 16) = v12;
      *(void *)(a3 + 24) = v12;
      uint64_t v13 = &v12[8 * (v11 >> 3)];
      *(void *)(a3 + 32) = v13;
      memcpy(v12, v10, v11);
      *(void *)(a3 + 24) = v13;
    }
  }
  else if (!v8)
  {
    *(void *)(a3 + 8) = v25;
    BOOL v9 = (unsigned char *)(a3 + 16);
    if (SHIBYTE(v27) < 0)
    {
      sub_4200(v9, (void *)v26, *((unint64_t *)&v26 + 1));
    }
    else
    {
      *(_OWORD *)BOOL v9 = v26;
      *(void *)(a3 + 32) = v27;
    }
  }
  *(void *)(a3 + 48) = v29[0];
  *(_OWORD *)(a3 + 56) = *(_OWORD *)&v29[1];
  *(void *)(a3 + 72) = v29[3];
  memset(&v29[1], 0, 24);
  *(unsigned char *)(a3 + 80) = v29[4];
  *(std::string *)(a3 + 88) = v30;
  memset(&v30, 0, sizeof(v30));
  *(unsigned char *)(a3 + 112) = v31;
  long long v14 = v32;
  *(void *)(a3 + 136) = v33;
  *(_OWORD *)(a3 + 120) = v14;
  long long v32 = 0uLL;
  uint64_t v33 = 0;
  if (v28 == 1)
  {
    uint64_t v15 = (void *)v26;
    if (!(void)v26) {
      return;
    }
    *((void *)&v26 + 1) = v26;
    goto LABEL_28;
  }
  if (!v28 && SHIBYTE(v27) < 0)
  {
    uint64_t v15 = (void *)v26;
LABEL_28:
    operator delete(v15);
  }
}

void sub_91F78C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_91F7E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  sub_8FAB78((uint64_t)va1);
  sub_4D9814((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_91F7FC(unint64_t *a1, unint64_t *a2, uint64_t *a3, _DWORD *a4, uint64_t a5)
{
  if (a1 != a2)
  {
    for (uint64_t i = a1; i != a2; ++i)
    {
      sub_8FAC38(*i, *(void *)(a5 + 64), *(void *)(a5 + 56), (uint64_t)v14);
      uint64_t v11 = sub_91DBE4(a3, a4, (uint64_t)v14);
      if (v24 < 0)
      {
        operator delete(v23);
        if ((v22 & 0x80000000) == 0)
        {
LABEL_7:
          if ((v20 & 0x80000000) == 0) {
            goto LABEL_8;
          }
          goto LABEL_14;
        }
      }
      else if ((v22 & 0x80000000) == 0)
      {
        goto LABEL_7;
      }
      operator delete(v21);
      if ((v20 & 0x80000000) == 0)
      {
LABEL_8:
        int v12 = v18;
        if (v18 != 1) {
          goto LABEL_9;
        }
        goto LABEL_15;
      }
LABEL_14:
      operator delete(v19);
      int v12 = v18;
      if (v18 != 1)
      {
LABEL_9:
        if (v12 || (v17 & 0x80000000) == 0) {
          goto LABEL_4;
        }
        uint64_t v10 = __p;
        goto LABEL_3;
      }
LABEL_15:
      uint64_t v10 = __p;
      if (!__p) {
        goto LABEL_4;
      }
      uint64_t v16 = __p;
LABEL_3:
      operator delete(v10);
LABEL_4:
      a4 = (_DWORD *)(v11 + 144);
    }
  }
  return a3;
}

void sub_91F938(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_8FAB78((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_91F950()
{
  byte_25D3227 = 1;
  word_25D3210 = 65;
  byte_25D323F = 1;
  word_25D3228 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25D32D0 = 0u;
  *(_OWORD *)&qword_25D32E0 = 0u;
  dword_25D32F0 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25D32D0, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25D32D0, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25D32D0, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25D32D0, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25D3257 = 8;
  strcpy((char *)&qword_25D3240, "any_mode");
  byte_25D326F = 7;
  strcpy((char *)&dword_25D3258, "cycling");
  byte_25D3287 = 7;
  strcpy((char *)&dword_25D3270, "driving");
  byte_25D329F = 7;
  strcpy((char *)&dword_25D3288, "walking");
  qword_25D32A8 = 0;
  qword_25D32B0 = 0;
  qword_25D32A0 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25D32A0 = (uint64_t)v0;
  qword_25D32A8 = (uint64_t)(v0 + 9);
  qword_25D32B0 = (uint64_t)(v0 + 9);
  qword_25D32B8 = 0;
  qword_25D32C0 = 0;
  unk_25D32C8 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25D32C0 = (uint64_t)(v1 + 9);
  unk_25D32C8 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25D32B8 = (uint64_t)v1;
  return result;
}

void sub_91FC18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25D32E0) {
    sub_20AC3C8((void **)qword_25D32E0);
  }
  uint64_t v37 = (void *)xmmword_25D32D0;
  *(void *)&xmmword_25D32D0 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_91FCB8(uint64_t a1, void *a2)
{
  *(void *)std::string __p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_20B9280;
  strcpy(*(char **)__p, "confine_stops_to_available_regions");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(unsigned char *)a1 = v4;
  __p[23] = 11;
  strcpy(__p, "ttl_seconds");
  *(_DWORD *)(a1 + 4) = 10 * sub_319F48(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  return a1;
}

void sub_91FDB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_91FDD0(void *a1, void *a2)
{
  uint64_t v11 = 0;
  int v12 = operator new(0x50uLL);
  long long v13 = xmmword_20B99B0;
  strcpy((char *)v12, "routing/transit/guidance/places/TransitTripStopTimeComponentBuilder.json");
  std::string __p = 0;
  char v10 = 0;
  BOOL v4 = sub_374CDC((uint64_t)a2, (uint64_t)&v12, (uint64_t *)&__p);
  sub_91FCB8((uint64_t)a1, v4);
  int v5 = (void **)__p;
  if (__p)
  {
    uint64_t v6 = v10;
    char v7 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      char v7 = __p;
    }
    char v10 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12);
  }
  a1[1] = sub_375500(a2);
  a1[2] = sub_375B24(a2);
  a1[3] = sub_3755E4(a2);
  return a1;
}

void sub_91FEE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_91FF08(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  a3[1] = 0x27FFFFFFFLL;
  *a3 = &off_243B160;
  a3[2] = 0;
  uint64_t v6 = a3 + 2;
  a3[3] = 0;
  a3[4] = 0;
  if (sub_90D980(a2))
  {
    sub_90CCE4(a2, (uint64_t)&v13);
    sub_92004C(a1, (uint64_t *)&v13, a2, *(_DWORD *)(a2 + 388), v10);
    a3[1] = v10[1];
    char v7 = (void *)a3[2];
    if (v7)
    {
      a3[3] = v7;
      operator delete(v7);
      *uint64_t v6 = 0;
      a3[3] = 0;
      a3[4] = 0;
    }
    *((_OWORD *)a3 + 1) = v11;
    int v8 = v13;
    a3[4] = v12;
    if (v8)
    {
      for (uint64_t i = v14; i != v8; i -= 64)
      {
        if (*(i - 4)) {
          *(i - 4) = 0;
        }
      }
      int v14 = v8;
      operator delete(v8);
    }
  }
  *((_DWORD *)a3 + 2) = *(_DWORD *)(a1 + 4);
}

void sub_920018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_91B170((char **)va);
  *char v7 = v8;
  char v10 = (void *)v7[2];
  if (v10)
  {
    v7[3] = v10;
    operator delete(v10);
  }
  _Unwind_Resume(a1);
}

void sub_92004C(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, void *a5@<X8>)
{
  a5[1] = 0x27FFFFFFFLL;
  a5[2] = 0;
  uint64_t v29 = (void **)(a5 + 2);
  *a5 = &off_243B160;
  a5[3] = 0;
  a5[4] = 0;
  uint64_t v6 = *a2;
  if (a2[1] == *a2) {
    sub_66748();
  }
  unsigned int v9 = *(_DWORD *)(v6 + 12);
  unint64_t v10 = __ROR8__(*(void *)(v6 + 4), 32);
  long long v11 = (int *)sub_369F8C(*(void *)(a1 + 24), v10, 0, "trip");
  uint64_t v12 = (unsigned __int16 *)((char *)v11 - *v11);
  if (*v12 >= 9u)
  {
    uint64_t v13 = v12[4];
    if (v13)
    {
      uint64_t v14 = *(unsigned int *)((char *)v11 + v13);
      if (v14)
      {
        uint64_t v15 = 0;
        int v28 = a4;
        do
        {
          if (sub_90D9E8(v10, v9, v15, *(void *)(a1 + 16), *(void *)(a1 + 24)))
          {
            sub_9202EC(a1, v15, a2, a3, v28, (uint64_t)&v32);
            int v18 = (char *)a5[3];
            unint64_t v17 = a5[4];
            if ((unint64_t)v18 < v17)
            {
              *(_OWORD *)int v18 = v32;
              *((void *)v18 + 2) = v33;
              uint64_t v16 = v18 + 24;
            }
            else
            {
              uint64_t v19 = (char *)*v29;
              unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v18 - (unsigned char *)*v29) >> 3);
              unint64_t v21 = v20 + 1;
              if (v20 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_2E00();
              }
              unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - (void)v19) >> 3);
              if (2 * v22 > v21) {
                unint64_t v21 = 2 * v22;
              }
              if (v22 >= 0x555555555555555) {
                unint64_t v23 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v23 = v21;
              }
              if (v23)
              {
                if (v23 > 0xAAAAAAAAAAAAAAALL) {
                  sub_188D718();
                }
                char v24 = (char *)operator new(24 * v23);
              }
              else
              {
                char v24 = 0;
              }
              uint64_t v25 = &v24[24 * v20];
              *(_OWORD *)uint64_t v25 = v32;
              *((void *)v25 + 2) = v33;
              long long v26 = v25;
              if (v18 != v19)
              {
                do
                {
                  long long v27 = *(_OWORD *)(v18 - 24);
                  *((_DWORD *)v26 - 2) = *((_DWORD *)v18 - 2);
                  *(_OWORD *)(v26 - 24) = v27;
                  v26 -= 24;
                  v18 -= 24;
                }
                while (v18 != v19);
                int v18 = (char *)*v29;
              }
              uint64_t v16 = v25 + 24;
              a5[2] = v26;
              a5[3] = v25 + 24;
              a5[4] = &v24[24 * v23];
              if (v18) {
                operator delete(v18);
              }
            }
            a5[3] = v16;
          }
          ++v15;
        }
        while (v15 != v14);
      }
    }
  }
}

void sub_9202B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  *unsigned int v9 = a9;
  long long v11 = (void *)v9[2];
  if (v11)
  {
    v9[3] = v11;
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_9202EC@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v7 = *a3;
  if (a3[1] == *a3) {
    sub_66748();
  }
  uint64_t v12 = *(void *)(v7 + 4);
  uint64_t v13 = *(unsigned int *)(v7 + 12);
  unsigned int v14 = *(_DWORD *)(v7 + 16);
  unint64_t v15 = __ROR8__(v12, 32);
  uint64_t v16 = sub_369B60(*(void *)(a1 + 24), v15, 0);
  unint64_t v17 = &v16[-*(int *)v16];
  if (*(unsigned __int16 *)v17 < 5u)
  {
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v18 = *((unsigned __int16 *)v17 + 2);
    if (*((_WORD *)v17 + 2)) {
      v18 += (uint64_t)&v16[*(unsigned int *)&v16[v18]];
    }
  }
  uint64_t v19 = (int *)(v18 + ((4 * v12) & 0x3FFFFFFFFLL) + 4 + *(unsigned int *)(v18 + ((4 * v12) & 0x3FFFFFFFFLL) + 4));
  unint64_t v20 = (unsigned __int16 *)((char *)v19 - *v19);
  if (*v20 >= 0xDu && (uint64_t v21 = v20[6]) != 0) {
    int v22 = *(int *)((char *)v19 + v21);
  }
  else {
    int v22 = -1;
  }
  unint64_t v23 = *(void *)&v16[24 * v22
                      + 4
                      + 24 * a2
                      + *((unsigned __int16 *)v17 + 3)
                      + *(unsigned int *)&v16[*((unsigned __int16 *)v17 + 3)]];
  uint64_t result = sub_498D5C(*(void *)(a1 + 8), v23, 1, "stop");
  if (!result) {
    goto LABEL_20;
  }
  if (*(unsigned char *)a1)
  {
    uint64_t v51 = a6;
    int v25 = a5;
    unint64_t v26 = v15;
    unsigned int v27 = a2;
    uint64_t v28 = a4;
    uint64_t v29 = v13;
    unsigned int v30 = v14;
    uint64_t v31 = *(void *)(a1 + 8);
    long long v32 = (int *)sub_498D5C(v31, v23, 0, "stop");
    uint64_t v33 = (uint64_t)v32 + *(unsigned __int16 *)((char *)v32 - *v32 + 6);
    uint64_t v34 = *(unsigned int *)v33;
    LODWORD(v33) = *(_DWORD *)(v33 + 4);
    uint64_t v33 = v33 >= 0xFFFFFFFE ? 4294967294 : v33;
    unint64_t v52 = v34 | (v33 << 32);
    int v53 = 0x7FFFFFFF;
    char v35 = (void ***)(v31 + 3872);
    unsigned int v14 = v30;
    uint64_t v13 = v29;
    a4 = v28;
    a2 = v27;
    unint64_t v15 = v26;
    a5 = v25;
    a6 = v51;
    uint64_t result = sub_73930(v35, &v52);
    if ((result & 1) == 0)
    {
LABEL_20:
      *(void *)a6 = -1;
      goto LABEL_21;
    }
  }
  uint64_t v36 = sub_90B28C(v23, a4, *(void *)(a1 + 8));
  uint64_t result = sub_369F8C(*(void *)(a1 + 24), v15, 0, "trip");
  uint64_t v37 = (unsigned __int16 *)(result - *(int *)result);
  if (*v37 >= 0x13u)
  {
    uint64_t v38 = v37[9];
    if (v38)
    {
      if (*(_DWORD *)(result + v38 + *(unsigned int *)(result + v38)))
      {
        *(void *)a6 = v36;
LABEL_21:
        *(void *)(a6 + 8) = 0x8000000080000000;
        *(_DWORD *)(a6 + 16) = 0;
        return result;
      }
    }
  }
  uint64_t v39 = *(void *)(a1 + 24);
  unsigned int v50 = v14;
  unint64_t v52 = __PAIR64__(v12, HIDWORD(v12));
  if (v14 >= a2) {
    int v40 = sub_920698(v39, (uint64_t)&v52, v13, a2);
  }
  else {
    int v40 = sub_92084C(v39, (uint64_t)&v52, v13, a2);
  }
  if (a5 < 0) {
    char v41 = -5;
  }
  else {
    char v41 = 5;
  }
  unsigned int v42 = a5 / -10 + (((-103 * (char)(v41 + a5 % 10)) >> 15) & 1) + ((-103 * (char)(v41 + a5 % 10)) >> 10);
  uint64_t v43 = v42 + v40;
  uint64_t v44 = *(void *)(a1 + 16);
  uint64_t result = **(void **)(v44 + 3896);
  if (result
    && (uint64_t result = (uint64_t)sub_367060(result, v15, v13, *(unsigned char *)(v44 + 3904))) != 0
    && (v45 = *(void *)(a1 + 16), (uint64_t result = **(void **)(v45 + 3896)) != 0)
    && (uint64_t result = (uint64_t)sub_367060(result, v15, v13, *(unsigned char *)(v45 + 3904))) != 0
    && (uint64_t v46 = *(void *)(result + 40), 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(result + 48) - v46) >> 2) > a2)
    && *(unsigned __int8 *)(v46 + 20 * a2) != 255)
  {
    uint64_t v47 = *(void *)(a1 + 16);
    if (v50 >= a2) {
      uint64_t result = sub_920A00(v47, v15, v13, a2);
    }
    else {
      uint64_t result = sub_920BB4(v47, v15, v13, a2);
    }
    uint64_t v49 = v42 + result;
    int v48 = 1;
  }
  else
  {
    int v48 = 0;
    uint64_t v49 = v43;
  }
  *(void *)a6 = v36;
  *(void *)(a6 + 8) = v43 | (v49 << 32);
  *(_DWORD *)(a6 + 16) = v48;
  return result;
}

uint64_t sub_920698(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7 = sub_369B60(a1, *(void *)a2, 0);
  uint64_t v8 = (unsigned __int16 *)&v7[-*(int *)v7];
  unsigned int v9 = *v8;
  if (v9 <= 4)
  {
    uint64_t v13 = 0;
    uint64_t v12 = (int *)(4 * *(unsigned int *)(a2 + 4) + 4 + dword_4[*(unsigned int *)(a2 + 4)]);
    unsigned int v14 = (unsigned __int16 *)((char *)v12
                             - *(int *)((char *)&dword_4[*(unsigned int *)(a2 + 4)]
                                      + dword_4[*(unsigned int *)(a2 + 4)]));
    unsigned int v15 = *v14;
    if (v15 >= 0x15) {
      goto LABEL_9;
    }
    goto LABEL_12;
  }
  uint64_t v10 = v8[2];
  if (v8[2]) {
    v10 += (uint64_t)&v7[*(unsigned int *)&v7[v10]];
  }
  uint64_t v11 = v10 + 4 * *(unsigned int *)(a2 + 4);
  uint64_t v12 = (int *)(v11 + 4 + *(unsigned int *)(v11 + 4));
  if (v9 < 0xD || !v8[6])
  {
    uint64_t v13 = 0;
    unsigned int v14 = (unsigned __int16 *)((char *)v12 - *v12);
    unsigned int v15 = *v14;
    if (v15 >= 0x15) {
      goto LABEL_9;
    }
LABEL_12:
    int v17 = *(_DWORD *)&v13[((8 * a3 + 0x7FFFFFFF8) & 0x7FFFFFFF8) + 8];
    if (v15 >= 0xB)
    {
      uint64_t v18 = v14[5];
      if (v14[5]) {
        goto LABEL_14;
      }
    }
    goto LABEL_19;
  }
  uint64_t v13 = &v7[v8[6] + *(unsigned int *)&v7[v8[6]]];
  unsigned int v14 = (unsigned __int16 *)((char *)v12 - *v12);
  unsigned int v15 = *v14;
  if (v15 < 0x15) {
    goto LABEL_12;
  }
LABEL_9:
  if (v14[10]) {
    int v16 = *(int *)((char *)v12 + v14[10]);
  }
  else {
    int v16 = -1;
  }
  int v17 = *(_DWORD *)&v13[8 * (v16 + a3) + 8];
  uint64_t v18 = v14[5];
  if (v14[5])
  {
LABEL_14:
    int v19 = *(int *)((char *)v12 + v18);
    if (v9 < 7) {
      goto LABEL_15;
    }
    goto LABEL_20;
  }
LABEL_19:
  int v19 = 0x7FFFFFFF;
  if (v9 < 7)
  {
LABEL_15:
    uint64_t v20 = 0;
    if (v15 < 0xD) {
      goto LABEL_25;
    }
    goto LABEL_23;
  }
LABEL_20:
  uint64_t v20 = v8[3];
  if (v20) {
    v20 += (uint64_t)&v7[*(unsigned int *)&v7[v20]];
  }
  if (v15 < 0xD) {
    goto LABEL_25;
  }
LABEL_23:
  if (v14[6])
  {
    int v21 = *(int *)((char *)v12 + v14[6]);
    goto LABEL_26;
  }
LABEL_25:
  int v21 = -1;
LABEL_26:
  uint64_t v22 = (v19 + v17 + *(_DWORD *)(v20 + 24 * (v21 + a4) + 16));

  return sub_920D68(v22);
}

uint64_t sub_92084C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7 = sub_369B60(a1, *(void *)a2, 0);
  uint64_t v8 = (unsigned __int16 *)&v7[-*(int *)v7];
  unsigned int v9 = *v8;
  if (v9 <= 4)
  {
    uint64_t v13 = 0;
    uint64_t v12 = (int *)(4 * *(unsigned int *)(a2 + 4) + 4 + dword_4[*(unsigned int *)(a2 + 4)]);
    unsigned int v14 = (unsigned __int16 *)((char *)v12
                             - *(int *)((char *)&dword_4[*(unsigned int *)(a2 + 4)]
                                      + dword_4[*(unsigned int *)(a2 + 4)]));
    unsigned int v15 = *v14;
    if (v15 >= 0x15) {
      goto LABEL_9;
    }
    goto LABEL_12;
  }
  uint64_t v10 = v8[2];
  if (v8[2]) {
    v10 += (uint64_t)&v7[*(unsigned int *)&v7[v10]];
  }
  uint64_t v11 = v10 + 4 * *(unsigned int *)(a2 + 4);
  uint64_t v12 = (int *)(v11 + 4 + *(unsigned int *)(v11 + 4));
  if (v9 < 0xD || !v8[6])
  {
    uint64_t v13 = 0;
    unsigned int v14 = (unsigned __int16 *)((char *)v12 - *v12);
    unsigned int v15 = *v14;
    if (v15 >= 0x15) {
      goto LABEL_9;
    }
LABEL_12:
    int v17 = *(_DWORD *)&v13[((8 * a3 + 0x7FFFFFFF8) & 0x7FFFFFFF8) + 8];
    if (v15 >= 0xB)
    {
      uint64_t v18 = v14[5];
      if (v14[5]) {
        goto LABEL_14;
      }
    }
    goto LABEL_19;
  }
  uint64_t v13 = &v7[v8[6] + *(unsigned int *)&v7[v8[6]]];
  unsigned int v14 = (unsigned __int16 *)((char *)v12 - *v12);
  unsigned int v15 = *v14;
  if (v15 < 0x15) {
    goto LABEL_12;
  }
LABEL_9:
  if (v14[10]) {
    int v16 = *(int *)((char *)v12 + v14[10]);
  }
  else {
    int v16 = -1;
  }
  int v17 = *(_DWORD *)&v13[8 * (v16 + a3) + 8];
  uint64_t v18 = v14[5];
  if (v14[5])
  {
LABEL_14:
    int v19 = *(int *)((char *)v12 + v18);
    if (v9 < 7) {
      goto LABEL_15;
    }
    goto LABEL_20;
  }
LABEL_19:
  int v19 = 0x7FFFFFFF;
  if (v9 < 7)
  {
LABEL_15:
    uint64_t v20 = 0;
    if (v15 < 0xD) {
      goto LABEL_25;
    }
    goto LABEL_23;
  }
LABEL_20:
  uint64_t v20 = v8[3];
  if (v20) {
    v20 += (uint64_t)&v7[*(unsigned int *)&v7[v20]];
  }
  if (v15 < 0xD) {
    goto LABEL_25;
  }
LABEL_23:
  if (v14[6])
  {
    int v21 = *(int *)((char *)v12 + v14[6]);
    goto LABEL_26;
  }
LABEL_25:
  int v21 = -1;
LABEL_26:
  uint64_t v22 = (v19 + v17 + *(_DWORD *)(v20 + 24 * (v21 + a4) + 12));

  return sub_920D68(v22);
}

uint64_t sub_920A00(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8 = sub_369B60(a1, a2, 0);
  unsigned int v9 = (int *)v8;
  uint64_t v10 = &v8[-*(int *)v8];
  if (*(unsigned __int16 *)v10 < 5u)
  {
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = *((unsigned __int16 *)v10 + 2);
    if (v11) {
      v11 += (uint64_t)&v8[*(unsigned int *)&v8[v11]];
    }
  }
  uint64_t v12 = (int *)(v11 + 4 * HIDWORD(a2) + 4 + *(unsigned int *)(v11 + 4 * HIDWORD(a2) + 4));
  uint64_t v13 = sub_90DB40(a1, a2, a3, a4, 0);
  unsigned int v14 = (unsigned __int16 *)((char *)v9 - *v9);
  if (*v14 < 0xDu)
  {
    uint64_t v15 = 0;
    int v16 = (unsigned __int16 *)((char *)v12 - *v12);
    unsigned int v17 = *v16;
    if (v17 >= 0x15) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v15 = v14[6];
    if (v15) {
      v15 += (uint64_t)v9 + *(unsigned int *)((char *)v9 + v15);
    }
    int v16 = (unsigned __int16 *)((char *)v12 - *v12);
    unsigned int v17 = *v16;
    if (v17 >= 0x15)
    {
LABEL_9:
      if (v16[10]) {
        int v18 = *(int *)((char *)v12 + v16[10]);
      }
      else {
        int v18 = -1;
      }
      int v19 = *(_DWORD *)(v15 + 8 * (v18 + a3) + 8);
      uint64_t v20 = v16[5];
      if (!v20) {
        goto LABEL_17;
      }
LABEL_14:
      int v21 = *(int *)((char *)v12 + v20);
      goto LABEL_18;
    }
  }
  int v19 = *(_DWORD *)(v15 + ((8 * a3 + 0x7FFFFFFF8) & 0x7FFFFFFF8) + 8);
  if (v17 >= 0xB)
  {
    uint64_t v20 = v16[5];
    if (v20) {
      goto LABEL_14;
    }
  }
LABEL_17:
  int v21 = 0x7FFFFFFF;
LABEL_18:
  int v22 = *(_DWORD *)(v13 + 12);
  int v23 = v22 / 10;
  int v24 = v22 % 10;
  if (v22 < 0) {
    char v25 = -5;
  }
  else {
    char v25 = 5;
  }

  return sub_920D68(v21 + v19 + v23 + (((103 * (char)(v25 + v24)) >> 15) & 1)
                                    + ((103 * (char)(v25 + v24)) >> 10));
}

uint64_t sub_920BB4(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8 = sub_369B60(a1, a2, 0);
  unsigned int v9 = (int *)v8;
  uint64_t v10 = &v8[-*(int *)v8];
  if (*(unsigned __int16 *)v10 < 5u)
  {
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = *((unsigned __int16 *)v10 + 2);
    if (v11) {
      v11 += (uint64_t)&v8[*(unsigned int *)&v8[v11]];
    }
  }
  uint64_t v12 = (int *)(v11 + 4 * HIDWORD(a2) + 4 + *(unsigned int *)(v11 + 4 * HIDWORD(a2) + 4));
  uint64_t v13 = sub_90DB40(a1, a2, a3, a4, 0);
  unsigned int v14 = (unsigned __int16 *)((char *)v9 - *v9);
  if (*v14 < 0xDu)
  {
    uint64_t v15 = 0;
    int v16 = (unsigned __int16 *)((char *)v12 - *v12);
    unsigned int v17 = *v16;
    if (v17 >= 0x15) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v15 = v14[6];
    if (v15) {
      v15 += (uint64_t)v9 + *(unsigned int *)((char *)v9 + v15);
    }
    int v16 = (unsigned __int16 *)((char *)v12 - *v12);
    unsigned int v17 = *v16;
    if (v17 >= 0x15)
    {
LABEL_9:
      if (v16[10]) {
        int v18 = *(int *)((char *)v12 + v16[10]);
      }
      else {
        int v18 = -1;
      }
      int v19 = *(_DWORD *)(v15 + 8 * (v18 + a3) + 8);
      uint64_t v20 = v16[5];
      if (!v20) {
        goto LABEL_17;
      }
LABEL_14:
      int v21 = *(int *)((char *)v12 + v20);
      goto LABEL_18;
    }
  }
  int v19 = *(_DWORD *)(v15 + ((8 * a3 + 0x7FFFFFFF8) & 0x7FFFFFFF8) + 8);
  if (v17 >= 0xB)
  {
    uint64_t v20 = v16[5];
    if (v20) {
      goto LABEL_14;
    }
  }
LABEL_17:
  int v21 = 0x7FFFFFFF;
LABEL_18:
  int v22 = *(_DWORD *)(v13 + 8);
  int v23 = v22 / 10;
  int v24 = v22 % 10;
  if (v22 < 0) {
    char v25 = -5;
  }
  else {
    char v25 = 5;
  }

  return sub_920D68(v21 + v19 + v23 + (((103 * (char)(v25 + v24)) >> 15) & 1)
                                    + ((103 * (char)(v25 + v24)) >> 10));
}

uint64_t sub_920D68(uint64_t result)
{
  unsigned int v1 = result;
  if ((result & 0x80000000) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v8, v1);
    uint64_t v3 = std::string::insert(&v8, 0, "narrowing ");
    long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v9.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    int v5 = std::string::append(&v9, " failed");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    std::string::size_type v11 = v5->__r_.__value_.__r.__words[2];
    long long v10 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    uint64_t v7 = (void *)sub_2F404((uint64_t)exception, &v10);
  }
  return result;
}

void sub_920E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

double sub_920EB8()
{
  byte_25D330F = 1;
  word_25D32F8 = 65;
  byte_25D3327 = 1;
  word_25D3310 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25D33B8 = 0u;
  *(_OWORD *)&qword_25D33C8 = 0u;
  dword_25D33D8 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25D33B8, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25D33B8, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25D33B8, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25D33B8, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25D333F = 8;
  strcpy((char *)&qword_25D3328, "any_mode");
  byte_25D3357 = 7;
  strcpy((char *)&dword_25D3340, "cycling");
  byte_25D336F = 7;
  strcpy((char *)&dword_25D3358, "driving");
  byte_25D3387 = 7;
  strcpy((char *)&dword_25D3370, "walking");
  qword_25D3390 = 0;
  qword_25D3398 = 0;
  qword_25D3388 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25D3388 = (uint64_t)v0;
  qword_25D3390 = (uint64_t)(v0 + 9);
  qword_25D3398 = (uint64_t)(v0 + 9);
  qword_25D33A0 = 0;
  qword_25D33A8 = 0;
  unk_25D33B0 = 0;
  unsigned int v1 = (char *)operator new(9uLL);
  qword_25D33A8 = (uint64_t)(v1 + 9);
  unk_25D33B0 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)unsigned int v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25D33A0 = (uint64_t)v1;
  return result;
}

void sub_921180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25D33C8) {
    sub_20AC40C((void **)qword_25D33C8);
  }
  uint64_t v37 = (void *)xmmword_25D33B8;
  *(void *)&xmmword_25D33B8 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_921220(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 8) = 0x27FFFFFFFLL;
  *(void *)a3 = &off_243B1C0;
  *(void *)(a3 + 16) = -1;
  long long v6 = (void *)(a3 + 16);
  *(void *)(a3 + 24) = -1;
  *(void *)(a3 + 32) = 0x8000000080000000;
  *(_WORD *)(a3 + 40) = -29536;
  *(void *)(a3 + 48) = 0xBFF0000000000000;
  *(_DWORD *)(a3 + 56) = 0xFFFFFF;
  *(_DWORD *)(a3 + 96) = -1;
  *(_DWORD *)(a3 + 104) = -1;
  *(_DWORD *)(a3 + 107) = -1;
  *(void *)(a3 + 144) = 0;
  char v7 = (_OWORD *)(a3 + 144);
  *(void *)(a3 + 111) = 0;
  *(void *)(a3 + 127) = 0;
  *(void *)(a3 + 119) = 0;
  *(_WORD *)(a3 + 135) = 0;
  *(void *)(a3 + 152) = 0;
  *(void *)(a3 + 160) = 0;
  *(unsigned char *)(a3 + 168) = 0;
  uint64_t v8 = sub_3755E4(*a1);
  uint64_t v9 = sub_375D1C(*a1);
  *(void *)(a3 + 8) = 0x100000000;
  if (*(_DWORD *)(a2 + 376) == 3)
  {
    unint64_t v10 = *(void *)a2;
    *long long v6 = *(void *)(a2 + 8);
    if (v10 <= 0xFFFFFFFEFFFFFFFFLL)
    {
      if (v10)
      {
        uint64_t v11 = v9;
        uint64_t v12 = (int *)sub_369F8C(v8, v10, 0, "trip");
        unint64_t v13 = *(void *)((char *)v12 + *(unsigned __int16 *)((char *)v12 - *v12 + 6));
        uint64_t v14 = **(void **)(v11 + 3896);
        if (v14 && sub_36F0F0(v14, v10, *(unsigned char *)(v11 + 3904)))
        {
          *(_DWORD *)(a3 + 36) = *((_DWORD *)sub_36F0F0(**(void **)(v11 + 3896), v10, *(unsigned char *)(v11 + 3904)) + 11);
          uint64_t v15 = sub_36F0F0(**(void **)(v11 + 3896), v10, *(unsigned char *)(v11 + 3904));
          int v16 = *((_DWORD *)v15 + 10);
          *(void *)(a3 + 24) = v15[4];
          *(_DWORD *)(a3 + 32) = v16;
          *(_WORD *)(a3 + 40) = *((_WORD *)sub_36F0F0(**(void **)(v11 + 3896), v10, *(unsigned char *)(v11 + 3904)) + 24);
          *(void *)(a3 + 48) = sub_36F0F0(**(void **)(v11 + 3896), v10, *(unsigned char *)(v11 + 3904))[7];
        }
        unsigned int v17 = (int *)sub_8DFD1C(v8, v13, 0, "line");
        int v18 = (unsigned __int16 *)((char *)v17 - *v17);
        if (*v18 >= 0x13u && (unsigned __int16 v19 = v18[9]) != 0) {
          int v20 = *(int *)((char *)v17 + v19);
        }
        else {
          int v20 = 0xFFFFFF;
        }
        *(_DWORD *)(a3 + 56) = v20;
        sub_966EE4(v8, v13, (uint64_t)(a1[1] + 121), (uint64_t)v24);
        sub_4F377C(a3 + 64, (uint64_t)v24);
        *(void *)(a3 + 104) = v29;
        int v21 = (void **)(a3 + 112);
        if (*(char *)(a3 + 135) < 0) {
          operator delete(*v21);
        }
        *(_OWORD *)int v21 = *(_OWORD *)__p;
        *(void *)(a3 + 128) = v31;
        HIBYTE(v31) = 0;
        LOBYTE(__p[0]) = 0;
        *(unsigned char *)(a3 + 136) = v32;
        if (*(char *)(a3 + 167) < 0)
        {
          operator delete(*(void **)(a3 + 144));
          int v22 = SHIBYTE(v31);
          *char v7 = v33;
          *(void *)(a3 + 160) = v34;
          HIBYTE(v34) = 0;
          LOBYTE(v33) = 0;
          *(unsigned char *)(a3 + 168) = v35;
          if (v22 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          *char v7 = v33;
          *(void *)(a3 + 160) = v34;
          HIBYTE(v34) = 0;
          LOBYTE(v33) = 0;
          *(unsigned char *)(a3 + 168) = v35;
        }
        if (v28 == 1)
        {
          int v23 = v25;
          if (!v25) {
            return;
          }
          unint64_t v26 = v25;
          goto LABEL_23;
        }
        if (!v28 && v27 < 0)
        {
          int v23 = v25;
LABEL_23:
          operator delete(v23);
        }
      }
    }
  }
}

void sub_921568(_Unwind_Exception *a1)
{
  sub_92161C(v1);
  _Unwind_Resume(a1);
}

void sub_92157C(_Unwind_Exception *a1)
{
  sub_92161C(v1);
  _Unwind_Resume(a1);
}

void sub_921590(_Unwind_Exception *a1)
{
  sub_92161C(v1);
  _Unwind_Resume(a1);
}

void sub_9215A4(_Unwind_Exception *a1)
{
  sub_92161C(v1);
  _Unwind_Resume(a1);
}

void sub_9215B8(_Unwind_Exception *a1)
{
  sub_92161C(v1);
  _Unwind_Resume(a1);
}

void sub_9215CC(_Unwind_Exception *a1)
{
  sub_92161C(v1);
  _Unwind_Resume(a1);
}

void sub_9215E0(_Unwind_Exception *a1)
{
  sub_92161C(v1);
  _Unwind_Resume(a1);
}

void sub_9215F4(_Unwind_Exception *a1)
{
  sub_92161C(v1);
  _Unwind_Resume(a1);
}

void sub_921608(_Unwind_Exception *a1)
{
  sub_92161C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_92161C(uint64_t a1)
{
  *(void *)a1 = &off_243B1C0;
  if (*(char *)(a1 + 167) < 0)
  {
    operator delete(*(void **)(a1 + 144));
    if ((*(char *)(a1 + 135) & 0x80000000) == 0)
    {
LABEL_3:
      int v2 = *(_DWORD *)(a1 + 96);
      if (v2 != 1) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 135) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 112));
  int v2 = *(_DWORD *)(a1 + 96);
  if (v2 != 1)
  {
LABEL_4:
    if (v2 || (*(char *)(a1 + 95) & 0x80000000) == 0) {
      return a1;
    }
    operator delete(*(void **)(a1 + 72));
    return a1;
  }
LABEL_9:
  char v4 = *(void **)(a1 + 72);
  if (!v4) {
    return a1;
  }
  *(void *)(a1 + 80) = v4;
  operator delete(v4);
  return a1;
}

double sub_9216E0()
{
  byte_25D33F7 = 1;
  word_25D33E0 = 65;
  byte_25D340F = 1;
  word_25D33F8 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25D34A0 = 0u;
  *(_OWORD *)&qword_25D34B0 = 0u;
  dword_25D34C0 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25D34A0, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25D34A0, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25D34A0, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25D34A0, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25D3427 = 8;
  strcpy((char *)&qword_25D3410, "any_mode");
  byte_25D343F = 7;
  strcpy((char *)&dword_25D3428, "cycling");
  byte_25D3457 = 7;
  strcpy((char *)&dword_25D3440, "driving");
  byte_25D346F = 7;
  strcpy((char *)&dword_25D3458, "walking");
  qword_25D3478 = 0;
  qword_25D3480 = 0;
  qword_25D3470 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25D3470 = (uint64_t)v0;
  qword_25D3478 = (uint64_t)(v0 + 9);
  qword_25D3480 = (uint64_t)(v0 + 9);
  qword_25D3488 = 0;
  qword_25D3490 = 0;
  unk_25D3498 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25D3490 = (uint64_t)(v1 + 9);
  unk_25D3498 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25D3488 = (uint64_t)v1;
  return result;
}

void sub_9219A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25D34B0) {
    sub_20AC450((void **)qword_25D34B0);
  }
  uint64_t v37 = (void *)xmmword_25D34A0;
  *(void *)&xmmword_25D34A0 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

BOOL sub_921A48(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  if (*(int *)(a1 + 516) > 18000) {
    return 0;
  }
  unsigned int v6 = *a2;
  unsigned int v5 = a2[1];
  BOOL v7 = *a2 == -1 && v5 == -1;
  if (v7 || ((v9 = *a3, unsigned int v8 = a3[1], *a3 == -1) ? (v10 = v8 == -1) : (v10 = 0), v10))
  {
    uint64_t v26 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_17;
  }
  long double v11 = exp(3.14159265 - (double)v5 * 6.28318531 / 4294967300.0);
  long double v12 = atan((v11 - 1.0 / v11) * 0.5) * 57.2957795 * 0.0174532925;
  v13.i64[0] = v6;
  v13.i64[1] = v9;
  long double v14 = exp(3.14159265 - (double)v8 * 6.28318531 / 4294967300.0);
  long double v15 = atan((v14 - 1.0 / v14) * 0.5) * 57.2957795 * 0.0174532925;
  int64x2_t v16 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v13), (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL)), (float64x2_t)vdupq_n_s64(0xC066800000000000)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
  double v32 = vsubq_f64((float64x2_t)v16, (float64x2_t)vdupq_laneq_s64(v16, 1)).f64[0];
  long double v17 = sin((v12 - v15) * 0.5);
  long double v18 = v17 * v17;
  double v19 = cos(v12);
  long double v20 = v19 * cos(v15);
  long double v21 = sin(0.5 * v32);
  long double v22 = atan2(sqrt(v21 * v21 * v20 + v18), sqrt(1.0 - (v21 * v21 * v20 + v18)));
  double v23 = (v22 + v22) * 6372797.56 * 100.0;
  if (v23 >= 0.0)
  {
    double v24 = v23;
    if (v23 >= 4.50359963e15) {
      goto LABEL_28;
    }
    uint64_t v25 = (uint64_t)(v23 + v23) + 1;
  }
  else
  {
    double v24 = v23;
    if (v23 <= -4.50359963e15) {
      goto LABEL_28;
    }
    uint64_t v25 = (uint64_t)(v23 + v23);
    if (v25 >= 1) {
      --v25;
    }
  }
  double v24 = (double)(v25 >> 1);
LABEL_28:
  if (v24 >= 9.22337204e18)
  {
    uint64_t v26 = 0x7FFFFFFFFFFFFFFELL;
    goto LABEL_17;
  }
  if (v23 >= 0.0)
  {
    if (v23 < 4.50359963e15)
    {
      uint64_t v31 = (uint64_t)(v23 + v23) + 1;
LABEL_37:
      double v23 = (double)(v31 >> 1);
    }
  }
  else if (v23 > -4.50359963e15)
  {
    uint64_t v31 = (uint64_t)(v23 + v23);
    if (v31 >= 1) {
      --v31;
    }
    goto LABEL_37;
  }
  uint64_t v26 = (uint64_t)v23;
LABEL_17:
  char v27 = (void *)sub_3AEFFC(a1);
  int v28 = (void *)sub_46CAA4(a1);
  if (v26 < 5001) {
    return 1;
  }
  uint64_t v29 = *v27 + *v28;
  return *(void *)(a1 + 504) - v29 < 5001 || v26 < v29;
}

void sub_921D4C()
{
  unk_25D34DF = 16641;
  word_25D34C8 = 65;
  byte_25D34F7 = 1;
  byte_25D34E1 = 0;
}

uint64_t sub_921D74(uint64_t result)
{
  if (!*(unsigned char *)(result + 704))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  return result;
}

uint64_t sub_921DD0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = sub_9DCD3C(a1, a2, a3);
  *(void *)uint64_t v4 = &off_243B1F0;
  *(_WORD *)(v4 + 512) = 0;
  *(_DWORD *)(v4 + 516) = 0;
  uint64_t v5 = *(void *)(v4 + 72);
  if (*(unsigned char *)(v5 + 80)) {
    *(_DWORD *)(a1 + 516) = *(_DWORD *)(v5 + 72);
  }
  unint64_t v6 = *(void *)(v5 + 56);
  if (v6 != -1)
  {
    *(unsigned char *)(a1 + 512) = sub_97C680(*(uint64_t **)(a1 + 80), v6);
    BOOL v7 = *(void **)(a1 + 80);
    unint64_t v8 = *(void *)(*(void *)(a1 + 72) + 56);
    if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v7[1] - *v7) >> 3) <= v8) {
      sub_66748();
    }
    uint64_t v9 = sub_9DCAC4(a1, *v7 + 168 * v8);
    if (v9) {
      *(unsigned char *)(a1 + 513) = *(unsigned char *)(v9 + 104);
    }
  }
  return a1;
}

void sub_921E9C(_Unwind_Exception *a1)
{
  sub_921ED8(v1);
  _Unwind_Resume(a1);
}

void sub_921EB0(_Unwind_Exception *a1)
{
  sub_921ED8(v1);
  _Unwind_Resume(a1);
}

void sub_921EC4(_Unwind_Exception *a1)
{
  sub_921ED8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_921ED8(uint64_t a1)
{
  *(void *)a1 = off_243C658;
  uint64_t v2 = *(void *)(a1 + 488);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 496);
    uint64_t v4 = *(void **)(a1 + 488);
    if (v3 == v2)
    {
LABEL_11:
      *(void *)(a1 + 496) = v2;
      operator delete(v4);
      goto LABEL_12;
    }
    while (1)
    {
      if (*(char *)(v3 - 1) < 0)
      {
        operator delete(*(void **)(v3 - 24));
        if (*(char *)(v3 - 25) < 0) {
LABEL_9:
        }
          operator delete(*(void **)(v3 - 48));
      }
      else if (*(char *)(v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 48;
      if (v3 == v2)
      {
        uint64_t v4 = *(void **)(a1 + 488);
        goto LABEL_11;
      }
    }
  }
LABEL_12:
  sub_5F84D4(a1 + 464);
  uint64_t v5 = *(void *)(a1 + 440);
  if (!v5) {
    goto LABEL_23;
  }
  uint64_t v6 = *(void *)(a1 + 448);
  BOOL v7 = *(void **)(a1 + 440);
  if (v6 != v5)
  {
    while (1)
    {
      if (*(char *)(v6 - 1) < 0)
      {
        operator delete(*(void **)(v6 - 24));
        if (*(char *)(v6 - 33) < 0) {
LABEL_20:
        }
          operator delete(*(void **)(v6 - 56));
      }
      else if (*(char *)(v6 - 33) < 0)
      {
        goto LABEL_20;
      }
      v6 -= 56;
      if (v6 == v5)
      {
        BOOL v7 = *(void **)(a1 + 440);
        break;
      }
    }
  }
  *(void *)(a1 + 448) = v5;
  operator delete(v7);
LABEL_23:
  uint64_t v8 = *(void *)(a1 + 416);
  if (!v8) {
    goto LABEL_34;
  }
  uint64_t v9 = *(void *)(a1 + 424);
  BOOL v10 = *(void **)(a1 + 416);
  if (v9 != v8)
  {
    while (1)
    {
      if (*(char *)(v9 - 1) < 0)
      {
        operator delete(*(void **)(v9 - 24));
        if (*(char *)(v9 - 33) < 0) {
LABEL_31:
        }
          operator delete(*(void **)(v9 - 56));
      }
      else if (*(char *)(v9 - 33) < 0)
      {
        goto LABEL_31;
      }
      v9 -= 56;
      if (v9 == v8)
      {
        BOOL v10 = *(void **)(a1 + 416);
        break;
      }
    }
  }
  *(void *)(a1 + 424) = v8;
  operator delete(v10);
LABEL_34:
  if ((*(char *)(a1 + 415) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 383) & 0x80000000) == 0) {
      goto LABEL_36;
    }
LABEL_50:
    operator delete(*(void **)(a1 + 360));
    long double v11 = *(void ***)(a1 + 336);
    if (!v11)
    {
LABEL_37:
      long double v12 = *(void ***)(a1 + 312);
      if (v12) {
        goto LABEL_61;
      }
      goto LABEL_38;
    }
    goto LABEL_51;
  }
  operator delete(*(void **)(a1 + 392));
  if (*(char *)(a1 + 383) < 0) {
    goto LABEL_50;
  }
LABEL_36:
  long double v11 = *(void ***)(a1 + 336);
  if (!v11) {
    goto LABEL_37;
  }
LABEL_51:
  double v19 = *(void ***)(a1 + 344);
  if (v19 == v11)
  {
    *(void *)(a1 + 344) = v11;
    operator delete(v11);
    long double v12 = *(void ***)(a1 + 312);
    if (v12) {
      goto LABEL_61;
    }
    goto LABEL_38;
  }
  do
  {
    if (*((char *)v19 - 1) < 0)
    {
      operator delete(*(v19 - 3));
      if ((*((char *)v19 - 33) & 0x80000000) == 0) {
        goto LABEL_54;
      }
    }
    else if ((*((char *)v19 - 33) & 0x80000000) == 0)
    {
      goto LABEL_54;
    }
    operator delete(*(v19 - 7));
LABEL_54:
    v19 -= 7;
  }
  while (v19 != v11);
  long double v20 = *(void **)(a1 + 336);
  *(void *)(a1 + 344) = v11;
  operator delete(v20);
  long double v12 = *(void ***)(a1 + 312);
  if (!v12)
  {
LABEL_38:
    uint64x2_t v13 = *(void ***)(a1 + 224);
    if (v13) {
      goto LABEL_71;
    }
    goto LABEL_39;
  }
LABEL_61:
  long double v21 = *(void ***)(a1 + 320);
  if (v21 == v12)
  {
    *(void *)(a1 + 320) = v12;
    operator delete(v12);
    uint64x2_t v13 = *(void ***)(a1 + 224);
    if (v13) {
      goto LABEL_71;
    }
LABEL_39:
    if (*(char *)(a1 + 215) < 0) {
      goto LABEL_73;
    }
LABEL_40:
    long double v14 = *(void ***)(a1 + 168);
    if (v14) {
      goto LABEL_74;
    }
    goto LABEL_41;
  }
  while (2)
  {
    if (*((char *)v21 - 1) < 0)
    {
      operator delete(*(v21 - 3));
      if (*((char *)v21 - 33) < 0) {
        goto LABEL_69;
      }
    }
    else if (*((char *)v21 - 33) < 0)
    {
LABEL_69:
      operator delete(*(v21 - 7));
    }
    v21 -= 7;
    if (v21 != v12) {
      continue;
    }
    break;
  }
  long double v22 = *(void **)(a1 + 312);
  *(void *)(a1 + 320) = v12;
  operator delete(v22);
  uint64x2_t v13 = *(void ***)(a1 + 224);
  if (!v13) {
    goto LABEL_39;
  }
LABEL_71:
  double v23 = *(void ***)(a1 + 232);
  if (v23 == v13)
  {
    *(void *)(a1 + 232) = v13;
    operator delete(v13);
    if (*(char *)(a1 + 215) < 0) {
      goto LABEL_73;
    }
    goto LABEL_40;
  }
  while (2)
  {
    if (*((char *)v23 - 1) < 0)
    {
      operator delete(*(v23 - 3));
      if (*((char *)v23 - 33) < 0) {
        goto LABEL_83;
      }
    }
    else if (*((char *)v23 - 33) < 0)
    {
LABEL_83:
      operator delete(*(v23 - 7));
    }
    v23 -= 7;
    if (v23 != v13) {
      continue;
    }
    break;
  }
  uint64_t v25 = *(void **)(a1 + 224);
  *(void *)(a1 + 232) = v13;
  operator delete(v25);
  if ((*(char *)(a1 + 215) & 0x80000000) == 0) {
    goto LABEL_40;
  }
LABEL_73:
  operator delete(*(void **)(a1 + 192));
  long double v14 = *(void ***)(a1 + 168);
  if (!v14)
  {
LABEL_41:
    if (*(char *)(a1 + 159) < 0) {
      goto LABEL_76;
    }
    goto LABEL_42;
  }
LABEL_74:
  double v24 = *(void ***)(a1 + 176);
  if (v24 == v14)
  {
    *(void *)(a1 + 176) = v14;
    operator delete(v14);
    if (*(char *)(a1 + 159) < 0) {
      goto LABEL_76;
    }
LABEL_42:
    long double v15 = *(void **)(a1 + 48);
    if (v15)
    {
LABEL_43:
      *(void *)(a1 + 56) = v15;
      operator delete(v15);
    }
  }
  else
  {
    do
    {
      if (*((char *)v24 - 1) < 0) {
        operator delete(*(v24 - 3));
      }
      v24 -= 3;
    }
    while (v24 != v14);
    uint64_t v26 = *(void **)(a1 + 168);
    *(void *)(a1 + 176) = v14;
    operator delete(v26);
    if ((*(char *)(a1 + 159) & 0x80000000) == 0) {
      goto LABEL_42;
    }
LABEL_76:
    operator delete(*(void **)(a1 + 136));
    long double v15 = *(void **)(a1 + 48);
    if (v15) {
      goto LABEL_43;
    }
  }
  int64x2_t v16 = *(void **)(a1 + 24);
  if (v16)
  {
    *(void *)(a1 + 32) = v16;
    operator delete(v16);
  }
  long double v17 = *(std::__shared_weak_count **)(a1 + 16);
  if (v17) {
    std::__shared_weak_count::__release_weak(v17);
  }
  return a1;
}

uint64_t sub_9222BC(uint64_t a1)
{
  return (10 * (*(_DWORD *)(sub_9DC3CC(a1) + 40) - *(_DWORD *)(*(void *)(a1 + 72) + 40)));
}

BOOL sub_9222F8(uint64_t a1)
{
  uint64_t v1 = *(_DWORD ***)(a1 + 48);
  return v1 != *(_DWORD ***)(a1 + 56) && **v1 == 9;
}

void sub_922320(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_9DB8E0(a1, a2);
  uint64_t v4 = *(void *)(*(void *)(a1 + 72) + 56);
  if (v4 == -1)
  {
    v10[0] = 0;
    v10[1] = 0;
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v5 = (uint64_t *)sub_9DCD2C(a1, **(void **)(a1 + 80) + 168 * v4);
    sub_994EAC(v5, (uint64_t)v10);
  }
  char v9 = 17;
  strcpy(__p, "{WalkDestination}");
  long double v12 = __p;
  uint64_t v6 = sub_7AE4E0(a2, (uint64_t)__p, (uint64_t)&unk_20F06E0, (long long **)&v12);
  BOOL v7 = v6 + 40;
  if ((char)v6[63] < 0) {
    operator delete(*(void **)v7);
  }
  *(_OWORD *)BOOL v7 = *(_OWORD *)v10;
  *((void *)v7 + 2) = v11;
  HIBYTE(v11) = 0;
  LOBYTE(v10[0]) = 0;
  if (v9 < 0)
  {
    operator delete(*(void **)__p);
    if (SHIBYTE(v11) < 0) {
      operator delete(v10[0]);
    }
  }
}

void sub_92242C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      sub_50828(v20);
      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  sub_50828(v20);
  _Unwind_Resume(a1);
}

void sub_922478(_Unwind_Exception *a1)
{
  sub_50828(v1);
  _Unwind_Resume(a1);
}

void sub_92248C(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 72) + 56);
  if (v3 == -1)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    uint64_t v4 = (uint64_t *)sub_9DCD2C(a1, **(void **)(a1 + 80) + 168 * v3);
    sub_994EAC(v4, (uint64_t)a2);
  }
}

void sub_9224F8(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  sub_922B20((_OWORD *)a4);
  unsigned int v8 = *(_DWORD *)(a1 + 516);
  if (a2 == 2 && !a3 && v8 != 3)
  {
    HIBYTE(__p[2]) = 21;
    strcpy((char *)__p, "WalkList_WalkDistance");
    sub_922B88((char *)&__dst, (long long *)__p);
    sub_922C20(a4, (long long *)&__dst);
    sub_927A08((uint64_t)&__dst);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
LABEL_6:
    __dst.__r_.__value_.__r.__words[0] = *(void *)(*(void *)(a1 + 72) + 1888);
    LOBYTE(__p[0]) = 1;
    sub_5F6090((uint64_t *)(a4 + 80), (uint64_t)&qword_25D3818, (uint64_t *)&__dst, (char *)__p);
    return;
  }
  if (a2 == 2 && a3 == 1 && v8 != 3)
  {
    int v9 = *(_DWORD *)(sub_9DC3CC(a1) + 40) - *(_DWORD *)(*(void *)(a1 + 72) + 40);
    if (v9 > 59)
    {
      HIBYTE(__p[2]) = 17;
      strcpy((char *)__p, "WalkList_WalkTime");
      sub_922B88((char *)&__dst, (long long *)__p);
      int v10 = 10 * v9;
      sub_922C20(a4, (long long *)&__dst);
      sub_927A08((uint64_t)&__dst);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      __p[0] = operator new(0x28uLL);
      *(_OWORD *)&__p[1] = xmmword_20B9280;
      strcpy((char *)__p[0], "WalkList_WalkTimeLessThanOneMinute");
      sub_922B88((char *)&__dst, (long long *)__p);
      sub_922C20(a4, (long long *)&__dst);
      sub_927A08((uint64_t)&__dst);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      int v10 = 600;
    }
    sub_5F657C((uint64_t *)(a4 + 80), (uint64_t)&qword_25D3830, v10);
    return;
  }
  if (a2 != 1 || a3)
  {
    if (a2 == 1 && a3 == 1 && v8 != 3)
    {
      if (v8 >= 2)
      {
        if (v8 == 2)
        {
          sub_5E5C(__p, "WALK_DISTANCE_AWAY");
          sub_922B88((char *)&__dst, (long long *)__p);
          sub_922C20(a4, (long long *)&__dst);
          sub_927A08((uint64_t)&__dst);
          if (SHIBYTE(__p[2]) < 0) {
            operator delete(__p[0]);
          }
          goto LABEL_6;
        }
      }
      else
      {
        int v12 = *(_DWORD *)(sub_9DC3CC(a1) + 40) - *(_DWORD *)(*(void *)(a1 + 72) + 40);
        if (v12 > 59)
        {
          sub_5E5C(__p, "WALK_DISTANCE_ABOUT_TIME");
          sub_922B88((char *)&__dst, (long long *)__p);
          int v13 = 10 * v12;
          sub_922C20(a4, (long long *)&__dst);
          sub_927A08((uint64_t)&__dst);
          if (SHIBYTE(__p[2]) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          sub_5E5C(__p, "WALK_DISTANCE_LESS_THAN_ONE_MINUTE");
          sub_922B88((char *)&__dst, (long long *)__p);
          sub_922C20(a4, (long long *)&__dst);
          sub_927A08((uint64_t)&__dst);
          if (SHIBYTE(__p[2]) < 0) {
            operator delete(__p[0]);
          }
          int v13 = 600;
        }
        __dst.__r_.__value_.__r.__words[0] = *(void *)(*(void *)(a1 + 72) + 1888);
        LOBYTE(__p[0]) = 1;
        sub_5F6090((uint64_t *)(a4 + 80), (uint64_t)&qword_25D3818, (uint64_t *)&__dst, (char *)__p);
        sub_5F657C((uint64_t *)(a4 + 80), (uint64_t)&qword_25D3830, v13);
      }
    }
  }
  else
  {
    uint64_t v11 = *(_DWORD ***)(a1 + 48);
    if (v11 == *(_DWORD ***)(a1 + 56) || **v11 != 9)
    {
      memset(__p, 0, sizeof(__p));
      if (v8)
      {
        if (v8 == 2)
        {
          sub_9DBEFC(*(unsigned __int8 *)(a1 + 512), (uint64_t)&__dst);
          long double v14 = std::string::insert(&__dst, 0, "WALK_TO_NEAR");
        }
        else
        {
          if (v8 != 1) {
            return;
          }
          sub_9DBEFC(*(unsigned __int8 *)(a1 + 512), (uint64_t)&__dst);
          long double v14 = std::string::insert(&__dst, 0, "WALK_TO_FAR");
        }
      }
      else
      {
        sub_9DBEFC(*(unsigned __int8 *)(a1 + 512), (uint64_t)&__dst);
        long double v14 = std::string::insert(&__dst, 0, "WALK_TO_NORMAL");
      }
      long double v15 = (void *)v14->__r_.__value_.__r.__words[0];
      v21[0] = v14->__r_.__value_.__l.__size_;
      *(void *)((char *)v21 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
      unsigned int v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v21 + 7);
      __p[0] = v15;
      __p[1] = (void *)v21[0];
      HIBYTE(__p[2]) = v16;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      char v17 = v16;
      unint64_t v18 = (unint64_t)__p[1];
      if ((v16 & 0x80u) == 0) {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        sub_922B88((char *)&__dst, (long long *)__p);
        sub_922C20(a4, (long long *)&__dst);
        sub_927A08((uint64_t)&__dst);
        char v17 = HIBYTE(__p[2]);
      }
      if (v17 < 0) {
        goto LABEL_53;
      }
    }
    else
    {
      if (v8 - 1 >= 3)
      {
        if (v8) {
          return;
        }
        sub_5E5C(__p, "WALK_TO_DESTINATION");
        sub_922B88((char *)&__dst, (long long *)__p);
      }
      else
      {
        HIBYTE(__p[2]) = 17;
        strcpy((char *)__p, "GO_TO_DESTINATION");
        sub_922B88((char *)&__dst, (long long *)__p);
      }
      sub_922C20(a4, (long long *)&__dst);
      sub_927A08((uint64_t)&__dst);
      if (SHIBYTE(__p[2]) < 0) {
LABEL_53:
      }
        operator delete(__p[0]);
    }
  }
}

void sub_922A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_927A08(v20);
  _Unwind_Resume(a1);
}

_OWORD *sub_922B20(_OWORD *a1)
{
  *(_OWORD *)((char *)a1 + 57) = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  sub_5F3B34((uint64_t)(a1 + 5));
  return a1;
}

void sub_922B5C(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 48);
  if (v3) {
    sub_20AC520(v1, v3);
  }
  sub_20AC494((uint64_t *)(v1 + 24), v1);
  _Unwind_Resume(a1);
}

char *sub_922B88(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v3;
  }
  __dst[72] = 0;
  *(_OWORD *)(__dst + 56) = 0u;
  *(_OWORD *)(__dst + 40) = 0u;
  *(_OWORD *)(__dst + 24) = 0u;
  sub_5F3B34((uint64_t)(__dst + 80));
  return __dst;
}

void sub_922BF4(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 48);
  if (v3) {
    sub_20AC520(v1, v3);
  }
  sub_20AC494((uint64_t *)(v1 + 24), v1);
  _Unwind_Resume(a1);
}

uint64_t sub_922C20(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  uint64_t v5 = (void **)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 24);
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    unsigned int v8 = *(void **)(a1 + 24);
    if (v7 != v6)
    {
      do
      {
        if (*(char *)(v7 - 9) < 0) {
          operator delete(*(void **)(v7 - 32));
        }
        v7 -= 32;
      }
      while (v7 != v6);
      unsigned int v8 = *v5;
    }
    *(void *)(a1 + 32) = v6;
    operator delete(v8);
    uint64_t *v5 = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  int v9 = (void **)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 48);
  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + 56);
    int v12 = *(void **)(a1 + 48);
    if (v11 != v10)
    {
      do
      {
        if (*(char *)(v11 - 1) < 0) {
          operator delete(*(void **)(v11 - 24));
        }
        v11 -= 24;
      }
      while (v11 != v10);
      int v12 = *v9;
    }
    *(void *)(a1 + 56) = v10;
    operator delete(v12);
    *int v9 = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
  }
  *(_OWORD *)(a1 + 48) = a2[3];
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *((void *)a2 + 6) = 0;
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
  sub_4D90B4(a1 + 80, (uint64_t)(a2 + 5));
  return a1;
}

uint64_t sub_922D70(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = sub_9DCD3C(a1, a2, a3);
  *(void *)uint64_t v4 = off_243B2A0;
  uint64_t v5 = v4 + 512;
  *(void *)(v4 + 512) = 0;
  *(void *)(v4 + 528) = 0;
  *(void *)(v4 + 520) = 0;
  *(_DWORD *)(v4 + 540) = 3;
  uint64_t v6 = *(void *)(v4 + 72);
  int v7 = *(_DWORD *)(v6 + 1008);
  *(_DWORD *)(v4 + 248) = v7;
  *(unsigned char *)(a1 + 536) = sub_9DDA8C(v4, v7, v6);
  unsigned int v8 = sub_9DB4DC((void *)a1, 3);
  uint64_t v9 = *(void *)(a1 + 72);
  if (!*(unsigned char *)(v9 + 792))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  if (*(_DWORD *)(v9 + 116) == 0x7FFFFFFF)
  {
    int v10 = 0;
    uint64_t v11 = (uint64_t *)(v9 + 768);
    int v12 = (int *)(v9 + 776);
    int v13 = (int *)(v9 + 780);
    unint64_t v14 = v8[10] | ((unint64_t)v8[10] << 32);
  }
  else
  {
    unint64_t v14 = *(void *)(v9 + 116);
    int v10 = *(_DWORD *)(v9 + 124);
    uint64_t v11 = (uint64_t *)(v9 + 128);
    int v12 = (int *)(v9 + 136);
    int v13 = (int *)(v9 + 140);
  }
  int v15 = *v13;
  uint64_t v16 = *v11;
  int v17 = *v12;
  *(void *)(a1 + 252) = v14;
  *(_DWORD *)(a1 + 260) = v10;
  *(void *)(a1 + 264) = v16;
  *(_DWORD *)(a1 + 272) = v17;
  *(_DWORD *)(a1 + 276) = v15;
  unint64_t v18 = sub_9DB4DC((void *)a1, 4);
  if (!*((unsigned char *)v18 + 792))
  {
    uint64_t v39 = __cxa_allocate_exception(8uLL);
    *uint64_t v39 = &off_2439078;
  }
  if (v18[22] == 0x7FFFFFFF)
  {
    int v19 = 0;
    uint64_t v20 = (uint64_t *)(v18 + 192);
    long double v21 = v18 + 194;
    long double v22 = v18 + 195;
    unint64_t v23 = v18[10] | ((unint64_t)v18[10] << 32);
  }
  else
  {
    unint64_t v23 = *((void *)v18 + 11);
    int v19 = v18[24];
    uint64_t v20 = (uint64_t *)(v18 + 25);
    long double v21 = v18 + 27;
    long double v22 = v18 + 28;
  }
  uint64_t v24 = *v20;
  int v25 = *v21;
  int v26 = *v22;
  *(void *)(a1 + 280) = v23;
  *(_DWORD *)(a1 + 288) = v19;
  *(void *)(a1 + 292) = v24;
  *(_DWORD *)(a1 + 300) = v25;
  *(_DWORD *)(a1 + 304) = v26;
  sub_9230D0(*(void *)(a1 + 72), (void **)&v40);
  char v27 = *(void **)v5;
  if (*(void *)v5)
  {
    *(void *)(a1 + 520) = v27;
    operator delete(v27);
    *(void *)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    *(void *)(v5 + 16) = 0;
  }
  *(_OWORD *)(a1 + 512) = v40;
  *(void *)(a1 + 528) = v41;
  *(unsigned char *)(a1 + 537) = sub_97C680(*(uint64_t **)(a1 + 80), *(void *)(*(void *)(a1 + 72) + 48));
  int v28 = *(void **)(a1 + 48);
  uint64_t v29 = *(void **)(a1 + 56);
  if (v28 == v29 || (unsigned int v30 = (_DWORD *)*v28, *(_DWORD *)*v28 == 4))
  {
LABEL_13:
    int v31 = 3;
  }
  else
  {
    long long v33 = *(uint64_t **)(a1 + 80);
    if (*((unsigned char *)v30 + 792) && *((unsigned char *)v30 + 157))
    {
      int v31 = 3;
      if (v28 + 1 == v29) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_97C680(*(uint64_t **)(a1 + 80), *((void *)v30 + 6));
      int v31 = sub_97C860();
      if (v28 + 1 == v29) {
        goto LABEL_14;
      }
    }
    for (uint64_t i = 1; &v28[i] != v29; ++i)
    {
      uint64_t v35 = v28[i];
      if (*(_DWORD *)v35 == 4) {
        break;
      }
      if (!*(unsigned char *)(v35 + 792) || !*(unsigned char *)(v35 + 157))
      {
        sub_97C680(v33, *(void *)(v35 + 48));
        int v36 = sub_97C860();
        if (i * 8)
        {
          if (v31 != v36 && v36 != 3) {
            goto LABEL_13;
          }
        }
        else
        {
          int v31 = v36;
        }
      }
    }
  }
LABEL_14:
  *(_DWORD *)(a1 + 540) = v31;
  return a1;
}

void sub_923090(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 520) = v4;
    operator delete(v4);
  }
  sub_921ED8(v1);
  _Unwind_Resume(a1);
}

void sub_9230D0(uint64_t a1@<X1>, void **a2@<X8>)
{
  if (!*(unsigned char *)(a1 + 792)
    || (uint64_t v4 = *(void *)(a1 + 440), v5 = *(void *)(a1 + 448), v4 == v5)
    || (int v6 = *(_DWORD *)(a1 + 116), v6 == 0x7FFFFFFF))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return;
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  int v7 = (char *)operator new(4uLL);
  *(_DWORD *)int v7 = v6;
  unsigned int v8 = v7 + 4;
  a2[1] = v7 + 4;
  a2[2] = v7 + 4;
  *a2 = v7;
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v5 - v4) >> 2)) >= 2) {
    uint64_t v9 = 2;
  }
  else {
    uint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((v5 - v4) >> 2);
  }
  if (!v9) {
    return;
  }
  int v10 = v7;
  int v11 = **(_DWORD **)(a1 + 440);
  int v12 = (char *)a2[2];
  if (v8 < v12)
  {
    *((_DWORD *)v7 + 1) = v11;
    int v13 = v7 + 8;
    goto LABEL_27;
  }
  unint64_t v14 = (char *)*a2;
  uint64_t v15 = v8 - (unsigned char *)*a2;
  uint64_t v16 = v15 >> 2;
  unint64_t v17 = (v15 >> 2) + 1;
  if (v17 >> 62) {
    goto LABEL_64;
  }
  uint64_t v18 = v12 - v14;
  if (v18 >> 1 > v17) {
    unint64_t v17 = v18 >> 1;
  }
  if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v19 = v17;
  }
  if (v19)
  {
    if (v19 >> 62) {
      goto LABEL_65;
    }
    uint64_t v20 = (char *)operator new(4 * v19);
    long double v21 = &v20[4 * v16];
    long double v22 = &v20[4 * v19];
    *(_DWORD *)long double v21 = v11;
    int v13 = v21 + 4;
    if (v8 == v14) {
      goto LABEL_25;
    }
    goto LABEL_23;
  }
  uint64_t v20 = 0;
  long double v21 = (char *)(4 * v16);
  long double v22 = 0;
  *(_DWORD *)(4 * v16) = v11;
  int v13 = (char *)(4 * v16 + 4);
  if (v8 != v14)
  {
LABEL_23:
    unint64_t v23 = v8 - 4 - v14;
    if (v23 < 0xBC) {
      goto LABEL_68;
    }
    if (&v20[v15 - 4 - (v23 & 0xFFFFFFFFFFFFFFFCLL)] > &v20[v15 - 4]) {
      goto LABEL_68;
    }
    if ((_DWORD *)((char *)v10 - (v23 & 0xFFFFFFFFFFFFFFFCLL)) > v10) {
      goto LABEL_68;
    }
    if ((unint64_t)(v8 - &v20[v15]) < 0x20) {
      goto LABEL_68;
    }
    uint64_t v35 = (v23 >> 2) + 1;
    uint64_t v36 = 4 * (v35 & 0x7FFFFFFFFFFFFFF8);
    v8 -= v36;
    v21 -= v36;
    uint64_t v37 = &v20[4 * v16 - 16];
    uint64_t v38 = (long long *)(v10 - 3);
    uint64_t v39 = v35 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v40 = *v38;
      *((_OWORD *)v37 - 1) = *(v38 - 1);
      *(_OWORD *)uint64_t v37 = v40;
      v37 -= 32;
      v38 -= 2;
      v39 -= 8;
    }
    while (v39);
    if (v35 != (v35 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_68:
      do
      {
        int v24 = *((_DWORD *)v8 - 1);
        v8 -= 4;
        *((_DWORD *)v21 - 1) = v24;
        v21 -= 4;
      }
      while (v8 != v14);
    }
  }
LABEL_25:
  *a2 = v21;
  a2[1] = v13;
  a2[2] = v22;
  if (v14) {
    operator delete(v14);
  }
LABEL_27:
  a2[1] = v13;
  if (v9 != 1)
  {
    int v25 = *(_DWORD *)(*(void *)(a1 + 440) + 28);
    unint64_t v26 = (unint64_t)a2[2];
    if ((unint64_t)v13 < v26)
    {
      *(_DWORD *)int v13 = v25;
      char v27 = v13 + 4;
LABEL_53:
      a2[1] = v27;
      return;
    }
    int v28 = (char *)*a2;
    uint64_t v29 = v13 - (unsigned char *)*a2;
    uint64_t v30 = v29 >> 2;
    unint64_t v31 = (v29 >> 2) + 1;
    if (!(v31 >> 62))
    {
      uint64_t v32 = v26 - (void)v28;
      if (v32 >> 1 > v31) {
        unint64_t v31 = v32 >> 1;
      }
      if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v33 = v31;
      }
      if (!v33)
      {
        uint64_t v34 = 0;
LABEL_47:
        uint64_t v41 = &v34[4 * v30];
        unsigned int v42 = &v34[4 * v33];
        *uint64_t v41 = v25;
        char v27 = v41 + 1;
        if (v13 != v28)
        {
          unint64_t v43 = v13 - 4 - v28;
          if (v43 >= 0xBC)
          {
            if (&v34[v29 - 4 - (v43 & 0xFFFFFFFFFFFFFFFCLL)] > &v34[v29 - 4])
            {
              uint64_t v44 = v13;
            }
            else if (&v13[-(v43 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v13 - 4)
            {
              uint64_t v44 = v13;
            }
            else if ((unint64_t)(v13 - v34 - v29) >= 0x20)
            {
              uint64_t v46 = (v43 >> 2) + 1;
              uint64_t v47 = 4 * (v46 & 0x7FFFFFFFFFFFFFF8);
              uint64_t v44 = &v13[-v47];
              uint64_t v41 = (_DWORD *)((char *)v41 - v47);
              int v48 = &v34[4 * v30 - 16];
              uint64_t v49 = v13 - 16;
              uint64_t v50 = v46 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v51 = *(_OWORD *)v49;
                *(v48 - 1) = *((_OWORD *)v49 - 1);
                *int v48 = v51;
                v48 -= 2;
                v49 -= 32;
                v50 -= 8;
              }
              while (v50);
              if (v46 == (v46 & 0x7FFFFFFFFFFFFFF8)) {
                goto LABEL_51;
              }
            }
            else
            {
              uint64_t v44 = v13;
            }
          }
          else
          {
            uint64_t v44 = v13;
          }
          do
          {
            int v45 = *((_DWORD *)v44 - 1);
            v44 -= 4;
            *--uint64_t v41 = v45;
          }
          while (v44 != v28);
        }
LABEL_51:
        *a2 = v41;
        a2[1] = v27;
        a2[2] = v42;
        if (v28) {
          operator delete(v28);
        }
        goto LABEL_53;
      }
      if (!(v33 >> 62))
      {
        uint64_t v34 = operator new(4 * v33);
        goto LABEL_47;
      }
LABEL_65:
      sub_188D718();
    }
LABEL_64:
    sub_2E00();
  }
}

void sub_923474(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_9234A0(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 72);
  if (!*(unsigned char *)(v6 + 792)) {
    goto LABEL_12;
  }
  if (a2 == 2 && !a3)
  {
    v26.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&v26.__r_.__value_.__r.__words[1] = xmmword_20B8890;
    strcpy(v26.__r_.__value_.__l.__data_, "Board_List_System_Line_{Mode}");
    sub_922B88((char *)a4, (long long *)&v26);
    goto LABEL_53;
  }
  if (a3 == 1)
  {
    if (*(char *)(a1 + 159) < 0)
    {
      uint64_t v8 = *(unsigned __int8 *)(a1 + 215);
      if (*(void *)(a1 + 144)) {
        goto LABEL_36;
      }
    }
    else
    {
      uint64_t v8 = *(unsigned __int8 *)(a1 + 215);
      if (*(unsigned char *)(a1 + 159)) {
        goto LABEL_36;
      }
    }
    if ((v8 & 0x80) != 0)
    {
      if (*(void *)(a1 + 200)) {
        goto LABEL_36;
      }
    }
    else if (v8)
    {
      goto LABEL_36;
    }
    if (*(void *)(a1 + 168) != *(void *)(a1 + 176))
    {
LABEL_36:
      if ((v8 & 0x80) != 0)
      {
        if (!*(void *)(a1 + 200)) {
          goto LABEL_45;
        }
      }
      else if (!v8)
      {
LABEL_45:
        v26.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
        *(_OWORD *)&v26.__r_.__value_.__r.__words[1] = xmmword_20B9960;
        strcpy(v26.__r_.__value_.__l.__data_, "Board_Secondary_VehicleNumber_Direction");
        uint64_t v15 = *(void *)(a1 + 168);
        uint64_t v16 = *(void *)(a1 + 176);
        if (v15 != v16)
        {
          if (*(unsigned char *)(a1 + 536)) {
            unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v15) >> 3);
          }
          else {
            unint64_t v17 = 1;
          }
          std::string::append(&v26, "_Toward_MultipleHeadsign");
          char v18 = 5;
          if (v17 < 5) {
            char v18 = v17;
          }
          std::string::push_back(&v26, v18 | 0x30);
        }
LABEL_52:
        sub_922B88((char *)a4, (long long *)&v26);
        goto LABEL_53;
      }
      if (*(unsigned char *)(a1 + 536)
        && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 176) - *(void *)(a1 + 168)) >> 3) >= *(void *)(*(void *)(a1 + 112) + 32)
        && *(unsigned char *)(sub_921D74(v6 + 88) + 504)
        && sub_923AD4((void *)a1))
      {
        sub_5E5C(&v26, "Board_Secondary_Any_Direction");
        sub_922B88((char *)a4, (long long *)&v26);
        goto LABEL_53;
      }
      goto LABEL_45;
    }
    goto LABEL_12;
  }
  if (a2 != 2 || a3 != 2)
  {
    if (a2 != 1 || a3)
    {
      if (a2 != 1 || a3 != 2)
      {
        if (a2 != 2 || a3 != 3 || *(unsigned __int8 *)(*(void *)(a1 + 88) + 1177) < 8u) {
          goto LABEL_12;
        }
        sub_9DDF1C(a1, (_OWORD *)a4);
        return;
      }
      if (sub_9DD8A8(a1, v6))
      {
        sub_9DD8F0((char *)a1, *(void *)(a1 + 72), *(void *)(*(void *)(a1 + 72) + 56), (uint64_t)&v26);
        sub_922B88((char *)a4, (long long *)&v26);
        goto LABEL_53;
      }
      int v20 = *(unsigned __int8 *)(a1 + 161);
      if (v20 == 3)
      {
        sub_5E5C(&v26, "PickupCoordinateDriver");
        sub_922B88((char *)a4, (long long *)&v26);
      }
      else
      {
        if (v20 != 2) {
          goto LABEL_12;
        }
        sub_5E5C(&v26, "PickupContactAgency");
        sub_922B88((char *)a4, (long long *)&v26);
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 128) == 2)
      {
        sub_5E5C(&v26, "Board_System_Line_{Mode}");
        sub_922B88((char *)a4, (long long *)&v26);
        goto LABEL_53;
      }
      if (sub_923D68())
      {
        sub_5E5C(&v26, "Transfer_To_System_Line_{Mode}_nextBoardStation");
        if (sub_97C860() == 1) {
          std::string::append(&v26, "_station");
        }
        goto LABEL_52;
      }
      sub_5E5C(&v26, "Transfer_To_System_Line_{Mode}");
      sub_922B88((char *)a4, (long long *)&v26);
    }
LABEL_53:
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    return;
  }
  if (*(_DWORD *)(*(void *)(a1 + 88) + 1436))
  {
LABEL_12:
    *(_OWORD *)(a4 + 208) = 0u;
    *(_OWORD *)(a4 + 224) = 0u;
    *(_OWORD *)(a4 + 176) = 0u;
    *(_OWORD *)(a4 + 192) = 0u;
    *(_OWORD *)(a4 + 144) = 0u;
    *(_OWORD *)(a4 + 160) = 0u;
    *(_OWORD *)(a4 + 112) = 0u;
    *(_OWORD *)(a4 + 128) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 96) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)a4 = 0u;
    sub_922B20((_OWORD *)a4);
    return;
  }
  sub_922B20((_OWORD *)a4);
  int v9 = *(_DWORD *)(*(void *)(a1 + 72) + 1008);
  if ((v9 - 3) < 2)
  {
    std::string::assign((std::string *)a4, "Board_info_Ride_FutureTimestampList");
    uint64_t v19 = sub_9E086C(a1, *(void *)(a1 + 72));
    sub_5F6000(a4 + 80, &xmmword_25D38C0, (void *)(a1 + 512), v19, 0);
  }
  else if (v9 == 2)
  {
    std::string::assign((std::string *)a4, "Board_Info_Ride_HighFreq");
    uint64_t v21 = sub_921D74(*(void *)(a1 + 72) + 88) + 56;
    long double v22 = (int *)nullsub_1(v21);
    unint64_t v23 = (int *)sub_BBB4(v21);
    sub_5F3EF4((uint64_t *)(a4 + 80), (uint64_t)&qword_25D3878, v22, v23);
  }
  else if (v9 == 1)
  {
    LODWORD(v26.__r_.__value_.__l.__data_) = sub_923B50((void *)a1);
    uint64_t v10 = *(void *)(*(void *)(a1 + 72) + 56);
    uint64_t v11 = **(void **)(a1 + 80);
    int v25 = sub_923BFC(a1);
    int v12 = sub_923CB4(a1);
    int v13 = (const char *)(v11 + 168 * v10 + 136);
    if (sub_26710(v13, (int *)&v26, (const char *)v12, &v25)) {
      char v14 = 0;
    }
    else {
      char v14 = 5;
    }
    std::string::assign((std::string *)a4, "Board_Info_Ride_LowFreq");
    sub_5F5F70(a4 + 80, (long long *)&qword_25D3890, &v26, (uint64_t)v13, v14);
    sub_5F5F70(a4 + 80, (long long *)&qword_25D38A8, &v25, (uint64_t)v12, v14);
  }
  int v24 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
  sub_5F657C((uint64_t *)(a4 + 80), (uint64_t)&qword_25D3860, v24);
}

void sub_923A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_923AD4(void *a1)
{
  if (!*(unsigned char *)(a1[14] + 40)) {
    return 1;
  }
  uint64_t v2 = (void *)a1[10];
  unint64_t v3 = *(void *)(a1[9] + 56);
  if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v2[1] - *v2) >> 3) <= v3) {
    sub_66748();
  }
  return *(unsigned char *)(*v2 + 168 * v3 + 164) != 0;
}

uint64_t sub_923B50(void *a1)
{
  uint64_t v1 = a1[9];
  if (!*(unsigned char *)(v1 + 792))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  unsigned int v2 = *(_DWORD *)(v1 + 116);
  if (v2 == 0x7FFFFFFF) {
    return sub_9DB4DC(a1, 3)[10];
  }
  unsigned int v4 = *(_DWORD *)(v1 + 120);
  if (v4 == 0x7FFFFFFF) {
    return v2;
  }
  else {
    return v4;
  }
}

uint64_t sub_923BE0(uint64_t a1)
{
  return **(void **)(a1 + 80) + 168 * *(void *)(*(void *)(a1 + 72) + 56) + 136;
}

uint64_t sub_923BFC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 48);
  unsigned int v2 = *(void **)(a1 + 56);
  if (v1 == v2) {
    return 0x7FFFFFFFLL;
  }
  while (1)
  {
    unint64_t v3 = (_DWORD *)*v1;
    if (*(_DWORD *)*v1 == 4) {
      break;
    }
    if (++v1 == v2) {
      return 0x7FFFFFFFLL;
    }
  }
  if (!*((unsigned char *)v3 + 792))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  unsigned int v5 = v3[22];
  if (v5 == 0x7FFFFFFF) {
    return v3[10];
  }
  unsigned int v6 = v3[23];
  if (v6 == 0x7FFFFFFF) {
    return v5;
  }
  else {
    return v6;
  }
}

long long *sub_923CB4(uint64_t a1)
{
  uint64_t v1 = *(_DWORD ***)(a1 + 48);
  unsigned int v2 = *(_DWORD ***)(a1 + 56);
  if (v1 == v2)
  {
LABEL_4:
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_25D34F8, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_25D34F8))
    {
      return &xmmword_25D3C68;
    }
    else
    {
      qword_25D3C78 = 0;
      xmmword_25D3C68 = 0u;
      __cxa_guard_release(&qword_25D34F8);
      return &xmmword_25D3C68;
    }
  }
  else
  {
    while (1)
    {
      unint64_t v3 = *v1;
      if (**v1 == 4) {
        break;
      }
      if (++v1 == v2) {
        goto LABEL_4;
      }
    }
    return (long long *)sub_9E086C(a1, (uint64_t)v3);
  }
}

BOOL sub_923D68()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v1 = *(void *)(v0 + 32);
  if (v1 == *(void *)(v0 + 24)) {
    return 0;
  }
  uint64_t v2 = v0;
  while (1)
  {
    uint64_t v3 = *(void *)(v1 - 8);
    v1 -= 8;
    sub_927AF0((uint64_t)v6, v3);
    if (v6[0] == 4) {
      break;
    }
    sub_92A5D4((uint64_t)v6);
    if (v1 == *(void *)(v2 + 24)) {
      return 0;
    }
  }
  BOOL v4 = sub_9DCB10(v2, v7, *(void *)(*(void *)(v2 + 72) + 48));
  sub_92A5D4((uint64_t)v6);
  return v4;
}

void sub_923E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_923E70(void *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_5F3B74((uint64_t)a2, (__int16 *)(a1[11] + 1177));
  memset(&v18, 0, sizeof(v18));
  switch(*(_DWORD *)(a1[9] + 1008))
  {
    case 1:
      std::string::assign(&v18, "DepartureBar_Board_LowFreq");
      uint64_t v8 = a1[9];
      if (!*(unsigned char *)(v8 + 792))
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_2439078;
      }
      int v9 = *(_DWORD *)(v8 + 116);
      if (v9 == 0x7FFFFFFF)
      {
        int v9 = sub_9DB4DC(a1, 3)[10];
        uint64_t v8 = a1[9];
      }
      else if (*(_DWORD *)(v8 + 120) != 0x7FFFFFFF)
      {
        int v9 = *(_DWORD *)(v8 + 120);
      }
      int v17 = v9;
      uint64_t v11 = sub_9E086C((uint64_t)a1, v8);
      sub_5F5F70((uint64_t)a2, (long long *)&qword_25D38D8, &v17, v11, 0);
      break;
    case 2:
    case 4:
      std::string::assign(&v18, "DepartureBar_Board_HighFreq");
      uint64_t v4 = a1[9];
      if (!*(unsigned char *)(v4 + 792))
      {
        uint64_t v15 = __cxa_allocate_exception(8uLL);
        *uint64_t v15 = &off_2439078;
      }
      uint64_t v5 = v4 + 144;
      unsigned int v6 = (int *)nullsub_1(v4 + 144);
      uint64_t v7 = (int *)sub_BBB4(v5);
      sub_5F3EF4(a2, (uint64_t)&qword_25D3878, v6, v7);
      break;
    case 3:
      std::string::assign(&v18, "DepartureBar_Board_FutureTimestampList");
      uint64_t v10 = sub_9E086C((uint64_t)a1, a1[9]);
      sub_5F6000((uint64_t)a2, &xmmword_25D38C0, a1 + 64, v10, 0);
      break;
    default:
      break;
  }
  std::string::size_type size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  char v13 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v18.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    char v14 = sub_8D7730(a1[12], (uint64_t)&v18);
    sub_5F41E8((uint64_t)a2, (uint64_t)v14);
    char v13 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  }
  if (v13 < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_9240D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_4D4B58(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_924110(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 72);
  if (!*(unsigned char *)(v1 + 792))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  return v1 + 116;
}

uint64_t sub_924174(uint64_t a1)
{
  LODWORD(result) = sub_9E0C84(a1);
  if ((int)result <= 600) {
    return 600;
  }
  else {
    return result;
  }
}

uint64_t sub_924198(uint64_t a1)
{
  uint64_t v1 = *(int ***)(a1 + 48);
  uint64_t v2 = *(int ***)(a1 + 56);
  if (v1 == v2) {
    return 0;
  }
  uint64_t result = 0;
  do
  {
    uint64_t v4 = *v1;
    int v5 = **v1;
    if (v5 == 4) {
      break;
    }
    if (!*((unsigned char *)v4 + 792) || !*((unsigned char *)v4 + 157))
    {
      if (v5 == 3) {
        uint64_t result = (result + 1);
      }
      else {
        uint64_t result = result;
      }
    }
    ++v1;
  }
  while (v1 != v2);
  return result;
}

uint64_t sub_9241F0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = sub_9DCD3C(a1, a2, a3);
  *(void *)uint64_t v4 = off_243B358;
  int v5 = (std::string *)(v4 + 512);
  *(void *)(v4 + 512) = 0;
  *(void *)(v4 + 528) = 0;
  *(void *)(v4 + 520) = 0;
  *(unsigned char *)(v4 + 536) = 1;
  *(_DWORD *)(v4 + 540) = 3;
  uint64_t v6 = *(void *)(v4 + 32);
  while (v6 != *(void *)(v4 + 24))
  {
    uint64_t v8 = *(void *)(v6 - 8);
    v6 -= 8;
    uint64_t v7 = v8;
    if (*(unsigned char *)(v8 + 792))
    {
      if (!*(unsigned char *)(v7 + 157))
      {
        uint64_t v9 = *(void *)(v7 + 48);
        if (v9 != -1)
        {
          uint64_t v10 = sub_9DCD2C(a1, **(void **)(a1 + 80) + 168 * v9);
          if (a1 + 224 != v10) {
            sub_8F59E0((char **)(a1 + 224), *(std::string **)v10, *(long long **)(v10 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v10 + 8) - *(void *)v10) >> 3));
          }
          break;
        }
      }
    }
  }
  uint64_t v11 = *(void *)(a1 + 72);
  if (!*(unsigned char *)(v11 + 792))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  if (*(_DWORD *)(v11 + 88) == 0x7FFFFFFF)
  {
    int v12 = 0;
    char v13 = (uint64_t *)(v11 + 768);
    char v14 = (int *)(v11 + 776);
    uint64_t v15 = (int *)(v11 + 780);
    unint64_t v16 = *(unsigned int *)(v11 + 40) | ((unint64_t)*(unsigned int *)(v11 + 40) << 32);
  }
  else
  {
    unint64_t v16 = *(void *)(v11 + 88);
    int v12 = *(_DWORD *)(v11 + 96);
    char v13 = (uint64_t *)(v11 + 100);
    char v14 = (int *)(v11 + 108);
    uint64_t v15 = (int *)(v11 + 112);
  }
  uint64_t v17 = 0;
  int v18 = *v15;
  int v19 = *v14;
  uint64_t v20 = *v13;
  *(void *)(a1 + 280) = v16;
  *(_DWORD *)(a1 + 288) = v12;
  *(void *)(a1 + 292) = v20;
  *(_DWORD *)(a1 + 300) = v19;
  *(_DWORD *)(a1 + 304) = v18;
  uint64_t v21 = *(void *)(a1 + 32);
  while (v21 != *(void *)(a1 + 24))
  {
    unint64_t v23 = *(int **)(v21 - 8);
    v21 -= 8;
    uint64_t v22 = (uint64_t)v23;
    int v24 = *v23;
    if (*v23 == 3) {
      uint64_t v17 = v22;
    }
    if (v24 == 2)
    {
      if (!*(unsigned char *)(v22 + 792))
      {
        uint64_t v46 = __cxa_allocate_exception(8uLL);
        *uint64_t v46 = &off_2439078;
      }
      if (*(_DWORD *)(v22 + 116) == 0x7FFFFFFF)
      {
        int v25 = 0;
        std::string v26 = (uint64_t *)(v22 + 768);
        char v27 = (int *)(v22 + 776);
        int v28 = (int *)(v22 + 780);
        unint64_t v29 = *(unsigned int *)(v17 + 40) | ((unint64_t)*(unsigned int *)(v17 + 40) << 32);
      }
      else
      {
        unint64_t v29 = *(void *)(v22 + 116);
        int v25 = *(_DWORD *)(v22 + 124);
        std::string v26 = (uint64_t *)(v22 + 128);
        char v27 = (int *)(v22 + 136);
        int v28 = (int *)(v22 + 140);
      }
      uint64_t v30 = *v26;
      int v31 = *v27;
      int v32 = *v28;
      *(void *)(a1 + 252) = v29;
      *(_DWORD *)(a1 + 260) = v25;
      *(void *)(a1 + 264) = v30;
      *(_DWORD *)(a1 + 272) = v31;
      *(_DWORD *)(a1 + 276) = v32;
      *(_DWORD *)(a1 + 248) = *(_DWORD *)(v22 + 1008);
      unint64_t v33 = (const std::string *)sub_9E086C(a1, v22);
      std::string::operator=(v5, v33);
      if (*(unsigned char *)(v22 + 792)) {
        *(unsigned char *)(a1 + 536) = *(unsigned char *)(v22 + 432);
      }
      break;
    }
  }
  uint64_t v35 = *(void *)(a1 + 24);
  uint64_t v34 = *(void *)(a1 + 32);
  if (v34 == v35 || (v37 = v34 - 8, uint64_t v36 = *(void *)(v34 - 8), *(_DWORD *)v36 == 2))
  {
LABEL_25:
    int v38 = 3;
  }
  else
  {
    long long v40 = *(uint64_t **)(a1 + 80);
    if (*(unsigned char *)(v36 + 792) && *(unsigned char *)(v36 + 157))
    {
      int v38 = 3;
      if (v37 == v35) {
        goto LABEL_26;
      }
    }
    else
    {
      sub_97C680(*(uint64_t **)(a1 + 80), *(void *)(v36 + 48));
      int v38 = sub_97C860();
      if (v37 == v35) {
        goto LABEL_26;
      }
    }
    for (uint64_t i = 0; v34 + i - 8 != v35; i -= 8)
    {
      uint64_t v42 = *(void *)(v34 + i - 16);
      if (*(_DWORD *)v42 == 2) {
        break;
      }
      if (!*(unsigned char *)(v42 + 792) || !*(unsigned char *)(v42 + 157))
      {
        sub_97C680(v40, *(void *)(v42 + 48));
        int v43 = sub_97C860();
        if (i == 8)
        {
          int v38 = v43;
        }
        else if (v38 != v43 && v43 != 3)
        {
          goto LABEL_25;
        }
      }
    }
  }
LABEL_26:
  *(_DWORD *)(a1 + 540) = v38;
  return a1;
}

void sub_924578(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 535) < 0) {
    operator delete(*v2);
  }
  sub_921ED8(v1);
  _Unwind_Resume(a1);
}

void sub_9245B4(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a2 == 2 && !a3)
  {
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 12;
    strcpy((char *)&__p, "Transit_Stop");
    sub_922B88((char *)a4, (long long *)&__p);
    goto LABEL_4;
  }
  if (a2 == 2 && a3 == 1)
  {
    uint64_t v6 = *(int ***)(a1 + 48);
    uint64_t v7 = *(int ***)(a1 + 56);
    if (v6 == v7) {
      goto LABEL_25;
    }
    while (1)
    {
      int v8 = **v6;
      if (v8 != 5) {
        break;
      }
      if (++v6 == v7) {
        goto LABEL_25;
      }
    }
    if (v8 != 2)
    {
LABEL_25:
      if (*(unsigned char *)(a1 + 163))
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_20B91C0;
        strcpy(__p.__r_.__value_.__l.__data_, "Station_Has_Access_Point");
      }
      else
      {
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = 19;
        strcpy((char *)&__p, "Exit_Vehicle_{Mode}");
      }
      sub_922B88((char *)a4, (long long *)&__p);
      goto LABEL_4;
    }
    memset(&__p, 0, sizeof(__p));
    if (!sub_9DB63C((void *)a1))
    {
      uint64_t v10 = "Transfer_To_System";
      goto LABEL_53;
    }
    sub_9DC3E4((void *)a1, &v19);
    if (v21 < 0)
    {
      uint64_t v11 = v20;
      operator delete(v19);
      if (v11) {
        goto LABEL_24;
      }
    }
    else if (v21)
    {
LABEL_24:
      uint64_t v10 = "Transfer_To_Line_{Mode}";
LABEL_53:
      std::string::assign(&__p, v10);
      uint64_t v16 = *(void *)(a1 + 48);
      uint64_t v17 = *(void *)(a1 + 56);
      if (v16 != v17)
      {
        while (**(_DWORD **)v16 != 2)
        {
          v16 += 8;
          if (v16 == v17) {
            goto LABEL_62;
          }
        }
        if (sub_9DCB10(a1, *(void *)(*(void *)(a1 + 72) + 56), *(void *)(*(void *)v16 + 48)))
        {
          std::string::append(&__p, "_nextBoardStation");
          int v18 = sub_9DB4DC((void *)a1, 2);
          if (*v18 == 2) {
            sub_97C680(*(uint64_t **)(a1 + 80), *((void *)v18 + 6));
          }
          if (sub_97C860() == 1) {
            std::string::append(&__p, "_station");
          }
        }
      }
LABEL_62:
      sub_922B88((char *)a4, (long long *)&__p);
      goto LABEL_4;
    }
    sub_9DC554((void *)a1, (uint64_t)&v19);
    int v12 = (void **)v19;
    char v13 = v20;
    if (v19)
    {
      char v14 = v19;
      if (v19 != v20)
      {
        uint64_t v15 = v20;
        do
        {
          if (*((char *)v15 - 1) < 0) {
            operator delete(*(v15 - 3));
          }
          v15 -= 3;
        }
        while (v15 != v12);
        char v14 = v19;
      }
      uint64_t v20 = v12;
      operator delete(v14);
    }
    if (v12 == v13) {
      uint64_t v10 = "Transfer";
    }
    else {
      uint64_t v10 = "Transfer_To_Headsign_{Mode}";
    }
    goto LABEL_53;
  }
  if (a3 != 2)
  {
    if (a2 != 1 || a3)
    {
      if (a2 == 1 && a3 == 1 && *(unsigned char *)(a1 + 536))
      {
        if (sub_9DB810(a1))
        {
          switch(*(_DWORD *)(a1 + 540))
          {
            case 0:
            case 3:
              sub_5E5C(&__p, "Alight_At_Next_Stop");
              sub_922B88((char *)a4, (long long *)&__p);
              goto LABEL_4;
            case 1:
              sub_5E5C(&__p, "Alight_At_Next_Station");
              sub_922B88((char *)a4, (long long *)&__p);
              goto LABEL_4;
            case 2:
              sub_5E5C(&__p, "Alight_At_Next_Terminal");
              sub_922B88((char *)a4, (long long *)&__p);
              goto LABEL_4;
            default:
              goto LABEL_35;
          }
        }
        sub_5E5C(&__p, "Exit_After_PreviousStop");
        sub_922B88((char *)a4, (long long *)&__p);
        goto LABEL_4;
      }
      goto LABEL_35;
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_20B91A0;
    strcpy(__p.__r_.__value_.__l.__data_, "Exit_Vehicle_{Mode}_At_Stop");
    sub_922B88((char *)a4, (long long *)&__p);
LABEL_4:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return;
  }
  int v9 = *(unsigned __int8 *)(a1 + 161);
  if (v9 == 3)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_20B9250;
    strcpy(__p.__r_.__value_.__l.__data_, "DropoffCoordinateDriver");
    sub_922B88((char *)a4, (long long *)&__p);
    goto LABEL_4;
  }
  if (v9 == 2)
  {
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 20;
    strcpy((char *)&__p, "DropoffContactAgency");
    sub_922B88((char *)a4, (long long *)&__p);
    goto LABEL_4;
  }
LABEL_35:
  *(_OWORD *)(a4 + 208) = 0u;
  *(_OWORD *)(a4 + 224) = 0u;
  *(_OWORD *)(a4 + 176) = 0u;
  *(_OWORD *)(a4 + 192) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(_OWORD *)(a4 + 160) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;

  sub_922B20((_OWORD *)a4);
}

void sub_924AA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_924AFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_5F3B74((uint64_t)&v49, (__int16 *)(*(void *)(a1 + 88) + 1177));
  memset(&v48, 0, sizeof(v48));
  if (!sub_9E0C70(a1))
  {
    std::string::assign(&v48, "DepartureBar_ExitVehicle_HighFreq");
    uint64_t v7 = *(int *)(a1 + 540);
    if (v7 <= 3) {
      std::string::append(&v48, off_243B838[v7]);
    }
    unsigned int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1);
    char v44 = 4;
    strcpy((char *)v43, "Stop");
    sub_9DF7FC(a1, v8, (uint64_t)&v45);
    int v9 = std::string::insert(&v45, 0, "_");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    int64_t v47 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (v47 >= 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    if (v47 >= 0) {
      std::string::size_type v12 = HIBYTE(v47);
    }
    else {
      std::string::size_type v12 = (std::string::size_type)__p[1];
    }
    std::string::append(&v48, (const std::string::value_type *)v11, v12);
    if (SHIBYTE(v47) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_19:
        if ((v44 & 0x80000000) == 0)
        {
LABEL_20:
          int v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
          sub_5F66B8((uint64_t *)&v49, (uint64_t)&qword_25D3860, v13);
          unsigned int v14 = 0;
          goto LABEL_32;
        }
LABEL_23:
        operator delete(v43[0]);
        goto LABEL_20;
      }
    }
    else if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_19;
    }
    operator delete(v45.__r_.__value_.__l.__data_);
    if ((v44 & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_23;
  }
  uint64_t v4 = *(void *)(a1 + 72);
  if (!*(unsigned char *)(v4 + 792))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  if (*(unsigned char *)(v4 + 96))
  {
    int v5 = *(unsigned __int8 *)(v4 + 97);
    if (v5 == 1)
    {
      sub_9E098C(a1, *(void *)(v4 + 56), a2);
LABEL_7:
      if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return sub_4D4B58((uint64_t)&v49);
      }
LABEL_61:
      operator delete(v48.__r_.__value_.__l.__data_);
      return sub_4D4B58((uint64_t)&v49);
    }
    if (v5 == 2)
    {
      sub_9E0A88(a1, a2);
      goto LABEL_7;
    }
    int v16 = *(_DWORD *)(v4 + 88);
    int v15 = *(_DWORD *)(v4 + 92);
    if ((int)fabs((double)(10 * (v16 - v15))) < 600)
    {
      unsigned int v14 = 1;
    }
    else if (v16 >= v15)
    {
      unsigned int v14 = 2;
    }
    else
    {
      unsigned int v14 = 3;
    }
  }
  else
  {
    unsigned int v14 = 0;
  }
  std::string::assign(&v48, "DepartureBar_ExitVehicle_LowFreq");
  LODWORD(__p[0]) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 168))(a1);
  uint64_t v17 = sub_9E086C(a1, *(void *)(a1 + 72));
  sub_5F5F70((uint64_t)&v49, (long long *)&qword_25D38F0, __p, v17, 0);
LABEL_32:
  if (sub_9E0C70(a1))
  {
    sub_98ED08((uint64_t)&v49, v14);
    unsigned int v18 = 0x2020100u >> (8 * v14);
  }
  else
  {
    LOBYTE(v18) = 0;
  }
  int v19 = sub_8D7730(*(void *)(a1 + 96), (uint64_t)&v48);
  sub_5F4680((uint64_t)&v49, (uint64_t)v19, (uint64_t)&word_25D3B60, v18);
  uint64_t v20 = *((void *)&v49 + 1);
  __p[0] = *(void **)"{StopsCount}";
  LODWORD(__p[1]) = 2104782453;
  unsigned int v21 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1);
  std::to_string(&v45, v21);
  uint64_t v22 = (std::string *)(v20 - 24);
  LODWORD(v23) = *(char *)(v20 - 1);
  BOOL v24 = (int)v23 < 0;
  uint64_t v25 = *(void *)(v20 - 16);
  if ((int)v23 >= 0) {
    std::string v26 = (char *)(v20 - 24);
  }
  else {
    std::string v26 = *(char **)(v20 - 24);
  }
  uint64_t v23 = v23;
  if (v24) {
    uint64_t v23 = v25;
  }
  if (v23 >= 12)
  {
    char v27 = &v26[v23];
    int v28 = v26;
    do
    {
      unint64_t v29 = (char *)memchr(v28, 123, v23 - 11);
      if (!v29) {
        break;
      }
      if (*(void **)v29 == __p[0] && *((_DWORD *)v29 + 2) == (unint64_t)LODWORD(__p[1]))
      {
        if (v29 != v27 && v29 - v26 != -1)
        {
          if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v31 = &v45;
          }
          else {
            int v31 = (std::string *)v45.__r_.__value_.__r.__words[0];
          }
          if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v45.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v45.__r_.__value_.__l.__size_;
          }
          std::string::replace(v22, v29 - v26, 0xCuLL, (const std::string::value_type *)v31, size);
        }
        break;
      }
      int v28 = v29 + 1;
      uint64_t v23 = v27 - (unsigned char *)v28;
    }
    while (v27 - (unsigned char *)v28 >= 12);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  uint64_t v33 = *(void *)&v53[32];
  long long v34 = v49;
  long long v35 = v50;
  long long v49 = 0u;
  long long v50 = 0u;
  *(_OWORD *)a2 = v34;
  *(_OWORD *)(a2 + 16) = v35;
  long long v36 = v51;
  long long v37 = v52;
  long long v51 = 0uLL;
  *(_OWORD *)(a2 + 32) = v36;
  *(_OWORD *)(a2 + 48) = v37;
  long long v52 = 0uLL;
  long long v38 = *(_OWORD *)&v53[16];
  *(_OWORD *)(a2 + 64) = *(_OWORD *)v53;
  *(_OWORD *)(a2 + 80) = v38;
  memset(&v53[8], 0, 32);
  *(void *)(a2 + 96) = v33;
  LODWORD(v33) = v54;
  *(unsigned char *)(a2 + 108) = v55;
  *(_DWORD *)(a2 + 104) = v33;
  long long v39 = v56;
  uint64_t v40 = v59;
  *(void *)(a2 + 128) = v57;
  *(_OWORD *)(a2 + 112) = v39;
  *(void *)int v53 = 0;
  long long v56 = 0uLL;
  long long v41 = v58;
  *(void *)(a2 + 152) = v40;
  *(_OWORD *)(a2 + 136) = v41;
  uint64_t v59 = 0;
  uint64_t v57 = 0;
  long long v58 = 0uLL;
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_61;
  }
  return sub_4D4B58((uint64_t)&v49);
}

void sub_924FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  sub_4D4B58((uint64_t)&a33);
  _Unwind_Resume(a1);
}

uint64_t sub_9250A4(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 72) + 40);
}

uint64_t sub_9250B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1 == v2) {
    return 0;
  }
  uint64_t result = 0;
  do
  {
    int v5 = *(_DWORD **)(v1 - 8);
    v1 -= 8;
    uint64_t v4 = v5;
    int v6 = *v5;
    if (*v5 == 2) {
      break;
    }
    if (!*((unsigned char *)v4 + 792) || !*((unsigned char *)v4 + 157))
    {
      if (v6 == 3) {
        uint64_t result = (result + 1);
      }
      else {
        uint64_t result = result;
      }
    }
  }
  while (v1 != v2);
  return result;
}

uint64_t sub_925104(uint64_t a1)
{
  LODWORD(result) = sub_9E0C84(a1);
  if ((int)result <= 600) {
    return 600;
  }
  else {
    return result;
  }
}

uint64_t sub_925128(uint64_t a1)
{
  for (uint64_t i = *(void *)(a1 + 32); i != *(void *)(a1 + 24); i -= 8)
  {
    uint64_t v2 = i;
    int v3 = **(_DWORD **)(i - 16);
    if (v3 == 2) {
      return *(unsigned int *)(*(void *)(v2 - 8) + 40);
    }
  }
  return 0x7FFFFFFFLL;
}

uint64_t sub_925160(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = sub_9DCD3C(a1, a2, a3);
  *(void *)uint64_t v4 = &off_243B418;
  *(unsigned char *)(v4 + 512) = 0;
  *(unsigned char *)(a1 + 512) = sub_97C680(*(uint64_t **)(v4 + 80), *(void *)(*(void *)(a1 + 72) + 56));
  return a1;
}

void sub_9251BC(_Unwind_Exception *a1)
{
  sub_921ED8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_9251D0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = sub_9DCD3C(a1, a2, a3);
  *(void *)uint64_t v4 = &off_243B418;
  *(unsigned char *)(v4 + 512) = 0;
  *(unsigned char *)(a1 + 512) = sub_97C680(*(uint64_t **)(v4 + 80), *(void *)(*(void *)(a1 + 72) + 56));
  return a1;
}

void sub_92522C(_Unwind_Exception *a1)
{
  sub_921ED8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_925240(uint64_t a1, int a2)
{
  if (a2 == 1) {
    return *(void *)(a1 + 32) - *(void *)(a1 + 24) == 8;
  }
  else {
    return sub_9DB8C0();
  }
}

void sub_925260(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a2 == 2 && !a3)
  {
    HIBYTE(v13) = 12;
    strcpy((char *)__p, "Transit_Stop");
    sub_922B88((char *)a4, (long long *)__p);
    goto LABEL_19;
  }
  if (a2 == 2 && a3 == 1)
  {
    sub_9DBEFC(*(unsigned __int8 *)(a1 + 512), (uint64_t)&v11);
    int v6 = std::string::insert(&v11, 0, "GOTO_STOP_LIST");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type v13 = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
LABEL_18:
    sub_922B88((char *)a4, (long long *)__p);
LABEL_19:
    if (SHIBYTE(v13) < 0) {
      operator delete(__p[0]);
    }
    return;
  }
  if (a2 == 2 && a3 == 2)
  {
    uint64_t v8 = sub_9DC3CC(a1);
    if (sub_9DD8A8(a1, v8))
    {
      sub_9DD8F0((char *)a1, v8, *(void *)(*(void *)(a1 + 72) + 56), (uint64_t)__p);
      sub_922B88((char *)a4, (long long *)__p);
      goto LABEL_19;
    }
  }
  else if (a2 == 1 && !a3 && *(void *)(a1 + 32) - *(void *)(a1 + 24) == 8)
  {
    sub_9DBEFC(*(unsigned __int8 *)(a1 + 512), (uint64_t)&v11);
    int v9 = std::string::insert(&v11, 0, "START_AT");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type v13 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
    goto LABEL_18;
  }
  *(_OWORD *)(a4 + 208) = 0u;
  *(_OWORD *)(a4 + 224) = 0u;
  *(_OWORD *)(a4 + 176) = 0u;
  *(_OWORD *)(a4 + 192) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(_OWORD *)(a4 + 160) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;

  sub_922B20((_OWORD *)a4);
}

void sub_92547C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_9254BC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = sub_9DCD3C(a1, a2, a3);
  *(void *)uint64_t v4 = off_243B4C8;
  int v5 = (char **)(v4 + 512);
  *(void *)(v4 + 512) = 0;
  *(void *)(v4 + 528) = 0;
  *(void *)(v4 + 520) = 0;
  *(unsigned char *)(v4 + 536) = 0;
  *(unsigned char *)(a1 + 536) = sub_97C680(*(uint64_t **)(v4 + 80), *(void *)(*(void *)(a1 + 72) + 48));
  uint64_t v6 = *(void *)(a1 + 72);
  if (!*(unsigned char *)(v6 + 952))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  sub_23708((uint64_t)v5, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v6 + 888) - *(void *)(v6 + 880)) >> 3));
  uint64_t v7 = *(void *)(v6 + 880);
  uint64_t v8 = *(void *)(v6 + 888);
  while (v7 != v8)
  {
    if (!*(unsigned char *)(v7 + 32))
    {
      long long v10 = (long long *)(v7 + 8);
      unint64_t v11 = *(void *)(a1 + 520);
      if (v11 >= *(void *)(a1 + 528))
      {
        int v9 = sub_6E6EC(v5, (uint64_t)v10);
      }
      else
      {
        if (*(char *)(v7 + 31) < 0)
        {
          sub_4200(*(unsigned char **)(a1 + 520), *(void **)(v7 + 8), *(void *)(v7 + 16));
        }
        else
        {
          long long v12 = *v10;
          *(void *)(v11 + 16) = *(void *)(v7 + 24);
          *(_OWORD *)unint64_t v11 = v12;
        }
        int v9 = (char *)(v11 + 24);
        *(void *)(a1 + 520) = v11 + 24;
      }
      *(void *)(a1 + 520) = v9;
    }
    v7 += 40;
  }
  return a1;
}

void sub_925620(_Unwind_Exception *a1)
{
  sub_1A668(v2);
  sub_921ED8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_925650(uint64_t a1, int a2)
{
  if (a2 == 1)
  {
    if (!*(unsigned char *)(a1 + 163))
    {
      uint64_t v2 = *(void *)(a1 + 72);
      if (!*(unsigned char *)(v2 + 952))
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_2439078;
      }
      if (*(void *)(v2 + 880) == *(void *)(v2 + 888)) {
        return 0;
      }
    }
    if (!*(unsigned char *)(a1 + 162)) {
      return 0;
    }
  }

  return sub_9DB8C0();
}

void sub_9256F4(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a2 != 2 || a3)
  {
    if (a2 != 1 || a3)
    {
      if (a3 != 1) {
        goto LABEL_21;
      }
      if (*(unsigned char *)(a1 + 163))
      {
        uint64_t v7 = (char *)operator new(0x20uLL);
        *(void *)a4 = v7;
        *(_OWORD *)(a4 + 8) = xmmword_20B91C0;
        strcpy(v7, "Station_Has_Access_Point");
        return;
      }
      if (a2 != 2) {
        goto LABEL_21;
      }
      sub_9DC0B4(*(unsigned __int8 *)(a1 + 536), 0, (uint64_t)&v10);
      char v8 = HIBYTE(v10.__r_.__value_.__r.__words[2]);
      if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v10.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v10.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        std::operator+<char>();
        char v8 = HIBYTE(v10.__r_.__value_.__r.__words[2]);
      }
      if (v8 < 0) {
        operator delete(v10.__r_.__value_.__l.__data_);
      }
      if (!size)
      {
LABEL_21:
        *(void *)a4 = 0;
        *(void *)(a4 + 8) = 0;
        *(void *)(a4 + 16) = 0;
      }
    }
    else
    {
      sub_9DC0B4(*(unsigned __int8 *)(a1 + 536), 1, (uint64_t)&v10);
      int v5 = std::string::insert(&v10, 0, "Exit");
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      *(void *)(a4 + 16) = *((void *)&v5->__r_.__value_.__l + 2);
      *(_OWORD *)a4 = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v10.__r_.__value_.__l.__data_);
      }
    }
  }
  else
  {
    *(unsigned char *)(a4 + 23) = 12;
    strcpy((char *)a4, "Transit_Stop");
  }
}

void sub_92587C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_92589C(void *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  sub_922B20((_OWORD *)a4);
  if (a3 != 1 || a1[64] == a1[65])
  {
    sub_9256F4((uint64_t)a1, a2, a3, (uint64_t)__p);
    if (*(char *)(a4 + 23) < 0) {
      operator delete(*(void **)a4);
    }
    *(_OWORD *)a4 = *(_OWORD *)__p;
    *(void *)(a4 + 16) = v28;
    return;
  }
  unint64_t v8 = 0;
  uint64_t v30 = 0;
  int v31 = 0;
  unint64_t v32 = 0;
  while (v8 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[65] - a1[64]) >> 3))
  {
    std::to_string(&v29, ++v8);
    int v9 = std::string::insert(&v29, 0, "Follow_Sign");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    int64_t v28 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    unint64_t v11 = v31;
    if ((unint64_t)v31 >= v32)
    {
      int v31 = sub_6E8C4((void **)&v30, (uint64_t)__p);
      if (SHIBYTE(v28) < 0)
      {
        operator delete(__p[0]);
        if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_5;
        }
      }
      else if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_5;
      }
LABEL_12:
      operator delete(v29.__r_.__value_.__l.__data_);
      if (v8 == 8) {
        break;
      }
    }
    else
    {
      long long v12 = *(_OWORD *)__p;
      *((void *)v31 + 2) = v28;
      _OWORD *v11 = v12;
      __p[1] = 0;
      int64_t v28 = 0;
      __p[0] = 0;
      int v31 = (char *)v11 + 24;
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_12;
      }
LABEL_5:
      if (v8 == 8) {
        break;
      }
    }
  }
  uint64_t v13 = a1[9];
  if (!*(unsigned char *)(v13 + 952))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  if (!*(unsigned char *)(v13 + 904))
  {
    sub_9256F4((uint64_t)a1, a2, 1, (uint64_t)__p);
    unsigned int v14 = (void *)HIBYTE(v28);
    char v15 = HIBYTE(v28);
    if (v28 < 0) {
      unsigned int v14 = __p[1];
    }
    if (v14)
    {
      std::operator+<char>();
      int v16 = v31;
      if ((unint64_t)v31 >= v32)
      {
        int v31 = sub_6E8C4((void **)&v30, (uint64_t)&v29);
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v29.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v17 = *(_OWORD *)&v29.__r_.__value_.__l.__data_;
        *((void *)v31 + 2) = *((void *)&v29.__r_.__value_.__l + 2);
        _OWORD *v16 = v17;
        int v31 = (char *)v16 + 24;
      }
      char v15 = HIBYTE(v28);
    }
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }
  unsigned int v18 = v30;
  unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v31 - v30) >> 3);
  if (v19)
  {
    if (v19 == 1)
    {
      memset(&v29, 0, sizeof(v29));
      sub_92A878((uint64_t)__p, (long long **)&v30, (uint64_t *)&v29, 0);
      sub_922C20(a4, (long long *)__p);
      sub_927A08((uint64_t)__p);
      std::string::size_type v20 = v29.__r_.__value_.__r.__words[0];
      if (v29.__r_.__value_.__r.__words[0])
      {
        std::string::size_type size = v29.__r_.__value_.__l.__size_;
        uint64_t v22 = (void *)v29.__r_.__value_.__r.__words[0];
        if (v29.__r_.__value_.__l.__size_ == v29.__r_.__value_.__r.__words[0]) {
          goto LABEL_43;
        }
        do
        {
          if (*(char *)(size - 1) < 0) {
            operator delete(*(void **)(size - 24));
          }
          size -= 24;
        }
        while (size != v20);
LABEL_42:
        uint64_t v22 = (void *)v29.__r_.__value_.__r.__words[0];
        goto LABEL_43;
      }
    }
    else
    {
      sub_92B01C(&v29, v19 - 1, (uint64_t)&qword_25D3788);
      sub_92A878((uint64_t)__p, (long long **)&v30, (uint64_t *)&v29, 0);
      sub_922C20(a4, (long long *)__p);
      sub_927A08((uint64_t)__p);
      std::string::size_type v20 = v29.__r_.__value_.__r.__words[0];
      if (v29.__r_.__value_.__r.__words[0])
      {
        std::string::size_type v23 = v29.__r_.__value_.__l.__size_;
        uint64_t v22 = (void *)v29.__r_.__value_.__r.__words[0];
        if (v29.__r_.__value_.__l.__size_ != v29.__r_.__value_.__r.__words[0])
        {
          do
          {
            if (*(char *)(v23 - 1) < 0) {
              operator delete(*(void **)(v23 - 24));
            }
            v23 -= 24;
          }
          while (v23 != v20);
          goto LABEL_42;
        }
LABEL_43:
        v29.__r_.__value_.__l.__size_ = v20;
        operator delete(v22);
      }
    }
    unsigned int v18 = v30;
  }
  if (v18)
  {
    BOOL v24 = v31;
    uint64_t v25 = v18;
    if (v31 != v18)
    {
      do
      {
        if (*(v24 - 1) < 0) {
          operator delete(*((void **)v24 - 3));
        }
        v24 -= 24;
      }
      while (v24 != v18);
      uint64_t v25 = v30;
    }
    int v31 = v18;
    operator delete(v25);
  }
}

void sub_925C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v15 - 89) < 0) {
    operator delete(*(void **)(v15 - 112));
  }
  if (a14 < 0)
  {
    operator delete(__p);
    sub_1A668((void **)(v15 - 88));
    sub_927A08(v14);
    _Unwind_Resume(a1);
  }
  sub_1A668((void **)(v15 - 88));
  sub_927A08(v14);
  _Unwind_Resume(a1);
}

void sub_925D48(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_9DB8E0(a1, a2);
  uint64_t v4 = 0;
  unint64_t v5 = 0;
  do
  {
    uint64_t v6 = *(void *)(a1 + 512);
    if (v5 >= 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 520) - v6) >> 3)) {
      break;
    }
    std::to_string(&v12, ++v5);
    uint64_t v7 = std::string::insert(&v12, 0, "{Sign");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v13.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    int v9 = std::string::append(&v13, "}");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type v15 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    int v16 = __p;
    unint64_t v11 = sub_7AE4E0(a2, (uint64_t)__p, (uint64_t)&unk_20F06E0, (long long **)&v16);
    std::string::operator=((std::string *)(v11 + 40), (const std::string *)(v6 + v4));
    if (SHIBYTE(v15) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_6:
        if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_10;
        }
        goto LABEL_2;
      }
    }
    else if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v13.__r_.__value_.__l.__data_);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
LABEL_10:
    }
      operator delete(v12.__r_.__value_.__l.__data_);
LABEL_2:
    v4 += 24;
  }
  while (v5 != 8);
}

void sub_925EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      sub_50828(v28);
      _Unwind_Resume(a1);
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  sub_50828(v28);
  _Unwind_Resume(a1);
}

uint64_t sub_925F54(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (void *)sub_9DCD3C(a1, a2, a3);
  void *v4 = &off_243B578;
  sub_9DC554(v4, (uint64_t)__p);
  unint64_t v5 = (void **)(a1 + 168);
  uint64_t v6 = *(void *)(a1 + 168);
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 176);
    long long v8 = *(void **)(a1 + 168);
    if (v7 != v6)
    {
      do
      {
        if (*(char *)(v7 - 1) < 0) {
          operator delete(*(void **)(v7 - 24));
        }
        v7 -= 24;
      }
      while (v7 != v6);
      long long v8 = *v5;
    }
    *(void *)(a1 + 176) = v6;
    operator delete(v8);
    std::string *v5 = 0;
    *(void *)(a1 + 176) = 0;
    *(void *)(a1 + 184) = 0;
  }
  *(_OWORD *)(a1 + 168) = *(_OWORD *)__p;
  *(void *)(a1 + 184) = v15;
  uint64_t v9 = sub_9DC3CC(a1);
  sub_9DD7CC(v9, (uint64_t)__p);
  long long v10 = (void **)(a1 + 360);
  if (*(char *)(a1 + 383) < 0) {
    operator delete(*v10);
  }
  *(_OWORD *)long long v10 = *(_OWORD *)__p;
  *(void *)(a1 + 376) = v15;
  HIBYTE(v15) = 0;
  LOBYTE(__p[0]) = 0;
  *(unsigned char *)(a1 + 384) = v16;
  unint64_t v11 = (void **)(a1 + 392);
  if ((*(char *)(a1 + 415) & 0x80000000) == 0)
  {
    *(_OWORD *)unint64_t v11 = v17;
    *(void *)(a1 + 408) = v18;
    return a1;
  }
  operator delete(*v11);
  int v13 = SHIBYTE(v15);
  *(_OWORD *)unint64_t v11 = v17;
  *(void *)(a1 + 408) = v18;
  HIBYTE(v18) = 0;
  LOBYTE(v17) = 0;
  if ((v13 & 0x80000000) == 0) {
    return a1;
  }
  operator delete(__p[0]);
  return a1;
}

void sub_9260C4(_Unwind_Exception *a1)
{
  sub_921ED8(v1);
  _Unwind_Resume(a1);
}

void sub_9260D8(_Unwind_Exception *a1)
{
  sub_921ED8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_9260F0(void *a1)
{
  uint64_t v2 = 2;
  int v3 = sub_9DB4DC(a1, 2);
  if (*v3 == 2 && *((unsigned char *)v3 + 792) != 0)
  {
    uint64_t v5 = *((void *)v3 + 94);
    if (v5 != -1) {
      return *(unsigned __int16 *)(*(void *)(a1[10] + 72) + 696 * v5 + 556);
    }
  }
  return v2;
}

uint64_t sub_926154(uint64_t a1, int a2)
{
  if (a2 == 1
    && *(_DWORD *)(a1 + 128) == 6
    && *(void *)(*(void *)(a1 + 72) + 48) == *(void *)(*(void *)(a1 + 72) + 56))
  {
    return 0;
  }
  else
  {
    return sub_9DB8C0();
  }
}

void sub_926184(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, _OWORD *a4@<X8>)
{
  sub_922B20(a4);
  long long v49 = 0;
  long long v50 = 0;
  unint64_t v51 = 0;
  sub_97C680(*(uint64_t **)(a1 + 80), *(void *)(*(void *)(a1 + 72) + 56));
  int v8 = sub_97C860();
  if (a2 != 1 || a3)
  {
    if (a2 != 1 || a3 != 1) {
      goto LABEL_67;
    }
    if (*(_DWORD *)(a1 + 128) != 6) {
      goto LABEL_87;
    }
    memset(__p, 0, 24);
    sub_9DC3E4((void *)a1, &v46);
    size_t v10 = HIBYTE(v48);
    if (v48 < 0) {
      size_t v10 = v47;
    }
    if (!v10) {
      goto LABEL_42;
    }
    sub_9DC460((void *)a1, &v45);
    if (v48 >= 0) {
      size_t v11 = HIBYTE(v48);
    }
    else {
      size_t v11 = v47;
    }
    std::string::size_type size = HIBYTE(v45.__r_.__value_.__r.__words[2]);
    int v13 = SHIBYTE(v45.__r_.__value_.__r.__words[2]);
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v45.__r_.__value_.__l.__size_;
    }
    if (v11 == size)
    {
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v14 = &v45;
      }
      else {
        uint64_t v14 = (std::string *)v45.__r_.__value_.__r.__words[0];
      }
      if (v48 < 0)
      {
        BOOL v20 = memcmp(v46, v14, v47) != 0;
      }
      else if (HIBYTE(v48))
      {
        uint64_t v15 = HIBYTE(v48) - 1;
        char v16 = &v46;
        do
        {
          int v18 = *(unsigned __int8 *)v16;
          char v16 = (void **)((char *)v16 + 1);
          int v17 = v18;
          int v19 = v14->__r_.__value_.__s.__data_[0];
          uint64_t v14 = (std::string *)((char *)v14 + 1);
          BOOL v20 = v17 != v19;
        }
        while (v17 == v19 && v15-- != 0);
      }
      else
      {
        BOOL v20 = 0;
      }
    }
    else
    {
      BOOL v20 = 1;
    }
    if (v13 < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
    if (v20)
    {
      std::string::assign(__p, "Follow_Signs_Line_{Mode}");
    }
    else
    {
LABEL_42:
      std::string::assign(__p, "Follow_Sign_for");
      uint64_t v22 = *(void *)(a1 + 168);
      uint64_t v23 = *(void *)(a1 + 176);
      if (v22 != v23)
      {
        unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((v23 - v22) >> 3);
        if (v24 >= 2 && *(void *)(a1 + 48) != *(void *)(a1 + 56))
        {
          uint64_t v25 = sub_9DB4DC((void *)a1, 2);
          if (!sub_9DDA8C(a1, v25[252], (uint64_t)v25)) {
            unint64_t v24 = 1;
          }
        }
        std::string::append(__p, "_MultipleHeadsign");
        if (v24 >= 5) {
          unint64_t v26 = 5;
        }
        else {
          unint64_t v26 = v24;
        }
        std::to_string(&v45, v26);
        if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v27 = &v45;
        }
        else {
          char v27 = (std::string *)v45.__r_.__value_.__r.__words[0];
        }
        if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v28 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v28 = v45.__r_.__value_.__l.__size_;
        }
        std::string::append(__p, (const std::string::value_type *)v27, v28);
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v45.__r_.__value_.__l.__data_);
        }
      }
      std::string::append(__p, "_{Mode}");
    }
    std::string v29 = v50;
    if ((unint64_t)v50 >= v51)
    {
      long long v50 = sub_1D740((char **)&v49, (uint64_t)__p);
      if ((SHIBYTE(v48) & 0x80000000) == 0) {
        goto LABEL_65;
      }
    }
    else if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    {
      sub_4200(v50, __p[0].__r_.__value_.__l.__data_, __p[0].__r_.__value_.__l.__size_);
      long long v50 = v29 + 24;
      if ((SHIBYTE(v48) & 0x80000000) == 0)
      {
LABEL_65:
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p[0].__r_.__value_.__l.__data_);
        }
LABEL_67:
        if (a2 != 2 || a3 != 1) {
          goto LABEL_87;
        }
        memset(__p, 0, 24);
        if (*(_DWORD *)(a1 + 128) == 6)
        {
          int v31 = "Transfer_To_System";
          goto LABEL_78;
        }
        sub_9DC3E4((void *)a1, &v46);
        if (SHIBYTE(v48) < 0)
        {
          size_t v32 = v47;
          operator delete(v46);
          if (v32) {
            goto LABEL_73;
          }
        }
        else if (HIBYTE(v48))
        {
LABEL_73:
          int v31 = "Transfer_To_Line_{Mode}";
          goto LABEL_78;
        }
        if (*(void *)(a1 + 168) == *(void *)(a1 + 176)) {
          int v31 = "Transfer";
        }
        else {
          int v31 = "Transfer_To_Headsign_{Mode}";
        }
LABEL_78:
        std::string::assign(__p, v31);
        if (sub_9DCB10(a1, *(void *)(*(void *)(a1 + 72) + 48), *(void *)(*(void *)(a1 + 72) + 56)))
        {
          std::string::append(__p, "_nextBoardStation");
          if (v8 == 1) {
            std::string::append(__p, "_station");
          }
        }
        uint64_t v9 = v50;
        if ((unint64_t)v50 < v51)
        {
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_111;
          }
LABEL_83:
          long long v33 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
          *((void *)v9 + 2) = *((void *)&__p[0].__r_.__value_.__l + 2);
          *(_OWORD *)uint64_t v9 = v33;
          long long v50 = v9 + 24;
          if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_87;
          }
          goto LABEL_86;
        }
LABEL_85:
        long long v50 = sub_1D740((char **)&v49, (uint64_t)__p);
        if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_87;
        }
        goto LABEL_86;
      }
    }
    else
    {
      long long v30 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
      *((void *)v50 + 2) = *((void *)&__p[0].__r_.__value_.__l + 2);
      *(_OWORD *)std::string v29 = v30;
      long long v50 = v29 + 24;
      if ((SHIBYTE(v48) & 0x80000000) == 0) {
        goto LABEL_65;
      }
    }
    operator delete(v46);
    goto LABEL_65;
  }
  if (*(_DWORD *)(a1 + 128) != 6) {
    goto LABEL_87;
  }
  *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 18;
  strcpy((char *)__p, "Transfer_To_System");
  if (sub_9DCB10(a1, *(void *)(*(void *)(a1 + 72) + 48), *(void *)(*(void *)(a1 + 72) + 56)))
  {
    std::string::append(__p, "_nextBoardStation");
    if (v8 == 1) {
      std::string::append(__p, "_station");
    }
  }
  uint64_t v9 = v50;
  if ((unint64_t)v50 >= v51) {
    goto LABEL_85;
  }
  if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_83;
  }
LABEL_111:
  sub_4200(v50, __p[0].__r_.__value_.__l.__data_, __p[0].__r_.__value_.__l.__size_);
  long long v50 = v9 + 24;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
LABEL_86:
  }
    operator delete(__p[0].__r_.__value_.__l.__data_);
LABEL_87:
  long long v34 = v49;
  unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((v50 - (char *)v49) >> 3);
  if (v35)
  {
    unint64_t v36 = v35 - 1;
    if (v35 == 1)
    {
      sub_922B88((char *)__p, v49);
      sub_922C20((uint64_t)a4, (long long *)__p);
      sub_927A08((uint64_t)__p);
    }
    else
    {
      uint64_t v46 = 0;
      size_t v47 = 0;
      int64_t v48 = 0;
      v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
      v45.__r_.__value_.__s.__data_[8] = 0;
      if (v36 >= 0xAAAAAAAAAAAAAABLL) {
        sub_2E00();
      }
      long long v37 = operator new(v50 - (char *)v49 - 24);
      size_t v38 = (size_t)&v37[24 * v36];
      uint64_t v46 = v37;
      int64_t v48 = v38;
      do
      {
        *(void *)long long v37 = 10;
        v37[23] = 1;
        v37 += 24;
      }
      while (v37 != (unsigned char *)v38);
      size_t v47 = v38;
      sub_92A878((uint64_t)__p, &v49, (uint64_t *)&v46, 1);
      sub_922C20((uint64_t)a4, (long long *)__p);
      sub_927A08((uint64_t)__p);
      long long v39 = v46;
      if (v46)
      {
        size_t v40 = v47;
        long long v41 = v46;
        if ((void *)v47 != v46)
        {
          do
          {
            if (*(char *)(v40 - 1) < 0) {
              operator delete(*(void **)(v40 - 24));
            }
            v40 -= 24;
          }
          while ((void *)v40 != v39);
          long long v41 = v46;
        }
        size_t v47 = (size_t)v39;
        operator delete(v41);
      }
    }
    long long v34 = v49;
  }
  if (v34)
  {
    uint64_t v42 = v50;
    int v43 = v34;
    if (v50 != (char *)v34)
    {
      do
      {
        if (*(v42 - 1) < 0) {
          operator delete(*((void **)v42 - 3));
        }
        v42 -= 24;
      }
      while (v42 != (char *)v34);
      int v43 = v49;
    }
    long long v50 = (char *)v34;
    operator delete(v43);
  }
}

void sub_9267AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  *(void *)(v16 - 80) = v15;
  if (*(char *)(v16 - 89) < 0)
  {
    operator delete(*(void **)(v16 - 112));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_6:
      sub_1A668((void **)(v16 - 88));
      sub_927A08(v14);
      _Unwind_Resume(a1);
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(__p);
  sub_1A668((void **)(v16 - 88));
  sub_927A08(v14);
  _Unwind_Resume(a1);
}

BOOL sub_9268E4(uint64_t a1)
{
  return sub_9DCB10(a1, *(void *)(*(void *)(a1 + 72) + 48), *(void *)(*(void *)(a1 + 72) + 56));
}

void sub_9268F0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_9DB8E0(a1, a2);
  if (sub_9DCB10(a1, *(void *)(*(void *)(a1 + 72) + 48), *(void *)(*(void *)(a1 + 72) + 56)))
  {
    uint64_t v4 = (uint64_t *)sub_9DCD2C(a1, **(void **)(a1 + 80) + 168 * *(void *)(*(void *)(a1 + 72) + 56));
    sub_994EAC(v4, (uint64_t)&__str);
    char v7 = 18;
    strcpy(__p, "{nextBoardStation}");
    uint64_t v9 = __p;
    uint64_t v5 = sub_7AE4E0(a2, (uint64_t)__p, (uint64_t)&unk_20F06E0, (long long **)&v9);
    std::string::operator=((std::string *)(v5 + 40), &__str);
    if ((v7 & 0x80000000) == 0)
    {
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_6:
      operator delete(__str.__r_.__value_.__l.__data_);
      return;
    }
    operator delete(*(void **)__p);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_6;
    }
  }
}

void sub_9269E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      sub_50828(v20);
      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  sub_50828(v20);
  _Unwind_Resume(a1);
}

void sub_926A30(_Unwind_Exception *a1)
{
  sub_50828(v1);
  _Unwind_Resume(a1);
}

void sub_926A44(_Unwind_Exception *a1)
{
  sub_50828(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_926A58(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = (void *)sub_9DCD3C(a1, a3, a4);
  *uint64_t v6 = off_243B628;
  sub_48381C((uint64_t)(v6 + 64), a2);
  return a1;
}

void sub_926AB8(_Unwind_Exception *a1)
{
  sub_921ED8(v1);
  _Unwind_Resume(a1);
}

void sub_926ACC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  sub_9DB8E0(a1, (uint64_t)__p);
  sub_861BC(a2, (uint64_t *)__p);
  uint64_t v4 = (void **)v9;
  if (v9)
  {
    do
    {
      char v7 = (void **)*v4;
      if (*((char *)v4 + 63) < 0)
      {
        operator delete(v4[5]);
        if (*((char *)v4 + 39) < 0) {
LABEL_11:
        }
          operator delete(v4[2]);
      }
      else if (*((char *)v4 + 39) < 0)
      {
        goto LABEL_11;
      }
      operator delete(v4);
      uint64_t v4 = v7;
    }
    while (v7);
  }
  uint64_t v5 = __p[0];
  __p[0] = 0;
  if (v5) {
    operator delete(v5);
  }
  HIBYTE(v9) = 13;
  strcpy((char *)__p, "{Destination}");
  size_t v10 = __p;
  uint64_t v6 = sub_7AE4E0(a2, (uint64_t)__p, (uint64_t)&unk_20F06E0, (long long **)&v10);
  std::string::operator=((std::string *)(v6 + 40), (const std::string *)(a1 + 632));
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
}

void sub_926BF8(_Unwind_Exception *a1)
{
  sub_50828(v1);
  _Unwind_Resume(a1);
}

void sub_926C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_50828(v15);
  _Unwind_Resume(a1);
}

void sub_926C30(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a2 == 1 && !a3)
  {
    HIBYTE(__p[2]) = 9;
    strcpy((char *)__p, "Arrive_At");
    sub_922B88((char *)a4, (long long *)__p);
    goto LABEL_4;
  }
  uint64_t v5 = *(void *)(a1 + 72);
  if (!*(unsigned char *)(v5 + 1916))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  if (a2 == 1 && a3 == 1)
  {
    if (*(char *)(a1 + 655) < 0)
    {
      int v6 = *(_DWORD *)(v5 + 1912);
      BOOL v7 = v6 == 1;
      if (*(void *)(a1 + 640)) {
        goto LABEL_11;
      }
    }
    else
    {
      int v6 = *(_DWORD *)(v5 + 1912);
      BOOL v7 = v6 == 1;
      if (*(unsigned char *)(a1 + 655))
      {
LABEL_11:
        if (!v7)
        {
          if (v6 == 2)
          {
            __p[0] = operator new(0x20uLL);
            *(_OWORD *)&__p[1] = xmmword_20B91C0;
            strcpy((char *)__p[0], "Arrive_Destination_Right");
          }
          else
          {
            __p[0] = operator new(0x20uLL);
            *(_OWORD *)&__p[1] = xmmword_20B8E90;
            strcpy((char *)__p[0], "Arrive_Destination_Unknown_Side");
          }
LABEL_14:
          sub_922B88((char *)a4, (long long *)__p);
          goto LABEL_4;
        }
        __p[0] = operator new(0x19uLL);
        *(_OWORD *)&__p[1] = xmmword_20B9250;
        strcpy((char *)__p[0], "Arrive_Destination_Left");
        sub_922B88((char *)a4, (long long *)__p);
        goto LABEL_4;
      }
    }
    if (!v7)
    {
      if (v6 == 2)
      {
        HIBYTE(__p[2]) = 12;
        strcpy((char *)__p, "Arrive_Right");
      }
      else
      {
        HIBYTE(__p[2]) = 19;
        strcpy((char *)__p, "Arrive_Unknown_Side");
      }
      goto LABEL_14;
    }
    HIBYTE(__p[2]) = 11;
    strcpy((char *)__p, "Arrive_Left");
    sub_922B88((char *)a4, (long long *)__p);
LABEL_4:
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    return;
  }
  *(_OWORD *)(a4 + 208) = 0u;
  *(_OWORD *)(a4 + 224) = 0u;
  *(_OWORD *)(a4 + 176) = 0u;
  *(_OWORD *)(a4 + 192) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(_OWORD *)(a4 + 160) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;

  sub_922B20((_OWORD *)a4);
}

void sub_926F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_926F38(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = sub_9DCD3C(a1, a2, a3);
  *(void *)uint64_t v4 = &off_243B6D8;
  *(unsigned char *)(v4 + 512) = 0;
  *(unsigned char *)(a1 + 512) = sub_926F9C(v4);
  return a1;
}

void sub_926F88(_Unwind_Exception *a1)
{
  sub_921ED8(v1);
  _Unwind_Resume(a1);
}

BOOL sub_926F9C(uint64_t a1)
{
  sub_9DBE70(a1, (uint64_t)&__p);
  if ((char)v33 < 0)
  {
    uint64_t v3 = v32;
    operator delete(__p);
    if (v3) {
      return 0;
    }
  }
  else if (v33)
  {
    return 0;
  }
  if (*(char *)(a1 + 159) < 0)
  {
    if (!*(void *)(a1 + 144)) {
      goto LABEL_10;
    }
  }
  else if (!*(unsigned char *)(a1 + 159))
  {
LABEL_10:
    sub_9DBE78(a1, (uint64_t)&__p);
    uint64_t v4 = v33;
    if ((v33 & 0x80u) != 0) {
      uint64_t v4 = v32;
    }
    if (v4)
    {
      BOOL v5 = *(unsigned char *)(a1 + 216) != 0;
      if (((char)v33 & 0x80000000) == 0) {
        goto LABEL_14;
      }
    }
    else
    {
      BOOL v5 = 1;
      if (((char)v33 & 0x80000000) == 0)
      {
LABEL_14:
        if (v5) {
          return 1;
        }
        goto LABEL_18;
      }
    }
    operator delete(__p);
    if (v5) {
      return 1;
    }
  }
LABEL_18:
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  while (v6 != v7)
  {
    uint64_t v9 = *(_DWORD **)(v6 - 8);
    v6 -= 8;
    int v8 = v9;
    if (*v9 == 2) {
      goto LABEL_23;
    }
  }
  int v8 = *(_DWORD **)(v7 - 8);
LABEL_23:
  if (!*((unsigned char *)v8 + 792)) {
    goto LABEL_51;
  }
  uint64_t v10 = *(void *)(a1 + 80);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = *((void *)v8 + 94);
  unint64_t v13 = 0x66FD0EB66FD0EB67 * ((*(void *)(v10 + 80) - v11) >> 3);
  if (v13 <= v12) {
    goto LABEL_52;
  }
  uint64_t v14 = *(void *)(a1 + 72);
  if (!*(unsigned char *)(v14 + 792))
  {
LABEL_51:
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  unint64_t v15 = *(void *)(v14 + 752);
  if (v13 <= v15) {
LABEL_52:
  }
    sub_66748();
  if (*(void *)(v11 + 696 * v12 + 64) != *(void *)(v11 + 696 * v15 + 64)) {
    return 0;
  }
  uint64_t v16 = *(unsigned __int8 ***)(a1 + 168);
  if (v16 == *(unsigned __int8 ***)(a1 + 176)) {
    return 1;
  }
  int v17 = (unsigned __int8 *)*((void *)v8 + 28);
  if (v17 == *((unsigned __int8 **)v8 + 29)) {
    return 0;
  }
  uint64_t v18 = v17[23];
  if ((v18 & 0x80u) == 0) {
    int v19 = (unsigned __int8 *)v17[23];
  }
  else {
    int v19 = (unsigned __int8 *)*((void *)v17 + 1);
  }
  uint64_t v20 = (unsigned __int8 *)*((unsigned __int8 *)v16 + 23);
  int v21 = (char)v20;
  if ((char)v20 < 0) {
    uint64_t v20 = v16[1];
  }
  if (v19 != v20) {
    return 0;
  }
  if (v21 >= 0) {
    uint64_t v22 = *(unsigned __int8 **)(a1 + 168);
  }
  else {
    uint64_t v22 = *v16;
  }
  if ((v18 & 0x80) != 0) {
    return memcmp(*(const void **)v17, v22, *((void *)v17 + 1)) == 0;
  }
  if (!v17[23]) {
    return 1;
  }
  uint64_t v23 = v18 - 1;
  do
  {
    int v25 = *v17++;
    int v24 = v25;
    int v27 = *v22++;
    int v26 = v27;
    BOOL v29 = v23-- != 0;
    BOOL result = v24 == v26;
  }
  while (v24 == v26 && v29);
  return result;
}

uint64_t sub_927200(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = sub_9DCD3C(a1, a2, a3);
  *(void *)uint64_t v4 = &off_243B6D8;
  *(unsigned char *)(v4 + 512) = 0;
  *(unsigned char *)(a1 + 512) = sub_926F9C(v4);
  return a1;
}

void sub_927250(_Unwind_Exception *a1)
{
  sub_921ED8(v1);
  _Unwind_Resume(a1);
}

void sub_927264(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)(a1 + 512))
  {
    if (a2 == 1 && !a3 || a2 == 2 && a3 == 2) {
      goto LABEL_18;
    }
  }
  else
  {
    if (a2 == 2 && a3 == 2)
    {
      std::string __p = operator new(0x58uLL);
      long long v8 = xmmword_20B9980;
      strcpy((char *)__p, "BlockTransfer_List_Tertiary_{Mode}_Becomes_System_VehicleNumber_Line_Toward_Headsign");
      sub_922B88((char *)a4, (long long *)&__p);
      goto LABEL_19;
    }
    if (a2 == 1 && !a3)
    {
      std::string __p = operator new(0x30uLL);
      long long v8 = xmmword_20B93C0;
      strcpy((char *)__p, "BlockTransfer_{Mode}_becomes_System_Line");
      sub_922B88((char *)a4, (long long *)&__p);
      goto LABEL_19;
    }
    if (a2 == 1 && a3 == 1)
    {
      std::string __p = operator new(0x38uLL);
      long long v8 = xmmword_20B99E0;
      strcpy((char *)__p, "BlockTransfer_VehicleNumber_Direction_Toward_Headsign");
      sub_922B88((char *)a4, (long long *)&__p);
      goto LABEL_19;
    }
    if (a2 == 1 && a3 == 2)
    {
LABEL_18:
      std::string __p = operator new(0x28uLL);
      long long v8 = xmmword_20E12D0;
      strcpy((char *)__p, "BlockTransfer_Remain_on_{Mode}_At_Stop");
      sub_922B88((char *)a4, (long long *)&__p);
LABEL_19:
      if (SHIBYTE(v8) < 0) {
        operator delete(__p);
      }
      return;
    }
  }
  if (*(unsigned __int8 *)(*(void *)(a1 + 88) + 1177) >= 8u && a2 == 2 && a3 == 3)
  {
    sub_9DDF1C(a1, (_OWORD *)a4);
  }
  else
  {
    *(_OWORD *)(a4 + 208) = 0u;
    *(_OWORD *)(a4 + 224) = 0u;
    *(_OWORD *)(a4 + 176) = 0u;
    *(_OWORD *)(a4 + 192) = 0u;
    *(_OWORD *)(a4 + 144) = 0u;
    *(_OWORD *)(a4 + 160) = 0u;
    *(_OWORD *)(a4 + 112) = 0u;
    *(_OWORD *)(a4 + 128) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 96) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)a4 = 0u;
    sub_922B20((_OWORD *)a4);
  }
}

void sub_9274FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_92752C(uint64_t a1)
{
  sub_921ED8(a1);

  operator delete();
}

uint64_t sub_927564(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 217);
}

uint64_t sub_92756C()
{
  return 0;
}

uint64_t sub_927574(void *a1)
{
  *a1 = off_243B2A0;
  uint64_t v2 = (void *)a1[64];
  if (v2)
  {
    a1[65] = v2;
    operator delete(v2);
  }

  return sub_921ED8((uint64_t)a1);
}

void sub_9275D4(void *a1)
{
  *a1 = off_243B2A0;
  uint64_t v2 = (void *)a1[64];
  if (v2)
  {
    a1[65] = v2;
    operator delete(v2);
  }
  sub_921ED8((uint64_t)a1);

  operator delete();
}

uint64_t sub_927648(uint64_t a1)
{
  uint64_t v1 = a1;
  *(void *)a1 = off_243B358;
  if (*(char *)(a1 + 535) < 0)
  {
    operator delete(*(void **)(a1 + 512));
    a1 = v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  return sub_921ED8(a1);
}

void sub_9276C8(uint64_t a1)
{
  *(void *)a1 = off_243B358;
  if (*(char *)(a1 + 535) < 0) {
    operator delete(*(void **)(a1 + 512));
  }
  sub_921ED8(a1);

  operator delete();
}

void sub_927740(uint64_t a1)
{
  sub_921ED8(a1);

  operator delete();
}

uint64_t sub_927778(void *a1)
{
  *a1 = off_243B4C8;
  uint64_t v2 = a1[64];
  if (v2)
  {
    uint64_t v3 = a1[65];
    uint64_t v4 = (void *)a1[64];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[64];
    }
    a1[65] = v2;
    operator delete(v4);
  }

  return sub_921ED8((uint64_t)a1);
}

void sub_927818(void *a1)
{
  *a1 = off_243B4C8;
  uint64_t v2 = a1[64];
  if (v2)
  {
    uint64_t v3 = a1[65];
    uint64_t v4 = (void *)a1[64];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[64];
    }
    a1[65] = v2;
    operator delete(v4);
  }
  sub_921ED8((uint64_t)a1);

  operator delete();
}

void sub_9278D0(uint64_t a1)
{
  sub_921ED8(a1);

  operator delete();
}

uint64_t sub_927908(void *a1)
{
  *a1 = off_243B628;
  sub_402C7C((uint64_t)(a1 + 64));

  return sub_921ED8((uint64_t)a1);
}

void sub_927960(void *a1)
{
  *a1 = off_243B628;
  sub_402C7C((uint64_t)(a1 + 64));
  sub_921ED8((uint64_t)a1);

  operator delete();
}

void sub_9279D0(uint64_t a1)
{
  sub_921ED8(a1);

  operator delete();
}

uint64_t sub_927A08(uint64_t a1)
{
  sub_4D4B58(a1 + 80);
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 56);
    uint64_t v4 = *(void **)(a1 + 48);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 48);
    }
    *(void *)(a1 + 56) = v2;
    operator delete(v4);
  }
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void **)(a1 + 24);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 9) < 0) {
          operator delete(*(void **)(v6 - 32));
        }
        v6 -= 32;
      }
      while (v6 != v5);
      uint64_t v7 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v5;
    operator delete(v7);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_927AF0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  if (*(char *)(a2 + 39) < 0)
  {
    sub_4200((unsigned char *)(a1 + 16), *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v4;
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  int v6 = *(unsigned __int8 *)(a2 + 80);
  *(unsigned char *)(a1 + 80) = v6;
  if (v6) {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  }
  int v7 = *(unsigned __int8 *)(a2 + 792);
  *(unsigned char *)(a1 + 792) = v7;
  if (v7) {
    sub_928610(a1 + 88, a2 + 88);
  }
  int v8 = *(unsigned __int8 *)(a2 + 840);
  *(unsigned char *)(a1 + 840) = v8;
  if (v8)
  {
    uint64_t v9 = *(void *)(a2 + 800);
    *(_DWORD *)(a1 + 808) = *(_DWORD *)(a2 + 808);
    *(void *)(a1 + 800) = v9;
    uint64_t v10 = (unsigned char *)(a1 + 816);
    if (*(char *)(a2 + 839) < 0)
    {
      sub_4200(v10, *(void **)(a2 + 816), *(void *)(a2 + 824));
    }
    else
    {
      long long v11 = *(_OWORD *)(a2 + 816);
      *(void *)(a1 + 832) = *(void *)(a2 + 832);
      *(_OWORD *)uint64_t v10 = v11;
    }
  }
  int v12 = *(unsigned __int8 *)(a2 + 952);
  *(unsigned char *)(a1 + 952) = v12;
  if (v12) {
    sub_928C94(a1 + 848, (long long *)(a2 + 848));
  }
  int v13 = *(unsigned __int8 *)(a2 + 1000);
  *(unsigned char *)(a1 + 1000) = v13;
  if (v13)
  {
    int v14 = *(_DWORD *)(a2 + 960);
    *(unsigned char *)(a1 + 964) = *(unsigned char *)(a2 + 964);
    *(_DWORD *)(a1 + 960) = v14;
    *(void *)(a1 + 968) = 0;
    *(void *)(a1 + 984) = 0;
    *(void *)(a1 + 976) = 0;
    unint64_t v15 = *(unsigned char **)(a2 + 968);
    uint64_t v16 = *(unsigned char **)(a2 + 976);
    int64_t v17 = v16 - v15;
    if (v16 != v15)
    {
      if (v17 < 0) {
        sub_2E00();
      }
      uint64_t v18 = (char *)operator new(v16 - v15);
      *(void *)(a1 + 968) = v18;
      *(void *)(a1 + 976) = v18;
      int v19 = &v18[8 * (v17 >> 3)];
      *(void *)(a1 + 984) = v19;
      memcpy(v18, v15, v17);
      *(void *)(a1 + 976) = v19;
    }
    *(void *)(a1 + 992) = *(void *)(a2 + 992);
  }
  *(_DWORD *)(a1 + 1008) = *(_DWORD *)(a2 + 1008);
  sub_928EE4(a1 + 1016, a2 + 1016);
  sub_929078((void *)(a1 + 1600), (uint64_t *)(a2 + 1600));
  sub_4F58AC(a1 + 1696, a2 + 1696);
  *(unsigned char *)(a1 + 1856) = *(unsigned char *)(a2 + 1856);
  *(void *)(a1 + 1864) = 0;
  *(void *)(a1 + 1880) = 0;
  *(void *)(a1 + 1872) = 0;
  sub_9293AC(a1 + 1864, *(void *)(a2 + 1864), *(void *)(a2 + 1872), 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(void *)(a2 + 1872) - *(void *)(a2 + 1864)) >> 4));
  long long v20 = *(_OWORD *)(a2 + 1888);
  *(void *)(a1 + 1904) = *(void *)(a2 + 1904);
  *(_OWORD *)(a1 + 1888) = v20;
  int v21 = *(unsigned __int8 *)(a2 + 1916);
  *(unsigned char *)(a1 + 1916) = v21;
  if (v21) {
    *(_DWORD *)(a1 + 1912) = *(_DWORD *)(a2 + 1912);
  }
  *(void *)(a1 + 1936) = 0;
  *(_OWORD *)(a1 + 1920) = 0u;
  uint64_t v22 = *(unsigned char **)(a2 + 1920);
  uint64_t v23 = *(unsigned char **)(a2 + 1928);
  int64_t v24 = v23 - v22;
  if (v23 != v22)
  {
    if (v24 < 0) {
      sub_2E00();
    }
    int v25 = (char *)operator new(v23 - v22);
    *(void *)(a1 + 1920) = v25;
    *(void *)(a1 + 1928) = v25;
    int v26 = &v25[8 * (v24 >> 3)];
    *(void *)(a1 + 1936) = v26;
    memcpy(v25, v22, v24);
    *(void *)(a1 + 1928) = v26;
  }
  *(void *)(a1 + 1960) = 0;
  *(_OWORD *)(a1 + 1944) = 0u;
  int v27 = *(unsigned char **)(a2 + 1944);
  std::string::size_type v28 = *(unsigned char **)(a2 + 1952);
  int64_t v29 = v28 - v27;
  if (v28 != v27)
  {
    if (v29 < 0) {
      sub_2E00();
    }
    long long v30 = (char *)operator new(v28 - v27);
    *(void *)(a1 + 1944) = v30;
    *(void *)(a1 + 1952) = v30;
    int v31 = &v30[8 * (v29 >> 3)];
    *(void *)(a1 + 1960) = v31;
    memcpy(v30, v27, v29);
    *(void *)(a1 + 1952) = v31;
  }
  long long v32 = *(_OWORD *)(a2 + 1968);
  *(_OWORD *)(a1 + 1984) = *(_OWORD *)(a2 + 1984);
  *(_OWORD *)(a1 + 1968) = v32;
  *(void *)(a1 + 2000) = 0;
  *(void *)(a1 + 2016) = 0;
  *(void *)(a1 + 2008) = 0;
  unsigned __int8 v33 = *(unsigned char **)(a2 + 2000);
  long long v34 = *(unsigned char **)(a2 + 2008);
  int64_t v35 = v34 - v33;
  if (v34 != v33)
  {
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v35 >> 2)) >= 0x924924924924925) {
      sub_2E00();
    }
    unint64_t v36 = (char *)operator new(v35);
    *(void *)(a1 + 2000) = v36;
    *(void *)(a1 + 2008) = v36;
    long long v37 = &v36[4 * (v35 >> 2)];
    *(void *)(a1 + 2016) = v37;
    memcpy(v36, v33, v35);
    *(void *)(a1 + 2008) = v37;
  }
  int v38 = *(unsigned __int8 *)(a2 + 2104);
  *(unsigned char *)(a1 + 2104) = v38;
  if (v38) {
    sub_9296F8(a1 + 2024, a2 + 2024);
  }
  int v39 = *(unsigned __int8 *)(a2 + 2144);
  *(unsigned char *)(a1 + 2144) = v39;
  if (v39)
  {
    *(void *)(a1 + 2120) = 0;
    *(void *)(a1 + 2112) = 0;
    *(void *)(a1 + 2128) = 0;
    sub_92980C((unsigned char *)(a1 + 2112), *(void *)(a2 + 2112), *(void *)(a2 + 2120), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 2120) - *(void *)(a2 + 2112)) >> 4));
    *(void *)(a1 + 2136) = *(void *)(a2 + 2136);
  }
  *(void *)(a1 + 2168) = 0;
  *(_OWORD *)(a1 + 2152) = 0u;
  size_t v40 = *(unsigned char **)(a2 + 2152);
  long long v41 = *(unsigned char **)(a2 + 2160);
  int64_t v42 = v41 - v40;
  if (v41 != v40)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v42 >> 2) >= 0x1555555555555556) {
      sub_2E00();
    }
    int v43 = (char *)operator new(v42);
    *(void *)(a1 + 2152) = v43;
    *(void *)(a1 + 2160) = v43;
    char v44 = &v43[4 * (v42 >> 2)];
    *(void *)(a1 + 2168) = v44;
    memcpy(v43, v40, v42);
    *(void *)(a1 + 2160) = v44;
  }
  long long v45 = *(_OWORD *)(a2 + 2176);
  *(void *)(a1 + 2192) = *(void *)(a2 + 2192);
  *(_OWORD *)(a1 + 2176) = v45;
  *(void *)(a1 + 2200) = 0;
  *(void *)(a1 + 2216) = 0;
  *(void *)(a1 + 2208) = 0;
  uint64_t v46 = *(unsigned char **)(a2 + 2200);
  size_t v47 = *(unsigned char **)(a2 + 2208);
  uint64_t v48 = v47 - v46;
  if (v47 != v46)
  {
    if (v48 < 0) {
      sub_2E00();
    }
    long long v49 = (char *)operator new(v47 - v46);
    *(void *)(a1 + 2200) = v49;
    *(void *)(a1 + 2208) = v49;
    long long v50 = &v49[16 * (v48 >> 4)];
    *(void *)(a1 + 2216) = v50;
    memcpy(v49, v46, v48 - 7);
    *(void *)(a1 + 2208) = v50;
  }
  sub_9299FC(a1 + 2224, a2 + 2224);
  *(void *)(a1 + 3440) = 0;
  *(_OWORD *)(a1 + 3424) = 0u;
  sub_929F40(a1 + 3424, *(void *)(a2 + 3424), *(void *)(a2 + 3432), 0x34F72C234F72C235 * ((uint64_t)(*(void *)(a2 + 3432) - *(void *)(a2 + 3424)) >> 4));
  *(void *)(a1 + 3464) = 0;
  *(_OWORD *)(a1 + 3448) = 0u;
  unint64_t v51 = *(unsigned char **)(a2 + 3448);
  long long v52 = *(unsigned char **)(a2 + 3456);
  int64_t v53 = v52 - v51;
  if (v52 != v51)
  {
    if (v53 < 0) {
      sub_2E00();
    }
    int v54 = (char *)operator new(v52 - v51);
    *(void *)(a1 + 3448) = v54;
    *(void *)(a1 + 3456) = v54;
    char v55 = &v54[8 * (v53 >> 3)];
    *(void *)(a1 + 3464) = v55;
    memcpy(v54, v51, v53);
    *(void *)(a1 + 3456) = v55;
  }
  *(void *)(a1 + 3488) = 0;
  *(_OWORD *)(a1 + 3472) = 0u;
  long long v56 = *(unsigned char **)(a2 + 3472);
  uint64_t v57 = *(unsigned char **)(a2 + 3480);
  int64_t v58 = v57 - v56;
  if (v57 != v56)
  {
    if (v58 < 0) {
      sub_2E00();
    }
    uint64_t v59 = (char *)operator new(v57 - v56);
    *(void *)(a1 + 3472) = v59;
    *(void *)(a1 + 3480) = v59;
    uint64_t v60 = &v59[8 * (v58 >> 3)];
    *(void *)(a1 + 3488) = v60;
    memcpy(v59, v56, v58);
    *(void *)(a1 + 3480) = v60;
  }
  sub_598C04(a1 + 3496, (uint64_t *)(a2 + 3496));
  sub_598C04(a1 + 4584, (uint64_t *)(a2 + 4584));
  *(unsigned char *)(a1 + 5672) = *(unsigned char *)(a2 + 5672);
  *(void *)(a1 + 5680) = 0;
  *(void *)(a1 + 5696) = 0;
  *(void *)(a1 + 5688) = 0;
  uint64_t v61 = *(unsigned char **)(a2 + 5680);
  uint64_t v62 = *(unsigned char **)(a2 + 5688);
  int64_t v63 = v62 - v61;
  if (v62 != v61)
  {
    if (v63 < 0) {
      sub_2E00();
    }
    unsigned int v64 = (char *)operator new(v63);
    *(void *)(a1 + 5680) = v64;
    *(void *)(a1 + 5688) = v64;
    uint64_t v65 = &v64[8 * (v63 >> 3)];
    *(void *)(a1 + 5696) = v65;
    memcpy(v64, v61, v63);
    *(void *)(a1 + 5688) = v65;
  }
  return a1;
}

void sub_9281A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, void **a13, void **a14, void **a15, uint64_t *a16, void **a17, void **a18, uint64_t a19, uint64_t a20)
{
  sub_4F2BD0(v22);
  std::string::size_type v28 = *v25;
  if (*v25)
  {
    *(void *)(v20 + 3480) = v28;
    operator delete(v28);
  }
  int64_t v29 = *v21;
  if (*v21)
  {
    *(void *)(v20 + 3456) = v29;
    operator delete(v29);
  }
  sub_9283F8(v24);
  sub_92A344(v23);
  long long v30 = *a11;
  if (*a11)
  {
    *(void *)(v20 + 2208) = v30;
    operator delete(v30);
  }
  int v31 = *a13;
  if (*a13)
  {
    *(void *)(v20 + 2160) = v31;
    operator delete(v31);
  }
  sub_928454(a12);
  long long v32 = *a14;
  if (*a14)
  {
    *(void *)(v20 + 2008) = v32;
    operator delete(v32);
  }
  unsigned __int8 v33 = *a15;
  if (*a15)
  {
    *(void *)(v20 + 1952) = v33;
    operator delete(v33);
    long long v34 = *a17;
    if (!*a17)
    {
LABEL_13:
      if (!*(unsigned char *)(v20 + 1916)) {
        goto LABEL_15;
      }
      goto LABEL_14;
    }
  }
  else
  {
    long long v34 = *a17;
    if (!*a17) {
      goto LABEL_13;
    }
  }
  *(void *)(v20 + 1928) = v34;
  operator delete(v34);
  if (!*(unsigned char *)(v20 + 1916))
  {
LABEL_15:
    sub_928500(a16);
    sub_92853C(a18);
    if (*(unsigned char *)(v20 + 1000))
    {
      int64_t v35 = *(void **)(v20 + 968);
      if (v35)
      {
        *(void *)(v20 + 976) = v35;
        operator delete(v35);
      }
      *(unsigned char *)(v20 + 1000) = 0;
    }
    sub_928580(a19);
    if (*(unsigned char *)(v20 + 840))
    {
      if (*(char *)(v20 + 839) < 0) {
        operator delete(*(void **)(v20 + 816));
      }
      *(unsigned char *)(v20 + 840) = 0;
    }
    if (*(unsigned char *)(v20 + 792))
    {
      sub_92A428(a20);
      *(unsigned char *)(v20 + 792) = 0;
    }
    if (*(unsigned char *)(v20 + 80)) {
      *(unsigned char *)(v20 + 80) = 0;
    }
    if (*(char *)(v20 + 39) < 0) {
      operator delete(*v26);
    }
    _Unwind_Resume(a1);
  }
LABEL_14:
  *(unsigned char *)(v20 + 1916) = 0;
  goto LABEL_15;
}

void sub_9283BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  if (!*a14) {
    JUMPOUT(0x9282E4);
  }
  JUMPOUT(0x9282DCLL);
}

void sub_9283D4()
{
}

void sub_9283E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  if (*a17) {
    JUMPOUT(0x9283A8);
  }
  JUMPOUT(0x9282FCLL);
}

void **sub_9283F8(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    long long v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_92A294(v3 - 464);
      while ((void *)v3 != v2);
      long long v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_928454(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 120))
  {
    uint64_t v2 = *(void *)(a1 + 88);
    if (v2)
    {
      uint64_t v3 = *(void *)(a1 + 96);
      long long v4 = *(void **)(a1 + 88);
      if (v3 != v2)
      {
        do
        {
          if (*(char *)(v3 - 17) < 0) {
            operator delete(*(void **)(v3 - 40));
          }
          v3 -= 48;
        }
        while (v3 != v2);
        long long v4 = *(void **)(a1 + 88);
      }
      *(void *)(a1 + 96) = v2;
      operator delete(v4);
    }
    *(unsigned char *)(a1 + 120) = 0;
  }
  if (*(unsigned char *)(a1 + 80))
  {
    long long v5 = *(void **)(a1 + 48);
    if (v5)
    {
      *(void *)(a1 + 56) = v5;
      operator delete(v5);
    }
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*(void **)(a1 + 8));
    }
    *(unsigned char *)(a1 + 80) = 0;
  }
  return a1;
}

uint64_t *sub_928500(uint64_t *a1)
{
  if (*a1)
  {
    sub_929634((uint64_t)a1, *a1);
    operator delete((void *)*a1);
  }
  return a1;
}

void **sub_92853C(void **a1)
{
  sub_4D4B58((uint64_t)(a1 + 85));
  sub_929188(a1 + 73);

  return sub_92928C(a1);
}

uint64_t sub_928580(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 104))
  {
    uint64_t v2 = *(void **)(a1 + 72);
    if (v2)
    {
      *(void *)(a1 + 80) = v2;
      operator delete(v2);
    }
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 40);
      long long v5 = *(void **)(a1 + 32);
      if (v4 != v3)
      {
        do
        {
          if (*(char *)(v4 - 9) < 0) {
            operator delete(*(void **)(v4 - 32));
          }
          v4 -= 40;
        }
        while (v4 != v3);
        long long v5 = *(void **)(a1 + 32);
      }
      *(void *)(a1 + 40) = v3;
      operator delete(v5);
    }
    *(unsigned char *)(a1 + 104) = 0;
  }
  return a1;
}

uint64_t sub_928610(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 63) = *(void *)(a2 + 63);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  int v7 = *(unsigned __int8 *)(a2 + 128);
  *(unsigned char *)(a1 + 128) = v7;
  if (v7)
  {
    if (*(char *)(a2 + 95) < 0)
    {
      sub_4200((unsigned char *)(a1 + 72), *(void **)(a2 + 72), *(void *)(a2 + 80));
    }
    else
    {
      long long v8 = *(_OWORD *)(a2 + 72);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(_OWORD *)(a1 + 72) = v8;
    }
    *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
    uint64_t v9 = (unsigned char *)(a1 + 104);
    if (*(char *)(a2 + 127) < 0)
    {
      sub_4200(v9, *(void **)(a2 + 104), *(void *)(a2 + 112));
    }
    else
    {
      long long v10 = *(_OWORD *)(a2 + 104);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(_OWORD *)uint64_t v9 = v10;
    }
  }
  sub_8E7908((char **)(a1 + 136), (long long **)(a2 + 136));
  if (*(char *)(a2 + 183) < 0)
  {
    sub_4200((unsigned char *)(a1 + 160), *(void **)(a2 + 160), *(void *)(a2 + 168));
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 160);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = v11;
  }
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  if (*(char *)(a2 + 215) < 0)
  {
    sub_4200((unsigned char *)(a1 + 192), *(void **)(a2 + 192), *(void *)(a2 + 200));
  }
  else
  {
    long long v12 = *(_OWORD *)(a2 + 192);
    *(void *)(a1 + 208) = *(void *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = v12;
  }
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  sub_4F57A0(a1 + 224, a2 + 224);
  *(unsigned char *)(a1 + 336) = *(unsigned char *)(a2 + 336);
  *(unsigned char *)(a1 + 344) = *(unsigned char *)(a2 + 344);
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 352) = 0;
  int v14 = *(unsigned char **)(a2 + 352);
  int v13 = *(unsigned char **)(a2 + 360);
  int64_t v15 = v13 - v14;
  if (v13 != v14)
  {
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v15 >> 2)) > 0x924924924924924) {
      sub_2E00();
    }
    uint64_t v16 = (char *)operator new(v15);
    *(void *)(a1 + 352) = v16;
    *(void *)(a1 + 360) = v16;
    int64_t v17 = &v16[4 * (v15 >> 2)];
    *(void *)(a1 + 368) = v17;
    memcpy(v16, v14, v15);
    *(void *)(a1 + 360) = v17;
  }
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  int v19 = *(unsigned char **)(a2 + 376);
  uint64_t v18 = *(unsigned char **)(a2 + 384);
  int64_t v20 = v18 - v19;
  if (v18 != v19)
  {
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v20 >> 2)) > 0x924924924924924) {
      sub_2E00();
    }
    int v21 = (char *)operator new(v20);
    *(void *)(a1 + 376) = v21;
    *(void *)(a1 + 384) = v21;
    uint64_t v22 = &v21[4 * (v20 >> 2)];
    *(void *)(a1 + 392) = v22;
    memcpy(v21, v19, v20);
    *(void *)(a1 + 384) = v22;
  }
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  int64_t v24 = *(unsigned char **)(a2 + 400);
  uint64_t v23 = *(unsigned char **)(a2 + 408);
  int64_t v25 = v23 - v24;
  if (v23 != v24)
  {
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v25 >> 2)) > 0x924924924924924) {
      sub_2E00();
    }
    int v26 = (char *)operator new(v25);
    *(void *)(a1 + 400) = v26;
    *(void *)(a1 + 408) = v26;
    int v27 = &v26[4 * (v25 >> 2)];
    *(void *)(a1 + 416) = v27;
    memcpy(v26, v24, v25);
    *(void *)(a1 + 408) = v27;
  }
  uint64_t v28 = *(void *)(a2 + 424);
  *(_DWORD *)(a1 + 432) = *(_DWORD *)(a2 + 432);
  *(void *)(a1 + 424) = v28;
  LODWORD(v28) = *(unsigned __int8 *)(a2 + 496);
  *(unsigned char *)(a1 + 496) = v28;
  if (v28)
  {
    if (*(char *)(a2 + 463) < 0)
    {
      sub_4200((unsigned char *)(a1 + 440), *(void **)(a2 + 440), *(void *)(a2 + 448));
    }
    else
    {
      long long v29 = *(_OWORD *)(a2 + 440);
      *(void *)(a1 + 456) = *(void *)(a2 + 456);
      *(_OWORD *)(a1 + 440) = v29;
    }
    *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
    long long v30 = (unsigned char *)(a1 + 472);
    if (*(char *)(a2 + 495) < 0)
    {
      sub_4200(v30, *(void **)(a2 + 472), *(void *)(a2 + 480));
    }
    else
    {
      long long v31 = *(_OWORD *)(a2 + 472);
      *(void *)(a1 + 488) = *(void *)(a2 + 488);
      *(_OWORD *)long long v30 = v31;
    }
  }
  *(unsigned char *)(a1 + 504) = *(unsigned char *)(a2 + 504);
  sub_4F57A0(a1 + 512, a2 + 512);
  *(void *)(a1 + 624) = *(void *)(a2 + 624);
  *(void *)(a1 + 632) = 0;
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 640) = 0;
  long long v32 = *(unsigned char **)(a2 + 632);
  unsigned __int8 v33 = *(unsigned char **)(a2 + 640);
  int64_t v34 = v33 - v32;
  if (v33 != v32)
  {
    if (v34 < 0) {
      sub_2E00();
    }
    int64_t v35 = (char *)operator new(v33 - v32);
    *(void *)(a1 + 632) = v35;
    *(void *)(a1 + 640) = v35;
    unint64_t v36 = &v35[8 * (v34 >> 3)];
    *(void *)(a1 + 648) = v36;
    memcpy(v35, v32, v34);
    *(void *)(a1 + 640) = v36;
  }
  long long v37 = *(_OWORD *)(a2 + 656);
  long long v38 = *(_OWORD *)(a2 + 672);
  *(_OWORD *)(a1 + 681) = *(_OWORD *)(a2 + 681);
  *(_OWORD *)(a1 + 656) = v37;
  *(_OWORD *)(a1 + 672) = v38;
  return a1;
}

void sub_9289F0(void *a1)
{
  if (*(char *)(v1 + 463) < 0)
  {
    operator delete(*v2);
    sub_58CC(a1);
  }
  sub_58CC(a1);
}

void sub_928A18(void *a1)
{
  if (*(char *)(v2 + 95) < 0)
  {
    operator delete(*v1);
    sub_58CC(a1);
  }
  sub_58CC(a1);
}

void sub_928A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12)
{
  if (*(char *)(v12 + 183) < 0)
  {
    operator delete(*v13);
    sub_8E4FE0(a11);
    sub_928B78(a12);
    _Unwind_Resume(a1);
  }
  sub_8E4FE0(a11);
  sub_928B78(a12);
  _Unwind_Resume(a1);
}

void sub_928B40()
{
  if (*v0) {
    JUMPOUT(0x928B4CLL);
  }
  JUMPOUT(0x928AF8);
}

void sub_928B64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  if (!*a10) {
    JUMPOUT(0x928B0CLL);
  }
  JUMPOUT(0x928B04);
}

uint64_t sub_928B78(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56))
  {
    if (*(char *)(a1 + 55) < 0)
    {
      operator delete(*(void **)(a1 + 32));
      if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
        goto LABEL_4;
      }
    }
    else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    {
LABEL_4:
      *(unsigned char *)(a1 + 56) = 0;
      return a1;
    }
    operator delete(*(void **)a1);
    goto LABEL_4;
  }
  return a1;
}

uint64_t sub_928BD4(uint64_t a1)
{
  if ((*(char *)(a1 + 167) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 135) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_8:
    operator delete(*(void **)(a1 + 112));
    int v2 = *(_DWORD *)(a1 + 96);
    if (v2 != 1) {
      goto LABEL_4;
    }
LABEL_9:
    uint64_t v3 = *(void **)(a1 + 72);
    if (!v3) {
      goto LABEL_12;
    }
    *(void *)(a1 + 80) = v3;
    goto LABEL_11;
  }
  operator delete(*(void **)(a1 + 144));
  if (*(char *)(a1 + 135) < 0) {
    goto LABEL_8;
  }
LABEL_3:
  int v2 = *(_DWORD *)(a1 + 96);
  if (v2 == 1) {
    goto LABEL_9;
  }
LABEL_4:
  if (!v2 && *(char *)(a1 + 95) < 0)
  {
    uint64_t v3 = *(void **)(a1 + 72);
LABEL_11:
    operator delete(v3);
  }
LABEL_12:
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_928C94(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(_OWORD *)(a1 + 10) = *(long long *)((char *)a2 + 10);
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  sub_928D94((unsigned char *)(a1 + 32), *((void *)a2 + 4), *((void *)a2 + 5), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3));
  char v5 = *((unsigned char *)a2 + 56);
  char v6 = *((unsigned char *)a2 + 64);
  *(void *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 56) = v5;
  *(unsigned char *)(a1 + 64) = v6;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  long long v8 = (unsigned char *)*((void *)a2 + 9);
  int v7 = (unsigned char *)*((void *)a2 + 10);
  int64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0) {
      sub_2E00();
    }
    long long v10 = (char *)operator new(v7 - v8);
    *(void *)(a1 + 72) = v10;
    *(void *)(a1 + 80) = v10;
    long long v11 = &v10[8 * (v9 >> 3)];
    *(void *)(a1 + 88) = v11;
    memcpy(v10, v8, v9);
    *(void *)(a1 + 80) = v11;
  }
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  return a1;
}

void sub_928D6C(_Unwind_Exception *a1)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 80) = v4;
    operator delete(v4);
  }
  sub_20AC584((void **)(v1 + 32), v1);
  _Unwind_Resume(a1);
}

unsigned char *sub_928D94(unsigned char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    char v5 = result;
    if (a4 >= 0x666666666666667) {
      sub_2E00();
    }
    BOOL result = operator new(40 * a4);
    long long v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = &result[40 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = a2 + v9;
        *(void *)&v8[v9] = *(void *)(a2 + v9);
        BOOL result = &v8[v9 + 8];
        long long v11 = (void **)(a2 + v9 + 8);
        if (*(char *)(a2 + v9 + 31) < 0)
        {
          BOOL result = sub_4200(result, *v11, *(void *)(v10 + 16));
        }
        else
        {
          *(_OWORD *)BOOL result = *(_OWORD *)v11;
          *(void *)&v8[v9 + 24] = *(void *)(a2 + v9 + 24);
        }
        v8[v9 + 32] = *(unsigned char *)(v10 + 32);
        v9 += 40;
      }
      while (v10 + 40 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_928E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_928EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 40)
  {
    if (*(char *)(v10 + v11 - 9) < 0) {
      operator delete(*(void **)(v10 + v11 - 32));
    }
  }
  *(void *)(v9 + 8) = v10;
  sub_4F6254(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_928EE4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_5950E8(a1, *(void *)a2, *(void *)(a2 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5));
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_5950E8(a1 + 24, *(void *)(a2 + 24), *(void *)(a2 + 32), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 5));
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  sub_5950E8(a1 + 48, *(void *)(a2 + 48), *(void *)(a2 + 56), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 5));
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  sub_5950E8(a1 + 72, *(void *)(a2 + 72), *(void *)(a2 + 80), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 5));
  sub_4F58AC(a1 + 96, a2 + 96);
  sub_4F58AC(a1 + 256, a2 + 256);
  sub_4F58AC(a1 + 416, a2 + 416);
  *(unsigned char *)(a1 + 576) = *(unsigned char *)(a2 + 576);
  return a1;
}

void sub_928FF4(_Unwind_Exception *a1)
{
  sub_4D4B58(v6);
  sub_4D4B58(v5);
  sub_59213C(v4);
  sub_59213C(v3);
  sub_59213C(v2);
  sub_59213C(v1);
  _Unwind_Resume(a1);
}

void sub_929048(_Unwind_Exception *a1)
{
  sub_59213C(v2);
  sub_59213C(v1);
  _Unwind_Resume(a1);
}

void sub_929064(_Unwind_Exception *a1)
{
  sub_59213C(v1);
  _Unwind_Resume(a1);
}

void *sub_929078(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_5950E8((uint64_t)a1, *a2, a2[1], 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 5));
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  sub_5950E8((uint64_t)(a1 + 3), a2[3], a2[4], 0xCCCCCCCCCCCCCCCDLL * ((a2[4] - a2[3]) >> 5));
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  sub_5950E8((uint64_t)(a1 + 6), a2[6], a2[7], 0xCCCCCCCCCCCCCCCDLL * ((a2[7] - a2[6]) >> 5));
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  sub_5950E8((uint64_t)(a1 + 9), a2[9], a2[10], 0xCCCCCCCCCCCCCCCDLL * ((a2[10] - a2[9]) >> 5));
  return a1;
}

void sub_929148(_Unwind_Exception *a1)
{
  sub_59213C(v3);
  sub_59213C(v2);
  sub_59213C(v1);
  _Unwind_Resume(a1);
}

void sub_929174(_Unwind_Exception *a1)
{
  sub_59213C(v1);
  _Unwind_Resume(a1);
}

void **sub_929188(void **a1)
{
  int v2 = a1[9];
  if (v2)
  {
    uint64_t v3 = (uint64_t)a1[10];
    long long v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_4D4B58(v3 - 160);
      while ((void *)v3 != v2);
      long long v4 = a1[9];
    }
    a1[10] = v2;
    operator delete(v4);
  }
  uint64_t v5 = a1[6];
  if (v5)
  {
    uint64_t v6 = (uint64_t)a1[7];
    int v7 = a1[6];
    if ((void *)v6 != v5)
    {
      do
        uint64_t v6 = sub_4D4B58(v6 - 160);
      while ((void *)v6 != v5);
      int v7 = a1[6];
    }
    a1[7] = v5;
    operator delete(v7);
  }
  long long v8 = a1[3];
  if (v8)
  {
    uint64_t v9 = (uint64_t)a1[4];
    uint64_t v10 = a1[3];
    if ((void *)v9 != v8)
    {
      do
        uint64_t v9 = sub_4D4B58(v9 - 160);
      while ((void *)v9 != v8);
      uint64_t v10 = a1[3];
    }
    a1[4] = v8;
    operator delete(v10);
  }
  uint64_t v11 = *a1;
  if (*a1)
  {
    uint64_t v12 = (uint64_t)a1[1];
    int v13 = *a1;
    if ((void *)v12 != v11)
    {
      do
        uint64_t v12 = sub_4D4B58(v12 - 160);
      while ((void *)v12 != v11);
      int v13 = *a1;
    }
    a1[1] = v11;
    operator delete(v13);
  }
  return a1;
}

void **sub_92928C(void **a1)
{
  uint64_t v2 = (uint64_t)(a1 + 32);
  sub_4D4B58((uint64_t)(a1 + 52));
  sub_4D4B58(v2);
  sub_4D4B58((uint64_t)(a1 + 12));
  uint64_t v3 = a1[9];
  if (v3)
  {
    uint64_t v4 = (uint64_t)a1[10];
    uint64_t v5 = a1[9];
    if ((void *)v4 != v3)
    {
      do
        uint64_t v4 = sub_4D4B58(v4 - 160);
      while ((void *)v4 != v3);
      uint64_t v5 = a1[9];
    }
    a1[10] = v3;
    operator delete(v5);
  }
  uint64_t v6 = a1[6];
  if (v6)
  {
    uint64_t v7 = (uint64_t)a1[7];
    long long v8 = a1[6];
    if ((void *)v7 != v6)
    {
      do
        uint64_t v7 = sub_4D4B58(v7 - 160);
      while ((void *)v7 != v6);
      long long v8 = a1[6];
    }
    a1[7] = v6;
    operator delete(v8);
  }
  uint64_t v9 = a1[3];
  if (v9)
  {
    uint64_t v10 = (uint64_t)a1[4];
    uint64_t v11 = a1[3];
    if ((void *)v10 != v9)
    {
      do
        uint64_t v10 = sub_4D4B58(v10 - 160);
      while ((void *)v10 != v9);
      uint64_t v11 = a1[3];
    }
    a1[4] = v9;
    operator delete(v11);
  }
  uint64_t v12 = *a1;
  if (*a1)
  {
    uint64_t v13 = (uint64_t)a1[1];
    int v14 = *a1;
    if ((void *)v13 != v12)
    {
      do
        uint64_t v13 = sub_4D4B58(v13 - 160);
      while ((void *)v13 != v12);
      int v14 = *a1;
    }
    a1[1] = v12;
    operator delete(v14);
  }
  return a1;
}

uint64_t sub_9293AC(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = (void *)result;
    if (a4 >= 0xF0F0F0F0F0F0F1) {
      sub_2E00();
    }
    BOOL result = (uint64_t)operator new(272 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = result + 272 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        BOOL result = sub_929520((uint64_t)(v5 + 2), v8 + v9, a2 + v9);
        v9 += 272;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_929480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_929494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_929580(v11, v12, v12, v10, v10);
  *(void *)(v9 + 8) = v10;
  sub_9294C8(&a9);
  _Unwind_Resume(a1);
}

void ***sub_9294C8(void ***a1)
{
  if (*((unsigned char *)a1 + 8)) {
    return a1;
  }
  uint64_t v3 = (uint64_t *)*a1;
  uint64_t v4 = (uint64_t)**a1;
  if (!v4) {
    return a1;
  }
  sub_929634((uint64_t)v3, v4);
  operator delete(**a1);
  return a1;
}

uint64_t sub_929520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_4F58AC(a2 + 112, a3 + 112);
}

void sub_92955C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 103) < 0) {
    operator delete(*(void **)(v1 + 80));
  }
  sub_20AC60C(v1);
  _Unwind_Resume(a1);
}

void sub_929580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 != a5)
  {
    uint64_t v6 = a3 - 264;
    do
    {
      sub_4D4B58(v6 + 104);
      if (*(char *)(v6 + 95) < 0)
      {
        operator delete(*(void **)(v6 + 72));
        if ((*(char *)(v6 + 63) & 0x80000000) == 0)
        {
LABEL_7:
          int v9 = *(_DWORD *)(v6 + 24);
          if (v9 != 1) {
            goto LABEL_8;
          }
          goto LABEL_13;
        }
      }
      else if ((*(char *)(v6 + 63) & 0x80000000) == 0)
      {
        goto LABEL_7;
      }
      operator delete(*(void **)(v6 + 40));
      int v9 = *(_DWORD *)(v6 + 24);
      if (v9 != 1)
      {
LABEL_8:
        if (v9 || (*(char *)(v6 + 23) & 0x80000000) == 0) {
          goto LABEL_4;
        }
        uint64_t v7 = *(void **)v6;
        goto LABEL_3;
      }
LABEL_13:
      uint64_t v7 = *(void **)v6;
      if (!*(void *)v6) {
        goto LABEL_4;
      }
      *(void *)(v6 + 8) = v7;
LABEL_3:
      operator delete(v7);
LABEL_4:
      uint64_t v8 = v6 - 8;
      v6 -= 272;
    }
    while (v8 != a5);
  }
}

void sub_929634(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 != a2)
  {
    uint64_t v5 = v4 - 264;
    do
    {
      sub_4D4B58(v5 + 104);
      if (*(char *)(v5 + 95) < 0)
      {
        operator delete(*(void **)(v5 + 72));
        if ((*(char *)(v5 + 63) & 0x80000000) == 0)
        {
LABEL_7:
          int v8 = *(_DWORD *)(v5 + 24);
          if (v8 != 1) {
            goto LABEL_8;
          }
          goto LABEL_13;
        }
      }
      else if ((*(char *)(v5 + 63) & 0x80000000) == 0)
      {
        goto LABEL_7;
      }
      operator delete(*(void **)(v5 + 40));
      int v8 = *(_DWORD *)(v5 + 24);
      if (v8 != 1)
      {
LABEL_8:
        if (v8 || (*(char *)(v5 + 23) & 0x80000000) == 0) {
          goto LABEL_4;
        }
        uint64_t v6 = *(void **)v5;
        goto LABEL_3;
      }
LABEL_13:
      uint64_t v6 = *(void **)v5;
      if (!*(void *)v5) {
        goto LABEL_4;
      }
      *(void *)(v5 + 8) = v6;
LABEL_3:
      operator delete(v6);
LABEL_4:
      uint64_t v7 = v5 - 8;
      v5 -= 272;
    }
    while (v7 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t sub_9296F8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_4200((unsigned char *)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  uint64_t v7 = *(unsigned char **)(a2 + 48);
  uint64_t v6 = *(unsigned char **)(a2 + 56);
  int64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0) {
      sub_2E00();
    }
    int v9 = (char *)operator new(v6 - v7);
    *(void *)(a1 + 48) = v9;
    *(void *)(a1 + 56) = v9;
    uint64_t v10 = &v9[8 * (v8 >> 3)];
    *(void *)(a1 + 64) = v10;
    memcpy(v9, v7, v8);
    *(void *)(a1 + 56) = v10;
  }
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  return a1;
}

void sub_9297D0(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 56) = v5;
    operator delete(v5);
    if ((*(char *)(v1 + 31) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 31) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  _Unwind_Resume(exception_object);
}

unsigned char *sub_92980C(unsigned char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = result;
    if (a4 >= 0x555555555555556) {
      sub_2E00();
    }
    BOOL result = operator new(48 * a4);
    int64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = &result[48 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t v11 = a2 + v9;
        *(_DWORD *)&v8[v9] = *(_DWORD *)(a2 + v9);
        BOOL result = &v8[v9 + 8];
        uint64_t v12 = (void **)(a2 + v9 + 8);
        if (*(char *)(a2 + v9 + 31) < 0)
        {
          BOOL result = sub_4200(result, *v12, *(void *)(v11 + 16));
        }
        else
        {
          *(_OWORD *)BOOL result = *(_OWORD *)v12;
          *(void *)&v8[v9 + 24] = *(void *)(a2 + v9 + 24);
        }
        uint64_t v10 = &v8[v9];
        *((_DWORD *)v10 + 8) = *(_DWORD *)(v11 + 32);
        *((_DWORD *)v10 + 10) = *(_DWORD *)(v11 + 40);
        v9 += 48;
      }
      while (v11 + 48 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_929914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_929928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 48)
  {
    if (*(char *)(v10 + v11 - 17) < 0) {
      operator delete(*(void **)(v10 + v11 - 40));
    }
  }
  *(void *)(v9 + 8) = v10;
  sub_929964(&a9);
  _Unwind_Resume(a1);
}

void ***sub_929964(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (void **)**result;
    if (v3)
    {
      long long v4 = (void **)v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 17) < 0) {
            operator delete(*(v4 - 5));
          }
          v4 -= 6;
        }
        while (v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_9299FC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_929CA8(a1, *(void *)a2, *(void *)(a2 + 8), 0x66FD0EB66FD0EB67 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v5 = *(unsigned char **)(a2 + 32);
  long long v4 = *(unsigned char **)(a2 + 40);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      sub_2E00();
    }
    uint64_t v7 = (char *)operator new(v4 - v5);
    *(void *)(a1 + 32) = v7;
    *(void *)(a1 + 40) = v7;
    int64_t v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a1 + 48) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a1 + 40) = v8;
  }
  sub_4F58AC(a1 + 56, a2 + 56);
  sub_4F58AC(a1 + 216, a2 + 216);
  sub_4F58AC(a1 + 376, a2 + 376);
  *(unsigned char *)(a1 + 536) = *(unsigned char *)(a2 + 536);
  sub_4F58AC(a1 + 544, a2 + 544);
  sub_4F58AC(a1 + 704, a2 + 704);
  *(unsigned char *)(a1 + 864) = *(unsigned char *)(a2 + 864);
  sub_4F58AC(a1 + 872, a2 + 872);
  sub_4F58AC(a1 + 1032, a2 + 1032);
  *(unsigned char *)(a1 + 1192) = *(unsigned char *)(a2 + 1192);
  return a1;
}

void sub_929B48(_Unwind_Exception *a1)
{
  sub_4D4B58(v7);
  sub_4D4B58(v6);
  sub_4D4B58(v5);
  sub_4D4B58(v4);
  sub_4D4B58(v3);
  sub_929BDC(v2);
  sub_929C18(v1);
  _Unwind_Resume(a1);
}

void sub_929BAC()
{
}

void sub_929BB4(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v4;
    operator delete(v4);
    sub_929C18((void **)v1);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x929B9CLL);
}

uint64_t sub_929BDC(uint64_t a1)
{
  sub_4D4B58(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void **sub_929C18(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        sub_4D4B58((uint64_t)(v3 - 176));
        sub_4D4B58((uint64_t)(v3 - 336));
        sub_4D4B58((uint64_t)(v3 - 504));
        sub_4D4B58((uint64_t)(v3 - 664));
        v3 -= 696;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_929CA8(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = (void *)result;
    if (a4 >= 0x5E293205E29321) {
      sub_2E00();
    }
    BOOL result = (uint64_t)operator new(696 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = result + 696 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        BOOL result = sub_929E68((uint64_t)(v5 + 2), v8 + v9, (long long *)(a2 + v9));
        v9 += 696;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_929D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_929D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  if (v11) {
    sub_20AC684(v10 + v11, v10);
  }
  *(void *)(v9 + 8) = v10;
  sub_929DB0(&a9);
  _Unwind_Resume(a1);
}

void ***sub_929DB0(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (char *)**result;
    if (v3)
    {
      uint64_t v4 = (char *)v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        do
        {
          sub_4D4B58((uint64_t)(v4 - 176));
          sub_4D4B58((uint64_t)(v4 - 336));
          sub_4D4B58((uint64_t)(v4 - 504));
          sub_4D4B58((uint64_t)(v4 - 664));
          v4 -= 696;
        }
        while (v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_929E68(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v5 = *a3;
  *(_OWORD *)(a2 + 12) = *(long long *)((char *)a3 + 12);
  *(_OWORD *)a2 = v5;
  sub_4F58AC(a2 + 32, (uint64_t)(a3 + 2));
  sub_4F58AC(a2 + 192, (uint64_t)(a3 + 12));
  *(unsigned char *)(a2 + 352) = *((unsigned char *)a3 + 352);
  sub_4F58AC(a2 + 360, (uint64_t)a3 + 360);
  uint64_t result = sub_4F58AC(a2 + 520, (uint64_t)a3 + 520);
  *(unsigned char *)(a2 + 680) = *((unsigned char *)a3 + 680);
  *(unsigned char *)(a2 + 688) = *((unsigned char *)a3 + 688);
  return result;
}

void sub_929F00(_Unwind_Exception *a1)
{
  sub_4D4B58(v3);
  sub_4D4B58(v2);
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_929F2C(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_929F40(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = (void *)result;
    if (a4 >= 0x8D3DCB08D3DCB1) {
      sub_2E00();
    }
    uint64_t result = (uint64_t)operator new(464 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = result + 464 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = sub_92A0D0(v8 + v9, a2 + v9);
        v9 += 464;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_92A004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_92A018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 464)
    sub_92A294(v10 - 464 + v11);
  *(void *)(v9 + 8) = v10;
  sub_92A048(&a9);
  _Unwind_Resume(a1);
}

void ***sub_92A048(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = (uint64_t)v2[1];
      long long v5 = **v1;
      if ((void *)v4 != v3)
      {
        do
          uint64_t v4 = sub_92A294(v4 - 464);
        while ((void *)v4 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_92A0D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_4F58AC(a1, a2);
  sub_4F58AC(v4 + 160, a2 + 160);
  sub_4F57A0(a1 + 320, a2 + 320);
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  uint64_t v6 = *(unsigned char **)(a2 + 432);
  long long v5 = *(unsigned char **)(a2 + 440);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v7 >> 3) >= 0x666666666666667) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(v7);
    *(void *)(a1 + 432) = v8;
    *(void *)(a1 + 440) = v8;
    uint64_t v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a1 + 448) = v9;
    memcpy(v8, v6, v7 - 7);
    *(void *)(a1 + 440) = v9;
  }
  *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
  return a1;
}

void sub_92A1A0(_Unwind_Exception *a1)
{
  sub_4D4B58(v2);
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_92A1BC(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_92A1D0(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 440) = v4;
    operator delete(v4);
  }
  sub_92A1F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_92A1F4(uint64_t a1)
{
  if ((*(char *)(a1 + 423) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 391) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_8:
    operator delete(*(void **)(a1 + 368));
    int v2 = *(_DWORD *)(a1 + 352);
    if (v2 != 1) {
      goto LABEL_4;
    }
LABEL_9:
    uint64_t v3 = *(void **)(a1 + 328);
    if (!v3) {
      goto LABEL_12;
    }
    *(void *)(a1 + 336) = v3;
    goto LABEL_11;
  }
  operator delete(*(void **)(a1 + 400));
  if (*(char *)(a1 + 391) < 0) {
    goto LABEL_8;
  }
LABEL_3:
  int v2 = *(_DWORD *)(a1 + 352);
  if (v2 == 1) {
    goto LABEL_9;
  }
LABEL_4:
  if (!v2 && *(char *)(a1 + 351) < 0)
  {
    uint64_t v3 = *(void **)(a1 + 328);
LABEL_11:
    operator delete(v3);
  }
LABEL_12:
  sub_4D4B58(a1 + 160);

  return sub_4D4B58(a1);
}

uint64_t sub_92A294(uint64_t a1)
{
  int v2 = *(void **)(a1 + 432);
  if (v2)
  {
    *(void *)(a1 + 440) = v2;
    operator delete(v2);
  }
  if ((*(char *)(a1 + 423) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 391) & 0x80000000) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    operator delete(*(void **)(a1 + 368));
    int v3 = *(_DWORD *)(a1 + 352);
    if (v3 != 1) {
      goto LABEL_6;
    }
LABEL_11:
    uint64_t v4 = *(void **)(a1 + 328);
    if (!v4) {
      goto LABEL_14;
    }
    *(void *)(a1 + 336) = v4;
    goto LABEL_13;
  }
  operator delete(*(void **)(a1 + 400));
  if (*(char *)(a1 + 391) < 0) {
    goto LABEL_10;
  }
LABEL_5:
  int v3 = *(_DWORD *)(a1 + 352);
  if (v3 == 1) {
    goto LABEL_11;
  }
LABEL_6:
  if (!v3 && *(char *)(a1 + 351) < 0)
  {
    uint64_t v4 = *(void **)(a1 + 328);
LABEL_13:
    operator delete(v4);
  }
LABEL_14:
  sub_4D4B58(a1 + 160);

  return sub_4D4B58(a1);
}

void **sub_92A344(void **a1)
{
  uint64_t v2 = (uint64_t)(a1 + 109);
  sub_4D4B58((uint64_t)(a1 + 129));
  sub_4D4B58(v2);
  sub_4D4B58((uint64_t)(a1 + 88));
  sub_4D4B58((uint64_t)(a1 + 68));
  sub_4D4B58((uint64_t)(a1 + 47));
  sub_4D4B58((uint64_t)(a1 + 27));
  sub_4D4B58((uint64_t)(a1 + 7));
  int v3 = a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (char *)*a1;
  if (*a1)
  {
    long long v5 = (char *)a1[1];
    uint64_t v6 = *a1;
    if (v5 != v4)
    {
      do
      {
        sub_4D4B58((uint64_t)(v5 - 176));
        sub_4D4B58((uint64_t)(v5 - 336));
        sub_4D4B58((uint64_t)(v5 - 504));
        sub_4D4B58((uint64_t)(v5 - 664));
        v5 -= 696;
      }
      while (v5 != v4);
      uint64_t v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
  }
  return a1;
}

uint64_t sub_92A428(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 632);
  if (v2)
  {
    *(void *)(a1 + 640) = v2;
    operator delete(v2);
  }
  if ((*(char *)(a1 + 615) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 583) & 0x80000000) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    operator delete(*(void **)(a1 + 560));
    int v3 = *(_DWORD *)(a1 + 544);
    if (v3 != 1) {
      goto LABEL_6;
    }
LABEL_11:
    uint64_t v4 = *(void **)(a1 + 520);
    if (!v4) {
      goto LABEL_14;
    }
    *(void *)(a1 + 528) = v4;
    goto LABEL_13;
  }
  operator delete(*(void **)(a1 + 592));
  if (*(char *)(a1 + 583) < 0) {
    goto LABEL_10;
  }
LABEL_5:
  int v3 = *(_DWORD *)(a1 + 544);
  if (v3 == 1) {
    goto LABEL_11;
  }
LABEL_6:
  if (!v3 && *(char *)(a1 + 543) < 0)
  {
    uint64_t v4 = *(void **)(a1 + 520);
LABEL_13:
    operator delete(v4);
  }
LABEL_14:
  if (!*(unsigned char *)(a1 + 496)) {
    goto LABEL_18;
  }
  if (*(char *)(a1 + 495) < 0)
  {
    operator delete(*(void **)(a1 + 472));
    if ((*(char *)(a1 + 463) & 0x80000000) == 0) {
      goto LABEL_17;
    }
LABEL_41:
    operator delete(*(void **)(a1 + 440));
    goto LABEL_17;
  }
  if (*(char *)(a1 + 463) < 0) {
    goto LABEL_41;
  }
LABEL_17:
  *(unsigned char *)(a1 + 496) = 0;
LABEL_18:
  long long v5 = *(void **)(a1 + 400);
  if (v5)
  {
    *(void *)(a1 + 408) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 376);
  if (v6)
  {
    *(void *)(a1 + 384) = v6;
    operator delete(v6);
  }
  int64_t v7 = *(void **)(a1 + 352);
  if (v7)
  {
    *(void *)(a1 + 360) = v7;
    operator delete(v7);
  }
  sub_928BD4(a1 + 160);
  uint64_t v8 = *(void *)(a1 + 136);
  if (v8)
  {
    uint64_t v9 = *(void *)(a1 + 144);
    uint64_t v10 = *(void **)(a1 + 136);
    if (v9 == v8)
    {
LABEL_34:
      *(void *)(a1 + 144) = v8;
      operator delete(v10);
      goto LABEL_35;
    }
    while (1)
    {
      if (*(char *)(v9 - 1) < 0)
      {
        operator delete(*(void **)(v9 - 24));
        if (*(char *)(v9 - 33) < 0) {
LABEL_32:
        }
          operator delete(*(void **)(v9 - 56));
      }
      else if (*(char *)(v9 - 33) < 0)
      {
        goto LABEL_32;
      }
      v9 -= 56;
      if (v9 == v8)
      {
        uint64_t v10 = *(void **)(a1 + 136);
        goto LABEL_34;
      }
    }
  }
LABEL_35:
  if (*(unsigned char *)(a1 + 128))
  {
    if (*(char *)(a1 + 127) < 0)
    {
      operator delete(*(void **)(a1 + 104));
      if ((*(char *)(a1 + 95) & 0x80000000) == 0) {
        goto LABEL_38;
      }
    }
    else if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    {
LABEL_38:
      *(unsigned char *)(a1 + 128) = 0;
      return a1;
    }
    operator delete(*(void **)(a1 + 72));
    goto LABEL_38;
  }
  return a1;
}

uint64_t sub_92A5D4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 5680);
  if (v2)
  {
    *(void *)(a1 + 5688) = v2;
    operator delete(v2);
  }
  sub_4F2BD0((void **)(a1 + 4584));
  sub_4F2BD0((void **)(a1 + 3496));
  int v3 = *(void **)(a1 + 3472);
  if (v3)
  {
    *(void *)(a1 + 3480) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 3448);
  if (v4)
  {
    *(void *)(a1 + 3456) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void *)(a1 + 3424);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 3432);
    int64_t v7 = *(void **)(a1 + 3424);
    if (v6 != v5)
    {
      do
        uint64_t v6 = sub_92A294(v6 - 464);
      while (v6 != v5);
      int64_t v7 = *(void **)(a1 + 3424);
    }
    *(void *)(a1 + 3432) = v5;
    operator delete(v7);
  }
  sub_92A344((void **)(a1 + 2224));
  uint64_t v8 = *(void **)(a1 + 2200);
  if (v8)
  {
    *(void *)(a1 + 2208) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *(void **)(a1 + 2152);
  if (v9)
  {
    *(void *)(a1 + 2160) = v9;
    operator delete(v9);
  }
  if (*(unsigned char *)(a1 + 2144))
  {
    uint64_t v10 = *(void *)(a1 + 2112);
    if (v10)
    {
      uint64_t v11 = *(void *)(a1 + 2120);
      uint64_t v12 = *(void **)(a1 + 2112);
      if (v11 != v10)
      {
        do
        {
          if (*(char *)(v11 - 17) < 0) {
            operator delete(*(void **)(v11 - 40));
          }
          v11 -= 48;
        }
        while (v11 != v10);
        uint64_t v12 = *(void **)(a1 + 2112);
      }
      *(void *)(a1 + 2120) = v10;
      operator delete(v12);
    }
    *(unsigned char *)(a1 + 2144) = 0;
  }
  if (*(unsigned char *)(a1 + 2104))
  {
    uint64_t v13 = *(void **)(a1 + 2072);
    if (v13)
    {
      *(void *)(a1 + 2080) = v13;
      operator delete(v13);
    }
    if (*(char *)(a1 + 2055) < 0) {
      operator delete(*(void **)(a1 + 2032));
    }
    *(unsigned char *)(a1 + 2104) = 0;
  }
  int v14 = *(void **)(a1 + 2000);
  if (v14)
  {
    *(void *)(a1 + 2008) = v14;
    operator delete(v14);
  }
  int64_t v15 = *(void **)(a1 + 1944);
  if (v15)
  {
    *(void *)(a1 + 1952) = v15;
    operator delete(v15);
  }
  uint64_t v16 = *(void **)(a1 + 1920);
  if (v16)
  {
    *(void *)(a1 + 1928) = v16;
    operator delete(v16);
  }
  if (*(unsigned char *)(a1 + 1916)) {
    *(unsigned char *)(a1 + 1916) = 0;
  }
  uint64_t v17 = *(void *)(a1 + 1864);
  if (v17)
  {
    sub_929634(a1 + 1864, v17);
    operator delete(*(void **)(a1 + 1864));
  }
  sub_4D4B58(a1 + 1696);
  sub_929188((void **)(a1 + 1600));
  sub_92928C((void **)(a1 + 1016));
  if (*(unsigned char *)(a1 + 1000))
  {
    uint64_t v18 = *(void **)(a1 + 968);
    if (v18)
    {
      *(void *)(a1 + 976) = v18;
      operator delete(v18);
    }
    *(unsigned char *)(a1 + 1000) = 0;
  }
  if (*(unsigned char *)(a1 + 952))
  {
    int v19 = *(void **)(a1 + 920);
    if (v19)
    {
      *(void *)(a1 + 928) = v19;
      operator delete(v19);
    }
    uint64_t v20 = *(void *)(a1 + 880);
    if (v20)
    {
      uint64_t v21 = *(void *)(a1 + 888);
      uint64_t v22 = *(void **)(a1 + 880);
      if (v21 != v20)
      {
        do
        {
          if (*(char *)(v21 - 9) < 0) {
            operator delete(*(void **)(v21 - 32));
          }
          v21 -= 40;
        }
        while (v21 != v20);
        uint64_t v22 = *(void **)(a1 + 880);
      }
      *(void *)(a1 + 888) = v20;
      operator delete(v22);
    }
    *(unsigned char *)(a1 + 952) = 0;
  }
  if (*(unsigned char *)(a1 + 840))
  {
    if (*(char *)(a1 + 839) < 0) {
      operator delete(*(void **)(a1 + 816));
    }
    *(unsigned char *)(a1 + 840) = 0;
  }
  if (*(unsigned char *)(a1 + 792))
  {
    sub_92A428(a1 + 88);
    *(unsigned char *)(a1 + 792) = 0;
  }
  if (*(unsigned char *)(a1 + 80)) {
    *(unsigned char *)(a1 + 80) = 0;
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t sub_92A878(uint64_t a1, long long **a2, uint64_t *a3, char a4)
{
  int64_t v7 = (void ***)(a1 + 24);
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  sub_8A6F8((char *)(a1 + 48), *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  *(unsigned char *)(a1 + 72) = a4;
  sub_5F3B34(a1 + 80);
  sub_92AA0C((uint64_t)v7, 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  if (*a2 != v9)
  {
    uint64_t v10 = *(__n128 **)(a1 + 32);
    do
    {
      if (*((char *)v8 + 23) < 0)
      {
        sub_4200(__p, *(void **)v8, *((void *)v8 + 1));
      }
      else
      {
        long long v11 = *v8;
        uint64_t v15 = *((void *)v8 + 2);
        *(_OWORD *)std::string __p = v11;
      }
      char v16 = 1;
      uint64_t v12 = sub_92AB20(v7, v10, (__n128 *)__p);
      if (SHIBYTE(v15) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v10 = (__n128 *)(v12 + 4);
      uint64_t v8 = (long long *)((char *)v8 + 24);
    }
    while (v8 != v9);
  }
  return a1;
}

void sub_92A9AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  sub_4D4B58(v17);
  sub_1A668(v16);
  sub_3D4D90(v15);
  if (*(char *)(v14 + 23) < 0) {
    operator delete(*(void **)v14);
  }
  _Unwind_Resume(a1);
}

void sub_92AA0C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void ***)a1;
  if (a2 <= (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5) {
    return;
  }
  if (a2 >> 59) {
    sub_2E00();
  }
  uint64_t v4 = *(void ***)(a1 + 8);
  uint64_t v5 = 32 * a2;
  uint64_t v6 = (char *)operator new(32 * a2);
  int64_t v7 = &v6[v5];
  uint64_t v8 = &v6[(char *)v4 - (char *)v2];
  if (v4 == v2)
  {
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v7;
    if (!v2) {
      return;
    }
    goto LABEL_13;
  }
  uint64_t v9 = &v6[(char *)v4 - (char *)v2];
  do
  {
    long long v10 = *((_OWORD *)v4 - 2);
    *((void *)v9 - 2) = *(v4 - 2);
    *((_OWORD *)v9 - 2) = v10;
    *(v4 - 3) = 0;
    *(v4 - 2) = 0;
    *(v4 - 4) = 0;
    *(v9 - 8) = *((unsigned char *)v4 - 8);
    v9 -= 32;
    v4 -= 4;
  }
  while (v4 != v2);
  long long v11 = *(void ***)a1;
  uint64_t v2 = *(void ***)(a1 + 8);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v7;
  if (v2 != v11)
  {
    do
    {
      if (*((char *)v2 - 9) < 0) {
        operator delete(*(v2 - 4));
      }
      v2 -= 4;
    }
    while (v2 != v11);
    uint64_t v2 = v11;
  }
  if (v2)
  {
LABEL_13:
    operator delete(v2);
  }
}

void **sub_92AB20(void ***a1, __n128 *a2, __n128 *a3)
{
  uint64_t v4 = (void **)a2;
  int64_t v7 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v8 = ((char *)a2 - (char *)*a1) >> 5;
  unint64_t v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    unint64_t v15 = ((uint64_t)(v6 - (void)v7) >> 5) + 1;
    if (v15 >> 59) {
      sub_2E00();
    }
    uint64_t v16 = v9 - (void)v7;
    if (v16 >> 4 > v15) {
      unint64_t v15 = v16 >> 4;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v17 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    long long v41 = a1 + 2;
    if (v17)
    {
      if (v17 >> 59) {
        sub_188D718();
      }
      uint64_t v18 = (void **)operator new(32 * v17);
    }
    else
    {
      uint64_t v18 = 0;
    }
    long long v37 = v18;
    long long v38 = &v18[4 * v8];
    int v39 = v38;
    size_t v40 = (char *)&v18[4 * v17];
    sub_92AE4C((uint64_t)&v37, a3);
    uint64_t v20 = v38;
    uint64_t v21 = *a1;
    uint64_t v22 = v38;
    if (*a1 != v4)
    {
      uint64_t v23 = v38;
      int64_t v24 = v4;
      do
      {
        uint64_t v22 = v23 - 4;
        long long v25 = *((_OWORD *)v24 - 2);
        *(v23 - 2) = *(v24 - 2);
        *((_OWORD *)v23 - 2) = v25;
        *(v24 - 3) = 0;
        *(v24 - 2) = 0;
        *(v24 - 4) = 0;
        *((unsigned char *)v23 - 8) = *((unsigned char *)v24 - 8);
        v23 -= 4;
        v24 -= 4;
      }
      while (v24 != v21);
    }
    long long v38 = v22;
    int v26 = a1[1];
    int v27 = (__n128 *)v39;
    if (v26 != v4)
    {
      do
      {
        __n128 v28 = *(__n128 *)v4;
        v27[1].n128_u64[0] = (unint64_t)v4[2];
        *int v27 = v28;
        v4[1] = 0;
        v4[2] = 0;
        void *v4 = 0;
        v27[1].n128_u8[8] = *((unsigned char *)v4 + 24);
        v27 += 2;
        v4 += 4;
      }
      while (v4 != v26);
      uint64_t v22 = v38;
      uint64_t v4 = a1[1];
    }
    long long v29 = *a1;
    *a1 = v22;
    a1[1] = (void **)v27;
    long long v30 = (char *)a1[2];
    a1[2] = (void **)v40;
    int v39 = v4;
    size_t v40 = v30;
    long long v37 = v29;
    long long v38 = v29;
    if (v4 == v29)
    {
      if (!v4) {
        return v20;
      }
    }
    else
    {
      do
      {
        long long v31 = v4 - 4;
        int v39 = v4 - 4;
        if (*((char *)v4 - 9) < 0)
        {
          operator delete(*v31);
          long long v31 = v39;
        }
        uint64_t v4 = v31;
      }
      while (v31 != v29);
      uint64_t v4 = v37;
      if (!v37) {
        return v20;
      }
    }
    operator delete(v4);
    return v20;
  }
  if (a2 == (__n128 *)v6)
  {
    __n128 v19 = *a3;
    a2[1].n128_u64[0] = a3[1].n128_u64[0];
    *a2 = v19;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    a3->n128_u64[0] = 0;
    LOBYTE(v7[4 * v8 + 3]) = a3[1].n128_u8[8];
    a1[1] = (void **)&a2[2];
    return v4;
  }
  long long v10 = a2 + 2;
  unint64_t v11 = v6 - 32;
  if (v6 >= 0x20)
  {
    unint64_t v12 = v6 - 32;
    uint64_t v13 = a1[1];
    do
    {
      long long v14 = *(_OWORD *)v12;
      v13[2] = *(void **)(v12 + 16);
      *(_OWORD *)uint64_t v13 = v14;
      *(void *)(v12 + 8) = 0;
      *(void *)(v12 + 16) = 0;
      *(void *)unint64_t v12 = 0;
      *((unsigned char *)v13 + 24) = *(unsigned char *)(v12 + 24);
      v13 += 4;
      v12 += 32;
    }
    while (v12 < v6);
    a1[1] = v13;
    if ((__n128 *)v6 == v10) {
      goto LABEL_39;
    }
LABEL_35:
    uint64_t v32 = 4 * ((uint64_t)(v6 - (void)v10) >> 5);
    do
    {
      if (*(char *)(v11 + 23) < 0) {
        operator delete(*(void **)v11);
      }
      unsigned __int8 v33 = &v4[v32 - 4];
      long long v34 = *(_OWORD *)v33;
      *(void *)(v11 + 16) = v4[v32 - 2];
      *(_OWORD *)unint64_t v11 = v34;
      *((unsigned char *)&v4[v32 - 1] - 1) = 0;
      *(unsigned char *)unsigned __int8 v33 = 0;
      *(unsigned char *)(v11 + 24) = v4[v32 - 1];
      v11 -= 32;
      v32 -= 4;
    }
    while (v32 * 8);
    goto LABEL_39;
  }
  a1[1] = (void **)v6;
  if ((__n128 *)v6 != v10) {
    goto LABEL_35;
  }
LABEL_39:
  if (*((char *)v4 + 23) < 0) {
    operator delete(*v4);
  }
  __n128 v35 = *a3;
  v4[2] = (void *)a3[1].n128_u64[0];
  *(__n128 *)uint64_t v4 = v35;
  a3[1].n128_u8[7] = 0;
  a3->n128_u8[0] = 0;
  LOBYTE(v7[4 * v8 + 3]) = a3[1].n128_u8[8];
  return v4;
}

void sub_92AE38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3D695C((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_92AE4C(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(__n128 **)(a1 + 16);
  if (v4 == *(__n128 **)(a1 + 24))
  {
    uint64_t v5 = *(__n128 **)a1;
    unint64_t v6 = *(__n128 **)(a1 + 8);
    if ((unint64_t)v6 <= *(void *)a1)
    {
      unint64_t v14 = v4 - v5;
      if (v4 == v5) {
        unint64_t v14 = 1;
      }
      if (v14 >> 59) {
        sub_188D718();
      }
      unint64_t v15 = v14 >> 2;
      uint64_t v16 = 32 * v14;
      unint64_t v17 = (char *)operator new(32 * v14);
      uint64_t v18 = &v17[32 * v15];
      __n128 v19 = &v17[v16];
      if (v4 == v6)
      {
        *(void *)a1 = v17;
        *(void *)(a1 + 8) = v18;
        *(void *)(a1 + 16) = v18;
        *(void *)(a1 + 24) = v19;
      }
      else
      {
        uint64_t v20 = &v18[(char *)v4 - (char *)v6];
        uint64_t v21 = 32 * v15;
        do
        {
          uint64_t v22 = &v17[v21];
          __n128 v23 = *v6;
          *((void *)v22 + 2) = v6[1].n128_u64[0];
          *(__n128 *)uint64_t v22 = v23;
          v6->n128_u64[1] = 0;
          v6[1].n128_u64[0] = 0;
          v6->n128_u64[0] = 0;
          v22[24] = v6[1].n128_i8[8];
          v21 += 32;
          v6 += 2;
        }
        while (v22 + 32 != v20);
        uint64_t v5 = *(__n128 **)a1;
        uint64_t v24 = *(void *)(a1 + 8);
        uint64_t v25 = *(void *)(a1 + 16);
        *(void *)a1 = v17;
        *(void *)(a1 + 8) = v18;
        *(void *)(a1 + 16) = v20;
        *(void *)(a1 + 24) = v19;
        while (v25 != v24)
        {
          if (*(char *)(v25 - 9) < 0) {
            operator delete(*(void **)(v25 - 32));
          }
          v25 -= 32;
        }
      }
      if (v5) {
        operator delete(v5);
      }
      uint64_t v4 = *(__n128 **)(a1 + 16);
    }
    else
    {
      uint64_t v7 = ((uint64_t)v6 - *(void *)a1) >> 5;
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -v9;
      if (v6 == v4)
      {
        int v26 = &v6[-2 * v9];
      }
      else
      {
        uint64_t v11 = -2 * v9;
        do
        {
          uint64_t v13 = &v6[v11];
          if (v6[v11 + 1].n128_i8[7] < 0) {
            operator delete((void *)v13->n128_u64[0]);
          }
          __n128 v12 = *v6;
          v13[1].n128_u64[0] = v6[1].n128_u64[0];
          *uint64_t v13 = v12;
          v6[1].n128_u8[7] = 0;
          v6->n128_u8[0] = 0;
          v13[1].n128_u8[8] = v6[1].n128_u8[8];
          v6 += 2;
        }
        while (v6 != v4);
        uint64_t v4 = *(__n128 **)(a1 + 8);
        int v26 = &v6[2 * v10];
      }
      *(void *)(a1 + 8) = &v4[2 * v10];
      *(void *)(a1 + 16) = v26;
      uint64_t v4 = v26;
    }
  }
  __n128 result = *a2;
  v4[1].n128_u64[0] = a2[1].n128_u64[0];
  __n128 *v4 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  v4[1].n128_u8[8] = a2[1].n128_u8[8];
  *(void *)(a1 + 16) += 32;
  return result;
}

void *sub_92B01C(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    unint64_t v6 = operator new(24 * a2);
    *a1 = v6;
    a1[1] = v6;
    uint64_t v7 = (char *)&v6[3 * a2];
    a1[2] = v7;
    int v8 = *(char *)(a3 + 23);
    if (v8 < 0)
    {
      uint64_t v11 = 24 * a2 - 24;
      if ((v8 & 0x80) != 0) {
        goto LABEL_10;
      }
LABEL_9:
      *(_OWORD *)unint64_t v6 = *(_OWORD *)a3;
      v6[2] = *(void *)(a3 + 16);
      while (v11)
      {
        v6 += 3;
        v11 -= 24;
        if ((*(unsigned char *)(a3 + 23) & 0x80) == 0) {
          goto LABEL_9;
        }
LABEL_10:
        sub_4200(v6, *(void **)a3, *(void *)(a3 + 8));
      }
    }
    else
    {
      uint64_t v9 = 24 * a2;
      do
      {
        *(_OWORD *)unint64_t v6 = *(_OWORD *)a3;
        v6[2] = *(void *)(a3 + 16);
        v6 += 3;
        v9 -= 24;
      }
      while (v9);
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_92B12C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_92B140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_8A82C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_92B158(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_92B170()
{
  return v0;
}

char *sub_92B184()
{
  byte_25D3517 = 1;
  word_25D3500 = 65;
  byte_25D352F = 1;
  word_25D3518 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25D3C90 = 0u;
  xmmword_25D3C80 = 0u;
  dword_25D3CA0 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25D3C80, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25D3C80, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25D3C80, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25D3C80, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25D3547 = 8;
  strcpy((char *)&qword_25D3530, "any_mode");
  byte_25D355F = 7;
  strcpy((char *)&dword_25D3548, "cycling");
  byte_25D3577 = 7;
  strcpy((char *)&dword_25D3560, "driving");
  byte_25D358F = 7;
  strcpy((char *)&dword_25D3578, "walking");
  qword_25D3598 = 0;
  qword_25D35A0 = 0;
  qword_25D3590 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25D3590 = (uint64_t)v0;
  qword_25D3598 = (uint64_t)(v0 + 9);
  qword_25D35A0 = (uint64_t)(v0 + 9);
  qword_25D35A8 = 0;
  qword_25D35B0 = 0;
  unk_25D35B8 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25D35B0 = (uint64_t)(v1 + 9);
  unk_25D35B8 = v1 + 9;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25D35A8 = (uint64_t)v1;
  byte_25D35D7 = 6;
  strcpy((char *)&dword_25D35C0, "{Mode}");
  byte_25D35EF = 11;
  strcpy((char *)&qword_25D35D8, "{Direction}");
  byte_25D3607 = 6;
  strcpy((char *)&dword_25D35F0, "{Line}");
  byte_25D361F = 12;
  strcpy((char *)&qword_25D3608, "{LineNumber}");
  strcpy(&byte_25D3637, "\n{Headsign1}");
  strcpy((char *)&qword_25D3620, "{Headsign}");
  byte_25D364F = 11;
  byte_25D3667 = 11;
  strcpy((char *)&qword_25D3650, "{Headsign2}");
  byte_25D367F = 11;
  strcpy((char *)&qword_25D3668, "{Headsign3}");
  byte_25D3697 = 11;
  strcpy((char *)&qword_25D3680, "{Headsign4}");
  byte_25D36AF = 11;
  strcpy((char *)&qword_25D3698, "{Headsign5}");
  byte_25D36C7 = 6;
  strcpy((char *)&dword_25D36B0, "{Stop}");
  byte_25D36DF = 14;
  strcpy((char *)&qword_25D36C8, "{PreviousStop}");
  byte_25D36F7 = 8;
  strcpy((char *)&qword_25D36E0, "{System}");
  byte_25D370F = 15;
  strcpy((char *)&qword_25D36F8, "{VehicleNumber}");
  byte_25D3727 = 17;
  strcpy((char *)&xmmword_25D3710, "{AccessPointExit}");
  strcpy(&byte_25D373F, "\n{nextBoardStation}");
  strcpy((char *)&qword_25D3728, "{Platform}");
  byte_25D3757 = 18;
  qword_25D3758 = 0;
  unk_25D3760 = 0;
  qword_25D3768 = 0;
  byte_25D3787 = 1;
  word_25D3770 = 32;
  qword_25D3788 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25D3790 = xmmword_20B8890;
  strcpy((char *)qword_25D3788, "LeaveStop_Loc_Comma_Separator");
  byte_25D37B7 = 5;
  dword_25D37A0 = -1028144608;
  word_25D37A4 = 160;
  byte_25D37CF = 2;
  word_25D37B8 = -24382;
  byte_25D37BA = 0;
  byte_25D37E7 = 4;
  dword_25D37D0 = 548913696;
  byte_25D37D4 = 0;
  byte_25D37FF = 15;
  strcpy((char *)&qword_25D37E8 + 7, "\xB7 {/s:s}");
  strcpy((char *)&qword_25D37E8, "{s:s} ·");
  byte_25D3817 = 6;
  strcpy((char *)&dword_25D3800, "NoType");
  byte_25D382F = 14;
  strcpy((char *)&qword_25D3818, "{WalkDistance}");
  strcpy(&byte_25D3847, "\n{OneMinute}");
  strcpy((char *)&qword_25D3830, "{WalkTime}");
  byte_25D385F = 11;
  byte_25D3877 = 14;
  strcpy((char *)&qword_25D3860, "{StepDuration}");
  byte_25D388F = 15;
  strcpy((char *)&qword_25D3878, "{TripFrequency}");
  byte_25D38A7 = 11;
  strcpy((char *)&qword_25D3890, "{BoardTime}");
  byte_25D38BF = 12;
  strcpy((char *)&qword_25D38A8, "{AlightTime}");
  byte_25D38D7 = 21;
  strcpy((char *)&xmmword_25D38C0, "{FutureTimestampList}");
  byte_25D38EF = 15;
  strcpy((char *)&qword_25D38D8, "{DepartureTime}");
  byte_25D3907 = 13;
  strcpy((char *)&qword_25D38F0, "{ArrivalTime}");
  byte_25D391F = 19;
  strcpy((char *)&xmmword_25D3908, "{TotalWalkDistance}");
  byte_25D3937 = 14;
  strcpy((char *)&qword_25D3920, "{TripDuration}");
  byte_25D394F = 11;
  strcpy((char *)&qword_25D3938, "{DayOfWeek}");
  byte_25D3967 = 6;
  strcpy((char *)&dword_25D3950, "{Date}");
  byte_25D397F = 16;
  strcpy((char *)&xmmword_25D3968, "{OutTheDoorTime}");
  __n128 result = (char *)operator new(0x20uLL);
  qword_25D3980 = (uint64_t)result;
  unk_25D3988 = xmmword_20B91A0;
  strcpy(result, "{FirstVehicleDepartureTime}");
  byte_25D39AF = 18;
  strcpy(byte_25D3998, "{RouteArrivalTime}");
  strcpy(&byte_25D39C7, "\n{IC_Artwork}");
  strcpy((char *)&qword_25D39B0, "{BaseFare}");
  byte_25D39DF = 12;
  byte_25D39F7 = 11;
  strcpy((char *)&qword_25D39E0, "{RT_Symbol}");
  byte_25D3A0F = 12;
  strcpy((char *)&qword_25D39F8, "{TotalPrice}");
  byte_25D3A27 = 13;
  strcpy((char *)&qword_25D3A10, "{CheckInTime}");
  byte_25D3A3F = 19;
  strcpy(byte_25D3A28, "{LiveDepartureTime}");
  strcpy(&byte_25D3A57, "\n{LegDuration}");
  strcpy((char *)&qword_25D3A40, "{TimeList}");
  byte_25D3A6F = 13;
  byte_25D3A87 = 15;
  strcpy((char *)&qword_25D3A70, "{CountdownList}");
  byte_25D3A9F = 3;
  dword_25D3A88 = 8217723;
  strcpy(&byte_25D3AB7, "\t{AccessPointArt}");
  strcpy((char *)&qword_25D3AA0, "{LineArt}");
  byte_25D3ACF = 16;
  byte_25D3AE7 = 11;
  strcpy((char *)&qword_25D3AD0, "{SystemArt}");
  strcpy(&byte_25D3AFF, "\n{ServiceBeginTime}");
  strcpy((char *)&qword_25D3AE8, "{CardName}");
  byte_25D3B17 = 18;
  byte_25D3B2F = 16;
  strcpy((char *)&xmmword_25D3B18, "{ServiceEndTime}");
  byte_25D3B47 = 6;
  strcpy((char *)&dword_25D3B30, "OnTime");
  byte_25D3B5F = 6;
  strcpy((char *)&dword_25D3B48, "Delays");
  byte_25D3B77 = 1;
  word_25D3B60 = 115;
  byte_25D3B8F = 2;
  strcpy((char *)&word_25D3B78, "cs");
  byte_25D3BA7 = 1;
  word_25D3B90 = 112;
  byte_25D3BBF = 5;
  strcpy((char *)&dword_25D3BA8, "_Line");
  byte_25D3BD7 = 7;
  strcpy((char *)&dword_25D3BC0, "_System");
  strcpy(&byte_25D3BEF, "\n_VehicleNumber");
  strcpy((char *)&qword_25D3BD8, "_Direction");
  byte_25D3C07 = 14;
  byte_25D3C1F = 12;
  strcpy((char *)&qword_25D3C08, "_To_Headsign");
  byte_25D3C37 = 16;
  strcpy((char *)&xmmword_25D3C20, "_Toward_Headsign");
  strcpy(&byte_25D3C4F, "\t_LineNumber");
  strcpy((char *)&qword_25D3C38, "_Headsign");
  byte_25D3C67 = 11;
  return result;
}

void sub_92BD70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if ((void)xmmword_25D3C90) {
    sub_20AC6E8((void **)xmmword_25D3C90);
  }
  long long v37 = (void *)xmmword_25D3C80;
  *(void *)&xmmword_25D3C80 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void *sub_92BE10(void *a1, void *a2)
{
  *a1 = a2;
  a1[1] = sub_3755E4(a2);
  a1[2] = sub_375500(a2);
  a1[3] = sub_3757C8(a2);
  nullsub_1(a1 + 4);
  return a1;
}

void sub_92BE68(uint64_t a1@<X0>, uint64_t *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  int v8 = (uint64_t *)sub_374EF4(*(uint64_t **)a1);
  sub_688A04(v8, 5u, *a3, &v23);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  sub_92C17C((char **)a4, 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 4));
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  if (*a2 != v10)
  {
    do
    {
      unint64_t v12 = *(void *)(a4 + 8);
      if (v12 >= *(void *)(a4 + 16))
      {
        char v13 = sub_92DB24((void **)a4);
        *(void *)(a4 + 8) = v13;
        if (*(void *)(v9 + 24) != *(void *)(v9 + 32))
        {
LABEL_11:
          unint64_t v14 = sub_474FB0(v9);
          unint64_t v15 = sub_49A28C(v9);
          unint64_t v16 = HIDWORD(v14);
          unint64_t v17 = HIDWORD(v15);
          if (HIDWORD(v14) == 0x7FFFFFFF) {
            LODWORD(v16) = v14;
          }
          if (HIDWORD(v15) == 0x7FFFFFFF) {
            LODWORD(v17) = v15;
          }
          if (*(_DWORD *)(v9 + 128) == 2)
          {
            int v18 = v17;
          }
          else
          {
            LODWORD(v16) = v14;
            int v18 = v15;
          }
          *((_DWORD *)v13 - 12) = v16;
          *((_DWORD *)v13 - 11) = v18;
          *((_DWORD *)v13 - 10) = 10 * (v18 - v16);
          *((void *)v13 - 4) = sub_49AF0C(v9, *(void *)(a1 + 16), *(void *)(a1 + 8));
          uint64_t v19 = v23;
          sub_92D7B4(v9, &v27);
          if (v28)
          {
            sub_92C37C((uint64_t *)a1, v19, v27, (uint64_t)a3, (uint64_t)v22);
          }
          else
          {
            sub_92D8DC(v9, &v25);
            if (v26) {
              sub_92D434((void **)a1, v19, v25, (uint64_t)a3, (uint64_t)v22);
            }
            else {
              sub_5F3B34((uint64_t)v22);
            }
          }
          if (!sub_45FB38(v22))
          {
            unint64_t v20 = *((void *)v13 - 2);
            if (v20 >= *((void *)v13 - 1))
            {
              uint64_t v11 = sub_619074((uint64_t *)v13 - 3, (uint64_t)v22);
            }
            else
            {
              sub_4F58AC(*((void *)v13 - 2), (uint64_t)v22);
              uint64_t v11 = v20 + 160;
              *((void *)v13 - 2) = v20 + 160;
            }
            *((void *)v13 - 2) = v11;
          }
          sub_4D4B58((uint64_t)v22);
        }
      }
      else
      {
        *(void *)unint64_t v12 = 0x8000000080000000;
        *(_DWORD *)(v12 + 8) = 0x7FFFFFFF;
        *(void *)(v12 + 16) = 0x7FFFFFFFFFFFFFFFLL;
        *(void *)(v12 + 24) = 0;
        char v13 = (char *)(v12 + 48);
        *(void *)(v12 + 32) = 0;
        *(void *)(v12 + 40) = 0;
        *(void *)(a4 + 8) = v12 + 48;
        if (*(void *)(v9 + 24) != *(void *)(v9 + 32)) {
          goto LABEL_11;
        }
      }
      v9 += 176;
    }
    while (v9 != v10);
  }
  uint64_t v21 = v24;
  if (v24)
  {
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_92C10C(_Unwind_Exception *a1)
{
  sub_92C2E0(v1);
  sub_14A84(v2 - 152);
  _Unwind_Resume(a1);
}

void sub_92C17C(char **a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= a2) {
    return;
  }
  if (a2 >= 0x555555555555556) {
    sub_2E00();
  }
  char v4 = a1[1];
  uint64_t v5 = 48 * a2;
  unint64_t v6 = (char *)operator new(48 * a2);
  char v7 = &v6[v5];
  int v8 = &v6[v4 - v2];
  if (v4 == v2)
  {
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v7;
    if (!v2) {
      return;
    }
    goto LABEL_16;
  }
  uint64_t v9 = &v6[v4 - v2];
  do
  {
    long long v10 = *((_OWORD *)v4 - 3);
    *((void *)v9 - 4) = *((void *)v4 - 4);
    *((_OWORD *)v9 - 3) = v10;
    *(_OWORD *)(v9 - 24) = *(_OWORD *)(v4 - 24);
    *((void *)v9 - 1) = *((void *)v4 - 1);
    v9 -= 48;
    *((void *)v4 - 3) = 0;
    *((void *)v4 - 2) = 0;
    *((void *)v4 - 1) = 0;
    v4 -= 48;
  }
  while (v4 != v2);
  uint64_t v11 = *a1;
  uint64_t v2 = a1[1];
  *a1 = v9;
  a1[1] = v8;
  a1[2] = v7;
  if (v2 != v11)
  {
    do
    {
      uint64_t v12 = *((void *)v2 - 3);
      if (v12)
      {
        uint64_t v13 = *((void *)v2 - 2);
        unint64_t v14 = (void *)*((void *)v2 - 3);
        if (v13 != v12)
        {
          do
            uint64_t v13 = sub_4D4B58(v13 - 160);
          while (v13 != v12);
          unint64_t v14 = (void *)*((void *)v2 - 3);
        }
        *((void *)v2 - 2) = v12;
        operator delete(v14);
      }
      v2 -= 48;
    }
    while (v2 != v11);
    uint64_t v2 = v11;
  }
  if (v2)
  {
LABEL_16:
    operator delete(v2);
  }
}

void **sub_92C2E0(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    int v3 = (char *)a1[1];
    char v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *((void *)v3 - 3);
        if (v5)
        {
          uint64_t v6 = *((void *)v3 - 2);
          char v7 = (void *)*((void *)v3 - 3);
          if (v6 != v5)
          {
            do
              uint64_t v6 = sub_4D4B58(v6 - 160);
            while (v6 != v5);
            char v7 = (void *)*((void *)v3 - 3);
          }
          *((void *)v3 - 2) = v5;
          operator delete(v7);
        }
        v3 -= 48;
      }
      while (v3 != v2);
      char v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_92C37C(uint64_t *a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  long long v10 = (int *)sub_369F8C(a1[1], a3[2] | ((unint64_t)a3[1] << 32), 0, "trip");
  unint64_t v11 = *(void *)((char *)v10 + *(unsigned __int16 *)((char *)v10 - *v10 + 6));
  uint64_t v12 = (int *)sub_8DFD1C(a1[1], v11, 0, "line");
  unint64_t v13 = *(void *)((char *)v12 + *(unsigned __int16 *)((char *)v12 - *v12 + 6));
  uint64_t v15 = a3[1];
  uint64_t v14 = a3[2];
  unsigned int v16 = a3[4];
  unint64_t v17 = sub_369B60(a1[1], v14 | (v15 << 32), 0);
  int v18 = &v17[-*(int *)v17];
  if (*(unsigned __int16 *)v18 < 5u)
  {
    uint64_t v19 = 0;
  }
  else
  {
    uint64_t v19 = *((unsigned __int16 *)v18 + 2);
    if (*((_WORD *)v18 + 2)) {
      v19 += (uint64_t)&v17[*(unsigned int *)&v17[v19]];
    }
  }
  unint64_t v20 = (int *)(v19 + 4 * v15 + 4 + *(unsigned int *)(v19 + 4 * v15 + 4));
  uint64_t v21 = (unsigned __int16 *)((char *)v20 - *v20);
  if (*v21 >= 0xDu && (uint64_t v22 = v21[6]) != 0) {
    int v23 = *(int *)((char *)v20 + v22);
  }
  else {
    int v23 = -1;
  }
  unint64_t v24 = *(void *)&v17[24 * v23
                      + 4
                      + 24 * v16
                      + *((unsigned __int16 *)v18 + 3)
                      + *(unsigned int *)&v17[*((unsigned __int16 *)v18 + 3)]];
  memset(v150, 0, 24);
  memset(&v149, 0, sizeof(v149));
  long long v147 = 0uLL;
  uint64_t v148 = 0;
  uint64_t v25 = (int *)sub_8DFD1C(a1[1], v11, 0, "line");
  char v26 = (unsigned __int16 *)((char *)v25 - *v25);
  uint64_t v138 = a4;
  if (*v26 < 0x35u || (uint64_t v27 = v26[26]) == 0 || !*((unsigned char *)v25 + v27))
  {
    char v28 = (int *)sub_8DFD1C(a1[1], v11, 0, "line");
    long long v29 = (unsigned __int16 *)((char *)v28 - *v28);
    if (*v29 >= 0xFu && (uint64_t v30 = v29[7]) != 0) {
      long long v31 = (char **)((char *)v28 + v30 + *(unsigned int *)((char *)v28 + v30));
    }
    else {
      long long v31 = 0;
    }
    sub_8F48DC(v31, (void (*)(void **__return_ptr, char *))sub_4A0694, (uint64_t)__p);
    sub_997050((uint64_t *)__p, a4, &v146);
    sub_995044((uint64_t *)&v146, (uint64_t)&__dst);
    if (SHIBYTE(v150[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v150[0].__r_.__value_.__l.__data_);
    }
    v150[0] = __dst;
    std::string::size_type v32 = v146.__r_.__value_.__r.__words[0];
    if (!v146.__r_.__value_.__r.__words[0]) {
      goto LABEL_28;
    }
    std::string::size_type size = v146.__r_.__value_.__l.__size_;
    long long v34 = (void *)v146.__r_.__value_.__r.__words[0];
    if (v146.__r_.__value_.__l.__size_ == v146.__r_.__value_.__r.__words[0])
    {
LABEL_27:
      v146.__r_.__value_.__l.__size_ = v32;
      operator delete(v34);
LABEL_28:
      __n128 v35 = (void **)__p[0];
      if (__p[0])
      {
        unint64_t v36 = (char *)__p[1];
        long long v37 = __p[0];
        if (__p[1] != __p[0])
        {
          unint64_t v38 = v24;
          uint64_t v39 = a2;
          uint64_t v40 = a5;
          do
          {
            uint64_t v41 = *((void *)v36 - 3);
            if (v41)
            {
              uint64_t v42 = *((void *)v36 - 2);
              int v43 = (void *)*((void *)v36 - 3);
              if (v42 != v41)
              {
                do
                {
                  if (*(char *)(v42 - 1) < 0) {
                    operator delete(*(void **)(v42 - 24));
                  }
                  v42 -= 32;
                }
                while (v42 != v41);
                int v43 = (void *)*((void *)v36 - 3);
              }
              *((void *)v36 - 2) = v41;
              operator delete(v43);
            }
            char v44 = (void **)(v36 - 64);
            if (*(v36 - 41) < 0) {
              operator delete(*v44);
            }
            v36 -= 64;
          }
          while (v44 != v35);
          a4 = v138;
          long long v37 = __p[0];
          a5 = v40;
          a2 = v39;
          unint64_t v24 = v38;
        }
        __p[1] = v35;
        operator delete(v37);
      }
      goto LABEL_44;
    }
    while (1)
    {
      if (*(char *)(size - 1) < 0)
      {
        operator delete(*(void **)(size - 24));
        if ((*(char *)(size - 33) & 0x80000000) == 0) {
          goto LABEL_22;
        }
LABEL_25:
        operator delete(*(void **)(size - 56));
        size -= 56;
        if (size == v32)
        {
LABEL_26:
          long long v34 = (void *)v146.__r_.__value_.__r.__words[0];
          goto LABEL_27;
        }
      }
      else
      {
        if (*(char *)(size - 33) < 0) {
          goto LABEL_25;
        }
LABEL_22:
        size -= 56;
        if (size == v32) {
          goto LABEL_26;
        }
      }
    }
  }
LABEL_44:
  long long v45 = (int *)sub_8EF9B8(a1[3], v13, 0, "system");
  uint64_t v46 = (unsigned __int16 *)((char *)v45 - *v45);
  if (*v46 >= 0x13u)
  {
    uint64_t v47 = v46[9];
    if (v47)
    {
      if (*((unsigned char *)v45 + v47)) {
        goto LABEL_79;
      }
    }
  }
  uint64_t v48 = (int *)sub_8EF9B8(a1[3], v13, 0, "system");
  long long v49 = (unsigned __int16 *)((char *)v48 - *v48);
  if (*v49 >= 7u && (uint64_t v50 = v49[3]) != 0) {
    unint64_t v51 = (char **)((char *)v48 + v50 + *(unsigned int *)((char *)v48 + v50));
  }
  else {
    unint64_t v51 = 0;
  }
  sub_8F48DC(v51, (void (*)(void **__return_ptr, char *))sub_4A0694, (uint64_t)__p);
  sub_997050((uint64_t *)__p, a4, &v146);
  sub_994EAC((uint64_t *)&v146, (uint64_t)&__dst);
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v149.__r_.__value_.__l.__data_);
  }
  std::string v149 = __dst;
  std::string::size_type v52 = v146.__r_.__value_.__r.__words[0];
  if (v146.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v53 = v146.__r_.__value_.__l.__size_;
    int v54 = (void *)v146.__r_.__value_.__r.__words[0];
    if (v146.__r_.__value_.__l.__size_ == v146.__r_.__value_.__r.__words[0])
    {
LABEL_62:
      v146.__r_.__value_.__l.__size_ = v52;
      operator delete(v54);
      goto LABEL_63;
    }
    while (1)
    {
      if (*(char *)(v53 - 1) < 0)
      {
        operator delete(*(void **)(v53 - 24));
        if ((*(char *)(v53 - 33) & 0x80000000) == 0) {
          goto LABEL_57;
        }
LABEL_60:
        operator delete(*(void **)(v53 - 56));
        v53 -= 56;
        if (v53 == v52)
        {
LABEL_61:
          int v54 = (void *)v146.__r_.__value_.__r.__words[0];
          goto LABEL_62;
        }
      }
      else
      {
        if (*(char *)(v53 - 33) < 0) {
          goto LABEL_60;
        }
LABEL_57:
        v53 -= 56;
        if (v53 == v52) {
          goto LABEL_61;
        }
      }
    }
  }
LABEL_63:
  char v55 = (void **)__p[0];
  if (__p[0])
  {
    long long v56 = (char *)__p[1];
    uint64_t v57 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        uint64_t v58 = *((void *)v56 - 3);
        if (v58)
        {
          uint64_t v59 = *((void *)v56 - 2);
          uint64_t v60 = (void *)*((void *)v56 - 3);
          if (v59 != v58)
          {
            do
            {
              if (*(char *)(v59 - 1) < 0) {
                operator delete(*(void **)(v59 - 24));
              }
              v59 -= 32;
            }
            while (v59 != v58);
            uint64_t v60 = (void *)*((void *)v56 - 3);
          }
          *((void *)v56 - 2) = v58;
          operator delete(v60);
        }
        uint64_t v61 = (void **)(v56 - 64);
        if (*(v56 - 41) < 0) {
          operator delete(*v61);
        }
        v56 -= 64;
      }
      while (v61 != v55);
      a4 = v138;
      uint64_t v57 = __p[0];
    }
    __p[1] = v55;
    operator delete(v57);
  }
LABEL_79:
  memset(&v146, 0, sizeof(v146));
  uint64_t v62 = (int *)sub_498D5C(a1[2], v24, 0, "stop");
  unint64_t v63 = *(void *)((char *)v62 + *(unsigned __int16 *)((char *)v62 - *v62 + 10));
  if (v63 > 0xFFFFFFFEFFFFFFFFLL
    || *(void *)((char *)v62 + *(unsigned __int16 *)((char *)v62 - *v62 + 10)) == 0)
  {
    goto LABEL_148;
  }
  uint64_t v65 = (int *)sub_8ED3D4(a1[2], v63, 0, "hall");
  uint64_t v66 = (unsigned __int16 *)((char *)v65 - *v65);
  if (*v66 >= 9u && (uint64_t v67 = v66[4]) != 0) {
    long long v68 = (char **)((char *)v65 + v67 + *(unsigned int *)((char *)v65 + v67));
  }
  else {
    long long v68 = 0;
  }
  sub_8F48DC(v68, (void (*)(void **__return_ptr, char *))sub_4A0694, (uint64_t)__p);
  unint64_t v69 = v24;
  uint64_t v70 = a2;
  uint64_t v71 = a5;
  sub_997050((uint64_t *)__p, a4, &__dst);
  std::string::size_type v72 = v146.__r_.__value_.__r.__words[0];
  if (v146.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v73 = v146.__r_.__value_.__l.__size_;
    long long v74 = (void *)v146.__r_.__value_.__r.__words[0];
    if (v146.__r_.__value_.__l.__size_ == v146.__r_.__value_.__r.__words[0])
    {
LABEL_96:
      v146.__r_.__value_.__l.__size_ = v72;
      operator delete(v74);
      a4 = v138;
      goto LABEL_97;
    }
    while (1)
    {
      if (*(char *)(v73 - 1) < 0)
      {
        operator delete(*(void **)(v73 - 24));
        if ((*(char *)(v73 - 33) & 0x80000000) == 0) {
          goto LABEL_91;
        }
LABEL_94:
        operator delete(*(void **)(v73 - 56));
        v73 -= 56;
        if (v73 == v72)
        {
LABEL_95:
          long long v74 = (void *)v146.__r_.__value_.__r.__words[0];
          goto LABEL_96;
        }
      }
      else
      {
        if (*(char *)(v73 - 33) < 0) {
          goto LABEL_94;
        }
LABEL_91:
        v73 -= 56;
        if (v73 == v72) {
          goto LABEL_95;
        }
      }
    }
  }
LABEL_97:
  std::string v146 = __dst;
  a5 = v71;
  a2 = v70;
  unint64_t v24 = v69;
  if (__dst.__r_.__value_.__r.__words[0] == __dst.__r_.__value_.__l.__size_)
  {
    long long v75 = (int *)sub_8ED3D4(a1[2], v63, 0, "hall");
    unint64_t v76 = *(void *)((char *)v75 + *(unsigned __int16 *)((char *)v75 - *v75 + 10));
    if (v76 <= 0xFFFFFFFEFFFFFFFFLL
      && *(void *)((char *)v75 + *(unsigned __int16 *)((char *)v75 - *v75 + 10)) != 0)
    {
      uint64_t v78 = (int *)sub_8ED928(a1[2], v76, 0, "station");
      long long v79 = (unsigned __int16 *)((char *)v78 - *v78);
      if (*v79 >= 9u && (uint64_t v80 = v79[4]) != 0) {
        long long v81 = (char **)((char *)v78 + v80 + *(unsigned int *)((char *)v78 + v80));
      }
      else {
        long long v81 = 0;
      }
      sub_8F48DC(v81, (void (*)(void **__return_ptr, char *))sub_4A0694, (uint64_t)&__dst);
      sub_997050((uint64_t *)&__dst, a4, &v144);
      std::string::size_type v82 = v146.__r_.__value_.__r.__words[0];
      if (!v146.__r_.__value_.__r.__words[0])
      {
LABEL_116:
        std::string v146 = v144;
        std::string::size_type v85 = __dst.__r_.__value_.__r.__words[0];
        if (__dst.__r_.__value_.__r.__words[0])
        {
          std::string::size_type v86 = __dst.__r_.__value_.__l.__size_;
          uint64_t v87 = (void *)__dst.__r_.__value_.__r.__words[0];
          if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
          {
            do
            {
              uint64_t v88 = *(void *)(v86 - 24);
              if (v88)
              {
                uint64_t v89 = *(void *)(v86 - 16);
                long long v90 = *(void **)(v86 - 24);
                if (v89 != v88)
                {
                  do
                  {
                    if (*(char *)(v89 - 1) < 0) {
                      operator delete(*(void **)(v89 - 24));
                    }
                    v89 -= 32;
                  }
                  while (v89 != v88);
                  long long v90 = *(void **)(v86 - 24);
                }
                *(void *)(v86 - 16) = v88;
                operator delete(v90);
              }
              uint64_t v91 = (void **)(v86 - 64);
              if (*(char *)(v86 - 41) < 0) {
                operator delete(*v91);
              }
              v86 -= 64;
            }
            while (v91 != (void **)v85);
            uint64_t v87 = (void *)__dst.__r_.__value_.__r.__words[0];
            a4 = v138;
          }
          __dst.__r_.__value_.__l.__size_ = v85;
          operator delete(v87);
        }
        goto LABEL_132;
      }
      std::string::size_type v83 = v146.__r_.__value_.__l.__size_;
      uint64_t v84 = (void *)v146.__r_.__value_.__r.__words[0];
      if (v146.__r_.__value_.__l.__size_ == v146.__r_.__value_.__r.__words[0])
      {
LABEL_115:
        v146.__r_.__value_.__l.__size_ = v82;
        operator delete(v84);
        a4 = v138;
        goto LABEL_116;
      }
      while (1)
      {
        if (*(char *)(v83 - 1) < 0)
        {
          operator delete(*(void **)(v83 - 24));
          if ((*(char *)(v83 - 33) & 0x80000000) == 0) {
            goto LABEL_110;
          }
LABEL_113:
          operator delete(*(void **)(v83 - 56));
          v83 -= 56;
          if (v83 == v82)
          {
LABEL_114:
            uint64_t v84 = (void *)v146.__r_.__value_.__r.__words[0];
            goto LABEL_115;
          }
        }
        else
        {
          if (*(char *)(v83 - 33) < 0) {
            goto LABEL_113;
          }
LABEL_110:
          v83 -= 56;
          if (v83 == v82) {
            goto LABEL_114;
          }
        }
      }
    }
  }
LABEL_132:
  uint64_t v92 = (void **)__p[0];
  if (__p[0])
  {
    uint64_t v93 = (char *)__p[1];
    uint64_t v94 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        uint64_t v95 = *((void *)v93 - 3);
        if (v95)
        {
          uint64_t v96 = *((void *)v93 - 2);
          uint64_t v97 = (void *)*((void *)v93 - 3);
          if (v96 != v95)
          {
            do
            {
              if (*(char *)(v96 - 1) < 0) {
                operator delete(*(void **)(v96 - 24));
              }
              v96 -= 32;
            }
            while (v96 != v95);
            uint64_t v97 = (void *)*((void *)v93 - 3);
          }
          *((void *)v93 - 2) = v95;
          operator delete(v97);
        }
        uint64_t v98 = (void **)(v93 - 64);
        if (*(v93 - 41) < 0) {
          operator delete(*v98);
        }
        v93 -= 64;
      }
      while (v98 != v92);
      a4 = v138;
      uint64_t v94 = __p[0];
    }
    __p[1] = v92;
    operator delete(v94);
  }
LABEL_148:
  if (v146.__r_.__value_.__r.__words[0] != v146.__r_.__value_.__l.__size_) {
    goto LABEL_179;
  }
  uint64_t v99 = (int *)sub_498D5C(a1[2], v24, 0, "stop");
  long long v100 = (unsigned __int16 *)((char *)v99 - *v99);
  if (*v100 >= 9u && (uint64_t v101 = v100[4]) != 0) {
    long long v102 = (char **)((char *)v99 + v101 + *(unsigned int *)((char *)v99 + v101));
  }
  else {
    long long v102 = 0;
  }
  sub_8F48DC(v102, (void (*)(void **__return_ptr, char *))sub_4A0694, (uint64_t)__p);
  sub_997050((uint64_t *)__p, a4, &__dst);
  std::string::size_type v103 = v146.__r_.__value_.__r.__words[0];
  if (v146.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v104 = v146.__r_.__value_.__l.__size_;
    long long v105 = (void *)v146.__r_.__value_.__r.__words[0];
    if (v146.__r_.__value_.__l.__size_ == v146.__r_.__value_.__r.__words[0])
    {
LABEL_162:
      v146.__r_.__value_.__l.__size_ = v103;
      operator delete(v105);
      goto LABEL_163;
    }
    while (1)
    {
      if (*(char *)(v104 - 1) < 0)
      {
        operator delete(*(void **)(v104 - 24));
        if ((*(char *)(v104 - 33) & 0x80000000) == 0) {
          goto LABEL_157;
        }
LABEL_160:
        operator delete(*(void **)(v104 - 56));
        v104 -= 56;
        if (v104 == v103)
        {
LABEL_161:
          long long v105 = (void *)v146.__r_.__value_.__r.__words[0];
          goto LABEL_162;
        }
      }
      else
      {
        if (*(char *)(v104 - 33) < 0) {
          goto LABEL_160;
        }
LABEL_157:
        v104 -= 56;
        if (v104 == v103) {
          goto LABEL_161;
        }
      }
    }
  }
LABEL_163:
  std::string v146 = __dst;
  uint64_t v106 = (void **)__p[0];
  if (__p[0])
  {
    uint64_t v107 = (char *)__p[1];
    uint64_t v108 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        uint64_t v109 = *((void *)v107 - 3);
        if (v109)
        {
          uint64_t v110 = *((void *)v107 - 2);
          uint64_t v111 = (void *)*((void *)v107 - 3);
          if (v110 != v109)
          {
            do
            {
              if (*(char *)(v110 - 1) < 0) {
                operator delete(*(void **)(v110 - 24));
              }
              v110 -= 32;
            }
            while (v110 != v109);
            uint64_t v111 = (void *)*((void *)v107 - 3);
          }
          *((void *)v107 - 2) = v109;
          operator delete(v111);
        }
        int v112 = (void **)(v107 - 64);
        if (*(v107 - 41) < 0) {
          operator delete(*v112);
        }
        v107 -= 64;
      }
      while (v112 != v106);
      uint64_t v108 = __p[0];
    }
    __p[1] = v106;
    operator delete(v108);
  }
LABEL_179:
  sub_994EAC((uint64_t *)&v146, (uint64_t)__p);
  if (SHIBYTE(v148) < 0) {
    operator delete((void *)v147);
  }
  uint64_t v148 = v140;
  long long v147 = *(_OWORD *)__p;
  unint64_t v113 = BYTE7(v140);
  if (SBYTE7(v140) < 0) {
    unint64_t v113 = *((void *)&v147 + 1);
  }
  if (!v113 && sub_723EC(1u))
  {
    sub_6BAC((uint64_t)__p);
    sub_188FC78(__p, (uint64_t)"Could not resolve any name for stop ", 36);
    uint64_t v114 = a1[2];
    int v115 = (int *)sub_498D5C(v114, v24, 0, "stop");
    long long v116 = (unsigned __int16 *)((char *)v115 - *v115);
    if (*v116 >= 5u && (uint64_t v117 = v116[2]) != 0) {
      uint64_t v118 = *(void *)((char *)v115 + v117);
    }
    else {
      uint64_t v118 = 0;
    }
    long long v119 = sub_398020(v114, 0);
    long long v120 = &v119[-*(int *)v119];
    if (*(unsigned __int16 *)v120 >= 0xBu)
    {
      uint64_t v121 = *((unsigned __int16 *)v120 + 5);
      if (v121)
      {
        if (v119[v121]) {
          nullsub_1(v118);
        }
      }
    }
    std::ostream::operator<<();
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__dst, 1u);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    if (v143 < 0) {
      operator delete(v142);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  long long v122 = (int *)sub_8DFD1C(a1[1], v11, 0, "line");
  uint64_t v123 = (unsigned __int16 *)((char *)v122 - *v122);
  int v125 = *v123 >= 0x2Du && (v124 = v123[22]) != 0 && *((unsigned __int8 *)v122 + v124) != 0;
  uint64_t v126 = (int *)sub_8DFD1C(a1[1], v11, 0, "line");
  uint64_t v127 = (unsigned __int16 *)((char *)v126 - *v126);
  if (*v127 >= 0x2Bu && (uint64_t v128 = v127[21]) != 0) {
    uint64_t v129 = *(unsigned __int16 *)((char *)v126 + v128);
  }
  else {
    uint64_t v129 = 2;
  }
  *(_OWORD *)std::string __p = 0u;
  long long v140 = 0u;
  int v141 = 1065353216;
  std::string::size_type v130 = HIBYTE(v150[0].__r_.__value_.__r.__words[2]);
  if ((v150[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v130 = v150[0].__r_.__value_.__l.__size_;
  }
  if (v130) {
    sub_92DCD0((uint64_t)__p, (uint64_t)&dword_25D3D98, (uint64_t)&dword_25D3D98, (uint64_t)v150);
  }
  std::string::size_type v131 = HIBYTE(v149.__r_.__value_.__r.__words[2]);
  if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v131 = v149.__r_.__value_.__l.__size_;
  }
  if (v131) {
    sub_92DCD0((uint64_t)__p, (uint64_t)&qword_25D3E88, (uint64_t)&qword_25D3E88, (uint64_t)&v149);
  }
  sub_92DCD0((uint64_t)__p, (uint64_t)&dword_25D3E58, (uint64_t)&dword_25D3E58, (uint64_t)&v147);
  if (byte_25D4428[23] < 0) {
    sub_4200(&__dst, *(void **)byte_25D4428, *(unint64_t *)&byte_25D4428[8]);
  }
  else {
    std::string __dst = *(std::string *)byte_25D4428;
  }
  sub_98E2D8(__p, v129, v125, 1, a2, (uint64_t)&__dst);
  sub_6581AC((uint64_t)&__dst, (uint64_t)__p, a2, 0, &v144);
  sub_5F3D48(a5, (uint64_t)&v144);
  if ((SHIBYTE(v144.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_219;
    }
    goto LABEL_222;
  }
  operator delete(v144.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_222:
    operator delete(__dst.__r_.__value_.__l.__data_);
    long long v132 = (char *)v140;
    if (!(void)v140) {
      goto LABEL_229;
    }
    while (1)
    {
LABEL_226:
      long long v133 = *(char **)v132;
      if (v132[63] < 0)
      {
        operator delete(*((void **)v132 + 5));
        if ((v132[39] & 0x80000000) == 0) {
          goto LABEL_225;
        }
LABEL_228:
        operator delete(*((void **)v132 + 2));
        operator delete(v132);
        long long v132 = v133;
        if (!v133) {
          goto LABEL_229;
        }
      }
      else
      {
        if (v132[39] < 0) {
          goto LABEL_228;
        }
LABEL_225:
        operator delete(v132);
        long long v132 = v133;
        if (!v133) {
          goto LABEL_229;
        }
      }
    }
  }
LABEL_219:
  long long v132 = (char *)v140;
  if ((void)v140) {
    goto LABEL_226;
  }
LABEL_229:
  long long v134 = __p[0];
  __p[0] = 0;
  if (v134) {
    operator delete(v134);
  }
  std::string::size_type v135 = v146.__r_.__value_.__r.__words[0];
  if (v146.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v136 = v146.__r_.__value_.__l.__size_;
    long long v137 = (void *)v146.__r_.__value_.__r.__words[0];
    if (v146.__r_.__value_.__l.__size_ == v146.__r_.__value_.__r.__words[0])
    {
LABEL_240:
      v146.__r_.__value_.__l.__size_ = v135;
      operator delete(v137);
      goto LABEL_241;
    }
    while (1)
    {
      if (*(char *)(v136 - 1) < 0)
      {
        operator delete(*(void **)(v136 - 24));
        if ((*(char *)(v136 - 33) & 0x80000000) == 0) {
          goto LABEL_235;
        }
LABEL_238:
        operator delete(*(void **)(v136 - 56));
        v136 -= 56;
        if (v136 == v135)
        {
LABEL_239:
          long long v137 = (void *)v146.__r_.__value_.__r.__words[0];
          goto LABEL_240;
        }
      }
      else
      {
        if (*(char *)(v136 - 33) < 0) {
          goto LABEL_238;
        }
LABEL_235:
        v136 -= 56;
        if (v136 == v135) {
          goto LABEL_239;
        }
      }
    }
  }
LABEL_241:
  if (SHIBYTE(v148) < 0)
  {
    operator delete((void *)v147);
    if ((SHIBYTE(v149.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_243:
      if ((SHIBYTE(v150[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_247:
      operator delete(v150[0].__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v149.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_243;
  }
  operator delete(v149.__r_.__value_.__l.__data_);
  if (SHIBYTE(v150[0].__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_247;
  }
}

void sub_92D2C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  sub_8F36A0((void ***)(v50 - 256));
  sub_8F36A0(&a11);
  sub_8E4FE0((void **)(v50 - 224));
  if (*(char *)(v50 - 169) < 0)
  {
    operator delete(*(void **)(v50 - 192));
    if ((*(char *)(v50 - 137) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((*(char *)(v50 - 137) & 0x80000000) == 0)
  {
LABEL_3:
    if (*(char *)(v50 - 105) < 0) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  operator delete(*(void **)(v50 - 160));
  if (*(char *)(v50 - 105) < 0)
  {
LABEL_4:
    operator delete(*(void **)(v50 - 128));
    _Unwind_Resume(a1);
  }
LABEL_7:
  _Unwind_Resume(a1);
}

void sub_92D434(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  sub_92D664(a3 + 32, *a1, a4, &v15);
  if (v15 == v16)
  {
    sub_5F3B34(a5);
    goto LABEL_16;
  }
  sub_92DA08(&__p, "{RouteName}", (long long *)v15);
  sub_2AAA4((uint64_t)v13, (uint64_t)&__p, 1);
  if (v20 < 0)
  {
    operator delete(v19);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_4;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_4;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_4:
  sub_6581AC((uint64_t)&xmmword_25D4410, (uint64_t)v13, a2, 0, &__p);
  sub_5F3D48(a5, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  char v7 = (void **)v14;
  if (v14)
  {
    do
    {
      uint64_t v9 = (void **)*v7;
      if (*((char *)v7 + 63) < 0)
      {
        operator delete(v7[5]);
        if (*((char *)v7 + 39) < 0) {
LABEL_14:
        }
          operator delete(v7[2]);
      }
      else if (*((char *)v7 + 39) < 0)
      {
        goto LABEL_14;
      }
      operator delete(v7);
      char v7 = v9;
    }
    while (v9);
  }
  int v8 = v13[0];
  v13[0] = 0;
  if (v8) {
    operator delete(v8);
  }
LABEL_16:
  long long v10 = v15;
  if (v15)
  {
    uint64_t v11 = (uint64_t)v16;
    uint64_t v12 = v15;
    if (v16 != v15)
    {
      do
      {
        v11 -= 176;
        sub_57523C((uint64_t)&v17, v11);
      }
      while ((void *)v11 != v10);
      uint64_t v12 = v15;
    }
    unsigned int v16 = v10;
    operator delete(v12);
  }
}

void sub_92D5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_591648((void **)va);
  _Unwind_Resume(a1);
}

void sub_92D5FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  sub_50828((uint64_t)&a10);
  sub_591648(&a15);
  _Unwind_Resume(a1);
}

void sub_92D630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  int v8 = va_arg(va1, void *);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_1B23C((uint64_t)va1);
  sub_591648((void **)va);
  _Unwind_Resume(a1);
}

void sub_92D64C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_591648((void **)va);
  _Unwind_Resume(a1);
}

void sub_92D664(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  std::string __p = 0;
  unint64_t v13 = 0;
  uint64_t v14 = 0;
  char v7 = sub_64D0D0((uint64_t *)&__p, a1);
  unint64_t v13 = v7;
  sub_73D1DC((uint64_t)(v7 - 12328), a2);
  sub_73D57C((int64x2_t *)(v7 - 12328), a2, a3);
  sub_79C440(v11, (uint64_t)a2, a3);
  sub_79C5B4((uint64_t)v11, &__p);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_59888C((uint64_t)a4, *((void *)v7 - 1402), *((void *)v7 - 1401), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)v7 - 1401) - *((void *)v7 - 1402)) >> 4));
  int v8 = (char *)__p;
  if (__p)
  {
    uint64_t v9 = (uint64_t)v13;
    uint64_t v10 = __p;
    if (v13 != __p)
    {
      do
        uint64_t v9 = sub_5752F4(v9 - 12328);
      while ((char *)v9 != v8);
      uint64_t v10 = __p;
    }
    unint64_t v13 = v8;
    operator delete(v10);
  }
}

void sub_92D778(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5916B4((void **)va);
  _Unwind_Resume(a1);
}

void sub_92D78C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5916B4((void **)va);
  _Unwind_Resume(a1);
}

void sub_92D7A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5916B4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_92D7B4@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  for (uint64_t i = *(uint64_t **)(result + 24); ; i += 8)
  {
    if (i == *(uint64_t **)(result + 32))
    {
      *a2 = 0;
      a2[1] = 0;
      return result;
    }
    uint64_t v3 = *i;
    uint64_t v4 = i[1];
    if (*i != v4)
    {
      while (*(_DWORD *)v3)
      {
        v3 += 144;
        if (v3 == v4) {
          goto LABEL_16;
        }
      }
    }
    if (v3 == v4)
    {
LABEL_16:
      exception = __cxa_allocate_exception(0x40uLL);
      sub_5E5C(&v10, "Journey has a segment bundle without a main segment");
      uint64_t v9 = (void *)sub_2F404((uint64_t)exception, &v10);
    }
    uint64_t v6 = *(void *)(v3 + 8);
    uint64_t v5 = *(void *)(v3 + 16);
    if (v6 != v5) {
      break;
    }
LABEL_2:
    ;
  }
  uint64_t v7 = v6;
  while (*(_DWORD *)(v7 + 1088))
  {
    v7 += 1096;
    v6 += 1096;
    if (v7 == v5) {
      goto LABEL_2;
    }
  }
  *((unsigned char *)a2 + 8) = 1;
  *a2 = v6;
  return result;
}

void sub_92D8AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_92D8DC@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  for (uint64_t i = *(uint64_t **)(result + 24); ; i += 8)
  {
    if (i == *(uint64_t **)(result + 32))
    {
      *a2 = 0;
      a2[1] = 0;
      return result;
    }
    uint64_t v3 = *i;
    uint64_t v4 = i[1];
    if (*i != v4)
    {
      while (*(_DWORD *)v3)
      {
        v3 += 144;
        if (v3 == v4) {
          goto LABEL_16;
        }
      }
    }
    if (v3 == v4)
    {
LABEL_16:
      exception = __cxa_allocate_exception(0x40uLL);
      sub_5E5C(&v10, "Journey has a segment bundle without a main segment");
      uint64_t v9 = (void *)sub_2F404((uint64_t)exception, &v10);
    }
    uint64_t v6 = *(void *)(v3 + 8);
    uint64_t v5 = *(void *)(v3 + 16);
    if (v6 != v5) {
      break;
    }
LABEL_2:
    ;
  }
  uint64_t v7 = v6;
  while (*(_DWORD *)(v7 + 1088) != 3)
  {
    v7 += 1096;
    v6 += 1096;
    if (v7 == v5) {
      goto LABEL_2;
    }
  }
  *((unsigned char *)a2 + 8) = 1;
  *a2 = v6;
  return result;
}

void sub_92D9D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_92DA08(void *a1, char *__s, long long *a3)
{
  size_t v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v12 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v12 = v6 | 7;
    }
    uint64_t v13 = v12 + 1;
    int v8 = operator new(v12 + 1);
    a1[1] = v7;
    a1[2] = v13 | 0x8000000000000000;
    *a1 = v8;
LABEL_9:
    memmove(v8, __s, v7);
    *((unsigned char *)v8 + v7) = 0;
    uint64_t v9 = (char *)(a1 + 3);
    if ((*((char *)a3 + 23) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  *((unsigned char *)a1 + 23) = v6;
  int v8 = a1;
  if (v6) {
    goto LABEL_9;
  }
  *(unsigned char *)a1 = 0;
  uint64_t v9 = (char *)(a1 + 3);
  if ((*((char *)a3 + 23) & 0x80000000) == 0)
  {
LABEL_5:
    long long v10 = *a3;
    *((void *)v9 + 2) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v9 = v10;
    return a1;
  }
LABEL_10:
  sub_4200(v9, *(void **)a3, *((void *)a3 + 1));
  return a1;
}

void sub_92DB08(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_92DB24(void **a1)
{
  uint64_t v3 = (char *)*a1;
  uint64_t v2 = (char *)a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v2 - (unsigned char *)*a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - v3) >> 4) > v5) {
    unint64_t v5 = 0x5555555555555556 * (((unsigned char *)a1[2] - v3) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - v3) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v5;
  }
  if (v6)
  {
    if (v6 > 0x555555555555555) {
      sub_188D718();
    }
    size_t v7 = (char *)operator new(48 * v6);
  }
  else
  {
    size_t v7 = 0;
  }
  int v8 = &v7[48 * v4];
  *(void *)int v8 = 0x8000000080000000;
  *((_DWORD *)v8 + 2) = 0x7FFFFFFF;
  *((void *)v8 + 2) = 0x7FFFFFFFFFFFFFFFLL;
  *((void *)v8 + 3) = 0;
  uint64_t v9 = &v7[48 * v6];
  *((void *)v8 + 4) = 0;
  *((void *)v8 + 5) = 0;
  long long v10 = v8 + 48;
  if (v2 == v3)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v2) {
      return v10;
    }
    goto LABEL_23;
  }
  do
  {
    long long v11 = *((_OWORD *)v2 - 3);
    *((void *)v8 - 4) = *((void *)v2 - 4);
    *((_OWORD *)v8 - 3) = v11;
    *((void *)v8 - 2) = 0;
    *((void *)v8 - 1) = 0;
    *(_OWORD *)(v8 - 24) = *(_OWORD *)(v2 - 24);
    *((void *)v8 - 1) = *((void *)v2 - 1);
    v8 -= 48;
    *((void *)v2 - 3) = 0;
    *((void *)v2 - 2) = 0;
    *((void *)v2 - 1) = 0;
    v2 -= 48;
  }
  while (v2 != v3);
  uint64_t v12 = (char *)*a1;
  uint64_t v2 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = v9;
  if (v2 != v12)
  {
    do
    {
      uint64_t v13 = *((void *)v2 - 3);
      if (v13)
      {
        uint64_t v14 = *((void *)v2 - 2);
        uint64_t v15 = (void *)*((void *)v2 - 3);
        if (v14 != v13)
        {
          do
            uint64_t v14 = sub_4D4B58(v14 - 160);
          while (v14 != v13);
          uint64_t v15 = (void *)*((void *)v2 - 3);
        }
        *((void *)v2 - 2) = v13;
        operator delete(v15);
      }
      v2 -= 48;
    }
    while (v2 != v12);
    uint64_t v2 = v12;
  }
  if (v2) {
LABEL_23:
  }
    operator delete(v2);
  return v10;
}

uint64_t *sub_92DCD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  size_t v7 = (unsigned char *)a2;
  unint64_t v9 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v10 = v9;
  }
  unint64_t v11 = sub_B128((uint64_t)v41, (uint64_t *)a2, v10);
  unint64_t v12 = v11;
  unint64_t v13 = *(void *)(a1 + 8);
  if (v13)
  {
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v4 = v11;
      if (v11 >= v13) {
        unint64_t v4 = v11 % v13;
      }
    }
    else
    {
      unint64_t v4 = (v13 - 1) & v11;
    }
    uint64_t v15 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      unsigned int v16 = *v15;
      if (*v15)
      {
        char v17 = v7[23];
        if (v17 >= 0) {
          uint64_t v18 = v7[23];
        }
        else {
          uint64_t v18 = *((void *)v7 + 1);
        }
        if (v17 < 0) {
          size_t v7 = *(unsigned char **)v7;
        }
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v23 = v16[1];
            if (v23 == v12)
            {
              uint64_t v24 = *((unsigned __int8 *)v16 + 39);
              if ((v24 & 0x80u) == 0) {
                uint64_t v25 = *((unsigned __int8 *)v16 + 39);
              }
              else {
                uint64_t v25 = v16[3];
              }
              if (v25 == v18)
              {
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v16[2], v7, v16[3])) {
                    return v16;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v16 + 39)) {
                    return v16;
                  }
                  uint64_t v26 = 0;
                  while (*((unsigned __int8 *)v16 + v26 + 16) == v7[v26])
                  {
                    if (v24 == ++v26) {
                      return v16;
                    }
                  }
                }
              }
            }
            else if ((v23 & (v13 - 1)) != v4)
            {
              goto LABEL_51;
            }
            unsigned int v16 = (uint64_t *)*v16;
            if (!v16) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v19 = v16[1];
          if (v19 == v12)
          {
            uint64_t v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0) {
              uint64_t v21 = *((unsigned __int8 *)v16 + 39);
            }
            else {
              uint64_t v21 = v16[3];
            }
            if (v21 == v18)
            {
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp((const void *)v16[2], v7, v16[3])) {
                  return v16;
                }
              }
              else
              {
                if (!*((unsigned char *)v16 + 39)) {
                  return v16;
                }
                uint64_t v22 = 0;
                while (*((unsigned __int8 *)v16 + v22 + 16) == v7[v22])
                {
                  if (v20 == ++v22) {
                    return v16;
                  }
                }
              }
            }
          }
          else
          {
            if (v19 >= v13) {
              v19 %= v13;
            }
            if (v19 != v4) {
              break;
            }
          }
          unsigned int v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_51:
  sub_92E0F8(a1, v12, a3, a4, (uint64_t)v41);
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v13 || (float)(v28 * (float)v13) < v27)
  {
    BOOL v30 = 1;
    if (v13 >= 3) {
      BOOL v30 = (v13 & (v13 - 1)) != 0;
    }
    unint64_t v31 = v30 | (2 * v13);
    unint64_t v32 = vcvtps_u32_f32(v27 / v28);
    if (v31 <= v32) {
      size_t prime = v32;
    }
    else {
      size_t prime = v31;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v34 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v34) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v34)
    {
      unint64_t v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v34 < 3uLL || (uint8x8_t v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        unint64_t v35 = std::__next_prime(v35);
      }
      else
      {
        uint64_t v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2) {
          unint64_t v35 = v37;
        }
      }
      if (prime <= v35) {
        size_t prime = v35;
      }
      if (prime < *(void *)&v34) {
LABEL_65:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v13 = *(void *)(a1 + 8);
    unint64_t v38 = v13 - 1;
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
      {
        unint64_t v4 = v12 % v13;
        long long v29 = *(void **)(*(void *)a1 + 8 * (v12 % v13));
        if (v29) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v4 = v12;
        long long v29 = *(void **)(*(void *)a1 + 8 * v12);
        if (v29) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v4 = v38 & v12;
      long long v29 = *(void **)(*(void *)a1 + 8 * (v38 & v12));
      if (v29) {
        goto LABEL_54;
      }
    }
LABEL_78:
    *(void *)v41[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v41[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v41[0])
    {
      unint64_t v39 = *(void *)(*(void *)v41[0] + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v39 >= v13) {
          v39 %= v13;
        }
      }
      else
      {
        v39 &= v13 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v39) = v41[0];
    }
    goto LABEL_89;
  }
  long long v29 = *(void **)(*(void *)a1 + 8 * v4);
  if (!v29) {
    goto LABEL_78;
  }
LABEL_54:
  *(void *)v41[0] = *v29;
  *long long v29 = v41[0];
LABEL_89:
  unsigned int v16 = (uint64_t *)v41[0];
  ++*(void *)(a1 + 24);
  return v16;
}

void sub_92E0E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2D9D4((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned char *sub_92E0F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = operator new(0x40uLL);
  unint64_t v11 = v10;
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  void *v10 = 0;
  v10[1] = a2;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200((unsigned char *)v10 + 16, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v10 + 1) = *(_OWORD *)a3;
    v10[4] = *(void *)(a3 + 16);
  }
  __n128 result = v11 + 5;
  if (*(char *)(a4 + 23) < 0)
  {
    __n128 result = sub_4200(result, *(void **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)__n128 result = *(_OWORD *)a4;
    v11[7] = *(void *)(a4 + 16);
  }
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_92E1AC(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 39) < 0)
  {
    operator delete(*v3);
    sub_2D9D4(v1);
    _Unwind_Resume(a1);
  }
  sub_2D9D4(v1);
  _Unwind_Resume(a1);
}

double sub_92E1E4()
{
  byte_25D3CBF = 1;
  word_25D3CA8 = 65;
  byte_25D3CD7 = 1;
  word_25D3CC0 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25D4440 = 0u;
  *(_OWORD *)&qword_25D4450 = 0u;
  dword_25D4460 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25D4440, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25D4440, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25D4440, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25D4440, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25D3CEF = 8;
  strcpy((char *)&qword_25D3CD8, "any_mode");
  byte_25D3D07 = 7;
  strcpy((char *)&dword_25D3CF0, "cycling");
  byte_25D3D1F = 7;
  strcpy((char *)&dword_25D3D08, "driving");
  byte_25D3D37 = 7;
  strcpy((char *)&dword_25D3D20, "walking");
  qword_25D3D40 = 0;
  qword_25D3D48 = 0;
  qword_25D3D38 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25D3D38 = (uint64_t)v0;
  qword_25D3D40 = (uint64_t)(v0 + 9);
  qword_25D3D48 = (uint64_t)(v0 + 9);
  qword_25D3D50 = 0;
  qword_25D3D58 = 0;
  unk_25D3D60 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25D3D58 = (uint64_t)(v1 + 9);
  unk_25D3D60 = v1 + 9;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25D3D50 = (uint64_t)v1;
  byte_25D3D7F = 6;
  strcpy((char *)&dword_25D3D68, "{Mode}");
  byte_25D3D97 = 11;
  strcpy((char *)&qword_25D3D80, "{Direction}");
  byte_25D3DAF = 6;
  strcpy((char *)&dword_25D3D98, "{Line}");
  byte_25D3DC7 = 12;
  strcpy((char *)&qword_25D3DB0, "{LineNumber}");
  strcpy(&byte_25D3DDF, "\n{Headsign1}");
  strcpy((char *)&qword_25D3DC8, "{Headsign}");
  byte_25D3DF7 = 11;
  byte_25D3E0F = 11;
  strcpy((char *)&qword_25D3DF8, "{Headsign2}");
  byte_25D3E27 = 11;
  strcpy((char *)&qword_25D3E10, "{Headsign3}");
  byte_25D3E3F = 11;
  strcpy((char *)&qword_25D3E28, "{Headsign4}");
  byte_25D3E57 = 11;
  strcpy((char *)&qword_25D3E40, "{Headsign5}");
  byte_25D3E6F = 6;
  strcpy((char *)&dword_25D3E58, "{Stop}");
  byte_25D3E87 = 14;
  strcpy((char *)&qword_25D3E70, "{PreviousStop}");
  byte_25D3E9F = 8;
  strcpy((char *)&qword_25D3E88, "{System}");
  byte_25D3EB7 = 15;
  strcpy((char *)&qword_25D3EA0, "{VehicleNumber}");
  byte_25D3ECF = 17;
  strcpy((char *)&xmmword_25D3EB8, "{AccessPointExit}");
  strcpy(&byte_25D3EE7, "\n{nextBoardStation}");
  strcpy((char *)&qword_25D3ED0, "{Platform}");
  byte_25D3EFF = 18;
  qword_25D3F00 = 0;
  unk_25D3F08 = 0;
  qword_25D3F10 = 0;
  byte_25D3F2F = 1;
  word_25D3F18 = 32;
  qword_25D3F30 = (uint64_t)operator new(0x20uLL);
  unk_25D3F38 = xmmword_20B8890;
  strcpy((char *)qword_25D3F30, "LeaveStop_Loc_Comma_Separator");
  byte_25D3F5F = 5;
  dword_25D3F48 = -1028144608;
  word_25D3F4C = 160;
  byte_25D3F77 = 2;
  word_25D3F60 = -24382;
  byte_25D3F62 = 0;
  byte_25D3F8F = 4;
  dword_25D3F78 = 548913696;
  byte_25D3F7C = 0;
  byte_25D3FA7 = 15;
  strcpy((char *)&qword_25D3F90 + 7, "\xB7 {/s:s}");
  strcpy((char *)&qword_25D3F90, "{s:s} ·");
  byte_25D3FBF = 6;
  strcpy((char *)&dword_25D3FA8, "NoType");
  byte_25D3FD7 = 14;
  strcpy((char *)&qword_25D3FC0, "{WalkDistance}");
  strcpy(&byte_25D3FEF, "\n{OneMinute}");
  strcpy((char *)&qword_25D3FD8, "{WalkTime}");
  byte_25D4007 = 11;
  byte_25D401F = 14;
  strcpy((char *)&qword_25D4008, "{StepDuration}");
  byte_25D4037 = 15;
  strcpy((char *)&qword_25D4020, "{TripFrequency}");
  byte_25D404F = 11;
  strcpy((char *)&qword_25D4038, "{BoardTime}");
  byte_25D4067 = 12;
  strcpy((char *)&qword_25D4050, "{AlightTime}");
  byte_25D407F = 21;
  strcpy((char *)&xmmword_25D4068, "{FutureTimestampList}");
  byte_25D4097 = 15;
  strcpy((char *)&qword_25D4080, "{DepartureTime}");
  byte_25D40AF = 13;
  strcpy((char *)&qword_25D4098, "{ArrivalTime}");
  byte_25D40C7 = 19;
  strcpy((char *)&xmmword_25D40B0, "{TotalWalkDistance}");
  byte_25D40DF = 14;
  strcpy((char *)&qword_25D40C8, "{TripDuration}");
  byte_25D40F7 = 11;
  strcpy((char *)&qword_25D40E0, "{DayOfWeek}");
  byte_25D410F = 6;
  strcpy((char *)&dword_25D40F8, "{Date}");
  byte_25D4127 = 16;
  strcpy((char *)&xmmword_25D4110, "{OutTheDoorTime}");
  qword_25D4128 = (uint64_t)operator new(0x20uLL);
  unk_25D4130 = xmmword_20B91A0;
  strcpy((char *)qword_25D4128, "{FirstVehicleDepartureTime}");
  byte_25D4157 = 18;
  strcpy(byte_25D4140, "{RouteArrivalTime}");
  strcpy(&byte_25D416F, "\n{IC_Artwork}");
  strcpy((char *)&qword_25D4158, "{BaseFare}");
  byte_25D4187 = 12;
  byte_25D419F = 11;
  strcpy((char *)&qword_25D4188, "{RT_Symbol}");
  byte_25D41B7 = 12;
  strcpy((char *)&qword_25D41A0, "{TotalPrice}");
  byte_25D41CF = 13;
  strcpy((char *)&qword_25D41B8, "{CheckInTime}");
  byte_25D41E7 = 19;
  strcpy(byte_25D41D0, "{LiveDepartureTime}");
  strcpy(&byte_25D41FF, "\n{LegDuration}");
  strcpy((char *)&qword_25D41E8, "{TimeList}");
  byte_25D4217 = 13;
  byte_25D422F = 15;
  strcpy((char *)&qword_25D4218, "{CountdownList}");
  byte_25D4247 = 3;
  dword_25D4230 = 8217723;
  strcpy(&byte_25D425F, "\t{AccessPointArt}");
  strcpy((char *)&qword_25D4248, "{LineArt}");
  byte_25D4277 = 16;
  byte_25D428F = 11;
  strcpy((char *)&qword_25D4278, "{SystemArt}");
  strcpy(&byte_25D42A7, "\n{ServiceBeginTime}");
  strcpy((char *)&qword_25D4290, "{CardName}");
  byte_25D42BF = 18;
  byte_25D42D7 = 16;
  strcpy((char *)&xmmword_25D42C0, "{ServiceEndTime}");
  byte_25D42EF = 6;
  strcpy((char *)&dword_25D42D8, "OnTime");
  byte_25D4307 = 6;
  strcpy((char *)&dword_25D42F0, "Delays");
  byte_25D431F = 1;
  word_25D4308 = 115;
  byte_25D4337 = 2;
  strcpy((char *)&word_25D4320, "cs");
  byte_25D434F = 1;
  word_25D4338 = 112;
  byte_25D4367 = 5;
  strcpy((char *)&dword_25D4350, "_Line");
  byte_25D437F = 7;
  strcpy((char *)&dword_25D4368, "_System");
  strcpy(&byte_25D4397, "\n_VehicleNumber");
  strcpy((char *)&qword_25D4380, "_Direction");
  byte_25D43AF = 14;
  byte_25D43C7 = 12;
  strcpy((char *)&qword_25D43B0, "_To_Headsign");
  byte_25D43DF = 16;
  strcpy((char *)&xmmword_25D43C8, "_Toward_Headsign");
  strcpy(&byte_25D43F7, "\t_LineNumber");
  strcpy((char *)&qword_25D43E0, "_Headsign");
  byte_25D440F = 11;
  byte_25D4427 = 17;
  strcpy((char *)&xmmword_25D4410, "RouteSummary_Walk");
  *(void *)&xmmword_25D4428 = operator new(0x20uLL);
  *(long long *)((char *)&xmmword_25D4428 + 8) = xmmword_20B8E90;
  strcpy((char *)xmmword_25D4428, "RouteSummary_System_Line_{Mode}");
  return *(double *)"stem_Line_{Mode}";
}

void sub_92EE2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25D4450) {
    sub_20AC72C((void **)qword_25D4450);
  }
  uint64_t v37 = (void *)xmmword_25D4440;
  *(void *)&xmmword_25D4440 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void *sub_92EECC(void *a1, uint64_t a2, void *a3)
{
  __n128 result = sub_93C858(a1, a2, a3);
  *__n128 result = off_243B868;
  return result;
}

void sub_92EF04(uint64_t a1, uint64_t a2)
{
  memset(&v14, 0, sizeof(v14));
  memset(&v13, 0, sizeof(v13));
  sub_9C92C0(a1, (uint64_t)&v9);
  if (v11)
  {
    if (v12 - 1 < 2)
    {
      sub_93DD34(a1, a2);
      goto LABEL_17;
    }
    if ((int)fabs((double)(10 * (v9 - v10))) < 600)
    {
      std::string::assign(&v13, "{RT_Symbol}");
      unsigned int v4 = 1;
      int v5 = 1;
      std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
      if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v14.__r_.__value_.__l.__size_;
      }
      if (!size)
      {
LABEL_16:
        sub_5F4680(a2, (uint64_t)&v13, (uint64_t)&word_25D4AC8, v5);
        sub_98ED08(a2, v4);
        sub_52500C(1u, (uint64_t)&v15);
        sub_5F40C0(a2, (long long *)&qword_25D4948);
      }
    }
    else
    {
      if (v9 >= v10) {
        unsigned int v4 = 2;
      }
      else {
        unsigned int v4 = 3;
      }
      std::string::assign(&v14, "Now {LiveDepartureTime} {RT_Symbol}");
      int v15 = v10;
      sub_5F5F70(a2, &xmmword_25D4990, &v15, a1 + 144, 0);
      int v5 = 2;
      std::string::size_type v6 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
      if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v6 = v14.__r_.__value_.__l.__size_;
      }
      if (!v6) {
        goto LABEL_16;
      }
    }
    int v8 = (const std::string *)sub_8D7730(*(void *)(a1 + 24), (uint64_t)&v14);
    std::string::operator=(&v13, v8);
    goto LABEL_16;
  }
LABEL_17:
  if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_21:
    operator delete(v14.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_21;
  }
}

void sub_92F168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  if (a19 < 0)
  {
    operator delete(__p);
    if ((a25 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a25 & 0x80000000) == 0)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  operator delete(a20);
  _Unwind_Resume(a1);
}

void sub_92F1C0(uint64_t a1, int a2, uint64_t a3)
{
}

void *sub_92F1D8@<X0>(uint64_t a1@<X8>)
{
  if (byte_25D46EF < 0) {
    return sub_4200((unsigned char *)a1, (void *)xmmword_25D46D8, *((unint64_t *)&xmmword_25D46D8 + 1));
  }
  *(_OWORD *)a1 = xmmword_25D46D8;
  *(void *)(a1 + 16) = unk_25D46E8;
  return result;
}

void sub_92F214(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (!*(unsigned char *)(a1 + 173)) {
    sub_92F264(a1, (uint64_t)a2);
  }
}

void sub_92F250(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_92F264(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_9C94FC(a1);
  int v5 = *(_DWORD *)v4;
  if (*(_DWORD *)v4 != 0x7FFFFFFF)
  {
    uint64_t v6 = *(unsigned __int8 *)(v4 + 31);
    if ((v6 & 0x80u) != 0) {
      uint64_t v6 = *(void *)(v4 + 16);
    }
    if (v6 && *(unsigned __int8 *)(*(void *)(a1 + 32) + 1177) >= 8u)
    {
      memset(&v14, 0, sizeof(v14));
      if (v5) {
        sub_5F6C04(a2, (long long *)&qword_25D4960);
      }
      uint64_t v7 = *(void *)(a1 + 24);
      std::string __p = (char *)operator new(0x20uLL);
      *(_OWORD *)__p_8 = xmmword_20B91A0;
      strcpy(__p, "RouteDescription_Price_Free");
      int v8 = (const std::string *)sub_8D7730(v7, (uint64_t)&__p);
      std::string::operator=(&v14, v8);
      if (SHIBYTE(__p_8[1]) < 0)
      {
        operator delete(__p);
        unint64_t v9 = *(void *)(a2 + 56);
        if (v9 < *(void *)(a2 + 64)) {
          goto LABEL_10;
        }
      }
      else
      {
        unint64_t v9 = *(void *)(a2 + 56);
        if (v9 < *(void *)(a2 + 64))
        {
LABEL_10:
          if (byte_25D471F < 0)
          {
            sub_4200((unsigned char *)v9, (void *)xmmword_25D4708, *((unint64_t *)&xmmword_25D4708 + 1));
          }
          else
          {
            long long v10 = xmmword_25D4708;
            *(void *)(v9 + 16) = unk_25D4718;
            *(_OWORD *)unint64_t v9 = v10;
          }
          char v11 = (char *)(v9 + 24);
          *(void *)(a2 + 56) = v9 + 24;
          goto LABEL_16;
        }
      }
      char v11 = sub_6E6EC((char **)(a2 + 48), (uint64_t)&xmmword_25D4708);
LABEL_16:
      *(void *)(a2 + 56) = v11;
      sub_5F41E8(a2, (uint64_t)&v14);
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v14.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_92F430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v22 = v21;
  *(void *)(v20 + 56) = v22;
  if ((a20 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_92F49C(void *a1)
{
  *a1 = off_243C0A0;
  uint64_t v2 = (void *)a1[26];
  if (v2)
  {
    a1[27] = v2;
    operator delete(v2);
  }

  return sub_92F570((uint64_t)a1);
}

void sub_92F4FC(void *a1)
{
  *a1 = off_243C0A0;
  uint64_t v2 = (void *)a1[26];
  if (v2)
  {
    a1[27] = v2;
    operator delete(v2);
  }
  sub_92F570((uint64_t)a1);

  operator delete();
}

uint64_t sub_92F570(uint64_t a1)
{
  *(void *)a1 = off_243C600;
  uint64_t v2 = *(void **)(a1 + 184);
  if (v2)
  {
    *(void *)(a1 + 192) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 167) < 0)
  {
    operator delete(*(void **)(a1 + 144));
    if ((*(char *)(a1 + 143) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*(char *)(a1 + 119) & 0x80000000) == 0) {
        goto LABEL_6;
      }
LABEL_11:
      operator delete(*(void **)(a1 + 96));
      uint64_t v3 = *(void **)(a1 + 56);
      if (!v3) {
        return a1;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(a1 + 143) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(a1 + 120));
  if (*(char *)(a1 + 119) < 0) {
    goto LABEL_11;
  }
LABEL_6:
  uint64_t v3 = *(void **)(a1 + 56);
  if (v3)
  {
LABEL_7:
    *(void *)(a1 + 64) = v3;
    operator delete(v3);
  }
  return a1;
}

char *sub_92F61C()
{
  byte_25D447F = 1;
  word_25D4468 = 65;
  byte_25D4497 = 1;
  word_25D4480 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25D4BD0 = 0u;
  *(_OWORD *)&qword_25D4BE0 = 0u;
  dword_25D4BF0 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25D4BD0, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25D4BD0, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25D4BD0, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25D4BD0, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25D44AF = 8;
  strcpy((char *)&qword_25D4498, "any_mode");
  byte_25D44C7 = 7;
  strcpy((char *)&dword_25D44B0, "cycling");
  byte_25D44DF = 7;
  strcpy((char *)&dword_25D44C8, "driving");
  byte_25D44F7 = 7;
  strcpy((char *)&dword_25D44E0, "walking");
  qword_25D4500 = 0;
  qword_25D4508 = 0;
  qword_25D44F8 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25D44F8 = (uint64_t)v0;
  qword_25D4500 = (uint64_t)(v0 + 9);
  qword_25D4508 = (uint64_t)(v0 + 9);
  qword_25D4510 = 0;
  qword_25D4518 = 0;
  unk_25D4520 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25D4518 = (uint64_t)(v1 + 9);
  unk_25D4520 = v1 + 9;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25D4510 = (uint64_t)v1;
  byte_25D453F = 6;
  strcpy((char *)&dword_25D4528, "{Mode}");
  byte_25D4557 = 11;
  strcpy((char *)&qword_25D4540, "{Direction}");
  byte_25D456F = 6;
  strcpy((char *)&dword_25D4558, "{Line}");
  byte_25D4587 = 12;
  strcpy((char *)&qword_25D4570, "{LineNumber}");
  strcpy(&byte_25D459F, "\n{Headsign1}");
  strcpy((char *)&qword_25D4588, "{Headsign}");
  byte_25D45B7 = 11;
  byte_25D45CF = 11;
  strcpy((char *)&qword_25D45B8, "{Headsign2}");
  byte_25D45E7 = 11;
  strcpy((char *)&qword_25D45D0, "{Headsign3}");
  byte_25D45FF = 11;
  strcpy((char *)&qword_25D45E8, "{Headsign4}");
  byte_25D4617 = 11;
  strcpy((char *)&qword_25D4600, "{Headsign5}");
  byte_25D462F = 6;
  strcpy((char *)&dword_25D4618, "{Stop}");
  byte_25D4647 = 14;
  strcpy((char *)&qword_25D4630, "{PreviousStop}");
  byte_25D465F = 8;
  strcpy((char *)&qword_25D4648, "{System}");
  byte_25D4677 = 15;
  strcpy((char *)&qword_25D4660, "{VehicleNumber}");
  byte_25D468F = 17;
  strcpy((char *)&xmmword_25D4678, "{AccessPointExit}");
  strcpy(&byte_25D46A7, "\n{nextBoardStation}");
  strcpy((char *)&qword_25D4690, "{Platform}");
  byte_25D46BF = 18;
  qword_25D46C0 = 0;
  unk_25D46C8 = 0;
  qword_25D46D0 = 0;
  byte_25D46EF = 1;
  LOWORD(xmmword_25D46D8) = 32;
  qword_25D46F0 = (uint64_t)operator new(0x20uLL);
  unk_25D46F8 = xmmword_20B8890;
  strcpy((char *)qword_25D46F0, "LeaveStop_Loc_Comma_Separator");
  byte_25D471F = 5;
  LODWORD(xmmword_25D4708) = -1028144608;
  WORD2(xmmword_25D4708) = 160;
  byte_25D4737 = 2;
  word_25D4720 = -24382;
  byte_25D4722 = 0;
  byte_25D474F = 4;
  dword_25D4738 = 548913696;
  byte_25D473C = 0;
  byte_25D4767 = 15;
  strcpy((char *)&qword_25D4750 + 7, "\xB7 {/s:s}");
  strcpy((char *)&qword_25D4750, "{s:s} ·");
  byte_25D477F = 6;
  strcpy((char *)&dword_25D4768, "NoType");
  byte_25D4797 = 14;
  strcpy((char *)&qword_25D4780, "{WalkDistance}");
  strcpy(&byte_25D47AF, "\n{OneMinute}");
  strcpy((char *)&qword_25D4798, "{WalkTime}");
  byte_25D47C7 = 11;
  byte_25D47DF = 14;
  strcpy((char *)&qword_25D47C8, "{StepDuration}");
  byte_25D47F7 = 15;
  strcpy((char *)&qword_25D47E0, "{TripFrequency}");
  byte_25D480F = 11;
  strcpy((char *)&qword_25D47F8, "{BoardTime}");
  byte_25D4827 = 12;
  strcpy((char *)&qword_25D4810, "{AlightTime}");
  byte_25D483F = 21;
  strcpy((char *)&xmmword_25D4828, "{FutureTimestampList}");
  byte_25D4857 = 15;
  strcpy((char *)&qword_25D4840, "{DepartureTime}");
  byte_25D486F = 13;
  strcpy((char *)&qword_25D4858, "{ArrivalTime}");
  byte_25D4887 = 19;
  strcpy((char *)&xmmword_25D4870, "{TotalWalkDistance}");
  byte_25D489F = 14;
  strcpy((char *)&qword_25D4888, "{TripDuration}");
  byte_25D48B7 = 11;
  strcpy((char *)&qword_25D48A0, "{DayOfWeek}");
  byte_25D48CF = 6;
  strcpy((char *)&dword_25D48B8, "{Date}");
  byte_25D48E7 = 16;
  strcpy((char *)&xmmword_25D48D0, "{OutTheDoorTime}");
  __n128 result = (char *)operator new(0x20uLL);
  qword_25D48E8 = (uint64_t)result;
  unk_25D48F0 = xmmword_20B91A0;
  strcpy(result, "{FirstVehicleDepartureTime}");
  byte_25D4917 = 18;
  strcpy(byte_25D4900, "{RouteArrivalTime}");
  strcpy(&byte_25D492F, "\n{IC_Artwork}");
  strcpy((char *)&qword_25D4918, "{BaseFare}");
  byte_25D4947 = 12;
  byte_25D495F = 11;
  strcpy((char *)&qword_25D4948, "{RT_Symbol}");
  byte_25D4977 = 12;
  strcpy((char *)&qword_25D4960, "{TotalPrice}");
  byte_25D498F = 13;
  strcpy((char *)&qword_25D4978, "{CheckInTime}");
  byte_25D49A7 = 19;
  strcpy((char *)&xmmword_25D4990, "{LiveDepartureTime}");
  strcpy(&byte_25D49BF, "\n{LegDuration}");
  strcpy((char *)&qword_25D49A8, "{TimeList}");
  byte_25D49D7 = 13;
  byte_25D49EF = 15;
  strcpy((char *)&qword_25D49D8, "{CountdownList}");
  byte_25D4A07 = 3;
  dword_25D49F0 = 8217723;
  strcpy(&byte_25D4A1F, "\t{AccessPointArt}");
  strcpy((char *)&qword_25D4A08, "{LineArt}");
  byte_25D4A37 = 16;
  byte_25D4A4F = 11;
  strcpy((char *)&qword_25D4A38, "{SystemArt}");
  strcpy(&byte_25D4A67, "\n{ServiceBeginTime}");
  strcpy((char *)&qword_25D4A50, "{CardName}");
  byte_25D4A7F = 18;
  byte_25D4A97 = 16;
  strcpy((char *)&xmmword_25D4A80, "{ServiceEndTime}");
  byte_25D4AAF = 6;
  strcpy((char *)&dword_25D4A98, "OnTime");
  byte_25D4AC7 = 6;
  strcpy((char *)&dword_25D4AB0, "Delays");
  byte_25D4ADF = 1;
  word_25D4AC8 = 115;
  byte_25D4AF7 = 2;
  strcpy((char *)&word_25D4AE0, "cs");
  byte_25D4B0F = 1;
  word_25D4AF8 = 112;
  byte_25D4B27 = 5;
  strcpy((char *)&dword_25D4B10, "_Line");
  byte_25D4B3F = 7;
  strcpy((char *)&dword_25D4B28, "_System");
  strcpy(&byte_25D4B57, "\n_VehicleNumber");
  strcpy((char *)&qword_25D4B40, "_Direction");
  byte_25D4B6F = 14;
  byte_25D4B87 = 12;
  strcpy((char *)&qword_25D4B70, "_To_Headsign");
  byte_25D4B9F = 16;
  strcpy((char *)&xmmword_25D4B88, "_Toward_Headsign");
  strcpy(&byte_25D4BB7, "\t_LineNumber");
  strcpy((char *)&qword_25D4BA0, "_Headsign");
  byte_25D4BCF = 11;
  return result;
}

void sub_930204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25D4BE0) {
    sub_20AC770((void **)qword_25D4BE0);
  }
  uint64_t v37 = (void *)xmmword_25D4BD0;
  *(void *)&xmmword_25D4BD0 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

double sub_9302A4@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(_DWORD *)(a2[2] + 1436) > 1u)
  {
    switch(*(_DWORD *)sub_9E6018(a1))
    {
      case 1:
        sub_935450(a1, a2, v7);
        break;
      case 2:
        sub_935078(a1, a2, (uint64_t *)v7);
        break;
      case 3:
        sub_935860(a1, a2, (uint64_t *)v7);
        break;
      case 4:
        sub_935A68(a1, a2, v7);
        break;
      case 5:
        sub_935264(a1, a2, (uint64_t *)v7);
        break;
      case 7:
        sub_935658(a1, a2, (uint64_t *)v7);
        break;
      case 8:
        sub_935C70(a1, a2, (uint64_t *)v7);
        break;
      default:
        goto LABEL_2;
    }
    double result = v7[0];
    *(_OWORD *)a3 = *(_OWORD *)v7;
  }
  else
  {
LABEL_2:
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
  return result;
}

uint64_t sub_930424(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v5 = (void *)sub_941464(a1, a2, a3);
  void *v5 = off_243B8E0;
  sub_9D6CD4(v5 + 71, a1 + 544, *a3, a3[2]);
  if (*(_DWORD *)(a1 + 128) == 3) {
    *(_DWORD *)(a1 + 128) = 2;
  }
  uint64_t v6 = *(void *)(a1 + 72);
  if (!*(unsigned char *)(v6 + 792))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  char v7 = (_DWORD *)(v6 + 312);
  int v8 = *(_DWORD *)(v6 + 344);
  if (v8 == 1)
  {
    if (*(_DWORD *)(v6 + 316) == -1 && *v7 == -1 && *(void *)(v6 + 320) == *(void *)(v6 + 328)) {
      return a1;
    }
  }
  else if (v8 || *v7 == -1)
  {
    return a1;
  }
  unint64_t v10 = *(void *)(a1 + 472);
  if (v10 >= *(void *)(a1 + 480)) {
    sub_5F9180((void *)(a1 + 464), (long long *)&qword_25D4E20);
  }
  sub_5F2560(*(void **)(a1 + 472));
  *(void *)(a1 + 472) = v10 + 144;
  *(void *)(a1 + 472) = v10 + 144;
  return a1;
}

void sub_930584(_Unwind_Exception *a1)
{
  v1[59] = v2;
  sub_9305B0(v1);
  _Unwind_Resume(a1);
}

void sub_93059C(_Unwind_Exception *a1)
{
  sub_9305B0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_9305B0(void *a1)
{
  *a1 = off_243B2A0;
  uint64_t v2 = (void *)a1[64];
  if (v2)
  {
    a1[65] = v2;
    operator delete(v2);
  }

  return sub_921ED8((uint64_t)a1);
}

void sub_930610(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 72);
  if (!*(unsigned char *)(v3 + 792))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  if (!*(unsigned char *)(*(void *)(a1 + 112) + 41) || *(unsigned char *)(v3 + 424) != 1)
  {
    unint64_t v6 = *(void *)(v3 + 56);
    char v8 = 1;
LABEL_10:
    sub_9DD8F0((char *)a1, v3, v6, (uint64_t)v29);
    goto LABEL_11;
  }
  int v5 = *(void **)(a1 + 80);
  unint64_t v6 = *(void *)(v3 + 56);
  if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v5[1] - *v5) >> 3) <= v6) {
    sub_66748();
  }
  int v7 = *(unsigned __int8 *)(*v5 + 168 * v6 + 162);
  if (v7 == 2)
  {
    char v8 = 0;
    v29[0] = (char *)operator new(0x20uLL);
    *(_OWORD *)&v29[1] = xmmword_20B5EB0;
    strcpy(v29[0], "Notice_Platform_Numeric_RT");
  }
  else
  {
    if (v7 != 1)
    {
      char v8 = 0;
      if (!*(unsigned char *)(*v5 + 168 * v6 + 162))
      {
        HIBYTE(v29[2]) = 18;
        strcpy((char *)v29, "Notice_Platform_RT");
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    char v8 = 0;
    v29[0] = (char *)operator new(0x19uLL);
    *(_OWORD *)&v29[1] = xmmword_20B9250;
    strcpy(v29[0], "Notice_Platform_Name_RT");
  }
LABEL_11:
  unint64_t v9 = sub_8D7730(*(void *)(a1 + 96), (uint64_t)v29);
  if (*((char *)v9 + 23) < 0)
  {
    sub_4200(&__p, (void *)*v9, v9[1]);
  }
  else
  {
    long long v10 = *(_OWORD *)v9;
    __p.__r_.__value_.__r.__words[2] = v9[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
  }
  sub_5F3B74(a2, (__int16 *)(*(void *)(a1 + 88) + 1177));
  int v11 = (_DWORD *)(v3 + 312);
  int v12 = *(_DWORD *)(v3 + 344);
  if (v12 == 1)
  {
    if (*(_DWORD *)(v3 + 316) == -1 && *v11 == -1 && *(void *)(v3 + 320) == *(void *)(v3 + 328)) {
      goto LABEL_17;
    }
LABEL_39:
    sub_5F40C0(a2, (long long *)&qword_25D4E20);
  }
  if (!v12 && *v11 != -1) {
    goto LABEL_39;
  }
LABEL_17:
  int64_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (byte_25D4E37 >= 0) {
    int v15 = &qword_25D4E20;
  }
  else {
    int v15 = (uint64_t *)qword_25D4E20;
  }
  if (byte_25D4E37 >= 0) {
    int64_t v16 = byte_25D4E37;
  }
  else {
    int64_t v16 = *(void *)&word_25D4E28;
  }
  if (v16)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int64_t size = __p.__r_.__value_.__l.__size_;
    }
    if (size >= v16)
    {
      char v17 = (char *)p_p + size;
      int v18 = *(char *)v15;
      unint64_t v19 = p_p;
      do
      {
        int64_t v20 = size - v16;
        if (v20 == -1) {
          break;
        }
        uint64_t v21 = (char *)memchr(v19, v18, v20 + 1);
        if (!v21) {
          break;
        }
        uint64_t v22 = v21;
        if (!memcmp(v21, v15, v16))
        {
          if (v22 != v17)
          {
            std::string::size_type v23 = v22 - (char *)p_p;
            if (v22 - (char *)p_p != -1) {
              goto LABEL_41;
            }
          }
          break;
        }
        unint64_t v19 = (std::string *)(v22 + 1);
        int64_t size = v17 - (v22 + 1);
      }
      while (size >= v16);
    }
  }
  else
  {
    std::string::size_type v23 = 0;
LABEL_41:
    int v24 = *(char *)(v3 + 271);
    if (v24 >= 0) {
      uint64_t v25 = (const std::string::value_type *)(v3 + 248);
    }
    else {
      uint64_t v25 = *(const std::string::value_type **)(v3 + 248);
    }
    if (v24 >= 0) {
      std::string::size_type v26 = *(unsigned __int8 *)(v3 + 271);
    }
    else {
      std::string::size_type v26 = *(void *)(v3 + 256);
    }
    std::string::replace(&__p, v23, v16, v25, v26);
  }
  sub_5F41E8(a2, (uint64_t)&__p);
  if ((v8 & 1) == 0) {
    sub_9309F4(a2);
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v29[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_54:
    operator delete(v29[0]);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29[2]) < 0) {
    goto LABEL_54;
  }
}

void sub_930998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_9309F4(uint64_t a1)
{
  sub_52500C(1u, (uint64_t)v2);
  sub_5F40C0(a1, (long long *)&qword_25D50D8);
}

void sub_930AE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D9814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_930AFC(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a3 == 2)
  {
    sub_5F3B74(a4, (__int16 *)(*(void *)(a1 + 88) + 1177));
    if (sub_9DD8A8(a1, *(void *)(a1 + 72)))
    {
      sub_930610(a1, (uint64_t)__p);
      sub_4D90B4(a4, (uint64_t)__p);
      sub_4D4B58((uint64_t)__p);
    }
    memset(__p, 0, 24);
    sub_5F7A30(a4, (const std::string *)&dword_25D4EC8, __p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p[0].__r_.__value_.__l.__data_);
      if (*(_DWORD *)(a1 + 248) == 5) {
        goto LABEL_14;
      }
    }
    else if (*(_DWORD *)(a1 + 248) == 5)
    {
LABEL_14:
      sub_9DDF68(a1, a4, v6, v7);
      memset(__p, 0, 24);
      int v8 = *(unsigned __int8 *)(a1 + 161);
      if (v8 == 3)
      {
        unint64_t v9 = "PickupCoordinateDriver";
      }
      else
      {
        if (v8 != 2)
        {
LABEL_19:
          std::string::size_type size = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
          char v11 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
          if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = __p[0].__r_.__value_.__l.__size_;
          }
          if (size)
          {
            int v12 = sub_8D7730(*(void *)(a1 + 96), (uint64_t)__p);
            sub_5F41E8(a4, (uint64_t)v12);
            char v11 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
          }
          if (v11 < 0) {
            operator delete(__p[0].__r_.__value_.__l.__data_);
          }
          return;
        }
        unint64_t v9 = "PickupContactAgency";
      }
      std::string::assign(__p, v9);
      goto LABEL_19;
    }
    sub_932CB0((char *)a1, a4, 1);
    goto LABEL_14;
  }
  if (a2 == 2) {
    a2 = 1;
  }

  sub_941C6C((uint64_t *)a1, a2, a3, a4);
}

void sub_930C90(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_930CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_4D4B58(v14);
    _Unwind_Resume(a1);
  }
  sub_4D4B58(v14);
  _Unwind_Resume(a1);
}

void sub_930CE4(uint64_t *a1, uint64_t a2)
{
  switch(*(_DWORD *)(a1[9] + 1008))
  {
    case 1:
      sub_930D44(a1, a2);
      break;
    case 2:
      sub_930E28((uint64_t)a1, (void *)a2);
      break;
    case 3:
      sub_930EC4(a1, a2);
      break;
    case 4:
      sub_931238((uint64_t)a1, a2);
    case 5:
      sub_931674((uint64_t)a1, a2);
      break;
    default:
      return;
  }
}

uint64_t sub_930D44(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  if (*(void *)(a2 + 8) == *(void *)a2) {
    sub_66748();
  }
  sub_931868(a1, *(void *)a2, 1, 0, (uint64_t)v6);
  sub_4D90B4(v3 + 32, (uint64_t)v6);
  sub_4D90B4(v3 + 192, (uint64_t)v7);
  *(unsigned char *)(v3 + 352) = v8;
  sub_4D4B58((uint64_t)v7);
  sub_4D4B58((uint64_t)v6);
  sub_931868(a1, v3, 1, 1, (uint64_t)v6);
  sub_4D90B4(a2 + 872, (uint64_t)v6);
  sub_4D90B4(a2 + 1032, (uint64_t)v7);
  *(unsigned char *)(a2 + 1192) = v8;
  sub_4D4B58((uint64_t)v7);
  return sub_4D4B58((uint64_t)v6);
}

uint64_t sub_930E28(uint64_t a1, void *a2)
{
  sub_932234(a1, 0, v5);
  if (a2[1] == *a2) {
    sub_66748();
  }
  sub_4D90B4(*a2 + 32, (uint64_t)v5);
  sub_4D4B58((uint64_t)v5);
  sub_932234(a1, 1, v5);
  sub_4D90B4((uint64_t)(a2 + 109), (uint64_t)v5);
  return sub_4D4B58((uint64_t)v5);
}

void sub_930EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_930EC4(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v6 = v4 - *(void *)a2;
  if (v4 != *(void *)a2)
  {
    if (!*(void *)(a1[14] + 16) && v6 == 696)
    {
      v21[0] = *(_OWORD *)v5;
      *(_OWORD *)((char *)v21 + 12) = *(_OWORD *)(v5 + 12);
      int32x4_t v7 = (char *)operator new(0x1CuLL);
      std::string::size_type v23 = v7 + 28;
      int v24 = v7 + 28;
      *(_OWORD *)int32x4_t v7 = v21[0];
      *(_OWORD *)(v7 + 12) = *(_OWORD *)((char *)v21 + 12);
      uint64_t v22 = (int *)v7;
      sub_9319BC((uint64_t)a1, &v22, (uint64_t)v18);
      sub_4D90B4(v5 + 32, (uint64_t)v18);
      sub_4D4B58((uint64_t)v18);
      operator delete(v7);
      goto LABEL_6;
    }
    sub_931868(a1, *(void *)a2, 1, 0, (uint64_t)v18);
    sub_4D90B4(v5 + 32, (uint64_t)v18);
    sub_4D90B4(v5 + 192, (uint64_t)v19);
    *(unsigned char *)(v5 + 352) = v20;
    sub_4D4B58((uint64_t)v19);
    sub_4D4B58((uint64_t)v18);
    if (v6 == 696) {
      goto LABEL_6;
    }
    uint64_t v9 = 0x66FD0EB66FD0EB67 * (v6 >> 3);
    for (unint64_t i = 1; i != v9; ++i)
    {
      while (1)
      {
        uint64_t v13 = *(void *)a2;
        uint64_t v14 = *(void *)a2 + 696 * i;
        if (i < *(void *)(a1[14] + 16)) {
          break;
        }
        unint64_t v15 = i + 1;
        if (i + 1 != 0x66FD0EB66FD0EB67 * ((*(void *)(a2 + 8) - v13) >> 3)) {
          break;
        }
        v21[0] = *(_OWORD *)v14;
        *(_OWORD *)((char *)v21 + 12) = *(_OWORD *)(v14 + 12);
        int64_t v16 = (char *)operator new(0x1CuLL);
        std::string::size_type v23 = v16 + 28;
        int v24 = v16 + 28;
        *(_OWORD *)int64_t v16 = v21[0];
        *(_OWORD *)(v16 + 12) = *(_OWORD *)((char *)v21 + 12);
        uint64_t v22 = (int *)v16;
        sub_9319BC((uint64_t)a1, &v22, (uint64_t)v18);
        sub_4D90B4(v13 + 696 * i + 32, (uint64_t)v18);
        sub_4D4B58((uint64_t)v18);
        operator delete(v16);
        ++i;
        if (v15 == v9) {
          goto LABEL_6;
        }
      }
      if (*(_DWORD *)(v13 + 696 * i - 692) == 0x7FFFFFFF)
      {
        BOOL v17 = 0;
        if (*(_DWORD *)(v14 + 4) == 0x7FFFFFFF) {
          goto LABEL_18;
        }
      }
      else
      {
        BOOL v17 = *(unsigned __int8 *)(v13 + 696 * i - 688) == 1;
        if (*(_DWORD *)(v14 + 4) == 0x7FFFFFFF)
        {
LABEL_18:
          BOOL v11 = 0;
          goto LABEL_9;
        }
      }
      BOOL v11 = *(unsigned __int8 *)(v14 + 8) == 1;
LABEL_9:
      sub_931868(a1, v14, v17 ^ v11, 0, (uint64_t)v18);
      unint64_t v12 = v13 + 696 * i;
      sub_4D90B4(v12 + 32, (uint64_t)v18);
      sub_4D90B4(v12 + 192, (uint64_t)v19);
      *(unsigned char *)(v12 + 352) = v20;
      sub_4D4B58((uint64_t)v19);
      sub_4D4B58((uint64_t)v18);
    }
  }
LABEL_6:
  sub_931B5C(a1, 0, (uint64_t)v18);
  sub_4D90B4(a2 + 216, (uint64_t)v18);
  sub_4D90B4(a2 + 376, (uint64_t)v19);
  *(unsigned char *)(a2 + 536) = v20;
  sub_4D4B58((uint64_t)v19);
  sub_4D4B58((uint64_t)v18);
  sub_931B5C(a1, 1, (uint64_t)v18);
  sub_4D90B4(a2 + 872, (uint64_t)v18);
  sub_4D90B4(a2 + 1032, (uint64_t)v19);
  *(unsigned char *)(a2 + 1192) = v20;
  sub_4D4B58((uint64_t)v19);
  return sub_4D4B58((uint64_t)v18);
}

void sub_931210(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_931224(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_931238(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(_OWORD **)a2;
  if (*(void *)(a2 + 8) != *(void *)a2)
  {
    v6[0] = *v3;
    *(_OWORD *)((char *)v6 + 12) = *(_OWORD *)((char *)v3 + 12);
    uint64_t v4 = operator new(0x1CuLL);
    __p[1] = (char *)v4 + 28;
    __p[2] = (char *)v4 + 28;
    _OWORD *v4 = v6[0];
    *(_OWORD *)((char *)v4 + 12) = *(_OWORD *)((char *)v6 + 12);
    __p[0] = v4;
    sub_5F3B34((uint64_t)v5);
    sub_931E74((uint64_t *)a1, (uint64_t *)__p, 1, (uint64_t)v5, 0, (uint64_t)v8);
  }
  sub_932234(a1, 0, v5);
  sub_931E74((uint64_t *)a1, *(uint64_t **)(a1 + 560), 1, (uint64_t)v5, 0, (uint64_t)v8);
}

void sub_9315FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  if (__p)
  {
    a34 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_931674(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 72);
  if (!*(unsigned char *)(v2 + 792))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  if (*(_DWORD *)(v2 + 516) != 0x7FFFFFFF && *(_DWORD *)(v2 + 520) != 0x7FFFFFFF)
  {
    uint64_t v5 = *(void *)(a1 + 96);
    char v10 = 17;
    strcpy(__p, "ServiceHoursTitle");
    uint64_t v6 = sub_8D7730(v5, (uint64_t)__p);
    if (*((char *)v6 + 23) < 0)
    {
      sub_4200(&__dst, (void *)*v6, v6[1]);
    }
    else
    {
      long long v7 = *(_OWORD *)v6;
      uint64_t v15 = v6[2];
      long long __dst = v7;
    }
    if (v10 < 0) {
      operator delete(*(void **)__p);
    }
    v13[0] = a1;
    v13[1] = (uint64_t)&__dst;
    sub_9324B4((uint64_t)__p, v13, 0);
    sub_4D90B4(a2 + 216, (uint64_t)__p);
    sub_4D90B4(a2 + 376, (uint64_t)v11);
    *(unsigned char *)(a2 + 536) = v12;
    sub_4D4B58((uint64_t)v11);
    sub_4D4B58((uint64_t)__p);
    sub_9324B4((uint64_t)__p, v13, 1);
    sub_4D90B4(a2 + 872, (uint64_t)__p);
    sub_4D90B4(a2 + 1032, (uint64_t)v11);
    *(unsigned char *)(a2 + 1192) = v12;
    sub_4D4B58((uint64_t)v11);
    sub_4D4B58((uint64_t)__p);
    if (SHIBYTE(v15) < 0) {
      operator delete((void *)__dst);
    }
  }
}

void sub_931834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 - 41) < 0) {
    operator delete(*(void **)(v14 - 64));
  }
  _Unwind_Resume(exception_object);
}

void sub_931868(uint64_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  sub_5F3B34(a5);
  sub_5F3B34(a5 + 160);
  *(unsigned char *)(a5 + 320) = 0;
  sub_932650(a1, (int *)a2, a3, 1, a4, (uint64_t)v10);
  sub_4D90B4(a5, (uint64_t)v10);
  sub_4D4B58((uint64_t)v10);
  if (*(unsigned char *)(a2 + 8)
    && *(unsigned __int8 *)(a2 + 9) - 1 >= 2
    && (int)fabs((double)(10 * (*(_DWORD *)a2 - *(_DWORD *)(a2 + 4)))) <= 599)
  {
    sub_932938((uint64_t)a1, a2, 0, a5);
  }
  else
  {
    sub_5F3B74((uint64_t)v10, (__int16 *)(a1[11] + 1177));
    sub_4D90B4(a5 + 160, (uint64_t)v10);
    sub_4D4B58((uint64_t)v10);
    sub_932938((uint64_t)a1, a2, 0, a5 + 160);
  }
}

void sub_931984(_Unwind_Exception *a1)
{
  sub_4D4B58(v2);
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_9319A8(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_9319BC(uint64_t a1@<X0>, int **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 96);
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "Next at {TimeList}");
  long long v7 = sub_8D7730(v6, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  sub_5F3D7C(a3, (uint64_t)v7, (__int16 *)(*(void *)(a1 + 88) + 1177));
  uint64_t v9 = *a2;
  char v8 = a2[1];
  memset(__p, 0, sizeof(__p));
  if (v8 != v9)
  {
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v8 - v9)) >> 62) {
      sub_2E00();
    }
    char v10 = (char *)operator new(0xB6DB6DB6DB6DB6DCLL * (v8 - v9));
    __p[0] = v10;
    __p[1] = v10;
    __p[2] = &v10[0xB6DB6DB6DB6DB6DCLL * (v8 - v9)];
    do
    {
      int v11 = v9[1];
      if (v11 == 0x7FFFFFFF) {
        int v11 = *v9;
      }
      int v14 = v11;
      char v10 = sub_935E5C(__p, v10, &v14) + 4;
      v9 += 7;
    }
    while (v9 != v8);
  }
  uint64_t v12 = sub_923BE0(a1);
  sub_5F6000(a3, (long long *)&qword_25D5138, __p, v12, 0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_931B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_931B5C(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1[9];
  long long v7 = *(char **)(v6 + 2224);
  char v8 = *(char **)(v6 + 2232);
  int v24 = 0;
  uint64_t v25 = 0;
  std::string::size_type v23 = 0;
  if (v8 != v7)
  {
    if ((unint64_t)(0x66FD0EB66FD0EB67 * ((v8 - v7) >> 3)) > 0x924924924924924) {
      sub_2E00();
    }
    uint64_t v9 = (char *)operator new(0x43AD9BF43AD9BF44 * ((v8 - v7) >> 3));
    std::string::size_type v23 = v9;
    int v24 = v9;
    uint64_t v25 = &v9[0x43AD9BF43AD9BF44 * ((v8 - v7) >> 3)];
    do
    {
      long long v10 = *(_OWORD *)v7;
      *(_OWORD *)&__p[12] = *(_OWORD *)(v7 + 12);
      *(_OWORD *)std::string __p = v10;
      uint64_t v9 = sub_9361CC(&v23, (uint64_t)v9, (long long *)__p) + 28;
      v7 += 696;
    }
    while (v7 != v8);
  }
  sub_5F3B34(a3);
  sub_5F3B34(a3 + 160);
  *(unsigned char *)(a3 + 320) = 0;
  int v11 = v23;
  sub_932650(a1, (int *)v23, 1, 1, a2, (uint64_t)__p);
  sub_4D90B4(a3, (uint64_t)__p);
  sub_4D4B58((uint64_t)__p);
  uint64_t v12 = a1[12];
  *(void *)std::string __p = operator new(0x30uLL);
  *(_OWORD *)&__p[8] = xmmword_20B9A40;
  strcpy(*(char **)__p, "Now {LiveDepartureTime} {RT_Symbol} (NBSP)");
  int v13 = sub_8D8694(v12, (uint64_t)__p, 0);
  int v14 = v13;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (!v14) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (v13) {
LABEL_9:
  }
    sub_932938((uint64_t)a1, (uint64_t)v11, 1, a3);
LABEL_10:
  uint64_t v15 = v23;
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v24 - v23) >> 2)) >= 2)
  {
    int64_t v16 = v23 + 28;
    unint64_t v19 = 0;
    char v20 = 0;
    uint64_t v21 = 0;
    int64_t v17 = v24 - (v23 + 28);
    if (v24 == v23 + 28)
    {
      int v18 = 0;
    }
    else
    {
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v17 >> 2)) > 0x924924924924924) {
        sub_2E00();
      }
      int v18 = (int *)operator new(v17);
      unint64_t v19 = v18;
      uint64_t v21 = &v18[v17 >> 2];
      memmove(v18, v16, v17);
      char v20 = v21;
    }
    sub_9319BC((uint64_t)a1, &v19, (uint64_t)__p);
    sub_4D90B4(a3 + 160, (uint64_t)__p);
    sub_4D4B58((uint64_t)__p);
    if (v18) {
      operator delete(v18);
    }
    uint64_t v15 = v23;
  }
  if (v15)
  {
    int v24 = v15;
    operator delete(v15);
  }
}

void sub_931DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (v20) {
    operator delete(v20);
  }
  sub_4D4B58(v19);
  sub_4D4B58(v18);
  std::string::size_type v23 = *(void **)(v21 - 88);
  if (v23)
  {
    *(void *)(v21 - 80) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void sub_931E74(uint64_t *a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  sub_5F3B34(a6);
  sub_5F3B34(a6 + 160);
  *(unsigned char *)(a6 + 320) = 0;
  sub_5F3BA0((uint64_t)&v20, (__int16 *)(a1[11] + 1177), &word_25D4E68);
  sub_4D90B4(a6, (uint64_t)&v20);
  sub_4D4B58((uint64_t)&v20);
  if (a5)
  {
    sub_9D6CE0((uint64_t)(a1 + 71), a1[9], 1, (uint64_t)&v20);
    if (v21 != v22)
    {
      sub_5F41E8(a6, (uint64_t)&qword_25D5198);
      sub_5F40C0(a6, (long long *)&qword_25D5198);
    }
    sub_934F58((uint64_t)&v20);
  }
  memset(&v20, 0, sizeof(v20));
  memset(&v19, 0, sizeof(v19));
  memset(__p, 0, sizeof(__p));
  int v12 = sub_97CA20(a2);
  unint64_t v13 = 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 2);
  if ((a3 ^ 1 | v12))
  {
    if (a3)
    {
      std::string::assign(&v20, "Departs in {CountdownList}");
      std::string::assign(&v19, "Departs now");
      if (v13 <= 1) {
        goto LABEL_13;
      }
      int v14 = "Departs now, {CountdownList}";
      uint64_t v15 = (std::string *)__p;
    }
    else
    {
      std::string::assign(&v20, "{CountdownList}");
      int v14 = "Now";
      uint64_t v15 = &v19;
    }
  }
  else
  {
    std::string::assign(&v20, "Scheduled in {CountdownList}");
    std::string::assign(&v19, "Scheduled now");
    if (v13 <= 1) {
      goto LABEL_13;
    }
    int v14 = "Scheduled now, {CountdownList}";
    uint64_t v15 = (std::string *)__p;
  }
  std::string::assign(v15, v14);
LABEL_13:
  uint64_t v16 = a1[12];
  int64_t v17 = (long long *)sub_923BE0((uint64_t)a1);
  sub_98E460(a2, (uint64_t)&v20, (uint64_t)__p, (uint64_t)&v19, v16, a6, 0, a4, v17, (uint64_t)&word_25D5270);
}

void sub_932174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_4D4B58(v30);
  sub_4D4B58(v29);
  _Unwind_Resume(a1);
}

void sub_9321BC(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_9321D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0)
  {
    operator delete(a12);
    if ((a23 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
LABEL_3:
    if ((a29 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  operator delete(a18);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_5:
    sub_4D4B58(v30);
    sub_4D4B58(v29);
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(a24);
  goto LABEL_5;
}

void sub_932234(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  sub_98C68C(*(unsigned __int16 *)(a1 + 132), (uint64_t)&v17);
  std::operator+<char>();
  uint64_t v6 = std::string::append(&v19, " runs every {TripFrequency}");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  std::string::size_type v16 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  char v8 = sub_8D7730(*(void *)(a1 + 96), (uint64_t)__p);
  sub_5F3BA0((uint64_t)a3, (__int16 *)(*(void *)(a1 + 88) + 1177), &word_25D4E68);
  if (a2)
  {
    sub_9D6CE0(a1 + 568, *(void *)(a1 + 72), 1, (uint64_t)&v19);
    if (v20 != v21)
    {
      sub_5F41E8((uint64_t)a3, (uint64_t)&qword_25D5198);
      sub_5F40C0((uint64_t)a3, (long long *)&qword_25D5198);
    }
    sub_934F58((uint64_t)&v19);
  }
  sub_5F41E8((uint64_t)a3, (uint64_t)v8);
  uint64_t v9 = *(void *)(a1 + 72);
  if (!*(unsigned char *)(v9 + 792) || (uint64_t v10 = nullsub_1(v9 + 144), v11 = *(void *)(a1 + 72), !*(unsigned char *)(v11 + 792)))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  int v12 = (int *)v10;
  unint64_t v13 = (int *)sub_BBB4(v11 + 144);
  sub_5F3EF4(a3, (uint64_t)&qword_25D4F70, v12, v13);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if ((v18 & 0x80000000) == 0) {
      return;
    }
LABEL_13:
    operator delete(v17);
    return;
  }
  operator delete(__p[0]);
  if (v18 < 0) {
    goto LABEL_13;
  }
}

void sub_932448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,_Unwind_Exception *exception_object,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  sub_934F58((uint64_t)&exception_object);
  sub_4D4B58(v27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

char *sub_9324B4(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = sub_5F3B34(a1) + 160;
  sub_5F3B34(v7);
  *(unsigned char *)(a1 + 320) = 0;
  sub_5F3BA0((uint64_t)v9, (__int16 *)(*(void *)(v6 + 88) + 1177), &word_25D4E68);
  sub_4D90B4(a1, (uint64_t)v9);
  sub_4D4B58((uint64_t)v9);
  if (a3)
  {
    sub_9D6CE0(v6 + 568, *(void *)(v6 + 72), 1, (uint64_t)v9);
    if (v10 != v11)
    {
      sub_5F41E8(a1, (uint64_t)&qword_25D5198);
      sub_5F40C0(a1, (long long *)&qword_25D5198);
    }
    sub_934F58((uint64_t)v9);
  }
  sub_5F41E8(a1, a2[1]);
  sub_5F3B74((uint64_t)v9, (__int16 *)(*(void *)(v6 + 88) + 1177));
  sub_4D90B4(v7, (uint64_t)v9);
  sub_4D4B58((uint64_t)v9);
  return sub_932CB0((char *)v6, v7, 0);
}

void sub_9325F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_934F58((uint64_t)va);
  sub_4D4B58(v3);
  sub_4D4B58(v2);
  _Unwind_Resume(a1);
}

void sub_932618(_Unwind_Exception *a1)
{
  sub_4D4B58(v2);
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_932650(uint64_t *a1@<X0>, int *a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  memset(&v22, 0, sizeof(v22));
  if (!a3)
  {
    std::string::operator=(&v22, (const std::string *)&qword_25D4FD0);
    goto LABEL_19;
  }
  if (*((unsigned char *)a2 + 8) == 1) {
    uint64_t v11 = "DepartureBar_Board_LowFreq";
  }
  else {
    uint64_t v11 = "Scheduled at {DepartureTime}";
  }
  if (a2[1] == 0x7FFFFFFF) {
    int v12 = "Scheduled at {DepartureTime}";
  }
  else {
    int v12 = v11;
  }
  uint64_t v13 = a1[12];
  size_t v14 = strlen(v12);
  if (v14 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  uint64_t v15 = (void *)v14;
  if (v14 >= 0x17)
  {
    uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v17 = v14 | 7;
    }
    uint64_t v18 = v17 + 1;
    std::string::size_type v16 = (void **)operator new(v17 + 1);
    __dst[1] = v15;
    unint64_t v24 = v18 | 0x8000000000000000;
    __dst[0] = v16;
    goto LABEL_16;
  }
  HIBYTE(v24) = v14;
  std::string::size_type v16 = __dst;
  if (v14) {
LABEL_16:
  }
    memcpy(v16, v12, (size_t)v15);
  *((unsigned char *)v15 + (void)v16) = 0;
  std::string v19 = (const std::string *)sub_8D7730(v13, (uint64_t)__dst);
  std::string::operator=(&v22, v19);
  if (SHIBYTE(v24) < 0) {
    operator delete(__dst[0]);
  }
LABEL_19:
  uint64_t v20 = sub_923BE0((uint64_t)a1);
  sub_5F3BA0(a6, (__int16 *)(a1[11] + 1177), &word_25D4E68);
  if (a5)
  {
    sub_9D6CE0((uint64_t)(a1 + 71), a1[9], 1, (uint64_t)__dst);
    if (v25 != v26)
    {
      sub_5F41E8(a6, (uint64_t)&qword_25D5198);
      sub_5F40C0(a6, (long long *)&qword_25D5198);
    }
    sub_934F58((uint64_t)__dst);
  }
  sub_5F41E8(a6, (uint64_t)&v22);
  if (a4)
  {
    int v21 = *a2;
  }
  else
  {
    int v21 = a2[1];
    if (v21 == 0x7FFFFFFF) {
      int v21 = *a2;
    }
  }
  LODWORD(__dst[0]) = v21;
  sub_5F5F70(a6, (long long *)&qword_25D4FD0, __dst, v20, 0);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
}

void sub_9328A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if ((a15 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_932938(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (!*(unsigned char *)(a2 + 8))
  {
    unsigned int v12 = 0;
LABEL_9:
    int v11 = 0;
    int v10 = 0;
    memset(&v23, 0, sizeof(v23));
    goto LABEL_10;
  }
  int v6 = *(unsigned __int8 *)(a2 + 9);
  if (v6 == 1)
  {
    unsigned int v12 = 5;
    goto LABEL_9;
  }
  if (v6 == 2)
  {
    memset(&v23, 0, sizeof(v23));
    uint64_t v8 = *(void *)(a1 + 96);
    HIBYTE(v25) = 9;
    strcpy((char *)&__p, "Cancelled");
    uint64_t v9 = (const std::string *)sub_8D7730(v8, (uint64_t)&__p);
    std::string::operator=(&v23, v9);
    if (SHIBYTE(v25) < 0) {
      operator delete((void *)__p);
    }
    int v10 = 0;
    int v11 = 2;
    unsigned int v12 = 4;
  }
  else
  {
    int v14 = *(_DWORD *)(a2 + 4);
    if ((int)fabs((double)(10 * (*(_DWORD *)a2 - v14))) < 600)
    {
      memset(&v23, 0, sizeof(v23));
      std::string::assign(&v23, "{RT_Symbol}");
      unsigned int v12 = 1;
      int v11 = 1;
      int v10 = 1;
    }
    else
    {
      if (*(_DWORD *)a2 >= v14) {
        unsigned int v12 = 2;
      }
      else {
        unsigned int v12 = 3;
      }
      memset(&v23, 0, sizeof(v23));
      uint64_t v16 = *(void *)(a1 + 96);
      if (a3) {
        size_t v17 = 42;
      }
      else {
        size_t v17 = 35;
      }
      uint64_t v18 = operator new((v17 | 7) + 1);
      std::string v19 = v18;
      *((void *)&__p + 1) = v17;
      unint64_t v25 = ((v17 | 7) + 1) | 0x8000000000000000;
      if (a3) {
        uint64_t v20 = "Now {LiveDepartureTime} {RT_Symbol} (NBSP)";
      }
      else {
        uint64_t v20 = "Now {LiveDepartureTime} {RT_Symbol}";
      }
      *(void *)&long long __p = v18;
      memcpy(v18, v20, v17);
      v19[v17] = 0;
      int v21 = (const std::string *)sub_8D7730(v16, (uint64_t)&__p);
      std::string::operator=(&v23, v21);
      if (SHIBYTE(v25) < 0) {
        operator delete((void *)__p);
      }
      LODWORD(__p) = *(_DWORD *)(a2 + 4);
      uint64_t v22 = sub_923BE0(a1);
      sub_5F5F70(a4, &xmmword_25D5120, &__p, v22, 0);
      int v10 = 1;
      int v11 = 2;
    }
  }
LABEL_10:
  std::string::size_type size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v23.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    sub_5F4680(a4, (uint64_t)&v23, (uint64_t)&word_25D5258, v11);
    sub_98ED08(a4, v12);
  }
  if (v10)
  {
    sub_52500C(1u, (uint64_t)&__p);
    sub_5F40C0(a4, (long long *)&qword_25D50D8);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_932C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_932CB0(char *result, uint64_t a2, int a3)
{
  uint64_t v3 = *((void *)result + 9);
  if (!*(unsigned char *)(v3 + 792))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  if (*(_DWORD *)(v3 + 516) != 0x7FFFFFFF && *(_DWORD *)(v3 + 520) != 0x7FFFFFFF)
  {
    uint64_t v5 = (uint64_t)result;
    if (a3) {
      int v6 = "ServiceHours";
    }
    else {
      int v6 = "ServiceHoursRange";
    }
    uint64_t v7 = *((void *)result + 12);
    if (a3) {
      size_t v8 = 12;
    }
    else {
      size_t v8 = 17;
    }
    char v13 = v8;
    memcpy(__dst, v6, v8);
    *((unsigned char *)__dst + v8) = 0;
    uint64_t v9 = sub_8D7730(v7, (uint64_t)__dst);
    sub_5F41E8(a2, (uint64_t)v9);
    if (v13 < 0) {
      operator delete(__dst[0]);
    }
    uint64_t v10 = sub_923BE0(v5);
    sub_5F5F70(a2, &xmmword_25D51F8, (_DWORD *)(v3 + 516), v10, 0);
    return sub_5F5F70(a2, &xmmword_25D5210, (_DWORD *)(v3 + 520), v10, 0);
  }
  return result;
}

void sub_932E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_932E28@<X0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  uint64_t v2 = a1 + 160;
  sub_5F3B34(a1);
  uint64_t result = sub_5F3B34(v2);
  *(unsigned char *)(a1 + 320) = 0;
  return result;
}

void sub_932E94(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_932EA8@<X0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t result = sub_5F3B34(a1);
  *(unsigned char *)(result + 160) = 0;
  return result;
}

uint64_t sub_932EE4(uint64_t a1, int a2, int a3)
{
  if ((a2 - 4) < 2) {
    return 0;
  }
  if (a2 == 2)
  {
    uint64_t v4 = *(void *)(a1 + 72);
    if (!*(unsigned char *)(v4 + 792))
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_2439078;
    }
    LODWORD(result) = sub_9DD8A8(a1, *(void *)(a1 + 72));
    if (*(unsigned char *)(v4 + 424) == 1) {
      return result;
    }
    else {
      return 0;
    }
  }
  else
  {
    return sub_942494(a1, a2, a3);
  }
}

uint64_t sub_932FA0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = sub_940A78(a1, a2, a3);
  void *v4 = &off_243B998;
  uint64_t v5 = sub_9DC3CC((uint64_t)v4);
  if (*(_DWORD *)v5 != 2) {
    return a1;
  }
  if (!*(unsigned char *)(v5 + 792))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  int v6 = *(_DWORD *)(v5 + 344);
  if (v6 != 1)
  {
    if (v6 || *(_DWORD *)(v5 + 312) == -1) {
      goto LABEL_12;
    }
LABEL_10:
    unint64_t v7 = *(void *)(a1 + 472);
    if (v7 >= *(void *)(a1 + 480)) {
      sub_5F9180((void *)(a1 + 464), (long long *)&qword_25D4E20);
    }
    sub_5F2560(*(void **)(a1 + 472));
    *(void *)(a1 + 472) = v7 + 144;
    *(void *)(a1 + 472) = v7 + 144;
    if (*(_DWORD *)(a1 + 128) != 6) {
      return a1;
    }
    goto LABEL_16;
  }
  if (*(_DWORD *)(v5 + 316) != -1 || *(_DWORD *)(v5 + 312) != -1 || *(void *)(v5 + 320) != *(void *)(v5 + 328)) {
    goto LABEL_10;
  }
LABEL_12:
  if (*(_DWORD *)(a1 + 128) != 6) {
    return a1;
  }
LABEL_16:
  int v8 = sub_9DB778((void *)a1);
  uint64_t v9 = *(void *)(a1 + 80);
  uint64_t v10 = *(void *)(v9 + 96);
  if (0x4EC4EC4EC4EC4EC5 * ((*(void *)(v9 + 104) - v10) >> 4) <= (unint64_t)v8) {
    sub_66748();
  }
  uint64_t v11 = v10 + 208 * v8;
  uint64_t v12 = v11 + 88;
  int v13 = *(_DWORD *)(v11 + 120);
  if (v13 == 1)
  {
    if (*(_DWORD *)(v12 + 4) == -1 && *(_DWORD *)v12 == -1 && *(void *)(v12 + 8) == *(void *)(v12 + 16)) {
      return a1;
    }
  }
  else if (v13 || *(_DWORD *)v12 == -1)
  {
    return a1;
  }
  uint64_t v15 = *(void *)(a1 + 96);
  char v24 = 20;
  strcpy(__p, "{System} {SystemArt}");
  uint64_t v16 = sub_8D7730(v15, (uint64_t)__p);
  if ((v24 & 0x80000000) == 0)
  {
    unint64_t v17 = *(void *)(a1 + 496);
    if (v17 < *(void *)(a1 + 504)) {
      goto LABEL_26;
    }
LABEL_29:
    *(void *)(a1 + 496) = sub_936664((void **)(a1 + 488), (uint64_t)&xmmword_25D4DD8, (uint64_t)v16);
    std::string v19 = *(char **)(a1 + 472);
    if ((unint64_t)v19 >= *(void *)(a1 + 480)) {
      goto LABEL_36;
    }
    goto LABEL_30;
  }
  operator delete(*(void **)__p);
  unint64_t v17 = *(void *)(a1 + 496);
  if (v17 >= *(void *)(a1 + 504)) {
    goto LABEL_29;
  }
LABEL_26:
  if (byte_25D4DEF < 0)
  {
    sub_4200((unsigned char *)v17, (void *)xmmword_25D4DD8, *((unint64_t *)&xmmword_25D4DD8 + 1));
  }
  else
  {
    long long v18 = xmmword_25D4DD8;
    *(void *)(v17 + 16) = unk_25D4DE8;
    *(_OWORD *)unint64_t v17 = v18;
  }
  uint64_t v20 = (unsigned char *)(v17 + 24);
  if (*((char *)v16 + 23) < 0)
  {
    sub_4200(v20, (void *)*v16, v16[1]);
  }
  else
  {
    long long v21 = *(_OWORD *)v16;
    *(void *)(v17 + 40) = v16[2];
    *(_OWORD *)uint64_t v20 = v21;
  }
  *(void *)(a1 + 496) = v17 + 48;
  *(void *)(a1 + 496) = v17 + 48;
  std::string v19 = *(char **)(a1 + 472);
  if ((unint64_t)v19 >= *(void *)(a1 + 480)) {
LABEL_36:
  }
    sub_5F9180((void *)(a1 + 464), (long long *)&qword_25D51C8);
LABEL_30:
  sub_5F2560(v19);
  *(void *)(a1 + 472) = v19 + 144;
  *(void *)(a1 + 472) = v19 + 144;
  return a1;
}

void sub_9332D4(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 23) < 0)
  {
    operator delete(*(void **)v2);
    *(void *)(v1 + 496) = v2;
    sub_921ED8(v1);
    _Unwind_Resume(a1);
  }
  *(void *)(v1 + 496) = v2;
  sub_921ED8(v1);
  _Unwind_Resume(a1);
}

void sub_933314(_Unwind_Exception *a1)
{
  *(void *)(v1 + 472) = v2;
  sub_921ED8(v1);
  _Unwind_Resume(a1);
}

void sub_93332C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 472) = v2;
  sub_921ED8(v1);
  _Unwind_Resume(a1);
}

void sub_933344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  sub_921ED8(v14);
  _Unwind_Resume(a1);
}

void sub_933388(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v8 = sub_9DB4DC(a1, 2);
  if (!*((unsigned char *)v8 + 792))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  uint64_t v9 = a1[10];
  unint64_t v10 = *((void *)v8 + 94);
  uint64_t v11 = *(void *)(v9 + 72);
  if (0x66FD0EB66FD0EB67 * ((*(void *)(v9 + 80) - v11) >> 3) <= v10) {
    sub_66748();
  }
  unint64_t v31 = 0;
  unint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v12 = a3 + 1;
  sub_9368C0((uint64_t)&v31, *a3, a3[1], 0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 5));
  uint64_t v13 = *a3;
  if (*v12 - v13 == 160)
  {
    if (*(_DWORD *)(v13 + 80))
    {
      HIBYTE(v30) = 0;
      LOBYTE(__s1[0]) = 0;
    }
    else if (*(char *)(v13 + 79) < 0)
    {
      sub_4200(__s1, *(void **)(v13 + 56), *(void *)(v13 + 64));
    }
    else
    {
      *(_OWORD *)__s1 = *(_OWORD *)(v13 + 56);
      uint64_t v30 = *(void *)(v13 + 72);
    }
    char v14 = *(unsigned char *)(v13 + 47);
    if (v14 < 0)
    {
      if (!*(void *)(v13 + 32)) {
        goto LABEL_43;
      }
    }
    else if (!*(unsigned char *)(v13 + 47))
    {
      goto LABEL_43;
    }
    uint64_t v15 = HIBYTE(v30);
    if (v30 >= 0) {
      uint64_t v16 = (void *)HIBYTE(v30);
    }
    else {
      uint64_t v16 = __s1[1];
    }
    if (v14 >= 0) {
      unint64_t v17 = (void *)*(unsigned __int8 *)(v13 + 47);
    }
    else {
      unint64_t v17 = *(void **)(v13 + 32);
    }
    if (v16 == v17)
    {
      if (v14 >= 0) {
        long long v18 = (unsigned __int8 *)(v13 + 24);
      }
      else {
        long long v18 = *(unsigned __int8 **)(v13 + 24);
      }
      if (v30 < 0)
      {
        if (!memcmp(__s1[0], v18, (size_t)__s1[1])) {
          goto LABEL_43;
        }
      }
      else
      {
        if (!HIBYTE(v30)) {
          goto LABEL_43;
        }
        std::string v19 = __s1;
        while (*(unsigned __int8 *)v19 == *v18)
        {
          std::string v19 = (void **)((char *)v19 + 1);
          ++v18;
          if (!--v15) {
            goto LABEL_43;
          }
        }
      }
    }
    *(_OWORD *)int8x8_t v34 = 0u;
    long long v35 = 0u;
    uint64_t v36 = 0xFFFFFFFFLL;
    *(_DWORD *)uint64_t v37 = -1;
    *(_DWORD *)&v37[3] = -1;
    memset(&v37[7], 0, 33);
    long long v38 = 0uLL;
    long long v39 = 0uLL;
    uint64_t v20 = (char *)v31;
    sub_4F377C((uint64_t)v31 + 48, (uint64_t)v34);
    *((void *)v20 + 11) = *(void *)v37;
    long long v21 = (void **)(v20 + 96);
    if (v20[119] < 0) {
      operator delete(*v21);
    }
    *(_OWORD *)long long v21 = *(_OWORD *)&v37[8];
    *((void *)v20 + 14) = *(void *)&v37[24];
    v37[31] = 0;
    v37[8] = 0;
    v20[120] = v37[32];
    uint64_t v22 = v20 + 128;
    if (v20[151] < 0)
    {
      operator delete(*((void **)v20 + 16));
      int v23 = v37[31];
      *uint64_t v22 = v38;
      *((void *)v20 + 18) = v39;
      BYTE7(v39) = 0;
      LOBYTE(v38) = 0;
      v20[152] = BYTE8(v39);
      if (v23 < 0) {
        operator delete(*(void **)&v37[8]);
      }
    }
    else
    {
      *uint64_t v22 = v38;
      *((void *)v20 + 18) = v39;
      BYTE7(v39) = 0;
      LOBYTE(v38) = 0;
      v20[152] = BYTE8(v39);
    }
    if (v36 == 1)
    {
      char v24 = v34[1];
      if (!v34[1]) {
        goto LABEL_43;
      }
      *(void **)&long long v35 = v34[1];
    }
    else
    {
      if (v36 || (SHIBYTE(v35) & 0x80000000) == 0)
      {
LABEL_43:
        if (SHIBYTE(v30) < 0) {
          operator delete(__s1[0]);
        }
        goto LABEL_45;
      }
      char v24 = v34[1];
    }
    operator delete(v24);
    goto LABEL_43;
  }
LABEL_45:
  v34[0] = 0;
  v34[1] = 0;
  *(void *)&long long v35 = 0;
  sub_9E1568(a1, a2, (long long **)&v31, (long long *)v34, *(unsigned __int16 *)(v11 + 696 * v10 + 556), *(unsigned __int8 *)(v11 + 696 * v10 + 560), a4);
  if (SBYTE7(v35) < 0) {
    operator delete(v34[0]);
  }
  unint64_t v25 = v31;
  if (v31)
  {
    uint64_t v26 = (uint64_t)v32;
    uint64_t v27 = v31;
    if (v32 != v31)
    {
      do
        uint64_t v26 = sub_52FAE0(v26 - 160);
      while ((void *)v26 != v25);
      uint64_t v27 = v31;
    }
    unint64_t v32 = v25;
    operator delete(v27);
  }
}

void sub_933764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_9337A0((void **)va);
  _Unwind_Resume(a1);
}

void sub_933778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_9337A0(&a12);
  _Unwind_Resume(a1);
}

void **sub_9337A0(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_52FAE0(v3 - 160);
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_9337FC@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a2 != 2 || a3 != 1)
  {
    return sub_5F3B34(a4);
  }
  uint64_t v6 = sub_9DC3CC(a1);
  sub_5F3B34((uint64_t)&v63);
  sub_5F3B34((uint64_t)v60);
  if (*(_DWORD *)(a1 + 128) == 6 || *(_DWORD *)v6 == 2 && sub_9DD8A8(a1, v6) || sub_9268E4(a1))
  {
    sub_940FFC((uint64_t *)a1, *(_DWORD *)(a1 + 128) == 6, *(unsigned __int8 *)(*(void *)(a1 + 112) + 41), (uint64_t)&__dst);
    sub_4D90B4((uint64_t)&v63, (uint64_t)&__dst);
    sub_4D4B58((uint64_t)&__dst);
    if (*(unsigned char *)(*(void *)(a1 + 112) + 41))
    {
      BOOL v7 = sub_45FB38(&v63);
      if (*(_DWORD *)v6 == 2 && !v7)
      {
        if (!*(unsigned char *)(v6 + 792))
        {
          exception = __cxa_allocate_exception(8uLL);
          void *exception = &off_2439078;
        }
        if (*(unsigned char *)(v6 + 424) == 1) {
          sub_9309F4((uint64_t)&v63);
        }
      }
    }
    goto LABEL_27;
  }
  sub_9DC3E4((void *)a1, &__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (size) {
      goto LABEL_20;
    }
  }
  else if (*((unsigned char *)&__dst.__r_.__value_.__s + 23))
  {
LABEL_20:
    HIBYTE(v58[2]) = 15;
    strcpy((char *)v58, "Transfer to the");
    unint64_t v10 = sub_9DB4DC((void *)a1, 2);
    sub_9E0CE0(a1, (uint64_t)v10, 1, (uint64_t)__p);
    sub_933388((void *)a1, (uint64_t)v58, (uint64_t *)__p, (uint64_t)&__dst);
    sub_4D90B4((uint64_t)&v63, (uint64_t)&__dst);
    sub_4D4B58((uint64_t)&__dst);
    uint64_t v11 = *(void *)__p;
    if (*(void *)__p)
    {
      uint64_t v12 = *(void *)&__p[8];
      uint64_t v13 = *(void **)__p;
      if (*(void *)&__p[8] != *(void *)__p)
      {
        do
          uint64_t v12 = sub_52FAE0(v12 - 160);
        while (v12 != v11);
        uint64_t v13 = *(void **)__p;
      }
      *(void *)&__p[8] = v11;
      operator delete(v13);
    }
    if (SHIBYTE(v58[2]) < 0) {
      operator delete(v58[0]);
    }
LABEL_27:
    if (*(_DWORD *)(a1 + 128) == 6) {
      goto LABEL_28;
    }
    goto LABEL_41;
  }
  sub_9E034C((uint64_t *)a1, 2, 1, (uint64_t)&__dst);
  sub_4D90B4((uint64_t)&v63, (uint64_t)&__dst);
  sub_4D4B58((uint64_t)&__dst);
  if (*(_DWORD *)(a1 + 128) == 6)
  {
LABEL_28:
    char v14 = sub_9DB4DC((void *)a1, 2);
    sub_9E0CE0(a1, (uint64_t)v14, 1, (uint64_t)v58);
    if (!sub_9E1524(a1, v58))
    {
      char v57 = 20;
      strcpy(__p, "Follow signs for the");
      sub_933388((void *)a1, (uint64_t)__p, (uint64_t *)v58, (uint64_t)&__dst);
      sub_4D90B4((uint64_t)v60, (uint64_t)&__dst);
      sub_4D4B58((uint64_t)&__dst);
      if (v57 < 0) {
        operator delete(*(void **)__p);
      }
      goto LABEL_36;
    }
    sub_9DC3E4((void *)a1, &__dst);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v15 = __dst.__r_.__value_.__l.__size_;
      operator delete(__dst.__r_.__value_.__l.__data_);
      if (v15) {
        goto LABEL_36;
      }
    }
    else if (*((unsigned char *)&__dst.__r_.__value_.__s + 23))
    {
      goto LABEL_36;
    }
    sub_9E034C((uint64_t *)a1, 1, 1, (uint64_t)&__dst);
    sub_4D90B4((uint64_t)v60, (uint64_t)&__dst);
    sub_4D4B58((uint64_t)&__dst);
LABEL_36:
    uint64_t v16 = v58[0];
    if (v58[0])
    {
      unint64_t v17 = v58[1];
      long long v18 = v58[0];
      if (v58[1] != v58[0])
      {
        do
          unint64_t v17 = (void *)sub_52FAE0((uint64_t)v17 - 160);
        while (v17 != v16);
        long long v18 = v58[0];
      }
      v58[1] = v16;
      operator delete(v18);
    }
  }
LABEL_41:
  if (sub_45FB38(v60))
  {
    *(_OWORD *)a4 = v63;
    uint64_t v19 = v66;
    *(void *)(a4 + 16) = v64;
    long long v63 = 0uLL;
    *(_OWORD *)(a4 + 24) = v65;
    *(void *)(a4 + 40) = v19;
    uint64_t v64 = 0;
    long long v65 = 0uLL;
    uint64_t v66 = 0;
    *(_OWORD *)(a4 + 48) = v67;
    uint64_t v20 = v70;
    *(void *)(a4 + 64) = v68;
    long long v67 = 0uLL;
    *(_OWORD *)(a4 + 72) = v69;
    uint64_t v68 = 0;
    long long v69 = 0uLL;
    uint64_t v70 = 0;
    uint64_t v21 = v71;
    *(void *)(a4 + 88) = v20;
    *(void *)(a4 + 96) = v21;
    LODWORD(v21) = v72;
    *(unsigned char *)(a4 + 108) = v73;
    *(_DWORD *)(a4 + 104) = v21;
    long long v22 = v74;
    uint64_t v23 = v77;
    *(void *)(a4 + 128) = v75;
    *(_OWORD *)(a4 + 112) = v22;
    uint64_t v71 = 0;
    long long v74 = 0uLL;
    long long v24 = v76;
    *(void *)(a4 + 152) = v23;
    *(_OWORD *)(a4 + 136) = v24;
    uint64_t v77 = 0;
    uint64_t v75 = 0;
    long long v76 = 0uLL;
  }
  else
  {
    uint64_t v25 = *(void *)(a1 + 96);
    v58[0] = operator new(0x30uLL);
    *(_OWORD *)&v58[1] = xmmword_20B93B0;
    strcpy((char *)v58[0], "{PrimaryInstruction}. {SecondaryInstruction}.");
    uint64_t v26 = sub_8D7730(v25, (uint64_t)v58);
    if (*((char *)v26 + 23) < 0)
    {
      sub_4200(&__dst, (void *)*v26, v26[1]);
    }
    else
    {
      long long v27 = *(_OWORD *)v26;
      __dst.__r_.__value_.__r.__words[2] = v26[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v27;
    }
    if (SHIBYTE(v58[2]) < 0) {
      operator delete(v58[0]);
    }
    *(_OWORD *)uint64_t v58 = *(_OWORD *)"{PrimaryInstruction}";
    LODWORD(v58[2]) = 2104389481;
    uint64_t v28 = sub_4D4928(&v63, 0);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_dst = &__dst;
    }
    else {
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    int64_t v30 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int64_t v30 = __dst.__r_.__value_.__l.__size_;
    }
    if (v30 >= 20)
    {
      uint64_t v31 = v28;
      unint64_t v32 = (char *)p_dst + v30;
      uint64_t v33 = p_dst;
      do
      {
        int8x8_t v34 = (char *)memchr(v33, 123, v30 - 19);
        if (!v34) {
          break;
        }
        if (*(void **)v34 == v58[0]
          && *((void **)v34 + 1) == v58[1]
          && *((_DWORD *)v34 + 4) == (unint64_t)LODWORD(v58[2]))
        {
          if (v34 != v32 && v34 - (char *)p_dst != -1)
          {
            int v37 = *(char *)(v31 + 23);
            if (v37 >= 0) {
              long long v38 = (const std::string::value_type *)v31;
            }
            else {
              long long v38 = *(const std::string::value_type **)v31;
            }
            if (v37 >= 0) {
              std::string::size_type v39 = *(unsigned __int8 *)(v31 + 23);
            }
            else {
              std::string::size_type v39 = *(void *)(v31 + 8);
            }
            std::string::replace(&__dst, v34 - (char *)p_dst, 0x14uLL, v38, v39);
          }
          break;
        }
        uint64_t v33 = (std::string *)(v34 + 1);
        int64_t v30 = v32 - (char *)v33;
      }
      while (v32 - (char *)v33 >= 20);
    }
    qmemcpy(v58, "{SecondaryInstruction}", 22);
    uint64_t v40 = sub_4D4928(v60, 0);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v41 = &__dst;
    }
    else {
      uint64_t v41 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    int64_t v42 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int64_t v42 = __dst.__r_.__value_.__l.__size_;
    }
    if (v42 >= 22)
    {
      uint64_t v43 = v40;
      char v44 = (void **)((char *)&v41->__r_.__value_.__l.__data_ + v42);
      long long v45 = v41;
      do
      {
        uint64_t v46 = (void **)memchr(v45, 123, v42 - 21);
        if (!v46) {
          break;
        }
        if (*v46 == v58[0] && v46[1] == v58[1] && *(void **)((char *)v46 + 14) == *(void **)((char *)&v58[1] + 6))
        {
          if (v46 != v44 && (char *)v46 - (char *)v41 != -1)
          {
            int v49 = *(char *)(v43 + 23);
            if (v49 >= 0) {
              uint64_t v50 = (const std::string::value_type *)v43;
            }
            else {
              uint64_t v50 = *(const std::string::value_type **)v43;
            }
            if (v49 >= 0) {
              std::string::size_type v51 = *(unsigned __int8 *)(v43 + 23);
            }
            else {
              std::string::size_type v51 = *(void *)(v43 + 8);
            }
            std::string::replace(&__dst, (char *)v46 - (char *)v41, 0x16uLL, v50, v51);
          }
          break;
        }
        long long v45 = (std::string *)((char *)v46 + 1);
        int64_t v42 = (char *)v44 - (char *)v45;
      }
      while ((char *)v44 - (char *)v45 >= 22);
    }
    sub_4F58AC(a4, (uint64_t)&v63);
    uint64_t v52 = *(void *)a4;
    for (uint64_t i = *(void *)(a4 + 8); i != v52; i -= 24)
    {
      if (*(char *)(i - 1) < 0) {
        operator delete(*(void **)(i - 24));
      }
    }
    *(void *)(a4 + 8) = v52;
    sub_5F41E8(a4, (uint64_t)&__dst);
    sub_936B38(a4 + 24, *(void *)(a4 + 32), v61, v62, 0x8E38E38E38E38E39 * (v62 - v61));
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
  }
  sub_4D4B58((uint64_t)v60);
  return sub_4D4B58((uint64_t)&v63);
}

void sub_933F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  sub_4D4B58((uint64_t)&a46);
  sub_4D4B58(v46 - 208);
  _Unwind_Resume(a1);
}

BOOL sub_934010(uint64_t a1, int a2)
{
  return a2 == 2;
}

uint64_t sub_93401C(uint64_t a1, int a2, int a3)
{
  if (a2 == 1 && a3 == 2)
  {
    uint64_t v4 = (_DWORD *)sub_9DC3CC(a1);
    if (*v4 == 2)
    {
      uint64_t v5 = v4;
      uint64_t result = sub_9DD8A8(a1, (uint64_t)v4);
      if (result)
      {
        if (!*((unsigned char *)v5 + 792))
        {
          exception = __cxa_allocate_exception(8uLL);
          void *exception = &off_2439078;
        }
        return *((unsigned __int8 *)v5 + 424) == 1;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return sub_9DB8C8();
  }
  return result;
}

uint64_t sub_9340F8(uint64_t a1, int a2)
{
  if (a2 == 1) {
    return 0;
  }
  else {
    return sub_925650(a1, a2);
  }
}

void sub_93410C(void *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a3 == 1 && *((unsigned char *)a1 + 163))
  {
    uint64_t v7 = a1[9];
    if (!*(unsigned char *)(v7 + 952))
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_2439078;
    }
    uint64_t v8 = a1[10];
    unint64_t v9 = *(void *)(v7 + 856);
    uint64_t v10 = *(void *)(v8 + 120);
    if (0x86BCA1AF286BCA1BLL * ((*(void *)(v8 + 128) - v10) >> 4) <= v9) {
      sub_66748();
    }
    uint64_t v11 = v10 + 304 * v9;
    uint64_t v12 = v11 + 192;
    int v13 = *(_DWORD *)(v11 + 224);
    if (v13 != 1)
    {
      if (v13 || *(_DWORD *)v12 == -1) {
        goto LABEL_8;
      }
LABEL_14:
      sub_922B20((_OWORD *)a4);
      if (a1[64] != a1[65])
      {
        sub_92589C(a1, a2, 1, (uint64_t)__p);
        sub_922C20(a4, (long long *)__p);
        sub_927A08((uint64_t)__p);
        char v14 = *(__n128 **)(a4 + 24);
        if (byte_25D51C7 < 0)
        {
          sub_4200(__p, (void *)xmmword_25D51B0, *((unint64_t *)&xmmword_25D51B0 + 1));
        }
        else
        {
          *(_OWORD *)long long __p = xmmword_25D51B0;
          uint64_t v24 = *(void *)&byte_25D51C0;
        }
        char v25 = 0;
        sub_92AB20((void ***)(a4 + 24), v14, (__n128 *)__p);
        if (SHIBYTE(v24) < 0) {
          operator delete(__p[0]);
        }
        sub_5D6D4((std::string **)(a4 + 48), *(void *)(a4 + 48), (std::string *)&word_25D4E68);
        goto LABEL_41;
      }
      sub_9DBE80((uint64_t)a1, (uint64_t)__p);
      if (!*(_DWORD *)(v12 + 32))
      {
        uint64_t v15 = HIBYTE(v24);
        if (v24 >= 0) {
          uint64_t v16 = (void *)HIBYTE(v24);
        }
        else {
          uint64_t v16 = __p[1];
        }
        unint64_t v17 = (void *)*(unsigned __int8 *)(v12 + 31);
        int v18 = (char)v17;
        if ((char)v17 < 0) {
          unint64_t v17 = *(void **)(v12 + 16);
        }
        if (v16 == v17)
        {
          if (v18 >= 0) {
            uint64_t v19 = (unsigned __int8 *)(v12 + 8);
          }
          else {
            uint64_t v19 = *(unsigned __int8 **)(v12 + 8);
          }
          if ((v24 & 0x8000000000000000) == 0)
          {
            if (HIBYTE(v24))
            {
              uint64_t v20 = __p;
              uint64_t v21 = "Follow signs for {AccessPointArt} {AccessPointExit}";
              while (*(unsigned __int8 *)v20 == *v19)
              {
                uint64_t v20 = (void **)((char *)v20 + 1);
                ++v19;
                if (!--v15) {
                  goto LABEL_42;
                }
              }
              goto LABEL_39;
            }
            goto LABEL_42;
          }
          if (!memcmp(__p[0], v19, (size_t)__p[1]))
          {
LABEL_42:
            uint64_t v21 = "Follow signs for {AccessPointArt}";
LABEL_39:
            std::string::assign((std::string *)a4, v21);
            if (SHIBYTE(v24) < 0) {
              operator delete(__p[0]);
            }
LABEL_41:
            sub_5F40C0(a4 + 80, &xmmword_25D51B0);
          }
        }
      }
      uint64_t v21 = "Follow signs for {AccessPointArt} {AccessPointExit}";
      goto LABEL_39;
    }
    if (*(_DWORD *)(v12 + 4) != -1 || *(_DWORD *)v12 != -1 || *(void *)(v12 + 8) != *(void *)(v12 + 16)) {
      goto LABEL_14;
    }
  }
LABEL_8:

  sub_92589C(a1, a2, a3, a4);
}

void sub_934400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  sub_927A08(v14);
  _Unwind_Resume(a1);
}

void sub_93444C(uint64_t *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  if (a2 == 2) {
    a2 = 1;
  }
  sub_940590(a1, a2, a3, a4);
}

uint64_t sub_934458@<X0>(uint64_t *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a2 == 2 && a3 == 1) {
    return sub_5F3B34(a4);
  }
  else {
    return sub_9E034C(a1, a2, a3, a4);
  }
}

void sub_934474(uint64_t *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a3 != 2)
  {
LABEL_12:
    sub_943708(a1, a2, a3, a4);
    return;
  }
  if (a2 != 1)
  {
    if (a2 == 2)
    {
      uint64_t v6 = a1[9];
      if (!*(unsigned char *)(v6 + 792))
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_2439078;
      }
      if (sub_9E0C70((uint64_t)a1)
        && *(_DWORD *)(v6 + 88) != 0x7FFFFFFF
        && *(unsigned char *)(v6 + 96)
        && *(unsigned char *)(v6 + 97) == 1)
      {
        unint64_t v7 = *(void *)(a1[9] + 56);
        sub_9E098C((uint64_t)a1, v7, a4);
      }
      else
      {
        sub_5F3B34(a4);
      }
      return;
    }
    goto LABEL_12;
  }

  sub_9E034C(a1, 1, 2, a4);
}

uint64_t sub_9345CC(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v4 = (void *)result;
    do
    {
      int v5 = *(_DWORD *)(v2 + 456);
      sub_5F3B74((uint64_t)v14, (__int16 *)(v4[11] + 1177));
      sub_5F3B74((uint64_t)v13, (__int16 *)(v4[11] + 1177));
      if (v5)
      {
        (*(void (**)(void **__return_ptr, void *, uint64_t, void))(*v4 + 16))(__p, v4, 1, 0);
        sub_4D90B4((uint64_t)v14, (uint64_t)__p);
        sub_4D4B58((uint64_t)__p);
        (*(void (**)(void **__return_ptr, void *, uint64_t, uint64_t))(*v4 + 16))(__p, v4, 1, 1);
        sub_4D90B4((uint64_t)v13, (uint64_t)__p);
        sub_4D4B58((uint64_t)__p);
      }
      else
      {
        uint64_t v6 = v4[12];
        char v12 = 9;
        strcpy((char *)__p, "Exit Soon");
        unint64_t v7 = sub_8D7730(v6, (uint64_t)__p);
        sub_5F41E8((uint64_t)v14, (uint64_t)v7);
        if (v12 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v8 = (void *)v4[10];
        unint64_t v9 = *(void *)(v4[9] + 56);
        if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v8[1] - *v8) >> 3) <= v9) {
          sub_66748();
        }
        uint64_t v10 = (uint64_t *)sub_9DCD2C((uint64_t)v4, *v8 + 168 * v9);
        sub_994EAC(v10, (uint64_t)__p);
        sub_5F41E8((uint64_t)v13, (uint64_t)__p);
        if (v12 < 0) {
          operator delete(__p[0]);
        }
      }
      sub_52FD00(v2, (uint64_t)v14);
      sub_52FD00(v2 + 160, (uint64_t)v13);
      sub_4D4B58((uint64_t)v13);
      uint64_t result = sub_4D4B58((uint64_t)v14);
      v2 += 464;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_9347C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_4D4B58((uint64_t)&a32);
    sub_4D4B58(v32 - 240);
    _Unwind_Resume(a1);
  }
  sub_4D4B58((uint64_t)&a32);
  sub_4D4B58(v32 - 240);
  _Unwind_Resume(a1);
}

uint64_t sub_934838@<X0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t result = sub_5F3B34(a1);
  *(unsigned char *)(result + 160) = 0;
  return result;
}

BOOL sub_934874(uint64_t a1, int a2, int a3)
{
  return a2 != 4 && (a2 != 2 || a3 != 1) && sub_9438B0(a1, a2, a3);
}

uint64_t sub_934898(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v5 = (void *)sub_926F38(a1, a2, a3);
  void *v5 = &off_243BD18;
  uint64_t v6 = (uint64_t)(v5 + 65);
  sub_2F99CC(v5 + 65, *a3, a3[1]);
  sub_9D6CD4((void *)(a1 + 536), v6, *a3, a3[2]);
  if (!*(unsigned char *)(a1 + 512))
  {
    if (*(unsigned char *)(a1 + 216))
    {
      BOOL v7 = 0;
    }
    else
    {
      sub_9DBE78(a1, (uint64_t)&__p);
      unint64_t v8 = (unint64_t)v16;
      if ((v17 & 0x80u) == 0) {
        unint64_t v8 = v17;
      }
      BOOL v7 = v8 != 0;
      if ((char)v17 < 0) {
        operator delete(__p);
      }
    }
    sub_9DBE70(a1, (uint64_t)&__p);
    if ((char)v17 < 0)
    {
      BOOL v9 = v16 == 0;
      operator delete(__p);
    }
    else
    {
      BOOL v9 = v17 == 0;
    }
    sub_9D8380(a1 + 536, *(void *)(a1 + 72), 1, (uint64_t)&__p);
    if (__p != v16)
    {
      if (v7)
      {
        unint64_t v10 = *(void *)(a1 + 472);
        if (v10 >= *(void *)(a1 + 480)) {
          sub_5F9180((void *)(a1 + 464), &xmmword_25D4DD8);
        }
        sub_5F2560(*(void **)(a1 + 472));
        *(void *)(a1 + 472) = v10 + 144;
        *(void *)(a1 + 472) = v10 + 144;
        uint64_t v12 = *(void *)(a1 + 416);
        for (uint64_t i = *(void *)(a1 + 424); ; i -= 56)
        {
          if (i == v12)
          {
            *(void *)(a1 + 424) = v12;
            goto LABEL_28;
          }
          if (*(char *)(i - 1) < 0)
          {
            operator delete(*(void **)(i - 24));
            if ((*(char *)(i - 33) & 0x80000000) == 0) {
              continue;
            }
          }
          else if ((*(char *)(i - 33) & 0x80000000) == 0)
          {
            continue;
          }
          operator delete(*(void **)(i - 56));
        }
      }
      if (!v9)
      {
        unint64_t v11 = *(void *)(a1 + 472);
        if (v11 >= *(void *)(a1 + 480)) {
          sub_5F9180((void *)(a1 + 464), (long long *)&dword_25D4CE8);
        }
        sub_5F2560(*(void **)(a1 + 472));
        *(void *)(a1 + 472) = v11 + 144;
        *(void *)(a1 + 472) = v11 + 144;
      }
    }
LABEL_28:
    sub_934F58((uint64_t)&__p);
  }
  return a1;
}

void sub_934AC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *(void *)(v2 + 472) = v3;
  sub_934F58((uint64_t)va);
  sub_921ED8(v2);
  _Unwind_Resume(a1);
}

void sub_934AF0(_Unwind_Exception *a1)
{
  sub_921ED8(v1);
  _Unwind_Resume(a1);
}

void sub_934B04(_Unwind_Exception *a1)
{
  sub_921ED8(v1);
  _Unwind_Resume(a1);
}

void sub_934B18(_Unwind_Exception *a1)
{
  sub_921ED8(v1);
  _Unwind_Resume(a1);
}

void sub_934B2C(_Unwind_Exception *a1)
{
  sub_921ED8(v1);
  _Unwind_Resume(a1);
}

BOOL sub_934B40(uint64_t a1, int a2)
{
  return a2 == 2;
}

uint64_t sub_934B4C(void *a1)
{
  *a1 = off_243B2A0;
  uint64_t v2 = (void *)a1[64];
  if (v2)
  {
    a1[65] = v2;
    operator delete(v2);
  }

  return sub_921ED8((uint64_t)a1);
}

void sub_934BAC(void *a1)
{
  *a1 = off_243B2A0;
  uint64_t v2 = (void *)a1[64];
  if (v2)
  {
    a1[65] = v2;
    operator delete(v2);
  }
  sub_921ED8((uint64_t)a1);

  operator delete();
}

void sub_934C24(uint64_t a1)
{
  sub_921ED8(a1);

  operator delete();
}

uint64_t sub_934C5C(void *a1)
{
  *a1 = off_243B4C8;
  uint64_t v2 = a1[64];
  if (v2)
  {
    uint64_t v3 = a1[65];
    uint64_t v4 = (void *)a1[64];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[64];
    }
    a1[65] = v2;
    operator delete(v4);
  }

  return sub_921ED8((uint64_t)a1);
}

void sub_934CFC(void *a1)
{
  *a1 = off_243B4C8;
  uint64_t v2 = a1[64];
  if (v2)
  {
    uint64_t v3 = a1[65];
    uint64_t v4 = (void *)a1[64];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[64];
    }
    a1[65] = v2;
    operator delete(v4);
  }
  sub_921ED8((uint64_t)a1);

  operator delete();
}

void sub_934DB4(uint64_t a1)
{
  sub_921ED8(a1);

  operator delete();
}

void sub_934DF0(uint64_t a1)
{
  sub_921ED8(a1);

  operator delete();
}

uint64_t sub_934E28(uint64_t a1)
{
  uint64_t v1 = a1;
  *(void *)a1 = off_243B358;
  if (*(char *)(a1 + 535) < 0)
  {
    operator delete(*(void **)(a1 + 512));
    a1 = v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  return sub_921ED8(a1);
}

void sub_934EA8(uint64_t a1)
{
  *(void *)a1 = off_243B358;
  if (*(char *)(a1 + 535) < 0) {
    operator delete(*(void **)(a1 + 512));
  }
  sub_921ED8(a1);

  operator delete();
}

void sub_934F20(uint64_t a1)
{
  sub_921ED8(a1);

  operator delete();
}

uint64_t sub_934F58(uint64_t a1)
{
  if ((*(char *)(a1 + 263) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 231) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_8:
    operator delete(*(void **)(a1 + 208));
    int v2 = *(_DWORD *)(a1 + 192);
    if (v2 != 1) {
      goto LABEL_4;
    }
LABEL_9:
    uint64_t v3 = *(void **)(a1 + 168);
    if (!v3) {
      goto LABEL_12;
    }
    *(void *)(a1 + 176) = v3;
    goto LABEL_11;
  }
  operator delete(*(void **)(a1 + 240));
  if (*(char *)(a1 + 231) < 0) {
    goto LABEL_8;
  }
LABEL_3:
  int v2 = *(_DWORD *)(a1 + 192);
  if (v2 == 1) {
    goto LABEL_9;
  }
LABEL_4:
  if (!v2 && *(char *)(a1 + 191) < 0)
  {
    uint64_t v3 = *(void **)(a1 + 168);
LABEL_11:
    operator delete(v3);
  }
LABEL_12:
  if ((*(char *)(a1 + 151) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 119) & 0x80000000) == 0) {
      goto LABEL_14;
    }
LABEL_19:
    operator delete(*(void **)(a1 + 96));
    int v4 = *(_DWORD *)(a1 + 80);
    if (v4 != 1) {
      goto LABEL_15;
    }
LABEL_20:
    int v5 = *(void **)(a1 + 56);
    if (!v5) {
      goto LABEL_23;
    }
    *(void *)(a1 + 64) = v5;
    goto LABEL_22;
  }
  operator delete(*(void **)(a1 + 128));
  if (*(char *)(a1 + 119) < 0) {
    goto LABEL_19;
  }
LABEL_14:
  int v4 = *(_DWORD *)(a1 + 80);
  if (v4 == 1) {
    goto LABEL_20;
  }
LABEL_15:
  if (!v4 && *(char *)(a1 + 79) < 0)
  {
    int v5 = *(void **)(a1 + 56);
LABEL_22:
    operator delete(v5);
  }
LABEL_23:
  if (*(void *)(a1 + 24))
  {
    sub_4F43F0((uint64_t *)(a1 + 24));
    operator delete(*(void **)(a1 + 24));
  }
  if (*(void *)a1)
  {
    sub_4F43F0((uint64_t *)a1);
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_935078(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6 = (std::__shared_weak_count *)operator new(0x268uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = &v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_243BE70;
  uint64_t v8 = sub_930424((uint64_t)&v6[1], a1, a2);
  *a3 = v8;
  a3[1] = (uint64_t)v6;
  shared_weak_owners = (std::__shared_weak_count *)v6[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_owners_ = v8;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_owners_ = v8;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);

  std::__shared_weak_count::__release_weak(v6);
}

void sub_9351B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_9351C8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_243BE70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_9351E8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_243BE70;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_93523C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_935264(uint64_t a1@<X1>, void *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6 = (std::__shared_weak_count *)operator new(0x218uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = &v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_243BEC0;
  uint64_t v8 = sub_932FA0((uint64_t)&v6[1], a1, a2);
  *a3 = v8;
  a3[1] = (uint64_t)v6;
  shared_weak_owners = (std::__shared_weak_count *)v6[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_owners_ = v8;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_owners_ = v8;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);

  std::__shared_weak_count::__release_weak(v6);
}

void sub_93539C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_9353B4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_243BEC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_9353D4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_243BEC0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_935428(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_935450(uint64_t a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = (std::__shared_weak_count *)operator new(0x220uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = &v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_243BF10;
  uint64_t v8 = sub_94055C((uint64_t)&v6[1], a1, a2);
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)&off_243BAF8;
  *a3 = v8;
  a3[1] = v6;
  shared_weak_owners = (std::__shared_weak_count *)v6[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_owners_ = (uint64_t)v8;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_owners_ = (uint64_t)v8;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);

  std::__shared_weak_count::__release_weak(v6);
}

void sub_9355A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_9355BC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_243BF10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_9355DC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_243BF10;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_935630(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_935658(uint64_t a1@<X1>, void *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6 = (std::__shared_weak_count *)operator new(0x238uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = &v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_243BF60;
  uint64_t v8 = sub_9254BC((uint64_t)&v6[1], a1, a2);
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)off_243BA48;
  *a3 = v8;
  a3[1] = (uint64_t)v6;
  shared_weak_owners = (std::__shared_weak_count *)v6[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_owners_ = v8;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_owners_ = v8;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);

  std::__shared_weak_count::__release_weak(v6);
}

void sub_9357AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_9357C4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_243BF60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_9357E4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_243BF60;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_935838(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_935860(uint64_t a1@<X1>, void *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6 = (std::__shared_weak_count *)operator new(0x218uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = &v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_243BFB0;
  uint64_t v8 = sub_943A48((uint64_t)&v6[1], a1, a2);
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)&off_243BBA8;
  *a3 = v8;
  a3[1] = (uint64_t)v6;
  shared_weak_owners = (std::__shared_weak_count *)v6[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_owners_ = v8;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_owners_ = v8;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);

  std::__shared_weak_count::__release_weak(v6);
}

void sub_9359B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_9359CC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_243BFB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_9359EC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_243BFB0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_935A40(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_935A68(uint64_t a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = (std::__shared_weak_count *)operator new(0x238uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = &v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_243C000;
  uint64_t v8 = sub_94341C((uint64_t)&v6[1], a1, a2);
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)off_243BC58;
  *a3 = v8;
  a3[1] = v6;
  shared_weak_owners = (std::__shared_weak_count *)v6[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_owners_ = (uint64_t)v8;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_owners_ = (uint64_t)v8;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);

  std::__shared_weak_count::__release_weak(v6);
}

void sub_935BBC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_935BD4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_243C000;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_935BF4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_243C000;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_935C48(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_935C70(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6 = (std::__shared_weak_count *)operator new(0x248uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = &v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_243C050;
  uint64_t v8 = sub_934898((uint64_t)&v6[1], a1, a2);
  *a3 = v8;
  a3[1] = (uint64_t)v6;
  shared_weak_owners = (std::__shared_weak_count *)v6[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_owners_ = v8;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_owners_ = v8;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);

  std::__shared_weak_count::__release_weak(v6);
}

void sub_935DA8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_935DC0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_243C050;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_935DE0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_243C050;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_935E34(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

char *sub_935E5C(void **a1, unsigned char *a2, _DWORD *a3)
{
  unint64_t v6 = (unint64_t)*a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - (unsigned char *)*a1;
  uint64_t v8 = v7 >> 2;
  BOOL v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(_DWORD *)BOOL v9 = *a3;
      a1[1] = v9 + 4;
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 4);
    uint64_t v12 = v11 >> 2;
    int v13 = (int *)(v5 - 4);
    if (v5 < 4)
    {
      uint64_t v19 = a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v11;
      uint64_t v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 4;
      if (v5 > v16) {
        unint64_t v16 = (unint64_t)a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x2C)
      {
        uint64_t v19 = a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        uint64_t v19 = a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 2) + 1;
          uint64_t v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
          int v13 = (int *)((char *)v13 + v21);
          uint64_t v19 = (_DWORD *)(v5 + v21);
          long long v22 = (_OWORD *)(v5 + 16);
          uint64_t v23 = (long long *)(4 * v12 + 4 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            *long long v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 8;
          }
          while (v24);
          if (v20 == (v20 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        int v55 = *v13++;
        *v19++ = v55;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = v19;
    if ((char *)v5 != v9 + 4) {
      memmove((void *)(v5 - 4 * v12), v9, v11);
    }
    *(_DWORD *)BOOL v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 2) + 1;
  if (v26 >> 62) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 1 > v26) {
    unint64_t v26 = v28 >> 1;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 62) {
      sub_188D718();
    }
    int64_t v30 = (char *)operator new(4 * v29);
    uint64_t v31 = &v30[4 * v8];
    uint64_t v32 = &v30[4 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    int64_t v30 = 0;
    uint64_t v31 = (char *)(4 * v8);
    uint64_t v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((unsigned char *)v6 == a2) {
      unint64_t v52 = 1;
    }
    else {
      unint64_t v52 = v7 >> 1;
    }
    if (v52 >> 62) {
      sub_188D718();
    }
    std::string::size_type v53 = (char *)operator new(4 * v52);
    uint64_t v31 = &v53[v52 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v32 = &v53[4 * v52];
    if (v30)
    {
      int v54 = &v53[4 * v52];
      operator delete(v30);
      uint64_t v32 = v54;
      int8x8_t v34 = (char *)*a1;
      *(_DWORD *)uint64_t v31 = *a3;
      long long v35 = v31 + 4;
      uint64_t v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 4 * (v33 >> 1);
  }
LABEL_28:
  int8x8_t v34 = (char *)v6;
  *(_DWORD *)uint64_t v31 = *a3;
  long long v35 = v31 + 4;
  uint64_t v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    int v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFFCLL) + v6);
    unint64_t v38 = v37 - v34 - 4;
    std::string::size_type v39 = v9;
    uint64_t v36 = v31;
    if (v38 < 0x2C) {
      goto LABEL_59;
    }
    std::string::size_type v39 = v9;
    uint64_t v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 2) + 1;
    uint64_t v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
    std::string::size_type v39 = &v9[-v41];
    uint64_t v36 = &v31[-v41];
    int64_t v42 = v31 - 16;
    uint64_t v43 = (long long *)(v6 + 4 * v8 - 16);
    uint64_t v44 = v40 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)int64_t v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 8;
    }
    while (v44);
    if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_59:
      do
      {
        int v46 = *((_DWORD *)v39 - 1);
        v39 -= 4;
        *((_DWORD *)v36 - 1) = v46;
        v36 -= 4;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  uint64_t v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    int v49 = v9;
    size_t v50 = v47 - v9;
    std::string::size_type v51 = v32;
    memmove(v35, v49, v50);
    uint64_t v32 = v51;
    int8x8_t v34 = (char *)*a1;
  }
  *a1 = v36;
  a1[1] = &v35[v48];
  a1[2] = v32;
  if (v34) {
    operator delete(v34);
  }
  return v31;
}

void sub_9361B4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_9361CC(char **a1, uint64_t a2, long long *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = (a2 - (uint64_t)*a1) / 28;
  uint64_t v8 = &(*a1)[28 * v7];
  unint64_t v9 = (unint64_t)a1[2];
  if (v5 >= v9)
  {
    unint64_t v15 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - (void)v6) >> 2) + 1;
    if (v15 > 0x924924924924924) {
      sub_2E00();
    }
    unint64_t v16 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v9 - (void)v6) >> 2);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0x492492492492492) {
      unint64_t v17 = 0x924924924924924;
    }
    else {
      unint64_t v17 = v15;
    }
    uint64_t v36 = a1 + 2;
    if (v17)
    {
      if (v17 > 0x924924924924924) {
        sub_188D718();
      }
      unint64_t v18 = (char *)operator new(28 * v17);
    }
    else
    {
      unint64_t v18 = 0;
    }
    uint64_t v32 = v18;
    unint64_t v33 = &v18[28 * v7];
    std::string __dst = v33;
    long long v35 = &v18[28 * v17];
    sub_9364C4((uint64_t)&v32, (uint64_t)a3);
    uint64_t v20 = v33;
    uint64_t v21 = *a1;
    long long v22 = v33;
    if (*a1 != v8)
    {
      uint64_t v23 = v8;
      uint64_t v24 = v33;
      do
      {
        long long v25 = *(_OWORD *)((char *)v23 - 28);
        long long v22 = v24 - 28;
        *((_OWORD *)v24 - 1) = *(v23 - 1);
        *(_OWORD *)(v24 - 28) = v25;
        uint64_t v23 = (_OWORD *)((char *)v23 - 28);
        v24 -= 28;
      }
      while (v23 != (_OWORD *)v21);
    }
    unint64_t v33 = v22;
    unint64_t v26 = a1[1];
    long long v27 = (char *)__dst;
    int64_t v28 = v26 - v8;
    if (v26 != v8)
    {
      memmove(__dst, v8, v26 - v8);
      long long v22 = v33;
      uint64_t v8 = a1[1];
    }
    unint64_t v29 = *a1;
    *a1 = v22;
    a1[1] = &v27[v28];
    int64_t v30 = a1[2];
    a1[2] = v35;
    std::string __dst = v8;
    long long v35 = v30;
    uint64_t v32 = v29;
    unint64_t v33 = v29;
    if (v8 != v29) {
      std::string __dst = &v29[(v8 - v29 - 28) % 0x1CuLL];
    }
    if (v29) {
      operator delete(v29);
    }
    return v20;
  }
  else if (v8 == (char *)v5)
  {
    long long v19 = *a3;
    *(_OWORD *)(v8 + 12) = *(long long *)((char *)a3 + 12);
    *(_OWORD *)uint64_t v8 = v19;
    a1[1] = v8 + 28;
  }
  else
  {
    unint64_t v10 = v8 + 28;
    int64_t v11 = (long long *)(v5 - 28);
    uint64_t v12 = a1[1];
    if (v5 >= 0x1C)
    {
      do
      {
        long long v13 = *v11;
        *(_OWORD *)(v12 + 12) = *(long long *)((char *)v11 + 12);
        *(_OWORD *)uint64_t v12 = v13;
        v12 += 28;
        int64_t v11 = (long long *)((char *)v11 + 28);
      }
      while ((unint64_t)v11 < v5);
    }
    a1[1] = v12;
    if ((char *)v5 != v10) {
      memmove(v8 + 28, v8, v5 - (void)v10);
    }
    long long v14 = *a3;
    *(_OWORD *)(v8 + 12) = *(long long *)((char *)a3 + 12);
    *(_OWORD *)uint64_t v8 = v14;
  }
  return v8;
}

void sub_93645C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (a12 == a11)
  {
    long long v13 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v13 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

__n128 sub_9364C4(uint64_t a1, uint64_t a2)
{
  int v4 = *(__n128 **)(a1 + 16);
  if (v4 == *(__n128 **)(a1 + 24))
  {
    unint64_t v6 = *(__n128 **)a1;
    unint64_t v5 = *(__n128 **)(a1 + 8);
    if ((unint64_t)v5 <= *(void *)a1)
    {
      unint64_t v15 = 0xDB6DB6DB6DB6DB6ELL * (((char *)v4 - (char *)v6) >> 2);
      if (v4 == v6) {
        unint64_t v15 = 1;
      }
      if (v15 >= 0x924924924924925) {
        sub_188D718();
      }
      unint64_t v16 = v15 >> 2;
      uint64_t v17 = 28 * v15;
      unint64_t v18 = (char *)operator new(28 * v15);
      long long v19 = (__n128 *)&v18[28 * v16];
      int64_t v21 = (char *)v4 - (char *)v5;
      BOOL v20 = v4 == v5;
      int v4 = v19;
      if (!v20)
      {
        uint64_t v22 = v21 / 28;
        int v4 = (__n128 *)((char *)v19 + 28 * v22);
        uint64_t v23 = 28 * v22;
        uint64_t v24 = &v18[28 * v16];
        do
        {
          __n128 v25 = *v5;
          *(__n128 *)(v24 + 12) = *(__n128 *)((char *)v5 + 12);
          *(__n128 *)uint64_t v24 = v25;
          v24 += 28;
          unint64_t v5 = (__n128 *)((char *)v5 + 28);
          v23 -= 28;
        }
        while (v23);
      }
      *(void *)a1 = v18;
      *(void *)(a1 + 8) = v19;
      *(void *)(a1 + 16) = v4;
      *(void *)(a1 + 24) = &v18[v17];
      if (v6)
      {
        operator delete(v6);
        int v4 = *(__n128 **)(a1 + 16);
      }
    }
    else
    {
      uint64_t v7 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v5 - *(void *)a1) >> 2);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -v9;
      uint64_t v11 = -28 * v9;
      uint64_t v12 = (char *)v5 + v11;
      int64_t v13 = (char *)v4 - (char *)v5;
      if (v4 != v5)
      {
        memmove((char *)v5 + v11, *(const void **)(a1 + 8), (char *)v4 - (char *)v5);
        int v4 = *(__n128 **)(a1 + 8);
      }
      long long v14 = (char *)v4 + 28 * v10;
      int v4 = (__n128 *)&v12[v13];
      *(void *)(a1 + 8) = v14;
      *(void *)(a1 + 16) = &v12[v13];
    }
  }
  __n128 result = *(__n128 *)a2;
  *(__n128 *)((char *)v4 + 12) = *(__n128 *)(a2 + 12);
  __n128 *v4 = result;
  *(void *)(a1 + 16) += 28;
  return result;
}

char *sub_936664(void **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v5) {
    unint64_t v5 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v8 = 0x555555555555555;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v9 = operator new(48 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = &v9[48 * v4];
  int64_t v21 = &v9[48 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_4200(&v9[48 * v4], *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v10 = *(_OWORD *)a2;
    *((void *)v10 + 2) = *(void *)(a2 + 16);
  }
  uint64_t v11 = &v9[48 * v4 + 24];
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(v11, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v11 = *(_OWORD *)a3;
    *(void *)&v9[48 * v4 + 40] = *(void *)(a3 + 16);
  }
  uint64_t v12 = &v9[48 * v4];
  BOOL v20 = v12;
  int64_t v13 = v12 + 48;
  long long v14 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = &v9[48 * v4];
    a1[1] = v13;
    a1[2] = v21;
    goto LABEL_29;
  }
  do
  {
    long long v16 = *((_OWORD *)v15 - 3);
    *((void *)v12 - 4) = *((void *)v15 - 4);
    *((_OWORD *)v12 - 3) = v16;
    *((void *)v15 - 5) = 0;
    *((void *)v15 - 4) = 0;
    *((void *)v15 - 6) = 0;
    long long v17 = *(_OWORD *)(v15 - 24);
    *((void *)v12 - 1) = *((void *)v15 - 1);
    *(_OWORD *)(v12 - 24) = v17;
    v12 -= 48;
    *((void *)v15 - 2) = 0;
    *((void *)v15 - 1) = 0;
    *((void *)v15 - 3) = 0;
    v15 -= 48;
  }
  while (v15 != v14);
  unint64_t v18 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  *a1 = v12;
  a1[1] = v13;
  a1[2] = v21;
  if (v15 == v18) {
    goto LABEL_29;
  }
  do
  {
    if (*(v15 - 1) < 0)
    {
      operator delete(*((void **)v15 - 3));
      if ((*(v15 - 25) & 0x80000000) == 0) {
        goto LABEL_22;
      }
    }
    else if ((*(v15 - 25) & 0x80000000) == 0)
    {
      goto LABEL_22;
    }
    operator delete(*((void **)v15 - 6));
LABEL_22:
    v15 -= 48;
  }
  while (v15 != v18);
  unint64_t v15 = v18;
LABEL_29:
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_936888(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 23) < 0)
  {
    operator delete(*(void **)v2);
    sub_75890((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_75890((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_9368C0(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v5 = (void *)result;
    if (a4 >= 0x19999999999999ALL) {
      sub_2E00();
    }
    __n128 result = (uint64_t)operator new(160 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = result + 160 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        __n128 result = sub_936A54((int)v5 + 16, (char *)(v8 + v9), (long long *)(a2 + v9));
        v9 += 160;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_936988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_93699C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 160)
    sub_52FAE0(v10 - 160 + v11);
  *(void *)(v9 + 8) = v10;
  sub_9369CC(&a9);
  _Unwind_Resume(a1);
}

void ***sub_9369CC(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = (uint64_t)v2[1];
      unint64_t v5 = **v1;
      if ((void *)v4 != v3)
      {
        do
          uint64_t v4 = sub_52FAE0(v4 - 160);
        while ((void *)v4 != v3);
        unint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_936A54(int a1, char *__dst, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a3, *((void *)a3 + 1));
    unint64_t v6 = __dst + 24;
    if ((*((char *)a3 + 47) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_5:
    sub_4200(v6, *((void **)a3 + 3), *((void *)a3 + 4));
    return sub_4F57A0((uint64_t)(__dst + 48), (uint64_t)(a3 + 3));
  }
  long long v5 = *a3;
  *((void *)__dst + 2) = *((void *)a3 + 2);
  *(_OWORD *)std::string __dst = v5;
  unint64_t v6 = __dst + 24;
  if (*((char *)a3 + 47) < 0) {
    goto LABEL_5;
  }
LABEL_3:
  long long v7 = *(long long *)((char *)a3 + 24);
  *((void *)v6 + 2) = *((void *)a3 + 5);
  *(_OWORD *)unint64_t v6 = v7;
  return sub_4F57A0((uint64_t)(__dst + 48), (uint64_t)(a3 + 3));
}

void sub_936AEC(_Unwind_Exception *exception_object)
{
  if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

long long *sub_936B38(uint64_t a1, uint64_t a2, long long *a3, long long *a4, uint64_t a5)
{
  long long v5 = *(long long **)a1;
  uint64_t v6 = (a2 - *(void *)a1) / 144;
  long long v7 = (long long *)(*(void *)a1 + 144 * v6);
  if (a5 < 1) {
    return v7;
  }
  uint64_t v9 = a3;
  uint64_t v11 = *(void *)(a1 + 16);
  unint64_t v12 = *(void *)(a1 + 8);
  if ((uint64_t)(0x8E38E38E38E38E39 * ((uint64_t)(v11 - v12) >> 4)) < a5)
  {
    unint64_t v13 = a5 - 0x71C71C71C71C71C7 * ((uint64_t)(v12 - (void)v5) >> 4);
    if (v13 > 0x1C71C71C71C71C7) {
      sub_2E00();
    }
    unint64_t v14 = 0x8E38E38E38E38E39 * ((v11 - (uint64_t)v5) >> 4);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0xE38E38E38E38E3) {
      unint64_t v15 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v15 = v13;
    }
    uint64_t v49 = a1 + 16;
    if (v15)
    {
      if (v15 > 0x1C71C71C71C71C7) {
        sub_188D718();
      }
      long long v16 = (char *)operator new(144 * v15);
    }
    else
    {
      long long v16 = 0;
    }
    unint64_t v38 = &v16[144 * v6];
    long long __p = v16;
    int v46 = v38;
    uint64_t v47 = v38;
    int64_t v48 = &v16[144 * v15];
    uint64_t v39 = 144 * a5;
    uint64_t v40 = (uint64_t)&v38[v39];
    do
    {
      sub_4F5C8C(v38, v9);
      v38 += 144;
      v9 += 9;
      v39 -= 144;
    }
    while (v39);
    uint64_t v47 = (char *)v40;
    long long v7 = sub_936F64((long long **)a1, &__p, v7);
    uint64_t v41 = v46;
    while (v47 != v41)
    {
      v47 -= 144;
      sub_4F2DAC(v49, (uint64_t)v47);
    }
    if (__p) {
      operator delete(__p);
    }
    return v7;
  }
  uint64_t v43 = (a2 - *(void *)a1) / 144;
  uint64_t v44 = *(void *)a1 + 144 * v6;
  uint64_t v17 = v12 - (void)v7;
  if ((uint64_t)(0x8E38E38E38E38E39 * (v17 >> 4)) >= a5)
  {
    long long v19 = &a3[9 * a5];
    unint64_t v21 = *(void *)(a1 + 8);
  }
  else
  {
    long long v19 = &a3[v17 >> 4];
    if (v19 == a4)
    {
      unint64_t v21 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = v12;
      if (v17 < 1) {
        return (long long *)v44;
      }
    }
    else
    {
      uint64_t v20 = 0;
      do
      {
        sub_4F5C8C((_DWORD *)(v12 + v20 * 16), &v19[v20]);
        v20 += 9;
      }
      while (&v19[v20] != a4);
      unint64_t v21 = v12 + v20 * 16;
      *(void *)(a1 + 8) = v12 + v20 * 16;
      if (v17 < 1) {
        return (long long *)v44;
      }
    }
  }
  long long v7 = (long long *)v44;
  uint64_t v22 = v44 + 144 * a5;
  uint64_t v23 = (long long *)(v21 - 144 * a5);
  unint64_t v24 = v21;
  if ((unint64_t)v23 < v12)
  {
    unint64_t v24 = v21;
    do
    {
      long long v25 = *v23;
      *(void *)(v24 + 16) = *((void *)v23 + 2);
      *(_OWORD *)unint64_t v24 = v25;
      *(long long *)((char *)v23 + 8) = 0uLL;
      *(void *)uint64_t v23 = 0;
      uint64_t v26 = *((void *)v23 + 3);
      *(_DWORD *)(v24 + 32) = *((_DWORD *)v23 + 8);
      *(void *)(v24 + 24) = v26;
      uint64_t v27 = *((void *)v23 + 5);
      *((void *)v23 + 5) = 0;
      *(void *)(v24 + 40) = v27;
      uint64_t v28 = *((void *)v23 + 6);
      *((void *)v23 + 6) = 0;
      *(void *)(v24 + 48) = v28;
      uint64_t v29 = *((void *)v23 + 7);
      *((void *)v23 + 7) = 0;
      *(void *)(v24 + 56) = v29;
      *(void *)(v24 + 64) = 0;
      *(_OWORD *)(v24 + 72) = 0uLL;
      *(_OWORD *)(v24 + 64) = v23[4];
      *(void *)(v24 + 80) = *((void *)v23 + 10);
      uint64_t v30 = *((void *)v23 + 11);
      v23[4] = 0uLL;
      v23[5] = 0uLL;
      *(void *)(v24 + 88) = v30;
      LODWORD(v30) = *((_DWORD *)v23 + 24);
      *(unsigned char *)(v24 + 100) = *((unsigned char *)v23 + 100);
      *(_DWORD *)(v24 + 96) = v30;
      uint64_t v31 = *((void *)v23 + 13);
      *((void *)v23 + 13) = 0;
      *(void *)(v24 + 104) = v31;
      uint64_t v32 = *((void *)v23 + 14);
      *((void *)v23 + 14) = 0;
      *(void *)(v24 + 112) = v32;
      uint64_t v33 = *((void *)v23 + 15);
      *((void *)v23 + 15) = 0;
      *(void *)(v24 + 120) = v33;
      uint64_t v34 = *((void *)v23 + 16);
      *((void *)v23 + 16) = 0;
      *(void *)(v24 + 128) = v34;
      *(_DWORD *)(v24 + 136) = *((_DWORD *)v23 + 34);
      v24 += 144;
      v23 += 9;
    }
    while ((unint64_t)v23 < v12);
  }
  *(void *)(a1 + 8) = v24;
  if (v21 != v22)
  {
    uint64_t v35 = v21 - 144;
    uint64_t v36 = (uint64_t)(v21 - v22) >> 4;
    do
    {
      sub_937170(v35, &v5[9 * v43 - 9 + v36]);
      v35 -= 144;
      v36 -= 9;
    }
    while (v36 * 16);
  }
  if (v19 != v9)
  {
    uint64_t v37 = v44;
    do
    {
      sub_530290(v37, (uint64_t)v9);
      v9 += 9;
      v37 += 144;
    }
    while (v9 != v19);
  }
  return v7;
}

void sub_936F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_55C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_936F18(_Unwind_Exception *exception_object)
{
  for (; v1; v1 -= 144)
    sub_4F2DAC(v3, v4 - 144 + v1);
  *(void *)(v2 + 8) = v4;
  _Unwind_Resume(exception_object);
}

void sub_936F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_55C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

long long *sub_936F64(long long **a1, void *a2, long long *a3)
{
  __n128 result = (long long *)a2[1];
  long long v5 = *a1;
  uint64_t v6 = result;
  if (*a1 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = &a3[v7];
      long long v9 = a3[v7 - 9];
      uint64_t v10 = &result[v7];
      *((void *)v10 - 16) = *(void *)&a3[v7 - 8];
      *(v10 - 9) = v9;
      *(long long *)((char *)v8 - 136) = 0uLL;
      uint64_t v11 = *((void *)&a3[v7 - 7] - 1);
      int v12 = a3[v7 - 7];
      *((void *)v8 - 18) = 0;
      *((_DWORD *)v10 - 28) = v12;
      *((void *)v10 - 15) = v11;
      uint64_t v13 = *((void *)&a3[v7 - 6] - 1);
      *((void *)v8 - 13) = 0;
      *((void *)v10 - 13) = v13;
      uint64_t v14 = *(void *)&a3[v7 - 6];
      *((void *)v8 - 12) = 0;
      *((void *)v10 - 12) = v14;
      uint64_t v15 = *((void *)&a3[v7 - 5] - 1);
      *((void *)v8 - 11) = 0;
      *((void *)v10 - 11) = v15;
      *((void *)v10 - 10) = 0;
      *(long long *)((char *)v10 - 72) = 0uLL;
      *(v10 - 5) = a3[v7 - 5];
      *((void *)v10 - 8) = *(void *)&a3[v7 - 4];
      uint64_t v16 = *((void *)&a3[v7 - 3] - 1);
      *(v8 - 5) = 0uLL;
      *(v8 - 4) = 0uLL;
      *((void *)v10 - 7) = v16;
      LODWORD(v16) = a3[v7 - 3];
      *((unsigned char *)v10 - 44) = *((unsigned char *)&a3[v7 - 2] - 12);
      *((_DWORD *)v10 - 12) = v16;
      uint64_t v17 = *((void *)&a3[v7 - 2] - 1);
      *((void *)v8 - 5) = 0;
      *((void *)v10 - 5) = v17;
      uint64_t v18 = *(void *)&a3[v7 - 2];
      *((void *)v8 - 4) = 0;
      *((void *)v10 - 4) = v18;
      uint64_t v19 = *((void *)&a3[v7 - 1] - 1);
      *((void *)v8 - 3) = 0;
      *((void *)v10 - 3) = v19;
      uint64_t v20 = *(void *)&a3[v7 - 1];
      *((void *)v8 - 2) = 0;
      *((void *)v10 - 2) = v20;
      *((_DWORD *)v10 - 2) = DWORD2(a3[v7 - 1]);
      v7 -= 9;
    }
    while (&a3[v7] != v5);
    uint64_t v6 = &result[v7];
  }
  a2[1] = v6;
  unint64_t v21 = a1[1];
  uint64_t v22 = a2[2];
  if (v21 != a3)
  {
    do
    {
      long long v23 = *a3;
      *(void *)(v22 + 16) = *((void *)a3 + 2);
      *(_OWORD *)uint64_t v22 = v23;
      *(long long *)((char *)a3 + 8) = 0uLL;
      *(void *)a3 = 0;
      uint64_t v24 = *((void *)a3 + 3);
      *(_DWORD *)(v22 + 32) = *((_DWORD *)a3 + 8);
      *(void *)(v22 + 24) = v24;
      uint64_t v25 = *((void *)a3 + 5);
      *((void *)a3 + 5) = 0;
      *(void *)(v22 + 40) = v25;
      uint64_t v26 = *((void *)a3 + 6);
      *((void *)a3 + 6) = 0;
      *(void *)(v22 + 48) = v26;
      uint64_t v27 = *((void *)a3 + 7);
      *((void *)a3 + 7) = 0;
      *(void *)(v22 + 56) = v27;
      *(void *)(v22 + 64) = 0;
      *(_OWORD *)(v22 + 72) = 0uLL;
      *(_OWORD *)(v22 + 64) = a3[4];
      *(void *)(v22 + 80) = *((void *)a3 + 10);
      uint64_t v28 = *((void *)a3 + 11);
      a3[4] = 0uLL;
      a3[5] = 0uLL;
      *(void *)(v22 + 88) = v28;
      LODWORD(v28) = *((_DWORD *)a3 + 24);
      *(unsigned char *)(v22 + 100) = *((unsigned char *)a3 + 100);
      *(_DWORD *)(v22 + 96) = v28;
      uint64_t v29 = *((void *)a3 + 13);
      *((void *)a3 + 13) = 0;
      *(void *)(v22 + 104) = v29;
      uint64_t v30 = *((void *)a3 + 14);
      *((void *)a3 + 14) = 0;
      *(void *)(v22 + 112) = v30;
      uint64_t v31 = *((void *)a3 + 15);
      *((void *)a3 + 15) = 0;
      *(void *)(v22 + 120) = v31;
      uint64_t v32 = *((void *)a3 + 16);
      *((void *)a3 + 16) = 0;
      *(void *)(v22 + 128) = v32;
      *(_DWORD *)(v22 + 136) = *((_DWORD *)a3 + 34);
      v22 += 144;
      a3 += 9;
    }
    while (a3 != v21);
    uint64_t v6 = (long long *)a2[1];
  }
  a2[2] = v22;
  uint64_t v33 = *a1;
  *a1 = v6;
  a2[1] = v33;
  uint64_t v34 = a1[1];
  a1[1] = (long long *)a2[2];
  a2[2] = v34;
  uint64_t v35 = a1[2];
  a1[2] = (long long *)a2[3];
  a2[3] = v35;
  *a2 = a2[1];
  return result;
}

uint64_t sub_937170(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  uint64_t v5 = *((void *)a2 + 3);
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *((void *)a2 + 5);
  if (v6)
  {
    *((void *)a2 + 5) = 0;
    uint64_t v7 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v6;
    if (v7) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = 0;
    if (v7)
    {
LABEL_5:
      if (*(char *)(v7 + 23) < 0) {
        operator delete(*(void **)v7);
      }
      operator delete();
    }
  }
  uint64_t v8 = *((void *)a2 + 6);
  if (v8)
  {
    *((void *)a2 + 6) = 0;
    uint64_t v9 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = v8;
    if (v9) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = 0;
    if (v9)
    {
LABEL_10:
      if (*(char *)(v9 + 31) < 0) {
        operator delete(*(void **)(v9 + 8));
      }
      operator delete();
    }
  }
  uint64_t v10 = (uint64_t *)(a1 + 56);
  uint64_t v11 = *((void *)a2 + 7);
  if (v11)
  {
    *((void *)a2 + 7) = 0;
    uint64_t v12 = *v10;
    uint64_t *v10 = v11;
    if (!v12) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  uint64_t v12 = *v10;
  uint64_t *v10 = 0;
  if (v12) {
LABEL_15:
  }
    sub_4F49E8((uint64_t)v10, v12);
LABEL_16:
  uint64_t v13 = (void **)(a1 + 64);
  uint64_t v14 = *(void *)(a1 + 64);
  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 72);
    uint64_t v16 = *(void **)(a1 + 64);
    if (v15 != v14)
    {
      do
      {
        if (*(char *)(v15 - 9) < 0) {
          operator delete(*(void **)(v15 - 32));
        }
        v15 -= 40;
      }
      while (v15 != v14);
      uint64_t v16 = *v13;
    }
    *(void *)(a1 + 72) = v14;
    operator delete(v16);
    *uint64_t v13 = 0;
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
  }
  *(_OWORD *)(a1 + 64) = a2[4];
  *(void *)(a1 + 80) = *((void *)a2 + 10);
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 9) = 0;
  *((void *)a2 + 10) = 0;
  uint64_t v17 = (uint64_t *)(a1 + 88);
  uint64_t v18 = *((void *)a2 + 11);
  if (v18)
  {
    *((void *)a2 + 11) = 0;
    uint64_t v19 = *v17;
    uint64_t *v17 = v18;
    if (!v19) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  uint64_t v19 = *v17;
  uint64_t *v17 = 0;
  if (v19) {
LABEL_26:
  }
    sub_4F48F0((uint64_t)v17, v19);
LABEL_27:
  int v20 = *((_DWORD *)a2 + 24);
  *(unsigned char *)(a1 + 100) = *((unsigned char *)a2 + 100);
  *(_DWORD *)(a1 + 96) = v20;
  uint64_t v21 = *((void *)a2 + 13);
  if (v21)
  {
    *((void *)a2 + 13) = 0;
    uint64_t v22 = *(void *)(a1 + 104);
    *(void *)(a1 + 104) = v21;
    if (v22) {
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 104);
    *(void *)(a1 + 104) = 0;
    if (v22)
    {
LABEL_29:
      if (*(char *)(v22 + 47) < 0)
      {
        operator delete(*(void **)(v22 + 24));
        if ((*(char *)(v22 + 23) & 0x80000000) == 0) {
          goto LABEL_31;
        }
      }
      else if ((*(char *)(v22 + 23) & 0x80000000) == 0)
      {
        goto LABEL_31;
      }
      operator delete(*(void **)v22);
LABEL_31:
      operator delete();
    }
  }
  uint64_t v23 = *((void *)a2 + 14);
  if (v23)
  {
    *((void *)a2 + 14) = 0;
    uint64_t v24 = *(void *)(a1 + 112);
    *(void *)(a1 + 112) = v23;
    if (v24) {
      goto LABEL_34;
    }
  }
  else
  {
    uint64_t v24 = *(void *)(a1 + 112);
    *(void *)(a1 + 112) = 0;
    if (v24)
    {
LABEL_34:
      uint64_t v25 = *(void **)(v24 + 8);
      if (v25)
      {
        *(void *)(v24 + 16) = v25;
        operator delete(v25);
      }
      operator delete();
    }
  }
  uint64_t v26 = *((void *)a2 + 15);
  if (v26)
  {
    *((void *)a2 + 15) = 0;
    uint64_t v27 = *(void *)(a1 + 120);
    *(void *)(a1 + 120) = v26;
    if (v27) {
      goto LABEL_39;
    }
  }
  else
  {
    uint64_t v27 = *(void *)(a1 + 120);
    *(void *)(a1 + 120) = 0;
    if (v27)
    {
LABEL_39:
      if (*(unsigned char *)(v27 + 24))
      {
        if (*(char *)(v27 + 23) < 0) {
          operator delete(*(void **)v27);
        }
        *(unsigned char *)(v27 + 24) = 0;
      }
      operator delete();
    }
  }
  uint64_t v28 = *((void *)a2 + 16);
  if (v28)
  {
    *((void *)a2 + 16) = 0;
    uint64_t v29 = *(void ****)(a1 + 128);
    *(void *)(a1 + 128) = v28;
    if (v29) {
      goto LABEL_46;
    }
  }
  else
  {
    uint64_t v29 = *(void ****)(a1 + 128);
    *(void *)(a1 + 128) = 0;
    if (v29)
    {
LABEL_46:
      if (*v29)
      {
        sub_5F80C0(v29);
        operator delete(*v29);
      }
      operator delete();
    }
  }
  *(_DWORD *)(a1 + 136) = *((_DWORD *)a2 + 34);
  return a1;
}

char *sub_9374D8()
{
  byte_25D4C0F = 1;
  word_25D4BF8 = 65;
  byte_25D4C27 = 1;
  word_25D4C10 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25D5360 = 0u;
  *(_OWORD *)&qword_25D5370 = 0u;
  dword_25D5380 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25D5360, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25D5360, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25D5360, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25D5360, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25D4C3F = 8;
  strcpy((char *)&qword_25D4C28, "any_mode");
  byte_25D4C57 = 7;
  strcpy((char *)&dword_25D4C40, "cycling");
  byte_25D4C6F = 7;
  strcpy((char *)&dword_25D4C58, "driving");
  byte_25D4C87 = 7;
  strcpy((char *)&dword_25D4C70, "walking");
  qword_25D4C90 = 0;
  qword_25D4C98 = 0;
  qword_25D4C88 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25D4C88 = (uint64_t)v0;
  qword_25D4C90 = (uint64_t)(v0 + 9);
  qword_25D4C98 = (uint64_t)(v0 + 9);
  qword_25D4CA0 = 0;
  qword_25D4CA8 = 0;
  unk_25D4CB0 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25D4CA8 = (uint64_t)(v1 + 9);
  unk_25D4CB0 = v1 + 9;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25D4CA0 = (uint64_t)v1;
  byte_25D4CCF = 6;
  strcpy((char *)&dword_25D4CB8, "{Mode}");
  byte_25D4CE7 = 11;
  strcpy((char *)&qword_25D4CD0, "{Direction}");
  byte_25D4CFF = 6;
  strcpy((char *)&dword_25D4CE8, "{Line}");
  byte_25D4D17 = 12;
  strcpy((char *)&qword_25D4D00, "{LineNumber}");
  strcpy(&byte_25D4D2F, "\n{Headsign1}");
  strcpy((char *)&qword_25D4D18, "{Headsign}");
  byte_25D4D47 = 11;
  byte_25D4D5F = 11;
  strcpy((char *)&qword_25D4D48, "{Headsign2}");
  byte_25D4D77 = 11;
  strcpy((char *)&qword_25D4D60, "{Headsign3}");
  byte_25D4D8F = 11;
  strcpy((char *)&qword_25D4D78, "{Headsign4}");
  byte_25D4DA7 = 11;
  strcpy((char *)&qword_25D4D90, "{Headsign5}");
  byte_25D4DBF = 6;
  strcpy((char *)&dword_25D4DA8, "{Stop}");
  byte_25D4DD7 = 14;
  strcpy((char *)&qword_25D4DC0, "{PreviousStop}");
  byte_25D4DEF = 8;
  strcpy((char *)&xmmword_25D4DD8, "{System}");
  byte_25D4E07 = 15;
  strcpy((char *)&qword_25D4DF0, "{VehicleNumber}");
  byte_25D4E1F = 17;
  strcpy((char *)&xmmword_25D4E08, "{AccessPointExit}");
  strcpy(&byte_25D4E37, "\n{nextBoardStation}");
  strcpy((char *)&qword_25D4E20, "{Platform}");
  byte_25D4E4F = 18;
  qword_25D4E50 = 0;
  unk_25D4E58 = 0;
  qword_25D4E60 = 0;
  byte_25D4E7F = 1;
  LOWORD(word_25D4E68) = 32;
  qword_25D4E80 = (uint64_t)operator new(0x20uLL);
  unk_25D4E88 = xmmword_20B8890;
  strcpy((char *)qword_25D4E80, "LeaveStop_Loc_Comma_Separator");
  byte_25D4EAF = 5;
  dword_25D4E98 = -1028144608;
  word_25D4E9C = 160;
  byte_25D4EC7 = 2;
  word_25D4EB0 = -24382;
  byte_25D4EB2 = 0;
  byte_25D4EDF = 4;
  dword_25D4EC8 = 548913696;
  byte_25D4ECC = 0;
  byte_25D4EF7 = 15;
  strcpy((char *)&qword_25D4EE0 + 7, "\xB7 {/s:s}");
  strcpy((char *)&qword_25D4EE0, "{s:s} ·");
  byte_25D4F0F = 6;
  strcpy((char *)&dword_25D4EF8, "NoType");
  byte_25D4F27 = 14;
  strcpy((char *)&qword_25D4F10, "{WalkDistance}");
  strcpy(&byte_25D4F3F, "\n{OneMinute}");
  strcpy((char *)&qword_25D4F28, "{WalkTime}");
  byte_25D4F57 = 11;
  byte_25D4F6F = 14;
  strcpy((char *)&qword_25D4F58, "{StepDuration}");
  byte_25D4F87 = 15;
  strcpy((char *)&qword_25D4F70, "{TripFrequency}");
  byte_25D4F9F = 11;
  strcpy((char *)&qword_25D4F88, "{BoardTime}");
  byte_25D4FB7 = 12;
  strcpy((char *)&qword_25D4FA0, "{AlightTime}");
  byte_25D4FCF = 21;
  strcpy((char *)&xmmword_25D4FB8, "{FutureTimestampList}");
  byte_25D4FE7 = 15;
  strcpy((char *)&qword_25D4FD0, "{DepartureTime}");
  byte_25D4FFF = 13;
  strcpy((char *)&qword_25D4FE8, "{ArrivalTime}");
  byte_25D5017 = 19;
  strcpy((char *)&xmmword_25D5000, "{TotalWalkDistance}");
  byte_25D502F = 14;
  strcpy((char *)&qword_25D5018, "{TripDuration}");
  byte_25D5047 = 11;
  strcpy((char *)&qword_25D5030, "{DayOfWeek}");
  byte_25D505F = 6;
  strcpy((char *)&dword_25D5048, "{Date}");
  byte_25D5077 = 16;
  strcpy((char *)&xmmword_25D5060, "{OutTheDoorTime}");
  __n128 result = (char *)operator new(0x20uLL);
  qword_25D5078 = (uint64_t)result;
  unk_25D5080 = xmmword_20B91A0;
  strcpy(result, "{FirstVehicleDepartureTime}");
  byte_25D50A7 = 18;
  strcpy(byte_25D5090, "{RouteArrivalTime}");
  strcpy(&byte_25D50BF, "\n{IC_Artwork}");
  strcpy((char *)&qword_25D50A8, "{BaseFare}");
  byte_25D50D7 = 12;
  byte_25D50EF = 11;
  strcpy((char *)&qword_25D50D8, "{RT_Symbol}");
  byte_25D5107 = 12;
  strcpy((char *)&qword_25D50F0, "{TotalPrice}");
  byte_25D511F = 13;
  strcpy((char *)&qword_25D5108, "{CheckInTime}");
  byte_25D5137 = 19;
  strcpy((char *)&xmmword_25D5120, "{LiveDepartureTime}");
  strcpy(&byte_25D514F, "\n{LegDuration}");
  strcpy((char *)&qword_25D5138, "{TimeList}");
  byte_25D5167 = 13;
  byte_25D517F = 15;
  strcpy((char *)&qword_25D5168, "{CountdownList}");
  byte_25D5197 = 3;
  dword_25D5180 = 8217723;
  strcpy(&byte_25D51AF, "\t{AccessPointArt}");
  strcpy((char *)&qword_25D5198, "{LineArt}");
  byte_25D51C7 = 16;
  byte_25D51DF = 11;
  strcpy((char *)&qword_25D51C8, "{SystemArt}");
  strcpy(&byte_25D51F7, "\n{ServiceBeginTime}");
  strcpy((char *)&qword_25D51E0, "{CardName}");
  byte_25D520F = 18;
  byte_25D5227 = 16;
  strcpy((char *)&xmmword_25D5210, "{ServiceEndTime}");
  byte_25D523F = 6;
  strcpy((char *)&dword_25D5228, "OnTime");
  byte_25D5257 = 6;
  strcpy((char *)&dword_25D5240, "Delays");
  byte_25D526F = 1;
  word_25D5258 = 115;
  byte_25D5287 = 2;
  strcpy((char *)&word_25D5270, "cs");
  byte_25D529F = 1;
  word_25D5288 = 112;
  byte_25D52B7 = 5;
  strcpy((char *)&dword_25D52A0, "_Line");
  byte_25D52CF = 7;
  strcpy((char *)&dword_25D52B8, "_System");
  strcpy(&byte_25D52E7, "\n_VehicleNumber");
  strcpy((char *)&qword_25D52D0, "_Direction");
  byte_25D52FF = 14;
  byte_25D5317 = 12;
  strcpy((char *)&qword_25D5300, "_To_Headsign");
  byte_25D532F = 16;
  strcpy((char *)&xmmword_25D5318, "_Toward_Headsign");
  strcpy(&byte_25D5347, "\t_LineNumber");
  strcpy((char *)&qword_25D5330, "_Headsign");
  byte_25D535F = 11;
  return result;
}

void sub_9380C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25D5370) {
    sub_20AC7B4((void **)qword_25D5370);
  }
  uint64_t v37 = (void *)xmmword_25D5360;
  *(void *)&xmmword_25D5360 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t *sub_938160(uint64_t *a1, void *a2)
{
  *a1 = sub_3758AC(a2);
  a1[1] = sub_3755E4(a2);
  a1[2] = sub_375500(a2);
  a1[3] = 0;
  return a1;
}

double sub_9381AC@<D0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      sub_9382E0(a1, v4, (unint64_t *)__p);
      sub_9392F0((uint64_t)a3, a3[1], (char *)__p[0], (char *)__p[1], 0x6DB6DB6DB6DB6DB7 * (((char *)__p[1] - (char *)__p[0]) >> 2));
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v4 += 144;
    }
    while (v4 != v5);
  }
  sub_9384C4(a3, (int16x8_t **)__p);
  char v7 = (void *)*a3;
  if (*a3)
  {
    a3[1] = (unint64_t)v7;
    operator delete(v7);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  double result = *(double *)__p;
  *(_OWORD *)a3 = *(_OWORD *)__p;
  a3[2] = v10;
  return result;
}

void sub_938290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double sub_9382E0@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = (uint64_t *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16) - v4;
  if (!v6) {
    sub_66748();
  }
  int v7 = *(_DWORD *)(v4 + 1088);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (!v7)
  {
    uint64_t v10 = 0;
    uint64_t v11 = v6 / 1096;
    uint64_t v12 = 2184;
    do
    {
      uint64_t v13 = *v5;
      uint64_t v14 = *v5 + v12;
      if (*(_DWORD *)(v14 - 1096)) {
        break;
      }
      uint64_t v15 = v10 + 1;
      char v16 = v10 + 1 < 0xE21A291C077975B9 * ((*(void *)(a2 + 16) - v13) >> 3) && *(_DWORD *)(v13 + v12) == 0;
      sub_93873C(a1, (_DWORD *)(v14 - 2184), v10 != 0, v16, (unint64_t *)__p);
      sub_9392F0((uint64_t)a3, a3[1], (char *)__p[0], (char *)__p[1], 0x6DB6DB6DB6DB6DB7 * (((char *)__p[1] - (char *)__p[0]) >> 2));
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v12 += 1096;
      uint64_t v10 = v15;
    }
    while (v11 != v15);
    sub_9384C4(a3, (int16x8_t **)__p);
    uint64_t v17 = (void *)*a3;
    if (*a3)
    {
      a3[1] = (unint64_t)v17;
      operator delete(v17);
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
    }
    double result = *(double *)__p;
    *(_OWORD *)a3 = *(_OWORD *)__p;
    a3[2] = v20;
  }
  return result;
}

void sub_938474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_9384C4(unint64_t *a1@<X1>, int16x8_t **a2@<X8>)
{
  unint64_t v4 = *a1;
  uint64_t v5 = (_OWORD *)a1[1];
  unint64_t v6 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * ((uint64_t)((uint64_t)v5 - v4) >> 2));
  if (v5 == (_OWORD *)v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v6;
  }
  sub_939598(v4, v5, v7, 1);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unint64_t v10 = *a1;
  unint64_t v11 = a1[1];
  if (*a1 != v11)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    do
    {
      while (1)
      {
        while (v13 != v12 && v12[-2].i32[1] == *(_DWORD *)v10 && v12[-2].u8[8] == *(unsigned __int8 *)(v10 + 4))
        {
          v8.i32[0] = *(_DWORD *)(v10 + 24);
          int16x8_t v8 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v8.i8);
          v9.i32[0] = v12[-1].i32[3];
          *(int8x8_t *)v8.i8 = vorr_s8((int8x8_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v9.i8), *(int8x8_t *)v8.i8);
          v12[-1].i32[3] = vmovn_s16(v8).u32[0];
          v9.i64[0] = *(uint64_t *)((char *)v12[-1].i64 + 4);
          *(int8x8_t *)v8.i8 = vorr_s8(*(int8x8_t *)v9.i8, *(int8x8_t *)(v10 + 16));
          *(uint64_t *)((char *)v12[-1].i64 + 4) = v8.i64[0];
          v10 += 28;
          if (v10 == v11) {
            return;
          }
        }
        unint64_t v14 = (unint64_t)a2[2];
        if ((unint64_t)v12 >= v14) {
          break;
        }
        int16x8_t v8 = *(int16x8_t *)v10;
        int16x8_t v9 = *(int16x8_t *)(v10 + 12);
        *(int16x8_t *)((char *)v12 + 12) = v9;
        *uint64_t v12 = v8;
        uint64_t v12 = (int16x8_t *)((char *)v12 + 28);
        a2[1] = v12;
        v10 += 28;
        if (v10 == v11) {
          return;
        }
      }
      unint64_t v15 = 0x6DB6DB6DB6DB6DB7 * (((char *)v12 - (char *)v13) >> 2) + 1;
      if (v15 > 0x924924924924924) {
        sub_2E00();
      }
      unint64_t v16 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v14 - (void)v13) >> 2);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x492492492492492) {
        unint64_t v17 = 0x924924924924924;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17)
      {
        if (v17 > 0x924924924924924) {
          sub_188D718();
        }
        uint64_t v18 = (char *)operator new(28 * v17);
      }
      else
      {
        uint64_t v18 = 0;
      }
      int16x8_t v8 = *(int16x8_t *)v10;
      int16x8_t v9 = *(int16x8_t *)(v10 + 12);
      uint64_t v19 = (int16x8_t *)&v18[4 * (((char *)v12 - (char *)v13) >> 2)];
      *(int16x8_t *)((char *)v19 + 12) = v9;
      *uint64_t v19 = v8;
      if (v13 == v12)
      {
        uint64_t v21 = (int16x8_t *)&v18[4 * (((char *)v12 - (char *)v13) >> 2)];
        uint64_t v12 = (int16x8_t *)((char *)v19 + 28);
        *a2 = v19;
        a2[1] = (int16x8_t *)((char *)v19 + 28);
        a2[2] = (int16x8_t *)&v18[28 * v17];
        if (!v13) {
          goto LABEL_28;
        }
      }
      else
      {
        unint64_t v20 = &v18[4 * (((char *)v12 - (char *)v13) >> 2)];
        do
        {
          int16x8_t v8 = *(int16x8_t *)((char *)v12 - 28);
          int16x8_t v9 = v12[-1];
          uint64_t v21 = (int16x8_t *)(v20 - 28);
          *((int16x8_t *)v20 - 1) = v9;
          *(int16x8_t *)(v20 - 28) = v8;
          uint64_t v12 = (int16x8_t *)((char *)v12 - 28);
          v20 -= 28;
        }
        while (v12 != v13);
        uint64_t v12 = (int16x8_t *)((char *)v19 + 28);
        *a2 = v21;
        a2[1] = (int16x8_t *)((char *)v19 + 28);
        a2[2] = (int16x8_t *)&v18[28 * v17];
        if (!v13) {
          goto LABEL_28;
        }
      }
      operator delete(v13);
LABEL_28:
      uint64_t v13 = v21;
      a2[1] = v12;
      v10 += 28;
    }
    while (v10 != v11);
  }
}

void sub_93871C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_93873C(uint64_t *a1@<X0>, _DWORD *a2@<X1>, char a3@<W2>, char a4@<W3>, unint64_t *a5@<X8>)
{
  if (*(void *)(*a1 + 11688))
  {
    int16x8_t v8 = a1;
    sub_725D0((uint64_t)v79);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    int16x8_t v9 = (int *)sub_369F8C(v8[1], a2[2] | ((unint64_t)a2[1] << 32), 0, "trip");
    unint64_t v70 = *(void *)((char *)v9 + *(unsigned __int16 *)((char *)v9 - *v9 + 6));
    unsigned int v10 = a2[4];
    if (v10 <= a2[5])
    {
      uint64_t v71 = v8;
      do
      {
        uint64_t v12 = a2[1];
        uint64_t v13 = sub_369B60(v8[1], a2[2] | (unint64_t)(v12 << 32), 0);
        unint64_t v14 = &v13[-*(int *)v13];
        if (*(unsigned __int16 *)v14 < 5u)
        {
          uint64_t v15 = 0;
        }
        else
        {
          uint64_t v15 = *((unsigned __int16 *)v14 + 2);
          if (*((_WORD *)v14 + 2)) {
            v15 += (uint64_t)&v13[*(unsigned int *)&v13[v15]];
          }
        }
        unint64_t v16 = (int *)(v15 + 4 * v12 + 4 + *(unsigned int *)(v15 + 4 * v12 + 4));
        unint64_t v17 = (unsigned __int16 *)((char *)v16 - *v16);
        if (*v17 >= 0xDu && (uint64_t v18 = v17[6]) != 0) {
          int v19 = *(int *)((char *)v16 + v18);
        }
        else {
          int v19 = -1;
        }
        unint64_t v20 = *(void *)&v13[24 * v19
                            + 4
                            + 24 * v10
                            + *((unsigned __int16 *)v14 + 3)
                            + *(unsigned int *)&v13[*((unsigned __int16 *)v14 + 3)]];
        uint64_t v21 = v8[1];
        uint64_t v22 = a2[1];
        unint64_t v23 = a2[2] | (unint64_t)(v22 << 32);
        if (v10 >= a2[5])
        {
          uint64_t v27 = sub_369B60(v21, v23, 0);
          uint64_t v28 = &v27[-*(int *)v27];
          if (*(unsigned __int16 *)v28 < 5u)
          {
            uint64_t v29 = 0;
          }
          else
          {
            uint64_t v29 = *((unsigned __int16 *)v28 + 2);
            if (*((_WORD *)v28 + 2)) {
              v29 += (uint64_t)&v27[*(unsigned int *)&v27[v29]];
            }
          }
          uint64_t v35 = (int *)(v29 + 4 * v22 + 4 + *(unsigned int *)(v29 + 4 * v22 + 4));
          uint64_t v36 = (unsigned __int16 *)((char *)v35 - *v35);
          if (*v36 < 0xDu)
          {
            int v38 = -1;
            uint64_t v33 = v71;
          }
          else
          {
            uint64_t v37 = v36[6];
            uint64_t v33 = v71;
            if (v37) {
              int v38 = *(int *)((char *)v35 + v37);
            }
            else {
              int v38 = -1;
            }
          }
          LODWORD(v40) = 0;
          uint64_t v39 = *(void *)&v27[24 * v10
                              - 20
                              + 24 * v38
                              + *((unsigned __int16 *)v28 + 3)
                              + *(unsigned int *)&v27[*((unsigned __int16 *)v28 + 3)]];
          unint64_t v42 = v39 & 0xFFFFFFFF00000000;
          unint64_t v41 = 0xFFFFFFFF00000000;
        }
        else
        {
          uint64_t v24 = sub_369B60(v21, v23, 0);
          uint64_t v25 = &v24[-*(int *)v24];
          if (*(unsigned __int16 *)v25 < 5u)
          {
            uint64_t v26 = 0;
          }
          else
          {
            uint64_t v26 = *((unsigned __int16 *)v25 + 2);
            if (*((_WORD *)v25 + 2)) {
              v26 += (uint64_t)&v24[*(unsigned int *)&v24[v26]];
            }
          }
          uint64_t v30 = (int *)(v26 + 4 * v22 + 4 + *(unsigned int *)(v26 + 4 * v22 + 4));
          uint64_t v31 = (unsigned __int16 *)((char *)v30 - *v30);
          if (*v31 < 0xDu)
          {
            int v34 = -1;
            uint64_t v33 = v71;
          }
          else
          {
            uint64_t v32 = v31[6];
            uint64_t v33 = v71;
            if (v32) {
              int v34 = *(int *)((char *)v30 + v32);
            }
            else {
              int v34 = -1;
            }
          }
          LODWORD(v39) = 0;
          uint64_t v40 = *(void *)&v24[24 * v10
                              + 28
                              + 24 * v34
                              + *((unsigned __int16 *)v25 + 3)
                              + *(unsigned int *)&v24[*((unsigned __int16 *)v25 + 3)]];
          unint64_t v41 = v40 & 0xFFFFFFFF00000000;
          unint64_t v42 = 0xFFFFFFFF00000000;
        }
        uint64_t v43 = *v33;
        unsigned int v44 = a2[6];
        int v45 = a2[9];
        *(void *)&long long v73 = v42 | v39;
        *((void *)&v73 + 1) = v20;
        v75[0] = v20;
        v75[1] = v41 | v40;
        uint64_t v77 = 0;
        uint64_t v78 = 0;
        long long __p = 0;
        sub_912588(v43, v20, 0, v44, v45, 1, v70, (uint64_t)&v73, (uint64_t)v75, (char **)&__p);
        uint64_t v47 = (char *)__p;
        int v46 = v77;
        if (__p != v77)
        {
          int v48 = a2[4];
          do
          {
            if (v10 == v48 && (a3 & 1) == 0 && v47[24]
              || (int v55 = a2[5], v10 == v55) && (a4 & 1) == 0 && v47[23]
              || (v10 != v55 ? (BOOL v56 = v47[25] == 0) : (BOOL v56 = 1), !v56))
            {
              uint64_t v58 = (_OWORD *)a5[1];
              unint64_t v57 = a5[2];
              if ((unint64_t)v58 < v57)
              {
                long long v49 = *(_OWORD *)v47;
                *(_OWORD *)((char *)v58 + 12) = *(_OWORD *)(v47 + 12);
                *uint64_t v58 = v49;
                size_t v50 = (char *)v58 + 28;
              }
              else
              {
                uint64_t v59 = (_OWORD *)*a5;
                uint64_t v60 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)((uint64_t)v58 - *a5) >> 2);
                unint64_t v61 = v60 + 1;
                if ((unint64_t)(v60 + 1) > 0x924924924924924) {
                  sub_2E00();
                }
                unint64_t v62 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v57 - (void)v59) >> 2);
                if (2 * v62 > v61) {
                  unint64_t v61 = 2 * v62;
                }
                if (v62 >= 0x492492492492492) {
                  unint64_t v63 = 0x924924924924924;
                }
                else {
                  unint64_t v63 = v61;
                }
                if (v63)
                {
                  if (v63 > 0x924924924924924) {
                    sub_188D718();
                  }
                  uint64_t v64 = (char *)operator new(28 * v63);
                }
                else
                {
                  uint64_t v64 = 0;
                }
                long long v65 = *(_OWORD *)v47;
                uint64_t v66 = &v64[28 * v60];
                *(_OWORD *)(v66 + 12) = *(_OWORD *)(v47 + 12);
                *(_OWORD *)uint64_t v66 = v65;
                long long v67 = v66;
                if (v58 != v59)
                {
                  do
                  {
                    long long v68 = *(_OWORD *)((char *)v58 - 28);
                    *(v67 - 1) = *(v58 - 1);
                    *(_OWORD *)((char *)v67 - 28) = v68;
                    long long v67 = (_OWORD *)((char *)v67 - 28);
                    uint64_t v58 = (_OWORD *)((char *)v58 - 28);
                  }
                  while (v58 != v59);
                  uint64_t v58 = v59;
                }
                long long v69 = &v64[28 * v63];
                size_t v50 = v66 + 28;
                *a5 = (unint64_t)v67;
                a5[1] = (unint64_t)(v66 + 28);
                a5[2] = (unint64_t)v69;
                if (v58) {
                  operator delete(v58);
                }
              }
              a5[1] = (unint64_t)v50;
              int v48 = a2[4];
              BOOL v52 = v10 == v48 && *(v50 - 4) != 0;
              *(v50 - 4) = v52;
              BOOL v54 = v10 == a2[5] && *(v50 - 5) != 0;
              *(v50 - 5) = v54;
            }
            v47 += 28;
          }
          while (v47 != v46);
          uint64_t v47 = (char *)__p;
        }
        int16x8_t v8 = v71;
        if (v47)
        {
          uint64_t v77 = v47;
          operator delete(v47);
        }
        ++v10;
      }
      while (v10 <= a2[5]);
    }
    sub_911E78(*v8, v70, 0, a2[6], a2[9], &__p);
    sub_9392F0((uint64_t)a5, a5[1], (char *)__p, v77, 0x6DB6DB6DB6DB6DB7 * ((v77 - (unsigned char *)__p) >> 2));
    sub_9384C4(a5, (int16x8_t **)&v73);
    unint64_t v11 = (void *)*a5;
    if (*a5)
    {
      a5[1] = (unint64_t)v11;
      operator delete(v11);
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
    }
    *(_OWORD *)a5 = v73;
    a5[2] = v74;
    *((double *)v8 + 3) = sub_72688((uint64_t)v79) + *((double *)v8 + 3);
    if (__p)
    {
      uint64_t v77 = (char *)__p;
      operator delete(__p);
    }
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
}

void sub_938D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v24 = *(void **)v22;
    if (!*(void *)v22) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v24 = *(void **)v22;
    if (!*(void *)v22) {
      goto LABEL_3;
    }
  }
  *(void *)(v22 + 8) = v24;
  operator delete(v24);
  _Unwind_Resume(exception_object);
}

void sub_938DA0(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(void *)(*(void *)a1 + 11688))
  {
    sub_725D0((uint64_t)v12);
    int v6 = a2[8];
    sub_938F0C((uint64_t *)a1, a2 + 1, a2[7], v6, (char **)a3);
    sub_938F0C((uint64_t *)a1, a2 + 4, a2[7], v6, (char **)&__p);
    sub_9392F0(a3, *(void *)(a3 + 8), (char *)__p, v11, 0x6DB6DB6DB6DB6DB7 * ((v11 - (unsigned char *)__p) >> 2));
    sub_9384C4((unint64_t *)a3, (int16x8_t **)&v8);
    uint64_t v7 = *(char **)a3;
    if (*(void *)a3)
    {
      *(void *)(a3 + 8) = v7;
      operator delete(v7);
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
    }
    *(_OWORD *)a3 = v8;
    *(void *)(a3 + 16) = v9;
    *(double *)(a1 + 24) = sub_72688((uint64_t)v12) + *(double *)(a1 + 24);
    if (__p)
    {
      unint64_t v11 = (char *)__p;
      operator delete(__p);
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
}

void sub_938EBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
  {
    operator delete(__p);
    unint64_t v16 = *(void **)v14;
    if (!*(void *)v14) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unint64_t v16 = *(void **)v14;
    if (!*(void *)v14) {
      goto LABEL_3;
    }
  }
  *(void *)(v14 + 8) = v16;
  operator delete(v16);
  _Unwind_Resume(exception_object);
}

void sub_938F0C(uint64_t *a1@<X0>, _DWORD *a2@<X1>, unsigned int a3@<W2>, int a4@<W3>, char **a5@<X8>)
{
  if (*a2)
  {
    if (*a2 == 3)
    {
      uint64_t v6 = *a1;
      uint64_t v7 = a2[2];
      unint64_t v8 = v7 | ((unint64_t)a2[1] << 32);
      a5[1] = 0;
      a5[2] = 0;
      *a5 = 0;
      if (v7) {
        BOOL v9 = v8 > 0xFFFFFFFEFFFFFFFFLL;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9) {
        sub_938FFC(v6, v8, 0, a3, a4, a5);
      }
    }
    else
    {
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
    }
  }
  else
  {
    uint64_t v10 = *a1;
    unint64_t v11 = a2[2] | ((unint64_t)a2[1] << 32);
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    *(void *)&long long v12 = 0xFFFFFFFF00000000;
    *((void *)&v12 + 1) = 0xFFFFFFFF00000000;
    long long v13 = v12;
    long long v14 = v12;
    sub_912588(v10, v11, 0, a3, a4, 1, 0xFFFFFFFF00000000, (uint64_t)&v14, (uint64_t)&v13, a5);
  }
}

void sub_938FDC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_938FFC(uint64_t a1, unint64_t a2, int a3, uint64_t a4, int a5, void *a6)
{
  BOOL v10 = HIDWORD(a2) == 0xFFFFFFFF || a2 == 0;
  uint64_t v11 = __ROR8__(a2, 32);
  if (v10) {
    uint64_t v11 = 0xFFFFFFFFLL;
  }
  uint64_t v37 = __ROR8__(v11, 32);
  long long v12 = sub_36F918((void *)(*(void *)(a1 + 11688) + 64), &v37);
  if (v12)
  {
    long long v13 = v12 + 3;
  }
  else if (atomic_load_explicit((atomic_uchar *volatile)&qword_24F72E8, memory_order_acquire))
  {
    long long v13 = &qword_24F72D0;
  }
  else
  {
    long long v13 = &qword_24F72D0;
    if (__cxa_guard_acquire(&qword_24F72E8))
    {
      qword_24F72D0 = 0;
      *(void *)algn_24F72D8 = 0;
      qword_24F72E0 = 0;
      __cxa_guard_release(&qword_24F72E8);
    }
  }
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  if (*v13 != v15)
  {
    int v36 = a3;
    do
    {
      int v17 = *(_DWORD *)(v14 + 8);
      if (v17 > a5) {
        goto LABEL_14;
      }
      int v18 = *(_DWORD *)(v14 + 12);
      if (v18 < (int)a4) {
        goto LABEL_14;
      }
      char v19 = *(unsigned char *)(v14 + 4);
      if (a3)
      {
        if (!*(unsigned char *)(v14 + 4)) {
          goto LABEL_14;
        }
      }
      int v20 = *(_DWORD *)v14;
      BOOL v21 = v18 == 0x7FFFFFFF || v17 == 0x7FFFFFFF;
      if (v21 || v20 == -1) {
        goto LABEL_14;
      }
      uint64_t v24 = (char *)a6[1];
      unint64_t v23 = a6[2];
      if ((unint64_t)v24 < v23)
      {
        *(_DWORD *)uint64_t v24 = v20;
        v24[4] = v19;
        *((_DWORD *)v24 + 2) = v17;
        *((_DWORD *)v24 + 3) = v18;
        v24[16] = 1;
        *(void *)(v24 + 17) = 0;
        *(_WORD *)(v24 + 25) = 0;
        unint64_t v16 = v24 + 28;
        v24[27] = 1;
      }
      else
      {
        uint64_t v34 = a4;
        uint64_t v35 = (char **)a6;
        uint64_t v25 = (char *)*a6;
        uint64_t v26 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v24[-*a6] >> 2);
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) > 0x924924924924924) {
          sub_2E00();
        }
        unint64_t v28 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v23 - (void)v25) >> 2);
        if (2 * v28 > v27) {
          unint64_t v27 = 2 * v28;
        }
        if (v28 >= 0x492492492492492) {
          unint64_t v27 = 0x924924924924924;
        }
        unint64_t v33 = v27;
        if (v27)
        {
          if (v27 > 0x924924924924924) {
            sub_188D718();
          }
          uint64_t v29 = (char *)operator new(28 * v27);
        }
        else
        {
          uint64_t v29 = 0;
        }
        uint64_t v30 = &v29[28 * v26];
        *(_DWORD *)uint64_t v30 = v20;
        v30[4] = v19;
        *((_DWORD *)v30 + 2) = v17;
        *((_DWORD *)v30 + 3) = v18;
        v30[16] = 1;
        *(void *)(v30 + 17) = 0;
        *(_WORD *)(v30 + 25) = 0;
        v30[27] = 1;
        uint64_t v31 = v30;
        if (v24 == v25)
        {
          a4 = v34;
          a6 = v35;
          unint64_t v16 = v30 + 28;
          *uint64_t v35 = v30;
          v35[1] = v30 + 28;
          v35[2] = &v29[28 * v33];
          if (!v24) {
            goto LABEL_13;
          }
        }
        else
        {
          a6 = v35;
          do
          {
            long long v32 = *(_OWORD *)(v24 - 28);
            *((_OWORD *)v31 - 1) = *((_OWORD *)v24 - 1);
            *(_OWORD *)(v31 - 28) = v32;
            v31 -= 28;
            v24 -= 28;
          }
          while (v24 != v25);
          uint64_t v24 = *v35;
          unint64_t v16 = v30 + 28;
          *uint64_t v35 = v31;
          v35[1] = v30 + 28;
          v35[2] = &v29[28 * v33];
          a4 = v34;
          if (!v24) {
            goto LABEL_13;
          }
        }
        operator delete(v24);
      }
LABEL_13:
      a6[1] = v16;
      a3 = v36;
LABEL_14:
      v14 += 16;
    }
    while (v14 != v15);
  }
}

char *sub_9392F0(uint64_t a1, uint64_t a2, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = *(char **)a1;
  uint64_t v6 = (a2 - *(void *)a1) / 28;
  uint64_t v7 = (char *)(*(void *)a1 + 28 * v6);
  if (a5 < 1) {
    return v7;
  }
  BOOL v9 = __src;
  long long v12 = *(long long **)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  if (0x6DB6DB6DB6DB6DB7 * ((v11 - (uint64_t)v12) >> 2) < a5)
  {
    unint64_t v13 = a5 + 0x6DB6DB6DB6DB6DB7 * (((char *)v12 - v5) >> 2);
    if (v13 > 0x924924924924924) {
      sub_2E00();
    }
    unint64_t v14 = 0x6DB6DB6DB6DB6DB7 * ((v11 - (uint64_t)v5) >> 2);
    uint64_t v15 = 2 * v14;
    if (2 * v14 <= v13) {
      uint64_t v15 = v13;
    }
    if (v14 >= 0x492492492492492) {
      unint64_t v16 = 0x924924924924924;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16)
    {
      if (v16 > 0x924924924924924) {
        sub_188D718();
      }
      int v17 = (char *)operator new(28 * v16);
    }
    else
    {
      int v17 = 0;
    }
    uint64_t v25 = &v17[28 * v6];
    uint64_t v26 = 28 * a5;
    unint64_t v27 = &v25[28 * a5];
    unint64_t v28 = v25;
    do
    {
      long long v29 = *(_OWORD *)v9;
      *(_OWORD *)((char *)v28 + 12) = *(_OWORD *)(v9 + 12);
      *unint64_t v28 = v29;
      unint64_t v28 = (_OWORD *)((char *)v28 + 28);
      v9 += 28;
      v26 -= 28;
    }
    while (v26);
    uint64_t v30 = 28 * v16;
    uint64_t v31 = *(char **)a1;
    long long v32 = v25;
    if (*(char **)a1 != v7)
    {
      unint64_t v33 = v7;
      long long v32 = v25;
      do
      {
        long long v34 = *(_OWORD *)(v33 - 28);
        *((_OWORD *)v32 - 1) = *((_OWORD *)v33 - 1);
        *(_OWORD *)(v32 - 28) = v34;
        v32 -= 28;
        v33 -= 28;
      }
      while (v33 != v31);
      long long v12 = *(long long **)(a1 + 8);
    }
    uint64_t v35 = &v17[v30];
    if (v12 != (long long *)v7) {
      memmove(v27, v7, (char *)v12 - v7);
    }
    int v36 = *(char **)a1;
    *(void *)a1 = v32;
    *(void *)(a1 + 8) = &v27[(char *)v12 - v7];
    *(void *)(a1 + 16) = v35;
    if (v36) {
      operator delete(v36);
    }
    return v25;
  }
  if (0x6DB6DB6DB6DB6DB7 * (((char *)v12 - v7) >> 2) >= a5)
  {
    int v18 = &__src[28 * a5];
    int v20 = *(_OWORD **)(a1 + 8);
LABEL_18:
    BOOL v21 = &v7[28 * a5];
    uint64_t v22 = (_OWORD *)((char *)v20 - 28 * a5);
    unint64_t v23 = v20;
    if (v22 < v12)
    {
      unint64_t v23 = v20;
      do
      {
        long long v24 = *v22;
        *(_OWORD *)((char *)v23 + 12) = *(long long *)((char *)v22 + 12);
        *unint64_t v23 = v24;
        unint64_t v23 = (_OWORD *)((char *)v23 + 28);
        uint64_t v22 = (long long *)((char *)v22 + 28);
      }
      while (v22 < v12);
    }
    *(void *)(a1 + 8) = v23;
    if (v20 != (_OWORD *)v21) {
      memmove(&v7[28 * a5], v7, (char *)v20 - v21);
    }
    if (v18 != v9) {
      memmove(v7, v9, v18 - v9);
    }
    return v7;
  }
  int v18 = &__src[4 * (((char *)v12 - v7) >> 2)];
  int64_t v19 = a4 - v18;
  if (a4 != v18) {
    memmove(*(void **)(a1 + 8), &__src[4 * (((char *)v12 - v7) >> 2)], a4 - v18);
  }
  int v20 = (long long *)((char *)v12 + v19);
  *(void *)(a1 + 8) = (char *)v12 + v19;
  if ((char *)v12 - v7 >= 1) {
    goto LABEL_18;
  }
  return v7;
}

void sub_939598(unint64_t a1, _OWORD *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)((uint64_t)a2 - v10) >> 2);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v66 = (_OWORD *)((char *)a2 - 28);
                unsigned int v67 = *((_DWORD *)a2 - 7);
                if (v67 < *(_DWORD *)v10
                  || (*(_DWORD *)v10 >= v67
                    ? (BOOL v68 = *((unsigned __int8 *)a2 - 24) >= *(unsigned __int8 *)(v10 + 4))
                    : (BOOL v68 = 1),
                      !v68))
                {
                  *(_OWORD *)&v149[12] = *(_OWORD *)(v10 + 12);
                  *(_OWORD *)std::string v149 = *(_OWORD *)v10;
                  long long v69 = *v66;
                  *(_OWORD *)(v10 + 12) = *(a2 - 1);
                  *(_OWORD *)unint64_t v10 = v69;
                  *(a2 - 1) = *(_OWORD *)&v149[12];
                  *uint64_t v66 = *(_OWORD *)v149;
                }
                break;
              case 3uLL:
                sub_93A494(v10, (int *)(v10 + 28), (uint64_t)a2 - 28);
                break;
              case 4uLL:
                unint64_t v70 = (_OWORD *)(v10 + 28);
                uint64_t v71 = (_OWORD *)(v10 + 56);
                sub_93A494(v10, (int *)(v10 + 28), v10 + 56);
                int v72 = (_OWORD *)((char *)a2 - 28);
                unsigned int v73 = *((_DWORD *)a2 - 7);
                unsigned int v74 = *(_DWORD *)(v10 + 56);
                if (v73 < v74
                  || (v74 >= v73
                    ? (BOOL v75 = *((unsigned __int8 *)a2 - 24) >= *(unsigned __int8 *)(v10 + 60))
                    : (BOOL v75 = 1),
                      !v75))
                {
                  *(_OWORD *)long long v150 = *v71;
                  *(_OWORD *)&v150[12] = *(_OWORD *)(v10 + 68);
                  long long v76 = *v72;
                  *(_OWORD *)(v10 + 68) = *(a2 - 1);
                  *uint64_t v71 = v76;
                  *(a2 - 1) = *(_OWORD *)&v150[12];
                  *int v72 = *(_OWORD *)v150;
                  unsigned int v77 = *(_DWORD *)(v10 + 56);
                  unsigned int v78 = *(_DWORD *)(v10 + 28);
                  if (v77 < v78
                    || v78 >= v77 && *(unsigned __int8 *)(v10 + 60) < *(unsigned __int8 *)(v10 + 32))
                  {
                    *(_OWORD *)long long v151 = *v70;
                    *(_OWORD *)&v151[12] = *(_OWORD *)(v10 + 40);
                    *unint64_t v70 = *v71;
                    *(_OWORD *)(v10 + 40) = *(_OWORD *)(v10 + 68);
                    *uint64_t v71 = *(_OWORD *)v151;
                    *(_OWORD *)(v10 + 68) = *(_OWORD *)&v151[12];
                    unsigned int v79 = *(_DWORD *)(v10 + 28);
                    if (v79 < *(_DWORD *)v10
                      || *(_DWORD *)v10 >= v79
                      && *(unsigned __int8 *)(v10 + 32) < *(unsigned __int8 *)(v10 + 4))
                    {
                      *(_OWORD *)&v152[12] = *(_OWORD *)(v10 + 12);
                      *(_OWORD *)long long v152 = *(_OWORD *)v10;
                      *(_OWORD *)unint64_t v10 = *v70;
                      *(_OWORD *)(v10 + 12) = *(_OWORD *)(v10 + 40);
                      *unint64_t v70 = *(_OWORD *)v152;
                      *(_OWORD *)(v10 + 40) = *(_OWORD *)&v152[12];
                    }
                  }
                }
                break;
              case 5uLL:
                sub_93A1E4(v10, v10 + 28, v10 + 56, v10 + 84, (uint64_t)a2 - 28);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 671)
          {
            uint64_t v80 = (_OWORD *)(v10 + 28);
            BOOL v82 = (_OWORD *)v10 == a2 || v80 == a2;
            if (a4)
            {
              if (!v82)
              {
                uint64_t v83 = 0;
                uint64_t v84 = (_OWORD *)v10;
                do
                {
                  std::string::size_type v85 = v80;
                  unsigned int v86 = *((_DWORD *)v84 + 7);
                  unsigned int v87 = *((unsigned __int8 *)v84 + 32);
                  if (v86 < *(_DWORD *)v84
                    || (*(_DWORD *)v84 >= v86 ? (BOOL v88 = v87 >= *((unsigned __int8 *)v84 + 4)) : (BOOL v88 = 1), !v88))
                  {
                    *(_OWORD *)long long v153 = *(_OWORD *)((char *)v84 + 33);
                    *(void *)&v153[15] = *((void *)v84 + 6);
                    *std::string::size_type v85 = *v84;
                    *(_OWORD *)((char *)v85 + 12) = *(_OWORD *)((char *)v84 + 12);
                    unint64_t v89 = v10;
                    if (v84 != (_OWORD *)v10)
                    {
                      uint64_t v90 = v83;
                      while (1)
                      {
                        uint64_t v91 = (_OWORD *)(v10 + v90);
                        unsigned int v92 = *(_DWORD *)(v10 + v90 - 28);
                        if (v86 >= v92 && (v92 < v86 || v87 >= *((unsigned __int8 *)v91 - 24))) {
                          break;
                        }
                        *uint64_t v91 = *(_OWORD *)(v10 + v90 - 28);
                        *(_OWORD *)((char *)v91 + 12) = *(_OWORD *)(v10 + v90 - 16);
                        v90 -= 28;
                        if (!v90)
                        {
                          unint64_t v89 = v10;
                          goto LABEL_136;
                        }
                      }
                      unint64_t v89 = v10 + v90;
                    }
LABEL_136:
                    *(_DWORD *)unint64_t v89 = v86;
                    *(unsigned char *)(v89 + 4) = v87;
                    *(void *)(v89 + 20) = *(void *)&v153[15];
                    *(_OWORD *)(v89 + 5) = *(_OWORD *)v153;
                  }
                  uint64_t v80 = (_OWORD *)((char *)v85 + 28);
                  v83 += 28;
                  uint64_t v84 = v85;
                }
                while ((_OWORD *)((char *)v85 + 28) != a2);
              }
            }
            else if (!v82)
            {
              do
              {
                unint64_t v135 = (unint64_t)v80;
                unsigned int v136 = *(_DWORD *)(a1 + 28);
                unsigned int v137 = *(unsigned __int8 *)(a1 + 32);
                if (v136 < *(_DWORD *)a1
                  || (*(_DWORD *)a1 >= v136 ? (BOOL v138 = v137 >= *(unsigned __int8 *)(a1 + 4)) : (BOOL v138 = 1), !v138))
                {
                  *(_OWORD *)uint64_t v156 = *(_OWORD *)(a1 + 33);
                  *(void *)&v156[15] = *(void *)(a1 + 48);
                  do
                  {
                    do
                    {
                      unint64_t v139 = a1;
                      *(_OWORD *)(a1 + 28) = *(_OWORD *)a1;
                      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 12);
                      unsigned int v141 = *(_DWORD *)(a1 - 28);
                      a1 -= 28;
                      unsigned int v140 = v141;
                    }
                    while (v136 < v141);
                  }
                  while (v140 >= v136 && v137 < *(unsigned __int8 *)(v139 - 24));
                  *(_DWORD *)unint64_t v139 = v136;
                  *(unsigned char *)(v139 + 4) = v137;
                  *(void *)(v139 + 20) = *(void *)&v156[15];
                  *(_OWORD *)(v139 + 5) = *(_OWORD *)v156;
                }
                uint64_t v80 = (_OWORD *)(v135 + 28);
                a1 = v135;
              }
              while ((_OWORD *)(v135 + 28) != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((_OWORD *)v10 != a2)
            {
              int64_t v94 = (v12 - 2) >> 1;
              int64_t v95 = v94;
              do
              {
                int64_t v96 = v95;
                if (v94 >= v95)
                {
                  uint64_t v97 = (2 * v95) | 1;
                  unint64_t v98 = v10 + 28 * v97;
                  if (2 * v96 + 2 < (uint64_t)v12)
                  {
                    unsigned int v99 = *(_DWORD *)(v98 + 28);
                    if (*(_DWORD *)v98 < v99
                      || (v99 >= *(_DWORD *)v98
                        ? (BOOL v100 = *(unsigned __int8 *)(v98 + 4) >= *(unsigned __int8 *)(v98 + 32))
                        : (BOOL v100 = 1),
                          !v100))
                    {
                      v98 += 28;
                      uint64_t v97 = 2 * v96 + 2;
                    }
                  }
                  unint64_t v101 = v10 + 28 * v96;
                  unsigned int v102 = *(_DWORD *)v101;
                  if (*(_DWORD *)v98 >= *(_DWORD *)v101)
                  {
                    unsigned int v103 = *(unsigned __int8 *)(v101 + 4);
                    if (v102 < *(_DWORD *)v98 || *(unsigned __int8 *)(v98 + 4) >= v103)
                    {
                      *(void *)&v154[15] = *(void *)(v101 + 20);
                      *(_OWORD *)long long v154 = *(_OWORD *)(v101 + 5);
                      do
                      {
                        long long v105 = (_OWORD *)v101;
                        unint64_t v101 = v98;
                        long long v106 = *(_OWORD *)v98;
                        *(_OWORD *)((char *)v105 + 12) = *(_OWORD *)(v98 + 12);
                        _OWORD *v105 = v106;
                        if (v94 < v97) {
                          break;
                        }
                        uint64_t v107 = 2 * v97;
                        uint64_t v97 = (2 * v97) | 1;
                        unint64_t v98 = v10 + 28 * v97;
                        uint64_t v108 = v107 + 2;
                        if (v108 < (uint64_t)v12)
                        {
                          unsigned int v109 = *(_DWORD *)(v98 + 28);
                          if (*(_DWORD *)v98 < v109
                            || (v109 >= *(_DWORD *)v98
                              ? (BOOL v110 = *(unsigned __int8 *)(v98 + 4) >= *(unsigned __int8 *)(v98 + 32))
                              : (BOOL v110 = 1),
                                !v110))
                          {
                            v98 += 28;
                            uint64_t v97 = v108;
                          }
                        }
                        if (*(_DWORD *)v98 < v102) {
                          break;
                        }
                      }
                      while (v102 < *(_DWORD *)v98 || *(unsigned __int8 *)(v98 + 4) >= v103);
                      *(_DWORD *)unint64_t v101 = v102;
                      *(unsigned char *)(v101 + 4) = v103;
                      *(void *)(v101 + 20) = *(void *)&v154[15];
                      *(_OWORD *)(v101 + 5) = *(_OWORD *)v154;
                    }
                  }
                }
                int64_t v95 = v96 - 1;
              }
              while (v96);
              int64_t v112 = v11 / 0x1CuLL;
              do
              {
                uint64_t v114 = 0;
                *(_OWORD *)&v155[12] = *(_OWORD *)(v10 + 12);
                *(_OWORD *)long long v155 = *(_OWORD *)v10;
                unint64_t v115 = v10;
                do
                {
                  uint64_t v117 = (_OWORD *)v115;
                  v115 += 28 * v114 + 28;
                  uint64_t v118 = 2 * v114;
                  uint64_t v114 = (2 * v114) | 1;
                  int64_t v119 = v118 + 2;
                  if (v119 < v112)
                  {
                    unsigned int v120 = *(_DWORD *)(v115 + 28);
                    if (*(_DWORD *)v115 < v120
                      || (v120 >= *(_DWORD *)v115
                        ? (BOOL v121 = *(unsigned __int8 *)(v115 + 4) >= *(unsigned __int8 *)(v115 + 32))
                        : (BOOL v121 = 1),
                          !v121))
                    {
                      v115 += 28;
                      uint64_t v114 = v119;
                    }
                  }
                  long long v116 = *(_OWORD *)v115;
                  *(_OWORD *)((char *)v117 + 12) = *(_OWORD *)(v115 + 12);
                  *uint64_t v117 = v116;
                }
                while (v114 <= (uint64_t)((unint64_t)(v112 - 2) >> 1));
                a2 = (_OWORD *)((char *)a2 - 28);
                if ((_OWORD *)v115 == a2)
                {
                  *(_OWORD *)(v115 + 12) = *(_OWORD *)&v155[12];
                  *(_OWORD *)unint64_t v115 = *(_OWORD *)v155;
                }
                else
                {
                  long long v122 = *a2;
                  *(_OWORD *)(v115 + 12) = *(_OWORD *)((char *)a2 + 12);
                  *(_OWORD *)unint64_t v115 = v122;
                  *(_OWORD *)((char *)a2 + 12) = *(_OWORD *)&v155[12];
                  *a2 = *(_OWORD *)v155;
                  uint64_t v123 = v115 - v10 + 28;
                  if (v123 >= 29)
                  {
                    unint64_t v124 = v123 / 0x1CuLL - 2;
                    unint64_t v125 = v124 >> 1;
                    unint64_t v126 = v10 + 28 * (v124 >> 1);
                    unsigned int v127 = *(_DWORD *)v115;
                    unsigned int v128 = *(unsigned __int8 *)(v115 + 4);
                    if (*(_DWORD *)v126 < *(_DWORD *)v115
                      || (v127 >= *(_DWORD *)v126 ? (BOOL v129 = *(unsigned __int8 *)(v126 + 4) >= v128) : (BOOL v129 = 1), !v129))
                    {
                      *(void *)&v145[15] = *(void *)(v115 + 20);
                      *(_OWORD *)uint64_t v145 = *(_OWORD *)(v115 + 5);
                      long long v130 = *(_OWORD *)v126;
                      *(_OWORD *)(v115 + 12) = *(_OWORD *)(v126 + 12);
                      *(_OWORD *)unint64_t v115 = v130;
                      if (v124 >= 2)
                      {
                        while (1)
                        {
                          unint64_t v132 = v125 - 1;
                          unint64_t v125 = (v125 - 1) >> 1;
                          unint64_t v133 = v10 + 28 * v125;
                          if (*(_DWORD *)v133 >= v127
                            && (v127 < *(_DWORD *)v133 || *(unsigned __int8 *)(v133 + 4) >= v128))
                          {
                            break;
                          }
                          long long v131 = *(_OWORD *)v133;
                          *(_OWORD *)(v126 + 12) = *(_OWORD *)(v133 + 12);
                          *(_OWORD *)unint64_t v126 = v131;
                          unint64_t v126 = v10 + 28 * v125;
                          if (v132 <= 1) {
                            goto LABEL_218;
                          }
                        }
                      }
                      unint64_t v133 = v126;
LABEL_218:
                      *(_DWORD *)unint64_t v133 = v127;
                      *(unsigned char *)(v133 + 4) = v128;
                      *(void *)(v133 + 20) = *(void *)&v145[15];
                      *(_OWORD *)(v133 + 5) = *(_OWORD *)v145;
                    }
                  }
                }
              }
              while (v112-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 28 * (v12 >> 1);
          if ((unint64_t)v11 >= 0xE01) {
            break;
          }
          sub_93A494(a1 + 28 * (v12 >> 1), (int *)a1, (uint64_t)a2 - 28);
          --a3;
          unsigned int v19 = *(_DWORD *)a1;
          if (a4) {
            goto LABEL_14;
          }
LABEL_11:
          unsigned int v20 = *(_DWORD *)(a1 - 28);
          if (v20 < v19) {
            goto LABEL_14;
          }
          unsigned int v21 = *(unsigned __int8 *)(a1 + 4);
          if (v19 >= v20 && *(unsigned __int8 *)(a1 - 24) < v21) {
            goto LABEL_14;
          }
          *(void *)&v144[15] = *(void *)(a1 + 20);
          *(_OWORD *)std::string v144 = *(_OWORD *)(a1 + 5);
          unsigned int v46 = *((_DWORD *)a2 - 7);
          if (v19 >= v46 && (v46 < v19 || v21 >= *((unsigned __int8 *)a2 - 24)))
          {
            unint64_t v62 = a1 + 28;
            do
            {
              unint64_t v10 = v62;
              if (v62 >= (unint64_t)a2) {
                break;
              }
              unsigned int v63 = *(_DWORD *)v62;
              if (v19 < *(_DWORD *)v62) {
                break;
              }
              unsigned int v64 = *(unsigned __int8 *)(v62 + 4);
              v62 += 28;
            }
            while (v63 < v19 || v21 >= v64);
          }
          else
          {
            unint64_t v47 = a1 + 28;
            do
            {
              unint64_t v10 = v47;
              unsigned int v48 = *(_DWORD *)v47;
              if (v19 < *(_DWORD *)v47) {
                break;
              }
              unsigned int v49 = *(unsigned __int8 *)(v47 + 4);
              v47 += 28;
            }
            while (v48 < v19 || v21 >= v49);
          }
          uint64_t i = (char *)a2;
          if (v10 < (unint64_t)a2)
          {
            for (uint64_t i = (char *)a2 - 28; v19 < v46 || v46 >= v19 && v21 < i[4]; i -= 28)
            {
              unsigned int v52 = *((_DWORD *)i - 7);
              unsigned int v46 = v52;
            }
          }
          while (v10 < (unint64_t)i)
          {
            *(_OWORD *)&v148[12] = *(_OWORD *)(v10 + 12);
            *(_OWORD *)uint64_t v148 = *(_OWORD *)v10;
            long long v53 = *(_OWORD *)i;
            *(_OWORD *)(v10 + 12) = *(_OWORD *)(i + 12);
            *(_OWORD *)unint64_t v10 = v53;
            *(_OWORD *)(i + 12) = *(_OWORD *)&v148[12];
            *(_OWORD *)uint64_t i = *(_OWORD *)v148;
            unint64_t v54 = v10 + 28;
            do
            {
              unint64_t v10 = v54;
              unsigned int v55 = *(_DWORD *)v54;
              if (v19 < *(_DWORD *)v54) {
                break;
              }
              unsigned int v56 = *(unsigned __int8 *)(v54 + 4);
              v54 += 28;
            }
            while (v55 < v19 || v21 >= v56);
            do
            {
              do
              {
                unsigned int v59 = *((_DWORD *)i - 7);
                i -= 28;
                unsigned int v58 = v59;
              }
              while (v19 < v59);
            }
            while (v58 >= v19 && v21 < i[4]);
          }
          BOOL v4 = v10 - 28 >= a1;
          BOOL v5 = v10 - 28 == a1;
          if (v10 - 28 != a1)
          {
            long long v61 = *(_OWORD *)(v10 - 28);
            *(_OWORD *)(a1 + 12) = *(_OWORD *)(v10 - 16);
            *(_OWORD *)a1 = v61;
          }
          a4 = 0;
          *(_DWORD *)(v10 - 28) = v19;
          *(unsigned char *)(v10 - 24) = v21;
          *(void *)(v10 - 8) = *(void *)&v144[15];
          *(_OWORD *)(v10 - 23) = *(_OWORD *)v144;
        }
        sub_93A494(a1, (int *)(a1 + 28 * (v12 >> 1)), (uint64_t)a2 - 28);
        uint64_t v15 = 28 * v13;
        unint64_t v16 = (int *)(28 * v13 + a1 - 28);
        sub_93A494(a1 + 28, v16, (uint64_t)a2 - 56);
        int v17 = (int *)(a1 + 28 + v15);
        sub_93A494(a1 + 56, v17, (uint64_t)a2 - 84);
        sub_93A494((uint64_t)v16, (int *)v14, (uint64_t)v17);
        *(_OWORD *)&v146[12] = *(_OWORD *)(a1 + 12);
        *(_OWORD *)std::string v146 = *(_OWORD *)a1;
        long long v18 = *(_OWORD *)v14;
        *(_OWORD *)(a1 + 12) = *(_OWORD *)(v14 + 12);
        *(_OWORD *)a1 = v18;
        *(_OWORD *)(v14 + 12) = *(_OWORD *)&v146[12];
        *(_OWORD *)unint64_t v14 = *(_OWORD *)v146;
        --a3;
        unsigned int v19 = *(_DWORD *)a1;
        if ((a4 & 1) == 0) {
          goto LABEL_11;
        }
LABEL_14:
        uint64_t v22 = 0;
        unsigned int v23 = *(unsigned __int8 *)(a1 + 4);
        *(void *)&v143[15] = *(void *)(a1 + 20);
        *(_OWORD *)char v143 = *(_OWORD *)(a1 + 5);
        while (1)
        {
          unsigned int v24 = *(_DWORD *)(a1 + v22 + 28);
          if (v24 >= v19 && (v19 < v24 || *(unsigned __int8 *)(a1 + v22 + 32) >= v23)) {
            break;
          }
          v22 += 28;
        }
        unint64_t v26 = a1 + v22 + 28;
        unint64_t v27 = (char *)a2 - 28;
        if (v22)
        {
          do
          {
            unint64_t v28 = (unint64_t)v27;
            unsigned int v29 = *(_DWORD *)v27;
            if (*(_DWORD *)v27 < v19) {
              break;
            }
            unsigned int v30 = v27[4];
            v27 -= 28;
          }
          while (v19 < v29 || v30 >= v23);
LABEL_36:
          unint64_t v10 = v26;
          if (v26 < v28)
          {
            uint64_t v35 = (long long *)v28;
            do
            {
              *(_OWORD *)&v147[12] = *(_OWORD *)(v10 + 12);
              *(_OWORD *)long long v147 = *(_OWORD *)v10;
              long long v36 = *v35;
              *(_OWORD *)(v10 + 12) = *(long long *)((char *)v35 + 12);
              *(_OWORD *)unint64_t v10 = v36;
              *(long long *)((char *)v35 + 12) = *(_OWORD *)&v147[12];
              *uint64_t v35 = *(_OWORD *)v147;
              do
              {
                do
                {
                  unsigned int v38 = *(_DWORD *)(v10 + 28);
                  v10 += 28;
                  unsigned int v37 = v38;
                }
                while (v38 < v19);
              }
              while (v19 >= v37 && *(unsigned __int8 *)(v10 + 4) < v23);
              uint64_t v40 = (char *)v35 - 28;
              do
              {
                uint64_t v35 = (long long *)v40;
                unsigned int v41 = *(_DWORD *)v40;
                if (*(_DWORD *)v40 < v19) {
                  break;
                }
                unsigned int v42 = v40[4];
                v40 -= 28;
              }
              while (v19 < v41 || v42 >= v23);
            }
            while (v10 < (unint64_t)v35);
          }
        }
        else
        {
          long long v32 = (char *)a2 - 28;
          while (1)
          {
            unint64_t v28 = (unint64_t)v32;
            unint64_t v33 = (unint64_t)(v32 + 28);
            if (v26 >= v33) {
              break;
            }
            if (*(_DWORD *)v28 >= v19)
            {
              long long v32 = (char *)(v28 - 28);
              if (v19 < *(_DWORD *)v28 || *(unsigned __int8 *)(v28 + 4) >= v23) {
                continue;
              }
            }
            goto LABEL_36;
          }
          unint64_t v28 = v33;
          unint64_t v10 = v26;
        }
        if (v10 - 28 != a1)
        {
          long long v44 = *(_OWORD *)(v10 - 28);
          *(_OWORD *)(a1 + 12) = *(_OWORD *)(v10 - 16);
          *(_OWORD *)a1 = v44;
        }
        *(_DWORD *)(v10 - 28) = v19;
        *(unsigned char *)(v10 - 24) = v23;
        *(void *)(v10 - 8) = *(void *)&v143[15];
        *(_OWORD *)(v10 - 23) = *(_OWORD *)v143;
        if (v26 >= v28) {
          break;
        }
LABEL_59:
        sub_939598(a1, v10 - 28, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v45 = sub_93A638(a1, v10 - 28);
      if (sub_93A638(v10, (uint64_t)a2)) {
        break;
      }
      if (!v45) {
        goto LABEL_59;
      }
    }
    a2 = (_OWORD *)(v10 - 28);
    if (!v45) {
      continue;
    }
    break;
  }
}

__n128 sub_93A1E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = sub_93A494(a1, (int *)a2, a3).n128_u64[0];
  if (*(_DWORD *)a4 < *(_DWORD *)a3
    || (*(_DWORD *)a3 >= *(_DWORD *)a4
      ? (BOOL v11 = *(unsigned __int8 *)(a4 + 4) >= *(unsigned __int8 *)(a3 + 4))
      : (BOOL v11 = 1),
        !v11))
  {
    *(_OWORD *)unsigned int v19 = *(_OWORD *)a3;
    *(_OWORD *)&v19[12] = *(_OWORD *)(a3 + 12);
    long long v12 = *(_OWORD *)(a4 + 12);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 12) = v12;
    *(_OWORD *)(a4 + 12) = *(_OWORD *)&v19[12];
    __n128 result = *(__n128 *)v19;
    *(_OWORD *)a4 = *(_OWORD *)v19;
    if (*(_DWORD *)a3 < *(_DWORD *)a2
      || *(_DWORD *)a2 >= *(_DWORD *)a3 && *(unsigned __int8 *)(a3 + 4) < *(unsigned __int8 *)(a2 + 4))
    {
      *(_OWORD *)unsigned int v20 = *(_OWORD *)a2;
      *(_OWORD *)&v20[12] = *(_OWORD *)(a2 + 12);
      long long v13 = *(_OWORD *)(a3 + 12);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 12) = v13;
      *(_OWORD *)(a3 + 12) = *(_OWORD *)&v20[12];
      __n128 result = *(__n128 *)v20;
      *(_OWORD *)a3 = *(_OWORD *)v20;
      if (*(_DWORD *)a2 < *(_DWORD *)a1
        || *(_DWORD *)a1 >= *(_DWORD *)a2 && *(unsigned __int8 *)(a2 + 4) < *(unsigned __int8 *)(a1 + 4))
      {
        *(_OWORD *)unsigned int v21 = *(_OWORD *)a1;
        *(_OWORD *)&v21[12] = *(_OWORD *)(a1 + 12);
        long long v14 = *(_OWORD *)(a2 + 12);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 12) = v14;
        *(_OWORD *)(a2 + 12) = *(_OWORD *)&v21[12];
        __n128 result = *(__n128 *)v21;
        *(_OWORD *)a2 = *(_OWORD *)v21;
      }
    }
  }
  if (*(_DWORD *)a5 < *(_DWORD *)a4
    || *(_DWORD *)a4 >= *(_DWORD *)a5 && *(unsigned __int8 *)(a5 + 4) < *(unsigned __int8 *)(a4 + 4))
  {
    *(_OWORD *)uint64_t v22 = *(_OWORD *)a4;
    *(_OWORD *)&v22[12] = *(_OWORD *)(a4 + 12);
    long long v15 = *(_OWORD *)(a5 + 12);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 12) = v15;
    *(_OWORD *)(a5 + 12) = *(_OWORD *)&v22[12];
    __n128 result = *(__n128 *)v22;
    *(_OWORD *)a5 = *(_OWORD *)v22;
    if (*(_DWORD *)a4 < *(_DWORD *)a3
      || *(_DWORD *)a3 >= *(_DWORD *)a4 && *(unsigned __int8 *)(a4 + 4) < *(unsigned __int8 *)(a3 + 4))
    {
      *(_OWORD *)unsigned int v23 = *(_OWORD *)a3;
      *(_OWORD *)&v23[12] = *(_OWORD *)(a3 + 12);
      long long v16 = *(_OWORD *)(a4 + 12);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 12) = v16;
      *(_OWORD *)(a4 + 12) = *(_OWORD *)&v23[12];
      __n128 result = *(__n128 *)v23;
      *(_OWORD *)a4 = *(_OWORD *)v23;
      if (*(_DWORD *)a3 < *(_DWORD *)a2
        || *(_DWORD *)a2 >= *(_DWORD *)a3 && *(unsigned __int8 *)(a3 + 4) < *(unsigned __int8 *)(a2 + 4))
      {
        *(_OWORD *)unsigned int v24 = *(_OWORD *)a2;
        *(_OWORD *)&v24[12] = *(_OWORD *)(a2 + 12);
        long long v17 = *(_OWORD *)(a3 + 12);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 12) = v17;
        *(_OWORD *)(a3 + 12) = *(_OWORD *)&v24[12];
        __n128 result = *(__n128 *)v24;
        *(_OWORD *)a3 = *(_OWORD *)v24;
        if (*(_DWORD *)a2 < *(_DWORD *)a1
          || *(_DWORD *)a1 >= *(_DWORD *)a2 && *(unsigned __int8 *)(a2 + 4) < *(unsigned __int8 *)(a1 + 4))
        {
          *(_OWORD *)uint64_t v25 = *(_OWORD *)a1;
          *(_OWORD *)&v25[12] = *(_OWORD *)(a1 + 12);
          long long v18 = *(_OWORD *)(a2 + 12);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 12) = v18;
          *(_OWORD *)(a2 + 12) = *(_OWORD *)&v25[12];
          __n128 result = *(__n128 *)v25;
          *(_OWORD *)a2 = *(_OWORD *)v25;
        }
      }
    }
  }
  return result;
}

__n128 sub_93A494(uint64_t a1, int *a2, uint64_t a3)
{
  unsigned int v3 = *a2;
  unsigned int v4 = *((unsigned __int8 *)a2 + 4);
  if (*a2 >= *(_DWORD *)a1
    && (*(_DWORD *)a1 >= v3 ? (BOOL v5 = v4 >= *(unsigned __int8 *)(a1 + 4)) : (BOOL v5 = 1), v5))
  {
    if (*(_DWORD *)a3 < v3 || (v3 >= *(_DWORD *)a3 ? (BOOL v6 = *(unsigned __int8 *)(a3 + 4) >= v4) : (BOOL v6 = 1), !v6))
    {
      *(_OWORD *)long long v14 = *(_OWORD *)a2;
      *(_OWORD *)&v14[12] = *(_OWORD *)(a2 + 3);
      long long v7 = *(_OWORD *)(a3 + 12);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 3) = v7;
      *(_OWORD *)(a3 + 12) = *(_OWORD *)&v14[12];
      __n128 result = *(__n128 *)v14;
      *(_OWORD *)a3 = *(_OWORD *)v14;
      if (*a2 < *(_DWORD *)a1
        || *(_DWORD *)a1 >= *a2
        && *((unsigned __int8 *)a2 + 4) < *(unsigned __int8 *)(a1 + 4))
      {
        *(_OWORD *)long long v15 = *(_OWORD *)a1;
        *(_OWORD *)&v15[12] = *(_OWORD *)(a1 + 12);
        long long v9 = *(_OWORD *)(a2 + 3);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 12) = v9;
        *(_OWORD *)(a2 + 3) = *(_OWORD *)&v15[12];
        __n128 result = *(__n128 *)v15;
        *(_OWORD *)a2 = *(_OWORD *)v15;
      }
    }
  }
  else
  {
    if (*(_DWORD *)a3 < v3 || (v3 >= *(_DWORD *)a3 ? (BOOL v10 = *(unsigned __int8 *)(a3 + 4) >= v4) : (BOOL v10 = 1), !v10))
    {
      *(_OWORD *)long long v17 = *(_OWORD *)a1;
      *(_OWORD *)&v17[12] = *(_OWORD *)(a1 + 12);
      long long v13 = *(_OWORD *)(a3 + 12);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_OWORD *)(a1 + 12) = v13;
      goto LABEL_27;
    }
    *(_OWORD *)long long v16 = *(_OWORD *)a1;
    *(_OWORD *)&v16[12] = *(_OWORD *)(a1 + 12);
    long long v11 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 12) = v11;
    *(_OWORD *)(a2 + 3) = *(_OWORD *)&v16[12];
    __n128 result = *(__n128 *)v16;
    *(_OWORD *)a2 = *(_OWORD *)v16;
    if (*(_DWORD *)a3 < *a2
      || *a2 >= *(_DWORD *)a3 && *(unsigned __int8 *)(a3 + 4) < *((unsigned __int8 *)a2 + 4))
    {
      *(_OWORD *)long long v17 = *(_OWORD *)a2;
      *(_OWORD *)&v17[12] = *(_OWORD *)(a2 + 3);
      long long v12 = *(_OWORD *)(a3 + 12);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 3) = v12;
LABEL_27:
      *(_OWORD *)(a3 + 12) = *(_OWORD *)&v17[12];
      __n128 result = *(__n128 *)v17;
      *(_OWORD *)a3 = *(_OWORD *)v17;
    }
  }
  return result;
}

BOOL sub_93A638(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 2;
  BOOL result = 1;
  switch(0x6DB6DB6DB6DB6DB7 * v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      BOOL v6 = (_OWORD *)(a2 - 28);
      unsigned int v7 = *(_DWORD *)(a2 - 28);
      if (v7 < *(_DWORD *)a1
        || (*(_DWORD *)a1 >= v7
          ? (BOOL v8 = *(unsigned __int8 *)(a2 - 24) >= *(unsigned __int8 *)(a1 + 4))
          : (BOOL v8 = 1),
            !v8))
      {
        *(_OWORD *)unsigned int v30 = *(_OWORD *)a1;
        *(_OWORD *)&v30[12] = *(_OWORD *)(a1 + 12);
        long long v9 = *(_OWORD *)(a2 - 16);
        *(_OWORD *)a1 = *v6;
        *(_OWORD *)(a1 + 12) = v9;
        *(_OWORD *)(a2 - 16) = *(_OWORD *)&v30[12];
        *BOOL v6 = *(_OWORD *)v30;
      }
      return result;
    case 3:
      sub_93A494(a1, (int *)(a1 + 28), a2 - 28);
      return 1;
    case 4:
      unsigned int v21 = (_OWORD *)(a1 + 28);
      uint64_t v22 = (_OWORD *)(a1 + 56);
      sub_93A494(a1, (int *)(a1 + 28), a1 + 56);
      unsigned int v23 = (_OWORD *)(a2 - 28);
      unsigned int v24 = *(_DWORD *)(a2 - 28);
      unsigned int v25 = *(_DWORD *)(a1 + 56);
      if (v24 >= v25)
      {
        BOOL result = 1;
        if (v25 < v24 || *(unsigned __int8 *)(a2 - 24) >= *(unsigned __int8 *)(a1 + 60)) {
          return result;
        }
      }
      *(_OWORD *)long long v32 = *v22;
      *(_OWORD *)&v32[12] = *(_OWORD *)(a1 + 68);
      long long v26 = *(_OWORD *)(a2 - 16);
      *uint64_t v22 = *v23;
      *(_OWORD *)(a1 + 68) = v26;
      *(_OWORD *)(a2 - 16) = *(_OWORD *)&v32[12];
      *unsigned int v23 = *(_OWORD *)v32;
      unsigned int v27 = *(_DWORD *)(a1 + 56);
      unsigned int v28 = *(_DWORD *)(a1 + 28);
      if (v27 >= v28)
      {
        BOOL result = 1;
        if (v28 < v27 || *(unsigned __int8 *)(a1 + 60) >= *(unsigned __int8 *)(a1 + 32)) {
          return result;
        }
      }
      *(_OWORD *)unint64_t v33 = *v21;
      *(_OWORD *)&v33[12] = *(_OWORD *)(a1 + 40);
      *unsigned int v21 = *v22;
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 68);
      *uint64_t v22 = *(_OWORD *)v33;
      *(_OWORD *)(a1 + 68) = *(_OWORD *)&v33[12];
      unsigned int v29 = *(_DWORD *)(a1 + 28);
      if (v29 >= *(_DWORD *)a1)
      {
        BOOL result = 1;
        if (*(_DWORD *)a1 < v29 || *(unsigned __int8 *)(a1 + 32) >= *(unsigned __int8 *)(a1 + 4)) {
          return result;
        }
      }
      *(_OWORD *)long long v34 = *(_OWORD *)a1;
      *(_OWORD *)&v34[12] = *(_OWORD *)(a1 + 12);
      *(_OWORD *)a1 = *v21;
      *(_OWORD *)(a1 + 12) = *(_OWORD *)(a1 + 40);
      *unsigned int v21 = *(_OWORD *)v34;
      *(_OWORD *)(a1 + 40) = *(_OWORD *)&v34[12];
      return 1;
    case 5:
      sub_93A1E4(a1, a1 + 28, a1 + 56, a1 + 84, a2 - 28);
      return 1;
    default:
      uint64_t v10 = a1 + 56;
      sub_93A494(a1, (int *)(a1 + 28), a1 + 56);
      uint64_t v11 = a1 + 84;
      if (a1 + 84 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    unsigned int v15 = *(_DWORD *)v11;
    if (*(_DWORD *)v11 < *(_DWORD *)v10) {
      break;
    }
    unsigned int v16 = *(unsigned __int8 *)(v11 + 4);
    if (*(_DWORD *)v10 >= v15 && v16 < *(unsigned __int8 *)(v10 + 4)) {
      goto LABEL_19;
    }
LABEL_12:
    uint64_t v10 = v11;
    v12 += 28;
    v11 += 28;
    if (v11 == a2) {
      return 1;
    }
  }
  unsigned int v16 = *(unsigned __int8 *)(v11 + 4);
LABEL_19:
  *(_OWORD *)uint64_t v31 = *(_OWORD *)(v11 + 5);
  *(void *)&v31[15] = *(void *)(v11 + 20);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v10;
  *(_OWORD *)(v11 + 12) = *(_OWORD *)(v10 + 12);
  uint64_t v14 = a1;
  if (v10 != a1)
  {
    uint64_t v18 = v12;
    while (1)
    {
      unsigned int v19 = *(_DWORD *)(a1 + v18 + 28);
      if (v15 >= v19 && (v19 < v15 || v16 >= *(unsigned __int8 *)(a1 + v18 + 32))) {
        break;
      }
      *(_OWORD *)(a1 + v18 + 56) = *(_OWORD *)(a1 + v18 + 28);
      *(_OWORD *)(a1 + v18 + 68) = *(_OWORD *)(a1 + v18 + 40);
      v18 -= 28;
      if (v18 == -56)
      {
        uint64_t v14 = a1;
        goto LABEL_11;
      }
    }
    uint64_t v14 = a1 + v18 + 56;
  }
LABEL_11:
  *(_DWORD *)uint64_t v14 = v15;
  *(unsigned char *)(v14 + 4) = v16;
  *(_OWORD *)(v14 + 5) = *(_OWORD *)v31;
  *(void *)(v14 + 20) = *(void *)&v31[15];
  if (++v13 != 8) {
    goto LABEL_12;
  }
  return v11 + 28 == a2;
}

void sub_93AA10()
{
  unk_25D539F = 16641;
  word_25D5388 = 65;
  byte_25D53B7 = 1;
  byte_25D53A1 = 0;
}

BOOL *sub_93AA38(BOOL *a1, void *a2, uint64_t a3)
{
  HIBYTE(__p[2]) = 6;
  strcpy((char *)__p, "enable");
  if (sub_29D62C(a2, (uint64_t)__p))
  {
    if (*(_DWORD *)(a3 + 1436))
    {
      BOOL v6 = 1;
    }
    else
    {
      uint64_t v11 = operator new(0x20uLL);
      long long v12 = xmmword_20B8870;
      strcpy((char *)v11, "disable_in_legacy_clients");
      BOOL v6 = !sub_29D62C(a2, (uint64_t)&v11);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11);
      }
    }
  }
  else
  {
    BOOL v6 = 0;
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *a1 = v6;
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "same_alight_stops");
  BOOL v7 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[1] = v7;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "same_line_suppression_status");
  BOOL v8 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[2] = v8;
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "same_direction_name");
  BOOL v9 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[3] = v9;
  return a1;
}

void sub_93AC0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_93AC68(uint64_t a1, void *a2, uint64_t a3)
{
  HIBYTE(v17[2]) = 19;
  strcpy((char *)v17, "TransitRouteBuilder");
  uint64_t v14 = 0;
  unsigned int v15 = 0;
  uint64_t v16 = 0;
  BOOL v6 = sub_374CDC((uint64_t)a2, (uint64_t)v17, (uint64_t *)&v14);
  strcpy(__p, "lightweight_clustering");
  char v13 = 22;
  BOOL v7 = (void *)sub_560F4(v6, (uint64_t)__p);
  sub_93AA38((BOOL *)a1, v7, a3);
  if (v13 < 0) {
    operator delete(*(void **)__p);
  }
  BOOL v8 = (void **)v14;
  if (v14)
  {
    BOOL v9 = v15;
    uint64_t v10 = v14;
    if (v15 != v14)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = v14;
    }
    unsigned int v15 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v17[2]) < 0) {
    operator delete(v17[0]);
  }
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = sub_3755E4(a2);
  *(void *)(a1 + 24) = sub_375500(a2);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_93ADAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if ((a23 & 0x80000000) == 0) {
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_93AE14(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (*(void *)(a2 + 24) != *(void *)(a2 + 32))
  {
    sub_93AEC4(a1, a2, (uint64_t)a3);
    uint64_t v6 = *(void *)(a2 + 32) - *(void *)(a2 + 24);
    if (v6)
    {
      uint64_t v7 = 0;
      uint64_t v8 = v6 >> 6;
      do
        sub_93B140(a1, a2, v7++, (uint64_t)a3);
      while (v8 != v7);
    }
  }
}

void sub_93AE9C(_Unwind_Exception *a1)
{
  sub_93B288(v1);
  _Unwind_Resume(a1);
}

void sub_93AEB0(_Unwind_Exception *a1)
{
  sub_93B288(v1);
  _Unwind_Resume(a1);
}

void sub_93AEC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)(a3 + 8);
  if ((unint64_t)v6 >= *(void *)(a3 + 16))
  {
    uint64_t v7 = sub_93C4C4((void ***)a3);
  }
  else
  {
    *uint64_t v6 = 0;
    v6[1] = 0;
    uint64_t v7 = (void **)(v6 + 3);
    _OWORD v6[2] = 0;
  }
  *(void *)(a3 + 8) = v7;
  uint64_t v8 = *(uint64_t **)(a2 + 24);
  int v9 = sub_93B348((unsigned char *)a1, v8);
  uint64_t v11 = *v8;
  uint64_t v10 = v8[1];
  if (v9) {
    BOOL v12 = v10 == v11;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12)
  {
    uint64_t v13 = v10 - v11;
    if (!v13) {
      goto LABEL_15;
    }
    unint64_t v14 = 0x8E38E38E38E38E39 * (v13 >> 4);
  }
  else
  {
    unint64_t v14 = 1;
  }
  unsigned int v15 = (char *)*(v7 - 2);
  do
  {
    while (v15 >= *(v7 - 1))
    {
      unsigned int v15 = sub_93C660(v7 - 3);
      *(v7 - 2) = v15;
      if (!--v14) {
        goto LABEL_15;
      }
    }
    *((void *)v15 + 10) = 0;
    *((_OWORD *)v15 + 3) = 0u;
    *((_OWORD *)v15 + 4) = 0u;
    *((_OWORD *)v15 + 1) = 0u;
    *((_OWORD *)v15 + 2) = 0u;
    *(_OWORD *)unsigned int v15 = 0u;
    v15 += 88;
    *(v7 - 2) = v15;
    --v14;
  }
  while (v14);
LABEL_15:
  uint64_t v16 = *(void **)(a1 + 40);
  if ((unint64_t)v16 < *(void *)(a1 + 48))
  {
    void *v16 = 0;
    v16[1] = 0;
    long long v17 = (char *)(v16 + 3);
    _OWORD v16[2] = 0;
    *(void *)(a1 + 40) = v16 + 3;
    unsigned int v19 = (char *)v16[1];
    unint64_t v18 = v16[2];
    if ((unint64_t)v19 >= v18) {
      goto LABEL_17;
    }
LABEL_28:
    *(void *)unsigned int v19 = 0;
    uint64_t v28 = (uint64_t)(v19 + 8);
LABEL_29:
    *((void *)v17 - 2) = v28;
    return;
  }
  long long v17 = sub_3B3B0((char **)(a1 + 32));
  *(void *)(a1 + 40) = v17;
  unsigned int v19 = (char *)*((void *)v17 - 2);
  unint64_t v18 = *((void *)v17 - 1);
  if ((unint64_t)v19 < v18) {
    goto LABEL_28;
  }
LABEL_17:
  unsigned int v20 = (char *)*((void *)v17 - 3);
  uint64_t v21 = (v19 - v20) >> 3;
  unint64_t v22 = v21 + 1;
  if ((unint64_t)(v21 + 1) >> 61) {
    sub_2E00();
  }
  uint64_t v23 = v18 - (void)v20;
  if (v23 >> 2 > v22) {
    unint64_t v22 = v23 >> 2;
  }
  if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v24 = v22;
  }
  if (!v24)
  {
    unsigned int v25 = 0;
    long long v26 = (void *)(8 * v21);
    unsigned int v27 = 0;
    *(void *)(8 * v21) = 0;
    uint64_t v28 = 8 * v21 + 8;
    int64_t v29 = v19 - v20;
    if (v19 == v20) {
      goto LABEL_37;
    }
    goto LABEL_31;
  }
  if (v24 >> 61) {
    sub_188D718();
  }
  unsigned int v25 = operator new(8 * v24);
  long long v26 = &v25[8 * v21];
  unsigned int v27 = &v25[8 * v24];
  *long long v26 = 0;
  uint64_t v28 = (uint64_t)(v26 + 1);
  int64_t v29 = v19 - v20;
  if (v19 != v20)
  {
LABEL_31:
    unint64_t v30 = v29 - 8;
    if (v30 < 0x58) {
      goto LABEL_43;
    }
    if ((unint64_t)(v20 - v25) < 0x20) {
      goto LABEL_43;
    }
    uint64_t v31 = (v30 >> 3) + 1;
    uint64_t v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v33 = &v19[-v32];
    long long v26 = (void *)((char *)v26 - v32);
    long long v34 = &v25[8 * v21 - 16];
    uint64_t v35 = v19 - 16;
    uint64_t v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v37 = *(_OWORD *)v35;
      *(v34 - 1) = *((_OWORD *)v35 - 1);
      *long long v34 = v37;
      v34 -= 2;
      v35 -= 32;
      v36 -= 4;
    }
    while (v36);
    unsigned int v19 = v33;
    if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_43:
      do
      {
        uint64_t v38 = *((void *)v19 - 1);
        v19 -= 8;
        *--long long v26 = v38;
      }
      while (v19 != v20);
    }
  }
LABEL_37:
  *((void *)v17 - 3) = v26;
  *((void *)v17 - 2) = v28;
  *((void *)v17 - 1) = v27;
  if (!v20) {
    goto LABEL_29;
  }
  operator delete(v20);
  *((void *)v17 - 2) = v28;
}

void sub_93B140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a2 + 24);
  if (a3 + 1 >= (unint64_t)((*(void *)(a2 + 32) - v8) >> 6))
  {
    unint64_t v10 = 0;
    uint64_t v11 = *(void **)(a1 + 40);
    if ((unint64_t)v11 < *(void *)(a1 + 48)) {
      goto LABEL_6;
    }
  }
  else
  {
    int v9 = (uint64_t *)(v8 + ((a3 + 1) << 6));
    if (sub_93B348((unsigned char *)a1, v9))
    {
      unint64_t v10 = 1;
      uint64_t v11 = *(void **)(a1 + 40);
      if ((unint64_t)v11 >= *(void *)(a1 + 48)) {
        goto LABEL_8;
      }
LABEL_6:
      void *v11 = 0;
      v11[1] = 0;
      BOOL v12 = (char *)(v11 + 3);
      v11[2] = 0;
      goto LABEL_9;
    }
    unint64_t v10 = 0x8E38E38E38E38E39 * ((v9[1] - *v9) >> 4);
    uint64_t v11 = *(void **)(a1 + 40);
    if ((unint64_t)v11 < *(void *)(a1 + 48)) {
      goto LABEL_6;
    }
  }
LABEL_8:
  BOOL v12 = sub_3B3B0((char **)(a1 + 32));
LABEL_9:
  *(void *)(a1 + 40) = v12;
  uint64_t v13 = (uint64_t *)(*(void *)(a2 + 24) + (a3 << 6));
  int v14 = sub_93B348((unsigned char *)a1, v13);
  uint64_t v15 = v13[1] - *v13;
  if (v15)
  {
    int v16 = v14;
    uint64_t v17 = 0;
    uint64_t v18 = v15 / 144;
    do
      sub_93BBD8(a1, v13, a3, v17++, v10, v16, a4);
    while (v18 != v17);
  }
}

void ***sub_93B288(void ***a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unsigned int v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      BOOL v5 = a1[1];
      do
      {
        uint64_t v8 = (char *)*(v5 - 3);
        v5 -= 3;
        uint64_t v7 = v8;
        if (v8)
        {
          int v9 = (char *)*(v3 - 2);
          uint64_t v6 = v7;
          if (v9 != v7)
          {
            do
            {
              if (*(v9 - 16)) {
                *(v9 - 16) = 0;
              }
              unint64_t v10 = (void *)*((void *)v9 - 10);
              if (v10)
              {
                *((void *)v9 - 9) = v10;
                operator delete(v10);
              }
              v9 -= 88;
            }
            while (v9 != v7);
            uint64_t v6 = *v5;
          }
          *(v3 - 2) = v7;
          operator delete(v6);
        }
        unsigned int v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_93B348(unsigned char *a1, uint64_t *a2)
{
  if (!*a1) {
    return 0;
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (0x8E38E38E38E38E39 * ((v4 - *a2) >> 4) < 2) {
    return 0;
  }
  if (a1[2])
  {
    if (v4 == v3) {
      sub_66748();
    }
    char v7 = sub_93B750((uint64_t)a1, *(void *)(v3 + 8), *(void *)(v3 + 16));
    uint64_t v8 = a2[1];
    if (*a2 + 144 != v8)
    {
      char v9 = v7;
      uint64_t v10 = *a2 + 288;
      do
      {
        char v11 = v9 ^ sub_93B750((uint64_t)a1, *(void *)(v10 - 136), *(void *)(v10 - 128));
        if (v11) {
          break;
        }
        BOOL v12 = v10 == v8;
        v10 += 144;
      }
      while (!v12);
      if (v11) {
        return 0;
      }
    }
  }
  if (!a1[1] || (uint64_t result = sub_93B478((uint64_t)a1, a2), result))
  {
    if (!a1[3]) {
      return 1;
    }
    uint64_t result = sub_93B5D4((uint64_t)a1, a2);
    if (result) {
      return 1;
    }
  }
  return result;
}

uint64_t sub_93B478(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 == v3) {
    return 1;
  }
  int v5 = 0;
  int v6 = -1;
  do
  {
    uint64_t v7 = *(void *)(v2 + 8);
    uint64_t v8 = *(void *)(v2 + 16);
    while (v8 != v7)
    {
      uint64_t v9 = v8 - 1096;
      int v10 = *(_DWORD *)(v8 - 8);
      v8 -= 1096;
      if (!v10)
      {
        uint64_t v7 = v9 + 1096;
        break;
      }
    }
    char v11 = (unsigned int *)(v7 - 1096);
    uint64_t v12 = v11[1];
    unsigned int v13 = v11[5];
    int v14 = sub_369B60(*(void *)(a1 + 16), v11[2] | (unint64_t)(v12 << 32), 0);
    uint64_t v15 = &v14[-*(int *)v14];
    if (*(unsigned __int16 *)v15 < 5u)
    {
      uint64_t v16 = 0;
    }
    else
    {
      uint64_t v16 = *((unsigned __int16 *)v15 + 2);
      if (*((_WORD *)v15 + 2)) {
        v16 += (uint64_t)&v14[*(unsigned int *)&v14[v16]];
      }
    }
    uint64_t v17 = (int *)(v16 + 4 * v12 + 4 + *(unsigned int *)(v16 + 4 * v12 + 4));
    uint64_t v18 = (unsigned __int16 *)((char *)v17 - *v17);
    if (*v18 >= 0xDu && (uint64_t v19 = v18[6]) != 0) {
      int v20 = *(int *)((char *)v17 + v19);
    }
    else {
      int v20 = -1;
    }
    uint64_t v23 = &v14[24 * v20
             + 4
             + 24 * v13
             + *((unsigned __int16 *)v15 + 3)
             + *(unsigned int *)&v14[*((unsigned __int16 *)v15 + 3)]];
    int v21 = *(_DWORD *)v23;
    int v22 = *((_DWORD *)v23 + 1);
    if (v5) {
      BOOL v24 = v6 == -1;
    }
    else {
      BOOL v24 = 1;
    }
    int v25 = !v24;
    if (v5 == v21 && v6 == v22) {
      int v25 = 0;
    }
    if (v25) {
      break;
    }
    v2 += 144;
    int v6 = v22;
    int v5 = v21;
  }
  while (v2 != v3);
  return v25 ^ 1u;
}

uint64_t sub_93B5D4(uint64_t a1, void *a2)
{
  if (a2[1] == *a2) {
    sub_66748();
  }
  uint64_t v4 = __p;
  sub_93BA1C(__p, a1, *(void *)(*a2 + 8), *(void *)(*a2 + 16));
  uint64_t v5 = a2[1];
  uint64_t v6 = *a2 + 144;
  if (v6 != v5)
  {
    unsigned __int8 v7 = v16;
    if ((v16 & 0x80u) == 0) {
      unint64_t v8 = v16;
    }
    else {
      unint64_t v8 = (unint64_t)__p[1];
    }
    if ((v16 & 0x80u) != 0) {
      uint64_t v4 = (void **)__p[0];
    }
    do
    {
      sub_93BA1C(&__s1, a1, *(void *)(v6 + 8), *(void *)(v6 + 16));
      if ((v19 & 0x80u) == 0) {
        size_t v11 = v19;
      }
      else {
        size_t v11 = __n;
      }
      if (v11 != v8)
      {
        if ((v19 & 0x80) != 0) {
          operator delete(__s1);
        }
        goto LABEL_25;
      }
      if ((v19 & 0x80) != 0)
      {
        uint64_t v9 = __s1;
        int v10 = memcmp(__s1, v4, __n);
        operator delete(v9);
        if (v10) {
          goto LABEL_25;
        }
      }
      else if (v19)
      {
        uint64_t v12 = 0;
        while (*((unsigned __int8 *)&__s1 + v12) == *((unsigned __int8 *)v4 + v12))
        {
          if (v19 == ++v12) {
            goto LABEL_10;
          }
        }
LABEL_25:
        uint64_t v13 = 0;
        if ((v7 & 0x80) == 0) {
          return v13;
        }
        goto LABEL_26;
      }
LABEL_10:
      v6 += 144;
    }
    while (v6 != v5);
    uint64_t v13 = 1;
    if ((v7 & 0x80) == 0) {
      return v13;
    }
    goto LABEL_26;
  }
  uint64_t v13 = 1;
  if ((v16 & 0x80) != 0) {
LABEL_26:
  }
    operator delete(__p[0]);
  return v13;
}

void sub_93B738(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_93B750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    while (*(_DWORD *)(a2 + 1088))
    {
      a2 += 1096;
      if (a2 == a3)
      {
        a2 = a3;
        break;
      }
    }
  }
  uint64_t v4 = (int *)sub_369F8C(*(void *)(a1 + 16), __ROR8__(*(void *)(a2 + 4), 32), 0, "trip");
  unint64_t v5 = *(void *)((char *)v4 + *(unsigned __int16 *)((char *)v4 - *v4 + 6));
  uint64_t v6 = (int *)sub_8DFD1C(*(void *)(a1 + 16), v5, 0, "line");
  unsigned __int8 v7 = (unsigned __int16 *)((char *)v6 - *v6);
  if (*v7 >= 0x35u)
  {
    uint64_t v8 = v7[26];
    if (v8)
    {
      if (*((unsigned char *)v6 + v8)) {
        return 1;
      }
    }
  }
  nullsub_1(&v28);
  int v10 = (int *)sub_8DFD1C(*(void *)(a1 + 16), v5, 0, "line");
  size_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
  if (*v11 >= 0xFu && (uint64_t v12 = v11[7]) != 0) {
    uint64_t v13 = (char **)((char *)v10 + v12 + *(unsigned int *)((char *)v10 + v12));
  }
  else {
    uint64_t v13 = 0;
  }
  sub_8F48DC(v13, (void (*)(void **__return_ptr, char *))sub_4A0694, (uint64_t)&__p);
  sub_997050((uint64_t *)&__p, *(void *)(a1 + 8) + 968, &v29);
  int v14 = (void **)__p;
  if (__p)
  {
    uint64_t v15 = v26;
    unsigned __int8 v16 = __p;
    if (v26 != __p)
    {
      do
      {
        uint64_t v17 = (void **)*(v15 - 3);
        if (v17)
        {
          uint64_t v18 = (void **)*(v15 - 2);
          unsigned __int8 v19 = *(v15 - 3);
          if (v18 != v17)
          {
            do
            {
              if (*((char *)v18 - 1) < 0) {
                operator delete(*(v18 - 3));
              }
              v18 -= 4;
            }
            while (v18 != v17);
            unsigned __int8 v19 = *(v15 - 3);
          }
          *(v15 - 2) = v17;
          operator delete(v19);
        }
        int v20 = v15 - 8;
        if (*((char *)v15 - 41) < 0) {
          operator delete(*v20);
        }
        v15 -= 8;
      }
      while (v20 != v14);
      unsigned __int8 v16 = __p;
    }
    long long v26 = v14;
    operator delete(v16);
  }
  sub_995044((uint64_t *)&v29, (uint64_t)&__p);
  if (v27 < 0)
  {
    BOOL v21 = v26 == 0;
    operator delete(__p);
    int v22 = (void **)v29;
    if (v29)
    {
LABEL_31:
      uint64_t v23 = v30;
      BOOL v24 = v22;
      if (v30 == v22)
      {
LABEL_39:
        unint64_t v30 = v22;
        operator delete(v24);
        return v21;
      }
      while (1)
      {
        if (*((char *)v23 - 1) < 0)
        {
          operator delete(*(v23 - 3));
          if ((*((char *)v23 - 33) & 0x80000000) == 0) {
            goto LABEL_34;
          }
LABEL_37:
          operator delete(*(v23 - 7));
          v23 -= 7;
          if (v23 == v22)
          {
LABEL_38:
            BOOL v24 = v29;
            goto LABEL_39;
          }
        }
        else
        {
          if (*((char *)v23 - 33) < 0) {
            goto LABEL_37;
          }
LABEL_34:
          v23 -= 7;
          if (v23 == v22) {
            goto LABEL_38;
          }
        }
      }
    }
  }
  else
  {
    BOOL v21 = v27 == 0;
    int v22 = (void **)v29;
    if (v29) {
      goto LABEL_31;
    }
  }
  return v21;
}

void sub_93B9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_8E4FE0((void **)va);
  _Unwind_Resume(a1);
}

void sub_93BA08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_8F36A0((void ***)va);
  _Unwind_Resume(a1);
}

void sub_93BA1C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a3;
  if (a3 != a4)
  {
    while (*(_DWORD *)(v4 + 1088))
    {
      v4 += 1096;
      if (v4 == a4)
      {
        uint64_t v4 = a4;
        break;
      }
    }
  }
  uint64_t v7 = *(void *)(v4 + 4);
  uint64_t v8 = (int *)sub_369F8C(*(void *)(a2 + 16), __ROR8__(v7, 32), 0, "trip");
  uint64_t v9 = (int *)sub_8DFD1C(*(void *)(a2 + 16), *(void *)((char *)v8 + *(unsigned __int16 *)((char *)v8 - *v8 + 6)), 0, "line");
  int v10 = (unsigned __int16 *)((char *)v9 - *v9);
  if (*v10 >= 0x29u && (uint64_t v11 = v10[20]) != 0 && *((unsigned char *)v9 + v11))
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  else
  {
    uint64_t v12 = *(void *)(a2 + 16);
    v17[0] = (void *)__PAIR64__(v7, HIDWORD(v7));
    sub_90BBA0(v12, (uint64_t)v17, *(_DWORD *)(v4 + 16), (uint64_t)v21);
    nullsub_1(&v16);
    sub_9973DC((uint64_t)v21, *(void *)(a2 + 8) + 968, (uint64_t)v17);
    *(_OWORD *)a1 = *(_OWORD *)v17;
    a1[2] = v18;
    v17[1] = 0;
    uint64_t v18 = 0;
    v17[0] = 0;
    if (v20 < 0)
    {
      operator delete(__p);
      if (SHIBYTE(v18) < 0) {
        operator delete(v17[0]);
      }
    }
    uint64_t v13 = (void **)v23;
    if (v23)
    {
      int v14 = v24;
      uint64_t v15 = v23;
      if (v24 != v23)
      {
        do
        {
          if (*((char *)v14 - 1) < 0) {
            operator delete(*(v14 - 3));
          }
          v14 -= 4;
        }
        while (v14 != v13);
        uint64_t v15 = v23;
      }
      BOOL v24 = v13;
      operator delete(v15);
    }
    if (v22 < 0) {
      operator delete(v21[0]);
    }
  }
}

void sub_93BBC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_35EA08((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_93BBD8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, unint64_t a5, int a6, uint64_t a7)
{
  uint64_t v7 = a3;
  uint64_t v8 = *a2;
  char v106 = a6;
  if (!a6 || !*(_DWORD *)(*a2 + 144 * a4))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = v9 + 24 * a3;
    long long v105 = *(void **)(v10 + 8);
    if (*(void **)v10 != v105)
    {
      std::string::size_type v104 = (int *)(v8 + 144 * a4);
      if (a6) {
        uint64_t v11 = 0;
      }
      else {
        uint64_t v11 = a4;
      }
      uint64_t v110 = v11;
      uint64_t v12 = *(void **)v10;
      uint64_t v13 = v8 + 144 * a4;
      uint64_t v16 = *(void *)(v13 + 8);
      uint64_t v15 = (uint64_t *)(v13 + 8);
      uint64_t v14 = v16;
      uint64_t v18 = v15 + 1;
      uint64_t v17 = v15[1];
      if (a5 <= 1) {
        uint64_t v19 = 1;
      }
      else {
        uint64_t v19 = a5;
      }
      uint64_t v115 = v19;
      unint64_t v109 = -1;
      while (1)
      {
        uint64_t v108 = v12;
        uint64_t v111 = *(void *)(*(void *)a7 + 24 * *v12);
        if (v17 == v14)
        {
          unint64_t v20 = 0;
          uint64_t v17 = v14;
          int v21 = *v104;
          if (*v104 <= 1) {
LABEL_38:
          }
            *(_DWORD *)(v111 + 88 * v110) = v21;
        }
        else if (*(_DWORD *)(v14 + 1088))
        {
          unint64_t v20 = 0;
          int v21 = *v104;
          if (*v104 <= 1) {
            goto LABEL_38;
          }
        }
        else
        {
          unint64_t v20 = 0;
          uint64_t v22 = v111 + 88 * v110;
          uint64_t v23 = (void **)(v22 + 8);
          BOOL v24 = (char **)(v22 + 16);
          int v25 = (void *)(v22 + 24);
          while (1)
          {
            long long v26 = *v24;
            if ((unint64_t)*v24 >= *v25)
            {
              char v28 = (char *)*v23;
              unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((v26 - (unsigned char *)*v23) >> 3);
              unint64_t v30 = v29 + 1;
              if (v29 + 1 > 0xAAAAAAAAAAAAAAALL) {
LABEL_130:
              }
                sub_2E00();
              if (0x5555555555555556 * ((uint64_t)(*v25 - (void)v28) >> 3) > v30) {
                unint64_t v30 = 0x5555555555555556 * ((uint64_t)(*v25 - (void)v28) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v25 - (void)v28) >> 3) >= 0x555555555555555) {
                unint64_t v31 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v31 = v30;
              }
              if (v31 > 0xAAAAAAAAAAAAAAALL) {
                goto LABEL_129;
              }
              uint64_t v117 = 24 * v31;
              uint64_t v32 = (char *)operator new(24 * v31);
              unint64_t v33 = &v32[24 * v29];
              *(void *)unint64_t v33 = v7;
              *((void *)v33 + 1) = a4;
              *((void *)v33 + 2) = v20;
              if (v26 == v28)
              {
                uint64_t v36 = &v32[24 * v29];
              }
              else
              {
                long long v34 = &v32[24 * v29];
                do
                {
                  long long v35 = *(_OWORD *)(v26 - 24);
                  uint64_t v36 = v34 - 24;
                  *((void *)v34 - 1) = *((void *)v26 - 1);
                  *(_OWORD *)(v34 - 24) = v35;
                  v26 -= 24;
                  v34 -= 24;
                }
                while (v26 != v28);
              }
              *uint64_t v23 = v36;
              char v27 = v33 + 24;
              void *v24 = v33 + 24;
              *int v25 = &v32[v117];
              if (v28) {
                operator delete(v28);
              }
            }
            else
            {
              *(void *)long long v26 = v7;
              *((void *)v26 + 1) = a4;
              char v27 = v26 + 24;
              *((void *)v26 + 2) = v20;
            }
            void *v24 = v27;
            ++v20;
            uint64_t v17 = *v18;
            uint64_t v14 = *v15;
            if (v20 >= 0xE21A291C077975B9 * ((*v18 - *v15) >> 3)) {
              break;
            }
            uint64_t v7 = a3;
            if (*(_DWORD *)(v14 + 1096 * v20 + 1088))
            {
              int v21 = *v104;
              if (*v104 > 1) {
                goto LABEL_39;
              }
              goto LABEL_38;
            }
          }
          uint64_t v7 = a3;
          int v21 = *v104;
          if (*v104 <= 1) {
            goto LABEL_38;
          }
        }
LABEL_39:
        *(unsigned char *)(v111 + 88 * v110 + 80) = v106;
        if (v109 == -1)
        {
          uint64_t v38 = (void *)a7;
          uint64_t v39 = *(void ***)(a7 + 8);
          if (v20)
          {
            if ((unint64_t)v39 >= *(void *)(a7 + 16))
            {
              uint64_t v39 = sub_93C4C4((void ***)a7);
              uint64_t v38 = (void *)a7;
            }
            else
            {
              *uint64_t v39 = 0;
              v39[1] = 0;
              v39[2] = 0;
              v39 += 3;
            }
            v38[1] = v39;
          }
          unint64_t v40 = 0;
          unint64_t v109 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v39 - *v38) >> 3) - 1;
          unint64_t v112 = v20 - 1;
          unint64_t v113 = v39 - 3;
          unint64_t v114 = v20;
          long long v116 = v39;
          while (1)
          {
            unsigned int v41 = (char *)*(v39 - 3);
            unsigned int v42 = (char *)*(v39 - 2);
            unint64_t v43 = 0x2E8BA2E8BA2E8BA3 * ((v42 - v41) >> 3);
            unint64_t v118 = v40;
            if (v43 > v40) {
              goto LABEL_84;
            }
            unint64_t v44 = (unint64_t)*(v116 - 1);
            if ((unint64_t)v42 < v44) {
              break;
            }
            unint64_t v46 = v43 + 1;
            if (v43 + 1 > 0x2E8BA2E8BA2E8BALL) {
              sub_2E00();
            }
            unint64_t v47 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v44 - (void)v41) >> 3);
            if (2 * v47 > v46) {
              unint64_t v46 = 2 * v47;
            }
            if (v47 >= 0x1745D1745D1745DLL) {
              unint64_t v48 = 0x2E8BA2E8BA2E8BALL;
            }
            else {
              unint64_t v48 = v46;
            }
            if (v48)
            {
              if (v48 > 0x2E8BA2E8BA2E8BALL) {
                goto LABEL_129;
              }
              unsigned int v49 = (char *)operator new(88 * v48);
            }
            else
            {
              unsigned int v49 = 0;
            }
            size_t v50 = &v49[8 * ((v42 - v41) >> 3)];
            *((void *)v50 + 10) = 0;
            *((_OWORD *)v50 + 3) = 0u;
            *((_OWORD *)v50 + 4) = 0u;
            *((_OWORD *)v50 + 1) = 0u;
            *((_OWORD *)v50 + 2) = 0u;
            std::string::size_type v51 = &v49[88 * v48];
            *(_OWORD *)size_t v50 = 0u;
            BOOL v45 = v50 + 88;
            if (v42 == v41)
            {
              unint64_t v57 = v116;
              *(v116 - 3) = v50;
              *(v116 - 2) = v45;
              *(v116 - 1) = v51;
              unint64_t v20 = v114;
            }
            else
            {
              uint64_t v52 = 0;
              unint64_t v20 = v114;
              do
              {
                long long v53 = &v50[v52];
                unint64_t v54 = &v42[v52];
                *((_DWORD *)v53 - 22) = *(_DWORD *)&v42[v52 - 88];
                *((void *)v53 - 9) = 0;
                *((void *)v53 - 8) = 0;
                *((_OWORD *)v53 - 5) = *(_OWORD *)&v42[v52 - 80];
                *((void *)v53 - 8) = *(void *)&v42[v52 - 64];
                *((void *)v54 - 10) = 0;
                *((void *)v54 - 9) = 0;
                *((void *)v54 - 8) = 0;
                *(_OWORD *)(v53 - 56) = *(_OWORD *)&v42[v52 - 56];
                int v55 = v42[v52 - 16];
                *(v53 - 16) = v55;
                if (v55)
                {
                  long long v56 = *(_OWORD *)(v54 - 40);
                  *((void *)v53 - 3) = *((void *)v54 - 3);
                  *(_OWORD *)(v53 - 40) = v56;
                }
                *(v53 - 8) = *(v54 - 8);
                v52 -= 88;
              }
              while (&v42[v52] != v41);
              unint64_t v57 = v116;
              unsigned int v42 = (char *)*(v116 - 3);
              unsigned int v58 = *(v116 - 2);
              *(v116 - 3) = &v50[v52];
              *(v116 - 2) = v45;
              *(v116 - 1) = v51;
              while (v58 != (_OWORD *)v42)
              {
                if (*((unsigned char *)v58 - 16)) {
                  *((unsigned char *)v58 - 16) = 0;
                }
                unsigned int v59 = (void *)*((void *)v58 - 10);
                if (v59)
                {
                  *((void *)v58 - 9) = v59;
                  operator delete(v59);
                }
                unsigned int v58 = (_OWORD *)((char *)v58 - 88);
              }
            }
            if (v42) {
              operator delete(v42);
            }
            *(v57 - 2) = v45;
            if (v20) {
              goto LABEL_82;
            }
LABEL_84:
            uint64_t v17 = *v18;
            uint64_t v14 = *v15;
            if (v20 < 0xE21A291C077975B9 * ((*v18 - *v15) >> 3))
            {
              unint64_t v61 = v20;
              uint64_t v62 = (uint64_t)*v113 + 88 * v118;
              long long v65 = *(char **)(v62 + 16);
              unsigned int v64 = (char **)(v62 + 16);
              unsigned int v63 = v65;
              uint64_t v66 = (void **)(v64 - 1);
              unsigned int v67 = v64 + 1;
              unint64_t v68 = v61;
              while (1)
              {
                if ((unint64_t)v63 < *v67)
                {
                  *(void *)unsigned int v63 = v7;
                  *((void *)v63 + 1) = a4;
                  *((void *)v63 + 2) = v68;
                  v63 += 24;
                }
                else
                {
                  long long v69 = (char *)*v66;
                  unint64_t v70 = 0xAAAAAAAAAAAAAAABLL * ((v63 - (unsigned char *)*v66) >> 3);
                  unint64_t v71 = v70 + 1;
                  if (v70 + 1 > 0xAAAAAAAAAAAAAAALL) {
                    goto LABEL_130;
                  }
                  if (0x5555555555555556 * ((uint64_t)(*v67 - (void)v69) >> 3) > v71) {
                    unint64_t v71 = 0x5555555555555556 * ((uint64_t)(*v67 - (void)v69) >> 3);
                  }
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v67 - (void)v69) >> 3) >= 0x555555555555555) {
                    unint64_t v72 = 0xAAAAAAAAAAAAAAALL;
                  }
                  else {
                    unint64_t v72 = v71;
                  }
                  if (v72 > 0xAAAAAAAAAAAAAAALL) {
                    goto LABEL_129;
                  }
                  uint64_t v73 = 24 * v72;
                  unsigned int v74 = (char *)operator new(24 * v72);
                  BOOL v75 = &v74[24 * v70];
                  uint64_t v7 = a3;
                  *(void *)BOOL v75 = a3;
                  *((void *)v75 + 1) = a4;
                  *((void *)v75 + 2) = v68;
                  if (v63 == v69)
                  {
                    *uint64_t v66 = v75;
                    unsigned int v63 = v75 + 24;
                    *unsigned int v64 = v75 + 24;
                    *unsigned int v67 = &v74[v73];
                    if (!v69) {
                      goto LABEL_87;
                    }
                  }
                  else
                  {
                    long long v76 = v75;
                    do
                    {
                      long long v77 = *(_OWORD *)(v63 - 24);
                      unsigned int v78 = v76 - 24;
                      *((void *)v76 - 1) = *((void *)v63 - 1);
                      *(_OWORD *)(v76 - 24) = v77;
                      v63 -= 24;
                      v76 -= 24;
                    }
                    while (v63 != v69);
                    *uint64_t v66 = v78;
                    unsigned int v63 = v75 + 24;
                    *unsigned int v64 = v75 + 24;
                    *unsigned int v67 = &v74[v73];
                    if (!v69) {
                      goto LABEL_87;
                    }
                  }
                  operator delete(v69);
                }
LABEL_87:
                *unsigned int v64 = v63;
                ++v68;
                uint64_t v17 = *v18;
                uint64_t v14 = *v15;
                if (v68 >= 0xE21A291C077975B9 * ((*v18 - *v15) >> 3))
                {
                  unint64_t v20 = v114;
                  break;
                }
              }
            }
            unint64_t v40 = v118 + 1;
            uint64_t v39 = v116;
            if (v118 + 1 == v115) {
              goto LABEL_40;
            }
          }
          *((void *)v42 + 10) = 0;
          *((_OWORD *)v42 + 3) = 0u;
          *((_OWORD *)v42 + 4) = 0u;
          *((_OWORD *)v42 + 1) = 0u;
          *((_OWORD *)v42 + 2) = 0u;
          BOOL v45 = v42 + 88;
          *(_OWORD *)unsigned int v42 = 0u;
          *(v116 - 2) = v42 + 88;
          if (!v20) {
            goto LABEL_84;
          }
LABEL_82:
          int v60 = *(v45 - 16);
          *((void *)v45 - 5) = v7;
          *((void *)v45 - 4) = a4;
          *((void *)v45 - 3) = v112;
          if (!v60) {
            *(v45 - 16) = 1;
          }
          goto LABEL_84;
        }
LABEL_40:
        if (v20)
        {
          uint64_t v37 = v111 + 88 * v110;
          *(void *)(v37 + 32) = v109;
          *(unsigned char *)(v37 + 40) = 1;
        }
        uint64_t v12 = v108 + 1;
        if (v108 + 1 == v105)
        {
          uint64_t v9 = *(void *)(a1 + 32);
          goto LABEL_106;
        }
      }
    }
    unint64_t v109 = -1;
LABEL_106:
    uint64_t v79 = v9 + 24 * v7;
    unint64_t v82 = *(void *)(v79 + 40);
    long long v81 = (void *)(v79 + 40);
    unint64_t v80 = v82;
    uint64_t v83 = v81 - 1;
    uint64_t v84 = (unint64_t *)*(v81 - 1);
    if ((unint64_t)v84 >= v82)
    {
      unsigned int v86 = (unint64_t *)*(v81 - 2);
      uint64_t v87 = v84 - v86;
      unint64_t v88 = v87 + 1;
      if ((unint64_t)(v87 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v89 = v80 - (void)v86;
      if (v89 >> 2 > v88) {
        unint64_t v88 = v89 >> 2;
      }
      if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v90 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v90 = v88;
      }
      if (v90)
      {
        if (v90 >> 61) {
LABEL_129:
        }
          sub_188D718();
        uint64_t v91 = operator new(8 * v90);
      }
      else
      {
        uint64_t v91 = 0;
      }
      unsigned int v92 = (unint64_t *)&v91[8 * v87];
      uint64_t v93 = &v91[8 * v90];
      *unsigned int v92 = v109;
      std::string::size_type v85 = v92 + 1;
      if (v84 != v86)
      {
        unint64_t v94 = (char *)v84 - (char *)v86 - 8;
        if (v94 < 0x58) {
          goto LABEL_135;
        }
        if ((unint64_t)((char *)v86 - v91) < 0x20) {
          goto LABEL_135;
        }
        uint64_t v95 = (v94 >> 3) + 1;
        uint64_t v96 = 8 * (v95 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v97 = &v84[v96 / 0xFFFFFFFFFFFFFFF8];
        unsigned int v92 = (unint64_t *)((char *)v92 - v96);
        unint64_t v98 = &v91[8 * v87 - 16];
        unsigned int v99 = v84 - 2;
        uint64_t v100 = v95 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v101 = *(_OWORD *)v99;
          *(v98 - 1) = *((_OWORD *)v99 - 1);
          *unint64_t v98 = v101;
          v98 -= 2;
          v99 -= 4;
          v100 -= 4;
        }
        while (v100);
        uint64_t v84 = v97;
        if (v95 != (v95 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_135:
          do
          {
            unint64_t v102 = *--v84;
            *--unsigned int v92 = v102;
          }
          while (v84 != v86);
        }
      }
      *(v81 - 2) = v92;
      *uint64_t v83 = v85;
      *long long v81 = v93;
      if (v86) {
        operator delete(v86);
      }
    }
    else
    {
      *uint64_t v84 = v109;
      std::string::size_type v85 = v84 + 1;
    }
    *uint64_t v83 = v85;
  }
}

void **sub_93C4C4(void ***a1)
{
  uint64_t v3 = *a1;
  int v2 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (v2 - *a1);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * (a1[2] - v3) > v5) {
    unint64_t v5 = 0x5555555555555556 * (a1[2] - v3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (a1[2] - v3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v5;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[24 * v4];
  uint64_t v9 = &v7[24 * v6];
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  uint64_t v10 = (void **)(v8 + 24);
  if (v2 == v3)
  {
    *a1 = (void **)v8;
    a1[1] = v10;
    a1[2] = (void **)v9;
    if (!v2) {
      return v10;
    }
    goto LABEL_28;
  }
  do
  {
    uint64_t v11 = v8;
    *((void *)v8 - 2) = 0;
    *((void *)v8 - 1) = 0;
    long long v12 = *(_OWORD *)(v2 - 3);
    v2 -= 3;
    *(_OWORD *)(v8 - 24) = v12;
    v8 -= 24;
    *((void *)v11 - 1) = v2[2];
    *int v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
  }
  while (v2 != v3);
  uint64_t v13 = *a1;
  int v2 = a1[1];
  *a1 = (void **)v8;
  a1[1] = v10;
  a1[2] = (void **)v9;
  if (v2 != v13)
  {
    uint64_t v14 = v2;
    do
    {
      uint64_t v17 = (char *)*(v14 - 3);
      v14 -= 3;
      uint64_t v16 = v17;
      if (v17)
      {
        uint64_t v18 = (char *)*(v2 - 2);
        uint64_t v15 = v16;
        if (v18 != v16)
        {
          do
          {
            if (*(v18 - 16)) {
              *(v18 - 16) = 0;
            }
            uint64_t v19 = (void *)*((void *)v18 - 10);
            if (v19)
            {
              *((void *)v18 - 9) = v19;
              operator delete(v19);
            }
            v18 -= 88;
          }
          while (v18 != v16);
          uint64_t v15 = *v14;
        }
        *(v2 - 2) = v16;
        operator delete(v15);
      }
      int v2 = v14;
    }
    while (v14 != v13);
    int v2 = v13;
  }
  if (v2) {
LABEL_28:
  }
    operator delete(v2);
  return v10;
}

char *sub_93C660(void **a1)
{
  uint64_t v3 = (char *)*a1;
  int v2 = (char *)a1[1];
  uint64_t v4 = 0x2E8BA2E8BA2E8BA3 * ((v2 - (unsigned char *)*a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL) {
    sub_2E00();
  }
  if (0x5D1745D1745D1746 * (((unsigned char *)a1[2] - v3) >> 3) > v5) {
    unint64_t v5 = 0x5D1745D1745D1746 * (((unsigned char *)a1[2] - v3) >> 3);
  }
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (((unsigned char *)a1[2] - v3) >> 3)) >= 0x1745D1745D1745DLL) {
    unint64_t v6 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v6 = v5;
  }
  if (v6)
  {
    if (v6 > 0x2E8BA2E8BA2E8BALL) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(88 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[88 * v4];
  *((void *)v8 + 10) = 0;
  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  uint64_t v9 = &v7[88 * v6];
  *(_OWORD *)uint64_t v8 = 0u;
  uint64_t v10 = v8 + 88;
  if (v2 == v3)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v2) {
      return v10;
    }
    goto LABEL_25;
  }
  uint64_t v11 = 0;
  do
  {
    long long v12 = &v8[v11];
    uint64_t v13 = &v2[v11];
    *((_DWORD *)v12 - 22) = *(_DWORD *)&v2[v11 - 88];
    *((void *)v12 - 9) = 0;
    *((void *)v12 - 8) = 0;
    *((_OWORD *)v12 - 5) = *(_OWORD *)&v2[v11 - 80];
    *((void *)v12 - 8) = *(void *)&v2[v11 - 64];
    *((void *)v13 - 10) = 0;
    *((void *)v13 - 9) = 0;
    *((void *)v13 - 8) = 0;
    *(_OWORD *)(v12 - 56) = *(_OWORD *)&v2[v11 - 56];
    int v14 = v2[v11 - 16];
    *(v12 - 16) = v14;
    if (v14)
    {
      long long v15 = *(_OWORD *)(v13 - 40);
      *((void *)v12 - 3) = *((void *)v13 - 3);
      *(_OWORD *)(v12 - 40) = v15;
    }
    *(v12 - 8) = *(v13 - 8);
    v11 -= 88;
  }
  while (&v2[v11] != v3);
  uint64_t v16 = (char *)*a1;
  int v2 = (char *)a1[1];
  *a1 = &v8[v11];
  a1[1] = v10;
  a1[2] = v9;
  if (v2 != v16)
  {
    do
    {
      if (*(v2 - 16)) {
        *(v2 - 16) = 0;
      }
      uint64_t v17 = (void *)*((void *)v2 - 10);
      if (v17)
      {
        *((void *)v2 - 9) = v17;
        operator delete(v17);
      }
      v2 -= 88;
    }
    while (v2 != v16);
    int v2 = v16;
  }
  if (v2) {
LABEL_25:
  }
    operator delete(v2);
  return v10;
}

void sub_93C830()
{
  unk_25D53CF = 16641;
  word_25D53B8 = 65;
  byte_25D53E7 = 1;
  byte_25D53D1 = 0;
}

void *sub_93C858(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (void *)sub_9C8904((uint64_t)a1, a2, a3);
  void *v4 = off_243C0A0;
  v4[26] = 0;
  long long v34 = (char **)(v4 + 26);
  v4[27] = 0;
  v4[28] = 0;
  uint64_t v5 = v4[1];
  unint64_t v6 = *(uint64_t **)v5;
  if (*(void *)(v5 + 8) == *(void *)v5) {
    sub_66748();
  }
  uint64_t v8 = *v6;
  uint64_t v7 = v6[1];
  if (*v6 != v7)
  {
    uint64_t v9 = *(void *)(v8 + 16);
    if (*(void *)(v8 + 8) != v9 && *(_DWORD *)(v9 - 5704) == 4)
    {
      uint64_t v10 = 0;
      uint64_t v33 = v7;
      do
      {
        while (1)
        {
          long long v12 = *(_DWORD **)(v8 + 8);
          uint64_t v11 = *(_DWORD **)(v8 + 16);
          if (v12 != v11)
          {
            while (*v12 != 2)
            {
              v12 += 1426;
              if (v12 == v11)
              {
                long long v12 = *(_DWORD **)(v8 + 16);
                break;
              }
            }
          }
          unint64_t v13 = a1[28];
          if ((unint64_t)v10 >= v13) {
            break;
          }
          *(void *)uint64_t v10 = v12;
          v10 += 8;
          a1[27] = v10;
          v8 += 104;
          if (v8 == v7) {
            return a1;
          }
        }
        int v14 = *v34;
        uint64_t v15 = v10 - *v34;
        uint64_t v16 = v15 >> 3;
        unint64_t v17 = (v15 >> 3) + 1;
        if (v17 >> 61) {
          sub_2E00();
        }
        uint64_t v18 = v13 - (void)v14;
        if (v18 >> 2 > v17) {
          unint64_t v17 = v18 >> 2;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v17;
        }
        if (v19)
        {
          if (v19 >> 61) {
            sub_188D718();
          }
          unint64_t v20 = operator new(8 * v19);
          int v21 = &v20[8 * v16];
          *int v21 = v12;
          uint64_t v22 = (uint64_t)(v21 + 1);
          if (v10 != v14)
          {
LABEL_26:
            unint64_t v23 = v10 - 8 - v14;
            if (v23 < 0x168)
            {
              BOOL v24 = v10;
              goto LABEL_28;
            }
            if (&v20[v15 - 8 - (v23 & 0xFFFFFFFFFFFFFFF8)] > &v20[v15 - 8])
            {
              BOOL v24 = v10;
              goto LABEL_28;
            }
            if (&v10[-(v23 & 0xFFFFFFFFFFFFFFF8) - 8] > v10 - 8)
            {
              BOOL v24 = v10;
              goto LABEL_28;
            }
            if ((unint64_t)(v10 - v20 - v15) < 0x20)
            {
              BOOL v24 = v10;
              goto LABEL_28;
            }
            uint64_t v26 = (v23 >> 3) + 1;
            uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
            BOOL v24 = &v10[-v27];
            int v21 = (void *)((char *)v21 - v27);
            char v28 = &v20[8 * v16 - 16];
            unint64_t v29 = v10 - 16;
            uint64_t v30 = v26 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v31 = *(_OWORD *)v29;
              *(v28 - 1) = *((_OWORD *)v29 - 1);
              *char v28 = v31;
              v28 -= 2;
              v29 -= 32;
              v30 -= 4;
            }
            while (v30);
            if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_28:
                uint64_t v25 = *((void *)v24 - 1);
                v24 -= 8;
                *--int v21 = v25;
              }
              while (v24 != v14);
            }
            uint64_t v10 = *v34;
            a1[26] = v21;
            a1[27] = v22;
            a1[28] = &v20[8 * v19];
            if (!v10) {
              goto LABEL_23;
            }
LABEL_22:
            operator delete(v10);
            goto LABEL_23;
          }
        }
        else
        {
          unint64_t v20 = 0;
          int v21 = (void *)(8 * v16);
          *(void *)(8 * v16) = v12;
          uint64_t v22 = 8 * v16 + 8;
          if (v10 != v14) {
            goto LABEL_26;
          }
        }
        a1[26] = v21;
        a1[27] = v22;
        a1[28] = &v20[8 * v19];
        if (v10) {
          goto LABEL_22;
        }
LABEL_23:
        uint64_t v7 = v33;
        a1[27] = v22;
        v8 += 104;
        uint64_t v10 = (char *)v22;
      }
      while (v8 != v33);
    }
  }
  return a1;
}

void sub_93CB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  long long v12 = *a10;
  if (*a10)
  {
    *(void *)(v10 + 216) = v12;
    operator delete(v12);
  }
  sub_92F570(v10);
  _Unwind_Resume(a1);
}

void sub_93CB44(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 174) || *(_DWORD *)(*(void *)(a1 + 40) + 8) == 1 || *(unsigned char *)(a1 + 173))
  {
    sub_9C9A28(a1, a2);
  }
  else
  {
    sub_5F3BA0((uint64_t)v4, (__int16 *)(*(void *)(a1 + 32) + 1177), &xmmword_25D5688);
    if (sub_9C945C((void *)a1))
    {
      if (sub_93CC4C(a1)) {
        sub_93CD30((long long *)a1, (uint64_t)a2);
      }
      sub_93D538((void *)a1, a2);
    }
    else if (sub_9C937C(a1))
    {
      sub_93D7B0(a1, (uint64_t)a2);
    }
    else
    {
      sub_93D658(a1, (uint64_t)a2);
    }
    sub_4D4B58((uint64_t)v4);
  }
}

void sub_93CC38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_93CC4C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 176);
  if (!v1) {
    return 0;
  }
  BOOL result = sub_98EC14(*(_DWORD *)(*(void *)(a1 + 40) + 4), v1, *(void *)(a1 + 32), *(int **)(a1 + 48));
  if (result)
  {
    uint64_t v4 = *(void *)(a1 + 176);
    if (!*(unsigned char *)(v4 + 792))
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_2439078;
    }
    uint64_t v5 = *(void *)(a1 + 16);
    unint64_t v6 = *(void *)(v4 + 752);
    uint64_t v7 = *(void *)(v5 + 72);
    if (0x66FD0EB66FD0EB67 * ((*(void *)(v5 + 80) - v7) >> 3) <= v6) {
      sub_66748();
    }
    return *(unsigned char *)(v7 + 696 * v6 + 554) == 1;
  }
  return result;
}

void sub_93CD30(long long *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (__int16 *)(*((void *)a1 + 4) + 1177);
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 72))(__p);
  sub_5F3BA0(a2, v4, (long long *)__p);
  if (SHIBYTE(v47) < 0) {
    operator delete(__p[0]);
  }
  sub_9C93D8((uint64_t)a1, (uint64_t)__p);
  if (!BYTE2(__p[0]))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  sub_98C68C(LOWORD(__p[0]), (uint64_t)&v55);
  uint64_t v5 = (void *)*((void *)a1 + 1);
  uint64_t v45 = a2;
  if (v5[1] == *v5) {
    sub_66748();
  }
  int v6 = *(unsigned __int8 *)(*v5 + 24);
  sub_93DBE8((uint64_t)a1, (unint64_t *)&v54);
  long long v52 = 0uLL;
  unint64_t v53 = 0;
  long long v50 = 0uLL;
  unint64_t v51 = 0;
  v48[0] = 0;
  v48[1] = 0;
  unint64_t v49 = 0;
  if (v6)
  {
    int v7 = (char)v57;
    if ((v57 & 0x80u) == 0) {
      size_t v8 = v57;
    }
    else {
      size_t v8 = v56;
    }
    unint64_t v9 = v8 + 27;
    if (v8 + 27 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v9 > 0x16)
    {
      uint64_t v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17) {
        uint64_t v15 = v9 | 7;
      }
      uint64_t v16 = v15 + 1;
      uint64_t v10 = operator new(v15 + 1);
      __p[1] = (void *)(v8 + 27);
      unint64_t v47 = v16 | 0x8000000000000000;
      __p[0] = v10;
      if (!v8)
      {
        char v18 = 1;
        goto LABEL_25;
      }
    }
    else
    {
      __p[1] = 0;
      unint64_t v47 = 0;
      __p[0] = 0;
      uint64_t v10 = __p;
      HIBYTE(v47) = v8 + 27;
    }
    if (v7 >= 0) {
      unint64_t v17 = &v55;
    }
    else {
      unint64_t v17 = v55;
    }
    memmove(v10, v17, v8);
    char v18 = 0;
LABEL_25:
    strcpy((char *)v10 + v8, " departs in {CountdownList}");
    unint64_t v53 = v47;
    long long v52 = *(_OWORD *)__p;
    unint64_t v19 = v8 + 29;
    if (v8 + 29 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v19 > 0x16)
    {
      uint64_t v26 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v19 | 7) != 0x17) {
        uint64_t v26 = v19 | 7;
      }
      uint64_t v27 = v26 + 1;
      unint64_t v20 = operator new(v26 + 1);
      __p[1] = (void *)(v8 + 29);
      unint64_t v47 = v27 | 0x8000000000000000;
      __p[0] = v20;
      if (v18)
      {
LABEL_32:
        strcpy((char *)v20 + v8, " departs now, {CountdownList}");
        long long v50 = *(_OWORD *)__p;
        unint64_t v51 = v47;
        unint64_t v22 = v8 + 12;
        if (v8 + 12 > 0x7FFFFFFFFFFFFFF7) {
          sub_188D690();
        }
        if (v22 > 0x16)
        {
          uint64_t v28 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v22 | 7) != 0x17) {
            uint64_t v28 = v22 | 7;
          }
          uint64_t v29 = v28 + 1;
          unint64_t v23 = operator new(v28 + 1);
          __p[1] = (void *)(v8 + 12);
          unint64_t v47 = v29 | 0x8000000000000000;
          __p[0] = v23;
          uint64_t v24 = v45;
          if (v18) {
            goto LABEL_39;
          }
        }
        else
        {
          __p[1] = 0;
          unint64_t v47 = 0;
          __p[0] = 0;
          unint64_t v23 = __p;
          HIBYTE(v47) = v8 + 12;
          uint64_t v24 = v45;
          if (v18)
          {
LABEL_39:
            strcpy((char *)v23 + v8, " departs now");
            goto LABEL_70;
          }
        }
        if (v7 >= 0) {
          uint64_t v25 = &v55;
        }
        else {
          uint64_t v25 = v55;
        }
        memmove(v23, v25, v8);
        goto LABEL_39;
      }
    }
    else
    {
      __p[1] = 0;
      unint64_t v47 = 0;
      __p[0] = 0;
      unint64_t v20 = __p;
      HIBYTE(v47) = v8 + 29;
      if (v18) {
        goto LABEL_32;
      }
    }
    if (v7 >= 0) {
      int v21 = &v55;
    }
    else {
      int v21 = v55;
    }
    memmove(v20, v21, v8);
    goto LABEL_32;
  }
  int v11 = (char)v57;
  if ((v57 & 0x80u) == 0) {
    size_t v12 = v57;
  }
  else {
    size_t v12 = v56;
  }
  unint64_t v13 = v12 + 29;
  if (v12 + 29 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v13 > 0x16)
  {
    uint64_t v30 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v30 = v13 | 7;
    }
    uint64_t v31 = v30 + 1;
    int v14 = operator new(v30 + 1);
    __p[1] = (void *)(v12 + 29);
    unint64_t v47 = v31 | 0x8000000000000000;
    __p[0] = v14;
    if (!v12)
    {
      char v33 = 1;
      goto LABEL_55;
    }
  }
  else
  {
    __p[1] = 0;
    unint64_t v47 = 0;
    __p[0] = 0;
    int v14 = __p;
    HIBYTE(v47) = v12 + 29;
  }
  if (v11 >= 0) {
    uint64_t v32 = &v55;
  }
  else {
    uint64_t v32 = v55;
  }
  memmove(v14, v32, v12);
  char v33 = 0;
LABEL_55:
  strcpy((char *)v14 + v12, " scheduled in {CountdownList}");
  unint64_t v53 = v47;
  long long v52 = *(_OWORD *)__p;
  unint64_t v34 = v12 + 31;
  if (v12 + 31 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v34 > 0x16)
  {
    uint64_t v40 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v34 | 7) != 0x17) {
      uint64_t v40 = v34 | 7;
    }
    uint64_t v41 = v40 + 1;
    long long v35 = operator new(v40 + 1);
    __p[1] = (void *)(v12 + 31);
    unint64_t v47 = v41 | 0x8000000000000000;
    __p[0] = v35;
    if (v33)
    {
LABEL_62:
      strcpy((char *)v35 + v12, " scheduled now, {CountdownList}");
      long long v50 = *(_OWORD *)__p;
      unint64_t v51 = v47;
      unint64_t v37 = v12 + 14;
      if (v12 + 14 > 0x7FFFFFFFFFFFFFF7) {
        sub_188D690();
      }
      if (v37 > 0x16)
      {
        uint64_t v42 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v37 | 7) != 0x17) {
          uint64_t v42 = v37 | 7;
        }
        uint64_t v43 = v42 + 1;
        uint64_t v38 = operator new(v42 + 1);
        __p[1] = (void *)(v12 + 14);
        unint64_t v47 = v43 | 0x8000000000000000;
        __p[0] = v38;
        uint64_t v24 = v45;
        if (v33) {
          goto LABEL_69;
        }
      }
      else
      {
        __p[1] = 0;
        unint64_t v47 = 0;
        __p[0] = 0;
        uint64_t v38 = __p;
        HIBYTE(v47) = v12 + 14;
        uint64_t v24 = v45;
        if (v33)
        {
LABEL_69:
          strcpy((char *)v38 + v12, " scheduled now");
LABEL_70:
          *(_OWORD *)unint64_t v48 = *(_OWORD *)__p;
          unint64_t v49 = v47;
          sub_93D538(a1, (uint64_t *)__p);
          sub_98E460(&v54, (uint64_t)&v52, (uint64_t)&v50, (uint64_t)v48, *((void *)a1 + 3), v24, 0, (uint64_t)__p, a1 + 9, (uint64_t)&word_25D5A60);
        }
      }
      if (v11 >= 0) {
        uint64_t v39 = &v55;
      }
      else {
        uint64_t v39 = v55;
      }
      memmove(v38, v39, v12);
      goto LABEL_69;
    }
  }
  else
  {
    __p[1] = 0;
    unint64_t v47 = 0;
    __p[0] = 0;
    long long v35 = __p;
    HIBYTE(v47) = v12 + 31;
    if (v33) {
      goto LABEL_62;
    }
  }
  if (v11 >= 0) {
    uint64_t v36 = &v55;
  }
  else {
    uint64_t v36 = v55;
  }
  memmove(v35, v36, v12);
  goto LABEL_62;
}

void sub_93D3F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (*(char *)(v41 - 169) < 0)
  {
    operator delete(*(void **)(v41 - 192));
    if ((*(char *)(v41 - 137) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v43 = *(void **)(v41 - 136);
      if (!v43) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(v41 - 137) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v41 - 160));
  uint64_t v43 = *(void **)(v41 - 136);
  if (!v43)
  {
LABEL_4:
    if ((*(char *)(v41 - 89) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  *(void *)(v41 - 128) = v43;
  operator delete(v43);
  if ((*(char *)(v41 - 89) & 0x80000000) == 0)
  {
LABEL_6:
    sub_4D4B58(a12);
    _Unwind_Resume(a1);
  }
LABEL_5:
  operator delete(*(void **)(v41 - 112));
  goto LABEL_6;
}

uint64_t sub_93D538@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_5F3BA0((uint64_t)a2, (__int16 *)(a1[4] + 1177), &xmmword_25D5688);
  uint64_t v4 = a1[3];
  long long __p = operator new(0x20uLL);
  long long v10 = xmmword_20B8E90;
  strcpy((char *)__p, "Scheduled every {TripFrequency}");
  uint64_t v5 = sub_8D7730(v4, (uint64_t)&__p);
  sub_5F41E8((uint64_t)a2, (uint64_t)v5);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p);
  }
  int v6 = (int *)nullsub_1(a1[1] + 48);
  int v7 = (int *)sub_BBB4(a1[1] + 48);
  return sub_5F3EF4(a2, (uint64_t)&qword_25D5760, v6, v7);
}

void sub_93D61C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_4D4B58(v15);
  _Unwind_Resume(a1);
}

void sub_93D658(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_5F3BA0(a2, (__int16 *)(*(void *)(a1 + 32) + 1177), &xmmword_25D5688);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_20B91C0;
  strcpy(__p.__r_.__value_.__l.__data_, "RouteDescription_LowFreq");
  int v5 = sub_9C93A0(a1);
  sub_5F5F70(a2, &xmmword_25D5850, &v5, a1 + 96, 0);
  int v5 = sub_9C93A0(a1);
  sub_98D43C(&v5, (const char *)(a1 + 96), (const char *)(a1 + 96), *(void *)(a1 + 32) + 1177, *(int **)(a1 + 40), &__p, a2);
  uint64_t v4 = sub_8D7730(*(void *)(a1 + 24), (uint64_t)&__p);
  sub_5F41E8(a2, (uint64_t)v4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_93D770(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_93D784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_4D4B58(v15);
  _Unwind_Resume(a1);
}

void sub_93D7B0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (__int16 *)(*(void *)(a1 + 32) + 1177);
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 72))(__p);
  sub_5F3BA0(a2, v4, (long long *)__p);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  sub_9C92C0(a1, (uint64_t)__p);
  LODWORD(v16[0]) = __p[0];
  sub_5F5F70(a2, (long long *)&qword_25D5868, v16, a1 + 144, 0);
  sub_9C93D8(a1, (uint64_t)&__dst);
  if (!__dst.__r_.__value_.__s.__data_[2])
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  sub_98C68C(LOWORD(__dst.__r_.__value_.__l.__data_), (uint64_t)v16);
  if (HIDWORD(__p[0]) != 0x7FFFFFFF && LOBYTE(__p[1]) == 1)
  {
    std::operator+<char>();
    goto LABEL_21;
  }
  int v5 = (char)v17;
  if ((v17 & 0x80u) == 0) {
    size_t v6 = v17;
  }
  else {
    size_t v6 = (size_t)v16[1];
  }
  unint64_t v7 = v6 + 41;
  if (v6 + 41 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v7 > 0x16)
  {
    uint64_t v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v9 = v7 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = v6 + 41;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v6 + 41;
  }
  if (v5 >= 0) {
    int v11 = v16;
  }
  else {
    int v11 = (void **)v16[0];
  }
  memmove(p_dst, v11, v6);
LABEL_20:
  strcpy((char *)p_dst + v6, " scheduled at {FirstVehicleDepartureTime}");
LABEL_21:
  int v14 = (int)__p[0];
  sub_98D43C(&v14, (const char *)(a1 + 144), (const char *)(a1 + 144), *(void *)(a1 + 32) + 1177, *(int **)(a1 + 40), &__dst, a2);
  size_t v12 = sub_8D7730(*(void *)(a1 + 24), (uint64_t)&__dst);
  sub_5F41E8(a2, (uint64_t)v12);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 56))(a1, a2);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (((char)v17 & 0x80000000) == 0) {
      return;
    }
LABEL_25:
    operator delete(v16[0]);
    return;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if ((char)v17 < 0) {
    goto LABEL_25;
  }
}

void sub_93DA68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_4D4B58(v28);
  _Unwind_Resume(a1);
}

uint64_t sub_93DAD4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 173)) {
    return 0;
  }
  if (sub_9C945C((void *)a1))
  {
    uint64_t result = sub_93CC4C(a1);
    if (result)
    {
      uint64_t v3 = *(void *)(a1 + 208);
      uint64_t v4 = *(void *)(a1 + 216);
      if (v3 == v4)
      {
        return 0;
      }
      else
      {
        uint64_t v5 = v3 + 8;
        do
        {
          uint64_t v6 = *(void *)(v5 - 8);
          if (!*(unsigned char *)(v6 + 792))
          {
            exception = __cxa_allocate_exception(8uLL);
            void *exception = &off_2439078;
          }
          uint64_t result = sub_97CA20((void *)(v6 + 488));
          if (result) {
            break;
          }
          BOOL v7 = v5 == v4;
          v5 += 8;
        }
        while (!v7);
      }
    }
  }
  else
  {
    uint64_t result = sub_9C937C(a1);
    if (result)
    {
      sub_9C92C0(a1, (uint64_t)v9);
      return v9[8] == 1;
    }
  }
  return result;
}

uint64_t sub_93DBE0@<X0>(uint64_t a1@<X8>)
{
  return sub_5F3B34(a1);
}

void sub_93DBE8(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  int v2 = *(uint64_t **)(a1 + 208);
  uint64_t v3 = *(uint64_t **)(a1 + 216);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v2 != v3)
  {
    do
    {
      uint64_t v5 = *v2;
      if (!*(unsigned char *)(*v2 + 792))
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_2439078;
      }
      uint64_t v6 = *(char **)(v5 + 488);
      BOOL v7 = *(char **)(v5 + 496);
      if (v6 != v7) {
        sub_9392F0((uint64_t)a2, a2[1], v6, v7, 0x6DB6DB6DB6DB6DB7 * ((v7 - v6) >> 2));
      }
      ++v2;
    }
    while (v2 != v3);
    unint64_t v8 = *a2;
    uint64_t v9 = (_OWORD *)a2[1];
    unint64_t v10 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * ((uint64_t)((uint64_t)v9 - *a2) >> 2));
    if (v9 == (_OWORD *)*a2) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = v10;
    }
    sub_93E0C4(v8, v9, v11, 1);
  }
}

void sub_93DD14(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_93DD34(uint64_t a1, uint64_t a2)
{
  memset(&v19, 0, sizeof(v19));
  sub_9C92C0(a1, (uint64_t)&v15);
  if (v17)
  {
    if (v18 == 1)
    {
      sub_97C8E8(*(void **)(a1 + 16), *(void *)(*(void *)(a1 + 176) + 56));
      int v9 = sub_97C680(*(uint64_t **)(a1 + 16), *(void *)(*(void *)(a1 + 176) + 56));
      sub_98D04C(v9, (uint64_t)&v14);
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v19.__r_.__value_.__l.__data_);
      }
      std::string v19 = v14;
      int v4 = 2;
      unsigned int v5 = 5;
      std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
      char v7 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
      if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v14.__r_.__value_.__l.__size_;
      }
      if (size) {
        goto LABEL_29;
      }
    }
    else
    {
      if (v18 == 2)
      {
        std::string::assign(&v19, "Cancelled");
        int v4 = 2;
        unsigned int v5 = 4;
        std::string::size_type v6 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
        char v7 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
        if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v6 = v19.__r_.__value_.__l.__size_;
        }
        if (!v6) {
          goto LABEL_30;
        }
LABEL_29:
        unint64_t v13 = sub_8D7730(*(void *)(a1 + 24), (uint64_t)&v19);
        sub_5F4680(a2, (uint64_t)v13, (uint64_t)&word_25D5A48, v4);
        sub_98ED08(a2, v5);
        char v7 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
        goto LABEL_30;
      }
      if ((int)fabs((double)(10 * (v15 - v16))) < 600)
      {
        std::string::assign(&v19, "On-time");
        unsigned int v5 = 1;
        int v4 = 1;
        std::string::size_type v12 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
        char v7 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
        if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v12 = v19.__r_.__value_.__l.__size_;
        }
        if (v12) {
          goto LABEL_29;
        }
      }
      else
      {
        if (v15 >= v16) {
          unsigned int v5 = 2;
        }
        else {
          unsigned int v5 = 3;
        }
        std::string::assign(&v19, "Now {LiveDepartureTime}");
        LODWORD(v14.__r_.__value_.__l.__data_) = v16;
        sub_5F5F70(a2, &xmmword_25D5910, &v14, a1 + 144, 0);
        int v4 = 2;
        std::string::size_type v11 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
        char v7 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
        if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v11 = v19.__r_.__value_.__l.__size_;
        }
        if (v11) {
          goto LABEL_29;
        }
      }
    }
  }
  else
  {
    unsigned int v5 = 0;
    int v4 = 0;
    std::string::size_type v8 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
    char v7 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v8 = v19.__r_.__value_.__l.__size_;
    }
    if (v8) {
      goto LABEL_29;
    }
  }
LABEL_30:
  if (v7 < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
}

void sub_93DF6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_93DF9C(uint64_t a1, int a2, uint64_t a3)
{
}

void *sub_93DFB4@<X0>(uint64_t a1@<X8>)
{
  if (byte_25D569F < 0) {
    return sub_4200((unsigned char *)a1, (void *)xmmword_25D5688, *((unint64_t *)&xmmword_25D5688 + 1));
  }
  *(_OWORD *)a1 = xmmword_25D5688;
  *(void *)(a1 + 16) = unk_25D5698;
  return result;
}

uint64_t sub_93DFF0(void *a1)
{
  *a1 = off_243C0A0;
  int v2 = (void *)a1[26];
  if (v2)
  {
    a1[27] = v2;
    operator delete(v2);
  }

  return sub_92F570((uint64_t)a1);
}

void sub_93E050(void *a1)
{
  *a1 = off_243C0A0;
  int v2 = (void *)a1[26];
  if (v2)
  {
    a1[27] = v2;
    operator delete(v2);
  }
  sub_92F570((uint64_t)a1);

  operator delete();
}

void sub_93E0C4(unint64_t a1, _OWORD *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = (_OWORD *)((char *)a2 - 28);
    std::string::size_type v11 = (_OWORD *)((char *)a2 - 56);
    std::string::size_type v12 = (_OWORD *)((char *)a2 - 84);
    unint64_t v13 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v13;
          uint64_t v14 = (uint64_t)a2 - v13;
          uint64_t v15 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)((uint64_t)a2 - v13) >> 2);
          if (v5 || !v4)
          {
            switch(v15)
            {
              case 0:
              case 1:
                return;
              case 2:
                if (*((_DWORD *)a2 - 6) < *(_DWORD *)(v13 + 4))
                {
                  *(_OWORD *)&v167[12] = *(_OWORD *)(v13 + 12);
                  *(_OWORD *)int64x2_t v167 = *(_OWORD *)v13;
                  long long v82 = *(_OWORD *)((char *)a2 - 28);
                  *(_OWORD *)(v13 + 12) = *(a2 - 1);
                  *(_OWORD *)unint64_t v13 = v82;
                  *(a2 - 1) = *(_OWORD *)&v167[12];
                  *(_OWORD *)((char *)a2 - 28) = *(_OWORD *)v167;
                }
                return;
              case 3:
                uint64_t v83 = (_OWORD *)(v13 + 28);
                int v84 = *(_DWORD *)(v13 + 32);
                int v85 = *((_DWORD *)a2 - 6);
                if (v84 >= *(_DWORD *)(v13 + 4))
                {
                  if (v85 < v84)
                  {
                    *(_OWORD *)char v176 = *v83;
                    *(_OWORD *)&v176[12] = *(_OWORD *)(v13 + 40);
                    long long v131 = *v10;
                    *(_OWORD *)(v13 + 40) = *(a2 - 1);
                    *uint64_t v83 = v131;
                    *(a2 - 1) = *(_OWORD *)&v176[12];
                    long long *v10 = *(_OWORD *)v176;
                    if (*(_DWORD *)(v13 + 32) < *(_DWORD *)(v13 + 4))
                    {
                      *(_OWORD *)&v177[12] = *(_OWORD *)(v13 + 12);
                      *(_OWORD *)v177 = *(_OWORD *)v13;
                      *(_OWORD *)unint64_t v13 = *v83;
                      *(_OWORD *)(v13 + 12) = *(_OWORD *)(v13 + 40);
                      *uint64_t v83 = *(_OWORD *)v177;
                      *(_OWORD *)(v13 + 40) = *(_OWORD *)&v177[12];
                    }
                  }
                }
                else
                {
                  if (v85 >= v84)
                  {
                    *(_OWORD *)&v179[12] = *(_OWORD *)(v13 + 12);
                    *(_OWORD *)long long v179 = *(_OWORD *)v13;
                    *(_OWORD *)unint64_t v13 = *v83;
                    *(_OWORD *)(v13 + 12) = *(_OWORD *)(v13 + 40);
                    *uint64_t v83 = *(_OWORD *)v179;
                    *(_OWORD *)(v13 + 40) = *(_OWORD *)&v179[12];
                    if (*((_DWORD *)a2 - 6) >= *(_DWORD *)(v13 + 32)) {
                      return;
                    }
                    *(_OWORD *)unint64_t v168 = *v83;
                    *(_OWORD *)&v168[12] = *(_OWORD *)(v13 + 40);
                    long long v137 = *v10;
                    *(_OWORD *)(v13 + 40) = *(a2 - 1);
                    *uint64_t v83 = v137;
                  }
                  else
                  {
                    *(_OWORD *)&v168[12] = *(_OWORD *)(v13 + 12);
                    *(_OWORD *)unint64_t v168 = *(_OWORD *)v13;
                    long long v86 = *v10;
                    *(_OWORD *)(v13 + 12) = *(a2 - 1);
                    *(_OWORD *)unint64_t v13 = v86;
                  }
                  *(a2 - 1) = *(_OWORD *)&v168[12];
                  long long *v10 = *(_OWORD *)v168;
                }
                break;
              case 4:
                sub_93F6DC(v13, v13 + 28, v13 + 56, (uint64_t)a2 - 28);
                return;
              case 5:
                uint64_t v87 = (_OWORD *)(v13 + 28);
                unint64_t v88 = (_OWORD *)(v13 + 56);
                uint64_t v89 = (_OWORD *)(v13 + 84);
                sub_93F6DC(v13, v13 + 28, v13 + 56, v13 + 84);
                if (*((_DWORD *)a2 - 6) < *(_DWORD *)(v13 + 88))
                {
                  *(_OWORD *)v169 = *v89;
                  *(_OWORD *)&v169[12] = *(_OWORD *)(v13 + 96);
                  long long v90 = *(_OWORD *)((char *)a2 - 28);
                  *(_OWORD *)(v13 + 96) = *(a2 - 1);
                  *uint64_t v89 = v90;
                  *(a2 - 1) = *(_OWORD *)&v169[12];
                  *(_OWORD *)((char *)a2 - 28) = *(_OWORD *)v169;
                  if (*(_DWORD *)(v13 + 88) < *(_DWORD *)(v13 + 60))
                  {
                    *(_OWORD *)long long v170 = *v88;
                    *(_OWORD *)&v170[12] = *(_OWORD *)(v13 + 68);
                    *unint64_t v88 = *v89;
                    *(_OWORD *)(v13 + 68) = *(_OWORD *)(v13 + 96);
                    *uint64_t v89 = *(_OWORD *)v170;
                    *(_OWORD *)(v13 + 96) = *(_OWORD *)&v170[12];
                    if (*(_DWORD *)(v13 + 60) < *(_DWORD *)(v13 + 32))
                    {
                      *(_OWORD *)v171 = *v87;
                      *(_OWORD *)&v171[12] = *(_OWORD *)(v13 + 40);
                      *uint64_t v87 = *v88;
                      *(_OWORD *)(v13 + 40) = *(_OWORD *)(v13 + 68);
                      *unint64_t v88 = *(_OWORD *)v171;
                      *(_OWORD *)(v13 + 68) = *(_OWORD *)&v171[12];
                      if (*(_DWORD *)(v13 + 32) < *(_DWORD *)(v13 + 4))
                      {
                        *(_OWORD *)&v172[12] = *(_OWORD *)(v13 + 12);
                        *(_OWORD *)char v172 = *(_OWORD *)v13;
                        *(_OWORD *)unint64_t v13 = *v87;
                        *(_OWORD *)(v13 + 12) = *(_OWORD *)(v13 + 40);
                        *uint64_t v87 = *(_OWORD *)v172;
                        *(_OWORD *)(v13 + 40) = *(_OWORD *)&v172[12];
                      }
                    }
                  }
                }
                return;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v14 <= 671)
          {
            uint64_t v91 = (_DWORD *)(v13 + 28);
            BOOL v93 = (_OWORD *)v13 == a2 || v91 == (_DWORD *)a2;
            if (a4)
            {
              if (!v93)
              {
                uint64_t v94 = 0;
                uint64_t v95 = (_DWORD *)v13;
                do
                {
                  uint64_t v97 = v91;
                  int v98 = v95[8];
                  if (v98 < v95[1])
                  {
                    int v99 = *v97;
                    long long v173 = *(_OWORD *)(v95 + 9);
                    int v180 = v95[13];
                    uint64_t v100 = v94;
                    do
                    {
                      uint64_t v101 = v13 + v100;
                      *(_OWORD *)(v101 + 28) = *(_OWORD *)(v13 + v100);
                      *(_OWORD *)(v101 + 40) = *(_OWORD *)(v13 + v100 + 12);
                      if (!v100)
                      {
                        uint64_t v96 = v13;
                        goto LABEL_122;
                      }
                      v100 -= 28;
                    }
                    while (v98 < *(_DWORD *)(v101 - 24));
                    uint64_t v96 = v13 + v100 + 28;
LABEL_122:
                    *(_DWORD *)uint64_t v96 = v99;
                    *(_DWORD *)(v96 + 4) = v98;
                    *(_DWORD *)(v96 + 24) = v180;
                    *(_OWORD *)(v96 + 8) = v173;
                  }
                  uint64_t v91 = v97 + 7;
                  v94 += 28;
                  uint64_t v95 = v97;
                }
                while (v97 + 7 != (_DWORD *)a2);
              }
            }
            else if (!v93)
            {
              do
              {
                unint64_t v132 = v91;
                int v133 = *(_DWORD *)(a1 + 32);
                if (v133 < *(_DWORD *)(a1 + 4))
                {
                  int v134 = *v91;
                  long long v178 = *(_OWORD *)(a1 + 36);
                  int v182 = *(_DWORD *)(a1 + 52);
                  unint64_t v135 = v132;
                  do
                  {
                    *(_OWORD *)unint64_t v135 = *(_OWORD *)(v135 - 7);
                    *(_OWORD *)(v135 + 3) = *((_OWORD *)v135 - 1);
                    int v136 = *(v135 - 13);
                    v135 -= 7;
                  }
                  while (v133 < v136);
                  *unint64_t v135 = v134;
                  v135[1] = v133;
                  v135[6] = v182;
                  *(_OWORD *)(v135 + 2) = v178;
                }
                uint64_t v91 = v132 + 7;
                a1 = (unint64_t)v132;
              }
              while (v132 + 7 != (_DWORD *)a2);
            }
            return;
          }
          if (!a3)
          {
            if ((_OWORD *)v13 != a2)
            {
              int64_t v102 = (unint64_t)(v15 - 2) >> 1;
              int64_t v103 = v102;
              do
              {
                if (v102 >= v103)
                {
                  uint64_t v105 = (2 * v103) | 1;
                  unint64_t v106 = v13 + 28 * v105;
                  if (2 * v103 + 2 < v15)
                  {
                    BOOL v104 = *(_DWORD *)(v106 + 4) < *(_DWORD *)(v106 + 32);
                    v106 += 28 * v104;
                    if (v104) {
                      uint64_t v105 = 2 * v103 + 2;
                    }
                  }
                  unint64_t v107 = v13 + 28 * v103;
                  int v108 = *(_DWORD *)(v107 + 4);
                  if (*(_DWORD *)(v106 + 4) >= v108)
                  {
                    int v109 = *(_DWORD *)v107;
                    int v181 = *(_DWORD *)(v107 + 24);
                    long long v174 = *(_OWORD *)(v107 + 8);
                    do
                    {
                      uint64_t v110 = (_OWORD *)v107;
                      unint64_t v107 = v106;
                      long long v111 = *(_OWORD *)v106;
                      *(_OWORD *)((char *)v110 + 12) = *(_OWORD *)(v106 + 12);
                      *uint64_t v110 = v111;
                      if (v102 < v105) {
                        break;
                      }
                      uint64_t v112 = (2 * v105) | 1;
                      unint64_t v106 = v13 + 28 * v112;
                      uint64_t v113 = 2 * v105 + 2;
                      if (v113 < v15)
                      {
                        BOOL v104 = *(_DWORD *)(v106 + 4) < *(_DWORD *)(v106 + 32);
                        v106 += 28 * v104;
                        if (v104) {
                          uint64_t v112 = v113;
                        }
                      }
                      uint64_t v105 = v112;
                    }
                    while (*(_DWORD *)(v106 + 4) >= v108);
                    *(_DWORD *)unint64_t v107 = v109;
                    *(_DWORD *)(v107 + 4) = v108;
                    *(_DWORD *)(v107 + 24) = v181;
                    *(_OWORD *)(v107 + 8) = v174;
                  }
                }
                BOOL v104 = v103-- <= 0;
              }
              while (!v104);
              int64_t v114 = v14 / 0x1CuLL;
              do
              {
                uint64_t v115 = 0;
                *(_OWORD *)&v175[12] = *(_OWORD *)(v13 + 12);
                *(_OWORD *)v175 = *(_OWORD *)v13;
                long long v116 = (_OWORD *)v13;
                do
                {
                  uint64_t v118 = (uint64_t)v116 + 28 * v115 + 28;
                  uint64_t v119 = (2 * v115) | 1;
                  uint64_t v120 = 2 * v115 + 2;
                  if (v120 < v114)
                  {
                    int v121 = *(_DWORD *)(v118 + 4);
                    int v122 = *(_DWORD *)(v118 + 32);
                    v118 += 28 * (v121 < v122);
                    if (v121 < v122) {
                      uint64_t v119 = v120;
                    }
                  }
                  long long v117 = *(_OWORD *)v118;
                  *(_OWORD *)((char *)v116 + 12) = *(_OWORD *)(v118 + 12);
                  *long long v116 = v117;
                  long long v116 = (_OWORD *)v118;
                  uint64_t v115 = v119;
                }
                while (v119 <= (uint64_t)((unint64_t)(v114 - 2) >> 1));
                a2 = (_OWORD *)((char *)a2 - 28);
                if ((_OWORD *)v118 == a2)
                {
                  *(_OWORD *)(v118 + 12) = *(_OWORD *)&v175[12];
                  *(_OWORD *)uint64_t v118 = *(_OWORD *)v175;
                }
                else
                {
                  long long v123 = *a2;
                  *(_OWORD *)(v118 + 12) = *(_OWORD *)((char *)a2 + 12);
                  *(_OWORD *)uint64_t v118 = v123;
                  *(_OWORD *)((char *)a2 + 12) = *(_OWORD *)&v175[12];
                  *a2 = *(_OWORD *)v175;
                  uint64_t v124 = v118 - v13 + 28;
                  if (v124 >= 29)
                  {
                    unint64_t v125 = (v124 / 0x1CuLL - 2) >> 1;
                    uint64_t v126 = v13 + 28 * v125;
                    int v127 = *(_DWORD *)(v118 + 4);
                    if (*(_DWORD *)(v126 + 4) < v127)
                    {
                      int v128 = *(_DWORD *)v118;
                      int v143 = *(_DWORD *)(v118 + 24);
                      long long v140 = *(_OWORD *)(v118 + 8);
                      do
                      {
                        BOOL v129 = (_OWORD *)v118;
                        uint64_t v118 = v126;
                        long long v130 = *(_OWORD *)v126;
                        *(_OWORD *)((char *)v129 + 12) = *(_OWORD *)(v126 + 12);
                        *BOOL v129 = v130;
                        if (!v125) {
                          break;
                        }
                        unint64_t v125 = (v125 - 1) >> 1;
                        uint64_t v126 = v13 + 28 * v125;
                      }
                      while (*(_DWORD *)(v126 + 4) < v127);
                      *(_DWORD *)uint64_t v118 = v128;
                      *(_DWORD *)(v118 + 4) = v127;
                      *(_DWORD *)(v118 + 24) = v143;
                      *(_OWORD *)(v118 + 8) = v140;
                    }
                  }
                }
                BOOL v104 = v114-- <= 2;
              }
              while (!v104);
            }
            return;
          }
          unint64_t v16 = (unint64_t)v15 >> 1;
          unint64_t v17 = v13 + 28 * ((unint64_t)v15 >> 1);
          int v18 = *((_DWORD *)a2 - 6);
          if ((unint64_t)v14 >= 0xE01) {
            break;
          }
          int v21 = *(_DWORD *)(v13 + 4);
          if (v21 < *(_DWORD *)(v17 + 4))
          {
            if (v18 >= v21)
            {
              *(_OWORD *)&v154[12] = *(_OWORD *)(v17 + 12);
              *(_OWORD *)long long v154 = *(_OWORD *)v17;
              long long v37 = *(_OWORD *)v13;
              *(_OWORD *)(v17 + 12) = *(_OWORD *)(v13 + 12);
              *(_OWORD *)unint64_t v17 = v37;
              *(_OWORD *)(v13 + 12) = *(_OWORD *)&v154[12];
              *(_OWORD *)unint64_t v13 = *(_OWORD *)v154;
              if (*((_DWORD *)a2 - 6) >= *(_DWORD *)(v13 + 4)) {
                goto LABEL_32;
              }
              *(_OWORD *)&v145[12] = *(_OWORD *)(v13 + 12);
              *(_OWORD *)uint64_t v145 = *(_OWORD *)v13;
              long long v38 = *v10;
              *(_OWORD *)(v13 + 12) = *(a2 - 1);
              *(_OWORD *)unint64_t v13 = v38;
            }
            else
            {
              *(_OWORD *)&v145[12] = *(_OWORD *)(v17 + 12);
              *(_OWORD *)uint64_t v145 = *(_OWORD *)v17;
              long long v22 = *v10;
              *(_OWORD *)(v17 + 12) = *(a2 - 1);
              *(_OWORD *)unint64_t v17 = v22;
            }
            *(a2 - 1) = *(_OWORD *)&v145[12];
            long long *v10 = *(_OWORD *)v145;
LABEL_32:
            --a3;
            if ((a4 & 1) == 0) {
              goto LABEL_56;
            }
            goto LABEL_33;
          }
          if (v18 >= v21) {
            goto LABEL_32;
          }
          *(_OWORD *)&v148[12] = *(_OWORD *)(v13 + 12);
          *(_OWORD *)uint64_t v148 = *(_OWORD *)v13;
          long long v25 = *v10;
          *(_OWORD *)(v13 + 12) = *(a2 - 1);
          *(_OWORD *)unint64_t v13 = v25;
          *(a2 - 1) = *(_OWORD *)&v148[12];
          long long *v10 = *(_OWORD *)v148;
          if (*(_DWORD *)(v13 + 4) >= *(_DWORD *)(v17 + 4)) {
            goto LABEL_32;
          }
          *(_OWORD *)&v149[12] = *(_OWORD *)(v17 + 12);
          *(_OWORD *)std::string v149 = *(_OWORD *)v17;
          long long v26 = *(_OWORD *)v13;
          *(_OWORD *)(v17 + 12) = *(_OWORD *)(v13 + 12);
          *(_OWORD *)unint64_t v17 = v26;
          *(_OWORD *)(v13 + 12) = *(_OWORD *)&v149[12];
          *(_OWORD *)unint64_t v13 = *(_OWORD *)v149;
          --a3;
          if (a4) {
            goto LABEL_33;
          }
LABEL_56:
          int v39 = *(_DWORD *)(v13 + 4);
          if (*(_DWORD *)(v13 - 24) < v39) {
            goto LABEL_57;
          }
          int v70 = *(_DWORD *)v13;
          long long v139 = *(_OWORD *)(v13 + 8);
          int v142 = *(_DWORD *)(v13 + 24);
          if (v39 < *((_DWORD *)a2 - 6))
          {
            unint64_t v71 = v13;
            do
            {
              unint64_t v13 = v71 + 28;
              int v72 = *(_DWORD *)(v71 + 32);
              v71 += 28;
            }
            while (v39 >= v72);
          }
          else
          {
            unint64_t v73 = v13 + 28;
            do
            {
              unint64_t v13 = v73;
              if (v73 >= (unint64_t)a2) {
                break;
              }
              int v74 = *(_DWORD *)(v73 + 4);
              v73 += 28;
            }
            while (v39 >= v74);
          }
          BOOL v75 = a2;
          if (v13 < (unint64_t)a2)
          {
            long long v76 = a2;
            do
            {
              BOOL v75 = (_OWORD *)((char *)v76 - 28);
              int v77 = *((_DWORD *)v76 - 6);
              long long v76 = (_OWORD *)((char *)v76 - 28);
            }
            while (v39 < v77);
          }
          while (v13 < (unint64_t)v75)
          {
            *(_OWORD *)&v166[12] = *(_OWORD *)(v13 + 12);
            *(_OWORD *)uint64_t v166 = *(_OWORD *)v13;
            long long v78 = *v75;
            *(_OWORD *)(v13 + 12) = *(_OWORD *)((char *)v75 + 12);
            *(_OWORD *)unint64_t v13 = v78;
            *(_OWORD *)((char *)v75 + 12) = *(_OWORD *)&v166[12];
            *BOOL v75 = *(_OWORD *)v166;
            do
            {
              int v79 = *(_DWORD *)(v13 + 32);
              v13 += 28;
            }
            while (v39 >= v79);
            do
            {
              int v80 = *((_DWORD *)v75 - 6);
              BOOL v75 = (_OWORD *)((char *)v75 - 28);
            }
            while (v39 < v80);
          }
          BOOL v4 = v13 - 28 >= a1;
          BOOL v5 = v13 - 28 == a1;
          if (v13 - 28 != a1)
          {
            long long v81 = *(_OWORD *)(v13 - 28);
            *(_OWORD *)(a1 + 12) = *(_OWORD *)(v13 - 16);
            *(_OWORD *)a1 = v81;
          }
          a4 = 0;
          *(_DWORD *)(v13 - 28) = v70;
          *(_DWORD *)(v13 - 24) = v39;
          *(_DWORD *)(v13 - 4) = v142;
          *(_OWORD *)(v13 - 20) = v139;
        }
        int v19 = *(_DWORD *)(v17 + 4);
        if (v19 >= *(_DWORD *)(v13 + 4))
        {
          if (v18 < v19)
          {
            *(_OWORD *)&v146[12] = *(_OWORD *)(v17 + 12);
            *(_OWORD *)std::string v146 = *(_OWORD *)v17;
            long long v23 = *v10;
            *(_OWORD *)(v17 + 12) = *(a2 - 1);
            *(_OWORD *)unint64_t v17 = v23;
            *(a2 - 1) = *(_OWORD *)&v146[12];
            long long *v10 = *(_OWORD *)v146;
            if (*(_DWORD *)(v17 + 4) < *(_DWORD *)(v13 + 4))
            {
              *(_OWORD *)&v147[12] = *(_OWORD *)(v13 + 12);
              *(_OWORD *)long long v147 = *(_OWORD *)v13;
              long long v24 = *(_OWORD *)v17;
              *(_OWORD *)(v13 + 12) = *(_OWORD *)(v17 + 12);
              *(_OWORD *)unint64_t v13 = v24;
              *(_OWORD *)(v17 + 12) = *(_OWORD *)&v147[12];
              *(_OWORD *)unint64_t v17 = *(_OWORD *)v147;
            }
          }
        }
        else
        {
          if (v18 >= v19)
          {
            *(_OWORD *)&v150[12] = *(_OWORD *)(v13 + 12);
            *(_OWORD *)long long v150 = *(_OWORD *)v13;
            long long v27 = *(_OWORD *)v17;
            *(_OWORD *)(v13 + 12) = *(_OWORD *)(v17 + 12);
            *(_OWORD *)unint64_t v13 = v27;
            *(_OWORD *)(v17 + 12) = *(_OWORD *)&v150[12];
            *(_OWORD *)unint64_t v17 = *(_OWORD *)v150;
            if (*((_DWORD *)a2 - 6) >= *(_DWORD *)(v17 + 4)) {
              goto LABEL_23;
            }
            *(_OWORD *)&v144[12] = *(_OWORD *)(v17 + 12);
            *(_OWORD *)std::string v144 = *(_OWORD *)v17;
            long long v28 = *v10;
            *(_OWORD *)(v17 + 12) = *(a2 - 1);
            *(_OWORD *)unint64_t v17 = v28;
          }
          else
          {
            *(_OWORD *)&v144[12] = *(_OWORD *)(v13 + 12);
            *(_OWORD *)std::string v144 = *(_OWORD *)v13;
            long long v20 = *v10;
            *(_OWORD *)(v13 + 12) = *(a2 - 1);
            *(_OWORD *)unint64_t v13 = v20;
          }
          *(a2 - 1) = *(_OWORD *)&v144[12];
          long long *v10 = *(_OWORD *)v144;
        }
LABEL_23:
        uint64_t v29 = (_OWORD *)(v13 + 28);
        unint64_t v30 = v13 + 28 * v16;
        unint64_t v31 = v30 - 28;
        int v32 = *(_DWORD *)(v30 - 24);
        int v33 = *((_DWORD *)a2 - 13);
        if (v32 >= *(_DWORD *)(v13 + 32))
        {
          if (v33 < v32)
          {
            *(_OWORD *)&v152[12] = *(_OWORD *)(v31 + 12);
            *(_OWORD *)long long v152 = *(_OWORD *)v31;
            long long v35 = *v11;
            *(_OWORD *)(v31 + 12) = *(_OWORD *)((char *)a2 - 44);
            *(_OWORD *)unint64_t v31 = v35;
            *(_OWORD *)((char *)a2 - 44) = *(_OWORD *)&v152[12];
            long long *v11 = *(_OWORD *)v152;
            if (*(_DWORD *)(v31 + 4) < *(_DWORD *)(v13 + 32))
            {
              *(_OWORD *)long long v153 = *v29;
              *(_OWORD *)&v153[12] = *(_OWORD *)(v13 + 40);
              long long v36 = *(_OWORD *)v31;
              *(_OWORD *)(v13 + 40) = *(_OWORD *)(v31 + 12);
              *uint64_t v29 = v36;
              *(_OWORD *)(v31 + 12) = *(_OWORD *)&v153[12];
              *(_OWORD *)unint64_t v31 = *(_OWORD *)v153;
            }
          }
        }
        else
        {
          if (v33 >= v32)
          {
            *(_OWORD *)long long v155 = *v29;
            *(_OWORD *)&v155[12] = *(_OWORD *)(v13 + 40);
            long long v40 = *(_OWORD *)v31;
            *(_OWORD *)(v13 + 40) = *(_OWORD *)(v31 + 12);
            *uint64_t v29 = v40;
            *(_OWORD *)(v31 + 12) = *(_OWORD *)&v155[12];
            *(_OWORD *)unint64_t v31 = *(_OWORD *)v155;
            if (*((_DWORD *)a2 - 13) >= *(_DWORD *)(v31 + 4)) {
              goto LABEL_37;
            }
            *(_OWORD *)&v151[12] = *(_OWORD *)(v31 + 12);
            *(_OWORD *)long long v151 = *(_OWORD *)v31;
            long long v41 = *v11;
            *(_OWORD *)(v31 + 12) = *(_OWORD *)((char *)a2 - 44);
            *(_OWORD *)unint64_t v31 = v41;
          }
          else
          {
            *(_OWORD *)long long v151 = *v29;
            *(_OWORD *)&v151[12] = *(_OWORD *)(v13 + 40);
            long long v34 = *v11;
            *(_OWORD *)(v13 + 40) = *(_OWORD *)((char *)a2 - 44);
            *uint64_t v29 = v34;
          }
          *(_OWORD *)((char *)a2 - 44) = *(_OWORD *)&v151[12];
          long long *v11 = *(_OWORD *)v151;
        }
LABEL_37:
        uint64_t v42 = (_OWORD *)(v13 + 56);
        unint64_t v43 = v13 + 28 * v16;
        unint64_t v44 = v43 + 28;
        int v45 = *(_DWORD *)(v43 + 32);
        int v46 = *((_DWORD *)a2 - 20);
        if (v45 >= *(_DWORD *)(v13 + 60))
        {
          if (v46 < v45)
          {
            *(_OWORD *)&v157[12] = *(_OWORD *)(v44 + 12);
            *(_OWORD *)long long v157 = *(_OWORD *)v44;
            long long v48 = *v12;
            *(_OWORD *)(v44 + 12) = *(_OWORD *)((char *)a2 - 72);
            *(_OWORD *)unint64_t v44 = v48;
            *(_OWORD *)((char *)a2 - 72) = *(_OWORD *)&v157[12];
            *std::string::size_type v12 = *(_OWORD *)v157;
            if (*(_DWORD *)(v44 + 4) < *(_DWORD *)(v13 + 60))
            {
              *(_OWORD *)long long v158 = *v42;
              *(_OWORD *)&v158[12] = *(_OWORD *)(v13 + 68);
              long long v49 = *(_OWORD *)v44;
              *(_OWORD *)(v13 + 68) = *(_OWORD *)(v44 + 12);
              *uint64_t v42 = v49;
              *(_OWORD *)(v44 + 12) = *(_OWORD *)&v158[12];
              *(_OWORD *)unint64_t v44 = *(_OWORD *)v158;
            }
          }
        }
        else
        {
          if (v46 >= v45)
          {
            *(_OWORD *)long long v159 = *v42;
            *(_OWORD *)&v159[12] = *(_OWORD *)(v13 + 68);
            long long v50 = *(_OWORD *)v44;
            *(_OWORD *)(v13 + 68) = *(_OWORD *)(v44 + 12);
            *uint64_t v42 = v50;
            *(_OWORD *)(v44 + 12) = *(_OWORD *)&v159[12];
            *(_OWORD *)unint64_t v44 = *(_OWORD *)v159;
            if (*((_DWORD *)a2 - 20) >= *(_DWORD *)(v44 + 4)) {
              goto LABEL_46;
            }
            *(_OWORD *)&v156[12] = *(_OWORD *)(v44 + 12);
            *(_OWORD *)uint64_t v156 = *(_OWORD *)v44;
            long long v51 = *v12;
            *(_OWORD *)(v44 + 12) = *(_OWORD *)((char *)a2 - 72);
            *(_OWORD *)unint64_t v44 = v51;
          }
          else
          {
            *(_OWORD *)uint64_t v156 = *v42;
            *(_OWORD *)&v156[12] = *(_OWORD *)(v13 + 68);
            long long v47 = *v12;
            *(_OWORD *)(v13 + 68) = *(_OWORD *)((char *)a2 - 72);
            *uint64_t v42 = v47;
          }
          *(_OWORD *)((char *)a2 - 72) = *(_OWORD *)&v156[12];
          *std::string::size_type v12 = *(_OWORD *)v156;
        }
LABEL_46:
        int v52 = *(_DWORD *)(v17 + 4);
        int v53 = *(_DWORD *)(v44 + 4);
        if (v52 >= *(_DWORD *)(v31 + 4))
        {
          if (v53 < v52)
          {
            *(_OWORD *)&v161[12] = *(_OWORD *)(v17 + 12);
            *(_OWORD *)long long v161 = *(_OWORD *)v17;
            *(_OWORD *)unint64_t v17 = *(_OWORD *)v44;
            *(_OWORD *)(v17 + 12) = *(_OWORD *)(v44 + 12);
            *(_OWORD *)(v44 + 12) = *(_OWORD *)&v161[12];
            *(_OWORD *)unint64_t v44 = *(_OWORD *)v161;
            if (*(_DWORD *)(v17 + 4) < *(_DWORD *)(v31 + 4))
            {
              *(_OWORD *)&v162[12] = *(_OWORD *)(v31 + 12);
              *(_OWORD *)uint64_t v162 = *(_OWORD *)v31;
              *(_OWORD *)unint64_t v31 = *(_OWORD *)v17;
              *(_OWORD *)(v31 + 12) = *(_OWORD *)(v17 + 12);
              *(_OWORD *)(v17 + 12) = *(_OWORD *)&v162[12];
              *(_OWORD *)unint64_t v17 = *(_OWORD *)v162;
            }
          }
        }
        else
        {
          if (v53 >= v52)
          {
            *(_OWORD *)&v163[12] = *(_OWORD *)(v31 + 12);
            *(_OWORD *)long long v163 = *(_OWORD *)v31;
            *(_OWORD *)unint64_t v31 = *(_OWORD *)v17;
            *(_OWORD *)(v31 + 12) = *(_OWORD *)(v17 + 12);
            *(_OWORD *)(v17 + 12) = *(_OWORD *)&v163[12];
            *(_OWORD *)unint64_t v17 = *(_OWORD *)v163;
            if (*(_DWORD *)(v44 + 4) >= *(_DWORD *)(v17 + 4)) {
              goto LABEL_55;
            }
            *(_OWORD *)&v160[12] = *(_OWORD *)(v17 + 12);
            *(_OWORD *)uint64_t v160 = *(_OWORD *)v17;
            *(_OWORD *)unint64_t v17 = *(_OWORD *)v44;
            *(_OWORD *)(v17 + 12) = *(_OWORD *)(v44 + 12);
          }
          else
          {
            *(_OWORD *)&v160[12] = *(_OWORD *)(v31 + 12);
            *(_OWORD *)uint64_t v160 = *(_OWORD *)v31;
            *(_OWORD *)unint64_t v31 = *(_OWORD *)v44;
            *(_OWORD *)(v31 + 12) = *(_OWORD *)(v44 + 12);
          }
          *(_OWORD *)(v44 + 12) = *(_OWORD *)&v160[12];
          *(_OWORD *)unint64_t v44 = *(_OWORD *)v160;
        }
LABEL_55:
        *(_OWORD *)&v164[12] = *(_OWORD *)(v13 + 12);
        *(_OWORD *)uint64_t v164 = *(_OWORD *)v13;
        long long v54 = *(_OWORD *)v17;
        *(_OWORD *)(v13 + 12) = *(_OWORD *)(v17 + 12);
        *(_OWORD *)unint64_t v13 = v54;
        *(_OWORD *)(v17 + 12) = *(_OWORD *)&v164[12];
        *(_OWORD *)unint64_t v17 = *(_OWORD *)v164;
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_56;
        }
LABEL_33:
        int v39 = *(_DWORD *)(v13 + 4);
LABEL_57:
        uint64_t v55 = 0;
        int v56 = *(_DWORD *)v13;
        long long v138 = *(_OWORD *)(v13 + 8);
        int v141 = *(_DWORD *)(v13 + 24);
        do
        {
          int v57 = *(_DWORD *)(v13 + v55 + 32);
          v55 += 28;
        }
        while (v57 < v39);
        unint64_t v58 = v13 + v55;
        unsigned int v59 = a2;
        if (v55 == 28)
        {
          uint64_t v62 = a2;
          while (v58 < (unint64_t)v62)
          {
            int v60 = (_OWORD *)((char *)v62 - 28);
            int v63 = *((_DWORD *)v62 - 6);
            uint64_t v62 = (_OWORD *)((char *)v62 - 28);
            if (v63 < v39) {
              goto LABEL_65;
            }
          }
          int v60 = v62;
          unint64_t v13 = v58;
        }
        else
        {
          do
          {
            int v60 = (_OWORD *)((char *)v59 - 28);
            int v61 = *((_DWORD *)v59 - 6);
            unsigned int v59 = (_OWORD *)((char *)v59 - 28);
          }
          while (v61 >= v39);
LABEL_65:
          unint64_t v13 = v58;
          if (v58 < (unint64_t)v60)
          {
            unsigned int v64 = v60;
            do
            {
              *(_OWORD *)&v165[12] = *(_OWORD *)(v13 + 12);
              *(_OWORD *)uint64_t v165 = *(_OWORD *)v13;
              long long v65 = *v64;
              *(_OWORD *)(v13 + 12) = *(_OWORD *)((char *)v64 + 12);
              *(_OWORD *)unint64_t v13 = v65;
              *(_OWORD *)((char *)v64 + 12) = *(_OWORD *)&v165[12];
              *unsigned int v64 = *(_OWORD *)v165;
              do
              {
                int v66 = *(_DWORD *)(v13 + 32);
                v13 += 28;
              }
              while (v66 < v39);
              do
              {
                int v67 = *((_DWORD *)v64 - 6);
                unsigned int v64 = (_OWORD *)((char *)v64 - 28);
              }
              while (v67 >= v39);
            }
            while (v13 < (unint64_t)v64);
          }
        }
        if (v13 - 28 != a1)
        {
          long long v68 = *(_OWORD *)(v13 - 28);
          *(_OWORD *)(a1 + 12) = *(_OWORD *)(v13 - 16);
          *(_OWORD *)a1 = v68;
        }
        *(_DWORD *)(v13 - 28) = v56;
        *(_DWORD *)(v13 - 24) = v39;
        *(_DWORD *)(v13 - 4) = v141;
        *(_OWORD *)(v13 - 20) = v138;
        if (v58 >= (unint64_t)v60) {
          break;
        }
LABEL_76:
        sub_93E0C4(a1, v13 - 28, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v69 = sub_93F168(a1, v13 - 28);
      if (sub_93F168(v13, (uint64_t)a2)) {
        break;
      }
      if (!v69) {
        goto LABEL_76;
      }
    }
    a2 = (_OWORD *)(v13 - 28);
    if (!v69) {
      continue;
    }
    break;
  }
}

BOOL sub_93F168(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 2;
  BOOL result = 1;
  switch(0x6DB6DB6DB6DB6DB7 * v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(_DWORD *)(a2 - 24) < *(_DWORD *)(a1 + 4))
      {
        *(_OWORD *)unint64_t v31 = *(_OWORD *)a1;
        *(_OWORD *)&v31[12] = *(_OWORD *)(a1 + 12);
        long long v6 = *(_OWORD *)(a2 - 16);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 28);
        *(_OWORD *)(a1 + 12) = v6;
        *(_OWORD *)(a2 - 16) = *(_OWORD *)&v31[12];
        *(_OWORD *)(a2 - 28) = *(_OWORD *)v31;
      }
      return result;
    case 3:
      std::string::size_type v12 = (_OWORD *)(a1 + 28);
      unint64_t v13 = (_OWORD *)(a2 - 28);
      int v14 = *(_DWORD *)(a1 + 32);
      int v15 = *(_DWORD *)(a2 - 24);
      if (v14 >= *(_DWORD *)(a1 + 4))
      {
        if (v15 < v14)
        {
          *(_OWORD *)long long v40 = *v12;
          *(_OWORD *)&v40[12] = *(_OWORD *)(a1 + 40);
          long long v21 = *(_OWORD *)(a2 - 16);
          *std::string::size_type v12 = *v13;
          *(_OWORD *)(a1 + 40) = v21;
          *(_OWORD *)(a2 - 16) = *(_OWORD *)&v40[12];
          *unint64_t v13 = *(_OWORD *)v40;
          if (*(_DWORD *)(a1 + 32) < *(_DWORD *)(a1 + 4))
          {
            *(_OWORD *)long long v41 = *(_OWORD *)a1;
            *(_OWORD *)&v41[12] = *(_OWORD *)(a1 + 12);
            *(_OWORD *)a1 = *v12;
            *(_OWORD *)(a1 + 12) = *(_OWORD *)(a1 + 40);
            *std::string::size_type v12 = *(_OWORD *)v41;
            *(_OWORD *)(a1 + 40) = *(_OWORD *)&v41[12];
          }
        }
      }
      else
      {
        if (v15 >= v14)
        {
          *(_OWORD *)unint64_t v44 = *(_OWORD *)a1;
          *(_OWORD *)&v44[12] = *(_OWORD *)(a1 + 12);
          *(_OWORD *)a1 = *v12;
          *(_OWORD *)(a1 + 12) = *(_OWORD *)(a1 + 40);
          *std::string::size_type v12 = *(_OWORD *)v44;
          *(_OWORD *)(a1 + 40) = *(_OWORD *)&v44[12];
          if (*(_DWORD *)(a2 - 24) >= *(_DWORD *)(a1 + 32)) {
            return result;
          }
          *(_OWORD *)int v33 = *v12;
          *(_OWORD *)&v33[12] = *(_OWORD *)(a1 + 40);
          long long v30 = *(_OWORD *)(a2 - 16);
          *std::string::size_type v12 = *v13;
          *(_OWORD *)(a1 + 40) = v30;
        }
        else
        {
          *(_OWORD *)int v33 = *(_OWORD *)a1;
          *(_OWORD *)&v33[12] = *(_OWORD *)(a1 + 12);
          long long v16 = *(_OWORD *)(a2 - 16);
          *(_OWORD *)a1 = *v13;
          *(_OWORD *)(a1 + 12) = v16;
        }
        *(_OWORD *)(a2 - 16) = *(_OWORD *)&v33[12];
        *unint64_t v13 = *(_OWORD *)v33;
      }
      return result;
    case 4:
      sub_93F6DC(a1, a1 + 28, a1 + 56, a2 - 28);
      return 1;
    case 5:
      unint64_t v17 = (_OWORD *)(a1 + 28);
      int v18 = (_OWORD *)(a1 + 56);
      int v19 = (_OWORD *)(a1 + 84);
      sub_93F6DC(a1, a1 + 28, a1 + 56, a1 + 84);
      if (*(_DWORD *)(a2 - 24) < *(_DWORD *)(a1 + 88))
      {
        *(_OWORD *)long long v34 = *v19;
        *(_OWORD *)&v34[12] = *(_OWORD *)(a1 + 96);
        long long v20 = *(_OWORD *)(a2 - 16);
        *int v19 = *(_OWORD *)(a2 - 28);
        *(_OWORD *)(a1 + 96) = v20;
        *(_OWORD *)(a2 - 16) = *(_OWORD *)&v34[12];
        *(_OWORD *)(a2 - 28) = *(_OWORD *)v34;
        if (*(_DWORD *)(a1 + 88) < *(_DWORD *)(a1 + 60))
        {
          *(_OWORD *)long long v35 = *v18;
          *(_OWORD *)&v35[12] = *(_OWORD *)(a1 + 68);
          *int v18 = *v19;
          *(_OWORD *)(a1 + 68) = *(_OWORD *)(a1 + 96);
          *int v19 = *(_OWORD *)v35;
          *(_OWORD *)(a1 + 96) = *(_OWORD *)&v35[12];
          if (*(_DWORD *)(a1 + 60) < *(_DWORD *)(a1 + 32))
          {
            *(_OWORD *)long long v36 = *v17;
            *(_OWORD *)&v36[12] = *(_OWORD *)(a1 + 40);
            _OWORD *v17 = *v18;
            *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 68);
            *int v18 = *(_OWORD *)v36;
            *(_OWORD *)(a1 + 68) = *(_OWORD *)&v36[12];
            if (*(_DWORD *)(a1 + 32) < *(_DWORD *)(a1 + 4))
            {
              *(_OWORD *)long long v37 = *(_OWORD *)a1;
              *(_OWORD *)&v37[12] = *(_OWORD *)(a1 + 12);
              *(_OWORD *)a1 = *v17;
              *(_OWORD *)(a1 + 12) = *(_OWORD *)(a1 + 40);
              _OWORD *v17 = *(_OWORD *)v37;
              *(_OWORD *)(a1 + 40) = *(_OWORD *)&v37[12];
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v7 = a1 + 56;
      std::string::size_type v8 = (_OWORD *)(a1 + 28);
      int v9 = *(_DWORD *)(a1 + 32);
      int v10 = *(_DWORD *)(a1 + 4);
      int v11 = *(_DWORD *)(a1 + 60);
      if (v9 >= v10)
      {
        if (v11 < v9)
        {
          *(_OWORD *)long long v38 = *v8;
          *(_OWORD *)&v38[12] = *(_OWORD *)(a1 + 40);
          *std::string::size_type v8 = *(_OWORD *)v7;
          *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 68);
          *(_OWORD *)uint64_t v7 = *(_OWORD *)v38;
          *(_OWORD *)(a1 + 68) = *(_OWORD *)&v38[12];
          if (*(_DWORD *)(a1 + 32) < v10)
          {
            *(_OWORD *)int v39 = *(_OWORD *)a1;
            *(_OWORD *)&v39[12] = *(_OWORD *)(a1 + 12);
            *(_OWORD *)a1 = *v8;
            *(_OWORD *)(a1 + 12) = *(_OWORD *)(a1 + 40);
            *std::string::size_type v8 = *(_OWORD *)v39;
            *(_OWORD *)(a1 + 40) = *(_OWORD *)&v39[12];
          }
        }
      }
      else
      {
        if (v11 >= v9)
        {
          *(_OWORD *)uint64_t v42 = *(_OWORD *)a1;
          *(_OWORD *)&v42[12] = *(_OWORD *)(a1 + 12);
          *(_OWORD *)a1 = *v8;
          *(_OWORD *)(a1 + 12) = *(_OWORD *)(a1 + 40);
          *std::string::size_type v8 = *(_OWORD *)v42;
          *(_OWORD *)(a1 + 40) = *(_OWORD *)&v42[12];
          if (v11 >= *(_DWORD *)(a1 + 32)) {
            goto LABEL_25;
          }
          *(_OWORD *)int v32 = *v8;
          *(_OWORD *)&v32[12] = *(_OWORD *)(a1 + 40);
          *std::string::size_type v8 = *(_OWORD *)v7;
          *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 68);
        }
        else
        {
          *(_OWORD *)int v32 = *(_OWORD *)a1;
          *(_OWORD *)&v32[12] = *(_OWORD *)(a1 + 12);
          *(_OWORD *)a1 = *(_OWORD *)v7;
          *(_OWORD *)(a1 + 12) = *(_OWORD *)(a1 + 68);
        }
        *(_OWORD *)uint64_t v7 = *(_OWORD *)v32;
        *(_OWORD *)(a1 + 68) = *(_OWORD *)&v32[12];
      }
LABEL_25:
      uint64_t v22 = a1 + 84;
      if (a1 + 84 == a2) {
        return 1;
      }
      uint64_t v23 = 0;
      int v24 = 0;
      break;
  }
  while (1)
  {
    int v26 = *(_DWORD *)(v22 + 4);
    if (v26 < *(_DWORD *)(v7 + 4))
    {
      int v27 = *(_DWORD *)v22;
      long long v43 = *(_OWORD *)(v22 + 8);
      int v45 = *(_DWORD *)(v22 + 24);
      uint64_t v28 = v23;
      do
      {
        uint64_t v29 = a1 + v28;
        *(_OWORD *)(v29 + 84) = *(_OWORD *)(a1 + v28 + 56);
        *(_OWORD *)(v29 + 96) = *(_OWORD *)(a1 + v28 + 68);
        if (v28 == -56)
        {
          uint64_t v25 = a1;
          goto LABEL_28;
        }
        v28 -= 28;
      }
      while (v26 < *(_DWORD *)(v29 + 32));
      uint64_t v25 = a1 + v28 + 84;
LABEL_28:
      *(_DWORD *)uint64_t v25 = v27;
      *(_DWORD *)(v25 + 4) = v26;
      *(_OWORD *)(v25 + 8) = v43;
      *(_DWORD *)(v25 + 24) = v45;
      if (++v24 == 8) {
        return v22 + 28 == a2;
      }
    }
    uint64_t v7 = v22;
    v23 += 28;
    v22 += 28;
    if (v22 == a2) {
      return 1;
    }
  }
}

__n128 sub_93F6DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = *(_DWORD *)(a2 + 4);
  int v5 = *(_DWORD *)(a3 + 4);
  if (v4 >= *(_DWORD *)(a1 + 4))
  {
    if (v5 < v4)
    {
      *(_OWORD *)long long v16 = *(_OWORD *)a2;
      *(_OWORD *)&v16[12] = *(_OWORD *)(a2 + 12);
      long long v7 = *(_OWORD *)(a3 + 12);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 12) = v7;
      *(_OWORD *)(a3 + 12) = *(_OWORD *)&v16[12];
      __n128 result = *(__n128 *)v16;
      *(_OWORD *)a3 = *(_OWORD *)v16;
      if (*(_DWORD *)(a2 + 4) < *(_DWORD *)(a1 + 4))
      {
        *(_OWORD *)unint64_t v17 = *(_OWORD *)a1;
        *(_OWORD *)&v17[12] = *(_OWORD *)(a1 + 12);
        long long v9 = *(_OWORD *)(a2 + 12);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 12) = v9;
        *(_OWORD *)(a2 + 12) = *(_OWORD *)&v17[12];
        __n128 result = *(__n128 *)v17;
        *(_OWORD *)a2 = *(_OWORD *)v17;
      }
    }
  }
  else
  {
    if (v5 < v4)
    {
      *(_OWORD *)int v15 = *(_OWORD *)a1;
      *(_OWORD *)&v15[12] = *(_OWORD *)(a1 + 12);
      long long v6 = *(_OWORD *)(a3 + 12);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_OWORD *)(a1 + 12) = v6;
LABEL_9:
      *(_OWORD *)(a3 + 12) = *(_OWORD *)&v15[12];
      __n128 result = *(__n128 *)v15;
      *(_OWORD *)a3 = *(_OWORD *)v15;
      goto LABEL_10;
    }
    *(_OWORD *)int v18 = *(_OWORD *)a1;
    *(_OWORD *)&v18[12] = *(_OWORD *)(a1 + 12);
    long long v10 = *(_OWORD *)(a2 + 12);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 12) = v10;
    *(_OWORD *)(a2 + 12) = *(_OWORD *)&v18[12];
    __n128 result = *(__n128 *)v18;
    *(_OWORD *)a2 = *(_OWORD *)v18;
    if (*(_DWORD *)(a3 + 4) < *(_DWORD *)(a2 + 4))
    {
      *(_OWORD *)int v15 = *(_OWORD *)a2;
      *(_OWORD *)&v15[12] = *(_OWORD *)(a2 + 12);
      long long v11 = *(_OWORD *)(a3 + 12);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 12) = v11;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(_DWORD *)(a4 + 4) < *(_DWORD *)(a3 + 4))
  {
    *(_OWORD *)int v19 = *(_OWORD *)a3;
    *(_OWORD *)&v19[12] = *(_OWORD *)(a3 + 12);
    long long v12 = *(_OWORD *)(a4 + 12);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 12) = v12;
    *(_OWORD *)(a4 + 12) = *(_OWORD *)&v19[12];
    __n128 result = *(__n128 *)v19;
    *(_OWORD *)a4 = *(_OWORD *)v19;
    if (*(_DWORD *)(a3 + 4) < *(_DWORD *)(a2 + 4))
    {
      *(_OWORD *)long long v20 = *(_OWORD *)a2;
      *(_OWORD *)&v20[12] = *(_OWORD *)(a2 + 12);
      long long v13 = *(_OWORD *)(a3 + 12);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 12) = v13;
      *(_OWORD *)(a3 + 12) = *(_OWORD *)&v20[12];
      __n128 result = *(__n128 *)v20;
      *(_OWORD *)a3 = *(_OWORD *)v20;
      if (*(_DWORD *)(a2 + 4) < *(_DWORD *)(a1 + 4))
      {
        *(_OWORD *)long long v21 = *(_OWORD *)a1;
        *(_OWORD *)&v21[12] = *(_OWORD *)(a1 + 12);
        long long v14 = *(_OWORD *)(a2 + 12);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 12) = v14;
        *(_OWORD *)(a2 + 12) = *(_OWORD *)&v21[12];
        __n128 result = *(__n128 *)v21;
        *(_OWORD *)a2 = *(_OWORD *)v21;
      }
    }
  }
  return result;
}

char *sub_93F8D4()
{
  byte_25D53FF = 1;
  word_25D53E8 = 65;
  byte_25D5417 = 1;
  word_25D5400 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25D5B50 = 0u;
  *(_OWORD *)&qword_25D5B60 = 0u;
  dword_25D5B70 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25D5B50, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25D5B50, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25D5B50, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25D5B50, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25D542F = 8;
  strcpy((char *)&qword_25D5418, "any_mode");
  byte_25D5447 = 7;
  strcpy((char *)&dword_25D5430, "cycling");
  byte_25D545F = 7;
  strcpy((char *)&dword_25D5448, "driving");
  byte_25D5477 = 7;
  strcpy((char *)&dword_25D5460, "walking");
  qword_25D5480 = 0;
  qword_25D5488 = 0;
  qword_25D5478 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25D5478 = (uint64_t)v0;
  qword_25D5480 = (uint64_t)(v0 + 9);
  qword_25D5488 = (uint64_t)(v0 + 9);
  qword_25D5490 = 0;
  qword_25D5498 = 0;
  unk_25D54A0 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25D5498 = (uint64_t)(v1 + 9);
  unk_25D54A0 = v1 + 9;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25D5490 = (uint64_t)v1;
  byte_25D54BF = 6;
  strcpy((char *)&dword_25D54A8, "{Mode}");
  byte_25D54D7 = 11;
  strcpy((char *)&qword_25D54C0, "{Direction}");
  byte_25D54EF = 6;
  strcpy((char *)&dword_25D54D8, "{Line}");
  byte_25D5507 = 12;
  strcpy((char *)&qword_25D54F0, "{LineNumber}");
  strcpy(&byte_25D551F, "\n{Headsign1}");
  strcpy((char *)&qword_25D5508, "{Headsign}");
  byte_25D5537 = 11;
  byte_25D554F = 11;
  strcpy((char *)&qword_25D5538, "{Headsign2}");
  byte_25D5567 = 11;
  strcpy((char *)&qword_25D5550, "{Headsign3}");
  byte_25D557F = 11;
  strcpy((char *)&qword_25D5568, "{Headsign4}");
  byte_25D5597 = 11;
  strcpy((char *)&qword_25D5580, "{Headsign5}");
  byte_25D55AF = 6;
  strcpy((char *)&dword_25D5598, "{Stop}");
  byte_25D55C7 = 14;
  strcpy((char *)&qword_25D55B0, "{PreviousStop}");
  byte_25D55DF = 8;
  strcpy((char *)&qword_25D55C8, "{System}");
  byte_25D55F7 = 15;
  strcpy((char *)&qword_25D55E0, "{VehicleNumber}");
  byte_25D560F = 17;
  strcpy((char *)&xmmword_25D55F8, "{AccessPointExit}");
  strcpy(&byte_25D5627, "\n{nextBoardStation}");
  strcpy((char *)&qword_25D5610, "{Platform}");
  byte_25D563F = 18;
  qword_25D5640 = 0;
  unk_25D5648 = 0;
  qword_25D5650 = 0;
  byte_25D566F = 1;
  word_25D5658 = 32;
  qword_25D5670 = (uint64_t)operator new(0x20uLL);
  unk_25D5678 = xmmword_20B8890;
  strcpy((char *)qword_25D5670, "LeaveStop_Loc_Comma_Separator");
  byte_25D569F = 5;
  LODWORD(xmmword_25D5688) = -1028144608;
  WORD2(xmmword_25D5688) = 160;
  byte_25D56B7 = 2;
  word_25D56A0 = -24382;
  byte_25D56A2 = 0;
  byte_25D56CF = 4;
  dword_25D56B8 = 548913696;
  byte_25D56BC = 0;
  byte_25D56E7 = 15;
  strcpy((char *)&qword_25D56D0 + 7, "\xB7 {/s:s}");
  strcpy((char *)&qword_25D56D0, "{s:s} ·");
  byte_25D56FF = 6;
  strcpy((char *)&dword_25D56E8, "NoType");
  byte_25D5717 = 14;
  strcpy((char *)&qword_25D5700, "{WalkDistance}");
  strcpy(&byte_25D572F, "\n{OneMinute}");
  strcpy((char *)&qword_25D5718, "{WalkTime}");
  byte_25D5747 = 11;
  byte_25D575F = 14;
  strcpy((char *)&qword_25D5748, "{StepDuration}");
  byte_25D5777 = 15;
  strcpy((char *)&qword_25D5760, "{TripFrequency}");
  byte_25D578F = 11;
  strcpy((char *)&qword_25D5778, "{BoardTime}");
  byte_25D57A7 = 12;
  strcpy((char *)&qword_25D5790, "{AlightTime}");
  byte_25D57BF = 21;
  strcpy((char *)&xmmword_25D57A8, "{FutureTimestampList}");
  byte_25D57D7 = 15;
  strcpy((char *)&qword_25D57C0, "{DepartureTime}");
  byte_25D57EF = 13;
  strcpy((char *)&qword_25D57D8, "{ArrivalTime}");
  byte_25D5807 = 19;
  strcpy((char *)&xmmword_25D57F0, "{TotalWalkDistance}");
  byte_25D581F = 14;
  strcpy((char *)&qword_25D5808, "{TripDuration}");
  byte_25D5837 = 11;
  strcpy((char *)&qword_25D5820, "{DayOfWeek}");
  byte_25D584F = 6;
  strcpy((char *)&dword_25D5838, "{Date}");
  byte_25D5867 = 16;
  strcpy((char *)&xmmword_25D5850, "{OutTheDoorTime}");
  __n128 result = (char *)operator new(0x20uLL);
  qword_25D5868 = (uint64_t)result;
  unk_25D5870 = xmmword_20B91A0;
  strcpy(result, "{FirstVehicleDepartureTime}");
  byte_25D5897 = 18;
  strcpy(byte_25D5880, "{RouteArrivalTime}");
  strcpy(&byte_25D58AF, "\n{IC_Artwork}");
  strcpy((char *)&qword_25D5898, "{BaseFare}");
  byte_25D58C7 = 12;
  byte_25D58DF = 11;
  strcpy((char *)&qword_25D58C8, "{RT_Symbol}");
  byte_25D58F7 = 12;
  strcpy((char *)&qword_25D58E0, "{TotalPrice}");
  byte_25D590F = 13;
  strcpy((char *)&qword_25D58F8, "{CheckInTime}");
  byte_25D5927 = 19;
  strcpy((char *)&xmmword_25D5910, "{LiveDepartureTime}");
  strcpy(&byte_25D593F, "\n{LegDuration}");
  strcpy((char *)&qword_25D5928, "{TimeList}");
  byte_25D5957 = 13;
  byte_25D596F = 15;
  strcpy((char *)&qword_25D5958, "{CountdownList}");
  byte_25D5987 = 3;
  dword_25D5970 = 8217723;
  strcpy(&byte_25D599F, "\t{AccessPointArt}");
  strcpy((char *)&qword_25D5988, "{LineArt}");
  byte_25D59B7 = 16;
  byte_25D59CF = 11;
  strcpy((char *)&qword_25D59B8, "{SystemArt}");
  strcpy(&byte_25D59E7, "\n{ServiceBeginTime}");
  strcpy((char *)&qword_25D59D0, "{CardName}");
  byte_25D59FF = 18;
  byte_25D5A17 = 16;
  strcpy((char *)&xmmword_25D5A00, "{ServiceEndTime}");
  byte_25D5A2F = 6;
  strcpy((char *)&dword_25D5A18, "OnTime");
  byte_25D5A47 = 6;
  strcpy((char *)&dword_25D5A30, "Delays");
  byte_25D5A5F = 1;
  word_25D5A48 = 115;
  byte_25D5A77 = 2;
  strcpy((char *)&word_25D5A60, "cs");
  byte_25D5A8F = 1;
  word_25D5A78 = 112;
  byte_25D5AA7 = 5;
  strcpy((char *)&dword_25D5A90, "_Line");
  byte_25D5ABF = 7;
  strcpy((char *)&dword_25D5AA8, "_System");
  strcpy(&byte_25D5AD7, "\n_VehicleNumber");
  strcpy((char *)&qword_25D5AC0, "_Direction");
  byte_25D5AEF = 14;
  byte_25D5B07 = 12;
  strcpy((char *)&qword_25D5AF0, "_To_Headsign");
  byte_25D5B1F = 16;
  strcpy((char *)&xmmword_25D5B08, "_Toward_Headsign");
  strcpy(&byte_25D5B37, "\t_LineNumber");
  strcpy((char *)&qword_25D5B20, "_Headsign");
  byte_25D5B4F = 11;
  return result;
}