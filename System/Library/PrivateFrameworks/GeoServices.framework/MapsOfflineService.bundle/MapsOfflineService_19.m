void sub_870B10(_Unwind_Exception *a1)
{
  void *v1;

  sub_639B78(&STACK[0x208]);
  sub_591DFC(v1);
  _Unwind_Resume(a1);
}

void sub_870C54(_Unwind_Exception *a1)
{
  sub_591DFC(v1);
  _Unwind_Resume(a1);
}

void sub_870C68(_Unwind_Exception *a1)
{
  sub_591DFC(v1);
  _Unwind_Resume(a1);
}

void sub_870C7C(void *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = (const std::string **)a1[997];
  v4 = *v3;
  v5 = v3[1];
  if (*v3 == v5) {
    return;
  }
  v32 = a1 + 647;
  do
  {
    sub_8B3A5C(v4, (uint64_t)&__p);
    sub_639530((uint64_t)v39, (uint64_t)&__p, v32, 0, 0, 1);
    if ((int64_t)v4[1].__r_.__value_.__l.__size_ >= a1[649]) {
      uint64_t size = a1[649];
    }
    else {
      uint64_t size = v4[1].__r_.__value_.__l.__size_;
    }
    sub_2F99CC(&v33, size, v4[1].__r_.__value_.__r.__words[2]);
    sub_638424((uint64_t)v39, &v33);
    sub_69200((uint64_t)v39, *(unsigned __int8 *)(a1[270] + 431));
    sub_63841C((uint64_t)v39, 82);
    unint64_t v9 = a2[1];
    if (v9 >= a2[2])
    {
      uint64_t v11 = sub_75796C(a2, (uint64_t)v39);
    }
    else
    {
      __n128 v10 = sub_757B28((uint64_t)(a2 + 2), a2[1], (uint64_t)v39);
      uint64_t v11 = v9 + 408;
      a2[1] = v9 + 408;
    }
    a2[1] = v11;
    if (v50)
    {
      v51 = v50;
      operator delete(v50);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    v12 = (void **)v46;
    if (v46)
    {
      v13 = v47;
      v14 = v46;
      if (v47 == v46) {
        goto LABEL_50;
      }
      while (1)
      {
        v16 = (std::__shared_weak_count *)*(v13 - 2);
        if (!v16 || atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          v17 = (void **)*(v13 - 8);
          if (v17) {
            goto LABEL_36;
          }
          goto LABEL_25;
        }
        ((void (*)(std::__shared_weak_count *, __n128))v16->__on_zero_shared)(v16, v10);
        std::__shared_weak_count::__release_weak(v16);
        v17 = (void **)*(v13 - 8);
        if (v17) {
          break;
        }
LABEL_25:
        v18 = *(v13 - 10);
        *(v13 - 10) = 0;
        if (v18) {
          operator delete(v18);
        }
        v19 = v13 - 13;
        v20 = (void **)*(v13 - 13);
        if (v20)
        {
          v21 = (void **)*(v13 - 12);
          v15 = *(v13 - 13);
          if (v21 != v20)
          {
            do
            {
              if (*((char *)v21 - 1) < 0) {
                operator delete(*(v21 - 3));
              }
              v21 -= 3;
            }
            while (v21 != v20);
            v15 = *v19;
          }
          *(v13 - 12) = v20;
          operator delete(v15);
        }
        v13 -= 13;
        if (v19 == v12)
        {
          v14 = v46;
LABEL_50:
          v47 = v12;
          operator delete(v14);
          goto LABEL_51;
        }
      }
      while (1)
      {
LABEL_36:
        v22 = (void **)*v17;
        if (*((char *)v17 + 191) < 0)
        {
          operator delete(v17[21]);
          if ((*((char *)v17 + 159) & 0x80000000) == 0)
          {
LABEL_38:
            if ((*((char *)v17 + 135) & 0x80000000) == 0) {
              goto LABEL_39;
            }
            goto LABEL_45;
          }
        }
        else if ((*((char *)v17 + 159) & 0x80000000) == 0)
        {
          goto LABEL_38;
        }
        operator delete(v17[17]);
        if ((*((char *)v17 + 135) & 0x80000000) == 0)
        {
LABEL_39:
          if ((*((char *)v17 + 95) & 0x80000000) == 0) {
            goto LABEL_40;
          }
          goto LABEL_46;
        }
LABEL_45:
        operator delete(v17[14]);
        if ((*((char *)v17 + 95) & 0x80000000) == 0)
        {
LABEL_40:
          if ((*((char *)v17 + 63) & 0x80000000) == 0) {
            goto LABEL_41;
          }
          goto LABEL_47;
        }
LABEL_46:
        operator delete(v17[9]);
        if ((*((char *)v17 + 63) & 0x80000000) == 0)
        {
LABEL_41:
          if (*((char *)v17 + 39) < 0) {
            goto LABEL_48;
          }
          goto LABEL_35;
        }
LABEL_47:
        operator delete(v17[5]);
        if (*((char *)v17 + 39) < 0) {
LABEL_48:
        }
          operator delete(v17[2]);
LABEL_35:
        operator delete(v17);
        v17 = v22;
        if (!v22) {
          goto LABEL_25;
        }
      }
    }
LABEL_51:
    if (v44)
    {
      v45 = v44;
      operator delete(v44);
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    v23 = v40;
    if (v40)
    {
      uint64_t v24 = (uint64_t)v41;
      v25 = v40;
      if (v41 != v40)
      {
        do
          uint64_t v24 = sub_4D4B58(v24 - 160);
        while ((void *)v24 != v23);
        v25 = v40;
      }
      v41 = v23;
      operator delete(v25);
    }
    v26 = v38;
    if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, __n128))v26->__on_zero_shared)(v26, v10);
      std::__shared_weak_count::__release_weak(v26);
      v27 = (void **)v37;
      if (!v37) {
        goto LABEL_63;
      }
      while (1)
      {
LABEL_74:
        v31 = (void **)*v27;
        if (*((char *)v27 + 191) < 0)
        {
          operator delete(v27[21]);
          if ((*((char *)v27 + 159) & 0x80000000) == 0)
          {
LABEL_76:
            if ((*((char *)v27 + 135) & 0x80000000) == 0) {
              goto LABEL_77;
            }
            goto LABEL_83;
          }
        }
        else if ((*((char *)v27 + 159) & 0x80000000) == 0)
        {
          goto LABEL_76;
        }
        operator delete(v27[17]);
        if ((*((char *)v27 + 135) & 0x80000000) == 0)
        {
LABEL_77:
          if ((*((char *)v27 + 95) & 0x80000000) == 0) {
            goto LABEL_78;
          }
          goto LABEL_84;
        }
LABEL_83:
        operator delete(v27[14]);
        if ((*((char *)v27 + 95) & 0x80000000) == 0)
        {
LABEL_78:
          if ((*((char *)v27 + 63) & 0x80000000) == 0) {
            goto LABEL_79;
          }
          goto LABEL_85;
        }
LABEL_84:
        operator delete(v27[9]);
        if ((*((char *)v27 + 63) & 0x80000000) == 0)
        {
LABEL_79:
          if (*((char *)v27 + 39) < 0) {
            goto LABEL_86;
          }
          goto LABEL_73;
        }
LABEL_85:
        operator delete(v27[5]);
        if (*((char *)v27 + 39) < 0) {
LABEL_86:
        }
          operator delete(v27[2]);
LABEL_73:
        operator delete(v27);
        v27 = v31;
        if (!v31) {
          goto LABEL_63;
        }
      }
    }
    v27 = (void **)v37;
    if (v37) {
      goto LABEL_74;
    }
LABEL_63:
    v28 = v36;
    v36 = 0;
    if (v28) {
      operator delete(v28);
    }
    v29 = (void **)__p;
    if (__p)
    {
      v30 = v35;
      v7 = __p;
      if (v35 != __p)
      {
        do
        {
          if (*((char *)v30 - 1) < 0) {
            operator delete(*(v30 - 3));
          }
          v30 -= 3;
        }
        while (v30 != v29);
        v7 = __p;
      }
      v35 = v29;
      operator delete(v7);
    }
    v4 += 2;
  }
  while (v4 != v5);
}

void sub_871134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  v28[1] = v29;
  sub_639B78(&a28);
  sub_4F31D0(&a15);
  sub_591DFC(v28);
  _Unwind_Resume(a1);
}

void sub_871198(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  sub_8B6DF8((uint64_t)&v17);
  sub_639530(a3, (uint64_t)&v17, (void *)(a1 + 5176), 0, 0, 1);
  sub_63841C(a3, 73);
  uint64_t v6 = sub_62C7DC(*(void **)(a1 + 2160), *(_DWORD *)(a1 + 5188));
  uint64_t v7 = *a2;
  uint64_t v8 = sub_62C848(*(void **)(a1 + 2160), *(_DWORD *)(a1 + 5188));
  sub_2F99CC(&v22, v7 + v6, *a2 + v8);
  __n128 v16 = v22;
  sub_638424(a3, &v16);
  sub_69200(a3, *(unsigned __int8 *)(*(void *)(a1 + 2160) + 430));
  unint64_t v9 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  __n128 v10 = v20;
  if (v20)
  {
    do
    {
      uint64_t v11 = (void *)*v10;
      sub_4F4B48((uint64_t)(v10 + 2));
      operator delete(v10);
      __n128 v10 = v11;
    }
    while (v11);
  }
  v12 = __p;
  __p = 0;
  if (v12) {
    operator delete(v12);
  }
  v13 = (void **)v17;
  if (v17)
  {
    v14 = v18;
    v15 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      v15 = v17;
    }
    v18 = v13;
    operator delete(v15);
  }
}

void sub_87132C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_871340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_639B78(v4);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_871360(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  sub_8B6CC8((uint64_t)&v17);
  sub_639530(a3, (uint64_t)&v17, (void *)(a1 + 5176), 0, 0, 1);
  sub_63841C(a3, 72);
  uint64_t v6 = sub_62C7DC(*(void **)(a1 + 2160), *(_DWORD *)(a1 + 5188));
  uint64_t v7 = *a2;
  uint64_t v8 = sub_62C848(*(void **)(a1 + 2160), *(_DWORD *)(a1 + 5188));
  sub_2F99CC(&v22, v7 + v6, *a2 + v8);
  __n128 v16 = v22;
  sub_638424(a3, &v16);
  sub_69200(a3, *(unsigned __int8 *)(*(void *)(a1 + 2160) + 430));
  unint64_t v9 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  __n128 v10 = v20;
  if (v20)
  {
    do
    {
      uint64_t v11 = (void *)*v10;
      sub_4F4B48((uint64_t)(v10 + 2));
      operator delete(v10);
      __n128 v10 = v11;
    }
    while (v11);
  }
  v12 = __p;
  __p = 0;
  if (v12) {
    operator delete(v12);
  }
  v13 = (void **)v17;
  if (v17)
  {
    v14 = v18;
    v15 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      v15 = v17;
    }
    v18 = v13;
    operator delete(v15);
  }
}

void sub_8714F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_871508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_639B78(v4);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_871528(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  sub_8B7184(a1 + 2200, a3, a4, (uint64_t)&v22);
  sub_639530(a5, (uint64_t)&v22, (void *)(a1 + 5176), 0, 0, 1);
  sub_63841C(a5, 71);
  __n128 v10 = (void *)(a3 + 88);
  if (a4) {
    sub_638760(a5, v10);
  }
  else {
    sub_63876C(a5, v10);
  }
  uint64_t v11 = sub_62C7DC(*(void **)(a1 + 2160), *(_DWORD *)(a1 + 5188));
  uint64_t v12 = *a2;
  uint64_t v13 = sub_62C848(*(void **)(a1 + 2160), *(_DWORD *)(a1 + 5188));
  sub_2F99CC(&v27, v12 + v11, *a2 + v13);
  __n128 v21 = v27;
  sub_638424(a5, &v21);
  sub_69200(a5, *(unsigned __int8 *)(*(void *)(a1 + 2160) + 430));
  v14 = v26;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  v15 = v25;
  if (v25)
  {
    do
    {
      __n128 v16 = (void *)*v15;
      sub_4F4B48((uint64_t)(v15 + 2));
      operator delete(v15);
      v15 = v16;
    }
    while (v16);
  }
  v17 = __p;
  __p = 0;
  if (v17) {
    operator delete(v17);
  }
  v18 = (void **)v22;
  if (v22)
  {
    v19 = v23;
    v20 = v22;
    if (v23 != v22)
    {
      do
      {
        if (*((char *)v19 - 1) < 0) {
          operator delete(*(v19 - 3));
        }
        v19 -= 3;
      }
      while (v19 != v18);
      v20 = v22;
    }
    v23 = v18;
    operator delete(v20);
  }
}

void sub_8716E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_8716FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_639B78(v4);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_87171C(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  sub_8B6F28((uint64_t)&v17);
  sub_639530(a3, (uint64_t)&v17, (void *)(a1 + 5176), 0, 0, 1);
  sub_63841C(a3, 71);
  uint64_t v6 = sub_62C7DC(*(void **)(a1 + 2160), *(_DWORD *)(a1 + 5188));
  uint64_t v7 = *a2;
  uint64_t v8 = sub_62C848(*(void **)(a1 + 2160), *(_DWORD *)(a1 + 5188));
  sub_2F99CC(&v22, v7 + v6, *a2 + v8);
  __n128 v16 = v22;
  sub_638424(a3, &v16);
  sub_69200(a3, *(unsigned __int8 *)(*(void *)(a1 + 2160) + 430));
  unint64_t v9 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  __n128 v10 = v20;
  if (v20)
  {
    do
    {
      uint64_t v11 = (void *)*v10;
      sub_4F4B48((uint64_t)(v10 + 2));
      operator delete(v10);
      __n128 v10 = v11;
    }
    while (v11);
  }
  uint64_t v12 = __p;
  __p = 0;
  if (v12) {
    operator delete(v12);
  }
  uint64_t v13 = (void **)v17;
  if (v17)
  {
    v14 = v18;
    v15 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      v15 = v17;
    }
    v18 = v13;
    operator delete(v15);
  }
}

void sub_8718B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_8718C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_639B78(v4);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_8718E4(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  sub_8B7A08((uint64_t)&v17);
  sub_639530(a3, (uint64_t)&v17, (void *)(a1 + 5176), 0, 0, 1);
  sub_63841C(a3, 74);
  uint64_t v6 = sub_62C7DC(*(void **)(a1 + 2160), *(_DWORD *)(a1 + 5188));
  uint64_t v7 = *a2;
  uint64_t v8 = sub_62C848(*(void **)(a1 + 2160), *(_DWORD *)(a1 + 5188));
  sub_2F99CC(&v22, v7 + v6, *a2 + v8);
  __n128 v16 = v22;
  sub_638424(a3, &v16);
  sub_69200(a3, *(unsigned __int8 *)(*(void *)(a1 + 2160) + 430));
  unint64_t v9 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  __n128 v10 = v20;
  if (v20)
  {
    do
    {
      uint64_t v11 = (void *)*v10;
      sub_4F4B48((uint64_t)(v10 + 2));
      operator delete(v10);
      __n128 v10 = v11;
    }
    while (v11);
  }
  uint64_t v12 = __p;
  __p = 0;
  if (v12) {
    operator delete(v12);
  }
  uint64_t v13 = (void **)v17;
  if (v17)
  {
    v14 = v18;
    v15 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      v15 = v17;
    }
    v18 = v13;
    operator delete(v15);
  }
}

void sub_871A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_871A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_639B78(v4);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_871AAC(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  sub_8B7B38((uint64_t)&v17);
  sub_639530(a3, (uint64_t)&v17, (void *)(a1 + 5176), 0, 0, 1);
  sub_63841C(a3, 75);
  uint64_t v6 = sub_62C7DC(*(void **)(a1 + 2160), *(_DWORD *)(a1 + 5188));
  uint64_t v7 = *a2;
  uint64_t v8 = sub_62C848(*(void **)(a1 + 2160), *(_DWORD *)(a1 + 5188));
  sub_2F99CC(&v22, v7 + v6, *a2 + v8);
  __n128 v16 = v22;
  sub_638424(a3, &v16);
  sub_69200(a3, *(unsigned __int8 *)(*(void *)(a1 + 2160) + 430));
  unint64_t v9 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  __n128 v10 = v20;
  if (v20)
  {
    do
    {
      uint64_t v11 = (void *)*v10;
      sub_4F4B48((uint64_t)(v10 + 2));
      operator delete(v10);
      __n128 v10 = v11;
    }
    while (v11);
  }
  uint64_t v12 = __p;
  __p = 0;
  if (v12) {
    operator delete(v12);
  }
  uint64_t v13 = (void **)v17;
  if (v17)
  {
    v14 = v18;
    v15 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      v15 = v17;
    }
    v18 = v13;
    operator delete(v15);
  }
}

void sub_871C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_871C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_639B78(v4);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_871C74(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  sub_8B7C68((uint64_t)&v17);
  sub_639530(a3, (uint64_t)&v17, (void *)(a1 + 5176), 0, 0, 1);
  sub_63841C(a3, 78);
  uint64_t v6 = sub_62C7DC(*(void **)(a1 + 2160), *(_DWORD *)(a1 + 5188));
  uint64_t v7 = *a2;
  uint64_t v8 = sub_62C848(*(void **)(a1 + 2160), *(_DWORD *)(a1 + 5188));
  sub_2F99CC(&v22, v7 + v6, *a2 + v8);
  __n128 v16 = v22;
  sub_638424(a3, &v16);
  sub_69200(a3, *(unsigned __int8 *)(*(void *)(a1 + 2160) + 430));
  unint64_t v9 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  __n128 v10 = v20;
  if (v20)
  {
    do
    {
      uint64_t v11 = (void *)*v10;
      sub_4F4B48((uint64_t)(v10 + 2));
      operator delete(v10);
      __n128 v10 = v11;
    }
    while (v11);
  }
  uint64_t v12 = __p;
  __p = 0;
  if (v12) {
    operator delete(v12);
  }
  uint64_t v13 = (void **)v17;
  if (v17)
  {
    v14 = v18;
    v15 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      v15 = v17;
    }
    v18 = v13;
    operator delete(v15);
  }
}

void sub_871E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_871E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_639B78(v4);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_871E3C(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  sub_8B7D98((uint64_t)&v17);
  sub_639530(a3, (uint64_t)&v17, (void *)(a1 + 5176), 0, 0, 1);
  sub_63841C(a3, 76);
  uint64_t v6 = sub_62C7DC(*(void **)(a1 + 2160), *(_DWORD *)(a1 + 5188));
  uint64_t v7 = *a2;
  uint64_t v8 = sub_62C848(*(void **)(a1 + 2160), *(_DWORD *)(a1 + 5188));
  sub_2F99CC(&v22, v7 + v6, *a2 + v8);
  __n128 v16 = v22;
  sub_638424(a3, &v16);
  sub_69200(a3, *(unsigned __int8 *)(*(void *)(a1 + 2160) + 430));
  unint64_t v9 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  __n128 v10 = v20;
  if (v20)
  {
    do
    {
      uint64_t v11 = (void *)*v10;
      sub_4F4B48((uint64_t)(v10 + 2));
      operator delete(v10);
      __n128 v10 = v11;
    }
    while (v11);
  }
  uint64_t v12 = __p;
  __p = 0;
  if (v12) {
    operator delete(v12);
  }
  uint64_t v13 = (void **)v17;
  if (v17)
  {
    v14 = v18;
    v15 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      v15 = v17;
    }
    v18 = v13;
    operator delete(v15);
  }
}

void sub_871FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_871FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_639B78(v4);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_872004(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  sub_8B7EC8((uint64_t)&v17);
  sub_639530(a3, (uint64_t)&v17, (void *)(a1 + 5176), 0, 0, 1);
  sub_63841C(a3, 79);
  uint64_t v6 = sub_62C7DC(*(void **)(a1 + 2160), *(_DWORD *)(a1 + 5188));
  uint64_t v7 = *a2;
  uint64_t v8 = sub_62C848(*(void **)(a1 + 2160), *(_DWORD *)(a1 + 5188));
  sub_2F99CC(&v22, v7 + v6, *a2 + v8);
  __n128 v16 = v22;
  sub_638424(a3, &v16);
  sub_69200(a3, *(unsigned __int8 *)(*(void *)(a1 + 2160) + 430));
  unint64_t v9 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  __n128 v10 = v20;
  if (v20)
  {
    do
    {
      uint64_t v11 = (void *)*v10;
      sub_4F4B48((uint64_t)(v10 + 2));
      operator delete(v10);
      __n128 v10 = v11;
    }
    while (v11);
  }
  uint64_t v12 = __p;
  __p = 0;
  if (v12) {
    operator delete(v12);
  }
  uint64_t v13 = (void **)v17;
  if (v17)
  {
    v14 = v18;
    v15 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      v15 = v17;
    }
    v18 = v13;
    operator delete(v15);
  }
}

void sub_872198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_8721AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_639B78(v4);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_8721CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 2160);
  double v3 = *(double *)(v2 + 2008) / 3.6;
  int v4 = sub_62BFB0((unsigned int *)v2, *(_DWORD *)(a1 + 5188));
  if (v4 < 0) {
    char v5 = -5;
  }
  else {
    char v5 = 5;
  }
  signed int v6 = v4 / 10 + (((103 * (char)(v5 + v4 % 10)) >> 15) & 1) + ((103 * (char)(v5 + v4 % 10)) >> 10);
  int v7 = sub_62C01C(*(unsigned int **)(a1 + 2160), *(_DWORD *)(a1 + 5188));
  if (v7 < 0) {
    char v8 = -5;
  }
  else {
    char v8 = 5;
  }
  unsigned int v9 = (((103 * (char)(v8 + v7 % 10)) >> 15) & 1) + ((103 * (char)(v8 + v7 % 10)) >> 10);
  double v10 = v3 * (double)v6 * 100.0;
  if (v10 >= 0.0)
  {
    double v11 = v3 * (double)v6 * 100.0;
    if (v10 >= 4.50359963e15) {
      goto LABEL_15;
    }
    uint64_t v12 = (uint64_t)(v10 + v10) + 1;
  }
  else
  {
    double v11 = v3 * (double)v6 * 100.0;
    if (v10 <= -4.50359963e15) {
      goto LABEL_15;
    }
    uint64_t v12 = (uint64_t)(v10 + v10);
    if (v12 >= 1) {
      --v12;
    }
  }
  double v11 = (double)(v12 >> 1);
LABEL_15:
  int v13 = v7 / 10 + v9;
  if (v11 >= 9.22337204e18)
  {
    uint64_t v15 = 0x7FFFFFFFFFFFFFFELL;
    goto LABEL_26;
  }
  if (v10 >= 0.0)
  {
    if (v10 < 4.50359963e15)
    {
      uint64_t v14 = (uint64_t)(v10 + v10) + 1;
LABEL_24:
      double v10 = (double)(v14 >> 1);
    }
  }
  else if (v10 > -4.50359963e15)
  {
    uint64_t v14 = (uint64_t)(v10 + v10);
    if (v14 >= 1) {
      --v14;
    }
    goto LABEL_24;
  }
  uint64_t v15 = (uint64_t)v10;
LABEL_26:
  uint64_t v16 = *(void *)(a1 + 5192);
  if (v15 >= v16) {
    uint64_t v15 = *(void *)(a1 + 5192);
  }
  uint64_t v53 = v15;
  double v17 = v3 * (double)v13 * 100.0;
  if (v17 >= 0.0)
  {
    double v18 = v3 * (double)v13 * 100.0;
    if (v17 >= 4.50359963e15) {
      goto LABEL_36;
    }
    uint64_t v19 = (uint64_t)(v17 + v17) + 1;
  }
  else
  {
    double v18 = v3 * (double)v13 * 100.0;
    if (v17 <= -4.50359963e15) {
      goto LABEL_36;
    }
    uint64_t v19 = (uint64_t)(v17 + v17);
    if (v19 >= 1) {
      --v19;
    }
  }
  double v18 = (double)(v19 >> 1);
LABEL_36:
  if (v18 >= 9.22337204e18)
  {
    uint64_t v21 = 0x7FFFFFFFFFFFFFFELL;
    goto LABEL_47;
  }
  if (v17 >= 0.0)
  {
    if (v17 < 4.50359963e15)
    {
      uint64_t v20 = (uint64_t)(v17 + v17) + 1;
LABEL_45:
      double v17 = (double)(v20 >> 1);
    }
  }
  else if (v17 > -4.50359963e15)
  {
    uint64_t v20 = (uint64_t)(v17 + v17);
    if (v20 >= 1) {
      --v20;
    }
    goto LABEL_45;
  }
  uint64_t v21 = (uint64_t)v17;
LABEL_47:
  if (v21 < v16) {
    uint64_t v16 = v21;
  }
  uint64_t v52 = v16;
  __n128 v22 = (uint64_t **)(a1 + 5200);
  sub_63AD48(v22, &v53, &v52, 1, (uint64_t)v42);
  sub_63AF84(v22, &v53, &v52, (uint64_t)v32);
  BOOL v23 = sub_564868(v42);
  uint64_t v24 = v42[0];
  uint64_t v25 = v53;
  BOOL v26 = sub_564868(v32);
  uint64_t v27 = v32[0];
  uint64_t v28 = v53;
  if (v41 < 0)
  {
    operator delete(__p);
    if ((v39 & 0x80000000) == 0)
    {
LABEL_51:
      if ((v37 & 0x80000000) == 0) {
        goto LABEL_52;
      }
      goto LABEL_72;
    }
  }
  else if ((v39 & 0x80000000) == 0)
  {
    goto LABEL_51;
  }
  operator delete(v38);
  if ((v37 & 0x80000000) == 0)
  {
LABEL_52:
    if ((v35 & 0x80000000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_73;
  }
LABEL_72:
  operator delete(v36);
  if ((v35 & 0x80000000) == 0)
  {
LABEL_53:
    if ((v33 & 0x80000000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_74;
  }
LABEL_73:
  operator delete(v34);
  if ((v33 & 0x80000000) == 0)
  {
LABEL_54:
    if ((v51 & 0x80000000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_75;
  }
LABEL_74:
  operator delete((void *)v32[1]);
  if ((v51 & 0x80000000) == 0)
  {
LABEL_55:
    if ((v49 & 0x80000000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_76;
  }
LABEL_75:
  operator delete(v50);
  if ((v49 & 0x80000000) == 0)
  {
LABEL_56:
    if ((v47 & 0x80000000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_77;
  }
LABEL_76:
  operator delete(v48);
  if ((v47 & 0x80000000) == 0)
  {
LABEL_57:
    if ((v45 & 0x80000000) == 0) {
      goto LABEL_58;
    }
LABEL_78:
    operator delete(v44);
    if ((v43 & 0x80000000) == 0) {
      goto LABEL_59;
    }
    goto LABEL_79;
  }
LABEL_77:
  operator delete(v46);
  if (v45 < 0) {
    goto LABEL_78;
  }
LABEL_58:
  if ((v43 & 0x80000000) == 0) {
    goto LABEL_59;
  }
LABEL_79:
  operator delete((void *)v42[1]);
LABEL_59:
  if (v26) {
    uint64_t v29 = v27;
  }
  else {
    uint64_t v29 = v28;
  }
  if (v23) {
    uint64_t v30 = v24;
  }
  else {
    uint64_t v30 = v25;
  }
  if (v30 >= v28) {
    uint64_t v30 = v28;
  }
  if (v29 >= v30) {
    return v30;
  }
  else {
    return v29;
  }
}

void sub_8725F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

void sub_872610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

uint64_t sub_872624(uint64_t a1)
{
  uint64_t v2 = (unsigned char *)(a1 + 5912);
  uint64_t v3 = sub_62BB78(*(void **)(a1 + 2160), *(_DWORD *)(a1 + 5188));
  uint64_t v4 = *(void *)(a1 + 5192);
  if (v4 >= v3) {
    uint64_t v4 = v3;
  }
  uint64_t v33 = v4;
  if (v2[1889])
  {
    uint64_t v5 = sub_62BBE4(*(void **)(a1 + 2160), *(_DWORD *)(a1 + 5188));
    uint64_t v6 = *(void *)(a1 + 5192);
    if (v6 >= v5) {
      uint64_t v6 = v5;
    }
    int v7 = v2[1889];
    uint64_t v32 = v6;
    if (v7)
    {
      uint64_t v8 = sub_62BAA0(*(void **)(a1 + 2160), *(_DWORD *)(a1 + 5188));
      if (*(void *)(a1 + 5192) >= v8) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = *(void *)(a1 + 5192);
      }
      if (!v2[1996]) {
        goto LABEL_11;
      }
LABEL_18:
      uint64_t v10 = *(void *)(a1 + 5344);
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v32 = v4;
  }
  uint64_t v11 = sub_62BB0C(*(void **)(a1 + 2160), *(_DWORD *)(a1 + 5188));
  if (*(void *)(a1 + 5192) >= v11) {
    uint64_t v9 = v11;
  }
  else {
    uint64_t v9 = *(void *)(a1 + 5192);
  }
  if (v2[1996]) {
    goto LABEL_18;
  }
LABEL_11:
  if (v2[2001])
  {
    uint64_t v10 = *(void *)(a1 + 7072);
    goto LABEL_19;
  }
  if (!v2[1999])
  {
    if (v2[1997] && v2[768]) {
      return *(void *)(a1 + 6496);
    }
    if (!v2[1889])
    {
LABEL_43:
      uint64_t v15 = v9;
      if (v2[192]) {
        uint64_t v15 = *(void *)(a1 + 5920);
      }
      if (*v2) {
        uint64_t v16 = v32;
      }
      else {
        uint64_t v16 = v15;
      }
      uint64_t v17 = v9;
      if (v2[1889]) {
        uint64_t v17 = sub_683498(a1 + 7464);
      }
      if (v2[1890]) {
        uint64_t v18 = sub_85642C(a1, v9);
      }
      else {
        uint64_t v18 = v9;
      }
      uint64_t v19 = v32;
      if (v32 <= v17) {
        uint64_t v19 = v17;
      }
      if (v18 >= v9) {
        uint64_t v20 = v9;
      }
      else {
        uint64_t v20 = v18;
      }
      if (v16 < v20) {
        uint64_t v20 = v16;
      }
      if (v19 >= v20) {
        return v20;
      }
      else {
        return v19;
      }
    }
    sub_63AD1C((uint64_t **)(a1 + 5200), &v33, 1, (uint64_t)v22);
    if (sub_564868(v22))
    {
      BOOL v14 = 1;
      uint64_t v13 = v33;
    }
    else
    {
      sub_63AD1C((uint64_t **)(a1 + 5200), &v32, 1, (uint64_t)v21);
      BOOL v14 = sub_564868(v21);
      uint64_t v13 = v21[0];
      sub_7D0A58((uint64_t)v21);
    }
    if (v31 < 0)
    {
      operator delete(__p);
      if ((v29 & 0x80000000) == 0)
      {
LABEL_33:
        if ((v27 & 0x80000000) == 0) {
          goto LABEL_34;
        }
        goto LABEL_40;
      }
    }
    else if ((v29 & 0x80000000) == 0)
    {
      goto LABEL_33;
    }
    operator delete(v28);
    if ((v27 & 0x80000000) == 0)
    {
LABEL_34:
      if ((v25 & 0x80000000) == 0) {
        goto LABEL_35;
      }
      goto LABEL_41;
    }
LABEL_40:
    operator delete(v26);
    if ((v25 & 0x80000000) == 0)
    {
LABEL_35:
      if ((v23 & 0x80000000) == 0) {
        goto LABEL_36;
      }
      goto LABEL_42;
    }
LABEL_41:
    operator delete(v24);
    if ((v23 & 0x80000000) == 0)
    {
LABEL_36:
      if (v14) {
        return v13;
      }
      goto LABEL_43;
    }
LABEL_42:
    operator delete(v22[1]);
    if (v14) {
      return v13;
    }
    goto LABEL_43;
  }
  uint64_t v10 = *(void *)(a1 + 6112);
LABEL_19:
  if (v10 >= v9) {
    return v9;
  }
  else {
    return v10;
  }
}

void sub_8728B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

void sub_8728CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

void sub_8728E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

void sub_8728F4(uint64_t a1, void **a2)
{
  uint64_t v3 = a2[5];
  if (v3)
  {
    do
    {
      uint64_t v4 = (void *)*v3;
      sub_4F4B48((uint64_t)(v3 + 2));
      operator delete(v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  uint64_t v5 = a2[3];
  a2[3] = 0;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = (void **)*a2;
  if (*a2)
  {
    int v7 = (void **)a2[1];
    uint64_t v8 = *a2;
    if (v7 == v6)
    {
      a2[1] = v6;
    }
    else
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      uint64_t v8 = *a2;
      a2[1] = v6;
    }
    operator delete(v8);
  }
}

uint64_t sub_8729D4(void *a1, unint64_t a2)
{
  if (0x1A8C536FE1A8C537 * ((uint64_t)(a1[1] - *a1) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    uint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0x1A8C536FE1A8C537 * ((uint64_t)(a1[1] - *a1) >> 3));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v15;
    }
    else {
      uint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    uint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    BOOL v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 1080 * a2;
}

void sub_872B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

void sub_872C14(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(__n128 **)(*a1 + 7440);
  uint64_t v4 = *(__n128 **)(*a1 + 7448);
  if (v3 != v4)
  {
    while (1)
    {
      if (sub_7C49E4(a2))
      {
        unint64_t v6 = sub_46E118(a2);
        uint64_t v7 = sub_682208((uint64_t)v3);
        uint64_t v8 = sub_6672BC((void *)(v2 + 7440), v6);
        if (v7 == sub_682208(v8)) {
          break;
        }
      }
      v3 += 21;
      if (v3 == v4)
      {
        uint64_t v3 = v4;
        if (v4 == *(__n128 **)(v2 + 7448)) {
          return;
        }
LABEL_7:
        uint64_t v9 = sub_638A2C(a2);
        uint64_t v10 = sub_638A34(a2);
        sub_2F99CC(&v11, v9, v10);
        sub_68475C(v3, &v11);
        return;
      }
    }
    if (v3 == *(__n128 **)(v2 + 7448)) {
      return;
    }
    goto LABEL_7;
  }
}

uint64_t sub_872D0C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = -1;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  int64x2_t v4 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(a1 + 40) = v4;
  *(_DWORD *)(a1 + 56) = 0x7FFFFFFF;
  *(int64x2_t *)(a1 + 64) = v4;
  *(_DWORD *)(a1 + 80) = 0x7FFFFFFF;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 88) = 0x7FFFFFFF;
  *(void *)(a1 + 92) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 112) = 0x8000000080000000;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(unsigned char *)(a1 + 168) = 0;
  *(void *)(a1 + 172) = 0x8000000080000000;
  *(_DWORD *)(a1 + 180) = 0x7FFFFFFF;
  *(_DWORD *)(a1 + 192) = -1;
  *(_OWORD *)(a1 + 200) = xmmword_20E8160;
  *(_DWORD *)(a1 + 216) = 0x7FFFFFFF;
  *(void *)(a1 + 220) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 232) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 240) = _Q0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 256) = 0;
  *(unsigned char *)(a1 + 280) = 1;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 288) = 0;
  *(_WORD *)(a1 + 312) = 0;
  *(void *)(a1 + 316) = 0xFFFFFFFFLL;
  *(void *)(a1 + 328) = 0x7FFFFFFFFFFFFFFFLL;
  *(unsigned char *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 340) = 0;
  sub_5F3B34(a1 + 344);
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_DWORD *)(a1 + 584) = 1065353216;
  *(unsigned char *)(a1 + 592) = 1;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_DWORD *)(a1 + 632) = 1065353216;
  *(void *)(a1 + 640) = 0;
  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 648) = 0;
  unint64_t v10 = *(void *)(a1 + 264);
  if (v10 >= *(void *)(a1 + 272))
  {
    uint64_t v11 = sub_63D140((uint64_t *)(a1 + 256), a2);
  }
  else
  {
    sub_63D394(a1 + 272, *(void *)(a1 + 264), a2);
    uint64_t v11 = v10 + 104;
    *(void *)(a1 + 264) = v10 + 104;
  }
  *(void *)(a1 + 264) = v11;
  return a1;
}

void sub_872E78(_Unwind_Exception *a1)
{
  unint64_t v6 = *(void **)(v1 + 640);
  if (v6)
  {
    *(void *)(v1 + 648) = v6;
    operator delete(v6);
  }
  sub_592590(v3);
  sub_4D4880((void **)(v1 + 528));
  if (*(char *)(v1 + 527) < 0) {
    operator delete(*v4);
  }
  sub_4D4B58(v2);
  sub_4F32CC((void *)v1);
  _Unwind_Resume(a1);
}

void sub_872ED8(_Unwind_Exception *a1)
{
  sub_4F32CC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_872EEC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(_DWORD *)a1 = -1;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  int64x2_t v6 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(a1 + 40) = v6;
  *(_DWORD *)(a1 + 56) = 0x7FFFFFFF;
  *(int64x2_t *)(a1 + 64) = v6;
  *(_DWORD *)(a1 + 80) = 0x7FFFFFFF;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 88) = 0x7FFFFFFF;
  *(void *)(a1 + 92) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 112) = 0x8000000080000000;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(unsigned char *)(a1 + 168) = 0;
  *(void *)(a1 + 172) = 0x8000000080000000;
  *(_DWORD *)(a1 + 180) = 0x7FFFFFFF;
  *(_DWORD *)(a1 + 192) = -1;
  *(_OWORD *)(a1 + 200) = xmmword_20E8160;
  *(_DWORD *)(a1 + 216) = 0x7FFFFFFF;
  *(void *)(a1 + 220) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 232) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 240) = _Q0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 256) = 0;
  *(unsigned char *)(a1 + 280) = 1;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 288) = 0;
  *(_WORD *)(a1 + 312) = 0;
  *(void *)(a1 + 316) = 0xFFFFFFFFLL;
  *(void *)(a1 + 328) = 0x7FFFFFFFFFFFFFFFLL;
  *(unsigned char *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 340) = 0;
  sub_5F3B34(a1 + 344);
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_DWORD *)(a1 + 584) = 1065353216;
  *(unsigned char *)(a1 + 592) = 1;
  uint64_t v12 = *a3;
  *a3 = 0;
  *(void *)(a1 + 600) = v12;
  *(void *)(a1 + 608) = a3[1];
  a3[1] = 0;
  uint64_t v15 = a3[2];
  BOOL v14 = a3 + 2;
  uint64_t v13 = v15;
  *(void *)(a1 + 616) = v15;
  uint64_t v16 = v14[1];
  *(void *)(a1 + 624) = v16;
  *(_DWORD *)(a1 + 632) = *((_DWORD *)v14 + 4);
  if (v16)
  {
    unint64_t v17 = *(void *)(v13 + 8);
    unint64_t v18 = *(void *)(a1 + 608);
    if ((v18 & (v18 - 1)) != 0)
    {
      if (v17 >= v18) {
        v17 %= v18;
      }
    }
    else
    {
      v17 &= v18 - 1;
    }
    *(void *)(v12 + 8 * v17) = a1 + 616;
    void *v14 = 0;
    v14[1] = 0;
  }
  *(void *)(a1 + 656) = 0;
  *(_OWORD *)(a1 + 640) = 0uLL;
  unint64_t v19 = *(void *)(a1 + 264);
  if (v19 >= *(void *)(a1 + 272))
  {
    uint64_t v20 = sub_63D140((uint64_t *)(a1 + 256), a2);
  }
  else
  {
    sub_63D394(a1 + 272, *(void *)(a1 + 264), a2);
    uint64_t v20 = v19 + 104;
    *(void *)(a1 + 264) = v19 + 104;
  }
  *(void *)(a1 + 264) = v20;
  return a1;
}

void sub_8730C0(_Unwind_Exception *a1)
{
  uint64_t v5 = *(void **)(v1 + 640);
  if (v5)
  {
    *(void *)(v1 + 648) = v5;
    operator delete(v5);
  }
  sub_592590(v1 + 600);
  sub_4D4880((void **)(v1 + 528));
  if (*(char *)(v1 + 527) < 0) {
    operator delete(*v3);
  }
  sub_4D4B58(v2);
  sub_4F32CC((void *)v1);
  _Unwind_Resume(a1);
}

void sub_873130(_Unwind_Exception *a1)
{
  sub_4F32CC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_873144(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *a1;
  uint64_t v6 = (a2 - *a1) / 664;
  uint64_t v7 = *a1 + 664 * v6;
  if (a5 < 1) {
    return v7;
  }
  uint64_t v9 = a3;
  uint64_t v11 = a1[2];
  unint64_t v12 = a1[1];
  if ((uint64_t)(0xA3784A062B2E43DBLL * ((uint64_t)(v11 - v12) >> 3)) >= a5)
  {
    if ((uint64_t)(0xA3784A062B2E43DBLL * ((uint64_t)(v12 - v7) >> 3)) >= a5)
    {
      uint64_t v18 = a3 + 664 * a5;
      uint64_t v20 = a1[1];
    }
    else
    {
      uint64_t v18 = a3 + 8 * ((uint64_t)(v12 - v7) >> 3);
      if (v18 == a4)
      {
        uint64_t v20 = a1[1];
        a1[1] = v12;
        if ((uint64_t)(v12 - v7) < 1) {
          return v7;
        }
      }
      else
      {
        uint64_t v19 = 0;
        do
        {
          sub_594D4C(v12 + v19, v18 + v19);
          v19 += 664;
        }
        while (v18 + v19 != a4);
        uint64_t v20 = v12 + v19;
        a1[1] = v12 + v19;
        if ((uint64_t)(v12 - v7) < 1) {
          return v7;
        }
      }
    }
    uint64_t v21 = v7 + 664 * a5;
    unint64_t v22 = v20 - 664 * a5;
    uint64_t v23 = v20;
    if (v22 < v12)
    {
      uint64_t v23 = v20;
      do
      {
        uint64_t v24 = sub_87353C(v23, v22);
        v22 += 664;
        uint64_t v23 = v24 + 664;
      }
      while (v22 < v12);
    }
    a1[1] = v23;
    if (v20 != v21)
    {
      uint64_t v25 = v20 - 664;
      uint64_t v26 = 8 * ((v20 - v21) >> 3);
      do
      {
        sub_873890(v25, 664 * v6 + v5 - 664 + v26);
        v25 -= 664;
        v26 -= 664;
      }
      while (v26);
    }
    if (v18 != v9)
    {
      uint64_t v27 = v7;
      do
      {
        sub_59DCC4(v27, v9);
        v9 += 664;
        v27 += 664;
      }
      while (v9 != v18);
    }
    return v7;
  }
  unint64_t v13 = a5 - 0x5C87B5F9D4D1BC25 * ((uint64_t)(v12 - v5) >> 3);
  if (v13 > 0x62B2E43DAFCEA6) {
    sub_2E00();
  }
  unint64_t v14 = 0xA3784A062B2E43DBLL * ((v11 - v5) >> 3);
  if (2 * v14 > v13) {
    unint64_t v13 = 2 * v14;
  }
  if (v14 >= 0x3159721ED7E753) {
    unint64_t v15 = 0x62B2E43DAFCEA6;
  }
  else {
    unint64_t v15 = v13;
  }
  if (v15)
  {
    if (v15 > 0x62B2E43DAFCEA6) {
      sub_188D718();
    }
    uint64_t v16 = (char *)operator new(664 * v15);
  }
  else
  {
    uint64_t v16 = 0;
  }
  uint64_t v29 = (uint64_t)&v16[664 * v6];
  uint64_t v38 = v29;
  char v39 = &v16[664 * v15];
  uint64_t v30 = 664 * a5;
  uint64_t v31 = v29 + 664 * a5;
  do
  {
    sub_594D4C(v29, v9);
    v29 += 664;
    v9 += 664;
    v30 -= 664;
  }
  while (v30);
  uint64_t v28 = v38;
  uint64_t v32 = *a1;
  uint64_t v33 = v38;
  if (*a1 != v7)
  {
    uint64_t v34 = v7;
    uint64_t v33 = v38;
    do
    {
      v33 -= 664;
      v34 -= 664;
      sub_87353C(v33, v34);
    }
    while (v34 != v32);
  }
  uint64_t v35 = a1[1];
  if (v35 != v7)
  {
    do
    {
      sub_87353C(v31, v7);
      v7 += 664;
      v31 += 664;
    }
    while (v7 != v35);
    uint64_t v7 = a1[1];
  }
  v36 = (void *)*a1;
  *a1 = v33;
  a1[1] = v31;
  a1[2] = (uint64_t)v39;
  while ((void *)v7 != v36)
  {
    v7 -= 664;
    sub_576A58(v7);
  }
  if (v36) {
    operator delete(v36);
  }
  return v28;
}

void sub_8734D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_8734E8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_8734E8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 664;
    sub_576A58(i - 664);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_87353C(uint64_t result, uint64_t a2)
{
  *(_DWORD *)result = *(_DWORD *)a2;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 8) = 0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(result + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  long long v2 = *(_OWORD *)(a2 + 32);
  long long v3 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(result + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(result + 64) = v3;
  *(_OWORD *)(result + 32) = v2;
  long long v4 = *(_OWORD *)(a2 + 96);
  uint64_t v5 = *(void *)(a2 + 112);
  *(_OWORD *)(result + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(result + 96) = v4;
  *(void *)(result + 112) = v5;
  *(void *)(result + 120) = 0;
  *(void *)(result + 128) = 0;
  *(void *)(result + 136) = 0;
  *(_OWORD *)(result + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(result + 136) = *(void *)(a2 + 136);
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *(void *)(result + 144) = 0;
  *(void *)(result + 152) = 0;
  *(void *)(result + 160) = 0;
  *(_OWORD *)(result + 144) = *(_OWORD *)(a2 + 144);
  *(void *)(result + 160) = *(void *)(a2 + 160);
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  *(_OWORD *)(result + 168) = *(_OWORD *)(a2 + 168);
  *(_DWORD *)(result + 192) = *(_DWORD *)(a2 + 192);
  if (*(_DWORD *)(a2 + 192) <= 1u) {
    *(void *)(result + 184) = *(void *)(a2 + 184);
  }
  *(_OWORD *)(result + 200) = *(_OWORD *)(a2 + 200);
  long long v6 = *(_OWORD *)(a2 + 216);
  uint64_t v7 = *(void *)(a2 + 248);
  *(_OWORD *)(result + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(result + 216) = v6;
  *(_OWORD *)(result + 264) = 0u;
  *(void *)(result + 248) = v7;
  *(void *)(result + 256) = 0;
  *(_OWORD *)(result + 256) = *(_OWORD *)(a2 + 256);
  *(void *)(result + 272) = *(void *)(a2 + 272);
  *(void *)(a2 + 272) = 0;
  *(_OWORD *)(a2 + 256) = 0u;
  *(unsigned char *)(result + 280) = *(unsigned char *)(a2 + 280);
  *(_OWORD *)(result + 296) = 0u;
  *(void *)(result + 288) = 0;
  *(_OWORD *)(result + 288) = *(_OWORD *)(a2 + 288);
  *(void *)(result + 304) = *(void *)(a2 + 304);
  *(void *)(a2 + 304) = 0;
  *(_OWORD *)(a2 + 288) = 0u;
  long long v8 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(result + 321) = *(_OWORD *)(a2 + 321);
  *(_OWORD *)(result + 312) = v8;
  *(_DWORD *)(result + 340) = *(_DWORD *)(a2 + 340);
  *(_OWORD *)(result + 352) = 0u;
  *(void *)(result + 344) = 0;
  uint64_t v9 = *(void *)(a2 + 352);
  *(void *)(result + 344) = *(void *)(a2 + 344);
  *(void *)(result + 352) = v9;
  *(void *)(result + 360) = *(void *)(a2 + 360);
  *(void *)(a2 + 360) = 0;
  *(_OWORD *)(a2 + 344) = 0u;
  *(void *)(result + 384) = 0;
  *(_OWORD *)(result + 368) = 0u;
  *(_OWORD *)(result + 368) = *(_OWORD *)(a2 + 368);
  *(void *)(result + 384) = *(void *)(a2 + 384);
  *(void *)(a2 + 384) = 0;
  *(_OWORD *)(a2 + 368) = 0u;
  *(void *)(result + 408) = 0;
  *(_OWORD *)(result + 392) = 0u;
  *(void *)(result + 392) = *(void *)(a2 + 392);
  *(void *)(result + 400) = *(void *)(a2 + 400);
  *(void *)(result + 408) = *(void *)(a2 + 408);
  *(void *)(a2 + 408) = 0;
  *(_OWORD *)(a2 + 392) = 0u;
  *(void *)(result + 432) = 0;
  *(_OWORD *)(result + 416) = 0u;
  *(_OWORD *)(result + 416) = *(_OWORD *)(a2 + 416);
  *(void *)(result + 432) = *(void *)(a2 + 432);
  uint64_t v10 = *(void *)(a2 + 440);
  *(_OWORD *)(a2 + 416) = 0u;
  *(_OWORD *)(a2 + 432) = 0u;
  *(void *)(result + 440) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 448);
  *(unsigned char *)(result + 452) = *(unsigned char *)(a2 + 452);
  *(_DWORD *)(result + 448) = v10;
  long long v11 = *(_OWORD *)(a2 + 456);
  *(void *)(result + 472) = *(void *)(a2 + 472);
  *(_OWORD *)(result + 456) = v11;
  *(void *)(a2 + 456) = 0;
  *(_OWORD *)(a2 + 464) = 0u;
  long long v12 = *(_OWORD *)(a2 + 480);
  *(void *)(result + 496) = *(void *)(a2 + 496);
  *(_OWORD *)(result + 480) = v12;
  *(_OWORD *)(a2 + 488) = 0u;
  *(void *)(a2 + 480) = 0;
  long long v13 = *(_OWORD *)(a2 + 504);
  *(void *)(result + 520) = *(void *)(a2 + 520);
  *(_OWORD *)(result + 504) = v13;
  *(void *)(a2 + 520) = 0;
  *(_OWORD *)(a2 + 504) = 0u;
  *(void *)(result + 544) = 0;
  *(_OWORD *)(result + 528) = 0u;
  *(_OWORD *)(result + 528) = *(_OWORD *)(a2 + 528);
  *(void *)(result + 544) = *(void *)(a2 + 544);
  uint64_t v14 = *(void *)(a2 + 552);
  *(_OWORD *)(a2 + 528) = 0u;
  *(_OWORD *)(a2 + 544) = 0u;
  *(void *)(result + 552) = v14;
  *(void *)(result + 560) = *(void *)(a2 + 560);
  *(void *)(a2 + 560) = 0;
  uint64_t v15 = *(void *)(a2 + 568);
  *(void *)(result + 568) = v15;
  uint64_t v16 = *(void *)(a2 + 576);
  *(void *)(result + 576) = v16;
  *(_DWORD *)(result + 584) = *(_DWORD *)(a2 + 584);
  if (v16)
  {
    unint64_t v17 = *(void *)(v15 + 8);
    unint64_t v18 = *(void *)(result + 560);
    if ((v18 & (v18 - 1)) != 0)
    {
      if (v17 >= v18) {
        v17 %= v18;
      }
    }
    else
    {
      v17 &= v18 - 1;
    }
    *(void *)(v14 + 8 * v17) = result + 568;
    *(void *)(a2 + 568) = 0;
    *(void *)(a2 + 576) = 0;
  }
  *(unsigned char *)(result + 592) = *(unsigned char *)(a2 + 592);
  uint64_t v19 = *(void *)(a2 + 600);
  *(void *)(a2 + 600) = 0;
  *(void *)(result + 600) = v19;
  *(void *)(result + 608) = *(void *)(a2 + 608);
  *(void *)(a2 + 608) = 0;
  uint64_t v20 = *(void *)(a2 + 616);
  *(void *)(result + 616) = v20;
  uint64_t v21 = *(void *)(a2 + 624);
  *(void *)(result + 624) = v21;
  *(_DWORD *)(result + 632) = *(_DWORD *)(a2 + 632);
  if (v21)
  {
    unint64_t v22 = *(void *)(v20 + 8);
    unint64_t v23 = *(void *)(result + 608);
    if ((v23 & (v23 - 1)) != 0)
    {
      if (v22 >= v23) {
        v22 %= v23;
      }
    }
    else
    {
      v22 &= v23 - 1;
    }
    *(void *)(v19 + 8 * v22) = result + 616;
    *(void *)(a2 + 616) = 0;
    *(void *)(a2 + 624) = 0;
  }
  *(void *)(result + 656) = 0;
  *(_OWORD *)(result + 640) = 0uLL;
  *(_OWORD *)(result + 640) = *(_OWORD *)(a2 + 640);
  *(void *)(result + 656) = *(void *)(a2 + 656);
  *(void *)(a2 + 656) = 0;
  *(_OWORD *)(a2 + 640) = 0uLL;
  return result;
}

uint64_t sub_873890(uint64_t a1, uint64_t a2)
{
  sub_52ECD8(a1, a2);
  *(_DWORD *)(a1 + 340) = *(_DWORD *)(a2 + 340);
  sub_4D90B4(a1 + 344, a2 + 344);
  long long v4 = (void **)(a1 + 504);
  if (*(char *)(a1 + 527) < 0) {
    operator delete(*v4);
  }
  long long v5 = *(_OWORD *)(a2 + 504);
  *(void *)(a1 + 520) = *(void *)(a2 + 520);
  *(_OWORD *)long long v4 = v5;
  *(unsigned char *)(a2 + 527) = 0;
  *(unsigned char *)(a2 + 504) = 0;
  uint64_t v6 = *(void *)(a1 + 528);
  if (v6)
  {
    uint64_t v7 = (void **)(a1 + 528);
    uint64_t v8 = *(void *)(a1 + 536);
    uint64_t v9 = *(void **)(a1 + 528);
    if (v8 != v6)
    {
      do
      {
        if (*(char *)(v8 - 1) < 0) {
          operator delete(*(void **)(v8 - 24));
        }
        v8 -= 24;
      }
      while (v8 != v6);
      uint64_t v9 = *v7;
    }
    *(void *)(a1 + 536) = v6;
    operator delete(v9);
    void *v7 = 0;
    *(void *)(a1 + 536) = 0;
    *(void *)(a1 + 544) = 0;
  }
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
  *(void *)(a2 + 528) = 0;
  *(void *)(a2 + 536) = 0;
  *(void *)(a2 + 544) = 0;
  sub_52EF44(a1 + 552, (uint64_t *)(a2 + 552));
  *(unsigned char *)(a1 + 592) = *(unsigned char *)(a2 + 592);
  sub_8739D8(a1 + 600, (uint64_t *)(a2 + 600));
  uint64_t v10 = *(void **)(a1 + 640);
  if (v10)
  {
    *(void *)(a1 + 648) = v10;
    operator delete(v10);
    *(void *)(a1 + 640) = 0;
    *(void *)(a1 + 648) = 0;
    *(void *)(a1 + 656) = 0;
  }
  *(_OWORD *)(a1 + 640) = *(_OWORD *)(a2 + 640);
  *(void *)(a1 + 656) = *(void *)(a2 + 656);
  *(void *)(a2 + 656) = 0;
  *(_OWORD *)(a2 + 640) = 0u;
  return a1;
}

void sub_8739D8(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 24))
  {
    long long v4 = *(char **)(a1 + 16);
    if (v4)
    {
      do
      {
        uint64_t v16 = *(char **)v4;
        unint64_t v17 = (void *)*((void *)v4 + 6);
        if (v17)
        {
          *((void *)v4 + 7) = v17;
          operator delete(v17);
        }
        if (v4[39] < 0) {
          operator delete(*((void **)v4 + 2));
        }
        operator delete(v4);
        long long v4 = v16;
      }
      while (v16);
    }
    *(void *)(a1 + 16) = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v7 = *a2;
  *a2 = 0;
  uint64_t v8 = *(void **)a1;
  *(void *)a1 = v7;
  if (v8) {
    operator delete(v8);
  }
  uint64_t v11 = a2[2];
  uint64_t v10 = a2 + 2;
  uint64_t v9 = v11;
  uint64_t v12 = *(v10 - 1);
  *(void *)(a1 + 16) = v11;
  *(void *)(a1 + 8) = v12;
  *(v10 - 1) = 0;
  uint64_t v13 = v10[1];
  *(void *)(a1 + 24) = v13;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v10 + 4);
  if (v13)
  {
    unint64_t v14 = *(void *)(v9 + 8);
    unint64_t v15 = *(void *)(a1 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15) {
        v14 %= v15;
      }
    }
    else
    {
      v14 &= v15 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v14) = a1 + 16;
    *uint64_t v10 = 0;
    v10[1] = 0;
  }
}

void *sub_873AF0(void *result, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9 = a2;
  uint64_t v10 = result;
  unint64_t v31 = a2;
  uint64_t v32 = result;
LABEL_2:
  uint64_t v11 = 1 - a4;
  while (1)
  {
    uint64_t v12 = v9 - (void)v10;
    unint64_t v13 = 0x1A8C536FE1A8C537 * ((v9 - (uint64_t)v10) >> 3);
    if (!(!v6 & v5))
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unint64_t v31 = v9 - 1080;
          uint64_t v27 = sub_638A2C(v9 - 1080);
          if (v27 == sub_638A2C((uint64_t)v10))
          {
            uint64_t v28 = sub_638A34(v9 - 1080);
            result = (void *)sub_638A34((uint64_t)v10);
            if (v28 <= (uint64_t)result) {
              return result;
            }
          }
          else
          {
            uint64_t v29 = sub_638A2C(v9 - 1080);
            result = (void *)sub_638A2C((uint64_t)v10);
            if (v29 <= (uint64_t)result) {
              return result;
            }
          }
          result = sub_873E98((uint64_t *)&v32, (uint64_t *)&v31);
          break;
        case 3uLL:
          unint64_t v31 = v9 - 1080;
          return (void *)sub_874280((uint64_t)v10, (uint64_t)(v10 + 135), v9 - 1080);
        case 4uLL:
          unint64_t v31 = v9 - 1080;
          return sub_8751E4((uint64_t)v10, (uint64_t)(v10 + 135), (uint64_t)(v10 + 270), v9 - 1080);
        case 5uLL:
          unint64_t v31 = v9 - 1080;
          return sub_8753E8((uint64_t)v10, (uint64_t)(v10 + 135), (uint64_t)(v10 + 270), (uint64_t)(v10 + 405), v9 - 1080);
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v12 <= 25919)
    {
      if (a5) {
        return (void *)sub_873F24((uint64_t)v10, v9);
      }
      else {
        return (void *)sub_874104((uint64_t)v10, v9);
      }
    }
    if (v11 == 1) {
      break;
    }
    unint64_t v14 = v13 >> 1;
    uint64_t v15 = v9 - 1080;
    if ((unint64_t)v12 >= 0x21C01)
    {
      sub_874280((uint64_t)v10, (uint64_t)&v10[135 * (v13 >> 1)], v15);
      uint64_t v16 = 135 * v14;
      uint64_t v17 = 1080 * v14 - 1080;
      unint64_t v18 = v31;
      sub_874280((uint64_t)(v32 + 135), (uint64_t)v32 + v17, v31 - 2160);
      sub_874280((uint64_t)(v32 + 270), (uint64_t)&v32[v16 + 135], v18 - 3240);
      sub_874280((uint64_t)v32 + v17, (uint64_t)&v32[v16], (uint64_t)&v32[v16 + 135]);
      uint64_t v30 = &v32[v16];
      sub_873E98((uint64_t *)&v32, (uint64_t *)&v30);
      if (a5) {
        goto LABEL_16;
      }
    }
    else
    {
      sub_874280((uint64_t)&v10[135 * (v13 >> 1)], (uint64_t)v10, v15);
      if (a5) {
        goto LABEL_16;
      }
    }
    uint64_t v19 = (uint64_t)v32;
    uint64_t v20 = (uint64_t)(v32 - 135);
    uint64_t v21 = sub_638A2C((uint64_t)(v32 - 135));
    if (v21 == sub_638A2C(v19))
    {
      uint64_t v22 = sub_638A34(v20);
      if (v22 <= sub_638A34(v19)) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v23 = sub_638A2C(v20);
      if (v23 <= sub_638A2C(v19))
      {
LABEL_23:
        uint64_t v9 = v31;
        result = (void *)sub_874584((uint64_t)v32, v31);
        uint64_t v10 = result;
        goto LABEL_24;
      }
    }
LABEL_16:
    uint64_t v9 = v31;
    unint64_t v24 = sub_874904((uint64_t)v32, v31);
    if ((v25 & 1) == 0) {
      goto LABEL_22;
    }
    int v26 = sub_874C50((uint64_t)v32, v24);
    uint64_t v10 = (void *)(v24 + 1080);
    result = (void *)sub_874C50(v24 + 1080, v9);
    if (result)
    {
      if (v26) {
        return result;
      }
      unint64_t v31 = v24;
      uint64_t v10 = v32;
      uint64_t v9 = v24;
      ++v11;
    }
    else
    {
      if (!v26)
      {
LABEL_22:
        result = (void *)sub_873AF0(v32, v24, a3, -v11, a5 & 1);
        uint64_t v10 = (void *)(v24 + 1080);
LABEL_24:
        a5 = 0;
        uint64_t v32 = v10;
        a4 = -v11;
        goto LABEL_2;
      }
      uint64_t v32 = (void *)(v24 + 1080);
      ++v11;
    }
  }
  if (v10 != (void *)v9) {
    return (void *)sub_87567C(v10, v9, v9, a3);
  }
  return result;
}

void *sub_873E98(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  sub_7574DC((uint64_t)v5, *a1);
  sub_874FD8(v2, v3);
  sub_874FD8(v3, (uint64_t)v5);
  return sub_52F1E8((uint64_t)v5);
}

uint64_t sub_873F24(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return result;
  }
  uint64_t v3 = result;
  uint64_t v4 = result + 1080;
  if (result + 1080 == a2) {
    return result;
  }
  uint64_t v5 = 0;
  uint64_t v6 = result;
  while (2)
  {
    uint64_t v8 = v6;
    uint64_t v6 = v4;
    uint64_t v9 = sub_638A2C(v4);
    if (v9 == sub_638A2C(v8))
    {
      uint64_t v10 = sub_638A34(v6);
      result = sub_638A34(v8);
    }
    else
    {
      uint64_t v10 = sub_638A2C(v6);
      result = sub_638A2C(v8);
    }
    if (v10 <= result) {
      goto LABEL_6;
    }
    sub_7574DC((uint64_t)v15, v6);
    sub_874FD8(v6, v8);
    uint64_t v7 = v3;
    if (v8 == v3) {
      goto LABEL_5;
    }
    uint64_t v11 = v5;
    while (1)
    {
      uint64_t v12 = sub_638A2C((uint64_t)v15);
      if (v12 != sub_638A2C(v3 + v11 - 1080)) {
        break;
      }
      uint64_t v13 = sub_638A34((uint64_t)v15);
      if (v13 <= sub_638A34(v3 + v11 - 1080))
      {
        uint64_t v7 = v3 + v11;
        goto LABEL_5;
      }
LABEL_13:
      v8 -= 1080;
      sub_874FD8(v3 + v11, v3 + v11 - 1080);
      v11 -= 1080;
      if (!v11)
      {
        uint64_t v7 = v3;
        goto LABEL_5;
      }
    }
    uint64_t v14 = sub_638A2C((uint64_t)v15);
    if (v14 > sub_638A2C(v3 + v11 - 1080)) {
      goto LABEL_13;
    }
    uint64_t v7 = v8;
LABEL_5:
    sub_874FD8(v7, (uint64_t)v15);
    result = (uint64_t)sub_52F1E8((uint64_t)v15);
LABEL_6:
    uint64_t v4 = v6 + 1080;
    v5 += 1080;
    if (v6 + 1080 != a2) {
      continue;
    }
    return result;
  }
}

void sub_8740F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_874104(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    while (1)
    {
      uint64_t v4 = v3 + 1080;
      if (v3 + 1080 == a2) {
        break;
      }
      uint64_t v5 = v3;
      v3 += 1080;
      uint64_t v6 = sub_638A2C(v4);
      if (v6 == sub_638A2C(v5))
      {
        uint64_t v7 = sub_638A34(v3);
        result = sub_638A34(v5);
      }
      else
      {
        uint64_t v7 = sub_638A2C(v3);
        result = sub_638A2C(v5);
      }
      if (v7 > result)
      {
        sub_7574DC((uint64_t)v12, v3);
        do
        {
          uint64_t v8 = v5;
          sub_874FD8(v5 + 1080, v5);
          uint64_t v9 = sub_638A2C((uint64_t)v12);
          v5 -= 1080;
          if (v9 == sub_638A2C(v8 - 1080))
          {
            uint64_t v10 = sub_638A34((uint64_t)v12);
            uint64_t v11 = sub_638A34(v8 - 1080);
          }
          else
          {
            uint64_t v10 = sub_638A2C((uint64_t)v12);
            uint64_t v11 = sub_638A2C(v8 - 1080);
          }
        }
        while (v10 > v11);
        sub_874FD8(v8, (uint64_t)v12);
        result = (uint64_t)sub_52F1E8((uint64_t)v12);
      }
    }
  }
  return result;
}

void sub_87426C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_874280(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_638A2C(a2);
  if (v6 == sub_638A2C(a1))
  {
    uint64_t v7 = sub_638A34(a2);
    if (v7 <= sub_638A34(a1)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v12 = sub_638A2C(a3);
    if (v12 == sub_638A2C(a2))
    {
      uint64_t v13 = sub_638A34(a3);
      if (v13 <= sub_638A34(a2)) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v19 = sub_638A2C(a3);
      if (v19 <= sub_638A2C(a2))
      {
LABEL_9:
        sub_7574DC((uint64_t)v23, a1);
        sub_874FD8(a1, a2);
        sub_874FD8(a2, (uint64_t)v23);
        sub_52F1E8((uint64_t)v23);
        uint64_t v14 = sub_638A2C(a3);
        if (v14 == sub_638A2C(a2))
        {
          uint64_t v15 = sub_638A34(a3);
          if (v15 <= sub_638A34(a2)) {
            return 1;
          }
        }
        else
        {
          uint64_t v20 = sub_638A2C(a3);
          if (v20 <= sub_638A2C(a2)) {
            return 1;
          }
        }
        sub_7574DC((uint64_t)v23, a2);
        sub_874FD8(a2, a3);
        uint64_t v21 = a3;
LABEL_22:
        sub_874FD8(v21, (uint64_t)v23);
        sub_52F1E8((uint64_t)v23);
        return 2;
      }
    }
    sub_7574DC((uint64_t)v23, a1);
    sub_874FD8(a1, a3);
    sub_874FD8(a3, (uint64_t)v23);
    sub_52F1E8((uint64_t)v23);
    return 1;
  }
  uint64_t v11 = sub_638A2C(a2);
  if (v11 > sub_638A2C(a1)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v8 = sub_638A2C(a3);
  if (v8 == sub_638A2C(a2))
  {
    uint64_t v9 = sub_638A34(a3);
    if (v9 <= sub_638A34(a2)) {
      return 0;
    }
  }
  else
  {
    uint64_t v16 = sub_638A2C(a3);
    if (v16 <= sub_638A2C(a2)) {
      return 0;
    }
  }
  sub_7574DC((uint64_t)v23, a2);
  sub_874FD8(a2, a3);
  sub_874FD8(a3, (uint64_t)v23);
  sub_52F1E8((uint64_t)v23);
  uint64_t v17 = sub_638A2C(a2);
  if (v17 == sub_638A2C(a1))
  {
    uint64_t v18 = sub_638A34(a2);
    if (v18 > sub_638A34(a1)) {
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v22 = sub_638A2C(a2);
    if (v22 > sub_638A2C(a1))
    {
LABEL_21:
      sub_7574DC((uint64_t)v23, a1);
      sub_874FD8(a1, a2);
      uint64_t v21 = a2;
      goto LABEL_22;
    }
  }
  return 1;
}

unint64_t sub_874584(uint64_t a1, unint64_t a2)
{
  sub_7574DC((uint64_t)v24, a1);
  uint64_t v4 = sub_638A2C((uint64_t)v24);
  if (v4 == sub_638A2C(a2 - 1080))
  {
    uint64_t v5 = sub_638A34((uint64_t)v24);
    uint64_t v6 = sub_638A34(a2 - 1080);
  }
  else
  {
    uint64_t v5 = sub_638A2C((uint64_t)v24);
    uint64_t v6 = sub_638A2C(a2 - 1080);
  }
  if (v5 <= v6)
  {
    for (unint64_t i = a1 + 1080; i < a2; i += 1080)
    {
      uint64_t v11 = sub_638A2C((uint64_t)v24);
      if (v11 == sub_638A2C(i))
      {
        uint64_t v12 = sub_638A34((uint64_t)v24);
        uint64_t v13 = sub_638A34(i);
      }
      else
      {
        uint64_t v12 = sub_638A2C((uint64_t)v24);
        uint64_t v13 = sub_638A2C(i);
      }
      if (v12 > v13) {
        break;
      }
    }
  }
  else
  {
    for (unint64_t i = a1 + 1080; ; i += 1080)
    {
      uint64_t v8 = sub_638A2C((uint64_t)v24);
      if (v8 == sub_638A2C(i))
      {
        uint64_t v9 = sub_638A34((uint64_t)v24);
        uint64_t v10 = sub_638A34(i);
      }
      else
      {
        uint64_t v9 = sub_638A2C((uint64_t)v24);
        uint64_t v10 = sub_638A2C(i);
      }
      if (v9 > v10) {
        break;
      }
    }
  }
  if (i < a2)
  {
    for (a2 -= 1080; ; a2 -= 1080)
    {
      uint64_t v14 = sub_638A2C((uint64_t)v24);
      if (v14 == sub_638A2C(a2))
      {
        uint64_t v15 = sub_638A34((uint64_t)v24);
        uint64_t v16 = sub_638A34(a2);
      }
      else
      {
        uint64_t v15 = sub_638A2C((uint64_t)v24);
        uint64_t v16 = sub_638A2C(a2);
      }
      if (v15 <= v16) {
        break;
      }
    }
  }
  while (i < a2)
  {
    sub_7574DC((uint64_t)v25, i);
    sub_874FD8(i, a2);
    sub_874FD8(a2, (uint64_t)v25);
    sub_52F1E8((uint64_t)v25);
    do
    {
      i += 1080;
      uint64_t v17 = sub_638A2C((uint64_t)v24);
      if (v17 == sub_638A2C(i))
      {
        uint64_t v18 = sub_638A34((uint64_t)v24);
        uint64_t v19 = sub_638A34(i);
      }
      else
      {
        uint64_t v18 = sub_638A2C((uint64_t)v24);
        uint64_t v19 = sub_638A2C(i);
      }
    }
    while (v18 <= v19);
    do
    {
      a2 -= 1080;
      uint64_t v20 = sub_638A2C((uint64_t)v24);
      if (v20 == sub_638A2C(a2))
      {
        uint64_t v21 = sub_638A34((uint64_t)v24);
        uint64_t v22 = sub_638A34(a2);
      }
      else
      {
        uint64_t v21 = sub_638A2C((uint64_t)v24);
        uint64_t v22 = sub_638A2C(a2);
      }
    }
    while (v21 > v22);
  }
  if (i - 1080 != a1) {
    sub_874FD8(a1, i - 1080);
  }
  sub_874FD8(i - 1080, (uint64_t)v24);
  sub_52F1E8((uint64_t)v24);
  return i;
}

void sub_87488C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_8748A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_8748B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_8748C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_8748DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_8748F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_874904(uint64_t a1, unint64_t a2)
{
  sub_7574DC((uint64_t)v25, a1);
  for (uint64_t i = 0; ; i += 1080)
  {
    uint64_t v5 = sub_638A2C(a1 + i + 1080);
    if (v5 == sub_638A2C((uint64_t)v25))
    {
      uint64_t v6 = sub_638A34(a1 + i + 1080);
      uint64_t v7 = sub_638A34((uint64_t)v25);
    }
    else
    {
      uint64_t v6 = sub_638A2C(a1 + i + 1080);
      uint64_t v7 = sub_638A2C((uint64_t)v25);
    }
    if (v6 <= v7) {
      break;
    }
  }
  uint64_t v8 = a1 + i;
  unint64_t v9 = a1 + i + 1080;
  if (i)
  {
    do
    {
      a2 -= 1080;
      uint64_t v10 = sub_638A2C(a2);
      if (v10 == sub_638A2C((uint64_t)v25))
      {
        uint64_t v11 = sub_638A34(a2);
        uint64_t v12 = sub_638A34((uint64_t)v25);
      }
      else
      {
        uint64_t v11 = sub_638A2C(a2);
        uint64_t v12 = sub_638A2C((uint64_t)v25);
      }
    }
    while (v11 <= v12);
  }
  else
  {
    do
    {
      if (v9 >= a2) {
        break;
      }
      a2 -= 1080;
      uint64_t v13 = sub_638A2C(a2);
      if (v13 == sub_638A2C((uint64_t)v25))
      {
        uint64_t v14 = sub_638A34(a2);
        uint64_t v15 = sub_638A34((uint64_t)v25);
      }
      else
      {
        uint64_t v14 = sub_638A2C(a2);
        uint64_t v15 = sub_638A2C((uint64_t)v25);
      }
    }
    while (v14 <= v15);
  }
  if (v9 < a2)
  {
    unint64_t v16 = a1 + i + 1080;
    unint64_t v17 = a2;
    do
    {
      sub_7574DC((uint64_t)v26, v16);
      sub_874FD8(v16, v17);
      sub_874FD8(v17, (uint64_t)v26);
      sub_52F1E8((uint64_t)v26);
      do
      {
        uint64_t v8 = v16;
        v16 += 1080;
        uint64_t v18 = sub_638A2C(v16);
        if (v18 == sub_638A2C((uint64_t)v25))
        {
          uint64_t v19 = sub_638A34(v16);
          uint64_t v20 = sub_638A34((uint64_t)v25);
        }
        else
        {
          uint64_t v19 = sub_638A2C(v16);
          uint64_t v20 = sub_638A2C((uint64_t)v25);
        }
      }
      while (v19 > v20);
      unint64_t v16 = v8 + 1080;
      do
      {
        v17 -= 1080;
        uint64_t v21 = sub_638A2C(v17);
        if (v21 == sub_638A2C((uint64_t)v25))
        {
          uint64_t v22 = sub_638A34(v17);
          uint64_t v23 = sub_638A34((uint64_t)v25);
        }
        else
        {
          uint64_t v22 = sub_638A2C(v17);
          uint64_t v23 = sub_638A2C((uint64_t)v25);
        }
      }
      while (v22 <= v23);
    }
    while (v16 < v17);
  }
  if (v8 != a1) {
    sub_874FD8(a1, v8);
  }
  sub_874FD8(v8, (uint64_t)v25);
  sub_52F1E8((uint64_t)v25);
  return v8;
}

void sub_874BEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_874C00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_874C14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_874C28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_874C3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_874C50(uint64_t a1, uint64_t a2)
{
  BOOL v4 = 1;
  switch(0x1A8C536FE1A8C537 * ((a2 - a1) >> 3))
  {
    case 0:
    case 1:
      return v4;
    case 2:
      uint64_t v5 = a2 - 1080;
      uint64_t v6 = sub_638A2C(a2 - 1080);
      if (v6 == sub_638A2C(a1))
      {
        uint64_t v7 = sub_638A34(v5);
        if (v7 <= sub_638A34(a1)) {
          return 1;
        }
      }
      else
      {
        uint64_t v20 = sub_638A2C(v5);
        if (v20 <= sub_638A2C(a1)) {
          return 1;
        }
      }
      sub_7574DC((uint64_t)v22, a1);
      sub_874FD8(a1, v5);
      sub_874FD8(v5, (uint64_t)v22);
      sub_52F1E8((uint64_t)v22);
      return 1;
    case 3:
      sub_874280(a1, a1 + 1080, a2 - 1080);
      return v4;
    case 4:
      sub_8751E4(a1, a1 + 1080, a1 + 2160, a2 - 1080);
      return v4;
    case 5:
      sub_8753E8(a1, a1 + 1080, a1 + 2160, a1 + 3240, a2 - 1080);
      return v4;
    default:
      uint64_t v8 = a1 + 2160;
      sub_874280(a1, a1 + 1080, a1 + 2160);
      uint64_t v9 = a1 + 3240;
      if (a1 + 3240 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    uint64_t v12 = sub_638A2C(v9);
    if (v12 == sub_638A2C(v8))
    {
      uint64_t v13 = sub_638A34(v9);
      uint64_t v14 = sub_638A34(v8);
    }
    else
    {
      uint64_t v13 = sub_638A2C(v9);
      uint64_t v14 = sub_638A2C(v8);
    }
    if (v13 > v14) {
      break;
    }
LABEL_7:
    uint64_t v8 = v9;
    v10 += 1080;
    v9 += 1080;
    if (v9 == a2) {
      return 1;
    }
  }
  sub_7574DC((uint64_t)v22, v9);
  sub_874FD8(v9, v8);
  uint64_t v15 = a1;
  if (v8 == a1)
  {
LABEL_22:
    sub_874FD8(v15, (uint64_t)v22);
    if (++v11 == 8) {
      goto LABEL_25;
    }
LABEL_23:
    sub_52F1E8((uint64_t)v22);
    goto LABEL_7;
  }
  uint64_t v16 = v10;
  while (1)
  {
    uint64_t v17 = sub_638A2C((uint64_t)v22);
    if (v17 == sub_638A2C(a1 + v16 + 1080)) {
      break;
    }
    uint64_t v19 = sub_638A2C((uint64_t)v22);
    if (v19 <= sub_638A2C(a1 + v16 + 1080))
    {
      sub_874FD8(v8, (uint64_t)v22);
      if (++v11 != 8) {
        goto LABEL_23;
      }
      goto LABEL_25;
    }
LABEL_14:
    v8 -= 1080;
    sub_874FD8(a1 + v16 + 2160, a1 + v16 + 1080);
    v16 -= 1080;
    if (v16 == -2160)
    {
      uint64_t v15 = a1;
      goto LABEL_22;
    }
  }
  uint64_t v18 = sub_638A34((uint64_t)v22);
  if (v18 > sub_638A34(a1 + v16 + 1080)) {
    goto LABEL_14;
  }
  sub_874FD8(a1 + v16 + 2160, (uint64_t)v22);
  if (++v11 != 8) {
    goto LABEL_23;
  }
LABEL_25:
  BOOL v4 = v9 + 1080 == a2;
  sub_52F1E8((uint64_t)v22);
  return v4;
}

void sub_874FAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_874FD8(uint64_t a1, uint64_t a2)
{
  sub_529480(a1, a2);
  int v4 = *(_DWORD *)(a2 + 824);
  *(void *)(a1 + 816) = *(void *)(a2 + 816);
  *(_DWORD *)(a1 + 824) = v4;
  uint64_t v5 = *(void **)(a1 + 832);
  if (v5)
  {
    *(void *)(a1 + 840) = v5;
    operator delete(v5);
    *(void *)(a1 + 832) = 0;
    *(void *)(a1 + 840) = 0;
    *(void *)(a1 + 848) = 0;
  }
  *(_OWORD *)(a1 + 832) = *(_OWORD *)(a2 + 832);
  *(void *)(a1 + 848) = *(void *)(a2 + 848);
  *(void *)(a2 + 840) = 0;
  *(void *)(a2 + 848) = 0;
  *(void *)(a2 + 832) = 0;
  *(_DWORD *)(a1 + 856) = *(_DWORD *)(a2 + 856);
  *(unsigned char *)(a1 + 864) = *(unsigned char *)(a2 + 864);
  *(_DWORD *)(a1 + 872) = *(_DWORD *)(a2 + 872);
  uint64_t v6 = (void **)(a1 + 880);
  if (*(char *)(a1 + 903) < 0) {
    operator delete(*v6);
  }
  long long v7 = *(_OWORD *)(a2 + 880);
  *(void *)(a1 + 896) = *(void *)(a2 + 896);
  *(_OWORD *)uint64_t v6 = v7;
  *(unsigned char *)(a2 + 903) = 0;
  *(unsigned char *)(a2 + 880) = 0;
  uint64_t v8 = (void **)(a1 + 904);
  if (*(char *)(a1 + 927) < 0) {
    operator delete(*v8);
  }
  long long v9 = *(_OWORD *)(a2 + 904);
  *(void *)(a1 + 920) = *(void *)(a2 + 920);
  *(_OWORD *)uint64_t v8 = v9;
  *(unsigned char *)(a2 + 927) = 0;
  *(unsigned char *)(a2 + 904) = 0;
  uint64_t v10 = *(void *)(a1 + 928);
  if (v10)
  {
    int v11 = (void **)(a1 + 928);
    uint64_t v12 = *(void *)(a1 + 936);
    uint64_t v13 = *(void **)(a1 + 928);
    if (v12 != v10)
    {
      do
      {
        if (*(char *)(v12 - 1) < 0) {
          operator delete(*(void **)(v12 - 24));
        }
        v12 -= 24;
      }
      while (v12 != v10);
      uint64_t v13 = *v11;
    }
    *(void *)(a1 + 936) = v10;
    operator delete(v13);
    *int v11 = 0;
    *(void *)(a1 + 936) = 0;
    *(void *)(a1 + 944) = 0;
  }
  *(_OWORD *)(a1 + 928) = *(_OWORD *)(a2 + 928);
  *(void *)(a1 + 944) = *(void *)(a2 + 944);
  *(void *)(a2 + 928) = 0;
  *(void *)(a2 + 936) = 0;
  *(void *)(a2 + 944) = 0;
  sub_52EF44(a1 + 952, (uint64_t *)(a2 + 952));
  *(unsigned char *)(a1 + 992) = *(unsigned char *)(a2 + 992);
  *(_DWORD *)(a1 + 1000) = *(_DWORD *)(a2 + 1000);
  uint64_t v14 = *(void *)(a1 + 1008);
  if (v14)
  {
    uint64_t v15 = (void **)(a1 + 1008);
    uint64_t v16 = *(void *)(a1 + 1016);
    uint64_t v17 = *(void **)(a1 + 1008);
    if (v16 != v14)
    {
      do
      {
        if (*(char *)(v16 - 1) < 0) {
          operator delete(*(void **)(v16 - 24));
        }
        v16 -= 24;
      }
      while (v16 != v14);
      uint64_t v17 = *v15;
    }
    *(void *)(a1 + 1016) = v14;
    operator delete(v17);
    void *v15 = 0;
    *(void *)(a1 + 1016) = 0;
    *(void *)(a1 + 1024) = 0;
  }
  *(_OWORD *)(a1 + 1008) = *(_OWORD *)(a2 + 1008);
  *(void *)(a1 + 1024) = *(void *)(a2 + 1024);
  *(void *)(a2 + 1024) = 0;
  *(_OWORD *)(a2 + 1008) = 0u;
  sub_52EF44(a1 + 1032, (uint64_t *)(a2 + 1032));
  *(unsigned char *)(a1 + 1072) = *(unsigned char *)(a2 + 1072);
  return a1;
}

void *sub_8751E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_874280(a1, a2, a3);
  uint64_t v8 = sub_638A2C(a4);
  if (v8 == sub_638A2C(a3))
  {
    uint64_t v9 = sub_638A34(a4);
    result = (void *)sub_638A34(a3);
    if (v9 <= (uint64_t)result) {
      return result;
    }
  }
  else
  {
    uint64_t v11 = sub_638A2C(a4);
    result = (void *)sub_638A2C(a3);
    if (v11 <= (uint64_t)result) {
      return result;
    }
  }
  sub_7574DC((uint64_t)v18, a3);
  sub_874FD8(a3, a4);
  sub_874FD8(a4, (uint64_t)v18);
  sub_52F1E8((uint64_t)v18);
  uint64_t v12 = sub_638A2C(a3);
  if (v12 == sub_638A2C(a2))
  {
    uint64_t v13 = sub_638A34(a3);
    result = (void *)sub_638A34(a2);
    if (v13 <= (uint64_t)result) {
      return result;
    }
  }
  else
  {
    uint64_t v14 = sub_638A2C(a3);
    result = (void *)sub_638A2C(a2);
    if (v14 <= (uint64_t)result) {
      return result;
    }
  }
  sub_7574DC((uint64_t)v18, a2);
  sub_874FD8(a2, a3);
  sub_874FD8(a3, (uint64_t)v18);
  sub_52F1E8((uint64_t)v18);
  uint64_t v15 = sub_638A2C(a2);
  if (v15 != sub_638A2C(a1))
  {
    uint64_t v17 = sub_638A2C(a2);
    result = (void *)sub_638A2C(a1);
    if (v17 <= (uint64_t)result) {
      return result;
    }
    goto LABEL_13;
  }
  uint64_t v16 = sub_638A34(a2);
  result = (void *)sub_638A34(a1);
  if (v16 > (uint64_t)result)
  {
LABEL_13:
    sub_7574DC((uint64_t)v18, a1);
    sub_874FD8(a1, a2);
    sub_874FD8(a2, (uint64_t)v18);
    return sub_52F1E8((uint64_t)v18);
  }
  return result;
}

void *sub_8753E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_8751E4(a1, a2, a3, a4);
  uint64_t v10 = sub_638A2C(a5);
  if (v10 == sub_638A2C(a4))
  {
    uint64_t v11 = sub_638A34(a5);
    result = (void *)sub_638A34(a4);
    if (v11 <= (uint64_t)result) {
      return result;
    }
  }
  else
  {
    uint64_t v13 = sub_638A2C(a5);
    result = (void *)sub_638A2C(a4);
    if (v13 <= (uint64_t)result) {
      return result;
    }
  }
  sub_7574DC((uint64_t)v23, a4);
  sub_874FD8(a4, a5);
  sub_874FD8(a5, (uint64_t)v23);
  sub_52F1E8((uint64_t)v23);
  uint64_t v14 = sub_638A2C(a4);
  if (v14 == sub_638A2C(a3))
  {
    uint64_t v15 = sub_638A34(a4);
    result = (void *)sub_638A34(a3);
    if (v15 <= (uint64_t)result) {
      return result;
    }
  }
  else
  {
    uint64_t v16 = sub_638A2C(a4);
    result = (void *)sub_638A2C(a3);
    if (v16 <= (uint64_t)result) {
      return result;
    }
  }
  sub_7574DC((uint64_t)v23, a3);
  sub_874FD8(a3, a4);
  sub_874FD8(a4, (uint64_t)v23);
  sub_52F1E8((uint64_t)v23);
  uint64_t v17 = sub_638A2C(a3);
  if (v17 == sub_638A2C(a2))
  {
    uint64_t v18 = sub_638A34(a3);
    result = (void *)sub_638A34(a2);
    if (v18 <= (uint64_t)result) {
      return result;
    }
  }
  else
  {
    uint64_t v19 = sub_638A2C(a3);
    result = (void *)sub_638A2C(a2);
    if (v19 <= (uint64_t)result) {
      return result;
    }
  }
  sub_7574DC((uint64_t)v23, a2);
  sub_874FD8(a2, a3);
  sub_874FD8(a3, (uint64_t)v23);
  sub_52F1E8((uint64_t)v23);
  uint64_t v20 = sub_638A2C(a2);
  if (v20 != sub_638A2C(a1))
  {
    uint64_t v22 = sub_638A2C(a2);
    result = (void *)sub_638A2C(a1);
    if (v22 <= (uint64_t)result) {
      return result;
    }
    goto LABEL_17;
  }
  uint64_t v21 = sub_638A34(a2);
  result = (void *)sub_638A34(a1);
  if (v21 > (uint64_t)result)
  {
LABEL_17:
    sub_7574DC((uint64_t)v23, a1);
    sub_874FD8(a1, a2);
    sub_874FD8(a2, (uint64_t)v23);
    return sub_52F1E8((uint64_t)v23);
  }
  return result;
}

uint64_t sub_87567C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != (void *)a2)
  {
    uint64_t v8 = (a2 - (uint64_t)a1) / 1080;
    if (a2 - (uint64_t)a1 >= 1081)
    {
      unint64_t v9 = (unint64_t)(v8 - 2) >> 1;
      unint64_t v10 = v9 + 1;
      uint64_t v11 = (uint64_t)&a1[135 * v9];
      do
      {
        sub_875830(a1, a4, v8, v11);
        v11 -= 1080;
        --v10;
      }
      while (v10);
    }
    uint64_t v12 = a2;
    if (a2 != a3)
    {
      uint64_t v13 = a2;
      while (1)
      {
        uint64_t v14 = sub_638A2C(v13);
        if (v14 == sub_638A2C((uint64_t)a1))
        {
          uint64_t v15 = sub_638A34(v13);
          if (v15 > sub_638A34((uint64_t)a1)) {
            goto LABEL_12;
          }
        }
        else
        {
          uint64_t v16 = sub_638A2C(v13);
          if (v16 > sub_638A2C((uint64_t)a1))
          {
LABEL_12:
            sub_7574DC((uint64_t)v18, v13);
            sub_874FD8(v13, (uint64_t)a1);
            sub_874FD8((uint64_t)a1, (uint64_t)v18);
            sub_52F1E8((uint64_t)v18);
            sub_875830(a1, a4, v8, (uint64_t)a1);
          }
        }
        v13 += 1080;
        if (v13 == a3)
        {
          uint64_t v12 = a3;
          break;
        }
      }
    }
    sub_875AF0(a1, a2, a4);
    return v12;
  }
  return a3;
}

void *sub_875830(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 < 2) {
    return result;
  }
  uint64_t v6 = result;
  uint64_t v7 = v4 >> 1;
  if ((uint64_t)(v4 >> 1) < 0x1A8C536FE1A8C537 * ((a4 - (uint64_t)result) >> 3)) {
    return result;
  }
  uint64_t v9 = (0x3518A6DFC3518A6ELL * ((a4 - (uint64_t)result) >> 3)) | 1;
  uint64_t v10 = (uint64_t)&result[135 * v9];
  uint64_t v11 = 0x3518A6DFC3518A6ELL * ((a4 - (uint64_t)result) >> 3) + 2;
  if (v11 < a3)
  {
    uint64_t v12 = sub_638A2C((uint64_t)&result[135 * v9]);
    if (v12 == sub_638A2C(v10 + 1080))
    {
      uint64_t v13 = sub_638A34((uint64_t)&v6[135 * v9]);
      if (v13 <= sub_638A34(v10 + 1080)) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    uint64_t v14 = sub_638A2C((uint64_t)&v6[135 * v9]);
    if (v14 > sub_638A2C(v10 + 1080))
    {
LABEL_8:
      v10 += 1080;
      uint64_t v9 = v11;
    }
  }
LABEL_9:
  uint64_t v15 = sub_638A2C(v10);
  if (v15 == sub_638A2C(a4))
  {
    uint64_t v16 = sub_638A34(v10);
    result = (void *)sub_638A34(a4);
    if (v16 > (uint64_t)result) {
      return result;
    }
  }
  else
  {
    uint64_t v17 = sub_638A2C(v10);
    result = (void *)sub_638A2C(a4);
    if (v17 > (uint64_t)result) {
      return result;
    }
  }
  sub_7574DC((uint64_t)v27, a4);
  sub_874FD8(a4, v10);
  if (v7 >= v9)
  {
    while (1)
    {
      uint64_t v19 = 2 * v9;
      uint64_t v9 = (2 * v9) | 1;
      uint64_t v18 = (uint64_t)&v6[135 * v9];
      uint64_t v20 = v19 + 2;
      if (v19 + 2 < a3)
      {
        uint64_t v21 = sub_638A2C((uint64_t)&v6[135 * v9]);
        if (v21 == sub_638A2C(v18 + 1080))
        {
          uint64_t v22 = sub_638A34((uint64_t)&v6[135 * v9]);
          uint64_t v23 = sub_638A34(v18 + 1080);
        }
        else
        {
          uint64_t v22 = sub_638A2C((uint64_t)&v6[135 * v9]);
          uint64_t v23 = sub_638A2C(v18 + 1080);
        }
        if (v22 > v23)
        {
          v18 += 1080;
          uint64_t v9 = v20;
        }
      }
      uint64_t v24 = sub_638A2C(v18);
      if (v24 == sub_638A2C((uint64_t)v27))
      {
        uint64_t v25 = sub_638A34(v18);
        uint64_t v26 = sub_638A34((uint64_t)v27);
      }
      else
      {
        uint64_t v25 = sub_638A2C(v18);
        uint64_t v26 = sub_638A2C((uint64_t)v27);
      }
      if (v25 > v26) {
        break;
      }
      sub_874FD8(v10, v18);
      uint64_t v10 = v18;
      if (v7 < v9) {
        goto LABEL_26;
      }
    }
  }
  uint64_t v18 = v10;
LABEL_26:
  sub_874FD8(v18, (uint64_t)v27);
  return sub_52F1E8((uint64_t)v27);
}

void sub_875ADC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_875AF0(void *result, uint64_t a2, uint64_t a3)
{
  if (a2 - (uint64_t)result >= 1081)
  {
    unint64_t v4 = result;
    int64_t v5 = (a2 - (uint64_t)result) / 0x438uLL;
    uint64_t v6 = a2 - 1080;
    do
    {
      sub_7574DC((uint64_t)v10, (uint64_t)v4);
      uint64_t v8 = sub_875C3C((uint64_t)v4, a3, v5);
      uint64_t v9 = v8;
      if (v6 == v8)
      {
        sub_874FD8(v8, (uint64_t)v10);
      }
      else
      {
        sub_874FD8(v8, v6);
        sub_874FD8(v6, (uint64_t)v10);
        sub_875D44(v4, v9 + 1080, a3, 0x1A8C536FE1A8C537 * ((v9 + 1080 - (uint64_t)v4) >> 3));
      }
      result = sub_52F1E8((uint64_t)v10);
      v6 -= 1080;
    }
    while (v5-- > 2);
  }
  return result;
}

void sub_875C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_875C3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = a1;
    a1 += 1080 * v5 + 1080;
    uint64_t v9 = 2 * v5;
    uint64_t v5 = (2 * v5) | 1;
    uint64_t v10 = v9 + 2;
    if (v9 + 2 >= a3) {
      goto LABEL_4;
    }
    uint64_t v11 = sub_638A2C(a1);
    if (v11 == sub_638A2C(a1 + 1080))
    {
      uint64_t v12 = sub_638A34(a1);
      if (v12 <= sub_638A34(a1 + 1080)) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v13 = sub_638A2C(a1);
      if (v13 <= sub_638A2C(a1 + 1080)) {
        goto LABEL_4;
      }
    }
    a1 += 1080;
    uint64_t v5 = v10;
LABEL_4:
    sub_874FD8(v8, a1);
  }
  while (v5 <= v7);
  return a1;
}

void *sub_875D44(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v5 = result;
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = (uint64_t)&result[135 * (v4 >> 1)];
    uint64_t v8 = a2 - 1080;
    uint64_t v9 = sub_638A2C(v7);
    if (v9 == sub_638A2C(v8))
    {
      uint64_t v10 = sub_638A34(v7);
      result = (void *)sub_638A34(v8);
      if (v10 <= (uint64_t)result) {
        return result;
      }
    }
    else
    {
      uint64_t v11 = sub_638A2C(v7);
      result = (void *)sub_638A2C(v8);
      if (v11 <= (uint64_t)result) {
        return result;
      }
    }
    sub_7574DC((uint64_t)v17, v8);
    sub_874FD8(v8, v7);
    if (v4 >= 2)
    {
      while (1)
      {
        unint64_t v13 = v6 - 1;
        unint64_t v6 = (v6 - 1) >> 1;
        uint64_t v12 = (uint64_t)&v5[135 * v6];
        uint64_t v14 = sub_638A2C(v12);
        if (v14 == sub_638A2C((uint64_t)v17))
        {
          uint64_t v15 = sub_638A34((uint64_t)&v5[135 * v6]);
          uint64_t v16 = sub_638A34((uint64_t)v17);
        }
        else
        {
          uint64_t v15 = sub_638A2C((uint64_t)&v5[135 * v6]);
          uint64_t v16 = sub_638A2C((uint64_t)v17);
        }
        if (v15 <= v16) {
          break;
        }
        sub_874FD8(v7, (uint64_t)&v5[135 * v6]);
        uint64_t v7 = (uint64_t)&v5[135 * v6];
        if (v13 <= 1) {
          goto LABEL_13;
        }
      }
    }
    uint64_t v12 = v7;
LABEL_13:
    sub_874FD8(v12, (uint64_t)v17);
    return sub_52F1E8((uint64_t)v17);
  }
  return result;
}

void sub_875ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_875EE8(void *result, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9 = a2;
  uint64_t v10 = result;
  unint64_t v31 = a2;
  uint64_t v32 = result;
LABEL_2:
  uint64_t v11 = 1 - a4;
  while (1)
  {
    uint64_t v12 = v9 - (void)v10;
    unint64_t v13 = 0x1A8C536FE1A8C537 * ((v9 - (uint64_t)v10) >> 3);
    if (!(!v6 & v5))
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unint64_t v31 = v9 - 1080;
          uint64_t v27 = sub_638A34(v9 - 1080);
          if (v27 == sub_638A34((uint64_t)v10))
          {
            uint64_t v28 = sub_638A2C(v9 - 1080);
            result = (void *)sub_638A2C((uint64_t)v10);
            if (v28 <= (uint64_t)result) {
              return result;
            }
          }
          else
          {
            uint64_t v29 = sub_638A34(v9 - 1080);
            result = (void *)sub_638A34((uint64_t)v10);
            if (v29 <= (uint64_t)result) {
              return result;
            }
          }
          result = sub_873E98((uint64_t *)&v32, (uint64_t *)&v31);
          break;
        case 3uLL:
          unint64_t v31 = v9 - 1080;
          return (void *)sub_8765EC((uint64_t)v10, (uint64_t)(v10 + 135), v9 - 1080);
        case 4uLL:
          unint64_t v31 = v9 - 1080;
          return sub_877344((uint64_t)v10, (uint64_t)(v10 + 135), (uint64_t)(v10 + 270), v9 - 1080);
        case 5uLL:
          unint64_t v31 = v9 - 1080;
          return sub_877548((uint64_t)v10, (uint64_t)(v10 + 135), (uint64_t)(v10 + 270), (uint64_t)(v10 + 405), v9 - 1080);
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v12 <= 25919)
    {
      if (a5) {
        return (void *)sub_876290((uint64_t)v10, v9);
      }
      else {
        return (void *)sub_876470((uint64_t)v10, v9);
      }
    }
    if (v11 == 1) {
      break;
    }
    unint64_t v14 = v13 >> 1;
    uint64_t v15 = v9 - 1080;
    if ((unint64_t)v12 >= 0x21C01)
    {
      sub_8765EC((uint64_t)v10, (uint64_t)&v10[135 * (v13 >> 1)], v15);
      uint64_t v16 = 135 * v14;
      uint64_t v17 = 1080 * v14 - 1080;
      unint64_t v18 = v31;
      sub_8765EC((uint64_t)(v32 + 135), (uint64_t)v32 + v17, v31 - 2160);
      sub_8765EC((uint64_t)(v32 + 270), (uint64_t)&v32[v16 + 135], v18 - 3240);
      sub_8765EC((uint64_t)v32 + v17, (uint64_t)&v32[v16], (uint64_t)&v32[v16 + 135]);
      uint64_t v30 = &v32[v16];
      sub_873E98((uint64_t *)&v32, (uint64_t *)&v30);
      if (a5) {
        goto LABEL_16;
      }
    }
    else
    {
      sub_8765EC((uint64_t)&v10[135 * (v13 >> 1)], (uint64_t)v10, v15);
      if (a5) {
        goto LABEL_16;
      }
    }
    uint64_t v19 = (uint64_t)v32;
    uint64_t v20 = (uint64_t)(v32 - 135);
    uint64_t v21 = sub_638A34((uint64_t)(v32 - 135));
    if (v21 == sub_638A34(v19))
    {
      uint64_t v22 = sub_638A2C(v20);
      if (v22 <= sub_638A2C(v19)) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v23 = sub_638A34(v20);
      if (v23 <= sub_638A34(v19))
      {
LABEL_23:
        uint64_t v9 = v31;
        result = (void *)sub_8768F0((uint64_t)v32, v31);
        uint64_t v10 = result;
        goto LABEL_24;
      }
    }
LABEL_16:
    uint64_t v9 = v31;
    unint64_t v24 = sub_876C70((uint64_t)v32, v31);
    if ((v25 & 1) == 0) {
      goto LABEL_22;
    }
    int v26 = sub_876FBC((uint64_t)v32, v24);
    uint64_t v10 = (void *)(v24 + 1080);
    result = (void *)sub_876FBC(v24 + 1080, v9);
    if (result)
    {
      if (v26) {
        return result;
      }
      unint64_t v31 = v24;
      uint64_t v10 = v32;
      uint64_t v9 = v24;
      ++v11;
    }
    else
    {
      if (!v26)
      {
LABEL_22:
        result = (void *)sub_875EE8(v32, v24, a3, -v11, a5 & 1);
        uint64_t v10 = (void *)(v24 + 1080);
LABEL_24:
        a5 = 0;
        uint64_t v32 = v10;
        a4 = -v11;
        goto LABEL_2;
      }
      uint64_t v32 = (void *)(v24 + 1080);
      ++v11;
    }
  }
  if (v10 != (void *)v9) {
    return (void *)sub_8777DC(v10, v9, v9, a3);
  }
  return result;
}

uint64_t sub_876290(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return result;
  }
  uint64_t v3 = result;
  uint64_t v4 = result + 1080;
  if (result + 1080 == a2) {
    return result;
  }
  uint64_t v5 = 0;
  uint64_t v6 = result;
  while (2)
  {
    uint64_t v8 = v6;
    uint64_t v6 = v4;
    uint64_t v9 = sub_638A34(v4);
    if (v9 == sub_638A34(v8))
    {
      uint64_t v10 = sub_638A2C(v6);
      result = sub_638A2C(v8);
    }
    else
    {
      uint64_t v10 = sub_638A34(v6);
      result = sub_638A34(v8);
    }
    if (v10 <= result) {
      goto LABEL_6;
    }
    sub_7574DC((uint64_t)v15, v6);
    sub_874FD8(v6, v8);
    uint64_t v7 = v3;
    if (v8 == v3) {
      goto LABEL_5;
    }
    uint64_t v11 = v5;
    while (1)
    {
      uint64_t v12 = sub_638A34((uint64_t)v15);
      if (v12 != sub_638A34(v3 + v11 - 1080)) {
        break;
      }
      uint64_t v13 = sub_638A2C((uint64_t)v15);
      if (v13 <= sub_638A2C(v3 + v11 - 1080))
      {
        uint64_t v7 = v3 + v11;
        goto LABEL_5;
      }
LABEL_13:
      v8 -= 1080;
      sub_874FD8(v3 + v11, v3 + v11 - 1080);
      v11 -= 1080;
      if (!v11)
      {
        uint64_t v7 = v3;
        goto LABEL_5;
      }
    }
    uint64_t v14 = sub_638A34((uint64_t)v15);
    if (v14 > sub_638A34(v3 + v11 - 1080)) {
      goto LABEL_13;
    }
    uint64_t v7 = v8;
LABEL_5:
    sub_874FD8(v7, (uint64_t)v15);
    result = (uint64_t)sub_52F1E8((uint64_t)v15);
LABEL_6:
    uint64_t v4 = v6 + 1080;
    v5 += 1080;
    if (v6 + 1080 != a2) {
      continue;
    }
    return result;
  }
}

void sub_87645C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_876470(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    while (1)
    {
      uint64_t v4 = v3 + 1080;
      if (v3 + 1080 == a2) {
        break;
      }
      uint64_t v5 = v3;
      v3 += 1080;
      uint64_t v6 = sub_638A34(v4);
      if (v6 == sub_638A34(v5))
      {
        uint64_t v7 = sub_638A2C(v3);
        result = sub_638A2C(v5);
      }
      else
      {
        uint64_t v7 = sub_638A34(v3);
        result = sub_638A34(v5);
      }
      if (v7 > result)
      {
        sub_7574DC((uint64_t)v12, v3);
        do
        {
          uint64_t v8 = v5;
          sub_874FD8(v5 + 1080, v5);
          uint64_t v9 = sub_638A34((uint64_t)v12);
          v5 -= 1080;
          if (v9 == sub_638A34(v8 - 1080))
          {
            uint64_t v10 = sub_638A2C((uint64_t)v12);
            uint64_t v11 = sub_638A2C(v8 - 1080);
          }
          else
          {
            uint64_t v10 = sub_638A34((uint64_t)v12);
            uint64_t v11 = sub_638A34(v8 - 1080);
          }
        }
        while (v10 > v11);
        sub_874FD8(v8, (uint64_t)v12);
        result = (uint64_t)sub_52F1E8((uint64_t)v12);
      }
    }
  }
  return result;
}

void sub_8765D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_8765EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_638A34(a2);
  if (v6 == sub_638A34(a1))
  {
    uint64_t v7 = sub_638A2C(a2);
    if (v7 <= sub_638A2C(a1)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v12 = sub_638A34(a3);
    if (v12 == sub_638A34(a2))
    {
      uint64_t v13 = sub_638A2C(a3);
      if (v13 <= sub_638A2C(a2)) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v19 = sub_638A34(a3);
      if (v19 <= sub_638A34(a2))
      {
LABEL_9:
        sub_7574DC((uint64_t)v23, a1);
        sub_874FD8(a1, a2);
        sub_874FD8(a2, (uint64_t)v23);
        sub_52F1E8((uint64_t)v23);
        uint64_t v14 = sub_638A34(a3);
        if (v14 == sub_638A34(a2))
        {
          uint64_t v15 = sub_638A2C(a3);
          if (v15 <= sub_638A2C(a2)) {
            return 1;
          }
        }
        else
        {
          uint64_t v20 = sub_638A34(a3);
          if (v20 <= sub_638A34(a2)) {
            return 1;
          }
        }
        sub_7574DC((uint64_t)v23, a2);
        sub_874FD8(a2, a3);
        uint64_t v21 = a3;
LABEL_22:
        sub_874FD8(v21, (uint64_t)v23);
        sub_52F1E8((uint64_t)v23);
        return 2;
      }
    }
    sub_7574DC((uint64_t)v23, a1);
    sub_874FD8(a1, a3);
    sub_874FD8(a3, (uint64_t)v23);
    sub_52F1E8((uint64_t)v23);
    return 1;
  }
  uint64_t v11 = sub_638A34(a2);
  if (v11 > sub_638A34(a1)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v8 = sub_638A34(a3);
  if (v8 == sub_638A34(a2))
  {
    uint64_t v9 = sub_638A2C(a3);
    if (v9 <= sub_638A2C(a2)) {
      return 0;
    }
  }
  else
  {
    uint64_t v16 = sub_638A34(a3);
    if (v16 <= sub_638A34(a2)) {
      return 0;
    }
  }
  sub_7574DC((uint64_t)v23, a2);
  sub_874FD8(a2, a3);
  sub_874FD8(a3, (uint64_t)v23);
  sub_52F1E8((uint64_t)v23);
  uint64_t v17 = sub_638A34(a2);
  if (v17 == sub_638A34(a1))
  {
    uint64_t v18 = sub_638A2C(a2);
    if (v18 > sub_638A2C(a1)) {
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v22 = sub_638A34(a2);
    if (v22 > sub_638A34(a1))
    {
LABEL_21:
      sub_7574DC((uint64_t)v23, a1);
      sub_874FD8(a1, a2);
      uint64_t v21 = a2;
      goto LABEL_22;
    }
  }
  return 1;
}

unint64_t sub_8768F0(uint64_t a1, unint64_t a2)
{
  sub_7574DC((uint64_t)v24, a1);
  uint64_t v4 = sub_638A34((uint64_t)v24);
  if (v4 == sub_638A34(a2 - 1080))
  {
    uint64_t v5 = sub_638A2C((uint64_t)v24);
    uint64_t v6 = sub_638A2C(a2 - 1080);
  }
  else
  {
    uint64_t v5 = sub_638A34((uint64_t)v24);
    uint64_t v6 = sub_638A34(a2 - 1080);
  }
  if (v5 <= v6)
  {
    for (unint64_t i = a1 + 1080; i < a2; i += 1080)
    {
      uint64_t v11 = sub_638A34((uint64_t)v24);
      if (v11 == sub_638A34(i))
      {
        uint64_t v12 = sub_638A2C((uint64_t)v24);
        uint64_t v13 = sub_638A2C(i);
      }
      else
      {
        uint64_t v12 = sub_638A34((uint64_t)v24);
        uint64_t v13 = sub_638A34(i);
      }
      if (v12 > v13) {
        break;
      }
    }
  }
  else
  {
    for (unint64_t i = a1 + 1080; ; i += 1080)
    {
      uint64_t v8 = sub_638A34((uint64_t)v24);
      if (v8 == sub_638A34(i))
      {
        uint64_t v9 = sub_638A2C((uint64_t)v24);
        uint64_t v10 = sub_638A2C(i);
      }
      else
      {
        uint64_t v9 = sub_638A34((uint64_t)v24);
        uint64_t v10 = sub_638A34(i);
      }
      if (v9 > v10) {
        break;
      }
    }
  }
  if (i < a2)
  {
    for (a2 -= 1080; ; a2 -= 1080)
    {
      uint64_t v14 = sub_638A34((uint64_t)v24);
      if (v14 == sub_638A34(a2))
      {
        uint64_t v15 = sub_638A2C((uint64_t)v24);
        uint64_t v16 = sub_638A2C(a2);
      }
      else
      {
        uint64_t v15 = sub_638A34((uint64_t)v24);
        uint64_t v16 = sub_638A34(a2);
      }
      if (v15 <= v16) {
        break;
      }
    }
  }
  while (i < a2)
  {
    sub_7574DC((uint64_t)v25, i);
    sub_874FD8(i, a2);
    sub_874FD8(a2, (uint64_t)v25);
    sub_52F1E8((uint64_t)v25);
    do
    {
      i += 1080;
      uint64_t v17 = sub_638A34((uint64_t)v24);
      if (v17 == sub_638A34(i))
      {
        uint64_t v18 = sub_638A2C((uint64_t)v24);
        uint64_t v19 = sub_638A2C(i);
      }
      else
      {
        uint64_t v18 = sub_638A34((uint64_t)v24);
        uint64_t v19 = sub_638A34(i);
      }
    }
    while (v18 <= v19);
    do
    {
      a2 -= 1080;
      uint64_t v20 = sub_638A34((uint64_t)v24);
      if (v20 == sub_638A34(a2))
      {
        uint64_t v21 = sub_638A2C((uint64_t)v24);
        uint64_t v22 = sub_638A2C(a2);
      }
      else
      {
        uint64_t v21 = sub_638A34((uint64_t)v24);
        uint64_t v22 = sub_638A34(a2);
      }
    }
    while (v21 > v22);
  }
  if (i - 1080 != a1) {
    sub_874FD8(a1, i - 1080);
  }
  sub_874FD8(i - 1080, (uint64_t)v24);
  sub_52F1E8((uint64_t)v24);
  return i;
}

void sub_876BF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_876C0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_876C20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_876C34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_876C48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_876C5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_876C70(uint64_t a1, unint64_t a2)
{
  sub_7574DC((uint64_t)v25, a1);
  for (uint64_t i = 0; ; i += 1080)
  {
    uint64_t v5 = sub_638A34(a1 + i + 1080);
    if (v5 == sub_638A34((uint64_t)v25))
    {
      uint64_t v6 = sub_638A2C(a1 + i + 1080);
      uint64_t v7 = sub_638A2C((uint64_t)v25);
    }
    else
    {
      uint64_t v6 = sub_638A34(a1 + i + 1080);
      uint64_t v7 = sub_638A34((uint64_t)v25);
    }
    if (v6 <= v7) {
      break;
    }
  }
  uint64_t v8 = a1 + i;
  unint64_t v9 = a1 + i + 1080;
  if (i)
  {
    do
    {
      a2 -= 1080;
      uint64_t v10 = sub_638A34(a2);
      if (v10 == sub_638A34((uint64_t)v25))
      {
        uint64_t v11 = sub_638A2C(a2);
        uint64_t v12 = sub_638A2C((uint64_t)v25);
      }
      else
      {
        uint64_t v11 = sub_638A34(a2);
        uint64_t v12 = sub_638A34((uint64_t)v25);
      }
    }
    while (v11 <= v12);
  }
  else
  {
    do
    {
      if (v9 >= a2) {
        break;
      }
      a2 -= 1080;
      uint64_t v13 = sub_638A34(a2);
      if (v13 == sub_638A34((uint64_t)v25))
      {
        uint64_t v14 = sub_638A2C(a2);
        uint64_t v15 = sub_638A2C((uint64_t)v25);
      }
      else
      {
        uint64_t v14 = sub_638A34(a2);
        uint64_t v15 = sub_638A34((uint64_t)v25);
      }
    }
    while (v14 <= v15);
  }
  if (v9 < a2)
  {
    unint64_t v16 = a1 + i + 1080;
    unint64_t v17 = a2;
    do
    {
      sub_7574DC((uint64_t)v26, v16);
      sub_874FD8(v16, v17);
      sub_874FD8(v17, (uint64_t)v26);
      sub_52F1E8((uint64_t)v26);
      do
      {
        uint64_t v8 = v16;
        v16 += 1080;
        uint64_t v18 = sub_638A34(v16);
        if (v18 == sub_638A34((uint64_t)v25))
        {
          uint64_t v19 = sub_638A2C(v16);
          uint64_t v20 = sub_638A2C((uint64_t)v25);
        }
        else
        {
          uint64_t v19 = sub_638A34(v16);
          uint64_t v20 = sub_638A34((uint64_t)v25);
        }
      }
      while (v19 > v20);
      unint64_t v16 = v8 + 1080;
      do
      {
        v17 -= 1080;
        uint64_t v21 = sub_638A34(v17);
        if (v21 == sub_638A34((uint64_t)v25))
        {
          uint64_t v22 = sub_638A2C(v17);
          uint64_t v23 = sub_638A2C((uint64_t)v25);
        }
        else
        {
          uint64_t v22 = sub_638A34(v17);
          uint64_t v23 = sub_638A34((uint64_t)v25);
        }
      }
      while (v22 <= v23);
    }
    while (v16 < v17);
  }
  if (v8 != a1) {
    sub_874FD8(a1, v8);
  }
  sub_874FD8(v8, (uint64_t)v25);
  sub_52F1E8((uint64_t)v25);
  return v8;
}

void sub_876F58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_876F6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_876F80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_876F94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_876FA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_876FBC(uint64_t a1, uint64_t a2)
{
  BOOL v4 = 1;
  switch(0x1A8C536FE1A8C537 * ((a2 - a1) >> 3))
  {
    case 0:
    case 1:
      return v4;
    case 2:
      uint64_t v5 = a2 - 1080;
      uint64_t v6 = sub_638A34(a2 - 1080);
      if (v6 == sub_638A34(a1))
      {
        uint64_t v7 = sub_638A2C(v5);
        if (v7 <= sub_638A2C(a1)) {
          return 1;
        }
      }
      else
      {
        uint64_t v20 = sub_638A34(v5);
        if (v20 <= sub_638A34(a1)) {
          return 1;
        }
      }
      sub_7574DC((uint64_t)v22, a1);
      sub_874FD8(a1, v5);
      sub_874FD8(v5, (uint64_t)v22);
      sub_52F1E8((uint64_t)v22);
      return 1;
    case 3:
      sub_8765EC(a1, a1 + 1080, a2 - 1080);
      return v4;
    case 4:
      sub_877344(a1, a1 + 1080, a1 + 2160, a2 - 1080);
      return v4;
    case 5:
      sub_877548(a1, a1 + 1080, a1 + 2160, a1 + 3240, a2 - 1080);
      return v4;
    default:
      uint64_t v8 = a1 + 2160;
      sub_8765EC(a1, a1 + 1080, a1 + 2160);
      uint64_t v9 = a1 + 3240;
      if (a1 + 3240 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    uint64_t v12 = sub_638A34(v9);
    if (v12 == sub_638A34(v8))
    {
      uint64_t v13 = sub_638A2C(v9);
      uint64_t v14 = sub_638A2C(v8);
    }
    else
    {
      uint64_t v13 = sub_638A34(v9);
      uint64_t v14 = sub_638A34(v8);
    }
    if (v13 > v14) {
      break;
    }
LABEL_7:
    uint64_t v8 = v9;
    v10 += 1080;
    v9 += 1080;
    if (v9 == a2) {
      return 1;
    }
  }
  sub_7574DC((uint64_t)v22, v9);
  sub_874FD8(v9, v8);
  uint64_t v15 = a1;
  if (v8 == a1)
  {
LABEL_22:
    sub_874FD8(v15, (uint64_t)v22);
    if (++v11 == 8) {
      goto LABEL_25;
    }
LABEL_23:
    sub_52F1E8((uint64_t)v22);
    goto LABEL_7;
  }
  uint64_t v16 = v10;
  while (1)
  {
    uint64_t v17 = sub_638A34((uint64_t)v22);
    if (v17 == sub_638A34(a1 + v16 + 1080)) {
      break;
    }
    uint64_t v19 = sub_638A34((uint64_t)v22);
    if (v19 <= sub_638A34(a1 + v16 + 1080))
    {
      sub_874FD8(v8, (uint64_t)v22);
      if (++v11 != 8) {
        goto LABEL_23;
      }
      goto LABEL_25;
    }
LABEL_14:
    v8 -= 1080;
    sub_874FD8(a1 + v16 + 2160, a1 + v16 + 1080);
    v16 -= 1080;
    if (v16 == -2160)
    {
      uint64_t v15 = a1;
      goto LABEL_22;
    }
  }
  uint64_t v18 = sub_638A2C((uint64_t)v22);
  if (v18 > sub_638A2C(a1 + v16 + 1080)) {
    goto LABEL_14;
  }
  sub_874FD8(a1 + v16 + 2160, (uint64_t)v22);
  if (++v11 != 8) {
    goto LABEL_23;
  }
LABEL_25:
  BOOL v4 = v9 + 1080 == a2;
  sub_52F1E8((uint64_t)v22);
  return v4;
}

void sub_877318(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_877344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_8765EC(a1, a2, a3);
  uint64_t v8 = sub_638A34(a4);
  if (v8 == sub_638A34(a3))
  {
    uint64_t v9 = sub_638A2C(a4);
    result = (void *)sub_638A2C(a3);
    if (v9 <= (uint64_t)result) {
      return result;
    }
  }
  else
  {
    uint64_t v11 = sub_638A34(a4);
    result = (void *)sub_638A34(a3);
    if (v11 <= (uint64_t)result) {
      return result;
    }
  }
  sub_7574DC((uint64_t)v18, a3);
  sub_874FD8(a3, a4);
  sub_874FD8(a4, (uint64_t)v18);
  sub_52F1E8((uint64_t)v18);
  uint64_t v12 = sub_638A34(a3);
  if (v12 == sub_638A34(a2))
  {
    uint64_t v13 = sub_638A2C(a3);
    result = (void *)sub_638A2C(a2);
    if (v13 <= (uint64_t)result) {
      return result;
    }
  }
  else
  {
    uint64_t v14 = sub_638A34(a3);
    result = (void *)sub_638A34(a2);
    if (v14 <= (uint64_t)result) {
      return result;
    }
  }
  sub_7574DC((uint64_t)v18, a2);
  sub_874FD8(a2, a3);
  sub_874FD8(a3, (uint64_t)v18);
  sub_52F1E8((uint64_t)v18);
  uint64_t v15 = sub_638A34(a2);
  if (v15 != sub_638A34(a1))
  {
    uint64_t v17 = sub_638A34(a2);
    result = (void *)sub_638A34(a1);
    if (v17 <= (uint64_t)result) {
      return result;
    }
    goto LABEL_13;
  }
  uint64_t v16 = sub_638A2C(a2);
  result = (void *)sub_638A2C(a1);
  if (v16 > (uint64_t)result)
  {
LABEL_13:
    sub_7574DC((uint64_t)v18, a1);
    sub_874FD8(a1, a2);
    sub_874FD8(a2, (uint64_t)v18);
    return sub_52F1E8((uint64_t)v18);
  }
  return result;
}

void *sub_877548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_877344(a1, a2, a3, a4);
  uint64_t v10 = sub_638A34(a5);
  if (v10 == sub_638A34(a4))
  {
    uint64_t v11 = sub_638A2C(a5);
    result = (void *)sub_638A2C(a4);
    if (v11 <= (uint64_t)result) {
      return result;
    }
  }
  else
  {
    uint64_t v13 = sub_638A34(a5);
    result = (void *)sub_638A34(a4);
    if (v13 <= (uint64_t)result) {
      return result;
    }
  }
  sub_7574DC((uint64_t)v23, a4);
  sub_874FD8(a4, a5);
  sub_874FD8(a5, (uint64_t)v23);
  sub_52F1E8((uint64_t)v23);
  uint64_t v14 = sub_638A34(a4);
  if (v14 == sub_638A34(a3))
  {
    uint64_t v15 = sub_638A2C(a4);
    result = (void *)sub_638A2C(a3);
    if (v15 <= (uint64_t)result) {
      return result;
    }
  }
  else
  {
    uint64_t v16 = sub_638A34(a4);
    result = (void *)sub_638A34(a3);
    if (v16 <= (uint64_t)result) {
      return result;
    }
  }
  sub_7574DC((uint64_t)v23, a3);
  sub_874FD8(a3, a4);
  sub_874FD8(a4, (uint64_t)v23);
  sub_52F1E8((uint64_t)v23);
  uint64_t v17 = sub_638A34(a3);
  if (v17 == sub_638A34(a2))
  {
    uint64_t v18 = sub_638A2C(a3);
    result = (void *)sub_638A2C(a2);
    if (v18 <= (uint64_t)result) {
      return result;
    }
  }
  else
  {
    uint64_t v19 = sub_638A34(a3);
    result = (void *)sub_638A34(a2);
    if (v19 <= (uint64_t)result) {
      return result;
    }
  }
  sub_7574DC((uint64_t)v23, a2);
  sub_874FD8(a2, a3);
  sub_874FD8(a3, (uint64_t)v23);
  sub_52F1E8((uint64_t)v23);
  uint64_t v20 = sub_638A34(a2);
  if (v20 != sub_638A34(a1))
  {
    uint64_t v22 = sub_638A34(a2);
    result = (void *)sub_638A34(a1);
    if (v22 <= (uint64_t)result) {
      return result;
    }
    goto LABEL_17;
  }
  uint64_t v21 = sub_638A2C(a2);
  result = (void *)sub_638A2C(a1);
  if (v21 > (uint64_t)result)
  {
LABEL_17:
    sub_7574DC((uint64_t)v23, a1);
    sub_874FD8(a1, a2);
    sub_874FD8(a2, (uint64_t)v23);
    return sub_52F1E8((uint64_t)v23);
  }
  return result;
}

uint64_t sub_8777DC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != (void *)a2)
  {
    uint64_t v8 = (a2 - (uint64_t)a1) / 1080;
    if (a2 - (uint64_t)a1 >= 1081)
    {
      unint64_t v9 = (unint64_t)(v8 - 2) >> 1;
      unint64_t v10 = v9 + 1;
      uint64_t v11 = (uint64_t)&a1[135 * v9];
      do
      {
        sub_877990(a1, a4, v8, v11);
        v11 -= 1080;
        --v10;
      }
      while (v10);
    }
    uint64_t v12 = a2;
    if (a2 != a3)
    {
      uint64_t v13 = a2;
      while (1)
      {
        uint64_t v14 = sub_638A34(v13);
        if (v14 == sub_638A34((uint64_t)a1))
        {
          uint64_t v15 = sub_638A2C(v13);
          if (v15 > sub_638A2C((uint64_t)a1)) {
            goto LABEL_12;
          }
        }
        else
        {
          uint64_t v16 = sub_638A34(v13);
          if (v16 > sub_638A34((uint64_t)a1))
          {
LABEL_12:
            sub_7574DC((uint64_t)v18, v13);
            sub_874FD8(v13, (uint64_t)a1);
            sub_874FD8((uint64_t)a1, (uint64_t)v18);
            sub_52F1E8((uint64_t)v18);
            sub_877990(a1, a4, v8, (uint64_t)a1);
          }
        }
        v13 += 1080;
        if (v13 == a3)
        {
          uint64_t v12 = a3;
          break;
        }
      }
    }
    sub_877C50(a1, a2, a4);
    return v12;
  }
  return a3;
}

void *sub_877990(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 < 2) {
    return result;
  }
  uint64_t v6 = result;
  uint64_t v7 = v4 >> 1;
  if ((uint64_t)(v4 >> 1) < 0x1A8C536FE1A8C537 * ((a4 - (uint64_t)result) >> 3)) {
    return result;
  }
  uint64_t v9 = (0x3518A6DFC3518A6ELL * ((a4 - (uint64_t)result) >> 3)) | 1;
  uint64_t v10 = (uint64_t)&result[135 * v9];
  uint64_t v11 = 0x3518A6DFC3518A6ELL * ((a4 - (uint64_t)result) >> 3) + 2;
  if (v11 < a3)
  {
    uint64_t v12 = sub_638A34((uint64_t)&result[135 * v9]);
    if (v12 == sub_638A34(v10 + 1080))
    {
      uint64_t v13 = sub_638A2C((uint64_t)&v6[135 * v9]);
      if (v13 <= sub_638A2C(v10 + 1080)) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    uint64_t v14 = sub_638A34((uint64_t)&v6[135 * v9]);
    if (v14 > sub_638A34(v10 + 1080))
    {
LABEL_8:
      v10 += 1080;
      uint64_t v9 = v11;
    }
  }
LABEL_9:
  uint64_t v15 = sub_638A34(v10);
  if (v15 == sub_638A34(a4))
  {
    uint64_t v16 = sub_638A2C(v10);
    result = (void *)sub_638A2C(a4);
    if (v16 > (uint64_t)result) {
      return result;
    }
  }
  else
  {
    uint64_t v17 = sub_638A34(v10);
    result = (void *)sub_638A34(a4);
    if (v17 > (uint64_t)result) {
      return result;
    }
  }
  sub_7574DC((uint64_t)v27, a4);
  sub_874FD8(a4, v10);
  if (v7 >= v9)
  {
    while (1)
    {
      uint64_t v19 = 2 * v9;
      uint64_t v9 = (2 * v9) | 1;
      uint64_t v18 = (uint64_t)&v6[135 * v9];
      uint64_t v20 = v19 + 2;
      if (v19 + 2 < a3)
      {
        uint64_t v21 = sub_638A34((uint64_t)&v6[135 * v9]);
        if (v21 == sub_638A34(v18 + 1080))
        {
          uint64_t v22 = sub_638A2C((uint64_t)&v6[135 * v9]);
          uint64_t v23 = sub_638A2C(v18 + 1080);
        }
        else
        {
          uint64_t v22 = sub_638A34((uint64_t)&v6[135 * v9]);
          uint64_t v23 = sub_638A34(v18 + 1080);
        }
        if (v22 > v23)
        {
          v18 += 1080;
          uint64_t v9 = v20;
        }
      }
      uint64_t v24 = sub_638A34(v18);
      if (v24 == sub_638A34((uint64_t)v27))
      {
        uint64_t v25 = sub_638A2C(v18);
        uint64_t v26 = sub_638A2C((uint64_t)v27);
      }
      else
      {
        uint64_t v25 = sub_638A34(v18);
        uint64_t v26 = sub_638A34((uint64_t)v27);
      }
      if (v25 > v26) {
        break;
      }
      sub_874FD8(v10, v18);
      uint64_t v10 = v18;
      if (v7 < v9) {
        goto LABEL_26;
      }
    }
  }
  uint64_t v18 = v10;
LABEL_26:
  sub_874FD8(v18, (uint64_t)v27);
  return sub_52F1E8((uint64_t)v27);
}

void sub_877C3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_877C50(void *result, uint64_t a2, uint64_t a3)
{
  if (a2 - (uint64_t)result >= 1081)
  {
    unint64_t v4 = result;
    int64_t v5 = (a2 - (uint64_t)result) / 0x438uLL;
    uint64_t v6 = a2 - 1080;
    do
    {
      sub_7574DC((uint64_t)v10, (uint64_t)v4);
      uint64_t v8 = sub_877D9C((uint64_t)v4, a3, v5);
      uint64_t v9 = v8;
      if (v6 == v8)
      {
        sub_874FD8(v8, (uint64_t)v10);
      }
      else
      {
        sub_874FD8(v8, v6);
        sub_874FD8(v6, (uint64_t)v10);
        sub_877EA4(v4, v9 + 1080, a3, 0x1A8C536FE1A8C537 * ((v9 + 1080 - (uint64_t)v4) >> 3));
      }
      result = sub_52F1E8((uint64_t)v10);
      v6 -= 1080;
    }
    while (v5-- > 2);
  }
  return result;
}

void sub_877D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_877D9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = a1;
    a1 += 1080 * v5 + 1080;
    uint64_t v9 = 2 * v5;
    uint64_t v5 = (2 * v5) | 1;
    uint64_t v10 = v9 + 2;
    if (v9 + 2 >= a3) {
      goto LABEL_4;
    }
    uint64_t v11 = sub_638A34(a1);
    if (v11 == sub_638A34(a1 + 1080))
    {
      uint64_t v12 = sub_638A2C(a1);
      if (v12 <= sub_638A2C(a1 + 1080)) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v13 = sub_638A34(a1);
      if (v13 <= sub_638A34(a1 + 1080)) {
        goto LABEL_4;
      }
    }
    a1 += 1080;
    uint64_t v5 = v10;
LABEL_4:
    sub_874FD8(v8, a1);
  }
  while (v5 <= v7);
  return a1;
}

void *sub_877EA4(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v5 = result;
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = (uint64_t)&result[135 * (v4 >> 1)];
    uint64_t v8 = a2 - 1080;
    uint64_t v9 = sub_638A34(v7);
    if (v9 == sub_638A34(v8))
    {
      uint64_t v10 = sub_638A2C(v7);
      result = (void *)sub_638A2C(v8);
      if (v10 <= (uint64_t)result) {
        return result;
      }
    }
    else
    {
      uint64_t v11 = sub_638A34(v7);
      result = (void *)sub_638A34(v8);
      if (v11 <= (uint64_t)result) {
        return result;
      }
    }
    sub_7574DC((uint64_t)v17, v8);
    sub_874FD8(v8, v7);
    if (v4 >= 2)
    {
      while (1)
      {
        unint64_t v13 = v6 - 1;
        unint64_t v6 = (v6 - 1) >> 1;
        uint64_t v12 = (uint64_t)&v5[135 * v6];
        uint64_t v14 = sub_638A34(v12);
        if (v14 == sub_638A34((uint64_t)v17))
        {
          uint64_t v15 = sub_638A2C((uint64_t)&v5[135 * v6]);
          uint64_t v16 = sub_638A2C((uint64_t)v17);
        }
        else
        {
          uint64_t v15 = sub_638A34((uint64_t)&v5[135 * v6]);
          uint64_t v16 = sub_638A34((uint64_t)v17);
        }
        if (v15 <= v16) {
          break;
        }
        sub_874FD8(v7, (uint64_t)&v5[135 * v6]);
        uint64_t v7 = (uint64_t)&v5[135 * v6];
        if (v13 <= 1) {
          goto LABEL_13;
        }
      }
    }
    uint64_t v12 = v7;
LABEL_13:
    sub_874FD8(v12, (uint64_t)v17);
    return sub_52F1E8((uint64_t)v17);
  }
  return result;
}

void sub_878034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_878048(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = a3;
  uint64_t v10 = (uint64_t)(a1 + 2);
  uint64_t v9 = a1[2];
  unint64_t v11 = a1[1];
  if ((uint64_t)(0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(v9 - v11) >> 3)) >= a5)
  {
    uint64_t v17 = v11 - (void)a2;
    if ((uint64_t)(0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(v11 - (void)a2) >> 3)) >= a5)
    {
      uint64_t v19 = a3 + 408 * a5;
      uint64_t v21 = a1[1];
    }
    else
    {
      uint64_t v19 = a3 + 8 * ((uint64_t)(v11 - (void)a2) >> 3);
      if (v19 == a4)
      {
        uint64_t v21 = a1[1];
        a1[1] = v11;
        if (v17 < 1) {
          return v5;
        }
      }
      else
      {
        uint64_t v20 = 0;
        do
        {
          sub_599C54(v10, v11 + v20, v19 + v20);
          v20 += 408;
        }
        while (v19 + v20 != a4);
        uint64_t v21 = v11 + v20;
        a1[1] = v21;
        if (v17 < 1) {
          return v5;
        }
      }
    }
    char v45 = &v5[51 * a5];
    unint64_t v22 = v21 - 408 * a5;
    uint64_t v23 = v21;
    if (v22 < v11)
    {
      unint64_t v24 = v22;
      uint64_t v23 = v21;
      do
      {
        sub_757C94(v10, v23, v24);
        v24 += 408;
        v23 += 408;
      }
      while (v24 < v11);
    }
    a1[1] = v23;
    if ((void *)v21 != v45)
    {
      uint64_t v25 = 0;
      do
      {
        uint64_t v27 = v22 + v25;
        uint64_t v28 = v21 + v25;
        sub_52ECD8(v21 + v25 - 408, v22 + v25 - 408);
        int v29 = *(_DWORD *)(v22 + v25 - 52);
        unint64_t v31 = (void **)(v21 + v25 - 48);
        uint64_t v30 = *v31;
        *(_OWORD *)(v28 - 68) = *(_OWORD *)(v22 + v25 - 68);
        *(_DWORD *)(v28 - 52) = v29;
        if (v30)
        {
          *(void *)(v28 - 40) = v30;
          operator delete(v30);
          *unint64_t v31 = 0;
          *(void *)(v28 - 40) = 0;
          *(void *)(v28 - 32) = 0;
        }
        *(_OWORD *)unint64_t v31 = *(_OWORD *)(v27 - 48);
        *(void *)(v28 - 32) = *(void *)(v27 - 32);
        *(void *)(v27 - 48) = 0;
        *(void *)(v27 - 40) = 0;
        *(void *)(v27 - 32) = 0;
        long long v26 = *(_OWORD *)(v27 - 24);
        *(_DWORD *)(v28 - 8) = *(_DWORD *)(v27 - 8);
        *(_OWORD *)(v28 - 24) = v26;
        v25 -= 408;
      }
      while (-8 * ((v21 - (uint64_t)v45) >> 3) != v25);
    }
    if (v19 != v7)
    {
      uint64_t v32 = (uint64_t)v5;
      do
      {
        sub_59DDA4(v32, v7);
        *(_DWORD *)(v32 + 340) = *(_DWORD *)(v7 + 340);
        *(void *)(v32 + 344) = *(void *)(v7 + 344);
        *(void *)(v32 + 352) = *(void *)(v7 + 352);
        if (v32 != v7) {
          sub_472BC8((void *)(v32 + 360), *(char **)(v7 + 360), *(char **)(v7 + 368), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v7 + 368) - *(void *)(v7 + 360)) >> 2));
        }
        long long v33 = *(_OWORD *)(v7 + 384);
        *(_DWORD *)(v32 + 400) = *(_DWORD *)(v7 + 400);
        *(_OWORD *)(v32 + 384) = v33;
        v7 += 408;
        v32 += 408;
      }
      while (v7 != v19);
    }
    return v5;
  }
  uint64_t v12 = (void *)*a1;
  unint64_t v13 = a5 - 0x505050505050505 * ((uint64_t)(v11 - *a1) >> 3);
  if (v13 > 0xA0A0A0A0A0A0A0) {
    sub_2E00();
  }
  unint64_t v14 = 0xFAFAFAFAFAFAFAFBLL * ((v9 - (uint64_t)v12) >> 3);
  if (2 * v14 > v13) {
    unint64_t v13 = 2 * v14;
  }
  if (v14 >= 0x50505050505050) {
    unint64_t v15 = 0xA0A0A0A0A0A0A0;
  }
  else {
    unint64_t v15 = v13;
  }
  uint64_t v48 = (uint64_t)(a1 + 2);
  if (v15)
  {
    if (v15 > 0xA0A0A0A0A0A0A0) {
      sub_188D718();
    }
    uint64_t v16 = (char *)operator new(408 * v15);
  }
  else
  {
    uint64_t v16 = 0;
  }
  uint64_t v34 = (uint64_t)&v16[8 * (v5 - v12)];
  uint64_t v46 = v34;
  char v47 = &v16[408 * v15];
  uint64_t v35 = 408 * a5;
  uint64_t v36 = v34 + 408 * a5;
  do
  {
    sub_599C54(v48, v34, v7);
    v34 += 408;
    v7 += 408;
    v35 -= 408;
  }
  while (v35);
  uint64_t v37 = v46;
  uint64_t v38 = *a1;
  uint64_t v39 = v46;
  if ((void *)*a1 != v5)
  {
    uint64_t v39 = v46;
    uint64_t v40 = (uint64_t)v5;
    do
    {
      v39 -= 408;
      v40 -= 408;
      sub_757C94(v10, v39, v40);
    }
    while (v40 != v38);
  }
  char v41 = (void *)a1[1];
  if (v41 != v5)
  {
    do
    {
      sub_757C94(v10, v36, (uint64_t)v5);
      v5 += 51;
      v36 += 408;
    }
    while (v5 != v41);
    uint64_t v5 = (void *)a1[1];
  }
  v42 = (void *)*a1;
  *a1 = v39;
  a1[1] = v36;
  a1[2] = (uint64_t)v47;
  while (v5 != v42)
  {
    char v43 = (void *)*(v5 - 6);
    if (v43)
    {
      *(v5 - 5) = v43;
      operator delete(v43);
    }
    v5 -= 51;
    sub_4F32CC(v5);
  }
  if (v42) {
    operator delete(v42);
  }
  return (void *)v37;
}

void sub_87847C(_Unwind_Exception *exception_object)
{
  if (v3) {
    sub_20A9A28();
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void sub_87849C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_757C24((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_8784B4(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xA3784A062B2E43DBLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x62B2E43DAFCEA6) {
    sub_2E00();
  }
  if (0x46F0940C565C87B6 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x46F0940C565C87B6 * ((a1[2] - *a1) >> 3);
  }
  if (0xA3784A062B2E43DBLL * ((a1[2] - *a1) >> 3) >= 0x3159721ED7E753) {
    unint64_t v6 = 0x62B2E43DAFCEA6;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x62B2E43DAFCEA6) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(664 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v14 = (uint64_t)&v7[664 * v3];
  unint64_t v15 = &v7[664 * v6];
  sub_594D4C(v14, a2);
  uint64_t v8 = v14;
  uint64_t v9 = v14 + 664;
  unint64_t v11 = (char *)*a1;
  uint64_t v10 = (char *)a1[1];
  if (v10 == (char *)*a1)
  {
    *a1 = v14;
    a1[1] = v9;
    a1[2] = (uint64_t)v15;
  }
  else
  {
    do
    {
      v10 -= 664;
      uint64_t v8 = sub_87353C(v8 - 664, (uint64_t)v10);
    }
    while (v10 != v11);
    uint64_t v12 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    *a1 = v8;
    a1[1] = v9;
    a1[2] = (uint64_t)v15;
    if (v10 != v12)
    {
      do
      {
        v10 -= 664;
        sub_576A58((uint64_t)v10);
      }
      while (v10 != v12);
      uint64_t v10 = v12;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v14 + 664;
}

void sub_878634(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_8734E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_878648(void *a1, uint64_t a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0x62B2E43DAFCEA7) {
      sub_2E00();
    }
    unint64_t v6 = (char *)operator new(664 * a3);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    uint64_t v8 = 664 * a3;
    a1[2] = &v6[v8];
    do
    {
      sub_594D4C((uint64_t)&v6[v7], a2 + v7);
      v7 += 664;
    }
    while (v8 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_8786FC(_Unwind_Exception *exception_object)
{
  unint64_t v3 = (void *)*v1;
  if (*v1)
  {
    unint64_t v4 = (void *)v1[1];
    uint64_t v5 = (void *)*v1;
    if (v4 != v3)
    {
      do
        unint64_t v4 = sub_576A58((uint64_t)(v4 - 83));
      while (v4 != v3);
      uint64_t v5 = (void *)*v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_878764(int *a1, int *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      uint64_t v8 = sub_638A2C((uint64_t)(a2 - 102));
      if (v8 == sub_638A2C((uint64_t)a1))
      {
        uint64_t v9 = sub_638A34((uint64_t)(a2 - 102));
        if (v9 <= sub_638A34((uint64_t)a1)) {
          return;
        }
      }
      else
      {
        uint64_t v17 = sub_638A2C((uint64_t)(a2 - 102));
        if (v17 <= sub_638A2C((uint64_t)a1)) {
          return;
        }
      }
      sub_87A1D4((uint64_t)a1, (uint64_t)(a2 - 102));
    }
    else if ((uint64_t)a4 <= 0)
    {
      sub_8789F4(a1, a2);
    }
    else
    {
      unint64_t v13 = (void *)a5;
      uint64_t v14 = a4 >> 1;
      uint64_t v15 = (uint64_t)&a1[102 * (a4 >> 1)];
      if ((uint64_t)a4 <= a6)
      {
        sub_879008((uint64_t)a1, &a1[102 * (a4 >> 1)], a3, a4 >> 1, a5);
        unint64_t v18 = a4 - v14;
        uint64_t v19 = &v13[51 * v14];
        sub_879008((uint64_t)&a1[102 * (a4 >> 1)], a2, a3, v18, (uint64_t)v19);
        sub_87990C((uint64_t)v13, v19, (uint64_t)v19, (uint64_t)&v13[51 * a4], (uint64_t)a1);
        if (v13)
        {
          unint64_t v20 = 0;
          do
          {
            uint64_t v21 = (void *)v13[45];
            if (v21)
            {
              v13[46] = v21;
              operator delete(v21);
            }
            sub_4F32CC(v13);
            ++v20;
            v13 += 51;
          }
          while (v20 < a4);
        }
      }
      else
      {
        sub_878764(a1, &a1[102 * (a4 >> 1)], a3, a4 >> 1, a5, a6);
        uint64_t v16 = a4 - v14;
        sub_878764(v15, a2, a3, v16, v13, a6);
        sub_879C54((uint64_t)a1, v15, (uint64_t)a2, a3, v14, v16, v13, a6);
      }
    }
  }
}

void sub_8789E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_879BD8((void **)va);
  _Unwind_Resume(a1);
}

void sub_8789F4(int *a1, int *a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = (uint64_t)(a1 + 102);
    if (a1 + 102 != a2)
    {
      uint64_t v4 = 0;
      uint64_t v5 = a1;
      while (1)
      {
        uint64_t v6 = (uint64_t)v5;
        uint64_t v5 = (int *)v3;
        uint64_t v7 = sub_638A2C(v3);
        if (v7 == sub_638A2C(v6))
        {
          uint64_t v8 = sub_638A34((uint64_t)v5);
          uint64_t v9 = sub_638A34(v6);
        }
        else
        {
          uint64_t v8 = sub_638A2C((uint64_t)v5);
          uint64_t v9 = sub_638A2C(v6);
        }
        if (v8 > v9) {
          break;
        }
LABEL_5:
        uint64_t v3 = (uint64_t)(v5 + 102);
        v4 += 408;
        if (v5 + 102 == a2) {
          return;
        }
      }
      int v45 = *v5;
      *(_OWORD *)__p = *(_OWORD *)(v6 + 416);
      uint64_t v47 = *(void *)(v6 + 432);
      *(void *)(v6 + 416) = 0;
      *(void *)(v6 + 424) = 0;
      *(void *)(v6 + 432) = 0;
      long long v10 = *(_OWORD *)(v6 + 456);
      long long v48 = *(_OWORD *)(v6 + 440);
      long long v49 = v10;
      long long v11 = *(_OWORD *)(v6 + 488);
      long long v50 = *(_OWORD *)(v6 + 472);
      uint64_t v53 = *(void *)(v6 + 520);
      long long v12 = *(_OWORD *)(v6 + 504);
      long long v51 = v11;
      long long v52 = v12;
      *(_OWORD *)v54 = *(_OWORD *)(v6 + 528);
      uint64_t v55 = *(void *)(v6 + 544);
      *(void *)(v6 + 544) = 0;
      *(void *)(v6 + 536) = 0;
      *(void *)(v6 + 528) = 0;
      *(_OWORD *)v56 = *(_OWORD *)(v6 + 552);
      uint64_t v57 = *(void *)(v6 + 568);
      *(void *)(v6 + 560) = 0;
      *(void *)(v6 + 568) = 0;
      *(void *)(v6 + 552) = 0;
      long long v58 = *(_OWORD *)(v6 + 576);
      unsigned int v60 = *(_DWORD *)(v6 + 600);
      if (v60 <= 1) {
        uint64_t v59 = *(void *)(v6 + 592);
      }
      long long v13 = *(_OWORD *)(v6 + 624);
      long long v61 = *(_OWORD *)(v6 + 608);
      long long v14 = *(_OWORD *)(v6 + 640);
      long long v62 = v13;
      long long v63 = v14;
      uint64_t v64 = *(void *)(v6 + 656);
      long long v65 = *(_OWORD *)(v6 + 664);
      uint64_t v66 = *(void *)(v6 + 680);
      *(void *)(v6 + 664) = 0;
      *(void *)(v6 + 672) = 0;
      *(void *)(v6 + 680) = 0;
      char v67 = *(unsigned char *)(v6 + 688);
      long long v68 = *(_OWORD *)(v6 + 696);
      uint64_t v69 = *(void *)(v6 + 712);
      *(void *)(v6 + 696) = 0;
      *(void *)(v6 + 704) = 0;
      *(void *)(v6 + 712) = 0;
      *(_OWORD *)v70 = *(_OWORD *)(v6 + 720);
      *(_OWORD *)&v70[9] = *(_OWORD *)(v6 + 729);
      long long v71 = *(_OWORD *)(v6 + 748);
      int v72 = *(_DWORD *)(v6 + 764);
      long long v73 = *(_OWORD *)(v6 + 768);
      uint64_t v74 = *(void *)(v6 + 784);
      *(void *)(v6 + 776) = 0;
      *(void *)(v6 + 768) = 0;
      *(void *)(v6 + 784) = 0;
      long long v15 = *(_OWORD *)(v6 + 792);
      int v76 = *(_DWORD *)(v6 + 808);
      uint64_t v16 = v4;
      long long v75 = v15;
      while (1)
      {
        uint64_t v17 = (char *)a1 + v16;
        sub_52ECD8((uint64_t)a1 + v16 + 408, (uint64_t)a1 + v16);
        *(_OWORD *)(v17 + 748) = *(_OWORD *)(v17 + 340);
        *((_DWORD *)v17 + 191) = *((_DWORD *)v17 + 89);
        unint64_t v18 = (void **)((char *)a1 + v16 + 768);
        uint64_t v19 = *v18;
        if (*v18)
        {
          *((void *)v17 + 97) = v19;
          operator delete(v19);
          void *v18 = 0;
          *((void *)v17 + 97) = 0;
          *((void *)v17 + 98) = 0;
        }
        void *v18 = (void *)*((void *)v17 + 45);
        uint64_t v20 = *((void *)v17 + 47);
        *((void *)v17 + 97) = *((void *)v17 + 46);
        *((void *)v17 + 98) = v20;
        *((void *)v17 + 45) = 0;
        *((void *)v17 + 46) = 0;
        *((void *)v17 + 47) = 0;
        *(_OWORD *)(v17 + 792) = *((_OWORD *)v17 + 24);
        *((_DWORD *)v17 + 202) = *((_DWORD *)v17 + 100);
        if (!v16)
        {
          uint64_t v24 = (uint64_t)a1;
          goto LABEL_23;
        }
        uint64_t v21 = sub_638A2C((uint64_t)&v45);
        if (v21 == sub_638A2C((uint64_t)a1 + v16 - 408))
        {
          uint64_t v22 = sub_638A34((uint64_t)&v45);
          uint64_t v23 = sub_638A34((uint64_t)a1 + v16 - 408);
        }
        else
        {
          uint64_t v22 = sub_638A2C((uint64_t)&v45);
          uint64_t v23 = sub_638A2C((uint64_t)a1 + v16 - 408);
        }
        if (v22 <= v23) {
          break;
        }
        v16 -= 408;
      }
      uint64_t v24 = (uint64_t)a1 + v16;
LABEL_23:
      sub_52ECD8(v24, (uint64_t)&v45);
      uint64_t v25 = (char *)a1 + v16;
      int v26 = v72;
      *(_OWORD *)((char *)a1 + v16 + 340) = v71;
      *(int *)((char *)a1 + v16 + 356) = v26;
      uint64_t v27 = (void **)((char *)a1 + v16 + 360);
      uint64_t v28 = *v27;
      if (*v27)
      {
        *(void *)(v24 + 368) = v28;
        operator delete(v28);
        *uint64_t v27 = 0;
        *(void *)((char *)a1 + v16 + 368) = 0;
        *(void *)((char *)a1 + v16 + 376) = 0;
      }
      *uint64_t v27 = (void *)v73;
      *(void *)(v24 + 368) = *((void *)&v73 + 1);
      *(void *)(v24 + 376) = v74;
      long long v73 = 0uLL;
      uint64_t v74 = 0;
      long long v29 = v75;
      *((_DWORD *)v25 + 100) = v76;
      *((_OWORD *)v25 + 24) = v29;
      if ((void)v68)
      {
        *((void *)&v68 + 1) = v68;
        operator delete((void *)v68);
      }
      uint64_t v30 = (void **)v65;
      if (!(void)v65)
      {
LABEL_62:
        if (v56[0])
        {
          v56[1] = v56[0];
          operator delete(v56[0]);
        }
        if (v54[0])
        {
          v54[1] = v54[0];
          operator delete(v54[0]);
        }
        char v41 = __p[0];
        if (__p[0])
        {
          v42 = __p[1];
          char v43 = __p[0];
          if (__p[1] != __p[0])
          {
            do
              v42 = (void *)sub_4D4B58((uint64_t)v42 - 160);
            while (v42 != v41);
            char v43 = __p[0];
          }
          __p[1] = v41;
          operator delete(v43);
        }
        goto LABEL_5;
      }
      uint64_t v31 = *((void *)&v65 + 1);
      uint64_t v32 = (void *)v65;
      if (*((void *)&v65 + 1) == (void)v65)
      {
LABEL_61:
        *((void *)&v65 + 1) = v30;
        operator delete(v32);
        goto LABEL_62;
      }
      while (1)
      {
        uint64_t v34 = *(std::__shared_weak_count **)(v31 - 16);
        if (!v34 || atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          uint64_t v35 = *(void ***)(v31 - 64);
          if (v35) {
            goto LABEL_47;
          }
          goto LABEL_36;
        }
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
        uint64_t v35 = *(void ***)(v31 - 64);
        if (v35) {
          break;
        }
LABEL_36:
        uint64_t v36 = *(void **)(v31 - 80);
        *(void *)(v31 - 80) = 0;
        if (v36) {
          operator delete(v36);
        }
        uint64_t v37 = (void **)(v31 - 104);
        uint64_t v38 = *(void *)(v31 - 104);
        if (v38)
        {
          uint64_t v39 = *(void *)(v31 - 96);
          long long v33 = *(void **)(v31 - 104);
          if (v39 != v38)
          {
            do
            {
              if (*(char *)(v39 - 1) < 0) {
                operator delete(*(void **)(v39 - 24));
              }
              v39 -= 24;
            }
            while (v39 != v38);
            long long v33 = *v37;
          }
          *(void *)(v31 - 96) = v38;
          operator delete(v33);
        }
        v31 -= 104;
        if (v37 == v30)
        {
          uint64_t v32 = (void *)v65;
          goto LABEL_61;
        }
      }
      while (1)
      {
LABEL_47:
        uint64_t v40 = (void **)*v35;
        if (*((char *)v35 + 191) < 0)
        {
          operator delete(v35[21]);
          if ((*((char *)v35 + 159) & 0x80000000) == 0)
          {
LABEL_49:
            if ((*((char *)v35 + 135) & 0x80000000) == 0) {
              goto LABEL_50;
            }
            goto LABEL_56;
          }
        }
        else if ((*((char *)v35 + 159) & 0x80000000) == 0)
        {
          goto LABEL_49;
        }
        operator delete(v35[17]);
        if ((*((char *)v35 + 135) & 0x80000000) == 0)
        {
LABEL_50:
          if ((*((char *)v35 + 95) & 0x80000000) == 0) {
            goto LABEL_51;
          }
          goto LABEL_57;
        }
LABEL_56:
        operator delete(v35[14]);
        if ((*((char *)v35 + 95) & 0x80000000) == 0)
        {
LABEL_51:
          if ((*((char *)v35 + 63) & 0x80000000) == 0) {
            goto LABEL_52;
          }
          goto LABEL_58;
        }
LABEL_57:
        operator delete(v35[9]);
        if ((*((char *)v35 + 63) & 0x80000000) == 0)
        {
LABEL_52:
          if (*((char *)v35 + 39) < 0) {
            goto LABEL_59;
          }
          goto LABEL_46;
        }
LABEL_58:
        operator delete(v35[5]);
        if (*((char *)v35 + 39) < 0) {
LABEL_59:
        }
          operator delete(v35[2]);
LABEL_46:
        operator delete(v35);
        uint64_t v35 = v40;
        if (!v40) {
          goto LABEL_36;
        }
      }
    }
  }
}

void sub_878FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_639B78((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_879008(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if (a4)
  {
    if (a4 == 2)
    {
      unint64_t v18 = a2 - 51;
      uint64_t v19 = sub_638A2C((uint64_t)(a2 - 51));
      uint64_t v20 = (void *)(a5 + 664);
      uint64_t v21 = (void *)(a5 + 360);
      if (v19 == sub_638A2C(a1))
      {
        uint64_t v22 = sub_638A34((uint64_t)(a2 - 51));
        uint64_t v23 = sub_638A34(a1);
      }
      else
      {
        uint64_t v22 = sub_638A2C((uint64_t)(a2 - 51));
        uint64_t v23 = sub_638A2C(a1);
      }
      if (v22 <= v23)
      {
        *(_DWORD *)a5 = *(_DWORD *)a1;
        *(void *)(a5 + 16) = 0;
        *(void *)(a5 + 24) = 0;
        *(void *)(a5 + 8) = 0;
        *(_OWORD *)(a5 + 8) = *(_OWORD *)(a1 + 8);
        *(void *)(a5 + 24) = *(void *)(a1 + 24);
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
        long long v47 = *(_OWORD *)(a1 + 32);
        long long v48 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)(a5 + 48) = *(_OWORD *)(a1 + 48);
        *(_OWORD *)(a5 + 64) = v48;
        *(_OWORD *)(a5 + 32) = v47;
        long long v49 = *(_OWORD *)(a1 + 96);
        uint64_t v50 = *(void *)(a1 + 112);
        *(_OWORD *)(a5 + 80) = *(_OWORD *)(a1 + 80);
        *(_OWORD *)(a5 + 96) = v49;
        *(void *)(a5 + 112) = v50;
        *(void *)(a5 + 120) = 0;
        *(void *)(a5 + 128) = 0;
        *(void *)(a5 + 136) = 0;
        *(_OWORD *)(a5 + 120) = *(_OWORD *)(a1 + 120);
        *(void *)(a5 + 136) = *(void *)(a1 + 136);
        *(void *)(a1 + 120) = 0;
        *(void *)(a1 + 128) = 0;
        *(void *)(a1 + 136) = 0;
        *(void *)(a5 + 144) = 0;
        *(void *)(a5 + 152) = 0;
        *(void *)(a5 + 160) = 0;
        *(_OWORD *)(a5 + 144) = *(_OWORD *)(a1 + 144);
        *(void *)(a5 + 160) = *(void *)(a1 + 160);
        *(void *)(a1 + 144) = 0;
        *(void *)(a1 + 152) = 0;
        *(void *)(a1 + 160) = 0;
        *(_OWORD *)(a5 + 168) = *(_OWORD *)(a1 + 168);
        *(_DWORD *)(a5 + 192) = *(_DWORD *)(a1 + 192);
        if (*(_DWORD *)(a1 + 192) <= 1u) {
          *(void *)(a5 + 184) = *(void *)(a1 + 184);
        }
        *(_OWORD *)(a5 + 200) = *(_OWORD *)(a1 + 200);
        long long v51 = *(_OWORD *)(a1 + 216);
        uint64_t v52 = *(void *)(a1 + 248);
        *(_OWORD *)(a5 + 232) = *(_OWORD *)(a1 + 232);
        *(_OWORD *)(a5 + 216) = v51;
        *(void *)(a5 + 248) = v52;
        *(void *)(a5 + 256) = 0;
        *(void *)(a5 + 264) = 0;
        *(void *)(a5 + 272) = 0;
        *(_OWORD *)(a5 + 256) = *(_OWORD *)(a1 + 256);
        *(void *)(a5 + 272) = *(void *)(a1 + 272);
        *(void *)(a1 + 264) = 0;
        *(void *)(a1 + 272) = 0;
        *(void *)(a1 + 256) = 0;
        *(unsigned char *)(a5 + 280) = *(unsigned char *)(a1 + 280);
        *(void *)(a5 + 296) = 0;
        *(void *)(a5 + 304) = 0;
        *(void *)(a5 + 288) = 0;
        *(_OWORD *)(a5 + 288) = *(_OWORD *)(a1 + 288);
        *(void *)(a5 + 304) = *(void *)(a1 + 304);
        *(void *)(a1 + 288) = 0;
        *(void *)(a1 + 296) = 0;
        *(void *)(a1 + 304) = 0;
        long long v53 = *(_OWORD *)(a1 + 312);
        *(_OWORD *)(a5 + 321) = *(_OWORD *)(a1 + 321);
        *(_OWORD *)(a5 + 312) = v53;
        long long v54 = *(_OWORD *)(a1 + 340);
        *(_DWORD *)(a5 + 356) = *(_DWORD *)(a1 + 356);
        *(_OWORD *)(a5 + 340) = v54;
        *(void *)(a5 + 368) = 0;
        *(void *)(a5 + 376) = 0;
        *(void *)(a5 + 360) = 0;
        *(void *)(a5 + 360) = *(void *)(a1 + 360);
        *(void *)(a5 + 368) = *(void *)(a1 + 368);
        *(void *)(a5 + 376) = *(void *)(a1 + 376);
        *(void *)(a1 + 360) = 0;
        *(void *)(a1 + 368) = 0;
        *(void *)(a1 + 376) = 0;
        long long v55 = *(_OWORD *)(a1 + 384);
        *(_DWORD *)(a5 + 400) = *(_DWORD *)(a1 + 400);
        *(_OWORD *)(a5 + 384) = v55;
        *(_DWORD *)(a5 + 408) = *v18;
        *(void *)(a5 + 424) = 0;
        *(void *)(a5 + 432) = 0;
        *(void *)(a5 + 416) = 0;
        *(_OWORD *)(a5 + 416) = *((_OWORD *)a2 - 25);
        *(void *)(a5 + 432) = *(a2 - 48);
        *(a2 - 50) = 0;
        *(a2 - 49) = 0;
        *(a2 - 48) = 0;
        long long v56 = *(_OWORD *)(a2 - 47);
        long long v57 = *(_OWORD *)(a2 - 43);
        *(_OWORD *)(a5 + 456) = *(_OWORD *)(a2 - 45);
        *(_OWORD *)(a5 + 472) = v57;
        *(_OWORD *)(a5 + 440) = v56;
        long long v58 = *(_OWORD *)(a2 - 41);
        long long v59 = *(_OWORD *)(a2 - 39);
        *(void *)(a5 + 520) = *(a2 - 37);
        *(_OWORD *)(a5 + 488) = v58;
        *(_OWORD *)(a5 + 504) = v59;
        *(void *)(a5 + 528) = 0;
        *(void *)(a5 + 544) = 0;
        *(void *)(a5 + 536) = 0;
        *(_OWORD *)(a5 + 528) = *((_OWORD *)a2 - 18);
        *(void *)(a5 + 544) = *(a2 - 34);
        *(a2 - 36) = 0;
        *(a2 - 35) = 0;
        *(a2 - 34) = 0;
        *(void *)(a5 + 552) = 0;
        *(void *)(a5 + 560) = 0;
        *(void *)(a5 + 568) = 0;
        *(_OWORD *)(a5 + 552) = *(_OWORD *)(a2 - 33);
        *(void *)(a5 + 568) = *(a2 - 31);
        *(a2 - 33) = 0;
        *(a2 - 32) = 0;
        *(a2 - 31) = 0;
        *(_OWORD *)(a5 + 576) = *((_OWORD *)a2 - 15);
        *(_DWORD *)(a5 + 600) = *((_DWORD *)a2 - 54);
        if (*((_DWORD *)a2 - 54) <= 1u) {
          *(void *)(a5 + 592) = *(a2 - 28);
        }
        *(_OWORD *)(a5 + 608) = *((_OWORD *)a2 - 13);
        long long v60 = *((_OWORD *)a2 - 12);
        long long v61 = *((_OWORD *)a2 - 11);
        *(void *)(a5 + 656) = *(a2 - 20);
        *(_OWORD *)(a5 + 624) = v60;
        *(_OWORD *)(a5 + 640) = v61;
        *(void *)(a5 + 672) = 0;
        *(void *)(a5 + 680) = 0;
        void *v20 = 0;
        *(_OWORD *)uint64_t v20 = *(_OWORD *)(a2 - 19);
        *(void *)(a5 + 680) = *(a2 - 17);
        *(a2 - 18) = 0;
        *(a2 - 17) = 0;
        *(a2 - 19) = 0;
        *(unsigned char *)(a5 + 688) = *((unsigned char *)a2 - 128);
        *(void *)(a5 + 704) = 0;
        *(void *)(a5 + 712) = 0;
        *(void *)(a5 + 696) = 0;
        *(_OWORD *)(a5 + 696) = *(_OWORD *)(a2 - 15);
        *(void *)(a5 + 712) = *(a2 - 13);
        *(a2 - 15) = 0;
        *(a2 - 14) = 0;
        *(a2 - 13) = 0;
        long long v62 = *((_OWORD *)a2 - 6);
        *(_OWORD *)(a5 + 729) = *(_OWORD *)((char *)a2 - 87);
        *(_OWORD *)(a5 + 720) = v62;
        long long v63 = *(_OWORD *)((char *)a2 - 68);
        *(_DWORD *)(a5 + 764) = *((_DWORD *)a2 - 13);
        *(_OWORD *)(a5 + 748) = v63;
        *(void *)(a5 + 768) = 0;
        *(void *)(a5 + 784) = 0;
        *(void *)(a5 + 776) = 0;
        *(_OWORD *)(a5 + 768) = *((_OWORD *)a2 - 3);
        *(void *)(a5 + 784) = *(a2 - 4);
        *(a2 - 6) = 0;
        *(a2 - 5) = 0;
        *(a2 - 4) = 0;
        v44 = (_OWORD *)(a5 + 792);
        long long v45 = *(_OWORD *)(a2 - 3);
        int v46 = *((_DWORD *)a2 - 2);
      }
      else
      {
        *(_DWORD *)a5 = *v18;
        *(void *)(a5 + 16) = 0;
        *(void *)(a5 + 24) = 0;
        *(void *)(a5 + 8) = 0;
        *(_OWORD *)(a5 + 8) = *((_OWORD *)a2 - 25);
        *(void *)(a5 + 24) = *(a2 - 48);
        *(a2 - 50) = 0;
        *(a2 - 49) = 0;
        *(a2 - 48) = 0;
        long long v27 = *(_OWORD *)(a2 - 47);
        long long v28 = *(_OWORD *)(a2 - 43);
        *(_OWORD *)(a5 + 48) = *(_OWORD *)(a2 - 45);
        *(_OWORD *)(a5 + 64) = v28;
        *(_OWORD *)(a5 + 32) = v27;
        long long v29 = *(_OWORD *)(a2 - 39);
        uint64_t v30 = *(a2 - 37);
        *(_OWORD *)(a5 + 80) = *(_OWORD *)(a2 - 41);
        *(_OWORD *)(a5 + 96) = v29;
        *(void *)(a5 + 112) = v30;
        *(void *)(a5 + 120) = 0;
        *(void *)(a5 + 128) = 0;
        *(void *)(a5 + 136) = 0;
        *(_OWORD *)(a5 + 120) = *((_OWORD *)a2 - 18);
        *(void *)(a5 + 136) = *(a2 - 34);
        *(a2 - 36) = 0;
        *(a2 - 35) = 0;
        *(a2 - 34) = 0;
        *(void *)(a5 + 144) = 0;
        *(void *)(a5 + 152) = 0;
        *(void *)(a5 + 160) = 0;
        *(_OWORD *)(a5 + 144) = *(_OWORD *)(a2 - 33);
        *(void *)(a5 + 160) = *(a2 - 31);
        *(a2 - 33) = 0;
        *(a2 - 32) = 0;
        *(a2 - 31) = 0;
        *(_OWORD *)(a5 + 168) = *((_OWORD *)a2 - 15);
        *(_DWORD *)(a5 + 192) = *((_DWORD *)a2 - 54);
        if (*((_DWORD *)a2 - 54) <= 1u) {
          *(void *)(a5 + 184) = *(a2 - 28);
        }
        *(_OWORD *)(a5 + 200) = *((_OWORD *)a2 - 13);
        long long v31 = *((_OWORD *)a2 - 12);
        uint64_t v32 = *(a2 - 20);
        *(_OWORD *)(a5 + 232) = *((_OWORD *)a2 - 11);
        *(_OWORD *)(a5 + 216) = v31;
        *(void *)(a5 + 248) = v32;
        *(void *)(a5 + 256) = 0;
        *(void *)(a5 + 264) = 0;
        *(void *)(a5 + 272) = 0;
        *(_OWORD *)(a5 + 256) = *(_OWORD *)(a2 - 19);
        *(void *)(a5 + 272) = *(a2 - 17);
        *(a2 - 18) = 0;
        *(a2 - 17) = 0;
        *(a2 - 19) = 0;
        *(unsigned char *)(a5 + 280) = *((unsigned char *)a2 - 128);
        *(void *)(a5 + 296) = 0;
        *(void *)(a5 + 304) = 0;
        *(void *)(a5 + 288) = 0;
        *(_OWORD *)(a5 + 288) = *(_OWORD *)(a2 - 15);
        *(void *)(a5 + 304) = *(a2 - 13);
        *(a2 - 15) = 0;
        *(a2 - 14) = 0;
        *(a2 - 13) = 0;
        long long v33 = *((_OWORD *)a2 - 6);
        *(_OWORD *)(a5 + 321) = *(_OWORD *)((char *)a2 - 87);
        *(_OWORD *)(a5 + 312) = v33;
        long long v34 = *(_OWORD *)((char *)a2 - 68);
        *(_DWORD *)(a5 + 356) = *((_DWORD *)a2 - 13);
        *(_OWORD *)(a5 + 340) = v34;
        *(void *)(a5 + 368) = 0;
        *(void *)(a5 + 376) = 0;
        void *v21 = 0;
        *(_OWORD *)uint64_t v21 = *((_OWORD *)a2 - 3);
        *(void *)(a5 + 376) = *(a2 - 4);
        *(a2 - 6) = 0;
        *(a2 - 5) = 0;
        *(a2 - 4) = 0;
        long long v35 = *(_OWORD *)(a2 - 3);
        *(_DWORD *)(a5 + 400) = *((_DWORD *)a2 - 2);
        *(_OWORD *)(a5 + 384) = v35;
        *(_DWORD *)(a5 + 408) = *(_DWORD *)a1;
        *(void *)(a5 + 424) = 0;
        *(void *)(a5 + 432) = 0;
        *(void *)(a5 + 416) = 0;
        *(_OWORD *)(a5 + 416) = *(_OWORD *)(a1 + 8);
        *(void *)(a5 + 432) = *(void *)(a1 + 24);
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
        long long v36 = *(_OWORD *)(a1 + 32);
        long long v37 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)(a5 + 456) = *(_OWORD *)(a1 + 48);
        *(_OWORD *)(a5 + 472) = v37;
        *(_OWORD *)(a5 + 440) = v36;
        long long v38 = *(_OWORD *)(a1 + 80);
        long long v39 = *(_OWORD *)(a1 + 96);
        *(void *)(a5 + 520) = *(void *)(a1 + 112);
        *(_OWORD *)(a5 + 488) = v38;
        *(_OWORD *)(a5 + 504) = v39;
        *(void *)(a5 + 528) = 0;
        *(void *)(a5 + 544) = 0;
        *(void *)(a5 + 536) = 0;
        *(_OWORD *)(a5 + 528) = *(_OWORD *)(a1 + 120);
        *(void *)(a5 + 544) = *(void *)(a1 + 136);
        *(void *)(a1 + 120) = 0;
        *(void *)(a1 + 128) = 0;
        *(void *)(a1 + 136) = 0;
        *(void *)(a5 + 552) = 0;
        *(void *)(a5 + 560) = 0;
        *(void *)(a5 + 568) = 0;
        *(_OWORD *)(a5 + 552) = *(_OWORD *)(a1 + 144);
        *(void *)(a5 + 568) = *(void *)(a1 + 160);
        *(void *)(a1 + 144) = 0;
        *(void *)(a1 + 152) = 0;
        *(void *)(a1 + 160) = 0;
        *(_OWORD *)(a5 + 576) = *(_OWORD *)(a1 + 168);
        *(_DWORD *)(a5 + 600) = *(_DWORD *)(a1 + 192);
        if (*(_DWORD *)(a1 + 192) <= 1u) {
          *(void *)(a5 + 592) = *(void *)(a1 + 184);
        }
        *(_OWORD *)(a5 + 608) = *(_OWORD *)(a1 + 200);
        long long v40 = *(_OWORD *)(a1 + 216);
        long long v41 = *(_OWORD *)(a1 + 232);
        *(void *)(a5 + 656) = *(void *)(a1 + 248);
        *(_OWORD *)(a5 + 624) = v40;
        *(_OWORD *)(a5 + 640) = v41;
        *(void *)(a5 + 672) = 0;
        *(void *)(a5 + 680) = 0;
        void *v20 = 0;
        *(_OWORD *)uint64_t v20 = *(_OWORD *)(a1 + 256);
        *(void *)(a5 + 680) = *(void *)(a1 + 272);
        *(void *)(a1 + 264) = 0;
        *(void *)(a1 + 272) = 0;
        *(void *)(a1 + 256) = 0;
        *(unsigned char *)(a5 + 688) = *(unsigned char *)(a1 + 280);
        *(void *)(a5 + 704) = 0;
        *(void *)(a5 + 712) = 0;
        *(void *)(a5 + 696) = 0;
        *(_OWORD *)(a5 + 696) = *(_OWORD *)(a1 + 288);
        *(void *)(a5 + 712) = *(void *)(a1 + 304);
        *(void *)(a1 + 288) = 0;
        *(void *)(a1 + 296) = 0;
        *(void *)(a1 + 304) = 0;
        long long v42 = *(_OWORD *)(a1 + 312);
        *(_OWORD *)(a5 + 729) = *(_OWORD *)(a1 + 321);
        *(_OWORD *)(a5 + 720) = v42;
        long long v43 = *(_OWORD *)(a1 + 340);
        *(_DWORD *)(a5 + 764) = *(_DWORD *)(a1 + 356);
        *(_OWORD *)(a5 + 748) = v43;
        *(void *)(a5 + 768) = 0;
        *(void *)(a5 + 784) = 0;
        *(void *)(a5 + 776) = 0;
        *(_OWORD *)(a5 + 768) = *(_OWORD *)(a1 + 360);
        *(void *)(a5 + 784) = *(void *)(a1 + 376);
        *(void *)(a1 + 360) = 0;
        *(void *)(a1 + 368) = 0;
        *(void *)(a1 + 376) = 0;
        v44 = (_OWORD *)(a5 + 792);
        long long v45 = *(_OWORD *)(a1 + 384);
        int v46 = *(_DWORD *)(a1 + 400);
      }
      *(_DWORD *)(a5 + 808) = v46;
      _OWORD *v44 = v45;
    }
    else if (a4 == 1)
    {
      *(_DWORD *)a5 = *(_DWORD *)a1;
      *(void *)(a5 + 16) = 0;
      *(void *)(a5 + 24) = 0;
      *(void *)(a5 + 8) = 0;
      *(_OWORD *)(a5 + 8) = *(_OWORD *)(a1 + 8);
      *(void *)(a5 + 24) = *(void *)(a1 + 24);
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      long long v9 = *(_OWORD *)(a1 + 32);
      long long v10 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)(a5 + 48) = *(_OWORD *)(a1 + 48);
      *(_OWORD *)(a5 + 64) = v10;
      *(_OWORD *)(a5 + 32) = v9;
      long long v11 = *(_OWORD *)(a1 + 96);
      uint64_t v12 = *(void *)(a1 + 112);
      *(_OWORD *)(a5 + 80) = *(_OWORD *)(a1 + 80);
      *(_OWORD *)(a5 + 96) = v11;
      *(void *)(a5 + 112) = v12;
      *(void *)(a5 + 120) = 0;
      *(void *)(a5 + 128) = 0;
      *(void *)(a5 + 136) = 0;
      *(_OWORD *)(a5 + 120) = *(_OWORD *)(a1 + 120);
      *(void *)(a5 + 136) = *(void *)(a1 + 136);
      *(void *)(a1 + 120) = 0;
      *(void *)(a1 + 128) = 0;
      *(void *)(a1 + 136) = 0;
      *(void *)(a5 + 144) = 0;
      *(void *)(a5 + 152) = 0;
      *(void *)(a5 + 160) = 0;
      *(_OWORD *)(a5 + 144) = *(_OWORD *)(a1 + 144);
      *(void *)(a5 + 160) = *(void *)(a1 + 160);
      *(void *)(a1 + 144) = 0;
      *(void *)(a1 + 152) = 0;
      *(void *)(a1 + 160) = 0;
      *(_OWORD *)(a5 + 168) = *(_OWORD *)(a1 + 168);
      *(_DWORD *)(a5 + 192) = *(_DWORD *)(a1 + 192);
      if (*(_DWORD *)(a1 + 192) <= 1u) {
        *(void *)(a5 + 184) = *(void *)(a1 + 184);
      }
      *(_OWORD *)(a5 + 200) = *(_OWORD *)(a1 + 200);
      long long v13 = *(_OWORD *)(a1 + 216);
      uint64_t v14 = *(void *)(a1 + 248);
      *(_OWORD *)(a5 + 232) = *(_OWORD *)(a1 + 232);
      *(_OWORD *)(a5 + 216) = v13;
      *(void *)(a5 + 248) = v14;
      *(void *)(a5 + 256) = 0;
      *(void *)(a5 + 264) = 0;
      *(void *)(a5 + 272) = 0;
      *(_OWORD *)(a5 + 256) = *(_OWORD *)(a1 + 256);
      *(void *)(a5 + 272) = *(void *)(a1 + 272);
      *(void *)(a1 + 264) = 0;
      *(void *)(a1 + 272) = 0;
      *(void *)(a1 + 256) = 0;
      *(unsigned char *)(a5 + 280) = *(unsigned char *)(a1 + 280);
      *(void *)(a5 + 296) = 0;
      *(void *)(a5 + 304) = 0;
      *(void *)(a5 + 288) = 0;
      *(_OWORD *)(a5 + 288) = *(_OWORD *)(a1 + 288);
      *(void *)(a5 + 304) = *(void *)(a1 + 304);
      *(void *)(a1 + 288) = 0;
      *(void *)(a1 + 296) = 0;
      *(void *)(a1 + 304) = 0;
      long long v15 = *(_OWORD *)(a1 + 312);
      *(_OWORD *)(a5 + 321) = *(_OWORD *)(a1 + 321);
      *(_OWORD *)(a5 + 312) = v15;
      long long v16 = *(_OWORD *)(a1 + 340);
      *(_DWORD *)(a5 + 356) = *(_DWORD *)(a1 + 356);
      *(_OWORD *)(a5 + 340) = v16;
      *(void *)(a5 + 368) = 0;
      *(void *)(a5 + 376) = 0;
      *(void *)(a5 + 360) = 0;
      *(void *)(a5 + 360) = *(void *)(a1 + 360);
      *(void *)(a5 + 368) = *(void *)(a1 + 368);
      *(void *)(a5 + 376) = *(void *)(a1 + 376);
      *(void *)(a1 + 360) = 0;
      *(void *)(a1 + 368) = 0;
      *(void *)(a1 + 376) = 0;
      long long v17 = *(_OWORD *)(a1 + 384);
      *(_DWORD *)(a5 + 400) = *(_DWORD *)(a1 + 400);
      *(_OWORD *)(a5 + 384) = v17;
    }
    else if ((uint64_t)a4 > 8)
    {
      unint64_t v25 = a4 >> 1;
      uint64_t v26 = 408 * (a4 >> 1);
      sub_878764(a1, a1 + v26, a3, a4 >> 1, a5, a4 >> 1);
      sub_878764(a1 + v26, a2, a3, a4 - v25, a5 + v26, a4 - v25);
      sub_87AC40(a1, a1 + v26, a1 + v26, a2, a5);
    }
    else
    {
      sub_87A4F8(a1, a2, a5);
    }
  }
}

void sub_8798F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_879BD8((void **)va);
  _Unwind_Resume(a1);
}

__n128 sub_87990C(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((_OWORD *)a1 == a2)
  {
LABEL_15:
    while (a3 != a4)
    {
      sub_52ECD8(a5, a3);
      int v21 = *(_DWORD *)(a3 + 356);
      *(_OWORD *)(a5 + 340) = *(_OWORD *)(a3 + 340);
      *(_DWORD *)(a5 + 356) = v21;
      uint64_t v22 = *(void **)(a5 + 360);
      if (v22)
      {
        *(void *)(a5 + 368) = v22;
        operator delete(v22);
        *(void *)(a5 + 360) = 0;
        *(void *)(a5 + 368) = 0;
        *(void *)(a5 + 376) = 0;
      }
      uint64_t v20 = *(void *)(a3 + 368);
      *(void *)(a5 + 360) = *(void *)(a3 + 360);
      *(void *)(a5 + 368) = v20;
      *(void *)(a5 + 376) = *(void *)(a3 + 376);
      *(void *)(a3 + 368) = 0;
      *(void *)(a3 + 360) = 0;
      *(void *)(a3 + 376) = 0;
      __n128 result = *(__n128 *)(a3 + 384);
      *(_DWORD *)(a5 + 400) = *(_DWORD *)(a3 + 400);
      *(__n128 *)(a5 + 384) = result;
      a5 += 408;
      a3 += 408;
    }
    return result;
  }
  uint64_t v9 = a1;
  while (a3 != a4)
  {
    uint64_t v12 = sub_638A2C(a3);
    if (v12 == sub_638A2C(v9))
    {
      uint64_t v13 = sub_638A34(a3);
      if (v13 > sub_638A34(v9)) {
        goto LABEL_10;
      }
LABEL_7:
      sub_52ECD8(a5, v9);
      int v14 = *(_DWORD *)(v9 + 356);
      *(_OWORD *)(a5 + 340) = *(_OWORD *)(v9 + 340);
      *(_DWORD *)(a5 + 356) = v14;
      long long v15 = *(void **)(a5 + 360);
      if (v15)
      {
        *(void *)(a5 + 368) = v15;
        operator delete(v15);
        *(void *)(a5 + 360) = 0;
        *(void *)(a5 + 368) = 0;
        *(void *)(a5 + 376) = 0;
      }
      uint64_t v10 = *(void *)(v9 + 368);
      *(void *)(a5 + 360) = *(void *)(v9 + 360);
      *(void *)(a5 + 368) = v10;
      *(void *)(a5 + 376) = *(void *)(v9 + 376);
      *(void *)(v9 + 360) = 0;
      *(void *)(v9 + 368) = 0;
      *(void *)(v9 + 376) = 0;
      __n128 result = *(__n128 *)(v9 + 384);
      *(_DWORD *)(a5 + 400) = *(_DWORD *)(v9 + 400);
      *(__n128 *)(a5 + 384) = result;
      v9 += 408;
      a5 += 408;
      if ((_OWORD *)v9 == a2) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v16 = sub_638A2C(a3);
      if (v16 <= sub_638A2C(v9)) {
        goto LABEL_7;
      }
LABEL_10:
      sub_52ECD8(a5, a3);
      int v17 = *(_DWORD *)(a3 + 356);
      *(_OWORD *)(a5 + 340) = *(_OWORD *)(a3 + 340);
      *(_DWORD *)(a5 + 356) = v17;
      unint64_t v18 = *(void **)(a5 + 360);
      if (v18)
      {
        *(void *)(a5 + 368) = v18;
        operator delete(v18);
        *(void *)(a5 + 360) = 0;
        *(void *)(a5 + 368) = 0;
        *(void *)(a5 + 376) = 0;
      }
      uint64_t v19 = *(void *)(a3 + 368);
      *(void *)(a5 + 360) = *(void *)(a3 + 360);
      *(void *)(a5 + 368) = v19;
      *(void *)(a5 + 376) = *(void *)(a3 + 376);
      *(void *)(a3 + 360) = 0;
      *(void *)(a3 + 368) = 0;
      *(void *)(a3 + 376) = 0;
      __n128 result = *(__n128 *)(a3 + 384);
      *(_DWORD *)(a5 + 400) = *(_DWORD *)(a3 + 400);
      *(__n128 *)(a5 + 384) = result;
      a3 += 408;
      a5 += 408;
      if ((_OWORD *)v9 == a2) {
        goto LABEL_15;
      }
    }
  }
  if ((_OWORD *)v9 != a2)
  {
    uint64_t v23 = 0;
    do
    {
      uint64_t v24 = a5 + v23;
      sub_52ECD8(a5 + v23, v9 + v23);
      unint64_t v25 = (_OWORD *)(v9 + v23 + 340);
      int v26 = *(_DWORD *)(v9 + v23 + 356);
      *(_OWORD *)(v24 + 340) = *v25;
      *(_DWORD *)(v24 + 356) = v26;
      long long v27 = (void **)(a5 + v23 + 360);
      long long v28 = *v27;
      if (*v27)
      {
        *(void *)(v24 + 368) = v28;
        operator delete(v28);
        *long long v27 = 0;
        *(void *)(v24 + 368) = 0;
        *(void *)(v24 + 376) = 0;
      }
      *long long v27 = *(void **)(v9 + v23 + 360);
      *(void *)(v24 + 368) = *(void *)(v9 + v23 + 368);
      *(void *)(v24 + 376) = *(void *)(v9 + v23 + 376);
      *(void *)(v9 + v23 + 368) = 0;
      *(void *)(v9 + v23 + 360) = 0;
      *(void *)(v9 + v23 + 376) = 0;
      __n128 result = *(__n128 *)(v9 + v23 + 384);
      *(_DWORD *)(v24 + 400) = *(_DWORD *)(v9 + v23 + 400);
      *(__n128 *)(v24 + 384) = result;
      v23 += 408;
    }
    while ((_OWORD *)((char *)v25 + 68) != a2);
  }
  return result;
}

void **sub_879BD8(void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = a1[1];
    if (*v3)
    {
      unint64_t v4 = 0;
      do
      {
        uint64_t v5 = (void *)v2[45];
        if (v5)
        {
          v2[46] = v5;
          operator delete(v5);
        }
        sub_4F32CC(v2);
        ++v4;
        v2 += 51;
      }
      while (v4 < *v3);
    }
  }
  return a1;
}

void sub_879C54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8)
{
  uint64_t v62 = a6;
  if (a6)
  {
    while (1)
    {
      if (v62 <= a8 || a5 <= a8)
      {
        sub_87B37C(a1, a2, a3, a4, a5, v62, a7);
        return;
      }
      if (!a5) {
        return;
      }
      uint64_t v13 = 0;
      uint64_t v14 = -a5;
      while (1)
      {
        uint64_t v15 = sub_638A2C(a2);
        if (v15 == sub_638A2C(a1 + v13))
        {
          uint64_t v16 = sub_638A34(a2);
          if (v16 > sub_638A34(a1 + v13)) {
            break;
          }
          goto LABEL_10;
        }
        uint64_t v17 = sub_638A2C(a2);
        if (v17 > sub_638A2C(a1 + v13)) {
          break;
        }
LABEL_10:
        v13 += 408;
        if (__CFADD__(v14++, 1)) {
          return;
        }
      }
      uint64_t v19 = -v14;
      uint64_t v20 = a1 + v13;
      uint64_t v57 = a8;
      long long v58 = a7;
      uint64_t v56 = a1 + v13;
      if (-v14 >= v62) {
        break;
      }
      if (v62 >= 0) {
        uint64_t v21 = v62;
      }
      else {
        uint64_t v21 = v62 + 1;
      }
      uint64_t v22 = v21 >> 1;
      uint64_t v23 = a2 + 408 * (v21 >> 1);
      uint64_t v24 = a1 + v13;
      uint64_t v59 = v21 >> 1;
      if (a2 - a1 != v13)
      {
        unint64_t v25 = 0xFAFAFAFAFAFAFAFBLL * ((a2 - a1 - v13) >> 3);
        uint64_t v20 = a1 + v13;
        while (1)
        {
          unint64_t v26 = v25 >> 1;
          uint64_t v27 = sub_638A2C(v23);
          if (v27 == sub_638A2C(v20 + 408 * (v25 >> 1)))
          {
            uint64_t v28 = sub_638A34(v23);
            if (v28 <= sub_638A34(v20 + 408 * (v25 >> 1))) {
              goto LABEL_24;
            }
          }
          else
          {
            uint64_t v29 = sub_638A2C(v23);
            if (v29 <= sub_638A2C(v20 + 408 * (v25 >> 1)))
            {
LABEL_24:
              v20 += 408 * (v25 >> 1) + 408;
              unint64_t v26 = v25 + ~v26;
            }
          }
          unint64_t v25 = v26;
          if (!v26)
          {
            uint64_t v24 = v20;
            a7 = v58;
            uint64_t v22 = v59;
            break;
          }
        }
      }
      unint64_t v31 = 0xFAFAFAFAFAFAFAFBLL * ((v24 - a1 - v13) >> 3);
      uint64_t v32 = v23;
      if (v20 != a2) {
        goto LABEL_34;
      }
LABEL_61:
      a5 = -(uint64_t)(v31 + v14);
      uint64_t v51 = v62 - v22;
      if ((uint64_t)(v31 + v22) >= (uint64_t)(v62 - (v31 + v22) - v14))
      {
        uint64_t v52 = v24;
        a5 = v31;
        sub_879C54(v32, v23, a3, a4, -(uint64_t)(v31 + v14), v62 - v22, a7, v57);
        uint64_t v53 = v52;
        a3 = v32;
        uint64_t v62 = v22;
        a8 = v57;
        a1 = v56;
        a2 = v53;
        if (!v22) {
          return;
        }
      }
      else
      {
        sub_879C54(a1 + v13, v24, v32, a4, v31, v22, a7, v57);
        a1 = v32;
        a8 = v57;
        v62 -= v22;
        a2 = v23;
        if (!v51) {
          return;
        }
      }
    }
    if (v14 != -1)
    {
      if (v14 > 0) {
        uint64_t v19 = 1 - v14;
      }
      uint64_t v54 = v19 >> 1;
      uint64_t v64 = a1 + 408 * (v19 >> 1) + v13;
      if (a2 == a3)
      {
        uint64_t v30 = 0;
LABEL_30:
        uint64_t v59 = v30;
        uint64_t v23 = a2 + 408 * v30;
        uint64_t v22 = 0xFAFAFAFAFAFAFAFBLL * ((408 * v30) >> 3);
        unint64_t v31 = v54;
        uint64_t v24 = a1 + 408 * v54 + v13;
        a7 = v58;
        uint64_t v20 = v64;
        uint64_t v32 = v23;
        if (v64 == a2) {
          goto LABEL_61;
        }
LABEL_34:
        uint64_t v32 = v24;
        if (v59)
        {
          uint64_t v65 = v24;
          unint64_t v55 = v31;
          sub_87A1D4(v20, a2);
          uint64_t v32 = v20 + 408;
          if (v59 == 1)
          {
            uint64_t v33 = a2;
          }
          else
          {
            uint64_t v44 = a2 + 408;
            uint64_t v45 = 408 * v59 - 408;
            uint64_t v33 = a2;
            do
            {
              if (v32 == v33) {
                uint64_t v33 = v44;
              }
              sub_87A1D4(v32, v44);
              v32 += 408;
              v44 += 408;
              v45 -= 408;
            }
            while (v45);
          }
          if (v32 != v33)
          {
            uint64_t v46 = a2 + 408 * v59;
            uint64_t v47 = v32;
            uint64_t v48 = v33;
            while (1)
            {
              sub_87A1D4(v47, v48);
              v48 += 408;
              BOOL v49 = v47 + 408 == v33;
              if (v48 == v46)
              {
                if (v47 + 408 == v33) {
                  break;
                }
                uint64_t v48 = v33 + 408;
                v47 += 816;
                while (1)
                {
                  sub_87A1D4(v47 - 408, v33);
                  BOOL v49 = v47 == v33;
                  if (v48 != v46) {
                    break;
                  }
                  BOOL v50 = v47 == v33;
                  v47 += 408;
                  if (v50) {
                    goto LABEL_60;
                  }
                }
              }
              else
              {
                v47 += 408;
              }
              if (v49) {
                uint64_t v33 = v48;
              }
            }
          }
LABEL_60:
          a7 = v58;
          unint64_t v31 = v55;
          uint64_t v24 = v65;
        }
        goto LABEL_61;
      }
      uint64_t v30 = 0;
      unint64_t v34 = 0xFAFAFAFAFAFAFAFBLL * ((a3 - a2) >> 3);
      uint64_t v63 = a1;
      while (2)
      {
        unint64_t v35 = v34 >> 1;
        uint64_t v36 = v30;
        unint64_t v37 = (v34 >> 1) + v30;
        uint64_t v38 = a2 + 408 * v37;
        uint64_t v39 = sub_638A2C(v38);
        if (v39 == sub_638A2C(v64))
        {
          uint64_t v40 = sub_638A34(v38);
          uint64_t v41 = sub_638A34(v64);
          uint64_t v30 = v36;
          a1 = v63;
          if (v40 > v41)
          {
LABEL_43:
            uint64_t v30 = v37 + 1;
            unint64_t v35 = v34 + ~v35;
          }
        }
        else
        {
          uint64_t v42 = sub_638A2C(v38);
          uint64_t v43 = sub_638A2C(v64);
          uint64_t v30 = v36;
          a1 = v63;
          if (v42 > v43) {
            goto LABEL_43;
          }
        }
        unint64_t v34 = v35;
        if (!v35) {
          goto LABEL_30;
        }
        continue;
      }
    }
    sub_87A1D4(a1 + v13, a2);
  }
}

void sub_87A1D4(uint64_t a1, uint64_t a2)
{
  int v21 = *(_DWORD *)a1;
  *(_OWORD *)uint64_t v22 = *(_OWORD *)(a1 + 8);
  uint64_t v23 = *(void *)(a1 + 24);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  long long v4 = *(_OWORD *)(a1 + 48);
  long long v24 = *(_OWORD *)(a1 + 32);
  long long v25 = v4;
  long long v5 = *(_OWORD *)(a1 + 80);
  long long v26 = *(_OWORD *)(a1 + 64);
  long long v27 = v5;
  long long v28 = *(_OWORD *)(a1 + 96);
  uint64_t v29 = *(void *)(a1 + 112);
  *(_OWORD *)uint64_t v30 = *(_OWORD *)(a1 + 120);
  uint64_t v31 = *(void *)(a1 + 136);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(_OWORD *)uint64_t v32 = *(_OWORD *)(a1 + 144);
  uint64_t v33 = *(void *)(a1 + 160);
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  long long v34 = *(_OWORD *)(a1 + 168);
  unsigned int v36 = *(_DWORD *)(a1 + 192);
  if (v36 <= 1) {
    uint64_t v35 = *(void *)(a1 + 184);
  }
  long long v37 = *(_OWORD *)(a1 + 200);
  long long v38 = *(_OWORD *)(a1 + 216);
  long long v39 = *(_OWORD *)(a1 + 232);
  uint64_t v40 = *(void *)(a1 + 248);
  *(_OWORD *)uint64_t v41 = *(_OWORD *)(a1 + 256);
  uint64_t v42 = *(void *)(a1 + 272);
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  char v43 = *(unsigned char *)(a1 + 280);
  *(_OWORD *)__p = *(_OWORD *)(a1 + 288);
  uint64_t v45 = *(void *)(a1 + 304);
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  long long v6 = *(_OWORD *)(a1 + 312);
  *(_OWORD *)&v46[9] = *(_OWORD *)(a1 + 321);
  *(_OWORD *)uint64_t v46 = v6;
  int v7 = *(_DWORD *)(a1 + 356);
  long long v47 = *(_OWORD *)(a1 + 340);
  int v48 = v7;
  uint64_t v8 = (void *)(a1 + 360);
  long long v49 = *(_OWORD *)(a1 + 360);
  uint64_t v50 = *(void *)(a1 + 376);
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  long long v9 = *(_OWORD *)(a1 + 384);
  int v52 = *(_DWORD *)(a1 + 400);
  long long v51 = v9;
  sub_52ECD8(a1, a2);
  int v10 = *(_DWORD *)(a2 + 356);
  *(_OWORD *)(a1 + 340) = *(_OWORD *)(a2 + 340);
  *(_DWORD *)(a1 + 356) = v10;
  long long v11 = *(void **)(a1 + 360);
  if (v11)
  {
    *(void *)(a1 + 368) = v11;
    operator delete(v11);
    *uint64_t v8 = 0;
    *(void *)(a1 + 368) = 0;
    *(void *)(a1 + 376) = 0;
  }
  *(_OWORD *)uint64_t v8 = *(_OWORD *)(a2 + 360);
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(void *)(a2 + 360) = 0;
  *(void *)(a2 + 368) = 0;
  *(void *)(a2 + 376) = 0;
  long long v12 = *(_OWORD *)(a2 + 384);
  *(_DWORD *)(a1 + 400) = *(_DWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 384) = v12;
  sub_52ECD8(a2, (uint64_t)&v21);
  *(_OWORD *)(a2 + 340) = v47;
  *(_DWORD *)(a2 + 356) = v48;
  uint64_t v13 = *(void **)(a2 + 360);
  if (v13)
  {
    *(void *)(a2 + 368) = v13;
    operator delete(v13);
  }
  *(_OWORD *)(a2 + 360) = v49;
  uint64_t v14 = __p[0];
  *(void *)(a2 + 376) = v50;
  uint64_t v50 = 0;
  long long v49 = 0uLL;
  *(_OWORD *)(a2 + 384) = v51;
  *(_DWORD *)(a2 + 400) = v52;
  if (v14)
  {
    __p[1] = v14;
    operator delete(v14);
  }
  uint64_t v15 = (void **)v41[0];
  if (v41[0])
  {
    uint64_t v16 = (void **)v41[1];
    uint64_t v17 = v41[0];
    if (v41[1] != v41[0])
    {
      do
        uint64_t v16 = sub_4F31D0(v16 - 13);
      while (v16 != v15);
      uint64_t v17 = v41[0];
    }
    v41[1] = v15;
    operator delete(v17);
  }
  if (v32[0])
  {
    v32[1] = v32[0];
    operator delete(v32[0]);
  }
  if (v30[0])
  {
    v30[1] = v30[0];
    operator delete(v30[0]);
  }
  unint64_t v18 = v22[0];
  if (v22[0])
  {
    uint64_t v19 = v22[1];
    uint64_t v20 = v22[0];
    if (v22[1] != v22[0])
    {
      do
        uint64_t v19 = (void *)sub_4D4B58((uint64_t)v19 - 160);
      while (v19 != v18);
      uint64_t v20 = v22[0];
    }
    v22[1] = v18;
    operator delete(v20);
  }
}

__n128 sub_87A4F8(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  if ((_DWORD *)a1 != a2)
  {
    long long v4 = a2;
    long long v5 = (_DWORD *)a1;
    *(_DWORD *)a3 = *(_DWORD *)a1;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 8) = 0;
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(a1 + 8);
    *(void *)(a3 + 24) = *(void *)(a1 + 24);
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 8) = 0;
    long long v7 = *(_OWORD *)(a1 + 48);
    long long v6 = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(a3 + 32) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a3 + 48) = v7;
    *(_OWORD *)(a3 + 64) = v6;
    long long v8 = *(_OWORD *)(a1 + 96);
    uint64_t v9 = *(void *)(a1 + 112);
    *(_OWORD *)(a3 + 80) = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(a3 + 96) = v8;
    *(void *)(a3 + 128) = 0;
    *(void *)(a3 + 136) = 0;
    *(void *)(a3 + 112) = v9;
    *(void *)(a3 + 120) = 0;
    *(_OWORD *)(a3 + 120) = *(_OWORD *)(a1 + 120);
    *(void *)(a3 + 136) = *(void *)(a1 + 136);
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
    *(void *)(a3 + 152) = 0;
    *(void *)(a3 + 160) = 0;
    *(void *)(a3 + 144) = 0;
    *(_OWORD *)(a3 + 144) = *(_OWORD *)(a1 + 144);
    *(void *)(a3 + 160) = *(void *)(a1 + 160);
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = 0;
    *(_OWORD *)(a3 + 168) = *(_OWORD *)(a1 + 168);
    *(_DWORD *)(a3 + 192) = *(_DWORD *)(a1 + 192);
    if (*(_DWORD *)(a1 + 192) <= 1u) {
      *(void *)(a3 + 184) = *(void *)(a1 + 184);
    }
    *(_OWORD *)(a3 + 200) = *(_OWORD *)(a1 + 200);
    long long v10 = *(_OWORD *)(a1 + 216);
    uint64_t v11 = *(void *)(a1 + 248);
    *(_OWORD *)(a3 + 232) = *(_OWORD *)(a1 + 232);
    *(_OWORD *)(a3 + 216) = v10;
    *(void *)(a3 + 248) = v11;
    *(void *)(a3 + 256) = 0;
    *(void *)(a3 + 264) = 0;
    *(void *)(a3 + 272) = 0;
    *(_OWORD *)(a3 + 256) = *(_OWORD *)(a1 + 256);
    *(void *)(a3 + 272) = *(void *)(a1 + 272);
    *(void *)(a1 + 264) = 0;
    *(void *)(a1 + 272) = 0;
    *(void *)(a1 + 256) = 0;
    *(unsigned char *)(a3 + 280) = *(unsigned char *)(a1 + 280);
    *(void *)(a3 + 296) = 0;
    *(void *)(a3 + 304) = 0;
    *(void *)(a3 + 288) = 0;
    *(_OWORD *)(a3 + 288) = *(_OWORD *)(a1 + 288);
    *(void *)(a3 + 304) = *(void *)(a1 + 304);
    *(void *)(a1 + 288) = 0;
    *(void *)(a1 + 296) = 0;
    *(void *)(a1 + 304) = 0;
    long long v12 = *(_OWORD *)(a1 + 312);
    *(_OWORD *)(a3 + 321) = *(_OWORD *)(a1 + 321);
    *(_OWORD *)(a3 + 312) = v12;
    long long v13 = *(_OWORD *)(a1 + 340);
    *(_DWORD *)(a3 + 356) = *(_DWORD *)(a1 + 356);
    *(_OWORD *)(a3 + 340) = v13;
    *(void *)(a3 + 368) = 0;
    *(void *)(a3 + 376) = 0;
    *(void *)(a3 + 360) = 0;
    *(void *)(a3 + 360) = *(void *)(a1 + 360);
    *(void *)(a3 + 368) = *(void *)(a1 + 368);
    *(void *)(a3 + 376) = *(void *)(a1 + 376);
    *(void *)(a1 + 360) = 0;
    *(void *)(a1 + 368) = 0;
    *(void *)(a1 + 376) = 0;
    __n128 result = *(__n128 *)(a1 + 384);
    *(_DWORD *)(a3 + 400) = *(_DWORD *)(a1 + 400);
    *(__n128 *)(a3 + 384) = result;
    uint64_t v51 = 1;
    uint64_t v15 = a1 + 408;
    if ((_DWORD *)(a1 + 408) != a2)
    {
      uint64_t v16 = 0;
      uint64_t v17 = a3;
      do
      {
        while (1)
        {
          unint64_t v18 = (_DWORD *)v15;
          uint64_t v19 = sub_638A2C(v15);
          if (v19 == sub_638A2C(v17))
          {
            uint64_t v20 = sub_638A34((uint64_t)v18);
            uint64_t v21 = sub_638A34(v17);
          }
          else
          {
            uint64_t v20 = sub_638A2C((uint64_t)v18);
            uint64_t v21 = sub_638A2C(v17);
          }
          if (v20 > v21) {
            break;
          }
          *(_DWORD *)(v17 + 408) = *v18;
          *(void *)(v17 + 424) = 0;
          *(void *)(v17 + 432) = 0;
          *(void *)(v17 + 416) = 0;
          *(_OWORD *)(v17 + 416) = *((_OWORD *)v5 + 26);
          *(void *)(v17 + 432) = *((void *)v5 + 54);
          *((void *)v5 + 52) = 0;
          *((void *)v5 + 53) = 0;
          *((void *)v5 + 54) = 0;
          long long v39 = *(_OWORD *)(v5 + 110);
          long long v40 = *(_OWORD *)(v5 + 118);
          *(_OWORD *)(v17 + 456) = *(_OWORD *)(v5 + 114);
          *(_OWORD *)(v17 + 472) = v40;
          *(_OWORD *)(v17 + 440) = v39;
          long long v41 = *(_OWORD *)(v5 + 122);
          long long v42 = *(_OWORD *)(v5 + 126);
          *(void *)(v17 + 520) = *((void *)v5 + 65);
          *(_OWORD *)(v17 + 488) = v41;
          *(_OWORD *)(v17 + 504) = v42;
          *(void *)(v17 + 528) = 0;
          *(void *)(v17 + 544) = 0;
          *(void *)(v17 + 536) = 0;
          *(_OWORD *)(v17 + 528) = *((_OWORD *)v5 + 33);
          *(void *)(v17 + 544) = *((void *)v5 + 68);
          *((void *)v5 + 67) = 0;
          *((void *)v5 + 66) = 0;
          *((void *)v5 + 68) = 0;
          *(void *)(v17 + 560) = 0;
          *(void *)(v17 + 552) = 0;
          *(void *)(v17 + 568) = 0;
          *(void *)(v17 + 552) = *((void *)v5 + 69);
          *(void *)(v17 + 560) = *((void *)v5 + 70);
          *(void *)(v17 + 568) = *((void *)v5 + 71);
          *((void *)v5 + 70) = 0;
          *((void *)v5 + 69) = 0;
          *((void *)v5 + 71) = 0;
          *(_OWORD *)(v17 + 576) = *((_OWORD *)v5 + 36);
          *(_DWORD *)(v17 + 600) = v5[150];
          if (v5[150] <= 1u) {
            *(void *)(v17 + 592) = *((void *)v5 + 74);
          }
          *(_OWORD *)(v17 + 608) = *((_OWORD *)v5 + 38);
          long long v43 = *((_OWORD *)v5 + 39);
          long long v44 = *((_OWORD *)v5 + 40);
          *(void *)(v17 + 656) = *((void *)v5 + 82);
          *(_OWORD *)(v17 + 624) = v43;
          *(_OWORD *)(v17 + 640) = v44;
          *(void *)(v17 + 664) = 0;
          *(void *)(v17 + 680) = 0;
          *(void *)(v17 + 672) = 0;
          *(void *)(v17 + 664) = *((void *)v5 + 83);
          *(void *)(v17 + 672) = *((void *)v5 + 84);
          *(void *)(v17 + 680) = *((void *)v5 + 85);
          *((void *)v5 + 85) = 0;
          *((void *)v5 + 84) = 0;
          *((void *)v5 + 83) = 0;
          *(unsigned char *)(v17 + 688) = *((unsigned char *)v5 + 688);
          *(void *)(v17 + 704) = 0;
          *(void *)(v17 + 712) = 0;
          *(void *)(v17 + 696) = 0;
          *(void *)(v17 + 696) = *((void *)v5 + 87);
          *(void *)(v17 + 704) = *((void *)v5 + 88);
          *(void *)(v17 + 712) = *((void *)v5 + 89);
          *((void *)v5 + 88) = 0;
          *((void *)v5 + 87) = 0;
          *((void *)v5 + 89) = 0;
          long long v45 = *((_OWORD *)v5 + 45);
          *(_OWORD *)(v17 + 729) = *(_OWORD *)((char *)v5 + 729);
          *(_OWORD *)(v17 + 720) = v45;
          long long v46 = *(_OWORD *)(v5 + 187);
          *(_DWORD *)(v17 + 764) = v5[191];
          *(_OWORD *)(v17 + 748) = v46;
          *(void *)(v17 + 768) = 0;
          *(void *)(v17 + 784) = 0;
          *(void *)(v17 + 776) = 0;
          *(_OWORD *)(v17 + 768) = *((_OWORD *)v5 + 48);
          *(void *)(v17 + 784) = *((void *)v5 + 98);
          *((void *)v5 + 97) = 0;
          *((void *)v5 + 96) = 0;
          *((void *)v5 + 98) = 0;
          __n128 result = *(__n128 *)(v5 + 198);
          *(_DWORD *)(v17 + 808) = v5[202];
          *(__n128 *)(v17 + 792) = result;
          ++v51;
          v17 += 408;
          uint64_t v15 = (uint64_t)(v18 + 102);
          v16 += 408;
          long long v5 = v18;
          if (v18 + 102 == v4) {
            return result;
          }
        }
        uint64_t v22 = (_OWORD *)(v17 + 360);
        *(_DWORD *)(v17 + 408) = *(_DWORD *)v17;
        *(_OWORD *)(v17 + 416) = *(_OWORD *)(v17 + 8);
        *(void *)(v17 + 432) = *(void *)(v17 + 24);
        *(void *)(v17 + 8) = 0;
        *(void *)(v17 + 16) = 0;
        *(void *)(v17 + 24) = 0;
        long long v23 = *(_OWORD *)(v17 + 48);
        *(_OWORD *)(v17 + 440) = *(_OWORD *)(v17 + 32);
        *(_OWORD *)(v17 + 456) = v23;
        long long v24 = *(_OWORD *)(v17 + 96);
        *(_OWORD *)(v17 + 488) = *(_OWORD *)(v17 + 80);
        *(_OWORD *)(v17 + 504) = v24;
        long long v25 = *(_OWORD *)(v17 + 64);
        *(void *)(v17 + 520) = *(void *)(v17 + 112);
        *(_OWORD *)(v17 + 472) = v25;
        *(_OWORD *)(v17 + 528) = *(_OWORD *)(v17 + 120);
        *(void *)(v17 + 544) = *(void *)(v17 + 136);
        *(void *)(v17 + 120) = 0;
        *(void *)(v17 + 128) = 0;
        *(_OWORD *)(v17 + 552) = *(_OWORD *)(v17 + 144);
        *(void *)(v17 + 568) = *(void *)(v17 + 160);
        *(void *)(v17 + 136) = 0;
        *(void *)(v17 + 144) = 0;
        *(void *)(v17 + 152) = 0;
        *(void *)(v17 + 160) = 0;
        *(_OWORD *)(v17 + 576) = *(_OWORD *)(v17 + 168);
        unsigned int v26 = *(_DWORD *)(v17 + 192);
        *(_DWORD *)(v17 + 600) = v26;
        if (v26 <= 1) {
          *(void *)(v17 + 592) = *(void *)(v17 + 184);
        }
        long long v27 = *(_OWORD *)(v17 + 216);
        *(_OWORD *)(v17 + 608) = *(_OWORD *)(v17 + 200);
        *(_OWORD *)(v17 + 624) = v27;
        *(_OWORD *)(v17 + 640) = *(_OWORD *)(v17 + 232);
        *(void *)(v17 + 656) = *(void *)(v17 + 248);
        *(_OWORD *)(v17 + 664) = *(_OWORD *)(v17 + 256);
        *(void *)(v17 + 680) = *(void *)(v17 + 272);
        *(void *)(v17 + 256) = 0;
        *(void *)(v17 + 264) = 0;
        *(void *)(v17 + 272) = 0;
        *(unsigned char *)(v17 + 688) = *(unsigned char *)(v17 + 280);
        *(_OWORD *)(v17 + 696) = *(_OWORD *)(v17 + 288);
        *(void *)(v17 + 712) = *(void *)(v17 + 304);
        *(void *)(v17 + 288) = 0;
        *(void *)(v17 + 296) = 0;
        *(void *)(v17 + 304) = 0;
        long long v28 = *(_OWORD *)(v17 + 312);
        *(_OWORD *)(v17 + 729) = *(_OWORD *)(v17 + 321);
        *(_OWORD *)(v17 + 720) = v28;
        long long v29 = *(_OWORD *)(v17 + 340);
        *(_DWORD *)(v17 + 764) = *(_DWORD *)(v17 + 356);
        *(_OWORD *)(v17 + 748) = v29;
        *(_OWORD *)(v17 + 768) = *v22;
        *(void *)(v17 + 784) = *(void *)(v17 + 376);
        *(void *)uint64_t v22 = 0;
        *(void *)(v17 + 368) = 0;
        *(void *)(v17 + 376) = 0;
        long long v30 = *(_OWORD *)(v17 + 384);
        *(_DWORD *)(v17 + 808) = *(_DWORD *)(v17 + 400);
        *(_OWORD *)(v17 + 792) = v30;
        uint64_t v31 = a3;
        ++v51;
        if (v17 == a3) {
          goto LABEL_29;
        }
        uint64_t v32 = v16;
        uint64_t v31 = v17;
        while (1)
        {
          uint64_t v33 = sub_638A2C((uint64_t)v18);
          if (v33 == sub_638A2C(a3 + v32 - 408))
          {
            uint64_t v34 = sub_638A34((uint64_t)v18);
            if (v34 <= sub_638A34(a3 + v32 - 408)) {
              goto LABEL_28;
            }
            goto LABEL_20;
          }
          uint64_t v35 = sub_638A2C((uint64_t)v18);
          if (v35 <= sub_638A2C(a3 + v32 - 408)) {
            break;
          }
LABEL_20:
          sub_52ECD8(a3 + v32, a3 + v32 - 408);
          uint64_t v36 = a3 + v32;
          *(_OWORD *)(a3 + v32 + 340) = *(_OWORD *)(a3 + v32 - 68);
          *(_DWORD *)(a3 + v32 + 356) = *(_DWORD *)(a3 + v32 - 52);
          long long v37 = (void **)(a3 + v32 + 360);
          long long v38 = *v37;
          if (*v37)
          {
            *(void *)(v36 + 368) = v38;
            operator delete(v38);
            void *v37 = 0;
            *(void *)(a3 + v32 + 368) = 0;
            *(void *)(a3 + v32 + 376) = 0;
          }
          v31 -= 408;
          *(_OWORD *)long long v37 = *(_OWORD *)(v36 - 48);
          *(void *)(v36 + 376) = *(void *)(v36 - 32);
          *(void *)(v36 - 40) = 0;
          *(void *)(v36 - 32) = 0;
          *(void *)(v36 - 48) = 0;
          *(_OWORD *)(v36 + 384) = *(_OWORD *)(v36 - 24);
          *(_DWORD *)(v36 + 400) = *(_DWORD *)(v36 - 8);
          v32 -= 408;
          if (!v32)
          {
            uint64_t v31 = a3;
            goto LABEL_28;
          }
        }
        uint64_t v31 = a3 + v32;
LABEL_28:
        long long v4 = a2;
LABEL_29:
        sub_52ECD8(v31, (uint64_t)v18);
        int v47 = v5[191];
        *(_OWORD *)(v31 + 340) = *(_OWORD *)(v5 + 187);
        *(_DWORD *)(v31 + 356) = v47;
        int v48 = (void *)(v31 + 360);
        long long v49 = *(void **)(v31 + 360);
        if (v49)
        {
          *(void *)(v31 + 368) = v49;
          operator delete(v49);
          void *v48 = 0;
          *(void *)(v31 + 368) = 0;
          *(void *)(v31 + 376) = 0;
        }
        *(_OWORD *)int v48 = *((_OWORD *)v5 + 48);
        *(void *)(v31 + 376) = *((void *)v5 + 98);
        *((void *)v5 + 97) = 0;
        *((void *)v5 + 96) = 0;
        *((void *)v5 + 98) = 0;
        __n128 result = *(__n128 *)(v5 + 198);
        *(_DWORD *)(v31 + 400) = v5[202];
        *(__n128 *)(v31 + 384) = result;
        v17 += 408;
        uint64_t v15 = (uint64_t)(v18 + 102);
        v16 += 408;
        long long v5 = v18;
      }
      while (v18 + 102 != v4);
    }
  }
  return result;
}

void sub_87AC18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_879BD8((void **)va);
  _Unwind_Resume(a1);
}

void sub_87AC2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_879BD8((void **)va);
  _Unwind_Resume(a1);
}

__n128 sub_87AC40(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v54 = 0;
  if (a1 == a2)
  {
LABEL_23:
    if ((void *)a3 != a4)
    {
      uint64_t v42 = a5 + 184;
      uint64_t v43 = a3 + 184;
      do
      {
        int v48 = (void *)(v43 - 184);
        *(_DWORD *)(v42 - 184) = *(_DWORD *)(v43 - 184);
        uint64_t v49 = v42 - 184;
        *(void *)(v49 + 16) = 0;
        *(void *)(v49 + 24) = 0;
        *(void *)(v49 + 8) = 0;
        *(_OWORD *)(v49 + 8) = *(_OWORD *)(v43 - 176);
        *(void *)(v49 + 24) = *(void *)(v43 - 160);
        v48[1] = 0;
        v48[2] = 0;
        v48[3] = 0;
        long long v50 = *(_OWORD *)(v43 - 152);
        long long v51 = *(_OWORD *)(v43 - 120);
        *(_OWORD *)(v49 + 48) = *(_OWORD *)(v43 - 136);
        *(_OWORD *)(v49 + 64) = v51;
        *(_OWORD *)(v49 + 32) = v50;
        long long v52 = *(_OWORD *)(v43 - 88);
        uint64_t v53 = *(void *)(v43 - 72);
        *(_OWORD *)(v49 + 80) = *(_OWORD *)(v43 - 104);
        *(_OWORD *)(v49 + 96) = v52;
        *(void *)(v49 + 112) = v53;
        *(void *)(v49 + 120) = 0;
        *(void *)(v49 + 128) = 0;
        *(void *)(v49 + 136) = 0;
        *(_OWORD *)(v49 + 120) = *(_OWORD *)(v43 - 64);
        *(void *)(v49 + 136) = *(void *)(v43 - 48);
        v48[15] = 0;
        v48[16] = 0;
        v48[17] = 0;
        *(void *)(v49 + 144) = 0;
        *(void *)(v49 + 152) = 0;
        *(void *)(v49 + 160) = 0;
        *(_OWORD *)(v49 + 144) = *(_OWORD *)(v43 - 40);
        *(void *)(v49 + 160) = *(void *)(v43 - 24);
        v48[18] = 0;
        v48[19] = 0;
        v48[20] = 0;
        *(_OWORD *)(v49 + 168) = *(_OWORD *)(v43 - 16);
        *(_DWORD *)(v42 + 8) = *(_DWORD *)(v43 + 8);
        if (*(_DWORD *)(v43 + 8) < 2u) {
          *(void *)uint64_t v42 = *(void *)v43;
        }
        *(_OWORD *)(v42 + 16) = *(_OWORD *)(v43 + 16);
        long long v44 = *(_OWORD *)(v43 + 32);
        uint64_t v45 = *(void *)(v43 + 64);
        *(_OWORD *)(v42 + 48) = *(_OWORD *)(v43 + 48);
        *(_OWORD *)(v42 + 32) = v44;
        *(void *)(v42 + 64) = v45;
        *(void *)(v42 + 72) = 0;
        *(void *)(v42 + 80) = 0;
        *(void *)(v42 + 88) = 0;
        *(_OWORD *)(v42 + 72) = *(_OWORD *)(v43 + 72);
        *(void *)(v42 + 88) = *(void *)(v43 + 88);
        *(void *)(v43 + 80) = 0;
        *(void *)(v43 + 88) = 0;
        *(void *)(v43 + 72) = 0;
        *(unsigned char *)(v42 + 96) = *(unsigned char *)(v43 + 96);
        *(void *)(v42 + 112) = 0;
        *(void *)(v42 + 120) = 0;
        *(void *)(v42 + 104) = 0;
        *(_OWORD *)(v42 + 104) = *(_OWORD *)(v43 + 104);
        *(void *)(v42 + 120) = *(void *)(v43 + 120);
        *(void *)(v43 + 104) = 0;
        *(void *)(v43 + 112) = 0;
        *(void *)(v43 + 120) = 0;
        long long v46 = *(_OWORD *)(v43 + 128);
        *(_OWORD *)(v42 + 137) = *(_OWORD *)(v43 + 137);
        *(_OWORD *)(v42 + 128) = v46;
        long long v47 = *(_OWORD *)(v43 + 156);
        *(_DWORD *)(v42 + 172) = *(_DWORD *)(v43 + 172);
        *(_OWORD *)(v42 + 156) = v47;
        *(void *)(v42 + 184) = 0;
        *(void *)(v42 + 192) = 0;
        *(void *)(v42 + 176) = 0;
        *(void *)(v42 + 176) = *(void *)(v43 + 176);
        *(void *)(v42 + 184) = *(void *)(v43 + 184);
        *(void *)(v42 + 192) = *(void *)(v43 + 192);
        *(void *)(v43 + 176) = 0;
        *(void *)(v43 + 184) = 0;
        *(void *)(v43 + 192) = 0;
        __n128 result = *(__n128 *)(v43 + 200);
        *(_DWORD *)(v42 + 216) = *(_DWORD *)(v43 + 216);
        *(__n128 *)(v42 + 200) = result;
        v42 += 408;
        v43 += 408;
      }
      while (v48 + 51 != a4);
    }
  }
  else
  {
    uint64_t v8 = a1;
    uint64_t v9 = a5 + 192;
    while ((void *)a3 != a4)
    {
      uint64_t v15 = sub_638A2C(a3);
      if (v15 == sub_638A2C(v8))
      {
        uint64_t v16 = sub_638A34(a3);
        uint64_t v17 = sub_638A34(v8);
      }
      else
      {
        uint64_t v16 = sub_638A2C(a3);
        uint64_t v17 = sub_638A2C(v8);
      }
      if (v16 <= v17)
      {
        *(_DWORD *)(v9 - 192) = *(_DWORD *)v8;
        *(void *)(v9 - 176) = 0;
        *(void *)(v9 - 168) = 0;
        *(void *)(v9 - 184) = 0;
        *(_OWORD *)(v9 - 184) = *(_OWORD *)(v8 + 8);
        *(void *)(v9 - 168) = *(void *)(v8 + 24);
        *(void *)(v8 + 8) = 0;
        *(void *)(v8 + 16) = 0;
        *(void *)(v8 + 24) = 0;
        long long v26 = *(_OWORD *)(v8 + 32);
        long long v27 = *(_OWORD *)(v8 + 64);
        *(_OWORD *)(v9 - 144) = *(_OWORD *)(v8 + 48);
        *(_OWORD *)(v9 - 128) = v27;
        *(_OWORD *)(v9 - 160) = v26;
        long long v28 = *(_OWORD *)(v8 + 96);
        uint64_t v29 = *(void *)(v8 + 112);
        *(_OWORD *)(v9 - 112) = *(_OWORD *)(v8 + 80);
        *(_OWORD *)(v9 - 96) = v28;
        *(void *)(v9 - 80) = v29;
        *(void *)(v9 - 72) = 0;
        *(void *)(v9 - 64) = 0;
        *(void *)(v9 - 56) = 0;
        *(_OWORD *)(v9 - 72) = *(_OWORD *)(v8 + 120);
        *(void *)(v9 - 56) = *(void *)(v8 + 136);
        *(void *)(v8 + 120) = 0;
        *(void *)(v8 + 128) = 0;
        *(void *)(v8 + 136) = 0;
        *(void *)(v9 - 48) = 0;
        *(void *)(v9 - 40) = 0;
        *(void *)(v9 - 32) = 0;
        *(_OWORD *)(v9 - 48) = *(_OWORD *)(v8 + 144);
        *(void *)(v9 - 32) = *(void *)(v8 + 160);
        *(void *)(v8 + 144) = 0;
        *(void *)(v8 + 152) = 0;
        *(void *)(v8 + 160) = 0;
        *(_OWORD *)(v9 - 24) = *(_OWORD *)(v8 + 168);
        *(_DWORD *)uint64_t v9 = *(_DWORD *)(v8 + 192);
        if (*(_DWORD *)(v8 + 192) < 2u) {
          *(void *)(v9 - 8) = *(void *)(v8 + 184);
        }
        *(_OWORD *)(v9 + 8) = *(_OWORD *)(v8 + 200);
        long long v10 = *(_OWORD *)(v8 + 216);
        uint64_t v11 = *(void *)(v8 + 248);
        *(_OWORD *)(v9 + 40) = *(_OWORD *)(v8 + 232);
        *(_OWORD *)(v9 + 24) = v10;
        *(void *)(v9 + 56) = v11;
        *(void *)(v9 + 64) = 0;
        *(void *)(v9 + 72) = 0;
        *(void *)(v9 + 80) = 0;
        *(_OWORD *)(v9 + 64) = *(_OWORD *)(v8 + 256);
        *(void *)(v9 + 80) = *(void *)(v8 + 272);
        *(void *)(v8 + 264) = 0;
        *(void *)(v8 + 272) = 0;
        *(void *)(v8 + 256) = 0;
        *(unsigned char *)(v9 + 88) = *(unsigned char *)(v8 + 280);
        *(void *)(v9 + 104) = 0;
        *(void *)(v9 + 112) = 0;
        *(void *)(v9 + 96) = 0;
        *(_OWORD *)(v9 + 96) = *(_OWORD *)(v8 + 288);
        *(void *)(v9 + 112) = *(void *)(v8 + 304);
        *(void *)(v8 + 288) = 0;
        *(void *)(v8 + 296) = 0;
        *(void *)(v8 + 304) = 0;
        long long v12 = *(_OWORD *)(v8 + 312);
        *(_OWORD *)(v9 + 129) = *(_OWORD *)(v8 + 321);
        *(_OWORD *)(v9 + 120) = v12;
        long long v13 = *(_OWORD *)(v8 + 340);
        *(_DWORD *)(v9 + 164) = *(_DWORD *)(v8 + 356);
        *(_OWORD *)(v9 + 148) = v13;
        *(void *)(v9 + 176) = 0;
        *(void *)(v9 + 184) = 0;
        *(void *)(v9 + 168) = 0;
        *(void *)(v9 + 168) = *(void *)(v8 + 360);
        *(void *)(v9 + 176) = *(void *)(v8 + 368);
        *(void *)(v9 + 184) = *(void *)(v8 + 376);
        *(void *)(v8 + 360) = 0;
        *(void *)(v8 + 368) = 0;
        *(void *)(v8 + 376) = 0;
        __n128 result = *(__n128 *)(v8 + 384);
        *(_DWORD *)(v9 + 208) = *(_DWORD *)(v8 + 400);
        *(__n128 *)(v9 + 192) = result;
        ++v54;
        v8 += 408;
        v9 += 408;
        if (v8 == a2)
        {
LABEL_22:
          a5 = v9 - 192;
          goto LABEL_23;
        }
      }
      else
      {
        *(_DWORD *)(v9 - 192) = *(_DWORD *)a3;
        *(void *)(v9 - 176) = 0;
        *(void *)(v9 - 168) = 0;
        *(void *)(v9 - 184) = 0;
        *(_OWORD *)(v9 - 184) = *(_OWORD *)(a3 + 8);
        *(void *)(v9 - 168) = *(void *)(a3 + 24);
        *(void *)(a3 + 8) = 0;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = 0;
        long long v18 = *(_OWORD *)(a3 + 32);
        long long v19 = *(_OWORD *)(a3 + 64);
        *(_OWORD *)(v9 - 144) = *(_OWORD *)(a3 + 48);
        *(_OWORD *)(v9 - 128) = v19;
        *(_OWORD *)(v9 - 160) = v18;
        long long v20 = *(_OWORD *)(a3 + 96);
        uint64_t v21 = *(void *)(a3 + 112);
        *(_OWORD *)(v9 - 112) = *(_OWORD *)(a3 + 80);
        *(_OWORD *)(v9 - 96) = v20;
        *(void *)(v9 - 80) = v21;
        *(void *)(v9 - 72) = 0;
        *(void *)(v9 - 64) = 0;
        *(void *)(v9 - 56) = 0;
        *(_OWORD *)(v9 - 72) = *(_OWORD *)(a3 + 120);
        *(void *)(v9 - 56) = *(void *)(a3 + 136);
        *(void *)(a3 + 120) = 0;
        *(void *)(a3 + 128) = 0;
        *(void *)(a3 + 136) = 0;
        *(void *)(v9 - 48) = 0;
        *(void *)(v9 - 40) = 0;
        *(void *)(v9 - 32) = 0;
        *(_OWORD *)(v9 - 48) = *(_OWORD *)(a3 + 144);
        *(void *)(v9 - 32) = *(void *)(a3 + 160);
        *(void *)(a3 + 144) = 0;
        *(void *)(a3 + 152) = 0;
        *(void *)(a3 + 160) = 0;
        *(_OWORD *)(v9 - 24) = *(_OWORD *)(a3 + 168);
        *(_DWORD *)uint64_t v9 = *(_DWORD *)(a3 + 192);
        if (*(_DWORD *)(a3 + 192) <= 1u) {
          *(void *)(v9 - 8) = *(void *)(a3 + 184);
        }
        *(_OWORD *)(v9 + 8) = *(_OWORD *)(a3 + 200);
        long long v22 = *(_OWORD *)(a3 + 216);
        uint64_t v23 = *(void *)(a3 + 248);
        *(_OWORD *)(v9 + 40) = *(_OWORD *)(a3 + 232);
        *(_OWORD *)(v9 + 24) = v22;
        *(void *)(v9 + 56) = v23;
        *(void *)(v9 + 64) = 0;
        *(void *)(v9 + 72) = 0;
        *(void *)(v9 + 80) = 0;
        *(_OWORD *)(v9 + 64) = *(_OWORD *)(a3 + 256);
        *(void *)(v9 + 80) = *(void *)(a3 + 272);
        *(void *)(a3 + 264) = 0;
        *(void *)(a3 + 272) = 0;
        *(void *)(a3 + 256) = 0;
        *(unsigned char *)(v9 + 88) = *(unsigned char *)(a3 + 280);
        *(void *)(v9 + 104) = 0;
        *(void *)(v9 + 112) = 0;
        *(void *)(v9 + 96) = 0;
        *(_OWORD *)(v9 + 96) = *(_OWORD *)(a3 + 288);
        *(void *)(v9 + 112) = *(void *)(a3 + 304);
        *(void *)(a3 + 288) = 0;
        *(void *)(a3 + 296) = 0;
        *(void *)(a3 + 304) = 0;
        long long v24 = *(_OWORD *)(a3 + 312);
        *(_OWORD *)(v9 + 129) = *(_OWORD *)(a3 + 321);
        *(_OWORD *)(v9 + 120) = v24;
        long long v25 = *(_OWORD *)(a3 + 340);
        *(_DWORD *)(v9 + 164) = *(_DWORD *)(a3 + 356);
        *(_OWORD *)(v9 + 148) = v25;
        *(void *)(v9 + 176) = 0;
        *(void *)(v9 + 184) = 0;
        *(void *)(v9 + 168) = 0;
        *(void *)(v9 + 168) = *(void *)(a3 + 360);
        *(void *)(v9 + 176) = *(void *)(a3 + 368);
        *(void *)(v9 + 184) = *(void *)(a3 + 376);
        *(void *)(a3 + 360) = 0;
        *(void *)(a3 + 368) = 0;
        *(void *)(a3 + 376) = 0;
        __n128 result = *(__n128 *)(a3 + 384);
        *(_DWORD *)(v9 + 208) = *(_DWORD *)(a3 + 400);
        *(__n128 *)(v9 + 192) = result;
        ++v54;
        a3 += 408;
        v9 += 408;
        if (v8 == a2) {
          goto LABEL_22;
        }
      }
    }
    if (v8 != a2)
    {
      uint64_t v30 = 0;
      do
      {
        uint64_t v36 = (_DWORD *)(v9 + v30);
        uint64_t v37 = v8 + v30;
        *(v36 - 48) = *(_DWORD *)(v8 + v30);
        *((void *)v36 - 22) = 0;
        *((void *)v36 - 21) = 0;
        *((void *)v36 - 23) = 0;
        *(_OWORD *)(v36 - 46) = *(_OWORD *)(v8 + v30 + 8);
        *((void *)v36 - 21) = *(void *)(v8 + v30 + 24);
        *(void *)(v37 + 8) = 0;
        *(void *)(v37 + 16) = 0;
        *(void *)(v37 + 24) = 0;
        long long v38 = *(_OWORD *)(v8 + v30 + 32);
        long long v39 = *(_OWORD *)(v8 + v30 + 64);
        *((_OWORD *)v36 - 9) = *(_OWORD *)(v8 + v30 + 48);
        *((_OWORD *)v36 - 8) = v39;
        *((_OWORD *)v36 - 10) = v38;
        long long v40 = *(_OWORD *)(v8 + v30 + 96);
        uint64_t v41 = *(void *)(v8 + v30 + 112);
        *((_OWORD *)v36 - 7) = *(_OWORD *)(v8 + v30 + 80);
        *((_OWORD *)v36 - 6) = v40;
        *((void *)v36 - 10) = v41;
        *((void *)v36 - 9) = 0;
        *((void *)v36 - 8) = 0;
        *((void *)v36 - 7) = 0;
        *(_OWORD *)(v36 - 18) = *(_OWORD *)(v8 + v30 + 120);
        *((void *)v36 - 7) = *(void *)(v8 + v30 + 136);
        *(void *)(v37 + 120) = 0;
        *(void *)(v37 + 128) = 0;
        *(void *)(v37 + 136) = 0;
        *((void *)v36 - 6) = 0;
        *((void *)v36 - 5) = 0;
        *((void *)v36 - 4) = 0;
        *((_OWORD *)v36 - 3) = *(_OWORD *)(v8 + v30 + 144);
        *((void *)v36 - 4) = *(void *)(v8 + v30 + 160);
        *(void *)(v37 + 144) = 0;
        *(void *)(v37 + 152) = 0;
        *(void *)(v37 + 160) = 0;
        *(_OWORD *)(v36 - 6) = *(_OWORD *)(v8 + v30 + 168);
        _DWORD *v36 = *(_DWORD *)(v8 + v30 + 192);
        if (*(_DWORD *)(v8 + v30 + 192) < 2u) {
          *((void *)v36 - 1) = *(void *)(v37 + 184);
        }
        uint64_t v31 = v9 + v30;
        *(_OWORD *)(v31 + 8) = *(_OWORD *)(v37 + 200);
        long long v32 = *(_OWORD *)(v37 + 216);
        uint64_t v33 = *(void *)(v37 + 248);
        *(_OWORD *)(v31 + 40) = *(_OWORD *)(v37 + 232);
        *(_OWORD *)(v31 + 24) = v32;
        *(void *)(v31 + 56) = v33;
        *(void *)(v31 + 64) = 0;
        *(void *)(v31 + 72) = 0;
        *(void *)(v31 + 80) = 0;
        *(_OWORD *)(v31 + 64) = *(_OWORD *)(v37 + 256);
        *(void *)(v31 + 80) = *(void *)(v37 + 272);
        *(void *)(v37 + 264) = 0;
        *(void *)(v37 + 272) = 0;
        *(void *)(v37 + 256) = 0;
        *(unsigned char *)(v31 + 88) = *(unsigned char *)(v37 + 280);
        *(void *)(v31 + 104) = 0;
        *(void *)(v31 + 112) = 0;
        *(void *)(v31 + 96) = 0;
        *(_OWORD *)(v31 + 96) = *(_OWORD *)(v37 + 288);
        *(void *)(v31 + 112) = *(void *)(v37 + 304);
        *(void *)(v37 + 288) = 0;
        *(void *)(v37 + 296) = 0;
        *(void *)(v37 + 304) = 0;
        long long v34 = *(_OWORD *)(v37 + 312);
        *(_OWORD *)(v31 + 129) = *(_OWORD *)(v37 + 321);
        *(_OWORD *)(v31 + 120) = v34;
        long long v35 = *(_OWORD *)(v37 + 340);
        *(_DWORD *)(v31 + 164) = *(_DWORD *)(v37 + 356);
        *(_OWORD *)(v31 + 148) = v35;
        *(void *)(v31 + 176) = 0;
        *(void *)(v31 + 184) = 0;
        *(void *)(v31 + 168) = 0;
        *(void *)(v31 + 168) = *(void *)(v37 + 360);
        *(void *)(v31 + 176) = *(void *)(v37 + 368);
        *(void *)(v31 + 184) = *(void *)(v37 + 376);
        *(void *)(v37 + 360) = 0;
        *(void *)(v37 + 368) = 0;
        *(void *)(v37 + 376) = 0;
        __n128 result = *(__n128 *)(v37 + 384);
        *(_DWORD *)(v31 + 208) = *(_DWORD *)(v37 + 400);
        *(__n128 *)(v31 + 192) = result;
        v30 += 408;
      }
      while (v37 + 408 != a2);
    }
  }
  return result;
}

void sub_87B368(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_879BD8((void **)va);
  _Unwind_Resume(a1);
}

void sub_87B37C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  unint64_t v38 = 0;
  if (a5 > a6)
  {
    uint64_t v10 = (uint64_t)a7;
    if (a2 != a3)
    {
      unint64_t v11 = 0;
      uint64_t v12 = a2 + 184;
      uint64_t v10 = (uint64_t)a7;
      do
      {
        long long v18 = (void *)(v12 - 184);
        *(_DWORD *)uint64_t v10 = *(_DWORD *)(v12 - 184);
        *(void *)(v10 + 16) = 0;
        *(void *)(v10 + 24) = 0;
        *(void *)(v10 + 8) = 0;
        *(_OWORD *)(v10 + 8) = *(_OWORD *)(v12 - 176);
        *(void *)(v10 + 24) = *(void *)(v12 - 160);
        v18[1] = 0;
        v18[2] = 0;
        v18[3] = 0;
        long long v19 = *(_OWORD *)(v12 - 152);
        long long v20 = *(_OWORD *)(v12 - 120);
        *(_OWORD *)(v10 + 48) = *(_OWORD *)(v12 - 136);
        *(_OWORD *)(v10 + 64) = v20;
        *(_OWORD *)(v10 + 32) = v19;
        long long v21 = *(_OWORD *)(v12 - 88);
        uint64_t v22 = *(void *)(v12 - 72);
        *(_OWORD *)(v10 + 80) = *(_OWORD *)(v12 - 104);
        *(_OWORD *)(v10 + 96) = v21;
        *(void *)(v10 + 112) = v22;
        *(void *)(v10 + 120) = 0;
        *(void *)(v10 + 128) = 0;
        *(void *)(v10 + 136) = 0;
        *(_OWORD *)(v10 + 120) = *(_OWORD *)(v12 - 64);
        *(void *)(v10 + 136) = *(void *)(v12 - 48);
        v18[15] = 0;
        v18[16] = 0;
        v18[17] = 0;
        *(void *)(v10 + 144) = 0;
        *(void *)(v10 + 152) = 0;
        *(void *)(v10 + 160) = 0;
        *(_OWORD *)(v10 + 144) = *(_OWORD *)(v12 - 40);
        *(void *)(v10 + 160) = *(void *)(v12 - 24);
        v18[18] = 0;
        v18[19] = 0;
        v18[20] = 0;
        *(_OWORD *)(v10 + 168) = *(_OWORD *)(v12 - 16);
        *(_DWORD *)(v10 + 192) = *(_DWORD *)(v12 + 8);
        if (*(_DWORD *)(v12 + 8) < 2u) {
          *(void *)(v10 + 184) = *(void *)v12;
        }
        *(_OWORD *)(v10 + 200) = *(_OWORD *)(v12 + 16);
        long long v13 = *(_OWORD *)(v12 + 32);
        uint64_t v14 = *(void *)(v12 + 64);
        *(_OWORD *)(v10 + 232) = *(_OWORD *)(v12 + 48);
        *(_OWORD *)(v10 + 216) = v13;
        *(void *)(v10 + 248) = v14;
        *(void *)(v10 + 256) = 0;
        *(void *)(v10 + 264) = 0;
        *(void *)(v10 + 272) = 0;
        *(_OWORD *)(v10 + 256) = *(_OWORD *)(v12 + 72);
        *(void *)(v10 + 272) = *(void *)(v12 + 88);
        *(void *)(v12 + 80) = 0;
        *(void *)(v12 + 88) = 0;
        *(void *)(v12 + 72) = 0;
        *(unsigned char *)(v10 + 280) = *(unsigned char *)(v12 + 96);
        *(void *)(v10 + 296) = 0;
        *(void *)(v10 + 304) = 0;
        *(void *)(v10 + 288) = 0;
        *(_OWORD *)(v10 + 288) = *(_OWORD *)(v12 + 104);
        *(void *)(v10 + 304) = *(void *)(v12 + 120);
        *(void *)(v12 + 104) = 0;
        *(void *)(v12 + 112) = 0;
        *(void *)(v12 + 120) = 0;
        long long v15 = *(_OWORD *)(v12 + 128);
        *(_OWORD *)(v10 + 321) = *(_OWORD *)(v12 + 137);
        *(_OWORD *)(v10 + 312) = v15;
        long long v16 = *(_OWORD *)(v12 + 156);
        *(_DWORD *)(v10 + 356) = *(_DWORD *)(v12 + 172);
        *(_OWORD *)(v10 + 340) = v16;
        *(void *)(v10 + 368) = 0;
        *(void *)(v10 + 376) = 0;
        *(void *)(v10 + 360) = 0;
        *(void *)(v10 + 360) = *(void *)(v12 + 176);
        *(void *)(v10 + 368) = *(void *)(v12 + 184);
        *(void *)(v10 + 376) = *(void *)(v12 + 192);
        *(void *)(v12 + 176) = 0;
        *(void *)(v12 + 184) = 0;
        *(void *)(v12 + 192) = 0;
        long long v17 = *(_OWORD *)(v12 + 200);
        *(_DWORD *)(v10 + 400) = *(_DWORD *)(v12 + 216);
        *(_OWORD *)(v10 + 384) = v17;
        ++v11;
        v10 += 408;
        v12 += 408;
      }
      while (v18 + 51 != (void *)a3);
      unint64_t v38 = v11;
    }
    sub_87BA3C(v10, v10, (uint64_t)a7, (uint64_t)a7, a2, a2, a1, a1, a3, a3);
    if (!a7) {
      return;
    }
LABEL_19:
    if (v38)
    {
      for (unint64_t i = 0; i < v38; ++i)
      {
        uint64_t v37 = (void *)a7[45];
        if (v37)
        {
          a7[46] = v37;
          operator delete(v37);
        }
        sub_4F32CC(a7);
        a7 += 51;
      }
    }
    return;
  }
  uint64_t v23 = a7;
  if (a1 != a2)
  {
    unint64_t v24 = 0;
    uint64_t v25 = a1 + 184;
    uint64_t v23 = a7;
    do
    {
      uint64_t v31 = (void *)(v25 - 184);
      *(_DWORD *)uint64_t v23 = *(_DWORD *)(v25 - 184);
      v23[2] = 0;
      v23[3] = 0;
      v23[1] = 0;
      *(_OWORD *)(v23 + 1) = *(_OWORD *)(v25 - 176);
      v23[3] = *(void *)(v25 - 160);
      v31[1] = 0;
      v31[2] = 0;
      v31[3] = 0;
      long long v32 = *(_OWORD *)(v25 - 152);
      long long v33 = *(_OWORD *)(v25 - 120);
      *((_OWORD *)v23 + 3) = *(_OWORD *)(v25 - 136);
      *((_OWORD *)v23 + 4) = v33;
      *((_OWORD *)v23 + 2) = v32;
      long long v34 = *(_OWORD *)(v25 - 88);
      uint64_t v35 = *(void *)(v25 - 72);
      *((_OWORD *)v23 + 5) = *(_OWORD *)(v25 - 104);
      *((_OWORD *)v23 + 6) = v34;
      v23[14] = v35;
      v23[15] = 0;
      v23[16] = 0;
      v23[17] = 0;
      *(_OWORD *)(v23 + 15) = *(_OWORD *)(v25 - 64);
      v23[17] = *(void *)(v25 - 48);
      v31[15] = 0;
      v31[16] = 0;
      v31[17] = 0;
      v23[18] = 0;
      v23[19] = 0;
      v23[20] = 0;
      *((_OWORD *)v23 + 9) = *(_OWORD *)(v25 - 40);
      v23[20] = *(void *)(v25 - 24);
      v31[18] = 0;
      v31[19] = 0;
      v31[20] = 0;
      *(_OWORD *)(v23 + 21) = *(_OWORD *)(v25 - 16);
      *((_DWORD *)v23 + 48) = *(_DWORD *)(v25 + 8);
      if (*(_DWORD *)(v25 + 8) < 2u) {
        v23[23] = *(void *)v25;
      }
      *(_OWORD *)(v23 + 25) = *(_OWORD *)(v25 + 16);
      long long v26 = *(_OWORD *)(v25 + 32);
      uint64_t v27 = *(void *)(v25 + 64);
      *(_OWORD *)(v23 + 29) = *(_OWORD *)(v25 + 48);
      *(_OWORD *)(v23 + 27) = v26;
      v23[31] = v27;
      v23[32] = 0;
      v23[33] = 0;
      v23[34] = 0;
      *((_OWORD *)v23 + 16) = *(_OWORD *)(v25 + 72);
      v23[34] = *(void *)(v25 + 88);
      *(void *)(v25 + 80) = 0;
      *(void *)(v25 + 88) = 0;
      *(void *)(v25 + 72) = 0;
      *((unsigned char *)v23 + 280) = *(unsigned char *)(v25 + 96);
      v23[37] = 0;
      v23[38] = 0;
      v23[36] = 0;
      *((_OWORD *)v23 + 18) = *(_OWORD *)(v25 + 104);
      v23[38] = *(void *)(v25 + 120);
      *(void *)(v25 + 104) = 0;
      *(void *)(v25 + 112) = 0;
      *(void *)(v25 + 120) = 0;
      long long v28 = *(_OWORD *)(v25 + 128);
      *(_OWORD *)((char *)v23 + 321) = *(_OWORD *)(v25 + 137);
      *(_OWORD *)(v23 + 39) = v28;
      long long v29 = *(_OWORD *)(v25 + 156);
      *((_DWORD *)v23 + 89) = *(_DWORD *)(v25 + 172);
      *(_OWORD *)((char *)v23 + 340) = v29;
      v23[46] = 0;
      v23[47] = 0;
      v23[45] = 0;
      v23[45] = *(void *)(v25 + 176);
      v23[46] = *(void *)(v25 + 184);
      v23[47] = *(void *)(v25 + 192);
      *(void *)(v25 + 176) = 0;
      *(void *)(v25 + 184) = 0;
      *(void *)(v25 + 192) = 0;
      long long v30 = *(_OWORD *)(v25 + 200);
      *((_DWORD *)v23 + 100) = *(_DWORD *)(v25 + 216);
      *((_OWORD *)v23 + 24) = v30;
      ++v24;
      v23 += 51;
      v25 += 408;
    }
    while (v31 + 51 != (void *)a2);
    unint64_t v38 = v24;
  }
  sub_87B7FC((uint64_t)a7, v23, a2, a3, a1);
  if (a7) {
    goto LABEL_19;
  }
}

void sub_87B7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_879BD8((void **)va);
  _Unwind_Resume(a1);
}

void sub_87B7E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_879BD8((void **)va);
  _Unwind_Resume(a1);
}

__n128 sub_87B7FC(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((_OWORD *)a1 == a2) {
    return result;
  }
  uint64_t v9 = a1;
  while (a3 != a4)
  {
    uint64_t v12 = sub_638A2C(a3);
    if (v12 == sub_638A2C(v9))
    {
      uint64_t v13 = sub_638A34(a3);
      if (v13 > sub_638A34(v9)) {
        goto LABEL_10;
      }
LABEL_7:
      sub_52ECD8(a5, v9);
      int v14 = *(_DWORD *)(v9 + 356);
      *(_OWORD *)(a5 + 340) = *(_OWORD *)(v9 + 340);
      *(_DWORD *)(a5 + 356) = v14;
      long long v15 = *(void **)(a5 + 360);
      if (v15)
      {
        *(void *)(a5 + 368) = v15;
        operator delete(v15);
        *(void *)(a5 + 360) = 0;
        *(void *)(a5 + 368) = 0;
        *(void *)(a5 + 376) = 0;
      }
      uint64_t v10 = *(void *)(v9 + 368);
      *(void *)(a5 + 360) = *(void *)(v9 + 360);
      *(void *)(a5 + 368) = v10;
      *(void *)(a5 + 376) = *(void *)(v9 + 376);
      *(void *)(v9 + 360) = 0;
      *(void *)(v9 + 368) = 0;
      *(void *)(v9 + 376) = 0;
      __n128 result = *(__n128 *)(v9 + 384);
      *(_DWORD *)(a5 + 400) = *(_DWORD *)(v9 + 400);
      *(__n128 *)(a5 + 384) = result;
      v9 += 408;
      a5 += 408;
      if ((_OWORD *)v9 == a2) {
        return result;
      }
    }
    else
    {
      uint64_t v16 = sub_638A2C(a3);
      if (v16 <= sub_638A2C(v9)) {
        goto LABEL_7;
      }
LABEL_10:
      sub_52ECD8(a5, a3);
      int v17 = *(_DWORD *)(a3 + 356);
      *(_OWORD *)(a5 + 340) = *(_OWORD *)(a3 + 340);
      *(_DWORD *)(a5 + 356) = v17;
      long long v18 = *(void **)(a5 + 360);
      if (v18)
      {
        *(void *)(a5 + 368) = v18;
        operator delete(v18);
        *(void *)(a5 + 360) = 0;
        *(void *)(a5 + 368) = 0;
        *(void *)(a5 + 376) = 0;
      }
      uint64_t v19 = *(void *)(a3 + 368);
      *(void *)(a5 + 360) = *(void *)(a3 + 360);
      *(void *)(a5 + 368) = v19;
      *(void *)(a5 + 376) = *(void *)(a3 + 376);
      *(void *)(a3 + 360) = 0;
      *(void *)(a3 + 368) = 0;
      *(void *)(a3 + 376) = 0;
      __n128 result = *(__n128 *)(a3 + 384);
      *(_DWORD *)(a5 + 400) = *(_DWORD *)(a3 + 400);
      *(__n128 *)(a5 + 384) = result;
      a3 += 408;
      a5 += 408;
      if ((_OWORD *)v9 == a2) {
        return result;
      }
    }
  }
  uint64_t v20 = 0;
  do
  {
    uint64_t v21 = a5 + v20;
    sub_52ECD8(a5 + v20, v9 + v20);
    uint64_t v22 = (_OWORD *)(v9 + v20 + 340);
    int v23 = *(_DWORD *)(v9 + v20 + 356);
    *(_OWORD *)(v21 + 340) = *v22;
    *(_DWORD *)(v21 + 356) = v23;
    unint64_t v24 = (void **)(a5 + v20 + 360);
    uint64_t v25 = *v24;
    if (*v24)
    {
      *(void *)(v21 + 368) = v25;
      operator delete(v25);
      *unint64_t v24 = 0;
      *(void *)(v21 + 368) = 0;
      *(void *)(v21 + 376) = 0;
    }
    *unint64_t v24 = *(void **)(v9 + v20 + 360);
    *(void *)(v21 + 368) = *(void *)(v9 + v20 + 368);
    *(void *)(v21 + 376) = *(void *)(v9 + v20 + 376);
    *(void *)(v9 + v20 + 368) = 0;
    *(void *)(v9 + v20 + 360) = 0;
    *(void *)(v9 + v20 + 376) = 0;
    __n128 result = *(__n128 *)(v9 + v20 + 384);
    *(_DWORD *)(v21 + 400) = *(_DWORD *)(v9 + v20 + 400);
    *(__n128 *)(v21 + 384) = result;
    v20 += 408;
  }
  while ((_OWORD *)((char *)v22 + 68) != a2);
  return result;
}

void sub_87BA3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a2 == a4) {
    return;
  }
  uint64_t v13 = a2;
  uint64_t v14 = a10;
  uint64_t v15 = a10 - 408;
  while (a6 != a8)
  {
    uint64_t v20 = a6 - 408;
    uint64_t v23 = v13 - 408;
    uint64_t v24 = sub_638A2C(v13 - 408);
    if (v24 == sub_638A2C(a6 - 408))
    {
      uint64_t v25 = sub_638A34(v13 - 408);
      if (v25 > sub_638A34(a6 - 408)) {
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v26 = sub_638A2C(v13 - 408);
      if (v26 > sub_638A2C(a6 - 408))
      {
LABEL_11:
        sub_52ECD8(v15, a6 - 408);
        int v27 = *(_DWORD *)(a6 - 52);
        *(_OWORD *)(v15 + 340) = *(_OWORD *)(a6 - 68);
        *(_DWORD *)(v15 + 356) = v27;
        int v17 = (void *)(v14 - 48);
        long long v18 = *(void **)(v15 + 360);
        uint64_t v19 = a6;
        uint64_t v23 = v13;
        if (!v18) {
          goto LABEL_5;
        }
LABEL_4:
        *(void *)(v15 + 368) = v18;
        operator delete(v18);
        void *v17 = 0;
        v17[1] = 0;
        uint64_t v13 = v23;
        v17[2] = 0;
        goto LABEL_5;
      }
    }
    sub_52ECD8(v15, v13 - 408);
    int v16 = *(_DWORD *)(v13 - 52);
    *(_OWORD *)(v15 + 340) = *(_OWORD *)(v13 - 68);
    *(_DWORD *)(v15 + 356) = v16;
    int v17 = (void *)(v15 + 360);
    long long v18 = *(void **)(v15 + 360);
    uint64_t v19 = v13;
    uint64_t v20 = a6;
    v13 -= 408;
    if (v18) {
      goto LABEL_4;
    }
LABEL_5:
    uint64_t v21 = *(void *)(v19 - 40);
    void *v17 = *(void *)(v19 - 48);
    *(void *)(v15 + 368) = v21;
    *(void *)(v15 + 376) = *(void *)(v19 - 32);
    *(void *)(v19 - 48) = 0;
    *(void *)(v19 - 40) = 0;
    *(void *)(v19 - 32) = 0;
    long long v22 = *(_OWORD *)(v19 - 24);
    *(_DWORD *)(v15 + 400) = *(_DWORD *)(v19 - 8);
    *(_OWORD *)(v15 + 384) = v22;
    v14 -= 408;
    v15 -= 408;
    a6 = v20;
    if (v13 == a4) {
      return;
    }
  }
  uint64_t v28 = 0;
  do
  {
    uint64_t v30 = v13 + v28;
    uint64_t v31 = v15 + v28;
    sub_52ECD8(v15 + v28, v13 + v28 - 408);
    int v32 = *(_DWORD *)(v13 + v28 - 52);
    *(_OWORD *)(v31 + 340) = *(_OWORD *)(v13 + v28 - 68);
    *(_DWORD *)(v31 + 356) = v32;
    long long v33 = (void **)(v15 + v28 + 360);
    long long v34 = *v33;
    if (*v33)
    {
      *(void *)(v31 + 368) = v34;
      operator delete(v34);
      *long long v33 = 0;
      *(void *)(v31 + 368) = 0;
      *(void *)(v31 + 376) = 0;
    }
    *(_OWORD *)long long v33 = *(_OWORD *)(v30 - 48);
    *(void *)(v31 + 376) = *(void *)(v30 - 32);
    *(void *)(v30 - 48) = 0;
    *(void *)(v30 - 40) = 0;
    *(void *)(v30 - 32) = 0;
    long long v29 = *(_OWORD *)(v30 - 24);
    *(_DWORD *)(v31 + 400) = *(_DWORD *)(v30 - 8);
    *(_OWORD *)(v31 + 384) = v29;
    v28 -= 408;
  }
  while (v13 + v28 != a4);
}

void *sub_87BC54(void *result, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9 = a2;
  uint64_t v10 = result;
  unint64_t v31 = a2;
  int v32 = result;
LABEL_2:
  uint64_t v11 = 1 - a4;
  while (1)
  {
    uint64_t v12 = v9 - (void)v10;
    unint64_t v13 = 0x1A8C536FE1A8C537 * ((v9 - (uint64_t)v10) >> 3);
    if (!(!v6 & v5))
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unint64_t v31 = v9 - 1080;
          uint64_t v27 = sub_638A2C(v9 - 1080);
          if (v27 == sub_638A2C((uint64_t)v10))
          {
            uint64_t v28 = sub_638A34(v9 - 1080);
            __n128 result = (void *)sub_638A34((uint64_t)v10);
            if (v28 <= (uint64_t)result) {
              return result;
            }
          }
          else
          {
            uint64_t v29 = sub_638A2C(v9 - 1080);
            __n128 result = (void *)sub_638A2C((uint64_t)v10);
            if (v29 <= (uint64_t)result) {
              return result;
            }
          }
          __n128 result = sub_873E98((uint64_t *)&v32, (uint64_t *)&v31);
          break;
        case 3uLL:
          unint64_t v31 = v9 - 1080;
          return (void *)sub_874280((uint64_t)v10, (uint64_t)(v10 + 135), v9 - 1080);
        case 4uLL:
          unint64_t v31 = v9 - 1080;
          return sub_8751E4((uint64_t)v10, (uint64_t)(v10 + 135), (uint64_t)(v10 + 270), v9 - 1080);
        case 5uLL:
          unint64_t v31 = v9 - 1080;
          return sub_8753E8((uint64_t)v10, (uint64_t)(v10 + 135), (uint64_t)(v10 + 270), (uint64_t)(v10 + 405), v9 - 1080);
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v12 <= 25919)
    {
      if (a5) {
        return (void *)sub_87BFFC((uint64_t)v10, v9);
      }
      else {
        return (void *)sub_87C1DC((uint64_t)v10, v9);
      }
    }
    if (v11 == 1) {
      break;
    }
    unint64_t v14 = v13 >> 1;
    uint64_t v15 = v9 - 1080;
    if ((unint64_t)v12 >= 0x21C01)
    {
      sub_874280((uint64_t)v10, (uint64_t)&v10[135 * (v13 >> 1)], v15);
      uint64_t v16 = 135 * v14;
      uint64_t v17 = 1080 * v14 - 1080;
      unint64_t v18 = v31;
      sub_874280((uint64_t)(v32 + 135), (uint64_t)v32 + v17, v31 - 2160);
      sub_874280((uint64_t)(v32 + 270), (uint64_t)&v32[v16 + 135], v18 - 3240);
      sub_874280((uint64_t)v32 + v17, (uint64_t)&v32[v16], (uint64_t)&v32[v16 + 135]);
      uint64_t v30 = &v32[v16];
      sub_873E98((uint64_t *)&v32, (uint64_t *)&v30);
      if (a5) {
        goto LABEL_16;
      }
    }
    else
    {
      sub_874280((uint64_t)&v10[135 * (v13 >> 1)], (uint64_t)v10, v15);
      if (a5) {
        goto LABEL_16;
      }
    }
    uint64_t v19 = (uint64_t)v32;
    uint64_t v20 = (uint64_t)(v32 - 135);
    uint64_t v21 = sub_638A2C((uint64_t)(v32 - 135));
    if (v21 == sub_638A2C(v19))
    {
      uint64_t v22 = sub_638A34(v20);
      if (v22 <= sub_638A34(v19)) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v23 = sub_638A2C(v20);
      if (v23 <= sub_638A2C(v19))
      {
LABEL_23:
        uint64_t v9 = v31;
        __n128 result = (void *)sub_87C358((uint64_t)v32, v31);
        uint64_t v10 = result;
        goto LABEL_24;
      }
    }
LABEL_16:
    uint64_t v9 = v31;
    unint64_t v24 = sub_87C6D8((uint64_t)v32, v31);
    if ((v25 & 1) == 0) {
      goto LABEL_22;
    }
    int v26 = sub_87CA24((uint64_t)v32, v24);
    uint64_t v10 = (void *)(v24 + 1080);
    __n128 result = (void *)sub_87CA24(v24 + 1080, v9);
    if (result)
    {
      if (v26) {
        return result;
      }
      unint64_t v31 = v24;
      uint64_t v10 = v32;
      uint64_t v9 = v24;
      ++v11;
    }
    else
    {
      if (!v26)
      {
LABEL_22:
        __n128 result = (void *)sub_87BC54(v32, v24, a3, -v11, a5 & 1);
        uint64_t v10 = (void *)(v24 + 1080);
LABEL_24:
        a5 = 0;
        int v32 = v10;
        a4 = -v11;
        goto LABEL_2;
      }
      int v32 = (void *)(v24 + 1080);
      ++v11;
    }
  }
  if (v10 != (void *)v9) {
    return (void *)sub_87CDAC(v10, v9, v9, a3);
  }
  return result;
}

uint64_t sub_87BFFC(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return result;
  }
  uint64_t v3 = result;
  uint64_t v4 = result + 1080;
  if (result + 1080 == a2) {
    return result;
  }
  uint64_t v5 = 0;
  uint64_t v6 = result;
  while (2)
  {
    uint64_t v8 = v6;
    uint64_t v6 = v4;
    uint64_t v9 = sub_638A2C(v4);
    if (v9 == sub_638A2C(v8))
    {
      uint64_t v10 = sub_638A34(v6);
      __n128 result = sub_638A34(v8);
    }
    else
    {
      uint64_t v10 = sub_638A2C(v6);
      __n128 result = sub_638A2C(v8);
    }
    if (v10 <= result) {
      goto LABEL_6;
    }
    sub_7574DC((uint64_t)v15, v6);
    sub_874FD8(v6, v8);
    uint64_t v7 = v3;
    if (v8 == v3) {
      goto LABEL_5;
    }
    uint64_t v11 = v5;
    while (1)
    {
      uint64_t v12 = sub_638A2C((uint64_t)v15);
      if (v12 != sub_638A2C(v3 + v11 - 1080)) {
        break;
      }
      uint64_t v13 = sub_638A34((uint64_t)v15);
      if (v13 <= sub_638A34(v3 + v11 - 1080))
      {
        uint64_t v7 = v3 + v11;
        goto LABEL_5;
      }
LABEL_13:
      v8 -= 1080;
      sub_874FD8(v3 + v11, v3 + v11 - 1080);
      v11 -= 1080;
      if (!v11)
      {
        uint64_t v7 = v3;
        goto LABEL_5;
      }
    }
    uint64_t v14 = sub_638A2C((uint64_t)v15);
    if (v14 > sub_638A2C(v3 + v11 - 1080)) {
      goto LABEL_13;
    }
    uint64_t v7 = v8;
LABEL_5:
    sub_874FD8(v7, (uint64_t)v15);
    __n128 result = (uint64_t)sub_52F1E8((uint64_t)v15);
LABEL_6:
    uint64_t v4 = v6 + 1080;
    v5 += 1080;
    if (v6 + 1080 != a2) {
      continue;
    }
    return result;
  }
}

void sub_87C1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_87C1DC(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    while (1)
    {
      uint64_t v4 = v3 + 1080;
      if (v3 + 1080 == a2) {
        break;
      }
      uint64_t v5 = v3;
      v3 += 1080;
      uint64_t v6 = sub_638A2C(v4);
      if (v6 == sub_638A2C(v5))
      {
        uint64_t v7 = sub_638A34(v3);
        __n128 result = sub_638A34(v5);
      }
      else
      {
        uint64_t v7 = sub_638A2C(v3);
        __n128 result = sub_638A2C(v5);
      }
      if (v7 > result)
      {
        sub_7574DC((uint64_t)v12, v3);
        do
        {
          uint64_t v8 = v5;
          sub_874FD8(v5 + 1080, v5);
          uint64_t v9 = sub_638A2C((uint64_t)v12);
          v5 -= 1080;
          if (v9 == sub_638A2C(v8 - 1080))
          {
            uint64_t v10 = sub_638A34((uint64_t)v12);
            uint64_t v11 = sub_638A34(v8 - 1080);
          }
          else
          {
            uint64_t v10 = sub_638A2C((uint64_t)v12);
            uint64_t v11 = sub_638A2C(v8 - 1080);
          }
        }
        while (v10 > v11);
        sub_874FD8(v8, (uint64_t)v12);
        __n128 result = (uint64_t)sub_52F1E8((uint64_t)v12);
      }
    }
  }
  return result;
}

void sub_87C344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t sub_87C358(uint64_t a1, unint64_t a2)
{
  sub_7574DC((uint64_t)v24, a1);
  uint64_t v4 = sub_638A2C((uint64_t)v24);
  if (v4 == sub_638A2C(a2 - 1080))
  {
    uint64_t v5 = sub_638A34((uint64_t)v24);
    uint64_t v6 = sub_638A34(a2 - 1080);
  }
  else
  {
    uint64_t v5 = sub_638A2C((uint64_t)v24);
    uint64_t v6 = sub_638A2C(a2 - 1080);
  }
  if (v5 <= v6)
  {
    for (unint64_t i = a1 + 1080; i < a2; i += 1080)
    {
      uint64_t v11 = sub_638A2C((uint64_t)v24);
      if (v11 == sub_638A2C(i))
      {
        uint64_t v12 = sub_638A34((uint64_t)v24);
        uint64_t v13 = sub_638A34(i);
      }
      else
      {
        uint64_t v12 = sub_638A2C((uint64_t)v24);
        uint64_t v13 = sub_638A2C(i);
      }
      if (v12 > v13) {
        break;
      }
    }
  }
  else
  {
    for (unint64_t i = a1 + 1080; ; i += 1080)
    {
      uint64_t v8 = sub_638A2C((uint64_t)v24);
      if (v8 == sub_638A2C(i))
      {
        uint64_t v9 = sub_638A34((uint64_t)v24);
        uint64_t v10 = sub_638A34(i);
      }
      else
      {
        uint64_t v9 = sub_638A2C((uint64_t)v24);
        uint64_t v10 = sub_638A2C(i);
      }
      if (v9 > v10) {
        break;
      }
    }
  }
  if (i < a2)
  {
    for (a2 -= 1080; ; a2 -= 1080)
    {
      uint64_t v14 = sub_638A2C((uint64_t)v24);
      if (v14 == sub_638A2C(a2))
      {
        uint64_t v15 = sub_638A34((uint64_t)v24);
        uint64_t v16 = sub_638A34(a2);
      }
      else
      {
        uint64_t v15 = sub_638A2C((uint64_t)v24);
        uint64_t v16 = sub_638A2C(a2);
      }
      if (v15 <= v16) {
        break;
      }
    }
  }
  while (i < a2)
  {
    sub_7574DC((uint64_t)v25, i);
    sub_874FD8(i, a2);
    sub_874FD8(a2, (uint64_t)v25);
    sub_52F1E8((uint64_t)v25);
    do
    {
      i += 1080;
      uint64_t v17 = sub_638A2C((uint64_t)v24);
      if (v17 == sub_638A2C(i))
      {
        uint64_t v18 = sub_638A34((uint64_t)v24);
        uint64_t v19 = sub_638A34(i);
      }
      else
      {
        uint64_t v18 = sub_638A2C((uint64_t)v24);
        uint64_t v19 = sub_638A2C(i);
      }
    }
    while (v18 <= v19);
    do
    {
      a2 -= 1080;
      uint64_t v20 = sub_638A2C((uint64_t)v24);
      if (v20 == sub_638A2C(a2))
      {
        uint64_t v21 = sub_638A34((uint64_t)v24);
        uint64_t v22 = sub_638A34(a2);
      }
      else
      {
        uint64_t v21 = sub_638A2C((uint64_t)v24);
        uint64_t v22 = sub_638A2C(a2);
      }
    }
    while (v21 > v22);
  }
  if (i - 1080 != a1) {
    sub_874FD8(a1, i - 1080);
  }
  sub_874FD8(i - 1080, (uint64_t)v24);
  sub_52F1E8((uint64_t)v24);
  return i;
}

void sub_87C660(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_87C674(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_87C688(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_87C69C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_87C6B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_87C6C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_87C6D8(uint64_t a1, unint64_t a2)
{
  sub_7574DC((uint64_t)v25, a1);
  for (uint64_t i = 0; ; i += 1080)
  {
    uint64_t v5 = sub_638A2C(a1 + i + 1080);
    if (v5 == sub_638A2C((uint64_t)v25))
    {
      uint64_t v6 = sub_638A34(a1 + i + 1080);
      uint64_t v7 = sub_638A34((uint64_t)v25);
    }
    else
    {
      uint64_t v6 = sub_638A2C(a1 + i + 1080);
      uint64_t v7 = sub_638A2C((uint64_t)v25);
    }
    if (v6 <= v7) {
      break;
    }
  }
  uint64_t v8 = a1 + i;
  unint64_t v9 = a1 + i + 1080;
  if (i)
  {
    do
    {
      a2 -= 1080;
      uint64_t v10 = sub_638A2C(a2);
      if (v10 == sub_638A2C((uint64_t)v25))
      {
        uint64_t v11 = sub_638A34(a2);
        uint64_t v12 = sub_638A34((uint64_t)v25);
      }
      else
      {
        uint64_t v11 = sub_638A2C(a2);
        uint64_t v12 = sub_638A2C((uint64_t)v25);
      }
    }
    while (v11 <= v12);
  }
  else
  {
    do
    {
      if (v9 >= a2) {
        break;
      }
      a2 -= 1080;
      uint64_t v13 = sub_638A2C(a2);
      if (v13 == sub_638A2C((uint64_t)v25))
      {
        uint64_t v14 = sub_638A34(a2);
        uint64_t v15 = sub_638A34((uint64_t)v25);
      }
      else
      {
        uint64_t v14 = sub_638A2C(a2);
        uint64_t v15 = sub_638A2C((uint64_t)v25);
      }
    }
    while (v14 <= v15);
  }
  if (v9 < a2)
  {
    unint64_t v16 = a1 + i + 1080;
    unint64_t v17 = a2;
    do
    {
      sub_7574DC((uint64_t)v26, v16);
      sub_874FD8(v16, v17);
      sub_874FD8(v17, (uint64_t)v26);
      sub_52F1E8((uint64_t)v26);
      do
      {
        uint64_t v8 = v16;
        v16 += 1080;
        uint64_t v18 = sub_638A2C(v16);
        if (v18 == sub_638A2C((uint64_t)v25))
        {
          uint64_t v19 = sub_638A34(v16);
          uint64_t v20 = sub_638A34((uint64_t)v25);
        }
        else
        {
          uint64_t v19 = sub_638A2C(v16);
          uint64_t v20 = sub_638A2C((uint64_t)v25);
        }
      }
      while (v19 > v20);
      unint64_t v16 = v8 + 1080;
      do
      {
        v17 -= 1080;
        uint64_t v21 = sub_638A2C(v17);
        if (v21 == sub_638A2C((uint64_t)v25))
        {
          uint64_t v22 = sub_638A34(v17);
          uint64_t v23 = sub_638A34((uint64_t)v25);
        }
        else
        {
          uint64_t v22 = sub_638A2C(v17);
          uint64_t v23 = sub_638A2C((uint64_t)v25);
        }
      }
      while (v22 <= v23);
    }
    while (v16 < v17);
  }
  if (v8 != a1) {
    sub_874FD8(a1, v8);
  }
  sub_874FD8(v8, (uint64_t)v25);
  sub_52F1E8((uint64_t)v25);
  return v8;
}

void sub_87C9C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_87C9D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_87C9E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_87C9FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_87CA10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_87CA24(uint64_t a1, uint64_t a2)
{
  BOOL v4 = 1;
  switch(0x1A8C536FE1A8C537 * ((a2 - a1) >> 3))
  {
    case 0:
    case 1:
      return v4;
    case 2:
      uint64_t v5 = a2 - 1080;
      uint64_t v6 = sub_638A2C(a2 - 1080);
      if (v6 == sub_638A2C(a1))
      {
        uint64_t v7 = sub_638A34(v5);
        if (v7 <= sub_638A34(a1)) {
          return 1;
        }
      }
      else
      {
        uint64_t v20 = sub_638A2C(v5);
        if (v20 <= sub_638A2C(a1)) {
          return 1;
        }
      }
      sub_7574DC((uint64_t)v22, a1);
      sub_874FD8(a1, v5);
      sub_874FD8(v5, (uint64_t)v22);
      sub_52F1E8((uint64_t)v22);
      return 1;
    case 3:
      sub_874280(a1, a1 + 1080, a2 - 1080);
      return v4;
    case 4:
      sub_8751E4(a1, a1 + 1080, a1 + 2160, a2 - 1080);
      return v4;
    case 5:
      sub_8753E8(a1, a1 + 1080, a1 + 2160, a1 + 3240, a2 - 1080);
      return v4;
    default:
      uint64_t v8 = a1 + 2160;
      sub_874280(a1, a1 + 1080, a1 + 2160);
      uint64_t v9 = a1 + 3240;
      if (a1 + 3240 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    uint64_t v12 = sub_638A2C(v9);
    if (v12 == sub_638A2C(v8))
    {
      uint64_t v13 = sub_638A34(v9);
      uint64_t v14 = sub_638A34(v8);
    }
    else
    {
      uint64_t v13 = sub_638A2C(v9);
      uint64_t v14 = sub_638A2C(v8);
    }
    if (v13 > v14) {
      break;
    }
LABEL_7:
    uint64_t v8 = v9;
    v10 += 1080;
    v9 += 1080;
    if (v9 == a2) {
      return 1;
    }
  }
  sub_7574DC((uint64_t)v22, v9);
  sub_874FD8(v9, v8);
  uint64_t v15 = a1;
  if (v8 == a1)
  {
LABEL_22:
    sub_874FD8(v15, (uint64_t)v22);
    if (++v11 == 8) {
      goto LABEL_25;
    }
LABEL_23:
    sub_52F1E8((uint64_t)v22);
    goto LABEL_7;
  }
  uint64_t v16 = v10;
  while (1)
  {
    uint64_t v17 = sub_638A2C((uint64_t)v22);
    if (v17 == sub_638A2C(a1 + v16 + 1080)) {
      break;
    }
    uint64_t v19 = sub_638A2C((uint64_t)v22);
    if (v19 <= sub_638A2C(a1 + v16 + 1080))
    {
      sub_874FD8(v8, (uint64_t)v22);
      if (++v11 != 8) {
        goto LABEL_23;
      }
      goto LABEL_25;
    }
LABEL_14:
    v8 -= 1080;
    sub_874FD8(a1 + v16 + 2160, a1 + v16 + 1080);
    v16 -= 1080;
    if (v16 == -2160)
    {
      uint64_t v15 = a1;
      goto LABEL_22;
    }
  }
  uint64_t v18 = sub_638A34((uint64_t)v22);
  if (v18 > sub_638A34(a1 + v16 + 1080)) {
    goto LABEL_14;
  }
  sub_874FD8(a1 + v16 + 2160, (uint64_t)v22);
  if (++v11 != 8) {
    goto LABEL_23;
  }
LABEL_25:
  BOOL v4 = v9 + 1080 == a2;
  sub_52F1E8((uint64_t)v22);
  return v4;
}

void sub_87CD80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_87CDAC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != (void *)a2)
  {
    uint64_t v8 = (a2 - (uint64_t)a1) / 1080;
    if (a2 - (uint64_t)a1 >= 1081)
    {
      unint64_t v9 = (unint64_t)(v8 - 2) >> 1;
      unint64_t v10 = v9 + 1;
      uint64_t v11 = (uint64_t)&a1[135 * v9];
      do
      {
        sub_87CF60(a1, a4, v8, v11);
        v11 -= 1080;
        --v10;
      }
      while (v10);
    }
    uint64_t v12 = a2;
    if (a2 != a3)
    {
      uint64_t v13 = a2;
      while (1)
      {
        uint64_t v14 = sub_638A2C(v13);
        if (v14 == sub_638A2C((uint64_t)a1))
        {
          uint64_t v15 = sub_638A34(v13);
          if (v15 > sub_638A34((uint64_t)a1)) {
            goto LABEL_12;
          }
        }
        else
        {
          uint64_t v16 = sub_638A2C(v13);
          if (v16 > sub_638A2C((uint64_t)a1))
          {
LABEL_12:
            sub_7574DC((uint64_t)v18, v13);
            sub_874FD8(v13, (uint64_t)a1);
            sub_874FD8((uint64_t)a1, (uint64_t)v18);
            sub_52F1E8((uint64_t)v18);
            sub_87CF60(a1, a4, v8, (uint64_t)a1);
          }
        }
        v13 += 1080;
        if (v13 == a3)
        {
          uint64_t v12 = a3;
          break;
        }
      }
    }
    sub_87D220(a1, a2, a4);
    return v12;
  }
  return a3;
}

void *sub_87CF60(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 < 2) {
    return result;
  }
  uint64_t v6 = result;
  uint64_t v7 = v4 >> 1;
  if ((uint64_t)(v4 >> 1) < 0x1A8C536FE1A8C537 * ((a4 - (uint64_t)result) >> 3)) {
    return result;
  }
  uint64_t v9 = (0x3518A6DFC3518A6ELL * ((a4 - (uint64_t)result) >> 3)) | 1;
  uint64_t v10 = (uint64_t)&result[135 * v9];
  uint64_t v11 = 0x3518A6DFC3518A6ELL * ((a4 - (uint64_t)result) >> 3) + 2;
  if (v11 < a3)
  {
    uint64_t v12 = sub_638A2C((uint64_t)&result[135 * v9]);
    if (v12 == sub_638A2C(v10 + 1080))
    {
      uint64_t v13 = sub_638A34((uint64_t)&v6[135 * v9]);
      if (v13 <= sub_638A34(v10 + 1080)) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    uint64_t v14 = sub_638A2C((uint64_t)&v6[135 * v9]);
    if (v14 > sub_638A2C(v10 + 1080))
    {
LABEL_8:
      v10 += 1080;
      uint64_t v9 = v11;
    }
  }
LABEL_9:
  uint64_t v15 = sub_638A2C(v10);
  if (v15 == sub_638A2C(a4))
  {
    uint64_t v16 = sub_638A34(v10);
    __n128 result = (void *)sub_638A34(a4);
    if (v16 > (uint64_t)result) {
      return result;
    }
  }
  else
  {
    uint64_t v17 = sub_638A2C(v10);
    __n128 result = (void *)sub_638A2C(a4);
    if (v17 > (uint64_t)result) {
      return result;
    }
  }
  sub_7574DC((uint64_t)v27, a4);
  sub_874FD8(a4, v10);
  if (v7 >= v9)
  {
    while (1)
    {
      uint64_t v19 = 2 * v9;
      uint64_t v9 = (2 * v9) | 1;
      uint64_t v18 = (uint64_t)&v6[135 * v9];
      uint64_t v20 = v19 + 2;
      if (v19 + 2 < a3)
      {
        uint64_t v21 = sub_638A2C((uint64_t)&v6[135 * v9]);
        if (v21 == sub_638A2C(v18 + 1080))
        {
          uint64_t v22 = sub_638A34((uint64_t)&v6[135 * v9]);
          uint64_t v23 = sub_638A34(v18 + 1080);
        }
        else
        {
          uint64_t v22 = sub_638A2C((uint64_t)&v6[135 * v9]);
          uint64_t v23 = sub_638A2C(v18 + 1080);
        }
        if (v22 > v23)
        {
          v18 += 1080;
          uint64_t v9 = v20;
        }
      }
      uint64_t v24 = sub_638A2C(v18);
      if (v24 == sub_638A2C((uint64_t)v27))
      {
        uint64_t v25 = sub_638A34(v18);
        uint64_t v26 = sub_638A34((uint64_t)v27);
      }
      else
      {
        uint64_t v25 = sub_638A2C(v18);
        uint64_t v26 = sub_638A2C((uint64_t)v27);
      }
      if (v25 > v26) {
        break;
      }
      sub_874FD8(v10, v18);
      uint64_t v10 = v18;
      if (v7 < v9) {
        goto LABEL_26;
      }
    }
  }
  uint64_t v18 = v10;
LABEL_26:
  sub_874FD8(v18, (uint64_t)v27);
  return sub_52F1E8((uint64_t)v27);
}

void sub_87D20C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_87D220(void *result, uint64_t a2, uint64_t a3)
{
  if (a2 - (uint64_t)result >= 1081)
  {
    unint64_t v4 = result;
    int64_t v5 = (a2 - (uint64_t)result) / 0x438uLL;
    uint64_t v6 = a2 - 1080;
    do
    {
      sub_7574DC((uint64_t)v10, (uint64_t)v4);
      uint64_t v8 = sub_875C3C((uint64_t)v4, a3, v5);
      uint64_t v9 = v8;
      if (v6 == v8)
      {
        sub_874FD8(v8, (uint64_t)v10);
      }
      else
      {
        sub_874FD8(v8, v6);
        sub_874FD8(v6, (uint64_t)v10);
        sub_87D36C(v4, v9 + 1080, a3, 0x1A8C536FE1A8C537 * ((v9 + 1080 - (uint64_t)v4) >> 3));
      }
      __n128 result = sub_52F1E8((uint64_t)v10);
      v6 -= 1080;
    }
    while (v5-- > 2);
  }
  return result;
}

void sub_87D358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_87D36C(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    int64_t v5 = result;
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = (uint64_t)&result[135 * (v4 >> 1)];
    uint64_t v8 = a2 - 1080;
    uint64_t v9 = sub_638A2C(v7);
    if (v9 == sub_638A2C(v8))
    {
      uint64_t v10 = sub_638A34(v7);
      __n128 result = (void *)sub_638A34(v8);
      if (v10 <= (uint64_t)result) {
        return result;
      }
    }
    else
    {
      uint64_t v11 = sub_638A2C(v7);
      __n128 result = (void *)sub_638A2C(v8);
      if (v11 <= (uint64_t)result) {
        return result;
      }
    }
    sub_7574DC((uint64_t)v17, v8);
    sub_874FD8(v8, v7);
    if (v4 >= 2)
    {
      while (1)
      {
        unint64_t v13 = v6 - 1;
        unint64_t v6 = (v6 - 1) >> 1;
        uint64_t v12 = (uint64_t)&v5[135 * v6];
        uint64_t v14 = sub_638A2C(v12);
        if (v14 == sub_638A2C((uint64_t)v17))
        {
          uint64_t v15 = sub_638A34((uint64_t)&v5[135 * v6]);
          uint64_t v16 = sub_638A34((uint64_t)v17);
        }
        else
        {
          uint64_t v15 = sub_638A2C((uint64_t)&v5[135 * v6]);
          uint64_t v16 = sub_638A2C((uint64_t)v17);
        }
        if (v15 <= v16) {
          break;
        }
        sub_874FD8(v7, (uint64_t)&v5[135 * v6]);
        uint64_t v7 = (uint64_t)&v5[135 * v6];
        if (v13 <= 1) {
          goto LABEL_13;
        }
      }
    }
    uint64_t v12 = v7;
LABEL_13:
    sub_874FD8(v12, (uint64_t)v17);
    return sub_52F1E8((uint64_t)v17);
  }
  return result;
}

void sub_87D4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_87D510(void *result, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9 = a2;
  uint64_t v10 = result;
  unint64_t v31 = a2;
  int v32 = result;
LABEL_2:
  uint64_t v11 = 1 - a4;
  while (1)
  {
    uint64_t v12 = v9 - (void)v10;
    unint64_t v13 = 0x1A8C536FE1A8C537 * ((v9 - (uint64_t)v10) >> 3);
    if (!(!v6 & v5))
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unint64_t v31 = v9 - 1080;
          uint64_t v27 = sub_638A34(v9 - 1080);
          if (v27 == sub_638A34((uint64_t)v10))
          {
            uint64_t v28 = sub_638A2C(v9 - 1080);
            __n128 result = (void *)sub_638A2C((uint64_t)v10);
            if (v28 <= (uint64_t)result) {
              return result;
            }
          }
          else
          {
            uint64_t v29 = sub_638A34(v9 - 1080);
            __n128 result = (void *)sub_638A34((uint64_t)v10);
            if (v29 <= (uint64_t)result) {
              return result;
            }
          }
          __n128 result = sub_873E98((uint64_t *)&v32, (uint64_t *)&v31);
          break;
        case 3uLL:
          unint64_t v31 = v9 - 1080;
          return (void *)sub_8765EC((uint64_t)v10, (uint64_t)(v10 + 135), v9 - 1080);
        case 4uLL:
          unint64_t v31 = v9 - 1080;
          return sub_877344((uint64_t)v10, (uint64_t)(v10 + 135), (uint64_t)(v10 + 270), v9 - 1080);
        case 5uLL:
          unint64_t v31 = v9 - 1080;
          return sub_877548((uint64_t)v10, (uint64_t)(v10 + 135), (uint64_t)(v10 + 270), (uint64_t)(v10 + 405), v9 - 1080);
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v12 <= 25919)
    {
      if (a5) {
        return (void *)sub_87D8B8((uint64_t)v10, v9);
      }
      else {
        return (void *)sub_87DA98((uint64_t)v10, v9);
      }
    }
    if (v11 == 1) {
      break;
    }
    unint64_t v14 = v13 >> 1;
    uint64_t v15 = v9 - 1080;
    if ((unint64_t)v12 >= 0x21C01)
    {
      sub_8765EC((uint64_t)v10, (uint64_t)&v10[135 * (v13 >> 1)], v15);
      uint64_t v16 = 135 * v14;
      uint64_t v17 = 1080 * v14 - 1080;
      unint64_t v18 = v31;
      sub_8765EC((uint64_t)(v32 + 135), (uint64_t)v32 + v17, v31 - 2160);
      sub_8765EC((uint64_t)(v32 + 270), (uint64_t)&v32[v16 + 135], v18 - 3240);
      sub_8765EC((uint64_t)v32 + v17, (uint64_t)&v32[v16], (uint64_t)&v32[v16 + 135]);
      uint64_t v30 = &v32[v16];
      sub_873E98((uint64_t *)&v32, (uint64_t *)&v30);
      if (a5) {
        goto LABEL_16;
      }
    }
    else
    {
      sub_8765EC((uint64_t)&v10[135 * (v13 >> 1)], (uint64_t)v10, v15);
      if (a5) {
        goto LABEL_16;
      }
    }
    uint64_t v19 = (uint64_t)v32;
    uint64_t v20 = (uint64_t)(v32 - 135);
    uint64_t v21 = sub_638A34((uint64_t)(v32 - 135));
    if (v21 == sub_638A34(v19))
    {
      uint64_t v22 = sub_638A2C(v20);
      if (v22 <= sub_638A2C(v19)) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v23 = sub_638A34(v20);
      if (v23 <= sub_638A34(v19))
      {
LABEL_23:
        uint64_t v9 = v31;
        __n128 result = (void *)sub_87DC14((uint64_t)v32, v31);
        uint64_t v10 = result;
        goto LABEL_24;
      }
    }
LABEL_16:
    uint64_t v9 = v31;
    unint64_t v24 = sub_87DF94((uint64_t)v32, v31);
    if ((v25 & 1) == 0) {
      goto LABEL_22;
    }
    int v26 = sub_87E2E0((uint64_t)v32, v24);
    uint64_t v10 = (void *)(v24 + 1080);
    __n128 result = (void *)sub_87E2E0(v24 + 1080, v9);
    if (result)
    {
      if (v26) {
        return result;
      }
      unint64_t v31 = v24;
      uint64_t v10 = v32;
      uint64_t v9 = v24;
      ++v11;
    }
    else
    {
      if (!v26)
      {
LABEL_22:
        __n128 result = (void *)sub_87D510(v32, v24, a3, -v11, a5 & 1);
        uint64_t v10 = (void *)(v24 + 1080);
LABEL_24:
        a5 = 0;
        int v32 = v10;
        a4 = -v11;
        goto LABEL_2;
      }
      int v32 = (void *)(v24 + 1080);
      ++v11;
    }
  }
  if (v10 != (void *)v9) {
    return (void *)sub_87E668(v10, v9, v9, a3);
  }
  return result;
}

uint64_t sub_87D8B8(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return result;
  }
  uint64_t v3 = result;
  uint64_t v4 = result + 1080;
  if (result + 1080 == a2) {
    return result;
  }
  uint64_t v5 = 0;
  uint64_t v6 = result;
  while (2)
  {
    uint64_t v8 = v6;
    uint64_t v6 = v4;
    uint64_t v9 = sub_638A34(v4);
    if (v9 == sub_638A34(v8))
    {
      uint64_t v10 = sub_638A2C(v6);
      __n128 result = sub_638A2C(v8);
    }
    else
    {
      uint64_t v10 = sub_638A34(v6);
      __n128 result = sub_638A34(v8);
    }
    if (v10 <= result) {
      goto LABEL_6;
    }
    sub_7574DC((uint64_t)v15, v6);
    sub_874FD8(v6, v8);
    uint64_t v7 = v3;
    if (v8 == v3) {
      goto LABEL_5;
    }
    uint64_t v11 = v5;
    while (1)
    {
      uint64_t v12 = sub_638A34((uint64_t)v15);
      if (v12 != sub_638A34(v3 + v11 - 1080)) {
        break;
      }
      uint64_t v13 = sub_638A2C((uint64_t)v15);
      if (v13 <= sub_638A2C(v3 + v11 - 1080))
      {
        uint64_t v7 = v3 + v11;
        goto LABEL_5;
      }
LABEL_13:
      v8 -= 1080;
      sub_874FD8(v3 + v11, v3 + v11 - 1080);
      v11 -= 1080;
      if (!v11)
      {
        uint64_t v7 = v3;
        goto LABEL_5;
      }
    }
    uint64_t v14 = sub_638A34((uint64_t)v15);
    if (v14 > sub_638A34(v3 + v11 - 1080)) {
      goto LABEL_13;
    }
    uint64_t v7 = v8;
LABEL_5:
    sub_874FD8(v7, (uint64_t)v15);
    __n128 result = (uint64_t)sub_52F1E8((uint64_t)v15);
LABEL_6:
    uint64_t v4 = v6 + 1080;
    v5 += 1080;
    if (v6 + 1080 != a2) {
      continue;
    }
    return result;
  }
}

void sub_87DA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_87DA98(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    while (1)
    {
      uint64_t v4 = v3 + 1080;
      if (v3 + 1080 == a2) {
        break;
      }
      uint64_t v5 = v3;
      v3 += 1080;
      uint64_t v6 = sub_638A34(v4);
      if (v6 == sub_638A34(v5))
      {
        uint64_t v7 = sub_638A2C(v3);
        __n128 result = sub_638A2C(v5);
      }
      else
      {
        uint64_t v7 = sub_638A34(v3);
        __n128 result = sub_638A34(v5);
      }
      if (v7 > result)
      {
        sub_7574DC((uint64_t)v12, v3);
        do
        {
          uint64_t v8 = v5;
          sub_874FD8(v5 + 1080, v5);
          uint64_t v9 = sub_638A34((uint64_t)v12);
          v5 -= 1080;
          if (v9 == sub_638A34(v8 - 1080))
          {
            uint64_t v10 = sub_638A2C((uint64_t)v12);
            uint64_t v11 = sub_638A2C(v8 - 1080);
          }
          else
          {
            uint64_t v10 = sub_638A34((uint64_t)v12);
            uint64_t v11 = sub_638A34(v8 - 1080);
          }
        }
        while (v10 > v11);
        sub_874FD8(v8, (uint64_t)v12);
        __n128 result = (uint64_t)sub_52F1E8((uint64_t)v12);
      }
    }
  }
  return result;
}

void sub_87DC00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t sub_87DC14(uint64_t a1, unint64_t a2)
{
  sub_7574DC((uint64_t)v24, a1);
  uint64_t v4 = sub_638A34((uint64_t)v24);
  if (v4 == sub_638A34(a2 - 1080))
  {
    uint64_t v5 = sub_638A2C((uint64_t)v24);
    uint64_t v6 = sub_638A2C(a2 - 1080);
  }
  else
  {
    uint64_t v5 = sub_638A34((uint64_t)v24);
    uint64_t v6 = sub_638A34(a2 - 1080);
  }
  if (v5 <= v6)
  {
    for (unint64_t i = a1 + 1080; i < a2; i += 1080)
    {
      uint64_t v11 = sub_638A34((uint64_t)v24);
      if (v11 == sub_638A34(i))
      {
        uint64_t v12 = sub_638A2C((uint64_t)v24);
        uint64_t v13 = sub_638A2C(i);
      }
      else
      {
        uint64_t v12 = sub_638A34((uint64_t)v24);
        uint64_t v13 = sub_638A34(i);
      }
      if (v12 > v13) {
        break;
      }
    }
  }
  else
  {
    for (unint64_t i = a1 + 1080; ; i += 1080)
    {
      uint64_t v8 = sub_638A34((uint64_t)v24);
      if (v8 == sub_638A34(i))
      {
        uint64_t v9 = sub_638A2C((uint64_t)v24);
        uint64_t v10 = sub_638A2C(i);
      }
      else
      {
        uint64_t v9 = sub_638A34((uint64_t)v24);
        uint64_t v10 = sub_638A34(i);
      }
      if (v9 > v10) {
        break;
      }
    }
  }
  if (i < a2)
  {
    for (a2 -= 1080; ; a2 -= 1080)
    {
      uint64_t v14 = sub_638A34((uint64_t)v24);
      if (v14 == sub_638A34(a2))
      {
        uint64_t v15 = sub_638A2C((uint64_t)v24);
        uint64_t v16 = sub_638A2C(a2);
      }
      else
      {
        uint64_t v15 = sub_638A34((uint64_t)v24);
        uint64_t v16 = sub_638A34(a2);
      }
      if (v15 <= v16) {
        break;
      }
    }
  }
  while (i < a2)
  {
    sub_7574DC((uint64_t)v25, i);
    sub_874FD8(i, a2);
    sub_874FD8(a2, (uint64_t)v25);
    sub_52F1E8((uint64_t)v25);
    do
    {
      i += 1080;
      uint64_t v17 = sub_638A34((uint64_t)v24);
      if (v17 == sub_638A34(i))
      {
        uint64_t v18 = sub_638A2C((uint64_t)v24);
        uint64_t v19 = sub_638A2C(i);
      }
      else
      {
        uint64_t v18 = sub_638A34((uint64_t)v24);
        uint64_t v19 = sub_638A34(i);
      }
    }
    while (v18 <= v19);
    do
    {
      a2 -= 1080;
      uint64_t v20 = sub_638A34((uint64_t)v24);
      if (v20 == sub_638A34(a2))
      {
        uint64_t v21 = sub_638A2C((uint64_t)v24);
        uint64_t v22 = sub_638A2C(a2);
      }
      else
      {
        uint64_t v21 = sub_638A34((uint64_t)v24);
        uint64_t v22 = sub_638A34(a2);
      }
    }
    while (v21 > v22);
  }
  if (i - 1080 != a1) {
    sub_874FD8(a1, i - 1080);
  }
  sub_874FD8(i - 1080, (uint64_t)v24);
  sub_52F1E8((uint64_t)v24);
  return i;
}

void sub_87DF1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_87DF30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_87DF44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_87DF58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_87DF6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_87DF80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_87DF94(uint64_t a1, unint64_t a2)
{
  sub_7574DC((uint64_t)v25, a1);
  for (uint64_t i = 0; ; i += 1080)
  {
    uint64_t v5 = sub_638A34(a1 + i + 1080);
    if (v5 == sub_638A34((uint64_t)v25))
    {
      uint64_t v6 = sub_638A2C(a1 + i + 1080);
      uint64_t v7 = sub_638A2C((uint64_t)v25);
    }
    else
    {
      uint64_t v6 = sub_638A34(a1 + i + 1080);
      uint64_t v7 = sub_638A34((uint64_t)v25);
    }
    if (v6 <= v7) {
      break;
    }
  }
  uint64_t v8 = a1 + i;
  unint64_t v9 = a1 + i + 1080;
  if (i)
  {
    do
    {
      a2 -= 1080;
      uint64_t v10 = sub_638A34(a2);
      if (v10 == sub_638A34((uint64_t)v25))
      {
        uint64_t v11 = sub_638A2C(a2);
        uint64_t v12 = sub_638A2C((uint64_t)v25);
      }
      else
      {
        uint64_t v11 = sub_638A34(a2);
        uint64_t v12 = sub_638A34((uint64_t)v25);
      }
    }
    while (v11 <= v12);
  }
  else
  {
    do
    {
      if (v9 >= a2) {
        break;
      }
      a2 -= 1080;
      uint64_t v13 = sub_638A34(a2);
      if (v13 == sub_638A34((uint64_t)v25))
      {
        uint64_t v14 = sub_638A2C(a2);
        uint64_t v15 = sub_638A2C((uint64_t)v25);
      }
      else
      {
        uint64_t v14 = sub_638A34(a2);
        uint64_t v15 = sub_638A34((uint64_t)v25);
      }
    }
    while (v14 <= v15);
  }
  if (v9 < a2)
  {
    unint64_t v16 = a1 + i + 1080;
    unint64_t v17 = a2;
    do
    {
      sub_7574DC((uint64_t)v26, v16);
      sub_874FD8(v16, v17);
      sub_874FD8(v17, (uint64_t)v26);
      sub_52F1E8((uint64_t)v26);
      do
      {
        uint64_t v8 = v16;
        v16 += 1080;
        uint64_t v18 = sub_638A34(v16);
        if (v18 == sub_638A34((uint64_t)v25))
        {
          uint64_t v19 = sub_638A2C(v16);
          uint64_t v20 = sub_638A2C((uint64_t)v25);
        }
        else
        {
          uint64_t v19 = sub_638A34(v16);
          uint64_t v20 = sub_638A34((uint64_t)v25);
        }
      }
      while (v19 > v20);
      unint64_t v16 = v8 + 1080;
      do
      {
        v17 -= 1080;
        uint64_t v21 = sub_638A34(v17);
        if (v21 == sub_638A34((uint64_t)v25))
        {
          uint64_t v22 = sub_638A2C(v17);
          uint64_t v23 = sub_638A2C((uint64_t)v25);
        }
        else
        {
          uint64_t v22 = sub_638A34(v17);
          uint64_t v23 = sub_638A34((uint64_t)v25);
        }
      }
      while (v22 <= v23);
    }
    while (v16 < v17);
  }
  if (v8 != a1) {
    sub_874FD8(a1, v8);
  }
  sub_874FD8(v8, (uint64_t)v25);
  sub_52F1E8((uint64_t)v25);
  return v8;
}

void sub_87E27C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_87E290(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_87E2A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_87E2B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_87E2CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_87E2E0(uint64_t a1, uint64_t a2)
{
  BOOL v4 = 1;
  switch(0x1A8C536FE1A8C537 * ((a2 - a1) >> 3))
  {
    case 0:
    case 1:
      return v4;
    case 2:
      uint64_t v5 = a2 - 1080;
      uint64_t v6 = sub_638A34(a2 - 1080);
      if (v6 == sub_638A34(a1))
      {
        uint64_t v7 = sub_638A2C(v5);
        if (v7 <= sub_638A2C(a1)) {
          return 1;
        }
      }
      else
      {
        uint64_t v20 = sub_638A34(v5);
        if (v20 <= sub_638A34(a1)) {
          return 1;
        }
      }
      sub_7574DC((uint64_t)v22, a1);
      sub_874FD8(a1, v5);
      sub_874FD8(v5, (uint64_t)v22);
      sub_52F1E8((uint64_t)v22);
      return 1;
    case 3:
      sub_8765EC(a1, a1 + 1080, a2 - 1080);
      return v4;
    case 4:
      sub_877344(a1, a1 + 1080, a1 + 2160, a2 - 1080);
      return v4;
    case 5:
      sub_877548(a1, a1 + 1080, a1 + 2160, a1 + 3240, a2 - 1080);
      return v4;
    default:
      uint64_t v8 = a1 + 2160;
      sub_8765EC(a1, a1 + 1080, a1 + 2160);
      uint64_t v9 = a1 + 3240;
      if (a1 + 3240 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    uint64_t v12 = sub_638A34(v9);
    if (v12 == sub_638A34(v8))
    {
      uint64_t v13 = sub_638A2C(v9);
      uint64_t v14 = sub_638A2C(v8);
    }
    else
    {
      uint64_t v13 = sub_638A34(v9);
      uint64_t v14 = sub_638A34(v8);
    }
    if (v13 > v14) {
      break;
    }
LABEL_7:
    uint64_t v8 = v9;
    v10 += 1080;
    v9 += 1080;
    if (v9 == a2) {
      return 1;
    }
  }
  sub_7574DC((uint64_t)v22, v9);
  sub_874FD8(v9, v8);
  uint64_t v15 = a1;
  if (v8 == a1)
  {
LABEL_22:
    sub_874FD8(v15, (uint64_t)v22);
    if (++v11 == 8) {
      goto LABEL_25;
    }
LABEL_23:
    sub_52F1E8((uint64_t)v22);
    goto LABEL_7;
  }
  uint64_t v16 = v10;
  while (1)
  {
    uint64_t v17 = sub_638A34((uint64_t)v22);
    if (v17 == sub_638A34(a1 + v16 + 1080)) {
      break;
    }
    uint64_t v19 = sub_638A34((uint64_t)v22);
    if (v19 <= sub_638A34(a1 + v16 + 1080))
    {
      sub_874FD8(v8, (uint64_t)v22);
      if (++v11 != 8) {
        goto LABEL_23;
      }
      goto LABEL_25;
    }
LABEL_14:
    v8 -= 1080;
    sub_874FD8(a1 + v16 + 2160, a1 + v16 + 1080);
    v16 -= 1080;
    if (v16 == -2160)
    {
      uint64_t v15 = a1;
      goto LABEL_22;
    }
  }
  uint64_t v18 = sub_638A2C((uint64_t)v22);
  if (v18 > sub_638A2C(a1 + v16 + 1080)) {
    goto LABEL_14;
  }
  sub_874FD8(a1 + v16 + 2160, (uint64_t)v22);
  if (++v11 != 8) {
    goto LABEL_23;
  }
LABEL_25:
  BOOL v4 = v9 + 1080 == a2;
  sub_52F1E8((uint64_t)v22);
  return v4;
}

void sub_87E63C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_87E668(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != (void *)a2)
  {
    uint64_t v8 = (a2 - (uint64_t)a1) / 1080;
    if (a2 - (uint64_t)a1 >= 1081)
    {
      unint64_t v9 = (unint64_t)(v8 - 2) >> 1;
      unint64_t v10 = v9 + 1;
      uint64_t v11 = (uint64_t)&a1[135 * v9];
      do
      {
        sub_87E81C(a1, a4, v8, v11);
        v11 -= 1080;
        --v10;
      }
      while (v10);
    }
    uint64_t v12 = a2;
    if (a2 != a3)
    {
      uint64_t v13 = a2;
      while (1)
      {
        uint64_t v14 = sub_638A34(v13);
        if (v14 == sub_638A34((uint64_t)a1))
        {
          uint64_t v15 = sub_638A2C(v13);
          if (v15 > sub_638A2C((uint64_t)a1)) {
            goto LABEL_12;
          }
        }
        else
        {
          uint64_t v16 = sub_638A34(v13);
          if (v16 > sub_638A34((uint64_t)a1))
          {
LABEL_12:
            sub_7574DC((uint64_t)v18, v13);
            sub_874FD8(v13, (uint64_t)a1);
            sub_874FD8((uint64_t)a1, (uint64_t)v18);
            sub_52F1E8((uint64_t)v18);
            sub_87E81C(a1, a4, v8, (uint64_t)a1);
          }
        }
        v13 += 1080;
        if (v13 == a3)
        {
          uint64_t v12 = a3;
          break;
        }
      }
    }
    sub_87EADC(a1, a2, a4);
    return v12;
  }
  return a3;
}

void *sub_87E81C(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 < 2) {
    return result;
  }
  uint64_t v6 = result;
  uint64_t v7 = v4 >> 1;
  if ((uint64_t)(v4 >> 1) < 0x1A8C536FE1A8C537 * ((a4 - (uint64_t)result) >> 3)) {
    return result;
  }
  uint64_t v9 = (0x3518A6DFC3518A6ELL * ((a4 - (uint64_t)result) >> 3)) | 1;
  uint64_t v10 = (uint64_t)&result[135 * v9];
  uint64_t v11 = 0x3518A6DFC3518A6ELL * ((a4 - (uint64_t)result) >> 3) + 2;
  if (v11 < a3)
  {
    uint64_t v12 = sub_638A34((uint64_t)&result[135 * v9]);
    if (v12 == sub_638A34(v10 + 1080))
    {
      uint64_t v13 = sub_638A2C((uint64_t)&v6[135 * v9]);
      if (v13 <= sub_638A2C(v10 + 1080)) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    uint64_t v14 = sub_638A34((uint64_t)&v6[135 * v9]);
    if (v14 > sub_638A34(v10 + 1080))
    {
LABEL_8:
      v10 += 1080;
      uint64_t v9 = v11;
    }
  }
LABEL_9:
  uint64_t v15 = sub_638A34(v10);
  if (v15 == sub_638A34(a4))
  {
    uint64_t v16 = sub_638A2C(v10);
    __n128 result = (void *)sub_638A2C(a4);
    if (v16 > (uint64_t)result) {
      return result;
    }
  }
  else
  {
    uint64_t v17 = sub_638A34(v10);
    __n128 result = (void *)sub_638A34(a4);
    if (v17 > (uint64_t)result) {
      return result;
    }
  }
  sub_7574DC((uint64_t)v27, a4);
  sub_874FD8(a4, v10);
  if (v7 >= v9)
  {
    while (1)
    {
      uint64_t v19 = 2 * v9;
      uint64_t v9 = (2 * v9) | 1;
      uint64_t v18 = (uint64_t)&v6[135 * v9];
      uint64_t v20 = v19 + 2;
      if (v19 + 2 < a3)
      {
        uint64_t v21 = sub_638A34((uint64_t)&v6[135 * v9]);
        if (v21 == sub_638A34(v18 + 1080))
        {
          uint64_t v22 = sub_638A2C((uint64_t)&v6[135 * v9]);
          uint64_t v23 = sub_638A2C(v18 + 1080);
        }
        else
        {
          uint64_t v22 = sub_638A34((uint64_t)&v6[135 * v9]);
          uint64_t v23 = sub_638A34(v18 + 1080);
        }
        if (v22 > v23)
        {
          v18 += 1080;
          uint64_t v9 = v20;
        }
      }
      uint64_t v24 = sub_638A34(v18);
      if (v24 == sub_638A34((uint64_t)v27))
      {
        uint64_t v25 = sub_638A2C(v18);
        uint64_t v26 = sub_638A2C((uint64_t)v27);
      }
      else
      {
        uint64_t v25 = sub_638A34(v18);
        uint64_t v26 = sub_638A34((uint64_t)v27);
      }
      if (v25 > v26) {
        break;
      }
      sub_874FD8(v10, v18);
      uint64_t v10 = v18;
      if (v7 < v9) {
        goto LABEL_26;
      }
    }
  }
  uint64_t v18 = v10;
LABEL_26:
  sub_874FD8(v18, (uint64_t)v27);
  return sub_52F1E8((uint64_t)v27);
}

void sub_87EAC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_87EADC(void *result, uint64_t a2, uint64_t a3)
{
  if (a2 - (uint64_t)result >= 1081)
  {
    unint64_t v4 = result;
    int64_t v5 = (a2 - (uint64_t)result) / 0x438uLL;
    uint64_t v6 = a2 - 1080;
    do
    {
      sub_7574DC((uint64_t)v10, (uint64_t)v4);
      uint64_t v8 = sub_877D9C((uint64_t)v4, a3, v5);
      uint64_t v9 = v8;
      if (v6 == v8)
      {
        sub_874FD8(v8, (uint64_t)v10);
      }
      else
      {
        sub_874FD8(v8, v6);
        sub_874FD8(v6, (uint64_t)v10);
        sub_87EC28(v4, v9 + 1080, a3, 0x1A8C536FE1A8C537 * ((v9 + 1080 - (uint64_t)v4) >> 3));
      }
      __n128 result = sub_52F1E8((uint64_t)v10);
      v6 -= 1080;
    }
    while (v5-- > 2);
  }
  return result;
}

void sub_87EC14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_87EC28(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    int64_t v5 = result;
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = (uint64_t)&result[135 * (v4 >> 1)];
    uint64_t v8 = a2 - 1080;
    uint64_t v9 = sub_638A34(v7);
    if (v9 == sub_638A34(v8))
    {
      uint64_t v10 = sub_638A2C(v7);
      __n128 result = (void *)sub_638A2C(v8);
      if (v10 <= (uint64_t)result) {
        return result;
      }
    }
    else
    {
      uint64_t v11 = sub_638A34(v7);
      __n128 result = (void *)sub_638A34(v8);
      if (v11 <= (uint64_t)result) {
        return result;
      }
    }
    sub_7574DC((uint64_t)v17, v8);
    sub_874FD8(v8, v7);
    if (v4 >= 2)
    {
      while (1)
      {
        unint64_t v13 = v6 - 1;
        unint64_t v6 = (v6 - 1) >> 1;
        uint64_t v12 = (uint64_t)&v5[135 * v6];
        uint64_t v14 = sub_638A34(v12);
        if (v14 == sub_638A34((uint64_t)v17))
        {
          uint64_t v15 = sub_638A2C((uint64_t)&v5[135 * v6]);
          uint64_t v16 = sub_638A2C((uint64_t)v17);
        }
        else
        {
          uint64_t v15 = sub_638A34((uint64_t)&v5[135 * v6]);
          uint64_t v16 = sub_638A34((uint64_t)v17);
        }
        if (v15 <= v16) {
          break;
        }
        sub_874FD8(v7, (uint64_t)&v5[135 * v6]);
        uint64_t v7 = (uint64_t)&v5[135 * v6];
        if (v13 <= 1) {
          goto LABEL_13;
        }
      }
    }
    uint64_t v12 = v7;
LABEL_13:
    sub_874FD8(v12, (uint64_t)v17);
    return sub_52F1E8((uint64_t)v17);
  }
  return result;
}

void sub_87EDB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_87EDCC(int *a1, int *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      uint64_t v8 = sub_638A2C((uint64_t)(a2 - 102));
      if (v8 == sub_638A2C((uint64_t)a1))
      {
        uint64_t v9 = sub_638A34((uint64_t)(a2 - 102));
        if (v9 <= sub_638A34((uint64_t)a1)) {
          return;
        }
      }
      else
      {
        uint64_t v17 = sub_638A2C((uint64_t)(a2 - 102));
        if (v17 <= sub_638A2C((uint64_t)a1)) {
          return;
        }
      }
      sub_87A1D4((uint64_t)a1, (uint64_t)(a2 - 102));
    }
    else if ((uint64_t)a4 <= 0)
    {
      sub_87F05C(a1, a2);
    }
    else
    {
      unint64_t v13 = (void *)a5;
      uint64_t v14 = a4 >> 1;
      uint64_t v15 = (uint64_t)&a1[102 * (a4 >> 1)];
      if ((uint64_t)a4 <= a6)
      {
        sub_87F670((uint64_t)a1, &a1[102 * (a4 >> 1)], a3, a4 >> 1, a5);
        unint64_t v18 = a4 - v14;
        uint64_t v19 = &v13[51 * v14];
        sub_87F670((uint64_t)&a1[102 * (a4 >> 1)], a2, a3, v18, (uint64_t)v19);
        sub_87990C((uint64_t)v13, v19, (uint64_t)v19, (uint64_t)&v13[51 * a4], (uint64_t)a1);
        if (v13)
        {
          unint64_t v20 = 0;
          do
          {
            uint64_t v21 = (void *)v13[45];
            if (v21)
            {
              v13[46] = v21;
              operator delete(v21);
            }
            sub_4F32CC(v13);
            ++v20;
            v13 += 51;
          }
          while (v20 < a4);
        }
      }
      else
      {
        sub_87EDCC(a1, &a1[102 * (a4 >> 1)], a3, a4 >> 1, a5, a6);
        uint64_t v16 = a4 - v14;
        sub_87EDCC(v15, a2, a3, v16, v13, a6);
        sub_87FF74((uint64_t)a1, v15, (uint64_t)a2, a3, v14, v16, v13, a6);
      }
    }
  }
}

void sub_87F048(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_879BD8((void **)va);
  _Unwind_Resume(a1);
}

void sub_87F05C(int *a1, int *a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = (uint64_t)(a1 + 102);
    if (a1 + 102 != a2)
    {
      uint64_t v4 = 0;
      int64_t v5 = a1;
      while (1)
      {
        uint64_t v6 = (uint64_t)v5;
        int64_t v5 = (int *)v3;
        uint64_t v7 = sub_638A2C(v3);
        if (v7 == sub_638A2C(v6))
        {
          uint64_t v8 = sub_638A34((uint64_t)v5);
          uint64_t v9 = sub_638A34(v6);
        }
        else
        {
          uint64_t v8 = sub_638A2C((uint64_t)v5);
          uint64_t v9 = sub_638A2C(v6);
        }
        if (v8 > v9) {
          break;
        }
LABEL_5:
        uint64_t v3 = (uint64_t)(v5 + 102);
        v4 += 408;
        if (v5 + 102 == a2) {
          return;
        }
      }
      int v45 = *v5;
      *(_OWORD *)__p = *(_OWORD *)(v6 + 416);
      uint64_t v47 = *(void *)(v6 + 432);
      *(void *)(v6 + 416) = 0;
      *(void *)(v6 + 424) = 0;
      *(void *)(v6 + 432) = 0;
      long long v10 = *(_OWORD *)(v6 + 456);
      long long v48 = *(_OWORD *)(v6 + 440);
      long long v49 = v10;
      long long v11 = *(_OWORD *)(v6 + 488);
      long long v50 = *(_OWORD *)(v6 + 472);
      uint64_t v53 = *(void *)(v6 + 520);
      long long v12 = *(_OWORD *)(v6 + 504);
      long long v51 = v11;
      long long v52 = v12;
      *(_OWORD *)uint64_t v54 = *(_OWORD *)(v6 + 528);
      uint64_t v55 = *(void *)(v6 + 544);
      *(void *)(v6 + 544) = 0;
      *(void *)(v6 + 536) = 0;
      *(void *)(v6 + 528) = 0;
      *(_OWORD *)uint64_t v56 = *(_OWORD *)(v6 + 552);
      uint64_t v57 = *(void *)(v6 + 568);
      *(void *)(v6 + 560) = 0;
      *(void *)(v6 + 568) = 0;
      *(void *)(v6 + 552) = 0;
      long long v58 = *(_OWORD *)(v6 + 576);
      unsigned int v60 = *(_DWORD *)(v6 + 600);
      if (v60 <= 1) {
        uint64_t v59 = *(void *)(v6 + 592);
      }
      long long v13 = *(_OWORD *)(v6 + 624);
      long long v61 = *(_OWORD *)(v6 + 608);
      long long v14 = *(_OWORD *)(v6 + 640);
      long long v62 = v13;
      long long v63 = v14;
      uint64_t v64 = *(void *)(v6 + 656);
      long long v65 = *(_OWORD *)(v6 + 664);
      uint64_t v66 = *(void *)(v6 + 680);
      *(void *)(v6 + 664) = 0;
      *(void *)(v6 + 672) = 0;
      *(void *)(v6 + 680) = 0;
      char v67 = *(unsigned char *)(v6 + 688);
      long long v68 = *(_OWORD *)(v6 + 696);
      uint64_t v69 = *(void *)(v6 + 712);
      *(void *)(v6 + 696) = 0;
      *(void *)(v6 + 704) = 0;
      *(void *)(v6 + 712) = 0;
      *(_OWORD *)v70 = *(_OWORD *)(v6 + 720);
      *(_OWORD *)&v70[9] = *(_OWORD *)(v6 + 729);
      long long v71 = *(_OWORD *)(v6 + 748);
      int v72 = *(_DWORD *)(v6 + 764);
      long long v73 = *(_OWORD *)(v6 + 768);
      uint64_t v74 = *(void *)(v6 + 784);
      *(void *)(v6 + 776) = 0;
      *(void *)(v6 + 768) = 0;
      *(void *)(v6 + 784) = 0;
      long long v15 = *(_OWORD *)(v6 + 792);
      int v76 = *(_DWORD *)(v6 + 808);
      uint64_t v16 = v4;
      long long v75 = v15;
      while (1)
      {
        uint64_t v17 = (char *)a1 + v16;
        sub_52ECD8((uint64_t)a1 + v16 + 408, (uint64_t)a1 + v16);
        *(_OWORD *)(v17 + 748) = *(_OWORD *)(v17 + 340);
        *((_DWORD *)v17 + 191) = *((_DWORD *)v17 + 89);
        unint64_t v18 = (void **)((char *)a1 + v16 + 768);
        uint64_t v19 = *v18;
        if (*v18)
        {
          *((void *)v17 + 97) = v19;
          operator delete(v19);
          void *v18 = 0;
          *((void *)v17 + 97) = 0;
          *((void *)v17 + 98) = 0;
        }
        void *v18 = (void *)*((void *)v17 + 45);
        uint64_t v20 = *((void *)v17 + 47);
        *((void *)v17 + 97) = *((void *)v17 + 46);
        *((void *)v17 + 98) = v20;
        *((void *)v17 + 45) = 0;
        *((void *)v17 + 46) = 0;
        *((void *)v17 + 47) = 0;
        *(_OWORD *)(v17 + 792) = *((_OWORD *)v17 + 24);
        *((_DWORD *)v17 + 202) = *((_DWORD *)v17 + 100);
        if (!v16)
        {
          uint64_t v24 = (uint64_t)a1;
          goto LABEL_23;
        }
        uint64_t v21 = sub_638A2C((uint64_t)&v45);
        if (v21 == sub_638A2C((uint64_t)a1 + v16 - 408))
        {
          uint64_t v22 = sub_638A34((uint64_t)&v45);
          uint64_t v23 = sub_638A34((uint64_t)a1 + v16 - 408);
        }
        else
        {
          uint64_t v22 = sub_638A2C((uint64_t)&v45);
          uint64_t v23 = sub_638A2C((uint64_t)a1 + v16 - 408);
        }
        if (v22 <= v23) {
          break;
        }
        v16 -= 408;
      }
      uint64_t v24 = (uint64_t)a1 + v16;
LABEL_23:
      sub_52ECD8(v24, (uint64_t)&v45);
      uint64_t v25 = (char *)a1 + v16;
      int v26 = v72;
      *(_OWORD *)((char *)a1 + v16 + 340) = v71;
      *(int *)((char *)a1 + v16 + 356) = v26;
      uint64_t v27 = (void **)((char *)a1 + v16 + 360);
      uint64_t v28 = *v27;
      if (*v27)
      {
        *(void *)(v24 + 368) = v28;
        operator delete(v28);
        *uint64_t v27 = 0;
        *(void *)((char *)a1 + v16 + 368) = 0;
        *(void *)((char *)a1 + v16 + 376) = 0;
      }
      *uint64_t v27 = (void *)v73;
      *(void *)(v24 + 368) = *((void *)&v73 + 1);
      *(void *)(v24 + 376) = v74;
      long long v73 = 0uLL;
      uint64_t v74 = 0;
      long long v29 = v75;
      *((_DWORD *)v25 + 100) = v76;
      *((_OWORD *)v25 + 24) = v29;
      if ((void)v68)
      {
        *((void *)&v68 + 1) = v68;
        operator delete((void *)v68);
      }
      uint64_t v30 = (void **)v65;
      if (!(void)v65)
      {
LABEL_62:
        if (v56[0])
        {
          v56[1] = v56[0];
          operator delete(v56[0]);
        }
        if (v54[0])
        {
          v54[1] = v54[0];
          operator delete(v54[0]);
        }
        uint64_t v41 = __p[0];
        if (__p[0])
        {
          uint64_t v42 = __p[1];
          uint64_t v43 = __p[0];
          if (__p[1] != __p[0])
          {
            do
              uint64_t v42 = (void *)sub_4D4B58((uint64_t)v42 - 160);
            while (v42 != v41);
            uint64_t v43 = __p[0];
          }
          __p[1] = v41;
          operator delete(v43);
        }
        goto LABEL_5;
      }
      uint64_t v31 = *((void *)&v65 + 1);
      int v32 = (void *)v65;
      if (*((void *)&v65 + 1) == (void)v65)
      {
LABEL_61:
        *((void *)&v65 + 1) = v30;
        operator delete(v32);
        goto LABEL_62;
      }
      while (1)
      {
        long long v34 = *(std::__shared_weak_count **)(v31 - 16);
        if (!v34 || atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          uint64_t v35 = *(void ***)(v31 - 64);
          if (v35) {
            goto LABEL_47;
          }
          goto LABEL_36;
        }
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
        uint64_t v35 = *(void ***)(v31 - 64);
        if (v35) {
          break;
        }
LABEL_36:
        uint64_t v36 = *(void **)(v31 - 80);
        *(void *)(v31 - 80) = 0;
        if (v36) {
          operator delete(v36);
        }
        uint64_t v37 = (void **)(v31 - 104);
        uint64_t v38 = *(void *)(v31 - 104);
        if (v38)
        {
          uint64_t v39 = *(void *)(v31 - 96);
          long long v33 = *(void **)(v31 - 104);
          if (v39 != v38)
          {
            do
            {
              if (*(char *)(v39 - 1) < 0) {
                operator delete(*(void **)(v39 - 24));
              }
              v39 -= 24;
            }
            while (v39 != v38);
            long long v33 = *v37;
          }
          *(void *)(v31 - 96) = v38;
          operator delete(v33);
        }
        v31 -= 104;
        if (v37 == v30)
        {
          int v32 = (void *)v65;
          goto LABEL_61;
        }
      }
      while (1)
      {
LABEL_47:
        long long v40 = (void **)*v35;
        if (*((char *)v35 + 191) < 0)
        {
          operator delete(v35[21]);
          if ((*((char *)v35 + 159) & 0x80000000) == 0)
          {
LABEL_49:
            if ((*((char *)v35 + 135) & 0x80000000) == 0) {
              goto LABEL_50;
            }
            goto LABEL_56;
          }
        }
        else if ((*((char *)v35 + 159) & 0x80000000) == 0)
        {
          goto LABEL_49;
        }
        operator delete(v35[17]);
        if ((*((char *)v35 + 135) & 0x80000000) == 0)
        {
LABEL_50:
          if ((*((char *)v35 + 95) & 0x80000000) == 0) {
            goto LABEL_51;
          }
          goto LABEL_57;
        }
LABEL_56:
        operator delete(v35[14]);
        if ((*((char *)v35 + 95) & 0x80000000) == 0)
        {
LABEL_51:
          if ((*((char *)v35 + 63) & 0x80000000) == 0) {
            goto LABEL_52;
          }
          goto LABEL_58;
        }
LABEL_57:
        operator delete(v35[9]);
        if ((*((char *)v35 + 63) & 0x80000000) == 0)
        {
LABEL_52:
          if (*((char *)v35 + 39) < 0) {
            goto LABEL_59;
          }
          goto LABEL_46;
        }
LABEL_58:
        operator delete(v35[5]);
        if (*((char *)v35 + 39) < 0) {
LABEL_59:
        }
          operator delete(v35[2]);
LABEL_46:
        operator delete(v35);
        uint64_t v35 = v40;
        if (!v40) {
          goto LABEL_36;
        }
      }
    }
  }
}

void sub_87F65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_639B78((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_87F670(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if (a4)
  {
    if (a4 == 2)
    {
      unint64_t v18 = a2 - 51;
      uint64_t v19 = sub_638A2C((uint64_t)(a2 - 51));
      uint64_t v20 = (void *)(a5 + 664);
      uint64_t v21 = (void *)(a5 + 360);
      if (v19 == sub_638A2C(a1))
      {
        uint64_t v22 = sub_638A34((uint64_t)(a2 - 51));
        uint64_t v23 = sub_638A34(a1);
      }
      else
      {
        uint64_t v22 = sub_638A2C((uint64_t)(a2 - 51));
        uint64_t v23 = sub_638A2C(a1);
      }
      if (v22 <= v23)
      {
        *(_DWORD *)a5 = *(_DWORD *)a1;
        *(void *)(a5 + 16) = 0;
        *(void *)(a5 + 24) = 0;
        *(void *)(a5 + 8) = 0;
        *(_OWORD *)(a5 + 8) = *(_OWORD *)(a1 + 8);
        *(void *)(a5 + 24) = *(void *)(a1 + 24);
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
        long long v47 = *(_OWORD *)(a1 + 32);
        long long v48 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)(a5 + 48) = *(_OWORD *)(a1 + 48);
        *(_OWORD *)(a5 + 64) = v48;
        *(_OWORD *)(a5 + 32) = v47;
        long long v49 = *(_OWORD *)(a1 + 96);
        uint64_t v50 = *(void *)(a1 + 112);
        *(_OWORD *)(a5 + 80) = *(_OWORD *)(a1 + 80);
        *(_OWORD *)(a5 + 96) = v49;
        *(void *)(a5 + 112) = v50;
        *(void *)(a5 + 120) = 0;
        *(void *)(a5 + 128) = 0;
        *(void *)(a5 + 136) = 0;
        *(_OWORD *)(a5 + 120) = *(_OWORD *)(a1 + 120);
        *(void *)(a5 + 136) = *(void *)(a1 + 136);
        *(void *)(a1 + 120) = 0;
        *(void *)(a1 + 128) = 0;
        *(void *)(a1 + 136) = 0;
        *(void *)(a5 + 144) = 0;
        *(void *)(a5 + 152) = 0;
        *(void *)(a5 + 160) = 0;
        *(_OWORD *)(a5 + 144) = *(_OWORD *)(a1 + 144);
        *(void *)(a5 + 160) = *(void *)(a1 + 160);
        *(void *)(a1 + 144) = 0;
        *(void *)(a1 + 152) = 0;
        *(void *)(a1 + 160) = 0;
        *(_OWORD *)(a5 + 168) = *(_OWORD *)(a1 + 168);
        *(_DWORD *)(a5 + 192) = *(_DWORD *)(a1 + 192);
        if (*(_DWORD *)(a1 + 192) <= 1u) {
          *(void *)(a5 + 184) = *(void *)(a1 + 184);
        }
        *(_OWORD *)(a5 + 200) = *(_OWORD *)(a1 + 200);
        long long v51 = *(_OWORD *)(a1 + 216);
        uint64_t v52 = *(void *)(a1 + 248);
        *(_OWORD *)(a5 + 232) = *(_OWORD *)(a1 + 232);
        *(_OWORD *)(a5 + 216) = v51;
        *(void *)(a5 + 248) = v52;
        *(void *)(a5 + 256) = 0;
        *(void *)(a5 + 264) = 0;
        *(void *)(a5 + 272) = 0;
        *(_OWORD *)(a5 + 256) = *(_OWORD *)(a1 + 256);
        *(void *)(a5 + 272) = *(void *)(a1 + 272);
        *(void *)(a1 + 264) = 0;
        *(void *)(a1 + 272) = 0;
        *(void *)(a1 + 256) = 0;
        *(unsigned char *)(a5 + 280) = *(unsigned char *)(a1 + 280);
        *(void *)(a5 + 296) = 0;
        *(void *)(a5 + 304) = 0;
        *(void *)(a5 + 288) = 0;
        *(_OWORD *)(a5 + 288) = *(_OWORD *)(a1 + 288);
        *(void *)(a5 + 304) = *(void *)(a1 + 304);
        *(void *)(a1 + 288) = 0;
        *(void *)(a1 + 296) = 0;
        *(void *)(a1 + 304) = 0;
        long long v53 = *(_OWORD *)(a1 + 312);
        *(_OWORD *)(a5 + 321) = *(_OWORD *)(a1 + 321);
        *(_OWORD *)(a5 + 312) = v53;
        long long v54 = *(_OWORD *)(a1 + 340);
        *(_DWORD *)(a5 + 356) = *(_DWORD *)(a1 + 356);
        *(_OWORD *)(a5 + 340) = v54;
        *(void *)(a5 + 368) = 0;
        *(void *)(a5 + 376) = 0;
        *(void *)(a5 + 360) = 0;
        *(void *)(a5 + 360) = *(void *)(a1 + 360);
        *(void *)(a5 + 368) = *(void *)(a1 + 368);
        *(void *)(a5 + 376) = *(void *)(a1 + 376);
        *(void *)(a1 + 360) = 0;
        *(void *)(a1 + 368) = 0;
        *(void *)(a1 + 376) = 0;
        long long v55 = *(_OWORD *)(a1 + 384);
        *(_DWORD *)(a5 + 400) = *(_DWORD *)(a1 + 400);
        *(_OWORD *)(a5 + 384) = v55;
        *(_DWORD *)(a5 + 408) = *v18;
        *(void *)(a5 + 424) = 0;
        *(void *)(a5 + 432) = 0;
        *(void *)(a5 + 416) = 0;
        *(_OWORD *)(a5 + 416) = *((_OWORD *)a2 - 25);
        *(void *)(a5 + 432) = *(a2 - 48);
        *(a2 - 50) = 0;
        *(a2 - 49) = 0;
        *(a2 - 48) = 0;
        long long v56 = *(_OWORD *)(a2 - 47);
        long long v57 = *(_OWORD *)(a2 - 43);
        *(_OWORD *)(a5 + 456) = *(_OWORD *)(a2 - 45);
        *(_OWORD *)(a5 + 472) = v57;
        *(_OWORD *)(a5 + 440) = v56;
        long long v58 = *(_OWORD *)(a2 - 41);
        long long v59 = *(_OWORD *)(a2 - 39);
        *(void *)(a5 + 520) = *(a2 - 37);
        *(_OWORD *)(a5 + 488) = v58;
        *(_OWORD *)(a5 + 504) = v59;
        *(void *)(a5 + 528) = 0;
        *(void *)(a5 + 544) = 0;
        *(void *)(a5 + 536) = 0;
        *(_OWORD *)(a5 + 528) = *((_OWORD *)a2 - 18);
        *(void *)(a5 + 544) = *(a2 - 34);
        *(a2 - 36) = 0;
        *(a2 - 35) = 0;
        *(a2 - 34) = 0;
        *(void *)(a5 + 552) = 0;
        *(void *)(a5 + 560) = 0;
        *(void *)(a5 + 568) = 0;
        *(_OWORD *)(a5 + 552) = *(_OWORD *)(a2 - 33);
        *(void *)(a5 + 568) = *(a2 - 31);
        *(a2 - 33) = 0;
        *(a2 - 32) = 0;
        *(a2 - 31) = 0;
        *(_OWORD *)(a5 + 576) = *((_OWORD *)a2 - 15);
        *(_DWORD *)(a5 + 600) = *((_DWORD *)a2 - 54);
        if (*((_DWORD *)a2 - 54) <= 1u) {
          *(void *)(a5 + 592) = *(a2 - 28);
        }
        *(_OWORD *)(a5 + 608) = *((_OWORD *)a2 - 13);
        long long v60 = *((_OWORD *)a2 - 12);
        long long v61 = *((_OWORD *)a2 - 11);
        *(void *)(a5 + 656) = *(a2 - 20);
        *(_OWORD *)(a5 + 624) = v60;
        *(_OWORD *)(a5 + 640) = v61;
        *(void *)(a5 + 672) = 0;
        *(void *)(a5 + 680) = 0;
        void *v20 = 0;
        *(_OWORD *)uint64_t v20 = *(_OWORD *)(a2 - 19);
        *(void *)(a5 + 680) = *(a2 - 17);
        *(a2 - 18) = 0;
        *(a2 - 17) = 0;
        *(a2 - 19) = 0;
        *(unsigned char *)(a5 + 688) = *((unsigned char *)a2 - 128);
        *(void *)(a5 + 704) = 0;
        *(void *)(a5 + 712) = 0;
        *(void *)(a5 + 696) = 0;
        *(_OWORD *)(a5 + 696) = *(_OWORD *)(a2 - 15);
        *(void *)(a5 + 712) = *(a2 - 13);
        *(a2 - 15) = 0;
        *(a2 - 14) = 0;
        *(a2 - 13) = 0;
        long long v62 = *((_OWORD *)a2 - 6);
        *(_OWORD *)(a5 + 729) = *(_OWORD *)((char *)a2 - 87);
        *(_OWORD *)(a5 + 720) = v62;
        long long v63 = *(_OWORD *)((char *)a2 - 68);
        *(_DWORD *)(a5 + 764) = *((_DWORD *)a2 - 13);
        *(_OWORD *)(a5 + 748) = v63;
        *(void *)(a5 + 768) = 0;
        *(void *)(a5 + 784) = 0;
        *(void *)(a5 + 776) = 0;
        *(_OWORD *)(a5 + 768) = *((_OWORD *)a2 - 3);
        *(void *)(a5 + 784) = *(a2 - 4);
        *(a2 - 6) = 0;
        *(a2 - 5) = 0;
        *(a2 - 4) = 0;
        long long v44 = (_OWORD *)(a5 + 792);
        long long v45 = *(_OWORD *)(a2 - 3);
        int v46 = *((_DWORD *)a2 - 2);
      }
      else
      {
        *(_DWORD *)a5 = *v18;
        *(void *)(a5 + 16) = 0;
        *(void *)(a5 + 24) = 0;
        *(void *)(a5 + 8) = 0;
        *(_OWORD *)(a5 + 8) = *((_OWORD *)a2 - 25);
        *(void *)(a5 + 24) = *(a2 - 48);
        *(a2 - 50) = 0;
        *(a2 - 49) = 0;
        *(a2 - 48) = 0;
        long long v27 = *(_OWORD *)(a2 - 47);
        long long v28 = *(_OWORD *)(a2 - 43);
        *(_OWORD *)(a5 + 48) = *(_OWORD *)(a2 - 45);
        *(_OWORD *)(a5 + 64) = v28;
        *(_OWORD *)(a5 + 32) = v27;
        long long v29 = *(_OWORD *)(a2 - 39);
        uint64_t v30 = *(a2 - 37);
        *(_OWORD *)(a5 + 80) = *(_OWORD *)(a2 - 41);
        *(_OWORD *)(a5 + 96) = v29;
        *(void *)(a5 + 112) = v30;
        *(void *)(a5 + 120) = 0;
        *(void *)(a5 + 128) = 0;
        *(void *)(a5 + 136) = 0;
        *(_OWORD *)(a5 + 120) = *((_OWORD *)a2 - 18);
        *(void *)(a5 + 136) = *(a2 - 34);
        *(a2 - 36) = 0;
        *(a2 - 35) = 0;
        *(a2 - 34) = 0;
        *(void *)(a5 + 144) = 0;
        *(void *)(a5 + 152) = 0;
        *(void *)(a5 + 160) = 0;
        *(_OWORD *)(a5 + 144) = *(_OWORD *)(a2 - 33);
        *(void *)(a5 + 160) = *(a2 - 31);
        *(a2 - 33) = 0;
        *(a2 - 32) = 0;
        *(a2 - 31) = 0;
        *(_OWORD *)(a5 + 168) = *((_OWORD *)a2 - 15);
        *(_DWORD *)(a5 + 192) = *((_DWORD *)a2 - 54);
        if (*((_DWORD *)a2 - 54) <= 1u) {
          *(void *)(a5 + 184) = *(a2 - 28);
        }
        *(_OWORD *)(a5 + 200) = *((_OWORD *)a2 - 13);
        long long v31 = *((_OWORD *)a2 - 12);
        uint64_t v32 = *(a2 - 20);
        *(_OWORD *)(a5 + 232) = *((_OWORD *)a2 - 11);
        *(_OWORD *)(a5 + 216) = v31;
        *(void *)(a5 + 248) = v32;
        *(void *)(a5 + 256) = 0;
        *(void *)(a5 + 264) = 0;
        *(void *)(a5 + 272) = 0;
        *(_OWORD *)(a5 + 256) = *(_OWORD *)(a2 - 19);
        *(void *)(a5 + 272) = *(a2 - 17);
        *(a2 - 18) = 0;
        *(a2 - 17) = 0;
        *(a2 - 19) = 0;
        *(unsigned char *)(a5 + 280) = *((unsigned char *)a2 - 128);
        *(void *)(a5 + 296) = 0;
        *(void *)(a5 + 304) = 0;
        *(void *)(a5 + 288) = 0;
        *(_OWORD *)(a5 + 288) = *(_OWORD *)(a2 - 15);
        *(void *)(a5 + 304) = *(a2 - 13);
        *(a2 - 15) = 0;
        *(a2 - 14) = 0;
        *(a2 - 13) = 0;
        long long v33 = *((_OWORD *)a2 - 6);
        *(_OWORD *)(a5 + 321) = *(_OWORD *)((char *)a2 - 87);
        *(_OWORD *)(a5 + 312) = v33;
        long long v34 = *(_OWORD *)((char *)a2 - 68);
        *(_DWORD *)(a5 + 356) = *((_DWORD *)a2 - 13);
        *(_OWORD *)(a5 + 340) = v34;
        *(void *)(a5 + 368) = 0;
        *(void *)(a5 + 376) = 0;
        void *v21 = 0;
        *(_OWORD *)uint64_t v21 = *((_OWORD *)a2 - 3);
        *(void *)(a5 + 376) = *(a2 - 4);
        *(a2 - 6) = 0;
        *(a2 - 5) = 0;
        *(a2 - 4) = 0;
        long long v35 = *(_OWORD *)(a2 - 3);
        *(_DWORD *)(a5 + 400) = *((_DWORD *)a2 - 2);
        *(_OWORD *)(a5 + 384) = v35;
        *(_DWORD *)(a5 + 408) = *(_DWORD *)a1;
        *(void *)(a5 + 424) = 0;
        *(void *)(a5 + 432) = 0;
        *(void *)(a5 + 416) = 0;
        *(_OWORD *)(a5 + 416) = *(_OWORD *)(a1 + 8);
        *(void *)(a5 + 432) = *(void *)(a1 + 24);
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
        long long v36 = *(_OWORD *)(a1 + 32);
        long long v37 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)(a5 + 456) = *(_OWORD *)(a1 + 48);
        *(_OWORD *)(a5 + 472) = v37;
        *(_OWORD *)(a5 + 440) = v36;
        long long v38 = *(_OWORD *)(a1 + 80);
        long long v39 = *(_OWORD *)(a1 + 96);
        *(void *)(a5 + 520) = *(void *)(a1 + 112);
        *(_OWORD *)(a5 + 488) = v38;
        *(_OWORD *)(a5 + 504) = v39;
        *(void *)(a5 + 528) = 0;
        *(void *)(a5 + 544) = 0;
        *(void *)(a5 + 536) = 0;
        *(_OWORD *)(a5 + 528) = *(_OWORD *)(a1 + 120);
        *(void *)(a5 + 544) = *(void *)(a1 + 136);
        *(void *)(a1 + 120) = 0;
        *(void *)(a1 + 128) = 0;
        *(void *)(a1 + 136) = 0;
        *(void *)(a5 + 552) = 0;
        *(void *)(a5 + 560) = 0;
        *(void *)(a5 + 568) = 0;
        *(_OWORD *)(a5 + 552) = *(_OWORD *)(a1 + 144);
        *(void *)(a5 + 568) = *(void *)(a1 + 160);
        *(void *)(a1 + 144) = 0;
        *(void *)(a1 + 152) = 0;
        *(void *)(a1 + 160) = 0;
        *(_OWORD *)(a5 + 576) = *(_OWORD *)(a1 + 168);
        *(_DWORD *)(a5 + 600) = *(_DWORD *)(a1 + 192);
        if (*(_DWORD *)(a1 + 192) <= 1u) {
          *(void *)(a5 + 592) = *(void *)(a1 + 184);
        }
        *(_OWORD *)(a5 + 608) = *(_OWORD *)(a1 + 200);
        long long v40 = *(_OWORD *)(a1 + 216);
        long long v41 = *(_OWORD *)(a1 + 232);
        *(void *)(a5 + 656) = *(void *)(a1 + 248);
        *(_OWORD *)(a5 + 624) = v40;
        *(_OWORD *)(a5 + 640) = v41;
        *(void *)(a5 + 672) = 0;
        *(void *)(a5 + 680) = 0;
        void *v20 = 0;
        *(_OWORD *)uint64_t v20 = *(_OWORD *)(a1 + 256);
        *(void *)(a5 + 680) = *(void *)(a1 + 272);
        *(void *)(a1 + 264) = 0;
        *(void *)(a1 + 272) = 0;
        *(void *)(a1 + 256) = 0;
        *(unsigned char *)(a5 + 688) = *(unsigned char *)(a1 + 280);
        *(void *)(a5 + 704) = 0;
        *(void *)(a5 + 712) = 0;
        *(void *)(a5 + 696) = 0;
        *(_OWORD *)(a5 + 696) = *(_OWORD *)(a1 + 288);
        *(void *)(a5 + 712) = *(void *)(a1 + 304);
        *(void *)(a1 + 288) = 0;
        *(void *)(a1 + 296) = 0;
        *(void *)(a1 + 304) = 0;
        long long v42 = *(_OWORD *)(a1 + 312);
        *(_OWORD *)(a5 + 729) = *(_OWORD *)(a1 + 321);
        *(_OWORD *)(a5 + 720) = v42;
        long long v43 = *(_OWORD *)(a1 + 340);
        *(_DWORD *)(a5 + 764) = *(_DWORD *)(a1 + 356);
        *(_OWORD *)(a5 + 748) = v43;
        *(void *)(a5 + 768) = 0;
        *(void *)(a5 + 784) = 0;
        *(void *)(a5 + 776) = 0;
        *(_OWORD *)(a5 + 768) = *(_OWORD *)(a1 + 360);
        *(void *)(a5 + 784) = *(void *)(a1 + 376);
        *(void *)(a1 + 360) = 0;
        *(void *)(a1 + 368) = 0;
        *(void *)(a1 + 376) = 0;
        long long v44 = (_OWORD *)(a5 + 792);
        long long v45 = *(_OWORD *)(a1 + 384);
        int v46 = *(_DWORD *)(a1 + 400);
      }
      *(_DWORD *)(a5 + 808) = v46;
      _OWORD *v44 = v45;
    }
    else if (a4 == 1)
    {
      *(_DWORD *)a5 = *(_DWORD *)a1;
      *(void *)(a5 + 16) = 0;
      *(void *)(a5 + 24) = 0;
      *(void *)(a5 + 8) = 0;
      *(_OWORD *)(a5 + 8) = *(_OWORD *)(a1 + 8);
      *(void *)(a5 + 24) = *(void *)(a1 + 24);
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      long long v9 = *(_OWORD *)(a1 + 32);
      long long v10 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)(a5 + 48) = *(_OWORD *)(a1 + 48);
      *(_OWORD *)(a5 + 64) = v10;
      *(_OWORD *)(a5 + 32) = v9;
      long long v11 = *(_OWORD *)(a1 + 96);
      uint64_t v12 = *(void *)(a1 + 112);
      *(_OWORD *)(a5 + 80) = *(_OWORD *)(a1 + 80);
      *(_OWORD *)(a5 + 96) = v11;
      *(void *)(a5 + 112) = v12;
      *(void *)(a5 + 120) = 0;
      *(void *)(a5 + 128) = 0;
      *(void *)(a5 + 136) = 0;
      *(_OWORD *)(a5 + 120) = *(_OWORD *)(a1 + 120);
      *(void *)(a5 + 136) = *(void *)(a1 + 136);
      *(void *)(a1 + 120) = 0;
      *(void *)(a1 + 128) = 0;
      *(void *)(a1 + 136) = 0;
      *(void *)(a5 + 144) = 0;
      *(void *)(a5 + 152) = 0;
      *(void *)(a5 + 160) = 0;
      *(_OWORD *)(a5 + 144) = *(_OWORD *)(a1 + 144);
      *(void *)(a5 + 160) = *(void *)(a1 + 160);
      *(void *)(a1 + 144) = 0;
      *(void *)(a1 + 152) = 0;
      *(void *)(a1 + 160) = 0;
      *(_OWORD *)(a5 + 168) = *(_OWORD *)(a1 + 168);
      *(_DWORD *)(a5 + 192) = *(_DWORD *)(a1 + 192);
      if (*(_DWORD *)(a1 + 192) <= 1u) {
        *(void *)(a5 + 184) = *(void *)(a1 + 184);
      }
      *(_OWORD *)(a5 + 200) = *(_OWORD *)(a1 + 200);
      long long v13 = *(_OWORD *)(a1 + 216);
      uint64_t v14 = *(void *)(a1 + 248);
      *(_OWORD *)(a5 + 232) = *(_OWORD *)(a1 + 232);
      *(_OWORD *)(a5 + 216) = v13;
      *(void *)(a5 + 248) = v14;
      *(void *)(a5 + 256) = 0;
      *(void *)(a5 + 264) = 0;
      *(void *)(a5 + 272) = 0;
      *(_OWORD *)(a5 + 256) = *(_OWORD *)(a1 + 256);
      *(void *)(a5 + 272) = *(void *)(a1 + 272);
      *(void *)(a1 + 264) = 0;
      *(void *)(a1 + 272) = 0;
      *(void *)(a1 + 256) = 0;
      *(unsigned char *)(a5 + 280) = *(unsigned char *)(a1 + 280);
      *(void *)(a5 + 296) = 0;
      *(void *)(a5 + 304) = 0;
      *(void *)(a5 + 288) = 0;
      *(_OWORD *)(a5 + 288) = *(_OWORD *)(a1 + 288);
      *(void *)(a5 + 304) = *(void *)(a1 + 304);
      *(void *)(a1 + 288) = 0;
      *(void *)(a1 + 296) = 0;
      *(void *)(a1 + 304) = 0;
      long long v15 = *(_OWORD *)(a1 + 312);
      *(_OWORD *)(a5 + 321) = *(_OWORD *)(a1 + 321);
      *(_OWORD *)(a5 + 312) = v15;
      long long v16 = *(_OWORD *)(a1 + 340);
      *(_DWORD *)(a5 + 356) = *(_DWORD *)(a1 + 356);
      *(_OWORD *)(a5 + 340) = v16;
      *(void *)(a5 + 368) = 0;
      *(void *)(a5 + 376) = 0;
      *(void *)(a5 + 360) = 0;
      *(void *)(a5 + 360) = *(void *)(a1 + 360);
      *(void *)(a5 + 368) = *(void *)(a1 + 368);
      *(void *)(a5 + 376) = *(void *)(a1 + 376);
      *(void *)(a1 + 360) = 0;
      *(void *)(a1 + 368) = 0;
      *(void *)(a1 + 376) = 0;
      long long v17 = *(_OWORD *)(a1 + 384);
      *(_DWORD *)(a5 + 400) = *(_DWORD *)(a1 + 400);
      *(_OWORD *)(a5 + 384) = v17;
    }
    else if ((uint64_t)a4 > 8)
    {
      unint64_t v25 = a4 >> 1;
      uint64_t v26 = 408 * (a4 >> 1);
      sub_87EDCC(a1, a1 + v26, a3, a4 >> 1, a5, a4 >> 1);
      sub_87EDCC(a1 + v26, a2, a3, a4 - v25, a5 + v26, a4 - v25);
      sub_880C3C(a1, a1 + v26, a1 + v26, a2, a5);
    }
    else
    {
      sub_8804F4(a1, a2, a5);
    }
  }
}

void sub_87FF60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_879BD8((void **)va);
  _Unwind_Resume(a1);
}

void sub_87FF74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8)
{
  uint64_t v62 = a6;
  if (a6)
  {
    while (1)
    {
      if (v62 <= a8 || a5 <= a8)
      {
        sub_881378(a1, a2, a3, a4, a5, v62, a7);
        return;
      }
      if (!a5) {
        return;
      }
      uint64_t v13 = 0;
      uint64_t v14 = -a5;
      while (1)
      {
        uint64_t v15 = sub_638A2C(a2);
        if (v15 == sub_638A2C(a1 + v13))
        {
          uint64_t v16 = sub_638A34(a2);
          if (v16 > sub_638A34(a1 + v13)) {
            break;
          }
          goto LABEL_10;
        }
        uint64_t v17 = sub_638A2C(a2);
        if (v17 > sub_638A2C(a1 + v13)) {
          break;
        }
LABEL_10:
        v13 += 408;
        if (__CFADD__(v14++, 1)) {
          return;
        }
      }
      uint64_t v19 = -v14;
      uint64_t v20 = a1 + v13;
      uint64_t v57 = a8;
      long long v58 = a7;
      uint64_t v56 = a1 + v13;
      if (-v14 >= v62) {
        break;
      }
      if (v62 >= 0) {
        uint64_t v21 = v62;
      }
      else {
        uint64_t v21 = v62 + 1;
      }
      uint64_t v22 = v21 >> 1;
      uint64_t v23 = a2 + 408 * (v21 >> 1);
      uint64_t v24 = a1 + v13;
      uint64_t v59 = v21 >> 1;
      if (a2 - a1 != v13)
      {
        unint64_t v25 = 0xFAFAFAFAFAFAFAFBLL * ((a2 - a1 - v13) >> 3);
        uint64_t v20 = a1 + v13;
        while (1)
        {
          unint64_t v26 = v25 >> 1;
          uint64_t v27 = sub_638A2C(v23);
          if (v27 == sub_638A2C(v20 + 408 * (v25 >> 1)))
          {
            uint64_t v28 = sub_638A34(v23);
            if (v28 <= sub_638A34(v20 + 408 * (v25 >> 1))) {
              goto LABEL_24;
            }
          }
          else
          {
            uint64_t v29 = sub_638A2C(v23);
            if (v29 <= sub_638A2C(v20 + 408 * (v25 >> 1)))
            {
LABEL_24:
              v20 += 408 * (v25 >> 1) + 408;
              unint64_t v26 = v25 + ~v26;
            }
          }
          unint64_t v25 = v26;
          if (!v26)
          {
            uint64_t v24 = v20;
            a7 = v58;
            uint64_t v22 = v59;
            break;
          }
        }
      }
      unint64_t v31 = 0xFAFAFAFAFAFAFAFBLL * ((v24 - a1 - v13) >> 3);
      uint64_t v32 = v23;
      if (v20 != a2) {
        goto LABEL_34;
      }
LABEL_61:
      a5 = -(uint64_t)(v31 + v14);
      uint64_t v51 = v62 - v22;
      if ((uint64_t)(v31 + v22) >= (uint64_t)(v62 - (v31 + v22) - v14))
      {
        uint64_t v52 = v24;
        a5 = v31;
        sub_87FF74(v32, v23, a3, a4, -(uint64_t)(v31 + v14), v62 - v22, a7, v57);
        uint64_t v53 = v52;
        a3 = v32;
        uint64_t v62 = v22;
        a8 = v57;
        a1 = v56;
        a2 = v53;
        if (!v22) {
          return;
        }
      }
      else
      {
        sub_87FF74(a1 + v13, v24, v32, a4, v31, v22, a7, v57);
        a1 = v32;
        a8 = v57;
        v62 -= v22;
        a2 = v23;
        if (!v51) {
          return;
        }
      }
    }
    if (v14 != -1)
    {
      if (v14 > 0) {
        uint64_t v19 = 1 - v14;
      }
      uint64_t v54 = v19 >> 1;
      uint64_t v64 = a1 + 408 * (v19 >> 1) + v13;
      if (a2 == a3)
      {
        uint64_t v30 = 0;
LABEL_30:
        uint64_t v59 = v30;
        uint64_t v23 = a2 + 408 * v30;
        uint64_t v22 = 0xFAFAFAFAFAFAFAFBLL * ((408 * v30) >> 3);
        unint64_t v31 = v54;
        uint64_t v24 = a1 + 408 * v54 + v13;
        a7 = v58;
        uint64_t v20 = v64;
        uint64_t v32 = v23;
        if (v64 == a2) {
          goto LABEL_61;
        }
LABEL_34:
        uint64_t v32 = v24;
        if (v59)
        {
          uint64_t v65 = v24;
          unint64_t v55 = v31;
          sub_87A1D4(v20, a2);
          uint64_t v32 = v20 + 408;
          if (v59 == 1)
          {
            uint64_t v33 = a2;
          }
          else
          {
            uint64_t v44 = a2 + 408;
            uint64_t v45 = 408 * v59 - 408;
            uint64_t v33 = a2;
            do
            {
              if (v32 == v33) {
                uint64_t v33 = v44;
              }
              sub_87A1D4(v32, v44);
              v32 += 408;
              v44 += 408;
              v45 -= 408;
            }
            while (v45);
          }
          if (v32 != v33)
          {
            uint64_t v46 = a2 + 408 * v59;
            uint64_t v47 = v32;
            uint64_t v48 = v33;
            while (1)
            {
              sub_87A1D4(v47, v48);
              v48 += 408;
              BOOL v49 = v47 + 408 == v33;
              if (v48 == v46)
              {
                if (v47 + 408 == v33) {
                  break;
                }
                uint64_t v48 = v33 + 408;
                v47 += 816;
                while (1)
                {
                  sub_87A1D4(v47 - 408, v33);
                  BOOL v49 = v47 == v33;
                  if (v48 != v46) {
                    break;
                  }
                  BOOL v50 = v47 == v33;
                  v47 += 408;
                  if (v50) {
                    goto LABEL_60;
                  }
                }
              }
              else
              {
                v47 += 408;
              }
              if (v49) {
                uint64_t v33 = v48;
              }
            }
          }
LABEL_60:
          a7 = v58;
          unint64_t v31 = v55;
          uint64_t v24 = v65;
        }
        goto LABEL_61;
      }
      uint64_t v30 = 0;
      unint64_t v34 = 0xFAFAFAFAFAFAFAFBLL * ((a3 - a2) >> 3);
      uint64_t v63 = a1;
      while (2)
      {
        unint64_t v35 = v34 >> 1;
        uint64_t v36 = v30;
        unint64_t v37 = (v34 >> 1) + v30;
        uint64_t v38 = a2 + 408 * v37;
        uint64_t v39 = sub_638A2C(v38);
        if (v39 == sub_638A2C(v64))
        {
          uint64_t v40 = sub_638A34(v38);
          uint64_t v41 = sub_638A34(v64);
          uint64_t v30 = v36;
          a1 = v63;
          if (v40 > v41)
          {
LABEL_43:
            uint64_t v30 = v37 + 1;
            unint64_t v35 = v34 + ~v35;
          }
        }
        else
        {
          uint64_t v42 = sub_638A2C(v38);
          uint64_t v43 = sub_638A2C(v64);
          uint64_t v30 = v36;
          a1 = v63;
          if (v42 > v43) {
            goto LABEL_43;
          }
        }
        unint64_t v34 = v35;
        if (!v35) {
          goto LABEL_30;
        }
        continue;
      }
    }
    sub_87A1D4(a1 + v13, a2);
  }
}

__n128 sub_8804F4(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  if ((_DWORD *)a1 != a2)
  {
    uint64_t v4 = a2;
    int64_t v5 = (_DWORD *)a1;
    *(_DWORD *)a3 = *(_DWORD *)a1;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 8) = 0;
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(a1 + 8);
    *(void *)(a3 + 24) = *(void *)(a1 + 24);
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 8) = 0;
    long long v7 = *(_OWORD *)(a1 + 48);
    long long v6 = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(a3 + 32) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a3 + 48) = v7;
    *(_OWORD *)(a3 + 64) = v6;
    long long v8 = *(_OWORD *)(a1 + 96);
    uint64_t v9 = *(void *)(a1 + 112);
    *(_OWORD *)(a3 + 80) = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(a3 + 96) = v8;
    *(void *)(a3 + 128) = 0;
    *(void *)(a3 + 136) = 0;
    *(void *)(a3 + 112) = v9;
    *(void *)(a3 + 120) = 0;
    *(_OWORD *)(a3 + 120) = *(_OWORD *)(a1 + 120);
    *(void *)(a3 + 136) = *(void *)(a1 + 136);
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
    *(void *)(a3 + 152) = 0;
    *(void *)(a3 + 160) = 0;
    *(void *)(a3 + 144) = 0;
    *(_OWORD *)(a3 + 144) = *(_OWORD *)(a1 + 144);
    *(void *)(a3 + 160) = *(void *)(a1 + 160);
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = 0;
    *(_OWORD *)(a3 + 168) = *(_OWORD *)(a1 + 168);
    *(_DWORD *)(a3 + 192) = *(_DWORD *)(a1 + 192);
    if (*(_DWORD *)(a1 + 192) <= 1u) {
      *(void *)(a3 + 184) = *(void *)(a1 + 184);
    }
    *(_OWORD *)(a3 + 200) = *(_OWORD *)(a1 + 200);
    long long v10 = *(_OWORD *)(a1 + 216);
    uint64_t v11 = *(void *)(a1 + 248);
    *(_OWORD *)(a3 + 232) = *(_OWORD *)(a1 + 232);
    *(_OWORD *)(a3 + 216) = v10;
    *(void *)(a3 + 248) = v11;
    *(void *)(a3 + 256) = 0;
    *(void *)(a3 + 264) = 0;
    *(void *)(a3 + 272) = 0;
    *(_OWORD *)(a3 + 256) = *(_OWORD *)(a1 + 256);
    *(void *)(a3 + 272) = *(void *)(a1 + 272);
    *(void *)(a1 + 264) = 0;
    *(void *)(a1 + 272) = 0;
    *(void *)(a1 + 256) = 0;
    *(unsigned char *)(a3 + 280) = *(unsigned char *)(a1 + 280);
    *(void *)(a3 + 296) = 0;
    *(void *)(a3 + 304) = 0;
    *(void *)(a3 + 288) = 0;
    *(_OWORD *)(a3 + 288) = *(_OWORD *)(a1 + 288);
    *(void *)(a3 + 304) = *(void *)(a1 + 304);
    *(void *)(a1 + 288) = 0;
    *(void *)(a1 + 296) = 0;
    *(void *)(a1 + 304) = 0;
    long long v12 = *(_OWORD *)(a1 + 312);
    *(_OWORD *)(a3 + 321) = *(_OWORD *)(a1 + 321);
    *(_OWORD *)(a3 + 312) = v12;
    long long v13 = *(_OWORD *)(a1 + 340);
    *(_DWORD *)(a3 + 356) = *(_DWORD *)(a1 + 356);
    *(_OWORD *)(a3 + 340) = v13;
    *(void *)(a3 + 368) = 0;
    *(void *)(a3 + 376) = 0;
    *(void *)(a3 + 360) = 0;
    *(void *)(a3 + 360) = *(void *)(a1 + 360);
    *(void *)(a3 + 368) = *(void *)(a1 + 368);
    *(void *)(a3 + 376) = *(void *)(a1 + 376);
    *(void *)(a1 + 360) = 0;
    *(void *)(a1 + 368) = 0;
    *(void *)(a1 + 376) = 0;
    __n128 result = *(__n128 *)(a1 + 384);
    *(_DWORD *)(a3 + 400) = *(_DWORD *)(a1 + 400);
    *(__n128 *)(a3 + 384) = result;
    uint64_t v51 = 1;
    uint64_t v15 = a1 + 408;
    if ((_DWORD *)(a1 + 408) != a2)
    {
      uint64_t v16 = 0;
      uint64_t v17 = a3;
      do
      {
        while (1)
        {
          unint64_t v18 = (_DWORD *)v15;
          uint64_t v19 = sub_638A2C(v15);
          if (v19 == sub_638A2C(v17))
          {
            uint64_t v20 = sub_638A34((uint64_t)v18);
            uint64_t v21 = sub_638A34(v17);
          }
          else
          {
            uint64_t v20 = sub_638A2C((uint64_t)v18);
            uint64_t v21 = sub_638A2C(v17);
          }
          if (v20 > v21) {
            break;
          }
          *(_DWORD *)(v17 + 408) = *v18;
          *(void *)(v17 + 424) = 0;
          *(void *)(v17 + 432) = 0;
          *(void *)(v17 + 416) = 0;
          *(_OWORD *)(v17 + 416) = *((_OWORD *)v5 + 26);
          *(void *)(v17 + 432) = *((void *)v5 + 54);
          *((void *)v5 + 52) = 0;
          *((void *)v5 + 53) = 0;
          *((void *)v5 + 54) = 0;
          long long v39 = *(_OWORD *)(v5 + 110);
          long long v40 = *(_OWORD *)(v5 + 118);
          *(_OWORD *)(v17 + 456) = *(_OWORD *)(v5 + 114);
          *(_OWORD *)(v17 + 472) = v40;
          *(_OWORD *)(v17 + 440) = v39;
          long long v41 = *(_OWORD *)(v5 + 122);
          long long v42 = *(_OWORD *)(v5 + 126);
          *(void *)(v17 + 520) = *((void *)v5 + 65);
          *(_OWORD *)(v17 + 488) = v41;
          *(_OWORD *)(v17 + 504) = v42;
          *(void *)(v17 + 528) = 0;
          *(void *)(v17 + 544) = 0;
          *(void *)(v17 + 536) = 0;
          *(_OWORD *)(v17 + 528) = *((_OWORD *)v5 + 33);
          *(void *)(v17 + 544) = *((void *)v5 + 68);
          *((void *)v5 + 67) = 0;
          *((void *)v5 + 66) = 0;
          *((void *)v5 + 68) = 0;
          *(void *)(v17 + 560) = 0;
          *(void *)(v17 + 552) = 0;
          *(void *)(v17 + 568) = 0;
          *(void *)(v17 + 552) = *((void *)v5 + 69);
          *(void *)(v17 + 560) = *((void *)v5 + 70);
          *(void *)(v17 + 568) = *((void *)v5 + 71);
          *((void *)v5 + 70) = 0;
          *((void *)v5 + 69) = 0;
          *((void *)v5 + 71) = 0;
          *(_OWORD *)(v17 + 576) = *((_OWORD *)v5 + 36);
          *(_DWORD *)(v17 + 600) = v5[150];
          if (v5[150] <= 1u) {
            *(void *)(v17 + 592) = *((void *)v5 + 74);
          }
          *(_OWORD *)(v17 + 608) = *((_OWORD *)v5 + 38);
          long long v43 = *((_OWORD *)v5 + 39);
          long long v44 = *((_OWORD *)v5 + 40);
          *(void *)(v17 + 656) = *((void *)v5 + 82);
          *(_OWORD *)(v17 + 624) = v43;
          *(_OWORD *)(v17 + 640) = v44;
          *(void *)(v17 + 664) = 0;
          *(void *)(v17 + 680) = 0;
          *(void *)(v17 + 672) = 0;
          *(void *)(v17 + 664) = *((void *)v5 + 83);
          *(void *)(v17 + 672) = *((void *)v5 + 84);
          *(void *)(v17 + 680) = *((void *)v5 + 85);
          *((void *)v5 + 85) = 0;
          *((void *)v5 + 84) = 0;
          *((void *)v5 + 83) = 0;
          *(unsigned char *)(v17 + 688) = *((unsigned char *)v5 + 688);
          *(void *)(v17 + 704) = 0;
          *(void *)(v17 + 712) = 0;
          *(void *)(v17 + 696) = 0;
          *(void *)(v17 + 696) = *((void *)v5 + 87);
          *(void *)(v17 + 704) = *((void *)v5 + 88);
          *(void *)(v17 + 712) = *((void *)v5 + 89);
          *((void *)v5 + 88) = 0;
          *((void *)v5 + 87) = 0;
          *((void *)v5 + 89) = 0;
          long long v45 = *((_OWORD *)v5 + 45);
          *(_OWORD *)(v17 + 729) = *(_OWORD *)((char *)v5 + 729);
          *(_OWORD *)(v17 + 720) = v45;
          long long v46 = *(_OWORD *)(v5 + 187);
          *(_DWORD *)(v17 + 764) = v5[191];
          *(_OWORD *)(v17 + 748) = v46;
          *(void *)(v17 + 768) = 0;
          *(void *)(v17 + 784) = 0;
          *(void *)(v17 + 776) = 0;
          *(_OWORD *)(v17 + 768) = *((_OWORD *)v5 + 48);
          *(void *)(v17 + 784) = *((void *)v5 + 98);
          *((void *)v5 + 97) = 0;
          *((void *)v5 + 96) = 0;
          *((void *)v5 + 98) = 0;
          __n128 result = *(__n128 *)(v5 + 198);
          *(_DWORD *)(v17 + 808) = v5[202];
          *(__n128 *)(v17 + 792) = result;
          ++v51;
          v17 += 408;
          uint64_t v15 = (uint64_t)(v18 + 102);
          v16 += 408;
          int64_t v5 = v18;
          if (v18 + 102 == v4) {
            return result;
          }
        }
        uint64_t v22 = (_OWORD *)(v17 + 360);
        *(_DWORD *)(v17 + 408) = *(_DWORD *)v17;
        *(_OWORD *)(v17 + 416) = *(_OWORD *)(v17 + 8);
        *(void *)(v17 + 432) = *(void *)(v17 + 24);
        *(void *)(v17 + 8) = 0;
        *(void *)(v17 + 16) = 0;
        *(void *)(v17 + 24) = 0;
        long long v23 = *(_OWORD *)(v17 + 48);
        *(_OWORD *)(v17 + 440) = *(_OWORD *)(v17 + 32);
        *(_OWORD *)(v17 + 456) = v23;
        long long v24 = *(_OWORD *)(v17 + 96);
        *(_OWORD *)(v17 + 488) = *(_OWORD *)(v17 + 80);
        *(_OWORD *)(v17 + 504) = v24;
        long long v25 = *(_OWORD *)(v17 + 64);
        *(void *)(v17 + 520) = *(void *)(v17 + 112);
        *(_OWORD *)(v17 + 472) = v25;
        *(_OWORD *)(v17 + 528) = *(_OWORD *)(v17 + 120);
        *(void *)(v17 + 544) = *(void *)(v17 + 136);
        *(void *)(v17 + 120) = 0;
        *(void *)(v17 + 128) = 0;
        *(_OWORD *)(v17 + 552) = *(_OWORD *)(v17 + 144);
        *(void *)(v17 + 568) = *(void *)(v17 + 160);
        *(void *)(v17 + 136) = 0;
        *(void *)(v17 + 144) = 0;
        *(void *)(v17 + 152) = 0;
        *(void *)(v17 + 160) = 0;
        *(_OWORD *)(v17 + 576) = *(_OWORD *)(v17 + 168);
        unsigned int v26 = *(_DWORD *)(v17 + 192);
        *(_DWORD *)(v17 + 600) = v26;
        if (v26 <= 1) {
          *(void *)(v17 + 592) = *(void *)(v17 + 184);
        }
        long long v27 = *(_OWORD *)(v17 + 216);
        *(_OWORD *)(v17 + 608) = *(_OWORD *)(v17 + 200);
        *(_OWORD *)(v17 + 624) = v27;
        *(_OWORD *)(v17 + 640) = *(_OWORD *)(v17 + 232);
        *(void *)(v17 + 656) = *(void *)(v17 + 248);
        *(_OWORD *)(v17 + 664) = *(_OWORD *)(v17 + 256);
        *(void *)(v17 + 680) = *(void *)(v17 + 272);
        *(void *)(v17 + 256) = 0;
        *(void *)(v17 + 264) = 0;
        *(void *)(v17 + 272) = 0;
        *(unsigned char *)(v17 + 688) = *(unsigned char *)(v17 + 280);
        *(_OWORD *)(v17 + 696) = *(_OWORD *)(v17 + 288);
        *(void *)(v17 + 712) = *(void *)(v17 + 304);
        *(void *)(v17 + 288) = 0;
        *(void *)(v17 + 296) = 0;
        *(void *)(v17 + 304) = 0;
        long long v28 = *(_OWORD *)(v17 + 312);
        *(_OWORD *)(v17 + 729) = *(_OWORD *)(v17 + 321);
        *(_OWORD *)(v17 + 720) = v28;
        long long v29 = *(_OWORD *)(v17 + 340);
        *(_DWORD *)(v17 + 764) = *(_DWORD *)(v17 + 356);
        *(_OWORD *)(v17 + 748) = v29;
        *(_OWORD *)(v17 + 768) = *v22;
        *(void *)(v17 + 784) = *(void *)(v17 + 376);
        *(void *)uint64_t v22 = 0;
        *(void *)(v17 + 368) = 0;
        *(void *)(v17 + 376) = 0;
        long long v30 = *(_OWORD *)(v17 + 384);
        *(_DWORD *)(v17 + 808) = *(_DWORD *)(v17 + 400);
        *(_OWORD *)(v17 + 792) = v30;
        uint64_t v31 = a3;
        ++v51;
        if (v17 == a3) {
          goto LABEL_29;
        }
        uint64_t v32 = v16;
        uint64_t v31 = v17;
        while (1)
        {
          uint64_t v33 = sub_638A2C((uint64_t)v18);
          if (v33 == sub_638A2C(a3 + v32 - 408))
          {
            uint64_t v34 = sub_638A34((uint64_t)v18);
            if (v34 <= sub_638A34(a3 + v32 - 408)) {
              goto LABEL_28;
            }
            goto LABEL_20;
          }
          uint64_t v35 = sub_638A2C((uint64_t)v18);
          if (v35 <= sub_638A2C(a3 + v32 - 408)) {
            break;
          }
LABEL_20:
          sub_52ECD8(a3 + v32, a3 + v32 - 408);
          uint64_t v36 = a3 + v32;
          *(_OWORD *)(a3 + v32 + 340) = *(_OWORD *)(a3 + v32 - 68);
          *(_DWORD *)(a3 + v32 + 356) = *(_DWORD *)(a3 + v32 - 52);
          unint64_t v37 = (void **)(a3 + v32 + 360);
          uint64_t v38 = *v37;
          if (*v37)
          {
            *(void *)(v36 + 368) = v38;
            operator delete(v38);
            void *v37 = 0;
            *(void *)(a3 + v32 + 368) = 0;
            *(void *)(a3 + v32 + 376) = 0;
          }
          v31 -= 408;
          *(_OWORD *)unint64_t v37 = *(_OWORD *)(v36 - 48);
          *(void *)(v36 + 376) = *(void *)(v36 - 32);
          *(void *)(v36 - 40) = 0;
          *(void *)(v36 - 32) = 0;
          *(void *)(v36 - 48) = 0;
          *(_OWORD *)(v36 + 384) = *(_OWORD *)(v36 - 24);
          *(_DWORD *)(v36 + 400) = *(_DWORD *)(v36 - 8);
          v32 -= 408;
          if (!v32)
          {
            uint64_t v31 = a3;
            goto LABEL_28;
          }
        }
        uint64_t v31 = a3 + v32;
LABEL_28:
        uint64_t v4 = a2;
LABEL_29:
        sub_52ECD8(v31, (uint64_t)v18);
        int v47 = v5[191];
        *(_OWORD *)(v31 + 340) = *(_OWORD *)(v5 + 187);
        *(_DWORD *)(v31 + 356) = v47;
        uint64_t v48 = (void *)(v31 + 360);
        BOOL v49 = *(void **)(v31 + 360);
        if (v49)
        {
          *(void *)(v31 + 368) = v49;
          operator delete(v49);
          void *v48 = 0;
          *(void *)(v31 + 368) = 0;
          *(void *)(v31 + 376) = 0;
        }
        *(_OWORD *)uint64_t v48 = *((_OWORD *)v5 + 48);
        *(void *)(v31 + 376) = *((void *)v5 + 98);
        *((void *)v5 + 97) = 0;
        *((void *)v5 + 96) = 0;
        *((void *)v5 + 98) = 0;
        __n128 result = *(__n128 *)(v5 + 198);
        *(_DWORD *)(v31 + 400) = v5[202];
        *(__n128 *)(v31 + 384) = result;
        v17 += 408;
        uint64_t v15 = (uint64_t)(v18 + 102);
        v16 += 408;
        int64_t v5 = v18;
      }
      while (v18 + 102 != v4);
    }
  }
  return result;
}

void sub_880C14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_879BD8((void **)va);
  _Unwind_Resume(a1);
}

void sub_880C28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_879BD8((void **)va);
  _Unwind_Resume(a1);
}

__n128 sub_880C3C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v54 = 0;
  if (a1 == a2)
  {
LABEL_23:
    if ((void *)a3 != a4)
    {
      uint64_t v42 = a5 + 184;
      uint64_t v43 = a3 + 184;
      do
      {
        uint64_t v48 = (void *)(v43 - 184);
        *(_DWORD *)(v42 - 184) = *(_DWORD *)(v43 - 184);
        uint64_t v49 = v42 - 184;
        *(void *)(v49 + 16) = 0;
        *(void *)(v49 + 24) = 0;
        *(void *)(v49 + 8) = 0;
        *(_OWORD *)(v49 + 8) = *(_OWORD *)(v43 - 176);
        *(void *)(v49 + 24) = *(void *)(v43 - 160);
        v48[1] = 0;
        v48[2] = 0;
        v48[3] = 0;
        long long v50 = *(_OWORD *)(v43 - 152);
        long long v51 = *(_OWORD *)(v43 - 120);
        *(_OWORD *)(v49 + 48) = *(_OWORD *)(v43 - 136);
        *(_OWORD *)(v49 + 64) = v51;
        *(_OWORD *)(v49 + 32) = v50;
        long long v52 = *(_OWORD *)(v43 - 88);
        uint64_t v53 = *(void *)(v43 - 72);
        *(_OWORD *)(v49 + 80) = *(_OWORD *)(v43 - 104);
        *(_OWORD *)(v49 + 96) = v52;
        *(void *)(v49 + 112) = v53;
        *(void *)(v49 + 120) = 0;
        *(void *)(v49 + 128) = 0;
        *(void *)(v49 + 136) = 0;
        *(_OWORD *)(v49 + 120) = *(_OWORD *)(v43 - 64);
        *(void *)(v49 + 136) = *(void *)(v43 - 48);
        v48[15] = 0;
        v48[16] = 0;
        v48[17] = 0;
        *(void *)(v49 + 144) = 0;
        *(void *)(v49 + 152) = 0;
        *(void *)(v49 + 160) = 0;
        *(_OWORD *)(v49 + 144) = *(_OWORD *)(v43 - 40);
        *(void *)(v49 + 160) = *(void *)(v43 - 24);
        v48[18] = 0;
        v48[19] = 0;
        v48[20] = 0;
        *(_OWORD *)(v49 + 168) = *(_OWORD *)(v43 - 16);
        *(_DWORD *)(v42 + 8) = *(_DWORD *)(v43 + 8);
        if (*(_DWORD *)(v43 + 8) < 2u) {
          *(void *)uint64_t v42 = *(void *)v43;
        }
        *(_OWORD *)(v42 + 16) = *(_OWORD *)(v43 + 16);
        long long v44 = *(_OWORD *)(v43 + 32);
        uint64_t v45 = *(void *)(v43 + 64);
        *(_OWORD *)(v42 + 48) = *(_OWORD *)(v43 + 48);
        *(_OWORD *)(v42 + 32) = v44;
        *(void *)(v42 + 64) = v45;
        *(void *)(v42 + 72) = 0;
        *(void *)(v42 + 80) = 0;
        *(void *)(v42 + 88) = 0;
        *(_OWORD *)(v42 + 72) = *(_OWORD *)(v43 + 72);
        *(void *)(v42 + 88) = *(void *)(v43 + 88);
        *(void *)(v43 + 80) = 0;
        *(void *)(v43 + 88) = 0;
        *(void *)(v43 + 72) = 0;
        *(unsigned char *)(v42 + 96) = *(unsigned char *)(v43 + 96);
        *(void *)(v42 + 112) = 0;
        *(void *)(v42 + 120) = 0;
        *(void *)(v42 + 104) = 0;
        *(_OWORD *)(v42 + 104) = *(_OWORD *)(v43 + 104);
        *(void *)(v42 + 120) = *(void *)(v43 + 120);
        *(void *)(v43 + 104) = 0;
        *(void *)(v43 + 112) = 0;
        *(void *)(v43 + 120) = 0;
        long long v46 = *(_OWORD *)(v43 + 128);
        *(_OWORD *)(v42 + 137) = *(_OWORD *)(v43 + 137);
        *(_OWORD *)(v42 + 128) = v46;
        long long v47 = *(_OWORD *)(v43 + 156);
        *(_DWORD *)(v42 + 172) = *(_DWORD *)(v43 + 172);
        *(_OWORD *)(v42 + 156) = v47;
        *(void *)(v42 + 184) = 0;
        *(void *)(v42 + 192) = 0;
        *(void *)(v42 + 176) = 0;
        *(void *)(v42 + 176) = *(void *)(v43 + 176);
        *(void *)(v42 + 184) = *(void *)(v43 + 184);
        *(void *)(v42 + 192) = *(void *)(v43 + 192);
        *(void *)(v43 + 176) = 0;
        *(void *)(v43 + 184) = 0;
        *(void *)(v43 + 192) = 0;
        __n128 result = *(__n128 *)(v43 + 200);
        *(_DWORD *)(v42 + 216) = *(_DWORD *)(v43 + 216);
        *(__n128 *)(v42 + 200) = result;
        v42 += 408;
        v43 += 408;
      }
      while (v48 + 51 != a4);
    }
  }
  else
  {
    uint64_t v8 = a1;
    uint64_t v9 = a5 + 192;
    while ((void *)a3 != a4)
    {
      uint64_t v15 = sub_638A2C(a3);
      if (v15 == sub_638A2C(v8))
      {
        uint64_t v16 = sub_638A34(a3);
        uint64_t v17 = sub_638A34(v8);
      }
      else
      {
        uint64_t v16 = sub_638A2C(a3);
        uint64_t v17 = sub_638A2C(v8);
      }
      if (v16 <= v17)
      {
        *(_DWORD *)(v9 - 192) = *(_DWORD *)v8;
        *(void *)(v9 - 176) = 0;
        *(void *)(v9 - 168) = 0;
        *(void *)(v9 - 184) = 0;
        *(_OWORD *)(v9 - 184) = *(_OWORD *)(v8 + 8);
        *(void *)(v9 - 168) = *(void *)(v8 + 24);
        *(void *)(v8 + 8) = 0;
        *(void *)(v8 + 16) = 0;
        *(void *)(v8 + 24) = 0;
        long long v26 = *(_OWORD *)(v8 + 32);
        long long v27 = *(_OWORD *)(v8 + 64);
        *(_OWORD *)(v9 - 144) = *(_OWORD *)(v8 + 48);
        *(_OWORD *)(v9 - 128) = v27;
        *(_OWORD *)(v9 - 160) = v26;
        long long v28 = *(_OWORD *)(v8 + 96);
        uint64_t v29 = *(void *)(v8 + 112);
        *(_OWORD *)(v9 - 112) = *(_OWORD *)(v8 + 80);
        *(_OWORD *)(v9 - 96) = v28;
        *(void *)(v9 - 80) = v29;
        *(void *)(v9 - 72) = 0;
        *(void *)(v9 - 64) = 0;
        *(void *)(v9 - 56) = 0;
        *(_OWORD *)(v9 - 72) = *(_OWORD *)(v8 + 120);
        *(void *)(v9 - 56) = *(void *)(v8 + 136);
        *(void *)(v8 + 120) = 0;
        *(void *)(v8 + 128) = 0;
        *(void *)(v8 + 136) = 0;
        *(void *)(v9 - 48) = 0;
        *(void *)(v9 - 40) = 0;
        *(void *)(v9 - 32) = 0;
        *(_OWORD *)(v9 - 48) = *(_OWORD *)(v8 + 144);
        *(void *)(v9 - 32) = *(void *)(v8 + 160);
        *(void *)(v8 + 144) = 0;
        *(void *)(v8 + 152) = 0;
        *(void *)(v8 + 160) = 0;
        *(_OWORD *)(v9 - 24) = *(_OWORD *)(v8 + 168);
        *(_DWORD *)uint64_t v9 = *(_DWORD *)(v8 + 192);
        if (*(_DWORD *)(v8 + 192) < 2u) {
          *(void *)(v9 - 8) = *(void *)(v8 + 184);
        }
        *(_OWORD *)(v9 + 8) = *(_OWORD *)(v8 + 200);
        long long v10 = *(_OWORD *)(v8 + 216);
        uint64_t v11 = *(void *)(v8 + 248);
        *(_OWORD *)(v9 + 40) = *(_OWORD *)(v8 + 232);
        *(_OWORD *)(v9 + 24) = v10;
        *(void *)(v9 + 56) = v11;
        *(void *)(v9 + 64) = 0;
        *(void *)(v9 + 72) = 0;
        *(void *)(v9 + 80) = 0;
        *(_OWORD *)(v9 + 64) = *(_OWORD *)(v8 + 256);
        *(void *)(v9 + 80) = *(void *)(v8 + 272);
        *(void *)(v8 + 264) = 0;
        *(void *)(v8 + 272) = 0;
        *(void *)(v8 + 256) = 0;
        *(unsigned char *)(v9 + 88) = *(unsigned char *)(v8 + 280);
        *(void *)(v9 + 104) = 0;
        *(void *)(v9 + 112) = 0;
        *(void *)(v9 + 96) = 0;
        *(_OWORD *)(v9 + 96) = *(_OWORD *)(v8 + 288);
        *(void *)(v9 + 112) = *(void *)(v8 + 304);
        *(void *)(v8 + 288) = 0;
        *(void *)(v8 + 296) = 0;
        *(void *)(v8 + 304) = 0;
        long long v12 = *(_OWORD *)(v8 + 312);
        *(_OWORD *)(v9 + 129) = *(_OWORD *)(v8 + 321);
        *(_OWORD *)(v9 + 120) = v12;
        long long v13 = *(_OWORD *)(v8 + 340);
        *(_DWORD *)(v9 + 164) = *(_DWORD *)(v8 + 356);
        *(_OWORD *)(v9 + 148) = v13;
        *(void *)(v9 + 176) = 0;
        *(void *)(v9 + 184) = 0;
        *(void *)(v9 + 168) = 0;
        *(void *)(v9 + 168) = *(void *)(v8 + 360);
        *(void *)(v9 + 176) = *(void *)(v8 + 368);
        *(void *)(v9 + 184) = *(void *)(v8 + 376);
        *(void *)(v8 + 360) = 0;
        *(void *)(v8 + 368) = 0;
        *(void *)(v8 + 376) = 0;
        __n128 result = *(__n128 *)(v8 + 384);
        *(_DWORD *)(v9 + 208) = *(_DWORD *)(v8 + 400);
        *(__n128 *)(v9 + 192) = result;
        ++v54;
        v8 += 408;
        v9 += 408;
        if (v8 == a2)
        {
LABEL_22:
          a5 = v9 - 192;
          goto LABEL_23;
        }
      }
      else
      {
        *(_DWORD *)(v9 - 192) = *(_DWORD *)a3;
        *(void *)(v9 - 176) = 0;
        *(void *)(v9 - 168) = 0;
        *(void *)(v9 - 184) = 0;
        *(_OWORD *)(v9 - 184) = *(_OWORD *)(a3 + 8);
        *(void *)(v9 - 168) = *(void *)(a3 + 24);
        *(void *)(a3 + 8) = 0;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = 0;
        long long v18 = *(_OWORD *)(a3 + 32);
        long long v19 = *(_OWORD *)(a3 + 64);
        *(_OWORD *)(v9 - 144) = *(_OWORD *)(a3 + 48);
        *(_OWORD *)(v9 - 128) = v19;
        *(_OWORD *)(v9 - 160) = v18;
        long long v20 = *(_OWORD *)(a3 + 96);
        uint64_t v21 = *(void *)(a3 + 112);
        *(_OWORD *)(v9 - 112) = *(_OWORD *)(a3 + 80);
        *(_OWORD *)(v9 - 96) = v20;
        *(void *)(v9 - 80) = v21;
        *(void *)(v9 - 72) = 0;
        *(void *)(v9 - 64) = 0;
        *(void *)(v9 - 56) = 0;
        *(_OWORD *)(v9 - 72) = *(_OWORD *)(a3 + 120);
        *(void *)(v9 - 56) = *(void *)(a3 + 136);
        *(void *)(a3 + 120) = 0;
        *(void *)(a3 + 128) = 0;
        *(void *)(a3 + 136) = 0;
        *(void *)(v9 - 48) = 0;
        *(void *)(v9 - 40) = 0;
        *(void *)(v9 - 32) = 0;
        *(_OWORD *)(v9 - 48) = *(_OWORD *)(a3 + 144);
        *(void *)(v9 - 32) = *(void *)(a3 + 160);
        *(void *)(a3 + 144) = 0;
        *(void *)(a3 + 152) = 0;
        *(void *)(a3 + 160) = 0;
        *(_OWORD *)(v9 - 24) = *(_OWORD *)(a3 + 168);
        *(_DWORD *)uint64_t v9 = *(_DWORD *)(a3 + 192);
        if (*(_DWORD *)(a3 + 192) <= 1u) {
          *(void *)(v9 - 8) = *(void *)(a3 + 184);
        }
        *(_OWORD *)(v9 + 8) = *(_OWORD *)(a3 + 200);
        long long v22 = *(_OWORD *)(a3 + 216);
        uint64_t v23 = *(void *)(a3 + 248);
        *(_OWORD *)(v9 + 40) = *(_OWORD *)(a3 + 232);
        *(_OWORD *)(v9 + 24) = v22;
        *(void *)(v9 + 56) = v23;
        *(void *)(v9 + 64) = 0;
        *(void *)(v9 + 72) = 0;
        *(void *)(v9 + 80) = 0;
        *(_OWORD *)(v9 + 64) = *(_OWORD *)(a3 + 256);
        *(void *)(v9 + 80) = *(void *)(a3 + 272);
        *(void *)(a3 + 264) = 0;
        *(void *)(a3 + 272) = 0;
        *(void *)(a3 + 256) = 0;
        *(unsigned char *)(v9 + 88) = *(unsigned char *)(a3 + 280);
        *(void *)(v9 + 104) = 0;
        *(void *)(v9 + 112) = 0;
        *(void *)(v9 + 96) = 0;
        *(_OWORD *)(v9 + 96) = *(_OWORD *)(a3 + 288);
        *(void *)(v9 + 112) = *(void *)(a3 + 304);
        *(void *)(a3 + 288) = 0;
        *(void *)(a3 + 296) = 0;
        *(void *)(a3 + 304) = 0;
        long long v24 = *(_OWORD *)(a3 + 312);
        *(_OWORD *)(v9 + 129) = *(_OWORD *)(a3 + 321);
        *(_OWORD *)(v9 + 120) = v24;
        long long v25 = *(_OWORD *)(a3 + 340);
        *(_DWORD *)(v9 + 164) = *(_DWORD *)(a3 + 356);
        *(_OWORD *)(v9 + 148) = v25;
        *(void *)(v9 + 176) = 0;
        *(void *)(v9 + 184) = 0;
        *(void *)(v9 + 168) = 0;
        *(void *)(v9 + 168) = *(void *)(a3 + 360);
        *(void *)(v9 + 176) = *(void *)(a3 + 368);
        *(void *)(v9 + 184) = *(void *)(a3 + 376);
        *(void *)(a3 + 360) = 0;
        *(void *)(a3 + 368) = 0;
        *(void *)(a3 + 376) = 0;
        __n128 result = *(__n128 *)(a3 + 384);
        *(_DWORD *)(v9 + 208) = *(_DWORD *)(a3 + 400);
        *(__n128 *)(v9 + 192) = result;
        ++v54;
        a3 += 408;
        v9 += 408;
        if (v8 == a2) {
          goto LABEL_22;
        }
      }
    }
    if (v8 != a2)
    {
      uint64_t v30 = 0;
      do
      {
        uint64_t v36 = (_DWORD *)(v9 + v30);
        uint64_t v37 = v8 + v30;
        *(v36 - 48) = *(_DWORD *)(v8 + v30);
        *((void *)v36 - 22) = 0;
        *((void *)v36 - 21) = 0;
        *((void *)v36 - 23) = 0;
        *(_OWORD *)(v36 - 46) = *(_OWORD *)(v8 + v30 + 8);
        *((void *)v36 - 21) = *(void *)(v8 + v30 + 24);
        *(void *)(v37 + 8) = 0;
        *(void *)(v37 + 16) = 0;
        *(void *)(v37 + 24) = 0;
        long long v38 = *(_OWORD *)(v8 + v30 + 32);
        long long v39 = *(_OWORD *)(v8 + v30 + 64);
        *((_OWORD *)v36 - 9) = *(_OWORD *)(v8 + v30 + 48);
        *((_OWORD *)v36 - 8) = v39;
        *((_OWORD *)v36 - 10) = v38;
        long long v40 = *(_OWORD *)(v8 + v30 + 96);
        uint64_t v41 = *(void *)(v8 + v30 + 112);
        *((_OWORD *)v36 - 7) = *(_OWORD *)(v8 + v30 + 80);
        *((_OWORD *)v36 - 6) = v40;
        *((void *)v36 - 10) = v41;
        *((void *)v36 - 9) = 0;
        *((void *)v36 - 8) = 0;
        *((void *)v36 - 7) = 0;
        *(_OWORD *)(v36 - 18) = *(_OWORD *)(v8 + v30 + 120);
        *((void *)v36 - 7) = *(void *)(v8 + v30 + 136);
        *(void *)(v37 + 120) = 0;
        *(void *)(v37 + 128) = 0;
        *(void *)(v37 + 136) = 0;
        *((void *)v36 - 6) = 0;
        *((void *)v36 - 5) = 0;
        *((void *)v36 - 4) = 0;
        *((_OWORD *)v36 - 3) = *(_OWORD *)(v8 + v30 + 144);
        *((void *)v36 - 4) = *(void *)(v8 + v30 + 160);
        *(void *)(v37 + 144) = 0;
        *(void *)(v37 + 152) = 0;
        *(void *)(v37 + 160) = 0;
        *(_OWORD *)(v36 - 6) = *(_OWORD *)(v8 + v30 + 168);
        _DWORD *v36 = *(_DWORD *)(v8 + v30 + 192);
        if (*(_DWORD *)(v8 + v30 + 192) < 2u) {
          *((void *)v36 - 1) = *(void *)(v37 + 184);
        }
        uint64_t v31 = v9 + v30;
        *(_OWORD *)(v31 + 8) = *(_OWORD *)(v37 + 200);
        long long v32 = *(_OWORD *)(v37 + 216);
        uint64_t v33 = *(void *)(v37 + 248);
        *(_OWORD *)(v31 + 40) = *(_OWORD *)(v37 + 232);
        *(_OWORD *)(v31 + 24) = v32;
        *(void *)(v31 + 56) = v33;
        *(void *)(v31 + 64) = 0;
        *(void *)(v31 + 72) = 0;
        *(void *)(v31 + 80) = 0;
        *(_OWORD *)(v31 + 64) = *(_OWORD *)(v37 + 256);
        *(void *)(v31 + 80) = *(void *)(v37 + 272);
        *(void *)(v37 + 264) = 0;
        *(void *)(v37 + 272) = 0;
        *(void *)(v37 + 256) = 0;
        *(unsigned char *)(v31 + 88) = *(unsigned char *)(v37 + 280);
        *(void *)(v31 + 104) = 0;
        *(void *)(v31 + 112) = 0;
        *(void *)(v31 + 96) = 0;
        *(_OWORD *)(v31 + 96) = *(_OWORD *)(v37 + 288);
        *(void *)(v31 + 112) = *(void *)(v37 + 304);
        *(void *)(v37 + 288) = 0;
        *(void *)(v37 + 296) = 0;
        *(void *)(v37 + 304) = 0;
        long long v34 = *(_OWORD *)(v37 + 312);
        *(_OWORD *)(v31 + 129) = *(_OWORD *)(v37 + 321);
        *(_OWORD *)(v31 + 120) = v34;
        long long v35 = *(_OWORD *)(v37 + 340);
        *(_DWORD *)(v31 + 164) = *(_DWORD *)(v37 + 356);
        *(_OWORD *)(v31 + 148) = v35;
        *(void *)(v31 + 176) = 0;
        *(void *)(v31 + 184) = 0;
        *(void *)(v31 + 168) = 0;
        *(void *)(v31 + 168) = *(void *)(v37 + 360);
        *(void *)(v31 + 176) = *(void *)(v37 + 368);
        *(void *)(v31 + 184) = *(void *)(v37 + 376);
        *(void *)(v37 + 360) = 0;
        *(void *)(v37 + 368) = 0;
        *(void *)(v37 + 376) = 0;
        __n128 result = *(__n128 *)(v37 + 384);
        *(_DWORD *)(v31 + 208) = *(_DWORD *)(v37 + 400);
        *(__n128 *)(v31 + 192) = result;
        v30 += 408;
      }
      while (v37 + 408 != a2);
    }
  }
  return result;
}

void sub_881364(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_879BD8((void **)va);
  _Unwind_Resume(a1);
}

void sub_881378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  unint64_t v38 = 0;
  if (a5 > a6)
  {
    uint64_t v10 = (uint64_t)a7;
    if (a2 != a3)
    {
      unint64_t v11 = 0;
      uint64_t v12 = a2 + 184;
      uint64_t v10 = (uint64_t)a7;
      do
      {
        long long v18 = (void *)(v12 - 184);
        *(_DWORD *)uint64_t v10 = *(_DWORD *)(v12 - 184);
        *(void *)(v10 + 16) = 0;
        *(void *)(v10 + 24) = 0;
        *(void *)(v10 + 8) = 0;
        *(_OWORD *)(v10 + 8) = *(_OWORD *)(v12 - 176);
        *(void *)(v10 + 24) = *(void *)(v12 - 160);
        v18[1] = 0;
        v18[2] = 0;
        v18[3] = 0;
        long long v19 = *(_OWORD *)(v12 - 152);
        long long v20 = *(_OWORD *)(v12 - 120);
        *(_OWORD *)(v10 + 48) = *(_OWORD *)(v12 - 136);
        *(_OWORD *)(v10 + 64) = v20;
        *(_OWORD *)(v10 + 32) = v19;
        long long v21 = *(_OWORD *)(v12 - 88);
        uint64_t v22 = *(void *)(v12 - 72);
        *(_OWORD *)(v10 + 80) = *(_OWORD *)(v12 - 104);
        *(_OWORD *)(v10 + 96) = v21;
        *(void *)(v10 + 112) = v22;
        *(void *)(v10 + 120) = 0;
        *(void *)(v10 + 128) = 0;
        *(void *)(v10 + 136) = 0;
        *(_OWORD *)(v10 + 120) = *(_OWORD *)(v12 - 64);
        *(void *)(v10 + 136) = *(void *)(v12 - 48);
        v18[15] = 0;
        v18[16] = 0;
        v18[17] = 0;
        *(void *)(v10 + 144) = 0;
        *(void *)(v10 + 152) = 0;
        *(void *)(v10 + 160) = 0;
        *(_OWORD *)(v10 + 144) = *(_OWORD *)(v12 - 40);
        *(void *)(v10 + 160) = *(void *)(v12 - 24);
        v18[18] = 0;
        v18[19] = 0;
        v18[20] = 0;
        *(_OWORD *)(v10 + 168) = *(_OWORD *)(v12 - 16);
        *(_DWORD *)(v10 + 192) = *(_DWORD *)(v12 + 8);
        if (*(_DWORD *)(v12 + 8) < 2u) {
          *(void *)(v10 + 184) = *(void *)v12;
        }
        *(_OWORD *)(v10 + 200) = *(_OWORD *)(v12 + 16);
        long long v13 = *(_OWORD *)(v12 + 32);
        uint64_t v14 = *(void *)(v12 + 64);
        *(_OWORD *)(v10 + 232) = *(_OWORD *)(v12 + 48);
        *(_OWORD *)(v10 + 216) = v13;
        *(void *)(v10 + 248) = v14;
        *(void *)(v10 + 256) = 0;
        *(void *)(v10 + 264) = 0;
        *(void *)(v10 + 272) = 0;
        *(_OWORD *)(v10 + 256) = *(_OWORD *)(v12 + 72);
        *(void *)(v10 + 272) = *(void *)(v12 + 88);
        *(void *)(v12 + 80) = 0;
        *(void *)(v12 + 88) = 0;
        *(void *)(v12 + 72) = 0;
        *(unsigned char *)(v10 + 280) = *(unsigned char *)(v12 + 96);
        *(void *)(v10 + 296) = 0;
        *(void *)(v10 + 304) = 0;
        *(void *)(v10 + 288) = 0;
        *(_OWORD *)(v10 + 288) = *(_OWORD *)(v12 + 104);
        *(void *)(v10 + 304) = *(void *)(v12 + 120);
        *(void *)(v12 + 104) = 0;
        *(void *)(v12 + 112) = 0;
        *(void *)(v12 + 120) = 0;
        long long v15 = *(_OWORD *)(v12 + 128);
        *(_OWORD *)(v10 + 321) = *(_OWORD *)(v12 + 137);
        *(_OWORD *)(v10 + 312) = v15;
        long long v16 = *(_OWORD *)(v12 + 156);
        *(_DWORD *)(v10 + 356) = *(_DWORD *)(v12 + 172);
        *(_OWORD *)(v10 + 340) = v16;
        *(void *)(v10 + 368) = 0;
        *(void *)(v10 + 376) = 0;
        *(void *)(v10 + 360) = 0;
        *(void *)(v10 + 360) = *(void *)(v12 + 176);
        *(void *)(v10 + 368) = *(void *)(v12 + 184);
        *(void *)(v10 + 376) = *(void *)(v12 + 192);
        *(void *)(v12 + 176) = 0;
        *(void *)(v12 + 184) = 0;
        *(void *)(v12 + 192) = 0;
        long long v17 = *(_OWORD *)(v12 + 200);
        *(_DWORD *)(v10 + 400) = *(_DWORD *)(v12 + 216);
        *(_OWORD *)(v10 + 384) = v17;
        ++v11;
        v10 += 408;
        v12 += 408;
      }
      while (v18 + 51 != (void *)a3);
      unint64_t v38 = v11;
    }
    sub_87BA3C(v10, v10, (uint64_t)a7, (uint64_t)a7, a2, a2, a1, a1, a3, a3);
    if (!a7) {
      return;
    }
LABEL_19:
    if (v38)
    {
      for (unint64_t i = 0; i < v38; ++i)
      {
        uint64_t v37 = (void *)a7[45];
        if (v37)
        {
          a7[46] = v37;
          operator delete(v37);
        }
        sub_4F32CC(a7);
        a7 += 51;
      }
    }
    return;
  }
  uint64_t v23 = a7;
  if (a1 != a2)
  {
    unint64_t v24 = 0;
    uint64_t v25 = a1 + 184;
    uint64_t v23 = a7;
    do
    {
      uint64_t v31 = (void *)(v25 - 184);
      *(_DWORD *)uint64_t v23 = *(_DWORD *)(v25 - 184);
      v23[2] = 0;
      v23[3] = 0;
      v23[1] = 0;
      *(_OWORD *)(v23 + 1) = *(_OWORD *)(v25 - 176);
      v23[3] = *(void *)(v25 - 160);
      v31[1] = 0;
      v31[2] = 0;
      v31[3] = 0;
      long long v32 = *(_OWORD *)(v25 - 152);
      long long v33 = *(_OWORD *)(v25 - 120);
      *((_OWORD *)v23 + 3) = *(_OWORD *)(v25 - 136);
      *((_OWORD *)v23 + 4) = v33;
      *((_OWORD *)v23 + 2) = v32;
      long long v34 = *(_OWORD *)(v25 - 88);
      uint64_t v35 = *(void *)(v25 - 72);
      *((_OWORD *)v23 + 5) = *(_OWORD *)(v25 - 104);
      *((_OWORD *)v23 + 6) = v34;
      v23[14] = v35;
      v23[15] = 0;
      v23[16] = 0;
      v23[17] = 0;
      *(_OWORD *)(v23 + 15) = *(_OWORD *)(v25 - 64);
      v23[17] = *(void *)(v25 - 48);
      v31[15] = 0;
      v31[16] = 0;
      v31[17] = 0;
      v23[18] = 0;
      v23[19] = 0;
      v23[20] = 0;
      *((_OWORD *)v23 + 9) = *(_OWORD *)(v25 - 40);
      v23[20] = *(void *)(v25 - 24);
      v31[18] = 0;
      v31[19] = 0;
      v31[20] = 0;
      *(_OWORD *)(v23 + 21) = *(_OWORD *)(v25 - 16);
      *((_DWORD *)v23 + 48) = *(_DWORD *)(v25 + 8);
      if (*(_DWORD *)(v25 + 8) < 2u) {
        v23[23] = *(void *)v25;
      }
      *(_OWORD *)(v23 + 25) = *(_OWORD *)(v25 + 16);
      long long v26 = *(_OWORD *)(v25 + 32);
      uint64_t v27 = *(void *)(v25 + 64);
      *(_OWORD *)(v23 + 29) = *(_OWORD *)(v25 + 48);
      *(_OWORD *)(v23 + 27) = v26;
      v23[31] = v27;
      v23[32] = 0;
      v23[33] = 0;
      v23[34] = 0;
      *((_OWORD *)v23 + 16) = *(_OWORD *)(v25 + 72);
      v23[34] = *(void *)(v25 + 88);
      *(void *)(v25 + 80) = 0;
      *(void *)(v25 + 88) = 0;
      *(void *)(v25 + 72) = 0;
      *((unsigned char *)v23 + 280) = *(unsigned char *)(v25 + 96);
      v23[37] = 0;
      v23[38] = 0;
      v23[36] = 0;
      *((_OWORD *)v23 + 18) = *(_OWORD *)(v25 + 104);
      v23[38] = *(void *)(v25 + 120);
      *(void *)(v25 + 104) = 0;
      *(void *)(v25 + 112) = 0;
      *(void *)(v25 + 120) = 0;
      long long v28 = *(_OWORD *)(v25 + 128);
      *(_OWORD *)((char *)v23 + 321) = *(_OWORD *)(v25 + 137);
      *(_OWORD *)(v23 + 39) = v28;
      long long v29 = *(_OWORD *)(v25 + 156);
      *((_DWORD *)v23 + 89) = *(_DWORD *)(v25 + 172);
      *(_OWORD *)((char *)v23 + 340) = v29;
      v23[46] = 0;
      v23[47] = 0;
      v23[45] = 0;
      v23[45] = *(void *)(v25 + 176);
      v23[46] = *(void *)(v25 + 184);
      v23[47] = *(void *)(v25 + 192);
      *(void *)(v25 + 176) = 0;
      *(void *)(v25 + 184) = 0;
      *(void *)(v25 + 192) = 0;
      long long v30 = *(_OWORD *)(v25 + 200);
      *((_DWORD *)v23 + 100) = *(_DWORD *)(v25 + 216);
      *((_OWORD *)v23 + 24) = v30;
      ++v24;
      v23 += 51;
      v25 += 408;
    }
    while (v31 + 51 != (void *)a2);
    unint64_t v38 = v24;
  }
  sub_87B7FC((uint64_t)a7, v23, a2, a3, a1);
  if (a7) {
    goto LABEL_19;
  }
}

void sub_8817D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_879BD8((void **)va);
  _Unwind_Resume(a1);
}

void sub_8817E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_879BD8((void **)va);
  _Unwind_Resume(a1);
}

void *sub_8817F8(void *result, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9 = a2;
  uint64_t v10 = result;
  unint64_t v31 = a2;
  long long v32 = result;
LABEL_2:
  uint64_t v11 = 1 - a4;
  while (1)
  {
    uint64_t v12 = v9 - (void)v10;
    unint64_t v13 = 0x1A8C536FE1A8C537 * ((v9 - (uint64_t)v10) >> 3);
    if (!(!v6 & v5))
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unint64_t v31 = v9 - 1080;
          uint64_t v27 = sub_638A2C(v9 - 1080);
          if (v27 == sub_638A2C((uint64_t)v10))
          {
            uint64_t v28 = sub_638A34(v9 - 1080);
            __n128 result = (void *)sub_638A34((uint64_t)v10);
            if (v28 <= (uint64_t)result) {
              return result;
            }
          }
          else
          {
            uint64_t v29 = sub_638A2C(v9 - 1080);
            __n128 result = (void *)sub_638A2C((uint64_t)v10);
            if (v29 <= (uint64_t)result) {
              return result;
            }
          }
          __n128 result = sub_873E98((uint64_t *)&v32, (uint64_t *)&v31);
          break;
        case 3uLL:
          unint64_t v31 = v9 - 1080;
          return (void *)sub_874280((uint64_t)v10, (uint64_t)(v10 + 135), v9 - 1080);
        case 4uLL:
          unint64_t v31 = v9 - 1080;
          return sub_8751E4((uint64_t)v10, (uint64_t)(v10 + 135), (uint64_t)(v10 + 270), v9 - 1080);
        case 5uLL:
          unint64_t v31 = v9 - 1080;
          return sub_8753E8((uint64_t)v10, (uint64_t)(v10 + 135), (uint64_t)(v10 + 270), (uint64_t)(v10 + 405), v9 - 1080);
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v12 <= 25919)
    {
      if (a5) {
        return (void *)sub_881BA0((uint64_t)v10, v9);
      }
      else {
        return (void *)sub_881D80((uint64_t)v10, v9);
      }
    }
    if (v11 == 1) {
      break;
    }
    unint64_t v14 = v13 >> 1;
    uint64_t v15 = v9 - 1080;
    if ((unint64_t)v12 >= 0x21C01)
    {
      sub_874280((uint64_t)v10, (uint64_t)&v10[135 * (v13 >> 1)], v15);
      uint64_t v16 = 135 * v14;
      uint64_t v17 = 1080 * v14 - 1080;
      unint64_t v18 = v31;
      sub_874280((uint64_t)(v32 + 135), (uint64_t)v32 + v17, v31 - 2160);
      sub_874280((uint64_t)(v32 + 270), (uint64_t)&v32[v16 + 135], v18 - 3240);
      sub_874280((uint64_t)v32 + v17, (uint64_t)&v32[v16], (uint64_t)&v32[v16 + 135]);
      long long v30 = &v32[v16];
      sub_873E98((uint64_t *)&v32, (uint64_t *)&v30);
      if (a5) {
        goto LABEL_16;
      }
    }
    else
    {
      sub_874280((uint64_t)&v10[135 * (v13 >> 1)], (uint64_t)v10, v15);
      if (a5) {
        goto LABEL_16;
      }
    }
    uint64_t v19 = (uint64_t)v32;
    uint64_t v20 = (uint64_t)(v32 - 135);
    uint64_t v21 = sub_638A2C((uint64_t)(v32 - 135));
    if (v21 == sub_638A2C(v19))
    {
      uint64_t v22 = sub_638A34(v20);
      if (v22 <= sub_638A34(v19)) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v23 = sub_638A2C(v20);
      if (v23 <= sub_638A2C(v19))
      {
LABEL_23:
        uint64_t v9 = v31;
        __n128 result = (void *)sub_881EFC((uint64_t)v32, v31);
        uint64_t v10 = result;
        goto LABEL_24;
      }
    }
LABEL_16:
    uint64_t v9 = v31;
    unint64_t v24 = sub_88227C((uint64_t)v32, v31);
    if ((v25 & 1) == 0) {
      goto LABEL_22;
    }
    int v26 = sub_8825C8((uint64_t)v32, v24);
    uint64_t v10 = (void *)(v24 + 1080);
    __n128 result = (void *)sub_8825C8(v24 + 1080, v9);
    if (result)
    {
      if (v26) {
        return result;
      }
      unint64_t v31 = v24;
      uint64_t v10 = v32;
      uint64_t v9 = v24;
      ++v11;
    }
    else
    {
      if (!v26)
      {
LABEL_22:
        __n128 result = (void *)sub_8817F8(v32, v24, a3, -v11, a5 & 1);
        uint64_t v10 = (void *)(v24 + 1080);
LABEL_24:
        a5 = 0;
        long long v32 = v10;
        a4 = -v11;
        goto LABEL_2;
      }
      long long v32 = (void *)(v24 + 1080);
      ++v11;
    }
  }
  if (v10 != (void *)v9) {
    return (void *)sub_882950(v10, v9, v9, a3);
  }
  return result;
}

uint64_t sub_881BA0(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return result;
  }
  uint64_t v3 = result;
  uint64_t v4 = result + 1080;
  if (result + 1080 == a2) {
    return result;
  }
  uint64_t v5 = 0;
  uint64_t v6 = result;
  while (2)
  {
    uint64_t v8 = v6;
    uint64_t v6 = v4;
    uint64_t v9 = sub_638A2C(v4);
    if (v9 == sub_638A2C(v8))
    {
      uint64_t v10 = sub_638A34(v6);
      __n128 result = sub_638A34(v8);
    }
    else
    {
      uint64_t v10 = sub_638A2C(v6);
      __n128 result = sub_638A2C(v8);
    }
    if (v10 <= result) {
      goto LABEL_6;
    }
    sub_7574DC((uint64_t)v15, v6);
    sub_874FD8(v6, v8);
    uint64_t v7 = v3;
    if (v8 == v3) {
      goto LABEL_5;
    }
    uint64_t v11 = v5;
    while (1)
    {
      uint64_t v12 = sub_638A2C((uint64_t)v15);
      if (v12 != sub_638A2C(v3 + v11 - 1080)) {
        break;
      }
      uint64_t v13 = sub_638A34((uint64_t)v15);
      if (v13 <= sub_638A34(v3 + v11 - 1080))
      {
        uint64_t v7 = v3 + v11;
        goto LABEL_5;
      }
LABEL_13:
      v8 -= 1080;
      sub_874FD8(v3 + v11, v3 + v11 - 1080);
      v11 -= 1080;
      if (!v11)
      {
        uint64_t v7 = v3;
        goto LABEL_5;
      }
    }
    uint64_t v14 = sub_638A2C((uint64_t)v15);
    if (v14 > sub_638A2C(v3 + v11 - 1080)) {
      goto LABEL_13;
    }
    uint64_t v7 = v8;
LABEL_5:
    sub_874FD8(v7, (uint64_t)v15);
    __n128 result = (uint64_t)sub_52F1E8((uint64_t)v15);
LABEL_6:
    uint64_t v4 = v6 + 1080;
    v5 += 1080;
    if (v6 + 1080 != a2) {
      continue;
    }
    return result;
  }
}

void sub_881D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_881D80(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    while (1)
    {
      uint64_t v4 = v3 + 1080;
      if (v3 + 1080 == a2) {
        break;
      }
      uint64_t v5 = v3;
      v3 += 1080;
      uint64_t v6 = sub_638A2C(v4);
      if (v6 == sub_638A2C(v5))
      {
        uint64_t v7 = sub_638A34(v3);
        __n128 result = sub_638A34(v5);
      }
      else
      {
        uint64_t v7 = sub_638A2C(v3);
        __n128 result = sub_638A2C(v5);
      }
      if (v7 > result)
      {
        sub_7574DC((uint64_t)v12, v3);
        do
        {
          uint64_t v8 = v5;
          sub_874FD8(v5 + 1080, v5);
          uint64_t v9 = sub_638A2C((uint64_t)v12);
          v5 -= 1080;
          if (v9 == sub_638A2C(v8 - 1080))
          {
            uint64_t v10 = sub_638A34((uint64_t)v12);
            uint64_t v11 = sub_638A34(v8 - 1080);
          }
          else
          {
            uint64_t v10 = sub_638A2C((uint64_t)v12);
            uint64_t v11 = sub_638A2C(v8 - 1080);
          }
        }
        while (v10 > v11);
        sub_874FD8(v8, (uint64_t)v12);
        __n128 result = (uint64_t)sub_52F1E8((uint64_t)v12);
      }
    }
  }
  return result;
}

void sub_881EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t sub_881EFC(uint64_t a1, unint64_t a2)
{
  sub_7574DC((uint64_t)v24, a1);
  uint64_t v4 = sub_638A2C((uint64_t)v24);
  if (v4 == sub_638A2C(a2 - 1080))
  {
    uint64_t v5 = sub_638A34((uint64_t)v24);
    uint64_t v6 = sub_638A34(a2 - 1080);
  }
  else
  {
    uint64_t v5 = sub_638A2C((uint64_t)v24);
    uint64_t v6 = sub_638A2C(a2 - 1080);
  }
  if (v5 <= v6)
  {
    for (unint64_t i = a1 + 1080; i < a2; i += 1080)
    {
      uint64_t v11 = sub_638A2C((uint64_t)v24);
      if (v11 == sub_638A2C(i))
      {
        uint64_t v12 = sub_638A34((uint64_t)v24);
        uint64_t v13 = sub_638A34(i);
      }
      else
      {
        uint64_t v12 = sub_638A2C((uint64_t)v24);
        uint64_t v13 = sub_638A2C(i);
      }
      if (v12 > v13) {
        break;
      }
    }
  }
  else
  {
    for (unint64_t i = a1 + 1080; ; i += 1080)
    {
      uint64_t v8 = sub_638A2C((uint64_t)v24);
      if (v8 == sub_638A2C(i))
      {
        uint64_t v9 = sub_638A34((uint64_t)v24);
        uint64_t v10 = sub_638A34(i);
      }
      else
      {
        uint64_t v9 = sub_638A2C((uint64_t)v24);
        uint64_t v10 = sub_638A2C(i);
      }
      if (v9 > v10) {
        break;
      }
    }
  }
  if (i < a2)
  {
    for (a2 -= 1080; ; a2 -= 1080)
    {
      uint64_t v14 = sub_638A2C((uint64_t)v24);
      if (v14 == sub_638A2C(a2))
      {
        uint64_t v15 = sub_638A34((uint64_t)v24);
        uint64_t v16 = sub_638A34(a2);
      }
      else
      {
        uint64_t v15 = sub_638A2C((uint64_t)v24);
        uint64_t v16 = sub_638A2C(a2);
      }
      if (v15 <= v16) {
        break;
      }
    }
  }
  while (i < a2)
  {
    sub_7574DC((uint64_t)v25, i);
    sub_874FD8(i, a2);
    sub_874FD8(a2, (uint64_t)v25);
    sub_52F1E8((uint64_t)v25);
    do
    {
      i += 1080;
      uint64_t v17 = sub_638A2C((uint64_t)v24);
      if (v17 == sub_638A2C(i))
      {
        uint64_t v18 = sub_638A34((uint64_t)v24);
        uint64_t v19 = sub_638A34(i);
      }
      else
      {
        uint64_t v18 = sub_638A2C((uint64_t)v24);
        uint64_t v19 = sub_638A2C(i);
      }
    }
    while (v18 <= v19);
    do
    {
      a2 -= 1080;
      uint64_t v20 = sub_638A2C((uint64_t)v24);
      if (v20 == sub_638A2C(a2))
      {
        uint64_t v21 = sub_638A34((uint64_t)v24);
        uint64_t v22 = sub_638A34(a2);
      }
      else
      {
        uint64_t v21 = sub_638A2C((uint64_t)v24);
        uint64_t v22 = sub_638A2C(a2);
      }
    }
    while (v21 > v22);
  }
  if (i - 1080 != a1) {
    sub_874FD8(a1, i - 1080);
  }
  sub_874FD8(i - 1080, (uint64_t)v24);
  sub_52F1E8((uint64_t)v24);
  return i;
}

void sub_882204(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_882218(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_88222C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_882240(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_882254(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_882268(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_88227C(uint64_t a1, unint64_t a2)
{
  sub_7574DC((uint64_t)v25, a1);
  for (uint64_t i = 0; ; i += 1080)
  {
    uint64_t v5 = sub_638A2C(a1 + i + 1080);
    if (v5 == sub_638A2C((uint64_t)v25))
    {
      uint64_t v6 = sub_638A34(a1 + i + 1080);
      uint64_t v7 = sub_638A34((uint64_t)v25);
    }
    else
    {
      uint64_t v6 = sub_638A2C(a1 + i + 1080);
      uint64_t v7 = sub_638A2C((uint64_t)v25);
    }
    if (v6 <= v7) {
      break;
    }
  }
  uint64_t v8 = a1 + i;
  unint64_t v9 = a1 + i + 1080;
  if (i)
  {
    do
    {
      a2 -= 1080;
      uint64_t v10 = sub_638A2C(a2);
      if (v10 == sub_638A2C((uint64_t)v25))
      {
        uint64_t v11 = sub_638A34(a2);
        uint64_t v12 = sub_638A34((uint64_t)v25);
      }
      else
      {
        uint64_t v11 = sub_638A2C(a2);
        uint64_t v12 = sub_638A2C((uint64_t)v25);
      }
    }
    while (v11 <= v12);
  }
  else
  {
    do
    {
      if (v9 >= a2) {
        break;
      }
      a2 -= 1080;
      uint64_t v13 = sub_638A2C(a2);
      if (v13 == sub_638A2C((uint64_t)v25))
      {
        uint64_t v14 = sub_638A34(a2);
        uint64_t v15 = sub_638A34((uint64_t)v25);
      }
      else
      {
        uint64_t v14 = sub_638A2C(a2);
        uint64_t v15 = sub_638A2C((uint64_t)v25);
      }
    }
    while (v14 <= v15);
  }
  if (v9 < a2)
  {
    unint64_t v16 = a1 + i + 1080;
    unint64_t v17 = a2;
    do
    {
      sub_7574DC((uint64_t)v26, v16);
      sub_874FD8(v16, v17);
      sub_874FD8(v17, (uint64_t)v26);
      sub_52F1E8((uint64_t)v26);
      do
      {
        uint64_t v8 = v16;
        v16 += 1080;
        uint64_t v18 = sub_638A2C(v16);
        if (v18 == sub_638A2C((uint64_t)v25))
        {
          uint64_t v19 = sub_638A34(v16);
          uint64_t v20 = sub_638A34((uint64_t)v25);
        }
        else
        {
          uint64_t v19 = sub_638A2C(v16);
          uint64_t v20 = sub_638A2C((uint64_t)v25);
        }
      }
      while (v19 > v20);
      unint64_t v16 = v8 + 1080;
      do
      {
        v17 -= 1080;
        uint64_t v21 = sub_638A2C(v17);
        if (v21 == sub_638A2C((uint64_t)v25))
        {
          uint64_t v22 = sub_638A34(v17);
          uint64_t v23 = sub_638A34((uint64_t)v25);
        }
        else
        {
          uint64_t v22 = sub_638A2C(v17);
          uint64_t v23 = sub_638A2C((uint64_t)v25);
        }
      }
      while (v22 <= v23);
    }
    while (v16 < v17);
  }
  if (v8 != a1) {
    sub_874FD8(a1, v8);
  }
  sub_874FD8(v8, (uint64_t)v25);
  sub_52F1E8((uint64_t)v25);
  return v8;
}

void sub_882564(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_882578(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_88258C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_8825A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_8825B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_8825C8(uint64_t a1, uint64_t a2)
{
  BOOL v4 = 1;
  switch(0x1A8C536FE1A8C537 * ((a2 - a1) >> 3))
  {
    case 0:
    case 1:
      return v4;
    case 2:
      uint64_t v5 = a2 - 1080;
      uint64_t v6 = sub_638A2C(a2 - 1080);
      if (v6 == sub_638A2C(a1))
      {
        uint64_t v7 = sub_638A34(v5);
        if (v7 <= sub_638A34(a1)) {
          return 1;
        }
      }
      else
      {
        uint64_t v20 = sub_638A2C(v5);
        if (v20 <= sub_638A2C(a1)) {
          return 1;
        }
      }
      sub_7574DC((uint64_t)v22, a1);
      sub_874FD8(a1, v5);
      sub_874FD8(v5, (uint64_t)v22);
      sub_52F1E8((uint64_t)v22);
      return 1;
    case 3:
      sub_874280(a1, a1 + 1080, a2 - 1080);
      return v4;
    case 4:
      sub_8751E4(a1, a1 + 1080, a1 + 2160, a2 - 1080);
      return v4;
    case 5:
      sub_8753E8(a1, a1 + 1080, a1 + 2160, a1 + 3240, a2 - 1080);
      return v4;
    default:
      uint64_t v8 = a1 + 2160;
      sub_874280(a1, a1 + 1080, a1 + 2160);
      uint64_t v9 = a1 + 3240;
      if (a1 + 3240 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    uint64_t v12 = sub_638A2C(v9);
    if (v12 == sub_638A2C(v8))
    {
      uint64_t v13 = sub_638A34(v9);
      uint64_t v14 = sub_638A34(v8);
    }
    else
    {
      uint64_t v13 = sub_638A2C(v9);
      uint64_t v14 = sub_638A2C(v8);
    }
    if (v13 > v14) {
      break;
    }
LABEL_7:
    uint64_t v8 = v9;
    v10 += 1080;
    v9 += 1080;
    if (v9 == a2) {
      return 1;
    }
  }
  sub_7574DC((uint64_t)v22, v9);
  sub_874FD8(v9, v8);
  uint64_t v15 = a1;
  if (v8 == a1)
  {
LABEL_22:
    sub_874FD8(v15, (uint64_t)v22);
    if (++v11 == 8) {
      goto LABEL_25;
    }
LABEL_23:
    sub_52F1E8((uint64_t)v22);
    goto LABEL_7;
  }
  uint64_t v16 = v10;
  while (1)
  {
    uint64_t v17 = sub_638A2C((uint64_t)v22);
    if (v17 == sub_638A2C(a1 + v16 + 1080)) {
      break;
    }
    uint64_t v19 = sub_638A2C((uint64_t)v22);
    if (v19 <= sub_638A2C(a1 + v16 + 1080))
    {
      sub_874FD8(v8, (uint64_t)v22);
      if (++v11 != 8) {
        goto LABEL_23;
      }
      goto LABEL_25;
    }
LABEL_14:
    v8 -= 1080;
    sub_874FD8(a1 + v16 + 2160, a1 + v16 + 1080);
    v16 -= 1080;
    if (v16 == -2160)
    {
      uint64_t v15 = a1;
      goto LABEL_22;
    }
  }
  uint64_t v18 = sub_638A34((uint64_t)v22);
  if (v18 > sub_638A34(a1 + v16 + 1080)) {
    goto LABEL_14;
  }
  sub_874FD8(a1 + v16 + 2160, (uint64_t)v22);
  if (++v11 != 8) {
    goto LABEL_23;
  }
LABEL_25:
  BOOL v4 = v9 + 1080 == a2;
  sub_52F1E8((uint64_t)v22);
  return v4;
}

void sub_882924(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_882950(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != (void *)a2)
  {
    uint64_t v8 = (a2 - (uint64_t)a1) / 1080;
    if (a2 - (uint64_t)a1 >= 1081)
    {
      unint64_t v9 = (unint64_t)(v8 - 2) >> 1;
      unint64_t v10 = v9 + 1;
      uint64_t v11 = (uint64_t)&a1[135 * v9];
      do
      {
        sub_882B04(a1, a4, v8, v11);
        v11 -= 1080;
        --v10;
      }
      while (v10);
    }
    uint64_t v12 = a2;
    if (a2 != a3)
    {
      uint64_t v13 = a2;
      while (1)
      {
        uint64_t v14 = sub_638A2C(v13);
        if (v14 == sub_638A2C((uint64_t)a1))
        {
          uint64_t v15 = sub_638A34(v13);
          if (v15 > sub_638A34((uint64_t)a1)) {
            goto LABEL_12;
          }
        }
        else
        {
          uint64_t v16 = sub_638A2C(v13);
          if (v16 > sub_638A2C((uint64_t)a1))
          {
LABEL_12:
            sub_7574DC((uint64_t)v18, v13);
            sub_874FD8(v13, (uint64_t)a1);
            sub_874FD8((uint64_t)a1, (uint64_t)v18);
            sub_52F1E8((uint64_t)v18);
            sub_882B04(a1, a4, v8, (uint64_t)a1);
          }
        }
        v13 += 1080;
        if (v13 == a3)
        {
          uint64_t v12 = a3;
          break;
        }
      }
    }
    sub_882DC4(a1, a2, a4);
    return v12;
  }
  return a3;
}

void *sub_882B04(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 < 2) {
    return result;
  }
  uint64_t v6 = result;
  uint64_t v7 = v4 >> 1;
  if ((uint64_t)(v4 >> 1) < 0x1A8C536FE1A8C537 * ((a4 - (uint64_t)result) >> 3)) {
    return result;
  }
  uint64_t v9 = (0x3518A6DFC3518A6ELL * ((a4 - (uint64_t)result) >> 3)) | 1;
  uint64_t v10 = (uint64_t)&result[135 * v9];
  uint64_t v11 = 0x3518A6DFC3518A6ELL * ((a4 - (uint64_t)result) >> 3) + 2;
  if (v11 < a3)
  {
    uint64_t v12 = sub_638A2C((uint64_t)&result[135 * v9]);
    if (v12 == sub_638A2C(v10 + 1080))
    {
      uint64_t v13 = sub_638A34((uint64_t)&v6[135 * v9]);
      if (v13 <= sub_638A34(v10 + 1080)) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    uint64_t v14 = sub_638A2C((uint64_t)&v6[135 * v9]);
    if (v14 > sub_638A2C(v10 + 1080))
    {
LABEL_8:
      v10 += 1080;
      uint64_t v9 = v11;
    }
  }
LABEL_9:
  uint64_t v15 = sub_638A2C(v10);
  if (v15 == sub_638A2C(a4))
  {
    uint64_t v16 = sub_638A34(v10);
    __n128 result = (void *)sub_638A34(a4);
    if (v16 > (uint64_t)result) {
      return result;
    }
  }
  else
  {
    uint64_t v17 = sub_638A2C(v10);
    __n128 result = (void *)sub_638A2C(a4);
    if (v17 > (uint64_t)result) {
      return result;
    }
  }
  sub_7574DC((uint64_t)v27, a4);
  sub_874FD8(a4, v10);
  if (v7 >= v9)
  {
    while (1)
    {
      uint64_t v19 = 2 * v9;
      uint64_t v9 = (2 * v9) | 1;
      uint64_t v18 = (uint64_t)&v6[135 * v9];
      uint64_t v20 = v19 + 2;
      if (v19 + 2 < a3)
      {
        uint64_t v21 = sub_638A2C((uint64_t)&v6[135 * v9]);
        if (v21 == sub_638A2C(v18 + 1080))
        {
          uint64_t v22 = sub_638A34((uint64_t)&v6[135 * v9]);
          uint64_t v23 = sub_638A34(v18 + 1080);
        }
        else
        {
          uint64_t v22 = sub_638A2C((uint64_t)&v6[135 * v9]);
          uint64_t v23 = sub_638A2C(v18 + 1080);
        }
        if (v22 > v23)
        {
          v18 += 1080;
          uint64_t v9 = v20;
        }
      }
      uint64_t v24 = sub_638A2C(v18);
      if (v24 == sub_638A2C((uint64_t)v27))
      {
        uint64_t v25 = sub_638A34(v18);
        uint64_t v26 = sub_638A34((uint64_t)v27);
      }
      else
      {
        uint64_t v25 = sub_638A2C(v18);
        uint64_t v26 = sub_638A2C((uint64_t)v27);
      }
      if (v25 > v26) {
        break;
      }
      sub_874FD8(v10, v18);
      uint64_t v10 = v18;
      if (v7 < v9) {
        goto LABEL_26;
      }
    }
  }
  uint64_t v18 = v10;
LABEL_26:
  sub_874FD8(v18, (uint64_t)v27);
  return sub_52F1E8((uint64_t)v27);
}

void sub_882DB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_882DC4(void *result, uint64_t a2, uint64_t a3)
{
  if (a2 - (uint64_t)result >= 1081)
  {
    unint64_t v4 = result;
    int64_t v5 = (a2 - (uint64_t)result) / 0x438uLL;
    uint64_t v6 = a2 - 1080;
    do
    {
      sub_7574DC((uint64_t)v10, (uint64_t)v4);
      uint64_t v8 = sub_875C3C((uint64_t)v4, a3, v5);
      uint64_t v9 = v8;
      if (v6 == v8)
      {
        sub_874FD8(v8, (uint64_t)v10);
      }
      else
      {
        sub_874FD8(v8, v6);
        sub_874FD8(v6, (uint64_t)v10);
        sub_882F10(v4, v9 + 1080, a3, 0x1A8C536FE1A8C537 * ((v9 + 1080 - (uint64_t)v4) >> 3));
      }
      __n128 result = sub_52F1E8((uint64_t)v10);
      v6 -= 1080;
    }
    while (v5-- > 2);
  }
  return result;
}

void sub_882EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_882F10(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    int64_t v5 = result;
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = (uint64_t)&result[135 * (v4 >> 1)];
    uint64_t v8 = a2 - 1080;
    uint64_t v9 = sub_638A2C(v7);
    if (v9 == sub_638A2C(v8))
    {
      uint64_t v10 = sub_638A34(v7);
      __n128 result = (void *)sub_638A34(v8);
      if (v10 <= (uint64_t)result) {
        return result;
      }
    }
    else
    {
      uint64_t v11 = sub_638A2C(v7);
      __n128 result = (void *)sub_638A2C(v8);
      if (v11 <= (uint64_t)result) {
        return result;
      }
    }
    sub_7574DC((uint64_t)v17, v8);
    sub_874FD8(v8, v7);
    if (v4 >= 2)
    {
      while (1)
      {
        unint64_t v13 = v6 - 1;
        unint64_t v6 = (v6 - 1) >> 1;
        uint64_t v12 = (uint64_t)&v5[135 * v6];
        uint64_t v14 = sub_638A2C(v12);
        if (v14 == sub_638A2C((uint64_t)v17))
        {
          uint64_t v15 = sub_638A34((uint64_t)&v5[135 * v6]);
          uint64_t v16 = sub_638A34((uint64_t)v17);
        }
        else
        {
          uint64_t v15 = sub_638A2C((uint64_t)&v5[135 * v6]);
          uint64_t v16 = sub_638A2C((uint64_t)v17);
        }
        if (v15 <= v16) {
          break;
        }
        sub_874FD8(v7, (uint64_t)&v5[135 * v6]);
        uint64_t v7 = (uint64_t)&v5[135 * v6];
        if (v13 <= 1) {
          goto LABEL_13;
        }
      }
    }
    uint64_t v12 = v7;
LABEL_13:
    sub_874FD8(v12, (uint64_t)v17);
    return sub_52F1E8((uint64_t)v17);
  }
  return result;
}

void sub_8830A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_8830B4(void *result, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9 = a2;
  uint64_t v10 = result;
  unint64_t v31 = a2;
  long long v32 = result;
LABEL_2:
  uint64_t v11 = 1 - a4;
  while (1)
  {
    uint64_t v12 = v9 - (void)v10;
    unint64_t v13 = 0x1A8C536FE1A8C537 * ((v9 - (uint64_t)v10) >> 3);
    if (!(!v6 & v5))
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unint64_t v31 = v9 - 1080;
          uint64_t v27 = sub_638A34(v9 - 1080);
          if (v27 == sub_638A34((uint64_t)v10))
          {
            uint64_t v28 = sub_638A2C(v9 - 1080);
            __n128 result = (void *)sub_638A2C((uint64_t)v10);
            if (v28 <= (uint64_t)result) {
              return result;
            }
          }
          else
          {
            uint64_t v29 = sub_638A34(v9 - 1080);
            __n128 result = (void *)sub_638A34((uint64_t)v10);
            if (v29 <= (uint64_t)result) {
              return result;
            }
          }
          __n128 result = sub_873E98((uint64_t *)&v32, (uint64_t *)&v31);
          break;
        case 3uLL:
          unint64_t v31 = v9 - 1080;
          return (void *)sub_8765EC((uint64_t)v10, (uint64_t)(v10 + 135), v9 - 1080);
        case 4uLL:
          unint64_t v31 = v9 - 1080;
          return sub_877344((uint64_t)v10, (uint64_t)(v10 + 135), (uint64_t)(v10 + 270), v9 - 1080);
        case 5uLL:
          unint64_t v31 = v9 - 1080;
          return sub_877548((uint64_t)v10, (uint64_t)(v10 + 135), (uint64_t)(v10 + 270), (uint64_t)(v10 + 405), v9 - 1080);
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v12 <= 25919)
    {
      if (a5) {
        return (void *)sub_88345C((uint64_t)v10, v9);
      }
      else {
        return (void *)sub_88363C((uint64_t)v10, v9);
      }
    }
    if (v11 == 1) {
      break;
    }
    unint64_t v14 = v13 >> 1;
    uint64_t v15 = v9 - 1080;
    if ((unint64_t)v12 >= 0x21C01)
    {
      sub_8765EC((uint64_t)v10, (uint64_t)&v10[135 * (v13 >> 1)], v15);
      uint64_t v16 = 135 * v14;
      uint64_t v17 = 1080 * v14 - 1080;
      unint64_t v18 = v31;
      sub_8765EC((uint64_t)(v32 + 135), (uint64_t)v32 + v17, v31 - 2160);
      sub_8765EC((uint64_t)(v32 + 270), (uint64_t)&v32[v16 + 135], v18 - 3240);
      sub_8765EC((uint64_t)v32 + v17, (uint64_t)&v32[v16], (uint64_t)&v32[v16 + 135]);
      long long v30 = &v32[v16];
      sub_873E98((uint64_t *)&v32, (uint64_t *)&v30);
      if (a5) {
        goto LABEL_16;
      }
    }
    else
    {
      sub_8765EC((uint64_t)&v10[135 * (v13 >> 1)], (uint64_t)v10, v15);
      if (a5) {
        goto LABEL_16;
      }
    }
    uint64_t v19 = (uint64_t)v32;
    uint64_t v20 = (uint64_t)(v32 - 135);
    uint64_t v21 = sub_638A34((uint64_t)(v32 - 135));
    if (v21 == sub_638A34(v19))
    {
      uint64_t v22 = sub_638A2C(v20);
      if (v22 <= sub_638A2C(v19)) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v23 = sub_638A34(v20);
      if (v23 <= sub_638A34(v19))
      {
LABEL_23:
        uint64_t v9 = v31;
        __n128 result = (void *)sub_8837B8((uint64_t)v32, v31);
        uint64_t v10 = result;
        goto LABEL_24;
      }
    }
LABEL_16:
    uint64_t v9 = v31;
    unint64_t v24 = sub_883B38((uint64_t)v32, v31);
    if ((v25 & 1) == 0) {
      goto LABEL_22;
    }
    int v26 = sub_883E84((uint64_t)v32, v24);
    uint64_t v10 = (void *)(v24 + 1080);
    __n128 result = (void *)sub_883E84(v24 + 1080, v9);
    if (result)
    {
      if (v26) {
        return result;
      }
      unint64_t v31 = v24;
      uint64_t v10 = v32;
      uint64_t v9 = v24;
      ++v11;
    }
    else
    {
      if (!v26)
      {
LABEL_22:
        __n128 result = (void *)sub_8830B4(v32, v24, a3, -v11, a5 & 1);
        uint64_t v10 = (void *)(v24 + 1080);
LABEL_24:
        a5 = 0;
        long long v32 = v10;
        a4 = -v11;
        goto LABEL_2;
      }
      long long v32 = (void *)(v24 + 1080);
      ++v11;
    }
  }
  if (v10 != (void *)v9) {
    return (void *)sub_88420C(v10, v9, v9, a3);
  }
  return result;
}

uint64_t sub_88345C(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return result;
  }
  uint64_t v3 = result;
  uint64_t v4 = result + 1080;
  if (result + 1080 == a2) {
    return result;
  }
  uint64_t v5 = 0;
  uint64_t v6 = result;
  while (2)
  {
    uint64_t v8 = v6;
    uint64_t v6 = v4;
    uint64_t v9 = sub_638A34(v4);
    if (v9 == sub_638A34(v8))
    {
      uint64_t v10 = sub_638A2C(v6);
      __n128 result = sub_638A2C(v8);
    }
    else
    {
      uint64_t v10 = sub_638A34(v6);
      __n128 result = sub_638A34(v8);
    }
    if (v10 <= result) {
      goto LABEL_6;
    }
    sub_7574DC((uint64_t)v15, v6);
    sub_874FD8(v6, v8);
    uint64_t v7 = v3;
    if (v8 == v3) {
      goto LABEL_5;
    }
    uint64_t v11 = v5;
    while (1)
    {
      uint64_t v12 = sub_638A34((uint64_t)v15);
      if (v12 != sub_638A34(v3 + v11 - 1080)) {
        break;
      }
      uint64_t v13 = sub_638A2C((uint64_t)v15);
      if (v13 <= sub_638A2C(v3 + v11 - 1080))
      {
        uint64_t v7 = v3 + v11;
        goto LABEL_5;
      }
LABEL_13:
      v8 -= 1080;
      sub_874FD8(v3 + v11, v3 + v11 - 1080);
      v11 -= 1080;
      if (!v11)
      {
        uint64_t v7 = v3;
        goto LABEL_5;
      }
    }
    uint64_t v14 = sub_638A34((uint64_t)v15);
    if (v14 > sub_638A34(v3 + v11 - 1080)) {
      goto LABEL_13;
    }
    uint64_t v7 = v8;
LABEL_5:
    sub_874FD8(v7, (uint64_t)v15);
    __n128 result = (uint64_t)sub_52F1E8((uint64_t)v15);
LABEL_6:
    uint64_t v4 = v6 + 1080;
    v5 += 1080;
    if (v6 + 1080 != a2) {
      continue;
    }
    return result;
  }
}

void sub_883628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_88363C(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    while (1)
    {
      uint64_t v4 = v3 + 1080;
      if (v3 + 1080 == a2) {
        break;
      }
      uint64_t v5 = v3;
      v3 += 1080;
      uint64_t v6 = sub_638A34(v4);
      if (v6 == sub_638A34(v5))
      {
        uint64_t v7 = sub_638A2C(v3);
        __n128 result = sub_638A2C(v5);
      }
      else
      {
        uint64_t v7 = sub_638A34(v3);
        __n128 result = sub_638A34(v5);
      }
      if (v7 > result)
      {
        sub_7574DC((uint64_t)v12, v3);
        do
        {
          uint64_t v8 = v5;
          sub_874FD8(v5 + 1080, v5);
          uint64_t v9 = sub_638A34((uint64_t)v12);
          v5 -= 1080;
          if (v9 == sub_638A34(v8 - 1080))
          {
            uint64_t v10 = sub_638A2C((uint64_t)v12);
            uint64_t v11 = sub_638A2C(v8 - 1080);
          }
          else
          {
            uint64_t v10 = sub_638A34((uint64_t)v12);
            uint64_t v11 = sub_638A34(v8 - 1080);
          }
        }
        while (v10 > v11);
        sub_874FD8(v8, (uint64_t)v12);
        __n128 result = (uint64_t)sub_52F1E8((uint64_t)v12);
      }
    }
  }
  return result;
}

void sub_8837A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t sub_8837B8(uint64_t a1, unint64_t a2)
{
  sub_7574DC((uint64_t)v24, a1);
  uint64_t v4 = sub_638A34((uint64_t)v24);
  if (v4 == sub_638A34(a2 - 1080))
  {
    uint64_t v5 = sub_638A2C((uint64_t)v24);
    uint64_t v6 = sub_638A2C(a2 - 1080);
  }
  else
  {
    uint64_t v5 = sub_638A34((uint64_t)v24);
    uint64_t v6 = sub_638A34(a2 - 1080);
  }
  if (v5 <= v6)
  {
    for (unint64_t i = a1 + 1080; i < a2; i += 1080)
    {
      uint64_t v11 = sub_638A34((uint64_t)v24);
      if (v11 == sub_638A34(i))
      {
        uint64_t v12 = sub_638A2C((uint64_t)v24);
        uint64_t v13 = sub_638A2C(i);
      }
      else
      {
        uint64_t v12 = sub_638A34((uint64_t)v24);
        uint64_t v13 = sub_638A34(i);
      }
      if (v12 > v13) {
        break;
      }
    }
  }
  else
  {
    for (unint64_t i = a1 + 1080; ; i += 1080)
    {
      uint64_t v8 = sub_638A34((uint64_t)v24);
      if (v8 == sub_638A34(i))
      {
        uint64_t v9 = sub_638A2C((uint64_t)v24);
        uint64_t v10 = sub_638A2C(i);
      }
      else
      {
        uint64_t v9 = sub_638A34((uint64_t)v24);
        uint64_t v10 = sub_638A34(i);
      }
      if (v9 > v10) {
        break;
      }
    }
  }
  if (i < a2)
  {
    for (a2 -= 1080; ; a2 -= 1080)
    {
      uint64_t v14 = sub_638A34((uint64_t)v24);
      if (v14 == sub_638A34(a2))
      {
        uint64_t v15 = sub_638A2C((uint64_t)v24);
        uint64_t v16 = sub_638A2C(a2);
      }
      else
      {
        uint64_t v15 = sub_638A34((uint64_t)v24);
        uint64_t v16 = sub_638A34(a2);
      }
      if (v15 <= v16) {
        break;
      }
    }
  }
  while (i < a2)
  {
    sub_7574DC((uint64_t)v25, i);
    sub_874FD8(i, a2);
    sub_874FD8(a2, (uint64_t)v25);
    sub_52F1E8((uint64_t)v25);
    do
    {
      i += 1080;
      uint64_t v17 = sub_638A34((uint64_t)v24);
      if (v17 == sub_638A34(i))
      {
        uint64_t v18 = sub_638A2C((uint64_t)v24);
        uint64_t v19 = sub_638A2C(i);
      }
      else
      {
        uint64_t v18 = sub_638A34((uint64_t)v24);
        uint64_t v19 = sub_638A34(i);
      }
    }
    while (v18 <= v19);
    do
    {
      a2 -= 1080;
      uint64_t v20 = sub_638A34((uint64_t)v24);
      if (v20 == sub_638A34(a2))
      {
        uint64_t v21 = sub_638A2C((uint64_t)v24);
        uint64_t v22 = sub_638A2C(a2);
      }
      else
      {
        uint64_t v21 = sub_638A34((uint64_t)v24);
        uint64_t v22 = sub_638A34(a2);
      }
    }
    while (v21 > v22);
  }
  if (i - 1080 != a1) {
    sub_874FD8(a1, i - 1080);
  }
  sub_874FD8(i - 1080, (uint64_t)v24);
  sub_52F1E8((uint64_t)v24);
  return i;
}

void sub_883AC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_883AD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_883AE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_883AFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_883B10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_883B24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_883B38(uint64_t a1, unint64_t a2)
{
  sub_7574DC((uint64_t)v25, a1);
  for (uint64_t i = 0; ; i += 1080)
  {
    uint64_t v5 = sub_638A34(a1 + i + 1080);
    if (v5 == sub_638A34((uint64_t)v25))
    {
      uint64_t v6 = sub_638A2C(a1 + i + 1080);
      uint64_t v7 = sub_638A2C((uint64_t)v25);
    }
    else
    {
      uint64_t v6 = sub_638A34(a1 + i + 1080);
      uint64_t v7 = sub_638A34((uint64_t)v25);
    }
    if (v6 <= v7) {
      break;
    }
  }
  uint64_t v8 = a1 + i;
  unint64_t v9 = a1 + i + 1080;
  if (i)
  {
    do
    {
      a2 -= 1080;
      uint64_t v10 = sub_638A34(a2);
      if (v10 == sub_638A34((uint64_t)v25))
      {
        uint64_t v11 = sub_638A2C(a2);
        uint64_t v12 = sub_638A2C((uint64_t)v25);
      }
      else
      {
        uint64_t v11 = sub_638A34(a2);
        uint64_t v12 = sub_638A34((uint64_t)v25);
      }
    }
    while (v11 <= v12);
  }
  else
  {
    do
    {
      if (v9 >= a2) {
        break;
      }
      a2 -= 1080;
      uint64_t v13 = sub_638A34(a2);
      if (v13 == sub_638A34((uint64_t)v25))
      {
        uint64_t v14 = sub_638A2C(a2);
        uint64_t v15 = sub_638A2C((uint64_t)v25);
      }
      else
      {
        uint64_t v14 = sub_638A34(a2);
        uint64_t v15 = sub_638A34((uint64_t)v25);
      }
    }
    while (v14 <= v15);
  }
  if (v9 < a2)
  {
    unint64_t v16 = a1 + i + 1080;
    unint64_t v17 = a2;
    do
    {
      sub_7574DC((uint64_t)v26, v16);
      sub_874FD8(v16, v17);
      sub_874FD8(v17, (uint64_t)v26);
      sub_52F1E8((uint64_t)v26);
      do
      {
        uint64_t v8 = v16;
        v16 += 1080;
        uint64_t v18 = sub_638A34(v16);
        if (v18 == sub_638A34((uint64_t)v25))
        {
          uint64_t v19 = sub_638A2C(v16);
          uint64_t v20 = sub_638A2C((uint64_t)v25);
        }
        else
        {
          uint64_t v19 = sub_638A34(v16);
          uint64_t v20 = sub_638A34((uint64_t)v25);
        }
      }
      while (v19 > v20);
      unint64_t v16 = v8 + 1080;
      do
      {
        v17 -= 1080;
        uint64_t v21 = sub_638A34(v17);
        if (v21 == sub_638A34((uint64_t)v25))
        {
          uint64_t v22 = sub_638A2C(v17);
          uint64_t v23 = sub_638A2C((uint64_t)v25);
        }
        else
        {
          uint64_t v22 = sub_638A34(v17);
          uint64_t v23 = sub_638A34((uint64_t)v25);
        }
      }
      while (v22 <= v23);
    }
    while (v16 < v17);
  }
  if (v8 != a1) {
    sub_874FD8(a1, v8);
  }
  sub_874FD8(v8, (uint64_t)v25);
  sub_52F1E8((uint64_t)v25);
  return v8;
}

void sub_883E20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_883E34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_883E48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_883E5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_883E70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_883E84(uint64_t a1, uint64_t a2)
{
  BOOL v4 = 1;
  switch(0x1A8C536FE1A8C537 * ((a2 - a1) >> 3))
  {
    case 0:
    case 1:
      return v4;
    case 2:
      uint64_t v5 = a2 - 1080;
      uint64_t v6 = sub_638A34(a2 - 1080);
      if (v6 == sub_638A34(a1))
      {
        uint64_t v7 = sub_638A2C(v5);
        if (v7 <= sub_638A2C(a1)) {
          return 1;
        }
      }
      else
      {
        uint64_t v20 = sub_638A34(v5);
        if (v20 <= sub_638A34(a1)) {
          return 1;
        }
      }
      sub_7574DC((uint64_t)v22, a1);
      sub_874FD8(a1, v5);
      sub_874FD8(v5, (uint64_t)v22);
      sub_52F1E8((uint64_t)v22);
      return 1;
    case 3:
      sub_8765EC(a1, a1 + 1080, a2 - 1080);
      return v4;
    case 4:
      sub_877344(a1, a1 + 1080, a1 + 2160, a2 - 1080);
      return v4;
    case 5:
      sub_877548(a1, a1 + 1080, a1 + 2160, a1 + 3240, a2 - 1080);
      return v4;
    default:
      uint64_t v8 = a1 + 2160;
      sub_8765EC(a1, a1 + 1080, a1 + 2160);
      uint64_t v9 = a1 + 3240;
      if (a1 + 3240 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    uint64_t v12 = sub_638A34(v9);
    if (v12 == sub_638A34(v8))
    {
      uint64_t v13 = sub_638A2C(v9);
      uint64_t v14 = sub_638A2C(v8);
    }
    else
    {
      uint64_t v13 = sub_638A34(v9);
      uint64_t v14 = sub_638A34(v8);
    }
    if (v13 > v14) {
      break;
    }
LABEL_7:
    uint64_t v8 = v9;
    v10 += 1080;
    v9 += 1080;
    if (v9 == a2) {
      return 1;
    }
  }
  sub_7574DC((uint64_t)v22, v9);
  sub_874FD8(v9, v8);
  uint64_t v15 = a1;
  if (v8 == a1)
  {
LABEL_22:
    sub_874FD8(v15, (uint64_t)v22);
    if (++v11 == 8) {
      goto LABEL_25;
    }
LABEL_23:
    sub_52F1E8((uint64_t)v22);
    goto LABEL_7;
  }
  uint64_t v16 = v10;
  while (1)
  {
    uint64_t v17 = sub_638A34((uint64_t)v22);
    if (v17 == sub_638A34(a1 + v16 + 1080)) {
      break;
    }
    uint64_t v19 = sub_638A34((uint64_t)v22);
    if (v19 <= sub_638A34(a1 + v16 + 1080))
    {
      sub_874FD8(v8, (uint64_t)v22);
      if (++v11 != 8) {
        goto LABEL_23;
      }
      goto LABEL_25;
    }
LABEL_14:
    v8 -= 1080;
    sub_874FD8(a1 + v16 + 2160, a1 + v16 + 1080);
    v16 -= 1080;
    if (v16 == -2160)
    {
      uint64_t v15 = a1;
      goto LABEL_22;
    }
  }
  uint64_t v18 = sub_638A2C((uint64_t)v22);
  if (v18 > sub_638A2C(a1 + v16 + 1080)) {
    goto LABEL_14;
  }
  sub_874FD8(a1 + v16 + 2160, (uint64_t)v22);
  if (++v11 != 8) {
    goto LABEL_23;
  }
LABEL_25:
  BOOL v4 = v9 + 1080 == a2;
  sub_52F1E8((uint64_t)v22);
  return v4;
}

void sub_8841E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_88420C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != (void *)a2)
  {
    uint64_t v8 = (a2 - (uint64_t)a1) / 1080;
    if (a2 - (uint64_t)a1 >= 1081)
    {
      unint64_t v9 = (unint64_t)(v8 - 2) >> 1;
      unint64_t v10 = v9 + 1;
      uint64_t v11 = (uint64_t)&a1[135 * v9];
      do
      {
        sub_8843C0(a1, a4, v8, v11);
        v11 -= 1080;
        --v10;
      }
      while (v10);
    }
    uint64_t v12 = a2;
    if (a2 != a3)
    {
      uint64_t v13 = a2;
      while (1)
      {
        uint64_t v14 = sub_638A34(v13);
        if (v14 == sub_638A34((uint64_t)a1))
        {
          uint64_t v15 = sub_638A2C(v13);
          if (v15 > sub_638A2C((uint64_t)a1)) {
            goto LABEL_12;
          }
        }
        else
        {
          uint64_t v16 = sub_638A34(v13);
          if (v16 > sub_638A34((uint64_t)a1))
          {
LABEL_12:
            sub_7574DC((uint64_t)v18, v13);
            sub_874FD8(v13, (uint64_t)a1);
            sub_874FD8((uint64_t)a1, (uint64_t)v18);
            sub_52F1E8((uint64_t)v18);
            sub_8843C0(a1, a4, v8, (uint64_t)a1);
          }
        }
        v13 += 1080;
        if (v13 == a3)
        {
          uint64_t v12 = a3;
          break;
        }
      }
    }
    sub_884680(a1, a2, a4);
    return v12;
  }
  return a3;
}

void *sub_8843C0(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 < 2) {
    return result;
  }
  uint64_t v6 = result;
  uint64_t v7 = v4 >> 1;
  if ((uint64_t)(v4 >> 1) < 0x1A8C536FE1A8C537 * ((a4 - (uint64_t)result) >> 3)) {
    return result;
  }
  uint64_t v9 = (0x3518A6DFC3518A6ELL * ((a4 - (uint64_t)result) >> 3)) | 1;
  uint64_t v10 = (uint64_t)&result[135 * v9];
  uint64_t v11 = 0x3518A6DFC3518A6ELL * ((a4 - (uint64_t)result) >> 3) + 2;
  if (v11 < a3)
  {
    uint64_t v12 = sub_638A34((uint64_t)&result[135 * v9]);
    if (v12 == sub_638A34(v10 + 1080))
    {
      uint64_t v13 = sub_638A2C((uint64_t)&v6[135 * v9]);
      if (v13 <= sub_638A2C(v10 + 1080)) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    uint64_t v14 = sub_638A34((uint64_t)&v6[135 * v9]);
    if (v14 > sub_638A34(v10 + 1080))
    {
LABEL_8:
      v10 += 1080;
      uint64_t v9 = v11;
    }
  }
LABEL_9:
  uint64_t v15 = sub_638A34(v10);
  if (v15 == sub_638A34(a4))
  {
    uint64_t v16 = sub_638A2C(v10);
    __n128 result = (void *)sub_638A2C(a4);
    if (v16 > (uint64_t)result) {
      return result;
    }
  }
  else
  {
    uint64_t v17 = sub_638A34(v10);
    __n128 result = (void *)sub_638A34(a4);
    if (v17 > (uint64_t)result) {
      return result;
    }
  }
  sub_7574DC((uint64_t)v27, a4);
  sub_874FD8(a4, v10);
  if (v7 >= v9)
  {
    while (1)
    {
      uint64_t v19 = 2 * v9;
      uint64_t v9 = (2 * v9) | 1;
      uint64_t v18 = (uint64_t)&v6[135 * v9];
      uint64_t v20 = v19 + 2;
      if (v19 + 2 < a3)
      {
        uint64_t v21 = sub_638A34((uint64_t)&v6[135 * v9]);
        if (v21 == sub_638A34(v18 + 1080))
        {
          uint64_t v22 = sub_638A2C((uint64_t)&v6[135 * v9]);
          uint64_t v23 = sub_638A2C(v18 + 1080);
        }
        else
        {
          uint64_t v22 = sub_638A34((uint64_t)&v6[135 * v9]);
          uint64_t v23 = sub_638A34(v18 + 1080);
        }
        if (v22 > v23)
        {
          v18 += 1080;
          uint64_t v9 = v20;
        }
      }
      uint64_t v24 = sub_638A34(v18);
      if (v24 == sub_638A34((uint64_t)v27))
      {
        uint64_t v25 = sub_638A2C(v18);
        uint64_t v26 = sub_638A2C((uint64_t)v27);
      }
      else
      {
        uint64_t v25 = sub_638A34(v18);
        uint64_t v26 = sub_638A34((uint64_t)v27);
      }
      if (v25 > v26) {
        break;
      }
      sub_874FD8(v10, v18);
      uint64_t v10 = v18;
      if (v7 < v9) {
        goto LABEL_26;
      }
    }
  }
  uint64_t v18 = v10;
LABEL_26:
  sub_874FD8(v18, (uint64_t)v27);
  return sub_52F1E8((uint64_t)v27);
}

void sub_88466C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_884680(void *result, uint64_t a2, uint64_t a3)
{
  if (a2 - (uint64_t)result >= 1081)
  {
    unint64_t v4 = result;
    int64_t v5 = (a2 - (uint64_t)result) / 0x438uLL;
    uint64_t v6 = a2 - 1080;
    do
    {
      sub_7574DC((uint64_t)v10, (uint64_t)v4);
      uint64_t v8 = sub_877D9C((uint64_t)v4, a3, v5);
      uint64_t v9 = v8;
      if (v6 == v8)
      {
        sub_874FD8(v8, (uint64_t)v10);
      }
      else
      {
        sub_874FD8(v8, v6);
        sub_874FD8(v6, (uint64_t)v10);
        sub_8847CC(v4, v9 + 1080, a3, 0x1A8C536FE1A8C537 * ((v9 + 1080 - (uint64_t)v4) >> 3));
      }
      __n128 result = sub_52F1E8((uint64_t)v10);
      v6 -= 1080;
    }
    while (v5-- > 2);
  }
  return result;
}

void sub_8847B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_8847CC(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    int64_t v5 = result;
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = (uint64_t)&result[135 * (v4 >> 1)];
    uint64_t v8 = a2 - 1080;
    uint64_t v9 = sub_638A34(v7);
    if (v9 == sub_638A34(v8))
    {
      uint64_t v10 = sub_638A2C(v7);
      __n128 result = (void *)sub_638A2C(v8);
      if (v10 <= (uint64_t)result) {
        return result;
      }
    }
    else
    {
      uint64_t v11 = sub_638A34(v7);
      __n128 result = (void *)sub_638A34(v8);
      if (v11 <= (uint64_t)result) {
        return result;
      }
    }
    sub_7574DC((uint64_t)v17, v8);
    sub_874FD8(v8, v7);
    if (v4 >= 2)
    {
      while (1)
      {
        unint64_t v13 = v6 - 1;
        unint64_t v6 = (v6 - 1) >> 1;
        uint64_t v12 = (uint64_t)&v5[135 * v6];
        uint64_t v14 = sub_638A34(v12);
        if (v14 == sub_638A34((uint64_t)v17))
        {
          uint64_t v15 = sub_638A2C((uint64_t)&v5[135 * v6]);
          uint64_t v16 = sub_638A2C((uint64_t)v17);
        }
        else
        {
          uint64_t v15 = sub_638A34((uint64_t)&v5[135 * v6]);
          uint64_t v16 = sub_638A34((uint64_t)v17);
        }
        if (v15 <= v16) {
          break;
        }
        sub_874FD8(v7, (uint64_t)&v5[135 * v6]);
        uint64_t v7 = (uint64_t)&v5[135 * v6];
        if (v13 <= 1) {
          goto LABEL_13;
        }
      }
    }
    uint64_t v12 = v7;
LABEL_13:
    sub_874FD8(v12, (uint64_t)v17);
    return sub_52F1E8((uint64_t)v17);
  }
  return result;
}

void sub_88495C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_884970(int *a1, int *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      uint64_t v8 = sub_638A2C((uint64_t)(a2 - 102));
      if (v8 == sub_638A2C((uint64_t)a1))
      {
        uint64_t v9 = sub_638A34((uint64_t)(a2 - 102));
        if (v9 <= sub_638A34((uint64_t)a1)) {
          return;
        }
      }
      else
      {
        uint64_t v17 = sub_638A2C((uint64_t)(a2 - 102));
        if (v17 <= sub_638A2C((uint64_t)a1)) {
          return;
        }
      }
      sub_87A1D4((uint64_t)a1, (uint64_t)(a2 - 102));
    }
    else if ((uint64_t)a4 <= 0)
    {
      sub_884C00(a1, a2);
    }
    else
    {
      unint64_t v13 = (void *)a5;
      uint64_t v14 = a4 >> 1;
      uint64_t v15 = (uint64_t)&a1[102 * (a4 >> 1)];
      if ((uint64_t)a4 <= a6)
      {
        sub_885214((uint64_t)a1, &a1[102 * (a4 >> 1)], a3, a4 >> 1, a5);
        unint64_t v18 = a4 - v14;
        uint64_t v19 = &v13[51 * v14];
        sub_885214((uint64_t)&a1[102 * (a4 >> 1)], a2, a3, v18, (uint64_t)v19);
        sub_87990C((uint64_t)v13, v19, (uint64_t)v19, (uint64_t)&v13[51 * a4], (uint64_t)a1);
        if (v13)
        {
          unint64_t v20 = 0;
          do
          {
            uint64_t v21 = (void *)v13[45];
            if (v21)
            {
              v13[46] = v21;
              operator delete(v21);
            }
            sub_4F32CC(v13);
            ++v20;
            v13 += 51;
          }
          while (v20 < a4);
        }
      }
      else
      {
        sub_884970(a1, &a1[102 * (a4 >> 1)], a3, a4 >> 1, a5, a6);
        uint64_t v16 = a4 - v14;
        sub_884970(v15, a2, a3, v16, v13, a6);
        sub_885B18((uint64_t)a1, v15, (uint64_t)a2, a3, v14, v16, v13, a6);
      }
    }
  }
}

void sub_884BEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_879BD8((void **)va);
  _Unwind_Resume(a1);
}

void sub_884C00(int *a1, int *a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = (uint64_t)(a1 + 102);
    if (a1 + 102 != a2)
    {
      uint64_t v4 = 0;
      int64_t v5 = a1;
      while (1)
      {
        uint64_t v6 = (uint64_t)v5;
        int64_t v5 = (int *)v3;
        uint64_t v7 = sub_638A2C(v3);
        if (v7 == sub_638A2C(v6))
        {
          uint64_t v8 = sub_638A34((uint64_t)v5);
          uint64_t v9 = sub_638A34(v6);
        }
        else
        {
          uint64_t v8 = sub_638A2C((uint64_t)v5);
          uint64_t v9 = sub_638A2C(v6);
        }
        if (v8 > v9) {
          break;
        }
LABEL_5:
        uint64_t v3 = (uint64_t)(v5 + 102);
        v4 += 408;
        if (v5 + 102 == a2) {
          return;
        }
      }
      int v45 = *v5;
      *(_OWORD *)__p = *(_OWORD *)(v6 + 416);
      uint64_t v47 = *(void *)(v6 + 432);
      *(void *)(v6 + 416) = 0;
      *(void *)(v6 + 424) = 0;
      *(void *)(v6 + 432) = 0;
      long long v10 = *(_OWORD *)(v6 + 456);
      long long v48 = *(_OWORD *)(v6 + 440);
      long long v49 = v10;
      long long v11 = *(_OWORD *)(v6 + 488);
      long long v50 = *(_OWORD *)(v6 + 472);
      uint64_t v53 = *(void *)(v6 + 520);
      long long v12 = *(_OWORD *)(v6 + 504);
      long long v51 = v11;
      long long v52 = v12;
      *(_OWORD *)uint64_t v54 = *(_OWORD *)(v6 + 528);
      uint64_t v55 = *(void *)(v6 + 544);
      *(void *)(v6 + 544) = 0;
      *(void *)(v6 + 536) = 0;
      *(void *)(v6 + 528) = 0;
      *(_OWORD *)uint64_t v56 = *(_OWORD *)(v6 + 552);
      uint64_t v57 = *(void *)(v6 + 568);
      *(void *)(v6 + 560) = 0;
      *(void *)(v6 + 568) = 0;
      *(void *)(v6 + 552) = 0;
      long long v58 = *(_OWORD *)(v6 + 576);
      unsigned int v60 = *(_DWORD *)(v6 + 600);
      if (v60 <= 1) {
        uint64_t v59 = *(void *)(v6 + 592);
      }
      long long v13 = *(_OWORD *)(v6 + 624);
      long long v61 = *(_OWORD *)(v6 + 608);
      long long v14 = *(_OWORD *)(v6 + 640);
      long long v62 = v13;
      long long v63 = v14;
      uint64_t v64 = *(void *)(v6 + 656);
      long long v65 = *(_OWORD *)(v6 + 664);
      uint64_t v66 = *(void *)(v6 + 680);
      *(void *)(v6 + 664) = 0;
      *(void *)(v6 + 672) = 0;
      *(void *)(v6 + 680) = 0;
      char v67 = *(unsigned char *)(v6 + 688);
      long long v68 = *(_OWORD *)(v6 + 696);
      uint64_t v69 = *(void *)(v6 + 712);
      *(void *)(v6 + 696) = 0;
      *(void *)(v6 + 704) = 0;
      *(void *)(v6 + 712) = 0;
      *(_OWORD *)v70 = *(_OWORD *)(v6 + 720);
      *(_OWORD *)&v70[9] = *(_OWORD *)(v6 + 729);
      long long v71 = *(_OWORD *)(v6 + 748);
      int v72 = *(_DWORD *)(v6 + 764);
      long long v73 = *(_OWORD *)(v6 + 768);
      uint64_t v74 = *(void *)(v6 + 784);
      *(void *)(v6 + 776) = 0;
      *(void *)(v6 + 768) = 0;
      *(void *)(v6 + 784) = 0;
      long long v15 = *(_OWORD *)(v6 + 792);
      int v76 = *(_DWORD *)(v6 + 808);
      uint64_t v16 = v4;
      long long v75 = v15;
      while (1)
      {
        uint64_t v17 = (char *)a1 + v16;
        sub_52ECD8((uint64_t)a1 + v16 + 408, (uint64_t)a1 + v16);
        *(_OWORD *)(v17 + 748) = *(_OWORD *)(v17 + 340);
        *((_DWORD *)v17 + 191) = *((_DWORD *)v17 + 89);
        unint64_t v18 = (void **)((char *)a1 + v16 + 768);
        uint64_t v19 = *v18;
        if (*v18)
        {
          *((void *)v17 + 97) = v19;
          operator delete(v19);
          void *v18 = 0;
          *((void *)v17 + 97) = 0;
          *((void *)v17 + 98) = 0;
        }
        void *v18 = (void *)*((void *)v17 + 45);
        uint64_t v20 = *((void *)v17 + 47);
        *((void *)v17 + 97) = *((void *)v17 + 46);
        *((void *)v17 + 98) = v20;
        *((void *)v17 + 45) = 0;
        *((void *)v17 + 46) = 0;
        *((void *)v17 + 47) = 0;
        *(_OWORD *)(v17 + 792) = *((_OWORD *)v17 + 24);
        *((_DWORD *)v17 + 202) = *((_DWORD *)v17 + 100);
        if (!v16)
        {
          uint64_t v24 = (uint64_t)a1;
          goto LABEL_23;
        }
        uint64_t v21 = sub_638A2C((uint64_t)&v45);
        if (v21 == sub_638A2C((uint64_t)a1 + v16 - 408))
        {
          uint64_t v22 = sub_638A34((uint64_t)&v45);
          uint64_t v23 = sub_638A34((uint64_t)a1 + v16 - 408);
        }
        else
        {
          uint64_t v22 = sub_638A2C((uint64_t)&v45);
          uint64_t v23 = sub_638A2C((uint64_t)a1 + v16 - 408);
        }
        if (v22 <= v23) {
          break;
        }
        v16 -= 408;
      }
      uint64_t v24 = (uint64_t)a1 + v16;
LABEL_23:
      sub_52ECD8(v24, (uint64_t)&v45);
      uint64_t v25 = (char *)a1 + v16;
      int v26 = v72;
      *(_OWORD *)((char *)a1 + v16 + 340) = v71;
      *(int *)((char *)a1 + v16 + 356) = v26;
      uint64_t v27 = (void **)((char *)a1 + v16 + 360);
      uint64_t v28 = *v27;
      if (*v27)
      {
        *(void *)(v24 + 368) = v28;
        operator delete(v28);
        *uint64_t v27 = 0;
        *(void *)((char *)a1 + v16 + 368) = 0;
        *(void *)((char *)a1 + v16 + 376) = 0;
      }
      *uint64_t v27 = (void *)v73;
      *(void *)(v24 + 368) = *((void *)&v73 + 1);
      *(void *)(v24 + 376) = v74;
      long long v73 = 0uLL;
      uint64_t v74 = 0;
      long long v29 = v75;
      *((_DWORD *)v25 + 100) = v76;
      *((_OWORD *)v25 + 24) = v29;
      if ((void)v68)
      {
        *((void *)&v68 + 1) = v68;
        operator delete((void *)v68);
      }
      long long v30 = (void **)v65;
      if (!(void)v65)
      {
LABEL_62:
        if (v56[0])
        {
          v56[1] = v56[0];
          operator delete(v56[0]);
        }
        if (v54[0])
        {
          v54[1] = v54[0];
          operator delete(v54[0]);
        }
        uint64_t v41 = __p[0];
        if (__p[0])
        {
          uint64_t v42 = __p[1];
          uint64_t v43 = __p[0];
          if (__p[1] != __p[0])
          {
            do
              uint64_t v42 = (void *)sub_4D4B58((uint64_t)v42 - 160);
            while (v42 != v41);
            uint64_t v43 = __p[0];
          }
          __p[1] = v41;
          operator delete(v43);
        }
        goto LABEL_5;
      }
      uint64_t v31 = *((void *)&v65 + 1);
      long long v32 = (void *)v65;
      if (*((void *)&v65 + 1) == (void)v65)
      {
LABEL_61:
        *((void *)&v65 + 1) = v30;
        operator delete(v32);
        goto LABEL_62;
      }
      while (1)
      {
        long long v34 = *(std::__shared_weak_count **)(v31 - 16);
        if (!v34 || atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          uint64_t v35 = *(void ***)(v31 - 64);
          if (v35) {
            goto LABEL_47;
          }
          goto LABEL_36;
        }
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
        uint64_t v35 = *(void ***)(v31 - 64);
        if (v35) {
          break;
        }
LABEL_36:
        uint64_t v36 = *(void **)(v31 - 80);
        *(void *)(v31 - 80) = 0;
        if (v36) {
          operator delete(v36);
        }
        uint64_t v37 = (void **)(v31 - 104);
        uint64_t v38 = *(void *)(v31 - 104);
        if (v38)
        {
          uint64_t v39 = *(void *)(v31 - 96);
          long long v33 = *(void **)(v31 - 104);
          if (v39 != v38)
          {
            do
            {
              if (*(char *)(v39 - 1) < 0) {
                operator delete(*(void **)(v39 - 24));
              }
              v39 -= 24;
            }
            while (v39 != v38);
            long long v33 = *v37;
          }
          *(void *)(v31 - 96) = v38;
          operator delete(v33);
        }
        v31 -= 104;
        if (v37 == v30)
        {
          long long v32 = (void *)v65;
          goto LABEL_61;
        }
      }
      while (1)
      {
LABEL_47:
        long long v40 = (void **)*v35;
        if (*((char *)v35 + 191) < 0)
        {
          operator delete(v35[21]);
          if ((*((char *)v35 + 159) & 0x80000000) == 0)
          {
LABEL_49:
            if ((*((char *)v35 + 135) & 0x80000000) == 0) {
              goto LABEL_50;
            }
            goto LABEL_56;
          }
        }
        else if ((*((char *)v35 + 159) & 0x80000000) == 0)
        {
          goto LABEL_49;
        }
        operator delete(v35[17]);
        if ((*((char *)v35 + 135) & 0x80000000) == 0)
        {
LABEL_50:
          if ((*((char *)v35 + 95) & 0x80000000) == 0) {
            goto LABEL_51;
          }
          goto LABEL_57;
        }
LABEL_56:
        operator delete(v35[14]);
        if ((*((char *)v35 + 95) & 0x80000000) == 0)
        {
LABEL_51:
          if ((*((char *)v35 + 63) & 0x80000000) == 0) {
            goto LABEL_52;
          }
          goto LABEL_58;
        }
LABEL_57:
        operator delete(v35[9]);
        if ((*((char *)v35 + 63) & 0x80000000) == 0)
        {
LABEL_52:
          if (*((char *)v35 + 39) < 0) {
            goto LABEL_59;
          }
          goto LABEL_46;
        }
LABEL_58:
        operator delete(v35[5]);
        if (*((char *)v35 + 39) < 0) {
LABEL_59:
        }
          operator delete(v35[2]);
LABEL_46:
        operator delete(v35);
        uint64_t v35 = v40;
        if (!v40) {
          goto LABEL_36;
        }
      }
    }
  }
}

void sub_885200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_639B78((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_885214(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if (a4)
  {
    if (a4 == 2)
    {
      unint64_t v18 = a2 - 51;
      uint64_t v19 = sub_638A2C((uint64_t)(a2 - 51));
      uint64_t v20 = (void *)(a5 + 664);
      uint64_t v21 = (void *)(a5 + 360);
      if (v19 == sub_638A2C(a1))
      {
        uint64_t v22 = sub_638A34((uint64_t)(a2 - 51));
        uint64_t v23 = sub_638A34(a1);
      }
      else
      {
        uint64_t v22 = sub_638A2C((uint64_t)(a2 - 51));
        uint64_t v23 = sub_638A2C(a1);
      }
      if (v22 <= v23)
      {
        *(_DWORD *)a5 = *(_DWORD *)a1;
        *(void *)(a5 + 16) = 0;
        *(void *)(a5 + 24) = 0;
        *(void *)(a5 + 8) = 0;
        *(_OWORD *)(a5 + 8) = *(_OWORD *)(a1 + 8);
        *(void *)(a5 + 24) = *(void *)(a1 + 24);
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
        long long v47 = *(_OWORD *)(a1 + 32);
        long long v48 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)(a5 + 48) = *(_OWORD *)(a1 + 48);
        *(_OWORD *)(a5 + 64) = v48;
        *(_OWORD *)(a5 + 32) = v47;
        long long v49 = *(_OWORD *)(a1 + 96);
        uint64_t v50 = *(void *)(a1 + 112);
        *(_OWORD *)(a5 + 80) = *(_OWORD *)(a1 + 80);
        *(_OWORD *)(a5 + 96) = v49;
        *(void *)(a5 + 112) = v50;
        *(void *)(a5 + 120) = 0;
        *(void *)(a5 + 128) = 0;
        *(void *)(a5 + 136) = 0;
        *(_OWORD *)(a5 + 120) = *(_OWORD *)(a1 + 120);
        *(void *)(a5 + 136) = *(void *)(a1 + 136);
        *(void *)(a1 + 120) = 0;
        *(void *)(a1 + 128) = 0;
        *(void *)(a1 + 136) = 0;
        *(void *)(a5 + 144) = 0;
        *(void *)(a5 + 152) = 0;
        *(void *)(a5 + 160) = 0;
        *(_OWORD *)(a5 + 144) = *(_OWORD *)(a1 + 144);
        *(void *)(a5 + 160) = *(void *)(a1 + 160);
        *(void *)(a1 + 144) = 0;
        *(void *)(a1 + 152) = 0;
        *(void *)(a1 + 160) = 0;
        *(_OWORD *)(a5 + 168) = *(_OWORD *)(a1 + 168);
        *(_DWORD *)(a5 + 192) = *(_DWORD *)(a1 + 192);
        if (*(_DWORD *)(a1 + 192) <= 1u) {
          *(void *)(a5 + 184) = *(void *)(a1 + 184);
        }
        *(_OWORD *)(a5 + 200) = *(_OWORD *)(a1 + 200);
        long long v51 = *(_OWORD *)(a1 + 216);
        uint64_t v52 = *(void *)(a1 + 248);
        *(_OWORD *)(a5 + 232) = *(_OWORD *)(a1 + 232);
        *(_OWORD *)(a5 + 216) = v51;
        *(void *)(a5 + 248) = v52;
        *(void *)(a5 + 256) = 0;
        *(void *)(a5 + 264) = 0;
        *(void *)(a5 + 272) = 0;
        *(_OWORD *)(a5 + 256) = *(_OWORD *)(a1 + 256);
        *(void *)(a5 + 272) = *(void *)(a1 + 272);
        *(void *)(a1 + 264) = 0;
        *(void *)(a1 + 272) = 0;
        *(void *)(a1 + 256) = 0;
        *(unsigned char *)(a5 + 280) = *(unsigned char *)(a1 + 280);
        *(void *)(a5 + 296) = 0;
        *(void *)(a5 + 304) = 0;
        *(void *)(a5 + 288) = 0;
        *(_OWORD *)(a5 + 288) = *(_OWORD *)(a1 + 288);
        *(void *)(a5 + 304) = *(void *)(a1 + 304);
        *(void *)(a1 + 288) = 0;
        *(void *)(a1 + 296) = 0;
        *(void *)(a1 + 304) = 0;
        long long v53 = *(_OWORD *)(a1 + 312);
        *(_OWORD *)(a5 + 321) = *(_OWORD *)(a1 + 321);
        *(_OWORD *)(a5 + 312) = v53;
        long long v54 = *(_OWORD *)(a1 + 340);
        *(_DWORD *)(a5 + 356) = *(_DWORD *)(a1 + 356);
        *(_OWORD *)(a5 + 340) = v54;
        *(void *)(a5 + 368) = 0;
        *(void *)(a5 + 376) = 0;
        *(void *)(a5 + 360) = 0;
        *(void *)(a5 + 360) = *(void *)(a1 + 360);
        *(void *)(a5 + 368) = *(void *)(a1 + 368);
        *(void *)(a5 + 376) = *(void *)(a1 + 376);
        *(void *)(a1 + 360) = 0;
        *(void *)(a1 + 368) = 0;
        *(void *)(a1 + 376) = 0;
        long long v55 = *(_OWORD *)(a1 + 384);
        *(_DWORD *)(a5 + 400) = *(_DWORD *)(a1 + 400);
        *(_OWORD *)(a5 + 384) = v55;
        *(_DWORD *)(a5 + 408) = *v18;
        *(void *)(a5 + 424) = 0;
        *(void *)(a5 + 432) = 0;
        *(void *)(a5 + 416) = 0;
        *(_OWORD *)(a5 + 416) = *((_OWORD *)a2 - 25);
        *(void *)(a5 + 432) = *(a2 - 48);
        *(a2 - 50) = 0;
        *(a2 - 49) = 0;
        *(a2 - 48) = 0;
        long long v56 = *(_OWORD *)(a2 - 47);
        long long v57 = *(_OWORD *)(a2 - 43);
        *(_OWORD *)(a5 + 456) = *(_OWORD *)(a2 - 45);
        *(_OWORD *)(a5 + 472) = v57;
        *(_OWORD *)(a5 + 440) = v56;
        long long v58 = *(_OWORD *)(a2 - 41);
        long long v59 = *(_OWORD *)(a2 - 39);
        *(void *)(a5 + 520) = *(a2 - 37);
        *(_OWORD *)(a5 + 488) = v58;
        *(_OWORD *)(a5 + 504) = v59;
        *(void *)(a5 + 528) = 0;
        *(void *)(a5 + 544) = 0;
        *(void *)(a5 + 536) = 0;
        *(_OWORD *)(a5 + 528) = *((_OWORD *)a2 - 18);
        *(void *)(a5 + 544) = *(a2 - 34);
        *(a2 - 36) = 0;
        *(a2 - 35) = 0;
        *(a2 - 34) = 0;
        *(void *)(a5 + 552) = 0;
        *(void *)(a5 + 560) = 0;
        *(void *)(a5 + 568) = 0;
        *(_OWORD *)(a5 + 552) = *(_OWORD *)(a2 - 33);
        *(void *)(a5 + 568) = *(a2 - 31);
        *(a2 - 33) = 0;
        *(a2 - 32) = 0;
        *(a2 - 31) = 0;
        *(_OWORD *)(a5 + 576) = *((_OWORD *)a2 - 15);
        *(_DWORD *)(a5 + 600) = *((_DWORD *)a2 - 54);
        if (*((_DWORD *)a2 - 54) <= 1u) {
          *(void *)(a5 + 592) = *(a2 - 28);
        }
        *(_OWORD *)(a5 + 608) = *((_OWORD *)a2 - 13);
        long long v60 = *((_OWORD *)a2 - 12);
        long long v61 = *((_OWORD *)a2 - 11);
        *(void *)(a5 + 656) = *(a2 - 20);
        *(_OWORD *)(a5 + 624) = v60;
        *(_OWORD *)(a5 + 640) = v61;
        *(void *)(a5 + 672) = 0;
        *(void *)(a5 + 680) = 0;
        void *v20 = 0;
        *(_OWORD *)uint64_t v20 = *(_OWORD *)(a2 - 19);
        *(void *)(a5 + 680) = *(a2 - 17);
        *(a2 - 18) = 0;
        *(a2 - 17) = 0;
        *(a2 - 19) = 0;
        *(unsigned char *)(a5 + 688) = *((unsigned char *)a2 - 128);
        *(void *)(a5 + 704) = 0;
        *(void *)(a5 + 712) = 0;
        *(void *)(a5 + 696) = 0;
        *(_OWORD *)(a5 + 696) = *(_OWORD *)(a2 - 15);
        *(void *)(a5 + 712) = *(a2 - 13);
        *(a2 - 15) = 0;
        *(a2 - 14) = 0;
        *(a2 - 13) = 0;
        long long v62 = *((_OWORD *)a2 - 6);
        *(_OWORD *)(a5 + 729) = *(_OWORD *)((char *)a2 - 87);
        *(_OWORD *)(a5 + 720) = v62;
        long long v63 = *(_OWORD *)((char *)a2 - 68);
        *(_DWORD *)(a5 + 764) = *((_DWORD *)a2 - 13);
        *(_OWORD *)(a5 + 748) = v63;
        *(void *)(a5 + 768) = 0;
        *(void *)(a5 + 784) = 0;
        *(void *)(a5 + 776) = 0;
        *(_OWORD *)(a5 + 768) = *((_OWORD *)a2 - 3);
        *(void *)(a5 + 784) = *(a2 - 4);
        *(a2 - 6) = 0;
        *(a2 - 5) = 0;
        *(a2 - 4) = 0;
        long long v44 = (_OWORD *)(a5 + 792);
        long long v45 = *(_OWORD *)(a2 - 3);
        int v46 = *((_DWORD *)a2 - 2);
      }
      else
      {
        *(_DWORD *)a5 = *v18;
        *(void *)(a5 + 16) = 0;
        *(void *)(a5 + 24) = 0;
        *(void *)(a5 + 8) = 0;
        *(_OWORD *)(a5 + 8) = *((_OWORD *)a2 - 25);
        *(void *)(a5 + 24) = *(a2 - 48);
        *(a2 - 50) = 0;
        *(a2 - 49) = 0;
        *(a2 - 48) = 0;
        long long v27 = *(_OWORD *)(a2 - 47);
        long long v28 = *(_OWORD *)(a2 - 43);
        *(_OWORD *)(a5 + 48) = *(_OWORD *)(a2 - 45);
        *(_OWORD *)(a5 + 64) = v28;
        *(_OWORD *)(a5 + 32) = v27;
        long long v29 = *(_OWORD *)(a2 - 39);
        uint64_t v30 = *(a2 - 37);
        *(_OWORD *)(a5 + 80) = *(_OWORD *)(a2 - 41);
        *(_OWORD *)(a5 + 96) = v29;
        *(void *)(a5 + 112) = v30;
        *(void *)(a5 + 120) = 0;
        *(void *)(a5 + 128) = 0;
        *(void *)(a5 + 136) = 0;
        *(_OWORD *)(a5 + 120) = *((_OWORD *)a2 - 18);
        *(void *)(a5 + 136) = *(a2 - 34);
        *(a2 - 36) = 0;
        *(a2 - 35) = 0;
        *(a2 - 34) = 0;
        *(void *)(a5 + 144) = 0;
        *(void *)(a5 + 152) = 0;
        *(void *)(a5 + 160) = 0;
        *(_OWORD *)(a5 + 144) = *(_OWORD *)(a2 - 33);
        *(void *)(a5 + 160) = *(a2 - 31);
        *(a2 - 33) = 0;
        *(a2 - 32) = 0;
        *(a2 - 31) = 0;
        *(_OWORD *)(a5 + 168) = *((_OWORD *)a2 - 15);
        *(_DWORD *)(a5 + 192) = *((_DWORD *)a2 - 54);
        if (*((_DWORD *)a2 - 54) <= 1u) {
          *(void *)(a5 + 184) = *(a2 - 28);
        }
        *(_OWORD *)(a5 + 200) = *((_OWORD *)a2 - 13);
        long long v31 = *((_OWORD *)a2 - 12);
        uint64_t v32 = *(a2 - 20);
        *(_OWORD *)(a5 + 232) = *((_OWORD *)a2 - 11);
        *(_OWORD *)(a5 + 216) = v31;
        *(void *)(a5 + 248) = v32;
        *(void *)(a5 + 256) = 0;
        *(void *)(a5 + 264) = 0;
        *(void *)(a5 + 272) = 0;
        *(_OWORD *)(a5 + 256) = *(_OWORD *)(a2 - 19);
        *(void *)(a5 + 272) = *(a2 - 17);
        *(a2 - 18) = 0;
        *(a2 - 17) = 0;
        *(a2 - 19) = 0;
        *(unsigned char *)(a5 + 280) = *((unsigned char *)a2 - 128);
        *(void *)(a5 + 296) = 0;
        *(void *)(a5 + 304) = 0;
        *(void *)(a5 + 288) = 0;
        *(_OWORD *)(a5 + 288) = *(_OWORD *)(a2 - 15);
        *(void *)(a5 + 304) = *(a2 - 13);
        *(a2 - 15) = 0;
        *(a2 - 14) = 0;
        *(a2 - 13) = 0;
        long long v33 = *((_OWORD *)a2 - 6);
        *(_OWORD *)(a5 + 321) = *(_OWORD *)((char *)a2 - 87);
        *(_OWORD *)(a5 + 312) = v33;
        long long v34 = *(_OWORD *)((char *)a2 - 68);
        *(_DWORD *)(a5 + 356) = *((_DWORD *)a2 - 13);
        *(_OWORD *)(a5 + 340) = v34;
        *(void *)(a5 + 368) = 0;
        *(void *)(a5 + 376) = 0;
        void *v21 = 0;
        *(_OWORD *)uint64_t v21 = *((_OWORD *)a2 - 3);
        *(void *)(a5 + 376) = *(a2 - 4);
        *(a2 - 6) = 0;
        *(a2 - 5) = 0;
        *(a2 - 4) = 0;
        long long v35 = *(_OWORD *)(a2 - 3);
        *(_DWORD *)(a5 + 400) = *((_DWORD *)a2 - 2);
        *(_OWORD *)(a5 + 384) = v35;
        *(_DWORD *)(a5 + 408) = *(_DWORD *)a1;
        *(void *)(a5 + 424) = 0;
        *(void *)(a5 + 432) = 0;
        *(void *)(a5 + 416) = 0;
        *(_OWORD *)(a5 + 416) = *(_OWORD *)(a1 + 8);
        *(void *)(a5 + 432) = *(void *)(a1 + 24);
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
        long long v36 = *(_OWORD *)(a1 + 32);
        long long v37 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)(a5 + 456) = *(_OWORD *)(a1 + 48);
        *(_OWORD *)(a5 + 472) = v37;
        *(_OWORD *)(a5 + 440) = v36;
        long long v38 = *(_OWORD *)(a1 + 80);
        long long v39 = *(_OWORD *)(a1 + 96);
        *(void *)(a5 + 520) = *(void *)(a1 + 112);
        *(_OWORD *)(a5 + 488) = v38;
        *(_OWORD *)(a5 + 504) = v39;
        *(void *)(a5 + 528) = 0;
        *(void *)(a5 + 544) = 0;
        *(void *)(a5 + 536) = 0;
        *(_OWORD *)(a5 + 528) = *(_OWORD *)(a1 + 120);
        *(void *)(a5 + 544) = *(void *)(a1 + 136);
        *(void *)(a1 + 120) = 0;
        *(void *)(a1 + 128) = 0;
        *(void *)(a1 + 136) = 0;
        *(void *)(a5 + 552) = 0;
        *(void *)(a5 + 560) = 0;
        *(void *)(a5 + 568) = 0;
        *(_OWORD *)(a5 + 552) = *(_OWORD *)(a1 + 144);
        *(void *)(a5 + 568) = *(void *)(a1 + 160);
        *(void *)(a1 + 144) = 0;
        *(void *)(a1 + 152) = 0;
        *(void *)(a1 + 160) = 0;
        *(_OWORD *)(a5 + 576) = *(_OWORD *)(a1 + 168);
        *(_DWORD *)(a5 + 600) = *(_DWORD *)(a1 + 192);
        if (*(_DWORD *)(a1 + 192) <= 1u) {
          *(void *)(a5 + 592) = *(void *)(a1 + 184);
        }
        *(_OWORD *)(a5 + 608) = *(_OWORD *)(a1 + 200);
        long long v40 = *(_OWORD *)(a1 + 216);
        long long v41 = *(_OWORD *)(a1 + 232);
        *(void *)(a5 + 656) = *(void *)(a1 + 248);
        *(_OWORD *)(a5 + 624) = v40;
        *(_OWORD *)(a5 + 640) = v41;
        *(void *)(a5 + 672) = 0;
        *(void *)(a5 + 680) = 0;
        void *v20 = 0;
        *(_OWORD *)uint64_t v20 = *(_OWORD *)(a1 + 256);
        *(void *)(a5 + 680) = *(void *)(a1 + 272);
        *(void *)(a1 + 264) = 0;
        *(void *)(a1 + 272) = 0;
        *(void *)(a1 + 256) = 0;
        *(unsigned char *)(a5 + 688) = *(unsigned char *)(a1 + 280);
        *(void *)(a5 + 704) = 0;
        *(void *)(a5 + 712) = 0;
        *(void *)(a5 + 696) = 0;
        *(_OWORD *)(a5 + 696) = *(_OWORD *)(a1 + 288);
        *(void *)(a5 + 712) = *(void *)(a1 + 304);
        *(void *)(a1 + 288) = 0;
        *(void *)(a1 + 296) = 0;
        *(void *)(a1 + 304) = 0;
        long long v42 = *(_OWORD *)(a1 + 312);
        *(_OWORD *)(a5 + 729) = *(_OWORD *)(a1 + 321);
        *(_OWORD *)(a5 + 720) = v42;
        long long v43 = *(_OWORD *)(a1 + 340);
        *(_DWORD *)(a5 + 764) = *(_DWORD *)(a1 + 356);
        *(_OWORD *)(a5 + 748) = v43;
        *(void *)(a5 + 768) = 0;
        *(void *)(a5 + 784) = 0;
        *(void *)(a5 + 776) = 0;
        *(_OWORD *)(a5 + 768) = *(_OWORD *)(a1 + 360);
        *(void *)(a5 + 784) = *(void *)(a1 + 376);
        *(void *)(a1 + 360) = 0;
        *(void *)(a1 + 368) = 0;
        *(void *)(a1 + 376) = 0;
        long long v44 = (_OWORD *)(a5 + 792);
        long long v45 = *(_OWORD *)(a1 + 384);
        int v46 = *(_DWORD *)(a1 + 400);
      }
      *(_DWORD *)(a5 + 808) = v46;
      _OWORD *v44 = v45;
    }
    else if (a4 == 1)
    {
      *(_DWORD *)a5 = *(_DWORD *)a1;
      *(void *)(a5 + 16) = 0;
      *(void *)(a5 + 24) = 0;
      *(void *)(a5 + 8) = 0;
      *(_OWORD *)(a5 + 8) = *(_OWORD *)(a1 + 8);
      *(void *)(a5 + 24) = *(void *)(a1 + 24);
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      long long v9 = *(_OWORD *)(a1 + 32);
      long long v10 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)(a5 + 48) = *(_OWORD *)(a1 + 48);
      *(_OWORD *)(a5 + 64) = v10;
      *(_OWORD *)(a5 + 32) = v9;
      long long v11 = *(_OWORD *)(a1 + 96);
      uint64_t v12 = *(void *)(a1 + 112);
      *(_OWORD *)(a5 + 80) = *(_OWORD *)(a1 + 80);
      *(_OWORD *)(a5 + 96) = v11;
      *(void *)(a5 + 112) = v12;
      *(void *)(a5 + 120) = 0;
      *(void *)(a5 + 128) = 0;
      *(void *)(a5 + 136) = 0;
      *(_OWORD *)(a5 + 120) = *(_OWORD *)(a1 + 120);
      *(void *)(a5 + 136) = *(void *)(a1 + 136);
      *(void *)(a1 + 120) = 0;
      *(void *)(a1 + 128) = 0;
      *(void *)(a1 + 136) = 0;
      *(void *)(a5 + 144) = 0;
      *(void *)(a5 + 152) = 0;
      *(void *)(a5 + 160) = 0;
      *(_OWORD *)(a5 + 144) = *(_OWORD *)(a1 + 144);
      *(void *)(a5 + 160) = *(void *)(a1 + 160);
      *(void *)(a1 + 144) = 0;
      *(void *)(a1 + 152) = 0;
      *(void *)(a1 + 160) = 0;
      *(_OWORD *)(a5 + 168) = *(_OWORD *)(a1 + 168);
      *(_DWORD *)(a5 + 192) = *(_DWORD *)(a1 + 192);
      if (*(_DWORD *)(a1 + 192) <= 1u) {
        *(void *)(a5 + 184) = *(void *)(a1 + 184);
      }
      *(_OWORD *)(a5 + 200) = *(_OWORD *)(a1 + 200);
      long long v13 = *(_OWORD *)(a1 + 216);
      uint64_t v14 = *(void *)(a1 + 248);
      *(_OWORD *)(a5 + 232) = *(_OWORD *)(a1 + 232);
      *(_OWORD *)(a5 + 216) = v13;
      *(void *)(a5 + 248) = v14;
      *(void *)(a5 + 256) = 0;
      *(void *)(a5 + 264) = 0;
      *(void *)(a5 + 272) = 0;
      *(_OWORD *)(a5 + 256) = *(_OWORD *)(a1 + 256);
      *(void *)(a5 + 272) = *(void *)(a1 + 272);
      *(void *)(a1 + 264) = 0;
      *(void *)(a1 + 272) = 0;
      *(void *)(a1 + 256) = 0;
      *(unsigned char *)(a5 + 280) = *(unsigned char *)(a1 + 280);
      *(void *)(a5 + 296) = 0;
      *(void *)(a5 + 304) = 0;
      *(void *)(a5 + 288) = 0;
      *(_OWORD *)(a5 + 288) = *(_OWORD *)(a1 + 288);
      *(void *)(a5 + 304) = *(void *)(a1 + 304);
      *(void *)(a1 + 288) = 0;
      *(void *)(a1 + 296) = 0;
      *(void *)(a1 + 304) = 0;
      long long v15 = *(_OWORD *)(a1 + 312);
      *(_OWORD *)(a5 + 321) = *(_OWORD *)(a1 + 321);
      *(_OWORD *)(a5 + 312) = v15;
      long long v16 = *(_OWORD *)(a1 + 340);
      *(_DWORD *)(a5 + 356) = *(_DWORD *)(a1 + 356);
      *(_OWORD *)(a5 + 340) = v16;
      *(void *)(a5 + 368) = 0;
      *(void *)(a5 + 376) = 0;
      *(void *)(a5 + 360) = 0;
      *(void *)(a5 + 360) = *(void *)(a1 + 360);
      *(void *)(a5 + 368) = *(void *)(a1 + 368);
      *(void *)(a5 + 376) = *(void *)(a1 + 376);
      *(void *)(a1 + 360) = 0;
      *(void *)(a1 + 368) = 0;
      *(void *)(a1 + 376) = 0;
      long long v17 = *(_OWORD *)(a1 + 384);
      *(_DWORD *)(a5 + 400) = *(_DWORD *)(a1 + 400);
      *(_OWORD *)(a5 + 384) = v17;
    }
    else if ((uint64_t)a4 > 8)
    {
      unint64_t v25 = a4 >> 1;
      uint64_t v26 = 408 * (a4 >> 1);
      sub_884970(a1, a1 + v26, a3, a4 >> 1, a5, a4 >> 1);
      sub_884970(a1 + v26, a2, a3, a4 - v25, a5 + v26, a4 - v25);
      sub_8867E0(a1, a1 + v26, a1 + v26, a2, a5);
    }
    else
    {
      sub_886098(a1, a2, a5);
    }
  }
}

void sub_885B04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_879BD8((void **)va);
  _Unwind_Resume(a1);
}

void sub_885B18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8)
{
  uint64_t v62 = a6;
  if (a6)
  {
    while (1)
    {
      if (v62 <= a8 || a5 <= a8)
      {
        sub_886F1C(a1, a2, a3, a4, a5, v62, a7);
        return;
      }
      if (!a5) {
        return;
      }
      uint64_t v13 = 0;
      uint64_t v14 = -a5;
      while (1)
      {
        uint64_t v15 = sub_638A2C(a2);
        if (v15 == sub_638A2C(a1 + v13))
        {
          uint64_t v16 = sub_638A34(a2);
          if (v16 > sub_638A34(a1 + v13)) {
            break;
          }
          goto LABEL_10;
        }
        uint64_t v17 = sub_638A2C(a2);
        if (v17 > sub_638A2C(a1 + v13)) {
          break;
        }
LABEL_10:
        v13 += 408;
        if (__CFADD__(v14++, 1)) {
          return;
        }
      }
      uint64_t v19 = -v14;
      uint64_t v20 = a1 + v13;
      uint64_t v57 = a8;
      long long v58 = a7;
      uint64_t v56 = a1 + v13;
      if (-v14 >= v62) {
        break;
      }
      if (v62 >= 0) {
        uint64_t v21 = v62;
      }
      else {
        uint64_t v21 = v62 + 1;
      }
      uint64_t v22 = v21 >> 1;
      uint64_t v23 = a2 + 408 * (v21 >> 1);
      uint64_t v24 = a1 + v13;
      uint64_t v59 = v21 >> 1;
      if (a2 - a1 != v13)
      {
        unint64_t v25 = 0xFAFAFAFAFAFAFAFBLL * ((a2 - a1 - v13) >> 3);
        uint64_t v20 = a1 + v13;
        while (1)
        {
          unint64_t v26 = v25 >> 1;
          uint64_t v27 = sub_638A2C(v23);
          if (v27 == sub_638A2C(v20 + 408 * (v25 >> 1)))
          {
            uint64_t v28 = sub_638A34(v23);
            if (v28 <= sub_638A34(v20 + 408 * (v25 >> 1))) {
              goto LABEL_24;
            }
          }
          else
          {
            uint64_t v29 = sub_638A2C(v23);
            if (v29 <= sub_638A2C(v20 + 408 * (v25 >> 1)))
            {
LABEL_24:
              v20 += 408 * (v25 >> 1) + 408;
              unint64_t v26 = v25 + ~v26;
            }
          }
          unint64_t v25 = v26;
          if (!v26)
          {
            uint64_t v24 = v20;
            a7 = v58;
            uint64_t v22 = v59;
            break;
          }
        }
      }
      unint64_t v31 = 0xFAFAFAFAFAFAFAFBLL * ((v24 - a1 - v13) >> 3);
      uint64_t v32 = v23;
      if (v20 != a2) {
        goto LABEL_34;
      }
LABEL_61:
      a5 = -(uint64_t)(v31 + v14);
      uint64_t v51 = v62 - v22;
      if ((uint64_t)(v31 + v22) >= (uint64_t)(v62 - (v31 + v22) - v14))
      {
        uint64_t v52 = v24;
        a5 = v31;
        sub_885B18(v32, v23, a3, a4, -(uint64_t)(v31 + v14), v62 - v22, a7, v57);
        uint64_t v53 = v52;
        a3 = v32;
        uint64_t v62 = v22;
        a8 = v57;
        a1 = v56;
        a2 = v53;
        if (!v22) {
          return;
        }
      }
      else
      {
        sub_885B18(a1 + v13, v24, v32, a4, v31, v22, a7, v57);
        a1 = v32;
        a8 = v57;
        v62 -= v22;
        a2 = v23;
        if (!v51) {
          return;
        }
      }
    }
    if (v14 != -1)
    {
      if (v14 > 0) {
        uint64_t v19 = 1 - v14;
      }
      uint64_t v54 = v19 >> 1;
      uint64_t v64 = a1 + 408 * (v19 >> 1) + v13;
      if (a2 == a3)
      {
        uint64_t v30 = 0;
LABEL_30:
        uint64_t v59 = v30;
        uint64_t v23 = a2 + 408 * v30;
        uint64_t v22 = 0xFAFAFAFAFAFAFAFBLL * ((408 * v30) >> 3);
        unint64_t v31 = v54;
        uint64_t v24 = a1 + 408 * v54 + v13;
        a7 = v58;
        uint64_t v20 = v64;
        uint64_t v32 = v23;
        if (v64 == a2) {
          goto LABEL_61;
        }
LABEL_34:
        uint64_t v32 = v24;
        if (v59)
        {
          uint64_t v65 = v24;
          unint64_t v55 = v31;
          sub_87A1D4(v20, a2);
          uint64_t v32 = v20 + 408;
          if (v59 == 1)
          {
            uint64_t v33 = a2;
          }
          else
          {
            uint64_t v44 = a2 + 408;
            uint64_t v45 = 408 * v59 - 408;
            uint64_t v33 = a2;
            do
            {
              if (v32 == v33) {
                uint64_t v33 = v44;
              }
              sub_87A1D4(v32, v44);
              v32 += 408;
              v44 += 408;
              v45 -= 408;
            }
            while (v45);
          }
          if (v32 != v33)
          {
            uint64_t v46 = a2 + 408 * v59;
            uint64_t v47 = v32;
            uint64_t v48 = v33;
            while (1)
            {
              sub_87A1D4(v47, v48);
              v48 += 408;
              BOOL v49 = v47 + 408 == v33;
              if (v48 == v46)
              {
                if (v47 + 408 == v33) {
                  break;
                }
                uint64_t v48 = v33 + 408;
                v47 += 816;
                while (1)
                {
                  sub_87A1D4(v47 - 408, v33);
                  BOOL v49 = v47 == v33;
                  if (v48 != v46) {
                    break;
                  }
                  BOOL v50 = v47 == v33;
                  v47 += 408;
                  if (v50) {
                    goto LABEL_60;
                  }
                }
              }
              else
              {
                v47 += 408;
              }
              if (v49) {
                uint64_t v33 = v48;
              }
            }
          }
LABEL_60:
          a7 = v58;
          unint64_t v31 = v55;
          uint64_t v24 = v65;
        }
        goto LABEL_61;
      }
      uint64_t v30 = 0;
      unint64_t v34 = 0xFAFAFAFAFAFAFAFBLL * ((a3 - a2) >> 3);
      uint64_t v63 = a1;
      while (2)
      {
        unint64_t v35 = v34 >> 1;
        uint64_t v36 = v30;
        unint64_t v37 = (v34 >> 1) + v30;
        uint64_t v38 = a2 + 408 * v37;
        uint64_t v39 = sub_638A2C(v38);
        if (v39 == sub_638A2C(v64))
        {
          uint64_t v40 = sub_638A34(v38);
          uint64_t v41 = sub_638A34(v64);
          uint64_t v30 = v36;
          a1 = v63;
          if (v40 > v41)
          {
LABEL_43:
            uint64_t v30 = v37 + 1;
            unint64_t v35 = v34 + ~v35;
          }
        }
        else
        {
          uint64_t v42 = sub_638A2C(v38);
          uint64_t v43 = sub_638A2C(v64);
          uint64_t v30 = v36;
          a1 = v63;
          if (v42 > v43) {
            goto LABEL_43;
          }
        }
        unint64_t v34 = v35;
        if (!v35) {
          goto LABEL_30;
        }
        continue;
      }
    }
    sub_87A1D4(a1 + v13, a2);
  }
}

__n128 sub_886098(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  if ((_DWORD *)a1 != a2)
  {
    uint64_t v4 = a2;
    int64_t v5 = (_DWORD *)a1;
    *(_DWORD *)a3 = *(_DWORD *)a1;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 8) = 0;
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(a1 + 8);
    *(void *)(a3 + 24) = *(void *)(a1 + 24);
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 8) = 0;
    long long v7 = *(_OWORD *)(a1 + 48);
    long long v6 = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(a3 + 32) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a3 + 48) = v7;
    *(_OWORD *)(a3 + 64) = v6;
    long long v8 = *(_OWORD *)(a1 + 96);
    uint64_t v9 = *(void *)(a1 + 112);
    *(_OWORD *)(a3 + 80) = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(a3 + 96) = v8;
    *(void *)(a3 + 128) = 0;
    *(void *)(a3 + 136) = 0;
    *(void *)(a3 + 112) = v9;
    *(void *)(a3 + 120) = 0;
    *(_OWORD *)(a3 + 120) = *(_OWORD *)(a1 + 120);
    *(void *)(a3 + 136) = *(void *)(a1 + 136);
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
    *(void *)(a3 + 152) = 0;
    *(void *)(a3 + 160) = 0;
    *(void *)(a3 + 144) = 0;
    *(_OWORD *)(a3 + 144) = *(_OWORD *)(a1 + 144);
    *(void *)(a3 + 160) = *(void *)(a1 + 160);
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = 0;
    *(_OWORD *)(a3 + 168) = *(_OWORD *)(a1 + 168);
    *(_DWORD *)(a3 + 192) = *(_DWORD *)(a1 + 192);
    if (*(_DWORD *)(a1 + 192) <= 1u) {
      *(void *)(a3 + 184) = *(void *)(a1 + 184);
    }
    *(_OWORD *)(a3 + 200) = *(_OWORD *)(a1 + 200);
    long long v10 = *(_OWORD *)(a1 + 216);
    uint64_t v11 = *(void *)(a1 + 248);
    *(_OWORD *)(a3 + 232) = *(_OWORD *)(a1 + 232);
    *(_OWORD *)(a3 + 216) = v10;
    *(void *)(a3 + 248) = v11;
    *(void *)(a3 + 256) = 0;
    *(void *)(a3 + 264) = 0;
    *(void *)(a3 + 272) = 0;
    *(_OWORD *)(a3 + 256) = *(_OWORD *)(a1 + 256);
    *(void *)(a3 + 272) = *(void *)(a1 + 272);
    *(void *)(a1 + 264) = 0;
    *(void *)(a1 + 272) = 0;
    *(void *)(a1 + 256) = 0;
    *(unsigned char *)(a3 + 280) = *(unsigned char *)(a1 + 280);
    *(void *)(a3 + 296) = 0;
    *(void *)(a3 + 304) = 0;
    *(void *)(a3 + 288) = 0;
    *(_OWORD *)(a3 + 288) = *(_OWORD *)(a1 + 288);
    *(void *)(a3 + 304) = *(void *)(a1 + 304);
    *(void *)(a1 + 288) = 0;
    *(void *)(a1 + 296) = 0;
    *(void *)(a1 + 304) = 0;
    long long v12 = *(_OWORD *)(a1 + 312);
    *(_OWORD *)(a3 + 321) = *(_OWORD *)(a1 + 321);
    *(_OWORD *)(a3 + 312) = v12;
    long long v13 = *(_OWORD *)(a1 + 340);
    *(_DWORD *)(a3 + 356) = *(_DWORD *)(a1 + 356);
    *(_OWORD *)(a3 + 340) = v13;
    *(void *)(a3 + 368) = 0;
    *(void *)(a3 + 376) = 0;
    *(void *)(a3 + 360) = 0;
    *(void *)(a3 + 360) = *(void *)(a1 + 360);
    *(void *)(a3 + 368) = *(void *)(a1 + 368);
    *(void *)(a3 + 376) = *(void *)(a1 + 376);
    *(void *)(a1 + 360) = 0;
    *(void *)(a1 + 368) = 0;
    *(void *)(a1 + 376) = 0;
    __n128 result = *(__n128 *)(a1 + 384);
    *(_DWORD *)(a3 + 400) = *(_DWORD *)(a1 + 400);
    *(__n128 *)(a3 + 384) = result;
    uint64_t v51 = 1;
    uint64_t v15 = a1 + 408;
    if ((_DWORD *)(a1 + 408) != a2)
    {
      uint64_t v16 = 0;
      uint64_t v17 = a3;
      do
      {
        while (1)
        {
          unint64_t v18 = (_DWORD *)v15;
          uint64_t v19 = sub_638A2C(v15);
          if (v19 == sub_638A2C(v17))
          {
            uint64_t v20 = sub_638A34((uint64_t)v18);
            uint64_t v21 = sub_638A34(v17);
          }
          else
          {
            uint64_t v20 = sub_638A2C((uint64_t)v18);
            uint64_t v21 = sub_638A2C(v17);
          }
          if (v20 > v21) {
            break;
          }
          *(_DWORD *)(v17 + 408) = *v18;
          *(void *)(v17 + 424) = 0;
          *(void *)(v17 + 432) = 0;
          *(void *)(v17 + 416) = 0;
          *(_OWORD *)(v17 + 416) = *((_OWORD *)v5 + 26);
          *(void *)(v17 + 432) = *((void *)v5 + 54);
          *((void *)v5 + 52) = 0;
          *((void *)v5 + 53) = 0;
          *((void *)v5 + 54) = 0;
          long long v39 = *(_OWORD *)(v5 + 110);
          long long v40 = *(_OWORD *)(v5 + 118);
          *(_OWORD *)(v17 + 456) = *(_OWORD *)(v5 + 114);
          *(_OWORD *)(v17 + 472) = v40;
          *(_OWORD *)(v17 + 440) = v39;
          long long v41 = *(_OWORD *)(v5 + 122);
          long long v42 = *(_OWORD *)(v5 + 126);
          *(void *)(v17 + 520) = *((void *)v5 + 65);
          *(_OWORD *)(v17 + 488) = v41;
          *(_OWORD *)(v17 + 504) = v42;
          *(void *)(v17 + 528) = 0;
          *(void *)(v17 + 544) = 0;
          *(void *)(v17 + 536) = 0;
          *(_OWORD *)(v17 + 528) = *((_OWORD *)v5 + 33);
          *(void *)(v17 + 544) = *((void *)v5 + 68);
          *((void *)v5 + 67) = 0;
          *((void *)v5 + 66) = 0;
          *((void *)v5 + 68) = 0;
          *(void *)(v17 + 560) = 0;
          *(void *)(v17 + 552) = 0;
          *(void *)(v17 + 568) = 0;
          *(void *)(v17 + 552) = *((void *)v5 + 69);
          *(void *)(v17 + 560) = *((void *)v5 + 70);
          *(void *)(v17 + 568) = *((void *)v5 + 71);
          *((void *)v5 + 70) = 0;
          *((void *)v5 + 69) = 0;
          *((void *)v5 + 71) = 0;
          *(_OWORD *)(v17 + 576) = *((_OWORD *)v5 + 36);
          *(_DWORD *)(v17 + 600) = v5[150];
          if (v5[150] <= 1u) {
            *(void *)(v17 + 592) = *((void *)v5 + 74);
          }
          *(_OWORD *)(v17 + 608) = *((_OWORD *)v5 + 38);
          long long v43 = *((_OWORD *)v5 + 39);
          long long v44 = *((_OWORD *)v5 + 40);
          *(void *)(v17 + 656) = *((void *)v5 + 82);
          *(_OWORD *)(v17 + 624) = v43;
          *(_OWORD *)(v17 + 640) = v44;
          *(void *)(v17 + 664) = 0;
          *(void *)(v17 + 680) = 0;
          *(void *)(v17 + 672) = 0;
          *(void *)(v17 + 664) = *((void *)v5 + 83);
          *(void *)(v17 + 672) = *((void *)v5 + 84);
          *(void *)(v17 + 680) = *((void *)v5 + 85);
          *((void *)v5 + 85) = 0;
          *((void *)v5 + 84) = 0;
          *((void *)v5 + 83) = 0;
          *(unsigned char *)(v17 + 688) = *((unsigned char *)v5 + 688);
          *(void *)(v17 + 704) = 0;
          *(void *)(v17 + 712) = 0;
          *(void *)(v17 + 696) = 0;
          *(void *)(v17 + 696) = *((void *)v5 + 87);
          *(void *)(v17 + 704) = *((void *)v5 + 88);
          *(void *)(v17 + 712) = *((void *)v5 + 89);
          *((void *)v5 + 88) = 0;
          *((void *)v5 + 87) = 0;
          *((void *)v5 + 89) = 0;
          long long v45 = *((_OWORD *)v5 + 45);
          *(_OWORD *)(v17 + 729) = *(_OWORD *)((char *)v5 + 729);
          *(_OWORD *)(v17 + 720) = v45;
          long long v46 = *(_OWORD *)(v5 + 187);
          *(_DWORD *)(v17 + 764) = v5[191];
          *(_OWORD *)(v17 + 748) = v46;
          *(void *)(v17 + 768) = 0;
          *(void *)(v17 + 784) = 0;
          *(void *)(v17 + 776) = 0;
          *(_OWORD *)(v17 + 768) = *((_OWORD *)v5 + 48);
          *(void *)(v17 + 784) = *((void *)v5 + 98);
          *((void *)v5 + 97) = 0;
          *((void *)v5 + 96) = 0;
          *((void *)v5 + 98) = 0;
          __n128 result = *(__n128 *)(v5 + 198);
          *(_DWORD *)(v17 + 808) = v5[202];
          *(__n128 *)(v17 + 792) = result;
          ++v51;
          v17 += 408;
          uint64_t v15 = (uint64_t)(v18 + 102);
          v16 += 408;
          int64_t v5 = v18;
          if (v18 + 102 == v4) {
            return result;
          }
        }
        uint64_t v22 = (_OWORD *)(v17 + 360);
        *(_DWORD *)(v17 + 408) = *(_DWORD *)v17;
        *(_OWORD *)(v17 + 416) = *(_OWORD *)(v17 + 8);
        *(void *)(v17 + 432) = *(void *)(v17 + 24);
        *(void *)(v17 + 8) = 0;
        *(void *)(v17 + 16) = 0;
        *(void *)(v17 + 24) = 0;
        long long v23 = *(_OWORD *)(v17 + 48);
        *(_OWORD *)(v17 + 440) = *(_OWORD *)(v17 + 32);
        *(_OWORD *)(v17 + 456) = v23;
        long long v24 = *(_OWORD *)(v17 + 96);
        *(_OWORD *)(v17 + 488) = *(_OWORD *)(v17 + 80);
        *(_OWORD *)(v17 + 504) = v24;
        long long v25 = *(_OWORD *)(v17 + 64);
        *(void *)(v17 + 520) = *(void *)(v17 + 112);
        *(_OWORD *)(v17 + 472) = v25;
        *(_OWORD *)(v17 + 528) = *(_OWORD *)(v17 + 120);
        *(void *)(v17 + 544) = *(void *)(v17 + 136);
        *(void *)(v17 + 120) = 0;
        *(void *)(v17 + 128) = 0;
        *(_OWORD *)(v17 + 552) = *(_OWORD *)(v17 + 144);
        *(void *)(v17 + 568) = *(void *)(v17 + 160);
        *(void *)(v17 + 136) = 0;
        *(void *)(v17 + 144) = 0;
        *(void *)(v17 + 152) = 0;
        *(void *)(v17 + 160) = 0;
        *(_OWORD *)(v17 + 576) = *(_OWORD *)(v17 + 168);
        unsigned int v26 = *(_DWORD *)(v17 + 192);
        *(_DWORD *)(v17 + 600) = v26;
        if (v26 <= 1) {
          *(void *)(v17 + 592) = *(void *)(v17 + 184);
        }
        long long v27 = *(_OWORD *)(v17 + 216);
        *(_OWORD *)(v17 + 608) = *(_OWORD *)(v17 + 200);
        *(_OWORD *)(v17 + 624) = v27;
        *(_OWORD *)(v17 + 640) = *(_OWORD *)(v17 + 232);
        *(void *)(v17 + 656) = *(void *)(v17 + 248);
        *(_OWORD *)(v17 + 664) = *(_OWORD *)(v17 + 256);
        *(void *)(v17 + 680) = *(void *)(v17 + 272);
        *(void *)(v17 + 256) = 0;
        *(void *)(v17 + 264) = 0;
        *(void *)(v17 + 272) = 0;
        *(unsigned char *)(v17 + 688) = *(unsigned char *)(v17 + 280);
        *(_OWORD *)(v17 + 696) = *(_OWORD *)(v17 + 288);
        *(void *)(v17 + 712) = *(void *)(v17 + 304);
        *(void *)(v17 + 288) = 0;
        *(void *)(v17 + 296) = 0;
        *(void *)(v17 + 304) = 0;
        long long v28 = *(_OWORD *)(v17 + 312);
        *(_OWORD *)(v17 + 729) = *(_OWORD *)(v17 + 321);
        *(_OWORD *)(v17 + 720) = v28;
        long long v29 = *(_OWORD *)(v17 + 340);
        *(_DWORD *)(v17 + 764) = *(_DWORD *)(v17 + 356);
        *(_OWORD *)(v17 + 748) = v29;
        *(_OWORD *)(v17 + 768) = *v22;
        *(void *)(v17 + 784) = *(void *)(v17 + 376);
        *(void *)uint64_t v22 = 0;
        *(void *)(v17 + 368) = 0;
        *(void *)(v17 + 376) = 0;
        long long v30 = *(_OWORD *)(v17 + 384);
        *(_DWORD *)(v17 + 808) = *(_DWORD *)(v17 + 400);
        *(_OWORD *)(v17 + 792) = v30;
        uint64_t v31 = a3;
        ++v51;
        if (v17 == a3) {
          goto LABEL_29;
        }
        uint64_t v32 = v16;
        uint64_t v31 = v17;
        while (1)
        {
          uint64_t v33 = sub_638A2C((uint64_t)v18);
          if (v33 == sub_638A2C(a3 + v32 - 408))
          {
            uint64_t v34 = sub_638A34((uint64_t)v18);
            if (v34 <= sub_638A34(a3 + v32 - 408)) {
              goto LABEL_28;
            }
            goto LABEL_20;
          }
          uint64_t v35 = sub_638A2C((uint64_t)v18);
          if (v35 <= sub_638A2C(a3 + v32 - 408)) {
            break;
          }
LABEL_20:
          sub_52ECD8(a3 + v32, a3 + v32 - 408);
          uint64_t v36 = a3 + v32;
          *(_OWORD *)(a3 + v32 + 340) = *(_OWORD *)(a3 + v32 - 68);
          *(_DWORD *)(a3 + v32 + 356) = *(_DWORD *)(a3 + v32 - 52);
          unint64_t v37 = (void **)(a3 + v32 + 360);
          uint64_t v38 = *v37;
          if (*v37)
          {
            *(void *)(v36 + 368) = v38;
            operator delete(v38);
            void *v37 = 0;
            *(void *)(a3 + v32 + 368) = 0;
            *(void *)(a3 + v32 + 376) = 0;
          }
          v31 -= 408;
          *(_OWORD *)unint64_t v37 = *(_OWORD *)(v36 - 48);
          *(void *)(v36 + 376) = *(void *)(v36 - 32);
          *(void *)(v36 - 40) = 0;
          *(void *)(v36 - 32) = 0;
          *(void *)(v36 - 48) = 0;
          *(_OWORD *)(v36 + 384) = *(_OWORD *)(v36 - 24);
          *(_DWORD *)(v36 + 400) = *(_DWORD *)(v36 - 8);
          v32 -= 408;
          if (!v32)
          {
            uint64_t v31 = a3;
            goto LABEL_28;
          }
        }
        uint64_t v31 = a3 + v32;
LABEL_28:
        uint64_t v4 = a2;
LABEL_29:
        sub_52ECD8(v31, (uint64_t)v18);
        int v47 = v5[191];
        *(_OWORD *)(v31 + 340) = *(_OWORD *)(v5 + 187);
        *(_DWORD *)(v31 + 356) = v47;
        uint64_t v48 = (void *)(v31 + 360);
        BOOL v49 = *(void **)(v31 + 360);
        if (v49)
        {
          *(void *)(v31 + 368) = v49;
          operator delete(v49);
          void *v48 = 0;
          *(void *)(v31 + 368) = 0;
          *(void *)(v31 + 376) = 0;
        }
        *(_OWORD *)uint64_t v48 = *((_OWORD *)v5 + 48);
        *(void *)(v31 + 376) = *((void *)v5 + 98);
        *((void *)v5 + 97) = 0;
        *((void *)v5 + 96) = 0;
        *((void *)v5 + 98) = 0;
        __n128 result = *(__n128 *)(v5 + 198);
        *(_DWORD *)(v31 + 400) = v5[202];
        *(__n128 *)(v31 + 384) = result;
        v17 += 408;
        uint64_t v15 = (uint64_t)(v18 + 102);
        v16 += 408;
        int64_t v5 = v18;
      }
      while (v18 + 102 != v4);
    }
  }
  return result;
}

void sub_8867B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_879BD8((void **)va);
  _Unwind_Resume(a1);
}

void sub_8867CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_879BD8((void **)va);
  _Unwind_Resume(a1);
}

__n128 sub_8867E0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v54 = 0;
  if (a1 == a2)
  {
LABEL_23:
    if ((void *)a3 != a4)
    {
      uint64_t v42 = a5 + 184;
      uint64_t v43 = a3 + 184;
      do
      {
        uint64_t v48 = (void *)(v43 - 184);
        *(_DWORD *)(v42 - 184) = *(_DWORD *)(v43 - 184);
        uint64_t v49 = v42 - 184;
        *(void *)(v49 + 16) = 0;
        *(void *)(v49 + 24) = 0;
        *(void *)(v49 + 8) = 0;
        *(_OWORD *)(v49 + 8) = *(_OWORD *)(v43 - 176);
        *(void *)(v49 + 24) = *(void *)(v43 - 160);
        v48[1] = 0;
        v48[2] = 0;
        v48[3] = 0;
        long long v50 = *(_OWORD *)(v43 - 152);
        long long v51 = *(_OWORD *)(v43 - 120);
        *(_OWORD *)(v49 + 48) = *(_OWORD *)(v43 - 136);
        *(_OWORD *)(v49 + 64) = v51;
        *(_OWORD *)(v49 + 32) = v50;
        long long v52 = *(_OWORD *)(v43 - 88);
        uint64_t v53 = *(void *)(v43 - 72);
        *(_OWORD *)(v49 + 80) = *(_OWORD *)(v43 - 104);
        *(_OWORD *)(v49 + 96) = v52;
        *(void *)(v49 + 112) = v53;
        *(void *)(v49 + 120) = 0;
        *(void *)(v49 + 128) = 0;
        *(void *)(v49 + 136) = 0;
        *(_OWORD *)(v49 + 120) = *(_OWORD *)(v43 - 64);
        *(void *)(v49 + 136) = *(void *)(v43 - 48);
        v48[15] = 0;
        v48[16] = 0;
        v48[17] = 0;
        *(void *)(v49 + 144) = 0;
        *(void *)(v49 + 152) = 0;
        *(void *)(v49 + 160) = 0;
        *(_OWORD *)(v49 + 144) = *(_OWORD *)(v43 - 40);
        *(void *)(v49 + 160) = *(void *)(v43 - 24);
        v48[18] = 0;
        v48[19] = 0;
        v48[20] = 0;
        *(_OWORD *)(v49 + 168) = *(_OWORD *)(v43 - 16);
        *(_DWORD *)(v42 + 8) = *(_DWORD *)(v43 + 8);
        if (*(_DWORD *)(v43 + 8) < 2u) {
          *(void *)uint64_t v42 = *(void *)v43;
        }
        *(_OWORD *)(v42 + 16) = *(_OWORD *)(v43 + 16);
        long long v44 = *(_OWORD *)(v43 + 32);
        uint64_t v45 = *(void *)(v43 + 64);
        *(_OWORD *)(v42 + 48) = *(_OWORD *)(v43 + 48);
        *(_OWORD *)(v42 + 32) = v44;
        *(void *)(v42 + 64) = v45;
        *(void *)(v42 + 72) = 0;
        *(void *)(v42 + 80) = 0;
        *(void *)(v42 + 88) = 0;
        *(_OWORD *)(v42 + 72) = *(_OWORD *)(v43 + 72);
        *(void *)(v42 + 88) = *(void *)(v43 + 88);
        *(void *)(v43 + 80) = 0;
        *(void *)(v43 + 88) = 0;
        *(void *)(v43 + 72) = 0;
        *(unsigned char *)(v42 + 96) = *(unsigned char *)(v43 + 96);
        *(void *)(v42 + 112) = 0;
        *(void *)(v42 + 120) = 0;
        *(void *)(v42 + 104) = 0;
        *(_OWORD *)(v42 + 104) = *(_OWORD *)(v43 + 104);
        *(void *)(v42 + 120) = *(void *)(v43 + 120);
        *(void *)(v43 + 104) = 0;
        *(void *)(v43 + 112) = 0;
        *(void *)(v43 + 120) = 0;
        long long v46 = *(_OWORD *)(v43 + 128);
        *(_OWORD *)(v42 + 137) = *(_OWORD *)(v43 + 137);
        *(_OWORD *)(v42 + 128) = v46;
        long long v47 = *(_OWORD *)(v43 + 156);
        *(_DWORD *)(v42 + 172) = *(_DWORD *)(v43 + 172);
        *(_OWORD *)(v42 + 156) = v47;
        *(void *)(v42 + 184) = 0;
        *(void *)(v42 + 192) = 0;
        *(void *)(v42 + 176) = 0;
        *(void *)(v42 + 176) = *(void *)(v43 + 176);
        *(void *)(v42 + 184) = *(void *)(v43 + 184);
        *(void *)(v42 + 192) = *(void *)(v43 + 192);
        *(void *)(v43 + 176) = 0;
        *(void *)(v43 + 184) = 0;
        *(void *)(v43 + 192) = 0;
        __n128 result = *(__n128 *)(v43 + 200);
        *(_DWORD *)(v42 + 216) = *(_DWORD *)(v43 + 216);
        *(__n128 *)(v42 + 200) = result;
        v42 += 408;
        v43 += 408;
      }
      while (v48 + 51 != a4);
    }
  }
  else
  {
    uint64_t v8 = a1;
    uint64_t v9 = a5 + 192;
    while ((void *)a3 != a4)
    {
      uint64_t v15 = sub_638A2C(a3);
      if (v15 == sub_638A2C(v8))
      {
        uint64_t v16 = sub_638A34(a3);
        uint64_t v17 = sub_638A34(v8);
      }
      else
      {
        uint64_t v16 = sub_638A2C(a3);
        uint64_t v17 = sub_638A2C(v8);
      }
      if (v16 <= v17)
      {
        *(_DWORD *)(v9 - 192) = *(_DWORD *)v8;
        *(void *)(v9 - 176) = 0;
        *(void *)(v9 - 168) = 0;
        *(void *)(v9 - 184) = 0;
        *(_OWORD *)(v9 - 184) = *(_OWORD *)(v8 + 8);
        *(void *)(v9 - 168) = *(void *)(v8 + 24);
        *(void *)(v8 + 8) = 0;
        *(void *)(v8 + 16) = 0;
        *(void *)(v8 + 24) = 0;
        long long v26 = *(_OWORD *)(v8 + 32);
        long long v27 = *(_OWORD *)(v8 + 64);
        *(_OWORD *)(v9 - 144) = *(_OWORD *)(v8 + 48);
        *(_OWORD *)(v9 - 128) = v27;
        *(_OWORD *)(v9 - 160) = v26;
        long long v28 = *(_OWORD *)(v8 + 96);
        uint64_t v29 = *(void *)(v8 + 112);
        *(_OWORD *)(v9 - 112) = *(_OWORD *)(v8 + 80);
        *(_OWORD *)(v9 - 96) = v28;
        *(void *)(v9 - 80) = v29;
        *(void *)(v9 - 72) = 0;
        *(void *)(v9 - 64) = 0;
        *(void *)(v9 - 56) = 0;
        *(_OWORD *)(v9 - 72) = *(_OWORD *)(v8 + 120);
        *(void *)(v9 - 56) = *(void *)(v8 + 136);
        *(void *)(v8 + 120) = 0;
        *(void *)(v8 + 128) = 0;
        *(void *)(v8 + 136) = 0;
        *(void *)(v9 - 48) = 0;
        *(void *)(v9 - 40) = 0;
        *(void *)(v9 - 32) = 0;
        *(_OWORD *)(v9 - 48) = *(_OWORD *)(v8 + 144);
        *(void *)(v9 - 32) = *(void *)(v8 + 160);
        *(void *)(v8 + 144) = 0;
        *(void *)(v8 + 152) = 0;
        *(void *)(v8 + 160) = 0;
        *(_OWORD *)(v9 - 24) = *(_OWORD *)(v8 + 168);
        *(_DWORD *)uint64_t v9 = *(_DWORD *)(v8 + 192);
        if (*(_DWORD *)(v8 + 192) < 2u) {
          *(void *)(v9 - 8) = *(void *)(v8 + 184);
        }
        *(_OWORD *)(v9 + 8) = *(_OWORD *)(v8 + 200);
        long long v10 = *(_OWORD *)(v8 + 216);
        uint64_t v11 = *(void *)(v8 + 248);
        *(_OWORD *)(v9 + 40) = *(_OWORD *)(v8 + 232);
        *(_OWORD *)(v9 + 24) = v10;
        *(void *)(v9 + 56) = v11;
        *(void *)(v9 + 64) = 0;
        *(void *)(v9 + 72) = 0;
        *(void *)(v9 + 80) = 0;
        *(_OWORD *)(v9 + 64) = *(_OWORD *)(v8 + 256);
        *(void *)(v9 + 80) = *(void *)(v8 + 272);
        *(void *)(v8 + 264) = 0;
        *(void *)(v8 + 272) = 0;
        *(void *)(v8 + 256) = 0;
        *(unsigned char *)(v9 + 88) = *(unsigned char *)(v8 + 280);
        *(void *)(v9 + 104) = 0;
        *(void *)(v9 + 112) = 0;
        *(void *)(v9 + 96) = 0;
        *(_OWORD *)(v9 + 96) = *(_OWORD *)(v8 + 288);
        *(void *)(v9 + 112) = *(void *)(v8 + 304);
        *(void *)(v8 + 288) = 0;
        *(void *)(v8 + 296) = 0;
        *(void *)(v8 + 304) = 0;
        long long v12 = *(_OWORD *)(v8 + 312);
        *(_OWORD *)(v9 + 129) = *(_OWORD *)(v8 + 321);
        *(_OWORD *)(v9 + 120) = v12;
        long long v13 = *(_OWORD *)(v8 + 340);
        *(_DWORD *)(v9 + 164) = *(_DWORD *)(v8 + 356);
        *(_OWORD *)(v9 + 148) = v13;
        *(void *)(v9 + 176) = 0;
        *(void *)(v9 + 184) = 0;
        *(void *)(v9 + 168) = 0;
        *(void *)(v9 + 168) = *(void *)(v8 + 360);
        *(void *)(v9 + 176) = *(void *)(v8 + 368);
        *(void *)(v9 + 184) = *(void *)(v8 + 376);
        *(void *)(v8 + 360) = 0;
        *(void *)(v8 + 368) = 0;
        *(void *)(v8 + 376) = 0;
        __n128 result = *(__n128 *)(v8 + 384);
        *(_DWORD *)(v9 + 208) = *(_DWORD *)(v8 + 400);
        *(__n128 *)(v9 + 192) = result;
        ++v54;
        v8 += 408;
        v9 += 408;
        if (v8 == a2)
        {
LABEL_22:
          a5 = v9 - 192;
          goto LABEL_23;
        }
      }
      else
      {
        *(_DWORD *)(v9 - 192) = *(_DWORD *)a3;
        *(void *)(v9 - 176) = 0;
        *(void *)(v9 - 168) = 0;
        *(void *)(v9 - 184) = 0;
        *(_OWORD *)(v9 - 184) = *(_OWORD *)(a3 + 8);
        *(void *)(v9 - 168) = *(void *)(a3 + 24);
        *(void *)(a3 + 8) = 0;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = 0;
        long long v18 = *(_OWORD *)(a3 + 32);
        long long v19 = *(_OWORD *)(a3 + 64);
        *(_OWORD *)(v9 - 144) = *(_OWORD *)(a3 + 48);
        *(_OWORD *)(v9 - 128) = v19;
        *(_OWORD *)(v9 - 160) = v18;
        long long v20 = *(_OWORD *)(a3 + 96);
        uint64_t v21 = *(void *)(a3 + 112);
        *(_OWORD *)(v9 - 112) = *(_OWORD *)(a3 + 80);
        *(_OWORD *)(v9 - 96) = v20;
        *(void *)(v9 - 80) = v21;
        *(void *)(v9 - 72) = 0;
        *(void *)(v9 - 64) = 0;
        *(void *)(v9 - 56) = 0;
        *(_OWORD *)(v9 - 72) = *(_OWORD *)(a3 + 120);
        *(void *)(v9 - 56) = *(void *)(a3 + 136);
        *(void *)(a3 + 120) = 0;
        *(void *)(a3 + 128) = 0;
        *(void *)(a3 + 136) = 0;
        *(void *)(v9 - 48) = 0;
        *(void *)(v9 - 40) = 0;
        *(void *)(v9 - 32) = 0;
        *(_OWORD *)(v9 - 48) = *(_OWORD *)(a3 + 144);
        *(void *)(v9 - 32) = *(void *)(a3 + 160);
        *(void *)(a3 + 144) = 0;
        *(void *)(a3 + 152) = 0;
        *(void *)(a3 + 160) = 0;
        *(_OWORD *)(v9 - 24) = *(_OWORD *)(a3 + 168);
        *(_DWORD *)uint64_t v9 = *(_DWORD *)(a3 + 192);
        if (*(_DWORD *)(a3 + 192) <= 1u) {
          *(void *)(v9 - 8) = *(void *)(a3 + 184);
        }
        *(_OWORD *)(v9 + 8) = *(_OWORD *)(a3 + 200);
        long long v22 = *(_OWORD *)(a3 + 216);
        uint64_t v23 = *(void *)(a3 + 248);
        *(_OWORD *)(v9 + 40) = *(_OWORD *)(a3 + 232);
        *(_OWORD *)(v9 + 24) = v22;
        *(void *)(v9 + 56) = v23;
        *(void *)(v9 + 64) = 0;
        *(void *)(v9 + 72) = 0;
        *(void *)(v9 + 80) = 0;
        *(_OWORD *)(v9 + 64) = *(_OWORD *)(a3 + 256);
        *(void *)(v9 + 80) = *(void *)(a3 + 272);
        *(void *)(a3 + 264) = 0;
        *(void *)(a3 + 272) = 0;
        *(void *)(a3 + 256) = 0;
        *(unsigned char *)(v9 + 88) = *(unsigned char *)(a3 + 280);
        *(void *)(v9 + 104) = 0;
        *(void *)(v9 + 112) = 0;
        *(void *)(v9 + 96) = 0;
        *(_OWORD *)(v9 + 96) = *(_OWORD *)(a3 + 288);
        *(void *)(v9 + 112) = *(void *)(a3 + 304);
        *(void *)(a3 + 288) = 0;
        *(void *)(a3 + 296) = 0;
        *(void *)(a3 + 304) = 0;
        long long v24 = *(_OWORD *)(a3 + 312);
        *(_OWORD *)(v9 + 129) = *(_OWORD *)(a3 + 321);
        *(_OWORD *)(v9 + 120) = v24;
        long long v25 = *(_OWORD *)(a3 + 340);
        *(_DWORD *)(v9 + 164) = *(_DWORD *)(a3 + 356);
        *(_OWORD *)(v9 + 148) = v25;
        *(void *)(v9 + 176) = 0;
        *(void *)(v9 + 184) = 0;
        *(void *)(v9 + 168) = 0;
        *(void *)(v9 + 168) = *(void *)(a3 + 360);
        *(void *)(v9 + 176) = *(void *)(a3 + 368);
        *(void *)(v9 + 184) = *(void *)(a3 + 376);
        *(void *)(a3 + 360) = 0;
        *(void *)(a3 + 368) = 0;
        *(void *)(a3 + 376) = 0;
        __n128 result = *(__n128 *)(a3 + 384);
        *(_DWORD *)(v9 + 208) = *(_DWORD *)(a3 + 400);
        *(__n128 *)(v9 + 192) = result;
        ++v54;
        a3 += 408;
        v9 += 408;
        if (v8 == a2) {
          goto LABEL_22;
        }
      }
    }
    if (v8 != a2)
    {
      uint64_t v30 = 0;
      do
      {
        uint64_t v36 = (_DWORD *)(v9 + v30);
        uint64_t v37 = v8 + v30;
        *(v36 - 48) = *(_DWORD *)(v8 + v30);
        *((void *)v36 - 22) = 0;
        *((void *)v36 - 21) = 0;
        *((void *)v36 - 23) = 0;
        *(_OWORD *)(v36 - 46) = *(_OWORD *)(v8 + v30 + 8);
        *((void *)v36 - 21) = *(void *)(v8 + v30 + 24);
        *(void *)(v37 + 8) = 0;
        *(void *)(v37 + 16) = 0;
        *(void *)(v37 + 24) = 0;
        long long v38 = *(_OWORD *)(v8 + v30 + 32);
        long long v39 = *(_OWORD *)(v8 + v30 + 64);
        *((_OWORD *)v36 - 9) = *(_OWORD *)(v8 + v30 + 48);
        *((_OWORD *)v36 - 8) = v39;
        *((_OWORD *)v36 - 10) = v38;
        long long v40 = *(_OWORD *)(v8 + v30 + 96);
        uint64_t v41 = *(void *)(v8 + v30 + 112);
        *((_OWORD *)v36 - 7) = *(_OWORD *)(v8 + v30 + 80);
        *((_OWORD *)v36 - 6) = v40;
        *((void *)v36 - 10) = v41;
        *((void *)v36 - 9) = 0;
        *((void *)v36 - 8) = 0;
        *((void *)v36 - 7) = 0;
        *(_OWORD *)(v36 - 18) = *(_OWORD *)(v8 + v30 + 120);
        *((void *)v36 - 7) = *(void *)(v8 + v30 + 136);
        *(void *)(v37 + 120) = 0;
        *(void *)(v37 + 128) = 0;
        *(void *)(v37 + 136) = 0;
        *((void *)v36 - 6) = 0;
        *((void *)v36 - 5) = 0;
        *((void *)v36 - 4) = 0;
        *((_OWORD *)v36 - 3) = *(_OWORD *)(v8 + v30 + 144);
        *((void *)v36 - 4) = *(void *)(v8 + v30 + 160);
        *(void *)(v37 + 144) = 0;
        *(void *)(v37 + 152) = 0;
        *(void *)(v37 + 160) = 0;
        *(_OWORD *)(v36 - 6) = *(_OWORD *)(v8 + v30 + 168);
        _DWORD *v36 = *(_DWORD *)(v8 + v30 + 192);
        if (*(_DWORD *)(v8 + v30 + 192) < 2u) {
          *((void *)v36 - 1) = *(void *)(v37 + 184);
        }
        uint64_t v31 = v9 + v30;
        *(_OWORD *)(v31 + 8) = *(_OWORD *)(v37 + 200);
        long long v32 = *(_OWORD *)(v37 + 216);
        uint64_t v33 = *(void *)(v37 + 248);
        *(_OWORD *)(v31 + 40) = *(_OWORD *)(v37 + 232);
        *(_OWORD *)(v31 + 24) = v32;
        *(void *)(v31 + 56) = v33;
        *(void *)(v31 + 64) = 0;
        *(void *)(v31 + 72) = 0;
        *(void *)(v31 + 80) = 0;
        *(_OWORD *)(v31 + 64) = *(_OWORD *)(v37 + 256);
        *(void *)(v31 + 80) = *(void *)(v37 + 272);
        *(void *)(v37 + 264) = 0;
        *(void *)(v37 + 272) = 0;
        *(void *)(v37 + 256) = 0;
        *(unsigned char *)(v31 + 88) = *(unsigned char *)(v37 + 280);
        *(void *)(v31 + 104) = 0;
        *(void *)(v31 + 112) = 0;
        *(void *)(v31 + 96) = 0;
        *(_OWORD *)(v31 + 96) = *(_OWORD *)(v37 + 288);
        *(void *)(v31 + 112) = *(void *)(v37 + 304);
        *(void *)(v37 + 288) = 0;
        *(void *)(v37 + 296) = 0;
        *(void *)(v37 + 304) = 0;
        long long v34 = *(_OWORD *)(v37 + 312);
        *(_OWORD *)(v31 + 129) = *(_OWORD *)(v37 + 321);
        *(_OWORD *)(v31 + 120) = v34;
        long long v35 = *(_OWORD *)(v37 + 340);
        *(_DWORD *)(v31 + 164) = *(_DWORD *)(v37 + 356);
        *(_OWORD *)(v31 + 148) = v35;
        *(void *)(v31 + 176) = 0;
        *(void *)(v31 + 184) = 0;
        *(void *)(v31 + 168) = 0;
        *(void *)(v31 + 168) = *(void *)(v37 + 360);
        *(void *)(v31 + 176) = *(void *)(v37 + 368);
        *(void *)(v31 + 184) = *(void *)(v37 + 376);
        *(void *)(v37 + 360) = 0;
        *(void *)(v37 + 368) = 0;
        *(void *)(v37 + 376) = 0;
        __n128 result = *(__n128 *)(v37 + 384);
        *(_DWORD *)(v31 + 208) = *(_DWORD *)(v37 + 400);
        *(__n128 *)(v31 + 192) = result;
        v30 += 408;
      }
      while (v37 + 408 != a2);
    }
  }
  return result;
}

void sub_886F08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_879BD8((void **)va);
  _Unwind_Resume(a1);
}

void sub_886F1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  unint64_t v38 = 0;
  if (a5 > a6)
  {
    uint64_t v10 = (uint64_t)a7;
    if (a2 != a3)
    {
      unint64_t v11 = 0;
      uint64_t v12 = a2 + 184;
      uint64_t v10 = (uint64_t)a7;
      do
      {
        long long v18 = (void *)(v12 - 184);
        *(_DWORD *)uint64_t v10 = *(_DWORD *)(v12 - 184);
        *(void *)(v10 + 16) = 0;
        *(void *)(v10 + 24) = 0;
        *(void *)(v10 + 8) = 0;
        *(_OWORD *)(v10 + 8) = *(_OWORD *)(v12 - 176);
        *(void *)(v10 + 24) = *(void *)(v12 - 160);
        v18[1] = 0;
        v18[2] = 0;
        v18[3] = 0;
        long long v19 = *(_OWORD *)(v12 - 152);
        long long v20 = *(_OWORD *)(v12 - 120);
        *(_OWORD *)(v10 + 48) = *(_OWORD *)(v12 - 136);
        *(_OWORD *)(v10 + 64) = v20;
        *(_OWORD *)(v10 + 32) = v19;
        long long v21 = *(_OWORD *)(v12 - 88);
        uint64_t v22 = *(void *)(v12 - 72);
        *(_OWORD *)(v10 + 80) = *(_OWORD *)(v12 - 104);
        *(_OWORD *)(v10 + 96) = v21;
        *(void *)(v10 + 112) = v22;
        *(void *)(v10 + 120) = 0;
        *(void *)(v10 + 128) = 0;
        *(void *)(v10 + 136) = 0;
        *(_OWORD *)(v10 + 120) = *(_OWORD *)(v12 - 64);
        *(void *)(v10 + 136) = *(void *)(v12 - 48);
        v18[15] = 0;
        v18[16] = 0;
        v18[17] = 0;
        *(void *)(v10 + 144) = 0;
        *(void *)(v10 + 152) = 0;
        *(void *)(v10 + 160) = 0;
        *(_OWORD *)(v10 + 144) = *(_OWORD *)(v12 - 40);
        *(void *)(v10 + 160) = *(void *)(v12 - 24);
        v18[18] = 0;
        v18[19] = 0;
        v18[20] = 0;
        *(_OWORD *)(v10 + 168) = *(_OWORD *)(v12 - 16);
        *(_DWORD *)(v10 + 192) = *(_DWORD *)(v12 + 8);
        if (*(_DWORD *)(v12 + 8) < 2u) {
          *(void *)(v10 + 184) = *(void *)v12;
        }
        *(_OWORD *)(v10 + 200) = *(_OWORD *)(v12 + 16);
        long long v13 = *(_OWORD *)(v12 + 32);
        uint64_t v14 = *(void *)(v12 + 64);
        *(_OWORD *)(v10 + 232) = *(_OWORD *)(v12 + 48);
        *(_OWORD *)(v10 + 216) = v13;
        *(void *)(v10 + 248) = v14;
        *(void *)(v10 + 256) = 0;
        *(void *)(v10 + 264) = 0;
        *(void *)(v10 + 272) = 0;
        *(_OWORD *)(v10 + 256) = *(_OWORD *)(v12 + 72);
        *(void *)(v10 + 272) = *(void *)(v12 + 88);
        *(void *)(v12 + 80) = 0;
        *(void *)(v12 + 88) = 0;
        *(void *)(v12 + 72) = 0;
        *(unsigned char *)(v10 + 280) = *(unsigned char *)(v12 + 96);
        *(void *)(v10 + 296) = 0;
        *(void *)(v10 + 304) = 0;
        *(void *)(v10 + 288) = 0;
        *(_OWORD *)(v10 + 288) = *(_OWORD *)(v12 + 104);
        *(void *)(v10 + 304) = *(void *)(v12 + 120);
        *(void *)(v12 + 104) = 0;
        *(void *)(v12 + 112) = 0;
        *(void *)(v12 + 120) = 0;
        long long v15 = *(_OWORD *)(v12 + 128);
        *(_OWORD *)(v10 + 321) = *(_OWORD *)(v12 + 137);
        *(_OWORD *)(v10 + 312) = v15;
        long long v16 = *(_OWORD *)(v12 + 156);
        *(_DWORD *)(v10 + 356) = *(_DWORD *)(v12 + 172);
        *(_OWORD *)(v10 + 340) = v16;
        *(void *)(v10 + 368) = 0;
        *(void *)(v10 + 376) = 0;
        *(void *)(v10 + 360) = 0;
        *(void *)(v10 + 360) = *(void *)(v12 + 176);
        *(void *)(v10 + 368) = *(void *)(v12 + 184);
        *(void *)(v10 + 376) = *(void *)(v12 + 192);
        *(void *)(v12 + 176) = 0;
        *(void *)(v12 + 184) = 0;
        *(void *)(v12 + 192) = 0;
        long long v17 = *(_OWORD *)(v12 + 200);
        *(_DWORD *)(v10 + 400) = *(_DWORD *)(v12 + 216);
        *(_OWORD *)(v10 + 384) = v17;
        ++v11;
        v10 += 408;
        v12 += 408;
      }
      while (v18 + 51 != (void *)a3);
      unint64_t v38 = v11;
    }
    sub_87BA3C(v10, v10, (uint64_t)a7, (uint64_t)a7, a2, a2, a1, a1, a3, a3);
    if (!a7) {
      return;
    }
LABEL_19:
    if (v38)
    {
      for (unint64_t i = 0; i < v38; ++i)
      {
        uint64_t v37 = (void *)a7[45];
        if (v37)
        {
          a7[46] = v37;
          operator delete(v37);
        }
        sub_4F32CC(a7);
        a7 += 51;
      }
    }
    return;
  }
  uint64_t v23 = a7;
  if (a1 != a2)
  {
    unint64_t v24 = 0;
    uint64_t v25 = a1 + 184;
    uint64_t v23 = a7;
    do
    {
      uint64_t v31 = (void *)(v25 - 184);
      *(_DWORD *)uint64_t v23 = *(_DWORD *)(v25 - 184);
      v23[2] = 0;
      v23[3] = 0;
      v23[1] = 0;
      *(_OWORD *)(v23 + 1) = *(_OWORD *)(v25 - 176);
      v23[3] = *(void *)(v25 - 160);
      v31[1] = 0;
      v31[2] = 0;
      v31[3] = 0;
      long long v32 = *(_OWORD *)(v25 - 152);
      long long v33 = *(_OWORD *)(v25 - 120);
      *((_OWORD *)v23 + 3) = *(_OWORD *)(v25 - 136);
      *((_OWORD *)v23 + 4) = v33;
      *((_OWORD *)v23 + 2) = v32;
      long long v34 = *(_OWORD *)(v25 - 88);
      uint64_t v35 = *(void *)(v25 - 72);
      *((_OWORD *)v23 + 5) = *(_OWORD *)(v25 - 104);
      *((_OWORD *)v23 + 6) = v34;
      v23[14] = v35;
      v23[15] = 0;
      v23[16] = 0;
      v23[17] = 0;
      *(_OWORD *)(v23 + 15) = *(_OWORD *)(v25 - 64);
      v23[17] = *(void *)(v25 - 48);
      v31[15] = 0;
      v31[16] = 0;
      v31[17] = 0;
      v23[18] = 0;
      v23[19] = 0;
      v23[20] = 0;
      *((_OWORD *)v23 + 9) = *(_OWORD *)(v25 - 40);
      v23[20] = *(void *)(v25 - 24);
      v31[18] = 0;
      v31[19] = 0;
      v31[20] = 0;
      *(_OWORD *)(v23 + 21) = *(_OWORD *)(v25 - 16);
      *((_DWORD *)v23 + 48) = *(_DWORD *)(v25 + 8);
      if (*(_DWORD *)(v25 + 8) < 2u) {
        v23[23] = *(void *)v25;
      }
      *(_OWORD *)(v23 + 25) = *(_OWORD *)(v25 + 16);
      long long v26 = *(_OWORD *)(v25 + 32);
      uint64_t v27 = *(void *)(v25 + 64);
      *(_OWORD *)(v23 + 29) = *(_OWORD *)(v25 + 48);
      *(_OWORD *)(v23 + 27) = v26;
      v23[31] = v27;
      v23[32] = 0;
      v23[33] = 0;
      v23[34] = 0;
      *((_OWORD *)v23 + 16) = *(_OWORD *)(v25 + 72);
      v23[34] = *(void *)(v25 + 88);
      *(void *)(v25 + 80) = 0;
      *(void *)(v25 + 88) = 0;
      *(void *)(v25 + 72) = 0;
      *((unsigned char *)v23 + 280) = *(unsigned char *)(v25 + 96);
      v23[37] = 0;
      v23[38] = 0;
      v23[36] = 0;
      *((_OWORD *)v23 + 18) = *(_OWORD *)(v25 + 104);
      v23[38] = *(void *)(v25 + 120);
      *(void *)(v25 + 104) = 0;
      *(void *)(v25 + 112) = 0;
      *(void *)(v25 + 120) = 0;
      long long v28 = *(_OWORD *)(v25 + 128);
      *(_OWORD *)((char *)v23 + 321) = *(_OWORD *)(v25 + 137);
      *(_OWORD *)(v23 + 39) = v28;
      long long v29 = *(_OWORD *)(v25 + 156);
      *((_DWORD *)v23 + 89) = *(_DWORD *)(v25 + 172);
      *(_OWORD *)((char *)v23 + 340) = v29;
      v23[46] = 0;
      v23[47] = 0;
      v23[45] = 0;
      v23[45] = *(void *)(v25 + 176);
      v23[46] = *(void *)(v25 + 184);
      v23[47] = *(void *)(v25 + 192);
      *(void *)(v25 + 176) = 0;
      *(void *)(v25 + 184) = 0;
      *(void *)(v25 + 192) = 0;
      long long v30 = *(_OWORD *)(v25 + 200);
      *((_DWORD *)v23 + 100) = *(_DWORD *)(v25 + 216);
      *((_OWORD *)v23 + 24) = v30;
      ++v24;
      v23 += 51;
      v25 += 408;
    }
    while (v31 + 51 != (void *)a2);
    unint64_t v38 = v24;
  }
  sub_87B7FC((uint64_t)a7, v23, a2, a3, a1);
  if (a7) {
    goto LABEL_19;
  }
}

void sub_887374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_879BD8((void **)va);
  _Unwind_Resume(a1);
}

void sub_887388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_879BD8((void **)va);
  _Unwind_Resume(a1);
}

double sub_88739C()
{
  byte_25C8767 = 1;
  word_25C8750 = 65;
  byte_25C877F = 1;
  word_25C8768 = 65;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__dst, "UNKNOWN");
  *(_DWORD *)v285 = 0;
  HIBYTE(v286[0]) = 14;
  strcpy(&v285[8], "ROUTES_THROUGH");
  LODWORD(v286[1]) = 1;
  v287[23] = 9;
  strcpy(v287, "ROUTES_TO");
  LODWORD(v288) = 3;
  HIBYTE(v290) = 11;
  strcpy((char *)__p, "ROUTES_FROM");
  LODWORD(v291) = 2;
  xmmword_25CC568 = 0u;
  *(_OWORD *)&qword_25CC578 = 0u;
  dword_25CC588 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25CC568, (uint64_t)&__dst, (uint64_t)&__dst);
  sub_3A6EF0((uint64_t)&xmmword_25CC568, (uint64_t)&v285[8], (uint64_t)&v285[8]);
  sub_3A6EF0((uint64_t)&xmmword_25CC568, (uint64_t)v287, (uint64_t)v287);
  sub_3A6EF0((uint64_t)&xmmword_25CC568, (uint64_t)__p, (uint64_t)__p);
  if (SHIBYTE(v290) < 0)
  {
    operator delete(__p[0]);
    if ((v287[23] & 0x80000000) == 0)
    {
LABEL_3:
      if ((SHIBYTE(v286[0]) & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_383:
      operator delete(*(void **)&v285[8]);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_5;
      }
      goto LABEL_384;
    }
  }
  else if ((v287[23] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v287);
  if (SHIBYTE(v286[0]) < 0) {
    goto LABEL_383;
  }
LABEL_4:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_5;
  }
LABEL_384:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_5:
  strcpy(&byte_25C8797, "\n\x1B\\toi=orth\\"");
  strcpy((char *)&qword_25C8780, "\x1B\\toi=lhp\\"");
  byte_25C87AF = 11;
  qword_25C87B0 = (char *)operator new(0x19uLL);
  long long v282 = xmmword_20B9250;
  xmmword_25C87B8 = xmmword_20B9250;
  strcpy(qword_25C87B0, "\x1B\\toi=x-sampa-internal\\"");
  byte_25C87DF = 13;
  strcpy((char *)&qword_25C87C8, "\x1B\\tn=address\\"");
  strcpy(&byte_25C87F7, "\t\x1B\\tn=normal\\"");
  strcpy((char *)&qword_25C87E0, "\x1B\\tn=nav\\"");
  byte_25C880F = 12;
  byte_25C8827 = 7;
  strcpy((char *)&dword_25C8810, "\x1B\\lang=");
  byte_25C883F = 1;
  word_25C8828 = 92;
  byte_25C8857 = 4;
  strcpy((char *)&qword_25C8840, "DEV:");
  byte_25C886F = 8;
  strcpy((char *)&qword_25C8858, "Continue");
  byte_25C8887 = 11;
  strcpy((char *)&qword_25C8870, "Start_Route");
  byte_25C889F = 14;
  strcpy((char *)&qword_25C8888, "Continue_Route");
  byte_25C88B7 = 12;
  strcpy((char *)&qword_25C88A0, "Resume_Route");
  byte_25C88CF = 18;
  strcpy((char *)&xmmword_25C88B8, "Start_Route_U_Turn");
  byte_25C88E7 = 7;
  strcpy((char *)&dword_25C88D0, "_U_Turn");
  qword_25C88F8 = 0x1300000000000000;
  qmemcpy(&unk_25C8900, "Continue_Route", 14);
  qword_25C88E8 = *(void *)"Resume_Route";
  unk_25C88F0 = 0x545F555F6574756FLL;
  unk_25C88F7 = 1852994900;
  qword_25C8910 = 0x1500000000000000;
  strcpy(byte_25C8918, "Left_Turn");
  unk_25C890E = 1415533919;
  *(_DWORD *)((char *)&qword_25C8910 + 1) = 1852994900;
  strcpy(&byte_25C892F, "\tRight_Turn");
  strcpy(&byte_25C8947, "\nLeft_Turn_At_End");
  byte_25C895F = 16;
  byte_25C8977 = 17;
  strcpy((char *)&xmmword_25C8960, "Right_Turn_At_End");
  byte_25C898F = 15;
  strcpy((char *)&qword_25C8978, "Sharp_Left_Turn");
  byte_25C89A7 = 16;
  strcpy((char *)&xmmword_25C8990, "Sharp_Right_Turn");
  byte_25C89BF = 16;
  strcpy((char *)&xmmword_25C89A8, "Slight_Left_Turn");
  byte_25C89D7 = 17;
  strcpy((char *)&xmmword_25C89C0, "Slight_Right_Turn");
  strcpy(&byte_25C89EF, "\tKeep_Right");
  strcpy((char *)&qword_25C89D8, "Keep_Left");
  strcpy(&byte_25C8A07, "\nU_Turn");
  byte_25C8A1F = 6;
  byte_25C8A37 = 14;
  strcpy((char *)&qword_25C8A20, "Walking_U_Turn");
  byte_25C8A4F = 20;
  strcpy((char *)&xmmword_25C8A38, "U_Turn_When_Possible");
  byte_25C8A67 = 20;
  strcpy((char *)&xmmword_25C8A50, "U_Turn_At_Roundabout");
  byte_25C8A7F = 11;
  strcpy((char *)&qword_25C8A68, "Enter_Ferry");
  strcpy(&byte_25C8A97, "\nChange_Ferry");
  strcpy((char *)&qword_25C8A80, "Exit_Ferry");
  byte_25C8AAF = 12;
  byte_25C8AC7 = 21;
  strcpy((char *)&xmmword_25C8AB0, "Enter_Railway_Shuttle");
  byte_25C8ADF = 20;
  strcpy((char *)&xmmword_25C8AC8, "Exit_Railway_Shuttle");
  byte_25C8AF7 = 22;
  strcpy((char *)&xmmword_25C8AE0, "Change_Railway_Shuttle");
  byte_25C8B0F = 17;
  strcpy((char *)&xmmword_25C8AF8, "End_Of_Navigation");
  byte_25C8B27 = 17;
  strcpy((char *)&xmmword_25C8B10, "End_Of_Navigation");
  byte_25C8B3F = 11;
  strcpy((char *)&qword_25C8B28, "Destination");
  byte_25C8B57 = 19;
  strcpy((char *)&xmmword_25C8B40, "Destination_On_left");
  byte_25C8B6F = 20;
  strcpy((char *)&xmmword_25C8B58, "Destination_On_Right");
  strcpy(&byte_25C8B87, "\nFirst_Stop_On_left");
  *(void *)&v269[0] = *(void *)"First_Stop";
  strcpy((char *)&qword_25C8B70, "First_Stop");
  byte_25C8B9F = 18;
  byte_25C8BB7 = 19;
  strcpy((char *)&xmmword_25C8BA0, "First_Stop_On_Right");
  strcpy(&byte_25C8BCF, "\tNext_Stop_On_left");
  *(void *)&v265[48] = *(void *)"Next_Stop";
  strcpy((char *)&qword_25C8BB8, "Next_Stop");
  byte_25C8BE7 = 17;
  byte_25C8BFF = 18;
  strcpy((char *)&xmmword_25C8BE8, "Next_Stop_On_Right");
  byte_25C8C17 = 13;
  strcpy((char *)&qword_25C8C00, "Waypoint_Stop");
  byte_25C8C2F = 21;
  strcpy((char *)&xmmword_25C8C18, "Waypoint_Stop_On_Left");
  byte_25C8C47 = 22;
  strcpy((char *)&xmmword_25C8C30, "Waypoint_Stop_On_Right");
  byte_25C8C5F = 11;
  strcpy((char *)&qword_25C8C48, "Roundabout_");
  byte_25C8C77 = 16;
  strcpy((char *)&xmmword_25C8C60, "Enter_Roundabout");
  qword_25C8C78 = (uint64_t)operator new(0x20uLL);
  long long v281 = xmmword_20B91C0;
  unk_25C8C80 = xmmword_20B91C0;
  strcpy((char *)qword_25C8C78, "Walking_Enter_Roundabout");
  byte_25C8CA7 = 16;
  strcpy(byte_25C8C90, "Leave_Roundabout");
  byte_25C8CBF = 21;
  strcpy((char *)&xmmword_25C8CA8, "Roundabout_First_Exit");
  byte_25C8CD7 = 22;
  strcpy(byte_25C8CC0, "Roundabout_Second_Exit");
  byte_25C8CEF = 21;
  strcpy((char *)&xmmword_25C8CD8, "Roundabout_Third_Exit");
  strcpy(byte_25C8CF0, "Roundabout_Fourth_Exit");
  HIBYTE(word_25C8D06) = 22;
  byte_25C8D1F = 21;
  strcpy((char *)&xmmword_25C8D08, "Roundabout_Fifth_Exit");
  byte_25C8D37 = 21;
  strcpy(byte_25C8D20, "Roundabout_Sixth_Exit");
  qword_25C8D38 = (uint64_t)operator new(0x19uLL);
  unk_25C8D40 = xmmword_20B9250;
  strcpy((char *)qword_25C8D38, "Roundabout_Seventh_Exit");
  strcpy(byte_25C8D50, "Roundabout_Eighth_Exit");
  HIBYTE(word_25C8D66) = 22;
  byte_25C8D7F = 21;
  strcpy((char *)&xmmword_25C8D68, "Roundabout_Ninth_Exit");
  byte_25C8D97 = 21;
  strcpy(byte_25C8D80, "Roundabout_Tenth_Exit");
  qword_25C8D98 = (uint64_t)operator new(0x20uLL);
  unk_25C8DA0 = xmmword_20B91C0;
  strcpy((char *)qword_25C8D98, "Roundabout_Eleventh_Exit");
  qword_25C8DB0 = (uint64_t)operator new(0x19uLL);
  unk_25C8DB8 = xmmword_20B9250;
  strcpy((char *)qword_25C8DB0, "Roundabout_Twelfth_Exit");
  qword_25C8DC8 = (uint64_t)operator new(0x20uLL);
  long long v278 = xmmword_20B5EB0;
  *(_OWORD *)algn_25C8DD0 = xmmword_20B5EB0;
  strcpy((char *)qword_25C8DC8, "Roundabout_Thirteenth_Exit");
  qword_25C8DE0 = (uint64_t)operator new(0x20uLL);
  unk_25C8DE8 = xmmword_20B5EB0;
  strcpy((char *)qword_25C8DE0, "Roundabout_Fourteenth_Exit");
  qword_25C8DF8 = (uint64_t)operator new(0x20uLL);
  long long v280 = xmmword_20B8870;
  unk_25C8E00 = xmmword_20B8870;
  strcpy((char *)qword_25C8DF8, "Roundabout_Fifteenth_Exit");
  qword_25C8E10 = (uint64_t)operator new(0x20uLL);
  unk_25C8E18 = xmmword_20B8870;
  strcpy((char *)qword_25C8E10, "Roundabout_Sixteenth_Exit");
  qword_25C8E28 = (uint64_t)operator new(0x20uLL);
  long long v275 = xmmword_20B91A0;
  *(_OWORD *)algn_25C8E30 = xmmword_20B91A0;
  strcpy((char *)qword_25C8E28, "Roundabout_Seventeenth_Exit");
  qword_25C8E40 = (uint64_t)operator new(0x20uLL);
  unk_25C8E48 = xmmword_20B5EB0;
  strcpy((char *)qword_25C8E40, "Roundabout_Eighteenth_Exit");
  qword_25C8E58 = (uint64_t)operator new(0x20uLL);
  unk_25C8E60 = xmmword_20B5EB0;
  strcpy((char *)qword_25C8E58, "Roundabout_Nineteenth_Exit");
  byte_25C8E87 = 8;
  strcpy((char *)&qword_25C8E70, "Off_Ramp");
  byte_25C8E9F = 16;
  strcpy((char *)&xmmword_25C8E88, "Off_Ramp_On_Left");
  byte_25C8EB7 = 17;
  strcpy(byte_25C8EA0, "Off_Ramp_On_Right");
  byte_25C8ECF = 14;
  strcpy((char *)&qword_25C8EB8, "Change_Highway");
  strcpy(byte_25C8ED0, "Change_Highway_On_Left");
  HIBYTE(word_25C8EE6) = 22;
  qword_25C8EE8 = (uint64_t)operator new(0x19uLL);
  *(_OWORD *)algn_25C8EF0 = xmmword_20B9250;
  strcpy((char *)qword_25C8EE8, "Change_Highway_On_Right");
  byte_25C8F17 = 5;
  strcpy((char *)&dword_25C8F00, "Merge");
  byte_25C8F2F = 12;
  strcpy((char *)&qword_25C8F18, "Enter_Detour");
  byte_25C8F47 = 11;
  strcpy((char *)&qword_25C8F30, "Exit_Detour");
  byte_25C8F5F = 18;
  strcpy((char *)&xmmword_25C8F48, "Walking_Turnaround");
  qword_25C8F60 = (uint64_t)operator new(0x19uLL);
  unk_25C8F68 = xmmword_20B9250;
  strcpy((char *)qword_25C8F60, "Walking_Turnaround_Sign");
  byte_25C8F8F = 19;
  strcpy(byte_25C8F78, "Distance_Title_List");
  unk_25C8F90 = operator new(0x19uLL);
  unk_25C8F98 = xmmword_20B9250;
  long long v272 = *(_OWORD *)"Cross_The_Street_Spoken";
  strcpy(unk_25C8F90, "Cross_The_Street_Spoken");
  *(void *)&long long v271 = *(void *)"t_Spoken";
  byte_25C8FBF = 19;
  strcpy(byte_25C8FA8, "Arrival_Charge_List");
  byte_25C8FD7 = 15;
  strcpy(byte_25C8FC0, "Charge_At_Start");
  strcpy(&byte_25C8FEF, "\tPass_Street");
  strcpy(byte_25C8FD8, "Pass_Exit");
  byte_25C9007 = 11;
  byte_25C901F = 17;
  strcpy(byte_25C9008, "Pass_Intersection");
  strcpy(&byte_25C9037, "\t_PrevExitNumber");
  strcpy(byte_25C9020, "Next_Exit");
  byte_25C904F = 15;
  strcpy(&byte_25C9067, "\t_PrevUTurn");
  strcpy(byte_25C9050, "_PrevRoad");
  strcpy(&byte_25C907F, "\nNext_");
  byte_25C9097 = 5;
  byte_25C90AF = 15;
  strcpy(byte_25C9098, "_At_Next_Street");
  byte_25C90C7 = 21;
  strcpy(byte_25C90B0, "_At_Next_Intersection");
  byte_25C90DF = 14;
  strcpy((char *)&qword_25C90C8, "Charge_Station");
  byte_25C90F7 = 15;
  strcpy((char *)&qword_25C90E0, "_Charge_Station");
  BYTE1(qword_25C9108) = 0;
  WORD1(qword_25C9108) = 25856;
  HIDWORD(qword_25C9108) = 335544320;
  strcpy((char *)&qword_25C90F8, "_Charge_Station_");
  byte_25C9127 = 8;
  strcpy((char *)&qword_25C9110, "_Minimum");
  byte_25C913F = 15;
  strcpy((char *)&qword_25C9128, "ExitShield_Sign");
  byte_25C9157 = 8;
  strcpy((char *)&qword_25C9140, "Walking_");
  byte_25C916F = 16;
  strcpy((char *)&xmmword_25C9158, "Walking_Continue");
  byte_25C9187 = 19;
  strcpy((char *)&xmmword_25C9170, "Walking_Start_Route");
  qword_25C9188 = (uint64_t)operator new(0x20uLL);
  unk_25C9190 = xmmword_20B5EB0;
  strcpy((char *)qword_25C9188, "Walking_Start_Route_U_Turn");
  byte_25C91B7 = 17;
  strcpy(byte_25C91A0, "Walking_Left_Turn");
  byte_25C91CF = 18;
  strcpy((char *)&xmmword_25C91B8, "Walking_Right_Turn");
  qword_25C91D0 = (uint64_t)operator new(0x20uLL);
  unk_25C91D8 = xmmword_20B5EB0;
  strcpy((char *)qword_25C91D0, "Walking_Turn_At_Roundabout");
  qword_25C91E8 = (uint64_t)operator new(0x20uLL);
  long long v279 = xmmword_20B91B0;
  *(_OWORD *)algn_25C91F0 = xmmword_20B91B0;
  strcpy((char *)qword_25C91E8, "Walking_U_Turn_When_Possible");
  qword_25C9200 = (uint64_t)operator new(0x28uLL);
  long long v270 = xmmword_20B9390;
  unk_25C9208 = xmmword_20B9390;
  strcpy((char *)qword_25C9200, "Walking_Roundabout_Exit_Continue");
  qword_25C9218 = (uint64_t)operator new(0x20uLL);
  unk_25C9220 = xmmword_20B91B0;
  strcpy((char *)qword_25C9218, "Walking_Roundabout_Exit_Left");
  qword_25C9230 = (uint64_t)operator new(0x20uLL);
  long long v277 = xmmword_20B8890;
  unk_25C9238 = xmmword_20B8890;
  strcpy((char *)qword_25C9230, "Walking_Roundabout_Exit_Right");
  qword_25C9248 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25C9250 = xmmword_20B8870;
  strcpy((char *)qword_25C9248, "Walking_End_Of_Navigation");
  long long v274 = *(_OWORD *)"nd_Of_Navigation";
  v0 = (char *)operator new(0x20uLL);
  qword_25C9260 = (uint64_t)v0;
  unk_25C9268 = xmmword_20B8870;
  *(_OWORD *)v0 = *(_OWORD *)"Walking_End_Of_Navigation";
  *(_OWORD *)(v0 + 9) = v274;
  v0[25] = 0;
  byte_25C928F = 8;
  strcpy((char *)&qword_25C9278, "Walking_");
  qword_25C9290 = (uint64_t)operator new(0x19uLL);
  unk_25C9298 = v282;
  strcpy((char *)qword_25C9290, "Walking_Sharp_Left_Turn");
  qword_25C92A8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25C92B0 = v281;
  strcpy((char *)qword_25C92A8, "Walking_Sharp_Right_Turn");
  qword_25C92C0 = (uint64_t)operator new(0x20uLL);
  unk_25C92C8 = v281;
  strcpy((char *)qword_25C92C0, "Walking_Slight_Left_Turn");
  qword_25C92D8 = (uint64_t)operator new(0x20uLL);
  unk_25C92E0 = v280;
  strcpy((char *)qword_25C92D8, "Walking_Slight_Right_Turn");
  byte_25C9307 = 4;
  strcpy((char *)&dword_25C92F0, "Exit");
  byte_25C931F = 4;
  strcpy((char *)&dword_25C9308, "Road");
  byte_25C9337 = 7;
  strcpy((char *)&dword_25C9320, "Freeway");
  byte_25C934F = 12;
  strcpy((char *)&qword_25C9338, "Intersection");
  byte_25C9367 = 5;
  strcpy((char *)&dword_25C9350, "Ferry");
  byte_25C937F = 11;
  strcpy((char *)&qword_25C9368, "ShuttleName");
  byte_25C9397 = 5;
  strcpy((char *)&dword_25C9380, "Road1");
  strcpy(&byte_25C93AF, "\tName");
  strcpy((char *)&qword_25C9398, "Signpost1");
  byte_25C93C7 = 4;
  byte_25C93DF = 7;
  strcpy((char *)&dword_25C93C8, "Address");
  byte_25C93F7 = 7;
  strcpy((char *)&dword_25C93E0, "Shield1");
  byte_25C940F = 13;
  strcpy((char *)&qword_25C93F8, "TowardShield1");
  byte_25C9427 = 6;
  strcpy((char *)&dword_25C9410, "Right_");
  byte_25C943F = 5;
  strcpy((char *)&dword_25C9428, "Left_");
  strcpy(&byte_25C9457, "\tOn_Left_");
  strcpy((char *)&qword_25C9440, "On_Right_");
  byte_25C946F = 8;
  byte_25C9487 = 12;
  strcpy((char *)&qword_25C9470, "ElevatorName");
  byte_25C949F = 13;
  strcpy((char *)&qword_25C9488, "EscalatorName");
  strcpy(&byte_25C94B7, "\nBridgeName");
  strcpy((char *)&qword_25C94A0, "StairsName");
  strcpy(&byte_25C94CF, "\nTunnelName");
  strcpy(&byte_25C94E7, "\nParking");
  byte_25C94FF = 7;
  strcpy(&byte_25C9517, "\t_Escalator");
  strcpy((char *)&qword_25C9500, "_Elevator");
  strcpy(&byte_25C952F, "\n_ElevatorName");
  byte_25C9547 = 13;
  byte_25C955F = 14;
  strcpy((char *)&qword_25C9548, "_EscalatorName");
  byte_25C9577 = 5;
  strcpy((char *)&qword_25C9560, "_Road");
  byte_25C958F = 8;
  strcpy((char *)&qword_25C9578, "_Freeway");
  byte_25C95A7 = 13;
  strcpy((char *)&qword_25C9590, "_Intersection");
  byte_25C95BF = 6;
  strcpy((char *)&dword_25C95A8, "_Road1");
  byte_25C95D7 = 6;
  strcpy((char *)&dword_25C95C0, "_Road2");
  strcpy(&byte_25C95EF, "\n_Signpost2");
  strcpy((char *)&qword_25C95D8, "_Signpost1");
  strcpy(&byte_25C9607, "\n_Ferry");
  byte_25C961F = 6;
  byte_25C9637 = 12;
  strcpy((char *)&qword_25C9620, "_Ferry_Ferry");
  byte_25C964F = 12;
  strcpy((char *)&qword_25C9638, "_ShuttleName");
  qword_25C9650 = (uint64_t)operator new(0x20uLL);
  unk_25C9658 = v279;
  strcpy((char *)qword_25C9650, "_Railway_Shuttle_ShuttleName");
  byte_25C967F = 11;
  strcpy((char *)&qword_25C9668, "_ExitNumber");
  byte_25C9697 = 5;
  strcpy((char *)&dword_25C9680, "_Exit");
  byte_25C96AF = 7;
  strcpy((char *)&dword_25C9698, "_StayOn");
  byte_25C96C7 = 7;
  strcpy((char *)&dword_25C96B0, "_Stairs");
  byte_25C96DF = 5;
  strcpy((char *)&dword_25C96C8, "_Ramp");
  byte_25C96F7 = 11;
  strcpy((char *)&qword_25C96E0, "_StairsName");
  strcpy(&byte_25C970F, "\t_Down");
  strcpy((char *)&qword_25C96F8, "_RampName");
  byte_25C9727 = 5;
  byte_25C973F = 3;
  dword_25C9728 = 7361887;
  byte_25C9757 = 7;
  strcpy((char *)&dword_25C9740, "_Bridge");
  byte_25C976F = 7;
  strcpy((char *)&dword_25C9758, "_Tunnel");
  byte_25C9787 = 11;
  strcpy((char *)&qword_25C9770, "_Roundabout");
  byte_25C979F = 6;
  strcpy((char *)&dword_25C9788, "_Cross");
  byte_25C97B7 = 8;
  strcpy((char *)&qword_25C97A0, "_Parking");
  byte_25C97CF = 8;
  strcpy((char *)&qword_25C97B8, "_Shield1");
  byte_25C97E7 = 14;
  strcpy((char *)&qword_25C97D0, "_TowardShield1");
  byte_25C97FF = 8;
  strcpy((char *)&qword_25C97E8, "_Shield2");
  byte_25C9817 = 14;
  strcpy((char *)&qword_25C9800, "_TowardShield2");
  byte_25C982F = 11;
  strcpy((char *)&qword_25C9818, "_Direction1");
  byte_25C9847 = 11;
  strcpy((char *)&qword_25C9830, "_Direction2");
  strcpy(&byte_25C985F, "\n_TowardDirection1");
  strcpy((char *)&qword_25C9848, "Direction1");
  byte_25C9877 = 17;
  byte_25C988F = 17;
  strcpy((char *)&xmmword_25C9878, "_TowardDirection2");
  byte_25C98A7 = 16;
  strcpy((char *)&xmmword_25C9890, "TowardDirection1");
  byte_25C98BF = 7;
  strcpy((char *)&qword_25C98A8, "_Spoken");
  byte_25C98D7 = 5;
  strcpy((char *)&qword_25C98C0, "_Sign");
  byte_25C98EF = 15;
  strcpy((char *)&qword_25C98D8, "_Secondary_Sign");
  byte_25C9907 = 5;
  byte_25C98F4 = 116;
  dword_25C98F0 = 1936280671;
  byte_25C98F5 = 0;
  byte_25C991F = 8;
  strcpy((char *)&qword_25C9908, "_Primary");
  qword_25C9930 = 0xF00000000000000;
  strcpy(byte_25C9938, "_Secondary");
  strcpy((char *)&qword_25C9920, "_Spoken_Primary");
  strcpy(&byte_25C994F, "\n_Secondary");
  strcpy(&byte_25C9967, "\n_Spoken_Secondar");
  BYTE1(qword_25C9978) = 0;
  WORD1(qword_25C9978) = 0;
  HIDWORD(qword_25C9978) = 285212672;
  byte_25C9997 = 13;
  strcpy((char *)&qword_25C9980, "_To_Secondary");
  BYTE1(qword_25C99A8) = 0;
  WORD1(qword_25C99A8) = 0;
  HIDWORD(qword_25C99A8) = 335544320;
  strcpy((char *)&dword_25C9998, "_Spoken_To_Secon");
  strcpy(&byte_25C99C7, "\t_ValidDistance");
  strcpy((char *)&qword_25C99B0, "_Distance");
  byte_25C99DF = 14;
  byte_25C99F7 = 6;
  strcpy((char *)&dword_25C99E0, "_Short");
  byte_25C9A0F = 1;
  word_25C99F8 = 95;
  qword_25C9A10 = (uint64_t)operator new(0x20uLL);
  unk_25C9A18 = v281;
  strcpy((char *)qword_25C9A10, "Concatenate_Newline_Sign");
  uint64_t v1 = (char *)operator new(0x19uLL);
  qword_25C9A28 = (uint64_t)v1;
  *(_OWORD *)algn_25C9A30 = v282;
  *(_OWORD *)uint64_t v1 = v272;
  *(void *)(v1 + 15) = v271;
  v1[23] = 0;
  byte_25C9A57 = 12;
  strcpy((char *)&qword_25C9A40, "Chain_Spoken");
  byte_25C9A6F = 15;
  strcpy((char *)&qword_25C9A58, "Chain_To_Spoken");
  strcpy(&byte_25C9A87, "\nThen_Spoken");
  strcpy((char *)&qword_25C9A70, "And_Spoken");
  byte_25C9A9F = 11;
  byte_25C9AB7 = 18;
  strcpy(byte_25C9AA0, "Concatenate_Spoken");
  qword_25C9AB8 = (uint64_t)operator new(0x28uLL);
  long long v268 = xmmword_20B9240;
  unk_25C9AC0 = xmmword_20B9240;
  strcpy((char *)qword_25C9AB8, "At_Traffic_Light_Chain_Spoken_Primary");
  qword_25C9AD0 = (uint64_t)operator new(0x28uLL);
  v269[1] = xmmword_20B9260;
  unk_25C9AD8 = xmmword_20B9260;
  strcpy((char *)qword_25C9AD0, "At_Stop_Sign_Chain_Spoken_Primary");
  qword_25C9AE8 = (uint64_t)operator new(0x40uLL);
  *(_OWORD *)algn_25C9AF0 = xmmword_20B9A90;
  strcpy((char *)qword_25C9AE8, "At_Stop_Sign_Cross_Traffic_Doesnt_Stop_Chain_Spoken_Primary");
  qword_25C9B00 = (uint64_t)operator new(0x30uLL);
  long long v267 = xmmword_20B9A40;
  unk_25C9B08 = xmmword_20B9A40;
  strcpy((char *)qword_25C9B00, "At_Next_Traffic_Light_Chain_Spoken_Primary");
  qword_25C9B18 = (uint64_t)operator new(0x28uLL);
  long long v266 = xmmword_20E12D0;
  unk_25C9B20 = xmmword_20E12D0;
  strcpy((char *)qword_25C9B18, "At_Next_Stop_Sign_Chain_Spoken_Primary");
  qword_25C9B30 = (uint64_t)operator new(0x28uLL);
  long long v276 = xmmword_20B9960;
  unk_25C9B38 = xmmword_20B9960;
  strcpy((char *)qword_25C9B30, "At_Traffic_Light_Chain_Spoken_Secondary");
  qword_25C9B48 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25C9B50 = xmmword_20B93A0;
  strcpy((char *)qword_25C9B48, "At_Stop_Sign_Chain_Spoken_Secondary");
  qword_25C9B60 = (uint64_t)operator new(0x30uLL);
  long long v274 = xmmword_20E1380;
  unk_25C9B68 = xmmword_20E1380;
  strcpy((char *)qword_25C9B60, "At_Next_Traffic_Light_Chain_Spoken_Secondary");
  qword_25C9B78 = (uint64_t)operator new(0x30uLL);
  unk_25C9B80 = xmmword_20B93C0;
  strcpy((char *)qword_25C9B78, "At_Next_Stop_Sign_Chain_Spoken_Secondary");
  qword_25C9B90 = (uint64_t)operator new(0x38uLL);
  unk_25C9B98 = xmmword_20B9A60;
  strcpy((char *)qword_25C9B90, "At_Next_One_Traffic_Light_Chain_Spoken_Secondary");
  qword_25C9BA8 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_25C9BB0 = xmmword_20E1380;
  strcpy((char *)qword_25C9BA8, "At_Next_One_Stop_Sign_Chain_Spoken_Secondary");
  qword_25C9BC0 = (uint64_t)operator new(0x28uLL);
  unk_25C9BC8 = xmmword_20B9960;
  strcpy((char *)qword_25C9BC0, "At_Mini_Roundabout_Chain_Spoken_Primary");
  qword_25C9BD8 = (uint64_t)operator new(0x30uLL);
  long long v273 = xmmword_20B93D0;
  unk_25C9BE0 = xmmword_20B93D0;
  strcpy((char *)qword_25C9BD8, "At_Mini_Roundabout_Chain_Spoken_Secondary");
  qword_25C9BF0 = (uint64_t)operator new(0x20uLL);
  unk_25C9BF8 = v277;
  strcpy((char *)qword_25C9BF0, "Walking_Distance_Chain_Spoken");
  qword_25C9C08 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25C9C10 = v277;
  strcpy((char *)qword_25C9C08, "Walking_Continue_Chain_Spoken");
  uint64_t v2 = (char *)operator new(0x19uLL);
  qword_25C9C20 = (uint64_t)v2;
  unk_25C9C28 = v282;
  *(_OWORD *)uint64_t v2 = v272;
  *(void *)(v2 + 15) = v271;
  v2[23] = 0;
  unk_25C9C38 = operator new(0x28uLL);
  unk_25C9C40 = v270;
  strcpy(unk_25C9C38, "Distance_Cross_The_Street_Spoken");
  strcpy(byte_25C9C50, "Walking_Continue_Cross");
  HIBYTE(word_25C9C66) = 22;
  byte_25C9C7F = 14;
  strcpy(byte_25C9C68, "Continue_Cross");
  byte_25C9C97 = 5;
  strcpy(byte_25C9C80, "Cross");
  byte_25C9CAF = 19;
  strcpy(byte_25C9C98, "Cross_Street_Spoken");
  byte_25C9CC7 = 17;
  strcpy(algn_25C9CB0, "Cross_Road_Spoken");
  byte_25C9CDF = 20;
  strcpy(byte_25C9CC8, "Use_Crosswalk_Spoken");
  byte_25C9CF7 = 15;
  strcpy(byte_25C9CE0, "Distance_Spoken");
  byte_25C9D0F = 19;
  strcpy(byte_25C9CF8, "Distance_And_Spoken");
  byte_25C9D27 = 21;
  strcpy(byte_25C9D10, "Continue_Stage_Spoken");
  byte_25C9D3F = 13;
  qmemcpy(&qword_25C9D28, "ContinueStage", 13);
  int v3 = SHIBYTE(qword_25C9930);
  if (qword_25C9930 >= 0) {
    size_t v4 = HIBYTE(qword_25C9930);
  }
  else {
    size_t v4 = unk_25C9928;
  }
  unint64_t v5 = v4 + 13;
  byte_25C9D35 = 0;
  if (v4 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v5 >= 0x17)
  {
    uint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v7 = v5 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v9 = (char *)operator new(v7 + 1);
    qword_25C9D48 = v4 + 13;
    unk_25C9D50 = v8 | 0x8000000000000000;
    qword_25C9D40 = (uint64_t)v9;
    qmemcpy(v9, "ContinueStage", 13);
    long long v6 = v9 + 13;
  }
  else
  {
    BYTE1(qword_25C9D48) = 0;
    WORD1(qword_25C9D48) = 0;
    HIDWORD(qword_25C9D48) = 0;
    unk_25C9D50 = 0;
    byte_25C9D57 = v4 + 13;
    strcpy((char *)&qword_25C9D40, "Continue");
    long long v6 = (char *)&qword_25C9D48 + 5;
    if (!v4) {
      goto LABEL_19;
    }
  }
  if (v3 >= 0) {
    uint64_t v10 = &qword_25C9920;
  }
  else {
    uint64_t v10 = (uint64_t *)qword_25C9920;
  }
  memmove(v6, v10, v4);
LABEL_19:
  v6[v4] = 0;
  int v11 = byte_25C9577;
  if (byte_25C9577 >= 0) {
    size_t v12 = byte_25C9577;
  }
  else {
    size_t v12 = qword_25C9568;
  }
  unint64_t v13 = v12 + 13;
  if (v12 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v13 >= 0x17)
  {
    uint64_t v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v15 = v13 | 7;
    }
    uint64_t v16 = v15 + 1;
    long long v17 = operator new(v15 + 1);
    __dst.__r_.__value_.__l.__size_ = v12 + 13;
    __dst.__r_.__value_.__r.__words[2] = v16 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    void *v17 = qword_25C9D28;
    *(void *)((char *)v17 + 5) = *(uint64_t *)((char *)&qword_25C9D28 + 5);
    uint64_t v14 = (char *)v17 + 13;
  }
  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 5) = *(uint64_t *)((char *)&qword_25C9D28 + 5);
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v12 + 13;
    __dst.__r_.__value_.__r.__words[0] = qword_25C9D28;
    uint64_t v14 = &__dst.__r_.__value_.__s.__data_[13];
    if (!v12) {
      goto LABEL_33;
    }
  }
  if (v11 >= 0) {
    long long v18 = &qword_25C9560;
  }
  else {
    long long v18 = (uint64_t *)qword_25C9560;
  }
  memmove(v14, v18, v12);
LABEL_33:
  v14[v12] = 0;
  if (v3 >= 0) {
    long long v19 = (const std::string::value_type *)&qword_25C9920;
  }
  else {
    long long v19 = (const std::string::value_type *)qword_25C9920;
  }
  long long v20 = std::string::append(&__dst, v19, v4);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  qword_25C9D68 = v20->__r_.__value_.__r.__words[2];
  xmmword_25C9D58 = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  byte_25C9D87 = 5;
  strcpy((char *)&dword_25C9D70, "Merge");
  qword_25C9D88 = (uint64_t)operator new(0x20uLL);
  long long v271 = xmmword_20B8E90;
  *(_OWORD *)algn_25C9D90 = xmmword_20B8E90;
  strcpy((char *)qword_25C9D88, "Continue_Freeway_Spoken_Primary");
  byte_25C9DB7 = 8;
  strcpy((char *)&qword_25C9DA0, "Starting");
  byte_25C9DCF = 14;
  strcpy((char *)&qword_25C9DB8, "Starting_Route");
  byte_25C9DE7 = 14;
  strcpy((char *)&qword_25C9DD0, "Resuming_Route");
  byte_25C9DFF = 16;
  strcpy((char *)&xmmword_25C9DE8, "Continuing_Route");
  byte_25C9E17 = 9;
  word_25C9E08 = 112;
  qword_25C9E00 = *(void *)&v265[48];
  strcpy(&byte_25C9E2F, "\nEnding");
  strcpy((char *)&word_25C9E20, "op");
  qword_25C9E18 = *(void *)&v269[0];
  byte_25C9E47 = 6;
  strcpy((char *)&qword_25C9E48, "_Destination");
  byte_25C9E5F = 12;
  byte_25C9E77 = 15;
  strcpy((char *)&qword_25C9E60, "_At_Destination");
  std::operator+<char>();
  qword_25C9E90 = (uint64_t)operator new(0x20uLL);
  unk_25C9E98 = v281;
  strcpy((char *)qword_25C9E90, "Spoken_Ending_At_Parking");
  qword_25C9EA8 = (uint64_t)operator new(0x20uLL);
  v269[0] = xmmword_20B9800;
  xmmword_25C9EB0 = xmmword_20B9800;
  strcpy((char *)qword_25C9EA8, "Spoken_Pre_Arrival_Destination");
  strcpy((char *)&xmmword_25C9EC0, "Sign_Ending_At_Parking");
  HIBYTE(word_25C9ED6) = 22;
  byte_25C9EEF = 4;
  strcpy((char *)&dword_25C9ED8, "Home");
  byte_25C9F07 = 4;
  strcpy((char *)&dword_25C9EF0, "Work");
  byte_25C9F1F = 8;
  strcpy((char *)&qword_25C9F08, "Business");
  byte_25C9F37 = 4;
  strcpy((char *)&dword_25C9F20, "Name");
  byte_25C9F4F = 13;
  strcpy((char *)&qword_25C9F38, "Other_Contact");
  byte_25C9F67 = 11;
  strcpy((char *)&qword_25C9F50, "ContactHome");
  byte_25C9F7F = 11;
  *(_DWORD *)((char *)&qword_25C9F68 + 7) = 1802661719;
  byte_25C9F97 = 7;
  *(int *)((char *)&dword_25C9F80 + 3) = 1936942450;
  dword_25C9F80 = 1919181889;
  strcpy((char *)&xmmword_25C9F98, "Discoverability_Prompt");
  HIBYTE(word_25C9FAE) = 22;
  byte_25C9FC7 = 6;
  dword_25C9FB0 = 1634878303;
  word_25C9FB4 = 26739;
  byte_25C9FDF = 8;
  qword_25C9FC8 = 0x697269535F6F4E5FLL;
  byte_25C9FF7 = 9;
  strcpy((char *)&qword_25C9FE0, "_CityName");
  byte_25CA00F = 8;
  qword_25C9FF8 = 0x636972656E65475FLL;
  int v22 = byte_25C9DB7;
  if (byte_25C9DB7 >= 0) {
    size_t v23 = byte_25C9DB7;
  }
  else {
    size_t v23 = qword_25C9DA8;
  }
  LODWORD(v272) = byte_25C90F7;
  if (byte_25C90F7 >= 0) {
    size_t v24 = byte_25C90F7;
  }
  else {
    size_t v24 = unk_25C90E8;
  }
  qword_25C9F68 = *(void *)"ContactWork";
  byte_25C9F73 = 0;
  byte_25C9F87 = 0;
  byte_25C9FB6 = 0;
  byte_25C9FD0 = 0;
  byte_25CA000 = 0;
  unint64_t v25 = v24 + v23;
  if (v24 + v23 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  *(void *)v265 = *(void *)"ContactWork";
  *(void *)&v265[16] = *(void *)"ContactHome";
  *(void *)&v265[32] = *(void *)"_Contact";
  *(void *)&v265[48] = *(void *)"Other_Contact";
  if (v25 <= 0x16)
  {
    long long v26 = &qword_25CA010;
    qword_25CA018 = 0;
    unk_25CA020 = 0;
    qword_25CA010 = 0;
    byte_25CA027 = v24 + v23;
    if (!v23) {
      goto LABEL_51;
    }
    goto LABEL_47;
  }
  uint64_t v89 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v25 | 7) != 0x17) {
    uint64_t v89 = v25 | 7;
  }
  uint64_t v90 = v89 + 1;
  long long v26 = (uint64_t *)operator new(v89 + 1);
  qword_25CA018 = v24 + v23;
  unk_25CA020 = v90 | 0x8000000000000000;
  qword_25CA010 = (uint64_t)v26;
  if (v23)
  {
LABEL_47:
    if (v22 >= 0) {
      uint64_t v27 = &qword_25C9DA0;
    }
    else {
      uint64_t v27 = (uint64_t *)qword_25C9DA0;
    }
    memmove(v26, v27, v23);
  }
LABEL_51:
  long long v28 = (char *)v26 + v23;
  if (v24)
  {
    if ((int)v272 >= 0) {
      long long v29 = &qword_25C90E0;
    }
    else {
      long long v29 = (uint64_t *)qword_25C90E0;
    }
    memmove(v28, v29, v24);
  }
  v28[v24] = 0;
  int v30 = byte_25C9E5F;
  if (byte_25C9E5F >= 0) {
    size_t v31 = byte_25C9E5F;
  }
  else {
    size_t v31 = qword_25C9E50;
  }
  unint64_t v32 = v31 + v23;
  if (v31 + v23 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v32 <= 0x16)
  {
    long long v33 = &qword_25CA028;
    qword_25CA030 = 0;
    unk_25CA038 = 0;
    qword_25CA028 = 0;
    byte_25CA03F = v31 + v23;
    if (!v23) {
      goto LABEL_66;
    }
    goto LABEL_62;
  }
  uint64_t v91 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v32 | 7) != 0x17) {
    uint64_t v91 = v32 | 7;
  }
  uint64_t v92 = v91 + 1;
  long long v33 = (uint64_t *)operator new(v91 + 1);
  qword_25CA030 = v31 + v23;
  unk_25CA038 = v92 | 0x8000000000000000;
  qword_25CA028 = (uint64_t)v33;
  if (v23)
  {
LABEL_62:
    if (v22 >= 0) {
      long long v34 = &qword_25C9DA0;
    }
    else {
      long long v34 = (uint64_t *)qword_25C9DA0;
    }
    memmove(v33, v34, v23);
  }
LABEL_66:
  uint64_t v35 = (char *)v33 + v23;
  if (v31)
  {
    if (v30 >= 0) {
      uint64_t v36 = &qword_25C9E48;
    }
    else {
      uint64_t v36 = (uint64_t *)qword_25C9E48;
    }
    memmove(v35, v36, v31);
  }
  v35[v31] = 0;
  qword_25CA040 = (uint64_t)operator new(0x19uLL);
  unk_25CA048 = v282;
  strcpy((char *)qword_25CA040, "{ChargeStationCityName}");
  if (v32 < 0x17)
  {
    uint64_t v37 = &qword_25CA058;
    qword_25CA060 = 0;
    unk_25CA068 = 0;
    qword_25CA058 = 0;
    byte_25CA06F = v31 + v23;
    if (!v23) {
      goto LABEL_77;
    }
    goto LABEL_73;
  }
  uint64_t v93 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v32 | 7) != 0x17) {
    uint64_t v93 = v32 | 7;
  }
  uint64_t v94 = v93 + 1;
  uint64_t v37 = (uint64_t *)operator new(v93 + 1);
  qword_25CA060 = v31 + v23;
  unk_25CA068 = v94 | 0x8000000000000000;
  qword_25CA058 = (uint64_t)v37;
  if (v23)
  {
LABEL_73:
    if (v22 >= 0) {
      unint64_t v38 = &qword_25C9DA0;
    }
    else {
      unint64_t v38 = (uint64_t *)qword_25C9DA0;
    }
    memmove(v37, v38, v23);
  }
LABEL_77:
  long long v39 = (char *)v37 + v23;
  if (v31)
  {
    if (v30 >= 0) {
      long long v40 = &qword_25C9E48;
    }
    else {
      long long v40 = (uint64_t *)qword_25C9E48;
    }
    memmove(v39, v40, v31);
  }
  v39[v31] = 0;
  strcpy((char *)&xmmword_25CA070, "{NewBatteryPercentage}");
  HIBYTE(word_25CA086) = 22;
  qword_25CA088 = (uint64_t)operator new(0x20uLL);
  xmmword_25CA090 = v275;
  strcpy((char *)qword_25CA088, "{OriginalBatteryPercentage}");
  byte_25CA0B7 = 19;
  strcpy((char *)&xmmword_25CA0A0, "_Arrival_Percentage");
  int v41 = byte_25C9E47;
  if (byte_25C9E47 >= 0) {
    size_t v42 = byte_25C9E47;
  }
  else {
    size_t v42 = qword_25C9E38;
  }
  unint64_t v43 = v42 + v24;
  if (v42 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v43 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v42 + v24;
    if (!v42) {
      goto LABEL_92;
    }
    goto LABEL_88;
  }
  uint64_t v95 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v43 | 7) != 0x17) {
    uint64_t v95 = v43 | 7;
  }
  uint64_t v96 = v95 + 1;
  p_dst = (char *)operator new(v95 + 1);
  __dst.__r_.__value_.__l.__size_ = v42 + v24;
  __dst.__r_.__value_.__r.__words[2] = v96 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v42)
  {
LABEL_88:
    if (v41 >= 0) {
      uint64_t v45 = &qword_25C9E30;
    }
    else {
      uint64_t v45 = (uint64_t *)qword_25C9E30;
    }
    memmove(p_dst, v45, v42);
  }
LABEL_92:
  long long v46 = &p_dst[v42];
  if (v24)
  {
    if ((int)v272 >= 0) {
      long long v47 = &qword_25C90E0;
    }
    else {
      long long v47 = (uint64_t *)qword_25C90E0;
    }
    memmove(v46, v47, v24);
  }
  v46[v24] = 0;
  uint64_t v48 = std::string::append(&__dst, "_Percentage");
  long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  qword_25CA0C8 = v48->__r_.__value_.__r.__words[2];
  xmmword_25CA0B8 = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v50 = byte_25C9E47;
  if (byte_25C9E47 >= 0) {
    size_t v51 = byte_25C9E47;
  }
  else {
    size_t v51 = qword_25C9E38;
  }
  int v52 = byte_25C90F7;
  if (byte_25C90F7 >= 0) {
    size_t v53 = byte_25C90F7;
  }
  else {
    size_t v53 = unk_25C90E8;
  }
  unint64_t v54 = v53 + v51;
  if (v53 + v51 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v54 <= 0x16)
  {
    memset(&v283, 0, sizeof(v283));
    unint64_t v55 = (char *)&v283;
    *((unsigned char *)&v283.__r_.__value_.__s + 23) = v53 + v51;
    if (!v51) {
      goto LABEL_112;
    }
    goto LABEL_108;
  }
  uint64_t v97 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v54 | 7) != 0x17) {
    uint64_t v97 = v54 | 7;
  }
  uint64_t v98 = v97 + 1;
  unint64_t v55 = (char *)operator new(v97 + 1);
  v283.__r_.__value_.__l.__size_ = v53 + v51;
  v283.__r_.__value_.__r.__words[2] = v98 | 0x8000000000000000;
  v283.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
  if (v51)
  {
LABEL_108:
    if (v50 >= 0) {
      uint64_t v56 = &qword_25C9E30;
    }
    else {
      uint64_t v56 = (uint64_t *)qword_25C9E30;
    }
    memmove(v55, v56, v51);
  }
LABEL_112:
  uint64_t v57 = &v55[v51];
  if (v53)
  {
    if (v52 >= 0) {
      long long v58 = &qword_25C90E0;
    }
    else {
      long long v58 = (uint64_t *)qword_25C90E0;
    }
    memmove(v57, v58, v53);
  }
  v57[v53] = 0;
  if (byte_25C9127 >= 0) {
    uint64_t v59 = (const std::string::value_type *)&qword_25C9110;
  }
  else {
    uint64_t v59 = (const std::string::value_type *)qword_25C9110;
  }
  if (byte_25C9127 >= 0) {
    std::string::size_type v60 = byte_25C9127;
  }
  else {
    std::string::size_type v60 = *(void *)&byte_25C9118;
  }
  long long v61 = std::string::append(&v283, v59, v60);
  long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v62;
  v61->__r_.__value_.__l.__size_ = 0;
  v61->__r_.__value_.__r.__words[2] = 0;
  v61->__r_.__value_.__r.__words[0] = 0;
  uint64_t v63 = std::string::append(&__dst, "_Percentage");
  long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
  qword_25CA0E0 = v63->__r_.__value_.__r.__words[2];
  xmmword_25CA0D0 = v64;
  v63->__r_.__value_.__l.__size_ = 0;
  v63->__r_.__value_.__r.__words[2] = 0;
  v63->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_125;
    }
  }
  else if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_125;
  }
  operator delete(v283.__r_.__value_.__l.__data_);
LABEL_125:
  int v65 = byte_25C9E47;
  if (byte_25C9E47 >= 0) {
    size_t v66 = byte_25C9E47;
  }
  else {
    size_t v66 = qword_25C9E38;
  }
  int v67 = byte_25C90F7;
  if (byte_25C90F7 >= 0) {
    size_t v68 = byte_25C90F7;
  }
  else {
    size_t v68 = unk_25C90E8;
  }
  unint64_t v69 = v68 + v66;
  if (v68 + v66 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v69 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    v70 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v68 + v66;
    if (!v66) {
      goto LABEL_138;
    }
    goto LABEL_134;
  }
  uint64_t v99 = (v69 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v69 | 7) != 0x17) {
    uint64_t v99 = v69 | 7;
  }
  uint64_t v100 = v99 + 1;
  v70 = (char *)operator new(v99 + 1);
  __dst.__r_.__value_.__l.__size_ = v68 + v66;
  __dst.__r_.__value_.__r.__words[2] = v100 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v70;
  if (v66)
  {
LABEL_134:
    if (v65 >= 0) {
      long long v71 = &qword_25C9E30;
    }
    else {
      long long v71 = (uint64_t *)qword_25C9E30;
    }
    memmove(v70, v71, v66);
  }
LABEL_138:
  int v72 = &v70[v66];
  if (v68)
  {
    if (v67 >= 0) {
      long long v73 = &qword_25C90E0;
    }
    else {
      long long v73 = (uint64_t *)qword_25C90E0;
    }
    memmove(v72, v73, v68);
  }
  v72[v68] = 0;
  uint64_t v74 = std::string::append(&__dst, "_Duration");
  long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
  qword_25CA0F8 = v74->__r_.__value_.__r.__words[2];
  xmmword_25CA0E8 = v75;
  v74->__r_.__value_.__l.__size_ = 0;
  v74->__r_.__value_.__r.__words[2] = 0;
  v74->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v76 = byte_25C9E47;
  if (byte_25C9E47 >= 0) {
    size_t v77 = byte_25C9E47;
  }
  else {
    size_t v77 = qword_25C9E38;
  }
  int v78 = byte_25C90F7;
  if (byte_25C90F7 >= 0) {
    size_t v79 = byte_25C90F7;
  }
  else {
    size_t v79 = unk_25C90E8;
  }
  unint64_t v80 = v79 + v77;
  if (v79 + v77 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v80 <= 0x16)
  {
    qword_25CA108 = 0;
    unk_25CA110 = 0;
    qword_25CA100 = 0;
    v81 = &qword_25CA100;
    byte_25CA117 = v79 + v77;
    if (!v77) {
      goto LABEL_158;
    }
    goto LABEL_154;
  }
  uint64_t v101 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v80 | 7) != 0x17) {
    uint64_t v101 = v80 | 7;
  }
  uint64_t v102 = v101 + 1;
  v81 = (uint64_t *)operator new(v101 + 1);
  qword_25CA108 = v79 + v77;
  unk_25CA110 = v102 | 0x8000000000000000;
  qword_25CA100 = (uint64_t)v81;
  if (v77)
  {
LABEL_154:
    if (v76 >= 0) {
      v82 = &qword_25C9E30;
    }
    else {
      v82 = (uint64_t *)qword_25C9E30;
    }
    memmove(v81, v82, v77);
  }
LABEL_158:
  v83 = (char *)v81 + v77;
  if (v79)
  {
    if (v78 >= 0) {
      v84 = &qword_25C90E0;
    }
    else {
      v84 = (uint64_t *)qword_25C90E0;
    }
    memmove(v83, v84, v79);
  }
  v83[v79] = 0;
  int v85 = byte_25CA117;
  if (byte_25CA117 >= 0) {
    size_t v86 = byte_25CA117;
  }
  else {
    size_t v86 = qword_25CA108;
  }
  unint64_t v87 = v86 + 5;
  if (v86 + 5 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v87 >= 0x17)
  {
    uint64_t v103 = (v87 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v87 | 7) != 0x17) {
      uint64_t v103 = v87 | 7;
    }
    uint64_t v104 = v103 + 1;
    v88 = (uint64_t *)operator new(v103 + 1);
    qword_25CA120 = v86 + 5;
    unk_25CA128 = v104 | 0x8000000000000000;
    qword_25CA118 = (uint64_t)v88;
  }
  else
  {
    v88 = &qword_25CA118;
    qword_25CA120 = 0;
    unk_25CA128 = 0;
    qword_25CA118 = 0;
    byte_25CA12F = v86 + 5;
    if (!v86) {
      goto LABEL_205;
    }
  }
  if (v85 >= 0) {
    v105 = &qword_25CA100;
  }
  else {
    v105 = (uint64_t *)qword_25CA100;
  }
  memmove(v88, v105, v86);
LABEL_205:
  strcpy((char *)v88 + v86, "_Name");
  int v106 = byte_25C9E47;
  if (byte_25C9E47 >= 0) {
    size_t v107 = byte_25C9E47;
  }
  else {
    size_t v107 = qword_25C9E38;
  }
  int v108 = byte_25C90F7;
  if (byte_25C90F7 >= 0) {
    size_t v109 = byte_25C90F7;
  }
  else {
    size_t v109 = unk_25C90E8;
  }
  unint64_t v110 = v109 + v107;
  if (v109 + v107 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v110 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    v111 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v109 + v107;
    if (!v107) {
      goto LABEL_218;
    }
    goto LABEL_214;
  }
  uint64_t v121 = (v110 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v110 | 7) != 0x17) {
    uint64_t v121 = v110 | 7;
  }
  uint64_t v122 = v121 + 1;
  v111 = (char *)operator new(v121 + 1);
  __dst.__r_.__value_.__l.__size_ = v109 + v107;
  __dst.__r_.__value_.__r.__words[2] = v122 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v111;
  if (v107)
  {
LABEL_214:
    if (v106 >= 0) {
      v112 = &qword_25C9E30;
    }
    else {
      v112 = (uint64_t *)qword_25C9E30;
    }
    memmove(v111, v112, v107);
  }
LABEL_218:
  v113 = &v111[v107];
  if (v109)
  {
    if (v108 >= 0) {
      v114 = &qword_25C90E0;
    }
    else {
      v114 = (uint64_t *)qword_25C90E0;
    }
    memmove(v113, v114, v109);
  }
  v113[v109] = 0;
  v115 = std::string::append(&__dst, "_Connector_Type");
  long long v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
  qword_25CA140 = v115->__r_.__value_.__r.__words[2];
  xmmword_25CA130 = v116;
  v115->__r_.__value_.__l.__size_ = 0;
  v115->__r_.__value_.__r.__words[2] = 0;
  v115->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v117 = SHIBYTE(qword_25CA140);
  if (qword_25CA140 >= 0) {
    size_t v118 = HIBYTE(qword_25CA140);
  }
  else {
    size_t v118 = *((void *)&xmmword_25CA130 + 1);
  }
  unint64_t v119 = v118 + 6;
  if (v118 + 6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v119 >= 0x17)
  {
    uint64_t v123 = (v119 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v119 | 7) != 0x17) {
      uint64_t v123 = v119 | 7;
    }
    uint64_t v124 = v123 + 1;
    v120 = (uint64_t *)operator new(v123 + 1);
    qword_25CA150 = v118 + 6;
    unk_25CA158 = v124 | 0x8000000000000000;
    qword_25CA148 = (uint64_t)v120;
  }
  else
  {
    v120 = &qword_25CA148;
    qword_25CA150 = 0;
    unk_25CA158 = 0;
    qword_25CA148 = 0;
    byte_25CA15F = v118 + 6;
    if (!v118) {
      goto LABEL_243;
    }
  }
  if (v117 >= 0) {
    v125 = &xmmword_25CA130;
  }
  else {
    v125 = (long long *)xmmword_25CA130;
  }
  memmove(v120, v125, v118);
LABEL_243:
  strcpy((char *)v120 + v118, "_Power");
  int v126 = byte_25C9E47;
  if (byte_25C9E47 >= 0) {
    size_t v127 = byte_25C9E47;
  }
  else {
    size_t v127 = qword_25C9E38;
  }
  int v128 = byte_25C90F7;
  if (byte_25C90F7 >= 0) {
    size_t v129 = byte_25C90F7;
  }
  else {
    size_t v129 = unk_25C90E8;
  }
  unint64_t v130 = v129 + v127;
  if (v129 + v127 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v130 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    v131 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v129 + v127;
    if (!v127) {
      goto LABEL_256;
    }
    goto LABEL_252;
  }
  uint64_t v160 = (v130 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v130 | 7) != 0x17) {
    uint64_t v160 = v130 | 7;
  }
  uint64_t v161 = v160 + 1;
  v131 = (char *)operator new(v160 + 1);
  __dst.__r_.__value_.__l.__size_ = v129 + v127;
  __dst.__r_.__value_.__r.__words[2] = v161 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v131;
  if (v127)
  {
LABEL_252:
    if (v126 >= 0) {
      v132 = &qword_25C9E30;
    }
    else {
      v132 = (uint64_t *)qword_25C9E30;
    }
    memmove(v131, v132, v127);
  }
LABEL_256:
  v133 = &v131[v127];
  if (v129)
  {
    if (v128 >= 0) {
      v134 = &qword_25C90E0;
    }
    else {
      v134 = (uint64_t *)qword_25C90E0;
    }
    memmove(v133, v134, v129);
  }
  v133[v129] = 0;
  if (byte_25C98BF >= 0) {
    v135 = (const std::string::value_type *)&qword_25C98A8;
  }
  else {
    v135 = (const std::string::value_type *)qword_25C98A8;
  }
  if (byte_25C98BF >= 0) {
    std::string::size_type v136 = byte_25C98BF;
  }
  else {
    std::string::size_type v136 = unk_25C98B0;
  }
  v137 = std::string::append(&__dst, v135, v136);
  long long v138 = *(_OWORD *)&v137->__r_.__value_.__l.__data_;
  qword_25CA170 = v137->__r_.__value_.__r.__words[2];
  xmmword_25CA160 = v138;
  v137->__r_.__value_.__l.__size_ = 0;
  v137->__r_.__value_.__r.__words[2] = 0;
  v137->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v139 = byte_25C9E47;
  if (byte_25C9E47 >= 0) {
    size_t v140 = byte_25C9E47;
  }
  else {
    size_t v140 = qword_25C9E38;
  }
  int v141 = byte_25C90F7;
  if (byte_25C90F7 >= 0) {
    size_t v142 = byte_25C90F7;
  }
  else {
    size_t v142 = unk_25C90E8;
  }
  unint64_t v143 = v142 + v140;
  if (v142 + v140 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v143 <= 0x16)
  {
    memset(&v283, 0, sizeof(v283));
    v144 = (char *)&v283;
    *((unsigned char *)&v283.__r_.__value_.__s + 23) = v142 + v140;
    if (!v140) {
      goto LABEL_282;
    }
    goto LABEL_278;
  }
  uint64_t v162 = (v143 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v143 | 7) != 0x17) {
    uint64_t v162 = v143 | 7;
  }
  uint64_t v163 = v162 + 1;
  v144 = (char *)operator new(v162 + 1);
  v283.__r_.__value_.__l.__size_ = v142 + v140;
  v283.__r_.__value_.__r.__words[2] = v163 | 0x8000000000000000;
  v283.__r_.__value_.__r.__words[0] = (std::string::size_type)v144;
  if (v140)
  {
LABEL_278:
    if (v139 >= 0) {
      v145 = &qword_25C9E30;
    }
    else {
      v145 = (uint64_t *)qword_25C9E30;
    }
    memmove(v144, v145, v140);
  }
LABEL_282:
  v146 = &v144[v140];
  if (v142)
  {
    if (v141 >= 0) {
      v147 = &qword_25C90E0;
    }
    else {
      v147 = (uint64_t *)qword_25C90E0;
    }
    memmove(v146, v147, v142);
  }
  v146[v142] = 0;
  if (byte_25C9127 >= 0) {
    v148 = (const std::string::value_type *)&qword_25C9110;
  }
  else {
    v148 = (const std::string::value_type *)qword_25C9110;
  }
  if (byte_25C9127 >= 0) {
    std::string::size_type v149 = byte_25C9127;
  }
  else {
    std::string::size_type v149 = *(void *)&byte_25C9118;
  }
  v150 = std::string::append(&v283, v148, v149);
  long long v151 = *(_OWORD *)&v150->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v150->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v151;
  v150->__r_.__value_.__l.__size_ = 0;
  v150->__r_.__value_.__r.__words[2] = 0;
  v150->__r_.__value_.__r.__words[0] = 0;
  if (byte_25C98BF >= 0) {
    v152 = (const std::string::value_type *)&qword_25C98A8;
  }
  else {
    v152 = (const std::string::value_type *)qword_25C98A8;
  }
  if (byte_25C98BF >= 0) {
    std::string::size_type v153 = byte_25C98BF;
  }
  else {
    std::string::size_type v153 = unk_25C98B0;
  }
  v154 = std::string::append(&__dst, v152, v153);
  long long v155 = *(_OWORD *)&v154->__r_.__value_.__l.__data_;
  qword_25CA188 = v154->__r_.__value_.__r.__words[2];
  xmmword_25CA178 = v155;
  v154->__r_.__value_.__l.__size_ = 0;
  v154->__r_.__value_.__r.__words[2] = 0;
  v154->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_301;
    }
  }
  else if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_301;
  }
  operator delete(v283.__r_.__value_.__l.__data_);
LABEL_301:
  byte_25CA1A7 = 16;
  strcpy((char *)&xmmword_25CA190, "Use_NACS_Adapter");
  byte_25CA1BF = 16;
  strcpy(byte_25CA1A8, "Start_Route_Sign");
  qword_25CA1C0 = (uint64_t)operator new(0x20uLL);
  unk_25CA1C8 = v278;
  strcpy((char *)qword_25CA1C0, "Start_Route_Spoken_Primary");
  int v156 = byte_25C8857;
  if (byte_25C8857 >= 0) {
    size_t v157 = byte_25C8857;
  }
  else {
    size_t v157 = qword_25C8848;
  }
  unint64_t v158 = v157 + 27;
  if (v157 + 27 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v158 <= 0x16)
  {
    v159 = &qword_25CA1D8;
    qword_25CA1E0 = 0;
    unk_25CA1E8 = 0;
    qword_25CA1D8 = 0;
    byte_25CA1EF = v157 + 27;
LABEL_318:
    if (v156 >= 0) {
      v166 = &qword_25C8840;
    }
    else {
      v166 = (uint64_t *)qword_25C8840;
    }
    memmove(v159, v166, v157);
    goto LABEL_322;
  }
  uint64_t v164 = (v158 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v158 | 7) != 0x17) {
    uint64_t v164 = v158 | 7;
  }
  uint64_t v165 = v164 + 1;
  v159 = (uint64_t *)operator new(v164 + 1);
  qword_25CA1E0 = v157 + 27;
  unk_25CA1E8 = v165 | 0x8000000000000000;
  qword_25CA1D8 = (uint64_t)v159;
  if (v157) {
    goto LABEL_318;
  }
LABEL_322:
  strcpy((char *)v159 + v157, "Turn_Around_To_Route_Spoken");
  strcpy(&byte_25CA207, "\t_Two_Lanes");
  strcpy((char *)&qword_25CA1F0, "_One_Lane");
  strcpy(&byte_25CA21F, "\n_Three_Lanes");
  byte_25CA237 = 12;
  byte_25CA24F = 11;
  strcpy((char *)&qword_25CA238, "_Four_Lanes");
  byte_25CA267 = 11;
  strcpy((char *)&qword_25CA250, "_Five_Lanes");
  strcpy(&byte_25CA27F, "\n_Seven_Lanes");
  strcpy((char *)&qword_25CA268, "_Six_Lanes");
  byte_25CA297 = 12;
  byte_25CA2AF = 12;
  strcpy((char *)&qword_25CA298, "_Eight_Lanes");
  byte_25CA2C7 = 12;
  strcpy((char *)&qword_25CA2B0, "_Second_Lane");
  byte_25CA2DF = 11;
  strcpy((char *)&qword_25CA2C8, "_Third_Lane");
  byte_25CA2F7 = 19;
  long long v272 = *(_OWORD *)"_Second_Third_Lanes";
  strcpy((char *)&xmmword_25CA2E0, "_Second_Third_Lanes");
  byte_25CA30F = 4;
  strcpy((char *)&dword_25CA2F8, "Left");
  byte_25CA327 = 5;
  byte_25CA314 = 116;
  dword_25CA310 = 1751607634;
  byte_25CA315 = 0;
  byte_25CA33F = 6;
  strcpy((char *)&dword_25CA328, "Middle");
  BYTE1(qword_25CA350) = 0;
  WORD1(qword_25CA350) = 0;
  HIDWORD(qword_25CA350) = 0x10000000;
  strcpy((char *)dword_25CA340, "Left_Second_Lane");
  BYTE1(qword_25CA368) = 0;
  WORD1(qword_25CA368) = 0;
  HIDWORD(qword_25CA368) = 285212672;
  strcpy((char *)&dword_25CA358, "Right_Second_Lan");
  qword_25CA380 = 0xF00000000000000;
  strcpy((char *)&dword_25CA370, "Left_Third_Lane");
  qword_25CA398 = 0x1000000000000000;
  byte_25CA38C = 116;
  dword_25CA388 = 1751607634;
  dword_25CA394 = 1701732684;
  unk_25CA38D = *(void *)"_Third_Lane";
  v167 = (char *)operator new(0x19uLL);
  qword_25CA3A0 = (uint64_t)v167;
  unk_25CA3A8 = v282;
  *(_DWORD *)v167 = 1952867660;
  strcpy(v167 + 19, "anes");
  *(_OWORD *)(v167 + 4) = v272;
  v168 = (char *)operator new(0x20uLL);
  qword_25CA3B8 = (uint64_t)v168;
  xmmword_25CA3C0 = v281;
  *(_DWORD *)v168 = 1751607634;
  v168[4] = 116;
  strcpy(v168 + 20, "anes");
  *(_OWORD *)(v168 + 5) = v272;
  byte_25CA3E7 = 5;
  strcpy((char *)&dword_25CA3D0, "_Stay");
  byte_25CA3FF = 13;
  strcpy((char *)&qword_25CA3E8, "Continue_Sign");
  byte_25CA417 = 8;
  strcpy((char *)&qword_25CA400, "Continue");
  int v169 = byte_25C98D7;
  if (byte_25C98D7 >= 0) {
    size_t v170 = byte_25C98D7;
  }
  else {
    size_t v170 = qword_25C98C8;
  }
  unint64_t v171 = v170 + 8;
  if (v170 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v171 >= 0x17)
  {
    uint64_t v173 = (v171 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v171 | 7) != 0x17) {
      uint64_t v173 = v171 | 7;
    }
    uint64_t v174 = v173 + 1;
    v175 = operator new(v173 + 1);
    qword_25CA420 = v170 + 8;
    qword_25CA428 = v174 | 0x8000000000000000;
    qword_25CA418 = (uint64_t)v175;
    void *v175 = 0x65756E69746E6F43;
    v172 = v175 + 1;
  }
  else
  {
    qword_25CA428 = 0;
    HIBYTE(qword_25CA428) = v170 + 8;
    qword_25CA418 = 0x65756E69746E6F43;
    qword_25CA420 = 0;
    v172 = &qword_25CA420;
    if (!v170) {
      goto LABEL_336;
    }
  }
  if (v169 >= 0) {
    v176 = &qword_25C98C0;
  }
  else {
    v176 = (uint64_t *)qword_25C98C0;
  }
  memmove(v172, v176, v170);
LABEL_336:
  *((unsigned char *)v172 + v170) = 0;
  int v177 = SHIBYTE(qword_25C9930);
  if (qword_25C9930 >= 0) {
    size_t v178 = HIBYTE(qword_25C9930);
  }
  else {
    size_t v178 = unk_25C9928;
  }
  unint64_t v179 = v178 + 8;
  if (v178 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v179 >= 0x17)
  {
    uint64_t v181 = (v179 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v179 | 7) != 0x17) {
      uint64_t v181 = v179 | 7;
    }
    uint64_t v182 = v181 + 1;
    v183 = operator new(v181 + 1);
    qword_25CA438 = v178 + 8;
    qword_25CA440 = v182 | 0x8000000000000000;
    qword_25CA430 = (uint64_t)v183;
    void *v183 = qword_25CA400;
    v180 = v183 + 1;
  }
  else
  {
    qword_25CA440 = 0;
    HIBYTE(qword_25CA440) = v178 + 8;
    qword_25CA430 = qword_25CA400;
    qword_25CA438 = 0;
    v180 = &qword_25CA438;
    if (!v178) {
      goto LABEL_350;
    }
  }
  if (v177 >= 0) {
    v184 = &qword_25C9920;
  }
  else {
    v184 = (uint64_t *)qword_25C9920;
  }
  memmove(v180, v184, v178);
LABEL_350:
  *((unsigned char *)v180 + v178) = 0;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 1;
  LOWORD(__dst.__r_.__value_.__l.__data_) = 83;
  v285[23] = 2;
  strcpy(v285, "SW");
  v287[7] = 1;
  LOWORD(v286[0]) = 87;
  HIBYTE(v288) = 2;
  strcpy(&v287[8], "NW");
  HIBYTE(v290) = 1;
  LOWORD(__p[0]) = 78;
  HIBYTE(v292) = 2;
  strcpy((char *)&v291, "NE");
  HIBYTE(v294) = 1;
  LOWORD(v293) = 69;
  HIBYTE(v296) = 2;
  strcpy((char *)&v295, "SE");
  sub_4BDC0C(qword_25CA448, (uint64_t)&__dst, 8uLL);
  if (SHIBYTE(v296) < 0)
  {
    operator delete((void *)v295);
    if ((SHIBYTE(v294) & 0x80000000) == 0)
    {
LABEL_352:
      if ((SHIBYTE(v292) & 0x80000000) == 0) {
        goto LABEL_353;
      }
      goto LABEL_391;
    }
  }
  else if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
    goto LABEL_352;
  }
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_353:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_354;
    }
    goto LABEL_392;
  }
LABEL_391:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_354:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_355;
    }
    goto LABEL_393;
  }
LABEL_392:
  operator delete(__p[0]);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_355:
    if ((v287[7] & 0x80000000) == 0) {
      goto LABEL_356;
    }
    goto LABEL_394;
  }
LABEL_393:
  operator delete(*(void **)&v287[8]);
  if ((v287[7] & 0x80000000) == 0)
  {
LABEL_356:
    if ((v285[23] & 0x80000000) == 0) {
      goto LABEL_357;
    }
LABEL_395:
    operator delete(*(void **)v285);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_358;
    }
    goto LABEL_396;
  }
LABEL_394:
  operator delete(v286[0]);
  if ((v285[23] & 0x80000000) != 0) {
    goto LABEL_395;
  }
LABEL_357:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_358;
  }
LABEL_396:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_358:
  byte_25CA477 = 13;
  strcpy((char *)&qword_25CA460, "{instruction}");
  byte_25CA48F = 20;
  strcpy(byte_25CA478, "{primaryInstruction}");
  strcpy((char *)&xmmword_25CA490, "{secondaryInstruction}");
  HIBYTE(word_25CA4A6) = 22;
  qword_25CA4A8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25CA4B0 = v280;
  strcpy((char *)qword_25CA4A8, "{andSecondaryInstruction}");
  qword_25CA4C0 = (uint64_t)operator new(0x20uLL);
  unk_25CA4C8 = v281;
  strcpy((char *)qword_25CA4C0, "{toSecondaryInstruction}");
  byte_25CA4EF = 21;
  strcpy(byte_25CA4D8, "{continueInstruction}");
  qword_25CA4F0 = (uint64_t)operator new(0x20uLL);
  unk_25CA4F8 = v278;
  strcpy((char *)qword_25CA4F0, "{thenSecondaryInstruction}");
  byte_25CA51F = 14;
  strcpy((char *)&qword_25CA508, "{instruction1}");
  byte_25CA537 = 14;
  strcpy((char *)&qword_25CA520, "{instruction2}");
  strcpy(&byte_25CA54F, "\n{nextDistance}");
  strcpy((char *)&qword_25CA538, "{distance}");
  byte_25CA567 = 14;
  byte_25CA57F = 16;
  strcpy(byte_25CA568, "{valid_distance}");
  strcpy(&byte_25CA597, "\n{valid_distance}");
  strcpy((char *)&qword_25CA580, "{distance}");
  byte_25CA5AF = 16;
  byte_25CA5C7 = 15;
  strcpy((char *)&qword_25CA5B0, "{ClimbDistance}");
  byte_25CA5DF = 17;
  strcpy(byte_25CA5C8, "{DescentDistance}");
  byte_25CA5F7 = 13;
  strcpy((char *)&qword_25CA5E0, "{nonBrkSpace}");
  byte_25CA60F = 9;
  strcpy((char *)&qword_25CA5F8, "{newLine}");
  byte_25CA627 = 6;
  word_25CA614 = -24382;
  dword_25CA610 = -1211981630;
  byte_25CA616 = 0;
  byte_25CA63F = 2;
  word_25CA628 = -24382;
  byte_25CA62A = 0;
  byte_25CA657 = 1;
  word_25CA640 = 10;
  byte_25CA66F = 1;
  word_25CA658 = 32;
  byte_25CA687 = 2;
  strcpy((char *)&word_25CA670, "\n\n");
  strcpy(&byte_25CA69F, "\t{TowardShield1}");
  strcpy((char *)&qword_25CA688, "{Shield1}");
  byte_25CA6B7 = 15;
  strcpy(&byte_25CA6CF, "\t{TowardShield2}");
  strcpy((char *)&qword_25CA6B8, "{Shield2}");
  byte_25CA6E7 = 15;
  byte_25CA6FF = 12;
  strcpy((char *)&qword_25CA6E8, "{Direction1}");
  byte_25CA717 = 12;
  strcpy((char *)&qword_25CA700, "{Direction2}");
  byte_25CA72F = 18;
  strcpy((char *)&xmmword_25CA718, "{TowardDirection1}");
  byte_25CA747 = 18;
  strcpy((char *)&xmmword_25CA730, "{TowardDirection2}");
  byte_25CA75F = 7;
  strcpy((char *)&dword_25CA748, "{Icon1}");
  byte_25CA777 = 7;
  strcpy((char *)&dword_25CA760, "{Icon2}");
  byte_25CA778[23] = 14;
  strcpy(byte_25CA778, "{Intersection}");
  byte_25CA7A7 = 6;
  strcpy((char *)&xmmword_25CA790, "{Road}");
  byte_25CA7BF = 7;
  strcpy((char *)&dword_25CA7A8, "{Road1}");
  byte_25CA7D7 = 7;
  strcpy((char *)&xmmword_25CA7C0, "{Road2}");
  strcpy(&byte_25CA7EF, "\n{Freeway}");
  strcpy((char *)&qword_25CA7D8, "{Elevator}");
  strcpy(&byte_25CA807, "\t{Ferry}");
  byte_25CA81F = 7;
  byte_25CA837 = 13;
  strcpy((char *)&xmmword_25CA820, "{ShuttleName}");
  byte_25CA84F = 11;
  strcpy((char *)&xmmword_25CA838, "{Signpost1}");
  byte_25CA867 = 11;
  strcpy((char *)&xmmword_25CA850, "{Signpost2}");
  byte_25CA87F = 12;
  strcpy((char *)&xmmword_25CA868, "{ExitNumber}");
  strcpy(&byte_25CA897, "\t{Name}");
  strcpy((char *)&xmmword_25CA880, "{Address}");
  byte_25CA8AF = 6;
  byte_25CA8C7 = 11;
  strcpy((char *)&xmmword_25CA8B0, "{PlaceName}");
  byte_25CA8DF = 14;
  strcpy((char *)&xmmword_25CA8C8, "{ElevatorName}");
  byte_25CA8F7 = 15;
  strcpy((char *)&xmmword_25CA8E0, "{EscalatorName}");
  byte_25CA90F = 12;
  strcpy((char *)&xmmword_25CA8F8, "{StairsName}");
  strcpy(&byte_25CA927, "\n{BridgeName}");
  strcpy((char *)&xmmword_25CA910, "{RampName}");
  byte_25CA93F = 12;
  byte_25CA957 = 12;
  strcpy((char *)&xmmword_25CA940, "{TunnelName}");
  byte_25CA96F = 13;
  strcpy((char *)&xmmword_25CA958, "{CustomLabel}");
  std::string __dst = *(std::string *)byte_25CA778;
  *(_OWORD *)v285 = xmmword_25CA790;
  *(void *)&v285[16] = unk_25CA7A0;
  *(_OWORD *)v286 = *(_OWORD *)&dword_25CA7A8;
  *(void *)v287 = unk_25CA7B8;
  *(_OWORD *)&v287[8] = xmmword_25CA7C0;
  uint64_t v288 = unk_25CA7D0;
  *(_OWORD *)__p = *(_OWORD *)&qword_25CA7D8;
  uint64_t v290 = unk_25CA7E8;
  uint64_t v292 = unk_25CA800;
  long long v291 = xmmword_25CA7F0;
  long long v293 = *(_OWORD *)&dword_25CA808;
  uint64_t v294 = unk_25CA818;
  uint64_t v296 = unk_25CA830;
  long long v295 = xmmword_25CA820;
  long long v297 = xmmword_25CA838;
  uint64_t v298 = unk_25CA848;
  uint64_t v300 = unk_25CA860;
  long long v299 = xmmword_25CA850;
  long long v301 = xmmword_25CA868;
  long long v303 = xmmword_25CA880;
  uint64_t v302 = unk_25CA878;
  uint64_t v304 = unk_25CA890;
  long long v305 = xmmword_25CA898;
  long long v307 = xmmword_25CA8B0;
  uint64_t v306 = unk_25CA8A8;
  uint64_t v308 = unk_25CA8C0;
  long long v309 = xmmword_25CA8C8;
  long long v311 = xmmword_25CA8E0;
  uint64_t v310 = unk_25CA8D8;
  uint64_t v312 = unk_25CA8F0;
  long long v313 = xmmword_25CA8F8;
  long long v315 = xmmword_25CA910;
  uint64_t v314 = unk_25CA908;
  uint64_t v316 = unk_25CA920;
  long long v317 = xmmword_25CA928;
  long long v319 = xmmword_25CA940;
  uint64_t v318 = unk_25CA938;
  uint64_t v320 = unk_25CA950;
  uint64_t v322 = unk_25CA968;
  long long v321 = xmmword_25CA958;
  sub_4BDC0C(qword_25CA970, (uint64_t)&__dst, 0x15uLL);
  if (SHIBYTE(v322) < 0)
  {
    operator delete((void *)v321);
    if ((SHIBYTE(v320) & 0x80000000) == 0)
    {
LABEL_360:
      if ((SHIBYTE(v318) & 0x80000000) == 0) {
        goto LABEL_361;
      }
      goto LABEL_399;
    }
  }
  else if ((SHIBYTE(v320) & 0x80000000) == 0)
  {
    goto LABEL_360;
  }
  operator delete((void *)v319);
  if ((SHIBYTE(v318) & 0x80000000) == 0)
  {
LABEL_361:
    if ((SHIBYTE(v316) & 0x80000000) == 0) {
      goto LABEL_362;
    }
    goto LABEL_400;
  }
LABEL_399:
  operator delete((void *)v317);
  if ((SHIBYTE(v316) & 0x80000000) == 0)
  {
LABEL_362:
    if ((SHIBYTE(v314) & 0x80000000) == 0) {
      goto LABEL_363;
    }
    goto LABEL_401;
  }
LABEL_400:
  operator delete((void *)v315);
  if ((SHIBYTE(v314) & 0x80000000) == 0)
  {
LABEL_363:
    if ((SHIBYTE(v312) & 0x80000000) == 0) {
      goto LABEL_364;
    }
    goto LABEL_402;
  }
LABEL_401:
  operator delete((void *)v313);
  if ((SHIBYTE(v312) & 0x80000000) == 0)
  {
LABEL_364:
    if ((SHIBYTE(v310) & 0x80000000) == 0) {
      goto LABEL_365;
    }
    goto LABEL_403;
  }
LABEL_402:
  operator delete((void *)v311);
  if ((SHIBYTE(v310) & 0x80000000) == 0)
  {
LABEL_365:
    if ((SHIBYTE(v308) & 0x80000000) == 0) {
      goto LABEL_366;
    }
    goto LABEL_404;
  }
LABEL_403:
  operator delete((void *)v309);
  if ((SHIBYTE(v308) & 0x80000000) == 0)
  {
LABEL_366:
    if ((SHIBYTE(v306) & 0x80000000) == 0) {
      goto LABEL_367;
    }
    goto LABEL_405;
  }
LABEL_404:
  operator delete((void *)v307);
  if ((SHIBYTE(v306) & 0x80000000) == 0)
  {
LABEL_367:
    if ((SHIBYTE(v304) & 0x80000000) == 0) {
      goto LABEL_368;
    }
    goto LABEL_406;
  }
LABEL_405:
  operator delete((void *)v305);
  if ((SHIBYTE(v304) & 0x80000000) == 0)
  {
LABEL_368:
    if ((SHIBYTE(v302) & 0x80000000) == 0) {
      goto LABEL_369;
    }
    goto LABEL_407;
  }
LABEL_406:
  operator delete((void *)v303);
  if ((SHIBYTE(v302) & 0x80000000) == 0)
  {
LABEL_369:
    if ((SHIBYTE(v300) & 0x80000000) == 0) {
      goto LABEL_370;
    }
    goto LABEL_408;
  }
LABEL_407:
  operator delete((void *)v301);
  if ((SHIBYTE(v300) & 0x80000000) == 0)
  {
LABEL_370:
    if ((SHIBYTE(v298) & 0x80000000) == 0) {
      goto LABEL_371;
    }
    goto LABEL_409;
  }
LABEL_408:
  operator delete((void *)v299);
  if ((SHIBYTE(v298) & 0x80000000) == 0)
  {
LABEL_371:
    if ((SHIBYTE(v296) & 0x80000000) == 0) {
      goto LABEL_372;
    }
    goto LABEL_410;
  }
LABEL_409:
  operator delete((void *)v297);
  if ((SHIBYTE(v296) & 0x80000000) == 0)
  {
LABEL_372:
    if ((SHIBYTE(v294) & 0x80000000) == 0) {
      goto LABEL_373;
    }
    goto LABEL_411;
  }
LABEL_410:
  operator delete((void *)v295);
  if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
LABEL_373:
    if ((SHIBYTE(v292) & 0x80000000) == 0) {
      goto LABEL_374;
    }
    goto LABEL_412;
  }
LABEL_411:
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_374:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_375;
    }
    goto LABEL_413;
  }
LABEL_412:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_375:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_376;
    }
    goto LABEL_414;
  }
LABEL_413:
  operator delete(__p[0]);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_376:
    if ((v287[7] & 0x80000000) == 0) {
      goto LABEL_377;
    }
    goto LABEL_415;
  }
LABEL_414:
  operator delete(*(void **)&v287[8]);
  if ((v287[7] & 0x80000000) == 0)
  {
LABEL_377:
    if ((v285[23] & 0x80000000) == 0) {
      goto LABEL_378;
    }
LABEL_416:
    operator delete(*(void **)v285);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_379;
    }
    goto LABEL_417;
  }
LABEL_415:
  operator delete(v286[0]);
  if ((v285[23] & 0x80000000) != 0) {
    goto LABEL_416;
  }
LABEL_378:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_379;
  }
LABEL_417:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_379:
  qword_25CA988 = (uint64_t)operator new(0x19uLL);
  unk_25CA990 = v282;
  strcpy((char *)qword_25CA988, "From_User_Location_List");
  byte_25CA9B7 = 20;
  strcpy(byte_25CA9A0, "Origin_Waypoint_List");
  qword_25CA9B8 = (uint64_t)operator new(0x20uLL);
  unk_25CA9C0 = v278;
  strcpy((char *)qword_25CA9B8, "Intermediate_Waypoint_List");
  unk_25CA9D0 = operator new(0x20uLL);
  unk_25CA9D8 = v280;
  strcpy(unk_25CA9D0, "Destination_Waypoint_List");
  byte_25CA9FF = 15;
  strcpy(byte_25CA9E8, "{toDestination}");
  byte_25CAA17 = 13;
  strcpy((char *)&xmmword_25CAA00, "{Destination}");
  byte_25CAA2F = 7;
  strcpy(byte_25CAA18, "To_Home");
  byte_25CAA47 = 14;
  strcpy(byte_25CAA30, "To_ContactHome");
  byte_25CAA5F = 7;
  strcpy(byte_25CAA48, "To_Work");
  byte_25CAA77 = 14;
  strcpy(byte_25CAA60, "To_ContactWork");
  strcpy(&byte_25CAA8F, "\nTo_Business");
  strcpy(byte_25CAA78, "To_Address");
  byte_25CAAA7 = 11;
  byte_25CAABF = 16;
  strcpy(byte_25CAAA8, "To_Other_Contact");
  strcpy(&byte_25CAAD7, "\tTo_ContactSchool");
  strcpy(byte_25CAAC0, "To_School");
  byte_25CAAEF = 16;
  byte_25CAB07 = 17;
  strcpy(algn_25CAAF0, "To_PersonLocation");
  qword_25CAB08 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25CAB10 = v279;
  strcpy((char *)qword_25CAB08, "To_ContactCustomLabelAddress");
  byte_25CAB37 = 7;
  strcpy((char *)&dword_25CAB20, "At_Home");
  byte_25CAB4F = 14;
  strcpy((char *)&qword_25CAB38, "At_ContactHome");
  byte_25CAB67 = 7;
  strcpy((char *)&dword_25CAB50, "At_Work");
  byte_25CAB7F = 14;
  strcpy((char *)&qword_25CAB68, "At_ContactWork");
  strcpy(&byte_25CAB97, "\nAt_Business");
  strcpy((char *)&qword_25CAB80, "At_Address");
  byte_25CABAF = 11;
  byte_25CABC7 = 16;
  strcpy(algn_25CABB0, "At_Other_Contact");
  byte_25CABDF = 4;
  strcpy((char *)&dword_25CABC8, "Home");
  byte_25CABF7 = 11;
  strcpy((char *)&qword_25CABE0 + 7, "Home");
  qword_25CABE0 = *(void *)&v265[16];
  byte_25CAC0F = 4;
  strcpy((char *)&dword_25CABF8, "Work");
  byte_25CAC27 = 11;
  strcpy((char *)&qword_25CAC10 + 7, "Work");
  qword_25CAC10 = *(void *)v265;
  byte_25CAC3F = 7;
  strcpy((char *)&dword_25CAC28, "Address");
  byte_25CAC57 = 8;
  strcpy((char *)&qword_25CAC40, "Business");
  byte_25CAC6F = 13;
  qword_25CAC58 = *(void *)&v265[48];
  *(uint64_t *)((char *)&qword_25CAC58 + 5) = *(void *)&v265[32];
  byte_25CAC65 = 0;
  byte_25CAC87 = 6;
  strcpy((char *)&dword_25CAC70, "School");
  byte_25CAC9F = 13;
  strcpy((char *)&qword_25CAC88, "ContactSchool");
  byte_25CACB7 = 14;
  strcpy((char *)&qword_25CACA0, "PersonLocation");
  qword_25CACB8 = (uint64_t)operator new(0x20uLL);
  xmmword_25CACC0 = v280;
  strcpy((char *)qword_25CACB8, "ContactCustomLabelAddress");
  if (byte_25CAA17 < 0)
  {
    sub_4200(&xmmword_25CACD0, (void *)xmmword_25CAA00, *((unint64_t *)&xmmword_25CAA00 + 1));
  }
  else
  {
    xmmword_25CACD0 = xmmword_25CAA00;
    qword_25CACE0 = unk_25CAA10;
  }
  byte_25CACFF = 16;
  strcpy((char *)&xmmword_25CACE8, "{PrevExitNumber}");
  byte_25CAD17 = 10;
  strcpy((char *)&qword_25CAD00, "{PrevRoad}");
  qword_25CAD18 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25CAD20 = v281;
  strcpy((char *)qword_25CAD18, "{RouteTotalExpectedTime}");
  byte_25CAD47 = 18;
  strcpy(&algn_25CAD20[16], "{ChargePercentage}");
  qword_25CAD48 = (uint64_t)operator new(0x20uLL);
  unk_25CAD50 = v275;
  strcpy((char *)qword_25CAD48, "{RemainingChargePercentage}");
  byte_25CAD77 = 16;
  strcpy(byte_25CAD60, "{ChargeDuration}");
  byte_25CAD8F = 15;
  strcpy((char *)&qword_25CAD78, "{ConnectorType}");
  byte_25CADA7 = 19;
  strcpy(byte_25CAD90, "{ChargeStationName}");
  byte_25CADBF = 7;
  strcpy((char *)&dword_25CADA8, "{Power}");
  byte_25CADD7 = 13;
  strcpy((char *)&qword_25CADC0, "{VehicleName}");
  byte_25CADEF = 18;
  strcpy((char *)&xmmword_25CADD8, "{AreaIncidentName}");
  byte_25CAE07 = 14;
  strcpy((char *)&qword_25CADF0, "{AreaIncident}");
  byte_25CAE1F = 16;
  strcpy((char *)&xmmword_25CAE08, "{AffectedRegion}");
  byte_25CAE37 = 21;
  strcpy(byte_25CAE20, "{AreaIncidentWeblink}");
  byte_25CAE4F = 20;
  strcpy((char *)&xmmword_25CAE38, "{AreaIncidentAgency}");
  byte_25CAE67 = 11;
  strcpy((char *)&qword_25CAE50, "{IssueTime}");
  byte_25CAE7F = 12;
  strcpy((char *)&qword_25CAE68, "{UpdateTime}");
  byte_25CAE97 = 11;
  strcpy((char *)&qword_25CAE80, "{IssueDate}");
  byte_25CAEAF = 12;
  strcpy((char *)&qword_25CAE98, "{UpdateDate}");
  qword_25CAEB0 = (uint64_t)operator new(0x20uLL);
  unk_25CAEB8 = v281;
  strcpy((char *)qword_25CAEB0, "{AreaIncidentDataSource}");
  byte_25CAEDF = 13;
  strcpy((char *)&qword_25CAEC8, "{AreaHectare}");
  byte_25CAEF7 = 10;
  strcpy((char *)&qword_25CAEE0, "{AreaAcre}");
  qword_25CAEF8 = (uint64_t)operator new(0x20uLL);
  unk_25CAF00 = v277;
  strcpy((char *)qword_25CAEF8, "{WildfirePercentageContained}");
  qword_25CAF10 = (uint64_t)operator new(0x28uLL);
  unk_25CAF18 = v269[1];
  strcpy((char *)qword_25CAF10, "{WildfireExpectedContainmentDate}");
  qword_25CAF28 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25CAF30 = v279;
  strcpy((char *)qword_25CAF28, "{ServerRecommendedRouteName}");
  qword_25CAF40 = (uint64_t)operator new(0x20uLL);
  unk_25CAF48 = v279;
  strcpy((char *)qword_25CAF40, "{ServerNonRecommendedRoute1}");
  qword_25CAF58 = (uint64_t)operator new(0x20uLL);
  unk_25CAF60 = v279;
  strcpy((char *)qword_25CAF58, "{ServerNonRecommendedRoute2}");
  byte_25CAF87 = 12;
  strcpy((char *)&qword_25CAF70, "{ClientDest}");
  byte_25CAF9F = 6;
  strcpy((char *)&dword_25CAF88, "{Name}");
  qword_25CAFA0 = (uint64_t)operator new(0x20uLL);
  unk_25CAFA8 = v271;
  strcpy((char *)qword_25CAFA0, "ProactiveAlert_FasterRouteTitle");
  qword_25CAFB8 = (uint64_t)operator new(0x20uLL);
  unk_25CAFC0 = v278;
  strcpy((char *)qword_25CAFB8, "ProactiveAlert_RoadClosure");
  qword_25CAFD0 = (uint64_t)operator new(0x30uLL);
  unk_25CAFD8 = v273;
  strcpy((char *)qword_25CAFD0, "ProactiveAlert_UnusuallyHeavyTrafficOnTwo");
  qword_25CAFE8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25CAFF0 = v276;
  strcpy((char *)qword_25CAFE8, "ProactiveAlert_FasterRouteTitle_to_Home");
  qword_25CB000 = (uint64_t)operator new(0x28uLL);
  unk_25CB008 = v276;
  strcpy((char *)qword_25CB000, "ProactiveAlert_FasterRouteTitle_to_Work");
  qword_25CB018 = (uint64_t)operator new(0x28uLL);
  unk_25CB020 = v276;
  strcpy((char *)qword_25CB018, "ProactiveAlert_FasterRouteTitle_to_Name");
  qword_25CB030 = (uint64_t)operator new(0x30uLL);
  unk_25CB038 = xmmword_20B93B0;
  strcpy((char *)qword_25CB030, "ProactiveAlert_FasterRouteTitle_to_StreetName");
  byte_25CB05F = 17;
  strcpy(byte_25CB048, "Proactive_Driving");
  strcpy(&byte_25CB077, "\n{RouteName}");
  strcpy((char *)&qword_25CB060, "_RouteName");
  byte_25CB08F = 11;
  qword_25CB090 = (uint64_t)operator new(0x28uLL);
  unk_25CB098 = v269[1];
  strcpy((char *)qword_25CB090, "Pass_Traffic_Light_Spoken_Primary");
  qword_25CB0A8 = (uint64_t)operator new(0x20uLL);
  unk_25CB0B0 = v277;
  strcpy((char *)qword_25CB0A8, "Pass_Stop_Sign_Spoken_Primary");
  unk_25CB0C0 = operator new(0x20uLL);
  unk_25CB0C8 = v269[0];
  strcpy(unk_25CB0C0, "Pass_Roundabout_Spoken_Primary");
  strcpy(&byte_25CB0EF, "\nBannerBody");
  strcpy(byte_25CB0D8, "BannerHead");
  strcpy(&byte_25CB107, "\nBannerDescription");
  byte_25CB11F = 17;
  strcpy(&byte_25CB137, "\n_Incident");
  strcpy((char *)&qword_25CB120, "VoiceAlert");
  strcpy(&byte_25CB14F, "\t_Area_Incident");
  byte_25CB167 = 14;
  byte_25CB17F = 15;
  strcpy((char *)&qword_25CB168, "_Area_Incidents");
  strcpy(&byte_25CB197, "\t_Crash");
  strcpy((char *)&qword_25CB180, "_Accident");
  byte_25CB1AF = 6;
  byte_25CB1C7 = 16;
  strcpy((char *)&xmmword_25CB1B0, "_Congestion_Zone");
  strcpy(&byte_25CB1DF, "\n_Environmental_Zone");
  strcpy((char *)&qword_25CB1C8, "_Toll_Zone");
  byte_25CB1F7 = 19;
  BYTE1(qword_25CB208) = 116;
  WORD1(qword_25CB208) = 0;
  HIDWORD(qword_25CB208) = 301989888;
  strcpy(byte_25CB210, "_Construction");
  strcpy((char *)&qword_25CB1F8, "_Incident_Accide");
  byte_25CB227 = 13;
  byte_25CB23F = 7;
  strcpy((char *)&dword_25CB228, "_Hazard");
  byte_25CB257 = 12;
  strcpy((char *)&qword_25CB240, "_LaneClosure");
  byte_25CB26F = 12;
  strcpy((char *)&qword_25CB258, "_LaneTrailer");
  qmemcpy(&byte_25CB287, "\t_LaneTrailer", 13);
  strcpy((char *)&qword_25CB270, "_Shoulder");
  qword_25CB298 = 0x1500007200000000;
  *(void *)algn_25CB294 = *(void *)"_Shoulder";
  strcpy((char *)&xmmword_25CB2A0, "_Causing_Traffic_Delay");
  HIBYTE(word_25CB2B6) = 22;
  byte_25CB2CF = 6;
  strcpy((char *)&dword_25CB2B8, "_Timed");
  byte_25CB2E7 = 12;
  strcpy((char *)&qword_25CB2D0, "_HasDistance");
  byte_25CB2FF = 8;
  strcpy((char *)&qword_25CB2E8, "_Closure");
  strcpy(&byte_25CB317, "\n_BadRoad");
  strcpy((char *)&qword_25CB300, "_NoReroute");
  byte_25CB32F = 8;
  byte_25CB347 = 12;
  strcpy((char *)&qword_25CB330, "_TollTrailer");
  byte_25CB35F = 12;
  strcpy((char *)&qword_25CB348, "_BestTrailer");
  byte_25CB377 = 8;
  strcpy((char *)&qword_25CB360, "_Trailer");
  byte_25CB38F = 18;
  strcpy((char *)&xmmword_25CB378, "_Secondary_Trailer");
  byte_25CB3A7 = 8;
  strcpy((char *)&qword_25CB390, "_Savings");
  byte_25CB3BF = 8;
  strcpy((char *)&qword_25CB3A8, "_AltRoad");
  byte_25CB3D7 = 6;
  strcpy((char *)&dword_25CB3C0, "_Named");
  byte_25CB3EF = 6;
  strcpy((char *)&dword_25CB3D8, "_NAMED");
  byte_25CB407 = 22;
  strcpy((char *)&xmmword_25CB3F0, "_Named_Suggested_Route");
  qword_25CB420 = 0x1000000000000000;
  xmmword_25CB410 = xmmword_20E81D0;
  byte_25CB43F = 11;
  strcpy((char *)&qword_25CB428, "_Speed_Trap");
  byte_25CB457 = 4;
  strcpy((char *)&dword_25CB440, "_UGI");
  byte_25CB46F = 12;
  strcpy((char *)&qword_25CB458, "_Safer_Route");
  qword_25CB470 = (uint64_t)operator new(0x20uLL);
  unk_25CB478 = v271;
  strcpy((char *)qword_25CB470, "BlockedRouteByBlockingIncident_");
  qword_25CB488 = (uint64_t)operator new(0x28uLL);
  long long v272 = xmmword_20B9280;
  *(_OWORD *)algn_25CB490 = xmmword_20B9280;
  strcpy((char *)qword_25CB488, "BlockedRouteByManeuverRestriction_");
  qword_25CB4A0 = (uint64_t)operator new(0x20uLL);
  unk_25CB4A8 = v269[0];
  strcpy((char *)qword_25CB4A0, "BlockedRouteByTimeRestriction_");
  qword_25CB4B8 = (uint64_t)operator new(0x28uLL);
  unk_25CB4C0 = xmmword_20B8FD0;
  strcpy((char *)qword_25CB4B8, "SuggestRouteToAvoidBlockingIncident_");
  qword_25CB4D0 = (uint64_t)operator new(0x30uLL);
  unk_25CB4D8 = xmmword_20B9380;
  strcpy((char *)qword_25CB4D0, "SuggestRouteToAvoidBlockingManeuverRestriction_");
  qword_25CB4E8 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_25CB4F0 = xmmword_20B93E0;
  strcpy((char *)qword_25CB4E8, "SuggestRouteToAvoidBlockingTimeRestriction_");
  byte_25CB517 = 1;
  word_25CB500 = 95;
  strcpy((char *)&xmmword_25CB518, "IncidentsCausingDelay_");
  HIBYTE(word_25CB52E) = 22;
  qword_25CB530 = (uint64_t)operator new(0x19uLL);
  unk_25CB538 = v282;
  strcpy((char *)qword_25CB530, "NonVotableRoadIncident_");
  byte_25CB55F = 20;
  strcpy(byte_25CB548, "VotableRoadIncident_");
  byte_25CB577 = 13;
  strcpy((char *)&qword_25CB560, "AreaIncident_");
  byte_25CB58F = 15;
  strcpy((char *)&qword_25CB578, "CongestionZone_");
  qword_25CB590 = (uint64_t)operator new(0x20uLL);
  unk_25CB598 = v281;
  strcpy((char *)qword_25CB590, "EVModifiedChargingStops_");
  byte_25CB5BF = 13;
  strcpy((char *)&qword_25CB5A8, "EVDisconnect_");
  byte_25CB5D7 = 12;
  strcpy((char *)&qword_25CB5C0, "EVReconnect_");
  qword_25CB5D8 = (uint64_t)operator new(0x20uLL);
  unk_25CB5E0 = v279;
  strcpy((char *)qword_25CB5D8, "EVOfflineToOnlineTransition_");
  byte_25CB607 = 13;
  strcpy((char *)&qword_25CB5F0, "EVOfflineSAR_");
  byte_25CB61F = 21;
  strcpy((char *)&xmmword_25CB608, "EVTowingNotSupported_");
  byte_25CB637 = 18;
  strcpy(byte_25CB620, "EVInfeasibleRoute_");
  qword_25CB638 = (uint64_t)operator new(0x38uLL);
  unk_25CB640 = xmmword_20B8DF0;
  strcpy((char *)qword_25CB638, "SuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_25CB650 = (uint64_t)operator new(0x40uLL);
  unk_25CB658 = xmmword_20B98C0;
  strcpy((char *)qword_25CB650, "LCSuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_25CB668 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_25CB670 = v274;
  strcpy((char *)qword_25CB668, "SuggestRouteAddingStopsForEVInfeasibleRoute_");
  qmemcpy(v269, "InfeasibleRoute_ngStopsForEVInfe", sizeof(v269));
  qword_25CB680 = (uint64_t)operator new(0x30uLL);
  *(_WORD *)&v265[50] = 0;
  *(_DWORD *)&v265[52] = 0;
  *(void *)&v265[56] = 0x8000000000000030;
  unk_25CB688 = xmmword_20B9A80;
  strcpy((char *)qword_25CB680, "LCSuggestRouteAddingStopsForEVInfeasibleRoute_");
  strcpy(v265, "InfeasibleRoute_dingStopsForEVInLCSuggestRouteAd.");
  qword_25CB698 = (uint64_t)operator new(0x30uLL);
  unk_25CB6A0 = v273;
  strcpy((char *)qword_25CB698, "SuggestRouteAddingStopsToIncreaseDestSoc_");
  v185 = operator new(0x30uLL);
  qword_25CB6B0 = (uint64_t)v185;
  unk_25CB6B8 = v274;
  _OWORD *v185 = *(_OWORD *)"SuggestRouteAddingStopsForEVInfeasibleRoute_";
  v185[1] = v269[1];
  *(_OWORD *)((char *)v185 + 28) = v269[0];
  *((unsigned char *)v185 + 44) = 0;
  qword_25CB6C8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25CB6D0 = v272;
  strcpy((char *)qword_25CB6C8, "SuggestDetourWithHigherArrivalSOC_");
  v186 = operator new(0x30uLL);
  qword_25CB6E0 = (uint64_t)v186;
  unk_25CB6E8 = *(_OWORD *)&v265[48];
  _OWORD *v186 = *(_OWORD *)&v265[32];
  v186[1] = *(_OWORD *)&v265[16];
  *(_OWORD *)((char *)v186 + 30) = *(_OWORD *)v265;
  *((unsigned char *)v186 + 46) = 0;
  qword_25CB6F8 = (uint64_t)operator new(0x28uLL);
  unk_25CB700 = v276;
  strcpy((char *)qword_25CB6F8, "SuggestRouteToDestForEVInfeasibleRoute_");
  qword_25CB710 = (uint64_t)operator new(0x28uLL);
  unk_25CB718 = v268;
  strcpy((char *)qword_25CB710, "SuggestRouteRemovingStopsFromEVRoute_");
  qword_25CB728 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25CB730 = v281;
  strcpy((char *)qword_25CB728, "OfflineToOnlineNewRoute_");
  qword_25CB740 = (uint64_t)operator new(0x40uLL);
  unk_25CB748 = xmmword_20B98C0;
  strcpy((char *)qword_25CB740, "SuggestDetourWithHigherArrivalSOCForInfeasibleUserRoute_");
  byte_25CB76F = 20;
  strcpy(byte_25CB758, "LPR_OFFLINE_REROUTE_");
  byte_25CB787 = 16;
  strcpy((char *)&xmmword_25CB770, "LPR_OFFLINE_SAR_");
  byte_25CB79F = 20;
  strcpy(byte_25CB788, "LPR_OFFLINE_REROUTE_");
  byte_25CB7B7 = 16;
  strcpy((char *)&xmmword_25CB7A0, "LPR_OFFLINE_SAR_");
  byte_25CB7CF = 19;
  strcpy(byte_25CB7B8, "SuggestFasterRoute_");
  qword_25CB7D0 = (char *)operator new(0x20uLL);
  xmmword_25CB7D8 = v280;
  strcpy(qword_25CB7D0, "AreaIncidentSaferReroute_");
  byte_25CB7FF = 12;
  strcpy((char *)&qword_25CB7E8, "_Remove_Stop");
  byte_25CB817 = 13;
  strcpy((char *)&qword_25CB800, "_Remove_Stops");
  strcpy(&byte_25CB82F, "\t_Add_Stops");
  strcpy((char *)&qword_25CB818, "_Add_Stop");
  strcpy(&byte_25CB847, "\n_Change_Route");
  byte_25CB85F = 13;
  byte_25CB877 = 15;
  strcpy((char *)&qword_25CB860, "_Different_Stop");
  byte_25CB88F = 16;
  strcpy((char *)&xmmword_25CB878, "_Different_Stops");
  byte_25CB8A7 = 15;
  strcpy((char *)&qword_25CB890, "_EV_Remove_Stop");
  byte_25CB8BF = 16;
  strcpy((char *)&xmmword_25CB8A8, "_EV_Remove_Stops");
  byte_25CB8D7 = 12;
  strcpy((char *)&qword_25CB8C0, "_EV_Add_Stop");
  byte_25CB8EF = 13;
  strcpy((char *)&qword_25CB8D8, "_EV_Add_Stops");
  byte_25CB907 = 15;
  strcpy((char *)&qword_25CB8F0, "_EV_Low_Battery");
  byte_25CB91F = 14;
  strcpy((char *)&qword_25CB908, "_EV_Infeasible");
  byte_25CB937 = 15;
  strcpy((char *)&qword_25CB920, "_EV_Last_Chance");
  qword_25CB938 = (uint64_t)operator new(0x20uLL);
  unk_25CB940 = v281;
  strcpy((char *)qword_25CB938, "_EV_Low_Battery_Add_Stop");
  uint64_t v187 = qword_25CB838;
  qword_25CB950 = (uint64_t)operator new(0x20uLL);
  unk_25CB958 = v280;
  strcpy((char *)qword_25CB950, "_EV_Low_Battery_Add_Stops");
  qword_25CB968 = (uint64_t)operator new(0x19uLL);
  *(_OWORD *)algn_25CB970 = v282;
  strcpy((char *)qword_25CB968, "_EV_Infeasible_Add_Stop");
  int v188 = byte_25CB847;
  if (byte_25CB847 >= 0) {
    size_t v189 = byte_25CB847;
  }
  else {
    size_t v189 = v187;
  }
  unint64_t v190 = v189 + 14;
  if (v189 + 14 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v190 >= 0x17)
  {
    uint64_t v193 = (v190 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v190 | 7) != 0x17) {
      uint64_t v193 = v190 | 7;
    }
    uint64_t v194 = v193 + 1;
    v195 = (char *)operator new(v193 + 1);
    qword_25CB988 = v189 + 14;
    unk_25CB990 = v194 | 0x8000000000000000;
    qword_25CB980 = (uint64_t)v195;
    qmemcpy(v195, "_EV_Infeasible", 14);
    v191 = v195 + 14;
  }
  else
  {
    BYTE1(qword_25CB988) = 0;
    WORD1(qword_25CB988) = 0;
    HIDWORD(qword_25CB988) = 0;
    unk_25CB990 = 0;
    byte_25CB997 = v189 + 14;
    strcpy((char *)&qword_25CB980, "_EV_Infe");
    v191 = (char *)&qword_25CB988 + 6;
    if (!v189)
    {
      char v192 = 1;
      goto LABEL_433;
    }
  }
  if (v188 >= 0) {
    uint64_t v196 = (uint64_t)&qword_25CB830;
  }
  else {
    uint64_t v196 = 0x6F74535F6464415FLL;
  }
  memmove(v191, (const void *)v196, v189);
  char v192 = 0;
LABEL_433:
  v191[v189] = 0;
  v197 = (char *)operator new(0x20uLL);
  qword_25CB998 = (uint64_t)v197;
  unk_25CB9A0 = v281;
  *(void *)v197 = qword_25CB920;
  *(void *)(v197 + 7) = *(uint64_t *)((char *)&qword_25CB920 + 7);
  *(void *)(v197 + 15) = qword_25CB818;
  v197[23] = word_25CB820;
  v197[24] = 0;
  unint64_t v198 = v189 + 15;
  if (v189 + 15 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v198 > 0x16)
  {
    uint64_t v200 = (v198 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v198 | 7) != 0x17) {
      uint64_t v200 = v198 | 7;
    }
    uint64_t v201 = v200 + 1;
    v199 = (uint64_t *)operator new(v200 + 1);
    qword_25CB9B8 = v189 + 15;
    unk_25CB9C0 = v201 | 0x8000000000000000;
    qword_25CB9B0 = (uint64_t)v199;
  }
  else
  {
    v199 = &qword_25CB9B0;
    qword_25CB9B8 = 0;
    unk_25CB9C0 = 0;
    qword_25CB9B0 = 0;
    byte_25CB9C7 = v189 + 15;
  }
  uint64_t *v199 = qword_25CB920;
  *(uint64_t *)((char *)v199 + 7) = *(uint64_t *)((char *)&qword_25CB920 + 7);
  v202 = (char *)v199 + 15;
  if ((v192 & 1) == 0)
  {
    if (v188 >= 0) {
      v203 = &qword_25CB830;
    }
    else {
      v203 = (uint64_t *)qword_25CB830;
    }
    memmove((char *)v199 + 15, v203, v189);
  }
  v202[v189] = 0;
  byte_25CB9DF = 17;
  strcpy((char *)&xmmword_25CB9C8, "_EV_Forced_Detour");
  qword_25CB9E0 = (uint64_t)operator new(0x20uLL);
  unk_25CB9E8 = v280;
  strcpy((char *)qword_25CB9E0, "_EV_Higher_Arrival_Charge");
  qword_25CB9F8 = (uint64_t)operator new(0x28uLL);
  unk_25CBA00 = xmmword_20B8FD0;
  strcpy((char *)qword_25CB9F8, "_EV_Infeasible_Higher_Arrival_Charge");
  byte_25CBA27 = 16;
  strcpy(byte_25CBA10, "_EV_Out_Of_Range");
  qword_25CBA28 = (uint64_t)operator new(0x20uLL);
  unk_25CBA30 = v275;
  strcpy((char *)qword_25CBA28, "_EV_Last_Chance_Take_Detour");
  strcpy(byte_25CBA40, "_EV_Forced_Modify_Stop");
  HIBYTE(word_25CBA56) = 22;
  qword_25CBA58 = (uint64_t)operator new(0x19uLL);
  unk_25CBA60 = v282;
  strcpy((char *)qword_25CBA58, "_EV_Forced_Modify_Stops");
  byte_25CBA87 = 19;
  strcpy(byte_25CBA70, "_EV_Forced_Add_Stop");
  byte_25CBA9F = 20;
  strcpy((char *)&xmmword_25CBA88, "_EV_Forced_Add_Stops");
  byte_25CBAB7 = 21;
  strcpy(byte_25CBAA0, "_EV_Battery_Info_Lost");
  qword_25CBAB8 = (uint64_t)operator new(0x20uLL);
  unk_25CBAC0 = v280;
  strcpy((char *)qword_25CBAB8, "_EV_Battery_Info_Restored");
  qword_25CBAD0 = (uint64_t)operator new(0x20uLL);
  unk_25CBAD8 = v281;
  strcpy((char *)qword_25CBAD0, "_EV_Towing_Not_Supported");
  qword_25CBAE8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25CBAF0 = v270;
  strcpy((char *)qword_25CBAE8, "_EV_Offline_to_Online_Transition");
  byte_25CBB17 = 15;
  strcpy((char *)&qword_25CBB00, "_EV_Offline_SAR");
  qword_25CBB18 = (uint64_t)operator new(0x20uLL);
  unk_25CBB20 = v279;
  strcpy((char *)qword_25CBB18, "_Offline_to_Online_New_Route");
  byte_25CBB47 = 12;
  strcpy((char *)&qword_25CBB30, "BannerButton");
  byte_25CBB5F = 8;
  strcpy((char *)&qword_25CBB48, "_Dismiss");
  byte_25CBB77 = 3;
  word_25CBB60 = 20319;
  byte_25CBB62 = 75;
  byte_25CBB63 = 0;
  byte_25CBB8F = 11;
  strcpy((char *)&qword_25CBB78, "_Still_Here");
  byte_25CBBA7 = 8;
  strcpy((char *)&qword_25CBB90, "_Cleared");
  qmemcpy(&byte_25CBBBF, "\nBannerButton", 13);
  strcpy((char *)&qword_25CBBA8, "_No_Thanks");
  uint64_t v204 = qword_25CBB38;
  qword_25CBBD0 = 0x1400000000000000;
  *(void *)algn_25CBBCC = 0x7373696D7369445FLL;
  qword_25CBBE8 = 0xF00000000000000;
  qword_25CBBE0 = 0x4B4F5F6E6F7474;
  int v205 = byte_25CB8D7;
  if (byte_25CB8D7 >= 0) {
    size_t v206 = byte_25CB8D7;
  }
  else {
    size_t v206 = qword_25CB8C8;
  }
  unint64_t v207 = v206 + 12;
  qword_25CBBD8 = *(void *)"BannerButton";
  if (v206 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v207 >= 0x17)
  {
    uint64_t v209 = (v207 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v207 | 7) != 0x17) {
      uint64_t v209 = v207 | 7;
    }
    uint64_t v210 = v209 + 1;
    v211 = (char *)operator new(v209 + 1);
    qword_25CBBF8 = v206 + 12;
    unk_25CBC00 = v210 | 0x8000000000000000;
    qword_25CBBF0 = (uint64_t)v211;
    *((_DWORD *)v211 + 2) = 1852798068;
    *(void *)v211 = *(void *)"BannerButton";
    v208 = v211 + 12;
  }
  else
  {
    BYTE5(qword_25CBBF8) = 0;
    HIWORD(qword_25CBBF8) = 0;
    unk_25CBC00 = 0;
    byte_25CBC07 = v206 + 12;
    strcpy((char *)&qword_25CBBF0, "BannerButton");
    v208 = (char *)&qword_25CBBF8 + 4;
    if (!v206) {
      goto LABEL_458;
    }
  }
  if (v205 >= 0) {
    v212 = &qword_25CB8C0;
  }
  else {
    v212 = (uint64_t *)qword_25CB8C0;
  }
  memmove(v208, v212, v206);
LABEL_458:
  v208[v206] = 0;
  int v213 = byte_25CB8EF;
  if (byte_25CB8EF >= 0) {
    size_t v214 = byte_25CB8EF;
  }
  else {
    size_t v214 = unk_25CB8E0;
  }
  unint64_t v215 = v214 + 12;
  if (v214 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v215 >= 0x17)
  {
    uint64_t v217 = (v215 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v215 | 7) != 0x17) {
      uint64_t v217 = v215 | 7;
    }
    uint64_t v218 = v217 + 1;
    v219 = (char *)operator new(v217 + 1);
    qword_25CBC10 = v214 + 12;
    unk_25CBC18 = v218 | 0x8000000000000000;
    qword_25CBC08 = (uint64_t)v219;
    *(void *)v219 = qword_25CBB30;
    *((_DWORD *)v219 + 2) = qword_25CBB38;
    v216 = v219 + 12;
  }
  else
  {
    qword_25CBC10 = 0;
    unk_25CBC18 = 0;
    byte_25CBC1F = v214 + 12;
    LODWORD(qword_25CBC10) = qword_25CBB38;
    qword_25CBC08 = qword_25CBB30;
    v216 = (char *)&qword_25CBC10 + 4;
    if (!v214) {
      goto LABEL_472;
    }
  }
  if (v213 >= 0) {
    v220 = &qword_25CB8D8;
  }
  else {
    v220 = (uint64_t *)qword_25CB8D8;
  }
  memmove(v216, v220, v214);
LABEL_472:
  v216[v214] = 0;
  int v221 = byte_25CB8A7;
  if (byte_25CB8A7 >= 0) {
    size_t v222 = byte_25CB8A7;
  }
  else {
    size_t v222 = unk_25CB898;
  }
  unint64_t v223 = v222 + 12;
  if (v222 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v223 >= 0x17)
  {
    uint64_t v225 = (v223 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v223 | 7) != 0x17) {
      uint64_t v225 = v223 | 7;
    }
    uint64_t v226 = v225 + 1;
    v227 = (char *)operator new(v225 + 1);
    qword_25CBC28 = v222 + 12;
    unk_25CBC30 = v226 | 0x8000000000000000;
    qword_25CBC20 = (uint64_t)v227;
    *(void *)v227 = qword_25CBB30;
    *((_DWORD *)v227 + 2) = qword_25CBB38;
    v224 = v227 + 12;
  }
  else
  {
    qword_25CBC28 = 0;
    unk_25CBC30 = 0;
    byte_25CBC37 = v222 + 12;
    LODWORD(qword_25CBC28) = qword_25CBB38;
    qword_25CBC20 = qword_25CBB30;
    v224 = (char *)&qword_25CBC28 + 4;
    if (!v222) {
      goto LABEL_486;
    }
  }
  if (v221 >= 0) {
    v228 = &qword_25CB890;
  }
  else {
    v228 = (uint64_t *)qword_25CB890;
  }
  memmove(v224, v228, v222);
LABEL_486:
  v224[v222] = 0;
  int v229 = byte_25CBB47;
  if (byte_25CBB47 >= 0) {
    size_t v230 = byte_25CBB47;
  }
  else {
    size_t v230 = v204;
  }
  int v231 = byte_25CB8BF;
  if (byte_25CB8BF >= 0) {
    size_t v232 = byte_25CB8BF;
  }
  else {
    size_t v232 = *((void *)&xmmword_25CB8A8 + 1);
  }
  unint64_t v233 = v232 + v230;
  if (v232 + v230 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v233 <= 0x16)
  {
    v234 = &qword_25CBC38;
    qword_25CBC40 = 0;
    unk_25CBC48 = 0;
    qword_25CBC38 = 0;
    byte_25CBC4F = v232 + v230;
    if (!v230) {
      goto LABEL_499;
    }
    goto LABEL_495;
  }
  uint64_t v241 = (v233 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v233 | 7) != 0x17) {
    uint64_t v241 = v233 | 7;
  }
  uint64_t v242 = v241 + 1;
  v234 = (uint64_t *)operator new(v241 + 1);
  qword_25CBC40 = v232 + v230;
  unk_25CBC48 = v242 | 0x8000000000000000;
  qword_25CBC38 = (uint64_t)v234;
  if (v230)
  {
LABEL_495:
    if (v229 >= 0) {
      v235 = &qword_25CBB30;
    }
    else {
      v235 = (uint64_t *)qword_25CBB30;
    }
    memmove(v234, v235, v230);
  }
LABEL_499:
  v236 = (char *)v234 + v230;
  if (v232)
  {
    if (v231 >= 0) {
      v237 = &xmmword_25CB8A8;
    }
    else {
      v237 = (long long *)xmmword_25CB8A8;
    }
    memmove(v236, v237, v232);
  }
  v236[v232] = 0;
  unint64_t v238 = v230 + 11;
  if (v230 + 11 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v238 >= 0x17)
  {
    uint64_t v243 = (v238 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v238 | 7) != 0x17) {
      uint64_t v243 = v238 | 7;
    }
    uint64_t v244 = v243 + 1;
    v239 = (uint64_t *)operator new(v243 + 1);
    qword_25CBC58 = v230 + 11;
    unk_25CBC60 = v244 | 0x8000000000000000;
    qword_25CBC50 = (uint64_t)v239;
  }
  else
  {
    v239 = &qword_25CBC50;
    qword_25CBC58 = 0;
    unk_25CBC60 = 0;
    qword_25CBC50 = 0;
    byte_25CBC67 = v230 + 11;
    if (!v230)
    {
      *(_DWORD *)((char *)&qword_25CBC50 + 7) = *(_DWORD *)((char *)&qword_25CBB78 + 7);
      qword_25CBC50 = qword_25CBB78;
      BYTE3(qword_25CBC58) = 0;
      LOBYTE(v240) = 8;
      goto LABEL_520;
    }
  }
  if (v229 >= 0) {
    v245 = &qword_25CBB30;
  }
  else {
    v245 = (uint64_t *)qword_25CBB30;
  }
  memmove(v239, v245, v230);
  v246 = (char *)v239 + v230;
  int v247 = *(_DWORD *)((char *)&qword_25CBB78 + 7);
  *(void *)v246 = qword_25CBB78;
  *(_DWORD *)(v246 + 7) = v247;
  v246[11] = 0;
  unint64_t v240 = v230 + 8;
  if (v230 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v240 <= 0x16)
  {
LABEL_520:
    v248 = &qword_25CBC68;
    qword_25CBC70 = 0;
    unk_25CBC78 = 0;
    qword_25CBC68 = 0;
    byte_25CBC7F = v240;
    if (!v230) {
      goto LABEL_525;
    }
    goto LABEL_521;
  }
  uint64_t v263 = (v240 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v240 | 7) != 0x17) {
    uint64_t v263 = v240 | 7;
  }
  uint64_t v264 = v263 + 1;
  v248 = (uint64_t *)operator new(v263 + 1);
  qword_25CBC70 = v230 + 8;
  unk_25CBC78 = v264 | 0x8000000000000000;
  qword_25CBC68 = (uint64_t)v248;
  if (v230)
  {
LABEL_521:
    if (v229 >= 0) {
      v249 = &qword_25CBB30;
    }
    else {
      v249 = (uint64_t *)qword_25CBB30;
    }
    memmove(v248, v249, v230);
  }
LABEL_525:
  v250 = (char *)v248 + v230;
  *(void *)v250 = qword_25CBB90;
  v250[8] = 0;
  int v251 = byte_25CBBBF;
  if (byte_25CBBBF >= 0) {
    size_t v252 = byte_25CBBBF;
  }
  else {
    size_t v252 = qword_25CBBB0;
  }
  unint64_t v253 = v252 + v230;
  if (v252 + v230 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v253 <= 0x16)
  {
    v254 = &qword_25CBC80;
    qword_25CBC88 = 0;
    unk_25CBC90 = 0;
    qword_25CBC80 = 0;
    byte_25CBC97 = v252 + v230;
    if (!v230) {
      goto LABEL_535;
    }
    goto LABEL_531;
  }
  uint64_t v261 = (v253 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v253 | 7) != 0x17) {
    uint64_t v261 = v253 | 7;
  }
  uint64_t v262 = v261 + 1;
  v254 = (uint64_t *)operator new(v261 + 1);
  qword_25CBC88 = v252 + v230;
  unk_25CBC90 = v262 | 0x8000000000000000;
  qword_25CBC80 = (uint64_t)v254;
  if (v230)
  {
LABEL_531:
    if (v229 >= 0) {
      v255 = &qword_25CBB30;
    }
    else {
      v255 = (uint64_t *)qword_25CBB30;
    }
    memmove(v254, v255, v230);
  }
LABEL_535:
  v256 = (char *)v254 + v230;
  if (v252)
  {
    if (v251 >= 0) {
      v257 = &qword_25CBBA8;
    }
    else {
      v257 = (uint64_t *)qword_25CBBA8;
    }
    memmove(v256, v257, v252);
  }
  v256[v252] = 0;
  strcpy(&byte_25CBCAF, "\n{newroute}");
  strcpy((char *)&qword_25CBC98, "{roadname}");
  strcpy(&byte_25CBCC7, "\n{count}");
  byte_25CBCDF = 7;
  strcpy(&byte_25CBCF7, "\n{dur}");
  strcpy((char *)&qword_25CBCE0, "{duration}");
  byte_25CBD0F = 5;
  qword_25CBD10 = (uint64_t)operator new(0x20uLL);
  unk_25CBD18 = v278;
  strcpy((char *)qword_25CBD10, "{PleaseProceedWithCaution}");
  byte_25CBD3F = 15;
  strcpy((char *)&qword_25CBD28, "{UserRouteName}");
  byte_25CBD57 = 20;
  strcpy((char *)&xmmword_25CBD40, "{SuggestedRouteName}");
  byte_25CBD6F = 18;
  strcpy(byte_25CBD58, "Speed_Camera_Ahead");
  qword_25CBD70 = (uint64_t)operator new(0x20uLL);
  unk_25CBD78 = v277;
  strcpy((char *)qword_25CBD70, "Red_Light_Camera_Ahead_Spoken");
  qword_25CBD88 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25CBD90 = v277;
  strcpy((char *)qword_25CBD88, "Stop_Sign_Camera_Ahead_Spoken");
  qword_25CBDA0 = (uint64_t)operator new(0x28uLL);
  unk_25CBDA8 = v272;
  strcpy((char *)qword_25CBDA0, "Speed_Camera_Ahead_Multiple_Spoken");
  qword_25CBDB8 = (uint64_t)operator new(0x28uLL);
  unk_25CBDC0 = v266;
  strcpy((char *)qword_25CBDB8, "Red_Light_Camera_Ahead_Multiple_Spoken");
  qword_25CBDD0 = (uint64_t)operator new(0x20uLL);
  unk_25CBDD8 = v279;
  strcpy((char *)qword_25CBDD0, "Camera_Ahead_Multiple_Spoken");
  qword_25CBDE8 = (uint64_t)operator new(0x30uLL);
  unk_25CBDF0 = v267;
  strcpy((char *)qword_25CBDE8, "Red_Light_Camera_Speed_Camera_Ahead_Spoken");
  qword_25CBE00 = (char *)operator new(0x30uLL);
  strcpy(qword_25CBE00, "Stop_Sign_Camera_Speed_Camera_Ahead_Spoken");
  byte_25CBE2F = 16;
  xmmword_25CBE08 = v267;
  strcpy(byte_25CBE18, "_Speed_Limit_Mph");
  byte_25CBE47 = 16;
  strcpy(algn_25CBE30, "_Speed_Limit_Kph");
  byte_25CBE5F = 11;
  strcpy((char *)&qword_25CBE48, "Watch_Speed");
  byte_25CBE77 = 4;
  strcpy((char *)&dword_25CBE60, "_One");
  byte_25CBE8F = 4;
  strcpy((char *)&dword_25CBE78, "_Two");
  byte_25CBEA7 = 4;
  strcpy((char *)&dword_25CBE90, "_Few");
  byte_25CBEBF = 5;
  strcpy((char *)&dword_25CBEA8, "_Many");
  byte_25CBED7 = 6;
  strcpy((char *)&dword_25CBEC0, "_Other");
  byte_25CBEEF = 4;
  strcpy((char *)&dword_25CBED8, "_ONE");
  byte_25CBF07 = 7;
  strcpy((char *)&dword_25CBEF0, "{Speed}");
  byte_25CBF1F = 8;
  strcpy((char *)&qword_25CBF08, "Dismount");
  byte_25CBF37 = 4;
  strcpy((char *)&dword_25CBF20, "Walk");
  byte_25CBF4F = 5;
  strcpy((char *)&dword_25CBF38, "Mount");
  byte_25CBF67 = 7;
  strcpy((char *)&dword_25CBF50, "Remount");
  strcpy(&byte_25CBF7F, "\t_Crosswalk");
  strcpy((char *)&qword_25CBF68, "Walk_Road");
  strcpy(&byte_25CBF97, "\n_PLURAL");
  byte_25CBFAF = 7;
  strcpy(&byte_25CBFC7, "\n{description1}");
  strcpy((char *)&qword_25CBFB0, "_SECONDARY");
  byte_25CBFDF = 14;
  byte_25CBFF7 = 14;
  strcpy((char *)&qword_25CBFE0, "{description2}");
  byte_25CC00F = 21;
  strcpy((char *)&xmmword_25CBFF8, "TWO_ROAD_DESCRIPTIONS");
  byte_25CC027 = 17;
  strcpy((char *)&xmmword_25CC010, "{SlopePercentage}");
  byte_25CC03F = 15;
  strcpy((char *)&qword_25CC028, "_Protected_Lane");
  strcpy(&byte_25CC057, "\n_Paved_Path");
  strcpy((char *)&qword_25CC040, "_Bike_Path");
  byte_25CC06F = 11;
  byte_25CC087 = 15;
  strcpy((char *)&qword_25CC070, "_Dedicated_Lane");
  byte_25CC09F = 12;
  strcpy((char *)&qword_25CC088, "_Shared_Path");
  strcpy(&byte_25CC0B7, "\n_UnnamedRoad");
  strcpy((char *)&qword_25CC0A0, "_Bike_Lane");
  byte_25CC0CF = 12;
  byte_25CC0E7 = 5;
  strcpy((char *)&dword_25CC0D0, "_Path");
  byte_25CC0FF = 6;
  strcpy((char *)&dword_25CC0E8, "_Trail");
  strcpy(&byte_25CC117, "\t_Plaza");
  strcpy((char *)&qword_25CC100, "_Sidewalk");
  byte_25CC12F = 6;
  byte_25CC147 = 15;
  strcpy((char *)&qword_25CC130, "_Moving_Walkway");
  byte_25CC15F = 14;
  strcpy((char *)&qword_25CC148, "Two_Stage_Turn");
  byte_25CC177 = 16;
  strcpy((char *)&xmmword_25CC160, "{OptionalPeriod}");
  byte_25CC18F = 18;
  strcpy((char *)&xmmword_25CC178, "Advisory_Separator");
  byte_25CC1A7 = 6;
  strcpy((char *)&dword_25CC190, "Period");
  byte_25CC1BF = 21;
  strcpy((char *)&xmmword_25CC1A8, "Advisory_Title_Notice");
  strcpy((char *)&xmmword_25CC1C0, "Advisory_Title_Notices");
  HIBYTE(word_25CC1D6) = 22;
  byte_25CC1EF = 7;
  strcpy((char *)&dword_25CC1D8, "_DETAIL");
  byte_25CC207 = 17;
  strcpy((char *)&xmmword_25CC1F0, "_LONG_REGION_LIST");
  byte_25CC21F = 16;
  strcpy((char *)&xmmword_25CC208, "Advisory_Grouped");
  byte_25CC237 = 11;
  strcpy((char *)&qword_25CC220, "_Advisories");
  qword_25CC238 = (uint64_t)operator new(0x20uLL);
  unk_25CC240 = v275;
  strcpy((char *)qword_25CC238, "Advisory_WILDFIRE_METADATA_");
  byte_25CC267 = 8;
  strcpy((char *)&qword_25CC250, "Advisory");
  byte_25CC27F = 13;
  strcpy((char *)&qword_25CC268, "MPR_NUM_STOPS");
  byte_25CC297 = 17;
  strcpy(byte_25CC280, "EV_CHARGE_STATION");
  byte_25CC2AF = 11;
  strcpy((char *)&qword_25CC298, "_NAMED_CITY");
  byte_25CC2C7 = 5;
  strcpy((char *)&dword_25CC2B0, "_Stop");
  strcpy(&byte_25CC2DF, "\n{StopsCount}");
  strcpy((char *)&qword_25CC2C8, "{CityName}");
  byte_25CC2F7 = 12;
  byte_25CC30F = 11;
  strcpy((char *)&qword_25CC2F8, "_With_Other");
  byte_25CC327 = 15;
  strcpy((char *)&qword_25CC310, "{DepartureTime}");
  qword_25CC328 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25CC330 = v276;
  strcpy((char *)qword_25CC328, "Ending_Charge_Station_Port_Availability");
  qword_25CC340 = (uint64_t)operator new(0x28uLL);
  unk_25CC348 = v268;
  strcpy((char *)qword_25CC340, "Ending_Charge_Station_No_Availability");
  qword_25CC358 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25CC360 = v272;
  strcpy((char *)qword_25CC358, "Ending_Charge_Station_No_Real_Time");
  byte_25CC387 = 16;
  strcpy(&algn_25CC360[16], "{AvailablePorts}");
  byte_25CC39F = 12;
  strcpy((char *)&qword_25CC388, "{TotalPorts}");
  byte_25CC3B7 = 14;
  strcpy((char *)&qword_25CC3A0, "{ManeuverIcon}");
  qword_25CC3B8 = (uint64_t)operator new(0x38uLL);
  unk_25CC3C0 = xmmword_20B9A60;
  strcpy((char *)qword_25CC3B8, "Walking_Distance_ManeuverIcon_PrimaryInstruction");
  qword_25CC3D0 = (uint64_t)operator new(0x20uLL);
  unk_25CC3D8 = v275;
  strcpy((char *)qword_25CC3D0, "Walking_Destination_Unnamed");
  qword_25CC3E8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25CC3F0 = v277;
  strcpy((char *)qword_25CC3E8, "TrafficDelay_Label_Title_Sign");
  qword_25CC400 = (uint64_t)operator new(0x20uLL);
  unk_25CC408 = v279;
  strcpy((char *)qword_25CC400, "Special_Guidance_Instruction");
  byte_25CC42F = 2;
  strcpy((char *)&word_25CC418, "CZ");
  byte_25CC447 = 3;
  dword_25CC430 = 5919811;
  unk_25CC45F = 3;
  dword_25CC448 = 6243649;
  byte_25CC477 = 0;
  byte_25CC48F = 7;
  strcpy((char *)&dword_25CC478, "TRANSIT");
  byte_25CC4A7 = 7;
  strcpy((char *)&dword_25CC490, "OFFLINE");
  qword_25CC4A8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25CC4B0 = v266;
  strcpy((char *)qword_25CC4A8, "Advisory_Card_French_Climate_Law_Title");
  qword_25CC4C0 = (uint64_t)operator new(0x30uLL);
  unk_25CC4C8 = xmmword_20B93C0;
  strcpy((char *)qword_25CC4C0, "Advisory_Card_French_Climate_Law_Details");
  qword_25CC4D8 = (uint64_t)operator new(0x30uLL);
  unk_25CC4E0 = v273;
  strcpy((char *)qword_25CC4D8, "French_Climate_Law_Metadata_Weblink_Title");
  qword_25CC4F0 = (uint64_t)operator new(0x20uLL);
  unk_25CC4F8 = v279;
  strcpy((char *)qword_25CC4F0, "{ClimateLawLearnMoreWeblink}");
  byte_25CC51F = 3;
  dword_25CC508 = 4280902;
  qword_25CC520 = (uint64_t)operator new(0x70uLL);
  unk_25CC528 = xmmword_20E81E0;
  strcpy((char *)qword_25CC520, "https://www.vie-publique.fr/loi/278460-loi-22-aout-2021-climat-et-resilience-convention-citoyenne-climat");
  qword_25CC538 = 0;
  unk_25CC540 = 0;
  qword_25CC548 = 0;
  v258 = (char *)operator new(9uLL);
  *(void *)v258 = 0x4020C000103050DLL;
  v258[8] = 6;
  qword_25CC538 = (uint64_t)v258;
  unk_25CC540 = v258 + 9;
  qword_25CC548 = (uint64_t)(v258 + 9);
  qword_25CC550 = 0;
  qword_25CC558 = 0;
  unk_25CC560 = 0;
  v259 = (char *)operator new(9uLL);
  qword_25CC558 = (uint64_t)(v259 + 9);
  unk_25CC560 = v259 + 9;
  double result = 1.10224369e-279;
  *(void *)v259 = 0x604020C00010305;
  v259[8] = 13;
  qword_25CC550 = (uint64_t)v259;
  return result;
}

void sub_88F020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x3B7]) < 0)
  {
    operator delete((void *)STACK[0x3A0]);
    if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0)
  {
LABEL_3:
    if (SLOBYTE(STACK[0x387]) < 0) {
      goto LABEL_4;
    }
    goto LABEL_18;
  }
  operator delete((void *)STACK[0x388]);
  if (SLOBYTE(STACK[0x387]) < 0)
  {
LABEL_4:
    operator delete((void *)STACK[0x370]);
    if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0)
  {
LABEL_5:
    if (SLOBYTE(STACK[0x357]) < 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete((void *)STACK[0x358]);
  if (SLOBYTE(STACK[0x357]) < 0)
  {
LABEL_6:
    operator delete((void *)STACK[0x340]);
    if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0)
  {
LABEL_7:
    if (SLOBYTE(STACK[0x327]) < 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete((void *)STACK[0x328]);
  if (SLOBYTE(STACK[0x327]) < 0)
  {
LABEL_8:
    operator delete((void *)STACK[0x310]);
    if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0)
  {
LABEL_9:
    if (SLOBYTE(STACK[0x2F7]) < 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete((void *)STACK[0x2F8]);
  if (SLOBYTE(STACK[0x2F7]) < 0)
  {
LABEL_10:
    operator delete((void *)STACK[0x2E0]);
    if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0)
  {
LABEL_11:
    if (SLOBYTE(STACK[0x2C7]) < 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete((void *)STACK[0x2C8]);
  if (SLOBYTE(STACK[0x2C7]) < 0)
  {
LABEL_12:
    operator delete((void *)STACK[0x2B0]);
    if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0)
  {
LABEL_13:
    if (SLOBYTE(STACK[0x297]) < 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete((void *)STACK[0x298]);
  if (SLOBYTE(STACK[0x297]) < 0)
  {
LABEL_14:
    operator delete((void *)STACK[0x280]);
    if (SLOBYTE(STACK[0x27F]) < 0)
    {
LABEL_36:
      operator delete((void *)STACK[0x268]);
      if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0)
      {
LABEL_37:
        if (SLOBYTE(STACK[0x24F]) < 0)
        {
LABEL_38:
          operator delete((void *)STACK[0x238]);
          if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0)
          {
LABEL_39:
            if (SLOBYTE(STACK[0x21F]) < 0)
            {
LABEL_40:
              operator delete((void *)STACK[0x208]);
              if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0)
              {
LABEL_41:
                if (a72 < 0) {
                  goto LABEL_42;
                }
                goto LABEL_44;
              }
LABEL_34:
              operator delete(a73);
              if (a72 < 0)
              {
LABEL_42:
                operator delete(a71);
                if ((a70 & 0x80000000) == 0) {
                  goto LABEL_43;
                }
                goto LABEL_45;
              }
LABEL_44:
              if ((a70 & 0x80000000) == 0) {
LABEL_43:
              }
                _Unwind_Resume(a1);
LABEL_45:
              operator delete(a65);
              _Unwind_Resume(a1);
            }
LABEL_33:
            if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0) {
              goto LABEL_41;
            }
            goto LABEL_34;
          }
LABEL_32:
          operator delete((void *)STACK[0x220]);
          if (SLOBYTE(STACK[0x21F]) < 0) {
            goto LABEL_40;
          }
          goto LABEL_33;
        }
LABEL_31:
        if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0) {
          goto LABEL_39;
        }
        goto LABEL_32;
      }
LABEL_30:
      operator delete((void *)STACK[0x250]);
      if (SLOBYTE(STACK[0x24F]) < 0) {
        goto LABEL_38;
      }
      goto LABEL_31;
    }
LABEL_29:
    if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_30;
  }
LABEL_28:
  if (SLOBYTE(STACK[0x27F]) < 0) {
    goto LABEL_36;
  }
  goto LABEL_29;
}

std::string::size_type sub_88F378(std::string::size_type a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, int a6)
{
  std::string::size_type v9 = sub_7F3934(a1, a2, a3, a4, a5, a6);
  sub_675E5C(v9 + 2136, a4, a5);
  *(void *)a1 = off_243A800;
  *(void *)(a1 + 2136) = off_243A8C8;
  uint64_t v10 = (void **)(a1 + 2880);
  *(_OWORD *)(a1 + 2848) = 0u;
  *(_OWORD *)(a1 + 2864) = 0u;
  *(_OWORD *)(a1 + 2880) = 0u;
  *(_OWORD *)(a1 + 2892) = 0u;
  *(unsigned char *)(a1 + 2912) = 2;
  uint64_t v11 = a1 + 2920;
  *(void *)(a1 + 2920) = 0;
  *(void *)(a1 + 2936) = 0;
  *(void *)(a1 + 2928) = 0;
  uint64_t v12 = *(void *)(a4 + 1064);
  unint64_t v13 = (const std::string *)sub_64F474(a4);
  std::string::operator=((std::string *)(a1 + 2848), v13);
  BOOL v14 = sub_63ACE0(v12 + 2400 * a5 + 1872);
  *(unsigned char *)(a1 + 2872) = v14;
  if (v14)
  {
    BOOL v15 = sub_63A8F8(v12 + 2400 * a5 + 1896);
    BOOL v16 = *(unsigned char *)(a1 + 2872) == 0;
    BOOL v17 = 0;
    *(unsigned char *)(a1 + 2873) = v15;
    if (!v16 && *(unsigned char *)(v12 + 2400 * a5 + 2081)) {
      BOOL v17 = sub_63A908(v12 + 2400 * a5 + 1896) && *(unsigned char *)(v12 + 2400 * a5 + 1896) == 0;
    }
  }
  else
  {
    BOOL v17 = 0;
    *(unsigned char *)(a1 + 2873) = 0;
  }
  *(unsigned char *)(a1 + 2874) = v17;
  long long v18 = (unsigned char *)(v12 + 2400 * a5);
  long long v19 = v18 + 648;
  unsigned __int8 v20 = v18[651];
  *(unsigned char *)(a1 + 2879) = (v20 | v18[320]) != 0;
  int v21 = v18[649];
  if (v21) {
    LOBYTE(v21) = *(void *)(v12 + 2400 * a5 + 568) == -1;
  }
  *(unsigned char *)(a1 + 2875) = v21;
  BOOL v22 = 1;
  if (!*v19) {
    BOOL v22 = *(unsigned char *)(v12 + 2400 * a5 + 650) != 0;
  }
  *(unsigned char *)(a1 + 2876) = v22;
  *(unsigned char *)(a1 + 2877) = v20;
  *(unsigned char *)(a1 + 2878) = 1;
  uint64_t v23 = v12 + 2400 * a5;
  unint64_t v25 = *(unsigned char **)(v23 + 176);
  size_t v24 = *(unsigned char **)(v23 + 184);
  if (v25 != v24)
  {
    uint64_t v26 = v12 + 2400 * a5;
    if (*(unsigned char *)(v26 + 330)) {
      uint64_t v27 = (char *)(v26 + 329);
    }
    else {
      uint64_t v27 = (char *)(a4 + 1057);
    }
    char v28 = *v27;
    uint64_t v29 = v24 - v25;
    if (v24 - v25 < 0) {
      sub_2E00();
    }
    int v30 = (char *)operator new(v24 - v25);
    size_t v31 = &v30[4 * (v29 >> 2)];
    memcpy(v30, v25, v29 - 1);
    int v32 = *(_DWORD *)(v12 + 2400 * a5 + 200);
    long long v33 = *v10;
    if (*v10)
    {
      *(void *)(a1 + 2888) = v33;
      operator delete(v33);
      *uint64_t v10 = 0;
      *(void *)(a1 + 2888) = 0;
      *(void *)(a1 + 2896) = 0;
    }
    *(void *)(a1 + 2880) = v30;
    *(void *)(a1 + 2888) = v31;
    *(void *)(a1 + 2896) = v31;
    *(_DWORD *)(a1 + 2904) = v32;
    *(unsigned char *)(a1 + 2912) = v28;
    uint64_t v11 = a1 + 2920;
  }
  long long v34 = (std::string **)(v12 + 2400 * a5 + 1832);
  if ((std::string **)v11 != v34) {
    sub_5A03B8(v11, *v34, *(std::string **)(v12 + 2400 * a5 + 1840), 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(void *)(v12 + 2400 * a5 + 1840) - (void)*v34) >> 4));
  }
  return a1;
}

void sub_88F658(_Unwind_Exception *a1)
{
  sub_52F364(v1);
  _Unwind_Resume(a1);
}

void sub_88F66C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void **a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    operator delete(__p);
    sub_4A5980(a11);
    BOOL v17 = *v14;
    if (!*v14)
    {
LABEL_3:
      if ((*(char *)(v13 + 2871) & 0x80000000) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    sub_4A5980(a11);
    BOOL v17 = *v14;
    if (!*v14) {
      goto LABEL_3;
    }
  }
  *(void *)(v13 + 2888) = v17;
  operator delete(v17);
  if ((*(char *)(v13 + 2871) & 0x80000000) == 0)
  {
LABEL_5:
    sub_88F6F8(a10);
    sub_52F364(v13);
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(*v15);
  goto LABEL_5;
}

void *sub_88F6F8(void *a1)
{
  *a1 = off_243A148;
  sub_576848((uint64_t)(a1 + 46));
  sub_576848((uint64_t)(a1 + 4));
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = a1[2];
    size_t v4 = (void *)a1[1];
    if (v3 != v2)
    {
      do
        uint64_t v3 = sub_576848(v3 - 336);
      while (v3 != v2);
      size_t v4 = (void *)a1[1];
    }
    a1[2] = v2;
    operator delete(v4);
  }
  return a1;
}

std::string::size_type sub_88F780(std::string::size_type a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, int a6)
{
  return sub_88F378(a1, a2, a3, a4, a5, a6);
}

std::string *sub_88F788@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 56) = 1065353216;
  *(unsigned char *)(a2 + 64) = 1;
  int v3 = *(_DWORD *)(a1 + 1848);
  switch(v3)
  {
    case 'T':
      sub_7F63DC(a1, (char **)a2);
      return sub_63581C((std::string **)a2, (const std::string::value_type *)&qword_25CD760);
    case 'S':
      sub_7F6390(a1, (char **)a2);
      return sub_63581C((std::string **)a2, (const std::string::value_type *)&qword_25CD760);
    case 'R':
      sub_7F6344(a1, (char **)a2);
      return sub_63581C((std::string **)a2, (const std::string::value_type *)&qword_25CD760);
  }
  return sub_6351E8((char **)a2, (uint64_t)&xmmword_25CCDE8);
}

void sub_88F828(_Unwind_Exception *a1)
{
  sub_4D4880(v1);
  _Unwind_Resume(a1);
}

void sub_88F83C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 56) = 1065353216;
  *(unsigned char *)(a2 + 64) = 1;
  if (sub_800150(a1))
  {
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 12;
    strcpy((char *)&__p, "Address_Sign");
    sub_6351E8((char **)a2, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_6358A0(a2, &xmmword_25CE6F0, (const std::string *)(a1 + 2848));
  }
  else
  {
    if (a1 + 8 != a2)
    {
      sub_69208(a2, *(std::string **)(a1 + 8), *(std::string **)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3));
      *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 64);
      sub_59E5E4((void *)(a2 + 24), *(uint64_t **)(a1 + 48), 0);
    }
    *(unsigned char *)(a2 + 64) = *(unsigned char *)(a1 + 72);
    sub_635CD0((long long **)a2, (uint64_t)&__p);
    if (byte_25CD777 >= 0) {
      size_t v4 = (const std::string::value_type *)&qword_25CD760;
    }
    else {
      size_t v4 = (const std::string::value_type *)qword_25CD760;
    }
    if (byte_25CD777 >= 0) {
      std::string::size_type v5 = byte_25CD777;
    }
    else {
      std::string::size_type v5 = qword_25CD768;
    }
    std::string::append(&__p, v4, v5);
    sub_6351E8((char **)a2, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_88F994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_4D4880(v15);
  _Unwind_Resume(a1);
}

void sub_88F9D4(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void ***__return_ptr))(*(void *)a1 + 24))(&v44);
  uint64_t v31 = 0;
  int v32 = 0;
  sub_6370D4(v33, &v44, 1, &v31);
  size_t v4 = v32;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (a1[2875]) {
      goto LABEL_4;
    }
  }
  else if (a1[2875])
  {
LABEL_4:
    BOOL v5 = 1;
    goto LABEL_7;
  }
  BOOL v5 = a1[2876] != 0;
LABEL_7:
  sub_7FC55C((uint64_t)a1, (uint64_t *)v33, 0, v5);
  if (v5)
  {
    int v6 = a1[1859];
    uint64_t v7 = (std::__shared_weak_count *)operator new(0x80uLL);
    v7->__shared_owners_ = 0;
    v7->__shared_weak_owners_ = 0;
    v7->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
    sub_59540C((uint64_t)&v48, (uint64_t)&v7[1], (uint64_t)v33);
    uint64_t v29 = &v7[1].__vftable;
    int v30 = v7;
    if (v6) {
      uint64_t v8 = 5;
    }
    else {
      uint64_t v8 = 10;
    }
    sub_88FDEC((uint64_t)a1, (uint64_t *)&v29, v8, a2);
    std::string::size_type v9 = v30;
    if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)v33;
    v33[0] = 0;
    v33[1] = 0;
    uint64_t v11 = v34;
    uint64_t v10 = __p;
    unint64_t v12 = v36;
    uint64_t v13 = v37;
    std::string __p = 0;
    unint64_t v36 = 0;
    uint64_t v34 = 0;
    *(void *)(a2 + 16) = v11;
    *(void *)(a2 + 24) = v10;
    *(void *)(a2 + 32) = v12;
    *(void *)(a2 + 40) = v13;
    uint64_t v14 = v38;
    *(void *)(a2 + 48) = v38;
    *(_DWORD *)(a2 + 56) = v39;
    if (v14)
    {
      unint64_t v15 = v13[1];
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v15 >= v12) {
          v15 %= v12;
        }
      }
      else
      {
        v15 &= v12 - 1;
      }
      v10[v15] = a2 + 40;
      uint64_t v37 = 0;
      uint64_t v38 = 0;
    }
    *(unsigned char *)(a2 + 64) = v40;
    *(_DWORD *)(a2 + 72) = v41;
    *(_OWORD *)(a2 + 80) = v42;
    long long v42 = 0uLL;
    *(_WORD *)(a2 + 96) = v43;
  }
  BOOL v16 = (std::__shared_weak_count *)*((void *)&v42 + 1);
  if (*((void *)&v42 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v42 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  BOOL v17 = v37;
  if (v37)
  {
    do
    {
      long long v18 = (void *)*v17;
      sub_4F4B48((uint64_t)(v17 + 2));
      operator delete(v17);
      BOOL v17 = v18;
    }
    while (v18);
  }
  long long v19 = __p;
  std::string __p = 0;
  if (v19) {
    operator delete(v19);
  }
  unsigned __int8 v20 = (void **)v33[0];
  if (v33[0])
  {
    int v21 = (void **)v33[1];
    BOOL v22 = v33[0];
    if (v33[1] != v33[0])
    {
      do
      {
        if (*((char *)v21 - 1) < 0) {
          operator delete(*(v21 - 3));
        }
        v21 -= 3;
      }
      while (v21 != v20);
      BOOL v22 = v33[0];
    }
    v33[1] = v20;
    operator delete(v22);
  }
  uint64_t v23 = v47;
  if (v47)
  {
    do
    {
      size_t v24 = (void *)*v23;
      sub_4F4B48((uint64_t)(v23 + 2));
      operator delete(v23);
      uint64_t v23 = v24;
    }
    while (v24);
  }
  unint64_t v25 = v46;
  long long v46 = 0;
  if (v25) {
    operator delete(v25);
  }
  uint64_t v26 = v44;
  if (v44)
  {
    uint64_t v27 = v45;
    char v28 = v44;
    if (v45 != v44)
    {
      do
      {
        if (*((char *)v27 - 1) < 0) {
          operator delete(*(v27 - 3));
        }
        v27 -= 3;
      }
      while (v27 != v26);
      char v28 = v44;
    }
    uint64_t v45 = v26;
    operator delete(v28);
  }
}

void sub_88FD64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  sub_14A84((uint64_t)&a9);
  sub_4F31D0(&a13);
  sub_4D4880((void **)(v13 - 128));
  _Unwind_Resume(a1);
}

void sub_88FD88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  std::__shared_weak_count::~__shared_weak_count(v13);
  operator delete(v16);
  sub_4F31D0(&a13);
  sub_4D4880((void **)(v14 - 128));
  _Unwind_Resume(a1);
}

void sub_88FDB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_4F31D0((void **)va);
  sub_4D4880((void **)(v5 - 128));
  _Unwind_Resume(a1);
}

void sub_88FDD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)(v3 - 128));
  _Unwind_Resume(a1);
}

void sub_88FDEC(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)(a1 + 1945))
  {
    uint64_t v7 = (int *)&xmmword_25CFD78;
    if ((byte_25CFD8F & 0x80000000) == 0)
    {
LABEL_3:
      *(_OWORD *)unint64_t v36 = *(_OWORD *)v7;
      uint64_t v37 = *((void *)v7 + 2);
      goto LABEL_9;
    }
  }
  else
  {
    if (*(unsigned char *)(a1 + 1946)) {
      uint64_t v7 = &dword_25CFDC0;
    }
    else {
      uint64_t v7 = &dword_25CFDA8;
    }
    if ((*((char *)v7 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  sub_4200(v36, *(void **)v7, *((void *)v7 + 1));
LABEL_9:
  int v8 = SHIBYTE(v37);
  if (v37 >= 0) {
    size_t v9 = HIBYTE(v37);
  }
  else {
    size_t v9 = (size_t)v36[1];
  }
  int v10 = byte_25CD777;
  if (byte_25CD777 >= 0) {
    size_t v11 = byte_25CD777;
  }
  else {
    size_t v11 = qword_25CD768;
  }
  unint64_t v12 = v11 + v9;
  if (v11 + v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v12 <= 0x16)
  {
    size_t v34 = 0;
    unint64_t v35 = 0;
    std::string __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v35) = v11 + v9;
    if (!v9) {
      goto LABEL_22;
    }
    goto LABEL_18;
  }
  uint64_t v25 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v12 | 7) != 0x17) {
    uint64_t v25 = v12 | 7;
  }
  uint64_t v26 = v25 + 1;
  p_dst = (void **)operator new(v25 + 1);
  size_t v34 = v11 + v9;
  unint64_t v35 = v26 | 0x8000000000000000;
  std::string __dst = p_dst;
  if (v9)
  {
LABEL_18:
    if (v8 >= 0) {
      uint64_t v14 = v36;
    }
    else {
      uint64_t v14 = (void **)v36[0];
    }
    memmove(p_dst, v14, v9);
  }
LABEL_22:
  unint64_t v15 = (char *)p_dst + v9;
  if (v11)
  {
    if (v10 >= 0) {
      BOOL v16 = &qword_25CD760;
    }
    else {
      BOOL v16 = (uint64_t *)qword_25CD760;
    }
    memmove(v15, v16, v11);
  }
  v15[v11] = 0;
  sub_6352AC((uint64_t)&v29, (uint64_t)&__dst);
  BOOL v17 = (std::__shared_weak_count *)a2[1];
  uint64_t v27 = *a2;
  char v28 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_6370D4(a4, &v29, a3, &v27);
  long long v18 = v28;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  long long v19 = v32;
  if (v32)
  {
    do
    {
      unsigned __int8 v20 = (void *)*v19;
      sub_4F4B48((uint64_t)(v19 + 2));
      operator delete(v19);
      long long v19 = v20;
    }
    while (v20);
  }
  int v21 = __p;
  std::string __p = 0;
  if (v21) {
    operator delete(v21);
  }
  BOOL v22 = (void **)v29;
  if (v29)
  {
    uint64_t v23 = v30;
    size_t v24 = v29;
    if (v30 != v29)
    {
      do
      {
        if (*((char *)v23 - 1) < 0) {
          operator delete(*(v23 - 3));
        }
        v23 -= 3;
      }
      while (v23 != v22);
      size_t v24 = v29;
    }
    int v30 = v22;
    operator delete(v24);
  }
  if ((SHIBYTE(v35) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v37) & 0x80000000) == 0) {
      return;
    }
LABEL_52:
    operator delete(v36[0]);
    return;
  }
  operator delete(__dst);
  if (SHIBYTE(v37) < 0) {
    goto LABEL_52;
  }
}

void sub_8900A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a25 < 0)
  {
    operator delete(__p);
    if ((a31 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else if ((a31 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a26);
  _Unwind_Resume(a1);
}

void sub_890108(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v2 = *(void *)(a1 + 2920);
  uint64_t v3 = *(void *)(a1 + 2928);
  if (v2 == v3) {
    return;
  }
  BOOL v22 = (const void **)(a1 + 152);
  do
  {
    uint64_t v28 = 0;
    *(_OWORD *)uint64_t v26 = 0u;
    long long v27 = 0u;
    *(_OWORD *)std::string __p = 0u;
    int v29 = 1065353216;
    char v30 = 1;
    int v7 = *(_DWORD *)(v2 + 240);
    if (v7 > 90)
    {
      if (v7 == 91)
      {
        sub_7F61B4(a1, (char **)__p, v2);
        goto LABEL_45;
      }
      if (v7 == 93)
      {
        sub_7F6218(a1, (char **)__p, v2);
        goto LABEL_45;
      }
    }
    else
    {
      if (v7 == 22)
      {
        sub_7F60EC(a1, (char **)__p, v2);
        goto LABEL_45;
      }
      if (v7 == 24)
      {
        sub_7F6150(a1, (char **)__p, v2);
        goto LABEL_45;
      }
    }
    if (*(_DWORD *)(a1 + 1848) == 3
      && *(void *)(v2 + 152) == -1
      && *(void *)(v2 + 160) == -1
      && *(void *)(v2 + 168) == -1
      && *(void *)(v2 + 176) == -1
      && *(void *)(v2 + 184) == -1
      && *(void *)(v2 + 200) == -1
      && *(void *)(a1 + 1864) == -1
      && *(void *)(a1 + 1872) == -1
      && *(void *)(a1 + 1880) == -1
      && *(void *)(a1 + 1888) == -1
      && *(void *)(a1 + 1896) == -1
      && *(void *)(a1 + 1912) == -1)
    {
      uint64_t v8 = *(unsigned __int8 *)(v2 + 23);
      if ((v8 & 0x80u) == 0) {
        uint64_t v9 = *(unsigned __int8 *)(v2 + 23);
      }
      else {
        uint64_t v9 = *(void *)(v2 + 8);
      }
      uint64_t v10 = *(unsigned __int8 *)(a1 + 175);
      int v11 = (char)v10;
      if ((v10 & 0x80u) != 0) {
        uint64_t v10 = *(void *)(a1 + 160);
      }
      if (v9 == v10)
      {
        if (v11 >= 0) {
          unint64_t v12 = (unsigned __int8 *)v22;
        }
        else {
          unint64_t v12 = (unsigned __int8 *)*v22;
        }
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v2, v12, *(void *)(v2 + 8)))
          {
LABEL_77:
            unint64_t v21 = *(void *)(a2 + 8);
            if (v21 >= *(void *)(a2 + 16))
            {
              *(void *)(a2 + 8) = sub_8BE59C((void ***)a2);
            }
            else
            {
              *(_OWORD *)(v21 + 64) = 0u;
              *(_OWORD *)(v21 + 80) = 0u;
              *(void *)(v21 + 88) = 0;
              *(void *)(v21 + 96) = 0;
              *(_OWORD *)(v21 + 32) = 0u;
              *(_OWORD *)(v21 + 48) = 0u;
              *(_OWORD *)unint64_t v21 = 0u;
              *(_OWORD *)(v21 + 16) = 0u;
              *(_DWORD *)(v21 + 56) = 1065353216;
              *(unsigned char *)(v21 + 64) = 1;
              *(void *)(v21 + 80) = 0;
              *(_WORD *)(v21 + 96) = 0;
              *(void *)(a2 + 8) = v21 + 104;
            }
            goto LABEL_53;
          }
        }
        else
        {
          if (!*(unsigned char *)(v2 + 23)) {
            goto LABEL_77;
          }
          uint64_t v13 = 0;
          while (*(unsigned __int8 *)(v2 + v13) == v12[v13])
          {
            if (v8 == ++v13) {
              goto LABEL_77;
            }
          }
        }
      }
    }
    sub_6351E8((char **)__p, (uint64_t)&xmmword_25CCFC8);
    sub_7FF1F4(a1, (uint64_t)__p, v2, (void *)(v2 + 152));
    sub_7FF86C(a1, (long long **)__p, v2 + 152);
LABEL_45:
    sub_635CD0((long long **)__p, (uint64_t)&v24);
    if (byte_25CD747 >= 0) {
      uint64_t v14 = (const std::string::value_type *)&qword_25CD730;
    }
    else {
      uint64_t v14 = (const std::string::value_type *)qword_25CD730;
    }
    if (byte_25CD747 >= 0) {
      std::string::size_type v15 = byte_25CD747;
    }
    else {
      std::string::size_type v15 = qword_25CD738;
    }
    std::string::append(&v24, v14, v15);
    sub_6351E8((char **)__p, (uint64_t)&v24);
    unsigned int v23 = 1;
    sub_7FE9A4(a2, (uint64_t)__p, &v23);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
LABEL_53:
    BOOL v16 = (uint64_t **)*((void *)&v27 + 1);
    if (*((void *)&v27 + 1))
    {
      while (1)
      {
        BOOL v17 = *v16;
        if (*((char *)v16 + 191) < 0)
        {
          operator delete(v16[21]);
          if (*((char *)v16 + 159) < 0) {
            goto LABEL_64;
          }
LABEL_59:
          if ((*((char *)v16 + 135) & 0x80000000) == 0) {
            goto LABEL_60;
          }
LABEL_65:
          operator delete(v16[14]);
          if (*((char *)v16 + 95) < 0) {
            goto LABEL_66;
          }
LABEL_61:
          if ((*((char *)v16 + 63) & 0x80000000) == 0) {
            goto LABEL_67;
          }
LABEL_55:
          operator delete(v16[5]);
          if (*((char *)v16 + 39) < 0) {
            goto LABEL_68;
          }
LABEL_56:
          operator delete(v16);
          BOOL v16 = (uint64_t **)v17;
          if (!v17) {
            break;
          }
        }
        else
        {
          if ((*((char *)v16 + 159) & 0x80000000) == 0) {
            goto LABEL_59;
          }
LABEL_64:
          operator delete(v16[17]);
          if (*((char *)v16 + 135) < 0) {
            goto LABEL_65;
          }
LABEL_60:
          if ((*((char *)v16 + 95) & 0x80000000) == 0) {
            goto LABEL_61;
          }
LABEL_66:
          operator delete(v16[9]);
          if (*((char *)v16 + 63) < 0) {
            goto LABEL_55;
          }
LABEL_67:
          if ((*((char *)v16 + 39) & 0x80000000) == 0) {
            goto LABEL_56;
          }
LABEL_68:
          operator delete(v16[2]);
          operator delete(v16);
          BOOL v16 = (uint64_t **)v17;
          if (!v17) {
            break;
          }
        }
      }
    }
    long long v18 = v26[1];
    v26[1] = 0;
    if (v18) {
      operator delete(v18);
    }
    long long v19 = (void **)__p[0];
    if (__p[0])
    {
      unsigned __int8 v20 = (void **)__p[1];
      int v6 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          if (*((char *)v20 - 1) < 0) {
            operator delete(*(v20 - 3));
          }
          v20 -= 3;
        }
        while (v20 != v19);
        int v6 = __p[0];
      }
      __p[1] = v19;
      operator delete(v6);
    }
    v2 += 272;
  }
  while (v2 != v3);
}

void sub_890534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_4D4880(&a18);
  sub_5920E0(v18);
  _Unwind_Resume(a1);
}

void sub_890584(int *a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = a1[462];
  if ((v3 - 25) <= 0x3F && ((1 << (v3 - 25)) & 0x9000000000000001) != 0 || v3 == 17)
  {
    sub_890754((uint64_t)a1, (uint64_t)&v20);
    *(_OWORD *)std::string __p = 0u;
    *(_OWORD *)long long v18 = 0u;
    int v19 = 1065353216;
    sub_8BE3F4(a2, (uint64_t)&v20, (uint64_t)__p);
    int v6 = (char *)v18[0];
    if (v18[0])
    {
      do
      {
        std::string::size_type v15 = *(char **)v6;
        BOOL v16 = (void *)*((void *)v6 + 6);
        if (v16)
        {
          *((void *)v6 + 7) = v16;
          operator delete(v16);
        }
        if (v6[39] < 0) {
          operator delete(*((void **)v6 + 2));
        }
        operator delete(v6);
        int v6 = v15;
      }
      while (v15);
    }
    int v7 = __p[0];
    __p[0] = 0;
    if (v7) {
      operator delete(v7);
    }
    uint64_t v8 = v24;
    if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    uint64_t v9 = v23;
    if (v23)
    {
      do
      {
        uint64_t v10 = (void *)*v9;
        sub_4F4B48((uint64_t)(v9 + 2));
        operator delete(v9);
        uint64_t v9 = v10;
      }
      while (v10);
    }
    int v11 = v22;
    BOOL v22 = 0;
    if (v11) {
      operator delete(v11);
    }
    unint64_t v12 = (void **)v20;
    if (v20)
    {
      uint64_t v13 = v21;
      uint64_t v14 = v20;
      if (v21 != v20)
      {
        do
        {
          if (*((char *)v13 - 1) < 0) {
            operator delete(*(v13 - 3));
          }
          v13 -= 3;
        }
        while (v13 != v12);
        uint64_t v14 = v20;
      }
      unint64_t v21 = v12;
      operator delete(v14);
    }
  }
  else
  {
    sub_89087C(a1, a2);
  }
}

void sub_890738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

void sub_890754(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_8911A4(a1, (uint64_t)&v12);
  uint64_t v10 = 0;
  int v11 = 0;
  sub_6370D4(a2, &v12, 1, &v10);
  int v3 = v11;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  size_t v4 = v15;
  if (v15)
  {
    do
    {
      uint64_t v5 = (void *)*v4;
      sub_4F4B48((uint64_t)(v4 + 2));
      operator delete(v4);
      size_t v4 = v5;
    }
    while (v5);
  }
  int v6 = __p;
  std::string __p = 0;
  if (v6) {
    operator delete(v6);
  }
  int v7 = (void **)v12;
  if (v12)
  {
    uint64_t v8 = v13;
    uint64_t v9 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      uint64_t v9 = v12;
    }
    uint64_t v13 = v7;
    operator delete(v9);
  }
}

void sub_890860(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  _Unwind_Resume(a1);
}

void sub_89087C(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v88 = 0;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v85 = 0u;
  int v89 = 1065353216;
  char v90 = 1;
  *(_OWORD *)v82 = 0u;
  *(_OWORD *)v83 = 0u;
  int v84 = 1065353216;
  sub_5F3040((uint64_t)&__p, a1[462], (uint64_t)(a1 + 720));
  sub_8BEDEC((uint64_t)v82, (uint64_t)&qword_25D0210, (uint64_t)&qword_25D0210, (uint64_t)&__p);
  if (__p.__r_.__value_.__l.__size_)
  {
    __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  }
  if (!sub_7F7188((uint64_t)a1))
  {
    uint64_t v14 = (char *)(a1 + 38);
    if (!sub_6F2FD8((uint64_t)(a1 + 38)))
    {
      (*(void (**)(std::string *__return_ptr, int *))(*(void *)a1 + 24))(&__p, a1);
      uint64_t v18 = v85;
      if ((void)v85)
      {
        uint64_t v19 = *((void *)&v85 + 1);
        unsigned __int8 v20 = (void *)v85;
        if (*((void *)&v85 + 1) != (void)v85)
        {
          do
          {
            if (*(char *)(v19 - 1) < 0) {
              operator delete(*(void **)(v19 - 24));
            }
            v19 -= 24;
          }
          while (v19 != v18);
          unsigned __int8 v20 = (void *)v85;
        }
        *((void *)&v85 + 1) = v18;
        operator delete(v20);
      }
      long long v85 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)&long long v86 = *((void *)&__p.__r_.__value_.__l + 2);
      memset(&__p, 0, sizeof(__p));
      if (v88)
      {
        int v32 = (void *)*((void *)&v87 + 1);
        if (*((void *)&v87 + 1))
        {
          do
          {
            long long v33 = (void *)*v32;
            sub_4F4B48((uint64_t)(v32 + 2));
            operator delete(v32);
            int v32 = v33;
          }
          while (v33);
        }
        *((void *)&v87 + 1) = 0;
        uint64_t v34 = v87;
        if ((void)v87)
        {
          uint64_t v35 = 0;
          do
            *(void *)(*((void *)&v86 + 1) + 8 * v35++) = 0;
          while (v34 != v35);
        }
        uint64_t v88 = 0;
      }
      unint64_t v36 = v68;
      size_t v68 = 0;
      uint64_t v37 = (void *)*((void *)&v86 + 1);
      *((void *)&v86 + 1) = v36;
      if (v37) {
        operator delete(v37);
      }
      unint64_t v38 = (unint64_t)v69;
      int v39 = v70;
      unint64_t v69 = 0;
      *((void *)&v87 + 1) = v70;
      uint64_t v88 = v71;
      int v89 = v72;
      *(void *)&long long v87 = v38;
      if (v71)
      {
        unint64_t v40 = v70[1];
        if ((v38 & (v38 - 1)) != 0)
        {
          if (v40 >= v38) {
            v40 %= v38;
          }
        }
        else
        {
          v40 &= v38 - 1;
        }
        *(void *)(*((void *)&v86 + 1) + 8 * v40) = (char *)&v87 + 8;
        v70 = 0;
        uint64_t v71 = 0;
        char v90 = v73;
      }
      else
      {
        char v90 = v73;
        if (v70)
        {
          do
          {
            int v41 = (void *)*v39;
            sub_4F4B48((uint64_t)(v39 + 2));
            operator delete(v39);
            int v39 = v41;
          }
          while (v41);
        }
      }
      long long v42 = v68;
      size_t v68 = 0;
      if (v42) {
        operator delete(v42);
      }
      std::string::size_type v43 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
      {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
        BOOL v17 = (void *)__p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
        {
          do
          {
            if (*(char *)(size - 1) < 0) {
              operator delete(*(void **)(size - 24));
            }
            size -= 24;
          }
          while (size != v43);
          BOOL v17 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__l.__size_ = v43;
        goto LABEL_115;
      }
      goto LABEL_116;
    }
    if (sub_891360((uint64_t)a1))
    {
      sub_7F5A40((std::string *)a1, (char **)&v85, 1u);
      sub_635CD0((long long **)&v85, (uint64_t)&__p);
      if (byte_25CD747 >= 0) {
        std::string::size_type v15 = (const std::string::value_type *)&qword_25CD730;
      }
      else {
        std::string::size_type v15 = (const std::string::value_type *)qword_25CD730;
      }
      if (byte_25CD747 >= 0) {
        std::string::size_type v16 = byte_25CD747;
      }
      else {
        std::string::size_type v16 = qword_25CD738;
      }
      std::string::append(&__p, v15, v16);
      sub_6351E8((char **)&v85, (uint64_t)&__p);
      goto LABEL_34;
    }
    int v23 = byte_25CD18F;
    if (byte_25CD18F >= 0) {
      size_t v24 = byte_25CD18F;
    }
    else {
      size_t v24 = qword_25CD180;
    }
    int v25 = byte_25CD747;
    if (byte_25CD747 >= 0) {
      size_t v26 = byte_25CD747;
    }
    else {
      size_t v26 = qword_25CD738;
    }
    unint64_t v27 = v26 + v24;
    if (v26 + v24 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v27 > 0x16)
    {
      uint64_t v45 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v27 | 7) != 0x17) {
        uint64_t v45 = v27 | 7;
      }
      uint64_t v46 = v45 + 1;
      p_p = (std::string *)operator new(v45 + 1);
      __p.__r_.__value_.__l.__size_ = v26 + v24;
      __p.__r_.__value_.__r.__words[2] = v46 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
      if (!v24)
      {
LABEL_61:
        char v30 = (char *)p_p + v24;
        if (v26)
        {
          if (v25 >= 0) {
            uint64_t v31 = &qword_25CD730;
          }
          else {
            uint64_t v31 = (uint64_t *)qword_25CD730;
          }
          memmove(v30, v31, v26);
        }
        v30[v26] = 0;
        sub_6351E8((char **)&v85, (uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        sub_6F3150(v14, (uint64_t)v80);
        sub_6F3000((char *)&__p, (long long *)v80);
        sub_635C08((uint64_t)&v85, &xmmword_25CE600, (uint64_t)&__p, 0);
        if (v79 < 0)
        {
          operator delete(v78);
          if ((v77 & 0x80000000) == 0)
          {
LABEL_70:
            if ((SHIBYTE(v75) & 0x80000000) == 0) {
              goto LABEL_71;
            }
            goto LABEL_111;
          }
        }
        else if ((v77 & 0x80000000) == 0)
        {
          goto LABEL_70;
        }
        operator delete(v76);
        if ((SHIBYTE(v75) & 0x80000000) == 0)
        {
LABEL_71:
          if ((SHIBYTE(v71) & 0x80000000) == 0) {
            goto LABEL_72;
          }
          goto LABEL_112;
        }
LABEL_111:
        operator delete(v74);
        if ((SHIBYTE(v71) & 0x80000000) == 0)
        {
LABEL_72:
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_73;
          }
          goto LABEL_113;
        }
LABEL_112:
        operator delete(v69);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_73:
          if ((v81 & 0x80000000) == 0) {
            goto LABEL_116;
          }
LABEL_114:
          BOOL v17 = v80[0];
          goto LABEL_115;
        }
LABEL_113:
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((v81 & 0x80000000) == 0) {
          goto LABEL_116;
        }
        goto LABEL_114;
      }
    }
    else
    {
      memset(&__p, 0, sizeof(__p));
      p_p = &__p;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = v26 + v24;
      if (!v24) {
        goto LABEL_61;
      }
    }
    if (v23 >= 0) {
      int v29 = &qword_25CD178;
    }
    else {
      int v29 = (uint64_t *)qword_25CD178;
    }
    memmove(p_p, v29, v24);
    goto LABEL_61;
  }
  size_t v4 = sub_8001FC((uint64_t)a1);
  uint64_t v5 = (const void **)v4;
  char v6 = *((unsigned char *)v4 + 23);
  if ((v6 & 0x80000000) == 0)
  {
    if (*((unsigned char *)v4 + 23)) {
      goto LABEL_6;
    }
LABEL_43:
    sub_6351E8((char **)&v85, (uint64_t)&qword_25D0240);
    goto LABEL_116;
  }
  if (!*((void *)v4 + 1)) {
    goto LABEL_43;
  }
LABEL_6:
  if (v6 >= 0) {
    size_t v7 = *((unsigned __int8 *)v4 + 23);
  }
  else {
    size_t v7 = *((void *)v4 + 1);
  }
  int v8 = byte_25CD747;
  if (byte_25CD747 >= 0) {
    size_t v9 = byte_25CD747;
  }
  else {
    size_t v9 = qword_25CD738;
  }
  unint64_t v10 = v9 + v7;
  if (v9 + v7 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v10 > 0x16)
  {
    uint64_t v21 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v21 = v10 | 7;
    }
    uint64_t v22 = v21 + 1;
    int v11 = (std::string *)operator new(v21 + 1);
    __p.__r_.__value_.__l.__size_ = v9 + v7;
    __p.__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    if (!v7) {
      goto LABEL_19;
    }
    goto LABEL_15;
  }
  memset(&__p, 0, sizeof(__p));
  int v11 = &__p;
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = v9 + v7;
  if (v7)
  {
LABEL_15:
    if (v6 >= 0) {
      unint64_t v12 = v5;
    }
    else {
      unint64_t v12 = *v5;
    }
    memmove(v11, v12, v7);
  }
LABEL_19:
  if (v9)
  {
    if (v8 >= 0) {
      uint64_t v13 = &qword_25CD730;
    }
    else {
      uint64_t v13 = (uint64_t *)qword_25CD730;
    }
    memmove((char *)v11 + v7, v13, v9);
  }
  v11->__r_.__value_.__s.__data_[v7 + v9] = 0;
  sub_6351E8((char **)&v85, (uint64_t)&__p);
LABEL_34:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v17 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_115:
    operator delete(v17);
  }
LABEL_116:
  uint64_t v65 = 0;
  size_t v66 = 0;
  sub_6370D4(&__p, &v85, 16, &v65);
  long long v47 = v66;
  if (v66 && !atomic_fetch_add(&v66->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
  }
  sub_8BE4C8(a2, (uint64_t)&__p, (uint64_t)v82);
  char v48 = v75;
  if (v75 && !atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
  }
  long long v49 = v70;
  if (v70)
  {
    do
    {
      int v50 = (void *)*v49;
      sub_4F4B48((uint64_t)(v49 + 2));
      operator delete(v49);
      long long v49 = v50;
    }
    while (v50);
  }
  size_t v51 = v68;
  size_t v68 = 0;
  if (v51) {
    operator delete(v51);
  }
  std::string::size_type v52 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v53 = __p.__r_.__value_.__l.__size_;
    unint64_t v54 = (void *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v53 - 1) < 0) {
          operator delete(*(void **)(v53 - 24));
        }
        v53 -= 24;
      }
      while (v53 != v52);
      unint64_t v54 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    __p.__r_.__value_.__l.__size_ = v52;
    operator delete(v54);
  }
  unint64_t v55 = (char *)v83[0];
  if (v83[0])
  {
    do
    {
      uint64_t v63 = *(char **)v55;
      long long v64 = (void *)*((void *)v55 + 6);
      if (v64)
      {
        *((void *)v55 + 7) = v64;
        operator delete(v64);
      }
      if (v55[39] < 0) {
        operator delete(*((void **)v55 + 2));
      }
      operator delete(v55);
      unint64_t v55 = v63;
    }
    while (v63);
  }
  uint64_t v56 = v82[0];
  v82[0] = 0;
  if (v56) {
    operator delete(v56);
  }
  uint64_t v57 = (void *)*((void *)&v87 + 1);
  if (*((void *)&v87 + 1))
  {
    do
    {
      long long v58 = (void *)*v57;
      sub_4F4B48((uint64_t)(v57 + 2));
      operator delete(v57);
      uint64_t v57 = v58;
    }
    while (v58);
  }
  uint64_t v59 = (void *)*((void *)&v86 + 1);
  *((void *)&v86 + 1) = 0;
  if (v59) {
    operator delete(v59);
  }
  uint64_t v60 = v85;
  if ((void)v85)
  {
    uint64_t v61 = *((void *)&v85 + 1);
    long long v62 = (void *)v85;
    if (*((void *)&v85 + 1) != (void)v85)
    {
      do
      {
        if (*(char *)(v61 - 1) < 0) {
          operator delete(*(void **)(v61 - 24));
        }
        v61 -= 24;
      }
      while (v61 != v60);
      long long v62 = (void *)v85;
    }
    *((void *)&v85 + 1) = v60;
    operator delete(v62);
  }
}

void sub_89109C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39)
{
  sub_4A50F4((uint64_t)&a11);
  if (a38 < 0)
  {
    operator delete(__p);
    sub_592590((uint64_t)&a39);
    sub_4D4880((void **)(v39 - 160));
    _Unwind_Resume(a1);
  }
  sub_592590((uint64_t)&a39);
  sub_4D4880((void **)(v39 - 160));
  _Unwind_Resume(a1);
}

void sub_8911A4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 56) = 1065353216;
  *(unsigned char *)(a2 + 64) = 1;
  uint64_t v4 = sub_855880((void *)(a1 + 2920), 0);
  unsigned int v5 = *(_DWORD *)(v4 + 240);
  BOOL v6 = v5 > 0x23;
  uint64_t v7 = (1 << v5) & 0x804000010;
  BOOL v8 = v6 || v7 == 0;
  size_t v9 = (uint64_t *)&xmmword_25CCFE0;
  if (v8) {
    size_t v9 = &qword_25CC6E0;
  }
  if (*((char *)v9 + 23) < 0) {
    sub_4200(&__p, (void *)*v9, v9[1]);
  }
  else {
    std::string __p = *(std::string *)v9;
  }
  sub_6351E8((char **)a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  sub_7FF1F4(a1, a2, v4, (void *)(v4 + 152));
  sub_635CD0((long long **)a2, (uint64_t)&__p);
  if (byte_25CD747 >= 0) {
    unint64_t v10 = (const std::string::value_type *)&qword_25CD730;
  }
  else {
    unint64_t v10 = (const std::string::value_type *)qword_25CD730;
  }
  if (byte_25CD747 >= 0) {
    std::string::size_type v11 = byte_25CD747;
  }
  else {
    std::string::size_type v11 = qword_25CD738;
  }
  std::string::append(&__p, v10, v11);
  sub_6351E8((char **)a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_8912FC(_Unwind_Exception *a1)
{
  sub_4D4880(v1);
  _Unwind_Resume(a1);
}

void sub_891310(_Unwind_Exception *a1)
{
  sub_4D4880(v1);
  _Unwind_Resume(a1);
}

void sub_891324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_4D4880(v14);
    _Unwind_Resume(a1);
  }
  sub_4D4880(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_891360(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 1848);
  uint64_t result = 1;
  switch(v1)
  {
    case 0:
    case 3:
    case 5:
    case 11:
    case 12:
    case 23:
    case 29:
    case 30:
    case 64:
    case 65:
    case 66:
    case 89:
    case 90:
    case 92:
      return result;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

void sub_891510(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 72))(&v12);
  uint64_t v10 = 0;
  std::string::size_type v11 = 0;
  sub_6370D4(a2, &v12, 1, &v10);
  uint64_t v3 = v11;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = v15;
  if (v15)
  {
    do
    {
      unsigned int v5 = (void *)*v4;
      sub_4F4B48((uint64_t)(v4 + 2));
      operator delete(v4);
      uint64_t v4 = v5;
    }
    while (v5);
  }
  BOOL v6 = __p;
  std::string __p = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = (void **)v12;
  if (v12)
  {
    BOOL v8 = v13;
    size_t v9 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      size_t v9 = v12;
    }
    uint64_t v13 = v7;
    operator delete(v9);
  }
}

void sub_89163C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  _Unwind_Resume(a1);
}

void sub_891658(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (byte_25CDBE0[23] < 0) {
    sub_4200(&__dst, *(void **)byte_25CDBE0, *(unint64_t *)&byte_25CDBE0[8]);
  }
  else {
    std::string __dst = *(std::string *)byte_25CDBE0;
  }
  if (sub_6F2880(a1 + 672))
  {
    if (byte_25CD63F >= 0) {
      uint64_t v4 = (const std::string::value_type *)&qword_25CD628;
    }
    else {
      uint64_t v4 = (const std::string::value_type *)qword_25CD628;
    }
    if (byte_25CD63F >= 0) {
      std::string::size_type v5 = byte_25CD63F;
    }
    else {
      std::string::size_type v5 = *(void *)&byte_25CD630;
    }
    std::string::append(&__dst, v4, v5);
    if (sub_6F2DA8(a1 + 672))
    {
      BOOL v6 = &qword_25CD688;
      goto LABEL_17;
    }
    BOOL v7 = sub_6F3124(a1 + 608);
  }
  else
  {
    BOOL v7 = sub_6F2FD8(a1 + 608);
  }
  if (!v7) {
    goto LABEL_24;
  }
  BOOL v6 = (uint64_t *)&xmmword_25CD3D0;
LABEL_17:
  int v8 = *((char *)v6 + 23);
  if (v8 >= 0) {
    size_t v9 = (const std::string::value_type *)v6;
  }
  else {
    size_t v9 = (const std::string::value_type *)*v6;
  }
  if (v8 >= 0) {
    std::string::size_type v10 = *((unsigned __int8 *)v6 + 23);
  }
  else {
    std::string::size_type v10 = v6[1];
  }
  std::string::append(&__dst, v9, v10);
LABEL_24:
  if (byte_25CD747 >= 0) {
    std::string::size_type v11 = (const std::string::value_type *)&qword_25CD730;
  }
  else {
    std::string::size_type v11 = (const std::string::value_type *)qword_25CD730;
  }
  if (byte_25CD747 >= 0) {
    std::string::size_type v12 = byte_25CD747;
  }
  else {
    std::string::size_type v12 = qword_25CD738;
  }
  std::string::append(&__dst, v11, v12);
  sub_891830(a1 + 608, 0, (uint64_t)__p);
  sub_63531C(a2, (uint64_t)&__dst, (uint64_t)__p);
  uint64_t v13 = v17;
  if (v17)
  {
    do
    {
      uint64_t v14 = (void *)*v13;
      sub_4F4B48((uint64_t)(v13 + 2));
      operator delete(v13);
      uint64_t v13 = v14;
    }
    while (v14);
  }
  std::string::size_type v15 = __p[0];
  __p[0] = 0;
  if (v15) {
    operator delete(v15);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_891800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_891830(uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  if (!sub_6F2FD8(a1)) {
    return;
  }
  if ((a2 & 1) == 0)
  {
    BOOL v7 = sub_6F2880(a1 + 64);
    BOOL v6 = &xmmword_25CE600;
    if (v7) {
      BOOL v6 = (long long *)&qword_25CE4F8;
    }
    if ((*((char *)v6 + 23) & 0x80000000) == 0) {
      goto LABEL_4;
    }
LABEL_8:
    sub_4200(__p, *(void **)v6, *((void *)v6 + 1));
    goto LABEL_9;
  }
  BOOL v6 = &xmmword_25CE660;
  if (byte_25CE677 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  *(_OWORD *)std::string __p = *v6;
  uint64_t v11 = *((void *)v6 + 2);
LABEL_9:
  std::string::size_type v12 = __p;
  int v8 = sub_617978(a3, (uint64_t)__p, (uint64_t)&unk_20F06E0, (long long **)&v12);
  std::string::operator=((std::string *)(v8 + 5), (const std::string *)a1);
  v8[8] = *(void *)(a1 + 24);
  std::string::operator=((std::string *)v8 + 3, (const std::string *)(a1 + 32));
  v8[12] = *(void *)(a1 + 56);
  *((_DWORD *)v8 + 26) = *(_DWORD *)(a1 + 64);
  std::string::operator=((std::string *)(v8 + 14), (const std::string *)(a1 + 72));
  std::string::operator=((std::string *)(v8 + 17), (const std::string *)(a1 + 96));
  *((_DWORD *)v8 + 40) = *(_DWORD *)(a1 + 120);
  std::string::operator=((std::string *)v8 + 7, (const std::string *)(a1 + 128));
  if (sub_6F2880(a1 + 64))
  {
    std::string::size_type v12 = (void **)&xmmword_25CE600;
    size_t v9 = sub_617978(a3, (uint64_t)&xmmword_25CE600, (uint64_t)&unk_20F06E0, (long long **)&v12);
    std::string::operator=((std::string *)(v9 + 5), (const std::string *)a1);
    v9[8] = *(void *)(a1 + 24);
    std::string::operator=((std::string *)v9 + 3, (const std::string *)(a1 + 32));
    v9[12] = *(void *)(a1 + 56);
    *((_DWORD *)v9 + 26) = *(_DWORD *)(a1 + 64);
    std::string::operator=((std::string *)(v9 + 14), (const std::string *)(a1 + 72));
    std::string::operator=((std::string *)(v9 + 17), (const std::string *)(a1 + 96));
    *((_DWORD *)v9 + 40) = *(_DWORD *)(a1 + 120);
    std::string::operator=((std::string *)v9 + 7, (const std::string *)(a1 + 128));
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
}

void sub_891A28(_Unwind_Exception *a1)
{
  sub_4DD068(v1);
  _Unwind_Resume(a1);
}

void sub_891A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_4DD068(v14);
  _Unwind_Resume(a1);
}

void sub_891A64(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v2 = *(void *)(a1 + 912);
  uint64_t v3 = *(void *)(a1 + 920);
  if (v2 != v3)
  {
    while (1)
    {
      sub_891CDC(v2, (uint64_t)__p);
      unint64_t v6 = *(void *)(a2 + 8);
      if (v6 >= *(void *)(a2 + 16))
      {
        *(void *)(a2 + 8) = sub_8BE7C4((void ***)a2, (uint64_t)__p);
        std::string::size_type v12 = (void **)v20;
        if (v20) {
          goto LABEL_22;
        }
        goto LABEL_16;
      }
      *(void *)(v6 + 16) = 0;
      *(_OWORD *)unint64_t v6 = 0u;
      *(_OWORD *)unint64_t v6 = *(_OWORD *)__p;
      *(void **)(v6 + 16) = v18[0];
      BOOL v7 = v18[1];
      *(_OWORD *)std::string __p = 0u;
      *(_OWORD *)uint64_t v18 = 0u;
      *(void *)(v6 + 24) = v7;
      *(void *)(v6 + 32) = v19;
      uint64_t v19 = 0;
      int v8 = v20;
      *(void *)(v6 + 40) = v20;
      uint64_t v9 = v21;
      *(void *)(v6 + 48) = v21;
      *(_DWORD *)(v6 + 56) = v22;
      if (v9)
      {
        unint64_t v10 = v8[1];
        unint64_t v11 = *(void *)(v6 + 32);
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v10 >= v11) {
            v10 %= v11;
          }
        }
        else
        {
          v10 &= v11 - 1;
        }
        v7[v10] = v6 + 40;
        unsigned __int8 v20 = 0;
        uint64_t v21 = 0;
      }
      *(unsigned char *)(v6 + 64) = v23;
      *(void *)(a2 + 8) = v6 + 72;
      std::string::size_type v12 = (void **)v20;
      if (v20) {
        break;
      }
LABEL_16:
      uint64_t v13 = v18[1];
      v18[1] = 0;
      if (v13) {
        operator delete(v13);
      }
      uint64_t v14 = (void **)__p[0];
      if (__p[0])
      {
        std::string::size_type v15 = (void **)__p[1];
        std::string::size_type v5 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            if (*((char *)v15 - 1) < 0) {
              operator delete(*(v15 - 3));
            }
            v15 -= 3;
          }
          while (v15 != v14);
          std::string::size_type v5 = __p[0];
        }
        __p[1] = v14;
        operator delete(v5);
      }
      v2 += 152;
      if (v2 == v3) {
        return;
      }
    }
    while (1)
    {
LABEL_22:
      std::string::size_type v16 = (void **)*v12;
      if (*((char *)v12 + 191) < 0)
      {
        operator delete(v12[21]);
        if ((*((char *)v12 + 159) & 0x80000000) == 0)
        {
LABEL_24:
          if ((*((char *)v12 + 135) & 0x80000000) == 0) {
            goto LABEL_25;
          }
          goto LABEL_31;
        }
      }
      else if ((*((char *)v12 + 159) & 0x80000000) == 0)
      {
        goto LABEL_24;
      }
      operator delete(v12[17]);
      if ((*((char *)v12 + 135) & 0x80000000) == 0)
      {
LABEL_25:
        if ((*((char *)v12 + 95) & 0x80000000) == 0) {
          goto LABEL_26;
        }
        goto LABEL_32;
      }
LABEL_31:
      operator delete(v12[14]);
      if ((*((char *)v12 + 95) & 0x80000000) == 0)
      {
LABEL_26:
        if ((*((char *)v12 + 63) & 0x80000000) == 0) {
          goto LABEL_27;
        }
        goto LABEL_33;
      }
LABEL_32:
      operator delete(v12[9]);
      if ((*((char *)v12 + 63) & 0x80000000) == 0)
      {
LABEL_27:
        if (*((char *)v12 + 39) < 0) {
          goto LABEL_34;
        }
        goto LABEL_21;
      }
LABEL_33:
      operator delete(v12[5]);
      if (*((char *)v12 + 39) < 0) {
LABEL_34:
      }
        operator delete(v12[2]);
LABEL_21:
      operator delete(v12);
      std::string::size_type v12 = v16;
      if (!v16) {
        goto LABEL_16;
      }
    }
  }
}

void sub_891CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_4D4880(&a9);
  sub_84F7EC(v9);
  _Unwind_Resume(a1);
}

void sub_891CC8(_Unwind_Exception *a1)
{
  sub_84F7EC(v1);
  _Unwind_Resume(a1);
}

void sub_891CDC(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (byte_25CDB98[23] < 0) {
    sub_4200(&__dst, *(void **)byte_25CDB98, *(unint64_t *)&byte_25CDB98[8]);
  }
  else {
    std::string __dst = *(std::string *)byte_25CDB98;
  }
  if (sub_6F2880(a1 + 64))
  {
    if (byte_25CD63F >= 0) {
      uint64_t v4 = (const std::string::value_type *)&qword_25CD628;
    }
    else {
      uint64_t v4 = (const std::string::value_type *)qword_25CD628;
    }
    if (byte_25CD63F >= 0) {
      std::string::size_type v5 = byte_25CD63F;
    }
    else {
      std::string::size_type v5 = *(void *)&byte_25CD630;
    }
    std::string::append(&__dst, v4, v5);
    if (sub_6F2DA8(a1 + 64))
    {
      unint64_t v6 = &qword_25CD688;
      goto LABEL_17;
    }
    BOOL v7 = sub_6F3124(a1);
  }
  else
  {
    BOOL v7 = sub_6F2FD8(a1);
  }
  if (!v7) {
    goto LABEL_24;
  }
  unint64_t v6 = (uint64_t *)&xmmword_25CD3D0;
LABEL_17:
  int v8 = *((char *)v6 + 23);
  if (v8 >= 0) {
    uint64_t v9 = (const std::string::value_type *)v6;
  }
  else {
    uint64_t v9 = (const std::string::value_type *)*v6;
  }
  if (v8 >= 0) {
    std::string::size_type v10 = *((unsigned __int8 *)v6 + 23);
  }
  else {
    std::string::size_type v10 = v6[1];
  }
  std::string::append(&__dst, v9, v10);
LABEL_24:
  if (byte_25CD747 >= 0) {
    unint64_t v11 = (const std::string::value_type *)&qword_25CD730;
  }
  else {
    unint64_t v11 = (const std::string::value_type *)qword_25CD730;
  }
  if (byte_25CD747 >= 0) {
    std::string::size_type v12 = byte_25CD747;
  }
  else {
    std::string::size_type v12 = qword_25CD738;
  }
  std::string::append(&__dst, v11, v12);
  sub_891830(a1, 0, (uint64_t)__p);
  sub_63531C(a2, (uint64_t)&__dst, (uint64_t)__p);
  uint64_t v13 = v17;
  if (v17)
  {
    do
    {
      uint64_t v14 = (void *)*v13;
      sub_4F4B48((uint64_t)(v13 + 2));
      operator delete(v13);
      uint64_t v13 = v14;
    }
    while (v14);
  }
  std::string::size_type v15 = __p[0];
  __p[0] = 0;
  if (v15) {
    operator delete(v15);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_891E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_891EB4(uint64_t a1@<X8>)
{
  sub_6F30A4((uint64_t)v2);
  sub_891CDC((uint64_t)v2, a1);
  if (v11 < 0)
  {
    operator delete(__p);
    if ((v9 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((v9 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v8);
  if ((v7 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(v6);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v3 & 0x80000000) == 0) {
      return;
    }
LABEL_11:
    operator delete(v2[0]);
    return;
  }
LABEL_10:
  operator delete(v4);
  if (v3 < 0) {
    goto LABEL_11;
  }
}

void sub_891F78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4A50F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_891F8C(std::string *a1@<X0>, uint64_t a2@<X8>)
{
  sub_89234C(a1, (uint64_t)&__s1);
  size_t v4 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  size_t size = __s1.__r_.__value_.__l.__size_;
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v6 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v6 = __s1.__r_.__value_.__l.__size_;
  }
  uint64_t v7 = byte_25CFDA7;
  char v8 = byte_25CFDA7;
  uint64_t v9 = *((void *)&xmmword_25CFD90 + 1);
  if (byte_25CFDA7 >= 0) {
    uint64_t v10 = byte_25CFDA7;
  }
  else {
    uint64_t v10 = *((void *)&xmmword_25CFD90 + 1);
  }
  if (v6 != v10) {
    goto LABEL_19;
  }
  if (byte_25CFDA7 >= 0) {
    char v11 = &xmmword_25CFD90;
  }
  else {
    char v11 = (long long *)xmmword_25CFD90;
  }
  if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(__s1.__r_.__value_.__l.__data_, v11, __s1.__r_.__value_.__l.__size_)) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23))
  {
LABEL_18:
    sub_7FFDB0(a1, &__s1);
    size_t v4 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    size_t size = __s1.__r_.__value_.__l.__size_;
    uint64_t v7 = byte_25CFDA7;
    uint64_t v9 = *((void *)&xmmword_25CFD90 + 1);
    char v8 = byte_25CFDA7;
    goto LABEL_19;
  }
  p_s1 = &__s1;
  uint64_t v13 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v11)
  {
    p_s1 = (std::string *)((char *)p_s1 + 1);
    char v11 = (long long *)((char *)v11 + 1);
    if (!--v13) {
      goto LABEL_18;
    }
  }
LABEL_19:
  if ((v4 & 0x80u) == 0) {
    size_t v14 = v4;
  }
  else {
    size_t v14 = size;
  }
  if (v8 >= 0) {
    uint64_t v15 = v7;
  }
  else {
    uint64_t v15 = v9;
  }
  if (v14 == v15)
  {
    if (v8 >= 0) {
      std::string::size_type v16 = &xmmword_25CFD90;
    }
    else {
      std::string::size_type v16 = (long long *)xmmword_25CFD90;
    }
    if ((v4 & 0x80) != 0)
    {
      if (!memcmp(__s1.__r_.__value_.__l.__data_, v16, size)) {
        goto LABEL_43;
      }
    }
    else
    {
      if (!v4) {
        goto LABEL_43;
      }
      BOOL v17 = &__s1;
      while (v17->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v16)
      {
        BOOL v17 = (std::string *)((char *)v17 + 1);
        std::string::size_type v16 = (long long *)((char *)v16 + 1);
        if (!--v4) {
          goto LABEL_43;
        }
      }
    }
  }
  if (byte_25CD747 >= 0) {
    uint64_t v18 = (const std::string::value_type *)&qword_25CD730;
  }
  else {
    uint64_t v18 = (const std::string::value_type *)qword_25CD730;
  }
  if (byte_25CD747 >= 0) {
    std::string::size_type v19 = byte_25CD747;
  }
  else {
    std::string::size_type v19 = qword_25CD738;
  }
  std::string::append(&__s1, v18, v19);
LABEL_43:
  int v20 = byte_25CFD8F;
  if (byte_25CFD8F >= 0) {
    size_t v21 = byte_25CFD8F;
  }
  else {
    size_t v21 = *((void *)&xmmword_25CFD78 + 1);
  }
  int v22 = byte_25CD747;
  if (byte_25CD747 >= 0) {
    size_t v23 = byte_25CD747;
  }
  else {
    size_t v23 = qword_25CD738;
  }
  unint64_t v24 = v23 + v21;
  if (v23 + v21 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v24 <= 0x16)
  {
    size_t v48 = 0;
    int64_t v49 = 0;
    std::string __p = 0;
    p_p = (char *)&__p;
    HIBYTE(v49) = v23 + v21;
    if (!v21) {
      goto LABEL_56;
    }
    goto LABEL_52;
  }
  uint64_t v42 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v24 | 7) != 0x17) {
    uint64_t v42 = v24 | 7;
  }
  uint64_t v43 = v42 + 1;
  p_p = (char *)operator new(v42 + 1);
  size_t v48 = v23 + v21;
  int64_t v49 = v43 | 0x8000000000000000;
  std::string __p = p_p;
  if (v21)
  {
LABEL_52:
    if (v20 >= 0) {
      size_t v26 = &xmmword_25CFD78;
    }
    else {
      size_t v26 = (long long *)xmmword_25CFD78;
    }
    memmove(p_p, v26, v21);
  }
LABEL_56:
  unint64_t v27 = &p_p[v21];
  if (v23)
  {
    if (v22 >= 0) {
      uint64_t v28 = &qword_25CD730;
    }
    else {
      uint64_t v28 = (uint64_t *)qword_25CD730;
    }
    memmove(v27, v28, v23);
  }
  BOOL v29 = 0;
  v27[v23] = 0;
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v30 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v30 = __s1.__r_.__value_.__l.__size_;
  }
  size_t v31 = HIBYTE(v49);
  int v32 = SHIBYTE(v49);
  if (v49 < 0) {
    size_t v31 = v48;
  }
  if (v30 != v31)
  {
LABEL_84:
    if ((v32 & 0x80000000) == 0) {
      goto LABEL_85;
    }
    goto LABEL_88;
  }
  if (v49 >= 0) {
    long long v33 = (unsigned __int8 *)&__p;
  }
  else {
    long long v33 = (unsigned __int8 *)__p;
  }
  if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    BOOL v29 = memcmp(__s1.__r_.__value_.__l.__data_, v33, __s1.__r_.__value_.__l.__size_) == 0;
    goto LABEL_84;
  }
  if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
  {
    uint64_t v34 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
    uint64_t v35 = &__s1;
    do
    {
      int v37 = v35->__r_.__value_.__s.__data_[0];
      uint64_t v35 = (std::string *)((char *)v35 + 1);
      int v36 = v37;
      int v39 = *v33++;
      int v38 = v39;
      BOOL v41 = v34-- != 0;
      BOOL v29 = v36 == v38;
    }
    while (v36 == v38 && v41);
    goto LABEL_84;
  }
  BOOL v29 = 1;
  if ((SHIBYTE(v49) & 0x80000000) == 0)
  {
LABEL_85:
    if (!v29) {
      goto LABEL_96;
    }
    goto LABEL_89;
  }
LABEL_88:
  operator delete(__p);
  if (!v29) {
    goto LABEL_96;
  }
LABEL_89:
  if (byte_25CD867 >= 0) {
    long long v44 = (const std::string::value_type *)&qword_25CD850;
  }
  else {
    long long v44 = (const std::string::value_type *)qword_25CD850;
  }
  if (byte_25CD867 >= 0) {
    std::string::size_type v45 = byte_25CD867;
  }
  else {
    std::string::size_type v45 = unk_25CD858;
  }
  std::string::append(&__s1, v44, v45);
LABEL_96:
  uint64_t v46 = sub_5231C((uint64_t)&a1->__r_.__value_.__l.__size_);
  sub_63531C(a2, (uint64_t)&__s1, v46);
  sub_7F9700((uint64_t)a1, a2);
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
}

void sub_89231C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_4D4880(v17);
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_89234C(std::string *a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(std::string *))(a1->__r_.__value_.__r.__words[0] + 112))(a1);
  if (!a1[119].__r_.__value_.__s.__data_[22]) {
    return;
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v33 = 0;
  uint64_t v4 = (*(uint64_t (**)(std::string *))(a1->__r_.__value_.__r.__words[0] + 136))(a1);
  (*(void (**)(void **__return_ptr, std::string *, uint64_t))(a1->__r_.__value_.__r.__words[0] + 48))(v30, a1, v4);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v33 = v31;
  *(_OWORD *)std::string __p = *(_OWORD *)v30;
  std::string::size_type v5 = HIBYTE(v31);
  char v6 = HIBYTE(v31);
  uint64_t v7 = v30[1];
  if (v31 >= 0) {
    char v8 = (void *)HIBYTE(v31);
  }
  else {
    char v8 = v30[1];
  }
  BOOL v9 = v8 != 0;
  uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a2 + 8);
  }
  if (v10 && v8)
  {
    if (byte_25CD87F >= 0) {
      char v11 = (const std::string::value_type *)&qword_25CD868;
    }
    else {
      char v11 = (const std::string::value_type *)qword_25CD868;
    }
    if (byte_25CD87F >= 0) {
      std::string::size_type v12 = byte_25CD87F;
    }
    else {
      std::string::size_type v12 = unk_25CD870;
    }
    std::string::append((std::string *)a2, v11, v12);
    std::string::size_type v5 = HIBYTE(v33);
    uint64_t v7 = __p[1];
    char v6 = HIBYTE(v33);
  }
  if (v6 >= 0) {
    uint64_t v13 = __p;
  }
  else {
    uint64_t v13 = (void **)__p[0];
  }
  if (v6 >= 0) {
    std::string::size_type v14 = v5;
  }
  else {
    std::string::size_type v14 = (std::string::size_type)v7;
  }
  std::string::append((std::string *)a2, (const std::string::value_type *)v13, v14);
  int v15 = (*(uint64_t (**)(std::string *))(a1->__r_.__value_.__r.__words[0] + 136))(a1);
  if (std::string::find((const std::string *)a2, 50, 0) != -1)
  {
    LODWORD(v16) = *(char *)(a2 + 23);
    if ((v16 & 0x80000000) != 0)
    {
      if (*(void *)(a2 + 8) != 15) {
        goto LABEL_60;
      }
      BOOL v17 = *(uint64_t **)a2;
    }
    else
    {
      BOOL v17 = (uint64_t *)a2;
      if (v16 != 15)
      {
LABEL_57:
        if (!(_BYTE)v16) {
          goto LABEL_61;
        }
        goto LABEL_70;
      }
    }
    uint64_t v18 = *v17;
    uint64_t v19 = *(uint64_t *)((char *)v17 + 7);
    if (v18 != 0x5F31646C65696853 || v19 != 0x32646C656968535FLL) {
      goto LABEL_56;
    }
  }
  if ((!sub_7FA904((uint64_t)a1) | v15 & v9)) {
    goto LABEL_56;
  }
  uint64_t v21 = (*(uint64_t (**)(std::string *, uint64_t))(a1->__r_.__value_.__r.__words[0] + 56))(a1, a2);
  (*(void (**)(void **__return_ptr, std::string *, uint64_t))(a1->__r_.__value_.__r.__words[0] + 64))(v30, a1, v21);
  uint64_t v22 = *(unsigned __int8 *)(a2 + 23);
  if ((v22 & 0x80u) != 0) {
    uint64_t v22 = *(void *)(a2 + 8);
  }
  if (v22)
  {
    size_t v23 = (void *)HIBYTE(v31);
    if (v31 < 0) {
      size_t v23 = v30[1];
    }
    if (v23)
    {
      if (byte_25CD87F >= 0) {
        unint64_t v24 = (const std::string::value_type *)&qword_25CD868;
      }
      else {
        unint64_t v24 = (const std::string::value_type *)qword_25CD868;
      }
      if (byte_25CD87F >= 0) {
        std::string::size_type v25 = byte_25CD87F;
      }
      else {
        std::string::size_type v25 = unk_25CD870;
      }
      std::string::append((std::string *)a2, v24, v25);
    }
  }
  size_t v26 = v31 >= 0 ? (const std::string::value_type *)v30 : (const std::string::value_type *)v30[0];
  unint64_t v27 = v31 >= 0 ? (void *)HIBYTE(v31) : v30[1];
  std::string::append((std::string *)a2, v26, (std::string::size_type)v27);
  if (SHIBYTE(v31) < 0)
  {
    operator delete(v30[0]);
    LODWORD(v16) = *(char *)(a2 + 23);
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_57;
    }
  }
  else
  {
LABEL_56:
    LODWORD(v16) = *(char *)(a2 + 23);
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_57;
    }
  }
LABEL_60:
  if (!*(void *)(a2 + 8))
  {
LABEL_61:
    if (a1[77].__r_.__value_.__s.__data_[13] && a1[77].__r_.__value_.__s.__data_[8])
    {
      if (byte_25CD36F >= 0) {
        uint64_t v28 = (const std::string::value_type *)&qword_25CD358;
      }
      else {
        uint64_t v28 = (const std::string::value_type *)qword_25CD358;
      }
      if (byte_25CD36F >= 0) {
        std::string::size_type v29 = byte_25CD36F;
      }
      else {
        std::string::size_type v29 = unk_25CD360;
      }
      std::string::append((std::string *)a2, v28, v29);
      LOBYTE(v16) = *(unsigned char *)(a2 + 23);
    }
  }
LABEL_70:
  uint64_t v16 = v16;
  if ((v16 & 0x80u) != 0) {
    uint64_t v16 = *(void *)(a2 + 8);
  }
  if (!v16)
  {
    sub_7F9E6C((uint64_t)a1, (uint64_t)v30);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(_OWORD *)a2 = *(_OWORD *)v30;
    *(void *)(a2 + 16) = v31;
  }
  sub_7FFC7C(a1, (std::string *)a2);
  sub_7FFAC0(a1, (std::string *)a2);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p[0]);
  }
}

void sub_89273C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if (*(char *)(v21 + 23) < 0)
    {
LABEL_6:
      operator delete(*(void **)v21);
      _Unwind_Resume(exception_object);
    }
  }
  else if (*(char *)(v21 + 23) < 0)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(exception_object);
}

void sub_8927B8(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 72))(&v24);
  if (*(unsigned char *)(a2 + 180))
  {
    char v19 = 14;
    strcpy(__p, "Next_Exit_Sign");
    sub_6352AC((uint64_t)&v20, (uint64_t)__p);
  }
  else if (*(unsigned char *)(a2 + 181))
  {
    char v19 = 16;
    strcpy(__p, "Next_U_Turn_Sign");
    sub_6352AC((uint64_t)&v20, (uint64_t)__p);
  }
  else
  {
    switch(a1[462])
    {
      case 2:
      case 0x15:
      case 0x1C:
      case 0x1E:
      case 0x22:
      case 0x3D:
      case 0x3F:
      case 0x42:
        char v19 = 15;
        strcpy(__p, "Next_Right_Sign");
        sub_6352AC((uint64_t)&v20, (uint64_t)__p);
        break;
      default:
        char v19 = 14;
        strcpy(__p, "Next_Left_Sign");
        sub_6352AC((uint64_t)&v20, (uint64_t)__p);
        break;
    }
  }
  if (v19 < 0) {
    operator delete(*(void **)__p);
  }
  sub_6376A0(a3, &v24, 15, &v20, 1);
  char v6 = v23;
  if (v23)
  {
    do
    {
      uint64_t v7 = (void *)*v6;
      sub_4F4B48((uint64_t)(v6 + 2));
      operator delete(v6);
      char v6 = v7;
    }
    while (v7);
  }
  char v8 = v22;
  uint64_t v22 = 0;
  if (v8) {
    operator delete(v8);
  }
  BOOL v9 = (void **)v20;
  if (v20)
  {
    uint64_t v10 = v21;
    char v11 = v20;
    if (v21 != v20)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      char v11 = v20;
    }
    uint64_t v21 = v9;
    operator delete(v11);
  }
  std::string::size_type v12 = v27;
  if (v27)
  {
    do
    {
      uint64_t v13 = (void *)*v12;
      sub_4F4B48((uint64_t)(v12 + 2));
      operator delete(v12);
      std::string::size_type v12 = v13;
    }
    while (v13);
  }
  std::string::size_type v14 = v26;
  size_t v26 = 0;
  if (v14) {
    operator delete(v14);
  }
  int v15 = (void **)v24;
  if (v24)
  {
    uint64_t v16 = v25;
    BOOL v17 = v24;
    if (v25 != v24)
    {
      do
      {
        if (*((char *)v16 - 1) < 0) {
          operator delete(*(v16 - 3));
        }
        v16 -= 3;
      }
      while (v16 != v15);
      BOOL v17 = v24;
    }
    std::string::size_type v25 = v15;
    operator delete(v17);
  }
}

void sub_892A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_4D4880(&a25);
    _Unwind_Resume(a1);
  }
  sub_4D4880(&a25);
  _Unwind_Resume(a1);
}

void sub_892B8C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = 267;
  if (!*(unsigned char *)(a1 + 1946)) {
    uint64_t v5 = 264;
  }
  char v6 = &dword_25CFDC0;
  if (!*(unsigned char *)(a1 + 1946)) {
    char v6 = &dword_25CFDA8;
  }
  uint64_t v7 = &byte_25CFDD7;
  if (!*(unsigned char *)(a1 + 1946)) {
    uint64_t v7 = &byte_25CFDBF;
  }
  if (*v7 < 0)
  {
    if (*(unsigned char *)(a1 + 1946)) {
      char v8 = (unint64_t *)&unk_25CFDC8;
    }
    else {
      char v8 = (unint64_t *)&unk_25CFDB0;
    }
    sub_4200(&v39, (void *)qword_25CF568[v5], *v8);
  }
  else
  {
    long long v39 = *(_OWORD *)v6;
    uint64_t v40 = *((void *)v6 + 2);
  }
  int v9 = SHIBYTE(v40);
  if (v40 >= 0) {
    size_t v10 = HIBYTE(v40);
  }
  else {
    size_t v10 = *((void *)&v39 + 1);
  }
  int v11 = byte_25CD747;
  if (byte_25CD747 >= 0) {
    size_t v12 = byte_25CD747;
  }
  else {
    size_t v12 = qword_25CD738;
  }
  unint64_t v13 = v12 + v10;
  if (v12 + v10 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v13 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v12 + v10;
    if (!v10) {
      goto LABEL_26;
    }
    goto LABEL_22;
  }
  uint64_t v30 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v13 | 7) != 0x17) {
    uint64_t v30 = v13 | 7;
  }
  uint64_t v31 = v30 + 1;
  p_dst = (std::string *)operator new(v30 + 1);
  __dst.__r_.__value_.__l.__size_ = v12 + v10;
  __dst.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v10)
  {
LABEL_22:
    if (v9 >= 0) {
      int v15 = &v39;
    }
    else {
      int v15 = (long long *)v39;
    }
    memmove(p_dst, v15, v10);
  }
LABEL_26:
  uint64_t v16 = (char *)p_dst + v10;
  if (v12)
  {
    if (v11 >= 0) {
      BOOL v17 = &qword_25CD730;
    }
    else {
      BOOL v17 = (uint64_t *)qword_25CD730;
    }
    memmove(v16, v17, v12);
  }
  v16[v12] = 0;
  if (byte_25CD867 >= 0) {
    uint64_t v18 = (const std::string::value_type *)&qword_25CD850;
  }
  else {
    uint64_t v18 = (const std::string::value_type *)qword_25CD850;
  }
  if (byte_25CD867 >= 0) {
    std::string::size_type v19 = byte_25CD867;
  }
  else {
    std::string::size_type v19 = unk_25CD858;
  }
  int v20 = std::string::append(&__dst, v18, v19);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  std::string::size_type v38 = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)int v37 = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  sub_6352AC((uint64_t)&__dst, (uint64_t)v37);
  uint64_t v22 = (std::__shared_weak_count *)operator new(0x80uLL);
  v22->__shared_owners_ = 0;
  v22->__shared_weak_owners_ = 0;
  v22->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
  sub_63D394((uint64_t)&v41, (uint64_t)&v22[1], a2);
  int v32 = &v22[1].__vftable;
  uint64_t v33 = v22;
  sub_6370D4(a3, &__dst, 10, &v32);
  size_t v23 = v33;
  if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  unint64_t v24 = v36;
  if (v36)
  {
    do
    {
      std::string::size_type v25 = (void *)*v24;
      sub_4F4B48((uint64_t)(v24 + 2));
      operator delete(v24);
      unint64_t v24 = v25;
    }
    while (v25);
  }
  size_t v26 = __p;
  std::string __p = 0;
  if (v26) {
    operator delete(v26);
  }
  std::string::size_type v27 = __dst.__r_.__value_.__r.__words[0];
  if (__dst.__r_.__value_.__r.__words[0])
  {
    std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    std::string::size_type v29 = (void *)__dst.__r_.__value_.__r.__words[0];
    if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(size - 1) < 0) {
          operator delete(*(void **)(size - 24));
        }
        size -= 24;
      }
      while (size != v27);
      std::string::size_type v29 = (void *)__dst.__r_.__value_.__r.__words[0];
    }
    __dst.__r_.__value_.__l.__size_ = v27;
    operator delete(v29);
  }
  if ((SHIBYTE(v38) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v40) & 0x80000000) == 0) {
      return;
    }
LABEL_62:
    operator delete((void *)v39);
    return;
  }
  operator delete(v37[0]);
  if (SHIBYTE(v40) < 0) {
    goto LABEL_62;
  }
}

void sub_892ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_14A84((uint64_t)&a10);
  sub_4D4880((void **)&a12);
  if (a29 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v29 - 89) < 0) {
    operator delete(*(void **)(v29 - 112));
  }
  _Unwind_Resume(a1);
}

void sub_892F54(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_8932F0(a1, a2, a3, (uint64_t)&v40);
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  sub_6370D4(&v31, &v40, 1, &v29);
  char v8 = v30;
  if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = *(void *)(a1 + 1952);
  uint64_t v10 = *(void *)(a1 + 1960);
  int v11 = *(_DWORD *)(a1 + 2128);
  size_t v12 = (std::__shared_weak_count *)operator new(0xB98uLL);
  v12->__shared_owners_ = 0;
  p_shared_owners = &v12->__shared_owners_;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)off_243ADD8;
  std::string::size_type v14 = sub_88F378((std::string::size_type)&v12[1], v9, v10, a2, a3, v11 - 1);
  if (BYTE4(v12[120].__shared_weak_owners_))
  {
    sub_892B8C(v14, (uint64_t)&v31, a4);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_6;
    }
  }
  else
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    sub_8A6F8((char *)a4, (uint64_t)v31, (uint64_t)v32, 0xAAAAAAAAAAAAAAABLL * (((char *)v32 - (unsigned char *)v31) >> 3));
    sub_5954B0(a4 + 24, (uint64_t)&__p);
    *(unsigned char *)(a4 + 64) = v35;
    *(_DWORD *)(a4 + 72) = v36;
    uint64_t v16 = v38;
    *(void *)(a4 + 80) = v37;
    *(void *)(a4 + 88) = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(_WORD *)(a4 + 96) = v39;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_6:
      int v15 = v38;
      if (!v38) {
        goto LABEL_14;
      }
      goto LABEL_12;
    }
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  int v15 = v38;
  if (!v38) {
    goto LABEL_14;
  }
LABEL_12:
  if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
LABEL_14:
  BOOL v17 = v34;
  if (v34)
  {
    do
    {
      uint64_t v18 = (void *)*v17;
      sub_4F4B48((uint64_t)(v17 + 2));
      operator delete(v17);
      BOOL v17 = v18;
    }
    while (v18);
  }
  std::string::size_type v19 = __p;
  std::string __p = 0;
  if (v19) {
    operator delete(v19);
  }
  int v20 = (void **)v31;
  if (v31)
  {
    long long v21 = v32;
    uint64_t v22 = v31;
    if (v32 != v31)
    {
      do
      {
        if (*((char *)v21 - 1) < 0) {
          operator delete(*(v21 - 3));
        }
        v21 -= 3;
      }
      while (v21 != v20);
      uint64_t v22 = v31;
    }
    int v32 = v20;
    operator delete(v22);
  }
  size_t v23 = v43;
  if (v43)
  {
    do
    {
      unint64_t v24 = (void *)*v23;
      sub_4F4B48((uint64_t)(v23 + 2));
      operator delete(v23);
      size_t v23 = v24;
    }
    while (v24);
  }
  std::string::size_type v25 = v42;
  uint64_t v42 = 0;
  if (v25) {
    operator delete(v25);
  }
  size_t v26 = (void **)v40;
  if (v40)
  {
    std::string::size_type v27 = v41;
    uint64_t v28 = v40;
    if (v41 != v40)
    {
      do
      {
        if (*((char *)v27 - 1) < 0) {
          operator delete(*(v27 - 3));
        }
        v27 -= 3;
      }
      while (v27 != v26);
      uint64_t v28 = v40;
    }
    char v41 = v26;
    operator delete(v28);
  }
}

void sub_89327C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  if (*v26) {
    sub_20AAD1C((uint64_t)v26, *v26);
  }
  sub_14A84((uint64_t)&a9);
  sub_4F31D0(&a13);
  sub_4D4880(&a26);
  _Unwind_Resume(a1);
}

void sub_8932D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
}

void sub_8932F0(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a2 + 1064);
  uint64_t v9 = *(void *)(a1 + 1952);
  uint64_t v10 = *(void *)(a1 + 1960);
  int v11 = *(_DWORD *)(a1 + 2128) - 1;
  size_t v12 = (std::__shared_weak_count *)operator new(0xB98uLL);
  v12->__shared_owners_ = 0;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)off_243ADD8;
  uint64_t v13 = (uint64_t)&v12[1];
  sub_88F378((std::string::size_type)&v12[1], v9, v10, a2, a3, v11);
  size_t v68 = &v12[1].__vftable;
  unint64_t v69 = v12;
  if (*(unsigned char *)(a1 + 2879))
  {
    if (*(unsigned char *)(v8 + 2400 * a3 + 320))
    {
      int v14 = byte_25CFFCF;
      if (byte_25CFFCF >= 0) {
        size_t v15 = byte_25CFFCF;
      }
      else {
        size_t v15 = *((void *)&xmmword_25CFFB8 + 1);
      }
      int v16 = byte_25CFE07;
      if (byte_25CFE07 >= 0) {
        size_t v17 = byte_25CFE07;
      }
      else {
        size_t v17 = qword_25CFDF8;
      }
      unint64_t v18 = v17 + v15;
      if (v17 + v15 >= 0x7FFFFFFFFFFFFFF8) {
        sub_188D690();
      }
      if (v18 > 0x16)
      {
        uint64_t v54 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v18 | 7) != 0x17) {
          uint64_t v54 = v18 | 7;
        }
        uint64_t v55 = v54 + 1;
        p_dst = (std::string *)operator new(v54 + 1);
        __dst.__r_.__value_.__l.__size_ = v17 + v15;
        __dst.__r_.__value_.__r.__words[2] = v55 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        if (!v15)
        {
LABEL_16:
          long long v21 = (char *)p_dst + v15;
          if (v17)
          {
            if (v16 >= 0) {
              uint64_t v22 = &qword_25CFDF0;
            }
            else {
              uint64_t v22 = (uint64_t *)qword_25CFDF0;
            }
            memmove(v21, v22, v17);
          }
          v21[v17] = 0;
          if (byte_25CD75F >= 0) {
            size_t v23 = (const std::string::value_type *)&qword_25CD748;
          }
          else {
            size_t v23 = (const std::string::value_type *)qword_25CD748;
          }
          if (byte_25CD75F >= 0) {
            std::string::size_type v24 = byte_25CD75F;
          }
          else {
            std::string::size_type v24 = qword_25CD750;
          }
          std::string::size_type v25 = std::string::append(&__dst, v23, v24);
          long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
          std::string::size_type v65 = v25->__r_.__value_.__r.__words[2];
          *(_OWORD *)long long v64 = v26;
          v25->__r_.__value_.__l.__size_ = 0;
          v25->__r_.__value_.__r.__words[2] = 0;
          v25->__r_.__value_.__r.__words[0] = 0;
          sub_6352AC(a4, (uint64_t)v64);
          if (SHIBYTE(v65) < 0)
          {
            operator delete(v64[0]);
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_92;
            }
          }
          else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_92;
          }
          operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_92:
          if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
          return;
        }
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
        p_dst = &__dst;
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v17 + v15;
        if (!v15) {
          goto LABEL_16;
        }
      }
      if (v14 >= 0) {
        int v20 = &xmmword_25CFFB8;
      }
      else {
        int v20 = (long long *)xmmword_25CFFB8;
      }
      memmove(p_dst, v20, v15);
      goto LABEL_16;
    }
    BYTE3(v12[120].__shared_weak_owners_) = 0;
    BYTE5(v12[120].__shared_weak_owners_) = 0;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 72))(v64, a1);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v13 + 72))(&__dst, v13);
  if (sub_636C3C(v64, &__dst))
  {
    sub_7F9E6C(v13, (uint64_t)&v56);
    if (byte_25CD747 >= 0) {
      std::string::size_type v27 = (const std::string::value_type *)&qword_25CD730;
    }
    else {
      std::string::size_type v27 = (const std::string::value_type *)qword_25CD730;
    }
    if (byte_25CD747 >= 0) {
      std::string::size_type v28 = byte_25CD747;
    }
    else {
      std::string::size_type v28 = qword_25CD738;
    }
    uint64_t v29 = std::string::append(&v56, v27, v28);
    sub_6352AC(a4, (uint64_t)v29);
    if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_39;
    }
LABEL_99:
    operator delete(v56.__r_.__value_.__l.__data_);
    uint64_t v30 = v60;
    if (!v60) {
      goto LABEL_41;
    }
    goto LABEL_40;
  }
  sub_635CD0((long long **)&__dst, (uint64_t)&v56);
  if (sub_893960(a1, (char *)&v56))
  {
    uint64_t v36 = byte_25CD747;
    if (byte_25CD747 < 0) {
      uint64_t v36 = qword_25CD738;
    }
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v37 = &v56;
    }
    else {
      uint64_t v37 = (std::string *)v56.__r_.__value_.__r.__words[0];
    }
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v56.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v56.__r_.__value_.__l.__size_;
    }
    __int16 v39 = (char *)v37 + size;
    uint64_t v40 = (char *)&v56 + HIBYTE(v56.__r_.__value_.__r.__words[2]);
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v40 = (char *)(v56.__r_.__value_.__r.__words[0] + v56.__r_.__value_.__l.__size_);
    }
    if (byte_25CD75F >= 0) {
      char v41 = (const std::string::value_type *)&qword_25CD748;
    }
    else {
      char v41 = (const std::string::value_type *)qword_25CD748;
    }
    if (byte_25CD75F >= 0) {
      std::string::size_type v42 = byte_25CD75F;
    }
    else {
      std::string::size_type v42 = qword_25CD750;
    }
    std::string::replace(&v56, &v39[-v36] - (char *)v37, v40 - &v39[-v36], v41, v42);
    sub_6351E8(&__dst.__r_.__value_.__l.__data_, (uint64_t)&v56);
  }
  *(_OWORD *)a4 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  memset(&__dst, 0, sizeof(__dst));
  uint64_t v43 = __p;
  unint64_t v44 = v59;
  std::string::size_type v45 = v60;
  std::string __p = 0;
  unint64_t v59 = 0;
  *(void *)(a4 + 16) = *((void *)&__dst.__r_.__value_.__l + 2);
  *(void *)(a4 + 24) = v43;
  *(void *)(a4 + 32) = v44;
  *(void *)(a4 + 40) = v45;
  uint64_t v46 = v61;
  *(void *)(a4 + 48) = v61;
  *(_DWORD *)(a4 + 56) = v62;
  if (v46)
  {
    unint64_t v47 = v45[1];
    if ((v44 & (v44 - 1)) != 0)
    {
      if (v47 >= v44) {
        v47 %= v44;
      }
    }
    else
    {
      v47 &= v44 - 1;
    }
    v43[v47] = a4 + 40;
    uint64_t v60 = 0;
    uint64_t v61 = 0;
  }
  *(unsigned char *)(a4 + 64) = v63;
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_99;
  }
LABEL_39:
  uint64_t v30 = v60;
  if (!v60) {
    goto LABEL_41;
  }
  do
  {
LABEL_40:
    uint64_t v31 = (void *)*v30;
    sub_4F4B48((uint64_t)(v30 + 2));
    operator delete(v30);
    uint64_t v30 = v31;
  }
  while (v31);
LABEL_41:
  int v32 = __p;
  std::string __p = 0;
  if (v32) {
    operator delete(v32);
  }
  std::string::size_type v33 = __dst.__r_.__value_.__r.__words[0];
  if (__dst.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v34 = __dst.__r_.__value_.__l.__size_;
    char v35 = (void *)__dst.__r_.__value_.__r.__words[0];
    if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v34 - 1) < 0) {
          operator delete(*(void **)(v34 - 24));
        }
        v34 -= 24;
      }
      while (v34 != v33);
      char v35 = (void *)__dst.__r_.__value_.__r.__words[0];
    }
    __dst.__r_.__value_.__l.__size_ = v33;
    operator delete(v35);
  }
  size_t v48 = v67;
  if (v67)
  {
    do
    {
      int64_t v49 = (void *)*v48;
      sub_4F4B48((uint64_t)(v48 + 2));
      operator delete(v48);
      size_t v48 = v49;
    }
    while (v49);
  }
  int v50 = v66;
  size_t v66 = 0;
  if (v50) {
    operator delete(v50);
  }
  size_t v51 = (void **)v64[0];
  if (v64[0])
  {
    std::string::size_type v52 = (void **)v64[1];
    std::string::size_type v53 = v64[0];
    if (v64[1] != v64[0])
    {
      do
      {
        if (*((char *)v52 - 1) < 0) {
          operator delete(*(v52 - 3));
        }
        v52 -= 3;
      }
      while (v52 != v51);
      std::string::size_type v53 = v64[0];
    }
    v64[1] = v51;
    operator delete(v53);
  }
  size_t v12 = v69;
  if (v69) {
    goto LABEL_92;
  }
}

void sub_89385C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_4D4880(&a16);
  sub_4D4880(&a29);
  sub_14A84(v34 - 104);
  _Unwind_Resume(a1);
}

void sub_893918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_4D4880((void **)va);
  sub_14A84(v15 - 104);
  _Unwind_Resume(a1);
}

void sub_893934(_Unwind_Exception *a1)
{
  sub_14A84(v1 - 104);
  _Unwind_Resume(a1);
}

void sub_893948(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL sub_893960(uint64_t a1, char *a2)
{
  int v3 = a2[23];
  if (v3 < 0)
  {
    if (*((void *)a2 + 1) != 11) {
      goto LABEL_10;
    }
    uint64_t v4 = *(uint64_t **)a2;
  }
  else
  {
    uint64_t v4 = (uint64_t *)a2;
    if (v3 != 11) {
      goto LABEL_10;
    }
  }
  uint64_t v5 = *v4;
  uint64_t v6 = *(uint64_t *)((char *)v4 + 3);
  if (v5 == 0x6F525F3164616F52 && v6 == 0x3264616F525F3164) {
    return 1;
  }
LABEL_10:
  uint64_t v8 = *(void *)a2;
  if (v3 >= 0) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = *(char **)a2;
  }
  if (v3 >= 0) {
    uint64_t v10 = a2[23];
  }
  else {
    uint64_t v10 = *((void *)a2 + 1);
  }
  if (byte_25CD267 >= 0) {
    size_t v11 = byte_25CD267;
  }
  else {
    size_t v11 = qword_25CD258;
  }
  if (v11 <= v10)
  {
    if (byte_25CD267 >= 0) {
      uint64_t v13 = &qword_25CD250;
    }
    else {
      uint64_t v13 = (uint64_t *)qword_25CD250;
    }
    BOOL v12 = memcmp(v13, v9, v11) == 0;
  }
  else
  {
    BOOL v12 = 0;
  }
  if (byte_25CD27F >= 0) {
    size_t v14 = byte_25CD27F;
  }
  else {
    size_t v14 = qword_25CD270;
  }
  if (v14 <= v10)
  {
    if (byte_25CD27F >= 0) {
      int v16 = &qword_25CD268;
    }
    else {
      int v16 = (uint64_t *)qword_25CD268;
    }
    BOOL v15 = memcmp(v16, v9, v14) == 0;
    if (!v12 && !v15) {
      return 0;
    }
  }
  else
  {
    BOOL v15 = 0;
    if (!v12) {
      return 0;
    }
  }
  uint64_t v90 = v8;
  if (byte_25CD6CF >= 0) {
    size_t v17 = &qword_25CD6B8;
  }
  else {
    size_t v17 = (uint64_t *)qword_25CD6B8;
  }
  if (byte_25CD6CF >= 0) {
    int64_t v18 = byte_25CD6CF;
  }
  else {
    int64_t v18 = *(void *)&word_25CD6C0;
  }
  BOOL v89 = v12;
  if (v18)
  {
    std::string::size_type v19 = &v9[v10];
    if (v10 >= v18)
    {
      int v31 = *(char *)v17;
      uint64_t v32 = v10;
      std::string::size_type v33 = v9;
      do
      {
        uint64_t v34 = v32 - v18;
        if (v34 == -1) {
          break;
        }
        char v35 = (char *)memchr(v33, v31, v34 + 1);
        if (!v35) {
          break;
        }
        uint64_t v36 = v35;
        if (!memcmp(v35, v17, v18))
        {
          if (v36 == v19 || v36 - v9 == -1) {
            break;
          }
          BOOL v24 = 1;
          if (!v89) {
            goto LABEL_55;
          }
          goto LABEL_59;
        }
        std::string::size_type v33 = v36 + 1;
        uint64_t v32 = v19 - (v36 + 1);
      }
      while (v32 >= v18);
    }
    if (byte_25CD717 >= 0) {
      int v20 = &xmmword_25CD700;
    }
    else {
      int v20 = (long long *)xmmword_25CD700;
    }
    if (byte_25CD717 >= 0) {
      int64_t v21 = byte_25CD717;
    }
    else {
      int64_t v21 = *((void *)&xmmword_25CD700 + 1);
    }
    if (v21)
    {
      if (v10 >= v21)
      {
        int v37 = *(char *)v20;
        uint64_t v38 = v10;
        __int16 v39 = v9;
        do
        {
          uint64_t v40 = v38 - v21;
          if (v40 == -1) {
            break;
          }
          char v41 = (char *)memchr(v39, v37, v40 + 1);
          if (!v41) {
            break;
          }
          uint64_t v22 = v41;
          if (!memcmp(v41, v20, v21)) {
            goto LABEL_52;
          }
          __int16 v39 = v22 + 1;
          uint64_t v38 = v19 - (v22 + 1);
        }
        while (v38 >= v21);
      }
      uint64_t v22 = &v9[v10];
LABEL_52:
      uint64_t v23 = v22 - v9;
      if (v22 == v19) {
        uint64_t v23 = -1;
      }
      BOOL v24 = v23 != -1;
      if (!v89)
      {
LABEL_55:
        uint64_t v25 = v90;
        if (!v15)
        {
          if (!v24) {
            return 0;
          }
          goto LABEL_117;
        }
        goto LABEL_95;
      }
    }
    else
    {
      BOOL v24 = 1;
      if (!v89) {
        goto LABEL_55;
      }
    }
  }
  else
  {
    BOOL v24 = 1;
    if (!v12) {
      goto LABEL_55;
    }
  }
LABEL_59:
  BOOL v88 = v24;
  long long v26 = &v9[v10];
  if (v10 >= 5)
  {
    uint64_t v27 = v10;
    std::string::size_type v28 = v9;
    do
    {
      uint64_t v29 = (char *)memchr(v28, 82, v27 - 4);
      if (!v29) {
        break;
      }
      if (*(_DWORD *)v29 == 1684107090 && v29[4] == 95)
      {
        if (v29 != v26 && v29 - v9 != -1) {
          goto LABEL_118;
        }
        break;
      }
      std::string::size_type v28 = v29 + 1;
      uint64_t v27 = v26 - (unsigned char *)v28;
    }
    while (v26 - (unsigned char *)v28 >= 5);
  }
  if (byte_25CD42F >= 0) {
    std::string::size_type v42 = &xmmword_25CD418;
  }
  else {
    std::string::size_type v42 = (long long *)xmmword_25CD418;
  }
  if (byte_25CD42F >= 0) {
    int64_t v43 = byte_25CD42F;
  }
  else {
    int64_t v43 = *((void *)&xmmword_25CD418 + 1);
  }
  if (v43)
  {
    if (v10 >= v43)
    {
      int v71 = *(char *)v42;
      int v72 = v9;
      do
      {
        if (v10 - v43 == -1) {
          break;
        }
        char v73 = (char *)memchr(v72, v71, v10 - v43 + 1);
        if (!v73) {
          break;
        }
        uint64_t v74 = v73;
        if (!memcmp(v73, v42, v43))
        {
          if (v74 != v26 && v74 - v9 != -1) {
            goto LABEL_118;
          }
          break;
        }
        int v72 = v74 + 1;
        uint64_t v10 = v26 - (v74 + 1);
      }
      while (v10 >= v43);
    }
    uint64_t v44 = sub_658840((uint64_t *)a2, (char *)&xmmword_25CD3E8, 0);
    BOOL v45 = v44 != -1;
    if (v44 != -1)
    {
      if (v88 || v45) {
        goto LABEL_117;
      }
      return 0;
    }
    BOOL v24 = v88;
    if (!v15)
    {
LABEL_116:
      if (v24 || v45)
      {
LABEL_117:
        LOBYTE(v3) = a2[23];
        uint64_t v90 = *(void *)a2;
        goto LABEL_118;
      }
      return 0;
    }
    LOBYTE(v3) = a2[23];
    uint64_t v25 = *(void *)a2;
LABEL_95:
    if ((v3 & 0x80u) == 0) {
      uint64_t v46 = a2;
    }
    else {
      uint64_t v46 = (char *)v25;
    }
    if (byte_25CD45F >= 0) {
      unint64_t v47 = &qword_25CD448;
    }
    else {
      unint64_t v47 = (uint64_t *)qword_25CD448;
    }
    if (byte_25CD45F >= 0) {
      int64_t v48 = byte_25CD45F;
    }
    else {
      int64_t v48 = *(void *)&word_25CD450;
    }
    if (!v48) {
      goto LABEL_117;
    }
    if ((v3 & 0x80u) == 0) {
      uint64_t v49 = v3;
    }
    else {
      uint64_t v49 = *((void *)a2 + 1);
    }
    int v50 = &v46[v49];
    if (v49 >= v48)
    {
      int v75 = *(char *)v47;
      int v76 = v46;
      do
      {
        uint64_t v77 = v49 - v48;
        if (v77 == -1) {
          break;
        }
        int v78 = (char *)memchr(v76, v75, v77 + 1);
        if (!v78) {
          break;
        }
        size_t v51 = v78;
        if (!memcmp(v78, v47, v48)) {
          goto LABEL_110;
        }
        int v76 = v51 + 1;
        uint64_t v49 = v50 - (v51 + 1);
      }
      while (v49 >= v48);
    }
    size_t v51 = v50;
LABEL_110:
    BOOL v45 = v51 != v50 && v51 - v46 != -1;
    goto LABEL_116;
  }
LABEL_118:
  if ((v3 & 0x80u) == 0) {
    std::string::size_type v53 = a2;
  }
  else {
    std::string::size_type v53 = (char *)v90;
  }
  if (byte_25CD447 >= 0) {
    uint64_t v54 = &qword_25CD430;
  }
  else {
    uint64_t v54 = (uint64_t *)qword_25CD430;
  }
  if (byte_25CD447 >= 0) {
    int64_t v55 = byte_25CD447;
  }
  else {
    int64_t v55 = unk_25CD438;
  }
  if (!v55) {
    return 1;
  }
  if ((v3 & 0x80u) == 0) {
    int64_t v56 = v3;
  }
  else {
    int64_t v56 = *((void *)a2 + 1);
  }
  uint64_t v57 = &v53[v56];
  if (v56 >= v55)
  {
    int v65 = *(char *)v54;
    int64_t v66 = v56;
    int v67 = v53;
    do
    {
      int64_t v68 = v66 - v55;
      if (v68 == -1) {
        break;
      }
      unint64_t v69 = (char *)memchr(v67, v65, v68 + 1);
      if (!v69) {
        break;
      }
      v70 = v69;
      if (!memcmp(v69, v54, v55))
      {
        if (v70 != v57 && v70 - v53 != -1) {
          return 1;
        }
        break;
      }
      int v67 = v70 + 1;
      int64_t v66 = v57 - (v70 + 1);
    }
    while (v66 >= v55);
  }
  if (v89)
  {
    if (byte_25CD45F >= 0) {
      long long v58 = &qword_25CD448;
    }
    else {
      long long v58 = (uint64_t *)qword_25CD448;
    }
    if (byte_25CD45F >= 0) {
      int64_t v59 = byte_25CD45F;
    }
    else {
      int64_t v59 = *(void *)&word_25CD450;
    }
    if (!v59) {
      return 1;
    }
    if (v56 >= v59)
    {
      int v82 = *(char *)v58;
      int64_t v83 = v56;
      int v84 = v53;
      do
      {
        int64_t v85 = v83 - v59;
        if (v85 == -1) {
          break;
        }
        long long v86 = (char *)memchr(v84, v82, v85 + 1);
        if (!v86) {
          break;
        }
        long long v87 = v86;
        if (!memcmp(v86, v58, v59))
        {
          if (v87 == v57 || v87 - v53 == -1) {
            break;
          }
          return 1;
        }
        int v84 = v87 + 1;
        int64_t v83 = v57 - (v87 + 1);
      }
      while (v83 >= v59);
    }
  }
  if (byte_25CD477 >= 0) {
    uint64_t v60 = &qword_25CD460;
  }
  else {
    uint64_t v60 = (uint64_t *)qword_25CD460;
  }
  if (byte_25CD477 >= 0) {
    int64_t v61 = byte_25CD477;
  }
  else {
    int64_t v61 = *(void *)&word_25CD468;
  }
  if (!v61) {
    return 1;
  }
  if (v56 >= v61)
  {
    int v79 = *(char *)v60;
    unint64_t v80 = v53;
    do
    {
      if (v56 - v61 == -1) {
        break;
      }
      char v81 = (char *)memchr(v80, v79, v56 - v61 + 1);
      if (!v81) {
        break;
      }
      int v62 = v81;
      if (!memcmp(v81, v60, v61)) {
        return v62 != v57 && v62 - v53 != -1;
      }
      unint64_t v80 = v62 + 1;
      int64_t v56 = v57 - (v62 + 1);
    }
    while (v56 >= v61);
  }
  int v62 = v57;
  return v62 != v57 && v62 - v53 != -1;
}

void sub_89402C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!*(unsigned char *)(a1 + 1856))
  {
    *(void *)(a2 + 64) = 0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_DWORD *)(a2 + 56) = 1065353216;
    *(unsigned char *)(a2 + 64) = 1;
    return;
  }
  sub_635CD0((long long **)(a1 + 8), (uint64_t)&v51);
  uint64_t v4 = v53;
  if ((v53 & 0x80u) == 0) {
    uint64_t v5 = (char *)&v51;
  }
  else {
    uint64_t v5 = (char *)v51;
  }
  if (byte_25CCACF >= 0) {
    uint64_t v6 = &qword_25CCAB8;
  }
  else {
    uint64_t v6 = (uint64_t *)qword_25CCAB8;
  }
  if (byte_25CCACF >= 0) {
    int64_t v7 = byte_25CCACF;
  }
  else {
    int64_t v7 = qword_25CCAC0;
  }
  if (v7)
  {
    if ((v53 & 0x80u) == 0) {
      int64_t v8 = v53;
    }
    else {
      int64_t v8 = v52;
    }
    uint64_t v9 = &v5[v8];
    if (v8 >= v7)
    {
      int v25 = *(char *)v6;
      long long v26 = v5;
      do
      {
        uint64_t v27 = v8 - v7;
        if (v27 == -1) {
          break;
        }
        std::string::size_type v28 = (char *)memchr(v26, v25, v27 + 1);
        if (!v28) {
          break;
        }
        uint64_t v10 = v28;
        if (!memcmp(v28, v6, v7)) {
          goto LABEL_17;
        }
        long long v26 = v10 + 1;
        int64_t v8 = v9 - (v10 + 1);
      }
      while (v8 >= v7);
    }
    uint64_t v10 = v9;
LABEL_17:
    if (v10 == v9) {
      uint64_t v11 = -1;
    }
    else {
      uint64_t v11 = v10 - v5;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  if (byte_25CD507 >= 0) {
    BOOL v12 = &qword_25CD4F0;
  }
  else {
    BOOL v12 = (uint64_t *)qword_25CD4F0;
  }
  if (byte_25CD507 >= 0) {
    int64_t v13 = byte_25CD507;
  }
  else {
    int64_t v13 = qword_25CD4F8;
  }
  if (v13)
  {
    if ((v4 & 0x80u) == 0) {
      int64_t v14 = v4;
    }
    else {
      int64_t v14 = v52;
    }
    BOOL v15 = &v5[v14];
    if (v14 >= v13)
    {
      int v29 = *(char *)v12;
      uint64_t v30 = v5;
      do
      {
        uint64_t v31 = v14 - v13;
        if (v31 == -1) {
          break;
        }
        uint64_t v32 = (char *)memchr(v30, v29, v31 + 1);
        if (!v32) {
          break;
        }
        int v16 = v32;
        if (!memcmp(v32, v12, v13)) {
          goto LABEL_34;
        }
        uint64_t v30 = v16 + 1;
        int64_t v14 = v15 - (v16 + 1);
      }
      while (v14 >= v13);
    }
    int v16 = v15;
LABEL_34:
    if (v16 == v15) {
      int64_t v13 = -1;
    }
    else {
      int64_t v13 = v16 - v5;
    }
  }
  BOOL v17 = sub_6F2FD8(a1 + 456);
  char v18 = v11 != -1 || v17;
  if ((v18 & 1) == 0)
  {
    *(void *)(a2 + 64) = 0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_DWORD *)(a2 + 56) = 1065353216;
    *(unsigned char *)(a2 + 64) = 1;
    goto LABEL_114;
  }
  if (v11 != -1 && (*(_DWORD *)(a1 + 1848) - 41) <= 0x12)
  {
    uint64_t v19 = qword_25CD4F8;
    if (byte_25CD507 >= 0) {
      uint64_t v19 = byte_25CD507;
    }
    std::string::size_type v20 = v19 + v13;
    std::string::size_type v21 = v53;
    if ((v53 & 0x80u) == 0)
    {
      uint64_t v22 = &v51;
    }
    else
    {
      std::string::size_type v21 = v52;
      uint64_t v22 = v51;
    }
    if (v21 >= v20) {
      std::string::size_type v23 = v20;
    }
    else {
      std::string::size_type v23 = v21;
    }
    if (v23 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v23 >= 0x17)
    {
      uint64_t v36 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v23 | 7) != 0x17) {
        uint64_t v36 = v23 | 7;
      }
      uint64_t v37 = v36 + 1;
      p_dst = (std::string *)operator new(v36 + 1);
      __dst.__r_.__value_.__l.__size_ = v23;
      __dst.__r_.__value_.__r.__words[2] = v37 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v23;
      p_dst = &__dst;
      if (!v23)
      {
LABEL_91:
        p_dst->__r_.__value_.__s.__data_[v23] = 0;
        uint64_t v38 = qword_25CCAC0;
        if (byte_25CCACF >= 0) {
          uint64_t v38 = byte_25CCACF;
        }
        unint64_t v39 = v38 + v11;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::size_type size = __dst.__r_.__value_.__l.__size_;
          if (__dst.__r_.__value_.__l.__size_ >= v39)
          {
            char v41 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            size_t v42 = __dst.__r_.__value_.__l.__size_ - v39;
            if (__dst.__r_.__value_.__l.__size_ - v39 <= 0x7FFFFFFFFFFFFFF7)
            {
LABEL_96:
              if (v42 >= 0x17)
              {
                uint64_t v44 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v42 | 7) != 0x17) {
                  uint64_t v44 = v42 | 7;
                }
                uint64_t v45 = v44 + 1;
                int64_t v43 = (long long *)operator new(v44 + 1);
                *((void *)&v48 + 1) = v42;
                *(void *)&long long v49 = v45 | 0x8000000000000000;
                *(void *)&long long v48 = v43;
              }
              else
              {
                BYTE7(v49) = v42;
                int64_t v43 = &v48;
                if (size == v39) {
                  goto LABEL_103;
                }
              }
              memmove(v43, (char *)v41 + v39, v42);
LABEL_103:
              *((unsigned char *)v43 + v42) = 0;
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__dst.__r_.__value_.__l.__data_);
              }
              *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v48;
              __dst.__r_.__value_.__r.__words[2] = v49;
              if (byte_25CD747 >= 0) {
                uint64_t v46 = (const std::string::value_type *)&qword_25CD730;
              }
              else {
                uint64_t v46 = (const std::string::value_type *)qword_25CD730;
              }
              if (byte_25CD747 >= 0) {
                std::string::size_type v47 = byte_25CD747;
              }
              else {
                std::string::size_type v47 = qword_25CD738;
              }
              std::string::append(&__dst, v46, v47);
              sub_6352AC(a2, (uint64_t)&__dst);
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_114;
              }
              char v35 = (void *)__dst.__r_.__value_.__r.__words[0];
              goto LABEL_113;
            }
LABEL_119:
            sub_188D690();
          }
        }
        else
        {
          std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          if (v39 <= HIBYTE(__dst.__r_.__value_.__r.__words[2]))
          {
            char v41 = &__dst;
            size_t v42 = HIBYTE(__dst.__r_.__value_.__r.__words[2]) - v39;
            if (v42 <= 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_96;
            }
            goto LABEL_119;
          }
        }
        sub_5AD0();
      }
    }
    memmove(p_dst, v22, v23);
    goto LABEL_91;
  }
  if (byte_25CE6D8[23] < 0) {
    sub_4200(&__dst, *(void **)byte_25CE6D8, *(unint64_t *)&byte_25CE6D8[8]);
  }
  else {
    std::string __dst = *(std::string *)byte_25CE6D8;
  }
  sub_4AA8E0((char *)&v55, (long long *)(a1 + 456));
  long long v48 = 0u;
  long long v49 = 0u;
  int v50 = 1065353216;
  sub_5955F4((uint64_t)&v48, (uint64_t)&__dst, (uint64_t)&__dst);
  if (v64 < 0)
  {
    operator delete(__p);
    if ((v62 & 0x80000000) == 0)
    {
LABEL_73:
      if ((v60 & 0x80000000) == 0) {
        goto LABEL_74;
      }
      goto LABEL_83;
    }
  }
  else if ((v62 & 0x80000000) == 0)
  {
    goto LABEL_73;
  }
  operator delete(v61);
  if ((v60 & 0x80000000) == 0)
  {
LABEL_74:
    if ((v58 & 0x80000000) == 0) {
      goto LABEL_75;
    }
    goto LABEL_84;
  }
LABEL_83:
  operator delete(v59);
  if ((v58 & 0x80000000) == 0)
  {
LABEL_75:
    if ((v56 & 0x80000000) == 0) {
      goto LABEL_76;
    }
LABEL_85:
    operator delete(v55);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_77;
    }
    goto LABEL_86;
  }
LABEL_84:
  operator delete(v57);
  if (v56 < 0) {
    goto LABEL_85;
  }
LABEL_76:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_77;
  }
LABEL_86:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_77:
  sub_63531C(a2, (uint64_t)&qword_25CCF98, (uint64_t)&v48);
  std::string::size_type v33 = (void *)v49;
  if ((void)v49)
  {
    do
    {
      uint64_t v34 = (void *)*v33;
      sub_4F4B48((uint64_t)(v33 + 2));
      operator delete(v33);
      std::string::size_type v33 = v34;
    }
    while (v34);
  }
  char v35 = (void *)v48;
  *(void *)&long long v48 = 0;
  if (!v35) {
    goto LABEL_114;
  }
LABEL_113:
  operator delete(v35);
LABEL_114:
  if ((char)v53 < 0) {
    operator delete(v51);
  }
}

void sub_8945BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_89463C(uint64_t a1)
{
  if (*(char *)(a1 + 175) < 0)
  {
    operator delete(*(void **)(a1 + 152));
    if ((*(char *)(a1 + 143) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 119) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(char *)(a1 + 143) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 120));
  if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 79) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*(void **)(a1 + 96));
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_13;
  }
LABEL_11:
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 47) < 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
    return a1;
  }
LABEL_13:
  operator delete(*(void **)a1);
  return a1;
}

void sub_8946F8(const std::string *a1@<X1>, uint64_t a2@<X8>)
{
  int v3 = byte_25D0287;
  if (byte_25D0287 >= 0) {
    size_t v4 = byte_25D0287;
  }
  else {
    size_t v4 = qword_25D0278;
  }
  int v5 = byte_25CD72F;
  if (byte_25CD72F >= 0) {
    size_t v6 = byte_25CD72F;
  }
  else {
    size_t v6 = qword_25CD720;
  }
  unint64_t v7 = v6 + v4;
  if (v6 + v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v7 <= 0x16)
  {
    size_t v25 = 0;
    unint64_t v26 = 0;
    std::string __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v26) = v6 + v4;
    if (!v4) {
      goto LABEL_18;
    }
    goto LABEL_14;
  }
  uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v7 | 7) != 0x17) {
    uint64_t v10 = v7 | 7;
  }
  uint64_t v11 = v10 + 1;
  p_dst = (void **)operator new(v10 + 1);
  size_t v25 = v6 + v4;
  unint64_t v26 = v11 | 0x8000000000000000;
  std::string __dst = p_dst;
  if (v4)
  {
LABEL_14:
    if (v3 >= 0) {
      BOOL v12 = &qword_25D0270;
    }
    else {
      BOOL v12 = (uint64_t *)qword_25D0270;
    }
    memmove(p_dst, v12, v4);
  }
LABEL_18:
  int64_t v13 = (char *)p_dst + v4;
  if (v6)
  {
    if (v5 >= 0) {
      int64_t v14 = &qword_25CD718;
    }
    else {
      int64_t v14 = (uint64_t *)qword_25CD718;
    }
    memmove(v13, v14, v6);
  }
  v13[v6] = 0;
  sub_6352AC((uint64_t)&v27, (uint64_t)&__dst);
  if (SHIBYTE(v26) < 0) {
    operator delete(__dst);
  }
  sub_6358F0((uint64_t)&v27, (long long *)&qword_25CE2D0, a1, a1);
  uint64_t v22 = 0;
  std::string::size_type v23 = 0;
  sub_6370D4(a2, &v27, 1, &v22);
  BOOL v15 = v23;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  int v16 = v30;
  if (v30)
  {
    do
    {
      BOOL v17 = (void *)*v16;
      sub_4F4B48((uint64_t)(v16 + 2));
      operator delete(v16);
      int v16 = v17;
    }
    while (v17);
  }
  char v18 = __p;
  std::string __p = 0;
  if (v18) {
    operator delete(v18);
  }
  uint64_t v19 = (void **)v27;
  if (v27)
  {
    std::string::size_type v20 = v28;
    std::string::size_type v21 = v27;
    if (v28 != v27)
    {
      do
      {
        if (*((char *)v20 - 1) < 0) {
          operator delete(*(v20 - 3));
        }
        v20 -= 3;
      }
      while (v20 != v19);
      std::string::size_type v21 = v27;
    }
    std::string::size_type v28 = v19;
    operator delete(v21);
  }
}

void sub_894944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

void sub_894968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_894984(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (byte_25CDC0F < 0)
  {
    sub_4200(&__dst, (void *)xmmword_25CDBF8, *((unint64_t *)&xmmword_25CDBF8 + 1));
  }
  else
  {
    long long __dst = xmmword_25CDBF8;
    uint64_t v23 = unk_25CDC08;
  }
  sub_891830(a1 + 608, 1, (uint64_t)__p);
  sub_63531C((uint64_t)&v18, (uint64_t)&__dst, (uint64_t)__p);
  size_t v4 = v17;
  if (v17)
  {
    do
    {
      int v5 = (void *)*v4;
      sub_4F4B48((uint64_t)(v4 + 2));
      operator delete(v4);
      size_t v4 = v5;
    }
    while (v5);
  }
  size_t v6 = __p[0];
  __p[0] = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v14 = 0;
  BOOL v15 = 0;
  sub_6370D4(a2, &v18, 1, &v14);
  unint64_t v7 = v15;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  int64_t v8 = v21;
  if (v21)
  {
    do
    {
      uint64_t v9 = (void *)*v8;
      sub_4F4B48((uint64_t)(v8 + 2));
      operator delete(v8);
      int64_t v8 = v9;
    }
    while (v9);
  }
  uint64_t v10 = v20;
  std::string::size_type v20 = 0;
  if (v10) {
    operator delete(v10);
  }
  uint64_t v11 = (void **)v18;
  if (v18)
  {
    BOOL v12 = v19;
    int64_t v13 = v18;
    if (v19 != v18)
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 3;
      }
      while (v12 != v11);
      int64_t v13 = v18;
    }
    uint64_t v19 = v11;
    operator delete(v13);
  }
  if (SHIBYTE(v23) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_894B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  sub_14A84((uint64_t)&a9);
  sub_4D4880(&a16);
  if (*(char *)(v16 - 41) < 0) {
    operator delete(*(void **)(v16 - 64));
  }
  _Unwind_Resume(a1);
}

void sub_894B88(unsigned char *a1@<X0>, uint64_t *a2@<X8>)
{
  if (a1[1858])
  {
    uint64_t v82 = 0;
    int64_t v83 = 0;
    sub_6370D4(a2, a1 + 80, 1, &v82);
    size_t v4 = v83;
    if (v83)
    {
      if (!atomic_fetch_add(&v83->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    sub_7FC55C((uint64_t)a1, a2, 1, 0);
    return;
  }
  if (a1[1944])
  {
    uint64_t v5 = (uint64_t)(a1 + 80);
    if (sub_635D10((uint64_t)(a1 + 80), (uint64_t)&xmmword_25CE600))
    {
      sub_7FF084((uint64_t)a1, &v81);
      sub_6352AC((uint64_t)&v76, (uint64_t)&v81);
      uint64_t v69 = 0;
      v70 = 0;
      sub_6370D4(&v71, &v76, 1, &v69);
      size_t v6 = v70;
      if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      int v7 = byte_25CFDEF;
      if (byte_25CFDEF >= 0) {
        size_t v8 = byte_25CFDEF;
      }
      else {
        size_t v8 = qword_25CFDE0;
      }
      int v9 = byte_25CD7A7;
      if (byte_25CD7A7 >= 0) {
        size_t v10 = byte_25CD7A7;
      }
      else {
        size_t v10 = qword_25CD798;
      }
      unint64_t v11 = v10 + v8;
      if (v10 + v8 > 0x7FFFFFFFFFFFFFF7) {
        sub_188D690();
      }
      if (v11 > 0x16)
      {
        uint64_t v43 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17) {
          uint64_t v43 = v11 | 7;
        }
        uint64_t v44 = v43 + 1;
        p_dst = (void **)operator new(v43 + 1);
        size_t v67 = v10 + v8;
        unint64_t v68 = v44 | 0x8000000000000000;
        long long __dst = p_dst;
        if (!v8) {
          goto LABEL_25;
        }
      }
      else
      {
        size_t v67 = 0;
        unint64_t v68 = 0;
        long long __dst = 0;
        p_dst = (void **)&__dst;
        HIBYTE(v68) = v10 + v8;
        if (!v8)
        {
LABEL_25:
          uint64_t v14 = (char *)p_dst + v8;
          if (v10)
          {
            if (v9 >= 0) {
              BOOL v15 = &qword_25CD790;
            }
            else {
              BOOL v15 = (uint64_t *)qword_25CD790;
            }
            memmove(v14, v15, v10);
          }
          v14[v10] = 0;
          uint64_t v16 = sub_5231C(v5);
          sub_63531C((uint64_t)&v62, (uint64_t)&__dst, v16);
          BOOL v17 = (std::__shared_weak_count *)operator new(0x80uLL);
          v17->__shared_owners_ = 0;
          v17->__shared_weak_owners_ = 0;
          v17->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
          sub_59540C((uint64_t)&v84, (uint64_t)&v17[1], (uint64_t)&v71);
          char v60 = &v17[1].__vftable;
          int64_t v61 = v17;
          sub_6370D4(a2, &v62, 13, &v60);
          char v18 = v61;
          if (v61 && !atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
          uint64_t v19 = v65;
          if (v65)
          {
            do
            {
              std::string::size_type v20 = (void *)*v19;
              sub_4F4B48((uint64_t)(v19 + 2));
              operator delete(v19);
              uint64_t v19 = v20;
            }
            while (v20);
          }
          std::string::size_type v21 = __p;
          std::string __p = 0;
          if (v21) {
            operator delete(v21);
          }
          uint64_t v22 = (void **)v62;
          if (v62)
          {
            uint64_t v23 = v63;
            BOOL v24 = v62;
            if (v63 != v62)
            {
              do
              {
                if (*((char *)v23 - 1) < 0) {
                  operator delete(*(v23 - 3));
                }
                v23 -= 3;
              }
              while (v23 != v22);
              BOOL v24 = v62;
            }
            char v63 = v22;
            operator delete(v24);
          }
          if (SHIBYTE(v68) < 0) {
            operator delete(__dst);
          }
          uint64_t v45 = v75;
          if (v75 && !atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
          uint64_t v46 = v74;
          if (v74)
          {
            do
            {
              std::string::size_type v47 = (void *)*v46;
              sub_4F4B48((uint64_t)(v46 + 2));
              operator delete(v46);
              uint64_t v46 = v47;
            }
            while (v47);
          }
          long long v48 = v73;
          char v73 = 0;
          if (v48) {
            operator delete(v48);
          }
          long long v49 = (void **)v71;
          if (v71)
          {
            int v50 = v72;
            size_t v51 = v71;
            if (v72 != v71)
            {
              do
              {
                if (*((char *)v50 - 1) < 0) {
                  operator delete(*(v50 - 3));
                }
                v50 -= 3;
              }
              while (v50 != v49);
              size_t v51 = v71;
            }
            int v72 = v49;
            operator delete(v51);
          }
          std::string::size_type v52 = v80;
          if (v80)
          {
            do
            {
              unsigned __int8 v53 = (void *)*v52;
              sub_4F4B48((uint64_t)(v52 + 2));
              operator delete(v52);
              std::string::size_type v52 = v53;
            }
            while (v53);
          }
          uint64_t v54 = v79;
          int v79 = 0;
          if (v54) {
            operator delete(v54);
          }
          int64_t v55 = v76;
          if (v76)
          {
            char v56 = v77;
            uint64_t v57 = v76;
            if (v77 != v76)
            {
              do
              {
                if (*((char *)v56 - 1) < 0) {
                  operator delete(*(v56 - 3));
                }
                v56 -= 3;
              }
              while (v56 != v55);
              uint64_t v57 = v76;
            }
            uint64_t v77 = v55;
            operator delete(v57);
          }
          if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v81.__r_.__value_.__l.__data_);
          }
          return;
        }
      }
      if (v7 >= 0) {
        int64_t v13 = &qword_25CFDD8;
      }
      else {
        int64_t v13 = (uint64_t *)qword_25CFDD8;
      }
      memmove(p_dst, v13, v8);
      goto LABEL_25;
    }
  }
  if (a1[1945])
  {
    int v25 = byte_25CFD8F;
    if (byte_25CFD8F >= 0) {
      size_t v26 = byte_25CFD8F;
    }
    else {
      size_t v26 = *((void *)&xmmword_25CFD78 + 1);
    }
    int v27 = byte_25CD7A7;
    if (byte_25CD7A7 >= 0) {
      size_t v28 = byte_25CD7A7;
    }
    else {
      size_t v28 = qword_25CD798;
    }
    unint64_t v29 = v28 + v26;
    if (v28 + v26 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v29 > 0x16)
    {
      uint64_t v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v29 | 7) != 0x17) {
        uint64_t v32 = v29 | 7;
      }
      uint64_t v33 = v32 + 1;
      uint64_t v30 = (void **)operator new(v32 + 1);
      uint64_t v77 = (void **)(v28 + v26);
      unint64_t v78 = v33 | 0x8000000000000000;
      int v76 = v30;
      if (!v26) {
        goto LABEL_64;
      }
    }
    else
    {
      uint64_t v77 = 0;
      unint64_t v78 = 0;
      int v76 = 0;
      uint64_t v30 = (void **)&v76;
      HIBYTE(v78) = v28 + v26;
      if (!v26)
      {
LABEL_64:
        char v35 = (char *)v30 + v26;
        if (v28)
        {
          if (v27 >= 0) {
            uint64_t v36 = &qword_25CD790;
          }
          else {
            uint64_t v36 = (uint64_t *)qword_25CD790;
          }
          memmove(v35, v36, v28);
        }
        v35[v28] = 0;
        sub_6352AC((uint64_t)&v71, (uint64_t)&v76);
        if (SHIBYTE(v78) < 0) {
          operator delete(v76);
        }
        sub_6376A0(a2, &v71, 3, a1 + 80, 1);
        uint64_t v37 = v74;
        if (v74)
        {
          do
          {
            uint64_t v38 = (void *)*v37;
            sub_4F4B48((uint64_t)(v37 + 2));
            operator delete(v37);
            uint64_t v37 = v38;
          }
          while (v38);
        }
        unint64_t v39 = v73;
        char v73 = 0;
        if (v39) {
          operator delete(v39);
        }
        uint64_t v40 = (void **)v71;
        if (v71)
        {
          char v41 = v72;
          size_t v42 = v71;
          if (v72 != v71)
          {
            do
            {
              if (*((char *)v41 - 1) < 0) {
                operator delete(*(v41 - 3));
              }
              v41 -= 3;
            }
            while (v41 != v40);
            size_t v42 = v71;
          }
          int v72 = v40;
          operator delete(v42);
        }
        return;
      }
    }
    if (v25 >= 0) {
      uint64_t v34 = &xmmword_25CFD78;
    }
    else {
      uint64_t v34 = (long long *)xmmword_25CFD78;
    }
    memmove(v30, v34, v26);
    goto LABEL_64;
  }
  uint64_t v58 = 0;
  int64_t v59 = 0;
  sub_6370D4(a2, a1 + 80, 2, &v58);
  uint64_t v31 = v59;
  if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
}

void sub_89528C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,char a30)
{
}

uint64_t sub_895380(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 96))();
}

void sub_8953A4(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  sub_6352AC((uint64_t)&v15, a2);
  uint64_t v5 = (std::__shared_weak_count *)operator new(0x80uLL);
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
  sub_63D394((uint64_t)&v19, (uint64_t)&v5[1], a1);
  int64_t v13 = &v5[1].__vftable;
  uint64_t v14 = v5;
  sub_6370D4(a3, &v15, 7, &v13);
  size_t v6 = v14;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  int v7 = v18;
  if (v18)
  {
    do
    {
      size_t v8 = (void *)*v7;
      sub_4F4B48((uint64_t)(v7 + 2));
      operator delete(v7);
      int v7 = v8;
    }
    while (v8);
  }
  int v9 = __p;
  std::string __p = 0;
  if (v9) {
    operator delete(v9);
  }
  size_t v10 = (void **)v15;
  if (v15)
  {
    unint64_t v11 = v16;
    BOOL v12 = v15;
    if (v16 != v15)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != v10);
      BOOL v12 = v15;
    }
    uint64_t v16 = v10;
    operator delete(v12);
  }
}

void sub_895500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

void sub_89551C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v13);
  sub_4D4880(&a11);
  _Unwind_Resume(a1);
}

void sub_89553C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_4D4880((void **)va);
  _Unwind_Resume(a1);
}

void sub_895550(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_895718(a1, (uint64_t *)&v17);
  uint64_t v4 = 252;
  if (!*(unsigned char *)(a1 + 2873)) {
    uint64_t v4 = 258;
  }
  uint64_t v5 = &qword_25CD988;
  if (*(unsigned char *)(a1 + 2873)) {
    uint64_t v5 = &qword_25CD970;
  }
  size_t v6 = (char *)&unk_25CD987;
  if (!*(unsigned char *)(a1 + 2873)) {
    size_t v6 = (char *)&xmmword_25CD990 + 15;
  }
  if (*v6 < 0)
  {
    if (*(unsigned char *)(a1 + 2873)) {
      int v7 = (unint64_t *)&unk_25CD978;
    }
    else {
      int v7 = (unint64_t *)&xmmword_25CD990;
    }
    sub_4200(__p, *(void **)&dword_25CD580[v4], *v7);
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)v5;
    uint64_t v16 = v5[2];
  }
  sub_8953A4((uint64_t)&v17, (uint64_t)__p, a2);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  size_t v8 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  int v9 = v20;
  if (v20)
  {
    do
    {
      size_t v10 = (void *)*v9;
      sub_4F4B48((uint64_t)(v9 + 2));
      operator delete(v9);
      int v9 = v10;
    }
    while (v10);
  }
  unint64_t v11 = v19;
  char v19 = 0;
  if (v11) {
    operator delete(v11);
  }
  BOOL v12 = (void **)v17;
  if (v17)
  {
    int64_t v13 = v18;
    uint64_t v14 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v13 - 1) < 0) {
          operator delete(*(v13 - 3));
        }
        v13 -= 3;
      }
      while (v13 != v12);
      uint64_t v14 = v17;
    }
    char v18 = v12;
    operator delete(v14);
  }
}

void sub_8956E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_8956F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_4F31D0(&a15);
  _Unwind_Resume(a1);
}

void sub_895718(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_7FF084(a1, &v17);
  sub_6352AC((uint64_t)&v13, (uint64_t)&v17);
  uint64_t v11 = 0;
  BOOL v12 = 0;
  sub_6370D4(a2, &v13, 1, &v11);
  uint64_t v4 = v12;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = v16;
  if (v16)
  {
    do
    {
      size_t v6 = (void *)*v5;
      sub_4F4B48((uint64_t)(v5 + 2));
      operator delete(v5);
      uint64_t v5 = v6;
    }
    while (v6);
  }
  int v7 = __p;
  std::string __p = 0;
  if (v7) {
    operator delete(v7);
  }
  size_t v8 = (void **)v13;
  if (v13)
  {
    int v9 = v14;
    size_t v10 = v13;
    if (v14 != v13)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      size_t v10 = v13;
    }
    uint64_t v14 = v8;
    operator delete(v10);
  }
  sub_7FC55C(a1, a2, 0, 0);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
}

void sub_895874(_Unwind_Exception *a1)
{
  sub_4F31D0(v1);
  if (*(char *)(v2 - 33) < 0) {
    operator delete(*(void **)(v2 - 56));
  }
  _Unwind_Resume(a1);
}

void sub_8958B8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_895718(a1, (uint64_t *)&v45);
  uint64_t v4 = 288;
  if (!*(unsigned char *)(a1 + 2873)) {
    uint64_t v4 = 294;
  }
  uint64_t v5 = &qword_25CDA18;
  if (*(unsigned char *)(a1 + 2873)) {
    uint64_t v5 = &qword_25CDA00;
  }
  size_t v6 = (char *)&unk_25CDA17;
  if (!*(unsigned char *)(a1 + 2873)) {
    size_t v6 = (char *)&xmmword_25CDA20 + 15;
  }
  if (*v6 < 0)
  {
    if (*(unsigned char *)(a1 + 2873)) {
      int v7 = (unint64_t *)&unk_25CDA08;
    }
    else {
      int v7 = (unint64_t *)&xmmword_25CDA20;
    }
    sub_4200(&__dst, *(void **)&dword_25CD580[v4], *v7);
  }
  else
  {
    long long __dst = *(_OWORD *)v5;
    uint64_t v44 = v5[2];
  }
  sub_8953A4((uint64_t)&v45, (uint64_t)&__dst, (uint64_t)&v38);
  uint64_t v8 = 306;
  if (!*(unsigned char *)(a1 + 2873)) {
    uint64_t v8 = 309;
  }
  int v9 = &qword_25CEF18;
  if (*(unsigned char *)(a1 + 2873)) {
    int v9 = &qword_25CEF00;
  }
  size_t v10 = (char *)&unk_25CEF17;
  if (!*(unsigned char *)(a1 + 2873)) {
    size_t v10 = (char *)&unk_25CEF2F;
  }
  if (*v10 < 0)
  {
    if (*(unsigned char *)(a1 + 2873)) {
      uint64_t v11 = (unint64_t *)&unk_25CEF08;
    }
    else {
      uint64_t v11 = (unint64_t *)&unk_25CEF20;
    }
    sub_4200(v36, (void *)qword_25CE570[v8], *v11);
  }
  else
  {
    *(_OWORD *)uint64_t v36 = *(_OWORD *)v9;
    uint64_t v37 = v9[2];
  }
  *(_OWORD *)std::string __p = 0u;
  long long v34 = 0u;
  int v35 = 1065353216;
  BOOL v12 = (std::__shared_weak_count *)operator new(0x80uLL);
  v12->__shared_owners_ = 0;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
  sub_63D394((uint64_t)&v50, (uint64_t)&v12[1], (uint64_t)&v38);
  uint64_t v31 = &v12[1].__vftable;
  uint64_t v32 = v12;
  sub_6373D8(a2, (uint64_t)v36, (uint64_t)__p, 5, (uint64_t *)&v31);
  int64_t v13 = v32;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = (void *)v34;
  if ((void)v34)
  {
    do
    {
      BOOL v15 = (void *)*v14;
      sub_4F4B48((uint64_t)(v14 + 2));
      operator delete(v14);
      uint64_t v14 = v15;
    }
    while (v15);
  }
  uint64_t v16 = __p[0];
  __p[0] = 0;
  if (v16) {
    operator delete(v16);
  }
  if (SHIBYTE(v37) < 0) {
    operator delete(v36[0]);
  }
  std::string v17 = v42;
  if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  char v18 = v41;
  if (v41)
  {
    do
    {
      char v19 = (void *)*v18;
      sub_4F4B48((uint64_t)(v18 + 2));
      operator delete(v18);
      char v18 = v19;
    }
    while (v19);
  }
  std::string::size_type v20 = v40;
  uint64_t v40 = 0;
  if (v20) {
    operator delete(v20);
  }
  std::string::size_type v21 = (void **)v38;
  if (v38)
  {
    uint64_t v22 = v39;
    uint64_t v23 = v38;
    if (v39 != v38)
    {
      do
      {
        if (*((char *)v22 - 1) < 0) {
          operator delete(*(v22 - 3));
        }
        v22 -= 3;
      }
      while (v22 != v21);
      uint64_t v23 = v38;
    }
    unint64_t v39 = v21;
    operator delete(v23);
  }
  if (SHIBYTE(v44) < 0) {
    operator delete((void *)__dst);
  }
  BOOL v24 = v49;
  if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  int v25 = v48;
  if (v48)
  {
    do
    {
      size_t v26 = (void *)*v25;
      sub_4F4B48((uint64_t)(v25 + 2));
      operator delete(v25);
      int v25 = v26;
    }
    while (v26);
  }
  int v27 = v47;
  std::string::size_type v47 = 0;
  if (v27) {
    operator delete(v27);
  }
  uint64_t v28 = (uint64_t)v45;
  if (v45)
  {
    uint64_t v29 = v46;
    uint64_t v30 = v45;
    if ((void *)v46 != v45)
    {
      do
      {
        if (*(char *)(v29 - 1) < 0) {
          operator delete(*(void **)(v29 - 24));
        }
        v29 -= 24;
      }
      while (v29 != v28);
      uint64_t v30 = v45;
    }
    uint64_t v46 = v28;
    operator delete(v30);
  }
}

void sub_895C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23)
{
  sub_4F31D0(&a23);
  if (*(char *)(v23 - 153) < 0) {
    operator delete(*(void **)(v23 - 176));
  }
  sub_4F31D0((void **)(v23 - 144));
  _Unwind_Resume(a1);
}

void sub_895D0C(std::string::size_type a1@<X0>, uint64_t a2@<X8>)
{
  sub_89616C(a1, 1, 0, 0, (uint64_t)&v45);
  uint64_t v4 = 288;
  if (!*(unsigned char *)(a1 + 2873)) {
    uint64_t v4 = 294;
  }
  uint64_t v5 = &qword_25CDA18;
  if (*(unsigned char *)(a1 + 2873)) {
    uint64_t v5 = &qword_25CDA00;
  }
  size_t v6 = (char *)&unk_25CDA17;
  if (!*(unsigned char *)(a1 + 2873)) {
    size_t v6 = (char *)&xmmword_25CDA20 + 15;
  }
  if (*v6 < 0)
  {
    if (*(unsigned char *)(a1 + 2873)) {
      int v7 = (unint64_t *)&unk_25CDA08;
    }
    else {
      int v7 = (unint64_t *)&xmmword_25CDA20;
    }
    sub_4200(&__dst, *(void **)&dword_25CD580[v4], *v7);
  }
  else
  {
    long long __dst = *(_OWORD *)v5;
    uint64_t v44 = v5[2];
  }
  sub_8953A4((uint64_t)&v45, (uint64_t)&__dst, (uint64_t)&v38);
  uint64_t v8 = 306;
  if (!*(unsigned char *)(a1 + 2873)) {
    uint64_t v8 = 309;
  }
  int v9 = &qword_25CEF18;
  if (*(unsigned char *)(a1 + 2873)) {
    int v9 = &qword_25CEF00;
  }
  size_t v10 = (char *)&unk_25CEF17;
  if (!*(unsigned char *)(a1 + 2873)) {
    size_t v10 = (char *)&unk_25CEF2F;
  }
  if (*v10 < 0)
  {
    if (*(unsigned char *)(a1 + 2873)) {
      uint64_t v11 = (unint64_t *)&unk_25CEF08;
    }
    else {
      uint64_t v11 = (unint64_t *)&unk_25CEF20;
    }
    sub_4200(v36, (void *)qword_25CE570[v8], *v11);
  }
  else
  {
    *(_OWORD *)uint64_t v36 = *(_OWORD *)v9;
    uint64_t v37 = v9[2];
  }
  *(_OWORD *)std::string __p = 0u;
  long long v34 = 0u;
  int v35 = 1065353216;
  BOOL v12 = (std::__shared_weak_count *)operator new(0x80uLL);
  v12->__shared_owners_ = 0;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
  sub_63D394((uint64_t)&v50, (uint64_t)&v12[1], (uint64_t)&v38);
  uint64_t v31 = &v12[1].__vftable;
  uint64_t v32 = v12;
  sub_6373D8(a2, (uint64_t)v36, (uint64_t)__p, 5, (uint64_t *)&v31);
  int64_t v13 = v32;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = (void *)v34;
  if ((void)v34)
  {
    do
    {
      BOOL v15 = (void *)*v14;
      sub_4F4B48((uint64_t)(v14 + 2));
      operator delete(v14);
      uint64_t v14 = v15;
    }
    while (v15);
  }
  uint64_t v16 = __p[0];
  __p[0] = 0;
  if (v16) {
    operator delete(v16);
  }
  if (SHIBYTE(v37) < 0) {
    operator delete(v36[0]);
  }
  std::string v17 = v42;
  if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  char v18 = v41;
  if (v41)
  {
    do
    {
      char v19 = (void *)*v18;
      sub_4F4B48((uint64_t)(v18 + 2));
      operator delete(v18);
      char v18 = v19;
    }
    while (v19);
  }
  std::string::size_type v20 = v40;
  uint64_t v40 = 0;
  if (v20) {
    operator delete(v20);
  }
  std::string::size_type v21 = (void **)v38;
  if (v38)
  {
    uint64_t v22 = v39;
    uint64_t v23 = v38;
    if (v39 != v38)
    {
      do
      {
        if (*((char *)v22 - 1) < 0) {
          operator delete(*(v22 - 3));
        }
        v22 -= 3;
      }
      while (v22 != v21);
      uint64_t v23 = v38;
    }
    unint64_t v39 = v21;
    operator delete(v23);
  }
  if (SHIBYTE(v44) < 0) {
    operator delete((void *)__dst);
  }
  BOOL v24 = v49;
  if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  int v25 = v48;
  if (v48)
  {
    do
    {
      size_t v26 = (void *)*v25;
      sub_4F4B48((uint64_t)(v25 + 2));
      operator delete(v25);
      int v25 = v26;
    }
    while (v26);
  }
  int v27 = v47;
  std::string::size_type v47 = 0;
  if (v27) {
    operator delete(v27);
  }
  uint64_t v28 = v45;
  if (v45)
  {
    uint64_t v29 = v46;
    uint64_t v30 = v45;
    if (v46 != v45)
    {
      do
      {
        if (*((char *)v29 - 1) < 0) {
          operator delete(*(v29 - 3));
        }
        v29 -= 3;
      }
      while (v29 != v28);
      uint64_t v30 = v45;
    }
    uint64_t v46 = v28;
    operator delete(v30);
  }
}

void sub_8960E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23)
{
  sub_4F31D0(&a23);
  if (*(char *)(v23 - 153) < 0) {
    operator delete(*(void **)(v23 - 176));
  }
  sub_4F31D0((void **)(v23 - 144));
  _Unwind_Resume(a1);
}

void sub_89616C(std::string::size_type a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  if (a3)
  {
    if (*(unsigned char *)(a1 + 2872))
    {
      if ((*(_DWORD *)(a1 + 1848) - 41) >= 0x13)
      {
        sub_896E24(a1, a5);
        return;
      }
LABEL_12:
      if (a2)
      {
        __dst[0] = 0;
        __dst[1] = 0;
        unint64_t v58 = 0;
        sub_8A6F8((char *)__dst, *(void *)(a1 + 80), *(void *)(a1 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3));
        sub_5954B0((uint64_t)&v59, a1 + 104);
        char v61 = *(unsigned char *)(a1 + 144);
      }
      else
      {
        sub_7FC804(a1, (uint64_t)&__p);
        sub_7F53F4(a1, 1, (uint64_t)&__p, (uint64_t)__dst);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v55 = 0;
      char v56 = 0;
      sub_6370D4(&__p, __dst, 1, &v55);
      int v9 = v56;
      if (v56 && !atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
        if (*(unsigned char *)(a1 + 2875)) {
          goto LABEL_19;
        }
      }
      else if (*(unsigned char *)(a1 + 2875))
      {
LABEL_19:
        BOOL v10 = 1;
        goto LABEL_22;
      }
      BOOL v10 = *(unsigned char *)(a1 + 2876) != 0;
LABEL_22:
      sub_7FC55C(a1, (uint64_t *)&__p, 0, v10);
      if (v10)
      {
        int v11 = *(unsigned __int8 *)(a1 + 1859);
        BOOL v12 = (std::__shared_weak_count *)operator new(0x80uLL);
        v12->__shared_owners_ = 0;
        v12->__shared_weak_owners_ = 0;
        v12->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
        sub_59540C((uint64_t)&v74, (uint64_t)&v12[1], (uint64_t)&__p);
        unsigned __int8 v53 = &v12[1].__vftable;
        uint64_t v54 = v12;
        if (v11) {
          uint64_t v13 = 5;
        }
        else {
          uint64_t v13 = 10;
        }
        sub_8994E4(a1, (uint64_t *)&v53, v13, a5);
        uint64_t v14 = v54;
        if (v54 && !atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
          BOOL v15 = (std::__shared_weak_count *)*((void *)&v72 + 1);
          if (!*((void *)&v72 + 1)) {
            goto LABEL_58;
          }
          goto LABEL_33;
        }
      }
      else
      {
        if (!*(unsigned char *)(a1 + 1862))
        {
          if (a4) {
            sub_637918(&__p, (uint64_t)&xmmword_25CCEF0);
          }
          *(_OWORD *)a5 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          memset(&__p, 0, sizeof(__p));
          uint64_t v22 = v65;
          unint64_t v23 = v66;
          BOOL v24 = v67;
          int v65 = 0;
          unint64_t v66 = 0;
          *(void *)(a5 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
          *(void *)(a5 + 24) = v22;
          *(void *)(a5 + 32) = v23;
          *(void *)(a5 + 40) = v24;
          uint64_t v25 = v68;
          *(void *)(a5 + 48) = v68;
          *(_DWORD *)(a5 + 56) = v69;
          if (v25)
          {
            unint64_t v26 = v24[1];
            if ((v23 & (v23 - 1)) != 0)
            {
              if (v26 >= v23) {
                v26 %= v23;
              }
            }
            else
            {
              v26 &= v23 - 1;
            }
            v22[v26] = a5 + 40;
            size_t v67 = 0;
            uint64_t v68 = 0;
          }
          *(unsigned char *)(a5 + 64) = v70;
          *(_DWORD *)(a5 + 72) = v71;
          *(_OWORD *)(a5 + 80) = v72;
          long long v72 = 0uLL;
          *(_WORD *)(a5 + 96) = v73;
          BOOL v15 = (std::__shared_weak_count *)*((void *)&v72 + 1);
          if (!*((void *)&v72 + 1))
          {
LABEL_58:
            uint64_t v28 = v67;
            if (v67)
            {
              do
              {
                uint64_t v29 = (void *)*v28;
                sub_4F4B48((uint64_t)(v28 + 2));
                operator delete(v28);
                uint64_t v28 = v29;
              }
              while (v29);
            }
            uint64_t v30 = v65;
            int v65 = 0;
            if (v30) {
              operator delete(v30);
            }
            std::string::size_type v31 = __p.__r_.__value_.__r.__words[0];
            if (__p.__r_.__value_.__r.__words[0])
            {
              std::string::size_type size = __p.__r_.__value_.__l.__size_;
              uint64_t v33 = (void *)__p.__r_.__value_.__r.__words[0];
              if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
              {
                do
                {
                  if (*(char *)(size - 1) < 0) {
                    operator delete(*(void **)(size - 24));
                  }
                  size -= 24;
                }
                while (size != v31);
                uint64_t v33 = (void *)__p.__r_.__value_.__r.__words[0];
              }
              __p.__r_.__value_.__l.__size_ = v31;
              operator delete(v33);
            }
            long long v34 = v60;
            if (v60)
            {
              do
              {
                int v35 = (void *)*v34;
                sub_4F4B48((uint64_t)(v34 + 2));
                operator delete(v34);
                long long v34 = v35;
              }
              while (v35);
            }
            uint64_t v36 = v59;
            int64_t v59 = 0;
            if (v36) {
              operator delete(v36);
            }
            uint64_t v37 = (void **)__dst[0];
            if (__dst[0])
            {
              uint64_t v38 = (void **)__dst[1];
              unint64_t v39 = __dst[0];
              if (__dst[1] != __dst[0])
              {
                do
                {
                  if (*((char *)v38 - 1) < 0) {
                    operator delete(*(v38 - 3));
                  }
                  v38 -= 3;
                }
                while (v38 != v37);
                unint64_t v39 = __dst[0];
              }
              __dst[1] = v37;
              goto LABEL_82;
            }
            return;
          }
LABEL_33:
          if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
          goto LABEL_58;
        }
        sub_899800(a1, a5);
      }
      BOOL v15 = (std::__shared_weak_count *)*((void *)&v72 + 1);
      if (!*((void *)&v72 + 1)) {
        goto LABEL_58;
      }
      goto LABEL_33;
    }
  }
  else if (*(unsigned char *)(a1 + 2872))
  {
    goto LABEL_12;
  }
  if (!*(unsigned char *)(a1 + 2125)) {
    goto LABEL_12;
  }
  if (a2)
  {
    if ((byte_25CDA47 & 0x80000000) == 0)
    {
      uint64_t v8 = &xmmword_25CDA30;
LABEL_52:
      *(_OWORD *)long long __dst = *v8;
      unint64_t v58 = *((void *)v8 + 2);
      goto LABEL_99;
    }
    int v27 = &xmmword_25CDA30;
    goto LABEL_98;
  }
  if (!a4)
  {
    if ((byte_25CDA5F & 0x80000000) == 0)
    {
      uint64_t v8 = &xmmword_25CDA48;
      goto LABEL_52;
    }
    int v27 = &xmmword_25CDA48;
LABEL_98:
    sub_4200(__dst, *(void **)v27, *((void *)v27 + 1));
    goto LABEL_99;
  }
  int v16 = byte_25CCF07;
  if (byte_25CCF07 >= 0) {
    size_t v17 = byte_25CCF07;
  }
  else {
    size_t v17 = *((void *)&xmmword_25CCEF0 + 1);
  }
  int v18 = byte_25CDA5F;
  if (byte_25CDA5F >= 0) {
    size_t v19 = byte_25CDA5F;
  }
  else {
    size_t v19 = *((void *)&xmmword_25CDA48 + 1);
  }
  unint64_t v20 = v19 + v17;
  if (v19 + v17 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v20 > 0x16)
  {
    uint64_t v40 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17) {
      uint64_t v40 = v20 | 7;
    }
    uint64_t v41 = v40 + 1;
    std::string::size_type v21 = (char *)operator new(v40 + 1);
    __dst[1] = (void *)(v19 + v17);
    unint64_t v58 = v41 | 0x8000000000000000;
    __dst[0] = v21;
  }
  else
  {
    __dst[1] = 0;
    unint64_t v58 = 0;
    __dst[0] = 0;
    std::string::size_type v21 = (char *)__dst;
    HIBYTE(v58) = v19 + v17;
  }
  if (v17)
  {
    if (v16 >= 0) {
      size_t v42 = &xmmword_25CCEF0;
    }
    else {
      size_t v42 = (long long *)xmmword_25CCEF0;
    }
    memmove(v21, v42, v17);
  }
  uint64_t v43 = &v21[v17];
  if (v19)
  {
    if (v18 >= 0) {
      uint64_t v44 = &xmmword_25CDA48;
    }
    else {
      uint64_t v44 = (long long *)xmmword_25CDA48;
    }
    memmove(v43, v44, v19);
  }
  v43[v19] = 0;
LABEL_99:
  uint64_t v62 = 0;
  char v63 = 0;
  sub_6370D4(&__p, a1 + 80, 1, &v62);
  uint64_t v45 = v63;
  if (v63 && !atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
  sub_7FC55C(a1, (uint64_t *)&__p, 0, 0);
  sub_8953A4((uint64_t)&__p, (uint64_t)__dst, a5);
  uint64_t v46 = (std::__shared_weak_count *)*((void *)&v72 + 1);
  if (*((void *)&v72 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v72 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
  }
  std::string::size_type v47 = v67;
  if (v67)
  {
    do
    {
      long long v48 = (void *)*v47;
      sub_4F4B48((uint64_t)(v47 + 2));
      operator delete(v47);
      std::string::size_type v47 = v48;
    }
    while (v48);
  }
  long long v49 = v65;
  int v65 = 0;
  if (v49) {
    operator delete(v49);
  }
  std::string::size_type v50 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v51 = __p.__r_.__value_.__l.__size_;
    std::string::size_type v52 = (void *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v51 - 1) < 0) {
          operator delete(*(void **)(v51 - 24));
        }
        v51 -= 24;
      }
      while (v51 != v50);
      std::string::size_type v52 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    __p.__r_.__value_.__l.__size_ = v50;
    operator delete(v52);
  }
  if (SHIBYTE(v58) < 0)
  {
    unint64_t v39 = __dst[0];
LABEL_82:
    operator delete(v39);
  }
}

void sub_8968B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_896970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  _Unwind_Resume(a1);
}

void sub_8969A8(unsigned char *a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void ***__return_ptr))(*(void *)a1 + 168))(&v45);
  uint64_t v4 = 288;
  if (!a1[2873]) {
    uint64_t v4 = 294;
  }
  uint64_t v5 = &qword_25CDA18;
  if (a1[2873]) {
    uint64_t v5 = &qword_25CDA00;
  }
  uint64_t v6 = (char *)&unk_25CDA17;
  if (!a1[2873]) {
    uint64_t v6 = (char *)&xmmword_25CDA20 + 15;
  }
  if (*v6 < 0)
  {
    if (a1[2873]) {
      int v7 = (unint64_t *)&unk_25CDA08;
    }
    else {
      int v7 = (unint64_t *)&xmmword_25CDA20;
    }
    sub_4200(&__dst, *(void **)&dword_25CD580[v4], *v7);
  }
  else
  {
    long long __dst = *(_OWORD *)v5;
    uint64_t v44 = v5[2];
  }
  sub_8953A4((uint64_t)&v45, (uint64_t)&__dst, (uint64_t)&v38);
  uint64_t v8 = 306;
  if (!a1[2873]) {
    uint64_t v8 = 309;
  }
  int v9 = &qword_25CEF18;
  if (a1[2873]) {
    int v9 = &qword_25CEF00;
  }
  BOOL v10 = (char *)&unk_25CEF17;
  if (!a1[2873]) {
    BOOL v10 = (char *)&unk_25CEF2F;
  }
  if (*v10 < 0)
  {
    if (a1[2873]) {
      int v11 = (unint64_t *)&unk_25CEF08;
    }
    else {
      int v11 = (unint64_t *)&unk_25CEF20;
    }
    sub_4200(v36, (void *)qword_25CE570[v8], *v11);
  }
  else
  {
    *(_OWORD *)uint64_t v36 = *(_OWORD *)v9;
    uint64_t v37 = v9[2];
  }
  *(_OWORD *)std::string __p = 0u;
  long long v34 = 0u;
  int v35 = 1065353216;
  BOOL v12 = (std::__shared_weak_count *)operator new(0x80uLL);
  v12->__shared_owners_ = 0;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
  sub_63D394((uint64_t)&v50, (uint64_t)&v12[1], (uint64_t)&v38);
  std::string::size_type v31 = &v12[1].__vftable;
  uint64_t v32 = v12;
  sub_6373D8(a2, (uint64_t)v36, (uint64_t)__p, 5, (uint64_t *)&v31);
  uint64_t v13 = v32;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = (void *)v34;
  if ((void)v34)
  {
    do
    {
      BOOL v15 = (void *)*v14;
      sub_4F4B48((uint64_t)(v14 + 2));
      operator delete(v14);
      uint64_t v14 = v15;
    }
    while (v15);
  }
  int v16 = __p[0];
  __p[0] = 0;
  if (v16) {
    operator delete(v16);
  }
  if (SHIBYTE(v37) < 0) {
    operator delete(v36[0]);
  }
  size_t v17 = v42;
  if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  int v18 = v41;
  if (v41)
  {
    do
    {
      size_t v19 = (void *)*v18;
      sub_4F4B48((uint64_t)(v18 + 2));
      operator delete(v18);
      int v18 = v19;
    }
    while (v19);
  }
  unint64_t v20 = v40;
  uint64_t v40 = 0;
  if (v20) {
    operator delete(v20);
  }
  std::string::size_type v21 = (void **)v38;
  if (v38)
  {
    uint64_t v22 = v39;
    unint64_t v23 = v38;
    if (v39 != v38)
    {
      do
      {
        if (*((char *)v22 - 1) < 0) {
          operator delete(*(v22 - 3));
        }
        v22 -= 3;
      }
      while (v22 != v21);
      unint64_t v23 = v38;
    }
    unint64_t v39 = v21;
    operator delete(v23);
  }
  if (SHIBYTE(v44) < 0) {
    operator delete((void *)__dst);
  }
  BOOL v24 = v49;
  if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  uint64_t v25 = v48;
  if (v48)
  {
    do
    {
      unint64_t v26 = (void *)*v25;
      sub_4F4B48((uint64_t)(v25 + 2));
      operator delete(v25);
      uint64_t v25 = v26;
    }
    while (v26);
  }
  int v27 = v47;
  std::string::size_type v47 = 0;
  if (v27) {
    operator delete(v27);
  }
  uint64_t v28 = v45;
  if (v45)
  {
    uint64_t v29 = v46;
    uint64_t v30 = v45;
    if (v46 != v45)
    {
      do
      {
        if (*((char *)v29 - 1) < 0) {
          operator delete(*(v29 - 3));
        }
        v29 -= 3;
      }
      while (v29 != v28);
      uint64_t v30 = v45;
    }
    uint64_t v46 = v28;
    operator delete(v30);
  }
}

void sub_896D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23)
{
  sub_4F31D0(&a23);
  if (*(char *)(v23 - 153) < 0) {
    operator delete(*(void **)(v23 - 176));
  }
  sub_4F31D0((void **)(v23 - 144));
  _Unwind_Resume(a1);
}

void sub_896E24(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!*(unsigned char *)(a1 + 2873))
  {
    if (*(unsigned char *)(a1 + 2874)) {
      uint64_t v4 = &qword_25CD958;
    }
    else {
      uint64_t v4 = &qword_25CD940;
    }
    if ((*((char *)v4 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_8:
    sub_4200(&__dst, (void *)*v4, v4[1]);
    goto LABEL_9;
  }
  uint64_t v4 = (uint64_t *)&xmmword_25CD928;
  if (byte_25CD93F < 0) {
    goto LABEL_8;
  }
LABEL_3:
  long long __dst = *(_OWORD *)v4;
  uint64_t v18 = v4[2];
LABEL_9:
  sub_89616C(&v12, a1, 1, 0, 0);
  sub_6379F8((uint64_t *)&v12, (char *)&qword_25CD400);
  sub_8953A4((uint64_t)&v12, (uint64_t)&__dst, a2);
  uint64_t v5 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = v15;
  if (v15)
  {
    do
    {
      int v7 = (void *)*v6;
      sub_4F4B48((uint64_t)(v6 + 2));
      operator delete(v6);
      uint64_t v6 = v7;
    }
    while (v7);
  }
  uint64_t v8 = __p;
  std::string __p = 0;
  if (v8) {
    operator delete(v8);
  }
  int v9 = (void **)v12;
  if (v12)
  {
    BOOL v10 = v13;
    int v11 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      int v11 = v12;
    }
    uint64_t v13 = v9;
    operator delete(v11);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_896FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (*(char *)(v10 - 25) < 0) {
    operator delete(*(void **)(v10 - 48));
  }
  _Unwind_Resume(exception_object);
}

void sub_896FF4(std::string::size_type a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v5 = sub_63A8F8(a2);
  uint64_t v6 = 309;
  if (v5) {
    uint64_t v6 = 306;
  }
  int v7 = &qword_25CEF18;
  if (v5) {
    int v7 = &qword_25CEF00;
  }
  uint64_t v8 = (char *)&unk_25CEF2F;
  if (v5) {
    uint64_t v8 = (char *)&unk_25CEF17;
  }
  if (*v8 < 0)
  {
    int v9 = (void *)qword_25CE570[v6];
    uint64_t v10 = 309;
    if (v5) {
      uint64_t v10 = 306;
    }
    sub_4200(&__dst, v9, qword_25CE570[v10 + 1]);
  }
  else
  {
    long long __dst = *(_OWORD *)v7;
    uint64_t v47 = v7[2];
  }
  long long v43 = 0u;
  long long v44 = 0u;
  int v45 = 1065353216;
  int v11 = sub_897368(a1);
  sub_89616C(a1, 0, 0, 0, (uint64_t)v30);
  BOOL v12 = (char *)operator new(0x80uLL);
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *(void *)BOOL v12 = off_243A0E0;
  *(_OWORD *)(v12 + 24) = *(_OWORD *)v30;
  v30[0] = 0;
  v30[1] = 0;
  uint64_t v14 = v31;
  uint64_t v13 = __p;
  unint64_t v15 = v33;
  int v16 = v34;
  std::string __p = 0;
  unint64_t v33 = 0;
  uint64_t v31 = 0;
  *((void *)v12 + 5) = v14;
  *((void *)v12 + 6) = v13;
  *((void *)v12 + 7) = v15;
  *((void *)v12 + 8) = v16;
  uint64_t v17 = v35;
  *((void *)v12 + 9) = v35;
  *((_DWORD *)v12 + 20) = v36;
  if (v17)
  {
    unint64_t v18 = v16[1];
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v18 >= v15) {
        v18 %= v15;
      }
    }
    else
    {
      v18 &= v15 - 1;
    }
    v13[v18] = v12 + 64;
    long long v34 = 0;
    uint64_t v35 = 0;
  }
  v12[88] = v37;
  *((_DWORD *)v12 + 24) = v38;
  *(_OWORD *)(v12 + 104) = v39;
  long long v39 = 0uLL;
  *((_WORD *)v12 + 60) = v40;
  uint64_t v41 = v12 + 24;
  size_t v42 = (std::__shared_weak_count *)v12;
  sub_6373D8(a3, (uint64_t)&__dst, (uint64_t)&v43, v11, (uint64_t *)&v41);
  size_t v19 = v42;
  if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  unint64_t v20 = (std::__shared_weak_count *)*((void *)&v39 + 1);
  if (*((void *)&v39 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v39 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  std::string::size_type v21 = v34;
  if (v34)
  {
    do
    {
      uint64_t v22 = (void *)*v21;
      sub_4F4B48((uint64_t)(v21 + 2));
      operator delete(v21);
      std::string::size_type v21 = v22;
    }
    while (v22);
  }
  uint64_t v23 = __p;
  std::string __p = 0;
  if (v23) {
    operator delete(v23);
  }
  BOOL v24 = (void **)v30[0];
  if (v30[0])
  {
    uint64_t v25 = (void **)v30[1];
    unint64_t v26 = v30[0];
    if (v30[1] != v30[0])
    {
      do
      {
        if (*((char *)v25 - 1) < 0) {
          operator delete(*(v25 - 3));
        }
        v25 -= 3;
      }
      while (v25 != v24);
      unint64_t v26 = v30[0];
    }
    v30[1] = v24;
    operator delete(v26);
  }
  int v27 = (void *)v44;
  if ((void)v44)
  {
    do
    {
      uint64_t v28 = (void *)*v27;
      sub_4F4B48((uint64_t)(v27 + 2));
      operator delete(v27);
      int v27 = v28;
    }
    while (v28);
  }
  uint64_t v29 = (void *)v43;
  *(void *)&long long v43 = 0;
  if (v29) {
    operator delete(v29);
  }
  if (SHIBYTE(v47) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_897320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  sub_14A84((uint64_t)&a23);
  sub_4F31D0(&a9);
  sub_4DD068(v23 - 112);
  if (*(char *)(v23 - 41) < 0) {
    operator delete(*(void **)(v23 - 64));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_897368(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 2872)) {
    BOOL v1 = 0;
  }
  else {
    BOOL v1 = *(unsigned char *)(a1 + 2125) != 0;
  }
  sub_7FC804(a1, (uint64_t)&__s1);
  if ((v21 & 0x80u) == 0) {
    size_t v2 = v21;
  }
  else {
    size_t v2 = __n;
  }
  uint64_t v3 = qword_25CD7E0;
  if (byte_25CD7EF >= 0) {
    uint64_t v3 = byte_25CD7EF;
  }
  if (v2 != v3)
  {
    BOOL v14 = 0;
LABEL_24:
    if (v1 || v14) {
      uint64_t v15 = 5;
    }
    else {
      uint64_t v15 = 13;
    }
    if ((v21 & 0x80) == 0) {
      return v15;
    }
    uint64_t v17 = __s1;
    goto LABEL_36;
  }
  if (byte_25CD7EF >= 0) {
    uint64_t v4 = &qword_25CD7D8;
  }
  else {
    uint64_t v4 = (uint64_t *)qword_25CD7D8;
  }
  if ((v21 & 0x80) != 0)
  {
    uint64_t v17 = __s1;
    if (!memcmp(__s1, v4, __n) || v1) {
      uint64_t v15 = 5;
    }
    else {
      uint64_t v15 = 13;
    }
LABEL_36:
    operator delete(v17);
    return v15;
  }
  if (v21)
  {
    uint64_t v5 = v21 - 1;
    p_s1 = &__s1;
    do
    {
      int v8 = *(unsigned __int8 *)p_s1;
      p_s1 = (void **)((char *)p_s1 + 1);
      int v7 = v8;
      int v10 = *(unsigned __int8 *)v4;
      uint64_t v4 = (uint64_t *)((char *)v4 + 1);
      int v9 = v10;
      BOOL v12 = v5-- != 0;
      BOOL v13 = v7 == v9;
      BOOL v14 = v7 == v9;
    }
    while (v13 && v12);
    goto LABEL_24;
  }
  return 5;
}

void sub_8974B0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v5 = sub_63A8F8(a2);
  uint64_t v6 = 309;
  if (v5) {
    uint64_t v6 = 306;
  }
  int v7 = &qword_25CEF18;
  if (v5) {
    int v7 = &qword_25CEF00;
  }
  int v8 = (char *)&unk_25CEF2F;
  if (v5) {
    int v8 = (char *)&unk_25CEF17;
  }
  if (*v8 < 0)
  {
    int v9 = (void *)qword_25CE570[v6];
    uint64_t v10 = 309;
    if (v5) {
      uint64_t v10 = 306;
    }
    sub_4200(&__dst, v9, qword_25CE570[v10 + 1]);
  }
  else
  {
    long long __dst = *(_OWORD *)v7;
    uint64_t v47 = v7[2];
  }
  long long v43 = 0u;
  long long v44 = 0u;
  int v45 = 1065353216;
  int v11 = sub_897368(a1);
  (*(void (**)(void **__return_ptr, uint64_t, void, void))(*(void *)a1 + 168))(v30, a1, 0, 0);
  BOOL v12 = (char *)operator new(0x80uLL);
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *(void *)BOOL v12 = off_243A0E0;
  *(_OWORD *)(v12 + 24) = *(_OWORD *)v30;
  v30[0] = 0;
  v30[1] = 0;
  uint64_t v14 = v31;
  BOOL v13 = __p;
  unint64_t v15 = v33;
  int v16 = v34;
  std::string __p = 0;
  unint64_t v33 = 0;
  uint64_t v31 = 0;
  *((void *)v12 + 5) = v14;
  *((void *)v12 + 6) = v13;
  *((void *)v12 + 7) = v15;
  *((void *)v12 + 8) = v16;
  uint64_t v17 = v35;
  *((void *)v12 + 9) = v35;
  *((_DWORD *)v12 + 20) = v36;
  if (v17)
  {
    unint64_t v18 = v16[1];
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v18 >= v15) {
        v18 %= v15;
      }
    }
    else
    {
      v18 &= v15 - 1;
    }
    v13[v18] = v12 + 64;
    long long v34 = 0;
    uint64_t v35 = 0;
  }
  v12[88] = v37;
  *((_DWORD *)v12 + 24) = v38;
  *(_OWORD *)(v12 + 104) = v39;
  long long v39 = 0uLL;
  *((_WORD *)v12 + 60) = v40;
  uint64_t v41 = v12 + 24;
  size_t v42 = (std::__shared_weak_count *)v12;
  sub_6373D8(a3, (uint64_t)&__dst, (uint64_t)&v43, v11, (uint64_t *)&v41);
  size_t v19 = v42;
  if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  unint64_t v20 = (std::__shared_weak_count *)*((void *)&v39 + 1);
  if (*((void *)&v39 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v39 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  unsigned __int8 v21 = v34;
  if (v34)
  {
    do
    {
      uint64_t v22 = (void *)*v21;
      sub_4F4B48((uint64_t)(v21 + 2));
      operator delete(v21);
      unsigned __int8 v21 = v22;
    }
    while (v22);
  }
  uint64_t v23 = __p;
  std::string __p = 0;
  if (v23) {
    operator delete(v23);
  }
  BOOL v24 = (void **)v30[0];
  if (v30[0])
  {
    uint64_t v25 = (void **)v30[1];
    unint64_t v26 = v30[0];
    if (v30[1] != v30[0])
    {
      do
      {
        if (*((char *)v25 - 1) < 0) {
          operator delete(*(v25 - 3));
        }
        v25 -= 3;
      }
      while (v25 != v24);
      unint64_t v26 = v30[0];
    }
    v30[1] = v24;
    operator delete(v26);
  }
  int v27 = (void *)v44;
  if ((void)v44)
  {
    do
    {
      uint64_t v28 = (void *)*v27;
      sub_4F4B48((uint64_t)(v27 + 2));
      operator delete(v27);
      int v27 = v28;
    }
    while (v28);
  }
  uint64_t v29 = (void *)v43;
  *(void *)&long long v43 = 0;
  if (v29) {
    operator delete(v29);
  }
  if (SHIBYTE(v47) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_8977F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  sub_14A84((uint64_t)&a23);
  sub_4F31D0(&a9);
  sub_4DD068(v23 - 112);
  if (*(char *)(v23 - 41) < 0) {
    operator delete(*(void **)(v23 - 64));
  }
  _Unwind_Resume(a1);
}

void sub_897840(std::string::size_type a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  sub_89616C(a1, 0, 0, 1, (uint64_t)&v21);
  *(_OWORD *)std::string __p = 0u;
  long long v19 = 0u;
  int v20 = 1065353216;
  LODWORD(v2) = sub_897368(v2);
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x80uLL);
  v4->__shared_owners_ = 0;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
  sub_63D394((uint64_t)&v26, (uint64_t)&v4[1], (uint64_t)&v21);
  int v16 = &v4[1].__vftable;
  uint64_t v17 = v4;
  sub_6373D8(a2, (uint64_t)&unk_25CEF30, (uint64_t)__p, v2, (uint64_t *)&v16);
  BOOL v5 = v17;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (void *)v19;
  if ((void)v19)
  {
    do
    {
      int v7 = (void *)*v6;
      sub_4F4B48((uint64_t)(v6 + 2));
      operator delete(v6);
      uint64_t v6 = v7;
    }
    while (v7);
  }
  int v8 = __p[0];
  __p[0] = 0;
  if (v8) {
    operator delete(v8);
  }
  int v9 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = v24;
  if (v24)
  {
    do
    {
      int v11 = (void *)*v10;
      sub_4F4B48((uint64_t)(v10 + 2));
      operator delete(v10);
      uint64_t v10 = v11;
    }
    while (v11);
  }
  BOOL v12 = v23;
  uint64_t v23 = 0;
  if (v12) {
    operator delete(v12);
  }
  BOOL v13 = (void **)v21;
  if (v21)
  {
    uint64_t v14 = v22;
    unint64_t v15 = v21;
    if (v22 != v21)
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      unint64_t v15 = v21;
    }
    uint64_t v22 = v13;
    operator delete(v15);
  }
}

void sub_897A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
}

void sub_897A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  std::__shared_weak_count::~__shared_weak_count(v17);
  operator delete(v19);
  sub_4DD068((uint64_t)&a11);
  sub_4F31D0(&a17);
  _Unwind_Resume(a1);
}

void sub_897A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_4DD068((uint64_t)va);
  sub_4F31D0((void **)va1);
  _Unwind_Resume(a1);
}

void sub_897AAC(uint64_t a1@<X8>)
{
  sub_6352AC((uint64_t)&v11, (uint64_t)&qword_25CFBE0);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  sub_6370D4(a1, &v11, 1, &v9);
  uint64_t v2 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = v14;
  if (v14)
  {
    do
    {
      uint64_t v4 = (void *)*v3;
      sub_4F4B48((uint64_t)(v3 + 2));
      operator delete(v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  BOOL v5 = __p;
  std::string __p = 0;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = (void **)v11;
  if (v11)
  {
    uint64_t v7 = v12;
    uint64_t v8 = v11;
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      uint64_t v8 = v11;
    }
    BOOL v12 = v6;
    operator delete(v8);
  }
}

void sub_897BC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  _Unwind_Resume(a1);
}

void sub_897BDC(uint64_t a1@<X8>)
{
  sub_6352AC((uint64_t)&v11, (uint64_t)&qword_25CFBF8);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  sub_6370D4(a1, &v11, 1, &v9);
  uint64_t v2 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = v14;
  if (v14)
  {
    do
    {
      uint64_t v4 = (void *)*v3;
      sub_4F4B48((uint64_t)(v3 + 2));
      operator delete(v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  uint64_t v5 = __p;
  std::string __p = 0;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = (void **)v11;
  if (v11)
  {
    uint64_t v7 = v12;
    uint64_t v8 = v11;
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      uint64_t v8 = v11;
    }
    BOOL v12 = v6;
    operator delete(v8);
  }
}

void sub_897CF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  _Unwind_Resume(a1);
}

void sub_897D0C(uint64_t a1@<X8>)
{
  int v2 = byte_25CFBC8[23];
  if (byte_25CFBC8[23] >= 0) {
    size_t v3 = byte_25CFBC8[23];
  }
  else {
    size_t v3 = *(void *)&byte_25CFBC8[8];
  }
  int v4 = byte_25CD72F;
  if (byte_25CD72F >= 0) {
    size_t v5 = byte_25CD72F;
  }
  else {
    size_t v5 = qword_25CD720;
  }
  unint64_t v6 = v5 + v3;
  if (v5 + v3 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v6 <= 0x16)
  {
    size_t v23 = 0;
    unint64_t v24 = 0;
    long long __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v24) = v5 + v3;
    if (!v3) {
      goto LABEL_18;
    }
    goto LABEL_14;
  }
  uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v6 | 7) != 0x17) {
    uint64_t v8 = v6 | 7;
  }
  uint64_t v9 = v8 + 1;
  p_dst = (void **)operator new(v8 + 1);
  size_t v23 = v5 + v3;
  unint64_t v24 = v9 | 0x8000000000000000;
  long long __dst = p_dst;
  if (v3)
  {
LABEL_14:
    if (v2 >= 0) {
      uint64_t v10 = byte_25CFBC8;
    }
    else {
      uint64_t v10 = *(char **)byte_25CFBC8;
    }
    memmove(p_dst, v10, v3);
  }
LABEL_18:
  int v11 = (char *)p_dst + v3;
  if (v5)
  {
    if (v4 >= 0) {
      BOOL v12 = &qword_25CD718;
    }
    else {
      BOOL v12 = (uint64_t *)qword_25CD718;
    }
    memmove(v11, v12, v5);
  }
  v11[v5] = 0;
  sub_6352AC((uint64_t)&v25, (uint64_t)&__dst);
  uint64_t v20 = 0;
  unsigned __int8 v21 = 0;
  sub_6370D4(a1, &v25, 1, &v20);
  BOOL v13 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = v28;
  if (v28)
  {
    do
    {
      unint64_t v15 = (void *)*v14;
      sub_4F4B48((uint64_t)(v14 + 2));
      operator delete(v14);
      uint64_t v14 = v15;
    }
    while (v15);
  }
  int v16 = __p;
  std::string __p = 0;
  if (v16) {
    operator delete(v16);
  }
  uint64_t v17 = (void **)v25;
  if (v25)
  {
    unint64_t v18 = v26;
    long long v19 = v25;
    if (v26 != v25)
    {
      do
      {
        if (*((char *)v18 - 1) < 0) {
          operator delete(*(v18 - 3));
        }
        v18 -= 3;
      }
      while (v18 != v17);
      long long v19 = v25;
    }
    char v26 = v17;
    operator delete(v19);
  }
  if (SHIBYTE(v24) < 0) {
    operator delete(__dst);
  }
}

void sub_897F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_897F68(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (sub_63A998(a2))
  {
    uint64_t v93 = 0;
    long long v91 = 0u;
    long long v92 = 0u;
    long long v90 = 0u;
    int v94 = 1065353216;
    char v95 = 1;
    unsigned int v8 = sub_63A824(a2);
    std::to_string(&v87, v8);
    sub_6358F0((uint64_t)&v90, (long long *)&dword_25CFD60, &v87, &v87);
    if (byte_25CFBC8[23] < 0) {
      sub_4200(&v86, *(void **)byte_25CFBC8, *(unint64_t *)&byte_25CFBC8[8]);
    }
    else {
      std::string v86 = *(std::string *)byte_25CFBC8;
    }
    uint64_t v28 = 231;
    if (!*(unsigned char *)(a2 + 96)) {
      uint64_t v28 = 228;
    }
    uint64_t v29 = (const std::string::value_type *)&unk_25CFCA0;
    if (!*(unsigned char *)(a2 + 96)) {
      uint64_t v29 = (const std::string::value_type *)&unk_25CFC88;
    }
    uint64_t v30 = &byte_25CFC9F;
    if (*(unsigned char *)(a2 + 96)) {
      uint64_t v30 = &byte_25CFCB7;
    }
    std::string::size_type v31 = *v30;
    uint64_t v32 = qword_25CF568[v28];
    unint64_t v33 = (std::string::size_type *)&unk_25CFCA8;
    if (!*(unsigned char *)(a2 + 96)) {
      unint64_t v33 = (std::string::size_type *)&unk_25CFC90;
    }
    std::string::size_type v34 = *v33;
    if ((v31 & 0x80u) == 0) {
      uint64_t v35 = v29;
    }
    else {
      uint64_t v35 = (const std::string::value_type *)v32;
    }
    if ((v31 & 0x80u) == 0) {
      std::string::size_type v36 = v31;
    }
    else {
      std::string::size_type v36 = v34;
    }
    std::string::append(&v86, v35, v36);
    unsigned int v37 = sub_63A824(a2);
    switch(sub_64E00(v37, *(_DWORD *)(*(void *)(a1 + 1960) + 1000)))
    {
      case 0u:
        int v38 = &qword_25CFCD0;
        goto LABEL_64;
      case 1u:
        int v38 = &qword_25CFCE8;
        goto LABEL_64;
      case 2u:
        int v38 = &qword_25CFD00;
        goto LABEL_64;
      case 3u:
        int v38 = &qword_25CFD18;
        goto LABEL_64;
      case 4u:
        int v38 = &qword_25CFD30;
LABEL_64:
        int v39 = *((char *)v38 + 23);
        if (v39 >= 0) {
          __int16 v40 = (const std::string::value_type *)v38;
        }
        else {
          __int16 v40 = (const std::string::value_type *)*v38;
        }
        if (v39 >= 0) {
          std::string::size_type v41 = *((unsigned __int8 *)v38 + 23);
        }
        else {
          std::string::size_type v41 = v38[1];
        }
        std::string::append(&v86, v40, v41);
        break;
      default:
        break;
    }
    int v42 = SHIBYTE(v86.__r_.__value_.__r.__words[2]);
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v86.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v86.__r_.__value_.__l.__size_;
    }
    int v44 = byte_25CD72F;
    if (byte_25CD72F >= 0) {
      size_t v45 = byte_25CD72F;
    }
    else {
      size_t v45 = qword_25CD720;
    }
    unint64_t v46 = v45 + size;
    if (v45 + size > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v46 > 0x16)
    {
      uint64_t v66 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v46 | 7) != 0x17) {
        uint64_t v66 = v46 | 7;
      }
      uint64_t v67 = v66 + 1;
      p_dst = (void **)operator new(v66 + 1);
      uint64_t v82 = (void **)(v45 + size);
      unint64_t v83 = v67 | 0x8000000000000000;
      long long __dst = p_dst;
      if (!size)
      {
LABEL_84:
        long long v49 = (char *)p_dst + size;
        if (v45)
        {
          if (v44 >= 0) {
            char v50 = &qword_25CD718;
          }
          else {
            char v50 = (uint64_t *)qword_25CD718;
          }
          memmove(v49, v50, v45);
        }
        v49[v45] = 0;
        sub_635560((uint64_t)&v90, (uint64_t)&__dst);
        if (SHIBYTE(v83) < 0)
        {
          operator delete(__dst);
          if (a3)
          {
LABEL_91:
            int v51 = byte_25CFCCF;
            if (byte_25CFCCF >= 0) {
              size_t v52 = byte_25CFCCF;
            }
            else {
              size_t v52 = qword_25CFCC0;
            }
            int v53 = byte_25CD72F;
            if (byte_25CD72F >= 0) {
              size_t v54 = byte_25CD72F;
            }
            else {
              size_t v54 = qword_25CD720;
            }
            unint64_t v55 = v54 + v52;
            if (v54 + v52 > 0x7FFFFFFFFFFFFFF7) {
              sub_188D690();
            }
            if (v55 > 0x16)
            {
              uint64_t v69 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v55 | 7) != 0x17) {
                uint64_t v69 = v55 | 7;
              }
              uint64_t v70 = v69 + 1;
              p_p = (char *)operator new(v69 + 1);
              size_t v79 = v54 + v52;
              unint64_t v80 = v70 | 0x8000000000000000;
              std::string __p = p_p;
              if (!v52) {
                goto LABEL_104;
              }
            }
            else
            {
              size_t v79 = 0;
              unint64_t v80 = 0;
              std::string __p = 0;
              p_p = (char *)&__p;
              HIBYTE(v80) = v54 + v52;
              if (!v52)
              {
LABEL_104:
                unint64_t v58 = &p_p[v52];
                if (v54)
                {
                  if (v53 >= 0) {
                    int64_t v59 = &qword_25CD718;
                  }
                  else {
                    int64_t v59 = (uint64_t *)qword_25CD718;
                  }
                  memmove(v58, v59, v54);
                }
                v58[v54] = 0;
                sub_6352AC((uint64_t)&__dst, (uint64_t)&__p);
                if (SHIBYTE(v80) < 0) {
                  operator delete(__p);
                }
                sub_6376A0(a4, &v90, 14, &__dst, 1);
                char v60 = v85;
                if (v85)
                {
                  do
                  {
                    char v61 = (void *)*v60;
                    sub_4F4B48((uint64_t)(v60 + 2));
                    operator delete(v60);
                    char v60 = v61;
                  }
                  while (v61);
                }
                uint64_t v62 = v84;
                char v84 = 0;
                if (v62) {
                  operator delete(v62);
                }
                char v63 = __dst;
                if (__dst)
                {
                  char v64 = v82;
                  int v65 = __dst;
                  if (v82 != __dst)
                  {
                    do
                    {
                      if (*((char *)v64 - 1) < 0) {
                        operator delete(*(v64 - 3));
                      }
                      v64 -= 3;
                    }
                    while (v64 != v63);
                    int v65 = __dst;
                  }
                  uint64_t v82 = v63;
                  operator delete(v65);
                }
                goto LABEL_135;
              }
            }
            if (v51 >= 0) {
              uint64_t v57 = &qword_25CFCB8;
            }
            else {
              uint64_t v57 = (uint64_t *)qword_25CFCB8;
            }
            memmove(p_p, v57, v52);
            goto LABEL_104;
          }
        }
        else if (a3)
        {
          goto LABEL_91;
        }
        uint64_t v76 = 0;
        uint64_t v77 = 0;
        sub_6370D4(a4, &v90, 1, &v76);
        uint64_t v68 = v77;
        if (v77 && !atomic_fetch_add(&v77->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
LABEL_135:
        if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v86.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_137:
            int v71 = (void *)*((void *)&v92 + 1);
            if (!*((void *)&v92 + 1)) {
              goto LABEL_139;
            }
            do
            {
LABEL_138:
              long long v72 = (void *)*v71;
              sub_4F4B48((uint64_t)(v71 + 2));
              operator delete(v71);
              int v71 = v72;
            }
            while (v72);
LABEL_139:
            __int16 v73 = (void *)*((void *)&v91 + 1);
            *((void *)&v91 + 1) = 0;
            if (v73) {
              operator delete(v73);
            }
            uint64_t v74 = v90;
            if ((void)v90)
            {
              uint64_t v75 = *((void *)&v90 + 1);
              int v27 = (void **)v90;
              if (*((void *)&v90 + 1) != (void)v90)
              {
                do
                {
                  if (*(char *)(v75 - 1) < 0) {
                    operator delete(*(void **)(v75 - 24));
                  }
                  v75 -= 24;
                }
                while (v75 != v74);
                int v27 = (void **)v90;
              }
              *((void *)&v90 + 1) = v74;
              goto LABEL_149;
            }
            return;
          }
        }
        else if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_137;
        }
        operator delete(v87.__r_.__value_.__l.__data_);
        int v71 = (void *)*((void *)&v92 + 1);
        if (!*((void *)&v92 + 1)) {
          goto LABEL_139;
        }
        goto LABEL_138;
      }
    }
    else
    {
      uint64_t v82 = 0;
      unint64_t v83 = 0;
      long long __dst = 0;
      p_dst = (void **)&__dst;
      HIBYTE(v83) = v45 + size;
      if (!size) {
        goto LABEL_84;
      }
    }
    if (v42 >= 0) {
      long long v48 = &v86;
    }
    else {
      long long v48 = (std::string *)v86.__r_.__value_.__r.__words[0];
    }
    memmove(p_dst, v48, size);
    goto LABEL_84;
  }
  int v9 = byte_25CFBC8[23];
  if (byte_25CFBC8[23] >= 0) {
    size_t v10 = byte_25CFBC8[23];
  }
  else {
    size_t v10 = *(void *)&byte_25CFBC8[8];
  }
  int v11 = byte_25CD72F;
  if (byte_25CD72F >= 0) {
    size_t v12 = byte_25CD72F;
  }
  else {
    size_t v12 = qword_25CD720;
  }
  unint64_t v13 = v12 + v10;
  if (v12 + v10 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v13 <= 0x16)
  {
    uint64_t v82 = 0;
    unint64_t v83 = 0;
    long long __dst = 0;
    uint64_t v14 = (void **)&__dst;
    HIBYTE(v83) = v12 + v10;
    if (!v10) {
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  uint64_t v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v13 | 7) != 0x17) {
    uint64_t v15 = v13 | 7;
  }
  uint64_t v16 = v15 + 1;
  uint64_t v14 = (void **)operator new(v15 + 1);
  uint64_t v82 = (void **)(v12 + v10);
  unint64_t v83 = v16 | 0x8000000000000000;
  long long __dst = v14;
  if (v10)
  {
LABEL_17:
    if (v9 >= 0) {
      uint64_t v17 = byte_25CFBC8;
    }
    else {
      uint64_t v17 = *(char **)byte_25CFBC8;
    }
    memmove(v14, v17, v10);
  }
LABEL_21:
  unint64_t v18 = (char *)v14 + v10;
  if (v12)
  {
    if (v11 >= 0) {
      long long v19 = &qword_25CD718;
    }
    else {
      long long v19 = (uint64_t *)qword_25CD718;
    }
    memmove(v18, v19, v12);
  }
  v18[v12] = 0;
  sub_6352AC((uint64_t)&v90, (uint64_t)&__dst);
  uint64_t v88 = 0;
  BOOL v89 = 0;
  sub_6370D4(a4, &v90, 1, &v88);
  uint64_t v20 = v89;
  if (v89 && !atomic_fetch_add(&v89->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  unsigned __int8 v21 = (void *)*((void *)&v92 + 1);
  if (*((void *)&v92 + 1))
  {
    do
    {
      uint64_t v22 = (void *)*v21;
      sub_4F4B48((uint64_t)(v21 + 2));
      operator delete(v21);
      unsigned __int8 v21 = v22;
    }
    while (v22);
  }
  size_t v23 = (void *)*((void *)&v91 + 1);
  *((void *)&v91 + 1) = 0;
  if (v23) {
    operator delete(v23);
  }
  uint64_t v24 = v90;
  if ((void)v90)
  {
    uint64_t v25 = *((void *)&v90 + 1);
    char v26 = (void *)v90;
    if (*((void *)&v90 + 1) != (void)v90)
    {
      do
      {
        if (*(char *)(v25 - 1) < 0) {
          operator delete(*(void **)(v25 - 24));
        }
        v25 -= 24;
      }
      while (v25 != v24);
      char v26 = (void *)v90;
    }
    *((void *)&v90 + 1) = v24;
    operator delete(v26);
  }
  if (SHIBYTE(v83) < 0)
  {
    int v27 = __dst;
LABEL_149:
    operator delete(v27);
  }
}

void sub_8986FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  sub_4D4880((void **)(v41 - 160));
  _Unwind_Resume(a1);
}

void sub_8987EC(uint64_t a1@<X8>)
{
  sub_6352AC((uint64_t)&v11, (uint64_t)&qword_25CFC58);
  uint64_t v9 = 0;
  size_t v10 = 0;
  sub_6370D4(a1, &v11, 1, &v9);
  int v2 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  size_t v3 = v14;
  if (v14)
  {
    do
    {
      int v4 = (void *)*v3;
      sub_4F4B48((uint64_t)(v3 + 2));
      operator delete(v3);
      size_t v3 = v4;
    }
    while (v4);
  }
  size_t v5 = __p;
  std::string __p = 0;
  if (v5) {
    operator delete(v5);
  }
  unint64_t v6 = (void **)v11;
  if (v11)
  {
    uint64_t v7 = v12;
    unsigned int v8 = v11;
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      unsigned int v8 = v11;
    }
    size_t v12 = v6;
    operator delete(v8);
  }
}

void sub_898900(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  _Unwind_Resume(a1);
}

void sub_89891C(uint64_t a1@<X8>)
{
  sub_6352AC((uint64_t)&v11, (uint64_t)&unk_25CFC70);
  uint64_t v9 = 0;
  size_t v10 = 0;
  sub_6370D4(a1, &v11, 1, &v9);
  int v2 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = v14;
  if (v14)
  {
    do
    {
      int v4 = (void *)*v3;
      sub_4F4B48((uint64_t)(v3 + 2));
      operator delete(v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  uint64_t v5 = __p;
  std::string __p = 0;
  if (v5) {
    operator delete(v5);
  }
  unint64_t v6 = (void **)v11;
  if (v11)
  {
    uint64_t v7 = v12;
    unsigned int v8 = v11;
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      unsigned int v8 = v11;
    }
    size_t v12 = v6;
    operator delete(v8);
  }
}

void sub_898A30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  _Unwind_Resume(a1);
}

void sub_898A4C(uint64_t a1@<X8>)
{
  sub_6352AC((uint64_t)&v11, (uint64_t)&qword_25CFC10);
  uint64_t v9 = 0;
  size_t v10 = 0;
  sub_6370D4(a1, &v11, 1, &v9);
  int v2 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = v14;
  if (v14)
  {
    do
    {
      int v4 = (void *)*v3;
      sub_4F4B48((uint64_t)(v3 + 2));
      operator delete(v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  uint64_t v5 = __p;
  std::string __p = 0;
  if (v5) {
    operator delete(v5);
  }
  unint64_t v6 = (void **)v11;
  if (v11)
  {
    uint64_t v7 = v12;
    unsigned int v8 = v11;
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      unsigned int v8 = v11;
    }
    size_t v12 = v6;
    operator delete(v8);
  }
}

void sub_898B60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  _Unwind_Resume(a1);
}

void sub_898B7C(uint64_t a1@<X8>)
{
  sub_6352AC((uint64_t)&v11, (uint64_t)&qword_25CFC28);
  uint64_t v9 = 0;
  size_t v10 = 0;
  sub_6370D4(a1, &v11, 1, &v9);
  int v2 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = v14;
  if (v14)
  {
    do
    {
      int v4 = (void *)*v3;
      sub_4F4B48((uint64_t)(v3 + 2));
      operator delete(v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  uint64_t v5 = __p;
  std::string __p = 0;
  if (v5) {
    operator delete(v5);
  }
  unint64_t v6 = (void **)v11;
  if (v11)
  {
    uint64_t v7 = v12;
    unsigned int v8 = v11;
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      unsigned int v8 = v11;
    }
    size_t v12 = v6;
    operator delete(v8);
  }
}

void sub_898C90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  _Unwind_Resume(a1);
}

void sub_898CAC(uint64_t a1@<X8>)
{
  sub_6352AC((uint64_t)&v11, (uint64_t)&qword_25CFC40);
  uint64_t v9 = 0;
  size_t v10 = 0;
  sub_6370D4(a1, &v11, 1, &v9);
  int v2 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = v14;
  if (v14)
  {
    do
    {
      int v4 = (void *)*v3;
      sub_4F4B48((uint64_t)(v3 + 2));
      operator delete(v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  uint64_t v5 = __p;
  std::string __p = 0;
  if (v5) {
    operator delete(v5);
  }
  unint64_t v6 = (void **)v11;
  if (v11)
  {
    uint64_t v7 = v12;
    unsigned int v8 = v11;
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      unsigned int v8 = v11;
    }
    size_t v12 = v6;
    operator delete(v8);
  }
}

void sub_898DC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  _Unwind_Resume(a1);
}

void sub_898DDC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 168))(&v26);
  sub_899088(a2, (uint64_t)&v22);
  uint64_t v5 = (std::__shared_weak_count *)operator new(0x80uLL);
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
  sub_63D394((uint64_t)&v31, (uint64_t)&v5[1], (uint64_t)&v26);
  uint64_t v20 = &v5[1].__vftable;
  unsigned __int8 v21 = v5;
  sub_6370D4(a3, &v22, 5, &v20);
  unint64_t v6 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = v25;
  if (v25)
  {
    do
    {
      unsigned int v8 = (void *)*v7;
      sub_4F4B48((uint64_t)(v7 + 2));
      operator delete(v7);
      uint64_t v7 = v8;
    }
    while (v8);
  }
  uint64_t v9 = __p;
  std::string __p = 0;
  if (v9) {
    operator delete(v9);
  }
  size_t v10 = (void **)v22;
  if (v22)
  {
    int v11 = v23;
    size_t v12 = v22;
    if (v23 != v22)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != v10);
      size_t v12 = v22;
    }
    size_t v23 = v10;
    operator delete(v12);
  }
  unint64_t v13 = v30;
  if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = v29;
  if (v29)
  {
    do
    {
      uint64_t v15 = (void *)*v14;
      sub_4F4B48((uint64_t)(v14 + 2));
      operator delete(v14);
      uint64_t v14 = v15;
    }
    while (v15);
  }
  uint64_t v16 = v28;
  uint64_t v28 = 0;
  if (v16) {
    operator delete(v16);
  }
  uint64_t v17 = (void **)v26;
  if (v26)
  {
    unint64_t v18 = v27;
    long long v19 = v26;
    if (v27 != v26)
    {
      do
      {
        if (*((char *)v18 - 1) < 0) {
          operator delete(*(v18 - 3));
        }
        v18 -= 3;
      }
      while (v18 != v17);
      long long v19 = v26;
    }
    int v27 = v17;
    operator delete(v19);
  }
}

void sub_899034(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  unint64_t v6 = va_arg(va2, void *);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  sub_4F31D0((void **)va2);
  _Unwind_Resume(a1);
}

void sub_899074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_899088(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v4 = *(unsigned __int8 *)(a1 + 180);
  uint64_t v5 = 2280;
  if (!*(unsigned char *)(a1 + 182)) {
    uint64_t v5 = 2256;
  }
  unint64_t v6 = &qword_25CCE60;
  if (*(unsigned char *)(a1 + 182)) {
    unint64_t v6 = (uint64_t *)&xmmword_25CCE78;
  }
  uint64_t v7 = 2232;
  if (*(unsigned char *)(a1 + 180))
  {
    uint64_t v8 = &qword_25CCE48;
  }
  else
  {
    uint64_t v7 = v5;
    uint64_t v8 = v6;
  }
  if (*((char *)v8 + 23) < 0) {
    sub_4200(&__p, *(void **)((char *)&word_25CC590 + v7), v8[1]);
  }
  else {
    std::string __p = *(std::string *)v8;
  }
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 56) = 1065353216;
  *(unsigned char *)(a2 + 64) = 1;
  if (v4 && sub_63ACAC(a1))
  {
    if (byte_25CCEBF >= 0) {
      uint64_t v9 = (const std::string::value_type *)&qword_25CCEA8;
    }
    else {
      uint64_t v9 = (const std::string::value_type *)qword_25CCEA8;
    }
    if (byte_25CCEBF >= 0) {
      std::string::size_type v10 = byte_25CCEBF;
    }
    else {
      std::string::size_type v10 = unk_25CCEB0;
    }
    std::string::append(&__p, v9, v10);
    sub_635C08(a2, &xmmword_25CEB58, a1 + 8, 0);
  }
  if (byte_25CD7A7 >= 0) {
    uint64_t v11 = (const std::string::value_type *)&qword_25CD790;
  }
  else {
    uint64_t v11 = (const std::string::value_type *)qword_25CD790;
  }
  if (byte_25CD7A7 >= 0) {
    std::string::size_type v12 = byte_25CD7A7;
  }
  else {
    std::string::size_type v12 = qword_25CD798;
  }
  std::string::append(&__p, v11, v12);
  sub_6351E8((char **)a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_8991F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  sub_4D4880(v14);
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_899218(std::string::size_type a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_89616C(a1, 0, 0, 0, (uint64_t)&v28);
  sub_899088(a2, (uint64_t)&v24);
  uint64_t v6 = sub_897368(a1);
  uint64_t v7 = (std::__shared_weak_count *)operator new(0x80uLL);
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
  sub_63D394((uint64_t)&v33, (uint64_t)&v7[1], (uint64_t)&v28);
  uint64_t v22 = &v7[1].__vftable;
  size_t v23 = v7;
  sub_6370D4(a3, &v24, v6, &v22);
  uint64_t v8 = v23;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = v27;
  if (v27)
  {
    do
    {
      std::string::size_type v10 = (void *)*v9;
      sub_4F4B48((uint64_t)(v9 + 2));
      operator delete(v9);
      uint64_t v9 = v10;
    }
    while (v10);
  }
  uint64_t v11 = __p;
  std::string __p = 0;
  if (v11) {
    operator delete(v11);
  }
  std::string::size_type v12 = (void **)v24;
  if (v24)
  {
    uint64_t v13 = v25;
    uint64_t v14 = v24;
    if (v25 != v24)
    {
      do
      {
        if (*((char *)v13 - 1) < 0) {
          operator delete(*(v13 - 3));
        }
        v13 -= 3;
      }
      while (v13 != v12);
      uint64_t v14 = v24;
    }
    uint64_t v25 = v12;
    operator delete(v14);
  }
  uint64_t v15 = v32;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = v31;
  if (v31)
  {
    do
    {
      uint64_t v17 = (void *)*v16;
      sub_4F4B48((uint64_t)(v16 + 2));
      operator delete(v16);
      uint64_t v16 = v17;
    }
    while (v17);
  }
  unint64_t v18 = v30;
  uint64_t v30 = 0;
  if (v18) {
    operator delete(v18);
  }
  long long v19 = (void **)v28;
  if (v28)
  {
    uint64_t v20 = v29;
    unsigned __int8 v21 = v28;
    if (v29 != v28)
    {
      do
      {
        if (*((char *)v20 - 1) < 0) {
          operator delete(*(v20 - 3));
        }
        v20 -= 3;
      }
      while (v20 != v19);
      unsigned __int8 v21 = v28;
    }
    uint64_t v29 = v19;
    operator delete(v21);
  }
}

void sub_899468(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void *);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  sub_4F31D0((void **)va2);
  _Unwind_Resume(a1);
}

void sub_89948C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  std::__shared_weak_count::~__shared_weak_count(v21);
  operator delete(v23);
  sub_4D4880(&a12);
  sub_4F31D0(&a21);
  _Unwind_Resume(a1);
}

void sub_8994B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_8994C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void *);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_4D4880((void **)va);
  sub_4F31D0((void **)va1);
  _Unwind_Resume(a1);
}

void sub_8994E4(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)(a1 + 1945))
  {
    uint64_t v7 = (int *)&xmmword_25CFD78;
    if ((byte_25CFD8F & 0x80000000) == 0)
    {
LABEL_3:
      *(_OWORD *)std::string::size_type v36 = *(_OWORD *)v7;
      uint64_t v37 = *((void *)v7 + 2);
      goto LABEL_9;
    }
  }
  else
  {
    if (*(unsigned char *)(a1 + 1946)) {
      uint64_t v7 = &dword_25CFDC0;
    }
    else {
      uint64_t v7 = &dword_25CFDA8;
    }
    if ((*((char *)v7 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  sub_4200(v36, *(void **)v7, *((void *)v7 + 1));
LABEL_9:
  int v8 = SHIBYTE(v37);
  if (v37 >= 0) {
    size_t v9 = HIBYTE(v37);
  }
  else {
    size_t v9 = (size_t)v36[1];
  }
  int v10 = byte_25CD7A7;
  if (byte_25CD7A7 >= 0) {
    size_t v11 = byte_25CD7A7;
  }
  else {
    size_t v11 = qword_25CD798;
  }
  unint64_t v12 = v11 + v9;
  if (v11 + v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v12 <= 0x16)
  {
    size_t v34 = 0;
    unint64_t v35 = 0;
    long long __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v35) = v11 + v9;
    if (!v9) {
      goto LABEL_22;
    }
    goto LABEL_18;
  }
  uint64_t v25 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v12 | 7) != 0x17) {
    uint64_t v25 = v12 | 7;
  }
  uint64_t v26 = v25 + 1;
  p_dst = (void **)operator new(v25 + 1);
  size_t v34 = v11 + v9;
  unint64_t v35 = v26 | 0x8000000000000000;
  long long __dst = p_dst;
  if (v9)
  {
LABEL_18:
    if (v8 >= 0) {
      uint64_t v14 = v36;
    }
    else {
      uint64_t v14 = (void **)v36[0];
    }
    memmove(p_dst, v14, v9);
  }
LABEL_22:
  uint64_t v15 = (char *)p_dst + v9;
  if (v11)
  {
    if (v10 >= 0) {
      uint64_t v16 = &qword_25CD790;
    }
    else {
      uint64_t v16 = (uint64_t *)qword_25CD790;
    }
    memmove(v15, v16, v11);
  }
  v15[v11] = 0;
  sub_6352AC((uint64_t)&v29, (uint64_t)&__dst);
  uint64_t v17 = (std::__shared_weak_count *)a2[1];
  uint64_t v27 = *a2;
  uint64_t v28 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_6370D4(a4, &v29, a3, &v27);
  unint64_t v18 = v28;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  long long v19 = v32;
  if (v32)
  {
    do
    {
      uint64_t v20 = (void *)*v19;
      sub_4F4B48((uint64_t)(v19 + 2));
      operator delete(v19);
      long long v19 = v20;
    }
    while (v20);
  }
  unsigned __int8 v21 = __p;
  std::string __p = 0;
  if (v21) {
    operator delete(v21);
  }
  uint64_t v22 = (void **)v29;
  if (v29)
  {
    size_t v23 = v30;
    uint64_t v24 = v29;
    if (v30 != v29)
    {
      do
      {
        if (*((char *)v23 - 1) < 0) {
          operator delete(*(v23 - 3));
        }
        v23 -= 3;
      }
      while (v23 != v22);
      uint64_t v24 = v29;
    }
    uint64_t v30 = v22;
    operator delete(v24);
  }
  if ((SHIBYTE(v35) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v37) & 0x80000000) == 0) {
      return;
    }
LABEL_52:
    operator delete(v36[0]);
    return;
  }
  operator delete(__dst);
  if (SHIBYTE(v37) < 0) {
    goto LABEL_52;
  }
}

void sub_89979C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a25 < 0)
  {
    operator delete(__p);
    if ((a31 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else if ((a31 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a26);
  _Unwind_Resume(a1);
}

void sub_899800(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (byte_25CFFB8[23] < 0) {
    sub_4200(&__dst, *(void **)byte_25CFFB8, *(unint64_t *)&byte_25CFFB8[8]);
  }
  else {
    std::string __dst = *(std::string *)byte_25CFFB8;
  }
  long long v47 = 0u;
  long long v48 = 0u;
  int v49 = 1065353216;
  if (sub_6F2FD8(a1 + 760))
  {
    if (byte_25CD3E7 >= 0) {
      int v4 = (const std::string::value_type *)&xmmword_25CD3D0;
    }
    else {
      int v4 = (const std::string::value_type *)xmmword_25CD3D0;
    }
    if (byte_25CD3E7 >= 0) {
      std::string::size_type v5 = byte_25CD3E7;
    }
    else {
      std::string::size_type v5 = *((void *)&xmmword_25CD3D0 + 1);
    }
    std::string::append(&__dst, v4, v5);
    long long v43 = &xmmword_25CE600;
    uint64_t v6 = sub_617978((uint64_t)&v47, (uint64_t)&xmmword_25CE600, (uint64_t)&unk_20F06E0, (long long **)&v43);
    std::string::operator=((std::string *)(v6 + 5), (const std::string *)(a1 + 760));
    v6[8] = *(void *)(a1 + 784);
    std::string::operator=((std::string *)v6 + 3, (const std::string *)(a1 + 792));
    v6[12] = *(void *)(a1 + 816);
    *((_DWORD *)v6 + 26) = *(_DWORD *)(a1 + 824);
    std::string::operator=((std::string *)(v6 + 14), (const std::string *)(a1 + 832));
    std::string::operator=((std::string *)(v6 + 17), (const std::string *)(a1 + 856));
    *((_DWORD *)v6 + 40) = *(_DWORD *)(a1 + 880);
    std::string::operator=((std::string *)v6 + 7, (const std::string *)(a1 + 888));
  }
  if (byte_25CD7A7 >= 0) {
    uint64_t v7 = (const std::string::value_type *)&qword_25CD790;
  }
  else {
    uint64_t v7 = (const std::string::value_type *)qword_25CD790;
  }
  if (byte_25CD7A7 >= 0) {
    std::string::size_type v8 = byte_25CD7A7;
  }
  else {
    std::string::size_type v8 = qword_25CD798;
  }
  std::string::append(&__dst, v7, v8);
  sub_63531C((uint64_t)&v43, (uint64_t)&__dst, (uint64_t)&v47);
  __int16 v40 = 0;
  uint64_t v41 = 0;
  unint64_t v42 = 0;
  size_t v34 = 0;
  unint64_t v35 = 0;
  uint64_t v36 = 0;
  sub_8A6F8((char *)&v34, *(void *)(a1 + 80), *(void *)(a1 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3));
  sub_5954B0((uint64_t)&v37, a1 + 104);
  char v39 = *(unsigned char *)(a1 + 144);
  size_t v9 = (long long **)nullsub_1(&v34);
  int v10 = *v9;
  size_t v11 = v9[1];
  while (v10 != v11)
  {
    if (*((char *)v10 + 23) < 0)
    {
      sub_4200(&__p, *(void **)v10, *((void *)v10 + 1));
    }
    else
    {
      long long v12 = *v10;
      __p.__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
    }
    sub_625E4(&__p, (char *)&qword_25CD790, (uint64_t)&dword_25CD808);
    uint64_t v13 = v41;
    if ((unint64_t)v41 >= v42)
    {
      uint64_t v41 = sub_1D740((char **)&v40, (uint64_t)&__p);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_19;
      }
      goto LABEL_29;
    }
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      long long v14 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *((void *)v41 + 2) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v13 = v14;
      uint64_t v41 = v13 + 24;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_19;
      }
LABEL_29:
      operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_19;
    }
    sub_4200(v41, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    uint64_t v41 = v13 + 24;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_29;
    }
LABEL_19:
    int v10 = (long long *)((char *)v10 + 24);
  }
  sub_6353B4((uint64_t)&v34, (std::string **)&v40);
  sub_6376A0(a2, &v43, 6, &v34, 1);
  uint64_t v15 = v38;
  if (v38)
  {
    do
    {
      uint64_t v16 = (void *)*v15;
      sub_4F4B48((uint64_t)(v15 + 2));
      operator delete(v15);
      uint64_t v15 = v16;
    }
    while (v16);
  }
  uint64_t v17 = v37;
  uint64_t v37 = 0;
  if (v17) {
    operator delete(v17);
  }
  unint64_t v18 = (void **)v34;
  if (v34)
  {
    long long v19 = v35;
    uint64_t v20 = v34;
    if (v35 != v34)
    {
      do
      {
        if (*((char *)v19 - 1) < 0) {
          operator delete(*(v19 - 3));
        }
        v19 -= 3;
      }
      while (v19 != v18);
      uint64_t v20 = v34;
    }
    unint64_t v35 = v18;
    operator delete(v20);
  }
  unsigned __int8 v21 = (char *)v40;
  if (v40)
  {
    uint64_t v22 = v41;
    size_t v23 = v40;
    if (v41 != v40)
    {
      do
      {
        if (*(v22 - 1) < 0) {
          operator delete(*((void **)v22 - 3));
        }
        v22 -= 24;
      }
      while (v22 != v21);
      size_t v23 = v40;
    }
    uint64_t v41 = v21;
    operator delete(v23);
  }
  uint64_t v24 = v46;
  if (v46)
  {
    do
    {
      uint64_t v25 = (void *)*v24;
      sub_4F4B48((uint64_t)(v24 + 2));
      operator delete(v24);
      uint64_t v24 = v25;
    }
    while (v25);
  }
  uint64_t v26 = v45;
  size_t v45 = 0;
  if (v26) {
    operator delete(v26);
  }
  uint64_t v27 = (void **)v43;
  if (v43)
  {
    uint64_t v28 = v44;
    uint64_t v29 = v43;
    if (v44 != v43)
    {
      do
      {
        if (*((char *)v28 - 1) < 0) {
          operator delete(*(v28 - 3));
        }
        v28 -= 3;
      }
      while (v28 != v27);
      uint64_t v29 = v43;
    }
    int v44 = v27;
    operator delete(v29);
  }
  uint64_t v30 = (void *)v48;
  if ((void)v48)
  {
    do
    {
      char v31 = (void *)*v30;
      sub_4F4B48((uint64_t)(v30 + 2));
      operator delete(v30);
      uint64_t v30 = v31;
    }
    while (v31);
  }
  uint64_t v32 = (void *)v47;
  *(void *)&long long v47 = 0;
  if (v32) {
    operator delete(v32);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_899C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27)
{
  sub_4D4880((void **)&a15);
  sub_1A668(&a24);
  sub_4D4880(&a27);
  sub_4DD068(v27 - 128);
  if (*(char *)(v27 - 57) < 0) {
    operator delete(*(void **)(v27 - 80));
  }
  _Unwind_Resume(a1);
}

void sub_899CEC(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  if (*(unsigned char *)(a1 + 1856)) {
    sub_899CFC(a1, a2, a3, a4, (uint64_t)a5);
  }
  else {
    sub_89B088((unsigned char *)a1, a2, a3, a4, a5);
  }
}

void sub_899CFC(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  sub_7FC920(a1, a2, a3, (uint64_t)&v187);
  uint64_t v180 = 0;
  long long v178 = 0u;
  long long v179 = 0u;
  long long v177 = 0u;
  int v181 = 1065353216;
  char v182 = 1;
  uint64_t v184 = 0;
  v185 = 0;
  __int16 v186 = 0;
  if (*(unsigned char *)(a1 + 2875) || *(unsigned char *)(a1 + 2876))
  {
    size_t v11 = (long long **)*((void *)&v187 + 1);
    int v10 = (long long **)v187;
    if ((void)v187 != *((void *)&v187 + 1))
    {
      do
      {
        sub_8BEA48((uint64_t)&v169, v10);
        v10 += 13;
      }
      while (v10 != v11);
      int v10 = (long long **)v187;
    }
    int v12 = *(unsigned __int8 *)(a1 + 1859);
    uint64_t v13 = (std::__shared_weak_count *)operator new(0x80uLL);
    v13->__shared_owners_ = 0;
    v13->__shared_weak_owners_ = 0;
    v13->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
    sub_59540C((uint64_t)&v142, (uint64_t)&v13[1], (uint64_t)v10);
    v167 = &v13[1].__vftable;
    v168 = v13;
    if (v12) {
      uint64_t v14 = 5;
    }
    else {
      uint64_t v14 = 10;
    }
    sub_8994E4(a1, (uint64_t *)&v167, v14, (uint64_t)&v169);
    sub_63DAA4((uint64_t)&v177, (uint64_t)&v169);
    uint64_t v15 = v176;
    if (v176 && !atomic_fetch_add(&v176->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    uint64_t v16 = v172;
    if (v172)
    {
      do
      {
        uint64_t v17 = (void *)*v16;
        sub_4F4B48((uint64_t)(v16 + 2));
        operator delete(v16);
        uint64_t v16 = v17;
      }
      while (v17);
    }
    unint64_t v18 = __p;
    std::string __p = 0;
    if (v18) {
      operator delete(v18);
    }
    std::string::size_type v19 = v169.__r_.__value_.__r.__words[0];
    if (v169.__r_.__value_.__r.__words[0])
    {
      std::string::size_type size = v169.__r_.__value_.__l.__size_;
      unsigned __int8 v21 = (void *)v169.__r_.__value_.__r.__words[0];
      if (v169.__r_.__value_.__l.__size_ != v169.__r_.__value_.__r.__words[0])
      {
        do
        {
          if (*(char *)(size - 1) < 0) {
            operator delete(*(void **)(size - 24));
          }
          size -= 24;
        }
        while (size != v19);
        unsigned __int8 v21 = (void *)v169.__r_.__value_.__r.__words[0];
      }
      v169.__r_.__value_.__l.__size_ = v19;
      operator delete(v21);
    }
    uint64_t v22 = v168;
    if (v168 && !atomic_fetch_add(&v168->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
    sub_89F5A4((uint64_t *)&v187, v187, (unint64_t)&v177);
  }
  if (*(unsigned char *)(a1 + 1862))
  {
    sub_899800(a1, (uint64_t)&v169);
    sub_63DAA4((uint64_t)&v177, (uint64_t)&v169);
    size_t v23 = v176;
    if (v176 && !atomic_fetch_add(&v176->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    uint64_t v24 = v172;
    if (v172)
    {
      do
      {
        uint64_t v25 = (void *)*v24;
        sub_4F4B48((uint64_t)(v24 + 2));
        operator delete(v24);
        uint64_t v24 = v25;
      }
      while (v25);
    }
    uint64_t v26 = __p;
    std::string __p = 0;
    if (v26) {
      operator delete(v26);
    }
    std::string::size_type v27 = v169.__r_.__value_.__r.__words[0];
    if (v169.__r_.__value_.__r.__words[0])
    {
      std::string::size_type v28 = v169.__r_.__value_.__l.__size_;
      uint64_t v29 = (void *)v169.__r_.__value_.__r.__words[0];
      if (v169.__r_.__value_.__l.__size_ != v169.__r_.__value_.__r.__words[0])
      {
        do
        {
          if (*(char *)(v28 - 1) < 0) {
            operator delete(*(void **)(v28 - 24));
          }
          v28 -= 24;
        }
        while (v28 != v27);
        uint64_t v29 = (void *)v169.__r_.__value_.__r.__words[0];
      }
      v169.__r_.__value_.__l.__size_ = v27;
      operator delete(v29);
    }
    sub_89F5A4((uint64_t *)&v187, v187, (unint64_t)&v177);
  }
  uint64_t v30 = *(void *)(a1 + 1952);
  uint64_t v31 = *(void *)(a1 + 1960);
  int v32 = *(_DWORD *)(a1 + 2128);
  char v33 = (std::__shared_weak_count *)operator new(0xB98uLL);
  int v34 = v32 - 1;
  v33->__shared_owners_ = 0;
  v33->__shared_weak_owners_ = 0;
  v33->__vftable = (std::__shared_weak_count_vtbl *)off_243ADD8;
  std::string::size_type v35 = (std::string::size_type)&v33[1];
  sub_88F378((std::string::size_type)&v33[1], v30, v31, a2, a3, v34);
  uint64_t v165 = &v33[1].__vftable;
  v166 = v33;
  if ((a4 & 1) == 0 && !(*(unsigned __int8 *)(a1 + 2125) | BYTE5(v33[89].__shared_owners_)))
  {
    *(_OWORD *)a5 = v187;
    *(void *)(a5 + 16) = v188;
    uint64_t v188 = 0;
    long long v187 = 0uLL;
LABEL_261:
    if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
    goto LABEL_263;
  }
  if (LOBYTE(v33[120].__shared_weak_owners_) || !BYTE5(v33[89].__shared_owners_))
  {
    sub_7FC804(v35, (uint64_t)v163);
    int v36 = 0;
  }
  else
  {
    sub_7F598C(v35, (uint64_t)v163);
    int v36 = 1;
  }
  sub_7F53F4(v35, 1, (uint64_t)v163, (uint64_t)&v156);
  if (BYTE4(v33[78].__vftable))
  {
    if (byte_25CCF07 < 0)
    {
      sub_4200(&__dst, (void *)xmmword_25CCEF0, *((unint64_t *)&xmmword_25CCEF0 + 1));
    }
    else
    {
      long long __dst = xmmword_25CCEF0;
      uint64_t v155 = unk_25CCF00;
    }
  }
  else
  {
    HIBYTE(v155) = 0;
    LOBYTE(__dst) = 0;
  }
  sub_7F9E6C(v35, (uint64_t)&v142);
  if (v155 >= 0) {
    p_dst = (const std::string::value_type *)&__dst;
  }
  else {
    p_dst = (const std::string::value_type *)__dst;
  }
  if (v155 >= 0) {
    std::string::size_type v38 = HIBYTE(v155);
  }
  else {
    std::string::size_type v38 = *((void *)&__dst + 1);
  }
  char v39 = std::string::insert(&v142, 0, p_dst, v38);
  long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v169.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v169.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  if ((v164 & 0x80u) == 0) {
    uint64_t v41 = v163;
  }
  else {
    uint64_t v41 = (void **)v163[0];
  }
  if ((v164 & 0x80u) == 0) {
    std::string::size_type v42 = v164;
  }
  else {
    std::string::size_type v42 = (std::string::size_type)v163[1];
  }
  long long v43 = std::string::append(&v169, (const std::string::value_type *)v41, v42);
  long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  std::string::size_type v153 = v43->__r_.__value_.__r.__words[2];
  long long v152 = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v169.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v142.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_71;
    }
  }
  else if ((SHIBYTE(v142.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_71;
  }
  operator delete(v142.__r_.__value_.__l.__data_);
LABEL_71:
  if (sub_7FE618(a1, a1 + 80, (uint64_t)&v156))
  {
    sub_6352AC((uint64_t)&v169, (uint64_t)&v152);
    std::string::size_type v45 = v156.__r_.__value_.__r.__words[0];
    if (v156.__r_.__value_.__r.__words[0])
    {
      std::string::size_type v46 = v156.__r_.__value_.__l.__size_;
      long long v47 = (void *)v156.__r_.__value_.__r.__words[0];
      if (v156.__r_.__value_.__l.__size_ != v156.__r_.__value_.__r.__words[0])
      {
        do
        {
          if (*(char *)(v46 - 1) < 0) {
            operator delete(*(void **)(v46 - 24));
          }
          v46 -= 24;
        }
        while (v46 != v45);
        long long v47 = (void *)v156.__r_.__value_.__r.__words[0];
      }
      v156.__r_.__value_.__l.__size_ = v45;
      operator delete(v47);
    }
    std::string v156 = v169;
    memset(&v169, 0, sizeof(v169));
    if (v160)
    {
      long long v48 = v159;
      if (v159)
      {
        do
        {
          int v49 = (void *)*v48;
          sub_4F4B48((uint64_t)(v48 + 2));
          operator delete(v48);
          long long v48 = v49;
        }
        while (v49);
      }
      v159 = 0;
      unint64_t v50 = v158;
      if (v158)
      {
        uint64_t v51 = 0;
        do
          *((void *)v157 + v51++) = 0;
        while (v50 != v51);
      }
      uint64_t v160 = 0;
    }
    size_t v52 = __p;
    std::string __p = 0;
    int v53 = v157;
    size_t v157 = v52;
    if (v53) {
      operator delete(v53);
    }
    unint64_t v54 = v171;
    unint64_t v55 = v172;
    unint64_t v171 = 0;
    v159 = v172;
    uint64_t v160 = v173;
    int v161 = v174;
    unint64_t v158 = v54;
    if (v173)
    {
      unint64_t v56 = v172[1];
      if ((v54 & (v54 - 1)) != 0)
      {
        if (v56 >= v54) {
          v56 %= v54;
        }
      }
      else
      {
        v56 &= v54 - 1;
      }
      *((void *)v157 + v56) = &v159;
      v172 = 0;
      uint64_t v173 = 0;
      char v162 = v175;
    }
    else
    {
      char v162 = v175;
      if (v172)
      {
        do
        {
          uint64_t v57 = (void *)*v55;
          sub_4F4B48((uint64_t)(v55 + 2));
          operator delete(v55);
          unint64_t v55 = v57;
        }
        while (v57);
      }
    }
    unint64_t v58 = __p;
    std::string __p = 0;
    if (v58) {
      operator delete(v58);
    }
    std::string::size_type v59 = v169.__r_.__value_.__r.__words[0];
    if (v169.__r_.__value_.__r.__words[0])
    {
      std::string::size_type v60 = v169.__r_.__value_.__l.__size_;
      char v61 = (void *)v169.__r_.__value_.__r.__words[0];
      if (v169.__r_.__value_.__l.__size_ != v169.__r_.__value_.__r.__words[0])
      {
        do
        {
          if (*(char *)(v60 - 1) < 0) {
            operator delete(*(void **)(v60 - 24));
          }
          v60 -= 24;
        }
        while (v60 != v59);
        char v61 = (void *)v169.__r_.__value_.__r.__words[0];
      }
      v169.__r_.__value_.__l.__size_ = v59;
      operator delete(v61);
    }
  }
  else if (BYTE4(v33[78].__vftable))
  {
    sub_7FE910(a1, (long long **)&v156);
  }
  uint64_t v150 = 0;
  long long v151 = 0;
  sub_6370D4(&v169, &v156, 1, &v150);
  uint64_t v62 = v151;
  if (v151 && !atomic_fetch_add(&v151->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
    std::__shared_weak_count::__release_weak(v62);
  }
  sub_7FC55C((uint64_t)v165, (uint64_t *)&v169, 0, 0);
  if (v36)
  {
    sub_8953A4((uint64_t)&v169, (uint64_t)&xmmword_25CDA48, (uint64_t)&v142);
    sub_63DAA4((uint64_t)&v169, (uint64_t)&v142);
    char v63 = v148;
    if (v148 && !atomic_fetch_add(&v148->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
    char v64 = v144;
    if (v144)
    {
      do
      {
        int v65 = (void *)*v64;
        sub_4F4B48((uint64_t)(v64 + 2));
        operator delete(v64);
        char v64 = v65;
      }
      while (v65);
    }
    uint64_t v66 = v143;
    unint64_t v143 = 0;
    if (v66) {
      operator delete(v66);
    }
    std::string::size_type v67 = v142.__r_.__value_.__r.__words[0];
    if (v142.__r_.__value_.__r.__words[0])
    {
      std::string::size_type v68 = v142.__r_.__value_.__l.__size_;
      uint64_t v69 = (void *)v142.__r_.__value_.__r.__words[0];
      if (v142.__r_.__value_.__l.__size_ != v142.__r_.__value_.__r.__words[0])
      {
        do
        {
          if (*(char *)(v68 - 1) < 0) {
            operator delete(*(void **)(v68 - 24));
          }
          v68 -= 24;
        }
        while (v68 != v67);
        uint64_t v69 = (void *)v142.__r_.__value_.__r.__words[0];
      }
      v142.__r_.__value_.__l.__size_ = v67;
      operator delete(v69);
    }
  }
  if (!sub_637DD8((long long **)&v177))
  {
    sub_635CD0((long long **)(a1 + 80), (uint64_t)v140);
    uint64_t v70 = sub_5231C(a1 + 80);
    sub_63531C((uint64_t)&v133, (uint64_t)v140, v70);
    uint64_t v71 = sub_897368((uint64_t)v165);
    long long v72 = (std::__shared_weak_count *)operator new(0x80uLL);
    v72->__shared_owners_ = 0;
    v72->__shared_weak_owners_ = 0;
    v72->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
    sub_59540C((uint64_t)v189, (uint64_t)&v72[1], (uint64_t)&v169);
    long long v138 = &v72[1].__vftable;
    int v139 = v72;
    sub_6370D4(&v142, &v133, v71, &v138);
    sub_63DAA4((uint64_t)&v177, (uint64_t)&v142);
    __int16 v73 = v148;
    if (v148 && !atomic_fetch_add(&v148->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
    uint64_t v74 = v144;
    if (v144)
    {
      do
      {
        uint64_t v75 = (void *)*v74;
        sub_4F4B48((uint64_t)(v74 + 2));
        operator delete(v74);
        uint64_t v74 = v75;
      }
      while (v75);
    }
    uint64_t v76 = v143;
    unint64_t v143 = 0;
    if (v76) {
      operator delete(v76);
    }
    std::string::size_type v77 = v142.__r_.__value_.__r.__words[0];
    if (v142.__r_.__value_.__r.__words[0])
    {
      std::string::size_type v78 = v142.__r_.__value_.__l.__size_;
      size_t v79 = (void *)v142.__r_.__value_.__r.__words[0];
      if (v142.__r_.__value_.__l.__size_ != v142.__r_.__value_.__r.__words[0])
      {
        do
        {
          if (*(char *)(v78 - 1) < 0) {
            operator delete(*(void **)(v78 - 24));
          }
          v78 -= 24;
        }
        while (v78 != v77);
        size_t v79 = (void *)v142.__r_.__value_.__r.__words[0];
      }
      v142.__r_.__value_.__l.__size_ = v77;
      operator delete(v79);
    }
    unint64_t v80 = v139;
    if (v139 && !atomic_fetch_add(&v139->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
    std::string v81 = v136;
    if (v136)
    {
      do
      {
        uint64_t v82 = (void *)*v81;
        sub_4F4B48((uint64_t)(v81 + 2));
        operator delete(v81);
        std::string v81 = v82;
      }
      while (v82);
    }
    unint64_t v83 = v135;
    v135 = 0;
    if (v83) {
      operator delete(v83);
    }
    char v84 = (void **)v133;
    if (v133)
    {
      int64_t v85 = v134;
      std::string v86 = v133;
      if (v134 != v133)
      {
        do
        {
          if (*((char *)v85 - 1) < 0) {
            operator delete(*(v85 - 3));
          }
          v85 -= 3;
        }
        while (v85 != v84);
        std::string v86 = v133;
      }
      v134 = v84;
      operator delete(v86);
    }
    if (SHIBYTE(v141) < 0) {
      operator delete(v140[0]);
    }
  }
  sub_7FC55C(a1, (uint64_t *)&v177, 0, 0);
  memset(&v142, 0, sizeof(v142));
  sub_8A6F8((char *)&v142, v177, *((uint64_t *)&v177 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v177 + 1) - v177) >> 3));
  sub_5954B0((uint64_t)&v143, (uint64_t)&v178 + 8);
  char v145 = v182;
  int v146 = v183;
  uint64_t v147 = v184;
  v148 = v185;
  if (v185) {
    atomic_fetch_add_explicit(&v185->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __int16 v149 = v186;
  if (a4 && (*(_DWORD *)(a1 + 1848) - 41) >= 0x13)
  {
    uint64_t v87 = 234;
    if (!*(unsigned char *)(a1 + 2873)) {
      uint64_t v87 = 240;
    }
    uint64_t v88 = &qword_25CD940;
    if (*(unsigned char *)(a1 + 2873)) {
      uint64_t v88 = (uint64_t *)&xmmword_25CD928;
    }
    BOOL v89 = &byte_25CD93F;
    if (!*(unsigned char *)(a1 + 2873)) {
      BOOL v89 = (char *)&unk_25CD957;
    }
    if (*v89 < 0)
    {
      if (*(unsigned char *)(a1 + 2873)) {
        uint64_t v97 = (unint64_t *)&xmmword_25CD928 + 1;
      }
      else {
        uint64_t v97 = (unint64_t *)&unk_25CD948;
      }
      sub_4200(v140, *(void **)&dword_25CD580[v87], *v97);
    }
    else
    {
      *(_OWORD *)size_t v140 = *(_OWORD *)v88;
      uint64_t v141 = v88[2];
    }
    sub_6379F8((uint64_t *)&v177, (char *)&qword_25CD400);
    sub_8953A4((uint64_t)&v177, (uint64_t)v140, (uint64_t)&v133);
    sub_63DAA4((uint64_t)&v142, (uint64_t)&v133);
    uint64_t v98 = v137;
    if (v137 && !atomic_fetch_add(&v137->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
    uint64_t v99 = v136;
    if (v136)
    {
      do
      {
        uint64_t v100 = (void *)*v99;
        sub_4F4B48((uint64_t)(v99 + 2));
        operator delete(v99);
        uint64_t v99 = v100;
      }
      while (v100);
    }
    uint64_t v101 = v135;
    v135 = 0;
    if (v101) {
      operator delete(v101);
    }
    int v94 = (void **)v133;
    if (!v133) {
      goto LABEL_212;
    }
    uint64_t v102 = v134;
    uint64_t v96 = v133;
    if (v134 == v133) {
      goto LABEL_211;
    }
    do
    {
      if (*((char *)v102 - 1) < 0) {
        operator delete(*(v102 - 3));
      }
      v102 -= 3;
    }
    while (v102 != v94);
    goto LABEL_210;
  }
  if (!*(unsigned char *)(a1 + 2125)) {
    goto LABEL_214;
  }
  if (byte_25CDA47 < 0)
  {
    sub_4200(v140, (void *)xmmword_25CDA30, *((unint64_t *)&xmmword_25CDA30 + 1));
  }
  else
  {
    *(_OWORD *)size_t v140 = xmmword_25CDA30;
    uint64_t v141 = unk_25CDA40;
  }
  sub_8953A4((uint64_t)&v177, (uint64_t)v140, (uint64_t)&v133);
  sub_63DAA4((uint64_t)&v142, (uint64_t)&v133);
  long long v90 = v137;
  if (v137 && !atomic_fetch_add(&v137->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
    std::__shared_weak_count::__release_weak(v90);
  }
  long long v91 = v136;
  if (v136)
  {
    do
    {
      long long v92 = (void *)*v91;
      sub_4F4B48((uint64_t)(v91 + 2));
      operator delete(v91);
      long long v91 = v92;
    }
    while (v92);
  }
  uint64_t v93 = v135;
  v135 = 0;
  if (v93) {
    operator delete(v93);
  }
  int v94 = (void **)v133;
  if (v133)
  {
    char v95 = v134;
    uint64_t v96 = v133;
    if (v134 == v133) {
      goto LABEL_211;
    }
    do
    {
      if (*((char *)v95 - 1) < 0) {
        operator delete(*(v95 - 3));
      }
      v95 -= 3;
    }
    while (v95 != v94);
LABEL_210:
    uint64_t v96 = v133;
LABEL_211:
    v134 = v94;
    operator delete(v96);
  }
LABEL_212:
  if (SHIBYTE(v141) < 0) {
    operator delete(v140[0]);
  }
LABEL_214:
  sub_89F5A4((uint64_t *)&v187, v187, (unint64_t)&v142);
  *(_OWORD *)a5 = v187;
  *(void *)(a5 + 16) = v188;
  uint64_t v188 = 0;
  long long v187 = 0uLL;
  uint64_t v103 = v148;
  if (v148 && !atomic_fetch_add(&v148->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
    std::__shared_weak_count::__release_weak(v103);
  }
  uint64_t v104 = v144;
  if (v144)
  {
    do
    {
      v105 = (void *)*v104;
      sub_4F4B48((uint64_t)(v104 + 2));
      operator delete(v104);
      uint64_t v104 = v105;
    }
    while (v105);
  }
  int v106 = v143;
  unint64_t v143 = 0;
  if (v106) {
    operator delete(v106);
  }
  std::string::size_type v107 = v142.__r_.__value_.__r.__words[0];
  if (v142.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v108 = v142.__r_.__value_.__l.__size_;
    size_t v109 = (void *)v142.__r_.__value_.__r.__words[0];
    if (v142.__r_.__value_.__l.__size_ != v142.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v108 - 1) < 0) {
          operator delete(*(void **)(v108 - 24));
        }
        v108 -= 24;
      }
      while (v108 != v107);
      size_t v109 = (void *)v142.__r_.__value_.__r.__words[0];
    }
    v142.__r_.__value_.__l.__size_ = v107;
    operator delete(v109);
  }
  unint64_t v110 = v176;
  if (v176 && !atomic_fetch_add(&v176->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
    std::__shared_weak_count::__release_weak(v110);
  }
  v111 = v172;
  if (v172)
  {
    do
    {
      v112 = (void *)*v111;
      sub_4F4B48((uint64_t)(v111 + 2));
      operator delete(v111);
      v111 = v112;
    }
    while (v112);
  }
  v113 = __p;
  std::string __p = 0;
  if (v113) {
    operator delete(v113);
  }
  std::string::size_type v114 = v169.__r_.__value_.__r.__words[0];
  if (v169.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v115 = v169.__r_.__value_.__l.__size_;
    long long v116 = (void *)v169.__r_.__value_.__r.__words[0];
    if (v169.__r_.__value_.__l.__size_ != v169.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v115 - 1) < 0) {
          operator delete(*(void **)(v115 - 24));
        }
        v115 -= 24;
      }
      while (v115 != v114);
      long long v116 = (void *)v169.__r_.__value_.__r.__words[0];
    }
    v169.__r_.__value_.__l.__size_ = v114;
    operator delete(v116);
  }
  if ((SHIBYTE(v153) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v155) & 0x80000000) == 0) {
      goto LABEL_246;
    }
LABEL_285:
    operator delete((void *)__dst);
    int v117 = v159;
    if (!v159) {
      goto LABEL_248;
    }
    goto LABEL_247;
  }
  operator delete((void *)v152);
  if (SHIBYTE(v155) < 0) {
    goto LABEL_285;
  }
LABEL_246:
  int v117 = v159;
  if (!v159) {
    goto LABEL_248;
  }
  do
  {
LABEL_247:
    size_t v118 = (void *)*v117;
    sub_4F4B48((uint64_t)(v117 + 2));
    operator delete(v117);
    int v117 = v118;
  }
  while (v118);
LABEL_248:
  unint64_t v119 = v157;
  size_t v157 = 0;
  if (v119) {
    operator delete(v119);
  }
  std::string::size_type v120 = v156.__r_.__value_.__r.__words[0];
  if (v156.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v121 = v156.__r_.__value_.__l.__size_;
    uint64_t v122 = (void *)v156.__r_.__value_.__r.__words[0];
    if (v156.__r_.__value_.__l.__size_ != v156.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v121 - 1) < 0) {
          operator delete(*(void **)(v121 - 24));
        }
        v121 -= 24;
      }
      while (v121 != v120);
      uint64_t v122 = (void *)v156.__r_.__value_.__r.__words[0];
    }
    v156.__r_.__value_.__l.__size_ = v120;
    operator delete(v122);
  }
  if ((char)v164 < 0) {
    operator delete(v163[0]);
  }
  char v33 = v166;
  if (v166) {
    goto LABEL_261;
  }
LABEL_263:
  uint64_t v123 = v185;
  if (v185 && !atomic_fetch_add(&v185->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
    std::__shared_weak_count::__release_weak(v123);
  }
  uint64_t v124 = (void *)*((void *)&v179 + 1);
  if (*((void *)&v179 + 1))
  {
    do
    {
      v125 = (void *)*v124;
      sub_4F4B48((uint64_t)(v124 + 2));
      operator delete(v124);
      uint64_t v124 = v125;
    }
    while (v125);
  }
  int v126 = (void *)*((void *)&v178 + 1);
  *((void *)&v178 + 1) = 0;
  if (v126) {
    operator delete(v126);
  }
  uint64_t v127 = v177;
  if ((void)v177)
  {
    uint64_t v128 = *((void *)&v177 + 1);
    size_t v129 = (void *)v177;
    if (*((void *)&v177 + 1) != (void)v177)
    {
      do
      {
        if (*(char *)(v128 - 1) < 0) {
          operator delete(*(void **)(v128 - 24));
        }
        v128 -= 24;
      }
      while (v128 != v127);
      size_t v129 = (void *)v177;
    }
    *((void *)&v177 + 1) = v127;
    operator delete(v129);
  }
  unint64_t v130 = (void **)v187;
  if ((void)v187)
  {
    v131 = (void **)*((void *)&v187 + 1);
    v132 = (void *)v187;
    if (*((void *)&v187 + 1) != (void)v187)
    {
      do
        v131 = sub_4F31D0(v131 - 13);
      while (v131 != v130);
      v132 = (void *)v187;
    }
    *((void *)&v187 + 1) = v130;
    operator delete(v132);
  }
}

void sub_89AE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_4F31D0((void **)&a28);
  sub_4F31D0(&a73);
  if (a48 < 0) {
    operator delete(__p);
  }
  if (a55 < 0) {
    operator delete(a50);
  }
  sub_4D4880(&a57);
  if (a71 < 0) {
    operator delete(a66);
  }
  sub_14A84((uint64_t)&a72);
  sub_4F31D0((void **)(v73 - 240));
  sub_5920E0((void **)(v73 - 128));
  _Unwind_Resume(a1);
}

void sub_89B088(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  sub_7FDAB0((uint64_t)a1, a2, a3, (uint64_t)a5);
  if (a1[2876])
  {
    uint64_t v8 = *a5;
    size_t v9 = (std::__shared_weak_count *)operator new(0x80uLL);
    v9->__shared_owners_ = 0;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
    sub_59540C((uint64_t)&v34, (uint64_t)&v9[1], v8);
    int v36 = &v9[1].__vftable;
    uint64_t v37 = v9;
    sub_8994E4((uint64_t)a1, (uint64_t *)&v36, 10, (uint64_t)&v38);
    int v10 = v37;
    if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    sub_89F5A4(a5, *a5, (unint64_t)&v38);
    size_t v11 = v42;
    if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    int v12 = v41;
    if (v41)
    {
      do
      {
        uint64_t v13 = (void *)*v12;
        sub_4F4B48((uint64_t)(v12 + 2));
        operator delete(v12);
        int v12 = v13;
      }
      while (v13);
    }
    uint64_t v14 = __p;
    std::string __p = 0;
    if (v14) {
      operator delete(v14);
    }
    uint64_t v15 = (void **)v38;
    if (v38)
    {
      uint64_t v16 = v39;
      uint64_t v17 = v38;
      if (v39 == v38) {
        goto LABEL_33;
      }
      do
      {
        if (*((char *)v16 - 1) < 0) {
          operator delete(*(v16 - 3));
        }
        v16 -= 3;
      }
      while (v16 != v15);
LABEL_32:
      uint64_t v17 = v38;
LABEL_33:
      char v39 = v15;
LABEL_34:
      operator delete(v17);
    }
  }
  else if (a1[2125])
  {
    sub_8953A4(*a5, (uint64_t)&xmmword_25CDA30, (uint64_t)&v38);
    sub_89F5A4(a5, *a5, (unint64_t)&v38);
    unint64_t v18 = v42;
    if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    std::string::size_type v19 = v41;
    if (v41)
    {
      do
      {
        uint64_t v20 = (void *)*v19;
        sub_4F4B48((uint64_t)(v19 + 2));
        operator delete(v19);
        std::string::size_type v19 = v20;
      }
      while (v20);
    }
    unsigned __int8 v21 = __p;
    std::string __p = 0;
    if (v21) {
      operator delete(v21);
    }
    uint64_t v15 = (void **)v38;
    if (v38)
    {
      uint64_t v22 = v39;
      uint64_t v17 = v38;
      if (v39 == v38) {
        goto LABEL_33;
      }
      do
      {
        if (*((char *)v22 - 1) < 0) {
          operator delete(*(v22 - 3));
        }
        v22 -= 3;
      }
      while (v22 != v15);
      goto LABEL_32;
    }
  }
  else if (a4)
  {
    uint64_t v23 = 234;
    if (!a1[2873]) {
      uint64_t v23 = 240;
    }
    uint64_t v24 = &qword_25CD940;
    if (a1[2873]) {
      uint64_t v24 = (uint64_t *)&xmmword_25CD928;
    }
    uint64_t v25 = &byte_25CD93F;
    if (!a1[2873]) {
      uint64_t v25 = (char *)&unk_25CD957;
    }
    if (*v25 < 0)
    {
      if (a1[2873]) {
        uint64_t v26 = (unint64_t *)&xmmword_25CD928 + 1;
      }
      else {
        uint64_t v26 = (unint64_t *)&unk_25CD948;
      }
      sub_4200(&v34, *(void **)&dword_25CD580[v23], *v26);
    }
    else
    {
      long long v34 = *(_OWORD *)v24;
      uint64_t v35 = v24[2];
    }
    sub_6379F8((uint64_t *)*a5, (char *)&qword_25CD400);
    sub_8953A4(*a5, (uint64_t)&v34, (uint64_t)&v38);
    sub_89F5A4(a5, *a5, (unint64_t)&v38);
    std::string::size_type v27 = v42;
    if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
    std::string::size_type v28 = v41;
    if (v41)
    {
      do
      {
        uint64_t v29 = (void *)*v28;
        sub_4F4B48((uint64_t)(v28 + 2));
        operator delete(v28);
        std::string::size_type v28 = v29;
      }
      while (v29);
    }
    uint64_t v30 = __p;
    std::string __p = 0;
    if (v30) {
      operator delete(v30);
    }
    uint64_t v31 = (void **)v38;
    if (v38)
    {
      int v32 = v39;
      char v33 = v38;
      if (v39 != v38)
      {
        do
        {
          if (*((char *)v32 - 1) < 0) {
            operator delete(*(v32 - 3));
          }
          v32 -= 3;
        }
        while (v32 != v31);
        char v33 = v38;
      }
      char v39 = v31;
      operator delete(v33);
    }
    if (SHIBYTE(v35) < 0)
    {
      uint64_t v17 = (void *)v34;
      goto LABEL_34;
    }
  }
}

void sub_89B4B4(_Unwind_Exception *a1)
{
  sub_5920E0(v1);
  _Unwind_Resume(a1);
}

void sub_89B4C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17)
{
  sub_4F31D0(&a17);
  if (a14 < 0)
  {
    operator delete(__p);
    sub_5920E0(v17);
    _Unwind_Resume(a1);
  }
  sub_5920E0(v17);
  _Unwind_Resume(a1);
}

void sub_89B584(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  long long v88 = 0uLL;
  unint64_t v89 = 0;
  sub_7FF084(a1, &v87);
  uint64_t v8 = *(void *)(a1 + 1952);
  uint64_t v9 = *(void *)(a1 + 1960);
  int v10 = *(_DWORD *)(a1 + 2128);
  size_t v11 = operator new(0xB98uLL);
  int v12 = v10 - 1;
  v11[1] = 0;
  v11[2] = 0;
  *size_t v11 = off_243ADD8;
  uint64_t v13 = (uint64_t)(v11 + 3);
  sub_88F378((std::string::size_type)(v11 + 3), v8, v9, a2, a3, v12);
  int64_t v85 = (char *)(v11 + 3);
  std::string v86 = (std::__shared_weak_count *)v11;
  sub_89616C((std::string::size_type)(v11 + 3), 0, 0, 0, (uint64_t)&v80);
  if (*((unsigned char *)v11 + 1876))
  {
    uint64_t v14 = nullsub_1(&v80);
    uint64_t v73 = 0;
    uint64_t v74 = 0;
    uint64_t v75 = 0;
    sub_8A6F8((char *)&v73, *(void *)v14, *(void *)(v14 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v14 + 8) - *(void *)v14) >> 3));
    sub_5954B0((uint64_t)&__p, v14 + 24);
    char v78 = *(unsigned char *)(v14 + 64);
    sub_7FE910(v13, (long long **)&v73);
    sub_63797C((uint64_t)&v80, (uint64_t)&v73);
    uint64_t v15 = v77;
    if (v77)
    {
      do
      {
        uint64_t v16 = (void *)*v15;
        sub_4F4B48((uint64_t)(v15 + 2));
        operator delete(v15);
        uint64_t v15 = v16;
      }
      while (v16);
    }
    uint64_t v17 = __p;
    std::string __p = 0;
    if (v17) {
      operator delete(v17);
    }
    unint64_t v18 = (void **)v73;
    if (v73)
    {
      std::string::size_type v19 = v74;
      uint64_t v20 = v73;
      if (v74 != v73)
      {
        do
        {
          if (*((char *)v19 - 1) < 0) {
            operator delete(*(v19 - 3));
          }
          v19 -= 3;
        }
        while (v19 != v18);
        uint64_t v20 = v73;
      }
      uint64_t v74 = v18;
      operator delete(v20);
    }
    uint64_t v13 = (uint64_t)v85;
  }
  *(_OWORD *)char v61 = 0u;
  *(_OWORD *)uint64_t v62 = 0u;
  LODWORD(v63) = 1065353216;
  int v21 = sub_897368(v13);
  uint64_t v22 = (std::__shared_weak_count *)operator new(0x80uLL);
  v22->__shared_owners_ = 0;
  v22->__shared_weak_owners_ = 0;
  v22->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
  sub_59540C((uint64_t)&v90, (uint64_t)&v22[1], (uint64_t)&v80);
  uint64_t v71 = &v22[1].__vftable;
  long long v72 = v22;
  sub_6373D8((uint64_t)&v73, (uint64_t)&v87, (uint64_t)v61, v21, (uint64_t *)&v71);
  uint64_t v23 = v72;
  if (v72 && !atomic_fetch_add(&v72->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  uint64_t v24 = v62[0];
  if (v62[0])
  {
    do
    {
      uint64_t v25 = (void *)*v24;
      sub_4F4B48((uint64_t)(v24 + 2));
      operator delete(v24);
      uint64_t v24 = v25;
    }
    while (v25);
  }
  uint64_t v26 = v61[0];
  v61[0] = 0;
  if (v26) {
    operator delete(v26);
  }
  sub_7FC55C(a1, (uint64_t *)&v73, 0, 0);
  uint64_t v27 = *((void *)&v88 + 1);
  if (*((void *)&v88 + 1) >= v89)
  {
    uint64_t v28 = sub_63D140((uint64_t *)&v88, (uint64_t)&v73);
  }
  else
  {
    sub_63D394((uint64_t)&v89, *((uint64_t *)&v88 + 1), (uint64_t)&v73);
    uint64_t v28 = v27 + 104;
  }
  *((void *)&v88 + 1) = v28;
  sub_895718(a1, (uint64_t *)v61);
  uint64_t v29 = *((void *)&v88 + 1);
  if (*((void *)&v88 + 1) >= v89)
  {
    uint64_t v35 = sub_63D48C((void ***)&v88, (uint64_t)v61);
    int v36 = (std::__shared_weak_count *)*((void *)&v69 + 1);
    *((void *)&v88 + 1) = v35;
    if (*((void *)&v69 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v69 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  else
  {
    *(void *)(*((void *)&v88 + 1) + 16) = 0;
    *(_OWORD *)uint64_t v29 = 0u;
    *(_OWORD *)uint64_t v29 = *(_OWORD *)v61;
    *(void **)(v29 + 16) = v62[0];
    uint64_t v30 = v62[1];
    *(_OWORD *)char v61 = 0u;
    *(_OWORD *)uint64_t v62 = 0u;
    *(void *)(v29 + 24) = v30;
    *(void *)(v29 + 32) = v63;
    uint64_t v63 = 0;
    uint64_t v31 = v64;
    *(void *)(v29 + 40) = v64;
    uint64_t v32 = v65;
    *(void *)(v29 + 48) = v65;
    *(_DWORD *)(v29 + 56) = v66;
    if (v32)
    {
      unint64_t v33 = v31[1];
      unint64_t v34 = *(void *)(v29 + 32);
      if ((v34 & (v34 - 1)) != 0)
      {
        if (v33 >= v34) {
          v33 %= v34;
        }
      }
      else
      {
        v33 &= v34 - 1;
      }
      v30[v33] = v29 + 40;
      char v64 = 0;
      uint64_t v65 = 0;
    }
    *(unsigned char *)(v29 + 64) = v67;
    *(_DWORD *)(v29 + 72) = v68;
    *(_OWORD *)(v29 + 80) = v69;
    long long v69 = 0uLL;
    *(_WORD *)(v29 + 96) = v70;
    *((void *)&v88 + 1) = v29 + 104;
  }
  uint64_t v37 = v64;
  if (v64)
  {
    do
    {
      std::string::size_type v38 = (void *)*v37;
      sub_4F4B48((uint64_t)(v37 + 2));
      operator delete(v37);
      uint64_t v37 = v38;
    }
    while (v38);
  }
  char v39 = v62[1];
  v62[1] = 0;
  if (v39) {
    operator delete(v39);
  }
  long long v40 = (void **)v61[0];
  if (v61[0])
  {
    uint64_t v41 = (void **)v61[1];
    std::string::size_type v42 = v61[0];
    if (v61[1] != v61[0])
    {
      do
      {
        if (*((char *)v41 - 1) < 0) {
          operator delete(*(v41 - 3));
        }
        v41 -= 3;
      }
      while (v41 != v40);
      std::string::size_type v42 = v61[0];
    }
    v61[1] = v40;
    operator delete(v42);
  }
  *(_OWORD *)a4 = v88;
  *(void *)(a4 + 16) = v89;
  long long v88 = 0uLL;
  unint64_t v89 = 0;
  long long v43 = v79;
  if (v79 && !atomic_fetch_add(&v79->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
  }
  long long v44 = v77;
  if (v77)
  {
    do
    {
      std::string::size_type v45 = (void *)*v44;
      sub_4F4B48((uint64_t)(v44 + 2));
      operator delete(v44);
      long long v44 = v45;
    }
    while (v45);
  }
  std::string::size_type v46 = __p;
  std::string __p = 0;
  if (v46) {
    operator delete(v46);
  }
  long long v47 = (void **)v73;
  if (v73)
  {
    long long v48 = v74;
    int v49 = v73;
    if (v74 != v73)
    {
      do
      {
        if (*((char *)v48 - 1) < 0) {
          operator delete(*(v48 - 3));
        }
        v48 -= 3;
      }
      while (v48 != v47);
      int v49 = v73;
    }
    uint64_t v74 = v47;
    operator delete(v49);
  }
  unint64_t v50 = v84;
  if (v84 && !atomic_fetch_add(&v84->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
  }
  uint64_t v51 = v83;
  if (v83)
  {
    do
    {
      size_t v52 = (void *)*v51;
      sub_4F4B48((uint64_t)(v51 + 2));
      operator delete(v51);
      uint64_t v51 = v52;
    }
    while (v52);
  }
  int v53 = v82;
  uint64_t v82 = 0;
  if (v53) {
    operator delete(v53);
  }
  unint64_t v54 = (void **)v80;
  if (v80)
  {
    unint64_t v55 = v81;
    unint64_t v56 = v80;
    if (v81 != v80)
    {
      do
      {
        if (*((char *)v55 - 1) < 0) {
          operator delete(*(v55 - 3));
        }
        v55 -= 3;
      }
      while (v55 != v54);
      unint64_t v56 = v80;
    }
    std::string v81 = v54;
    operator delete(v56);
  }
  uint64_t v57 = v86;
  if (!v86 || atomic_fetch_add(&v86->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_82;
    }
    goto LABEL_81;
  }
  ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
  std::__shared_weak_count::__release_weak(v57);
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
LABEL_81:
  }
    operator delete(v87.__r_.__value_.__l.__data_);
LABEL_82:
  unint64_t v58 = (void **)v88;
  if ((void)v88)
  {
    std::string::size_type v59 = (void **)*((void *)&v88 + 1);
    std::string::size_type v60 = (void *)v88;
    if (*((void *)&v88 + 1) != (void)v88)
    {
      do
        std::string::size_type v59 = sub_4F31D0(v59 - 13);
      while (v59 != v58);
      std::string::size_type v60 = (void *)v88;
    }
    *((void *)&v88 + 1) = v58;
    operator delete(v60);
  }
}

void sub_89BC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37)
{
  sub_4F31D0(&a9);
  sub_4F31D0(&a24);
  sub_4F31D0(&a37);
  sub_14A84(v37 - 152);
  if (*(char *)(v37 - 113) < 0) {
    operator delete(*(void **)(v37 - 136));
  }
  sub_5920E0((void **)(v37 - 112));
  _Unwind_Resume(a1);
}

uint64_t sub_89BD68@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t result = sub_684668(a2);
  if (result)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    int v7 = sub_6846C0(a2);
    uint64_t v8 = *a1;
    if (v7)
    {
      uint64_t v9 = *(uint64_t (**)(void *, uint64_t))(v8 + 152);
      int v10 = a1;
      uint64_t v11 = a2;
    }
    else
    {
      uint64_t v9 = *(uint64_t (**)(void *, uint64_t))(v8 + 160);
      int v10 = a1;
      uint64_t v11 = a2;
    }
    return v9(v10, v11);
  }
  return result;
}

uint64_t sub_89BE50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t result = sub_684668(a2);
  if (result)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    int v7 = (void *)(a1 - 2136);
    int v8 = sub_6846C0(a2);
    uint64_t v9 = *v7;
    if (v8)
    {
      int v10 = *(uint64_t (**)(void *, uint64_t))(v9 + 152);
      uint64_t v11 = v7;
      uint64_t v12 = a2;
    }
    else
    {
      int v10 = *(uint64_t (**)(void *, uint64_t))(v9 + 160);
      uint64_t v11 = v7;
      uint64_t v12 = a2;
    }
    return v10(v11, v12);
  }
  return result;
}

uint64_t sub_89BF3C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_5964A0((uint64_t)v73, a1);
  sub_6835F0((uint64_t)v73, 6);
  sub_676270((uint64_t)v73, 1, (uint64_t)&v68);
  int v3 = byte_25CCE5F;
  if (byte_25CCE5F >= 0) {
    size_t v4 = byte_25CCE5F;
  }
  else {
    size_t v4 = qword_25CCE50;
  }
  int v5 = byte_25CD7A7;
  if (byte_25CD7A7 >= 0) {
    size_t v6 = byte_25CD7A7;
  }
  else {
    size_t v6 = qword_25CD798;
  }
  unint64_t v7 = v6 + v4;
  if (v6 + v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v7 <= 0x16)
  {
    size_t v66 = 0;
    unint64_t v67 = 0;
    long long __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v67) = v6 + v4;
    if (!v4) {
      goto LABEL_14;
    }
    goto LABEL_10;
  }
  uint64_t v20 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v7 | 7) != 0x17) {
    uint64_t v20 = v7 | 7;
  }
  uint64_t v21 = v20 + 1;
  p_dst = (void **)operator new(v20 + 1);
  size_t v66 = v6 + v4;
  unint64_t v67 = v21 | 0x8000000000000000;
  long long __dst = p_dst;
  if (v4)
  {
LABEL_10:
    if (v3 >= 0) {
      uint64_t v9 = &qword_25CCE48;
    }
    else {
      uint64_t v9 = (uint64_t *)qword_25CCE48;
    }
    memmove(p_dst, v9, v4);
  }
LABEL_14:
  int v10 = (char *)p_dst + v4;
  if (v6)
  {
    if (v5 >= 0) {
      uint64_t v11 = &qword_25CD790;
    }
    else {
      uint64_t v11 = (uint64_t *)qword_25CD790;
    }
    memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  if (sub_637DD8((long long **)&v68))
  {
    sub_6352AC((uint64_t)v56, (uint64_t)&__dst);
    uint64_t v12 = (std::__shared_weak_count *)operator new(0x80uLL);
    v12->__shared_owners_ = 0;
    v12->__shared_weak_owners_ = 0;
    v12->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
    sub_63D394((uint64_t)&v74, (uint64_t)&v12[1], (uint64_t)&v68);
    unint64_t v54 = &v12[1].__vftable;
    unint64_t v55 = v12;
    sub_6370D4(&v60, v56, 10, &v54);
    uint64_t v13 = v55;
    if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    uint64_t v14 = v59;
    if (v59)
    {
      do
      {
        uint64_t v15 = (void *)*v14;
        sub_4F4B48((uint64_t)(v14 + 2));
        operator delete(v14);
        uint64_t v14 = v15;
      }
      while (v15);
    }
    uint64_t v16 = (void *)*((void *)&v57 + 1);
    *((void *)&v57 + 1) = 0;
    if (v16) {
      operator delete(v16);
    }
    uint64_t v17 = (void **)v56[0];
    if (v56[0])
    {
      unint64_t v18 = (void **)v56[1];
      std::string::size_type v19 = v56[0];
      if (v56[1] != v56[0])
      {
        do
        {
          if (*((char *)v18 - 1) < 0) {
            operator delete(*(v18 - 3));
          }
          v18 -= 3;
        }
        while (v18 != v17);
        std::string::size_type v19 = v56[0];
      }
      v56[1] = v17;
      operator delete(v19);
    }
    unint64_t v22 = a2[1];
    if (v22 >= a2[2])
    {
      uint64_t v23 = sub_63D140(a2, (uint64_t)&v60);
    }
    else
    {
      sub_63D394((uint64_t)(a2 + 2), a2[1], (uint64_t)&v60);
      uint64_t v23 = v22 + 104;
      a2[1] = v22 + 104;
    }
    a2[1] = v23;
    uint64_t v24 = v64;
    if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    uint64_t v25 = v63;
    if (v63)
    {
      do
      {
        uint64_t v26 = (void *)*v25;
        sub_4F4B48((uint64_t)(v25 + 2));
        operator delete(v25);
        uint64_t v25 = v26;
      }
      while (v26);
    }
    uint64_t v27 = v62;
    uint64_t v62 = 0;
    if (v27) {
      operator delete(v27);
    }
    uint64_t v28 = (void **)v60;
    if (v60)
    {
      uint64_t v29 = v61;
      uint64_t v30 = v60;
      if (v61 != v60)
      {
        do
        {
          if (*((char *)v29 - 1) < 0) {
            operator delete(*(v29 - 3));
          }
          v29 -= 3;
        }
        while (v29 != v28);
        uint64_t v30 = v60;
      }
      char v61 = v28;
      operator delete(v30);
    }
  }
  *(_OWORD *)unint64_t v56 = 0u;
  long long v57 = 0u;
  int v58 = 1065353216;
  uint64_t v52 = 0;
  int v53 = 0;
  sub_6373D8((uint64_t)&v60, (uint64_t)&__dst, (uint64_t)v56, 1, &v52);
  uint64_t v31 = v53;
  if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  uint64_t v32 = (void *)v57;
  if ((void)v57)
  {
    do
    {
      unint64_t v33 = (void *)*v32;
      sub_4F4B48((uint64_t)(v32 + 2));
      operator delete(v32);
      uint64_t v32 = v33;
    }
    while (v33);
  }
  unint64_t v34 = v56[0];
  v56[0] = 0;
  if (v34) {
    operator delete(v34);
  }
  unint64_t v35 = a2[1];
  if (v35 >= a2[2])
  {
    uint64_t v36 = sub_63D140(a2, (uint64_t)&v60);
  }
  else
  {
    sub_63D394((uint64_t)(a2 + 2), a2[1], (uint64_t)&v60);
    uint64_t v36 = v35 + 104;
    a2[1] = v35 + 104;
  }
  a2[1] = v36;
  uint64_t v37 = v64;
  if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  std::string::size_type v38 = v63;
  if (v63)
  {
    do
    {
      char v39 = (void *)*v38;
      sub_4F4B48((uint64_t)(v38 + 2));
      operator delete(v38);
      std::string::size_type v38 = v39;
    }
    while (v39);
  }
  long long v40 = v62;
  uint64_t v62 = 0;
  if (v40) {
    operator delete(v40);
  }
  uint64_t v41 = (void **)v60;
  if (v60)
  {
    std::string::size_type v42 = v61;
    long long v43 = v60;
    if (v61 != v60)
    {
      do
      {
        if (*((char *)v42 - 1) < 0) {
          operator delete(*(v42 - 3));
        }
        v42 -= 3;
      }
      while (v42 != v41);
      long long v43 = v60;
    }
    char v61 = v41;
    operator delete(v43);
  }
  if (SHIBYTE(v67) < 0) {
    operator delete(__dst);
  }
  long long v44 = v72;
  if (v72 && !atomic_fetch_add(&v72->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
  std::string::size_type v45 = v71;
  if (v71)
  {
    do
    {
      std::string::size_type v46 = (void *)*v45;
      sub_4F4B48((uint64_t)(v45 + 2));
      operator delete(v45);
      std::string::size_type v45 = v46;
    }
    while (v46);
  }
  long long v47 = v70;
  __int16 v70 = 0;
  if (v47) {
    operator delete(v47);
  }
  long long v48 = (void **)v68;
  if (v68)
  {
    int v49 = v69;
    unint64_t v50 = v68;
    if (v69 != v68)
    {
      do
      {
        if (*((char *)v49 - 1) < 0) {
          operator delete(*(v49 - 3));
        }
        v49 -= 3;
      }
      while (v49 != v48);
      unint64_t v50 = v68;
    }
    long long v69 = v48;
    operator delete(v50);
  }
  return sub_576848((uint64_t)v73);
}

void sub_89C564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  sub_4F31D0(&a23);
  if (a41 < 0) {
    operator delete(__p);
  }
  sub_4F31D0(&a42);
  sub_576848((uint64_t)&a55);
  sub_5920E0(v55);
  _Unwind_Resume(a1);
}

uint64_t sub_89C648@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_89BF3C(a1, a2);
}

void sub_89C650(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (!sub_6846C0(a2))
  {
    if (byte_25CE2B7 < 0)
    {
      sub_4200(&__dst, (void *)xmmword_25CE2A0, *((unint64_t *)&xmmword_25CE2A0 + 1));
    }
    else
    {
      long long __dst = xmmword_25CE2A0;
      unint64_t v72 = unk_25CE2B0;
    }
    goto LABEL_28;
  }
  int v5 = byte_25CCE5F;
  if (byte_25CCE5F >= 0) {
    size_t v6 = byte_25CCE5F;
  }
  else {
    size_t v6 = qword_25CCE50;
  }
  int v7 = byte_25CD7A7;
  if (byte_25CD7A7 >= 0) {
    size_t v8 = byte_25CD7A7;
  }
  else {
    size_t v8 = qword_25CD798;
  }
  unint64_t v9 = v8 + v6;
  if (v8 + v6 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v9 > 0x16)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v8 + v6;
    unint64_t v72 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    if (!v6) {
      goto LABEL_15;
    }
    goto LABEL_11;
  }
  unint64_t v72 = 0;
  long long __dst = 0uLL;
  p_dst = &__dst;
  HIBYTE(v72) = v8 + v6;
  if (v6)
  {
LABEL_11:
    if (v5 >= 0) {
      uint64_t v11 = &qword_25CCE48;
    }
    else {
      uint64_t v11 = (uint64_t *)qword_25CCE48;
    }
    memmove(p_dst, v11, v6);
  }
LABEL_15:
  uint64_t v12 = (char *)p_dst + v6;
  if (v8)
  {
    if (v7 >= 0) {
      uint64_t v13 = &qword_25CD790;
    }
    else {
      uint64_t v13 = (uint64_t *)qword_25CD790;
    }
    memmove(v12, v13, v8);
  }
  v12[v8] = 0;
LABEL_28:
  if (sub_682F60((uint64_t)(a1 + 2168)) && !a1[2840])
  {
    (*(void (**)(void **__return_ptr, unsigned char *, void, void))(*(void *)a1 + 168))(&v66, a1, 0, 0);
    if (sub_637DD8((long long **)&v66))
    {
      sub_6352AC((uint64_t)&v57, (uint64_t)&__dst);
      uint64_t v16 = (std::__shared_weak_count *)operator new(0x80uLL);
      v16->__shared_owners_ = 0;
      v16->__shared_weak_owners_ = 0;
      v16->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
      sub_63D394((uint64_t)&v73, (uint64_t)&v16[1], (uint64_t)&v66);
      unint64_t v55 = &v16[1].__vftable;
      unint64_t v56 = v16;
      sub_6370D4(v61, &v57, 5, &v55);
      uint64_t v17 = v56;
      if (v56 && !atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      unint64_t v18 = v60;
      if (v60)
      {
        do
        {
          std::string::size_type v19 = (void *)*v18;
          sub_4F4B48((uint64_t)(v18 + 2));
          operator delete(v18);
          unint64_t v18 = v19;
        }
        while (v19);
      }
      uint64_t v20 = __p;
      std::string __p = 0;
      if (v20) {
        operator delete(v20);
      }
      uint64_t v21 = (void **)v57;
      if (v57)
      {
        unint64_t v22 = v58;
        uint64_t v23 = v57;
        if (v58 != v57)
        {
          do
          {
            if (*((char *)v22 - 1) < 0) {
              operator delete(*(v22 - 3));
            }
            v22 -= 3;
          }
          while (v22 != v21);
          uint64_t v23 = v57;
        }
        int v58 = v21;
        operator delete(v23);
      }
      unint64_t v24 = a3[1];
      if (v24 >= a3[2])
      {
        uint64_t v25 = sub_63D140(a3, (uint64_t)v61);
      }
      else
      {
        sub_63D394((uint64_t)(a3 + 2), a3[1], (uint64_t)v61);
        uint64_t v25 = v24 + 104;
        a3[1] = v24 + 104;
      }
      a3[1] = v25;
      uint64_t v26 = v65;
      if (v65 && !atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
      uint64_t v27 = v64;
      if (v64)
      {
        do
        {
          uint64_t v28 = (void *)*v27;
          sub_4F4B48((uint64_t)(v27 + 2));
          operator delete(v27);
          uint64_t v27 = v28;
        }
        while (v28);
      }
      uint64_t v29 = (void *)*((void *)&v62 + 1);
      *((void *)&v62 + 1) = 0;
      if (v29) {
        operator delete(v29);
      }
      uint64_t v30 = (void **)v61[0];
      if (v61[0])
      {
        uint64_t v31 = (void **)v61[1];
        uint64_t v32 = v61[0];
        if (v61[1] != v61[0])
        {
          do
          {
            if (*((char *)v31 - 1) < 0) {
              operator delete(*(v31 - 3));
            }
            v31 -= 3;
          }
          while (v31 != v30);
          uint64_t v32 = v61[0];
        }
        v61[1] = v30;
        operator delete(v32);
      }
    }
    unint64_t v33 = v70;
    if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
    unint64_t v34 = v69;
    if (v69)
    {
      do
      {
        unint64_t v35 = (void *)*v34;
        sub_4F4B48((uint64_t)(v34 + 2));
        operator delete(v34);
        unint64_t v34 = v35;
      }
      while (v35);
    }
    uint64_t v36 = v68;
    int v68 = 0;
    if (v36) {
      operator delete(v36);
    }
    uint64_t v37 = (void **)v66;
    if (v66)
    {
      std::string::size_type v38 = v67;
      char v39 = v66;
      if (v67 != v66)
      {
        do
        {
          if (*((char *)v38 - 1) < 0) {
            operator delete(*(v38 - 3));
          }
          v38 -= 3;
        }
        while (v38 != v37);
        char v39 = v66;
      }
      unint64_t v67 = v37;
      operator delete(v39);
    }
  }
  *(_OWORD *)char v61 = 0u;
  long long v62 = 0u;
  int v63 = 1065353216;
  uint64_t v53 = 0;
  unint64_t v54 = 0;
  sub_6373D8((uint64_t)&v66, (uint64_t)&__dst, (uint64_t)v61, 1, &v53);
  long long v40 = v54;
  if (v54 && !atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  uint64_t v41 = (void *)v62;
  if ((void)v62)
  {
    do
    {
      std::string::size_type v42 = (void *)*v41;
      sub_4F4B48((uint64_t)(v41 + 2));
      operator delete(v41);
      uint64_t v41 = v42;
    }
    while (v42);
  }
  long long v43 = v61[0];
  v61[0] = 0;
  if (v43) {
    operator delete(v43);
  }
  unint64_t v44 = a3[1];
  if (v44 >= a3[2])
  {
    uint64_t v45 = sub_63D140(a3, (uint64_t)&v66);
  }
  else
  {
    sub_63D394((uint64_t)(a3 + 2), a3[1], (uint64_t)&v66);
    uint64_t v45 = v44 + 104;
    a3[1] = v44 + 104;
  }
  a3[1] = v45;
  std::string::size_type v46 = v70;
  if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
  }
  long long v47 = v69;
  if (v69)
  {
    do
    {
      long long v48 = (void *)*v47;
      sub_4F4B48((uint64_t)(v47 + 2));
      operator delete(v47);
      long long v47 = v48;
    }
    while (v48);
  }
  int v49 = v68;
  int v68 = 0;
  if (v49) {
    operator delete(v49);
  }
  unint64_t v50 = (void **)v66;
  if (v66)
  {
    uint64_t v51 = v67;
    uint64_t v52 = v66;
    if (v67 != v66)
    {
      do
      {
        if (*((char *)v51 - 1) < 0) {
          operator delete(*(v51 - 3));
        }
        v51 -= 3;
      }
      while (v51 != v50);
      uint64_t v52 = v66;
    }
    unint64_t v67 = v50;
    operator delete(v52);
  }
  if (SHIBYTE(v72) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_89CCD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36)
{
  sub_4F31D0(&a23);
  sub_4F31D0(&a36);
  if (*(char *)(v37 - 89) < 0)
  {
    operator delete(*(void **)(v37 - 112));
    sub_5920E0(v36);
    _Unwind_Resume(a1);
  }
  sub_5920E0(v36);
  _Unwind_Resume(a1);
}

void sub_89CD9C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
}

void sub_89CDA4(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  sub_676A14(a1 + 2168, (uint64_t)&v95);
  std::string::size_type size = HIBYTE(v95.__r_.__value_.__r.__words[2]);
  if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v95.__r_.__value_.__l.__size_;
  }
  if (!size || sub_6829A4(a1 + 2168))
  {
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(void *)(a4 + 88) = 0;
    *(void *)(a4 + 96) = 0;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_DWORD *)(a4 + 56) = 1065353216;
    *(unsigned char *)(a4 + 64) = 1;
    *(void *)(a4 + 80) = 0;
    *(_WORD *)(a4 + 96) = 0;
    goto LABEL_126;
  }
  int v68 = a3;
  int v9 = a2 | a3;
  int v10 = SHIBYTE(v95.__r_.__value_.__r.__words[2]);
  if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v11 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v11 = v95.__r_.__value_.__l.__size_;
  }
  BOOL v12 = v9 == 0;
  if (v9) {
    uint64_t v13 = 528;
  }
  else {
    uint64_t v13 = 600;
  }
  if (v9) {
    uint64_t v14 = &qword_25CD790;
  }
  else {
    uint64_t v14 = &qword_25CD7D8;
  }
  uint64_t v15 = &byte_25CD7A7;
  if (v12) {
    uint64_t v15 = &byte_25CD7EF;
  }
  size_t v16 = *v15;
  int v17 = (char)v16;
  unint64_t v18 = &qword_25CD798;
  if (v12) {
    unint64_t v18 = &qword_25CD7E0;
  }
  size_t v19 = *v18;
  if ((v16 & 0x80u) == 0) {
    size_t v20 = v16;
  }
  else {
    size_t v20 = v19;
  }
  unint64_t v21 = v20 + v11;
  if (v20 + v11 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  unint64_t v67 = v14;
  if (v21 > 0x16)
  {
    uint64_t v66 = v13;
    uint64_t v40 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v40 = v21 | 7;
    }
    uint64_t v41 = v40 + 1;
    p_dst = (std::string *)operator new(v40 + 1);
    __dst.__r_.__value_.__l.__size_ = v20 + v11;
    __dst.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    uint64_t v13 = v66;
    if (!v11) {
      goto LABEL_31;
    }
    goto LABEL_27;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = &__dst;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v20 + v11;
  if (v11)
  {
LABEL_27:
    if (v10 >= 0) {
      uint64_t v23 = &v95;
    }
    else {
      uint64_t v23 = (std::string *)v95.__r_.__value_.__r.__words[0];
    }
    memmove(p_dst, v23, v11);
  }
LABEL_31:
  unint64_t v24 = (char *)p_dst + v11;
  if (v20)
  {
    if (v17 >= 0) {
      uint64_t v25 = v67;
    }
    else {
      uint64_t v25 = *(uint64_t **)((char *)dword_25CD580 + v13);
    }
    memmove(v24, v25, v20);
  }
  v24[v20] = 0;
  if (v10 < 0) {
    operator delete(v95.__r_.__value_.__l.__data_);
  }
  std::string v95 = __dst;
  long long v92 = 0;
  uint64_t v93 = 0;
  unint64_t v94 = 0;
  uint64_t v26 = *(void *)(a1 + 80);
  uint64_t v27 = *(void *)(a1 + 88);
  std::string v86 = 0;
  std::string v87 = 0;
  uint64_t v88 = 0;
  sub_8A6F8((char *)&v86, v26, v27, 0xAAAAAAAAAAAAAAABLL * ((v27 - v26) >> 3));
  sub_5954B0((uint64_t)v89, a1 + 104);
  char v91 = *(unsigned char *)(a1 + 144);
  uint64_t v28 = (long long **)nullsub_1(a1 + 80);
  uint64_t v29 = *v28;
  uint64_t v30 = v28[1];
  while (v29 != v30)
  {
    if (*((char *)v29 + 23) < 0)
    {
      sub_4200(&__dst, *(void **)v29, *((void *)v29 + 1));
    }
    else
    {
      long long v31 = *v29;
      __dst.__r_.__value_.__r.__words[2] = *((void *)v29 + 2);
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v31;
    }
    sub_625E4(&__dst, (char *)&qword_25CD790, (uint64_t)&dword_25CD808);
    sub_89D5B4(a1, &__dst);
    uint64_t v32 = v93;
    if ((unint64_t)v93 >= v94)
    {
      uint64_t v93 = sub_1D740(&v92, (uint64_t)&__dst);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_39;
      }
      goto LABEL_49;
    }
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      long long v33 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
      *((void *)v93 + 2) = *((void *)&__dst.__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v32 = v33;
      uint64_t v93 = v32 + 24;
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_39;
      }
LABEL_49:
      operator delete(__dst.__r_.__value_.__l.__data_);
      goto LABEL_39;
    }
    sub_4200(v93, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    uint64_t v93 = v32 + 24;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_49;
    }
LABEL_39:
    uint64_t v29 = (long long *)((char *)v29 + 24);
  }
  sub_6353B4((uint64_t)&v86, (std::string **)&v92);
  *(_OWORD *)uint64_t v75 = 0u;
  long long v76 = 0u;
  int v77 = 1065353216;
  __int16 v70 = 0;
  uint64_t v71 = 0;
  long long v69 = 0;
  sub_8A6F8((char *)&v69, (uint64_t)v86, (uint64_t)v87, 0xAAAAAAAAAAAAAAABLL * ((v87 - v86) >> 3));
  sub_5954B0((uint64_t)&__p, (uint64_t)v89);
  char v74 = v91;
  sub_637820((uint64_t)&__dst, (uint64_t)&v95, (uint64_t)v75, 6, (uint64_t)&v69, 1);
  unint64_t v34 = v73;
  if (v73)
  {
    do
    {
      unint64_t v35 = (void *)*v34;
      sub_4F4B48((uint64_t)(v34 + 2));
      operator delete(v34);
      unint64_t v34 = v35;
    }
    while (v35);
  }
  uint64_t v36 = __p;
  std::string __p = 0;
  if (v36) {
    operator delete(v36);
  }
  uint64_t v37 = (void **)v69;
  if (v69)
  {
    std::string::size_type v38 = v70;
    char v39 = v69;
    if (v70 != v69)
    {
      do
      {
        if (*((char *)v38 - 1) < 0) {
          operator delete(*(v38 - 3));
        }
        v38 -= 3;
      }
      while (v38 != v37);
      char v39 = v69;
    }
    __int16 v70 = v37;
    operator delete(v39);
  }
  std::string::size_type v42 = (void *)v76;
  if ((void)v76)
  {
    do
    {
      long long v43 = (void *)*v42;
      sub_4F4B48((uint64_t)(v42 + 2));
      operator delete(v42);
      std::string::size_type v42 = v43;
    }
    while (v43);
  }
  unint64_t v44 = v75[0];
  v75[0] = 0;
  if (v44) {
    operator delete(v44);
  }
  if (v68 && *(unsigned char *)(a1 + 2872))
  {
    uint64_t v45 = 234;
    if (!*(unsigned char *)(a1 + 2873)) {
      uint64_t v45 = 240;
    }
    std::string::size_type v46 = &qword_25CD940;
    if (*(unsigned char *)(a1 + 2873)) {
      std::string::size_type v46 = (uint64_t *)&xmmword_25CD928;
    }
    long long v47 = &byte_25CD93F;
    if (!*(unsigned char *)(a1 + 2873)) {
      long long v47 = (char *)&unk_25CD957;
    }
    if (*v47 < 0)
    {
      if (*(unsigned char *)(a1 + 2873)) {
        int v49 = (unint64_t *)&xmmword_25CD928 + 1;
      }
      else {
        int v49 = (unint64_t *)&unk_25CD948;
      }
      sub_4200(v75, *(void **)&dword_25CD580[v45], *v49);
    }
    else
    {
      *(_OWORD *)uint64_t v75 = *(_OWORD *)v46;
      *(void *)&long long v76 = v46[2];
    }
    sub_8953A4((uint64_t)&__dst, (uint64_t)v75, a4);
    if (SBYTE7(v76) < 0) {
      operator delete(v75[0]);
    }
  }
  else
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    sub_8A6F8((char *)a4, (uint64_t)__dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__dst.__r_.__value_.__l.__size_ - __dst.__r_.__value_.__r.__words[0]) >> 3));
    sub_5954B0(a4 + 24, (uint64_t)&v79);
    *(unsigned char *)(a4 + 64) = v81;
    *(_DWORD *)(a4 + 72) = v82;
    long long v48 = v84;
    *(void *)(a4 + 80) = v83;
    *(void *)(a4 + 88) = v48;
    if (v48) {
      atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(_WORD *)(a4 + 96) = v85;
  }
  unint64_t v50 = v84;
  if (v84 && !atomic_fetch_add(&v84->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
  }
  uint64_t v51 = v80;
  if (v80)
  {
    do
    {
      uint64_t v52 = (void *)*v51;
      sub_4F4B48((uint64_t)(v51 + 2));
      operator delete(v51);
      uint64_t v51 = v52;
    }
    while (v52);
  }
  uint64_t v53 = v79;
  size_t v79 = 0;
  if (v53) {
    operator delete(v53);
  }
  std::string::size_type v54 = __dst.__r_.__value_.__r.__words[0];
  if (__dst.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v55 = __dst.__r_.__value_.__l.__size_;
    unint64_t v56 = (void *)__dst.__r_.__value_.__r.__words[0];
    if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v55 - 1) < 0) {
          operator delete(*(void **)(v55 - 24));
        }
        v55 -= 24;
      }
      while (v55 != v54);
      unint64_t v56 = (void *)__dst.__r_.__value_.__r.__words[0];
    }
    __dst.__r_.__value_.__l.__size_ = v54;
    operator delete(v56);
  }
  long long v57 = v90;
  if (v90)
  {
    do
    {
      int v58 = (void *)*v57;
      sub_4F4B48((uint64_t)(v57 + 2));
      operator delete(v57);
      long long v57 = v58;
    }
    while (v58);
  }
  std::string::size_type v59 = (void *)v89[0];
  v89[0] = 0;
  if (v59) {
    operator delete(v59);
  }
  uint64_t v60 = (uint64_t)v86;
  if (v86)
  {
    uint64_t v61 = (uint64_t)v87;
    long long v62 = v86;
    if (v87 != v86)
    {
      do
      {
        if (*(char *)(v61 - 1) < 0) {
          operator delete(*(void **)(v61 - 24));
        }
        v61 -= 24;
      }
      while (v61 != v60);
      long long v62 = v86;
    }
    std::string v87 = (unsigned char *)v60;
    operator delete(v62);
  }
  int v63 = v92;
  if (v92)
  {
    char v64 = v93;
    uint64_t v65 = v92;
    if (v93 != v92)
    {
      do
      {
        if (*(v64 - 1) < 0) {
          operator delete(*((void **)v64 - 3));
        }
        v64 -= 24;
      }
      while (v64 != v63);
      uint64_t v65 = v92;
    }
    uint64_t v93 = v63;
    operator delete(v65);
  }
LABEL_126:
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v95.__r_.__value_.__l.__data_);
  }
}

void sub_89D4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  sub_4F31D0(&a30);
  sub_4D4880((void **)(v35 - 208));
  sub_1A668((void **)(v35 - 136));
  if (*(char *)(v35 - 89) < 0) {
    operator delete(*(void **)(v35 - 112));
  }
  _Unwind_Resume(a1);
}

void sub_89D5B4(uint64_t a1, std::string *a2)
{
  int v4 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  int v5 = (std::string *)a2->__r_.__value_.__r.__words[0];
  std::string::size_type size = a2->__r_.__value_.__l.__size_;
  if (v4 >= 0) {
    int v7 = a2;
  }
  else {
    int v7 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  unint64_t v8 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v4 >= 0) {
    size_t v9 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v9 = a2->__r_.__value_.__l.__size_;
  }
  if (byte_25CC7B7 >= 0) {
    size_t v10 = byte_25CC7B7;
  }
  else {
    size_t v10 = qword_25CC7A8;
  }
  if (v10 <= v9)
  {
    if (byte_25CC7B7 >= 0) {
      BOOL v12 = &qword_25CC7A0;
    }
    else {
      BOOL v12 = (uint64_t *)qword_25CC7A0;
    }
    BOOL v11 = memcmp(v12, v7, v10) == 0;
  }
  else
  {
    BOOL v11 = 0;
  }
  if (byte_25CC79F >= 0) {
    size_t v13 = byte_25CC79F;
  }
  else {
    size_t v13 = qword_25CC790;
  }
  if (v13 <= v9)
  {
    if (byte_25CC79F >= 0) {
      uint64_t v15 = &qword_25CC788;
    }
    else {
      uint64_t v15 = (uint64_t *)qword_25CC788;
    }
    BOOL v14 = memcmp(v15, v7, v13) == 0;
    if (!v14 && !v11) {
      return;
    }
  }
  else
  {
    BOOL v14 = 0;
    if (!v11) {
      return;
    }
  }
  BOOL v94 = v14;
  BOOL v96 = v11;
  uint64_t v95 = a1;
  HIBYTE(v102) = 0;
  LOBYTE(__p[0]) = 0;
  if (byte_25CD72F >= 0) {
    size_t v16 = &qword_25CD718;
  }
  else {
    size_t v16 = (uint64_t *)qword_25CD718;
  }
  if (byte_25CD72F >= 0) {
    int64_t v17 = byte_25CD72F;
  }
  else {
    int64_t v17 = qword_25CD720;
  }
  if (!v17)
  {
    unint64_t v23 = 0;
    goto LABEL_41;
  }
  if ((uint64_t)v9 >= v17)
  {
    unint64_t v18 = (char *)v7 + v9;
    int v19 = *(char *)v16;
    size_t v20 = v7;
    while (1)
    {
      if (v9 - v17 == -1) {
        goto LABEL_48;
      }
      unint64_t v21 = (char *)memchr(v20, v19, v9 - v17 + 1);
      if (!v21) {
        goto LABEL_48;
      }
      unint64_t v22 = v21;
      if (!memcmp(v21, v16, v17)) {
        break;
      }
      size_t v20 = (std::string *)(v22 + 1);
      size_t v9 = v18 - (v22 + 1);
      if ((uint64_t)v9 < v17) {
        goto LABEL_48;
      }
    }
    if (v22 != v18)
    {
      unint64_t v23 = v22 - (char *)v7;
      if (v22 - (char *)v7 != -1)
      {
LABEL_41:
        if ((v8 & 0x80) != 0)
        {
          if (size >= v23)
          {
            unint64_t v8 = size;
            size_t v24 = size - v23;
            if (size - v23 <= 0x7FFFFFFFFFFFFFF7)
            {
LABEL_44:
              if (v24 >= 0x17)
              {
                uint64_t v48 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v24 | 7) != 0x17) {
                  uint64_t v48 = v24 | 7;
                }
                uint64_t v49 = v48 + 1;
                p_dst = (long long *)operator new(v48 + 1);
                *((void *)&__dst + 1) = v24;
                int64_t v100 = v49 | 0x8000000000000000;
                *(void *)&long long __dst = p_dst;
              }
              else
              {
                HIBYTE(v100) = v24;
                p_dst = &__dst;
                if (v8 == v23)
                {
                  *((unsigned char *)&__dst + v24) = 0;
                  if ((SHIBYTE(v102) & 0x80000000) == 0)
                  {
LABEL_47:
                    *(_OWORD *)std::string __p = __dst;
                    int64_t v102 = v100;
                    goto LABEL_48;
                  }
LABEL_105:
                  operator delete(__p[0]);
                  goto LABEL_47;
                }
              }
              memmove(p_dst, (char *)v5 + v23, v24);
              *((unsigned char *)p_dst + v24) = 0;
              if ((SHIBYTE(v102) & 0x80000000) == 0) {
                goto LABEL_47;
              }
              goto LABEL_105;
            }
LABEL_130:
            sub_188D690();
          }
        }
        else
        {
          int v5 = a2;
          if (v23 <= v8)
          {
            size_t v24 = v8 - v23;
            if (v8 - v23 <= 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_44;
            }
            goto LABEL_130;
          }
        }
        sub_5AD0();
      }
    }
  }
LABEL_48:
  BOOL v26 = v96;
  if (!v96)
  {
    int v27 = byte_25CC79F;
    if (byte_25CC79F >= 0) {
      size_t v28 = byte_25CC79F;
    }
    else {
      size_t v28 = qword_25CC790;
    }
    int v29 = SHIBYTE(v102);
    if (v102 >= 0) {
      size_t v30 = HIBYTE(v102);
    }
    else {
      size_t v30 = (size_t)__p[1];
    }
    unint64_t v34 = v30 + v28;
    if (v30 + v28 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v34 > 0x16)
    {
      uint64_t v38 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v34 | 7) != 0x17) {
        uint64_t v38 = v34 | 7;
      }
      uint64_t v39 = v38 + 1;
      uint64_t v32 = (long long *)operator new(v38 + 1);
      *((void *)&__dst + 1) = v30 + v28;
      int64_t v100 = v39 | 0x8000000000000000;
      *(void *)&long long __dst = v32;
      BOOL v26 = 0;
      uint64_t v33 = v95;
      if (!v28) {
        goto LABEL_81;
      }
    }
    else
    {
      int64_t v100 = 0;
      long long __dst = 0uLL;
      uint64_t v32 = &__dst;
      HIBYTE(v100) = v30 + v28;
      uint64_t v33 = v95;
      if (!v28) {
        goto LABEL_81;
      }
    }
    uint64_t v37 = &qword_25CC788;
    goto LABEL_77;
  }
  int v27 = byte_25CC7B7;
  if (byte_25CC7B7 >= 0) {
    size_t v28 = byte_25CC7B7;
  }
  else {
    size_t v28 = qword_25CC7A8;
  }
  int v29 = SHIBYTE(v102);
  if (v102 >= 0) {
    size_t v30 = HIBYTE(v102);
  }
  else {
    size_t v30 = (size_t)__p[1];
  }
  unint64_t v31 = v30 + v28;
  if (v30 + v28 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v31 <= 0x16)
  {
    int64_t v100 = 0;
    long long __dst = 0uLL;
    uint64_t v32 = &__dst;
    HIBYTE(v100) = v30 + v28;
    uint64_t v33 = v95;
    if (!v28) {
      goto LABEL_81;
    }
    goto LABEL_72;
  }
  uint64_t v35 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v31 | 7) != 0x17) {
    uint64_t v35 = v31 | 7;
  }
  uint64_t v36 = v35 + 1;
  uint64_t v32 = (long long *)operator new(v35 + 1);
  *((void *)&__dst + 1) = v30 + v28;
  int64_t v100 = v36 | 0x8000000000000000;
  *(void *)&long long __dst = v32;
  BOOL v26 = v96;
  uint64_t v33 = v95;
  if (v28)
  {
LABEL_72:
    uint64_t v37 = &qword_25CC7A0;
LABEL_77:
    if (v27 >= 0) {
      uint64_t v40 = v37;
    }
    else {
      uint64_t v40 = (const void *)*v37;
    }
    memmove(v32, v40, v28);
  }
LABEL_81:
  uint64_t v41 = (char *)v32 + v28;
  if (v30)
  {
    if (v29 >= 0) {
      std::string::size_type v42 = __p;
    }
    else {
      std::string::size_type v42 = (void **)__p[0];
    }
    memmove(v41, v42, v30);
  }
  v41[v30] = 0;
  uint64_t v43 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((v43 & 0x80u) == 0) {
    std::string::size_type v44 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v44 = a2->__r_.__value_.__l.__size_;
  }
  uint64_t v45 = HIBYTE(v100);
  if (v100 < 0) {
    uint64_t v45 = *((void *)&__dst + 1);
  }
  if (v44 != v45) {
    goto LABEL_107;
  }
  if (v100 >= 0) {
    std::string::size_type v46 = (unsigned __int8 *)&__dst;
  }
  else {
    std::string::size_type v46 = (unsigned __int8 *)__dst;
  }
  if ((v43 & 0x80) != 0)
  {
    if (!memcmp(a2->__r_.__value_.__l.__data_, v46, a2->__r_.__value_.__l.__size_)) {
      goto LABEL_206;
    }
LABEL_107:
    if (v94 && sub_6823C0(v33 + 2168))
    {
      char v98 = 0;
      __s[0] = 0;
      int64_t v50 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      if ((v50 & 0x80u) == 0) {
        uint64_t v51 = a2;
      }
      else {
        uint64_t v51 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      if (byte_25CD2AF >= 0) {
        uint64_t v52 = &qword_25CD298;
      }
      else {
        uint64_t v52 = (uint64_t *)qword_25CD298;
      }
      if (byte_25CD2AF >= 0) {
        int64_t v53 = byte_25CD2AF;
      }
      else {
        int64_t v53 = unk_25CD2A0;
      }
      if (v53)
      {
        if ((v50 & 0x80u) != 0) {
          int64_t v50 = a2->__r_.__value_.__l.__size_;
        }
        if (v50 >= v53)
        {
          std::string::size_type v54 = (char *)v51 + v50;
          int v55 = *(char *)v52;
          unint64_t v56 = v51;
          do
          {
            uint64_t v57 = v50 - v53;
            if (v57 == -1) {
              break;
            }
            int v58 = (char *)memchr(v56, v55, v57 + 1);
            if (!v58) {
              break;
            }
            std::string::size_type v59 = v58;
            if (!memcmp(v58, v52, v53))
            {
              if (v59 != v54)
              {
                std::string::size_type v60 = v59 - (char *)v51;
                if (v59 - (char *)v51 != -1) {
                  goto LABEL_135;
                }
              }
              break;
            }
            unint64_t v56 = (std::string *)(v59 + 1);
            int64_t v50 = v54 - (v59 + 1);
          }
          while (v50 >= v53);
        }
      }
      else
      {
        std::string::size_type v60 = 0;
LABEL_135:
        std::string::replace(a2, v60, v53, __s, 0);
        if (v98 < 0) {
          operator delete(*(void **)__s);
        }
      }
      char v98 = 0;
      __s[0] = 0;
      int64_t v61 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      if ((v61 & 0x80u) == 0) {
        long long v62 = a2;
      }
      else {
        long long v62 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      if (byte_25CD51F >= 0) {
        int v63 = &qword_25CD508;
      }
      else {
        int v63 = (uint64_t *)qword_25CD508;
      }
      if (byte_25CD51F >= 0) {
        int64_t v64 = byte_25CD51F;
      }
      else {
        int64_t v64 = unk_25CD510;
      }
      if (v64)
      {
        if ((v61 & 0x80u) != 0) {
          int64_t v61 = a2->__r_.__value_.__l.__size_;
        }
        if (v61 >= v64)
        {
          uint64_t v65 = (char *)v62 + v61;
          int v66 = *(char *)v63;
          unint64_t v67 = v62;
          do
          {
            uint64_t v68 = v61 - v64;
            if (v68 == -1) {
              break;
            }
            long long v69 = (char *)memchr(v67, v66, v68 + 1);
            if (!v69) {
              break;
            }
            __int16 v70 = v69;
            if (!memcmp(v69, v63, v64))
            {
              if (v70 != v65)
              {
                std::string::size_type v71 = v70 - (char *)v62;
                if (v70 - (char *)v62 != -1) {
                  goto LABEL_157;
                }
              }
              break;
            }
            unint64_t v67 = (std::string *)(v70 + 1);
            int64_t v61 = v65 - (v70 + 1);
          }
          while (v61 >= v64);
        }
      }
      else
      {
        std::string::size_type v71 = 0;
LABEL_157:
        std::string::replace(a2, v71, v64, __s, 0);
        if (v98 < 0) {
          operator delete(*(void **)__s);
        }
      }
      uint64_t v33 = v95;
      BOOL v26 = v96;
    }
    if (v26 && sub_6823D0(v33 + 2168))
    {
      char v98 = 0;
      __s[0] = 0;
      int64_t v72 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      if ((v72 & 0x80u) == 0) {
        char v73 = a2;
      }
      else {
        char v73 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      if (byte_25CD297 >= 0) {
        char v74 = &qword_25CD280;
      }
      else {
        char v74 = (uint64_t *)qword_25CD280;
      }
      if (byte_25CD297 >= 0) {
        int64_t v75 = byte_25CD297;
      }
      else {
        int64_t v75 = unk_25CD288;
      }
      if (v75)
      {
        if ((v72 & 0x80u) != 0) {
          int64_t v72 = a2->__r_.__value_.__l.__size_;
        }
        if (v72 >= v75)
        {
          long long v76 = (char *)v73 + v72;
          int v77 = *(char *)v74;
          char v78 = v73;
          do
          {
            uint64_t v79 = v72 - v75;
            if (v79 == -1) {
              break;
            }
            unint64_t v80 = (char *)memchr(v78, v77, v79 + 1);
            if (!v80) {
              break;
            }
            char v81 = v80;
            if (!memcmp(v80, v74, v75))
            {
              if (v81 != v76)
              {
                std::string::size_type v82 = v81 - (char *)v73;
                if (v81 - (char *)v73 != -1) {
                  goto LABEL_182;
                }
              }
              break;
            }
            char v78 = (std::string *)(v81 + 1);
            int64_t v72 = v76 - (v81 + 1);
          }
          while (v72 >= v75);
        }
      }
      else
      {
        std::string::size_type v82 = 0;
LABEL_182:
        std::string::replace(a2, v82, v75, __s, 0);
        if (v98 < 0) {
          operator delete(*(void **)__s);
        }
      }
      char v98 = 0;
      __s[0] = 0;
      int64_t v83 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      if ((v83 & 0x80u) == 0) {
        char v84 = a2;
      }
      else {
        char v84 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      if (byte_25CD51F >= 0) {
        __int16 v85 = &qword_25CD508;
      }
      else {
        __int16 v85 = (uint64_t *)qword_25CD508;
      }
      if (byte_25CD51F >= 0) {
        int64_t v86 = byte_25CD51F;
      }
      else {
        int64_t v86 = unk_25CD510;
      }
      if (v86)
      {
        if ((v83 & 0x80u) != 0) {
          int64_t v83 = a2->__r_.__value_.__l.__size_;
        }
        if (v83 >= v86)
        {
          std::string v87 = (char *)v84 + v83;
          int v88 = *(char *)v85;
          unint64_t v89 = v84;
          while (1)
          {
            uint64_t v90 = v83 - v86;
            if (v90 == -1) {
              break;
            }
            char v91 = (char *)memchr(v89, v88, v90 + 1);
            if (!v91) {
              break;
            }
            long long v92 = v91;
            if (!memcmp(v91, v85, v86))
            {
              if (v92 != v87)
              {
                std::string::size_type v93 = v92 - (char *)v84;
                if (v92 - (char *)v84 != -1) {
                  goto LABEL_204;
                }
              }
              goto LABEL_206;
            }
            unint64_t v89 = (std::string *)(v92 + 1);
            int64_t v83 = v87 - (v92 + 1);
            if (v83 < v86) {
              goto LABEL_206;
            }
          }
        }
      }
      else
      {
        std::string::size_type v93 = 0;
LABEL_204:
        std::string::replace(a2, v93, v86, __s, 0);
        if (v98 < 0) {
          operator delete(*(void **)__s);
        }
      }
    }
    goto LABEL_206;
  }
  if (*((unsigned char *)&a2->__r_.__value_.__s + 23))
  {
    long long v47 = a2;
    while (v47->__r_.__value_.__s.__data_[0] == *v46)
    {
      long long v47 = (std::string *)((char *)v47 + 1);
      ++v46;
      if (!--v43) {
        goto LABEL_206;
      }
    }
    goto LABEL_107;
  }
LABEL_206:
  if ((SHIBYTE(v100) & 0x80000000) == 0)
  {
    if ((v29 & 0x80000000) == 0) {
      return;
    }
LABEL_210:
    operator delete(__p[0]);
    return;
  }
  operator delete((void *)__dst);
  if (v29 < 0) {
    goto LABEL_210;
  }
}

void sub_89DE74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v25 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((v25 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a25);
  _Unwind_Resume(exception_object);
}

void sub_89DEE8(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
}

void sub_89DEF0(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  long long v93 = 0uLL;
  unint64_t v94 = 0;
  uint64_t v10 = *(void *)(a1 + 1952);
  uint64_t v11 = *(void *)(a1 + 1960);
  int v12 = *(_DWORD *)(a1 + 2128);
  size_t v13 = (std::__shared_weak_count *)operator new(0xB98uLL);
  int v14 = v12 - 1;
  v13->__shared_owners_ = 0;
  v13->__shared_weak_owners_ = 0;
  v13->__vftable = (std::__shared_weak_count_vtbl *)off_243ADD8;
  std::string::size_type v15 = (std::string::size_type)&v13[1];
  sub_88F378((std::string::size_type)&v13[1], v10, v11, a2, a3, v14);
  char v91 = &v13[1].__vftable;
  long long v92 = v13;
  (*(void (**)(long long **__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 168))(&v86, a1, 1, a4);
  if (!sub_637DD8(&v86))
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    goto LABEL_75;
  }
  sub_89616C(v15, 0, 0, 0, (uint64_t)&v81);
  if (BYTE4(v13[78].__vftable))
  {
    uint64_t v16 = nullsub_1(&v81);
    v68[0] = 0;
    v68[1] = 0;
    __p[0] = 0;
    sub_8A6F8((char *)v68, *(void *)v16, *(void *)(v16 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v16 + 8) - *(void *)v16) >> 3));
    sub_5954B0((uint64_t)&__p[1], v16 + 24);
    char v74 = *(unsigned char *)(v16 + 64);
    sub_7FE910(v15, (long long **)v68);
    sub_63797C((uint64_t)&v81, (uint64_t)v68);
    int64_t v17 = v71;
    if (v71)
    {
      do
      {
        unint64_t v18 = (void *)*v17;
        sub_4F4B48((uint64_t)(v17 + 2));
        operator delete(v17);
        int64_t v17 = v18;
      }
      while (v18);
    }
    int v19 = __p[1];
    __p[1] = 0;
    if (v19) {
      operator delete(v19);
    }
    size_t v20 = (void **)v68[0];
    if (v68[0])
    {
      unint64_t v21 = (void **)v68[1];
      unint64_t v22 = v68[0];
      if (v68[1] != v68[0])
      {
        do
        {
          if (*((char *)v21 - 1) < 0) {
            operator delete(*(v21 - 3));
          }
          v21 -= 3;
        }
        while (v21 != v20);
        unint64_t v22 = v68[0];
      }
      v68[1] = v20;
      operator delete(v22);
    }
  }
  sub_637D8C((uint64_t)&v86, &v80);
  while (1)
  {
    sub_637D8C(v80, v68);
    size_t v24 = v68[0];
    unint64_t v23 = (std::__shared_weak_count *)v68[1];
    if (v68[1] && !atomic_fetch_add((atomic_ullong *volatile)v68[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    if (!v24) {
      break;
    }
    sub_637D8C(v80, v68);
    long long v25 = *(_OWORD *)v68;
    v68[0] = 0;
    v68[1] = 0;
    BOOL v26 = (std::__shared_weak_count *)*((void *)&v80 + 1);
    long long v80 = v25;
    if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
      int v27 = (std::__shared_weak_count *)v68[1];
      if (v68[1]) {
        goto LABEL_24;
      }
    }
    else
    {
      int v27 = (std::__shared_weak_count *)v68[1];
      if (v68[1])
      {
LABEL_24:
        if (!atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
    }
  }
  uint64_t v28 = v80;
  int v29 = sub_897368((uint64_t)v91);
  sub_63733C(v28, v29);
  uint64_t v30 = v80;
  unint64_t v31 = (std::__shared_weak_count *)operator new(0x80uLL);
  v31->__shared_owners_ = 0;
  v31->__shared_weak_owners_ = 0;
  v31->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
  sub_59540C((uint64_t)v68, (uint64_t)&v31[1], (uint64_t)&v81);
  char v78 = &v31[1].__vftable;
  uint64_t v79 = v31;
  sub_637344(v30, (uint64_t *)&v78);
  uint64_t v32 = v79;
  if (v79 && !atomic_fetch_add(&v79->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
    uint64_t v33 = *((void *)&v93 + 1);
    if (*((void *)&v93 + 1) >= v94) {
      goto LABEL_33;
    }
LABEL_31:
    sub_63D394((uint64_t)&v94, v33, (uint64_t)&v86);
    uint64_t v34 = v33 + 104;
  }
  else
  {
    uint64_t v33 = *((void *)&v93 + 1);
    if (*((void *)&v93 + 1) < v94) {
      goto LABEL_31;
    }
LABEL_33:
    uint64_t v34 = sub_63D140((uint64_t *)&v93, (uint64_t)&v86);
  }
  *((void *)&v93 + 1) = v34;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 168))(v68, a1, 1, a4);
  uint64_t v35 = *((void *)&v93 + 1);
  if (*((void *)&v93 + 1) >= v94)
  {
    uint64_t v41 = sub_63D48C((void ***)&v93, (uint64_t)v68);
    std::string::size_type v42 = (std::__shared_weak_count *)*((void *)&v76 + 1);
    *((void *)&v93 + 1) = v41;
    if (*((void *)&v76 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v76 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  else
  {
    *(void *)(*((void *)&v93 + 1) + 16) = 0;
    *(_OWORD *)uint64_t v35 = 0u;
    *(_OWORD *)uint64_t v35 = *(_OWORD *)v68;
    *(void **)(v35 + 16) = __p[0];
    uint64_t v36 = __p[1];
    *(_OWORD *)uint64_t v68 = 0u;
    *(_OWORD *)std::string __p = 0u;
    *(void *)(v35 + 24) = v36;
    *(void *)(v35 + 32) = v70;
    uint64_t v70 = 0;
    uint64_t v37 = v71;
    *(void *)(v35 + 40) = v71;
    uint64_t v38 = v72;
    *(void *)(v35 + 48) = v72;
    *(_DWORD *)(v35 + 56) = v73;
    if (v38)
    {
      unint64_t v39 = v37[1];
      unint64_t v40 = *(void *)(v35 + 32);
      if ((v40 & (v40 - 1)) != 0)
      {
        if (v39 >= v40) {
          v39 %= v40;
        }
      }
      else
      {
        v39 &= v40 - 1;
      }
      v36[v39] = v35 + 40;
      std::string::size_type v71 = 0;
      uint64_t v72 = 0;
    }
    *(unsigned char *)(v35 + 64) = v74;
    *(_DWORD *)(v35 + 72) = v75;
    *(_OWORD *)(v35 + 80) = v76;
    long long v76 = 0uLL;
    *(_WORD *)(v35 + 96) = v77;
    *((void *)&v93 + 1) = v35 + 104;
  }
  uint64_t v43 = v71;
  if (v71)
  {
    do
    {
      std::string::size_type v44 = (void *)*v43;
      sub_4F4B48((uint64_t)(v43 + 2));
      operator delete(v43);
      uint64_t v43 = v44;
    }
    while (v44);
  }
  uint64_t v45 = __p[1];
  __p[1] = 0;
  if (v45) {
    operator delete(v45);
  }
  std::string::size_type v46 = (void **)v68[0];
  if (v68[0])
  {
    long long v47 = (void **)v68[1];
    uint64_t v48 = v68[0];
    if (v68[1] != v68[0])
    {
      do
      {
        if (*((char *)v47 - 1) < 0) {
          operator delete(*(v47 - 3));
        }
        v47 -= 3;
      }
      while (v47 != v46);
      uint64_t v48 = v68[0];
    }
    v68[1] = v46;
    operator delete(v48);
  }
  *(_OWORD *)a5 = v93;
  a5[2] = v94;
  long long v93 = 0uLL;
  unint64_t v94 = 0;
  uint64_t v49 = (std::__shared_weak_count *)*((void *)&v80 + 1);
  if (*((void *)&v80 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v80 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
    std::__shared_weak_count::__release_weak(v49);
  }
  int64_t v50 = v85;
  if (v85 && !atomic_fetch_add(&v85->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
  }
  uint64_t v51 = v84;
  if (v84)
  {
    do
    {
      uint64_t v52 = (void *)*v51;
      sub_4F4B48((uint64_t)(v51 + 2));
      operator delete(v51);
      uint64_t v51 = v52;
    }
    while (v52);
  }
  int64_t v53 = v83;
  int64_t v83 = 0;
  if (v53) {
    operator delete(v53);
  }
  std::string::size_type v54 = (void **)v81;
  if (v81)
  {
    int v55 = v82;
    unint64_t v56 = v81;
    if (v82 != v81)
    {
      do
      {
        if (*((char *)v55 - 1) < 0) {
          operator delete(*(v55 - 3));
        }
        v55 -= 3;
      }
      while (v55 != v54);
      unint64_t v56 = v81;
    }
    std::string::size_type v82 = v54;
    operator delete(v56);
  }
LABEL_75:
  uint64_t v57 = v90;
  if (v90 && !atomic_fetch_add(&v90->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
    std::__shared_weak_count::__release_weak(v57);
  }
  int v58 = v89;
  if (v89)
  {
    do
    {
      std::string::size_type v59 = (void *)*v58;
      sub_4F4B48((uint64_t)(v58 + 2));
      operator delete(v58);
      int v58 = v59;
    }
    while (v59);
  }
  std::string::size_type v60 = v88;
  int v88 = 0;
  if (v60) {
    operator delete(v60);
  }
  int64_t v61 = v86;
  if (v86)
  {
    long long v62 = v87;
    int v63 = v86;
    if (v87 != v86)
    {
      do
      {
        if (*((char *)v62 - 1) < 0) {
          operator delete(*((void **)v62 - 3));
        }
        long long v62 = (long long *)((char *)v62 - 24);
      }
      while (v62 != v61);
      int v63 = v86;
    }
    std::string v87 = v61;
    operator delete(v63);
  }
  int64_t v64 = v92;
  if (v92 && !atomic_fetch_add(&v92->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
    std::__shared_weak_count::__release_weak(v64);
  }
  uint64_t v65 = (void **)v93;
  if ((void)v93)
  {
    int v66 = (void **)*((void *)&v93 + 1);
    unint64_t v67 = (void *)v93;
    if (*((void *)&v93 + 1) != (void)v93)
    {
      do
        int v66 = sub_4F31D0(v66 - 13);
      while (v66 != v65);
      unint64_t v67 = (void *)v93;
    }
    *((void *)&v93 + 1) = v65;
    operator delete(v67);
  }
}

void sub_89E740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,void *a27)
{
  sub_4F31D0(&a9);
  sub_14A84((uint64_t)&a25);
  sub_4F31D0(&a27);
  sub_4F31D0((void **)(v27 - 232));
  sub_14A84(v27 - 128);
  sub_5920E0((void **)(v27 - 112));
  _Unwind_Resume(a1);
}

void sub_89E854(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
}

uint64_t sub_89E85C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 2879);
}

void sub_89E864(unsigned char *a1@<X0>, std::string *a2@<X8>)
{
  if (a1[2875])
  {
    if ((byte_25CFD8F & 0x80000000) == 0)
    {
      int v3 = &xmmword_25CFD78;
LABEL_7:
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *v3;
      a2->__r_.__value_.__r.__words[2] = *((void *)v3 + 2);
      return;
    }
    unint64_t v6 = *((void *)&xmmword_25CFD78 + 1);
    int v5 = (void *)xmmword_25CFD78;
    int v7 = a2;
    goto LABEL_11;
  }
  if (a1[2877])
  {
    if ((byte_25CFDA7 & 0x80000000) == 0)
    {
      int v3 = &xmmword_25CFD90;
      goto LABEL_7;
    }
    unint64_t v6 = *((void *)&xmmword_25CFD90 + 1);
    int v5 = (void *)xmmword_25CFD90;
    int v7 = a2;
LABEL_11:
    sub_4200(v7, v5, v6);
    return;
  }
  if (sub_89E9D0((uint64_t)a1))
  {
    sub_7F9E6C((uint64_t)a1, (uint64_t)a2);
    if (a1[1860])
    {
      if (byte_25CD87F >= 0) {
        unint64_t v8 = (const std::string::value_type *)&qword_25CD868;
      }
      else {
        unint64_t v8 = (const std::string::value_type *)qword_25CD868;
      }
      if (byte_25CD87F >= 0) {
        std::string::size_type v9 = byte_25CD87F;
      }
      else {
        std::string::size_type v9 = unk_25CD870;
      }
      std::string::append(a2, v8, v9);
      if (byte_25CDB07 >= 0) {
        uint64_t v10 = (const std::string::value_type *)&qword_25CDAF0;
      }
      else {
        uint64_t v10 = (const std::string::value_type *)qword_25CDAF0;
      }
      if (byte_25CDB07 >= 0) {
        std::string::size_type v11 = byte_25CDB07;
      }
      else {
        std::string::size_type v11 = unk_25CDAF8;
      }
      std::string::append(a2, v10, v11);
    }
  }
  else
  {
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
  }
}

void sub_89E9B4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_89E9D0(uint64_t a1)
{
  if (sub_7FA8D4(a1)) {
    return 1;
  }
  if (sub_7FA8C4(a1)) {
    return 1;
  }
  if (sub_7FA8F4(a1)) {
    return 1;
  }
  if (sub_7FA8E4(a1)) {
    return 1;
  }
  if (sub_7FE2E4(a1)) {
    return 1;
  }
  if (sub_7FE2FC(a1)) {
    return 1;
  }
  if (sub_89EB08((void *)(a1 + 1864))) {
    return 1;
  }
  unsigned int v3 = *(_DWORD *)(a1 + 1848);
  BOOL result = 1;
  if (v3 > 0x27 || ((1 << v3) & 0x80000100C0) == 0)
  {
    unsigned int v4 = v3 - 89;
    if (v4 > 5 || ((1 << v4) & 0x23) == 0) {
      return *(unsigned char *)(a1 + 1860) != 0;
    }
  }
  return result;
}

BOOL sub_89EB08(void *a1)
{
  if (*a1 != -1) {
    return 1;
  }
  if (a1[1] != -1) {
    return 1;
  }
  if (a1[2] != -1) {
    return 1;
  }
  if (a1[3] != -1) {
    return 1;
  }
  if (a1[4] != -1) {
    return 1;
  }
  if (a1[5] == -1) {
    return a1[6] != -1;
  }
  return 1;
}

void sub_89EB90(uint64_t a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  if (sub_7F7188(a1))
  {
    if (*(unsigned char *)(a1 + 2877))
    {
      if (byte_25CC9AF < 0)
      {
        long long v16 = xmmword_25CC998;
        sub_4200(a3, (void *)v16, *((unint64_t *)&v16 + 1));
      }
      else
      {
        *(_OWORD *)&a3->__r_.__value_.__l.__data_ = xmmword_25CC998;
        a3->__r_.__value_.__r.__words[2] = unk_25CC9A8;
      }
    }
    else
    {
      sub_7F71C0(a1, a3);
    }
    return;
  }
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  uint64_t v6 = *(void *)(a1 + 936);
  uint64_t v7 = *(void *)(a1 + 944);
  if (v6 == v7)
  {
    if (!sub_6F2FD8(a1 + 304)) {
      return;
    }
    uint64_t v6 = *(void *)(a1 + 936);
    uint64_t v7 = *(void *)(a1 + 944);
    if (v6 == v7)
    {
      BOOL v8 = sub_6F2FD8(a1 + 304);
      uint64_t v6 = *(void *)(a1 + 936);
      uint64_t v7 = *(void *)(a1 + 944);
      if (v8) {
        goto LABEL_15;
      }
    }
  }
  if (v7 - v6 == 152)
  {
LABEL_15:
    int v9 = 1;
  }
  else
  {
    int v9 = sub_7F7B64(a1) ^ 1;
    uint64_t v6 = *(void *)(a1 + 936);
    uint64_t v7 = *(void *)(a1 + 944);
  }
  if (v6 == v7) {
    uint64_t v10 = a1 + 304;
  }
  else {
    uint64_t v10 = v6;
  }
  if (sub_6F2880(v10 + 64) && !*(unsigned char *)(a1 + 2121))
  {
    BOOL v11 = 0;
    if (!*(unsigned char *)(a1 + 2122))
    {
      int v17 = *(_DWORD *)(a1 + 1848);
      if (v17 != 23)
      {
        BOOL v11 = 0;
        if (!*(unsigned char *)(a1 + 2123) && v17 != 92) {
          BOOL v11 = *(unsigned char *)(a1 + 1859) == 0;
        }
      }
    }
  }
  else
  {
    BOOL v11 = 0;
  }
  sub_89EFE4(a1, (uint64_t)v33);
  if (v9) {
    int v12 = (const std::string *)v33;
  }
  else {
    int v12 = (const std::string *)&dword_25CD1F0;
  }
  std::string::operator=(a3, v12);
  char v13 = !v11;
  if (!*(unsigned char *)(a1 + 1856)) {
    char v13 = 1;
  }
  if ((v13 & 1) == 0)
  {
    std::string::operator=(a3, (const std::string *)&qword_25CD250);
    if (sub_6F2DA8(v10 + 64))
    {
      if (byte_25CD69F >= 0) {
        int v14 = (const std::string::value_type *)&qword_25CD688;
      }
      else {
        int v14 = (const std::string::value_type *)qword_25CD688;
      }
      if (byte_25CD69F >= 0) {
        std::string::size_type v15 = byte_25CD69F;
      }
      else {
        std::string::size_type v15 = unk_25CD690;
      }
      std::string::append(a3, v14, v15);
    }
    else if (sub_6F3124(v10))
    {
      if (v9)
      {
        sub_89F110(a1, (uint64_t)__p);
      }
      else if (byte_25CD42F < 0)
      {
        sub_4200(__p, (void *)xmmword_25CD418, *((unint64_t *)&xmmword_25CD418 + 1));
      }
      else
      {
        *(_OWORD *)std::string __p = xmmword_25CD418;
        uint64_t v32 = unk_25CD428;
      }
      unint64_t v18 = v32 >= 0 ? (const std::string::value_type *)__p : (const std::string::value_type *)__p[0];
      int v19 = v32 >= 0 ? (void *)HIBYTE(v32) : __p[1];
      std::string::append(a3, v18, (std::string::size_type)v19);
      if (SHIBYTE(v32) < 0) {
        operator delete(__p[0]);
      }
    }
  }
  if (((v9 | a2) & 1) == 0)
  {
    uint64_t v20 = *(void *)(a1 + 936);
    BOOL v21 = sub_6F2880(v20 + 216);
    if (v21 && *(unsigned char *)(a1 + 1856)) {
      unint64_t v22 = &qword_25CD658;
    }
    else {
      unint64_t v22 = &qword_25CD430;
    }
    int v23 = *((char *)v22 + 23);
    size_t v24 = v23 >= 0 ? (const std::string::value_type *)v22 : (const std::string::value_type *)*v22;
    std::string::size_type v25 = v23 >= 0 ? *((unsigned __int8 *)v22 + 23) : v22[1];
    std::string::append(a3, v24, v25);
    if (*(unsigned char *)(a1 + 1856) && v21)
    {
      if (sub_6F2DA8(v20 + 216))
      {
        uint64_t v27 = &qword_25CD6A0;
      }
      else
      {
        if (!sub_6F3124(v20 + 152)) {
          goto LABEL_85;
        }
        uint64_t v27 = &qword_25CD430;
      }
      int v28 = *((char *)v27 + 23);
      if (v28 >= 0) {
        int v29 = (const std::string::value_type *)v27;
      }
      else {
        int v29 = (const std::string::value_type *)*v27;
      }
      if (v28 >= 0) {
        std::string::size_type v30 = *((unsigned __int8 *)v27 + 23);
      }
      else {
        std::string::size_type v30 = v27[1];
      }
      std::string::append(a3, v29, v30);
    }
  }
LABEL_85:
  if (v34 < 0) {
    operator delete(v33[0]);
  }
}

void sub_89EF38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if (*(char *)(v20 + 23) < 0) {
      goto LABEL_6;
    }
  }
  else if (*(char *)(v20 + 23) < 0)
  {
LABEL_6:
    operator delete(*(void **)v20);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

double sub_89EFE4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(a1 + 2122))
  {
    if ((byte_25CD1D7 & 0x80000000) == 0)
    {
      int v2 = &xmmword_25CD1C0;
LABEL_4:
      long long v3 = *v2;
      *(_OWORD *)a2 = *v2;
      *(void *)(a2 + 16) = *((void *)v2 + 2);
      return *(double *)&v3;
    }
    int v2 = &xmmword_25CD1C0;
LABEL_8:
    sub_4200((unsigned char *)a2, *(void **)v2, *((void *)v2 + 1));
    return *(double *)&v3;
  }
  int v4 = *(_DWORD *)(a1 + 1848);
  if (v4 == 23)
  {
LABEL_6:
    *(unsigned char *)(a2 + 23) = 0;
    *(unsigned char *)a2 = 0;
    return *(double *)&v3;
  }
  if (!*(unsigned char *)(a1 + 2123))
  {
    if (v4 != 94 && v4 != 92)
    {
      if (*(unsigned char *)(a1 + 2121))
      {
        int v2 = &xmmword_25CD1A8;
      }
      else if (*(unsigned char *)(a1 + 2120))
      {
        int v2 = &xmmword_25CD190;
      }
      else if (*(void *)(a1 + 1872) == -1)
      {
        if (*(void *)(a1 + 1880) == -1)
        {
          if (*(void *)(a1 + 1864) == -1) {
            int v2 = (long long *)&qword_25CD178;
          }
          else {
            int v2 = (long long *)&qword_25CD310;
          }
        }
        else
        {
          int v2 = &xmmword_25CD2F8;
        }
      }
      else
      {
        int v2 = &xmmword_25CD2E0;
      }
      if ((*((char *)v2 + 23) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (byte_25CD1EF < 0)
  {
    sub_4200((unsigned char *)a2, (void *)xmmword_25CD1D8, *((unint64_t *)&xmmword_25CD1D8 + 1));
  }
  else
  {
    *(void *)&long long v3 = xmmword_25CD1D8;
    *(_OWORD *)a2 = xmmword_25CD1D8;
    *(void *)(a2 + 16) = unk_25CD1E8;
  }
  return *(double *)&v3;
}

double sub_89F110@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(a1 + 2120))
  {
    if (byte_25CD3FF < 0)
    {
      sub_4200((unsigned char *)a2, (void *)xmmword_25CD3E8, *((unint64_t *)&xmmword_25CD3E8 + 1));
    }
    else
    {
      double result = *(double *)&xmmword_25CD3E8;
      *(_OWORD *)a2 = xmmword_25CD3E8;
      *(void *)(a2 + 16) = unk_25CD3F8;
    }
  }
  else if (*(void *)(a1 + 1872) == -1)
  {
    if (*(void *)(a1 + 1880) == -1)
    {
      if (*(void *)(a1 + 1864) == -1)
      {
        if (byte_25CD3E7 < 0)
        {
          sub_4200((unsigned char *)a2, (void *)xmmword_25CD3D0, *((unint64_t *)&xmmword_25CD3D0 + 1));
        }
        else
        {
          double result = *(double *)&xmmword_25CD3D0;
          *(_OWORD *)a2 = xmmword_25CD3D0;
          *(void *)(a2 + 16) = unk_25CD3E0;
        }
      }
      else if (byte_25CD567 < 0)
      {
        sub_4200((unsigned char *)a2, (void *)xmmword_25CD550, *((unint64_t *)&xmmword_25CD550 + 1));
      }
      else
      {
        double result = *(double *)&xmmword_25CD550;
        *(_OWORD *)a2 = xmmword_25CD550;
        *(void *)(a2 + 16) = unk_25CD560;
      }
    }
    else if (byte_25CD3CF < 0)
    {
      sub_4200((unsigned char *)a2, (void *)xmmword_25CD3B8, *((unint64_t *)&xmmword_25CD3B8 + 1));
    }
    else
    {
      double result = *(double *)&xmmword_25CD3B8;
      *(_OWORD *)a2 = xmmword_25CD3B8;
      *(void *)(a2 + 16) = unk_25CD3C8;
    }
  }
  else if (byte_25CD3B7 < 0)
  {
    sub_4200((unsigned char *)a2, (void *)xmmword_25CD3A0, *((unint64_t *)&xmmword_25CD3A0 + 1));
  }
  else
  {
    double result = *(double *)&xmmword_25CD3A0;
    *(_OWORD *)a2 = xmmword_25CD3A0;
    *(void *)(a2 + 16) = unk_25CD3B0;
  }
  return result;
}

uint64_t sub_89F268(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 960);
  if (0x86BCA1AF286BCA1BLL * ((*(void *)(a1 + 968) - v2) >> 3) < 2) {
    return 1;
  }
  sub_4AA8E0((char *)__dst, (long long *)(v2 + 152));
  BOOL v7 = !sub_6F2880((uint64_t)&v13) || *(unsigned char *)(a1 + 1856) == 0;
  uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  BOOL v3 = v8 != 0;
  if (!v7)
  {
    if (v8) {
      BOOL v3 = sub_6F3124((uint64_t)__dst);
    }
  }
  if (v19 < 0)
  {
    operator delete(__p);
    if ((v17 & 0x80000000) == 0)
    {
LABEL_14:
      if ((v15 & 0x80000000) == 0) {
        goto LABEL_15;
      }
      goto LABEL_20;
    }
  }
  else if ((v17 & 0x80000000) == 0)
  {
    goto LABEL_14;
  }
  operator delete(v16);
  if ((v15 & 0x80000000) == 0)
  {
LABEL_15:
    if ((v12 & 0x80000000) == 0) {
      goto LABEL_16;
    }
LABEL_21:
    operator delete(v11);
    if ((v10 & 0x80000000) == 0) {
      return v3;
    }
    goto LABEL_22;
  }
LABEL_20:
  operator delete(v14);
  if (v12 < 0) {
    goto LABEL_21;
  }
LABEL_16:
  if ((v10 & 0x80000000) == 0) {
    return v3;
  }
LABEL_22:
  operator delete(__dst[0]);
  return v3;
}

void sub_89F3BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4A50F4((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *sub_89F3D0@<X0>(std::string *result@<X0>, char a2@<W1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  uint64_t data = (uint64_t)result[40].__r_.__value_.__l.__data_;
  std::string::size_type size = result[40].__r_.__value_.__l.__size_;
  if (data == size) {
    return result;
  }
  uint64_t v6 = result;
  BOOL v8 = sub_6F2880(data + 64);
  if (v8 && v6[77].__r_.__value_.__s.__data_[8]) {
    int v9 = (const std::string *)&qword_25CD268;
  }
  else {
    int v9 = (const std::string *)&qword_25CD208;
  }
  double result = std::string::operator=(a3, v9);
  if (v6[77].__r_.__value_.__s.__data_[8]) {
    BOOL v10 = v8;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    if (sub_6F2DA8(data + 64))
    {
      BOOL v11 = (uint64_t *)&xmmword_25CD6D0;
LABEL_14:
      int v12 = *((char *)v11 + 23);
      if (v12 >= 0) {
        uint64_t v13 = (const std::string::value_type *)v11;
      }
      else {
        uint64_t v13 = (const std::string::value_type *)*v11;
      }
      if (v12 >= 0) {
        std::string::size_type v14 = *((unsigned __int8 *)v11 + 23);
      }
      else {
        std::string::size_type v14 = v11[1];
      }
      double result = std::string::append(a3, v13, v14);
      goto LABEL_21;
    }
    double result = (std::string *)sub_6F3124(data);
    if (result)
    {
      BOOL v11 = &qword_25CD448;
      goto LABEL_14;
    }
  }
LABEL_21:
  if (size - data != 152 && (a2 & 1) == 0)
  {
    std::string::pointer v15 = v6[40].__r_.__value_.__l.__data_;
    BOOL v16 = sub_6F2880((uint64_t)(v15 + 216));
    if (v16 && v6[77].__r_.__value_.__s.__data_[8]) {
      char v17 = &qword_25CD670;
    }
    else {
      char v17 = &qword_25CD460;
    }
    int v18 = *((char *)v17 + 23);
    char v19 = v18 >= 0 ? (const std::string::value_type *)v17 : (const std::string::value_type *)*v17;
    std::string::size_type v20 = v18 >= 0 ? *((unsigned __int8 *)v17 + 23) : v17[1];
    double result = std::string::append(a3, v19, v20);
    if (v6[77].__r_.__value_.__s.__data_[8] && v16)
    {
      if (sub_6F2DA8((uint64_t)(v15 + 216)))
      {
        unint64_t v22 = (uint64_t *)&xmmword_25CD6E8;
      }
      else
      {
        double result = (std::string *)sub_6F3124((uint64_t)(v15 + 152));
        if (!result) {
          return result;
        }
        unint64_t v22 = &qword_25CD460;
      }
      int v23 = *((char *)v22 + 23);
      if (v23 >= 0) {
        size_t v24 = (const std::string::value_type *)v22;
      }
      else {
        size_t v24 = (const std::string::value_type *)*v22;
      }
      if (v23 >= 0) {
        std::string::size_type v25 = *((unsigned __int8 *)v22 + 23);
      }
      else {
        std::string::size_type v25 = v22[1];
      }
      return std::string::append(a3, v24, v25);
    }
  }
  return result;
}

void sub_89F584(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_89F5A4(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v4 = a2;
  uint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v8 = 0x4EC4EC4EC4EC4EC5 * ((a2 - *a1) >> 3);
  unint64_t v11 = a1[2];
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = v11;
  if (v6 >= v11)
  {
    unint64_t v18 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v6 - v7) >> 3) + 1;
    if (v18 > 0x276276276276276) {
      sub_2E00();
    }
    unint64_t v19 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v10 - v7) >> 3);
    if (2 * v19 > v18) {
      unint64_t v18 = 2 * v19;
    }
    if (v19 >= 0x13B13B13B13B13BLL) {
      unint64_t v20 = 0x276276276276276;
    }
    else {
      unint64_t v20 = v18;
    }
    uint64_t v29 = v9;
    if (v20)
    {
      if (v20 > 0x276276276276276) {
        sub_188D718();
      }
      BOOL v21 = (char *)operator new(104 * v20);
    }
    else
    {
      BOOL v21 = 0;
    }
    std::string __p = v21;
    BOOL v26 = &v21[104 * v8];
    uint64_t v27 = v26;
    int v28 = &v21[104 * v20];
    sub_8BEB64((uint64_t)&__p, a3);
    unint64_t v4 = sub_63D88C(a1, &__p, v4);
    int v23 = v26;
    for (unint64_t i = v27; v27 != v23; unint64_t i = v27)
    {
      uint64_t v27 = i - 104;
      sub_4F31D0((void **)i - 13);
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (a2 == v6)
  {
    sub_63D394(v9, a2, a3);
    a1[1] = v4 + 104;
  }
  else
  {
    sub_63D730((uint64_t)a1, a2, v6, a2 + 104);
    if (v4 <= a3) {
      a3 += 104 * (a1[1] > a3);
    }
    if (v4 != a3)
    {
      sub_69208(v4, *(std::string **)a3, *(std::string **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
      *(_DWORD *)(v4 + 56) = *(_DWORD *)(a3 + 56);
      sub_59E5E4((void *)(v4 + 24), *(uint64_t **)(a3 + 40), 0);
    }
    *(unsigned char *)(v4 + 64) = *(unsigned char *)(a3 + 64);
    uint64_t v12 = v7 + 104 * v8;
    *(_DWORD *)(v12 + 72) = *(_DWORD *)(a3 + 72);
    uint64_t v13 = (void *)(v12 + 80);
    uint64_t v15 = *(void *)(a3 + 80);
    uint64_t v14 = *(void *)(a3 + 88);
    if (v14) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    }
    *uint64_t v13 = v15;
    uint64_t v16 = v7 + 104 * v8;
    char v17 = *(std::__shared_weak_count **)(v16 + 88);
    *(void *)(v16 + 88) = v14;
    if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    *(_WORD *)(v7 + 104 * v8 + 96) = *(_WORD *)(a3 + 96);
  }
  return v4;
}

void sub_89F838(_Unwind_Exception *a1)
{
  *(void *)(v2 + 8) = v1;
  _Unwind_Resume(a1);
}

void sub_89F840(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_63D438((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_89F854(uint64_t a1)
{
  if (sub_7FE2E4(a1)) {
    return 1;
  }
  if (sub_7FE2FC(a1)) {
    return 1;
  }
  if ((*(_DWORD *)(a1 + 1848) & 0xFFFFFFFE) == 6) {
    return 1;
  }
  return *(unsigned char *)(a1 + 1856) == 0;
}

std::string::size_type sub_89F8D4(std::string::size_type a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, int a6)
{
  std::string::size_type v9 = sub_801F98(a1, a2, a3, a4, a5, a6);
  sub_676CBC(v9 + 2136, a4, a5);
  *(void *)a1 = off_243A9D0;
  *(void *)(a1 + 2136) = off_243AA98;
  unint64_t v10 = (void **)(a1 + 2880);
  *(_OWORD *)(a1 + 2848) = 0u;
  *(_OWORD *)(a1 + 2864) = 0u;
  *(_OWORD *)(a1 + 2880) = 0u;
  *(_OWORD *)(a1 + 2892) = 0u;
  *(unsigned char *)(a1 + 2912) = 2;
  uint64_t v11 = a1 + 2920;
  *(void *)(a1 + 2920) = 0;
  *(void *)(a1 + 2936) = 0;
  *(void *)(a1 + 2928) = 0;
  uint64_t v12 = *(void *)(a4 + 1064);
  uint64_t v13 = (const std::string *)sub_64F474(a4);
  std::string::operator=((std::string *)(a1 + 2848), v13);
  BOOL v14 = sub_63ACE0(v12 + 2400 * a5 + 1872);
  *(unsigned char *)(a1 + 2872) = v14;
  if (v14)
  {
    BOOL v15 = sub_63A8F8(v12 + 2400 * a5 + 1896);
    BOOL v16 = *(unsigned char *)(a1 + 2872) == 0;
    BOOL v17 = 0;
    *(unsigned char *)(a1 + 2873) = v15;
    if (!v16 && *(unsigned char *)(v12 + 2400 * a5 + 2081)) {
      BOOL v17 = sub_63A908(v12 + 2400 * a5 + 1896) && *(unsigned char *)(v12 + 2400 * a5 + 1896) == 0;
    }
  }
  else
  {
    BOOL v17 = 0;
    *(unsigned char *)(a1 + 2873) = 0;
  }
  *(unsigned char *)(a1 + 2874) = v17;
  unint64_t v18 = (unsigned char *)(v12 + 2400 * a5);
  unint64_t v19 = v18 + 648;
  unsigned __int8 v20 = v18[651];
  *(unsigned char *)(a1 + 2879) = (v20 | v18[320]) != 0;
  int v21 = v18[649];
  if (v21) {
    LOBYTE(v21) = *(void *)(v12 + 2400 * a5 + 568) == -1;
  }
  *(unsigned char *)(a1 + 2875) = v21;
  BOOL v22 = 1;
  if (!*v19) {
    BOOL v22 = *(unsigned char *)(v12 + 2400 * a5 + 650) != 0;
  }
  *(unsigned char *)(a1 + 2876) = v22;
  *(unsigned char *)(a1 + 2877) = v20;
  *(unsigned char *)(a1 + 2878) = 1;
  uint64_t v23 = v12 + 2400 * a5;
  std::string::size_type v25 = *(unsigned char **)(v23 + 176);
  size_t v24 = *(unsigned char **)(v23 + 184);
  if (v25 != v24)
  {
    uint64_t v26 = v12 + 2400 * a5;
    if (*(unsigned char *)(v26 + 330)) {
      uint64_t v27 = (char *)(v26 + 329);
    }
    else {
      uint64_t v27 = (char *)(a4 + 1057);
    }
    char v28 = *v27;
    uint64_t v29 = v24 - v25;
    if (v24 - v25 < 0) {
      sub_2E00();
    }
    std::string::size_type v30 = (char *)operator new(v24 - v25);
    unint64_t v31 = &v30[4 * (v29 >> 2)];
    memcpy(v30, v25, v29 - 1);
    int v32 = *(_DWORD *)(v12 + 2400 * a5 + 200);
    uint64_t v33 = *v10;
    if (*v10)
    {
      *(void *)(a1 + 2888) = v33;
      operator delete(v33);
      *unint64_t v10 = 0;
      *(void *)(a1 + 2888) = 0;
      *(void *)(a1 + 2896) = 0;
    }
    *(void *)(a1 + 2880) = v30;
    *(void *)(a1 + 2888) = v31;
    *(void *)(a1 + 2896) = v31;
    *(_DWORD *)(a1 + 2904) = v32;
    *(unsigned char *)(a1 + 2912) = v28;
    uint64_t v11 = a1 + 2920;
  }
  char v34 = (std::string **)(v12 + 2400 * a5 + 1832);
  if ((std::string **)v11 != v34) {
    sub_5A03B8(v11, *v34, *(std::string **)(v12 + 2400 * a5 + 1840), 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(void *)(v12 + 2400 * a5 + 1840) - (void)*v34) >> 4));
  }
  return a1;
}

void sub_89FBB4(_Unwind_Exception *a1)
{
  sub_531E24(v1);
  _Unwind_Resume(a1);
}

void sub_89FBC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void **a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    operator delete(__p);
    sub_4A5980(a11);
    BOOL v17 = *v14;
    if (!*v14)
    {
LABEL_3:
      if ((*(char *)(v13 + 2871) & 0x80000000) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    sub_4A5980(a11);
    BOOL v17 = *v14;
    if (!*v14) {
      goto LABEL_3;
    }
  }
  *(void *)(v13 + 2888) = v17;
  operator delete(v17);
  if ((*(char *)(v13 + 2871) & 0x80000000) == 0)
  {
LABEL_5:
    sub_89FC54(a10);
    sub_531E24(v13);
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(*v15);
  goto LABEL_5;
}

void *sub_89FC54(void *a1)
{
  *a1 = off_243A190;
  sub_576848((uint64_t)(a1 + 46));
  sub_576848((uint64_t)(a1 + 4));
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = a1[2];
    unint64_t v4 = (void *)a1[1];
    if (v3 != v2)
    {
      do
        uint64_t v3 = sub_576848(v3 - 336);
      while (v3 != v2);
      unint64_t v4 = (void *)a1[1];
    }
    a1[2] = v2;
    operator delete(v4);
  }
  return a1;
}

std::string::size_type sub_89FCDC(std::string::size_type a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, int a6)
{
  return sub_89F8D4(a1, a2, a3, a4, a5, a6);
}

std::string *sub_89FCE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 56) = 1065353216;
  *(unsigned char *)(a2 + 64) = 1;
  int v3 = *(_DWORD *)(a1 + 1848);
  switch(v3)
  {
    case 'T':
      sub_804794(a1, (char **)a2);
      return sub_63581C((std::string **)a2, (const std::string::value_type *)&qword_25CD760);
    case 'S':
      sub_804748(a1, (char **)a2);
      return sub_63581C((std::string **)a2, (const std::string::value_type *)&qword_25CD760);
    case 'R':
      sub_8046FC(a1, (char **)a2);
      return sub_63581C((std::string **)a2, (const std::string::value_type *)&qword_25CD760);
  }
  return sub_6351E8((char **)a2, (uint64_t)&xmmword_25CCDE8);
}

void sub_89FD84(_Unwind_Exception *a1)
{
  sub_4D4880(v1);
  _Unwind_Resume(a1);
}

void sub_89FD98(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 56) = 1065353216;
  *(unsigned char *)(a2 + 64) = 1;
  if (sub_800150(a1))
  {
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 12;
    strcpy((char *)&__p, "Address_Sign");
    sub_6351E8((char **)a2, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_6358A0(a2, &xmmword_25CE6F0, (const std::string *)(a1 + 2848));
  }
  else
  {
    if (a1 + 8 != a2)
    {
      sub_69208(a2, *(std::string **)(a1 + 8), *(std::string **)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3));
      *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 64);
      sub_59E5E4((void *)(a2 + 24), *(uint64_t **)(a1 + 48), 0);
    }
    *(unsigned char *)(a2 + 64) = *(unsigned char *)(a1 + 72);
    sub_635CD0((long long **)a2, (uint64_t)&__p);
    if (byte_25CD777 >= 0) {
      unint64_t v4 = (const std::string::value_type *)&qword_25CD760;
    }
    else {
      unint64_t v4 = (const std::string::value_type *)qword_25CD760;
    }
    if (byte_25CD777 >= 0) {
      std::string::size_type v5 = byte_25CD777;
    }
    else {
      std::string::size_type v5 = qword_25CD768;
    }
    std::string::append(&__p, v4, v5);
    sub_6351E8((char **)a2, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_89FEF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_4D4880(v15);
  _Unwind_Resume(a1);
}

void sub_89FF30(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void ***__return_ptr))(*(void *)a1 + 24))(&v44);
  uint64_t v31 = 0;
  int v32 = 0;
  sub_6370D4(v33, &v44, 1, &v31);
  unint64_t v4 = v32;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (a1[2875]) {
      goto LABEL_4;
    }
  }
  else if (a1[2875])
  {
LABEL_4:
    BOOL v5 = 1;
    goto LABEL_7;
  }
  BOOL v5 = a1[2876] != 0;
LABEL_7:
  sub_80A078((uint64_t)a1, (uint64_t *)v33, 0, v5);
  if (v5)
  {
    int v6 = a1[1859];
    uint64_t v7 = (std::__shared_weak_count *)operator new(0x80uLL);
    v7->__shared_owners_ = 0;
    v7->__shared_weak_owners_ = 0;
    v7->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
    sub_59540C((uint64_t)&v48, (uint64_t)&v7[1], (uint64_t)v33);
    uint64_t v29 = &v7[1].__vftable;
    std::string::size_type v30 = v7;
    if (v6) {
      uint64_t v8 = 5;
    }
    else {
      uint64_t v8 = 10;
    }
    sub_8A0348((uint64_t)a1, (uint64_t *)&v29, v8, a2);
    std::string::size_type v9 = v30;
    if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)v33;
    v33[0] = 0;
    v33[1] = 0;
    uint64_t v11 = v34;
    unint64_t v10 = __p;
    unint64_t v12 = v36;
    uint64_t v13 = v37;
    std::string __p = 0;
    unint64_t v36 = 0;
    uint64_t v34 = 0;
    *(void *)(a2 + 16) = v11;
    *(void *)(a2 + 24) = v10;
    *(void *)(a2 + 32) = v12;
    *(void *)(a2 + 40) = v13;
    uint64_t v14 = v38;
    *(void *)(a2 + 48) = v38;
    *(_DWORD *)(a2 + 56) = v39;
    if (v14)
    {
      unint64_t v15 = v13[1];
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v15 >= v12) {
          v15 %= v12;
        }
      }
      else
      {
        v15 &= v12 - 1;
      }
      v10[v15] = a2 + 40;
      uint64_t v37 = 0;
      uint64_t v38 = 0;
    }
    *(unsigned char *)(a2 + 64) = v40;
    *(_DWORD *)(a2 + 72) = v41;
    *(_OWORD *)(a2 + 80) = v42;
    long long v42 = 0uLL;
    *(_WORD *)(a2 + 96) = v43;
  }
  BOOL v16 = (std::__shared_weak_count *)*((void *)&v42 + 1);
  if (*((void *)&v42 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v42 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  BOOL v17 = v37;
  if (v37)
  {
    do
    {
      unint64_t v18 = (void *)*v17;
      sub_4F4B48((uint64_t)(v17 + 2));
      operator delete(v17);
      BOOL v17 = v18;
    }
    while (v18);
  }
  unint64_t v19 = __p;
  std::string __p = 0;
  if (v19) {
    operator delete(v19);
  }
  unsigned __int8 v20 = (void **)v33[0];
  if (v33[0])
  {
    int v21 = (void **)v33[1];
    BOOL v22 = v33[0];
    if (v33[1] != v33[0])
    {
      do
      {
        if (*((char *)v21 - 1) < 0) {
          operator delete(*(v21 - 3));
        }
        v21 -= 3;
      }
      while (v21 != v20);
      BOOL v22 = v33[0];
    }
    v33[1] = v20;
    operator delete(v22);
  }
  uint64_t v23 = v47;
  if (v47)
  {
    do
    {
      size_t v24 = (void *)*v23;
      sub_4F4B48((uint64_t)(v23 + 2));
      operator delete(v23);
      uint64_t v23 = v24;
    }
    while (v24);
  }
  std::string::size_type v25 = v46;
  std::string::size_type v46 = 0;
  if (v25) {
    operator delete(v25);
  }
  uint64_t v26 = v44;
  if (v44)
  {
    uint64_t v27 = v45;
    char v28 = v44;
    if (v45 != v44)
    {
      do
      {
        if (*((char *)v27 - 1) < 0) {
          operator delete(*(v27 - 3));
        }
        v27 -= 3;
      }
      while (v27 != v26);
      char v28 = v44;
    }
    uint64_t v45 = v26;
    operator delete(v28);
  }
}

void sub_8A02C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  sub_14A84((uint64_t)&a9);
  sub_4F31D0(&a13);
  sub_4D4880((void **)(v13 - 128));
  _Unwind_Resume(a1);
}

void sub_8A02E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  std::__shared_weak_count::~__shared_weak_count(v13);
  operator delete(v16);
  sub_4F31D0(&a13);
  sub_4D4880((void **)(v14 - 128));
  _Unwind_Resume(a1);
}

void sub_8A030C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_4F31D0((void **)va);
  sub_4D4880((void **)(v5 - 128));
  _Unwind_Resume(a1);
}

void sub_8A032C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)(v3 - 128));
  _Unwind_Resume(a1);
}

void sub_8A0348(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)(a1 + 1945))
  {
    uint64_t v7 = (int *)&xmmword_25CFD78;
    if ((byte_25CFD8F & 0x80000000) == 0)
    {
LABEL_3:
      *(_OWORD *)unint64_t v36 = *(_OWORD *)v7;
      uint64_t v37 = *((void *)v7 + 2);
      goto LABEL_9;
    }
  }
  else
  {
    if (*(unsigned char *)(a1 + 1946)) {
      uint64_t v7 = &dword_25CFDC0;
    }
    else {
      uint64_t v7 = &dword_25CFDA8;
    }
    if ((*((char *)v7 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  sub_4200(v36, *(void **)v7, *((void *)v7 + 1));
LABEL_9:
  int v8 = SHIBYTE(v37);
  if (v37 >= 0) {
    size_t v9 = HIBYTE(v37);
  }
  else {
    size_t v9 = (size_t)v36[1];
  }
  int v10 = byte_25CD777;
  if (byte_25CD777 >= 0) {
    size_t v11 = byte_25CD777;
  }
  else {
    size_t v11 = qword_25CD768;
  }
  unint64_t v12 = v11 + v9;
  if (v11 + v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v12 <= 0x16)
  {
    size_t v34 = 0;
    unint64_t v35 = 0;
    long long __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v35) = v11 + v9;
    if (!v9) {
      goto LABEL_22;
    }
    goto LABEL_18;
  }
  uint64_t v25 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v12 | 7) != 0x17) {
    uint64_t v25 = v12 | 7;
  }
  uint64_t v26 = v25 + 1;
  p_dst = (void **)operator new(v25 + 1);
  size_t v34 = v11 + v9;
  unint64_t v35 = v26 | 0x8000000000000000;
  long long __dst = p_dst;
  if (v9)
  {
LABEL_18:
    if (v8 >= 0) {
      uint64_t v14 = v36;
    }
    else {
      uint64_t v14 = (void **)v36[0];
    }
    memmove(p_dst, v14, v9);
  }
LABEL_22:
  unint64_t v15 = (char *)p_dst + v9;
  if (v11)
  {
    if (v10 >= 0) {
      BOOL v16 = &qword_25CD760;
    }
    else {
      BOOL v16 = (uint64_t *)qword_25CD760;
    }
    memmove(v15, v16, v11);
  }
  v15[v11] = 0;
  sub_6352AC((uint64_t)&v29, (uint64_t)&__dst);
  BOOL v17 = (std::__shared_weak_count *)a2[1];
  uint64_t v27 = *a2;
  char v28 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_6370D4(a4, &v29, a3, &v27);
  unint64_t v18 = v28;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  unint64_t v19 = v32;
  if (v32)
  {
    do
    {
      unsigned __int8 v20 = (void *)*v19;
      sub_4F4B48((uint64_t)(v19 + 2));
      operator delete(v19);
      unint64_t v19 = v20;
    }
    while (v20);
  }
  int v21 = __p;
  std::string __p = 0;
  if (v21) {
    operator delete(v21);
  }
  BOOL v22 = (void **)v29;
  if (v29)
  {
    uint64_t v23 = v30;
    size_t v24 = v29;
    if (v30 != v29)
    {
      do
      {
        if (*((char *)v23 - 1) < 0) {
          operator delete(*(v23 - 3));
        }
        v23 -= 3;
      }
      while (v23 != v22);
      size_t v24 = v29;
    }
    std::string::size_type v30 = v22;
    operator delete(v24);
  }
  if ((SHIBYTE(v35) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v37) & 0x80000000) == 0) {
      return;
    }
LABEL_52:
    operator delete(v36[0]);
    return;
  }
  operator delete(__dst);
  if (SHIBYTE(v37) < 0) {
    goto LABEL_52;
  }
}

void sub_8A0600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a25 < 0)
  {
    operator delete(__p);
    if ((a31 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else if ((a31 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a26);
  _Unwind_Resume(a1);
}

void sub_8A0664(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v2 = *(void *)(a1 + 2920);
  uint64_t v3 = *(void *)(a1 + 2928);
  if (v2 == v3) {
    return;
  }
  BOOL v22 = (const void **)(a1 + 152);
  do
  {
    uint64_t v28 = 0;
    *(_OWORD *)uint64_t v26 = 0u;
    long long v27 = 0u;
    *(_OWORD *)std::string __p = 0u;
    int v29 = 1065353216;
    char v30 = 1;
    int v7 = *(_DWORD *)(v2 + 240);
    if (v7 > 90)
    {
      if (v7 == 91)
      {
        sub_7F61B4(a1, (char **)__p, v2);
        goto LABEL_45;
      }
      if (v7 == 93)
      {
        sub_7F6218(a1, (char **)__p, v2);
        goto LABEL_45;
      }
    }
    else
    {
      if (v7 == 22)
      {
        sub_7F60EC(a1, (char **)__p, v2);
        goto LABEL_45;
      }
      if (v7 == 24)
      {
        sub_7F6150(a1, (char **)__p, v2);
        goto LABEL_45;
      }
    }
    if (*(_DWORD *)(a1 + 1848) == 3
      && *(void *)(v2 + 152) == -1
      && *(void *)(v2 + 160) == -1
      && *(void *)(v2 + 168) == -1
      && *(void *)(v2 + 176) == -1
      && *(void *)(v2 + 184) == -1
      && *(void *)(v2 + 200) == -1
      && *(void *)(a1 + 1864) == -1
      && *(void *)(a1 + 1872) == -1
      && *(void *)(a1 + 1880) == -1
      && *(void *)(a1 + 1888) == -1
      && *(void *)(a1 + 1896) == -1
      && *(void *)(a1 + 1912) == -1)
    {
      uint64_t v8 = *(unsigned __int8 *)(v2 + 23);
      if ((v8 & 0x80u) == 0) {
        uint64_t v9 = *(unsigned __int8 *)(v2 + 23);
      }
      else {
        uint64_t v9 = *(void *)(v2 + 8);
      }
      uint64_t v10 = *(unsigned __int8 *)(a1 + 175);
      int v11 = (char)v10;
      if ((v10 & 0x80u) != 0) {
        uint64_t v10 = *(void *)(a1 + 160);
      }
      if (v9 == v10)
      {
        if (v11 >= 0) {
          unint64_t v12 = (unsigned __int8 *)v22;
        }
        else {
          unint64_t v12 = (unsigned __int8 *)*v22;
        }
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v2, v12, *(void *)(v2 + 8)))
          {
LABEL_77:
            unint64_t v21 = *(void *)(a2 + 8);
            if (v21 >= *(void *)(a2 + 16))
            {
              *(void *)(a2 + 8) = sub_8BE59C((void ***)a2);
            }
            else
            {
              *(_OWORD *)(v21 + 64) = 0u;
              *(_OWORD *)(v21 + 80) = 0u;
              *(void *)(v21 + 88) = 0;
              *(void *)(v21 + 96) = 0;
              *(_OWORD *)(v21 + 32) = 0u;
              *(_OWORD *)(v21 + 48) = 0u;
              *(_OWORD *)unint64_t v21 = 0u;
              *(_OWORD *)(v21 + 16) = 0u;
              *(_DWORD *)(v21 + 56) = 1065353216;
              *(unsigned char *)(v21 + 64) = 1;
              *(void *)(v21 + 80) = 0;
              *(_WORD *)(v21 + 96) = 0;
              *(void *)(a2 + 8) = v21 + 104;
            }
            goto LABEL_53;
          }
        }
        else
        {
          if (!*(unsigned char *)(v2 + 23)) {
            goto LABEL_77;
          }
          uint64_t v13 = 0;
          while (*(unsigned __int8 *)(v2 + v13) == v12[v13])
          {
            if (v8 == ++v13) {
              goto LABEL_77;
            }
          }
        }
      }
    }
    sub_6351E8((char **)__p, (uint64_t)&xmmword_25CCFC8);
    sub_80C964(a1, (uint64_t)__p, v2, (void *)(v2 + 152));
    sub_7FF86C(a1, (long long **)__p, v2 + 152);
LABEL_45:
    sub_635CD0((long long **)__p, (uint64_t)&v24);
    if (byte_25CD747 >= 0) {
      uint64_t v14 = (const std::string::value_type *)&qword_25CD730;
    }
    else {
      uint64_t v14 = (const std::string::value_type *)qword_25CD730;
    }
    if (byte_25CD747 >= 0) {
      std::string::size_type v15 = byte_25CD747;
    }
    else {
      std::string::size_type v15 = qword_25CD738;
    }
    std::string::append(&v24, v14, v15);
    sub_6351E8((char **)__p, (uint64_t)&v24);
    unsigned int v23 = 1;
    sub_7FE9A4(a2, (uint64_t)__p, &v23);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
LABEL_53:
    BOOL v16 = (uint64_t **)*((void *)&v27 + 1);
    if (*((void *)&v27 + 1))
    {
      while (1)
      {
        BOOL v17 = *v16;
        if (*((char *)v16 + 191) < 0)
        {
          operator delete(v16[21]);
          if (*((char *)v16 + 159) < 0) {
            goto LABEL_64;
          }
LABEL_59:
          if ((*((char *)v16 + 135) & 0x80000000) == 0) {
            goto LABEL_60;
          }
LABEL_65:
          operator delete(v16[14]);
          if (*((char *)v16 + 95) < 0) {
            goto LABEL_66;
          }
LABEL_61:
          if ((*((char *)v16 + 63) & 0x80000000) == 0) {
            goto LABEL_67;
          }
LABEL_55:
          operator delete(v16[5]);
          if (*((char *)v16 + 39) < 0) {
            goto LABEL_68;
          }
LABEL_56:
          operator delete(v16);
          BOOL v16 = (uint64_t **)v17;
          if (!v17) {
            break;
          }
        }
        else
        {
          if ((*((char *)v16 + 159) & 0x80000000) == 0) {
            goto LABEL_59;
          }
LABEL_64:
          operator delete(v16[17]);
          if (*((char *)v16 + 135) < 0) {
            goto LABEL_65;
          }
LABEL_60:
          if ((*((char *)v16 + 95) & 0x80000000) == 0) {
            goto LABEL_61;
          }
LABEL_66:
          operator delete(v16[9]);
          if (*((char *)v16 + 63) < 0) {
            goto LABEL_55;
          }
LABEL_67:
          if ((*((char *)v16 + 39) & 0x80000000) == 0) {
            goto LABEL_56;
          }
LABEL_68:
          operator delete(v16[2]);
          operator delete(v16);
          BOOL v16 = (uint64_t **)v17;
          if (!v17) {
            break;
          }
        }
      }
    }
    unint64_t v18 = v26[1];
    v26[1] = 0;
    if (v18) {
      operator delete(v18);
    }
    unint64_t v19 = (void **)__p[0];
    if (__p[0])
    {
      unsigned __int8 v20 = (void **)__p[1];
      int v6 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          if (*((char *)v20 - 1) < 0) {
            operator delete(*(v20 - 3));
          }
          v20 -= 3;
        }
        while (v20 != v19);
        int v6 = __p[0];
      }
      __p[1] = v19;
      operator delete(v6);
    }
    v2 += 272;
  }
  while (v2 != v3);
}

void sub_8A0A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_4D4880(&a18);
  sub_5920E0(v18);
  _Unwind_Resume(a1);
}

void sub_8A0AE0(int *a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = a1[462];
  if ((v3 - 25) <= 0x3F && ((1 << (v3 - 25)) & 0x9000000000000001) != 0 || v3 == 17)
  {
    sub_8A0CB0((uint64_t)a1, (uint64_t)&v20);
    *(_OWORD *)std::string __p = 0u;
    *(_OWORD *)unint64_t v18 = 0u;
    int v19 = 1065353216;
    sub_8BE3F4(a2, (uint64_t)&v20, (uint64_t)__p);
    int v6 = (char *)v18[0];
    if (v18[0])
    {
      do
      {
        std::string::size_type v15 = *(char **)v6;
        BOOL v16 = (void *)*((void *)v6 + 6);
        if (v16)
        {
          *((void *)v6 + 7) = v16;
          operator delete(v16);
        }
        if (v6[39] < 0) {
          operator delete(*((void **)v6 + 2));
        }
        operator delete(v6);
        int v6 = v15;
      }
      while (v15);
    }
    int v7 = __p[0];
    __p[0] = 0;
    if (v7) {
      operator delete(v7);
    }
    uint64_t v8 = v24;
    if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    uint64_t v9 = v23;
    if (v23)
    {
      do
      {
        uint64_t v10 = (void *)*v9;
        sub_4F4B48((uint64_t)(v9 + 2));
        operator delete(v9);
        uint64_t v9 = v10;
      }
      while (v10);
    }
    int v11 = v22;
    BOOL v22 = 0;
    if (v11) {
      operator delete(v11);
    }
    unint64_t v12 = (void **)v20;
    if (v20)
    {
      uint64_t v13 = v21;
      uint64_t v14 = v20;
      if (v21 != v20)
      {
        do
        {
          if (*((char *)v13 - 1) < 0) {
            operator delete(*(v13 - 3));
          }
          v13 -= 3;
        }
        while (v13 != v12);
        uint64_t v14 = v20;
      }
      unint64_t v21 = v12;
      operator delete(v14);
    }
  }
  else
  {
    sub_8A0DD8(a1, a2);
  }
}

void sub_8A0C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

void sub_8A0CB0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_8A1700(a1, (uint64_t)&v12);
  uint64_t v10 = 0;
  int v11 = 0;
  sub_6370D4(a2, &v12, 1, &v10);
  int v3 = v11;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  unint64_t v4 = v15;
  if (v15)
  {
    do
    {
      uint64_t v5 = (void *)*v4;
      sub_4F4B48((uint64_t)(v4 + 2));
      operator delete(v4);
      unint64_t v4 = v5;
    }
    while (v5);
  }
  int v6 = __p;
  std::string __p = 0;
  if (v6) {
    operator delete(v6);
  }
  int v7 = (void **)v12;
  if (v12)
  {
    uint64_t v8 = v13;
    uint64_t v9 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      uint64_t v9 = v12;
    }
    uint64_t v13 = v7;
    operator delete(v9);
  }
}

void sub_8A0DBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  _Unwind_Resume(a1);
}

void sub_8A0DD8(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v88 = 0;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v85 = 0u;
  int v89 = 1065353216;
  char v90 = 1;
  *(_OWORD *)std::string::size_type v82 = 0u;
  *(_OWORD *)int64_t v83 = 0u;
  int v84 = 1065353216;
  sub_5F3040((uint64_t)&__p, a1[462], (uint64_t)(a1 + 720));
  sub_8BEDEC((uint64_t)v82, (uint64_t)&qword_25D0210, (uint64_t)&qword_25D0210, (uint64_t)&__p);
  if (__p.__r_.__value_.__l.__size_)
  {
    __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  }
  if (!sub_7F7188((uint64_t)a1))
  {
    uint64_t v14 = (char *)(a1 + 38);
    if (!sub_6F2FD8((uint64_t)(a1 + 38)))
    {
      (*(void (**)(std::string *__return_ptr, int *))(*(void *)a1 + 24))(&__p, a1);
      uint64_t v18 = v85;
      if ((void)v85)
      {
        uint64_t v19 = *((void *)&v85 + 1);
        unsigned __int8 v20 = (void *)v85;
        if (*((void *)&v85 + 1) != (void)v85)
        {
          do
          {
            if (*(char *)(v19 - 1) < 0) {
              operator delete(*(void **)(v19 - 24));
            }
            v19 -= 24;
          }
          while (v19 != v18);
          unsigned __int8 v20 = (void *)v85;
        }
        *((void *)&v85 + 1) = v18;
        operator delete(v20);
      }
      long long v85 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)&long long v86 = *((void *)&__p.__r_.__value_.__l + 2);
      memset(&__p, 0, sizeof(__p));
      if (v88)
      {
        int v32 = (void *)*((void *)&v87 + 1);
        if (*((void *)&v87 + 1))
        {
          do
          {
            uint64_t v33 = (void *)*v32;
            sub_4F4B48((uint64_t)(v32 + 2));
            operator delete(v32);
            int v32 = v33;
          }
          while (v33);
        }
        *((void *)&v87 + 1) = 0;
        uint64_t v34 = v87;
        if ((void)v87)
        {
          uint64_t v35 = 0;
          do
            *(void *)(*((void *)&v86 + 1) + 8 * v35++) = 0;
          while (v34 != v35);
        }
        uint64_t v88 = 0;
      }
      unint64_t v36 = v68;
      uint64_t v68 = 0;
      uint64_t v37 = (void *)*((void *)&v86 + 1);
      *((void *)&v86 + 1) = v36;
      if (v37) {
        operator delete(v37);
      }
      unint64_t v38 = (unint64_t)v69;
      int v39 = v70;
      long long v69 = 0;
      *((void *)&v87 + 1) = v70;
      uint64_t v88 = v71;
      int v89 = v72;
      *(void *)&long long v87 = v38;
      if (v71)
      {
        unint64_t v40 = v70[1];
        if ((v38 & (v38 - 1)) != 0)
        {
          if (v40 >= v38) {
            v40 %= v38;
          }
        }
        else
        {
          v40 &= v38 - 1;
        }
        *(void *)(*((void *)&v86 + 1) + 8 * v40) = (char *)&v87 + 8;
        uint64_t v70 = 0;
        uint64_t v71 = 0;
        char v90 = v73;
      }
      else
      {
        char v90 = v73;
        if (v70)
        {
          do
          {
            int v41 = (void *)*v39;
            sub_4F4B48((uint64_t)(v39 + 2));
            operator delete(v39);
            int v39 = v41;
          }
          while (v41);
        }
      }
      long long v42 = v68;
      uint64_t v68 = 0;
      if (v42) {
        operator delete(v42);
      }
      std::string::size_type v43 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
      {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
        BOOL v17 = (void *)__p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
        {
          do
          {
            if (*(char *)(size - 1) < 0) {
              operator delete(*(void **)(size - 24));
            }
            size -= 24;
          }
          while (size != v43);
          BOOL v17 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__l.__size_ = v43;
        goto LABEL_115;
      }
      goto LABEL_116;
    }
    if (sub_8A18BC((uint64_t)a1))
    {
      sub_803FF8((std::string *)a1, (char **)&v85, 1u);
      sub_635CD0((long long **)&v85, (uint64_t)&__p);
      if (byte_25CD747 >= 0) {
        std::string::size_type v15 = (const std::string::value_type *)&qword_25CD730;
      }
      else {
        std::string::size_type v15 = (const std::string::value_type *)qword_25CD730;
      }
      if (byte_25CD747 >= 0) {
        std::string::size_type v16 = byte_25CD747;
      }
      else {
        std::string::size_type v16 = qword_25CD738;
      }
      std::string::append(&__p, v15, v16);
      sub_6351E8((char **)&v85, (uint64_t)&__p);
      goto LABEL_34;
    }
    int v23 = byte_25CD18F;
    if (byte_25CD18F >= 0) {
      size_t v24 = byte_25CD18F;
    }
    else {
      size_t v24 = qword_25CD180;
    }
    int v25 = byte_25CD747;
    if (byte_25CD747 >= 0) {
      size_t v26 = byte_25CD747;
    }
    else {
      size_t v26 = qword_25CD738;
    }
    unint64_t v27 = v26 + v24;
    if (v26 + v24 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v27 > 0x16)
    {
      uint64_t v45 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v27 | 7) != 0x17) {
        uint64_t v45 = v27 | 7;
      }
      uint64_t v46 = v45 + 1;
      p_p = (std::string *)operator new(v45 + 1);
      __p.__r_.__value_.__l.__size_ = v26 + v24;
      __p.__r_.__value_.__r.__words[2] = v46 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
      if (!v24)
      {
LABEL_61:
        char v30 = (char *)p_p + v24;
        if (v26)
        {
          if (v25 >= 0) {
            uint64_t v31 = &qword_25CD730;
          }
          else {
            uint64_t v31 = (uint64_t *)qword_25CD730;
          }
          memmove(v30, v31, v26);
        }
        v30[v26] = 0;
        sub_6351E8((char **)&v85, (uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        sub_6F3150(v14, (uint64_t)v80);
        sub_6F3000((char *)&__p, (long long *)v80);
        sub_635C08((uint64_t)&v85, &xmmword_25CE600, (uint64_t)&__p, 0);
        if (v79 < 0)
        {
          operator delete(v78);
          if ((v77 & 0x80000000) == 0)
          {
LABEL_70:
            if ((SHIBYTE(v75) & 0x80000000) == 0) {
              goto LABEL_71;
            }
            goto LABEL_111;
          }
        }
        else if ((v77 & 0x80000000) == 0)
        {
          goto LABEL_70;
        }
        operator delete(v76);
        if ((SHIBYTE(v75) & 0x80000000) == 0)
        {
LABEL_71:
          if ((SHIBYTE(v71) & 0x80000000) == 0) {
            goto LABEL_72;
          }
          goto LABEL_112;
        }
LABEL_111:
        operator delete(v74);
        if ((SHIBYTE(v71) & 0x80000000) == 0)
        {
LABEL_72:
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_73;
          }
          goto LABEL_113;
        }
LABEL_112:
        operator delete(v69);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_73:
          if ((v81 & 0x80000000) == 0) {
            goto LABEL_116;
          }
LABEL_114:
          BOOL v17 = v80[0];
          goto LABEL_115;
        }
LABEL_113:
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((v81 & 0x80000000) == 0) {
          goto LABEL_116;
        }
        goto LABEL_114;
      }
    }
    else
    {
      memset(&__p, 0, sizeof(__p));
      p_p = &__p;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = v26 + v24;
      if (!v24) {
        goto LABEL_61;
      }
    }
    if (v23 >= 0) {
      int v29 = &qword_25CD178;
    }
    else {
      int v29 = (uint64_t *)qword_25CD178;
    }
    memmove(p_p, v29, v24);
    goto LABEL_61;
  }
  unint64_t v4 = sub_80D48C((uint64_t)a1);
  uint64_t v5 = (const void **)v4;
  char v6 = *((unsigned char *)v4 + 23);
  if ((v6 & 0x80000000) == 0)
  {
    if (*((unsigned char *)v4 + 23)) {
      goto LABEL_6;
    }
LABEL_43:
    sub_6351E8((char **)&v85, (uint64_t)&qword_25D0240);
    goto LABEL_116;
  }
  if (!*((void *)v4 + 1)) {
    goto LABEL_43;
  }
LABEL_6:
  if (v6 >= 0) {
    size_t v7 = *((unsigned __int8 *)v4 + 23);
  }
  else {
    size_t v7 = *((void *)v4 + 1);
  }
  int v8 = byte_25CD747;
  if (byte_25CD747 >= 0) {
    size_t v9 = byte_25CD747;
  }
  else {
    size_t v9 = qword_25CD738;
  }
  unint64_t v10 = v9 + v7;
  if (v9 + v7 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v10 > 0x16)
  {
    uint64_t v21 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v21 = v10 | 7;
    }
    uint64_t v22 = v21 + 1;
    int v11 = (std::string *)operator new(v21 + 1);
    __p.__r_.__value_.__l.__size_ = v9 + v7;
    __p.__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    if (!v7) {
      goto LABEL_19;
    }
    goto LABEL_15;
  }
  memset(&__p, 0, sizeof(__p));
  int v11 = &__p;
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = v9 + v7;
  if (v7)
  {
LABEL_15:
    if (v6 >= 0) {
      unint64_t v12 = v5;
    }
    else {
      unint64_t v12 = *v5;
    }
    memmove(v11, v12, v7);
  }
LABEL_19:
  if (v9)
  {
    if (v8 >= 0) {
      uint64_t v13 = &qword_25CD730;
    }
    else {
      uint64_t v13 = (uint64_t *)qword_25CD730;
    }
    memmove((char *)v11 + v7, v13, v9);
  }
  v11->__r_.__value_.__s.__data_[v7 + v9] = 0;
  sub_6351E8((char **)&v85, (uint64_t)&__p);
LABEL_34:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v17 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_115:
    operator delete(v17);
  }
LABEL_116:
  uint64_t v65 = 0;
  int v66 = 0;
  sub_6370D4(&__p, &v85, 16, &v65);
  long long v47 = v66;
  if (v66 && !atomic_fetch_add(&v66->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
  }
  sub_8BE4C8(a2, (uint64_t)&__p, (uint64_t)v82);
  char v48 = v75;
  if (v75 && !atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
  }
  uint64_t v49 = v70;
  if (v70)
  {
    do
    {
      int64_t v50 = (void *)*v49;
      sub_4F4B48((uint64_t)(v49 + 2));
      operator delete(v49);
      uint64_t v49 = v50;
    }
    while (v50);
  }
  uint64_t v51 = v68;
  uint64_t v68 = 0;
  if (v51) {
    operator delete(v51);
  }
  std::string::size_type v52 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v53 = __p.__r_.__value_.__l.__size_;
    std::string::size_type v54 = (void *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v53 - 1) < 0) {
          operator delete(*(void **)(v53 - 24));
        }
        v53 -= 24;
      }
      while (v53 != v52);
      std::string::size_type v54 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    __p.__r_.__value_.__l.__size_ = v52;
    operator delete(v54);
  }
  int v55 = (char *)v83[0];
  if (v83[0])
  {
    do
    {
      int v63 = *(char **)v55;
      int64_t v64 = (void *)*((void *)v55 + 6);
      if (v64)
      {
        *((void *)v55 + 7) = v64;
        operator delete(v64);
      }
      if (v55[39] < 0) {
        operator delete(*((void **)v55 + 2));
      }
      operator delete(v55);
      int v55 = v63;
    }
    while (v63);
  }
  unint64_t v56 = v82[0];
  v82[0] = 0;
  if (v56) {
    operator delete(v56);
  }
  uint64_t v57 = (void *)*((void *)&v87 + 1);
  if (*((void *)&v87 + 1))
  {
    do
    {
      int v58 = (void *)*v57;
      sub_4F4B48((uint64_t)(v57 + 2));
      operator delete(v57);
      uint64_t v57 = v58;
    }
    while (v58);
  }
  std::string::size_type v59 = (void *)*((void *)&v86 + 1);
  *((void *)&v86 + 1) = 0;
  if (v59) {
    operator delete(v59);
  }
  uint64_t v60 = v85;
  if ((void)v85)
  {
    uint64_t v61 = *((void *)&v85 + 1);
    long long v62 = (void *)v85;
    if (*((void *)&v85 + 1) != (void)v85)
    {
      do
      {
        if (*(char *)(v61 - 1) < 0) {
          operator delete(*(void **)(v61 - 24));
        }
        v61 -= 24;
      }
      while (v61 != v60);
      long long v62 = (void *)v85;
    }
    *((void *)&v85 + 1) = v60;
    operator delete(v62);
  }
}

void sub_8A15F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39)
{
  sub_4A50F4((uint64_t)&a11);
  if (a38 < 0)
  {
    operator delete(__p);
    sub_592590((uint64_t)&a39);
    sub_4D4880((void **)(v39 - 160));
    _Unwind_Resume(a1);
  }
  sub_592590((uint64_t)&a39);
  sub_4D4880((void **)(v39 - 160));
  _Unwind_Resume(a1);
}

void sub_8A1700(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 56) = 1065353216;
  *(unsigned char *)(a2 + 64) = 1;
  uint64_t v4 = sub_855880((void *)(a1 + 2920), 0);
  unsigned int v5 = *(_DWORD *)(v4 + 240);
  BOOL v6 = v5 > 0x23;
  uint64_t v7 = (1 << v5) & 0x804000010;
  BOOL v8 = v6 || v7 == 0;
  size_t v9 = (uint64_t *)&xmmword_25CCFE0;
  if (v8) {
    size_t v9 = &qword_25CC6E0;
  }
  if (*((char *)v9 + 23) < 0) {
    sub_4200(&__p, (void *)*v9, v9[1]);
  }
  else {
    std::string __p = *(std::string *)v9;
  }
  sub_6351E8((char **)a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  sub_80C964(a1, a2, v4, (void *)(v4 + 152));
  sub_635CD0((long long **)a2, (uint64_t)&__p);
  if (byte_25CD747 >= 0) {
    unint64_t v10 = (const std::string::value_type *)&qword_25CD730;
  }
  else {
    unint64_t v10 = (const std::string::value_type *)qword_25CD730;
  }
  if (byte_25CD747 >= 0) {
    std::string::size_type v11 = byte_25CD747;
  }
  else {
    std::string::size_type v11 = qword_25CD738;
  }
  std::string::append(&__p, v10, v11);
  sub_6351E8((char **)a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_8A1858(_Unwind_Exception *a1)
{
  sub_4D4880(v1);
  _Unwind_Resume(a1);
}

void sub_8A186C(_Unwind_Exception *a1)
{
  sub_4D4880(v1);
  _Unwind_Resume(a1);
}

void sub_8A1880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_4D4880(v14);
    _Unwind_Resume(a1);
  }
  sub_4D4880(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_8A18BC(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 1848);
  uint64_t result = 1;
  switch(v1)
  {
    case 0:
    case 3:
    case 5:
    case 11:
    case 12:
    case 23:
    case 29:
    case 30:
    case 64:
    case 65:
    case 66:
    case 89:
    case 90:
    case 92:
      return result;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

void sub_8A1A6C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 72))(&v12);
  uint64_t v10 = 0;
  std::string::size_type v11 = 0;
  sub_6370D4(a2, &v12, 1, &v10);
  uint64_t v3 = v11;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = v15;
  if (v15)
  {
    do
    {
      unsigned int v5 = (void *)*v4;
      sub_4F4B48((uint64_t)(v4 + 2));
      operator delete(v4);
      uint64_t v4 = v5;
    }
    while (v5);
  }
  BOOL v6 = __p;
  std::string __p = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = (void **)v12;
  if (v12)
  {
    BOOL v8 = v13;
    size_t v9 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      size_t v9 = v12;
    }
    uint64_t v13 = v7;
    operator delete(v9);
  }
}

void sub_8A1B98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  _Unwind_Resume(a1);
}

void sub_8A1BB4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (byte_25CDBE0[23] < 0) {
    sub_4200(&__dst, *(void **)byte_25CDBE0, *(unint64_t *)&byte_25CDBE0[8]);
  }
  else {
    std::string __dst = *(std::string *)byte_25CDBE0;
  }
  if (sub_6F2880(a1 + 672))
  {
    if (byte_25CD63F >= 0) {
      uint64_t v4 = (const std::string::value_type *)&qword_25CD628;
    }
    else {
      uint64_t v4 = (const std::string::value_type *)qword_25CD628;
    }
    if (byte_25CD63F >= 0) {
      std::string::size_type v5 = byte_25CD63F;
    }
    else {
      std::string::size_type v5 = *(void *)&byte_25CD630;
    }
    std::string::append(&__dst, v4, v5);
    if (sub_6F2DA8(a1 + 672))
    {
      BOOL v6 = &qword_25CD688;
      goto LABEL_17;
    }
    BOOL v7 = sub_6F3124(a1 + 608);
  }
  else
  {
    BOOL v7 = sub_6F2FD8(a1 + 608);
  }
  if (!v7) {
    goto LABEL_24;
  }
  BOOL v6 = (uint64_t *)&xmmword_25CD3D0;
LABEL_17:
  int v8 = *((char *)v6 + 23);
  if (v8 >= 0) {
    size_t v9 = (const std::string::value_type *)v6;
  }
  else {
    size_t v9 = (const std::string::value_type *)*v6;
  }
  if (v8 >= 0) {
    std::string::size_type v10 = *((unsigned __int8 *)v6 + 23);
  }
  else {
    std::string::size_type v10 = v6[1];
  }
  std::string::append(&__dst, v9, v10);
LABEL_24:
  if (byte_25CD747 >= 0) {
    std::string::size_type v11 = (const std::string::value_type *)&qword_25CD730;
  }
  else {
    std::string::size_type v11 = (const std::string::value_type *)qword_25CD730;
  }
  if (byte_25CD747 >= 0) {
    std::string::size_type v12 = byte_25CD747;
  }
  else {
    std::string::size_type v12 = qword_25CD738;
  }
  std::string::append(&__dst, v11, v12);
  sub_8A1D8C(a1 + 608, 0, (uint64_t)__p);
  sub_63531C(a2, (uint64_t)&__dst, (uint64_t)__p);
  uint64_t v13 = v17;
  if (v17)
  {
    do
    {
      uint64_t v14 = (void *)*v13;
      sub_4F4B48((uint64_t)(v13 + 2));
      operator delete(v13);
      uint64_t v13 = v14;
    }
    while (v14);
  }
  std::string::size_type v15 = __p[0];
  __p[0] = 0;
  if (v15) {
    operator delete(v15);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_8A1D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_8A1D8C(uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  if (!sub_6F2FD8(a1)) {
    return;
  }
  if ((a2 & 1) == 0)
  {
    BOOL v7 = sub_6F2880(a1 + 64);
    BOOL v6 = &xmmword_25CE600;
    if (v7) {
      BOOL v6 = (long long *)&qword_25CE4F8;
    }
    if ((*((char *)v6 + 23) & 0x80000000) == 0) {
      goto LABEL_4;
    }
LABEL_8:
    sub_4200(__p, *(void **)v6, *((void *)v6 + 1));
    goto LABEL_9;
  }
  BOOL v6 = &xmmword_25CE660;
  if (byte_25CE677 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  *(_OWORD *)std::string __p = *v6;
  uint64_t v11 = *((void *)v6 + 2);
LABEL_9:
  std::string::size_type v12 = __p;
  int v8 = sub_617978(a3, (uint64_t)__p, (uint64_t)&unk_20F06E0, (long long **)&v12);
  std::string::operator=((std::string *)(v8 + 5), (const std::string *)a1);
  v8[8] = *(void *)(a1 + 24);
  std::string::operator=((std::string *)v8 + 3, (const std::string *)(a1 + 32));
  v8[12] = *(void *)(a1 + 56);
  *((_DWORD *)v8 + 26) = *(_DWORD *)(a1 + 64);
  std::string::operator=((std::string *)(v8 + 14), (const std::string *)(a1 + 72));
  std::string::operator=((std::string *)(v8 + 17), (const std::string *)(a1 + 96));
  *((_DWORD *)v8 + 40) = *(_DWORD *)(a1 + 120);
  std::string::operator=((std::string *)v8 + 7, (const std::string *)(a1 + 128));
  if (sub_6F2880(a1 + 64))
  {
    std::string::size_type v12 = (void **)&xmmword_25CE600;
    size_t v9 = sub_617978(a3, (uint64_t)&xmmword_25CE600, (uint64_t)&unk_20F06E0, (long long **)&v12);
    std::string::operator=((std::string *)(v9 + 5), (const std::string *)a1);
    v9[8] = *(void *)(a1 + 24);
    std::string::operator=((std::string *)v9 + 3, (const std::string *)(a1 + 32));
    v9[12] = *(void *)(a1 + 56);
    *((_DWORD *)v9 + 26) = *(_DWORD *)(a1 + 64);
    std::string::operator=((std::string *)(v9 + 14), (const std::string *)(a1 + 72));
    std::string::operator=((std::string *)(v9 + 17), (const std::string *)(a1 + 96));
    *((_DWORD *)v9 + 40) = *(_DWORD *)(a1 + 120);
    std::string::operator=((std::string *)v9 + 7, (const std::string *)(a1 + 128));
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
}

void sub_8A1F84(_Unwind_Exception *a1)
{
  sub_4DD068(v1);
  _Unwind_Resume(a1);
}

void sub_8A1F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_4DD068(v14);
  _Unwind_Resume(a1);
}

void sub_8A1FC0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v2 = *(void *)(a1 + 912);
  uint64_t v3 = *(void *)(a1 + 920);
  if (v2 != v3)
  {
    while (1)
    {
      sub_8A2238(v2, (uint64_t)__p);
      unint64_t v6 = *(void *)(a2 + 8);
      if (v6 >= *(void *)(a2 + 16))
      {
        *(void *)(a2 + 8) = sub_8BE7C4((void ***)a2, (uint64_t)__p);
        std::string::size_type v12 = (void **)v20;
        if (v20) {
          goto LABEL_22;
        }
        goto LABEL_16;
      }
      *(void *)(v6 + 16) = 0;
      *(_OWORD *)unint64_t v6 = 0u;
      *(_OWORD *)unint64_t v6 = *(_OWORD *)__p;
      *(void **)(v6 + 16) = v18[0];
      BOOL v7 = v18[1];
      *(_OWORD *)std::string __p = 0u;
      *(_OWORD *)uint64_t v18 = 0u;
      *(void *)(v6 + 24) = v7;
      *(void *)(v6 + 32) = v19;
      uint64_t v19 = 0;
      int v8 = v20;
      *(void *)(v6 + 40) = v20;
      uint64_t v9 = v21;
      *(void *)(v6 + 48) = v21;
      *(_DWORD *)(v6 + 56) = v22;
      if (v9)
      {
        unint64_t v10 = v8[1];
        unint64_t v11 = *(void *)(v6 + 32);
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v10 >= v11) {
            v10 %= v11;
          }
        }
        else
        {
          v10 &= v11 - 1;
        }
        v7[v10] = v6 + 40;
        unsigned __int8 v20 = 0;
        uint64_t v21 = 0;
      }
      *(unsigned char *)(v6 + 64) = v23;
      *(void *)(a2 + 8) = v6 + 72;
      std::string::size_type v12 = (void **)v20;
      if (v20) {
        break;
      }
LABEL_16:
      uint64_t v13 = v18[1];
      v18[1] = 0;
      if (v13) {
        operator delete(v13);
      }
      uint64_t v14 = (void **)__p[0];
      if (__p[0])
      {
        std::string::size_type v15 = (void **)__p[1];
        std::string::size_type v5 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            if (*((char *)v15 - 1) < 0) {
              operator delete(*(v15 - 3));
            }
            v15 -= 3;
          }
          while (v15 != v14);
          std::string::size_type v5 = __p[0];
        }
        __p[1] = v14;
        operator delete(v5);
      }
      v2 += 152;
      if (v2 == v3) {
        return;
      }
    }
    while (1)
    {
LABEL_22:
      std::string::size_type v16 = (void **)*v12;
      if (*((char *)v12 + 191) < 0)
      {
        operator delete(v12[21]);
        if ((*((char *)v12 + 159) & 0x80000000) == 0)
        {
LABEL_24:
          if ((*((char *)v12 + 135) & 0x80000000) == 0) {
            goto LABEL_25;
          }
          goto LABEL_31;
        }
      }
      else if ((*((char *)v12 + 159) & 0x80000000) == 0)
      {
        goto LABEL_24;
      }
      operator delete(v12[17]);
      if ((*((char *)v12 + 135) & 0x80000000) == 0)
      {
LABEL_25:
        if ((*((char *)v12 + 95) & 0x80000000) == 0) {
          goto LABEL_26;
        }
        goto LABEL_32;
      }
LABEL_31:
      operator delete(v12[14]);
      if ((*((char *)v12 + 95) & 0x80000000) == 0)
      {
LABEL_26:
        if ((*((char *)v12 + 63) & 0x80000000) == 0) {
          goto LABEL_27;
        }
        goto LABEL_33;
      }
LABEL_32:
      operator delete(v12[9]);
      if ((*((char *)v12 + 63) & 0x80000000) == 0)
      {
LABEL_27:
        if (*((char *)v12 + 39) < 0) {
          goto LABEL_34;
        }
        goto LABEL_21;
      }
LABEL_33:
      operator delete(v12[5]);
      if (*((char *)v12 + 39) < 0) {
LABEL_34:
      }
        operator delete(v12[2]);
LABEL_21:
      operator delete(v12);
      std::string::size_type v12 = v16;
      if (!v16) {
        goto LABEL_16;
      }
    }
  }
}

void sub_8A2208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_4D4880(&a9);
  sub_84F7EC(v9);
  _Unwind_Resume(a1);
}

void sub_8A2224(_Unwind_Exception *a1)
{
  sub_84F7EC(v1);
  _Unwind_Resume(a1);
}

void sub_8A2238(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (byte_25CDB98[23] < 0) {
    sub_4200(&__dst, *(void **)byte_25CDB98, *(unint64_t *)&byte_25CDB98[8]);
  }
  else {
    std::string __dst = *(std::string *)byte_25CDB98;
  }
  if (sub_6F2880(a1 + 64))
  {
    if (byte_25CD63F >= 0) {
      uint64_t v4 = (const std::string::value_type *)&qword_25CD628;
    }
    else {
      uint64_t v4 = (const std::string::value_type *)qword_25CD628;
    }
    if (byte_25CD63F >= 0) {
      std::string::size_type v5 = byte_25CD63F;
    }
    else {
      std::string::size_type v5 = *(void *)&byte_25CD630;
    }
    std::string::append(&__dst, v4, v5);
    if (sub_6F2DA8(a1 + 64))
    {
      unint64_t v6 = &qword_25CD688;
      goto LABEL_17;
    }
    BOOL v7 = sub_6F3124(a1);
  }
  else
  {
    BOOL v7 = sub_6F2FD8(a1);
  }
  if (!v7) {
    goto LABEL_24;
  }
  unint64_t v6 = (uint64_t *)&xmmword_25CD3D0;
LABEL_17:
  int v8 = *((char *)v6 + 23);
  if (v8 >= 0) {
    uint64_t v9 = (const std::string::value_type *)v6;
  }
  else {
    uint64_t v9 = (const std::string::value_type *)*v6;
  }
  if (v8 >= 0) {
    std::string::size_type v10 = *((unsigned __int8 *)v6 + 23);
  }
  else {
    std::string::size_type v10 = v6[1];
  }
  std::string::append(&__dst, v9, v10);
LABEL_24:
  if (byte_25CD747 >= 0) {
    unint64_t v11 = (const std::string::value_type *)&qword_25CD730;
  }
  else {
    unint64_t v11 = (const std::string::value_type *)qword_25CD730;
  }
  if (byte_25CD747 >= 0) {
    std::string::size_type v12 = byte_25CD747;
  }
  else {
    std::string::size_type v12 = qword_25CD738;
  }
  std::string::append(&__dst, v11, v12);
  sub_8A1D8C(a1, 0, (uint64_t)__p);
  sub_63531C(a2, (uint64_t)&__dst, (uint64_t)__p);
  uint64_t v13 = v17;
  if (v17)
  {
    do
    {
      uint64_t v14 = (void *)*v13;
      sub_4F4B48((uint64_t)(v13 + 2));
      operator delete(v13);
      uint64_t v13 = v14;
    }
    while (v14);
  }
  std::string::size_type v15 = __p[0];
  __p[0] = 0;
  if (v15) {
    operator delete(v15);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_8A23E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_8A2410(uint64_t a1@<X8>)
{
  sub_6F30A4((uint64_t)v2);
  sub_8A2238((uint64_t)v2, a1);
  if (v11 < 0)
  {
    operator delete(__p);
    if ((v9 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((v9 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v8);
  if ((v7 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(v6);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v3 & 0x80000000) == 0) {
      return;
    }
LABEL_11:
    operator delete(v2[0]);
    return;
  }
LABEL_10:
  operator delete(v4);
  if (v3 < 0) {
    goto LABEL_11;
  }
}

void sub_8A24D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4A50F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_8A24E8(std::string *a1@<X0>, uint64_t a2@<X8>)
{
  sub_8A28A8(a1, (uint64_t)&__s1);
  size_t v4 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  size_t size = __s1.__r_.__value_.__l.__size_;
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v6 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v6 = __s1.__r_.__value_.__l.__size_;
  }
  uint64_t v7 = byte_25CFDA7;
  char v8 = byte_25CFDA7;
  uint64_t v9 = *((void *)&xmmword_25CFD90 + 1);
  if (byte_25CFDA7 >= 0) {
    uint64_t v10 = byte_25CFDA7;
  }
  else {
    uint64_t v10 = *((void *)&xmmword_25CFD90 + 1);
  }
  if (v6 != v10) {
    goto LABEL_19;
  }
  if (byte_25CFDA7 >= 0) {
    char v11 = &xmmword_25CFD90;
  }
  else {
    char v11 = (long long *)xmmword_25CFD90;
  }
  if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(__s1.__r_.__value_.__l.__data_, v11, __s1.__r_.__value_.__l.__size_)) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23))
  {
LABEL_18:
    sub_80D110(a1, &__s1);
    size_t v4 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    size_t size = __s1.__r_.__value_.__l.__size_;
    uint64_t v7 = byte_25CFDA7;
    uint64_t v9 = *((void *)&xmmword_25CFD90 + 1);
    char v8 = byte_25CFDA7;
    goto LABEL_19;
  }
  p_s1 = &__s1;
  uint64_t v13 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v11)
  {
    p_s1 = (std::string *)((char *)p_s1 + 1);
    char v11 = (long long *)((char *)v11 + 1);
    if (!--v13) {
      goto LABEL_18;
    }
  }
LABEL_19:
  if ((v4 & 0x80u) == 0) {
    size_t v14 = v4;
  }
  else {
    size_t v14 = size;
  }
  if (v8 >= 0) {
    uint64_t v15 = v7;
  }
  else {
    uint64_t v15 = v9;
  }
  if (v14 == v15)
  {
    if (v8 >= 0) {
      std::string::size_type v16 = &xmmword_25CFD90;
    }
    else {
      std::string::size_type v16 = (long long *)xmmword_25CFD90;
    }
    if ((v4 & 0x80) != 0)
    {
      if (!memcmp(__s1.__r_.__value_.__l.__data_, v16, size)) {
        goto LABEL_43;
      }
    }
    else
    {
      if (!v4) {
        goto LABEL_43;
      }
      BOOL v17 = &__s1;
      while (v17->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v16)
      {
        BOOL v17 = (std::string *)((char *)v17 + 1);
        std::string::size_type v16 = (long long *)((char *)v16 + 1);
        if (!--v4) {
          goto LABEL_43;
        }
      }
    }
  }
  if (byte_25CD747 >= 0) {
    uint64_t v18 = (const std::string::value_type *)&qword_25CD730;
  }
  else {
    uint64_t v18 = (const std::string::value_type *)qword_25CD730;
  }
  if (byte_25CD747 >= 0) {
    std::string::size_type v19 = byte_25CD747;
  }
  else {
    std::string::size_type v19 = qword_25CD738;
  }
  std::string::append(&__s1, v18, v19);
LABEL_43:
  int v20 = byte_25CFD8F;
  if (byte_25CFD8F >= 0) {
    size_t v21 = byte_25CFD8F;
  }
  else {
    size_t v21 = *((void *)&xmmword_25CFD78 + 1);
  }
  int v22 = byte_25CD747;
  if (byte_25CD747 >= 0) {
    size_t v23 = byte_25CD747;
  }
  else {
    size_t v23 = qword_25CD738;
  }
  unint64_t v24 = v23 + v21;
  if (v23 + v21 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v24 <= 0x16)
  {
    size_t v48 = 0;
    int64_t v49 = 0;
    std::string __p = 0;
    p_p = (char *)&__p;
    HIBYTE(v49) = v23 + v21;
    if (!v21) {
      goto LABEL_56;
    }
    goto LABEL_52;
  }
  uint64_t v42 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v24 | 7) != 0x17) {
    uint64_t v42 = v24 | 7;
  }
  uint64_t v43 = v42 + 1;
  p_p = (char *)operator new(v42 + 1);
  size_t v48 = v23 + v21;
  int64_t v49 = v43 | 0x8000000000000000;
  std::string __p = p_p;
  if (v21)
  {
LABEL_52:
    if (v20 >= 0) {
      size_t v26 = &xmmword_25CFD78;
    }
    else {
      size_t v26 = (long long *)xmmword_25CFD78;
    }
    memmove(p_p, v26, v21);
  }
LABEL_56:
  unint64_t v27 = &p_p[v21];
  if (v23)
  {
    if (v22 >= 0) {
      uint64_t v28 = &qword_25CD730;
    }
    else {
      uint64_t v28 = (uint64_t *)qword_25CD730;
    }
    memmove(v27, v28, v23);
  }
  BOOL v29 = 0;
  v27[v23] = 0;
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v30 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v30 = __s1.__r_.__value_.__l.__size_;
  }
  size_t v31 = HIBYTE(v49);
  int v32 = SHIBYTE(v49);
  if (v49 < 0) {
    size_t v31 = v48;
  }
  if (v30 != v31)
  {
LABEL_84:
    if ((v32 & 0x80000000) == 0) {
      goto LABEL_85;
    }
    goto LABEL_88;
  }
  if (v49 >= 0) {
    uint64_t v33 = (unsigned __int8 *)&__p;
  }
  else {
    uint64_t v33 = (unsigned __int8 *)__p;
  }
  if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    BOOL v29 = memcmp(__s1.__r_.__value_.__l.__data_, v33, __s1.__r_.__value_.__l.__size_) == 0;
    goto LABEL_84;
  }
  if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
  {
    uint64_t v34 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
    uint64_t v35 = &__s1;
    do
    {
      int v37 = v35->__r_.__value_.__s.__data_[0];
      uint64_t v35 = (std::string *)((char *)v35 + 1);
      int v36 = v37;
      int v39 = *v33++;
      int v38 = v39;
      BOOL v41 = v34-- != 0;
      BOOL v29 = v36 == v38;
    }
    while (v36 == v38 && v41);
    goto LABEL_84;
  }
  BOOL v29 = 1;
  if ((SHIBYTE(v49) & 0x80000000) == 0)
  {
LABEL_85:
    if (!v29) {
      goto LABEL_96;
    }
    goto LABEL_89;
  }
LABEL_88:
  operator delete(__p);
  if (!v29) {
    goto LABEL_96;
  }
LABEL_89:
  if (byte_25CD867 >= 0) {
    std::string::size_type v44 = (const std::string::value_type *)&qword_25CD850;
  }
  else {
    std::string::size_type v44 = (const std::string::value_type *)qword_25CD850;
  }
  if (byte_25CD867 >= 0) {
    std::string::size_type v45 = byte_25CD867;
  }
  else {
    std::string::size_type v45 = unk_25CD858;
  }
  std::string::append(&__s1, v44, v45);
LABEL_96:
  uint64_t v46 = sub_5231C((uint64_t)&a1->__r_.__value_.__l.__size_);
  sub_63531C(a2, (uint64_t)&__s1, v46);
  sub_807910((uint64_t)a1, a2);
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
}

void sub_8A2878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_4D4880(v17);
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_8A28A8(std::string *a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(std::string *))(a1->__r_.__value_.__r.__words[0] + 112))(a1);
  if (!a1[119].__r_.__value_.__s.__data_[22]) {
    return;
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v33 = 0;
  uint64_t v4 = (*(uint64_t (**)(std::string *))(a1->__r_.__value_.__r.__words[0] + 136))(a1);
  (*(void (**)(void **__return_ptr, std::string *, uint64_t))(a1->__r_.__value_.__r.__words[0] + 48))(v30, a1, v4);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v33 = v31;
  *(_OWORD *)std::string __p = *(_OWORD *)v30;
  std::string::size_type v5 = HIBYTE(v31);
  char v6 = HIBYTE(v31);
  uint64_t v7 = v30[1];
  if (v31 >= 0) {
    char v8 = (void *)HIBYTE(v31);
  }
  else {
    char v8 = v30[1];
  }
  BOOL v9 = v8 != 0;
  uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a2 + 8);
  }
  if (v10 && v8)
  {
    if (byte_25CD87F >= 0) {
      char v11 = (const std::string::value_type *)&qword_25CD868;
    }
    else {
      char v11 = (const std::string::value_type *)qword_25CD868;
    }
    if (byte_25CD87F >= 0) {
      std::string::size_type v12 = byte_25CD87F;
    }
    else {
      std::string::size_type v12 = unk_25CD870;
    }
    std::string::append((std::string *)a2, v11, v12);
    std::string::size_type v5 = HIBYTE(v33);
    uint64_t v7 = __p[1];
    char v6 = HIBYTE(v33);
  }
  if (v6 >= 0) {
    uint64_t v13 = __p;
  }
  else {
    uint64_t v13 = (void **)__p[0];
  }
  if (v6 >= 0) {
    std::string::size_type v14 = v5;
  }
  else {
    std::string::size_type v14 = (std::string::size_type)v7;
  }
  std::string::append((std::string *)a2, (const std::string::value_type *)v13, v14);
  int v15 = (*(uint64_t (**)(std::string *))(a1->__r_.__value_.__r.__words[0] + 136))(a1);
  if (std::string::find((const std::string *)a2, 50, 0) != -1)
  {
    LODWORD(v16) = *(char *)(a2 + 23);
    if ((v16 & 0x80000000) != 0)
    {
      if (*(void *)(a2 + 8) != 15) {
        goto LABEL_60;
      }
      BOOL v17 = *(uint64_t **)a2;
    }
    else
    {
      BOOL v17 = (uint64_t *)a2;
      if (v16 != 15)
      {
LABEL_57:
        if (!(_BYTE)v16) {
          goto LABEL_61;
        }
        goto LABEL_70;
      }
    }
    uint64_t v18 = *v17;
    uint64_t v19 = *(uint64_t *)((char *)v17 + 7);
    if (v18 != 0x5F31646C65696853 || v19 != 0x32646C656968535FLL) {
      goto LABEL_56;
    }
  }
  if ((!sub_7FA904((uint64_t)a1) | v15 & v9)) {
    goto LABEL_56;
  }
  uint64_t v21 = (*(uint64_t (**)(std::string *, uint64_t))(a1->__r_.__value_.__r.__words[0] + 56))(a1, a2);
  (*(void (**)(void **__return_ptr, std::string *, uint64_t))(a1->__r_.__value_.__r.__words[0] + 64))(v30, a1, v21);
  uint64_t v22 = *(unsigned __int8 *)(a2 + 23);
  if ((v22 & 0x80u) != 0) {
    uint64_t v22 = *(void *)(a2 + 8);
  }
  if (v22)
  {
    size_t v23 = (void *)HIBYTE(v31);
    if (v31 < 0) {
      size_t v23 = v30[1];
    }
    if (v23)
    {
      if (byte_25CD87F >= 0) {
        unint64_t v24 = (const std::string::value_type *)&qword_25CD868;
      }
      else {
        unint64_t v24 = (const std::string::value_type *)qword_25CD868;
      }
      if (byte_25CD87F >= 0) {
        std::string::size_type v25 = byte_25CD87F;
      }
      else {
        std::string::size_type v25 = unk_25CD870;
      }
      std::string::append((std::string *)a2, v24, v25);
    }
  }
  size_t v26 = v31 >= 0 ? (const std::string::value_type *)v30 : (const std::string::value_type *)v30[0];
  unint64_t v27 = v31 >= 0 ? (void *)HIBYTE(v31) : v30[1];
  std::string::append((std::string *)a2, v26, (std::string::size_type)v27);
  if (SHIBYTE(v31) < 0)
  {
    operator delete(v30[0]);
    LODWORD(v16) = *(char *)(a2 + 23);
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_57;
    }
  }
  else
  {
LABEL_56:
    LODWORD(v16) = *(char *)(a2 + 23);
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_57;
    }
  }
LABEL_60:
  if (!*(void *)(a2 + 8))
  {
LABEL_61:
    if (a1[77].__r_.__value_.__s.__data_[13] && a1[77].__r_.__value_.__s.__data_[8])
    {
      if (byte_25CD36F >= 0) {
        uint64_t v28 = (const std::string::value_type *)&qword_25CD358;
      }
      else {
        uint64_t v28 = (const std::string::value_type *)qword_25CD358;
      }
      if (byte_25CD36F >= 0) {
        std::string::size_type v29 = byte_25CD36F;
      }
      else {
        std::string::size_type v29 = unk_25CD360;
      }
      std::string::append((std::string *)a2, v28, v29);
      LOBYTE(v16) = *(unsigned char *)(a2 + 23);
    }
  }
LABEL_70:
  uint64_t v16 = v16;
  if ((v16 & 0x80u) != 0) {
    uint64_t v16 = *(void *)(a2 + 8);
  }
  if (!v16)
  {
    sub_80807C((uint64_t)a1, (uint64_t)v30);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(_OWORD *)a2 = *(_OWORD *)v30;
    *(void *)(a2 + 16) = v31;
  }
  sub_80CFDC(a1, (std::string *)a2);
  sub_7FFAC0(a1, (std::string *)a2);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p[0]);
  }
}

void sub_8A2C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if (*(char *)(v21 + 23) < 0)
    {
LABEL_6:
      operator delete(*(void **)v21);
      _Unwind_Resume(exception_object);
    }
  }
  else if (*(char *)(v21 + 23) < 0)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(exception_object);
}

void sub_8A2D14(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 72))(&v24);
  if (*(unsigned char *)(a2 + 180))
  {
    char v19 = 14;
    strcpy(__p, "Next_Exit_Sign");
    sub_6352AC((uint64_t)&v20, (uint64_t)__p);
  }
  else if (*(unsigned char *)(a2 + 181))
  {
    char v19 = 16;
    strcpy(__p, "Next_U_Turn_Sign");
    sub_6352AC((uint64_t)&v20, (uint64_t)__p);
  }
  else
  {
    switch(a1[462])
    {
      case 2:
      case 0x15:
      case 0x1C:
      case 0x1E:
      case 0x22:
      case 0x3D:
      case 0x3F:
      case 0x42:
        char v19 = 15;
        strcpy(__p, "Next_Right_Sign");
        sub_6352AC((uint64_t)&v20, (uint64_t)__p);
        break;
      default:
        char v19 = 14;
        strcpy(__p, "Next_Left_Sign");
        sub_6352AC((uint64_t)&v20, (uint64_t)__p);
        break;
    }
  }
  if (v19 < 0) {
    operator delete(*(void **)__p);
  }
  sub_6376A0(a3, &v24, 15, &v20, 1);
  char v6 = v23;
  if (v23)
  {
    do
    {
      uint64_t v7 = (void *)*v6;
      sub_4F4B48((uint64_t)(v6 + 2));
      operator delete(v6);
      char v6 = v7;
    }
    while (v7);
  }
  char v8 = v22;
  uint64_t v22 = 0;
  if (v8) {
    operator delete(v8);
  }
  BOOL v9 = (void **)v20;
  if (v20)
  {
    uint64_t v10 = v21;
    char v11 = v20;
    if (v21 != v20)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      char v11 = v20;
    }
    uint64_t v21 = v9;
    operator delete(v11);
  }
  std::string::size_type v12 = v27;
  if (v27)
  {
    do
    {
      uint64_t v13 = (void *)*v12;
      sub_4F4B48((uint64_t)(v12 + 2));
      operator delete(v12);
      std::string::size_type v12 = v13;
    }
    while (v13);
  }
  std::string::size_type v14 = v26;
  size_t v26 = 0;
  if (v14) {
    operator delete(v14);
  }
  int v15 = (void **)v24;
  if (v24)
  {
    uint64_t v16 = v25;
    BOOL v17 = v24;
    if (v25 != v24)
    {
      do
      {
        if (*((char *)v16 - 1) < 0) {
          operator delete(*(v16 - 3));
        }
        v16 -= 3;
      }
      while (v16 != v15);
      BOOL v17 = v24;
    }
    std::string::size_type v25 = v15;
    operator delete(v17);
  }
}

void sub_8A2F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_4D4880(&a25);
    _Unwind_Resume(a1);
  }
  sub_4D4880(&a25);
  _Unwind_Resume(a1);
}

void sub_8A30E8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = 267;
  if (!*(unsigned char *)(a1 + 1946)) {
    uint64_t v5 = 264;
  }
  char v6 = &dword_25CFDC0;
  if (!*(unsigned char *)(a1 + 1946)) {
    char v6 = &dword_25CFDA8;
  }
  uint64_t v7 = &byte_25CFDD7;
  if (!*(unsigned char *)(a1 + 1946)) {
    uint64_t v7 = &byte_25CFDBF;
  }
  if (*v7 < 0)
  {
    if (*(unsigned char *)(a1 + 1946)) {
      char v8 = (unint64_t *)&unk_25CFDC8;
    }
    else {
      char v8 = (unint64_t *)&unk_25CFDB0;
    }
    sub_4200(&v39, (void *)qword_25CF568[v5], *v8);
  }
  else
  {
    long long v39 = *(_OWORD *)v6;
    uint64_t v40 = *((void *)v6 + 2);
  }
  int v9 = SHIBYTE(v40);
  if (v40 >= 0) {
    size_t v10 = HIBYTE(v40);
  }
  else {
    size_t v10 = *((void *)&v39 + 1);
  }
  int v11 = byte_25CD747;
  if (byte_25CD747 >= 0) {
    size_t v12 = byte_25CD747;
  }
  else {
    size_t v12 = qword_25CD738;
  }
  unint64_t v13 = v12 + v10;
  if (v12 + v10 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v13 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v12 + v10;
    if (!v10) {
      goto LABEL_26;
    }
    goto LABEL_22;
  }
  uint64_t v30 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v13 | 7) != 0x17) {
    uint64_t v30 = v13 | 7;
  }
  uint64_t v31 = v30 + 1;
  p_dst = (std::string *)operator new(v30 + 1);
  __dst.__r_.__value_.__l.__size_ = v12 + v10;
  __dst.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v10)
  {
LABEL_22:
    if (v9 >= 0) {
      int v15 = &v39;
    }
    else {
      int v15 = (long long *)v39;
    }
    memmove(p_dst, v15, v10);
  }
LABEL_26:
  uint64_t v16 = (char *)p_dst + v10;
  if (v12)
  {
    if (v11 >= 0) {
      BOOL v17 = &qword_25CD730;
    }
    else {
      BOOL v17 = (uint64_t *)qword_25CD730;
    }
    memmove(v16, v17, v12);
  }
  v16[v12] = 0;
  if (byte_25CD867 >= 0) {
    uint64_t v18 = (const std::string::value_type *)&qword_25CD850;
  }
  else {
    uint64_t v18 = (const std::string::value_type *)qword_25CD850;
  }
  if (byte_25CD867 >= 0) {
    std::string::size_type v19 = byte_25CD867;
  }
  else {
    std::string::size_type v19 = unk_25CD858;
  }
  int v20 = std::string::append(&__dst, v18, v19);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  std::string::size_type v38 = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)int v37 = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  sub_6352AC((uint64_t)&__dst, (uint64_t)v37);
  uint64_t v22 = (std::__shared_weak_count *)operator new(0x80uLL);
  v22->__shared_owners_ = 0;
  v22->__shared_weak_owners_ = 0;
  v22->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
  sub_63D394((uint64_t)&v41, (uint64_t)&v22[1], a2);
  int v32 = &v22[1].__vftable;
  uint64_t v33 = v22;
  sub_6370D4(a3, &__dst, 10, &v32);
  size_t v23 = v33;
  if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  unint64_t v24 = v36;
  if (v36)
  {
    do
    {
      std::string::size_type v25 = (void *)*v24;
      sub_4F4B48((uint64_t)(v24 + 2));
      operator delete(v24);
      unint64_t v24 = v25;
    }
    while (v25);
  }
  size_t v26 = __p;
  std::string __p = 0;
  if (v26) {
    operator delete(v26);
  }
  std::string::size_type v27 = __dst.__r_.__value_.__r.__words[0];
  if (__dst.__r_.__value_.__r.__words[0])
  {
    std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    std::string::size_type v29 = (void *)__dst.__r_.__value_.__r.__words[0];
    if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(size - 1) < 0) {
          operator delete(*(void **)(size - 24));
        }
        size -= 24;
      }
      while (size != v27);
      std::string::size_type v29 = (void *)__dst.__r_.__value_.__r.__words[0];
    }
    __dst.__r_.__value_.__l.__size_ = v27;
    operator delete(v29);
  }
  if ((SHIBYTE(v38) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v40) & 0x80000000) == 0) {
      return;
    }
LABEL_62:
    operator delete((void *)v39);
    return;
  }
  operator delete(v37[0]);
  if (SHIBYTE(v40) < 0) {
    goto LABEL_62;
  }
}

void sub_8A3434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_14A84((uint64_t)&a10);
  sub_4D4880((void **)&a12);
  if (a29 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v29 - 89) < 0) {
    operator delete(*(void **)(v29 - 112));
  }
  _Unwind_Resume(a1);
}

void sub_8A34B0(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_8A384C(a1, a2, a3, (uint64_t)&v40);
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  sub_6370D4(&v31, &v40, 1, &v29);
  char v8 = v30;
  if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = *(void *)(a1 + 1952);
  uint64_t v10 = *(void *)(a1 + 1960);
  int v11 = *(_DWORD *)(a1 + 2128);
  size_t v12 = (std::__shared_weak_count *)operator new(0xB98uLL);
  v12->__shared_owners_ = 0;
  p_shared_owners = &v12->__shared_owners_;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)off_243AE28;
  std::string::size_type v14 = sub_89F8D4((std::string::size_type)&v12[1], v9, v10, a2, a3, v11 - 1);
  if (BYTE4(v12[120].__shared_weak_owners_))
  {
    sub_8A30E8(v14, (uint64_t)&v31, a4);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_6;
    }
  }
  else
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    sub_8A6F8((char *)a4, (uint64_t)v31, (uint64_t)v32, 0xAAAAAAAAAAAAAAABLL * (((char *)v32 - (unsigned char *)v31) >> 3));
    sub_5954B0(a4 + 24, (uint64_t)&__p);
    *(unsigned char *)(a4 + 64) = v35;
    *(_DWORD *)(a4 + 72) = v36;
    uint64_t v16 = v38;
    *(void *)(a4 + 80) = v37;
    *(void *)(a4 + 88) = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(_WORD *)(a4 + 96) = v39;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_6:
      int v15 = v38;
      if (!v38) {
        goto LABEL_14;
      }
      goto LABEL_12;
    }
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  int v15 = v38;
  if (!v38) {
    goto LABEL_14;
  }
LABEL_12:
  if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
LABEL_14:
  BOOL v17 = v34;
  if (v34)
  {
    do
    {
      uint64_t v18 = (void *)*v17;
      sub_4F4B48((uint64_t)(v17 + 2));
      operator delete(v17);
      BOOL v17 = v18;
    }
    while (v18);
  }
  std::string::size_type v19 = __p;
  std::string __p = 0;
  if (v19) {
    operator delete(v19);
  }
  int v20 = (void **)v31;
  if (v31)
  {
    long long v21 = v32;
    uint64_t v22 = v31;
    if (v32 != v31)
    {
      do
      {
        if (*((char *)v21 - 1) < 0) {
          operator delete(*(v21 - 3));
        }
        v21 -= 3;
      }
      while (v21 != v20);
      uint64_t v22 = v31;
    }
    int v32 = v20;
    operator delete(v22);
  }
  size_t v23 = v43;
  if (v43)
  {
    do
    {
      unint64_t v24 = (void *)*v23;
      sub_4F4B48((uint64_t)(v23 + 2));
      operator delete(v23);
      size_t v23 = v24;
    }
    while (v24);
  }
  std::string::size_type v25 = v42;
  uint64_t v42 = 0;
  if (v25) {
    operator delete(v25);
  }
  size_t v26 = (void **)v40;
  if (v40)
  {
    std::string::size_type v27 = v41;
    uint64_t v28 = v40;
    if (v41 != v40)
    {
      do
      {
        if (*((char *)v27 - 1) < 0) {
          operator delete(*(v27 - 3));
        }
        v27 -= 3;
      }
      while (v27 != v26);
      uint64_t v28 = v40;
    }
    char v41 = v26;
    operator delete(v28);
  }
}

void sub_8A37D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  if (*v26) {
    sub_20AAD1C((uint64_t)v26, *v26);
  }
  sub_14A84((uint64_t)&a9);
  sub_4F31D0(&a13);
  sub_4D4880(&a26);
  _Unwind_Resume(a1);
}

void sub_8A3830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
}

void sub_8A384C(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a2 + 1064);
  uint64_t v9 = *(void *)(a1 + 1952);
  uint64_t v10 = *(void *)(a1 + 1960);
  int v11 = *(_DWORD *)(a1 + 2128) - 1;
  size_t v12 = (std::__shared_weak_count *)operator new(0xB98uLL);
  v12->__shared_owners_ = 0;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)off_243AE28;
  uint64_t v13 = (uint64_t)&v12[1];
  sub_89F8D4((std::string::size_type)&v12[1], v9, v10, a2, a3, v11);
  uint64_t v68 = &v12[1].__vftable;
  long long v69 = v12;
  if (*(unsigned char *)(a1 + 2879))
  {
    if (*(unsigned char *)(v8 + 2400 * a3 + 320))
    {
      int v14 = byte_25CFFB8[23];
      if (byte_25CFFB8[23] >= 0) {
        size_t v15 = byte_25CFFB8[23];
      }
      else {
        size_t v15 = *(void *)&byte_25CFFB8[8];
      }
      int v16 = byte_25CFE07;
      if (byte_25CFE07 >= 0) {
        size_t v17 = byte_25CFE07;
      }
      else {
        size_t v17 = qword_25CFDF8;
      }
      unint64_t v18 = v17 + v15;
      if (v17 + v15 >= 0x7FFFFFFFFFFFFFF8) {
        sub_188D690();
      }
      if (v18 > 0x16)
      {
        uint64_t v54 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v18 | 7) != 0x17) {
          uint64_t v54 = v18 | 7;
        }
        uint64_t v55 = v54 + 1;
        p_dst = (std::string *)operator new(v54 + 1);
        __dst.__r_.__value_.__l.__size_ = v17 + v15;
        __dst.__r_.__value_.__r.__words[2] = v55 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        if (!v15)
        {
LABEL_16:
          long long v21 = (char *)p_dst + v15;
          if (v17)
          {
            if (v16 >= 0) {
              uint64_t v22 = &qword_25CFDF0;
            }
            else {
              uint64_t v22 = (uint64_t *)qword_25CFDF0;
            }
            memmove(v21, v22, v17);
          }
          v21[v17] = 0;
          if (byte_25CD75F >= 0) {
            size_t v23 = (const std::string::value_type *)&qword_25CD748;
          }
          else {
            size_t v23 = (const std::string::value_type *)qword_25CD748;
          }
          if (byte_25CD75F >= 0) {
            std::string::size_type v24 = byte_25CD75F;
          }
          else {
            std::string::size_type v24 = qword_25CD750;
          }
          std::string::size_type v25 = std::string::append(&__dst, v23, v24);
          long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
          std::string::size_type v65 = v25->__r_.__value_.__r.__words[2];
          *(_OWORD *)int64_t v64 = v26;
          v25->__r_.__value_.__l.__size_ = 0;
          v25->__r_.__value_.__r.__words[2] = 0;
          v25->__r_.__value_.__r.__words[0] = 0;
          sub_6352AC(a4, (uint64_t)v64);
          if (SHIBYTE(v65) < 0)
          {
            operator delete(v64[0]);
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_92;
            }
          }
          else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_92;
          }
          operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_92:
          if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
          return;
        }
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
        p_dst = &__dst;
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v17 + v15;
        if (!v15) {
          goto LABEL_16;
        }
      }
      if (v14 >= 0) {
        int v20 = byte_25CFFB8;
      }
      else {
        int v20 = *(char **)byte_25CFFB8;
      }
      memmove(p_dst, v20, v15);
      goto LABEL_16;
    }
    BYTE3(v12[120].__shared_weak_owners_) = 0;
    BYTE5(v12[120].__shared_weak_owners_) = 0;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 72))(v64, a1);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v13 + 72))(&__dst, v13);
  if (sub_636C3C(v64, &__dst))
  {
    sub_80807C(v13, (uint64_t)&v56);
    if (byte_25CD747 >= 0) {
      std::string::size_type v27 = (const std::string::value_type *)&qword_25CD730;
    }
    else {
      std::string::size_type v27 = (const std::string::value_type *)qword_25CD730;
    }
    if (byte_25CD747 >= 0) {
      std::string::size_type v28 = byte_25CD747;
    }
    else {
      std::string::size_type v28 = qword_25CD738;
    }
    uint64_t v29 = std::string::append(&v56, v27, v28);
    sub_6352AC(a4, (uint64_t)v29);
    if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_39;
    }
LABEL_99:
    operator delete(v56.__r_.__value_.__l.__data_);
    uint64_t v30 = v60;
    if (!v60) {
      goto LABEL_41;
    }
    goto LABEL_40;
  }
  sub_635CD0((long long **)&__dst, (uint64_t)&v56);
  if (sub_893960(a1, (char *)&v56))
  {
    uint64_t v36 = byte_25CD747;
    if (byte_25CD747 < 0) {
      uint64_t v36 = qword_25CD738;
    }
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v37 = &v56;
    }
    else {
      uint64_t v37 = (std::string *)v56.__r_.__value_.__r.__words[0];
    }
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v56.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v56.__r_.__value_.__l.__size_;
    }
    __int16 v39 = (char *)v37 + size;
    uint64_t v40 = (char *)&v56 + HIBYTE(v56.__r_.__value_.__r.__words[2]);
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v40 = (char *)(v56.__r_.__value_.__r.__words[0] + v56.__r_.__value_.__l.__size_);
    }
    if (byte_25CD75F >= 0) {
      char v41 = (const std::string::value_type *)&qword_25CD748;
    }
    else {
      char v41 = (const std::string::value_type *)qword_25CD748;
    }
    if (byte_25CD75F >= 0) {
      std::string::size_type v42 = byte_25CD75F;
    }
    else {
      std::string::size_type v42 = qword_25CD750;
    }
    std::string::replace(&v56, &v39[-v36] - (char *)v37, v40 - &v39[-v36], v41, v42);
    sub_6351E8(&__dst.__r_.__value_.__l.__data_, (uint64_t)&v56);
  }
  *(_OWORD *)a4 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  memset(&__dst, 0, sizeof(__dst));
  uint64_t v43 = __p;
  unint64_t v44 = v59;
  std::string::size_type v45 = v60;
  std::string __p = 0;
  unint64_t v59 = 0;
  *(void *)(a4 + 16) = *((void *)&__dst.__r_.__value_.__l + 2);
  *(void *)(a4 + 24) = v43;
  *(void *)(a4 + 32) = v44;
  *(void *)(a4 + 40) = v45;
  uint64_t v46 = v61;
  *(void *)(a4 + 48) = v61;
  *(_DWORD *)(a4 + 56) = v62;
  if (v46)
  {
    unint64_t v47 = v45[1];
    if ((v44 & (v44 - 1)) != 0)
    {
      if (v47 >= v44) {
        v47 %= v44;
      }
    }
    else
    {
      v47 &= v44 - 1;
    }
    v43[v47] = a4 + 40;
    uint64_t v60 = 0;
    uint64_t v61 = 0;
  }
  *(unsigned char *)(a4 + 64) = v63;
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_99;
  }
LABEL_39:
  uint64_t v30 = v60;
  if (!v60) {
    goto LABEL_41;
  }
  do
  {
LABEL_40:
    uint64_t v31 = (void *)*v30;
    sub_4F4B48((uint64_t)(v30 + 2));
    operator delete(v30);
    uint64_t v30 = v31;
  }
  while (v31);
LABEL_41:
  int v32 = __p;
  std::string __p = 0;
  if (v32) {
    operator delete(v32);
  }
  std::string::size_type v33 = __dst.__r_.__value_.__r.__words[0];
  if (__dst.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v34 = __dst.__r_.__value_.__l.__size_;
    char v35 = (void *)__dst.__r_.__value_.__r.__words[0];
    if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v34 - 1) < 0) {
          operator delete(*(void **)(v34 - 24));
        }
        v34 -= 24;
      }
      while (v34 != v33);
      char v35 = (void *)__dst.__r_.__value_.__r.__words[0];
    }
    __dst.__r_.__value_.__l.__size_ = v33;
    operator delete(v35);
  }
  size_t v48 = v67;
  if (v67)
  {
    do
    {
      int64_t v49 = (void *)*v48;
      sub_4F4B48((uint64_t)(v48 + 2));
      operator delete(v48);
      size_t v48 = v49;
    }
    while (v49);
  }
  int64_t v50 = v66;
  int v66 = 0;
  if (v50) {
    operator delete(v50);
  }
  uint64_t v51 = (void **)v64[0];
  if (v64[0])
  {
    std::string::size_type v52 = (void **)v64[1];
    std::string::size_type v53 = v64[0];
    if (v64[1] != v64[0])
    {
      do
      {
        if (*((char *)v52 - 1) < 0) {
          operator delete(*(v52 - 3));
        }
        v52 -= 3;
      }
      while (v52 != v51);
      std::string::size_type v53 = v64[0];
    }
    v64[1] = v51;
    operator delete(v53);
  }
  size_t v12 = v69;
  if (v69) {
    goto LABEL_92;
  }
}

void sub_8A3DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_4D4880(&a16);
  sub_4D4880(&a29);
  sub_14A84(v34 - 104);
  _Unwind_Resume(a1);
}

void sub_8A3E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_4D4880((void **)va);
  sub_14A84(v15 - 104);
  _Unwind_Resume(a1);
}

void sub_8A3E90(_Unwind_Exception *a1)
{
  sub_14A84(v1 - 104);
  _Unwind_Resume(a1);
}

void sub_8A3EA4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_8A3EBC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!*(unsigned char *)(a1 + 1856))
  {
    *(void *)(a2 + 64) = 0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_DWORD *)(a2 + 56) = 1065353216;
    *(unsigned char *)(a2 + 64) = 1;
    return;
  }
  sub_635CD0((long long **)(a1 + 8), (uint64_t)&v51);
  uint64_t v4 = v53;
  if ((v53 & 0x80u) == 0) {
    uint64_t v5 = (char *)&v51;
  }
  else {
    uint64_t v5 = (char *)v51;
  }
  if (byte_25CCACF >= 0) {
    char v6 = &qword_25CCAB8;
  }
  else {
    char v6 = (uint64_t *)qword_25CCAB8;
  }
  if (byte_25CCACF >= 0) {
    int64_t v7 = byte_25CCACF;
  }
  else {
    int64_t v7 = qword_25CCAC0;
  }
  if (v7)
  {
    if ((v53 & 0x80u) == 0) {
      int64_t v8 = v53;
    }
    else {
      int64_t v8 = v52;
    }
    uint64_t v9 = &v5[v8];
    if (v8 >= v7)
    {
      int v25 = *(char *)v6;
      long long v26 = v5;
      do
      {
        uint64_t v27 = v8 - v7;
        if (v27 == -1) {
          break;
        }
        std::string::size_type v28 = (char *)memchr(v26, v25, v27 + 1);
        if (!v28) {
          break;
        }
        uint64_t v10 = v28;
        if (!memcmp(v28, v6, v7)) {
          goto LABEL_17;
        }
        long long v26 = v10 + 1;
        int64_t v8 = v9 - (v10 + 1);
      }
      while (v8 >= v7);
    }
    uint64_t v10 = v9;
LABEL_17:
    if (v10 == v9) {
      uint64_t v11 = -1;
    }
    else {
      uint64_t v11 = v10 - v5;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  if (byte_25CD507 >= 0) {
    size_t v12 = &qword_25CD4F0;
  }
  else {
    size_t v12 = (uint64_t *)qword_25CD4F0;
  }
  if (byte_25CD507 >= 0) {
    int64_t v13 = byte_25CD507;
  }
  else {
    int64_t v13 = qword_25CD4F8;
  }
  if (v13)
  {
    if ((v4 & 0x80u) == 0) {
      int64_t v14 = v4;
    }
    else {
      int64_t v14 = v52;
    }
    uint64_t v15 = &v5[v14];
    if (v14 >= v13)
    {
      int v29 = *(char *)v12;
      uint64_t v30 = v5;
      do
      {
        uint64_t v31 = v14 - v13;
        if (v31 == -1) {
          break;
        }
        int v32 = (char *)memchr(v30, v29, v31 + 1);
        if (!v32) {
          break;
        }
        int v16 = v32;
        if (!memcmp(v32, v12, v13)) {
          goto LABEL_34;
        }
        uint64_t v30 = v16 + 1;
        int64_t v14 = v15 - (v16 + 1);
      }
      while (v14 >= v13);
    }
    int v16 = v15;
LABEL_34:
    if (v16 == v15) {
      int64_t v13 = -1;
    }
    else {
      int64_t v13 = v16 - v5;
    }
  }
  BOOL v17 = sub_6F2FD8(a1 + 456);
  char v18 = v11 != -1 || v17;
  if ((v18 & 1) == 0)
  {
    *(void *)(a2 + 64) = 0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_DWORD *)(a2 + 56) = 1065353216;
    *(unsigned char *)(a2 + 64) = 1;
    goto LABEL_114;
  }
  if (v11 != -1 && (*(_DWORD *)(a1 + 1848) - 41) <= 0x12)
  {
    uint64_t v19 = qword_25CD4F8;
    if (byte_25CD507 >= 0) {
      uint64_t v19 = byte_25CD507;
    }
    std::string::size_type v20 = v19 + v13;
    std::string::size_type v21 = v53;
    if ((v53 & 0x80u) == 0)
    {
      uint64_t v22 = &v51;
    }
    else
    {
      std::string::size_type v21 = v52;
      uint64_t v22 = v51;
    }
    if (v21 >= v20) {
      std::string::size_type v23 = v20;
    }
    else {
      std::string::size_type v23 = v21;
    }
    if (v23 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v23 >= 0x17)
    {
      uint64_t v36 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v23 | 7) != 0x17) {
        uint64_t v36 = v23 | 7;
      }
      uint64_t v37 = v36 + 1;
      p_dst = (std::string *)operator new(v36 + 1);
      __dst.__r_.__value_.__l.__size_ = v23;
      __dst.__r_.__value_.__r.__words[2] = v37 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v23;
      p_dst = &__dst;
      if (!v23)
      {
LABEL_91:
        p_dst->__r_.__value_.__s.__data_[v23] = 0;
        uint64_t v38 = qword_25CCAC0;
        if (byte_25CCACF >= 0) {
          uint64_t v38 = byte_25CCACF;
        }
        unint64_t v39 = v38 + v11;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::size_type size = __dst.__r_.__value_.__l.__size_;
          if (__dst.__r_.__value_.__l.__size_ >= v39)
          {
            char v41 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            size_t v42 = __dst.__r_.__value_.__l.__size_ - v39;
            if (__dst.__r_.__value_.__l.__size_ - v39 <= 0x7FFFFFFFFFFFFFF7)
            {
LABEL_96:
              if (v42 >= 0x17)
              {
                uint64_t v44 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v42 | 7) != 0x17) {
                  uint64_t v44 = v42 | 7;
                }
                uint64_t v45 = v44 + 1;
                uint64_t v43 = (long long *)operator new(v44 + 1);
                *((void *)&v48 + 1) = v42;
                *(void *)&long long v49 = v45 | 0x8000000000000000;
                *(void *)&long long v48 = v43;
              }
              else
              {
                BYTE7(v49) = v42;
                uint64_t v43 = &v48;
                if (size == v39) {
                  goto LABEL_103;
                }
              }
              memmove(v43, (char *)v41 + v39, v42);
LABEL_103:
              *((unsigned char *)v43 + v42) = 0;
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__dst.__r_.__value_.__l.__data_);
              }
              *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v48;
              __dst.__r_.__value_.__r.__words[2] = v49;
              if (byte_25CD747 >= 0) {
                uint64_t v46 = (const std::string::value_type *)&qword_25CD730;
              }
              else {
                uint64_t v46 = (const std::string::value_type *)qword_25CD730;
              }
              if (byte_25CD747 >= 0) {
                std::string::size_type v47 = byte_25CD747;
              }
              else {
                std::string::size_type v47 = qword_25CD738;
              }
              std::string::append(&__dst, v46, v47);
              sub_6352AC(a2, (uint64_t)&__dst);
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_114;
              }
              char v35 = (void *)__dst.__r_.__value_.__r.__words[0];
              goto LABEL_113;
            }
LABEL_119:
            sub_188D690();
          }
        }
        else
        {
          std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          if (v39 <= HIBYTE(__dst.__r_.__value_.__r.__words[2]))
          {
            char v41 = &__dst;
            size_t v42 = HIBYTE(__dst.__r_.__value_.__r.__words[2]) - v39;
            if (v42 <= 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_96;
            }
            goto LABEL_119;
          }
        }
        sub_5AD0();
      }
    }
    memmove(p_dst, v22, v23);
    goto LABEL_91;
  }
  if (byte_25CE6D8[23] < 0) {
    sub_4200(&__dst, *(void **)byte_25CE6D8, *(unint64_t *)&byte_25CE6D8[8]);
  }
  else {
    std::string __dst = *(std::string *)byte_25CE6D8;
  }
  sub_4AA8E0((char *)&v55, (long long *)(a1 + 456));
  long long v48 = 0u;
  long long v49 = 0u;
  int v50 = 1065353216;
  sub_5955F4((uint64_t)&v48, (uint64_t)&__dst, (uint64_t)&__dst);
  if (v64 < 0)
  {
    operator delete(__p);
    if ((v62 & 0x80000000) == 0)
    {
LABEL_73:
      if ((v60 & 0x80000000) == 0) {
        goto LABEL_74;
      }
      goto LABEL_83;
    }
  }
  else if ((v62 & 0x80000000) == 0)
  {
    goto LABEL_73;
  }
  operator delete(v61);
  if ((v60 & 0x80000000) == 0)
  {
LABEL_74:
    if ((v58 & 0x80000000) == 0) {
      goto LABEL_75;
    }
    goto LABEL_84;
  }
LABEL_83:
  operator delete(v59);
  if ((v58 & 0x80000000) == 0)
  {
LABEL_75:
    if ((v56 & 0x80000000) == 0) {
      goto LABEL_76;
    }
LABEL_85:
    operator delete(v55);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_77;
    }
    goto LABEL_86;
  }
LABEL_84:
  operator delete(v57);
  if (v56 < 0) {
    goto LABEL_85;
  }
LABEL_76:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_77;
  }
LABEL_86:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_77:
  sub_63531C(a2, (uint64_t)&qword_25CCF98, (uint64_t)&v48);
  std::string::size_type v33 = (void *)v49;
  if ((void)v49)
  {
    do
    {
      uint64_t v34 = (void *)*v33;
      sub_4F4B48((uint64_t)(v33 + 2));
      operator delete(v33);
      std::string::size_type v33 = v34;
    }
    while (v34);
  }
  char v35 = (void *)v48;
  *(void *)&long long v48 = 0;
  if (!v35) {
    goto LABEL_114;
  }
LABEL_113:
  operator delete(v35);
LABEL_114:
  if ((char)v53 < 0) {
    operator delete(v51);
  }
}

void sub_8A444C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_8A44CC(const std::string *a1@<X1>, uint64_t a2@<X8>)
{
  int v3 = byte_25D0287;
  if (byte_25D0287 >= 0) {
    size_t v4 = byte_25D0287;
  }
  else {
    size_t v4 = qword_25D0278;
  }
  int v5 = byte_25CD72F;
  if (byte_25CD72F >= 0) {
    size_t v6 = byte_25CD72F;
  }
  else {
    size_t v6 = qword_25CD720;
  }
  unint64_t v7 = v6 + v4;
  if (v6 + v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v7 <= 0x16)
  {
    size_t v25 = 0;
    unint64_t v26 = 0;
    std::string __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v26) = v6 + v4;
    if (!v4) {
      goto LABEL_18;
    }
    goto LABEL_14;
  }
  uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v7 | 7) != 0x17) {
    uint64_t v10 = v7 | 7;
  }
  uint64_t v11 = v10 + 1;
  p_dst = (void **)operator new(v10 + 1);
  size_t v25 = v6 + v4;
  unint64_t v26 = v11 | 0x8000000000000000;
  std::string __dst = p_dst;
  if (v4)
  {
LABEL_14:
    if (v3 >= 0) {
      size_t v12 = &qword_25D0270;
    }
    else {
      size_t v12 = (uint64_t *)qword_25D0270;
    }
    memmove(p_dst, v12, v4);
  }
LABEL_18:
  int64_t v13 = (char *)p_dst + v4;
  if (v6)
  {
    if (v5 >= 0) {
      int64_t v14 = &qword_25CD718;
    }
    else {
      int64_t v14 = (uint64_t *)qword_25CD718;
    }
    memmove(v13, v14, v6);
  }
  v13[v6] = 0;
  sub_6352AC((uint64_t)&v27, (uint64_t)&__dst);
  if (SHIBYTE(v26) < 0) {
    operator delete(__dst);
  }
  sub_6358F0((uint64_t)&v27, (long long *)&qword_25CE2D0, a1, a1);
  uint64_t v22 = 0;
  std::string::size_type v23 = 0;
  sub_6370D4(a2, &v27, 1, &v22);
  uint64_t v15 = v23;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  int v16 = v30;
  if (v30)
  {
    do
    {
      BOOL v17 = (void *)*v16;
      sub_4F4B48((uint64_t)(v16 + 2));
      operator delete(v16);
      int v16 = v17;
    }
    while (v17);
  }
  char v18 = __p;
  std::string __p = 0;
  if (v18) {
    operator delete(v18);
  }
  uint64_t v19 = (void **)v27;
  if (v27)
  {
    std::string::size_type v20 = v28;
    std::string::size_type v21 = v27;
    if (v28 != v27)
    {
      do
      {
        if (*((char *)v20 - 1) < 0) {
          operator delete(*(v20 - 3));
        }
        v20 -= 3;
      }
      while (v20 != v19);
      std::string::size_type v21 = v27;
    }
    std::string::size_type v28 = v19;
    operator delete(v21);
  }
}

void sub_8A4718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

void sub_8A473C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_8A4758(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (byte_25CDC0F < 0)
  {
    sub_4200(&__dst, (void *)xmmword_25CDBF8, *((unint64_t *)&xmmword_25CDBF8 + 1));
  }
  else
  {
    long long __dst = xmmword_25CDBF8;
    uint64_t v23 = unk_25CDC08;
  }
  sub_8A1D8C(a1 + 608, 1, (uint64_t)__p);
  sub_63531C((uint64_t)&v18, (uint64_t)&__dst, (uint64_t)__p);
  size_t v4 = v17;
  if (v17)
  {
    do
    {
      int v5 = (void *)*v4;
      sub_4F4B48((uint64_t)(v4 + 2));
      operator delete(v4);
      size_t v4 = v5;
    }
    while (v5);
  }
  size_t v6 = __p[0];
  __p[0] = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  sub_6370D4(a2, &v18, 1, &v14);
  unint64_t v7 = v15;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  int64_t v8 = v21;
  if (v21)
  {
    do
    {
      uint64_t v9 = (void *)*v8;
      sub_4F4B48((uint64_t)(v8 + 2));
      operator delete(v8);
      int64_t v8 = v9;
    }
    while (v9);
  }
  uint64_t v10 = v20;
  std::string::size_type v20 = 0;
  if (v10) {
    operator delete(v10);
  }
  uint64_t v11 = (void **)v18;
  if (v18)
  {
    size_t v12 = v19;
    int64_t v13 = v18;
    if (v19 != v18)
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 3;
      }
      while (v12 != v11);
      int64_t v13 = v18;
    }
    uint64_t v19 = v11;
    operator delete(v13);
  }
  if (SHIBYTE(v23) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_8A4918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  sub_14A84((uint64_t)&a9);
  sub_4D4880(&a16);
  if (*(char *)(v16 - 41) < 0) {
    operator delete(*(void **)(v16 - 64));
  }
  _Unwind_Resume(a1);
}

void sub_8A495C(unsigned char *a1@<X0>, uint64_t *a2@<X8>)
{
  if (a1[1858])
  {
    uint64_t v82 = 0;
    int64_t v83 = 0;
    sub_6370D4(a2, a1 + 80, 1, &v82);
    size_t v4 = v83;
    if (v83)
    {
      if (!atomic_fetch_add(&v83->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    sub_80A078((uint64_t)a1, a2, 1, 0);
    return;
  }
  if (a1[1944])
  {
    uint64_t v5 = (uint64_t)(a1 + 80);
    if (sub_635D10((uint64_t)(a1 + 80), (uint64_t)&xmmword_25CE600))
    {
      sub_80C7F4((uint64_t)a1, &v81);
      sub_6352AC((uint64_t)&v76, (uint64_t)&v81);
      uint64_t v69 = 0;
      uint64_t v70 = 0;
      sub_6370D4(&v71, &v76, 1, &v69);
      size_t v6 = v70;
      if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      int v7 = byte_25CFDEF;
      if (byte_25CFDEF >= 0) {
        size_t v8 = byte_25CFDEF;
      }
      else {
        size_t v8 = qword_25CFDE0;
      }
      int v9 = byte_25CD7A7;
      if (byte_25CD7A7 >= 0) {
        size_t v10 = byte_25CD7A7;
      }
      else {
        size_t v10 = qword_25CD798;
      }
      unint64_t v11 = v10 + v8;
      if (v10 + v8 > 0x7FFFFFFFFFFFFFF7) {
        sub_188D690();
      }
      if (v11 > 0x16)
      {
        uint64_t v43 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17) {
          uint64_t v43 = v11 | 7;
        }
        uint64_t v44 = v43 + 1;
        p_dst = (void **)operator new(v43 + 1);
        size_t v67 = v10 + v8;
        unint64_t v68 = v44 | 0x8000000000000000;
        long long __dst = p_dst;
        if (!v8) {
          goto LABEL_25;
        }
      }
      else
      {
        size_t v67 = 0;
        unint64_t v68 = 0;
        long long __dst = 0;
        p_dst = (void **)&__dst;
        HIBYTE(v68) = v10 + v8;
        if (!v8)
        {
LABEL_25:
          uint64_t v14 = (char *)p_dst + v8;
          if (v10)
          {
            if (v9 >= 0) {
              uint64_t v15 = &qword_25CD790;
            }
            else {
              uint64_t v15 = (uint64_t *)qword_25CD790;
            }
            memmove(v14, v15, v10);
          }
          v14[v10] = 0;
          uint64_t v16 = sub_5231C(v5);
          sub_63531C((uint64_t)&v62, (uint64_t)&__dst, v16);
          BOOL v17 = (std::__shared_weak_count *)operator new(0x80uLL);
          v17->__shared_owners_ = 0;
          v17->__shared_weak_owners_ = 0;
          v17->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
          sub_59540C((uint64_t)&v84, (uint64_t)&v17[1], (uint64_t)&v71);
          char v60 = &v17[1].__vftable;
          uint64_t v61 = v17;
          sub_6370D4(a2, &v62, 13, &v60);
          char v18 = v61;
          if (v61 && !atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
          uint64_t v19 = v65;
          if (v65)
          {
            do
            {
              std::string::size_type v20 = (void *)*v19;
              sub_4F4B48((uint64_t)(v19 + 2));
              operator delete(v19);
              uint64_t v19 = v20;
            }
            while (v20);
          }
          std::string::size_type v21 = __p;
          std::string __p = 0;
          if (v21) {
            operator delete(v21);
          }
          uint64_t v22 = (void **)v62;
          if (v62)
          {
            uint64_t v23 = v63;
            std::string::size_type v24 = v62;
            if (v63 != v62)
            {
              do
              {
                if (*((char *)v23 - 1) < 0) {
                  operator delete(*(v23 - 3));
                }
                v23 -= 3;
              }
              while (v23 != v22);
              std::string::size_type v24 = v62;
            }
            char v63 = v22;
            operator delete(v24);
          }
          if (SHIBYTE(v68) < 0) {
            operator delete(__dst);
          }
          uint64_t v45 = v75;
          if (v75 && !atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
          uint64_t v46 = v74;
          if (v74)
          {
            do
            {
              std::string::size_type v47 = (void *)*v46;
              sub_4F4B48((uint64_t)(v46 + 2));
              operator delete(v46);
              uint64_t v46 = v47;
            }
            while (v47);
          }
          long long v48 = v73;
          char v73 = 0;
          if (v48) {
            operator delete(v48);
          }
          long long v49 = (void **)v71;
          if (v71)
          {
            int v50 = v72;
            uint64_t v51 = v71;
            if (v72 != v71)
            {
              do
              {
                if (*((char *)v50 - 1) < 0) {
                  operator delete(*(v50 - 3));
                }
                v50 -= 3;
              }
              while (v50 != v49);
              uint64_t v51 = v71;
            }
            int v72 = v49;
            operator delete(v51);
          }
          std::string::size_type v52 = v80;
          if (v80)
          {
            do
            {
              unsigned __int8 v53 = (void *)*v52;
              sub_4F4B48((uint64_t)(v52 + 2));
              operator delete(v52);
              std::string::size_type v52 = v53;
            }
            while (v53);
          }
          uint64_t v54 = v79;
          char v79 = 0;
          if (v54) {
            operator delete(v54);
          }
          uint64_t v55 = v76;
          if (v76)
          {
            char v56 = v77;
            uint64_t v57 = v76;
            if (v77 != v76)
            {
              do
              {
                if (*((char *)v56 - 1) < 0) {
                  operator delete(*(v56 - 3));
                }
                v56 -= 3;
              }
              while (v56 != v55);
              uint64_t v57 = v76;
            }
            char v77 = v55;
            operator delete(v57);
          }
          if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v81.__r_.__value_.__l.__data_);
          }
          return;
        }
      }
      if (v7 >= 0) {
        int64_t v13 = &qword_25CFDD8;
      }
      else {
        int64_t v13 = (uint64_t *)qword_25CFDD8;
      }
      memmove(p_dst, v13, v8);
      goto LABEL_25;
    }
  }
  if (a1[1945])
  {
    int v25 = byte_25CFD8F;
    if (byte_25CFD8F >= 0) {
      size_t v26 = byte_25CFD8F;
    }
    else {
      size_t v26 = *((void *)&xmmword_25CFD78 + 1);
    }
    int v27 = byte_25CD7A7;
    if (byte_25CD7A7 >= 0) {
      size_t v28 = byte_25CD7A7;
    }
    else {
      size_t v28 = qword_25CD798;
    }
    unint64_t v29 = v28 + v26;
    if (v28 + v26 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v29 > 0x16)
    {
      uint64_t v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v29 | 7) != 0x17) {
        uint64_t v32 = v29 | 7;
      }
      uint64_t v33 = v32 + 1;
      uint64_t v30 = (void **)operator new(v32 + 1);
      char v77 = (void **)(v28 + v26);
      unint64_t v78 = v33 | 0x8000000000000000;
      long long v76 = v30;
      if (!v26) {
        goto LABEL_64;
      }
    }
    else
    {
      char v77 = 0;
      unint64_t v78 = 0;
      long long v76 = 0;
      uint64_t v30 = (void **)&v76;
      HIBYTE(v78) = v28 + v26;
      if (!v26)
      {
LABEL_64:
        char v35 = (char *)v30 + v26;
        if (v28)
        {
          if (v27 >= 0) {
            uint64_t v36 = &qword_25CD790;
          }
          else {
            uint64_t v36 = (uint64_t *)qword_25CD790;
          }
          memmove(v35, v36, v28);
        }
        v35[v28] = 0;
        sub_6352AC((uint64_t)&v71, (uint64_t)&v76);
        if (SHIBYTE(v78) < 0) {
          operator delete(v76);
        }
        sub_6376A0(a2, &v71, 3, a1 + 80, 1);
        uint64_t v37 = v74;
        if (v74)
        {
          do
          {
            uint64_t v38 = (void *)*v37;
            sub_4F4B48((uint64_t)(v37 + 2));
            operator delete(v37);
            uint64_t v37 = v38;
          }
          while (v38);
        }
        unint64_t v39 = v73;
        char v73 = 0;
        if (v39) {
          operator delete(v39);
        }
        uint64_t v40 = (void **)v71;
        if (v71)
        {
          char v41 = v72;
          size_t v42 = v71;
          if (v72 != v71)
          {
            do
            {
              if (*((char *)v41 - 1) < 0) {
                operator delete(*(v41 - 3));
              }
              v41 -= 3;
            }
            while (v41 != v40);
            size_t v42 = v71;
          }
          int v72 = v40;
          operator delete(v42);
        }
        return;
      }
    }
    if (v25 >= 0) {
      uint64_t v34 = &xmmword_25CFD78;
    }
    else {
      uint64_t v34 = (long long *)xmmword_25CFD78;
    }
    memmove(v30, v34, v26);
    goto LABEL_64;
  }
  uint64_t v58 = 0;
  unint64_t v59 = 0;
  sub_6370D4(a2, a1 + 80, 2, &v58);
  uint64_t v31 = v59;
  if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
}

void sub_8A5060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,char a30)
{
}

uint64_t sub_8A5154(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 96))();
}

void sub_8A5178(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  sub_6352AC((uint64_t)&v15, a2);
  uint64_t v5 = (std::__shared_weak_count *)operator new(0x80uLL);
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
  sub_63D394((uint64_t)&v19, (uint64_t)&v5[1], a1);
  int64_t v13 = &v5[1].__vftable;
  uint64_t v14 = v5;
  sub_6370D4(a3, &v15, 7, &v13);
  size_t v6 = v14;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  int v7 = v18;
  if (v18)
  {
    do
    {
      size_t v8 = (void *)*v7;
      sub_4F4B48((uint64_t)(v7 + 2));
      operator delete(v7);
      int v7 = v8;
    }
    while (v8);
  }
  int v9 = __p;
  std::string __p = 0;
  if (v9) {
    operator delete(v9);
  }
  size_t v10 = (void **)v15;
  if (v15)
  {
    unint64_t v11 = v16;
    size_t v12 = v15;
    if (v16 != v15)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != v10);
      size_t v12 = v15;
    }
    uint64_t v16 = v10;
    operator delete(v12);
  }
}

void sub_8A52D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

void sub_8A52F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v13);
  sub_4D4880(&a11);
  _Unwind_Resume(a1);
}

void sub_8A5310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_4D4880((void **)va);
  _Unwind_Resume(a1);
}

void sub_8A5324(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_8A54EC(a1, (uint64_t *)&v17);
  uint64_t v4 = 252;
  if (!*(unsigned char *)(a1 + 2873)) {
    uint64_t v4 = 258;
  }
  uint64_t v5 = &qword_25CD988;
  if (*(unsigned char *)(a1 + 2873)) {
    uint64_t v5 = &qword_25CD970;
  }
  size_t v6 = (char *)&unk_25CD987;
  if (!*(unsigned char *)(a1 + 2873)) {
    size_t v6 = (char *)&xmmword_25CD990 + 15;
  }
  if (*v6 < 0)
  {
    if (*(unsigned char *)(a1 + 2873)) {
      int v7 = (unint64_t *)&unk_25CD978;
    }
    else {
      int v7 = (unint64_t *)&xmmword_25CD990;
    }
    sub_4200(__p, *(void **)&dword_25CD580[v4], *v7);
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)v5;
    uint64_t v16 = v5[2];
  }
  sub_8A5178((uint64_t)&v17, (uint64_t)__p, a2);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  size_t v8 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  int v9 = v20;
  if (v20)
  {
    do
    {
      size_t v10 = (void *)*v9;
      sub_4F4B48((uint64_t)(v9 + 2));
      operator delete(v9);
      int v9 = v10;
    }
    while (v10);
  }
  unint64_t v11 = v19;
  char v19 = 0;
  if (v11) {
    operator delete(v11);
  }
  size_t v12 = (void **)v17;
  if (v17)
  {
    int64_t v13 = v18;
    uint64_t v14 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v13 - 1) < 0) {
          operator delete(*(v13 - 3));
        }
        v13 -= 3;
      }
      while (v13 != v12);
      uint64_t v14 = v17;
    }
    char v18 = v12;
    operator delete(v14);
  }
}

void sub_8A54B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_8A54C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_4F31D0(&a15);
  _Unwind_Resume(a1);
}

void sub_8A54EC(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_80C7F4(a1, &v17);
  sub_6352AC((uint64_t)&v13, (uint64_t)&v17);
  uint64_t v11 = 0;
  size_t v12 = 0;
  sub_6370D4(a2, &v13, 1, &v11);
  uint64_t v4 = v12;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = v16;
  if (v16)
  {
    do
    {
      size_t v6 = (void *)*v5;
      sub_4F4B48((uint64_t)(v5 + 2));
      operator delete(v5);
      uint64_t v5 = v6;
    }
    while (v6);
  }
  int v7 = __p;
  std::string __p = 0;
  if (v7) {
    operator delete(v7);
  }
  size_t v8 = (void **)v13;
  if (v13)
  {
    int v9 = v14;
    size_t v10 = v13;
    if (v14 != v13)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      size_t v10 = v13;
    }
    uint64_t v14 = v8;
    operator delete(v10);
  }
  sub_80A078(a1, a2, 0, 0);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
}

void sub_8A5648(_Unwind_Exception *a1)
{
  sub_4F31D0(v1);
  if (*(char *)(v2 - 33) < 0) {
    operator delete(*(void **)(v2 - 56));
  }
  _Unwind_Resume(a1);
}

void sub_8A568C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_8A54EC(a1, (uint64_t *)&v45);
  uint64_t v4 = 288;
  if (!*(unsigned char *)(a1 + 2873)) {
    uint64_t v4 = 294;
  }
  uint64_t v5 = &qword_25CDA18;
  if (*(unsigned char *)(a1 + 2873)) {
    uint64_t v5 = &qword_25CDA00;
  }
  size_t v6 = (char *)&unk_25CDA17;
  if (!*(unsigned char *)(a1 + 2873)) {
    size_t v6 = (char *)&xmmword_25CDA20 + 15;
  }
  if (*v6 < 0)
  {
    if (*(unsigned char *)(a1 + 2873)) {
      int v7 = (unint64_t *)&unk_25CDA08;
    }
    else {
      int v7 = (unint64_t *)&xmmword_25CDA20;
    }
    sub_4200(&__dst, *(void **)&dword_25CD580[v4], *v7);
  }
  else
  {
    long long __dst = *(_OWORD *)v5;
    uint64_t v44 = v5[2];
  }
  sub_8A5178((uint64_t)&v45, (uint64_t)&__dst, (uint64_t)&v38);
  uint64_t v8 = 306;
  if (!*(unsigned char *)(a1 + 2873)) {
    uint64_t v8 = 309;
  }
  int v9 = &qword_25CEF18;
  if (*(unsigned char *)(a1 + 2873)) {
    int v9 = &qword_25CEF00;
  }
  size_t v10 = (char *)&unk_25CEF17;
  if (!*(unsigned char *)(a1 + 2873)) {
    size_t v10 = (char *)&unk_25CEF2F;
  }
  if (*v10 < 0)
  {
    if (*(unsigned char *)(a1 + 2873)) {
      uint64_t v11 = (unint64_t *)&unk_25CEF08;
    }
    else {
      uint64_t v11 = (unint64_t *)&unk_25CEF20;
    }
    sub_4200(v36, (void *)qword_25CE570[v8], *v11);
  }
  else
  {
    *(_OWORD *)uint64_t v36 = *(_OWORD *)v9;
    uint64_t v37 = v9[2];
  }
  *(_OWORD *)std::string __p = 0u;
  long long v34 = 0u;
  int v35 = 1065353216;
  size_t v12 = (std::__shared_weak_count *)operator new(0x80uLL);
  v12->__shared_owners_ = 0;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
  sub_63D394((uint64_t)&v50, (uint64_t)&v12[1], (uint64_t)&v38);
  uint64_t v31 = &v12[1].__vftable;
  uint64_t v32 = v12;
  sub_6373D8(a2, (uint64_t)v36, (uint64_t)__p, 5, (uint64_t *)&v31);
  int64_t v13 = v32;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = (void *)v34;
  if ((void)v34)
  {
    do
    {
      uint64_t v15 = (void *)*v14;
      sub_4F4B48((uint64_t)(v14 + 2));
      operator delete(v14);
      uint64_t v14 = v15;
    }
    while (v15);
  }
  uint64_t v16 = __p[0];
  __p[0] = 0;
  if (v16) {
    operator delete(v16);
  }
  if (SHIBYTE(v37) < 0) {
    operator delete(v36[0]);
  }
  std::string v17 = v42;
  if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  char v18 = v41;
  if (v41)
  {
    do
    {
      char v19 = (void *)*v18;
      sub_4F4B48((uint64_t)(v18 + 2));
      operator delete(v18);
      char v18 = v19;
    }
    while (v19);
  }
  std::string::size_type v20 = v40;
  uint64_t v40 = 0;
  if (v20) {
    operator delete(v20);
  }
  std::string::size_type v21 = (void **)v38;
  if (v38)
  {
    uint64_t v22 = v39;
    uint64_t v23 = v38;
    if (v39 != v38)
    {
      do
      {
        if (*((char *)v22 - 1) < 0) {
          operator delete(*(v22 - 3));
        }
        v22 -= 3;
      }
      while (v22 != v21);
      uint64_t v23 = v38;
    }
    unint64_t v39 = v21;
    operator delete(v23);
  }
  if (SHIBYTE(v44) < 0) {
    operator delete((void *)__dst);
  }
  std::string::size_type v24 = v49;
  if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  int v25 = v48;
  if (v48)
  {
    do
    {
      size_t v26 = (void *)*v25;
      sub_4F4B48((uint64_t)(v25 + 2));
      operator delete(v25);
      int v25 = v26;
    }
    while (v26);
  }
  int v27 = v47;
  std::string::size_type v47 = 0;
  if (v27) {
    operator delete(v27);
  }
  uint64_t v28 = (uint64_t)v45;
  if (v45)
  {
    uint64_t v29 = v46;
    uint64_t v30 = v45;
    if ((void *)v46 != v45)
    {
      do
      {
        if (*(char *)(v29 - 1) < 0) {
          operator delete(*(void **)(v29 - 24));
        }
        v29 -= 24;
      }
      while (v29 != v28);
      uint64_t v30 = v45;
    }
    uint64_t v46 = v28;
    operator delete(v30);
  }
}

void sub_8A5A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23)
{
  sub_4F31D0(&a23);
  if (*(char *)(v23 - 153) < 0) {
    operator delete(*(void **)(v23 - 176));
  }
  sub_4F31D0((void **)(v23 - 144));
  _Unwind_Resume(a1);
}

void sub_8A5AE0(std::string::size_type a1@<X0>, uint64_t a2@<X8>)
{
  sub_8A5F40(a1, 1, 0, 0, (uint64_t)&v45);
  uint64_t v4 = 288;
  if (!*(unsigned char *)(a1 + 2873)) {
    uint64_t v4 = 294;
  }
  uint64_t v5 = &qword_25CDA18;
  if (*(unsigned char *)(a1 + 2873)) {
    uint64_t v5 = &qword_25CDA00;
  }
  size_t v6 = (char *)&unk_25CDA17;
  if (!*(unsigned char *)(a1 + 2873)) {
    size_t v6 = (char *)&xmmword_25CDA20 + 15;
  }
  if (*v6 < 0)
  {
    if (*(unsigned char *)(a1 + 2873)) {
      int v7 = (unint64_t *)&unk_25CDA08;
    }
    else {
      int v7 = (unint64_t *)&xmmword_25CDA20;
    }
    sub_4200(&__dst, *(void **)&dword_25CD580[v4], *v7);
  }
  else
  {
    long long __dst = *(_OWORD *)v5;
    uint64_t v44 = v5[2];
  }
  sub_8A5178((uint64_t)&v45, (uint64_t)&__dst, (uint64_t)&v38);
  uint64_t v8 = 306;
  if (!*(unsigned char *)(a1 + 2873)) {
    uint64_t v8 = 309;
  }
  int v9 = &qword_25CEF18;
  if (*(unsigned char *)(a1 + 2873)) {
    int v9 = &qword_25CEF00;
  }
  size_t v10 = (char *)&unk_25CEF17;
  if (!*(unsigned char *)(a1 + 2873)) {
    size_t v10 = (char *)&unk_25CEF2F;
  }
  if (*v10 < 0)
  {
    if (*(unsigned char *)(a1 + 2873)) {
      uint64_t v11 = (unint64_t *)&unk_25CEF08;
    }
    else {
      uint64_t v11 = (unint64_t *)&unk_25CEF20;
    }
    sub_4200(v36, (void *)qword_25CE570[v8], *v11);
  }
  else
  {
    *(_OWORD *)uint64_t v36 = *(_OWORD *)v9;
    uint64_t v37 = v9[2];
  }
  *(_OWORD *)std::string __p = 0u;
  long long v34 = 0u;
  int v35 = 1065353216;
  size_t v12 = (std::__shared_weak_count *)operator new(0x80uLL);
  v12->__shared_owners_ = 0;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
  sub_63D394((uint64_t)&v50, (uint64_t)&v12[1], (uint64_t)&v38);
  uint64_t v31 = &v12[1].__vftable;
  uint64_t v32 = v12;
  sub_6373D8(a2, (uint64_t)v36, (uint64_t)__p, 5, (uint64_t *)&v31);
  int64_t v13 = v32;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = (void *)v34;
  if ((void)v34)
  {
    do
    {
      uint64_t v15 = (void *)*v14;
      sub_4F4B48((uint64_t)(v14 + 2));
      operator delete(v14);
      uint64_t v14 = v15;
    }
    while (v15);
  }
  uint64_t v16 = __p[0];
  __p[0] = 0;
  if (v16) {
    operator delete(v16);
  }
  if (SHIBYTE(v37) < 0) {
    operator delete(v36[0]);
  }
  std::string v17 = v42;
  if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  char v18 = v41;
  if (v41)
  {
    do
    {
      char v19 = (void *)*v18;
      sub_4F4B48((uint64_t)(v18 + 2));
      operator delete(v18);
      char v18 = v19;
    }
    while (v19);
  }
  std::string::size_type v20 = v40;
  uint64_t v40 = 0;
  if (v20) {
    operator delete(v20);
  }
  std::string::size_type v21 = (void **)v38;
  if (v38)
  {
    uint64_t v22 = v39;
    uint64_t v23 = v38;
    if (v39 != v38)
    {
      do
      {
        if (*((char *)v22 - 1) < 0) {
          operator delete(*(v22 - 3));
        }
        v22 -= 3;
      }
      while (v22 != v21);
      uint64_t v23 = v38;
    }
    unint64_t v39 = v21;
    operator delete(v23);
  }
  if (SHIBYTE(v44) < 0) {
    operator delete((void *)__dst);
  }
  std::string::size_type v24 = v49;
  if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  int v25 = v48;
  if (v48)
  {
    do
    {
      size_t v26 = (void *)*v25;
      sub_4F4B48((uint64_t)(v25 + 2));
      operator delete(v25);
      int v25 = v26;
    }
    while (v26);
  }
  int v27 = v47;
  std::string::size_type v47 = 0;
  if (v27) {
    operator delete(v27);
  }
  uint64_t v28 = v45;
  if (v45)
  {
    uint64_t v29 = v46;
    uint64_t v30 = v45;
    if (v46 != v45)
    {
      do
      {
        if (*((char *)v29 - 1) < 0) {
          operator delete(*(v29 - 3));
        }
        v29 -= 3;
      }
      while (v29 != v28);
      uint64_t v30 = v45;
    }
    uint64_t v46 = v28;
    operator delete(v30);
  }
}

void sub_8A5EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23)
{
  sub_4F31D0(&a23);
  if (*(char *)(v23 - 153) < 0) {
    operator delete(*(void **)(v23 - 176));
  }
  sub_4F31D0((void **)(v23 - 144));
  _Unwind_Resume(a1);
}

void sub_8A5F40(std::string::size_type a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  if (a3)
  {
    if (*(unsigned char *)(a1 + 2872))
    {
      if ((*(_DWORD *)(a1 + 1848) - 41) >= 0x13)
      {
        sub_8A6BF8(a1, a5);
        return;
      }
LABEL_12:
      if (a2)
      {
        __dst[0] = 0;
        __dst[1] = 0;
        unint64_t v58 = 0;
        sub_8A6F8((char *)__dst, *(void *)(a1 + 80), *(void *)(a1 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3));
        sub_5954B0((uint64_t)&v59, a1 + 104);
        char v61 = *(unsigned char *)(a1 + 144);
      }
      else
      {
        sub_7FC804(a1, (uint64_t)&__p);
        sub_803A58(a1, 1, (uint64_t)&__p, (uint64_t)__dst);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v55 = 0;
      char v56 = 0;
      sub_6370D4(&__p, __dst, 1, &v55);
      int v9 = v56;
      if (v56 && !atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
        if (*(unsigned char *)(a1 + 2875)) {
          goto LABEL_19;
        }
      }
      else if (*(unsigned char *)(a1 + 2875))
      {
LABEL_19:
        BOOL v10 = 1;
        goto LABEL_22;
      }
      BOOL v10 = *(unsigned char *)(a1 + 2876) != 0;
LABEL_22:
      sub_80A078(a1, (uint64_t *)&__p, 0, v10);
      if (v10)
      {
        int v11 = *(unsigned __int8 *)(a1 + 1859);
        size_t v12 = (std::__shared_weak_count *)operator new(0x80uLL);
        v12->__shared_owners_ = 0;
        v12->__shared_weak_owners_ = 0;
        v12->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
        sub_59540C((uint64_t)&v74, (uint64_t)&v12[1], (uint64_t)&__p);
        unsigned __int8 v53 = &v12[1].__vftable;
        uint64_t v54 = v12;
        if (v11) {
          uint64_t v13 = 5;
        }
        else {
          uint64_t v13 = 10;
        }
        sub_8A9170(a1, (uint64_t *)&v53, v13, a5);
        uint64_t v14 = v54;
        if (v54 && !atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
          uint64_t v15 = (std::__shared_weak_count *)*((void *)&v72 + 1);
          if (!*((void *)&v72 + 1)) {
            goto LABEL_58;
          }
          goto LABEL_33;
        }
      }
      else
      {
        if (!*(unsigned char *)(a1 + 1862))
        {
          if (a4) {
            sub_637918(&__p, (uint64_t)&xmmword_25CCEF0);
          }
          *(_OWORD *)a5 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          memset(&__p, 0, sizeof(__p));
          uint64_t v22 = v65;
          unint64_t v23 = v66;
          std::string::size_type v24 = v67;
          std::string::size_type v65 = 0;
          unint64_t v66 = 0;
          *(void *)(a5 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
          *(void *)(a5 + 24) = v22;
          *(void *)(a5 + 32) = v23;
          *(void *)(a5 + 40) = v24;
          uint64_t v25 = v68;
          *(void *)(a5 + 48) = v68;
          *(_DWORD *)(a5 + 56) = v69;
          if (v25)
          {
            unint64_t v26 = v24[1];
            if ((v23 & (v23 - 1)) != 0)
            {
              if (v26 >= v23) {
                v26 %= v23;
              }
            }
            else
            {
              v26 &= v23 - 1;
            }
            v22[v26] = a5 + 40;
            size_t v67 = 0;
            uint64_t v68 = 0;
          }
          *(unsigned char *)(a5 + 64) = v70;
          *(_DWORD *)(a5 + 72) = v71;
          *(_OWORD *)(a5 + 80) = v72;
          long long v72 = 0uLL;
          *(_WORD *)(a5 + 96) = v73;
          uint64_t v15 = (std::__shared_weak_count *)*((void *)&v72 + 1);
          if (!*((void *)&v72 + 1))
          {
LABEL_58:
            uint64_t v28 = v67;
            if (v67)
            {
              do
              {
                uint64_t v29 = (void *)*v28;
                sub_4F4B48((uint64_t)(v28 + 2));
                operator delete(v28);
                uint64_t v28 = v29;
              }
              while (v29);
            }
            uint64_t v30 = v65;
            std::string::size_type v65 = 0;
            if (v30) {
              operator delete(v30);
            }
            std::string::size_type v31 = __p.__r_.__value_.__r.__words[0];
            if (__p.__r_.__value_.__r.__words[0])
            {
              std::string::size_type size = __p.__r_.__value_.__l.__size_;
              uint64_t v33 = (void *)__p.__r_.__value_.__r.__words[0];
              if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
              {
                do
                {
                  if (*(char *)(size - 1) < 0) {
                    operator delete(*(void **)(size - 24));
                  }
                  size -= 24;
                }
                while (size != v31);
                uint64_t v33 = (void *)__p.__r_.__value_.__r.__words[0];
              }
              __p.__r_.__value_.__l.__size_ = v31;
              operator delete(v33);
            }
            long long v34 = v60;
            if (v60)
            {
              do
              {
                int v35 = (void *)*v34;
                sub_4F4B48((uint64_t)(v34 + 2));
                operator delete(v34);
                long long v34 = v35;
              }
              while (v35);
            }
            uint64_t v36 = v59;
            unint64_t v59 = 0;
            if (v36) {
              operator delete(v36);
            }
            uint64_t v37 = (void **)__dst[0];
            if (__dst[0])
            {
              uint64_t v38 = (void **)__dst[1];
              unint64_t v39 = __dst[0];
              if (__dst[1] != __dst[0])
              {
                do
                {
                  if (*((char *)v38 - 1) < 0) {
                    operator delete(*(v38 - 3));
                  }
                  v38 -= 3;
                }
                while (v38 != v37);
                unint64_t v39 = __dst[0];
              }
              __dst[1] = v37;
              goto LABEL_82;
            }
            return;
          }
LABEL_33:
          if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
          goto LABEL_58;
        }
        sub_8A948C(a1, a5);
      }
      uint64_t v15 = (std::__shared_weak_count *)*((void *)&v72 + 1);
      if (!*((void *)&v72 + 1)) {
        goto LABEL_58;
      }
      goto LABEL_33;
    }
  }
  else if (*(unsigned char *)(a1 + 2872))
  {
    goto LABEL_12;
  }
  if (!*(unsigned char *)(a1 + 2125)) {
    goto LABEL_12;
  }
  if (a2)
  {
    if ((byte_25CDA47 & 0x80000000) == 0)
    {
      uint64_t v8 = &xmmword_25CDA30;
LABEL_52:
      *(_OWORD *)long long __dst = *v8;
      unint64_t v58 = *((void *)v8 + 2);
      goto LABEL_99;
    }
    int v27 = &xmmword_25CDA30;
    goto LABEL_98;
  }
  if (!a4)
  {
    if ((byte_25CDA5F & 0x80000000) == 0)
    {
      uint64_t v8 = &xmmword_25CDA48;
      goto LABEL_52;
    }
    int v27 = &xmmword_25CDA48;
LABEL_98:
    sub_4200(__dst, *(void **)v27, *((void *)v27 + 1));
    goto LABEL_99;
  }
  int v16 = byte_25CCF07;
  if (byte_25CCF07 >= 0) {
    size_t v17 = byte_25CCF07;
  }
  else {
    size_t v17 = *((void *)&xmmword_25CCEF0 + 1);
  }
  int v18 = byte_25CDA5F;
  if (byte_25CDA5F >= 0) {
    size_t v19 = byte_25CDA5F;
  }
  else {
    size_t v19 = *((void *)&xmmword_25CDA48 + 1);
  }
  unint64_t v20 = v19 + v17;
  if (v19 + v17 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v20 > 0x16)
  {
    uint64_t v40 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17) {
      uint64_t v40 = v20 | 7;
    }
    uint64_t v41 = v40 + 1;
    std::string::size_type v21 = (char *)operator new(v40 + 1);
    __dst[1] = (void *)(v19 + v17);
    unint64_t v58 = v41 | 0x8000000000000000;
    __dst[0] = v21;
  }
  else
  {
    __dst[1] = 0;
    unint64_t v58 = 0;
    __dst[0] = 0;
    std::string::size_type v21 = (char *)__dst;
    HIBYTE(v58) = v19 + v17;
  }
  if (v17)
  {
    if (v16 >= 0) {
      size_t v42 = &xmmword_25CCEF0;
    }
    else {
      size_t v42 = (long long *)xmmword_25CCEF0;
    }
    memmove(v21, v42, v17);
  }
  uint64_t v43 = &v21[v17];
  if (v19)
  {
    if (v18 >= 0) {
      uint64_t v44 = &xmmword_25CDA48;
    }
    else {
      uint64_t v44 = (long long *)xmmword_25CDA48;
    }
    memmove(v43, v44, v19);
  }
  v43[v19] = 0;
LABEL_99:
  uint64_t v62 = 0;
  char v63 = 0;
  sub_6370D4(&__p, a1 + 80, 1, &v62);
  uint64_t v45 = v63;
  if (v63 && !atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
  sub_80A078(a1, (uint64_t *)&__p, 0, 0);
  sub_8A5178((uint64_t)&__p, (uint64_t)__dst, a5);
  uint64_t v46 = (std::__shared_weak_count *)*((void *)&v72 + 1);
  if (*((void *)&v72 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v72 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
  }
  std::string::size_type v47 = v67;
  if (v67)
  {
    do
    {
      long long v48 = (void *)*v47;
      sub_4F4B48((uint64_t)(v47 + 2));
      operator delete(v47);
      std::string::size_type v47 = v48;
    }
    while (v48);
  }
  long long v49 = v65;
  std::string::size_type v65 = 0;
  if (v49) {
    operator delete(v49);
  }
  std::string::size_type v50 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v51 = __p.__r_.__value_.__l.__size_;
    std::string::size_type v52 = (void *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v51 - 1) < 0) {
          operator delete(*(void **)(v51 - 24));
        }
        v51 -= 24;
      }
      while (v51 != v50);
      std::string::size_type v52 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    __p.__r_.__value_.__l.__size_ = v50;
    operator delete(v52);
  }
  if (SHIBYTE(v58) < 0)
  {
    unint64_t v39 = __dst[0];
LABEL_82:
    operator delete(v39);
  }
}

void sub_8A6688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_8A6744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  _Unwind_Resume(a1);
}

void sub_8A677C(unsigned char *a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void ***__return_ptr))(*(void *)a1 + 168))(&v45);
  uint64_t v4 = 288;
  if (!a1[2873]) {
    uint64_t v4 = 294;
  }
  uint64_t v5 = &qword_25CDA18;
  if (a1[2873]) {
    uint64_t v5 = &qword_25CDA00;
  }
  uint64_t v6 = (char *)&unk_25CDA17;
  if (!a1[2873]) {
    uint64_t v6 = (char *)&xmmword_25CDA20 + 15;
  }
  if (*v6 < 0)
  {
    if (a1[2873]) {
      int v7 = (unint64_t *)&unk_25CDA08;
    }
    else {
      int v7 = (unint64_t *)&xmmword_25CDA20;
    }
    sub_4200(&__dst, *(void **)&dword_25CD580[v4], *v7);
  }
  else
  {
    long long __dst = *(_OWORD *)v5;
    uint64_t v44 = v5[2];
  }
  sub_8A5178((uint64_t)&v45, (uint64_t)&__dst, (uint64_t)&v38);
  uint64_t v8 = 306;
  if (!a1[2873]) {
    uint64_t v8 = 309;
  }
  int v9 = &qword_25CEF18;
  if (a1[2873]) {
    int v9 = &qword_25CEF00;
  }
  BOOL v10 = (char *)&unk_25CEF17;
  if (!a1[2873]) {
    BOOL v10 = (char *)&unk_25CEF2F;
  }
  if (*v10 < 0)
  {
    if (a1[2873]) {
      int v11 = (unint64_t *)&unk_25CEF08;
    }
    else {
      int v11 = (unint64_t *)&unk_25CEF20;
    }
    sub_4200(v36, (void *)qword_25CE570[v8], *v11);
  }
  else
  {
    *(_OWORD *)uint64_t v36 = *(_OWORD *)v9;
    uint64_t v37 = v9[2];
  }
  *(_OWORD *)std::string __p = 0u;
  long long v34 = 0u;
  int v35 = 1065353216;
  size_t v12 = (std::__shared_weak_count *)operator new(0x80uLL);
  v12->__shared_owners_ = 0;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
  sub_63D394((uint64_t)&v50, (uint64_t)&v12[1], (uint64_t)&v38);
  std::string::size_type v31 = &v12[1].__vftable;
  uint64_t v32 = v12;
  sub_6373D8(a2, (uint64_t)v36, (uint64_t)__p, 5, (uint64_t *)&v31);
  uint64_t v13 = v32;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = (void *)v34;
  if ((void)v34)
  {
    do
    {
      uint64_t v15 = (void *)*v14;
      sub_4F4B48((uint64_t)(v14 + 2));
      operator delete(v14);
      uint64_t v14 = v15;
    }
    while (v15);
  }
  int v16 = __p[0];
  __p[0] = 0;
  if (v16) {
    operator delete(v16);
  }
  if (SHIBYTE(v37) < 0) {
    operator delete(v36[0]);
  }
  size_t v17 = v42;
  if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  int v18 = v41;
  if (v41)
  {
    do
    {
      size_t v19 = (void *)*v18;
      sub_4F4B48((uint64_t)(v18 + 2));
      operator delete(v18);
      int v18 = v19;
    }
    while (v19);
  }
  unint64_t v20 = v40;
  uint64_t v40 = 0;
  if (v20) {
    operator delete(v20);
  }
  std::string::size_type v21 = (void **)v38;
  if (v38)
  {
    uint64_t v22 = v39;
    unint64_t v23 = v38;
    if (v39 != v38)
    {
      do
      {
        if (*((char *)v22 - 1) < 0) {
          operator delete(*(v22 - 3));
        }
        v22 -= 3;
      }
      while (v22 != v21);
      unint64_t v23 = v38;
    }
    unint64_t v39 = v21;
    operator delete(v23);
  }
  if (SHIBYTE(v44) < 0) {
    operator delete((void *)__dst);
  }
  std::string::size_type v24 = v49;
  if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  uint64_t v25 = v48;
  if (v48)
  {
    do
    {
      unint64_t v26 = (void *)*v25;
      sub_4F4B48((uint64_t)(v25 + 2));
      operator delete(v25);
      uint64_t v25 = v26;
    }
    while (v26);
  }
  int v27 = v47;
  std::string::size_type v47 = 0;
  if (v27) {
    operator delete(v27);
  }
  uint64_t v28 = v45;
  if (v45)
  {
    uint64_t v29 = v46;
    uint64_t v30 = v45;
    if (v46 != v45)
    {
      do
      {
        if (*((char *)v29 - 1) < 0) {
          operator delete(*(v29 - 3));
        }
        v29 -= 3;
      }
      while (v29 != v28);
      uint64_t v30 = v45;
    }
    uint64_t v46 = v28;
    operator delete(v30);
  }
}

void sub_8A6B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23)
{
  sub_4F31D0(&a23);
  if (*(char *)(v23 - 153) < 0) {
    operator delete(*(void **)(v23 - 176));
  }
  sub_4F31D0((void **)(v23 - 144));
  _Unwind_Resume(a1);
}

void sub_8A6BF8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!*(unsigned char *)(a1 + 2873))
  {
    if (*(unsigned char *)(a1 + 2874)) {
      uint64_t v4 = &qword_25CD958;
    }
    else {
      uint64_t v4 = &qword_25CD940;
    }
    if ((*((char *)v4 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_8:
    sub_4200(&__dst, (void *)*v4, v4[1]);
    goto LABEL_9;
  }
  uint64_t v4 = (uint64_t *)&xmmword_25CD928;
  if (byte_25CD93F < 0) {
    goto LABEL_8;
  }
LABEL_3:
  long long __dst = *(_OWORD *)v4;
  uint64_t v18 = v4[2];
LABEL_9:
  sub_8A5F40(&v12, a1, 1, 0, 0);
  sub_6379F8((uint64_t *)&v12, (char *)&qword_25CD400);
  sub_8A5178((uint64_t)&v12, (uint64_t)&__dst, a2);
  uint64_t v5 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = v15;
  if (v15)
  {
    do
    {
      int v7 = (void *)*v6;
      sub_4F4B48((uint64_t)(v6 + 2));
      operator delete(v6);
      uint64_t v6 = v7;
    }
    while (v7);
  }
  uint64_t v8 = __p;
  std::string __p = 0;
  if (v8) {
    operator delete(v8);
  }
  int v9 = (void **)v12;
  if (v12)
  {
    BOOL v10 = v13;
    int v11 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      int v11 = v12;
    }
    uint64_t v13 = v9;
    operator delete(v11);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_8A6D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (*(char *)(v10 - 25) < 0) {
    operator delete(*(void **)(v10 - 48));
  }
  _Unwind_Resume(exception_object);
}

void sub_8A6DC8(std::string::size_type a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v5 = sub_63A8F8(a2);
  uint64_t v6 = 309;
  if (v5) {
    uint64_t v6 = 306;
  }
  int v7 = &qword_25CEF18;
  if (v5) {
    int v7 = &qword_25CEF00;
  }
  uint64_t v8 = (char *)&unk_25CEF2F;
  if (v5) {
    uint64_t v8 = (char *)&unk_25CEF17;
  }
  if (*v8 < 0)
  {
    int v9 = (void *)qword_25CE570[v6];
    uint64_t v10 = 309;
    if (v5) {
      uint64_t v10 = 306;
    }
    sub_4200(&__dst, v9, qword_25CE570[v10 + 1]);
  }
  else
  {
    long long __dst = *(_OWORD *)v7;
    uint64_t v47 = v7[2];
  }
  long long v43 = 0u;
  long long v44 = 0u;
  int v45 = 1065353216;
  int v11 = sub_897368(a1);
  sub_8A5F40(a1, 0, 0, 0, (uint64_t)v30);
  size_t v12 = (char *)operator new(0x80uLL);
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *(void *)size_t v12 = off_243A0E0;
  *(_OWORD *)(v12 + 24) = *(_OWORD *)v30;
  v30[0] = 0;
  v30[1] = 0;
  uint64_t v14 = v31;
  uint64_t v13 = __p;
  unint64_t v15 = v33;
  int v16 = v34;
  std::string __p = 0;
  unint64_t v33 = 0;
  uint64_t v31 = 0;
  *((void *)v12 + 5) = v14;
  *((void *)v12 + 6) = v13;
  *((void *)v12 + 7) = v15;
  *((void *)v12 + 8) = v16;
  uint64_t v17 = v35;
  *((void *)v12 + 9) = v35;
  *((_DWORD *)v12 + 20) = v36;
  if (v17)
  {
    unint64_t v18 = v16[1];
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v18 >= v15) {
        v18 %= v15;
      }
    }
    else
    {
      v18 &= v15 - 1;
    }
    v13[v18] = v12 + 64;
    long long v34 = 0;
    uint64_t v35 = 0;
  }
  v12[88] = v37;
  *((_DWORD *)v12 + 24) = v38;
  *(_OWORD *)(v12 + 104) = v39;
  long long v39 = 0uLL;
  *((_WORD *)v12 + 60) = v40;
  uint64_t v41 = v12 + 24;
  size_t v42 = (std::__shared_weak_count *)v12;
  sub_6373D8(a3, (uint64_t)&__dst, (uint64_t)&v43, v11, (uint64_t *)&v41);
  size_t v19 = v42;
  if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  unint64_t v20 = (std::__shared_weak_count *)*((void *)&v39 + 1);
  if (*((void *)&v39 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v39 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  std::string::size_type v21 = v34;
  if (v34)
  {
    do
    {
      uint64_t v22 = (void *)*v21;
      sub_4F4B48((uint64_t)(v21 + 2));
      operator delete(v21);
      std::string::size_type v21 = v22;
    }
    while (v22);
  }
  uint64_t v23 = __p;
  std::string __p = 0;
  if (v23) {
    operator delete(v23);
  }
  std::string::size_type v24 = (void **)v30[0];
  if (v30[0])
  {
    uint64_t v25 = (void **)v30[1];
    unint64_t v26 = v30[0];
    if (v30[1] != v30[0])
    {
      do
      {
        if (*((char *)v25 - 1) < 0) {
          operator delete(*(v25 - 3));
        }
        v25 -= 3;
      }
      while (v25 != v24);
      unint64_t v26 = v30[0];
    }
    v30[1] = v24;
    operator delete(v26);
  }
  int v27 = (void *)v44;
  if ((void)v44)
  {
    do
    {
      uint64_t v28 = (void *)*v27;
      sub_4F4B48((uint64_t)(v27 + 2));
      operator delete(v27);
      int v27 = v28;
    }
    while (v28);
  }
  uint64_t v29 = (void *)v43;
  *(void *)&long long v43 = 0;
  if (v29) {
    operator delete(v29);
  }
  if (SHIBYTE(v47) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_8A70F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  sub_14A84((uint64_t)&a23);
  sub_4F31D0(&a9);
  sub_4DD068(v23 - 112);
  if (*(char *)(v23 - 41) < 0) {
    operator delete(*(void **)(v23 - 64));
  }
  _Unwind_Resume(a1);
}

void sub_8A713C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v5 = sub_63A8F8(a2);
  uint64_t v6 = 309;
  if (v5) {
    uint64_t v6 = 306;
  }
  int v7 = &qword_25CEF18;
  if (v5) {
    int v7 = &qword_25CEF00;
  }
  uint64_t v8 = (char *)&unk_25CEF2F;
  if (v5) {
    uint64_t v8 = (char *)&unk_25CEF17;
  }
  if (*v8 < 0)
  {
    int v9 = (void *)qword_25CE570[v6];
    uint64_t v10 = 309;
    if (v5) {
      uint64_t v10 = 306;
    }
    sub_4200(&__dst, v9, qword_25CE570[v10 + 1]);
  }
  else
  {
    long long __dst = *(_OWORD *)v7;
    uint64_t v47 = v7[2];
  }
  long long v43 = 0u;
  long long v44 = 0u;
  int v45 = 1065353216;
  int v11 = sub_897368(a1);
  (*(void (**)(void **__return_ptr, uint64_t, void, void))(*(void *)a1 + 168))(v30, a1, 0, 0);
  size_t v12 = (char *)operator new(0x80uLL);
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *(void *)size_t v12 = off_243A0E0;
  *(_OWORD *)(v12 + 24) = *(_OWORD *)v30;
  v30[0] = 0;
  v30[1] = 0;
  uint64_t v14 = v31;
  uint64_t v13 = __p;
  unint64_t v15 = v33;
  int v16 = v34;
  std::string __p = 0;
  unint64_t v33 = 0;
  uint64_t v31 = 0;
  *((void *)v12 + 5) = v14;
  *((void *)v12 + 6) = v13;
  *((void *)v12 + 7) = v15;
  *((void *)v12 + 8) = v16;
  uint64_t v17 = v35;
  *((void *)v12 + 9) = v35;
  *((_DWORD *)v12 + 20) = v36;
  if (v17)
  {
    unint64_t v18 = v16[1];
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v18 >= v15) {
        v18 %= v15;
      }
    }
    else
    {
      v18 &= v15 - 1;
    }
    v13[v18] = v12 + 64;
    long long v34 = 0;
    uint64_t v35 = 0;
  }
  v12[88] = v37;
  *((_DWORD *)v12 + 24) = v38;
  *(_OWORD *)(v12 + 104) = v39;
  long long v39 = 0uLL;
  *((_WORD *)v12 + 60) = v40;
  uint64_t v41 = v12 + 24;
  size_t v42 = (std::__shared_weak_count *)v12;
  sub_6373D8(a3, (uint64_t)&__dst, (uint64_t)&v43, v11, (uint64_t *)&v41);
  size_t v19 = v42;
  if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  unint64_t v20 = (std::__shared_weak_count *)*((void *)&v39 + 1);
  if (*((void *)&v39 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v39 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  std::string::size_type v21 = v34;
  if (v34)
  {
    do
    {
      uint64_t v22 = (void *)*v21;
      sub_4F4B48((uint64_t)(v21 + 2));
      operator delete(v21);
      std::string::size_type v21 = v22;
    }
    while (v22);
  }
  uint64_t v23 = __p;
  std::string __p = 0;
  if (v23) {
    operator delete(v23);
  }
  std::string::size_type v24 = (void **)v30[0];
  if (v30[0])
  {
    uint64_t v25 = (void **)v30[1];
    unint64_t v26 = v30[0];
    if (v30[1] != v30[0])
    {
      do
      {
        if (*((char *)v25 - 1) < 0) {
          operator delete(*(v25 - 3));
        }
        v25 -= 3;
      }
      while (v25 != v24);
      unint64_t v26 = v30[0];
    }
    v30[1] = v24;
    operator delete(v26);
  }
  int v27 = (void *)v44;
  if ((void)v44)
  {
    do
    {
      uint64_t v28 = (void *)*v27;
      sub_4F4B48((uint64_t)(v27 + 2));
      operator delete(v27);
      int v27 = v28;
    }
    while (v28);
  }
  uint64_t v29 = (void *)v43;
  *(void *)&long long v43 = 0;
  if (v29) {
    operator delete(v29);
  }
  if (SHIBYTE(v47) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_8A7484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  sub_14A84((uint64_t)&a23);
  sub_4F31D0(&a9);
  sub_4DD068(v23 - 112);
  if (*(char *)(v23 - 41) < 0) {
    operator delete(*(void **)(v23 - 64));
  }
  _Unwind_Resume(a1);
}

void sub_8A74CC(std::string::size_type a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  sub_8A5F40(a1, 0, 0, 1, (uint64_t)&v21);
  *(_OWORD *)std::string __p = 0u;
  long long v19 = 0u;
  int v20 = 1065353216;
  LODWORD(v2) = sub_897368(v2);
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x80uLL);
  v4->__shared_owners_ = 0;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
  sub_63D394((uint64_t)&v26, (uint64_t)&v4[1], (uint64_t)&v21);
  int v16 = &v4[1].__vftable;
  uint64_t v17 = v4;
  sub_6373D8(a2, (uint64_t)&unk_25CEF30, (uint64_t)__p, v2, (uint64_t *)&v16);
  BOOL v5 = v17;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (void *)v19;
  if ((void)v19)
  {
    do
    {
      int v7 = (void *)*v6;
      sub_4F4B48((uint64_t)(v6 + 2));
      operator delete(v6);
      uint64_t v6 = v7;
    }
    while (v7);
  }
  uint64_t v8 = __p[0];
  __p[0] = 0;
  if (v8) {
    operator delete(v8);
  }
  int v9 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = v24;
  if (v24)
  {
    do
    {
      int v11 = (void *)*v10;
      sub_4F4B48((uint64_t)(v10 + 2));
      operator delete(v10);
      uint64_t v10 = v11;
    }
    while (v11);
  }
  size_t v12 = v23;
  uint64_t v23 = 0;
  if (v12) {
    operator delete(v12);
  }
  uint64_t v13 = (void **)v21;
  if (v21)
  {
    uint64_t v14 = v22;
    unint64_t v15 = v21;
    if (v22 != v21)
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      unint64_t v15 = v21;
    }
    uint64_t v22 = v13;
    operator delete(v15);
  }
}

void sub_8A76D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
}

void sub_8A76F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  std::__shared_weak_count::~__shared_weak_count(v17);
  operator delete(v19);
  sub_4DD068((uint64_t)&a11);
  sub_4F31D0(&a17);
  _Unwind_Resume(a1);
}

void sub_8A771C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_4DD068((uint64_t)va);
  sub_4F31D0((void **)va1);
  _Unwind_Resume(a1);
}

void sub_8A7738(uint64_t a1@<X8>)
{
  sub_6352AC((uint64_t)&v11, (uint64_t)&qword_25CFBE0);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  sub_6370D4(a1, &v11, 1, &v9);
  uint64_t v2 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  int v3 = v14;
  if (v14)
  {
    do
    {
      uint64_t v4 = (void *)*v3;
      sub_4F4B48((uint64_t)(v3 + 2));
      operator delete(v3);
      int v3 = v4;
    }
    while (v4);
  }
  BOOL v5 = __p;
  std::string __p = 0;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = (void **)v11;
  if (v11)
  {
    uint64_t v7 = v12;
    uint64_t v8 = v11;
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      uint64_t v8 = v11;
    }
    size_t v12 = v6;
    operator delete(v8);
  }
}

void sub_8A784C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  _Unwind_Resume(a1);
}

void sub_8A7868(uint64_t a1@<X8>)
{
  sub_6352AC((uint64_t)&v11, (uint64_t)&qword_25CFBF8);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  sub_6370D4(a1, &v11, 1, &v9);
  uint64_t v2 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = v14;
  if (v14)
  {
    do
    {
      uint64_t v4 = (void *)*v3;
      sub_4F4B48((uint64_t)(v3 + 2));
      operator delete(v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  uint64_t v5 = __p;
  std::string __p = 0;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = (void **)v11;
  if (v11)
  {
    uint64_t v7 = v12;
    uint64_t v8 = v11;
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      uint64_t v8 = v11;
    }
    size_t v12 = v6;
    operator delete(v8);
  }
}

void sub_8A797C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  _Unwind_Resume(a1);
}

void sub_8A7998(uint64_t a1@<X8>)
{
  int v2 = byte_25CFBC8[23];
  if (byte_25CFBC8[23] >= 0) {
    size_t v3 = byte_25CFBC8[23];
  }
  else {
    size_t v3 = *(void *)&byte_25CFBC8[8];
  }
  int v4 = byte_25CD72F;
  if (byte_25CD72F >= 0) {
    size_t v5 = byte_25CD72F;
  }
  else {
    size_t v5 = qword_25CD720;
  }
  unint64_t v6 = v5 + v3;
  if (v5 + v3 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v6 <= 0x16)
  {
    size_t v23 = 0;
    unint64_t v24 = 0;
    long long __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v24) = v5 + v3;
    if (!v3) {
      goto LABEL_18;
    }
    goto LABEL_14;
  }
  uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v6 | 7) != 0x17) {
    uint64_t v8 = v6 | 7;
  }
  uint64_t v9 = v8 + 1;
  p_dst = (void **)operator new(v8 + 1);
  size_t v23 = v5 + v3;
  unint64_t v24 = v9 | 0x8000000000000000;
  long long __dst = p_dst;
  if (v3)
  {
LABEL_14:
    if (v2 >= 0) {
      uint64_t v10 = byte_25CFBC8;
    }
    else {
      uint64_t v10 = *(char **)byte_25CFBC8;
    }
    memmove(p_dst, v10, v3);
  }
LABEL_18:
  int v11 = (char *)p_dst + v3;
  if (v5)
  {
    if (v4 >= 0) {
      size_t v12 = &qword_25CD718;
    }
    else {
      size_t v12 = (uint64_t *)qword_25CD718;
    }
    memmove(v11, v12, v5);
  }
  v11[v5] = 0;
  sub_6352AC((uint64_t)&v25, (uint64_t)&__dst);
  uint64_t v20 = 0;
  std::string::size_type v21 = 0;
  sub_6370D4(a1, &v25, 1, &v20);
  uint64_t v13 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = v28;
  if (v28)
  {
    do
    {
      unint64_t v15 = (void *)*v14;
      sub_4F4B48((uint64_t)(v14 + 2));
      operator delete(v14);
      uint64_t v14 = v15;
    }
    while (v15);
  }
  int v16 = __p;
  std::string __p = 0;
  if (v16) {
    operator delete(v16);
  }
  uint64_t v17 = (void **)v25;
  if (v25)
  {
    unint64_t v18 = v26;
    long long v19 = v25;
    if (v26 != v25)
    {
      do
      {
        if (*((char *)v18 - 1) < 0) {
          operator delete(*(v18 - 3));
        }
        v18 -= 3;
      }
      while (v18 != v17);
      long long v19 = v25;
    }
    char v26 = v17;
    operator delete(v19);
  }
  if (SHIBYTE(v24) < 0) {
    operator delete(__dst);
  }
}

void sub_8A7BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_8A7BF4(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (sub_63A998(a2))
  {
    uint64_t v93 = 0;
    long long v91 = 0u;
    long long v92 = 0u;
    long long v90 = 0u;
    int v94 = 1065353216;
    char v95 = 1;
    unsigned int v8 = sub_63A824(a2);
    std::to_string(&v87, v8);
    sub_6358F0((uint64_t)&v90, (long long *)&dword_25CFD60, &v87, &v87);
    if (byte_25CFBC8[23] < 0) {
      sub_4200(&v86, *(void **)byte_25CFBC8, *(unint64_t *)&byte_25CFBC8[8]);
    }
    else {
      std::string v86 = *(std::string *)byte_25CFBC8;
    }
    uint64_t v28 = 231;
    if (!*(unsigned char *)(a2 + 96)) {
      uint64_t v28 = 228;
    }
    uint64_t v29 = (const std::string::value_type *)&unk_25CFCA0;
    if (!*(unsigned char *)(a2 + 96)) {
      uint64_t v29 = (const std::string::value_type *)&unk_25CFC88;
    }
    uint64_t v30 = &byte_25CFC9F;
    if (*(unsigned char *)(a2 + 96)) {
      uint64_t v30 = &byte_25CFCB7;
    }
    std::string::size_type v31 = *v30;
    uint64_t v32 = qword_25CF568[v28];
    unint64_t v33 = (std::string::size_type *)&unk_25CFCA8;
    if (!*(unsigned char *)(a2 + 96)) {
      unint64_t v33 = (std::string::size_type *)&unk_25CFC90;
    }
    std::string::size_type v34 = *v33;
    if ((v31 & 0x80u) == 0) {
      uint64_t v35 = v29;
    }
    else {
      uint64_t v35 = (const std::string::value_type *)v32;
    }
    if ((v31 & 0x80u) == 0) {
      std::string::size_type v36 = v31;
    }
    else {
      std::string::size_type v36 = v34;
    }
    std::string::append(&v86, v35, v36);
    unsigned int v37 = sub_63A824(a2);
    switch(sub_64E00(v37, *(_DWORD *)(*(void *)(a1 + 1960) + 1000)))
    {
      case 0u:
        int v38 = &qword_25CFCD0;
        goto LABEL_64;
      case 1u:
        int v38 = &qword_25CFCE8;
        goto LABEL_64;
      case 2u:
        int v38 = &qword_25CFD00;
        goto LABEL_64;
      case 3u:
        int v38 = &qword_25CFD18;
        goto LABEL_64;
      case 4u:
        int v38 = &qword_25CFD30;
LABEL_64:
        int v39 = *((char *)v38 + 23);
        if (v39 >= 0) {
          __int16 v40 = (const std::string::value_type *)v38;
        }
        else {
          __int16 v40 = (const std::string::value_type *)*v38;
        }
        if (v39 >= 0) {
          std::string::size_type v41 = *((unsigned __int8 *)v38 + 23);
        }
        else {
          std::string::size_type v41 = v38[1];
        }
        std::string::append(&v86, v40, v41);
        break;
      default:
        break;
    }
    int v42 = SHIBYTE(v86.__r_.__value_.__r.__words[2]);
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v86.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v86.__r_.__value_.__l.__size_;
    }
    int v44 = byte_25CD72F;
    if (byte_25CD72F >= 0) {
      size_t v45 = byte_25CD72F;
    }
    else {
      size_t v45 = qword_25CD720;
    }
    unint64_t v46 = v45 + size;
    if (v45 + size > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v46 > 0x16)
    {
      uint64_t v66 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v46 | 7) != 0x17) {
        uint64_t v66 = v46 | 7;
      }
      uint64_t v67 = v66 + 1;
      p_dst = (void **)operator new(v66 + 1);
      uint64_t v82 = (void **)(v45 + size);
      unint64_t v83 = v67 | 0x8000000000000000;
      long long __dst = p_dst;
      if (!size)
      {
LABEL_84:
        long long v49 = (char *)p_dst + size;
        if (v45)
        {
          if (v44 >= 0) {
            char v50 = &qword_25CD718;
          }
          else {
            char v50 = (uint64_t *)qword_25CD718;
          }
          memmove(v49, v50, v45);
        }
        v49[v45] = 0;
        sub_635560((uint64_t)&v90, (uint64_t)&__dst);
        if (SHIBYTE(v83) < 0)
        {
          operator delete(__dst);
          if (a3)
          {
LABEL_91:
            int v51 = byte_25CFCCF;
            if (byte_25CFCCF >= 0) {
              size_t v52 = byte_25CFCCF;
            }
            else {
              size_t v52 = qword_25CFCC0;
            }
            int v53 = byte_25CD72F;
            if (byte_25CD72F >= 0) {
              size_t v54 = byte_25CD72F;
            }
            else {
              size_t v54 = qword_25CD720;
            }
            unint64_t v55 = v54 + v52;
            if (v54 + v52 > 0x7FFFFFFFFFFFFFF7) {
              sub_188D690();
            }
            if (v55 > 0x16)
            {
              uint64_t v69 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v55 | 7) != 0x17) {
                uint64_t v69 = v55 | 7;
              }
              uint64_t v70 = v69 + 1;
              p_p = (char *)operator new(v69 + 1);
              size_t v79 = v54 + v52;
              unint64_t v80 = v70 | 0x8000000000000000;
              std::string __p = p_p;
              if (!v52) {
                goto LABEL_104;
              }
            }
            else
            {
              size_t v79 = 0;
              unint64_t v80 = 0;
              std::string __p = 0;
              p_p = (char *)&__p;
              HIBYTE(v80) = v54 + v52;
              if (!v52)
              {
LABEL_104:
                unint64_t v58 = &p_p[v52];
                if (v54)
                {
                  if (v53 >= 0) {
                    unint64_t v59 = &qword_25CD718;
                  }
                  else {
                    unint64_t v59 = (uint64_t *)qword_25CD718;
                  }
                  memmove(v58, v59, v54);
                }
                v58[v54] = 0;
                sub_6352AC((uint64_t)&__dst, (uint64_t)&__p);
                if (SHIBYTE(v80) < 0) {
                  operator delete(__p);
                }
                sub_6376A0(a4, &v90, 14, &__dst, 1);
                char v60 = v85;
                if (v85)
                {
                  do
                  {
                    char v61 = (void *)*v60;
                    sub_4F4B48((uint64_t)(v60 + 2));
                    operator delete(v60);
                    char v60 = v61;
                  }
                  while (v61);
                }
                uint64_t v62 = v84;
                char v84 = 0;
                if (v62) {
                  operator delete(v62);
                }
                char v63 = __dst;
                if (__dst)
                {
                  char v64 = v82;
                  std::string::size_type v65 = __dst;
                  if (v82 != __dst)
                  {
                    do
                    {
                      if (*((char *)v64 - 1) < 0) {
                        operator delete(*(v64 - 3));
                      }
                      v64 -= 3;
                    }
                    while (v64 != v63);
                    std::string::size_type v65 = __dst;
                  }
                  uint64_t v82 = v63;
                  operator delete(v65);
                }
                goto LABEL_135;
              }
            }
            if (v51 >= 0) {
              uint64_t v57 = &qword_25CFCB8;
            }
            else {
              uint64_t v57 = (uint64_t *)qword_25CFCB8;
            }
            memmove(p_p, v57, v52);
            goto LABEL_104;
          }
        }
        else if (a3)
        {
          goto LABEL_91;
        }
        uint64_t v76 = 0;
        char v77 = 0;
        sub_6370D4(a4, &v90, 1, &v76);
        uint64_t v68 = v77;
        if (v77 && !atomic_fetch_add(&v77->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
LABEL_135:
        if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v86.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_137:
            int v71 = (void *)*((void *)&v92 + 1);
            if (!*((void *)&v92 + 1)) {
              goto LABEL_139;
            }
            do
            {
LABEL_138:
              long long v72 = (void *)*v71;
              sub_4F4B48((uint64_t)(v71 + 2));
              operator delete(v71);
              int v71 = v72;
            }
            while (v72);
LABEL_139:
            __int16 v73 = (void *)*((void *)&v91 + 1);
            *((void *)&v91 + 1) = 0;
            if (v73) {
              operator delete(v73);
            }
            uint64_t v74 = v90;
            if ((void)v90)
            {
              uint64_t v75 = *((void *)&v90 + 1);
              int v27 = (void **)v90;
              if (*((void *)&v90 + 1) != (void)v90)
              {
                do
                {
                  if (*(char *)(v75 - 1) < 0) {
                    operator delete(*(void **)(v75 - 24));
                  }
                  v75 -= 24;
                }
                while (v75 != v74);
                int v27 = (void **)v90;
              }
              *((void *)&v90 + 1) = v74;
              goto LABEL_149;
            }
            return;
          }
        }
        else if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_137;
        }
        operator delete(v87.__r_.__value_.__l.__data_);
        int v71 = (void *)*((void *)&v92 + 1);
        if (!*((void *)&v92 + 1)) {
          goto LABEL_139;
        }
        goto LABEL_138;
      }
    }
    else
    {
      uint64_t v82 = 0;
      unint64_t v83 = 0;
      long long __dst = 0;
      p_dst = (void **)&__dst;
      HIBYTE(v83) = v45 + size;
      if (!size) {
        goto LABEL_84;
      }
    }
    if (v42 >= 0) {
      long long v48 = &v86;
    }
    else {
      long long v48 = (std::string *)v86.__r_.__value_.__r.__words[0];
    }
    memmove(p_dst, v48, size);
    goto LABEL_84;
  }
  int v9 = byte_25CFBC8[23];
  if (byte_25CFBC8[23] >= 0) {
    size_t v10 = byte_25CFBC8[23];
  }
  else {
    size_t v10 = *(void *)&byte_25CFBC8[8];
  }
  int v11 = byte_25CD72F;
  if (byte_25CD72F >= 0) {
    size_t v12 = byte_25CD72F;
  }
  else {
    size_t v12 = qword_25CD720;
  }
  unint64_t v13 = v12 + v10;
  if (v12 + v10 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v13 <= 0x16)
  {
    uint64_t v82 = 0;
    unint64_t v83 = 0;
    long long __dst = 0;
    uint64_t v14 = (void **)&__dst;
    HIBYTE(v83) = v12 + v10;
    if (!v10) {
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  uint64_t v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v13 | 7) != 0x17) {
    uint64_t v15 = v13 | 7;
  }
  uint64_t v16 = v15 + 1;
  uint64_t v14 = (void **)operator new(v15 + 1);
  uint64_t v82 = (void **)(v12 + v10);
  unint64_t v83 = v16 | 0x8000000000000000;
  long long __dst = v14;
  if (v10)
  {
LABEL_17:
    if (v9 >= 0) {
      uint64_t v17 = byte_25CFBC8;
    }
    else {
      uint64_t v17 = *(char **)byte_25CFBC8;
    }
    memmove(v14, v17, v10);
  }
LABEL_21:
  unint64_t v18 = (char *)v14 + v10;
  if (v12)
  {
    if (v11 >= 0) {
      long long v19 = &qword_25CD718;
    }
    else {
      long long v19 = (uint64_t *)qword_25CD718;
    }
    memmove(v18, v19, v12);
  }
  v18[v12] = 0;
  sub_6352AC((uint64_t)&v90, (uint64_t)&__dst);
  uint64_t v88 = 0;
  int v89 = 0;
  sub_6370D4(a4, &v90, 1, &v88);
  uint64_t v20 = v89;
  if (v89 && !atomic_fetch_add(&v89->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  std::string::size_type v21 = (void *)*((void *)&v92 + 1);
  if (*((void *)&v92 + 1))
  {
    do
    {
      uint64_t v22 = (void *)*v21;
      sub_4F4B48((uint64_t)(v21 + 2));
      operator delete(v21);
      std::string::size_type v21 = v22;
    }
    while (v22);
  }
  size_t v23 = (void *)*((void *)&v91 + 1);
  *((void *)&v91 + 1) = 0;
  if (v23) {
    operator delete(v23);
  }
  uint64_t v24 = v90;
  if ((void)v90)
  {
    uint64_t v25 = *((void *)&v90 + 1);
    char v26 = (void *)v90;
    if (*((void *)&v90 + 1) != (void)v90)
    {
      do
      {
        if (*(char *)(v25 - 1) < 0) {
          operator delete(*(void **)(v25 - 24));
        }
        v25 -= 24;
      }
      while (v25 != v24);
      char v26 = (void *)v90;
    }
    *((void *)&v90 + 1) = v24;
    operator delete(v26);
  }
  if (SHIBYTE(v83) < 0)
  {
    int v27 = __dst;
LABEL_149:
    operator delete(v27);
  }
}

void sub_8A8388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  sub_4D4880((void **)(v41 - 160));
  _Unwind_Resume(a1);
}

void sub_8A8478(uint64_t a1@<X8>)
{
  sub_6352AC((uint64_t)&v11, (uint64_t)&qword_25CFC58);
  uint64_t v9 = 0;
  size_t v10 = 0;
  sub_6370D4(a1, &v11, 1, &v9);
  int v2 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  size_t v3 = v14;
  if (v14)
  {
    do
    {
      int v4 = (void *)*v3;
      sub_4F4B48((uint64_t)(v3 + 2));
      operator delete(v3);
      size_t v3 = v4;
    }
    while (v4);
  }
  size_t v5 = __p;
  std::string __p = 0;
  if (v5) {
    operator delete(v5);
  }
  unint64_t v6 = (void **)v11;
  if (v11)
  {
    uint64_t v7 = v12;
    unsigned int v8 = v11;
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      unsigned int v8 = v11;
    }
    size_t v12 = v6;
    operator delete(v8);
  }
}

void sub_8A858C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  _Unwind_Resume(a1);
}

void sub_8A85A8(uint64_t a1@<X8>)
{
  sub_6352AC((uint64_t)&v11, (uint64_t)&unk_25CFC70);
  uint64_t v9 = 0;
  size_t v10 = 0;
  sub_6370D4(a1, &v11, 1, &v9);
  int v2 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = v14;
  if (v14)
  {
    do
    {
      int v4 = (void *)*v3;
      sub_4F4B48((uint64_t)(v3 + 2));
      operator delete(v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  uint64_t v5 = __p;
  std::string __p = 0;
  if (v5) {
    operator delete(v5);
  }
  unint64_t v6 = (void **)v11;
  if (v11)
  {
    uint64_t v7 = v12;
    unsigned int v8 = v11;
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      unsigned int v8 = v11;
    }
    size_t v12 = v6;
    operator delete(v8);
  }
}

void sub_8A86BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  _Unwind_Resume(a1);
}

void sub_8A86D8(uint64_t a1@<X8>)
{
  sub_6352AC((uint64_t)&v11, (uint64_t)&qword_25CFC10);
  uint64_t v9 = 0;
  size_t v10 = 0;
  sub_6370D4(a1, &v11, 1, &v9);
  int v2 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = v14;
  if (v14)
  {
    do
    {
      int v4 = (void *)*v3;
      sub_4F4B48((uint64_t)(v3 + 2));
      operator delete(v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  uint64_t v5 = __p;
  std::string __p = 0;
  if (v5) {
    operator delete(v5);
  }
  unint64_t v6 = (void **)v11;
  if (v11)
  {
    uint64_t v7 = v12;
    unsigned int v8 = v11;
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      unsigned int v8 = v11;
    }
    size_t v12 = v6;
    operator delete(v8);
  }
}

void sub_8A87EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  _Unwind_Resume(a1);
}

void sub_8A8808(uint64_t a1@<X8>)
{
  sub_6352AC((uint64_t)&v11, (uint64_t)&qword_25CFC28);
  uint64_t v9 = 0;
  size_t v10 = 0;
  sub_6370D4(a1, &v11, 1, &v9);
  int v2 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = v14;
  if (v14)
  {
    do
    {
      int v4 = (void *)*v3;
      sub_4F4B48((uint64_t)(v3 + 2));
      operator delete(v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  uint64_t v5 = __p;
  std::string __p = 0;
  if (v5) {
    operator delete(v5);
  }
  unint64_t v6 = (void **)v11;
  if (v11)
  {
    uint64_t v7 = v12;
    unsigned int v8 = v11;
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      unsigned int v8 = v11;
    }
    size_t v12 = v6;
    operator delete(v8);
  }
}

void sub_8A891C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  _Unwind_Resume(a1);
}

void sub_8A8938(uint64_t a1@<X8>)
{
  sub_6352AC((uint64_t)&v11, (uint64_t)&qword_25CFC40);
  uint64_t v9 = 0;
  size_t v10 = 0;
  sub_6370D4(a1, &v11, 1, &v9);
  int v2 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = v14;
  if (v14)
  {
    do
    {
      int v4 = (void *)*v3;
      sub_4F4B48((uint64_t)(v3 + 2));
      operator delete(v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  uint64_t v5 = __p;
  std::string __p = 0;
  if (v5) {
    operator delete(v5);
  }
  unint64_t v6 = (void **)v11;
  if (v11)
  {
    uint64_t v7 = v12;
    unsigned int v8 = v11;
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      unsigned int v8 = v11;
    }
    size_t v12 = v6;
    operator delete(v8);
  }
}

void sub_8A8A4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  _Unwind_Resume(a1);
}

void sub_8A8A68(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 168))(&v26);
  sub_8A8D14(a2, (uint64_t)&v22);
  uint64_t v5 = (std::__shared_weak_count *)operator new(0x80uLL);
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
  sub_63D394((uint64_t)&v31, (uint64_t)&v5[1], (uint64_t)&v26);
  uint64_t v20 = &v5[1].__vftable;
  std::string::size_type v21 = v5;
  sub_6370D4(a3, &v22, 5, &v20);
  unint64_t v6 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = v25;
  if (v25)
  {
    do
    {
      unsigned int v8 = (void *)*v7;
      sub_4F4B48((uint64_t)(v7 + 2));
      operator delete(v7);
      uint64_t v7 = v8;
    }
    while (v8);
  }
  uint64_t v9 = __p;
  std::string __p = 0;
  if (v9) {
    operator delete(v9);
  }
  size_t v10 = (void **)v22;
  if (v22)
  {
    int v11 = v23;
    size_t v12 = v22;
    if (v23 != v22)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != v10);
      size_t v12 = v22;
    }
    size_t v23 = v10;
    operator delete(v12);
  }
  unint64_t v13 = v30;
  if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = v29;
  if (v29)
  {
    do
    {
      uint64_t v15 = (void *)*v14;
      sub_4F4B48((uint64_t)(v14 + 2));
      operator delete(v14);
      uint64_t v14 = v15;
    }
    while (v15);
  }
  uint64_t v16 = v28;
  uint64_t v28 = 0;
  if (v16) {
    operator delete(v16);
  }
  uint64_t v17 = (void **)v26;
  if (v26)
  {
    unint64_t v18 = v27;
    long long v19 = v26;
    if (v27 != v26)
    {
      do
      {
        if (*((char *)v18 - 1) < 0) {
          operator delete(*(v18 - 3));
        }
        v18 -= 3;
      }
      while (v18 != v17);
      long long v19 = v26;
    }
    int v27 = v17;
    operator delete(v19);
  }
}

void sub_8A8CC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  unint64_t v6 = va_arg(va2, void *);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  sub_4F31D0((void **)va2);
  _Unwind_Resume(a1);
}

void sub_8A8D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_8A8D14(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v4 = *(unsigned __int8 *)(a1 + 180);
  uint64_t v5 = 2280;
  if (!*(unsigned char *)(a1 + 182)) {
    uint64_t v5 = 2256;
  }
  unint64_t v6 = &qword_25CCE60;
  if (*(unsigned char *)(a1 + 182)) {
    unint64_t v6 = (uint64_t *)&xmmword_25CCE78;
  }
  uint64_t v7 = 2232;
  if (*(unsigned char *)(a1 + 180))
  {
    uint64_t v8 = &qword_25CCE48;
  }
  else
  {
    uint64_t v7 = v5;
    uint64_t v8 = v6;
  }
  if (*((char *)v8 + 23) < 0) {
    sub_4200(&__p, *(void **)((char *)&word_25CC590 + v7), v8[1]);
  }
  else {
    std::string __p = *(std::string *)v8;
  }
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 56) = 1065353216;
  *(unsigned char *)(a2 + 64) = 1;
  if (v4 && sub_63ACAC(a1))
  {
    if (byte_25CCEBF >= 0) {
      uint64_t v9 = (const std::string::value_type *)&qword_25CCEA8;
    }
    else {
      uint64_t v9 = (const std::string::value_type *)qword_25CCEA8;
    }
    if (byte_25CCEBF >= 0) {
      std::string::size_type v10 = byte_25CCEBF;
    }
    else {
      std::string::size_type v10 = unk_25CCEB0;
    }
    std::string::append(&__p, v9, v10);
    sub_635C08(a2, &xmmword_25CEB58, a1 + 8, 0);
  }
  if (byte_25CD7A7 >= 0) {
    uint64_t v11 = (const std::string::value_type *)&qword_25CD790;
  }
  else {
    uint64_t v11 = (const std::string::value_type *)qword_25CD790;
  }
  if (byte_25CD7A7 >= 0) {
    std::string::size_type v12 = byte_25CD7A7;
  }
  else {
    std::string::size_type v12 = qword_25CD798;
  }
  std::string::append(&__p, v11, v12);
  sub_6351E8((char **)a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_8A8E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  sub_4D4880(v14);
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_8A8EA4(std::string::size_type a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_8A5F40(a1, 0, 0, 0, (uint64_t)&v28);
  sub_8A8D14(a2, (uint64_t)&v24);
  uint64_t v6 = sub_897368(a1);
  uint64_t v7 = (std::__shared_weak_count *)operator new(0x80uLL);
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
  sub_63D394((uint64_t)&v33, (uint64_t)&v7[1], (uint64_t)&v28);
  uint64_t v22 = &v7[1].__vftable;
  size_t v23 = v7;
  sub_6370D4(a3, &v24, v6, &v22);
  uint64_t v8 = v23;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = v27;
  if (v27)
  {
    do
    {
      std::string::size_type v10 = (void *)*v9;
      sub_4F4B48((uint64_t)(v9 + 2));
      operator delete(v9);
      uint64_t v9 = v10;
    }
    while (v10);
  }
  uint64_t v11 = __p;
  std::string __p = 0;
  if (v11) {
    operator delete(v11);
  }
  std::string::size_type v12 = (void **)v24;
  if (v24)
  {
    uint64_t v13 = v25;
    uint64_t v14 = v24;
    if (v25 != v24)
    {
      do
      {
        if (*((char *)v13 - 1) < 0) {
          operator delete(*(v13 - 3));
        }
        v13 -= 3;
      }
      while (v13 != v12);
      uint64_t v14 = v24;
    }
    uint64_t v25 = v12;
    operator delete(v14);
  }
  uint64_t v15 = v32;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = v31;
  if (v31)
  {
    do
    {
      uint64_t v17 = (void *)*v16;
      sub_4F4B48((uint64_t)(v16 + 2));
      operator delete(v16);
      uint64_t v16 = v17;
    }
    while (v17);
  }
  unint64_t v18 = v30;
  uint64_t v30 = 0;
  if (v18) {
    operator delete(v18);
  }
  long long v19 = (void **)v28;
  if (v28)
  {
    uint64_t v20 = v29;
    std::string::size_type v21 = v28;
    if (v29 != v28)
    {
      do
      {
        if (*((char *)v20 - 1) < 0) {
          operator delete(*(v20 - 3));
        }
        v20 -= 3;
      }
      while (v20 != v19);
      std::string::size_type v21 = v28;
    }
    uint64_t v29 = v19;
    operator delete(v21);
  }
}

void sub_8A90F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void *);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  sub_4F31D0((void **)va2);
  _Unwind_Resume(a1);
}

void sub_8A9118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  std::__shared_weak_count::~__shared_weak_count(v21);
  operator delete(v23);
  sub_4D4880(&a12);
  sub_4F31D0(&a21);
  _Unwind_Resume(a1);
}

void sub_8A9140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_8A9154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void *);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_4D4880((void **)va);
  sub_4F31D0((void **)va1);
  _Unwind_Resume(a1);
}

void sub_8A9170(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)(a1 + 1945))
  {
    uint64_t v7 = (int *)&xmmword_25CFD78;
    if ((byte_25CFD8F & 0x80000000) == 0)
    {
LABEL_3:
      *(_OWORD *)std::string::size_type v36 = *(_OWORD *)v7;
      uint64_t v37 = *((void *)v7 + 2);
      goto LABEL_9;
    }
  }
  else
  {
    if (*(unsigned char *)(a1 + 1946)) {
      uint64_t v7 = &dword_25CFDC0;
    }
    else {
      uint64_t v7 = &dword_25CFDA8;
    }
    if ((*((char *)v7 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  sub_4200(v36, *(void **)v7, *((void *)v7 + 1));
LABEL_9:
  int v8 = SHIBYTE(v37);
  if (v37 >= 0) {
    size_t v9 = HIBYTE(v37);
  }
  else {
    size_t v9 = (size_t)v36[1];
  }
  int v10 = byte_25CD7A7;
  if (byte_25CD7A7 >= 0) {
    size_t v11 = byte_25CD7A7;
  }
  else {
    size_t v11 = qword_25CD798;
  }
  unint64_t v12 = v11 + v9;
  if (v11 + v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v12 <= 0x16)
  {
    size_t v34 = 0;
    unint64_t v35 = 0;
    long long __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v35) = v11 + v9;
    if (!v9) {
      goto LABEL_22;
    }
    goto LABEL_18;
  }
  uint64_t v25 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v12 | 7) != 0x17) {
    uint64_t v25 = v12 | 7;
  }
  uint64_t v26 = v25 + 1;
  p_dst = (void **)operator new(v25 + 1);
  size_t v34 = v11 + v9;
  unint64_t v35 = v26 | 0x8000000000000000;
  long long __dst = p_dst;
  if (v9)
  {
LABEL_18:
    if (v8 >= 0) {
      uint64_t v14 = v36;
    }
    else {
      uint64_t v14 = (void **)v36[0];
    }
    memmove(p_dst, v14, v9);
  }
LABEL_22:
  uint64_t v15 = (char *)p_dst + v9;
  if (v11)
  {
    if (v10 >= 0) {
      uint64_t v16 = &qword_25CD790;
    }
    else {
      uint64_t v16 = (uint64_t *)qword_25CD790;
    }
    memmove(v15, v16, v11);
  }
  v15[v11] = 0;
  sub_6352AC((uint64_t)&v29, (uint64_t)&__dst);
  uint64_t v17 = (std::__shared_weak_count *)a2[1];
  uint64_t v27 = *a2;
  uint64_t v28 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_6370D4(a4, &v29, a3, &v27);
  unint64_t v18 = v28;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  long long v19 = v32;
  if (v32)
  {
    do
    {
      uint64_t v20 = (void *)*v19;
      sub_4F4B48((uint64_t)(v19 + 2));
      operator delete(v19);
      long long v19 = v20;
    }
    while (v20);
  }
  std::string::size_type v21 = __p;
  std::string __p = 0;
  if (v21) {
    operator delete(v21);
  }
  uint64_t v22 = (void **)v29;
  if (v29)
  {
    size_t v23 = v30;
    uint64_t v24 = v29;
    if (v30 != v29)
    {
      do
      {
        if (*((char *)v23 - 1) < 0) {
          operator delete(*(v23 - 3));
        }
        v23 -= 3;
      }
      while (v23 != v22);
      uint64_t v24 = v29;
    }
    uint64_t v30 = v22;
    operator delete(v24);
  }
  if ((SHIBYTE(v35) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v37) & 0x80000000) == 0) {
      return;
    }
LABEL_52:
    operator delete(v36[0]);
    return;
  }
  operator delete(__dst);
  if (SHIBYTE(v37) < 0) {
    goto LABEL_52;
  }
}

void sub_8A9428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a25 < 0)
  {
    operator delete(__p);
    if ((a31 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else if ((a31 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a26);
  _Unwind_Resume(a1);
}

void sub_8A948C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (byte_25CFFB8[23] < 0) {
    sub_4200(&__dst, *(void **)byte_25CFFB8, *(unint64_t *)&byte_25CFFB8[8]);
  }
  else {
    std::string __dst = *(std::string *)byte_25CFFB8;
  }
  long long v47 = 0u;
  long long v48 = 0u;
  int v49 = 1065353216;
  if (sub_6F2FD8(a1 + 760))
  {
    if (byte_25CD3E7 >= 0) {
      int v4 = (const std::string::value_type *)&xmmword_25CD3D0;
    }
    else {
      int v4 = (const std::string::value_type *)xmmword_25CD3D0;
    }
    if (byte_25CD3E7 >= 0) {
      std::string::size_type v5 = byte_25CD3E7;
    }
    else {
      std::string::size_type v5 = *((void *)&xmmword_25CD3D0 + 1);
    }
    std::string::append(&__dst, v4, v5);
    long long v43 = &xmmword_25CE600;
    uint64_t v6 = sub_617978((uint64_t)&v47, (uint64_t)&xmmword_25CE600, (uint64_t)&unk_20F06E0, (long long **)&v43);
    std::string::operator=((std::string *)(v6 + 5), (const std::string *)(a1 + 760));
    v6[8] = *(void *)(a1 + 784);
    std::string::operator=((std::string *)v6 + 3, (const std::string *)(a1 + 792));
    v6[12] = *(void *)(a1 + 816);
    *((_DWORD *)v6 + 26) = *(_DWORD *)(a1 + 824);
    std::string::operator=((std::string *)(v6 + 14), (const std::string *)(a1 + 832));
    std::string::operator=((std::string *)(v6 + 17), (const std::string *)(a1 + 856));
    *((_DWORD *)v6 + 40) = *(_DWORD *)(a1 + 880);
    std::string::operator=((std::string *)v6 + 7, (const std::string *)(a1 + 888));
  }
  if (byte_25CD7A7 >= 0) {
    uint64_t v7 = (const std::string::value_type *)&qword_25CD790;
  }
  else {
    uint64_t v7 = (const std::string::value_type *)qword_25CD790;
  }
  if (byte_25CD7A7 >= 0) {
    std::string::size_type v8 = byte_25CD7A7;
  }
  else {
    std::string::size_type v8 = qword_25CD798;
  }
  std::string::append(&__dst, v7, v8);
  sub_63531C((uint64_t)&v43, (uint64_t)&__dst, (uint64_t)&v47);
  __int16 v40 = 0;
  uint64_t v41 = 0;
  unint64_t v42 = 0;
  size_t v34 = 0;
  unint64_t v35 = 0;
  uint64_t v36 = 0;
  sub_8A6F8((char *)&v34, *(void *)(a1 + 80), *(void *)(a1 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3));
  sub_5954B0((uint64_t)&v37, a1 + 104);
  char v39 = *(unsigned char *)(a1 + 144);
  size_t v9 = (long long **)nullsub_1(&v34);
  int v10 = *v9;
  size_t v11 = v9[1];
  while (v10 != v11)
  {
    if (*((char *)v10 + 23) < 0)
    {
      sub_4200(&__p, *(void **)v10, *((void *)v10 + 1));
    }
    else
    {
      long long v12 = *v10;
      __p.__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
    }
    sub_625E4(&__p, (char *)&qword_25CD790, (uint64_t)&dword_25CD808);
    uint64_t v13 = v41;
    if ((unint64_t)v41 >= v42)
    {
      uint64_t v41 = sub_1D740((char **)&v40, (uint64_t)&__p);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_19;
      }
      goto LABEL_29;
    }
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      long long v14 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *((void *)v41 + 2) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v13 = v14;
      uint64_t v41 = v13 + 24;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_19;
      }
LABEL_29:
      operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_19;
    }
    sub_4200(v41, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    uint64_t v41 = v13 + 24;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_29;
    }
LABEL_19:
    int v10 = (long long *)((char *)v10 + 24);
  }
  sub_6353B4((uint64_t)&v34, (std::string **)&v40);
  sub_6376A0(a2, &v43, 6, &v34, 1);
  uint64_t v15 = v38;
  if (v38)
  {
    do
    {
      uint64_t v16 = (void *)*v15;
      sub_4F4B48((uint64_t)(v15 + 2));
      operator delete(v15);
      uint64_t v15 = v16;
    }
    while (v16);
  }
  uint64_t v17 = v37;
  uint64_t v37 = 0;
  if (v17) {
    operator delete(v17);
  }
  unint64_t v18 = (void **)v34;
  if (v34)
  {
    long long v19 = v35;
    uint64_t v20 = v34;
    if (v35 != v34)
    {
      do
      {
        if (*((char *)v19 - 1) < 0) {
          operator delete(*(v19 - 3));
        }
        v19 -= 3;
      }
      while (v19 != v18);
      uint64_t v20 = v34;
    }
    unint64_t v35 = v18;
    operator delete(v20);
  }
  std::string::size_type v21 = (char *)v40;
  if (v40)
  {
    uint64_t v22 = v41;
    size_t v23 = v40;
    if (v41 != v40)
    {
      do
      {
        if (*(v22 - 1) < 0) {
          operator delete(*((void **)v22 - 3));
        }
        v22 -= 24;
      }
      while (v22 != v21);
      size_t v23 = v40;
    }
    uint64_t v41 = v21;
    operator delete(v23);
  }
  uint64_t v24 = v46;
  if (v46)
  {
    do
    {
      uint64_t v25 = (void *)*v24;
      sub_4F4B48((uint64_t)(v24 + 2));
      operator delete(v24);
      uint64_t v24 = v25;
    }
    while (v25);
  }
  uint64_t v26 = v45;
  size_t v45 = 0;
  if (v26) {
    operator delete(v26);
  }
  uint64_t v27 = (void **)v43;
  if (v43)
  {
    uint64_t v28 = v44;
    uint64_t v29 = v43;
    if (v44 != v43)
    {
      do
      {
        if (*((char *)v28 - 1) < 0) {
          operator delete(*(v28 - 3));
        }
        v28 -= 3;
      }
      while (v28 != v27);
      uint64_t v29 = v43;
    }
    int v44 = v27;
    operator delete(v29);
  }
  uint64_t v30 = (void *)v48;
  if ((void)v48)
  {
    do
    {
      char v31 = (void *)*v30;
      sub_4F4B48((uint64_t)(v30 + 2));
      operator delete(v30);
      uint64_t v30 = v31;
    }
    while (v31);
  }
  uint64_t v32 = (void *)v47;
  *(void *)&long long v47 = 0;
  if (v32) {
    operator delete(v32);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_8A98E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27)
{
  sub_4D4880((void **)&a15);
  sub_1A668(&a24);
  sub_4D4880(&a27);
  sub_4DD068(v27 - 128);
  if (*(char *)(v27 - 57) < 0) {
    operator delete(*(void **)(v27 - 80));
  }
  _Unwind_Resume(a1);
}

void sub_8A9978(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  if (*(unsigned char *)(a1 + 1856)) {
    sub_8A9988(a1, a2, a3, a4, (uint64_t)a5);
  }
  else {
    sub_8AAD14((unsigned char *)a1, a2, a3, a4, a5);
  }
}

void sub_8A9988(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  sub_80A330(a1, a2, a3, (uint64_t)&v187);
  uint64_t v180 = 0;
  long long v178 = 0u;
  long long v179 = 0u;
  long long v177 = 0u;
  int v181 = 1065353216;
  char v182 = 1;
  uint64_t v184 = 0;
  v185 = 0;
  __int16 v186 = 0;
  if (*(unsigned char *)(a1 + 2875) || *(unsigned char *)(a1 + 2876))
  {
    size_t v11 = (long long **)*((void *)&v187 + 1);
    int v10 = (long long **)v187;
    if ((void)v187 != *((void *)&v187 + 1))
    {
      do
      {
        sub_8BEA48((uint64_t)&v169, v10);
        v10 += 13;
      }
      while (v10 != v11);
      int v10 = (long long **)v187;
    }
    int v12 = *(unsigned __int8 *)(a1 + 1859);
    uint64_t v13 = (std::__shared_weak_count *)operator new(0x80uLL);
    v13->__shared_owners_ = 0;
    v13->__shared_weak_owners_ = 0;
    v13->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
    sub_59540C((uint64_t)&v142, (uint64_t)&v13[1], (uint64_t)v10);
    v167 = &v13[1].__vftable;
    v168 = v13;
    if (v12) {
      uint64_t v14 = 5;
    }
    else {
      uint64_t v14 = 10;
    }
    sub_8A9170(a1, (uint64_t *)&v167, v14, (uint64_t)&v169);
    sub_63DAA4((uint64_t)&v177, (uint64_t)&v169);
    uint64_t v15 = v176;
    if (v176 && !atomic_fetch_add(&v176->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    uint64_t v16 = v172;
    if (v172)
    {
      do
      {
        uint64_t v17 = (void *)*v16;
        sub_4F4B48((uint64_t)(v16 + 2));
        operator delete(v16);
        uint64_t v16 = v17;
      }
      while (v17);
    }
    unint64_t v18 = __p;
    std::string __p = 0;
    if (v18) {
      operator delete(v18);
    }
    std::string::size_type v19 = v169.__r_.__value_.__r.__words[0];
    if (v169.__r_.__value_.__r.__words[0])
    {
      std::string::size_type size = v169.__r_.__value_.__l.__size_;
      std::string::size_type v21 = (void *)v169.__r_.__value_.__r.__words[0];
      if (v169.__r_.__value_.__l.__size_ != v169.__r_.__value_.__r.__words[0])
      {
        do
        {
          if (*(char *)(size - 1) < 0) {
            operator delete(*(void **)(size - 24));
          }
          size -= 24;
        }
        while (size != v19);
        std::string::size_type v21 = (void *)v169.__r_.__value_.__r.__words[0];
      }
      v169.__r_.__value_.__l.__size_ = v19;
      operator delete(v21);
    }
    uint64_t v22 = v168;
    if (v168 && !atomic_fetch_add(&v168->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
    sub_89F5A4((uint64_t *)&v187, v187, (unint64_t)&v177);
  }
  if (*(unsigned char *)(a1 + 1862))
  {
    sub_8A948C(a1, (uint64_t)&v169);
    sub_63DAA4((uint64_t)&v177, (uint64_t)&v169);
    size_t v23 = v176;
    if (v176 && !atomic_fetch_add(&v176->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    uint64_t v24 = v172;
    if (v172)
    {
      do
      {
        uint64_t v25 = (void *)*v24;
        sub_4F4B48((uint64_t)(v24 + 2));
        operator delete(v24);
        uint64_t v24 = v25;
      }
      while (v25);
    }
    uint64_t v26 = __p;
    std::string __p = 0;
    if (v26) {
      operator delete(v26);
    }
    std::string::size_type v27 = v169.__r_.__value_.__r.__words[0];
    if (v169.__r_.__value_.__r.__words[0])
    {
      std::string::size_type v28 = v169.__r_.__value_.__l.__size_;
      uint64_t v29 = (void *)v169.__r_.__value_.__r.__words[0];
      if (v169.__r_.__value_.__l.__size_ != v169.__r_.__value_.__r.__words[0])
      {
        do
        {
          if (*(char *)(v28 - 1) < 0) {
            operator delete(*(void **)(v28 - 24));
          }
          v28 -= 24;
        }
        while (v28 != v27);
        uint64_t v29 = (void *)v169.__r_.__value_.__r.__words[0];
      }
      v169.__r_.__value_.__l.__size_ = v27;
      operator delete(v29);
    }
    sub_89F5A4((uint64_t *)&v187, v187, (unint64_t)&v177);
  }
  uint64_t v30 = *(void *)(a1 + 1952);
  uint64_t v31 = *(void *)(a1 + 1960);
  int v32 = *(_DWORD *)(a1 + 2128);
  char v33 = (std::__shared_weak_count *)operator new(0xB98uLL);
  int v34 = v32 - 1;
  v33->__shared_owners_ = 0;
  v33->__shared_weak_owners_ = 0;
  v33->__vftable = (std::__shared_weak_count_vtbl *)off_243AE28;
  std::string::size_type v35 = (std::string::size_type)&v33[1];
  sub_89F8D4((std::string::size_type)&v33[1], v30, v31, a2, a3, v34);
  uint64_t v165 = &v33[1].__vftable;
  v166 = v33;
  if ((a4 & 1) == 0 && !(*(unsigned __int8 *)(a1 + 2125) | BYTE5(v33[89].__shared_owners_)))
  {
    *(_OWORD *)a5 = v187;
    *(void *)(a5 + 16) = v188;
    uint64_t v188 = 0;
    long long v187 = 0uLL;
LABEL_261:
    if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
    goto LABEL_263;
  }
  if (LOBYTE(v33[120].__shared_weak_owners_) || !BYTE5(v33[89].__shared_owners_))
  {
    sub_7FC804(v35, (uint64_t)v163);
    int v36 = 0;
  }
  else
  {
    sub_7F598C(v35, (uint64_t)v163);
    int v36 = 1;
  }
  sub_803A58(v35, 1, (uint64_t)v163, (uint64_t)&v156);
  if (BYTE4(v33[78].__vftable))
  {
    if (byte_25CCF07 < 0)
    {
      sub_4200(&__dst, (void *)xmmword_25CCEF0, *((unint64_t *)&xmmword_25CCEF0 + 1));
    }
    else
    {
      long long __dst = xmmword_25CCEF0;
      uint64_t v155 = unk_25CCF00;
    }
  }
  else
  {
    HIBYTE(v155) = 0;
    LOBYTE(__dst) = 0;
  }
  sub_80807C(v35, (uint64_t)&v142);
  if (v155 >= 0) {
    p_dst = (const std::string::value_type *)&__dst;
  }
  else {
    p_dst = (const std::string::value_type *)__dst;
  }
  if (v155 >= 0) {
    std::string::size_type v38 = HIBYTE(v155);
  }
  else {
    std::string::size_type v38 = *((void *)&__dst + 1);
  }
  char v39 = std::string::insert(&v142, 0, p_dst, v38);
  long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v169.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v169.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  if ((v164 & 0x80u) == 0) {
    uint64_t v41 = v163;
  }
  else {
    uint64_t v41 = (void **)v163[0];
  }
  if ((v164 & 0x80u) == 0) {
    std::string::size_type v42 = v164;
  }
  else {
    std::string::size_type v42 = (std::string::size_type)v163[1];
  }
  long long v43 = std::string::append(&v169, (const std::string::value_type *)v41, v42);
  long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  std::string::size_type v153 = v43->__r_.__value_.__r.__words[2];
  long long v152 = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v169.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v142.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_71;
    }
  }
  else if ((SHIBYTE(v142.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_71;
  }
  operator delete(v142.__r_.__value_.__l.__data_);
LABEL_71:
  if (sub_80BE58(a1, a1 + 80, (uint64_t)&v156))
  {
    sub_6352AC((uint64_t)&v169, (uint64_t)&v152);
    std::string::size_type v45 = v156.__r_.__value_.__r.__words[0];
    if (v156.__r_.__value_.__r.__words[0])
    {
      std::string::size_type v46 = v156.__r_.__value_.__l.__size_;
      long long v47 = (void *)v156.__r_.__value_.__r.__words[0];
      if (v156.__r_.__value_.__l.__size_ != v156.__r_.__value_.__r.__words[0])
      {
        do
        {
          if (*(char *)(v46 - 1) < 0) {
            operator delete(*(void **)(v46 - 24));
          }
          v46 -= 24;
        }
        while (v46 != v45);
        long long v47 = (void *)v156.__r_.__value_.__r.__words[0];
      }
      v156.__r_.__value_.__l.__size_ = v45;
      operator delete(v47);
    }
    std::string v156 = v169;
    memset(&v169, 0, sizeof(v169));
    if (v160)
    {
      long long v48 = v159;
      if (v159)
      {
        do
        {
          int v49 = (void *)*v48;
          sub_4F4B48((uint64_t)(v48 + 2));
          operator delete(v48);
          long long v48 = v49;
        }
        while (v49);
      }
      v159 = 0;
      unint64_t v50 = v158;
      if (v158)
      {
        uint64_t v51 = 0;
        do
          *((void *)v157 + v51++) = 0;
        while (v50 != v51);
      }
      uint64_t v160 = 0;
    }
    size_t v52 = __p;
    std::string __p = 0;
    int v53 = v157;
    size_t v157 = v52;
    if (v53) {
      operator delete(v53);
    }
    unint64_t v54 = v171;
    unint64_t v55 = v172;
    unint64_t v171 = 0;
    v159 = v172;
    uint64_t v160 = v173;
    int v161 = v174;
    unint64_t v158 = v54;
    if (v173)
    {
      unint64_t v56 = v172[1];
      if ((v54 & (v54 - 1)) != 0)
      {
        if (v56 >= v54) {
          v56 %= v54;
        }
      }
      else
      {
        v56 &= v54 - 1;
      }
      *((void *)v157 + v56) = &v159;
      v172 = 0;
      uint64_t v173 = 0;
      char v162 = v175;
    }
    else
    {
      char v162 = v175;
      if (v172)
      {
        do
        {
          uint64_t v57 = (void *)*v55;
          sub_4F4B48((uint64_t)(v55 + 2));
          operator delete(v55);
          unint64_t v55 = v57;
        }
        while (v57);
      }
    }
    unint64_t v58 = __p;
    std::string __p = 0;
    if (v58) {
      operator delete(v58);
    }
    std::string::size_type v59 = v169.__r_.__value_.__r.__words[0];
    if (v169.__r_.__value_.__r.__words[0])
    {
      std::string::size_type v60 = v169.__r_.__value_.__l.__size_;
      char v61 = (void *)v169.__r_.__value_.__r.__words[0];
      if (v169.__r_.__value_.__l.__size_ != v169.__r_.__value_.__r.__words[0])
      {
        do
        {
          if (*(char *)(v60 - 1) < 0) {
            operator delete(*(void **)(v60 - 24));
          }
          v60 -= 24;
        }
        while (v60 != v59);
        char v61 = (void *)v169.__r_.__value_.__r.__words[0];
      }
      v169.__r_.__value_.__l.__size_ = v59;
      operator delete(v61);
    }
  }
  else if (BYTE4(v33[78].__vftable))
  {
    sub_80C150(a1, (long long **)&v156);
  }
  uint64_t v150 = 0;
  long long v151 = 0;
  sub_6370D4(&v169, &v156, 1, &v150);
  uint64_t v62 = v151;
  if (v151 && !atomic_fetch_add(&v151->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
    std::__shared_weak_count::__release_weak(v62);
  }
  sub_80A078((uint64_t)v165, (uint64_t *)&v169, 0, 0);
  if (v36)
  {
    sub_8A5178((uint64_t)&v169, (uint64_t)&xmmword_25CDA48, (uint64_t)&v142);
    sub_63DAA4((uint64_t)&v169, (uint64_t)&v142);
    char v63 = v148;
    if (v148 && !atomic_fetch_add(&v148->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
    char v64 = v144;
    if (v144)
    {
      do
      {
        std::string::size_type v65 = (void *)*v64;
        sub_4F4B48((uint64_t)(v64 + 2));
        operator delete(v64);
        char v64 = v65;
      }
      while (v65);
    }
    uint64_t v66 = v143;
    unint64_t v143 = 0;
    if (v66) {
      operator delete(v66);
    }
    std::string::size_type v67 = v142.__r_.__value_.__r.__words[0];
    if (v142.__r_.__value_.__r.__words[0])
    {
      std::string::size_type v68 = v142.__r_.__value_.__l.__size_;
      uint64_t v69 = (void *)v142.__r_.__value_.__r.__words[0];
      if (v142.__r_.__value_.__l.__size_ != v142.__r_.__value_.__r.__words[0])
      {
        do
        {
          if (*(char *)(v68 - 1) < 0) {
            operator delete(*(void **)(v68 - 24));
          }
          v68 -= 24;
        }
        while (v68 != v67);
        uint64_t v69 = (void *)v142.__r_.__value_.__r.__words[0];
      }
      v142.__r_.__value_.__l.__size_ = v67;
      operator delete(v69);
    }
  }
  if (!sub_637DD8((long long **)&v177))
  {
    sub_635CD0((long long **)(a1 + 80), (uint64_t)v140);
    uint64_t v70 = sub_5231C(a1 + 80);
    sub_63531C((uint64_t)&v133, (uint64_t)v140, v70);
    uint64_t v71 = sub_897368((uint64_t)v165);
    long long v72 = (std::__shared_weak_count *)operator new(0x80uLL);
    v72->__shared_owners_ = 0;
    v72->__shared_weak_owners_ = 0;
    v72->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
    sub_59540C((uint64_t)v189, (uint64_t)&v72[1], (uint64_t)&v169);
    long long v138 = &v72[1].__vftable;
    int v139 = v72;
    sub_6370D4(&v142, &v133, v71, &v138);
    sub_63DAA4((uint64_t)&v177, (uint64_t)&v142);
    __int16 v73 = v148;
    if (v148 && !atomic_fetch_add(&v148->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
    uint64_t v74 = v144;
    if (v144)
    {
      do
      {
        uint64_t v75 = (void *)*v74;
        sub_4F4B48((uint64_t)(v74 + 2));
        operator delete(v74);
        uint64_t v74 = v75;
      }
      while (v75);
    }
    uint64_t v76 = v143;
    unint64_t v143 = 0;
    if (v76) {
      operator delete(v76);
    }
    std::string::size_type v77 = v142.__r_.__value_.__r.__words[0];
    if (v142.__r_.__value_.__r.__words[0])
    {
      std::string::size_type v78 = v142.__r_.__value_.__l.__size_;
      size_t v79 = (void *)v142.__r_.__value_.__r.__words[0];
      if (v142.__r_.__value_.__l.__size_ != v142.__r_.__value_.__r.__words[0])
      {
        do
        {
          if (*(char *)(v78 - 1) < 0) {
            operator delete(*(void **)(v78 - 24));
          }
          v78 -= 24;
        }
        while (v78 != v77);
        size_t v79 = (void *)v142.__r_.__value_.__r.__words[0];
      }
      v142.__r_.__value_.__l.__size_ = v77;
      operator delete(v79);
    }
    unint64_t v80 = v139;
    if (v139 && !atomic_fetch_add(&v139->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
    std::string v81 = v136;
    if (v136)
    {
      do
      {
        uint64_t v82 = (void *)*v81;
        sub_4F4B48((uint64_t)(v81 + 2));
        operator delete(v81);
        std::string v81 = v82;
      }
      while (v82);
    }
    unint64_t v83 = v135;
    v135 = 0;
    if (v83) {
      operator delete(v83);
    }
    char v84 = (void **)v133;
    if (v133)
    {
      long long v85 = v134;
      std::string v86 = v133;
      if (v134 != v133)
      {
        do
        {
          if (*((char *)v85 - 1) < 0) {
            operator delete(*(v85 - 3));
          }
          v85 -= 3;
        }
        while (v85 != v84);
        std::string v86 = v133;
      }
      v134 = v84;
      operator delete(v86);
    }
    if (SHIBYTE(v141) < 0) {
      operator delete(v140[0]);
    }
  }
  sub_80A078(a1, (uint64_t *)&v177, 0, 0);
  memset(&v142, 0, sizeof(v142));
  sub_8A6F8((char *)&v142, v177, *((uint64_t *)&v177 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v177 + 1) - v177) >> 3));
  sub_5954B0((uint64_t)&v143, (uint64_t)&v178 + 8);
  char v145 = v182;
  int v146 = v183;
  uint64_t v147 = v184;
  v148 = v185;
  if (v185) {
    atomic_fetch_add_explicit(&v185->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __int16 v149 = v186;
  if (a4 && (*(_DWORD *)(a1 + 1848) - 41) >= 0x13)
  {
    uint64_t v87 = 234;
    if (!*(unsigned char *)(a1 + 2873)) {
      uint64_t v87 = 240;
    }
    uint64_t v88 = &qword_25CD940;
    if (*(unsigned char *)(a1 + 2873)) {
      uint64_t v88 = (uint64_t *)&xmmword_25CD928;
    }
    int v89 = &byte_25CD93F;
    if (!*(unsigned char *)(a1 + 2873)) {
      int v89 = (char *)&unk_25CD957;
    }
    if (*v89 < 0)
    {
      if (*(unsigned char *)(a1 + 2873)) {
        uint64_t v97 = (unint64_t *)&xmmword_25CD928 + 1;
      }
      else {
        uint64_t v97 = (unint64_t *)&unk_25CD948;
      }
      sub_4200(v140, *(void **)&dword_25CD580[v87], *v97);
    }
    else
    {
      *(_OWORD *)size_t v140 = *(_OWORD *)v88;
      uint64_t v141 = v88[2];
    }
    sub_6379F8((uint64_t *)&v177, (char *)&qword_25CD400);
    sub_8A5178((uint64_t)&v177, (uint64_t)v140, (uint64_t)&v133);
    sub_63DAA4((uint64_t)&v142, (uint64_t)&v133);
    char v98 = v137;
    if (v137 && !atomic_fetch_add(&v137->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
    uint64_t v99 = v136;
    if (v136)
    {
      do
      {
        int64_t v100 = (void *)*v99;
        sub_4F4B48((uint64_t)(v99 + 2));
        operator delete(v99);
        uint64_t v99 = v100;
      }
      while (v100);
    }
    uint64_t v101 = v135;
    v135 = 0;
    if (v101) {
      operator delete(v101);
    }
    int v94 = (void **)v133;
    if (!v133) {
      goto LABEL_212;
    }
    int64_t v102 = v134;
    BOOL v96 = v133;
    if (v134 == v133) {
      goto LABEL_211;
    }
    do
    {
      if (*((char *)v102 - 1) < 0) {
        operator delete(*(v102 - 3));
      }
      v102 -= 3;
    }
    while (v102 != v94);
    goto LABEL_210;
  }
  if (!*(unsigned char *)(a1 + 2125)) {
    goto LABEL_214;
  }
  if (byte_25CDA47 < 0)
  {
    sub_4200(v140, (void *)xmmword_25CDA30, *((unint64_t *)&xmmword_25CDA30 + 1));
  }
  else
  {
    *(_OWORD *)size_t v140 = xmmword_25CDA30;
    uint64_t v141 = unk_25CDA40;
  }
  sub_8A5178((uint64_t)&v177, (uint64_t)v140, (uint64_t)&v133);
  sub_63DAA4((uint64_t)&v142, (uint64_t)&v133);
  long long v90 = v137;
  if (v137 && !atomic_fetch_add(&v137->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
    std::__shared_weak_count::__release_weak(v90);
  }
  long long v91 = v136;
  if (v136)
  {
    do
    {
      long long v92 = (void *)*v91;
      sub_4F4B48((uint64_t)(v91 + 2));
      operator delete(v91);
      long long v91 = v92;
    }
    while (v92);
  }
  uint64_t v93 = v135;
  v135 = 0;
  if (v93) {
    operator delete(v93);
  }
  int v94 = (void **)v133;
  if (v133)
  {
    char v95 = v134;
    BOOL v96 = v133;
    if (v134 == v133) {
      goto LABEL_211;
    }
    do
    {
      if (*((char *)v95 - 1) < 0) {
        operator delete(*(v95 - 3));
      }
      v95 -= 3;
    }
    while (v95 != v94);
LABEL_210:
    BOOL v96 = v133;
LABEL_211:
    v134 = v94;
    operator delete(v96);
  }
LABEL_212:
  if (SHIBYTE(v141) < 0) {
    operator delete(v140[0]);
  }
LABEL_214:
  sub_89F5A4((uint64_t *)&v187, v187, (unint64_t)&v142);
  *(_OWORD *)a5 = v187;
  *(void *)(a5 + 16) = v188;
  uint64_t v188 = 0;
  long long v187 = 0uLL;
  uint64_t v103 = v148;
  if (v148 && !atomic_fetch_add(&v148->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
    std::__shared_weak_count::__release_weak(v103);
  }
  uint64_t v104 = v144;
  if (v144)
  {
    do
    {
      v105 = (void *)*v104;
      sub_4F4B48((uint64_t)(v104 + 2));
      operator delete(v104);
      uint64_t v104 = v105;
    }
    while (v105);
  }
  int v106 = v143;
  unint64_t v143 = 0;
  if (v106) {
    operator delete(v106);
  }
  std::string::size_type v107 = v142.__r_.__value_.__r.__words[0];
  if (v142.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v108 = v142.__r_.__value_.__l.__size_;
    size_t v109 = (void *)v142.__r_.__value_.__r.__words[0];
    if (v142.__r_.__value_.__l.__size_ != v142.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v108 - 1) < 0) {
          operator delete(*(void **)(v108 - 24));
        }
        v108 -= 24;
      }
      while (v108 != v107);
      size_t v109 = (void *)v142.__r_.__value_.__r.__words[0];
    }
    v142.__r_.__value_.__l.__size_ = v107;
    operator delete(v109);
  }
  unint64_t v110 = v176;
  if (v176 && !atomic_fetch_add(&v176->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
    std::__shared_weak_count::__release_weak(v110);
  }
  v111 = v172;
  if (v172)
  {
    do
    {
      v112 = (void *)*v111;
      sub_4F4B48((uint64_t)(v111 + 2));
      operator delete(v111);
      v111 = v112;
    }
    while (v112);
  }
  v113 = __p;
  std::string __p = 0;
  if (v113) {
    operator delete(v113);
  }
  std::string::size_type v114 = v169.__r_.__value_.__r.__words[0];
  if (v169.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v115 = v169.__r_.__value_.__l.__size_;
    long long v116 = (void *)v169.__r_.__value_.__r.__words[0];
    if (v169.__r_.__value_.__l.__size_ != v169.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v115 - 1) < 0) {
          operator delete(*(void **)(v115 - 24));
        }
        v115 -= 24;
      }
      while (v115 != v114);
      long long v116 = (void *)v169.__r_.__value_.__r.__words[0];
    }
    v169.__r_.__value_.__l.__size_ = v114;
    operator delete(v116);
  }
  if ((SHIBYTE(v153) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v155) & 0x80000000) == 0) {
      goto LABEL_246;
    }
LABEL_285:
    operator delete((void *)__dst);
    int v117 = v159;
    if (!v159) {
      goto LABEL_248;
    }
    goto LABEL_247;
  }
  operator delete((void *)v152);
  if (SHIBYTE(v155) < 0) {
    goto LABEL_285;
  }
LABEL_246:
  int v117 = v159;
  if (!v159) {
    goto LABEL_248;
  }
  do
  {
LABEL_247:
    size_t v118 = (void *)*v117;
    sub_4F4B48((uint64_t)(v117 + 2));
    operator delete(v117);
    int v117 = v118;
  }
  while (v118);
LABEL_248:
  unint64_t v119 = v157;
  size_t v157 = 0;
  if (v119) {
    operator delete(v119);
  }
  std::string::size_type v120 = v156.__r_.__value_.__r.__words[0];
  if (v156.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v121 = v156.__r_.__value_.__l.__size_;
    uint64_t v122 = (void *)v156.__r_.__value_.__r.__words[0];
    if (v156.__r_.__value_.__l.__size_ != v156.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v121 - 1) < 0) {
          operator delete(*(void **)(v121 - 24));
        }
        v121 -= 24;
      }
      while (v121 != v120);
      uint64_t v122 = (void *)v156.__r_.__value_.__r.__words[0];
    }
    v156.__r_.__value_.__l.__size_ = v120;
    operator delete(v122);
  }
  if ((char)v164 < 0) {
    operator delete(v163[0]);
  }
  char v33 = v166;
  if (v166) {
    goto LABEL_261;
  }
LABEL_263:
  uint64_t v123 = v185;
  if (v185 && !atomic_fetch_add(&v185->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
    std::__shared_weak_count::__release_weak(v123);
  }
  uint64_t v124 = (void *)*((void *)&v179 + 1);
  if (*((void *)&v179 + 1))
  {
    do
    {
      v125 = (void *)*v124;
      sub_4F4B48((uint64_t)(v124 + 2));
      operator delete(v124);
      uint64_t v124 = v125;
    }
    while (v125);
  }
  int v126 = (void *)*((void *)&v178 + 1);
  *((void *)&v178 + 1) = 0;
  if (v126) {
    operator delete(v126);
  }
  uint64_t v127 = v177;
  if ((void)v177)
  {
    uint64_t v128 = *((void *)&v177 + 1);
    size_t v129 = (void *)v177;
    if (*((void *)&v177 + 1) != (void)v177)
    {
      do
      {
        if (*(char *)(v128 - 1) < 0) {
          operator delete(*(void **)(v128 - 24));
        }
        v128 -= 24;
      }
      while (v128 != v127);
      size_t v129 = (void *)v177;
    }
    *((void *)&v177 + 1) = v127;
    operator delete(v129);
  }
  unint64_t v130 = (void **)v187;
  if ((void)v187)
  {
    v131 = (void **)*((void *)&v187 + 1);
    v132 = (void *)v187;
    if (*((void *)&v187 + 1) != (void)v187)
    {
      do
        v131 = sub_4F31D0(v131 - 13);
      while (v131 != v130);
      v132 = (void *)v187;
    }
    *((void *)&v187 + 1) = v130;
    operator delete(v132);
  }
}

void sub_8AAB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_4F31D0((void **)&a28);
  sub_4F31D0(&a73);
  if (a48 < 0) {
    operator delete(__p);
  }
  if (a55 < 0) {
    operator delete(a50);
  }
  sub_4D4880(&a57);
  if (a71 < 0) {
    operator delete(a66);
  }
  sub_14A84((uint64_t)&a72);
  sub_4F31D0((void **)(v73 - 240));
  sub_5920E0((void **)(v73 - 128));
  _Unwind_Resume(a1);
}

void sub_8AAD14(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  sub_80B4C0((uint64_t)a1, a2, a3, (uint64_t)a5);
  if (a1[2876])
  {
    uint64_t v8 = *a5;
    size_t v9 = (std::__shared_weak_count *)operator new(0x80uLL);
    v9->__shared_owners_ = 0;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
    sub_59540C((uint64_t)&v34, (uint64_t)&v9[1], v8);
    int v36 = &v9[1].__vftable;
    uint64_t v37 = v9;
    sub_8A9170((uint64_t)a1, (uint64_t *)&v36, 10, (uint64_t)&v38);
    int v10 = v37;
    if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    sub_89F5A4(a5, *a5, (unint64_t)&v38);
    size_t v11 = v42;
    if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    int v12 = v41;
    if (v41)
    {
      do
      {
        uint64_t v13 = (void *)*v12;
        sub_4F4B48((uint64_t)(v12 + 2));
        operator delete(v12);
        int v12 = v13;
      }
      while (v13);
    }
    uint64_t v14 = __p;
    std::string __p = 0;
    if (v14) {
      operator delete(v14);
    }
    uint64_t v15 = (void **)v38;
    if (v38)
    {
      uint64_t v16 = v39;
      uint64_t v17 = v38;
      if (v39 == v38) {
        goto LABEL_33;
      }
      do
      {
        if (*((char *)v16 - 1) < 0) {
          operator delete(*(v16 - 3));
        }
        v16 -= 3;
      }
      while (v16 != v15);
LABEL_32:
      uint64_t v17 = v38;
LABEL_33:
      char v39 = v15;
LABEL_34:
      operator delete(v17);
    }
  }
  else if (a1[2125])
  {
    sub_8A5178(*a5, (uint64_t)&xmmword_25CDA30, (uint64_t)&v38);
    sub_89F5A4(a5, *a5, (unint64_t)&v38);
    unint64_t v18 = v42;
    if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    std::string::size_type v19 = v41;
    if (v41)
    {
      do
      {
        uint64_t v20 = (void *)*v19;
        sub_4F4B48((uint64_t)(v19 + 2));
        operator delete(v19);
        std::string::size_type v19 = v20;
      }
      while (v20);
    }
    std::string::size_type v21 = __p;
    std::string __p = 0;
    if (v21) {
      operator delete(v21);
    }
    uint64_t v15 = (void **)v38;
    if (v38)
    {
      uint64_t v22 = v39;
      uint64_t v17 = v38;
      if (v39 == v38) {
        goto LABEL_33;
      }
      do
      {
        if (*((char *)v22 - 1) < 0) {
          operator delete(*(v22 - 3));
        }
        v22 -= 3;
      }
      while (v22 != v15);
      goto LABEL_32;
    }
  }
  else if (a4)
  {
    uint64_t v23 = 234;
    if (!a1[2873]) {
      uint64_t v23 = 240;
    }
    uint64_t v24 = &qword_25CD940;
    if (a1[2873]) {
      uint64_t v24 = (uint64_t *)&xmmword_25CD928;
    }
    uint64_t v25 = &byte_25CD93F;
    if (!a1[2873]) {
      uint64_t v25 = (char *)&unk_25CD957;
    }
    if (*v25 < 0)
    {
      if (a1[2873]) {
        uint64_t v26 = (unint64_t *)&xmmword_25CD928 + 1;
      }
      else {
        uint64_t v26 = (unint64_t *)&unk_25CD948;
      }
      sub_4200(&v34, *(void **)&dword_25CD580[v23], *v26);
    }
    else
    {
      long long v34 = *(_OWORD *)v24;
      uint64_t v35 = v24[2];
    }
    sub_6379F8((uint64_t *)*a5, (char *)&qword_25CD400);
    sub_8A5178(*a5, (uint64_t)&v34, (uint64_t)&v38);
    sub_89F5A4(a5, *a5, (unint64_t)&v38);
    std::string::size_type v27 = v42;
    if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
    std::string::size_type v28 = v41;
    if (v41)
    {
      do
      {
        uint64_t v29 = (void *)*v28;
        sub_4F4B48((uint64_t)(v28 + 2));
        operator delete(v28);
        std::string::size_type v28 = v29;
      }
      while (v29);
    }
    uint64_t v30 = __p;
    std::string __p = 0;
    if (v30) {
      operator delete(v30);
    }
    uint64_t v31 = (void **)v38;
    if (v38)
    {
      int v32 = v39;
      char v33 = v38;
      if (v39 != v38)
      {
        do
        {
          if (*((char *)v32 - 1) < 0) {
            operator delete(*(v32 - 3));
          }
          v32 -= 3;
        }
        while (v32 != v31);
        char v33 = v38;
      }
      char v39 = v31;
      operator delete(v33);
    }
    if (SHIBYTE(v35) < 0)
    {
      uint64_t v17 = (void *)v34;
      goto LABEL_34;
    }
  }
}

void sub_8AB140(_Unwind_Exception *a1)
{
  sub_5920E0(v1);
  _Unwind_Resume(a1);
}

void sub_8AB154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17)
{
  sub_4F31D0(&a17);
  if (a14 < 0)
  {
    operator delete(__p);
    sub_5920E0(v17);
    _Unwind_Resume(a1);
  }
  sub_5920E0(v17);
  _Unwind_Resume(a1);
}

void sub_8AB210(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  long long v88 = 0uLL;
  unint64_t v89 = 0;
  sub_80C7F4(a1, &v87);
  uint64_t v8 = *(void *)(a1 + 1952);
  uint64_t v9 = *(void *)(a1 + 1960);
  int v10 = *(_DWORD *)(a1 + 2128);
  size_t v11 = operator new(0xB98uLL);
  int v12 = v10 - 1;
  v11[1] = 0;
  v11[2] = 0;
  *size_t v11 = off_243AE28;
  uint64_t v13 = (uint64_t)(v11 + 3);
  sub_89F8D4((std::string::size_type)(v11 + 3), v8, v9, a2, a3, v12);
  long long v85 = (char *)(v11 + 3);
  std::string v86 = (std::__shared_weak_count *)v11;
  sub_8A5F40((std::string::size_type)(v11 + 3), 0, 0, 0, (uint64_t)&v80);
  if (*((unsigned char *)v11 + 1876))
  {
    uint64_t v14 = nullsub_1(&v80);
    uint64_t v73 = 0;
    uint64_t v74 = 0;
    uint64_t v75 = 0;
    sub_8A6F8((char *)&v73, *(void *)v14, *(void *)(v14 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v14 + 8) - *(void *)v14) >> 3));
    sub_5954B0((uint64_t)&__p, v14 + 24);
    char v78 = *(unsigned char *)(v14 + 64);
    sub_80C150(v13, (long long **)&v73);
    sub_63797C((uint64_t)&v80, (uint64_t)&v73);
    uint64_t v15 = v77;
    if (v77)
    {
      do
      {
        uint64_t v16 = (void *)*v15;
        sub_4F4B48((uint64_t)(v15 + 2));
        operator delete(v15);
        uint64_t v15 = v16;
      }
      while (v16);
    }
    uint64_t v17 = __p;
    std::string __p = 0;
    if (v17) {
      operator delete(v17);
    }
    unint64_t v18 = (void **)v73;
    if (v73)
    {
      std::string::size_type v19 = v74;
      uint64_t v20 = v73;
      if (v74 != v73)
      {
        do
        {
          if (*((char *)v19 - 1) < 0) {
            operator delete(*(v19 - 3));
          }
          v19 -= 3;
        }
        while (v19 != v18);
        uint64_t v20 = v73;
      }
      uint64_t v74 = v18;
      operator delete(v20);
    }
    uint64_t v13 = (uint64_t)v85;
  }
  *(_OWORD *)char v61 = 0u;
  *(_OWORD *)uint64_t v62 = 0u;
  LODWORD(v63) = 1065353216;
  int v21 = sub_897368(v13);
  uint64_t v22 = (std::__shared_weak_count *)operator new(0x80uLL);
  v22->__shared_owners_ = 0;
  v22->__shared_weak_owners_ = 0;
  v22->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
  sub_59540C((uint64_t)&v90, (uint64_t)&v22[1], (uint64_t)&v80);
  uint64_t v71 = &v22[1].__vftable;
  long long v72 = v22;
  sub_6373D8((uint64_t)&v73, (uint64_t)&v87, (uint64_t)v61, v21, (uint64_t *)&v71);
  uint64_t v23 = v72;
  if (v72 && !atomic_fetch_add(&v72->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  uint64_t v24 = v62[0];
  if (v62[0])
  {
    do
    {
      uint64_t v25 = (void *)*v24;
      sub_4F4B48((uint64_t)(v24 + 2));
      operator delete(v24);
      uint64_t v24 = v25;
    }
    while (v25);
  }
  uint64_t v26 = v61[0];
  v61[0] = 0;
  if (v26) {
    operator delete(v26);
  }
  sub_80A078(a1, (uint64_t *)&v73, 0, 0);
  uint64_t v27 = *((void *)&v88 + 1);
  if (*((void *)&v88 + 1) >= v89)
  {
    uint64_t v28 = sub_63D140((uint64_t *)&v88, (uint64_t)&v73);
  }
  else
  {
    sub_63D394((uint64_t)&v89, *((uint64_t *)&v88 + 1), (uint64_t)&v73);
    uint64_t v28 = v27 + 104;
  }
  *((void *)&v88 + 1) = v28;
  sub_8A54EC(a1, (uint64_t *)v61);
  uint64_t v29 = *((void *)&v88 + 1);
  if (*((void *)&v88 + 1) >= v89)
  {
    uint64_t v35 = sub_63D48C((void ***)&v88, (uint64_t)v61);
    int v36 = (std::__shared_weak_count *)*((void *)&v69 + 1);
    *((void *)&v88 + 1) = v35;
    if (*((void *)&v69 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v69 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  else
  {
    *(void *)(*((void *)&v88 + 1) + 16) = 0;
    *(_OWORD *)uint64_t v29 = 0u;
    *(_OWORD *)uint64_t v29 = *(_OWORD *)v61;
    *(void **)(v29 + 16) = v62[0];
    uint64_t v30 = v62[1];
    *(_OWORD *)char v61 = 0u;
    *(_OWORD *)uint64_t v62 = 0u;
    *(void *)(v29 + 24) = v30;
    *(void *)(v29 + 32) = v63;
    uint64_t v63 = 0;
    uint64_t v31 = v64;
    *(void *)(v29 + 40) = v64;
    uint64_t v32 = v65;
    *(void *)(v29 + 48) = v65;
    *(_DWORD *)(v29 + 56) = v66;
    if (v32)
    {
      unint64_t v33 = v31[1];
      unint64_t v34 = *(void *)(v29 + 32);
      if ((v34 & (v34 - 1)) != 0)
      {
        if (v33 >= v34) {
          v33 %= v34;
        }
      }
      else
      {
        v33 &= v34 - 1;
      }
      v30[v33] = v29 + 40;
      char v64 = 0;
      uint64_t v65 = 0;
    }
    *(unsigned char *)(v29 + 64) = v67;
    *(_DWORD *)(v29 + 72) = v68;
    *(_OWORD *)(v29 + 80) = v69;
    long long v69 = 0uLL;
    *(_WORD *)(v29 + 96) = v70;
    *((void *)&v88 + 1) = v29 + 104;
  }
  uint64_t v37 = v64;
  if (v64)
  {
    do
    {
      std::string::size_type v38 = (void *)*v37;
      sub_4F4B48((uint64_t)(v37 + 2));
      operator delete(v37);
      uint64_t v37 = v38;
    }
    while (v38);
  }
  char v39 = v62[1];
  v62[1] = 0;
  if (v39) {
    operator delete(v39);
  }
  long long v40 = (void **)v61[0];
  if (v61[0])
  {
    uint64_t v41 = (void **)v61[1];
    std::string::size_type v42 = v61[0];
    if (v61[1] != v61[0])
    {
      do
      {
        if (*((char *)v41 - 1) < 0) {
          operator delete(*(v41 - 3));
        }
        v41 -= 3;
      }
      while (v41 != v40);
      std::string::size_type v42 = v61[0];
    }
    v61[1] = v40;
    operator delete(v42);
  }
  *(_OWORD *)a4 = v88;
  *(void *)(a4 + 16) = v89;
  long long v88 = 0uLL;
  unint64_t v89 = 0;
  long long v43 = v79;
  if (v79 && !atomic_fetch_add(&v79->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
  }
  long long v44 = v77;
  if (v77)
  {
    do
    {
      std::string::size_type v45 = (void *)*v44;
      sub_4F4B48((uint64_t)(v44 + 2));
      operator delete(v44);
      long long v44 = v45;
    }
    while (v45);
  }
  std::string::size_type v46 = __p;
  std::string __p = 0;
  if (v46) {
    operator delete(v46);
  }
  long long v47 = (void **)v73;
  if (v73)
  {
    long long v48 = v74;
    int v49 = v73;
    if (v74 != v73)
    {
      do
      {
        if (*((char *)v48 - 1) < 0) {
          operator delete(*(v48 - 3));
        }
        v48 -= 3;
      }
      while (v48 != v47);
      int v49 = v73;
    }
    uint64_t v74 = v47;
    operator delete(v49);
  }
  unint64_t v50 = v84;
  if (v84 && !atomic_fetch_add(&v84->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
  }
  uint64_t v51 = v83;
  if (v83)
  {
    do
    {
      size_t v52 = (void *)*v51;
      sub_4F4B48((uint64_t)(v51 + 2));
      operator delete(v51);
      uint64_t v51 = v52;
    }
    while (v52);
  }
  int v53 = v82;
  uint64_t v82 = 0;
  if (v53) {
    operator delete(v53);
  }
  unint64_t v54 = (void **)v80;
  if (v80)
  {
    unint64_t v55 = v81;
    unint64_t v56 = v80;
    if (v81 != v80)
    {
      do
      {
        if (*((char *)v55 - 1) < 0) {
          operator delete(*(v55 - 3));
        }
        v55 -= 3;
      }
      while (v55 != v54);
      unint64_t v56 = v80;
    }
    std::string v81 = v54;
    operator delete(v56);
  }
  uint64_t v57 = v86;
  if (!v86 || atomic_fetch_add(&v86->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_82;
    }
    goto LABEL_81;
  }
  ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
  std::__shared_weak_count::__release_weak(v57);
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
LABEL_81:
  }
    operator delete(v87.__r_.__value_.__l.__data_);
LABEL_82:
  unint64_t v58 = (void **)v88;
  if ((void)v88)
  {
    std::string::size_type v59 = (void **)*((void *)&v88 + 1);
    std::string::size_type v60 = (void *)v88;
    if (*((void *)&v88 + 1) != (void)v88)
    {
      do
        std::string::size_type v59 = sub_4F31D0(v59 - 13);
      while (v59 != v58);
      std::string::size_type v60 = (void *)v88;
    }
    *((void *)&v88 + 1) = v58;
    operator delete(v60);
  }
}

void sub_8AB8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37)
{
  sub_4F31D0(&a9);
  sub_4F31D0(&a24);
  sub_4F31D0(&a37);
  sub_14A84(v37 - 152);
  if (*(char *)(v37 - 113) < 0) {
    operator delete(*(void **)(v37 - 136));
  }
  sub_5920E0((void **)(v37 - 112));
  _Unwind_Resume(a1);
}

uint64_t sub_8AB9F4@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t result = sub_684668(a2);
  if (result)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    int v7 = sub_6846C0(a2);
    uint64_t v8 = *a1;
    if (v7)
    {
      uint64_t v9 = *(uint64_t (**)(void *, uint64_t))(v8 + 152);
      int v10 = a1;
      uint64_t v11 = a2;
    }
    else
    {
      uint64_t v9 = *(uint64_t (**)(void *, uint64_t))(v8 + 160);
      int v10 = a1;
      uint64_t v11 = a2;
    }
    return v9(v10, v11);
  }
  return result;
}

uint64_t sub_8ABADC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t result = sub_684668(a2);
  if (result)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    int v7 = (void *)(a1 - 2136);
    int v8 = sub_6846C0(a2);
    uint64_t v9 = *v7;
    if (v8)
    {
      int v10 = *(uint64_t (**)(void *, uint64_t))(v9 + 152);
      uint64_t v11 = v7;
      uint64_t v12 = a2;
    }
    else
    {
      int v10 = *(uint64_t (**)(void *, uint64_t))(v9 + 160);
      uint64_t v11 = v7;
      uint64_t v12 = a2;
    }
    return v10(v11, v12);
  }
  return result;
}

uint64_t sub_8ABBC8@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_5964A0((uint64_t)v73, a1);
  sub_6835F0((uint64_t)v73, 6);
  sub_67705C((uint64_t)v73, 1, (uint64_t)&v68);
  int v3 = byte_25CCE5F;
  if (byte_25CCE5F >= 0) {
    size_t v4 = byte_25CCE5F;
  }
  else {
    size_t v4 = qword_25CCE50;
  }
  int v5 = byte_25CD7A7;
  if (byte_25CD7A7 >= 0) {
    size_t v6 = byte_25CD7A7;
  }
  else {
    size_t v6 = qword_25CD798;
  }
  unint64_t v7 = v6 + v4;
  if (v6 + v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v7 <= 0x16)
  {
    size_t v66 = 0;
    unint64_t v67 = 0;
    long long __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v67) = v6 + v4;
    if (!v4) {
      goto LABEL_14;
    }
    goto LABEL_10;
  }
  uint64_t v20 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v7 | 7) != 0x17) {
    uint64_t v20 = v7 | 7;
  }
  uint64_t v21 = v20 + 1;
  p_dst = (void **)operator new(v20 + 1);
  size_t v66 = v6 + v4;
  unint64_t v67 = v21 | 0x8000000000000000;
  long long __dst = p_dst;
  if (v4)
  {
LABEL_10:
    if (v3 >= 0) {
      uint64_t v9 = &qword_25CCE48;
    }
    else {
      uint64_t v9 = (uint64_t *)qword_25CCE48;
    }
    memmove(p_dst, v9, v4);
  }
LABEL_14:
  int v10 = (char *)p_dst + v4;
  if (v6)
  {
    if (v5 >= 0) {
      uint64_t v11 = &qword_25CD790;
    }
    else {
      uint64_t v11 = (uint64_t *)qword_25CD790;
    }
    memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  if (sub_637DD8((long long **)&v68))
  {
    sub_6352AC((uint64_t)v56, (uint64_t)&__dst);
    uint64_t v12 = (std::__shared_weak_count *)operator new(0x80uLL);
    v12->__shared_owners_ = 0;
    v12->__shared_weak_owners_ = 0;
    v12->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
    sub_63D394((uint64_t)&v74, (uint64_t)&v12[1], (uint64_t)&v68);
    unint64_t v54 = &v12[1].__vftable;
    unint64_t v55 = v12;
    sub_6370D4(&v60, v56, 10, &v54);
    uint64_t v13 = v55;
    if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    uint64_t v14 = v59;
    if (v59)
    {
      do
      {
        uint64_t v15 = (void *)*v14;
        sub_4F4B48((uint64_t)(v14 + 2));
        operator delete(v14);
        uint64_t v14 = v15;
      }
      while (v15);
    }
    uint64_t v16 = (void *)*((void *)&v57 + 1);
    *((void *)&v57 + 1) = 0;
    if (v16) {
      operator delete(v16);
    }
    uint64_t v17 = (void **)v56[0];
    if (v56[0])
    {
      unint64_t v18 = (void **)v56[1];
      std::string::size_type v19 = v56[0];
      if (v56[1] != v56[0])
      {
        do
        {
          if (*((char *)v18 - 1) < 0) {
            operator delete(*(v18 - 3));
          }
          v18 -= 3;
        }
        while (v18 != v17);
        std::string::size_type v19 = v56[0];
      }
      v56[1] = v17;
      operator delete(v19);
    }
    unint64_t v22 = a2[1];
    if (v22 >= a2[2])
    {
      uint64_t v23 = sub_63D140(a2, (uint64_t)&v60);
    }
    else
    {
      sub_63D394((uint64_t)(a2 + 2), a2[1], (uint64_t)&v60);
      uint64_t v23 = v22 + 104;
      a2[1] = v22 + 104;
    }
    a2[1] = v23;
    uint64_t v24 = v64;
    if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    uint64_t v25 = v63;
    if (v63)
    {
      do
      {
        uint64_t v26 = (void *)*v25;
        sub_4F4B48((uint64_t)(v25 + 2));
        operator delete(v25);
        uint64_t v25 = v26;
      }
      while (v26);
    }
    uint64_t v27 = v62;
    uint64_t v62 = 0;
    if (v27) {
      operator delete(v27);
    }
    uint64_t v28 = (void **)v60;
    if (v60)
    {
      uint64_t v29 = v61;
      uint64_t v30 = v60;
      if (v61 != v60)
      {
        do
        {
          if (*((char *)v29 - 1) < 0) {
            operator delete(*(v29 - 3));
          }
          v29 -= 3;
        }
        while (v29 != v28);
        uint64_t v30 = v60;
      }
      char v61 = v28;
      operator delete(v30);
    }
  }
  *(_OWORD *)unint64_t v56 = 0u;
  long long v57 = 0u;
  int v58 = 1065353216;
  uint64_t v52 = 0;
  int v53 = 0;
  sub_6373D8((uint64_t)&v60, (uint64_t)&__dst, (uint64_t)v56, 1, &v52);
  uint64_t v31 = v53;
  if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  uint64_t v32 = (void *)v57;
  if ((void)v57)
  {
    do
    {
      unint64_t v33 = (void *)*v32;
      sub_4F4B48((uint64_t)(v32 + 2));
      operator delete(v32);
      uint64_t v32 = v33;
    }
    while (v33);
  }
  unint64_t v34 = v56[0];
  v56[0] = 0;
  if (v34) {
    operator delete(v34);
  }
  unint64_t v35 = a2[1];
  if (v35 >= a2[2])
  {
    uint64_t v36 = sub_63D140(a2, (uint64_t)&v60);
  }
  else
  {
    sub_63D394((uint64_t)(a2 + 2), a2[1], (uint64_t)&v60);
    uint64_t v36 = v35 + 104;
    a2[1] = v35 + 104;
  }
  a2[1] = v36;
  uint64_t v37 = v64;
  if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  std::string::size_type v38 = v63;
  if (v63)
  {
    do
    {
      char v39 = (void *)*v38;
      sub_4F4B48((uint64_t)(v38 + 2));
      operator delete(v38);
      std::string::size_type v38 = v39;
    }
    while (v39);
  }
  long long v40 = v62;
  uint64_t v62 = 0;
  if (v40) {
    operator delete(v40);
  }
  uint64_t v41 = (void **)v60;
  if (v60)
  {
    std::string::size_type v42 = v61;
    long long v43 = v60;
    if (v61 != v60)
    {
      do
      {
        if (*((char *)v42 - 1) < 0) {
          operator delete(*(v42 - 3));
        }
        v42 -= 3;
      }
      while (v42 != v41);
      long long v43 = v60;
    }
    char v61 = v41;
    operator delete(v43);
  }
  if (SHIBYTE(v67) < 0) {
    operator delete(__dst);
  }
  long long v44 = v72;
  if (v72 && !atomic_fetch_add(&v72->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
  std::string::size_type v45 = v71;
  if (v71)
  {
    do
    {
      std::string::size_type v46 = (void *)*v45;
      sub_4F4B48((uint64_t)(v45 + 2));
      operator delete(v45);
      std::string::size_type v45 = v46;
    }
    while (v46);
  }
  long long v47 = v70;
  __int16 v70 = 0;
  if (v47) {
    operator delete(v47);
  }
  long long v48 = (void **)v68;
  if (v68)
  {
    int v49 = v69;
    unint64_t v50 = v68;
    if (v69 != v68)
    {
      do
      {
        if (*((char *)v49 - 1) < 0) {
          operator delete(*(v49 - 3));
        }
        v49 -= 3;
      }
      while (v49 != v48);
      unint64_t v50 = v68;
    }
    long long v69 = v48;
    operator delete(v50);
  }
  return sub_576848((uint64_t)v73);
}

void sub_8AC1F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  sub_4F31D0(&a23);
  if (a41 < 0) {
    operator delete(__p);
  }
  sub_4F31D0(&a42);
  sub_576848((uint64_t)&a55);
  sub_5920E0(v55);
  _Unwind_Resume(a1);
}

uint64_t sub_8AC2D4@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_8ABBC8(a1, a2);
}

void sub_8AC2DC(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (!sub_6846C0(a2))
  {
    if (byte_25CE2B7 < 0)
    {
      sub_4200(&__dst, (void *)xmmword_25CE2A0, *((unint64_t *)&xmmword_25CE2A0 + 1));
    }
    else
    {
      long long __dst = xmmword_25CE2A0;
      unint64_t v72 = unk_25CE2B0;
    }
    goto LABEL_28;
  }
  int v5 = byte_25CCE5F;
  if (byte_25CCE5F >= 0) {
    size_t v6 = byte_25CCE5F;
  }
  else {
    size_t v6 = qword_25CCE50;
  }
  int v7 = byte_25CD7A7;
  if (byte_25CD7A7 >= 0) {
    size_t v8 = byte_25CD7A7;
  }
  else {
    size_t v8 = qword_25CD798;
  }
  unint64_t v9 = v8 + v6;
  if (v8 + v6 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v9 > 0x16)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v8 + v6;
    unint64_t v72 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    if (!v6) {
      goto LABEL_15;
    }
    goto LABEL_11;
  }
  unint64_t v72 = 0;
  long long __dst = 0uLL;
  p_dst = &__dst;
  HIBYTE(v72) = v8 + v6;
  if (v6)
  {
LABEL_11:
    if (v5 >= 0) {
      uint64_t v11 = &qword_25CCE48;
    }
    else {
      uint64_t v11 = (uint64_t *)qword_25CCE48;
    }
    memmove(p_dst, v11, v6);
  }
LABEL_15:
  uint64_t v12 = (char *)p_dst + v6;
  if (v8)
  {
    if (v7 >= 0) {
      uint64_t v13 = &qword_25CD790;
    }
    else {
      uint64_t v13 = (uint64_t *)qword_25CD790;
    }
    memmove(v12, v13, v8);
  }
  v12[v8] = 0;
LABEL_28:
  if (sub_682F60((uint64_t)(a1 + 2168)) && !a1[2840])
  {
    (*(void (**)(void **__return_ptr, unsigned char *, void, void))(*(void *)a1 + 168))(&v66, a1, 0, 0);
    if (sub_637DD8((long long **)&v66))
    {
      sub_6352AC((uint64_t)&v57, (uint64_t)&__dst);
      uint64_t v16 = (std::__shared_weak_count *)operator new(0x80uLL);
      v16->__shared_owners_ = 0;
      v16->__shared_weak_owners_ = 0;
      v16->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
      sub_63D394((uint64_t)&v73, (uint64_t)&v16[1], (uint64_t)&v66);
      unint64_t v55 = &v16[1].__vftable;
      unint64_t v56 = v16;
      sub_6370D4(v61, &v57, 5, &v55);
      uint64_t v17 = v56;
      if (v56 && !atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      unint64_t v18 = v60;
      if (v60)
      {
        do
        {
          std::string::size_type v19 = (void *)*v18;
          sub_4F4B48((uint64_t)(v18 + 2));
          operator delete(v18);
          unint64_t v18 = v19;
        }
        while (v19);
      }
      uint64_t v20 = __p;
      std::string __p = 0;
      if (v20) {
        operator delete(v20);
      }
      uint64_t v21 = (void **)v57;
      if (v57)
      {
        unint64_t v22 = v58;
        uint64_t v23 = v57;
        if (v58 != v57)
        {
          do
          {
            if (*((char *)v22 - 1) < 0) {
              operator delete(*(v22 - 3));
            }
            v22 -= 3;
          }
          while (v22 != v21);
          uint64_t v23 = v57;
        }
        int v58 = v21;
        operator delete(v23);
      }
      unint64_t v24 = a3[1];
      if (v24 >= a3[2])
      {
        uint64_t v25 = sub_63D140(a3, (uint64_t)v61);
      }
      else
      {
        sub_63D394((uint64_t)(a3 + 2), a3[1], (uint64_t)v61);
        uint64_t v25 = v24 + 104;
        a3[1] = v24 + 104;
      }
      a3[1] = v25;
      uint64_t v26 = v65;
      if (v65 && !atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
      uint64_t v27 = v64;
      if (v64)
      {
        do
        {
          uint64_t v28 = (void *)*v27;
          sub_4F4B48((uint64_t)(v27 + 2));
          operator delete(v27);
          uint64_t v27 = v28;
        }
        while (v28);
      }
      uint64_t v29 = (void *)*((void *)&v62 + 1);
      *((void *)&v62 + 1) = 0;
      if (v29) {
        operator delete(v29);
      }
      uint64_t v30 = (void **)v61[0];
      if (v61[0])
      {
        uint64_t v31 = (void **)v61[1];
        uint64_t v32 = v61[0];
        if (v61[1] != v61[0])
        {
          do
          {
            if (*((char *)v31 - 1) < 0) {
              operator delete(*(v31 - 3));
            }
            v31 -= 3;
          }
          while (v31 != v30);
          uint64_t v32 = v61[0];
        }
        v61[1] = v30;
        operator delete(v32);
      }
    }
    unint64_t v33 = v70;
    if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
    unint64_t v34 = v69;
    if (v69)
    {
      do
      {
        unint64_t v35 = (void *)*v34;
        sub_4F4B48((uint64_t)(v34 + 2));
        operator delete(v34);
        unint64_t v34 = v35;
      }
      while (v35);
    }
    uint64_t v36 = v68;
    int v68 = 0;
    if (v36) {
      operator delete(v36);
    }
    uint64_t v37 = (void **)v66;
    if (v66)
    {
      std::string::size_type v38 = v67;
      char v39 = v66;
      if (v67 != v66)
      {
        do
        {
          if (*((char *)v38 - 1) < 0) {
            operator delete(*(v38 - 3));
          }
          v38 -= 3;
        }
        while (v38 != v37);
        char v39 = v66;
      }
      unint64_t v67 = v37;
      operator delete(v39);
    }
  }
  *(_OWORD *)char v61 = 0u;
  long long v62 = 0u;
  int v63 = 1065353216;
  uint64_t v53 = 0;
  unint64_t v54 = 0;
  sub_6373D8((uint64_t)&v66, (uint64_t)&__dst, (uint64_t)v61, 1, &v53);
  long long v40 = v54;
  if (v54 && !atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  uint64_t v41 = (void *)v62;
  if ((void)v62)
  {
    do
    {
      std::string::size_type v42 = (void *)*v41;
      sub_4F4B48((uint64_t)(v41 + 2));
      operator delete(v41);
      uint64_t v41 = v42;
    }
    while (v42);
  }
  long long v43 = v61[0];
  v61[0] = 0;
  if (v43) {
    operator delete(v43);
  }
  unint64_t v44 = a3[1];
  if (v44 >= a3[2])
  {
    uint64_t v45 = sub_63D140(a3, (uint64_t)&v66);
  }
  else
  {
    sub_63D394((uint64_t)(a3 + 2), a3[1], (uint64_t)&v66);
    uint64_t v45 = v44 + 104;
    a3[1] = v44 + 104;
  }
  a3[1] = v45;
  std::string::size_type v46 = v70;
  if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
  }
  long long v47 = v69;
  if (v69)
  {
    do
    {
      long long v48 = (void *)*v47;
      sub_4F4B48((uint64_t)(v47 + 2));
      operator delete(v47);
      long long v47 = v48;
    }
    while (v48);
  }
  int v49 = v68;
  int v68 = 0;
  if (v49) {
    operator delete(v49);
  }
  unint64_t v50 = (void **)v66;
  if (v66)
  {
    uint64_t v51 = v67;
    uint64_t v52 = v66;
    if (v67 != v66)
    {
      do
      {
        if (*((char *)v51 - 1) < 0) {
          operator delete(*(v51 - 3));
        }
        v51 -= 3;
      }
      while (v51 != v50);
      uint64_t v52 = v66;
    }
    unint64_t v67 = v50;
    operator delete(v52);
  }
  if (SHIBYTE(v72) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_8AC960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36)
{
  sub_4F31D0(&a23);
  sub_4F31D0(&a36);
  if (*(char *)(v37 - 89) < 0)
  {
    operator delete(*(void **)(v37 - 112));
    sub_5920E0(v36);
    _Unwind_Resume(a1);
  }
  sub_5920E0(v36);
  _Unwind_Resume(a1);
}

void sub_8ACA28(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
}

void sub_8ACA30(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  sub_6775F8(a1 + 2168, (uint64_t)&v95);
  std::string::size_type size = HIBYTE(v95.__r_.__value_.__r.__words[2]);
  if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v95.__r_.__value_.__l.__size_;
  }
  if (!size || sub_6829A4(a1 + 2168))
  {
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(void *)(a4 + 88) = 0;
    *(void *)(a4 + 96) = 0;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_DWORD *)(a4 + 56) = 1065353216;
    *(unsigned char *)(a4 + 64) = 1;
    *(void *)(a4 + 80) = 0;
    *(_WORD *)(a4 + 96) = 0;
    goto LABEL_126;
  }
  int v68 = a3;
  int v9 = a2 | a3;
  int v10 = SHIBYTE(v95.__r_.__value_.__r.__words[2]);
  if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v11 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v11 = v95.__r_.__value_.__l.__size_;
  }
  BOOL v12 = v9 == 0;
  if (v9) {
    uint64_t v13 = 528;
  }
  else {
    uint64_t v13 = 600;
  }
  if (v9) {
    uint64_t v14 = &qword_25CD790;
  }
  else {
    uint64_t v14 = &qword_25CD7D8;
  }
  uint64_t v15 = &byte_25CD7A7;
  if (v12) {
    uint64_t v15 = &byte_25CD7EF;
  }
  size_t v16 = *v15;
  int v17 = (char)v16;
  unint64_t v18 = &qword_25CD798;
  if (v12) {
    unint64_t v18 = &qword_25CD7E0;
  }
  size_t v19 = *v18;
  if ((v16 & 0x80u) == 0) {
    size_t v20 = v16;
  }
  else {
    size_t v20 = v19;
  }
  unint64_t v21 = v20 + v11;
  if (v20 + v11 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  unint64_t v67 = v14;
  if (v21 > 0x16)
  {
    uint64_t v66 = v13;
    uint64_t v40 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v40 = v21 | 7;
    }
    uint64_t v41 = v40 + 1;
    p_dst = (std::string *)operator new(v40 + 1);
    __dst.__r_.__value_.__l.__size_ = v20 + v11;
    __dst.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    uint64_t v13 = v66;
    if (!v11) {
      goto LABEL_31;
    }
    goto LABEL_27;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = &__dst;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v20 + v11;
  if (v11)
  {
LABEL_27:
    if (v10 >= 0) {
      uint64_t v23 = &v95;
    }
    else {
      uint64_t v23 = (std::string *)v95.__r_.__value_.__r.__words[0];
    }
    memmove(p_dst, v23, v11);
  }
LABEL_31:
  unint64_t v24 = (char *)p_dst + v11;
  if (v20)
  {
    if (v17 >= 0) {
      uint64_t v25 = v67;
    }
    else {
      uint64_t v25 = *(uint64_t **)((char *)dword_25CD580 + v13);
    }
    memmove(v24, v25, v20);
  }
  v24[v20] = 0;
  if (v10 < 0) {
    operator delete(v95.__r_.__value_.__l.__data_);
  }
  std::string v95 = __dst;
  long long v92 = 0;
  uint64_t v93 = 0;
  unint64_t v94 = 0;
  uint64_t v26 = *(void *)(a1 + 80);
  uint64_t v27 = *(void *)(a1 + 88);
  std::string v86 = 0;
  std::string v87 = 0;
  uint64_t v88 = 0;
  sub_8A6F8((char *)&v86, v26, v27, 0xAAAAAAAAAAAAAAABLL * ((v27 - v26) >> 3));
  sub_5954B0((uint64_t)v89, a1 + 104);
  char v91 = *(unsigned char *)(a1 + 144);
  uint64_t v28 = (long long **)nullsub_1(a1 + 80);
  uint64_t v29 = *v28;
  uint64_t v30 = v28[1];
  while (v29 != v30)
  {
    if (*((char *)v29 + 23) < 0)
    {
      sub_4200(&__dst, *(void **)v29, *((void *)v29 + 1));
    }
    else
    {
      long long v31 = *v29;
      __dst.__r_.__value_.__r.__words[2] = *((void *)v29 + 2);
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v31;
    }
    sub_625E4(&__dst, (char *)&qword_25CD790, (uint64_t)&dword_25CD808);
    sub_8AD240(a1, &__dst);
    uint64_t v32 = v93;
    if ((unint64_t)v93 >= v94)
    {
      uint64_t v93 = sub_1D740(&v92, (uint64_t)&__dst);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_39;
      }
      goto LABEL_49;
    }
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      long long v33 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
      *((void *)v93 + 2) = *((void *)&__dst.__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v32 = v33;
      uint64_t v93 = v32 + 24;
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_39;
      }
LABEL_49:
      operator delete(__dst.__r_.__value_.__l.__data_);
      goto LABEL_39;
    }
    sub_4200(v93, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    uint64_t v93 = v32 + 24;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_49;
    }
LABEL_39:
    uint64_t v29 = (long long *)((char *)v29 + 24);
  }
  sub_6353B4((uint64_t)&v86, (std::string **)&v92);
  *(_OWORD *)uint64_t v75 = 0u;
  long long v76 = 0u;
  int v77 = 1065353216;
  __int16 v70 = 0;
  uint64_t v71 = 0;
  long long v69 = 0;
  sub_8A6F8((char *)&v69, (uint64_t)v86, (uint64_t)v87, 0xAAAAAAAAAAAAAAABLL * ((v87 - v86) >> 3));
  sub_5954B0((uint64_t)&__p, (uint64_t)v89);
  char v74 = v91;
  sub_637820((uint64_t)&__dst, (uint64_t)&v95, (uint64_t)v75, 6, (uint64_t)&v69, 1);
  unint64_t v34 = v73;
  if (v73)
  {
    do
    {
      unint64_t v35 = (void *)*v34;
      sub_4F4B48((uint64_t)(v34 + 2));
      operator delete(v34);
      unint64_t v34 = v35;
    }
    while (v35);
  }
  uint64_t v36 = __p;
  std::string __p = 0;
  if (v36) {
    operator delete(v36);
  }
  uint64_t v37 = (void **)v69;
  if (v69)
  {
    std::string::size_type v38 = v70;
    char v39 = v69;
    if (v70 != v69)
    {
      do
      {
        if (*((char *)v38 - 1) < 0) {
          operator delete(*(v38 - 3));
        }
        v38 -= 3;
      }
      while (v38 != v37);
      char v39 = v69;
    }
    __int16 v70 = v37;
    operator delete(v39);
  }
  std::string::size_type v42 = (void *)v76;
  if ((void)v76)
  {
    do
    {
      long long v43 = (void *)*v42;
      sub_4F4B48((uint64_t)(v42 + 2));
      operator delete(v42);
      std::string::size_type v42 = v43;
    }
    while (v43);
  }
  unint64_t v44 = v75[0];
  v75[0] = 0;
  if (v44) {
    operator delete(v44);
  }
  if (v68 && *(unsigned char *)(a1 + 2872))
  {
    uint64_t v45 = 234;
    if (!*(unsigned char *)(a1 + 2873)) {
      uint64_t v45 = 240;
    }
    std::string::size_type v46 = &qword_25CD940;
    if (*(unsigned char *)(a1 + 2873)) {
      std::string::size_type v46 = (uint64_t *)&xmmword_25CD928;
    }
    long long v47 = &byte_25CD93F;
    if (!*(unsigned char *)(a1 + 2873)) {
      long long v47 = (char *)&unk_25CD957;
    }
    if (*v47 < 0)
    {
      if (*(unsigned char *)(a1 + 2873)) {
        int v49 = (unint64_t *)&xmmword_25CD928 + 1;
      }
      else {
        int v49 = (unint64_t *)&unk_25CD948;
      }
      sub_4200(v75, *(void **)&dword_25CD580[v45], *v49);
    }
    else
    {
      *(_OWORD *)uint64_t v75 = *(_OWORD *)v46;
      *(void *)&long long v76 = v46[2];
    }
    sub_8A5178((uint64_t)&__dst, (uint64_t)v75, a4);
    if (SBYTE7(v76) < 0) {
      operator delete(v75[0]);
    }
  }
  else
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    sub_8A6F8((char *)a4, (uint64_t)__dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__dst.__r_.__value_.__l.__size_ - __dst.__r_.__value_.__r.__words[0]) >> 3));
    sub_5954B0(a4 + 24, (uint64_t)&v79);
    *(unsigned char *)(a4 + 64) = v81;
    *(_DWORD *)(a4 + 72) = v82;
    long long v48 = v84;
    *(void *)(a4 + 80) = v83;
    *(void *)(a4 + 88) = v48;
    if (v48) {
      atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(_WORD *)(a4 + 96) = v85;
  }
  unint64_t v50 = v84;
  if (v84 && !atomic_fetch_add(&v84->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
  }
  uint64_t v51 = v80;
  if (v80)
  {
    do
    {
      uint64_t v52 = (void *)*v51;
      sub_4F4B48((uint64_t)(v51 + 2));
      operator delete(v51);
      uint64_t v51 = v52;
    }
    while (v52);
  }
  uint64_t v53 = v79;
  size_t v79 = 0;
  if (v53) {
    operator delete(v53);
  }
  std::string::size_type v54 = __dst.__r_.__value_.__r.__words[0];
  if (__dst.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v55 = __dst.__r_.__value_.__l.__size_;
    unint64_t v56 = (void *)__dst.__r_.__value_.__r.__words[0];
    if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v55 - 1) < 0) {
          operator delete(*(void **)(v55 - 24));
        }
        v55 -= 24;
      }
      while (v55 != v54);
      unint64_t v56 = (void *)__dst.__r_.__value_.__r.__words[0];
    }
    __dst.__r_.__value_.__l.__size_ = v54;
    operator delete(v56);
  }
  long long v57 = v90;
  if (v90)
  {
    do
    {
      int v58 = (void *)*v57;
      sub_4F4B48((uint64_t)(v57 + 2));
      operator delete(v57);
      long long v57 = v58;
    }
    while (v58);
  }
  std::string::size_type v59 = (void *)v89[0];
  v89[0] = 0;
  if (v59) {
    operator delete(v59);
  }
  uint64_t v60 = (uint64_t)v86;
  if (v86)
  {
    uint64_t v61 = (uint64_t)v87;
    long long v62 = v86;
    if (v87 != v86)
    {
      do
      {
        if (*(char *)(v61 - 1) < 0) {
          operator delete(*(void **)(v61 - 24));
        }
        v61 -= 24;
      }
      while (v61 != v60);
      long long v62 = v86;
    }
    std::string v87 = (unsigned char *)v60;
    operator delete(v62);
  }
  int v63 = v92;
  if (v92)
  {
    char v64 = v93;
    uint64_t v65 = v92;
    if (v93 != v92)
    {
      do
      {
        if (*(v64 - 1) < 0) {
          operator delete(*((void **)v64 - 3));
        }
        v64 -= 24;
      }
      while (v64 != v63);
      uint64_t v65 = v92;
    }
    uint64_t v93 = v63;
    operator delete(v65);
  }
LABEL_126:
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v95.__r_.__value_.__l.__data_);
  }
}

void sub_8AD138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  sub_4F31D0(&a30);
  sub_4D4880((void **)(v35 - 208));
  sub_1A668((void **)(v35 - 136));
  if (*(char *)(v35 - 89) < 0) {
    operator delete(*(void **)(v35 - 112));
  }
  _Unwind_Resume(a1);
}

void sub_8AD240(uint64_t a1, std::string *a2)
{
  int v4 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  int v5 = (std::string *)a2->__r_.__value_.__r.__words[0];
  std::string::size_type size = a2->__r_.__value_.__l.__size_;
  if (v4 >= 0) {
    int v7 = a2;
  }
  else {
    int v7 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  unint64_t v8 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v4 >= 0) {
    size_t v9 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v9 = a2->__r_.__value_.__l.__size_;
  }
  if (byte_25CC7B7 >= 0) {
    size_t v10 = byte_25CC7B7;
  }
  else {
    size_t v10 = qword_25CC7A8;
  }
  if (v10 <= v9)
  {
    if (byte_25CC7B7 >= 0) {
      BOOL v12 = &qword_25CC7A0;
    }
    else {
      BOOL v12 = (uint64_t *)qword_25CC7A0;
    }
    BOOL v11 = memcmp(v12, v7, v10) == 0;
  }
  else
  {
    BOOL v11 = 0;
  }
  if (byte_25CC79F >= 0) {
    size_t v13 = byte_25CC79F;
  }
  else {
    size_t v13 = qword_25CC790;
  }
  if (v13 <= v9)
  {
    if (byte_25CC79F >= 0) {
      uint64_t v15 = &qword_25CC788;
    }
    else {
      uint64_t v15 = (uint64_t *)qword_25CC788;
    }
    BOOL v14 = memcmp(v15, v7, v13) == 0;
    if (!v14 && !v11) {
      return;
    }
  }
  else
  {
    BOOL v14 = 0;
    if (!v11) {
      return;
    }
  }
  BOOL v94 = v14;
  BOOL v96 = v11;
  uint64_t v95 = a1;
  HIBYTE(v102) = 0;
  LOBYTE(__p[0]) = 0;
  if (byte_25CD72F >= 0) {
    size_t v16 = &qword_25CD718;
  }
  else {
    size_t v16 = (uint64_t *)qword_25CD718;
  }
  if (byte_25CD72F >= 0) {
    int64_t v17 = byte_25CD72F;
  }
  else {
    int64_t v17 = qword_25CD720;
  }
  if (!v17)
  {
    unint64_t v23 = 0;
    goto LABEL_41;
  }
  if ((uint64_t)v9 >= v17)
  {
    unint64_t v18 = (char *)v7 + v9;
    int v19 = *(char *)v16;
    size_t v20 = v7;
    while (1)
    {
      if (v9 - v17 == -1) {
        goto LABEL_48;
      }
      unint64_t v21 = (char *)memchr(v20, v19, v9 - v17 + 1);
      if (!v21) {
        goto LABEL_48;
      }
      unint64_t v22 = v21;
      if (!memcmp(v21, v16, v17)) {
        break;
      }
      size_t v20 = (std::string *)(v22 + 1);
      size_t v9 = v18 - (v22 + 1);
      if ((uint64_t)v9 < v17) {
        goto LABEL_48;
      }
    }
    if (v22 != v18)
    {
      unint64_t v23 = v22 - (char *)v7;
      if (v22 - (char *)v7 != -1)
      {
LABEL_41:
        if ((v8 & 0x80) != 0)
        {
          if (size >= v23)
          {
            unint64_t v8 = size;
            size_t v24 = size - v23;
            if (size - v23 <= 0x7FFFFFFFFFFFFFF7)
            {
LABEL_44:
              if (v24 >= 0x17)
              {
                uint64_t v48 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v24 | 7) != 0x17) {
                  uint64_t v48 = v24 | 7;
                }
                uint64_t v49 = v48 + 1;
                p_dst = (long long *)operator new(v48 + 1);
                *((void *)&__dst + 1) = v24;
                int64_t v100 = v49 | 0x8000000000000000;
                *(void *)&long long __dst = p_dst;
              }
              else
              {
                HIBYTE(v100) = v24;
                p_dst = &__dst;
                if (v8 == v23)
                {
                  *((unsigned char *)&__dst + v24) = 0;
                  if ((SHIBYTE(v102) & 0x80000000) == 0)
                  {
LABEL_47:
                    *(_OWORD *)std::string __p = __dst;
                    int64_t v102 = v100;
                    goto LABEL_48;
                  }
LABEL_105:
                  operator delete(__p[0]);
                  goto LABEL_47;
                }
              }
              memmove(p_dst, (char *)v5 + v23, v24);
              *((unsigned char *)p_dst + v24) = 0;
              if ((SHIBYTE(v102) & 0x80000000) == 0) {
                goto LABEL_47;
              }
              goto LABEL_105;
            }
LABEL_130:
            sub_188D690();
          }
        }
        else
        {
          int v5 = a2;
          if (v23 <= v8)
          {
            size_t v24 = v8 - v23;
            if (v8 - v23 <= 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_44;
            }
            goto LABEL_130;
          }
        }
        sub_5AD0();
      }
    }
  }
LABEL_48:
  BOOL v26 = v96;
  if (!v96)
  {
    int v27 = byte_25CC79F;
    if (byte_25CC79F >= 0) {
      size_t v28 = byte_25CC79F;
    }
    else {
      size_t v28 = qword_25CC790;
    }
    int v29 = SHIBYTE(v102);
    if (v102 >= 0) {
      size_t v30 = HIBYTE(v102);
    }
    else {
      size_t v30 = (size_t)__p[1];
    }
    unint64_t v34 = v30 + v28;
    if (v30 + v28 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v34 > 0x16)
    {
      uint64_t v38 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v34 | 7) != 0x17) {
        uint64_t v38 = v34 | 7;
      }
      uint64_t v39 = v38 + 1;
      uint64_t v32 = (long long *)operator new(v38 + 1);
      *((void *)&__dst + 1) = v30 + v28;
      int64_t v100 = v39 | 0x8000000000000000;
      *(void *)&long long __dst = v32;
      BOOL v26 = 0;
      uint64_t v33 = v95;
      if (!v28) {
        goto LABEL_81;
      }
    }
    else
    {
      int64_t v100 = 0;
      long long __dst = 0uLL;
      uint64_t v32 = &__dst;
      HIBYTE(v100) = v30 + v28;
      uint64_t v33 = v95;
      if (!v28) {
        goto LABEL_81;
      }
    }
    uint64_t v37 = &qword_25CC788;
    goto LABEL_77;
  }
  int v27 = byte_25CC7B7;
  if (byte_25CC7B7 >= 0) {
    size_t v28 = byte_25CC7B7;
  }
  else {
    size_t v28 = qword_25CC7A8;
  }
  int v29 = SHIBYTE(v102);
  if (v102 >= 0) {
    size_t v30 = HIBYTE(v102);
  }
  else {
    size_t v30 = (size_t)__p[1];
  }
  unint64_t v31 = v30 + v28;
  if (v30 + v28 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v31 <= 0x16)
  {
    int64_t v100 = 0;
    long long __dst = 0uLL;
    uint64_t v32 = &__dst;
    HIBYTE(v100) = v30 + v28;
    uint64_t v33 = v95;
    if (!v28) {
      goto LABEL_81;
    }
    goto LABEL_72;
  }
  uint64_t v35 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v31 | 7) != 0x17) {
    uint64_t v35 = v31 | 7;
  }
  uint64_t v36 = v35 + 1;
  uint64_t v32 = (long long *)operator new(v35 + 1);
  *((void *)&__dst + 1) = v30 + v28;
  int64_t v100 = v36 | 0x8000000000000000;
  *(void *)&long long __dst = v32;
  BOOL v26 = v96;
  uint64_t v33 = v95;
  if (v28)
  {
LABEL_72:
    uint64_t v37 = &qword_25CC7A0;
LABEL_77:
    if (v27 >= 0) {
      uint64_t v40 = v37;
    }
    else {
      uint64_t v40 = (const void *)*v37;
    }
    memmove(v32, v40, v28);
  }
LABEL_81:
  uint64_t v41 = (char *)v32 + v28;
  if (v30)
  {
    if (v29 >= 0) {
      std::string::size_type v42 = __p;
    }
    else {
      std::string::size_type v42 = (void **)__p[0];
    }
    memmove(v41, v42, v30);
  }
  v41[v30] = 0;
  uint64_t v43 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((v43 & 0x80u) == 0) {
    std::string::size_type v44 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v44 = a2->__r_.__value_.__l.__size_;
  }
  uint64_t v45 = HIBYTE(v100);
  if (v100 < 0) {
    uint64_t v45 = *((void *)&__dst + 1);
  }
  if (v44 != v45) {
    goto LABEL_107;
  }
  if (v100 >= 0) {
    std::string::size_type v46 = (unsigned __int8 *)&__dst;
  }
  else {
    std::string::size_type v46 = (unsigned __int8 *)__dst;
  }
  if ((v43 & 0x80) != 0)
  {
    if (!memcmp(a2->__r_.__value_.__l.__data_, v46, a2->__r_.__value_.__l.__size_)) {
      goto LABEL_206;
    }
LABEL_107:
    if (v94 && sub_6823C0(v33 + 2168))
    {
      char v98 = 0;
      __s[0] = 0;
      int64_t v50 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      if ((v50 & 0x80u) == 0) {
        uint64_t v51 = a2;
      }
      else {
        uint64_t v51 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      if (byte_25CD2AF >= 0) {
        uint64_t v52 = &qword_25CD298;
      }
      else {
        uint64_t v52 = (uint64_t *)qword_25CD298;
      }
      if (byte_25CD2AF >= 0) {
        int64_t v53 = byte_25CD2AF;
      }
      else {
        int64_t v53 = unk_25CD2A0;
      }
      if (v53)
      {
        if ((v50 & 0x80u) != 0) {
          int64_t v50 = a2->__r_.__value_.__l.__size_;
        }
        if (v50 >= v53)
        {
          std::string::size_type v54 = (char *)v51 + v50;
          int v55 = *(char *)v52;
          unint64_t v56 = v51;
          do
          {
            uint64_t v57 = v50 - v53;
            if (v57 == -1) {
              break;
            }
            int v58 = (char *)memchr(v56, v55, v57 + 1);
            if (!v58) {
              break;
            }
            std::string::size_type v59 = v58;
            if (!memcmp(v58, v52, v53))
            {
              if (v59 != v54)
              {
                std::string::size_type v60 = v59 - (char *)v51;
                if (v59 - (char *)v51 != -1) {
                  goto LABEL_135;
                }
              }
              break;
            }
            unint64_t v56 = (std::string *)(v59 + 1);
            int64_t v50 = v54 - (v59 + 1);
          }
          while (v50 >= v53);
        }
      }
      else
      {
        std::string::size_type v60 = 0;
LABEL_135:
        std::string::replace(a2, v60, v53, __s, 0);
        if (v98 < 0) {
          operator delete(*(void **)__s);
        }
      }
      char v98 = 0;
      __s[0] = 0;
      int64_t v61 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      if ((v61 & 0x80u) == 0) {
        long long v62 = a2;
      }
      else {
        long long v62 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      if (byte_25CD51F >= 0) {
        int v63 = &qword_25CD508;
      }
      else {
        int v63 = (uint64_t *)qword_25CD508;
      }
      if (byte_25CD51F >= 0) {
        int64_t v64 = byte_25CD51F;
      }
      else {
        int64_t v64 = unk_25CD510;
      }
      if (v64)
      {
        if ((v61 & 0x80u) != 0) {
          int64_t v61 = a2->__r_.__value_.__l.__size_;
        }
        if (v61 >= v64)
        {
          uint64_t v65 = (char *)v62 + v61;
          int v66 = *(char *)v63;
          unint64_t v67 = v62;
          do
          {
            uint64_t v68 = v61 - v64;
            if (v68 == -1) {
              break;
            }
            long long v69 = (char *)memchr(v67, v66, v68 + 1);
            if (!v69) {
              break;
            }
            __int16 v70 = v69;
            if (!memcmp(v69, v63, v64))
            {
              if (v70 != v65)
              {
                std::string::size_type v71 = v70 - (char *)v62;
                if (v70 - (char *)v62 != -1) {
                  goto LABEL_157;
                }
              }
              break;
            }
            unint64_t v67 = (std::string *)(v70 + 1);
            int64_t v61 = v65 - (v70 + 1);
          }
          while (v61 >= v64);
        }
      }
      else
      {
        std::string::size_type v71 = 0;
LABEL_157:
        std::string::replace(a2, v71, v64, __s, 0);
        if (v98 < 0) {
          operator delete(*(void **)__s);
        }
      }
      uint64_t v33 = v95;
      BOOL v26 = v96;
    }
    if (v26 && sub_6823D0(v33 + 2168))
    {
      char v98 = 0;
      __s[0] = 0;
      int64_t v72 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      if ((v72 & 0x80u) == 0) {
        char v73 = a2;
      }
      else {
        char v73 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      if (byte_25CD297 >= 0) {
        char v74 = &qword_25CD280;
      }
      else {
        char v74 = (uint64_t *)qword_25CD280;
      }
      if (byte_25CD297 >= 0) {
        int64_t v75 = byte_25CD297;
      }
      else {
        int64_t v75 = unk_25CD288;
      }
      if (v75)
      {
        if ((v72 & 0x80u) != 0) {
          int64_t v72 = a2->__r_.__value_.__l.__size_;
        }
        if (v72 >= v75)
        {
          long long v76 = (char *)v73 + v72;
          int v77 = *(char *)v74;
          char v78 = v73;
          do
          {
            uint64_t v79 = v72 - v75;
            if (v79 == -1) {
              break;
            }
            unint64_t v80 = (char *)memchr(v78, v77, v79 + 1);
            if (!v80) {
              break;
            }
            char v81 = v80;
            if (!memcmp(v80, v74, v75))
            {
              if (v81 != v76)
              {
                std::string::size_type v82 = v81 - (char *)v73;
                if (v81 - (char *)v73 != -1) {
                  goto LABEL_182;
                }
              }
              break;
            }
            char v78 = (std::string *)(v81 + 1);
            int64_t v72 = v76 - (v81 + 1);
          }
          while (v72 >= v75);
        }
      }
      else
      {
        std::string::size_type v82 = 0;
LABEL_182:
        std::string::replace(a2, v82, v75, __s, 0);
        if (v98 < 0) {
          operator delete(*(void **)__s);
        }
      }
      char v98 = 0;
      __s[0] = 0;
      int64_t v83 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      if ((v83 & 0x80u) == 0) {
        char v84 = a2;
      }
      else {
        char v84 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      if (byte_25CD51F >= 0) {
        __int16 v85 = &qword_25CD508;
      }
      else {
        __int16 v85 = (uint64_t *)qword_25CD508;
      }
      if (byte_25CD51F >= 0) {
        int64_t v86 = byte_25CD51F;
      }
      else {
        int64_t v86 = unk_25CD510;
      }
      if (v86)
      {
        if ((v83 & 0x80u) != 0) {
          int64_t v83 = a2->__r_.__value_.__l.__size_;
        }
        if (v83 >= v86)
        {
          std::string v87 = (char *)v84 + v83;
          int v88 = *(char *)v85;
          unint64_t v89 = v84;
          while (1)
          {
            uint64_t v90 = v83 - v86;
            if (v90 == -1) {
              break;
            }
            char v91 = (char *)memchr(v89, v88, v90 + 1);
            if (!v91) {
              break;
            }
            long long v92 = v91;
            if (!memcmp(v91, v85, v86))
            {
              if (v92 != v87)
              {
                std::string::size_type v93 = v92 - (char *)v84;
                if (v92 - (char *)v84 != -1) {
                  goto LABEL_204;
                }
              }
              goto LABEL_206;
            }
            unint64_t v89 = (std::string *)(v92 + 1);
            int64_t v83 = v87 - (v92 + 1);
            if (v83 < v86) {
              goto LABEL_206;
            }
          }
        }
      }
      else
      {
        std::string::size_type v93 = 0;
LABEL_204:
        std::string::replace(a2, v93, v86, __s, 0);
        if (v98 < 0) {
          operator delete(*(void **)__s);
        }
      }
    }
    goto LABEL_206;
  }
  if (*((unsigned char *)&a2->__r_.__value_.__s + 23))
  {
    long long v47 = a2;
    while (v47->__r_.__value_.__s.__data_[0] == *v46)
    {
      long long v47 = (std::string *)((char *)v47 + 1);
      ++v46;
      if (!--v43) {
        goto LABEL_206;
      }
    }
    goto LABEL_107;
  }
LABEL_206:
  if ((SHIBYTE(v100) & 0x80000000) == 0)
  {
    if ((v29 & 0x80000000) == 0) {
      return;
    }
LABEL_210:
    operator delete(__p[0]);
    return;
  }
  operator delete((void *)__dst);
  if (v29 < 0) {
    goto LABEL_210;
  }
}

void sub_8ADB00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v25 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((v25 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a25);
  _Unwind_Resume(exception_object);
}

void sub_8ADB74(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
}

void sub_8ADB7C(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  long long v93 = 0uLL;
  unint64_t v94 = 0;
  uint64_t v10 = *(void *)(a1 + 1952);
  uint64_t v11 = *(void *)(a1 + 1960);
  int v12 = *(_DWORD *)(a1 + 2128);
  size_t v13 = (std::__shared_weak_count *)operator new(0xB98uLL);
  int v14 = v12 - 1;
  v13->__shared_owners_ = 0;
  v13->__shared_weak_owners_ = 0;
  v13->__vftable = (std::__shared_weak_count_vtbl *)off_243AE28;
  std::string::size_type v15 = (std::string::size_type)&v13[1];
  sub_89F8D4((std::string::size_type)&v13[1], v10, v11, a2, a3, v14);
  char v91 = &v13[1].__vftable;
  long long v92 = v13;
  (*(void (**)(long long **__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 168))(&v86, a1, 1, a4);
  if (!sub_637DD8(&v86))
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    goto LABEL_75;
  }
  sub_8A5F40(v15, 0, 0, 0, (uint64_t)&v81);
  if (BYTE4(v13[78].__vftable))
  {
    uint64_t v16 = nullsub_1(&v81);
    v68[0] = 0;
    v68[1] = 0;
    __p[0] = 0;
    sub_8A6F8((char *)v68, *(void *)v16, *(void *)(v16 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v16 + 8) - *(void *)v16) >> 3));
    sub_5954B0((uint64_t)&__p[1], v16 + 24);
    char v74 = *(unsigned char *)(v16 + 64);
    sub_80C150(v15, (long long **)v68);
    sub_63797C((uint64_t)&v81, (uint64_t)v68);
    int64_t v17 = v71;
    if (v71)
    {
      do
      {
        unint64_t v18 = (void *)*v17;
        sub_4F4B48((uint64_t)(v17 + 2));
        operator delete(v17);
        int64_t v17 = v18;
      }
      while (v18);
    }
    int v19 = __p[1];
    __p[1] = 0;
    if (v19) {
      operator delete(v19);
    }
    size_t v20 = (void **)v68[0];
    if (v68[0])
    {
      unint64_t v21 = (void **)v68[1];
      unint64_t v22 = v68[0];
      if (v68[1] != v68[0])
      {
        do
        {
          if (*((char *)v21 - 1) < 0) {
            operator delete(*(v21 - 3));
          }
          v21 -= 3;
        }
        while (v21 != v20);
        unint64_t v22 = v68[0];
      }
      v68[1] = v20;
      operator delete(v22);
    }
  }
  sub_637D8C((uint64_t)&v86, &v80);
  while (1)
  {
    sub_637D8C(v80, v68);
    size_t v24 = v68[0];
    unint64_t v23 = (std::__shared_weak_count *)v68[1];
    if (v68[1] && !atomic_fetch_add((atomic_ullong *volatile)v68[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    if (!v24) {
      break;
    }
    sub_637D8C(v80, v68);
    long long v25 = *(_OWORD *)v68;
    v68[0] = 0;
    v68[1] = 0;
    BOOL v26 = (std::__shared_weak_count *)*((void *)&v80 + 1);
    long long v80 = v25;
    if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
      int v27 = (std::__shared_weak_count *)v68[1];
      if (v68[1]) {
        goto LABEL_24;
      }
    }
    else
    {
      int v27 = (std::__shared_weak_count *)v68[1];
      if (v68[1])
      {
LABEL_24:
        if (!atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
    }
  }
  uint64_t v28 = v80;
  int v29 = sub_897368((uint64_t)v91);
  sub_63733C(v28, v29);
  uint64_t v30 = v80;
  unint64_t v31 = (std::__shared_weak_count *)operator new(0x80uLL);
  v31->__shared_owners_ = 0;
  v31->__shared_weak_owners_ = 0;
  v31->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
  sub_59540C((uint64_t)v68, (uint64_t)&v31[1], (uint64_t)&v81);
  char v78 = &v31[1].__vftable;
  uint64_t v79 = v31;
  sub_637344(v30, (uint64_t *)&v78);
  uint64_t v32 = v79;
  if (v79 && !atomic_fetch_add(&v79->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
    uint64_t v33 = *((void *)&v93 + 1);
    if (*((void *)&v93 + 1) >= v94) {
      goto LABEL_33;
    }
LABEL_31:
    sub_63D394((uint64_t)&v94, v33, (uint64_t)&v86);
    uint64_t v34 = v33 + 104;
  }
  else
  {
    uint64_t v33 = *((void *)&v93 + 1);
    if (*((void *)&v93 + 1) < v94) {
      goto LABEL_31;
    }
LABEL_33:
    uint64_t v34 = sub_63D140((uint64_t *)&v93, (uint64_t)&v86);
  }
  *((void *)&v93 + 1) = v34;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 168))(v68, a1, 1, a4);
  uint64_t v35 = *((void *)&v93 + 1);
  if (*((void *)&v93 + 1) >= v94)
  {
    uint64_t v41 = sub_63D48C((void ***)&v93, (uint64_t)v68);
    std::string::size_type v42 = (std::__shared_weak_count *)*((void *)&v76 + 1);
    *((void *)&v93 + 1) = v41;
    if (*((void *)&v76 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v76 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  else
  {
    *(void *)(*((void *)&v93 + 1) + 16) = 0;
    *(_OWORD *)uint64_t v35 = 0u;
    *(_OWORD *)uint64_t v35 = *(_OWORD *)v68;
    *(void **)(v35 + 16) = __p[0];
    uint64_t v36 = __p[1];
    *(_OWORD *)uint64_t v68 = 0u;
    *(_OWORD *)std::string __p = 0u;
    *(void *)(v35 + 24) = v36;
    *(void *)(v35 + 32) = v70;
    uint64_t v70 = 0;
    uint64_t v37 = v71;
    *(void *)(v35 + 40) = v71;
    uint64_t v38 = v72;
    *(void *)(v35 + 48) = v72;
    *(_DWORD *)(v35 + 56) = v73;
    if (v38)
    {
      unint64_t v39 = v37[1];
      unint64_t v40 = *(void *)(v35 + 32);
      if ((v40 & (v40 - 1)) != 0)
      {
        if (v39 >= v40) {
          v39 %= v40;
        }
      }
      else
      {
        v39 &= v40 - 1;
      }
      v36[v39] = v35 + 40;
      std::string::size_type v71 = 0;
      uint64_t v72 = 0;
    }
    *(unsigned char *)(v35 + 64) = v74;
    *(_DWORD *)(v35 + 72) = v75;
    *(_OWORD *)(v35 + 80) = v76;
    long long v76 = 0uLL;
    *(_WORD *)(v35 + 96) = v77;
    *((void *)&v93 + 1) = v35 + 104;
  }
  uint64_t v43 = v71;
  if (v71)
  {
    do
    {
      std::string::size_type v44 = (void *)*v43;
      sub_4F4B48((uint64_t)(v43 + 2));
      operator delete(v43);
      uint64_t v43 = v44;
    }
    while (v44);
  }
  uint64_t v45 = __p[1];
  __p[1] = 0;
  if (v45) {
    operator delete(v45);
  }
  std::string::size_type v46 = (void **)v68[0];
  if (v68[0])
  {
    long long v47 = (void **)v68[1];
    uint64_t v48 = v68[0];
    if (v68[1] != v68[0])
    {
      do
      {
        if (*((char *)v47 - 1) < 0) {
          operator delete(*(v47 - 3));
        }
        v47 -= 3;
      }
      while (v47 != v46);
      uint64_t v48 = v68[0];
    }
    v68[1] = v46;
    operator delete(v48);
  }
  *(_OWORD *)a5 = v93;
  a5[2] = v94;
  long long v93 = 0uLL;
  unint64_t v94 = 0;
  uint64_t v49 = (std::__shared_weak_count *)*((void *)&v80 + 1);
  if (*((void *)&v80 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v80 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
    std::__shared_weak_count::__release_weak(v49);
  }
  int64_t v50 = v85;
  if (v85 && !atomic_fetch_add(&v85->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
  }
  uint64_t v51 = v84;
  if (v84)
  {
    do
    {
      uint64_t v52 = (void *)*v51;
      sub_4F4B48((uint64_t)(v51 + 2));
      operator delete(v51);
      uint64_t v51 = v52;
    }
    while (v52);
  }
  int64_t v53 = v83;
  int64_t v83 = 0;
  if (v53) {
    operator delete(v53);
  }
  std::string::size_type v54 = (void **)v81;
  if (v81)
  {
    int v55 = v82;
    unint64_t v56 = v81;
    if (v82 != v81)
    {
      do
      {
        if (*((char *)v55 - 1) < 0) {
          operator delete(*(v55 - 3));
        }
        v55 -= 3;
      }
      while (v55 != v54);
      unint64_t v56 = v81;
    }
    std::string::size_type v82 = v54;
    operator delete(v56);
  }
LABEL_75:
  uint64_t v57 = v90;
  if (v90 && !atomic_fetch_add(&v90->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
    std::__shared_weak_count::__release_weak(v57);
  }
  int v58 = v89;
  if (v89)
  {
    do
    {
      std::string::size_type v59 = (void *)*v58;
      sub_4F4B48((uint64_t)(v58 + 2));
      operator delete(v58);
      int v58 = v59;
    }
    while (v59);
  }
  std::string::size_type v60 = v88;
  int v88 = 0;
  if (v60) {
    operator delete(v60);
  }
  int64_t v61 = v86;
  if (v86)
  {
    long long v62 = v87;
    int v63 = v86;
    if (v87 != v86)
    {
      do
      {
        if (*((char *)v62 - 1) < 0) {
          operator delete(*((void **)v62 - 3));
        }
        long long v62 = (long long *)((char *)v62 - 24);
      }
      while (v62 != v61);
      int v63 = v86;
    }
    std::string v87 = v61;
    operator delete(v63);
  }
  int64_t v64 = v92;
  if (v92 && !atomic_fetch_add(&v92->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
    std::__shared_weak_count::__release_weak(v64);
  }
  uint64_t v65 = (void **)v93;
  if ((void)v93)
  {
    int v66 = (void **)*((void *)&v93 + 1);
    unint64_t v67 = (void *)v93;
    if (*((void *)&v93 + 1) != (void)v93)
    {
      do
        int v66 = sub_4F31D0(v66 - 13);
      while (v66 != v65);
      unint64_t v67 = (void *)v93;
    }
    *((void *)&v93 + 1) = v65;
    operator delete(v67);
  }
}

void sub_8AE3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,void *a27)
{
  sub_4F31D0(&a9);
  sub_14A84((uint64_t)&a25);
  sub_4F31D0(&a27);
  sub_4F31D0((void **)(v27 - 232));
  sub_14A84(v27 - 128);
  sub_5920E0((void **)(v27 - 112));
  _Unwind_Resume(a1);
}

void sub_8AE4E0(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
}

void sub_8AE4E8(unsigned char *a1@<X0>, std::string *a2@<X8>)
{
  if (a1[2875])
  {
    if ((byte_25CFD8F & 0x80000000) == 0)
    {
      int v3 = &xmmword_25CFD78;
LABEL_7:
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *v3;
      a2->__r_.__value_.__r.__words[2] = *((void *)v3 + 2);
      return;
    }
    unint64_t v6 = *((void *)&xmmword_25CFD78 + 1);
    int v5 = (void *)xmmword_25CFD78;
    int v7 = a2;
    goto LABEL_11;
  }
  if (a1[2877])
  {
    if ((byte_25CFDA7 & 0x80000000) == 0)
    {
      int v3 = &xmmword_25CFD90;
      goto LABEL_7;
    }
    unint64_t v6 = *((void *)&xmmword_25CFD90 + 1);
    int v5 = (void *)xmmword_25CFD90;
    int v7 = a2;
LABEL_11:
    sub_4200(v7, v5, v6);
    return;
  }
  if (sub_89E9D0((uint64_t)a1))
  {
    sub_80807C((uint64_t)a1, (uint64_t)a2);
    if (a1[1860])
    {
      if (byte_25CD87F >= 0) {
        unint64_t v8 = (const std::string::value_type *)&qword_25CD868;
      }
      else {
        unint64_t v8 = (const std::string::value_type *)qword_25CD868;
      }
      if (byte_25CD87F >= 0) {
        std::string::size_type v9 = byte_25CD87F;
      }
      else {
        std::string::size_type v9 = unk_25CD870;
      }
      std::string::append(a2, v8, v9);
      if (byte_25CDB07 >= 0) {
        uint64_t v10 = (const std::string::value_type *)&qword_25CDAF0;
      }
      else {
        uint64_t v10 = (const std::string::value_type *)qword_25CDAF0;
      }
      if (byte_25CDB07 >= 0) {
        std::string::size_type v11 = byte_25CDB07;
      }
      else {
        std::string::size_type v11 = unk_25CDAF8;
      }
      std::string::append(a2, v10, v11);
    }
  }
  else
  {
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
  }
}

void sub_8AE638(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_8AE654(uint64_t a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  if (sub_7F7188(a1))
  {
    if (*(unsigned char *)(a1 + 2877))
    {
      if (byte_25CC9AF < 0)
      {
        long long v16 = xmmword_25CC998;
        sub_4200(a3, (void *)v16, *((unint64_t *)&v16 + 1));
      }
      else
      {
        *(_OWORD *)&a3->__r_.__value_.__l.__data_ = xmmword_25CC998;
        a3->__r_.__value_.__r.__words[2] = unk_25CC9A8;
      }
    }
    else
    {
      sub_8053F0(a1, a3);
    }
    return;
  }
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  uint64_t v6 = *(void *)(a1 + 936);
  uint64_t v7 = *(void *)(a1 + 944);
  if (v6 == v7)
  {
    if (!sub_6F2FD8(a1 + 304)) {
      return;
    }
    uint64_t v6 = *(void *)(a1 + 936);
    uint64_t v7 = *(void *)(a1 + 944);
    if (v6 == v7)
    {
      BOOL v8 = sub_6F2FD8(a1 + 304);
      uint64_t v6 = *(void *)(a1 + 936);
      uint64_t v7 = *(void *)(a1 + 944);
      if (v8) {
        goto LABEL_15;
      }
    }
  }
  if (v7 - v6 == 152)
  {
LABEL_15:
    int v9 = 1;
  }
  else
  {
    int v9 = sub_7F7B64(a1) ^ 1;
    uint64_t v6 = *(void *)(a1 + 936);
    uint64_t v7 = *(void *)(a1 + 944);
  }
  if (v6 == v7) {
    uint64_t v10 = a1 + 304;
  }
  else {
    uint64_t v10 = v6;
  }
  if (sub_6F2880(v10 + 64) && !*(unsigned char *)(a1 + 2121))
  {
    BOOL v11 = 0;
    if (!*(unsigned char *)(a1 + 2122))
    {
      int v17 = *(_DWORD *)(a1 + 1848);
      if (v17 != 23)
      {
        BOOL v11 = 0;
        if (!*(unsigned char *)(a1 + 2123) && v17 != 92) {
          BOOL v11 = *(unsigned char *)(a1 + 1859) == 0;
        }
      }
    }
  }
  else
  {
    BOOL v11 = 0;
  }
  sub_89EFE4(a1, (uint64_t)v33);
  if (v9) {
    int v12 = (const std::string *)v33;
  }
  else {
    int v12 = (const std::string *)&dword_25CD1F0;
  }
  std::string::operator=(a3, v12);
  char v13 = !v11;
  if (!*(unsigned char *)(a1 + 1856)) {
    char v13 = 1;
  }
  if ((v13 & 1) == 0)
  {
    std::string::operator=(a3, (const std::string *)&qword_25CD250);
    if (sub_6F2DA8(v10 + 64))
    {
      if (byte_25CD69F >= 0) {
        int v14 = (const std::string::value_type *)&qword_25CD688;
      }
      else {
        int v14 = (const std::string::value_type *)qword_25CD688;
      }
      if (byte_25CD69F >= 0) {
        std::string::size_type v15 = byte_25CD69F;
      }
      else {
        std::string::size_type v15 = unk_25CD690;
      }
      std::string::append(a3, v14, v15);
    }
    else if (sub_6F3124(v10))
    {
      if (v9)
      {
        sub_89F110(a1, (uint64_t)__p);
      }
      else if (byte_25CD42F < 0)
      {
        sub_4200(__p, (void *)xmmword_25CD418, *((unint64_t *)&xmmword_25CD418 + 1));
      }
      else
      {
        *(_OWORD *)std::string __p = xmmword_25CD418;
        uint64_t v32 = unk_25CD428;
      }
      unint64_t v18 = v32 >= 0 ? (const std::string::value_type *)__p : (const std::string::value_type *)__p[0];
      int v19 = v32 >= 0 ? (void *)HIBYTE(v32) : __p[1];
      std::string::append(a3, v18, (std::string::size_type)v19);
      if (SHIBYTE(v32) < 0) {
        operator delete(__p[0]);
      }
    }
  }
  if (((v9 | a2) & 1) == 0)
  {
    uint64_t v20 = *(void *)(a1 + 936);
    BOOL v21 = sub_6F2880(v20 + 216);
    if (v21 && *(unsigned char *)(a1 + 1856)) {
      unint64_t v22 = &qword_25CD658;
    }
    else {
      unint64_t v22 = &qword_25CD430;
    }
    int v23 = *((char *)v22 + 23);
    size_t v24 = v23 >= 0 ? (const std::string::value_type *)v22 : (const std::string::value_type *)*v22;
    std::string::size_type v25 = v23 >= 0 ? *((unsigned __int8 *)v22 + 23) : v22[1];
    std::string::append(a3, v24, v25);
    if (*(unsigned char *)(a1 + 1856) && v21)
    {
      if (sub_6F2DA8(v20 + 216))
      {
        uint64_t v27 = &qword_25CD6A0;
      }
      else
      {
        if (!sub_6F3124(v20 + 152)) {
          goto LABEL_85;
        }
        uint64_t v27 = &qword_25CD430;
      }
      int v28 = *((char *)v27 + 23);
      if (v28 >= 0) {
        int v29 = (const std::string::value_type *)v27;
      }
      else {
        int v29 = (const std::string::value_type *)*v27;
      }
      if (v28 >= 0) {
        std::string::size_type v30 = *((unsigned __int8 *)v27 + 23);
      }
      else {
        std::string::size_type v30 = v27[1];
      }
      std::string::append(a3, v29, v30);
    }
  }
LABEL_85:
  if (v34 < 0) {
    operator delete(v33[0]);
  }
}

void sub_8AE9FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if (*(char *)(v20 + 23) < 0) {
      goto LABEL_6;
    }
  }
  else if (*(char *)(v20 + 23) < 0)
  {
LABEL_6:
    operator delete(*(void **)v20);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_8AEAA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 960);
  if (0x86BCA1AF286BCA1BLL * ((*(void *)(a1 + 968) - v2) >> 3) < 2) {
    return 1;
  }
  sub_4AA8E0((char *)__dst, (long long *)(v2 + 152));
  BOOL v7 = !sub_6F2880((uint64_t)&v13) || *(unsigned char *)(a1 + 1856) == 0;
  uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  BOOL v3 = v8 != 0;
  if (!v7)
  {
    if (v8) {
      BOOL v3 = sub_6F3124((uint64_t)__dst);
    }
  }
  if (v19 < 0)
  {
    operator delete(__p);
    if ((v17 & 0x80000000) == 0)
    {
LABEL_14:
      if ((v15 & 0x80000000) == 0) {
        goto LABEL_15;
      }
      goto LABEL_20;
    }
  }
  else if ((v17 & 0x80000000) == 0)
  {
    goto LABEL_14;
  }
  operator delete(v16);
  if ((v15 & 0x80000000) == 0)
  {
LABEL_15:
    if ((v12 & 0x80000000) == 0) {
      goto LABEL_16;
    }
LABEL_21:
    operator delete(v11);
    if ((v10 & 0x80000000) == 0) {
      return v3;
    }
    goto LABEL_22;
  }
LABEL_20:
  operator delete(v14);
  if (v12 < 0) {
    goto LABEL_21;
  }
LABEL_16:
  if ((v10 & 0x80000000) == 0) {
    return v3;
  }
LABEL_22:
  operator delete(__dst[0]);
  return v3;
}

void sub_8AEBFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4A50F4((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *sub_8AEC10@<X0>(std::string *result@<X0>, char a2@<W1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  uint64_t data = (uint64_t)result[40].__r_.__value_.__l.__data_;
  std::string::size_type size = result[40].__r_.__value_.__l.__size_;
  if (data == size) {
    return result;
  }
  uint64_t v6 = result;
  BOOL v8 = sub_6F2880(data + 64);
  if (v8 && v6[77].__r_.__value_.__s.__data_[8]) {
    int v9 = (const std::string *)&qword_25CD268;
  }
  else {
    int v9 = (const std::string *)&qword_25CD208;
  }
  uint64_t result = std::string::operator=(a3, v9);
  if (v6[77].__r_.__value_.__s.__data_[8]) {
    BOOL v10 = v8;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    if (sub_6F2DA8(data + 64))
    {
      BOOL v11 = (uint64_t *)&xmmword_25CD6D0;
LABEL_14:
      int v12 = *((char *)v11 + 23);
      if (v12 >= 0) {
        uint64_t v13 = (const std::string::value_type *)v11;
      }
      else {
        uint64_t v13 = (const std::string::value_type *)*v11;
      }
      if (v12 >= 0) {
        std::string::size_type v14 = *((unsigned __int8 *)v11 + 23);
      }
      else {
        std::string::size_type v14 = v11[1];
      }
      uint64_t result = std::string::append(a3, v13, v14);
      goto LABEL_21;
    }
    uint64_t result = (std::string *)sub_6F3124(data);
    if (result)
    {
      BOOL v11 = &qword_25CD448;
      goto LABEL_14;
    }
  }
LABEL_21:
  if (size - data != 152 && (a2 & 1) == 0)
  {
    std::string::pointer v15 = v6[40].__r_.__value_.__l.__data_;
    BOOL v16 = sub_6F2880((uint64_t)(v15 + 216));
    if (v16 && v6[77].__r_.__value_.__s.__data_[8]) {
      char v17 = &qword_25CD670;
    }
    else {
      char v17 = &qword_25CD460;
    }
    int v18 = *((char *)v17 + 23);
    char v19 = v18 >= 0 ? (const std::string::value_type *)v17 : (const std::string::value_type *)*v17;
    std::string::size_type v20 = v18 >= 0 ? *((unsigned __int8 *)v17 + 23) : v17[1];
    uint64_t result = std::string::append(a3, v19, v20);
    if (v6[77].__r_.__value_.__s.__data_[8] && v16)
    {
      if (sub_6F2DA8((uint64_t)(v15 + 216)))
      {
        unint64_t v22 = (uint64_t *)&xmmword_25CD6E8;
      }
      else
      {
        uint64_t result = (std::string *)sub_6F3124((uint64_t)(v15 + 152));
        if (!result) {
          return result;
        }
        unint64_t v22 = &qword_25CD460;
      }
      int v23 = *((char *)v22 + 23);
      if (v23 >= 0) {
        size_t v24 = (const std::string::value_type *)v22;
      }
      else {
        size_t v24 = (const std::string::value_type *)*v22;
      }
      if (v23 >= 0) {
        std::string::size_type v25 = *((unsigned __int8 *)v22 + 23);
      }
      else {
        std::string::size_type v25 = v22[1];
      }
      return std::string::append(a3, v24, v25);
    }
  }
  return result;
}

void sub_8AEDC4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_8AEDE4(uint64_t a1)
{
  if (sub_7FE2E4(a1)) {
    return 1;
  }
  if (sub_7FE2FC(a1)) {
    return 1;
  }
  if ((*(_DWORD *)(a1 + 1848) & 0xFFFFFFFE) == 6) {
    return 1;
  }
  return *(unsigned char *)(a1 + 1856) == 0;
}

std::string::size_type sub_8AEE64(std::string::size_type a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, int a6)
{
  std::string::size_type v9 = sub_80E174(a1, a2, a3, a4, a5, a6);
  sub_6778A0(v9 + 2136, a4, a5);
  *(void *)a1 = off_243ABA0;
  *(void *)(a1 + 2136) = off_243AC68;
  BOOL v10 = (void **)(a1 + 2880);
  *(_OWORD *)(a1 + 2848) = 0u;
  *(_OWORD *)(a1 + 2864) = 0u;
  *(_OWORD *)(a1 + 2880) = 0u;
  *(_OWORD *)(a1 + 2892) = 0u;
  *(unsigned char *)(a1 + 2912) = 2;
  uint64_t v11 = a1 + 2920;
  *(void *)(a1 + 2920) = 0;
  *(void *)(a1 + 2936) = 0;
  *(void *)(a1 + 2928) = 0;
  uint64_t v12 = *(void *)(a4 + 1064);
  uint64_t v13 = (const std::string *)sub_64F474(a4);
  std::string::operator=((std::string *)(a1 + 2848), v13);
  BOOL v14 = sub_63ACE0(v12 + 2400 * a5 + 1872);
  *(unsigned char *)(a1 + 2872) = v14;
  if (v14)
  {
    BOOL v15 = sub_63A8F8(v12 + 2400 * a5 + 1896);
    BOOL v16 = *(unsigned char *)(a1 + 2872) == 0;
    BOOL v17 = 0;
    *(unsigned char *)(a1 + 2873) = v15;
    if (!v16 && *(unsigned char *)(v12 + 2400 * a5 + 2081)) {
      BOOL v17 = sub_63A908(v12 + 2400 * a5 + 1896) && *(unsigned char *)(v12 + 2400 * a5 + 1896) == 0;
    }
  }
  else
  {
    BOOL v17 = 0;
    *(unsigned char *)(a1 + 2873) = 0;
  }
  *(unsigned char *)(a1 + 2874) = v17;
  int v18 = (unsigned char *)(v12 + 2400 * a5);
  char v19 = v18 + 648;
  unsigned __int8 v20 = v18[651];
  *(unsigned char *)(a1 + 2879) = (v20 | v18[320]) != 0;
  int v21 = v18[649];
  if (v21) {
    LOBYTE(v21) = *(void *)(v12 + 2400 * a5 + 568) == -1;
  }
  *(unsigned char *)(a1 + 2875) = v21;
  BOOL v22 = 1;
  if (!*v19) {
    BOOL v22 = *(unsigned char *)(v12 + 2400 * a5 + 650) != 0;
  }
  *(unsigned char *)(a1 + 2876) = v22;
  *(unsigned char *)(a1 + 2877) = v20;
  *(unsigned char *)(a1 + 2878) = 1;
  uint64_t v23 = v12 + 2400 * a5;
  std::string::size_type v25 = *(unsigned char **)(v23 + 176);
  size_t v24 = *(unsigned char **)(v23 + 184);
  if (v25 != v24)
  {
    uint64_t v26 = v12 + 2400 * a5;
    if (*(unsigned char *)(v26 + 330)) {
      uint64_t v27 = (char *)(v26 + 329);
    }
    else {
      uint64_t v27 = (char *)(a4 + 1057);
    }
    char v28 = *v27;
    uint64_t v29 = v24 - v25;
    if (v24 - v25 < 0) {
      sub_2E00();
    }
    std::string::size_type v30 = (char *)operator new(v24 - v25);
    unint64_t v31 = &v30[4 * (v29 >> 2)];
    memcpy(v30, v25, v29 - 1);
    int v32 = *(_DWORD *)(v12 + 2400 * a5 + 200);
    uint64_t v33 = *v10;
    if (*v10)
    {
      *(void *)(a1 + 2888) = v33;
      operator delete(v33);
      *BOOL v10 = 0;
      *(void *)(a1 + 2888) = 0;
      *(void *)(a1 + 2896) = 0;
    }
    *(void *)(a1 + 2880) = v30;
    *(void *)(a1 + 2888) = v31;
    *(void *)(a1 + 2896) = v31;
    *(_DWORD *)(a1 + 2904) = v32;
    *(unsigned char *)(a1 + 2912) = v28;
    uint64_t v11 = a1 + 2920;
  }
  char v34 = (std::string **)(v12 + 2400 * a5 + 1832);
  if ((std::string **)v11 != v34) {
    sub_5A03B8(v11, *v34, *(std::string **)(v12 + 2400 * a5 + 1840), 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(void *)(v12 + 2400 * a5 + 1840) - (void)*v34) >> 4));
  }
  return a1;
}

void sub_8AF144(_Unwind_Exception *a1)
{
  sub_5322CC(v1);
  _Unwind_Resume(a1);
}

void sub_8AF158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void **a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    operator delete(__p);
    sub_4A5980(a11);
    BOOL v17 = *v14;
    if (!*v14)
    {
LABEL_3:
      if ((*(char *)(v13 + 2871) & 0x80000000) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    sub_4A5980(a11);
    BOOL v17 = *v14;
    if (!*v14) {
      goto LABEL_3;
    }
  }
  *(void *)(v13 + 2888) = v17;
  operator delete(v17);
  if ((*(char *)(v13 + 2871) & 0x80000000) == 0)
  {
LABEL_5:
    sub_8AF1E4(a10);
    sub_5322CC(v13);
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(*v15);
  goto LABEL_5;
}

void *sub_8AF1E4(void *a1)
{
  *a1 = off_243A1D8;
  sub_576848((uint64_t)(a1 + 46));
  sub_576848((uint64_t)(a1 + 4));
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = a1[2];
    int v4 = (void *)a1[1];
    if (v3 != v2)
    {
      do
        uint64_t v3 = sub_576848(v3 - 336);
      while (v3 != v2);
      int v4 = (void *)a1[1];
    }
    a1[2] = v2;
    operator delete(v4);
  }
  return a1;
}

std::string::size_type sub_8AF26C(std::string::size_type a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, int a6)
{
  return sub_8AEE64(a1, a2, a3, a4, a5, a6);
}

std::string *sub_8AF274@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 56) = 1065353216;
  *(unsigned char *)(a2 + 64) = 1;
  int v3 = *(_DWORD *)(a1 + 1848);
  switch(v3)
  {
    case 'T':
      sub_810970(a1, (char **)a2);
      return sub_63581C((std::string **)a2, (const std::string::value_type *)&qword_25CD760);
    case 'S':
      sub_810924(a1, (char **)a2);
      return sub_63581C((std::string **)a2, (const std::string::value_type *)&qword_25CD760);
    case 'R':
      sub_8108D8(a1, (char **)a2);
      return sub_63581C((std::string **)a2, (const std::string::value_type *)&qword_25CD760);
  }
  return sub_6351E8((char **)a2, (uint64_t)&xmmword_25CCDE8);
}

void sub_8AF314(_Unwind_Exception *a1)
{
  sub_4D4880(v1);
  _Unwind_Resume(a1);
}

void sub_8AF328(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 56) = 1065353216;
  *(unsigned char *)(a2 + 64) = 1;
  if (sub_800150(a1))
  {
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 12;
    strcpy((char *)&__p, "Address_Sign");
    sub_6351E8((char **)a2, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_6358A0(a2, &xmmword_25CE6F0, (const std::string *)(a1 + 2848));
  }
  else
  {
    if (a1 + 8 != a2)
    {
      sub_69208(a2, *(std::string **)(a1 + 8), *(std::string **)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3));
      *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 64);
      sub_59E5E4((void *)(a2 + 24), *(uint64_t **)(a1 + 48), 0);
    }
    *(unsigned char *)(a2 + 64) = *(unsigned char *)(a1 + 72);
    sub_635CD0((long long **)a2, (uint64_t)&__p);
    if (byte_25CD777 >= 0) {
      int v4 = (const std::string::value_type *)&qword_25CD760;
    }
    else {
      int v4 = (const std::string::value_type *)qword_25CD760;
    }
    if (byte_25CD777 >= 0) {
      std::string::size_type v5 = byte_25CD777;
    }
    else {
      std::string::size_type v5 = qword_25CD768;
    }
    std::string::append(&__p, v4, v5);
    sub_6351E8((char **)a2, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_8AF480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_4D4880(v15);
  _Unwind_Resume(a1);
}

void sub_8AF4C0(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void ***__return_ptr))(*(void *)a1 + 24))(&v44);
  uint64_t v31 = 0;
  int v32 = 0;
  sub_6370D4(v33, &v44, 1, &v31);
  int v4 = v32;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (a1[2875]) {
      goto LABEL_4;
    }
  }
  else if (a1[2875])
  {
LABEL_4:
    BOOL v5 = 1;
    goto LABEL_7;
  }
  BOOL v5 = a1[2876] != 0;
LABEL_7:
  sub_816254((uint64_t)a1, (uint64_t *)v33, 0, v5);
  if (v5)
  {
    int v6 = a1[1859];
    BOOL v7 = (std::__shared_weak_count *)operator new(0x80uLL);
    v7->__shared_owners_ = 0;
    v7->__shared_weak_owners_ = 0;
    v7->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
    sub_59540C((uint64_t)&v48, (uint64_t)&v7[1], (uint64_t)v33);
    uint64_t v29 = &v7[1].__vftable;
    std::string::size_type v30 = v7;
    if (v6) {
      uint64_t v8 = 5;
    }
    else {
      uint64_t v8 = 10;
    }
    sub_8AF8D8((uint64_t)a1, (uint64_t *)&v29, v8, a2);
    std::string::size_type v9 = v30;
    if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)v33;
    v33[0] = 0;
    v33[1] = 0;
    uint64_t v11 = v34;
    BOOL v10 = __p;
    unint64_t v12 = v36;
    uint64_t v13 = v37;
    std::string __p = 0;
    unint64_t v36 = 0;
    uint64_t v34 = 0;
    *(void *)(a2 + 16) = v11;
    *(void *)(a2 + 24) = v10;
    *(void *)(a2 + 32) = v12;
    *(void *)(a2 + 40) = v13;
    uint64_t v14 = v38;
    *(void *)(a2 + 48) = v38;
    *(_DWORD *)(a2 + 56) = v39;
    if (v14)
    {
      unint64_t v15 = v13[1];
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v15 >= v12) {
          v15 %= v12;
        }
      }
      else
      {
        v15 &= v12 - 1;
      }
      v10[v15] = a2 + 40;
      uint64_t v37 = 0;
      uint64_t v38 = 0;
    }
    *(unsigned char *)(a2 + 64) = v40;
    *(_DWORD *)(a2 + 72) = v41;
    *(_OWORD *)(a2 + 80) = v42;
    long long v42 = 0uLL;
    *(_WORD *)(a2 + 96) = v43;
  }
  BOOL v16 = (std::__shared_weak_count *)*((void *)&v42 + 1);
  if (*((void *)&v42 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v42 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  BOOL v17 = v37;
  if (v37)
  {
    do
    {
      int v18 = (void *)*v17;
      sub_4F4B48((uint64_t)(v17 + 2));
      operator delete(v17);
      BOOL v17 = v18;
    }
    while (v18);
  }
  char v19 = __p;
  std::string __p = 0;
  if (v19) {
    operator delete(v19);
  }
  unsigned __int8 v20 = (void **)v33[0];
  if (v33[0])
  {
    int v21 = (void **)v33[1];
    BOOL v22 = v33[0];
    if (v33[1] != v33[0])
    {
      do
      {
        if (*((char *)v21 - 1) < 0) {
          operator delete(*(v21 - 3));
        }
        v21 -= 3;
      }
      while (v21 != v20);
      BOOL v22 = v33[0];
    }
    v33[1] = v20;
    operator delete(v22);
  }
  uint64_t v23 = v47;
  if (v47)
  {
    do
    {
      size_t v24 = (void *)*v23;
      sub_4F4B48((uint64_t)(v23 + 2));
      operator delete(v23);
      uint64_t v23 = v24;
    }
    while (v24);
  }
  std::string::size_type v25 = v46;
  std::string::size_type v46 = 0;
  if (v25) {
    operator delete(v25);
  }
  uint64_t v26 = v44;
  if (v44)
  {
    uint64_t v27 = v45;
    char v28 = v44;
    if (v45 != v44)
    {
      do
      {
        if (*((char *)v27 - 1) < 0) {
          operator delete(*(v27 - 3));
        }
        v27 -= 3;
      }
      while (v27 != v26);
      char v28 = v44;
    }
    uint64_t v45 = v26;
    operator delete(v28);
  }
}

void sub_8AF850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  sub_14A84((uint64_t)&a9);
  sub_4F31D0(&a13);
  sub_4D4880((void **)(v13 - 128));
  _Unwind_Resume(a1);
}

void sub_8AF874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  std::__shared_weak_count::~__shared_weak_count(v13);
  operator delete(v16);
  sub_4F31D0(&a13);
  sub_4D4880((void **)(v14 - 128));
  _Unwind_Resume(a1);
}

void sub_8AF89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_4F31D0((void **)va);
  sub_4D4880((void **)(v5 - 128));
  _Unwind_Resume(a1);
}

void sub_8AF8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)(v3 - 128));
  _Unwind_Resume(a1);
}

void sub_8AF8D8(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)(a1 + 1945))
  {
    BOOL v7 = (int *)&xmmword_25CFD78;
    if ((byte_25CFD8F & 0x80000000) == 0)
    {
LABEL_3:
      *(_OWORD *)unint64_t v36 = *(_OWORD *)v7;
      uint64_t v37 = *((void *)v7 + 2);
      goto LABEL_9;
    }
  }
  else
  {
    if (*(unsigned char *)(a1 + 1946)) {
      BOOL v7 = &dword_25CFDC0;
    }
    else {
      BOOL v7 = &dword_25CFDA8;
    }
    if ((*((char *)v7 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  sub_4200(v36, *(void **)v7, *((void *)v7 + 1));
LABEL_9:
  int v8 = SHIBYTE(v37);
  if (v37 >= 0) {
    size_t v9 = HIBYTE(v37);
  }
  else {
    size_t v9 = (size_t)v36[1];
  }
  int v10 = byte_25CD777;
  if (byte_25CD777 >= 0) {
    size_t v11 = byte_25CD777;
  }
  else {
    size_t v11 = qword_25CD768;
  }
  unint64_t v12 = v11 + v9;
  if (v11 + v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v12 <= 0x16)
  {
    size_t v34 = 0;
    unint64_t v35 = 0;
    long long __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v35) = v11 + v9;
    if (!v9) {
      goto LABEL_22;
    }
    goto LABEL_18;
  }
  uint64_t v25 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v12 | 7) != 0x17) {
    uint64_t v25 = v12 | 7;
  }
  uint64_t v26 = v25 + 1;
  p_dst = (void **)operator new(v25 + 1);
  size_t v34 = v11 + v9;
  unint64_t v35 = v26 | 0x8000000000000000;
  long long __dst = p_dst;
  if (v9)
  {
LABEL_18:
    if (v8 >= 0) {
      uint64_t v14 = v36;
    }
    else {
      uint64_t v14 = (void **)v36[0];
    }
    memmove(p_dst, v14, v9);
  }
LABEL_22:
  unint64_t v15 = (char *)p_dst + v9;
  if (v11)
  {
    if (v10 >= 0) {
      BOOL v16 = &qword_25CD760;
    }
    else {
      BOOL v16 = (uint64_t *)qword_25CD760;
    }
    memmove(v15, v16, v11);
  }
  v15[v11] = 0;
  sub_6352AC((uint64_t)&v29, (uint64_t)&__dst);
  BOOL v17 = (std::__shared_weak_count *)a2[1];
  uint64_t v27 = *a2;
  char v28 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_6370D4(a4, &v29, a3, &v27);
  int v18 = v28;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  char v19 = v32;
  if (v32)
  {
    do
    {
      unsigned __int8 v20 = (void *)*v19;
      sub_4F4B48((uint64_t)(v19 + 2));
      operator delete(v19);
      char v19 = v20;
    }
    while (v20);
  }
  int v21 = __p;
  std::string __p = 0;
  if (v21) {
    operator delete(v21);
  }
  BOOL v22 = (void **)v29;
  if (v29)
  {
    uint64_t v23 = v30;
    size_t v24 = v29;
    if (v30 != v29)
    {
      do
      {
        if (*((char *)v23 - 1) < 0) {
          operator delete(*(v23 - 3));
        }
        v23 -= 3;
      }
      while (v23 != v22);
      size_t v24 = v29;
    }
    std::string::size_type v30 = v22;
    operator delete(v24);
  }
  if ((SHIBYTE(v35) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v37) & 0x80000000) == 0) {
      return;
    }
LABEL_52:
    operator delete(v36[0]);
    return;
  }
  operator delete(__dst);
  if (SHIBYTE(v37) < 0) {
    goto LABEL_52;
  }
}

void sub_8AFB90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a25 < 0)
  {
    operator delete(__p);
    if ((a31 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else if ((a31 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a26);
  _Unwind_Resume(a1);
}

void sub_8AFBF4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v2 = *(void *)(a1 + 2920);
  uint64_t v3 = *(void *)(a1 + 2928);
  if (v2 == v3) {
    return;
  }
  BOOL v22 = (const void **)(a1 + 152);
  do
  {
    uint64_t v28 = 0;
    *(_OWORD *)uint64_t v26 = 0u;
    long long v27 = 0u;
    *(_OWORD *)std::string __p = 0u;
    int v29 = 1065353216;
    char v30 = 1;
    int v7 = *(_DWORD *)(v2 + 240);
    if (v7 > 90)
    {
      if (v7 == 91)
      {
        sub_7F61B4(a1, (char **)__p, v2);
        goto LABEL_45;
      }
      if (v7 == 93)
      {
        sub_7F6218(a1, (char **)__p, v2);
        goto LABEL_45;
      }
    }
    else
    {
      if (v7 == 22)
      {
        sub_7F60EC(a1, (char **)__p, v2);
        goto LABEL_45;
      }
      if (v7 == 24)
      {
        sub_7F6150(a1, (char **)__p, v2);
        goto LABEL_45;
      }
    }
    if (*(_DWORD *)(a1 + 1848) == 3
      && *(void *)(v2 + 152) == -1
      && *(void *)(v2 + 160) == -1
      && *(void *)(v2 + 168) == -1
      && *(void *)(v2 + 176) == -1
      && *(void *)(v2 + 184) == -1
      && *(void *)(v2 + 200) == -1
      && *(void *)(a1 + 1864) == -1
      && *(void *)(a1 + 1872) == -1
      && *(void *)(a1 + 1880) == -1
      && *(void *)(a1 + 1888) == -1
      && *(void *)(a1 + 1896) == -1
      && *(void *)(a1 + 1912) == -1)
    {
      uint64_t v8 = *(unsigned __int8 *)(v2 + 23);
      if ((v8 & 0x80u) == 0) {
        uint64_t v9 = *(unsigned __int8 *)(v2 + 23);
      }
      else {
        uint64_t v9 = *(void *)(v2 + 8);
      }
      uint64_t v10 = *(unsigned __int8 *)(a1 + 175);
      int v11 = (char)v10;
      if ((v10 & 0x80u) != 0) {
        uint64_t v10 = *(void *)(a1 + 160);
      }
      if (v9 == v10)
      {
        if (v11 >= 0) {
          unint64_t v12 = (unsigned __int8 *)v22;
        }
        else {
          unint64_t v12 = (unsigned __int8 *)*v22;
        }
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v2, v12, *(void *)(v2 + 8)))
          {
LABEL_77:
            unint64_t v21 = *(void *)(a2 + 8);
            if (v21 >= *(void *)(a2 + 16))
            {
              *(void *)(a2 + 8) = sub_8BE59C((void ***)a2);
            }
            else
            {
              *(_OWORD *)(v21 + 64) = 0u;
              *(_OWORD *)(v21 + 80) = 0u;
              *(void *)(v21 + 88) = 0;
              *(void *)(v21 + 96) = 0;
              *(_OWORD *)(v21 + 32) = 0u;
              *(_OWORD *)(v21 + 48) = 0u;
              *(_OWORD *)unint64_t v21 = 0u;
              *(_OWORD *)(v21 + 16) = 0u;
              *(_DWORD *)(v21 + 56) = 1065353216;
              *(unsigned char *)(v21 + 64) = 1;
              *(void *)(v21 + 80) = 0;
              *(_WORD *)(v21 + 96) = 0;
              *(void *)(a2 + 8) = v21 + 104;
            }
            goto LABEL_53;
          }
        }
        else
        {
          if (!*(unsigned char *)(v2 + 23)) {
            goto LABEL_77;
          }
          uint64_t v13 = 0;
          while (*(unsigned __int8 *)(v2 + v13) == v12[v13])
          {
            if (v8 == ++v13) {
              goto LABEL_77;
            }
          }
        }
      }
    }
    sub_6351E8((char **)__p, (uint64_t)&xmmword_25CCFC8);
    sub_818B40(a1, (uint64_t)__p, v2, (void *)(v2 + 152));
    sub_7FF86C(a1, (long long **)__p, v2 + 152);
LABEL_45:
    sub_635CD0((long long **)__p, (uint64_t)&v24);
    if (byte_25CD747 >= 0) {
      uint64_t v14 = (const std::string::value_type *)&qword_25CD730;
    }
    else {
      uint64_t v14 = (const std::string::value_type *)qword_25CD730;
    }
    if (byte_25CD747 >= 0) {
      std::string::size_type v15 = byte_25CD747;
    }
    else {
      std::string::size_type v15 = qword_25CD738;
    }
    std::string::append(&v24, v14, v15);
    sub_6351E8((char **)__p, (uint64_t)&v24);
    unsigned int v23 = 1;
    sub_7FE9A4(a2, (uint64_t)__p, &v23);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
LABEL_53:
    BOOL v16 = (uint64_t **)*((void *)&v27 + 1);
    if (*((void *)&v27 + 1))
    {
      while (1)
      {
        BOOL v17 = *v16;
        if (*((char *)v16 + 191) < 0)
        {
          operator delete(v16[21]);
          if (*((char *)v16 + 159) < 0) {
            goto LABEL_64;
          }
LABEL_59:
          if ((*((char *)v16 + 135) & 0x80000000) == 0) {
            goto LABEL_60;
          }
LABEL_65:
          operator delete(v16[14]);
          if (*((char *)v16 + 95) < 0) {
            goto LABEL_66;
          }
LABEL_61:
          if ((*((char *)v16 + 63) & 0x80000000) == 0) {
            goto LABEL_67;
          }
LABEL_55:
          operator delete(v16[5]);
          if (*((char *)v16 + 39) < 0) {
            goto LABEL_68;
          }
LABEL_56:
          operator delete(v16);
          BOOL v16 = (uint64_t **)v17;
          if (!v17) {
            break;
          }
        }
        else
        {
          if ((*((char *)v16 + 159) & 0x80000000) == 0) {
            goto LABEL_59;
          }
LABEL_64:
          operator delete(v16[17]);
          if (*((char *)v16 + 135) < 0) {
            goto LABEL_65;
          }
LABEL_60:
          if ((*((char *)v16 + 95) & 0x80000000) == 0) {
            goto LABEL_61;
          }
LABEL_66:
          operator delete(v16[9]);
          if (*((char *)v16 + 63) < 0) {
            goto LABEL_55;
          }
LABEL_67:
          if ((*((char *)v16 + 39) & 0x80000000) == 0) {
            goto LABEL_56;
          }
LABEL_68:
          operator delete(v16[2]);
          operator delete(v16);
          BOOL v16 = (uint64_t **)v17;
          if (!v17) {
            break;
          }
        }
      }
    }
    int v18 = v26[1];
    v26[1] = 0;
    if (v18) {
      operator delete(v18);
    }
    char v19 = (void **)__p[0];
    if (__p[0])
    {
      unsigned __int8 v20 = (void **)__p[1];
      int v6 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          if (*((char *)v20 - 1) < 0) {
            operator delete(*(v20 - 3));
          }
          v20 -= 3;
        }
        while (v20 != v19);
        int v6 = __p[0];
      }
      __p[1] = v19;
      operator delete(v6);
    }
    v2 += 272;
  }
  while (v2 != v3);
}

void sub_8B0020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_4D4880(&a18);
  sub_5920E0(v18);
  _Unwind_Resume(a1);
}

void sub_8B0070(int *a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = a1[462];
  if ((v3 - 25) <= 0x3F && ((1 << (v3 - 25)) & 0x9000000000000001) != 0 || v3 == 17)
  {
    sub_8B0240((uint64_t)a1, (uint64_t)&v20);
    *(_OWORD *)std::string __p = 0u;
    *(_OWORD *)int v18 = 0u;
    int v19 = 1065353216;
    sub_8BE3F4(a2, (uint64_t)&v20, (uint64_t)__p);
    int v6 = (char *)v18[0];
    if (v18[0])
    {
      do
      {
        std::string::size_type v15 = *(char **)v6;
        BOOL v16 = (void *)*((void *)v6 + 6);
        if (v16)
        {
          *((void *)v6 + 7) = v16;
          operator delete(v16);
        }
        if (v6[39] < 0) {
          operator delete(*((void **)v6 + 2));
        }
        operator delete(v6);
        int v6 = v15;
      }
      while (v15);
    }
    int v7 = __p[0];
    __p[0] = 0;
    if (v7) {
      operator delete(v7);
    }
    uint64_t v8 = v24;
    if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    uint64_t v9 = v23;
    if (v23)
    {
      do
      {
        uint64_t v10 = (void *)*v9;
        sub_4F4B48((uint64_t)(v9 + 2));
        operator delete(v9);
        uint64_t v9 = v10;
      }
      while (v10);
    }
    int v11 = v22;
    BOOL v22 = 0;
    if (v11) {
      operator delete(v11);
    }
    unint64_t v12 = (void **)v20;
    if (v20)
    {
      uint64_t v13 = v21;
      uint64_t v14 = v20;
      if (v21 != v20)
      {
        do
        {
          if (*((char *)v13 - 1) < 0) {
            operator delete(*(v13 - 3));
          }
          v13 -= 3;
        }
        while (v13 != v12);
        uint64_t v14 = v20;
      }
      unint64_t v21 = v12;
      operator delete(v14);
    }
  }
  else
  {
    sub_8B0368(a1, a2);
  }
}

void sub_8B0224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

void sub_8B0240(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_8B0C90(a1, (uint64_t)&v12);
  uint64_t v10 = 0;
  int v11 = 0;
  sub_6370D4(a2, &v12, 1, &v10);
  int v3 = v11;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  int v4 = v15;
  if (v15)
  {
    do
    {
      uint64_t v5 = (void *)*v4;
      sub_4F4B48((uint64_t)(v4 + 2));
      operator delete(v4);
      int v4 = v5;
    }
    while (v5);
  }
  int v6 = __p;
  std::string __p = 0;
  if (v6) {
    operator delete(v6);
  }
  int v7 = (void **)v12;
  if (v12)
  {
    uint64_t v8 = v13;
    uint64_t v9 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      uint64_t v9 = v12;
    }
    uint64_t v13 = v7;
    operator delete(v9);
  }
}

void sub_8B034C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  _Unwind_Resume(a1);
}

void sub_8B0368(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v88 = 0;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v85 = 0u;
  int v89 = 1065353216;
  char v90 = 1;
  *(_OWORD *)std::string::size_type v82 = 0u;
  *(_OWORD *)int64_t v83 = 0u;
  int v84 = 1065353216;
  sub_5F3040((uint64_t)&__p, a1[462], (uint64_t)(a1 + 720));
  sub_8BEDEC((uint64_t)v82, (uint64_t)&qword_25D0210, (uint64_t)&qword_25D0210, (uint64_t)&__p);
  if (__p.__r_.__value_.__l.__size_)
  {
    __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  }
  if (!sub_7F7188((uint64_t)a1))
  {
    uint64_t v14 = (char *)(a1 + 38);
    if (!sub_6F2FD8((uint64_t)(a1 + 38)))
    {
      (*(void (**)(std::string *__return_ptr, int *))(*(void *)a1 + 24))(&__p, a1);
      uint64_t v18 = v85;
      if ((void)v85)
      {
        uint64_t v19 = *((void *)&v85 + 1);
        unsigned __int8 v20 = (void *)v85;
        if (*((void *)&v85 + 1) != (void)v85)
        {
          do
          {
            if (*(char *)(v19 - 1) < 0) {
              operator delete(*(void **)(v19 - 24));
            }
            v19 -= 24;
          }
          while (v19 != v18);
          unsigned __int8 v20 = (void *)v85;
        }
        *((void *)&v85 + 1) = v18;
        operator delete(v20);
      }
      long long v85 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)&long long v86 = *((void *)&__p.__r_.__value_.__l + 2);
      memset(&__p, 0, sizeof(__p));
      if (v88)
      {
        int v32 = (void *)*((void *)&v87 + 1);
        if (*((void *)&v87 + 1))
        {
          do
          {
            uint64_t v33 = (void *)*v32;
            sub_4F4B48((uint64_t)(v32 + 2));
            operator delete(v32);
            int v32 = v33;
          }
          while (v33);
        }
        *((void *)&v87 + 1) = 0;
        uint64_t v34 = v87;
        if ((void)v87)
        {
          uint64_t v35 = 0;
          do
            *(void *)(*((void *)&v86 + 1) + 8 * v35++) = 0;
          while (v34 != v35);
        }
        uint64_t v88 = 0;
      }
      unint64_t v36 = v68;
      uint64_t v68 = 0;
      uint64_t v37 = (void *)*((void *)&v86 + 1);
      *((void *)&v86 + 1) = v36;
      if (v37) {
        operator delete(v37);
      }
      unint64_t v38 = (unint64_t)v69;
      int v39 = v70;
      long long v69 = 0;
      *((void *)&v87 + 1) = v70;
      uint64_t v88 = v71;
      int v89 = v72;
      *(void *)&long long v87 = v38;
      if (v71)
      {
        unint64_t v40 = v70[1];
        if ((v38 & (v38 - 1)) != 0)
        {
          if (v40 >= v38) {
            v40 %= v38;
          }
        }
        else
        {
          v40 &= v38 - 1;
        }
        *(void *)(*((void *)&v86 + 1) + 8 * v40) = (char *)&v87 + 8;
        uint64_t v70 = 0;
        uint64_t v71 = 0;
        char v90 = v73;
      }
      else
      {
        char v90 = v73;
        if (v70)
        {
          do
          {
            int v41 = (void *)*v39;
            sub_4F4B48((uint64_t)(v39 + 2));
            operator delete(v39);
            int v39 = v41;
          }
          while (v41);
        }
      }
      long long v42 = v68;
      uint64_t v68 = 0;
      if (v42) {
        operator delete(v42);
      }
      std::string::size_type v43 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
      {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
        BOOL v17 = (void *)__p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
        {
          do
          {
            if (*(char *)(size - 1) < 0) {
              operator delete(*(void **)(size - 24));
            }
            size -= 24;
          }
          while (size != v43);
          BOOL v17 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__l.__size_ = v43;
        goto LABEL_115;
      }
      goto LABEL_116;
    }
    if (sub_8B0E4C((uint64_t)a1))
    {
      sub_8101D4((std::string *)a1, (char **)&v85, 1u);
      sub_635CD0((long long **)&v85, (uint64_t)&__p);
      if (byte_25CD747 >= 0) {
        std::string::size_type v15 = (const std::string::value_type *)&qword_25CD730;
      }
      else {
        std::string::size_type v15 = (const std::string::value_type *)qword_25CD730;
      }
      if (byte_25CD747 >= 0) {
        std::string::size_type v16 = byte_25CD747;
      }
      else {
        std::string::size_type v16 = qword_25CD738;
      }
      std::string::append(&__p, v15, v16);
      sub_6351E8((char **)&v85, (uint64_t)&__p);
      goto LABEL_34;
    }
    int v23 = byte_25CD18F;
    if (byte_25CD18F >= 0) {
      size_t v24 = byte_25CD18F;
    }
    else {
      size_t v24 = qword_25CD180;
    }
    int v25 = byte_25CD747;
    if (byte_25CD747 >= 0) {
      size_t v26 = byte_25CD747;
    }
    else {
      size_t v26 = qword_25CD738;
    }
    unint64_t v27 = v26 + v24;
    if (v26 + v24 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v27 > 0x16)
    {
      uint64_t v45 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v27 | 7) != 0x17) {
        uint64_t v45 = v27 | 7;
      }
      uint64_t v46 = v45 + 1;
      p_p = (std::string *)operator new(v45 + 1);
      __p.__r_.__value_.__l.__size_ = v26 + v24;
      __p.__r_.__value_.__r.__words[2] = v46 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
      if (!v24)
      {
LABEL_61:
        char v30 = (char *)p_p + v24;
        if (v26)
        {
          if (v25 >= 0) {
            uint64_t v31 = &qword_25CD730;
          }
          else {
            uint64_t v31 = (uint64_t *)qword_25CD730;
          }
          memmove(v30, v31, v26);
        }
        v30[v26] = 0;
        sub_6351E8((char **)&v85, (uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        sub_6F3150(v14, (uint64_t)v80);
        sub_6F3000((char *)&__p, (long long *)v80);
        sub_635C08((uint64_t)&v85, &xmmword_25CE600, (uint64_t)&__p, 0);
        if (v79 < 0)
        {
          operator delete(v78);
          if ((v77 & 0x80000000) == 0)
          {
LABEL_70:
            if ((SHIBYTE(v75) & 0x80000000) == 0) {
              goto LABEL_71;
            }
            goto LABEL_111;
          }
        }
        else if ((v77 & 0x80000000) == 0)
        {
          goto LABEL_70;
        }
        operator delete(v76);
        if ((SHIBYTE(v75) & 0x80000000) == 0)
        {
LABEL_71:
          if ((SHIBYTE(v71) & 0x80000000) == 0) {
            goto LABEL_72;
          }
          goto LABEL_112;
        }
LABEL_111:
        operator delete(v74);
        if ((SHIBYTE(v71) & 0x80000000) == 0)
        {
LABEL_72:
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_73;
          }
          goto LABEL_113;
        }
LABEL_112:
        operator delete(v69);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_73:
          if ((v81 & 0x80000000) == 0) {
            goto LABEL_116;
          }
LABEL_114:
          BOOL v17 = v80[0];
          goto LABEL_115;
        }
LABEL_113:
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((v81 & 0x80000000) == 0) {
          goto LABEL_116;
        }
        goto LABEL_114;
      }
    }
    else
    {
      memset(&__p, 0, sizeof(__p));
      p_p = &__p;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = v26 + v24;
      if (!v24) {
        goto LABEL_61;
      }
    }
    if (v23 >= 0) {
      int v29 = &qword_25CD178;
    }
    else {
      int v29 = (uint64_t *)qword_25CD178;
    }
    memmove(p_p, v29, v24);
    goto LABEL_61;
  }
  int v4 = sub_819668((uint64_t)a1);
  uint64_t v5 = (const void **)v4;
  char v6 = *((unsigned char *)v4 + 23);
  if ((v6 & 0x80000000) == 0)
  {
    if (*((unsigned char *)v4 + 23)) {
      goto LABEL_6;
    }
LABEL_43:
    sub_6351E8((char **)&v85, (uint64_t)&qword_25D0240);
    goto LABEL_116;
  }
  if (!*((void *)v4 + 1)) {
    goto LABEL_43;
  }
LABEL_6:
  if (v6 >= 0) {
    size_t v7 = *((unsigned __int8 *)v4 + 23);
  }
  else {
    size_t v7 = *((void *)v4 + 1);
  }
  int v8 = byte_25CD747;
  if (byte_25CD747 >= 0) {
    size_t v9 = byte_25CD747;
  }
  else {
    size_t v9 = qword_25CD738;
  }
  unint64_t v10 = v9 + v7;
  if (v9 + v7 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v10 > 0x16)
  {
    uint64_t v21 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v21 = v10 | 7;
    }
    uint64_t v22 = v21 + 1;
    int v11 = (std::string *)operator new(v21 + 1);
    __p.__r_.__value_.__l.__size_ = v9 + v7;
    __p.__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    if (!v7) {
      goto LABEL_19;
    }
    goto LABEL_15;
  }
  memset(&__p, 0, sizeof(__p));
  int v11 = &__p;
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = v9 + v7;
  if (v7)
  {
LABEL_15:
    if (v6 >= 0) {
      unint64_t v12 = v5;
    }
    else {
      unint64_t v12 = *v5;
    }
    memmove(v11, v12, v7);
  }
LABEL_19:
  if (v9)
  {
    if (v8 >= 0) {
      uint64_t v13 = &qword_25CD730;
    }
    else {
      uint64_t v13 = (uint64_t *)qword_25CD730;
    }
    memmove((char *)v11 + v7, v13, v9);
  }
  v11->__r_.__value_.__s.__data_[v7 + v9] = 0;
  sub_6351E8((char **)&v85, (uint64_t)&__p);
LABEL_34:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v17 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_115:
    operator delete(v17);
  }
LABEL_116:
  uint64_t v65 = 0;
  int v66 = 0;
  sub_6370D4(&__p, &v85, 16, &v65);
  long long v47 = v66;
  if (v66 && !atomic_fetch_add(&v66->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
  }
  sub_8BE4C8(a2, (uint64_t)&__p, (uint64_t)v82);
  char v48 = v75;
  if (v75 && !atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
  }
  uint64_t v49 = v70;
  if (v70)
  {
    do
    {
      int64_t v50 = (void *)*v49;
      sub_4F4B48((uint64_t)(v49 + 2));
      operator delete(v49);
      uint64_t v49 = v50;
    }
    while (v50);
  }
  uint64_t v51 = v68;
  uint64_t v68 = 0;
  if (v51) {
    operator delete(v51);
  }
  std::string::size_type v52 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v53 = __p.__r_.__value_.__l.__size_;
    std::string::size_type v54 = (void *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v53 - 1) < 0) {
          operator delete(*(void **)(v53 - 24));
        }
        v53 -= 24;
      }
      while (v53 != v52);
      std::string::size_type v54 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    __p.__r_.__value_.__l.__size_ = v52;
    operator delete(v54);
  }
  int v55 = (char *)v83[0];
  if (v83[0])
  {
    do
    {
      int v63 = *(char **)v55;
      int64_t v64 = (void *)*((void *)v55 + 6);
      if (v64)
      {
        *((void *)v55 + 7) = v64;
        operator delete(v64);
      }
      if (v55[39] < 0) {
        operator delete(*((void **)v55 + 2));
      }
      operator delete(v55);
      int v55 = v63;
    }
    while (v63);
  }
  unint64_t v56 = v82[0];
  v82[0] = 0;
  if (v56) {
    operator delete(v56);
  }
  uint64_t v57 = (void *)*((void *)&v87 + 1);
  if (*((void *)&v87 + 1))
  {
    do
    {
      int v58 = (void *)*v57;
      sub_4F4B48((uint64_t)(v57 + 2));
      operator delete(v57);
      uint64_t v57 = v58;
    }
    while (v58);
  }
  std::string::size_type v59 = (void *)*((void *)&v86 + 1);
  *((void *)&v86 + 1) = 0;
  if (v59) {
    operator delete(v59);
  }
  uint64_t v60 = v85;
  if ((void)v85)
  {
    uint64_t v61 = *((void *)&v85 + 1);
    long long v62 = (void *)v85;
    if (*((void *)&v85 + 1) != (void)v85)
    {
      do
      {
        if (*(char *)(v61 - 1) < 0) {
          operator delete(*(void **)(v61 - 24));
        }
        v61 -= 24;
      }
      while (v61 != v60);
      long long v62 = (void *)v85;
    }
    *((void *)&v85 + 1) = v60;
    operator delete(v62);
  }
}

void sub_8B0B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39)
{
  sub_4A50F4((uint64_t)&a11);
  if (a38 < 0)
  {
    operator delete(__p);
    sub_592590((uint64_t)&a39);
    sub_4D4880((void **)(v39 - 160));
    _Unwind_Resume(a1);
  }
  sub_592590((uint64_t)&a39);
  sub_4D4880((void **)(v39 - 160));
  _Unwind_Resume(a1);
}

void sub_8B0C90(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 56) = 1065353216;
  *(unsigned char *)(a2 + 64) = 1;
  uint64_t v4 = sub_855880((void *)(a1 + 2920), 0);
  unsigned int v5 = *(_DWORD *)(v4 + 240);
  BOOL v6 = v5 > 0x23;
  uint64_t v7 = (1 << v5) & 0x804000010;
  BOOL v8 = v6 || v7 == 0;
  size_t v9 = (uint64_t *)&xmmword_25CCFE0;
  if (v8) {
    size_t v9 = &qword_25CC6E0;
  }
  if (*((char *)v9 + 23) < 0) {
    sub_4200(&__p, (void *)*v9, v9[1]);
  }
  else {
    std::string __p = *(std::string *)v9;
  }
  sub_6351E8((char **)a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  sub_818B40(a1, a2, v4, (void *)(v4 + 152));
  sub_635CD0((long long **)a2, (uint64_t)&__p);
  if (byte_25CD747 >= 0) {
    unint64_t v10 = (const std::string::value_type *)&qword_25CD730;
  }
  else {
    unint64_t v10 = (const std::string::value_type *)qword_25CD730;
  }
  if (byte_25CD747 >= 0) {
    std::string::size_type v11 = byte_25CD747;
  }
  else {
    std::string::size_type v11 = qword_25CD738;
  }
  std::string::append(&__p, v10, v11);
  sub_6351E8((char **)a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_8B0DE8(_Unwind_Exception *a1)
{
  sub_4D4880(v1);
  _Unwind_Resume(a1);
}

void sub_8B0DFC(_Unwind_Exception *a1)
{
  sub_4D4880(v1);
  _Unwind_Resume(a1);
}

void sub_8B0E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_4D4880(v14);
    _Unwind_Resume(a1);
  }
  sub_4D4880(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_8B0E4C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 1848);
  uint64_t result = 1;
  switch(v1)
  {
    case 0:
    case 3:
    case 5:
    case 11:
    case 12:
    case 23:
    case 29:
    case 30:
    case 64:
    case 65:
    case 66:
    case 89:
    case 90:
    case 92:
      return result;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

void sub_8B0FFC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 72))(&v12);
  uint64_t v10 = 0;
  std::string::size_type v11 = 0;
  sub_6370D4(a2, &v12, 1, &v10);
  uint64_t v3 = v11;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = v15;
  if (v15)
  {
    do
    {
      unsigned int v5 = (void *)*v4;
      sub_4F4B48((uint64_t)(v4 + 2));
      operator delete(v4);
      uint64_t v4 = v5;
    }
    while (v5);
  }
  BOOL v6 = __p;
  std::string __p = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = (void **)v12;
  if (v12)
  {
    BOOL v8 = v13;
    size_t v9 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      size_t v9 = v12;
    }
    uint64_t v13 = v7;
    operator delete(v9);
  }
}

void sub_8B1128(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  _Unwind_Resume(a1);
}

void sub_8B1144(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (byte_25CDBE0[23] < 0) {
    sub_4200(&__dst, *(void **)byte_25CDBE0, *(unint64_t *)&byte_25CDBE0[8]);
  }
  else {
    std::string __dst = *(std::string *)byte_25CDBE0;
  }
  if (sub_6F2880(a1 + 672))
  {
    if (byte_25CD63F >= 0) {
      uint64_t v4 = (const std::string::value_type *)&qword_25CD628;
    }
    else {
      uint64_t v4 = (const std::string::value_type *)qword_25CD628;
    }
    if (byte_25CD63F >= 0) {
      std::string::size_type v5 = byte_25CD63F;
    }
    else {
      std::string::size_type v5 = *(void *)&byte_25CD630;
    }
    std::string::append(&__dst, v4, v5);
    if (sub_6F2DA8(a1 + 672))
    {
      BOOL v6 = &qword_25CD688;
      goto LABEL_17;
    }
    BOOL v7 = sub_6F3124(a1 + 608);
  }
  else
  {
    BOOL v7 = sub_6F2FD8(a1 + 608);
  }
  if (!v7) {
    goto LABEL_24;
  }
  BOOL v6 = (uint64_t *)&xmmword_25CD3D0;
LABEL_17:
  int v8 = *((char *)v6 + 23);
  if (v8 >= 0) {
    size_t v9 = (const std::string::value_type *)v6;
  }
  else {
    size_t v9 = (const std::string::value_type *)*v6;
  }
  if (v8 >= 0) {
    std::string::size_type v10 = *((unsigned __int8 *)v6 + 23);
  }
  else {
    std::string::size_type v10 = v6[1];
  }
  std::string::append(&__dst, v9, v10);
LABEL_24:
  if (byte_25CD747 >= 0) {
    std::string::size_type v11 = (const std::string::value_type *)&qword_25CD730;
  }
  else {
    std::string::size_type v11 = (const std::string::value_type *)qword_25CD730;
  }
  if (byte_25CD747 >= 0) {
    std::string::size_type v12 = byte_25CD747;
  }
  else {
    std::string::size_type v12 = qword_25CD738;
  }
  std::string::append(&__dst, v11, v12);
  sub_8B131C(a1 + 608, 0, (uint64_t)__p);
  sub_63531C(a2, (uint64_t)&__dst, (uint64_t)__p);
  uint64_t v13 = v17;
  if (v17)
  {
    do
    {
      uint64_t v14 = (void *)*v13;
      sub_4F4B48((uint64_t)(v13 + 2));
      operator delete(v13);
      uint64_t v13 = v14;
    }
    while (v14);
  }
  std::string::size_type v15 = __p[0];
  __p[0] = 0;
  if (v15) {
    operator delete(v15);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_8B12EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_8B131C(uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  if (!sub_6F2FD8(a1)) {
    return;
  }
  if ((a2 & 1) == 0)
  {
    BOOL v7 = sub_6F2880(a1 + 64);
    BOOL v6 = &xmmword_25CE600;
    if (v7) {
      BOOL v6 = (long long *)&qword_25CE4F8;
    }
    if ((*((char *)v6 + 23) & 0x80000000) == 0) {
      goto LABEL_4;
    }
LABEL_8:
    sub_4200(__p, *(void **)v6, *((void *)v6 + 1));
    goto LABEL_9;
  }
  BOOL v6 = &xmmword_25CE660;
  if (byte_25CE677 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  *(_OWORD *)std::string __p = *v6;
  uint64_t v11 = *((void *)v6 + 2);
LABEL_9:
  std::string::size_type v12 = __p;
  int v8 = sub_617978(a3, (uint64_t)__p, (uint64_t)&unk_20F06E0, (long long **)&v12);
  std::string::operator=((std::string *)(v8 + 5), (const std::string *)a1);
  v8[8] = *(void *)(a1 + 24);
  std::string::operator=((std::string *)v8 + 3, (const std::string *)(a1 + 32));
  v8[12] = *(void *)(a1 + 56);
  *((_DWORD *)v8 + 26) = *(_DWORD *)(a1 + 64);
  std::string::operator=((std::string *)(v8 + 14), (const std::string *)(a1 + 72));
  std::string::operator=((std::string *)(v8 + 17), (const std::string *)(a1 + 96));
  *((_DWORD *)v8 + 40) = *(_DWORD *)(a1 + 120);
  std::string::operator=((std::string *)v8 + 7, (const std::string *)(a1 + 128));
  if (sub_6F2880(a1 + 64))
  {
    std::string::size_type v12 = (void **)&xmmword_25CE600;
    size_t v9 = sub_617978(a3, (uint64_t)&xmmword_25CE600, (uint64_t)&unk_20F06E0, (long long **)&v12);
    std::string::operator=((std::string *)(v9 + 5), (const std::string *)a1);
    v9[8] = *(void *)(a1 + 24);
    std::string::operator=((std::string *)v9 + 3, (const std::string *)(a1 + 32));
    v9[12] = *(void *)(a1 + 56);
    *((_DWORD *)v9 + 26) = *(_DWORD *)(a1 + 64);
    std::string::operator=((std::string *)(v9 + 14), (const std::string *)(a1 + 72));
    std::string::operator=((std::string *)(v9 + 17), (const std::string *)(a1 + 96));
    *((_DWORD *)v9 + 40) = *(_DWORD *)(a1 + 120);
    std::string::operator=((std::string *)v9 + 7, (const std::string *)(a1 + 128));
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
}

void sub_8B1514(_Unwind_Exception *a1)
{
  sub_4DD068(v1);
  _Unwind_Resume(a1);
}

void sub_8B152C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_4DD068(v14);
  _Unwind_Resume(a1);
}

void sub_8B1550(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v2 = *(void *)(a1 + 912);
  uint64_t v3 = *(void *)(a1 + 920);
  if (v2 != v3)
  {
    while (1)
    {
      sub_8B17C8(v2, (uint64_t)__p);
      unint64_t v6 = *(void *)(a2 + 8);
      if (v6 >= *(void *)(a2 + 16))
      {
        *(void *)(a2 + 8) = sub_8BE7C4((void ***)a2, (uint64_t)__p);
        std::string::size_type v12 = (void **)v20;
        if (v20) {
          goto LABEL_22;
        }
        goto LABEL_16;
      }
      *(void *)(v6 + 16) = 0;
      *(_OWORD *)unint64_t v6 = 0u;
      *(_OWORD *)unint64_t v6 = *(_OWORD *)__p;
      *(void **)(v6 + 16) = v18[0];
      BOOL v7 = v18[1];
      *(_OWORD *)std::string __p = 0u;
      *(_OWORD *)uint64_t v18 = 0u;
      *(void *)(v6 + 24) = v7;
      *(void *)(v6 + 32) = v19;
      uint64_t v19 = 0;
      int v8 = v20;
      *(void *)(v6 + 40) = v20;
      uint64_t v9 = v21;
      *(void *)(v6 + 48) = v21;
      *(_DWORD *)(v6 + 56) = v22;
      if (v9)
      {
        unint64_t v10 = v8[1];
        unint64_t v11 = *(void *)(v6 + 32);
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v10 >= v11) {
            v10 %= v11;
          }
        }
        else
        {
          v10 &= v11 - 1;
        }
        v7[v10] = v6 + 40;
        unsigned __int8 v20 = 0;
        uint64_t v21 = 0;
      }
      *(unsigned char *)(v6 + 64) = v23;
      *(void *)(a2 + 8) = v6 + 72;
      std::string::size_type v12 = (void **)v20;
      if (v20) {
        break;
      }
LABEL_16:
      uint64_t v13 = v18[1];
      v18[1] = 0;
      if (v13) {
        operator delete(v13);
      }
      uint64_t v14 = (void **)__p[0];
      if (__p[0])
      {
        std::string::size_type v15 = (void **)__p[1];
        std::string::size_type v5 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            if (*((char *)v15 - 1) < 0) {
              operator delete(*(v15 - 3));
            }
            v15 -= 3;
          }
          while (v15 != v14);
          std::string::size_type v5 = __p[0];
        }
        __p[1] = v14;
        operator delete(v5);
      }
      v2 += 152;
      if (v2 == v3) {
        return;
      }
    }
    while (1)
    {
LABEL_22:
      std::string::size_type v16 = (void **)*v12;
      if (*((char *)v12 + 191) < 0)
      {
        operator delete(v12[21]);
        if ((*((char *)v12 + 159) & 0x80000000) == 0)
        {
LABEL_24:
          if ((*((char *)v12 + 135) & 0x80000000) == 0) {
            goto LABEL_25;
          }
          goto LABEL_31;
        }
      }
      else if ((*((char *)v12 + 159) & 0x80000000) == 0)
      {
        goto LABEL_24;
      }
      operator delete(v12[17]);
      if ((*((char *)v12 + 135) & 0x80000000) == 0)
      {
LABEL_25:
        if ((*((char *)v12 + 95) & 0x80000000) == 0) {
          goto LABEL_26;
        }
        goto LABEL_32;
      }
LABEL_31:
      operator delete(v12[14]);
      if ((*((char *)v12 + 95) & 0x80000000) == 0)
      {
LABEL_26:
        if ((*((char *)v12 + 63) & 0x80000000) == 0) {
          goto LABEL_27;
        }
        goto LABEL_33;
      }
LABEL_32:
      operator delete(v12[9]);
      if ((*((char *)v12 + 63) & 0x80000000) == 0)
      {
LABEL_27:
        if (*((char *)v12 + 39) < 0) {
          goto LABEL_34;
        }
        goto LABEL_21;
      }
LABEL_33:
      operator delete(v12[5]);
      if (*((char *)v12 + 39) < 0) {
LABEL_34:
      }
        operator delete(v12[2]);
LABEL_21:
      operator delete(v12);
      std::string::size_type v12 = v16;
      if (!v16) {
        goto LABEL_16;
      }
    }
  }
}

void sub_8B1798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_4D4880(&a9);
  sub_84F7EC(v9);
  _Unwind_Resume(a1);
}

void sub_8B17B4(_Unwind_Exception *a1)
{
  sub_84F7EC(v1);
  _Unwind_Resume(a1);
}

void sub_8B17C8(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (byte_25CDB98[23] < 0) {
    sub_4200(&__dst, *(void **)byte_25CDB98, *(unint64_t *)&byte_25CDB98[8]);
  }
  else {
    std::string __dst = *(std::string *)byte_25CDB98;
  }
  if (sub_6F2880(a1 + 64))
  {
    if (byte_25CD63F >= 0) {
      uint64_t v4 = (const std::string::value_type *)&qword_25CD628;
    }
    else {
      uint64_t v4 = (const std::string::value_type *)qword_25CD628;
    }
    if (byte_25CD63F >= 0) {
      std::string::size_type v5 = byte_25CD63F;
    }
    else {
      std::string::size_type v5 = *(void *)&byte_25CD630;
    }
    std::string::append(&__dst, v4, v5);
    if (sub_6F2DA8(a1 + 64))
    {
      unint64_t v6 = &qword_25CD688;
      goto LABEL_17;
    }
    BOOL v7 = sub_6F3124(a1);
  }
  else
  {
    BOOL v7 = sub_6F2FD8(a1);
  }
  if (!v7) {
    goto LABEL_24;
  }
  unint64_t v6 = (uint64_t *)&xmmword_25CD3D0;
LABEL_17:
  int v8 = *((char *)v6 + 23);
  if (v8 >= 0) {
    uint64_t v9 = (const std::string::value_type *)v6;
  }
  else {
    uint64_t v9 = (const std::string::value_type *)*v6;
  }
  if (v8 >= 0) {
    std::string::size_type v10 = *((unsigned __int8 *)v6 + 23);
  }
  else {
    std::string::size_type v10 = v6[1];
  }
  std::string::append(&__dst, v9, v10);
LABEL_24:
  if (byte_25CD747 >= 0) {
    unint64_t v11 = (const std::string::value_type *)&qword_25CD730;
  }
  else {
    unint64_t v11 = (const std::string::value_type *)qword_25CD730;
  }
  if (byte_25CD747 >= 0) {
    std::string::size_type v12 = byte_25CD747;
  }
  else {
    std::string::size_type v12 = qword_25CD738;
  }
  std::string::append(&__dst, v11, v12);
  sub_8B131C(a1, 0, (uint64_t)__p);
  sub_63531C(a2, (uint64_t)&__dst, (uint64_t)__p);
  uint64_t v13 = v17;
  if (v17)
  {
    do
    {
      uint64_t v14 = (void *)*v13;
      sub_4F4B48((uint64_t)(v13 + 2));
      operator delete(v13);
      uint64_t v13 = v14;
    }
    while (v14);
  }
  std::string::size_type v15 = __p[0];
  __p[0] = 0;
  if (v15) {
    operator delete(v15);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_8B1970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_8B19A0(uint64_t a1@<X8>)
{
  sub_6F30A4((uint64_t)v2);
  sub_8B17C8((uint64_t)v2, a1);
  if (v11 < 0)
  {
    operator delete(__p);
    if ((v9 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((v9 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v8);
  if ((v7 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(v6);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v3 & 0x80000000) == 0) {
      return;
    }
LABEL_11:
    operator delete(v2[0]);
    return;
  }
LABEL_10:
  operator delete(v4);
  if (v3 < 0) {
    goto LABEL_11;
  }
}

void sub_8B1A64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4A50F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_8B1A78(std::string *a1@<X0>, uint64_t a2@<X8>)
{
  sub_8B1E38(a1, (uint64_t)&__s1);
  size_t v4 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  size_t size = __s1.__r_.__value_.__l.__size_;
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v6 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v6 = __s1.__r_.__value_.__l.__size_;
  }
  uint64_t v7 = byte_25CFDA7;
  char v8 = byte_25CFDA7;
  uint64_t v9 = *((void *)&xmmword_25CFD90 + 1);
  if (byte_25CFDA7 >= 0) {
    uint64_t v10 = byte_25CFDA7;
  }
  else {
    uint64_t v10 = *((void *)&xmmword_25CFD90 + 1);
  }
  if (v6 != v10) {
    goto LABEL_19;
  }
  if (byte_25CFDA7 >= 0) {
    char v11 = &xmmword_25CFD90;
  }
  else {
    char v11 = (long long *)xmmword_25CFD90;
  }
  if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(__s1.__r_.__value_.__l.__data_, v11, __s1.__r_.__value_.__l.__size_)) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23))
  {
LABEL_18:
    sub_8192EC(a1, &__s1);
    size_t v4 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    size_t size = __s1.__r_.__value_.__l.__size_;
    uint64_t v7 = byte_25CFDA7;
    uint64_t v9 = *((void *)&xmmword_25CFD90 + 1);
    char v8 = byte_25CFDA7;
    goto LABEL_19;
  }
  p_s1 = &__s1;
  uint64_t v13 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v11)
  {
    p_s1 = (std::string *)((char *)p_s1 + 1);
    char v11 = (long long *)((char *)v11 + 1);
    if (!--v13) {
      goto LABEL_18;
    }
  }
LABEL_19:
  if ((v4 & 0x80u) == 0) {
    size_t v14 = v4;
  }
  else {
    size_t v14 = size;
  }
  if (v8 >= 0) {
    uint64_t v15 = v7;
  }
  else {
    uint64_t v15 = v9;
  }
  if (v14 == v15)
  {
    if (v8 >= 0) {
      std::string::size_type v16 = &xmmword_25CFD90;
    }
    else {
      std::string::size_type v16 = (long long *)xmmword_25CFD90;
    }
    if ((v4 & 0x80) != 0)
    {
      if (!memcmp(__s1.__r_.__value_.__l.__data_, v16, size)) {
        goto LABEL_43;
      }
    }
    else
    {
      if (!v4) {
        goto LABEL_43;
      }
      BOOL v17 = &__s1;
      while (v17->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v16)
      {
        BOOL v17 = (std::string *)((char *)v17 + 1);
        std::string::size_type v16 = (long long *)((char *)v16 + 1);
        if (!--v4) {
          goto LABEL_43;
        }
      }
    }
  }
  if (byte_25CD747 >= 0) {
    uint64_t v18 = (const std::string::value_type *)&qword_25CD730;
  }
  else {
    uint64_t v18 = (const std::string::value_type *)qword_25CD730;
  }
  if (byte_25CD747 >= 0) {
    std::string::size_type v19 = byte_25CD747;
  }
  else {
    std::string::size_type v19 = qword_25CD738;
  }
  std::string::append(&__s1, v18, v19);
LABEL_43:
  int v20 = byte_25CFD8F;
  if (byte_25CFD8F >= 0) {
    size_t v21 = byte_25CFD8F;
  }
  else {
    size_t v21 = *((void *)&xmmword_25CFD78 + 1);
  }
  int v22 = byte_25CD747;
  if (byte_25CD747 >= 0) {
    size_t v23 = byte_25CD747;
  }
  else {
    size_t v23 = qword_25CD738;
  }
  unint64_t v24 = v23 + v21;
  if (v23 + v21 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v24 <= 0x16)
  {
    size_t v48 = 0;
    int64_t v49 = 0;
    std::string __p = 0;
    p_p = (char *)&__p;
    HIBYTE(v49) = v23 + v21;
    if (!v21) {
      goto LABEL_56;
    }
    goto LABEL_52;
  }
  uint64_t v42 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v24 | 7) != 0x17) {
    uint64_t v42 = v24 | 7;
  }
  uint64_t v43 = v42 + 1;
  p_p = (char *)operator new(v42 + 1);
  size_t v48 = v23 + v21;
  int64_t v49 = v43 | 0x8000000000000000;
  std::string __p = p_p;
  if (v21)
  {
LABEL_52:
    if (v20 >= 0) {
      size_t v26 = &xmmword_25CFD78;
    }
    else {
      size_t v26 = (long long *)xmmword_25CFD78;
    }
    memmove(p_p, v26, v21);
  }
LABEL_56:
  unint64_t v27 = &p_p[v21];
  if (v23)
  {
    if (v22 >= 0) {
      uint64_t v28 = &qword_25CD730;
    }
    else {
      uint64_t v28 = (uint64_t *)qword_25CD730;
    }
    memmove(v27, v28, v23);
  }
  BOOL v29 = 0;
  v27[v23] = 0;
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v30 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v30 = __s1.__r_.__value_.__l.__size_;
  }
  size_t v31 = HIBYTE(v49);
  int v32 = SHIBYTE(v49);
  if (v49 < 0) {
    size_t v31 = v48;
  }
  if (v30 != v31)
  {
LABEL_84:
    if ((v32 & 0x80000000) == 0) {
      goto LABEL_85;
    }
    goto LABEL_88;
  }
  if (v49 >= 0) {
    uint64_t v33 = (unsigned __int8 *)&__p;
  }
  else {
    uint64_t v33 = (unsigned __int8 *)__p;
  }
  if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    BOOL v29 = memcmp(__s1.__r_.__value_.__l.__data_, v33, __s1.__r_.__value_.__l.__size_) == 0;
    goto LABEL_84;
  }
  if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
  {
    uint64_t v34 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
    uint64_t v35 = &__s1;
    do
    {
      int v37 = v35->__r_.__value_.__s.__data_[0];
      uint64_t v35 = (std::string *)((char *)v35 + 1);
      int v36 = v37;
      int v39 = *v33++;
      int v38 = v39;
      BOOL v41 = v34-- != 0;
      BOOL v29 = v36 == v38;
    }
    while (v36 == v38 && v41);
    goto LABEL_84;
  }
  BOOL v29 = 1;
  if ((SHIBYTE(v49) & 0x80000000) == 0)
  {
LABEL_85:
    if (!v29) {
      goto LABEL_96;
    }
    goto LABEL_89;
  }
LABEL_88:
  operator delete(__p);
  if (!v29) {
    goto LABEL_96;
  }
LABEL_89:
  if (byte_25CD867 >= 0) {
    std::string::size_type v44 = (const std::string::value_type *)&qword_25CD850;
  }
  else {
    std::string::size_type v44 = (const std::string::value_type *)qword_25CD850;
  }
  if (byte_25CD867 >= 0) {
    std::string::size_type v45 = byte_25CD867;
  }
  else {
    std::string::size_type v45 = unk_25CD858;
  }
  std::string::append(&__s1, v44, v45);
LABEL_96:
  uint64_t v46 = sub_5231C((uint64_t)&a1->__r_.__value_.__l.__size_);
  sub_63531C(a2, (uint64_t)&__s1, v46);
  sub_813AEC((uint64_t)a1, a2);
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
}

void sub_8B1E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_4D4880(v17);
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_8B1E38(std::string *a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(std::string *))(a1->__r_.__value_.__r.__words[0] + 112))(a1);
  if (!a1[119].__r_.__value_.__s.__data_[22]) {
    return;
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v33 = 0;
  uint64_t v4 = (*(uint64_t (**)(std::string *))(a1->__r_.__value_.__r.__words[0] + 136))(a1);
  (*(void (**)(void **__return_ptr, std::string *, uint64_t))(a1->__r_.__value_.__r.__words[0] + 48))(v30, a1, v4);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v33 = v31;
  *(_OWORD *)std::string __p = *(_OWORD *)v30;
  std::string::size_type v5 = HIBYTE(v31);
  char v6 = HIBYTE(v31);
  uint64_t v7 = v30[1];
  if (v31 >= 0) {
    char v8 = (void *)HIBYTE(v31);
  }
  else {
    char v8 = v30[1];
  }
  BOOL v9 = v8 != 0;
  uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a2 + 8);
  }
  if (v10 && v8)
  {
    if (byte_25CD87F >= 0) {
      char v11 = (const std::string::value_type *)&qword_25CD868;
    }
    else {
      char v11 = (const std::string::value_type *)qword_25CD868;
    }
    if (byte_25CD87F >= 0) {
      std::string::size_type v12 = byte_25CD87F;
    }
    else {
      std::string::size_type v12 = unk_25CD870;
    }
    std::string::append((std::string *)a2, v11, v12);
    std::string::size_type v5 = HIBYTE(v33);
    uint64_t v7 = __p[1];
    char v6 = HIBYTE(v33);
  }
  if (v6 >= 0) {
    uint64_t v13 = __p;
  }
  else {
    uint64_t v13 = (void **)__p[0];
  }
  if (v6 >= 0) {
    std::string::size_type v14 = v5;
  }
  else {
    std::string::size_type v14 = (std::string::size_type)v7;
  }
  std::string::append((std::string *)a2, (const std::string::value_type *)v13, v14);
  int v15 = (*(uint64_t (**)(std::string *))(a1->__r_.__value_.__r.__words[0] + 136))(a1);
  if (std::string::find((const std::string *)a2, 50, 0) != -1)
  {
    LODWORD(v16) = *(char *)(a2 + 23);
    if ((v16 & 0x80000000) != 0)
    {
      if (*(void *)(a2 + 8) != 15) {
        goto LABEL_60;
      }
      BOOL v17 = *(uint64_t **)a2;
    }
    else
    {
      BOOL v17 = (uint64_t *)a2;
      if (v16 != 15)
      {
LABEL_57:
        if (!(_BYTE)v16) {
          goto LABEL_61;
        }
        goto LABEL_70;
      }
    }
    uint64_t v18 = *v17;
    uint64_t v19 = *(uint64_t *)((char *)v17 + 7);
    if (v18 != 0x5F31646C65696853 || v19 != 0x32646C656968535FLL) {
      goto LABEL_56;
    }
  }
  if ((!sub_7FA904((uint64_t)a1) | v15 & v9)) {
    goto LABEL_56;
  }
  uint64_t v21 = (*(uint64_t (**)(std::string *, uint64_t))(a1->__r_.__value_.__r.__words[0] + 56))(a1, a2);
  (*(void (**)(void **__return_ptr, std::string *, uint64_t))(a1->__r_.__value_.__r.__words[0] + 64))(v30, a1, v21);
  uint64_t v22 = *(unsigned __int8 *)(a2 + 23);
  if ((v22 & 0x80u) != 0) {
    uint64_t v22 = *(void *)(a2 + 8);
  }
  if (v22)
  {
    size_t v23 = (void *)HIBYTE(v31);
    if (v31 < 0) {
      size_t v23 = v30[1];
    }
    if (v23)
    {
      if (byte_25CD87F >= 0) {
        unint64_t v24 = (const std::string::value_type *)&qword_25CD868;
      }
      else {
        unint64_t v24 = (const std::string::value_type *)qword_25CD868;
      }
      if (byte_25CD87F >= 0) {
        std::string::size_type v25 = byte_25CD87F;
      }
      else {
        std::string::size_type v25 = unk_25CD870;
      }
      std::string::append((std::string *)a2, v24, v25);
    }
  }
  size_t v26 = v31 >= 0 ? (const std::string::value_type *)v30 : (const std::string::value_type *)v30[0];
  unint64_t v27 = v31 >= 0 ? (void *)HIBYTE(v31) : v30[1];
  std::string::append((std::string *)a2, v26, (std::string::size_type)v27);
  if (SHIBYTE(v31) < 0)
  {
    operator delete(v30[0]);
    LODWORD(v16) = *(char *)(a2 + 23);
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_57;
    }
  }
  else
  {
LABEL_56:
    LODWORD(v16) = *(char *)(a2 + 23);
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_57;
    }
  }
LABEL_60:
  if (!*(void *)(a2 + 8))
  {
LABEL_61:
    if (a1[77].__r_.__value_.__s.__data_[13] && a1[77].__r_.__value_.__s.__data_[8])
    {
      if (byte_25CD36F >= 0) {
        uint64_t v28 = (const std::string::value_type *)&qword_25CD358;
      }
      else {
        uint64_t v28 = (const std::string::value_type *)qword_25CD358;
      }
      if (byte_25CD36F >= 0) {
        std::string::size_type v29 = byte_25CD36F;
      }
      else {
        std::string::size_type v29 = unk_25CD360;
      }
      std::string::append((std::string *)a2, v28, v29);
      LOBYTE(v16) = *(unsigned char *)(a2 + 23);
    }
  }
LABEL_70:
  uint64_t v16 = v16;
  if ((v16 & 0x80u) != 0) {
    uint64_t v16 = *(void *)(a2 + 8);
  }
  if (!v16)
  {
    sub_814258((uint64_t)a1, (uint64_t)v30);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(_OWORD *)a2 = *(_OWORD *)v30;
    *(void *)(a2 + 16) = v31;
  }
  sub_8191B8(a1, (std::string *)a2);
  sub_7FFAC0(a1, (std::string *)a2);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p[0]);
  }
}

void sub_8B2228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if (*(char *)(v21 + 23) < 0)
    {
LABEL_6:
      operator delete(*(void **)v21);
      _Unwind_Resume(exception_object);
    }
  }
  else if (*(char *)(v21 + 23) < 0)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(exception_object);
}

void sub_8B22A4(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 72))(&v24);
  if (*(unsigned char *)(a2 + 180))
  {
    char v19 = 14;
    strcpy(__p, "Next_Exit_Sign");
    sub_6352AC((uint64_t)&v20, (uint64_t)__p);
  }
  else if (*(unsigned char *)(a2 + 181))
  {
    char v19 = 16;
    strcpy(__p, "Next_U_Turn_Sign");
    sub_6352AC((uint64_t)&v20, (uint64_t)__p);
  }
  else
  {
    switch(a1[462])
    {
      case 2:
      case 0x15:
      case 0x1C:
      case 0x1E:
      case 0x22:
      case 0x3D:
      case 0x3F:
      case 0x42:
        char v19 = 15;
        strcpy(__p, "Next_Right_Sign");
        sub_6352AC((uint64_t)&v20, (uint64_t)__p);
        break;
      default:
        char v19 = 14;
        strcpy(__p, "Next_Left_Sign");
        sub_6352AC((uint64_t)&v20, (uint64_t)__p);
        break;
    }
  }
  if (v19 < 0) {
    operator delete(*(void **)__p);
  }
  sub_6376A0(a3, &v24, 15, &v20, 1);
  char v6 = v23;
  if (v23)
  {
    do
    {
      uint64_t v7 = (void *)*v6;
      sub_4F4B48((uint64_t)(v6 + 2));
      operator delete(v6);
      char v6 = v7;
    }
    while (v7);
  }
  char v8 = v22;
  uint64_t v22 = 0;
  if (v8) {
    operator delete(v8);
  }
  BOOL v9 = (void **)v20;
  if (v20)
  {
    uint64_t v10 = v21;
    char v11 = v20;
    if (v21 != v20)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      char v11 = v20;
    }
    uint64_t v21 = v9;
    operator delete(v11);
  }
  std::string::size_type v12 = v27;
  if (v27)
  {
    do
    {
      uint64_t v13 = (void *)*v12;
      sub_4F4B48((uint64_t)(v12 + 2));
      operator delete(v12);
      std::string::size_type v12 = v13;
    }
    while (v13);
  }
  std::string::size_type v14 = v26;
  size_t v26 = 0;
  if (v14) {
    operator delete(v14);
  }
  int v15 = (void **)v24;
  if (v24)
  {
    uint64_t v16 = v25;
    BOOL v17 = v24;
    if (v25 != v24)
    {
      do
      {
        if (*((char *)v16 - 1) < 0) {
          operator delete(*(v16 - 3));
        }
        v16 -= 3;
      }
      while (v16 != v15);
      BOOL v17 = v24;
    }
    std::string::size_type v25 = v15;
    operator delete(v17);
  }
}

void sub_8B2528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_4D4880(&a25);
    _Unwind_Resume(a1);
  }
  sub_4D4880(&a25);
  _Unwind_Resume(a1);
}

void sub_8B2678(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = 267;
  if (!*(unsigned char *)(a1 + 1946)) {
    uint64_t v5 = 264;
  }
  char v6 = &dword_25CFDC0;
  if (!*(unsigned char *)(a1 + 1946)) {
    char v6 = &dword_25CFDA8;
  }
  uint64_t v7 = &byte_25CFDD7;
  if (!*(unsigned char *)(a1 + 1946)) {
    uint64_t v7 = &byte_25CFDBF;
  }
  if (*v7 < 0)
  {
    if (*(unsigned char *)(a1 + 1946)) {
      char v8 = (unint64_t *)&unk_25CFDC8;
    }
    else {
      char v8 = (unint64_t *)&unk_25CFDB0;
    }
    sub_4200(&v39, (void *)qword_25CF568[v5], *v8);
  }
  else
  {
    long long v39 = *(_OWORD *)v6;
    uint64_t v40 = *((void *)v6 + 2);
  }
  int v9 = SHIBYTE(v40);
  if (v40 >= 0) {
    size_t v10 = HIBYTE(v40);
  }
  else {
    size_t v10 = *((void *)&v39 + 1);
  }
  int v11 = byte_25CD747;
  if (byte_25CD747 >= 0) {
    size_t v12 = byte_25CD747;
  }
  else {
    size_t v12 = qword_25CD738;
  }
  unint64_t v13 = v12 + v10;
  if (v12 + v10 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v13 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v12 + v10;
    if (!v10) {
      goto LABEL_26;
    }
    goto LABEL_22;
  }
  uint64_t v30 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v13 | 7) != 0x17) {
    uint64_t v30 = v13 | 7;
  }
  uint64_t v31 = v30 + 1;
  p_dst = (std::string *)operator new(v30 + 1);
  __dst.__r_.__value_.__l.__size_ = v12 + v10;
  __dst.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v10)
  {
LABEL_22:
    if (v9 >= 0) {
      int v15 = &v39;
    }
    else {
      int v15 = (long long *)v39;
    }
    memmove(p_dst, v15, v10);
  }
LABEL_26:
  uint64_t v16 = (char *)p_dst + v10;
  if (v12)
  {
    if (v11 >= 0) {
      BOOL v17 = &qword_25CD730;
    }
    else {
      BOOL v17 = (uint64_t *)qword_25CD730;
    }
    memmove(v16, v17, v12);
  }
  v16[v12] = 0;
  if (byte_25CD867 >= 0) {
    uint64_t v18 = (const std::string::value_type *)&qword_25CD850;
  }
  else {
    uint64_t v18 = (const std::string::value_type *)qword_25CD850;
  }
  if (byte_25CD867 >= 0) {
    std::string::size_type v19 = byte_25CD867;
  }
  else {
    std::string::size_type v19 = unk_25CD858;
  }
  int v20 = std::string::append(&__dst, v18, v19);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  std::string::size_type v38 = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)int v37 = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  sub_6352AC((uint64_t)&__dst, (uint64_t)v37);
  uint64_t v22 = (std::__shared_weak_count *)operator new(0x80uLL);
  v22->__shared_owners_ = 0;
  v22->__shared_weak_owners_ = 0;
  v22->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
  sub_63D394((uint64_t)&v41, (uint64_t)&v22[1], a2);
  int v32 = &v22[1].__vftable;
  uint64_t v33 = v22;
  sub_6370D4(a3, &__dst, 10, &v32);
  size_t v23 = v33;
  if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  unint64_t v24 = v36;
  if (v36)
  {
    do
    {
      std::string::size_type v25 = (void *)*v24;
      sub_4F4B48((uint64_t)(v24 + 2));
      operator delete(v24);
      unint64_t v24 = v25;
    }
    while (v25);
  }
  size_t v26 = __p;
  std::string __p = 0;
  if (v26) {
    operator delete(v26);
  }
  std::string::size_type v27 = __dst.__r_.__value_.__r.__words[0];
  if (__dst.__r_.__value_.__r.__words[0])
  {
    std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    std::string::size_type v29 = (void *)__dst.__r_.__value_.__r.__words[0];
    if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(size - 1) < 0) {
          operator delete(*(void **)(size - 24));
        }
        size -= 24;
      }
      while (size != v27);
      std::string::size_type v29 = (void *)__dst.__r_.__value_.__r.__words[0];
    }
    __dst.__r_.__value_.__l.__size_ = v27;
    operator delete(v29);
  }
  if ((SHIBYTE(v38) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v40) & 0x80000000) == 0) {
      return;
    }
LABEL_62:
    operator delete((void *)v39);
    return;
  }
  operator delete(v37[0]);
  if (SHIBYTE(v40) < 0) {
    goto LABEL_62;
  }
}

void sub_8B29C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_14A84((uint64_t)&a10);
  sub_4D4880((void **)&a12);
  if (a29 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v29 - 89) < 0) {
    operator delete(*(void **)(v29 - 112));
  }
  _Unwind_Resume(a1);
}

void sub_8B2A40(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_8B2DDC(a1, a2, a3, (uint64_t)&v40);
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  sub_6370D4(&v31, &v40, 1, &v29);
  char v8 = v30;
  if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = *(void *)(a1 + 1952);
  uint64_t v10 = *(void *)(a1 + 1960);
  int v11 = *(_DWORD *)(a1 + 2128);
  size_t v12 = (std::__shared_weak_count *)operator new(0xB98uLL);
  v12->__shared_owners_ = 0;
  p_shared_owners = &v12->__shared_owners_;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)off_243AE78;
  std::string::size_type v14 = sub_8AEE64((std::string::size_type)&v12[1], v9, v10, a2, a3, v11 - 1);
  if (BYTE4(v12[120].__shared_weak_owners_))
  {
    sub_8B2678(v14, (uint64_t)&v31, a4);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_6;
    }
  }
  else
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    sub_8A6F8((char *)a4, (uint64_t)v31, (uint64_t)v32, 0xAAAAAAAAAAAAAAABLL * (((char *)v32 - (unsigned char *)v31) >> 3));
    sub_5954B0(a4 + 24, (uint64_t)&__p);
    *(unsigned char *)(a4 + 64) = v35;
    *(_DWORD *)(a4 + 72) = v36;
    uint64_t v16 = v38;
    *(void *)(a4 + 80) = v37;
    *(void *)(a4 + 88) = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(_WORD *)(a4 + 96) = v39;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_6:
      int v15 = v38;
      if (!v38) {
        goto LABEL_14;
      }
      goto LABEL_12;
    }
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  int v15 = v38;
  if (!v38) {
    goto LABEL_14;
  }
LABEL_12:
  if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
LABEL_14:
  BOOL v17 = v34;
  if (v34)
  {
    do
    {
      uint64_t v18 = (void *)*v17;
      sub_4F4B48((uint64_t)(v17 + 2));
      operator delete(v17);
      BOOL v17 = v18;
    }
    while (v18);
  }
  std::string::size_type v19 = __p;
  std::string __p = 0;
  if (v19) {
    operator delete(v19);
  }
  int v20 = (void **)v31;
  if (v31)
  {
    long long v21 = v32;
    uint64_t v22 = v31;
    if (v32 != v31)
    {
      do
      {
        if (*((char *)v21 - 1) < 0) {
          operator delete(*(v21 - 3));
        }
        v21 -= 3;
      }
      while (v21 != v20);
      uint64_t v22 = v31;
    }
    int v32 = v20;
    operator delete(v22);
  }
  size_t v23 = v43;
  if (v43)
  {
    do
    {
      unint64_t v24 = (void *)*v23;
      sub_4F4B48((uint64_t)(v23 + 2));
      operator delete(v23);
      size_t v23 = v24;
    }
    while (v24);
  }
  std::string::size_type v25 = v42;
  uint64_t v42 = 0;
  if (v25) {
    operator delete(v25);
  }
  size_t v26 = (void **)v40;
  if (v40)
  {
    std::string::size_type v27 = v41;
    uint64_t v28 = v40;
    if (v41 != v40)
    {
      do
      {
        if (*((char *)v27 - 1) < 0) {
          operator delete(*(v27 - 3));
        }
        v27 -= 3;
      }
      while (v27 != v26);
      uint64_t v28 = v40;
    }
    char v41 = v26;
    operator delete(v28);
  }
}

void sub_8B2D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  if (*v26) {
    sub_20AAD1C((uint64_t)v26, *v26);
  }
  sub_14A84((uint64_t)&a9);
  sub_4F31D0(&a13);
  sub_4D4880(&a26);
  _Unwind_Resume(a1);
}

void sub_8B2DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
}

void sub_8B2DDC(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a2 + 1064);
  uint64_t v9 = *(void *)(a1 + 1952);
  uint64_t v10 = *(void *)(a1 + 1960);
  int v11 = *(_DWORD *)(a1 + 2128) - 1;
  size_t v12 = (std::__shared_weak_count *)operator new(0xB98uLL);
  v12->__shared_owners_ = 0;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)off_243AE78;
  uint64_t v13 = (uint64_t)&v12[1];
  sub_8AEE64((std::string::size_type)&v12[1], v9, v10, a2, a3, v11);
  uint64_t v68 = &v12[1].__vftable;
  long long v69 = v12;
  if (*(unsigned char *)(a1 + 2879))
  {
    if (*(unsigned char *)(v8 + 2400 * a3 + 320))
    {
      int v14 = byte_25CFFB8[23];
      if (byte_25CFFB8[23] >= 0) {
        size_t v15 = byte_25CFFB8[23];
      }
      else {
        size_t v15 = *(void *)&byte_25CFFB8[8];
      }
      int v16 = byte_25CFE07;
      if (byte_25CFE07 >= 0) {
        size_t v17 = byte_25CFE07;
      }
      else {
        size_t v17 = qword_25CFDF8;
      }
      unint64_t v18 = v17 + v15;
      if (v17 + v15 >= 0x7FFFFFFFFFFFFFF8) {
        sub_188D690();
      }
      if (v18 > 0x16)
      {
        uint64_t v54 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v18 | 7) != 0x17) {
          uint64_t v54 = v18 | 7;
        }
        uint64_t v55 = v54 + 1;
        p_dst = (std::string *)operator new(v54 + 1);
        __dst.__r_.__value_.__l.__size_ = v17 + v15;
        __dst.__r_.__value_.__r.__words[2] = v55 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        if (!v15)
        {
LABEL_16:
          long long v21 = (char *)p_dst + v15;
          if (v17)
          {
            if (v16 >= 0) {
              uint64_t v22 = &qword_25CFDF0;
            }
            else {
              uint64_t v22 = (uint64_t *)qword_25CFDF0;
            }
            memmove(v21, v22, v17);
          }
          v21[v17] = 0;
          if (byte_25CD75F >= 0) {
            size_t v23 = (const std::string::value_type *)&qword_25CD748;
          }
          else {
            size_t v23 = (const std::string::value_type *)qword_25CD748;
          }
          if (byte_25CD75F >= 0) {
            std::string::size_type v24 = byte_25CD75F;
          }
          else {
            std::string::size_type v24 = qword_25CD750;
          }
          std::string::size_type v25 = std::string::append(&__dst, v23, v24);
          long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
          std::string::size_type v65 = v25->__r_.__value_.__r.__words[2];
          *(_OWORD *)int64_t v64 = v26;
          v25->__r_.__value_.__l.__size_ = 0;
          v25->__r_.__value_.__r.__words[2] = 0;
          v25->__r_.__value_.__r.__words[0] = 0;
          sub_6352AC(a4, (uint64_t)v64);
          if (SHIBYTE(v65) < 0)
          {
            operator delete(v64[0]);
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_92;
            }
          }
          else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_92;
          }
          operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_92:
          if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
          return;
        }
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
        p_dst = &__dst;
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v17 + v15;
        if (!v15) {
          goto LABEL_16;
        }
      }
      if (v14 >= 0) {
        int v20 = byte_25CFFB8;
      }
      else {
        int v20 = *(char **)byte_25CFFB8;
      }
      memmove(p_dst, v20, v15);
      goto LABEL_16;
    }
    BYTE3(v12[120].__shared_weak_owners_) = 0;
    BYTE5(v12[120].__shared_weak_owners_) = 0;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 72))(v64, a1);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v13 + 72))(&__dst, v13);
  if (sub_636C3C(v64, &__dst))
  {
    sub_814258(v13, (uint64_t)&v56);
    if (byte_25CD747 >= 0) {
      std::string::size_type v27 = (const std::string::value_type *)&qword_25CD730;
    }
    else {
      std::string::size_type v27 = (const std::string::value_type *)qword_25CD730;
    }
    if (byte_25CD747 >= 0) {
      std::string::size_type v28 = byte_25CD747;
    }
    else {
      std::string::size_type v28 = qword_25CD738;
    }
    uint64_t v29 = std::string::append(&v56, v27, v28);
    sub_6352AC(a4, (uint64_t)v29);
    if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_39;
    }
LABEL_99:
    operator delete(v56.__r_.__value_.__l.__data_);
    uint64_t v30 = v60;
    if (!v60) {
      goto LABEL_41;
    }
    goto LABEL_40;
  }
  sub_635CD0((long long **)&__dst, (uint64_t)&v56);
  if (sub_893960(a1, (char *)&v56))
  {
    uint64_t v36 = byte_25CD747;
    if (byte_25CD747 < 0) {
      uint64_t v36 = qword_25CD738;
    }
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v37 = &v56;
    }
    else {
      uint64_t v37 = (std::string *)v56.__r_.__value_.__r.__words[0];
    }
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v56.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v56.__r_.__value_.__l.__size_;
    }
    __int16 v39 = (char *)v37 + size;
    uint64_t v40 = (char *)&v56 + HIBYTE(v56.__r_.__value_.__r.__words[2]);
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v40 = (char *)(v56.__r_.__value_.__r.__words[0] + v56.__r_.__value_.__l.__size_);
    }
    if (byte_25CD75F >= 0) {
      char v41 = (const std::string::value_type *)&qword_25CD748;
    }
    else {
      char v41 = (const std::string::value_type *)qword_25CD748;
    }
    if (byte_25CD75F >= 0) {
      std::string::size_type v42 = byte_25CD75F;
    }
    else {
      std::string::size_type v42 = qword_25CD750;
    }
    std::string::replace(&v56, &v39[-v36] - (char *)v37, v40 - &v39[-v36], v41, v42);
    sub_6351E8(&__dst.__r_.__value_.__l.__data_, (uint64_t)&v56);
  }
  *(_OWORD *)a4 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  memset(&__dst, 0, sizeof(__dst));
  uint64_t v43 = __p;
  unint64_t v44 = v59;
  std::string::size_type v45 = v60;
  std::string __p = 0;
  unint64_t v59 = 0;
  *(void *)(a4 + 16) = *((void *)&__dst.__r_.__value_.__l + 2);
  *(void *)(a4 + 24) = v43;
  *(void *)(a4 + 32) = v44;
  *(void *)(a4 + 40) = v45;
  uint64_t v46 = v61;
  *(void *)(a4 + 48) = v61;
  *(_DWORD *)(a4 + 56) = v62;
  if (v46)
  {
    unint64_t v47 = v45[1];
    if ((v44 & (v44 - 1)) != 0)
    {
      if (v47 >= v44) {
        v47 %= v44;
      }
    }
    else
    {
      v47 &= v44 - 1;
    }
    v43[v47] = a4 + 40;
    uint64_t v60 = 0;
    uint64_t v61 = 0;
  }
  *(unsigned char *)(a4 + 64) = v63;
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_99;
  }
LABEL_39:
  uint64_t v30 = v60;
  if (!v60) {
    goto LABEL_41;
  }
  do
  {
LABEL_40:
    uint64_t v31 = (void *)*v30;
    sub_4F4B48((uint64_t)(v30 + 2));
    operator delete(v30);
    uint64_t v30 = v31;
  }
  while (v31);
LABEL_41:
  int v32 = __p;
  std::string __p = 0;
  if (v32) {
    operator delete(v32);
  }
  std::string::size_type v33 = __dst.__r_.__value_.__r.__words[0];
  if (__dst.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v34 = __dst.__r_.__value_.__l.__size_;
    char v35 = (void *)__dst.__r_.__value_.__r.__words[0];
    if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v34 - 1) < 0) {
          operator delete(*(void **)(v34 - 24));
        }
        v34 -= 24;
      }
      while (v34 != v33);
      char v35 = (void *)__dst.__r_.__value_.__r.__words[0];
    }
    __dst.__r_.__value_.__l.__size_ = v33;
    operator delete(v35);
  }
  size_t v48 = v67;
  if (v67)
  {
    do
    {
      int64_t v49 = (void *)*v48;
      sub_4F4B48((uint64_t)(v48 + 2));
      operator delete(v48);
      size_t v48 = v49;
    }
    while (v49);
  }
  int64_t v50 = v66;
  int v66 = 0;
  if (v50) {
    operator delete(v50);
  }
  uint64_t v51 = (void **)v64[0];
  if (v64[0])
  {
    std::string::size_type v52 = (void **)v64[1];
    std::string::size_type v53 = v64[0];
    if (v64[1] != v64[0])
    {
      do
      {
        if (*((char *)v52 - 1) < 0) {
          operator delete(*(v52 - 3));
        }
        v52 -= 3;
      }
      while (v52 != v51);
      std::string::size_type v53 = v64[0];
    }
    v64[1] = v51;
    operator delete(v53);
  }
  size_t v12 = v69;
  if (v69) {
    goto LABEL_92;
  }
}

void sub_8B3348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_4D4880(&a16);
  sub_4D4880(&a29);
  sub_14A84(v34 - 104);
  _Unwind_Resume(a1);
}

void sub_8B3404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_4D4880((void **)va);
  sub_14A84(v15 - 104);
  _Unwind_Resume(a1);
}

void sub_8B3420(_Unwind_Exception *a1)
{
  sub_14A84(v1 - 104);
  _Unwind_Resume(a1);
}

void sub_8B3434(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_8B344C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!*(unsigned char *)(a1 + 1856))
  {
    *(void *)(a2 + 64) = 0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_DWORD *)(a2 + 56) = 1065353216;
    *(unsigned char *)(a2 + 64) = 1;
    return;
  }
  sub_635CD0((long long **)(a1 + 8), (uint64_t)&v51);
  uint64_t v4 = v53;
  if ((v53 & 0x80u) == 0) {
    uint64_t v5 = (char *)&v51;
  }
  else {
    uint64_t v5 = (char *)v51;
  }
  if (byte_25CCACF >= 0) {
    char v6 = &qword_25CCAB8;
  }
  else {
    char v6 = (uint64_t *)qword_25CCAB8;
  }
  if (byte_25CCACF >= 0) {
    int64_t v7 = byte_25CCACF;
  }
  else {
    int64_t v7 = qword_25CCAC0;
  }
  if (v7)
  {
    if ((v53 & 0x80u) == 0) {
      int64_t v8 = v53;
    }
    else {
      int64_t v8 = v52;
    }
    uint64_t v9 = &v5[v8];
    if (v8 >= v7)
    {
      int v25 = *(char *)v6;
      long long v26 = v5;
      do
      {
        uint64_t v27 = v8 - v7;
        if (v27 == -1) {
          break;
        }
        std::string::size_type v28 = (char *)memchr(v26, v25, v27 + 1);
        if (!v28) {
          break;
        }
        uint64_t v10 = v28;
        if (!memcmp(v28, v6, v7)) {
          goto LABEL_17;
        }
        long long v26 = v10 + 1;
        int64_t v8 = v9 - (v10 + 1);
      }
      while (v8 >= v7);
    }
    uint64_t v10 = v9;
LABEL_17:
    if (v10 == v9) {
      uint64_t v11 = -1;
    }
    else {
      uint64_t v11 = v10 - v5;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  if (byte_25CD507 >= 0) {
    size_t v12 = &qword_25CD4F0;
  }
  else {
    size_t v12 = (uint64_t *)qword_25CD4F0;
  }
  if (byte_25CD507 >= 0) {
    int64_t v13 = byte_25CD507;
  }
  else {
    int64_t v13 = qword_25CD4F8;
  }
  if (v13)
  {
    if ((v4 & 0x80u) == 0) {
      int64_t v14 = v4;
    }
    else {
      int64_t v14 = v52;
    }
    uint64_t v15 = &v5[v14];
    if (v14 >= v13)
    {
      int v29 = *(char *)v12;
      uint64_t v30 = v5;
      do
      {
        uint64_t v31 = v14 - v13;
        if (v31 == -1) {
          break;
        }
        int v32 = (char *)memchr(v30, v29, v31 + 1);
        if (!v32) {
          break;
        }
        int v16 = v32;
        if (!memcmp(v32, v12, v13)) {
          goto LABEL_34;
        }
        uint64_t v30 = v16 + 1;
        int64_t v14 = v15 - (v16 + 1);
      }
      while (v14 >= v13);
    }
    int v16 = v15;
LABEL_34:
    if (v16 == v15) {
      int64_t v13 = -1;
    }
    else {
      int64_t v13 = v16 - v5;
    }
  }
  BOOL v17 = sub_6F2FD8(a1 + 456);
  char v18 = v11 != -1 || v17;
  if ((v18 & 1) == 0)
  {
    *(void *)(a2 + 64) = 0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_DWORD *)(a2 + 56) = 1065353216;
    *(unsigned char *)(a2 + 64) = 1;
    goto LABEL_114;
  }
  if (v11 != -1 && (*(_DWORD *)(a1 + 1848) - 41) <= 0x12)
  {
    uint64_t v19 = qword_25CD4F8;
    if (byte_25CD507 >= 0) {
      uint64_t v19 = byte_25CD507;
    }
    std::string::size_type v20 = v19 + v13;
    std::string::size_type v21 = v53;
    if ((v53 & 0x80u) == 0)
    {
      uint64_t v22 = &v51;
    }
    else
    {
      std::string::size_type v21 = v52;
      uint64_t v22 = v51;
    }
    if (v21 >= v20) {
      std::string::size_type v23 = v20;
    }
    else {
      std::string::size_type v23 = v21;
    }
    if (v23 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v23 >= 0x17)
    {
      uint64_t v36 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v23 | 7) != 0x17) {
        uint64_t v36 = v23 | 7;
      }
      uint64_t v37 = v36 + 1;
      p_dst = (std::string *)operator new(v36 + 1);
      __dst.__r_.__value_.__l.__size_ = v23;
      __dst.__r_.__value_.__r.__words[2] = v37 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v23;
      p_dst = &__dst;
      if (!v23)
      {
LABEL_91:
        p_dst->__r_.__value_.__s.__data_[v23] = 0;
        uint64_t v38 = qword_25CCAC0;
        if (byte_25CCACF >= 0) {
          uint64_t v38 = byte_25CCACF;
        }
        unint64_t v39 = v38 + v11;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::size_type size = __dst.__r_.__value_.__l.__size_;
          if (__dst.__r_.__value_.__l.__size_ >= v39)
          {
            char v41 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            size_t v42 = __dst.__r_.__value_.__l.__size_ - v39;
            if (__dst.__r_.__value_.__l.__size_ - v39 <= 0x7FFFFFFFFFFFFFF7)
            {
LABEL_96:
              if (v42 >= 0x17)
              {
                uint64_t v44 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v42 | 7) != 0x17) {
                  uint64_t v44 = v42 | 7;
                }
                uint64_t v45 = v44 + 1;
                uint64_t v43 = (long long *)operator new(v44 + 1);
                *((void *)&v48 + 1) = v42;
                *(void *)&long long v49 = v45 | 0x8000000000000000;
                *(void *)&long long v48 = v43;
              }
              else
              {
                BYTE7(v49) = v42;
                uint64_t v43 = &v48;
                if (size == v39) {
                  goto LABEL_103;
                }
              }
              memmove(v43, (char *)v41 + v39, v42);
LABEL_103:
              *((unsigned char *)v43 + v42) = 0;
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__dst.__r_.__value_.__l.__data_);
              }
              *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v48;
              __dst.__r_.__value_.__r.__words[2] = v49;
              if (byte_25CD747 >= 0) {
                uint64_t v46 = (const std::string::value_type *)&qword_25CD730;
              }
              else {
                uint64_t v46 = (const std::string::value_type *)qword_25CD730;
              }
              if (byte_25CD747 >= 0) {
                std::string::size_type v47 = byte_25CD747;
              }
              else {
                std::string::size_type v47 = qword_25CD738;
              }
              std::string::append(&__dst, v46, v47);
              sub_6352AC(a2, (uint64_t)&__dst);
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_114;
              }
              char v35 = (void *)__dst.__r_.__value_.__r.__words[0];
              goto LABEL_113;
            }
LABEL_119:
            sub_188D690();
          }
        }
        else
        {
          std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          if (v39 <= HIBYTE(__dst.__r_.__value_.__r.__words[2]))
          {
            char v41 = &__dst;
            size_t v42 = HIBYTE(__dst.__r_.__value_.__r.__words[2]) - v39;
            if (v42 <= 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_96;
            }
            goto LABEL_119;
          }
        }
        sub_5AD0();
      }
    }
    memmove(p_dst, v22, v23);
    goto LABEL_91;
  }
  if (byte_25CE6D8[23] < 0) {
    sub_4200(&__dst, *(void **)byte_25CE6D8, *(unint64_t *)&byte_25CE6D8[8]);
  }
  else {
    std::string __dst = *(std::string *)byte_25CE6D8;
  }
  sub_4AA8E0((char *)&v55, (long long *)(a1 + 456));
  long long v48 = 0u;
  long long v49 = 0u;
  int v50 = 1065353216;
  sub_5955F4((uint64_t)&v48, (uint64_t)&__dst, (uint64_t)&__dst);
  if (v64 < 0)
  {
    operator delete(__p);
    if ((v62 & 0x80000000) == 0)
    {
LABEL_73:
      if ((v60 & 0x80000000) == 0) {
        goto LABEL_74;
      }
      goto LABEL_83;
    }
  }
  else if ((v62 & 0x80000000) == 0)
  {
    goto LABEL_73;
  }
  operator delete(v61);
  if ((v60 & 0x80000000) == 0)
  {
LABEL_74:
    if ((v58 & 0x80000000) == 0) {
      goto LABEL_75;
    }
    goto LABEL_84;
  }
LABEL_83:
  operator delete(v59);
  if ((v58 & 0x80000000) == 0)
  {
LABEL_75:
    if ((v56 & 0x80000000) == 0) {
      goto LABEL_76;
    }
LABEL_85:
    operator delete(v55);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_77;
    }
    goto LABEL_86;
  }
LABEL_84:
  operator delete(v57);
  if (v56 < 0) {
    goto LABEL_85;
  }
LABEL_76:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_77;
  }
LABEL_86:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_77:
  sub_63531C(a2, (uint64_t)&qword_25CCF98, (uint64_t)&v48);
  std::string::size_type v33 = (void *)v49;
  if ((void)v49)
  {
    do
    {
      uint64_t v34 = (void *)*v33;
      sub_4F4B48((uint64_t)(v33 + 2));
      operator delete(v33);
      std::string::size_type v33 = v34;
    }
    while (v34);
  }
  char v35 = (void *)v48;
  *(void *)&long long v48 = 0;
  if (!v35) {
    goto LABEL_114;
  }
LABEL_113:
  operator delete(v35);
LABEL_114:
  if ((char)v53 < 0) {
    operator delete(v51);
  }
}

void sub_8B39DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_8B3A5C(const std::string *a1@<X1>, uint64_t a2@<X8>)
{
  int v3 = byte_25D0287;
  if (byte_25D0287 >= 0) {
    size_t v4 = byte_25D0287;
  }
  else {
    size_t v4 = qword_25D0278;
  }
  int v5 = byte_25CD72F;
  if (byte_25CD72F >= 0) {
    size_t v6 = byte_25CD72F;
  }
  else {
    size_t v6 = qword_25CD720;
  }
  unint64_t v7 = v6 + v4;
  if (v6 + v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v7 <= 0x16)
  {
    size_t v25 = 0;
    unint64_t v26 = 0;
    std::string __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v26) = v6 + v4;
    if (!v4) {
      goto LABEL_18;
    }
    goto LABEL_14;
  }
  uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v7 | 7) != 0x17) {
    uint64_t v10 = v7 | 7;
  }
  uint64_t v11 = v10 + 1;
  p_dst = (void **)operator new(v10 + 1);
  size_t v25 = v6 + v4;
  unint64_t v26 = v11 | 0x8000000000000000;
  std::string __dst = p_dst;
  if (v4)
  {
LABEL_14:
    if (v3 >= 0) {
      size_t v12 = &qword_25D0270;
    }
    else {
      size_t v12 = (uint64_t *)qword_25D0270;
    }
    memmove(p_dst, v12, v4);
  }
LABEL_18:
  int64_t v13 = (char *)p_dst + v4;
  if (v6)
  {
    if (v5 >= 0) {
      int64_t v14 = &qword_25CD718;
    }
    else {
      int64_t v14 = (uint64_t *)qword_25CD718;
    }
    memmove(v13, v14, v6);
  }
  v13[v6] = 0;
  sub_6352AC((uint64_t)&v27, (uint64_t)&__dst);
  if (SHIBYTE(v26) < 0) {
    operator delete(__dst);
  }
  sub_6358F0((uint64_t)&v27, (long long *)&qword_25CE2D0, a1, a1);
  uint64_t v22 = 0;
  std::string::size_type v23 = 0;
  sub_6370D4(a2, &v27, 1, &v22);
  uint64_t v15 = v23;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  int v16 = v30;
  if (v30)
  {
    do
    {
      BOOL v17 = (void *)*v16;
      sub_4F4B48((uint64_t)(v16 + 2));
      operator delete(v16);
      int v16 = v17;
    }
    while (v17);
  }
  char v18 = __p;
  std::string __p = 0;
  if (v18) {
    operator delete(v18);
  }
  uint64_t v19 = (void **)v27;
  if (v27)
  {
    std::string::size_type v20 = v28;
    std::string::size_type v21 = v27;
    if (v28 != v27)
    {
      do
      {
        if (*((char *)v20 - 1) < 0) {
          operator delete(*(v20 - 3));
        }
        v20 -= 3;
      }
      while (v20 != v19);
      std::string::size_type v21 = v27;
    }
    std::string::size_type v28 = v19;
    operator delete(v21);
  }
}

void sub_8B3CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

void sub_8B3CCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_8B3CE8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (byte_25CDC0F < 0)
  {
    sub_4200(&__dst, (void *)xmmword_25CDBF8, *((unint64_t *)&xmmword_25CDBF8 + 1));
  }
  else
  {
    long long __dst = xmmword_25CDBF8;
    uint64_t v23 = unk_25CDC08;
  }
  sub_8B131C(a1 + 608, 1, (uint64_t)__p);
  sub_63531C((uint64_t)&v18, (uint64_t)&__dst, (uint64_t)__p);
  size_t v4 = v17;
  if (v17)
  {
    do
    {
      int v5 = (void *)*v4;
      sub_4F4B48((uint64_t)(v4 + 2));
      operator delete(v4);
      size_t v4 = v5;
    }
    while (v5);
  }
  size_t v6 = __p[0];
  __p[0] = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  sub_6370D4(a2, &v18, 1, &v14);
  unint64_t v7 = v15;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  int64_t v8 = v21;
  if (v21)
  {
    do
    {
      uint64_t v9 = (void *)*v8;
      sub_4F4B48((uint64_t)(v8 + 2));
      operator delete(v8);
      int64_t v8 = v9;
    }
    while (v9);
  }
  uint64_t v10 = v20;
  std::string::size_type v20 = 0;
  if (v10) {
    operator delete(v10);
  }
  uint64_t v11 = (void **)v18;
  if (v18)
  {
    size_t v12 = v19;
    int64_t v13 = v18;
    if (v19 != v18)
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 3;
      }
      while (v12 != v11);
      int64_t v13 = v18;
    }
    uint64_t v19 = v11;
    operator delete(v13);
  }
  if (SHIBYTE(v23) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_8B3EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  sub_14A84((uint64_t)&a9);
  sub_4D4880(&a16);
  if (*(char *)(v16 - 41) < 0) {
    operator delete(*(void **)(v16 - 64));
  }
  _Unwind_Resume(a1);
}

void sub_8B3EEC(unsigned char *a1@<X0>, uint64_t *a2@<X8>)
{
  if (a1[1858])
  {
    uint64_t v82 = 0;
    int64_t v83 = 0;
    sub_6370D4(a2, a1 + 80, 1, &v82);
    size_t v4 = v83;
    if (v83)
    {
      if (!atomic_fetch_add(&v83->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    sub_816254((uint64_t)a1, a2, 1, 0);
    return;
  }
  if (a1[1944])
  {
    uint64_t v5 = (uint64_t)(a1 + 80);
    if (sub_635D10((uint64_t)(a1 + 80), (uint64_t)&xmmword_25CE600))
    {
      sub_8189D0((uint64_t)a1, &v81);
      sub_6352AC((uint64_t)&v76, (uint64_t)&v81);
      uint64_t v69 = 0;
      uint64_t v70 = 0;
      sub_6370D4(&v71, &v76, 1, &v69);
      size_t v6 = v70;
      if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      int v7 = byte_25CFDEF;
      if (byte_25CFDEF >= 0) {
        size_t v8 = byte_25CFDEF;
      }
      else {
        size_t v8 = qword_25CFDE0;
      }
      int v9 = byte_25CD7A7;
      if (byte_25CD7A7 >= 0) {
        size_t v10 = byte_25CD7A7;
      }
      else {
        size_t v10 = qword_25CD798;
      }
      unint64_t v11 = v10 + v8;
      if (v10 + v8 > 0x7FFFFFFFFFFFFFF7) {
        sub_188D690();
      }
      if (v11 > 0x16)
      {
        uint64_t v43 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17) {
          uint64_t v43 = v11 | 7;
        }
        uint64_t v44 = v43 + 1;
        p_dst = (void **)operator new(v43 + 1);
        size_t v67 = v10 + v8;
        unint64_t v68 = v44 | 0x8000000000000000;
        long long __dst = p_dst;
        if (!v8) {
          goto LABEL_25;
        }
      }
      else
      {
        size_t v67 = 0;
        unint64_t v68 = 0;
        long long __dst = 0;
        p_dst = (void **)&__dst;
        HIBYTE(v68) = v10 + v8;
        if (!v8)
        {
LABEL_25:
          uint64_t v14 = (char *)p_dst + v8;
          if (v10)
          {
            if (v9 >= 0) {
              uint64_t v15 = &qword_25CD790;
            }
            else {
              uint64_t v15 = (uint64_t *)qword_25CD790;
            }
            memmove(v14, v15, v10);
          }
          v14[v10] = 0;
          uint64_t v16 = sub_5231C(v5);
          sub_63531C((uint64_t)&v62, (uint64_t)&__dst, v16);
          BOOL v17 = (std::__shared_weak_count *)operator new(0x80uLL);
          v17->__shared_owners_ = 0;
          v17->__shared_weak_owners_ = 0;
          v17->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
          sub_59540C((uint64_t)&v84, (uint64_t)&v17[1], (uint64_t)&v71);
          char v60 = &v17[1].__vftable;
          uint64_t v61 = v17;
          sub_6370D4(a2, &v62, 13, &v60);
          char v18 = v61;
          if (v61 && !atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
          uint64_t v19 = v65;
          if (v65)
          {
            do
            {
              std::string::size_type v20 = (void *)*v19;
              sub_4F4B48((uint64_t)(v19 + 2));
              operator delete(v19);
              uint64_t v19 = v20;
            }
            while (v20);
          }
          std::string::size_type v21 = __p;
          std::string __p = 0;
          if (v21) {
            operator delete(v21);
          }
          uint64_t v22 = (void **)v62;
          if (v62)
          {
            uint64_t v23 = v63;
            std::string::size_type v24 = v62;
            if (v63 != v62)
            {
              do
              {
                if (*((char *)v23 - 1) < 0) {
                  operator delete(*(v23 - 3));
                }
                v23 -= 3;
              }
              while (v23 != v22);
              std::string::size_type v24 = v62;
            }
            char v63 = v22;
            operator delete(v24);
          }
          if (SHIBYTE(v68) < 0) {
            operator delete(__dst);
          }
          uint64_t v45 = v75;
          if (v75 && !atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
          uint64_t v46 = v74;
          if (v74)
          {
            do
            {
              std::string::size_type v47 = (void *)*v46;
              sub_4F4B48((uint64_t)(v46 + 2));
              operator delete(v46);
              uint64_t v46 = v47;
            }
            while (v47);
          }
          long long v48 = v73;
          char v73 = 0;
          if (v48) {
            operator delete(v48);
          }
          long long v49 = (void **)v71;
          if (v71)
          {
            int v50 = v72;
            uint64_t v51 = v71;
            if (v72 != v71)
            {
              do
              {
                if (*((char *)v50 - 1) < 0) {
                  operator delete(*(v50 - 3));
                }
                v50 -= 3;
              }
              while (v50 != v49);
              uint64_t v51 = v71;
            }
            int v72 = v49;
            operator delete(v51);
          }
          std::string::size_type v52 = v80;
          if (v80)
          {
            do
            {
              unsigned __int8 v53 = (void *)*v52;
              sub_4F4B48((uint64_t)(v52 + 2));
              operator delete(v52);
              std::string::size_type v52 = v53;
            }
            while (v53);
          }
          uint64_t v54 = v79;
          char v79 = 0;
          if (v54) {
            operator delete(v54);
          }
          uint64_t v55 = v76;
          if (v76)
          {
            char v56 = v77;
            uint64_t v57 = v76;
            if (v77 != v76)
            {
              do
              {
                if (*((char *)v56 - 1) < 0) {
                  operator delete(*(v56 - 3));
                }
                v56 -= 3;
              }
              while (v56 != v55);
              uint64_t v57 = v76;
            }
            char v77 = v55;
            operator delete(v57);
          }
          if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v81.__r_.__value_.__l.__data_);
          }
          return;
        }
      }
      if (v7 >= 0) {
        int64_t v13 = &qword_25CFDD8;
      }
      else {
        int64_t v13 = (uint64_t *)qword_25CFDD8;
      }
      memmove(p_dst, v13, v8);
      goto LABEL_25;
    }
  }
  if (a1[1945])
  {
    int v25 = byte_25CFD8F;
    if (byte_25CFD8F >= 0) {
      size_t v26 = byte_25CFD8F;
    }
    else {
      size_t v26 = *((void *)&xmmword_25CFD78 + 1);
    }
    int v27 = byte_25CD7A7;
    if (byte_25CD7A7 >= 0) {
      size_t v28 = byte_25CD7A7;
    }
    else {
      size_t v28 = qword_25CD798;
    }
    unint64_t v29 = v28 + v26;
    if (v28 + v26 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v29 > 0x16)
    {
      uint64_t v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v29 | 7) != 0x17) {
        uint64_t v32 = v29 | 7;
      }
      uint64_t v33 = v32 + 1;
      uint64_t v30 = (void **)operator new(v32 + 1);
      char v77 = (void **)(v28 + v26);
      unint64_t v78 = v33 | 0x8000000000000000;
      long long v76 = v30;
      if (!v26) {
        goto LABEL_64;
      }
    }
    else
    {
      char v77 = 0;
      unint64_t v78 = 0;
      long long v76 = 0;
      uint64_t v30 = (void **)&v76;
      HIBYTE(v78) = v28 + v26;
      if (!v26)
      {
LABEL_64:
        char v35 = (char *)v30 + v26;
        if (v28)
        {
          if (v27 >= 0) {
            uint64_t v36 = &qword_25CD790;
          }
          else {
            uint64_t v36 = (uint64_t *)qword_25CD790;
          }
          memmove(v35, v36, v28);
        }
        v35[v28] = 0;
        sub_6352AC((uint64_t)&v71, (uint64_t)&v76);
        if (SHIBYTE(v78) < 0) {
          operator delete(v76);
        }
        sub_6376A0(a2, &v71, 3, a1 + 80, 1);
        uint64_t v37 = v74;
        if (v74)
        {
          do
          {
            uint64_t v38 = (void *)*v37;
            sub_4F4B48((uint64_t)(v37 + 2));
            operator delete(v37);
            uint64_t v37 = v38;
          }
          while (v38);
        }
        unint64_t v39 = v73;
        char v73 = 0;
        if (v39) {
          operator delete(v39);
        }
        uint64_t v40 = (void **)v71;
        if (v71)
        {
          char v41 = v72;
          size_t v42 = v71;
          if (v72 != v71)
          {
            do
            {
              if (*((char *)v41 - 1) < 0) {
                operator delete(*(v41 - 3));
              }
              v41 -= 3;
            }
            while (v41 != v40);
            size_t v42 = v71;
          }
          int v72 = v40;
          operator delete(v42);
        }
        return;
      }
    }
    if (v25 >= 0) {
      uint64_t v34 = &xmmword_25CFD78;
    }
    else {
      uint64_t v34 = (long long *)xmmword_25CFD78;
    }
    memmove(v30, v34, v26);
    goto LABEL_64;
  }
  uint64_t v58 = 0;
  unint64_t v59 = 0;
  sub_6370D4(a2, a1 + 80, 2, &v58);
  uint64_t v31 = v59;
  if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
}

void sub_8B45F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,char a30)
{
}

uint64_t sub_8B46E4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 96))();
}

void sub_8B4708(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  sub_6352AC((uint64_t)&v15, a2);
  uint64_t v5 = (std::__shared_weak_count *)operator new(0x80uLL);
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
  sub_63D394((uint64_t)&v19, (uint64_t)&v5[1], a1);
  int64_t v13 = &v5[1].__vftable;
  uint64_t v14 = v5;
  sub_6370D4(a3, &v15, 7, &v13);
  size_t v6 = v14;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  int v7 = v18;
  if (v18)
  {
    do
    {
      size_t v8 = (void *)*v7;
      sub_4F4B48((uint64_t)(v7 + 2));
      operator delete(v7);
      int v7 = v8;
    }
    while (v8);
  }
  int v9 = __p;
  std::string __p = 0;
  if (v9) {
    operator delete(v9);
  }
  size_t v10 = (void **)v15;
  if (v15)
  {
    unint64_t v11 = v16;
    size_t v12 = v15;
    if (v16 != v15)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != v10);
      size_t v12 = v15;
    }
    uint64_t v16 = v10;
    operator delete(v12);
  }
}

void sub_8B4864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

void sub_8B4880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v13);
  sub_4D4880(&a11);
  _Unwind_Resume(a1);
}

void sub_8B48A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_4D4880((void **)va);
  _Unwind_Resume(a1);
}

void sub_8B48B4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_8B4A7C(a1, (uint64_t *)&v17);
  uint64_t v4 = 252;
  if (!*(unsigned char *)(a1 + 2873)) {
    uint64_t v4 = 258;
  }
  uint64_t v5 = &qword_25CD988;
  if (*(unsigned char *)(a1 + 2873)) {
    uint64_t v5 = &qword_25CD970;
  }
  size_t v6 = (char *)&unk_25CD987;
  if (!*(unsigned char *)(a1 + 2873)) {
    size_t v6 = (char *)&xmmword_25CD990 + 15;
  }
  if (*v6 < 0)
  {
    if (*(unsigned char *)(a1 + 2873)) {
      int v7 = (unint64_t *)&unk_25CD978;
    }
    else {
      int v7 = (unint64_t *)&xmmword_25CD990;
    }
    sub_4200(__p, *(void **)&dword_25CD580[v4], *v7);
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)v5;
    uint64_t v16 = v5[2];
  }
  sub_8B4708((uint64_t)&v17, (uint64_t)__p, a2);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  size_t v8 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  int v9 = v20;
  if (v20)
  {
    do
    {
      size_t v10 = (void *)*v9;
      sub_4F4B48((uint64_t)(v9 + 2));
      operator delete(v9);
      int v9 = v10;
    }
    while (v10);
  }
  unint64_t v11 = v19;
  char v19 = 0;
  if (v11) {
    operator delete(v11);
  }
  size_t v12 = (void **)v17;
  if (v17)
  {
    int64_t v13 = v18;
    uint64_t v14 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v13 - 1) < 0) {
          operator delete(*(v13 - 3));
        }
        v13 -= 3;
      }
      while (v13 != v12);
      uint64_t v14 = v17;
    }
    char v18 = v12;
    operator delete(v14);
  }
}

void sub_8B4A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_8B4A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_4F31D0(&a15);
  _Unwind_Resume(a1);
}

void sub_8B4A7C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_8189D0(a1, &v17);
  sub_6352AC((uint64_t)&v13, (uint64_t)&v17);
  uint64_t v11 = 0;
  size_t v12 = 0;
  sub_6370D4(a2, &v13, 1, &v11);
  uint64_t v4 = v12;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = v16;
  if (v16)
  {
    do
    {
      size_t v6 = (void *)*v5;
      sub_4F4B48((uint64_t)(v5 + 2));
      operator delete(v5);
      uint64_t v5 = v6;
    }
    while (v6);
  }
  int v7 = __p;
  std::string __p = 0;
  if (v7) {
    operator delete(v7);
  }
  size_t v8 = (void **)v13;
  if (v13)
  {
    int v9 = v14;
    size_t v10 = v13;
    if (v14 != v13)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      size_t v10 = v13;
    }
    uint64_t v14 = v8;
    operator delete(v10);
  }
  sub_816254(a1, a2, 0, 0);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
}

void sub_8B4BD8(_Unwind_Exception *a1)
{
  sub_4F31D0(v1);
  if (*(char *)(v2 - 33) < 0) {
    operator delete(*(void **)(v2 - 56));
  }
  _Unwind_Resume(a1);
}

void sub_8B4C1C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_8B4A7C(a1, (uint64_t *)&v45);
  uint64_t v4 = 288;
  if (!*(unsigned char *)(a1 + 2873)) {
    uint64_t v4 = 294;
  }
  uint64_t v5 = &qword_25CDA18;
  if (*(unsigned char *)(a1 + 2873)) {
    uint64_t v5 = &qword_25CDA00;
  }
  size_t v6 = (char *)&unk_25CDA17;
  if (!*(unsigned char *)(a1 + 2873)) {
    size_t v6 = (char *)&xmmword_25CDA20 + 15;
  }
  if (*v6 < 0)
  {
    if (*(unsigned char *)(a1 + 2873)) {
      int v7 = (unint64_t *)&unk_25CDA08;
    }
    else {
      int v7 = (unint64_t *)&xmmword_25CDA20;
    }
    sub_4200(&__dst, *(void **)&dword_25CD580[v4], *v7);
  }
  else
  {
    long long __dst = *(_OWORD *)v5;
    uint64_t v44 = v5[2];
  }
  sub_8B4708((uint64_t)&v45, (uint64_t)&__dst, (uint64_t)&v38);
  uint64_t v8 = 306;
  if (!*(unsigned char *)(a1 + 2873)) {
    uint64_t v8 = 309;
  }
  int v9 = &qword_25CEF18;
  if (*(unsigned char *)(a1 + 2873)) {
    int v9 = &qword_25CEF00;
  }
  size_t v10 = (char *)&unk_25CEF17;
  if (!*(unsigned char *)(a1 + 2873)) {
    size_t v10 = (char *)&unk_25CEF2F;
  }
  if (*v10 < 0)
  {
    if (*(unsigned char *)(a1 + 2873)) {
      uint64_t v11 = (unint64_t *)&unk_25CEF08;
    }
    else {
      uint64_t v11 = (unint64_t *)&unk_25CEF20;
    }
    sub_4200(v36, (void *)qword_25CE570[v8], *v11);
  }
  else
  {
    *(_OWORD *)uint64_t v36 = *(_OWORD *)v9;
    uint64_t v37 = v9[2];
  }
  *(_OWORD *)std::string __p = 0u;
  long long v34 = 0u;
  int v35 = 1065353216;
  size_t v12 = (std::__shared_weak_count *)operator new(0x80uLL);
  v12->__shared_owners_ = 0;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
  sub_63D394((uint64_t)&v50, (uint64_t)&v12[1], (uint64_t)&v38);
  uint64_t v31 = &v12[1].__vftable;
  uint64_t v32 = v12;
  sub_6373D8(a2, (uint64_t)v36, (uint64_t)__p, 5, (uint64_t *)&v31);
  int64_t v13 = v32;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = (void *)v34;
  if ((void)v34)
  {
    do
    {
      uint64_t v15 = (void *)*v14;
      sub_4F4B48((uint64_t)(v14 + 2));
      operator delete(v14);
      uint64_t v14 = v15;
    }
    while (v15);
  }
  uint64_t v16 = __p[0];
  __p[0] = 0;
  if (v16) {
    operator delete(v16);
  }
  if (SHIBYTE(v37) < 0) {
    operator delete(v36[0]);
  }
  std::string v17 = v42;
  if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  char v18 = v41;
  if (v41)
  {
    do
    {
      char v19 = (void *)*v18;
      sub_4F4B48((uint64_t)(v18 + 2));
      operator delete(v18);
      char v18 = v19;
    }
    while (v19);
  }
  std::string::size_type v20 = v40;
  uint64_t v40 = 0;
  if (v20) {
    operator delete(v20);
  }
  std::string::size_type v21 = (void **)v38;
  if (v38)
  {
    uint64_t v22 = v39;
    uint64_t v23 = v38;
    if (v39 != v38)
    {
      do
      {
        if (*((char *)v22 - 1) < 0) {
          operator delete(*(v22 - 3));
        }
        v22 -= 3;
      }
      while (v22 != v21);
      uint64_t v23 = v38;
    }
    unint64_t v39 = v21;
    operator delete(v23);
  }
  if (SHIBYTE(v44) < 0) {
    operator delete((void *)__dst);
  }
  std::string::size_type v24 = v49;
  if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  int v25 = v48;
  if (v48)
  {
    do
    {
      size_t v26 = (void *)*v25;
      sub_4F4B48((uint64_t)(v25 + 2));
      operator delete(v25);
      int v25 = v26;
    }
    while (v26);
  }
  int v27 = v47;
  std::string::size_type v47 = 0;
  if (v27) {
    operator delete(v27);
  }
  uint64_t v28 = (uint64_t)v45;
  if (v45)
  {
    uint64_t v29 = v46;
    uint64_t v30 = v45;
    if ((void *)v46 != v45)
    {
      do
      {
        if (*(char *)(v29 - 1) < 0) {
          operator delete(*(void **)(v29 - 24));
        }
        v29 -= 24;
      }
      while (v29 != v28);
      uint64_t v30 = v45;
    }
    uint64_t v46 = v28;
    operator delete(v30);
  }
}

void sub_8B4FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23)
{
  sub_4F31D0(&a23);
  if (*(char *)(v23 - 153) < 0) {
    operator delete(*(void **)(v23 - 176));
  }
  sub_4F31D0((void **)(v23 - 144));
  _Unwind_Resume(a1);
}

void sub_8B5070(std::string::size_type a1@<X0>, uint64_t a2@<X8>)
{
  sub_8B54D0(a1, 1, 0, 0, (uint64_t)&v45);
  uint64_t v4 = 288;
  if (!*(unsigned char *)(a1 + 2873)) {
    uint64_t v4 = 294;
  }
  uint64_t v5 = &qword_25CDA18;
  if (*(unsigned char *)(a1 + 2873)) {
    uint64_t v5 = &qword_25CDA00;
  }
  size_t v6 = (char *)&unk_25CDA17;
  if (!*(unsigned char *)(a1 + 2873)) {
    size_t v6 = (char *)&xmmword_25CDA20 + 15;
  }
  if (*v6 < 0)
  {
    if (*(unsigned char *)(a1 + 2873)) {
      int v7 = (unint64_t *)&unk_25CDA08;
    }
    else {
      int v7 = (unint64_t *)&xmmword_25CDA20;
    }
    sub_4200(&__dst, *(void **)&dword_25CD580[v4], *v7);
  }
  else
  {
    long long __dst = *(_OWORD *)v5;
    uint64_t v44 = v5[2];
  }
  sub_8B4708((uint64_t)&v45, (uint64_t)&__dst, (uint64_t)&v38);
  uint64_t v8 = 306;
  if (!*(unsigned char *)(a1 + 2873)) {
    uint64_t v8 = 309;
  }
  int v9 = &qword_25CEF18;
  if (*(unsigned char *)(a1 + 2873)) {
    int v9 = &qword_25CEF00;
  }
  size_t v10 = (char *)&unk_25CEF17;
  if (!*(unsigned char *)(a1 + 2873)) {
    size_t v10 = (char *)&unk_25CEF2F;
  }
  if (*v10 < 0)
  {
    if (*(unsigned char *)(a1 + 2873)) {
      uint64_t v11 = (unint64_t *)&unk_25CEF08;
    }
    else {
      uint64_t v11 = (unint64_t *)&unk_25CEF20;
    }
    sub_4200(v36, (void *)qword_25CE570[v8], *v11);
  }
  else
  {
    *(_OWORD *)uint64_t v36 = *(_OWORD *)v9;
    uint64_t v37 = v9[2];
  }
  *(_OWORD *)std::string __p = 0u;
  long long v34 = 0u;
  int v35 = 1065353216;
  size_t v12 = (std::__shared_weak_count *)operator new(0x80uLL);
  v12->__shared_owners_ = 0;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
  sub_63D394((uint64_t)&v50, (uint64_t)&v12[1], (uint64_t)&v38);
  uint64_t v31 = &v12[1].__vftable;
  uint64_t v32 = v12;
  sub_6373D8(a2, (uint64_t)v36, (uint64_t)__p, 5, (uint64_t *)&v31);
  int64_t v13 = v32;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = (void *)v34;
  if ((void)v34)
  {
    do
    {
      uint64_t v15 = (void *)*v14;
      sub_4F4B48((uint64_t)(v14 + 2));
      operator delete(v14);
      uint64_t v14 = v15;
    }
    while (v15);
  }
  uint64_t v16 = __p[0];
  __p[0] = 0;
  if (v16) {
    operator delete(v16);
  }
  if (SHIBYTE(v37) < 0) {
    operator delete(v36[0]);
  }
  std::string v17 = v42;
  if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  char v18 = v41;
  if (v41)
  {
    do
    {
      char v19 = (void *)*v18;
      sub_4F4B48((uint64_t)(v18 + 2));
      operator delete(v18);
      char v18 = v19;
    }
    while (v19);
  }
  std::string::size_type v20 = v40;
  uint64_t v40 = 0;
  if (v20) {
    operator delete(v20);
  }
  std::string::size_type v21 = (void **)v38;
  if (v38)
  {
    uint64_t v22 = v39;
    uint64_t v23 = v38;
    if (v39 != v38)
    {
      do
      {
        if (*((char *)v22 - 1) < 0) {
          operator delete(*(v22 - 3));
        }
        v22 -= 3;
      }
      while (v22 != v21);
      uint64_t v23 = v38;
    }
    unint64_t v39 = v21;
    operator delete(v23);
  }
  if (SHIBYTE(v44) < 0) {
    operator delete((void *)__dst);
  }
  std::string::size_type v24 = v49;
  if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  int v25 = v48;
  if (v48)
  {
    do
    {
      size_t v26 = (void *)*v25;
      sub_4F4B48((uint64_t)(v25 + 2));
      operator delete(v25);
      int v25 = v26;
    }
    while (v26);
  }
  int v27 = v47;
  std::string::size_type v47 = 0;
  if (v27) {
    operator delete(v27);
  }
  uint64_t v28 = v45;
  if (v45)
  {
    uint64_t v29 = v46;
    uint64_t v30 = v45;
    if (v46 != v45)
    {
      do
      {
        if (*((char *)v29 - 1) < 0) {
          operator delete(*(v29 - 3));
        }
        v29 -= 3;
      }
      while (v29 != v28);
      uint64_t v30 = v45;
    }
    uint64_t v46 = v28;
    operator delete(v30);
  }
}

void sub_8B5444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23)
{
  sub_4F31D0(&a23);
  if (*(char *)(v23 - 153) < 0) {
    operator delete(*(void **)(v23 - 176));
  }
  sub_4F31D0((void **)(v23 - 144));
  _Unwind_Resume(a1);
}

void sub_8B54D0(std::string::size_type a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  if (a3)
  {
    if (*(unsigned char *)(a1 + 2872))
    {
      if ((*(_DWORD *)(a1 + 1848) - 41) >= 0x13)
      {
        sub_8B6188(a1, a5);
        return;
      }
LABEL_12:
      if (a2)
      {
        __dst[0] = 0;
        __dst[1] = 0;
        unint64_t v58 = 0;
        sub_8A6F8((char *)__dst, *(void *)(a1 + 80), *(void *)(a1 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3));
        sub_5954B0((uint64_t)&v59, a1 + 104);
        char v61 = *(unsigned char *)(a1 + 144);
      }
      else
      {
        sub_7FC804(a1, (uint64_t)&__p);
        sub_80FC34(a1, 1, (uint64_t)&__p, (uint64_t)__dst);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v55 = 0;
      char v56 = 0;
      sub_6370D4(&__p, __dst, 1, &v55);
      int v9 = v56;
      if (v56 && !atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
        if (*(unsigned char *)(a1 + 2875)) {
          goto LABEL_19;
        }
      }
      else if (*(unsigned char *)(a1 + 2875))
      {
LABEL_19:
        BOOL v10 = 1;
        goto LABEL_22;
      }
      BOOL v10 = *(unsigned char *)(a1 + 2876) != 0;
LABEL_22:
      sub_816254(a1, (uint64_t *)&__p, 0, v10);
      if (v10)
      {
        int v11 = *(unsigned __int8 *)(a1 + 1859);
        size_t v12 = (std::__shared_weak_count *)operator new(0x80uLL);
        v12->__shared_owners_ = 0;
        v12->__shared_weak_owners_ = 0;
        v12->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
        sub_59540C((uint64_t)&v74, (uint64_t)&v12[1], (uint64_t)&__p);
        unsigned __int8 v53 = &v12[1].__vftable;
        uint64_t v54 = v12;
        if (v11) {
          uint64_t v13 = 5;
        }
        else {
          uint64_t v13 = 10;
        }
        sub_8B8700(a1, (uint64_t *)&v53, v13, a5);
        uint64_t v14 = v54;
        if (v54 && !atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
          uint64_t v15 = (std::__shared_weak_count *)*((void *)&v72 + 1);
          if (!*((void *)&v72 + 1)) {
            goto LABEL_58;
          }
          goto LABEL_33;
        }
      }
      else
      {
        if (!*(unsigned char *)(a1 + 1862))
        {
          if (a4) {
            sub_637918(&__p, (uint64_t)&xmmword_25CCEF0);
          }
          *(_OWORD *)a5 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          memset(&__p, 0, sizeof(__p));
          uint64_t v22 = v65;
          unint64_t v23 = v66;
          std::string::size_type v24 = v67;
          std::string::size_type v65 = 0;
          unint64_t v66 = 0;
          *(void *)(a5 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
          *(void *)(a5 + 24) = v22;
          *(void *)(a5 + 32) = v23;
          *(void *)(a5 + 40) = v24;
          uint64_t v25 = v68;
          *(void *)(a5 + 48) = v68;
          *(_DWORD *)(a5 + 56) = v69;
          if (v25)
          {
            unint64_t v26 = v24[1];
            if ((v23 & (v23 - 1)) != 0)
            {
              if (v26 >= v23) {
                v26 %= v23;
              }
            }
            else
            {
              v26 &= v23 - 1;
            }
            v22[v26] = a5 + 40;
            size_t v67 = 0;
            uint64_t v68 = 0;
          }
          *(unsigned char *)(a5 + 64) = v70;
          *(_DWORD *)(a5 + 72) = v71;
          *(_OWORD *)(a5 + 80) = v72;
          long long v72 = 0uLL;
          *(_WORD *)(a5 + 96) = v73;
          uint64_t v15 = (std::__shared_weak_count *)*((void *)&v72 + 1);
          if (!*((void *)&v72 + 1))
          {
LABEL_58:
            uint64_t v28 = v67;
            if (v67)
            {
              do
              {
                uint64_t v29 = (void *)*v28;
                sub_4F4B48((uint64_t)(v28 + 2));
                operator delete(v28);
                uint64_t v28 = v29;
              }
              while (v29);
            }
            uint64_t v30 = v65;
            std::string::size_type v65 = 0;
            if (v30) {
              operator delete(v30);
            }
            std::string::size_type v31 = __p.__r_.__value_.__r.__words[0];
            if (__p.__r_.__value_.__r.__words[0])
            {
              std::string::size_type size = __p.__r_.__value_.__l.__size_;
              uint64_t v33 = (void *)__p.__r_.__value_.__r.__words[0];
              if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
              {
                do
                {
                  if (*(char *)(size - 1) < 0) {
                    operator delete(*(void **)(size - 24));
                  }
                  size -= 24;
                }
                while (size != v31);
                uint64_t v33 = (void *)__p.__r_.__value_.__r.__words[0];
              }
              __p.__r_.__value_.__l.__size_ = v31;
              operator delete(v33);
            }
            long long v34 = v60;
            if (v60)
            {
              do
              {
                int v35 = (void *)*v34;
                sub_4F4B48((uint64_t)(v34 + 2));
                operator delete(v34);
                long long v34 = v35;
              }
              while (v35);
            }
            uint64_t v36 = v59;
            unint64_t v59 = 0;
            if (v36) {
              operator delete(v36);
            }
            uint64_t v37 = (void **)__dst[0];
            if (__dst[0])
            {
              uint64_t v38 = (void **)__dst[1];
              unint64_t v39 = __dst[0];
              if (__dst[1] != __dst[0])
              {
                do
                {
                  if (*((char *)v38 - 1) < 0) {
                    operator delete(*(v38 - 3));
                  }
                  v38 -= 3;
                }
                while (v38 != v37);
                unint64_t v39 = __dst[0];
              }
              __dst[1] = v37;
              goto LABEL_82;
            }
            return;
          }
LABEL_33:
          if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
          goto LABEL_58;
        }
        sub_8B8A1C(a1, a5);
      }
      uint64_t v15 = (std::__shared_weak_count *)*((void *)&v72 + 1);
      if (!*((void *)&v72 + 1)) {
        goto LABEL_58;
      }
      goto LABEL_33;
    }
  }
  else if (*(unsigned char *)(a1 + 2872))
  {
    goto LABEL_12;
  }
  if (!*(unsigned char *)(a1 + 2125)) {
    goto LABEL_12;
  }
  if (a2)
  {
    if ((byte_25CDA47 & 0x80000000) == 0)
    {
      uint64_t v8 = &xmmword_25CDA30;
LABEL_52:
      *(_OWORD *)long long __dst = *v8;
      unint64_t v58 = *((void *)v8 + 2);
      goto LABEL_99;
    }
    int v27 = &xmmword_25CDA30;
    goto LABEL_98;
  }
  if (!a4)
  {
    if ((byte_25CDA5F & 0x80000000) == 0)
    {
      uint64_t v8 = &xmmword_25CDA48;
      goto LABEL_52;
    }
    int v27 = &xmmword_25CDA48;
LABEL_98:
    sub_4200(__dst, *(void **)v27, *((void *)v27 + 1));
    goto LABEL_99;
  }
  int v16 = byte_25CCF07;
  if (byte_25CCF07 >= 0) {
    size_t v17 = byte_25CCF07;
  }
  else {
    size_t v17 = *((void *)&xmmword_25CCEF0 + 1);
  }
  int v18 = byte_25CDA5F;
  if (byte_25CDA5F >= 0) {
    size_t v19 = byte_25CDA5F;
  }
  else {
    size_t v19 = *((void *)&xmmword_25CDA48 + 1);
  }
  unint64_t v20 = v19 + v17;
  if (v19 + v17 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v20 > 0x16)
  {
    uint64_t v40 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17) {
      uint64_t v40 = v20 | 7;
    }
    uint64_t v41 = v40 + 1;
    std::string::size_type v21 = (char *)operator new(v40 + 1);
    __dst[1] = (void *)(v19 + v17);
    unint64_t v58 = v41 | 0x8000000000000000;
    __dst[0] = v21;
  }
  else
  {
    __dst[1] = 0;
    unint64_t v58 = 0;
    __dst[0] = 0;
    std::string::size_type v21 = (char *)__dst;
    HIBYTE(v58) = v19 + v17;
  }
  if (v17)
  {
    if (v16 >= 0) {
      size_t v42 = &xmmword_25CCEF0;
    }
    else {
      size_t v42 = (long long *)xmmword_25CCEF0;
    }
    memmove(v21, v42, v17);
  }
  uint64_t v43 = &v21[v17];
  if (v19)
  {
    if (v18 >= 0) {
      uint64_t v44 = &xmmword_25CDA48;
    }
    else {
      uint64_t v44 = (long long *)xmmword_25CDA48;
    }
    memmove(v43, v44, v19);
  }
  v43[v19] = 0;
LABEL_99:
  uint64_t v62 = 0;
  char v63 = 0;
  sub_6370D4(&__p, a1 + 80, 1, &v62);
  uint64_t v45 = v63;
  if (v63 && !atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
  sub_816254(a1, (uint64_t *)&__p, 0, 0);
  sub_8B4708((uint64_t)&__p, (uint64_t)__dst, a5);
  uint64_t v46 = (std::__shared_weak_count *)*((void *)&v72 + 1);
  if (*((void *)&v72 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v72 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
  }
  std::string::size_type v47 = v67;
  if (v67)
  {
    do
    {
      long long v48 = (void *)*v47;
      sub_4F4B48((uint64_t)(v47 + 2));
      operator delete(v47);
      std::string::size_type v47 = v48;
    }
    while (v48);
  }
  long long v49 = v65;
  std::string::size_type v65 = 0;
  if (v49) {
    operator delete(v49);
  }
  std::string::size_type v50 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v51 = __p.__r_.__value_.__l.__size_;
    std::string::size_type v52 = (void *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v51 - 1) < 0) {
          operator delete(*(void **)(v51 - 24));
        }
        v51 -= 24;
      }
      while (v51 != v50);
      std::string::size_type v52 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    __p.__r_.__value_.__l.__size_ = v50;
    operator delete(v52);
  }
  if (SHIBYTE(v58) < 0)
  {
    unint64_t v39 = __dst[0];
LABEL_82:
    operator delete(v39);
  }
}

void sub_8B5C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_8B5CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  _Unwind_Resume(a1);
}

void sub_8B5D0C(unsigned char *a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void ***__return_ptr))(*(void *)a1 + 168))(&v45);
  uint64_t v4 = 288;
  if (!a1[2873]) {
    uint64_t v4 = 294;
  }
  uint64_t v5 = &qword_25CDA18;
  if (a1[2873]) {
    uint64_t v5 = &qword_25CDA00;
  }
  uint64_t v6 = (char *)&unk_25CDA17;
  if (!a1[2873]) {
    uint64_t v6 = (char *)&xmmword_25CDA20 + 15;
  }
  if (*v6 < 0)
  {
    if (a1[2873]) {
      int v7 = (unint64_t *)&unk_25CDA08;
    }
    else {
      int v7 = (unint64_t *)&xmmword_25CDA20;
    }
    sub_4200(&__dst, *(void **)&dword_25CD580[v4], *v7);
  }
  else
  {
    long long __dst = *(_OWORD *)v5;
    uint64_t v44 = v5[2];
  }
  sub_8B4708((uint64_t)&v45, (uint64_t)&__dst, (uint64_t)&v38);
  uint64_t v8 = 306;
  if (!a1[2873]) {
    uint64_t v8 = 309;
  }
  int v9 = &qword_25CEF18;
  if (a1[2873]) {
    int v9 = &qword_25CEF00;
  }
  BOOL v10 = (char *)&unk_25CEF17;
  if (!a1[2873]) {
    BOOL v10 = (char *)&unk_25CEF2F;
  }
  if (*v10 < 0)
  {
    if (a1[2873]) {
      int v11 = (unint64_t *)&unk_25CEF08;
    }
    else {
      int v11 = (unint64_t *)&unk_25CEF20;
    }
    sub_4200(v36, (void *)qword_25CE570[v8], *v11);
  }
  else
  {
    *(_OWORD *)uint64_t v36 = *(_OWORD *)v9;
    uint64_t v37 = v9[2];
  }
  *(_OWORD *)std::string __p = 0u;
  long long v34 = 0u;
  int v35 = 1065353216;
  size_t v12 = (std::__shared_weak_count *)operator new(0x80uLL);
  v12->__shared_owners_ = 0;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
  sub_63D394((uint64_t)&v50, (uint64_t)&v12[1], (uint64_t)&v38);
  std::string::size_type v31 = &v12[1].__vftable;
  uint64_t v32 = v12;
  sub_6373D8(a2, (uint64_t)v36, (uint64_t)__p, 5, (uint64_t *)&v31);
  uint64_t v13 = v32;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = (void *)v34;
  if ((void)v34)
  {
    do
    {
      uint64_t v15 = (void *)*v14;
      sub_4F4B48((uint64_t)(v14 + 2));
      operator delete(v14);
      uint64_t v14 = v15;
    }
    while (v15);
  }
  int v16 = __p[0];
  __p[0] = 0;
  if (v16) {
    operator delete(v16);
  }
  if (SHIBYTE(v37) < 0) {
    operator delete(v36[0]);
  }
  size_t v17 = v42;
  if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  int v18 = v41;
  if (v41)
  {
    do
    {
      size_t v19 = (void *)*v18;
      sub_4F4B48((uint64_t)(v18 + 2));
      operator delete(v18);
      int v18 = v19;
    }
    while (v19);
  }
  unint64_t v20 = v40;
  uint64_t v40 = 0;
  if (v20) {
    operator delete(v20);
  }
  std::string::size_type v21 = (void **)v38;
  if (v38)
  {
    uint64_t v22 = v39;
    unint64_t v23 = v38;
    if (v39 != v38)
    {
      do
      {
        if (*((char *)v22 - 1) < 0) {
          operator delete(*(v22 - 3));
        }
        v22 -= 3;
      }
      while (v22 != v21);
      unint64_t v23 = v38;
    }
    unint64_t v39 = v21;
    operator delete(v23);
  }
  if (SHIBYTE(v44) < 0) {
    operator delete((void *)__dst);
  }
  std::string::size_type v24 = v49;
  if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  uint64_t v25 = v48;
  if (v48)
  {
    do
    {
      unint64_t v26 = (void *)*v25;
      sub_4F4B48((uint64_t)(v25 + 2));
      operator delete(v25);
      uint64_t v25 = v26;
    }
    while (v26);
  }
  int v27 = v47;
  std::string::size_type v47 = 0;
  if (v27) {
    operator delete(v27);
  }
  uint64_t v28 = v45;
  if (v45)
  {
    uint64_t v29 = v46;
    uint64_t v30 = v45;
    if (v46 != v45)
    {
      do
      {
        if (*((char *)v29 - 1) < 0) {
          operator delete(*(v29 - 3));
        }
        v29 -= 3;
      }
      while (v29 != v28);
      uint64_t v30 = v45;
    }
    uint64_t v46 = v28;
    operator delete(v30);
  }
}

void sub_8B60FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23)
{
  sub_4F31D0(&a23);
  if (*(char *)(v23 - 153) < 0) {
    operator delete(*(void **)(v23 - 176));
  }
  sub_4F31D0((void **)(v23 - 144));
  _Unwind_Resume(a1);
}

void sub_8B6188(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!*(unsigned char *)(a1 + 2873))
  {
    if (*(unsigned char *)(a1 + 2874)) {
      uint64_t v4 = &qword_25CD958;
    }
    else {
      uint64_t v4 = &qword_25CD940;
    }
    if ((*((char *)v4 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_8:
    sub_4200(&__dst, (void *)*v4, v4[1]);
    goto LABEL_9;
  }
  uint64_t v4 = (uint64_t *)&xmmword_25CD928;
  if (byte_25CD93F < 0) {
    goto LABEL_8;
  }
LABEL_3:
  long long __dst = *(_OWORD *)v4;
  uint64_t v18 = v4[2];
LABEL_9:
  sub_8B54D0(&v12, a1, 1, 0, 0);
  sub_6379F8((uint64_t *)&v12, (char *)&qword_25CD400);
  sub_8B4708((uint64_t)&v12, (uint64_t)&__dst, a2);
  uint64_t v5 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = v15;
  if (v15)
  {
    do
    {
      int v7 = (void *)*v6;
      sub_4F4B48((uint64_t)(v6 + 2));
      operator delete(v6);
      uint64_t v6 = v7;
    }
    while (v7);
  }
  uint64_t v8 = __p;
  std::string __p = 0;
  if (v8) {
    operator delete(v8);
  }
  int v9 = (void **)v12;
  if (v12)
  {
    BOOL v10 = v13;
    int v11 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      int v11 = v12;
    }
    uint64_t v13 = v9;
    operator delete(v11);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_8B632C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (*(char *)(v10 - 25) < 0) {
    operator delete(*(void **)(v10 - 48));
  }
  _Unwind_Resume(exception_object);
}

void sub_8B6358(std::string::size_type a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v5 = sub_63A8F8(a2);
  uint64_t v6 = 309;
  if (v5) {
    uint64_t v6 = 306;
  }
  int v7 = &qword_25CEF18;
  if (v5) {
    int v7 = &qword_25CEF00;
  }
  uint64_t v8 = (char *)&unk_25CEF2F;
  if (v5) {
    uint64_t v8 = (char *)&unk_25CEF17;
  }
  if (*v8 < 0)
  {
    int v9 = (void *)qword_25CE570[v6];
    uint64_t v10 = 309;
    if (v5) {
      uint64_t v10 = 306;
    }
    sub_4200(&__dst, v9, qword_25CE570[v10 + 1]);
  }
  else
  {
    long long __dst = *(_OWORD *)v7;
    uint64_t v47 = v7[2];
  }
  long long v43 = 0u;
  long long v44 = 0u;
  int v45 = 1065353216;
  int v11 = sub_897368(a1);
  sub_8B54D0(a1, 0, 0, 0, (uint64_t)v30);
  size_t v12 = (char *)operator new(0x80uLL);
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *(void *)size_t v12 = off_243A0E0;
  *(_OWORD *)(v12 + 24) = *(_OWORD *)v30;
  v30[0] = 0;
  v30[1] = 0;
  uint64_t v14 = v31;
  uint64_t v13 = __p;
  unint64_t v15 = v33;
  int v16 = v34;
  std::string __p = 0;
  unint64_t v33 = 0;
  uint64_t v31 = 0;
  *((void *)v12 + 5) = v14;
  *((void *)v12 + 6) = v13;
  *((void *)v12 + 7) = v15;
  *((void *)v12 + 8) = v16;
  uint64_t v17 = v35;
  *((void *)v12 + 9) = v35;
  *((_DWORD *)v12 + 20) = v36;
  if (v17)
  {
    unint64_t v18 = v16[1];
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v18 >= v15) {
        v18 %= v15;
      }
    }
    else
    {
      v18 &= v15 - 1;
    }
    v13[v18] = v12 + 64;
    long long v34 = 0;
    uint64_t v35 = 0;
  }
  v12[88] = v37;
  *((_DWORD *)v12 + 24) = v38;
  *(_OWORD *)(v12 + 104) = v39;
  long long v39 = 0uLL;
  *((_WORD *)v12 + 60) = v40;
  uint64_t v41 = v12 + 24;
  size_t v42 = (std::__shared_weak_count *)v12;
  sub_6373D8(a3, (uint64_t)&__dst, (uint64_t)&v43, v11, (uint64_t *)&v41);
  size_t v19 = v42;
  if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  unint64_t v20 = (std::__shared_weak_count *)*((void *)&v39 + 1);
  if (*((void *)&v39 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v39 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  std::string::size_type v21 = v34;
  if (v34)
  {
    do
    {
      uint64_t v22 = (void *)*v21;
      sub_4F4B48((uint64_t)(v21 + 2));
      operator delete(v21);
      std::string::size_type v21 = v22;
    }
    while (v22);
  }
  uint64_t v23 = __p;
  std::string __p = 0;
  if (v23) {
    operator delete(v23);
  }
  std::string::size_type v24 = (void **)v30[0];
  if (v30[0])
  {
    uint64_t v25 = (void **)v30[1];
    unint64_t v26 = v30[0];
    if (v30[1] != v30[0])
    {
      do
      {
        if (*((char *)v25 - 1) < 0) {
          operator delete(*(v25 - 3));
        }
        v25 -= 3;
      }
      while (v25 != v24);
      unint64_t v26 = v30[0];
    }
    v30[1] = v24;
    operator delete(v26);
  }
  int v27 = (void *)v44;
  if ((void)v44)
  {
    do
    {
      uint64_t v28 = (void *)*v27;
      sub_4F4B48((uint64_t)(v27 + 2));
      operator delete(v27);
      int v27 = v28;
    }
    while (v28);
  }
  uint64_t v29 = (void *)v43;
  *(void *)&long long v43 = 0;
  if (v29) {
    operator delete(v29);
  }
  if (SHIBYTE(v47) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_8B6684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  sub_14A84((uint64_t)&a23);
  sub_4F31D0(&a9);
  sub_4DD068(v23 - 112);
  if (*(char *)(v23 - 41) < 0) {
    operator delete(*(void **)(v23 - 64));
  }
  _Unwind_Resume(a1);
}

void sub_8B66CC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v5 = sub_63A8F8(a2);
  uint64_t v6 = 309;
  if (v5) {
    uint64_t v6 = 306;
  }
  int v7 = &qword_25CEF18;
  if (v5) {
    int v7 = &qword_25CEF00;
  }
  uint64_t v8 = (char *)&unk_25CEF2F;
  if (v5) {
    uint64_t v8 = (char *)&unk_25CEF17;
  }
  if (*v8 < 0)
  {
    int v9 = (void *)qword_25CE570[v6];
    uint64_t v10 = 309;
    if (v5) {
      uint64_t v10 = 306;
    }
    sub_4200(&__dst, v9, qword_25CE570[v10 + 1]);
  }
  else
  {
    long long __dst = *(_OWORD *)v7;
    uint64_t v47 = v7[2];
  }
  long long v43 = 0u;
  long long v44 = 0u;
  int v45 = 1065353216;
  int v11 = sub_897368(a1);
  (*(void (**)(void **__return_ptr, uint64_t, void, void))(*(void *)a1 + 168))(v30, a1, 0, 0);
  size_t v12 = (char *)operator new(0x80uLL);
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *(void *)size_t v12 = off_243A0E0;
  *(_OWORD *)(v12 + 24) = *(_OWORD *)v30;
  v30[0] = 0;
  v30[1] = 0;
  uint64_t v14 = v31;
  uint64_t v13 = __p;
  unint64_t v15 = v33;
  int v16 = v34;
  std::string __p = 0;
  unint64_t v33 = 0;
  uint64_t v31 = 0;
  *((void *)v12 + 5) = v14;
  *((void *)v12 + 6) = v13;
  *((void *)v12 + 7) = v15;
  *((void *)v12 + 8) = v16;
  uint64_t v17 = v35;
  *((void *)v12 + 9) = v35;
  *((_DWORD *)v12 + 20) = v36;
  if (v17)
  {
    unint64_t v18 = v16[1];
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v18 >= v15) {
        v18 %= v15;
      }
    }
    else
    {
      v18 &= v15 - 1;
    }
    v13[v18] = v12 + 64;
    long long v34 = 0;
    uint64_t v35 = 0;
  }
  v12[88] = v37;
  *((_DWORD *)v12 + 24) = v38;
  *(_OWORD *)(v12 + 104) = v39;
  long long v39 = 0uLL;
  *((_WORD *)v12 + 60) = v40;
  uint64_t v41 = v12 + 24;
  size_t v42 = (std::__shared_weak_count *)v12;
  sub_6373D8(a3, (uint64_t)&__dst, (uint64_t)&v43, v11, (uint64_t *)&v41);
  size_t v19 = v42;
  if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  unint64_t v20 = (std::__shared_weak_count *)*((void *)&v39 + 1);
  if (*((void *)&v39 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v39 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  std::string::size_type v21 = v34;
  if (v34)
  {
    do
    {
      uint64_t v22 = (void *)*v21;
      sub_4F4B48((uint64_t)(v21 + 2));
      operator delete(v21);
      std::string::size_type v21 = v22;
    }
    while (v22);
  }
  uint64_t v23 = __p;
  std::string __p = 0;
  if (v23) {
    operator delete(v23);
  }
  std::string::size_type v24 = (void **)v30[0];
  if (v30[0])
  {
    uint64_t v25 = (void **)v30[1];
    unint64_t v26 = v30[0];
    if (v30[1] != v30[0])
    {
      do
      {
        if (*((char *)v25 - 1) < 0) {
          operator delete(*(v25 - 3));
        }
        v25 -= 3;
      }
      while (v25 != v24);
      unint64_t v26 = v30[0];
    }
    v30[1] = v24;
    operator delete(v26);
  }
  int v27 = (void *)v44;
  if ((void)v44)
  {
    do
    {
      uint64_t v28 = (void *)*v27;
      sub_4F4B48((uint64_t)(v27 + 2));
      operator delete(v27);
      int v27 = v28;
    }
    while (v28);
  }
  uint64_t v29 = (void *)v43;
  *(void *)&long long v43 = 0;
  if (v29) {
    operator delete(v29);
  }
  if (SHIBYTE(v47) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_8B6A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  sub_14A84((uint64_t)&a23);
  sub_4F31D0(&a9);
  sub_4DD068(v23 - 112);
  if (*(char *)(v23 - 41) < 0) {
    operator delete(*(void **)(v23 - 64));
  }
  _Unwind_Resume(a1);
}

void sub_8B6A5C(std::string::size_type a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  sub_8B54D0(a1, 0, 0, 1, (uint64_t)&v21);
  *(_OWORD *)std::string __p = 0u;
  long long v19 = 0u;
  int v20 = 1065353216;
  LODWORD(v2) = sub_897368(v2);
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x80uLL);
  v4->__shared_owners_ = 0;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
  sub_63D394((uint64_t)&v26, (uint64_t)&v4[1], (uint64_t)&v21);
  int v16 = &v4[1].__vftable;
  uint64_t v17 = v4;
  sub_6373D8(a2, (uint64_t)&unk_25CEF30, (uint64_t)__p, v2, (uint64_t *)&v16);
  BOOL v5 = v17;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (void *)v19;
  if ((void)v19)
  {
    do
    {
      int v7 = (void *)*v6;
      sub_4F4B48((uint64_t)(v6 + 2));
      operator delete(v6);
      uint64_t v6 = v7;
    }
    while (v7);
  }
  uint64_t v8 = __p[0];
  __p[0] = 0;
  if (v8) {
    operator delete(v8);
  }
  int v9 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = v24;
  if (v24)
  {
    do
    {
      int v11 = (void *)*v10;
      sub_4F4B48((uint64_t)(v10 + 2));
      operator delete(v10);
      uint64_t v10 = v11;
    }
    while (v11);
  }
  size_t v12 = v23;
  uint64_t v23 = 0;
  if (v12) {
    operator delete(v12);
  }
  uint64_t v13 = (void **)v21;
  if (v21)
  {
    uint64_t v14 = v22;
    unint64_t v15 = v21;
    if (v22 != v21)
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      unint64_t v15 = v21;
    }
    uint64_t v22 = v13;
    operator delete(v15);
  }
}

void sub_8B6C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
}

void sub_8B6C84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  std::__shared_weak_count::~__shared_weak_count(v17);
  operator delete(v19);
  sub_4DD068((uint64_t)&a11);
  sub_4F31D0(&a17);
  _Unwind_Resume(a1);
}

void sub_8B6CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_4DD068((uint64_t)va);
  sub_4F31D0((void **)va1);
  _Unwind_Resume(a1);
}

void sub_8B6CC8(uint64_t a1@<X8>)
{
  sub_6352AC((uint64_t)&v11, (uint64_t)&qword_25CFBE0);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  sub_6370D4(a1, &v11, 1, &v9);
  uint64_t v2 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  int v3 = v14;
  if (v14)
  {
    do
    {
      uint64_t v4 = (void *)*v3;
      sub_4F4B48((uint64_t)(v3 + 2));
      operator delete(v3);
      int v3 = v4;
    }
    while (v4);
  }
  BOOL v5 = __p;
  std::string __p = 0;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = (void **)v11;
  if (v11)
  {
    uint64_t v7 = v12;
    uint64_t v8 = v11;
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      uint64_t v8 = v11;
    }
    size_t v12 = v6;
    operator delete(v8);
  }
}

void sub_8B6DDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  _Unwind_Resume(a1);
}

void sub_8B6DF8(uint64_t a1@<X8>)
{
  sub_6352AC((uint64_t)&v11, (uint64_t)&qword_25CFBF8);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  sub_6370D4(a1, &v11, 1, &v9);
  uint64_t v2 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = v14;
  if (v14)
  {
    do
    {
      uint64_t v4 = (void *)*v3;
      sub_4F4B48((uint64_t)(v3 + 2));
      operator delete(v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  uint64_t v5 = __p;
  std::string __p = 0;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = (void **)v11;
  if (v11)
  {
    uint64_t v7 = v12;
    uint64_t v8 = v11;
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      uint64_t v8 = v11;
    }
    size_t v12 = v6;
    operator delete(v8);
  }
}

void sub_8B6F0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  _Unwind_Resume(a1);
}

void sub_8B6F28(uint64_t a1@<X8>)
{
  int v2 = byte_25CFBC8[23];
  if (byte_25CFBC8[23] >= 0) {
    size_t v3 = byte_25CFBC8[23];
  }
  else {
    size_t v3 = *(void *)&byte_25CFBC8[8];
  }
  int v4 = byte_25CD72F;
  if (byte_25CD72F >= 0) {
    size_t v5 = byte_25CD72F;
  }
  else {
    size_t v5 = qword_25CD720;
  }
  unint64_t v6 = v5 + v3;
  if (v5 + v3 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v6 <= 0x16)
  {
    size_t v23 = 0;
    unint64_t v24 = 0;
    long long __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v24) = v5 + v3;
    if (!v3) {
      goto LABEL_18;
    }
    goto LABEL_14;
  }
  uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v6 | 7) != 0x17) {
    uint64_t v8 = v6 | 7;
  }
  uint64_t v9 = v8 + 1;
  p_dst = (void **)operator new(v8 + 1);
  size_t v23 = v5 + v3;
  unint64_t v24 = v9 | 0x8000000000000000;
  long long __dst = p_dst;
  if (v3)
  {
LABEL_14:
    if (v2 >= 0) {
      uint64_t v10 = byte_25CFBC8;
    }
    else {
      uint64_t v10 = *(char **)byte_25CFBC8;
    }
    memmove(p_dst, v10, v3);
  }
LABEL_18:
  int v11 = (char *)p_dst + v3;
  if (v5)
  {
    if (v4 >= 0) {
      size_t v12 = &qword_25CD718;
    }
    else {
      size_t v12 = (uint64_t *)qword_25CD718;
    }
    memmove(v11, v12, v5);
  }
  v11[v5] = 0;
  sub_6352AC((uint64_t)&v25, (uint64_t)&__dst);
  uint64_t v20 = 0;
  std::string::size_type v21 = 0;
  sub_6370D4(a1, &v25, 1, &v20);
  uint64_t v13 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = v28;
  if (v28)
  {
    do
    {
      unint64_t v15 = (void *)*v14;
      sub_4F4B48((uint64_t)(v14 + 2));
      operator delete(v14);
      uint64_t v14 = v15;
    }
    while (v15);
  }
  int v16 = __p;
  std::string __p = 0;
  if (v16) {
    operator delete(v16);
  }
  uint64_t v17 = (void **)v25;
  if (v25)
  {
    unint64_t v18 = v26;
    long long v19 = v25;
    if (v26 != v25)
    {
      do
      {
        if (*((char *)v18 - 1) < 0) {
          operator delete(*(v18 - 3));
        }
        v18 -= 3;
      }
      while (v18 != v17);
      long long v19 = v25;
    }
    char v26 = v17;
    operator delete(v19);
  }
  if (SHIBYTE(v24) < 0) {
    operator delete(__dst);
  }
}

void sub_8B7150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_8B7184(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (sub_63A998(a2))
  {
    uint64_t v93 = 0;
    long long v91 = 0u;
    long long v92 = 0u;
    long long v90 = 0u;
    int v94 = 1065353216;
    char v95 = 1;
    unsigned int v8 = sub_63A824(a2);
    std::to_string(&v87, v8);
    sub_6358F0((uint64_t)&v90, (long long *)&dword_25CFD60, &v87, &v87);
    if (byte_25CFBC8[23] < 0) {
      sub_4200(&v86, *(void **)byte_25CFBC8, *(unint64_t *)&byte_25CFBC8[8]);
    }
    else {
      std::string v86 = *(std::string *)byte_25CFBC8;
    }
    uint64_t v28 = 231;
    if (!*(unsigned char *)(a2 + 96)) {
      uint64_t v28 = 228;
    }
    uint64_t v29 = (const std::string::value_type *)&unk_25CFCA0;
    if (!*(unsigned char *)(a2 + 96)) {
      uint64_t v29 = (const std::string::value_type *)&unk_25CFC88;
    }
    uint64_t v30 = &byte_25CFC9F;
    if (*(unsigned char *)(a2 + 96)) {
      uint64_t v30 = &byte_25CFCB7;
    }
    std::string::size_type v31 = *v30;
    uint64_t v32 = qword_25CF568[v28];
    unint64_t v33 = (std::string::size_type *)&unk_25CFCA8;
    if (!*(unsigned char *)(a2 + 96)) {
      unint64_t v33 = (std::string::size_type *)&unk_25CFC90;
    }
    std::string::size_type v34 = *v33;
    if ((v31 & 0x80u) == 0) {
      uint64_t v35 = v29;
    }
    else {
      uint64_t v35 = (const std::string::value_type *)v32;
    }
    if ((v31 & 0x80u) == 0) {
      std::string::size_type v36 = v31;
    }
    else {
      std::string::size_type v36 = v34;
    }
    std::string::append(&v86, v35, v36);
    unsigned int v37 = sub_63A824(a2);
    switch(sub_64E00(v37, *(_DWORD *)(*(void *)(a1 + 1960) + 1000)))
    {
      case 0u:
        int v38 = &qword_25CFCD0;
        goto LABEL_64;
      case 1u:
        int v38 = &qword_25CFCE8;
        goto LABEL_64;
      case 2u:
        int v38 = &qword_25CFD00;
        goto LABEL_64;
      case 3u:
        int v38 = &qword_25CFD18;
        goto LABEL_64;
      case 4u:
        int v38 = &qword_25CFD30;
LABEL_64:
        int v39 = *((char *)v38 + 23);
        if (v39 >= 0) {
          __int16 v40 = (const std::string::value_type *)v38;
        }
        else {
          __int16 v40 = (const std::string::value_type *)*v38;
        }
        if (v39 >= 0) {
          std::string::size_type v41 = *((unsigned __int8 *)v38 + 23);
        }
        else {
          std::string::size_type v41 = v38[1];
        }
        std::string::append(&v86, v40, v41);
        break;
      default:
        break;
    }
    int v42 = SHIBYTE(v86.__r_.__value_.__r.__words[2]);
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v86.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v86.__r_.__value_.__l.__size_;
    }
    int v44 = byte_25CD72F;
    if (byte_25CD72F >= 0) {
      size_t v45 = byte_25CD72F;
    }
    else {
      size_t v45 = qword_25CD720;
    }
    unint64_t v46 = v45 + size;
    if (v45 + size > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v46 > 0x16)
    {
      uint64_t v66 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v46 | 7) != 0x17) {
        uint64_t v66 = v46 | 7;
      }
      uint64_t v67 = v66 + 1;
      p_dst = (void **)operator new(v66 + 1);
      uint64_t v82 = (void **)(v45 + size);
      unint64_t v83 = v67 | 0x8000000000000000;
      long long __dst = p_dst;
      if (!size)
      {
LABEL_84:
        long long v49 = (char *)p_dst + size;
        if (v45)
        {
          if (v44 >= 0) {
            char v50 = &qword_25CD718;
          }
          else {
            char v50 = (uint64_t *)qword_25CD718;
          }
          memmove(v49, v50, v45);
        }
        v49[v45] = 0;
        sub_635560((uint64_t)&v90, (uint64_t)&__dst);
        if (SHIBYTE(v83) < 0)
        {
          operator delete(__dst);
          if (a3)
          {
LABEL_91:
            int v51 = byte_25CFCCF;
            if (byte_25CFCCF >= 0) {
              size_t v52 = byte_25CFCCF;
            }
            else {
              size_t v52 = qword_25CFCC0;
            }
            int v53 = byte_25CD72F;
            if (byte_25CD72F >= 0) {
              size_t v54 = byte_25CD72F;
            }
            else {
              size_t v54 = qword_25CD720;
            }
            unint64_t v55 = v54 + v52;
            if (v54 + v52 > 0x7FFFFFFFFFFFFFF7) {
              sub_188D690();
            }
            if (v55 > 0x16)
            {
              uint64_t v69 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v55 | 7) != 0x17) {
                uint64_t v69 = v55 | 7;
              }
              uint64_t v70 = v69 + 1;
              p_p = (char *)operator new(v69 + 1);
              size_t v79 = v54 + v52;
              unint64_t v80 = v70 | 0x8000000000000000;
              std::string __p = p_p;
              if (!v52) {
                goto LABEL_104;
              }
            }
            else
            {
              size_t v79 = 0;
              unint64_t v80 = 0;
              std::string __p = 0;
              p_p = (char *)&__p;
              HIBYTE(v80) = v54 + v52;
              if (!v52)
              {
LABEL_104:
                unint64_t v58 = &p_p[v52];
                if (v54)
                {
                  if (v53 >= 0) {
                    unint64_t v59 = &qword_25CD718;
                  }
                  else {
                    unint64_t v59 = (uint64_t *)qword_25CD718;
                  }
                  memmove(v58, v59, v54);
                }
                v58[v54] = 0;
                sub_6352AC((uint64_t)&__dst, (uint64_t)&__p);
                if (SHIBYTE(v80) < 0) {
                  operator delete(__p);
                }
                sub_6376A0(a4, &v90, 14, &__dst, 1);
                char v60 = v85;
                if (v85)
                {
                  do
                  {
                    char v61 = (void *)*v60;
                    sub_4F4B48((uint64_t)(v60 + 2));
                    operator delete(v60);
                    char v60 = v61;
                  }
                  while (v61);
                }
                uint64_t v62 = v84;
                char v84 = 0;
                if (v62) {
                  operator delete(v62);
                }
                char v63 = __dst;
                if (__dst)
                {
                  char v64 = v82;
                  std::string::size_type v65 = __dst;
                  if (v82 != __dst)
                  {
                    do
                    {
                      if (*((char *)v64 - 1) < 0) {
                        operator delete(*(v64 - 3));
                      }
                      v64 -= 3;
                    }
                    while (v64 != v63);
                    std::string::size_type v65 = __dst;
                  }
                  uint64_t v82 = v63;
                  operator delete(v65);
                }
                goto LABEL_135;
              }
            }
            if (v51 >= 0) {
              uint64_t v57 = &qword_25CFCB8;
            }
            else {
              uint64_t v57 = (uint64_t *)qword_25CFCB8;
            }
            memmove(p_p, v57, v52);
            goto LABEL_104;
          }
        }
        else if (a3)
        {
          goto LABEL_91;
        }
        uint64_t v76 = 0;
        char v77 = 0;
        sub_6370D4(a4, &v90, 1, &v76);
        uint64_t v68 = v77;
        if (v77 && !atomic_fetch_add(&v77->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
LABEL_135:
        if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v86.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_137:
            int v71 = (void *)*((void *)&v92 + 1);
            if (!*((void *)&v92 + 1)) {
              goto LABEL_139;
            }
            do
            {
LABEL_138:
              long long v72 = (void *)*v71;
              sub_4F4B48((uint64_t)(v71 + 2));
              operator delete(v71);
              int v71 = v72;
            }
            while (v72);
LABEL_139:
            __int16 v73 = (void *)*((void *)&v91 + 1);
            *((void *)&v91 + 1) = 0;
            if (v73) {
              operator delete(v73);
            }
            uint64_t v74 = v90;
            if ((void)v90)
            {
              uint64_t v75 = *((void *)&v90 + 1);
              int v27 = (void **)v90;
              if (*((void *)&v90 + 1) != (void)v90)
              {
                do
                {
                  if (*(char *)(v75 - 1) < 0) {
                    operator delete(*(void **)(v75 - 24));
                  }
                  v75 -= 24;
                }
                while (v75 != v74);
                int v27 = (void **)v90;
              }
              *((void *)&v90 + 1) = v74;
              goto LABEL_149;
            }
            return;
          }
        }
        else if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_137;
        }
        operator delete(v87.__r_.__value_.__l.__data_);
        int v71 = (void *)*((void *)&v92 + 1);
        if (!*((void *)&v92 + 1)) {
          goto LABEL_139;
        }
        goto LABEL_138;
      }
    }
    else
    {
      uint64_t v82 = 0;
      unint64_t v83 = 0;
      long long __dst = 0;
      p_dst = (void **)&__dst;
      HIBYTE(v83) = v45 + size;
      if (!size) {
        goto LABEL_84;
      }
    }
    if (v42 >= 0) {
      long long v48 = &v86;
    }
    else {
      long long v48 = (std::string *)v86.__r_.__value_.__r.__words[0];
    }
    memmove(p_dst, v48, size);
    goto LABEL_84;
  }
  int v9 = byte_25CFBC8[23];
  if (byte_25CFBC8[23] >= 0) {
    size_t v10 = byte_25CFBC8[23];
  }
  else {
    size_t v10 = *(void *)&byte_25CFBC8[8];
  }
  int v11 = byte_25CD72F;
  if (byte_25CD72F >= 0) {
    size_t v12 = byte_25CD72F;
  }
  else {
    size_t v12 = qword_25CD720;
  }
  unint64_t v13 = v12 + v10;
  if (v12 + v10 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v13 <= 0x16)
  {
    uint64_t v82 = 0;
    unint64_t v83 = 0;
    long long __dst = 0;
    uint64_t v14 = (void **)&__dst;
    HIBYTE(v83) = v12 + v10;
    if (!v10) {
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  uint64_t v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v13 | 7) != 0x17) {
    uint64_t v15 = v13 | 7;
  }
  uint64_t v16 = v15 + 1;
  uint64_t v14 = (void **)operator new(v15 + 1);
  uint64_t v82 = (void **)(v12 + v10);
  unint64_t v83 = v16 | 0x8000000000000000;
  long long __dst = v14;
  if (v10)
  {
LABEL_17:
    if (v9 >= 0) {
      uint64_t v17 = byte_25CFBC8;
    }
    else {
      uint64_t v17 = *(char **)byte_25CFBC8;
    }
    memmove(v14, v17, v10);
  }
LABEL_21:
  unint64_t v18 = (char *)v14 + v10;
  if (v12)
  {
    if (v11 >= 0) {
      long long v19 = &qword_25CD718;
    }
    else {
      long long v19 = (uint64_t *)qword_25CD718;
    }
    memmove(v18, v19, v12);
  }
  v18[v12] = 0;
  sub_6352AC((uint64_t)&v90, (uint64_t)&__dst);
  uint64_t v88 = 0;
  int v89 = 0;
  sub_6370D4(a4, &v90, 1, &v88);
  uint64_t v20 = v89;
  if (v89 && !atomic_fetch_add(&v89->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  std::string::size_type v21 = (void *)*((void *)&v92 + 1);
  if (*((void *)&v92 + 1))
  {
    do
    {
      uint64_t v22 = (void *)*v21;
      sub_4F4B48((uint64_t)(v21 + 2));
      operator delete(v21);
      std::string::size_type v21 = v22;
    }
    while (v22);
  }
  size_t v23 = (void *)*((void *)&v91 + 1);
  *((void *)&v91 + 1) = 0;
  if (v23) {
    operator delete(v23);
  }
  uint64_t v24 = v90;
  if ((void)v90)
  {
    uint64_t v25 = *((void *)&v90 + 1);
    char v26 = (void *)v90;
    if (*((void *)&v90 + 1) != (void)v90)
    {
      do
      {
        if (*(char *)(v25 - 1) < 0) {
          operator delete(*(void **)(v25 - 24));
        }
        v25 -= 24;
      }
      while (v25 != v24);
      char v26 = (void *)v90;
    }
    *((void *)&v90 + 1) = v24;
    operator delete(v26);
  }
  if (SHIBYTE(v83) < 0)
  {
    int v27 = __dst;
LABEL_149:
    operator delete(v27);
  }
}

void sub_8B7918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  sub_4D4880((void **)(v41 - 160));
  _Unwind_Resume(a1);
}

void sub_8B7A08(uint64_t a1@<X8>)
{
  sub_6352AC((uint64_t)&v11, (uint64_t)&qword_25CFC58);
  uint64_t v9 = 0;
  size_t v10 = 0;
  sub_6370D4(a1, &v11, 1, &v9);
  int v2 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  size_t v3 = v14;
  if (v14)
  {
    do
    {
      int v4 = (void *)*v3;
      sub_4F4B48((uint64_t)(v3 + 2));
      operator delete(v3);
      size_t v3 = v4;
    }
    while (v4);
  }
  size_t v5 = __p;
  std::string __p = 0;
  if (v5) {
    operator delete(v5);
  }
  unint64_t v6 = (void **)v11;
  if (v11)
  {
    uint64_t v7 = v12;
    unsigned int v8 = v11;
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      unsigned int v8 = v11;
    }
    size_t v12 = v6;
    operator delete(v8);
  }
}

void sub_8B7B1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  _Unwind_Resume(a1);
}

void sub_8B7B38(uint64_t a1@<X8>)
{
  sub_6352AC((uint64_t)&v11, (uint64_t)&unk_25CFC70);
  uint64_t v9 = 0;
  size_t v10 = 0;
  sub_6370D4(a1, &v11, 1, &v9);
  int v2 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = v14;
  if (v14)
  {
    do
    {
      int v4 = (void *)*v3;
      sub_4F4B48((uint64_t)(v3 + 2));
      operator delete(v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  uint64_t v5 = __p;
  std::string __p = 0;
  if (v5) {
    operator delete(v5);
  }
  unint64_t v6 = (void **)v11;
  if (v11)
  {
    uint64_t v7 = v12;
    unsigned int v8 = v11;
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      unsigned int v8 = v11;
    }
    size_t v12 = v6;
    operator delete(v8);
  }
}

void sub_8B7C4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  _Unwind_Resume(a1);
}

void sub_8B7C68(uint64_t a1@<X8>)
{
  sub_6352AC((uint64_t)&v11, (uint64_t)&qword_25CFC10);
  uint64_t v9 = 0;
  size_t v10 = 0;
  sub_6370D4(a1, &v11, 1, &v9);
  int v2 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = v14;
  if (v14)
  {
    do
    {
      int v4 = (void *)*v3;
      sub_4F4B48((uint64_t)(v3 + 2));
      operator delete(v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  uint64_t v5 = __p;
  std::string __p = 0;
  if (v5) {
    operator delete(v5);
  }
  unint64_t v6 = (void **)v11;
  if (v11)
  {
    uint64_t v7 = v12;
    unsigned int v8 = v11;
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      unsigned int v8 = v11;
    }
    size_t v12 = v6;
    operator delete(v8);
  }
}

void sub_8B7D7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  _Unwind_Resume(a1);
}

void sub_8B7D98(uint64_t a1@<X8>)
{
  sub_6352AC((uint64_t)&v11, (uint64_t)&qword_25CFC28);
  uint64_t v9 = 0;
  size_t v10 = 0;
  sub_6370D4(a1, &v11, 1, &v9);
  int v2 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = v14;
  if (v14)
  {
    do
    {
      int v4 = (void *)*v3;
      sub_4F4B48((uint64_t)(v3 + 2));
      operator delete(v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  uint64_t v5 = __p;
  std::string __p = 0;
  if (v5) {
    operator delete(v5);
  }
  unint64_t v6 = (void **)v11;
  if (v11)
  {
    uint64_t v7 = v12;
    unsigned int v8 = v11;
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      unsigned int v8 = v11;
    }
    size_t v12 = v6;
    operator delete(v8);
  }
}

void sub_8B7EAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  _Unwind_Resume(a1);
}

void sub_8B7EC8(uint64_t a1@<X8>)
{
  sub_6352AC((uint64_t)&v11, (uint64_t)&qword_25CFC40);
  uint64_t v9 = 0;
  size_t v10 = 0;
  sub_6370D4(a1, &v11, 1, &v9);
  int v2 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = v14;
  if (v14)
  {
    do
    {
      int v4 = (void *)*v3;
      sub_4F4B48((uint64_t)(v3 + 2));
      operator delete(v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  uint64_t v5 = __p;
  std::string __p = 0;
  if (v5) {
    operator delete(v5);
  }
  unint64_t v6 = (void **)v11;
  if (v11)
  {
    uint64_t v7 = v12;
    unsigned int v8 = v11;
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      unsigned int v8 = v11;
    }
    size_t v12 = v6;
    operator delete(v8);
  }
}

void sub_8B7FDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  _Unwind_Resume(a1);
}

void sub_8B7FF8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 168))(&v26);
  sub_8B82A4(a2, (uint64_t)&v22);
  uint64_t v5 = (std::__shared_weak_count *)operator new(0x80uLL);
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
  sub_63D394((uint64_t)&v31, (uint64_t)&v5[1], (uint64_t)&v26);
  uint64_t v20 = &v5[1].__vftable;
  std::string::size_type v21 = v5;
  sub_6370D4(a3, &v22, 5, &v20);
  unint64_t v6 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = v25;
  if (v25)
  {
    do
    {
      unsigned int v8 = (void *)*v7;
      sub_4F4B48((uint64_t)(v7 + 2));
      operator delete(v7);
      uint64_t v7 = v8;
    }
    while (v8);
  }
  uint64_t v9 = __p;
  std::string __p = 0;
  if (v9) {
    operator delete(v9);
  }
  size_t v10 = (void **)v22;
  if (v22)
  {
    int v11 = v23;
    size_t v12 = v22;
    if (v23 != v22)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != v10);
      size_t v12 = v22;
    }
    size_t v23 = v10;
    operator delete(v12);
  }
  unint64_t v13 = v30;
  if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = v29;
  if (v29)
  {
    do
    {
      uint64_t v15 = (void *)*v14;
      sub_4F4B48((uint64_t)(v14 + 2));
      operator delete(v14);
      uint64_t v14 = v15;
    }
    while (v15);
  }
  uint64_t v16 = v28;
  uint64_t v28 = 0;
  if (v16) {
    operator delete(v16);
  }
  uint64_t v17 = (void **)v26;
  if (v26)
  {
    unint64_t v18 = v27;
    long long v19 = v26;
    if (v27 != v26)
    {
      do
      {
        if (*((char *)v18 - 1) < 0) {
          operator delete(*(v18 - 3));
        }
        v18 -= 3;
      }
      while (v18 != v17);
      long long v19 = v26;
    }
    int v27 = v17;
    operator delete(v19);
  }
}

void sub_8B8250(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  unint64_t v6 = va_arg(va2, void *);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  sub_4F31D0((void **)va2);
  _Unwind_Resume(a1);
}

void sub_8B8290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_8B82A4(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v4 = *(unsigned __int8 *)(a1 + 180);
  uint64_t v5 = 2280;
  if (!*(unsigned char *)(a1 + 182)) {
    uint64_t v5 = 2256;
  }
  unint64_t v6 = &qword_25CCE60;
  if (*(unsigned char *)(a1 + 182)) {
    unint64_t v6 = (uint64_t *)&xmmword_25CCE78;
  }
  uint64_t v7 = 2232;
  if (*(unsigned char *)(a1 + 180))
  {
    uint64_t v8 = &qword_25CCE48;
  }
  else
  {
    uint64_t v7 = v5;
    uint64_t v8 = v6;
  }
  if (*((char *)v8 + 23) < 0) {
    sub_4200(&__p, *(void **)((char *)&word_25CC590 + v7), v8[1]);
  }
  else {
    std::string __p = *(std::string *)v8;
  }
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 56) = 1065353216;
  *(unsigned char *)(a2 + 64) = 1;
  if (v4 && sub_63ACAC(a1))
  {
    if (byte_25CCEBF >= 0) {
      uint64_t v9 = (const std::string::value_type *)&qword_25CCEA8;
    }
    else {
      uint64_t v9 = (const std::string::value_type *)qword_25CCEA8;
    }
    if (byte_25CCEBF >= 0) {
      std::string::size_type v10 = byte_25CCEBF;
    }
    else {
      std::string::size_type v10 = unk_25CCEB0;
    }
    std::string::append(&__p, v9, v10);
    sub_635C08(a2, &xmmword_25CEB58, a1 + 8, 0);
  }
  if (byte_25CD7A7 >= 0) {
    uint64_t v11 = (const std::string::value_type *)&qword_25CD790;
  }
  else {
    uint64_t v11 = (const std::string::value_type *)qword_25CD790;
  }
  if (byte_25CD7A7 >= 0) {
    std::string::size_type v12 = byte_25CD7A7;
  }
  else {
    std::string::size_type v12 = qword_25CD798;
  }
  std::string::append(&__p, v11, v12);
  sub_6351E8((char **)a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_8B8410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  sub_4D4880(v14);
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_8B8434(std::string::size_type a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_8B54D0(a1, 0, 0, 0, (uint64_t)&v28);
  sub_8B82A4(a2, (uint64_t)&v24);
  uint64_t v6 = sub_897368(a1);
  uint64_t v7 = (std::__shared_weak_count *)operator new(0x80uLL);
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
  sub_63D394((uint64_t)&v33, (uint64_t)&v7[1], (uint64_t)&v28);
  uint64_t v22 = &v7[1].__vftable;
  size_t v23 = v7;
  sub_6370D4(a3, &v24, v6, &v22);
  uint64_t v8 = v23;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = v27;
  if (v27)
  {
    do
    {
      std::string::size_type v10 = (void *)*v9;
      sub_4F4B48((uint64_t)(v9 + 2));
      operator delete(v9);
      uint64_t v9 = v10;
    }
    while (v10);
  }
  uint64_t v11 = __p;
  std::string __p = 0;
  if (v11) {
    operator delete(v11);
  }
  std::string::size_type v12 = (void **)v24;
  if (v24)
  {
    uint64_t v13 = v25;
    uint64_t v14 = v24;
    if (v25 != v24)
    {
      do
      {
        if (*((char *)v13 - 1) < 0) {
          operator delete(*(v13 - 3));
        }
        v13 -= 3;
      }
      while (v13 != v12);
      uint64_t v14 = v24;
    }
    uint64_t v25 = v12;
    operator delete(v14);
  }
  uint64_t v15 = v32;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = v31;
  if (v31)
  {
    do
    {
      uint64_t v17 = (void *)*v16;
      sub_4F4B48((uint64_t)(v16 + 2));
      operator delete(v16);
      uint64_t v16 = v17;
    }
    while (v17);
  }
  unint64_t v18 = v30;
  uint64_t v30 = 0;
  if (v18) {
    operator delete(v18);
  }
  long long v19 = (void **)v28;
  if (v28)
  {
    uint64_t v20 = v29;
    std::string::size_type v21 = v28;
    if (v29 != v28)
    {
      do
      {
        if (*((char *)v20 - 1) < 0) {
          operator delete(*(v20 - 3));
        }
        v20 -= 3;
      }
      while (v20 != v19);
      std::string::size_type v21 = v28;
    }
    uint64_t v29 = v19;
    operator delete(v21);
  }
}

void sub_8B8684(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void *);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  sub_4F31D0((void **)va2);
  _Unwind_Resume(a1);
}

void sub_8B86A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  std::__shared_weak_count::~__shared_weak_count(v21);
  operator delete(v23);
  sub_4D4880(&a12);
  sub_4F31D0(&a21);
  _Unwind_Resume(a1);
}

void sub_8B86D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_8B86E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void *);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_4D4880((void **)va);
  sub_4F31D0((void **)va1);
  _Unwind_Resume(a1);
}

void sub_8B8700(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)(a1 + 1945))
  {
    uint64_t v7 = (int *)&xmmword_25CFD78;
    if ((byte_25CFD8F & 0x80000000) == 0)
    {
LABEL_3:
      *(_OWORD *)std::string::size_type v36 = *(_OWORD *)v7;
      uint64_t v37 = *((void *)v7 + 2);
      goto LABEL_9;
    }
  }
  else
  {
    if (*(unsigned char *)(a1 + 1946)) {
      uint64_t v7 = &dword_25CFDC0;
    }
    else {
      uint64_t v7 = &dword_25CFDA8;
    }
    if ((*((char *)v7 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  sub_4200(v36, *(void **)v7, *((void *)v7 + 1));
LABEL_9:
  int v8 = SHIBYTE(v37);
  if (v37 >= 0) {
    size_t v9 = HIBYTE(v37);
  }
  else {
    size_t v9 = (size_t)v36[1];
  }
  int v10 = byte_25CD7A7;
  if (byte_25CD7A7 >= 0) {
    size_t v11 = byte_25CD7A7;
  }
  else {
    size_t v11 = qword_25CD798;
  }
  unint64_t v12 = v11 + v9;
  if (v11 + v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v12 <= 0x16)
  {
    size_t v34 = 0;
    unint64_t v35 = 0;
    long long __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v35) = v11 + v9;
    if (!v9) {
      goto LABEL_22;
    }
    goto LABEL_18;
  }
  uint64_t v25 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v12 | 7) != 0x17) {
    uint64_t v25 = v12 | 7;
  }
  uint64_t v26 = v25 + 1;
  p_dst = (void **)operator new(v25 + 1);
  size_t v34 = v11 + v9;
  unint64_t v35 = v26 | 0x8000000000000000;
  long long __dst = p_dst;
  if (v9)
  {
LABEL_18:
    if (v8 >= 0) {
      uint64_t v14 = v36;
    }
    else {
      uint64_t v14 = (void **)v36[0];
    }
    memmove(p_dst, v14, v9);
  }
LABEL_22:
  uint64_t v15 = (char *)p_dst + v9;
  if (v11)
  {
    if (v10 >= 0) {
      uint64_t v16 = &qword_25CD790;
    }
    else {
      uint64_t v16 = (uint64_t *)qword_25CD790;
    }
    memmove(v15, v16, v11);
  }
  v15[v11] = 0;
  sub_6352AC((uint64_t)&v29, (uint64_t)&__dst);
  uint64_t v17 = (std::__shared_weak_count *)a2[1];
  uint64_t v27 = *a2;
  uint64_t v28 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_6370D4(a4, &v29, a3, &v27);
  unint64_t v18 = v28;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  long long v19 = v32;
  if (v32)
  {
    do
    {
      uint64_t v20 = (void *)*v19;
      sub_4F4B48((uint64_t)(v19 + 2));
      operator delete(v19);
      long long v19 = v20;
    }
    while (v20);
  }
  std::string::size_type v21 = __p;
  std::string __p = 0;
  if (v21) {
    operator delete(v21);
  }
  uint64_t v22 = (void **)v29;
  if (v29)
  {
    size_t v23 = v30;
    uint64_t v24 = v29;
    if (v30 != v29)
    {
      do
      {
        if (*((char *)v23 - 1) < 0) {
          operator delete(*(v23 - 3));
        }
        v23 -= 3;
      }
      while (v23 != v22);
      uint64_t v24 = v29;
    }
    uint64_t v30 = v22;
    operator delete(v24);
  }
  if ((SHIBYTE(v35) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v37) & 0x80000000) == 0) {
      return;
    }
LABEL_52:
    operator delete(v36[0]);
    return;
  }
  operator delete(__dst);
  if (SHIBYTE(v37) < 0) {
    goto LABEL_52;
  }
}

void sub_8B89B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a25 < 0)
  {
    operator delete(__p);
    if ((a31 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else if ((a31 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a26);
  _Unwind_Resume(a1);
}

void sub_8B8A1C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (byte_25CFFB8[23] < 0) {
    sub_4200(&__dst, *(void **)byte_25CFFB8, *(unint64_t *)&byte_25CFFB8[8]);
  }
  else {
    std::string __dst = *(std::string *)byte_25CFFB8;
  }
  long long v47 = 0u;
  long long v48 = 0u;
  int v49 = 1065353216;
  if (sub_6F2FD8(a1 + 760))
  {
    if (byte_25CD3E7 >= 0) {
      int v4 = (const std::string::value_type *)&xmmword_25CD3D0;
    }
    else {
      int v4 = (const std::string::value_type *)xmmword_25CD3D0;
    }
    if (byte_25CD3E7 >= 0) {
      std::string::size_type v5 = byte_25CD3E7;
    }
    else {
      std::string::size_type v5 = *((void *)&xmmword_25CD3D0 + 1);
    }
    std::string::append(&__dst, v4, v5);
    long long v43 = &xmmword_25CE600;
    uint64_t v6 = sub_617978((uint64_t)&v47, (uint64_t)&xmmword_25CE600, (uint64_t)&unk_20F06E0, (long long **)&v43);
    std::string::operator=((std::string *)(v6 + 5), (const std::string *)(a1 + 760));
    v6[8] = *(void *)(a1 + 784);
    std::string::operator=((std::string *)v6 + 3, (const std::string *)(a1 + 792));
    v6[12] = *(void *)(a1 + 816);
    *((_DWORD *)v6 + 26) = *(_DWORD *)(a1 + 824);
    std::string::operator=((std::string *)(v6 + 14), (const std::string *)(a1 + 832));
    std::string::operator=((std::string *)(v6 + 17), (const std::string *)(a1 + 856));
    *((_DWORD *)v6 + 40) = *(_DWORD *)(a1 + 880);
    std::string::operator=((std::string *)v6 + 7, (const std::string *)(a1 + 888));
  }
  if (byte_25CD7A7 >= 0) {
    uint64_t v7 = (const std::string::value_type *)&qword_25CD790;
  }
  else {
    uint64_t v7 = (const std::string::value_type *)qword_25CD790;
  }
  if (byte_25CD7A7 >= 0) {
    std::string::size_type v8 = byte_25CD7A7;
  }
  else {
    std::string::size_type v8 = qword_25CD798;
  }
  std::string::append(&__dst, v7, v8);
  sub_63531C((uint64_t)&v43, (uint64_t)&__dst, (uint64_t)&v47);
  __int16 v40 = 0;
  uint64_t v41 = 0;
  unint64_t v42 = 0;
  size_t v34 = 0;
  unint64_t v35 = 0;
  uint64_t v36 = 0;
  sub_8A6F8((char *)&v34, *(void *)(a1 + 80), *(void *)(a1 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3));
  sub_5954B0((uint64_t)&v37, a1 + 104);
  char v39 = *(unsigned char *)(a1 + 144);
  size_t v9 = (long long **)nullsub_1(&v34);
  int v10 = *v9;
  size_t v11 = v9[1];
  while (v10 != v11)
  {
    if (*((char *)v10 + 23) < 0)
    {
      sub_4200(&__p, *(void **)v10, *((void *)v10 + 1));
    }
    else
    {
      long long v12 = *v10;
      __p.__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
    }
    sub_625E4(&__p, (char *)&qword_25CD790, (uint64_t)&dword_25CD808);
    uint64_t v13 = v41;
    if ((unint64_t)v41 >= v42)
    {
      uint64_t v41 = sub_1D740((char **)&v40, (uint64_t)&__p);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_19;
      }
      goto LABEL_29;
    }
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      long long v14 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *((void *)v41 + 2) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v13 = v14;
      uint64_t v41 = v13 + 24;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_19;
      }
LABEL_29:
      operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_19;
    }
    sub_4200(v41, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    uint64_t v41 = v13 + 24;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_29;
    }
LABEL_19:
    int v10 = (long long *)((char *)v10 + 24);
  }
  sub_6353B4((uint64_t)&v34, (std::string **)&v40);
  sub_6376A0(a2, &v43, 6, &v34, 1);
  uint64_t v15 = v38;
  if (v38)
  {
    do
    {
      uint64_t v16 = (void *)*v15;
      sub_4F4B48((uint64_t)(v15 + 2));
      operator delete(v15);
      uint64_t v15 = v16;
    }
    while (v16);
  }
  uint64_t v17 = v37;
  uint64_t v37 = 0;
  if (v17) {
    operator delete(v17);
  }
  unint64_t v18 = (void **)v34;
  if (v34)
  {
    long long v19 = v35;
    uint64_t v20 = v34;
    if (v35 != v34)
    {
      do
      {
        if (*((char *)v19 - 1) < 0) {
          operator delete(*(v19 - 3));
        }
        v19 -= 3;
      }
      while (v19 != v18);
      uint64_t v20 = v34;
    }
    unint64_t v35 = v18;
    operator delete(v20);
  }
  std::string::size_type v21 = (char *)v40;
  if (v40)
  {
    uint64_t v22 = v41;
    size_t v23 = v40;
    if (v41 != v40)
    {
      do
      {
        if (*(v22 - 1) < 0) {
          operator delete(*((void **)v22 - 3));
        }
        v22 -= 24;
      }
      while (v22 != v21);
      size_t v23 = v40;
    }
    uint64_t v41 = v21;
    operator delete(v23);
  }
  uint64_t v24 = v46;
  if (v46)
  {
    do
    {
      uint64_t v25 = (void *)*v24;
      sub_4F4B48((uint64_t)(v24 + 2));
      operator delete(v24);
      uint64_t v24 = v25;
    }
    while (v25);
  }
  uint64_t v26 = v45;
  size_t v45 = 0;
  if (v26) {
    operator delete(v26);
  }
  uint64_t v27 = (void **)v43;
  if (v43)
  {
    uint64_t v28 = v44;
    uint64_t v29 = v43;
    if (v44 != v43)
    {
      do
      {
        if (*((char *)v28 - 1) < 0) {
          operator delete(*(v28 - 3));
        }
        v28 -= 3;
      }
      while (v28 != v27);
      uint64_t v29 = v43;
    }
    int v44 = v27;
    operator delete(v29);
  }
  uint64_t v30 = (void *)v48;
  if ((void)v48)
  {
    do
    {
      char v31 = (void *)*v30;
      sub_4F4B48((uint64_t)(v30 + 2));
      operator delete(v30);
      uint64_t v30 = v31;
    }
    while (v31);
  }
  uint64_t v32 = (void *)v47;
  *(void *)&long long v47 = 0;
  if (v32) {
    operator delete(v32);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_8B8E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27)
{
  sub_4D4880((void **)&a15);
  sub_1A668(&a24);
  sub_4D4880(&a27);
  sub_4DD068(v27 - 128);
  if (*(char *)(v27 - 57) < 0) {
    operator delete(*(void **)(v27 - 80));
  }
  _Unwind_Resume(a1);
}

void sub_8B8F08(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  if (*(unsigned char *)(a1 + 1856)) {
    sub_8B8F18(a1, a2, a3, a4, (uint64_t)a5);
  }
  else {
    sub_8BA2A4((unsigned char *)a1, a2, a3, a4, a5);
  }
}

void sub_8B8F18(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  sub_81650C(a1, a2, a3, (uint64_t)&v187);
  uint64_t v180 = 0;
  long long v178 = 0u;
  long long v179 = 0u;
  long long v177 = 0u;
  int v181 = 1065353216;
  char v182 = 1;
  uint64_t v184 = 0;
  v185 = 0;
  __int16 v186 = 0;
  if (*(unsigned char *)(a1 + 2875) || *(unsigned char *)(a1 + 2876))
  {
    size_t v11 = (long long **)*((void *)&v187 + 1);
    int v10 = (long long **)v187;
    if ((void)v187 != *((void *)&v187 + 1))
    {
      do
      {
        sub_8BEA48((uint64_t)&v169, v10);
        v10 += 13;
      }
      while (v10 != v11);
      int v10 = (long long **)v187;
    }
    int v12 = *(unsigned __int8 *)(a1 + 1859);
    uint64_t v13 = (std::__shared_weak_count *)operator new(0x80uLL);
    v13->__shared_owners_ = 0;
    v13->__shared_weak_owners_ = 0;
    v13->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
    sub_59540C((uint64_t)&v142, (uint64_t)&v13[1], (uint64_t)v10);
    v167 = &v13[1].__vftable;
    v168 = v13;
    if (v12) {
      uint64_t v14 = 5;
    }
    else {
      uint64_t v14 = 10;
    }
    sub_8B8700(a1, (uint64_t *)&v167, v14, (uint64_t)&v169);
    sub_63DAA4((uint64_t)&v177, (uint64_t)&v169);
    uint64_t v15 = v176;
    if (v176 && !atomic_fetch_add(&v176->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    uint64_t v16 = v172;
    if (v172)
    {
      do
      {
        uint64_t v17 = (void *)*v16;
        sub_4F4B48((uint64_t)(v16 + 2));
        operator delete(v16);
        uint64_t v16 = v17;
      }
      while (v17);
    }
    unint64_t v18 = __p;
    std::string __p = 0;
    if (v18) {
      operator delete(v18);
    }
    std::string::size_type v19 = v169.__r_.__value_.__r.__words[0];
    if (v169.__r_.__value_.__r.__words[0])
    {
      std::string::size_type size = v169.__r_.__value_.__l.__size_;
      std::string::size_type v21 = (void *)v169.__r_.__value_.__r.__words[0];
      if (v169.__r_.__value_.__l.__size_ != v169.__r_.__value_.__r.__words[0])
      {
        do
        {
          if (*(char *)(size - 1) < 0) {
            operator delete(*(void **)(size - 24));
          }
          size -= 24;
        }
        while (size != v19);
        std::string::size_type v21 = (void *)v169.__r_.__value_.__r.__words[0];
      }
      v169.__r_.__value_.__l.__size_ = v19;
      operator delete(v21);
    }
    uint64_t v22 = v168;
    if (v168 && !atomic_fetch_add(&v168->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
    sub_89F5A4((uint64_t *)&v187, v187, (unint64_t)&v177);
  }
  if (*(unsigned char *)(a1 + 1862))
  {
    sub_8B8A1C(a1, (uint64_t)&v169);
    sub_63DAA4((uint64_t)&v177, (uint64_t)&v169);
    size_t v23 = v176;
    if (v176 && !atomic_fetch_add(&v176->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    uint64_t v24 = v172;
    if (v172)
    {
      do
      {
        uint64_t v25 = (void *)*v24;
        sub_4F4B48((uint64_t)(v24 + 2));
        operator delete(v24);
        uint64_t v24 = v25;
      }
      while (v25);
    }
    uint64_t v26 = __p;
    std::string __p = 0;
    if (v26) {
      operator delete(v26);
    }
    std::string::size_type v27 = v169.__r_.__value_.__r.__words[0];
    if (v169.__r_.__value_.__r.__words[0])
    {
      std::string::size_type v28 = v169.__r_.__value_.__l.__size_;
      uint64_t v29 = (void *)v169.__r_.__value_.__r.__words[0];
      if (v169.__r_.__value_.__l.__size_ != v169.__r_.__value_.__r.__words[0])
      {
        do
        {
          if (*(char *)(v28 - 1) < 0) {
            operator delete(*(void **)(v28 - 24));
          }
          v28 -= 24;
        }
        while (v28 != v27);
        uint64_t v29 = (void *)v169.__r_.__value_.__r.__words[0];
      }
      v169.__r_.__value_.__l.__size_ = v27;
      operator delete(v29);
    }
    sub_89F5A4((uint64_t *)&v187, v187, (unint64_t)&v177);
  }
  uint64_t v30 = *(void *)(a1 + 1952);
  uint64_t v31 = *(void *)(a1 + 1960);
  int v32 = *(_DWORD *)(a1 + 2128);
  char v33 = (std::__shared_weak_count *)operator new(0xB98uLL);
  int v34 = v32 - 1;
  v33->__shared_owners_ = 0;
  v33->__shared_weak_owners_ = 0;
  v33->__vftable = (std::__shared_weak_count_vtbl *)off_243AE78;
  std::string::size_type v35 = (std::string::size_type)&v33[1];
  sub_8AEE64((std::string::size_type)&v33[1], v30, v31, a2, a3, v34);
  uint64_t v165 = &v33[1].__vftable;
  v166 = v33;
  if ((a4 & 1) == 0 && !(*(unsigned __int8 *)(a1 + 2125) | BYTE5(v33[89].__shared_owners_)))
  {
    *(_OWORD *)a5 = v187;
    *(void *)(a5 + 16) = v188;
    uint64_t v188 = 0;
    long long v187 = 0uLL;
LABEL_261:
    if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
    goto LABEL_263;
  }
  if (LOBYTE(v33[120].__shared_weak_owners_) || !BYTE5(v33[89].__shared_owners_))
  {
    sub_7FC804(v35, (uint64_t)v163);
    int v36 = 0;
  }
  else
  {
    sub_7F598C(v35, (uint64_t)v163);
    int v36 = 1;
  }
  sub_80FC34(v35, 1, (uint64_t)v163, (uint64_t)&v156);
  if (BYTE4(v33[78].__vftable))
  {
    if (byte_25CCF07 < 0)
    {
      sub_4200(&__dst, (void *)xmmword_25CCEF0, *((unint64_t *)&xmmword_25CCEF0 + 1));
    }
    else
    {
      long long __dst = xmmword_25CCEF0;
      uint64_t v155 = unk_25CCF00;
    }
  }
  else
  {
    HIBYTE(v155) = 0;
    LOBYTE(__dst) = 0;
  }
  sub_814258(v35, (uint64_t)&v142);
  if (v155 >= 0) {
    p_dst = (const std::string::value_type *)&__dst;
  }
  else {
    p_dst = (const std::string::value_type *)__dst;
  }
  if (v155 >= 0) {
    std::string::size_type v38 = HIBYTE(v155);
  }
  else {
    std::string::size_type v38 = *((void *)&__dst + 1);
  }
  char v39 = std::string::insert(&v142, 0, p_dst, v38);
  long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v169.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v169.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  if ((v164 & 0x80u) == 0) {
    uint64_t v41 = v163;
  }
  else {
    uint64_t v41 = (void **)v163[0];
  }
  if ((v164 & 0x80u) == 0) {
    std::string::size_type v42 = v164;
  }
  else {
    std::string::size_type v42 = (std::string::size_type)v163[1];
  }
  long long v43 = std::string::append(&v169, (const std::string::value_type *)v41, v42);
  long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  std::string::size_type v153 = v43->__r_.__value_.__r.__words[2];
  long long v152 = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v169.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v142.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_71;
    }
  }
  else if ((SHIBYTE(v142.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_71;
  }
  operator delete(v142.__r_.__value_.__l.__data_);
LABEL_71:
  if (sub_818034(a1, a1 + 80, (uint64_t)&v156))
  {
    sub_6352AC((uint64_t)&v169, (uint64_t)&v152);
    std::string::size_type v45 = v156.__r_.__value_.__r.__words[0];
    if (v156.__r_.__value_.__r.__words[0])
    {
      std::string::size_type v46 = v156.__r_.__value_.__l.__size_;
      long long v47 = (void *)v156.__r_.__value_.__r.__words[0];
      if (v156.__r_.__value_.__l.__size_ != v156.__r_.__value_.__r.__words[0])
      {
        do
        {
          if (*(char *)(v46 - 1) < 0) {
            operator delete(*(void **)(v46 - 24));
          }
          v46 -= 24;
        }
        while (v46 != v45);
        long long v47 = (void *)v156.__r_.__value_.__r.__words[0];
      }
      v156.__r_.__value_.__l.__size_ = v45;
      operator delete(v47);
    }
    std::string v156 = v169;
    memset(&v169, 0, sizeof(v169));
    if (v160)
    {
      long long v48 = v159;
      if (v159)
      {
        do
        {
          int v49 = (void *)*v48;
          sub_4F4B48((uint64_t)(v48 + 2));
          operator delete(v48);
          long long v48 = v49;
        }
        while (v49);
      }
      v159 = 0;
      unint64_t v50 = v158;
      if (v158)
      {
        uint64_t v51 = 0;
        do
          *((void *)v157 + v51++) = 0;
        while (v50 != v51);
      }
      uint64_t v160 = 0;
    }
    size_t v52 = __p;
    std::string __p = 0;
    int v53 = v157;
    size_t v157 = v52;
    if (v53) {
      operator delete(v53);
    }
    unint64_t v54 = v171;
    unint64_t v55 = v172;
    unint64_t v171 = 0;
    v159 = v172;
    uint64_t v160 = v173;
    int v161 = v174;
    unint64_t v158 = v54;
    if (v173)
    {
      unint64_t v56 = v172[1];
      if ((v54 & (v54 - 1)) != 0)
      {
        if (v56 >= v54) {
          v56 %= v54;
        }
      }
      else
      {
        v56 &= v54 - 1;
      }
      *((void *)v157 + v56) = &v159;
      v172 = 0;
      uint64_t v173 = 0;
      char v162 = v175;
    }
    else
    {
      char v162 = v175;
      if (v172)
      {
        do
        {
          uint64_t v57 = (void *)*v55;
          sub_4F4B48((uint64_t)(v55 + 2));
          operator delete(v55);
          unint64_t v55 = v57;
        }
        while (v57);
      }
    }
    unint64_t v58 = __p;
    std::string __p = 0;
    if (v58) {
      operator delete(v58);
    }
    std::string::size_type v59 = v169.__r_.__value_.__r.__words[0];
    if (v169.__r_.__value_.__r.__words[0])
    {
      std::string::size_type v60 = v169.__r_.__value_.__l.__size_;
      char v61 = (void *)v169.__r_.__value_.__r.__words[0];
      if (v169.__r_.__value_.__l.__size_ != v169.__r_.__value_.__r.__words[0])
      {
        do
        {
          if (*(char *)(v60 - 1) < 0) {
            operator delete(*(void **)(v60 - 24));
          }
          v60 -= 24;
        }
        while (v60 != v59);
        char v61 = (void *)v169.__r_.__value_.__r.__words[0];
      }
      v169.__r_.__value_.__l.__size_ = v59;
      operator delete(v61);
    }
  }
  else if (BYTE4(v33[78].__vftable))
  {
    sub_81832C(a1, (long long **)&v156);
  }
  uint64_t v150 = 0;
  long long v151 = 0;
  sub_6370D4(&v169, &v156, 1, &v150);
  uint64_t v62 = v151;
  if (v151 && !atomic_fetch_add(&v151->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
    std::__shared_weak_count::__release_weak(v62);
  }
  sub_816254((uint64_t)v165, (uint64_t *)&v169, 0, 0);
  if (v36)
  {
    sub_8B4708((uint64_t)&v169, (uint64_t)&xmmword_25CDA48, (uint64_t)&v142);
    sub_63DAA4((uint64_t)&v169, (uint64_t)&v142);
    char v63 = v148;
    if (v148 && !atomic_fetch_add(&v148->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
    char v64 = v144;
    if (v144)
    {
      do
      {
        std::string::size_type v65 = (void *)*v64;
        sub_4F4B48((uint64_t)(v64 + 2));
        operator delete(v64);
        char v64 = v65;
      }
      while (v65);
    }
    uint64_t v66 = v143;
    unint64_t v143 = 0;
    if (v66) {
      operator delete(v66);
    }
    std::string::size_type v67 = v142.__r_.__value_.__r.__words[0];
    if (v142.__r_.__value_.__r.__words[0])
    {
      std::string::size_type v68 = v142.__r_.__value_.__l.__size_;
      uint64_t v69 = (void *)v142.__r_.__value_.__r.__words[0];
      if (v142.__r_.__value_.__l.__size_ != v142.__r_.__value_.__r.__words[0])
      {
        do
        {
          if (*(char *)(v68 - 1) < 0) {
            operator delete(*(void **)(v68 - 24));
          }
          v68 -= 24;
        }
        while (v68 != v67);
        uint64_t v69 = (void *)v142.__r_.__value_.__r.__words[0];
      }
      v142.__r_.__value_.__l.__size_ = v67;
      operator delete(v69);
    }
  }
  if (!sub_637DD8((long long **)&v177))
  {
    sub_635CD0((long long **)(a1 + 80), (uint64_t)v140);
    uint64_t v70 = sub_5231C(a1 + 80);
    sub_63531C((uint64_t)&v133, (uint64_t)v140, v70);
    uint64_t v71 = sub_897368((uint64_t)v165);
    long long v72 = (std::__shared_weak_count *)operator new(0x80uLL);
    v72->__shared_owners_ = 0;
    v72->__shared_weak_owners_ = 0;
    v72->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
    sub_59540C((uint64_t)v189, (uint64_t)&v72[1], (uint64_t)&v169);
    long long v138 = &v72[1].__vftable;
    int v139 = v72;
    sub_6370D4(&v142, &v133, v71, &v138);
    sub_63DAA4((uint64_t)&v177, (uint64_t)&v142);
    __int16 v73 = v148;
    if (v148 && !atomic_fetch_add(&v148->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
    uint64_t v74 = v144;
    if (v144)
    {
      do
      {
        uint64_t v75 = (void *)*v74;
        sub_4F4B48((uint64_t)(v74 + 2));
        operator delete(v74);
        uint64_t v74 = v75;
      }
      while (v75);
    }
    uint64_t v76 = v143;
    unint64_t v143 = 0;
    if (v76) {
      operator delete(v76);
    }
    std::string::size_type v77 = v142.__r_.__value_.__r.__words[0];
    if (v142.__r_.__value_.__r.__words[0])
    {
      std::string::size_type v78 = v142.__r_.__value_.__l.__size_;
      size_t v79 = (void *)v142.__r_.__value_.__r.__words[0];
      if (v142.__r_.__value_.__l.__size_ != v142.__r_.__value_.__r.__words[0])
      {
        do
        {
          if (*(char *)(v78 - 1) < 0) {
            operator delete(*(void **)(v78 - 24));
          }
          v78 -= 24;
        }
        while (v78 != v77);
        size_t v79 = (void *)v142.__r_.__value_.__r.__words[0];
      }
      v142.__r_.__value_.__l.__size_ = v77;
      operator delete(v79);
    }
    unint64_t v80 = v139;
    if (v139 && !atomic_fetch_add(&v139->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
    std::string v81 = v136;
    if (v136)
    {
      do
      {
        uint64_t v82 = (void *)*v81;
        sub_4F4B48((uint64_t)(v81 + 2));
        operator delete(v81);
        std::string v81 = v82;
      }
      while (v82);
    }
    unint64_t v83 = v135;
    v135 = 0;
    if (v83) {
      operator delete(v83);
    }
    char v84 = (void **)v133;
    if (v133)
    {
      long long v85 = v134;
      std::string v86 = v133;
      if (v134 != v133)
      {
        do
        {
          if (*((char *)v85 - 1) < 0) {
            operator delete(*(v85 - 3));
          }
          v85 -= 3;
        }
        while (v85 != v84);
        std::string v86 = v133;
      }
      v134 = v84;
      operator delete(v86);
    }
    if (SHIBYTE(v141) < 0) {
      operator delete(v140[0]);
    }
  }
  sub_816254(a1, (uint64_t *)&v177, 0, 0);
  memset(&v142, 0, sizeof(v142));
  sub_8A6F8((char *)&v142, v177, *((uint64_t *)&v177 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v177 + 1) - v177) >> 3));
  sub_5954B0((uint64_t)&v143, (uint64_t)&v178 + 8);
  char v145 = v182;
  int v146 = v183;
  uint64_t v147 = v184;
  v148 = v185;
  if (v185) {
    atomic_fetch_add_explicit(&v185->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __int16 v149 = v186;
  if (a4 && (*(_DWORD *)(a1 + 1848) - 41) >= 0x13)
  {
    uint64_t v87 = 234;
    if (!*(unsigned char *)(a1 + 2873)) {
      uint64_t v87 = 240;
    }
    uint64_t v88 = &qword_25CD940;
    if (*(unsigned char *)(a1 + 2873)) {
      uint64_t v88 = (uint64_t *)&xmmword_25CD928;
    }
    int v89 = &byte_25CD93F;
    if (!*(unsigned char *)(a1 + 2873)) {
      int v89 = (char *)&unk_25CD957;
    }
    if (*v89 < 0)
    {
      if (*(unsigned char *)(a1 + 2873)) {
        uint64_t v97 = (unint64_t *)&xmmword_25CD928 + 1;
      }
      else {
        uint64_t v97 = (unint64_t *)&unk_25CD948;
      }
      sub_4200(v140, *(void **)&dword_25CD580[v87], *v97);
    }
    else
    {
      *(_OWORD *)size_t v140 = *(_OWORD *)v88;
      uint64_t v141 = v88[2];
    }
    sub_6379F8((uint64_t *)&v177, (char *)&qword_25CD400);
    sub_8B4708((uint64_t)&v177, (uint64_t)v140, (uint64_t)&v133);
    sub_63DAA4((uint64_t)&v142, (uint64_t)&v133);
    char v98 = v137;
    if (v137 && !atomic_fetch_add(&v137->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
    uint64_t v99 = v136;
    if (v136)
    {
      do
      {
        int64_t v100 = (void *)*v99;
        sub_4F4B48((uint64_t)(v99 + 2));
        operator delete(v99);
        uint64_t v99 = v100;
      }
      while (v100);
    }
    uint64_t v101 = v135;
    v135 = 0;
    if (v101) {
      operator delete(v101);
    }
    int v94 = (void **)v133;
    if (!v133) {
      goto LABEL_212;
    }
    int64_t v102 = v134;
    BOOL v96 = v133;
    if (v134 == v133) {
      goto LABEL_211;
    }
    do
    {
      if (*((char *)v102 - 1) < 0) {
        operator delete(*(v102 - 3));
      }
      v102 -= 3;
    }
    while (v102 != v94);
    goto LABEL_210;
  }
  if (!*(unsigned char *)(a1 + 2125)) {
    goto LABEL_214;
  }
  if (byte_25CDA47 < 0)
  {
    sub_4200(v140, (void *)xmmword_25CDA30, *((unint64_t *)&xmmword_25CDA30 + 1));
  }
  else
  {
    *(_OWORD *)size_t v140 = xmmword_25CDA30;
    uint64_t v141 = unk_25CDA40;
  }
  sub_8B4708((uint64_t)&v177, (uint64_t)v140, (uint64_t)&v133);
  sub_63DAA4((uint64_t)&v142, (uint64_t)&v133);
  long long v90 = v137;
  if (v137 && !atomic_fetch_add(&v137->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
    std::__shared_weak_count::__release_weak(v90);
  }
  long long v91 = v136;
  if (v136)
  {
    do
    {
      long long v92 = (void *)*v91;
      sub_4F4B48((uint64_t)(v91 + 2));
      operator delete(v91);
      long long v91 = v92;
    }
    while (v92);
  }
  uint64_t v93 = v135;
  v135 = 0;
  if (v93) {
    operator delete(v93);
  }
  int v94 = (void **)v133;
  if (v133)
  {
    char v95 = v134;
    BOOL v96 = v133;
    if (v134 == v133) {
      goto LABEL_211;
    }
    do
    {
      if (*((char *)v95 - 1) < 0) {
        operator delete(*(v95 - 3));
      }
      v95 -= 3;
    }
    while (v95 != v94);
LABEL_210:
    BOOL v96 = v133;
LABEL_211:
    v134 = v94;
    operator delete(v96);
  }
LABEL_212:
  if (SHIBYTE(v141) < 0) {
    operator delete(v140[0]);
  }
LABEL_214:
  sub_89F5A4((uint64_t *)&v187, v187, (unint64_t)&v142);
  *(_OWORD *)a5 = v187;
  *(void *)(a5 + 16) = v188;
  uint64_t v188 = 0;
  long long v187 = 0uLL;
  uint64_t v103 = v148;
  if (v148 && !atomic_fetch_add(&v148->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
    std::__shared_weak_count::__release_weak(v103);
  }
  uint64_t v104 = v144;
  if (v144)
  {
    do
    {
      v105 = (void *)*v104;
      sub_4F4B48((uint64_t)(v104 + 2));
      operator delete(v104);
      uint64_t v104 = v105;
    }
    while (v105);
  }
  int v106 = v143;
  unint64_t v143 = 0;
  if (v106) {
    operator delete(v106);
  }
  std::string::size_type v107 = v142.__r_.__value_.__r.__words[0];
  if (v142.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v108 = v142.__r_.__value_.__l.__size_;
    size_t v109 = (void *)v142.__r_.__value_.__r.__words[0];
    if (v142.__r_.__value_.__l.__size_ != v142.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v108 - 1) < 0) {
          operator delete(*(void **)(v108 - 24));
        }
        v108 -= 24;
      }
      while (v108 != v107);
      size_t v109 = (void *)v142.__r_.__value_.__r.__words[0];
    }
    v142.__r_.__value_.__l.__size_ = v107;
    operator delete(v109);
  }
  unint64_t v110 = v176;
  if (v176 && !atomic_fetch_add(&v176->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
    std::__shared_weak_count::__release_weak(v110);
  }
  v111 = v172;
  if (v172)
  {
    do
    {
      v112 = (void *)*v111;
      sub_4F4B48((uint64_t)(v111 + 2));
      operator delete(v111);
      v111 = v112;
    }
    while (v112);
  }
  v113 = __p;
  std::string __p = 0;
  if (v113) {
    operator delete(v113);
  }
  std::string::size_type v114 = v169.__r_.__value_.__r.__words[0];
  if (v169.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v115 = v169.__r_.__value_.__l.__size_;
    long long v116 = (void *)v169.__r_.__value_.__r.__words[0];
    if (v169.__r_.__value_.__l.__size_ != v169.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v115 - 1) < 0) {
          operator delete(*(void **)(v115 - 24));
        }
        v115 -= 24;
      }
      while (v115 != v114);
      long long v116 = (void *)v169.__r_.__value_.__r.__words[0];
    }
    v169.__r_.__value_.__l.__size_ = v114;
    operator delete(v116);
  }
  if ((SHIBYTE(v153) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v155) & 0x80000000) == 0) {
      goto LABEL_246;
    }
LABEL_285:
    operator delete((void *)__dst);
    int v117 = v159;
    if (!v159) {
      goto LABEL_248;
    }
    goto LABEL_247;
  }
  operator delete((void *)v152);
  if (SHIBYTE(v155) < 0) {
    goto LABEL_285;
  }
LABEL_246:
  int v117 = v159;
  if (!v159) {
    goto LABEL_248;
  }
  do
  {
LABEL_247:
    size_t v118 = (void *)*v117;
    sub_4F4B48((uint64_t)(v117 + 2));
    operator delete(v117);
    int v117 = v118;
  }
  while (v118);
LABEL_248:
  unint64_t v119 = v157;
  size_t v157 = 0;
  if (v119) {
    operator delete(v119);
  }
  std::string::size_type v120 = v156.__r_.__value_.__r.__words[0];
  if (v156.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v121 = v156.__r_.__value_.__l.__size_;
    uint64_t v122 = (void *)v156.__r_.__value_.__r.__words[0];
    if (v156.__r_.__value_.__l.__size_ != v156.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v121 - 1) < 0) {
          operator delete(*(void **)(v121 - 24));
        }
        v121 -= 24;
      }
      while (v121 != v120);
      uint64_t v122 = (void *)v156.__r_.__value_.__r.__words[0];
    }
    v156.__r_.__value_.__l.__size_ = v120;
    operator delete(v122);
  }
  if ((char)v164 < 0) {
    operator delete(v163[0]);
  }
  char v33 = v166;
  if (v166) {
    goto LABEL_261;
  }
LABEL_263:
  uint64_t v123 = v185;
  if (v185 && !atomic_fetch_add(&v185->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
    std::__shared_weak_count::__release_weak(v123);
  }
  uint64_t v124 = (void *)*((void *)&v179 + 1);
  if (*((void *)&v179 + 1))
  {
    do
    {
      v125 = (void *)*v124;
      sub_4F4B48((uint64_t)(v124 + 2));
      operator delete(v124);
      uint64_t v124 = v125;
    }
    while (v125);
  }
  int v126 = (void *)*((void *)&v178 + 1);
  *((void *)&v178 + 1) = 0;
  if (v126) {
    operator delete(v126);
  }
  uint64_t v127 = v177;
  if ((void)v177)
  {
    uint64_t v128 = *((void *)&v177 + 1);
    size_t v129 = (void *)v177;
    if (*((void *)&v177 + 1) != (void)v177)
    {
      do
      {
        if (*(char *)(v128 - 1) < 0) {
          operator delete(*(void **)(v128 - 24));
        }
        v128 -= 24;
      }
      while (v128 != v127);
      size_t v129 = (void *)v177;
    }
    *((void *)&v177 + 1) = v127;
    operator delete(v129);
  }
  unint64_t v130 = (void **)v187;
  if ((void)v187)
  {
    v131 = (void **)*((void *)&v187 + 1);
    v132 = (void *)v187;
    if (*((void *)&v187 + 1) != (void)v187)
    {
      do
        v131 = sub_4F31D0(v131 - 13);
      while (v131 != v130);
      v132 = (void *)v187;
    }
    *((void *)&v187 + 1) = v130;
    operator delete(v132);
  }
}

void sub_8BA0A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_4F31D0((void **)&a28);
  sub_4F31D0(&a73);
  if (a48 < 0) {
    operator delete(__p);
  }
  if (a55 < 0) {
    operator delete(a50);
  }
  sub_4D4880(&a57);
  if (a71 < 0) {
    operator delete(a66);
  }
  sub_14A84((uint64_t)&a72);
  sub_4F31D0((void **)(v73 - 240));
  sub_5920E0((void **)(v73 - 128));
  _Unwind_Resume(a1);
}

void sub_8BA2A4(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  sub_81769C((uint64_t)a1, a2, a3, (uint64_t)a5);
  if (a1[2876])
  {
    uint64_t v8 = *a5;
    size_t v9 = (std::__shared_weak_count *)operator new(0x80uLL);
    v9->__shared_owners_ = 0;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
    sub_59540C((uint64_t)&v34, (uint64_t)&v9[1], v8);
    int v36 = &v9[1].__vftable;
    uint64_t v37 = v9;
    sub_8B8700((uint64_t)a1, (uint64_t *)&v36, 10, (uint64_t)&v38);
    int v10 = v37;
    if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    sub_89F5A4(a5, *a5, (unint64_t)&v38);
    size_t v11 = v42;
    if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    int v12 = v41;
    if (v41)
    {
      do
      {
        uint64_t v13 = (void *)*v12;
        sub_4F4B48((uint64_t)(v12 + 2));
        operator delete(v12);
        int v12 = v13;
      }
      while (v13);
    }
    uint64_t v14 = __p;
    std::string __p = 0;
    if (v14) {
      operator delete(v14);
    }
    uint64_t v15 = (void **)v38;
    if (v38)
    {
      uint64_t v16 = v39;
      uint64_t v17 = v38;
      if (v39 == v38) {
        goto LABEL_33;
      }
      do
      {
        if (*((char *)v16 - 1) < 0) {
          operator delete(*(v16 - 3));
        }
        v16 -= 3;
      }
      while (v16 != v15);
LABEL_32:
      uint64_t v17 = v38;
LABEL_33:
      char v39 = v15;
LABEL_34:
      operator delete(v17);
    }
  }
  else if (a1[2125])
  {
    sub_8B4708(*a5, (uint64_t)&xmmword_25CDA30, (uint64_t)&v38);
    sub_89F5A4(a5, *a5, (unint64_t)&v38);
    unint64_t v18 = v42;
    if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    std::string::size_type v19 = v41;
    if (v41)
    {
      do
      {
        uint64_t v20 = (void *)*v19;
        sub_4F4B48((uint64_t)(v19 + 2));
        operator delete(v19);
        std::string::size_type v19 = v20;
      }
      while (v20);
    }
    std::string::size_type v21 = __p;
    std::string __p = 0;
    if (v21) {
      operator delete(v21);
    }
    uint64_t v15 = (void **)v38;
    if (v38)
    {
      uint64_t v22 = v39;
      uint64_t v17 = v38;
      if (v39 == v38) {
        goto LABEL_33;
      }
      do
      {
        if (*((char *)v22 - 1) < 0) {
          operator delete(*(v22 - 3));
        }
        v22 -= 3;
      }
      while (v22 != v15);
      goto LABEL_32;
    }
  }
  else if (a4)
  {
    uint64_t v23 = 234;
    if (!a1[2873]) {
      uint64_t v23 = 240;
    }
    uint64_t v24 = &qword_25CD940;
    if (a1[2873]) {
      uint64_t v24 = (uint64_t *)&xmmword_25CD928;
    }
    uint64_t v25 = &byte_25CD93F;
    if (!a1[2873]) {
      uint64_t v25 = (char *)&unk_25CD957;
    }
    if (*v25 < 0)
    {
      if (a1[2873]) {
        uint64_t v26 = (unint64_t *)&xmmword_25CD928 + 1;
      }
      else {
        uint64_t v26 = (unint64_t *)&unk_25CD948;
      }
      sub_4200(&v34, *(void **)&dword_25CD580[v23], *v26);
    }
    else
    {
      long long v34 = *(_OWORD *)v24;
      uint64_t v35 = v24[2];
    }
    sub_6379F8((uint64_t *)*a5, (char *)&qword_25CD400);
    sub_8B4708(*a5, (uint64_t)&v34, (uint64_t)&v38);
    sub_89F5A4(a5, *a5, (unint64_t)&v38);
    std::string::size_type v27 = v42;
    if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
    std::string::size_type v28 = v41;
    if (v41)
    {
      do
      {
        uint64_t v29 = (void *)*v28;
        sub_4F4B48((uint64_t)(v28 + 2));
        operator delete(v28);
        std::string::size_type v28 = v29;
      }
      while (v29);
    }
    uint64_t v30 = __p;
    std::string __p = 0;
    if (v30) {
      operator delete(v30);
    }
    uint64_t v31 = (void **)v38;
    if (v38)
    {
      int v32 = v39;
      char v33 = v38;
      if (v39 != v38)
      {
        do
        {
          if (*((char *)v32 - 1) < 0) {
            operator delete(*(v32 - 3));
          }
          v32 -= 3;
        }
        while (v32 != v31);
        char v33 = v38;
      }
      char v39 = v31;
      operator delete(v33);
    }
    if (SHIBYTE(v35) < 0)
    {
      uint64_t v17 = (void *)v34;
      goto LABEL_34;
    }
  }
}

void sub_8BA6D0(_Unwind_Exception *a1)
{
  sub_5920E0(v1);
  _Unwind_Resume(a1);
}

void sub_8BA6E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17)
{
  sub_4F31D0(&a17);
  if (a14 < 0)
  {
    operator delete(__p);
    sub_5920E0(v17);
    _Unwind_Resume(a1);
  }
  sub_5920E0(v17);
  _Unwind_Resume(a1);
}

void sub_8BA7A0(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  long long v88 = 0uLL;
  unint64_t v89 = 0;
  sub_8189D0(a1, &v87);
  uint64_t v8 = *(void *)(a1 + 1952);
  uint64_t v9 = *(void *)(a1 + 1960);
  int v10 = *(_DWORD *)(a1 + 2128);
  size_t v11 = operator new(0xB98uLL);
  int v12 = v10 - 1;
  v11[1] = 0;
  v11[2] = 0;
  *size_t v11 = off_243AE78;
  uint64_t v13 = (uint64_t)(v11 + 3);
  sub_8AEE64((std::string::size_type)(v11 + 3), v8, v9, a2, a3, v12);
  long long v85 = (char *)(v11 + 3);
  std::string v86 = (std::__shared_weak_count *)v11;
  sub_8B54D0((std::string::size_type)(v11 + 3), 0, 0, 0, (uint64_t)&v80);
  if (*((unsigned char *)v11 + 1876))
  {
    uint64_t v14 = nullsub_1(&v80);
    uint64_t v73 = 0;
    uint64_t v74 = 0;
    uint64_t v75 = 0;
    sub_8A6F8((char *)&v73, *(void *)v14, *(void *)(v14 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v14 + 8) - *(void *)v14) >> 3));
    sub_5954B0((uint64_t)&__p, v14 + 24);
    char v78 = *(unsigned char *)(v14 + 64);
    sub_81832C(v13, (long long **)&v73);
    sub_63797C((uint64_t)&v80, (uint64_t)&v73);
    uint64_t v15 = v77;
    if (v77)
    {
      do
      {
        uint64_t v16 = (void *)*v15;
        sub_4F4B48((uint64_t)(v15 + 2));
        operator delete(v15);
        uint64_t v15 = v16;
      }
      while (v16);
    }
    uint64_t v17 = __p;
    std::string __p = 0;
    if (v17) {
      operator delete(v17);
    }
    unint64_t v18 = (void **)v73;
    if (v73)
    {
      std::string::size_type v19 = v74;
      uint64_t v20 = v73;
      if (v74 != v73)
      {
        do
        {
          if (*((char *)v19 - 1) < 0) {
            operator delete(*(v19 - 3));
          }
          v19 -= 3;
        }
        while (v19 != v18);
        uint64_t v20 = v73;
      }
      uint64_t v74 = v18;
      operator delete(v20);
    }
    uint64_t v13 = (uint64_t)v85;
  }
  *(_OWORD *)char v61 = 0u;
  *(_OWORD *)uint64_t v62 = 0u;
  LODWORD(v63) = 1065353216;
  int v21 = sub_897368(v13);
  uint64_t v22 = (std::__shared_weak_count *)operator new(0x80uLL);
  v22->__shared_owners_ = 0;
  v22->__shared_weak_owners_ = 0;
  v22->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
  sub_59540C((uint64_t)&v90, (uint64_t)&v22[1], (uint64_t)&v80);
  uint64_t v71 = &v22[1].__vftable;
  long long v72 = v22;
  sub_6373D8((uint64_t)&v73, (uint64_t)&v87, (uint64_t)v61, v21, (uint64_t *)&v71);
  uint64_t v23 = v72;
  if (v72 && !atomic_fetch_add(&v72->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  uint64_t v24 = v62[0];
  if (v62[0])
  {
    do
    {
      uint64_t v25 = (void *)*v24;
      sub_4F4B48((uint64_t)(v24 + 2));
      operator delete(v24);
      uint64_t v24 = v25;
    }
    while (v25);
  }
  uint64_t v26 = v61[0];
  v61[0] = 0;
  if (v26) {
    operator delete(v26);
  }
  sub_816254(a1, (uint64_t *)&v73, 0, 0);
  uint64_t v27 = *((void *)&v88 + 1);
  if (*((void *)&v88 + 1) >= v89)
  {
    uint64_t v28 = sub_63D140((uint64_t *)&v88, (uint64_t)&v73);
  }
  else
  {
    sub_63D394((uint64_t)&v89, *((uint64_t *)&v88 + 1), (uint64_t)&v73);
    uint64_t v28 = v27 + 104;
  }
  *((void *)&v88 + 1) = v28;
  sub_8B4A7C(a1, (uint64_t *)v61);
  uint64_t v29 = *((void *)&v88 + 1);
  if (*((void *)&v88 + 1) >= v89)
  {
    uint64_t v35 = sub_63D48C((void ***)&v88, (uint64_t)v61);
    int v36 = (std::__shared_weak_count *)*((void *)&v69 + 1);
    *((void *)&v88 + 1) = v35;
    if (*((void *)&v69 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v69 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  else
  {
    *(void *)(*((void *)&v88 + 1) + 16) = 0;
    *(_OWORD *)uint64_t v29 = 0u;
    *(_OWORD *)uint64_t v29 = *(_OWORD *)v61;
    *(void **)(v29 + 16) = v62[0];
    uint64_t v30 = v62[1];
    *(_OWORD *)char v61 = 0u;
    *(_OWORD *)uint64_t v62 = 0u;
    *(void *)(v29 + 24) = v30;
    *(void *)(v29 + 32) = v63;
    uint64_t v63 = 0;
    uint64_t v31 = v64;
    *(void *)(v29 + 40) = v64;
    uint64_t v32 = v65;
    *(void *)(v29 + 48) = v65;
    *(_DWORD *)(v29 + 56) = v66;
    if (v32)
    {
      unint64_t v33 = v31[1];
      unint64_t v34 = *(void *)(v29 + 32);
      if ((v34 & (v34 - 1)) != 0)
      {
        if (v33 >= v34) {
          v33 %= v34;
        }
      }
      else
      {
        v33 &= v34 - 1;
      }
      v30[v33] = v29 + 40;
      char v64 = 0;
      uint64_t v65 = 0;
    }
    *(unsigned char *)(v29 + 64) = v67;
    *(_DWORD *)(v29 + 72) = v68;
    *(_OWORD *)(v29 + 80) = v69;
    long long v69 = 0uLL;
    *(_WORD *)(v29 + 96) = v70;
    *((void *)&v88 + 1) = v29 + 104;
  }
  uint64_t v37 = v64;
  if (v64)
  {
    do
    {
      std::string::size_type v38 = (void *)*v37;
      sub_4F4B48((uint64_t)(v37 + 2));
      operator delete(v37);
      uint64_t v37 = v38;
    }
    while (v38);
  }
  char v39 = v62[1];
  v62[1] = 0;
  if (v39) {
    operator delete(v39);
  }
  long long v40 = (void **)v61[0];
  if (v61[0])
  {
    uint64_t v41 = (void **)v61[1];
    std::string::size_type v42 = v61[0];
    if (v61[1] != v61[0])
    {
      do
      {
        if (*((char *)v41 - 1) < 0) {
          operator delete(*(v41 - 3));
        }
        v41 -= 3;
      }
      while (v41 != v40);
      std::string::size_type v42 = v61[0];
    }
    v61[1] = v40;
    operator delete(v42);
  }
  *(_OWORD *)a4 = v88;
  *(void *)(a4 + 16) = v89;
  long long v88 = 0uLL;
  unint64_t v89 = 0;
  long long v43 = v79;
  if (v79 && !atomic_fetch_add(&v79->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
  }
  long long v44 = v77;
  if (v77)
  {
    do
    {
      std::string::size_type v45 = (void *)*v44;
      sub_4F4B48((uint64_t)(v44 + 2));
      operator delete(v44);
      long long v44 = v45;
    }
    while (v45);
  }
  std::string::size_type v46 = __p;
  std::string __p = 0;
  if (v46) {
    operator delete(v46);
  }
  long long v47 = (void **)v73;
  if (v73)
  {
    long long v48 = v74;
    int v49 = v73;
    if (v74 != v73)
    {
      do
      {
        if (*((char *)v48 - 1) < 0) {
          operator delete(*(v48 - 3));
        }
        v48 -= 3;
      }
      while (v48 != v47);
      int v49 = v73;
    }
    uint64_t v74 = v47;
    operator delete(v49);
  }
  unint64_t v50 = v84;
  if (v84 && !atomic_fetch_add(&v84->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
  }
  uint64_t v51 = v83;
  if (v83)
  {
    do
    {
      size_t v52 = (void *)*v51;
      sub_4F4B48((uint64_t)(v51 + 2));
      operator delete(v51);
      uint64_t v51 = v52;
    }
    while (v52);
  }
  int v53 = v82;
  uint64_t v82 = 0;
  if (v53) {
    operator delete(v53);
  }
  unint64_t v54 = (void **)v80;
  if (v80)
  {
    unint64_t v55 = v81;
    unint64_t v56 = v80;
    if (v81 != v80)
    {
      do
      {
        if (*((char *)v55 - 1) < 0) {
          operator delete(*(v55 - 3));
        }
        v55 -= 3;
      }
      while (v55 != v54);
      unint64_t v56 = v80;
    }
    std::string v81 = v54;
    operator delete(v56);
  }
  uint64_t v57 = v86;
  if (!v86 || atomic_fetch_add(&v86->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_82;
    }
    goto LABEL_81;
  }
  ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
  std::__shared_weak_count::__release_weak(v57);
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
LABEL_81:
  }
    operator delete(v87.__r_.__value_.__l.__data_);
LABEL_82:
  unint64_t v58 = (void **)v88;
  if ((void)v88)
  {
    std::string::size_type v59 = (void **)*((void *)&v88 + 1);
    std::string::size_type v60 = (void *)v88;
    if (*((void *)&v88 + 1) != (void)v88)
    {
      do
        std::string::size_type v59 = sub_4F31D0(v59 - 13);
      while (v59 != v58);
      std::string::size_type v60 = (void *)v88;
    }
    *((void *)&v88 + 1) = v58;
    operator delete(v60);
  }
}

void sub_8BAE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37)
{
  sub_4F31D0(&a9);
  sub_4F31D0(&a24);
  sub_4F31D0(&a37);
  sub_14A84(v37 - 152);
  if (*(char *)(v37 - 113) < 0) {
    operator delete(*(void **)(v37 - 136));
  }
  sub_5920E0((void **)(v37 - 112));
  _Unwind_Resume(a1);
}

uint64_t sub_8BAF84@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t result = sub_684668(a2);
  if (result)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    int v7 = sub_6846C0(a2);
    uint64_t v8 = *a1;
    if (v7)
    {
      uint64_t v9 = *(uint64_t (**)(void *, uint64_t))(v8 + 152);
      int v10 = a1;
      uint64_t v11 = a2;
    }
    else
    {
      uint64_t v9 = *(uint64_t (**)(void *, uint64_t))(v8 + 160);
      int v10 = a1;
      uint64_t v11 = a2;
    }
    return v9(v10, v11);
  }
  return result;
}

uint64_t sub_8BB06C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t result = sub_684668(a2);
  if (result)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    int v7 = (void *)(a1 - 2136);
    int v8 = sub_6846C0(a2);
    uint64_t v9 = *v7;
    if (v8)
    {
      int v10 = *(uint64_t (**)(void *, uint64_t))(v9 + 152);
      uint64_t v11 = v7;
      uint64_t v12 = a2;
    }
    else
    {
      int v10 = *(uint64_t (**)(void *, uint64_t))(v9 + 160);
      uint64_t v11 = v7;
      uint64_t v12 = a2;
    }
    return v10(v11, v12);
  }
  return result;
}

uint64_t sub_8BB158@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_5964A0((uint64_t)v73, a1);
  sub_6835F0((uint64_t)v73, 6);
  sub_677C40((uint64_t)v73, 1, (uint64_t)&v68);
  int v3 = byte_25CCE5F;
  if (byte_25CCE5F >= 0) {
    size_t v4 = byte_25CCE5F;
  }
  else {
    size_t v4 = qword_25CCE50;
  }
  int v5 = byte_25CD7A7;
  if (byte_25CD7A7 >= 0) {
    size_t v6 = byte_25CD7A7;
  }
  else {
    size_t v6 = qword_25CD798;
  }
  unint64_t v7 = v6 + v4;
  if (v6 + v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v7 <= 0x16)
  {
    size_t v66 = 0;
    unint64_t v67 = 0;
    long long __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v67) = v6 + v4;
    if (!v4) {
      goto LABEL_14;
    }
    goto LABEL_10;
  }
  uint64_t v20 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v7 | 7) != 0x17) {
    uint64_t v20 = v7 | 7;
  }
  uint64_t v21 = v20 + 1;
  p_dst = (void **)operator new(v20 + 1);
  size_t v66 = v6 + v4;
  unint64_t v67 = v21 | 0x8000000000000000;
  long long __dst = p_dst;
  if (v4)
  {
LABEL_10:
    if (v3 >= 0) {
      uint64_t v9 = &qword_25CCE48;
    }
    else {
      uint64_t v9 = (uint64_t *)qword_25CCE48;
    }
    memmove(p_dst, v9, v4);
  }
LABEL_14:
  int v10 = (char *)p_dst + v4;
  if (v6)
  {
    if (v5 >= 0) {
      uint64_t v11 = &qword_25CD790;
    }
    else {
      uint64_t v11 = (uint64_t *)qword_25CD790;
    }
    memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  if (sub_637DD8((long long **)&v68))
  {
    sub_6352AC((uint64_t)v56, (uint64_t)&__dst);
    uint64_t v12 = (std::__shared_weak_count *)operator new(0x80uLL);
    v12->__shared_owners_ = 0;
    v12->__shared_weak_owners_ = 0;
    v12->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
    sub_63D394((uint64_t)&v74, (uint64_t)&v12[1], (uint64_t)&v68);
    unint64_t v54 = &v12[1].__vftable;
    unint64_t v55 = v12;
    sub_6370D4(&v60, v56, 10, &v54);
    uint64_t v13 = v55;
    if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    uint64_t v14 = v59;
    if (v59)
    {
      do
      {
        uint64_t v15 = (void *)*v14;
        sub_4F4B48((uint64_t)(v14 + 2));
        operator delete(v14);
        uint64_t v14 = v15;
      }
      while (v15);
    }
    uint64_t v16 = (void *)*((void *)&v57 + 1);
    *((void *)&v57 + 1) = 0;
    if (v16) {
      operator delete(v16);
    }
    uint64_t v17 = (void **)v56[0];
    if (v56[0])
    {
      unint64_t v18 = (void **)v56[1];
      std::string::size_type v19 = v56[0];
      if (v56[1] != v56[0])
      {
        do
        {
          if (*((char *)v18 - 1) < 0) {
            operator delete(*(v18 - 3));
          }
          v18 -= 3;
        }
        while (v18 != v17);
        std::string::size_type v19 = v56[0];
      }
      v56[1] = v17;
      operator delete(v19);
    }
    unint64_t v22 = a2[1];
    if (v22 >= a2[2])
    {
      uint64_t v23 = sub_63D140(a2, (uint64_t)&v60);
    }
    else
    {
      sub_63D394((uint64_t)(a2 + 2), a2[1], (uint64_t)&v60);
      uint64_t v23 = v22 + 104;
      a2[1] = v22 + 104;
    }
    a2[1] = v23;
    uint64_t v24 = v64;
    if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    uint64_t v25 = v63;
    if (v63)
    {
      do
      {
        uint64_t v26 = (void *)*v25;
        sub_4F4B48((uint64_t)(v25 + 2));
        operator delete(v25);
        uint64_t v25 = v26;
      }
      while (v26);
    }
    uint64_t v27 = v62;
    uint64_t v62 = 0;
    if (v27) {
      operator delete(v27);
    }
    uint64_t v28 = (void **)v60;
    if (v60)
    {
      uint64_t v29 = v61;
      uint64_t v30 = v60;
      if (v61 != v60)
      {
        do
        {
          if (*((char *)v29 - 1) < 0) {
            operator delete(*(v29 - 3));
          }
          v29 -= 3;
        }
        while (v29 != v28);
        uint64_t v30 = v60;
      }
      char v61 = v28;
      operator delete(v30);
    }
  }
  *(_OWORD *)unint64_t v56 = 0u;
  long long v57 = 0u;
  int v58 = 1065353216;
  uint64_t v52 = 0;
  int v53 = 0;
  sub_6373D8((uint64_t)&v60, (uint64_t)&__dst, (uint64_t)v56, 1, &v52);
  uint64_t v31 = v53;
  if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  uint64_t v32 = (void *)v57;
  if ((void)v57)
  {
    do
    {
      unint64_t v33 = (void *)*v32;
      sub_4F4B48((uint64_t)(v32 + 2));
      operator delete(v32);
      uint64_t v32 = v33;
    }
    while (v33);
  }
  unint64_t v34 = v56[0];
  v56[0] = 0;
  if (v34) {
    operator delete(v34);
  }
  unint64_t v35 = a2[1];
  if (v35 >= a2[2])
  {
    uint64_t v36 = sub_63D140(a2, (uint64_t)&v60);
  }
  else
  {
    sub_63D394((uint64_t)(a2 + 2), a2[1], (uint64_t)&v60);
    uint64_t v36 = v35 + 104;
    a2[1] = v35 + 104;
  }
  a2[1] = v36;
  uint64_t v37 = v64;
  if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  std::string::size_type v38 = v63;
  if (v63)
  {
    do
    {
      char v39 = (void *)*v38;
      sub_4F4B48((uint64_t)(v38 + 2));
      operator delete(v38);
      std::string::size_type v38 = v39;
    }
    while (v39);
  }
  long long v40 = v62;
  uint64_t v62 = 0;
  if (v40) {
    operator delete(v40);
  }
  uint64_t v41 = (void **)v60;
  if (v60)
  {
    std::string::size_type v42 = v61;
    long long v43 = v60;
    if (v61 != v60)
    {
      do
      {
        if (*((char *)v42 - 1) < 0) {
          operator delete(*(v42 - 3));
        }
        v42 -= 3;
      }
      while (v42 != v41);
      long long v43 = v60;
    }
    char v61 = v41;
    operator delete(v43);
  }
  if (SHIBYTE(v67) < 0) {
    operator delete(__dst);
  }
  long long v44 = v72;
  if (v72 && !atomic_fetch_add(&v72->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
  std::string::size_type v45 = v71;
  if (v71)
  {
    do
    {
      std::string::size_type v46 = (void *)*v45;
      sub_4F4B48((uint64_t)(v45 + 2));
      operator delete(v45);
      std::string::size_type v45 = v46;
    }
    while (v46);
  }
  long long v47 = v70;
  __int16 v70 = 0;
  if (v47) {
    operator delete(v47);
  }
  long long v48 = (void **)v68;
  if (v68)
  {
    int v49 = v69;
    unint64_t v50 = v68;
    if (v69 != v68)
    {
      do
      {
        if (*((char *)v49 - 1) < 0) {
          operator delete(*(v49 - 3));
        }
        v49 -= 3;
      }
      while (v49 != v48);
      unint64_t v50 = v68;
    }
    long long v69 = v48;
    operator delete(v50);
  }
  return sub_576848((uint64_t)v73);
}

void sub_8BB780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  sub_4F31D0(&a23);
  if (a41 < 0) {
    operator delete(__p);
  }
  sub_4F31D0(&a42);
  sub_576848((uint64_t)&a55);
  sub_5920E0(v55);
  _Unwind_Resume(a1);
}

uint64_t sub_8BB864@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_8BB158(a1, a2);
}

void sub_8BB86C(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (!sub_6846C0(a2))
  {
    if (byte_25CE2B7 < 0)
    {
      sub_4200(&__dst, (void *)xmmword_25CE2A0, *((unint64_t *)&xmmword_25CE2A0 + 1));
    }
    else
    {
      long long __dst = xmmword_25CE2A0;
      unint64_t v72 = unk_25CE2B0;
    }
    goto LABEL_28;
  }
  int v5 = byte_25CCE5F;
  if (byte_25CCE5F >= 0) {
    size_t v6 = byte_25CCE5F;
  }
  else {
    size_t v6 = qword_25CCE50;
  }
  int v7 = byte_25CD7A7;
  if (byte_25CD7A7 >= 0) {
    size_t v8 = byte_25CD7A7;
  }
  else {
    size_t v8 = qword_25CD798;
  }
  unint64_t v9 = v8 + v6;
  if (v8 + v6 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v9 > 0x16)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v8 + v6;
    unint64_t v72 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    if (!v6) {
      goto LABEL_15;
    }
    goto LABEL_11;
  }
  unint64_t v72 = 0;
  long long __dst = 0uLL;
  p_dst = &__dst;
  HIBYTE(v72) = v8 + v6;
  if (v6)
  {
LABEL_11:
    if (v5 >= 0) {
      uint64_t v11 = &qword_25CCE48;
    }
    else {
      uint64_t v11 = (uint64_t *)qword_25CCE48;
    }
    memmove(p_dst, v11, v6);
  }
LABEL_15:
  uint64_t v12 = (char *)p_dst + v6;
  if (v8)
  {
    if (v7 >= 0) {
      uint64_t v13 = &qword_25CD790;
    }
    else {
      uint64_t v13 = (uint64_t *)qword_25CD790;
    }
    memmove(v12, v13, v8);
  }
  v12[v8] = 0;
LABEL_28:
  if (sub_682F60((uint64_t)(a1 + 2168)) && !a1[2840])
  {
    (*(void (**)(void **__return_ptr, unsigned char *, void, void))(*(void *)a1 + 168))(&v66, a1, 0, 0);
    if (sub_637DD8((long long **)&v66))
    {
      sub_6352AC((uint64_t)&v57, (uint64_t)&__dst);
      uint64_t v16 = (std::__shared_weak_count *)operator new(0x80uLL);
      v16->__shared_owners_ = 0;
      v16->__shared_weak_owners_ = 0;
      v16->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
      sub_63D394((uint64_t)&v73, (uint64_t)&v16[1], (uint64_t)&v66);
      unint64_t v55 = &v16[1].__vftable;
      unint64_t v56 = v16;
      sub_6370D4(v61, &v57, 5, &v55);
      uint64_t v17 = v56;
      if (v56 && !atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      unint64_t v18 = v60;
      if (v60)
      {
        do
        {
          std::string::size_type v19 = (void *)*v18;
          sub_4F4B48((uint64_t)(v18 + 2));
          operator delete(v18);
          unint64_t v18 = v19;
        }
        while (v19);
      }
      uint64_t v20 = __p;
      std::string __p = 0;
      if (v20) {
        operator delete(v20);
      }
      uint64_t v21 = (void **)v57;
      if (v57)
      {
        unint64_t v22 = v58;
        uint64_t v23 = v57;
        if (v58 != v57)
        {
          do
          {
            if (*((char *)v22 - 1) < 0) {
              operator delete(*(v22 - 3));
            }
            v22 -= 3;
          }
          while (v22 != v21);
          uint64_t v23 = v57;
        }
        int v58 = v21;
        operator delete(v23);
      }
      unint64_t v24 = a3[1];
      if (v24 >= a3[2])
      {
        uint64_t v25 = sub_63D140(a3, (uint64_t)v61);
      }
      else
      {
        sub_63D394((uint64_t)(a3 + 2), a3[1], (uint64_t)v61);
        uint64_t v25 = v24 + 104;
        a3[1] = v24 + 104;
      }
      a3[1] = v25;
      uint64_t v26 = v65;
      if (v65 && !atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
      uint64_t v27 = v64;
      if (v64)
      {
        do
        {
          uint64_t v28 = (void *)*v27;
          sub_4F4B48((uint64_t)(v27 + 2));
          operator delete(v27);
          uint64_t v27 = v28;
        }
        while (v28);
      }
      uint64_t v29 = (void *)*((void *)&v62 + 1);
      *((void *)&v62 + 1) = 0;
      if (v29) {
        operator delete(v29);
      }
      uint64_t v30 = (void **)v61[0];
      if (v61[0])
      {
        uint64_t v31 = (void **)v61[1];
        uint64_t v32 = v61[0];
        if (v61[1] != v61[0])
        {
          do
          {
            if (*((char *)v31 - 1) < 0) {
              operator delete(*(v31 - 3));
            }
            v31 -= 3;
          }
          while (v31 != v30);
          uint64_t v32 = v61[0];
        }
        v61[1] = v30;
        operator delete(v32);
      }
    }
    unint64_t v33 = v70;
    if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
    unint64_t v34 = v69;
    if (v69)
    {
      do
      {
        unint64_t v35 = (void *)*v34;
        sub_4F4B48((uint64_t)(v34 + 2));
        operator delete(v34);
        unint64_t v34 = v35;
      }
      while (v35);
    }
    uint64_t v36 = v68;
    int v68 = 0;
    if (v36) {
      operator delete(v36);
    }
    uint64_t v37 = (void **)v66;
    if (v66)
    {
      std::string::size_type v38 = v67;
      char v39 = v66;
      if (v67 != v66)
      {
        do
        {
          if (*((char *)v38 - 1) < 0) {
            operator delete(*(v38 - 3));
          }
          v38 -= 3;
        }
        while (v38 != v37);
        char v39 = v66;
      }
      unint64_t v67 = v37;
      operator delete(v39);
    }
  }
  *(_OWORD *)char v61 = 0u;
  long long v62 = 0u;
  int v63 = 1065353216;
  uint64_t v53 = 0;
  unint64_t v54 = 0;
  sub_6373D8((uint64_t)&v66, (uint64_t)&__dst, (uint64_t)v61, 1, &v53);
  long long v40 = v54;
  if (v54 && !atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  uint64_t v41 = (void *)v62;
  if ((void)v62)
  {
    do
    {
      std::string::size_type v42 = (void *)*v41;
      sub_4F4B48((uint64_t)(v41 + 2));
      operator delete(v41);
      uint64_t v41 = v42;
    }
    while (v42);
  }
  long long v43 = v61[0];
  v61[0] = 0;
  if (v43) {
    operator delete(v43);
  }
  unint64_t v44 = a3[1];
  if (v44 >= a3[2])
  {
    uint64_t v45 = sub_63D140(a3, (uint64_t)&v66);
  }
  else
  {
    sub_63D394((uint64_t)(a3 + 2), a3[1], (uint64_t)&v66);
    uint64_t v45 = v44 + 104;
    a3[1] = v44 + 104;
  }
  a3[1] = v45;
  std::string::size_type v46 = v70;
  if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
  }
  long long v47 = v69;
  if (v69)
  {
    do
    {
      long long v48 = (void *)*v47;
      sub_4F4B48((uint64_t)(v47 + 2));
      operator delete(v47);
      long long v47 = v48;
    }
    while (v48);
  }
  int v49 = v68;
  int v68 = 0;
  if (v49) {
    operator delete(v49);
  }
  unint64_t v50 = (void **)v66;
  if (v66)
  {
    uint64_t v51 = v67;
    uint64_t v52 = v66;
    if (v67 != v66)
    {
      do
      {
        if (*((char *)v51 - 1) < 0) {
          operator delete(*(v51 - 3));
        }
        v51 -= 3;
      }
      while (v51 != v50);
      uint64_t v52 = v66;
    }
    unint64_t v67 = v50;
    operator delete(v52);
  }
  if (SHIBYTE(v72) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_8BBEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36)
{
  sub_4F31D0(&a23);
  sub_4F31D0(&a36);
  if (*(char *)(v37 - 89) < 0)
  {
    operator delete(*(void **)(v37 - 112));
    sub_5920E0(v36);
    _Unwind_Resume(a1);
  }
  sub_5920E0(v36);
  _Unwind_Resume(a1);
}

void sub_8BBFB8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
}

void sub_8BBFC0(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  sub_6781DC(a1 + 2168, (uint64_t)&v95);
  std::string::size_type size = HIBYTE(v95.__r_.__value_.__r.__words[2]);
  if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v95.__r_.__value_.__l.__size_;
  }
  if (!size || sub_6829A4(a1 + 2168))
  {
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(void *)(a4 + 88) = 0;
    *(void *)(a4 + 96) = 0;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_DWORD *)(a4 + 56) = 1065353216;
    *(unsigned char *)(a4 + 64) = 1;
    *(void *)(a4 + 80) = 0;
    *(_WORD *)(a4 + 96) = 0;
    goto LABEL_126;
  }
  int v68 = a3;
  int v9 = a2 | a3;
  int v10 = SHIBYTE(v95.__r_.__value_.__r.__words[2]);
  if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v11 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v11 = v95.__r_.__value_.__l.__size_;
  }
  BOOL v12 = v9 == 0;
  if (v9) {
    uint64_t v13 = 528;
  }
  else {
    uint64_t v13 = 600;
  }
  if (v9) {
    uint64_t v14 = &qword_25CD790;
  }
  else {
    uint64_t v14 = &qword_25CD7D8;
  }
  uint64_t v15 = &byte_25CD7A7;
  if (v12) {
    uint64_t v15 = &byte_25CD7EF;
  }
  size_t v16 = *v15;
  int v17 = (char)v16;
  unint64_t v18 = &qword_25CD798;
  if (v12) {
    unint64_t v18 = &qword_25CD7E0;
  }
  size_t v19 = *v18;
  if ((v16 & 0x80u) == 0) {
    size_t v20 = v16;
  }
  else {
    size_t v20 = v19;
  }
  unint64_t v21 = v20 + v11;
  if (v20 + v11 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  unint64_t v67 = v14;
  if (v21 > 0x16)
  {
    uint64_t v66 = v13;
    uint64_t v40 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v40 = v21 | 7;
    }
    uint64_t v41 = v40 + 1;
    p_dst = (std::string *)operator new(v40 + 1);
    __dst.__r_.__value_.__l.__size_ = v20 + v11;
    __dst.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    uint64_t v13 = v66;
    if (!v11) {
      goto LABEL_31;
    }
    goto LABEL_27;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = &__dst;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v20 + v11;
  if (v11)
  {
LABEL_27:
    if (v10 >= 0) {
      uint64_t v23 = &v95;
    }
    else {
      uint64_t v23 = (std::string *)v95.__r_.__value_.__r.__words[0];
    }
    memmove(p_dst, v23, v11);
  }
LABEL_31:
  unint64_t v24 = (char *)p_dst + v11;
  if (v20)
  {
    if (v17 >= 0) {
      uint64_t v25 = v67;
    }
    else {
      uint64_t v25 = *(uint64_t **)((char *)dword_25CD580 + v13);
    }
    memmove(v24, v25, v20);
  }
  v24[v20] = 0;
  if (v10 < 0) {
    operator delete(v95.__r_.__value_.__l.__data_);
  }
  std::string v95 = __dst;
  long long v92 = 0;
  uint64_t v93 = 0;
  unint64_t v94 = 0;
  uint64_t v26 = *(void *)(a1 + 80);
  uint64_t v27 = *(void *)(a1 + 88);
  std::string v86 = 0;
  std::string v87 = 0;
  uint64_t v88 = 0;
  sub_8A6F8((char *)&v86, v26, v27, 0xAAAAAAAAAAAAAAABLL * ((v27 - v26) >> 3));
  sub_5954B0((uint64_t)v89, a1 + 104);
  char v91 = *(unsigned char *)(a1 + 144);
  uint64_t v28 = (long long **)nullsub_1(a1 + 80);
  uint64_t v29 = *v28;
  uint64_t v30 = v28[1];
  while (v29 != v30)
  {
    if (*((char *)v29 + 23) < 0)
    {
      sub_4200(&__dst, *(void **)v29, *((void *)v29 + 1));
    }
    else
    {
      long long v31 = *v29;
      __dst.__r_.__value_.__r.__words[2] = *((void *)v29 + 2);
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v31;
    }
    sub_625E4(&__dst, (char *)&qword_25CD790, (uint64_t)&dword_25CD808);
    sub_8BC7D0(a1, &__dst);
    uint64_t v32 = v93;
    if ((unint64_t)v93 >= v94)
    {
      uint64_t v93 = sub_1D740(&v92, (uint64_t)&__dst);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_39;
      }
      goto LABEL_49;
    }
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      long long v33 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
      *((void *)v93 + 2) = *((void *)&__dst.__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v32 = v33;
      uint64_t v93 = v32 + 24;
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_39;
      }
LABEL_49:
      operator delete(__dst.__r_.__value_.__l.__data_);
      goto LABEL_39;
    }
    sub_4200(v93, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    uint64_t v93 = v32 + 24;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_49;
    }
LABEL_39:
    uint64_t v29 = (long long *)((char *)v29 + 24);
  }
  sub_6353B4((uint64_t)&v86, (std::string **)&v92);
  *(_OWORD *)uint64_t v75 = 0u;
  long long v76 = 0u;
  int v77 = 1065353216;
  __int16 v70 = 0;
  uint64_t v71 = 0;
  long long v69 = 0;
  sub_8A6F8((char *)&v69, (uint64_t)v86, (uint64_t)v87, 0xAAAAAAAAAAAAAAABLL * ((v87 - v86) >> 3));
  sub_5954B0((uint64_t)&__p, (uint64_t)v89);
  char v74 = v91;
  sub_637820((uint64_t)&__dst, (uint64_t)&v95, (uint64_t)v75, 6, (uint64_t)&v69, 1);
  unint64_t v34 = v73;
  if (v73)
  {
    do
    {
      unint64_t v35 = (void *)*v34;
      sub_4F4B48((uint64_t)(v34 + 2));
      operator delete(v34);
      unint64_t v34 = v35;
    }
    while (v35);
  }
  uint64_t v36 = __p;
  std::string __p = 0;
  if (v36) {
    operator delete(v36);
  }
  uint64_t v37 = (void **)v69;
  if (v69)
  {
    std::string::size_type v38 = v70;
    char v39 = v69;
    if (v70 != v69)
    {
      do
      {
        if (*((char *)v38 - 1) < 0) {
          operator delete(*(v38 - 3));
        }
        v38 -= 3;
      }
      while (v38 != v37);
      char v39 = v69;
    }
    __int16 v70 = v37;
    operator delete(v39);
  }
  std::string::size_type v42 = (void *)v76;
  if ((void)v76)
  {
    do
    {
      long long v43 = (void *)*v42;
      sub_4F4B48((uint64_t)(v42 + 2));
      operator delete(v42);
      std::string::size_type v42 = v43;
    }
    while (v43);
  }
  unint64_t v44 = v75[0];
  v75[0] = 0;
  if (v44) {
    operator delete(v44);
  }
  if (v68 && *(unsigned char *)(a1 + 2872))
  {
    uint64_t v45 = 234;
    if (!*(unsigned char *)(a1 + 2873)) {
      uint64_t v45 = 240;
    }
    std::string::size_type v46 = &qword_25CD940;
    if (*(unsigned char *)(a1 + 2873)) {
      std::string::size_type v46 = (uint64_t *)&xmmword_25CD928;
    }
    long long v47 = &byte_25CD93F;
    if (!*(unsigned char *)(a1 + 2873)) {
      long long v47 = (char *)&unk_25CD957;
    }
    if (*v47 < 0)
    {
      if (*(unsigned char *)(a1 + 2873)) {
        int v49 = (unint64_t *)&xmmword_25CD928 + 1;
      }
      else {
        int v49 = (unint64_t *)&unk_25CD948;
      }
      sub_4200(v75, *(void **)&dword_25CD580[v45], *v49);
    }
    else
    {
      *(_OWORD *)uint64_t v75 = *(_OWORD *)v46;
      *(void *)&long long v76 = v46[2];
    }
    sub_8B4708((uint64_t)&__dst, (uint64_t)v75, a4);
    if (SBYTE7(v76) < 0) {
      operator delete(v75[0]);
    }
  }
  else
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    sub_8A6F8((char *)a4, (uint64_t)__dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__dst.__r_.__value_.__l.__size_ - __dst.__r_.__value_.__r.__words[0]) >> 3));
    sub_5954B0(a4 + 24, (uint64_t)&v79);
    *(unsigned char *)(a4 + 64) = v81;
    *(_DWORD *)(a4 + 72) = v82;
    long long v48 = v84;
    *(void *)(a4 + 80) = v83;
    *(void *)(a4 + 88) = v48;
    if (v48) {
      atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(_WORD *)(a4 + 96) = v85;
  }
  unint64_t v50 = v84;
  if (v84 && !atomic_fetch_add(&v84->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
  }
  uint64_t v51 = v80;
  if (v80)
  {
    do
    {
      uint64_t v52 = (void *)*v51;
      sub_4F4B48((uint64_t)(v51 + 2));
      operator delete(v51);
      uint64_t v51 = v52;
    }
    while (v52);
  }
  uint64_t v53 = v79;
  size_t v79 = 0;
  if (v53) {
    operator delete(v53);
  }
  std::string::size_type v54 = __dst.__r_.__value_.__r.__words[0];
  if (__dst.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v55 = __dst.__r_.__value_.__l.__size_;
    unint64_t v56 = (void *)__dst.__r_.__value_.__r.__words[0];
    if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v55 - 1) < 0) {
          operator delete(*(void **)(v55 - 24));
        }
        v55 -= 24;
      }
      while (v55 != v54);
      unint64_t v56 = (void *)__dst.__r_.__value_.__r.__words[0];
    }
    __dst.__r_.__value_.__l.__size_ = v54;
    operator delete(v56);
  }
  long long v57 = v90;
  if (v90)
  {
    do
    {
      int v58 = (void *)*v57;
      sub_4F4B48((uint64_t)(v57 + 2));
      operator delete(v57);
      long long v57 = v58;
    }
    while (v58);
  }
  std::string::size_type v59 = (void *)v89[0];
  v89[0] = 0;
  if (v59) {
    operator delete(v59);
  }
  uint64_t v60 = (uint64_t)v86;
  if (v86)
  {
    uint64_t v61 = (uint64_t)v87;
    long long v62 = v86;
    if (v87 != v86)
    {
      do
      {
        if (*(char *)(v61 - 1) < 0) {
          operator delete(*(void **)(v61 - 24));
        }
        v61 -= 24;
      }
      while (v61 != v60);
      long long v62 = v86;
    }
    std::string v87 = (unsigned char *)v60;
    operator delete(v62);
  }
  int v63 = v92;
  if (v92)
  {
    char v64 = v93;
    uint64_t v65 = v92;
    if (v93 != v92)
    {
      do
      {
        if (*(v64 - 1) < 0) {
          operator delete(*((void **)v64 - 3));
        }
        v64 -= 24;
      }
      while (v64 != v63);
      uint64_t v65 = v92;
    }
    uint64_t v93 = v63;
    operator delete(v65);
  }
LABEL_126:
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v95.__r_.__value_.__l.__data_);
  }
}

void sub_8BC6C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  sub_4F31D0(&a30);
  sub_4D4880((void **)(v35 - 208));
  sub_1A668((void **)(v35 - 136));
  if (*(char *)(v35 - 89) < 0) {
    operator delete(*(void **)(v35 - 112));
  }
  _Unwind_Resume(a1);
}

void sub_8BC7D0(uint64_t a1, std::string *a2)
{
  int v4 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  int v5 = (std::string *)a2->__r_.__value_.__r.__words[0];
  std::string::size_type size = a2->__r_.__value_.__l.__size_;
  if (v4 >= 0) {
    int v7 = a2;
  }
  else {
    int v7 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  unint64_t v8 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v4 >= 0) {
    size_t v9 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v9 = a2->__r_.__value_.__l.__size_;
  }
  if (byte_25CC7B7 >= 0) {
    size_t v10 = byte_25CC7B7;
  }
  else {
    size_t v10 = qword_25CC7A8;
  }
  if (v10 <= v9)
  {
    if (byte_25CC7B7 >= 0) {
      BOOL v12 = &qword_25CC7A0;
    }
    else {
      BOOL v12 = (uint64_t *)qword_25CC7A0;
    }
    BOOL v11 = memcmp(v12, v7, v10) == 0;
  }
  else
  {
    BOOL v11 = 0;
  }
  if (byte_25CC79F >= 0) {
    size_t v13 = byte_25CC79F;
  }
  else {
    size_t v13 = qword_25CC790;
  }
  if (v13 <= v9)
  {
    if (byte_25CC79F >= 0) {
      uint64_t v15 = &qword_25CC788;
    }
    else {
      uint64_t v15 = (uint64_t *)qword_25CC788;
    }
    BOOL v14 = memcmp(v15, v7, v13) == 0;
    if (!v14 && !v11) {
      return;
    }
  }
  else
  {
    BOOL v14 = 0;
    if (!v11) {
      return;
    }
  }
  BOOL v94 = v14;
  BOOL v96 = v11;
  uint64_t v95 = a1;
  HIBYTE(v102) = 0;
  LOBYTE(__p[0]) = 0;
  if (byte_25CD72F >= 0) {
    size_t v16 = &qword_25CD718;
  }
  else {
    size_t v16 = (uint64_t *)qword_25CD718;
  }
  if (byte_25CD72F >= 0) {
    int64_t v17 = byte_25CD72F;
  }
  else {
    int64_t v17 = qword_25CD720;
  }
  if (!v17)
  {
    unint64_t v23 = 0;
    goto LABEL_41;
  }
  if ((uint64_t)v9 >= v17)
  {
    unint64_t v18 = (char *)v7 + v9;
    int v19 = *(char *)v16;
    size_t v20 = v7;
    while (1)
    {
      if (v9 - v17 == -1) {
        goto LABEL_48;
      }
      unint64_t v21 = (char *)memchr(v20, v19, v9 - v17 + 1);
      if (!v21) {
        goto LABEL_48;
      }
      unint64_t v22 = v21;
      if (!memcmp(v21, v16, v17)) {
        break;
      }
      size_t v20 = (std::string *)(v22 + 1);
      size_t v9 = v18 - (v22 + 1);
      if ((uint64_t)v9 < v17) {
        goto LABEL_48;
      }
    }
    if (v22 != v18)
    {
      unint64_t v23 = v22 - (char *)v7;
      if (v22 - (char *)v7 != -1)
      {
LABEL_41:
        if ((v8 & 0x80) != 0)
        {
          if (size >= v23)
          {
            unint64_t v8 = size;
            size_t v24 = size - v23;
            if (size - v23 <= 0x7FFFFFFFFFFFFFF7)
            {
LABEL_44:
              if (v24 >= 0x17)
              {
                uint64_t v48 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v24 | 7) != 0x17) {
                  uint64_t v48 = v24 | 7;
                }
                uint64_t v49 = v48 + 1;
                p_dst = (long long *)operator new(v48 + 1);
                *((void *)&__dst + 1) = v24;
                int64_t v100 = v49 | 0x8000000000000000;
                *(void *)&long long __dst = p_dst;
              }
              else
              {
                HIBYTE(v100) = v24;
                p_dst = &__dst;
                if (v8 == v23)
                {
                  *((unsigned char *)&__dst + v24) = 0;
                  if ((SHIBYTE(v102) & 0x80000000) == 0)
                  {
LABEL_47:
                    *(_OWORD *)std::string __p = __dst;
                    int64_t v102 = v100;
                    goto LABEL_48;
                  }
LABEL_105:
                  operator delete(__p[0]);
                  goto LABEL_47;
                }
              }
              memmove(p_dst, (char *)v5 + v23, v24);
              *((unsigned char *)p_dst + v24) = 0;
              if ((SHIBYTE(v102) & 0x80000000) == 0) {
                goto LABEL_47;
              }
              goto LABEL_105;
            }
LABEL_130:
            sub_188D690();
          }
        }
        else
        {
          int v5 = a2;
          if (v23 <= v8)
          {
            size_t v24 = v8 - v23;
            if (v8 - v23 <= 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_44;
            }
            goto LABEL_130;
          }
        }
        sub_5AD0();
      }
    }
  }
LABEL_48:
  BOOL v26 = v96;
  if (!v96)
  {
    int v27 = byte_25CC79F;
    if (byte_25CC79F >= 0) {
      size_t v28 = byte_25CC79F;
    }
    else {
      size_t v28 = qword_25CC790;
    }
    int v29 = SHIBYTE(v102);
    if (v102 >= 0) {
      size_t v30 = HIBYTE(v102);
    }
    else {
      size_t v30 = (size_t)__p[1];
    }
    unint64_t v34 = v30 + v28;
    if (v30 + v28 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v34 > 0x16)
    {
      uint64_t v38 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v34 | 7) != 0x17) {
        uint64_t v38 = v34 | 7;
      }
      uint64_t v39 = v38 + 1;
      uint64_t v32 = (long long *)operator new(v38 + 1);
      *((void *)&__dst + 1) = v30 + v28;
      int64_t v100 = v39 | 0x8000000000000000;
      *(void *)&long long __dst = v32;
      BOOL v26 = 0;
      uint64_t v33 = v95;
      if (!v28) {
        goto LABEL_81;
      }
    }
    else
    {
      int64_t v100 = 0;
      long long __dst = 0uLL;
      uint64_t v32 = &__dst;
      HIBYTE(v100) = v30 + v28;
      uint64_t v33 = v95;
      if (!v28) {
        goto LABEL_81;
      }
    }
    uint64_t v37 = &qword_25CC788;
    goto LABEL_77;
  }
  int v27 = byte_25CC7B7;
  if (byte_25CC7B7 >= 0) {
    size_t v28 = byte_25CC7B7;
  }
  else {
    size_t v28 = qword_25CC7A8;
  }
  int v29 = SHIBYTE(v102);
  if (v102 >= 0) {
    size_t v30 = HIBYTE(v102);
  }
  else {
    size_t v30 = (size_t)__p[1];
  }
  unint64_t v31 = v30 + v28;
  if (v30 + v28 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v31 <= 0x16)
  {
    int64_t v100 = 0;
    long long __dst = 0uLL;
    uint64_t v32 = &__dst;
    HIBYTE(v100) = v30 + v28;
    uint64_t v33 = v95;
    if (!v28) {
      goto LABEL_81;
    }
    goto LABEL_72;
  }
  uint64_t v35 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v31 | 7) != 0x17) {
    uint64_t v35 = v31 | 7;
  }
  uint64_t v36 = v35 + 1;
  uint64_t v32 = (long long *)operator new(v35 + 1);
  *((void *)&__dst + 1) = v30 + v28;
  int64_t v100 = v36 | 0x8000000000000000;
  *(void *)&long long __dst = v32;
  BOOL v26 = v96;
  uint64_t v33 = v95;
  if (v28)
  {
LABEL_72:
    uint64_t v37 = &qword_25CC7A0;
LABEL_77:
    if (v27 >= 0) {
      uint64_t v40 = v37;
    }
    else {
      uint64_t v40 = (const void *)*v37;
    }
    memmove(v32, v40, v28);
  }
LABEL_81:
  uint64_t v41 = (char *)v32 + v28;
  if (v30)
  {
    if (v29 >= 0) {
      std::string::size_type v42 = __p;
    }
    else {
      std::string::size_type v42 = (void **)__p[0];
    }
    memmove(v41, v42, v30);
  }
  v41[v30] = 0;
  uint64_t v43 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((v43 & 0x80u) == 0) {
    std::string::size_type v44 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v44 = a2->__r_.__value_.__l.__size_;
  }
  uint64_t v45 = HIBYTE(v100);
  if (v100 < 0) {
    uint64_t v45 = *((void *)&__dst + 1);
  }
  if (v44 != v45) {
    goto LABEL_107;
  }
  if (v100 >= 0) {
    std::string::size_type v46 = (unsigned __int8 *)&__dst;
  }
  else {
    std::string::size_type v46 = (unsigned __int8 *)__dst;
  }
  if ((v43 & 0x80) != 0)
  {
    if (!memcmp(a2->__r_.__value_.__l.__data_, v46, a2->__r_.__value_.__l.__size_)) {
      goto LABEL_206;
    }
LABEL_107:
    if (v94 && sub_6823C0(v33 + 2168))
    {
      char v98 = 0;
      __s[0] = 0;
      int64_t v50 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      if ((v50 & 0x80u) == 0) {
        uint64_t v51 = a2;
      }
      else {
        uint64_t v51 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      if (byte_25CD2AF >= 0) {
        uint64_t v52 = &qword_25CD298;
      }
      else {
        uint64_t v52 = (uint64_t *)qword_25CD298;
      }
      if (byte_25CD2AF >= 0) {
        int64_t v53 = byte_25CD2AF;
      }
      else {
        int64_t v53 = unk_25CD2A0;
      }
      if (v53)
      {
        if ((v50 & 0x80u) != 0) {
          int64_t v50 = a2->__r_.__value_.__l.__size_;
        }
        if (v50 >= v53)
        {
          std::string::size_type v54 = (char *)v51 + v50;
          int v55 = *(char *)v52;
          unint64_t v56 = v51;
          do
          {
            uint64_t v57 = v50 - v53;
            if (v57 == -1) {
              break;
            }
            int v58 = (char *)memchr(v56, v55, v57 + 1);
            if (!v58) {
              break;
            }
            std::string::size_type v59 = v58;
            if (!memcmp(v58, v52, v53))
            {
              if (v59 != v54)
              {
                std::string::size_type v60 = v59 - (char *)v51;
                if (v59 - (char *)v51 != -1) {
                  goto LABEL_135;
                }
              }
              break;
            }
            unint64_t v56 = (std::string *)(v59 + 1);
            int64_t v50 = v54 - (v59 + 1);
          }
          while (v50 >= v53);
        }
      }
      else
      {
        std::string::size_type v60 = 0;
LABEL_135:
        std::string::replace(a2, v60, v53, __s, 0);
        if (v98 < 0) {
          operator delete(*(void **)__s);
        }
      }
      char v98 = 0;
      __s[0] = 0;
      int64_t v61 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      if ((v61 & 0x80u) == 0) {
        long long v62 = a2;
      }
      else {
        long long v62 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      if (byte_25CD51F >= 0) {
        int v63 = &qword_25CD508;
      }
      else {
        int v63 = (uint64_t *)qword_25CD508;
      }
      if (byte_25CD51F >= 0) {
        int64_t v64 = byte_25CD51F;
      }
      else {
        int64_t v64 = unk_25CD510;
      }
      if (v64)
      {
        if ((v61 & 0x80u) != 0) {
          int64_t v61 = a2->__r_.__value_.__l.__size_;
        }
        if (v61 >= v64)
        {
          uint64_t v65 = (char *)v62 + v61;
          int v66 = *(char *)v63;
          unint64_t v67 = v62;
          do
          {
            uint64_t v68 = v61 - v64;
            if (v68 == -1) {
              break;
            }
            long long v69 = (char *)memchr(v67, v66, v68 + 1);
            if (!v69) {
              break;
            }
            __int16 v70 = v69;
            if (!memcmp(v69, v63, v64))
            {
              if (v70 != v65)
              {
                std::string::size_type v71 = v70 - (char *)v62;
                if (v70 - (char *)v62 != -1) {
                  goto LABEL_157;
                }
              }
              break;
            }
            unint64_t v67 = (std::string *)(v70 + 1);
            int64_t v61 = v65 - (v70 + 1);
          }
          while (v61 >= v64);
        }
      }
      else
      {
        std::string::size_type v71 = 0;
LABEL_157:
        std::string::replace(a2, v71, v64, __s, 0);
        if (v98 < 0) {
          operator delete(*(void **)__s);
        }
      }
      uint64_t v33 = v95;
      BOOL v26 = v96;
    }
    if (v26 && sub_6823D0(v33 + 2168))
    {
      char v98 = 0;
      __s[0] = 0;
      int64_t v72 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      if ((v72 & 0x80u) == 0) {
        char v73 = a2;
      }
      else {
        char v73 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      if (byte_25CD297 >= 0) {
        char v74 = &qword_25CD280;
      }
      else {
        char v74 = (uint64_t *)qword_25CD280;
      }
      if (byte_25CD297 >= 0) {
        int64_t v75 = byte_25CD297;
      }
      else {
        int64_t v75 = unk_25CD288;
      }
      if (v75)
      {
        if ((v72 & 0x80u) != 0) {
          int64_t v72 = a2->__r_.__value_.__l.__size_;
        }
        if (v72 >= v75)
        {
          long long v76 = (char *)v73 + v72;
          int v77 = *(char *)v74;
          char v78 = v73;
          do
          {
            uint64_t v79 = v72 - v75;
            if (v79 == -1) {
              break;
            }
            unint64_t v80 = (char *)memchr(v78, v77, v79 + 1);
            if (!v80) {
              break;
            }
            char v81 = v80;
            if (!memcmp(v80, v74, v75))
            {
              if (v81 != v76)
              {
                std::string::size_type v82 = v81 - (char *)v73;
                if (v81 - (char *)v73 != -1) {
                  goto LABEL_182;
                }
              }
              break;
            }
            char v78 = (std::string *)(v81 + 1);
            int64_t v72 = v76 - (v81 + 1);
          }
          while (v72 >= v75);
        }
      }
      else
      {
        std::string::size_type v82 = 0;
LABEL_182:
        std::string::replace(a2, v82, v75, __s, 0);
        if (v98 < 0) {
          operator delete(*(void **)__s);
        }
      }
      char v98 = 0;
      __s[0] = 0;
      int64_t v83 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      if ((v83 & 0x80u) == 0) {
        char v84 = a2;
      }
      else {
        char v84 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      if (byte_25CD51F >= 0) {
        __int16 v85 = &qword_25CD508;
      }
      else {
        __int16 v85 = (uint64_t *)qword_25CD508;
      }
      if (byte_25CD51F >= 0) {
        int64_t v86 = byte_25CD51F;
      }
      else {
        int64_t v86 = unk_25CD510;
      }
      if (v86)
      {
        if ((v83 & 0x80u) != 0) {
          int64_t v83 = a2->__r_.__value_.__l.__size_;
        }
        if (v83 >= v86)
        {
          std::string v87 = (char *)v84 + v83;
          int v88 = *(char *)v85;
          unint64_t v89 = v84;
          while (1)
          {
            uint64_t v90 = v83 - v86;
            if (v90 == -1) {
              break;
            }
            char v91 = (char *)memchr(v89, v88, v90 + 1);
            if (!v91) {
              break;
            }
            long long v92 = v91;
            if (!memcmp(v91, v85, v86))
            {
              if (v92 != v87)
              {
                std::string::size_type v93 = v92 - (char *)v84;
                if (v92 - (char *)v84 != -1) {
                  goto LABEL_204;
                }
              }
              goto LABEL_206;
            }
            unint64_t v89 = (std::string *)(v92 + 1);
            int64_t v83 = v87 - (v92 + 1);
            if (v83 < v86) {
              goto LABEL_206;
            }
          }
        }
      }
      else
      {
        std::string::size_type v93 = 0;
LABEL_204:
        std::string::replace(a2, v93, v86, __s, 0);
        if (v98 < 0) {
          operator delete(*(void **)__s);
        }
      }
    }
    goto LABEL_206;
  }
  if (*((unsigned char *)&a2->__r_.__value_.__s + 23))
  {
    long long v47 = a2;
    while (v47->__r_.__value_.__s.__data_[0] == *v46)
    {
      long long v47 = (std::string *)((char *)v47 + 1);
      ++v46;
      if (!--v43) {
        goto LABEL_206;
      }
    }
    goto LABEL_107;
  }
LABEL_206:
  if ((SHIBYTE(v100) & 0x80000000) == 0)
  {
    if ((v29 & 0x80000000) == 0) {
      return;
    }
LABEL_210:
    operator delete(__p[0]);
    return;
  }
  operator delete((void *)__dst);
  if (v29 < 0) {
    goto LABEL_210;
  }
}

void sub_8BD090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v25 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((v25 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a25);
  _Unwind_Resume(exception_object);
}

void sub_8BD104(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
}

void sub_8BD10C(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  long long v93 = 0uLL;
  unint64_t v94 = 0;
  uint64_t v10 = *(void *)(a1 + 1952);
  uint64_t v11 = *(void *)(a1 + 1960);
  int v12 = *(_DWORD *)(a1 + 2128);
  size_t v13 = (std::__shared_weak_count *)operator new(0xB98uLL);
  int v14 = v12 - 1;
  v13->__shared_owners_ = 0;
  v13->__shared_weak_owners_ = 0;
  v13->__vftable = (std::__shared_weak_count_vtbl *)off_243AE78;
  std::string::size_type v15 = (std::string::size_type)&v13[1];
  sub_8AEE64((std::string::size_type)&v13[1], v10, v11, a2, a3, v14);
  char v91 = &v13[1].__vftable;
  long long v92 = v13;
  (*(void (**)(long long **__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 168))(&v86, a1, 1, a4);
  if (!sub_637DD8(&v86))
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    goto LABEL_75;
  }
  sub_8B54D0(v15, 0, 0, 0, (uint64_t)&v81);
  if (BYTE4(v13[78].__vftable))
  {
    uint64_t v16 = nullsub_1(&v81);
    v68[0] = 0;
    v68[1] = 0;
    __p[0] = 0;
    sub_8A6F8((char *)v68, *(void *)v16, *(void *)(v16 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v16 + 8) - *(void *)v16) >> 3));
    sub_5954B0((uint64_t)&__p[1], v16 + 24);
    char v74 = *(unsigned char *)(v16 + 64);
    sub_81832C(v15, (long long **)v68);
    sub_63797C((uint64_t)&v81, (uint64_t)v68);
    int64_t v17 = v71;
    if (v71)
    {
      do
      {
        unint64_t v18 = (void *)*v17;
        sub_4F4B48((uint64_t)(v17 + 2));
        operator delete(v17);
        int64_t v17 = v18;
      }
      while (v18);
    }
    int v19 = __p[1];
    __p[1] = 0;
    if (v19) {
      operator delete(v19);
    }
    size_t v20 = (void **)v68[0];
    if (v68[0])
    {
      unint64_t v21 = (void **)v68[1];
      unint64_t v22 = v68[0];
      if (v68[1] != v68[0])
      {
        do
        {
          if (*((char *)v21 - 1) < 0) {
            operator delete(*(v21 - 3));
          }
          v21 -= 3;
        }
        while (v21 != v20);
        unint64_t v22 = v68[0];
      }
      v68[1] = v20;
      operator delete(v22);
    }
  }
  sub_637D8C((uint64_t)&v86, &v80);
  while (1)
  {
    sub_637D8C(v80, v68);
    size_t v24 = v68[0];
    unint64_t v23 = (std::__shared_weak_count *)v68[1];
    if (v68[1] && !atomic_fetch_add((atomic_ullong *volatile)v68[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    if (!v24) {
      break;
    }
    sub_637D8C(v80, v68);
    long long v25 = *(_OWORD *)v68;
    v68[0] = 0;
    v68[1] = 0;
    BOOL v26 = (std::__shared_weak_count *)*((void *)&v80 + 1);
    long long v80 = v25;
    if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
      int v27 = (std::__shared_weak_count *)v68[1];
      if (v68[1]) {
        goto LABEL_24;
      }
    }
    else
    {
      int v27 = (std::__shared_weak_count *)v68[1];
      if (v68[1])
      {
LABEL_24:
        if (!atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
    }
  }
  uint64_t v28 = v80;
  int v29 = sub_897368((uint64_t)v91);
  sub_63733C(v28, v29);
  uint64_t v30 = v80;
  unint64_t v31 = (std::__shared_weak_count *)operator new(0x80uLL);
  v31->__shared_owners_ = 0;
  v31->__shared_weak_owners_ = 0;
  v31->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
  sub_59540C((uint64_t)v68, (uint64_t)&v31[1], (uint64_t)&v81);
  char v78 = &v31[1].__vftable;
  uint64_t v79 = v31;
  sub_637344(v30, (uint64_t *)&v78);
  uint64_t v32 = v79;
  if (v79 && !atomic_fetch_add(&v79->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
    uint64_t v33 = *((void *)&v93 + 1);
    if (*((void *)&v93 + 1) >= v94) {
      goto LABEL_33;
    }
LABEL_31:
    sub_63D394((uint64_t)&v94, v33, (uint64_t)&v86);
    uint64_t v34 = v33 + 104;
  }
  else
  {
    uint64_t v33 = *((void *)&v93 + 1);
    if (*((void *)&v93 + 1) < v94) {
      goto LABEL_31;
    }
LABEL_33:
    uint64_t v34 = sub_63D140((uint64_t *)&v93, (uint64_t)&v86);
  }
  *((void *)&v93 + 1) = v34;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 168))(v68, a1, 1, a4);
  uint64_t v35 = *((void *)&v93 + 1);
  if (*((void *)&v93 + 1) >= v94)
  {
    uint64_t v41 = sub_63D48C((void ***)&v93, (uint64_t)v68);
    std::string::size_type v42 = (std::__shared_weak_count *)*((void *)&v76 + 1);
    *((void *)&v93 + 1) = v41;
    if (*((void *)&v76 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v76 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  else
  {
    *(void *)(*((void *)&v93 + 1) + 16) = 0;
    *(_OWORD *)uint64_t v35 = 0u;
    *(_OWORD *)uint64_t v35 = *(_OWORD *)v68;
    *(void **)(v35 + 16) = __p[0];
    uint64_t v36 = __p[1];
    *(_OWORD *)uint64_t v68 = 0u;
    *(_OWORD *)std::string __p = 0u;
    *(void *)(v35 + 24) = v36;
    *(void *)(v35 + 32) = v70;
    uint64_t v70 = 0;
    uint64_t v37 = v71;
    *(void *)(v35 + 40) = v71;
    uint64_t v38 = v72;
    *(void *)(v35 + 48) = v72;
    *(_DWORD *)(v35 + 56) = v73;
    if (v38)
    {
      unint64_t v39 = v37[1];
      unint64_t v40 = *(void *)(v35 + 32);
      if ((v40 & (v40 - 1)) != 0)
      {
        if (v39 >= v40) {
          v39 %= v40;
        }
      }
      else
      {
        v39 &= v40 - 1;
      }
      v36[v39] = v35 + 40;
      std::string::size_type v71 = 0;
      uint64_t v72 = 0;
    }
    *(unsigned char *)(v35 + 64) = v74;
    *(_DWORD *)(v35 + 72) = v75;
    *(_OWORD *)(v35 + 80) = v76;
    long long v76 = 0uLL;
    *(_WORD *)(v35 + 96) = v77;
    *((void *)&v93 + 1) = v35 + 104;
  }
  uint64_t v43 = v71;
  if (v71)
  {
    do
    {
      std::string::size_type v44 = (void *)*v43;
      sub_4F4B48((uint64_t)(v43 + 2));
      operator delete(v43);
      uint64_t v43 = v44;
    }
    while (v44);
  }
  uint64_t v45 = __p[1];
  __p[1] = 0;
  if (v45) {
    operator delete(v45);
  }
  std::string::size_type v46 = (void **)v68[0];
  if (v68[0])
  {
    long long v47 = (void **)v68[1];
    uint64_t v48 = v68[0];
    if (v68[1] != v68[0])
    {
      do
      {
        if (*((char *)v47 - 1) < 0) {
          operator delete(*(v47 - 3));
        }
        v47 -= 3;
      }
      while (v47 != v46);
      uint64_t v48 = v68[0];
    }
    v68[1] = v46;
    operator delete(v48);
  }
  *(_OWORD *)a5 = v93;
  a5[2] = v94;
  long long v93 = 0uLL;
  unint64_t v94 = 0;
  uint64_t v49 = (std::__shared_weak_count *)*((void *)&v80 + 1);
  if (*((void *)&v80 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v80 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
    std::__shared_weak_count::__release_weak(v49);
  }
  int64_t v50 = v85;
  if (v85 && !atomic_fetch_add(&v85->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
  }
  uint64_t v51 = v84;
  if (v84)
  {
    do
    {
      uint64_t v52 = (void *)*v51;
      sub_4F4B48((uint64_t)(v51 + 2));
      operator delete(v51);
      uint64_t v51 = v52;
    }
    while (v52);
  }
  int64_t v53 = v83;
  int64_t v83 = 0;
  if (v53) {
    operator delete(v53);
  }
  std::string::size_type v54 = (void **)v81;
  if (v81)
  {
    int v55 = v82;
    unint64_t v56 = v81;
    if (v82 != v81)
    {
      do
      {
        if (*((char *)v55 - 1) < 0) {
          operator delete(*(v55 - 3));
        }
        v55 -= 3;
      }
      while (v55 != v54);
      unint64_t v56 = v81;
    }
    std::string::size_type v82 = v54;
    operator delete(v56);
  }
LABEL_75:
  uint64_t v57 = v90;
  if (v90 && !atomic_fetch_add(&v90->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
    std::__shared_weak_count::__release_weak(v57);
  }
  int v58 = v89;
  if (v89)
  {
    do
    {
      std::string::size_type v59 = (void *)*v58;
      sub_4F4B48((uint64_t)(v58 + 2));
      operator delete(v58);
      int v58 = v59;
    }
    while (v59);
  }
  std::string::size_type v60 = v88;
  int v88 = 0;
  if (v60) {
    operator delete(v60);
  }
  int64_t v61 = v86;
  if (v86)
  {
    long long v62 = v87;
    int v63 = v86;
    if (v87 != v86)
    {
      do
      {
        if (*((char *)v62 - 1) < 0) {
          operator delete(*((void **)v62 - 3));
        }
        long long v62 = (long long *)((char *)v62 - 24);
      }
      while (v62 != v61);
      int v63 = v86;
    }
    std::string v87 = v61;
    operator delete(v63);
  }
  int64_t v64 = v92;
  if (v92 && !atomic_fetch_add(&v92->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
    std::__shared_weak_count::__release_weak(v64);
  }
  uint64_t v65 = (void **)v93;
  if ((void)v93)
  {
    int v66 = (void **)*((void *)&v93 + 1);
    unint64_t v67 = (void *)v93;
    if (*((void *)&v93 + 1) != (void)v93)
    {
      do
        int v66 = sub_4F31D0(v66 - 13);
      while (v66 != v65);
      unint64_t v67 = (void *)v93;
    }
    *((void *)&v93 + 1) = v65;
    operator delete(v67);
  }
}

void sub_8BD95C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,void *a27)
{
  sub_4F31D0(&a9);
  sub_14A84((uint64_t)&a25);
  sub_4F31D0(&a27);
  sub_4F31D0((void **)(v27 - 232));
  sub_14A84(v27 - 128);
  sub_5920E0((void **)(v27 - 112));
  _Unwind_Resume(a1);
}

void sub_8BDA70(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
}

void sub_8BDA78(unsigned char *a1@<X0>, std::string *a2@<X8>)
{
  if (a1[2875])
  {
    if ((byte_25CFD8F & 0x80000000) == 0)
    {
      int v3 = &xmmword_25CFD78;
LABEL_7:
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *v3;
      a2->__r_.__value_.__r.__words[2] = *((void *)v3 + 2);
      return;
    }
    unint64_t v6 = *((void *)&xmmword_25CFD78 + 1);
    int v5 = (void *)xmmword_25CFD78;
    int v7 = a2;
    goto LABEL_11;
  }
  if (a1[2877])
  {
    if ((byte_25CFDA7 & 0x80000000) == 0)
    {
      int v3 = &xmmword_25CFD90;
      goto LABEL_7;
    }
    unint64_t v6 = *((void *)&xmmword_25CFD90 + 1);
    int v5 = (void *)xmmword_25CFD90;
    int v7 = a2;
LABEL_11:
    sub_4200(v7, v5, v6);
    return;
  }
  if (sub_89E9D0((uint64_t)a1))
  {
    sub_814258((uint64_t)a1, (uint64_t)a2);
    if (a1[1860])
    {
      if (byte_25CD87F >= 0) {
        unint64_t v8 = (const std::string::value_type *)&qword_25CD868;
      }
      else {
        unint64_t v8 = (const std::string::value_type *)qword_25CD868;
      }
      if (byte_25CD87F >= 0) {
        std::string::size_type v9 = byte_25CD87F;
      }
      else {
        std::string::size_type v9 = unk_25CD870;
      }
      std::string::append(a2, v8, v9);
      if (byte_25CDB07 >= 0) {
        uint64_t v10 = (const std::string::value_type *)&qword_25CDAF0;
      }
      else {
        uint64_t v10 = (const std::string::value_type *)qword_25CDAF0;
      }
      if (byte_25CDB07 >= 0) {
        std::string::size_type v11 = byte_25CDB07;
      }
      else {
        std::string::size_type v11 = unk_25CDAF8;
      }
      std::string::append(a2, v10, v11);
    }
  }
  else
  {
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
  }
}

void sub_8BDBC8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_8BDBE4(uint64_t a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  if (sub_7F7188(a1))
  {
    if (*(unsigned char *)(a1 + 2877))
    {
      if (byte_25CC9AF < 0)
      {
        long long v16 = xmmword_25CC998;
        sub_4200(a3, (void *)v16, *((unint64_t *)&v16 + 1));
      }
      else
      {
        *(_OWORD *)&a3->__r_.__value_.__l.__data_ = xmmword_25CC998;
        a3->__r_.__value_.__r.__words[2] = unk_25CC9A8;
      }
    }
    else
    {
      sub_8115CC(a1, a3);
    }
    return;
  }
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  uint64_t v6 = *(void *)(a1 + 936);
  uint64_t v7 = *(void *)(a1 + 944);
  if (v6 == v7)
  {
    if (!sub_6F2FD8(a1 + 304)) {
      return;
    }
    uint64_t v6 = *(void *)(a1 + 936);
    uint64_t v7 = *(void *)(a1 + 944);
    if (v6 == v7)
    {
      BOOL v8 = sub_6F2FD8(a1 + 304);
      uint64_t v6 = *(void *)(a1 + 936);
      uint64_t v7 = *(void *)(a1 + 944);
      if (v8) {
        goto LABEL_15;
      }
    }
  }
  if (v7 - v6 == 152)
  {
LABEL_15:
    int v9 = 1;
  }
  else
  {
    int v9 = sub_7F7B64(a1) ^ 1;
    uint64_t v6 = *(void *)(a1 + 936);
    uint64_t v7 = *(void *)(a1 + 944);
  }
  if (v6 == v7) {
    uint64_t v10 = a1 + 304;
  }
  else {
    uint64_t v10 = v6;
  }
  if (sub_6F2880(v10 + 64) && !*(unsigned char *)(a1 + 2121))
  {
    BOOL v11 = 0;
    if (!*(unsigned char *)(a1 + 2122))
    {
      int v17 = *(_DWORD *)(a1 + 1848);
      if (v17 != 23)
      {
        BOOL v11 = 0;
        if (!*(unsigned char *)(a1 + 2123) && v17 != 92) {
          BOOL v11 = *(unsigned char *)(a1 + 1859) == 0;
        }
      }
    }
  }
  else
  {
    BOOL v11 = 0;
  }
  sub_89EFE4(a1, (uint64_t)v33);
  if (v9) {
    int v12 = (const std::string *)v33;
  }
  else {
    int v12 = (const std::string *)&dword_25CD1F0;
  }
  std::string::operator=(a3, v12);
  char v13 = !v11;
  if (!*(unsigned char *)(a1 + 1856)) {
    char v13 = 1;
  }
  if ((v13 & 1) == 0)
  {
    std::string::operator=(a3, (const std::string *)&qword_25CD250);
    if (sub_6F2DA8(v10 + 64))
    {
      if (byte_25CD69F >= 0) {
        int v14 = (const std::string::value_type *)&qword_25CD688;
      }
      else {
        int v14 = (const std::string::value_type *)qword_25CD688;
      }
      if (byte_25CD69F >= 0) {
        std::string::size_type v15 = byte_25CD69F;
      }
      else {
        std::string::size_type v15 = unk_25CD690;
      }
      std::string::append(a3, v14, v15);
    }
    else if (sub_6F3124(v10))
    {
      if (v9)
      {
        sub_89F110(a1, (uint64_t)__p);
      }
      else if (byte_25CD42F < 0)
      {
        sub_4200(__p, (void *)xmmword_25CD418, *((unint64_t *)&xmmword_25CD418 + 1));
      }
      else
      {
        *(_OWORD *)std::string __p = xmmword_25CD418;
        uint64_t v32 = unk_25CD428;
      }
      unint64_t v18 = v32 >= 0 ? (const std::string::value_type *)__p : (const std::string::value_type *)__p[0];
      int v19 = v32 >= 0 ? (void *)HIBYTE(v32) : __p[1];
      std::string::append(a3, v18, (std::string::size_type)v19);
      if (SHIBYTE(v32) < 0) {
        operator delete(__p[0]);
      }
    }
  }
  if (((v9 | a2) & 1) == 0)
  {
    uint64_t v20 = *(void *)(a1 + 936);
    BOOL v21 = sub_6F2880(v20 + 216);
    if (v21 && *(unsigned char *)(a1 + 1856)) {
      unint64_t v22 = &qword_25CD658;
    }
    else {
      unint64_t v22 = &qword_25CD430;
    }
    int v23 = *((char *)v22 + 23);
    size_t v24 = v23 >= 0 ? (const std::string::value_type *)v22 : (const std::string::value_type *)*v22;
    std::string::size_type v25 = v23 >= 0 ? *((unsigned __int8 *)v22 + 23) : v22[1];
    std::string::append(a3, v24, v25);
    if (*(unsigned char *)(a1 + 1856) && v21)
    {
      if (sub_6F2DA8(v20 + 216))
      {
        uint64_t v27 = &qword_25CD6A0;
      }
      else
      {
        if (!sub_6F3124(v20 + 152)) {
          goto LABEL_85;
        }
        uint64_t v27 = &qword_25CD430;
      }
      int v28 = *((char *)v27 + 23);
      if (v28 >= 0) {
        int v29 = (const std::string::value_type *)v27;
      }
      else {
        int v29 = (const std::string::value_type *)*v27;
      }
      if (v28 >= 0) {
        std::string::size_type v30 = *((unsigned __int8 *)v27 + 23);
      }
      else {
        std::string::size_type v30 = v27[1];
      }
      std::string::append(a3, v29, v30);
    }
  }
LABEL_85:
  if (v34 < 0) {
    operator delete(v33[0]);
  }
}

void sub_8BDF8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if (*(char *)(v20 + 23) < 0) {
      goto LABEL_6;
    }
  }
  else if (*(char *)(v20 + 23) < 0)
  {
LABEL_6:
    operator delete(*(void **)v20);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_8BE038(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 960);
  if (0x86BCA1AF286BCA1BLL * ((*(void *)(a1 + 968) - v2) >> 3) < 2) {
    return 1;
  }
  sub_4AA8E0((char *)__dst, (long long *)(v2 + 152));
  BOOL v7 = !sub_6F2880((uint64_t)&v13) || *(unsigned char *)(a1 + 1856) == 0;
  uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  BOOL v3 = v8 != 0;
  if (!v7)
  {
    if (v8) {
      BOOL v3 = sub_6F3124((uint64_t)__dst);
    }
  }
  if (v19 < 0)
  {
    operator delete(__p);
    if ((v17 & 0x80000000) == 0)
    {
LABEL_14:
      if ((v15 & 0x80000000) == 0) {
        goto LABEL_15;
      }
      goto LABEL_20;
    }
  }
  else if ((v17 & 0x80000000) == 0)
  {
    goto LABEL_14;
  }
  operator delete(v16);
  if ((v15 & 0x80000000) == 0)
  {
LABEL_15:
    if ((v12 & 0x80000000) == 0) {
      goto LABEL_16;
    }
LABEL_21:
    operator delete(v11);
    if ((v10 & 0x80000000) == 0) {
      return v3;
    }
    goto LABEL_22;
  }
LABEL_20:
  operator delete(v14);
  if (v12 < 0) {
    goto LABEL_21;
  }
LABEL_16:
  if ((v10 & 0x80000000) == 0) {
    return v3;
  }
LABEL_22:
  operator delete(__dst[0]);
  return v3;
}

void sub_8BE18C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4A50F4((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *sub_8BE1A0@<X0>(std::string *result@<X0>, char a2@<W1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  uint64_t data = (uint64_t)result[40].__r_.__value_.__l.__data_;
  std::string::size_type size = result[40].__r_.__value_.__l.__size_;
  if (data == size) {
    return result;
  }
  uint64_t v6 = result;
  BOOL v8 = sub_6F2880(data + 64);
  if (v8 && v6[77].__r_.__value_.__s.__data_[8]) {
    int v9 = (const std::string *)&qword_25CD268;
  }
  else {
    int v9 = (const std::string *)&qword_25CD208;
  }
  uint64_t result = std::string::operator=(a3, v9);
  if (v6[77].__r_.__value_.__s.__data_[8]) {
    BOOL v10 = v8;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    if (sub_6F2DA8(data + 64))
    {
      BOOL v11 = (uint64_t *)&xmmword_25CD6D0;
LABEL_14:
      int v12 = *((char *)v11 + 23);
      if (v12 >= 0) {
        uint64_t v13 = (const std::string::value_type *)v11;
      }
      else {
        uint64_t v13 = (const std::string::value_type *)*v11;
      }
      if (v12 >= 0) {
        std::string::size_type v14 = *((unsigned __int8 *)v11 + 23);
      }
      else {
        std::string::size_type v14 = v11[1];
      }
      uint64_t result = std::string::append(a3, v13, v14);
      goto LABEL_21;
    }
    uint64_t result = (std::string *)sub_6F3124(data);
    if (result)
    {
      BOOL v11 = &qword_25CD448;
      goto LABEL_14;
    }
  }
LABEL_21:
  if (size - data != 152 && (a2 & 1) == 0)
  {
    std::string::pointer v15 = v6[40].__r_.__value_.__l.__data_;
    BOOL v16 = sub_6F2880((uint64_t)(v15 + 216));
    if (v16 && v6[77].__r_.__value_.__s.__data_[8]) {
      char v17 = &qword_25CD670;
    }
    else {
      char v17 = &qword_25CD460;
    }
    int v18 = *((char *)v17 + 23);
    char v19 = v18 >= 0 ? (const std::string::value_type *)v17 : (const std::string::value_type *)*v17;
    std::string::size_type v20 = v18 >= 0 ? *((unsigned __int8 *)v17 + 23) : v17[1];
    uint64_t result = std::string::append(a3, v19, v20);
    if (v6[77].__r_.__value_.__s.__data_[8] && v16)
    {
      if (sub_6F2DA8((uint64_t)(v15 + 216)))
      {
        unint64_t v22 = (uint64_t *)&xmmword_25CD6E8;
      }
      else
      {
        uint64_t result = (std::string *)sub_6F3124((uint64_t)(v15 + 152));
        if (!result) {
          return result;
        }
        unint64_t v22 = &qword_25CD460;
      }
      int v23 = *((char *)v22 + 23);
      if (v23 >= 0) {
        size_t v24 = (const std::string::value_type *)v22;
      }
      else {
        size_t v24 = (const std::string::value_type *)*v22;
      }
      if (v23 >= 0) {
        std::string::size_type v25 = *((unsigned __int8 *)v22 + 23);
      }
      else {
        std::string::size_type v25 = v22[1];
      }
      return std::string::append(a3, v24, v25);
    }
  }
  return result;
}

void sub_8BE354(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_8BE374(uint64_t a1)
{
  if (sub_7FE2E4(a1)) {
    return 1;
  }
  if (sub_7FE2FC(a1)) {
    return 1;
  }
  if ((*(_DWORD *)(a1 + 1848) & 0xFFFFFFFE) == 6) {
    return 1;
  }
  return *(unsigned char *)(a1 + 1856) == 0;
}

uint64_t sub_8BE3F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_8A6F8((char *)a1, *(void *)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  sub_5954B0(a1 + 24, a2 + 24);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  uint64_t v6 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  sub_595AE0(a1 + 104, a3);
  return a1;
}

void sub_8BE498(_Unwind_Exception *a1)
{
  sub_4F31D0(v1);
  _Unwind_Resume(a1);
}

void sub_8BE4AC(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_20AA4E4((uint64_t)v1, *v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_8BE4C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_8A6F8((char *)a1, *(void *)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  sub_5954B0(a1 + 24, a2 + 24);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  uint64_t v6 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  sub_595AE0(a1 + 104, a3);
  return a1;
}

void sub_8BE56C(_Unwind_Exception *a1)
{
  sub_4F31D0(v1);
  _Unwind_Resume(a1);
}

void sub_8BE580(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_20AA4E4((uint64_t)v1, *v1);
  }
  _Unwind_Resume(exception_object);
}

void **sub_8BE59C(void ***a1)
{
  BOOL v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = 0x4EC4EC4EC4EC4EC5 * (v2 - *a1);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x276276276276276) {
    sub_2E00();
  }
  if (0x9D89D89D89D89D8ALL * (a1[2] - v3) > v5) {
    unint64_t v5 = 0x9D89D89D89D89D8ALL * (a1[2] - v3);
  }
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * (a1[2] - v3)) >= 0x13B13B13B13B13BLL) {
    unint64_t v6 = 0x276276276276276;
  }
  else {
    unint64_t v6 = v5;
  }
  if (v6)
  {
    if (v6 > 0x276276276276276) {
      sub_188D718();
    }
    BOOL v7 = (char *)operator new(104 * v6);
  }
  else
  {
    BOOL v7 = 0;
  }
  BOOL v8 = &v7[104 * v4];
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 5) = 0u;
  *((void *)v8 + 11) = 0;
  *((void *)v8 + 12) = 0;
  int v9 = (void **)&v7[104 * v6];
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  *(_OWORD *)BOOL v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_DWORD *)v8 + 14) = 1065353216;
  v8[64] = 1;
  *((void *)v8 + 10) = 0;
  *((_WORD *)v8 + 48) = 0;
  BOOL v10 = (void **)(v8 + 104);
  if (v2 == v3)
  {
    *a1 = (void **)v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v2) {
      return v10;
    }
    goto LABEL_24;
  }
  uint64_t v11 = 0;
  do
  {
    uint64_t v13 = &v8[v11 * 8];
    std::string::size_type v14 = &v2[v11];
    *((_OWORD *)v13 - 6) = 0uLL;
    *(_OWORD *)(v13 - 104) = *(_OWORD *)&v2[v11 - 13];
    *((void *)v13 - 11) = v2[v11 - 11];
    *(_OWORD *)(v14 - 13) = 0uLL;
    std::string::pointer v15 = v2[v11 - 10];
    *(_OWORD *)(v14 - 11) = 0uLL;
    *((void *)v13 - 10) = v15;
    unint64_t v16 = (unint64_t)v2[v11 - 9];
    *((void *)v13 - 9) = v16;
    *(v14 - 9) = 0;
    char v17 = v2[v11 - 8];
    *(void *)&v8[v11 * 8 - 64] = v17;
    uint64_t v18 = (uint64_t)&v8[v11 * 8 - 64];
    char v19 = v2[v11 - 7];
    *(void *)(v18 + 8) = v19;
    *(_DWORD *)(v18 + 16) = v2[v11 - 6];
    if (v19)
    {
      unint64_t v12 = v17[1];
      if ((v16 & (v16 - 1)) != 0)
      {
        if (v12 >= v16) {
          v12 %= v16;
        }
      }
      else
      {
        v12 &= v16 - 1;
      }
      v15[v12] = v18;
      v2[v11 - 8] = 0;
      v2[v11 - 7] = 0;
    }
    *(v13 - 40) = *((unsigned char *)v14 - 40);
    *((_DWORD *)v13 - 8) = *((_DWORD *)v14 - 8);
    *(_OWORD *)(v13 - 24) = *(_OWORD *)(v14 - 3);
    *(v14 - 3) = 0;
    *(v14 - 2) = 0;
    *((_WORD *)v13 - 4) = *((_WORD *)v14 - 4);
    v11 -= 13;
  }
  while (&v2[v11] != v3);
  std::string::size_type v20 = *a1;
  uint64_t v2 = a1[1];
  *a1 = (void **)&v8[v11 * 8];
  a1[1] = v10;
  a1[2] = v9;
  if (v2 != v20)
  {
    do
    {
      v2 -= 13;
      sub_4F31D0(v2);
    }
    while (v2 != v20);
    uint64_t v2 = v20;
  }
  if (v2) {
LABEL_24:
  }
    operator delete(v2);
  return v10;
}

void **sub_8BE7C4(void ***a1, uint64_t a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * (a1[1] - *a1);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL) {
    sub_2E00();
  }
  if (0x1C71C71C71C71C72 * (a1[2] - *a1) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * (a1[2] - *a1);
  }
  if (0x8E38E38E38E38E39 * (a1[2] - *a1) >= 0x1C71C71C71C71C7) {
    unint64_t v6 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x38E38E38E38E38ELL) {
      sub_188D718();
    }
    BOOL v7 = operator new(72 * v6);
  }
  else
  {
    BOOL v7 = 0;
  }
  BOOL v8 = &v7[72 * v3];
  *(_OWORD *)BOOL v8 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  unint64_t v11 = *(void *)(a2 + 32);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *((void *)v8 + 2) = v10;
  *((void *)v8 + 3) = v9;
  *((void *)v8 + 4) = v11;
  uint64_t v12 = *(void *)(a2 + 40);
  *((void *)v8 + 5) = v12;
  uint64_t v13 = *(void *)(a2 + 48);
  *((void *)v8 + 6) = v13;
  *((_DWORD *)v8 + 14) = *(_DWORD *)(a2 + 56);
  if (v13)
  {
    unint64_t v14 = *(void *)(v12 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      BOOL v16 = v14 >= v11;
      unint64_t v15 = v14 % v11;
      if (!v16) {
        unint64_t v15 = v14;
      }
    }
    else
    {
      unint64_t v15 = v14 & (v11 - 1);
    }
    *(void *)(v9 + 8 * v15) = v8 + 40;
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = 0;
  }
  char v17 = (void **)&v7[72 * v6];
  v7[72 * v3 + 64] = *(unsigned char *)(a2 + 64);
  uint64_t v18 = (void **)(v8 + 72);
  char v19 = *a1;
  std::string::size_type v20 = a1[1];
  if (v20 == *a1)
  {
    *a1 = (void **)v8;
    a1[1] = v18;
    a1[2] = v17;
    if (!v20) {
      return v18;
    }
    goto LABEL_30;
  }
  uint64_t v21 = 0;
  do
  {
    int v23 = &v8[v21 * 8];
    size_t v24 = &v20[v21];
    *((void *)v23 - 7) = 0;
    *(_OWORD *)(v23 - 72) = 0uLL;
    *(_OWORD *)(v23 - 72) = *(_OWORD *)&v20[v21 - 9];
    *((void *)v23 - 7) = v20[v21 - 7];
    *(_OWORD *)(v24 - 9) = 0uLL;
    std::string::size_type v25 = v20[v21 - 6];
    *(_OWORD *)(v24 - 7) = 0uLL;
    *((void *)v23 - 6) = v25;
    *((void *)v23 - 5) = v20[v21 - 5];
    *(v24 - 5) = 0;
    BOOL v26 = v20[v21 - 4];
    *(void *)&v8[v21 * 8 - 32] = v26;
    uint64_t v27 = v20[v21 - 3];
    *((void *)v23 - 3) = v27;
    *((_DWORD *)v23 - 4) = v20[v21 - 2];
    if (v27)
    {
      unint64_t v22 = v26[1];
      unint64_t v28 = *((void *)v23 - 5);
      if ((v28 & (v28 - 1)) != 0)
      {
        if (v22 >= v28) {
          v22 %= v28;
        }
      }
      else
      {
        v22 &= v28 - 1;
      }
      v25[v22] = &v8[v21 * 8 - 32];
      v20[v21 - 4] = 0;
      v20[v21 - 3] = 0;
    }
    *(v23 - 8) = *((unsigned char *)v24 - 8);
    v21 -= 9;
  }
  while (&v20[v21] != v19);
  int v29 = *a1;
  std::string::size_type v20 = a1[1];
  *a1 = (void **)&v8[v21 * 8];
  a1[1] = v18;
  a1[2] = v17;
  if (v20 != v29)
  {
    do
    {
      v20 -= 9;
      sub_8728F4((uint64_t)(a1 + 2), v20);
    }
    while (v20 != v29);
    std::string::size_type v20 = v29;
  }
  if (v20) {
LABEL_30:
  }
    operator delete(v20);
  return v18;
}

void sub_8BEA48(uint64_t a1, long long **a2)
{
  sub_635CD0(a2, (uint64_t)&__p);
  if ((v14 & 0x80u) == 0) {
    size_t v3 = v14;
  }
  else {
    size_t v3 = __n;
  }
  uint64_t v4 = *((void *)&xmmword_25CDB20 + 1);
  if (byte_25CDB37 >= 0) {
    uint64_t v4 = byte_25CDB37;
  }
  if (v3 == v4)
  {
    if (byte_25CDB37 >= 0) {
      unint64_t v5 = &xmmword_25CDB20;
    }
    else {
      unint64_t v5 = (long long *)xmmword_25CDB20;
    }
    if ((v14 & 0x80) != 0)
    {
      uint64_t v10 = __p;
      int v11 = memcmp(__p, v5, __n);
      operator delete(v10);
      if (v11) {
        return;
      }
    }
    else if (v14)
    {
      uint64_t v6 = 0;
      do
      {
        int v7 = *((unsigned __int8 *)&__p + v6);
        int v8 = *((unsigned __int8 *)v5 + v6);
      }
      while (v7 == v8 && v14 - 1 != v6++);
      if (v7 != v8) {
        return;
      }
    }
    sub_637250((char **)a2, (uint64_t)&xmmword_25CDB08);
    return;
  }
  if ((v14 & 0x80) != 0) {
    operator delete(__p);
  }
}

uint64_t sub_8BEB64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 != *(void *)(a1 + 24)) {
    goto LABEL_28;
  }
  uint64_t v6 = *(void **)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  if (v5 <= *(void *)a1)
  {
    unint64_t v12 = 0x9D89D89D89D89D8ALL * ((v4 - (uint64_t)v6) >> 3);
    if ((void *)v4 == v6) {
      unint64_t v12 = 1;
    }
    if (v12 >= 0x276276276276277) {
      sub_188D718();
    }
    unint64_t v13 = v12 >> 2;
    uint64_t v14 = 104 * v12;
    unint64_t v15 = (char *)operator new(104 * v12);
    BOOL v16 = &v15[104 * v13];
    char v17 = &v15[v14];
    int64_t v18 = v4 - v5;
    if (v4 == v5)
    {
      *(void *)a1 = v15;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = v17;
      if (!v6) {
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v19 = 0;
      uint64_t v20 = v18 / 104;
      uint64_t v21 = &v16[104 * (v18 / 104)];
      uint64_t v22 = 104 * v20;
      do
      {
        size_t v24 = &v16[v19];
        uint64_t v25 = v5 + v19;
        *(_OWORD *)size_t v24 = *(_OWORD *)(v5 + v19);
        *((void *)v24 + 2) = *(void *)(v5 + v19 + 16);
        uint64_t v26 = *(void *)(v5 + v19 + 24);
        *(_OWORD *)uint64_t v25 = 0uLL;
        *(_OWORD *)(v25 + 16) = 0uLL;
        *((void *)v24 + 3) = v26;
        unint64_t v27 = *(void *)(v5 + v19 + 32);
        *((void *)v24 + 4) = v27;
        *(void *)(v25 + 32) = 0;
        uint64_t v28 = *(void *)(v5 + v19 + 40);
        *(void *)&v16[v19 + 40] = v28;
        uint64_t v29 = (uint64_t)&v16[v19 + 40];
        uint64_t v30 = *(void *)(v5 + v19 + 48);
        *(void *)(v29 + 8) = v30;
        *(_DWORD *)(v29 + 16) = *(_DWORD *)(v5 + v19 + 56);
        if (v30)
        {
          unint64_t v23 = *(void *)(v28 + 8);
          if ((v27 & (v27 - 1)) != 0)
          {
            if (v23 >= v27) {
              v23 %= v27;
            }
          }
          else
          {
            v23 &= v27 - 1;
          }
          *(void *)(v26 + 8 * v23) = v29;
          *(void *)(v5 + v19 + 40) = 0;
          *(void *)(v5 + v19 + 48) = 0;
        }
        v24[64] = *(unsigned char *)(v25 + 64);
        *((_DWORD *)v24 + 18) = *(_DWORD *)(v25 + 72);
        *((_OWORD *)v24 + 5) = *(_OWORD *)(v25 + 80);
        *(void *)(v25 + 80) = 0;
        *(void *)(v25 + 88) = 0;
        *((_WORD *)v24 + 48) = *(_WORD *)(v25 + 96);
        v19 += 104;
      }
      while (v22 != v19);
      uint64_t v6 = *(void **)a1;
      unint64_t v31 = *(void ***)(a1 + 8);
      uint64_t v32 = *(void ***)(a1 + 16);
      *(void *)a1 = v15;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v21;
      *(void *)(a1 + 24) = v17;
      while (v32 != v31)
      {
        v32 -= 13;
        sub_4F31D0(v32);
      }
      if (!v6) {
        goto LABEL_25;
      }
    }
    operator delete(v6);
LABEL_25:
    uint64_t v4 = *(void *)(a1 + 16);
    goto LABEL_28;
  }
  uint64_t v7 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v5 - *(void *)a1) >> 3);
  if (v7 >= -1) {
    uint64_t v8 = v7 + 1;
  }
  else {
    uint64_t v8 = v7 + 2;
  }
  uint64_t v9 = v8 >> 1;
  uint64_t v10 = -v9;
  if (v5 == v4)
  {
    uint64_t v11 = v5 - 104 * v9;
  }
  else
  {
    do
    {
      sub_63DAA4(v5 + 104 * v10, v5);
      v5 += 104;
    }
    while (v5 != v4);
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v11 = v5 + 104 * v10;
  }
  *(void *)(a1 + 8) = v4 + 104 * v10;
  *(void *)(a1 + 16) = v11;
  uint64_t v4 = v11;
LABEL_28:
  uint64_t result = sub_63D394(*(void *)(a1 + 32), v4, a2);
  *(void *)(a1 + 16) += 104;
  return result;
}

uint64_t *sub_8BEDEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (unsigned char *)a2;
  unint64_t v9 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v10 = v9;
  }
  unint64_t v11 = sub_B128((uint64_t)v44, (uint64_t *)a2, v10);
  unint64_t v12 = v11;
  unint64_t v13 = *(void *)(a1 + 8);
  if (v13)
  {
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v4 = v11;
      if (v11 >= v13) {
        unint64_t v4 = v11 % v13;
      }
    }
    else
    {
      unint64_t v4 = (v13 - 1) & v11;
    }
    unint64_t v15 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      BOOL v16 = *v15;
      if (*v15)
      {
        char v17 = v7[23];
        if (v17 >= 0) {
          uint64_t v18 = v7[23];
        }
        else {
          uint64_t v18 = *((void *)v7 + 1);
        }
        if (v17 < 0) {
          uint64_t v7 = *(unsigned char **)v7;
        }
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v23 = v16[1];
            if (v23 == v12)
            {
              uint64_t v24 = *((unsigned __int8 *)v16 + 39);
              if ((v24 & 0x80u) == 0) {
                uint64_t v25 = *((unsigned __int8 *)v16 + 39);
              }
              else {
                uint64_t v25 = v16[3];
              }
              if (v25 == v18)
              {
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v16[2], v7, v16[3])) {
                    return v16;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v16 + 39)) {
                    return v16;
                  }
                  uint64_t v26 = 0;
                  while (*((unsigned __int8 *)v16 + v26 + 16) == v7[v26])
                  {
                    if (v24 == ++v26) {
                      return v16;
                    }
                  }
                }
              }
            }
            else if ((v23 & (v13 - 1)) != v4)
            {
              goto LABEL_51;
            }
            BOOL v16 = (uint64_t *)*v16;
            if (!v16) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v19 = v16[1];
          if (v19 == v12)
          {
            uint64_t v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0) {
              uint64_t v21 = *((unsigned __int8 *)v16 + 39);
            }
            else {
              uint64_t v21 = v16[3];
            }
            if (v21 == v18)
            {
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp((const void *)v16[2], v7, v16[3])) {
                  return v16;
                }
              }
              else
              {
                if (!*((unsigned char *)v16 + 39)) {
                  return v16;
                }
                uint64_t v22 = 0;
                while (*((unsigned __int8 *)v16 + v22 + 16) == v7[v22])
                {
                  if (v20 == ++v22) {
                    return v16;
                  }
                }
              }
            }
          }
          else
          {
            if (v19 >= v13) {
              v19 %= v13;
            }
            if (v19 != v4) {
              break;
            }
          }
          BOOL v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_51:
  unint64_t v27 = (char *)operator new(0x58uLL);
  v44[0] = v27;
  v44[1] = a1 + 16;
  char v45 = 0;
  *(void *)unint64_t v27 = 0;
  *((void *)v27 + 1) = v12;
  uint64_t v28 = v27 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(v28, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v28 = *(_OWORD *)a3;
    *((void *)v27 + 4) = *(void *)(a3 + 16);
  }
  *((_DWORD *)v27 + 10) = *(_DWORD *)a4;
  *((_OWORD *)v27 + 3) = *(_OWORD *)(a4 + 8);
  *((void *)v27 + 8) = *(void *)(a4 + 24);
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = 0;
  *((_DWORD *)v27 + 18) = *(_DWORD *)(a4 + 32);
  v27[80] = *(unsigned char *)(a4 + 40);
  char v45 = 1;
  float v29 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v30 = *(float *)(a1 + 32);
  if (!v13 || (float)(v30 * (float)v13) < v29)
  {
    BOOL v33 = 1;
    if (v13 >= 3) {
      BOOL v33 = (v13 & (v13 - 1)) != 0;
    }
    unint64_t v34 = v33 | (2 * v13);
    unint64_t v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35) {
      size_t prime = v35;
    }
    else {
      size_t prime = v34;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v37) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v37)
    {
      unint64_t v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v37 < 3uLL || (uint8x8_t v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        unint64_t v38 = std::__next_prime(v38);
      }
      else
      {
        uint64_t v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2) {
          unint64_t v38 = v40;
        }
      }
      if (prime <= v38) {
        size_t prime = v38;
      }
      if (prime < *(void *)&v37) {
LABEL_68:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v13 = *(void *)(a1 + 8);
    unint64_t v41 = v13 - 1;
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
      {
        unint64_t v4 = v12 % v13;
        unint64_t v31 = *(void **)(*(void *)a1 + 8 * (v12 % v13));
        uint64_t v32 = (void *)v44[0];
        if (v31) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v12;
        unint64_t v31 = *(void **)(*(void *)a1 + 8 * v12);
        uint64_t v32 = (void *)v44[0];
        if (v31) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v41 & v12;
      unint64_t v31 = *(void **)(*(void *)a1 + 8 * (v41 & v12));
      uint64_t v32 = (void *)v44[0];
      if (v31) {
        goto LABEL_57;
      }
    }
LABEL_81:
    void *v32 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v44[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v44[0])
    {
      unint64_t v42 = *(void *)(*(void *)v44[0] + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v42 >= v13) {
          v42 %= v13;
        }
      }
      else
      {
        v42 &= v13 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v42) = v44[0];
    }
    goto LABEL_92;
  }
  unint64_t v31 = *(void **)(*(void *)a1 + 8 * v4);
  uint64_t v32 = (void *)v44[0];
  if (!v31) {
    goto LABEL_81;
  }
LABEL_57:
  void *v32 = *v31;
  *unint64_t v31 = v44[0];
LABEL_92:
  BOOL v16 = (uint64_t *)v44[0];
  ++*(void *)(a1 + 24);
  return v16;
}

void sub_8BF260(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_596078((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_8BF274(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_596078((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_8BF28C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_243ADD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_8BF2AC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_243ADD8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_8BF300(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_8BF328(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_243AE28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_8BF348(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_243AE28;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_8BF39C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_8BF3C4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_243AE78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_8BF3E4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_243AE78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_8BF438(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_8BF460()
{
  byte_25CC5A7 = 1;
  word_25CC590 = 65;
  byte_25CC5BF = 1;
  word_25CC5A8 = 65;
  qword_25CC5C8 = 0;
  qword_25CC5D0 = 0;
  qword_25CC5C0 = 0;
  v0 = operator new(9uLL);
  *(void *)v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25CC5C0 = (uint64_t)v0;
  qword_25CC5C8 = (uint64_t)(v0 + 9);
  qword_25CC5D0 = (uint64_t)(v0 + 9);
  qword_25CC5D8 = 0;
  qword_25CC5E0 = 0;
  qword_25CC5E8 = 0;
  uint64_t v1 = operator new(9uLL);
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25CC5D8 = (uint64_t)v1;
  qword_25CC5E0 = (uint64_t)(v1 + 9);
  strcpy(&byte_25CC607, "\n\x1B\\toi=orth\\"");
  qword_25CC5E8 = (uint64_t)(v1 + 9);
  strcpy(byte_25CC5F0, "\x1B\\toi=lhp\\"");
  byte_25CC61F = 11;
  qword_25CC620 = (uint64_t)operator new(0x19uLL);
  long long v281 = xmmword_20B9250;
  unk_25CC628 = xmmword_20B9250;
  strcpy((char *)qword_25CC620, "\x1B\\toi=x-sampa-internal\\"");
  byte_25CC64F = 13;
  strcpy((char *)&qword_25CC638, "\x1B\\tn=address\\"");
  strcpy(&byte_25CC667, "\t\x1B\\tn=normal\\"");
  strcpy((char *)&qword_25CC650, "\x1B\\tn=nav\\"");
  byte_25CC67F = 12;
  byte_25CC697 = 7;
  strcpy((char *)&dword_25CC680, "\x1B\\lang=");
  byte_25CC6AF = 1;
  word_25CC698 = 92;
  byte_25CC6C7 = 4;
  strcpy((char *)&qword_25CC6B0, "DEV:");
  byte_25CC6DF = 8;
  strcpy((char *)&qword_25CC6C8, "Continue");
  byte_25CC6F7 = 11;
  strcpy((char *)&qword_25CC6E0, "Start_Route");
  byte_25CC70F = 14;
  strcpy((char *)&qword_25CC6F8, "Continue_Route");
  byte_25CC727 = 12;
  strcpy((char *)&qword_25CC710, "Resume_Route");
  byte_25CC73F = 18;
  strcpy((char *)&xmmword_25CC728, "Start_Route_U_Turn");
  byte_25CC757 = 7;
  strcpy((char *)&dword_25CC740, "_U_Turn");
  qword_25CC768 = 0x1300000000000000;
  qmemcpy(&unk_25CC770, "Continue_Route", 14);
  dword_25CC760 = 1702131055;
  qword_25CC758 = *(void *)"Resume_Route";
  *(int *)((char *)&dword_25CC764 + 3) = 1852994900;
  dword_25CC764 = 1415533919;
  qword_25CC780 = 0x1500000000000000;
  strcpy((char *)&qword_25CC788, "Left_Turn");
  unk_25CC77E = 1415533919;
  *(_DWORD *)((char *)&qword_25CC780 + 1) = 1852994900;
  strcpy(&byte_25CC79F, "\tRight_Turn");
  strcpy(&byte_25CC7B7, "\nLeft_Turn_At_End");
  byte_25CC7CF = 16;
  byte_25CC7E7 = 17;
  strcpy((char *)&xmmword_25CC7D0, "Right_Turn_At_End");
  byte_25CC7FF = 15;
  strcpy((char *)&qword_25CC7E8, "Sharp_Left_Turn");
  byte_25CC817 = 16;
  strcpy((char *)&xmmword_25CC800, "Sharp_Right_Turn");
  byte_25CC82F = 16;
  strcpy((char *)&xmmword_25CC818, "Slight_Left_Turn");
  byte_25CC847 = 17;
  strcpy((char *)&xmmword_25CC830, "Slight_Right_Turn");
  strcpy(&byte_25CC85F, "\tKeep_Right");
  strcpy((char *)&qword_25CC848, "Keep_Left");
  strcpy(&byte_25CC877, "\nU_Turn");
  byte_25CC88F = 6;
  byte_25CC8A7 = 14;
  strcpy((char *)&qword_25CC890, "Walking_U_Turn");
  byte_25CC8BF = 20;
  strcpy((char *)&xmmword_25CC8A8, "U_Turn_When_Possible");
  byte_25CC8D7 = 20;
  strcpy((char *)&xmmword_25CC8C0, "U_Turn_At_Roundabout");
  byte_25CC8EF = 11;
  strcpy((char *)&qword_25CC8D8, "Enter_Ferry");
  strcpy(&byte_25CC907, "\nChange_Ferry");
  strcpy((char *)&qword_25CC8F0, "Exit_Ferry");
  strcpy((char *)&xmmword_25CC920, "Enter_Railway_Shuttle");
  strcpy((char *)&xmmword_25CC938, "Exit_Railway_Shuttle");
  strcpy((char *)&xmmword_25CC950, "Change_Railway_Shuttle");
  strcpy((char *)&xmmword_25CC968, "End_Of_Navigation");
  strcpy((char *)&xmmword_25CC980, "End_Of_Navigation");
  strcpy((char *)&xmmword_25CC998, "Destination");
  strcpy((char *)&xmmword_25CC9B0, "Destination_On_left");
  strcpy((char *)&xmmword_25CC9C8, "Destination_On_Right");
  strcpy((char *)&xmmword_25CCA10, "First_Stop_On_Right");
  strcpy((char *)&xmmword_25CCA58, "Next_Stop_On_Right");
  byte_25CC91F = 12;
  byte_25CC937 = 21;
  byte_25CC94F = 20;
  strcpy((char *)&xmmword_25CCA88, "Waypoint_Stop_On_Left");
  byte_25CC967 = 22;
  byte_25CC97F = 17;
  byte_25CC997 = 17;
  byte_25CC9AF = 11;
  byte_25CC9C7 = 19;
  byte_25CC9DF = 20;
  strcpy(&byte_25CC9F7, "\nFirst_Stop_On_left");
  *(void *)&v269[0] = *(void *)"First_Stop";
  strcpy((char *)&qword_25CC9E0, "First_Stop");
  byte_25CCA0F = 18;
  byte_25CCA27 = 19;
  strcpy(&byte_25CCA3F, "\tNext_Stop_On_left");
  strcpy((char *)&qword_25CCA70, "Waypoint_Stop");
  strcpy((char *)&xmmword_25CCAA0, "Waypoint_Stop_On_Right");
  strcpy((char *)&qword_25CCAB8, "Roundabout_");
  *(void *)&v265[48] = *(void *)"Next_Stop";
  strcpy((char *)&qword_25CCA28, "Next_Stop");
  byte_25CCA57 = 17;
  byte_25CCA6F = 18;
  byte_25CCA87 = 13;
  byte_25CCA9F = 21;
  byte_25CCAB7 = 22;
  byte_25CCACF = 11;
  byte_25CCAE7 = 16;
  strcpy((char *)&xmmword_25CCAD0, "Enter_Roundabout");
  qword_25CCAE8 = (uint64_t)operator new(0x20uLL);
  long long v280 = xmmword_20B91C0;
  xmmword_25CCAF0 = xmmword_20B91C0;
  strcpy((char *)qword_25CCAE8, "Walking_Enter_Roundabout");
  byte_25CCB17 = 16;
  strcpy((char *)&xmmword_25CCB00, "Leave_Roundabout");
  byte_25CCB2F = 21;
  strcpy((char *)&xmmword_25CCB18, "Roundabout_First_Exit");
  byte_25CCB47 = 22;
  strcpy((char *)&xmmword_25CCB30, "Roundabout_Second_Exit");
  byte_25CCB5F = 21;
  strcpy((char *)&xmmword_25CCB48, "Roundabout_Third_Exit");
  strcpy((char *)&xmmword_25CCB60, "Roundabout_Fourth_Exit");
  HIBYTE(word_25CCB76) = 22;
  byte_25CCB8F = 21;
  strcpy((char *)&xmmword_25CCB78, "Roundabout_Fifth_Exit");
  byte_25CCBA7 = 21;
  strcpy((char *)&xmmword_25CCB90, "Roundabout_Sixth_Exit");
  qword_25CCBA8 = (uint64_t)operator new(0x19uLL);
  xmmword_25CCBB0 = xmmword_20B9250;
  strcpy((char *)qword_25CCBA8, "Roundabout_Seventh_Exit");
  strcpy((char *)&xmmword_25CCBC0, "Roundabout_Eighth_Exit");
  HIBYTE(word_25CCBD6) = 22;
  byte_25CCBEF = 21;
  strcpy((char *)&xmmword_25CCBD8, "Roundabout_Ninth_Exit");
  byte_25CCC07 = 21;
  strcpy((char *)&xmmword_25CCBF0, "Roundabout_Tenth_Exit");
  qword_25CCC08 = (uint64_t)operator new(0x20uLL);
  xmmword_25CCC10 = xmmword_20B91C0;
  strcpy((char *)qword_25CCC08, "Roundabout_Eleventh_Exit");
  qword_25CCC20 = (uint64_t)operator new(0x19uLL);
  unk_25CCC28 = xmmword_20B9250;
  strcpy((char *)qword_25CCC20, "Roundabout_Twelfth_Exit");
  qword_25CCC38 = (uint64_t)operator new(0x20uLL);
  long long v277 = xmmword_20B5EB0;
  xmmword_25CCC40 = xmmword_20B5EB0;
  strcpy((char *)qword_25CCC38, "Roundabout_Thirteenth_Exit");
  qword_25CCC50 = (uint64_t)operator new(0x20uLL);
  unk_25CCC58 = xmmword_20B5EB0;
  strcpy((char *)qword_25CCC50, "Roundabout_Fourteenth_Exit");
  qword_25CCC68 = (uint64_t)operator new(0x20uLL);
  long long v279 = xmmword_20B8870;
  xmmword_25CCC70 = xmmword_20B8870;
  strcpy((char *)qword_25CCC68, "Roundabout_Fifteenth_Exit");
  qword_25CCC80 = (uint64_t)operator new(0x20uLL);
  unk_25CCC88 = xmmword_20B8870;
  strcpy((char *)qword_25CCC80, "Roundabout_Sixteenth_Exit");
  qword_25CCC98 = (uint64_t)operator new(0x20uLL);
  long long v274 = xmmword_20B91A0;
  xmmword_25CCCA0 = xmmword_20B91A0;
  strcpy((char *)qword_25CCC98, "Roundabout_Seventeenth_Exit");
  qword_25CCCB0 = (uint64_t)operator new(0x20uLL);
  unk_25CCCB8 = xmmword_20B5EB0;
  strcpy((char *)qword_25CCCB0, "Roundabout_Eighteenth_Exit");
  qword_25CCCC8 = (uint64_t)operator new(0x20uLL);
  xmmword_25CCCD0 = xmmword_20B5EB0;
  strcpy((char *)qword_25CCCC8, "Roundabout_Nineteenth_Exit");
  byte_25CCCF7 = 8;
  strcpy((char *)&qword_25CCCE0, "Off_Ramp");
  byte_25CCD0F = 16;
  strcpy((char *)&xmmword_25CCCF8, "Off_Ramp_On_Left");
  byte_25CCD27 = 17;
  strcpy((char *)&xmmword_25CCD10, "Off_Ramp_On_Right");
  byte_25CCD3F = 14;
  strcpy((char *)&qword_25CCD28, "Change_Highway");
  strcpy((char *)&xmmword_25CCD40, "Change_Highway_On_Left");
  HIBYTE(word_25CCD56) = 22;
  qword_25CCD58 = (uint64_t)operator new(0x19uLL);
  xmmword_25CCD60 = xmmword_20B9250;
  strcpy((char *)qword_25CCD58, "Change_Highway_On_Right");
  byte_25CCD87 = 5;
  dword_25CCD70 = 1735550285;
  byte_25CCD74 = 101;
  byte_25CCD75 = 0;
  byte_25CCD9F = 12;
  strcpy((char *)&qword_25CCD88, "Enter_Detour");
  byte_25CCDB7 = 11;
  strcpy((char *)&qword_25CCDA0, "Exit_Detour");
  byte_25CCDCF = 18;
  strcpy((char *)&xmmword_25CCDB8, "Walking_Turnaround");
  qword_25CCDD0 = (uint64_t)operator new(0x19uLL);
  unk_25CCDD8 = xmmword_20B9250;
  strcpy((char *)qword_25CCDD0, "Walking_Turnaround_Sign");
  byte_25CCDFF = 19;
  strcpy((char *)&xmmword_25CCDE8, "Distance_Title_List");
  qword_25CCE00 = (uint64_t)operator new(0x19uLL);
  unk_25CCE08 = xmmword_20B9250;
  long long v271 = *(_OWORD *)"Cross_The_Street_Spoken";
  strcpy((char *)qword_25CCE00, "Cross_The_Street_Spoken");
  *(void *)&v269[1] = *(void *)"t_Spoken";
  byte_25CCE2F = 19;
  strcpy((char *)&xmmword_25CCE18, "Arrival_Charge_List");
  byte_25CCE47 = 15;
  strcpy((char *)&qword_25CCE30, "Charge_At_Start");
  strcpy(&byte_25CCE5F, "\tPass_Street");
  strcpy((char *)&qword_25CCE48, "Pass_Exit");
  byte_25CCE77 = 11;
  byte_25CCE8F = 17;
  strcpy((char *)&xmmword_25CCE78, "Pass_Intersection");
  strcpy(&byte_25CCEA7, "\t_PrevExitNumber");
  strcpy((char *)&qword_25CCE90, "Next_Exit");
  byte_25CCEBF = 15;
  strcpy(&byte_25CCED7, "\t_PrevUTurn");
  strcpy((char *)&qword_25CCEC0, "_PrevRoad");
  strcpy(&byte_25CCEEF, "\nNext_");
  byte_25CCF07 = 5;
  byte_25CCF1F = 15;
  strcpy((char *)&qword_25CCF08, "_At_Next_Street");
  byte_25CCF37 = 21;
  strcpy((char *)&xmmword_25CCF20, "_At_Next_Intersection");
  byte_25CCF4F = 14;
  strcpy((char *)&qword_25CCF38, "Charge_Station");
  byte_25CCF67 = 15;
  strcpy((char *)&qword_25CCF50, "_Charge_Station");
  BYTE1(qword_25CCF78) = 0;
  WORD1(qword_25CCF78) = 25856;
  HIDWORD(qword_25CCF78) = 335544320;
  strcpy((char *)&qword_25CCF68, "_Charge_Station_");
  byte_25CCF97 = 8;
  strcpy((char *)&qword_25CCF80, "_Minimum");
  byte_25CCFAF = 15;
  strcpy((char *)&qword_25CCF98, "ExitShield_Sign");
  byte_25CCFC7 = 8;
  strcpy((char *)&qword_25CCFB0, "Walking_");
  byte_25CCFDF = 16;
  strcpy((char *)&xmmword_25CCFC8, "Walking_Continue");
  byte_25CCFF7 = 19;
  strcpy((char *)&xmmword_25CCFE0, "Walking_Start_Route");
  qword_25CCFF8 = (uint64_t)operator new(0x20uLL);
  xmmword_25CD000 = xmmword_20B5EB0;
  strcpy((char *)qword_25CCFF8, "Walking_Start_Route_U_Turn");
  byte_25CD027 = 17;
  strcpy((char *)&xmmword_25CD010, "Walking_Left_Turn");
  byte_25CD03F = 18;
  strcpy((char *)&xmmword_25CD028, "Walking_Right_Turn");
  qword_25CD040 = (uint64_t)operator new(0x20uLL);
  unk_25CD048 = xmmword_20B5EB0;
  strcpy((char *)qword_25CD040, "Walking_Turn_At_Roundabout");
  qword_25CD058 = (uint64_t)operator new(0x20uLL);
  long long v278 = xmmword_20B91B0;
  xmmword_25CD060 = xmmword_20B91B0;
  strcpy((char *)qword_25CD058, "Walking_U_Turn_When_Possible");
  qword_25CD070 = (uint64_t)operator new(0x28uLL);
  long long v270 = xmmword_20B9390;
  unk_25CD078 = xmmword_20B9390;
  strcpy((char *)qword_25CD070, "Walking_Roundabout_Exit_Continue");
  qword_25CD088 = (uint64_t)operator new(0x20uLL);
  xmmword_25CD090 = xmmword_20B91B0;
  strcpy((char *)qword_25CD088, "Walking_Roundabout_Exit_Left");
  qword_25CD0A0 = (uint64_t)operator new(0x20uLL);
  long long v276 = xmmword_20B8890;
  unk_25CD0A8 = xmmword_20B8890;
  strcpy((char *)qword_25CD0A0, "Walking_Roundabout_Exit_Right");
  qword_25CD0B8 = (uint64_t)operator new(0x20uLL);
  xmmword_25CD0C0 = xmmword_20B8870;
  strcpy((char *)qword_25CD0B8, "Walking_End_Of_Navigation");
  long long v273 = *(_OWORD *)"nd_Of_Navigation";
  uint64_t v2 = (char *)operator new(0x20uLL);
  qword_25CD0D0 = (uint64_t)v2;
  unk_25CD0D8 = xmmword_20B8870;
  *(_OWORD *)uint64_t v2 = *(_OWORD *)"Walking_End_Of_Navigation";
  *(_OWORD *)(v2 + 9) = v273;
  v2[25] = 0;
  byte_25CD0FF = 8;
  strcpy((char *)&qword_25CD0E8, "Walking_");
  qword_25CD100 = (uint64_t)operator new(0x19uLL);
  unk_25CD108 = v281;
  strcpy((char *)qword_25CD100, "Walking_Sharp_Left_Turn");
  qword_25CD118 = (uint64_t)operator new(0x20uLL);
  xmmword_25CD120 = v280;
  strcpy((char *)qword_25CD118, "Walking_Sharp_Right_Turn");
  qword_25CD130 = (uint64_t)operator new(0x20uLL);
  unk_25CD138 = v280;
  strcpy((char *)qword_25CD130, "Walking_Slight_Left_Turn");
  qword_25CD148 = (uint64_t)operator new(0x20uLL);
  xmmword_25CD150 = v279;
  strcpy((char *)qword_25CD148, "Walking_Slight_Right_Turn");
  byte_25CD177 = 4;
  strcpy((char *)&dword_25CD160, "Exit");
  byte_25CD18F = 4;
  strcpy((char *)&qword_25CD178, "Road");
  HIBYTE(qword_25CD1A0) = 7;
  strcpy((char *)&xmmword_25CD190, "Freeway");
  HIBYTE(qword_25CD1B8) = 12;
  strcpy((char *)&xmmword_25CD1A8, "Intersection");
  byte_25CD1D7 = 5;
  strcpy((char *)&xmmword_25CD1C0, "Ferry");
  byte_25CD1EF = 11;
  strcpy((char *)&xmmword_25CD1D8, "ShuttleName");
  byte_25CD207 = 5;
  strcpy((char *)&dword_25CD1F0, "Road1");
  strcpy(&byte_25CD21F, "\tName");
  strcpy((char *)&qword_25CD208, "Signpost1");
  byte_25CD237 = 4;
  byte_25CD24F = 7;
  strcpy((char *)&dword_25CD238, "Address");
  byte_25CD267 = 7;
  strcpy((char *)&qword_25CD250, "Shield1");
  byte_25CD27F = 13;
  strcpy((char *)&qword_25CD268, "TowardShield1");
  byte_25CD297 = 6;
  strcpy((char *)&qword_25CD280, "Right_");
  byte_25CD2AF = 5;
  strcpy((char *)&qword_25CD298, "Left_");
  strcpy(&byte_25CD2C7, "\tOn_Left_");
  strcpy((char *)&qword_25CD2B0, "On_Right_");
  byte_25CD2DF = 8;
  HIBYTE(qword_25CD2F0) = 12;
  strcpy((char *)&xmmword_25CD2E0, "ElevatorName");
  HIBYTE(qword_25CD308) = 13;
  strcpy((char *)&xmmword_25CD2F8, "EscalatorName");
  strcpy(&byte_25CD327, "\nBridgeName");
  strcpy((char *)&qword_25CD310, "StairsName");
  strcpy(&byte_25CD33F, "\nTunnelName");
  strcpy(&byte_25CD357, "\nParking");
  byte_25CD36F = 7;
  strcpy(&byte_25CD387, "\t_Escalator");
  strcpy((char *)&qword_25CD370, "_Elevator");
  strcpy(&byte_25CD39F, "\n_ElevatorName");
  byte_25CD3B7 = 13;
  byte_25CD3CF = 14;
  strcpy((char *)&xmmword_25CD3B8, "_EscalatorName");
  byte_25CD3E7 = 5;
  strcpy((char *)&xmmword_25CD3D0, "_Road");
  byte_25CD3FF = 8;
  strcpy((char *)&xmmword_25CD3E8, "_Freeway");
  byte_25CD417 = 13;
  strcpy((char *)&qword_25CD400, "_Intersection");
  byte_25CD42F = 6;
  strcpy((char *)&xmmword_25CD418, "_Road1");
  byte_25CD447 = 6;
  strcpy((char *)&qword_25CD430, "_Road2");
  strcpy(&byte_25CD45F, "\n_Signpost2");
  strcpy((char *)&qword_25CD448, "_Signpost1");
  strcpy(&byte_25CD477, "\n_Ferry");
  byte_25CD48F = 6;
  byte_25CD4A7 = 12;
  strcpy((char *)&qword_25CD490, "_Ferry_Ferry");
  byte_25CD4BF = 12;
  strcpy((char *)&qword_25CD4A8, "_ShuttleName");
  qword_25CD4C0 = (uint64_t)operator new(0x20uLL);
  unk_25CD4C8 = v278;
  strcpy((char *)qword_25CD4C0, "_Railway_Shuttle_ShuttleName");
  byte_25CD4EF = 11;
  strcpy((char *)&qword_25CD4D8, "_ExitNumber");
  byte_25CD507 = 5;
  strcpy((char *)&qword_25CD4F0, "_Exit");
  byte_25CD51F = 7;
  strcpy((char *)&qword_25CD508, "_StayOn");
  byte_25CD537 = 7;
  strcpy((char *)&dword_25CD520, "_Stairs");
  byte_25CD54F = 5;
  strcpy((char *)&dword_25CD538, "_Ramp");
  byte_25CD567 = 11;
  strcpy((char *)&xmmword_25CD550, "_StairsName");
  strcpy(&byte_25CD57F, "\t_Down");
  strcpy((char *)&qword_25CD568, "_RampName");
  byte_25CD597 = 5;
  byte_25CD5AF = 3;
  dword_25CD598 = 7361887;
  byte_25CD5C7 = 7;
  strcpy((char *)&dword_25CD5B0, "_Bridge");
  byte_25CD5DF = 7;
  strcpy((char *)&dword_25CD5C8, "_Tunnel");
  byte_25CD5F7 = 11;
  strcpy((char *)&qword_25CD5E0, "_Roundabout");
  byte_25CD60F = 6;
  strcpy((char *)&dword_25CD5F8, "_Cross");
  byte_25CD627 = 8;
  strcpy((char *)&qword_25CD610, "_Parking");
  byte_25CD63F = 8;
  strcpy((char *)&qword_25CD628, "_Shield1");
  byte_25CD657 = 14;
  strcpy((char *)&qword_25CD640, "_TowardShield1");
  byte_25CD66F = 8;
  strcpy((char *)&qword_25CD658, "_Shield2");
  byte_25CD687 = 14;
  strcpy((char *)&qword_25CD670, "_TowardShield2");
  byte_25CD69F = 11;
  strcpy((char *)&qword_25CD688, "_Direction1");
  byte_25CD6B7 = 11;
  strcpy((char *)&qword_25CD6A0, "_Direction2");
  strcpy(&byte_25CD6CF, "\n_TowardDirection1");
  strcpy((char *)&qword_25CD6B8, "Direction1");
  byte_25CD6E7 = 17;
  byte_25CD6FF = 17;
  strcpy((char *)&xmmword_25CD6E8, "_TowardDirection2");
  byte_25CD717 = 16;
  strcpy((char *)&xmmword_25CD700, "TowardDirection1");
  byte_25CD72F = 7;
  strcpy((char *)&qword_25CD718, "_Spoken");
  byte_25CD747 = 5;
  strcpy((char *)&qword_25CD730, "_Sign");
  byte_25CD75F = 15;
  strcpy((char *)&qword_25CD748, "_Secondary_Sign");
  byte_25CD777 = 5;
  strcpy((char *)&qword_25CD760, "_List");
  byte_25CD78F = 8;
  strcpy((char *)&qword_25CD778, "_Primary");
  unk_25CD7A0 = 0xF00000000000000;
  strcpy((char *)&qword_25CD790, "_Spoken_Primary");
  strcpy(&byte_25CD7BF, "\n_Secondary");
  strcpy((char *)&qword_25CD7A8, "_Secondary");
  strcpy(&byte_25CD7D7, "\n_Spoken_Secondar");
  unk_25CD7E9 = 0;
  unk_25CD7EA = 0;
  unk_25CD7EC = 285212672;
  byte_25CD807 = 13;
  strcpy((char *)&qword_25CD7F0, "_To_Secondary");
  BYTE1(qword_25CD818) = 0;
  WORD1(qword_25CD818) = 0;
  HIDWORD(qword_25CD818) = 335544320;
  strcpy((char *)&dword_25CD808, "_Spoken_To_Secon");
  strcpy(&byte_25CD837, "\t_ValidDistance");
  strcpy((char *)&qword_25CD820, "_Distance");
  byte_25CD84F = 14;
  byte_25CD867 = 6;
  strcpy((char *)&qword_25CD850, "_Short");
  byte_25CD87F = 1;
  LOWORD(qword_25CD868) = 95;
  qword_25CD880 = (uint64_t)operator new(0x20uLL);
  unk_25CD888 = v280;
  strcpy((char *)qword_25CD880, "Concatenate_Newline_Sign");
  size_t v3 = (char *)operator new(0x19uLL);
  qword_25CD898 = (uint64_t)v3;
  xmmword_25CD8A0 = v281;
  *(_OWORD *)size_t v3 = v271;
  uint64_t v4 = *(void *)&v269[1];
  *(void *)(v3 + 15) = *(void *)&v269[1];
  v3[23] = 0;
  byte_25CD8C7 = 12;
  strcpy((char *)&qword_25CD8B0, "Chain_Spoken");
  byte_25CD8DF = 15;
  strcpy((char *)&qword_25CD8C8, "Chain_To_Spoken");
  strcpy(&byte_25CD8F7, "\nThen_Spoken");
  strcpy((char *)&qword_25CD8E0, "And_Spoken");
  byte_25CD90F = 11;
  byte_25CD927 = 18;
  strcpy((char *)&xmmword_25CD910, "Concatenate_Spoken");
  *(void *)&xmmword_25CD928 = operator new(0x28uLL);
  long long v268 = xmmword_20B9240;
  *(long long *)((char *)&xmmword_25CD928 + 8) = xmmword_20B9240;
  strcpy((char *)xmmword_25CD928, "At_Traffic_Light_Chain_Spoken_Primary");
  qword_25CD940 = (uint64_t)operator new(0x28uLL);
  _OWORD v269[2] = xmmword_20B9260;
  unk_25CD948 = xmmword_20B9260;
  strcpy((char *)qword_25CD940, "At_Stop_Sign_Chain_Spoken_Primary");
  qword_25CD958 = (uint64_t)operator new(0x40uLL);
  xmmword_25CD960 = xmmword_20B9A90;
  strcpy((char *)qword_25CD958, "At_Stop_Sign_Cross_Traffic_Doesnt_Stop_Chain_Spoken_Primary");
  qword_25CD970 = (uint64_t)operator new(0x30uLL);
  long long v267 = xmmword_20B9A40;
  unk_25CD978 = xmmword_20B9A40;
  strcpy((char *)qword_25CD970, "At_Next_Traffic_Light_Chain_Spoken_Primary");
  qword_25CD988 = (uint64_t)operator new(0x28uLL);
  long long v266 = xmmword_20E12D0;
  xmmword_25CD990 = xmmword_20E12D0;
  strcpy((char *)qword_25CD988, "At_Next_Stop_Sign_Chain_Spoken_Primary");
  qword_25CD9A0 = (uint64_t)operator new(0x28uLL);
  long long v275 = xmmword_20B9960;
  unk_25CD9A8 = xmmword_20B9960;
  strcpy((char *)qword_25CD9A0, "At_Traffic_Light_Chain_Spoken_Secondary");
  qword_25CD9B8 = (uint64_t)operator new(0x28uLL);
  xmmword_25CD9C0 = xmmword_20B93A0;
  strcpy((char *)qword_25CD9B8, "At_Stop_Sign_Chain_Spoken_Secondary");
  qword_25CD9D0 = (uint64_t)operator new(0x30uLL);
  long long v273 = xmmword_20E1380;
  unk_25CD9D8 = xmmword_20E1380;
  strcpy((char *)qword_25CD9D0, "At_Next_Traffic_Light_Chain_Spoken_Secondary");
  qword_25CD9E8 = (uint64_t)operator new(0x30uLL);
  xmmword_25CD9F0 = xmmword_20B93C0;
  strcpy((char *)qword_25CD9E8, "At_Next_Stop_Sign_Chain_Spoken_Secondary");
  qword_25CDA00 = (uint64_t)operator new(0x38uLL);
  unk_25CDA08 = xmmword_20B9A60;
  strcpy((char *)qword_25CDA00, "At_Next_One_Traffic_Light_Chain_Spoken_Secondary");
  qword_25CDA18 = (uint64_t)operator new(0x30uLL);
  xmmword_25CDA20 = xmmword_20E1380;
  strcpy((char *)qword_25CDA18, "At_Next_One_Stop_Sign_Chain_Spoken_Secondary");
  *(void *)&xmmword_25CDA30 = operator new(0x28uLL);
  *(long long *)((char *)&xmmword_25CDA30 + 8) = xmmword_20B9960;
  strcpy((char *)xmmword_25CDA30, "At_Mini_Roundabout_Chain_Spoken_Primary");
  *(void *)&xmmword_25CDA48 = operator new(0x30uLL);
  long long v272 = xmmword_20B93D0;
  *(long long *)((char *)&xmmword_25CDA48 + 8) = xmmword_20B93D0;
  strcpy((char *)xmmword_25CDA48, "At_Mini_Roundabout_Chain_Spoken_Secondary");
  qword_25CDA60 = (uint64_t)operator new(0x20uLL);
  unk_25CDA68 = v276;
  strcpy((char *)qword_25CDA60, "Walking_Distance_Chain_Spoken");
  qword_25CDA78 = (uint64_t)operator new(0x20uLL);
  xmmword_25CDA80 = v276;
  strcpy((char *)qword_25CDA78, "Walking_Continue_Chain_Spoken");
  unint64_t v5 = (char *)operator new(0x19uLL);
  qword_25CDA90 = (uint64_t)v5;
  unk_25CDA98 = v281;
  *(_OWORD *)unint64_t v5 = v271;
  *(void *)(v5 + 15) = v4;
  v5[23] = 0;
  qword_25CDAA8 = (uint64_t)operator new(0x28uLL);
  xmmword_25CDAB0 = v270;
  strcpy((char *)qword_25CDAA8, "Distance_Cross_The_Street_Spoken");
  byte_25CDAD7 = 22;
  strcpy((char *)&xmmword_25CDAC0, "Walking_Continue_Cross");
  byte_25CDAEF = 14;
  strcpy((char *)&qword_25CDAD8, "Continue_Cross");
  byte_25CDB07 = 5;
  strcpy((char *)&qword_25CDAF0, "Cross");
  byte_25CDB1F = 19;
  strcpy((char *)&xmmword_25CDB08, "Cross_Street_Spoken");
  byte_25CDB37 = 17;
  strcpy((char *)&xmmword_25CDB20, "Cross_Road_Spoken");
  byte_25CDB4F = 20;
  strcpy((char *)&xmmword_25CDB38, "Use_Crosswalk_Spoken");
  byte_25CDB67 = 15;
  strcpy((char *)&qword_25CDB50, "Distance_Spoken");
  byte_25CDB7F = 19;
  strcpy((char *)&xmmword_25CDB68, "Distance_And_Spoken");
  byte_25CDB97 = 21;
  strcpy((char *)&xmmword_25CDB80, "Continue_Stage_Spoken");
  byte_25CDB98[23] = 13;
  qmemcpy(byte_25CDB98, "ContinueStage", 13);
  int v6 = byte_25CD7A7;
  if (byte_25CD7A7 >= 0) {
    size_t v7 = byte_25CD7A7;
  }
  else {
    size_t v7 = qword_25CD798;
  }
  unint64_t v8 = v7 + 13;
  byte_25CDB98[13] = 0;
  if (v7 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v8 >= 0x17)
  {
    uint64_t v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v10 = v8 | 7;
    }
    uint64_t v11 = v10 + 1;
    unint64_t v12 = operator new(v10 + 1);
    qword_25CDBB8 = v7 + 13;
    unk_25CDBC0 = v11 | 0x8000000000000000;
    qword_25CDBB0 = (uint64_t)v12;
    void *v12 = *(void *)"ContinueStage";
    unint64_t v9 = (char *)v12 + 13;
    *(void *)((char *)v12 + 5) = *(void *)"nueStage";
  }
  else
  {
    BYTE1(qword_25CDBB8) = 0;
    WORD1(qword_25CDBB8) = 0;
    HIDWORD(qword_25CDBB8) = 0;
    unk_25CDBC0 = 0;
    byte_25CDBC7 = v7 + 13;
    unint64_t v9 = (char *)&qword_25CDBB8 + 5;
    strcpy((char *)&qword_25CDBB0, "Continue");
    if (!v7) {
      goto LABEL_15;
    }
  }
  if (v6 >= 0) {
    unint64_t v13 = &qword_25CD790;
  }
  else {
    unint64_t v13 = (uint64_t *)qword_25CD790;
  }
  memmove(v9, v13, v7);
LABEL_15:
  v9[v7] = 0;
  int v14 = byte_25CD3E7;
  if (byte_25CD3E7 >= 0) {
    size_t v15 = byte_25CD3E7;
  }
  else {
    size_t v15 = *((void *)&xmmword_25CD3D0 + 1);
  }
  unint64_t v16 = v15 + 13;
  if (v15 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v16 >= 0x17)
  {
    uint64_t v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v18 = v16 | 7;
    }
    uint64_t v19 = v18 + 1;
    uint64_t v20 = operator new(v18 + 1);
    __dst.__r_.__value_.__l.__size_ = v15 + 13;
    __dst.__r_.__value_.__r.__words[2] = v19 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
    void *v20 = *(void *)byte_25CDB98;
    *(void *)((char *)v20 + 5) = *(void *)&byte_25CDB98[5];
    char v17 = (char *)v20 + 13;
  }
  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 5) = *(void *)&byte_25CDB98[5];
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v15 + 13;
    __dst.__r_.__value_.__r.__words[0] = *(void *)byte_25CDB98;
    char v17 = &__dst.__r_.__value_.__s.__data_[13];
    if (!v15) {
      goto LABEL_29;
    }
  }
  if (v14 >= 0) {
    uint64_t v21 = &xmmword_25CD3D0;
  }
  else {
    uint64_t v21 = (long long *)xmmword_25CD3D0;
  }
  memmove(v17, v21, v15);
LABEL_29:
  v17[v15] = 0;
  if (v6 >= 0) {
    uint64_t v22 = (const std::string::value_type *)&qword_25CD790;
  }
  else {
    uint64_t v22 = (const std::string::value_type *)qword_25CD790;
  }
  uint64_t v23 = std::string::append(&__dst, v22, v7);
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  qword_25CDBD8 = v23->__r_.__value_.__r.__words[2];
  xmmword_25CDBC8 = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  byte_25CDBE0[23] = 5;
  strcpy(byte_25CDBE0, "Merge");
  *(void *)&xmmword_25CDBF8 = operator new(0x20uLL);
  v269[1] = xmmword_20B8E90;
  *(long long *)((char *)&xmmword_25CDBF8 + 8) = xmmword_20B8E90;
  strcpy((char *)xmmword_25CDBF8, "Continue_Freeway_Spoken_Primary");
  byte_25CDC27 = 8;
  strcpy((char *)&qword_25CDC10, "Starting");
  byte_25CDC3F = 14;
  strcpy((char *)&qword_25CDC28, "Starting_Route");
  byte_25CDC57 = 14;
  strcpy((char *)&qword_25CDC40, "Resuming_Route");
  byte_25CDC6F = 16;
  strcpy((char *)&xmmword_25CDC58, "Continuing_Route");
  byte_25CDC87 = 9;
  word_25CDC78 = 112;
  qword_25CDC70 = *(void *)&v265[48];
  strcpy(&byte_25CDC9F, "\nEnding");
  strcpy((char *)&word_25CDC90, "op");
  qword_25CDC88 = *(void *)&v269[0];
  byte_25CDCB7 = 6;
  strcpy((char *)&qword_25CDCB8, "_Destination");
  byte_25CDCCF = 12;
  byte_25CDCE7 = 15;
  strcpy((char *)&qword_25CDCD0, "_At_Destination");
  std::operator+<char>();
  qword_25CDD00 = (uint64_t)operator new(0x20uLL);
  unk_25CDD08 = v280;
  strcpy((char *)qword_25CDD00, "Spoken_Ending_At_Parking");
  qword_25CDD18 = (uint64_t)operator new(0x20uLL);
  v269[0] = xmmword_20B9800;
  xmmword_25CDD20 = xmmword_20B9800;
  strcpy((char *)qword_25CDD18, "Spoken_Pre_Arrival_Destination");
  strcpy((char *)&xmmword_25CDD30, "Sign_Ending_At_Parking");
  HIBYTE(word_25CDD46) = 22;
  byte_25CDD5F = 4;
  strcpy((char *)&dword_25CDD48, "Home");
  byte_25CDD77 = 4;
  strcpy((char *)&dword_25CDD60, "Work");
  byte_25CDD8F = 8;
  strcpy((char *)&qword_25CDD78, "Business");
  byte_25CDDA7 = 4;
  strcpy((char *)&dword_25CDD90, "Name");
  byte_25CDDBF = 13;
  strcpy((char *)&qword_25CDDA8, "Other_Contact");
  byte_25CDDD7 = 11;
  strcpy((char *)&qword_25CDDC0, "ContactHome");
  byte_25CDDEF = 11;
  *(_DWORD *)((char *)&qword_25CDDD8 + 7) = 1802661719;
  byte_25CDE07 = 7;
  *(int *)((char *)&dword_25CDDF0 + 3) = 1936942450;
  dword_25CDDF0 = 1919181889;
  strcpy((char *)&xmmword_25CDE08, "Discoverability_Prompt");
  HIBYTE(word_25CDE1E) = 22;
  byte_25CDE37 = 6;
  dword_25CDE20 = 1634878303;
  word_25CDE24 = 26739;
  byte_25CDE4F = 8;
  qword_25CDE38 = 0x697269535F6F4E5FLL;
  byte_25CDE67 = 9;
  strcpy((char *)&qword_25CDE50, "_CityName");
  byte_25CDE7F = 8;
  qword_25CDE68 = 0x636972656E65475FLL;
  int v25 = byte_25CDC27;
  if (byte_25CDC27 >= 0) {
    size_t v26 = byte_25CDC27;
  }
  else {
    size_t v26 = qword_25CDC18;
  }
  LODWORD(v271) = byte_25CCF67;
  if (byte_25CCF67 >= 0) {
    size_t v27 = byte_25CCF67;
  }
  else {
    size_t v27 = unk_25CCF58;
  }
  qword_25CDDD8 = *(void *)"ContactWork";
  byte_25CDDE3 = 0;
  byte_25CDDF7 = 0;
  byte_25CDE26 = 0;
  byte_25CDE40 = 0;
  byte_25CDE70 = 0;
  unint64_t v28 = v27 + v26;
  if (v27 + v26 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  *(void *)v265 = *(void *)"ContactWork";
  *(void *)&v265[16] = *(void *)"ContactHome";
  *(void *)&v265[32] = *(void *)"_Contact";
  *(void *)&v265[48] = *(void *)"Other_Contact";
  if (v28 <= 0x16)
  {
    float v29 = &qword_25CDE80;
    qword_25CDE88 = 0;
    unk_25CDE90 = 0;
    qword_25CDE80 = 0;
    byte_25CDE97 = v27 + v26;
    if (!v26) {
      goto LABEL_47;
    }
    goto LABEL_43;
  }
  uint64_t v92 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v28 | 7) != 0x17) {
    uint64_t v92 = v28 | 7;
  }
  uint64_t v93 = v92 + 1;
  float v29 = (uint64_t *)operator new(v92 + 1);
  qword_25CDE88 = v27 + v26;
  unk_25CDE90 = v93 | 0x8000000000000000;
  qword_25CDE80 = (uint64_t)v29;
  if (v26)
  {
LABEL_43:
    if (v25 >= 0) {
      float v30 = &qword_25CDC10;
    }
    else {
      float v30 = (uint64_t *)qword_25CDC10;
    }
    memmove(v29, v30, v26);
  }
LABEL_47:
  unint64_t v31 = (char *)v29 + v26;
  if (v27)
  {
    if ((int)v271 >= 0) {
      uint64_t v32 = &qword_25CCF50;
    }
    else {
      uint64_t v32 = (uint64_t *)qword_25CCF50;
    }
    memmove(v31, v32, v27);
  }
  v31[v27] = 0;
  int v33 = byte_25CDCCF;
  if (byte_25CDCCF >= 0) {
    size_t v34 = byte_25CDCCF;
  }
  else {
    size_t v34 = qword_25CDCC0;
  }
  unint64_t v35 = v34 + v26;
  if (v34 + v26 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v35 <= 0x16)
  {
    uint64_t v36 = &qword_25CDE98;
    qword_25CDEA0 = 0;
    unk_25CDEA8 = 0;
    qword_25CDE98 = 0;
    byte_25CDEAF = v34 + v26;
    if (!v26) {
      goto LABEL_62;
    }
    goto LABEL_58;
  }
  uint64_t v94 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v35 | 7) != 0x17) {
    uint64_t v94 = v35 | 7;
  }
  uint64_t v95 = v94 + 1;
  uint64_t v36 = (uint64_t *)operator new(v94 + 1);
  qword_25CDEA0 = v34 + v26;
  unk_25CDEA8 = v95 | 0x8000000000000000;
  qword_25CDE98 = (uint64_t)v36;
  if (v26)
  {
LABEL_58:
    if (v25 >= 0) {
      int8x8_t v37 = &qword_25CDC10;
    }
    else {
      int8x8_t v37 = (uint64_t *)qword_25CDC10;
    }
    memmove(v36, v37, v26);
  }
LABEL_62:
  unint64_t v38 = (char *)v36 + v26;
  if (v34)
  {
    if (v33 >= 0) {
      uint8x8_t v39 = &qword_25CDCB8;
    }
    else {
      uint8x8_t v39 = (uint64_t *)qword_25CDCB8;
    }
    memmove(v38, v39, v34);
  }
  v38[v34] = 0;
  qword_25CDEB0 = (uint64_t)operator new(0x19uLL);
  unk_25CDEB8 = v281;
  strcpy((char *)qword_25CDEB0, "{ChargeStationCityName}");
  if (v35 < 0x17)
  {
    uint64_t v40 = &qword_25CDEC8;
    qword_25CDED0 = 0;
    unk_25CDED8 = 0;
    qword_25CDEC8 = 0;
    byte_25CDEDF = v34 + v26;
    if (!v26) {
      goto LABEL_73;
    }
    goto LABEL_69;
  }
  uint64_t v96 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v35 | 7) != 0x17) {
    uint64_t v96 = v35 | 7;
  }
  uint64_t v97 = v96 + 1;
  uint64_t v40 = (uint64_t *)operator new(v96 + 1);
  qword_25CDED0 = v34 + v26;
  unk_25CDED8 = v97 | 0x8000000000000000;
  qword_25CDEC8 = (uint64_t)v40;
  if (v26)
  {
LABEL_69:
    if (v25 >= 0) {
      unint64_t v41 = &qword_25CDC10;
    }
    else {
      unint64_t v41 = (uint64_t *)qword_25CDC10;
    }
    memmove(v40, v41, v26);
  }
LABEL_73:
  unint64_t v42 = (char *)v40 + v26;
  if (v34)
  {
    if (v33 >= 0) {
      uint64_t v43 = &qword_25CDCB8;
    }
    else {
      uint64_t v43 = (uint64_t *)qword_25CDCB8;
    }
    memmove(v42, v43, v34);
  }
  v42[v34] = 0;
  strcpy((char *)&xmmword_25CDEE0, "{NewBatteryPercentage}");
  HIBYTE(word_25CDEF6) = 22;
  qword_25CDEF8 = (uint64_t)operator new(0x20uLL);
  xmmword_25CDF00 = v274;
  strcpy((char *)qword_25CDEF8, "{OriginalBatteryPercentage}");
  byte_25CDF27 = 19;
  strcpy((char *)&xmmword_25CDF10, "_Arrival_Percentage");
  int v44 = byte_25CDCB7;
  if (byte_25CDCB7 >= 0) {
    size_t v45 = byte_25CDCB7;
  }
  else {
    size_t v45 = qword_25CDCA8;
  }
  unint64_t v46 = v45 + v27;
  if (v45 + v27 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v46 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v45 + v27;
    if (!v45) {
      goto LABEL_88;
    }
    goto LABEL_84;
  }
  uint64_t v98 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v46 | 7) != 0x17) {
    uint64_t v98 = v46 | 7;
  }
  uint64_t v99 = v98 + 1;
  p_dst = (char *)operator new(v98 + 1);
  __dst.__r_.__value_.__l.__size_ = v45 + v27;
  __dst.__r_.__value_.__r.__words[2] = v99 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v45)
  {
LABEL_84:
    if (v44 >= 0) {
      uint64_t v48 = &qword_25CDCA0;
    }
    else {
      uint64_t v48 = (uint64_t *)qword_25CDCA0;
    }
    memmove(p_dst, v48, v45);
  }
LABEL_88:
  uint64_t v49 = &p_dst[v45];
  if (v27)
  {
    if ((int)v271 >= 0) {
      int64_t v50 = &qword_25CCF50;
    }
    else {
      int64_t v50 = (uint64_t *)qword_25CCF50;
    }
    memmove(v49, v50, v27);
  }
  v49[v27] = 0;
  uint64_t v51 = std::string::append(&__dst, "_Percentage");
  long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
  qword_25CDF38 = v51->__r_.__value_.__r.__words[2];
  xmmword_25CDF28 = v52;
  v51->__r_.__value_.__l.__size_ = 0;
  v51->__r_.__value_.__r.__words[2] = 0;
  v51->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v53 = byte_25CDCB7;
  if (byte_25CDCB7 >= 0) {
    size_t v54 = byte_25CDCB7;
  }
  else {
    size_t v54 = qword_25CDCA8;
  }
  int v55 = byte_25CCF67;
  if (byte_25CCF67 >= 0) {
    size_t v56 = byte_25CCF67;
  }
  else {
    size_t v56 = unk_25CCF58;
  }
  unint64_t v57 = v56 + v54;
  if (v56 + v54 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v57 <= 0x16)
  {
    memset(&v282, 0, sizeof(v282));
    int v58 = (char *)&v282;
    *((unsigned char *)&v282.__r_.__value_.__s + 23) = v56 + v54;
    if (!v54) {
      goto LABEL_108;
    }
    goto LABEL_104;
  }
  uint64_t v100 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v57 | 7) != 0x17) {
    uint64_t v100 = v57 | 7;
  }
  uint64_t v101 = v100 + 1;
  int v58 = (char *)operator new(v100 + 1);
  v282.__r_.__value_.__l.__size_ = v56 + v54;
  v282.__r_.__value_.__r.__words[2] = v101 | 0x8000000000000000;
  v282.__r_.__value_.__r.__words[0] = (std::string::size_type)v58;
  if (v54)
  {
LABEL_104:
    if (v53 >= 0) {
      std::string::size_type v59 = &qword_25CDCA0;
    }
    else {
      std::string::size_type v59 = (uint64_t *)qword_25CDCA0;
    }
    memmove(v58, v59, v54);
  }
LABEL_108:
  std::string::size_type v60 = &v58[v54];
  if (v56)
  {
    if (v55 >= 0) {
      int64_t v61 = &qword_25CCF50;
    }
    else {
      int64_t v61 = (uint64_t *)qword_25CCF50;
    }
    memmove(v60, v61, v56);
  }
  v60[v56] = 0;
  if (byte_25CCF97 >= 0) {
    long long v62 = (const std::string::value_type *)&qword_25CCF80;
  }
  else {
    long long v62 = (const std::string::value_type *)qword_25CCF80;
  }
  if (byte_25CCF97 >= 0) {
    std::string::size_type v63 = byte_25CCF97;
  }
  else {
    std::string::size_type v63 = *(void *)&byte_25CCF88;
  }
  int64_t v64 = std::string::append(&v282, v62, v63);
  long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  int v66 = std::string::append(&__dst, "_Percentage");
  long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
  qword_25CDF50 = v66->__r_.__value_.__r.__words[2];
  xmmword_25CDF40 = v67;
  v66->__r_.__value_.__l.__size_ = 0;
  v66->__r_.__value_.__r.__words[2] = 0;
  v66->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v282.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_121;
    }
  }
  else if ((SHIBYTE(v282.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_121;
  }
  operator delete(v282.__r_.__value_.__l.__data_);
LABEL_121:
  int v68 = byte_25CDCB7;
  if (byte_25CDCB7 >= 0) {
    size_t v69 = byte_25CDCB7;
  }
  else {
    size_t v69 = qword_25CDCA8;
  }
  int v70 = byte_25CCF67;
  if (byte_25CCF67 >= 0) {
    size_t v71 = byte_25CCF67;
  }
  else {
    size_t v71 = unk_25CCF58;
  }
  unint64_t v72 = v71 + v69;
  if (v71 + v69 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v72 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    int v73 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v71 + v69;
    if (!v69) {
      goto LABEL_134;
    }
    goto LABEL_130;
  }
  uint64_t v102 = (v72 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v72 | 7) != 0x17) {
    uint64_t v102 = v72 | 7;
  }
  uint64_t v103 = v102 + 1;
  int v73 = (char *)operator new(v102 + 1);
  __dst.__r_.__value_.__l.__size_ = v71 + v69;
  __dst.__r_.__value_.__r.__words[2] = v103 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v73;
  if (v69)
  {
LABEL_130:
    if (v68 >= 0) {
      char v74 = &qword_25CDCA0;
    }
    else {
      char v74 = (uint64_t *)qword_25CDCA0;
    }
    memmove(v73, v74, v69);
  }
LABEL_134:
  int v75 = &v73[v69];
  if (v71)
  {
    if (v70 >= 0) {
      long long v76 = &qword_25CCF50;
    }
    else {
      long long v76 = (uint64_t *)qword_25CCF50;
    }
    memmove(v75, v76, v71);
  }
  v75[v71] = 0;
  __int16 v77 = std::string::append(&__dst, "_Duration");
  long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
  qword_25CDF68 = v77->__r_.__value_.__r.__words[2];
  xmmword_25CDF58 = v78;
  v77->__r_.__value_.__l.__size_ = 0;
  v77->__r_.__value_.__r.__words[2] = 0;
  v77->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v79 = byte_25CDCB7;
  if (byte_25CDCB7 >= 0) {
    size_t v80 = byte_25CDCB7;
  }
  else {
    size_t v80 = qword_25CDCA8;
  }
  int v81 = byte_25CCF67;
  if (byte_25CCF67 >= 0) {
    size_t v82 = byte_25CCF67;
  }
  else {
    size_t v82 = unk_25CCF58;
  }
  unint64_t v83 = v82 + v80;
  if (v82 + v80 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v83 <= 0x16)
  {
    qword_25CDF78 = 0;
    unk_25CDF80 = 0;
    qword_25CDF70 = 0;
    char v84 = &qword_25CDF70;
    byte_25CDF87 = v82 + v80;
    if (!v80) {
      goto LABEL_154;
    }
    goto LABEL_150;
  }
  uint64_t v104 = (v83 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v83 | 7) != 0x17) {
    uint64_t v104 = v83 | 7;
  }
  uint64_t v105 = v104 + 1;
  char v84 = (uint64_t *)operator new(v104 + 1);
  qword_25CDF78 = v82 + v80;
  unk_25CDF80 = v105 | 0x8000000000000000;
  qword_25CDF70 = (uint64_t)v84;
  if (v80)
  {
LABEL_150:
    if (v79 >= 0) {
      __int16 v85 = &qword_25CDCA0;
    }
    else {
      __int16 v85 = (uint64_t *)qword_25CDCA0;
    }
    memmove(v84, v85, v80);
  }
LABEL_154:
  int64_t v86 = (char *)v84 + v80;
  if (v82)
  {
    if (v81 >= 0) {
      std::string v87 = &qword_25CCF50;
    }
    else {
      std::string v87 = (uint64_t *)qword_25CCF50;
    }
    memmove(v86, v87, v82);
  }
  v86[v82] = 0;
  int v88 = byte_25CDF87;
  if (byte_25CDF87 >= 0) {
    size_t v89 = byte_25CDF87;
  }
  else {
    size_t v89 = qword_25CDF78;
  }
  unint64_t v90 = v89 + 5;
  if (v89 + 5 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v90 >= 0x17)
  {
    uint64_t v106 = (v90 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v90 | 7) != 0x17) {
      uint64_t v106 = v90 | 7;
    }
    uint64_t v107 = v106 + 1;
    char v91 = (uint64_t *)operator new(v106 + 1);
    qword_25CDF90 = v89 + 5;
    unk_25CDF98 = v107 | 0x8000000000000000;
    qword_25CDF88 = (uint64_t)v91;
  }
  else
  {
    char v91 = &qword_25CDF88;
    qword_25CDF90 = 0;
    unk_25CDF98 = 0;
    qword_25CDF88 = 0;
    byte_25CDF9F = v89 + 5;
    if (!v89) {
      goto LABEL_201;
    }
  }
  if (v88 >= 0) {
    std::string::size_type v108 = &qword_25CDF70;
  }
  else {
    std::string::size_type v108 = (uint64_t *)qword_25CDF70;
  }
  memmove(v91, v108, v89);
LABEL_201:
  strcpy((char *)v91 + v89, "_Name");
  int v109 = byte_25CDCB7;
  if (byte_25CDCB7 >= 0) {
    size_t v110 = byte_25CDCB7;
  }
  else {
    size_t v110 = qword_25CDCA8;
  }
  int v111 = byte_25CCF67;
  if (byte_25CCF67 >= 0) {
    size_t v112 = byte_25CCF67;
  }
  else {
    size_t v112 = unk_25CCF58;
  }
  unint64_t v113 = v112 + v110;
  if (v112 + v110 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v113 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    std::string::size_type v114 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v112 + v110;
    if (!v110) {
      goto LABEL_214;
    }
    goto LABEL_210;
  }
  uint64_t v124 = (v113 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v113 | 7) != 0x17) {
    uint64_t v124 = v113 | 7;
  }
  uint64_t v125 = v124 + 1;
  std::string::size_type v114 = (char *)operator new(v124 + 1);
  __dst.__r_.__value_.__l.__size_ = v112 + v110;
  __dst.__r_.__value_.__r.__words[2] = v125 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v114;
  if (v110)
  {
LABEL_210:
    if (v109 >= 0) {
      std::string::size_type v115 = &qword_25CDCA0;
    }
    else {
      std::string::size_type v115 = (uint64_t *)qword_25CDCA0;
    }
    memmove(v114, v115, v110);
  }
LABEL_214:
  long long v116 = &v114[v110];
  if (v112)
  {
    if (v111 >= 0) {
      int v117 = &qword_25CCF50;
    }
    else {
      int v117 = (uint64_t *)qword_25CCF50;
    }
    memmove(v116, v117, v112);
  }
  v116[v112] = 0;
  size_t v118 = std::string::append(&__dst, "_Connector_Type");
  long long v119 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
  qword_25CDFB0 = v118->__r_.__value_.__r.__words[2];
  xmmword_25CDFA0 = v119;
  v118->__r_.__value_.__l.__size_ = 0;
  v118->__r_.__value_.__r.__words[2] = 0;
  v118->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v120 = SHIBYTE(qword_25CDFB0);
  if (qword_25CDFB0 >= 0) {
    size_t v121 = HIBYTE(qword_25CDFB0);
  }
  else {
    size_t v121 = *((void *)&xmmword_25CDFA0 + 1);
  }
  unint64_t v122 = v121 + 6;
  if (v121 + 6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v122 >= 0x17)
  {
    uint64_t v126 = (v122 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v122 | 7) != 0x17) {
      uint64_t v126 = v122 | 7;
    }
    uint64_t v127 = v126 + 1;
    uint64_t v123 = (uint64_t *)operator new(v126 + 1);
    qword_25CDFC0 = v121 + 6;
    unk_25CDFC8 = v127 | 0x8000000000000000;
    qword_25CDFB8 = (uint64_t)v123;
  }
  else
  {
    uint64_t v123 = &qword_25CDFB8;
    qword_25CDFC0 = 0;
    unk_25CDFC8 = 0;
    qword_25CDFB8 = 0;
    byte_25CDFCF = v121 + 6;
    if (!v121) {
      goto LABEL_239;
    }
  }
  if (v120 >= 0) {
    uint64_t v128 = &xmmword_25CDFA0;
  }
  else {
    uint64_t v128 = (long long *)xmmword_25CDFA0;
  }
  memmove(v123, v128, v121);
LABEL_239:
  strcpy((char *)v123 + v121, "_Power");
  int v129 = byte_25CDCB7;
  if (byte_25CDCB7 >= 0) {
    size_t v130 = byte_25CDCB7;
  }
  else {
    size_t v130 = qword_25CDCA8;
  }
  int v131 = byte_25CCF67;
  if (byte_25CCF67 >= 0) {
    size_t v132 = byte_25CCF67;
  }
  else {
    size_t v132 = unk_25CCF58;
  }
  unint64_t v133 = v132 + v130;
  if (v132 + v130 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v133 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    v134 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v132 + v130;
    if (!v130) {
      goto LABEL_252;
    }
    goto LABEL_248;
  }
  uint64_t v163 = (v133 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v133 | 7) != 0x17) {
    uint64_t v163 = v133 | 7;
  }
  uint64_t v164 = v163 + 1;
  v134 = (char *)operator new(v163 + 1);
  __dst.__r_.__value_.__l.__size_ = v132 + v130;
  __dst.__r_.__value_.__r.__words[2] = v164 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v134;
  if (v130)
  {
LABEL_248:
    if (v129 >= 0) {
      v135 = &qword_25CDCA0;
    }
    else {
      v135 = (uint64_t *)qword_25CDCA0;
    }
    memmove(v134, v135, v130);
  }
LABEL_252:
  std::string::size_type v136 = &v134[v130];
  if (v132)
  {
    if (v131 >= 0) {
      v137 = &qword_25CCF50;
    }
    else {
      v137 = (uint64_t *)qword_25CCF50;
    }
    memmove(v136, v137, v132);
  }
  v136[v132] = 0;
  if (byte_25CD72F >= 0) {
    long long v138 = (const std::string::value_type *)&qword_25CD718;
  }
  else {
    long long v138 = (const std::string::value_type *)qword_25CD718;
  }
  if (byte_25CD72F >= 0) {
    std::string::size_type v139 = byte_25CD72F;
  }
  else {
    std::string::size_type v139 = qword_25CD720;
  }
  size_t v140 = std::string::append(&__dst, v138, v139);
  long long v141 = *(_OWORD *)&v140->__r_.__value_.__l.__data_;
  qword_25CDFE0 = v140->__r_.__value_.__r.__words[2];
  xmmword_25CDFD0 = v141;
  v140->__r_.__value_.__l.__size_ = 0;
  v140->__r_.__value_.__r.__words[2] = 0;
  v140->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v142 = byte_25CDCB7;
  if (byte_25CDCB7 >= 0) {
    size_t v143 = byte_25CDCB7;
  }
  else {
    size_t v143 = qword_25CDCA8;
  }
  int v144 = byte_25CCF67;
  if (byte_25CCF67 >= 0) {
    size_t v145 = byte_25CCF67;
  }
  else {
    size_t v145 = unk_25CCF58;
  }
  unint64_t v146 = v145 + v143;
  if (v145 + v143 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v146 <= 0x16)
  {
    memset(&v282, 0, sizeof(v282));
    uint64_t v147 = (char *)&v282;
    *((unsigned char *)&v282.__r_.__value_.__s + 23) = v145 + v143;
    if (!v143) {
      goto LABEL_278;
    }
    goto LABEL_274;
  }
  uint64_t v165 = (v146 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v146 | 7) != 0x17) {
    uint64_t v165 = v146 | 7;
  }
  uint64_t v166 = v165 + 1;
  uint64_t v147 = (char *)operator new(v165 + 1);
  v282.__r_.__value_.__l.__size_ = v145 + v143;
  v282.__r_.__value_.__r.__words[2] = v166 | 0x8000000000000000;
  v282.__r_.__value_.__r.__words[0] = (std::string::size_type)v147;
  if (v143)
  {
LABEL_274:
    if (v142 >= 0) {
      v148 = &qword_25CDCA0;
    }
    else {
      v148 = (uint64_t *)qword_25CDCA0;
    }
    memmove(v147, v148, v143);
  }
LABEL_278:
  __int16 v149 = &v147[v143];
  if (v145)
  {
    if (v144 >= 0) {
      uint64_t v150 = &qword_25CCF50;
    }
    else {
      uint64_t v150 = (uint64_t *)qword_25CCF50;
    }
    memmove(v149, v150, v145);
  }
  v149[v145] = 0;
  if (byte_25CCF97 >= 0) {
    long long v151 = (const std::string::value_type *)&qword_25CCF80;
  }
  else {
    long long v151 = (const std::string::value_type *)qword_25CCF80;
  }
  if (byte_25CCF97 >= 0) {
    std::string::size_type v152 = byte_25CCF97;
  }
  else {
    std::string::size_type v152 = *(void *)&byte_25CCF88;
  }
  std::string::size_type v153 = std::string::append(&v282, v151, v152);
  long long v154 = *(_OWORD *)&v153->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v153->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v154;
  v153->__r_.__value_.__l.__size_ = 0;
  v153->__r_.__value_.__r.__words[2] = 0;
  v153->__r_.__value_.__r.__words[0] = 0;
  if (byte_25CD72F >= 0) {
    uint64_t v155 = (const std::string::value_type *)&qword_25CD718;
  }
  else {
    uint64_t v155 = (const std::string::value_type *)qword_25CD718;
  }
  if (byte_25CD72F >= 0) {
    std::string::size_type v156 = byte_25CD72F;
  }
  else {
    std::string::size_type v156 = qword_25CD720;
  }
  size_t v157 = std::string::append(&__dst, v155, v156);
  long long v158 = *(_OWORD *)&v157->__r_.__value_.__l.__data_;
  qword_25CDFF8 = v157->__r_.__value_.__r.__words[2];
  xmmword_25CDFE8 = v158;
  v157->__r_.__value_.__l.__size_ = 0;
  v157->__r_.__value_.__r.__words[2] = 0;
  v157->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v282.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_297;
    }
  }
  else if ((SHIBYTE(v282.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_297;
  }
  operator delete(v282.__r_.__value_.__l.__data_);
LABEL_297:
  byte_25CE017 = 16;
  strcpy((char *)&xmmword_25CE000, "Use_NACS_Adapter");
  byte_25CE02F = 16;
  strcpy(byte_25CE018, "Start_Route_Sign");
  qword_25CE030 = (uint64_t)operator new(0x20uLL);
  unk_25CE038 = v277;
  strcpy((char *)qword_25CE030, "Start_Route_Spoken_Primary");
  int v159 = byte_25CC6C7;
  if (byte_25CC6C7 >= 0) {
    size_t v160 = byte_25CC6C7;
  }
  else {
    size_t v160 = qword_25CC6B8;
  }
  unint64_t v161 = v160 + 27;
  if (v160 + 27 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v161 <= 0x16)
  {
    char v162 = &qword_25CE048;
    qword_25CE050 = 0;
    unk_25CE058 = 0;
    qword_25CE048 = 0;
    byte_25CE05F = v160 + 27;
LABEL_314:
    if (v159 >= 0) {
      std::string v169 = &qword_25CC6B0;
    }
    else {
      std::string v169 = (uint64_t *)qword_25CC6B0;
    }
    memmove(v162, v169, v160);
    goto LABEL_318;
  }
  uint64_t v167 = (v161 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v161 | 7) != 0x17) {
    uint64_t v167 = v161 | 7;
  }
  uint64_t v168 = v167 + 1;
  char v162 = (uint64_t *)operator new(v167 + 1);
  qword_25CE050 = v160 + 27;
  unk_25CE058 = v168 | 0x8000000000000000;
  qword_25CE048 = (uint64_t)v162;
  if (v160) {
    goto LABEL_314;
  }
LABEL_318:
  strcpy((char *)v162 + v160, "Turn_Around_To_Route_Spoken");
  strcpy(&byte_25CE077, "\t_Two_Lanes");
  strcpy((char *)&qword_25CE060, "_One_Lane");
  strcpy(&byte_25CE08F, "\n_Three_Lanes");
  byte_25CE0A7 = 12;
  byte_25CE0BF = 11;
  strcpy((char *)&qword_25CE0A8, "_Four_Lanes");
  byte_25CE0D7 = 11;
  strcpy((char *)&qword_25CE0C0, "_Five_Lanes");
  strcpy(&byte_25CE0EF, "\n_Seven_Lanes");
  strcpy((char *)&qword_25CE0D8, "_Six_Lanes");
  byte_25CE107 = 12;
  byte_25CE11F = 12;
  strcpy((char *)&qword_25CE108, "_Eight_Lanes");
  byte_25CE137 = 12;
  strcpy((char *)&qword_25CE120, "_Second_Lane");
  byte_25CE14F = 11;
  strcpy((char *)&qword_25CE138, "_Third_Lane");
  byte_25CE167 = 19;
  long long v271 = *(_OWORD *)"_Second_Third_Lanes";
  strcpy((char *)&xmmword_25CE150, "_Second_Third_Lanes");
  byte_25CE17F = 4;
  strcpy((char *)&dword_25CE168, "Left");
  byte_25CE197 = 5;
  byte_25CE184 = 116;
  dword_25CE180 = 1751607634;
  byte_25CE185 = 0;
  byte_25CE1AF = 6;
  strcpy((char *)&dword_25CE198, "Middle");
  BYTE1(qword_25CE1C0) = 0;
  WORD1(qword_25CE1C0) = 0;
  HIDWORD(qword_25CE1C0) = 0x10000000;
  strcpy((char *)dword_25CE1B0, "Left_Second_Lane");
  BYTE1(qword_25CE1D8) = 0;
  WORD1(qword_25CE1D8) = 0;
  HIDWORD(qword_25CE1D8) = 285212672;
  strcpy((char *)&dword_25CE1C8, "Right_Second_Lan");
  qword_25CE1F0 = 0xF00000000000000;
  strcpy((char *)&dword_25CE1E0, "Left_Third_Lane");
  qword_25CE208 = 0x1000000000000000;
  byte_25CE1FC = 116;
  dword_25CE1F8 = 1751607634;
  dword_25CE204 = 1701732684;
  unk_25CE1FD = *(void *)"_Third_Lane";
  size_t v170 = (char *)operator new(0x19uLL);
  qword_25CE210 = (uint64_t)v170;
  unk_25CE218 = v281;
  *(_DWORD *)size_t v170 = 1952867660;
  strcpy(v170 + 19, "anes");
  *(_OWORD *)(v170 + 4) = v271;
  unint64_t v171 = (char *)operator new(0x20uLL);
  qword_25CE228 = (uint64_t)v171;
  xmmword_25CE230 = v280;
  *(_DWORD *)unint64_t v171 = 1751607634;
  v171[4] = 116;
  strcpy(v171 + 20, "anes");
  *(_OWORD *)(v171 + 5) = v271;
  byte_25CE257 = 5;
  strcpy((char *)&dword_25CE240, "_Stay");
  byte_25CE26F = 13;
  strcpy((char *)&qword_25CE258, "Continue_Sign");
  byte_25CE287 = 8;
  strcpy((char *)&qword_25CE270, "Continue");
  int v172 = byte_25CD747;
  if (byte_25CD747 >= 0) {
    size_t v173 = byte_25CD747;
  }
  else {
    size_t v173 = qword_25CD738;
  }
  unint64_t v174 = v173 + 8;
  if (v173 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v174 >= 0x17)
  {
    uint64_t v176 = (v174 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v174 | 7) != 0x17) {
      uint64_t v176 = v174 | 7;
    }
    uint64_t v177 = v176 + 1;
    long long v178 = operator new(v176 + 1);
    qword_25CE290 = v173 + 8;
    qword_25CE298 = v177 | 0x8000000000000000;
    qword_25CE288 = (uint64_t)v178;
    *long long v178 = 0x65756E69746E6F43;
    char v175 = v178 + 1;
  }
  else
  {
    qword_25CE298 = 0;
    HIBYTE(qword_25CE298) = v173 + 8;
    qword_25CE288 = 0x65756E69746E6F43;
    qword_25CE290 = 0;
    char v175 = &qword_25CE290;
    if (!v173) {
      goto LABEL_332;
    }
  }
  if (v172 >= 0) {
    long long v179 = &qword_25CD730;
  }
  else {
    long long v179 = (uint64_t *)qword_25CD730;
  }
  memmove(v175, v179, v173);
LABEL_332:
  *((unsigned char *)v175 + v173) = 0;
  int v180 = byte_25CD7A7;
  if (byte_25CD7A7 >= 0) {
    size_t v181 = byte_25CD7A7;
  }
  else {
    size_t v181 = qword_25CD798;
  }
  unint64_t v182 = v181 + 8;
  if (v181 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v182 >= 0x17)
  {
    uint64_t v184 = (v182 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v182 | 7) != 0x17) {
      uint64_t v184 = v182 | 7;
    }
    uint64_t v185 = v184 + 1;
    __int16 v186 = operator new(v184 + 1);
    *((void *)&xmmword_25CE2A0 + 1) = v181 + 8;
    unk_25CE2B0 = v185 | 0x8000000000000000;
    *(void *)&xmmword_25CE2A0 = v186;
    void *v186 = qword_25CE270;
    int v183 = (char *)(v186 + 1);
  }
  else
  {
    unk_25CE2B0 = 0;
    byte_25CE2B7 = v181 + 8;
    xmmword_25CE2A0 = (unint64_t)qword_25CE270;
    int v183 = (char *)&xmmword_25CE2A0 + 8;
    if (!v181) {
      goto LABEL_346;
    }
  }
  if (v180 >= 0) {
    long long v187 = &qword_25CD790;
  }
  else {
    long long v187 = (uint64_t *)qword_25CD790;
  }
  memmove(v183, v187, v181);
LABEL_346:
  v183[v181] = 0;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 1;
  LOWORD(__dst.__r_.__value_.__l.__data_) = 83;
  v284[23] = 2;
  strcpy(v284, "SW");
  v286[7] = 1;
  LOWORD(v285[0]) = 87;
  HIBYTE(v287) = 2;
  strcpy(&v286[8], "NW");
  HIBYTE(v289) = 1;
  LOWORD(v288[0]) = 78;
  HIBYTE(v291) = 2;
  strcpy((char *)&v290, "NE");
  HIBYTE(v293) = 1;
  LOWORD(v292) = 69;
  HIBYTE(v295) = 2;
  strcpy((char *)&__p, "SE");
  sub_4BDC0C(qword_25CE2B8, (uint64_t)&__dst, 8uLL);
  if (SHIBYTE(v295) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v293) & 0x80000000) == 0)
    {
LABEL_348:
      if ((SHIBYTE(v291) & 0x80000000) == 0) {
        goto LABEL_349;
      }
      goto LABEL_383;
    }
  }
  else if ((SHIBYTE(v293) & 0x80000000) == 0)
  {
    goto LABEL_348;
  }
  operator delete((void *)v292);
  if ((SHIBYTE(v291) & 0x80000000) == 0)
  {
LABEL_349:
    if ((SHIBYTE(v289) & 0x80000000) == 0) {
      goto LABEL_350;
    }
    goto LABEL_384;
  }
LABEL_383:
  operator delete((void *)v290);
  if ((SHIBYTE(v289) & 0x80000000) == 0)
  {
LABEL_350:
    if ((SHIBYTE(v287) & 0x80000000) == 0) {
      goto LABEL_351;
    }
    goto LABEL_385;
  }
LABEL_384:
  operator delete(v288[0]);
  if ((SHIBYTE(v287) & 0x80000000) == 0)
  {
LABEL_351:
    if ((v286[7] & 0x80000000) == 0) {
      goto LABEL_352;
    }
    goto LABEL_386;
  }
LABEL_385:
  operator delete(*(void **)&v286[8]);
  if ((v286[7] & 0x80000000) == 0)
  {
LABEL_352:
    if ((v284[23] & 0x80000000) == 0) {
      goto LABEL_353;
    }
LABEL_387:
    operator delete(*(void **)v284);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_354;
    }
    goto LABEL_388;
  }
LABEL_386:
  operator delete(v285[0]);
  if ((v284[23] & 0x80000000) != 0) {
    goto LABEL_387;
  }
LABEL_353:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_354;
  }
LABEL_388:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_354:
  byte_25CE2E7 = 13;
  strcpy((char *)&qword_25CE2D0, "{instruction}");
  byte_25CE2FF = 20;
  strcpy(byte_25CE2E8, "{primaryInstruction}");
  strcpy((char *)&xmmword_25CE300, "{secondaryInstruction}");
  HIBYTE(word_25CE316) = 22;
  qword_25CE318 = (uint64_t)operator new(0x20uLL);
  unk_25CE320 = v279;
  strcpy((char *)qword_25CE318, "{andSecondaryInstruction}");
  qword_25CE330 = (uint64_t)operator new(0x20uLL);
  unk_25CE338 = v280;
  strcpy((char *)qword_25CE330, "{toSecondaryInstruction}");
  byte_25CE35F = 21;
  strcpy(byte_25CE348, "{continueInstruction}");
  qword_25CE360 = (uint64_t)operator new(0x20uLL);
  unk_25CE368 = v277;
  strcpy((char *)qword_25CE360, "{thenSecondaryInstruction}");
  byte_25CE38F = 14;
  strcpy((char *)&qword_25CE378, "{instruction1}");
  byte_25CE3A7 = 14;
  strcpy((char *)&qword_25CE390, "{instruction2}");
  strcpy(&byte_25CE3BF, "\n{nextDistance}");
  strcpy((char *)&qword_25CE3A8, "{distance}");
  byte_25CE3D7 = 14;
  byte_25CE3EF = 16;
  strcpy(byte_25CE3D8, "{valid_distance}");
  strcpy(&byte_25CE407, "\n{valid_distance}");
  strcpy((char *)&qword_25CE3F0, "{distance}");
  byte_25CE41F = 16;
  byte_25CE437 = 15;
  strcpy((char *)&qword_25CE420, "{ClimbDistance}");
  byte_25CE44F = 17;
  strcpy(byte_25CE438, "{DescentDistance}");
  byte_25CE467 = 13;
  strcpy((char *)&qword_25CE450, "{nonBrkSpace}");
  byte_25CE47F = 9;
  strcpy((char *)&qword_25CE468, "{newLine}");
  byte_25CE497 = 6;
  word_25CE484 = -24382;
  dword_25CE480 = -1211981630;
  byte_25CE486 = 0;
  byte_25CE4AF = 2;
  word_25CE498 = -24382;
  byte_25CE49A = 0;
  byte_25CE4C7 = 1;
  word_25CE4B0 = 10;
  byte_25CE4DF = 1;
  word_25CE4C8 = 32;
  byte_25CE4F7 = 2;
  strcpy((char *)&word_25CE4E0, "\n\n");
  strcpy(&byte_25CE50F, "\t{TowardShield1}");
  strcpy((char *)&qword_25CE4F8, "{Shield1}");
  byte_25CE527 = 15;
  strcpy(&byte_25CE53F, "\t{TowardShield2}");
  strcpy((char *)&qword_25CE528, "{Shield2}");
  byte_25CE557 = 15;
  byte_25CE56F = 12;
  strcpy((char *)&qword_25CE558, "{Direction1}");
  byte_25CE587 = 12;
  strcpy((char *)qword_25CE570, "{Direction2}");
  byte_25CE59F = 18;
  strcpy(byte_25CE588, "{TowardDirection1}");
  byte_25CE5B7 = 18;
  strcpy((char *)&xmmword_25CE5A0, "{TowardDirection2}");
  byte_25CE5CF = 7;
  strcpy((char *)&dword_25CE5B8, "{Icon1}");
  byte_25CE5E7 = 7;
  strcpy((char *)&dword_25CE5D0, "{Icon2}");
  byte_25CE5E8[23] = 14;
  strcpy(byte_25CE5E8, "{Intersection}");
  byte_25CE617 = 6;
  strcpy((char *)&xmmword_25CE600, "{Road}");
  byte_25CE62F = 7;
  strcpy((char *)&dword_25CE618, "{Road1}");
  byte_25CE647 = 7;
  strcpy((char *)&xmmword_25CE630, "{Road2}");
  strcpy(&byte_25CE65F, "\n{Freeway}");
  strcpy((char *)&qword_25CE648, "{Elevator}");
  strcpy(&byte_25CE677, "\t{Ferry}");
  byte_25CE68F = 7;
  byte_25CE6A7 = 13;
  strcpy((char *)&xmmword_25CE690, "{ShuttleName}");
  byte_25CE6BF = 11;
  strcpy((char *)&xmmword_25CE6A8, "{Signpost1}");
  byte_25CE6D7 = 11;
  strcpy((char *)&xmmword_25CE6C0, "{Signpost2}");
  byte_25CE6D8[23] = 12;
  strcpy(byte_25CE6D8, "{ExitNumber}");
  strcpy(&byte_25CE707, "\t{Name}");
  strcpy((char *)&xmmword_25CE6F0, "{Address}");
  byte_25CE71F = 6;
  byte_25CE737 = 11;
  strcpy((char *)&xmmword_25CE720, "{PlaceName}");
  byte_25CE74F = 14;
  strcpy((char *)&xmmword_25CE738, "{ElevatorName}");
  byte_25CE767 = 15;
  strcpy((char *)&xmmword_25CE750, "{EscalatorName}");
  byte_25CE77F = 12;
  strcpy((char *)&xmmword_25CE768, "{StairsName}");
  strcpy(&byte_25CE797, "\n{BridgeName}");
  strcpy((char *)&xmmword_25CE780, "{RampName}");
  byte_25CE7AF = 12;
  byte_25CE7C7 = 12;
  strcpy((char *)&xmmword_25CE7B0, "{TunnelName}");
  byte_25CE7DF = 13;
  strcpy((char *)&xmmword_25CE7C8, "{CustomLabel}");
  std::string __dst = *(std::string *)byte_25CE5E8;
  *(_OWORD *)v284 = xmmword_25CE600;
  *(void *)&v284[16] = unk_25CE610;
  *(_OWORD *)v285 = *(_OWORD *)&dword_25CE618;
  *(void *)v286 = unk_25CE628;
  *(_OWORD *)&v286[8] = xmmword_25CE630;
  uint64_t v287 = unk_25CE640;
  *(_OWORD *)uint64_t v288 = *(_OWORD *)&qword_25CE648;
  uint64_t v289 = unk_25CE658;
  uint64_t v291 = unk_25CE670;
  long long v290 = xmmword_25CE660;
  long long v292 = xmmword_25CE678;
  uint64_t v293 = unk_25CE688;
  uint64_t v295 = unk_25CE6A0;
  long long __p = xmmword_25CE690;
  long long v296 = xmmword_25CE6A8;
  uint64_t v297 = unk_25CE6B8;
  uint64_t v299 = unk_25CE6D0;
  long long v298 = xmmword_25CE6C0;
  long long v300 = *(_OWORD *)byte_25CE6D8;
  long long v302 = xmmword_25CE6F0;
  uint64_t v301 = *(void *)&byte_25CE6D8[16];
  uint64_t v303 = unk_25CE700;
  long long v304 = xmmword_25CE708;
  long long v306 = xmmword_25CE720;
  uint64_t v305 = unk_25CE718;
  uint64_t v307 = unk_25CE730;
  long long v308 = xmmword_25CE738;
  long long v310 = xmmword_25CE750;
  uint64_t v309 = unk_25CE748;
  uint64_t v311 = unk_25CE760;
  long long v312 = xmmword_25CE768;
  long long v314 = xmmword_25CE780;
  uint64_t v313 = unk_25CE778;
  uint64_t v315 = unk_25CE790;
  long long v316 = xmmword_25CE798;
  long long v318 = xmmword_25CE7B0;
  uint64_t v317 = unk_25CE7A8;
  uint64_t v319 = unk_25CE7C0;
  uint64_t v321 = unk_25CE7D8;
  long long v320 = xmmword_25CE7C8;
  sub_4BDC0C(qword_25CE7E0, (uint64_t)&__dst, 0x15uLL);
  if (SHIBYTE(v321) < 0)
  {
    operator delete((void *)v320);
    if ((SHIBYTE(v319) & 0x80000000) == 0)
    {
LABEL_356:
      if ((SHIBYTE(v317) & 0x80000000) == 0) {
        goto LABEL_357;
      }
      goto LABEL_391;
    }
  }
  else if ((SHIBYTE(v319) & 0x80000000) == 0)
  {
    goto LABEL_356;
  }
  operator delete((void *)v318);
  if ((SHIBYTE(v317) & 0x80000000) == 0)
  {
LABEL_357:
    if ((SHIBYTE(v315) & 0x80000000) == 0) {
      goto LABEL_358;
    }
    goto LABEL_392;
  }
LABEL_391:
  operator delete((void *)v316);
  if ((SHIBYTE(v315) & 0x80000000) == 0)
  {
LABEL_358:
    if ((SHIBYTE(v313) & 0x80000000) == 0) {
      goto LABEL_359;
    }
    goto LABEL_393;
  }
LABEL_392:
  operator delete((void *)v314);
  if ((SHIBYTE(v313) & 0x80000000) == 0)
  {
LABEL_359:
    if ((SHIBYTE(v311) & 0x80000000) == 0) {
      goto LABEL_360;
    }
    goto LABEL_394;
  }
LABEL_393:
  operator delete((void *)v312);
  if ((SHIBYTE(v311) & 0x80000000) == 0)
  {
LABEL_360:
    if ((SHIBYTE(v309) & 0x80000000) == 0) {
      goto LABEL_361;
    }
    goto LABEL_395;
  }
LABEL_394:
  operator delete((void *)v310);
  if ((SHIBYTE(v309) & 0x80000000) == 0)
  {
LABEL_361:
    if ((SHIBYTE(v307) & 0x80000000) == 0) {
      goto LABEL_362;
    }
    goto LABEL_396;
  }
LABEL_395:
  operator delete((void *)v308);
  if ((SHIBYTE(v307) & 0x80000000) == 0)
  {
LABEL_362:
    if ((SHIBYTE(v305) & 0x80000000) == 0) {
      goto LABEL_363;
    }
    goto LABEL_397;
  }
LABEL_396:
  operator delete((void *)v306);
  if ((SHIBYTE(v305) & 0x80000000) == 0)
  {
LABEL_363:
    if ((SHIBYTE(v303) & 0x80000000) == 0) {
      goto LABEL_364;
    }
    goto LABEL_398;
  }
LABEL_397:
  operator delete((void *)v304);
  if ((SHIBYTE(v303) & 0x80000000) == 0)
  {
LABEL_364:
    if ((SHIBYTE(v301) & 0x80000000) == 0) {
      goto LABEL_365;
    }
    goto LABEL_399;
  }
LABEL_398:
  operator delete((void *)v302);
  if ((SHIBYTE(v301) & 0x80000000) == 0)
  {
LABEL_365:
    if ((SHIBYTE(v299) & 0x80000000) == 0) {
      goto LABEL_366;
    }
    goto LABEL_400;
  }
LABEL_399:
  operator delete((void *)v300);
  if ((SHIBYTE(v299) & 0x80000000) == 0)
  {
LABEL_366:
    if ((SHIBYTE(v297) & 0x80000000) == 0) {
      goto LABEL_367;
    }
    goto LABEL_401;
  }
LABEL_400:
  operator delete((void *)v298);
  if ((SHIBYTE(v297) & 0x80000000) == 0)
  {
LABEL_367:
    if ((SHIBYTE(v295) & 0x80000000) == 0) {
      goto LABEL_368;
    }
    goto LABEL_402;
  }
LABEL_401:
  operator delete((void *)v296);
  if ((SHIBYTE(v295) & 0x80000000) == 0)
  {
LABEL_368:
    if ((SHIBYTE(v293) & 0x80000000) == 0) {
      goto LABEL_369;
    }
    goto LABEL_403;
  }
LABEL_402:
  operator delete((void *)__p);
  if ((SHIBYTE(v293) & 0x80000000) == 0)
  {
LABEL_369:
    if ((SHIBYTE(v291) & 0x80000000) == 0) {
      goto LABEL_370;
    }
    goto LABEL_404;
  }
LABEL_403:
  operator delete((void *)v292);
  if ((SHIBYTE(v291) & 0x80000000) == 0)
  {
LABEL_370:
    if ((SHIBYTE(v289) & 0x80000000) == 0) {
      goto LABEL_371;
    }
    goto LABEL_405;
  }
LABEL_404:
  operator delete((void *)v290);
  if ((SHIBYTE(v289) & 0x80000000) == 0)
  {
LABEL_371:
    if ((SHIBYTE(v287) & 0x80000000) == 0) {
      goto LABEL_372;
    }
    goto LABEL_406;
  }
LABEL_405:
  operator delete(v288[0]);
  if ((SHIBYTE(v287) & 0x80000000) == 0)
  {
LABEL_372:
    if ((v286[7] & 0x80000000) == 0) {
      goto LABEL_373;
    }
    goto LABEL_407;
  }
LABEL_406:
  operator delete(*(void **)&v286[8]);
  if ((v286[7] & 0x80000000) == 0)
  {
LABEL_373:
    if ((v284[23] & 0x80000000) == 0) {
      goto LABEL_374;
    }
LABEL_408:
    operator delete(*(void **)v284);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_375;
    }
    goto LABEL_409;
  }
LABEL_407:
  operator delete(v285[0]);
  if ((v284[23] & 0x80000000) != 0) {
    goto LABEL_408;
  }
LABEL_374:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_375;
  }
LABEL_409:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_375:
  qword_25CE7F8 = (uint64_t)operator new(0x19uLL);
  unk_25CE800 = v281;
  strcpy((char *)qword_25CE7F8, "From_User_Location_List");
  byte_25CE827 = 20;
  strcpy(byte_25CE810, "Origin_Waypoint_List");
  qword_25CE828 = (uint64_t)operator new(0x20uLL);
  unk_25CE830 = v277;
  strcpy((char *)qword_25CE828, "Intermediate_Waypoint_List");
  unk_25CE840 = operator new(0x20uLL);
  unk_25CE848 = v279;
  strcpy(unk_25CE840, "Destination_Waypoint_List");
  byte_25CE86F = 15;
  strcpy(byte_25CE858, "{toDestination}");
  byte_25CE887 = 13;
  strcpy((char *)&xmmword_25CE870, "{Destination}");
  byte_25CE89F = 7;
  strcpy(byte_25CE888, "To_Home");
  byte_25CE8B7 = 14;
  strcpy(byte_25CE8A0, "To_ContactHome");
  byte_25CE8CF = 7;
  strcpy(byte_25CE8B8, "To_Work");
  byte_25CE8E7 = 14;
  strcpy(byte_25CE8D0, "To_ContactWork");
  strcpy(&byte_25CE8FF, "\nTo_Business");
  strcpy(byte_25CE8E8, "To_Address");
  byte_25CE917 = 11;
  byte_25CE92F = 16;
  strcpy(byte_25CE918, "To_Other_Contact");
  strcpy(&byte_25CE947, "\tTo_ContactSchool");
  strcpy(byte_25CE930, "To_School");
  byte_25CE95F = 16;
  byte_25CE977 = 17;
  strcpy(byte_25CE960, "To_PersonLocation");
  qword_25CE978 = (uint64_t)operator new(0x20uLL);
  unk_25CE980 = v278;
  strcpy((char *)qword_25CE978, "To_ContactCustomLabelAddress");
  byte_25CE9A7 = 7;
  strcpy((char *)&dword_25CE990, "At_Home");
  byte_25CE9BF = 14;
  strcpy((char *)&qword_25CE9A8, "At_ContactHome");
  byte_25CE9D7 = 7;
  strcpy((char *)&dword_25CE9C0, "At_Work");
  byte_25CE9EF = 14;
  strcpy((char *)&qword_25CE9D8, "At_ContactWork");
  strcpy(&byte_25CEA07, "\nAt_Business");
  strcpy((char *)&qword_25CE9F0, "At_Address");
  byte_25CEA1F = 11;
  byte_25CEA37 = 16;
  strcpy(byte_25CEA20, "At_Other_Contact");
  byte_25CEA4F = 4;
  strcpy((char *)&dword_25CEA38, "Home");
  byte_25CEA67 = 11;
  strcpy((char *)&qword_25CEA50 + 7, "Home");
  qword_25CEA50 = *(void *)&v265[16];
  byte_25CEA7F = 4;
  strcpy((char *)&dword_25CEA68, "Work");
  byte_25CEA97 = 11;
  strcpy((char *)&qword_25CEA80 + 7, "Work");
  qword_25CEA80 = *(void *)v265;
  byte_25CEAAF = 7;
  strcpy((char *)&dword_25CEA98, "Address");
  byte_25CEAC7 = 8;
  strcpy((char *)&qword_25CEAB0, "Business");
  byte_25CEADF = 13;
  qword_25CEAC8 = *(void *)&v265[48];
  *(uint64_t *)((char *)&qword_25CEAC8 + 5) = *(void *)&v265[32];
  byte_25CEAD5 = 0;
  byte_25CEAF7 = 6;
  strcpy((char *)&dword_25CEAE0, "School");
  byte_25CEB0F = 13;
  strcpy((char *)&qword_25CEAF8, "ContactSchool");
  byte_25CEB27 = 14;
  strcpy((char *)&qword_25CEB10, "PersonLocation");
  qword_25CEB28 = (uint64_t)operator new(0x20uLL);
  xmmword_25CEB30 = v279;
  strcpy((char *)qword_25CEB28, "ContactCustomLabelAddress");
  if (byte_25CE887 < 0)
  {
    sub_4200(&xmmword_25CEB40, (void *)xmmword_25CE870, *((unint64_t *)&xmmword_25CE870 + 1));
  }
  else
  {
    xmmword_25CEB40 = xmmword_25CE870;
    qword_25CEB50 = unk_25CE880;
  }
  byte_25CEB6F = 16;
  strcpy((char *)&xmmword_25CEB58, "{PrevExitNumber}");
  byte_25CEB87 = 10;
  strcpy((char *)&qword_25CEB70, "{PrevRoad}");
  qword_25CEB88 = (uint64_t)operator new(0x20uLL);
  unk_25CEB90 = v280;
  strcpy((char *)qword_25CEB88, "{RouteTotalExpectedTime}");
  byte_25CEBB7 = 18;
  strcpy(byte_25CEBA0, "{ChargePercentage}");
  qword_25CEBB8 = (uint64_t)operator new(0x20uLL);
  unk_25CEBC0 = v274;
  strcpy((char *)qword_25CEBB8, "{RemainingChargePercentage}");
  byte_25CEBE7 = 16;
  strcpy(byte_25CEBD0, "{ChargeDuration}");
  byte_25CEBFF = 15;
  strcpy((char *)&qword_25CEBE8, "{ConnectorType}");
  byte_25CEC17 = 19;
  strcpy(byte_25CEC00, "{ChargeStationName}");
  byte_25CEC2F = 7;
  strcpy((char *)&dword_25CEC18, "{Power}");
  byte_25CEC47 = 13;
  strcpy((char *)&qword_25CEC30, "{VehicleName}");
  byte_25CEC5F = 18;
  strcpy((char *)&xmmword_25CEC48, "{AreaIncidentName}");
  byte_25CEC77 = 14;
  strcpy((char *)&qword_25CEC60, "{AreaIncident}");
  byte_25CEC8F = 16;
  strcpy((char *)&xmmword_25CEC78, "{AffectedRegion}");
  byte_25CECA7 = 21;
  strcpy(byte_25CEC90, "{AreaIncidentWeblink}");
  byte_25CECBF = 20;
  strcpy((char *)&xmmword_25CECA8, "{AreaIncidentAgency}");
  byte_25CECD7 = 11;
  strcpy((char *)&qword_25CECC0, "{IssueTime}");
  byte_25CECEF = 12;
  strcpy((char *)&qword_25CECD8, "{UpdateTime}");
  byte_25CED07 = 11;
  strcpy((char *)&qword_25CECF0, "{IssueDate}");
  byte_25CED1F = 12;
  strcpy((char *)&qword_25CED08, "{UpdateDate}");
  qword_25CED20 = (uint64_t)operator new(0x20uLL);
  unk_25CED28 = v280;
  strcpy((char *)qword_25CED20, "{AreaIncidentDataSource}");
  byte_25CED4F = 13;
  strcpy((char *)&qword_25CED38, "{AreaHectare}");
  byte_25CED67 = 10;
  strcpy((char *)&qword_25CED50, "{AreaAcre}");
  qword_25CED68 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25CED70 = v276;
  strcpy((char *)qword_25CED68, "{WildfirePercentageContained}");
  qword_25CED80 = (uint64_t)operator new(0x28uLL);
  unk_25CED88 = v269[2];
  strcpy((char *)qword_25CED80, "{WildfireExpectedContainmentDate}");
  qword_25CED98 = (uint64_t)operator new(0x20uLL);
  unk_25CEDA0 = v278;
  strcpy((char *)qword_25CED98, "{ServerRecommendedRouteName}");
  qword_25CEDB0 = (uint64_t)operator new(0x20uLL);
  unk_25CEDB8 = v278;
  strcpy((char *)qword_25CEDB0, "{ServerNonRecommendedRoute1}");
  qword_25CEDC8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25CEDD0 = v278;
  strcpy((char *)qword_25CEDC8, "{ServerNonRecommendedRoute2}");
  byte_25CEDF7 = 12;
  strcpy((char *)&qword_25CEDE0, "{ClientDest}");
  byte_25CEE0F = 6;
  strcpy((char *)&dword_25CEDF8, "{Name}");
  qword_25CEE10 = (uint64_t)operator new(0x20uLL);
  unk_25CEE18 = v269[1];
  strcpy((char *)qword_25CEE10, "ProactiveAlert_FasterRouteTitle");
  qword_25CEE28 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25CEE30 = v277;
  strcpy((char *)qword_25CEE28, "ProactiveAlert_RoadClosure");
  qword_25CEE40 = (uint64_t)operator new(0x30uLL);
  unk_25CEE48 = v272;
  strcpy((char *)qword_25CEE40, "ProactiveAlert_UnusuallyHeavyTrafficOnTwo");
  qword_25CEE58 = (uint64_t)operator new(0x28uLL);
  unk_25CEE60 = v275;
  strcpy((char *)qword_25CEE58, "ProactiveAlert_FasterRouteTitle_to_Home");
  qword_25CEE70 = (uint64_t)operator new(0x28uLL);
  unk_25CEE78 = v275;
  strcpy((char *)qword_25CEE70, "ProactiveAlert_FasterRouteTitle_to_Work");
  qword_25CEE88 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25CEE90 = v275;
  strcpy((char *)qword_25CEE88, "ProactiveAlert_FasterRouteTitle_to_Name");
  qword_25CEEA0 = (uint64_t)operator new(0x30uLL);
  unk_25CEEA8 = xmmword_20B93B0;
  strcpy((char *)qword_25CEEA0, "ProactiveAlert_FasterRouteTitle_to_StreetName");
  byte_25CEECF = 17;
  strcpy(byte_25CEEB8, "Proactive_Driving");
  strcpy(&byte_25CEEE7, "\n{RouteName}");
  strcpy((char *)&qword_25CEED0, "_RouteName");
  byte_25CEEFF = 11;
  qword_25CEF00 = (uint64_t)operator new(0x28uLL);
  unk_25CEF08 = v269[2];
  strcpy((char *)qword_25CEF00, "Pass_Traffic_Light_Spoken_Primary");
  qword_25CEF18 = (uint64_t)operator new(0x20uLL);
  unk_25CEF20 = v276;
  strcpy((char *)qword_25CEF18, "Pass_Stop_Sign_Spoken_Primary");
  unk_25CEF30 = operator new(0x20uLL);
  unk_25CEF38 = v269[0];
  strcpy(unk_25CEF30, "Pass_Roundabout_Spoken_Primary");
  strcpy(&byte_25CEF5F, "\nBannerBody");
  strcpy(byte_25CEF48, "BannerHead");
  strcpy(&byte_25CEF77, "\nBannerDescription");
  byte_25CEF8F = 17;
  strcpy(&byte_25CEFA7, "\n_Incident");
  strcpy((char *)&qword_25CEF90, "VoiceAlert");
  strcpy(&byte_25CEFBF, "\t_Area_Incident");
  byte_25CEFD7 = 14;
  byte_25CEFEF = 15;
  strcpy((char *)&qword_25CEFD8, "_Area_Incidents");
  strcpy(&byte_25CF007, "\t_Crash");
  strcpy((char *)&qword_25CEFF0, "_Accident");
  byte_25CF01F = 6;
  byte_25CF037 = 16;
  strcpy((char *)&xmmword_25CF020, "_Congestion_Zone");
  strcpy(&byte_25CF04F, "\n_Environmental_Zone");
  strcpy((char *)&qword_25CF038, "_Toll_Zone");
  byte_25CF067 = 19;
  BYTE1(qword_25CF078) = 116;
  WORD1(qword_25CF078) = 0;
  HIDWORD(qword_25CF078) = 301989888;
  strcpy(byte_25CF080, "_Construction");
  strcpy((char *)&qword_25CF068, "_Incident_Accide");
  byte_25CF097 = 13;
  byte_25CF0AF = 7;
  strcpy((char *)&dword_25CF098, "_Hazard");
  byte_25CF0C7 = 12;
  strcpy((char *)&qword_25CF0B0, "_LaneClosure");
  byte_25CF0DF = 12;
  strcpy((char *)&qword_25CF0C8, "_LaneTrailer");
  qmemcpy(&byte_25CF0F7, "\t_LaneTrailer", 13);
  strcpy((char *)&qword_25CF0E0, "_Shoulder");
  qword_25CF108 = 0x1500007200000000;
  *(void *)algn_25CF104 = *(void *)"_Shoulder";
  strcpy((char *)&xmmword_25CF110, "_Causing_Traffic_Delay");
  HIBYTE(word_25CF126) = 22;
  byte_25CF13F = 6;
  strcpy((char *)&dword_25CF128, "_Timed");
  byte_25CF157 = 12;
  strcpy((char *)&qword_25CF140, "_HasDistance");
  byte_25CF16F = 8;
  strcpy((char *)&qword_25CF158, "_Closure");
  strcpy(&byte_25CF187, "\n_BadRoad");
  strcpy((char *)&qword_25CF170, "_NoReroute");
  byte_25CF19F = 8;
  byte_25CF1B7 = 12;
  strcpy((char *)&qword_25CF1A0, "_TollTrailer");
  byte_25CF1CF = 12;
  strcpy((char *)&qword_25CF1B8, "_BestTrailer");
  byte_25CF1E7 = 8;
  strcpy((char *)&qword_25CF1D0, "_Trailer");
  byte_25CF1FF = 18;
  strcpy((char *)&xmmword_25CF1E8, "_Secondary_Trailer");
  byte_25CF217 = 8;
  strcpy((char *)&qword_25CF200, "_Savings");
  byte_25CF22F = 8;
  strcpy((char *)&qword_25CF218, "_AltRoad");
  byte_25CF247 = 6;
  strcpy((char *)&dword_25CF230, "_Named");
  byte_25CF25F = 6;
  strcpy((char *)&dword_25CF248, "_NAMED");
  byte_25CF277 = 22;
  strcpy((char *)&xmmword_25CF260, "_Named_Suggested_Route");
  qword_25CF290 = 0x1000000000000000;
  xmmword_25CF280 = xmmword_20E81D0;
  byte_25CF2AF = 11;
  strcpy((char *)&qword_25CF298, "_Speed_Trap");
  byte_25CF2C7 = 4;
  strcpy((char *)&dword_25CF2B0, "_UGI");
  byte_25CF2DF = 12;
  strcpy((char *)&qword_25CF2C8, "_Safer_Route");
  qword_25CF2E0 = (uint64_t)operator new(0x20uLL);
  unk_25CF2E8 = v269[1];
  strcpy((char *)qword_25CF2E0, "BlockedRouteByBlockingIncident_");
  qword_25CF2F8 = (uint64_t)operator new(0x28uLL);
  long long v271 = xmmword_20B9280;
  unk_25CF300 = xmmword_20B9280;
  strcpy((char *)qword_25CF2F8, "BlockedRouteByManeuverRestriction_");
  qword_25CF310 = (uint64_t)operator new(0x20uLL);
  unk_25CF318 = v269[0];
  strcpy((char *)qword_25CF310, "BlockedRouteByTimeRestriction_");
  qword_25CF328 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25CF330 = xmmword_20B8FD0;
  strcpy((char *)qword_25CF328, "SuggestRouteToAvoidBlockingIncident_");
  qword_25CF340 = (uint64_t)operator new(0x30uLL);
  unk_25CF348 = xmmword_20B9380;
  strcpy((char *)qword_25CF340, "SuggestRouteToAvoidBlockingManeuverRestriction_");
  qword_25CF358 = (uint64_t)operator new(0x30uLL);
  unk_25CF360 = xmmword_20B93E0;
  strcpy((char *)qword_25CF358, "SuggestRouteToAvoidBlockingTimeRestriction_");
  byte_25CF387 = 1;
  word_25CF370 = 95;
  strcpy((char *)&xmmword_25CF388, "IncidentsCausingDelay_");
  HIBYTE(word_25CF39E) = 22;
  qword_25CF3A0 = (uint64_t)operator new(0x19uLL);
  unk_25CF3A8 = v281;
  strcpy((char *)qword_25CF3A0, "NonVotableRoadIncident_");
  byte_25CF3CF = 20;
  strcpy(byte_25CF3B8, "VotableRoadIncident_");
  byte_25CF3E7 = 13;
  strcpy((char *)&qword_25CF3D0, "AreaIncident_");
  byte_25CF3FF = 15;
  strcpy((char *)&qword_25CF3E8, "CongestionZone_");
  qword_25CF400 = (uint64_t)operator new(0x20uLL);
  unk_25CF408 = v280;
  strcpy((char *)qword_25CF400, "EVModifiedChargingStops_");
  byte_25CF42F = 13;
  strcpy((char *)&qword_25CF418, "EVDisconnect_");
  byte_25CF447 = 12;
  strcpy((char *)&qword_25CF430, "EVReconnect_");
  qword_25CF448 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25CF450 = v278;
  strcpy((char *)qword_25CF448, "EVOfflineToOnlineTransition_");
  byte_25CF477 = 13;
  strcpy((char *)&qword_25CF460, "EVOfflineSAR_");
  byte_25CF48F = 21;
  strcpy((char *)&xmmword_25CF478, "EVTowingNotSupported_");
  byte_25CF4A7 = 18;
  strcpy(algn_25CF490, "EVInfeasibleRoute_");
  qword_25CF4A8 = (uint64_t)operator new(0x38uLL);
  *(_OWORD *)algn_25CF4B0 = xmmword_20B8DF0;
  strcpy((char *)qword_25CF4A8, "SuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_25CF4C0 = (uint64_t)operator new(0x40uLL);
  unk_25CF4C8 = xmmword_20B98C0;
  strcpy((char *)qword_25CF4C0, "LCSuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_25CF4D8 = (uint64_t)operator new(0x30uLL);
  unk_25CF4E0 = v273;
  strcpy((char *)qword_25CF4D8, "SuggestRouteAddingStopsForEVInfeasibleRoute_");
  qmemcpy(v269, "InfeasibleRoute_ngStopsForEVInfeSuggestRouteAddi", sizeof(v269));
  qword_25CF4F0 = (uint64_t)operator new(0x30uLL);
  *(_WORD *)&v265[50] = 0;
  *(_DWORD *)&v265[52] = 0;
  *(void *)&v265[56] = 0x8000000000000030;
  unk_25CF4F8 = xmmword_20B9A80;
  strcpy((char *)qword_25CF4F0, "LCSuggestRouteAddingStopsForEVInfeasibleRoute_");
  strcpy(v265, "InfeasibleRoute_dingStopsForEVInLCSuggestRouteAd.");
  qword_25CF508 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_25CF510 = v272;
  strcpy((char *)qword_25CF508, "SuggestRouteAddingStopsToIncreaseDestSoc_");
  uint64_t v188 = operator new(0x30uLL);
  qword_25CF520 = (uint64_t)v188;
  unk_25CF528 = v273;
  *uint64_t v188 = v269[2];
  v188[1] = v269[1];
  *(_OWORD *)((char *)v188 + 28) = v269[0];
  *((unsigned char *)v188 + 44) = 0;
  qword_25CF538 = (uint64_t)operator new(0x28uLL);
  unk_25CF540 = v271;
  strcpy((char *)qword_25CF538, "SuggestDetourWithHigherArrivalSOC_");
  size_t v189 = operator new(0x30uLL);
  qword_25CF550 = (uint64_t)v189;
  unk_25CF558 = *(_OWORD *)&v265[48];
  *size_t v189 = *(_OWORD *)&v265[32];
  v189[1] = *(_OWORD *)&v265[16];
  *(_OWORD *)((char *)v189 + 30) = *(_OWORD *)v265;
  *((unsigned char *)v189 + 46) = 0;
  qword_25CF568[0] = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25CF570 = v275;
  strcpy((char *)qword_25CF568[0], "SuggestRouteToDestForEVInfeasibleRoute_");
  qword_25CF580 = (uint64_t)operator new(0x28uLL);
  unk_25CF588 = v268;
  strcpy((char *)qword_25CF580, "SuggestRouteRemovingStopsFromEVRoute_");
  qword_25CF598 = (uint64_t)operator new(0x20uLL);
  unk_25CF5A0 = v280;
  strcpy((char *)qword_25CF598, "OfflineToOnlineNewRoute_");
  qword_25CF5B0 = (uint64_t)operator new(0x40uLL);
  unk_25CF5B8 = xmmword_20B98C0;
  strcpy((char *)qword_25CF5B0, "SuggestDetourWithHigherArrivalSOCForInfeasibleUserRoute_");
  byte_25CF5DF = 20;
  strcpy(byte_25CF5C8, "LPR_OFFLINE_REROUTE_");
  byte_25CF5F7 = 16;
  strcpy((char *)&xmmword_25CF5E0, "LPR_OFFLINE_SAR_");
  byte_25CF60F = 20;
  strcpy(byte_25CF5F8, "LPR_OFFLINE_REROUTE_");
  byte_25CF627 = 16;
  strcpy((char *)&xmmword_25CF610, "LPR_OFFLINE_SAR_");
  byte_25CF63F = 19;
  strcpy(byte_25CF628, "SuggestFasterRoute_");
  qword_25CF640 = (char *)operator new(0x20uLL);
  xmmword_25CF648 = v279;
  strcpy(qword_25CF640, "AreaIncidentSaferReroute_");
  byte_25CF66F = 12;
  strcpy((char *)&qword_25CF658, "_Remove_Stop");
  byte_25CF687 = 13;
  strcpy((char *)&qword_25CF670, "_Remove_Stops");
  strcpy(&byte_25CF69F, "\t_Add_Stops");
  strcpy((char *)&qword_25CF688, "_Add_Stop");
  strcpy(&byte_25CF6B7, "\n_Change_Route");
  byte_25CF6CF = 13;
  byte_25CF6E7 = 15;
  strcpy((char *)&qword_25CF6D0, "_Different_Stop");
  byte_25CF6FF = 16;
  strcpy((char *)&xmmword_25CF6E8, "_Different_Stops");
  byte_25CF717 = 15;
  strcpy((char *)&qword_25CF700, "_EV_Remove_Stop");
  byte_25CF72F = 16;
  strcpy((char *)&xmmword_25CF718, "_EV_Remove_Stops");
  byte_25CF747 = 12;
  strcpy((char *)&qword_25CF730, "_EV_Add_Stop");
  byte_25CF75F = 13;
  strcpy((char *)&qword_25CF748, "_EV_Add_Stops");
  byte_25CF777 = 15;
  strcpy((char *)&qword_25CF760, "_EV_Low_Battery");
  byte_25CF78F = 14;
  strcpy((char *)&qword_25CF778, "_EV_Infeasible");
  byte_25CF7A7 = 15;
  strcpy((char *)&qword_25CF790, "_EV_Last_Chance");
  qword_25CF7A8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25CF7B0 = v280;
  strcpy((char *)qword_25CF7A8, "_EV_Low_Battery_Add_Stop");
  uint64_t v190 = qword_25CF6A8;
  qword_25CF7C0 = (uint64_t)operator new(0x20uLL);
  unk_25CF7C8 = v279;
  strcpy((char *)qword_25CF7C0, "_EV_Low_Battery_Add_Stops");
  qword_25CF7D8 = (uint64_t)operator new(0x19uLL);
  unk_25CF7E0 = v281;
  strcpy((char *)qword_25CF7D8, "_EV_Infeasible_Add_Stop");
  int v191 = byte_25CF6B7;
  if (byte_25CF6B7 >= 0) {
    size_t v192 = byte_25CF6B7;
  }
  else {
    size_t v192 = v190;
  }
  unint64_t v193 = v192 + 14;
  if (v192 + 14 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v193 >= 0x17)
  {
    uint64_t v196 = (v193 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v193 | 7) != 0x17) {
      uint64_t v196 = v193 | 7;
    }
    uint64_t v197 = v196 + 1;
    unint64_t v198 = (char *)operator new(v196 + 1);
    qword_25CF7F8 = v192 + 14;
    unk_25CF800 = v197 | 0x8000000000000000;
    qword_25CF7F0 = (uint64_t)v198;
    qmemcpy(v198, "_EV_Infeasible", 14);
    uint64_t v194 = v198 + 14;
  }
  else
  {
    BYTE1(qword_25CF7F8) = 0;
    WORD1(qword_25CF7F8) = 0;
    HIDWORD(qword_25CF7F8) = 0;
    unk_25CF800 = 0;
    byte_25CF807 = v192 + 14;
    strcpy((char *)&qword_25CF7F0, "_EV_Infe");
    uint64_t v194 = (char *)&qword_25CF7F8 + 6;
    if (!v192)
    {
      char v195 = 1;
      goto LABEL_425;
    }
  }
  if (v191 >= 0) {
    uint64_t v199 = (uint64_t)&qword_25CF6A0;
  }
  else {
    uint64_t v199 = 0x6F74535F6464415FLL;
  }
  memmove(v194, (const void *)v199, v192);
  char v195 = 0;
LABEL_425:
  v194[v192] = 0;
  uint64_t v200 = (char *)operator new(0x20uLL);
  qword_25CF808 = (uint64_t)v200;
  *(_OWORD *)algn_25CF810 = v280;
  *(void *)uint64_t v200 = qword_25CF790;
  *(void *)(v200 + 7) = *(uint64_t *)((char *)&qword_25CF790 + 7);
  *(void *)(v200 + 15) = qword_25CF688;
  v200[23] = word_25CF690;
  v200[24] = 0;
  unint64_t v201 = v192 + 15;
  if (v192 + 15 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v201 > 0x16)
  {
    uint64_t v203 = (v201 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v201 | 7) != 0x17) {
      uint64_t v203 = v201 | 7;
    }
    uint64_t v204 = v203 + 1;
    v202 = (uint64_t *)operator new(v203 + 1);
    qword_25CF828 = v192 + 15;
    unk_25CF830 = v204 | 0x8000000000000000;
    qword_25CF820 = (uint64_t)v202;
  }
  else
  {
    v202 = &qword_25CF820;
    qword_25CF828 = 0;
    unk_25CF830 = 0;
    qword_25CF820 = 0;
    byte_25CF837 = v192 + 15;
  }
  uint64_t *v202 = qword_25CF790;
  *(uint64_t *)((char *)v202 + 7) = *(uint64_t *)((char *)&qword_25CF790 + 7);
  int v205 = (char *)v202 + 15;
  if ((v195 & 1) == 0)
  {
    if (v191 >= 0) {
      size_t v206 = &qword_25CF6A0;
    }
    else {
      size_t v206 = (uint64_t *)qword_25CF6A0;
    }
    memmove((char *)v202 + 15, v206, v192);
  }
  v205[v192] = 0;
  byte_25CF84F = 17;
  strcpy((char *)&xmmword_25CF838, "_EV_Forced_Detour");
  qword_25CF850 = (uint64_t)operator new(0x20uLL);
  unk_25CF858 = v279;
  strcpy((char *)qword_25CF850, "_EV_Higher_Arrival_Charge");
  qword_25CF868 = (uint64_t)operator new(0x28uLL);
  unk_25CF870 = xmmword_20B8FD0;
  strcpy((char *)qword_25CF868, "_EV_Infeasible_Higher_Arrival_Charge");
  byte_25CF897 = 16;
  strcpy(byte_25CF880, "_EV_Out_Of_Range");
  qword_25CF898 = (uint64_t)operator new(0x20uLL);
  unk_25CF8A0 = v274;
  strcpy((char *)qword_25CF898, "_EV_Last_Chance_Take_Detour");
  strcpy(byte_25CF8B0, "_EV_Forced_Modify_Stop");
  HIBYTE(word_25CF8C6) = 22;
  qword_25CF8C8 = (uint64_t)operator new(0x19uLL);
  unk_25CF8D0 = v281;
  strcpy((char *)qword_25CF8C8, "_EV_Forced_Modify_Stops");
  byte_25CF8F7 = 19;
  strcpy(byte_25CF8E0, "_EV_Forced_Add_Stop");
  byte_25CF90F = 20;
  strcpy((char *)&xmmword_25CF8F8, "_EV_Forced_Add_Stops");
  byte_25CF927 = 21;
  strcpy(byte_25CF910, "_EV_Battery_Info_Lost");
  qword_25CF928 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25CF930 = v279;
  strcpy((char *)qword_25CF928, "_EV_Battery_Info_Restored");
  qword_25CF940 = (uint64_t)operator new(0x20uLL);
  unk_25CF948 = v280;
  strcpy((char *)qword_25CF940, "_EV_Towing_Not_Supported");
  qword_25CF958 = (uint64_t)operator new(0x28uLL);
  unk_25CF960 = v270;
  strcpy((char *)qword_25CF958, "_EV_Offline_to_Online_Transition");
  byte_25CF987 = 15;
  strcpy((char *)&qword_25CF970, "_EV_Offline_SAR");
  qword_25CF988 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25CF990 = v278;
  strcpy((char *)qword_25CF988, "_Offline_to_Online_New_Route");
  byte_25CF9B7 = 12;
  strcpy((char *)&qword_25CF9A0, "BannerButton");
  byte_25CF9CF = 8;
  strcpy((char *)&qword_25CF9B8, "_Dismiss");
  byte_25CF9E7 = 3;
  word_25CF9D0 = 20319;
  byte_25CF9D2 = 75;
  byte_25CF9D3 = 0;
  byte_25CF9FF = 11;
  strcpy((char *)&qword_25CF9E8, "_Still_Here");
  byte_25CFA17 = 8;
  strcpy((char *)&qword_25CFA00, "_Cleared");
  qmemcpy(&byte_25CFA2F, "\nBannerButton", 13);
  strcpy((char *)&qword_25CFA18, "_No_Thanks");
  uint64_t v207 = qword_25CF9A8;
  qword_25CFA40 = 0x1400000000000000;
  *(void *)algn_25CFA3C = 0x7373696D7369445FLL;
  qword_25CFA58 = 0xF00000000000000;
  qword_25CFA50 = 0x4B4F5F6E6F7474;
  int v208 = byte_25CF747;
  if (byte_25CF747 >= 0) {
    size_t v209 = byte_25CF747;
  }
  else {
    size_t v209 = qword_25CF738;
  }
  unint64_t v210 = v209 + 12;
  qword_25CFA48 = *(void *)"BannerButton";
  if (v209 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v210 >= 0x17)
  {
    uint64_t v212 = (v210 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v210 | 7) != 0x17) {
      uint64_t v212 = v210 | 7;
    }
    uint64_t v213 = v212 + 1;
    size_t v214 = (char *)operator new(v212 + 1);
    qword_25CFA68 = v209 + 12;
    unk_25CFA70 = v213 | 0x8000000000000000;
    qword_25CFA60 = (uint64_t)v214;
    *((_DWORD *)v214 + 2) = 1852798068;
    *(void *)size_t v214 = *(void *)"BannerButton";
    v211 = v214 + 12;
  }
  else
  {
    BYTE5(qword_25CFA68) = 0;
    HIWORD(qword_25CFA68) = 0;
    unk_25CFA70 = 0;
    byte_25CFA77 = v209 + 12;
    strcpy((char *)&qword_25CFA60, "BannerButton");
    v211 = (char *)&qword_25CFA68 + 4;
    if (!v209) {
      goto LABEL_450;
    }
  }
  if (v208 >= 0) {
    unint64_t v215 = &qword_25CF730;
  }
  else {
    unint64_t v215 = (uint64_t *)qword_25CF730;
  }
  memmove(v211, v215, v209);
LABEL_450:
  v211[v209] = 0;
  int v216 = byte_25CF75F;
  if (byte_25CF75F >= 0) {
    size_t v217 = byte_25CF75F;
  }
  else {
    size_t v217 = unk_25CF750;
  }
  unint64_t v218 = v217 + 12;
  if (v217 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v218 >= 0x17)
  {
    uint64_t v220 = (v218 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v218 | 7) != 0x17) {
      uint64_t v220 = v218 | 7;
    }
    uint64_t v221 = v220 + 1;
    size_t v222 = (char *)operator new(v220 + 1);
    qword_25CFA80 = v217 + 12;
    unk_25CFA88 = v221 | 0x8000000000000000;
    qword_25CFA78 = (uint64_t)v222;
    *(void *)size_t v222 = qword_25CF9A0;
    *((_DWORD *)v222 + 2) = qword_25CF9A8;
    v219 = v222 + 12;
  }
  else
  {
    qword_25CFA80 = 0;
    unk_25CFA88 = 0;
    byte_25CFA8F = v217 + 12;
    LODWORD(qword_25CFA80) = qword_25CF9A8;
    qword_25CFA78 = qword_25CF9A0;
    v219 = (char *)&qword_25CFA80 + 4;
    if (!v217) {
      goto LABEL_464;
    }
  }
  if (v216 >= 0) {
    unint64_t v223 = &qword_25CF748;
  }
  else {
    unint64_t v223 = (uint64_t *)qword_25CF748;
  }
  memmove(v219, v223, v217);
LABEL_464:
  v219[v217] = 0;
  int v224 = byte_25CF717;
  if (byte_25CF717 >= 0) {
    size_t v225 = byte_25CF717;
  }
  else {
    size_t v225 = unk_25CF708;
  }
  unint64_t v226 = v225 + 12;
  if (v225 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v226 >= 0x17)
  {
    uint64_t v228 = (v226 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v226 | 7) != 0x17) {
      uint64_t v228 = v226 | 7;
    }
    uint64_t v229 = v228 + 1;
    size_t v230 = (char *)operator new(v228 + 1);
    qword_25CFA98 = v225 + 12;
    unk_25CFAA0 = v229 | 0x8000000000000000;
    qword_25CFA90 = (uint64_t)v230;
    *(void *)size_t v230 = qword_25CF9A0;
    *((_DWORD *)v230 + 2) = qword_25CF9A8;
    v227 = v230 + 12;
  }
  else
  {
    qword_25CFA98 = 0;
    unk_25CFAA0 = 0;
    byte_25CFAA7 = v225 + 12;
    LODWORD(qword_25CFA98) = qword_25CF9A8;
    qword_25CFA90 = qword_25CF9A0;
    v227 = (char *)&qword_25CFA98 + 4;
    if (!v225) {
      goto LABEL_478;
    }
  }
  if (v224 >= 0) {
    int v231 = &qword_25CF700;
  }
  else {
    int v231 = (uint64_t *)qword_25CF700;
  }
  memmove(v227, v231, v225);
LABEL_478:
  v227[v225] = 0;
  int v232 = byte_25CF9B7;
  if (byte_25CF9B7 >= 0) {
    size_t v233 = byte_25CF9B7;
  }
  else {
    size_t v233 = v207;
  }
  int v234 = byte_25CF72F;
  if (byte_25CF72F >= 0) {
    size_t v235 = byte_25CF72F;
  }
  else {
    size_t v235 = *((void *)&xmmword_25CF718 + 1);
  }
  unint64_t v236 = v235 + v233;
  if (v235 + v233 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v236 <= 0x16)
  {
    v237 = &qword_25CFAA8;
    qword_25CFAB0 = 0;
    unk_25CFAB8 = 0;
    qword_25CFAA8 = 0;
    byte_25CFABF = v235 + v233;
    if (!v233) {
      goto LABEL_491;
    }
    goto LABEL_487;
  }
  uint64_t v244 = (v236 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v236 | 7) != 0x17) {
    uint64_t v244 = v236 | 7;
  }
  uint64_t v245 = v244 + 1;
  v237 = (uint64_t *)operator new(v244 + 1);
  qword_25CFAB0 = v235 + v233;
  unk_25CFAB8 = v245 | 0x8000000000000000;
  qword_25CFAA8 = (uint64_t)v237;
  if (v233)
  {
LABEL_487:
    if (v232 >= 0) {
      unint64_t v238 = &qword_25CF9A0;
    }
    else {
      unint64_t v238 = (uint64_t *)qword_25CF9A0;
    }
    memmove(v237, v238, v233);
  }
LABEL_491:
  v239 = (char *)v237 + v233;
  if (v235)
  {
    if (v234 >= 0) {
      unint64_t v240 = &xmmword_25CF718;
    }
    else {
      unint64_t v240 = (long long *)xmmword_25CF718;
    }
    memmove(v239, v240, v235);
  }
  v239[v235] = 0;
  unint64_t v241 = v233 + 11;
  if (v233 + 11 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v241 >= 0x17)
  {
    uint64_t v246 = (v241 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v241 | 7) != 0x17) {
      uint64_t v246 = v241 | 7;
    }
    uint64_t v247 = v246 + 1;
    uint64_t v242 = (uint64_t *)operator new(v246 + 1);
    qword_25CFAC8 = v233 + 11;
    unk_25CFAD0 = v247 | 0x8000000000000000;
    qword_25CFAC0 = (uint64_t)v242;
  }
  else
  {
    uint64_t v242 = &qword_25CFAC0;
    qword_25CFAC8 = 0;
    unk_25CFAD0 = 0;
    qword_25CFAC0 = 0;
    byte_25CFAD7 = v233 + 11;
    if (!v233)
    {
      *(_DWORD *)((char *)&qword_25CFAC0 + 7) = *(_DWORD *)((char *)&qword_25CF9E8 + 7);
      qword_25CFAC0 = qword_25CF9E8;
      BYTE3(qword_25CFAC8) = 0;
      LOBYTE(v243) = 8;
      goto LABEL_512;
    }
  }
  if (v232 >= 0) {
    v248 = &qword_25CF9A0;
  }
  else {
    v248 = (uint64_t *)qword_25CF9A0;
  }
  memmove(v242, v248, v233);
  v249 = (char *)v242 + v233;
  int v250 = *(_DWORD *)((char *)&qword_25CF9E8 + 7);
  *(void *)v249 = qword_25CF9E8;
  *(_DWORD *)(v249 + 7) = v250;
  v249[11] = 0;
  unint64_t v243 = v233 + 8;
  if (v233 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v243 <= 0x16)
  {
LABEL_512:
    int v251 = &qword_25CFAD8;
    qword_25CFAE0 = 0;
    unk_25CFAE8 = 0;
    qword_25CFAD8 = 0;
    byte_25CFAEF = v243;
    if (!v233) {
      goto LABEL_517;
    }
    goto LABEL_513;
  }
  uint64_t v263 = (v243 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v243 | 7) != 0x17) {
    uint64_t v263 = v243 | 7;
  }
  uint64_t v264 = v263 + 1;
  int v251 = (uint64_t *)operator new(v263 + 1);
  qword_25CFAE0 = v233 + 8;
  unk_25CFAE8 = v264 | 0x8000000000000000;
  qword_25CFAD8 = (uint64_t)v251;
  if (v233)
  {
LABEL_513:
    if (v232 >= 0) {
      size_t v252 = &qword_25CF9A0;
    }
    else {
      size_t v252 = (uint64_t *)qword_25CF9A0;
    }
    memmove(v251, v252, v233);
  }
LABEL_517:
  unint64_t v253 = (char *)v251 + v233;
  *(void *)unint64_t v253 = qword_25CFA00;
  v253[8] = 0;
  int v254 = byte_25CFA2F;
  if (byte_25CFA2F >= 0) {
    size_t v255 = byte_25CFA2F;
  }
  else {
    size_t v255 = qword_25CFA20;
  }
  unint64_t v256 = v255 + v233;
  if (v255 + v233 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v256 <= 0x16)
  {
    v257 = &qword_25CFAF0;
    qword_25CFAF8 = 0;
    unk_25CFB00 = 0;
    qword_25CFAF0 = 0;
    byte_25CFB07 = v255 + v233;
    if (!v233) {
      goto LABEL_527;
    }
    goto LABEL_523;
  }
  uint64_t v261 = (v256 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v256 | 7) != 0x17) {
    uint64_t v261 = v256 | 7;
  }
  uint64_t v262 = v261 + 1;
  v257 = (uint64_t *)operator new(v261 + 1);
  qword_25CFAF8 = v255 + v233;
  unk_25CFB00 = v262 | 0x8000000000000000;
  qword_25CFAF0 = (uint64_t)v257;
  if (v233)
  {
LABEL_523:
    if (v232 >= 0) {
      v258 = &qword_25CF9A0;
    }
    else {
      v258 = (uint64_t *)qword_25CF9A0;
    }
    memmove(v257, v258, v233);
  }
LABEL_527:
  v259 = (char *)v257 + v233;
  if (v255)
  {
    if (v254 >= 0) {
      v260 = &qword_25CFA18;
    }
    else {
      v260 = (uint64_t *)qword_25CFA18;
    }
    memmove(v259, v260, v255);
  }
  v259[v255] = 0;
  strcpy(&byte_25CFB1F, "\n{newroute}");
  strcpy((char *)&qword_25CFB08, "{roadname}");
  strcpy(&byte_25CFB37, "\n{count}");
  byte_25CFB4F = 7;
  strcpy(&byte_25CFB67, "\n{dur}");
  strcpy((char *)&qword_25CFB50, "{duration}");
  byte_25CFB7F = 5;
  qword_25CFB80 = (uint64_t)operator new(0x20uLL);
  unk_25CFB88 = v277;
  strcpy((char *)qword_25CFB80, "{PleaseProceedWithCaution}");
  byte_25CFBAF = 15;
  strcpy((char *)&qword_25CFB98, "{UserRouteName}");
  byte_25CFBC7 = 20;
  strcpy((char *)&xmmword_25CFBB0, "{SuggestedRouteName}");
  byte_25CFBC8[23] = 18;
  strcpy(byte_25CFBC8, "Speed_Camera_Ahead");
  qword_25CFBE0 = (uint64_t)operator new(0x20uLL);
  unk_25CFBE8 = v276;
  strcpy((char *)qword_25CFBE0, "Red_Light_Camera_Ahead_Spoken");
  qword_25CFBF8 = (uint64_t)operator new(0x20uLL);
  unk_25CFC00 = v276;
  strcpy((char *)qword_25CFBF8, "Stop_Sign_Camera_Ahead_Spoken");
  qword_25CFC10 = (uint64_t)operator new(0x28uLL);
  unk_25CFC18 = v271;
  strcpy((char *)qword_25CFC10, "Speed_Camera_Ahead_Multiple_Spoken");
  qword_25CFC28 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25CFC30 = v266;
  strcpy((char *)qword_25CFC28, "Red_Light_Camera_Ahead_Multiple_Spoken");
  qword_25CFC40 = (uint64_t)operator new(0x20uLL);
  unk_25CFC48 = v278;
  strcpy((char *)qword_25CFC40, "Camera_Ahead_Multiple_Spoken");
  qword_25CFC58 = (uint64_t)operator new(0x30uLL);
  unk_25CFC60 = v267;
  strcpy((char *)qword_25CFC58, "Red_Light_Camera_Speed_Camera_Ahead_Spoken");
  qword_25CFC70 = (char *)operator new(0x30uLL);
  strcpy(qword_25CFC70, "Stop_Sign_Camera_Speed_Camera_Ahead_Spoken");
  byte_25CFC9F = 16;
  xmmword_25CFC78 = v267;
  strcpy(byte_25CFC88, "_Speed_Limit_Mph");
  byte_25CFCB7 = 16;
  strcpy(byte_25CFCA0, "_Speed_Limit_Kph");
  byte_25CFCCF = 11;
  strcpy((char *)&qword_25CFCB8, "Watch_Speed");
  byte_25CFCE7 = 4;
  strcpy((char *)&qword_25CFCD0, "_One");
  byte_25CFCFF = 4;
  strcpy((char *)&qword_25CFCE8, "_Two");
  byte_25CFD17 = 4;
  strcpy((char *)&qword_25CFD00, "_Few");
  byte_25CFD2F = 5;
  strcpy((char *)&qword_25CFD18, "_Many");
  byte_25CFD47 = 6;
  strcpy((char *)&qword_25CFD30, "_Other");
  byte_25CFD5F = 4;
  strcpy((char *)&dword_25CFD48, "_ONE");
  byte_25CFD77 = 7;
  strcpy((char *)&dword_25CFD60, "{Speed}");
  byte_25CFD8F = 8;
  strcpy((char *)&xmmword_25CFD78, "Dismount");
  byte_25CFDA7 = 4;
  strcpy((char *)&xmmword_25CFD90, "Walk");
  byte_25CFDBF = 5;
  strcpy((char *)&dword_25CFDA8, "Mount");
  byte_25CFDD7 = 7;
  strcpy((char *)&dword_25CFDC0, "Remount");
  strcpy(&byte_25CFDEF, "\t_Crosswalk");
  strcpy((char *)&qword_25CFDD8, "Walk_Road");
  strcpy(&byte_25CFE07, "\n_PLURAL");
  byte_25CFE1F = 7;
  strcpy(&byte_25CFE37, "\n{description1}");
  strcpy((char *)&qword_25CFE20, "_SECONDARY");
  byte_25CFE4F = 14;
  byte_25CFE67 = 14;
  strcpy((char *)&qword_25CFE50, "{description2}");
  byte_25CFE7F = 21;
  strcpy((char *)&xmmword_25CFE68, "TWO_ROAD_DESCRIPTIONS");
  byte_25CFE97 = 17;
  strcpy((char *)&xmmword_25CFE80, "{SlopePercentage}");
  byte_25CFEAF = 15;
  strcpy((char *)&qword_25CFE98, "_Protected_Lane");
  strcpy(&byte_25CFEC7, "\n_Paved_Path");
  strcpy((char *)&qword_25CFEB0, "_Bike_Path");
  byte_25CFEDF = 11;
  byte_25CFEF7 = 15;
  strcpy((char *)&qword_25CFEE0, "_Dedicated_Lane");
  byte_25CFF0F = 12;
  strcpy((char *)&qword_25CFEF8, "_Shared_Path");
  strcpy(&byte_25CFF27, "\n_UnnamedRoad");
  strcpy((char *)&qword_25CFF10, "_Bike_Lane");
  byte_25CFF3F = 12;
  byte_25CFF57 = 5;
  strcpy((char *)&dword_25CFF40, "_Path");
  byte_25CFF6F = 6;
  strcpy((char *)&dword_25CFF58, "_Trail");
  strcpy(&byte_25CFF87, "\t_Plaza");
  strcpy((char *)&qword_25CFF70, "_Sidewalk");
  byte_25CFF9F = 6;
  byte_25CFFB7 = 15;
  strcpy((char *)&qword_25CFFA0, "_Moving_Walkway");
  byte_25CFFB8[23] = 14;
  strcpy(byte_25CFFB8, "Two_Stage_Turn");
  byte_25CFFE7 = 16;
  strcpy((char *)&xmmword_25CFFD0, "{OptionalPeriod}");
  byte_25CFFFF = 18;
  strcpy((char *)&xmmword_25CFFE8, "Advisory_Separator");
  byte_25D0017 = 6;
  strcpy((char *)&dword_25D0000, "Period");
  byte_25D002F = 21;
  strcpy((char *)&xmmword_25D0018, "Advisory_Title_Notice");
  strcpy((char *)&xmmword_25D0030, "Advisory_Title_Notices");
  HIBYTE(word_25D0046) = 22;
  byte_25D005F = 7;
  strcpy((char *)&dword_25D0048, "_DETAIL");
  byte_25D0077 = 17;
  strcpy((char *)&xmmword_25D0060, "_LONG_REGION_LIST");
  byte_25D008F = 16;
  strcpy((char *)&xmmword_25D0078, "Advisory_Grouped");
  byte_25D00A7 = 11;
  strcpy((char *)&qword_25D0090, "_Advisories");
  qword_25D00A8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25D00B0 = v274;
  strcpy((char *)qword_25D00A8, "Advisory_WILDFIRE_METADATA_");
  byte_25D00D7 = 8;
  strcpy((char *)&qword_25D00C0, "Advisory");
  byte_25D00EF = 13;
  strcpy((char *)&qword_25D00D8, "MPR_NUM_STOPS");
  byte_25D0107 = 17;
  strcpy(algn_25D00F0, "EV_CHARGE_STATION");
  byte_25D011F = 11;
  strcpy((char *)&qword_25D0108, "_NAMED_CITY");
  byte_25D0137 = 5;
  strcpy((char *)&dword_25D0120, "_Stop");
  strcpy(&byte_25D014F, "\n{StopsCount}");
  strcpy((char *)&qword_25D0138, "{CityName}");
  byte_25D0167 = 12;
  byte_25D017F = 11;
  strcpy((char *)&qword_25D0168, "_With_Other");
  byte_25D0197 = 15;
  strcpy((char *)&qword_25D0180, "{DepartureTime}");
  qword_25D0198 = (uint64_t)operator new(0x28uLL);
  unk_25D01A0 = v275;
  strcpy((char *)qword_25D0198, "Ending_Charge_Station_Port_Availability");
  qword_25D01B0 = (uint64_t)operator new(0x28uLL);
  unk_25D01B8 = v268;
  strcpy((char *)qword_25D01B0, "Ending_Charge_Station_No_Availability");
  qword_25D01C8 = (uint64_t)operator new(0x28uLL);
  unk_25D01D0 = v271;
  strcpy((char *)qword_25D01C8, "Ending_Charge_Station_No_Real_Time");
  byte_25D01F7 = 16;
  strcpy(byte_25D01E0, "{AvailablePorts}");
  byte_25D020F = 12;
  strcpy((char *)&qword_25D01F8, "{TotalPorts}");
  byte_25D0227 = 14;
  strcpy((char *)&qword_25D0210, "{ManeuverIcon}");
  qword_25D0228 = (uint64_t)operator new(0x38uLL);
  *(_OWORD *)algn_25D0230 = xmmword_20B9A60;
  strcpy((char *)qword_25D0228, "Walking_Distance_ManeuverIcon_PrimaryInstruction");
  qword_25D0240 = (uint64_t)operator new(0x20uLL);
  unk_25D0248 = v274;
  strcpy((char *)qword_25D0240, "Walking_Destination_Unnamed");
  qword_25D0258 = (uint64_t)operator new(0x20uLL);
  unk_25D0260 = v276;
  strcpy((char *)qword_25D0258, "TrafficDelay_Label_Title_Sign");
  qword_25D0270 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)&qword_25D0278 = v278;
  strcpy((char *)qword_25D0270, "Special_Guidance_Instruction");
  byte_25D029F = 2;
  strcpy((char *)&word_25D0288, "CZ");
  byte_25D02B7 = 3;
  dword_25D02A0 = 5919811;
  unk_25D02CF = 3;
  dword_25D02B8 = 6243649;
  byte_25D02E7 = 0;
  byte_25D02FF = 7;
  strcpy((char *)&dword_25D02E8, "TRANSIT");
  byte_25D0317 = 7;
  strcpy((char *)&dword_25D0300, "OFFLINE");
  qword_25D0318 = (uint64_t)operator new(0x28uLL);
  unk_25D0320 = v266;
  strcpy((char *)qword_25D0318, "Advisory_Card_French_Climate_Law_Title");
  qword_25D0330 = (uint64_t)operator new(0x30uLL);
  unk_25D0338 = xmmword_20B93C0;
  strcpy((char *)qword_25D0330, "Advisory_Card_French_Climate_Law_Details");
  qword_25D0348 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_25D0350 = v272;
  strcpy((char *)qword_25D0348, "French_Climate_Law_Metadata_Weblink_Title");
  qword_25D0360 = (uint64_t)operator new(0x20uLL);
  unk_25D0368 = v278;
  strcpy((char *)qword_25D0360, "{ClimateLawLearnMoreWeblink}");
  byte_25D038F = 3;
  dword_25D0378 = 4280902;
  qword_25D0390 = (uint64_t)operator new(0x70uLL);
  unk_25D0398 = xmmword_20E81E0;
  strcpy((char *)qword_25D0390, "https://www.vie-publique.fr/loi/278460-loi-22-aout-2021-climat-et-resilience-convention-citoyenne-climat");
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__dst, "UNKNOWN");
  *(_DWORD *)v284 = 0;
  HIBYTE(v285[0]) = 14;
  strcpy(&v284[8], "ROUTES_THROUGH");
  LODWORD(v285[1]) = 1;
  v286[23] = 9;
  strcpy(v286, "ROUTES_TO");
  LODWORD(v287) = 3;
  HIBYTE(v289) = 11;
  strcpy((char *)v288, "ROUTES_FROM");
  LODWORD(v290) = 2;
  xmmword_25D03A8 = 0u;
  xmmword_25D03B8 = 0u;
  dword_25D03C8 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25D03A8, (uint64_t)&__dst, (uint64_t)&__dst);
  sub_3A6EF0((uint64_t)&xmmword_25D03A8, (uint64_t)&v284[8], (uint64_t)&v284[8]);
  sub_3A6EF0((uint64_t)&xmmword_25D03A8, (uint64_t)v286, (uint64_t)v286);
  sub_3A6EF0((uint64_t)&xmmword_25D03A8, (uint64_t)v288, (uint64_t)v288);
  if (SHIBYTE(v289) < 0)
  {
    operator delete(v288[0]);
    if ((v286[23] & 0x80000000) == 0)
    {
LABEL_534:
      if ((SHIBYTE(v285[0]) & 0x80000000) == 0) {
        goto LABEL_535;
      }
      goto LABEL_547;
    }
  }
  else if ((v286[23] & 0x80000000) == 0)
  {
    goto LABEL_534;
  }
  operator delete(*(void **)v286);
  if ((SHIBYTE(v285[0]) & 0x80000000) == 0)
  {
LABEL_535:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_548:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
LABEL_547:
  operator delete(*(void **)&v284[8]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_548;
  }
}

void sub_8C7118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x3B7]) < 0)
  {
    operator delete((void *)STACK[0x3A0]);
    if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0)
  {
LABEL_3:
    if (SLOBYTE(STACK[0x387]) < 0) {
      goto LABEL_4;
    }
    goto LABEL_18;
  }
  operator delete((void *)STACK[0x388]);
  if (SLOBYTE(STACK[0x387]) < 0)
  {
LABEL_4:
    operator delete((void *)STACK[0x370]);
    if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0)
  {
LABEL_5:
    if (SLOBYTE(STACK[0x357]) < 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete((void *)STACK[0x358]);
  if (SLOBYTE(STACK[0x357]) < 0)
  {
LABEL_6:
    operator delete((void *)STACK[0x340]);
    if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0)
  {
LABEL_7:
    if (SLOBYTE(STACK[0x327]) < 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete((void *)STACK[0x328]);
  if (SLOBYTE(STACK[0x327]) < 0)
  {
LABEL_8:
    operator delete((void *)STACK[0x310]);
    if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0)
  {
LABEL_9:
    if (SLOBYTE(STACK[0x2F7]) < 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete((void *)STACK[0x2F8]);
  if (SLOBYTE(STACK[0x2F7]) < 0)
  {
LABEL_10:
    operator delete((void *)STACK[0x2E0]);
    if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0)
  {
LABEL_11:
    if (SLOBYTE(STACK[0x2C7]) < 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete((void *)STACK[0x2C8]);
  if (SLOBYTE(STACK[0x2C7]) < 0)
  {
LABEL_12:
    operator delete((void *)STACK[0x2B0]);
    if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0)
  {
LABEL_13:
    if (SLOBYTE(STACK[0x297]) < 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete((void *)STACK[0x298]);
  if (SLOBYTE(STACK[0x297]) < 0)
  {
LABEL_14:
    operator delete((void *)STACK[0x280]);
    if (SLOBYTE(STACK[0x27F]) < 0)
    {
LABEL_36:
      operator delete((void *)STACK[0x268]);
      if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0)
      {
LABEL_37:
        if (SLOBYTE(STACK[0x24F]) < 0)
        {
LABEL_38:
          operator delete((void *)STACK[0x238]);
          if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0)
          {
LABEL_39:
            if (SLOBYTE(STACK[0x21F]) < 0)
            {
LABEL_40:
              operator delete((void *)STACK[0x208]);
              if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0)
              {
LABEL_41:
                if (a72 < 0) {
                  goto LABEL_42;
                }
                goto LABEL_44;
              }
LABEL_34:
              operator delete(a73);
              if (a72 < 0)
              {
LABEL_42:
                operator delete(a71);
                if ((a70 & 0x80000000) == 0) {
                  goto LABEL_43;
                }
                goto LABEL_45;
              }
LABEL_44:
              if ((a70 & 0x80000000) == 0) {
LABEL_43:
              }
                _Unwind_Resume(a1);
LABEL_45:
              operator delete(a65);
              _Unwind_Resume(a1);
            }
LABEL_33:
            if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0) {
              goto LABEL_41;
            }
            goto LABEL_34;
          }
LABEL_32:
          operator delete((void *)STACK[0x220]);
          if (SLOBYTE(STACK[0x21F]) < 0) {
            goto LABEL_40;
          }
          goto LABEL_33;
        }
LABEL_31:
        if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0) {
          goto LABEL_39;
        }
        goto LABEL_32;
      }
LABEL_30:
      operator delete((void *)STACK[0x250]);
      if (SLOBYTE(STACK[0x24F]) < 0) {
        goto LABEL_38;
      }
      goto LABEL_31;
    }
LABEL_29:
    if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_30;
  }
LABEL_28:
  if (SLOBYTE(STACK[0x27F]) < 0) {
    goto LABEL_36;
  }
  goto LABEL_29;
}

void *sub_8C7470(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  *a1 = a2;
  a1[1] = sub_3750CC(a3);
  a1[2] = a4;
  a1[3] = a5;
  return a1;
}

uint64_t sub_8C74B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 80);
  if (v3 == -1 || v3 == *(void *)(a3 + 16)) {
    return 0;
  }
  int v6 = (unsigned __int8 *)(a3 + 329);
  if (!*(unsigned char *)(a3 + 330)) {
    int v6 = (unsigned __int8 *)(a2 + 1057);
  }
  int v7 = *v6;
  int v8 = *(_DWORD *)(a3 + 160);
  if (v7 == 1)
  {
    uint64_t result = 1;
    switch(v8)
    {
      case 2:
      case 21:
      case 28:
      case 30:
      case 34:
      case 61:
      case 63:
      case 66:
        return result;
      default:
        return 0;
    }
  }
  else
  {
    uint64_t result = 1;
    switch(v8)
    {
      case 1:
      case 20:
      case 27:
      case 29:
      case 33:
      case 60:
      case 62:
      case 65:
        return result;
      default:
        return 0;
    }
  }
  return result;
}

uint64_t sub_8C7764(int **a1)
{
  uint64_t v1 = (unsigned __int16 *)((char *)*a1 - **a1);
  unsigned int v2 = *v1;
  if (*((unsigned char *)a1 + 38))
  {
    if (v2 < 0x29) {
      return 0;
    }
    unsigned int v3 = v1[20];
    if (!v3) {
      return 0;
    }
  }
  else
  {
    if (v2 < 0x27) {
      return 0;
    }
    unsigned int v3 = v1[19];
    if (!v3) {
      return 0;
    }
  }
  uint64_t v4 = (unsigned int *)((char *)*a1 + v3 + *(int *)((char *)*a1 + v3));
  unint64_t v5 = v4 + 1;
  uint64_t v6 = *v4;
  if (v6)
  {
    int v7 = &v5[v6];
    while (1)
    {
      uint64_t v8 = *v5;
      unint64_t v9 = (unsigned __int16 *)((char *)v5 + v8 - *(int *)((char *)v5 + v8));
      if (*v9 >= 0xDu)
      {
        uint64_t v10 = v9[6];
        if (v9[6])
        {
          uint64_t v11 = (unsigned int *)((char *)v5 + v8 + v10);
          uint64_t v12 = *v11;
          uint64_t v13 = *(unsigned int *)((char *)v11 + v12);
          if (v13) {
            break;
          }
        }
      }
LABEL_9:
      ++v5;
      ++v4;
      if (v5 == v7) {
        return 0;
      }
    }
    uint64_t v14 = 0;
    uint64_t v15 = 4 * v13;
    unint64_t v16 = (char *)v4 + v10 + v8 + v12;
    while (1)
    {
      uint64_t v17 = *(unsigned int *)&v16[v14 + 8];
      uint64_t v18 = v17 - *(int *)&v16[v14 + 8 + v17];
      uint64_t v19 = &v16[v14 + v18];
      unsigned int v20 = *((unsigned __int16 *)v19 + 4);
      if (v20 < 0xB)
      {
        if (v20 < 9) {
          goto LABEL_14;
        }
      }
      else
      {
        uint64_t v21 = *((unsigned __int16 *)v19 + 9);
        if (v21 && v16[v14 + 8 + v17 + v21]) {
          return 1;
        }
      }
      uint64_t v22 = *(unsigned __int16 *)&v16[v14 + 16 + v18];
      if (v22 && v16[v14 + 8 + v17 + v22]) {
        return 1;
      }
LABEL_14:
      v14 += 4;
      if (v15 == v14) {
        goto LABEL_9;
      }
    }
  }
  return 0;
}

unint64_t sub_8C78A4(uint64_t a1, unsigned char *a2, int a3)
{
  unsigned int v3 = *(unsigned char **)(a1 + 24);
  uint64_t v4 = v3[1406];
  if (v3[1406])
  {
    if (a2[2083]) {
      BOOL v5 = v3[1056] == 0;
    }
    else {
      BOOL v5 = 0;
    }
    unsigned int v7 = !v5 && a2[2072] != 0;
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v3[1444]) {
      BOOL v9 = v8[1969] == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_22;
    }
  }
  else
  {
    unsigned int v7 = 0;
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v3[1444]) {
      BOOL v11 = v8[1969] == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (!v11)
    {
LABEL_22:
      uint64_t v10 = a2[2120] != 0;
      if (v3[1406]) {
        goto LABEL_23;
      }
      goto LABEL_32;
    }
  }
  uint64_t v10 = 0;
  if (v3[1406])
  {
LABEL_23:
    int v12 = v3[1056];
    if (a2[2083]) {
      BOOL v13 = v12 == 0;
    }
    else {
      BOOL v13 = 0;
    }
    uint64_t v4 = !v13 && a2[2072] != 0;
  }
LABEL_32:
  if (a3)
  {
    v7 &= v8[1975];
    uint64_t v10 = (v8[1977] & v10);
    uint64_t v4 = (v8[1976] & v4);
  }
  return ((unint64_t)a2[2084] << 40) | ((unint64_t)a2[2122] << 32) | (v4 << 24) | (v10 << 16) | ((unint64_t)v7 << 8) | a2[2121];
}

void sub_8C7980(uint64_t a1@<X0>, int **a2@<X1>, unsigned char *a3@<X2>, void *a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  if (*((_DWORD *)a2 + 8)) {
    BOOL v7 = *a2 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7 || a2[1] == 0)
  {
    *(void *)a6 = 0;
    *(void *)(a6 + 8) = 0;
    *(void *)(a6 + 16) = 0;
    return;
  }
  BOOL v13 = (uint64_t *)(a1 + 8);
  uint64_t v14 = (uint64_t *)(a2 + 4);
  sub_2954EC(*(void *)(a1 + 8), (uint64_t)a2[4], (uint64_t)v183);
  sub_2954EC(*v13, *v14, (uint64_t)&v192);
  uint64_t v15 = (void *)*((void *)&v192 + 1);
  if (*((void *)&v192 + 1) == (void)v193)
  {
    unint64_t v18 = 0xFFFFFFFF00000000;
    int v21 = 0x7FFFFFFF;
    uint64_t v19 = 0xFFFFFFFFLL;
    if (!*((void *)&v192 + 1)) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  unint64_t v16 = sub_2E40A4((uint64_t)&v192);
  unsigned int v17 = v16;
  unint64_t v18 = v16 & 0xFFFFFFFF00000000;
  uint64_t v15 = (void *)*((void *)&v192 + 1);
  uint64_t v19 = v17;
  int v21 = v20;
  if (*((void *)&v192 + 1))
  {
LABEL_12:
    *(void *)&long long v193 = v15;
    operator delete(v15);
  }
LABEL_13:
  unint64_t v181 = v18 | v19;
  int v182 = v21;
  uint64_t v22 = (unsigned __int16 *)((char *)*a2 - **a2);
  char v175 = a3;
  if (*v22 >= 0xDu && (uint64_t v23 = v22[6]) != 0) {
    unsigned int v24 = *(unsigned __int16 *)((char *)*a2 + v23);
  }
  else {
    unsigned int v24 = 0;
  }
  int v25 = sub_290DEC(*(void *)(a1 + 8) + 3896, 1u, 0);
  size_t v26 = &v25[-*(int *)v25];
  if (*(unsigned __int16 *)v26 < 0xBu)
  {
    uint64_t v27 = 0;
  }
  else
  {
    uint64_t v27 = *((unsigned __int16 *)v26 + 5);
    if (v27) {
      v27 += (uint64_t)&v25[*(unsigned int *)&v25[v27]];
    }
  }
  unint64_t v28 = (int *)(v27 + 4 * v24 + 4 + *(unsigned int *)(v27 + 4 * v24 + 4));
  float v29 = (unsigned __int16 *)((char *)v28 - *v28);
  if (*v29 >= 5u)
  {
    uint64_t v30 = v29[2];
    if (v30)
    {
      unint64_t v31 = (unsigned int *)((char *)v28 + v30);
      uint64_t v32 = *v31;
      size_t v34 = (char *)v31 + v32 + 4;
      size_t v33 = *(unsigned int *)((char *)v31 + v32);
      if (v33 >= 0x17)
      {
        uint64_t v37 = (v33 & 0xFFFFFFF8) + 8;
        if ((v33 | 7) != 0x17) {
          uint64_t v37 = v33 | 7;
        }
        uint64_t v38 = v37 + 1;
        unint64_t v35 = (void **)operator new(v37 + 1);
        __dst[1] = (void *)v33;
        unint64_t v180 = v38 | 0x8000000000000000;
        __dst[0] = v35;
      }
      else
      {
        HIBYTE(v180) = *(unsigned int *)((char *)v31 + v32);
        unint64_t v35 = __dst;
        if (!v33)
        {
LABEL_34:
          a3 = v175;
          *((unsigned char *)v35 + v33) = 0;
          int v36 = v175[5];
          if (!v175[5]) {
            goto LABEL_40;
          }
          goto LABEL_35;
        }
      }
      memcpy(v35, v34, v33);
      goto LABEL_34;
    }
  }
  HIBYTE(v180) = 0;
  LOBYTE(__dst[0]) = 0;
  int v36 = a3[5];
  if (!a3[5]) {
    goto LABEL_40;
  }
LABEL_35:
  if (a3[1])
  {
    uint8x8_t v39 = *a2;
    int v40 = *((unsigned __int8 *)a2 + 38);
    unint64_t v41 = (unsigned __int16 *)((char *)*a2 - **a2);
    unsigned int v42 = *v41;
    if (*((unsigned char *)a2 + 38))
    {
      if (v42 >= 0x4D)
      {
        unsigned int v43 = v41[38];
        if (v43)
        {
          int v44 = 2;
LABEL_50:
          BOOL v45 = (*(int *)((char *)v39 + v43) & v44) != 0;
LABEL_52:
          BOOL v51 = 0;
          BOOL v46 = a3[3] == 0;
          goto LABEL_53;
        }
      }
    }
    else if (v42 >= 0x4D)
    {
      unsigned int v43 = v41[38];
      if (v43)
      {
        int v44 = 1;
        goto LABEL_50;
      }
    }
    BOOL v45 = 0;
    goto LABEL_52;
  }
LABEL_40:
  BOOL v45 = 0;
  BOOL v46 = a3[3] == 0;
  uint8x8_t v39 = *a2;
  int v40 = *((unsigned __int8 *)a2 + 38);
  if (v36 || !a3[3])
  {
    BOOL v51 = 0;
    goto LABEL_53;
  }
  long long v47 = (unsigned __int16 *)((char *)v39 - *v39);
  unsigned int v48 = *v47;
  if (*((unsigned char *)a2 + 38))
  {
    if (v48 < 0x4D || (unsigned int v49 = v47[38]) == 0)
    {
      BOOL v46 = 0;
      BOOL v45 = 0;
      BOOL v51 = 0;
      int v40 = 1;
      goto LABEL_53;
    }
    int v50 = 8;
    goto LABEL_98;
  }
  if (v48 >= 0x4D)
  {
    unsigned int v49 = v47[38];
    if (v49)
    {
      int v50 = 4;
LABEL_98:
      BOOL v46 = 0;
      BOOL v45 = 0;
      BOOL v51 = (*(int *)((char *)v39 + v49) & v50) != 0;
      goto LABEL_53;
    }
  }
  int v40 = 0;
  BOOL v46 = 0;
  BOOL v45 = 0;
  BOOL v51 = 0;
LABEL_53:
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = 0;
  uint64_t v52 = *v39;
  uint64_t v53 = -v52;
  size_t v54 = (unsigned __int16 *)((char *)v39 - v52);
  unsigned int v55 = *v54;
  if (v40)
  {
    if (v55 < 0x4D || !v54[38])
    {
      if (*v54 <= 0x4Cu) {
        goto LABEL_79;
      }
      goto LABEL_63;
    }
    if ((*(int *)((char *)v39 + v54[38]) & 8) == 0) {
      BOOL v46 = 1;
    }
    if (v46 || v45)
    {
LABEL_59:
      size_t v54 = (unsigned __int16 *)((char *)v39 + v53);
      BOOL v56 = *(unsigned __int16 *)((char *)v39 + v53) >= 0x4Du;
      if (v40) {
        goto LABEL_60;
      }
      goto LABEL_118;
    }
LABEL_87:
    sub_639BF8(a4, (uint64_t *)&v181, (uint64_t)__dst, a5, (uint64_t)&v192);
    unint64_t v69 = *(void *)(a6 + 8);
    if (v69 >= *(void *)(a6 + 16))
    {
      int v75 = sub_8CF4AC((void **)a6, (uint64_t)&v192);
      int v76 = SHIBYTE(v204);
      *(void *)(a6 + 8) = v75;
      if (v76 < 0)
      {
        operator delete((void *)v203);
        if (SHIBYTE(v201) < 0) {
          goto LABEL_113;
        }
      }
      else if (SHIBYTE(v201) < 0)
      {
        goto LABEL_113;
      }
    }
    else
    {
      long long v70 = v192;
      long long v71 = v193;
      long long v72 = v194[0];
      *(_OWORD *)(v69 + 41) = *(_OWORD *)((char *)v194 + 9);
      *(_OWORD *)(v69 + 16) = v71;
      *(_OWORD *)(v69 + 32) = v72;
      *(_OWORD *)unint64_t v69 = v70;
      *(_DWORD *)(v69 + 96) = v198;
      if (v198 == 1)
      {
        uint64_t v79 = v195;
        *(void *)(v69 + 72) = 0;
        *(void *)(v69 + 64) = v79;
        *(void *)(v69 + 80) = 0;
        *(void *)(v69 + 88) = 0;
        size_t v80 = (const void *)v196;
        int64_t v81 = *((void *)&v196 + 1) - v196;
        if (*((void *)&v196 + 1) != (void)v196)
        {
          if (v81 < 0) {
            sub_2E00();
          }
          size_t v82 = (char *)operator new(*((void *)&v196 + 1) - v196);
          *(void *)(v69 + 72) = v82;
          *(void *)(v69 + 80) = v82;
          unint64_t v83 = &v82[8 * (v81 >> 3)];
          *(void *)(v69 + 88) = v83;
          memcpy(v82, v80, v81);
          *(void *)(v69 + 80) = v83;
        }
      }
      else if (!v198)
      {
        *(void *)(v69 + 64) = v195;
        int v73 = (unsigned char *)(v69 + 72);
        if (SHIBYTE(v197) < 0)
        {
          sub_4200(v73, (void *)v196, *((unint64_t *)&v196 + 1));
        }
        else
        {
          long long v74 = v196;
          *(void *)(v69 + 88) = v197;
          *(_OWORD *)int v73 = v74;
        }
      }
      *(void *)(v69 + 104) = v199;
      long long v84 = v200;
      *(void *)(v69 + 128) = v201;
      *(_OWORD *)(v69 + 112) = v84;
      long long v200 = 0uLL;
      *(unsigned char *)(v69 + 136) = v202;
      long long v85 = v203;
      *(void *)(v69 + 160) = v204;
      *(_OWORD *)(v69 + 144) = v85;
      uint64_t v201 = 0;
      long long v203 = 0uLL;
      uint64_t v204 = 0;
      *(unsigned char *)(v69 + 168) = v205;
      *(void *)(a6 + 8) = v69 + 176;
      a3 = v175;
      if (SHIBYTE(v201) < 0)
      {
LABEL_113:
        operator delete((void *)v200);
        int v77 = v198;
        if (v198 == 1) {
          goto LABEL_114;
        }
        goto LABEL_102;
      }
    }
    int v77 = v198;
    if (v198 == 1)
    {
LABEL_114:
      long long v78 = (void *)v196;
      if (!(void)v196) {
        goto LABEL_117;
      }
      *((void *)&v196 + 1) = v196;
      goto LABEL_116;
    }
LABEL_102:
    if (v77 || (SHIBYTE(v197) & 0x80000000) == 0)
    {
LABEL_117:
      uint8x8_t v39 = *a2;
      uint64_t v53 = -(uint64_t)**a2;
      size_t v54 = (unsigned __int16 *)((char *)*a2 - **a2);
      BOOL v56 = *v54 >= 0x4Du;
      if (*((unsigned char *)a2 + 38))
      {
LABEL_60:
        if (!v56)
        {
LABEL_79:
          std::string::size_type v60 = (unsigned __int16 *)((char *)v39 + v53);
          if (*(unsigned __int16 *)((char *)v39 + v53) > 0x4Cu)
          {
LABEL_80:
            unsigned int v66 = v60[38];
            int v67 = 1;
            if (v66)
            {
              int v68 = 32;
              goto LABEL_136;
            }
LABEL_176:
            long long v62 = a3 + 2;
            goto LABEL_177;
          }
LABEL_73:
          long long v62 = a3 + 2;
          std::string::size_type v63 = (unsigned __int16 *)((char *)v39 + v53);
          BOOL v64 = *v63 >= 0x4Du;
          goto LABEL_178;
        }
LABEL_63:
        if (!v54[38]) {
          goto LABEL_79;
        }
        int v57 = 1;
        char v59 = (*(int *)((char *)v39 + v54[38]) & 2) == 0 || a3[1] == 0 || v51;
        if (v59)
        {
LABEL_71:
          std::string::size_type v60 = (unsigned __int16 *)((char *)v39 + v53);
          BOOL v61 = *(unsigned __int16 *)((char *)v39 + v53) >= 0x4Du;
          if (v57) {
            goto LABEL_72;
          }
          goto LABEL_174;
        }
LABEL_128:
        sub_639D20(a4, (uint64_t *)&v181, (uint64_t)__dst, a5, (uint64_t)&v192);
        unint64_t v88 = *(void *)(a6 + 8);
        if (v88 >= *(void *)(a6 + 16))
        {
          uint64_t v101 = sub_8CF4AC((void **)a6, (uint64_t)&v192);
          int v102 = SHIBYTE(v204);
          *(void *)(a6 + 8) = v101;
          if (v102 < 0)
          {
            operator delete((void *)v203);
            if (SHIBYTE(v201) < 0) {
              goto LABEL_169;
            }
          }
          else if (SHIBYTE(v201) < 0)
          {
            goto LABEL_169;
          }
        }
        else
        {
          long long v89 = v192;
          long long v90 = v193;
          long long v91 = v194[0];
          *(_OWORD *)(v88 + 41) = *(_OWORD *)((char *)v194 + 9);
          *(_OWORD *)(v88 + 16) = v90;
          *(_OWORD *)(v88 + 32) = v91;
          *(_OWORD *)unint64_t v88 = v89;
          *(_DWORD *)(v88 + 96) = v198;
          if (v198 == 1)
          {
            uint64_t v109 = v195;
            *(void *)(v88 + 72) = 0;
            *(void *)(v88 + 64) = v109;
            *(void *)(v88 + 80) = 0;
            *(void *)(v88 + 88) = 0;
            size_t v110 = (const void *)v196;
            int64_t v111 = *((void *)&v196 + 1) - v196;
            if (*((void *)&v196 + 1) != (void)v196)
            {
              if (v111 < 0) {
                sub_2E00();
              }
              size_t v112 = (char *)operator new(*((void *)&v196 + 1) - v196);
              *(void *)(v88 + 72) = v112;
              *(void *)(v88 + 80) = v112;
              unint64_t v113 = &v112[8 * (v111 >> 3)];
              *(void *)(v88 + 88) = v113;
              memcpy(v112, v110, v111);
              *(void *)(v88 + 80) = v113;
            }
          }
          else if (!v198)
          {
            *(void *)(v88 + 64) = v195;
            uint64_t v92 = (unsigned char *)(v88 + 72);
            if (SHIBYTE(v197) < 0)
            {
              sub_4200(v92, (void *)v196, *((unint64_t *)&v196 + 1));
            }
            else
            {
              long long v93 = v196;
              *(void *)(v88 + 88) = v197;
              *(_OWORD *)uint64_t v92 = v93;
            }
          }
          *(void *)(v88 + 104) = v199;
          long long v119 = v200;
          *(void *)(v88 + 128) = v201;
          *(_OWORD *)(v88 + 112) = v119;
          long long v200 = 0uLL;
          *(unsigned char *)(v88 + 136) = v202;
          long long v120 = v203;
          *(void *)(v88 + 160) = v204;
          *(_OWORD *)(v88 + 144) = v120;
          uint64_t v201 = 0;
          long long v203 = 0uLL;
          uint64_t v204 = 0;
          *(unsigned char *)(v88 + 168) = v205;
          *(void *)(a6 + 8) = v88 + 176;
          a3 = v175;
          if (SHIBYTE(v201) < 0)
          {
LABEL_169:
            operator delete((void *)v200);
            int v103 = v198;
            if (v198 == 1) {
              goto LABEL_170;
            }
            goto LABEL_148;
          }
        }
        int v103 = v198;
        if (v198 == 1)
        {
LABEL_170:
          uint64_t v104 = (void *)v196;
          if (!(void)v196) {
            goto LABEL_173;
          }
          *((void *)&v196 + 1) = v196;
          goto LABEL_172;
        }
LABEL_148:
        if (v103 || (SHIBYTE(v197) & 0x80000000) == 0)
        {
LABEL_173:
          uint8x8_t v39 = *a2;
          uint64_t v53 = -(uint64_t)**a2;
          std::string::size_type v60 = (unsigned __int16 *)((char *)*a2 - **a2);
          BOOL v61 = *v60 >= 0x4Du;
          if (*((unsigned char *)a2 + 38))
          {
LABEL_72:
            if (v61) {
              goto LABEL_80;
            }
            goto LABEL_73;
          }
LABEL_174:
          if (!v61) {
            goto LABEL_175;
          }
          goto LABEL_134;
        }
        uint64_t v104 = (void *)v196;
LABEL_172:
        operator delete(v104);
        goto LABEL_173;
      }
LABEL_118:
      if (!v56) {
        goto LABEL_133;
      }
      goto LABEL_120;
    }
    long long v78 = (void *)v196;
LABEL_116:
    operator delete(v78);
    goto LABEL_117;
  }
  if (v55 >= 0x4D && v54[38])
  {
    if ((*(int *)((char *)v39 + v54[38]) & 4) == 0) {
      BOOL v46 = 1;
    }
    if (v46 || v45) {
      goto LABEL_59;
    }
    goto LABEL_87;
  }
  if (*v54 <= 0x4Cu) {
    goto LABEL_133;
  }
LABEL_120:
  if (v54[38])
  {
    int v57 = 0;
    char v87 = (*(int *)((char *)v39 + v54[38]) & 1) == 0 || a3[1] == 0 || v51;
    if (v87) {
      goto LABEL_71;
    }
    goto LABEL_128;
  }
LABEL_133:
  std::string::size_type v60 = (unsigned __int16 *)((char *)v39 + v53);
  if (*(unsigned __int16 *)((char *)v39 + v53) <= 0x4Cu)
  {
LABEL_175:
    int v67 = 0;
    goto LABEL_176;
  }
LABEL_134:
  int v67 = 0;
  unsigned int v66 = v60[38];
  if (!v66) {
    goto LABEL_176;
  }
  int v68 = 16;
LABEL_136:
  long long v62 = a3 + 2;
  if ((*(int *)((char *)v39 + v66) & v68) != 0 && a3[2] != 0)
  {
    sub_639DA4(a4, (uint64_t *)&v181, (uint64_t)__dst, (uint64_t)&v192);
    unint64_t v95 = *(void *)(a6 + 8);
    if (v95 >= *(void *)(a6 + 16))
    {
      uint64_t v105 = sub_8CF4AC((void **)a6, (uint64_t)&v192);
      int v106 = SHIBYTE(v204);
      *(void *)(a6 + 8) = v105;
      if (v106 < 0)
      {
        operator delete((void *)v203);
        if (SHIBYTE(v201) < 0) {
          goto LABEL_266;
        }
      }
      else if (SHIBYTE(v201) < 0)
      {
        goto LABEL_266;
      }
    }
    else
    {
      long long v96 = v192;
      long long v97 = v193;
      long long v98 = v194[0];
      *(_OWORD *)(v95 + 41) = *(_OWORD *)((char *)v194 + 9);
      *(_OWORD *)(v95 + 16) = v97;
      *(_OWORD *)(v95 + 32) = v98;
      *(_OWORD *)unint64_t v95 = v96;
      *(_DWORD *)(v95 + 96) = v198;
      if (v198 == 1)
      {
        uint64_t v114 = v195;
        *(void *)(v95 + 72) = 0;
        *(void *)(v95 + 64) = v114;
        *(void *)(v95 + 80) = 0;
        *(void *)(v95 + 88) = 0;
        std::string::size_type v115 = (const void *)v196;
        int64_t v116 = *((void *)&v196 + 1) - v196;
        if (*((void *)&v196 + 1) != (void)v196)
        {
          if (v116 < 0) {
            sub_2E00();
          }
          int v117 = (char *)operator new(*((void *)&v196 + 1) - v196);
          *(void *)(v95 + 72) = v117;
          *(void *)(v95 + 80) = v117;
          size_t v118 = &v117[8 * (v116 >> 3)];
          *(void *)(v95 + 88) = v118;
          memcpy(v117, v115, v116);
          *(void *)(v95 + 80) = v118;
        }
      }
      else if (!v198)
      {
        *(void *)(v95 + 64) = v195;
        uint64_t v99 = (unsigned char *)(v95 + 72);
        if (SHIBYTE(v197) < 0)
        {
          sub_4200(v99, (void *)v196, *((unint64_t *)&v196 + 1));
        }
        else
        {
          long long v100 = v196;
          *(void *)(v95 + 88) = v197;
          *(_OWORD *)uint64_t v99 = v100;
        }
      }
      *(void *)(v95 + 104) = v199;
      long long v173 = v200;
      *(void *)(v95 + 128) = v201;
      *(_OWORD *)(v95 + 112) = v173;
      long long v200 = 0uLL;
      *(unsigned char *)(v95 + 136) = v202;
      long long v174 = v203;
      *(void *)(v95 + 160) = v204;
      *(_OWORD *)(v95 + 144) = v174;
      uint64_t v201 = 0;
      long long v203 = 0uLL;
      uint64_t v204 = 0;
      *(unsigned char *)(v95 + 168) = v205;
      *(void *)(a6 + 8) = v95 + 176;
      a3 = v175;
      if (SHIBYTE(v201) < 0)
      {
LABEL_266:
        operator delete((void *)v200);
        int v107 = v198;
        if (v198 == 1) {
          goto LABEL_267;
        }
        goto LABEL_154;
      }
    }
    int v107 = v198;
    if (v198 == 1)
    {
LABEL_267:
      std::string::size_type v108 = (void *)v196;
      if (!(void)v196) {
        goto LABEL_270;
      }
      *((void *)&v196 + 1) = v196;
      goto LABEL_269;
    }
LABEL_154:
    if (v107 || (SHIBYTE(v197) & 0x80000000) == 0)
    {
LABEL_270:
      uint8x8_t v39 = *a2;
      std::string::size_type v63 = (unsigned __int16 *)((char *)*a2 - **a2);
      BOOL v64 = *v63 >= 0x4Du;
      if (!*((unsigned char *)a2 + 38)) {
        goto LABEL_74;
      }
      goto LABEL_178;
    }
    std::string::size_type v108 = (void *)v196;
LABEL_269:
    operator delete(v108);
    goto LABEL_270;
  }
LABEL_177:
  std::string::size_type v63 = (unsigned __int16 *)((char *)v39 + v53);
  BOOL v64 = *v63 >= 0x4Du;
  if (!v67)
  {
LABEL_74:
    if (!v64) {
      goto LABEL_256;
    }
    unsigned int v65 = v63[38];
    if (!v65 || (*(int *)((char *)v39 + v65) & 0x40) == 0) {
      goto LABEL_256;
    }
    goto LABEL_182;
  }
LABEL_178:
  if (v64)
  {
    unsigned int v121 = v63[38];
    if (v121)
    {
      if ((*(int *)((char *)v39 + v121) & 0x80) != 0)
      {
LABEL_182:
        if (!*v62) {
          goto LABEL_256;
        }
        sub_8C8B5C(*(void *)(a1 + 8), (uint64_t)a2[4], (uint64_t)&v177);
        unint64_t v122 = v177;
        uint64_t v123 = v178;
        if (v177 == v178)
        {
LABEL_254:
          if (v122)
          {
            long long v178 = v122;
            operator delete(v122);
          }
          goto LABEL_256;
        }
        while (1)
        {
          uint64_t v188 = 0x7FEFFFFFFFFFFFFFLL;
          uint64_t v186 = -1;
          int v187 = 0x7FFFFFFF;
          *(void *)&long long v192 = v122;
          *((void *)&v192 + 1) = &v188;
          *(void *)&long long v193 = &v186;
          sub_77F46C((uint64_t)v183, (uint64_t)&v192);
          double v190 = 0.0;
          double v191 = 0.0;
          uint64_t v189 = 0x7FEFFFFFFFFFFFFFLL;
          *(void *)&long long v192 = &v186;
          *((void *)&v192 + 1) = &v189;
          *(void *)&long long v193 = &v190;
          *((void *)&v193 + 1) = &v191;
          sub_77F6DC((uint64_t)v183, (double **)&v192);
          double v125 = 0.0;
          if (v191 == 0.0)
          {
            uint64_t v126 = *a2;
            uint64_t v127 = (unsigned __int16 *)((char *)*a2 - **a2);
            if (*v127 < 9u) {
              goto LABEL_199;
            }
          }
          else
          {
            double v125 = v190 / v191;
            if (v190 / v191 > 1.0) {
              double v125 = 1.0;
            }
            uint64_t v126 = *a2;
            uint64_t v127 = (unsigned __int16 *)((char *)*a2 - **a2);
            if (*v127 < 9u)
            {
LABEL_199:
              double v129 = (1.0 - v125) * (double)0;
              if (v129 < 0.0) {
                goto LABEL_192;
              }
              goto LABEL_200;
            }
          }
          uint64_t v128 = v127[4];
          if (v128) {
            uint64_t v128 = *(unsigned int *)((char *)v126 + v128);
          }
          double v129 = (1.0 - v125) * (double)v128;
          if (v129 < 0.0)
          {
LABEL_192:
            if (v129 <= -4.50359963e15) {
              goto LABEL_203;
            }
            uint64_t v130 = (uint64_t)(v129 + v129);
            if (v130 >= 1) {
              --v130;
            }
            goto LABEL_202;
          }
LABEL_200:
          if (v129 >= 4.50359963e15) {
            goto LABEL_203;
          }
          uint64_t v130 = (uint64_t)(v129 + v129) + 1;
LABEL_202:
          double v129 = (double)(v130 >> 1);
LABEL_203:
          uint64_t v186 = (uint64_t)v129;
          int v131 = (unsigned __int16 *)((char *)v126 - *v126);
          unsigned int v132 = *v131;
          double v133 = -1.0;
          if (*((unsigned char *)a2 + 38))
          {
            if (v132 < 0x11) {
              goto LABEL_211;
            }
            unsigned int v134 = v131[8];
            if (!v134) {
              goto LABEL_211;
            }
          }
          else
          {
            if (v132 < 0xF) {
              goto LABEL_211;
            }
            unsigned int v134 = v131[7];
            if (!v134) {
              goto LABEL_211;
            }
          }
          unsigned int v135 = *((unsigned __int8 *)v126 + v134);
          double v133 = (double)v135;
          if (!v135) {
            double v133 = -1.0;
          }
LABEL_211:
          double v191 = v133;
          if (*a3
            && (v133 >= 0.0
              ? (BOOL v136 = ((*(void *)&v133 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
              : (BOOL v136 = 1),
                v136 ? (BOOL v137 = *(void *)&v133 == 0) : (BOOL v137 = 1),
                v137))
          {
            sub_639E84(a4, &v186, (uint64_t *)v122, &v191, a3[4], (uint64_t)__dst, (uint64_t)&v192);
            unint64_t v138 = *(void *)(a6 + 8);
            if (v138 >= *(void *)(a6 + 16))
            {
              std::string::size_type v153 = sub_8CF4AC((void **)a6, (uint64_t)&v192);
              int v154 = SHIBYTE(v204);
              *(void *)(a6 + 8) = v153;
              if ((v154 & 0x80000000) == 0)
              {
LABEL_231:
                if ((SHIBYTE(v201) & 0x80000000) == 0) {
                  goto LABEL_232;
                }
                goto LABEL_247;
              }
              goto LABEL_237;
            }
            long long v139 = v192;
            long long v140 = v193;
            long long v141 = v194[0];
            *(_OWORD *)(v138 + 41) = *(_OWORD *)((char *)v194 + 9);
            *(_OWORD *)(v138 + 16) = v140;
            *(_OWORD *)(v138 + 32) = v141;
            *(_OWORD *)unint64_t v138 = v139;
            *(_DWORD *)(v138 + 96) = v198;
            if (v198 == 1)
            {
              uint64_t v160 = v195;
              *(void *)(v138 + 72) = 0;
              *(void *)(v138 + 64) = v160;
              *(void *)(v138 + 80) = 0;
              *(void *)(v138 + 88) = 0;
              unint64_t v161 = (const void *)v196;
              int64_t v162 = *((void *)&v196 + 1) - v196;
              if (*((void *)&v196 + 1) != (void)v196)
              {
                if (v162 < 0) {
                  sub_2E00();
                }
                uint64_t v163 = (char *)operator new(*((void *)&v196 + 1) - v196);
                *(void *)(v138 + 72) = v163;
                *(void *)(v138 + 80) = v163;
                uint64_t v164 = &v163[8 * (v162 >> 3)];
                *(void *)(v138 + 88) = v164;
                memcpy(v163, v161, v162);
                *(void *)(v138 + 80) = v164;
              }
            }
            else if (!v198)
            {
              *(void *)(v138 + 64) = v195;
              int v142 = (unsigned char *)(v138 + 72);
              if (SHIBYTE(v197) < 0)
              {
                sub_4200(v142, (void *)v196, *((unint64_t *)&v196 + 1));
              }
              else
              {
                long long v143 = v196;
                *(void *)(v138 + 88) = v197;
                *(_OWORD *)int v142 = v143;
              }
            }
            *(void *)(v138 + 104) = v199;
            long long v167 = v200;
            *(void *)(v138 + 128) = v201;
            *(_OWORD *)(v138 + 112) = v167;
            uint64_t v201 = 0;
            long long v200 = 0uLL;
            *(unsigned char *)(v138 + 136) = v202;
            long long v168 = v203;
            *(void *)(v138 + 160) = v204;
            *(_OWORD *)(v138 + 144) = v168;
            uint64_t v204 = 0;
            long long v203 = 0uLL;
            *(unsigned char *)(v138 + 168) = v205;
            *(void *)(a6 + 8) = v138 + 176;
            a3 = v175;
            if ((SHIBYTE(v201) & 0x80000000) == 0)
            {
LABEL_232:
              int v152 = v198;
              if (v198 != 1) {
                goto LABEL_233;
              }
              goto LABEL_248;
            }
          }
          else
          {
            sub_639E14(a4, &v186, (uint64_t *)v122, (uint64_t)__dst, (uint64_t)&v192);
            unint64_t v144 = *(void *)(a6 + 8);
            if (v144 >= *(void *)(a6 + 16))
            {
              uint64_t v150 = sub_8CF4AC((void **)a6, (uint64_t)&v192);
              int v151 = SHIBYTE(v204);
              *(void *)(a6 + 8) = v150;
              if ((v151 & 0x80000000) == 0) {
                goto LABEL_231;
              }
LABEL_237:
              operator delete((void *)v203);
              if ((SHIBYTE(v201) & 0x80000000) == 0) {
                goto LABEL_232;
              }
              goto LABEL_247;
            }
            long long v145 = v192;
            long long v146 = v193;
            long long v147 = v194[0];
            *(_OWORD *)(v144 + 41) = *(_OWORD *)((char *)v194 + 9);
            *(_OWORD *)(v144 + 16) = v146;
            *(_OWORD *)(v144 + 32) = v147;
            *(_OWORD *)unint64_t v144 = v145;
            *(_DWORD *)(v144 + 96) = v198;
            if (v198 == 1)
            {
              uint64_t v155 = v195;
              *(void *)(v144 + 72) = 0;
              *(void *)(v144 + 64) = v155;
              *(void *)(v144 + 80) = 0;
              *(void *)(v144 + 88) = 0;
              std::string::size_type v156 = (const void *)v196;
              int64_t v157 = *((void *)&v196 + 1) - v196;
              if (*((void *)&v196 + 1) != (void)v196)
              {
                if (v157 < 0) {
                  sub_2E00();
                }
                long long v158 = (char *)operator new(*((void *)&v196 + 1) - v196);
                *(void *)(v144 + 72) = v158;
                *(void *)(v144 + 80) = v158;
                int v159 = &v158[8 * (v157 >> 3)];
                *(void *)(v144 + 88) = v159;
                memcpy(v158, v156, v157);
                *(void *)(v144 + 80) = v159;
              }
            }
            else if (!v198)
            {
              *(void *)(v144 + 64) = v195;
              v148 = (unsigned char *)(v144 + 72);
              if (SHIBYTE(v197) < 0)
              {
                sub_4200(v148, (void *)v196, *((unint64_t *)&v196 + 1));
              }
              else
              {
                long long v149 = v196;
                *(void *)(v144 + 88) = v197;
                *(_OWORD *)v148 = v149;
              }
            }
            *(void *)(v144 + 104) = v199;
            long long v165 = v200;
            *(void *)(v144 + 128) = v201;
            *(_OWORD *)(v144 + 112) = v165;
            uint64_t v201 = 0;
            long long v200 = 0uLL;
            *(unsigned char *)(v144 + 136) = v202;
            long long v166 = v203;
            *(void *)(v144 + 160) = v204;
            *(_OWORD *)(v144 + 144) = v166;
            uint64_t v204 = 0;
            long long v203 = 0uLL;
            *(unsigned char *)(v144 + 168) = v205;
            *(void *)(a6 + 8) = v144 + 176;
            a3 = v175;
            if ((SHIBYTE(v201) & 0x80000000) == 0) {
              goto LABEL_232;
            }
          }
LABEL_247:
          operator delete((void *)v200);
          int v152 = v198;
          if (v198 != 1)
          {
LABEL_233:
            if (v152 || (SHIBYTE(v197) & 0x80000000) == 0) {
              goto LABEL_186;
            }
            uint64_t v124 = (void *)v196;
            goto LABEL_185;
          }
LABEL_248:
          uint64_t v124 = (void *)v196;
          if (!(void)v196) {
            goto LABEL_186;
          }
          *((void *)&v196 + 1) = v196;
LABEL_185:
          operator delete(v124);
LABEL_186:
          v122 += 12;
          if (v122 == v123)
          {
            unint64_t v122 = v177;
            goto LABEL_254;
          }
        }
      }
    }
  }
LABEL_256:
  std::string v169 = *(long long **)a6;
  size_t v170 = *(long long **)(a6 + 8);
  unint64_t v171 = 126 - 2 * __clz(0x2E8BA2E8BA2E8BA3 * (((uint64_t)v170 - *(void *)a6) >> 4));
  BOOL v7 = v170 == *(long long **)a6;
  *(void *)&long long v192 = &v181;
  if (v7) {
    uint64_t v172 = 0;
  }
  else {
    uint64_t v172 = v171;
  }
  sub_8CF778(v169, v170, (unsigned int **)&v192, v172, 1);
  if (SHIBYTE(v180) < 0) {
    operator delete(__dst[0]);
  }
  if (v184)
  {
    uint64_t v185 = v184;
    operator delete(v184);
  }
}

void sub_8C8A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,_Unwind_Exception *exception_objecta,uint64_t a36)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

int *sub_8C8B5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = (int *)sub_2D5D58(a1, a2 & 0xFFFFFFFFFFFFLL);
  uint64_t v6 = (unsigned __int16 *)((char *)result - *result);
  unsigned int v7 = *v6;
  if ((a2 & 0xFF000000000000) != 0)
  {
    if (v7 < 0x5D || (unsigned int v8 = v6[46]) == 0)
    {
LABEL_14:
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      return result;
    }
  }
  else
  {
    if (v7 < 0x5B) {
      goto LABEL_14;
    }
    unsigned int v8 = v6[45];
    if (!v8) {
      goto LABEL_14;
    }
  }
  BOOL v9 = (unsigned int *)((char *)result + v8 + *(int *)((char *)result + v8));
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v10 = *v9;
  if (v10)
  {
    BOOL v11 = (char *)operator new(12 * v10);
    *(void *)a3 = v11;
    *(void *)(a3 + 8) = v11;
    *(void *)(a3 + 16) = &v11[12 * v10];
    int v12 = v9 + 1;
    uint64_t v13 = (uint64_t)&v9[2 * v10 + 1];
    do
    {
      LODWORD(v14) = v12[1];
      if (v14 >= 0xFFFFFFFE) {
        uint64_t v14 = 4294967294;
      }
      else {
        uint64_t v14 = v14;
      }
      unint64_t v15 = *v12 | (unint64_t)(v14 << 32);
      int v16 = 0x7FFFFFFF;
      uint64_t result = (int *)sub_32ACC((char **)a3, (uint64_t)v11, (uint64_t)&v15);
      BOOL v11 = (char *)(result + 3);
      v12 += 2;
    }
    while (v12 != (unsigned int *)v13);
  }
  return result;
}

void sub_8C8C78(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_8C8C94(uint64_t *a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unsigned char *a5@<X4>, uint64_t *a6@<X8>)
{
  if (sub_46C760(a2) > a4)
  {
    uint64_t v12 = sub_4A5E10(a2 + 133, a3);
    uint64_t v13 = v12;
    if (*(void *)(v12 + 56) == -1) {
      uint64_t v14 = *(void *)(v12 + 40);
    }
    else {
      uint64_t v14 = *(void *)(v12 + 56);
    }
    uint64_t v15 = sub_46C8EC(a2, a4);
    int v16 = (int *)sub_2D5D58(a1[1], *(unsigned int *)(v15 + 32) | ((unint64_t)*(unsigned __int16 *)(v15 + 36) << 32));
    unsigned int v17 = (unsigned __int16 *)((char *)v16 - *v16);
    if (*v17 >= 0xBu && (uint64_t v18 = v17[5]) != 0 && (*((unsigned char *)v16 + v18 + 3) & 4) != 0)
    {
      int v22 = 1;
    }
    else
    {
      uint64_t v19 = *(int **)(v15 + 8);
      if (!v19 || (v20 = (unsigned __int16 *)((char *)v19 - *v19), *v20 < 0x11u) || (uint64_t v21 = v20[8]) == 0)
      {
        int v53 = 0;
LABEL_15:
        if (*(void *)(a1[2] + 1880) >= *(void *)(v13 + 872)) {
          uint64_t v23 = (void *)(v13 + 872);
        }
        else {
          uint64_t v23 = (void *)(a1[2] + 1880);
        }
        int v51 = a4;
        if ((int)a4 < (int)v14)
        {
LABEL_19:
          if (v51 + 1 < *(_DWORD *)(v13 + 24))
          {
            uint64_t v24 = 0;
            int64_t v25 = v51 + 1;
            do
            {
              if (v24 > *v23) {
                break;
              }
              size_t v26 = (int **)sub_46C8EC(a2, v25);
              *(void *)&v56[0] = v25;
              sub_8C7980((uint64_t)a1, v26, a5, v56, 0, (uint64_t)a6);
              if (*a6 != a6[1]) {
                return;
              }
              uint64_t v28 = sub_46CCC8(a2, v25, v27);
              if (*a6)
              {
                sub_52F808(a6);
                operator delete((void *)*a6);
              }
              v24 += v28;
              ++v25;
            }
            while (v25 < *(int *)(v13 + 24));
          }
          goto LABEL_26;
        }
        uint64_t v29 = 0;
        int64_t v30 = v51;
        int64_t v52 = (int)v14;
        while (1)
        {
          if (v29 > *v23) {
            goto LABEL_19;
          }
          uint64_t v31 = sub_46C8EC(a2, v30);
          uint64_t v32 = *(void *)(v31 + 32);
          long long v33 = *(_OWORD *)(v31 + 16);
          v56[0] = *(_OWORD *)v31;
          v56[1] = v33;
          uint64_t v57 = v32;
          if (v30 != v51) {
            break;
          }
LABEL_68:
          size_t v54 = (uint64_t *)v30;
          sub_8C7980((uint64_t)a1, (int **)v56, a5, &v54, 0, (uint64_t)a6);
          if (*a6 != a6[1]) {
            return;
          }
          uint64_t v50 = sub_46CCC8(a2, v30, v49);
          if (*a6)
          {
            sub_52F808(a6);
            operator delete((void *)*a6);
          }
          v29 += v50;
          BOOL v39 = v30-- <= v52;
          if (v39) {
            goto LABEL_19;
          }
        }
        sub_68D800(*a1, (uint64_t)v56, 0, &v54);
        uint64_t v34 = *v54;
        uint64_t v35 = v54[1];
        if (*v54 != v35)
        {
          while (1)
          {
            if (*(unsigned char *)(v34 + 185) && *(unsigned char *)(v34 + 186) == 0)
            {
              int v37 = *(_DWORD *)(v34 + 24);
              if (v37 != 3 && v37 != 0) {
                break;
              }
            }
            v34 += 192;
            if (v34 == v35) {
              goto LABEL_51;
            }
          }
        }
        BOOL v39 = v34 == v35 || v29 < *(void *)(a1[2] + 1888);
        int v40 = v39;
        if (((v40 | v53) & 1) == 0)
        {
          char v47 = 0;
          int v53 = 0;
          unsigned int v48 = v55;
          if (!v55) {
            goto LABEL_67;
          }
          goto LABEL_65;
        }
LABEL_51:
        unint64_t v41 = (int *)sub_2D5D58(a1[1], v57 | ((unint64_t)WORD2(v57) << 32));
        unsigned int v42 = (unsigned __int16 *)((char *)v41 - *v41);
        if (*v42 < 0xBu || (uint64_t v43 = v42[5]) == 0 || (*((unsigned char *)v41 + v43 + 3) & 4) == 0)
        {
          int v44 = DWORD2(v56[0]);
          if (*((void *)&v56[0] + 1))
          {
            BOOL v45 = (unsigned __int16 *)(*((void *)&v56[0] + 1) - (int)**((_DWORD **)&v56[0] + 1));
            if (*v45 >= 0x11u)
            {
              uint64_t v46 = v45[8];
              if (v46)
              {
                v53 &= (*(unsigned __int16 *)(*((void *)&v56[0] + 1) + v46) >> 2) & 1;
                char v47 = 1;
                unsigned int v48 = v55;
                if (!v55) {
                  goto LABEL_67;
                }
                goto LABEL_65;
              }
            }
            int v44 = 0;
          }
          v53 &= v44;
          char v47 = 1;
          unsigned int v48 = v55;
          if (!v55) {
            goto LABEL_67;
          }
          goto LABEL_65;
        }
        v53 &= 1u;
        char v47 = 1;
        unsigned int v48 = v55;
        if (!v55) {
          goto LABEL_67;
        }
LABEL_65:
        if (!atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
LABEL_67:
        if ((v47 & 1) == 0) {
          goto LABEL_19;
        }
        goto LABEL_68;
      }
      int v22 = (*(unsigned __int16 *)((char *)v19 + v21) >> 2) & 1;
    }
    int v53 = v22;
    goto LABEL_15;
  }
LABEL_26:
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
}

void sub_8C90CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_14A84((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_8C90E0(_Unwind_Exception *a1)
{
  sub_63A3EC(v1);
  _Unwind_Resume(a1);
}

void sub_8C90F4(_Unwind_Exception *a1)
{
  sub_63A3EC(v1);
  _Unwind_Resume(a1);
}

void sub_8C9108(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X3>, int *a5@<X4>, void *a6@<X8>)
{
  uint64_t v10 = sub_46C8EC(a2, *a3);
  sub_8C959C(a1, v10, (uint64_t)v53);
  if (v54) {
    BOOL v11 = *(void *)&v53[0] == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11 || *((void *)&v53[0] + 1) == 0)
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    return;
  }
  uint64_t v13 = (unsigned __int16 *)(*(void *)&v53[0] - (int)**(_DWORD **)&v53[0]);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0) {
    uint64_t v15 = *(unsigned int *)(*(void *)&v53[0] + v14);
  }
  else {
    uint64_t v15 = 0;
  }
  v51[0] = 0;
  v51[1] = 0;
  uint64_t v52 = 0;
  uint64_t v16 = a1[2];
  uint64_t v17 = *(void *)(v16 + 1584);
  uint64_t v18 = *(void *)(v16 + 1592);
  if (v17 <= v18) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = v17;
  }
  int v48 = *a5;
  char v50 = HIBYTE(*((_WORD *)a5 + 2));
  BYTE2(v48) = 0;
  LOBYTE(v48) = 0;
  char v49 = 0;
LABEL_19:
  if (v15 <= v19)
  {
    sub_68D800(*a1, (uint64_t)v53, 0, &v46);
    uint64_t v21 = *v46;
    uint64_t v20 = v46[1];
    if (*v46 != v20)
    {
      while (1)
      {
        if (*(unsigned char *)(v21 + 185) && *(unsigned char *)(v21 + 186) == 0)
        {
          int v23 = *(_DWORD *)(v21 + 24);
          if (v23 != 3 && v23 != 0) {
            break;
          }
        }
        v21 += 192;
        if (v21 == v20)
        {
          uint64_t v21 = v46[1];
          break;
        }
      }
    }
    *(void *)&v42[0] = *a4;
    sub_8C7980((uint64_t)a1, (int **)v53, &v48, v42, 1, (uint64_t)&__p);
    if (__p == v45) {
      goto LABEL_42;
    }
    int64_t v25 = (void **)__p;
    while (1)
    {
      int v26 = *((_DWORD *)v25 + 2);
      if (v26 == 2)
      {
        if (v15 <= *(void *)(a1[2] + 1592)) {
          goto LABEL_41;
        }
      }
      else if (v26 == 1 && v15 <= *(void *)(a1[2] + 1584))
      {
LABEL_41:
        sub_5A0D34((uint64_t *)v51, (uint64_t)__p, (uint64_t)v45, 0x2E8BA2E8BA2E8BA3 * (((char *)v45 - (unsigned char *)__p) >> 4));
LABEL_42:
        if (v21 == v46[1])
        {
          sub_8C959C(a1, (uint64_t)v53, (uint64_t)v42);
          v53[0] = v42[0];
          v53[1] = v42[1];
          uint64_t v54 = v43;
          int v27 = 3;
          if (v43 && *(void *)&v53[0] && *((void *)&v53[0] + 1))
          {
            uint64_t v28 = (unsigned __int16 *)(*(void *)&v53[0] - (int)**(_DWORD **)&v53[0]);
            if (*v28 >= 9u && (uint64_t v29 = v28[4]) != 0) {
              uint64_t v30 = *(unsigned int *)(*(void *)&v53[0] + v29);
            }
            else {
              uint64_t v30 = 0;
            }
            int v27 = 0;
            v15 += v30;
          }
        }
        else
        {
          *(_OWORD *)a6 = *(_OWORD *)v51;
          a6[2] = v52;
          v51[1] = 0;
          uint64_t v52 = 0;
          v51[0] = 0;
          int v27 = 1;
        }
        uint64_t v31 = (void **)__p;
        if (__p)
        {
          uint64_t v32 = v45;
          long long v33 = __p;
          if (v45 == __p)
          {
LABEL_68:
            BOOL v45 = v31;
            operator delete(v33);
            goto LABEL_69;
          }
          while (2)
          {
            if (*((char *)v32 - 9) < 0)
            {
              operator delete(*(v32 - 4));
              if (*((char *)v32 - 41) < 0) {
                goto LABEL_64;
              }
LABEL_59:
              int v34 = *((_DWORD *)v32 - 20);
              if (v34 != 1) {
                goto LABEL_60;
              }
LABEL_65:
              uint64_t v35 = *(v32 - 13);
              if (v35)
              {
                *(v32 - 12) = v35;
LABEL_55:
                operator delete(v35);
              }
            }
            else
            {
              if ((*((char *)v32 - 41) & 0x80000000) == 0) {
                goto LABEL_59;
              }
LABEL_64:
              operator delete(*(v32 - 8));
              int v34 = *((_DWORD *)v32 - 20);
              if (v34 == 1) {
                goto LABEL_65;
              }
LABEL_60:
              if (!v34 && *((char *)v32 - 81) < 0)
              {
                uint64_t v35 = *(v32 - 13);
                goto LABEL_55;
              }
            }
            v32 -= 22;
            if (v32 == v31)
            {
              long long v33 = __p;
              goto LABEL_68;
            }
            continue;
          }
        }
LABEL_69:
        int v36 = v47;
        if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
        if (v27)
        {
          if (v27 != 3) {
            goto LABEL_74;
          }
          break;
        }
        goto LABEL_19;
      }
      v25 += 22;
      if (v25 == v45) {
        goto LABEL_42;
      }
    }
  }
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
LABEL_74:
  int v37 = (void **)v51[0];
  if (v51[0])
  {
    uint64_t v38 = (void **)v51[1];
    BOOL v39 = v51[0];
    if (v51[1] == v51[0])
    {
LABEL_90:
      v51[1] = v37;
      operator delete(v39);
      return;
    }
    while (1)
    {
      if (*((char *)v38 - 9) < 0)
      {
        operator delete(*(v38 - 4));
        if ((*((char *)v38 - 41) & 0x80000000) == 0)
        {
LABEL_81:
          int v40 = *((_DWORD *)v38 - 20);
          if (v40 != 1) {
            goto LABEL_82;
          }
          goto LABEL_87;
        }
      }
      else if ((*((char *)v38 - 41) & 0x80000000) == 0)
      {
        goto LABEL_81;
      }
      operator delete(*(v38 - 8));
      int v40 = *((_DWORD *)v38 - 20);
      if (v40 != 1)
      {
LABEL_82:
        if (v40 || (*((char *)v38 - 81) & 0x80000000) == 0) {
          goto LABEL_78;
        }
        unint64_t v41 = *(v38 - 13);
        goto LABEL_77;
      }
LABEL_87:
      unint64_t v41 = *(v38 - 13);
      if (!v41) {
        goto LABEL_78;
      }
      *(v38 - 12) = v41;
LABEL_77:
      operator delete(v41);
LABEL_78:
      v38 -= 22;
      if (v38 == v37)
      {
        BOOL v39 = v51[0];
        goto LABEL_90;
      }
    }
  }
}

void sub_8C9544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  sub_63A3EC((uint64_t *)va);
  sub_14A84((uint64_t)va1);
  sub_63A3EC((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void sub_8C956C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_63A3EC((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_8C9588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_63A3EC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_8C959C(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_68D800(*a1, a2, 0, (uint64_t **)&v21);
  BOOL v5 = *v21;
  uint64_t v6 = (uint64_t)v21[1];
  if (*v21 != (uint64_t *)v6)
  {
    while (1)
    {
      if (*((unsigned char *)v5 + 185))
      {
        int v7 = *((_DWORD *)v5 + 6);
        if (!v7 || v7 == 3) {
          break;
        }
      }
      v5 += 24;
      if (v5 == (uint64_t *)v6) {
        goto LABEL_16;
      }
    }
  }
  if (v5 == (uint64_t *)v6 || (v10 = *v5, uint64_t v9 = v5[1], v10 == v9))
  {
LABEL_16:
    *(_DWORD *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_WORD *)(a3 + 36) = -1;
    *(unsigned char *)(a3 + 38) = 0;
    uint64_t v17 = v22;
    if (!v22) {
      return;
    }
    goto LABEL_22;
  }
  uint64_t v11 = a1[1];
  uint64_t v12 = *(void *)(v9 - 8);
  uint64_t v13 = sub_2D5D58(v11, v12 & 0xFFFFFFFFFFFFLL);
  if (*(unsigned char *)(v11 + 7772))
  {
    uint64_t v14 = sub_2DB8E0(v11 + 3896, v12, 0);
    uint64_t v15 = &v14[-*(int *)v14];
    if (*(unsigned __int16 *)v15 < 5u)
    {
      uint64_t v16 = 0;
    }
    else
    {
      uint64_t v16 = *((unsigned __int16 *)v15 + 2);
      if (v16) {
        v16 += (uint64_t)&v14[*(unsigned int *)&v14[v16]];
      }
    }
    uint64_t v18 = v16 + 4 * WORD2(v12) + 4 + *(unsigned int *)(v16 + 4 * WORD2(v12) + 4);
  }
  else
  {
    uint64_t v18 = 0;
  }
  uint64_t v19 = sub_2E5C38(v11, v12 & 0xFFFFFFFFFFFFLL, 1);
  *(void *)a3 = v13;
  *(void *)(a3 + 8) = v18;
  *(void *)(a3 + 16) = v19;
  *(void *)(a3 + 24) = v20;
  *(_DWORD *)(a3 + 32) = v12;
  *(_WORD *)(a3 + 36) = WORD2(v12);
  *(unsigned char *)(a3 + 38) = (v12 & 0xFF000000000000) != 0;
  uint64_t v17 = v22;
  if (v22)
  {
LABEL_22:
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_8C9760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_8C9774(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(void *)(a3 + 16) == -1) {
    uint64_t v8 = *(void *)(a3 + 24) - 1;
  }
  else {
    uint64_t v8 = *(void *)(a3 + 16);
  }
  uint64_t v9 = (int **)sub_46C8EC(a2, v8);
  unint64_t v88 = v9;
  uint64_t v89 = a1;
  uint64_t v10 = (unsigned __int16 *)((char *)*v9 - **v9);
  if (*v10 >= 0xDu && (uint64_t v11 = v10[6]) != 0) {
    unsigned int v12 = *(unsigned __int16 *)((char *)*v9 + v11);
  }
  else {
    unsigned int v12 = 0;
  }
  uint64_t v13 = v12;
  uint64_t v14 = sub_290DEC(*(void *)(a1 + 8) + 3896, 1u, 0);
  uint64_t v15 = &v14[-*(int *)v14];
  if (*(unsigned __int16 *)v15 < 0xBu)
  {
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v16 = *((unsigned __int16 *)v15 + 5);
    if (v16) {
      v16 += (uint64_t)&v14[*(unsigned int *)&v14[v16]];
    }
  }
  uint64_t v17 = (int *)(v16 + 4 * v13 + 4 + *(unsigned int *)(v16 + 4 * v13 + 4));
  uint64_t v18 = (unsigned __int16 *)((char *)v17 - *v17);
  if (*v18 < 5u || (uint64_t v19 = v18[2]) == 0)
  {
    HIBYTE(v108) = 0;
    LOBYTE(__dst[0]) = 0;
    goto LABEL_24;
  }
  uint64_t v20 = (unsigned int *)((char *)v17 + v19);
  uint64_t v21 = *v20;
  int v23 = (char *)v20 + v21 + 4;
  size_t v22 = *(unsigned int *)((char *)v20 + v21);
  if (v22 >= 0x17)
  {
    if ((v22 | 7) == 0x17) {
      uint64_t v25 = (v22 & 0xFFFFFFF8) + 8;
    }
    else {
      uint64_t v25 = v22 | 7;
    }
    uint64_t v24 = (void **)operator new(v25 + 1);
    __dst[1] = (void *)v22;
    uint64_t v108 = v25 - 0x7FFFFFFFFFFFFFFFLL;
    __dst[0] = v24;
  }
  else
  {
    HIBYTE(v108) = *(unsigned int *)((char *)v20 + v21);
    uint64_t v24 = __dst;
    if (!v22) {
      goto LABEL_23;
    }
  }
  memcpy(v24, v23, v22);
LABEL_23:
  *((unsigned char *)v24 + v22) = 0;
LABEL_24:
  int v26 = *v88;
  int v27 = (unsigned __int16 *)((char *)*v88 - **v88);
  unsigned int v28 = *v27;
  if (v28 < 0x2F || !v27[23]) {
    goto LABEL_40;
  }
  unsigned int v29 = *((unsigned __int8 *)v26 + v27[23]);
  BOOL v30 = v29 > 0x2F;
  uint64_t v31 = (1 << v29) & 0xE2E040048000;
  if (v30 || v31 == 0) {
    goto LABEL_40;
  }
  if (!*((unsigned char *)v88 + 38))
  {
    if (v28 < 0x4D) {
      goto LABEL_44;
    }
    uint64_t v34 = v27[38];
    if (!v34 || (*((unsigned char *)v26 + v34) & 4) == 0 && (*(int *)((char *)v26 + v34) & 1) == 0) {
      goto LABEL_44;
    }
LABEL_40:
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(unsigned char *)a4 = 1;
    *(void *)(a4 + 8) = -1;
    *(void *)(a4 + 16) = -1;
    *(void *)(a4 + 24) = 0x7FFFFFFFFFFFFFFFLL;
    *(void *)(a4 + 80) = 0;
    *(void *)(a4 + 88) = 0xBFF0000000000000;
    *(void *)(a4 + 96) = 0;
    goto LABEL_41;
  }
  if (v28 >= 0x4D)
  {
    uint64_t v33 = v27[38];
    if (v33)
    {
      if ((*((unsigned char *)v26 + v33) & 8) != 0 || (*(int *)((char *)v26 + v33) & 2) != 0) {
        goto LABEL_40;
      }
    }
  }
LABEL_44:
  unint64_t v35 = sub_2E4738(v88);
  uint64_t v36 = *(void *)(v89 + 8);
  sub_2D5904(v36, (unsigned int *)v35, 0, (char **)(v36 + 7800));
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  int v106 = 0;
  int v37 = *(unsigned char **)(v36 + 7800);
  uint64_t v38 = *(unsigned char **)(v36 + 7808);
  uint64_t v39 = v38 - v37;
  if (v38 == v37)
  {
    int v40 = 0;
LABEL_105:
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(unsigned char *)a4 = 1;
    *(void *)(a4 + 8) = -1;
    *(void *)(a4 + 16) = -1;
    *(void *)(a4 + 24) = 0x7FFFFFFFFFFFFFFFLL;
    *(void *)(a4 + 80) = 0;
    *(void *)(a4 + 88) = 0xBFF0000000000000;
    *(void *)(a4 + 96) = 0;
    if (v40) {
      goto LABEL_106;
    }
    goto LABEL_41;
  }
  if (v39 < 0) {
    sub_2E00();
  }
  uint64_t v84 = a3;
  int v40 = (char *)operator new(v38 - v37);
  unint64_t v85 = HIDWORD(v35);
  int v86 = v35;
  uint64_t v87 = 8 * (v39 >> 3);
  uint64_t v104 = v40;
  int v106 = &v40[v87];
  memcpy(v40, v37, v39 - 1);
  uint64_t v41 = 0;
  uint64_t v105 = &v40[v87];
  while (1)
  {
    unint64_t v42 = (unint64_t)v88[4];
    if (__PAIR64__(*(unsigned __int16 *)&v40[v41 + 4], *(_DWORD *)&v40[v41]) == __PAIR64__(WORD2(v42), v42)
      && (HIWORD(v42) & 1) != (v40[v41 + 6] == 0))
    {
      goto LABEL_48;
    }
    uint64_t v43 = *(void *)(v89 + 8);
    uint64_t v44 = *(void *)&v40[v41];
    BOOL v45 = (int *)sub_2D5D58(v43, v44 & 0xFFFFFFFFFFFFLL);
    if (*(unsigned char *)(v43 + 7772))
    {
      uint64_t v46 = sub_2DB8E0(v43 + 3896, v44, 0);
      char v47 = &v46[-*(int *)v46];
      if (*(unsigned __int16 *)v47 < 5u)
      {
        uint64_t v48 = 0;
      }
      else
      {
        uint64_t v48 = *((unsigned __int16 *)v47 + 2);
        if (v48) {
          v48 += (uint64_t)&v46[*(unsigned int *)&v46[v48]];
        }
      }
      uint64_t v49 = v48 + 4 * WORD2(v44) + 4 + *(unsigned int *)(v48 + 4 * WORD2(v44) + 4);
    }
    else
    {
      uint64_t v49 = 0;
    }
    uint64_t v50 = sub_2E5C38(v43, v44 & 0xFFFFFFFFFFFFLL, 1);
    long long v97 = v45;
    long long v98 = (int *)v49;
    uint64_t v99 = v50;
    uint64_t v100 = v51;
    int v101 = v44;
    __int16 v102 = WORD2(v44);
    BOOL v103 = (v44 & 0xFF000000000000) != 0;
    uint64_t v52 = *(void *)(v89 + 8);
    uint64_t v53 = *(void *)&v40[v41];
    uint64_t v54 = (int *)sub_2D5D58(v52, v53 & 0xFFFFFFFFFFFFLL);
    if (*(unsigned char *)(v52 + 7772))
    {
      unsigned int v55 = sub_2DB8E0(v52 + 3896, v53, 0);
      BOOL v56 = &v55[-*(int *)v55];
      if (*(unsigned __int16 *)v56 < 5u)
      {
        uint64_t v57 = 0;
      }
      else
      {
        uint64_t v57 = *((unsigned __int16 *)v56 + 2);
        if (v57) {
          v57 += (uint64_t)&v55[*(unsigned int *)&v55[v57]];
        }
      }
      int v58 = (int *)(v57
                  + 4 * (unsigned __int16)((v53 ^ 0x1000000000000uLL) >> 32)
                  + 4
                  + *(unsigned int *)(v57 + 4 * (unsigned __int16)((v53 ^ 0x1000000000000uLL) >> 32) + 4));
    }
    else
    {
      int v58 = 0;
    }
    char v59 = (int *)sub_2E5C38(v52, v53 & 0xFFFFFFFFFFFFLL, 1);
    v93[0] = v54;
    v93[1] = v58;
    v93[2] = v59;
    v93[3] = v60;
    int v94 = v53;
    __int16 v95 = (v53 ^ 0x1000000000000uLL) >> 32;
    BOOL v96 = ((v53 ^ 0x1000000000000) & 0xFF000000000000) != 0;
    BOOL v61 = (unsigned __int16 *)((char *)v97 - *v97);
    unsigned int v62 = *v61;
    if (v62 >= 0xB)
    {
      if (v61[5])
      {
        int v63 = *(int *)((char *)v97 + v61[5]);
        if ((v63 ^ ((v63 & 2) >> 1))) {
          goto LABEL_48;
        }
      }
    }
    if (v98)
    {
      BOOL v64 = (unsigned __int16 *)((char *)v98 - *v98);
      if (*v64 >= 0x11u)
      {
        uint64_t v65 = v64[8];
        if (v65)
        {
          if ((*(_WORD *)((unsigned char *)v98 + v65) & 4) != 0) {
            goto LABEL_48;
          }
        }
      }
    }
    if (v103)
    {
      if (v62 < 0x4D) {
        goto LABEL_82;
      }
      unsigned int v66 = v61[38];
      if (!v66 || (*(int *)((char *)v97 + v66) & 8) == 0) {
        goto LABEL_82;
      }
    }
    else
    {
      if (v62 < 0x4D) {
        goto LABEL_82;
      }
      unsigned int v67 = v61[38];
      if (!v67 || (*(int *)((char *)v97 + v67) & 4) == 0) {
        goto LABEL_82;
      }
    }
    unint64_t v68 = sub_2E4738(&v97);
    if (v68 == v86)
    {
      BOOL v69 = HIDWORD(v68) == v85;
      goto LABEL_83;
    }
LABEL_82:
    BOOL v69 = 0;
LABEL_83:
    long long v70 = (unsigned __int16 *)((char *)v93[0] - *v93[0]);
    unsigned int v71 = *v70;
    if (!v96) {
      break;
    }
    if (v71 >= 0x4D)
    {
      unsigned int v72 = v70[38];
      if (v72)
      {
        if ((*(int *)((char *)v93[0] + v72) & 8) != 0) {
          goto LABEL_91;
        }
      }
    }
LABEL_47:
    if (v69) {
      goto LABEL_93;
    }
LABEL_48:
    v41 += 8;
    if (v87 == v41) {
      goto LABEL_105;
    }
  }
  if (v71 < 0x4D) {
    goto LABEL_47;
  }
  unsigned int v73 = v70[38];
  if (!v73 || (*(int *)((char *)v93[0] + v73) & 4) == 0) {
    goto LABEL_47;
  }
LABEL_91:
  unint64_t v74 = sub_2E4738(v93);
  if (v74 != v86) {
    goto LABEL_47;
  }
  if (!v69 && HIDWORD(v74) != v85) {
    goto LABEL_48;
  }
LABEL_93:
  uint64_t v75 = *(void *)(v84 + 16);
  if (v75 == -1) {
    uint64_t v75 = *(void *)(v84 + 24) - 1;
  }
  uint64_t v92 = v75;
  sub_2954EC(*(void *)(v89 + 8), (uint64_t)v88[4], (uint64_t)v109);
  int v76 = __p;
  if (__p == v111)
  {
    int v80 = 0x7FFFFFFF;
    unint64_t v81 = 0xFFFFFFFF00000000;
    uint64_t v82 = 0xFFFFFFFFLL;
    if (__p)
    {
LABEL_97:
      int64_t v111 = v76;
      operator delete(v76);
    }
  }
  else
  {
    unint64_t v77 = sub_2E40A4((uint64_t)v109);
    unsigned int v78 = v77;
    int v80 = v79;
    unint64_t v81 = v77 & 0xFFFFFFFF00000000;
    int v76 = __p;
    uint64_t v82 = v78;
    if (__p) {
      goto LABEL_97;
    }
  }
  unint64_t v90 = v81 | v82;
  int v91 = v80;
  sub_639BF8(&v92, (uint64_t *)&v90, (uint64_t)__dst, 0, (uint64_t)v112);
  sub_63A428(a4, (uint64_t)v112);
  if (v120 < 0)
  {
    operator delete(v119);
    if (v118 < 0) {
      goto LABEL_110;
    }
LABEL_100:
    int v83 = v116;
    if (v116 != 1) {
      goto LABEL_101;
    }
LABEL_111:
    if (v113)
    {
      uint64_t v114 = v113;
      operator delete(v113);
    }
  }
  else
  {
    if ((v118 & 0x80000000) == 0) {
      goto LABEL_100;
    }
LABEL_110:
    operator delete(v117);
    int v83 = v116;
    if (v116 == 1) {
      goto LABEL_111;
    }
LABEL_101:
    if (!v83 && v115 < 0) {
      operator delete(v113);
    }
  }
LABEL_106:
  uint64_t v105 = v40;
  operator delete(v40);
LABEL_41:
  if (SHIBYTE(v108) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_8C9F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *__p,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  if (__p) {
    operator delete(__p);
  }
  operator delete(v42);
  if ((a36 & 0x80000000) == 0) {
    _Unwind_Resume(a1);
  }
  operator delete(a31);
  _Unwind_Resume(a1);
}

uint64_t sub_8C9FE0(uint64_t a1, void *a2, unint64_t a3)
{
  if (a2[1272] != a2[1273])
  {
    uint64_t v4 = sub_4A5E10(a2 + 133, a3);
    uint64_t v5 = a2[1273] - a2[1272];
    if (v5)
    {
      uint64_t v6 = v4;
      unint64_t v7 = 0;
      uint64_t v8 = a2 + 1272;
      uint64_t v9 = v5 / 104;
      uint64_t v10 = -1;
      while (1)
      {
        unint64_t v11 = *(void *)(sub_856CCC(v8, v7) + 8);
        if (v11 >= *(void *)(v6 + 40))
        {
          if (v11 >= *(void *)(v6 + 24)) {
            return v10;
          }
          if (v10 == -1) {
            uint64_t v10 = v7;
          }
        }
        if (v9 == ++v7) {
          return v10;
        }
      }
    }
  }
  return -1;
}

uint64_t sub_8CA0C8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, _DWORD *a6)
{
  uint64_t result = sub_51690C((void *)(a3 + 1064), a2);
  if (*(void *)(result + 40) != -1 && *(void *)(result + 872) != 0)
  {
    uint64_t v12 = result;
    if ((sub_63A7D8(a4) > 1 || *(void *)(a4 + 80) == 1) && *a5 != -1) {
      *(_DWORD *)(a4 + 16) = (*a5)++;
    }
    uint64_t result = sub_63A4A4(a4);
    if (result)
    {
      if ((*(_DWORD *)(a4 + 4) - 1) <= 1)
      {
        long long v13 = *(_OWORD *)a4;
        *(_OWORD *)(v12 + 1912) = *(_OWORD *)(a4 + 16);
        *(_OWORD *)(v12 + 1896) = v13;
        if (v12 + 1896 != a4) {
          sub_5A0D34((uint64_t *)(v12 + 1928), *(void *)(a4 + 32), *(void *)(a4 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a4 + 40) - *(void *)(a4 + 32)) >> 4));
        }
        long long v14 = *(_OWORD *)(a4 + 56);
        long long v15 = *(_OWORD *)(a4 + 72);
        *(_OWORD *)(v12 + 1977) = *(_OWORD *)(a4 + 81);
        *(_OWORD *)(v12 + 1968) = v15;
        *(_OWORD *)(v12 + 1952) = v14;
      }
      unint64_t v16 = *(void *)(a3 + 10184);
      if (v16 >= *(void *)(a3 + 10192))
      {
        uint64_t v20 = sub_7DC95C((void **)(a3 + 10176), a4);
      }
      else
      {
        long long v17 = *(_OWORD *)(a4 + 16);
        *(_OWORD *)unint64_t v16 = *(_OWORD *)a4;
        *(_OWORD *)(v16 + 16) = v17;
        sub_597D64((void *)(v16 + 32), (uint64_t *)(a4 + 32));
        long long v18 = *(_OWORD *)(a4 + 56);
        long long v19 = *(_OWORD *)(a4 + 72);
        *(_OWORD *)(v16 + 81) = *(_OWORD *)(a4 + 81);
        *(_OWORD *)(v16 + 72) = v19;
        *(_OWORD *)(v16 + 56) = v18;
        uint64_t v20 = (char *)(v16 + 104);
        *(void *)(a3 + 10184) = v16 + 104;
      }
      *(void *)(a3 + 10184) = v20;
      *a6 += sub_63A7FC(a4);
      uint64_t result = sub_63A810(a4);
      a6[1] += result;
    }
  }
  return result;
}

void sub_8CA268(_Unwind_Exception *a1)
{
  *(void *)(v1 + 10184) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_8CA270(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_4A5E10(a2 + 133, a3);
  uint64_t v10 = (uint64_t *)(v7 + 80);
  unint64_t v9 = *(void *)(v7 + 80);
  if (v9 == -1)
  {
    uint64_t v11 = 0;
    uint64_t v10 = (uint64_t *)(v7 + 16);
  }
  else
  {
    uint64_t v11 = *(void *)(v7 + 88) - sub_46CCC8(a2, v9, v8);
  }
  uint64_t v12 = sub_46CE10(a2, *(void *)(a4 + 8), 0, *v10, 1u, v8);
  if (!sub_63AA60(a4))
  {
    uint64_t v18 = 0;
    return v12 + v11 + v18;
  }
  long long v13 = (char **)sub_46C8EC(a2, *(void *)(a4 + 8));
  sub_2954EC(*(void *)(a1 + 8), (uint64_t)v13[4], (uint64_t)v23);
  uint64_t v28 = 0x7FEFFFFFFFFFFFFFLL;
  unsigned int v29 = (double *)(a4 + 20);
  uint64_t v26 = -1;
  int v27 = 0x7FFFFFFF;
  BOOL v30 = &v28;
  uint64_t v31 = (double *)&v26;
  sub_77F46C((uint64_t)v23, (uint64_t)&v29);
  double v34 = 0.0;
  double v35 = 0.0;
  uint64_t v33 = 0x7FEFFFFFFFFFFFFFLL;
  unsigned int v29 = (double *)&v26;
  BOOL v30 = &v33;
  uint64_t v31 = &v34;
  uint64_t v32 = &v35;
  sub_77F6DC((uint64_t)v23, &v29);
  double v14 = 0.0;
  double v15 = 0.0;
  if (v35 == 0.0)
  {
    unint64_t v16 = *v13;
    long long v17 = &(*v13)[-*(int *)*v13];
    if (*(unsigned __int16 *)v17 < 9u) {
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  double v15 = v34 / v35;
  if (v34 / v35 > 1.0) {
    double v15 = 1.0;
  }
  unint64_t v16 = *v13;
  long long v17 = &(*v13)[-*(int *)*v13];
  if (*(unsigned __int16 *)v17 >= 9u)
  {
LABEL_12:
    uint64_t v19 = *((unsigned __int16 *)v17 + 4);
    if (v19)
    {
      LODWORD(v14) = *(_DWORD *)&v16[v19];
      double v14 = (double)*(unint64_t *)&v14;
    }
  }
LABEL_14:
  double v20 = (1.0 - v15) * v14;
  if (v20 >= 0.0)
  {
    if (v20 >= 4.50359963e15) {
      goto LABEL_22;
    }
    uint64_t v21 = (uint64_t)(v20 + v20) + 1;
  }
  else
  {
    if (v20 <= -4.50359963e15) {
      goto LABEL_22;
    }
    uint64_t v21 = (uint64_t)(v20 + v20);
    if (v21 >= 1) {
      --v21;
    }
  }
  double v20 = (double)(v21 >> 1);
LABEL_22:
  uint64_t v18 = (uint64_t)v20;
  if (__p)
  {
    uint64_t v25 = __p;
    operator delete(__p);
  }
  return v12 + v11 + v18;
}

void sub_8CA47C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_8CA498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 80);
  if (v3 == -1 || v3 == *(void *)(a3 + 16)) {
    return 0;
  }
  uint64_t v6 = (unsigned __int8 *)(a3 + 329);
  if (!*(unsigned char *)(a3 + 330)) {
    uint64_t v6 = (unsigned __int8 *)(a2 + 1057);
  }
  int v7 = *v6;
  int v8 = *(_DWORD *)(a3 + 160);
  if (v7 == 1)
  {
    uint64_t result = 1;
    switch(v8)
    {
      case 2:
      case 21:
      case 28:
      case 30:
      case 34:
      case 61:
      case 63:
      case 66:
        return result;
      default:
        return 0;
    }
  }
  else
  {
    uint64_t result = 1;
    switch(v8)
    {
      case 1:
      case 20:
      case 27:
      case 29:
      case 33:
      case 60:
      case 62:
      case 65:
        return result;
      default:
        return 0;
    }
  }
  return result;
}

uint64_t sub_8CA744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a3 + 160);
  if (v3 == 4) {
    return 1;
  }
  uint64_t v5 = (unsigned char *)(a3 + 329);
  if (!*(unsigned char *)(a3 + 330)) {
    uint64_t v5 = (unsigned char *)(a2 + 1057);
  }
  if (*v5 == 1)
  {
    uint64_t result = 0;
    switch(v3)
    {
      case 2:
      case 21:
      case 28:
      case 30:
      case 34:
      case 61:
      case 63:
      case 66:
        return result;
      default:
        return 1;
    }
  }
  else
  {
    uint64_t result = 0;
    switch(v3)
    {
      case 1:
      case 20:
      case 27:
      case 29:
      case 33:
      case 60:
      case 62:
      case 65:
        return result;
      default:
        return 1;
    }
  }
  return result;
}

unint64_t sub_8CA9E4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  if (v6 == -1) {
    uint64_t v6 = *(void *)(a3 + 24) - 1;
  }
  int v7 = (int **)sub_46C8EC(a2, v6 + 1);
  if (*(void *)(a3 + 16) == -1) {
    uint64_t v8 = *(void *)(a3 + 24) - 1;
  }
  else {
    uint64_t v8 = *(void *)(a3 + 16);
  }
  unint64_t v9 = (void *)sub_46C8EC(a2, v8);
  uint64_t v10 = (unsigned __int16 *)(*v9 - *(int *)*v9);
  if (*v10 >= 0xBu)
  {
    uint64_t v11 = v10[5];
    if (v11)
    {
      if ((*(unsigned char *)(*v9 + v11 + 3) & 2) != 0)
      {
        double v20 = (unsigned __int16 *)((char *)*v7 - **v7);
        if (*v20 >= 0x2Fu)
        {
          uint64_t v21 = v20[23];
          if (v21)
          {
            if (*((unsigned char *)*v7 + v21) == 42 && (sub_8C7764(v7) & 1) != 0) {
              goto LABEL_16;
            }
          }
        }
        return 0;
      }
    }
  }
  unint64_t result = sub_663238(*a1 + 3048, v7);
  if (!result) {
    return result;
  }
  long long v13 = (unsigned __int16 *)((char *)*v7 - **v7);
  if (*v13 < 0x2Fu) {
    return 0;
  }
  uint64_t v14 = v13[23];
  if (!v14) {
    return 0;
  }
  unsigned int v15 = *((unsigned __int8 *)*v7 + v14);
  BOOL v16 = v15 > 0x2A;
  uint64_t v17 = (1 << v15) & 0x50426810004;
  if (v16 || v17 == 0) {
    return 0;
  }
LABEL_16:
  unsigned int v19 = *(_DWORD *)(a3 + 160);
  if (v19 <= 0x23 && ((1 << v19) & 0x804000010) != 0) {
    return 1;
  }
  size_t v22 = (unsigned char *)(a3 + 329);
  if (!*(unsigned char *)(a3 + 330)) {
    size_t v22 = (char *)a2 + 1057;
  }
  if (*v22 == 1)
  {
    unint64_t result = 1;
    switch(v19)
    {
      case 1u:
      case 0x14u:
      case 0x1Bu:
      case 0x1Du:
      case 0x21u:
      case 0x3Cu:
      case 0x3Eu:
      case 0x41u:
        return result;
      default:
        return 0;
    }
  }
  else
  {
    unint64_t result = 1;
    switch(v19)
    {
      case 2u:
      case 0x15u:
      case 0x1Cu:
      case 0x1Eu:
      case 0x22u:
      case 0x3Du:
      case 0x3Fu:
      case 0x42u:
        return result;
      default:
        return 0;
    }
  }
  return result;
}

void sub_8CADD4(uint64_t a1@<X0>, int **a2@<X1>, unsigned char *a3@<X2>, void *a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  if (*((_DWORD *)a2 + 8)) {
    BOOL v7 = *a2 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7 || a2[1] == 0)
  {
    *(void *)a6 = 0;
    *(void *)(a6 + 8) = 0;
    *(void *)(a6 + 16) = 0;
    return;
  }
  long long v13 = (uint64_t *)(a1 + 8);
  uint64_t v14 = (uint64_t *)(a2 + 4);
  sub_2954EC(*(void *)(a1 + 8), (uint64_t)a2[4], (uint64_t)v183);
  sub_2954EC(*v13, *v14, (uint64_t)&v192);
  unsigned int v15 = (void *)*((void *)&v192 + 1);
  if (*((void *)&v192 + 1) == (void)v193)
  {
    unint64_t v18 = 0xFFFFFFFF00000000;
    int v21 = 0x7FFFFFFF;
    uint64_t v19 = 0xFFFFFFFFLL;
    if (!*((void *)&v192 + 1)) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  unint64_t v16 = sub_2E40A4((uint64_t)&v192);
  unsigned int v17 = v16;
  unint64_t v18 = v16 & 0xFFFFFFFF00000000;
  unsigned int v15 = (void *)*((void *)&v192 + 1);
  uint64_t v19 = v17;
  int v21 = v20;
  if (*((void *)&v192 + 1))
  {
LABEL_12:
    *(void *)&long long v193 = v15;
    operator delete(v15);
  }
LABEL_13:
  unint64_t v181 = v18 | v19;
  int v182 = v21;
  size_t v22 = (unsigned __int16 *)((char *)*a2 - **a2);
  char v175 = a3;
  if (*v22 >= 0xDu && (uint64_t v23 = v22[6]) != 0) {
    unsigned int v24 = *(unsigned __int16 *)((char *)*a2 + v23);
  }
  else {
    unsigned int v24 = 0;
  }
  uint64_t v25 = sub_290DEC(*(void *)(a1 + 8) + 3896, 1u, 0);
  uint64_t v26 = &v25[-*(int *)v25];
  if (*(unsigned __int16 *)v26 < 0xBu)
  {
    uint64_t v27 = 0;
  }
  else
  {
    uint64_t v27 = *((unsigned __int16 *)v26 + 5);
    if (v27) {
      v27 += (uint64_t)&v25[*(unsigned int *)&v25[v27]];
    }
  }
  uint64_t v28 = (int *)(v27 + 4 * v24 + 4 + *(unsigned int *)(v27 + 4 * v24 + 4));
  unsigned int v29 = (unsigned __int16 *)((char *)v28 - *v28);
  if (*v29 >= 5u)
  {
    uint64_t v30 = v29[2];
    if (v30)
    {
      uint64_t v31 = (unsigned int *)((char *)v28 + v30);
      uint64_t v32 = *v31;
      double v34 = (char *)v31 + v32 + 4;
      size_t v33 = *(unsigned int *)((char *)v31 + v32);
      if (v33 >= 0x17)
      {
        uint64_t v37 = (v33 & 0xFFFFFFF8) + 8;
        if ((v33 | 7) != 0x17) {
          uint64_t v37 = v33 | 7;
        }
        uint64_t v38 = v37 + 1;
        double v35 = (void **)operator new(v37 + 1);
        __dst[1] = (void *)v33;
        unint64_t v180 = v38 | 0x8000000000000000;
        __dst[0] = v35;
      }
      else
      {
        HIBYTE(v180) = *(unsigned int *)((char *)v31 + v32);
        double v35 = __dst;
        if (!v33)
        {
LABEL_34:
          a3 = v175;
          *((unsigned char *)v35 + v33) = 0;
          int v36 = v175[5];
          if (!v175[5]) {
            goto LABEL_40;
          }
          goto LABEL_35;
        }
      }
      memcpy(v35, v34, v33);
      goto LABEL_34;
    }
  }
  HIBYTE(v180) = 0;
  LOBYTE(__dst[0]) = 0;
  int v36 = a3[5];
  if (!a3[5]) {
    goto LABEL_40;
  }
LABEL_35:
  if (a3[1])
  {
    uint64_t v39 = *a2;
    int v40 = *((unsigned __int8 *)a2 + 38);
    uint64_t v41 = (unsigned __int16 *)((char *)*a2 - **a2);
    unsigned int v42 = *v41;
    if (*((unsigned char *)a2 + 38))
    {
      if (v42 >= 0x4D)
      {
        unsigned int v43 = v41[38];
        if (v43)
        {
          int v44 = 2;
LABEL_50:
          BOOL v45 = (*(int *)((char *)v39 + v43) & v44) != 0;
LABEL_52:
          BOOL v51 = 0;
          BOOL v46 = a3[3] == 0;
          goto LABEL_53;
        }
      }
    }
    else if (v42 >= 0x4D)
    {
      unsigned int v43 = v41[38];
      if (v43)
      {
        int v44 = 1;
        goto LABEL_50;
      }
    }
    BOOL v45 = 0;
    goto LABEL_52;
  }
LABEL_40:
  BOOL v45 = 0;
  BOOL v46 = a3[3] == 0;
  uint64_t v39 = *a2;
  int v40 = *((unsigned __int8 *)a2 + 38);
  if (v36 || !a3[3])
  {
    BOOL v51 = 0;
    goto LABEL_53;
  }
  char v47 = (unsigned __int16 *)((char *)v39 - *v39);
  unsigned int v48 = *v47;
  if (*((unsigned char *)a2 + 38))
  {
    if (v48 < 0x4D || (unsigned int v49 = v47[38]) == 0)
    {
      BOOL v46 = 0;
      BOOL v45 = 0;
      BOOL v51 = 0;
      int v40 = 1;
      goto LABEL_53;
    }
    int v50 = 8;
    goto LABEL_98;
  }
  if (v48 >= 0x4D)
  {
    unsigned int v49 = v47[38];
    if (v49)
    {
      int v50 = 4;
LABEL_98:
      BOOL v46 = 0;
      BOOL v45 = 0;
      BOOL v51 = (*(int *)((char *)v39 + v49) & v50) != 0;
      goto LABEL_53;
    }
  }
  int v40 = 0;
  BOOL v46 = 0;
  BOOL v45 = 0;
  BOOL v51 = 0;
LABEL_53:
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = 0;
  uint64_t v52 = *v39;
  uint64_t v53 = -v52;
  uint64_t v54 = (unsigned __int16 *)((char *)v39 - v52);
  unsigned int v55 = *v54;
  if (v40)
  {
    if (v55 < 0x4D || !v54[38])
    {
      if (*v54 <= 0x4Cu) {
        goto LABEL_79;
      }
      goto LABEL_63;
    }
    if ((*(int *)((char *)v39 + v54[38]) & 8) == 0) {
      BOOL v46 = 1;
    }
    if (v46 || v45)
    {
LABEL_59:
      uint64_t v54 = (unsigned __int16 *)((char *)v39 + v53);
      BOOL v56 = *(unsigned __int16 *)((char *)v39 + v53) >= 0x4Du;
      if (v40) {
        goto LABEL_60;
      }
      goto LABEL_118;
    }
LABEL_87:
    sub_639BF8(a4, (uint64_t *)&v181, (uint64_t)__dst, a5, (uint64_t)&v192);
    unint64_t v69 = *(void *)(a6 + 8);
    if (v69 >= *(void *)(a6 + 16))
    {
      uint64_t v75 = sub_8CF4AC((void **)a6, (uint64_t)&v192);
      int v76 = SHIBYTE(v204);
      *(void *)(a6 + 8) = v75;
      if (v76 < 0)
      {
        operator delete((void *)v203);
        if (SHIBYTE(v201) < 0) {
          goto LABEL_113;
        }
      }
      else if (SHIBYTE(v201) < 0)
      {
        goto LABEL_113;
      }
    }
    else
    {
      long long v70 = v192;
      long long v71 = v193;
      long long v72 = v194[0];
      *(_OWORD *)(v69 + 41) = *(_OWORD *)((char *)v194 + 9);
      *(_OWORD *)(v69 + 16) = v71;
      *(_OWORD *)(v69 + 32) = v72;
      *(_OWORD *)unint64_t v69 = v70;
      *(_DWORD *)(v69 + 96) = v198;
      if (v198 == 1)
      {
        uint64_t v79 = v195;
        *(void *)(v69 + 72) = 0;
        *(void *)(v69 + 64) = v79;
        *(void *)(v69 + 80) = 0;
        *(void *)(v69 + 88) = 0;
        int v80 = (const void *)v196;
        int64_t v81 = *((void *)&v196 + 1) - v196;
        if (*((void *)&v196 + 1) != (void)v196)
        {
          if (v81 < 0) {
            sub_2E00();
          }
          uint64_t v82 = (char *)operator new(*((void *)&v196 + 1) - v196);
          *(void *)(v69 + 72) = v82;
          *(void *)(v69 + 80) = v82;
          int v83 = &v82[8 * (v81 >> 3)];
          *(void *)(v69 + 88) = v83;
          memcpy(v82, v80, v81);
          *(void *)(v69 + 80) = v83;
        }
      }
      else if (!v198)
      {
        *(void *)(v69 + 64) = v195;
        unsigned int v73 = (unsigned char *)(v69 + 72);
        if (SHIBYTE(v197) < 0)
        {
          sub_4200(v73, (void *)v196, *((unint64_t *)&v196 + 1));
        }
        else
        {
          long long v74 = v196;
          *(void *)(v69 + 88) = v197;
          *(_OWORD *)unsigned int v73 = v74;
        }
      }
      *(void *)(v69 + 104) = v199;
      long long v84 = v200;
      *(void *)(v69 + 128) = v201;
      *(_OWORD *)(v69 + 112) = v84;
      long long v200 = 0uLL;
      *(unsigned char *)(v69 + 136) = v202;
      long long v85 = v203;
      *(void *)(v69 + 160) = v204;
      *(_OWORD *)(v69 + 144) = v85;
      uint64_t v201 = 0;
      long long v203 = 0uLL;
      uint64_t v204 = 0;
      *(unsigned char *)(v69 + 168) = v205;
      *(void *)(a6 + 8) = v69 + 176;
      a3 = v175;
      if (SHIBYTE(v201) < 0)
      {
LABEL_113:
        operator delete((void *)v200);
        int v77 = v198;
        if (v198 == 1) {
          goto LABEL_114;
        }
        goto LABEL_102;
      }
    }
    int v77 = v198;
    if (v198 == 1)
    {
LABEL_114:
      unsigned int v78 = (void *)v196;
      if (!(void)v196) {
        goto LABEL_117;
      }
      *((void *)&v196 + 1) = v196;
      goto LABEL_116;
    }
LABEL_102:
    if (v77 || (SHIBYTE(v197) & 0x80000000) == 0)
    {
LABEL_117:
      uint64_t v39 = *a2;
      uint64_t v53 = -(uint64_t)**a2;
      uint64_t v54 = (unsigned __int16 *)((char *)*a2 - **a2);
      BOOL v56 = *v54 >= 0x4Du;
      if (*((unsigned char *)a2 + 38))
      {
LABEL_60:
        if (!v56)
        {
LABEL_79:
          std::string::size_type v60 = (unsigned __int16 *)((char *)v39 + v53);
          if (*(unsigned __int16 *)((char *)v39 + v53) > 0x4Cu)
          {
LABEL_80:
            unsigned int v66 = v60[38];
            int v67 = 1;
            if (v66)
            {
              int v68 = 32;
              goto LABEL_136;
            }
LABEL_176:
            unsigned int v62 = a3 + 2;
            goto LABEL_177;
          }
LABEL_73:
          unsigned int v62 = a3 + 2;
          int v63 = (unsigned __int16 *)((char *)v39 + v53);
          BOOL v64 = *v63 >= 0x4Du;
          goto LABEL_178;
        }
LABEL_63:
        if (!v54[38]) {
          goto LABEL_79;
        }
        int v57 = 1;
        char v59 = (*(int *)((char *)v39 + v54[38]) & 2) == 0 || a3[1] == 0 || v51;
        if (v59)
        {
LABEL_71:
          std::string::size_type v60 = (unsigned __int16 *)((char *)v39 + v53);
          BOOL v61 = *(unsigned __int16 *)((char *)v39 + v53) >= 0x4Du;
          if (v57) {
            goto LABEL_72;
          }
          goto LABEL_174;
        }
LABEL_128:
        sub_639D20(a4, (uint64_t *)&v181, (uint64_t)__dst, a5, (uint64_t)&v192);
        unint64_t v88 = *(void *)(a6 + 8);
        if (v88 >= *(void *)(a6 + 16))
        {
          int v101 = sub_8CF4AC((void **)a6, (uint64_t)&v192);
          int v102 = SHIBYTE(v204);
          *(void *)(a6 + 8) = v101;
          if (v102 < 0)
          {
            operator delete((void *)v203);
            if (SHIBYTE(v201) < 0) {
              goto LABEL_169;
            }
          }
          else if (SHIBYTE(v201) < 0)
          {
            goto LABEL_169;
          }
        }
        else
        {
          long long v89 = v192;
          long long v90 = v193;
          long long v91 = v194[0];
          *(_OWORD *)(v88 + 41) = *(_OWORD *)((char *)v194 + 9);
          *(_OWORD *)(v88 + 16) = v90;
          *(_OWORD *)(v88 + 32) = v91;
          *(_OWORD *)unint64_t v88 = v89;
          *(_DWORD *)(v88 + 96) = v198;
          if (v198 == 1)
          {
            uint64_t v109 = v195;
            *(void *)(v88 + 72) = 0;
            *(void *)(v88 + 64) = v109;
            *(void *)(v88 + 80) = 0;
            *(void *)(v88 + 88) = 0;
            size_t v110 = (const void *)v196;
            int64_t v111 = *((void *)&v196 + 1) - v196;
            if (*((void *)&v196 + 1) != (void)v196)
            {
              if (v111 < 0) {
                sub_2E00();
              }
              size_t v112 = (char *)operator new(*((void *)&v196 + 1) - v196);
              *(void *)(v88 + 72) = v112;
              *(void *)(v88 + 80) = v112;
              unint64_t v113 = &v112[8 * (v111 >> 3)];
              *(void *)(v88 + 88) = v113;
              memcpy(v112, v110, v111);
              *(void *)(v88 + 80) = v113;
            }
          }
          else if (!v198)
          {
            *(void *)(v88 + 64) = v195;
            uint64_t v92 = (unsigned char *)(v88 + 72);
            if (SHIBYTE(v197) < 0)
            {
              sub_4200(v92, (void *)v196, *((unint64_t *)&v196 + 1));
            }
            else
            {
              long long v93 = v196;
              *(void *)(v88 + 88) = v197;
              *(_OWORD *)uint64_t v92 = v93;
            }
          }
          *(void *)(v88 + 104) = v199;
          long long v119 = v200;
          *(void *)(v88 + 128) = v201;
          *(_OWORD *)(v88 + 112) = v119;
          long long v200 = 0uLL;
          *(unsigned char *)(v88 + 136) = v202;
          long long v120 = v203;
          *(void *)(v88 + 160) = v204;
          *(_OWORD *)(v88 + 144) = v120;
          uint64_t v201 = 0;
          long long v203 = 0uLL;
          uint64_t v204 = 0;
          *(unsigned char *)(v88 + 168) = v205;
          *(void *)(a6 + 8) = v88 + 176;
          a3 = v175;
          if (SHIBYTE(v201) < 0)
          {
LABEL_169:
            operator delete((void *)v200);
            int v103 = v198;
            if (v198 == 1) {
              goto LABEL_170;
            }
            goto LABEL_148;
          }
        }
        int v103 = v198;
        if (v198 == 1)
        {
LABEL_170:
          uint64_t v104 = (void *)v196;
          if (!(void)v196) {
            goto LABEL_173;
          }
          *((void *)&v196 + 1) = v196;
          goto LABEL_172;
        }
LABEL_148:
        if (v103 || (SHIBYTE(v197) & 0x80000000) == 0)
        {
LABEL_173:
          uint64_t v39 = *a2;
          uint64_t v53 = -(uint64_t)**a2;
          std::string::size_type v60 = (unsigned __int16 *)((char *)*a2 - **a2);
          BOOL v61 = *v60 >= 0x4Du;
          if (*((unsigned char *)a2 + 38))
          {
LABEL_72:
            if (v61) {
              goto LABEL_80;
            }
            goto LABEL_73;
          }
LABEL_174:
          if (!v61) {
            goto LABEL_175;
          }
          goto LABEL_134;
        }
        uint64_t v104 = (void *)v196;
LABEL_172:
        operator delete(v104);
        goto LABEL_173;
      }
LABEL_118:
      if (!v56) {
        goto LABEL_133;
      }
      goto LABEL_120;
    }
    unsigned int v78 = (void *)v196;
LABEL_116:
    operator delete(v78);
    goto LABEL_117;
  }
  if (v55 >= 0x4D && v54[38])
  {
    if ((*(int *)((char *)v39 + v54[38]) & 4) == 0) {
      BOOL v46 = 1;
    }
    if (v46 || v45) {
      goto LABEL_59;
    }
    goto LABEL_87;
  }
  if (*v54 <= 0x4Cu) {
    goto LABEL_133;
  }
LABEL_120:
  if (v54[38])
  {
    int v57 = 0;
    char v87 = (*(int *)((char *)v39 + v54[38]) & 1) == 0 || a3[1] == 0 || v51;
    if (v87) {
      goto LABEL_71;
    }
    goto LABEL_128;
  }
LABEL_133:
  std::string::size_type v60 = (unsigned __int16 *)((char *)v39 + v53);
  if (*(unsigned __int16 *)((char *)v39 + v53) <= 0x4Cu)
  {
LABEL_175:
    int v67 = 0;
    goto LABEL_176;
  }
LABEL_134:
  int v67 = 0;
  unsigned int v66 = v60[38];
  if (!v66) {
    goto LABEL_176;
  }
  int v68 = 16;
LABEL_136:
  unsigned int v62 = a3 + 2;
  if ((*(int *)((char *)v39 + v66) & v68) != 0 && a3[2] != 0)
  {
    sub_639DA4(a4, (uint64_t *)&v181, (uint64_t)__dst, (uint64_t)&v192);
    unint64_t v95 = *(void *)(a6 + 8);
    if (v95 >= *(void *)(a6 + 16))
    {
      uint64_t v105 = sub_8CF4AC((void **)a6, (uint64_t)&v192);
      int v106 = SHIBYTE(v204);
      *(void *)(a6 + 8) = v105;
      if (v106 < 0)
      {
        operator delete((void *)v203);
        if (SHIBYTE(v201) < 0) {
          goto LABEL_266;
        }
      }
      else if (SHIBYTE(v201) < 0)
      {
        goto LABEL_266;
      }
    }
    else
    {
      long long v96 = v192;
      long long v97 = v193;
      long long v98 = v194[0];
      *(_OWORD *)(v95 + 41) = *(_OWORD *)((char *)v194 + 9);
      *(_OWORD *)(v95 + 16) = v97;
      *(_OWORD *)(v95 + 32) = v98;
      *(_OWORD *)unint64_t v95 = v96;
      *(_DWORD *)(v95 + 96) = v198;
      if (v198 == 1)
      {
        uint64_t v114 = v195;
        *(void *)(v95 + 72) = 0;
        *(void *)(v95 + 64) = v114;
        *(void *)(v95 + 80) = 0;
        *(void *)(v95 + 88) = 0;
        char v115 = (const void *)v196;
        int64_t v116 = *((void *)&v196 + 1) - v196;
        if (*((void *)&v196 + 1) != (void)v196)
        {
          if (v116 < 0) {
            sub_2E00();
          }
          int v117 = (char *)operator new(*((void *)&v196 + 1) - v196);
          *(void *)(v95 + 72) = v117;
          *(void *)(v95 + 80) = v117;
          char v118 = &v117[8 * (v116 >> 3)];
          *(void *)(v95 + 88) = v118;
          memcpy(v117, v115, v116);
          *(void *)(v95 + 80) = v118;
        }
      }
      else if (!v198)
      {
        *(void *)(v95 + 64) = v195;
        uint64_t v99 = (unsigned char *)(v95 + 72);
        if (SHIBYTE(v197) < 0)
        {
          sub_4200(v99, (void *)v196, *((unint64_t *)&v196 + 1));
        }
        else
        {
          long long v100 = v196;
          *(void *)(v95 + 88) = v197;
          *(_OWORD *)uint64_t v99 = v100;
        }
      }
      *(void *)(v95 + 104) = v199;
      long long v173 = v200;
      *(void *)(v95 + 128) = v201;
      *(_OWORD *)(v95 + 112) = v173;
      long long v200 = 0uLL;
      *(unsigned char *)(v95 + 136) = v202;
      long long v174 = v203;
      *(void *)(v95 + 160) = v204;
      *(_OWORD *)(v95 + 144) = v174;
      uint64_t v201 = 0;
      long long v203 = 0uLL;
      uint64_t v204 = 0;
      *(unsigned char *)(v95 + 168) = v205;
      *(void *)(a6 + 8) = v95 + 176;
      a3 = v175;
      if (SHIBYTE(v201) < 0)
      {
LABEL_266:
        operator delete((void *)v200);
        int v107 = v198;
        if (v198 == 1) {
          goto LABEL_267;
        }
        goto LABEL_154;
      }
    }
    int v107 = v198;
    if (v198 == 1)
    {
LABEL_267:
      uint64_t v108 = (void *)v196;
      if (!(void)v196) {
        goto LABEL_270;
      }
      *((void *)&v196 + 1) = v196;
      goto LABEL_269;
    }
LABEL_154:
    if (v107 || (SHIBYTE(v197) & 0x80000000) == 0)
    {
LABEL_270:
      uint64_t v39 = *a2;
      int v63 = (unsigned __int16 *)((char *)*a2 - **a2);
      BOOL v64 = *v63 >= 0x4Du;
      if (!*((unsigned char *)a2 + 38)) {
        goto LABEL_74;
      }
      goto LABEL_178;
    }
    uint64_t v108 = (void *)v196;
LABEL_269:
    operator delete(v108);
    goto LABEL_270;
  }
LABEL_177:
  int v63 = (unsigned __int16 *)((char *)v39 + v53);
  BOOL v64 = *v63 >= 0x4Du;
  if (!v67)
  {
LABEL_74:
    if (!v64) {
      goto LABEL_256;
    }
    unsigned int v65 = v63[38];
    if (!v65 || (*(int *)((char *)v39 + v65) & 0x40) == 0) {
      goto LABEL_256;
    }
    goto LABEL_182;
  }
LABEL_178:
  if (v64)
  {
    unsigned int v121 = v63[38];
    if (v121)
    {
      if ((*(int *)((char *)v39 + v121) & 0x80) != 0)
      {
LABEL_182:
        if (!*v62) {
          goto LABEL_256;
        }
        sub_8C8B5C(*(void *)(a1 + 8), (uint64_t)a2[4], (uint64_t)&v177);
        unint64_t v122 = v177;
        uint64_t v123 = v178;
        if (v177 == v178)
        {
LABEL_254:
          if (v122)
          {
            long long v178 = v122;
            operator delete(v122);
          }
          goto LABEL_256;
        }
        while (1)
        {
          uint64_t v188 = 0x7FEFFFFFFFFFFFFFLL;
          uint64_t v186 = -1;
          int v187 = 0x7FFFFFFF;
          *(void *)&long long v192 = v122;
          *((void *)&v192 + 1) = &v188;
          *(void *)&long long v193 = &v186;
          sub_77F46C((uint64_t)v183, (uint64_t)&v192);
          double v190 = 0.0;
          double v191 = 0.0;
          uint64_t v189 = 0x7FEFFFFFFFFFFFFFLL;
          *(void *)&long long v192 = &v186;
          *((void *)&v192 + 1) = &v189;
          *(void *)&long long v193 = &v190;
          *((void *)&v193 + 1) = &v191;
          sub_77F6DC((uint64_t)v183, (double **)&v192);
          double v125 = 0.0;
          if (v191 == 0.0)
          {
            uint64_t v126 = *a2;
            uint64_t v127 = (unsigned __int16 *)((char *)*a2 - **a2);
            if (*v127 < 9u) {
              goto LABEL_199;
            }
          }
          else
          {
            double v125 = v190 / v191;
            if (v190 / v191 > 1.0) {
              double v125 = 1.0;
            }
            uint64_t v126 = *a2;
            uint64_t v127 = (unsigned __int16 *)((char *)*a2 - **a2);
            if (*v127 < 9u)
            {
LABEL_199:
              double v129 = (1.0 - v125) * (double)0;
              if (v129 < 0.0) {
                goto LABEL_192;
              }
              goto LABEL_200;
            }
          }
          uint64_t v128 = v127[4];
          if (v128) {
            uint64_t v128 = *(unsigned int *)((char *)v126 + v128);
          }
          double v129 = (1.0 - v125) * (double)v128;
          if (v129 < 0.0)
          {
LABEL_192:
            if (v129 <= -4.50359963e15) {
              goto LABEL_203;
            }
            uint64_t v130 = (uint64_t)(v129 + v129);
            if (v130 >= 1) {
              --v130;
            }
            goto LABEL_202;
          }
LABEL_200:
          if (v129 >= 4.50359963e15) {
            goto LABEL_203;
          }
          uint64_t v130 = (uint64_t)(v129 + v129) + 1;
LABEL_202:
          double v129 = (double)(v130 >> 1);
LABEL_203:
          uint64_t v186 = (uint64_t)v129;
          int v131 = (unsigned __int16 *)((char *)v126 - *v126);
          unsigned int v132 = *v131;
          double v133 = -1.0;
          if (*((unsigned char *)a2 + 38))
          {
            if (v132 < 0x11) {
              goto LABEL_211;
            }
            unsigned int v134 = v131[8];
            if (!v134) {
              goto LABEL_211;
            }
          }
          else
          {
            if (v132 < 0xF) {
              goto LABEL_211;
            }
            unsigned int v134 = v131[7];
            if (!v134) {
              goto LABEL_211;
            }
          }
          unsigned int v135 = *((unsigned __int8 *)v126 + v134);
          double v133 = (double)v135;
          if (!v135) {
            double v133 = -1.0;
          }
LABEL_211:
          double v191 = v133;
          if (*a3
            && (v133 >= 0.0
              ? (BOOL v136 = ((*(void *)&v133 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
              : (BOOL v136 = 1),
                v136 ? (BOOL v137 = *(void *)&v133 == 0) : (BOOL v137 = 1),
                v137))
          {
            sub_639E84(a4, &v186, (uint64_t *)v122, &v191, a3[4], (uint64_t)__dst, (uint64_t)&v192);
            unint64_t v138 = *(void *)(a6 + 8);
            if (v138 >= *(void *)(a6 + 16))
            {
              std::string::size_type v153 = sub_8CF4AC((void **)a6, (uint64_t)&v192);
              int v154 = SHIBYTE(v204);
              *(void *)(a6 + 8) = v153;
              if ((v154 & 0x80000000) == 0)
              {
LABEL_231:
                if ((SHIBYTE(v201) & 0x80000000) == 0) {
                  goto LABEL_232;
                }
                goto LABEL_247;
              }
              goto LABEL_237;
            }
            long long v139 = v192;
            long long v140 = v193;
            long long v141 = v194[0];
            *(_OWORD *)(v138 + 41) = *(_OWORD *)((char *)v194 + 9);
            *(_OWORD *)(v138 + 16) = v140;
            *(_OWORD *)(v138 + 32) = v141;
            *(_OWORD *)unint64_t v138 = v139;
            *(_DWORD *)(v138 + 96) = v198;
            if (v198 == 1)
            {
              uint64_t v160 = v195;
              *(void *)(v138 + 72) = 0;
              *(void *)(v138 + 64) = v160;
              *(void *)(v138 + 80) = 0;
              *(void *)(v138 + 88) = 0;
              unint64_t v161 = (const void *)v196;
              int64_t v162 = *((void *)&v196 + 1) - v196;
              if (*((void *)&v196 + 1) != (void)v196)
              {
                if (v162 < 0) {
                  sub_2E00();
                }
                uint64_t v163 = (char *)operator new(*((void *)&v196 + 1) - v196);
                *(void *)(v138 + 72) = v163;
                *(void *)(v138 + 80) = v163;
                uint64_t v164 = &v163[8 * (v162 >> 3)];
                *(void *)(v138 + 88) = v164;
                memcpy(v163, v161, v162);
                *(void *)(v138 + 80) = v164;
              }
            }
            else if (!v198)
            {
              *(void *)(v138 + 64) = v195;
              int v142 = (unsigned char *)(v138 + 72);
              if (SHIBYTE(v197) < 0)
              {
                sub_4200(v142, (void *)v196, *((unint64_t *)&v196 + 1));
              }
              else
              {
                long long v143 = v196;
                *(void *)(v138 + 88) = v197;
                *(_OWORD *)int v142 = v143;
              }
            }
            *(void *)(v138 + 104) = v199;
            long long v167 = v200;
            *(void *)(v138 + 128) = v201;
            *(_OWORD *)(v138 + 112) = v167;
            uint64_t v201 = 0;
            long long v200 = 0uLL;
            *(unsigned char *)(v138 + 136) = v202;
            long long v168 = v203;
            *(void *)(v138 + 160) = v204;
            *(_OWORD *)(v138 + 144) = v168;
            uint64_t v204 = 0;
            long long v203 = 0uLL;
            *(unsigned char *)(v138 + 168) = v205;
            *(void *)(a6 + 8) = v138 + 176;
            a3 = v175;
            if ((SHIBYTE(v201) & 0x80000000) == 0)
            {
LABEL_232:
              int v152 = v198;
              if (v198 != 1) {
                goto LABEL_233;
              }
              goto LABEL_248;
            }
          }
          else
          {
            sub_639E14(a4, &v186, (uint64_t *)v122, (uint64_t)__dst, (uint64_t)&v192);
            unint64_t v144 = *(void *)(a6 + 8);
            if (v144 >= *(void *)(a6 + 16))
            {
              uint64_t v150 = sub_8CF4AC((void **)a6, (uint64_t)&v192);
              int v151 = SHIBYTE(v204);
              *(void *)(a6 + 8) = v150;
              if ((v151 & 0x80000000) == 0) {
                goto LABEL_231;
              }
LABEL_237:
              operator delete((void *)v203);
              if ((SHIBYTE(v201) & 0x80000000) == 0) {
                goto LABEL_232;
              }
              goto LABEL_247;
            }
            long long v145 = v192;
            long long v146 = v193;
            long long v147 = v194[0];
            *(_OWORD *)(v144 + 41) = *(_OWORD *)((char *)v194 + 9);
            *(_OWORD *)(v144 + 16) = v146;
            *(_OWORD *)(v144 + 32) = v147;
            *(_OWORD *)unint64_t v144 = v145;
            *(_DWORD *)(v144 + 96) = v198;
            if (v198 == 1)
            {
              uint64_t v155 = v195;
              *(void *)(v144 + 72) = 0;
              *(void *)(v144 + 64) = v155;
              *(void *)(v144 + 80) = 0;
              *(void *)(v144 + 88) = 0;
              std::string::size_type v156 = (const void *)v196;
              int64_t v157 = *((void *)&v196 + 1) - v196;
              if (*((void *)&v196 + 1) != (void)v196)
              {
                if (v157 < 0) {
                  sub_2E00();
                }
                long long v158 = (char *)operator new(*((void *)&v196 + 1) - v196);
                *(void *)(v144 + 72) = v158;
                *(void *)(v144 + 80) = v158;
                int v159 = &v158[8 * (v157 >> 3)];
                *(void *)(v144 + 88) = v159;
                memcpy(v158, v156, v157);
                *(void *)(v144 + 80) = v159;
              }
            }
            else if (!v198)
            {
              *(void *)(v144 + 64) = v195;
              v148 = (unsigned char *)(v144 + 72);
              if (SHIBYTE(v197) < 0)
              {
                sub_4200(v148, (void *)v196, *((unint64_t *)&v196 + 1));
              }
              else
              {
                long long v149 = v196;
                *(void *)(v144 + 88) = v197;
                *(_OWORD *)v148 = v149;
              }
            }
            *(void *)(v144 + 104) = v199;
            long long v165 = v200;
            *(void *)(v144 + 128) = v201;
            *(_OWORD *)(v144 + 112) = v165;
            uint64_t v201 = 0;
            long long v200 = 0uLL;
            *(unsigned char *)(v144 + 136) = v202;
            long long v166 = v203;
            *(void *)(v144 + 160) = v204;
            *(_OWORD *)(v144 + 144) = v166;
            uint64_t v204 = 0;
            long long v203 = 0uLL;
            *(unsigned char *)(v144 + 168) = v205;
            *(void *)(a6 + 8) = v144 + 176;
            a3 = v175;
            if ((SHIBYTE(v201) & 0x80000000) == 0) {
              goto LABEL_232;
            }
          }
LABEL_247:
          operator delete((void *)v200);
          int v152 = v198;
          if (v198 != 1)
          {
LABEL_233:
            if (v152 || (SHIBYTE(v197) & 0x80000000) == 0) {
              goto LABEL_186;
            }
            uint64_t v124 = (void *)v196;
            goto LABEL_185;
          }
LABEL_248:
          uint64_t v124 = (void *)v196;
          if (!(void)v196) {
            goto LABEL_186;
          }
          *((void *)&v196 + 1) = v196;
LABEL_185:
          operator delete(v124);
LABEL_186:
          v122 += 12;
          if (v122 == v123)
          {
            unint64_t v122 = v177;
            goto LABEL_254;
          }
        }
      }
    }
  }
LABEL_256:
  std::string v169 = *(long long **)a6;
  size_t v170 = *(long long **)(a6 + 8);
  unint64_t v171 = 126 - 2 * __clz(0x2E8BA2E8BA2E8BA3 * (((uint64_t)v170 - *(void *)a6) >> 4));
  BOOL v7 = v170 == *(long long **)a6;
  *(void *)&long long v192 = &v181;
  if (v7) {
    uint64_t v172 = 0;
  }
  else {
    uint64_t v172 = v171;
  }
  sub_8D2610(v169, v170, (unsigned int **)&v192, v172, 1);
  if (SHIBYTE(v180) < 0) {
    operator delete(__dst[0]);
  }
  if (v184)
  {
    uint64_t v185 = v184;
    operator delete(v184);
  }
}

void sub_8CBE78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,_Unwind_Exception *exception_objecta,uint64_t a36)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_8CBFB0(uint64_t *a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unsigned char *a5@<X4>, uint64_t *a6@<X8>)
{
  if (sub_46C760(a2) > a4)
  {
    uint64_t v12 = sub_4A5E10(a2 + 133, a3);
    uint64_t v13 = v12;
    if (*(void *)(v12 + 56) == -1) {
      uint64_t v14 = *(void *)(v12 + 40);
    }
    else {
      uint64_t v14 = *(void *)(v12 + 56);
    }
    uint64_t v15 = sub_46C8EC(a2, a4);
    unint64_t v16 = (int *)sub_2D5D58(a1[1], *(unsigned int *)(v15 + 32) | ((unint64_t)*(unsigned __int16 *)(v15 + 36) << 32));
    unsigned int v17 = (unsigned __int16 *)((char *)v16 - *v16);
    if (*v17 >= 0xBu && (uint64_t v18 = v17[5]) != 0 && (*((unsigned char *)v16 + v18 + 3) & 4) != 0)
    {
      int v22 = 1;
    }
    else
    {
      uint64_t v19 = *(int **)(v15 + 8);
      if (!v19 || (v20 = (unsigned __int16 *)((char *)v19 - *v19), *v20 < 0x11u) || (uint64_t v21 = v20[8]) == 0)
      {
        int v53 = 0;
LABEL_15:
        if (*(void *)(a1[2] + 1880) >= *(void *)(v13 + 872)) {
          uint64_t v23 = (void *)(v13 + 872);
        }
        else {
          uint64_t v23 = (void *)(a1[2] + 1880);
        }
        int v51 = a4;
        if ((int)a4 < (int)v14)
        {
LABEL_19:
          if (v51 + 1 < *(_DWORD *)(v13 + 24))
          {
            uint64_t v24 = 0;
            int64_t v25 = v51 + 1;
            do
            {
              if (v24 > *v23) {
                break;
              }
              uint64_t v26 = (int **)sub_46C8EC(a2, v25);
              *(void *)&v56[0] = v25;
              sub_8CADD4((uint64_t)a1, v26, a5, v56, 0, (uint64_t)a6);
              if (*a6 != a6[1]) {
                return;
              }
              uint64_t v28 = sub_46CCC8(a2, v25, v27);
              if (*a6)
              {
                sub_52F808(a6);
                operator delete((void *)*a6);
              }
              v24 += v28;
              ++v25;
            }
            while (v25 < *(int *)(v13 + 24));
          }
          goto LABEL_26;
        }
        uint64_t v29 = 0;
        int64_t v30 = v51;
        int64_t v52 = (int)v14;
        while (1)
        {
          if (v29 > *v23) {
            goto LABEL_19;
          }
          uint64_t v31 = sub_46C8EC(a2, v30);
          uint64_t v32 = *(void *)(v31 + 32);
          long long v33 = *(_OWORD *)(v31 + 16);
          v56[0] = *(_OWORD *)v31;
          v56[1] = v33;
          uint64_t v57 = v32;
          if (v30 != v51) {
            break;
          }
LABEL_68:
          uint64_t v54 = (uint64_t *)v30;
          sub_8CADD4((uint64_t)a1, (int **)v56, a5, &v54, 0, (uint64_t)a6);
          if (*a6 != a6[1]) {
            return;
          }
          uint64_t v50 = sub_46CCC8(a2, v30, v49);
          if (*a6)
          {
            sub_52F808(a6);
            operator delete((void *)*a6);
          }
          v29 += v50;
          BOOL v39 = v30-- <= v52;
          if (v39) {
            goto LABEL_19;
          }
        }
        sub_6A48E0(*a1, (uint64_t)v56, 0, &v54);
        uint64_t v34 = *v54;
        uint64_t v35 = v54[1];
        if (*v54 != v35)
        {
          while (1)
          {
            if (*(unsigned char *)(v34 + 185) && *(unsigned char *)(v34 + 186) == 0)
            {
              int v37 = *(_DWORD *)(v34 + 24);
              if (v37 != 3 && v37 != 0) {
                break;
              }
            }
            v34 += 192;
            if (v34 == v35) {
              goto LABEL_51;
            }
          }
        }
        BOOL v39 = v34 == v35 || v29 < *(void *)(a1[2] + 1888);
        int v40 = v39;
        if (((v40 | v53) & 1) == 0)
        {
          char v47 = 0;
          int v53 = 0;
          unsigned int v48 = v55;
          if (!v55) {
            goto LABEL_67;
          }
          goto LABEL_65;
        }
LABEL_51:
        uint64_t v41 = (int *)sub_2D5D58(a1[1], v57 | ((unint64_t)WORD2(v57) << 32));
        unsigned int v42 = (unsigned __int16 *)((char *)v41 - *v41);
        if (*v42 < 0xBu || (uint64_t v43 = v42[5]) == 0 || (*((unsigned char *)v41 + v43 + 3) & 4) == 0)
        {
          int v44 = DWORD2(v56[0]);
          if (*((void *)&v56[0] + 1))
          {
            BOOL v45 = (unsigned __int16 *)(*((void *)&v56[0] + 1) - (int)**((_DWORD **)&v56[0] + 1));
            if (*v45 >= 0x11u)
            {
              uint64_t v46 = v45[8];
              if (v46)
              {
                v53 &= (*(unsigned __int16 *)(*((void *)&v56[0] + 1) + v46) >> 2) & 1;
                char v47 = 1;
                unsigned int v48 = v55;
                if (!v55) {
                  goto LABEL_67;
                }
                goto LABEL_65;
              }
            }
            int v44 = 0;
          }
          v53 &= v44;
          char v47 = 1;
          unsigned int v48 = v55;
          if (!v55) {
            goto LABEL_67;
          }
          goto LABEL_65;
        }
        v53 &= 1u;
        char v47 = 1;
        unsigned int v48 = v55;
        if (!v55) {
          goto LABEL_67;
        }
LABEL_65:
        if (!atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
LABEL_67:
        if ((v47 & 1) == 0) {
          goto LABEL_19;
        }
        goto LABEL_68;
      }
      int v22 = (*(unsigned __int16 *)((char *)v19 + v21) >> 2) & 1;
    }
    int v53 = v22;
    goto LABEL_15;
  }
LABEL_26:
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
}

void sub_8CC3E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_14A84((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_8CC3FC(_Unwind_Exception *a1)
{
  sub_63A3EC(v1);
  _Unwind_Resume(a1);
}

void sub_8CC410(_Unwind_Exception *a1)
{
  sub_63A3EC(v1);
  _Unwind_Resume(a1);
}

void sub_8CC424(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X3>, int *a5@<X4>, void *a6@<X8>)
{
  uint64_t v10 = sub_46C8EC(a2, *a3);
  sub_8CC8B8(a1, v10, (uint64_t)v53);
  if (v54) {
    BOOL v11 = *(void *)&v53[0] == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11 || *((void *)&v53[0] + 1) == 0)
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    return;
  }
  uint64_t v13 = (unsigned __int16 *)(*(void *)&v53[0] - (int)**(_DWORD **)&v53[0]);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0) {
    uint64_t v15 = *(unsigned int *)(*(void *)&v53[0] + v14);
  }
  else {
    uint64_t v15 = 0;
  }
  v51[0] = 0;
  v51[1] = 0;
  uint64_t v52 = 0;
  uint64_t v16 = a1[2];
  uint64_t v17 = *(void *)(v16 + 1584);
  uint64_t v18 = *(void *)(v16 + 1592);
  if (v17 <= v18) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = v17;
  }
  int v48 = *a5;
  char v50 = HIBYTE(*((_WORD *)a5 + 2));
  BYTE2(v48) = 0;
  LOBYTE(v48) = 0;
  char v49 = 0;
LABEL_19:
  if (v15 <= v19)
  {
    sub_6A48E0(*a1, (uint64_t)v53, 0, &v46);
    uint64_t v21 = *v46;
    uint64_t v20 = v46[1];
    if (*v46 != v20)
    {
      while (1)
      {
        if (*(unsigned char *)(v21 + 185) && *(unsigned char *)(v21 + 186) == 0)
        {
          int v23 = *(_DWORD *)(v21 + 24);
          if (v23 != 3 && v23 != 0) {
            break;
          }
        }
        v21 += 192;
        if (v21 == v20)
        {
          uint64_t v21 = v46[1];
          break;
        }
      }
    }
    *(void *)&v42[0] = *a4;
    sub_8CADD4((uint64_t)a1, (int **)v53, &v48, v42, 1, (uint64_t)&__p);
    if (__p == v45) {
      goto LABEL_42;
    }
    int64_t v25 = (void **)__p;
    while (1)
    {
      int v26 = *((_DWORD *)v25 + 2);
      if (v26 == 2)
      {
        if (v15 <= *(void *)(a1[2] + 1592)) {
          goto LABEL_41;
        }
      }
      else if (v26 == 1 && v15 <= *(void *)(a1[2] + 1584))
      {
LABEL_41:
        sub_5A0D34((uint64_t *)v51, (uint64_t)__p, (uint64_t)v45, 0x2E8BA2E8BA2E8BA3 * (((char *)v45 - (unsigned char *)__p) >> 4));
LABEL_42:
        if (v21 == v46[1])
        {
          sub_8CC8B8(a1, (uint64_t)v53, (uint64_t)v42);
          v53[0] = v42[0];
          v53[1] = v42[1];
          uint64_t v54 = v43;
          int v27 = 3;
          if (v43 && *(void *)&v53[0] && *((void *)&v53[0] + 1))
          {
            uint64_t v28 = (unsigned __int16 *)(*(void *)&v53[0] - (int)**(_DWORD **)&v53[0]);
            if (*v28 >= 9u && (uint64_t v29 = v28[4]) != 0) {
              uint64_t v30 = *(unsigned int *)(*(void *)&v53[0] + v29);
            }
            else {
              uint64_t v30 = 0;
            }
            int v27 = 0;
            v15 += v30;
          }
        }
        else
        {
          *(_OWORD *)a6 = *(_OWORD *)v51;
          a6[2] = v52;
          v51[1] = 0;
          uint64_t v52 = 0;
          v51[0] = 0;
          int v27 = 1;
        }
        uint64_t v31 = (void **)__p;
        if (__p)
        {
          uint64_t v32 = v45;
          long long v33 = __p;
          if (v45 == __p)
          {
LABEL_68:
            BOOL v45 = v31;
            operator delete(v33);
            goto LABEL_69;
          }
          while (2)
          {
            if (*((char *)v32 - 9) < 0)
            {
              operator delete(*(v32 - 4));
              if (*((char *)v32 - 41) < 0) {
                goto LABEL_64;
              }
LABEL_59:
              int v34 = *((_DWORD *)v32 - 20);
              if (v34 != 1) {
                goto LABEL_60;
              }
LABEL_65:
              uint64_t v35 = *(v32 - 13);
              if (v35)
              {
                *(v32 - 12) = v35;
LABEL_55:
                operator delete(v35);
              }
            }
            else
            {
              if ((*((char *)v32 - 41) & 0x80000000) == 0) {
                goto LABEL_59;
              }
LABEL_64:
              operator delete(*(v32 - 8));
              int v34 = *((_DWORD *)v32 - 20);
              if (v34 == 1) {
                goto LABEL_65;
              }
LABEL_60:
              if (!v34 && *((char *)v32 - 81) < 0)
              {
                uint64_t v35 = *(v32 - 13);
                goto LABEL_55;
              }
            }
            v32 -= 22;
            if (v32 == v31)
            {
              long long v33 = __p;
              goto LABEL_68;
            }
            continue;
          }
        }
LABEL_69:
        int v36 = v47;
        if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
        if (v27)
        {
          if (v27 != 3) {
            goto LABEL_74;
          }
          break;
        }
        goto LABEL_19;
      }
      v25 += 22;
      if (v25 == v45) {
        goto LABEL_42;
      }
    }
  }
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
LABEL_74:
  int v37 = (void **)v51[0];
  if (v51[0])
  {
    uint64_t v38 = (void **)v51[1];
    BOOL v39 = v51[0];
    if (v51[1] == v51[0])
    {
LABEL_90:
      v51[1] = v37;
      operator delete(v39);
      return;
    }
    while (1)
    {
      if (*((char *)v38 - 9) < 0)
      {
        operator delete(*(v38 - 4));
        if ((*((char *)v38 - 41) & 0x80000000) == 0)
        {
LABEL_81:
          int v40 = *((_DWORD *)v38 - 20);
          if (v40 != 1) {
            goto LABEL_82;
          }
          goto LABEL_87;
        }
      }
      else if ((*((char *)v38 - 41) & 0x80000000) == 0)
      {
        goto LABEL_81;
      }
      operator delete(*(v38 - 8));
      int v40 = *((_DWORD *)v38 - 20);
      if (v40 != 1)
      {
LABEL_82:
        if (v40 || (*((char *)v38 - 81) & 0x80000000) == 0) {
          goto LABEL_78;
        }
        uint64_t v41 = *(v38 - 13);
        goto LABEL_77;
      }
LABEL_87:
      uint64_t v41 = *(v38 - 13);
      if (!v41) {
        goto LABEL_78;
      }
      *(v38 - 12) = v41;
LABEL_77:
      operator delete(v41);
LABEL_78:
      v38 -= 22;
      if (v38 == v37)
      {
        BOOL v39 = v51[0];
        goto LABEL_90;
      }
    }
  }
}

void sub_8CC860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  sub_63A3EC((uint64_t *)va);
  sub_14A84((uint64_t)va1);
  sub_63A3EC((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void sub_8CC888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_63A3EC((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_8CC8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_63A3EC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_8CC8B8(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_6A48E0(*a1, a2, 0, (uint64_t **)&v21);
  uint64_t v5 = *v21;
  uint64_t v6 = (uint64_t)v21[1];
  if (*v21 != (uint64_t *)v6)
  {
    while (1)
    {
      if (*((unsigned char *)v5 + 185))
      {
        int v7 = *((_DWORD *)v5 + 6);
        if (!v7 || v7 == 3) {
          break;
        }
      }
      v5 += 24;
      if (v5 == (uint64_t *)v6) {
        goto LABEL_16;
      }
    }
  }
  if (v5 == (uint64_t *)v6 || (v10 = *v5, uint64_t v9 = v5[1], v10 == v9))
  {
LABEL_16:
    *(_DWORD *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_WORD *)(a3 + 36) = -1;
    *(unsigned char *)(a3 + 38) = 0;
    uint64_t v17 = v22;
    if (!v22) {
      return;
    }
    goto LABEL_22;
  }
  uint64_t v11 = a1[1];
  uint64_t v12 = *(void *)(v9 - 8);
  uint64_t v13 = sub_2D5D58(v11, v12 & 0xFFFFFFFFFFFFLL);
  if (*(unsigned char *)(v11 + 7772))
  {
    uint64_t v14 = sub_2DB8E0(v11 + 3896, v12, 0);
    uint64_t v15 = &v14[-*(int *)v14];
    if (*(unsigned __int16 *)v15 < 5u)
    {
      uint64_t v16 = 0;
    }
    else
    {
      uint64_t v16 = *((unsigned __int16 *)v15 + 2);
      if (v16) {
        v16 += (uint64_t)&v14[*(unsigned int *)&v14[v16]];
      }
    }
    uint64_t v18 = v16 + 4 * WORD2(v12) + 4 + *(unsigned int *)(v16 + 4 * WORD2(v12) + 4);
  }
  else
  {
    uint64_t v18 = 0;
  }
  uint64_t v19 = sub_2E5C38(v11, v12 & 0xFFFFFFFFFFFFLL, 1);
  *(void *)a3 = v13;
  *(void *)(a3 + 8) = v18;
  *(void *)(a3 + 16) = v19;
  *(void *)(a3 + 24) = v20;
  *(_DWORD *)(a3 + 32) = v12;
  *(_WORD *)(a3 + 36) = WORD2(v12);
  *(unsigned char *)(a3 + 38) = (v12 & 0xFF000000000000) != 0;
  uint64_t v17 = v22;
  if (v22)
  {
LABEL_22:
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_8CCA7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_8CCA90(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(void *)(a3 + 16) == -1) {
    uint64_t v8 = *(void *)(a3 + 24) - 1;
  }
  else {
    uint64_t v8 = *(void *)(a3 + 16);
  }
  uint64_t v9 = (int **)sub_46C8EC(a2, v8);
  unint64_t v88 = v9;
  uint64_t v89 = a1;
  uint64_t v10 = (unsigned __int16 *)((char *)*v9 - **v9);
  if (*v10 >= 0xDu && (uint64_t v11 = v10[6]) != 0) {
    unsigned int v12 = *(unsigned __int16 *)((char *)*v9 + v11);
  }
  else {
    unsigned int v12 = 0;
  }
  uint64_t v13 = v12;
  uint64_t v14 = sub_290DEC(*(void *)(a1 + 8) + 3896, 1u, 0);
  uint64_t v15 = &v14[-*(int *)v14];
  if (*(unsigned __int16 *)v15 < 0xBu)
  {
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v16 = *((unsigned __int16 *)v15 + 5);
    if (v16) {
      v16 += (uint64_t)&v14[*(unsigned int *)&v14[v16]];
    }
  }
  uint64_t v17 = (int *)(v16 + 4 * v13 + 4 + *(unsigned int *)(v16 + 4 * v13 + 4));
  uint64_t v18 = (unsigned __int16 *)((char *)v17 - *v17);
  if (*v18 < 5u || (uint64_t v19 = v18[2]) == 0)
  {
    HIBYTE(v108) = 0;
    LOBYTE(__dst[0]) = 0;
    goto LABEL_24;
  }
  uint64_t v20 = (unsigned int *)((char *)v17 + v19);
  uint64_t v21 = *v20;
  int v23 = (char *)v20 + v21 + 4;
  size_t v22 = *(unsigned int *)((char *)v20 + v21);
  if (v22 >= 0x17)
  {
    if ((v22 | 7) == 0x17) {
      uint64_t v25 = (v22 & 0xFFFFFFF8) + 8;
    }
    else {
      uint64_t v25 = v22 | 7;
    }
    uint64_t v24 = (void **)operator new(v25 + 1);
    __dst[1] = (void *)v22;
    uint64_t v108 = v25 - 0x7FFFFFFFFFFFFFFFLL;
    __dst[0] = v24;
  }
  else
  {
    HIBYTE(v108) = *(unsigned int *)((char *)v20 + v21);
    uint64_t v24 = __dst;
    if (!v22) {
      goto LABEL_23;
    }
  }
  memcpy(v24, v23, v22);
LABEL_23:
  *((unsigned char *)v24 + v22) = 0;
LABEL_24:
  int v26 = *v88;
  int v27 = (unsigned __int16 *)((char *)*v88 - **v88);
  unsigned int v28 = *v27;
  if (v28 < 0x2F || !v27[23]) {
    goto LABEL_40;
  }
  unsigned int v29 = *((unsigned __int8 *)v26 + v27[23]);
  BOOL v30 = v29 > 0x2F;
  uint64_t v31 = (1 << v29) & 0xE2E040048000;
  if (v30 || v31 == 0) {
    goto LABEL_40;
  }
  if (!*((unsigned char *)v88 + 38))
  {
    if (v28 < 0x4D) {
      goto LABEL_44;
    }
    uint64_t v34 = v27[38];
    if (!v34 || (*((unsigned char *)v26 + v34) & 4) == 0 && (*(int *)((char *)v26 + v34) & 1) == 0) {
      goto LABEL_44;
    }
LABEL_40:
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(unsigned char *)a4 = 1;
    *(void *)(a4 + 8) = -1;
    *(void *)(a4 + 16) = -1;
    *(void *)(a4 + 24) = 0x7FFFFFFFFFFFFFFFLL;
    *(void *)(a4 + 80) = 0;
    *(void *)(a4 + 88) = 0xBFF0000000000000;
    *(void *)(a4 + 96) = 0;
    goto LABEL_41;
  }
  if (v28 >= 0x4D)
  {
    uint64_t v33 = v27[38];
    if (v33)
    {
      if ((*((unsigned char *)v26 + v33) & 8) != 0 || (*(int *)((char *)v26 + v33) & 2) != 0) {
        goto LABEL_40;
      }
    }
  }
LABEL_44:
  unint64_t v35 = sub_2E4738(v88);
  uint64_t v36 = *(void *)(v89 + 8);
  sub_2D5904(v36, (unsigned int *)v35, 0, (char **)(v36 + 7800));
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  int v106 = 0;
  int v37 = *(unsigned char **)(v36 + 7800);
  uint64_t v38 = *(unsigned char **)(v36 + 7808);
  uint64_t v39 = v38 - v37;
  if (v38 == v37)
  {
    int v40 = 0;
LABEL_105:
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(unsigned char *)a4 = 1;
    *(void *)(a4 + 8) = -1;
    *(void *)(a4 + 16) = -1;
    *(void *)(a4 + 24) = 0x7FFFFFFFFFFFFFFFLL;
    *(void *)(a4 + 80) = 0;
    *(void *)(a4 + 88) = 0xBFF0000000000000;
    *(void *)(a4 + 96) = 0;
    if (v40) {
      goto LABEL_106;
    }
    goto LABEL_41;
  }
  if (v39 < 0) {
    sub_2E00();
  }
  uint64_t v84 = a3;
  int v40 = (char *)operator new(v38 - v37);
  unint64_t v85 = HIDWORD(v35);
  int v86 = v35;
  uint64_t v87 = 8 * (v39 >> 3);
  uint64_t v104 = v40;
  int v106 = &v40[v87];
  memcpy(v40, v37, v39 - 1);
  uint64_t v41 = 0;
  uint64_t v105 = &v40[v87];
  while (1)
  {
    unint64_t v42 = (unint64_t)v88[4];
    if (__PAIR64__(*(unsigned __int16 *)&v40[v41 + 4], *(_DWORD *)&v40[v41]) == __PAIR64__(WORD2(v42), v42)
      && (HIWORD(v42) & 1) != (v40[v41 + 6] == 0))
    {
      goto LABEL_48;
    }
    uint64_t v43 = *(void *)(v89 + 8);
    uint64_t v44 = *(void *)&v40[v41];
    BOOL v45 = (int *)sub_2D5D58(v43, v44 & 0xFFFFFFFFFFFFLL);
    if (*(unsigned char *)(v43 + 7772))
    {
      uint64_t v46 = sub_2DB8E0(v43 + 3896, v44, 0);
      char v47 = &v46[-*(int *)v46];
      if (*(unsigned __int16 *)v47 < 5u)
      {
        uint64_t v48 = 0;
      }
      else
      {
        uint64_t v48 = *((unsigned __int16 *)v47 + 2);
        if (v48) {
          v48 += (uint64_t)&v46[*(unsigned int *)&v46[v48]];
        }
      }
      uint64_t v49 = v48 + 4 * WORD2(v44) + 4 + *(unsigned int *)(v48 + 4 * WORD2(v44) + 4);
    }
    else
    {
      uint64_t v49 = 0;
    }
    uint64_t v50 = sub_2E5C38(v43, v44 & 0xFFFFFFFFFFFFLL, 1);
    long long v97 = v45;
    long long v98 = (int *)v49;
    uint64_t v99 = v50;
    uint64_t v100 = v51;
    int v101 = v44;
    __int16 v102 = WORD2(v44);
    BOOL v103 = (v44 & 0xFF000000000000) != 0;
    uint64_t v52 = *(void *)(v89 + 8);
    uint64_t v53 = *(void *)&v40[v41];
    uint64_t v54 = (int *)sub_2D5D58(v52, v53 & 0xFFFFFFFFFFFFLL);
    if (*(unsigned char *)(v52 + 7772))
    {
      unsigned int v55 = sub_2DB8E0(v52 + 3896, v53, 0);
      BOOL v56 = &v55[-*(int *)v55];
      if (*(unsigned __int16 *)v56 < 5u)
      {
        uint64_t v57 = 0;
      }
      else
      {
        uint64_t v57 = *((unsigned __int16 *)v56 + 2);
        if (v57) {
          v57 += (uint64_t)&v55[*(unsigned int *)&v55[v57]];
        }
      }
      int v58 = (int *)(v57
                  + 4 * (unsigned __int16)((v53 ^ 0x1000000000000uLL) >> 32)
                  + 4
                  + *(unsigned int *)(v57 + 4 * (unsigned __int16)((v53 ^ 0x1000000000000uLL) >> 32) + 4));
    }
    else
    {
      int v58 = 0;
    }
    char v59 = (int *)sub_2E5C38(v52, v53 & 0xFFFFFFFFFFFFLL, 1);
    v93[0] = v54;
    v93[1] = v58;
    v93[2] = v59;
    v93[3] = v60;
    int v94 = v53;
    __int16 v95 = (v53 ^ 0x1000000000000uLL) >> 32;
    BOOL v96 = ((v53 ^ 0x1000000000000) & 0xFF000000000000) != 0;
    BOOL v61 = (unsigned __int16 *)((char *)v97 - *v97);
    unsigned int v62 = *v61;
    if (v62 >= 0xB)
    {
      if (v61[5])
      {
        int v63 = *(int *)((char *)v97 + v61[5]);
        if ((v63 ^ ((v63 & 2) >> 1))) {
          goto LABEL_48;
        }
      }
    }
    if (v98)
    {
      BOOL v64 = (unsigned __int16 *)((char *)v98 - *v98);
      if (*v64 >= 0x11u)
      {
        uint64_t v65 = v64[8];
        if (v65)
        {
          if ((*(_WORD *)((unsigned char *)v98 + v65) & 4) != 0) {
            goto LABEL_48;
          }
        }
      }
    }
    if (v103)
    {
      if (v62 < 0x4D) {
        goto LABEL_82;
      }
      unsigned int v66 = v61[38];
      if (!v66 || (*(int *)((char *)v97 + v66) & 8) == 0) {
        goto LABEL_82;
      }
    }
    else
    {
      if (v62 < 0x4D) {
        goto LABEL_82;
      }
      unsigned int v67 = v61[38];
      if (!v67 || (*(int *)((char *)v97 + v67) & 4) == 0) {
        goto LABEL_82;
      }
    }
    unint64_t v68 = sub_2E4738(&v97);
    if (v68 == v86)
    {
      BOOL v69 = HIDWORD(v68) == v85;
      goto LABEL_83;
    }
LABEL_82:
    BOOL v69 = 0;
LABEL_83:
    long long v70 = (unsigned __int16 *)((char *)v93[0] - *v93[0]);
    unsigned int v71 = *v70;
    if (!v96) {
      break;
    }
    if (v71 >= 0x4D)
    {
      unsigned int v72 = v70[38];
      if (v72)
      {
        if ((*(int *)((char *)v93[0] + v72) & 8) != 0) {
          goto LABEL_91;
        }
      }
    }
LABEL_47:
    if (v69) {
      goto LABEL_93;
    }
LABEL_48:
    v41 += 8;
    if (v87 == v41) {
      goto LABEL_105;
    }
  }
  if (v71 < 0x4D) {
    goto LABEL_47;
  }
  unsigned int v73 = v70[38];
  if (!v73 || (*(int *)((char *)v93[0] + v73) & 4) == 0) {
    goto LABEL_47;
  }
LABEL_91:
  unint64_t v74 = sub_2E4738(v93);
  if (v74 != v86) {
    goto LABEL_47;
  }
  if (!v69 && HIDWORD(v74) != v85) {
    goto LABEL_48;
  }
LABEL_93:
  uint64_t v75 = *(void *)(v84 + 16);
  if (v75 == -1) {
    uint64_t v75 = *(void *)(v84 + 24) - 1;
  }
  uint64_t v92 = v75;
  sub_2954EC(*(void *)(v89 + 8), (uint64_t)v88[4], (uint64_t)v109);
  int v76 = __p;
  if (__p == v111)
  {
    int v80 = 0x7FFFFFFF;
    unint64_t v81 = 0xFFFFFFFF00000000;
    uint64_t v82 = 0xFFFFFFFFLL;
    if (__p)
    {
LABEL_97:
      int64_t v111 = v76;
      operator delete(v76);
    }
  }
  else
  {
    unint64_t v77 = sub_2E40A4((uint64_t)v109);
    unsigned int v78 = v77;
    int v80 = v79;
    unint64_t v81 = v77 & 0xFFFFFFFF00000000;
    int v76 = __p;
    uint64_t v82 = v78;
    if (__p) {
      goto LABEL_97;
    }
  }
  unint64_t v90 = v81 | v82;
  int v91 = v80;
  sub_639BF8(&v92, (uint64_t *)&v90, (uint64_t)__dst, 0, (uint64_t)v112);
  sub_63A428(a4, (uint64_t)v112);
  if (v120 < 0)
  {
    operator delete(v119);
    if (v118 < 0) {
      goto LABEL_110;
    }
LABEL_100:
    int v83 = v116;
    if (v116 != 1) {
      goto LABEL_101;
    }
LABEL_111:
    if (v113)
    {
      uint64_t v114 = v113;
      operator delete(v113);
    }
  }
  else
  {
    if ((v118 & 0x80000000) == 0) {
      goto LABEL_100;
    }
LABEL_110:
    operator delete(v117);
    int v83 = v116;
    if (v116 == 1) {
      goto LABEL_111;
    }
LABEL_101:
    if (!v83 && v115 < 0) {
      operator delete(v113);
    }
  }
LABEL_106:
  uint64_t v105 = v40;
  operator delete(v40);
LABEL_41:
  if (SHIBYTE(v108) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_8CD25C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *__p,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  if (__p) {
    operator delete(__p);
  }
  operator delete(v42);
  if ((a36 & 0x80000000) == 0) {
    _Unwind_Resume(a1);
  }
  operator delete(a31);
  _Unwind_Resume(a1);
}

uint64_t sub_8CD2FC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, _DWORD *a6)
{
  uint64_t result = sub_51690C((void *)(a3 + 1064), a2);
  if (*(void *)(result + 40) != -1 && *(void *)(result + 872) != 0)
  {
    uint64_t v12 = result;
    if ((sub_63A7D8(a4) > 1 || *(void *)(a4 + 80) == 1) && *a5 != -1) {
      *(_DWORD *)(a4 + 16) = (*a5)++;
    }
    uint64_t result = sub_63A4A4(a4);
    if (result)
    {
      if ((*(_DWORD *)(a4 + 4) - 1) <= 1)
      {
        long long v13 = *(_OWORD *)a4;
        *(_OWORD *)(v12 + 1912) = *(_OWORD *)(a4 + 16);
        *(_OWORD *)(v12 + 1896) = v13;
        if (v12 + 1896 != a4) {
          sub_5A0D34((uint64_t *)(v12 + 1928), *(void *)(a4 + 32), *(void *)(a4 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a4 + 40) - *(void *)(a4 + 32)) >> 4));
        }
        long long v14 = *(_OWORD *)(a4 + 56);
        long long v15 = *(_OWORD *)(a4 + 72);
        *(_OWORD *)(v12 + 1977) = *(_OWORD *)(a4 + 81);
        *(_OWORD *)(v12 + 1968) = v15;
        *(_OWORD *)(v12 + 1952) = v14;
      }
      unint64_t v16 = *(void *)(a3 + 10184);
      if (v16 >= *(void *)(a3 + 10192))
      {
        uint64_t v20 = sub_7DC95C((void **)(a3 + 10176), a4);
      }
      else
      {
        long long v17 = *(_OWORD *)(a4 + 16);
        *(_OWORD *)unint64_t v16 = *(_OWORD *)a4;
        *(_OWORD *)(v16 + 16) = v17;
        sub_597D64((void *)(v16 + 32), (uint64_t *)(a4 + 32));
        long long v18 = *(_OWORD *)(a4 + 56);
        long long v19 = *(_OWORD *)(a4 + 72);
        *(_OWORD *)(v16 + 81) = *(_OWORD *)(a4 + 81);
        *(_OWORD *)(v16 + 72) = v19;
        *(_OWORD *)(v16 + 56) = v18;
        uint64_t v20 = (char *)(v16 + 104);
        *(void *)(a3 + 10184) = v16 + 104;
      }
      *(void *)(a3 + 10184) = v20;
      *a6 += sub_63A7FC(a4);
      uint64_t result = sub_63A810(a4);
      a6[1] += result;
    }
  }
  return result;
}

void sub_8CD49C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 10184) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_8CD4A4(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_4A5E10(a2 + 133, a3);
  uint64_t v10 = (uint64_t *)(v7 + 80);
  unint64_t v9 = *(void *)(v7 + 80);
  if (v9 == -1)
  {
    uint64_t v11 = 0;
    uint64_t v10 = (uint64_t *)(v7 + 16);
  }
  else
  {
    uint64_t v11 = *(void *)(v7 + 88) - sub_46CCC8(a2, v9, v8);
  }
  uint64_t v12 = sub_46CE10(a2, *(void *)(a4 + 8), 0, *v10, 1u, v8);
  if (!sub_63AA60(a4))
  {
    uint64_t v18 = 0;
    return v12 + v11 + v18;
  }
  long long v13 = (char **)sub_46C8EC(a2, *(void *)(a4 + 8));
  sub_2954EC(*(void *)(a1 + 8), (uint64_t)v13[4], (uint64_t)v23);
  uint64_t v28 = 0x7FEFFFFFFFFFFFFFLL;
  unsigned int v29 = (double *)(a4 + 20);
  uint64_t v26 = -1;
  int v27 = 0x7FFFFFFF;
  BOOL v30 = &v28;
  uint64_t v31 = (double *)&v26;
  sub_77F46C((uint64_t)v23, (uint64_t)&v29);
  double v34 = 0.0;
  double v35 = 0.0;
  uint64_t v33 = 0x7FEFFFFFFFFFFFFFLL;
  unsigned int v29 = (double *)&v26;
  BOOL v30 = &v33;
  uint64_t v31 = &v34;
  uint64_t v32 = &v35;
  sub_77F6DC((uint64_t)v23, &v29);
  double v14 = 0.0;
  double v15 = 0.0;
  if (v35 == 0.0)
  {
    unint64_t v16 = *v13;
    long long v17 = &(*v13)[-*(int *)*v13];
    if (*(unsigned __int16 *)v17 < 9u) {
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  double v15 = v34 / v35;
  if (v34 / v35 > 1.0) {
    double v15 = 1.0;
  }
  unint64_t v16 = *v13;
  long long v17 = &(*v13)[-*(int *)*v13];
  if (*(unsigned __int16 *)v17 >= 9u)
  {
LABEL_12:
    uint64_t v19 = *((unsigned __int16 *)v17 + 4);
    if (v19)
    {
      LODWORD(v14) = *(_DWORD *)&v16[v19];
      double v14 = (double)*(unint64_t *)&v14;
    }
  }
LABEL_14:
  double v20 = (1.0 - v15) * v14;
  if (v20 >= 0.0)
  {
    if (v20 >= 4.50359963e15) {
      goto LABEL_22;
    }
    uint64_t v21 = (uint64_t)(v20 + v20) + 1;
  }
  else
  {
    if (v20 <= -4.50359963e15) {
      goto LABEL_22;
    }
    uint64_t v21 = (uint64_t)(v20 + v20);
    if (v21 >= 1) {
      --v21;
    }
  }
  double v20 = (double)(v21 >> 1);
LABEL_22:
  uint64_t v18 = (uint64_t)v20;
  if (__p)
  {
    uint64_t v25 = __p;
    operator delete(__p);
  }
  return v12 + v11 + v18;
}

void sub_8CD6B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_8CD6CC(uint64_t a1@<X0>, int **a2@<X1>, unsigned char *a3@<X2>, void *a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  if (*((_DWORD *)a2 + 8)) {
    BOOL v7 = *a2 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7 || a2[1] == 0)
  {
    *(void *)a6 = 0;
    *(void *)(a6 + 8) = 0;
    *(void *)(a6 + 16) = 0;
    return;
  }
  long long v13 = (uint64_t *)(a1 + 8);
  double v14 = (uint64_t *)(a2 + 4);
  sub_2954EC(*(void *)(a1 + 8), (uint64_t)a2[4], (uint64_t)v183);
  sub_2954EC(*v13, *v14, (uint64_t)&v192);
  double v15 = (void *)*((void *)&v192 + 1);
  if (*((void *)&v192 + 1) == (void)v193)
  {
    unint64_t v18 = 0xFFFFFFFF00000000;
    int v21 = 0x7FFFFFFF;
    uint64_t v19 = 0xFFFFFFFFLL;
    if (!*((void *)&v192 + 1)) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  unint64_t v16 = sub_2E40A4((uint64_t)&v192);
  unsigned int v17 = v16;
  unint64_t v18 = v16 & 0xFFFFFFFF00000000;
  double v15 = (void *)*((void *)&v192 + 1);
  uint64_t v19 = v17;
  int v21 = v20;
  if (*((void *)&v192 + 1))
  {
LABEL_12:
    *(void *)&long long v193 = v15;
    operator delete(v15);
  }
LABEL_13:
  unint64_t v181 = v18 | v19;
  int v182 = v21;
  size_t v22 = (unsigned __int16 *)((char *)*a2 - **a2);
  char v175 = a3;
  if (*v22 >= 0xDu && (uint64_t v23 = v22[6]) != 0) {
    unsigned int v24 = *(unsigned __int16 *)((char *)*a2 + v23);
  }
  else {
    unsigned int v24 = 0;
  }
  uint64_t v25 = sub_290DEC(*(void *)(a1 + 8) + 3896, 1u, 0);
  uint64_t v26 = &v25[-*(int *)v25];
  if (*(unsigned __int16 *)v26 < 0xBu)
  {
    uint64_t v27 = 0;
  }
  else
  {
    uint64_t v27 = *((unsigned __int16 *)v26 + 5);
    if (v27) {
      v27 += (uint64_t)&v25[*(unsigned int *)&v25[v27]];
    }
  }
  uint64_t v28 = (int *)(v27 + 4 * v24 + 4 + *(unsigned int *)(v27 + 4 * v24 + 4));
  unsigned int v29 = (unsigned __int16 *)((char *)v28 - *v28);
  if (*v29 >= 5u)
  {
    uint64_t v30 = v29[2];
    if (v30)
    {
      uint64_t v31 = (unsigned int *)((char *)v28 + v30);
      uint64_t v32 = *v31;
      double v34 = (char *)v31 + v32 + 4;
      size_t v33 = *(unsigned int *)((char *)v31 + v32);
      if (v33 >= 0x17)
      {
        uint64_t v37 = (v33 & 0xFFFFFFF8) + 8;
        if ((v33 | 7) != 0x17) {
          uint64_t v37 = v33 | 7;
        }
        uint64_t v38 = v37 + 1;
        double v35 = (void **)operator new(v37 + 1);
        __dst[1] = (void *)v33;
        unint64_t v180 = v38 | 0x8000000000000000;
        __dst[0] = v35;
      }
      else
      {
        HIBYTE(v180) = *(unsigned int *)((char *)v31 + v32);
        double v35 = __dst;
        if (!v33)
        {
LABEL_34:
          a3 = v175;
          *((unsigned char *)v35 + v33) = 0;
          int v36 = v175[5];
          if (!v175[5]) {
            goto LABEL_40;
          }
          goto LABEL_35;
        }
      }
      memcpy(v35, v34, v33);
      goto LABEL_34;
    }
  }
  HIBYTE(v180) = 0;
  LOBYTE(__dst[0]) = 0;
  int v36 = a3[5];
  if (!a3[5]) {
    goto LABEL_40;
  }
LABEL_35:
  if (a3[1])
  {
    uint64_t v39 = *a2;
    int v40 = *((unsigned __int8 *)a2 + 38);
    uint64_t v41 = (unsigned __int16 *)((char *)*a2 - **a2);
    unsigned int v42 = *v41;
    if (*((unsigned char *)a2 + 38))
    {
      if (v42 >= 0x4D)
      {
        unsigned int v43 = v41[38];
        if (v43)
        {
          int v44 = 2;
LABEL_50:
          BOOL v45 = (*(int *)((char *)v39 + v43) & v44) != 0;
LABEL_52:
          BOOL v51 = 0;
          BOOL v46 = a3[3] == 0;
          goto LABEL_53;
        }
      }
    }
    else if (v42 >= 0x4D)
    {
      unsigned int v43 = v41[38];
      if (v43)
      {
        int v44 = 1;
        goto LABEL_50;
      }
    }
    BOOL v45 = 0;
    goto LABEL_52;
  }
LABEL_40:
  BOOL v45 = 0;
  BOOL v46 = a3[3] == 0;
  uint64_t v39 = *a2;
  int v40 = *((unsigned __int8 *)a2 + 38);
  if (v36 || !a3[3])
  {
    BOOL v51 = 0;
    goto LABEL_53;
  }
  char v47 = (unsigned __int16 *)((char *)v39 - *v39);
  unsigned int v48 = *v47;
  if (*((unsigned char *)a2 + 38))
  {
    if (v48 < 0x4D || (unsigned int v49 = v47[38]) == 0)
    {
      BOOL v46 = 0;
      BOOL v45 = 0;
      BOOL v51 = 0;
      int v40 = 1;
      goto LABEL_53;
    }
    int v50 = 8;
    goto LABEL_98;
  }
  if (v48 >= 0x4D)
  {
    unsigned int v49 = v47[38];
    if (v49)
    {
      int v50 = 4;
LABEL_98:
      BOOL v46 = 0;
      BOOL v45 = 0;
      BOOL v51 = (*(int *)((char *)v39 + v49) & v50) != 0;
      goto LABEL_53;
    }
  }
  int v40 = 0;
  BOOL v46 = 0;
  BOOL v45 = 0;
  BOOL v51 = 0;
LABEL_53:
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = 0;
  uint64_t v52 = *v39;
  uint64_t v53 = -v52;
  uint64_t v54 = (unsigned __int16 *)((char *)v39 - v52);
  unsigned int v55 = *v54;
  if (v40)
  {
    if (v55 < 0x4D || !v54[38])
    {
      if (*v54 <= 0x4Cu) {
        goto LABEL_79;
      }
      goto LABEL_63;
    }
    if ((*(int *)((char *)v39 + v54[38]) & 8) == 0) {
      BOOL v46 = 1;
    }
    if (v46 || v45)
    {
LABEL_59:
      uint64_t v54 = (unsigned __int16 *)((char *)v39 + v53);
      BOOL v56 = *(unsigned __int16 *)((char *)v39 + v53) >= 0x4Du;
      if (v40) {
        goto LABEL_60;
      }
      goto LABEL_118;
    }
LABEL_87:
    sub_639BF8(a4, (uint64_t *)&v181, (uint64_t)__dst, a5, (uint64_t)&v192);
    unint64_t v69 = *(void *)(a6 + 8);
    if (v69 >= *(void *)(a6 + 16))
    {
      uint64_t v75 = sub_8CF4AC((void **)a6, (uint64_t)&v192);
      int v76 = SHIBYTE(v204);
      *(void *)(a6 + 8) = v75;
      if (v76 < 0)
      {
        operator delete((void *)v203);
        if (SHIBYTE(v201) < 0) {
          goto LABEL_113;
        }
      }
      else if (SHIBYTE(v201) < 0)
      {
        goto LABEL_113;
      }
    }
    else
    {
      long long v70 = v192;
      long long v71 = v193;
      long long v72 = v194[0];
      *(_OWORD *)(v69 + 41) = *(_OWORD *)((char *)v194 + 9);
      *(_OWORD *)(v69 + 16) = v71;
      *(_OWORD *)(v69 + 32) = v72;
      *(_OWORD *)unint64_t v69 = v70;
      *(_DWORD *)(v69 + 96) = v198;
      if (v198 == 1)
      {
        uint64_t v79 = v195;
        *(void *)(v69 + 72) = 0;
        *(void *)(v69 + 64) = v79;
        *(void *)(v69 + 80) = 0;
        *(void *)(v69 + 88) = 0;
        int v80 = (const void *)v196;
        int64_t v81 = *((void *)&v196 + 1) - v196;
        if (*((void *)&v196 + 1) != (void)v196)
        {
          if (v81 < 0) {
            sub_2E00();
          }
          uint64_t v82 = (char *)operator new(*((void *)&v196 + 1) - v196);
          *(void *)(v69 + 72) = v82;
          *(void *)(v69 + 80) = v82;
          int v83 = &v82[8 * (v81 >> 3)];
          *(void *)(v69 + 88) = v83;
          memcpy(v82, v80, v81);
          *(void *)(v69 + 80) = v83;
        }
      }
      else if (!v198)
      {
        *(void *)(v69 + 64) = v195;
        unsigned int v73 = (unsigned char *)(v69 + 72);
        if (SHIBYTE(v197) < 0)
        {
          sub_4200(v73, (void *)v196, *((unint64_t *)&v196 + 1));
        }
        else
        {
          long long v74 = v196;
          *(void *)(v69 + 88) = v197;
          *(_OWORD *)unsigned int v73 = v74;
        }
      }
      *(void *)(v69 + 104) = v199;
      long long v84 = v200;
      *(void *)(v69 + 128) = v201;
      *(_OWORD *)(v69 + 112) = v84;
      long long v200 = 0uLL;
      *(unsigned char *)(v69 + 136) = v202;
      long long v85 = v203;
      *(void *)(v69 + 160) = v204;
      *(_OWORD *)(v69 + 144) = v85;
      uint64_t v201 = 0;
      long long v203 = 0uLL;
      uint64_t v204 = 0;
      *(unsigned char *)(v69 + 168) = v205;
      *(void *)(a6 + 8) = v69 + 176;
      a3 = v175;
      if (SHIBYTE(v201) < 0)
      {
LABEL_113:
        operator delete((void *)v200);
        int v77 = v198;
        if (v198 == 1) {
          goto LABEL_114;
        }
        goto LABEL_102;
      }
    }
    int v77 = v198;
    if (v198 == 1)
    {
LABEL_114:
      unsigned int v78 = (void *)v196;
      if (!(void)v196) {
        goto LABEL_117;
      }
      *((void *)&v196 + 1) = v196;
      goto LABEL_116;
    }
LABEL_102:
    if (v77 || (SHIBYTE(v197) & 0x80000000) == 0)
    {
LABEL_117:
      uint64_t v39 = *a2;
      uint64_t v53 = -(uint64_t)**a2;
      uint64_t v54 = (unsigned __int16 *)((char *)*a2 - **a2);
      BOOL v56 = *v54 >= 0x4Du;
      if (*((unsigned char *)a2 + 38))
      {
LABEL_60:
        if (!v56)
        {
LABEL_79:
          std::string::size_type v60 = (unsigned __int16 *)((char *)v39 + v53);
          if (*(unsigned __int16 *)((char *)v39 + v53) > 0x4Cu)
          {
LABEL_80:
            unsigned int v66 = v60[38];
            int v67 = 1;
            if (v66)
            {
              int v68 = 32;
              goto LABEL_136;
            }
LABEL_176:
            unsigned int v62 = a3 + 2;
            goto LABEL_177;
          }
LABEL_73:
          unsigned int v62 = a3 + 2;
          int v63 = (unsigned __int16 *)((char *)v39 + v53);
          BOOL v64 = *v63 >= 0x4Du;
          goto LABEL_178;
        }
LABEL_63:
        if (!v54[38]) {
          goto LABEL_79;
        }
        int v57 = 1;
        char v59 = (*(int *)((char *)v39 + v54[38]) & 2) == 0 || a3[1] == 0 || v51;
        if (v59)
        {
LABEL_71:
          std::string::size_type v60 = (unsigned __int16 *)((char *)v39 + v53);
          BOOL v61 = *(unsigned __int16 *)((char *)v39 + v53) >= 0x4Du;
          if (v57) {
            goto LABEL_72;
          }
          goto LABEL_174;
        }
LABEL_128:
        sub_639D20(a4, (uint64_t *)&v181, (uint64_t)__dst, a5, (uint64_t)&v192);
        unint64_t v88 = *(void *)(a6 + 8);
        if (v88 >= *(void *)(a6 + 16))
        {
          int v101 = sub_8CF4AC((void **)a6, (uint64_t)&v192);
          int v102 = SHIBYTE(v204);
          *(void *)(a6 + 8) = v101;
          if (v102 < 0)
          {
            operator delete((void *)v203);
            if (SHIBYTE(v201) < 0) {
              goto LABEL_169;
            }
          }
          else if (SHIBYTE(v201) < 0)
          {
            goto LABEL_169;
          }
        }
        else
        {
          long long v89 = v192;
          long long v90 = v193;
          long long v91 = v194[0];
          *(_OWORD *)(v88 + 41) = *(_OWORD *)((char *)v194 + 9);
          *(_OWORD *)(v88 + 16) = v90;
          *(_OWORD *)(v88 + 32) = v91;
          *(_OWORD *)unint64_t v88 = v89;
          *(_DWORD *)(v88 + 96) = v198;
          if (v198 == 1)
          {
            uint64_t v109 = v195;
            *(void *)(v88 + 72) = 0;
            *(void *)(v88 + 64) = v109;
            *(void *)(v88 + 80) = 0;
            *(void *)(v88 + 88) = 0;
            size_t v110 = (const void *)v196;
            int64_t v111 = *((void *)&v196 + 1) - v196;
            if (*((void *)&v196 + 1) != (void)v196)
            {
              if (v111 < 0) {
                sub_2E00();
              }
              size_t v112 = (char *)operator new(*((void *)&v196 + 1) - v196);
              *(void *)(v88 + 72) = v112;
              *(void *)(v88 + 80) = v112;
              unint64_t v113 = &v112[8 * (v111 >> 3)];
              *(void *)(v88 + 88) = v113;
              memcpy(v112, v110, v111);
              *(void *)(v88 + 80) = v113;
            }
          }
          else if (!v198)
          {
            *(void *)(v88 + 64) = v195;
            uint64_t v92 = (unsigned char *)(v88 + 72);
            if (SHIBYTE(v197) < 0)
            {
              sub_4200(v92, (void *)v196, *((unint64_t *)&v196 + 1));
            }
            else
            {
              long long v93 = v196;
              *(void *)(v88 + 88) = v197;
              *(_OWORD *)uint64_t v92 = v93;
            }
          }
          *(void *)(v88 + 104) = v199;
          long long v119 = v200;
          *(void *)(v88 + 128) = v201;
          *(_OWORD *)(v88 + 112) = v119;
          long long v200 = 0uLL;
          *(unsigned char *)(v88 + 136) = v202;
          long long v120 = v203;
          *(void *)(v88 + 160) = v204;
          *(_OWORD *)(v88 + 144) = v120;
          uint64_t v201 = 0;
          long long v203 = 0uLL;
          uint64_t v204 = 0;
          *(unsigned char *)(v88 + 168) = v205;
          *(void *)(a6 + 8) = v88 + 176;
          a3 = v175;
          if (SHIBYTE(v201) < 0)
          {
LABEL_169:
            operator delete((void *)v200);
            int v103 = v198;
            if (v198 == 1) {
              goto LABEL_170;
            }
            goto LABEL_148;
          }
        }
        int v103 = v198;
        if (v198 == 1)
        {
LABEL_170:
          uint64_t v104 = (void *)v196;
          if (!(void)v196) {
            goto LABEL_173;
          }
          *((void *)&v196 + 1) = v196;
          goto LABEL_172;
        }
LABEL_148:
        if (v103 || (SHIBYTE(v197) & 0x80000000) == 0)
        {
LABEL_173:
          uint64_t v39 = *a2;
          uint64_t v53 = -(uint64_t)**a2;
          std::string::size_type v60 = (unsigned __int16 *)((char *)*a2 - **a2);
          BOOL v61 = *v60 >= 0x4Du;
          if (*((unsigned char *)a2 + 38))
          {
LABEL_72:
            if (v61) {
              goto LABEL_80;
            }
            goto LABEL_73;
          }
LABEL_174:
          if (!v61) {
            goto LABEL_175;
          }
          goto LABEL_134;
        }
        uint64_t v104 = (void *)v196;
LABEL_172:
        operator delete(v104);
        goto LABEL_173;
      }
LABEL_118:
      if (!v56) {
        goto LABEL_133;
      }
      goto LABEL_120;
    }
    unsigned int v78 = (void *)v196;
LABEL_116:
    operator delete(v78);
    goto LABEL_117;
  }
  if (v55 >= 0x4D && v54[38])
  {
    if ((*(int *)((char *)v39 + v54[38]) & 4) == 0) {
      BOOL v46 = 1;
    }
    if (v46 || v45) {
      goto LABEL_59;
    }
    goto LABEL_87;
  }
  if (*v54 <= 0x4Cu) {
    goto LABEL_133;
  }
LABEL_120:
  if (v54[38])
  {
    int v57 = 0;
    char v87 = (*(int *)((char *)v39 + v54[38]) & 1) == 0 || a3[1] == 0 || v51;
    if (v87) {
      goto LABEL_71;
    }
    goto LABEL_128;
  }
LABEL_133:
  std::string::size_type v60 = (unsigned __int16 *)((char *)v39 + v53);
  if (*(unsigned __int16 *)((char *)v39 + v53) <= 0x4Cu)
  {
LABEL_175:
    int v67 = 0;
    goto LABEL_176;
  }
LABEL_134:
  int v67 = 0;
  unsigned int v66 = v60[38];
  if (!v66) {
    goto LABEL_176;
  }
  int v68 = 16;
LABEL_136:
  unsigned int v62 = a3 + 2;
  if ((*(int *)((char *)v39 + v66) & v68) != 0 && a3[2] != 0)
  {
    sub_639DA4(a4, (uint64_t *)&v181, (uint64_t)__dst, (uint64_t)&v192);
    unint64_t v95 = *(void *)(a6 + 8);
    if (v95 >= *(void *)(a6 + 16))
    {
      uint64_t v105 = sub_8CF4AC((void **)a6, (uint64_t)&v192);
      int v106 = SHIBYTE(v204);
      *(void *)(a6 + 8) = v105;
      if (v106 < 0)
      {
        operator delete((void *)v203);
        if (SHIBYTE(v201) < 0) {
          goto LABEL_266;
        }
      }
      else if (SHIBYTE(v201) < 0)
      {
        goto LABEL_266;
      }
    }
    else
    {
      long long v96 = v192;
      long long v97 = v193;
      long long v98 = v194[0];
      *(_OWORD *)(v95 + 41) = *(_OWORD *)((char *)v194 + 9);
      *(_OWORD *)(v95 + 16) = v97;
      *(_OWORD *)(v95 + 32) = v98;
      *(_OWORD *)unint64_t v95 = v96;
      *(_DWORD *)(v95 + 96) = v198;
      if (v198 == 1)
      {
        uint64_t v114 = v195;
        *(void *)(v95 + 72) = 0;
        *(void *)(v95 + 64) = v114;
        *(void *)(v95 + 80) = 0;
        *(void *)(v95 + 88) = 0;
        char v115 = (const void *)v196;
        int64_t v116 = *((void *)&v196 + 1) - v196;
        if (*((void *)&v196 + 1) != (void)v196)
        {
          if (v116 < 0) {
            sub_2E00();
          }
          int v117 = (char *)operator new(*((void *)&v196 + 1) - v196);
          *(void *)(v95 + 72) = v117;
          *(void *)(v95 + 80) = v117;
          char v118 = &v117[8 * (v116 >> 3)];
          *(void *)(v95 + 88) = v118;
          memcpy(v117, v115, v116);
          *(void *)(v95 + 80) = v118;
        }
      }
      else if (!v198)
      {
        *(void *)(v95 + 64) = v195;
        uint64_t v99 = (unsigned char *)(v95 + 72);
        if (SHIBYTE(v197) < 0)
        {
          sub_4200(v99, (void *)v196, *((unint64_t *)&v196 + 1));
        }
        else
        {
          long long v100 = v196;
          *(void *)(v95 + 88) = v197;
          *(_OWORD *)uint64_t v99 = v100;
        }
      }
      *(void *)(v95 + 104) = v199;
      long long v173 = v200;
      *(void *)(v95 + 128) = v201;
      *(_OWORD *)(v95 + 112) = v173;
      long long v200 = 0uLL;
      *(unsigned char *)(v95 + 136) = v202;
      long long v174 = v203;
      *(void *)(v95 + 160) = v204;
      *(_OWORD *)(v95 + 144) = v174;
      uint64_t v201 = 0;
      long long v203 = 0uLL;
      uint64_t v204 = 0;
      *(unsigned char *)(v95 + 168) = v205;
      *(void *)(a6 + 8) = v95 + 176;
      a3 = v175;
      if (SHIBYTE(v201) < 0)
      {
LABEL_266:
        operator delete((void *)v200);
        int v107 = v198;
        if (v198 == 1) {
          goto LABEL_267;
        }
        goto LABEL_154;
      }
    }
    int v107 = v198;
    if (v198 == 1)
    {
LABEL_267:
      uint64_t v108 = (void *)v196;
      if (!(void)v196) {
        goto LABEL_270;
      }
      *((void *)&v196 + 1) = v196;
      goto LABEL_269;
    }
LABEL_154:
    if (v107 || (SHIBYTE(v197) & 0x80000000) == 0)
    {
LABEL_270:
      uint64_t v39 = *a2;
      int v63 = (unsigned __int16 *)((char *)*a2 - **a2);
      BOOL v64 = *v63 >= 0x4Du;
      if (!*((unsigned char *)a2 + 38)) {
        goto LABEL_74;
      }
      goto LABEL_178;
    }
    uint64_t v108 = (void *)v196;
LABEL_269:
    operator delete(v108);
    goto LABEL_270;
  }
LABEL_177:
  int v63 = (unsigned __int16 *)((char *)v39 + v53);
  BOOL v64 = *v63 >= 0x4Du;
  if (!v67)
  {
LABEL_74:
    if (!v64) {
      goto LABEL_256;
    }
    unsigned int v65 = v63[38];
    if (!v65 || (*(int *)((char *)v39 + v65) & 0x40) == 0) {
      goto LABEL_256;
    }
    goto LABEL_182;
  }
LABEL_178:
  if (v64)
  {
    unsigned int v121 = v63[38];
    if (v121)
    {
      if ((*(int *)((char *)v39 + v121) & 0x80) != 0)
      {
LABEL_182:
        if (!*v62) {
          goto LABEL_256;
        }
        sub_8C8B5C(*(void *)(a1 + 8), (uint64_t)a2[4], (uint64_t)&v177);
        unint64_t v122 = v177;
        uint64_t v123 = v178;
        if (v177 == v178)
        {
LABEL_254:
          if (v122)
          {
            long long v178 = v122;
            operator delete(v122);
          }
          goto LABEL_256;
        }
        while (1)
        {
          uint64_t v188 = 0x7FEFFFFFFFFFFFFFLL;
          uint64_t v186 = -1;
          int v187 = 0x7FFFFFFF;
          *(void *)&long long v192 = v122;
          *((void *)&v192 + 1) = &v188;
          *(void *)&long long v193 = &v186;
          sub_77F46C((uint64_t)v183, (uint64_t)&v192);
          double v190 = 0.0;
          double v191 = 0.0;
          uint64_t v189 = 0x7FEFFFFFFFFFFFFFLL;
          *(void *)&long long v192 = &v186;
          *((void *)&v192 + 1) = &v189;
          *(void *)&long long v193 = &v190;
          *((void *)&v193 + 1) = &v191;
          sub_77F6DC((uint64_t)v183, (double **)&v192);
          double v125 = 0.0;
          if (v191 == 0.0)
          {
            uint64_t v126 = *a2;
            uint64_t v127 = (unsigned __int16 *)((char *)*a2 - **a2);
            if (*v127 < 9u) {
              goto LABEL_199;
            }
          }
          else
          {
            double v125 = v190 / v191;
            if (v190 / v191 > 1.0) {
              double v125 = 1.0;
            }
            uint64_t v126 = *a2;
            uint64_t v127 = (unsigned __int16 *)((char *)*a2 - **a2);
            if (*v127 < 9u)
            {
LABEL_199:
              double v129 = (1.0 - v125) * (double)0;
              if (v129 < 0.0) {
                goto LABEL_192;
              }
              goto LABEL_200;
            }
          }
          uint64_t v128 = v127[4];
          if (v128) {
            uint64_t v128 = *(unsigned int *)((char *)v126 + v128);
          }
          double v129 = (1.0 - v125) * (double)v128;
          if (v129 < 0.0)
          {
LABEL_192:
            if (v129 <= -4.50359963e15) {
              goto LABEL_203;
            }
            uint64_t v130 = (uint64_t)(v129 + v129);
            if (v130 >= 1) {
              --v130;
            }
            goto LABEL_202;
          }
LABEL_200:
          if (v129 >= 4.50359963e15) {
            goto LABEL_203;
          }
          uint64_t v130 = (uint64_t)(v129 + v129) + 1;
LABEL_202:
          double v129 = (double)(v130 >> 1);
LABEL_203:
          uint64_t v186 = (uint64_t)v129;
          int v131 = (unsigned __int16 *)((char *)v126 - *v126);
          unsigned int v132 = *v131;
          double v133 = -1.0;
          if (*((unsigned char *)a2 + 38))
          {
            if (v132 < 0x11) {
              goto LABEL_211;
            }
            unsigned int v134 = v131[8];
            if (!v134) {
              goto LABEL_211;
            }
          }
          else
          {
            if (v132 < 0xF) {
              goto LABEL_211;
            }
            unsigned int v134 = v131[7];
            if (!v134) {
              goto LABEL_211;
            }
          }
          unsigned int v135 = *((unsigned __int8 *)v126 + v134);
          double v133 = (double)v135;
          if (!v135) {
            double v133 = -1.0;
          }
LABEL_211:
          double v191 = v133;
          if (*a3
            && (v133 >= 0.0
              ? (BOOL v136 = ((*(void *)&v133 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
              : (BOOL v136 = 1),
                v136 ? (BOOL v137 = *(void *)&v133 == 0) : (BOOL v137 = 1),
                v137))
          {
            sub_639E84(a4, &v186, (uint64_t *)v122, &v191, a3[4], (uint64_t)__dst, (uint64_t)&v192);
            unint64_t v138 = *(void *)(a6 + 8);
            if (v138 >= *(void *)(a6 + 16))
            {
              std::string::size_type v153 = sub_8CF4AC((void **)a6, (uint64_t)&v192);
              int v154 = SHIBYTE(v204);
              *(void *)(a6 + 8) = v153;
              if ((v154 & 0x80000000) == 0)
              {
LABEL_231:
                if ((SHIBYTE(v201) & 0x80000000) == 0) {
                  goto LABEL_232;
                }
                goto LABEL_247;
              }
              goto LABEL_237;
            }
            long long v139 = v192;
            long long v140 = v193;
            long long v141 = v194[0];
            *(_OWORD *)(v138 + 41) = *(_OWORD *)((char *)v194 + 9);
            *(_OWORD *)(v138 + 16) = v140;
            *(_OWORD *)(v138 + 32) = v141;
            *(_OWORD *)unint64_t v138 = v139;
            *(_DWORD *)(v138 + 96) = v198;
            if (v198 == 1)
            {
              uint64_t v160 = v195;
              *(void *)(v138 + 72) = 0;
              *(void *)(v138 + 64) = v160;
              *(void *)(v138 + 80) = 0;
              *(void *)(v138 + 88) = 0;
              unint64_t v161 = (const void *)v196;
              int64_t v162 = *((void *)&v196 + 1) - v196;
              if (*((void *)&v196 + 1) != (void)v196)
              {
                if (v162 < 0) {
                  sub_2E00();
                }
                uint64_t v163 = (char *)operator new(*((void *)&v196 + 1) - v196);
                *(void *)(v138 + 72) = v163;
                *(void *)(v138 + 80) = v163;
                uint64_t v164 = &v163[8 * (v162 >> 3)];
                *(void *)(v138 + 88) = v164;
                memcpy(v163, v161, v162);
                *(void *)(v138 + 80) = v164;
              }
            }
            else if (!v198)
            {
              *(void *)(v138 + 64) = v195;
              int v142 = (unsigned char *)(v138 + 72);
              if (SHIBYTE(v197) < 0)
              {
                sub_4200(v142, (void *)v196, *((unint64_t *)&v196 + 1));
              }
              else
              {
                long long v143 = v196;
                *(void *)(v138 + 88) = v197;
                *(_OWORD *)int v142 = v143;
              }
            }
            *(void *)(v138 + 104) = v199;
            long long v167 = v200;
            *(void *)(v138 + 128) = v201;
            *(_OWORD *)(v138 + 112) = v167;
            uint64_t v201 = 0;
            long long v200 = 0uLL;
            *(unsigned char *)(v138 + 136) = v202;
            long long v168 = v203;
            *(void *)(v138 + 160) = v204;
            *(_OWORD *)(v138 + 144) = v168;
            uint64_t v204 = 0;
            long long v203 = 0uLL;
            *(unsigned char *)(v138 + 168) = v205;
            *(void *)(a6 + 8) = v138 + 176;
            a3 = v175;
            if ((SHIBYTE(v201) & 0x80000000) == 0)
            {
LABEL_232:
              int v152 = v198;
              if (v198 != 1) {
                goto LABEL_233;
              }
              goto LABEL_248;
            }
          }
          else
          {
            sub_639E14(a4, &v186, (uint64_t *)v122, (uint64_t)__dst, (uint64_t)&v192);
            unint64_t v144 = *(void *)(a6 + 8);
            if (v144 >= *(void *)(a6 + 16))
            {
              uint64_t v150 = sub_8CF4AC((void **)a6, (uint64_t)&v192);
              int v151 = SHIBYTE(v204);
              *(void *)(a6 + 8) = v150;
              if ((v151 & 0x80000000) == 0) {
                goto LABEL_231;
              }
LABEL_237:
              operator delete((void *)v203);
              if ((SHIBYTE(v201) & 0x80000000) == 0) {
                goto LABEL_232;
              }
              goto LABEL_247;
            }
            long long v145 = v192;
            long long v146 = v193;
            long long v147 = v194[0];
            *(_OWORD *)(v144 + 41) = *(_OWORD *)((char *)v194 + 9);
            *(_OWORD *)(v144 + 16) = v146;
            *(_OWORD *)(v144 + 32) = v147;
            *(_OWORD *)unint64_t v144 = v145;
            *(_DWORD *)(v144 + 96) = v198;
            if (v198 == 1)
            {
              uint64_t v155 = v195;
              *(void *)(v144 + 72) = 0;
              *(void *)(v144 + 64) = v155;
              *(void *)(v144 + 80) = 0;
              *(void *)(v144 + 88) = 0;
              std::string::size_type v156 = (const void *)v196;
              int64_t v157 = *((void *)&v196 + 1) - v196;
              if (*((void *)&v196 + 1) != (void)v196)
              {
                if (v157 < 0) {
                  sub_2E00();
                }
                long long v158 = (char *)operator new(*((void *)&v196 + 1) - v196);
                *(void *)(v144 + 72) = v158;
                *(void *)(v144 + 80) = v158;
                int v159 = &v158[8 * (v157 >> 3)];
                *(void *)(v144 + 88) = v159;
                memcpy(v158, v156, v157);
                *(void *)(v144 + 80) = v159;
              }
            }
            else if (!v198)
            {
              *(void *)(v144 + 64) = v195;
              v148 = (unsigned char *)(v144 + 72);
              if (SHIBYTE(v197) < 0)
              {
                sub_4200(v148, (void *)v196, *((unint64_t *)&v196 + 1));
              }
              else
              {
                long long v149 = v196;
                *(void *)(v144 + 88) = v197;
                *(_OWORD *)v148 = v149;
              }
            }
            *(void *)(v144 + 104) = v199;
            long long v165 = v200;
            *(void *)(v144 + 128) = v201;
            *(_OWORD *)(v144 + 112) = v165;
            uint64_t v201 = 0;
            long long v200 = 0uLL;
            *(unsigned char *)(v144 + 136) = v202;
            long long v166 = v203;
            *(void *)(v144 + 160) = v204;
            *(_OWORD *)(v144 + 144) = v166;
            uint64_t v204 = 0;
            long long v203 = 0uLL;
            *(unsigned char *)(v144 + 168) = v205;
            *(void *)(a6 + 8) = v144 + 176;
            a3 = v175;
            if ((SHIBYTE(v201) & 0x80000000) == 0) {
              goto LABEL_232;
            }
          }
LABEL_247:
          operator delete((void *)v200);
          int v152 = v198;
          if (v198 != 1)
          {
LABEL_233:
            if (v152 || (SHIBYTE(v197) & 0x80000000) == 0) {
              goto LABEL_186;
            }
            uint64_t v124 = (void *)v196;
            goto LABEL_185;
          }
LABEL_248:
          uint64_t v124 = (void *)v196;
          if (!(void)v196) {
            goto LABEL_186;
          }
          *((void *)&v196 + 1) = v196;
LABEL_185:
          operator delete(v124);
LABEL_186:
          v122 += 12;
          if (v122 == v123)
          {
            unint64_t v122 = v177;
            goto LABEL_254;
          }
        }
      }
    }
  }
LABEL_256:
  std::string v169 = *(long long **)a6;
  size_t v170 = *(long long **)(a6 + 8);
  unint64_t v171 = 126 - 2 * __clz(0x2E8BA2E8BA2E8BA3 * (((uint64_t)v170 - *(void *)a6) >> 4));
  BOOL v7 = v170 == *(long long **)a6;
  *(void *)&long long v192 = &v181;
  if (v7) {
    uint64_t v172 = 0;
  }
  else {
    uint64_t v172 = v171;
  }
  sub_8D4CD4(v169, v170, (unsigned int **)&v192, v172, 1);
  if (SHIBYTE(v180) < 0) {
    operator delete(__dst[0]);
  }
  if (v184)
  {
    uint64_t v185 = v184;
    operator delete(v184);
  }
}

void sub_8CE770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,_Unwind_Exception *exception_objecta,uint64_t a36)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_8CE8A8(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(void *)(a3 + 16) == -1) {
    uint64_t v8 = *(void *)(a3 + 24) - 1;
  }
  else {
    uint64_t v8 = *(void *)(a3 + 16);
  }
  uint64_t v83 = sub_470B40(a2, v8);
  uint64_t v84 = a1;
  uint64_t v10 = (int **)(v83 + 8);
  unint64_t v9 = *(int **)(v83 + 8);
  uint64_t v11 = (unsigned __int16 *)((char *)v9 - *v9);
  if (*v11 >= 0xDu && (uint64_t v12 = v11[6]) != 0) {
    unsigned int v13 = *(unsigned __int16 *)((char *)v9 + v12);
  }
  else {
    unsigned int v13 = 0;
  }
  uint64_t v14 = v13;
  double v15 = sub_290DEC(*(void *)(a1 + 8) + 3896, 1u, 0);
  unint64_t v16 = &v15[-*(int *)v15];
  if (*(unsigned __int16 *)v16 < 0xBu)
  {
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v17 = *((unsigned __int16 *)v16 + 5);
    if (v17) {
      v17 += (uint64_t)&v15[*(unsigned int *)&v15[v17]];
    }
  }
  unint64_t v18 = (int *)(v17 + 4 * v14 + 4 + *(unsigned int *)(v17 + 4 * v14 + 4));
  uint64_t v19 = (unsigned __int16 *)((char *)v18 - *v18);
  if (*v19 < 5u || (uint64_t v20 = v19[2]) == 0)
  {
    HIBYTE(v103) = 0;
    LOBYTE(__dst[0]) = 0;
    uint64_t v26 = *v10;
    uint64_t v27 = (unsigned __int16 *)((char *)*v10 - **v10);
    unsigned int v28 = *v27;
    if (v28 < 0x2F) {
      goto LABEL_40;
    }
    goto LABEL_25;
  }
  int v21 = (unsigned int *)((char *)v18 + v20);
  uint64_t v22 = *v21;
  unsigned int v24 = (char *)v21 + v22 + 4;
  size_t v23 = *(unsigned int *)((char *)v21 + v22);
  if (v23 >= 0x17)
  {
    if ((v23 | 7) == 0x17) {
      uint64_t v29 = (v23 & 0xFFFFFFF8) + 8;
    }
    else {
      uint64_t v29 = v23 | 7;
    }
    uint64_t v25 = (void **)operator new(v29 + 1);
    __dst[1] = (void *)v23;
    uint64_t v103 = v29 - 0x7FFFFFFFFFFFFFFFLL;
    __dst[0] = v25;
    goto LABEL_23;
  }
  HIBYTE(v103) = *(unsigned int *)((char *)v21 + v22);
  uint64_t v25 = __dst;
  if (v23) {
LABEL_23:
  }
    memcpy(v25, v24, v23);
  *((unsigned char *)v25 + v23) = 0;
  uint64_t v26 = *v10;
  uint64_t v27 = (unsigned __int16 *)((char *)*v10 - **v10);
  unsigned int v28 = *v27;
  if (v28 < 0x2F) {
    goto LABEL_40;
  }
LABEL_25:
  if (!v27[23]) {
    goto LABEL_40;
  }
  unsigned int v30 = *((unsigned __int8 *)v26 + v27[23]);
  BOOL v31 = v30 > 0x2F;
  uint64_t v32 = (1 << v30) & 0xE2E040048000;
  if (v31 || v32 == 0) {
    goto LABEL_40;
  }
  if (!*(unsigned char *)(v83 + 46))
  {
    if (v28 < 0x4D) {
      goto LABEL_44;
    }
    uint64_t v35 = v27[38];
    if (!v35 || (*((unsigned char *)v26 + v35) & 4) == 0 && (*(int *)((char *)v26 + v35) & 1) == 0) {
      goto LABEL_44;
    }
LABEL_40:
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(unsigned char *)a4 = 1;
    *(void *)(a4 + 8) = -1;
    *(void *)(a4 + 16) = -1;
    *(void *)(a4 + 24) = 0x7FFFFFFFFFFFFFFFLL;
    *(void *)(a4 + 80) = 0;
    *(void *)(a4 + 88) = 0xBFF0000000000000;
    *(void *)(a4 + 96) = 0;
    goto LABEL_41;
  }
  if (v28 >= 0x4D)
  {
    uint64_t v34 = v27[38];
    if (v34)
    {
      if ((*((unsigned char *)v26 + v34) & 8) != 0 || (*(int *)((char *)v26 + v34) & 2) != 0) {
        goto LABEL_40;
      }
    }
  }
LABEL_44:
  unint64_t v36 = sub_2E4738(v10);
  uint64_t v37 = *(void *)(v84 + 8);
  sub_2D5904(v37, (unsigned int *)v36, 0, (char **)(v37 + 7800));
  uint64_t v99 = 0;
  long long v100 = 0;
  int v101 = 0;
  uint64_t v38 = *(unsigned char **)(v37 + 7800);
  uint64_t v39 = *(unsigned char **)(v37 + 7808);
  uint64_t v40 = v39 - v38;
  if (v39 == v38)
  {
    uint64_t v41 = 0;
LABEL_103:
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(unsigned char *)a4 = 1;
    *(void *)(a4 + 8) = -1;
    *(void *)(a4 + 16) = -1;
    *(void *)(a4 + 24) = 0x7FFFFFFFFFFFFFFFLL;
    *(void *)(a4 + 80) = 0;
    *(void *)(a4 + 88) = 0xBFF0000000000000;
    *(void *)(a4 + 96) = 0;
    if (v41) {
      goto LABEL_104;
    }
    goto LABEL_41;
  }
  if (v40 < 0) {
    sub_2E00();
  }
  uint64_t v79 = a3;
  uint64_t v41 = (char *)operator new(v39 - v38);
  unint64_t v80 = HIDWORD(v36);
  int v81 = v36;
  uint64_t v82 = 8 * (v40 >> 3);
  uint64_t v99 = v41;
  int v101 = &v41[v82];
  memcpy(v41, v38, v40 - 1);
  uint64_t v42 = 0;
  while (1)
  {
    if (*(_DWORD *)&v41[v42] == *(_DWORD *)v83)
    {
      int v43 = *(_DWORD *)(v83 + 4);
      if (*(unsigned __int16 *)&v41[v42 + 4] == (unsigned __int16)v43
        && ((v43 & 0x20000000) == 0) != (v41[v42 + 6] == 0))
      {
        goto LABEL_48;
      }
    }
    uint64_t v44 = *(void *)(v84 + 8);
    uint64_t v45 = *(void *)&v41[v42];
    BOOL v46 = (int *)sub_2D5D58(v44, v45 & 0xFFFFFFFFFFFFLL);
    if (*(unsigned char *)(v44 + 7772))
    {
      char v47 = sub_2DB8E0(v44 + 3896, v45, 0);
      unsigned int v48 = &v47[-*(int *)v47];
      if (*(unsigned __int16 *)v48 < 5u)
      {
        uint64_t v49 = 0;
      }
      else
      {
        uint64_t v49 = *((unsigned __int16 *)v48 + 2);
        if (v49) {
          v49 += (uint64_t)&v47[*(unsigned int *)&v47[v49]];
        }
      }
      uint64_t v50 = v49 + 4 * WORD2(v45) + 4 + *(unsigned int *)(v49 + 4 * WORD2(v45) + 4);
    }
    else
    {
      uint64_t v50 = 0;
    }
    uint64_t v51 = sub_2E5C38(v44, v45 & 0xFFFFFFFFFFFFLL, 1);
    uint64_t v92 = v46;
    long long v93 = (int *)v50;
    uint64_t v94 = v51;
    uint64_t v95 = v52;
    int v96 = v45;
    __int16 v97 = WORD2(v45);
    BOOL v98 = (v45 & 0xFF000000000000) != 0;
    uint64_t v53 = *(void *)(v84 + 8);
    uint64_t v54 = *(void *)&v41[v42];
    unsigned int v55 = (int *)sub_2D5D58(v53, v54 & 0xFFFFFFFFFFFFLL);
    if (*(unsigned char *)(v53 + 7772))
    {
      BOOL v56 = sub_2DB8E0(v53 + 3896, v54, 0);
      int v57 = &v56[-*(int *)v56];
      if (*(unsigned __int16 *)v57 < 5u)
      {
        uint64_t v58 = 0;
      }
      else
      {
        uint64_t v58 = *((unsigned __int16 *)v57 + 2);
        if (v58) {
          v58 += (uint64_t)&v56[*(unsigned int *)&v56[v58]];
        }
      }
      char v59 = (int *)(v58
                  + 4 * (unsigned __int16)((v54 ^ 0x1000000000000uLL) >> 32)
                  + 4
                  + *(unsigned int *)(v58 + 4 * (unsigned __int16)((v54 ^ 0x1000000000000uLL) >> 32) + 4));
    }
    else
    {
      char v59 = 0;
    }
    std::string::size_type v60 = (int *)sub_2E5C38(v53, v54 & 0xFFFFFFFFFFFFLL, 1);
    v88[0] = v55;
    v88[1] = v59;
    v88[2] = v60;
    v88[3] = v61;
    int v89 = v54;
    __int16 v90 = (v54 ^ 0x1000000000000uLL) >> 32;
    BOOL v91 = ((v54 ^ 0x1000000000000) & 0xFF000000000000) != 0;
    unsigned int v62 = (unsigned __int16 *)((char *)v92 - *v92);
    unsigned int v63 = *v62;
    if (v63 >= 0xB)
    {
      if (v62[5])
      {
        int v64 = *(int *)((char *)v92 + v62[5]);
        if ((v64 ^ ((v64 & 2) >> 1))) {
          goto LABEL_48;
        }
      }
    }
    if (v93)
    {
      unsigned int v65 = (unsigned __int16 *)((char *)v93 - *v93);
      if (*v65 >= 0x11u)
      {
        uint64_t v66 = v65[8];
        if (v66)
        {
          if ((*(_WORD *)((unsigned char *)v93 + v66) & 4) != 0) {
            goto LABEL_48;
          }
        }
      }
    }
    if (v98)
    {
      if (v63 < 0x4D) {
        goto LABEL_83;
      }
      unsigned int v67 = v62[38];
      if (!v67 || (*(int *)((char *)v92 + v67) & 8) == 0) {
        goto LABEL_83;
      }
    }
    else
    {
      if (v63 < 0x4D) {
        goto LABEL_83;
      }
      unsigned int v68 = v62[38];
      if (!v68 || (*(int *)((char *)v92 + v68) & 4) == 0) {
        goto LABEL_83;
      }
    }
    unint64_t v69 = sub_2E4738(&v92);
    if (v69 == v81)
    {
      BOOL v70 = HIDWORD(v69) == v80;
      goto LABEL_84;
    }
LABEL_83:
    BOOL v70 = 0;
LABEL_84:
    long long v71 = (unsigned __int16 *)((char *)v88[0] - *v88[0]);
    unsigned int v72 = *v71;
    if (!v91) {
      break;
    }
    if (v72 >= 0x4D)
    {
      unsigned int v73 = v71[38];
      if (v73)
      {
        if ((*(int *)((char *)v88[0] + v73) & 8) != 0) {
          goto LABEL_92;
        }
      }
    }
LABEL_47:
    if (v70) {
      goto LABEL_94;
    }
LABEL_48:
    v42 += 8;
    if (v82 == v42) {
      goto LABEL_103;
    }
  }
  if (v72 < 0x4D) {
    goto LABEL_47;
  }
  unsigned int v74 = v71[38];
  if (!v74 || (*(int *)((char *)v88[0] + v74) & 4) == 0) {
    goto LABEL_47;
  }
LABEL_92:
  unint64_t v75 = sub_2E4738(v88);
  if (v75 != v81) {
    goto LABEL_47;
  }
  if (!v70 && HIDWORD(v75) != v80) {
    goto LABEL_48;
  }
LABEL_94:
  uint64_t v76 = *(void *)(v79 + 16);
  if (v76 == -1) {
    uint64_t v76 = *(void *)(v79 + 24) - 1;
  }
  uint64_t v87 = v76;
  unint64_t v85 = sub_3BE8C8(*(void *)(v84 + 8), (unsigned int *)v83, 1);
  int v86 = v77;
  sub_639BF8(&v87, (uint64_t *)&v85, (uint64_t)__dst, 0, (uint64_t)v104);
  sub_63A428(a4, (uint64_t)v104);
  if (v112 < 0)
  {
    operator delete(v111);
    if (v110 < 0) {
      goto LABEL_106;
    }
LABEL_98:
    int v78 = v108;
    if (v108 != 1) {
      goto LABEL_99;
    }
LABEL_107:
    if (__p)
    {
      int v106 = __p;
      operator delete(__p);
    }
  }
  else
  {
    if ((v110 & 0x80000000) == 0) {
      goto LABEL_98;
    }
LABEL_106:
    operator delete(v109);
    int v78 = v108;
    if (v108 == 1) {
      goto LABEL_107;
    }
LABEL_99:
    if (!v78 && v107 < 0) {
      operator delete(__p);
    }
  }
LABEL_104:
  long long v100 = v41;
  operator delete(v41);
LABEL_41:
  if (SHIBYTE(v103) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_8CF03C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38)
{
  sub_639C78((uint64_t)&a38);
  operator delete(v38);
  if ((a37 & 0x80000000) == 0) {
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_8CF0C4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, _DWORD *a6)
{
  uint64_t result = sub_51690C((void *)(a3 + 1064), a2);
  if (*(void *)(result + 40) != -1 && *(void *)(result + 872) != 0)
  {
    uint64_t v12 = result;
    if ((sub_63A7D8(a4) > 1 || *(void *)(a4 + 80) == 1) && *a5 != -1) {
      *(_DWORD *)(a4 + 16) = (*a5)++;
    }
    uint64_t result = sub_63A4A4(a4);
    if (result)
    {
      if ((*(_DWORD *)(a4 + 4) - 1) <= 1)
      {
        long long v13 = *(_OWORD *)a4;
        *(_OWORD *)(v12 + 1912) = *(_OWORD *)(a4 + 16);
        *(_OWORD *)(v12 + 1896) = v13;
        if (v12 + 1896 != a4) {
          sub_5A0D34((uint64_t *)(v12 + 1928), *(void *)(a4 + 32), *(void *)(a4 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a4 + 40) - *(void *)(a4 + 32)) >> 4));
        }
        long long v14 = *(_OWORD *)(a4 + 56);
        long long v15 = *(_OWORD *)(a4 + 72);
        *(_OWORD *)(v12 + 1977) = *(_OWORD *)(a4 + 81);
        *(_OWORD *)(v12 + 1968) = v15;
        *(_OWORD *)(v12 + 1952) = v14;
      }
      unint64_t v16 = *(void *)(a3 + 10184);
      if (v16 >= *(void *)(a3 + 10192))
      {
        uint64_t v20 = sub_7DC95C((void **)(a3 + 10176), a4);
      }
      else
      {
        long long v17 = *(_OWORD *)(a4 + 16);
        *(_OWORD *)unint64_t v16 = *(_OWORD *)a4;
        *(_OWORD *)(v16 + 16) = v17;
        sub_597D64((void *)(v16 + 32), (uint64_t *)(a4 + 32));
        long long v18 = *(_OWORD *)(a4 + 56);
        long long v19 = *(_OWORD *)(a4 + 72);
        *(_OWORD *)(v16 + 81) = *(_OWORD *)(a4 + 81);
        *(_OWORD *)(v16 + 72) = v19;
        *(_OWORD *)(v16 + 56) = v18;
        uint64_t v20 = (char *)(v16 + 104);
        *(void *)(a3 + 10184) = v16 + 104;
      }
      *(void *)(a3 + 10184) = v20;
      *a6 += sub_63A7FC(a4);
      uint64_t result = sub_63A810(a4);
      a6[1] += result;
    }
  }
  return result;
}

void sub_8CF264(_Unwind_Exception *a1)
{
  *(void *)(v1 + 10184) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_8CF26C(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_4A5E10(a2 + 133, a3);
  uint64_t v10 = (uint64_t *)(v7 + 80);
  unint64_t v9 = *(void *)(v7 + 80);
  if (v9 == -1)
  {
    uint64_t v11 = 0;
    uint64_t v10 = (uint64_t *)(v7 + 16);
  }
  else
  {
    uint64_t v11 = *(void *)(v7 + 88) - sub_470F2C(a2, v9, v8);
  }
  uint64_t v12 = sub_471074(a2, *(void *)(a4 + 8), 0, *v10, 1u, v8);
  if (!sub_63AA60(a4))
  {
    uint64_t v18 = 0;
    return v12 + v11 + v18;
  }
  long long v13 = (unsigned int *)sub_470B40(a2, *(void *)(a4 + 8));
  sub_2954EC(*(void *)(a1 + 8), (((unint64_t)(v13[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v13[1] << 32) | *v13) ^ 0x1000000000000, (uint64_t)v23);
  uint64_t v28 = 0x7FEFFFFFFFFFFFFFLL;
  uint64_t v29 = (double *)(a4 + 20);
  uint64_t v26 = -1;
  int v27 = 0x7FFFFFFF;
  unsigned int v30 = &v28;
  BOOL v31 = (double *)&v26;
  sub_77F46C((uint64_t)v23, (uint64_t)&v29);
  double v34 = 0.0;
  double v35 = 0.0;
  uint64_t v33 = 0x7FEFFFFFFFFFFFFFLL;
  uint64_t v29 = (double *)&v26;
  unsigned int v30 = &v33;
  BOOL v31 = &v34;
  uint64_t v32 = &v35;
  sub_77F6DC((uint64_t)v23, &v29);
  double v14 = 0.0;
  double v15 = 0.0;
  if (v35 == 0.0)
  {
    unint64_t v16 = (int *)*((void *)v13 + 1);
    long long v17 = (unsigned __int16 *)((char *)v16 - *v16);
    if (*v17 < 9u) {
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  double v15 = v34 / v35;
  if (v34 / v35 > 1.0) {
    double v15 = 1.0;
  }
  unint64_t v16 = (int *)*((void *)v13 + 1);
  long long v17 = (unsigned __int16 *)((char *)v16 - *v16);
  if (*v17 >= 9u)
  {
LABEL_12:
    uint64_t v19 = v17[4];
    if (v19)
    {
      LODWORD(v14) = *(int *)((char *)v16 + v19);
      double v14 = (double)*(unint64_t *)&v14;
    }
  }
LABEL_14:
  double v20 = (1.0 - v15) * v14;
  if (v20 >= 0.0)
  {
    if (v20 >= 4.50359963e15) {
      goto LABEL_22;
    }
    uint64_t v21 = (uint64_t)(v20 + v20) + 1;
  }
  else
  {
    if (v20 <= -4.50359963e15) {
      goto LABEL_22;
    }
    uint64_t v21 = (uint64_t)(v20 + v20);
    if (v21 >= 1) {
      --v21;
    }
  }
  double v20 = (double)(v21 >> 1);
LABEL_22:
  uint64_t v18 = (uint64_t)v20;
  if (__p)
  {
    uint64_t v25 = __p;
    operator delete(__p);
  }
  return v12 + v11 + v18;
}

void sub_8CF490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_8CF4AC(void **a1, uint64_t a2)
{
  uint64_t v3 = 0x2E8BA2E8BA2E8BA3 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x1745D1745D1745DLL) {
    sub_2E00();
  }
  if (0x5D1745D1745D1746 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v4) {
    unint64_t v4 = 0x5D1745D1745D1746 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4)) >= 0xBA2E8BA2E8BA2ELL) {
    unint64_t v6 = 0x1745D1745D1745DLL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x1745D1745D1745DLL) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(176 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  double v8 = &v7[176 * v3];
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)double v8 = *(_OWORD *)a2;
  *((_OWORD *)v8 + 1) = v9;
  *((_OWORD *)v8 + 2) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v8 + 41) = *(_OWORD *)(a2 + 41);
  uint64_t v10 = (void *)*(unsigned int *)(a2 + 96);
  *((_DWORD *)v8 + 24) = v10;
  sub_4F38B0(v10, (uint64_t *)(a2 + 64), (void *)v8 + 8);
  *((void *)v8 + 13) = *(void *)(a2 + 104);
  *((_OWORD *)v8 + 7) = *(_OWORD *)(a2 + 112);
  uint64_t v11 = &v7[176 * v6];
  *((void *)v8 + 16) = *(void *)(a2 + 128);
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 112) = 0;
  v8[136] = *(unsigned char *)(a2 + 136);
  *((_OWORD *)v8 + 9) = *(_OWORD *)(a2 + 144);
  *((void *)v8 + 20) = *(void *)(a2 + 160);
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 144) = 0;
  v8[168] = *(unsigned char *)(a2 + 168);
  uint64_t v12 = v8 + 176;
  double v14 = (void **)*a1;
  long long v13 = (void **)a1[1];
  if (v13 == *a1)
  {
    *a1 = v8;
    a1[1] = v12;
    a1[2] = v11;
    if (!v13) {
      return v8 + 176;
    }
    goto LABEL_30;
  }
  uint64_t v15 = 0;
  do
  {
    unint64_t v16 = &v8[v15 * 8];
    long long v17 = &v13[v15];
    long long v18 = *(_OWORD *)&v13[v15 - 22];
    long long v19 = *(_OWORD *)&v13[v15 - 20];
    long long v20 = *(_OWORD *)&v13[v15 - 18];
    *(_OWORD *)(v16 - 135) = *(_OWORD *)((char *)&v13[v15 - 16] - 7);
    *((_OWORD *)v16 - 10) = v19;
    *((_OWORD *)v16 - 9) = v20;
    *((_OWORD *)v16 - 11) = v18;
    *((_DWORD *)v16 - 20) = v13[v15 - 10];
    sub_4F38B0((void *)LODWORD(v13[v15 - 10]), (uint64_t *)&v13[v15 - 14], &v8[v15 * 8 - 112]);
    *((void *)v16 - 9) = v13[v15 - 9];
    long long v21 = *(_OWORD *)&v13[v15 - 8];
    *((void *)v16 - 6) = v13[v15 - 6];
    *((_OWORD *)v16 - 4) = v21;
    *(v17 - 7) = 0;
    *(v17 - 6) = 0;
    *(v17 - 8) = 0;
    *(v16 - 40) = (char)v13[v15 - 5];
    long long v22 = *(_OWORD *)&v13[v15 - 4];
    *((void *)v16 - 2) = v13[v15 - 2];
    *((_OWORD *)v16 - 2) = v22;
    *(v17 - 3) = 0;
    *(v17 - 2) = 0;
    *(v17 - 4) = 0;
    *(v16 - 8) = (char)v13[v15 - 1];
    v15 -= 22;
  }
  while (&v13[v15] != v14);
  size_t v23 = (void **)*a1;
  long long v13 = (void **)a1[1];
  *a1 = &v8[v15 * 8];
  a1[1] = v12;
  a1[2] = v11;
  if (v13 != v23)
  {
    while (1)
    {
      if (*((char *)v13 - 9) < 0)
      {
        operator delete(*(v13 - 4));
        if ((*((char *)v13 - 41) & 0x80000000) == 0)
        {
LABEL_20:
          int v24 = *((_DWORD *)v13 - 20);
          if (v24 != 1) {
            goto LABEL_21;
          }
          goto LABEL_26;
        }
      }
      else if ((*((char *)v13 - 41) & 0x80000000) == 0)
      {
        goto LABEL_20;
      }
      operator delete(*(v13 - 8));
      int v24 = *((_DWORD *)v13 - 20);
      if (v24 != 1)
      {
LABEL_21:
        if (v24 || (*((char *)v13 - 81) & 0x80000000) == 0) {
          goto LABEL_17;
        }
        uint64_t v25 = *(v13 - 13);
        goto LABEL_16;
      }
LABEL_26:
      uint64_t v25 = *(v13 - 13);
      if (!v25) {
        goto LABEL_17;
      }
      *(v13 - 12) = v25;
LABEL_16:
      operator delete(v25);
LABEL_17:
      v13 -= 22;
      if (v13 == v23)
      {
        long long v13 = v23;
        break;
      }
    }
  }
  if (v13) {
LABEL_30:
  }
    operator delete(v13);
  return v8 + 176;
}

void sub_8CF778(long long *a1, long long *a2, unsigned int **a3, uint64_t a4, char a5)
{
void sub_8CFBF4(uint64_t a1, long long *a2, unsigned int **a3)
{
  if ((long long *)a1 != a2)
  {
    uint64_t v5 = a1 + 176;
    if ((long long *)(a1 + 176) != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = a1;
      do
      {
        long long v9 = (long long *)v5;
        uint64_t v10 = sub_63A050(v5, *a3);
        if (v10 >= sub_63A050(v8, *a3)) {
          goto LABEL_5;
        }
        long long v11 = v9[1];
        long long v36 = *v9;
        long long v37 = v11;
        v38[0] = v9[2];
        *(_OWORD *)((char *)v38 + 9) = *(long long *)((char *)v9 + 41);
        unsigned int v43 = *(_DWORD *)(v8 + 272);
        sub_4F38B0((void *)v43, (uint64_t *)(v8 + 240), &v39);
        uint64_t v44 = *(void *)(v8 + 280);
        long long v45 = *(_OWORD *)(v8 + 288);
        uint64_t v46 = *(void *)(v8 + 304);
        *(void *)(v8 + 288) = 0;
        *(void *)(v8 + 296) = 0;
        *(void *)(v8 + 304) = 0;
        char v47 = *(unsigned char *)(v8 + 312);
        long long v48 = *(_OWORD *)(v8 + 320);
        uint64_t v49 = *(void *)(v8 + 336);
        *(void *)(v8 + 328) = 0;
        *(void *)(v8 + 336) = 0;
        *(void *)(v8 + 320) = 0;
        uint64_t v12 = v7;
        char v50 = *(unsigned char *)(v8 + 344);
        while (1)
        {
          uint64_t v13 = a1 + v12;
          long long v14 = *(_OWORD *)(a1 + v12 + 16);
          *(_OWORD *)(v13 + 176) = *(_OWORD *)(a1 + v12);
          *(_OWORD *)(v13 + 192) = v14;
          *(void *)(v13 + 208) = *(void *)(a1 + v12 + 32);
          *(_DWORD *)(v13 + 216) = *(_DWORD *)(a1 + v12 + 40);
          *(void *)(v13 + 220) = *(void *)(a1 + v12 + 44);
          *(void *)(v13 + 225) = *(void *)(a1 + v12 + 49);
          unint64_t v15 = (void *)(a1 + v12 + 240);
          unint64_t v16 = (void *)(a1 + v12 + 64);
          int v17 = *(_DWORD *)(a1 + v12 + 272);
          if (v17 != *(_DWORD *)(a1 + v12 + 96))
          {
            if (v17 == 1)
            {
              long long v20 = *(void **)(a1 + v12 + 248);
              if (v20)
              {
                *(void *)(a1 + v12 + 256) = v20;
LABEL_23:
                operator delete(v20);
              }
            }
            else if (!v17 && *(char *)(a1 + v12 + 271) < 0)
            {
              long long v20 = *(void **)(a1 + v12 + 248);
              goto LABEL_23;
            }
            sub_4F38B0((void *)*(unsigned int *)(v13 + 96), (uint64_t *)(a1 + v12 + 64), (void *)(a1 + v12 + 240));
            *(_DWORD *)(v13 + 272) = *(_DWORD *)(v13 + 96);
            goto LABEL_25;
          }
          if (v17 == 1)
          {
            void *v15 = *v16;
            uint64_t v21 = a1 + v12;
            char v23 = (void **)(a1 + v12 + 248);
            long long v22 = *v23;
            if (*v23)
            {
              *(void *)(v21 + 256) = v22;
              operator delete(v22);
              char *v23 = 0;
              *(void *)(a1 + v12 + 256) = 0;
              *(void *)(a1 + v12 + 264) = 0;
            }
            *(_OWORD *)char v23 = *(_OWORD *)(v21 + 72);
            *(void *)(v21 + 264) = *(void *)(v21 + 88);
            *(void *)(v21 + 80) = 0;
            *(void *)(v21 + 88) = 0;
            *(void *)(v21 + 72) = 0;
          }
          else if (!v17)
          {
            void *v15 = *v16;
            uint64_t v18 = a1 + v12;
            long long v19 = (void **)(a1 + v12 + 248);
            if (*(char *)(a1 + v12 + 271) < 0) {
              operator delete(*v19);
            }
            *(_OWORD *)long long v19 = *(_OWORD *)(v18 + 72);
            *(void *)(a1 + v12 + 264) = *(void *)(v18 + 88);
            *(unsigned char *)(v18 + 95) = 0;
            *(unsigned char *)(v18 + 72) = 0;
          }
LABEL_25:
          uint64_t v24 = a1 + v12;
          *(void *)(a1 + v12 + 280) = *(void *)(a1 + v12 + 104);
          uint64_t v25 = (void **)(a1 + v12 + 288);
          if (*(char *)(a1 + v12 + 311) < 0) {
            operator delete(*v25);
          }
          *(_OWORD *)uint64_t v25 = *(_OWORD *)(v24 + 112);
          *(void *)(a1 + v12 + 304) = *(void *)(v24 + 128);
          *(unsigned char *)(v24 + 135) = 0;
          *(unsigned char *)(v24 + 112) = 0;
          *(unsigned char *)(v24 + 312) = *(unsigned char *)(v24 + 136);
          unint64_t v26 = (void **)(v24 + 320);
          if (*(char *)(v24 + 343) < 0) {
            operator delete(*v26);
          }
          uint64_t v27 = a1 + v12;
          *(_OWORD *)unint64_t v26 = *(_OWORD *)(a1 + v12 + 144);
          *(void *)(v24 + 336) = *(void *)(a1 + v12 + 160);
          *(unsigned char *)(v27 + 167) = 0;
          *(unsigned char *)(v27 + 144) = 0;
          *(unsigned char *)(v27 + 344) = *(unsigned char *)(a1 + v12 + 168);
          if (!v12) {
            break;
          }
          uint64_t v28 = sub_63A050((uint64_t)&v36, *a3);
          v12 -= 176;
          if (v28 >= sub_63A050(v27 - 176, *a3))
          {
            uint64_t v29 = a1 + v12 + 176;
            goto LABEL_33;
          }
        }
        uint64_t v29 = a1;
LABEL_33:
        long long v30 = v37;
        *(_OWORD *)uint64_t v29 = v36;
        *(_OWORD *)(v29 + 16) = v30;
        *(void *)(v27 + 32) = *(void *)&v38[0];
        *(_DWORD *)(v27 + 40) = DWORD2(v38[0]);
        *(void *)(v27 + 44) = *(void *)((char *)v38 + 12);
        *(void *)(v27 + 49) = *(void *)((char *)&v38[1] + 1);
        sub_4F377C(v27 + 64, (uint64_t)&v39);
        *(void *)(v29 + 104) = v44;
        BOOL v31 = (void **)(v27 + 112);
        if (*(char *)(v29 + 135) < 0) {
          operator delete(*v31);
        }
        char v32 = 0;
        uint64_t v33 = (void **)(v27 + 144);
        *(_OWORD *)BOOL v31 = v45;
        *(void *)(v27 + 128) = v46;
        HIBYTE(v46) = 0;
        LOBYTE(v45) = 0;
        *(unsigned char *)(v29 + 136) = v47;
        if (*(char *)(v29 + 167) < 0)
        {
          operator delete(*v33);
          char v32 = HIBYTE(v46);
        }
        *(_OWORD *)uint64_t v33 = v48;
        *(void *)(v27 + 160) = v49;
        HIBYTE(v49) = 0;
        LOBYTE(v48) = 0;
        *(unsigned char *)(v29 + 168) = v50;
        if (v32 < 0)
        {
          operator delete((void *)v45);
          unsigned int v34 = v43;
          if (v43 != 1) {
            goto LABEL_39;
          }
        }
        else
        {
          unsigned int v34 = v43;
          if (v43 != 1)
          {
LABEL_39:
            if (!v34 && v42 < 0)
            {
              double v35 = __p;
              goto LABEL_4;
            }
            goto LABEL_5;
          }
        }
        double v35 = __p;
        if (__p)
        {
          uint64_t v41 = __p;
LABEL_4:
          operator delete(v35);
        }
LABEL_5:
        uint64_t v5 = (uint64_t)(v9 + 11);
        v7 += 176;
        uint64_t v8 = (uint64_t)v9;
      }
      while (v9 + 11 != a2);
    }
  }
}

void sub_8D003C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_58CC(exception_object);
}

void sub_8D005C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_639C78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_8D0070(uint64_t a1, long long *a2, unsigned int **a3)
{
  if ((long long *)a1 != a2)
  {
    uint64_t v4 = a1;
    uint64_t v5 = a1 + 176;
    if ((long long *)(a1 + 176) != a2)
    {
      uint64_t v7 = a1 + 88;
      do
      {
        uint64_t v8 = (long long *)v5;
        uint64_t v9 = sub_63A050(v5, *a3);
        if (v9 >= sub_63A050(v4, *a3)) {
          goto LABEL_5;
        }
        long long v10 = v8[1];
        long long v33 = *v8;
        long long v34 = v10;
        v35[0] = v8[2];
        *(_OWORD *)((char *)v35 + 9) = *(long long *)((char *)v8 + 41);
        unsigned int v40 = *(_DWORD *)(v4 + 272);
        sub_4F38B0((void *)v40, (uint64_t *)(v4 + 240), &v36);
        uint64_t v41 = *(void *)(v4 + 280);
        long long v42 = *(_OWORD *)(v4 + 288);
        uint64_t v43 = *(void *)(v4 + 304);
        *(void *)(v4 + 288) = 0;
        *(void *)(v4 + 296) = 0;
        *(void *)(v4 + 304) = 0;
        char v44 = *(unsigned char *)(v4 + 312);
        long long v45 = *(_OWORD *)(v4 + 320);
        uint64_t v46 = *(void *)(v4 + 336);
        *(void *)(v4 + 328) = 0;
        *(void *)(v4 + 336) = 0;
        *(void *)(v4 + 320) = 0;
        uint64_t v11 = v7;
        char v47 = *(unsigned char *)(v4 + 344);
        do
        {
          *(_OWORD *)(v11 + 88) = *(_OWORD *)(v11 - 88);
          *(_OWORD *)(v11 + 104) = *(_OWORD *)(v11 - 72);
          *(void *)(v11 + 120) = *(void *)(v11 - 56);
          *(_DWORD *)(v11 + 128) = *(_DWORD *)(v11 - 48);
          *(void *)(v11 + 132) = *(void *)(v11 - 44);
          *(void *)(v11 + 137) = *(void *)(v11 - 39);
          int v12 = *(_DWORD *)(v11 + 184);
          int v13 = *(_DWORD *)(v11 + 8);
          if (v12 == v13)
          {
            if (v12 == 1)
            {
              unint64_t v16 = *(void **)(v11 + 160);
              *(void *)(v11 + 152) = *(void *)(v11 - 24);
              if (v16)
              {
                *(void *)(v11 + 168) = v16;
                operator delete(v16);
                *(void *)(v11 + 160) = 0;
                *(void *)(v11 + 168) = 0;
                *(void *)(v11 + 176) = 0;
              }
              *(_OWORD *)(v11 + 160) = *(_OWORD *)(v11 - 16);
              *(void *)(v11 + 176) = *(void *)v11;
              *(void *)(v11 - 8) = 0;
              *(void *)uint64_t v11 = 0;
              *(void *)(v11 - 16) = 0;
            }
            else if (!v12)
            {
              *(void *)(v11 + 152) = *(void *)(v11 - 24);
              long long v14 = (void **)(v11 + 160);
              if (*(char *)(v11 + 183) < 0) {
                operator delete(*v14);
              }
              *(_OWORD *)long long v14 = *(_OWORD *)(v11 - 16);
              *(void *)(v11 + 176) = *(void *)v11;
              *(unsigned char *)(v11 + 7) = 0;
              *(unsigned char *)(v11 - 16) = 0;
            }
            goto LABEL_34;
          }
          if (v12 == 1)
          {
            unint64_t v15 = *(void **)(v11 + 160);
            if (v15)
            {
              *(void *)(v11 + 168) = v15;
LABEL_23:
              operator delete(v15);
            }
LABEL_24:
            int v13 = *(_DWORD *)(v11 + 8);
            goto LABEL_25;
          }
          if (!v12)
          {
            if (*(char *)(v11 + 183) < 0)
            {
              unint64_t v15 = *(void **)(v11 + 160);
              goto LABEL_23;
            }
            goto LABEL_24;
          }
LABEL_25:
          if (v13 == 1)
          {
            uint64_t v18 = *(unsigned char **)(v11 - 16);
            *(void *)(v11 + 152) = *(void *)(v11 - 24);
            *(void *)(v11 + 160) = 0;
            *(void *)(v11 + 168) = 0;
            *(void *)(v11 + 176) = 0;
            long long v19 = *(unsigned char **)(v11 - 8);
            int64_t v20 = v19 - v18;
            if (v19 != v18)
            {
              if (v20 < 0) {
                sub_2E00();
              }
              uint64_t v21 = (char *)operator new(v19 - v18);
              *(void *)(v11 + 160) = v21;
              *(void *)(v11 + 168) = v21;
              long long v22 = &v21[8 * (v20 >> 3)];
              *(void *)(v11 + 176) = v22;
              memcpy(v21, v18, v20);
              *(void *)(v11 + 168) = v22;
            }
          }
          else if (!v13)
          {
            *(void *)(v11 + 152) = *(void *)(v11 - 24);
            int v17 = (unsigned char *)(v11 + 160);
            if (*(char *)(v11 + 7) < 0)
            {
              sub_4200(v17, *(void **)(v11 - 16), *(void *)(v11 - 8));
            }
            else
            {
              *(_OWORD *)int v17 = *(_OWORD *)(v11 - 16);
              *(void *)(v11 + 176) = *(void *)v11;
            }
          }
          *(_DWORD *)(v11 + 184) = *(_DWORD *)(v11 + 8);
LABEL_34:
          *(void *)(v11 + 192) = *(void *)(v11 + 16);
          char v23 = (void **)(v11 + 200);
          if (*(char *)(v11 + 223) < 0) {
            operator delete(*v23);
          }
          *(_OWORD *)char v23 = *(_OWORD *)(v11 + 24);
          *(void *)(v11 + 216) = *(void *)(v11 + 40);
          *(unsigned char *)(v11 + 47) = 0;
          *(unsigned char *)(v11 + 24) = 0;
          *(unsigned char *)(v11 + 224) = *(unsigned char *)(v11 + 48);
          uint64_t v24 = (void **)(v11 + 232);
          if (*(char *)(v11 + 255) < 0) {
            operator delete(*v24);
          }
          *(_OWORD *)uint64_t v24 = *(_OWORD *)(v11 + 56);
          *(void *)(v11 + 248) = *(void *)(v11 + 72);
          *(unsigned char *)(v11 + 79) = 0;
          *(unsigned char *)(v11 + 56) = 0;
          *(unsigned char *)(v11 + 256) = *(unsigned char *)(v11 + 80);
          uint64_t v25 = sub_63A050((uint64_t)&v33, *a3);
          uint64_t v26 = sub_63A050(v11 - 264, *a3);
          v11 -= 176;
        }
        while (v25 < v26);
        long long v27 = v34;
        *(_OWORD *)(v11 + 88) = v33;
        *(_OWORD *)(v11 + 104) = v27;
        *(void *)(v11 + 120) = *(void *)&v35[0];
        *(_DWORD *)(v11 + 128) = DWORD2(v35[0]);
        *(void *)(v11 + 132) = *(void *)((char *)v35 + 12);
        *(void *)(v11 + 137) = *(void *)((char *)&v35[1] + 1);
        sub_4F377C(v11 + 152, (uint64_t)&v36);
        *(void *)(v11 + 192) = v41;
        uint64_t v28 = (void **)(v11 + 200);
        if (*(char *)(v11 + 223) < 0) {
          operator delete(*v28);
        }
        char v29 = 0;
        long long v30 = (void **)(v11 + 232);
        *(_OWORD *)uint64_t v28 = v42;
        *(void *)(v11 + 216) = v43;
        HIBYTE(v43) = 0;
        LOBYTE(v42) = 0;
        *(unsigned char *)(v11 + 224) = v44;
        if (*(char *)(v11 + 255) < 0)
        {
          operator delete(*v30);
          char v29 = HIBYTE(v43);
        }
        *(_OWORD *)long long v30 = v45;
        *(void *)(v11 + 248) = v46;
        HIBYTE(v46) = 0;
        LOBYTE(v45) = 0;
        *(unsigned char *)(v11 + 256) = v47;
        if (v29 < 0)
        {
          operator delete((void *)v42);
          unsigned int v31 = v40;
          if (v40 != 1) {
            goto LABEL_45;
          }
        }
        else
        {
          unsigned int v31 = v40;
          if (v40 != 1)
          {
LABEL_45:
            if (!v31 && v39 < 0)
            {
              char v32 = __p;
              goto LABEL_4;
            }
            goto LABEL_5;
          }
        }
        char v32 = __p;
        if (__p)
        {
          uint64_t v38 = __p;
LABEL_4:
          operator delete(v32);
        }
LABEL_5:
        uint64_t v5 = (uint64_t)(v8 + 11);
        v7 += 176;
        uint64_t v4 = (uint64_t)v8;
      }
      while (v8 + 11 != a2);
    }
  }
}

void sub_8D0504(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_8D054C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_639C78((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_8D0560(long long *a1, long long *a2, long long *a3, unsigned int **a4)
{
  uint64_t v8 = sub_63A050((uint64_t)a2, *a4);
  uint64_t v9 = sub_63A050((uint64_t)a1, *a4);
  uint64_t v10 = sub_63A050((uint64_t)a3, *a4);
  uint64_t v11 = sub_63A050((uint64_t)a2, *a4);
  if (v8 < v9)
  {
    if (v10 < v11)
    {
      sub_8D1408(a1, a3);
      return 1;
    }
    sub_8D1408(a1, a2);
    uint64_t v15 = sub_63A050((uint64_t)a3, *a4);
    if (v15 >= sub_63A050((uint64_t)a2, *a4)) {
      return 1;
    }
    int v13 = a2;
    long long v14 = a3;
LABEL_9:
    sub_8D1408(v13, v14);
    return 2;
  }
  if (v10 < v11)
  {
    sub_8D1408(a2, a3);
    uint64_t v12 = sub_63A050((uint64_t)a2, *a4);
    if (v12 >= sub_63A050((uint64_t)a1, *a4)) {
      return 1;
    }
    int v13 = a1;
    long long v14 = a2;
    goto LABEL_9;
  }
  return 0;
}

long long *sub_8D06BC(uint64_t a1, long long *a2, unsigned int **a3)
{
  long long v6 = *(_OWORD *)(a1 + 16);
  long long v36 = *(_OWORD *)a1;
  long long v37 = v6;
  *(_OWORD *)uint64_t v38 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v38[9] = *(_OWORD *)(a1 + 41);
  uint64_t v7 = (uint64_t *)(a1 + 64);
  uint64_t v8 = (void *)*(unsigned int *)(a1 + 96);
  int v43 = (int)v8;
  sub_4F38B0(v8, v7, &v39);
  uint64_t v44 = *(void *)(a1 + 104);
  *(_OWORD *)long long v45 = *(_OWORD *)(a1 + 112);
  uint64_t v46 = *(void *)(a1 + 128);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = 0;
  char v47 = *(unsigned char *)(a1 + 136);
  *(_OWORD *)long long __p = *(_OWORD *)(a1 + 144);
  uint64_t v49 = *(void *)(a1 + 160);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 144) = 0;
  char v50 = *(unsigned char *)(a1 + 168);
  uint64_t v9 = sub_63A050((uint64_t)&v36, *a3);
  if (v9 >= sub_63A050((uint64_t)(a2 - 11), *a3))
  {
    uint64_t v12 = (long long *)(a1 + 176);
    do
    {
      uint64_t v10 = v12;
      if (v12 >= a2) {
        break;
      }
      uint64_t v13 = sub_63A050((uint64_t)&v36, *a3);
      uint64_t v14 = sub_63A050((uint64_t)v10, *a3);
      uint64_t v12 = v10 + 11;
    }
    while (v13 >= v14);
  }
  else
  {
    uint64_t v10 = (long long *)a1;
    do
    {
      uint64_t v11 = sub_63A050((uint64_t)&v36, *a3);
      v10 += 11;
    }
    while (v11 >= sub_63A050((uint64_t)v10, *a3));
  }
  if (v10 < a2)
  {
    do
    {
      uint64_t v15 = sub_63A050((uint64_t)&v36, *a3);
      a2 -= 11;
    }
    while (v15 < sub_63A050((uint64_t)a2, *a3));
  }
  while (v10 < a2)
  {
    sub_8D1408(v10, a2);
    do
    {
      uint64_t v16 = sub_63A050((uint64_t)&v36, *a3);
      v10 += 11;
    }
    while (v16 >= sub_63A050((uint64_t)v10, *a3));
    do
    {
      uint64_t v17 = sub_63A050((uint64_t)&v36, *a3);
      a2 -= 11;
    }
    while (v17 < sub_63A050((uint64_t)a2, *a3));
  }
  uint64_t v18 = v10 - 11;
  if (v10 - 11 != (long long *)a1)
  {
    long long v19 = (void **)(a1 + 112);
    long long v20 = *(v10 - 10);
    *(_OWORD *)a1 = *v18;
    *(_OWORD *)(a1 + 16) = v20;
    uint64_t v21 = *((void *)v10 - 18);
    *(_DWORD *)(a1 + 40) = *((_DWORD *)v10 - 34);
    *(void *)(a1 + 32) = v21;
    uint64_t v22 = *(void *)((char *)v10 - 132);
    *(void *)(a1 + 49) = *(void *)((char *)v10 - 127);
    *(void *)(a1 + 44) = v22;
    sub_4F377C((uint64_t)v7, (uint64_t)(v10 - 7));
    *(void *)(a1 + 104) = *((void *)v10 - 9);
    if (*(char *)(a1 + 135) < 0) {
      operator delete(*v19);
    }
    char v23 = (void **)(a1 + 144);
    long long v24 = *(v10 - 4);
    *(void *)(a1 + 128) = *((void *)v10 - 6);
    *(_OWORD *)long long v19 = v24;
    *((unsigned char *)v10 - 41) = 0;
    *((unsigned char *)v10 - 64) = 0;
    *(unsigned char *)(a1 + 136) = *((unsigned char *)v10 - 40);
    if (*(char *)(a1 + 167) < 0) {
      operator delete(*v23);
    }
    long long v25 = *(v10 - 2);
    *(void *)(a1 + 160) = *((void *)v10 - 2);
    *(_OWORD *)char v23 = v25;
    *((unsigned char *)v10 - 9) = 0;
    *((unsigned char *)v10 - 32) = 0;
    *(unsigned char *)(a1 + 168) = *((unsigned char *)v10 - 8);
  }
  long long v26 = v37;
  long long *v18 = v36;
  *(v10 - 10) = v26;
  uint64_t v27 = *(void *)v38;
  *((_DWORD *)v10 - 34) = *(_DWORD *)&v38[8];
  *((void *)v10 - 18) = v27;
  uint64_t v28 = *(void *)&v38[12];
  *(void *)((char *)v10 - 127) = *(void *)&v38[17];
  *(void *)((char *)v10 - 132) = v28;
  sub_4F377C((uint64_t)(v10 - 7), (uint64_t)&v39);
  *((void *)v10 - 9) = v44;
  char v29 = (void **)(v10 - 4);
  if (*((char *)v10 - 41) < 0) {
    operator delete(*v29);
  }
  long long v30 = *(_OWORD *)v45;
  *((void *)v10 - 6) = v46;
  *(_OWORD *)char v29 = v30;
  HIBYTE(v46) = 0;
  LOBYTE(v45[0]) = 0;
  *((unsigned char *)v10 - 40) = v47;
  unsigned int v31 = (void **)(v10 - 2);
  if (*((char *)v10 - 9) < 0) {
    operator delete(*v31);
  }
  long long v32 = *(_OWORD *)__p;
  *((void *)v10 - 2) = v49;
  *(_OWORD *)unsigned int v31 = v32;
  HIBYTE(v49) = 0;
  LOBYTE(__p[0]) = 0;
  *((unsigned char *)v10 - 8) = v50;
  if ((SHIBYTE(v49) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v46) & 0x80000000) == 0) {
      goto LABEL_27;
    }
LABEL_32:
    operator delete(v45[0]);
    int v33 = v43;
    if (v43 != 1) {
      goto LABEL_28;
    }
    goto LABEL_33;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v46) < 0) {
    goto LABEL_32;
  }
LABEL_27:
  int v33 = v43;
  if (v43 != 1)
  {
LABEL_28:
    if (!v33 && v42 < 0)
    {
      long long v34 = v40;
LABEL_35:
      operator delete(v34);
      return v10;
    }
    return v10;
  }
LABEL_33:
  long long v34 = v40;
  if (v40)
  {
    uint64_t v41 = v40;
    goto LABEL_35;
  }
  return v10;
}

void sub_8D0AA0(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

long long *sub_8D0AD8(uint64_t a1, unint64_t a2, unsigned int **a3)
{
  long long v6 = *(_OWORD *)(a1 + 16);
  long long v36 = *(_OWORD *)a1;
  long long v37 = v6;
  *(_OWORD *)uint64_t v38 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v38[9] = *(_OWORD *)(a1 + 41);
  uint64_t v7 = (uint64_t *)(a1 + 64);
  uint64_t v8 = (void *)*(unsigned int *)(a1 + 96);
  int v43 = (int)v8;
  sub_4F38B0(v8, v7, &v39);
  uint64_t v9 = 0;
  uint64_t v44 = *(void *)(a1 + 104);
  *(_OWORD *)long long v45 = *(_OWORD *)(a1 + 112);
  uint64_t v46 = *(void *)(a1 + 128);
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  char v47 = *(unsigned char *)(a1 + 136);
  uint64_t v49 = *(void *)(a1 + 160);
  char v50 = *(unsigned char *)(a1 + 168);
  long long v34 = (void **)(a1 + 144);
  double v35 = (void **)(a1 + 112);
  *(_OWORD *)long long __p = *(_OWORD *)(a1 + 144);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 144) = 0;
  do
  {
    uint64_t v10 = sub_63A050(a1 + v9 + 176, *a3);
    v9 += 176;
  }
  while (v10 < sub_63A050((uint64_t)&v36, *a3));
  unint64_t v11 = a1 + v9;
  if (v9 == 176)
  {
    do
    {
      if (v11 >= a2) {
        break;
      }
      a2 -= 176;
      uint64_t v13 = sub_63A050(a2, *a3);
    }
    while (v13 >= sub_63A050((uint64_t)&v36, *a3));
  }
  else
  {
    do
    {
      a2 -= 176;
      uint64_t v12 = sub_63A050(a2, *a3);
    }
    while (v12 >= sub_63A050((uint64_t)&v36, *a3));
  }
  uint64_t v14 = (long long *)(a1 + v9);
  if (v11 < a2)
  {
    uint64_t v15 = (long long *)a2;
    do
    {
      sub_8D1408(v14, v15);
      do
      {
        v14 += 11;
        uint64_t v16 = sub_63A050((uint64_t)v14, *a3);
      }
      while (v16 < sub_63A050((uint64_t)&v36, *a3));
      do
      {
        v15 -= 11;
        uint64_t v17 = sub_63A050((uint64_t)v15, *a3);
      }
      while (v17 >= sub_63A050((uint64_t)&v36, *a3));
    }
    while (v14 < v15);
  }
  uint64_t v18 = v14 - 11;
  if (v14 - 11 != (long long *)a1)
  {
    long long v19 = *(v14 - 10);
    *(_OWORD *)a1 = *v18;
    *(_OWORD *)(a1 + 16) = v19;
    uint64_t v20 = *((void *)v14 - 18);
    *(_DWORD *)(a1 + 40) = *((_DWORD *)v14 - 34);
    *(void *)(a1 + 32) = v20;
    uint64_t v21 = *(void *)((char *)v14 - 132);
    *(void *)(a1 + 49) = *(void *)((char *)v14 - 127);
    *(void *)(a1 + 44) = v21;
    sub_4F377C((uint64_t)v7, (uint64_t)(v14 - 7));
    *(void *)(a1 + 104) = *((void *)v14 - 9);
    if (*(char *)(a1 + 135) < 0) {
      operator delete(*v35);
    }
    long long v22 = *(v14 - 4);
    *(void *)(a1 + 128) = *((void *)v14 - 6);
    *(_OWORD *)double v35 = v22;
    *((unsigned char *)v14 - 41) = 0;
    *((unsigned char *)v14 - 64) = 0;
    *(unsigned char *)(a1 + 136) = *((unsigned char *)v14 - 40);
    if (*(char *)(a1 + 167) < 0) {
      operator delete(*v34);
    }
    long long v23 = *(v14 - 2);
    *(void *)(a1 + 160) = *((void *)v14 - 2);
    *(_OWORD *)long long v34 = v23;
    *((unsigned char *)v14 - 9) = 0;
    *((unsigned char *)v14 - 32) = 0;
    *(unsigned char *)(a1 + 168) = *((unsigned char *)v14 - 8);
  }
  long long v24 = v37;
  long long *v18 = v36;
  *(v14 - 10) = v24;
  uint64_t v25 = *(void *)v38;
  *((_DWORD *)v14 - 34) = *(_DWORD *)&v38[8];
  *((void *)v14 - 18) = v25;
  uint64_t v26 = *(void *)&v38[12];
  *(void *)((char *)v14 - 127) = *(void *)&v38[17];
  *(void *)((char *)v14 - 132) = v26;
  sub_4F377C((uint64_t)(v14 - 7), (uint64_t)&v39);
  *((void *)v14 - 9) = v44;
  uint64_t v27 = (void **)(v14 - 4);
  if (*((char *)v14 - 41) < 0) {
    operator delete(*v27);
  }
  long long v28 = *(_OWORD *)v45;
  *((void *)v14 - 6) = v46;
  *(_OWORD *)uint64_t v27 = v28;
  HIBYTE(v46) = 0;
  LOBYTE(v45[0]) = 0;
  *((unsigned char *)v14 - 40) = v47;
  char v29 = (void **)(v14 - 2);
  if (*((char *)v14 - 9) < 0) {
    operator delete(*v29);
  }
  long long v30 = *(_OWORD *)__p;
  *((void *)v14 - 2) = v49;
  *(_OWORD *)char v29 = v30;
  HIBYTE(v49) = 0;
  LOBYTE(__p[0]) = 0;
  *((unsigned char *)v14 - 8) = v50;
  if ((SHIBYTE(v49) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v46) & 0x80000000) == 0) {
      goto LABEL_26;
    }
LABEL_31:
    operator delete(v45[0]);
    int v31 = v43;
    if (v43 != 1) {
      goto LABEL_27;
    }
    goto LABEL_32;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v46) < 0) {
    goto LABEL_31;
  }
LABEL_26:
  int v31 = v43;
  if (v43 != 1)
  {
LABEL_27:
    if (!v31 && v42 < 0)
    {
      long long v32 = v40;
LABEL_34:
      operator delete(v32);
      return v14 - 11;
    }
    return v14 - 11;
  }
LABEL_32:
  long long v32 = v40;
  if (v40)
  {
    uint64_t v41 = v40;
    goto LABEL_34;
  }
  return v14 - 11;
}

void sub_8D0ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_8D0F00(long long *a1, long long *a2, unsigned int **a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(0x2E8BA2E8BA2E8BA3 * v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      char v29 = a2 - 11;
      uint64_t v30 = sub_63A050((uint64_t)(a2 - 11), *a3);
      if (v30 < sub_63A050((uint64_t)a1, *a3)) {
        sub_8D1408(a1, v29);
      }
      return 1;
    case 3:
      sub_8D0560(a1, a1 + 11, a2 - 11, a3);
      return 1;
    case 4:
      sub_8D16E4(a1, a1 + 11, a1 + 22, a2 - 11, a3);
      return 1;
    case 5:
      sub_8D17DC(a1, a1 + 11, a1 + 22, a1 + 33, a2 - 11, a3);
      return 1;
    default:
      uint64_t v8 = (uint64_t)(a1 + 22);
      sub_8D0560(a1, a1 + 11, a1 + 22, a3);
      uint64_t v9 = (uint64_t)(a1 + 33);
      if (a1 + 33 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    uint64_t v12 = sub_63A050(v9, *a3);
    if (v12 >= sub_63A050(v8, *a3)) {
      goto LABEL_6;
    }
    long long v13 = *(_OWORD *)(v9 + 16);
    long long v31 = *(_OWORD *)v9;
    long long v32 = v13;
    v33[0] = *(_OWORD *)(v9 + 32);
    *(_OWORD *)((char *)v33 + 9) = *(_OWORD *)(v9 + 41);
    unsigned int v38 = *(_DWORD *)(v9 + 96);
    sub_4F38B0((void *)v38, (uint64_t *)(v9 + 64), &v34);
    uint64_t v39 = *(void *)(v9 + 104);
    long long v40 = *(_OWORD *)(v9 + 112);
    uint64_t v41 = *(void *)(v9 + 128);
    *(void *)(v9 + 112) = 0;
    *(void *)(v9 + 120) = 0;
    *(void *)(v9 + 128) = 0;
    char v42 = *(unsigned char *)(v9 + 136);
    long long v43 = *(_OWORD *)(v9 + 144);
    uint64_t v44 = *(void *)(v9 + 160);
    *(void *)(v9 + 152) = 0;
    *(void *)(v9 + 160) = 0;
    char v45 = *(unsigned char *)(v9 + 168);
    uint64_t v14 = v10;
    *(void *)(v9 + 144) = 0;
    while (1)
    {
      uint64_t v15 = (char *)a1 + v14;
      long long v16 = *(long long *)((char *)a1 + v14 + 368);
      *((_OWORD *)v15 + 33) = *(long long *)((char *)a1 + v14 + 352);
      *((_OWORD *)v15 + 34) = v16;
      *((void *)v15 + 70) = *(void *)((char *)a1 + v14 + 384);
      *((_DWORD *)v15 + 142) = *(_DWORD *)((char *)a1 + v14 + 392);
      uint64_t v17 = (void *)((char *)a1 + v14 + 572);
      void *v17 = *(void *)((char *)a1 + v14 + 396);
      *(void *)((char *)v17 + 5) = *(void *)((char *)a1 + v14 + 401);
      sub_4F377C((uint64_t)a1 + v14 + 592, (uint64_t)a1 + v14 + 416);
      *((void *)v15 + 79) = *((void *)v15 + 57);
      uint64_t v18 = (void **)((char *)a1 + v14 + 640);
      if (*((char *)a1 + v14 + 663) < 0) {
        operator delete(*v18);
      }
      *(_OWORD *)uint64_t v18 = *((_OWORD *)v15 + 29);
      *((void *)v15 + 82) = *((void *)v15 + 60);
      v15[487] = 0;
      v15[464] = 0;
      v15[664] = v15[488];
      long long v19 = (void **)(v15 + 672);
      if (v15[695] < 0) {
        operator delete(*v19);
      }
      uint64_t v20 = (char *)a1 + v14;
      *(_OWORD *)long long v19 = *(long long *)((char *)a1 + v14 + 496);
      *((void *)v15 + 86) = *(void *)((char *)a1 + v14 + 512);
      v20[519] = 0;
      v20[496] = 0;
      v20[696] = *((unsigned char *)a1 + v14 + 520);
      if (v14 == -352) {
        break;
      }
      uint64_t v21 = sub_63A050((uint64_t)&v31, *a3);
      v14 -= 176;
      if (v21 >= sub_63A050((uint64_t)(v20 + 176), *a3))
      {
        uint64_t v22 = (uint64_t)a1 + v14 + 528;
        goto LABEL_17;
      }
    }
    uint64_t v22 = (uint64_t)a1;
LABEL_17:
    long long v23 = v32;
    *(_OWORD *)uint64_t v22 = v31;
    *(_OWORD *)(v22 + 16) = v23;
    *((void *)v20 + 48) = *(void *)&v33[0];
    *((_DWORD *)v20 + 98) = DWORD2(v33[0]);
    *(void *)(v20 + 396) = *(void *)((char *)v33 + 12);
    *(void *)(v20 + 401) = *(void *)((char *)&v33[1] + 1);
    sub_4F377C((uint64_t)(v20 + 416), (uint64_t)&v34);
    *(void *)(v22 + 104) = v39;
    long long v24 = (void **)(v20 + 464);
    if (*(char *)(v22 + 135) < 0) {
      operator delete(*v24);
    }
    char v25 = 0;
    uint64_t v26 = (void **)(v20 + 496);
    *(_OWORD *)long long v24 = v40;
    *((void *)v20 + 60) = v41;
    HIBYTE(v41) = 0;
    LOBYTE(v40) = 0;
    *(unsigned char *)(v22 + 136) = v42;
    if (*(char *)(v22 + 167) < 0)
    {
      operator delete(*v26);
      char v25 = HIBYTE(v41);
    }
    *(_OWORD *)uint64_t v26 = v43;
    *((void *)v20 + 64) = v44;
    HIBYTE(v44) = 0;
    LOBYTE(v43) = 0;
    *(unsigned char *)(v22 + 168) = v45;
    if (v25 < 0)
    {
      operator delete((void *)v40);
      unsigned int v27 = v38;
      if (v38 != 1)
      {
LABEL_23:
        if (!v27 && v37 < 0)
        {
          long long v28 = __p;
LABEL_4:
          operator delete(v28);
          goto LABEL_5;
        }
        goto LABEL_5;
      }
    }
    else
    {
      unsigned int v27 = v38;
      if (v38 != 1) {
        goto LABEL_23;
      }
    }
    long long v28 = __p;
    if (__p)
    {
      long long v36 = __p;
      goto LABEL_4;
    }
LABEL_5:
    if (++v11 == 8) {
      return v9 + 176 == (void)a2;
    }
LABEL_6:
    uint64_t v8 = v9;
    v10 += 176;
    v9 += 176;
    if ((long long *)v9 == a2) {
      return 1;
    }
  }
}

void sub_8D13C0(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_8D13DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_639C78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_8D1408(long long *a1, long long *a2)
{
  long long v18 = *a1;
  long long v19 = a1[1];
  *(_OWORD *)uint64_t v20 = a1[2];
  *(_OWORD *)&v20[9] = *(long long *)((char *)a1 + 41);
  uint64_t v4 = (uint64_t *)(a1 + 4);
  uint64_t v5 = (void *)*((unsigned int *)a1 + 24);
  int v25 = (int)v5;
  sub_4F38B0(v5, v4, &v21);
  uint64_t v26 = *((void *)a1 + 13);
  uint64_t v6 = (void **)(a1 + 7);
  *(_OWORD *)long long __p = a1[7];
  uint64_t v28 = *((void *)a1 + 16);
  *((void *)a1 + 15) = 0;
  *((void *)a1 + 16) = 0;
  *((void *)a1 + 14) = 0;
  char v29 = *((unsigned char *)a1 + 136);
  long long v30 = a1[9];
  uint64_t v31 = *((void *)a1 + 20);
  *((void *)a1 + 19) = 0;
  *((void *)a1 + 20) = 0;
  *((void *)a1 + 18) = 0;
  char v32 = *((unsigned char *)a1 + 168);
  long long v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  uint64_t v8 = *((void *)a2 + 4);
  *((_DWORD *)a1 + 10) = *((_DWORD *)a2 + 10);
  *((void *)a1 + 4) = v8;
  uint64_t v9 = *(void *)((char *)a2 + 44);
  *(void *)((char *)a1 + 49) = *(void *)((char *)a2 + 49);
  *(void *)((char *)a1 + 44) = v9;
  sub_4F377C((uint64_t)v4, (uint64_t)(a2 + 4));
  *((void *)a1 + 13) = *((void *)a2 + 13);
  if (*((char *)a1 + 135) < 0) {
    operator delete(*v6);
  }
  uint64_t v10 = (void **)(a1 + 9);
  long long v11 = a2[7];
  *((void *)a1 + 16) = *((void *)a2 + 16);
  *(_OWORD *)uint64_t v6 = v11;
  *((unsigned char *)a2 + 135) = 0;
  *((unsigned char *)a2 + 112) = 0;
  *((unsigned char *)a1 + 136) = *((unsigned char *)a2 + 136);
  if (*((char *)a1 + 167) < 0) {
    operator delete(*v10);
  }
  uint64_t v12 = (void **)(a2 + 7);
  long long v13 = a2[9];
  *((void *)a1 + 20) = *((void *)a2 + 20);
  *(_OWORD *)uint64_t v10 = v13;
  *((unsigned char *)a2 + 167) = 0;
  *((unsigned char *)a2 + 144) = 0;
  *((unsigned char *)a1 + 168) = *((unsigned char *)a2 + 168);
  *a2 = v18;
  a2[1] = v19;
  *((void *)a2 + 4) = *(void *)v20;
  *((_DWORD *)a2 + 10) = *(_DWORD *)&v20[8];
  *(void *)((char *)a2 + 44) = *(void *)&v20[12];
  *(void *)((char *)a2 + 49) = *(void *)&v20[17];
  sub_4F377C((uint64_t)(a2 + 4), (uint64_t)&v21);
  *((void *)a2 + 13) = v26;
  if (*((char *)a2 + 135) < 0) {
    operator delete(*v12);
  }
  uint64_t v14 = a2 + 9;
  *(_OWORD *)uint64_t v12 = *(_OWORD *)__p;
  *((void *)a2 + 16) = v28;
  HIBYTE(v28) = 0;
  LOBYTE(__p[0]) = 0;
  *((unsigned char *)a2 + 136) = v29;
  if (*((char *)a2 + 167) < 0)
  {
    operator delete(*((void **)a2 + 18));
    int v16 = SHIBYTE(v28);
    _OWORD *v14 = v30;
    *((void *)a2 + 20) = v31;
    HIBYTE(v31) = 0;
    LOBYTE(v30) = 0;
    *((unsigned char *)a2 + 168) = v32;
    if (v16 < 0)
    {
      operator delete(__p[0]);
      int v15 = v25;
      if (v25 != 1) {
        goto LABEL_12;
      }
    }
    else
    {
      int v15 = v25;
      if (v25 != 1) {
        goto LABEL_12;
      }
    }
LABEL_16:
    uint64_t v17 = v22;
    if (!v22) {
      return;
    }
    long long v23 = v22;
    goto LABEL_18;
  }
  _OWORD *v14 = v30;
  *((void *)a2 + 20) = v31;
  HIBYTE(v31) = 0;
  LOBYTE(v30) = 0;
  *((unsigned char *)a2 + 168) = v32;
  int v15 = v25;
  if (v25 == 1) {
    goto LABEL_16;
  }
LABEL_12:
  if (!v15 && v24 < 0)
  {
    uint64_t v17 = v22;
LABEL_18:
    operator delete(v17);
  }
}

void sub_8D16D8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_58CC(a1);
}

void sub_8D16E4(long long *a1, long long *a2, long long *a3, long long *a4, unsigned int **a5)
{
  sub_8D0560(a1, a2, a3, a5);
  uint64_t v10 = sub_63A050((uint64_t)a4, *a5);
  if (v10 < sub_63A050((uint64_t)a3, *a5))
  {
    sub_8D1408(a3, a4);
    uint64_t v11 = sub_63A050((uint64_t)a3, *a5);
    if (v11 < sub_63A050((uint64_t)a2, *a5))
    {
      sub_8D1408(a2, a3);
      uint64_t v12 = sub_63A050((uint64_t)a2, *a5);
      if (v12 < sub_63A050((uint64_t)a1, *a5))
      {
        sub_8D1408(a1, a2);
      }
    }
  }
}

void sub_8D17DC(long long *a1, long long *a2, long long *a3, long long *a4, long long *a5, unsigned int **a6)
{
  sub_8D16E4(a1, a2, a3, a4, a6);
  uint64_t v12 = sub_63A050((uint64_t)a5, *a6);
  if (v12 < sub_63A050((uint64_t)a4, *a6))
  {
    sub_8D1408(a4, a5);
    uint64_t v13 = sub_63A050((uint64_t)a4, *a6);
    if (v13 < sub_63A050((uint64_t)a3, *a6))
    {
      sub_8D1408(a3, a4);
      uint64_t v14 = sub_63A050((uint64_t)a3, *a6);
      if (v14 < sub_63A050((uint64_t)a2, *a6))
      {
        sub_8D1408(a2, a3);
        uint64_t v15 = sub_63A050((uint64_t)a2, *a6);
        if (v15 < sub_63A050((uint64_t)a1, *a6))
        {
          sub_8D1408(a1, a2);
        }
      }
    }
  }
}

void sub_8D1914(uint64_t a1, unsigned int **a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    uint64_t v39 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= 0x2E8BA2E8BA2E8BA3 * ((a4 - a1) >> 4))
    {
      uint64_t v8 = (0x5D1745D1745D1746 * ((a4 - a1) >> 4)) | 1;
      uint64_t v9 = a1 + 176 * v8;
      uint64_t v10 = 0x5D1745D1745D1746 * ((a4 - a1) >> 4) + 2;
      if (v10 < a3)
      {
        uint64_t v11 = sub_63A050(a1 + 176 * v8, *a2);
        if (v11 < sub_63A050(v9 + 176, *a2))
        {
          v9 += 176;
          uint64_t v8 = v10;
        }
      }
      uint64_t v12 = sub_63A050(v9, *a2);
      if (v12 >= sub_63A050(v5, *a2))
      {
        long long v13 = *(_OWORD *)(v5 + 16);
        long long v41 = *(_OWORD *)v5;
        long long v42 = v13;
        *(_OWORD *)long long v43 = *(_OWORD *)(v5 + 32);
        *(_OWORD *)&v43[9] = *(_OWORD *)(v5 + 41);
        unsigned int v48 = *(_DWORD *)(v5 + 96);
        uint64_t v38 = a1;
        sub_4F38B0((void *)v48, (uint64_t *)(v5 + 64), &v44);
        uint64_t v49 = *(void *)(v5 + 104);
        *(_OWORD *)long long __p = *(_OWORD *)(v5 + 112);
        uint64_t v51 = *(void *)(v5 + 128);
        *(void *)(v5 + 112) = 0;
        *(void *)(v5 + 120) = 0;
        *(void *)(v5 + 128) = 0;
        char v52 = *(unsigned char *)(v5 + 136);
        long long v53 = *(_OWORD *)(v5 + 144);
        uint64_t v54 = *(void *)(v5 + 160);
        *(void *)(v5 + 152) = 0;
        *(void *)(v5 + 160) = 0;
        char v55 = *(unsigned char *)(v5 + 168);
        *(void *)(v5 + 144) = 0;
        do
        {
          uint64_t v14 = v9;
          long long v15 = *(_OWORD *)(v9 + 16);
          *(_OWORD *)uint64_t v5 = *(_OWORD *)v9;
          *(_OWORD *)(v5 + 16) = v15;
          uint64_t v17 = v9 + 32;
          uint64_t v16 = *(void *)(v9 + 32);
          *(_DWORD *)(v5 + 40) = *(_DWORD *)(v9 + 40);
          *(void *)(v5 + 32) = v16;
          long long v19 = (void *)(v9 + 44);
          uint64_t v18 = *(void *)(v9 + 44);
          *(void *)(v5 + 49) = *(void *)(v9 + 49);
          *(void *)(v5 + 44) = v18;
          uint64_t v20 = v9 + 64;
          sub_4F377C(v5 + 64, v9 + 64);
          *(void *)(v5 + 104) = *(void *)(v9 + 104);
          uint64_t v21 = (void **)(v5 + 112);
          if (*(char *)(v5 + 135) < 0) {
            operator delete(*v21);
          }
          long long v22 = *(_OWORD *)(v9 + 112);
          *(void *)(v5 + 128) = *(void *)(v9 + 128);
          *(_OWORD *)uint64_t v21 = v22;
          *(unsigned char *)(v9 + 135) = 0;
          *(unsigned char *)(v9 + 112) = 0;
          *(unsigned char *)(v5 + 136) = *(unsigned char *)(v9 + 136);
          long long v23 = (void **)(v5 + 144);
          if (*(char *)(v5 + 167) < 0) {
            operator delete(*v23);
          }
          long long v24 = *(_OWORD *)(v9 + 144);
          *(void *)(v5 + 160) = *(void *)(v9 + 160);
          *(_OWORD *)long long v23 = v24;
          *(unsigned char *)(v9 + 167) = 0;
          *(unsigned char *)(v9 + 144) = 0;
          *(unsigned char *)(v5 + 168) = *(unsigned char *)(v9 + 168);
          if (v39 < v8) {
            break;
          }
          uint64_t v25 = (2 * v8) | 1;
          uint64_t v9 = v38 + 176 * v25;
          uint64_t v8 = 2 * v8 + 2;
          if (v8 >= a3)
          {
            uint64_t v8 = v25;
          }
          else
          {
            uint64_t v26 = sub_63A050(v38 + 176 * v25, *a2);
            if (v26 >= sub_63A050(v9 + 176, *a2)) {
              uint64_t v8 = v25;
            }
            else {
              v9 += 176;
            }
          }
          uint64_t v27 = sub_63A050(v9, *a2);
          uint64_t v5 = v14;
        }
        while (v27 >= sub_63A050((uint64_t)&v41, *a2));
        uint64_t v28 = (void **)(v14 + 112);
        long long v29 = v42;
        *(_OWORD *)uint64_t v14 = v41;
        *(_OWORD *)(v14 + 16) = v29;
        uint64_t v30 = *(void *)v43;
        *(_DWORD *)(v17 + 8) = *(_DWORD *)&v43[8];
        *(void *)uint64_t v17 = v30;
        uint64_t v31 = *(void *)&v43[12];
        *(void *)((char *)v19 + 5) = *(void *)&v43[17];
        *long long v19 = v31;
        sub_4F377C(v20, (uint64_t)&v44);
        *(void *)(v14 + 104) = v49;
        if (*(char *)(v14 + 135) < 0) {
          operator delete(*v28);
        }
        char v32 = (_OWORD *)(v14 + 144);
        long long v33 = *(_OWORD *)__p;
        *(void *)(v14 + 128) = v51;
        *(_OWORD *)uint64_t v28 = v33;
        HIBYTE(v51) = 0;
        LOBYTE(__p[0]) = 0;
        *(unsigned char *)(v14 + 136) = v52;
        if (*(char *)(v14 + 167) < 0)
        {
          operator delete(*(void **)(v14 + 144));
          int v35 = SHIBYTE(v51);
          long long v36 = v53;
          *(void *)(v14 + 160) = v54;
          _OWORD *v32 = v36;
          HIBYTE(v54) = 0;
          LOBYTE(v53) = 0;
          *(unsigned char *)(v14 + 168) = v55;
          if (v35 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v34 = v53;
          *(void *)(v14 + 160) = v54;
          _OWORD *v32 = v34;
          HIBYTE(v54) = 0;
          LOBYTE(v53) = 0;
          *(unsigned char *)(v14 + 168) = v55;
        }
        if (v48 == 1)
        {
          char v37 = v45;
          if (!v45) {
            return;
          }
          uint64_t v46 = v45;
          goto LABEL_31;
        }
        if (!v48 && v47 < 0)
        {
          char v37 = v45;
LABEL_31:
          operator delete(v37);
        }
      }
    }
  }
}

void sub_8D1D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_8D1D40(uint64_t a1, uint64_t a2, unsigned int **a3, uint64_t a4)
{
  if (a4 < 2) {
    return;
  }
  long long v32 = *(_OWORD *)a1;
  long long v33 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)long long v34 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v34[9] = *(_OWORD *)(a1 + 41);
  uint64_t v8 = (uint64_t *)(a1 + 64);
  uint64_t v9 = (void *)*(unsigned int *)(a1 + 96);
  int v39 = (int)v9;
  sub_4F38B0(v9, v8, &v35);
  uint64_t v40 = *(void *)(a1 + 104);
  *(_OWORD *)long long v41 = *(_OWORD *)(a1 + 112);
  uint64_t v42 = *(void *)(a1 + 128);
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  char v43 = *(unsigned char *)(a1 + 136);
  *(_OWORD *)long long __p = *(_OWORD *)(a1 + 144);
  uint64_t v45 = *(void *)(a1 + 160);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 144) = 0;
  char v46 = *(unsigned char *)(a1 + 168);
  uint64_t v10 = sub_8D213C(a1, a3, a4);
  uint64_t v11 = (_OWORD *)(a2 - 176);
  uint64_t v12 = (void *)(v10 + 32);
  long long v13 = (void *)(v10 + 44);
  uint64_t v14 = v10 + 64;
  if (v10 == a2 - 176)
  {
    *(_OWORD *)uint64_t v10 = v32;
    *(_OWORD *)(v10 + 16) = v33;
    *(_DWORD *)(v10 + 40) = *(_DWORD *)&v34[8];
    void *v12 = *(void *)v34;
    *(void *)(v10 + 49) = *(void *)&v34[17];
    *long long v13 = *(void *)&v34[12];
    sub_4F377C(v14, (uint64_t)&v35);
    *(void *)(v10 + 104) = v40;
    uint64_t v27 = (void **)(v10 + 112);
    if (*(char *)(v10 + 135) < 0) {
      operator delete(*v27);
    }
    long long v28 = *(_OWORD *)v41;
    *(void *)(v10 + 128) = v42;
    *(_OWORD *)uint64_t v27 = v28;
    HIBYTE(v42) = 0;
    LOBYTE(v41[0]) = 0;
    *(unsigned char *)(v10 + 136) = v43;
    long long v29 = (void **)(v10 + 144);
    if (*(char *)(v10 + 167) < 0) {
      operator delete(*v29);
    }
    long long v30 = *(_OWORD *)__p;
    *(void *)(v10 + 160) = v45;
    *(_OWORD *)long long v29 = v30;
    HIBYTE(v45) = 0;
    LOBYTE(__p[0]) = 0;
    *(unsigned char *)(v10 + 168) = v46;
    if (SHIBYTE(v42) < 0) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v31 = a3;
    long long v15 = *(_OWORD *)(a2 - 160);
    *(_OWORD *)uint64_t v10 = *v11;
    *(_OWORD *)(v10 + 16) = v15;
    uint64_t v16 = *(void *)(a2 - 144);
    *(_DWORD *)(v10 + 40) = *(_DWORD *)(a2 - 136);
    void *v12 = v16;
    uint64_t v17 = *(void *)(a2 - 132);
    *(void *)(v10 + 49) = *(void *)(a2 - 127);
    *long long v13 = v17;
    sub_4F377C(v14, a2 - 112);
    *(void *)(v10 + 104) = *(void *)(a2 - 72);
    uint64_t v18 = (void **)(v10 + 112);
    if (*(char *)(v10 + 135) < 0) {
      operator delete(*v18);
    }
    long long v19 = (void **)(a2 - 64);
    long long v20 = *(_OWORD *)(a2 - 64);
    *(void *)(v10 + 128) = *(void *)(a2 - 48);
    *(_OWORD *)uint64_t v18 = v20;
    *(unsigned char *)(a2 - 41) = 0;
    *(unsigned char *)(a2 - 64) = 0;
    *(unsigned char *)(v10 + 136) = *(unsigned char *)(a2 - 40);
    uint64_t v21 = (void **)(v10 + 144);
    if (*(char *)(v10 + 167) < 0) {
      operator delete(*v21);
    }
    long long v22 = (void **)(a2 - 32);
    long long v23 = *(_OWORD *)(a2 - 32);
    *(void *)(v10 + 160) = *(void *)(a2 - 16);
    *(_OWORD *)uint64_t v21 = v23;
    *(unsigned char *)(a2 - 9) = 0;
    *(unsigned char *)(a2 - 32) = 0;
    *(unsigned char *)(v10 + 168) = *(unsigned char *)(a2 - 8);
    uint64_t v24 = v10 + 176;
    *uint64_t v11 = v32;
    *(_OWORD *)(a2 - 160) = v33;
    *(void *)(a2 - 144) = *(void *)v34;
    *(_DWORD *)(a2 - 136) = *(_DWORD *)&v34[8];
    *(void *)(a2 - 132) = *(void *)&v34[12];
    *(void *)(a2 - 127) = *(void *)&v34[17];
    sub_4F377C(a2 - 112, (uint64_t)&v35);
    *(void *)(a2 - 72) = v40;
    if (*(char *)(a2 - 41) < 0) {
      operator delete(*v19);
    }
    *(_OWORD *)long long v19 = *(_OWORD *)v41;
    *(void *)(a2 - 48) = v42;
    HIBYTE(v42) = 0;
    LOBYTE(v41[0]) = 0;
    *(unsigned char *)(a2 - 40) = v43;
    if (*(char *)(a2 - 9) < 0) {
      operator delete(*v22);
    }
    *(_OWORD *)long long v22 = *(_OWORD *)__p;
    *(void *)(a2 - 16) = v45;
    HIBYTE(v45) = 0;
    LOBYTE(__p[0]) = 0;
    *(unsigned char *)(a2 - 8) = v46;
    sub_8D22A8(a1, v24, v31, 0x2E8BA2E8BA2E8BA3 * ((v24 - a1) >> 4));
    if ((SHIBYTE(v45) & 0x80000000) == 0)
    {
      if ((SHIBYTE(v42) & 0x80000000) == 0) {
        goto LABEL_13;
      }
LABEL_24:
      operator delete(v41[0]);
      int v25 = v39;
      if (v39 != 1) {
        goto LABEL_14;
      }
LABEL_25:
      uint64_t v26 = v36;
      if (!v36) {
        return;
      }
      char v37 = v36;
      goto LABEL_27;
    }
    operator delete(__p[0]);
    if (SHIBYTE(v42) < 0) {
      goto LABEL_24;
    }
  }
LABEL_13:
  int v25 = v39;
  if (v39 == 1) {
    goto LABEL_25;
  }
LABEL_14:
  if (!v25 && v38 < 0)
  {
    uint64_t v26 = v36;
LABEL_27:
    operator delete(v26);
  }
}

void sub_8D2118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_8D213C(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v10 = a1 + 176 * v6 + 176;
    uint64_t v11 = 2 * v6;
    uint64_t v6 = (2 * v6) | 1;
    uint64_t v12 = v11 + 2;
    if (v11 + 2 < a3)
    {
      uint64_t v13 = sub_63A050(v10, *a2);
      if (v13 < sub_63A050(v10 + 176, *a2))
      {
        v10 += 176;
        uint64_t v6 = v12;
      }
    }
    long long v14 = *(_OWORD *)(v10 + 16);
    *(_OWORD *)a1 = *(_OWORD *)v10;
    *(_OWORD *)(a1 + 16) = v14;
    uint64_t v15 = *(void *)(v10 + 32);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(v10 + 40);
    *(void *)(a1 + 32) = v15;
    uint64_t v16 = *(void *)(v10 + 44);
    *(void *)(a1 + 49) = *(void *)(v10 + 49);
    *(void *)(a1 + 44) = v16;
    sub_4F377C(a1 + 64, v10 + 64);
    *(void *)(a1 + 104) = *(void *)(v10 + 104);
    uint64_t v17 = (void **)(a1 + 112);
    if (*(char *)(a1 + 135) < 0) {
      operator delete(*v17);
    }
    long long v18 = *(_OWORD *)(v10 + 112);
    *(void *)(a1 + 128) = *(void *)(v10 + 128);
    *(_OWORD *)uint64_t v17 = v18;
    *(unsigned char *)(v10 + 135) = 0;
    *(unsigned char *)(v10 + 112) = 0;
    *(unsigned char *)(a1 + 136) = *(unsigned char *)(v10 + 136);
    long long v19 = (void **)(a1 + 144);
    if (*(char *)(a1 + 167) < 0) {
      operator delete(*v19);
    }
    long long v9 = *(_OWORD *)(v10 + 144);
    *(void *)(a1 + 160) = *(void *)(v10 + 160);
    *(_OWORD *)long long v19 = v9;
    *(unsigned char *)(v10 + 167) = 0;
    *(unsigned char *)(v10 + 144) = 0;
    *(unsigned char *)(a1 + 168) = *(unsigned char *)(v10 + 168);
    a1 = v10;
  }
  while (v6 <= v8);
  return v10;
}

void sub_8D22A8(uint64_t a1, uint64_t a2, unsigned int **a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v7 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v8 = a1 + 176 * v7;
    uint64_t v9 = a2 - 176;
    uint64_t v10 = sub_63A050(v8, *a3);
    if (v10 < sub_63A050(v9, *a3))
    {
      long long v11 = *(_OWORD *)(v9 + 16);
      long long v29 = *(_OWORD *)v9;
      long long v30 = v11;
      *(_OWORD *)uint64_t v31 = *(_OWORD *)(v9 + 32);
      *(_OWORD *)&v31[9] = *(_OWORD *)(v9 + 41);
      unsigned int v36 = *(_DWORD *)(a2 - 80);
      sub_4F38B0((void *)v36, (uint64_t *)(a2 - 112), &v32);
      uint64_t v37 = *(void *)(a2 - 72);
      *(_OWORD *)long long __p = *(_OWORD *)(a2 - 64);
      uint64_t v39 = *(void *)(a2 - 48);
      *(void *)(a2 - 64) = 0;
      *(void *)(a2 - 56) = 0;
      *(void *)(a2 - 48) = 0;
      char v40 = *(unsigned char *)(a2 - 40);
      long long v41 = *(_OWORD *)(a2 - 32);
      uint64_t v42 = *(void *)(a2 - 16);
      *(void *)(a2 - 24) = 0;
      *(void *)(a2 - 16) = 0;
      *(void *)(a2 - 32) = 0;
      char v43 = *(unsigned char *)(a2 - 8);
      do
      {
        uint64_t v12 = v8;
        long long v13 = *(_OWORD *)(v8 + 16);
        *(_OWORD *)uint64_t v9 = *(_OWORD *)v8;
        *(_OWORD *)(v9 + 16) = v13;
        uint64_t v15 = v8 + 32;
        uint64_t v14 = *(void *)(v8 + 32);
        *(_DWORD *)(v9 + 40) = *(_DWORD *)(v8 + 40);
        *(void *)(v9 + 32) = v14;
        uint64_t v17 = (void *)(v8 + 44);
        uint64_t v16 = *(void *)(v8 + 44);
        *(void *)(v9 + 49) = *(void *)(v8 + 49);
        *(void *)(v9 + 44) = v16;
        uint64_t v18 = v8 + 64;
        sub_4F377C(v9 + 64, v8 + 64);
        *(void *)(v9 + 104) = *(void *)(v8 + 104);
        long long v19 = (void **)(v9 + 112);
        if (*(char *)(v9 + 135) < 0) {
          operator delete(*v19);
        }
        long long v20 = *(_OWORD *)(v12 + 112);
        *(void *)(v9 + 128) = *(void *)(v12 + 128);
        *(_OWORD *)long long v19 = v20;
        *(unsigned char *)(v12 + 135) = 0;
        *(unsigned char *)(v12 + 112) = 0;
        *(unsigned char *)(v9 + 136) = *(unsigned char *)(v12 + 136);
        uint64_t v21 = (void **)(v9 + 144);
        if (*(char *)(v9 + 167) < 0) {
          operator delete(*v21);
        }
        long long v22 = *(_OWORD *)(v12 + 144);
        *(void *)(v9 + 160) = *(void *)(v12 + 160);
        *(_OWORD *)uint64_t v21 = v22;
        *(unsigned char *)(v12 + 167) = 0;
        *(unsigned char *)(v12 + 144) = 0;
        *(unsigned char *)(v9 + 168) = *(unsigned char *)(v12 + 168);
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = a1 + 176 * v7;
        uint64_t v23 = sub_63A050(v8, *a3);
        uint64_t v9 = v12;
      }
      while (v23 < sub_63A050((uint64_t)&v29, *a3));
      uint64_t v24 = (void **)(v12 + 112);
      long long v25 = v30;
      *(_OWORD *)uint64_t v12 = v29;
      *(_OWORD *)(v12 + 16) = v25;
      *(void *)uint64_t v15 = *(void *)v31;
      *(_DWORD *)(v15 + 8) = *(_DWORD *)&v31[8];
      void *v17 = *(void *)&v31[12];
      *(void *)((char *)v17 + 5) = *(void *)&v31[17];
      sub_4F377C(v18, (uint64_t)&v32);
      *(void *)(v12 + 104) = v37;
      if (*(char *)(v12 + 135) < 0) {
        operator delete(*v24);
      }
      uint64_t v26 = (_OWORD *)(v12 + 144);
      *(_OWORD *)uint64_t v24 = *(_OWORD *)__p;
      *(void *)(v12 + 128) = v39;
      HIBYTE(v39) = 0;
      LOBYTE(__p[0]) = 0;
      *(unsigned char *)(v12 + 136) = v40;
      if (*(char *)(v12 + 167) < 0)
      {
        operator delete(*(void **)(v12 + 144));
        int v27 = SHIBYTE(v39);
        _OWORD *v26 = v41;
        *(void *)(v12 + 160) = v42;
        HIBYTE(v42) = 0;
        LOBYTE(v41) = 0;
        *(unsigned char *)(v12 + 168) = v43;
        if (v27 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        _OWORD *v26 = v41;
        *(void *)(v12 + 160) = v42;
        HIBYTE(v42) = 0;
        LOBYTE(v41) = 0;
        *(unsigned char *)(v12 + 168) = v43;
      }
      if (v36 == 1)
      {
        long long v28 = v33;
        if (!v33) {
          return;
        }
        long long v34 = v33;
        goto LABEL_22;
      }
      if (!v36 && v35 < 0)
      {
        long long v28 = v33;
LABEL_22:
        operator delete(v28);
      }
    }
  }
}

void sub_8D25EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_8D2610(long long *a1, long long *a2, unsigned int **a3, uint64_t a4, char a5)
{
void sub_8D2A8C(uint64_t a1, long long *a2, unsigned int **a3)
{
  if ((long long *)a1 != a2)
  {
    uint64_t v5 = a1 + 176;
    if ((long long *)(a1 + 176) != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = a1;
      do
      {
        uint64_t v9 = (long long *)v5;
        uint64_t v10 = sub_63A050(v5, *a3);
        if (v10 >= sub_63A050(v8, *a3)) {
          goto LABEL_5;
        }
        long long v11 = v9[1];
        long long v36 = *v9;
        long long v37 = v11;
        v38[0] = v9[2];
        *(_OWORD *)((char *)v38 + 9) = *(long long *)((char *)v9 + 41);
        unsigned int v43 = *(_DWORD *)(v8 + 272);
        sub_4F38B0((void *)v43, (uint64_t *)(v8 + 240), &v39);
        uint64_t v44 = *(void *)(v8 + 280);
        long long v45 = *(_OWORD *)(v8 + 288);
        uint64_t v46 = *(void *)(v8 + 304);
        *(void *)(v8 + 288) = 0;
        *(void *)(v8 + 296) = 0;
        *(void *)(v8 + 304) = 0;
        char v47 = *(unsigned char *)(v8 + 312);
        long long v48 = *(_OWORD *)(v8 + 320);
        uint64_t v49 = *(void *)(v8 + 336);
        *(void *)(v8 + 328) = 0;
        *(void *)(v8 + 336) = 0;
        *(void *)(v8 + 320) = 0;
        uint64_t v12 = v7;
        char v50 = *(unsigned char *)(v8 + 344);
        while (1)
        {
          uint64_t v13 = a1 + v12;
          long long v14 = *(_OWORD *)(a1 + v12 + 16);
          *(_OWORD *)(v13 + 176) = *(_OWORD *)(a1 + v12);
          *(_OWORD *)(v13 + 192) = v14;
          *(void *)(v13 + 208) = *(void *)(a1 + v12 + 32);
          *(_DWORD *)(v13 + 216) = *(_DWORD *)(a1 + v12 + 40);
          *(void *)(v13 + 220) = *(void *)(a1 + v12 + 44);
          *(void *)(v13 + 225) = *(void *)(a1 + v12 + 49);
          unint64_t v15 = (void *)(a1 + v12 + 240);
          unint64_t v16 = (void *)(a1 + v12 + 64);
          int v17 = *(_DWORD *)(a1 + v12 + 272);
          if (v17 != *(_DWORD *)(a1 + v12 + 96))
          {
            if (v17 == 1)
            {
              long long v20 = *(void **)(a1 + v12 + 248);
              if (v20)
              {
                *(void *)(a1 + v12 + 256) = v20;
LABEL_23:
                operator delete(v20);
              }
            }
            else if (!v17 && *(char *)(a1 + v12 + 271) < 0)
            {
              long long v20 = *(void **)(a1 + v12 + 248);
              goto LABEL_23;
            }
            sub_4F38B0((void *)*(unsigned int *)(v13 + 96), (uint64_t *)(a1 + v12 + 64), (void *)(a1 + v12 + 240));
            *(_DWORD *)(v13 + 272) = *(_DWORD *)(v13 + 96);
            goto LABEL_25;
          }
          if (v17 == 1)
          {
            void *v15 = *v16;
            uint64_t v21 = a1 + v12;
            char v23 = (void **)(a1 + v12 + 248);
            long long v22 = *v23;
            if (*v23)
            {
              *(void *)(v21 + 256) = v22;
              operator delete(v22);
              void *v23 = 0;
              *(void *)(a1 + v12 + 256) = 0;
              *(void *)(a1 + v12 + 264) = 0;
            }
            *(_OWORD *)char v23 = *(_OWORD *)(v21 + 72);
            *(void *)(v21 + 264) = *(void *)(v21 + 88);
            *(void *)(v21 + 80) = 0;
            *(void *)(v21 + 88) = 0;
            *(void *)(v21 + 72) = 0;
          }
          else if (!v17)
          {
            void *v15 = *v16;
            uint64_t v18 = a1 + v12;
            long long v19 = (void **)(a1 + v12 + 248);
            if (*(char *)(a1 + v12 + 271) < 0) {
              operator delete(*v19);
            }
            *(_OWORD *)long long v19 = *(_OWORD *)(v18 + 72);
            *(void *)(a1 + v12 + 264) = *(void *)(v18 + 88);
            *(unsigned char *)(v18 + 95) = 0;
            *(unsigned char *)(v18 + 72) = 0;
          }
LABEL_25:
          uint64_t v24 = a1 + v12;
          *(void *)(a1 + v12 + 280) = *(void *)(a1 + v12 + 104);
          uint64_t v25 = (void **)(a1 + v12 + 288);
          if (*(char *)(a1 + v12 + 311) < 0) {
            operator delete(*v25);
          }
          *(_OWORD *)uint64_t v25 = *(_OWORD *)(v24 + 112);
          *(void *)(a1 + v12 + 304) = *(void *)(v24 + 128);
          *(unsigned char *)(v24 + 135) = 0;
          *(unsigned char *)(v24 + 112) = 0;
          *(unsigned char *)(v24 + 312) = *(unsigned char *)(v24 + 136);
          unint64_t v26 = (void **)(v24 + 320);
          if (*(char *)(v24 + 343) < 0) {
            operator delete(*v26);
          }
          uint64_t v27 = a1 + v12;
          *(_OWORD *)unint64_t v26 = *(_OWORD *)(a1 + v12 + 144);
          *(void *)(v24 + 336) = *(void *)(a1 + v12 + 160);
          *(unsigned char *)(v27 + 167) = 0;
          *(unsigned char *)(v27 + 144) = 0;
          *(unsigned char *)(v27 + 344) = *(unsigned char *)(a1 + v12 + 168);
          if (!v12) {
            break;
          }
          uint64_t v28 = sub_63A050((uint64_t)&v36, *a3);
          v12 -= 176;
          if (v28 >= sub_63A050(v27 - 176, *a3))
          {
            uint64_t v29 = a1 + v12 + 176;
            goto LABEL_33;
          }
        }
        uint64_t v29 = a1;
LABEL_33:
        long long v30 = v37;
        *(_OWORD *)uint64_t v29 = v36;
        *(_OWORD *)(v29 + 16) = v30;
        *(void *)(v27 + 32) = *(void *)&v38[0];
        *(_DWORD *)(v27 + 40) = DWORD2(v38[0]);
        *(void *)(v27 + 44) = *(void *)((char *)v38 + 12);
        *(void *)(v27 + 49) = *(void *)((char *)&v38[1] + 1);
        sub_4F377C(v27 + 64, (uint64_t)&v39);
        *(void *)(v29 + 104) = v44;
        uint64_t v31 = (void **)(v27 + 112);
        if (*(char *)(v29 + 135) < 0) {
          operator delete(*v31);
        }
        char v32 = 0;
        long long v33 = (void **)(v27 + 144);
        *(_OWORD *)uint64_t v31 = v45;
        *(void *)(v27 + 128) = v46;
        HIBYTE(v46) = 0;
        LOBYTE(v45) = 0;
        *(unsigned char *)(v29 + 136) = v47;
        if (*(char *)(v29 + 167) < 0)
        {
          operator delete(*v33);
          char v32 = HIBYTE(v46);
        }
        *(_OWORD *)long long v33 = v48;
        *(void *)(v27 + 160) = v49;
        HIBYTE(v49) = 0;
        LOBYTE(v48) = 0;
        *(unsigned char *)(v29 + 168) = v50;
        if (v32 < 0)
        {
          operator delete((void *)v45);
          unsigned int v34 = v43;
          if (v43 != 1) {
            goto LABEL_39;
          }
        }
        else
        {
          unsigned int v34 = v43;
          if (v43 != 1)
          {
LABEL_39:
            if (!v34 && v42 < 0)
            {
              char v35 = __p;
              goto LABEL_4;
            }
            goto LABEL_5;
          }
        }
        char v35 = __p;
        if (__p)
        {
          long long v41 = __p;
LABEL_4:
          operator delete(v35);
        }
LABEL_5:
        uint64_t v5 = (uint64_t)(v9 + 11);
        v7 += 176;
        uint64_t v8 = (uint64_t)v9;
      }
      while (v9 + 11 != a2);
    }
  }
}

void sub_8D2ED4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_58CC(exception_object);
}

void sub_8D2EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_639C78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_8D2F08(uint64_t a1, long long *a2, unsigned int **a3)
{
  if ((long long *)a1 != a2)
  {
    uint64_t v4 = a1;
    uint64_t v5 = a1 + 176;
    if ((long long *)(a1 + 176) != a2)
    {
      uint64_t v7 = a1 + 88;
      do
      {
        uint64_t v8 = (long long *)v5;
        uint64_t v9 = sub_63A050(v5, *a3);
        if (v9 >= sub_63A050(v4, *a3)) {
          goto LABEL_5;
        }
        long long v10 = v8[1];
        long long v33 = *v8;
        long long v34 = v10;
        v35[0] = v8[2];
        *(_OWORD *)((char *)v35 + 9) = *(long long *)((char *)v8 + 41);
        unsigned int v40 = *(_DWORD *)(v4 + 272);
        sub_4F38B0((void *)v40, (uint64_t *)(v4 + 240), &v36);
        uint64_t v41 = *(void *)(v4 + 280);
        long long v42 = *(_OWORD *)(v4 + 288);
        uint64_t v43 = *(void *)(v4 + 304);
        *(void *)(v4 + 288) = 0;
        *(void *)(v4 + 296) = 0;
        *(void *)(v4 + 304) = 0;
        char v44 = *(unsigned char *)(v4 + 312);
        long long v45 = *(_OWORD *)(v4 + 320);
        uint64_t v46 = *(void *)(v4 + 336);
        *(void *)(v4 + 328) = 0;
        *(void *)(v4 + 336) = 0;
        *(void *)(v4 + 320) = 0;
        uint64_t v11 = v7;
        char v47 = *(unsigned char *)(v4 + 344);
        do
        {
          *(_OWORD *)(v11 + 88) = *(_OWORD *)(v11 - 88);
          *(_OWORD *)(v11 + 104) = *(_OWORD *)(v11 - 72);
          *(void *)(v11 + 120) = *(void *)(v11 - 56);
          *(_DWORD *)(v11 + 128) = *(_DWORD *)(v11 - 48);
          *(void *)(v11 + 132) = *(void *)(v11 - 44);
          *(void *)(v11 + 137) = *(void *)(v11 - 39);
          int v12 = *(_DWORD *)(v11 + 184);
          int v13 = *(_DWORD *)(v11 + 8);
          if (v12 == v13)
          {
            if (v12 == 1)
            {
              unint64_t v16 = *(void **)(v11 + 160);
              *(void *)(v11 + 152) = *(void *)(v11 - 24);
              if (v16)
              {
                *(void *)(v11 + 168) = v16;
                operator delete(v16);
                *(void *)(v11 + 160) = 0;
                *(void *)(v11 + 168) = 0;
                *(void *)(v11 + 176) = 0;
              }
              *(_OWORD *)(v11 + 160) = *(_OWORD *)(v11 - 16);
              *(void *)(v11 + 176) = *(void *)v11;
              *(void *)(v11 - 8) = 0;
              *(void *)uint64_t v11 = 0;
              *(void *)(v11 - 16) = 0;
            }
            else if (!v12)
            {
              *(void *)(v11 + 152) = *(void *)(v11 - 24);
              long long v14 = (void **)(v11 + 160);
              if (*(char *)(v11 + 183) < 0) {
                operator delete(*v14);
              }
              *(_OWORD *)long long v14 = *(_OWORD *)(v11 - 16);
              *(void *)(v11 + 176) = *(void *)v11;
              *(unsigned char *)(v11 + 7) = 0;
              *(unsigned char *)(v11 - 16) = 0;
            }
            goto LABEL_34;
          }
          if (v12 == 1)
          {
            unint64_t v15 = *(void **)(v11 + 160);
            if (v15)
            {
              *(void *)(v11 + 168) = v15;
LABEL_23:
              operator delete(v15);
            }
LABEL_24:
            int v13 = *(_DWORD *)(v11 + 8);
            goto LABEL_25;
          }
          if (!v12)
          {
            if (*(char *)(v11 + 183) < 0)
            {
              unint64_t v15 = *(void **)(v11 + 160);
              goto LABEL_23;
            }
            goto LABEL_24;
          }
LABEL_25:
          if (v13 == 1)
          {
            uint64_t v18 = *(unsigned char **)(v11 - 16);
            *(void *)(v11 + 152) = *(void *)(v11 - 24);
            *(void *)(v11 + 160) = 0;
            *(void *)(v11 + 168) = 0;
            *(void *)(v11 + 176) = 0;
            long long v19 = *(unsigned char **)(v11 - 8);
            int64_t v20 = v19 - v18;
            if (v19 != v18)
            {
              if (v20 < 0) {
                sub_2E00();
              }
              uint64_t v21 = (char *)operator new(v19 - v18);
              *(void *)(v11 + 160) = v21;
              *(void *)(v11 + 168) = v21;
              long long v22 = &v21[8 * (v20 >> 3)];
              *(void *)(v11 + 176) = v22;
              memcpy(v21, v18, v20);
              *(void *)(v11 + 168) = v22;
            }
          }
          else if (!v13)
          {
            *(void *)(v11 + 152) = *(void *)(v11 - 24);
            int v17 = (unsigned char *)(v11 + 160);
            if (*(char *)(v11 + 7) < 0)
            {
              sub_4200(v17, *(void **)(v11 - 16), *(void *)(v11 - 8));
            }
            else
            {
              *(_OWORD *)int v17 = *(_OWORD *)(v11 - 16);
              *(void *)(v11 + 176) = *(void *)v11;
            }
          }
          *(_DWORD *)(v11 + 184) = *(_DWORD *)(v11 + 8);
LABEL_34:
          *(void *)(v11 + 192) = *(void *)(v11 + 16);
          char v23 = (void **)(v11 + 200);
          if (*(char *)(v11 + 223) < 0) {
            operator delete(*v23);
          }
          *(_OWORD *)char v23 = *(_OWORD *)(v11 + 24);
          *(void *)(v11 + 216) = *(void *)(v11 + 40);
          *(unsigned char *)(v11 + 47) = 0;
          *(unsigned char *)(v11 + 24) = 0;
          *(unsigned char *)(v11 + 224) = *(unsigned char *)(v11 + 48);
          uint64_t v24 = (void **)(v11 + 232);
          if (*(char *)(v11 + 255) < 0) {
            operator delete(*v24);
          }
          *(_OWORD *)uint64_t v24 = *(_OWORD *)(v11 + 56);
          *(void *)(v11 + 248) = *(void *)(v11 + 72);
          *(unsigned char *)(v11 + 79) = 0;
          *(unsigned char *)(v11 + 56) = 0;
          *(unsigned char *)(v11 + 256) = *(unsigned char *)(v11 + 80);
          uint64_t v25 = sub_63A050((uint64_t)&v33, *a3);
          uint64_t v26 = sub_63A050(v11 - 264, *a3);
          v11 -= 176;
        }
        while (v25 < v26);
        long long v27 = v34;
        *(_OWORD *)(v11 + 88) = v33;
        *(_OWORD *)(v11 + 104) = v27;
        *(void *)(v11 + 120) = *(void *)&v35[0];
        *(_DWORD *)(v11 + 128) = DWORD2(v35[0]);
        *(void *)(v11 + 132) = *(void *)((char *)v35 + 12);
        *(void *)(v11 + 137) = *(void *)((char *)&v35[1] + 1);
        sub_4F377C(v11 + 152, (uint64_t)&v36);
        *(void *)(v11 + 192) = v41;
        uint64_t v28 = (void **)(v11 + 200);
        if (*(char *)(v11 + 223) < 0) {
          operator delete(*v28);
        }
        char v29 = 0;
        long long v30 = (void **)(v11 + 232);
        *(_OWORD *)uint64_t v28 = v42;
        *(void *)(v11 + 216) = v43;
        HIBYTE(v43) = 0;
        LOBYTE(v42) = 0;
        *(unsigned char *)(v11 + 224) = v44;
        if (*(char *)(v11 + 255) < 0)
        {
          operator delete(*v30);
          char v29 = HIBYTE(v43);
        }
        *(_OWORD *)long long v30 = v45;
        *(void *)(v11 + 248) = v46;
        HIBYTE(v46) = 0;
        LOBYTE(v45) = 0;
        *(unsigned char *)(v11 + 256) = v47;
        if (v29 < 0)
        {
          operator delete((void *)v42);
          unsigned int v31 = v40;
          if (v40 != 1) {
            goto LABEL_45;
          }
        }
        else
        {
          unsigned int v31 = v40;
          if (v40 != 1)
          {
LABEL_45:
            if (!v31 && v39 < 0)
            {
              char v32 = __p;
              goto LABEL_4;
            }
            goto LABEL_5;
          }
        }
        char v32 = __p;
        if (__p)
        {
          char v38 = __p;
LABEL_4:
          operator delete(v32);
        }
LABEL_5:
        uint64_t v5 = (uint64_t)(v8 + 11);
        v7 += 176;
        uint64_t v4 = (uint64_t)v8;
      }
      while (v8 + 11 != a2);
    }
  }
}

void sub_8D339C(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_8D33E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_639C78((uint64_t)va);
  _Unwind_Resume(a1);
}

long long *sub_8D33F8(uint64_t a1, long long *a2, unsigned int **a3)
{
  long long v6 = *(_OWORD *)(a1 + 16);
  long long v36 = *(_OWORD *)a1;
  long long v37 = v6;
  *(_OWORD *)char v38 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v38[9] = *(_OWORD *)(a1 + 41);
  uint64_t v7 = (uint64_t *)(a1 + 64);
  uint64_t v8 = (void *)*(unsigned int *)(a1 + 96);
  int v43 = (int)v8;
  sub_4F38B0(v8, v7, &v39);
  uint64_t v44 = *(void *)(a1 + 104);
  *(_OWORD *)long long v45 = *(_OWORD *)(a1 + 112);
  uint64_t v46 = *(void *)(a1 + 128);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = 0;
  char v47 = *(unsigned char *)(a1 + 136);
  *(_OWORD *)long long __p = *(_OWORD *)(a1 + 144);
  uint64_t v49 = *(void *)(a1 + 160);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 144) = 0;
  char v50 = *(unsigned char *)(a1 + 168);
  uint64_t v9 = sub_63A050((uint64_t)&v36, *a3);
  if (v9 >= sub_63A050((uint64_t)(a2 - 11), *a3))
  {
    int v12 = (long long *)(a1 + 176);
    do
    {
      long long v10 = v12;
      if (v12 >= a2) {
        break;
      }
      uint64_t v13 = sub_63A050((uint64_t)&v36, *a3);
      uint64_t v14 = sub_63A050((uint64_t)v10, *a3);
      int v12 = v10 + 11;
    }
    while (v13 >= v14);
  }
  else
  {
    long long v10 = (long long *)a1;
    do
    {
      uint64_t v11 = sub_63A050((uint64_t)&v36, *a3);
      v10 += 11;
    }
    while (v11 >= sub_63A050((uint64_t)v10, *a3));
  }
  if (v10 < a2)
  {
    do
    {
      uint64_t v15 = sub_63A050((uint64_t)&v36, *a3);
      a2 -= 11;
    }
    while (v15 < sub_63A050((uint64_t)a2, *a3));
  }
  while (v10 < a2)
  {
    sub_8D1408(v10, a2);
    do
    {
      uint64_t v16 = sub_63A050((uint64_t)&v36, *a3);
      v10 += 11;
    }
    while (v16 >= sub_63A050((uint64_t)v10, *a3));
    do
    {
      uint64_t v17 = sub_63A050((uint64_t)&v36, *a3);
      a2 -= 11;
    }
    while (v17 < sub_63A050((uint64_t)a2, *a3));
  }
  uint64_t v18 = v10 - 11;
  if (v10 - 11 != (long long *)a1)
  {
    long long v19 = (void **)(a1 + 112);
    long long v20 = *(v10 - 10);
    *(_OWORD *)a1 = *v18;
    *(_OWORD *)(a1 + 16) = v20;
    uint64_t v21 = *((void *)v10 - 18);
    *(_DWORD *)(a1 + 40) = *((_DWORD *)v10 - 34);
    *(void *)(a1 + 32) = v21;
    uint64_t v22 = *(void *)((char *)v10 - 132);
    *(void *)(a1 + 49) = *(void *)((char *)v10 - 127);
    *(void *)(a1 + 44) = v22;
    sub_4F377C((uint64_t)v7, (uint64_t)(v10 - 7));
    *(void *)(a1 + 104) = *((void *)v10 - 9);
    if (*(char *)(a1 + 135) < 0) {
      operator delete(*v19);
    }
    char v23 = (void **)(a1 + 144);
    long long v24 = *(v10 - 4);
    *(void *)(a1 + 128) = *((void *)v10 - 6);
    *(_OWORD *)long long v19 = v24;
    *((unsigned char *)v10 - 41) = 0;
    *((unsigned char *)v10 - 64) = 0;
    *(unsigned char *)(a1 + 136) = *((unsigned char *)v10 - 40);
    if (*(char *)(a1 + 167) < 0) {
      operator delete(*v23);
    }
    long long v25 = *(v10 - 2);
    *(void *)(a1 + 160) = *((void *)v10 - 2);
    *(_OWORD *)char v23 = v25;
    *((unsigned char *)v10 - 9) = 0;
    *((unsigned char *)v10 - 32) = 0;
    *(unsigned char *)(a1 + 168) = *((unsigned char *)v10 - 8);
  }
  long long v26 = v37;
  long long *v18 = v36;
  *(v10 - 10) = v26;
  uint64_t v27 = *(void *)v38;
  *((_DWORD *)v10 - 34) = *(_DWORD *)&v38[8];
  *((void *)v10 - 18) = v27;
  uint64_t v28 = *(void *)&v38[12];
  *(void *)((char *)v10 - 127) = *(void *)&v38[17];
  *(void *)((char *)v10 - 132) = v28;
  sub_4F377C((uint64_t)(v10 - 7), (uint64_t)&v39);
  *((void *)v10 - 9) = v44;
  char v29 = (void **)(v10 - 4);
  if (*((char *)v10 - 41) < 0) {
    operator delete(*v29);
  }
  long long v30 = *(_OWORD *)v45;
  *((void *)v10 - 6) = v46;
  *(_OWORD *)char v29 = v30;
  HIBYTE(v46) = 0;
  LOBYTE(v45[0]) = 0;
  *((unsigned char *)v10 - 40) = v47;
  unsigned int v31 = (void **)(v10 - 2);
  if (*((char *)v10 - 9) < 0) {
    operator delete(*v31);
  }
  long long v32 = *(_OWORD *)__p;
  *((void *)v10 - 2) = v49;
  *(_OWORD *)unsigned int v31 = v32;
  HIBYTE(v49) = 0;
  LOBYTE(__p[0]) = 0;
  *((unsigned char *)v10 - 8) = v50;
  if ((SHIBYTE(v49) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v46) & 0x80000000) == 0) {
      goto LABEL_27;
    }
LABEL_32:
    operator delete(v45[0]);
    int v33 = v43;
    if (v43 != 1) {
      goto LABEL_28;
    }
    goto LABEL_33;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v46) < 0) {
    goto LABEL_32;
  }
LABEL_27:
  int v33 = v43;
  if (v43 != 1)
  {
LABEL_28:
    if (!v33 && v42 < 0)
    {
      long long v34 = v40;
LABEL_35:
      operator delete(v34);
      return v10;
    }
    return v10;
  }
LABEL_33:
  long long v34 = v40;
  if (v40)
  {
    uint64_t v41 = v40;
    goto LABEL_35;
  }
  return v10;
}

void sub_8D37DC(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

long long *sub_8D3814(uint64_t a1, unint64_t a2, unsigned int **a3)
{
  long long v6 = *(_OWORD *)(a1 + 16);
  long long v36 = *(_OWORD *)a1;
  long long v37 = v6;
  *(_OWORD *)char v38 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v38[9] = *(_OWORD *)(a1 + 41);
  uint64_t v7 = (uint64_t *)(a1 + 64);
  uint64_t v8 = (void *)*(unsigned int *)(a1 + 96);
  int v43 = (int)v8;
  sub_4F38B0(v8, v7, &v39);
  uint64_t v9 = 0;
  uint64_t v44 = *(void *)(a1 + 104);
  *(_OWORD *)long long v45 = *(_OWORD *)(a1 + 112);
  uint64_t v46 = *(void *)(a1 + 128);
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  char v47 = *(unsigned char *)(a1 + 136);
  uint64_t v49 = *(void *)(a1 + 160);
  char v50 = *(unsigned char *)(a1 + 168);
  long long v34 = (void **)(a1 + 144);
  char v35 = (void **)(a1 + 112);
  *(_OWORD *)long long __p = *(_OWORD *)(a1 + 144);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 144) = 0;
  do
  {
    uint64_t v10 = sub_63A050(a1 + v9 + 176, *a3);
    v9 += 176;
  }
  while (v10 < sub_63A050((uint64_t)&v36, *a3));
  unint64_t v11 = a1 + v9;
  if (v9 == 176)
  {
    do
    {
      if (v11 >= a2) {
        break;
      }
      a2 -= 176;
      uint64_t v13 = sub_63A050(a2, *a3);
    }
    while (v13 >= sub_63A050((uint64_t)&v36, *a3));
  }
  else
  {
    do
    {
      a2 -= 176;
      uint64_t v12 = sub_63A050(a2, *a3);
    }
    while (v12 >= sub_63A050((uint64_t)&v36, *a3));
  }
  uint64_t v14 = (long long *)(a1 + v9);
  if (v11 < a2)
  {
    uint64_t v15 = (long long *)a2;
    do
    {
      sub_8D1408(v14, v15);
      do
      {
        v14 += 11;
        uint64_t v16 = sub_63A050((uint64_t)v14, *a3);
      }
      while (v16 < sub_63A050((uint64_t)&v36, *a3));
      do
      {
        v15 -= 11;
        uint64_t v17 = sub_63A050((uint64_t)v15, *a3);
      }
      while (v17 >= sub_63A050((uint64_t)&v36, *a3));
    }
    while (v14 < v15);
  }
  uint64_t v18 = v14 - 11;
  if (v14 - 11 != (long long *)a1)
  {
    long long v19 = *(v14 - 10);
    *(_OWORD *)a1 = *v18;
    *(_OWORD *)(a1 + 16) = v19;
    uint64_t v20 = *((void *)v14 - 18);
    *(_DWORD *)(a1 + 40) = *((_DWORD *)v14 - 34);
    *(void *)(a1 + 32) = v20;
    uint64_t v21 = *(void *)((char *)v14 - 132);
    *(void *)(a1 + 49) = *(void *)((char *)v14 - 127);
    *(void *)(a1 + 44) = v21;
    sub_4F377C((uint64_t)v7, (uint64_t)(v14 - 7));
    *(void *)(a1 + 104) = *((void *)v14 - 9);
    if (*(char *)(a1 + 135) < 0) {
      operator delete(*v35);
    }
    long long v22 = *(v14 - 4);
    *(void *)(a1 + 128) = *((void *)v14 - 6);
    *(_OWORD *)char v35 = v22;
    *((unsigned char *)v14 - 41) = 0;
    *((unsigned char *)v14 - 64) = 0;
    *(unsigned char *)(a1 + 136) = *((unsigned char *)v14 - 40);
    if (*(char *)(a1 + 167) < 0) {
      operator delete(*v34);
    }
    long long v23 = *(v14 - 2);
    *(void *)(a1 + 160) = *((void *)v14 - 2);
    *(_OWORD *)long long v34 = v23;
    *((unsigned char *)v14 - 9) = 0;
    *((unsigned char *)v14 - 32) = 0;
    *(unsigned char *)(a1 + 168) = *((unsigned char *)v14 - 8);
  }
  long long v24 = v37;
  long long *v18 = v36;
  *(v14 - 10) = v24;
  uint64_t v25 = *(void *)v38;
  *((_DWORD *)v14 - 34) = *(_DWORD *)&v38[8];
  *((void *)v14 - 18) = v25;
  uint64_t v26 = *(void *)&v38[12];
  *(void *)((char *)v14 - 127) = *(void *)&v38[17];
  *(void *)((char *)v14 - 132) = v26;
  sub_4F377C((uint64_t)(v14 - 7), (uint64_t)&v39);
  *((void *)v14 - 9) = v44;
  uint64_t v27 = (void **)(v14 - 4);
  if (*((char *)v14 - 41) < 0) {
    operator delete(*v27);
  }
  long long v28 = *(_OWORD *)v45;
  *((void *)v14 - 6) = v46;
  *(_OWORD *)uint64_t v27 = v28;
  HIBYTE(v46) = 0;
  LOBYTE(v45[0]) = 0;
  *((unsigned char *)v14 - 40) = v47;
  char v29 = (void **)(v14 - 2);
  if (*((char *)v14 - 9) < 0) {
    operator delete(*v29);
  }
  long long v30 = *(_OWORD *)__p;
  *((void *)v14 - 2) = v49;
  *(_OWORD *)char v29 = v30;
  HIBYTE(v49) = 0;
  LOBYTE(__p[0]) = 0;
  *((unsigned char *)v14 - 8) = v50;
  if ((SHIBYTE(v49) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v46) & 0x80000000) == 0) {
      goto LABEL_26;
    }
LABEL_31:
    operator delete(v45[0]);
    int v31 = v43;
    if (v43 != 1) {
      goto LABEL_27;
    }
    goto LABEL_32;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v46) < 0) {
    goto LABEL_31;
  }
LABEL_26:
  int v31 = v43;
  if (v43 != 1)
  {
LABEL_27:
    if (!v31 && v42 < 0)
    {
      long long v32 = v40;
LABEL_34:
      operator delete(v32);
      return v14 - 11;
    }
    return v14 - 11;
  }
LABEL_32:
  long long v32 = v40;
  if (v40)
  {
    uint64_t v41 = v40;
    goto LABEL_34;
  }
  return v14 - 11;
}

void sub_8D3C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_8D3C3C(long long *a1, long long *a2, unsigned int **a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(0x2E8BA2E8BA2E8BA3 * v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      char v29 = a2 - 11;
      uint64_t v30 = sub_63A050((uint64_t)(a2 - 11), *a3);
      if (v30 < sub_63A050((uint64_t)a1, *a3)) {
        sub_8D1408(a1, v29);
      }
      return 1;
    case 3:
      sub_8D0560(a1, a1 + 11, a2 - 11, a3);
      return 1;
    case 4:
      sub_8D16E4(a1, a1 + 11, a1 + 22, a2 - 11, a3);
      return 1;
    case 5:
      sub_8D17DC(a1, a1 + 11, a1 + 22, a1 + 33, a2 - 11, a3);
      return 1;
    default:
      uint64_t v8 = (uint64_t)(a1 + 22);
      sub_8D0560(a1, a1 + 11, a1 + 22, a3);
      uint64_t v9 = (uint64_t)(a1 + 33);
      if (a1 + 33 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    uint64_t v12 = sub_63A050(v9, *a3);
    if (v12 >= sub_63A050(v8, *a3)) {
      goto LABEL_6;
    }
    long long v13 = *(_OWORD *)(v9 + 16);
    long long v31 = *(_OWORD *)v9;
    long long v32 = v13;
    v33[0] = *(_OWORD *)(v9 + 32);
    *(_OWORD *)((char *)v33 + 9) = *(_OWORD *)(v9 + 41);
    unsigned int v38 = *(_DWORD *)(v9 + 96);
    sub_4F38B0((void *)v38, (uint64_t *)(v9 + 64), &v34);
    uint64_t v39 = *(void *)(v9 + 104);
    long long v40 = *(_OWORD *)(v9 + 112);
    uint64_t v41 = *(void *)(v9 + 128);
    *(void *)(v9 + 112) = 0;
    *(void *)(v9 + 120) = 0;
    *(void *)(v9 + 128) = 0;
    char v42 = *(unsigned char *)(v9 + 136);
    long long v43 = *(_OWORD *)(v9 + 144);
    uint64_t v44 = *(void *)(v9 + 160);
    *(void *)(v9 + 152) = 0;
    *(void *)(v9 + 160) = 0;
    char v45 = *(unsigned char *)(v9 + 168);
    uint64_t v14 = v10;
    *(void *)(v9 + 144) = 0;
    while (1)
    {
      uint64_t v15 = (char *)a1 + v14;
      long long v16 = *(long long *)((char *)a1 + v14 + 368);
      *((_OWORD *)v15 + 33) = *(long long *)((char *)a1 + v14 + 352);
      *((_OWORD *)v15 + 34) = v16;
      *((void *)v15 + 70) = *(void *)((char *)a1 + v14 + 384);
      *((_DWORD *)v15 + 142) = *(_DWORD *)((char *)a1 + v14 + 392);
      uint64_t v17 = (void *)((char *)a1 + v14 + 572);
      void *v17 = *(void *)((char *)a1 + v14 + 396);
      *(void *)((char *)v17 + 5) = *(void *)((char *)a1 + v14 + 401);
      sub_4F377C((uint64_t)a1 + v14 + 592, (uint64_t)a1 + v14 + 416);
      *((void *)v15 + 79) = *((void *)v15 + 57);
      uint64_t v18 = (void **)((char *)a1 + v14 + 640);
      if (*((char *)a1 + v14 + 663) < 0) {
        operator delete(*v18);
      }
      *(_OWORD *)uint64_t v18 = *((_OWORD *)v15 + 29);
      *((void *)v15 + 82) = *((void *)v15 + 60);
      v15[487] = 0;
      v15[464] = 0;
      v15[664] = v15[488];
      long long v19 = (void **)(v15 + 672);
      if (v15[695] < 0) {
        operator delete(*v19);
      }
      uint64_t v20 = (char *)a1 + v14;
      *(_OWORD *)long long v19 = *(long long *)((char *)a1 + v14 + 496);
      *((void *)v15 + 86) = *(void *)((char *)a1 + v14 + 512);
      v20[519] = 0;
      v20[496] = 0;
      v20[696] = *((unsigned char *)a1 + v14 + 520);
      if (v14 == -352) {
        break;
      }
      uint64_t v21 = sub_63A050((uint64_t)&v31, *a3);
      v14 -= 176;
      if (v21 >= sub_63A050((uint64_t)(v20 + 176), *a3))
      {
        uint64_t v22 = (uint64_t)a1 + v14 + 528;
        goto LABEL_17;
      }
    }
    uint64_t v22 = (uint64_t)a1;
LABEL_17:
    long long v23 = v32;
    *(_OWORD *)uint64_t v22 = v31;
    *(_OWORD *)(v22 + 16) = v23;
    *((void *)v20 + 48) = *(void *)&v33[0];
    *((_DWORD *)v20 + 98) = DWORD2(v33[0]);
    *(void *)(v20 + 396) = *(void *)((char *)v33 + 12);
    *(void *)(v20 + 401) = *(void *)((char *)&v33[1] + 1);
    sub_4F377C((uint64_t)(v20 + 416), (uint64_t)&v34);
    *(void *)(v22 + 104) = v39;
    long long v24 = (void **)(v20 + 464);
    if (*(char *)(v22 + 135) < 0) {
      operator delete(*v24);
    }
    char v25 = 0;
    uint64_t v26 = (void **)(v20 + 496);
    *(_OWORD *)long long v24 = v40;
    *((void *)v20 + 60) = v41;
    HIBYTE(v41) = 0;
    LOBYTE(v40) = 0;
    *(unsigned char *)(v22 + 136) = v42;
    if (*(char *)(v22 + 167) < 0)
    {
      operator delete(*v26);
      char v25 = HIBYTE(v41);
    }
    *(_OWORD *)uint64_t v26 = v43;
    *((void *)v20 + 64) = v44;
    HIBYTE(v44) = 0;
    LOBYTE(v43) = 0;
    *(unsigned char *)(v22 + 168) = v45;
    if (v25 < 0)
    {
      operator delete((void *)v40);
      unsigned int v27 = v38;
      if (v38 != 1)
      {
LABEL_23:
        if (!v27 && v37 < 0)
        {
          long long v28 = __p;
LABEL_4:
          operator delete(v28);
          goto LABEL_5;
        }
        goto LABEL_5;
      }
    }
    else
    {
      unsigned int v27 = v38;
      if (v38 != 1) {
        goto LABEL_23;
      }
    }
    long long v28 = __p;
    if (__p)
    {
      long long v36 = __p;
      goto LABEL_4;
    }
LABEL_5:
    if (++v11 == 8) {
      return v9 + 176 == (void)a2;
    }
LABEL_6:
    uint64_t v8 = v9;
    v10 += 176;
    v9 += 176;
    if ((long long *)v9 == a2) {
      return 1;
    }
  }
}

void sub_8D40FC(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_8D4118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_639C78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_8D4144(uint64_t a1, unsigned int **a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    uint64_t v39 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= 0x2E8BA2E8BA2E8BA3 * ((a4 - a1) >> 4))
    {
      uint64_t v8 = (0x5D1745D1745D1746 * ((a4 - a1) >> 4)) | 1;
      uint64_t v9 = a1 + 176 * v8;
      uint64_t v10 = 0x5D1745D1745D1746 * ((a4 - a1) >> 4) + 2;
      if (v10 < a3)
      {
        uint64_t v11 = sub_63A050(a1 + 176 * v8, *a2);
        if (v11 < sub_63A050(v9 + 176, *a2))
        {
          v9 += 176;
          uint64_t v8 = v10;
        }
      }
      uint64_t v12 = sub_63A050(v9, *a2);
      if (v12 >= sub_63A050(v5, *a2))
      {
        long long v13 = *(_OWORD *)(v5 + 16);
        long long v41 = *(_OWORD *)v5;
        long long v42 = v13;
        *(_OWORD *)long long v43 = *(_OWORD *)(v5 + 32);
        *(_OWORD *)&v43[9] = *(_OWORD *)(v5 + 41);
        unsigned int v48 = *(_DWORD *)(v5 + 96);
        uint64_t v38 = a1;
        sub_4F38B0((void *)v48, (uint64_t *)(v5 + 64), &v44);
        uint64_t v49 = *(void *)(v5 + 104);
        *(_OWORD *)long long __p = *(_OWORD *)(v5 + 112);
        uint64_t v51 = *(void *)(v5 + 128);
        *(void *)(v5 + 112) = 0;
        *(void *)(v5 + 120) = 0;
        *(void *)(v5 + 128) = 0;
        char v52 = *(unsigned char *)(v5 + 136);
        long long v53 = *(_OWORD *)(v5 + 144);
        uint64_t v54 = *(void *)(v5 + 160);
        *(void *)(v5 + 152) = 0;
        *(void *)(v5 + 160) = 0;
        char v55 = *(unsigned char *)(v5 + 168);
        *(void *)(v5 + 144) = 0;
        do
        {
          uint64_t v14 = v9;
          long long v15 = *(_OWORD *)(v9 + 16);
          *(_OWORD *)uint64_t v5 = *(_OWORD *)v9;
          *(_OWORD *)(v5 + 16) = v15;
          uint64_t v17 = v9 + 32;
          uint64_t v16 = *(void *)(v9 + 32);
          *(_DWORD *)(v5 + 40) = *(_DWORD *)(v9 + 40);
          *(void *)(v5 + 32) = v16;
          long long v19 = (void *)(v9 + 44);
          uint64_t v18 = *(void *)(v9 + 44);
          *(void *)(v5 + 49) = *(void *)(v9 + 49);
          *(void *)(v5 + 44) = v18;
          uint64_t v20 = v9 + 64;
          sub_4F377C(v5 + 64, v9 + 64);
          *(void *)(v5 + 104) = *(void *)(v9 + 104);
          uint64_t v21 = (void **)(v5 + 112);
          if (*(char *)(v5 + 135) < 0) {
            operator delete(*v21);
          }
          long long v22 = *(_OWORD *)(v9 + 112);
          *(void *)(v5 + 128) = *(void *)(v9 + 128);
          *(_OWORD *)uint64_t v21 = v22;
          *(unsigned char *)(v9 + 135) = 0;
          *(unsigned char *)(v9 + 112) = 0;
          *(unsigned char *)(v5 + 136) = *(unsigned char *)(v9 + 136);
          long long v23 = (void **)(v5 + 144);
          if (*(char *)(v5 + 167) < 0) {
            operator delete(*v23);
          }
          long long v24 = *(_OWORD *)(v9 + 144);
          *(void *)(v5 + 160) = *(void *)(v9 + 160);
          *(_OWORD *)long long v23 = v24;
          *(unsigned char *)(v9 + 167) = 0;
          *(unsigned char *)(v9 + 144) = 0;
          *(unsigned char *)(v5 + 168) = *(unsigned char *)(v9 + 168);
          if (v39 < v8) {
            break;
          }
          uint64_t v25 = (2 * v8) | 1;
          uint64_t v9 = v38 + 176 * v25;
          uint64_t v8 = 2 * v8 + 2;
          if (v8 >= a3)
          {
            uint64_t v8 = v25;
          }
          else
          {
            uint64_t v26 = sub_63A050(v38 + 176 * v25, *a2);
            if (v26 >= sub_63A050(v9 + 176, *a2)) {
              uint64_t v8 = v25;
            }
            else {
              v9 += 176;
            }
          }
          uint64_t v27 = sub_63A050(v9, *a2);
          uint64_t v5 = v14;
        }
        while (v27 >= sub_63A050((uint64_t)&v41, *a2));
        long long v28 = (void **)(v14 + 112);
        long long v29 = v42;
        *(_OWORD *)uint64_t v14 = v41;
        *(_OWORD *)(v14 + 16) = v29;
        uint64_t v30 = *(void *)v43;
        *(_DWORD *)(v17 + 8) = *(_DWORD *)&v43[8];
        *(void *)uint64_t v17 = v30;
        uint64_t v31 = *(void *)&v43[12];
        *(void *)((char *)v19 + 5) = *(void *)&v43[17];
        *long long v19 = v31;
        sub_4F377C(v20, (uint64_t)&v44);
        *(void *)(v14 + 104) = v49;
        if (*(char *)(v14 + 135) < 0) {
          operator delete(*v28);
        }
        long long v32 = (_OWORD *)(v14 + 144);
        long long v33 = *(_OWORD *)__p;
        *(void *)(v14 + 128) = v51;
        *(_OWORD *)long long v28 = v33;
        HIBYTE(v51) = 0;
        LOBYTE(__p[0]) = 0;
        *(unsigned char *)(v14 + 136) = v52;
        if (*(char *)(v14 + 167) < 0)
        {
          operator delete(*(void **)(v14 + 144));
          int v35 = SHIBYTE(v51);
          long long v36 = v53;
          *(void *)(v14 + 160) = v54;
          _OWORD *v32 = v36;
          HIBYTE(v54) = 0;
          LOBYTE(v53) = 0;
          *(unsigned char *)(v14 + 168) = v55;
          if (v35 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v34 = v53;
          *(void *)(v14 + 160) = v54;
          _OWORD *v32 = v34;
          HIBYTE(v54) = 0;
          LOBYTE(v53) = 0;
          *(unsigned char *)(v14 + 168) = v55;
        }
        if (v48 == 1)
        {
          char v37 = v45;
          if (!v45) {
            return;
          }
          uint64_t v46 = v45;
          goto LABEL_31;
        }
        if (!v48 && v47 < 0)
        {
          char v37 = v45;
LABEL_31:
          operator delete(v37);
        }
      }
    }
  }
}

void sub_8D454C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_8D4570(uint64_t a1, uint64_t a2, unsigned int **a3, uint64_t a4)
{
  if (a4 < 2) {
    return;
  }
  long long v32 = *(_OWORD *)a1;
  long long v33 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)long long v34 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v34[9] = *(_OWORD *)(a1 + 41);
  uint64_t v8 = (uint64_t *)(a1 + 64);
  uint64_t v9 = (void *)*(unsigned int *)(a1 + 96);
  int v39 = (int)v9;
  sub_4F38B0(v9, v8, &v35);
  uint64_t v40 = *(void *)(a1 + 104);
  *(_OWORD *)long long v41 = *(_OWORD *)(a1 + 112);
  uint64_t v42 = *(void *)(a1 + 128);
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  char v43 = *(unsigned char *)(a1 + 136);
  *(_OWORD *)long long __p = *(_OWORD *)(a1 + 144);
  uint64_t v45 = *(void *)(a1 + 160);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 144) = 0;
  char v46 = *(unsigned char *)(a1 + 168);
  uint64_t v10 = sub_8D213C(a1, a3, a4);
  uint64_t v11 = (_OWORD *)(a2 - 176);
  uint64_t v12 = (void *)(v10 + 32);
  long long v13 = (void *)(v10 + 44);
  uint64_t v14 = v10 + 64;
  if (v10 == a2 - 176)
  {
    *(_OWORD *)uint64_t v10 = v32;
    *(_OWORD *)(v10 + 16) = v33;
    *(_DWORD *)(v10 + 40) = *(_DWORD *)&v34[8];
    void *v12 = *(void *)v34;
    *(void *)(v10 + 49) = *(void *)&v34[17];
    *long long v13 = *(void *)&v34[12];
    sub_4F377C(v14, (uint64_t)&v35);
    *(void *)(v10 + 104) = v40;
    uint64_t v27 = (void **)(v10 + 112);
    if (*(char *)(v10 + 135) < 0) {
      operator delete(*v27);
    }
    long long v28 = *(_OWORD *)v41;
    *(void *)(v10 + 128) = v42;
    *(_OWORD *)uint64_t v27 = v28;
    HIBYTE(v42) = 0;
    LOBYTE(v41[0]) = 0;
    *(unsigned char *)(v10 + 136) = v43;
    long long v29 = (void **)(v10 + 144);
    if (*(char *)(v10 + 167) < 0) {
      operator delete(*v29);
    }
    long long v30 = *(_OWORD *)__p;
    *(void *)(v10 + 160) = v45;
    *(_OWORD *)long long v29 = v30;
    HIBYTE(v45) = 0;
    LOBYTE(__p[0]) = 0;
    *(unsigned char *)(v10 + 168) = v46;
    if (SHIBYTE(v42) < 0) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v31 = a3;
    long long v15 = *(_OWORD *)(a2 - 160);
    *(_OWORD *)uint64_t v10 = *v11;
    *(_OWORD *)(v10 + 16) = v15;
    uint64_t v16 = *(void *)(a2 - 144);
    *(_DWORD *)(v10 + 40) = *(_DWORD *)(a2 - 136);
    void *v12 = v16;
    uint64_t v17 = *(void *)(a2 - 132);
    *(void *)(v10 + 49) = *(void *)(a2 - 127);
    *long long v13 = v17;
    sub_4F377C(v14, a2 - 112);
    *(void *)(v10 + 104) = *(void *)(a2 - 72);
    uint64_t v18 = (void **)(v10 + 112);
    if (*(char *)(v10 + 135) < 0) {
      operator delete(*v18);
    }
    long long v19 = (void **)(a2 - 64);
    long long v20 = *(_OWORD *)(a2 - 64);
    *(void *)(v10 + 128) = *(void *)(a2 - 48);
    *(_OWORD *)uint64_t v18 = v20;
    *(unsigned char *)(a2 - 41) = 0;
    *(unsigned char *)(a2 - 64) = 0;
    *(unsigned char *)(v10 + 136) = *(unsigned char *)(a2 - 40);
    uint64_t v21 = (void **)(v10 + 144);
    if (*(char *)(v10 + 167) < 0) {
      operator delete(*v21);
    }
    long long v22 = (void **)(a2 - 32);
    long long v23 = *(_OWORD *)(a2 - 32);
    *(void *)(v10 + 160) = *(void *)(a2 - 16);
    *(_OWORD *)uint64_t v21 = v23;
    *(unsigned char *)(a2 - 9) = 0;
    *(unsigned char *)(a2 - 32) = 0;
    *(unsigned char *)(v10 + 168) = *(unsigned char *)(a2 - 8);
    uint64_t v24 = v10 + 176;
    *uint64_t v11 = v32;
    *(_OWORD *)(a2 - 160) = v33;
    *(void *)(a2 - 144) = *(void *)v34;
    *(_DWORD *)(a2 - 136) = *(_DWORD *)&v34[8];
    *(void *)(a2 - 132) = *(void *)&v34[12];
    *(void *)(a2 - 127) = *(void *)&v34[17];
    sub_4F377C(a2 - 112, (uint64_t)&v35);
    *(void *)(a2 - 72) = v40;
    if (*(char *)(a2 - 41) < 0) {
      operator delete(*v19);
    }
    *(_OWORD *)long long v19 = *(_OWORD *)v41;
    *(void *)(a2 - 48) = v42;
    HIBYTE(v42) = 0;
    LOBYTE(v41[0]) = 0;
    *(unsigned char *)(a2 - 40) = v43;
    if (*(char *)(a2 - 9) < 0) {
      operator delete(*v22);
    }
    *(_OWORD *)long long v22 = *(_OWORD *)__p;
    *(void *)(a2 - 16) = v45;
    HIBYTE(v45) = 0;
    LOBYTE(__p[0]) = 0;
    *(unsigned char *)(a2 - 8) = v46;
    sub_8D496C(a1, v24, v31, 0x2E8BA2E8BA2E8BA3 * ((v24 - a1) >> 4));
    if ((SHIBYTE(v45) & 0x80000000) == 0)
    {
      if ((SHIBYTE(v42) & 0x80000000) == 0) {
        goto LABEL_13;
      }
LABEL_24:
      operator delete(v41[0]);
      int v25 = v39;
      if (v39 != 1) {
        goto LABEL_14;
      }
LABEL_25:
      uint64_t v26 = v36;
      if (!v36) {
        return;
      }
      char v37 = v36;
      goto LABEL_27;
    }
    operator delete(__p[0]);
    if (SHIBYTE(v42) < 0) {
      goto LABEL_24;
    }
  }
LABEL_13:
  int v25 = v39;
  if (v39 == 1) {
    goto LABEL_25;
  }
LABEL_14:
  if (!v25 && v38 < 0)
  {
    uint64_t v26 = v36;
LABEL_27:
    operator delete(v26);
  }
}

void sub_8D4948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_8D496C(uint64_t a1, uint64_t a2, unsigned int **a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v7 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v8 = a1 + 176 * v7;
    uint64_t v9 = a2 - 176;
    uint64_t v10 = sub_63A050(v8, *a3);
    if (v10 < sub_63A050(v9, *a3))
    {
      long long v11 = *(_OWORD *)(v9 + 16);
      long long v29 = *(_OWORD *)v9;
      long long v30 = v11;
      *(_OWORD *)uint64_t v31 = *(_OWORD *)(v9 + 32);
      *(_OWORD *)&v31[9] = *(_OWORD *)(v9 + 41);
      unsigned int v36 = *(_DWORD *)(a2 - 80);
      sub_4F38B0((void *)v36, (uint64_t *)(a2 - 112), &v32);
      uint64_t v37 = *(void *)(a2 - 72);
      *(_OWORD *)long long __p = *(_OWORD *)(a2 - 64);
      uint64_t v39 = *(void *)(a2 - 48);
      *(void *)(a2 - 64) = 0;
      *(void *)(a2 - 56) = 0;
      *(void *)(a2 - 48) = 0;
      char v40 = *(unsigned char *)(a2 - 40);
      long long v41 = *(_OWORD *)(a2 - 32);
      uint64_t v42 = *(void *)(a2 - 16);
      *(void *)(a2 - 24) = 0;
      *(void *)(a2 - 16) = 0;
      *(void *)(a2 - 32) = 0;
      char v43 = *(unsigned char *)(a2 - 8);
      do
      {
        uint64_t v12 = v8;
        long long v13 = *(_OWORD *)(v8 + 16);
        *(_OWORD *)uint64_t v9 = *(_OWORD *)v8;
        *(_OWORD *)(v9 + 16) = v13;
        uint64_t v15 = v8 + 32;
        uint64_t v14 = *(void *)(v8 + 32);
        *(_DWORD *)(v9 + 40) = *(_DWORD *)(v8 + 40);
        *(void *)(v9 + 32) = v14;
        uint64_t v17 = (void *)(v8 + 44);
        uint64_t v16 = *(void *)(v8 + 44);
        *(void *)(v9 + 49) = *(void *)(v8 + 49);
        *(void *)(v9 + 44) = v16;
        uint64_t v18 = v8 + 64;
        sub_4F377C(v9 + 64, v8 + 64);
        *(void *)(v9 + 104) = *(void *)(v8 + 104);
        long long v19 = (void **)(v9 + 112);
        if (*(char *)(v9 + 135) < 0) {
          operator delete(*v19);
        }
        long long v20 = *(_OWORD *)(v12 + 112);
        *(void *)(v9 + 128) = *(void *)(v12 + 128);
        *(_OWORD *)long long v19 = v20;
        *(unsigned char *)(v12 + 135) = 0;
        *(unsigned char *)(v12 + 112) = 0;
        *(unsigned char *)(v9 + 136) = *(unsigned char *)(v12 + 136);
        uint64_t v21 = (void **)(v9 + 144);
        if (*(char *)(v9 + 167) < 0) {
          operator delete(*v21);
        }
        long long v22 = *(_OWORD *)(v12 + 144);
        *(void *)(v9 + 160) = *(void *)(v12 + 160);
        *(_OWORD *)uint64_t v21 = v22;
        *(unsigned char *)(v12 + 167) = 0;
        *(unsigned char *)(v12 + 144) = 0;
        *(unsigned char *)(v9 + 168) = *(unsigned char *)(v12 + 168);
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = a1 + 176 * v7;
        uint64_t v23 = sub_63A050(v8, *a3);
        uint64_t v9 = v12;
      }
      while (v23 < sub_63A050((uint64_t)&v29, *a3));
      uint64_t v24 = (void **)(v12 + 112);
      long long v25 = v30;
      *(_OWORD *)uint64_t v12 = v29;
      *(_OWORD *)(v12 + 16) = v25;
      *(void *)uint64_t v15 = *(void *)v31;
      *(_DWORD *)(v15 + 8) = *(_DWORD *)&v31[8];
      void *v17 = *(void *)&v31[12];
      *(void *)((char *)v17 + 5) = *(void *)&v31[17];
      sub_4F377C(v18, (uint64_t)&v32);
      *(void *)(v12 + 104) = v37;
      if (*(char *)(v12 + 135) < 0) {
        operator delete(*v24);
      }
      uint64_t v26 = (_OWORD *)(v12 + 144);
      *(_OWORD *)uint64_t v24 = *(_OWORD *)__p;
      *(void *)(v12 + 128) = v39;
      HIBYTE(v39) = 0;
      LOBYTE(__p[0]) = 0;
      *(unsigned char *)(v12 + 136) = v40;
      if (*(char *)(v12 + 167) < 0)
      {
        operator delete(*(void **)(v12 + 144));
        int v27 = SHIBYTE(v39);
        _OWORD *v26 = v41;
        *(void *)(v12 + 160) = v42;
        HIBYTE(v42) = 0;
        LOBYTE(v41) = 0;
        *(unsigned char *)(v12 + 168) = v43;
        if (v27 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        _OWORD *v26 = v41;
        *(void *)(v12 + 160) = v42;
        HIBYTE(v42) = 0;
        LOBYTE(v41) = 0;
        *(unsigned char *)(v12 + 168) = v43;
      }
      if (v36 == 1)
      {
        long long v28 = v33;
        if (!v33) {
          return;
        }
        long long v34 = v33;
        goto LABEL_22;
      }
      if (!v36 && v35 < 0)
      {
        long long v28 = v33;
LABEL_22:
        operator delete(v28);
      }
    }
  }
}

void sub_8D4CB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_8D4CD4(long long *a1, long long *a2, unsigned int **a3, uint64_t a4, char a5)
{
void sub_8D5150(uint64_t a1, long long *a2, unsigned int **a3)
{
  if ((long long *)a1 != a2)
  {
    uint64_t v5 = a1 + 176;
    if ((long long *)(a1 + 176) != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = a1;
      do
      {
        uint64_t v9 = (long long *)v5;
        uint64_t v10 = sub_63A050(v5, *a3);
        if (v10 >= sub_63A050(v8, *a3)) {
          goto LABEL_5;
        }
        long long v11 = v9[1];
        long long v36 = *v9;
        long long v37 = v11;
        v38[0] = v9[2];
        *(_OWORD *)((char *)v38 + 9) = *(long long *)((char *)v9 + 41);
        unsigned int v43 = *(_DWORD *)(v8 + 272);
        sub_4F38B0((void *)v43, (uint64_t *)(v8 + 240), &v39);
        uint64_t v44 = *(void *)(v8 + 280);
        long long v45 = *(_OWORD *)(v8 + 288);
        uint64_t v46 = *(void *)(v8 + 304);
        *(void *)(v8 + 288) = 0;
        *(void *)(v8 + 296) = 0;
        *(void *)(v8 + 304) = 0;
        char v47 = *(unsigned char *)(v8 + 312);
        long long v48 = *(_OWORD *)(v8 + 320);
        uint64_t v49 = *(void *)(v8 + 336);
        *(void *)(v8 + 328) = 0;
        *(void *)(v8 + 336) = 0;
        *(void *)(v8 + 320) = 0;
        uint64_t v12 = v7;
        char v50 = *(unsigned char *)(v8 + 344);
        while (1)
        {
          uint64_t v13 = a1 + v12;
          long long v14 = *(_OWORD *)(a1 + v12 + 16);
          *(_OWORD *)(v13 + 176) = *(_OWORD *)(a1 + v12);
          *(_OWORD *)(v13 + 192) = v14;
          *(void *)(v13 + 208) = *(void *)(a1 + v12 + 32);
          *(_DWORD *)(v13 + 216) = *(_DWORD *)(a1 + v12 + 40);
          *(void *)(v13 + 220) = *(void *)(a1 + v12 + 44);
          *(void *)(v13 + 225) = *(void *)(a1 + v12 + 49);
          unint64_t v15 = (void *)(a1 + v12 + 240);
          unint64_t v16 = (void *)(a1 + v12 + 64);
          int v17 = *(_DWORD *)(a1 + v12 + 272);
          if (v17 != *(_DWORD *)(a1 + v12 + 96))
          {
            if (v17 == 1)
            {
              long long v20 = *(void **)(a1 + v12 + 248);
              if (v20)
              {
                *(void *)(a1 + v12 + 256) = v20;
LABEL_23:
                operator delete(v20);
              }
            }
            else if (!v17 && *(char *)(a1 + v12 + 271) < 0)
            {
              long long v20 = *(void **)(a1 + v12 + 248);
              goto LABEL_23;
            }
            sub_4F38B0((void *)*(unsigned int *)(v13 + 96), (uint64_t *)(a1 + v12 + 64), (void *)(a1 + v12 + 240));
            *(_DWORD *)(v13 + 272) = *(_DWORD *)(v13 + 96);
            goto LABEL_25;
          }
          if (v17 == 1)
          {
            void *v15 = *v16;
            uint64_t v21 = a1 + v12;
            char v23 = (void **)(a1 + v12 + 248);
            long long v22 = *v23;
            if (*v23)
            {
              *(void *)(v21 + 256) = v22;
              operator delete(v22);
              void *v23 = 0;
              *(void *)(a1 + v12 + 256) = 0;
              *(void *)(a1 + v12 + 264) = 0;
            }
            *(_OWORD *)char v23 = *(_OWORD *)(v21 + 72);
            *(void *)(v21 + 264) = *(void *)(v21 + 88);
            *(void *)(v21 + 80) = 0;
            *(void *)(v21 + 88) = 0;
            *(void *)(v21 + 72) = 0;
          }
          else if (!v17)
          {
            void *v15 = *v16;
            uint64_t v18 = a1 + v12;
            long long v19 = (void **)(a1 + v12 + 248);
            if (*(char *)(a1 + v12 + 271) < 0) {
              operator delete(*v19);
            }
            *(_OWORD *)long long v19 = *(_OWORD *)(v18 + 72);
            *(void *)(a1 + v12 + 264) = *(void *)(v18 + 88);
            *(unsigned char *)(v18 + 95) = 0;
            *(unsigned char *)(v18 + 72) = 0;
          }
LABEL_25:
          uint64_t v24 = a1 + v12;
          *(void *)(a1 + v12 + 280) = *(void *)(a1 + v12 + 104);
          uint64_t v25 = (void **)(a1 + v12 + 288);
          if (*(char *)(a1 + v12 + 311) < 0) {
            operator delete(*v25);
          }
          *(_OWORD *)uint64_t v25 = *(_OWORD *)(v24 + 112);
          *(void *)(a1 + v12 + 304) = *(void *)(v24 + 128);
          *(unsigned char *)(v24 + 135) = 0;
          *(unsigned char *)(v24 + 112) = 0;
          *(unsigned char *)(v24 + 312) = *(unsigned char *)(v24 + 136);
          unint64_t v26 = (void **)(v24 + 320);
          if (*(char *)(v24 + 343) < 0) {
            operator delete(*v26);
          }
          uint64_t v27 = a1 + v12;
          *(_OWORD *)unint64_t v26 = *(_OWORD *)(a1 + v12 + 144);
          *(void *)(v24 + 336) = *(void *)(a1 + v12 + 160);
          *(unsigned char *)(v27 + 167) = 0;
          *(unsigned char *)(v27 + 144) = 0;
          *(unsigned char *)(v27 + 344) = *(unsigned char *)(a1 + v12 + 168);
          if (!v12) {
            break;
          }
          uint64_t v28 = sub_63A050((uint64_t)&v36, *a3);
          v12 -= 176;
          if (v28 >= sub_63A050(v27 - 176, *a3))
          {
            uint64_t v29 = a1 + v12 + 176;
            goto LABEL_33;
          }
        }
        uint64_t v29 = a1;
LABEL_33:
        long long v30 = v37;
        *(_OWORD *)uint64_t v29 = v36;
        *(_OWORD *)(v29 + 16) = v30;
        *(void *)(v27 + 32) = *(void *)&v38[0];
        *(_DWORD *)(v27 + 40) = DWORD2(v38[0]);
        *(void *)(v27 + 44) = *(void *)((char *)v38 + 12);
        *(void *)(v27 + 49) = *(void *)((char *)&v38[1] + 1);
        sub_4F377C(v27 + 64, (uint64_t)&v39);
        *(void *)(v29 + 104) = v44;
        uint64_t v31 = (void **)(v27 + 112);
        if (*(char *)(v29 + 135) < 0) {
          operator delete(*v31);
        }
        char v32 = 0;
        long long v33 = (void **)(v27 + 144);
        *(_OWORD *)uint64_t v31 = v45;
        *(void *)(v27 + 128) = v46;
        HIBYTE(v46) = 0;
        LOBYTE(v45) = 0;
        *(unsigned char *)(v29 + 136) = v47;
        if (*(char *)(v29 + 167) < 0)
        {
          operator delete(*v33);
          char v32 = HIBYTE(v46);
        }
        *(_OWORD *)long long v33 = v48;
        *(void *)(v27 + 160) = v49;
        HIBYTE(v49) = 0;
        LOBYTE(v48) = 0;
        *(unsigned char *)(v29 + 168) = v50;
        if (v32 < 0)
        {
          operator delete((void *)v45);
          unsigned int v34 = v43;
          if (v43 != 1) {
            goto LABEL_39;
          }
        }
        else
        {
          unsigned int v34 = v43;
          if (v43 != 1)
          {
LABEL_39:
            if (!v34 && v42 < 0)
            {
              char v35 = __p;
              goto LABEL_4;
            }
            goto LABEL_5;
          }
        }
        char v35 = __p;
        if (__p)
        {
          long long v41 = __p;
LABEL_4:
          operator delete(v35);
        }
LABEL_5:
        uint64_t v5 = (uint64_t)(v9 + 11);
        v7 += 176;
        uint64_t v8 = (uint64_t)v9;
      }
      while (v9 + 11 != a2);
    }
  }
}

void sub_8D5598(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_58CC(exception_object);
}

void sub_8D55B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_639C78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_8D55CC(uint64_t a1, long long *a2, unsigned int **a3)
{
  if ((long long *)a1 != a2)
  {
    uint64_t v4 = a1;
    uint64_t v5 = a1 + 176;
    if ((long long *)(a1 + 176) != a2)
    {
      uint64_t v7 = a1 + 88;
      do
      {
        uint64_t v8 = (long long *)v5;
        uint64_t v9 = sub_63A050(v5, *a3);
        if (v9 >= sub_63A050(v4, *a3)) {
          goto LABEL_5;
        }
        long long v10 = v8[1];
        long long v33 = *v8;
        long long v34 = v10;
        v35[0] = v8[2];
        *(_OWORD *)((char *)v35 + 9) = *(long long *)((char *)v8 + 41);
        unsigned int v40 = *(_DWORD *)(v4 + 272);
        sub_4F38B0((void *)v40, (uint64_t *)(v4 + 240), &v36);
        uint64_t v41 = *(void *)(v4 + 280);
        long long v42 = *(_OWORD *)(v4 + 288);
        uint64_t v43 = *(void *)(v4 + 304);
        *(void *)(v4 + 288) = 0;
        *(void *)(v4 + 296) = 0;
        *(void *)(v4 + 304) = 0;
        char v44 = *(unsigned char *)(v4 + 312);
        long long v45 = *(_OWORD *)(v4 + 320);
        uint64_t v46 = *(void *)(v4 + 336);
        *(void *)(v4 + 328) = 0;
        *(void *)(v4 + 336) = 0;
        *(void *)(v4 + 320) = 0;
        uint64_t v11 = v7;
        char v47 = *(unsigned char *)(v4 + 344);
        do
        {
          *(_OWORD *)(v11 + 88) = *(_OWORD *)(v11 - 88);
          *(_OWORD *)(v11 + 104) = *(_OWORD *)(v11 - 72);
          *(void *)(v11 + 120) = *(void *)(v11 - 56);
          *(_DWORD *)(v11 + 128) = *(_DWORD *)(v11 - 48);
          *(void *)(v11 + 132) = *(void *)(v11 - 44);
          *(void *)(v11 + 137) = *(void *)(v11 - 39);
          int v12 = *(_DWORD *)(v11 + 184);
          int v13 = *(_DWORD *)(v11 + 8);
          if (v12 == v13)
          {
            if (v12 == 1)
            {
              unint64_t v16 = *(void **)(v11 + 160);
              *(void *)(v11 + 152) = *(void *)(v11 - 24);
              if (v16)
              {
                *(void *)(v11 + 168) = v16;
                operator delete(v16);
                *(void *)(v11 + 160) = 0;
                *(void *)(v11 + 168) = 0;
                *(void *)(v11 + 176) = 0;
              }
              *(_OWORD *)(v11 + 160) = *(_OWORD *)(v11 - 16);
              *(void *)(v11 + 176) = *(void *)v11;
              *(void *)(v11 - 8) = 0;
              *(void *)uint64_t v11 = 0;
              *(void *)(v11 - 16) = 0;
            }
            else if (!v12)
            {
              *(void *)(v11 + 152) = *(void *)(v11 - 24);
              long long v14 = (void **)(v11 + 160);
              if (*(char *)(v11 + 183) < 0) {
                operator delete(*v14);
              }
              *(_OWORD *)long long v14 = *(_OWORD *)(v11 - 16);
              *(void *)(v11 + 176) = *(void *)v11;
              *(unsigned char *)(v11 + 7) = 0;
              *(unsigned char *)(v11 - 16) = 0;
            }
            goto LABEL_34;
          }
          if (v12 == 1)
          {
            unint64_t v15 = *(void **)(v11 + 160);
            if (v15)
            {
              *(void *)(v11 + 168) = v15;
LABEL_23:
              operator delete(v15);
            }
LABEL_24:
            int v13 = *(_DWORD *)(v11 + 8);
            goto LABEL_25;
          }
          if (!v12)
          {
            if (*(char *)(v11 + 183) < 0)
            {
              unint64_t v15 = *(void **)(v11 + 160);
              goto LABEL_23;
            }
            goto LABEL_24;
          }
LABEL_25:
          if (v13 == 1)
          {
            uint64_t v18 = *(unsigned char **)(v11 - 16);
            *(void *)(v11 + 152) = *(void *)(v11 - 24);
            *(void *)(v11 + 160) = 0;
            *(void *)(v11 + 168) = 0;
            *(void *)(v11 + 176) = 0;
            long long v19 = *(unsigned char **)(v11 - 8);
            int64_t v20 = v19 - v18;
            if (v19 != v18)
            {
              if (v20 < 0) {
                sub_2E00();
              }
              uint64_t v21 = (char *)operator new(v19 - v18);
              *(void *)(v11 + 160) = v21;
              *(void *)(v11 + 168) = v21;
              long long v22 = &v21[8 * (v20 >> 3)];
              *(void *)(v11 + 176) = v22;
              memcpy(v21, v18, v20);
              *(void *)(v11 + 168) = v22;
            }
          }
          else if (!v13)
          {
            *(void *)(v11 + 152) = *(void *)(v11 - 24);
            int v17 = (unsigned char *)(v11 + 160);
            if (*(char *)(v11 + 7) < 0)
            {
              sub_4200(v17, *(void **)(v11 - 16), *(void *)(v11 - 8));
            }
            else
            {
              *(_OWORD *)int v17 = *(_OWORD *)(v11 - 16);
              *(void *)(v11 + 176) = *(void *)v11;
            }
          }
          *(_DWORD *)(v11 + 184) = *(_DWORD *)(v11 + 8);
LABEL_34:
          *(void *)(v11 + 192) = *(void *)(v11 + 16);
          char v23 = (void **)(v11 + 200);
          if (*(char *)(v11 + 223) < 0) {
            operator delete(*v23);
          }
          *(_OWORD *)char v23 = *(_OWORD *)(v11 + 24);
          *(void *)(v11 + 216) = *(void *)(v11 + 40);
          *(unsigned char *)(v11 + 47) = 0;
          *(unsigned char *)(v11 + 24) = 0;
          *(unsigned char *)(v11 + 224) = *(unsigned char *)(v11 + 48);
          uint64_t v24 = (void **)(v11 + 232);
          if (*(char *)(v11 + 255) < 0) {
            operator delete(*v24);
          }
          *(_OWORD *)uint64_t v24 = *(_OWORD *)(v11 + 56);
          *(void *)(v11 + 248) = *(void *)(v11 + 72);
          *(unsigned char *)(v11 + 79) = 0;
          *(unsigned char *)(v11 + 56) = 0;
          *(unsigned char *)(v11 + 256) = *(unsigned char *)(v11 + 80);
          uint64_t v25 = sub_63A050((uint64_t)&v33, *a3);
          uint64_t v26 = sub_63A050(v11 - 264, *a3);
          v11 -= 176;
        }
        while (v25 < v26);
        long long v27 = v34;
        *(_OWORD *)(v11 + 88) = v33;
        *(_OWORD *)(v11 + 104) = v27;
        *(void *)(v11 + 120) = *(void *)&v35[0];
        *(_DWORD *)(v11 + 128) = DWORD2(v35[0]);
        *(void *)(v11 + 132) = *(void *)((char *)v35 + 12);
        *(void *)(v11 + 137) = *(void *)((char *)&v35[1] + 1);
        sub_4F377C(v11 + 152, (uint64_t)&v36);
        *(void *)(v11 + 192) = v41;
        uint64_t v28 = (void **)(v11 + 200);
        if (*(char *)(v11 + 223) < 0) {
          operator delete(*v28);
        }
        char v29 = 0;
        long long v30 = (void **)(v11 + 232);
        *(_OWORD *)uint64_t v28 = v42;
        *(void *)(v11 + 216) = v43;
        HIBYTE(v43) = 0;
        LOBYTE(v42) = 0;
        *(unsigned char *)(v11 + 224) = v44;
        if (*(char *)(v11 + 255) < 0)
        {
          operator delete(*v30);
          char v29 = HIBYTE(v43);
        }
        *(_OWORD *)long long v30 = v45;
        *(void *)(v11 + 248) = v46;
        HIBYTE(v46) = 0;
        LOBYTE(v45) = 0;
        *(unsigned char *)(v11 + 256) = v47;
        if (v29 < 0)
        {
          operator delete((void *)v42);
          unsigned int v31 = v40;
          if (v40 != 1) {
            goto LABEL_45;
          }
        }
        else
        {
          unsigned int v31 = v40;
          if (v40 != 1)
          {
LABEL_45:
            if (!v31 && v39 < 0)
            {
              char v32 = __p;
              goto LABEL_4;
            }
            goto LABEL_5;
          }
        }
        char v32 = __p;
        if (__p)
        {
          char v38 = __p;
LABEL_4:
          operator delete(v32);
        }
LABEL_5:
        uint64_t v5 = (uint64_t)(v8 + 11);
        v7 += 176;
        uint64_t v4 = (uint64_t)v8;
      }
      while (v8 + 11 != a2);
    }
  }
}

void sub_8D5A60(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_8D5AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_639C78((uint64_t)va);
  _Unwind_Resume(a1);
}

long long *sub_8D5ABC(uint64_t a1, long long *a2, unsigned int **a3)
{
  long long v6 = *(_OWORD *)(a1 + 16);
  long long v36 = *(_OWORD *)a1;
  long long v37 = v6;
  *(_OWORD *)char v38 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v38[9] = *(_OWORD *)(a1 + 41);
  uint64_t v7 = (uint64_t *)(a1 + 64);
  uint64_t v8 = (void *)*(unsigned int *)(a1 + 96);
  int v43 = (int)v8;
  sub_4F38B0(v8, v7, &v39);
  uint64_t v44 = *(void *)(a1 + 104);
  *(_OWORD *)long long v45 = *(_OWORD *)(a1 + 112);
  uint64_t v46 = *(void *)(a1 + 128);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = 0;
  char v47 = *(unsigned char *)(a1 + 136);
  *(_OWORD *)long long __p = *(_OWORD *)(a1 + 144);
  uint64_t v49 = *(void *)(a1 + 160);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 144) = 0;
  char v50 = *(unsigned char *)(a1 + 168);
  uint64_t v9 = sub_63A050((uint64_t)&v36, *a3);
  if (v9 >= sub_63A050((uint64_t)(a2 - 11), *a3))
  {
    int v12 = (long long *)(a1 + 176);
    do
    {
      long long v10 = v12;
      if (v12 >= a2) {
        break;
      }
      uint64_t v13 = sub_63A050((uint64_t)&v36, *a3);
      uint64_t v14 = sub_63A050((uint64_t)v10, *a3);
      int v12 = v10 + 11;
    }
    while (v13 >= v14);
  }
  else
  {
    long long v10 = (long long *)a1;
    do
    {
      uint64_t v11 = sub_63A050((uint64_t)&v36, *a3);
      v10 += 11;
    }
    while (v11 >= sub_63A050((uint64_t)v10, *a3));
  }
  if (v10 < a2)
  {
    do
    {
      uint64_t v15 = sub_63A050((uint64_t)&v36, *a3);
      a2 -= 11;
    }
    while (v15 < sub_63A050((uint64_t)a2, *a3));
  }
  while (v10 < a2)
  {
    sub_8D1408(v10, a2);
    do
    {
      uint64_t v16 = sub_63A050((uint64_t)&v36, *a3);
      v10 += 11;
    }
    while (v16 >= sub_63A050((uint64_t)v10, *a3));
    do
    {
      uint64_t v17 = sub_63A050((uint64_t)&v36, *a3);
      a2 -= 11;
    }
    while (v17 < sub_63A050((uint64_t)a2, *a3));
  }
  uint64_t v18 = v10 - 11;
  if (v10 - 11 != (long long *)a1)
  {
    long long v19 = (void **)(a1 + 112);
    long long v20 = *(v10 - 10);
    *(_OWORD *)a1 = *v18;
    *(_OWORD *)(a1 + 16) = v20;
    uint64_t v21 = *((void *)v10 - 18);
    *(_DWORD *)(a1 + 40) = *((_DWORD *)v10 - 34);
    *(void *)(a1 + 32) = v21;
    uint64_t v22 = *(void *)((char *)v10 - 132);
    *(void *)(a1 + 49) = *(void *)((char *)v10 - 127);
    *(void *)(a1 + 44) = v22;
    sub_4F377C((uint64_t)v7, (uint64_t)(v10 - 7));
    *(void *)(a1 + 104) = *((void *)v10 - 9);
    if (*(char *)(a1 + 135) < 0) {
      operator delete(*v19);
    }
    char v23 = (void **)(a1 + 144);
    long long v24 = *(v10 - 4);
    *(void *)(a1 + 128) = *((void *)v10 - 6);
    *(_OWORD *)long long v19 = v24;
    *((unsigned char *)v10 - 41) = 0;
    *((unsigned char *)v10 - 64) = 0;
    *(unsigned char *)(a1 + 136) = *((unsigned char *)v10 - 40);
    if (*(char *)(a1 + 167) < 0) {
      operator delete(*v23);
    }
    long long v25 = *(v10 - 2);
    *(void *)(a1 + 160) = *((void *)v10 - 2);
    *(_OWORD *)char v23 = v25;
    *((unsigned char *)v10 - 9) = 0;
    *((unsigned char *)v10 - 32) = 0;
    *(unsigned char *)(a1 + 168) = *((unsigned char *)v10 - 8);
  }
  long long v26 = v37;
  long long *v18 = v36;
  *(v10 - 10) = v26;
  uint64_t v27 = *(void *)v38;
  *((_DWORD *)v10 - 34) = *(_DWORD *)&v38[8];
  *((void *)v10 - 18) = v27;
  uint64_t v28 = *(void *)&v38[12];
  *(void *)((char *)v10 - 127) = *(void *)&v38[17];
  *(void *)((char *)v10 - 132) = v28;
  sub_4F377C((uint64_t)(v10 - 7), (uint64_t)&v39);
  *((void *)v10 - 9) = v44;
  char v29 = (void **)(v10 - 4);
  if (*((char *)v10 - 41) < 0) {
    operator delete(*v29);
  }
  long long v30 = *(_OWORD *)v45;
  *((void *)v10 - 6) = v46;
  *(_OWORD *)char v29 = v30;
  HIBYTE(v46) = 0;
  LOBYTE(v45[0]) = 0;
  *((unsigned char *)v10 - 40) = v47;
  unsigned int v31 = (void **)(v10 - 2);
  if (*((char *)v10 - 9) < 0) {
    operator delete(*v31);
  }
  long long v32 = *(_OWORD *)__p;
  *((void *)v10 - 2) = v49;
  *(_OWORD *)unsigned int v31 = v32;
  HIBYTE(v49) = 0;
  LOBYTE(__p[0]) = 0;
  *((unsigned char *)v10 - 8) = v50;
  if ((SHIBYTE(v49) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v46) & 0x80000000) == 0) {
      goto LABEL_27;
    }
LABEL_32:
    operator delete(v45[0]);
    int v33 = v43;
    if (v43 != 1) {
      goto LABEL_28;
    }
    goto LABEL_33;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v46) < 0) {
    goto LABEL_32;
  }
LABEL_27:
  int v33 = v43;
  if (v43 != 1)
  {
LABEL_28:
    if (!v33 && v42 < 0)
    {
      long long v34 = v40;
LABEL_35:
      operator delete(v34);
      return v10;
    }
    return v10;
  }
LABEL_33:
  long long v34 = v40;
  if (v40)
  {
    uint64_t v41 = v40;
    goto LABEL_35;
  }
  return v10;
}

void sub_8D5EA0(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

long long *sub_8D5ED8(uint64_t a1, unint64_t a2, unsigned int **a3)
{
  long long v6 = *(_OWORD *)(a1 + 16);
  long long v36 = *(_OWORD *)a1;
  long long v37 = v6;
  *(_OWORD *)char v38 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v38[9] = *(_OWORD *)(a1 + 41);
  uint64_t v7 = (uint64_t *)(a1 + 64);
  uint64_t v8 = (void *)*(unsigned int *)(a1 + 96);
  int v43 = (int)v8;
  sub_4F38B0(v8, v7, &v39);
  uint64_t v9 = 0;
  uint64_t v44 = *(void *)(a1 + 104);
  *(_OWORD *)long long v45 = *(_OWORD *)(a1 + 112);
  uint64_t v46 = *(void *)(a1 + 128);
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  char v47 = *(unsigned char *)(a1 + 136);
  uint64_t v49 = *(void *)(a1 + 160);
  char v50 = *(unsigned char *)(a1 + 168);
  long long v34 = (void **)(a1 + 144);
  char v35 = (void **)(a1 + 112);
  *(_OWORD *)long long __p = *(_OWORD *)(a1 + 144);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 144) = 0;
  do
  {
    uint64_t v10 = sub_63A050(a1 + v9 + 176, *a3);
    v9 += 176;
  }
  while (v10 < sub_63A050((uint64_t)&v36, *a3));
  unint64_t v11 = a1 + v9;
  if (v9 == 176)
  {
    do
    {
      if (v11 >= a2) {
        break;
      }
      a2 -= 176;
      uint64_t v13 = sub_63A050(a2, *a3);
    }
    while (v13 >= sub_63A050((uint64_t)&v36, *a3));
  }
  else
  {
    do
    {
      a2 -= 176;
      uint64_t v12 = sub_63A050(a2, *a3);
    }
    while (v12 >= sub_63A050((uint64_t)&v36, *a3));
  }
  uint64_t v14 = (long long *)(a1 + v9);
  if (v11 < a2)
  {
    uint64_t v15 = (long long *)a2;
    do
    {
      sub_8D1408(v14, v15);
      do
      {
        v14 += 11;
        uint64_t v16 = sub_63A050((uint64_t)v14, *a3);
      }
      while (v16 < sub_63A050((uint64_t)&v36, *a3));
      do
      {
        v15 -= 11;
        uint64_t v17 = sub_63A050((uint64_t)v15, *a3);
      }
      while (v17 >= sub_63A050((uint64_t)&v36, *a3));
    }
    while (v14 < v15);
  }
  uint64_t v18 = v14 - 11;
  if (v14 - 11 != (long long *)a1)
  {
    long long v19 = *(v14 - 10);
    *(_OWORD *)a1 = *v18;
    *(_OWORD *)(a1 + 16) = v19;
    uint64_t v20 = *((void *)v14 - 18);
    *(_DWORD *)(a1 + 40) = *((_DWORD *)v14 - 34);
    *(void *)(a1 + 32) = v20;
    uint64_t v21 = *(void *)((char *)v14 - 132);
    *(void *)(a1 + 49) = *(void *)((char *)v14 - 127);
    *(void *)(a1 + 44) = v21;
    sub_4F377C((uint64_t)v7, (uint64_t)(v14 - 7));
    *(void *)(a1 + 104) = *((void *)v14 - 9);
    if (*(char *)(a1 + 135) < 0) {
      operator delete(*v35);
    }
    long long v22 = *(v14 - 4);
    *(void *)(a1 + 128) = *((void *)v14 - 6);
    *(_OWORD *)char v35 = v22;
    *((unsigned char *)v14 - 41) = 0;
    *((unsigned char *)v14 - 64) = 0;
    *(unsigned char *)(a1 + 136) = *((unsigned char *)v14 - 40);
    if (*(char *)(a1 + 167) < 0) {
      operator delete(*v34);
    }
    long long v23 = *(v14 - 2);
    *(void *)(a1 + 160) = *((void *)v14 - 2);
    *(_OWORD *)long long v34 = v23;
    *((unsigned char *)v14 - 9) = 0;
    *((unsigned char *)v14 - 32) = 0;
    *(unsigned char *)(a1 + 168) = *((unsigned char *)v14 - 8);
  }
  long long v24 = v37;
  long long *v18 = v36;
  *(v14 - 10) = v24;
  uint64_t v25 = *(void *)v38;
  *((_DWORD *)v14 - 34) = *(_DWORD *)&v38[8];
  *((void *)v14 - 18) = v25;
  uint64_t v26 = *(void *)&v38[12];
  *(void *)((char *)v14 - 127) = *(void *)&v38[17];
  *(void *)((char *)v14 - 132) = v26;
  sub_4F377C((uint64_t)(v14 - 7), (uint64_t)&v39);
  *((void *)v14 - 9) = v44;
  uint64_t v27 = (void **)(v14 - 4);
  if (*((char *)v14 - 41) < 0) {
    operator delete(*v27);
  }
  long long v28 = *(_OWORD *)v45;
  *((void *)v14 - 6) = v46;
  *(_OWORD *)uint64_t v27 = v28;
  HIBYTE(v46) = 0;
  LOBYTE(v45[0]) = 0;
  *((unsigned char *)v14 - 40) = v47;
  char v29 = (void **)(v14 - 2);
  if (*((char *)v14 - 9) < 0) {
    operator delete(*v29);
  }
  long long v30 = *(_OWORD *)__p;
  *((void *)v14 - 2) = v49;
  *(_OWORD *)char v29 = v30;
  HIBYTE(v49) = 0;
  LOBYTE(__p[0]) = 0;
  *((unsigned char *)v14 - 8) = v50;
  if ((SHIBYTE(v49) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v46) & 0x80000000) == 0) {
      goto LABEL_26;
    }
LABEL_31:
    operator delete(v45[0]);
    int v31 = v43;
    if (v43 != 1) {
      goto LABEL_27;
    }
    goto LABEL_32;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v46) < 0) {
    goto LABEL_31;
  }
LABEL_26:
  int v31 = v43;
  if (v43 != 1)
  {
LABEL_27:
    if (!v31 && v42 < 0)
    {
      long long v32 = v40;
LABEL_34:
      operator delete(v32);
      return v14 - 11;
    }
    return v14 - 11;
  }
LABEL_32:
  long long v32 = v40;
  if (v40)
  {
    uint64_t v41 = v40;
    goto LABEL_34;
  }
  return v14 - 11;
}

void sub_8D62CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_8D6300(long long *a1, long long *a2, unsigned int **a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(0x2E8BA2E8BA2E8BA3 * v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      char v29 = a2 - 11;
      uint64_t v30 = sub_63A050((uint64_t)(a2 - 11), *a3);
      if (v30 < sub_63A050((uint64_t)a1, *a3)) {
        sub_8D1408(a1, v29);
      }
      return 1;
    case 3:
      sub_8D0560(a1, a1 + 11, a2 - 11, a3);
      return 1;
    case 4:
      sub_8D16E4(a1, a1 + 11, a1 + 22, a2 - 11, a3);
      return 1;
    case 5:
      sub_8D17DC(a1, a1 + 11, a1 + 22, a1 + 33, a2 - 11, a3);
      return 1;
    default:
      uint64_t v8 = (uint64_t)(a1 + 22);
      sub_8D0560(a1, a1 + 11, a1 + 22, a3);
      uint64_t v9 = (uint64_t)(a1 + 33);
      if (a1 + 33 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    uint64_t v12 = sub_63A050(v9, *a3);
    if (v12 >= sub_63A050(v8, *a3)) {
      goto LABEL_6;
    }
    long long v13 = *(_OWORD *)(v9 + 16);
    long long v31 = *(_OWORD *)v9;
    long long v32 = v13;
    v33[0] = *(_OWORD *)(v9 + 32);
    *(_OWORD *)((char *)v33 + 9) = *(_OWORD *)(v9 + 41);
    unsigned int v38 = *(_DWORD *)(v9 + 96);
    sub_4F38B0((void *)v38, (uint64_t *)(v9 + 64), &v34);
    uint64_t v39 = *(void *)(v9 + 104);
    long long v40 = *(_OWORD *)(v9 + 112);
    uint64_t v41 = *(void *)(v9 + 128);
    *(void *)(v9 + 112) = 0;
    *(void *)(v9 + 120) = 0;
    *(void *)(v9 + 128) = 0;
    char v42 = *(unsigned char *)(v9 + 136);
    long long v43 = *(_OWORD *)(v9 + 144);
    uint64_t v44 = *(void *)(v9 + 160);
    *(void *)(v9 + 152) = 0;
    *(void *)(v9 + 160) = 0;
    char v45 = *(unsigned char *)(v9 + 168);
    uint64_t v14 = v10;
    *(void *)(v9 + 144) = 0;
    while (1)
    {
      uint64_t v15 = (char *)a1 + v14;
      long long v16 = *(long long *)((char *)a1 + v14 + 368);
      *((_OWORD *)v15 + 33) = *(long long *)((char *)a1 + v14 + 352);
      *((_OWORD *)v15 + 34) = v16;
      *((void *)v15 + 70) = *(void *)((char *)a1 + v14 + 384);
      *((_DWORD *)v15 + 142) = *(_DWORD *)((char *)a1 + v14 + 392);
      uint64_t v17 = (void *)((char *)a1 + v14 + 572);
      void *v17 = *(void *)((char *)a1 + v14 + 396);
      *(void *)((char *)v17 + 5) = *(void *)((char *)a1 + v14 + 401);
      sub_4F377C((uint64_t)a1 + v14 + 592, (uint64_t)a1 + v14 + 416);
      *((void *)v15 + 79) = *((void *)v15 + 57);
      uint64_t v18 = (void **)((char *)a1 + v14 + 640);
      if (*((char *)a1 + v14 + 663) < 0) {
        operator delete(*v18);
      }
      *(_OWORD *)uint64_t v18 = *((_OWORD *)v15 + 29);
      *((void *)v15 + 82) = *((void *)v15 + 60);
      v15[487] = 0;
      v15[464] = 0;
      v15[664] = v15[488];
      long long v19 = (void **)(v15 + 672);
      if (v15[695] < 0) {
        operator delete(*v19);
      }
      uint64_t v20 = (char *)a1 + v14;
      *(_OWORD *)long long v19 = *(long long *)((char *)a1 + v14 + 496);
      *((void *)v15 + 86) = *(void *)((char *)a1 + v14 + 512);
      v20[519] = 0;
      v20[496] = 0;
      v20[696] = *((unsigned char *)a1 + v14 + 520);
      if (v14 == -352) {
        break;
      }
      uint64_t v21 = sub_63A050((uint64_t)&v31, *a3);
      v14 -= 176;
      if (v21 >= sub_63A050((uint64_t)(v20 + 176), *a3))
      {
        uint64_t v22 = (uint64_t)a1 + v14 + 528;
        goto LABEL_17;
      }
    }
    uint64_t v22 = (uint64_t)a1;
LABEL_17:
    long long v23 = v32;
    *(_OWORD *)uint64_t v22 = v31;
    *(_OWORD *)(v22 + 16) = v23;
    *((void *)v20 + 48) = *(void *)&v33[0];
    *((_DWORD *)v20 + 98) = DWORD2(v33[0]);
    *(void *)(v20 + 396) = *(void *)((char *)v33 + 12);
    *(void *)(v20 + 401) = *(void *)((char *)&v33[1] + 1);
    sub_4F377C((uint64_t)(v20 + 416), (uint64_t)&v34);
    *(void *)(v22 + 104) = v39;
    long long v24 = (void **)(v20 + 464);
    if (*(char *)(v22 + 135) < 0) {
      operator delete(*v24);
    }
    char v25 = 0;
    uint64_t v26 = (void **)(v20 + 496);
    *(_OWORD *)long long v24 = v40;
    *((void *)v20 + 60) = v41;
    HIBYTE(v41) = 0;
    LOBYTE(v40) = 0;
    *(unsigned char *)(v22 + 136) = v42;
    if (*(char *)(v22 + 167) < 0)
    {
      operator delete(*v26);
      char v25 = HIBYTE(v41);
    }
    *(_OWORD *)uint64_t v26 = v43;
    *((void *)v20 + 64) = v44;
    HIBYTE(v44) = 0;
    LOBYTE(v43) = 0;
    *(unsigned char *)(v22 + 168) = v45;
    if (v25 < 0)
    {
      operator delete((void *)v40);
      unsigned int v27 = v38;
      if (v38 != 1)
      {
LABEL_23:
        if (!v27 && v37 < 0)
        {
          long long v28 = __p;
LABEL_4:
          operator delete(v28);
          goto LABEL_5;
        }
        goto LABEL_5;
      }
    }
    else
    {
      unsigned int v27 = v38;
      if (v38 != 1) {
        goto LABEL_23;
      }
    }
    long long v28 = __p;
    if (__p)
    {
      long long v36 = __p;
      goto LABEL_4;
    }
LABEL_5:
    if (++v11 == 8) {
      return v9 + 176 == (void)a2;
    }
LABEL_6:
    uint64_t v8 = v9;
    v10 += 176;
    v9 += 176;
    if ((long long *)v9 == a2) {
      return 1;
    }
  }
}

void sub_8D67C0(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_8D67DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_639C78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_8D6808(uint64_t a1, unsigned int **a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    uint64_t v39 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= 0x2E8BA2E8BA2E8BA3 * ((a4 - a1) >> 4))
    {
      uint64_t v8 = (0x5D1745D1745D1746 * ((a4 - a1) >> 4)) | 1;
      uint64_t v9 = a1 + 176 * v8;
      uint64_t v10 = 0x5D1745D1745D1746 * ((a4 - a1) >> 4) + 2;
      if (v10 < a3)
      {
        uint64_t v11 = sub_63A050(a1 + 176 * v8, *a2);
        if (v11 < sub_63A050(v9 + 176, *a2))
        {
          v9 += 176;
          uint64_t v8 = v10;
        }
      }
      uint64_t v12 = sub_63A050(v9, *a2);
      if (v12 >= sub_63A050(v5, *a2))
      {
        long long v13 = *(_OWORD *)(v5 + 16);
        long long v41 = *(_OWORD *)v5;
        long long v42 = v13;
        *(_OWORD *)long long v43 = *(_OWORD *)(v5 + 32);
        *(_OWORD *)&v43[9] = *(_OWORD *)(v5 + 41);
        unsigned int v48 = *(_DWORD *)(v5 + 96);
        uint64_t v38 = a1;
        sub_4F38B0((void *)v48, (uint64_t *)(v5 + 64), &v44);
        uint64_t v49 = *(void *)(v5 + 104);
        *(_OWORD *)long long __p = *(_OWORD *)(v5 + 112);
        uint64_t v51 = *(void *)(v5 + 128);
        *(void *)(v5 + 112) = 0;
        *(void *)(v5 + 120) = 0;
        *(void *)(v5 + 128) = 0;
        char v52 = *(unsigned char *)(v5 + 136);
        long long v53 = *(_OWORD *)(v5 + 144);
        uint64_t v54 = *(void *)(v5 + 160);
        *(void *)(v5 + 152) = 0;
        *(void *)(v5 + 160) = 0;
        char v55 = *(unsigned char *)(v5 + 168);
        *(void *)(v5 + 144) = 0;
        do
        {
          uint64_t v14 = v9;
          long long v15 = *(_OWORD *)(v9 + 16);
          *(_OWORD *)uint64_t v5 = *(_OWORD *)v9;
          *(_OWORD *)(v5 + 16) = v15;
          uint64_t v17 = v9 + 32;
          uint64_t v16 = *(void *)(v9 + 32);
          *(_DWORD *)(v5 + 40) = *(_DWORD *)(v9 + 40);
          *(void *)(v5 + 32) = v16;
          long long v19 = (void *)(v9 + 44);
          uint64_t v18 = *(void *)(v9 + 44);
          *(void *)(v5 + 49) = *(void *)(v9 + 49);
          *(void *)(v5 + 44) = v18;
          uint64_t v20 = v9 + 64;
          sub_4F377C(v5 + 64, v9 + 64);
          *(void *)(v5 + 104) = *(void *)(v9 + 104);
          uint64_t v21 = (void **)(v5 + 112);
          if (*(char *)(v5 + 135) < 0) {
            operator delete(*v21);
          }
          long long v22 = *(_OWORD *)(v9 + 112);
          *(void *)(v5 + 128) = *(void *)(v9 + 128);
          *(_OWORD *)uint64_t v21 = v22;
          *(unsigned char *)(v9 + 135) = 0;
          *(unsigned char *)(v9 + 112) = 0;
          *(unsigned char *)(v5 + 136) = *(unsigned char *)(v9 + 136);
          long long v23 = (void **)(v5 + 144);
          if (*(char *)(v5 + 167) < 0) {
            operator delete(*v23);
          }
          long long v24 = *(_OWORD *)(v9 + 144);
          *(void *)(v5 + 160) = *(void *)(v9 + 160);
          *(_OWORD *)long long v23 = v24;
          *(unsigned char *)(v9 + 167) = 0;
          *(unsigned char *)(v9 + 144) = 0;
          *(unsigned char *)(v5 + 168) = *(unsigned char *)(v9 + 168);
          if (v39 < v8) {
            break;
          }
          uint64_t v25 = (2 * v8) | 1;
          uint64_t v9 = v38 + 176 * v25;
          uint64_t v8 = 2 * v8 + 2;
          if (v8 >= a3)
          {
            uint64_t v8 = v25;
          }
          else
          {
            uint64_t v26 = sub_63A050(v38 + 176 * v25, *a2);
            if (v26 >= sub_63A050(v9 + 176, *a2)) {
              uint64_t v8 = v25;
            }
            else {
              v9 += 176;
            }
          }
          uint64_t v27 = sub_63A050(v9, *a2);
          uint64_t v5 = v14;
        }
        while (v27 >= sub_63A050((uint64_t)&v41, *a2));
        long long v28 = (void **)(v14 + 112);
        long long v29 = v42;
        *(_OWORD *)uint64_t v14 = v41;
        *(_OWORD *)(v14 + 16) = v29;
        uint64_t v30 = *(void *)v43;
        *(_DWORD *)(v17 + 8) = *(_DWORD *)&v43[8];
        *(void *)uint64_t v17 = v30;
        uint64_t v31 = *(void *)&v43[12];
        *(void *)((char *)v19 + 5) = *(void *)&v43[17];
        *long long v19 = v31;
        sub_4F377C(v20, (uint64_t)&v44);
        *(void *)(v14 + 104) = v49;
        if (*(char *)(v14 + 135) < 0) {
          operator delete(*v28);
        }
        long long v32 = (_OWORD *)(v14 + 144);
        long long v33 = *(_OWORD *)__p;
        *(void *)(v14 + 128) = v51;
        *(_OWORD *)long long v28 = v33;
        HIBYTE(v51) = 0;
        LOBYTE(__p[0]) = 0;
        *(unsigned char *)(v14 + 136) = v52;
        if (*(char *)(v14 + 167) < 0)
        {
          operator delete(*(void **)(v14 + 144));
          int v35 = SHIBYTE(v51);
          long long v36 = v53;
          *(void *)(v14 + 160) = v54;
          _OWORD *v32 = v36;
          HIBYTE(v54) = 0;
          LOBYTE(v53) = 0;
          *(unsigned char *)(v14 + 168) = v55;
          if (v35 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v34 = v53;
          *(void *)(v14 + 160) = v54;
          _OWORD *v32 = v34;
          HIBYTE(v54) = 0;
          LOBYTE(v53) = 0;
          *(unsigned char *)(v14 + 168) = v55;
        }
        if (v48 == 1)
        {
          char v37 = v45;
          if (!v45) {
            return;
          }
          uint64_t v46 = v45;
          goto LABEL_31;
        }
        if (!v48 && v47 < 0)
        {
          char v37 = v45;
LABEL_31:
          operator delete(v37);
        }
      }
    }
  }
}

void sub_8D6C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_8D6C34(uint64_t a1, uint64_t a2, unsigned int **a3, uint64_t a4)
{
  if (a4 < 2) {
    return;
  }
  long long v32 = *(_OWORD *)a1;
  long long v33 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)long long v34 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v34[9] = *(_OWORD *)(a1 + 41);
  uint64_t v8 = (uint64_t *)(a1 + 64);
  uint64_t v9 = (void *)*(unsigned int *)(a1 + 96);
  int v39 = (int)v9;
  sub_4F38B0(v9, v8, &v35);
  uint64_t v40 = *(void *)(a1 + 104);
  *(_OWORD *)long long v41 = *(_OWORD *)(a1 + 112);
  uint64_t v42 = *(void *)(a1 + 128);
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  char v43 = *(unsigned char *)(a1 + 136);
  *(_OWORD *)long long __p = *(_OWORD *)(a1 + 144);
  uint64_t v45 = *(void *)(a1 + 160);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 144) = 0;
  char v46 = *(unsigned char *)(a1 + 168);
  uint64_t v10 = sub_8D213C(a1, a3, a4);
  uint64_t v11 = (_OWORD *)(a2 - 176);
  uint64_t v12 = (void *)(v10 + 32);
  long long v13 = (void *)(v10 + 44);
  uint64_t v14 = v10 + 64;
  if (v10 == a2 - 176)
  {
    *(_OWORD *)uint64_t v10 = v32;
    *(_OWORD *)(v10 + 16) = v33;
    *(_DWORD *)(v10 + 40) = *(_DWORD *)&v34[8];
    void *v12 = *(void *)v34;
    *(void *)(v10 + 49) = *(void *)&v34[17];
    *long long v13 = *(void *)&v34[12];
    sub_4F377C(v14, (uint64_t)&v35);
    *(void *)(v10 + 104) = v40;
    uint64_t v27 = (void **)(v10 + 112);
    if (*(char *)(v10 + 135) < 0) {
      operator delete(*v27);
    }
    long long v28 = *(_OWORD *)v41;
    *(void *)(v10 + 128) = v42;
    *(_OWORD *)uint64_t v27 = v28;
    HIBYTE(v42) = 0;
    LOBYTE(v41[0]) = 0;
    *(unsigned char *)(v10 + 136) = v43;
    long long v29 = (void **)(v10 + 144);
    if (*(char *)(v10 + 167) < 0) {
      operator delete(*v29);
    }
    long long v30 = *(_OWORD *)__p;
    *(void *)(v10 + 160) = v45;
    *(_OWORD *)long long v29 = v30;
    HIBYTE(v45) = 0;
    LOBYTE(__p[0]) = 0;
    *(unsigned char *)(v10 + 168) = v46;
    if (SHIBYTE(v42) < 0) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v31 = a3;
    long long v15 = *(_OWORD *)(a2 - 160);
    *(_OWORD *)uint64_t v10 = *v11;
    *(_OWORD *)(v10 + 16) = v15;
    uint64_t v16 = *(void *)(a2 - 144);
    *(_DWORD *)(v10 + 40) = *(_DWORD *)(a2 - 136);
    void *v12 = v16;
    uint64_t v17 = *(void *)(a2 - 132);
    *(void *)(v10 + 49) = *(void *)(a2 - 127);
    *long long v13 = v17;
    sub_4F377C(v14, a2 - 112);
    *(void *)(v10 + 104) = *(void *)(a2 - 72);
    uint64_t v18 = (void **)(v10 + 112);
    if (*(char *)(v10 + 135) < 0) {
      operator delete(*v18);
    }
    long long v19 = (void **)(a2 - 64);
    long long v20 = *(_OWORD *)(a2 - 64);
    *(void *)(v10 + 128) = *(void *)(a2 - 48);
    *(_OWORD *)uint64_t v18 = v20;
    *(unsigned char *)(a2 - 41) = 0;
    *(unsigned char *)(a2 - 64) = 0;
    *(unsigned char *)(v10 + 136) = *(unsigned char *)(a2 - 40);
    uint64_t v21 = (void **)(v10 + 144);
    if (*(char *)(v10 + 167) < 0) {
      operator delete(*v21);
    }
    long long v22 = (void **)(a2 - 32);
    long long v23 = *(_OWORD *)(a2 - 32);
    *(void *)(v10 + 160) = *(void *)(a2 - 16);
    *(_OWORD *)uint64_t v21 = v23;
    *(unsigned char *)(a2 - 9) = 0;
    *(unsigned char *)(a2 - 32) = 0;
    *(unsigned char *)(v10 + 168) = *(unsigned char *)(a2 - 8);
    uint64_t v24 = v10 + 176;
    *uint64_t v11 = v32;
    *(_OWORD *)(a2 - 160) = v33;
    *(void *)(a2 - 144) = *(void *)v34;
    *(_DWORD *)(a2 - 136) = *(_DWORD *)&v34[8];
    *(void *)(a2 - 132) = *(void *)&v34[12];
    *(void *)(a2 - 127) = *(void *)&v34[17];
    sub_4F377C(a2 - 112, (uint64_t)&v35);
    *(void *)(a2 - 72) = v40;
    if (*(char *)(a2 - 41) < 0) {
      operator delete(*v19);
    }
    *(_OWORD *)long long v19 = *(_OWORD *)v41;
    *(void *)(a2 - 48) = v42;
    HIBYTE(v42) = 0;
    LOBYTE(v41[0]) = 0;
    *(unsigned char *)(a2 - 40) = v43;
    if (*(char *)(a2 - 9) < 0) {
      operator delete(*v22);
    }
    *(_OWORD *)long long v22 = *(_OWORD *)__p;
    *(void *)(a2 - 16) = v45;
    HIBYTE(v45) = 0;
    LOBYTE(__p[0]) = 0;
    *(unsigned char *)(a2 - 8) = v46;
    sub_8D7030(a1, v24, v31, 0x2E8BA2E8BA2E8BA3 * ((v24 - a1) >> 4));
    if ((SHIBYTE(v45) & 0x80000000) == 0)
    {
      if ((SHIBYTE(v42) & 0x80000000) == 0) {
        goto LABEL_13;
      }
LABEL_24:
      operator delete(v41[0]);
      int v25 = v39;
      if (v39 != 1) {
        goto LABEL_14;
      }
LABEL_25:
      uint64_t v26 = v36;
      if (!v36) {
        return;
      }
      char v37 = v36;
      goto LABEL_27;
    }
    operator delete(__p[0]);
    if (SHIBYTE(v42) < 0) {
      goto LABEL_24;
    }
  }
LABEL_13:
  int v25 = v39;
  if (v39 == 1) {
    goto LABEL_25;
  }
LABEL_14:
  if (!v25 && v38 < 0)
  {
    uint64_t v26 = v36;
LABEL_27:
    operator delete(v26);
  }
}

void sub_8D700C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_8D7030(uint64_t a1, uint64_t a2, unsigned int **a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v7 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v8 = a1 + 176 * v7;
    uint64_t v9 = a2 - 176;
    uint64_t v10 = sub_63A050(v8, *a3);
    if (v10 < sub_63A050(v9, *a3))
    {
      long long v11 = *(_OWORD *)(v9 + 16);
      long long v29 = *(_OWORD *)v9;
      long long v30 = v11;
      *(_OWORD *)uint64_t v31 = *(_OWORD *)(v9 + 32);
      *(_OWORD *)&v31[9] = *(_OWORD *)(v9 + 41);
      unsigned int v36 = *(_DWORD *)(a2 - 80);
      sub_4F38B0((void *)v36, (uint64_t *)(a2 - 112), &v32);
      uint64_t v37 = *(void *)(a2 - 72);
      *(_OWORD *)long long __p = *(_OWORD *)(a2 - 64);
      uint64_t v39 = *(void *)(a2 - 48);
      *(void *)(a2 - 64) = 0;
      *(void *)(a2 - 56) = 0;
      *(void *)(a2 - 48) = 0;
      char v40 = *(unsigned char *)(a2 - 40);
      long long v41 = *(_OWORD *)(a2 - 32);
      uint64_t v42 = *(void *)(a2 - 16);
      *(void *)(a2 - 24) = 0;
      *(void *)(a2 - 16) = 0;
      *(void *)(a2 - 32) = 0;
      char v43 = *(unsigned char *)(a2 - 8);
      do
      {
        uint64_t v12 = v8;
        long long v13 = *(_OWORD *)(v8 + 16);
        *(_OWORD *)uint64_t v9 = *(_OWORD *)v8;
        *(_OWORD *)(v9 + 16) = v13;
        uint64_t v15 = v8 + 32;
        uint64_t v14 = *(void *)(v8 + 32);
        *(_DWORD *)(v9 + 40) = *(_DWORD *)(v8 + 40);
        *(void *)(v9 + 32) = v14;
        uint64_t v17 = (void *)(v8 + 44);
        uint64_t v16 = *(void *)(v8 + 44);
        *(void *)(v9 + 49) = *(void *)(v8 + 49);
        *(void *)(v9 + 44) = v16;
        uint64_t v18 = v8 + 64;
        sub_4F377C(v9 + 64, v8 + 64);
        *(void *)(v9 + 104) = *(void *)(v8 + 104);
        long long v19 = (void **)(v9 + 112);
        if (*(char *)(v9 + 135) < 0) {
          operator delete(*v19);
        }
        long long v20 = *(_OWORD *)(v12 + 112);
        *(void *)(v9 + 128) = *(void *)(v12 + 128);
        *(_OWORD *)long long v19 = v20;
        *(unsigned char *)(v12 + 135) = 0;
        *(unsigned char *)(v12 + 112) = 0;
        *(unsigned char *)(v9 + 136) = *(unsigned char *)(v12 + 136);
        uint64_t v21 = (void **)(v9 + 144);
        if (*(char *)(v9 + 167) < 0) {
          operator delete(*v21);
        }
        long long v22 = *(_OWORD *)(v12 + 144);
        *(void *)(v9 + 160) = *(void *)(v12 + 160);
        *(_OWORD *)uint64_t v21 = v22;
        *(unsigned char *)(v12 + 167) = 0;
        *(unsigned char *)(v12 + 144) = 0;
        *(unsigned char *)(v9 + 168) = *(unsigned char *)(v12 + 168);
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = a1 + 176 * v7;
        uint64_t v23 = sub_63A050(v8, *a3);
        uint64_t v9 = v12;
      }
      while (v23 < sub_63A050((uint64_t)&v29, *a3));
      uint64_t v24 = (void **)(v12 + 112);
      long long v25 = v30;
      *(_OWORD *)uint64_t v12 = v29;
      *(_OWORD *)(v12 + 16) = v25;
      *(void *)uint64_t v15 = *(void *)v31;
      *(_DWORD *)(v15 + 8) = *(_DWORD *)&v31[8];
      void *v17 = *(void *)&v31[12];
      *(void *)((char *)v17 + 5) = *(void *)&v31[17];
      sub_4F377C(v18, (uint64_t)&v32);
      *(void *)(v12 + 104) = v37;
      if (*(char *)(v12 + 135) < 0) {
        operator delete(*v24);
      }
      uint64_t v26 = (_OWORD *)(v12 + 144);
      *(_OWORD *)uint64_t v24 = *(_OWORD *)__p;
      *(void *)(v12 + 128) = v39;
      HIBYTE(v39) = 0;
      LOBYTE(__p[0]) = 0;
      *(unsigned char *)(v12 + 136) = v40;
      if (*(char *)(v12 + 167) < 0)
      {
        operator delete(*(void **)(v12 + 144));
        int v27 = SHIBYTE(v39);
        _OWORD *v26 = v41;
        *(void *)(v12 + 160) = v42;
        HIBYTE(v42) = 0;
        LOBYTE(v41) = 0;
        *(unsigned char *)(v12 + 168) = v43;
        if (v27 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        _OWORD *v26 = v41;
        *(void *)(v12 + 160) = v42;
        HIBYTE(v42) = 0;
        LOBYTE(v41) = 0;
        *(unsigned char *)(v12 + 168) = v43;
      }
      if (v36 == 1)
      {
        long long v28 = v33;
        if (!v33) {
          return;
        }
        long long v34 = v33;
        goto LABEL_22;
      }
      if (!v36 && v35 < 0)
      {
        long long v28 = v33;
LABEL_22:
        operator delete(v28);
      }
    }
  }
}

void sub_8D7374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double sub_8D7398()
{
  byte_25D03E7 = 1;
  word_25D03D0 = 65;
  byte_25D03FF = 1;
  word_25D03E8 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25D0430 = 0u;
  *(_OWORD *)&qword_25D0440 = 0u;
  dword_25D0450 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25D0430, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25D0430, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25D0430, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25D0430, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  qword_25D0408 = 0;
  qword_25D0410 = 0;
  qword_25D0400 = 0;
  v0 = operator new(9uLL);
  *(void *)v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25D0400 = (uint64_t)v0;
  qword_25D0408 = (uint64_t)(v0 + 9);
  qword_25D0410 = (uint64_t)(v0 + 9);
  qword_25D0418 = 0;
  qword_25D0420 = 0;
  unk_25D0428 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25D0420 = (uint64_t)(v1 + 9);
  unk_25D0428 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25D0418 = (uint64_t)v1;
  return result;
}

void sub_8D75D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25D0440) {
    sub_20AB47C((void **)qword_25D0440);
  }
  uint64_t v37 = (void *)xmmword_25D0430;
  *(void *)&xmmword_25D0430 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_8D7674(uint64_t a1, const std::string *a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v5 = a1 + 24;
  *(_OWORD *)a1 = 0u;
  std::string::operator=((std::string *)a1, a2);
  uint64_t v6 = *(void **)(a1 + 32);
  if ((unint64_t)v6 >= *(void *)(a1 + 40))
  {
    *(void *)(a1 + 32) = sub_8D88AC(v5, (long long *)a3);
    return a1;
  }
  else
  {
    uint64_t v7 = *(void *)(a3 + 8);
    *uint64_t v6 = *(void *)a3;
    v6[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(a1 + 32) = v6 + 2;
    return a1;
  }
}

void sub_8D7708(_Unwind_Exception *a1)
{
  if (*v2) {
    sub_20AB4C0(v1, *v2, (void **)(v1 + 24));
  }
  sub_20A682C(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_8D7730(uint64_t a1, uint64_t a2)
{
  char v4 = *(void ***)(a1 + 24);
  uint64_t v5 = *(void ***)(a1 + 32);
  while (v4 != v5)
  {
    uint64_t v6 = sub_8D8DB0(*v4, a1);
    if (v6)
    {
      uint64_t v7 = sub_31B0D0((void *)v6[5], a2);
      if (v7) {
        return v7 + 5;
      }
    }
    v4 += 2;
  }
  int v9 = *(char *)(a2 + 23);
  if (v9 >= 0) {
    char v10 = (unsigned __int8 *)a2;
  }
  else {
    char v10 = *(unsigned __int8 **)a2;
  }
  if (v9 >= 0) {
    unint64_t v11 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v11 = *(void *)(a2 + 8);
  }
  uint64_t v12 = &qword_25D0460;
  if (byte_25D0477 >= 0)
  {
    unint64_t v13 = byte_25D0477;
  }
  else
  {
    uint64_t v12 = (uint64_t *)qword_25D0460;
    unint64_t v13 = unk_25D0468;
  }
  if (v11 >= v13) {
    unint64_t v11 = v13;
  }
  int v14 = &v10[v11];
  if (v13) {
    BOOL v15 = v11 == 0;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15)
  {
    char v46 = &v10[v11];
  }
  else
  {
    uint64_t v45 = v10;
    char v46 = &v10[v11];
    do
    {
      if (*v45 == *(unsigned __int8 *)v12)
      {
        uint64_t v47 = 1;
        while (v13 != v47)
        {
          if (&v45[v47] == v14) {
            goto LABEL_24;
          }
          int v48 = v45[v47];
          int v49 = *((unsigned __int8 *)v12 + v47++);
          if (v48 != v49) {
            goto LABEL_87;
          }
        }
        char v46 = v45;
      }
LABEL_87:
      ++v45;
    }
    while (v45 != v14);
  }
LABEL_24:
  BOOL v16 = sub_723EC(3u);
  BOOL v17 = v46 != v14 || v13 == 0;
  if (v17 && v46 == v10)
  {
    if (v16)
    {
      sub_6BAC((uint64_t)&__dst);
      uint64_t v18 = sub_188FC78(&__dst, (uint64_t)"Missing localization for development key: '", 43);
      int v19 = *(char *)(a2 + 23);
      if (v19 >= 0) {
        uint64_t v20 = a2;
      }
      else {
        uint64_t v20 = *(void *)a2;
      }
      if (v19 >= 0) {
        uint64_t v21 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v21 = *(void *)(a2 + 8);
      }
      long long v22 = sub_188FC78(v18, v20, v21);
      uint64_t v23 = sub_188FC78(v22, (uint64_t)"' in language :'", 16);
      int v24 = *(char *)(a1 + 23);
      if (v24 >= 0) {
        uint64_t v25 = a1;
      }
      else {
        uint64_t v25 = *(void *)a1;
      }
      if (v24 >= 0) {
        uint64_t v26 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        uint64_t v26 = *(void *)(a1 + 8);
      }
      int v27 = sub_188FC78(v23, v25, v26);
      sub_188FC78(v27, (uint64_t)"'", 1);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 3u);
      if (SBYTE7(v101) < 0) {
        operator delete(__p[0]);
      }
      if (v114 < 0) {
        operator delete(v113);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    long long v28 = operator new(0x28uLL);
    uint64_t v107 = 0;
    int v108 = v28;
    long long v109 = xmmword_20B9390;
    strcpy((char *)v28, "Instructions.UntranslatedDevKeys");
    uint64_t v105 = 0;
    int v106 = 0;
    uint64_t v104 = 0;
    long long v102 = 0u;
    long long v103 = 0u;
    long long v101 = 0u;
    *(_OWORD *)long long __p = 0u;
    char v99 = 0;
    LOBYTE(v98[0]) = 0;
    uint64_t v92 = 0;
    long long v93 = 0;
    uint64_t v90 = 0;
    BOOL v91 = 0;
    sub_29DC44((uint64_t)&__dst, (long long **)&v105, (long long *)__p, (long long *)v98, &v92, 0, (uint64_t)&v90, 1);
    nullsub_1(1);
    sub_29E11C((uint64_t)&__dst);
    long long v29 = v91;
    if (v91 && !atomic_fetch_add(&v91->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
      long long v30 = v93;
      if (!v93) {
        goto LABEL_52;
      }
    }
    else
    {
      long long v30 = v93;
      if (!v93) {
        goto LABEL_52;
      }
    }
    if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
      if ((v99 & 0x80000000) == 0)
      {
LABEL_53:
        if ((SHIBYTE(v104) & 0x80000000) == 0) {
          goto LABEL_54;
        }
        goto LABEL_114;
      }
LABEL_113:
      operator delete(v98[0]);
      if ((SHIBYTE(v104) & 0x80000000) == 0)
      {
LABEL_54:
        if ((SHIBYTE(v102) & 0x80000000) == 0) {
          goto LABEL_55;
        }
        goto LABEL_115;
      }
LABEL_114:
      operator delete((void *)v103);
      if ((SHIBYTE(v102) & 0x80000000) == 0)
      {
LABEL_55:
        if ((SBYTE7(v101) & 0x80000000) == 0) {
          goto LABEL_56;
        }
        goto LABEL_116;
      }
LABEL_115:
      operator delete(*((void **)&v101 + 1));
      if ((SBYTE7(v101) & 0x80000000) == 0)
      {
LABEL_56:
        uint64_t v31 = (void **)v105;
        if (!v105) {
          goto LABEL_126;
        }
LABEL_117:
        char v52 = v106;
        uint64_t v51 = v31;
        if (v106 == v31) {
          goto LABEL_125;
        }
        while (1)
        {
          if (*((char *)v52 - 1) < 0)
          {
            operator delete(*(v52 - 3));
            if ((*((char *)v52 - 25) & 0x80000000) == 0) {
              goto LABEL_120;
            }
LABEL_123:
            operator delete(*(v52 - 6));
            v52 -= 6;
            if (v52 == v31) {
              goto LABEL_124;
            }
          }
          else
          {
            if (*((char *)v52 - 25) < 0) {
              goto LABEL_123;
            }
LABEL_120:
            v52 -= 6;
            if (v52 == v31) {
              goto LABEL_124;
            }
          }
        }
      }
LABEL_116:
      operator delete(__p[0]);
      uint64_t v31 = (void **)v105;
      if (!v105) {
        goto LABEL_126;
      }
      goto LABEL_117;
    }
LABEL_52:
    if ((v99 & 0x80000000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_113;
  }
  if (v16)
  {
    sub_6BAC((uint64_t)&__dst);
    uint64_t v32 = sub_188FC78(&__dst, (uint64_t)"Missing localization for production key: '", 42);
    int v33 = *(char *)(a2 + 23);
    if (v33 >= 0) {
      uint64_t v34 = a2;
    }
    else {
      uint64_t v34 = *(void *)a2;
    }
    if (v33 >= 0) {
      uint64_t v35 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v35 = *(void *)(a2 + 8);
    }
    unsigned int v36 = sub_188FC78(v32, v34, v35);
    uint64_t v37 = sub_188FC78(v36, (uint64_t)"' in language :'", 16);
    int v38 = *(char *)(a1 + 23);
    if (v38 >= 0) {
      uint64_t v39 = a1;
    }
    else {
      uint64_t v39 = *(void *)a1;
    }
    if (v38 >= 0) {
      uint64_t v40 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v40 = *(void *)(a1 + 8);
    }
    long long v41 = sub_188FC78(v37, v39, v40);
    sub_188FC78(v41, (uint64_t)"'", 1);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 3u);
    if (SBYTE7(v101) < 0) {
      operator delete(__p[0]);
    }
    if (v114 < 0) {
      operator delete(v113);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  uint64_t v42 = operator new(0x28uLL);
  uint64_t v107 = 0;
  int v108 = v42;
  long long v109 = xmmword_20B9260;
  strcpy((char *)v42, "Instructions.UntranslatedProdKeys");
  uint64_t v105 = 0;
  int v106 = 0;
  uint64_t v104 = 0;
  long long v102 = 0u;
  long long v103 = 0u;
  long long v101 = 0u;
  *(_OWORD *)long long __p = 0u;
  char v99 = 0;
  LOBYTE(v98[0]) = 0;
  uint64_t v96 = 0;
  __int16 v97 = 0;
  uint64_t v94 = 0;
  uint64_t v95 = 0;
  sub_29DC44((uint64_t)&__dst, (long long **)&v105, (long long *)__p, (long long *)v98, &v96, 0, (uint64_t)&v94, 1);
  nullsub_1(1);
  sub_29E11C((uint64_t)&__dst);
  char v43 = v95;
  if (v95 && !atomic_fetch_add(&v95->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
    uint64_t v44 = v97;
    if (!v97)
    {
LABEL_80:
      if ((v99 & 0x80000000) == 0) {
        goto LABEL_81;
      }
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v44 = v97;
    if (!v97) {
      goto LABEL_80;
    }
  }
  if (atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_80;
  }
  ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
  std::__shared_weak_count::__release_weak(v44);
  if ((v99 & 0x80000000) == 0)
  {
LABEL_81:
    if ((SHIBYTE(v104) & 0x80000000) == 0) {
      goto LABEL_82;
    }
    goto LABEL_99;
  }
LABEL_98:
  operator delete(v98[0]);
  if ((SHIBYTE(v104) & 0x80000000) == 0)
  {
LABEL_82:
    if ((SHIBYTE(v102) & 0x80000000) == 0) {
      goto LABEL_83;
    }
    goto LABEL_100;
  }
LABEL_99:
  operator delete((void *)v103);
  if ((SHIBYTE(v102) & 0x80000000) == 0)
  {
LABEL_83:
    if ((SBYTE7(v101) & 0x80000000) == 0) {
      goto LABEL_84;
    }
LABEL_101:
    operator delete(__p[0]);
    uint64_t v31 = (void **)v105;
    if (!v105) {
      goto LABEL_126;
    }
LABEL_102:
    char v50 = v106;
    uint64_t v51 = v31;
    if (v106 == v31)
    {
LABEL_125:
      int v106 = v31;
      operator delete(v51);
      goto LABEL_126;
    }
    while (1)
    {
      if (*((char *)v50 - 1) < 0)
      {
        operator delete(*(v50 - 3));
        if ((*((char *)v50 - 25) & 0x80000000) == 0) {
          goto LABEL_105;
        }
LABEL_108:
        operator delete(*(v50 - 6));
        v50 -= 6;
        if (v50 == v31)
        {
LABEL_124:
          uint64_t v51 = v105;
          goto LABEL_125;
        }
      }
      else
      {
        if (*((char *)v50 - 25) < 0) {
          goto LABEL_108;
        }
LABEL_105:
        v50 -= 6;
        if (v50 == v31) {
          goto LABEL_124;
        }
      }
    }
  }
LABEL_100:
  operator delete(*((void **)&v101 + 1));
  if (SBYTE7(v101) < 0) {
    goto LABEL_101;
  }
LABEL_84:
  uint64_t v31 = (void **)v105;
  if (v105) {
    goto LABEL_102;
  }
LABEL_126:
  if (SHIBYTE(v109) < 0) {
    operator delete(v108);
  }
  int v53 = byte_25D048F;
  if (byte_25D048F >= 0) {
    size_t v54 = byte_25D048F;
  }
  else {
    size_t v54 = qword_25D0480;
  }
  int v55 = *(char *)(a2 + 23);
  if (v55 >= 0) {
    size_t v56 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v56 = *(void *)(a2 + 8);
  }
  unint64_t v57 = v56 + v54;
  if (v56 + v54 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v57 > 0x16)
  {
    uint64_t v83 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v57 | 7) != 0x17) {
      uint64_t v83 = v57 | 7;
    }
    uint64_t v84 = v83 + 1;
    p_dst = (void **)operator new(v83 + 1);
    int64_t v111 = (void (__cdecl **)(std::stringbuf *__hidden))(v56 + v54);
    unint64_t v112 = v84 | 0x8000000000000000;
    std::string __dst = p_dst;
    if (!v54) {
      goto LABEL_141;
    }
    goto LABEL_137;
  }
  int64_t v111 = 0;
  unint64_t v112 = 0;
  std::string __dst = 0;
  p_dst = (void **)&__dst;
  HIBYTE(v112) = v56 + v54;
  if (v54)
  {
LABEL_137:
    if (v53 >= 0) {
      char v59 = &qword_25D0478;
    }
    else {
      char v59 = (uint64_t *)qword_25D0478;
    }
    memmove(p_dst, v59, v54);
  }
LABEL_141:
  std::string::size_type v60 = (char *)p_dst + v54;
  if (v56)
  {
    if (v55 >= 0) {
      BOOL v61 = (unsigned __int8 *)a2;
    }
    else {
      BOOL v61 = *(unsigned __int8 **)a2;
    }
    memmove(v60, v61, v56);
  }
  v60[v56] = 0;
  unsigned int v62 = *(void ***)(a1 + 24);
  unsigned int v63 = *(void ***)(a1 + 32);
  while (v62 != v63)
  {
    int v64 = sub_8D8DB0(*v62, a1);
    if (v64)
    {
      unsigned int v65 = sub_31B0D0((void *)v64[5], (uint64_t)&__dst);
      if (v65)
      {
        int v66 = 0;
        int v8 = v65 + 5;
        if (SHIBYTE(v112) < 0) {
          goto LABEL_152;
        }
LABEL_155:
        if (!v66) {
          return v8;
        }
        goto LABEL_156;
      }
    }
    v62 += 2;
  }
  int v8 = 0;
  int v66 = 1;
  if ((SHIBYTE(v112) & 0x80000000) == 0) {
    goto LABEL_155;
  }
LABEL_152:
  operator delete(__dst);
  if (!v66) {
    return v8;
  }
LABEL_156:
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_25D0458, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_25D0458))
  {
    sub_5E5C(qword_25D0490, "");
    __cxa_guard_release(&qword_25D0458);
  }
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)&__dst);
    unsigned int v67 = sub_188FC78(&__dst, (uint64_t)"Missing fallback localization for key: '", 40);
    int v68 = *(char *)(a2 + 23);
    if (v68 >= 0) {
      uint64_t v69 = a2;
    }
    else {
      uint64_t v69 = *(void *)a2;
    }
    if (v68 >= 0) {
      uint64_t v70 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v70 = *(void *)(a2 + 8);
    }
    long long v71 = sub_188FC78(v67, v69, v70);
    unsigned int v72 = sub_188FC78(v71, (uint64_t)"' in language 'en'. Request: ", 29);
    unsigned int v73 = sub_69510();
    uint64_t v74 = sub_68EE4((uint64_t)v73);
    int v75 = *(char *)(v74 + 23);
    if (v75 >= 0) {
      uint64_t v76 = v74;
    }
    else {
      uint64_t v76 = *(void *)v74;
    }
    if (v75 >= 0) {
      uint64_t v77 = *(unsigned __int8 *)(v74 + 23);
    }
    else {
      uint64_t v77 = *(void *)(v74 + 8);
    }
    sub_188FC78(v72, v76, v77);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 3u);
    if (SBYTE7(v101) < 0) {
      operator delete(__p[0]);
    }
    if (v114 < 0) {
      operator delete(v113);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  int v78 = operator new(0x28uLL);
  uint64_t v107 = 0;
  int v108 = v78;
  long long v109 = xmmword_20B93A0;
  strcpy((char *)v78, "Instructions.MissingInstructionKeys");
  uint64_t v105 = 0;
  int v106 = 0;
  uint64_t v104 = 0;
  long long v102 = 0u;
  long long v103 = 0u;
  long long v101 = 0u;
  *(_OWORD *)long long __p = 0u;
  char v99 = 0;
  LOBYTE(v98[0]) = 0;
  uint64_t v88 = 0;
  int v89 = 0;
  uint64_t v86 = 0;
  uint64_t v87 = 0;
  sub_29DC44((uint64_t)&__dst, (long long **)&v105, (long long *)__p, (long long *)v98, &v88, 0, (uint64_t)&v86, 1);
  nullsub_1(1);
  sub_29E11C((uint64_t)&__dst);
  uint64_t v79 = v87;
  if (v87 && !atomic_fetch_add(&v87->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
    std::__shared_weak_count::__release_weak(v79);
    unint64_t v80 = v89;
    if (!v89)
    {
LABEL_179:
      if ((v99 & 0x80000000) == 0) {
        goto LABEL_180;
      }
      goto LABEL_201;
    }
  }
  else
  {
    unint64_t v80 = v89;
    if (!v89) {
      goto LABEL_179;
    }
  }
  if (atomic_fetch_add(&v80->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_179;
  }
  ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
  std::__shared_weak_count::__release_weak(v80);
  if ((v99 & 0x80000000) == 0)
  {
LABEL_180:
    if ((SHIBYTE(v104) & 0x80000000) == 0) {
      goto LABEL_181;
    }
    goto LABEL_202;
  }
LABEL_201:
  operator delete(v98[0]);
  if ((SHIBYTE(v104) & 0x80000000) == 0)
  {
LABEL_181:
    if ((SHIBYTE(v102) & 0x80000000) == 0) {
      goto LABEL_182;
    }
    goto LABEL_203;
  }
LABEL_202:
  operator delete((void *)v103);
  if ((SHIBYTE(v102) & 0x80000000) == 0)
  {
LABEL_182:
    if ((SBYTE7(v101) & 0x80000000) == 0) {
      goto LABEL_183;
    }
    goto LABEL_204;
  }
LABEL_203:
  operator delete(*((void **)&v101 + 1));
  if ((SBYTE7(v101) & 0x80000000) == 0)
  {
LABEL_183:
    int v81 = (void **)v105;
    if (v105) {
      goto LABEL_184;
    }
LABEL_205:
    if (SHIBYTE(v109) < 0) {
      goto LABEL_186;
    }
    return qword_25D0490;
  }
LABEL_204:
  operator delete(__p[0]);
  int v81 = (void **)v105;
  if (!v105) {
    goto LABEL_205;
  }
LABEL_184:
  uint64_t v82 = v106;
  if (v106 == v81)
  {
    int v106 = v81;
    operator delete(v81);
    if (SHIBYTE(v109) < 0) {
      goto LABEL_186;
    }
    return qword_25D0490;
  }
  do
  {
    while (*((char *)v82 - 1) < 0)
    {
      operator delete(*(v82 - 3));
      if (*((char *)v82 - 25) < 0) {
        goto LABEL_191;
      }
LABEL_188:
      v82 -= 6;
      if (v82 == v81) {
        goto LABEL_192;
      }
    }
    if ((*((char *)v82 - 25) & 0x80000000) == 0) {
      goto LABEL_188;
    }
LABEL_191:
    operator delete(*(v82 - 6));
    v82 -= 6;
  }
  while (v82 != v81);
LABEL_192:
  int v106 = v81;
  operator delete(v105);
  if (SHIBYTE(v109) < 0) {
LABEL_186:
  }
    operator delete(v108);
  return qword_25D0490;
}

void sub_8D84FC(_Unwind_Exception *a1)
{
}

void sub_8D8514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49)
{
  if (a33 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a49);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_8D8678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a45 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_8D8694(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = *(void ***)(a1 + 24);
  uint64_t v7 = *(void ***)(a1 + 32);
  while (v6 != v7)
  {
    int v8 = sub_8D8DB0(*v6, a1);
    if (v8 && sub_31B0D0((void *)v8[5], a2)) {
      return 1;
    }
    v6 += 2;
  }
  if (!a3) {
    return 0;
  }
  int v10 = byte_25D048F;
  if (byte_25D048F >= 0) {
    size_t v11 = byte_25D048F;
  }
  else {
    size_t v11 = qword_25D0480;
  }
  int v12 = *(char *)(a2 + 23);
  if (v12 >= 0) {
    size_t v13 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v13 = *(void *)(a2 + 8);
  }
  unint64_t v14 = v13 + v11;
  if (v13 + v11 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v14 <= 0x16)
  {
    size_t v26 = 0;
    unint64_t v27 = 0;
    std::string __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v27) = v13 + v11;
    if (!v11) {
      goto LABEL_26;
    }
    goto LABEL_22;
  }
  uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v14 | 7) != 0x17) {
    uint64_t v16 = v14 | 7;
  }
  uint64_t v17 = v16 + 1;
  p_dst = (void **)operator new(v16 + 1);
  size_t v26 = v13 + v11;
  unint64_t v27 = v17 | 0x8000000000000000;
  std::string __dst = p_dst;
  if (v11)
  {
LABEL_22:
    if (v10 >= 0) {
      uint64_t v18 = &qword_25D0478;
    }
    else {
      uint64_t v18 = (uint64_t *)qword_25D0478;
    }
    memmove(p_dst, v18, v11);
  }
LABEL_26:
  int v19 = (char *)p_dst + v11;
  if (v13)
  {
    if (v12 >= 0) {
      uint64_t v20 = (const void *)a2;
    }
    else {
      uint64_t v20 = *(const void **)a2;
    }
    memmove(v19, v20, v13);
  }
  v19[v13] = 0;
  uint64_t v21 = *(void ***)(a1 + 24);
  long long v22 = *(void ***)(a1 + 32);
  while (v21 != v22)
  {
    uint64_t v23 = sub_8D8DB0(*v21, a1);
    if (v23 && sub_31B0D0((void *)v23[5], (uint64_t)&__dst))
    {
      uint64_t v9 = 1;
      if ((SHIBYTE(v27) & 0x80000000) == 0) {
        return v9;
      }
      goto LABEL_39;
    }
    v21 += 2;
  }
  uint64_t v9 = 0;
  if ((SHIBYTE(v27) & 0x80000000) == 0) {
    return v9;
  }
LABEL_39:
  operator delete(__dst);
  return v9;
}

void sub_8D8868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void **sub_8D8884(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  double result = (void **)(a1 + 24);
  if ((unint64_t)(v4 - v5) <= 0x1F) {
    return (void **)sub_8D8A18(result, v4, *(uint64_t **)(a2 + 24), *(uint64_t **)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 4);
  }
  return result;
}

_OWORD *sub_8D88AC(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = ((uint64_t)v4 - *(void *)a1) >> 4;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60) {
    sub_2E00();
  }
  uint64_t v7 = *(void *)(a1 + 16) - (void)v3;
  if (v7 >> 3 > v6) {
    unint64_t v6 = v7 >> 3;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v6 = 0xFFFFFFFFFFFFFFFLL;
  }
  if (v6 >> 60) {
    sub_188D718();
  }
  uint64_t v9 = 16 * v6;
  int v10 = (char *)operator new(16 * v6);
  size_t v11 = &v10[16 * v5];
  long long v12 = *a2;
  *(_OWORD *)size_t v11 = *a2;
  if (*((void *)&v12 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v12 + 1) + 8), 1uLL, memory_order_relaxed);
    uint64_t v3 = *(void **)a1;
    uint64_t v4 = *(void **)(a1 + 8);
  }
  size_t v13 = &v10[v9];
  unint64_t v14 = v11 + 16;
  if (v4 == v3)
  {
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v14;
    *(void *)(a1 + 16) = v13;
    if (!v3) {
      return v14;
    }
    goto LABEL_19;
  }
  do
  {
    long long v15 = *((_OWORD *)v4 - 1);
    v4 -= 2;
    *((_OWORD *)v11 - 1) = v15;
    v11 -= 16;
    void *v4 = 0;
    v4[1] = 0;
  }
  while (v4 != v3);
  uint64_t v16 = *(void **)a1;
  uint64_t v3 = *(void **)(a1 + 8);
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v14;
  *(void *)(a1 + 16) = v13;
  if (v3 != v16)
  {
    do
    {
      uint64_t v17 = (std::__shared_weak_count *)*(v3 - 1);
      if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      v3 -= 2;
    }
    while (v3 != v16);
    uint64_t v3 = v16;
  }
  if (v3) {
LABEL_19:
  }
    operator delete(v3);
  return v14;
}

unint64_t sub_8D8A18(void **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a2 - (void)*a1;
  unint64_t v7 = (unint64_t)*a1 + (v6 & 0xFFFFFFFFFFFFFFF0);
  if (a5 < 1) {
    return v7;
  }
  uint64_t v9 = a3;
  uint64_t v11 = v6 >> 4;
  long long v12 = a1[1];
  size_t v13 = a1[2];
  if (a5 <= (v13 - v12) >> 4)
  {
    uint64_t v18 = (uint64_t)&v12[-v7] >> 4;
    if (v18 >= a5)
    {
      int v19 = &a3[2 * a5];
      uint64_t v20 = (uint64_t *)a1[1];
    }
    else
    {
      int v19 = &a3[2 * v18];
      if (v19 == a4)
      {
        uint64_t v20 = (uint64_t *)a1[1];
      }
      else
      {
        uint64_t v20 = (uint64_t *)a1[1];
        uint64_t v21 = v19;
        long long v22 = v20;
        do
        {
          uint64_t v23 = v21[1];
          *long long v22 = *v21;
          v22[1] = v23;
          if (v23) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
          }
          v20 += 2;
          v21 += 2;
          v22 += 2;
        }
        while (v21 != a4);
      }
      a1[1] = v20;
      if ((uint64_t)&v12[-v7] < 1) {
        return v7;
      }
    }
    unint64_t v35 = v7 + 16 * a5;
    unsigned int v36 = &v20[-2 * a5];
    uint64_t v37 = v20;
    if (v36 < (void *)v12)
    {
      uint64_t v37 = v20;
      do
      {
        *v37++ = *(_OWORD *)v36;
        uint64_t *v36 = 0;
        v36[1] = 0;
        v36 += 2;
      }
      while (v36 < (void *)v12);
    }
    a1[1] = v37;
    if (v20 != (uint64_t *)v35)
    {
      int v38 = (std::__shared_weak_count **)(v20 - 1);
      uint64_t v39 = (uint64_t)&v5[2 * v11 - 2];
      uint64_t v40 = 16 * ((uint64_t)((uint64_t)v20 - v35) >> 4);
      do
      {
        long long v41 = (void *)(v39 + v40);
        long long v42 = *(_OWORD *)(v39 + v40);
        void *v41 = 0;
        v41[1] = 0;
        char v43 = *v38;
        *(_OWORD *)(v38 - 1) = v42;
        if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
        v38 -= 2;
        v40 -= 16;
      }
      while (v40);
    }
    if (v19 != v9)
    {
      uint64_t v44 = (void *)v7;
      do
      {
        uint64_t v46 = *v9;
        uint64_t v45 = v9[1];
        if (v45) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v45 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v47 = (std::__shared_weak_count *)v44[1];
        void *v44 = v46;
        v44[1] = v45;
        if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
        v9 += 2;
        v44 += 2;
      }
      while (v9 != v19);
    }
    return v7;
  }
  unint64_t v14 = a5 + ((v12 - (unsigned char *)v5) >> 4);
  if (v14 >> 60) {
    sub_2E00();
  }
  uint64_t v15 = v13 - (unsigned char *)v5;
  if (v15 >> 3 > v14) {
    unint64_t v14 = v15 >> 3;
  }
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v16 = v14;
  }
  if (v16)
  {
    if (v16 >> 60) {
      sub_188D718();
    }
    uint64_t v17 = (char *)operator new(16 * v16);
  }
  else
  {
    uint64_t v17 = 0;
  }
  int v24 = &v17[16 * v11];
  uint64_t v25 = &v24[16 * a5];
  size_t v26 = v24;
  do
  {
    uint64_t v27 = v9[1];
    *(void *)size_t v26 = *v9;
    *((void *)v26 + 1) = v27;
    if (v27) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
    }
    v26 += 16;
    v9 += 2;
  }
  while (v26 != v25);
  long long v28 = *a1;
  long long v29 = &v17[16 * v11];
  if (*a1 != (void *)v7)
  {
    long long v29 = &v17[16 * v11];
    long long v30 = (void *)v7;
    do
    {
      long long v31 = *((_OWORD *)v30 - 1);
      v30 -= 2;
      *((_OWORD *)v29 - 1) = v31;
      v29 -= 16;
      *long long v30 = 0;
      v30[1] = 0;
    }
    while (v30 != v28);
  }
  uint64_t v32 = a1[1];
  if (v32 != (void *)v7)
  {
    do
    {
      *(_OWORD *)uint64_t v25 = *(_OWORD *)v7;
      v25 += 16;
      *(void *)unint64_t v7 = 0;
      *(void *)(v7 + 8) = 0;
      v7 += 16;
    }
    while ((void *)v7 != v32);
    unint64_t v7 = (unint64_t)a1[1];
  }
  int v33 = *a1;
  *a1 = v29;
  a1[1] = v25;
  for (a1[2] = &v17[16 * v16]; (void *)v7 != v33; v7 -= 16)
  {
    uint64_t v34 = *(std::__shared_weak_count **)(v7 - 8);
    if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (v33) {
    operator delete(v33);
  }
  return (unint64_t)v24;
}

uint64_t *sub_8D8DB0(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_B128((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  long long v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    size_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v21 == v8)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          double result = 0;
          size_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v17 == v8)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        double result = 0;
        size_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

void sub_8D8FE0()
{
  byte_25D0477 = 4;
  strcpy((char *)&qword_25D0460, "DEV:");
  byte_25D048F = 4;
  strcpy((char *)&qword_25D0478, "UNT:");
}

uint64_t sub_8D9018(uint64_t a1, void *a2)
{
  *(void *)a1 = sub_374D14(a2);
  *(void *)(a1 + 8) = sub_3750CC(a2);
  __p[0] = 0;
  __p[1] = 0;
  unint64_t v17 = 0;
  sub_6622D8(a1 + 16, a2, 1, 0, (uint64_t)__p);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(v15[2]) = 21;
  strcpy((char *)v15, "TrafficColorUtilities");
  long long v12 = 0;
  size_t v13 = 0;
  uint64_t v14 = 0;
  unint64_t v4 = sub_374CDC((uint64_t)a2, (uint64_t)v15, (uint64_t *)&v12);
  sub_3CB370(v4, 0, 0, __p);
  sub_8D9E54((BOOL *)(a1 + 2912), __p);
  unint64_t v5 = v17;
  if (v17)
  {
    do
    {
      unint64_t v10 = *(char **)v5;
      sub_57AC8((uint64_t *)v5 + 5);
      if (v5[39] < 0) {
        operator delete(*((void **)v5 + 2));
      }
      operator delete(v5);
      unint64_t v5 = v10;
    }
    while (v10);
  }
  unint64_t v6 = __p[0];
  __p[0] = 0;
  if (v6) {
    operator delete(v6);
  }
  int8x8_t v7 = (void **)v12;
  if (v12)
  {
    unint64_t v8 = v13;
    uint8x8_t v9 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      uint8x8_t v9 = v12;
    }
    size_t v13 = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v15[2]) < 0) {
    operator delete(v15[0]);
  }
  return a1;
}

void sub_8D91AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_5450C((uint64_t)&a19);
  sub_1A668(&a10);
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_68D148(v24);
  _Unwind_Resume(a1);
}

void sub_8D9208(uint64_t a1, uint64_t a2)
{
  if (!sub_46C760((void *)a2)) {
    return;
  }
  if (!*(unsigned char *)(a1 + 2913)) {
    return;
  }
  int v61 = 4 * *(unsigned __int8 *)(a1 + 2912);
  v62[0] = v61;
  uint64_t v60 = 0;
  LODWORD(__p) = 0;
  sub_8D9868((char **)(a2 + 7328), &v60, (int *)&__p, &v61);
  unint64_t v47 = sub_46C760((void *)a2);
  if (!v47) {
    return;
  }
  uint64_t v4 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v48 = 1;
  uint64_t v46 = a1;
  do
  {
    v53.__r_.__value_.__r.__words[0] = v4;
    unint64_t v5 = (void *)sub_46C8EC((void *)a2, v4);
    unint64_t v6 = (unsigned __int16 *)(*v5 - *(int *)*v5);
    if (*v6 >= 9u && (uint64_t v7 = v6[4]) != 0) {
      uint64_t v8 = *(unsigned int *)(*v5 + v7);
    }
    else {
      uint64_t v8 = 0;
    }
    double v9 = (double)sub_46CACC(a2, v53.__r_.__value_.__r.__words[0]) / 1000000000.0 * (double)v8;
    if (v9 >= 0.0)
    {
      if (v9 < 4.50359963e15)
      {
        uint64_t v10 = (uint64_t)(v9 + v9) + 1;
LABEL_17:
        double v9 = (double)(v10 >> 1);
      }
    }
    else if (v9 > -4.50359963e15)
    {
      uint64_t v10 = (uint64_t)(v9 + v9);
      if (v10 >= 1) {
        --v10;
      }
      goto LABEL_17;
    }
    uint64_t v11 = (void *)sub_46C8EC((void *)a2, (uint64_t)v53.__r_.__value_.__l.__data_);
    long long v12 = (unsigned __int16 *)(*v11 - *(int *)*v11);
    if (*v12 >= 9u && (uint64_t v13 = v12[4]) != 0) {
      uint64_t v14 = *(unsigned int *)(*v11 + v13);
    }
    else {
      uint64_t v14 = 0;
    }
    double v15 = (double)sub_46CB48(a2, v53.__r_.__value_.__r.__words[0]) / 1000000000.0 * (double)v14;
    if (v15 >= 0.0)
    {
      double v16 = 4.50359963e15;
      if (v15 < 4.50359963e15)
      {
        double v16 = v15 + v15;
        uint64_t v17 = (uint64_t)(v15 + v15) + 1;
LABEL_29:
        double v15 = (double)(v17 >> 1);
      }
    }
    else
    {
      double v16 = -4.50359963e15;
      if (v15 > -4.50359963e15)
      {
        double v16 = v15 + v15;
        uint64_t v17 = (uint64_t)(v15 + v15);
        if (v17 >= 1) {
          --v17;
        }
        goto LABEL_29;
      }
    }
    uint64_t v18 = sub_46CCC8((void *)a2, v53.__r_.__value_.__r.__words[0], v16);
    uint64_t v19 = v60;
    uint64_t v20 = (int **)sub_46C8EC((void *)a2, (uint64_t)v53.__r_.__value_.__l.__data_);
    uint64_t v21 = (unsigned __int16 *)((char *)*v20 - **v20);
    if (*v21 >= 0x1Du && (uint64_t v22 = v21[14]) != 0) {
      uint64_t v23 = *(void *)((char *)*v20 + v22);
    }
    else {
      uint64_t v23 = 0;
    }
    if (*((unsigned char *)v20 + 38)) {
      uint64_t v24 = -v23;
    }
    else {
      uint64_t v24 = v23;
    }
    sub_29A494(*(void *)a1, v24, &__p);
    sub_8D99C8((uint64_t *)a1, (void *)a2, (uint64_t)v53.__r_.__value_.__l.__data_, (uint64_t)v51);
    if (BYTE4(v51[0]) && (__p != v58 || LODWORD(v51[0])))
    {
      uint64_t v58 = (char *)__p;
      sub_8D9BCC((char **)&__p);
      if (!BYTE4(v51[0]))
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_2439078;
      }
      *((_DWORD *)v58 - 5) = v51[0];
    }
    char v25 = sub_46CFFC(a2, v53.__r_.__value_.__r.__words[0]);
    uint64_t v26 = v19 + v18;
    uint64_t v27 = (char *)__p;
    if ((v25 & 1) == 0)
    {
      long long v28 = v58;
      if (__p != v58)
      {
        uint64_t v29 = (uint64_t)v9;
        while (1)
        {
          long long v30 = (unsigned __int16 *)((char *)*v20 - **v20);
          if (*v30 >= 9u && (uint64_t v31 = v30[4]) != 0)
          {
            uint64_t v32 = *(unsigned int *)((char *)*v20 + v31);
            uint64_t v33 = *((void *)v27 + 3);
            if (v33 >= v32)
            {
              uint64_t v32 = 0;
              goto LABEL_53;
            }
          }
          else
          {
            uint64_t v32 = 0;
            uint64_t v33 = *((void *)v27 + 3);
            if ((v33 & 0x8000000000000000) == 0) {
              goto LABEL_53;
            }
          }
          v32 -= v33;
LABEL_53:
          uint64_t v34 = *((void *)v27 + 2);
          if (v34 <= v29) {
            uint64_t v34 = (uint64_t)v9;
          }
          if (v32 >= (uint64_t)v15) {
            uint64_t v32 = (uint64_t)v15;
          }
          if (v32 <= v34) {
            goto LABEL_46;
          }
          uint64_t v35 = v60 + v32;
          uint64_t v36 = v60 + v34 - v29;
          uint64_t v55 = v35 - v29;
          uint64_t v56 = v36;
          uint64_t v37 = *(void *)(*(void *)(a2 + 7336) - 24);
          if (v37 >= v35 - v29) {
            goto LABEL_46;
          }
          if (v36 <= v37) {
            uint64_t v36 = *(void *)(*(void *)(a2 + 7336) - 24);
          }
          uint64_t v56 = v36;
          int v54 = 0;
          int v38 = *((_DWORD *)v27 + 3);
          if (v38 == 1)
          {
            if (v50)
            {
              uint64_t v40 = (v48 << 48) | (v49 << 32) | v50;
            }
            else
            {
              uint64_t v40 = *(void *)(sub_46C8EC((void *)a2, (uint64_t)v53.__r_.__value_.__l.__data_) + 32);
              uint64_t v36 = v56;
            }
            uint64_t v49 = WORD2(v40);
            uint64_t v50 = v40;
            uint64_t v48 = BYTE6(v40);
            int v38 = 2;
            int v54 = 2;
            if (v37 != v36) {
              goto LABEL_73;
            }
          }
          else
          {
            if (!v38) {
              int v38 = 4 * *(unsigned __int8 *)(v46 + 2912);
            }
            int v54 = v38;
            if (v37 != v36)
            {
LABEL_73:
              sub_8D9CF4((char **)(a2 + 7328), &v56, (uint64_t *)&v53, &v54);
              goto LABEL_74;
            }
          }
          uint64_t v39 = *(void *)(a2 + 7336);
          if (v61 == v38 && 0xAAAAAAAAAAAAAAABLL * ((v39 - *(void *)(a2 + 7328)) >> 3) >= 2)
          {
            *(void *)(a2 + 7336) = v39 - 24;
            goto LABEL_75;
          }
          *(_DWORD *)(v39 - 8) = v38;
          *(void *)(v39 - 16) = v53.__r_.__value_.__r.__words[0];
LABEL_74:
          int v61 = v54;
LABEL_75:
          std::string::size_type v41 = v53.__r_.__value_.__r.__words[0];
          if (v41 == sub_46C760((void *)a2) - 1 && v55 >= v26)
          {
LABEL_77:
            uint64_t v27 = (char *)__p;
            a1 = v46;
            break;
          }
          sub_8D9CF4((char **)(a2 + 7328), &v55, (uint64_t *)&v53, v62);
LABEL_46:
          v27 += 32;
          if (v27 == v28) {
            goto LABEL_77;
          }
        }
      }
    }
    uint64_t v60 = v26;
    if (v27)
    {
      uint64_t v58 = v27;
      operator delete(v27);
    }
    ++v4;
  }
  while (v4 != v47);
  if (v50)
  {
    long long v42 = sub_69510();
    char v43 = *(int **)(a1 + 8);
    unint64_t v44 = sub_2E68E8((uint64_t)v43, (v48 << 48) | (v49 << 32) | v50);
    sub_3BDB4C(v43, v44, &__p);
    sub_2D5D58(*(void *)(a1 + 8), (v49 << 32) & 0xFFFFFFFFFFFFLL | v50 & 0xFFFFFFFFFFFFLL);
    sub_6879C((uint64_t)v42, &v53);
    sub_68E9C((uint64_t)v42);
    LODWORD(v56) = sub_69124((uint64_t)v42);
    sub_677F0((unsigned int *)&v56, (uint64_t)v51);
    if (v52 < 0)
    {
      operator delete(v51[0]);
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_86;
      }
LABEL_83:
      if (v59 < 0) {
LABEL_87:
      }
        operator delete(__p);
    }
    else
    {
      if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_83;
      }
LABEL_86:
      operator delete(v53.__r_.__value_.__l.__data_);
      if (v59 < 0) {
        goto LABEL_87;
      }
    }
  }
}

void sub_8D9808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

char *sub_8D9868(char **a1, void *a2, int *a3, _DWORD *a4)
{
  double v9 = a1[1];
  unint64_t v8 = (unint64_t)a1[2];
  if ((unint64_t)v9 >= v8)
  {
    uint64_t v11 = *a1;
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v9 - *a1) >> 3);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)v11) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x555555555555555) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 > 0xAAAAAAAAAAAAAAALL) {
        sub_188D718();
      }
      double v16 = (char *)operator new(24 * v15);
    }
    else
    {
      double v16 = 0;
    }
    uint64_t v17 = &v16[24 * v12];
    uint64_t v18 = *a3;
    *(void *)uint64_t v17 = *a2;
    *((void *)v17 + 1) = v18;
    *((_DWORD *)v17 + 4) = *a4;
    uint64_t v10 = v17 + 24;
    if (v9 != v11)
    {
      do
      {
        long long v19 = *(_OWORD *)(v9 - 24);
        *((void *)v17 - 1) = *((void *)v9 - 1);
        *(_OWORD *)(v17 - 24) = v19;
        v17 -= 24;
        v9 -= 24;
      }
      while (v9 != v11);
      double v9 = *a1;
    }
    *a1 = v17;
    a1[1] = v10;
    a1[2] = &v16[24 * v15];
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *(void *)double v9 = *a2;
    *((void *)v9 + 1) = *a3;
    *((_DWORD *)v9 + 4) = *a4;
    uint64_t v10 = v9 + 24;
  }
  a1[1] = v10;
  return v10 - 24;
}