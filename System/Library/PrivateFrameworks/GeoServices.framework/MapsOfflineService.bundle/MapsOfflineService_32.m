void sub_DDEF70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;

  sub_C7E3C8((uint64_t)&a32);
  sub_C7E3C8(v32);
  _Unwind_Resume(a1);
}

void sub_DDF110(_Unwind_Exception *a1)
{
  sub_C7E3C8(v1);
  _Unwind_Resume(a1);
}

void sub_DDF124(_Unwind_Exception *a1)
{
  sub_C7E3C8(v1);
  _Unwind_Resume(a1);
}

void sub_DDF138(_Unwind_Exception *a1)
{
  sub_C7E3C8(v1);
  _Unwind_Resume(a1);
}

void sub_DDF14C(_Unwind_Exception *a1)
{
  sub_C7E3C8(v1);
  _Unwind_Resume(a1);
}

void sub_DDF160(_Unwind_Exception *a1)
{
  sub_C7E3C8(v1);
  _Unwind_Resume(a1);
}

void sub_DDF174(_Unwind_Exception *a1)
{
  *(void *)(v2 + 24) = v1;
  sub_C7E3C8(v2);
  _Unwind_Resume(a1);
}

void sub_DDF18C(_Unwind_Exception *a1)
{
  sub_C7E3C8(v1);
  _Unwind_Resume(a1);
}

void sub_DDF1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (*(char *)(v29 - 89) < 0) {
    operator delete(*(void **)(v29 - 112));
  }
  sub_111ECAC((uint64_t)&a29);
  sub_C7E3C8((uint64_t)&a23);
  sub_C7E3C8(a11);
  _Unwind_Resume(a1);
}

void sub_DDF1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

void sub_DDF20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (*(char *)(v29 - 89) < 0) {
    operator delete(*(void **)(v29 - 112));
  }
  if (*(char *)(v29 - 113) < 0) {
    operator delete(*(void **)(v29 - 136));
  }
  sub_111ECAC((uint64_t)&a29);
  sub_C7E3C8((uint64_t)&a23);
  sub_C7E3C8(a11);
  _Unwind_Resume(a1);
}

void sub_DDF294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  std::ostream::~ostream();
  std::ios::~ios();
  sub_C7E3C8((uint64_t)va);
  sub_C7E3C8(a4);
  _Unwind_Resume(a1);
}

void sub_DDF2E0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v29[0] = 0;
  v29[1] = &off_2439090;
  sub_3E7814((__n128 *)a2, (__n128 *)v29);
  if (!*(_DWORD *)(a1 + 208))
  {
    int v4 = *(_DWORD *)(a1 + 56);
    int v5 = *(_DWORD *)(a1 + 128);
    if (v5 + v4 == 1)
    {
      if (v4 == 1)
      {
        sub_DDF9D4(*(void *)(*(void *)(a1 + 64) + 8), (__n128 *)v29);
        sub_3E7A68(a2, (uint64_t)v29);
        v6 = (void **)__p;
        if (__p)
        {
          v7 = v31;
          v8 = __p;
          if (v31 != __p)
          {
            do
            {
              if (*((char *)v7 - 1) < 0) {
                operator delete(*(v7 - 3));
              }
              v7 -= 4;
            }
            while (v7 != v6);
            v8 = __p;
          }
          v31 = v6;
          operator delete(v8);
        }
      }
      if (v5 == 1)
      {
        sub_DE0398(*(void *)(*(void *)(a1 + 136) + 8), (uint64_t)v29);
        sub_3E7A68(a2, (uint64_t)v29);
        v25 = (void **)__p;
        if (__p)
        {
          v26 = v31;
          v27 = __p;
          if (v31 != __p)
          {
            do
            {
              if (*((char *)v26 - 1) < 0) {
                operator delete(*(v26 - 3));
              }
              v26 -= 4;
            }
            while (v26 != v25);
            v27 = __p;
          }
          v31 = v25;
          operator delete(v27);
        }
      }
      BOOL v28 = *(void *)(a2 + 16) != *(void *)(a2 + 24);
      goto LABEL_42;
    }
    char v37 = 8;
    std::to_string(&v33, v4);
    v9 = std::string::insert(&v33, 0, "Got a PlaceResponse with invalid result size (should contain exactly one place or maps result, got ");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v11 = std::string::append(&v34, " place result and ");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v32, v5);
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v13 = &v32;
    }
    else {
      v13 = (std::string *)v32.__r_.__value_.__r.__words[0];
    }
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v32.__r_.__value_.__l.__size_;
    }
    v15 = std::string::append(&v35, (const std::string::value_type *)v13, size);
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v17 = std::string::append(&v36, " maps result).");
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    __p = (void *)v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v29 = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    unint64_t v19 = *(void *)(a2 + 24);
    if (v19 >= *(void *)(a2 + 32))
    {
      v23 = sub_D9E85C((char **)(a2 + 16), &v37, (uint64_t)v29);
      char v24 = HIBYTE(__p);
      *(void *)(a2 + 24) = v23;
      if ((v24 & 0x80) == 0) {
        goto LABEL_36;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v19 = 8;
      v20 = (unsigned char *)(v19 + 8);
      char v21 = HIBYTE(__p);
      if (SHIBYTE(__p) < 0)
      {
        sub_4200(v20, v29[0], (unint64_t)v29[1]);
      }
      else
      {
        long long v22 = *(_OWORD *)v29;
        *(void *)(v19 + 24) = __p;
        *(_OWORD *)v20 = v22;
      }
      *(void *)(a2 + 24) = v19 + 32;
      *(void *)(a2 + 24) = v19 + 32;
      if ((v21 & 0x80) == 0)
      {
LABEL_36:
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v36.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_38:
            if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_39;
            }
            goto LABEL_46;
          }
        }
        else if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_38;
        }
        operator delete(v32.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_39:
          if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_40;
          }
          goto LABEL_47;
        }
LABEL_46:
        operator delete(v35.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_40:
          if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_41:
            BOOL v28 = 1;
LABEL_42:
            *(void *)a2 = v28;
            *(void *)(a2 + 8) = &off_2439090;
            return;
          }
LABEL_48:
          operator delete(v33.__r_.__value_.__l.__data_);
          goto LABEL_41;
        }
LABEL_47:
        operator delete(v34.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_41;
        }
        goto LABEL_48;
      }
    }
    operator delete(v29[0]);
    goto LABEL_36;
  }
}

void sub_DDF604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  *(void *)(v42 + 24) = v43;
  operator delete(__p);
  if (*(char *)(v44 - 73) < 0)
  {
    operator delete(*(void **)(v44 - 96));
    if (a23 < 0)
    {
LABEL_9:
      operator delete(a18);
      if (a42 < 0)
      {
LABEL_10:
        operator delete(a37);
        if (a35 < 0)
        {
LABEL_11:
          operator delete(a30);
          if (a29 < 0)
          {
LABEL_12:
            operator delete(a24);
            sub_C7E3C8(v42);
            _Unwind_Resume(a1);
          }
LABEL_6:
          sub_C7E3C8(v42);
          _Unwind_Resume(a1);
        }
LABEL_5:
        if (a29 < 0) {
          goto LABEL_12;
        }
        goto LABEL_6;
      }
LABEL_4:
      if (a35 < 0) {
        goto LABEL_11;
      }
      goto LABEL_5;
    }
  }
  else if (a23 < 0)
  {
    goto LABEL_9;
  }
  if (a42 < 0) {
    goto LABEL_10;
  }
  goto LABEL_4;
}

void sub_DDF754(_Unwind_Exception *a1)
{
  sub_C7E3C8(v1);
  _Unwind_Resume(a1);
}

char *sub_DDF768@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v12.n128_u64[0] = 0;
  v12.n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814((__n128 *)a2, &v12);
  if ((*(unsigned char *)(a1 + 16) & 1) == 0)
  {
    v12.n128_u8[0] = 8;
    unint64_t v4 = *(void *)(a2 + 24);
    if (v4 >= *(void *)(a2 + 32))
    {
      v9 = sub_DE3408((char **)(a2 + 16), (char *)&v12, "Got a RoadAccessPoint without a location.");
LABEL_18:
      *(void *)(a2 + 24) = v9;
      goto LABEL_19;
    }
    sub_DE3590(a2 + 32, *(unsigned char **)(a2 + 24), (char *)&v12, "Got a RoadAccessPoint without a location.");
LABEL_16:
    v9 = (char *)(v4 + 32);
    *(void *)(a2 + 24) = v4 + 32;
    goto LABEL_18;
  }
  sub_DD88A0(*(void *)(a1 + 24), (uint64_t)&v12);
  unsigned __int32 v5 = v12.n128_u32[0];
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v14;
    v8 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 4;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v14 = v6;
    operator delete(v8);
  }
  if (v5)
  {
    v12.n128_u8[0] = 8;
    unint64_t v4 = *(void *)(a2 + 24);
    if (v4 >= *(void *)(a2 + 32))
    {
      v9 = sub_DE36C4((char **)(a2 + 16), (char *)&v12, "Got an invalid RoadAccessPoint.location");
      goto LABEL_18;
    }
    sub_DE384C(a2 + 32, *(unsigned char **)(a2 + 24), (char *)&v12, "Got an invalid RoadAccessPoint.location");
    goto LABEL_16;
  }
LABEL_19:
  if (*(void *)(a1 + 48) | *(void *)(a1 + 36))
  {
    result = *(char **)(a2 + 24);
  }
  else
  {
    v12.n128_u8[0] = 8;
    unint64_t v11 = *(void *)(a2 + 24);
    if (v11 >= *(void *)(a2 + 32))
    {
      result = sub_DE3980((char **)(a2 + 16), (char *)&v12, "Got a RoadAccessPoint which is invalid for all transport modes.");
    }
    else
    {
      sub_DE3B08(a2 + 32, *(unsigned char **)(a2 + 24), (char *)&v12, "Got a RoadAccessPoint which is invalid for all transport modes.");
      result = (char *)(v11 + 32);
      *(void *)(a2 + 24) = v11 + 32;
    }
    *(void *)(a2 + 24) = result;
  }
  *(void *)a2 = *(void *)(a2 + 16) != (void)result;
  *(void *)(a2 + 8) = &off_2439090;
  return result;
}

void sub_DDF950(_Unwind_Exception *a1)
{
  sub_C7E3C8(v1);
  _Unwind_Resume(a1);
}

void sub_DDF964(_Unwind_Exception *a1)
{
  *(void *)(v1 + 24) = v2;
  sub_C7E3C8(v1);
  _Unwind_Resume(a1);
}

void sub_DDF9C0(_Unwind_Exception *a1)
{
  sub_C7E3C8(v1);
  _Unwind_Resume(a1);
}

void sub_DDF9D4(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  v3 = a2;
  __p[0] = 0;
  __p[1] = &off_2439090;
  sub_3E7814(a2, (__n128 *)__p);
  v45 = (char **)&v3[1];
  v46 = v3;
  uint64_t v4 = *(unsigned int *)(a1 + 128);
  if (!v4) {
    goto LABEL_12;
  }
  v66.__r_.__value_.__s.__data_[0] = 8;
  sub_45A260(v4, (uint64_t)&v67);
  unsigned __int32 v5 = std::string::insert(&v67, 0, "PlaceResponse with non-success status (");
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v64.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = std::string::append(&v64, ").");
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  std::string::size_type v59 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v9 = v3;
  unint64_t v10 = v3[1].n128_u64[1];
  if (v10 >= v9[2].n128_u64[0])
  {
    v3 = v46;
    v46[1].n128_u64[1] = (unint64_t)sub_D9E85C(v45, (char *)&v66, (uint64_t)__p);
    if ((SHIBYTE(v59) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  *(unsigned char *)unint64_t v10 = v66.__r_.__value_.__s.__data_[0];
  unint64_t v11 = (unsigned char *)(v10 + 8);
  if (SHIBYTE(v59) < 0)
  {
    sub_4200(v11, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    long long v12 = *(_OWORD *)__p;
    *(void *)(v10 + 24) = v59;
    *(_OWORD *)unint64_t v11 = v12;
  }
  unint64_t v13 = v10 + 32;
  v3 = v46;
  v46[1].n128_u64[1] = v13;
  v46[1].n128_u64[1] = v13;
  if (SHIBYTE(v59) < 0) {
LABEL_9:
  }
    operator delete(__p[0]);
LABEL_10:
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v64.__r_.__value_.__l.__data_);
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_17;
    }
LABEL_12:
    uint64_t v14 = *(int *)(a1 + 56);
    if (v14) {
      goto LABEL_13;
    }
LABEL_18:
    LOBYTE(__p[0]) = 8;
    unint64_t v17 = v3[1].n128_u64[1];
    if (v17 >= v3[2].n128_u64[0])
    {
      long long v18 = sub_DE2E90(v45, (char *)__p, "PlaceResponse without any components.");
    }
    else
    {
      sub_DE3018(v3 + 32, (unsigned char *)v3[1].n128_u64[1], (char *)__p, "PlaceResponse without any components.");
      long long v18 = (char *)(v17 + 32);
      v3[1].n128_u64[1] = v17 + 32;
    }
    v3[1].n128_u64[1] = (unint64_t)v18;
    uint64_t v14 = *(int *)(a1 + 56);
    uint64_t v19 = *(void *)(a1 + 64);
    long long v16 = (uint64_t *)(v19 + 8);
    if (!v19) {
      long long v16 = 0;
    }
    if (!v14) {
      goto LABEL_82;
    }
    goto LABEL_24;
  }
  if ((SHIBYTE(v67.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_12;
  }
LABEL_17:
  operator delete(v67.__r_.__value_.__l.__data_);
  uint64_t v14 = *(int *)(a1 + 56);
  if (!v14) {
    goto LABEL_18;
  }
LABEL_13:
  uint64_t v15 = *(void *)(a1 + 64);
  long long v16 = (uint64_t *)(v15 + 8);
  if (!v15) {
    long long v16 = 0;
  }
LABEL_24:
  v47 = &v16[v14];
  while (2)
  {
    v48 = v16;
    uint64_t v21 = *v16;
    if (*(_DWORD *)(*v16 + 136) != 3) {
      goto LABEL_25;
    }
    uint64_t v22 = *(void *)(v21 + 64);
    uint64_t v23 = v22 ? v22 + 8 : 0;
    uint64_t v24 = *(int *)(v21 + 56);
    if (!v24) {
      goto LABEL_25;
    }
    uint64_t v49 = v23 + 8 * v24;
    while (2)
    {
      uint64_t v50 = v23;
      v25 = *(uint64_t (****)())(*(void *)v23 + 80);
      if (!v25) {
        v25 = &off_2544980;
      }
      v26 = v25[4];
      if (v26) {
        v27 = (uint64_t *)(v26 + 1);
      }
      else {
        v27 = 0;
      }
      uint64_t v28 = *((int *)v25 + 6);
      if (!v28) {
        goto LABEL_32;
      }
      v51 = &v27[v28];
      while (2)
      {
        sub_DDF768(*v27, (uint64_t)&v64);
        v52 = v27;
        v31 = (unsigned __int8 *)v64.__r_.__value_.__r.__words[2];
        v30 = v65;
        if ((unsigned __int8 *)v64.__r_.__value_.__r.__words[2] == v65)
        {
          std::string v32 = v52;
          if (v64.__r_.__value_.__r.__words[2]) {
            goto LABEL_77;
          }
          goto LABEL_42;
        }
        do
        {
          if (!sub_723EC(1u)) {
            goto LABEL_47;
          }
          __p[0] = v55;
          *(void **)((char *)__p + *((void *)v55 - 3)) = v20;
          std::string v33 = (std::ios_base *)((char *)__p + *((void *)__p[0] - 3));
          std::ios_base::init(v33, &__p[1]);
          v33[1].__vftable = 0;
          v33[1].__fmtflags_ = -1;
          std::streambuf::basic_streambuf();
          long long v60 = 0u;
          long long v61 = 0u;
          int v62 = 16;
          if (*v31)
          {
            sub_3E8634((char *)*v31, (uint64_t)&v66);
            std::string v34 = std::string::append(&v66, " ");
            long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
            v67.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v35;
            v34->__r_.__value_.__l.__size_ = 0;
            v34->__r_.__value_.__r.__words[2] = 0;
            v34->__r_.__value_.__r.__words[0] = 0;
            int v36 = (char)v31[31];
            if (v36 >= 0) {
              char v37 = (const std::string::value_type *)(v31 + 8);
            }
            else {
              char v37 = (const std::string::value_type *)*((void *)v31 + 1);
            }
            if (v36 >= 0) {
              std::string::size_type v38 = v31[31];
            }
            else {
              std::string::size_type v38 = *((void *)v31 + 2);
            }
            v39 = std::string::append(&v67, v37, v38);
            long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
            int64_t v57 = v39->__r_.__value_.__r.__words[2];
            *(_OWORD *)__dst = v40;
            v39->__r_.__value_.__l.__size_ = 0;
            v39->__r_.__value_.__r.__words[2] = 0;
            v39->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v67.__r_.__value_.__l.__data_);
              if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
LABEL_62:
              }
                operator delete(v66.__r_.__value_.__l.__data_);
            }
            else if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
            {
              goto LABEL_62;
            }
          }
          else if ((char)v31[31] < 0)
          {
            sub_4200(__dst, *((void **)v31 + 1), *((void *)v31 + 2));
          }
          else
          {
            long long v41 = *(_OWORD *)(v31 + 8);
            int64_t v57 = *((void *)v31 + 3);
            *(_OWORD *)__dst = v41;
          }
          if (v57 >= 0) {
            uint64_t v42 = __dst;
          }
          else {
            uint64_t v42 = (void **)__dst[0];
          }
          if (v57 >= 0) {
            uint64_t v43 = HIBYTE(v57);
          }
          else {
            uint64_t v43 = (uint64_t)__dst[1];
          }
          sub_188FC78(__p, (uint64_t)v42, v43);
          if (SHIBYTE(v57) < 0) {
            operator delete(__dst[0]);
          }
          std::stringbuf::str();
          sub_7246C((uint64_t *)&v67, 1u);
          if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v67.__r_.__value_.__l.__data_);
          }
          __p[0] = v53;
          *(void **)((char *)__p + *((void *)v53 - 3)) = v54;
          if (SBYTE7(v61) < 0) {
            operator delete((void *)v60);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
LABEL_47:
          v31 += 32;
        }
        while (v31 != v30);
        v31 = (unsigned __int8 *)v64.__r_.__value_.__r.__words[2];
        std::string v32 = v52;
        if (v64.__r_.__value_.__r.__words[2])
        {
LABEL_77:
          uint64_t v44 = v65;
          uint64_t v29 = v31;
          if (v65 != v31)
          {
            do
            {
              if ((char)*(v44 - 1) < 0) {
                operator delete(*((void **)v44 - 3));
              }
              v44 -= 32;
            }
            while (v44 != v31);
            uint64_t v29 = (unsigned __int8 *)v64.__r_.__value_.__r.__words[2];
          }
          v65 = v31;
          operator delete(v29);
        }
LABEL_42:
        v27 = v32 + 1;
        if (v27 != v51) {
          continue;
        }
        break;
      }
LABEL_32:
      uint64_t v23 = v50 + 8;
      if (v50 + 8 != v49) {
        continue;
      }
      break;
    }
LABEL_25:
    long long v16 = v48 + 1;
    if (v48 + 1 != v47) {
      continue;
    }
    break;
  }
LABEL_82:
  v46->n128_u64[0] = v46[1].n128_u64[0] != v46[1].n128_u64[1];
  v46->n128_u64[1] = (unint64_t)&off_2439090;
}

void sub_DE008C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  *(void *)(a11 + 24) = v45;
  if (a33 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v46 - 169) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v46 - 89) & 0x80000000) == 0)
      {
LABEL_9:
        v48 = (void **)*a10;
        if (!*a10) {
LABEL_10:
        }
          _Unwind_Resume(a1);
LABEL_11:
        uint64_t v49 = *(void ***)(a11 + 24);
        if (v49 == v48)
        {
          *(void *)(a11 + 24) = v48;
          operator delete(v48);
          _Unwind_Resume(a1);
        }
        while (1)
        {
          if (*((char *)v49 - 1) < 0) {
            operator delete(*(v49 - 3));
          }
          v49 -= 4;
          if (v49 == v48)
          {
            uint64_t v50 = *a10;
            *(void *)(a11 + 24) = v48;
            operator delete(v50);
            _Unwind_Resume(a1);
          }
        }
      }
LABEL_7:
      operator delete(*(void **)(v46 - 112));
      v48 = (void **)*a10;
      if (!*a10) {
        goto LABEL_10;
      }
      goto LABEL_11;
    }
  }
  else if ((*(char *)(v46 - 169) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v46 - 192));
  if ((*(char *)(v46 - 89) & 0x80000000) == 0) {
    goto LABEL_9;
  }
  goto LABEL_7;
}

void sub_DE0398(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)(a1 + 64) == 1)
  {
    __p = 0;
    v11[0] = &off_2439090;
    sub_3E7814((__n128 *)a2, (__n128 *)&__p);
    if ((*(unsigned char *)(a1 + 16) & 1) == 0)
    {
      LOBYTE(__p) = 8;
      unint64_t v4 = *(void *)(a2 + 24);
      if (v4 >= *(void *)(a2 + 32))
      {
        unsigned __int32 v5 = sub_DE314C((char **)(a2 + 16), (char *)&__p, "Maps result contains no place.");
      }
      else
      {
        sub_DE32D4(a2 + 32, *(unsigned char **)(a2 + 24), (char *)&__p, "Maps result contains no place.");
        unsigned __int32 v5 = (char *)(v4 + 32);
        *(void *)(a2 + 24) = v4 + 32;
      }
      *(void *)(a2 + 24) = v5;
    }
    if (*(void *)(a1 + 24)) {
      long long v6 = *(uint64_t (****)())(a1 + 24);
    }
    else {
      long long v6 = &off_25486C0;
    }
    sub_DDF9D4((uint64_t)v6, (__n128 *)&__p);
    sub_3E7A68(a2, (uint64_t)&__p);
    v7 = (void **)v11[1];
    if (v11[1])
    {
      long long v8 = v12;
      v9 = v11[1];
      if (v12 != v11[1])
      {
        do
        {
          if (*((char *)v8 - 1) < 0) {
            operator delete(*(v8 - 3));
          }
          v8 -= 4;
        }
        while (v8 != v7);
        v9 = v11[1];
      }
      long long v12 = v7;
      operator delete(v9);
    }
  }
  else
  {
    __p = operator new(0x28uLL);
    *(_OWORD *)unint64_t v11 = xmmword_20B9240;
    strcpy((char *)__p, "Maps result does not contain a place.");
    sub_3E7914(8, (long long *)&__p, a2);
    if (SHIBYTE(v11[1]) < 0) {
      operator delete(__p);
    }
  }
}

void sub_DE0538(_Unwind_Exception *a1)
{
  sub_C7E3C8(v1);
  _Unwind_Resume(a1);
}

void sub_DE056C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0xDE0564);
}

void sub_DE0588(uint64_t a1@<X0>, unsigned int a2@<W1>, __n128 *a3@<X8>)
{
  __p = 0;
  v21[0] = &off_2439090;
  sub_3E7814(a3, (__n128 *)&__p);
  sub_DDDA70((uint64_t)v23, a1, a2, (uint64_t)a3);
  if ((sub_51D60(v23) & 1) == 0) {
    goto LABEL_41;
  }
  if (*(int *)(a1 + 56) < 1
    || (__p = operator new(0x30uLL),
        *(_OWORD *)uint64_t v21 = xmmword_20B9A80,
        strcpy((char *)__p, "Got a DirectionsRequest with legacy Waypoints."),
        sub_DDE278((uint64_t)v23, 8, (long long *)&__p),
        (SHIBYTE(v21[1]) & 0x80000000) == 0))
  {
    uint64_t v6 = *(unsigned int *)(a1 + 104);
    if ((int)v6 <= 1) {
      goto LABEL_5;
    }
LABEL_12:
    uint64_t v9 = *(void *)(a1 + 112);
    if (v9) {
      long long v8 = (uint64_t *)(v9 + 8);
    }
    else {
      long long v8 = 0;
    }
    goto LABEL_15;
  }
  operator delete(__p);
  uint64_t v6 = *(unsigned int *)(a1 + 104);
  if ((int)v6 > 1) {
    goto LABEL_12;
  }
LABEL_5:
  __p = operator new(0x38uLL);
  *(_OWORD *)uint64_t v21 = xmmword_20B9AC0;
  strcpy((char *)__p, "Got a DirectionsRequest with less than two waypoints");
  sub_DDE278((uint64_t)v23, 8, (long long *)&__p);
  if ((SHIBYTE(v21[1]) & 0x80000000) == 0)
  {
    uint64_t v6 = *(int *)(a1 + 104);
    uint64_t v7 = *(void *)(a1 + 112);
    if (v7) {
      long long v8 = (uint64_t *)(v7 + 8);
    }
    else {
      long long v8 = 0;
    }
    if (!v6) {
      goto LABEL_29;
    }
LABEL_15:
    unint64_t v10 = &v8[v6];
    do
    {
      sub_DDE340(*v8, (__n128 *)&__p);
      sub_DDE010((uint64_t)v23, (uint64_t)&__p);
      long long v12 = (void **)v21[1];
      if (v21[1])
      {
        unint64_t v13 = v22;
        unint64_t v11 = v21[1];
        if (v22 != v21[1])
        {
          do
          {
            if (*((char *)v13 - 1) < 0) {
              operator delete(*(v13 - 3));
            }
            v13 -= 4;
          }
          while (v13 != v12);
          unint64_t v11 = v21[1];
        }
        uint64_t v22 = v12;
        operator delete(v11);
      }
      ++v8;
    }
    while (v8 != v10);
    goto LABEL_29;
  }
  operator delete(__p);
  uint64_t v6 = *(int *)(a1 + 104);
  uint64_t v14 = *(void *)(a1 + 112);
  if (v14) {
    long long v8 = (uint64_t *)(v14 + 8);
  }
  else {
    long long v8 = 0;
  }
  if (v6) {
    goto LABEL_15;
  }
LABEL_29:
  if (sub_DB6EEC(a1))
  {
    int v15 = sub_DB7034(a1);
    long long v16 = *(void *)(a1 + 392) ? *(uint64_t (****)())(a1 + 392) : &off_25351C0;
    sub_DE08EC(a1 + 96, (uint64_t)v16, 1, v15, (__n128 *)&__p);
    sub_DDE010((uint64_t)v23, (uint64_t)&__p);
    unint64_t v17 = (void **)v21[1];
    if (v21[1])
    {
      long long v18 = v22;
      uint64_t v19 = v21[1];
      if (v22 != v21[1])
      {
        do
        {
          if (*((char *)v18 - 1) < 0) {
            operator delete(*(v18 - 3));
          }
          v18 -= 4;
        }
        while (v18 != v17);
        uint64_t v19 = v21[1];
      }
      uint64_t v22 = v17;
      operator delete(v19);
    }
  }
LABEL_41:
  if (v25 < 0) {
    operator delete(v24);
  }
}

void sub_DE0848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  sub_C7E3C8((uint64_t)&a10);
  if (a25 < 0)
  {
    operator delete(__p);
    sub_C7E3C8(v25);
    _Unwind_Resume(a1);
  }
  sub_C7E3C8(v25);
  _Unwind_Resume(a1);
}

void sub_DE08EC(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, __n128 *a5@<X8>)
{
  v72 = 0;
  v73 = 0;
  v74 = 0;
  uint64_t v10 = *(int *)(a1 + 8);
  if (v10)
  {
    if ((v10 & 0x80000000) != 0) {
      sub_2E00();
    }
    v72 = (char *)operator new(24 * v10);
    v73 = v72;
    v74 = &v72[24 * (int)v10];
  }
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11) {
    long long v12 = (void *)(v11 + 8);
  }
  else {
    long long v12 = 0;
  }
  sub_DE3C3C(v12, &v12[v10], &v72);
  *(_OWORD *)v69 = 0u;
  *(_OWORD *)v70 = 0u;
  int v71 = 1065353216;
  unint64_t v13 = (unsigned __int8 *)v72;
  uint64_t v14 = (unsigned __int8 *)v73;
  if (v72 == v73)
  {
    int v15 = 0;
    long long v16 = v72;
  }
  else
  {
    do
    {
      sub_DE3E6C((uint64_t)v69, v13, (uint64_t)v13);
      v13 += 24;
    }
    while (v13 != v14);
    int v15 = v70[1];
    unint64_t v13 = (unsigned __int8 *)v72;
    long long v16 = v73;
  }
  unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v16 - (char *)v13) >> 3);
  if ((unint64_t)v15 < v17)
  {
    v63[0].n128_u64[0] = (unint64_t)operator new(0x30uLL);
    *(__n128 *)((char *)v63 + 8) = (__n128)xmmword_20B9A40;
    strcpy((char *)v63[0].n128_u64[0], "Duplicate UUID found in request waypoints.");
    sub_3E7914(8, (long long *)v63, (uint64_t)a5);
LABEL_15:
    if ((v63[1].n128_i8[7] & 0x80000000) == 0) {
      goto LABEL_104;
    }
    uint64_t v19 = (void *)v63[0].n128_u64[0];
    goto LABEL_103;
  }
  unint64_t v18 = *(int *)(a1 + 8);
  if (v17 < v18)
  {
    v63[0].n128_u64[0] = (unint64_t)operator new(0x48uLL);
    *(__n128 *)((char *)v63 + 8) = (__n128)xmmword_20B9A00;
    strcpy((char *)v63[0].n128_u64[0], "Waypoint UUID not populated in the waypoint list of the request.");
    sub_3E7914(8, (long long *)v63, (uint64_t)a5);
    goto LABEL_15;
  }
  uint64_t v20 = *(int *)(a2 + 32);
  if (!v20)
  {
    v63[0].n128_u64[0] = 0;
    v63[0].n128_u64[1] = (unint64_t)&off_2439090;
    sub_3E7814(a5, v63);
    goto LABEL_104;
  }
  uint64_t v21 = *(void *)(a2 + 40);
  uint64_t v22 = v21 + 8;
  if (v21) {
    uint64_t v23 = (uint64_t *)(v21 + 8);
  }
  else {
    uint64_t v23 = 0;
  }
  uint64_t v24 = (v20 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (!v24)
  {
    unint64_t v35 = 0;
    uint64_t v29 = v23;
LABEL_36:
    int v36 = &v23[v20];
    do
    {
      uint64_t v37 = *v29++;
      std::string::size_type v38 = *(uint64_t (****)())(v37 + 80);
      if (!v38) {
        std::string::size_type v38 = &off_25352D0;
      }
      if (*((_DWORD *)v38 + 26) == 1) {
        ++v35;
      }
    }
    while (v29 != v36);
    goto LABEL_42;
  }
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = v24 + 1;
  uint64_t v28 = (v24 + 1) & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v29 = &v23[v28];
  v30 = v23 + 1;
  uint64_t v31 = v28;
  do
  {
    std::string v32 = *(uint64_t (****)())(*(v30 - 1) + 80);
    std::string v33 = *(uint64_t (****)())(*v30 + 80);
    if (!v32) {
      std::string v32 = &off_25352D0;
    }
    if (!v33) {
      std::string v33 = &off_25352D0;
    }
    int v34 = *((_DWORD *)v33 + 26);
    if (*((_DWORD *)v32 + 26) == 1) {
      ++v25;
    }
    if (v34 == 1) {
      ++v26;
    }
    v30 += 2;
    v31 -= 2;
  }
  while (v31);
  unint64_t v35 = v26 + v25;
  if (v27 != v28) {
    goto LABEL_36;
  }
LABEL_42:
  std::string v66 = 0;
  std::string v67 = 0;
  v68 = 0;
  if (v18)
  {
    if ((v18 & 0x80000000) != 0) {
      sub_2E00();
    }
    std::string v66 = operator new(24 * v18);
    std::string v67 = (unsigned __int8 *)v66;
    v68 = (char *)v66 + 24 * (int)v18;
  }
  if (*(void *)(*(void *)v22 + 72)) {
    v39 = *(uint64_t (****)())(*(void *)v22 + 72);
  }
  else {
    v39 = &off_25352D0;
  }
  sub_DC5BD0((uint64_t)v39, &v65);
  if (sub_51D60((unsigned __int8 *)&v65)) {
    sub_4885C((char **)&v66, &v65);
  }
  uint64_t v40 = *(void *)(a2 + 40);
  if (v40) {
    uint64_t v41 = v40 + 8;
  }
  else {
    uint64_t v41 = 0;
  }
  uint64_t v42 = *(int *)(a2 + 32);
  __p = &v66;
  if (v42)
  {
    uint64_t v43 = 8 * v42;
    do
    {
      if (*(void *)(*(void *)v41 + 80)) {
        uint64_t v44 = *(uint64_t (****)())(*(void *)v41 + 80);
      }
      else {
        uint64_t v44 = &off_25352D0;
      }
      if (*((_DWORD *)v44 + 26) == 1)
      {
        sub_DC5BD0((uint64_t)v44, v63);
        if (sub_51D60((unsigned __int8 *)v63))
        {
          if (*(void *)(*(void *)v41 + 80)) {
            uint64_t v45 = *(uint64_t (****)())(*(void *)v41 + 80);
          }
          else {
            uint64_t v45 = &off_25352D0;
          }
          sub_DC5BD0((uint64_t)v45, v63);
          sub_DE3D1C((char ***)&__p, (long long *)v63);
        }
      }
      v41 += 8;
      v43 -= 8;
    }
    while (v43);
  }
  memset(v63, 0, sizeof(v63));
  int v64 = 1065353216;
  uint64_t v46 = (unsigned __int8 *)v66;
  v47 = v67;
  if (v66 == v67)
  {
    unint64_t v48 = 0;
    uint64_t v49 = (unsigned __int8 *)v66;
  }
  else
  {
    do
    {
      if (sub_51D60(v46)) {
        sub_DE3E6C((uint64_t)v63, v46, (uint64_t)v46);
      }
      v46 += 24;
    }
    while (v46 != v47);
    unint64_t v48 = v63[1].n128_u64[1];
    uint64_t v46 = (unsigned __int8 *)v66;
    uint64_t v49 = v67;
  }
  unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * ((v49 - v46) >> 3);
  if (v48 < v50)
  {
    __p = operator new(0x48uLL);
    long long v62 = xmmword_20E8240;
    strcpy((char *)__p, "Duplicate UUID found in the waypoints of the original user route.");
    sub_3E7914(8, (long long *)&__p, (uint64_t)a5);
    goto LABEL_95;
  }
  if (v50 <= v35)
  {
    __p = operator new(0x70uLL);
    long long v62 = xmmword_20F0660;
    strcpy((char *)__p, "Waypoint UUID not populated in the original user route (for a waypoint that has source USER or is the origin).");
    sub_3E7914(8, (long long *)&__p, (uint64_t)a5);
    goto LABEL_95;
  }
  v51 = (unsigned __int8 *)v72;
  v52 = (unsigned __int8 *)v73;
  v53 = &v46[24 * (a3 != 1)];
  if (v72 != v73)
  {
    do
    {
      if (v53 == v49) {
        break;
      }
      if (!sub_52068(v51, v53)) {
        break;
      }
      v51 += 24;
      v53 += 24;
    }
    while (v51 != v52);
  }
  if (a4 == 7)
  {
    if (v51 == (unsigned __int8 *)v72 || v53 == v66)
    {
      sub_5E5C(&__p, "Got a request for changing waypoints during a nav session in which the UUIDs of the origin (in the input waypoints and the original user route, respectively) do not match, but the origin must not be deleted.");
      sub_3E7914(8, (long long *)&__p, (uint64_t)a5);
      goto LABEL_95;
    }
    if (v51 == (unsigned __int8 *)v73 && v53 == v67)
    {
      sub_5E5C(&__p, "Got a request for changing waypoints during a nav session, but waypoint UUIDs in the input are the same as in the original user route.");
      sub_3E7914(8, (long long *)&__p, (uint64_t)a5);
      goto LABEL_95;
    }
LABEL_89:
    __p = 0;
    *(void *)&long long v62 = &off_2439090;
    sub_3E7814(a5, (__n128 *)&__p);
    goto LABEL_97;
  }
  if (a3 == 1)
  {
    if (v51 == (unsigned __int8 *)v73 && v53 == v67) {
      goto LABEL_89;
    }
  }
  else if (v51 == (unsigned __int8 *)v73)
  {
    goto LABEL_89;
  }
  sub_5E5C(&__p, "Request has waypoint UUID inconsistency between input waypoints and original user route.");
  sub_3E7914(8, (long long *)&__p, (uint64_t)a5);
LABEL_95:
  if (SHIBYTE(v62) < 0) {
    operator delete(__p);
  }
LABEL_97:
  v55 = (void *)v63[1].n128_u64[0];
  if (v63[1].n128_u64[0])
  {
    do
    {
      v56 = (void *)*v55;
      operator delete(v55);
      v55 = v56;
    }
    while (v56);
  }
  int64_t v57 = (void *)v63[0].n128_u64[0];
  v63[0].n128_u64[0] = 0;
  if (v57) {
    operator delete(v57);
  }
  uint64_t v19 = v66;
  if (v66)
  {
    std::string v67 = (unsigned __int8 *)v66;
LABEL_103:
    operator delete(v19);
  }
LABEL_104:
  v58 = v70[0];
  if (v70[0])
  {
    do
    {
      std::string::size_type v59 = (void *)*v58;
      operator delete(v58);
      v58 = v59;
    }
    while (v59);
  }
  long long v60 = v69[0];
  v69[0] = 0;
  if (v60) {
    operator delete(v60);
  }
  if (v72)
  {
    v73 = v72;
    operator delete(v72);
  }
}

void sub_DE0F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_12168((uint64_t)&a16);
  if (a28)
  {
    a29 = (uint64_t)a28;
    operator delete(a28);
  }
  sub_12168((uint64_t)&a31);
  std::string v33 = *(void **)(v31 - 104);
  if (v33)
  {
    *(void *)(v31 - 96) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(a1);
}

void sub_DE1048(uint64_t a1@<X0>, unsigned int a2@<W1>, __n128 *a3@<X8>)
{
  __p = 0;
  v20[0] = &off_2439090;
  sub_3E7814(a3, (__n128 *)&__p);
  sub_DDE000((uint64_t)v22, a1, a2, (uint64_t)a3);
  if ((sub_51D60(v22) & 1) == 0) {
    goto LABEL_39;
  }
  if (!*(_DWORD *)(a1 + 152)
    && (__p = operator new(0x38uLL),
        *(_OWORD *)uint64_t v20 = xmmword_20B9A10,
        strcpy((char *)__p, "Got an ETATrafficUpdateRequest with no waypoints."),
        sub_DDE278((uint64_t)v22, 8, (long long *)&__p),
        SHIBYTE(v20[1]) < 0))
  {
    operator delete(__p);
    if (!*(_DWORD *)(a1 + 56)) {
      goto LABEL_7;
    }
  }
  else if (!*(_DWORD *)(a1 + 56))
  {
    goto LABEL_7;
  }
  __p = operator new(0x50uLL);
  *(_OWORD *)uint64_t v20 = xmmword_20EB410;
  strcpy((char *)__p, "Got an ETATrafficUpdateRequest with legacy destinationWaypoint populated.");
  sub_DDE278((uint64_t)v22, 8, (long long *)&__p);
  if (SHIBYTE(v20[1]) < 0) {
    operator delete(__p);
  }
LABEL_7:
  if (*(_DWORD *)(a1 + 104)
    && (__p = operator new(0x50uLL),
        *(_OWORD *)uint64_t v20 = xmmword_20B9990,
        strcpy((char *)__p, "Got an ETATrafficUpdateRequest with legacy destinationWaypointTyped populated."),
        sub_DDE278((uint64_t)v22, 8, (long long *)&__p),
        SHIBYTE(v20[1]) < 0))
  {
    operator delete(__p);
    uint64_t v13 = *(void *)(a1 + 160);
    if (v13) {
      uint64_t v7 = (uint64_t *)(v13 + 8);
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(int *)(a1 + 152);
    if (v8)
    {
LABEL_13:
      uint64_t v9 = &v7[v8];
      do
      {
        sub_DDE340(*v7, (__n128 *)&__p);
        sub_DDE010((uint64_t)v22, (uint64_t)&__p);
        uint64_t v11 = (void **)v20[1];
        if (v20[1])
        {
          long long v12 = v21;
          uint64_t v10 = v20[1];
          if (v21 != v20[1])
          {
            do
            {
              if (*((char *)v12 - 1) < 0) {
                operator delete(*(v12 - 3));
              }
              v12 -= 4;
            }
            while (v12 != v11);
            uint64_t v10 = v20[1];
          }
          uint64_t v21 = v11;
          operator delete(v10);
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 160);
    if (v6) {
      uint64_t v7 = (uint64_t *)(v6 + 8);
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(int *)(a1 + 152);
    if (v8) {
      goto LABEL_13;
    }
  }
  if (sub_DB8C44(a1))
  {
    int v14 = sub_35E640();
    int v15 = *(void *)(a1 + 336) ? *(uint64_t (****)())(a1 + 336) : &off_2536C78;
    sub_DE13FC(a1 + 144, (uint64_t)v15, 2, v14, (__n128 *)&__p);
    sub_DDE010((uint64_t)v22, (uint64_t)&__p);
    long long v16 = (void **)v20[1];
    if (v20[1])
    {
      unint64_t v17 = v21;
      unint64_t v18 = v20[1];
      if (v21 != v20[1])
      {
        do
        {
          if (*((char *)v17 - 1) < 0) {
            operator delete(*(v17 - 3));
          }
          v17 -= 4;
        }
        while (v17 != v16);
        unint64_t v18 = v20[1];
      }
      uint64_t v21 = v16;
      operator delete(v18);
    }
  }
LABEL_39:
  if (v24 < 0) {
    operator delete(v23);
  }
}

void sub_DE1350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a25 & 0x80000000) == 0)
    {
LABEL_3:
      sub_C7E3C8(v25);
      _Unwind_Resume(a1);
    }
  }
  else if ((a25 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a20);
  sub_C7E3C8(v25);
  _Unwind_Resume(a1);
}

void sub_DE13FC(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, __n128 *a5@<X8>)
{
  v72 = 0;
  v73 = 0;
  v74 = 0;
  uint64_t v10 = *(int *)(a1 + 8);
  if (v10)
  {
    if ((v10 & 0x80000000) != 0) {
      sub_2E00();
    }
    v72 = (char *)operator new(24 * v10);
    v73 = v72;
    v74 = &v72[24 * (int)v10];
  }
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11) {
    long long v12 = (void *)(v11 + 8);
  }
  else {
    long long v12 = 0;
  }
  sub_DE41F4(v12, &v12[v10], &v72);
  *(_OWORD *)v69 = 0u;
  *(_OWORD *)v70 = 0u;
  int v71 = 1065353216;
  uint64_t v13 = (unsigned __int8 *)v72;
  int v14 = (unsigned __int8 *)v73;
  if (v72 == v73)
  {
    int v15 = 0;
    long long v16 = v72;
  }
  else
  {
    do
    {
      sub_DE3E6C((uint64_t)v69, v13, (uint64_t)v13);
      v13 += 24;
    }
    while (v13 != v14);
    int v15 = v70[1];
    uint64_t v13 = (unsigned __int8 *)v72;
    long long v16 = v73;
  }
  unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v16 - (char *)v13) >> 3);
  if ((unint64_t)v15 < v17)
  {
    v63[0].n128_u64[0] = (unint64_t)operator new(0x30uLL);
    *(__n128 *)((char *)v63 + 8) = (__n128)xmmword_20B9A40;
    strcpy((char *)v63[0].n128_u64[0], "Duplicate UUID found in request waypoints.");
    sub_3E7914(8, (long long *)v63, (uint64_t)a5);
LABEL_15:
    if ((v63[1].n128_i8[7] & 0x80000000) == 0) {
      goto LABEL_104;
    }
    uint64_t v19 = (void *)v63[0].n128_u64[0];
    goto LABEL_103;
  }
  unint64_t v18 = *(int *)(a1 + 8);
  if (v17 < v18)
  {
    v63[0].n128_u64[0] = (unint64_t)operator new(0x48uLL);
    *(__n128 *)((char *)v63 + 8) = (__n128)xmmword_20B9A00;
    strcpy((char *)v63[0].n128_u64[0], "Waypoint UUID not populated in the waypoint list of the request.");
    sub_3E7914(8, (long long *)v63, (uint64_t)a5);
    goto LABEL_15;
  }
  uint64_t v20 = *(int *)(a2 + 32);
  if (!v20)
  {
    v63[0].n128_u64[0] = 0;
    v63[0].n128_u64[1] = (unint64_t)&off_2439090;
    sub_3E7814(a5, v63);
    goto LABEL_104;
  }
  uint64_t v21 = *(void *)(a2 + 40);
  uint64_t v22 = v21 + 8;
  if (v21) {
    uint64_t v23 = (uint64_t *)(v21 + 8);
  }
  else {
    uint64_t v23 = 0;
  }
  uint64_t v24 = (v20 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (!v24)
  {
    unint64_t v35 = 0;
    uint64_t v29 = v23;
LABEL_36:
    int v36 = &v23[v20];
    do
    {
      uint64_t v37 = *v29++;
      std::string::size_type v38 = *(uint64_t (****)())(v37 + 488);
      if (!v38) {
        std::string::size_type v38 = &off_25352D0;
      }
      if (*((_DWORD *)v38 + 26) == 1) {
        ++v35;
      }
    }
    while (v29 != v36);
    goto LABEL_42;
  }
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = v24 + 1;
  uint64_t v28 = (v24 + 1) & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v29 = &v23[v28];
  v30 = v23 + 1;
  uint64_t v31 = v28;
  do
  {
    std::string v32 = *(uint64_t (****)())(*(v30 - 1) + 488);
    std::string v33 = *(uint64_t (****)())(*v30 + 488);
    if (!v32) {
      std::string v32 = &off_25352D0;
    }
    if (!v33) {
      std::string v33 = &off_25352D0;
    }
    int v34 = *((_DWORD *)v33 + 26);
    if (*((_DWORD *)v32 + 26) == 1) {
      ++v25;
    }
    if (v34 == 1) {
      ++v26;
    }
    v30 += 2;
    v31 -= 2;
  }
  while (v31);
  unint64_t v35 = v26 + v25;
  if (v27 != v28) {
    goto LABEL_36;
  }
LABEL_42:
  std::string v66 = 0;
  std::string v67 = 0;
  v68 = 0;
  if (v18)
  {
    if ((v18 & 0x80000000) != 0) {
      sub_2E00();
    }
    std::string v66 = operator new(24 * v18);
    std::string v67 = (unsigned __int8 *)v66;
    v68 = (char *)v66 + 24 * (int)v18;
  }
  if (*(void *)(*(void *)v22 + 480)) {
    v39 = *(uint64_t (****)())(*(void *)v22 + 480);
  }
  else {
    v39 = &off_25352D0;
  }
  sub_DC5BD0((uint64_t)v39, &v65);
  if (sub_51D60((unsigned __int8 *)&v65)) {
    sub_4885C((char **)&v66, &v65);
  }
  uint64_t v40 = *(void *)(a2 + 40);
  if (v40) {
    uint64_t v41 = v40 + 8;
  }
  else {
    uint64_t v41 = 0;
  }
  uint64_t v42 = *(int *)(a2 + 32);
  __p = &v66;
  if (v42)
  {
    uint64_t v43 = 8 * v42;
    do
    {
      if (*(void *)(*(void *)v41 + 488)) {
        uint64_t v44 = *(uint64_t (****)())(*(void *)v41 + 488);
      }
      else {
        uint64_t v44 = &off_25352D0;
      }
      if (*((_DWORD *)v44 + 26) == 1)
      {
        sub_DC5BD0((uint64_t)v44, v63);
        if (sub_51D60((unsigned __int8 *)v63))
        {
          if (*(void *)(*(void *)v41 + 488)) {
            uint64_t v45 = *(uint64_t (****)())(*(void *)v41 + 488);
          }
          else {
            uint64_t v45 = &off_25352D0;
          }
          sub_DC5BD0((uint64_t)v45, v63);
          sub_DE3D1C((char ***)&__p, (long long *)v63);
        }
      }
      v41 += 8;
      v43 -= 8;
    }
    while (v43);
  }
  memset(v63, 0, sizeof(v63));
  int v64 = 1065353216;
  uint64_t v46 = (unsigned __int8 *)v66;
  v47 = v67;
  if (v66 == v67)
  {
    unint64_t v48 = 0;
    uint64_t v49 = (unsigned __int8 *)v66;
  }
  else
  {
    do
    {
      if (sub_51D60(v46)) {
        sub_DE3E6C((uint64_t)v63, v46, (uint64_t)v46);
      }
      v46 += 24;
    }
    while (v46 != v47);
    unint64_t v48 = v63[1].n128_u64[1];
    uint64_t v46 = (unsigned __int8 *)v66;
    uint64_t v49 = v67;
  }
  unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * ((v49 - v46) >> 3);
  if (v48 < v50)
  {
    __p = operator new(0x48uLL);
    long long v62 = xmmword_20E8240;
    strcpy((char *)__p, "Duplicate UUID found in the waypoints of the original user route.");
    sub_3E7914(8, (long long *)&__p, (uint64_t)a5);
    goto LABEL_95;
  }
  if (v50 <= v35)
  {
    __p = operator new(0x70uLL);
    long long v62 = xmmword_20F0660;
    strcpy((char *)__p, "Waypoint UUID not populated in the original user route (for a waypoint that has source USER or is the origin).");
    sub_3E7914(8, (long long *)&__p, (uint64_t)a5);
    goto LABEL_95;
  }
  v51 = (unsigned __int8 *)v72;
  v52 = (unsigned __int8 *)v73;
  v53 = &v46[24 * (a3 != 1)];
  if (v72 != v73)
  {
    do
    {
      if (v53 == v49) {
        break;
      }
      if (!sub_52068(v51, v53)) {
        break;
      }
      v51 += 24;
      v53 += 24;
    }
    while (v51 != v52);
  }
  if (a4 == 7)
  {
    if (v51 == (unsigned __int8 *)v72 || v53 == v66)
    {
      sub_5E5C(&__p, "Got a request for changing waypoints during a nav session in which the UUIDs of the origin (in the input waypoints and the original user route, respectively) do not match, but the origin must not be deleted.");
      sub_3E7914(8, (long long *)&__p, (uint64_t)a5);
      goto LABEL_95;
    }
    if (v51 == (unsigned __int8 *)v73 && v53 == v67)
    {
      sub_5E5C(&__p, "Got a request for changing waypoints during a nav session, but waypoint UUIDs in the input are the same as in the original user route.");
      sub_3E7914(8, (long long *)&__p, (uint64_t)a5);
      goto LABEL_95;
    }
LABEL_89:
    __p = 0;
    *(void *)&long long v62 = &off_2439090;
    sub_3E7814(a5, (__n128 *)&__p);
    goto LABEL_97;
  }
  if (a3 == 1)
  {
    if (v51 == (unsigned __int8 *)v73 && v53 == v67) {
      goto LABEL_89;
    }
  }
  else if (v51 == (unsigned __int8 *)v73)
  {
    goto LABEL_89;
  }
  sub_5E5C(&__p, "Request has waypoint UUID inconsistency between input waypoints and original user route.");
  sub_3E7914(8, (long long *)&__p, (uint64_t)a5);
LABEL_95:
  if (SHIBYTE(v62) < 0) {
    operator delete(__p);
  }
LABEL_97:
  v55 = (void *)v63[1].n128_u64[0];
  if (v63[1].n128_u64[0])
  {
    do
    {
      v56 = (void *)*v55;
      operator delete(v55);
      v55 = v56;
    }
    while (v56);
  }
  int64_t v57 = (void *)v63[0].n128_u64[0];
  v63[0].n128_u64[0] = 0;
  if (v57) {
    operator delete(v57);
  }
  uint64_t v19 = v66;
  if (v66)
  {
    std::string v67 = (unsigned __int8 *)v66;
LABEL_103:
    operator delete(v19);
  }
LABEL_104:
  v58 = v70[0];
  if (v70[0])
  {
    do
    {
      std::string::size_type v59 = (void *)*v58;
      operator delete(v58);
      v58 = v59;
    }
    while (v59);
  }
  long long v60 = v69[0];
  v69[0] = 0;
  if (v60) {
    operator delete(v60);
  }
  if (v72)
  {
    v73 = v72;
    operator delete(v72);
  }
}

void sub_DE1A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_12168((uint64_t)&a16);
  if (a28)
  {
    a29 = (uint64_t)a28;
    operator delete(a28);
  }
  sub_12168((uint64_t)&a31);
  std::string v33 = *(void **)(v31 - 104);
  if (v33)
  {
    *(void *)(v31 - 96) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(a1);
}

void sub_DE1B58(uint64_t a1@<X0>, unsigned int a2@<W1>, __n128 *a3@<X8>)
{
  __p = 0;
  v32[0] = &off_2439090;
  sub_3E7814(a3, (__n128 *)&__p);
  sub_DDDD38((uint64_t)v34, a1, a2, (uint64_t)a3);
  if ((sub_51D60(v34) & 1) == 0) {
    goto LABEL_69;
  }
  int v6 = *(_DWORD *)(a1 + 80);
  int v7 = *(_DWORD *)(a1 + 152);
  int v8 = *(_DWORD *)(a1 + 40);
  if ((v8 & 0x20) != 0)
  {
    __p = operator new(0x40uLL);
    *(_OWORD *)std::string v32 = xmmword_20B98C0;
    strcpy((char *)__p, "Got an ETARequest with legacy origin waypoint populated.");
    sub_DDE278((uint64_t)v34, 8, (long long *)&__p);
    if (SHIBYTE(v32[1]) < 0) {
      operator delete(__p);
    }
    int v8 = *(_DWORD *)(a1 + 40);
  }
  if ((v8 & 0x100) == 0
    && (__p = operator new(0x28uLL),
        *(_OWORD *)std::string v32 = xmmword_20B9260,
        strcpy((char *)__p, "Got an ETARequest with no origin."),
        sub_DDE278((uint64_t)v34, 8, (long long *)&__p),
        SHIBYTE(v32[1]) < 0))
  {
    operator delete(__p);
    if (*(int *)(a1 + 56) < 1) {
      goto LABEL_12;
    }
  }
  else if (*(int *)(a1 + 56) < 1)
  {
    goto LABEL_12;
  }
  __p = operator new(0x40uLL);
  *(_OWORD *)std::string v32 = xmmword_20B9810;
  strcpy((char *)__p, "Got an ETARequest with legacy destination Waypoint populated.");
  sub_DDE278((uint64_t)v34, 8, (long long *)&__p);
  if (SHIBYTE(v32[1]) < 0) {
    operator delete(__p);
  }
LABEL_12:
  if (v6)
  {
    if (v6 < 2 || v7 < 1)
    {
LABEL_18:
      if ((*(unsigned char *)(a1 + 41) & 1) == 0) {
        goto LABEL_29;
      }
LABEL_21:
      sub_DDE340(*(void *)(a1 + 304), (__n128 *)&__p);
      sub_DDE010((uint64_t)v34, (uint64_t)&__p);
      uint64_t v9 = (void **)v32[1];
      if (v32[1])
      {
        uint64_t v10 = v33;
        uint64_t v11 = v32[1];
        if (v33 != v32[1])
        {
          do
          {
            if (*((char *)v10 - 1) < 0) {
              operator delete(*(v10 - 3));
            }
            v10 -= 4;
          }
          while (v10 != v9);
          uint64_t v11 = v32[1];
        }
        std::string v33 = v9;
        operator delete(v11);
      }
      goto LABEL_29;
    }
    __p = operator new(0x58uLL);
    *(_OWORD *)std::string v32 = xmmword_20B9980;
    strcpy((char *)__p, "Got an ETARequest with multiple destinations and at least one intermediate waypoint.");
    sub_DDE278((uint64_t)v34, 8, (long long *)&__p);
  }
  else
  {
    __p = operator new(0x28uLL);
    *(_OWORD *)std::string v32 = xmmword_20E12D0;
    strcpy((char *)__p, "Got an ETARequest with no destination.");
    sub_DDE278((uint64_t)v34, 8, (long long *)&__p);
  }
  if ((SHIBYTE(v32[1]) & 0x80000000) == 0) {
    goto LABEL_18;
  }
  operator delete(__p);
  if (*(unsigned char *)(a1 + 41)) {
    goto LABEL_21;
  }
LABEL_29:
  uint64_t v12 = *(void *)(a1 + 88);
  if (v12) {
    uint64_t v13 = (uint64_t *)(v12 + 8);
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(int *)(a1 + 80);
  if (v14)
  {
    int v15 = &v13[v14];
    do
    {
      sub_DDE340(*v13, (__n128 *)&__p);
      sub_DDE010((uint64_t)v34, (uint64_t)&__p);
      unint64_t v17 = (void **)v32[1];
      if (v32[1])
      {
        unint64_t v18 = v33;
        long long v16 = v32[1];
        if (v33 != v32[1])
        {
          do
          {
            if (*((char *)v18 - 1) < 0) {
              operator delete(*(v18 - 3));
            }
            v18 -= 4;
          }
          while (v18 != v17);
          long long v16 = v32[1];
        }
        std::string v33 = v17;
        operator delete(v16);
      }
      ++v13;
    }
    while (v13 != v15);
  }
  uint64_t v19 = *(void *)(a1 + 160);
  if (v19) {
    uint64_t v20 = (uint64_t *)(v19 + 8);
  }
  else {
    uint64_t v20 = 0;
  }
  uint64_t v21 = *(int *)(a1 + 152);
  if (v21)
  {
    uint64_t v22 = &v20[v21];
    do
    {
      sub_DDE340(*v20, (__n128 *)&__p);
      sub_DDE010((uint64_t)v34, (uint64_t)&__p);
      uint64_t v24 = (void **)v32[1];
      if (v32[1])
      {
        uint64_t v25 = v33;
        uint64_t v23 = v32[1];
        if (v33 != v32[1])
        {
          do
          {
            if (*((char *)v25 - 1) < 0) {
              operator delete(*(v25 - 3));
            }
            v25 -= 4;
          }
          while (v25 != v24);
          uint64_t v23 = v32[1];
        }
        std::string v33 = v24;
        operator delete(v23);
      }
      ++v20;
    }
    while (v20 != v22);
  }
  if (sub_DBF2D4(a1))
  {
    int v26 = sub_35E640();
    uint64_t v27 = *(void *)(a1 + 376) ? *(uint64_t (****)())(a1 + 376) : &off_25351C0;
    sub_DE08EC(a1 + 144, (uint64_t)v27, 3, v26, (__n128 *)&__p);
    sub_DDE010((uint64_t)v34, (uint64_t)&__p);
    uint64_t v28 = (void **)v32[1];
    if (v32[1])
    {
      uint64_t v29 = v33;
      v30 = v32[1];
      if (v33 != v32[1])
      {
        do
        {
          if (*((char *)v29 - 1) < 0) {
            operator delete(*(v29 - 3));
          }
          v29 -= 4;
        }
        while (v29 != v28);
        v30 = v32[1];
      }
      std::string v33 = v28;
      operator delete(v30);
    }
  }
LABEL_69:
  if (v36 < 0) {
    operator delete(v35);
  }
}

void sub_DE2014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a25 & 0x80000000) == 0)
    {
LABEL_3:
      sub_C7E3C8(v25);
      _Unwind_Resume(a1);
    }
  }
  else if ((a25 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a20);
  sub_C7E3C8(v25);
  _Unwind_Resume(a1);
}

char *sub_DE20E4(char **a1, char *a2, char *a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v19 = &v10[32 * v4];
  uint64_t v20 = &v10[32 * v9];
  sub_DE226C(a1 + 16, v19, a2, a3);
  uint64_t v11 = v19;
  uint64_t v12 = v19 + 32;
  uint64_t v13 = *a1;
  uint64_t v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v20;
  }
  else
  {
    do
    {
      char v15 = *(v14 - 32);
      v14 -= 32;
      *(v11 - 32) = v15;
      v11 -= 32;
      long long v16 = *(_OWORD *)(v14 + 8);
      *((void *)v11 + 3) = *((void *)v14 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0;
      *((void *)v14 + 1) = 0;
    }
    while (v14 != v13);
    unint64_t v17 = *a1;
    uint64_t v14 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v20;
    if (v14 != v17)
    {
      do
      {
        if (*(v14 - 1) < 0) {
          operator delete(*((void **)v14 - 3));
        }
        v14 -= 32;
      }
      while (v14 != v17);
      uint64_t v14 = v17;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v19 + 32;
}

void sub_DE2258(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DE226C(int a1, unsigned char *a2, char *a3, char *__s)
{
  char v6 = *a3;
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v15 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v8);
    *((unsigned char *)p_dst + v8) = 0;
    *a2 = v6;
    uint64_t v10 = a2 + 8;
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v15) = v7;
  p_dst = &__dst;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = v6;
  uint64_t v10 = a2 + 8;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)uint64_t v10 = __dst;
    *((void *)v10 + 2) = v15;
    return;
  }
LABEL_10:
  uint64_t v13 = (void *)__dst;
  sub_4200(v10, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v13);
}

void sub_DE238C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_DE23A0(char **a1, char *a2, char *a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v19 = &v10[32 * v4];
  uint64_t v20 = &v10[32 * v9];
  sub_DE2528(a1 + 16, v19, a2, a3);
  uint64_t v11 = v19;
  uint64_t v12 = v19 + 32;
  uint64_t v13 = *a1;
  uint64_t v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v20;
  }
  else
  {
    do
    {
      char v15 = *(v14 - 32);
      v14 -= 32;
      *(v11 - 32) = v15;
      v11 -= 32;
      long long v16 = *(_OWORD *)(v14 + 8);
      *((void *)v11 + 3) = *((void *)v14 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0;
      *((void *)v14 + 1) = 0;
    }
    while (v14 != v13);
    unint64_t v17 = *a1;
    uint64_t v14 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v20;
    if (v14 != v17)
    {
      do
      {
        if (*(v14 - 1) < 0) {
          operator delete(*((void **)v14 - 3));
        }
        v14 -= 32;
      }
      while (v14 != v17);
      uint64_t v14 = v17;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v19 + 32;
}

void sub_DE2514(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DE2528(int a1, unsigned char *a2, char *a3, char *__s)
{
  char v6 = *a3;
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v15 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v8);
    *((unsigned char *)p_dst + v8) = 0;
    *a2 = v6;
    uint64_t v10 = a2 + 8;
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v15) = v7;
  p_dst = &__dst;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = v6;
  uint64_t v10 = a2 + 8;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)uint64_t v10 = __dst;
    *((void *)v10 + 2) = v15;
    return;
  }
LABEL_10:
  uint64_t v13 = (void *)__dst;
  sub_4200(v10, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v13);
}

void sub_DE2648(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_DE265C(char **a1, char *a2, char *a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v19 = &v10[32 * v4];
  uint64_t v20 = &v10[32 * v9];
  sub_DE27E4(a1 + 16, v19, a2, a3);
  uint64_t v11 = v19;
  uint64_t v12 = v19 + 32;
  uint64_t v13 = *a1;
  uint64_t v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v20;
  }
  else
  {
    do
    {
      char v15 = *(v14 - 32);
      v14 -= 32;
      *(v11 - 32) = v15;
      v11 -= 32;
      long long v16 = *(_OWORD *)(v14 + 8);
      *((void *)v11 + 3) = *((void *)v14 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0;
      *((void *)v14 + 1) = 0;
    }
    while (v14 != v13);
    unint64_t v17 = *a1;
    uint64_t v14 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v20;
    if (v14 != v17)
    {
      do
      {
        if (*(v14 - 1) < 0) {
          operator delete(*((void **)v14 - 3));
        }
        v14 -= 32;
      }
      while (v14 != v17);
      uint64_t v14 = v17;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v19 + 32;
}

void sub_DE27D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DE27E4(int a1, unsigned char *a2, char *a3, char *__s)
{
  char v6 = *a3;
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v15 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v8);
    *((unsigned char *)p_dst + v8) = 0;
    *a2 = v6;
    uint64_t v10 = a2 + 8;
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v15) = v7;
  p_dst = &__dst;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = v6;
  uint64_t v10 = a2 + 8;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)uint64_t v10 = __dst;
    *((void *)v10 + 2) = v15;
    return;
  }
LABEL_10:
  uint64_t v13 = (void *)__dst;
  sub_4200(v10, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v13);
}

void sub_DE2904(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_DE2918(char **a1, char *a2, char *a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v19 = &v10[32 * v4];
  uint64_t v20 = &v10[32 * v9];
  sub_DE2AA0(a1 + 16, v19, a2, a3);
  uint64_t v11 = v19;
  uint64_t v12 = v19 + 32;
  uint64_t v13 = *a1;
  uint64_t v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v20;
  }
  else
  {
    do
    {
      char v15 = *(v14 - 32);
      v14 -= 32;
      *(v11 - 32) = v15;
      v11 -= 32;
      long long v16 = *(_OWORD *)(v14 + 8);
      *((void *)v11 + 3) = *((void *)v14 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0;
      *((void *)v14 + 1) = 0;
    }
    while (v14 != v13);
    unint64_t v17 = *a1;
    uint64_t v14 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v20;
    if (v14 != v17)
    {
      do
      {
        if (*(v14 - 1) < 0) {
          operator delete(*((void **)v14 - 3));
        }
        v14 -= 32;
      }
      while (v14 != v17);
      uint64_t v14 = v17;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v19 + 32;
}

void sub_DE2A8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DE2AA0(int a1, unsigned char *a2, char *a3, char *__s)
{
  char v6 = *a3;
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v15 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v8);
    *((unsigned char *)p_dst + v8) = 0;
    *a2 = v6;
    uint64_t v10 = a2 + 8;
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v15) = v7;
  p_dst = &__dst;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = v6;
  uint64_t v10 = a2 + 8;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)uint64_t v10 = __dst;
    *((void *)v10 + 2) = v15;
    return;
  }
LABEL_10:
  uint64_t v13 = (void *)__dst;
  sub_4200(v10, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v13);
}

void sub_DE2BC0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_DE2BD4(char **a1, char *a2, char *a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v19 = &v10[32 * v4];
  uint64_t v20 = &v10[32 * v9];
  sub_DE2D5C(a1 + 16, v19, a2, a3);
  uint64_t v11 = v19;
  uint64_t v12 = v19 + 32;
  uint64_t v13 = *a1;
  uint64_t v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v20;
  }
  else
  {
    do
    {
      char v15 = *(v14 - 32);
      v14 -= 32;
      *(v11 - 32) = v15;
      v11 -= 32;
      long long v16 = *(_OWORD *)(v14 + 8);
      *((void *)v11 + 3) = *((void *)v14 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0;
      *((void *)v14 + 1) = 0;
    }
    while (v14 != v13);
    unint64_t v17 = *a1;
    uint64_t v14 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v20;
    if (v14 != v17)
    {
      do
      {
        if (*(v14 - 1) < 0) {
          operator delete(*((void **)v14 - 3));
        }
        v14 -= 32;
      }
      while (v14 != v17);
      uint64_t v14 = v17;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v19 + 32;
}

void sub_DE2D48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DE2D5C(int a1, unsigned char *a2, char *a3, char *__s)
{
  char v6 = *a3;
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v15 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v8);
    *((unsigned char *)p_dst + v8) = 0;
    *a2 = v6;
    uint64_t v10 = a2 + 8;
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v15) = v7;
  p_dst = &__dst;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = v6;
  uint64_t v10 = a2 + 8;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)uint64_t v10 = __dst;
    *((void *)v10 + 2) = v15;
    return;
  }
LABEL_10:
  uint64_t v13 = (void *)__dst;
  sub_4200(v10, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v13);
}

void sub_DE2E7C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_DE2E90(char **a1, char *a2, char *a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v19 = &v10[32 * v4];
  uint64_t v20 = &v10[32 * v9];
  sub_DE3018(a1 + 16, v19, a2, a3);
  uint64_t v11 = v19;
  uint64_t v12 = v19 + 32;
  uint64_t v13 = *a1;
  uint64_t v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v20;
  }
  else
  {
    do
    {
      char v15 = *(v14 - 32);
      v14 -= 32;
      *(v11 - 32) = v15;
      v11 -= 32;
      long long v16 = *(_OWORD *)(v14 + 8);
      *((void *)v11 + 3) = *((void *)v14 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0;
      *((void *)v14 + 1) = 0;
    }
    while (v14 != v13);
    unint64_t v17 = *a1;
    uint64_t v14 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v20;
    if (v14 != v17)
    {
      do
      {
        if (*(v14 - 1) < 0) {
          operator delete(*((void **)v14 - 3));
        }
        v14 -= 32;
      }
      while (v14 != v17);
      uint64_t v14 = v17;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v19 + 32;
}

void sub_DE3004(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DE3018(int a1, unsigned char *a2, char *a3, char *__s)
{
  char v6 = *a3;
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v15 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v8);
    *((unsigned char *)p_dst + v8) = 0;
    *a2 = v6;
    uint64_t v10 = a2 + 8;
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v15) = v7;
  p_dst = &__dst;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = v6;
  uint64_t v10 = a2 + 8;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)uint64_t v10 = __dst;
    *((void *)v10 + 2) = v15;
    return;
  }
LABEL_10:
  uint64_t v13 = (void *)__dst;
  sub_4200(v10, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v13);
}

void sub_DE3138(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_DE314C(char **a1, char *a2, char *a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v19 = &v10[32 * v4];
  uint64_t v20 = &v10[32 * v9];
  sub_DE32D4(a1 + 16, v19, a2, a3);
  uint64_t v11 = v19;
  uint64_t v12 = v19 + 32;
  uint64_t v13 = *a1;
  uint64_t v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v20;
  }
  else
  {
    do
    {
      char v15 = *(v14 - 32);
      v14 -= 32;
      *(v11 - 32) = v15;
      v11 -= 32;
      long long v16 = *(_OWORD *)(v14 + 8);
      *((void *)v11 + 3) = *((void *)v14 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0;
      *((void *)v14 + 1) = 0;
    }
    while (v14 != v13);
    unint64_t v17 = *a1;
    uint64_t v14 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v20;
    if (v14 != v17)
    {
      do
      {
        if (*(v14 - 1) < 0) {
          operator delete(*((void **)v14 - 3));
        }
        v14 -= 32;
      }
      while (v14 != v17);
      uint64_t v14 = v17;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v19 + 32;
}

void sub_DE32C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DE32D4(int a1, unsigned char *a2, char *a3, char *__s)
{
  char v6 = *a3;
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v15 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v8);
    *((unsigned char *)p_dst + v8) = 0;
    *a2 = v6;
    uint64_t v10 = a2 + 8;
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v15) = v7;
  p_dst = &__dst;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = v6;
  uint64_t v10 = a2 + 8;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)uint64_t v10 = __dst;
    *((void *)v10 + 2) = v15;
    return;
  }
LABEL_10:
  uint64_t v13 = (void *)__dst;
  sub_4200(v10, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v13);
}

void sub_DE33F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_DE3408(char **a1, char *a2, char *a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v19 = &v10[32 * v4];
  uint64_t v20 = &v10[32 * v9];
  sub_DE3590(a1 + 16, v19, a2, a3);
  uint64_t v11 = v19;
  uint64_t v12 = v19 + 32;
  uint64_t v13 = *a1;
  uint64_t v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v20;
  }
  else
  {
    do
    {
      char v15 = *(v14 - 32);
      v14 -= 32;
      *(v11 - 32) = v15;
      v11 -= 32;
      long long v16 = *(_OWORD *)(v14 + 8);
      *((void *)v11 + 3) = *((void *)v14 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0;
      *((void *)v14 + 1) = 0;
    }
    while (v14 != v13);
    unint64_t v17 = *a1;
    uint64_t v14 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v20;
    if (v14 != v17)
    {
      do
      {
        if (*(v14 - 1) < 0) {
          operator delete(*((void **)v14 - 3));
        }
        v14 -= 32;
      }
      while (v14 != v17);
      uint64_t v14 = v17;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v19 + 32;
}

void sub_DE357C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DE3590(int a1, unsigned char *a2, char *a3, char *__s)
{
  char v6 = *a3;
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v15 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v8);
    *((unsigned char *)p_dst + v8) = 0;
    *a2 = v6;
    uint64_t v10 = a2 + 8;
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v15) = v7;
  p_dst = &__dst;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = v6;
  uint64_t v10 = a2 + 8;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)uint64_t v10 = __dst;
    *((void *)v10 + 2) = v15;
    return;
  }
LABEL_10:
  uint64_t v13 = (void *)__dst;
  sub_4200(v10, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v13);
}

void sub_DE36B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_DE36C4(char **a1, char *a2, char *a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v19 = &v10[32 * v4];
  uint64_t v20 = &v10[32 * v9];
  sub_DE384C(a1 + 16, v19, a2, a3);
  uint64_t v11 = v19;
  uint64_t v12 = v19 + 32;
  uint64_t v13 = *a1;
  uint64_t v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v20;
  }
  else
  {
    do
    {
      char v15 = *(v14 - 32);
      v14 -= 32;
      *(v11 - 32) = v15;
      v11 -= 32;
      long long v16 = *(_OWORD *)(v14 + 8);
      *((void *)v11 + 3) = *((void *)v14 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0;
      *((void *)v14 + 1) = 0;
    }
    while (v14 != v13);
    unint64_t v17 = *a1;
    uint64_t v14 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v20;
    if (v14 != v17)
    {
      do
      {
        if (*(v14 - 1) < 0) {
          operator delete(*((void **)v14 - 3));
        }
        v14 -= 32;
      }
      while (v14 != v17);
      uint64_t v14 = v17;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v19 + 32;
}

void sub_DE3838(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DE384C(int a1, unsigned char *a2, char *a3, char *__s)
{
  char v6 = *a3;
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v15 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v8);
    *((unsigned char *)p_dst + v8) = 0;
    *a2 = v6;
    uint64_t v10 = a2 + 8;
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v15) = v7;
  p_dst = &__dst;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = v6;
  uint64_t v10 = a2 + 8;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)uint64_t v10 = __dst;
    *((void *)v10 + 2) = v15;
    return;
  }
LABEL_10:
  uint64_t v13 = (void *)__dst;
  sub_4200(v10, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v13);
}

void sub_DE396C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_DE3980(char **a1, char *a2, char *a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v19 = &v10[32 * v4];
  uint64_t v20 = &v10[32 * v9];
  sub_DE3B08(a1 + 16, v19, a2, a3);
  uint64_t v11 = v19;
  uint64_t v12 = v19 + 32;
  uint64_t v13 = *a1;
  uint64_t v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v20;
  }
  else
  {
    do
    {
      char v15 = *(v14 - 32);
      v14 -= 32;
      *(v11 - 32) = v15;
      v11 -= 32;
      long long v16 = *(_OWORD *)(v14 + 8);
      *((void *)v11 + 3) = *((void *)v14 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0;
      *((void *)v14 + 1) = 0;
    }
    while (v14 != v13);
    unint64_t v17 = *a1;
    uint64_t v14 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v20;
    if (v14 != v17)
    {
      do
      {
        if (*(v14 - 1) < 0) {
          operator delete(*((void **)v14 - 3));
        }
        v14 -= 32;
      }
      while (v14 != v17);
      uint64_t v14 = v17;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v19 + 32;
}

void sub_DE3AF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DE3B08(int a1, unsigned char *a2, char *a3, char *__s)
{
  char v6 = *a3;
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v15 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v8);
    *((unsigned char *)p_dst + v8) = 0;
    *a2 = v6;
    uint64_t v10 = a2 + 8;
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v15) = v7;
  p_dst = &__dst;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = v6;
  uint64_t v10 = a2 + 8;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)uint64_t v10 = __dst;
    *((void *)v10 + 2) = v15;
    return;
  }
LABEL_10:
  uint64_t v13 = (void *)__dst;
  sub_4200(v10, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v13);
}

void sub_DE3C28(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char **sub_DE3C3C(void *a1, void *a2, char **a3)
{
  unint64_t v9 = a3;
  if (a1 != a2)
  {
    uint64_t v4 = a1;
    do
    {
      sub_13E9AE4(v8, *v4);
      sub_DC5B9C((uint64_t)v8, &v10);
      int v5 = sub_51D60((unsigned __int8 *)&v10);
      sub_1473CF4(v8);
      if (v5)
      {
        sub_13E9AE4(v7, *v4);
        sub_DC5B9C((uint64_t)v7, &v10);
        sub_DE3D1C(&v9, &v10);
        sub_1473CF4(v7);
      }
      ++v4;
    }
    while (v4 != a2);
    return v9;
  }
  return a3;
}

void sub_DE3CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_DE3D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_1473CF4(va);
  _Unwind_Resume(a1);
}

char ***sub_DE3D1C(char ***a1, long long *a2)
{
  uint64_t v4 = *a1;
  char v6 = (*a1)[1];
  unint64_t v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    unint64_t v9 = *v4;
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *v4) >> 3);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (void)v9) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 > 0xAAAAAAAAAAAAAAALL) {
        sub_188D718();
      }
      uint64_t v14 = (char *)operator new(24 * v13);
    }
    else
    {
      uint64_t v14 = 0;
    }
    unint64_t v15 = &v14[24 * v10];
    *(_OWORD *)unint64_t v15 = *a2;
    *((void *)v15 + 2) = *((void *)a2 + 2);
    size_t v8 = v15 + 24;
    if (v6 != v9)
    {
      do
      {
        long long v16 = *(_OWORD *)(v6 - 24);
        *((void *)v15 - 1) = *((void *)v6 - 1);
        *(_OWORD *)(v15 - 24) = v16;
        v15 -= 24;
        v6 -= 24;
      }
      while (v6 != v9);
      char v6 = *v4;
    }
    *uint64_t v4 = v15;
    v4[1] = v8;
    v4[2] = &v14[24 * v13];
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    long long v7 = *a2;
    *((void *)v6 + 2) = *((void *)a2 + 2);
    *(_OWORD *)char v6 = v7;
    size_t v8 = v6 + 24;
  }
  v4[1] = v8;
  return a1;
}

void *sub_DE3E6C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v7 = (sub_52060((uint64_t)a2) + 0x388152A534) ^ 0xDEADBEEFLL;
  unint64_t v8 = (sub_52058((uint64_t)a2) + (v7 << 6) + (v7 >> 2) + 2654435769u) ^ v7;
  unint64_t v9 = (0x2127599BF4325C37 * (v8 ^ (v8 >> 23))) ^ ((0x2127599BF4325C37 * (v8 ^ (v8 >> 23))) >> 47);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = (0x2127599BF4325C37 * (v8 ^ (v8 >> 23))) ^ ((0x2127599BF4325C37 * (v8 ^ (v8 >> 23))) >> 47);
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = v9 & (v10 - 1);
    }
    unint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      unint64_t v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v15 = *((void *)v13 + 1);
            if (v15 == v9)
            {
              if (sub_52068((unsigned __int8 *)v13 + 16, a2)) {
                return v13;
              }
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            unint64_t v13 = *(void **)v13;
            if (!v13) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v9)
          {
            if (sub_52068((unsigned __int8 *)v13 + 16, a2)) {
              return v13;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v3) {
              break;
            }
          }
          unint64_t v13 = *(void **)v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  unint64_t v13 = operator new(0x28uLL);
  *(void *)unint64_t v13 = 0;
  *((void *)v13 + 1) = v9;
  *((_OWORD *)v13 + 1) = *(_OWORD *)a3;
  *((void *)v13 + 4) = *(void *)(a3 + 16);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (v10 && (float)(v17 * (float)v10) >= v16)
  {
    uint64_t v18 = *(void *)a1;
    uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
    if (v19)
    {
LABEL_26:
      *(void *)unint64_t v13 = *v19;
LABEL_61:
      *uint64_t v19 = v13;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v20 = 1;
    if (v10 >= 3) {
      BOOL v20 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v10);
    unint64_t v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22) {
      size_t prime = v22;
    }
    else {
      size_t prime = v21;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v24 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v24) {
      goto LABEL_37;
    }
    if (prime < *(void *)&v24)
    {
      unint64_t v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v24 < 3uLL || (uint8x8_t v26 = (uint8x8_t)vcnt_s8(v24), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        unint64_t v25 = std::__next_prime(v25);
      }
      else
      {
        uint64_t v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2) {
          unint64_t v25 = v27;
        }
      }
      if (prime <= v25) {
        size_t prime = v25;
      }
      if (prime < *(void *)&v24) {
LABEL_37:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v28 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v3 = v9 % v10;
        uint64_t v18 = *(void *)a1;
        uint64_t v19 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v19) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v9;
        uint64_t v18 = *(void *)a1;
        uint64_t v19 = *(void **)(*(void *)a1 + 8 * v9);
        if (v19) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v28 & v9;
      uint64_t v18 = *(void *)a1;
      uint64_t v19 = *(void **)(*(void *)a1 + 8 * (v28 & v9));
      if (v19) {
        goto LABEL_26;
      }
    }
  }
  *(void *)unint64_t v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*(void *)v13)
  {
    unint64_t v29 = *(void *)(*(void *)v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v29 >= v10) {
        v29 %= v10;
      }
    }
    else
    {
      v29 &= v10 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v29);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_DE41E0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char **sub_DE41F4(void *a1, void *a2, char **a3)
{
  unint64_t v9 = a3;
  if (a1 != a2)
  {
    uint64_t v4 = a1;
    do
    {
      sub_13E9AE4(v8, *v4);
      sub_DC5B9C((uint64_t)v8, &v10);
      int v5 = sub_51D60((unsigned __int8 *)&v10);
      sub_1473CF4(v8);
      if (v5)
      {
        sub_13E9AE4(v7, *v4);
        sub_DC5B9C((uint64_t)v7, &v10);
        sub_DE3D1C(&v9, &v10);
        sub_1473CF4(v7);
      }
      ++v4;
    }
    while (v4 != a2);
    return v9;
  }
  return a3;
}

void sub_DE42AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_DE42C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_1473CF4(va);
  _Unwind_Resume(a1);
}

void sub_DE42D4()
{
  unk_25EB76F = 16641;
  word_25EB758 = 65;
  byte_25EB787 = 1;
  byte_25EB771 = 0;
}

void sub_DE42FC(uint64_t a1, uint64_t a2, double a3)
{
  *(_DWORD *)(a2 + 16) |= 1u;
  uint64_t v5 = *(void *)(a2 + 24);
  if (!v5)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    unint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
    if (v6) {
      unint64_t v7 = (void *)*v7;
    }
    uint64_t v5 = sub_15C1918((uint64_t)v7);
    *(void *)(a2 + 24) = v5;
  }
  LODWORD(a3) = *(_DWORD *)(a1 + 4);
  long double v8 = exp((double)*(unint64_t *)&a3 * -6.28318531 / 4294967300.0 + 3.14159265);
  long double v9 = atan((v8 + -1.0 / v8) * 0.5);
  HIDWORD(v10) = 1078765020;
  int v11 = *(_DWORD *)(v5 + 40);
  *(_DWORD *)(v5 + 40) = v11 | 1;
  LODWORD(v10) = *(_DWORD *)a1;
  *(_DWORD *)(v5 + 40) = v11 | 3;
  *(long double *)(v5 + 48) = v9 * 57.2957795;
  *(double *)(v5 + 56) = (double)v10 * 360.0 / 4294967300.0 + -180.0;
  unint64_t v13 = *(int32x4_t **)(a1 + 72);
  unint64_t v12 = *(int32x4_t **)(a1 + 80);
  if (v13 == v12)
  {
    int v20 = 0;
    int v21 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 36) = 0;
    *(_DWORD *)(a2 + 40) = 0;
    *(_DWORD *)(a2 + 52) = 0;
    goto LABEL_104;
  }
  unint64_t v14 = (char *)v12 - (char *)v13 - 4;
  uint64_t v15 = (v14 >> 2) + 1;
  if (v14 < 0x1C)
  {
    unsigned __int8 v16 = 0;
    unsigned __int8 v17 = 0;
    unsigned __int8 v18 = 0;
    uint64_t v19 = *(int32x4_t **)(a1 + 72);
    goto LABEL_20;
  }
  if (v14 < 0x7C)
  {
    unsigned __int8 v16 = 0;
    unsigned __int8 v17 = 0;
    unsigned __int8 v18 = 0;
    uint64_t v22 = 0;
    goto LABEL_15;
  }
  int8x16_t v23 = 0uLL;
  uint64_t v22 = v15 & 0x7FFFFFFFFFFFFFE0;
  v24.i64[0] = 0x400000004;
  v24.i64[1] = 0x400000004;
  unint64_t v25 = v13 + 4;
  v26.i64[0] = 0x500000005;
  v26.i64[1] = 0x500000005;
  v27.i64[0] = 0x300000003;
  v27.i64[1] = 0x300000003;
  uint64_t v28 = v15 & 0x7FFFFFFFFFFFFFE0;
  int8x16_t v29 = 0uLL;
  int8x16_t v30 = 0uLL;
  int8x16_t v31 = 0uLL;
  int8x16_t v32 = 0uLL;
  int8x16_t v33 = 0uLL;
  do
  {
    int32x4_t v35 = v25[-2];
    int32x4_t v34 = v25[-1];
    int32x4_t v37 = v25[-4];
    int32x4_t v36 = v25[-3];
    int32x4_t v39 = v25[2];
    int32x4_t v38 = v25[3];
    int32x4_t v41 = *v25;
    int32x4_t v40 = v25[1];
    v25 += 8;
    int8x16_t v32 = vorrq_s8(v32, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v37, v24), (int16x8_t)vceqq_s32(v36, v24)), (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v35, v24), (int16x8_t)vceqq_s32(v34, v24))));
    int8x16_t v33 = vorrq_s8(v33, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v41, v24), (int16x8_t)vceqq_s32(v40, v24)), (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v39, v24), (int16x8_t)vceqq_s32(v38, v24))));
    int8x16_t v30 = vorrq_s8(v30, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v37, v26), (int16x8_t)vceqq_s32(v36, v26)), (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v35, v26), (int16x8_t)vceqq_s32(v34, v26))));
    int8x16_t v31 = vorrq_s8(v31, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v41, v26), (int16x8_t)vceqq_s32(v40, v26)), (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v39, v26), (int16x8_t)vceqq_s32(v38, v26))));
    int8x16_t v23 = vorrq_s8(v23, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v37, v27), (int16x8_t)vceqq_s32(v36, v27)), (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v35, v27), (int16x8_t)vceqq_s32(v34, v27))));
    int8x16_t v29 = vorrq_s8(v29, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v41, v27), (int16x8_t)vceqq_s32(v40, v27)), (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v39, v27), (int16x8_t)vceqq_s32(v38, v27))));
    v28 -= 32;
  }
  while (v28);
  unsigned __int8 v18 = vmaxvq_u8((uint8x16_t)vcltzq_s8(vshlq_n_s8(vorrq_s8(v33, v32), 7uLL))) & 1;
  unsigned __int8 v17 = vmaxvq_u8((uint8x16_t)vcltzq_s8(vshlq_n_s8(vorrq_s8(v31, v30), 7uLL))) & 1;
  unsigned __int8 v16 = vmaxvq_u8((uint8x16_t)vcltzq_s8(vshlq_n_s8(vorrq_s8(v29, v23), 7uLL))) & 1;
  if (v15 == v22) {
    goto LABEL_21;
  }
  if ((v15 & 0x18) != 0)
  {
LABEL_15:
    int8x8_t v42 = (int8x8_t)v16;
    int8x8_t v43 = (int8x8_t)v17;
    int8x8_t v44 = (int8x8_t)v18;
    uint64_t v19 = (int32x4_t *)((char *)v13 + 4 * (v15 & 0x7FFFFFFFFFFFFFF8));
    uint64_t v45 = (int32x4_t *)((char *)v13 + 4 * v22);
    uint64_t v46 = v22 - (v15 & 0x7FFFFFFFFFFFFFF8);
    v47.i64[0] = 0x400000004;
    v47.i64[1] = 0x400000004;
    v48.i64[0] = 0x500000005;
    v48.i64[1] = 0x500000005;
    v49.i64[0] = 0x300000003;
    v49.i64[1] = 0x300000003;
    do
    {
      int32x4_t v51 = *v45;
      int32x4_t v50 = v45[1];
      v45 += 2;
      int8x8_t v44 = vorr_s8(v44, vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_s32(v51, v47), (int16x8_t)vceqq_s32(v50, v47))));
      int8x8_t v43 = vorr_s8(v43, vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_s32(v51, v48), (int16x8_t)vceqq_s32(v50, v48))));
      int8x8_t v42 = vorr_s8(v42, vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_s32(v51, v49), (int16x8_t)vceqq_s32(v50, v49))));
      v46 += 8;
    }
    while (v46);
    unsigned __int8 v18 = vmaxv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(v44, 7uLL))) & 1;
    unsigned __int8 v17 = vmaxv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(v43, 7uLL))) & 1;
    unsigned __int8 v16 = vmaxv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(v42, 7uLL))) & 1;
    if (v15 == (v15 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  uint64_t v19 = (int32x4_t *)((char *)v13 + 4 * v22);
  do
  {
LABEL_20:
    int v52 = v19->i32[0];
    uint64_t v19 = (int32x4_t *)((char *)v19 + 4);
    v18 |= v52 == 4;
    v17 |= v52 == 5;
    v16 |= v52 == 3;
  }
  while (v19 != v12);
LABEL_21:
  if ((v17 & 1 & v18) != 0) {
    int v53 = 3;
  }
  else {
    int v53 = 1;
  }
  if (v17)
  {
    if ((v18 & 1) == 0) {
      int v53 = 2;
    }
  }
  else
  {
    if (v16) {
      int v54 = 4;
    }
    else {
      int v54 = 0;
    }
    if ((v18 & 1) == 0) {
      int v53 = v54;
    }
  }
  int v21 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 40) = v53;
  if (v14 < 0x1C)
  {
    unsigned __int8 v55 = 0;
    unsigned __int8 v56 = 0;
    unsigned __int8 v57 = 0;
    v58 = v13;
    goto LABEL_45;
  }
  if (v14 < 0x7C)
  {
    unsigned __int8 v55 = 0;
    unsigned __int8 v56 = 0;
    unsigned __int8 v57 = 0;
    uint64_t v59 = 0;
    goto LABEL_40;
  }
  int8x16_t v60 = 0uLL;
  uint64_t v59 = v15 & 0x7FFFFFFFFFFFFFE0;
  v61.i64[0] = 0x100000001;
  v61.i64[1] = 0x100000001;
  long long v62 = v13 + 4;
  v63.i64[0] = 0x200000002;
  v63.i64[1] = 0x200000002;
  uint64_t v64 = v15 & 0x7FFFFFFFFFFFFFE0;
  int8x16_t v65 = 0uLL;
  int8x16_t v66 = 0uLL;
  int8x16_t v67 = 0uLL;
  int8x16_t v68 = 0uLL;
  int8x16_t v69 = 0uLL;
  do
  {
    int32x4_t v71 = v62[-2];
    int32x4_t v70 = v62[-1];
    int32x4_t v73 = v62[-4];
    int32x4_t v72 = v62[-3];
    int32x4_t v75 = v62[2];
    int32x4_t v74 = v62[3];
    int32x4_t v77 = *v62;
    int32x4_t v76 = v62[1];
    v62 += 8;
    int8x16_t v68 = vorrq_s8(v68, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v73, v61), (int16x8_t)vceqq_s32(v72, v61)), (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v71, v61), (int16x8_t)vceqq_s32(v70, v61))));
    int8x16_t v69 = vorrq_s8(v69, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v77, v61), (int16x8_t)vceqq_s32(v76, v61)), (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v75, v61), (int16x8_t)vceqq_s32(v74, v61))));
    int8x16_t v66 = vorrq_s8(v66, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v73, v63), (int16x8_t)vceqq_s32(v72, v63)), (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v71, v63), (int16x8_t)vceqq_s32(v70, v63))));
    int8x16_t v67 = vorrq_s8(v67, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v77, v63), (int16x8_t)vceqq_s32(v76, v63)), (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v75, v63), (int16x8_t)vceqq_s32(v74, v63))));
    int8x16_t v60 = vorrq_s8(v60, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v73), (int16x8_t)vceqzq_s32(v72)), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v71), (int16x8_t)vceqzq_s32(v70))));
    int8x16_t v65 = vorrq_s8(v65, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v77), (int16x8_t)vceqzq_s32(v76)), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v75), (int16x8_t)vceqzq_s32(v74))));
    v64 -= 32;
  }
  while (v64);
  unsigned __int8 v57 = vmaxvq_u8((uint8x16_t)vcltzq_s8(vshlq_n_s8(vorrq_s8(v69, v68), 7uLL))) & 1;
  unsigned __int8 v56 = vmaxvq_u8((uint8x16_t)vcltzq_s8(vshlq_n_s8(vorrq_s8(v67, v66), 7uLL))) & 1;
  unsigned __int8 v55 = vmaxvq_u8((uint8x16_t)vcltzq_s8(vshlq_n_s8(vorrq_s8(v65, v60), 7uLL))) & 1;
  if (v15 == v59) {
    goto LABEL_46;
  }
  if ((v15 & 0x18) != 0)
  {
LABEL_40:
    v58 = (int32x4_t *)((char *)v13 + 4 * (v15 & 0x7FFFFFFFFFFFFFF8));
    int8x8_t v78 = (int8x8_t)v55;
    int8x8_t v79 = (int8x8_t)v56;
    int8x8_t v80 = (int8x8_t)v57;
    v81 = (int32x4_t *)((char *)v13 + 4 * v59);
    uint64_t v82 = v59 - (v15 & 0x7FFFFFFFFFFFFFF8);
    v83.i64[0] = 0x100000001;
    v83.i64[1] = 0x100000001;
    v84.i64[0] = 0x200000002;
    v84.i64[1] = 0x200000002;
    do
    {
      int32x4_t v86 = *v81;
      int32x4_t v85 = v81[1];
      v81 += 2;
      int8x8_t v80 = vorr_s8(v80, vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_s32(v86, v83), (int16x8_t)vceqq_s32(v85, v83))));
      int8x8_t v79 = vorr_s8(v79, vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_s32(v86, v84), (int16x8_t)vceqq_s32(v85, v84))));
      int8x8_t v78 = vorr_s8(v78, vmovn_s16(vuzp1q_s16((int16x8_t)vceqzq_s32(v86), (int16x8_t)vceqzq_s32(v85))));
      v82 += 8;
    }
    while (v82);
    unsigned __int8 v57 = vmaxv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(v80, 7uLL))) & 1;
    unsigned __int8 v56 = vmaxv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(v79, 7uLL))) & 1;
    unsigned __int8 v55 = vmaxv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(v78, 7uLL))) & 1;
    if (v15 == (v15 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  v58 = (int32x4_t *)((char *)v13 + 4 * v59);
  do
  {
LABEL_45:
    int v87 = v58->i32[0];
    v58 = (int32x4_t *)((char *)v58 + 4);
    v57 |= v87 == 1;
    v56 |= v87 == 2;
    v55 |= v87 == 0;
  }
  while (v58 != v12);
LABEL_46:
  if ((v56 & 1 & v57) != 0) {
    int v88 = 3;
  }
  else {
    int v88 = 1;
  }
  if (v56)
  {
    if ((v57 & 1) == 0) {
      int v88 = 2;
    }
  }
  else
  {
    if (v55) {
      int v89 = 4;
    }
    else {
      int v89 = 0;
    }
    if ((v57 & 1) == 0) {
      int v88 = v89;
    }
  }
  *(_DWORD *)(a2 + 36) = v88;
  if (v14 < 0x1C)
  {
    unsigned __int8 v90 = 0;
    unsigned __int8 v91 = 0;
    unsigned __int8 v92 = 0;
    v93 = v13;
    goto LABEL_70;
  }
  if (v14 < 0x7C)
  {
    unsigned __int8 v90 = 0;
    unsigned __int8 v91 = 0;
    unsigned __int8 v92 = 0;
    uint64_t v94 = 0;
    goto LABEL_65;
  }
  int8x16_t v95 = 0uLL;
  uint64_t v94 = v15 & 0x7FFFFFFFFFFFFFE0;
  v96.i64[0] = 0x700000007;
  v96.i64[1] = 0x700000007;
  v97 = v13 + 4;
  v98.i64[0] = 0x800000008;
  v98.i64[1] = 0x800000008;
  v99.i64[0] = 0x600000006;
  v99.i64[1] = 0x600000006;
  uint64_t v100 = v15 & 0x7FFFFFFFFFFFFFE0;
  int8x16_t v101 = 0uLL;
  int8x16_t v102 = 0uLL;
  int8x16_t v103 = 0uLL;
  int8x16_t v104 = 0uLL;
  int8x16_t v105 = 0uLL;
  do
  {
    int32x4_t v107 = v97[-2];
    int32x4_t v106 = v97[-1];
    int32x4_t v109 = v97[-4];
    int32x4_t v108 = v97[-3];
    int32x4_t v111 = v97[2];
    int32x4_t v110 = v97[3];
    int32x4_t v113 = *v97;
    int32x4_t v112 = v97[1];
    v97 += 8;
    int8x16_t v104 = vorrq_s8(v104, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v109, v96), (int16x8_t)vceqq_s32(v108, v96)), (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v107, v96), (int16x8_t)vceqq_s32(v106, v96))));
    int8x16_t v105 = vorrq_s8(v105, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v113, v96), (int16x8_t)vceqq_s32(v112, v96)), (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v111, v96), (int16x8_t)vceqq_s32(v110, v96))));
    int8x16_t v102 = vorrq_s8(v102, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v109, v98), (int16x8_t)vceqq_s32(v108, v98)), (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v107, v98), (int16x8_t)vceqq_s32(v106, v98))));
    int8x16_t v103 = vorrq_s8(v103, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v113, v98), (int16x8_t)vceqq_s32(v112, v98)), (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v111, v98), (int16x8_t)vceqq_s32(v110, v98))));
    int8x16_t v95 = vorrq_s8(v95, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v109, v99), (int16x8_t)vceqq_s32(v108, v99)), (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v107, v99), (int16x8_t)vceqq_s32(v106, v99))));
    int8x16_t v101 = vorrq_s8(v101, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v113, v99), (int16x8_t)vceqq_s32(v112, v99)), (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v111, v99), (int16x8_t)vceqq_s32(v110, v99))));
    v100 -= 32;
  }
  while (v100);
  unsigned __int8 v92 = vmaxvq_u8((uint8x16_t)vcltzq_s8(vshlq_n_s8(vorrq_s8(v105, v104), 7uLL))) & 1;
  unsigned __int8 v91 = vmaxvq_u8((uint8x16_t)vcltzq_s8(vshlq_n_s8(vorrq_s8(v103, v102), 7uLL))) & 1;
  unsigned __int8 v90 = vmaxvq_u8((uint8x16_t)vcltzq_s8(vshlq_n_s8(vorrq_s8(v101, v95), 7uLL))) & 1;
  if (v15 == v94) {
    goto LABEL_71;
  }
  if ((v15 & 0x18) != 0)
  {
LABEL_65:
    int8x8_t v114 = (int8x8_t)v90;
    int8x8_t v115 = (int8x8_t)v91;
    int8x8_t v116 = (int8x8_t)v92;
    v93 = (int32x4_t *)((char *)v13 + 4 * (v15 & 0x7FFFFFFFFFFFFFF8));
    v117 = (int32x4_t *)((char *)v13 + 4 * v94);
    uint64_t v118 = v94 - (v15 & 0x7FFFFFFFFFFFFFF8);
    v119.i64[0] = 0x700000007;
    v119.i64[1] = 0x700000007;
    v120.i64[0] = 0x800000008;
    v120.i64[1] = 0x800000008;
    v121.i64[0] = 0x600000006;
    v121.i64[1] = 0x600000006;
    do
    {
      int32x4_t v123 = *v117;
      int32x4_t v122 = v117[1];
      v117 += 2;
      int8x8_t v116 = vorr_s8(v116, vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_s32(v123, v119), (int16x8_t)vceqq_s32(v122, v119))));
      int8x8_t v115 = vorr_s8(v115, vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_s32(v123, v120), (int16x8_t)vceqq_s32(v122, v120))));
      int8x8_t v114 = vorr_s8(v114, vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_s32(v123, v121), (int16x8_t)vceqq_s32(v122, v121))));
      v118 += 8;
    }
    while (v118);
    unsigned __int8 v92 = vmaxv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(v116, 7uLL))) & 1;
    unsigned __int8 v91 = vmaxv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(v115, 7uLL))) & 1;
    unsigned __int8 v90 = vmaxv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(v114, 7uLL))) & 1;
    if (v15 == (v15 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_71;
    }
    goto LABEL_70;
  }
  v93 = (int32x4_t *)((char *)v13 + 4 * v94);
  do
  {
LABEL_70:
    int v124 = v93->i32[0];
    v93 = (int32x4_t *)((char *)v93 + 4);
    v92 |= v124 == 7;
    v91 |= v124 == 8;
    v90 |= v124 == 6;
  }
  while (v93 != v12);
LABEL_71:
  if ((v91 & 1 & v92) != 0) {
    int v125 = 3;
  }
  else {
    int v125 = 1;
  }
  if (v91)
  {
    if ((v92 & 1) == 0) {
      int v125 = 2;
    }
  }
  else
  {
    if (v90) {
      int v126 = 4;
    }
    else {
      int v126 = 0;
    }
    if ((v92 & 1) == 0) {
      int v125 = v126;
    }
  }
  *(_DWORD *)(a2 + 52) = v125;
  if (v14 < 0x1C)
  {
    unsigned __int8 v127 = 0;
    unsigned __int8 v128 = 0;
    v129 = v13;
    goto LABEL_95;
  }
  if (v14 < 0x7C)
  {
    unsigned __int8 v127 = 0;
    unsigned __int8 v128 = 0;
    uint64_t v130 = 0;
    goto LABEL_90;
  }
  uint64_t v130 = v15 & 0x7FFFFFFFFFFFFFE0;
  v131 = v13 + 4;
  int8x16_t v132 = 0uLL;
  v133.i64[0] = 0x900000009;
  v133.i64[1] = 0x900000009;
  v134.i64[0] = 0xA0000000ALL;
  v134.i64[1] = 0xA0000000ALL;
  uint64_t v135 = v15 & 0x7FFFFFFFFFFFFFE0;
  int8x16_t v136 = 0uLL;
  int8x16_t v137 = 0uLL;
  int8x16_t v138 = 0uLL;
  do
  {
    int32x4_t v140 = v131[-2];
    int32x4_t v139 = v131[-1];
    int32x4_t v142 = v131[-4];
    int32x4_t v141 = v131[-3];
    int32x4_t v144 = v131[2];
    int32x4_t v143 = v131[3];
    int32x4_t v146 = *v131;
    int32x4_t v145 = v131[1];
    v131 += 8;
    int8x16_t v137 = vorrq_s8(v137, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v142, v133), (int16x8_t)vceqq_s32(v141, v133)), (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v140, v133), (int16x8_t)vceqq_s32(v139, v133))));
    int8x16_t v138 = vorrq_s8(v138, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v146, v133), (int16x8_t)vceqq_s32(v145, v133)), (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v144, v133), (int16x8_t)vceqq_s32(v143, v133))));
    int8x16_t v132 = vorrq_s8(v132, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v142, v134), (int16x8_t)vceqq_s32(v141, v134)), (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v140, v134), (int16x8_t)vceqq_s32(v139, v134))));
    int8x16_t v136 = vorrq_s8(v136, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v146, v134), (int16x8_t)vceqq_s32(v145, v134)), (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v144, v134), (int16x8_t)vceqq_s32(v143, v134))));
    v135 -= 32;
  }
  while (v135);
  unsigned __int8 v128 = vmaxvq_u8((uint8x16_t)vcltzq_s8(vshlq_n_s8(vorrq_s8(v138, v137), 7uLL))) & 1;
  unsigned __int8 v127 = vmaxvq_u8((uint8x16_t)vcltzq_s8(vshlq_n_s8(vorrq_s8(v136, v132), 7uLL))) & 1;
  if (v15 == v130) {
    goto LABEL_96;
  }
  if ((v15 & 0x18) != 0)
  {
LABEL_90:
    v129 = (int32x4_t *)((char *)v13 + 4 * (v15 & 0x7FFFFFFFFFFFFFF8));
    int8x8_t v147 = (int8x8_t)v127;
    int8x8_t v148 = (int8x8_t)v128;
    v149 = (int32x4_t *)((char *)v13 + 4 * v130);
    uint64_t v150 = v130 - (v15 & 0x7FFFFFFFFFFFFFF8);
    v151.i64[0] = 0x900000009;
    v151.i64[1] = 0x900000009;
    v152.i64[0] = 0xA0000000ALL;
    v152.i64[1] = 0xA0000000ALL;
    do
    {
      int32x4_t v154 = *v149;
      int32x4_t v153 = v149[1];
      v149 += 2;
      int8x8_t v148 = vorr_s8(v148, vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_s32(v154, v151), (int16x8_t)vceqq_s32(v153, v151))));
      int8x8_t v147 = vorr_s8(v147, vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_s32(v154, v152), (int16x8_t)vceqq_s32(v153, v152))));
      v150 += 8;
    }
    while (v150);
    unsigned __int8 v128 = vmaxv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(v148, 7uLL))) & 1;
    unsigned __int8 v127 = vmaxv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(v147, 7uLL))) & 1;
    if (v15 == (v15 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_96;
    }
    goto LABEL_95;
  }
  v129 = (int32x4_t *)((char *)v13 + 4 * v130);
  do
  {
LABEL_95:
    int v155 = v129->i32[0];
    v129 = (int32x4_t *)((char *)v129 + 4);
    v128 |= v155 == 9;
    v127 |= v155 == 10;
  }
  while (v129 != v12);
LABEL_96:
  if ((v128 & 1 & v127) != 0) {
    int v20 = 3;
  }
  else {
    int v20 = 1;
  }
  if (v127) {
    int v156 = 2;
  }
  else {
    int v156 = 0;
  }
  if ((v128 & 1) == 0) {
    int v20 = v156;
  }
LABEL_104:
  *(_DWORD *)(a2 + 16) = v21 | 0x14C;
  *(_DWORD *)(a2 + 60) = v20;
  int v157 = *(_DWORD *)(a1 + 96);
  if ((v157 - 1) <= 1)
  {
    *(_DWORD *)(a2 + 16) = v21 | 0x15C;
    *(_DWORD *)(a2 + 44) = v157;
  }
}

void sub_DE4EBC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = *(uint64_t (****)())(a1 + 24);
  if (!v3) {
    unint64_t v3 = &off_253F1A0;
  }
  if ((~*((_DWORD *)v3 + 10) & 3) != 0)
  {
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    *(void *)a2 = -1;
    *(_DWORD *)(a2 + 8) = 0x7FFFFFFF;
    *(void *)(a2 + 16) = -1;
    *(void *)(a2 + 24) = -1;
    *(void *)(a2 + 32) = 0x7FFFFFFFFFFFFFFFLL;
    *(_DWORD *)(a2 + 48) = -1935635296;
    *(void *)(a2 + 56) = 0;
    *(_DWORD *)(a2 + 63) = 0;
    *(void *)(a2 + 72) = 0;
    *(void *)(a2 + 80) = 0;
    *(void *)(a2 + 88) = 0;
    *(_DWORD *)(a2 + 96) = 0;
    *(unsigned char *)(a2 + 100) = 100;
  }
  else
  {
    double v5 = *((double *)v3 + 7);
    uint64_t v6 = -1;
    if (v5 <= 180.0)
    {
      double v7 = *((double *)v3 + 6);
      if (v7 >= -85.0511288 && v7 <= 85.0511288 && v5 >= -180.0)
      {
        double v8 = fmax(v7, -85.0511288);
        double v9 = v8 * 3.14159265 / 180.0;
        BOOL v10 = v8 < 85.0511288;
        double v11 = 1.48442223;
        if (v10) {
          double v11 = v9;
        }
        long double v12 = sin(v11);
        LODWORD(v13) = ((log((v12 + 1.0) / (1.0 - v12)) / -12.5663706 + 0.5) * 4294967300.0);
        if (v13 >= 0xFFFFFFFE) {
          uint64_t v13 = 4294967294;
        }
        else {
          uint64_t v13 = v13;
        }
        uint64_t v6 = ((v5 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v13 << 32);
      }
    }
    uint64_t v33 = v6;
    LODWORD(v34) = 0x7FFFFFFF;
    sub_DAA084((uint64_t)v24, &v33);
    int v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    switch(*(_DWORD *)(a1 + 36))
    {
      case 1:
        LODWORD(v33) = 1;
        sub_745A4((uint64_t)&v21, &v33);
        break;
      case 2:
        LODWORD(v33) = 2;
        sub_745A4((uint64_t)&v21, &v33);
        break;
      case 3:
        LODWORD(v33) = 1;
        sub_745A4((uint64_t)&v21, &v33);
        LODWORD(v33) = 2;
        sub_745A4((uint64_t)&v21, &v33);
        break;
      case 4:
        LODWORD(v33) = 0;
        sub_745A4((uint64_t)&v21, &v33);
        break;
      default:
        break;
    }
    switch(*(_DWORD *)(a1 + 40))
    {
      case 1:
        LODWORD(v33) = 4;
        sub_745A4((uint64_t)&v21, &v33);
        break;
      case 2:
        LODWORD(v33) = 5;
        sub_745A4((uint64_t)&v21, &v33);
        break;
      case 3:
        LODWORD(v33) = 4;
        sub_745A4((uint64_t)&v21, &v33);
        LODWORD(v33) = 5;
        sub_745A4((uint64_t)&v21, &v33);
        break;
      case 4:
        LODWORD(v33) = 3;
        sub_745A4((uint64_t)&v21, &v33);
        break;
      default:
        break;
    }
    switch(*(_DWORD *)(a1 + 52))
    {
      case 1:
        LODWORD(v33) = 7;
        sub_745A4((uint64_t)&v21, &v33);
        break;
      case 2:
        LODWORD(v33) = 8;
        sub_745A4((uint64_t)&v21, &v33);
        break;
      case 3:
        LODWORD(v33) = 7;
        sub_745A4((uint64_t)&v21, &v33);
        LODWORD(v33) = 8;
        sub_745A4((uint64_t)&v21, &v33);
        break;
      case 4:
        LODWORD(v33) = 6;
        sub_745A4((uint64_t)&v21, &v33);
        break;
      default:
        break;
    }
    switch(*(_DWORD *)(a1 + 60))
    {
      case 1:
        LODWORD(v33) = 9;
        sub_745A4((uint64_t)&v21, &v33);
        break;
      case 2:
        LODWORD(v33) = 10;
        sub_745A4((uint64_t)&v21, &v33);
        break;
      case 3:
        LODWORD(v33) = 9;
        sub_745A4((uint64_t)&v21, &v33);
        LODWORD(v33) = 10;
        sub_745A4((uint64_t)&v21, &v33);
        break;
      case 4:
        if (sub_723EC(1u))
        {
          sub_6BAC((uint64_t)&v33);
          sub_188FC78(&v33, (uint64_t)"Unexpected Parking RoadAccessPoint with Destination direction.", 62);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&__p, 1u);
          if (v32 < 0) {
            operator delete(__p);
          }
          if (v36 < 0) {
            operator delete(v35);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        break;
      default:
        break;
    }
    if (v26)
    {
      int32x4_t v27 = v26;
      operator delete(v26);
      int32x4_t v27 = 0;
    }
    unint64_t v14 = v21;
    uint64_t v15 = v22;
    uint64_t v16 = v23;
    int32x4_t v26 = v21;
    uint64_t v28 = v23;
    if (v21 == v22)
    {
      *(_OWORD *)(a2 + 8) = 0u;
      *(_OWORD *)(a2 + 24) = 0u;
      *(_OWORD *)(a2 + 40) = 0u;
      *(_OWORD *)(a2 + 56) = 0u;
      *(_OWORD *)(a2 + 72) = 0u;
      *(_OWORD *)(a2 + 88) = 0u;
      *(void *)a2 = -1;
      *(_DWORD *)(a2 + 8) = 0x7FFFFFFF;
      *(void *)(a2 + 16) = -1;
      *(void *)(a2 + 24) = -1;
      *(void *)(a2 + 32) = 0x7FFFFFFFFFFFFFFFLL;
      *(_DWORD *)(a2 + 48) = -1935635296;
      *(void *)(a2 + 56) = 0;
      *(_DWORD *)(a2 + 63) = 0;
      *(void *)(a2 + 72) = 0;
      *(void *)(a2 + 80) = 0;
      *(void *)(a2 + 88) = 0;
      *(_DWORD *)(a2 + 96) = 0;
      *(unsigned char *)(a2 + 100) = 100;
      if (v14)
      {
        int32x4_t v27 = v14;
        operator delete(v14);
      }
    }
    else
    {
      if ((*(unsigned char *)(a1 + 16) & 0x10) != 0)
      {
        int v17 = *(_DWORD *)(a1 + 44);
        if (v17 == 1) {
          int v18 = 1;
        }
        else {
          int v18 = 2 * (v17 == 2);
        }
        int v29 = v18;
      }
      long long v19 = *(_OWORD *)v25;
      *(_OWORD *)(a2 + 32) = v24[2];
      *(_OWORD *)(a2 + 48) = v19;
      *(_DWORD *)(a2 + 63) = *(_DWORD *)&v25[15];
      long long v20 = v24[1];
      *(_OWORD *)a2 = v24[0];
      *(_OWORD *)(a2 + 16) = v20;
      *(void *)(a2 + 72) = v14;
      *(void *)(a2 + 80) = v15;
      *(void *)(a2 + 88) = v16;
      *(_DWORD *)(a2 + 96) = v29;
      *(unsigned char *)(a2 + 100) = v30;
    }
  }
}

void sub_DE5538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a31);
  if (a9)
  {
    operator delete(a9);
    char v32 = a21;
    if (!a21) {
LABEL_5:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    char v32 = a21;
    if (!a21) {
      goto LABEL_5;
    }
  }
  operator delete(v32);
  _Unwind_Resume(a1);
}

double sub_DE5630@<D0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2 = *(uint64_t (****)())(a1 + 152);
  if (!v2) {
    uint64_t v2 = &off_2535C50;
  }
  unint64_t v3 = (uint64_t (***)())v2[10];
  if (!v3) {
    unint64_t v3 = &off_2535C20;
  }
  if (((_BYTE)v3[2] & 1) != 0 && *(int *)(a1 + 80) > 1 && *(_DWORD *)(a1 + 56))
  {
    v5.n128_u64[0] = 0;
    v5.n128_u64[1] = (unint64_t)&off_2439090;
    *(void *)&double result = sub_3E7814(a2, &v5).n128_u64[0];
  }
  else
  {
    v5.n128_u64[0] = 1;
    v5.n128_u64[1] = (unint64_t)&off_2439090;
    *(void *)&double result = sub_3E7814(a2, &v5).n128_u64[0];
  }
  return result;
}

void sub_DE56D0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  LOBYTE(v7) = v6;
  uint64_t v8 = *(void *)(a1 + 8);
  if ((v6 & 0x80u) == 0) {
    uint64_t v9 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a1 + 8);
  }
  if (v9 == 20)
  {
    if ((v6 & 0x80u) == 0) {
      BOOL v10 = (char *)a1;
    }
    else {
      BOOL v10 = *(char **)a1;
    }
    __darwin_ct_rune_t v11 = *v10;
    __darwin_ct_rune_t v12 = __toupper(116);
    if (v12 == __toupper(v11))
    {
      __darwin_ct_rune_t v13 = v10[1];
      __darwin_ct_rune_t v14 = __toupper(114);
      if (v14 == __toupper(v13))
      {
        __darwin_ct_rune_t v15 = v10[2];
        __darwin_ct_rune_t v16 = __toupper(97);
        if (v16 == __toupper(v15))
        {
          __darwin_ct_rune_t v17 = v10[3];
          __darwin_ct_rune_t v18 = __toupper(110);
          if (v18 == __toupper(v17))
          {
            __darwin_ct_rune_t v19 = v10[4];
            __darwin_ct_rune_t v20 = __toupper(115);
            if (v20 == __toupper(v19))
            {
              __darwin_ct_rune_t v21 = v10[5];
              __darwin_ct_rune_t v22 = __toupper(105);
              if (v22 == __toupper(v21))
              {
                __darwin_ct_rune_t v23 = v10[6];
                __darwin_ct_rune_t v24 = __toupper(116);
                if (v24 == __toupper(v23))
                {
                  __darwin_ct_rune_t v25 = v10[7];
                  __darwin_ct_rune_t v26 = __toupper(46);
                  if (v26 == __toupper(v25))
                  {
                    __darwin_ct_rune_t v27 = v10[8];
                    __darwin_ct_rune_t v28 = __toupper(102);
                    if (v28 == __toupper(v27))
                    {
                      __darwin_ct_rune_t v29 = v10[9];
                      __darwin_ct_rune_t v30 = __toupper(101);
                      if (v30 == __toupper(v29))
                      {
                        __darwin_ct_rune_t v31 = v10[10];
                        __darwin_ct_rune_t v32 = __toupper(108);
                        if (v32 == __toupper(v31))
                        {
                          __darwin_ct_rune_t v33 = v10[11];
                          __darwin_ct_rune_t v34 = __toupper(105);
                          if (v34 == __toupper(v33))
                          {
                            __darwin_ct_rune_t v35 = v10[12];
                            __darwin_ct_rune_t v36 = __toupper(99);
                            if (v36 == __toupper(v35))
                            {
                              __darwin_ct_rune_t v37 = v10[13];
                              __darwin_ct_rune_t v38 = __toupper(97);
                              if (v38 == __toupper(v37))
                              {
                                __darwin_ct_rune_t v39 = v10[14];
                                __darwin_ct_rune_t v40 = __toupper(46);
                                if (v40 == __toupper(v39))
                                {
                                  __darwin_ct_rune_t v41 = v10[15];
                                  __darwin_ct_rune_t v42 = __toupper(115);
                                  if (v42 == __toupper(v41))
                                  {
                                    __darwin_ct_rune_t v43 = v10[16];
                                    __darwin_ct_rune_t v44 = __toupper(117);
                                    if (v44 == __toupper(v43))
                                    {
                                      __darwin_ct_rune_t v45 = v10[17];
                                      __darwin_ct_rune_t v46 = __toupper(105);
                                      if (v46 == __toupper(v45))
                                      {
                                        __darwin_ct_rune_t v47 = v10[18];
                                        __darwin_ct_rune_t v48 = __toupper(99);
                                        if (v48 == __toupper(v47))
                                        {
                                          __darwin_ct_rune_t v49 = v10[19];
                                          __darwin_ct_rune_t v50 = __toupper(97);
                                          if (v50 == __toupper(v49)) {
                                            goto LABEL_55;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
    uint64_t v8 = *(void *)(a1 + 8);
    LOBYTE(v7) = *(unsigned char *)(a1 + 23);
  }
  if ((v7 & 0x80u) == 0) {
    uint64_t v51 = v6;
  }
  else {
    uint64_t v51 = v8;
  }
  if (v51 != 19)
  {
LABEL_62:
    int v7 = (char)v7;
    if ((v7 & 0x80u) != 0) {
      uint64_t v6 = v8;
    }
    if (v6 == 30)
    {
      int8x16_t v95 = v7 >= 0 ? (char *)a1 : *(char **)a1;
      __darwin_ct_rune_t v96 = *v95;
      __darwin_ct_rune_t v97 = __toupper(99);
      if (v97 == __toupper(v96))
      {
        __darwin_ct_rune_t v98 = v95[1];
        __darwin_ct_rune_t v99 = __toupper(111);
        if (v99 == __toupper(v98))
        {
          __darwin_ct_rune_t v100 = v95[2];
          __darwin_ct_rune_t v101 = __toupper(109);
          if (v101 == __toupper(v100))
          {
            __darwin_ct_rune_t v102 = v95[3];
            __darwin_ct_rune_t v103 = __toupper(46);
            if (v103 == __toupper(v102))
            {
              __darwin_ct_rune_t v104 = v95[4];
              __darwin_ct_rune_t v105 = __toupper(97);
              if (v105 == __toupper(v104))
              {
                __darwin_ct_rune_t v106 = v95[5];
                __darwin_ct_rune_t v107 = __toupper(112);
                if (v107 == __toupper(v106))
                {
                  __darwin_ct_rune_t v108 = v95[6];
                  __darwin_ct_rune_t v109 = __toupper(112);
                  if (v109 == __toupper(v108))
                  {
                    __darwin_ct_rune_t v110 = v95[7];
                    __darwin_ct_rune_t v111 = __toupper(108);
                    if (v111 == __toupper(v110))
                    {
                      __darwin_ct_rune_t v112 = v95[8];
                      __darwin_ct_rune_t v113 = __toupper(101);
                      if (v113 == __toupper(v112))
                      {
                        __darwin_ct_rune_t v114 = v95[9];
                        __darwin_ct_rune_t v115 = __toupper(46);
                        if (v115 == __toupper(v114))
                        {
                          __darwin_ct_rune_t v116 = v95[10];
                          __darwin_ct_rune_t v117 = __toupper(116);
                          if (v117 == __toupper(v116))
                          {
                            __darwin_ct_rune_t v118 = v95[11];
                            __darwin_ct_rune_t v119 = __toupper(114);
                            if (v119 == __toupper(v118))
                            {
                              __darwin_ct_rune_t v120 = v95[12];
                              __darwin_ct_rune_t v121 = __toupper(97);
                              if (v121 == __toupper(v120))
                              {
                                __darwin_ct_rune_t v122 = v95[13];
                                __darwin_ct_rune_t v123 = __toupper(110);
                                if (v123 == __toupper(v122))
                                {
                                  __darwin_ct_rune_t v124 = v95[14];
                                  __darwin_ct_rune_t v125 = __toupper(115);
                                  if (v125 == __toupper(v124))
                                  {
                                    __darwin_ct_rune_t v126 = v95[15];
                                    __darwin_ct_rune_t v127 = __toupper(105);
                                    if (v127 == __toupper(v126))
                                    {
                                      __darwin_ct_rune_t v128 = v95[16];
                                      __darwin_ct_rune_t v129 = __toupper(116);
                                      if (v129 == __toupper(v128))
                                      {
                                        __darwin_ct_rune_t v130 = v95[17];
                                        __darwin_ct_rune_t v131 = __toupper(46);
                                        if (v131 == __toupper(v130))
                                        {
                                          __darwin_ct_rune_t v132 = v95[18];
                                          __darwin_ct_rune_t v133 = __toupper(102);
                                          if (v133 == __toupper(v132))
                                          {
                                            __darwin_ct_rune_t v134 = v95[19];
                                            __darwin_ct_rune_t v135 = __toupper(101);
                                            if (v135 == __toupper(v134))
                                            {
                                              __darwin_ct_rune_t v136 = v95[20];
                                              __darwin_ct_rune_t v137 = __toupper(108);
                                              if (v137 == __toupper(v136))
                                              {
                                                __darwin_ct_rune_t v138 = v95[21];
                                                __darwin_ct_rune_t v139 = __toupper(105);
                                                if (v139 == __toupper(v138))
                                                {
                                                  __darwin_ct_rune_t v140 = v95[22];
                                                  __darwin_ct_rune_t v141 = __toupper(99);
                                                  if (v141 == __toupper(v140))
                                                  {
                                                    __darwin_ct_rune_t v142 = v95[23];
                                                    __darwin_ct_rune_t v143 = __toupper(97);
                                                    if (v143 == __toupper(v142))
                                                    {
                                                      __darwin_ct_rune_t v144 = v95[24];
                                                      __darwin_ct_rune_t v145 = __toupper(46);
                                                      if (v145 == __toupper(v144))
                                                      {
                                                        __darwin_ct_rune_t v146 = v95[25];
                                                        __darwin_ct_rune_t v147 = __toupper(112);
                                                        if (v147 == __toupper(v146))
                                                        {
                                                          __darwin_ct_rune_t v148 = v95[26];
                                                          __darwin_ct_rune_t v149 = __toupper(97);
                                                          if (v149 == __toupper(v148))
                                                          {
                                                            __darwin_ct_rune_t v150 = v95[27];
                                                            __darwin_ct_rune_t v151 = __toupper(115);
                                                            if (v151 == __toupper(v150))
                                                            {
                                                              __darwin_ct_rune_t v152 = v95[28];
                                                              __darwin_ct_rune_t v153 = __toupper(109);
                                                              if (v153 == __toupper(v152))
                                                              {
                                                                __darwin_ct_rune_t v154 = v95[29];
                                                                __darwin_ct_rune_t v155 = __toupper(111);
                                                                if (v155 == __toupper(v154)) {
                                                                  goto LABEL_55;
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (*(char *)(a2 + 23) < 0)
    {
      unint64_t v161 = *(void *)(a2 + 8);
      if (v161 <= 8)
      {
        a2 = *(void *)a2;
        unint64_t v157 = a2 + v161;
        unint64_t v158 = v157 - a2;
        if (v157 != a2)
        {
LABEL_101:
          if (v158 < 8)
          {
            unint64_t v159 = 0;
            unint64_t v160 = v157;
LABEL_134:
            uint64_t v216 = 8 * v157 - 8 * v160;
            do
            {
              unsigned int v217 = *(unsigned __int8 *)--v160;
              v159 |= (unint64_t)v217 << v216;
              v216 += 8;
            }
            while (v160 != a2);
            goto LABEL_136;
          }
          int64x2_t v165 = vdupq_n_s64(v157);
          if (v158 >= 0x10)
          {
            unint64_t v166 = v158 & 0xFFFFFFFFFFFFFFF0;
            unint64_t v160 = v157 - (v158 & 0xFFFFFFFFFFFFFFF0);
            int8x16_t v185 = 0uLL;
            unint64_t v186 = v158 & 0xFFFFFFFFFFFFFFF0;
            unint64_t v187 = v157;
            int8x16_t v188 = 0uLL;
            int8x16_t v189 = 0uLL;
            int8x16_t v190 = 0uLL;
            int8x16_t v191 = 0uLL;
            int8x16_t v192 = 0uLL;
            int8x16_t v193 = 0uLL;
            int8x16_t v194 = 0uLL;
            do
            {
              int64x2_t v195 = vdupq_n_s64(v187);
              int64x2_t v196 = vaddq_s64(v195, (int64x2_t)xmmword_20B93F0);
              int64x2_t v197 = vsubq_s64(v165, v196);
              int8x16_t v198 = vrev64q_s8(*(int8x16_t *)(v196.i64[0] - 16));
              uint8x16_t v199 = (uint8x16_t)vextq_s8(v198, v198, 8uLL);
              uint16x8_t v200 = vmovl_high_u8(v199);
              uint32x4_t v201 = vmovl_high_u16(v200);
              v202.i64[0] = v201.u32[0];
              v202.i64[1] = v201.u32[1];
              uint64x2_t v203 = v202;
              uint32x4_t v204 = vmovl_u16(*(uint16x4_t *)v200.i8);
              v202.i64[0] = v204.u32[2];
              v202.i64[1] = v204.u32[3];
              uint64x2_t v205 = v202;
              uint16x8_t v206 = vmovl_u8(*(uint8x8_t *)v199.i8);
              uint32x4_t v207 = vmovl_high_u16(v206);
              v202.i64[0] = v207.u32[2];
              v202.i64[1] = v207.u32[3];
              uint64x2_t v208 = v202;
              v202.i64[0] = v204.u32[0];
              v202.i64[1] = v204.u32[1];
              uint64x2_t v209 = v202;
              v202.i64[0] = v207.u32[0];
              v202.i64[1] = v207.u32[1];
              uint64x2_t v210 = v202;
              uint32x4_t v211 = vmovl_u16(*(uint16x4_t *)v206.i8);
              v202.i64[0] = v211.u32[2];
              v202.i64[1] = v211.u32[3];
              uint64x2_t v212 = v202;
              v202.i64[0] = v211.u32[0];
              v202.i64[1] = v211.u32[1];
              int64x2_t v213 = vsubq_s64(v165, v195);
              int8x16_t v214 = (int8x16_t)vshlq_u64(v202, (uint64x2_t)vshlq_n_s64(v197, 3uLL));
              v202.i64[0] = v201.u32[2];
              v202.i64[1] = v201.u32[3];
              int8x16_t v194 = vorrq_s8((int8x16_t)vshlq_u64(v202, (uint64x2_t)vshlq_n_s64(vsubq_s64(v213, (int64x2_t)xmmword_20F0670), 3uLL)), v194);
              int8x16_t v193 = vorrq_s8((int8x16_t)vshlq_u64(v203, (uint64x2_t)vshlq_n_s64(vsubq_s64(v213, (int64x2_t)xmmword_20F0680), 3uLL)), v193);
              int8x16_t v192 = vorrq_s8((int8x16_t)vshlq_u64(v205, (uint64x2_t)vshlq_n_s64(vsubq_s64(v213, (int64x2_t)xmmword_20F0690), 3uLL)), v192);
              int8x16_t v190 = vorrq_s8((int8x16_t)vshlq_u64(v208, (uint64x2_t)vshlq_n_s64(vsubq_s64(v213, (int64x2_t)xmmword_20F06A0), 3uLL)), v190);
              int8x16_t v191 = vorrq_s8((int8x16_t)vshlq_u64(v209, (uint64x2_t)vshlq_n_s64(vsubq_s64(v213, (int64x2_t)xmmword_20F06B0), 3uLL)), v191);
              int8x16_t v189 = vorrq_s8((int8x16_t)vshlq_u64(v210, (uint64x2_t)vshlq_n_s64(vsubq_s64(v213, (int64x2_t)xmmword_20F06C0), 3uLL)), v189);
              int8x16_t v188 = vorrq_s8((int8x16_t)vshlq_u64(v212, (uint64x2_t)vshlq_n_s64(vsubq_s64(v213, (int64x2_t)xmmword_20F06D0), 3uLL)), v188);
              int8x16_t v185 = vorrq_s8(v214, v185);
              v187 -= 16;
              v186 -= 16;
            }
            while (v186);
            int8x16_t v215 = vorrq_s8(vorrq_s8(vorrq_s8(v185, v191), vorrq_s8(v189, v193)), vorrq_s8(vorrq_s8(v188, v192), vorrq_s8(v190, v194)));
            unint64_t v159 = (unint64_t)vorr_s8(*(int8x8_t *)v215.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v215, v215, 8uLL));
            if (v158 == v166) {
              goto LABEL_136;
            }
            if ((v158 & 8) == 0) {
              goto LABEL_134;
            }
          }
          else
          {
            unint64_t v159 = 0;
            unint64_t v166 = 0;
            unint64_t v160 = v157;
          }
          unint64_t v167 = v160;
          unint64_t v160 = v157 - (v158 & 0xFFFFFFFFFFFFFFF8);
          int8x16_t v168 = 0uLL;
          int8x16_t v169 = (int8x16_t)v159;
          unint64_t v170 = v166 - (v158 & 0xFFFFFFFFFFFFFFF8);
          int8x16_t v171 = 0uLL;
          int8x16_t v172 = 0uLL;
          do
          {
            int64x2_t v173 = vdupq_n_s64(v167);
            int64x2_t v174 = vaddq_s64(v173, (int64x2_t)xmmword_20B93F0);
            int64x2_t v175 = vsubq_s64(v165, v174);
            uint16x8_t v176 = vmovl_u8((uint8x8_t)vrev64_s8(*(int8x8_t *)(v174.i64[0] - 8)));
            uint32x4_t v177 = vmovl_high_u16(v176);
            v178.i64[0] = v177.u32[2];
            v178.i64[1] = v177.u32[3];
            uint64x2_t v179 = v178;
            v178.i64[0] = v177.u32[0];
            v178.i64[1] = v177.u32[1];
            uint64x2_t v180 = v178;
            uint32x4_t v181 = vmovl_u16(*(uint16x4_t *)v176.i8);
            v178.i64[0] = v181.u32[2];
            v178.i64[1] = v181.u32[3];
            uint64x2_t v182 = v178;
            v178.i64[0] = v181.u32[0];
            v178.i64[1] = v181.u32[1];
            int64x2_t v183 = vsubq_s64(v165, v173);
            int8x16_t v172 = vorrq_s8((int8x16_t)vshlq_u64(v179, (uint64x2_t)vshlq_n_s64(vsubq_s64(v183, (int64x2_t)xmmword_20F06A0), 3uLL)), v172);
            int8x16_t v171 = vorrq_s8((int8x16_t)vshlq_u64(v180, (uint64x2_t)vshlq_n_s64(vsubq_s64(v183, (int64x2_t)xmmword_20F06C0), 3uLL)), v171);
            int8x16_t v168 = vorrq_s8((int8x16_t)vshlq_u64(v182, (uint64x2_t)vshlq_n_s64(vsubq_s64(v183, (int64x2_t)xmmword_20F06D0), 3uLL)), v168);
            int8x16_t v169 = vorrq_s8((int8x16_t)vshlq_u64(v178, (uint64x2_t)vshlq_n_s64(v175, 3uLL)), v169);
            v167 -= 8;
            v170 += 8;
          }
          while (v170);
          int8x16_t v184 = vorrq_s8(vorrq_s8(v169, v171), vorrq_s8(v168, v172));
          unint64_t v159 = (unint64_t)vorr_s8(*(int8x8_t *)v184.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v184, v184, 8uLL));
          if (v158 == (v158 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_136;
          }
          goto LABEL_134;
        }
LABEL_121:
        unint64_t v159 = 0;
LABEL_136:
        std::to_string((std::string *)a3, v159);
        return;
      }
    }
    else
    {
      uint64_t v156 = *(unsigned __int8 *)(a2 + 23);
      if (v156 < 9)
      {
        unint64_t v157 = a2 + v156;
        unint64_t v158 = v157 - a2;
        if (v157 != a2) {
          goto LABEL_101;
        }
        goto LABEL_121;
      }
    }
    if (!sub_723EC(1u))
    {
LABEL_118:
      *(unsigned char *)(a3 + 23) = 0;
      *(unsigned char *)a3 = 0;
      return;
    }
    sub_6BAC((uint64_t)&v228);
    v162 = sub_188FC78(&v228, (uint64_t)"More than 8 bytes in station code: 0x", 37);
    char v224 = 0;
    LOBYTE(v223[0]) = 0;
    sub_CB0304((uint64_t *)a2, (uint64_t)v223, 2);
    if ((v227 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v227 & 0x80u) == 0) {
      uint64_t v164 = v227;
    }
    else {
      uint64_t v164 = v226;
    }
    sub_188FC78(v162, (uint64_t)p_p, v164);
    if ((char)v227 < 0)
    {
      operator delete(__p);
      if ((v224 & 0x80000000) == 0) {
        goto LABEL_113;
      }
    }
    else if ((v224 & 0x80000000) == 0)
    {
LABEL_113:
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      if ((char)v227 < 0) {
        operator delete(__p);
      }
      if (v232 < 0) {
        operator delete(v231);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
      goto LABEL_118;
    }
    operator delete(v223[0]);
    goto LABEL_113;
  }
  if ((v7 & 0x80u) == 0) {
    int v52 = (char *)a1;
  }
  else {
    int v52 = *(char **)a1;
  }
  __darwin_ct_rune_t v53 = *v52;
  __darwin_ct_rune_t v54 = __toupper(116);
  if (v54 != __toupper(v53)) {
    goto LABEL_61;
  }
  __darwin_ct_rune_t v55 = v52[1];
  __darwin_ct_rune_t v56 = __toupper(114);
  if (v56 != __toupper(v55)) {
    goto LABEL_61;
  }
  __darwin_ct_rune_t v57 = v52[2];
  __darwin_ct_rune_t v58 = __toupper(97);
  if (v58 != __toupper(v57)) {
    goto LABEL_61;
  }
  __darwin_ct_rune_t v59 = v52[3];
  __darwin_ct_rune_t v60 = __toupper(110);
  if (v60 != __toupper(v59)) {
    goto LABEL_61;
  }
  __darwin_ct_rune_t v61 = v52[4];
  __darwin_ct_rune_t v62 = __toupper(115);
  if (v62 != __toupper(v61)) {
    goto LABEL_61;
  }
  __darwin_ct_rune_t v63 = v52[5];
  __darwin_ct_rune_t v64 = __toupper(105);
  if (v64 != __toupper(v63)) {
    goto LABEL_61;
  }
  __darwin_ct_rune_t v65 = v52[6];
  __darwin_ct_rune_t v66 = __toupper(116);
  if (v66 != __toupper(v65)) {
    goto LABEL_61;
  }
  __darwin_ct_rune_t v67 = v52[7];
  __darwin_ct_rune_t v68 = __toupper(46);
  if (v68 != __toupper(v67)) {
    goto LABEL_61;
  }
  __darwin_ct_rune_t v69 = v52[8];
  __darwin_ct_rune_t v70 = __toupper(102);
  if (v70 != __toupper(v69)) {
    goto LABEL_61;
  }
  __darwin_ct_rune_t v71 = v52[9];
  __darwin_ct_rune_t v72 = __toupper(101);
  if (v72 != __toupper(v71)) {
    goto LABEL_61;
  }
  __darwin_ct_rune_t v73 = v52[10];
  __darwin_ct_rune_t v74 = __toupper(108);
  if (v74 != __toupper(v73)) {
    goto LABEL_61;
  }
  __darwin_ct_rune_t v75 = v52[11];
  __darwin_ct_rune_t v76 = __toupper(105);
  if (v76 != __toupper(v75)) {
    goto LABEL_61;
  }
  __darwin_ct_rune_t v77 = v52[12];
  __darwin_ct_rune_t v78 = __toupper(99);
  if (v78 != __toupper(v77)) {
    goto LABEL_61;
  }
  __darwin_ct_rune_t v79 = v52[13];
  __darwin_ct_rune_t v80 = __toupper(97);
  if (v80 != __toupper(v79)) {
    goto LABEL_61;
  }
  __darwin_ct_rune_t v81 = v52[14];
  __darwin_ct_rune_t v82 = __toupper(46);
  if (v82 != __toupper(v81)) {
    goto LABEL_61;
  }
  __darwin_ct_rune_t v83 = v52[15];
  __darwin_ct_rune_t v84 = __toupper(99);
  if (v84 != __toupper(v83)
    || (__darwin_ct_rune_t v85 = v52[16], v86 = __toupper(106), v86 != __toupper(v85))
    || (__darwin_ct_rune_t v87 = v52[17], v88 = __toupper(114), v88 != __toupper(v87))
    || (__darwin_ct_rune_t v89 = v52[18], v90 = __toupper(99), v90 != __toupper(v89)))
  {
LABEL_61:
    uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
    uint64_t v8 = *(void *)(a1 + 8);
    LOBYTE(v7) = *(unsigned char *)(a1 + 23);
    goto LABEL_62;
  }
LABEL_55:
  uint64_t v91 = *(unsigned __int8 *)(a2 + 23);
  int v92 = (char)v91;
  if ((v91 & 0x80u) != 0) {
    uint64_t v91 = *(void *)(a2 + 8);
  }
  if ((v91 & 0xFFFFFFFFFFFFFFFELL) == 2)
  {
    if (v92 < 0)
    {
      v93 = *(unsigned __int8 **)a2;
      if (*(void *)(a2 + 8) != 3)
      {
        LOWORD(v94) = 0;
LABEL_164:
        __int16 v222 = *v93;
        BYTE2(__p) = v93[1];
        LOWORD(__p) = v94 | (v222 << 8);
        char v230 = 1;
        LOWORD(v228) = 45;
        sub_DE68F4((uint64_t)&__p, (uint64_t)&v228, 0);
        if (v230 < 0) {
          operator delete(v228);
        }
        return;
      }
    }
    else
    {
      v93 = (unsigned __int8 *)a2;
      if (v92 != 3)
      {
        LOWORD(v94) = 0;
        v93 = (unsigned __int8 *)a2;
        goto LABEL_164;
      }
    }
    unsigned int v221 = v93[2];
    if (v221)
    {
      int v94 = (v221 >> 4) & 3;
      if (v221 >= 0x40) {
        LOWORD(v94) = v221 >> 6;
      }
    }
    else
    {
      LOWORD(v94) = 0;
    }
    v93 = *(unsigned __int8 **)a2;
    if (v92 >= 0) {
      v93 = (unsigned __int8 *)a2;
    }
    goto LABEL_164;
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v228);
    v218 = sub_188FC78(&v228, (uint64_t)"Incorrect number of bytes in Suica station code: 0x", 51);
    char v224 = 0;
    LOBYTE(v223[0]) = 0;
    sub_CB0304((uint64_t *)a2, (uint64_t)v223, 2);
    if ((v227 & 0x80u) == 0) {
      v219 = &__p;
    }
    else {
      v219 = __p;
    }
    if ((v227 & 0x80u) == 0) {
      uint64_t v220 = v227;
    }
    else {
      uint64_t v220 = v226;
    }
    sub_188FC78(v218, (uint64_t)v219, v220);
    if ((char)v227 < 0) {
      operator delete(__p);
    }
    if (v224 < 0) {
      operator delete(v223[0]);
    }
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if ((char)v227 < 0) {
      operator delete(__p);
    }
    if (v232 < 0) {
      operator delete(v231);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
}

void sub_DE677C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,void (__cdecl **a23)(std::stringbuf *__hidden this),int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_DE68F4(uint64_t a1, uint64_t a2, int a3)
{
  sub_6BAC((uint64_t)v21);
  uint64_t v5 = *(void *)(v21[0] - 24);
  uint64_t v6 = std::locale::classic();
  std::ios_base::getloc((const std::ios_base *)((char *)v21 + v5));
  std::ios_base::imbue((std::ios_base *)((char *)v21 + v5), v6);
  std::locale::~locale(&v24);
  int v7 = *(std::locale **)((char *)&v21[5] + v5);
  if (v7)
  {
    (*((void (**)(std::locale *, const std::locale *))v7->__locale_ + 2))(v7, v6);
    uint64_t v8 = v7 + 1;
    std::locale::locale(&v23, v8);
    std::locale::operator=(v8, v6);
    std::locale::~locale(&v23);
  }
  std::locale::~locale(&v20);
  uint64_t v9 = v21[0];
  uint64_t v10 = v21[0];
  *(_DWORD *)((char *)&v21[1] + *(void *)(v21[0] - 24)) = *(_DWORD *)((unsigned char *)&v21[1] + *(void *)(v21[0] - 24)) & 0xFFFFFFB5 | 8;
  __darwin_ct_rune_t v11 = (const std::ios_base *)((char *)v21 + *(void *)(v10 - 24));
  if (v11[1].__fmtflags_ == -1)
  {
    std::ios_base::getloc(v11);
    __darwin_ct_rune_t v12 = std::locale::use_facet(&v24, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 32);
    std::locale::~locale(&v24);
    uint64_t v9 = v21[0];
  }
  v11[1].__fmtflags_ = 48;
  *(void *)((char *)&v21[3] + *(void *)(v9 - 24)) = a3;
  std::ostream::operator<<();
  int v13 = *(char *)(a2 + 23);
  if (v13 >= 0) {
    uint64_t v14 = a2;
  }
  else {
    uint64_t v14 = *(void *)a2;
  }
  if (v13 >= 0) {
    uint64_t v15 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v15 = *(void *)(a2 + 8);
  }
  sub_188FC78(v21, v14, v15);
  *(void *)((char *)&v21[3] + *(void *)(v21[0] - 24)) = a3;
  std::ostream::operator<<();
  int v16 = *(char *)(a2 + 23);
  if (v16 >= 0) {
    uint64_t v17 = a2;
  }
  else {
    uint64_t v17 = *(void *)a2;
  }
  if (v16 >= 0) {
    uint64_t v18 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v18 = *(void *)(a2 + 8);
  }
  sub_188FC78(v21, v17, v18);
  *(void *)((char *)&v21[3] + *(void *)(v21[0] - 24)) = a3;
  std::ostream::operator<<();
  std::stringbuf::str();
  if (v22 < 0) {
    operator delete((void *)v21[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_DE6C60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DE6C74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::locale::~locale((std::locale *)(v2 - 72));
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DE6C9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DE6CB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DE6CC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_DE6CD8@<D0>(int a1@<W0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 0:
      *(unsigned char *)(a2 + 23) = 4;
      strcpy((char *)a2, "NONE");
      break;
    case 1:
      *(unsigned char *)(a2 + 23) = 9;
      strcpy((char *)a2, "REROUTING");
      break;
    case 2:
      unint64_t v3 = (char *)operator new(0x20uLL);
      *(void *)a2 = v3;
      *(_OWORD *)(a2 + 8) = xmmword_20B8890;
      strcpy(v3, "REROUTING_ONTO_ORIGINAL_ROUTE");
      double result = *(double *)"O_ORIGINAL_ROUTE";
      break;
    case 3:
      *(unsigned char *)(a2 + 23) = 15;
      strcpy((char *)a2, "ROUTE_RETRIEVAL");
      break;
    case 4:
      uint64_t v5 = (char *)operator new(0x19uLL);
      *(void *)a2 = v5;
      *(_OWORD *)(a2 + 8) = xmmword_20B9250;
      double result = *(double *)"LOAD_ANCHOR_POINT_ROUTE";
      strcpy(v5, "LOAD_ANCHOR_POINT_ROUTE");
      break;
    case 5:
      uint64_t v6 = (char *)operator new(0x20uLL);
      *(void *)a2 = v6;
      *(_OWORD *)(a2 + 8) = xmmword_20B91C0;
      double result = *(double *)"BIASED_DIRECTIONS_TO_POI";
      strcpy(v6, "BIASED_DIRECTIONS_TO_POI");
      break;
    case 6:
      int v7 = (char *)operator new(0x20uLL);
      *(void *)a2 = v7;
      *(_OWORD *)(a2 + 8) = xmmword_20B5EB0;
      strcpy(v7, "BIASED_DIRECTIONS_FROM_POI");
      double result = *(double *)"ECTIONS_FROM_POI";
      break;
    case 7:
      *(unsigned char *)(a2 + 23) = 16;
      double result = *(double *)"CHANGE_WAYPOINTS";
      strcpy((char *)a2, "CHANGE_WAYPOINTS");
      break;
    case 8:
      *(unsigned char *)(a2 + 23) = 14;
      strcpy((char *)a2, "CHANGE_ANCHORS");
      break;
    case 9:
      *(unsigned char *)(a2 + 23) = 12;
      strcpy((char *)a2, "RESUME_ROUTE");
      break;
    case 10:
      *(unsigned char *)(a2 + 23) = 21;
      double result = *(double *)"CHANGE_TRANSPORT_MODE";
      strcpy((char *)a2, "CHANGE_TRANSPORT_MODE");
      break;
    case 11:
      double result = *(double *)"RESUME_NAV_AFTER_PAUSE";
      strcpy((char *)a2, "RESUME_NAV_AFTER_PAUSE");
      *(unsigned char *)(a2 + 23) = 22;
      break;
    case 12:
      uint64_t v8 = (char *)operator new(0x28uLL);
      *(void *)a2 = v8;
      *(_OWORD *)(a2 + 8) = xmmword_20B9390;
      double result = *(double *)"OFFLINE_TO_ONLINE_NAV_TRANSITION";
      strcpy(v8, "OFFLINE_TO_ONLINE_NAV_TRANSITION");
      break;
    case 13:
      uint64_t v9 = (char *)operator new(0x20uLL);
      *(void *)a2 = v9;
      *(_OWORD *)(a2 + 8) = xmmword_20B91A0;
      strcpy(v9, "OFFLINE_TO_ONLINE_NEW_ROUTE");
      double result = *(double *)"ONLINE_NEW_ROUTE";
      break;
    default:
      *(unsigned char *)(a2 + 23) = 7;
      strcpy((char *)a2, "UNKNOWN");
      break;
  }
  return result;
}

uint64_t sub_DE7060(char **a1)
{
  uint64_t v2 = a1[1];
  if (v2 == (char *)dword_4)
  {
    unint64_t v3 = *a1;
    __darwin_ct_rune_t v4 = **a1;
    __darwin_ct_rune_t v5 = __toupper(78);
    if (v5 == __toupper(v4))
    {
      __darwin_ct_rune_t v6 = v3[1];
      __darwin_ct_rune_t v7 = __toupper(79);
      if (v7 == __toupper(v6))
      {
        __darwin_ct_rune_t v8 = v3[2];
        __darwin_ct_rune_t v9 = __toupper(78);
        if (v9 == __toupper(v8))
        {
          __darwin_ct_rune_t v10 = v3[3];
          __darwin_ct_rune_t v11 = __toupper(69);
          if (v11 == __toupper(v10)) {
            return 0;
          }
        }
      }
    }
    uint64_t v2 = a1[1];
  }
  if (v2 == (unsigned char *)&dword_8 + 1)
  {
    int v13 = *a1;
    __darwin_ct_rune_t v14 = **a1;
    __darwin_ct_rune_t v15 = __toupper(82);
    if (v15 == __toupper(v14))
    {
      __darwin_ct_rune_t v16 = v13[1];
      __darwin_ct_rune_t v17 = __toupper(69);
      if (v17 == __toupper(v16))
      {
        __darwin_ct_rune_t v18 = v13[2];
        __darwin_ct_rune_t v19 = __toupper(82);
        if (v19 == __toupper(v18))
        {
          __darwin_ct_rune_t v20 = v13[3];
          __darwin_ct_rune_t v21 = __toupper(79);
          if (v21 == __toupper(v20))
          {
            __darwin_ct_rune_t v22 = v13[4];
            __darwin_ct_rune_t v23 = __toupper(85);
            if (v23 == __toupper(v22))
            {
              __darwin_ct_rune_t v24 = v13[5];
              __darwin_ct_rune_t v25 = __toupper(84);
              if (v25 == __toupper(v24))
              {
                __darwin_ct_rune_t v26 = v13[6];
                __darwin_ct_rune_t v27 = __toupper(73);
                if (v27 == __toupper(v26))
                {
                  __darwin_ct_rune_t v28 = v13[7];
                  __darwin_ct_rune_t v29 = __toupper(78);
                  if (v29 == __toupper(v28))
                  {
                    __darwin_ct_rune_t v30 = v13[8];
                    __darwin_ct_rune_t v31 = __toupper(71);
                    if (v31 == __toupper(v30)) {
                      return 1;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    uint64_t v2 = a1[1];
  }
  if (v2 == (unsigned char *)&dword_C + 3)
  {
    __darwin_ct_rune_t v32 = *a1;
    __darwin_ct_rune_t v33 = **a1;
    __darwin_ct_rune_t v34 = __toupper(82);
    if (v34 == __toupper(v33))
    {
      __darwin_ct_rune_t v35 = v32[1];
      __darwin_ct_rune_t v36 = __toupper(79);
      if (v36 == __toupper(v35))
      {
        __darwin_ct_rune_t v37 = v32[2];
        __darwin_ct_rune_t v38 = __toupper(85);
        if (v38 == __toupper(v37))
        {
          __darwin_ct_rune_t v39 = v32[3];
          __darwin_ct_rune_t v40 = __toupper(84);
          if (v40 == __toupper(v39))
          {
            __darwin_ct_rune_t v41 = v32[4];
            __darwin_ct_rune_t v42 = __toupper(69);
            if (v42 == __toupper(v41))
            {
              __darwin_ct_rune_t v43 = v32[5];
              __darwin_ct_rune_t v44 = __toupper(95);
              if (v44 == __toupper(v43))
              {
                __darwin_ct_rune_t v45 = v32[6];
                __darwin_ct_rune_t v46 = __toupper(82);
                if (v46 == __toupper(v45))
                {
                  __darwin_ct_rune_t v47 = v32[7];
                  __darwin_ct_rune_t v48 = __toupper(69);
                  if (v48 == __toupper(v47))
                  {
                    __darwin_ct_rune_t v49 = v32[8];
                    __darwin_ct_rune_t v50 = __toupper(84);
                    if (v50 == __toupper(v49))
                    {
                      __darwin_ct_rune_t v51 = v32[9];
                      __darwin_ct_rune_t v52 = __toupper(82);
                      if (v52 == __toupper(v51))
                      {
                        __darwin_ct_rune_t v53 = v32[10];
                        __darwin_ct_rune_t v54 = __toupper(73);
                        if (v54 == __toupper(v53))
                        {
                          __darwin_ct_rune_t v55 = v32[11];
                          __darwin_ct_rune_t v56 = __toupper(69);
                          if (v56 == __toupper(v55))
                          {
                            __darwin_ct_rune_t v57 = v32[12];
                            __darwin_ct_rune_t v58 = __toupper(86);
                            if (v58 == __toupper(v57))
                            {
                              __darwin_ct_rune_t v59 = v32[13];
                              __darwin_ct_rune_t v60 = __toupper(65);
                              if (v60 == __toupper(v59))
                              {
                                __darwin_ct_rune_t v61 = v32[14];
                                __darwin_ct_rune_t v62 = __toupper(76);
                                if (v62 == __toupper(v61)) {
                                  return 3;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    uint64_t v2 = a1[1];
  }
  if (v2 == (unsigned char *)&dword_14 + 3)
  {
    __darwin_ct_rune_t v63 = *a1;
    __darwin_ct_rune_t v64 = **a1;
    __darwin_ct_rune_t v65 = __toupper(76);
    if (v65 == __toupper(v64))
    {
      __darwin_ct_rune_t v66 = v63[1];
      __darwin_ct_rune_t v67 = __toupper(79);
      if (v67 == __toupper(v66))
      {
        __darwin_ct_rune_t v68 = v63[2];
        __darwin_ct_rune_t v69 = __toupper(65);
        if (v69 == __toupper(v68))
        {
          __darwin_ct_rune_t v70 = v63[3];
          __darwin_ct_rune_t v71 = __toupper(68);
          if (v71 == __toupper(v70))
          {
            __darwin_ct_rune_t v72 = v63[4];
            __darwin_ct_rune_t v73 = __toupper(95);
            if (v73 == __toupper(v72))
            {
              __darwin_ct_rune_t v74 = v63[5];
              __darwin_ct_rune_t v75 = __toupper(65);
              if (v75 == __toupper(v74))
              {
                __darwin_ct_rune_t v76 = v63[6];
                __darwin_ct_rune_t v77 = __toupper(78);
                if (v77 == __toupper(v76))
                {
                  __darwin_ct_rune_t v78 = v63[7];
                  __darwin_ct_rune_t v79 = __toupper(67);
                  if (v79 == __toupper(v78))
                  {
                    __darwin_ct_rune_t v80 = v63[8];
                    __darwin_ct_rune_t v81 = __toupper(72);
                    if (v81 == __toupper(v80))
                    {
                      __darwin_ct_rune_t v82 = v63[9];
                      __darwin_ct_rune_t v83 = __toupper(79);
                      if (v83 == __toupper(v82))
                      {
                        __darwin_ct_rune_t v84 = v63[10];
                        __darwin_ct_rune_t v85 = __toupper(82);
                        if (v85 == __toupper(v84))
                        {
                          __darwin_ct_rune_t v86 = v63[11];
                          __darwin_ct_rune_t v87 = __toupper(95);
                          if (v87 == __toupper(v86))
                          {
                            __darwin_ct_rune_t v88 = v63[12];
                            __darwin_ct_rune_t v89 = __toupper(80);
                            if (v89 == __toupper(v88))
                            {
                              __darwin_ct_rune_t v90 = v63[13];
                              __darwin_ct_rune_t v91 = __toupper(79);
                              if (v91 == __toupper(v90))
                              {
                                __darwin_ct_rune_t v92 = v63[14];
                                __darwin_ct_rune_t v93 = __toupper(73);
                                if (v93 == __toupper(v92))
                                {
                                  __darwin_ct_rune_t v94 = v63[15];
                                  __darwin_ct_rune_t v95 = __toupper(78);
                                  if (v95 == __toupper(v94))
                                  {
                                    __darwin_ct_rune_t v96 = v63[16];
                                    __darwin_ct_rune_t v97 = __toupper(84);
                                    if (v97 == __toupper(v96))
                                    {
                                      __darwin_ct_rune_t v98 = v63[17];
                                      __darwin_ct_rune_t v99 = __toupper(95);
                                      if (v99 == __toupper(v98))
                                      {
                                        __darwin_ct_rune_t v100 = v63[18];
                                        __darwin_ct_rune_t v101 = __toupper(82);
                                        if (v101 == __toupper(v100))
                                        {
                                          __darwin_ct_rune_t v102 = v63[19];
                                          __darwin_ct_rune_t v103 = __toupper(79);
                                          if (v103 == __toupper(v102))
                                          {
                                            __darwin_ct_rune_t v104 = v63[20];
                                            __darwin_ct_rune_t v105 = __toupper(85);
                                            if (v105 == __toupper(v104))
                                            {
                                              __darwin_ct_rune_t v106 = v63[21];
                                              __darwin_ct_rune_t v107 = __toupper(84);
                                              if (v107 == __toupper(v106))
                                              {
                                                __darwin_ct_rune_t v108 = v63[22];
                                                __darwin_ct_rune_t v109 = __toupper(69);
                                                if (v109 == __toupper(v108)) {
                                                  return 4;
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    uint64_t v2 = a1[1];
  }
  if (v2 == (char *)&dword_18)
  {
    __darwin_ct_rune_t v110 = *a1;
    __darwin_ct_rune_t v111 = **a1;
    __darwin_ct_rune_t v112 = __toupper(66);
    if (v112 == __toupper(v111))
    {
      __darwin_ct_rune_t v113 = v110[1];
      __darwin_ct_rune_t v114 = __toupper(73);
      if (v114 == __toupper(v113))
      {
        __darwin_ct_rune_t v115 = v110[2];
        __darwin_ct_rune_t v116 = __toupper(65);
        if (v116 == __toupper(v115))
        {
          __darwin_ct_rune_t v117 = v110[3];
          __darwin_ct_rune_t v118 = __toupper(83);
          if (v118 == __toupper(v117))
          {
            __darwin_ct_rune_t v119 = v110[4];
            __darwin_ct_rune_t v120 = __toupper(69);
            if (v120 == __toupper(v119))
            {
              __darwin_ct_rune_t v121 = v110[5];
              __darwin_ct_rune_t v122 = __toupper(68);
              if (v122 == __toupper(v121))
              {
                __darwin_ct_rune_t v123 = v110[6];
                __darwin_ct_rune_t v124 = __toupper(95);
                if (v124 == __toupper(v123))
                {
                  __darwin_ct_rune_t v125 = v110[7];
                  __darwin_ct_rune_t v126 = __toupper(68);
                  if (v126 == __toupper(v125))
                  {
                    __darwin_ct_rune_t v127 = v110[8];
                    __darwin_ct_rune_t v128 = __toupper(73);
                    if (v128 == __toupper(v127))
                    {
                      __darwin_ct_rune_t v129 = v110[9];
                      __darwin_ct_rune_t v130 = __toupper(82);
                      if (v130 == __toupper(v129))
                      {
                        __darwin_ct_rune_t v131 = v110[10];
                        __darwin_ct_rune_t v132 = __toupper(69);
                        if (v132 == __toupper(v131))
                        {
                          __darwin_ct_rune_t v133 = v110[11];
                          __darwin_ct_rune_t v134 = __toupper(67);
                          if (v134 == __toupper(v133))
                          {
                            __darwin_ct_rune_t v135 = v110[12];
                            __darwin_ct_rune_t v136 = __toupper(84);
                            if (v136 == __toupper(v135))
                            {
                              __darwin_ct_rune_t v137 = v110[13];
                              __darwin_ct_rune_t v138 = __toupper(73);
                              if (v138 == __toupper(v137))
                              {
                                __darwin_ct_rune_t v139 = v110[14];
                                __darwin_ct_rune_t v140 = __toupper(79);
                                if (v140 == __toupper(v139))
                                {
                                  __darwin_ct_rune_t v141 = v110[15];
                                  __darwin_ct_rune_t v142 = __toupper(78);
                                  if (v142 == __toupper(v141))
                                  {
                                    __darwin_ct_rune_t v143 = v110[16];
                                    __darwin_ct_rune_t v144 = __toupper(83);
                                    if (v144 == __toupper(v143))
                                    {
                                      __darwin_ct_rune_t v145 = v110[17];
                                      __darwin_ct_rune_t v146 = __toupper(95);
                                      if (v146 == __toupper(v145))
                                      {
                                        __darwin_ct_rune_t v147 = v110[18];
                                        __darwin_ct_rune_t v148 = __toupper(84);
                                        if (v148 == __toupper(v147))
                                        {
                                          __darwin_ct_rune_t v149 = v110[19];
                                          __darwin_ct_rune_t v150 = __toupper(79);
                                          if (v150 == __toupper(v149))
                                          {
                                            __darwin_ct_rune_t v151 = v110[20];
                                            __darwin_ct_rune_t v152 = __toupper(95);
                                            if (v152 == __toupper(v151))
                                            {
                                              __darwin_ct_rune_t v153 = v110[21];
                                              __darwin_ct_rune_t v154 = __toupper(80);
                                              if (v154 == __toupper(v153))
                                              {
                                                __darwin_ct_rune_t v155 = v110[22];
                                                __darwin_ct_rune_t v156 = __toupper(79);
                                                if (v156 == __toupper(v155))
                                                {
                                                  __darwin_ct_rune_t v157 = v110[23];
                                                  __darwin_ct_rune_t v158 = __toupper(73);
                                                  if (v158 == __toupper(v157)) {
                                                    return 5;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    uint64_t v2 = a1[1];
  }
  if (v2 != (unsigned char *)&dword_18 + 2) {
    goto LABEL_119;
  }
  unint64_t v159 = *a1;
  __darwin_ct_rune_t v160 = **a1;
  __darwin_ct_rune_t v161 = __toupper(66);
  if (v161 != __toupper(v160)) {
    goto LABEL_119;
  }
  __darwin_ct_rune_t v162 = v159[1];
  __darwin_ct_rune_t v163 = __toupper(73);
  if (v163 != __toupper(v162)) {
    goto LABEL_119;
  }
  __darwin_ct_rune_t v164 = v159[2];
  __darwin_ct_rune_t v165 = __toupper(65);
  if (v165 != __toupper(v164)) {
    goto LABEL_119;
  }
  __darwin_ct_rune_t v166 = v159[3];
  __darwin_ct_rune_t v167 = __toupper(83);
  if (v167 != __toupper(v166)) {
    goto LABEL_119;
  }
  __darwin_ct_rune_t v168 = v159[4];
  __darwin_ct_rune_t v169 = __toupper(69);
  if (v169 != __toupper(v168)) {
    goto LABEL_119;
  }
  __darwin_ct_rune_t v170 = v159[5];
  __darwin_ct_rune_t v171 = __toupper(68);
  if (v171 != __toupper(v170)) {
    goto LABEL_119;
  }
  __darwin_ct_rune_t v172 = v159[6];
  __darwin_ct_rune_t v173 = __toupper(95);
  if (v173 != __toupper(v172)) {
    goto LABEL_119;
  }
  __darwin_ct_rune_t v174 = v159[7];
  __darwin_ct_rune_t v175 = __toupper(68);
  if (v175 != __toupper(v174)) {
    goto LABEL_119;
  }
  __darwin_ct_rune_t v176 = v159[8];
  __darwin_ct_rune_t v177 = __toupper(73);
  if (v177 != __toupper(v176)) {
    goto LABEL_119;
  }
  __darwin_ct_rune_t v178 = v159[9];
  __darwin_ct_rune_t v179 = __toupper(82);
  if (v179 != __toupper(v178)) {
    goto LABEL_119;
  }
  __darwin_ct_rune_t v180 = v159[10];
  __darwin_ct_rune_t v181 = __toupper(69);
  if (v181 != __toupper(v180)) {
    goto LABEL_119;
  }
  __darwin_ct_rune_t v182 = v159[11];
  __darwin_ct_rune_t v183 = __toupper(67);
  if (v183 != __toupper(v182)) {
    goto LABEL_119;
  }
  __darwin_ct_rune_t v184 = v159[12];
  __darwin_ct_rune_t v185 = __toupper(84);
  if (v185 != __toupper(v184)) {
    goto LABEL_119;
  }
  __darwin_ct_rune_t v186 = v159[13];
  __darwin_ct_rune_t v187 = __toupper(73);
  if (v187 != __toupper(v186)) {
    goto LABEL_119;
  }
  __darwin_ct_rune_t v188 = v159[14];
  __darwin_ct_rune_t v189 = __toupper(79);
  if (v189 != __toupper(v188)) {
    goto LABEL_119;
  }
  __darwin_ct_rune_t v190 = v159[15];
  __darwin_ct_rune_t v191 = __toupper(78);
  if (v191 != __toupper(v190)) {
    goto LABEL_119;
  }
  __darwin_ct_rune_t v192 = v159[16];
  __darwin_ct_rune_t v193 = __toupper(83);
  if (v193 != __toupper(v192)) {
    goto LABEL_119;
  }
  __darwin_ct_rune_t v194 = v159[17];
  __darwin_ct_rune_t v195 = __toupper(95);
  if (v195 != __toupper(v194)) {
    goto LABEL_119;
  }
  __darwin_ct_rune_t v196 = v159[18];
  __darwin_ct_rune_t v197 = __toupper(70);
  if (v197 != __toupper(v196)) {
    goto LABEL_119;
  }
  __darwin_ct_rune_t v198 = v159[19];
  __darwin_ct_rune_t v199 = __toupper(82);
  if (v199 != __toupper(v198)) {
    goto LABEL_119;
  }
  __darwin_ct_rune_t v200 = v159[20];
  __darwin_ct_rune_t v201 = __toupper(79);
  if (v201 != __toupper(v200)) {
    goto LABEL_119;
  }
  __darwin_ct_rune_t v202 = v159[21];
  __darwin_ct_rune_t v203 = __toupper(77);
  if (v203 != __toupper(v202)) {
    goto LABEL_119;
  }
  __darwin_ct_rune_t v204 = v159[22];
  __darwin_ct_rune_t v205 = __toupper(95);
  if (v205 != __toupper(v204)) {
    goto LABEL_119;
  }
  __darwin_ct_rune_t v206 = v159[23];
  __darwin_ct_rune_t v207 = __toupper(80);
  if (v207 == __toupper(v206))
  {
    __darwin_ct_rune_t v208 = v159[24];
    __darwin_ct_rune_t v209 = __toupper(79);
    if (v209 == __toupper(v208))
    {
      __darwin_ct_rune_t v210 = v159[25];
      __darwin_ct_rune_t v211 = __toupper(73);
      if (v211 == __toupper(v210)) {
        return 6;
      }
    }
  }
LABEL_119:
  uint64x2_t v212 = "CHANGE_WAYPOINTS";
  uint64_t v213 = 16;
  if (sub_4CCB0(a1, &v212)) {
    return 7;
  }
  uint64x2_t v212 = "CHANGE_ANCHORS";
  uint64_t v213 = 14;
  if (sub_4CCB0(a1, &v212)) {
    return 8;
  }
  uint64x2_t v212 = "RESUME_ROUTE";
  uint64_t v213 = 12;
  if (sub_4CCB0(a1, &v212)) {
    return 9;
  }
  uint64x2_t v212 = "CHANGE_TRANSPORT_MODE";
  uint64_t v213 = 21;
  if (sub_4CCB0(a1, &v212)) {
    return 10;
  }
  uint64x2_t v212 = "RESUME_NAV_AFTER_PAUSE";
  uint64_t v213 = 22;
  if (sub_4CCB0(a1, &v212)) {
    return 11;
  }
  uint64x2_t v212 = "OFFLINE_TO_ONLINE_NAV_TRANSITION";
  uint64_t v213 = 32;
  if (sub_4CCB0(a1, &v212)) {
    return 12;
  }
  uint64x2_t v212 = "OFFLINE_TO_ONLINE_NEW_ROUTE";
  uint64_t v213 = 27;
  if (sub_4CCB0(a1, &v212)) {
    return 13;
  }
  else {
    return 0;
  }
}

uint64_t sub_DE7FB0(unsigned int a1)
{
  return (a1 < 0xE) & (6u >> a1);
}

uint64_t sub_DE7FC8@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if (result == 2)
  {
    a2[23] = 15;
    strcpy(a2, "OFFLINE_SERVICE");
  }
  else if (result == 1)
  {
    a2[23] = 14;
    strcpy(a2, "ONLINE_SERVICE");
  }
  else
  {
    a2[23] = 7;
    strcpy(a2, "UNKNOWN");
  }
  return result;
}

uint64_t sub_DE8050(uint64_t a1, int *a2)
{
  *(void *)a1 = &off_243EE28;
  int v4 = *a2;
  char v5 = *((unsigned char *)a2 + 4);
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 12) = v5;
  *(_DWORD *)(a1 + 8) = v4;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  __darwin_ct_rune_t v7 = (unsigned char *)*((void *)a2 + 1);
  __darwin_ct_rune_t v6 = (unsigned char *)*((void *)a2 + 2);
  int64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0) {
      sub_2E00();
    }
    __darwin_ct_rune_t v9 = (char *)operator new(v6 - v7);
    *(void *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = v9;
    __darwin_ct_rune_t v10 = &v9[4 * (v8 >> 2)];
    *(void *)(a1 + 32) = v10;
    memcpy(v9, v7, v8);
    *(void *)(a1 + 24) = v10;
  }
  long long v11 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 56) = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 40) = v11;
  sub_4BC93C(a1 + 72, a2 + 16);
  uint64_t v12 = *((void *)a2 + 20);
  *(unsigned char *)(a1 + 176) = *((unsigned char *)a2 + 168);
  *(void *)(a1 + 168) = v12;
  return a1;
}

void sub_DE812C(_Unwind_Exception *exception_object)
{
  int v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_DE8150(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t result = sub_45FB38(a2);
  if ((result & 1) == 0)
  {
    sub_DE8278(a1, (uint64_t)a2, a3);
    __darwin_ct_rune_t v7 = (long long *)sub_648134((uint64_t)a2);
    *(_DWORD *)(a3 + 40) |= 0x40u;
    uint64_t v8 = *(void *)(a3 + 8);
    __darwin_ct_rune_t v9 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
    if (v8) {
      __darwin_ct_rune_t v9 = (uint64_t *)*v9;
    }
    sub_1881DF4((std::string **)(a3 + 704), v7, v9);
    __darwin_ct_rune_t v10 = (long long *)sub_64818C((uint64_t)a2);
    *(_DWORD *)(a3 + 40) |= 0x80u;
    long long v11 = (std::string **)(a3 + 712);
    uint64_t v12 = *(void *)(a3 + 8);
    int v13 = (uint64_t **)(v12 & 0xFFFFFFFFFFFFFFFCLL);
    if (v12)
    {
      sub_1881DF4(v11, v10, *v13);
      uint64_t result = nullsub_1(a2);
      uint64_t v14 = *(void *)result;
      uint64_t v15 = *(void *)(result + 8);
      if (*(void *)result == v15) {
        return result;
      }
    }
    else
    {
      sub_1881DF4(v11, v10, (uint64_t *)v13);
      uint64_t result = nullsub_1(a2);
      uint64_t v14 = *(void *)result;
      uint64_t v15 = *(void *)(result + 8);
      if (*(void *)result == v15) {
        return result;
      }
    }
    do
    {
      sub_DE8478(a1, v14, a3);
      sub_DE8630(a1, v14, a3);
      uint64_t result = sub_DE87E4(a1, v14, a3);
      v14 += 12328;
    }
    while (v14 != v15);
  }
  return result;
}

void sub_DE8278(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 40) |= 0x200u;
  uint64_t v4 = *(void *)(a3 + 728);
  if (!v4)
  {
    uint64_t v6 = *(void *)(a3 + 8);
    __darwin_ct_rune_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
    if (v6) {
      __darwin_ct_rune_t v7 = (void *)*v7;
    }
    sub_13D6D2C((uint64_t)v7);
    uint64_t v4 = v8;
    *(void *)(a3 + 728) = v8;
  }
  __darwin_ct_rune_t v9 = (const std::string **)sub_64790C(a2);
  *(_DWORD *)(v4 + 16) |= 2u;
  uint64_t v10 = *(void *)(v4 + 32);
  if (!v10)
  {
    uint64_t v11 = *(void *)(v4 + 8);
    uint64_t v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
    if (v11) {
      uint64_t v12 = (void *)*v12;
    }
    sub_13D6A1C((uint64_t)v12);
    uint64_t v10 = v13;
    *(void *)(v4 + 32) = v13;
  }
  sub_5F4D30(v9, v10);
  uint64_t v14 = (const std::string **)sub_647A98(a2);
  uint64_t v15 = v14;
  *(_DWORD *)(v4 + 16) |= 4u;
  uint64_t v16 = *(void *)(v4 + 40);
  if (v16)
  {
    sub_5F4D30(v14, v16);
    __darwin_ct_rune_t v17 = (void *)sub_393A78(a2);
    if (sub_45FB38(v17)) {
      return;
    }
    goto LABEL_15;
  }
  uint64_t v18 = *(void *)(v4 + 8);
  __darwin_ct_rune_t v19 = (void *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
  if (v18) {
    __darwin_ct_rune_t v19 = (void *)*v19;
  }
  sub_13D6A1C((uint64_t)v19);
  *(void *)(v4 + 40) = v20;
  sub_5F4D30(v15, v20);
  __darwin_ct_rune_t v21 = (void *)sub_393A78(a2);
  if (!sub_45FB38(v21))
  {
LABEL_15:
    __darwin_ct_rune_t v22 = (const std::string **)sub_393A78(a2);
    __darwin_ct_rune_t v23 = v22;
    *(_DWORD *)(v4 + 16) |= 4u;
    uint64_t v24 = *(void *)(v4 + 40);
    if (v24)
    {
    }
    else
    {
      uint64_t v25 = *(void *)(v4 + 8);
      __darwin_ct_rune_t v26 = (void *)(v25 & 0xFFFFFFFFFFFFFFFCLL);
      if (v25) {
        __darwin_ct_rune_t v26 = (void *)*v26;
      }
      sub_13D6A1C((uint64_t)v26);
      uint64_t v24 = v27;
      *(void *)(v4 + 40) = v27;
      __darwin_ct_rune_t v22 = v23;
    }
    sub_5F4D30(v22, v24);
  }
}

uint64_t sub_DE8418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_DE8478(a1, a2, a3);
  sub_DE8630(a1, a2, a3);

  return sub_DE87E4(a1, a2, a3);
}

void sub_DE8478(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 7520;
  if (sub_6390F8(a2 + 7520))
  {
    uint64_t v6 = (const std::string **)sub_638F28(v5);
    *(_DWORD *)(a3 + 40) |= 0x40000u;
    uint64_t v7 = *(void *)(a3 + 800);
    if (v7)
    {
      *(_DWORD *)(v7 + 16) |= 1u;
      uint64_t v8 = *(void *)(v7 + 96);
      if (v8)
      {
LABEL_11:
        sub_5F4D30(v6, v8);
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v9 = *(void *)(a3 + 8);
      uint64_t v10 = (void *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
      if (v9) {
        uint64_t v10 = (void *)*v10;
      }
      uint64_t v7 = sub_13D6C7C((uint64_t)v10);
      *(void *)(a3 + 800) = v7;
      *(_DWORD *)(v7 + 16) |= 1u;
      uint64_t v8 = *(void *)(v7 + 96);
      if (v8) {
        goto LABEL_11;
      }
    }
    uint64_t v11 = *(void *)(v7 + 8);
    uint64_t v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
    if (v11) {
      uint64_t v12 = (void *)*v12;
    }
    sub_13D6A1C((uint64_t)v12);
    uint64_t v8 = v13;
    *(void *)(v7 + 96) = v13;
    goto LABEL_11;
  }
LABEL_12:
  uint64_t v14 = a2 + 8336;
  if (sub_6390F8(v14))
  {
    uint64_t v15 = sub_638F28(v14);
    *(_DWORD *)(a3 + 40) |= 0x80000u;
    uint64_t v16 = *(void *)(a3 + 808);
    if (v16)
    {
      *(_DWORD *)(v16 + 16) |= 1u;
      uint64_t v17 = *(void *)(v16 + 96);
      if (v17)
      {
LABEL_15:
        uint64_t v18 = (const std::string **)v15;
LABEL_17:
        sub_5F4D30(v18, v17);
        return;
      }
    }
    else
    {
      uint64_t v19 = *(void *)(a3 + 8);
      uint64_t v20 = (void *)(v19 & 0xFFFFFFFFFFFFFFFCLL);
      if (v19) {
        uint64_t v20 = (void *)*v20;
      }
      uint64_t v16 = sub_13D6C7C((uint64_t)v20);
      *(void *)(a3 + 808) = v16;
      *(_DWORD *)(v16 + 16) |= 1u;
      uint64_t v17 = *(void *)(v16 + 96);
      if (v17) {
        goto LABEL_15;
      }
    }
    uint64_t v21 = *(void *)(v16 + 8);
    __darwin_ct_rune_t v22 = (void *)(v21 & 0xFFFFFFFFFFFFFFFCLL);
    if (v21) {
      __darwin_ct_rune_t v22 = (void *)*v22;
    }
    sub_13D6A1C((uint64_t)v22);
    uint64_t v17 = v23;
    *(void *)(v16 + 96) = v23;
    uint64_t v18 = (const std::string **)v15;
    goto LABEL_17;
  }
}

void sub_DE8630(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 7472);
  uint64_t v6 = *(void *)(a2 + 7480);
  if (v5 != v6)
  {
    while (sub_638A18(v5) != 53)
    {
      v5 += 408;
      if (v5 == v6)
      {
        uint64_t v5 = v6;
        break;
      }
    }
    if (v5 != *(void *)(a2 + 7480))
    {
      uint64_t v7 = sub_638A44(v5);
      uint64_t v8 = *(const std::string ***)v7;
      uint64_t v9 = *(const std::string ***)(v7 + 8);
      if (*(const std::string ***)v7 != v9)
      {
        do
        {
          while (1)
          {
            uint64_t v12 = *(_DWORD **)(a3 + 336);
            if (v12)
            {
              uint64_t v13 = *(int *)(a3 + 328);
              if ((int)v13 < *v12) {
                break;
              }
            }
            sub_13D6A1C(*(void *)(a3 + 320));
            uint64_t v11 = sub_188CDC8(a3 + 320, v10);
            sub_5F4D30(v8, v11);
            v8 += 20;
            if (v8 == v9) {
              goto LABEL_12;
            }
          }
          *(_DWORD *)(a3 + 328) = v13 + 1;
          sub_5F4D30(v8, *(void *)&v12[2 * v13 + 2]);
          v8 += 20;
        }
        while (v8 != v9);
      }
    }
  }
LABEL_12:
  uint64_t v14 = *(void *)(a2 + 7472);
  uint64_t v15 = *(void *)(a2 + 7480);
  if (v14 != v15)
  {
    while (sub_638A18(v14) != 67)
    {
      v14 += 408;
      if (v14 == v15)
      {
        uint64_t v14 = v15;
        break;
      }
    }
    if (v14 != *(void *)(a2 + 7480))
    {
      uint64_t v16 = sub_638A44(v14);
      uint64_t v17 = *(const std::string ***)v16;
      uint64_t v18 = *(const std::string ***)(v16 + 8);
      if (*(const std::string ***)v16 != v18)
      {
        do
        {
          while (1)
          {
            uint64_t v21 = *(_DWORD **)(a3 + 360);
            if (v21)
            {
              uint64_t v22 = *(int *)(a3 + 352);
              if ((int)v22 < *v21) {
                break;
              }
            }
            sub_13D6A1C(*(void *)(a3 + 344));
            uint64_t v20 = sub_188CDC8(a3 + 344, v19);
            sub_5F4D30(v17, v20);
            v17 += 20;
            if (v17 == v18) {
              return;
            }
          }
          *(_DWORD *)(a3 + 352) = v22 + 1;
          sub_5F4D30(v17, *(void *)&v21[2 * v22 + 2]);
          v17 += 20;
        }
        while (v17 != v18);
      }
    }
  }
}

uint64_t sub_DE87E4(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3 = -1775253149 * ((*(void *)(a2 + 1072) - *(void *)(a2 + 1064)) >> 5);
  if (v3)
  {
    uint64_t v5 = result;
    unsigned int v6 = 0;
    uint64_t v7 = (void *)(a2 + 1064);
    do
    {
      uint64_t v8 = sub_4A5E10(v7, v6);
      uint64_t v10 = *(_DWORD **)(v5 + 16);
      uint64_t v9 = *(_DWORD **)(v5 + 24);
      uint64_t v11 = v10;
      if (v10 != v9)
      {
        uint64_t v11 = *(_DWORD **)(v5 + 16);
        while (*v11 != 3)
        {
          if (++v11 == v9)
          {
            uint64_t v11 = *(_DWORD **)(v5 + 24);
            break;
          }
        }
      }
      uint64_t v12 = *(void *)(*(void *)(a3 + 72) + 8 * (int)v6 + 8);
      if (v11 != v9)
      {
        sub_DE8C0C(v5, v8, *(void *)(*(void *)(a3 + 72) + 8 * (int)v6 + 8));
        uint64_t v10 = *(_DWORD **)(v5 + 16);
        uint64_t v9 = *(_DWORD **)(v5 + 24);
      }
      uint64_t v13 = v9;
      if (v10 == v9)
      {
LABEL_15:
        if (v13 == v9) {
          goto LABEL_3;
        }
      }
      else
      {
        while (*v10 != 2)
        {
          if (++v10 == v9)
          {
            uint64_t v13 = v9;
            goto LABEL_15;
          }
        }
        if (v10 == v9) {
          goto LABEL_3;
        }
      }
      sub_DE8D3C(v5, v8, v12);
LABEL_3:
      sub_DE90F8(v5, v8, v12);
      sub_DE8A60(v5, v8, v12);
      uint64_t result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))v5)(v5, v8, v12);
      ++v6;
    }
    while (v6 != v3);
  }
  return result;
}

void sub_DE8978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(_DWORD **)(a1 + 16);
  unsigned int v6 = *(_DWORD **)(a1 + 24);
  uint64_t v8 = v7;
  if (v7 != v6)
  {
    uint64_t v8 = *(_DWORD **)(a1 + 16);
    while (*v8 != 3)
    {
      if (++v8 == v6)
      {
        uint64_t v8 = *(_DWORD **)(a1 + 24);
        break;
      }
    }
  }
  if (v8 != v6)
  {
    sub_DE8C0C(a1, a2, a3);
    uint64_t v7 = *(_DWORD **)(a1 + 16);
    unsigned int v6 = *(_DWORD **)(a1 + 24);
  }
  uint64_t v9 = v6;
  if (v7 == v6)
  {
LABEL_12:
    if (v9 == v6) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  while (*v7 != 2)
  {
    if (++v7 == v6)
    {
      uint64_t v9 = v6;
      goto LABEL_12;
    }
  }
  if (v7 != v6) {
LABEL_13:
  }
    sub_DE8D3C(a1, a2, a3);
LABEL_14:

  sub_DE90F8(a1, a2, a3);
}

void sub_DE8A60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 40) |= 0x10u;
  uint64_t v4 = *(void *)(a3 + 208);
  if (v4)
  {
    *(_DWORD *)(v4 + 40) |= 0x20u;
    uint64_t v5 = *(void *)(v4 + 88);
    if (v5) {
      goto LABEL_3;
    }
LABEL_8:
    uint64_t v11 = *(void *)(v4 + 8);
    uint64_t v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
    if (v11) {
      uint64_t v12 = (void *)*v12;
    }
    uint64_t v5 = sub_13D6C7C((uint64_t)v12);
    *(void *)(v4 + 88) = v5;
    uint64_t v6 = *(void *)(a2 + 1712);
    uint64_t v7 = *(void *)(a2 + 1720);
    if (v6 == v7) {
      return;
    }
    goto LABEL_13;
  }
  uint64_t v9 = *(void *)(a3 + 8);
  uint64_t v10 = (void *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
  if (v9) {
    uint64_t v10 = (void *)*v10;
  }
  uint64_t v4 = sub_13D7014((uint64_t)v10);
  *(void *)(a3 + 208) = v4;
  *(_DWORD *)(v4 + 40) |= 0x20u;
  uint64_t v5 = *(void *)(v4 + 88);
  if (!v5) {
    goto LABEL_8;
  }
LABEL_3:
  uint64_t v6 = *(void *)(a2 + 1712);
  uint64_t v7 = *(void *)(a2 + 1720);
  if (v6 == v7) {
    return;
  }
LABEL_13:
  while (2)
  {
    uint64_t v13 = sub_638A44(v6);
    uint64_t v14 = *(const std::string ***)v13;
    uint64_t v15 = *(const std::string ***)(v13 + 8);
    while (v14 != v15)
    {
      int v20 = sub_638A18(v6);
      if (v20 == 2)
      {
        uint64_t v21 = *(_DWORD **)(v5 + 88);
        if (!v21 || (uint64_t v22 = *(int *)(v5 + 80), (int)v22 >= *v21))
        {
          sub_13D6A1C(*(void *)(v5 + 72));
          uint64_t v17 = v16;
          uint64_t v18 = v5 + 72;
          goto LABEL_15;
        }
        *(_DWORD *)(v5 + 80) = v22 + 1;
LABEL_27:
        uint64_t v19 = *(void *)&v21[2 * v22 + 2];
LABEL_16:
        sub_5F4D30(v14, v19);
        goto LABEL_17;
      }
      if (v20 == 1)
      {
        uint64_t v21 = *(_DWORD **)(v5 + 64);
        if (v21)
        {
          uint64_t v22 = *(int *)(v5 + 56);
          if ((int)v22 < *v21)
          {
            *(_DWORD *)(v5 + 56) = v22 + 1;
            goto LABEL_27;
          }
        }
        sub_13D6A1C(*(void *)(v5 + 48));
        uint64_t v17 = v23;
        uint64_t v18 = v5 + 48;
LABEL_15:
        uint64_t v19 = sub_188CDC8(v18, v17);
        goto LABEL_16;
      }
LABEL_17:
      v14 += 20;
    }
    v6 += 1080;
    if (v6 != v7) {
      continue;
    }
    break;
  }
}

std::string *sub_DE8C0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (std::string *)sub_638A44(a2 + 896);
  uint64_t v5 = (long long **)result->__r_.__value_.__r.__words[0];
  if (result->__r_.__value_.__r.__words[0] == result->__r_.__value_.__l.__size_ || *v5 == v5[1]) {
    return result;
  }
  *(_DWORD *)(a3 + 40) |= 0x10u;
  uint64_t v6 = *(void *)(a3 + 208);
  if (!v6)
  {
    uint64_t v8 = *(void *)(a3 + 8);
    uint64_t v9 = (void *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
    if (v8) {
      uint64_t v9 = (void *)*v9;
    }
    uint64_t v6 = sub_13D7014((uint64_t)v9);
    *(void *)(a3 + 208) = v6;
    *(_DWORD *)(v6 + 40) |= 4u;
    uint64_t v7 = *(void **)(v6 + 64);
    if (v7) {
      goto LABEL_13;
    }
    goto LABEL_10;
  }
  *(_DWORD *)(v6 + 40) |= 4u;
  uint64_t v7 = *(void **)(v6 + 64);
  if (!v7)
  {
LABEL_10:
    uint64_t v10 = *(void *)(v6 + 8);
    uint64_t v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
    if (v10) {
      uint64_t v11 = (void *)*v11;
    }
    uint64_t v7 = sub_13D6E58((uint64_t)v11);
    *(void *)(v6 + 64) = v7;
  }
LABEL_13:
  uint64_t v12 = *v5;
  *((_DWORD *)v7 + 4) |= 1u;
  uint64_t v13 = v7[1];
  uint64_t v14 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFFCLL);
  if (v13)
  {
    uint64_t v14 = (uint64_t *)*v14;
    uint64_t v15 = (std::string **)(v7 + 3);
  }
  else
  {
    uint64_t v15 = (std::string **)(v7 + 3);
  }
  return sub_1881DF4(v15, v12, v14);
}

void sub_DE8D3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (void *)(a2 + 896);
  if (!sub_639044(a2 + 896)) {
    return;
  }
  *(_DWORD *)(a3 + 40) |= 0x10u;
  uint64_t v5 = *(void *)(a3 + 208);
  if (v5)
  {
    *(_DWORD *)(v5 + 40) |= 0x40u;
    uint64_t v6 = *(void *)(v5 + 96);
    if (v6) {
      goto LABEL_4;
    }
LABEL_9:
    uint64_t v11 = *(void *)(v5 + 8);
    uint64_t v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
    if (v11) {
      uint64_t v12 = (void *)*v12;
    }
    uint64_t v6 = sub_13D6C7C((uint64_t)v12);
    *(void *)(v5 + 96) = v6;
    uint64_t v7 = *(const std::string ***)sub_638A44((uint64_t)v4);
    uint64_t v8 = *(_DWORD **)(v6 + 40);
    if (!v8) {
      goto LABEL_16;
    }
    goto LABEL_12;
  }
  uint64_t v9 = *(void *)(a3 + 8);
  uint64_t v10 = (void *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
  if (v9) {
    uint64_t v10 = (void *)*v10;
  }
  uint64_t v5 = sub_13D7014((uint64_t)v10);
  *(void *)(a3 + 208) = v5;
  *(_DWORD *)(v5 + 40) |= 0x40u;
  uint64_t v6 = *(void *)(v5 + 96);
  if (!v6) {
    goto LABEL_9;
  }
LABEL_4:
  uint64_t v7 = *(const std::string ***)sub_638A44((uint64_t)v4);
  uint64_t v8 = *(_DWORD **)(v6 + 40);
  if (!v8) {
    goto LABEL_16;
  }
LABEL_12:
  uint64_t v13 = *(int *)(v6 + 32);
  if ((int)v13 < *v8)
  {
    *(_DWORD *)(v6 + 32) = v13 + 1;
    sub_5F4D30(v7, *(void *)&v8[2 * v13 + 2]);
    if (sub_6390F8((uint64_t)v4)) {
      goto LABEL_17;
    }
    goto LABEL_14;
  }
LABEL_16:
  sub_13D6A1C(*(void *)(v6 + 24));
  uint64_t v17 = sub_188CDC8(v6 + 24, v16);
  sub_5F4D30(v7, v17);
  if (sub_6390F8((uint64_t)v4))
  {
LABEL_17:
    uint64_t v14 = (const std::string **)sub_638F28((uint64_t)v4);
    *(_DWORD *)(v6 + 16) |= 1u;
    uint64_t v15 = *(void *)(v6 + 96);
    if (v15) {
      goto LABEL_21;
    }
    goto LABEL_18;
  }
LABEL_14:
  uint64_t v14 = (const std::string **)sub_638F80((uint64_t)v4);
  *(_DWORD *)(v6 + 16) |= 1u;
  uint64_t v15 = *(void *)(v6 + 96);
  if (v15) {
    goto LABEL_21;
  }
LABEL_18:
  uint64_t v18 = *(void *)(v6 + 8);
  uint64_t v19 = (void *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
  if (v18) {
    uint64_t v19 = (void *)*v19;
  }
  sub_13D6A1C((uint64_t)v19);
  uint64_t v15 = v20;
  *(void *)(v6 + 96) = v20;
LABEL_21:
  sub_5F4D30(v14, v15);
  uint64_t v21 = sub_638F88((uint64_t)v4);
  int v22 = v21[8];
  if (v22 == 1)
  {
    if (v21[1] == -1 && *v21 == -1 && *((void *)v21 + 1) == *((void *)v21 + 2)) {
      goto LABEL_33;
    }
  }
  else if (v22 || *v21 == -1)
  {
    goto LABEL_33;
  }
  uint64_t v23 = sub_638F88((uint64_t)v4);
  *(_DWORD *)(a3 + 40) |= 0x100u;
  uint64_t v25 = *(void *)(a3 + 240);
  if (!v25)
  {
    uint64_t v26 = *(void *)(a3 + 8);
    uint64_t v27 = (void *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
    if (v26) {
      uint64_t v27 = (void *)*v27;
    }
    uint64_t v25 = sub_13DAB08((uint64_t)v27);
    *(void *)(a3 + 240) = v25;
  }
  sub_523A2C((uint64_t)v23, v25, v24);
LABEL_33:
  uint64_t v28 = sub_1883FB0((void *)(a3 + 16), dword_254EAA8, 11, (uint64_t)&off_252CE78, 0);
  sub_638F30(v4, (uint64_t)__p);
  __darwin_ct_rune_t v29 = (uint64_t **)(v28 + 72);
  __darwin_ct_rune_t v30 = *(int **)(v28 + 88);
  if (!v30)
  {
    int v32 = *(_DWORD *)(v28 + 84);
LABEL_41:
    sub_188CC60(v28 + 72, v32 + 1);
    __darwin_ct_rune_t v30 = *(int **)(v28 + 88);
    int v32 = *v30;
    goto LABEL_42;
  }
  uint64_t v31 = *(int *)(v28 + 80);
  int v32 = *v30;
  if ((int)v31 < *v30)
  {
    *(_DWORD *)(v28 + 80) = v31 + 1;
    uint64_t v33 = *(void *)&v30[2 * v31 + 2];
    if (*(char *)(v33 + 23) < 0) {
      operator delete(*(void **)v33);
    }
    long long v34 = *(_OWORD *)__p;
    *(void *)(v33 + 16) = v41;
    *(_OWORD *)uint64_t v33 = v34;
    return;
  }
  if (v32 == *(_DWORD *)(v28 + 84)) {
    goto LABEL_41;
  }
LABEL_42:
  int *v30 = v32 + 1;
  if (!*v29) {
    operator new();
  }
  *__darwin_ct_rune_t v36 = v35;
  v36[1] = (uint64_t)sub_3A6EDC;
  long long v37 = *(_OWORD *)__p;
  *(void *)(v35 + 16) = v41;
  *(_OWORD *)uint64_t v35 = v37;
  __p[1] = 0;
  uint64_t v41 = 0;
  __p[0] = 0;
  uint64_t v38 = *(void *)(v28 + 88);
  uint64_t v39 = *(int *)(v28 + 80);
  *(_DWORD *)(v28 + 80) = v39 + 1;
  *(void *)(v38 + 8 * v39 + 8) = v35;
  if (SHIBYTE(v41) < 0) {
    operator delete(__p[0]);
  }
}

void sub_DE90DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_DE90F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 40) |= 0x10u;
  uint64_t v4 = *(void *)(a3 + 208);
  if (v4)
  {
    *(_DWORD *)(v4 + 40) |= 0x20u;
    uint64_t v5 = *(void *)(v4 + 88);
    if (v5) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  uint64_t v7 = *(void *)(a3 + 8);
  uint64_t v8 = (void *)(v7 & 0xFFFFFFFFFFFFFFFCLL);
  if (v7) {
    uint64_t v8 = (void *)*v8;
  }
  uint64_t v4 = sub_13D7014((uint64_t)v8);
  *(void *)(a3 + 208) = v4;
  *(_DWORD *)(v4 + 40) |= 0x20u;
  uint64_t v5 = *(void *)(v4 + 88);
  if (!v5)
  {
LABEL_7:
    uint64_t v9 = *(void *)(v4 + 8);
    uint64_t v10 = (void *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
    if (v9) {
      uint64_t v10 = (void *)*v10;
    }
    uint64_t v5 = sub_13D6C7C((uint64_t)v10);
    *(void *)(v4 + 88) = v5;
  }
LABEL_10:
  uint64_t v11 = *(void *)(a2 + 1712);
  uint64_t v12 = *(void *)(a2 + 1720);
  if (v11 != v12)
  {
    while (sub_638A18(v11) != 3)
    {
      v11 += 1080;
      if (v11 == v12) {
        return;
      }
    }
    if (sub_638B00(v11))
    {
      uint64_t v13 = sub_638A44(v11);
      uint64_t v14 = *(const std::string ***)v13;
      uint64_t v15 = *(const std::string ***)(v13 + 8);
      if (*(const std::string ***)v13 != v15)
      {
        do
        {
          while (1)
          {
            uint64_t v18 = *(_DWORD **)(v5 + 40);
            if (v18)
            {
              uint64_t v19 = *(int *)(v5 + 32);
              if ((int)v19 < *v18) {
                break;
              }
            }
            sub_13D6A1C(*(void *)(v5 + 24));
            uint64_t v17 = sub_188CDC8(v5 + 24, v16);
            sub_5F4D30(v14, v17);
            v14 += 20;
            if (v14 == v15) {
              goto LABEL_21;
            }
          }
          *(_DWORD *)(v5 + 32) = v19 + 1;
          sub_5F4D30(v14, *(void *)&v18[2 * v19 + 2]);
          v14 += 20;
        }
        while (v14 != v15);
      }
LABEL_21:
      uint64_t v20 = (const std::string **)sub_638F80(v11);
      *(_DWORD *)(v5 + 16) |= 1u;
      uint64_t v21 = *(void *)(v5 + 96);
      if (!v21)
      {
        uint64_t v22 = *(void *)(v5 + 8);
        uint64_t v23 = (void *)(v22 & 0xFFFFFFFFFFFFFFFCLL);
        if (v22) {
          uint64_t v23 = (void *)*v23;
        }
        sub_13D6A1C((uint64_t)v23);
        uint64_t v21 = v24;
        *(void *)(v5 + 96) = v24;
      }
      sub_5F4D30(v20, v21);
    }
  }
}

void sub_DE92D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 40) |= 0x10u;
  uint64_t v5 = *(void *)(a3 + 208);
  if (v5)
  {
    *(_DWORD *)(v5 + 40) |= 0x80u;
    uint64_t v6 = *(void *)(v5 + 104);
    if (v6) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v9 = *(void *)(a3 + 8);
    uint64_t v10 = (void *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
    if (v9) {
      uint64_t v10 = (void *)*v10;
    }
    uint64_t v5 = sub_13D7014((uint64_t)v10);
    *(void *)(a3 + 208) = v5;
    *(_DWORD *)(v5 + 40) |= 0x80u;
    uint64_t v6 = *(void *)(v5 + 104);
    if (v6)
    {
LABEL_3:
      uint64_t v7 = *(void *)(a2 + 1736);
      uint64_t v8 = *(void *)(a2 + 1744);
      if (v7 == v8) {
        return;
      }
      goto LABEL_11;
    }
  }
  uint64_t v11 = *(void *)(v5 + 8);
  uint64_t v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
  if (v11) {
    uint64_t v12 = (void *)*v12;
  }
  uint64_t v6 = sub_13D6DB4((uint64_t)v12);
  *(void *)(v5 + 104) = v6;
  uint64_t v7 = *(void *)(a2 + 1736);
  uint64_t v8 = *(void *)(a2 + 1744);
  if (v7 != v8)
  {
LABEL_11:
    int v13 = 0;
    do
    {
      uint64_t v14 = sub_638A44(v7);
      uint64_t v15 = *(const std::string ***)v14;
      uint64_t v16 = *(const std::string ***)(v14 + 8);
      while (v15 != v16)
      {
        switch(sub_638A18(v7))
        {
          case 0x1Du:
            *(_DWORD *)(v6 + 16) |= 4u;
            uint64_t v18 = *(void *)(v6 + 64);
            if (!v18)
            {
              uint64_t v19 = *(void *)(v6 + 8);
              uint64_t v20 = (void *)(v19 & 0xFFFFFFFFFFFFFFFCLL);
              if (v19) {
                uint64_t v20 = (void *)*v20;
              }
              sub_13D6A1C((uint64_t)v20);
              uint64_t v18 = v21;
              *(void *)(v6 + 64) = v21;
            }
            goto LABEL_15;
          case 0x1Fu:
            *(_DWORD *)(v6 + 16) |= 8u;
            uint64_t v18 = *(void *)(v6 + 72);
            if (!v18)
            {
              uint64_t v22 = *(void *)(v6 + 8);
              uint64_t v23 = (void *)(v22 & 0xFFFFFFFFFFFFFFFCLL);
              if (v22) {
                uint64_t v23 = (void *)*v23;
              }
              sub_13D6A1C((uint64_t)v23);
              uint64_t v18 = v24;
              *(void *)(v6 + 72) = v24;
            }
            goto LABEL_15;
          case 0x2Au:
            *(_DWORD *)(v6 + 16) |= 2u;
            uint64_t v18 = *(void *)(v6 + 56);
            if (!v18)
            {
              uint64_t v25 = *(void *)(v6 + 8);
              uint64_t v26 = (void *)(v25 & 0xFFFFFFFFFFFFFFFCLL);
              if (v25) {
                uint64_t v26 = (void *)*v26;
              }
              sub_13D6A1C((uint64_t)v26);
              uint64_t v18 = v27;
              *(void *)(v6 + 56) = v27;
            }
            goto LABEL_15;
          case 0x2Bu:
            *(_DWORD *)(v6 + 16) |= 1u;
            uint64_t v18 = *(void *)(v6 + 48);
            if (!v18)
            {
              uint64_t v28 = *(void *)(v6 + 8);
              __darwin_ct_rune_t v29 = (void *)(v28 & 0xFFFFFFFFFFFFFFFCLL);
              if (v28) {
                __darwin_ct_rune_t v29 = (void *)*v29;
              }
              sub_13D6A1C((uint64_t)v29);
              uint64_t v18 = v30;
              *(void *)(v6 + 48) = v30;
            }
            goto LABEL_15;
          case 0x2Cu:
            int v13 = sub_69124(v7);
            uint64_t v31 = *(_DWORD **)(v6 + 40);
            if (v31 && (uint64_t v32 = *(int *)(v6 + 32), (int)v32 < *v31))
            {
              *(_DWORD *)(v6 + 32) = v32 + 1;
              uint64_t v18 = *(void *)&v31[2 * v32 + 2];
            }
            else
            {
              sub_13D6A1C(*(void *)(v6 + 24));
              uint64_t v18 = sub_188CDC8(v6 + 24, v17);
            }
LABEL_15:
            sub_5F4D30(v15, v18);
            break;
          default:
            break;
        }
        v15 += 20;
      }
      if (sub_69124(v7))
      {
        *(_DWORD *)(a3 + 40) |= 0x400000u;
        *(unsigned char *)(a3 + 292) = 1;
      }
      *(_DWORD *)(v6 + 16) |= 0x10u;
      *(_DWORD *)(v6 + 80) = v13;
      v7 += 408;
    }
    while (v7 != v8);
  }
}

uint64_t sub_DE95C8(uint64_t a1, int *a2)
{
  *(void *)a1 = &off_243EE40;
  int v4 = *a2;
  char v5 = *((unsigned char *)a2 + 4);
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 12) = v5;
  *(_DWORD *)(a1 + 8) = v4;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v7 = (unsigned char *)*((void *)a2 + 1);
  uint64_t v6 = (unsigned char *)*((void *)a2 + 2);
  int64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0) {
      sub_2E00();
    }
    uint64_t v9 = (char *)operator new(v6 - v7);
    *(void *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = v9;
    uint64_t v10 = &v9[4 * (v8 >> 2)];
    *(void *)(a1 + 32) = v10;
    memcpy(v9, v7, v8);
    *(void *)(a1 + 24) = v10;
  }
  long long v11 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 56) = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 40) = v11;
  sub_4BC93C(a1 + 72, a2 + 16);
  uint64_t v12 = *((void *)a2 + 20);
  *(unsigned char *)(a1 + 176) = *((unsigned char *)a2 + 168);
  *(void *)(a1 + 168) = v12;
  return a1;
}

void sub_DE96A4(_Unwind_Exception *exception_object)
{
  int v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_DE96C8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t result = sub_45FB38(a2);
  if ((result & 1) == 0)
  {
    sub_DE8278(a1, (uint64_t)a2, a3);
    uint64_t v7 = (long long *)sub_648134((uint64_t)a2);
    *(_DWORD *)(a3 + 40) |= 0x40u;
    uint64_t v8 = *(void *)(a3 + 8);
    uint64_t v9 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
    if (v8) {
      uint64_t v9 = (uint64_t *)*v9;
    }
    sub_1881DF4((std::string **)(a3 + 704), v7, v9);
    uint64_t v10 = (long long *)sub_64818C((uint64_t)a2);
    *(_DWORD *)(a3 + 40) |= 0x80u;
    long long v11 = (std::string **)(a3 + 712);
    uint64_t v12 = *(void *)(a3 + 8);
    int v13 = (uint64_t **)(v12 & 0xFFFFFFFFFFFFFFFCLL);
    if (v12)
    {
      sub_1881DF4(v11, v10, *v13);
      uint64_t result = nullsub_1(a2);
      uint64_t v14 = *(void *)result;
      uint64_t v15 = *(void *)(result + 8);
      if (*(void *)result == v15) {
        return result;
      }
    }
    else
    {
      sub_1881DF4(v11, v10, (uint64_t *)v13);
      uint64_t result = nullsub_1(a2);
      uint64_t v14 = *(void *)result;
      uint64_t v15 = *(void *)(result + 8);
      if (*(void *)result == v15) {
        return result;
      }
    }
    do
    {
      sub_DE8478(a1, v14, a3);
      sub_DE8630(a1, v14, a3);
      uint64_t result = sub_DE9850(a1, v14, a3);
      v14 += 12328;
    }
    while (v14 != v15);
  }
  return result;
}

uint64_t sub_DE97F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_DE8478(a1, a2, a3);
  sub_DE8630(a1, a2, a3);

  return sub_DE9850(a1, a2, a3);
}

uint64_t sub_DE9850(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3 = -1775253149 * ((*(void *)(a2 + 1072) - *(void *)(a2 + 1064)) >> 5);
  if (v3)
  {
    uint64_t v5 = result;
    unsigned int v6 = 0;
    uint64_t v7 = (void *)(a2 + 1064);
    do
    {
      uint64_t v8 = sub_4A5E10(v7, v6);
      uint64_t v10 = *(_DWORD **)(v5 + 16);
      uint64_t v9 = *(_DWORD **)(v5 + 24);
      long long v11 = v10;
      if (v10 != v9)
      {
        long long v11 = *(_DWORD **)(v5 + 16);
        while (*v11 != 3)
        {
          if (++v11 == v9)
          {
            long long v11 = *(_DWORD **)(v5 + 24);
            break;
          }
        }
      }
      uint64_t v12 = *(void *)(*(void *)(a3 + 72) + 8 * (int)v6 + 8);
      if (v11 != v9)
      {
        sub_DE8C0C(v5, v8, *(void *)(*(void *)(a3 + 72) + 8 * (int)v6 + 8));
        uint64_t v10 = *(_DWORD **)(v5 + 16);
        uint64_t v9 = *(_DWORD **)(v5 + 24);
      }
      int v13 = v9;
      if (v10 == v9)
      {
LABEL_15:
        if (v13 == v9) {
          goto LABEL_3;
        }
      }
      else
      {
        while (*v10 != 2)
        {
          if (++v10 == v9)
          {
            int v13 = v9;
            goto LABEL_15;
          }
        }
        if (v10 == v9) {
          goto LABEL_3;
        }
      }
      sub_DE9ACC(v5, v8, v12);
LABEL_3:
      sub_DE90F8(v5, v8, v12);
      sub_DE8A60(v5, v8, v12);
      uint64_t result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))v5)(v5, v8, v12);
      ++v6;
    }
    while (v6 != v3);
  }
  return result;
}

void sub_DE99E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(_DWORD **)(a1 + 16);
  unsigned int v6 = *(_DWORD **)(a1 + 24);
  uint64_t v8 = v7;
  if (v7 != v6)
  {
    uint64_t v8 = *(_DWORD **)(a1 + 16);
    while (*v8 != 3)
    {
      if (++v8 == v6)
      {
        uint64_t v8 = *(_DWORD **)(a1 + 24);
        break;
      }
    }
  }
  if (v8 != v6)
  {
    sub_DE8C0C(a1, a2, a3);
    uint64_t v7 = *(_DWORD **)(a1 + 16);
    unsigned int v6 = *(_DWORD **)(a1 + 24);
  }
  uint64_t v9 = v6;
  if (v7 == v6)
  {
LABEL_12:
    if (v9 == v6) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  while (*v7 != 2)
  {
    if (++v7 == v6)
    {
      uint64_t v9 = v6;
      goto LABEL_12;
    }
  }
  if (v7 != v6) {
LABEL_13:
  }
    sub_DE9ACC(a1, a2, a3);
LABEL_14:

  sub_DE90F8(a1, a2, a3);
}

void sub_DE9ACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = (void *)(a2 + 896);
  if (!sub_639044(a2 + 896)) {
    return;
  }
  *(_DWORD *)(a3 + 40) |= 0x10u;
  uint64_t v5 = *(void *)(a3 + 208);
  if (v5)
  {
    *(_DWORD *)(v5 + 40) |= 0x40u;
    uint64_t v6 = *(void *)(v5 + 96);
    if (v6) {
      goto LABEL_4;
    }
LABEL_9:
    uint64_t v11 = *(void *)(v5 + 8);
    uint64_t v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
    if (v11) {
      uint64_t v12 = (void *)*v12;
    }
    uint64_t v6 = sub_13D6C7C((uint64_t)v12);
    *(void *)(v5 + 96) = v6;
    uint64_t v7 = *(const std::string ***)sub_638A44((uint64_t)v4);
    uint64_t v8 = *(_DWORD **)(v6 + 40);
    if (!v8) {
      goto LABEL_16;
    }
    goto LABEL_12;
  }
  uint64_t v9 = *(void *)(a3 + 8);
  uint64_t v10 = (void *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
  if (v9) {
    uint64_t v10 = (void *)*v10;
  }
  uint64_t v5 = sub_13D7014((uint64_t)v10);
  *(void *)(a3 + 208) = v5;
  *(_DWORD *)(v5 + 40) |= 0x40u;
  uint64_t v6 = *(void *)(v5 + 96);
  if (!v6) {
    goto LABEL_9;
  }
LABEL_4:
  uint64_t v7 = *(const std::string ***)sub_638A44((uint64_t)v4);
  uint64_t v8 = *(_DWORD **)(v6 + 40);
  if (!v8) {
    goto LABEL_16;
  }
LABEL_12:
  uint64_t v13 = *(int *)(v6 + 32);
  if ((int)v13 < *v8)
  {
    *(_DWORD *)(v6 + 32) = v13 + 1;
    sub_5F4D30(v7, *(void *)&v8[2 * v13 + 2]);
    if (sub_6390F8((uint64_t)v4)) {
      goto LABEL_17;
    }
    goto LABEL_14;
  }
LABEL_16:
  sub_13D6A1C(*(void *)(v6 + 24));
  uint64_t v17 = sub_188CDC8(v6 + 24, v16);
  sub_5F4D30(v7, v17);
  if (sub_6390F8((uint64_t)v4))
  {
LABEL_17:
    uint64_t v14 = (const std::string **)sub_638F28((uint64_t)v4);
    *(_DWORD *)(v6 + 16) |= 1u;
    uint64_t v15 = *(void *)(v6 + 96);
    if (v15) {
      goto LABEL_21;
    }
    goto LABEL_18;
  }
LABEL_14:
  uint64_t v14 = (const std::string **)sub_638F80((uint64_t)v4);
  *(_DWORD *)(v6 + 16) |= 1u;
  uint64_t v15 = *(void *)(v6 + 96);
  if (v15) {
    goto LABEL_21;
  }
LABEL_18:
  uint64_t v18 = *(void *)(v6 + 8);
  uint64_t v19 = (void *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
  if (v18) {
    uint64_t v19 = (void *)*v19;
  }
  sub_13D6A1C((uint64_t)v19);
  uint64_t v15 = v20;
  *(void *)(v6 + 96) = v20;
LABEL_21:
  sub_5F4D30(v14, v15);
  uint64_t v21 = sub_638F88((uint64_t)v4);
  int v22 = v21[8];
  if (v22 == 1)
  {
    if (v21[1] == -1 && *v21 == -1 && *((void *)v21 + 1) == *((void *)v21 + 2)) {
      goto LABEL_33;
    }
  }
  else if (v22 || *v21 == -1)
  {
    goto LABEL_33;
  }
  uint64_t v23 = sub_638F88((uint64_t)v4);
  *(_DWORD *)(a3 + 40) |= 0x100u;
  uint64_t v25 = *(void *)(a3 + 240);
  if (!v25)
  {
    uint64_t v26 = *(void *)(a3 + 8);
    uint64_t v27 = (void *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
    if (v26) {
      uint64_t v27 = (void *)*v27;
    }
    uint64_t v25 = sub_13DAB08((uint64_t)v27);
    *(void *)(a3 + 240) = v25;
  }
  sub_523A2C((uint64_t)v23, v25, v24);
LABEL_33:
  uint64_t v28 = sub_1883FB0((void *)(a3 + 16), dword_254EAA8, 11, (uint64_t)&off_252CE78, 0);
  sub_638F30(v4, (uint64_t)__p);
  __darwin_ct_rune_t v29 = (uint64_t **)(v28 + 72);
  uint64_t v30 = *(int **)(v28 + 88);
  if (!v30)
  {
    int v32 = *(_DWORD *)(v28 + 84);
LABEL_41:
    sub_188CC60(v28 + 72, v32 + 1);
    uint64_t v30 = *(int **)(v28 + 88);
    int v32 = *v30;
    goto LABEL_42;
  }
  uint64_t v31 = *(int *)(v28 + 80);
  int v32 = *v30;
  if ((int)v31 < *v30)
  {
    *(_DWORD *)(v28 + 80) = v31 + 1;
    uint64_t v33 = *(void *)&v30[2 * v31 + 2];
    if (*(char *)(v33 + 23) < 0) {
      operator delete(*(void **)v33);
    }
    long long v34 = *(_OWORD *)__p;
    *(void *)(v33 + 16) = v41;
    *(_OWORD *)uint64_t v33 = v34;
    return;
  }
  if (v32 == *(_DWORD *)(v28 + 84)) {
    goto LABEL_41;
  }
LABEL_42:
  int *v30 = v32 + 1;
  if (!*v29) {
    operator new();
  }
  *__darwin_ct_rune_t v36 = v35;
  v36[1] = (uint64_t)sub_3A6EDC;
  long long v37 = *(_OWORD *)__p;
  *(void *)(v35 + 16) = v41;
  *(_OWORD *)uint64_t v35 = v37;
  __p[1] = 0;
  uint64_t v41 = 0;
  __p[0] = 0;
  uint64_t v38 = *(void *)(v28 + 88);
  uint64_t v39 = *(int *)(v28 + 80);
  *(_DWORD *)(v28 + 80) = v39 + 1;
  *(void *)(v38 + 8 * v39 + 8) = v35;
  if (SHIBYTE(v41) < 0) {
    operator delete(__p[0]);
  }
}

void sub_DE9E6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_DE9E88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 40) |= 0x10u;
  uint64_t v5 = *(void *)(a3 + 208);
  if (v5)
  {
    *(_DWORD *)(v5 + 40) |= 0x80u;
    uint64_t v6 = *(void *)(v5 + 104);
    if (v6) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v9 = *(void *)(a3 + 8);
    uint64_t v10 = (void *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
    if (v9) {
      uint64_t v10 = (void *)*v10;
    }
    uint64_t v5 = sub_13D7014((uint64_t)v10);
    *(void *)(a3 + 208) = v5;
    *(_DWORD *)(v5 + 40) |= 0x80u;
    uint64_t v6 = *(void *)(v5 + 104);
    if (v6)
    {
LABEL_3:
      uint64_t v7 = *(void *)(a2 + 1736);
      uint64_t v8 = *(void *)(a2 + 1744);
      if (v7 == v8) {
        return;
      }
      goto LABEL_11;
    }
  }
  uint64_t v11 = *(void *)(v5 + 8);
  uint64_t v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
  if (v11) {
    uint64_t v12 = (void *)*v12;
  }
  uint64_t v6 = sub_13D6DB4((uint64_t)v12);
  *(void *)(v5 + 104) = v6;
  uint64_t v7 = *(void *)(a2 + 1736);
  uint64_t v8 = *(void *)(a2 + 1744);
  if (v7 != v8)
  {
LABEL_11:
    int v13 = 0;
    do
    {
      uint64_t v14 = sub_638A44(v7);
      uint64_t v15 = *(const std::string ***)v14;
      uint64_t v16 = *(const std::string ***)(v14 + 8);
      while (v15 != v16)
      {
        switch(sub_638A18(v7))
        {
          case 0x1Du:
            *(_DWORD *)(v6 + 16) |= 4u;
            uint64_t v18 = *(void *)(v6 + 64);
            if (!v18)
            {
              uint64_t v19 = *(void *)(v6 + 8);
              uint64_t v20 = (void *)(v19 & 0xFFFFFFFFFFFFFFFCLL);
              if (v19) {
                uint64_t v20 = (void *)*v20;
              }
              sub_13D6A1C((uint64_t)v20);
              uint64_t v18 = v21;
              *(void *)(v6 + 64) = v21;
            }
            goto LABEL_15;
          case 0x1Fu:
            *(_DWORD *)(v6 + 16) |= 8u;
            uint64_t v18 = *(void *)(v6 + 72);
            if (!v18)
            {
              uint64_t v22 = *(void *)(v6 + 8);
              uint64_t v23 = (void *)(v22 & 0xFFFFFFFFFFFFFFFCLL);
              if (v22) {
                uint64_t v23 = (void *)*v23;
              }
              sub_13D6A1C((uint64_t)v23);
              uint64_t v18 = v24;
              *(void *)(v6 + 72) = v24;
            }
            goto LABEL_15;
          case 0x2Au:
            *(_DWORD *)(v6 + 16) |= 2u;
            uint64_t v18 = *(void *)(v6 + 56);
            if (!v18)
            {
              uint64_t v25 = *(void *)(v6 + 8);
              uint64_t v26 = (void *)(v25 & 0xFFFFFFFFFFFFFFFCLL);
              if (v25) {
                uint64_t v26 = (void *)*v26;
              }
              sub_13D6A1C((uint64_t)v26);
              uint64_t v18 = v27;
              *(void *)(v6 + 56) = v27;
            }
            goto LABEL_15;
          case 0x2Bu:
            *(_DWORD *)(v6 + 16) |= 1u;
            uint64_t v18 = *(void *)(v6 + 48);
            if (!v18)
            {
              uint64_t v28 = *(void *)(v6 + 8);
              __darwin_ct_rune_t v29 = (void *)(v28 & 0xFFFFFFFFFFFFFFFCLL);
              if (v28) {
                __darwin_ct_rune_t v29 = (void *)*v29;
              }
              sub_13D6A1C((uint64_t)v29);
              uint64_t v18 = v30;
              *(void *)(v6 + 48) = v30;
            }
            goto LABEL_15;
          case 0x2Cu:
            int v13 = sub_69124(v7);
            uint64_t v31 = *(_DWORD **)(v6 + 40);
            if (v31 && (uint64_t v32 = *(int *)(v6 + 32), (int)v32 < *v31))
            {
              *(_DWORD *)(v6 + 32) = v32 + 1;
              uint64_t v18 = *(void *)&v31[2 * v32 + 2];
            }
            else
            {
              sub_13D6A1C(*(void *)(v6 + 24));
              uint64_t v18 = sub_188CDC8(v6 + 24, v17);
            }
LABEL_15:
            sub_5F4D30(v15, v18);
            break;
          default:
            break;
        }
        v15 += 20;
      }
      if (sub_69124(v7))
      {
        *(_DWORD *)(a3 + 40) |= 0x400000u;
        *(unsigned char *)(a3 + 292) = 1;
      }
      *(_DWORD *)(v6 + 16) |= 0x10u;
      *(_DWORD *)(v6 + 80) = v13;
      v7 += 408;
    }
    while (v7 != v8);
  }
}

uint64_t sub_DEA17C(uint64_t a1, int *a2)
{
  *(void *)a1 = &off_243EE58;
  int v4 = *a2;
  char v5 = *((unsigned char *)a2 + 4);
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 12) = v5;
  *(_DWORD *)(a1 + 8) = v4;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v7 = (unsigned char *)*((void *)a2 + 1);
  uint64_t v6 = (unsigned char *)*((void *)a2 + 2);
  int64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0) {
      sub_2E00();
    }
    uint64_t v9 = (char *)operator new(v6 - v7);
    *(void *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = v9;
    uint64_t v10 = &v9[4 * (v8 >> 2)];
    *(void *)(a1 + 32) = v10;
    memcpy(v9, v7, v8);
    *(void *)(a1 + 24) = v10;
  }
  long long v11 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 56) = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 40) = v11;
  sub_4BC93C(a1 + 72, a2 + 16);
  uint64_t v12 = *((void *)a2 + 20);
  *(unsigned char *)(a1 + 176) = *((unsigned char *)a2 + 168);
  *(void *)(a1 + 168) = v12;
  return a1;
}

void sub_DEA258(_Unwind_Exception *exception_object)
{
  int v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_DEA27C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t result = sub_45FB38(a2);
  if ((result & 1) == 0)
  {
    sub_DE8278(a1, (uint64_t)a2, a3);
    uint64_t v7 = (long long *)sub_648134((uint64_t)a2);
    *(_DWORD *)(a3 + 40) |= 0x40u;
    uint64_t v8 = *(void *)(a3 + 8);
    uint64_t v9 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
    if (v8) {
      uint64_t v9 = (uint64_t *)*v9;
    }
    sub_1881DF4((std::string **)(a3 + 704), v7, v9);
    uint64_t v10 = (long long *)sub_64818C((uint64_t)a2);
    *(_DWORD *)(a3 + 40) |= 0x80u;
    long long v11 = (std::string **)(a3 + 712);
    uint64_t v12 = *(void *)(a3 + 8);
    int v13 = (uint64_t **)(v12 & 0xFFFFFFFFFFFFFFFCLL);
    if (v12)
    {
      sub_1881DF4(v11, v10, *v13);
      uint64_t result = nullsub_1(a2);
      uint64_t v14 = *(void *)result;
      uint64_t v15 = *(void *)(result + 8);
      if (*(void *)result == v15) {
        return result;
      }
    }
    else
    {
      sub_1881DF4(v11, v10, (uint64_t *)v13);
      uint64_t result = nullsub_1(a2);
      uint64_t v14 = *(void *)result;
      uint64_t v15 = *(void *)(result + 8);
      if (*(void *)result == v15) {
        return result;
      }
    }
    do
    {
      sub_DE8478(a1, v14, a3);
      sub_DE8630(a1, v14, a3);
      uint64_t result = sub_DEA404(a1, v14, a3);
      v14 += 12328;
    }
    while (v14 != v15);
  }
  return result;
}

uint64_t sub_DEA3A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_DE8478(a1, a2, a3);
  sub_DE8630(a1, a2, a3);

  return sub_DEA404(a1, a2, a3);
}

uint64_t sub_DEA404(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3 = -1775253149 * ((*(void *)(a2 + 1072) - *(void *)(a2 + 1064)) >> 5);
  if (v3)
  {
    uint64_t v5 = result;
    unsigned int v6 = 0;
    uint64_t v7 = (void *)(a2 + 1064);
    do
    {
      uint64_t v8 = sub_4A5E10(v7, v6);
      uint64_t v10 = *(_DWORD **)(v5 + 16);
      uint64_t v9 = *(_DWORD **)(v5 + 24);
      long long v11 = v10;
      if (v10 != v9)
      {
        long long v11 = *(_DWORD **)(v5 + 16);
        while (*v11 != 3)
        {
          if (++v11 == v9)
          {
            long long v11 = *(_DWORD **)(v5 + 24);
            break;
          }
        }
      }
      uint64_t v12 = *(void *)(*(void *)(a3 + 72) + 8 * (int)v6 + 8);
      if (v11 != v9)
      {
        sub_DE8C0C(v5, v8, *(void *)(*(void *)(a3 + 72) + 8 * (int)v6 + 8));
        uint64_t v10 = *(_DWORD **)(v5 + 16);
        uint64_t v9 = *(_DWORD **)(v5 + 24);
      }
      int v13 = v9;
      if (v10 == v9)
      {
LABEL_15:
        if (v13 == v9) {
          goto LABEL_3;
        }
      }
      else
      {
        while (*v10 != 2)
        {
          if (++v10 == v9)
          {
            int v13 = v9;
            goto LABEL_15;
          }
        }
        if (v10 == v9) {
          goto LABEL_3;
        }
      }
      sub_DEA680(v5, v8, v12);
LABEL_3:
      sub_DE90F8(v5, v8, v12);
      sub_DE8A60(v5, v8, v12);
      uint64_t result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))v5)(v5, v8, v12);
      ++v6;
    }
    while (v6 != v3);
  }
  return result;
}

void sub_DEA598(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(_DWORD **)(a1 + 16);
  unsigned int v6 = *(_DWORD **)(a1 + 24);
  uint64_t v8 = v7;
  if (v7 != v6)
  {
    uint64_t v8 = *(_DWORD **)(a1 + 16);
    while (*v8 != 3)
    {
      if (++v8 == v6)
      {
        uint64_t v8 = *(_DWORD **)(a1 + 24);
        break;
      }
    }
  }
  if (v8 != v6)
  {
    sub_DE8C0C(a1, a2, a3);
    uint64_t v7 = *(_DWORD **)(a1 + 16);
    unsigned int v6 = *(_DWORD **)(a1 + 24);
  }
  uint64_t v9 = v6;
  if (v7 == v6)
  {
LABEL_12:
    if (v9 == v6) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  while (*v7 != 2)
  {
    if (++v7 == v6)
    {
      uint64_t v9 = v6;
      goto LABEL_12;
    }
  }
  if (v7 != v6) {
LABEL_13:
  }
    sub_DEA680(a1, a2, a3);
LABEL_14:

  sub_DE90F8(a1, a2, a3);
}

void sub_DEA680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = (void *)(a2 + 896);
  if (!sub_639044(a2 + 896)) {
    return;
  }
  *(_DWORD *)(a3 + 40) |= 0x10u;
  uint64_t v5 = *(void *)(a3 + 208);
  if (v5)
  {
    *(_DWORD *)(v5 + 40) |= 0x40u;
    uint64_t v6 = *(void *)(v5 + 96);
    if (v6) {
      goto LABEL_4;
    }
LABEL_9:
    uint64_t v11 = *(void *)(v5 + 8);
    uint64_t v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
    if (v11) {
      uint64_t v12 = (void *)*v12;
    }
    uint64_t v6 = sub_13D6C7C((uint64_t)v12);
    *(void *)(v5 + 96) = v6;
    uint64_t v7 = *(const std::string ***)sub_638A44((uint64_t)v4);
    uint64_t v8 = *(_DWORD **)(v6 + 40);
    if (!v8) {
      goto LABEL_16;
    }
    goto LABEL_12;
  }
  uint64_t v9 = *(void *)(a3 + 8);
  uint64_t v10 = (void *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
  if (v9) {
    uint64_t v10 = (void *)*v10;
  }
  uint64_t v5 = sub_13D7014((uint64_t)v10);
  *(void *)(a3 + 208) = v5;
  *(_DWORD *)(v5 + 40) |= 0x40u;
  uint64_t v6 = *(void *)(v5 + 96);
  if (!v6) {
    goto LABEL_9;
  }
LABEL_4:
  uint64_t v7 = *(const std::string ***)sub_638A44((uint64_t)v4);
  uint64_t v8 = *(_DWORD **)(v6 + 40);
  if (!v8) {
    goto LABEL_16;
  }
LABEL_12:
  uint64_t v13 = *(int *)(v6 + 32);
  if ((int)v13 < *v8)
  {
    *(_DWORD *)(v6 + 32) = v13 + 1;
    sub_5F4D30(v7, *(void *)&v8[2 * v13 + 2]);
    if (sub_6390F8((uint64_t)v4)) {
      goto LABEL_17;
    }
    goto LABEL_14;
  }
LABEL_16:
  sub_13D6A1C(*(void *)(v6 + 24));
  uint64_t v17 = sub_188CDC8(v6 + 24, v16);
  sub_5F4D30(v7, v17);
  if (sub_6390F8((uint64_t)v4))
  {
LABEL_17:
    uint64_t v14 = (const std::string **)sub_638F28((uint64_t)v4);
    *(_DWORD *)(v6 + 16) |= 1u;
    uint64_t v15 = *(void *)(v6 + 96);
    if (v15) {
      goto LABEL_21;
    }
    goto LABEL_18;
  }
LABEL_14:
  uint64_t v14 = (const std::string **)sub_638F80((uint64_t)v4);
  *(_DWORD *)(v6 + 16) |= 1u;
  uint64_t v15 = *(void *)(v6 + 96);
  if (v15) {
    goto LABEL_21;
  }
LABEL_18:
  uint64_t v18 = *(void *)(v6 + 8);
  uint64_t v19 = (void *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
  if (v18) {
    uint64_t v19 = (void *)*v19;
  }
  sub_13D6A1C((uint64_t)v19);
  uint64_t v15 = v20;
  *(void *)(v6 + 96) = v20;
LABEL_21:
  sub_5F4D30(v14, v15);
  uint64_t v21 = sub_638F88((uint64_t)v4);
  int v22 = v21[8];
  if (v22 == 1)
  {
    if (v21[1] == -1 && *v21 == -1 && *((void *)v21 + 1) == *((void *)v21 + 2)) {
      goto LABEL_33;
    }
  }
  else if (v22 || *v21 == -1)
  {
    goto LABEL_33;
  }
  uint64_t v23 = sub_638F88((uint64_t)v4);
  *(_DWORD *)(a3 + 40) |= 0x100u;
  uint64_t v25 = *(void *)(a3 + 240);
  if (!v25)
  {
    uint64_t v26 = *(void *)(a3 + 8);
    uint64_t v27 = (void *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
    if (v26) {
      uint64_t v27 = (void *)*v27;
    }
    uint64_t v25 = sub_13DAB08((uint64_t)v27);
    *(void *)(a3 + 240) = v25;
  }
  sub_523A2C((uint64_t)v23, v25, v24);
LABEL_33:
  uint64_t v28 = sub_1883FB0((void *)(a3 + 16), dword_254EAA8, 11, (uint64_t)&off_252CE78, 0);
  sub_638F30(v4, (uint64_t)__p);
  __darwin_ct_rune_t v29 = (uint64_t **)(v28 + 72);
  uint64_t v30 = *(int **)(v28 + 88);
  if (!v30)
  {
    int v32 = *(_DWORD *)(v28 + 84);
LABEL_41:
    sub_188CC60(v28 + 72, v32 + 1);
    uint64_t v30 = *(int **)(v28 + 88);
    int v32 = *v30;
    goto LABEL_42;
  }
  uint64_t v31 = *(int *)(v28 + 80);
  int v32 = *v30;
  if ((int)v31 < *v30)
  {
    *(_DWORD *)(v28 + 80) = v31 + 1;
    uint64_t v33 = *(void *)&v30[2 * v31 + 2];
    if (*(char *)(v33 + 23) < 0) {
      operator delete(*(void **)v33);
    }
    long long v34 = *(_OWORD *)__p;
    *(void *)(v33 + 16) = v41;
    *(_OWORD *)uint64_t v33 = v34;
    return;
  }
  if (v32 == *(_DWORD *)(v28 + 84)) {
    goto LABEL_41;
  }
LABEL_42:
  int *v30 = v32 + 1;
  if (!*v29) {
    operator new();
  }
  *__darwin_ct_rune_t v36 = v35;
  v36[1] = (uint64_t)sub_3A6EDC;
  long long v37 = *(_OWORD *)__p;
  *(void *)(v35 + 16) = v41;
  *(_OWORD *)uint64_t v35 = v37;
  __p[1] = 0;
  uint64_t v41 = 0;
  __p[0] = 0;
  uint64_t v38 = *(void *)(v28 + 88);
  uint64_t v39 = *(int *)(v28 + 80);
  *(_DWORD *)(v28 + 80) = v39 + 1;
  *(void *)(v38 + 8 * v39 + 8) = v35;
  if (SHIBYTE(v41) < 0) {
    operator delete(__p[0]);
  }
}

void sub_DEAA20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_DEAA3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 40) |= 0x10u;
  uint64_t v5 = *(void *)(a3 + 208);
  if (v5)
  {
    *(_DWORD *)(v5 + 40) |= 0x80u;
    uint64_t v6 = *(void *)(v5 + 104);
    if (v6) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v9 = *(void *)(a3 + 8);
    uint64_t v10 = (void *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
    if (v9) {
      uint64_t v10 = (void *)*v10;
    }
    uint64_t v5 = sub_13D7014((uint64_t)v10);
    *(void *)(a3 + 208) = v5;
    *(_DWORD *)(v5 + 40) |= 0x80u;
    uint64_t v6 = *(void *)(v5 + 104);
    if (v6)
    {
LABEL_3:
      uint64_t v7 = *(void *)(a2 + 1736);
      uint64_t v8 = *(void *)(a2 + 1744);
      if (v7 == v8) {
        return;
      }
      goto LABEL_11;
    }
  }
  uint64_t v11 = *(void *)(v5 + 8);
  uint64_t v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
  if (v11) {
    uint64_t v12 = (void *)*v12;
  }
  uint64_t v6 = sub_13D6DB4((uint64_t)v12);
  *(void *)(v5 + 104) = v6;
  uint64_t v7 = *(void *)(a2 + 1736);
  uint64_t v8 = *(void *)(a2 + 1744);
  if (v7 != v8)
  {
LABEL_11:
    int v13 = 0;
    do
    {
      uint64_t v14 = sub_638A44(v7);
      uint64_t v15 = *(const std::string ***)v14;
      uint64_t v16 = *(const std::string ***)(v14 + 8);
      while (v15 != v16)
      {
        switch(sub_638A18(v7))
        {
          case 0x1Du:
            *(_DWORD *)(v6 + 16) |= 4u;
            uint64_t v18 = *(void *)(v6 + 64);
            if (!v18)
            {
              uint64_t v19 = *(void *)(v6 + 8);
              uint64_t v20 = (void *)(v19 & 0xFFFFFFFFFFFFFFFCLL);
              if (v19) {
                uint64_t v20 = (void *)*v20;
              }
              sub_13D6A1C((uint64_t)v20);
              uint64_t v18 = v21;
              *(void *)(v6 + 64) = v21;
            }
            goto LABEL_15;
          case 0x1Fu:
            *(_DWORD *)(v6 + 16) |= 8u;
            uint64_t v18 = *(void *)(v6 + 72);
            if (!v18)
            {
              uint64_t v22 = *(void *)(v6 + 8);
              uint64_t v23 = (void *)(v22 & 0xFFFFFFFFFFFFFFFCLL);
              if (v22) {
                uint64_t v23 = (void *)*v23;
              }
              sub_13D6A1C((uint64_t)v23);
              uint64_t v18 = v24;
              *(void *)(v6 + 72) = v24;
            }
            goto LABEL_15;
          case 0x2Au:
            *(_DWORD *)(v6 + 16) |= 2u;
            uint64_t v18 = *(void *)(v6 + 56);
            if (!v18)
            {
              uint64_t v25 = *(void *)(v6 + 8);
              uint64_t v26 = (void *)(v25 & 0xFFFFFFFFFFFFFFFCLL);
              if (v25) {
                uint64_t v26 = (void *)*v26;
              }
              sub_13D6A1C((uint64_t)v26);
              uint64_t v18 = v27;
              *(void *)(v6 + 56) = v27;
            }
            goto LABEL_15;
          case 0x2Bu:
            *(_DWORD *)(v6 + 16) |= 1u;
            uint64_t v18 = *(void *)(v6 + 48);
            if (!v18)
            {
              uint64_t v28 = *(void *)(v6 + 8);
              __darwin_ct_rune_t v29 = (void *)(v28 & 0xFFFFFFFFFFFFFFFCLL);
              if (v28) {
                __darwin_ct_rune_t v29 = (void *)*v29;
              }
              sub_13D6A1C((uint64_t)v29);
              uint64_t v18 = v30;
              *(void *)(v6 + 48) = v30;
            }
            goto LABEL_15;
          case 0x2Cu:
            int v13 = sub_69124(v7);
            uint64_t v31 = *(_DWORD **)(v6 + 40);
            if (v31 && (uint64_t v32 = *(int *)(v6 + 32), (int)v32 < *v31))
            {
              *(_DWORD *)(v6 + 32) = v32 + 1;
              uint64_t v18 = *(void *)&v31[2 * v32 + 2];
            }
            else
            {
              sub_13D6A1C(*(void *)(v6 + 24));
              uint64_t v18 = sub_188CDC8(v6 + 24, v17);
            }
LABEL_15:
            sub_5F4D30(v15, v18);
            break;
          default:
            break;
        }
        v15 += 20;
      }
      if (sub_69124(v7))
      {
        *(_DWORD *)(a3 + 40) |= 0x400000u;
        *(unsigned char *)(a3 + 292) = 1;
      }
      *(_DWORD *)(v6 + 16) |= 0x10u;
      *(_DWORD *)(v6 + 80) = v13;
      v7 += 408;
    }
    while (v7 != v8);
  }
}

double sub_DEAD30()
{
  byte_25EB79F = 1;
  word_25EB788 = 65;
  byte_25EB7B7 = 1;
  word_25EB7A0 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25EB848 = 0u;
  *(_OWORD *)&qword_25EB858 = 0u;
  dword_25EB868 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25EB848, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25EB848, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25EB848, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25EB848, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25EB7CF = 8;
  strcpy((char *)&qword_25EB7B8, "any_mode");
  byte_25EB7E7 = 7;
  strcpy((char *)&dword_25EB7D0, "cycling");
  byte_25EB7FF = 7;
  strcpy((char *)&dword_25EB7E8, "driving");
  byte_25EB817 = 7;
  strcpy((char *)&dword_25EB800, "walking");
  qword_25EB820 = 0;
  qword_25EB828 = 0;
  qword_25EB818 = 0;
  v0 = operator new(9uLL);
  *(void *)v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25EB818 = (uint64_t)v0;
  qword_25EB820 = (uint64_t)(v0 + 9);
  qword_25EB828 = (uint64_t)(v0 + 9);
  qword_25EB830 = 0;
  qword_25EB838 = 0;
  unk_25EB840 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25EB838 = (uint64_t)(v1 + 9);
  unk_25EB840 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25EB830 = (uint64_t)v1;
  return result;
}

void sub_DEAFF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25EB858) {
    sub_20B0984((void **)qword_25EB858);
  }
  long long v37 = (void *)xmmword_25EB848;
  *(void *)&xmmword_25EB848 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t (***sub_DEB098(uint64_t a1))()
{
  int v1 = *(_DWORD *)(a1 + 80);
  switch(v1)
  {
    case 2:
      uint64_t v6 = *(uint64_t (****)())(a1 + 24);
      if (!v6) {
        uint64_t v6 = &off_25399D8;
      }
      int v5 = v6[10];
      goto LABEL_14;
    case 3:
      int v3 = *(uint64_t (****)())(a1 + 32);
      char v4 = &off_2539A50;
LABEL_8:
      if (!v3) {
        int v3 = v4;
      }
      int v5 = v3[6];
LABEL_14:
      if (v5) {
        return (uint64_t (***)())v5;
      }
      else {
        return &off_253F1A0;
      }
    case 4:
      uint64_t v2 = *(uint64_t (****)())(a1 + 40);
      if (!v2) {
        uint64_t v2 = &off_2539A90;
      }
      int v3 = (uint64_t (***)())v2[6];
      char v4 = &off_253F2E8;
      goto LABEL_8;
  }
  double result = (uint64_t (***)())&unk_25EB960;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_25EB870, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_25EB870))
    {
      sub_15B0830((uint64_t)&unk_25EB960, 0, 0);
      __cxa_guard_release(&qword_25EB870);
    }
    return (uint64_t (***)())&unk_25EB960;
  }
  return result;
}

void sub_DEB1A0(_Unwind_Exception *a1)
{
}

void sub_DEB1B8(void *a1, double *a2, uint64_t a3)
{
  *(void *)long long __dst = operator new(0x20uLL);
  *(_OWORD *)&__dst[8] = xmmword_20B8870;
  strcpy(*(char **)__dst, "ClientAnalyticDataBuilder");
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v186 = 0;
  int v5 = sub_374CDC((uint64_t)a1, (uint64_t)__dst, (uint64_t *)__p);
  uint64_t v6 = (void **)__p[0];
  if (__p[0])
  {
    char v7 = (void **)__p[1];
    int v8 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      int v8 = __p[0];
    }
    __p[1] = v6;
    operator delete(v8);
  }
  if ((__dst[23] & 0x80000000) != 0) {
    operator delete(*(void **)__dst);
  }
  __dst[23] = 6;
  strcpy(__dst, "enable");
  BOOL v9 = sub_29D62C(v5, (uint64_t)__dst);
  BOOL v10 = v9;
  if ((__dst[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__dst);
    if (!v10) {
      return;
    }
  }
  else if (!v9)
  {
    return;
  }
  uint64_t v11 = *(void *)a2;
  uint64_t v12 = *(uint64_t (****)())(*(void *)a2 + 344);
  if (v12) {
    char v13 = *(uint64_t (****)())(*(void *)a2 + 344);
  }
  else {
    char v13 = &off_2536218;
  }
  int v14 = v13[5];
  unint64_t v15 = (unint64_t)v13[3] & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v15 + 23) < 0)
  {
    sub_4200(__dst, *(void **)v15, *(void *)(v15 + 8));
    uint64_t v19 = *(uint64_t (****)())(v11 + 344);
    if (!v19) {
      uint64_t v19 = &off_2536218;
    }
    unint64_t v17 = (unint64_t)v19[4] & 0xFFFFFFFFFFFFFFFELL;
    if ((*(char *)(v17 + 23) & 0x80000000) == 0) {
      goto LABEL_22;
    }
  }
  else
  {
    long long v16 = *(_OWORD *)v15;
    *(void *)&__dst[16] = *(void *)(v15 + 16);
    *(_OWORD *)long long __dst = v16;
    if (!v12) {
      uint64_t v12 = &off_2536218;
    }
    unint64_t v17 = (unint64_t)v12[4] & 0xFFFFFFFFFFFFFFFELL;
    if ((*(char *)(v17 + 23) & 0x80000000) == 0)
    {
LABEL_22:
      long long v18 = *(_OWORD *)v17;
      uint64_t v186 = *(void *)(v17 + 16);
      *(_OWORD *)__p = v18;
      goto LABEL_27;
    }
  }
  sub_4200(__p, *(void **)v17, *(void *)(v17 + 8));
LABEL_27:
  uint64_t v20 = *(uint64_t (****)())(v11 + 304);
  if (!v20) {
    uint64_t v20 = &off_2535C50;
  }
  int v21 = *((_DWORD *)v20 + 32);
  int v22 = *((_DWORD *)v20 + 41);
  sub_E2C084(a3, (uint64_t)v183);
  *(_DWORD *)(a3 + 40) |= 0x4000u;
  uint64_t v23 = *(void *)(a3 + 488);
  if (!v23)
  {
    uint64_t v24 = *(void *)(a3 + 8);
    uint64_t v25 = (void *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
    if (v24) {
      uint64_t v25 = (void *)*v25;
    }
    uint64_t v23 = sub_1633338((uint64_t)v25);
    *(void *)(a3 + 488) = v23;
  }
  uint64_t v26 = sub_1883FB0((void *)(v23 + 16), dword_254EA20, 11, (uint64_t)&off_252CDA8, 0);
  uint64_t v27 = v26;
  int v28 = *(_DWORD *)(v26 + 16) | 1;
  *(_DWORD *)(v26 + 16) = v28;
  __darwin_ct_rune_t v171 = *(void **)(v26 + 24);
  if (!v171)
  {
    uint64_t v29 = *(void *)(v26 + 8);
    uint64_t v30 = (void *)(v29 & 0xFFFFFFFFFFFFFFFCLL);
    if (v29) {
      uint64_t v30 = (void *)*v30;
    }
    __darwin_ct_rune_t v171 = sub_11BF084((uint64_t)v30);
    *(void *)(v27 + 24) = v171;
    *(_DWORD *)(v27 + 16) |= 2u;
    uint64_t v176 = *(void *)(v27 + 32);
    if (v176) {
      goto LABEL_42;
    }
    goto LABEL_39;
  }
  *(_DWORD *)(v26 + 16) = v28 | 2;
  uint64_t v176 = *(void *)(v26 + 32);
  if (!v176)
  {
LABEL_39:
    uint64_t v31 = *(void *)(v27 + 8);
    uint64_t v32 = (void *)(v31 & 0xFFFFFFFFFFFFFFFCLL);
    if (v31) {
      uint64_t v32 = (void *)*v32;
    }
    uint64_t v176 = sub_11BF2E4((uint64_t)v32);
    *(void *)(v27 + 32) = v176;
  }
LABEL_42:
  int v33 = *((_DWORD *)v171 + 4);
  v171[12] = v14;
  *((_DWORD *)v171 + 4) = v33 | 0x19;
  uint64_t v34 = v171[1];
  uint64_t v35 = (uint64_t *)(v34 & 0xFFFFFFFFFFFFFFFCLL);
  if (v34) {
    uint64_t v35 = (uint64_t *)*v35;
  }
  sub_1881DF4((std::string **)v171 + 9, (long long *)__dst, v35);
  *((_DWORD *)v171 + 4) |= 2u;
  uint64_t v36 = v171[1];
  long long v37 = (uint64_t *)(v36 & 0xFFFFFFFFFFFFFFFCLL);
  if (v36) {
    long long v37 = (uint64_t *)*v37;
  }
  sub_1881DF4((std::string **)v171 + 10, (long long *)__p, v37);
  int v38 = *((_DWORD *)v171 + 4);
  *((_DWORD *)v171 + 4) = v38 | 0x60;
  *((_DWORD *)v171 + 26) = v21;
  *((_DWORD *)v171 + 27) = v22;
  unint64_t v39 = v184;
  if ((v184 & 0x80u) != 0) {
    unint64_t v39 = (unint64_t)v183[1];
  }
  if (v39 == 3)
  {
    *((_DWORD *)v171 + 4) = v38 | 0x64;
    uint64_t v40 = v171[1];
    uint64_t v41 = (uint64_t *)(v40 & 0xFFFFFFFFFFFFFFFCLL);
    if (v40) {
      uint64_t v41 = (uint64_t *)*v41;
    }
    sub_1881DF4((std::string **)v171 + 11, (long long *)v183, v41);
  }
  __darwin_ct_rune_t v170 = a2;
  uint64_t v42 = *(void *)(v11 + 112);
  if (v42) {
    __darwin_ct_rune_t v43 = (uint64_t *)(v42 + 8);
  }
  else {
    __darwin_ct_rune_t v43 = 0;
  }
  uint64_t v44 = *(int *)(v11 + 104);
  if (!v44) {
    goto LABEL_128;
  }
  __darwin_ct_rune_t v45 = v171 + 6;
  uint64_t v46 = 8 * v44;
  do
  {
    __darwin_ct_rune_t v47 = sub_DEB098(*v43);
    double v48 = *((double *)v47 + 7);
    unint64_t v49 = -1;
    if (v48 <= 180.0)
    {
      double v50 = *((double *)v47 + 6);
      if (v50 >= -85.0511288 && v50 <= 85.0511288 && v48 >= -180.0)
      {
        double v51 = fmax(v50, -85.0511288);
        if (v51 >= 85.0511288) {
          double v52 = 1.48442223;
        }
        else {
          double v52 = v51 * 3.14159265 / 180.0;
        }
        long double v53 = sin(v52);
        LODWORD(v54) = ((log((v53 + 1.0) / (1.0 - v53)) / -12.5663706 + 0.5) * 4294967300.0);
        if (v54 >= 0xFFFFFFFE) {
          uint64_t v54 = 4294967294;
        }
        else {
          uint64_t v54 = v54;
        }
        unint64_t v49 = ((v48 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v54 << 32);
      }
    }
    v181[0] = (void *)v49;
    LODWORD(v181[1]) = 0x7FFFFFFF;
    if (v49 == -1 && v49 > 0xFFFFFFFEFFFFFFFFLL)
    {
      char v55 = 0;
      __darwin_ct_rune_t v56 = (_DWORD *)v171[8];
      if (!v56) {
        goto LABEL_76;
      }
    }
    else
    {
      __darwin_ct_rune_t v57 = (void ***)sub_374CE4(a1);
      char v55 = sub_73930(v57, v181);
      __darwin_ct_rune_t v56 = (_DWORD *)v171[8];
      if (!v56) {
        goto LABEL_76;
      }
    }
    uint64_t v58 = *((int *)v171 + 14);
    if ((int)v58 >= *v56)
    {
LABEL_76:
      __darwin_ct_rune_t v60 = sub_11BF00C(*v45);
      uint64_t v59 = sub_188CDC8((uint64_t)v45, (uint64_t)v60);
      goto LABEL_77;
    }
    *((_DWORD *)v171 + 14) = v58 + 1;
    uint64_t v59 = *(void *)&v56[2 * v58 + 2];
LABEL_77:
    *(_DWORD *)(v59 + 16) |= 1u;
    *(unsigned char *)(v59 + 24) = v55;
    if (v181[0] != (void *)-1)
    {
      __darwin_ct_rune_t v61 = (void ***)sub_374CE4(a1);
      uint64_t v62 = sub_739E8(v61, (unsigned int *)v181);
      if (v62 < 0)
      {
        if ((unsigned __int16)(-v62 % 0x64uLL) <= 0x31u) {
          int v63 = -v62 / 0x64uLL;
        }
        else {
          int v63 = -v62 / 0x64uLL + 1;
        }
        *(_DWORD *)(v59 + 16) |= 2u;
        *(_DWORD *)(v59 + 28) = v63;
      }
    }
    ++v43;
    v46 -= 8;
  }
  while (v46);
  uint64_t v64 = *(unsigned int *)(v11 + 104);
  if ((int)v64 < 2) {
    goto LABEL_95;
  }
  uint64_t v65 = 0;
  uint64_t v66 = 8 * v64 - 8;
  while (2)
  {
    uint64_t v67 = *(void *)(*(void *)(v11 + 112) + v65 + 16);
    int v68 = *(_DWORD *)(v67 + 80);
    __darwin_ct_rune_t v69 = (_DWORD *)v171[5];
    if (v69 && (uint64_t v70 = *((int *)v171 + 8), (int)v70 < *v69))
    {
      *((_DWORD *)v171 + 8) = v70 + 1;
      uint64_t v71 = *(void *)&v69[2 * v70 + 2];
      int v72 = *(_DWORD *)(v71 + 16);
      *(_DWORD *)(v71 + 104) = v68;
      *(_DWORD *)(v71 + 16) = v72 | 6;
      uint64_t v73 = *(void *)(v71 + 96);
      if (!v73)
      {
LABEL_90:
        uint64_t v76 = *(void *)(v71 + 8);
        __darwin_ct_rune_t v77 = (void *)(v76 & 0xFFFFFFFFFFFFFFFCLL);
        if (v76) {
          __darwin_ct_rune_t v77 = (void *)*v77;
        }
        uint64_t v73 = sub_15C1918((uint64_t)v77);
        *(void *)(v71 + 96) = v73;
      }
    }
    else
    {
      uint64_t v74 = sub_11BEF40(v171[3]);
      uint64_t v71 = sub_188CDC8((uint64_t)(v171 + 3), v74);
      int v75 = *(_DWORD *)(v71 + 16);
      *(_DWORD *)(v71 + 104) = v68;
      *(_DWORD *)(v71 + 16) = v75 | 6;
      uint64_t v73 = *(void *)(v71 + 96);
      if (!v73) {
        goto LABEL_90;
      }
    }
    __darwin_ct_rune_t v78 = sub_DEB098(v67);
    sub_15B0ECC(v73, (uint64_t)v78);
    v65 += 8;
    if (v66 != v65) {
      continue;
    }
    break;
  }
  LODWORD(v64) = *(_DWORD *)(v11 + 104);
LABEL_95:
  if (*(_DWORD *)(a3 + 80) == v64 && (int)v64 >= 2)
  {
    uint64_t v172 = v64;
    uint64_t v79 = 1;
    do
    {
      uint64_t v174 = v79;
      uint64_t v80 = 8 * v79;
      uint64_t v81 = *(void *)(*(void *)(a3 + 88) + 8 * v79 + 8);
      if (*(_DWORD *)(v81 + 32))
      {
        __darwin_ct_rune_t v82 = *(uint64_t (****)())(*(void *)(*(void *)(v81 + 40) + 8) + 184);
        if (!v82) {
          __darwin_ct_rune_t v82 = &off_2538EE0;
        }
        __darwin_ct_rune_t v83 = v82[14];
        if (v83) {
          __darwin_ct_rune_t v84 = v83 + 1;
        }
        else {
          __darwin_ct_rune_t v84 = 0;
        }
        uint64_t v85 = *((int *)v82 + 26);
        if (v85)
        {
          uint64_t v86 = *(void *)(v80 + v171[5]);
          __darwin_ct_rune_t v177 = (unsigned int *)(v86 + 24);
          uint64_t v87 = 8 * v85;
          do
          {
            __darwin_ct_rune_t v89 = *v84;
            int v90 = *((_DWORD *)*v84 + 4);
            if ((v90 & 0x40) != 0)
            {
              int v91 = *((_DWORD *)v89 + 13);
              uint64_t v92 = *(unsigned int *)(v86 + 24);
              if (v92 == *(_DWORD *)(v86 + 28))
              {
                unsigned int v93 = v92 + 1;
                sub_188C80C(v177, v92 + 1);
                *(_DWORD *)(*(void *)(v86 + 32) + 4 * v92) = v91;
              }
              else
              {
                *(_DWORD *)(*(void *)(v86 + 32) + 4 * v92) = v91;
                unsigned int v93 = v92 + 1;
              }
              *__darwin_ct_rune_t v177 = v93;
              int v90 = *((_DWORD *)v89 + 4);
            }
            if ((v90 & 8) != 0)
            {
              int v94 = *((_DWORD *)v89 + 10);
              uint64_t v95 = *(unsigned int *)(v86 + 40);
              if (v95 == *(_DWORD *)(v86 + 44))
              {
                int v96 = v95 + 1;
                sub_188C80C((unsigned int *)(v86 + 40), v95 + 1);
                *(_DWORD *)(*(void *)(v86 + 48) + 4 * v95) = v94;
              }
              else
              {
                *(_DWORD *)(*(void *)(v86 + 48) + 4 * v95) = v94;
                int v96 = v95 + 1;
              }
              *(_DWORD *)(v86 + 40) = v96;
              int v90 = *((_DWORD *)v89 + 4);
            }
            if ((v90 & 0x20) != 0)
            {
              int v97 = *((_DWORD *)v89 + 12);
              uint64_t v98 = *(unsigned int *)(v86 + 56);
              if (v98 == *(_DWORD *)(v86 + 60))
              {
                int v99 = v98 + 1;
                sub_188C80C((unsigned int *)(v86 + 56), v98 + 1);
                *(_DWORD *)(*(void *)(v86 + 64) + 4 * v98) = v97;
              }
              else
              {
                *(_DWORD *)(*(void *)(v86 + 64) + 4 * v98) = v97;
                int v99 = v98 + 1;
              }
              *(_DWORD *)(v86 + 56) = v99;
              int v90 = *((_DWORD *)v89 + 4);
            }
            if ((v90 & 4) != 0)
            {
              int v100 = *((_DWORD *)v89 + 9);
              uint64_t v101 = *(unsigned int *)(v86 + 72);
              if (v101 == *(_DWORD *)(v86 + 76))
              {
                int v88 = v101 + 1;
                sub_188C80C((unsigned int *)(v86 + 72), v101 + 1);
                *(_DWORD *)(*(void *)(v86 + 80) + 4 * v101) = v100;
              }
              else
              {
                *(_DWORD *)(*(void *)(v86 + 80) + 4 * v101) = v100;
                int v88 = v101 + 1;
              }
              *(_DWORD *)(v86 + 72) = v88;
            }
            ++v84;
            v87 -= 8;
          }
          while (v87);
        }
      }
      uint64_t v79 = v174 + 1;
    }
    while (v174 + 1 != v172);
  }
LABEL_128:
  int v102 = *(_DWORD *)(a3 + 536);
  unint64_t v103 = *(void *)(a3 + 376) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v103 + 23) < 0)
  {
    sub_4200(v181, *(void **)v103, *(void *)(v103 + 8));
  }
  else
  {
    long long v104 = *(_OWORD *)v103;
    uint64_t v182 = *(void *)(v103 + 16);
    *(_OWORD *)__darwin_ct_rune_t v181 = v104;
  }
  uint64_t v105 = v176;
  double v106 = v170[1];
  int v107 = *(_DWORD *)(v176 + 16);
  *(_DWORD *)(v176 + 88) = v102;
  *(void *)(v176 + 80) = (uint64_t)v106;
  *(_DWORD *)(v176 + 16) = v107 | 7;
  uint64_t v108 = *(void *)(v176 + 8);
  __darwin_ct_rune_t v109 = (uint64_t *)(v108 & 0xFFFFFFFFFFFFFFFCLL);
  if (v108) {
    __darwin_ct_rune_t v109 = (uint64_t *)*v109;
  }
  sub_1881DF4((std::string **)(v176 + 72), (long long *)v181, v109);
  uint64_t v110 = *(void *)(a3 + 296);
  if (v110) {
    __darwin_ct_rune_t v111 = (uint64_t *)(v110 + 8);
  }
  else {
    __darwin_ct_rune_t v111 = 0;
  }
  uint64_t v112 = *(int *)(a3 + 288);
  if (v112)
  {
    __darwin_ct_rune_t v113 = &v111[v112];
    __darwin_ct_rune_t v114 = (uint64_t *)(v176 + 24);
    while (1)
    {
      uint64_t v115 = *v111;
      int v116 = *(_DWORD *)(*v111 + 280);
      uint64_t v117 = *(void *)(*v111 + 292);
      __darwin_ct_rune_t v118 = *(uint64_t (****)())(*v111 + 232);
      if (!v118) {
        __darwin_ct_rune_t v118 = &off_2535340;
      }
      int v119 = *((_DWORD *)v118 + 6);
      __darwin_ct_rune_t v120 = *(_DWORD **)(v105 + 40);
      if (v120 && (uint64_t v121 = *(int *)(v105 + 32), (int)v121 < *v120))
      {
        *(_DWORD *)(v105 + 32) = v121 + 1;
        uint64_t v122 = *(void *)&v120[2 * v121 + 2];
      }
      else
      {
        uint64_t v123 = sub_11BF1C8(*v114);
        uint64_t v122 = sub_188CDC8((uint64_t)v114, v123);
      }
      int v124 = *(_DWORD *)(v122 + 16);
      *(_DWORD *)(v122 + 48) = v116;
      *(void *)(v122 + 52) = v117;
      *(_DWORD *)(v122 + 16) = v124 | 0xF;
      *(_DWORD *)(v122 + 60) = v119;
      uint64_t v125 = *(void *)(v115 + 64);
      uint64_t v126 = v125 ? v125 + 8 : 0;
      uint64_t v127 = *(int *)(v115 + 56);
      if (v127) {
        break;
      }
LABEL_138:
      ++v111;
      uint64_t v105 = v176;
      if (v111 == v113) {
        goto LABEL_161;
      }
    }
    uint64_t v128 = 8 * v127;
    while (2)
    {
      uint64_t v129 = *(void *)v126;
      unint64_t v130 = *(void *)(*(void *)v126 + 672) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v130 + 23) < 0)
      {
        sub_4200(v179, *(void **)v130, *(void *)(v130 + 8));
      }
      else
      {
        long long v131 = *(_OWORD *)v130;
        uint64_t v180 = *(void *)(v130 + 16);
        *(_OWORD *)__darwin_ct_rune_t v179 = v131;
      }
      uint64_t v132 = *(void *)(v129 + 828);
      int v133 = *(_DWORD *)(v129 + 64);
      __darwin_ct_rune_t v134 = *(_DWORD **)(v122 + 40);
      if (v134 && (uint64_t v135 = *(int *)(v122 + 32), (int)v135 < *v134))
      {
        *(_DWORD *)(v122 + 32) = v135 + 1;
        uint64_t v136 = *(void *)&v134[2 * v135 + 2];
        *(_DWORD *)(v136 + 16) |= 1u;
        uint64_t v137 = *(void *)(v136 + 8);
        __darwin_ct_rune_t v138 = (uint64_t *)(v137 & 0xFFFFFFFFFFFFFFFCLL);
        if (v137) {
          goto LABEL_157;
        }
      }
      else
      {
        uint64_t v139 = sub_11BF140(*(void *)(v122 + 24));
        uint64_t v136 = sub_188CDC8(v122 + 24, v139);
        *(_DWORD *)(v136 + 16) |= 1u;
        uint64_t v140 = *(void *)(v136 + 8);
        __darwin_ct_rune_t v138 = (uint64_t *)(v140 & 0xFFFFFFFFFFFFFFFCLL);
        if (v140) {
LABEL_157:
        }
          __darwin_ct_rune_t v138 = (uint64_t *)*v138;
      }
      sub_1881DF4((std::string **)(v136 + 24), (long long *)v179, v138);
      int v141 = *(_DWORD *)(v136 + 16);
      *(void *)(v136 + 32) = v132;
      *(_DWORD *)(v136 + 16) = v141 | 0xE;
      *(_DWORD *)(v136 + 40) = v133;
      if (SHIBYTE(v180) < 0) {
        operator delete(v179[0]);
      }
      v126 += 8;
      v128 -= 8;
      if (!v128) {
        goto LABEL_138;
      }
      continue;
    }
  }
LABEL_161:
  uint64_t v142 = *(void *)(a3 + 368);
  if (v142) {
    __darwin_ct_rune_t v143 = (uint64_t *)(v142 + 8);
  }
  else {
    __darwin_ct_rune_t v143 = 0;
  }
  uint64_t v144 = *(int *)(a3 + 360);
  if (!v144) {
    goto LABEL_198;
  }
  __darwin_ct_rune_t v178 = &v143[v144];
  if (*(void *)(a3 + 528)) {
    __darwin_ct_rune_t v145 = *(uint64_t (****)())(a3 + 528);
  }
  else {
    __darwin_ct_rune_t v145 = &off_2533CD8;
  }
  __darwin_ct_rune_t v146 = (uint64_t *)(v105 + 48);
  while (2)
  {
    uint64_t v149 = *v143;
    if (!*(_DWORD *)(*v143 + 120)) {
      goto LABEL_171;
    }
    uint64_t v150 = *(void *)(v149 + 128);
    uint64_t v151 = *(void *)(v150 + 8);
    if (!v151)
    {
      int v156 = 0;
      int v155 = 0;
      int v154 = 0;
      int v153 = 0;
      int v152 = 0;
      int v164 = *(_DWORD *)(v149 + 200);
      int v165 = *(_DWORD *)(v149 + 204);
      uint64_t v166 = v176;
      __darwin_ct_rune_t v167 = *(_DWORD **)(v176 + 64);
      if (!v167) {
        goto LABEL_197;
      }
      goto LABEL_196;
    }
    int v152 = 0;
    int v153 = 0;
    int v154 = 0;
    int v155 = 0;
    int v156 = 0;
    int v157 = 0x7FFFFFFF;
    while (2)
    {
      uint64_t v158 = *(void *)(*(void *)(v149 + 152) + 8 * *(int *)(*(void *)(v151 + 56) + 4 * *(int *)(v151 + 68)) + 8);
      uint64_t v159 = *(int *)(v158 + 48);
      if (v159)
      {
        __darwin_ct_rune_t v160 = *(int **)(v158 + 56);
        uint64_t v161 = 4 * v159;
        while (1)
        {
          __darwin_ct_rune_t v162 = v145[43][*v160 + 1];
          if (v157 != 0x7FFFFFFF) {
            int v152 = v152 - v157 + *((_DWORD *)v162 + 75);
          }
          int v163 = *((_DWORD *)v162 + 70);
          if ((v163 - 7) < 2)
          {
            if (*((_DWORD *)v162 + 20)) {
              v152 += *(_DWORD *)(*(void *)(*((void *)v162 + 11) + 8) + 56);
            }
            goto LABEL_179;
          }
          if (v163 == 6) {
            break;
          }
          if (v163 == 2)
          {
            int v157 = *((_DWORD *)v162 + 75);
            v153 += *((_DWORD *)v162 + 78);
            ++v155;
            v154 += *((_DWORD *)v162 + 78);
            ++v160;
            v161 -= 4;
            if (!v161) {
              goto LABEL_191;
            }
          }
          else
          {
            if (v163 == 3) {
              ++v156;
            }
LABEL_179:
            int v157 = 0x7FFFFFFF;
            ++v155;
            v154 += *((_DWORD *)v162 + 78);
            ++v160;
            v161 -= 4;
            if (!v161) {
              goto LABEL_191;
            }
          }
        }
        if (*((_DWORD *)v162 + 26)) {
          v152 += *(_DWORD *)(*(void *)(*((void *)v162 + 14) + 8) + 48);
        }
        goto LABEL_179;
      }
LABEL_191:
      if ((*(unsigned char *)(v158 + 40) & 4) != 0)
      {
        uint64_t v151 = *(void *)(v150 + 8 * *(int *)(v158 + 156) + 8);
        if (v151) {
          continue;
        }
      }
      break;
    }
    int v164 = *(_DWORD *)(v149 + 200);
    int v165 = *(_DWORD *)(v149 + 204);
    uint64_t v166 = v176;
    __darwin_ct_rune_t v167 = *(_DWORD **)(v176 + 64);
    if (!v167)
    {
LABEL_197:
      __darwin_ct_rune_t v175 = v143;
      sub_11BF264(*v146);
      __darwin_ct_rune_t v147 = (_DWORD *)sub_188CDC8((uint64_t)v146, v169);
      __darwin_ct_rune_t v143 = v175;
      goto LABEL_170;
    }
LABEL_196:
    uint64_t v168 = *(int *)(v166 + 56);
    if ((int)v168 >= *v167) {
      goto LABEL_197;
    }
    *(_DWORD *)(v166 + 56) = v168 + 1;
    __darwin_ct_rune_t v147 = *(_DWORD **)&v167[2 * v168 + 2];
LABEL_170:
    int v148 = v147[4];
    v147[7] = v156;
    v147[8] = v155;
    v147[9] = v154;
    v147[10] = v165 - v164;
    v147[4] = v148 | 0x7E;
    v147[11] = v153;
    v147[12] = v152;
LABEL_171:
    if (++v143 != v178) {
      continue;
    }
    break;
  }
LABEL_198:
  if ((SHIBYTE(v182) & 0x80000000) == 0)
  {
    if (((char)v184 & 0x80000000) == 0) {
      goto LABEL_200;
    }
LABEL_204:
    operator delete(v183[0]);
    if (SHIBYTE(v186) < 0) {
      goto LABEL_205;
    }
LABEL_201:
    if ((__dst[23] & 0x80000000) == 0) {
      return;
    }
LABEL_206:
    operator delete(*(void **)__dst);
    return;
  }
  operator delete(v181[0]);
  if ((char)v184 < 0) {
    goto LABEL_204;
  }
LABEL_200:
  if ((SHIBYTE(v186) & 0x80000000) == 0) {
    goto LABEL_201;
  }
LABEL_205:
  operator delete(__p[0]);
  if ((__dst[23] & 0x80000000) != 0) {
    goto LABEL_206;
  }
}

void sub_DEBF90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a35 < 0)
  {
    operator delete(__p);
    if ((a41 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a48 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a41 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a36);
  if ((a48 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a43);
  _Unwind_Resume(exception_object);
}

double sub_DEC118()
{
  byte_25EB88F = 1;
  word_25EB878 = 65;
  byte_25EB8A7 = 1;
  word_25EB890 = 65;
  byte_25EB8BF = 8;
  strcpy((char *)&qword_25EB8A8, "any_mode");
  byte_25EB8D7 = 7;
  strcpy((char *)&dword_25EB8C0, "cycling");
  byte_25EB8EF = 7;
  strcpy((char *)&dword_25EB8D8, "driving");
  byte_25EB907 = 7;
  strcpy((char *)&dword_25EB8F0, "walking");
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25EB938 = 0u;
  *(_OWORD *)&qword_25EB948 = 0u;
  dword_25EB958 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25EB938, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25EB938, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25EB938, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25EB938, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  qword_25EB910 = 0;
  qword_25EB918 = 0;
  qword_25EB908 = 0;
  v0 = operator new(9uLL);
  *(void *)v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25EB908 = (uint64_t)v0;
  qword_25EB910 = (uint64_t)(v0 + 9);
  qword_25EB918 = (uint64_t)(v0 + 9);
  qword_25EB920 = 0;
  qword_25EB928 = 0;
  unk_25EB930 = 0;
  int v1 = (char *)operator new(9uLL);
  qword_25EB928 = (uint64_t)(v1 + 9);
  unk_25EB930 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)int v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25EB920 = (uint64_t)v1;
  return result;
}

void sub_DEC3D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25EB948) {
    sub_20B09C8((void **)qword_25EB948);
  }
  long long v37 = (void *)xmmword_25EB938;
  *(void *)&xmmword_25EB938 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

char *sub_DEC474(uint64_t *a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t *a5, int *a6, uint64_t *a7, int *a8)
{
  unint64_t v10 = a1[1];
  if (v10 >= a1[2])
  {
    long long v16 = sub_DECCE4(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    uint64_t v11 = *a5;
    int v12 = *a6;
    uint64_t v13 = *a7;
    int v14 = *a8;
    *(unsigned char *)unint64_t v10 = *a2;
    if (*(char *)(a3 + 23) < 0)
    {
      sub_4200((unsigned char *)(v10 + 8), *(void **)a3, *(void *)(a3 + 8));
    }
    else
    {
      long long v15 = *(_OWORD *)a3;
      *(void *)(v10 + 24) = *(void *)(a3 + 16);
      *(_OWORD *)(v10 + 8) = v15;
    }
    unint64_t v17 = (unsigned char *)(v10 + 32);
    if (*(char *)(a4 + 23) < 0)
    {
      sub_4200(v17, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      long long v18 = *(_OWORD *)a4;
      *(void *)(v10 + 48) = *(void *)(a4 + 16);
      *(_OWORD *)unint64_t v17 = v18;
    }
    *(_DWORD *)(v10 + 56) = v11;
    *(_DWORD *)(v10 + 60) = v12;
    *(void *)(v10 + 64) = v13;
    *(_DWORD *)(v10 + 72) = v14;
    long long v16 = (char *)(v10 + 80);
    a1[1] = v10 + 80;
  }
  a1[1] = (uint64_t)v16;
  return v16 - 80;
}

void sub_DEC55C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v3 + 31) < 0)
  {
    operator delete(*v2);
    *(void *)(v1 + 8) = v3;
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(exception_object);
}

uint64_t *sub_DEC58C(uint64_t *a1, uint64_t *a2, uint64_t a3, unsigned int a4, int a5, int a6, double a7)
{
  int v17 = a5;
  double v16 = a7;
  int v15 = a6;
  if (a4 == -1) {
    unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  }
  else {
    unint64_t v9 = a4;
  }
  unint64_t v14 = v9;
  char v13 = 0;
  sub_4DB90(a2);
  sub_DEC474(a1, &v13, (uint64_t)&__p, a3, (uint64_t *)&v14, &v17, (uint64_t *)&v16, &v15);
  if (v12 < 0) {
    operator delete(__p);
  }
  return a1;
}

void sub_DEC64C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_DEC668(uint64_t *a1, void *a2, uint64_t a3, unsigned int a4, int a5, int a6, double a7)
{
  int v17 = a5;
  double v16 = a7;
  int v15 = a6;
  if (a4 == -1) {
    unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  }
  else {
    unint64_t v9 = a4;
  }
  unint64_t v14 = v9;
  char v13 = 0;
  sub_4E0AC(a2);
  sub_DEC474(a1, &v13, (uint64_t)&__p, a3, (uint64_t *)&v14, &v17, (uint64_t *)&v16, &v15);
  if (v12 < 0) {
    operator delete(__p);
  }
  return a1;
}

void sub_DEC728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_DEC744(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, int a6, double a7)
{
  int v14 = a5;
  double v13 = a7;
  int v12 = a6;
  if (a4 == -1) {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  }
  else {
    unint64_t v8 = a4;
  }
  unint64_t v11 = v8;
  char v10 = 1;
  sub_DEC7D8(a1, &v10, a2, a3, (uint64_t *)&v11, &v14, (uint64_t *)&v13, &v12);
  return a1;
}

char *sub_DEC7D8(uint64_t *a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t *a5, int *a6, uint64_t *a7, int *a8)
{
  unint64_t v10 = a1[1];
  if (v10 >= a1[2])
  {
    double v16 = sub_DED19C(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    uint64_t v11 = *a5;
    int v12 = *a6;
    uint64_t v13 = *a7;
    int v14 = *a8;
    *(unsigned char *)unint64_t v10 = *a2;
    if (*(char *)(a3 + 23) < 0)
    {
      sub_4200((unsigned char *)(v10 + 8), *(void **)a3, *(void *)(a3 + 8));
    }
    else
    {
      long long v15 = *(_OWORD *)a3;
      *(void *)(v10 + 24) = *(void *)(a3 + 16);
      *(_OWORD *)(v10 + 8) = v15;
    }
    int v17 = (unsigned char *)(v10 + 32);
    if (*(char *)(a4 + 23) < 0)
    {
      sub_4200(v17, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      long long v18 = *(_OWORD *)a4;
      *(void *)(v10 + 48) = *(void *)(a4 + 16);
      *(_OWORD *)int v17 = v18;
    }
    *(_DWORD *)(v10 + 56) = v11;
    *(_DWORD *)(v10 + 60) = v12;
    *(void *)(v10 + 64) = v13;
    *(_DWORD *)(v10 + 72) = v14;
    double v16 = (char *)(v10 + 80);
    a1[1] = v10 + 80;
  }
  a1[1] = (uint64_t)v16;
  return v16 - 80;
}

void sub_DEC8C0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v3 + 31) < 0)
  {
    operator delete(*v2);
    *(void *)(v1 + 8) = v3;
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(exception_object);
}

void sub_DEC8F0(char **a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_DED410((char **)a2, 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4));
  char v4 = *a1;
  int v5 = a1[1];
  if (*a1 != v5)
  {
    uint64_t v6 = *(std::string **)(a2 + 8);
    do
    {
      sub_11B9478(&v12, 0, 0);
      if (*v4)
      {
        if (*v4 == 1)
        {
          int v7 = v14 | 8;
          int v18 = 3;
        }
        else
        {
          int v7 = v14;
        }
      }
      else
      {
        int v7 = v14 | 8;
        int v18 = 2;
      }
      int v17 = *((_DWORD *)v4 + 14);
      int v14 = v7 | 5;
      unint64_t v8 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFFCLL);
      if (v13) {
        unint64_t v8 = (uint64_t *)*v8;
      }
      unint64_t v9 = (long long *)(v4 + 32);
      sub_1881DF4(&v15, v9, v8);
      v14 |= 2u;
      unint64_t v10 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFFCLL);
      if (v13) {
        unint64_t v10 = (uint64_t *)*v10;
      }
      uint64_t v11 = (long long *)((char *)v9 - 24);
      sub_1881DF4(&v16, v11, v10);
      uint64_t v6 = sub_DED618((std::string **)a2, v6, (uint64_t)&v12) + 2;
      sub_11B9574(&v12);
      char v4 = (char *)v11 + 72;
    }
    while (v4 != v5);
  }
}

void sub_DECA60(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int v5 = *v1;
    if ((void *)v4 != v3)
    {
      do
        uint64_t v4 = sub_11B9574(v4 - 48);
      while ((void *)v4 != v3);
      int v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_DECABC(char **a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_DEDBEC((char **)a2, 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4));
  uint64_t v4 = *a1;
  int v5 = a1[1];
  if (*a1 != v5)
  {
    uint64_t v6 = *(std::string **)(a2 + 8);
    do
    {
      sub_11B9E24((uint64_t)v15, 0, 0);
      if (*v4)
      {
        if (*v4 == 1)
        {
          int v7 = v17 | 0x40;
          int v24 = 3;
        }
        else
        {
          int v7 = v17;
        }
      }
      else
      {
        int v7 = v17 | 0x40;
        int v24 = 2;
      }
      int v20 = *((_DWORD *)v4 + 14);
      int v17 = v7 | 5;
      unint64_t v8 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
      if (v16) {
        unint64_t v8 = (uint64_t *)*v8;
      }
      unint64_t v9 = (long long *)(v4 + 32);
      sub_1881DF4(&v18, v9, v8);
      v17 |= 2u;
      unint64_t v10 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
      if (v16) {
        unint64_t v10 = (uint64_t *)*v10;
      }
      uint64_t v11 = (char *)v9 - 24;
      sub_1881DF4(&v19, (long long *)v11, v10);
      uint64_t v22 = *((void *)v11 + 7);
      unsigned int v12 = *((_DWORD *)v11 + 16);
      v17 |= 0x18u;
      unsigned int v21 = v12;
      unsigned int v13 = sub_63BD14(v12);
      if (v13 <= 4)
      {
        v17 |= 0x20u;
        unsigned int v23 = v13;
      }
      int v14 = *((_DWORD *)v11 + 13);
      if ((v14 - 1) <= 9)
      {
        v17 |= 0x80u;
        int v25 = v14 + 2;
      }
      uint64_t v6 = sub_DEDE00((std::string **)a2, v6, (uint64_t)v15) + 3;
      sub_11B9F24(v15);
      uint64_t v4 = v11 + 72;
    }
    while (v4 != v5);
  }
}

void sub_DECC88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  unsigned int v12 = *v10;
  if (*v10)
  {
    uint64_t v13 = (uint64_t)v10[1];
    int v14 = *v10;
    if ((void *)v13 != v12)
    {
      do
        uint64_t v13 = sub_11B9F24(v13 - 72);
      while ((void *)v13 != v12);
      int v14 = *v10;
    }
    v10[1] = v12;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

char *sub_DECCE4(uint64_t *a1, unsigned char *a2, uint64_t a3, uint64_t a4, void *a5, int *a6, void *a7, _DWORD *a8)
{
  unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v10 = v9 + 1;
  if (v9 + 1 > 0x333333333333333) {
    sub_2E00();
  }
  uint64_t v14 = (uint64_t)(a1 + 2);
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v10) {
    unint64_t v10 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999) {
    unint64_t v15 = 0x333333333333333;
  }
  else {
    unint64_t v15 = v10;
  }
  if (v15)
  {
    long long v37 = a2;
    int v38 = a1 + 2;
    if (v15 > 0x333333333333333) {
      sub_188D718();
    }
    uint64_t v16 = a5;
    int v17 = a7;
    int v18 = a8;
    uint64_t v19 = operator new(80 * v15);
    a8 = v18;
    a7 = v17;
    a5 = v16;
    a2 = v37;
    uint64_t v14 = (uint64_t)v38;
  }
  else
  {
    uint64_t v19 = 0;
  }
  unint64_t v39 = (char *)&v19[10 * v9];
  uint64_t v40 = (char *)&v19[10 * v15];
  uint64_t v20 = *a5;
  int v21 = *a6;
  uint64_t v22 = *a7;
  int v23 = *a8;
  char *v39 = *a2;
  int v24 = v39 + 8;
  if (*(char *)(a3 + 23) < 0)
  {
    int v25 = *(void **)a3;
    unint64_t v26 = *(void *)(a3 + 8);
    int v27 = v23;
    sub_4200(v24, v25, v26);
    int v23 = v27;
  }
  else
  {
    *(_OWORD *)int v24 = *(_OWORD *)a3;
    *((void *)v39 + 3) = *(void *)(a3 + 16);
  }
  int v28 = &v19[10 * v9 + 4];
  if (*(char *)(a4 + 23) < 0)
  {
    uint64_t v29 = *(void **)a4;
    unint64_t v30 = *(void *)(a4 + 8);
    int v31 = v23;
    sub_4200(v28, v29, v30);
    int v23 = v31;
  }
  else
  {
    *(_OWORD *)int v28 = *(_OWORD *)a4;
    v19[10 * v9 + 6] = *(void *)(a4 + 16);
  }
  uint64_t v32 = (uint64_t)&v19[10 * v9];
  *(_DWORD *)(v32 + 56) = v20;
  *(_DWORD *)(v32 + 60) = v21;
  *(void *)(v32 + 64) = v22;
  *(_DWORD *)(v32 + 72) = v23;
  sub_DECFDC(v14, a1[1], a1[1], *a1, *a1, v32, v32);
  int v33 = (void **)*a1;
  uint64_t v34 = (void **)a1[1];
  *a1 = v35;
  a1[1] = (uint64_t)(v39 + 80);
  a1[2] = (uint64_t)v40;
  while (v34 != v33)
  {
    if (*((char *)v34 - 25) < 0)
    {
      operator delete(*(v34 - 6));
      if ((*((char *)v34 - 49) & 0x80000000) == 0) {
        goto LABEL_18;
      }
    }
    else if ((*((char *)v34 - 49) & 0x80000000) == 0)
    {
      goto LABEL_18;
    }
    operator delete(*(v34 - 9));
LABEL_18:
    v34 -= 10;
  }
  if (v33) {
    operator delete(v33);
  }
  return v39 + 80;
}

void sub_DECF20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (*(char *)(v5 + 31) < 0)
  {
    operator delete(*v4);
    sub_DECF58((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_DECF58((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_DECF58(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 80;
    if (*(char *)(i - 25) < 0)
    {
      operator delete(*(void **)(i - 48));
      if ((*(char *)(i - 49) & 0x80000000) == 0) {
        continue;
      }
    }
    else if ((*(char *)(i - 49) & 0x80000000) == 0)
    {
      continue;
    }
    operator delete(*(void **)(i - 72));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_DECFDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  uint64_t v17 = a6;
  uint64_t v18 = a7;
  if (a3 != a5)
  {
    uint64_t v9 = a3;
    uint64_t v10 = a3;
    do
    {
      char v13 = *(unsigned char *)(v10 - 80);
      v10 -= 80;
      *(unsigned char *)(v7 - 80) = v13;
      if (*(char *)(v10 + 31) < 0)
      {
        sub_4200((unsigned char *)(v7 - 72), *(void **)(v9 - 72), *(void *)(v9 - 64));
      }
      else
      {
        long long v14 = *(_OWORD *)(v10 + 8);
        *(void *)(v7 - 56) = *(void *)(v10 + 24);
        *(_OWORD *)(v7 - 72) = v14;
      }
      unint64_t v15 = (unsigned char *)(v7 - 48);
      if (*(char *)(v9 - 25) < 0)
      {
        sub_4200(v15, *(void **)(v9 - 48), *(void *)(v9 - 40));
      }
      else
      {
        long long v11 = *(_OWORD *)(v9 - 48);
        *(void *)(v7 - 32) = *(void *)(v9 - 32);
        *(_OWORD *)unint64_t v15 = v11;
      }
      int v12 = *(_DWORD *)(v9 - 8);
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(v9 - 24);
      *(_DWORD *)(v7 - 8) = v12;
      uint64_t v7 = v18 - 80;
      v18 -= 80;
      uint64_t v9 = v10;
    }
    while (v10 != a5);
    return v17;
  }
  return a6;
}

void sub_DED0E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(char *)(v9 - 49) < 0)
  {
    operator delete(*v10);
    sub_DED11C((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  sub_DED11C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_DED11C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8);
    uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 8);
    while (1)
    {
      if (v3 == v4) {
        return a1;
      }
      if (*(char *)(v3 + 55) < 0)
      {
        operator delete(*(void **)(v3 + 32));
        if ((*(char *)(v3 + 31) & 0x80000000) == 0) {
          goto LABEL_4;
        }
      }
      else if ((*(char *)(v3 + 31) & 0x80000000) == 0)
      {
        goto LABEL_4;
      }
      operator delete(*(void **)(v3 + 8));
LABEL_4:
      v3 += 80;
    }
  }
  return a1;
}

char *sub_DED19C(uint64_t *a1, unsigned char *a2, uint64_t a3, uint64_t a4, void *a5, int *a6, void *a7, _DWORD *a8)
{
  unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v10 = v9 + 1;
  if (v9 + 1 > 0x333333333333333) {
    sub_2E00();
  }
  uint64_t v14 = (uint64_t)(a1 + 2);
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v10) {
    unint64_t v10 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999) {
    unint64_t v15 = 0x333333333333333;
  }
  else {
    unint64_t v15 = v10;
  }
  if (v15)
  {
    long long v37 = a2;
    int v38 = a1 + 2;
    if (v15 > 0x333333333333333) {
      sub_188D718();
    }
    uint64_t v16 = a5;
    uint64_t v17 = a7;
    uint64_t v18 = a8;
    uint64_t v19 = operator new(80 * v15);
    a8 = v18;
    a7 = v17;
    a5 = v16;
    a2 = v37;
    uint64_t v14 = (uint64_t)v38;
  }
  else
  {
    uint64_t v19 = 0;
  }
  unint64_t v39 = (char *)&v19[10 * v9];
  uint64_t v40 = (char *)&v19[10 * v15];
  uint64_t v20 = *a5;
  int v21 = *a6;
  uint64_t v22 = *a7;
  int v23 = *a8;
  char *v39 = *a2;
  int v24 = v39 + 8;
  if (*(char *)(a3 + 23) < 0)
  {
    int v25 = *(void **)a3;
    unint64_t v26 = *(void *)(a3 + 8);
    int v27 = v23;
    sub_4200(v24, v25, v26);
    int v23 = v27;
  }
  else
  {
    *(_OWORD *)int v24 = *(_OWORD *)a3;
    *((void *)v39 + 3) = *(void *)(a3 + 16);
  }
  int v28 = &v19[10 * v9 + 4];
  if (*(char *)(a4 + 23) < 0)
  {
    uint64_t v29 = *(void **)a4;
    unint64_t v30 = *(void *)(a4 + 8);
    int v31 = v23;
    sub_4200(v28, v29, v30);
    int v23 = v31;
  }
  else
  {
    *(_OWORD *)int v28 = *(_OWORD *)a4;
    v19[10 * v9 + 6] = *(void *)(a4 + 16);
  }
  uint64_t v32 = (uint64_t)&v19[10 * v9];
  *(_DWORD *)(v32 + 56) = v20;
  *(_DWORD *)(v32 + 60) = v21;
  *(void *)(v32 + 64) = v22;
  *(_DWORD *)(v32 + 72) = v23;
  sub_DECFDC(v14, a1[1], a1[1], *a1, *a1, v32, v32);
  int v33 = (void **)*a1;
  uint64_t v34 = (void **)a1[1];
  *a1 = v35;
  a1[1] = (uint64_t)(v39 + 80);
  a1[2] = (uint64_t)v40;
  while (v34 != v33)
  {
    if (*((char *)v34 - 25) < 0)
    {
      operator delete(*(v34 - 6));
      if ((*((char *)v34 - 49) & 0x80000000) == 0) {
        goto LABEL_18;
      }
    }
    else if ((*((char *)v34 - 49) & 0x80000000) == 0)
    {
      goto LABEL_18;
    }
    operator delete(*(v34 - 9));
LABEL_18:
    v34 -= 10;
  }
  if (v33) {
    operator delete(v33);
  }
  return v39 + 80;
}

void sub_DED3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (*(char *)(v5 + 31) < 0)
  {
    operator delete(*v4);
    sub_DECF58((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_DECF58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DED410(char **a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= a2) {
    return;
  }
  if (a2 >= 0x555555555555556) {
    sub_2E00();
  }
  uint64_t v4 = (uint64_t)a1[1];
  uint64_t v5 = 48 * a2;
  uint64_t v6 = (char *)operator new(48 * a2);
  uint64_t v7 = &v6[v5];
  unint64_t v8 = &v6[v4 - (void)v2];
  if ((char *)v4 == v2)
  {
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v7;
    if (!v2) {
      return;
    }
    goto LABEL_10;
  }
  unint64_t v9 = (std::string *)&v6[v4 - (void)v2];
  do
  {
    v4 -= 48;
    unint64_t v9 = sub_DED578(v9 - 2, v4);
  }
  while ((char *)v4 != v2);
  unint64_t v10 = *a1;
  uint64_t v2 = a1[1];
  *a1 = (char *)v9;
  a1[1] = v8;
  a1[2] = v7;
  if (v2 != v10)
  {
    do
    {
      v2 -= 48;
      sub_11B9574(v2);
    }
    while (v2 != v10);
    uint64_t v2 = v10;
  }
  if (v2)
  {
LABEL_10:
    operator delete(v2);
  }
}

uint64_t sub_DED524(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    sub_11B9574(i - 48);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

std::string *sub_DED578(std::string *a1, uint64_t a2)
{
  sub_11B9478(a1, 0, 0);
  if (a1 != (std::string *)a2)
  {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
    if ((size & 2) != 0)
    {
      uint64_t v5 = 0;
    }
    else
    {
      uint64_t v5 = (void *)(size & 0xFFFFFFFFFFFFFFFCLL);
      if (size) {
        uint64_t v5 = (void *)*v5;
      }
    }
    uint64_t v6 = *(void *)(a2 + 8);
    if ((v6 & 2) != 0)
    {
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (v6) {
        uint64_t v7 = (void *)*v7;
      }
    }
    if (v5 == v7) {
      sub_11B9DB0((uint64_t)a1, a2);
    }
    else {
      sub_11B9D5C(a1, a2);
    }
  }
  return a1;
}

std::string *sub_DED618(std::string **a1, std::string *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  unint64_t v6 = (unint64_t)a1[1];
  unint64_t v7 = (unint64_t)a1[2];
  if (v6 >= v7)
  {
    unint64_t v10 = *a1;
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)*a1) >> 4) + 1;
    if (v11 > 0x555555555555555) {
      sub_2E00();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)v10) >> 4);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v13 = 0x555555555555555;
    }
    else {
      unint64_t v13 = v11;
    }
    unint64_t v30 = a1 + 2;
    if (v13)
    {
      if (v13 > 0x555555555555555) {
        sub_188D718();
      }
      uint64_t v14 = (std::string *)operator new(48 * v13);
    }
    else
    {
      uint64_t v14 = 0;
    }
    unint64_t v26 = v14;
    int v27 = (std::string *)((char *)v14 + 16 * (((char *)v4 - (char *)v10) >> 4));
    int v28 = v27;
    uint64_t v29 = &v14[2 * v13];
    sub_DED9C8((uint64_t)&v26, a3);
    unint64_t v15 = v27;
    uint64_t v16 = *a1;
    uint64_t v17 = v27;
    if (*a1 != v4)
    {
      uint64_t v18 = (uint64_t)v4;
      uint64_t v17 = v27;
      do
      {
        v18 -= 48;
        uint64_t v17 = sub_DED578(v17 - 2, v18);
      }
      while ((std::string *)v18 != v16);
    }
    int v27 = v17;
    uint64_t v19 = a1[1];
    uint64_t v20 = v28;
    if (v19 != v4)
    {
      do
      {
        sub_DED578(v20, (uint64_t)v4);
        v4 += 2;
        v20 += 2;
      }
      while (v4 != v19);
      uint64_t v17 = v27;
      uint64_t v4 = a1[1];
    }
    int v21 = *a1;
    *a1 = v17;
    a1[1] = v20;
    uint64_t v22 = a1[2];
    a1[2] = v29;
    int v28 = v4;
    uint64_t v29 = v22;
    unint64_t v26 = v21;
    int v27 = v21;
    if (v4 != v21)
    {
      do
      {
        int v28 = v4 - 2;
        sub_11B9574(&v4[-2]);
        uint64_t v4 = v28;
      }
      while (v28 != v21);
      uint64_t v4 = v26;
    }
    if (v4) {
      operator delete(v4);
    }
    return v15;
  }
  else if (a2 == (std::string *)v6)
  {
    sub_DED578(a2, a3);
    a1[1] = v4 + 2;
  }
  else
  {
    sub_DED89C((uint64_t)a1, (uint64_t)a2, v6, (uint64_t)&a2[2]);
    if (v4 == (std::string *)a3)
    {
      return (std::string *)a3;
    }
    else
    {
      std::string::size_type size = v4->__r_.__value_.__l.__size_;
      if ((size & 2) != 0)
      {
        unint64_t v9 = 0;
      }
      else
      {
        unint64_t v9 = (void *)(size & 0xFFFFFFFFFFFFFFFCLL);
        if (size) {
          unint64_t v9 = (void *)*v9;
        }
      }
      uint64_t v24 = *(void *)(a3 + 8);
      if ((v24 & 2) != 0)
      {
        int v25 = 0;
      }
      else
      {
        int v25 = (void *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
        if (v24) {
          int v25 = (void *)*v25;
        }
      }
      if (v9 == v25) {
        sub_11B9DB0((uint64_t)v4, a3);
      }
      else {
        sub_11B9D5C(v4, a3);
      }
    }
  }
  return v4;
}

void sub_DED888(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_DED524((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *sub_DED89C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = v6 - a4;
  unint64_t v8 = a2 + v6 - a4;
  if (v8 >= a3)
  {
    double result = *(std::string **)(a1 + 8);
    *(void *)(a1 + 8) = v6;
    if (v6 == a4) {
      return result;
    }
  }
  else
  {
    unint64_t v10 = a2 + v6 - a4;
    double result = *(std::string **)(a1 + 8);
    do
    {
      unint64_t v12 = sub_DED578(result, v10);
      v10 += 48;
      double result = v12 + 2;
    }
    while (v10 < a3);
    *(void *)(a1 + 8) = result;
    if (v6 == a4) {
      return result;
    }
  }
  uint64_t v13 = 0;
  do
  {
    if (v8 != v6)
    {
      uint64_t v14 = *(void *)(v6 + v13 - 40);
      if ((v14 & 2) != 0)
      {
        unint64_t v15 = 0;
      }
      else
      {
        unint64_t v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
        if (v14) {
          unint64_t v15 = (void *)*v15;
        }
      }
      uint64_t v16 = *(void *)(v8 + v13 - 40);
      if ((v16 & 2) != 0)
      {
        uint64_t v17 = 0;
      }
      else
      {
        uint64_t v17 = (void *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
        if (v16) {
          uint64_t v17 = (void *)*v17;
        }
      }
      uint64_t v18 = v8 + v13 - 48;
      uint64_t v19 = (std::string *)(v6 + v13 - 48);
      if (v15 == v17) {
        double result = (std::string *)sub_11B9DB0((uint64_t)v19, v18);
      }
      else {
        double result = sub_11B9D5C(v19, v18);
      }
    }
    v13 -= 48;
  }
  while (-16 * (v7 >> 4) != v13);
  return result;
}

std::string *sub_DED9C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(std::string **)(a1 + 16);
  if (v4 != *(std::string **)(a1 + 24)) {
    goto LABEL_35;
  }
  uint64_t v6 = *(std::string **)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  if (v5 <= *(void *)a1)
  {
    unint64_t v17 = 0x5555555555555556 * (((char *)v4 - (char *)v6) >> 4);
    if (v4 == v6) {
      unint64_t v17 = 1;
    }
    if (v17 >= 0x555555555555556) {
      sub_188D718();
    }
    unint64_t v18 = v17 >> 2;
    uint64_t v19 = 48 * v17;
    uint64_t v20 = (char *)operator new(48 * v17);
    int v21 = v20;
    uint64_t v22 = (std::string *)&v20[48 * v18];
    int v23 = &v20[v19];
    if (v4 == (std::string *)v5)
    {
      *(void *)a1 = v20;
      *(void *)(a1 + 8) = v22;
      *(void *)(a1 + 16) = v22;
      *(void *)(a1 + 24) = v23;
      if (!v6) {
        goto LABEL_31;
      }
    }
    else
    {
      uint64_t v24 = (uint64_t)((uint64_t)v4 - v5) / 48;
      int v25 = &v22[2 * v24];
      uint64_t v26 = 48 * v24;
      int v27 = v22;
      do
      {
        int v27 = sub_DED578(v27, v5) + 2;
        v5 += 48;
        v26 -= 48;
      }
      while (v26);
      uint64_t v6 = *(std::string **)a1;
      uint64_t v28 = *(void *)(a1 + 8);
      uint64_t v29 = *(void *)(a1 + 16);
      *(void *)a1 = v21;
      *(void *)(a1 + 8) = v22;
      *(void *)(a1 + 16) = v25;
      for (*(void *)(a1 + 24) = v23; v29 != v28; uint64_t v29 = sub_11B9574(v29 - 48))
        ;
      if (!v6) {
        goto LABEL_31;
      }
    }
    operator delete(v6);
LABEL_31:
    uint64_t v4 = *(std::string **)(a1 + 16);
    goto LABEL_35;
  }
  int64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *(void *)a1) >> 4);
  if (v7 >= -1) {
    uint64_t v8 = v7 + 1;
  }
  else {
    uint64_t v8 = v7 + 2;
  }
  uint64_t v9 = v8 >> 1;
  uint64_t v10 = -v9;
  if ((std::string *)v5 == v4)
  {
    unint64_t v30 = (std::string *)(v5 - 48 * v9);
  }
  else
  {
    uint64_t v11 = -48 * v9;
    do
    {
      if (v11)
      {
        unint64_t v12 = (std::string *)(v5 + v11);
        uint64_t v13 = *(void *)(v5 + v11 + 8);
        if ((v13 & 2) != 0)
        {
          uint64_t v14 = 0;
        }
        else
        {
          uint64_t v14 = (void *)(v13 & 0xFFFFFFFFFFFFFFFCLL);
          if (v13) {
            uint64_t v14 = (void *)*v14;
          }
        }
        uint64_t v15 = *(void *)(v5 + 8);
        if ((v15 & 2) != 0)
        {
          uint64_t v16 = 0;
        }
        else
        {
          uint64_t v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
          if (v15) {
            uint64_t v16 = (void *)*v16;
          }
        }
        if (v14 == v16) {
          sub_11B9DB0((uint64_t)v12, v5);
        }
        else {
          sub_11B9D5C(v12, v5);
        }
      }
      v5 += 48;
    }
    while ((std::string *)v5 != v4);
    uint64_t v4 = *(std::string **)(a1 + 8);
    unint64_t v30 = (std::string *)(v5 + 48 * v10);
  }
  *(void *)(a1 + 8) = &v4[2 * v10];
  *(void *)(a1 + 16) = v30;
  uint64_t v4 = v30;
LABEL_35:
  double result = sub_DED578(v4, a2);
  *(void *)(a1 + 16) += 48;
  return result;
}

void sub_DEDBEC(char **a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 3) >= a2) {
    return;
  }
  if (a2 >= 0x38E38E38E38E38FLL) {
    sub_2E00();
  }
  uint64_t v4 = (uint64_t)a1[1];
  uint64_t v5 = 72 * a2;
  uint64_t v6 = (char *)operator new(72 * a2);
  int64_t v7 = &v6[v5];
  uint64_t v8 = &v6[v4 - (void)v2];
  if ((char *)v4 == v2)
  {
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v7;
    if (!v2) {
      return;
    }
    goto LABEL_10;
  }
  uint64_t v9 = (std::string *)&v6[v4 - (void)v2];
  do
  {
    v4 -= 72;
    uint64_t v9 = sub_DEDD60(v9 - 3, v4);
  }
  while ((char *)v4 != v2);
  uint64_t v10 = *a1;
  uint64_t v2 = a1[1];
  *a1 = (char *)v9;
  a1[1] = v8;
  a1[2] = v7;
  if (v2 != v10)
  {
    do
    {
      v2 -= 72;
      sub_11B9F24(v2);
    }
    while (v2 != v10);
    uint64_t v2 = v10;
  }
  if (v2)
  {
LABEL_10:
    operator delete(v2);
  }
}

uint64_t sub_DEDD0C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 72;
    sub_11B9F24(i - 72);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

std::string *sub_DEDD60(std::string *a1, uint64_t a2)
{
  sub_11B9E24((uint64_t)a1, 0, 0);
  if (a1 != (std::string *)a2)
  {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
    if ((size & 2) != 0)
    {
      uint64_t v5 = 0;
    }
    else
    {
      uint64_t v5 = (void *)(size & 0xFFFFFFFFFFFFFFFCLL);
      if (size) {
        uint64_t v5 = (void *)*v5;
      }
    }
    uint64_t v6 = *(void *)(a2 + 8);
    if ((v6 & 2) != 0)
    {
      int64_t v7 = 0;
    }
    else
    {
      int64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (v6) {
        int64_t v7 = (void *)*v7;
      }
    }
    if (v5 == v7) {
      sub_11BABB4((uint64_t)a1, a2);
    }
    else {
      sub_11BAB60(a1, a2);
    }
  }
  return a1;
}

std::string *sub_DEDE00(std::string **a1, std::string *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  unint64_t v6 = (unint64_t)a1[1];
  unint64_t v7 = (unint64_t)a1[2];
  if (v6 >= v7)
  {
    uint64_t v10 = *a1;
    unint64_t v11 = 0x8E38E38E38E38E39 * ((uint64_t)(v6 - (void)*a1) >> 3) + 1;
    if (v11 > 0x38E38E38E38E38ELL) {
      sub_2E00();
    }
    unint64_t v12 = 0x8E38E38E38E38E39 * ((uint64_t)(v7 - (void)v10) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x1C71C71C71C71C7) {
      unint64_t v13 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v13 = v11;
    }
    unint64_t v30 = a1 + 2;
    if (v13)
    {
      if (v13 > 0x38E38E38E38E38ELL) {
        sub_188D718();
      }
      uint64_t v14 = (std::string *)operator new(72 * v13);
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v26 = v14;
    int v27 = (std::string *)((char *)v14 + 8 * (((char *)v4 - (char *)v10) >> 3));
    uint64_t v28 = v27;
    uint64_t v29 = &v14[3 * v13];
    sub_DEE1D8((uint64_t)&v26, a3);
    uint64_t v15 = v27;
    uint64_t v16 = *a1;
    unint64_t v17 = v27;
    if (*a1 != v4)
    {
      uint64_t v18 = (uint64_t)v4;
      unint64_t v17 = v27;
      do
      {
        v18 -= 72;
        unint64_t v17 = sub_DEDD60(v17 - 3, v18);
      }
      while ((std::string *)v18 != v16);
    }
    int v27 = v17;
    uint64_t v19 = a1[1];
    uint64_t v20 = v28;
    if (v19 != v4)
    {
      do
      {
        sub_DEDD60(v20, (uint64_t)v4);
        v4 += 3;
        v20 += 3;
      }
      while (v4 != v19);
      unint64_t v17 = v27;
      uint64_t v4 = a1[1];
    }
    int v21 = *a1;
    *a1 = v17;
    a1[1] = v20;
    uint64_t v22 = a1[2];
    a1[2] = v29;
    uint64_t v28 = v4;
    uint64_t v29 = v22;
    uint64_t v26 = v21;
    int v27 = v21;
    if (v4 != v21)
    {
      do
      {
        uint64_t v28 = v4 - 3;
        sub_11B9F24(&v4[-3]);
        uint64_t v4 = v28;
      }
      while (v28 != v21);
      uint64_t v4 = v26;
    }
    if (v4) {
      operator delete(v4);
    }
    return v15;
  }
  else if (a2 == (std::string *)v6)
  {
    sub_DEDD60(a2, a3);
    a1[1] = v4 + 3;
  }
  else
  {
    sub_DEE0A4((uint64_t)a1, (uint64_t)a2, v6, (uint64_t)&a2[3]);
    if (v4 == (std::string *)a3)
    {
      return (std::string *)a3;
    }
    else
    {
      std::string::size_type size = v4->__r_.__value_.__l.__size_;
      if ((size & 2) != 0)
      {
        uint64_t v9 = 0;
      }
      else
      {
        uint64_t v9 = (void *)(size & 0xFFFFFFFFFFFFFFFCLL);
        if (size) {
          uint64_t v9 = (void *)*v9;
        }
      }
      uint64_t v24 = *(void *)(a3 + 8);
      if ((v24 & 2) != 0)
      {
        int v25 = 0;
      }
      else
      {
        int v25 = (void *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
        if (v24) {
          int v25 = (void *)*v25;
        }
      }
      if (v9 == v25) {
        sub_11BABB4((uint64_t)v4, a3);
      }
      else {
        sub_11BAB60(v4, a3);
      }
    }
  }
  return v4;
}

void sub_DEE090(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_DEDD0C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DEE0A4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = v6 - a4;
  unint64_t v8 = a2 + v6 - a4;
  if (v8 >= a3)
  {
    *(void *)(a1 + 8) = v6;
    if (v6 == a4) {
      return;
    }
  }
  else
  {
    unint64_t v10 = a2 + v6 - a4;
    unint64_t v11 = *(std::string **)(a1 + 8);
    do
    {
      unint64_t v12 = sub_DEDD60(v11, v10);
      v10 += 72;
      unint64_t v11 = v12 + 3;
    }
    while (v10 < a3);
    *(void *)(a1 + 8) = v11;
    if (v6 == a4) {
      return;
    }
  }
  uint64_t v13 = 0;
  do
  {
    if (v8 != v6)
    {
      uint64_t v14 = *(void *)(v6 + v13 - 64);
      if ((v14 & 2) != 0)
      {
        uint64_t v15 = 0;
      }
      else
      {
        uint64_t v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
        if (v14) {
          uint64_t v15 = (void *)*v15;
        }
      }
      uint64_t v16 = *(void *)(v8 + v13 - 64);
      if ((v16 & 2) != 0)
      {
        unint64_t v17 = 0;
      }
      else
      {
        unint64_t v17 = (void *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
        if (v16) {
          unint64_t v17 = (void *)*v17;
        }
      }
      uint64_t v18 = v8 + v13 - 72;
      uint64_t v19 = (std::string *)(v6 + v13 - 72);
      if (v15 == v17) {
        sub_11BABB4((uint64_t)v19, v18);
      }
      else {
        sub_11BAB60(v19, v18);
      }
    }
    v13 -= 72;
  }
  while (-8 * (v7 >> 3) != v13);
}

std::string *sub_DEE1D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(std::string **)(a1 + 16);
  if (v4 != *(std::string **)(a1 + 24)) {
    goto LABEL_35;
  }
  uint64_t v6 = *(std::string **)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  if (v5 <= *(void *)a1)
  {
    unint64_t v17 = 0x1C71C71C71C71C72 * (((char *)v4 - (char *)v6) >> 3);
    if (v4 == v6) {
      unint64_t v17 = 1;
    }
    if (v17 >= 0x38E38E38E38E38FLL) {
      sub_188D718();
    }
    unint64_t v18 = v17 >> 2;
    uint64_t v19 = 72 * v17;
    uint64_t v20 = (char *)operator new(72 * v17);
    int v21 = v20;
    uint64_t v22 = (std::string *)&v20[72 * v18];
    int v23 = &v20[v19];
    if (v4 == (std::string *)v5)
    {
      *(void *)a1 = v20;
      *(void *)(a1 + 8) = v22;
      *(void *)(a1 + 16) = v22;
      *(void *)(a1 + 24) = v23;
      if (!v6) {
        goto LABEL_31;
      }
    }
    else
    {
      uint64_t v24 = (uint64_t)((uint64_t)v4 - v5) / 72;
      int v25 = &v22[3 * v24];
      uint64_t v26 = 72 * v24;
      int v27 = v22;
      do
      {
        int v27 = sub_DEDD60(v27, v5) + 3;
        v5 += 72;
        v26 -= 72;
      }
      while (v26);
      uint64_t v6 = *(std::string **)a1;
      uint64_t v28 = *(void *)(a1 + 8);
      uint64_t v29 = *(void *)(a1 + 16);
      *(void *)a1 = v21;
      *(void *)(a1 + 8) = v22;
      *(void *)(a1 + 16) = v25;
      for (*(void *)(a1 + 24) = v23; v29 != v28; uint64_t v29 = sub_11B9F24(v29 - 72))
        ;
      if (!v6) {
        goto LABEL_31;
      }
    }
    operator delete(v6);
LABEL_31:
    uint64_t v4 = *(std::string **)(a1 + 16);
    goto LABEL_35;
  }
  int64_t v7 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - *(void *)a1) >> 3);
  if (v7 >= -1) {
    uint64_t v8 = v7 + 1;
  }
  else {
    uint64_t v8 = v7 + 2;
  }
  uint64_t v9 = v8 >> 1;
  uint64_t v10 = -v9;
  if ((std::string *)v5 == v4)
  {
    unint64_t v30 = (std::string *)(v5 - 72 * v9);
  }
  else
  {
    uint64_t v11 = -72 * v9;
    do
    {
      if (v11)
      {
        unint64_t v12 = (std::string *)(v5 + v11);
        uint64_t v13 = *(void *)(v5 + v11 + 8);
        if ((v13 & 2) != 0)
        {
          uint64_t v14 = 0;
        }
        else
        {
          uint64_t v14 = (void *)(v13 & 0xFFFFFFFFFFFFFFFCLL);
          if (v13) {
            uint64_t v14 = (void *)*v14;
          }
        }
        uint64_t v15 = *(void *)(v5 + 8);
        if ((v15 & 2) != 0)
        {
          uint64_t v16 = 0;
        }
        else
        {
          uint64_t v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
          if (v15) {
            uint64_t v16 = (void *)*v16;
          }
        }
        if (v14 == v16) {
          sub_11BABB4((uint64_t)v12, v5);
        }
        else {
          sub_11BAB60(v12, v5);
        }
      }
      v5 += 72;
    }
    while ((std::string *)v5 != v4);
    uint64_t v4 = *(std::string **)(a1 + 8);
    unint64_t v30 = (std::string *)(v5 + 72 * v10);
  }
  *(void *)(a1 + 8) = &v4[3 * v10];
  *(void *)(a1 + 16) = v30;
  uint64_t v4 = v30;
LABEL_35:
  double result = sub_DEDD60(v4, a2);
  *(void *)(a1 + 16) += 72;
  return result;
}

void sub_DEE414()
{
  unk_25EB9BF = 16641;
  word_25EB9A8 = 65;
  byte_25EB9D7 = 1;
  byte_25EB9C1 = 0;
}

void sub_DEE43C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 56);
  if ((int)v2 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 8 * v2;
    do
    {
      uint64_t v10 = *(void *)(*(void *)(a2 + 64) + v5 + 8);
      if (*(_DWORD *)(v10 + 836) <= 1u)
      {
        uint64_t v11 = *a1;
        *(_DWORD *)(v10 + 40) |= 0x400u;
        uint64_t v9 = *(void *)(v10 + 736);
        if (!v9)
        {
          uint64_t v12 = *(void *)(v10 + 8);
          uint64_t v13 = (void *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
          if (v12) {
            uint64_t v13 = (void *)*v13;
          }
          sub_13D8628((uint64_t)v13);
          uint64_t v9 = v8;
          *(void *)(v10 + 736) = v8;
        }
        sub_E15750((const std::string **)(v11 + 3200 * v6++), v9);
      }
      v5 += 8;
    }
    while (v7 != v5);
  }
}

void sub_DEE504()
{
  byte_25EB9EF = 1;
  word_25EB9D8 = 65;
  byte_25EBA07 = 1;
  word_25EB9F0 = 65;
  char v1 = 7;
  strcpy((char *)v0, "UNKNOWN");
  int v2 = 0;
  char v4 = 14;
  strcpy((char *)v3, "ROUTES_THROUGH");
  int v5 = 1;
  char v7 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v8 = 3;
  char v10 = 11;
  strcpy((char *)v9, "ROUTES_FROM");
  int v11 = 2;
  xmmword_25EBA68 = 0u;
  *(_OWORD *)&qword_25EBA78 = 0u;
  dword_25EBA88 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25EBA68, (uint64_t)v0, (uint64_t)v0);
  sub_3A6EF0((uint64_t)&xmmword_25EBA68, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25EBA68, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25EBA68, (uint64_t)v9, (uint64_t)v9);
  if (v10 < 0)
  {
    operator delete(v9[0]);
    if ((v7 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v3[0]);
      if ((v1 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v0[0]);
      goto LABEL_5;
    }
  }
  else if ((v7 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v4 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v1 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25EBA1F = 8;
  strcpy((char *)&qword_25EBA08, "any_mode");
  byte_25EBA37 = 7;
  strcpy((char *)&dword_25EBA20, "cycling");
  byte_25EBA4F = 7;
  strcpy((char *)&dword_25EBA38, "driving");
  byte_25EBA67 = 7;
  strcpy((char *)&dword_25EBA50, "walking");
}

void sub_DEE760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25EBA78) {
    sub_20B0A0C((void **)qword_25EBA78);
  }
  long long v37 = (void *)xmmword_25EBA68;
  *(void *)&xmmword_25EBA68 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_DEE800(void *a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 288);
  if ((int)v2 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 8 * v2;
    while (1)
    {
      uint64_t v10 = *(void *)(*(void *)(a2 + 296) + v5 + 8);
      if (*(_DWORD *)(v10 + 292) > 1u) {
        goto LABEL_5;
      }
      *(_DWORD *)(v10 + 40) |= 0x10u;
      int v11 = *(void **)(v10 + 264);
      if (!v11) {
        break;
      }
      *((_DWORD *)v11 + 4) |= 1u;
      uint64_t v9 = v11[3];
      if (!v9) {
        goto LABEL_13;
      }
LABEL_4:
      sub_E15750((const std::string **)(*a1 + 3200 * v6++), v9);
LABEL_5:
      v5 += 8;
      if (v7 == v5) {
        return;
      }
    }
    uint64_t v12 = *(void *)(v10 + 8);
    uint64_t v13 = (void *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
    if (v12) {
      uint64_t v13 = (void *)*v13;
    }
    int v11 = sub_13D8B80((uint64_t)v13);
    *(void *)(v10 + 264) = v11;
    *((_DWORD *)v11 + 4) |= 1u;
    uint64_t v9 = v11[3];
    if (v9) {
      goto LABEL_4;
    }
LABEL_13:
    uint64_t v14 = v11[1];
    uint64_t v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
    if (v14) {
      uint64_t v15 = (void *)*v15;
    }
    sub_13D8628((uint64_t)v15);
    uint64_t v9 = v8;
    v11[3] = v8;
    goto LABEL_4;
  }
}

void sub_DEE914()
{
  byte_25EBAA7 = 1;
  word_25EBA90 = 65;
  byte_25EBABF = 1;
  word_25EBAA8 = 65;
  char v1 = 7;
  strcpy((char *)v0, "UNKNOWN");
  int v2 = 0;
  char v4 = 14;
  strcpy((char *)v3, "ROUTES_THROUGH");
  int v5 = 1;
  char v7 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v8 = 3;
  char v10 = 11;
  strcpy((char *)v9, "ROUTES_FROM");
  int v11 = 2;
  xmmword_25EBB20 = 0u;
  *(_OWORD *)&qword_25EBB30 = 0u;
  dword_25EBB40 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25EBB20, (uint64_t)v0, (uint64_t)v0);
  sub_3A6EF0((uint64_t)&xmmword_25EBB20, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25EBB20, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25EBB20, (uint64_t)v9, (uint64_t)v9);
  if (v10 < 0)
  {
    operator delete(v9[0]);
    if ((v7 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v3[0]);
      if ((v1 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v0[0]);
      goto LABEL_5;
    }
  }
  else if ((v7 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v4 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v1 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25EBAD7 = 8;
  strcpy((char *)&qword_25EBAC0, "any_mode");
  byte_25EBAEF = 7;
  strcpy((char *)&dword_25EBAD8, "cycling");
  byte_25EBB07 = 7;
  strcpy((char *)&dword_25EBAF0, "driving");
  byte_25EBB1F = 7;
  strcpy((char *)&dword_25EBB08, "walking");
}

void sub_DEEB70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25EBB30) {
    sub_20B0A50((void **)qword_25EBB30);
  }
  long long v37 = (void *)xmmword_25EBB20;
  *(void *)&xmmword_25EBB20 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_DEEC10@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int **a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  sub_13E6614(a6, 0, 0);
  *(_DWORD *)(a6 + 40) |= 0x80u;
  *(_DWORD *)(a6 + 248) = 0;
  sub_51C5C((uint64_t)v65);
  sub_51D74((uint64_t)v65, (uint64_t)__p);
  *(_DWORD *)(a6 + 40) |= 2u;
  uint64_t v12 = *(void *)(a6 + 8);
  uint64_t v13 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
  if (v12) {
    uint64_t v13 = (uint64_t *)*v13;
  }
  sub_1881E08((uint64_t *)(a6 + 200), (long long *)__p, v13);
  if (v58 < 0)
  {
    operator delete(__p[0]);
    uint64_t v14 = *(_DWORD **)(a6 + 64);
    long double v53 = a4;
    if (!v14) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v14 = *(_DWORD **)(a6 + 64);
    long double v53 = a4;
    if (!v14) {
      goto LABEL_9;
    }
  }
  uint64_t v15 = *(int *)(a6 + 56);
  if ((int)v15 < *v14)
  {
    *(_DWORD *)(a6 + 56) = v15 + 1;
    uint64_t v16 = *(void *)&v14[2 * v15 + 2];
    goto LABEL_10;
  }
LABEL_9:
  uint64_t v17 = sub_13F37D4(*(void *)(a6 + 48));
  uint64_t v16 = sub_188CDC8(a6 + 48, v17);
LABEL_10:
  sub_E1CA10(v65, (void *)*a1);
  unint64_t v18 = (void *)sub_5231C(a3);
  if (*v18 != v18[1])
  {
    uint64_t v19 = (uint64_t **)sub_5231C(a3);
    uint64_t v20 = (uint64_t *)sub_591248(a3);
    uint64_t v54 = 0;
    char v55 = 0;
    uint64_t v56 = 0;
    sub_E1CA14(v65, v19, a2, v20, (char **)&v54, (uint64_t)__p);
    int v21 = v54;
    if (v54)
    {
      char v55 = v54;
      operator delete(v54);
    }
    sub_DEF07C((uint64_t)v21, v16, (uint64_t)__p, *(unsigned char *)(a2 + 177));
    if (v62) {
      uint64_t v22 = (uint64_t *)(v62 + 8);
    }
    else {
      uint64_t v22 = 0;
    }
    if (v61)
    {
      uint64_t v23 = 8 * v61;
      do
      {
        uint64_t v24 = *v22;
        int v25 = *(_DWORD **)(a6 + 136);
        if (v25 && (uint64_t v26 = *(int *)(a6 + 128), (int)v26 < *v25))
        {
          *(_DWORD *)(a6 + 128) = v26 + 1;
          int v27 = *(unsigned char **)&v25[2 * v26 + 2];
        }
        else
        {
          uint64_t v28 = sub_13D9A2C(*(void *)(a6 + 120));
          int v27 = (unsigned char *)sub_188CDC8(a6 + 120, (uint64_t)v28);
        }
        sub_13C0820(v27, v24);
        ++v22;
        v23 -= 8;
      }
      while (v23);
    }
    if (v64) {
      uint64_t v29 = (uint64_t *)(v64 + 8);
    }
    else {
      uint64_t v29 = 0;
    }
    if (v63)
    {
      uint64_t v30 = 8 * v63;
      do
      {
        uint64_t v31 = *v29;
        uint64_t v32 = *(_DWORD **)(a6 + 112);
        if (v32 && (uint64_t v33 = *(int *)(a6 + 104), (int)v33 < *v32))
        {
          *(_DWORD *)(a6 + 104) = v33 + 1;
          uint64_t v34 = *(unsigned char **)&v32[2 * v33 + 2];
        }
        else
        {
          uint64_t v35 = sub_13D9774(*(void *)(a6 + 96));
          uint64_t v34 = (unsigned char *)sub_188CDC8(a6 + 96, (uint64_t)v35);
        }
        sub_13BD228(v34, v31);
        ++v29;
        v30 -= 8;
      }
      while (v30);
    }
    if (v60) {
      uint64_t v36 = (uint64_t *)(v60 + 8);
    }
    else {
      uint64_t v36 = 0;
    }
    if (v59)
    {
      uint64_t v37 = 8 * v59;
      do
      {
        uint64_t v38 = *v36;
        unint64_t v39 = *(_DWORD **)(a6 + 88);
        if (v39 && (uint64_t v40 = *(int *)(a6 + 80), (int)v40 < *v39))
        {
          *(_DWORD *)(a6 + 80) = v40 + 1;
          uint64_t v41 = *(void *)&v39[2 * v40 + 2];
        }
        else
        {
          sub_13D96E0(*(void *)(a6 + 72));
          uint64_t v41 = sub_188CDC8(a6 + 72, v42);
        }
        sub_13BC828(v41, v38);
        ++v36;
        v37 -= 8;
      }
      while (v37);
    }
    sub_162D64C(__p);
  }
  sub_DEF264((uint64_t)a1, a3, a2, v16);
  if (*(unsigned char *)(a2 + 176))
  {
    __darwin_ct_rune_t v43 = (uint64_t *)sub_590DDC(a3);
    uint64_t v44 = *v43;
    uint64_t v45 = v43[1];
    if (*v43 != v45)
    {
      do
      {
        sub_E10E84((uint64_t *)(v44 + 7328), v16);
        v44 += 12328;
      }
      while (v44 != v45);
    }
  }
  sub_DEF774(a1, a3, v53, a2, a5);
  uint64_t v46 = sub_50BE8(a3);
  uint64_t result = sub_68E9C(v46);
  if (*(_DWORD *)result != 0x7FFFFFFF
    && *(_DWORD *)(result + 4) != 0x7FFFFFFF
    && *(void *)(result + 16) != 0x7FFFFFFFFFFFFFFFLL
    && *(_DWORD *)(result + 8) != 0x7FFFFFFF)
  {
    uint64_t v51 = sub_50BE8(a3);
    uint64_t result = sub_68E9C(v51);
    int v52 = *(_DWORD *)result - 978307200;
    *(_DWORD *)(a6 + 40) |= 0x100u;
    *(_DWORD *)(a6 + 252) = v52;
  }
  return result;
}

void sub_DEEFE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_162D64C(&a13);
  sub_13E6DAC(v18);
  _Unwind_Resume(a1);
}

void sub_DEF07C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = *(int *)(a3 + 56);
  if (v4)
  {
    uint64_t v8 = *(void *)(a3 + 64);
    if (v8) {
      uint64_t v9 = (uint64_t *)(v8 + 8);
    }
    else {
      uint64_t v9 = 0;
    }
    char v10 = (uint64_t *)(a2 + 96);
    uint64_t v11 = 8 * v4;
    do
    {
      while (1)
      {
        uint64_t v14 = *v9;
        uint64_t v15 = *(_DWORD **)(a2 + 112);
        if (v15)
        {
          uint64_t v16 = *(int *)(a2 + 104);
          if ((int)v16 < *v15) {
            break;
          }
        }
        uint64_t v12 = sub_13D8E84(*v10);
        uint64_t v13 = sub_188CDC8((uint64_t)v10, v12);
        sub_13AD5E8(v13, v14);
        ++v9;
        v11 -= 8;
        if (!v11) {
          goto LABEL_10;
        }
      }
      *(_DWORD *)(a2 + 104) = v16 + 1;
      sub_13AD5E8(*(void *)&v15[2 * v16 + 2], v14);
      ++v9;
      v11 -= 8;
    }
    while (v11);
LABEL_10:
    if (a4)
    {
      uint64_t v17 = *(void *)(a3 + 112);
      if (v17) {
        uint64_t v18 = (uint64_t *)(v17 + 8);
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v19 = *(int *)(a3 + 104);
      if (v19)
      {
        uint64_t v20 = 8 * v19;
        do
        {
          while (1)
          {
            uint64_t v23 = *v18;
            uint64_t v24 = *(_DWORD **)(a2 + 232);
            if (v24)
            {
              uint64_t v25 = *(int *)(a2 + 224);
              if ((int)v25 < *v24) {
                break;
              }
            }
            uint64_t v21 = sub_13D9608(*(void *)(a2 + 216));
            uint64_t v22 = sub_188CDC8(a2 + 216, v21);
            sub_13BAFEC(v22, v23);
            ++v18;
            v20 -= 8;
            if (!v20) {
              goto LABEL_20;
            }
          }
          *(_DWORD *)(a2 + 224) = v25 + 1;
          sub_13BAFEC(*(void *)&v24[2 * v25 + 2], v23);
          ++v18;
          v20 -= 8;
        }
        while (v20);
      }
LABEL_20:
      uint64_t v26 = *(void *)(a3 + 136);
      if (v26) {
        int v27 = (uint64_t *)(v26 + 8);
      }
      else {
        int v27 = 0;
      }
      uint64_t v28 = *(int *)(a3 + 128);
      if (v28)
      {
        uint64_t v29 = 8 * v28;
        do
        {
          while (1)
          {
            uint64_t v32 = *v27;
            uint64_t v33 = *(_DWORD **)(a2 + 256);
            if (v33)
            {
              uint64_t v34 = *(int *)(a2 + 248);
              if ((int)v34 < *v33) {
                break;
              }
            }
            uint64_t v30 = sub_13D9608(*(void *)(a2 + 240));
            uint64_t v31 = sub_188CDC8(a2 + 240, v30);
            sub_13BAFEC(v31, v32);
            ++v27;
            v29 -= 8;
            if (!v29) {
              return;
            }
          }
          *(_DWORD *)(a2 + 248) = v34 + 1;
          sub_13BAFEC(*(void *)&v33[2 * v34 + 2], v32);
          ++v27;
          v29 -= 8;
        }
        while (v29);
      }
    }
  }
}

BOOL sub_DEF264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (long long *)nullsub_1(a2);
  *(_DWORD *)(a4 + 40) |= 1u;
  uint64_t v7 = *(void *)(a4 + 8);
  uint64_t v8 = (uint64_t *)(v7 & 0xFFFFFFFFFFFFFFFCLL);
  if (v7) {
    uint64_t v8 = (uint64_t *)*v8;
  }
  sub_1881DF4((std::string **)(a4 + 456), v6, v8);
  uint64_t v59 = a2;
  uint64_t v9 = (unsigned int *)sub_590DDC(a2);
  uint64_t v10 = *(void *)v9;
  uint64_t v60 = *((void *)v9 + 1);
  if (*(void *)v9 != v60)
  {
    uint64_t v62 = (uint64_t *)(a4 + 48);
    uint64_t v63 = a4;
    while (1)
    {
      uint64_t v11 = *(void *)(v10 + 1088);
      uint64_t v61 = v10;
      uint64_t v64 = *(void *)(v10 + 1096);
      if (v11 != v64) {
        break;
      }
LABEL_5:
      uint64_t v10 = v61 + 12328;
      if (v61 + 12328 == v60) {
        goto LABEL_37;
      }
    }
    while (1)
    {
      uint64_t v12 = *(_DWORD **)(a4 + 64);
      if (v12 && (uint64_t v13 = *(int *)(a4 + 56), (int)v13 < *v12))
      {
        *(_DWORD *)(a4 + 56) = v13 + 1;
        uint64_t v14 = *(void *)&v12[2 * v13 + 2];
      }
      else
      {
        uint64_t v15 = sub_13F3778(*v62);
        uint64_t v9 = (unsigned int *)sub_188CDC8((uint64_t)v62, v15);
        uint64_t v14 = (uint64_t)v9;
      }
      int v16 = *(_DWORD *)v11;
      int v17 = *(_DWORD *)(v14 + 40);
      *(_DWORD *)(v14 + 40) = v17 | 8;
      *(_DWORD *)(v14 + 72) = v16;
      int v18 = *(_DWORD *)(v11 + 880);
      int v19 = v18 / 10;
      int v20 = v18 % 10;
      if (v18 < 0) {
        char v21 = -5;
      }
      else {
        char v21 = 5;
      }
      *(_DWORD *)(v14 + 40) = v17 | 0x18;
      *(_DWORD *)(v14 + 76) = v19
                            + (((103 * (char)(v21 + v20)) >> 15) & 1)
                            + ((103 * (char)(v21 + v20)) >> 10);
      uint64_t v22 = *(void *)(v11 + 2232);
      uint64_t v23 = *(void *)(v11 + 2240);
      if (v22 != v23)
      {
        *(_DWORD *)(v14 + 40) = v17 | 0x19;
        uint64_t v24 = *(unsigned int **)(v14 + 48);
        if (v24)
        {
          if (v23 != v22) {
            goto LABEL_23;
          }
        }
        else
        {
          uint64_t v25 = *(void *)(v14 + 8);
          uint64_t v26 = (void *)(v25 & 0xFFFFFFFFFFFFFFFCLL);
          if (v25) {
            uint64_t v26 = (void *)*v26;
          }
          sub_13D62B8((uint64_t)v26);
          uint64_t v24 = v9;
          *(void *)(v14 + 48) = v9;
          uint64_t v23 = *(void *)(v11 + 2240);
          if (v23 != *(void *)(v11 + 2232))
          {
LABEL_23:
            int v27 = v24 + 10;
            uint64_t v28 = v23;
            do
            {
              while (1)
              {
                uint64_t v29 = *(void *)(v28 - 16);
                v28 -= 16;
                int v30 = (int)v29 / 100;
                int v31 = (int)v29 % 100;
                __int16 v32 = v29 < 0 ? -50 : 50;
                unsigned int v33 = v30 + ((5243 * (__int16)(v32 + v31)) >> 19) + ((5243 * (__int16)(v32 + v31)) >> 31);
                uint64_t v34 = v24[4];
                if (v34 == v24[5])
                {
                  unsigned int v35 = v34 + 1;
                  sub_188C80C(v24 + 4, v34 + 1);
                  *(_DWORD *)(*((void *)v24 + 3) + 4 * v34) = v33;
                }
                else
                {
                  *(_DWORD *)(*((void *)v24 + 3) + 4 * v34) = v33;
                  unsigned int v35 = v34 + 1;
                }
                v24[4] = v35;
                int v36 = *(_DWORD *)(v23 - 8);
                int v37 = v36 / 10;
                int v38 = v36 % 10;
                char v39 = v36 < 0 ? -5 : 5;
                unsigned int v40 = v37 + (((103 * (char)(v39 + v38)) >> 15) & 1) + ((103 * (char)(v39 + v38)) >> 10);
                uint64_t v41 = v24[10];
                if (v41 == v24[11]) {
                  break;
                }
                *(_DWORD *)(*((void *)v24 + 6) + 4 * v41) = v40;
                _DWORD *v27 = v41 + 1;
                uint64_t v23 = v28;
                if (v28 == *(void *)(v11 + 2232)) {
                  goto LABEL_8;
                }
              }
              sub_188C80C(v24 + 10, v41 + 1);
              *(_DWORD *)(*((void *)v24 + 6) + 4 * v41) = v40;
              _DWORD *v27 = v41 + 1;
              uint64_t v23 = v28;
            }
            while (v28 != *(void *)(v11 + 2232));
          }
        }
      }
LABEL_8:
      sub_DF062C((uint64_t)v9, v11, v14);
      v11 += 2400;
      a4 = v63;
      if (v11 == v64) {
        goto LABEL_5;
      }
    }
  }
LABEL_37:
  if (*(unsigned char *)(a3 + 177))
  {
    *(_OWORD *)__p = 0u;
    *(_OWORD *)uint64_t v66 = 0u;
    int v67 = 1065353216;
    uint64_t v42 = (uint64_t *)sub_590DDC(v59);
    uint64_t v44 = *v42;
    uint64_t v43 = v42[1];
    if (*v42 != v43)
    {
      do
      {
        sub_DF0310((uint64_t)v42, v44, __p, a4);
        v44 += 12328;
      }
      while (v44 != v43);
    }
    uint64_t v45 = (uint64_t *)sub_590DDC(v59);
    uint64_t v47 = *v45;
    uint64_t v46 = v45[1];
    if (*v45 != v46)
    {
      do
      {
        sub_DF04E0((uint64_t)v45, v47, (uint64_t)__p, a4);
        v47 += 12328;
      }
      while (v47 != v46);
    }
    if (sub_591234(v59))
    {
      double v48 = (uint64_t *)sub_5911EC(v59);
      uint64_t v49 = *v48;
      *(_DWORD *)(a4 + 40) |= 4u;
      uint64_t v50 = *(void *)(a4 + 472);
      if (!v50)
      {
        uint64_t v51 = *(void *)(a4 + 8);
        int v52 = (void *)(v51 & 0xFFFFFFFFFFFFFFFCLL);
        if (v51) {
          int v52 = (void *)*v52;
        }
        sub_13D9384((uint64_t)v52);
        uint64_t v50 = (uint64_t)v48;
        *(void *)(a4 + 472) = v48;
      }
      sub_DEFB0C((uint64_t)v48, v49, __p, v50);
    }
    long double v53 = (void **)v66[0];
    if (v66[0])
    {
      do
      {
        __darwin_ct_rune_t v57 = (void **)*v53;
        if (*((char *)v53 + 39) < 0) {
          operator delete(v53[2]);
        }
        operator delete(v53);
        long double v53 = v57;
      }
      while (v57);
    }
    uint64_t v9 = (unsigned int *)__p[0];
    __p[0] = 0;
    if (v9) {
      operator delete(v9);
    }
  }
  sub_DF0070((uint64_t)v9, v59, a3, (_DWORD *)a4);
  BOOL result = sub_591234(v59);
  if (result)
  {
    char v55 = *(int **)sub_5911EC(v59);
    int v56 = *v55;
    BOOL result = sub_564C84((uint64_t)v55);
    if (result && (v56 - 10) <= 2)
    {
      *(_DWORD *)(a4 + 40) |= 0x40u;
      *(unsigned char *)(a4 + 504) = 1;
    }
  }
  return result;
}

void sub_DEF738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_3A4C2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DEF74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_3A4C2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DEF760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_3A4C2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DEF774(uint64_t *a1, uint64_t a2, int **a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = nullsub_1(a5);
  char v46 = *(unsigned char *)(v9 + 128);
  if (v46) {
    sub_4895AC((uint64_t)&v39, (long long *)v9);
  }
  sub_486A64(a5, 0);
  if (v46)
  {
    uint64_t v10 = sub_5231C(a2);
    sub_E2C138(v38, (void *)*a1, a4);
    uint64_t v11 = (unsigned int *)nullsub_1(a2);
    int v12 = sub_DC5C04(v11);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7380, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_24F7380))
    {
      dword_24F7360 = -1;
      qword_24F7370 = 0;
      unk_24F7378 = 0;
      qword_24F7368 = 0;
      __cxa_guard_release(&qword_24F7380);
    }
    uint64_t v13 = *a3;
    uint64_t v14 = a3[1];
    if (*a3 != v14)
    {
      uint64_t v15 = &dword_24F7360;
      while (*v13 != v12)
      {
        v13 += 8;
        if (v13 == v14) {
          goto LABEL_13;
        }
      }
    }
    if (v13 == v14) {
      uint64_t v15 = &dword_24F7360;
    }
    else {
      uint64_t v15 = v13;
    }
LABEL_13:
    sub_E2EF1C((uint64_t)v38, a2, (uint64_t)v15, a5);
    int v16 = *(void **)v10;
    int v17 = *(void **)(v10 + 8);
    if (*(void **)v10 != v17)
    {
      while (1)
      {
        if ((sub_6478D8((uint64_t)v16) & 0xFFFFFFFD) != 0) {
          goto LABEL_17;
        }
        char v19 = sub_E2BD58(*a1);
        char v20 = sub_6478D8((uint64_t)v16);
        sub_E2C128((uint64_t)v37, v20, v19, 0, 0x7FFFFFFF);
        int v33 = -1;
        unsigned int v35 = 0;
        uint64_t v36 = 0;
        __p = 0;
        sub_E2C1C4(v38, v16, v37, (uint64_t)&v33, a5);
        char v21 = (void **)__p;
        if (!__p) {
          goto LABEL_17;
        }
        uint64_t v22 = v35;
        int v18 = __p;
        if (v35 != __p) {
          break;
        }
LABEL_16:
        unsigned int v35 = v21;
        operator delete(v18);
LABEL_17:
        v16 += 945;
        if (v16 == v17) {
          goto LABEL_38;
        }
      }
      while ((*((char *)v22 - 1) & 0x80000000) == 0)
      {
        uint64_t v24 = *(v22 - 6);
        if (v24) {
          goto LABEL_27;
        }
LABEL_28:
        uint64_t v25 = v22 - 9;
        uint64_t v26 = (char *)*(v22 - 9);
        if (v26)
        {
          int v27 = (char *)*(v22 - 8);
          uint64_t v23 = *(v22 - 9);
          if (v27 != v26)
          {
            do
            {
              uint64_t v28 = (void *)*((void *)v27 - 6);
              if (v28)
              {
                *((void *)v27 - 5) = v28;
                operator delete(v28);
              }
              if (*(v27 - 57) < 0) {
                operator delete(*((void **)v27 - 10));
              }
              v27 -= 80;
            }
            while (v27 != v26);
            uint64_t v23 = *v25;
          }
          *(v22 - 8) = v26;
          operator delete(v23);
        }
        v22 -= 9;
        if (v25 == v21)
        {
          int v18 = __p;
          goto LABEL_16;
        }
      }
      operator delete(*(v22 - 3));
      uint64_t v24 = *(v22 - 6);
      if (!v24) {
        goto LABEL_28;
      }
LABEL_27:
      *(v22 - 5) = v24;
      operator delete(v24);
      goto LABEL_28;
    }
LABEL_38:
    sub_E2CE94((uint64_t)v38, a5);
    sub_C6B354(v38);
    if (v46)
    {
      if (v44)
      {
        uint64_t v45 = v44;
        operator delete(v44);
      }
      uint64_t v29 = v42;
      if (v42)
      {
        uint64_t v30 = v43;
        int v31 = v42;
        if ((void *)v43 != v42)
        {
          do
            uint64_t v30 = sub_489CF4(v30 - 144);
          while ((void *)v30 != v29);
          int v31 = v42;
        }
        uint64_t v43 = (uint64_t)v29;
        operator delete(v31);
      }
      if (v40)
      {
        uint64_t v41 = v40;
        operator delete(v40);
      }
    }
  }
}

void sub_DEFAAC(_Unwind_Exception *a1)
{
  sub_4851DC(v1 - 232);
  _Unwind_Resume(a1);
}

uint64_t sub_DEFB0C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t result = sub_564C84(a2);
  if (!result) {
    return result;
  }
  *(_DWORD *)(a4 + 16) |= 8u;
  uint64_t v8 = *(void *)(a4 + 144);
  if (!v8)
  {
    uint64_t v9 = *(void *)(a4 + 8);
    uint64_t v10 = (void *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
    if (v9) {
      uint64_t v10 = (void *)*v10;
    }
    sub_13D6A1C((uint64_t)v10);
    uint64_t v8 = v11;
    *(void *)(a4 + 144) = v11;
  }
  sub_5F4D30((const std::string **)(a2 + 80), v8);
  *(_DWORD *)(a4 + 16) |= 0x10u;
  uint64_t v12 = *(void *)(a4 + 152);
  if (!v12)
  {
    uint64_t v13 = *(void *)(a4 + 8);
    uint64_t v14 = (void *)(v13 & 0xFFFFFFFFFFFFFFFCLL);
    if (v13) {
      uint64_t v14 = (void *)*v14;
    }
    sub_13D6A1C((uint64_t)v14);
    uint64_t v12 = v15;
    *(void *)(a4 + 152) = v15;
  }
  sub_5F4D30((const std::string **)(a2 + 240), v12);
  *(_DWORD *)(a4 + 16) |= 0x20u;
  uint64_t v16 = *(void *)(a4 + 160);
  if (!v16)
  {
    uint64_t v17 = *(void *)(a4 + 8);
    int v18 = (void *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
    if (v17) {
      int v18 = (void *)*v18;
    }
    sub_13D6A1C((uint64_t)v18);
    uint64_t v16 = v19;
    *(void *)(a4 + 160) = v19;
  }
  sub_5F4D30((const std::string **)(a2 + 400), v16);
  *(_DWORD *)(a4 + 16) |= 1u;
  uint64_t v20 = *(void *)(a4 + 8);
  char v21 = (uint64_t *)(v20 & 0xFFFFFFFFFFFFFFFCLL);
  if (v20) {
    char v21 = (uint64_t *)*v21;
  }
  sub_1881DF4((std::string **)(a4 + 120), (long long *)(a2 + 8), v21);
  char v22 = *(unsigned char *)(a2 + 992);
  *(_DWORD *)(a4 + 16) |= 0x8000000u;
  *(unsigned char *)(a4 + 266) = v22;
  if (sub_564824(a2 + 80))
  {
    *(_DWORD *)(a4 + 16) |= 0x40u;
    uint64_t v43 = *(void *)(a4 + 168);
    if (!v43)
    {
      uint64_t v44 = *(void *)(a4 + 8);
      uint64_t v45 = (void *)(v44 & 0xFFFFFFFFFFFFFFFCLL);
      if (v44) {
        uint64_t v45 = (void *)*v45;
      }
      sub_13D6A1C((uint64_t)v45);
      uint64_t v43 = v46;
      *(void *)(a4 + 168) = v46;
    }
    sub_5F4D30((const std::string **)(a2 + 560), v43);
    uint64_t v23 = (uint64_t *)(a2 + 728);
    if (!sub_564868((void *)(a2 + 728)))
    {
LABEL_18:
      if (!sub_56487C((uint64_t)v23)) {
        goto LABEL_19;
      }
      goto LABEL_53;
    }
  }
  else
  {
    uint64_t v23 = (uint64_t *)(a2 + 728);
    if (!sub_564868((void *)(a2 + 728))) {
      goto LABEL_18;
    }
  }
  int v47 = (int)*v23 / 100;
  int v48 = (int)*v23 % 100;
  if (*v23 < 0) {
    __int16 v49 = -50;
  }
  else {
    __int16 v49 = 50;
  }
  *(_DWORD *)(a4 + 16) |= 0x800u;
  *(_DWORD *)(a4 + 208) = v47
                        + ((5243 * (__int16)(v49 + v48)) >> 19)
                        + ((5243 * (__int16)(v49 + v48)) >> 31);
  if (!sub_56487C((uint64_t)v23))
  {
LABEL_19:
    uint64_t v24 = *(void *)(a2 + 968);
    if (v24 == 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_20;
    }
    goto LABEL_57;
  }
LABEL_53:
  uint64_t v50 = *(void *)(a2 + 744);
  int v51 = (int)v50 / 100;
  int v52 = (int)v50 % 100;
  if (v50 < 0) {
    __int16 v53 = -50;
  }
  else {
    __int16 v53 = 50;
  }
  *(_DWORD *)(a4 + 16) |= 0x1000u;
  *(_DWORD *)(a4 + 212) = v51
                        + ((5243 * (__int16)(v53 + v52)) >> 19)
                        + ((5243 * (__int16)(v53 + v52)) >> 31);
  uint64_t v24 = *(void *)(a2 + 968);
  if (v24 == 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_20:
    uint64_t v25 = *(unsigned __int8 *)(a2 + 959);
    if ((v25 & 0x80u) != 0) {
      uint64_t v25 = *(void *)(a2 + 944);
    }
    if (!v25) {
      goto LABEL_23;
    }
    goto LABEL_63;
  }
LABEL_57:
  int v54 = (int)v24 / 100;
  int v55 = (int)v24 % 100;
  if (v24 < 0) {
    __int16 v56 = -50;
  }
  else {
    __int16 v56 = 50;
  }
  *(_DWORD *)(a4 + 16) |= 0x2000u;
  *(_DWORD *)(a4 + 216) = v54
                        + ((5243 * (__int16)(v56 + v55)) >> 19)
                        + ((5243 * (__int16)(v56 + v55)) >> 31);
  uint64_t v57 = *(unsigned __int8 *)(a2 + 959);
  if ((v57 & 0x80u) != 0) {
    uint64_t v57 = *(void *)(a2 + 944);
  }
  if (!v57)
  {
LABEL_23:
    int v26 = *(_DWORD *)(a2 + 720);
    if (v26 == 0x7FFFFFFF) {
      goto LABEL_28;
    }
    goto LABEL_24;
  }
LABEL_63:
  char v58 = sub_DF0F28(a3, a2 + 936);
  if (!v58) {
    sub_5AE8("unordered_map::at: key not found");
  }
  int v59 = *((_DWORD *)v58 + 10);
  *(_DWORD *)(a4 + 16) |= 0x4000u;
  *(_DWORD *)(a4 + 220) = v59;
  int v26 = *(_DWORD *)(a2 + 720);
  if (v26 != 0x7FFFFFFF)
  {
LABEL_24:
    int v27 = v26 / 10;
    int v28 = v26 % 10;
    if (v26 < 0) {
      char v29 = -5;
    }
    else {
      char v29 = 5;
    }
    *(_DWORD *)(a4 + 16) |= 0x20000u;
    *(_DWORD *)(a4 + 232) = v27
                          + (((103 * (char)(v29 + v28)) >> 15) & 1)
                          + ((103 * (char)(v29 + v28)) >> 10);
  }
LABEL_28:
  unsigned int v30 = *(_DWORD *)(a2 + 996) - 1;
  if (v30 <= 3)
  {
    *(_DWORD *)(a4 + 16) |= 0x8000u;
    *(_DWORD *)(a4 + 224) = v30;
  }
  int v31 = sub_E1598C(*(_DWORD *)a2);
  *(_DWORD *)(a4 + 16) |= 0x10000u;
  *(_DWORD *)(a4 + 228) = v31;
  uint64_t result = sub_564DC0(a2);
  if (result)
  {
    uint64_t v32 = *(void *)(a2 + 1000);
    for (uint64_t i = *(void *)(a2 + 1008); v32 != i; v32 += 168)
    {
      while (1)
      {
        uint64_t v36 = *(_DWORD **)(a4 + 112);
        if (v36)
        {
          uint64_t v37 = *(int *)(a4 + 104);
          if ((int)v37 < *v36) {
            break;
          }
        }
        uint64_t v34 = sub_13D9308(*(void *)(a4 + 96));
        unsigned int v35 = (int32x2_t *)sub_188CDC8(a4 + 96, (uint64_t)v34);
        sub_E15250(v32, v35);
        v32 += 168;
        if (v32 == i) {
          goto LABEL_37;
        }
      }
      *(_DWORD *)(a4 + 104) = v37 + 1;
      sub_E15250(v32, *(int32x2_t **)&v36[2 * v37 + 2]);
    }
LABEL_37:
    int v38 = *(_DWORD *)(a2 + 1024);
    *(_DWORD *)(a4 + 16) |= 0x40000u;
    *(_DWORD *)(a4 + 236) = v38;
    if (sub_564890((uint64_t)v23))
    {
      int v39 = *(_DWORD *)(a2 + 760);
      int v40 = v39 / 10;
      int v41 = v39 % 10;
      if (v39 < 0) {
        char v42 = -5;
      }
      else {
        char v42 = 5;
      }
      *(_DWORD *)(a4 + 16) |= 0x1000000u;
      *(_DWORD *)(a4 + 260) = v40
                            + (((103 * (char)(v42 + v41)) >> 15) & 1)
                            + ((103 * (char)(v42 + v41)) >> 10);
    }
    uint64_t result = sub_564C44(a2);
    *(_DWORD *)(a4 + 16) |= 0x4000000u;
    *(unsigned char *)(a4 + 265) = result;
  }
  return result;
}

uint64_t sub_DF0070(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v6 = (unsigned int **)sub_50BE8(a2);
  uint64_t v7 = v6;
  if (*(unsigned char *)(a3 + 178) && sub_646DF4(v6))
  {
    int v8 = sub_646DE0(v7);
    if (v8 < 0) {
      char v9 = -5;
    }
    else {
      char v9 = 5;
    }
    a4[10] |= 0x80u;
    a4[127] = v8 / 10 + (((103 * (char)(v9 + v8 % 10)) >> 15) & 1) + ((103 * (char)(v9 + v8 % 10)) >> 10);
  }
  if (*(unsigned char *)(a3 + 179) && sub_646D74(v7))
  {
    int v10 = sub_646D60(v7);
    if (v10 < 0) {
      char v11 = -5;
    }
    else {
      char v11 = 5;
    }
    a4[10] |= 0x800u;
    a4[131] = v10 / 10
            + (((103 * (char)(v11 + v10 % 10)) >> 15) & 1)
            + ((103 * (char)(v11 + v10 % 10)) >> 10);
  }
  if (sub_646E74(v7))
  {
    int v13 = sub_646E60(v7);
    if (v13 < 0) {
      char v14 = -5;
    }
    else {
      char v14 = 5;
    }
    a4[10] |= 0x100u;
    a4[128] = v13 / 10
            + (((103 * (char)(v14 + v13 % 10)) >> 15) & 1)
            + ((103 * (char)(v14 + v13 % 10)) >> 10);
    if (!sub_646CF0(v7))
    {
LABEL_15:
      uint64_t result = sub_646EF4(v7);
      if (!result) {
        return result;
      }
      goto LABEL_25;
    }
  }
  else if (!sub_646CF0(v7))
  {
    goto LABEL_15;
  }
  int v15 = sub_646CE8((uint64_t)v7);
  if (v15 < 0) {
    char v16 = -5;
  }
  else {
    char v16 = 5;
  }
  a4[10] |= 0x200u;
  a4[129] = v15 / 10
          + (((103 * (char)(v16 + v15 % 10)) >> 15) & 1)
          + ((103 * (char)(v16 + v15 % 10)) >> 10);
  uint64_t result = sub_646EF4(v7);
  if (result)
  {
LABEL_25:
    uint64_t result = sub_646EE0(v7);
    if ((int)result < 0) {
      char v17 = -5;
    }
    else {
      char v17 = 5;
    }
    a4[10] |= 0x400u;
    a4[130] = (int)result / 10
            + (((103 * (char)(v17 + (int)result % 10)) >> 15) & 1)
            + ((103 * (char)(v17 + (int)result % 10)) >> 10);
  }
  return result;
}

void sub_DF0310(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a2 + 7352);
  uint64_t v5 = *(void *)(a2 + 7360);
  if (v4 != v5)
  {
    int v8 = (uint64_t *)(a4 + 192);
    do
    {
      int v9 = *(_DWORD *)(a4 + 200);
      if (sub_DF0884(a3, v4 + 40))
      {
        uint64_t v20 = (long long *)(v4 + 40);
        sub_DF0AB4((uint64_t)a3, v4 + 40, (uint64_t)&unk_20F06E0, &v20);
        if (!*(unsigned char *)(v4 + 432)) {
          goto LABEL_16;
        }
      }
      else
      {
        uint64_t v20 = (long long *)(v4 + 40);
        *((_DWORD *)sub_DF0AB4((uint64_t)a3, v4 + 40, (uint64_t)&unk_20F06E0, &v20) + 10) = v9;
        char v11 = *(_DWORD **)(a4 + 208);
        if (v11 && (uint64_t v12 = *(int *)(a4 + 200), (int)v12 < *v11))
        {
          *(_DWORD *)(a4 + 200) = v12 + 1;
          uint64_t v13 = *(void *)&v11[2 * v12 + 2];
        }
        else
        {
          uint64_t v14 = sub_13D9608(*v8);
          uint64_t v13 = sub_188CDC8((uint64_t)v8, v14);
        }
        sub_E1163C(v4, v13, 0, v10);
        if (!*(unsigned char *)(v4 + 432))
        {
LABEL_16:
          exception = __cxa_allocate_exception(8uLL);
          void *exception = &off_2439078;
        }
      }
      uint64_t v15 = *(void *)(v4 + 424);
      int v16 = (int)v15 / 100;
      int v17 = (int)v15 % 100;
      if (v15 < 0) {
        __int16 v18 = -50;
      }
      else {
        __int16 v18 = 50;
      }
      sub_E15044(v16 + ((5243 * (__int16)(v18 + v17)) >> 19) + ((5243 * (__int16)(v18 + v17)) >> 31), a4);
      v4 += 1120;
    }
    while (v4 != v5);
  }
}

void sub_DF04E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a2 + 11584);
  uint64_t v5 = *(void *)(a2 + 11592);
  if (v4 != v5)
  {
    int v8 = (uint64_t *)(a4 + 192);
    do
    {
      int v16 = *(_DWORD *)(a4 + 200);
      uint64_t v19 = (long long *)(v4 + 8);
      *((_DWORD *)sub_DF0AB4(a3, v4 + 8, (uint64_t)&unk_20F06E0, &v19) + 10) = v16;
      int v17 = *(_DWORD **)(a4 + 208);
      if (v17 && (uint64_t v18 = *(int *)(a4 + 200), (int)v18 < *v17))
      {
        *(_DWORD *)(a4 + 200) = v18 + 1;
        uint64_t v10 = *(void *)&v17[2 * v18 + 2];
      }
      else
      {
        uint64_t v9 = sub_13D9608(*v8);
        uint64_t v10 = sub_188CDC8((uint64_t)v8, v9);
      }
      sub_E128E8(v4, v10, v11);
      uint64_t v12 = *(void *)(v4 + 32);
      int v13 = (int)v12 / 100;
      int v14 = (int)v12 % 100;
      if (v12 < 0) {
        __int16 v15 = -50;
      }
      else {
        __int16 v15 = 50;
      }
      sub_E15044(v13 + ((5243 * (__int16)(v15 + v14)) >> 19) + ((5243 * (__int16)(v15 + v14)) >> 31), a4);
      v4 += 168;
    }
    while (v4 != v5);
  }
}

void sub_DF062C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 40) |= 2u;
  uint64_t v4 = *(void *)(a3 + 56);
  if (!v4)
  {
    uint64_t v6 = *(void *)(a3 + 8);
    uint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
    if (v6) {
      uint64_t v7 = (void *)*v7;
    }
    sub_13DA9CC((uint64_t)v7);
    uint64_t v4 = v8;
    *(void *)(a3 + 56) = v8;
  }
  long long v17 = *(_OWORD *)(a2 + 2016);
  uint64_t v18 = *(void *)(a2 + 2032);
  if (sub_40A45C((int *)&v17))
  {
    unsigned int v9 = sub_3FB38C((uint64_t)&v17);
    *(_DWORD *)(v4 + 16) |= 0x40u;
    *(double *)(v4 + 56) = (double)v9;
  }
  sub_3B1DC8((uint64_t)&v19, (long long *)(a2 + 2256));
  if (v19 != 0x7FFFFFFF && v20[7] != 0x7FFFFFFF && sub_40A45C(v20) && v26 != -1)
  {
    if (v26 == 1)
    {
      if (v25 > 0xFFFFFFFEFFFFFFFFLL || !v25) {
        goto LABEL_22;
      }
    }
    else
    {
      if (v26)
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      if (v25 == -1) {
        goto LABEL_22;
      }
    }
    int v10 = v19 / 10;
    int v11 = v19 % 10;
    if (v19 < 0) {
      char v12 = -5;
    }
    else {
      char v12 = 5;
    }
    *(_DWORD *)(v4 + 16) |= 2u;
    *(_DWORD *)(v4 + 32) = v10
                         + (((103 * (char)(v12 + v11)) >> 15) & 1)
                         + ((103 * (char)(v12 + v11)) >> 10);
    double v13 = sub_3FB32C((uint64_t)v20);
    int v14 = *(_DWORD *)(v4 + 16);
    *(_DWORD *)(v4 + 16) = v14 | 1;
    *(double *)(v4 + 24) = v13;
    if (!v26)
    {
      unint64_t v15 = v25;
      *(_DWORD *)(v4 + 16) = v14 | 9;
      *(void *)(v4 + 40) = v15;
    }
  }
LABEL_22:
  if (__p)
  {
    uint64_t v24 = __p;
    operator delete(__p);
  }
  if (v21)
  {
    char v22 = v21;
    operator delete(v21);
  }
}

void sub_DF086C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_45E914((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_DF0884(void *a1, uint64_t a2)
{
  int v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_B128((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  char v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    double v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        int v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v21 == v8)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          uint64_t result = 0;
          double v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v17 == v8)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        uint64_t result = 0;
        double v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t *sub_DF0AB4(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_B128((uint64_t)v45, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    char v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          unint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v15[1];
            if (v22 == v11)
            {
              uint64_t v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v24 = v15[3];
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            uint64_t v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          uint64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  int v26 = (char *)operator new(0x30uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  char v46 = 0;
  *(void *)int v26 = 0;
  *((void *)v26 + 1) = v11;
  int v27 = v26 + 16;
  int v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_4200(v27, *(void **)v28, *((void *)v28 + 1));
  }
  else
  {
    long long v29 = *v28;
    *((void *)v26 + 4) = *((void *)v28 + 2);
    *(_OWORD *)int v27 = v29;
  }
  *((_DWORD *)v26 + 10) = 0;
  char v46 = 1;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    BOOL v34 = 1;
    if (v12 >= 3) {
      BOOL v34 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v12);
    unint64_t v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v38) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v38)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v38 < 3uLL || (uint8x8_t v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime < *(void *)&v38) {
LABEL_68:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        uint64_t v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        int v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        uint64_t v32 = *(void **)(*(void *)a1 + 8 * v11);
        int v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v42 & v11;
      uint64_t v32 = *(void **)(*(void *)a1 + 8 * (v42 & v11));
      int v33 = (void *)v45[0];
      if (v32) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *int v33 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v45[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v45[0])
    {
      unint64_t v43 = *(void *)(*(void *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12) {
          v43 %= v12;
        }
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  uint64_t v32 = *(void **)(*(void *)a1 + 8 * v4);
  int v33 = (void *)v45[0];
  if (!v32) {
    goto LABEL_81;
  }
LABEL_57:
  *int v33 = *v32;
  *uint64_t v32 = v45[0];
LABEL_92:
  uint64_t v15 = (uint64_t *)v45[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_DF0EFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_DF0F10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_DF0F28(void *a1, uint64_t a2)
{
  int v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_B128((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  unint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    uint8x8_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        int v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          uint64_t result = 0;
          uint8x8_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        uint64_t result = 0;
        uint8x8_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

double sub_DF1158()
{
  byte_25EBB5F = 1;
  word_25EBB48 = 65;
  byte_25EBB77 = 1;
  word_25EBB60 = 65;
  byte_25EBB8F = 8;
  strcpy((char *)&qword_25EBB78, "any_mode");
  byte_25EBBA7 = 7;
  strcpy((char *)&dword_25EBB90, "cycling");
  byte_25EBBBF = 7;
  strcpy((char *)&dword_25EBBA8, "driving");
  byte_25EBBD7 = 7;
  strcpy((char *)&dword_25EBBC0, "walking");
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25EBC08 = 0u;
  *(_OWORD *)&qword_25EBC18 = 0u;
  dword_25EBC28 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25EBC08, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25EBC08, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25EBC08, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25EBC08, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  qword_25EBBE0 = 0;
  qword_25EBBE8 = 0;
  qword_25EBBD8 = 0;
  v0 = operator new(9uLL);
  *(void *)v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25EBBD8 = (uint64_t)v0;
  qword_25EBBE0 = (uint64_t)(v0 + 9);
  qword_25EBBE8 = (uint64_t)(v0 + 9);
  qword_25EBBF0 = 0;
  qword_25EBBF8 = 0;
  unk_25EBC00 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25EBBF8 = (uint64_t)(v1 + 9);
  unk_25EBC00 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25EBBF0 = (uint64_t)v1;
  return result;
}

void sub_DF1414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25EBC18) {
    sub_20B0A94((void **)qword_25EBC18);
  }
  uint64_t v37 = (void *)xmmword_25EBC08;
  *(void *)&xmmword_25EBC08 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_DF14B4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  uint64_t v11 = 0;
  unint64_t v12 = operator new(0x28uLL);
  long long v13 = xmmword_20B8FD0;
  strcpy((char *)v12, "DrivingUpdateWaypointResponseBuilder");
  uint8x8_t v9 = 0;
  char v10 = 0;
  char v4 = sub_374CDC(a2, (uint64_t)&v12, (uint64_t *)&v9);
  *(unsigned char *)(a1 + 8) = 0;
  __p = operator new(0x28uLL);
  long long v15 = xmmword_20B9390;
  strcpy((char *)__p, "enable_dodgeball_replan_protocol");
  *(unsigned char *)(a1 + 8) = sub_29D62C(v4, (uint64_t)&__p);
  if (SHIBYTE(v15) < 0) {
    operator delete(__p);
  }
  int v5 = (void **)v9;
  if (v9)
  {
    unint64_t v6 = v10;
    char v7 = v9;
    if (v10 != v9)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      char v7 = v9;
    }
    char v10 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12);
  }
  return a1;
}

void sub_DF1600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
  {
    operator delete(__p);
    sub_1A668(&a10);
    if ((a18 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    sub_1A668(&a10);
    if ((a18 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(a13);
  _Unwind_Resume(a1);
}

uint64_t sub_DF1668@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int64x2_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  sub_13E6614(a6, 0, 0);
  *(_DWORD *)(a6 + 40) |= 0x80u;
  *(_DWORD *)(a6 + 248) = 0;
  sub_51C5C((uint64_t)v23);
  sub_51D74((uint64_t)v23, (uint64_t)__p);
  *(_DWORD *)(a6 + 40) |= 2u;
  uint64_t v12 = *(void *)(a6 + 8);
  long long v13 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
  if (v12) {
    long long v13 = (uint64_t *)*v13;
  }
  sub_1881E08((uint64_t *)(a6 + 200), (long long *)__p, v13);
  if (v25 < 0)
  {
    operator delete(__p[0]);
    if (*(unsigned char *)(a2 + 180)) {
      goto LABEL_12;
    }
  }
  else if (*(unsigned char *)(a2 + 180))
  {
    goto LABEL_12;
  }
  int v14 = *a1;
  *(_DWORD *)(a6 + 40) |= 0x10u;
  uint64_t v15 = *(void *)(a6 + 224);
  if (!v15)
  {
    uint64_t v16 = *(void *)(a6 + 8);
    unint64_t v17 = (void *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
    if (v16) {
      unint64_t v17 = (void *)*v17;
    }
    sub_13F3830((uint64_t)v17);
    uint64_t v15 = v18;
    *(void *)(a6 + 224) = v18;
  }
  sub_DF1854(a3, a2, v14, v15, a4);
LABEL_12:
  sub_DF1BFC(a3, (int **)a4, *a1, a2, a5);
  uint64_t v19 = sub_50BE8(a3);
  uint64_t result = sub_68E9C(v19);
  if (*(_DWORD *)result != 0x7FFFFFFF
    && *(_DWORD *)(result + 4) != 0x7FFFFFFF
    && *(void *)(result + 16) != 0x7FFFFFFFFFFFFFFFLL
    && *(_DWORD *)(result + 8) != 0x7FFFFFFF)
  {
    uint64_t v21 = sub_50BE8(a3);
    uint64_t result = sub_68E9C(v21);
    int v22 = *(_DWORD *)result - 978307200;
    *(_DWORD *)(a6 + 40) |= 0x100u;
    *(_DWORD *)(a6 + 252) = v22;
  }
  return result;
}

void sub_DF1818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_13E6DAC(v17);
    _Unwind_Resume(a1);
  }
  sub_13E6DAC(v17);
  _Unwind_Resume(a1);
}

void sub_DF1854(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int64x2_t *a5)
{
  uint64_t v10 = nullsub_1(a1);
  if (*(char *)(v10 + 23) >= 0) {
    uint64_t v11 = (int *)v10;
  }
  else {
    uint64_t v11 = *(int **)v10;
  }
  int v12 = *v11;
  *(_DWORD *)(a4 + 16) |= 4u;
  *(_DWORD *)(a4 + 136) = v12;
  uint64_t v13 = sub_590DDC(a1);
  int v14 = *(void **)v13;
  uint64_t v15 = *(void **)(v13 + 8);
  if (*(void **)v13 != v15)
  {
    do
    {
      while (1)
      {
        uint64_t v18 = *(_DWORD **)(a4 + 40);
        if (v18)
        {
          uint64_t v19 = *(int *)(a4 + 32);
          if ((int)v19 < *v18) {
            break;
          }
        }
        uint64_t v16 = sub_13F37D4(*(void *)(a4 + 24));
        uint64_t v17 = sub_188CDC8(a4 + 24, v16);
        sub_DF1FB8(v14, v17);
        v14 += 1541;
        if (v14 == v15) {
          goto LABEL_10;
        }
      }
      *(_DWORD *)(a4 + 32) = v19 + 1;
      sub_DF1FB8(v14, *(void *)&v18[2 * v19 + 2]);
      v14 += 1541;
    }
    while (v14 != v15);
  }
LABEL_10:
  uint64_t v20 = (void *)sub_590DDC(a1);
  if ((int)(379049677 * ((uint64_t)(v20[1] - *v20) >> 3)) >= 1)
  {
    uint64_t v21 = 0;
    uint64_t v22 = 379049677 * ((uint64_t)(v20[1] - *v20) >> 3);
    do
    {
      uint64_t v23 = sub_5911E4(a1, v21);
      sub_DF3558(v23, a3, a2, *(void *)(*(void *)(a4 + 40) + 8 * v21++ + 8));
    }
    while (v22 != v21);
  }
  if (*(unsigned char *)(a2 + 176))
  {
    unint64_t v24 = sub_5912BC(a1);
    if (v24)
    {
      unint64_t v25 = v24;
      uint64_t v26 = 0;
      for (uint64_t i = 0; i != v25; ++i)
      {
        uint64_t v28 = sub_5911E4(a1, i);
        sub_E10E84((uint64_t *)(v28 + 7328), *(void *)(*(void *)(a4 + 40) + (v26 >> 29) + 8));
        v26 += 0x100000000;
      }
    }
  }
  *(_DWORD *)(a4 + 16) |= 2u;
  uint64_t v29 = *(void *)(a4 + 128);
  if (!v29)
  {
    uint64_t v30 = *(void *)(a4 + 8);
    float v31 = (void *)(v30 & 0xFFFFFFFFFFFFFFFCLL);
    if (v30) {
      float v31 = (void *)*v31;
    }
    uint64_t v29 = sub_13D8BF8((uint64_t)v31);
    *(void *)(a4 + 128) = v29;
  }
  uint64_t v32 = sub_50BE8(a1);
  char v33 = sub_6477DC(v32);
  *(_DWORD *)(v29 + 16) |= 1u;
  *(unsigned char *)(v29 + 24) = v33;
  uint64_t v34 = sub_50BE8(a1);
  BOOL v35 = sub_6477EC(v34);
  *(_DWORD *)(v29 + 16) |= 2u;
  *(unsigned char *)(v29 + 25) = v35;
  *(_DWORD *)(a4 + 16) |= 1u;
  unint64_t v36 = *(_DWORD **)(a4 + 120);
  if (!v36)
  {
    uint64_t v37 = *(void *)(a4 + 8);
    int8x8_t v38 = (void *)(v37 & 0xFFFFFFFFFFFFFFFCLL);
    if (v37) {
      int8x8_t v38 = (void *)*v38;
    }
    unint64_t v36 = (_DWORD *)sub_13D84A8((uint64_t)v38);
    *(void *)(a4 + 120) = v36;
  }
  sub_DF21D0(a1, a2, v36);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)uint64_t v50 = 0u;
  int v51 = 1065353216;
  if (*(unsigned char *)(a2 + 177))
  {
    sub_DF245C(a1, __p, a4);
    unint64_t v39 = (uint64_t *)sub_5911EC(a1);
    uint64_t v40 = *v39;
    uint64_t v41 = v39[1];
    if (*v39 != v41)
    {
      do
      {
        unint64_t v42 = *(_DWORD **)(a4 + 88);
        if (v42 && (uint64_t v43 = *(int *)(a4 + 80), (int)v43 < *v42))
        {
          *(_DWORD *)(a4 + 80) = v43 + 1;
          uint64_t v44 = *(void *)&v42[2 * v43 + 2];
        }
        else
        {
          sub_13D9384(*(void *)(a4 + 72));
          uint64_t v44 = sub_188CDC8(a4 + 72, v45);
        }
        sub_DF290C(v40, __p, a2, v44);
        v40 += 1056;
      }
      while (v40 != v41);
    }
  }
  sub_DF2E4C(a1, a2, a3, a4, a5);
  char v46 = (void **)v50[0];
  if (v50[0])
  {
    do
    {
      int v48 = (void **)*v46;
      if (*((char *)v46 + 39) < 0) {
        operator delete(v46[2]);
      }
      operator delete(v46);
      char v46 = v48;
    }
    while (v48);
  }
  int v47 = __p[0];
  __p[0] = 0;
  if (v47) {
    operator delete(v47);
  }
}

void sub_DF1BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_DF1BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_DF1BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_DF1BFC(uint64_t a1, int **a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = nullsub_1(a5);
  char v43 = *(unsigned char *)(v9 + 128);
  if (v43) {
    sub_4895AC((uint64_t)v36, (long long *)v9);
  }
  sub_486A64(a5, 0);
  if (v43)
  {
    uint64_t v10 = sub_5231C(a1);
    sub_E2C138(v35, a3, a4);
    if (!*(unsigned char *)(a4 + 180))
    {
      uint64_t v11 = (unsigned int *)nullsub_1(a1);
      int v12 = sub_DC5C04(v11);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7380, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_24F7380))
      {
        dword_24F7360 = -1;
        qword_24F7370 = 0;
        unk_24F7378 = 0;
        qword_24F7368 = 0;
        __cxa_guard_release(&qword_24F7380);
      }
      uint64_t v13 = *a2;
      int v14 = a2[1];
      if (*a2 != v14)
      {
        uint64_t v15 = &dword_24F7360;
        while (*v13 != v12)
        {
          v13 += 8;
          if (v13 == v14) {
            goto LABEL_14;
          }
        }
      }
      if (v13 == v14) {
        uint64_t v15 = &dword_24F7360;
      }
      else {
        uint64_t v15 = v13;
      }
LABEL_14:
      sub_E2EF1C((uint64_t)v35, a1, (uint64_t)v15, a5);
    }
    uint64_t v16 = *(void **)v10;
    for (uint64_t i = *(void **)(v10 + 8); v16 != i; v16 += 945)
    {
      if ((sub_6478D8((uint64_t)v16) & 0xFFFFFFFD) == 0)
      {
        int v18 = sub_646CE8((uint64_t)v16);
        uint64_t v19 = sub_50BE8(a1);
        int v20 = sub_646CE8(v19);
        if (v18 <= v20) {
          int v21 = 0;
        }
        else {
          int v21 = v18 - v20;
        }
        sub_647004((uint64_t)v16, (uint64_t)v34);
        if (sub_40A45C(v34)) {
          int v22 = sub_40A440(v34);
        }
        else {
          int v22 = 0x7FFFFFFF;
        }
        int v23 = sub_6478E0((uint64_t)v16);
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7380, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F7380))
        {
          dword_24F7360 = -1;
          qword_24F7370 = 0;
          unk_24F7378 = 0;
          qword_24F7368 = 0;
          __cxa_guard_release(&qword_24F7380);
        }
        unint64_t v24 = *a2;
        unint64_t v25 = a2[1];
        if (*a2 != v25)
        {
          while (*v24 != v23)
          {
            v24 += 8;
            if (v24 == v25)
            {
              uint64_t v26 = &dword_24F7360;
              goto LABEL_33;
            }
          }
        }
        if (v24 == v25) {
          uint64_t v26 = &dword_24F7360;
        }
        else {
          uint64_t v26 = v24;
        }
LABEL_33:
        char v27 = sub_E2BD58((uint64_t)a3);
        char v28 = sub_6478D8((uint64_t)v16);
        sub_E2C128((uint64_t)v33, v28, v27, v21, v22);
        sub_E2C1C4(v35, v16, v33, (uint64_t)v26, a5);
      }
    }
    sub_E2CE94((uint64_t)v35, a5);
    sub_C6B354(v35);
    if (v43)
    {
      if (v41)
      {
        unint64_t v42 = v41;
        operator delete(v41);
      }
      uint64_t v29 = v39;
      if (v39)
      {
        uint64_t v30 = v40;
        float v31 = v39;
        if ((void *)v40 != v39)
        {
          do
            uint64_t v30 = sub_489CF4(v30 - 144);
          while ((void *)v30 != v29);
          float v31 = v39;
        }
        uint64_t v40 = (uint64_t)v29;
        operator delete(v31);
      }
      if (v37)
      {
        int8x8_t v38 = v37;
        operator delete(v37);
      }
    }
  }
}

void sub_DF1F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_C6B354((uint64_t *)va);
  sub_4851DC(v8 - 232);
  _Unwind_Resume(a1);
}

void sub_DF1FB8(void *a1, uint64_t a2)
{
  char v4 = (int *)a1[136];
  int v5 = (int *)a1[137];
  if (v4 != v5)
  {
    unint64_t v6 = (uint64_t *)(a2 + 48);
    do
    {
      while (1)
      {
        uint64_t v9 = *(_DWORD **)(a2 + 64);
        if (v9)
        {
          uint64_t v10 = *(int *)(a2 + 56);
          if ((int)v10 < *v9) {
            break;
          }
        }
        uint64_t v7 = sub_13F3778(*v6);
        uint64_t v8 = sub_188CDC8(a2 + 48, v7);
        sub_DF329C(v4, v8);
        v4 += 600;
        if (v4 == v5) {
          goto LABEL_7;
        }
      }
      *(_DWORD *)(a2 + 56) = v10 + 1;
      sub_DF329C(v4, *(void *)&v9[2 * v10 + 2]);
      v4 += 600;
    }
    while (v4 != v5);
  }
LABEL_7:
  *(_DWORD *)(a2 + 40) |= 0x20u;
  uint64_t v11 = *(void *)(a2 + 496);
  if (!v11)
  {
    uint64_t v12 = *(void *)(a2 + 8);
    uint64_t v13 = (void *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
    if (v12) {
      uint64_t v13 = (void *)*v13;
    }
    uint64_t v11 = sub_13D8BF8((uint64_t)v13);
    *(void *)(a2 + 496) = v11;
  }
  char v14 = sub_46E0B8((uint64_t)a1);
  *(_DWORD *)(v11 + 16) |= 1u;
  *(unsigned char *)(v11 + 24) = v14;
  BOOL v15 = sub_46E088((uint64_t)a1);
  *(_DWORD *)(v11 + 16) |= 2u;
  *(unsigned char *)(v11 + 25) = v15;
  uint64_t v16 = a1[1254];
  for (uint64_t i = a1[1255]; v16 != i; v16 += 616)
  {
    while (1)
    {
      int v20 = *(_DWORD **)(a2 + 400);
      if (v20)
      {
        uint64_t v21 = *(int *)(a2 + 392);
        if ((int)v21 < *v20) {
          break;
        }
      }
      uint64_t v18 = sub_13D6194(*(void *)(a2 + 384));
      uint64_t v19 = sub_188CDC8(a2 + 384, v18);
      sub_E159B0(v16, v19);
      v16 += 616;
      if (v16 == i) {
        goto LABEL_17;
      }
    }
    *(_DWORD *)(a2 + 392) = v21 + 1;
    sub_E159B0(v16, *(void *)&v20[2 * v21 + 2]);
  }
LABEL_17:
  uint64_t v22 = a1[1251];
  for (uint64_t j = a1[1252]; v22 != j; v22 += 616)
  {
    while (1)
    {
      uint64_t v26 = *(_DWORD **)(a2 + 448);
      if (v26)
      {
        uint64_t v27 = *(int *)(a2 + 440);
        if ((int)v27 < *v26) {
          break;
        }
      }
      uint64_t v24 = sub_13D6194(*(void *)(a2 + 432));
      uint64_t v25 = sub_188CDC8(a2 + 432, v24);
      sub_E159B0(v22, v25);
      v22 += 616;
      if (v22 == j) {
        return;
      }
    }
    *(_DWORD *)(a2 + 440) = v27 + 1;
    sub_E159B0(v22, *(void *)&v26[2 * v27 + 2]);
  }
}

uint64_t sub_DF21D0(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v5 = (unsigned int **)sub_50BE8(a1);
  if (sub_646CF0(v5))
  {
    int v6 = sub_646CE8((uint64_t)v5);
    if (v6 < 0) {
      char v7 = -5;
    }
    else {
      char v7 = 5;
    }
    a3[4] |= 1u;
    a3[6] = v6 / 10 + (((103 * (char)(v7 + v6 % 10)) >> 15) & 1) + ((103 * (char)(v7 + v6 % 10)) >> 10);
  }
  if (*(unsigned char *)(a2 + 178) && sub_646DF4(v5))
  {
    int v8 = sub_646DE0(v5);
    if (v8 < 0) {
      char v9 = -5;
    }
    else {
      char v9 = 5;
    }
    a3[4] |= 2u;
    a3[7] = v8 / 10 + (((103 * (char)(v9 + v8 % 10)) >> 15) & 1) + ((103 * (char)(v9 + v8 % 10)) >> 10);
  }
  if (*(unsigned char *)(a2 + 179) && sub_646D74(v5))
  {
    int v10 = sub_646D60(v5);
    if (v10 < 0) {
      char v11 = -5;
    }
    else {
      char v11 = 5;
    }
    a3[4] |= 4u;
    a3[8] = v10 / 10
          + (((103 * (char)(v11 + v10 % 10)) >> 15) & 1)
          + ((103 * (char)(v11 + v10 % 10)) >> 10);
  }
  if (!sub_646E74(v5))
  {
    uint64_t result = sub_646EF4(v5);
    if (!result) {
      return result;
    }
    goto LABEL_25;
  }
  int v13 = sub_646E60(v5);
  if (v13 < 0) {
    char v14 = -5;
  }
  else {
    char v14 = 5;
  }
  a3[4] |= 8u;
  a3[9] = v13 / 10 + (((103 * (char)(v14 + v13 % 10)) >> 15) & 1) + ((103 * (char)(v14 + v13 % 10)) >> 10);
  uint64_t result = sub_646EF4(v5);
  if (result)
  {
LABEL_25:
    uint64_t result = sub_646EE0(v5);
    if ((int)result < 0) {
      char v15 = -5;
    }
    else {
      char v15 = 5;
    }
    a3[4] |= 0x10u;
    a3[10] = (int)result / 10
           + (((103 * (char)(v15 + (int)result % 10)) >> 15) & 1)
           + ((103 * (char)(v15 + (int)result % 10)) >> 10);
  }
  return result;
}

void sub_DF245C(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2[3])
  {
    int v5 = (void **)a2[2];
    if (v5)
    {
      do
      {
        int v48 = (void **)*v5;
        if (*((char *)v5 + 39) < 0) {
          operator delete(v5[2]);
        }
        operator delete(v5);
        int v5 = v48;
      }
      while (v48);
    }
    a2[2] = 0;
    uint64_t v6 = a2[1];
    if (v6)
    {
      for (uint64_t i = 0; i != v6; ++i)
        *(void *)(*a2 + 8 * i) = 0;
    }
    a2[3] = 0;
  }
  unint64_t v50 = sub_5912BC(a1);
  if (v50)
  {
    uint64_t v8 = 0;
    int v54 = (uint64_t *)(a3 + 48);
    while (1)
    {
      uint64_t v52 = v8;
      __int16 v53 = (void *)sub_5911E4(a1, v8);
      uint64_t v9 = *(void *)(*(void *)(a3 + 40) + 8 * (int)v8 + 8);
      uint64_t v10 = v53[919];
      uint64_t v11 = v53[920];
      if (v10 != v11) {
        break;
      }
LABEL_29:
      uint64_t v29 = v53[1448];
      uint64_t v30 = v53[1449];
      if (v29 != v30)
      {
        float v31 = (_DWORD *)(v9 + 264);
        while (1)
        {
          int v32 = *(_DWORD *)(a3 + 56);
          int v55 = (long long *)(v29 + 8);
          *((_DWORD *)sub_DF40A8((uint64_t)a2, v29 + 8, (uint64_t)&unk_20F06E0, &v55) + 10) = v32;
          uint64_t v34 = *(_DWORD **)(a3 + 64);
          if (v34 && (uint64_t v35 = *(int *)(a3 + 56), (int)v35 < *v34))
          {
            *(_DWORD *)(a3 + 56) = v35 + 1;
            uint64_t v36 = *(void *)&v34[2 * v35 + 2];
          }
          else
          {
            uint64_t v37 = sub_13D9608(*v54);
            uint64_t v36 = sub_188CDC8((uint64_t)v54, v37);
          }
          sub_E128E8(v29, v36, v33);
          int8x8_t v38 = sub_DF451C(a2, v29 + 8);
          if (!v38) {
            goto LABEL_51;
          }
          int v39 = *((_DWORD *)v38 + 10);
          uint64_t v40 = *(unsigned int *)(v9 + 360);
          if (v40 == *(_DWORD *)(v9 + 364))
          {
            int v41 = v40 + 1;
            sub_188C80C((unsigned int *)(v9 + 360), v40 + 1);
            *(_DWORD *)(*(void *)(v9 + 368) + 4 * v40) = v39;
          }
          else
          {
            *(_DWORD *)(*(void *)(v9 + 368) + 4 * v40) = v39;
            int v41 = v40 + 1;
          }
          *(_DWORD *)(v9 + 360) = v41;
          uint64_t v42 = *(void *)(v29 + 32);
          int v43 = (int)v42 / 100;
          int v44 = (int)v42 % 100;
          if (v42 < 0) {
            __int16 v45 = -50;
          }
          else {
            __int16 v45 = 50;
          }
          unsigned int v46 = v43 + ((5243 * (__int16)(v45 + v44)) >> 19) + ((5243 * (__int16)(v45 + v44)) >> 31);
          uint64_t v47 = *(unsigned int *)(v9 + 264);
          if (v47 == *(_DWORD *)(v9 + 268))
          {
            sub_188C80C((unsigned int *)(v9 + 264), v47 + 1);
            *(_DWORD *)(*(void *)(v9 + 272) + 4 * v47) = v46;
            _DWORD *v31 = v47 + 1;
            v29 += 168;
            if (v29 == v30) {
              break;
            }
          }
          else
          {
            *(_DWORD *)(*(void *)(v9 + 272) + 4 * v47) = v46;
            _DWORD *v31 = v47 + 1;
            v29 += 168;
            if (v29 == v30) {
              break;
            }
          }
        }
      }
      uint64_t v8 = v52 + 1;
      if (v52 + 1 == v50) {
        return;
      }
    }
    uint64_t v12 = (_DWORD *)(v9 + 360);
    int v13 = (_DWORD *)(v9 + 264);
    while (1)
    {
      if (!sub_5258EC(a2, v10 + 40))
      {
        int v14 = *(_DWORD *)(a3 + 56);
        int v55 = (long long *)(v10 + 40);
        *((_DWORD *)sub_DF40A8((uint64_t)a2, v10 + 40, (uint64_t)&unk_20F06E0, &v55) + 10) = v14;
        uint64_t v16 = *(_DWORD **)(a3 + 64);
        if (v16 && (uint64_t v17 = *(int *)(a3 + 56), (int)v17 < *v16))
        {
          *(_DWORD *)(a3 + 56) = v17 + 1;
          uint64_t v18 = *(void *)&v16[2 * v17 + 2];
        }
        else
        {
          uint64_t v19 = sub_13D9608(*v54);
          uint64_t v18 = sub_188CDC8((uint64_t)v54, v19);
        }
        sub_E1163C(v10, v18, 1, v15);
      }
      int v20 = sub_DF451C(a2, v10 + 40);
      if (!v20) {
        break;
      }
      int v21 = *((_DWORD *)v20 + 10);
      uint64_t v22 = *(unsigned int *)(v9 + 360);
      if (v22 == *(_DWORD *)(v9 + 364))
      {
        sub_188C80C((unsigned int *)(v9 + 360), v22 + 1);
        *(_DWORD *)(*(void *)(v9 + 368) + 4 * v22) = v21;
        *uint64_t v12 = v22 + 1;
        if (!*(unsigned char *)(v10 + 432)) {
          goto LABEL_50;
        }
      }
      else
      {
        *(_DWORD *)(*(void *)(v9 + 368) + 4 * v22) = v21;
        *uint64_t v12 = v22 + 1;
        if (!*(unsigned char *)(v10 + 432))
        {
LABEL_50:
          exception = __cxa_allocate_exception(8uLL);
          void *exception = &off_2439078;
        }
      }
      uint64_t v23 = *(void *)(v10 + 424);
      int v24 = (int)v23 / 100;
      int v25 = (int)v23 % 100;
      if (v23 < 0) {
        __int16 v26 = -50;
      }
      else {
        __int16 v26 = 50;
      }
      unsigned int v27 = v24 + ((5243 * (__int16)(v26 + v25)) >> 19) + ((5243 * (__int16)(v26 + v25)) >> 31);
      uint64_t v28 = *(unsigned int *)(v9 + 264);
      if (v28 == *(_DWORD *)(v9 + 268))
      {
        sub_188C80C((unsigned int *)(v9 + 264), v28 + 1);
        *(_DWORD *)(*(void *)(v9 + 272) + 4 * v28) = v27;
        _DWORD *v13 = v28 + 1;
        v10 += 1120;
        if (v10 == v11) {
          goto LABEL_29;
        }
      }
      else
      {
        *(_DWORD *)(*(void *)(v9 + 272) + 4 * v28) = v27;
        _DWORD *v13 = v28 + 1;
        v10 += 1120;
        if (v10 == v11) {
          goto LABEL_29;
        }
      }
    }
LABEL_51:
    sub_5AE8("unordered_map::at: key not found");
  }
}

std::string *sub_DF290C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)(a4 + 16) |= 1u;
  uint64_t v8 = *(void *)(a4 + 8);
  uint64_t v9 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
  if (v8) {
    uint64_t v9 = (uint64_t *)*v9;
  }
  sub_1881DF4((std::string **)(a4 + 120), (long long *)(a1 + 8), v9);
  int v10 = sub_E1598C(*(_DWORD *)a1);
  int v12 = *(_DWORD *)(a4 + 16);
  *(_DWORD *)(a4 + 16) = v12 | 0x10000;
  *(_DWORD *)(a4 + 228) = v10;
  if (*(unsigned char *)(a3 + 38))
  {
    *(_DWORD *)(a4 + 16) = v12 | 0x10400;
    uint64_t v13 = *(void *)(a4 + 200);
    if (!v13)
    {
      uint64_t v14 = *(void *)(a4 + 8);
      double v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
      if (v14) {
        double v15 = (void *)*v15;
      }
      uint64_t v13 = sub_13D916C((uint64_t)v15);
      *(void *)(a4 + 200) = v13;
    }
    sub_E15460(a1 + 56, v13, v11);
  }
  if (*(unsigned char *)(a3 + 36))
  {
    uint64_t v16 = (long long *)(a1 + 32);
    *(_DWORD *)(a4 + 16) |= 4u;
    uint64_t v17 = (std::string **)(a4 + 136);
    uint64_t v18 = *(void *)(a4 + 8);
    uint64_t v19 = (uint64_t **)(v18 & 0xFFFFFFFFFFFFFFFCLL);
    if (v18)
    {
      sub_1881DF4(v17, v16, *v19);
      if (!*(unsigned char *)(a3 + 36)) {
        goto LABEL_24;
      }
    }
    else
    {
      sub_1881DF4(v17, v16, (uint64_t *)v19);
      if (!*(unsigned char *)(a3 + 36)) {
        goto LABEL_24;
      }
    }
    int v21 = *(_DWORD *)(a1 + 856);
    if (v21 == 1)
    {
      if (*(_DWORD *)(a1 + 828) == -1 && *(_DWORD *)(a1 + 824) == -1 && *(void *)(a1 + 832) == *(void *)(a1 + 840)) {
        goto LABEL_24;
      }
    }
    else if (v21 || *(_DWORD *)(a1 + 824) == -1)
    {
      goto LABEL_24;
    }
    *(_DWORD *)(a4 + 16) |= 0x200u;
    uint64_t v22 = *(void *)(a4 + 192);
    if (!v22)
    {
      uint64_t v23 = *(void *)(a4 + 8);
      int v24 = (void *)(v23 & 0xFFFFFFFFFFFFFFFCLL);
      if (v23) {
        int v24 = (void *)*v24;
      }
      uint64_t v22 = sub_13DAB08((uint64_t)v24);
      *(void *)(a4 + 192) = v22;
    }
    sub_523A2C(a1 + 824, v22, v20);
  }
LABEL_24:
  if (sub_564E4C(a1))
  {
    int v25 = sub_E152E0(*(_DWORD *)(a1 + 996));
    *(_DWORD *)(a4 + 16) |= 0x8000u;
    *(_DWORD *)(a4 + 224) = v25;
  }
  sub_DF3B68((const std::string **)(a1 + 80), a4);
  sub_DF3CF0((void *)(a1 + 728), *(unsigned __int8 *)(a3 + 36), a4);
  if (sub_5648DC(a1 + 768))
  {
    sub_DF3F0C(a1, a3, a4);
    uint64_t v26 = *(void *)(a1 + 968);
    if (v26 == 0x7FFFFFFFFFFFFFFFLL)
    {
LABEL_28:
      uint64_t v27 = *(unsigned __int8 *)(a1 + 959);
      if ((v27 & 0x80u) != 0) {
        uint64_t v27 = *(void *)(a1 + 944);
      }
      if (!v27) {
        goto LABEL_31;
      }
      goto LABEL_53;
    }
  }
  else
  {
    uint64_t v26 = *(void *)(a1 + 968);
    if (v26 == 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_28;
    }
  }
  int v40 = (int)v26 / 100;
  int v41 = (int)v26 % 100;
  if (v26 < 0) {
    __int16 v42 = -50;
  }
  else {
    __int16 v42 = 50;
  }
  *(_DWORD *)(a4 + 16) |= 0x2000u;
  *(_DWORD *)(a4 + 216) = v40
                        + ((5243 * (__int16)(v42 + v41)) >> 19)
                        + ((5243 * (__int16)(v42 + v41)) >> 31);
  uint64_t v43 = *(unsigned __int8 *)(a1 + 959);
  if ((v43 & 0x80u) != 0) {
    uint64_t v43 = *(void *)(a1 + 944);
  }
  if (!v43)
  {
LABEL_31:
    int v28 = *(_DWORD *)(a1 + 720);
    if (v28 == 0x7FFFFFFF) {
      goto LABEL_36;
    }
    goto LABEL_32;
  }
LABEL_53:
  int v44 = sub_5258EC(a2, a1 + 936);
  if (!v44) {
    sub_5AE8("unordered_map::at: key not found");
  }
  int v45 = *((_DWORD *)v44 + 10);
  *(_DWORD *)(a4 + 16) |= 0x4000u;
  *(_DWORD *)(a4 + 220) = v45;
  int v28 = *(_DWORD *)(a1 + 720);
  if (v28 != 0x7FFFFFFF)
  {
LABEL_32:
    int v29 = v28 / 10;
    int v30 = v28 % 10;
    if (v28 < 0) {
      char v31 = -5;
    }
    else {
      char v31 = 5;
    }
    *(_DWORD *)(a4 + 16) |= 0x20000u;
    *(_DWORD *)(a4 + 232) = v29
                          + (((103 * (char)(v31 + v30)) >> 15) & 1)
                          + ((103 * (char)(v31 + v30)) >> 10);
  }
LABEL_36:
  uint64_t v32 = *(void *)(a1 + 1000);
  uint64_t v33 = *(void *)(a1 + 1008);
  if (v32 == v33)
  {
    int v38 = *(_DWORD *)(a4 + 16);
    if (!*(unsigned char *)(a3 + 36)) {
      goto LABEL_68;
    }
    goto LABEL_57;
  }
  do
  {
    while (1)
    {
      uint64_t v36 = *(_DWORD **)(a4 + 112);
      if (v36)
      {
        uint64_t v37 = *(int *)(a4 + 104);
        if ((int)v37 < *v36) {
          break;
        }
      }
      uint64_t v34 = sub_13D9308(*(void *)(a4 + 96));
      uint64_t v35 = (int32x2_t *)sub_188CDC8(a4 + 96, (uint64_t)v34);
      sub_E15250(v32, v35);
      v32 += 168;
      if (v32 == v33) {
        goto LABEL_42;
      }
    }
    *(_DWORD *)(a4 + 104) = v37 + 1;
    sub_E15250(v32, *(int32x2_t **)&v36[2 * v37 + 2]);
    v32 += 168;
  }
  while (v32 != v33);
LABEL_42:
  int v38 = *(_DWORD *)(a4 + 16);
  if (*(void *)(a1 + 1000) != *(void *)(a1 + 1008))
  {
    int v39 = *(_DWORD *)(a1 + 1024);
    v38 |= 0x40000u;
    *(_DWORD *)(a4 + 16) = v38;
    *(_DWORD *)(a4 + 236) = v39;
  }
  if (*(unsigned char *)(a3 + 36))
  {
LABEL_57:
    *(_DWORD *)(a4 + 244) = *(_DWORD *)(a1 + 808);
    char v46 = *(unsigned char *)(a1 + 1028);
    int v47 = v38 | 0x900000;
    *(_DWORD *)(a4 + 16) = v38 | 0x900000;
    *(unsigned char *)(a4 + 256) = v46;
    int v48 = *(_DWORD *)(a1 + 816);
    if (v48 != 0x7FFFFFFF)
    {
      int v49 = v48 / 10;
      int v50 = v48 % 10;
      if (v48 < 0) {
        char v51 = -5;
      }
      else {
        char v51 = 5;
      }
      unsigned int v52 = v49 + (((103 * (char)(v51 + v50)) >> 15) & 1) + ((103 * (char)(v51 + v50)) >> 10);
      int v47 = v38 | 0xD00000;
      *(_DWORD *)(a4 + 16) = v38 | 0xD00000;
      *(_DWORD *)(a4 + 252) = v52;
    }
    int v53 = *(_DWORD *)(a1 + 812);
    if (v53 == 0x7FFFFFFF)
    {
      int v38 = v47;
    }
    else
    {
      int v54 = v53 / 10;
      int v55 = v53 % 10;
      if (v53 < 0) {
        char v56 = -5;
      }
      else {
        char v56 = 5;
      }
      unsigned int v57 = v54 + (((103 * (char)(v56 + v55)) >> 15) & 1) + ((103 * (char)(v56 + v55)) >> 10);
      int v38 = v47 | 0x200000;
      *(_DWORD *)(a4 + 248) = v57;
    }
  }
LABEL_68:
  *(_DWORD *)(a4 + 16) = v38 | 2;
  uint64_t v58 = *(void *)(a4 + 8);
  int v59 = (uint64_t *)(v58 & 0xFFFFFFFFFFFFFFFCLL);
  if (v58) {
    int v59 = (uint64_t *)*v59;
  }

  return sub_1881DF4((std::string **)(a4 + 128), (long long *)(a1 + 1032), v59);
}

void sub_DF2E4C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int64x2_t *a5)
{
  int v10 = (void *)sub_5231C(a1);
  if (*v10 != v10[1])
  {
    sub_E4580C((uint64_t)v38, a3, a2, 0);
    sub_4F29BC((uint64_t)v43);
    uint64_t v45 = 0;
    *(_OWORD *)int v44 = 0u;
    long double v11 = (uint64_t *)sub_591248(a1);
    if (v44 != (void **)v11) {
      sub_572E74((uint64_t *)v44, *v11, v11[1], 0xAF8AF8AF8AF8AF8BLL * ((v11[1] - *v11) >> 5));
    }
    int v12 = (uint64_t *)sub_5231C(a1);
    __p = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    sub_E45810((uint64_t)v38, v12, a5, (uint64_t)v43, (char **)&__p, (uint64_t)v34);
    if (__p)
    {
      uint64_t v32 = __p;
      operator delete(__p);
    }
    if (&v35 != (uint64_t *)(a4 + 96))
    {
      uint64_t v13 = *(unsigned int *)(a4 + 104);
      if ((int)v13 >= 1)
      {
        uint64_t v14 = (uint64_t *)(*(void *)(a4 + 112) + 8);
        do
        {
          sub_13A22B8(*v14++);
          --v13;
        }
        while (v13);
        *(_DWORD *)(a4 + 104) = 0;
      }
      int v15 = v36;
      if (v36)
      {
        uint64_t v16 = v37;
        uint64_t v17 = (uint64_t *)sub_188CCE4(a4 + 96, v36);
        sub_DF401C((uint64_t *)(a4 + 96), v17, (uint64_t *)(v16 + 8), v15, **(_DWORD **)(a4 + 112) - *(_DWORD *)(a4 + 104));
        int v18 = *(_DWORD *)(a4 + 104) + v15;
        *(_DWORD *)(a4 + 104) = v18;
        uint64_t v19 = *(int **)(a4 + 112);
        if (*v19 < v18) {
          *uint64_t v19 = v18;
        }
      }
    }
    sub_162D64C(v34);
    uint8x8_t v20 = v44[0];
    if (v44[0])
    {
      int v21 = v44[1];
      uint64_t v22 = v44[0];
      if (v44[1] != v44[0])
      {
        do
          int v21 = (void *)sub_3A6B94((uint64_t)v21 - 1120);
        while (v21 != v20);
        uint64_t v22 = v44[0];
      }
      v44[1] = v20;
      operator delete(v22);
    }
    sub_4F2BD0(v43);
    sub_423E54((uint64_t)&v42);
    int v39 = off_2439728;
    uint64_t v23 = &v41;
    do
    {
      int v24 = v23 - 6;
      uint64_t v25 = *(v23 - 3);
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        int v28 = v23 - 5;
        do
        {
          if ((*(char *)(*v24 + v27) & 0x80000000) == 0)
          {
            uint64_t v29 = *v28 + v26;
            int v30 = *(void **)(v29 + 8);
            if (v30)
            {
              *(void *)(v29 + 16) = v30;
              operator delete(v30);
              uint64_t v25 = *(v23 - 3);
            }
          }
          ++v27;
          v26 += 32;
        }
        while (v27 != v25);
        operator delete((void *)*(v23 - 6));
        *(v23 - 6) = (uint64_t)&unk_20E1710;
        *(v23 - 1) = 0;
        *(v23 - 4) = 0;
        *(v23 - 3) = 0;
        *int v28 = 0;
      }
      v23 -= 6;
    }
    while (v24 != &v40);
  }
}

void sub_DF311C(_Unwind_Exception *a1, void *__p, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_162D64C(va);
  sub_C940D0((uint64_t)&STACK[0x6D0]);
  sub_DF31A8((uint64_t)&STACK[0x248]);
  _Unwind_Resume(a1);
}

uint64_t sub_DF31A8(uint64_t a1)
{
  sub_423E54(a1 + 1016);
  *(void *)(a1 + 104) = off_2439728;
  uint64_t v2 = a1 + 1008;
  do
  {
    uint64_t v3 = (void *)(v2 - 48);
    uint64_t v4 = *(void *)(v2 - 24);
    if (v4)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      char v7 = (void *)(v2 - 40);
      do
      {
        if ((*(char *)(*v3 + v6) & 0x80000000) == 0)
        {
          uint64_t v8 = *v7 + v5;
          uint64_t v9 = *(void **)(v8 + 8);
          if (v9)
          {
            *(void *)(v8 + 16) = v9;
            operator delete(v9);
            uint64_t v4 = *(void *)(v2 - 24);
          }
        }
        ++v6;
        v5 += 32;
      }
      while (v6 != v4);
      operator delete(*(void **)(v2 - 48));
      *(void *)(v2 - 48) = &unk_20E1710;
      *(void *)(v2 - 8) = 0;
      *(void *)(v2 - 32) = 0;
      *(void *)(v2 - 24) = 0;
      void *v7 = 0;
    }
    v2 -= 48;
  }
  while (v3 != (void *)(a1 + 240));
  return a1;
}

void sub_DF329C(int *a1, uint64_t a2)
{
  int v4 = *a1;
  int v5 = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = v5 | 8;
  int v6 = a1[220];
  int v7 = v6 / 10;
  int v8 = v6 % 10;
  if (v6 < 0) {
    char v9 = -5;
  }
  else {
    char v9 = 5;
  }
  *(_DWORD *)(a2 + 40) = v5 | 0x18;
  *(_DWORD *)(a2 + 72) = v4;
  *(_DWORD *)(a2 + 76) = v7 + (((103 * (char)(v9 + v8)) >> 15) & 1) + ((103 * (char)(v9 + v8)) >> 10);
  int v10 = (unsigned int *)(a1 + 504);
  uint64_t v11 = sub_40A454((uint64_t)(a1 + 504));
  if (v11 != 0x7FFFFFFF && HIDWORD(v11) != 0x7FFFFFFF && (int)v11 <= SHIDWORD(v11))
  {
    *(_DWORD *)(a2 + 40) |= 4u;
    int v12 = *(void **)(a2 + 64);
    if (!v12)
    {
      uint64_t v13 = *(void *)(a2 + 8);
      uint64_t v14 = (void *)(v13 & 0xFFFFFFFFFFFFFFFCLL);
      if (v13) {
        uint64_t v14 = (void *)*v14;
      }
      int v12 = sub_13D8160((uint64_t)v14);
      *(void *)(a2 + 64) = v12;
    }
    sub_E158A4(v10, v12);
  }
  if (*((void *)a1 + 279) != *((void *)a1 + 280))
  {
    *(_DWORD *)(a2 + 40) |= 1u;
    uint64_t v15 = *(void *)(a2 + 48);
    if (!v15)
    {
      uint64_t v16 = *(void *)(a2 + 8);
      uint64_t v17 = (void *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
      if (v16) {
        uint64_t v17 = (void *)*v17;
      }
      sub_13D62B8((uint64_t)v17);
      uint64_t v15 = v18;
      *(void *)(a2 + 48) = v18;
    }
    uint64_t v19 = *((void *)a1 + 280);
    uint64_t v20 = *((void *)a1 + 279);
    if (v19 != v20)
    {
      int v21 = (_DWORD *)(v15 + 40);
      uint64_t v22 = *((void *)a1 + 280);
      do
      {
        while (1)
        {
          uint64_t v23 = *(void *)(v22 - 16);
          v22 -= 16;
          int v24 = (int)v23 / 100;
          int v25 = (int)v23 % 100;
          __int16 v26 = v23 < 0 ? -50 : 50;
          unsigned int v27 = v24 + ((5243 * (__int16)(v26 + v25)) >> 19) + ((5243 * (__int16)(v26 + v25)) >> 31);
          uint64_t v28 = *(unsigned int *)(v15 + 16);
          if (v28 == *(_DWORD *)(v15 + 20))
          {
            int v29 = v28 + 1;
            sub_188C80C((unsigned int *)(v15 + 16), v28 + 1);
            *(_DWORD *)(*(void *)(v15 + 24) + 4 * v28) = v27;
          }
          else
          {
            *(_DWORD *)(*(void *)(v15 + 24) + 4 * v28) = v27;
            int v29 = v28 + 1;
          }
          *(_DWORD *)(v15 + 16) = v29;
          int v30 = *(_DWORD *)(v19 - 8);
          int v31 = v30 / 10;
          int v32 = v30 % 10;
          char v33 = v30 < 0 ? -5 : 5;
          unsigned int v34 = v31 + (((103 * (char)(v33 + v32)) >> 15) & 1) + ((103 * (char)(v33 + v32)) >> 10);
          uint64_t v35 = *(unsigned int *)(v15 + 40);
          if (v35 == *(_DWORD *)(v15 + 44)) {
            break;
          }
          *(_DWORD *)(*(void *)(v15 + 48) + 4 * v35) = v34;
          *int v21 = v35 + 1;
          uint64_t v19 = v22;
          if (v22 == v20) {
            return;
          }
        }
        sub_188C80C((unsigned int *)(v15 + 40), v35 + 1);
        *(_DWORD *)(*(void *)(v15 + 48) + 4 * v35) = v34;
        *int v21 = v35 + 1;
        uint64_t v19 = v22;
      }
      while (v22 != v20);
    }
  }
}

void sub_DF3558(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  int v7 = (uint64_t *)sub_376F8C(a2);
  int v8 = v7;
  unsigned int v79 = *(_DWORD *)(a1 + 264);
  if (v79 <= 1) {
    uint64_t v78 = *(void *)(a1 + 256);
  }
  sub_28E4E4(v7, (uint64_t)&v78, (unint64_t)v67);
  *(_DWORD *)(a4 + 40) |= 8u;
  uint64_t v9 = *(void *)(a4 + 480);
  if (!v9)
  {
    uint64_t v10 = *(void *)(a4 + 8);
    uint64_t v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
    if (v10) {
      uint64_t v11 = (void *)*v11;
    }
    sub_13D8414((uint64_t)v11);
    uint64_t v9 = v12;
    *(void *)(a4 + 480) = v12;
  }
  sub_E13B3C((uint64_t)v67, a1 + 128, a1 + 10200, v9);
  unsigned int v77 = *(_DWORD *)(a1 + 424);
  if (v77 <= 1) {
    uint64_t v76 = *(void *)(a1 + 416);
  }
  sub_28E4E4(v8, (uint64_t)&v76, (unint64_t)v58);
  *(_DWORD *)(a4 + 40) |= 0x10u;
  uint64_t v13 = *(void *)(a4 + 488);
  if (!v13)
  {
    uint64_t v14 = *(void *)(a4 + 8);
    uint64_t v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
    if (v14) {
      uint64_t v15 = (void *)*v15;
    }
    sub_13D8414((uint64_t)v15);
    uint64_t v13 = v16;
    *(void *)(a4 + 488) = v16;
  }
  sub_E13B3C((uint64_t)v58, a1 + 288, a1 + 10880, v13);
  if (*(unsigned char *)(a3 + 167))
  {
    if (*(_DWORD *)(a1 + 152) == 0x7FFFFFFF) {
      goto LABEL_42;
    }
    if (*(_DWORD *)(a1 + 188) == 0x7FFFFFFF) {
      goto LABEL_42;
    }
    if (!sub_40A45C((int *)(a1 + 160))) {
      goto LABEL_42;
    }
    int v17 = *(_DWORD *)(a1 + 264);
    if (v17 == -1) {
      goto LABEL_42;
    }
    if (v17 == 1)
    {
      if (*(void *)(a1 + 256) > 0xFFFFFFFEFFFFFFFFLL || !*(void *)(a1 + 256)) {
        goto LABEL_42;
      }
    }
    else
    {
      if (v17) {
        goto LABEL_99;
      }
      if (*(void *)(a1 + 256) == -1)
      {
LABEL_42:
        if (*(_DWORD *)(a1 + 312) == 0x7FFFFFFF) {
          goto LABEL_70;
        }
        if (*(_DWORD *)(a1 + 348) == 0x7FFFFFFF) {
          goto LABEL_70;
        }
        if (!sub_40A45C((int *)(a1 + 320))) {
          goto LABEL_70;
        }
        int v34 = *(_DWORD *)(a1 + 424);
        switch(v34)
        {
          case -1:
            goto LABEL_70;
          case 1:
            if (*(void *)(a1 + 416) > 0xFFFFFFFEFFFFFFFFLL || !*(void *)(a1 + 416)) {
              goto LABEL_70;
            }
            goto LABEL_52;
          case 0:
            if (*(void *)(a1 + 416) == -1) {
              goto LABEL_70;
            }
LABEL_52:
            uint64_t v35 = (const std::string **)(a1 + 11288);
            if (!sub_45FB38((void *)(a1 + 11288)))
            {
              *(_DWORD *)(a4 + 40) |= 0x10u;
              uint64_t v37 = *(void *)(a4 + 488);
              if (!v37)
              {
                uint64_t v38 = *(void *)(a4 + 8);
                int v39 = (void *)(v38 & 0xFFFFFFFFFFFFFFFCLL);
                if (v38) {
                  int v39 = (void *)*v39;
                }
                double v36 = sub_13D8414((uint64_t)v39);
                uint64_t v37 = v40;
                *(void *)(a4 + 488) = v40;
              }
              *(_DWORD *)(v37 + 16) |= 8u;
              uint64_t v41 = *(void *)(v37 + 48);
              if (!v41)
              {
                uint64_t v42 = *(void *)(v37 + 8);
                uint64_t v43 = (void *)(v42 & 0xFFFFFFFFFFFFFFFCLL);
                if (v42) {
                  uint64_t v43 = (void *)*v43;
                }
                uint64_t v41 = sub_13DAB08((uint64_t)v43);
                *(void *)(v37 + 48) = v41;
              }
              sub_523A2C(a1 + 11448, v41, *(uint8x8_t *)&v36);
              *(_DWORD *)(a4 + 40) |= 0x10u;
              uint64_t v44 = *(void *)(a4 + 488);
              if (!v44)
              {
                uint64_t v45 = *(void *)(a4 + 8);
                char v46 = (void *)(v45 & 0xFFFFFFFFFFFFFFFCLL);
                if (v45) {
                  char v46 = (void *)*v46;
                }
                sub_13D8414((uint64_t)v46);
                uint64_t v44 = v47;
                *(void *)(a4 + 488) = v47;
              }
              *(_DWORD *)(v44 + 16) |= 0x100u;
              uint64_t v48 = *(void *)(v44 + 88);
              if (!v48)
              {
                uint64_t v49 = *(void *)(v44 + 8);
                int v50 = (void *)(v49 & 0xFFFFFFFFFFFFFFFCLL);
                if (v49) {
                  int v50 = (void *)*v50;
                }
                sub_13D6A1C((uint64_t)v50);
                uint64_t v48 = v51;
                *(void *)(v44 + 88) = v51;
              }
              sub_5F4D30(v35, v48);
            }
            goto LABEL_70;
        }
LABEL_99:
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
    }
    if (!sub_45FB38((void *)(a1 + 10608)))
    {
      *(_DWORD *)(a4 + 40) |= 8u;
      uint64_t v19 = *(void *)(a4 + 480);
      if (!v19)
      {
        uint64_t v20 = *(void *)(a4 + 8);
        int v21 = (void *)(v20 & 0xFFFFFFFFFFFFFFFCLL);
        if (v20) {
          int v21 = (void *)*v21;
        }
        double v18 = sub_13D8414((uint64_t)v21);
        uint64_t v19 = v22;
        *(void *)(a4 + 480) = v22;
      }
      *(_DWORD *)(v19 + 16) |= 8u;
      uint64_t v23 = *(void *)(v19 + 48);
      if (!v23)
      {
        uint64_t v24 = *(void *)(v19 + 8);
        int v25 = (void *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
        if (v24) {
          int v25 = (void *)*v25;
        }
        uint64_t v23 = sub_13DAB08((uint64_t)v25);
        *(void *)(v19 + 48) = v23;
      }
      sub_523A2C(a1 + 10768, v23, *(uint8x8_t *)&v18);
      *(_DWORD *)(a4 + 40) |= 8u;
      uint64_t v26 = *(void *)(a4 + 480);
      if (!v26)
      {
        uint64_t v27 = *(void *)(a4 + 8);
        uint64_t v28 = (void *)(v27 & 0xFFFFFFFFFFFFFFFCLL);
        if (v27) {
          uint64_t v28 = (void *)*v28;
        }
        sub_13D8414((uint64_t)v28);
        uint64_t v26 = v29;
        *(void *)(a4 + 480) = v29;
      }
      *(_DWORD *)(v26 + 16) |= 0x100u;
      uint64_t v30 = *(void *)(v26 + 88);
      if (!v30)
      {
        uint64_t v31 = *(void *)(v26 + 8);
        int v32 = (void *)(v31 & 0xFFFFFFFFFFFFFFFCLL);
        if (v31) {
          int v32 = (void *)*v32;
        }
        sub_13D6A1C((uint64_t)v32);
        uint64_t v30 = v33;
        *(void *)(v26 + 88) = v33;
      }
      sub_5F4D30((const std::string **)(a1 + 10608), v30);
    }
    goto LABEL_42;
  }
LABEL_70:
  sub_8AC4C((uint64_t)&v66);
  unsigned int v52 = (void **)__p;
  if (__p)
  {
    int v53 = v65;
    int v54 = __p;
    if (v65 != __p)
    {
      do
      {
        if (*((char *)v53 - 1) < 0) {
          operator delete(*(v53 - 3));
        }
        v53 -= 3;
      }
      while (v53 != v52);
      int v54 = __p;
    }
    uint64_t v65 = v52;
    operator delete(v54);
  }
  if (v63 < 0)
  {
    operator delete(v62);
    if ((v61 & 0x80000000) == 0)
    {
LABEL_80:
      if ((v59 & 0x80000000) == 0) {
        goto LABEL_81;
      }
      goto LABEL_88;
    }
  }
  else if ((v61 & 0x80000000) == 0)
  {
    goto LABEL_80;
  }
  operator delete(v60);
  if ((v59 & 0x80000000) == 0)
  {
LABEL_81:
    sub_8AC4C((uint64_t)v75);
    int v55 = (void **)v73;
    if (!v73) {
      goto LABEL_82;
    }
LABEL_89:
    char v56 = v74;
    if (v74 == v55)
    {
      uint64_t v74 = v55;
      operator delete(v55);
      if (v72 < 0) {
        goto LABEL_96;
      }
    }
    else
    {
      do
      {
        if (*((char *)v56 - 1) < 0) {
          operator delete(*(v56 - 3));
        }
        v56 -= 3;
      }
      while (v56 != v55);
      uint64_t v74 = v55;
      operator delete(v73);
      if (v72 < 0) {
        goto LABEL_96;
      }
    }
LABEL_83:
    if ((v70 & 0x80000000) == 0) {
      goto LABEL_84;
    }
    goto LABEL_97;
  }
LABEL_88:
  operator delete(v58[0]);
  sub_8AC4C((uint64_t)v75);
  int v55 = (void **)v73;
  if (v73) {
    goto LABEL_89;
  }
LABEL_82:
  if ((v72 & 0x80000000) == 0) {
    goto LABEL_83;
  }
LABEL_96:
  operator delete(v71);
  if ((v70 & 0x80000000) == 0)
  {
LABEL_84:
    if ((v68 & 0x80000000) == 0) {
      return;
    }
LABEL_98:
    operator delete(v67[0]);
    return;
  }
LABEL_97:
  operator delete(v69);
  if (v68 < 0) {
    goto LABEL_98;
  }
}

void sub_DF3B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
}

void sub_DF3B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
}

void sub_DF3B68(const std::string **a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 16) |= 8u;
  uint64_t v4 = *(void *)(a2 + 144);
  if (!v4)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    int v6 = (void *)(v5 & 0xFFFFFFFFFFFFFFFCLL);
    if (v5) {
      int v6 = (void *)*v6;
    }
    sub_13D6A1C((uint64_t)v6);
    uint64_t v4 = v7;
    *(void *)(a2 + 144) = v7;
  }
  sub_5F4D30(a1, v4);
  *(_DWORD *)(a2 + 16) |= 0x10u;
  uint64_t v8 = *(void *)(a2 + 152);
  if (!v8)
  {
    uint64_t v9 = *(void *)(a2 + 8);
    uint64_t v10 = (void *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
    if (v9) {
      uint64_t v10 = (void *)*v10;
    }
    sub_13D6A1C((uint64_t)v10);
    uint64_t v8 = v11;
    *(void *)(a2 + 152) = v11;
  }
  sub_5F4D30(a1 + 20, v8);
  *(_DWORD *)(a2 + 16) |= 0x20u;
  uint64_t v12 = *(void *)(a2 + 160);
  if (v12)
  {
    sub_5F4D30(a1 + 40, v12);
    if (!sub_564824((uint64_t)a1)) {
      return;
    }
    goto LABEL_11;
  }
  uint64_t v16 = *(void *)(a2 + 8);
  int v17 = (void *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
  if (v16) {
    int v17 = (void *)*v17;
  }
  sub_13D6A1C((uint64_t)v17);
  *(void *)(a2 + 160) = v18;
  sub_5F4D30(a1 + 40, v18);
  if (sub_564824((uint64_t)a1))
  {
LABEL_11:
    uint64_t v13 = a1 + 60;
    *(_DWORD *)(a2 + 16) |= 0x40u;
    uint64_t v14 = *(void *)(a2 + 168);
    if (v14)
    {
      uint64_t v15 = v13;
    }
    else
    {
      uint64_t v19 = *(void *)(a2 + 8);
      uint64_t v20 = (void *)(v19 & 0xFFFFFFFFFFFFFFFCLL);
      if (v19) {
        uint64_t v20 = (void *)*v20;
      }
      sub_13D6A1C((uint64_t)v20);
      uint64_t v14 = v21;
      *(void *)(a2 + 168) = v21;
      uint64_t v15 = v13;
    }
    sub_5F4D30(v15, v14);
  }
}

BOOL sub_DF3CF0(void *a1, int a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t)a1;
  if (!a2)
  {
    if (sub_564868(a1))
    {
      int v7 = (int)*(void *)v4 / 100;
      int v8 = (int)*(void *)v4 % 100;
      if (*(uint64_t *)v4 < 0) {
        __int16 v9 = -50;
      }
      else {
        __int16 v9 = 50;
      }
      *(_DWORD *)(a3 + 16) |= 0x800u;
      *(_DWORD *)(a3 + 208) = v7
                            + ((5243 * (__int16)(v9 + v8)) >> 19)
                            + ((5243 * (__int16)(v9 + v8)) >> 31);
      if (!sub_56487C(v4))
      {
LABEL_8:
        BOOL result = sub_564890(v4);
        if (!result) {
          return result;
        }
        goto LABEL_18;
      }
    }
    else if (!sub_56487C(v4))
    {
      goto LABEL_8;
    }
    uint64_t v10 = *(void *)(v4 + 16);
    int v11 = (int)v10 / 100;
    int v12 = (int)v10 % 100;
    if (v10 < 0) {
      __int16 v13 = -50;
    }
    else {
      __int16 v13 = 50;
    }
    *(_DWORD *)(a3 + 16) |= 0x1000u;
    *(_DWORD *)(a3 + 212) = v11
                          + ((5243 * (__int16)(v13 + v12)) >> 19)
                          + ((5243 * (__int16)(v13 + v12)) >> 31);
    BOOL result = sub_564890(v4);
    if (!result) {
      return result;
    }
LABEL_18:
    int v14 = *(_DWORD *)(v4 + 32);
    int v15 = v14 / 10;
    int v16 = v14 % 10;
    if (v14 < 0) {
      char v17 = -5;
    }
    else {
      char v17 = 5;
    }
    *(_DWORD *)(a3 + 16) |= 0x1000000u;
    *(_DWORD *)(a3 + 260) = v15
                          + (((103 * (char)(v17 + v16)) >> 15) & 1)
                          + ((103 * (char)(v17 + v16)) >> 10);
    return result;
  }
  *(_DWORD *)(a3 + 16) |= 0x80u;
  uint64_t v5 = *(void *)(a3 + 176);
  if (v5)
  {
  }
  else
  {
    uint64_t v18 = *(void *)(a3 + 8);
    uint64_t v19 = (void *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
    if (v18) {
      uint64_t v19 = (void *)*v19;
    }
    uint64_t v5 = sub_13D9288((uint64_t)v19);
    *(void *)(a3 + 176) = v5;
    a1 = (void *)v4;
  }
  return sub_E152F4((uint64_t)a1, v5);
}

uint64_t sub_DF3F0C(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 36))
  {
    uint64_t v4 = result + 768;
    BOOL result = sub_5648A4(result + 768);
    if ((result & 1) == 0)
    {
      *(_DWORD *)(a3 + 16) |= 0x100u;
      uint64_t v5 = *(void *)(a3 + 184);
      if (v5)
      {
        uint64_t v6 = v4;
      }
      else
      {
        uint64_t v7 = *(void *)(a3 + 8);
        int v8 = (void *)(v7 & 0xFFFFFFFFFFFFFFFCLL);
        if (v7) {
          int v8 = (void *)*v8;
        }
        uint64_t v5 = sub_13D9288((uint64_t)v8);
        *(void *)(a3 + 184) = v5;
        uint64_t v6 = v4;
      }
      return sub_E152F4(v6, v5);
    }
  }
  else if (*(unsigned char *)(a2 + 37))
  {
    if (*(void *)(result + 1000) != *(void *)(result + 1008)
      || (int v9 = *(_DWORD *)(result + 760)) != 0 && v9 != 0x7FFFFFFF)
    {
      BOOL result = sub_564C44(result);
      *(_DWORD *)(a3 + 16) |= 0x4000000u;
      *(unsigned char *)(a3 + 265) = result;
    }
  }
  else
  {
    *(_DWORD *)(a3 + 16) |= 0x4000000u;
    *(unsigned char *)(a3 + 265) = 1;
  }
  return result;
}

void sub_DF401C(uint64_t *a1, uint64_t *a2, uint64_t *a3, int a4, int a5)
{
  LODWORD(v5) = a4;
  uint64_t v7 = a2;
  int v8 = a4 - a5;
  if (a4 > a5)
  {
    uint64_t v9 = *a1;
    uint64_t v10 = &a2[a5];
    do
    {
      *v10++ = sub_13D8C74(v9);
      --v8;
    }
    while (v8);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v5 = v5;
    do
    {
      uint64_t v12 = *a3++;
      uint64_t v11 = v12;
      uint64_t v13 = *v7++;
      sub_DF4098(v11, v13);
      --v5;
    }
    while (v5);
  }
}

void sub_DF4098(uint64_t a1, uint64_t a2)
{
}

uint64_t *sub_DF40A8(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_B128((uint64_t)v45, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    int v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      int v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          uint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v15[1];
            if (v22 == v11)
            {
              uint64_t v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v24 = v15[3];
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            int v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          int v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  uint64_t v26 = (char *)operator new(0x30uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  char v46 = 0;
  *(void *)uint64_t v26 = 0;
  *((void *)v26 + 1) = v11;
  uint64_t v27 = v26 + 16;
  uint64_t v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_4200(v27, *(void **)v28, *((void *)v28 + 1));
  }
  else
  {
    long long v29 = *v28;
    *((void *)v26 + 4) = *((void *)v28 + 2);
    *(_OWORD *)uint64_t v27 = v29;
  }
  *((_DWORD *)v26 + 10) = 0;
  char v46 = 1;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    BOOL v34 = 1;
    if (v12 >= 3) {
      BOOL v34 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v12);
    unint64_t v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v38) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v38)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v38 < 3uLL || (uint8x8_t v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime < *(void *)&v38) {
LABEL_68:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        int v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        uint64_t v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        int v32 = *(void **)(*(void *)a1 + 8 * v11);
        uint64_t v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v42 & v11;
      int v32 = *(void **)(*(void *)a1 + 8 * (v42 & v11));
      uint64_t v33 = (void *)v45[0];
      if (v32) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *uint64_t v33 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v45[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v45[0])
    {
      unint64_t v43 = *(void *)(*(void *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12) {
          v43 %= v12;
        }
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  int v32 = *(void **)(*(void *)a1 + 8 * v4);
  uint64_t v33 = (void *)v45[0];
  if (!v32) {
    goto LABEL_81;
  }
LABEL_57:
  *uint64_t v33 = *v32;
  *int v32 = v45[0];
LABEL_92:
  int v15 = (uint64_t *)v45[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_DF44F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_DF4504(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_DF451C(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_B128((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  unint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    uint8x8_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v21 == v8)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          BOOL result = 0;
          uint8x8_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v17 == v8)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        BOOL result = 0;
        uint8x8_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

double sub_DF474C()
{
  byte_25EBC47 = 1;
  word_25EBC30 = 65;
  byte_25EBC5F = 1;
  word_25EBC48 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25EBCF0 = 0u;
  *(_OWORD *)&qword_25EBD00 = 0u;
  dword_25EBD10 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25EBCF0, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25EBCF0, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25EBCF0, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25EBCF0, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25EBC77 = 8;
  strcpy((char *)&qword_25EBC60, "any_mode");
  byte_25EBC8F = 7;
  strcpy((char *)&dword_25EBC78, "cycling");
  byte_25EBCA7 = 7;
  strcpy((char *)&dword_25EBC90, "driving");
  byte_25EBCBF = 7;
  strcpy((char *)&dword_25EBCA8, "walking");
  qword_25EBCC8 = 0;
  qword_25EBCD0 = 0;
  qword_25EBCC0 = 0;
  v0 = operator new(9uLL);
  *(void *)v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25EBCC0 = (uint64_t)v0;
  qword_25EBCC8 = (uint64_t)(v0 + 9);
  qword_25EBCD0 = (uint64_t)(v0 + 9);
  qword_25EBCD8 = 0;
  qword_25EBCE0 = 0;
  unk_25EBCE8 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25EBCE0 = (uint64_t)(v1 + 9);
  unk_25EBCE8 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25EBCD8 = (uint64_t)v1;
  return result;
}

void sub_DF4A14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25EBD00) {
    sub_20B0AD8((void **)qword_25EBD00);
  }
  uint64_t v37 = (void *)xmmword_25EBCF0;
  *(void *)&xmmword_25EBCF0 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_DF4AB4(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X4>, uint64_t a6@<X8>)
{
  sub_13F1D90(a6, 0, 0);
  int v10 = *(_DWORD *)(a6 + 40) | 0x20;
  *(_DWORD *)(a6 + 40) = v10;
  *(_DWORD *)(a6 + 160) = 0;
  uint64_t v11 = *a2;
  uint64_t v12 = a2[1];
  if (*a2 == v12)
  {
LABEL_9:
    *(_DWORD *)(a6 + 40) = v10;
    *(_DWORD *)(a6 + 160) = 20;
    return;
  }
  uint64_t v13 = *a2;
  while (*(void *)(v13 + 24) == 0x7FFFFFFFFFFFFFFFLL || *(_DWORD *)(v13 + 36) == 0x7FFFFFFF)
  {
    v13 += 376;
    if (v13 == v12) {
      goto LABEL_9;
    }
  }
  uint64_t v15 = (v12 - v11) / 376;
  uint64_t v16 = v11 + 24;
  uint64_t v17 = *a3 + 24;
  do
  {
    if (*(void *)v16 != 0x7FFFFFFFFFFFFFFFLL
      && *(_DWORD *)(v16 + 12) != 0x7FFFFFFF
      && *(void *)v17 != 0x7FFFFFFFFFFFFFFFLL
      && *(_DWORD *)(v17 + 12) != 0x7FFFFFFF)
    {
      int v60 = 1;
      goto LABEL_18;
    }
    v16 += 376;
    v17 += 376;
    --v15;
  }
  while (v15);
  int v60 = 0;
LABEL_18:
  int v18 = sub_E124B8(3u);
  *(_DWORD *)(a6 + 40) |= 4u;
  uint64_t v19 = *(void *)(a6 + 136);
  if (v19)
  {
    uint64_t v20 = *(_DWORD **)(v19 + 40);
    if (!v20) {
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v21 = *(void *)(a6 + 8);
    uint64_t v22 = (void *)(v21 & 0xFFFFFFFFFFFFFFFCLL);
    if (v21) {
      uint64_t v22 = (void *)*v22;
    }
    sub_13F3BC8((uint64_t)v22);
    *(void *)(a6 + 136) = v19;
    uint64_t v20 = *(_DWORD **)(v19 + 40);
    if (!v20) {
      goto LABEL_26;
    }
  }
  uint64_t v23 = *(int *)(v19 + 32);
  if ((int)v23 < *v20)
  {
    *(_DWORD *)(v19 + 32) = v23 + 1;
    uint64_t v24 = *(_DWORD **)&v20[2 * v23 + 2];
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v25 = v19 + 24;
  uint64_t v26 = sub_13F3B24(*(void *)(v19 + 24));
  uint64_t v24 = (_DWORD *)sub_188CDC8(v25, v26);
LABEL_27:
  v24[4] |= 0xCu;
  v24[16] = v18;
  v24[17] = 20;
  int v27 = v60;
  if (*(void *)(a4 + 24) == 0x7FFFFFFFFFFFFFFFLL) {
    int v27 = 0;
  }
  if (v27 == 1 && *(_DWORD *)(a4 + 36) != 0x7FFFFFFF)
  {
    sub_DF4FFC(a1, a4, a5, (uint64_t)v24);
    v24[4] |= 8u;
    v24[17] = 0;
  }
  int v55 = a3;
  uint64_t v28 = a2[1] - *a2;
  if (v28)
  {
    uint64_t v29 = 0;
    uint64_t v30 = v28 / 376;
    uint64_t v58 = (uint64_t *)(a6 + 96);
    char v59 = (uint64_t *)(a6 + 48);
    do
    {
      float v31 = *(_DWORD **)(a6 + 64);
      if (v31 && (uint64_t v32 = *(int *)(a6 + 56), (int)v32 < *v31))
      {
        *(_DWORD *)(a6 + 56) = v32 + 1;
        uint64_t v33 = *(void *)&v31[2 * v32 + 2];
        BOOL v34 = *(_DWORD **)(a6 + 112);
        if (!v34) {
          goto LABEL_44;
        }
      }
      else
      {
        sub_13F3BC8(*v59);
        uint64_t v33 = sub_188CDC8((uint64_t)v59, v35);
        BOOL v34 = *(_DWORD **)(a6 + 112);
        if (!v34) {
          goto LABEL_44;
        }
      }
      uint64_t v36 = *(int *)(a6 + 104);
      if ((int)v36 < *v34)
      {
        *(_DWORD *)(a6 + 104) = v36 + 1;
        uint64_t v37 = *(void *)&v34[2 * v36 + 2];
        int8x8_t v38 = *(_DWORD **)(v33 + 40);
        if (!v38) {
          goto LABEL_47;
        }
        goto LABEL_45;
      }
LABEL_44:
      sub_13F3BC8(*v58);
      uint64_t v37 = sub_188CDC8((uint64_t)v58, v39);
      int8x8_t v38 = *(_DWORD **)(v33 + 40);
      if (!v38) {
        goto LABEL_47;
      }
LABEL_45:
      uint64_t v40 = *(int *)(v33 + 32);
      if ((int)v40 >= *v38)
      {
LABEL_47:
        uint64_t v42 = sub_13F3B24(*(void *)(v33 + 24));
        uint64_t v41 = (_DWORD *)sub_188CDC8(v33 + 24, v42);
        goto LABEL_48;
      }
      *(_DWORD *)(v33 + 32) = v40 + 1;
      uint64_t v41 = *(_DWORD **)&v38[2 * v40 + 2];
LABEL_48:
      uint64_t v44 = v41 + 4;
      int v43 = v41[4];
      v41[16] = v18;
      v41[4] = v43 | 0xC;
      v41[17] = 20;
      uint64_t v45 = v41 + 17;
      char v46 = *(_DWORD **)(v37 + 40);
      if (v46 && (uint64_t v47 = *(int *)(v37 + 32), (int)v47 < *v46))
      {
        *(_DWORD *)(v37 + 32) = v47 + 1;
        uint64_t v48 = *(_DWORD **)&v46[2 * v47 + 2];
      }
      else
      {
        uint64_t v49 = sub_13F3B24(*(void *)(v37 + 24));
        uint64_t v48 = (_DWORD *)sub_188CDC8(v37 + 24, v49);
      }
      int v50 = v48[4];
      v48[16] = v18;
      v48[4] = v50 | 0xC;
      v48[17] = 20;
      uint64_t v51 = *a2;
      uint64_t v52 = *a2 + v29;
      uint64_t v53 = *(void *)(v52 + 24);
      if (v60)
      {
        if (v53 == 0x7FFFFFFFFFFFFFFFLL) {
          goto LABEL_35;
        }
        if (*(_DWORD *)(v51 + v29 + 36) == 0x7FFFFFFF) {
          goto LABEL_35;
        }
        uint64_t v54 = *v55 + v29;
        if (*(void *)(v54 + 24) == 0x7FFFFFFFFFFFFFFFLL || *(_DWORD *)(v54 + 36) == 0x7FFFFFFF) {
          goto LABEL_35;
        }
        sub_DF4FFC(a1, v52, a5, (uint64_t)v41);
        *v44 |= 8u;
        *uint64_t v45 = 0;
        sub_DF4FFC(a1, *v55 + v29, a5, (uint64_t)v48);
        uint64_t v44 = v48 + 4;
        uint64_t v45 = v48 + 17;
      }
      else
      {
        if (v53 == 0x7FFFFFFFFFFFFFFFLL || *(_DWORD *)(v51 + v29 + 36) == 0x7FFFFFFF) {
          goto LABEL_35;
        }
        sub_DF4FFC(a1, v52, a5, (uint64_t)v41);
      }
      *v44 |= 8u;
      *uint64_t v45 = 0;
LABEL_35:
      v29 += 376;
      --v30;
    }
    while (v30);
  }
}

void sub_DF4F84(_Unwind_Exception *a1)
{
  sub_13F22FC(v1);
  _Unwind_Resume(a1);
}

void sub_DF4F98(_Unwind_Exception *a1)
{
  sub_13F22FC(v1);
  _Unwind_Resume(a1);
}

void sub_DF4FAC(_Unwind_Exception *a1)
{
  sub_13F22FC(v1);
  _Unwind_Resume(a1);
}

void sub_DF4FC0(_Unwind_Exception *a1)
{
  sub_13F22FC(v1);
  _Unwind_Resume(a1);
}

void sub_DF4FD4(_Unwind_Exception *a1)
{
  sub_13F22FC(v1);
  _Unwind_Resume(a1);
}

void sub_DF4FE8(_Unwind_Exception *a1)
{
  sub_13F22FC(v1);
  _Unwind_Resume(a1);
}

void sub_DF4FFC(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4)
{
  sub_DF6E1C(a1, (_DWORD *)(a2 + 32), a3, (_DWORD *)a4);
  if (a3[5])
  {
    uint64_t v7 = *(void *)(a2 + 24);
    int v8 = (int)v7 / 100;
    int v9 = (int)v7 % 100;
    if (v7 < 0) {
      __int16 v10 = -50;
    }
    else {
      __int16 v10 = 50;
    }
    *(_DWORD *)(a4 + 16) |= 0x80u;
    *(_DWORD *)(a4 + 88) = v8
                         + ((5243 * (__int16)(v10 + v9)) >> 19)
                         + ((5243 * (__int16)(v10 + v9)) >> 31);
  }
  if (a3[6])
  {
    uint64_t v11 = *(const std::string ***)(a2 + 328);
    for (uint64_t i = *(const std::string ***)(a2 + 336); v11 != i; v11 += 20)
    {
      while (1)
      {
        uint64_t v15 = *(_DWORD **)(a4 + 40);
        if (v15)
        {
          uint64_t v16 = *(int *)(a4 + 32);
          if ((int)v16 < *v15) {
            break;
          }
        }
        sub_13D6A1C(*(void *)(a4 + 24));
        uint64_t v14 = sub_188CDC8(a4 + 24, v13);
        sub_5F4D30(v11, v14);
        v11 += 20;
        if (v11 == i) {
          goto LABEL_13;
        }
      }
      *(_DWORD *)(a4 + 32) = v16 + 1;
      sub_5F4D30(v11, *(void *)&v15[2 * v16 + 2]);
    }
  }
LABEL_13:
  if (a3[7])
  {
    uint64_t v17 = *(long long **)a2;
    if (*(void *)a2 != *(void *)(a2 + 8))
    {
      *(_DWORD *)(a4 + 16) |= 1u;
      uint64_t v18 = *(void *)(a4 + 48);
      if (!v18)
      {
        uint64_t v19 = *(void *)(a4 + 8);
        uint64_t v20 = (void *)(v19 & 0xFFFFFFFFFFFFFFFCLL);
        if (v19) {
          uint64_t v20 = (void *)*v20;
        }
        uint64_t v18 = sub_13DA5AC((uint64_t)v20);
        *(void *)(a4 + 48) = v18;
        uint64_t v17 = *(long long **)a2;
      }
      *(_DWORD *)(v18 + 16) |= 1u;
      uint64_t v21 = *(void *)(v18 + 8);
      uint64_t v22 = (uint64_t *)(v21 & 0xFFFFFFFFFFFFFFFCLL);
      if (v21) {
        uint64_t v22 = (uint64_t *)*v22;
      }
      sub_1881DF4((std::string **)(v18 + 24), v17, v22);
      sub_6FCB3C((uint64_t)v17, (uint64_t)__p);
      *(_DWORD *)(v18 + 16) |= 2u;
      uint64_t v23 = *(void *)(v18 + 8);
      uint64_t v24 = (uint64_t *)(v23 & 0xFFFFFFFFFFFFFFFCLL);
      if (v23) {
        uint64_t v24 = (uint64_t *)*v24;
      }
      sub_1881E08((uint64_t *)(v18 + 32), (long long *)__p, v24);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
      *(_DWORD *)(v18 + 16) |= 4u;
      uint64_t v25 = *(void *)(v18 + 8);
      uint64_t v26 = (uint64_t *)(v25 & 0xFFFFFFFFFFFFFFFCLL);
      if (v25) {
        uint64_t v26 = (uint64_t *)*v26;
      }
      sub_1881DF4((std::string **)(v18 + 40), v17 + 8, v26);
    }
  }
}

void sub_DF5228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_DF5244(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X4>, uint64_t a6@<X8>)
{
  sub_13F1D90(a6, 0, 0);
  int v10 = *(_DWORD *)(a6 + 40) | 0x20;
  *(_DWORD *)(a6 + 40) = v10;
  *(_DWORD *)(a6 + 160) = 0;
  uint64_t v11 = *a2;
  uint64_t v12 = a2[1];
  if (*a2 == v12)
  {
LABEL_9:
    *(_DWORD *)(a6 + 40) = v10;
    *(_DWORD *)(a6 + 160) = 20;
    return;
  }
  uint64_t v13 = *a2;
  while (*(void *)(v13 + 24) == 0x7FFFFFFFFFFFFFFFLL || *(_DWORD *)(v13 + 36) == 0x7FFFFFFF)
  {
    v13 += 376;
    if (v13 == v12) {
      goto LABEL_9;
    }
  }
  uint64_t v15 = (v12 - v11) / 376;
  uint64_t v16 = v11 + 24;
  uint64_t v17 = *a3 + 24;
  do
  {
    if (*(void *)v16 != 0x7FFFFFFFFFFFFFFFLL
      && *(_DWORD *)(v16 + 12) != 0x7FFFFFFF
      && *(void *)v17 != 0x7FFFFFFFFFFFFFFFLL
      && *(_DWORD *)(v17 + 12) != 0x7FFFFFFF)
    {
      int v60 = 1;
      goto LABEL_18;
    }
    v16 += 376;
    v17 += 376;
    --v15;
  }
  while (v15);
  int v60 = 0;
LABEL_18:
  int v18 = sub_E124B8(0);
  *(_DWORD *)(a6 + 40) |= 4u;
  uint64_t v19 = *(void *)(a6 + 136);
  if (v19)
  {
    uint64_t v20 = *(_DWORD **)(v19 + 40);
    if (!v20) {
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v21 = *(void *)(a6 + 8);
    uint64_t v22 = (void *)(v21 & 0xFFFFFFFFFFFFFFFCLL);
    if (v21) {
      uint64_t v22 = (void *)*v22;
    }
    sub_13F3BC8((uint64_t)v22);
    *(void *)(a6 + 136) = v19;
    uint64_t v20 = *(_DWORD **)(v19 + 40);
    if (!v20) {
      goto LABEL_26;
    }
  }
  uint64_t v23 = *(int *)(v19 + 32);
  if ((int)v23 < *v20)
  {
    *(_DWORD *)(v19 + 32) = v23 + 1;
    uint64_t v24 = *(_DWORD **)&v20[2 * v23 + 2];
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v25 = v19 + 24;
  uint64_t v26 = sub_13F3B24(*(void *)(v19 + 24));
  uint64_t v24 = (_DWORD *)sub_188CDC8(v25, v26);
LABEL_27:
  v24[4] |= 0xCu;
  v24[16] = v18;
  v24[17] = 20;
  int v27 = v60;
  if (*(void *)(a4 + 24) == 0x7FFFFFFFFFFFFFFFLL) {
    int v27 = 0;
  }
  if (v27 == 1 && *(_DWORD *)(a4 + 36) != 0x7FFFFFFF)
  {
    sub_DF578C(a1, a4, a5, (uint64_t)v24);
    v24[4] |= 8u;
    v24[17] = 0;
  }
  int v55 = a3;
  uint64_t v28 = a2[1] - *a2;
  if (v28)
  {
    uint64_t v29 = 0;
    uint64_t v30 = v28 / 376;
    uint64_t v58 = (uint64_t *)(a6 + 96);
    char v59 = (uint64_t *)(a6 + 48);
    do
    {
      float v31 = *(_DWORD **)(a6 + 64);
      if (v31 && (uint64_t v32 = *(int *)(a6 + 56), (int)v32 < *v31))
      {
        *(_DWORD *)(a6 + 56) = v32 + 1;
        uint64_t v33 = *(void *)&v31[2 * v32 + 2];
        BOOL v34 = *(_DWORD **)(a6 + 112);
        if (!v34) {
          goto LABEL_44;
        }
      }
      else
      {
        sub_13F3BC8(*v59);
        uint64_t v33 = sub_188CDC8((uint64_t)v59, v35);
        BOOL v34 = *(_DWORD **)(a6 + 112);
        if (!v34) {
          goto LABEL_44;
        }
      }
      uint64_t v36 = *(int *)(a6 + 104);
      if ((int)v36 < *v34)
      {
        *(_DWORD *)(a6 + 104) = v36 + 1;
        uint64_t v37 = *(void *)&v34[2 * v36 + 2];
        int8x8_t v38 = *(_DWORD **)(v33 + 40);
        if (!v38) {
          goto LABEL_47;
        }
        goto LABEL_45;
      }
LABEL_44:
      sub_13F3BC8(*v58);
      uint64_t v37 = sub_188CDC8((uint64_t)v58, v39);
      int8x8_t v38 = *(_DWORD **)(v33 + 40);
      if (!v38) {
        goto LABEL_47;
      }
LABEL_45:
      uint64_t v40 = *(int *)(v33 + 32);
      if ((int)v40 >= *v38)
      {
LABEL_47:
        uint64_t v42 = sub_13F3B24(*(void *)(v33 + 24));
        uint64_t v41 = (_DWORD *)sub_188CDC8(v33 + 24, v42);
        goto LABEL_48;
      }
      *(_DWORD *)(v33 + 32) = v40 + 1;
      uint64_t v41 = *(_DWORD **)&v38[2 * v40 + 2];
LABEL_48:
      uint64_t v44 = v41 + 4;
      int v43 = v41[4];
      v41[16] = v18;
      v41[4] = v43 | 0xC;
      v41[17] = 20;
      uint64_t v45 = v41 + 17;
      char v46 = *(_DWORD **)(v37 + 40);
      if (v46 && (uint64_t v47 = *(int *)(v37 + 32), (int)v47 < *v46))
      {
        *(_DWORD *)(v37 + 32) = v47 + 1;
        uint64_t v48 = *(_DWORD **)&v46[2 * v47 + 2];
      }
      else
      {
        uint64_t v49 = sub_13F3B24(*(void *)(v37 + 24));
        uint64_t v48 = (_DWORD *)sub_188CDC8(v37 + 24, v49);
      }
      int v50 = v48[4];
      v48[16] = v18;
      v48[4] = v50 | 0xC;
      v48[17] = 20;
      uint64_t v51 = *a2;
      uint64_t v52 = *a2 + v29;
      uint64_t v53 = *(void *)(v52 + 24);
      if (v60)
      {
        if (v53 == 0x7FFFFFFFFFFFFFFFLL) {
          goto LABEL_35;
        }
        if (*(_DWORD *)(v51 + v29 + 36) == 0x7FFFFFFF) {
          goto LABEL_35;
        }
        uint64_t v54 = *v55 + v29;
        if (*(void *)(v54 + 24) == 0x7FFFFFFFFFFFFFFFLL || *(_DWORD *)(v54 + 36) == 0x7FFFFFFF) {
          goto LABEL_35;
        }
        sub_DF578C(a1, v52, a5, (uint64_t)v41);
        *v44 |= 8u;
        *uint64_t v45 = 0;
        sub_DF578C(a1, *v55 + v29, a5, (uint64_t)v48);
        uint64_t v44 = v48 + 4;
        uint64_t v45 = v48 + 17;
      }
      else
      {
        if (v53 == 0x7FFFFFFFFFFFFFFFLL || *(_DWORD *)(v51 + v29 + 36) == 0x7FFFFFFF) {
          goto LABEL_35;
        }
        sub_DF578C(a1, v52, a5, (uint64_t)v41);
      }
      *v44 |= 8u;
      *uint64_t v45 = 0;
LABEL_35:
      v29 += 376;
      --v30;
    }
    while (v30);
  }
}

void sub_DF5714(_Unwind_Exception *a1)
{
  sub_13F22FC(v1);
  _Unwind_Resume(a1);
}

void sub_DF5728(_Unwind_Exception *a1)
{
  sub_13F22FC(v1);
  _Unwind_Resume(a1);
}

void sub_DF573C(_Unwind_Exception *a1)
{
  sub_13F22FC(v1);
  _Unwind_Resume(a1);
}

void sub_DF5750(_Unwind_Exception *a1)
{
  sub_13F22FC(v1);
  _Unwind_Resume(a1);
}

void sub_DF5764(_Unwind_Exception *a1)
{
  sub_13F22FC(v1);
  _Unwind_Resume(a1);
}

void sub_DF5778(_Unwind_Exception *a1)
{
  sub_13F22FC(v1);
  _Unwind_Resume(a1);
}

void sub_DF578C(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4)
{
  sub_DF6E1C(a1, (_DWORD *)(a2 + 32), a3, (_DWORD *)a4);
  if (a3[5])
  {
    uint64_t v7 = *(void *)(a2 + 24);
    int v8 = (int)v7 / 100;
    int v9 = (int)v7 % 100;
    if (v7 < 0) {
      __int16 v10 = -50;
    }
    else {
      __int16 v10 = 50;
    }
    *(_DWORD *)(a4 + 16) |= 0x80u;
    *(_DWORD *)(a4 + 88) = v8
                         + ((5243 * (__int16)(v10 + v9)) >> 19)
                         + ((5243 * (__int16)(v10 + v9)) >> 31);
  }
  if (a3[6])
  {
    uint64_t v11 = *(const std::string ***)(a2 + 328);
    for (uint64_t i = *(const std::string ***)(a2 + 336); v11 != i; v11 += 20)
    {
      while (1)
      {
        uint64_t v15 = *(_DWORD **)(a4 + 40);
        if (v15)
        {
          uint64_t v16 = *(int *)(a4 + 32);
          if ((int)v16 < *v15) {
            break;
          }
        }
        sub_13D6A1C(*(void *)(a4 + 24));
        uint64_t v14 = sub_188CDC8(a4 + 24, v13);
        sub_5F4D30(v11, v14);
        v11 += 20;
        if (v11 == i) {
          goto LABEL_13;
        }
      }
      *(_DWORD *)(a4 + 32) = v16 + 1;
      sub_5F4D30(v11, *(void *)&v15[2 * v16 + 2]);
    }
  }
LABEL_13:
  if (a3[7])
  {
    uint64_t v17 = *(long long **)a2;
    if (*(void *)a2 != *(void *)(a2 + 8))
    {
      *(_DWORD *)(a4 + 16) |= 1u;
      uint64_t v18 = *(void *)(a4 + 48);
      if (!v18)
      {
        uint64_t v19 = *(void *)(a4 + 8);
        uint64_t v20 = (void *)(v19 & 0xFFFFFFFFFFFFFFFCLL);
        if (v19) {
          uint64_t v20 = (void *)*v20;
        }
        uint64_t v18 = sub_13DA5AC((uint64_t)v20);
        *(void *)(a4 + 48) = v18;
        uint64_t v17 = *(long long **)a2;
      }
      *(_DWORD *)(v18 + 16) |= 1u;
      uint64_t v21 = *(void *)(v18 + 8);
      uint64_t v22 = (uint64_t *)(v21 & 0xFFFFFFFFFFFFFFFCLL);
      if (v21) {
        uint64_t v22 = (uint64_t *)*v22;
      }
      sub_1881DF4((std::string **)(v18 + 24), v17, v22);
      sub_6FCB3C((uint64_t)v17, (uint64_t)__p);
      *(_DWORD *)(v18 + 16) |= 2u;
      uint64_t v23 = *(void *)(v18 + 8);
      uint64_t v24 = (uint64_t *)(v23 & 0xFFFFFFFFFFFFFFFCLL);
      if (v23) {
        uint64_t v24 = (uint64_t *)*v24;
      }
      sub_1881E08((uint64_t *)(v18 + 32), (long long *)__p, v24);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
      *(_DWORD *)(v18 + 16) |= 4u;
      uint64_t v25 = *(void *)(v18 + 8);
      uint64_t v26 = (uint64_t *)(v25 & 0xFFFFFFFFFFFFFFFCLL);
      if (v25) {
        uint64_t v26 = (uint64_t *)*v26;
      }
      sub_1881DF4((std::string **)(v18 + 40), v17 + 8, v26);
    }
  }
}

void sub_DF59B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_DF59D4(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, unsigned char *a6@<X5>, uint64_t a7@<X8>)
{
  sub_13F1D90(a7, 0, 0);
  unint64_t v14 = 0x51B3BEA3677D46CFLL * ((a2[1] - *a2) >> 3);
  unint64_t v15 = 0x51B3BEA3677D46CFLL * ((a4[1] - *a4) >> 3);
  if (v14 <= 0x51B3BEA3677D46CFLL * ((a3[1] - *a3) >> 3)) {
    unint64_t v14 = 0x51B3BEA3677D46CFLL * ((a3[1] - *a3) >> 3);
  }
  if (v14 <= v15) {
    unint64_t v16 = 0x51B3BEA3677D46CFLL * ((a4[1] - *a4) >> 3);
  }
  else {
    unint64_t v16 = v14;
  }
  if (v14 < v15) {
    unint64_t v14 = 0x51B3BEA3677D46CFLL * ((a4[1] - *a4) >> 3);
  }
  if (v16 >= 0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 4)) {
    unint64_t v17 = v14;
  }
  else {
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 4);
  }
  if (v17)
  {
    do
    {
      uint64_t v18 = *(_DWORD **)(a7 + 64);
      if (v18 && (int v19 = *(_DWORD *)(a7 + 56), v19 < *v18))
      {
        *(_DWORD *)(a7 + 56) = v19 + 1;
      }
      else
      {
        sub_13F3BC8(*(void *)(a7 + 48));
        sub_188CDC8(a7 + 48, v20);
      }
      --v17;
    }
    while (v17);
    sub_DF5E8C(a1, a2, a6, a7);
    sub_DF600C(a1, a3, a6, a7);
    sub_DF6464(a1, a4, a6, a7);
    sub_DF65E4(v21, a5, (uint64_t)a6, a7);
    sub_DF68B8(v23, v22, a7);
    int v24 = *(_DWORD *)(a7 + 40) | 0x20;
    *(_DWORD *)(a7 + 40) = v24;
    *(_DWORD *)(a7 + 160) = 20;
    uint64_t v25 = *(void *)(a7 + 64);
    if (v25) {
      uint64_t v26 = v25 + 8;
    }
    else {
      uint64_t v26 = 0;
    }
    uint64_t v27 = *(int *)(a7 + 56);
    if (v27)
    {
      uint64_t v28 = v26 + 8 * v27;
      uint64_t v29 = v26;
      while (1)
      {
        uint64_t v30 = *(int *)(*(void *)v29 + 32);
        uint64_t v31 = *(void *)(*(void *)v29 + 40);
        uint64_t v32 = v31 ? v31 + 8 : 0;
        if (v30) {
          break;
        }
LABEL_23:
        v29 += 8;
        if (v29 == v28) {
          goto LABEL_40;
        }
      }
      uint64_t v33 = 8 * v30;
      while (*(_DWORD *)(*(void *)v32 + 68))
      {
        v32 += 8;
        v33 -= 8;
        if (!v33) {
          goto LABEL_23;
        }
      }
      *(_DWORD *)(a7 + 40) = v24;
      *(_DWORD *)(a7 + 160) = 0;
LABEL_40:
      if (a6[8] && v27 != 0)
      {
        do
        {
          uint64_t v35 = *(_DWORD **)v26;
          uint64_t v36 = *(void *)(*(void *)v26 + 40);
          uint64_t v37 = *(_DWORD **)(v36 + 8);
          int v38 = v37[17];
          int v39 = *(_DWORD *)(*(void *)v26 + 16);
          int v40 = v39 | 2;
          v35[4] = v39 | 2;
          v35[20] = v38;
          int v41 = v37[4];
          if ((v41 & 0x10) != 0)
          {
            int v43 = v37[18];
            int v40 = v39 | 6;
            v35[4] = v39 | 6;
            v35[21] = v43;
            int v41 = v37[4];
            if ((v41 & 0x20) == 0)
            {
LABEL_49:
              if ((v41 & 0x80) == 0) {
                goto LABEL_50;
              }
              goto LABEL_54;
            }
          }
          else if ((v41 & 0x20) == 0)
          {
            goto LABEL_49;
          }
          int v44 = v37[19];
          v40 |= 8u;
          v35[4] = v40;
          v35[22] = v44;
          if ((v37[4] & 0x80) == 0)
          {
LABEL_50:
            uint64_t v42 = v35[8];
            if ((int)v42 >= 1) {
              goto LABEL_55;
            }
            goto LABEL_46;
          }
LABEL_54:
          int v45 = v37[22];
          v35[4] = v40 | 0x10;
          v35[23] = v45;
          uint64_t v42 = v35[8];
          if ((int)v42 >= 1)
          {
LABEL_55:
            char v46 = (uint64_t *)(v36 + 8);
            do
            {
              sub_13EEEA0(*v46++);
              --v42;
            }
            while (v42);
            v35[8] = 0;
          }
LABEL_46:
          v26 += 8;
        }
        while (v26 != v28);
      }
    }
  }
  else
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)v49);
      sub_188FC78(v49, (uint64_t)"ETARequest did not contain any destinations", 43);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      if (v48 < 0) {
        operator delete(__p);
      }
      if (v50 < 0) {
        operator delete((void *)v49[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *(_DWORD *)(a7 + 40) |= 0x20u;
    *(_DWORD *)(a7 + 160) = 20;
  }
}

void sub_DF5DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_13F22FC(v15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_13F22FC(v15);
  _Unwind_Resume(a1);
}

void sub_DF5E3C(_Unwind_Exception *a1)
{
  sub_13F22FC(v1);
  _Unwind_Resume(a1);
}

void sub_DF5E50(_Unwind_Exception *a1)
{
  sub_13F22FC(v1);
  _Unwind_Resume(a1);
}

void sub_DF5E64(_Unwind_Exception *a1)
{
  sub_13F22FC(v1);
  _Unwind_Resume(a1);
}

void sub_DF5E78(_Unwind_Exception *a1)
{
  sub_13F22FC(v1);
  _Unwind_Resume(a1);
}

void sub_DF5E8C(uint64_t a1, uint64_t *a2, unsigned char *a3, uint64_t a4)
{
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    int v5 = 1736263375 * ((v4 - *a2) >> 3);
    if (v5 >= 1)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 376 * v5;
      uint64_t v11 = 8;
      do
      {
        while (1)
        {
          uint64_t v12 = *a2;
          uint64_t v13 = *(void *)(*(void *)(a4 + 64) + v11);
          unint64_t v14 = *(_DWORD **)(v13 + 40);
          if (v14 && (uint64_t v15 = *(int *)(v13 + 32), (int)v15 < *v14))
          {
            *(_DWORD *)(v13 + 32) = v15 + 1;
            unint64_t v16 = *(_DWORD **)&v14[2 * v15 + 2];
          }
          else
          {
            uint64_t v17 = v13 + 24;
            uint64_t v18 = sub_13F3B24(*(void *)(v13 + 24));
            unint64_t v16 = (_DWORD *)sub_188CDC8(v17, v18);
          }
          int v19 = v16[4];
          v16[4] = v19 | 4;
          v16[16] = 3;
          if (*(void *)(v12 + v9 + 24) != 0x7FFFFFFFFFFFFFFFLL && *(_DWORD *)(v12 + v9 + 36) != 0x7FFFFFFF) {
            break;
          }
          v16[4] = v19 | 0xC;
          v16[17] = 20;
          v11 += 8;
          v9 += 376;
          if (v10 == v9) {
            return;
          }
        }
        sub_DF4FFC(a1, v12 + v9, a3, (uint64_t)v16);
        v16[4] |= 8u;
        v16[17] = 0;
        v11 += 8;
        v9 += 376;
      }
      while (v10 != v9);
    }
  }
}

void sub_DF600C(uint64_t a1, uint64_t *a2, unsigned char *a3, uint64_t a4)
{
  uint64_t v4 = a2[1];
  if (*a2 != v4 && (int)(1736263375 * ((v4 - *a2) >> 3)) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v38 = 1736263375 * ((v4 - *a2) >> 3);
    while (1)
    {
      uint64_t v8 = *a2;
      uint64_t v9 = *(void *)(*(void *)(a4 + 64) + 8 * v7 + 8);
      uint64_t v10 = *(_DWORD **)(v9 + 40);
      if (v10 && (uint64_t v11 = *(int *)(v9 + 32), (int)v11 < *v10))
      {
        *(_DWORD *)(v9 + 32) = v11 + 1;
        uint64_t v12 = *(void *)&v10[2 * v11 + 2];
      }
      else
      {
        uint64_t v13 = v9 + 24;
        uint64_t v14 = sub_13F3B24(*(void *)(v9 + 24));
        uint64_t v12 = sub_188CDC8(v13, v14);
      }
      int v15 = *(_DWORD *)(v12 + 16);
      *(_DWORD *)(v12 + 16) = v15 | 4;
      *(_DWORD *)(v12 + 64) = 0;
      if (*(void *)(v8 + 376 * v7 + 24) == 0x7FFFFFFFFFFFFFFFLL || *(_DWORD *)(v8 + 376 * v7 + 36) == 0x7FFFFFFF)
      {
        *(_DWORD *)(v12 + 16) = v15 | 0xC;
        *(_DWORD *)(v12 + 68) = 20;
        goto LABEL_5;
      }
      sub_DF578C(a1, v8 + 376 * v7, a3, v12);
      if (a3[7]) {
        break;
      }
LABEL_21:
      *(_DWORD *)(v12 + 16) |= 8u;
      *(_DWORD *)(v12 + 68) = 0;
      uint64_t v21 = v8 + 376 * v7;
      uint64_t v23 = *(void *)(v21 + 352);
      uint64_t v22 = *(void *)(v21 + 360);
      while (v23 != v22)
      {
        sub_4BE9F4((uint64_t)v39, v23);
        uint64_t v25 = *(void *)(*(void *)(a4 + 64) + 8 * (int)v7 + 8);
        uint64_t v26 = *(_DWORD **)(v25 + 64);
        if (v26 && (uint64_t v27 = *(int *)(v25 + 56), (int)v27 < *v26))
        {
          *(_DWORD *)(v25 + 56) = v27 + 1;
          uint64_t v28 = *(void *)&v26[2 * v27 + 2];
        }
        else
        {
          uint64_t v29 = v25 + 48;
          uint64_t v30 = sub_13D9664(*(void *)(v25 + 48));
          uint64_t v28 = sub_188CDC8(v29, v30);
        }
        if (!v41)
        {
          exception = __cxa_allocate_exception(8uLL);
          void *exception = &off_2439078;
        }
        int v31 = *(_DWORD *)(v28 + 16);
        *(_DWORD *)(v28 + 32) = v40;
        *(_DWORD *)(v28 + 16) = v31 | 3;
        uint64_t v32 = *(void *)(v28 + 24);
        if (!v32)
        {
          uint64_t v33 = *(void *)(v28 + 8);
          BOOL v34 = (void *)(v33 & 0xFFFFFFFFFFFFFFFCLL);
          if (v33) {
            BOOL v34 = (void *)*v34;
          }
          uint64_t v32 = sub_13D9608((uint64_t)v34);
          *(void *)(v28 + 24) = v32;
        }
        sub_E1163C((uint64_t)v39, v32, 0, v24);
        if (v59)
        {
          sub_3A6CB8((uint64_t)&v58);
          char v59 = 0;
        }
        int v55 = off_2438EC8;
        if (v57 < 0) {
          operator delete(__p);
        }
        if (v54) {
          char v54 = 0;
        }
        if (v53 < 0)
        {
          operator delete(v52);
          if ((v51 & 0x80000000) == 0)
          {
LABEL_39:
            if ((v49 & 0x80000000) == 0) {
              goto LABEL_40;
            }
            goto LABEL_49;
          }
        }
        else if ((v51 & 0x80000000) == 0)
        {
          goto LABEL_39;
        }
        operator delete(v50);
        if ((v49 & 0x80000000) == 0)
        {
LABEL_40:
          if ((v47 & 0x80000000) == 0) {
            goto LABEL_41;
          }
          goto LABEL_50;
        }
LABEL_49:
        operator delete(v48);
        if ((v47 & 0x80000000) == 0)
        {
LABEL_41:
          if ((v45 & 0x80000000) == 0) {
            goto LABEL_42;
          }
          goto LABEL_51;
        }
LABEL_50:
        operator delete(v46);
        if ((v45 & 0x80000000) == 0)
        {
LABEL_42:
          if (v43 < 0) {
            goto LABEL_52;
          }
          goto LABEL_43;
        }
LABEL_51:
        operator delete(v44);
        if (v43 < 0)
        {
LABEL_52:
          operator delete(v42);
          if (!v41) {
            goto LABEL_45;
          }
LABEL_44:
          char v41 = 0;
          goto LABEL_45;
        }
LABEL_43:
        if (v41) {
          goto LABEL_44;
        }
LABEL_45:
        sub_29D95C((uint64_t)v39);
        v23 += 1120;
      }
LABEL_5:
      if (++v7 == v38) {
        return;
      }
    }
    uint64_t v16 = *(int *)(v8 + 376 * v7 + 320);
    if (v16 > 5)
    {
      int v17 = 0;
      *(_DWORD *)(v12 + 16) |= 1u;
      uint64_t v18 = *(void *)(v12 + 48);
      if (!v18)
      {
LABEL_17:
        uint64_t v19 = *(void *)(v12 + 8);
        uint64_t v20 = (void *)(v19 & 0xFFFFFFFFFFFFFFFCLL);
        if (v19) {
          uint64_t v20 = (void *)*v20;
        }
        uint64_t v18 = sub_13DA5AC((uint64_t)v20);
        *(void *)(v12 + 48) = v18;
      }
    }
    else
    {
      int v17 = dword_20F0740[v16];
      *(_DWORD *)(v12 + 16) |= 1u;
      uint64_t v18 = *(void *)(v12 + 48);
      if (!v18) {
        goto LABEL_17;
      }
    }
    *(_DWORD *)(v18 + 16) |= 8u;
    *(_DWORD *)(v18 + 48) = v17;
    goto LABEL_21;
  }
}

void sub_DF643C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_3A6B94((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DF6450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_3A6B94((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DF6464(uint64_t a1, uint64_t *a2, unsigned char *a3, uint64_t a4)
{
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    int v5 = 1736263375 * ((v4 - *a2) >> 3);
    if (v5 >= 1)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 376 * v5;
      uint64_t v11 = 8;
      do
      {
        while (1)
        {
          uint64_t v12 = *a2;
          uint64_t v13 = *(void *)(*(void *)(a4 + 64) + v11);
          uint64_t v14 = *(_DWORD **)(v13 + 40);
          if (v14 && (uint64_t v15 = *(int *)(v13 + 32), (int)v15 < *v14))
          {
            *(_DWORD *)(v13 + 32) = v15 + 1;
            uint64_t v16 = *(_DWORD **)&v14[2 * v15 + 2];
          }
          else
          {
            uint64_t v17 = v13 + 24;
            uint64_t v18 = sub_13F3B24(*(void *)(v13 + 24));
            uint64_t v16 = (_DWORD *)sub_188CDC8(v17, v18);
          }
          int v19 = v16[4];
          v16[4] = v19 | 4;
          v16[16] = 2;
          if (*(void *)(v12 + v9 + 24) != 0x7FFFFFFFFFFFFFFFLL && *(_DWORD *)(v12 + v9 + 36) != 0x7FFFFFFF) {
            break;
          }
          v16[4] = v19 | 0xC;
          v16[17] = 20;
          v11 += 8;
          v9 += 376;
          if (v10 == v9) {
            return;
          }
        }
        sub_DF6BD4(a1, v12 + v9, a3, (uint64_t)v16);
        v16[4] |= 8u;
        v16[17] = 0;
        v11 += 8;
        v9 += 376;
      }
      while (v10 != v9);
    }
  }
}

void sub_DF65E4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2[1];
  if (*a2 != v4 && (int)(-1431655765 * ((v4 - *a2) >> 4)) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = -1431655765 * ((v4 - *a2) >> 4);
    do
    {
      while (1)
      {
        uint64_t v10 = *a2;
        uint64_t v11 = *(void *)(*(void *)(a4 + 64) + 8 * v8 + 8);
        uint64_t v12 = *(_DWORD **)(v11 + 40);
        if (v12 && (uint64_t v13 = *(int *)(v11 + 32), (int)v13 < *v12))
        {
          *(_DWORD *)(v11 + 32) = v13 + 1;
          uint64_t v14 = *(void *)&v12[2 * v13 + 2];
        }
        else
        {
          uint64_t v15 = v11 + 24;
          uint64_t v16 = sub_13F3B24(*(void *)(v11 + 24));
          uint64_t v14 = sub_188CDC8(v15, v16);
        }
        int v17 = *(_DWORD *)(v14 + 16);
        *(_DWORD *)(v14 + 16) = v17 | 4;
        *(_DWORD *)(v14 + 64) = 1;
        int v18 = *(_DWORD *)(v10 + 48 * v8 + 8);
        if (v18 != 0x7FFFFFFF) {
          break;
        }
        *(_DWORD *)(v14 + 16) = v17 | 0xC;
        *(_DWORD *)(v14 + 68) = 20;
        if (++v8 == v9) {
          return;
        }
      }
      int v19 = v18 / 10;
      int v20 = v18 % 10;
      if (v18 < 0) {
        char v21 = -5;
      }
      else {
        char v21 = 5;
      }
      *(_DWORD *)(v14 + 16) = v17 | 0x14;
      *(_DWORD *)(v14 + 72) = v19
                            + (((103 * (char)(v21 + v20)) >> 15) & 1)
                            + ((103 * (char)(v21 + v20)) >> 10);
      double v22 = (double)*(int *)(v10 + 48 * v8) + -978307200.0;
      int v23 = v17 | 0x54;
      *(_DWORD *)(v14 + 16) = v17 | 0x54;
      *(double *)(v14 + 80) = v22;
      if (*(unsigned char *)(a3 + 5))
      {
        uint64_t v24 = *(void *)(v10 + 48 * v8 + 16);
        int v25 = (int)v24 / 100;
        int v26 = (int)v24 % 100;
        if (v24 < 0) {
          __int16 v27 = -50;
        }
        else {
          __int16 v27 = 50;
        }
        unsigned int v28 = v25 + ((5243 * (__int16)(v27 + v26)) >> 19) + ((5243 * (__int16)(v27 + v26)) >> 31);
        int v23 = v17 | 0xD4;
        *(_DWORD *)(v14 + 16) = v17 | 0xD4;
        *(_DWORD *)(v14 + 88) = v28;
      }
      if (*(unsigned char *)(a3 + 6))
      {
        uint64_t v29 = v10 + 48 * v8;
        uint64_t v30 = *(const std::string ***)(v29 + 24);
        int v31 = *(const std::string ***)(v29 + 32);
        if (v30 != v31)
        {
          do
          {
            while (1)
            {
              BOOL v34 = *(_DWORD **)(v14 + 40);
              if (v34)
              {
                uint64_t v35 = *(int *)(v14 + 32);
                if ((int)v35 < *v34) {
                  break;
                }
              }
              sub_13D6A1C(*(void *)(v14 + 24));
              uint64_t v33 = sub_188CDC8(v14 + 24, v32);
              sub_5F4D30(v30, v33);
              v30 += 20;
              if (v30 == v31) {
                goto LABEL_25;
              }
            }
            *(_DWORD *)(v14 + 32) = v35 + 1;
            sub_5F4D30(v30, *(void *)&v34[2 * v35 + 2]);
            v30 += 20;
          }
          while (v30 != v31);
LABEL_25:
          int v23 = *(_DWORD *)(v14 + 16);
        }
      }
      *(_DWORD *)(v14 + 16) = v23 | 8;
      *(_DWORD *)(v14 + 68) = 0;
      ++v8;
    }
    while (v8 != v9);
  }
}

void sub_DF68B8(__n128 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 64);
  if (v3) {
    uint64_t v4 = (uint64_t *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(int *)(a3 + 56);
  if (v5)
  {
    unint64_t v6 = &v4[v5];
    do
    {
      uint64_t v7 = *v4;
      uint64_t v8 = *(void *)(*v4 + 40);
      if (v8) {
        uint64_t v9 = (uint64_t *)(v8 + 8);
      }
      else {
        uint64_t v9 = 0;
      }
      uint64_t v10 = *(int *)(v7 + 32);
      if (v10)
      {
        uint64_t v11 = 8 * v10;
        uint64_t v12 = v9;
        while (!*(_DWORD *)(*v12 + 68) && (*(_DWORD *)(*v12 + 16) & 0x10) != 0)
        {
          ++v12;
          v11 -= 8;
          if (v12 == &v9[v10])
          {
            v9 += v10;
            goto LABEL_35;
          }
        }
        uint64_t v14 = &v9[v10];
        uint64_t v15 = v14 - 1;
        do
        {
          v11 -= 8;
          if (!v11)
          {
            uint64_t v9 = v12;
            goto LABEL_35;
          }
          uint64_t v16 = *v15--;
          int v17 = *(_DWORD *)(v16 + 16) & 0x10;
          --v14;
          if (*(_DWORD *)(v16 + 68)) {
            BOOL v18 = 1;
          }
          else {
            BOOL v18 = v17 == 0;
          }
        }
        while (v18);
        uint64_t v19 = (v11 >> 3) + 1;
        if (v11 < 17)
        {
LABEL_30:
          int v23 = 0;
          unint64_t v20 = 0;
        }
        else
        {
          if (v19 >= 0x124924924924924) {
            unint64_t v20 = 0x124924924924924;
          }
          else {
            unint64_t v20 = (v11 >> 3) + 1;
          }
          while (1)
          {
            char v21 = operator new(112 * v20, &std::nothrow);
            if (v21) {
              break;
            }
            BOOL v22 = v20 > 1;
            v20 >>= 1;
            if (!v22) {
              goto LABEL_30;
            }
          }
          int v23 = v21;
        }
        uint64_t v9 = sub_DF7028(v12, v14, v19, (uint64_t)v23, v20);
        if (v23) {
          operator delete(v23);
        }
      }
LABEL_35:
      uint64_t v24 = *(void *)(v7 + 40);
      int v25 = (uint64_t *)(v24 + 8);
      if (!v24) {
        int v25 = 0;
      }
      int v26 = v9;
      if (v25 != v9)
      {
        uint64_t v27 = (char *)v9 - (char *)v25;
        int v26 = v25;
        while (*(_DWORD *)(*v26 + 64) == 2 && *(_DWORD *)(*v26 + 72) < 0x259u)
        {
          ++v26;
          v27 -= 8;
          if (v26 == v9)
          {
            int v26 = v9;
            goto LABEL_57;
          }
        }
        unsigned int v28 = v9 - 1;
        uint64_t v29 = v9;
        while (v28 != v26)
        {
          uint64_t v31 = *v28--;
          uint64_t v30 = v31;
          --v29;
          v27 -= 8;
          if (*(_DWORD *)(v31 + 64) == 2 && *(_DWORD *)(v30 + 72) <= 0x258u)
          {
            uint64_t v32 = (v27 >> 3) + 1;
            if (v27 < 17)
            {
LABEL_53:
              uint64_t v35 = 0;
              unint64_t v33 = 0;
            }
            else
            {
              if (v32 >= 0x124924924924924) {
                unint64_t v33 = 0x124924924924924;
              }
              else {
                unint64_t v33 = (v27 >> 3) + 1;
              }
              while (1)
              {
                BOOL v34 = operator new(112 * v33, &std::nothrow);
                if (v34) {
                  break;
                }
                BOOL v22 = v33 > 1;
                v33 >>= 1;
                if (!v22) {
                  goto LABEL_53;
                }
              }
              uint64_t v35 = v34;
            }
            int v26 = sub_DF78A0(v26, v29, v32, (uint64_t)v35, v33);
            if (v35) {
              operator delete(v35);
            }
            break;
          }
        }
      }
LABEL_57:
      if ((char *)v9 - (char *)v26 < 1)
      {
LABEL_63:
        uint64_t v38 = 0;
        unint64_t v36 = 0;
      }
      else
      {
        if (v9 - v26 >= 0x124924924924924) {
          unint64_t v36 = 0x124924924924924;
        }
        else {
          unint64_t v36 = v9 - v26;
        }
        while (1)
        {
          uint64_t v37 = operator new(112 * v36, &std::nothrow);
          if (v37) {
            break;
          }
          BOOL v22 = v36 > 1;
          v36 >>= 1;
          if (!v22) {
            goto LABEL_63;
          }
        }
        uint64_t v38 = v37;
      }
      a1.n128_f64[0] = sub_DF7E1C(v26, v9, v9 - v26, (uint64_t)v38, v36, a1);
      if (v38) {
        operator delete(v38);
      }
      ++v4;
    }
    while (v4 != v6);
  }
}

void sub_DF6BB4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_DF6BD4(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4)
{
  sub_DF6E1C(a1, (_DWORD *)(a2 + 32), a3, (_DWORD *)a4);
  if (a3[5])
  {
    uint64_t v7 = *(void *)(a2 + 24);
    int v8 = (int)v7 / 100;
    int v9 = (int)v7 % 100;
    if (v7 < 0) {
      __int16 v10 = -50;
    }
    else {
      __int16 v10 = 50;
    }
    *(_DWORD *)(a4 + 16) |= 0x80u;
    *(_DWORD *)(a4 + 88) = v8
                         + ((5243 * (__int16)(v10 + v9)) >> 19)
                         + ((5243 * (__int16)(v10 + v9)) >> 31);
  }
  if (a3[6])
  {
    uint64_t v11 = *(const std::string ***)(a2 + 328);
    for (uint64_t i = *(const std::string ***)(a2 + 336); v11 != i; v11 += 20)
    {
      while (1)
      {
        uint64_t v15 = *(_DWORD **)(a4 + 40);
        if (v15)
        {
          uint64_t v16 = *(int *)(a4 + 32);
          if ((int)v16 < *v15) {
            break;
          }
        }
        sub_13D6A1C(*(void *)(a4 + 24));
        uint64_t v14 = sub_188CDC8(a4 + 24, v13);
        sub_5F4D30(v11, v14);
        v11 += 20;
        if (v11 == i) {
          goto LABEL_13;
        }
      }
      *(_DWORD *)(a4 + 32) = v16 + 1;
      sub_5F4D30(v11, *(void *)&v15[2 * v16 + 2]);
    }
  }
LABEL_13:
  if (a3[7])
  {
    int v17 = *(long long **)a2;
    if (*(void *)a2 != *(void *)(a2 + 8))
    {
      *(_DWORD *)(a4 + 16) |= 1u;
      uint64_t v18 = *(void *)(a4 + 48);
      if (!v18)
      {
        uint64_t v19 = *(void *)(a4 + 8);
        unint64_t v20 = (void *)(v19 & 0xFFFFFFFFFFFFFFFCLL);
        if (v19) {
          unint64_t v20 = (void *)*v20;
        }
        uint64_t v18 = sub_13DA5AC((uint64_t)v20);
        *(void *)(a4 + 48) = v18;
        int v17 = *(long long **)a2;
      }
      *(_DWORD *)(v18 + 16) |= 1u;
      uint64_t v21 = *(void *)(v18 + 8);
      BOOL v22 = (uint64_t *)(v21 & 0xFFFFFFFFFFFFFFFCLL);
      if (v21) {
        BOOL v22 = (uint64_t *)*v22;
      }
      sub_1881DF4((std::string **)(v18 + 24), v17, v22);
      sub_6FCB3C((uint64_t)v17, (uint64_t)__p);
      *(_DWORD *)(v18 + 16) |= 2u;
      uint64_t v23 = *(void *)(v18 + 8);
      uint64_t v24 = (uint64_t *)(v23 & 0xFFFFFFFFFFFFFFFCLL);
      if (v23) {
        uint64_t v24 = (uint64_t *)*v24;
      }
      sub_1881E08((uint64_t *)(v18 + 32), (long long *)__p, v24);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
      *(_DWORD *)(v18 + 16) |= 4u;
      uint64_t v25 = *(void *)(v18 + 8);
      int v26 = (uint64_t *)(v25 & 0xFFFFFFFFFFFFFFFCLL);
      if (v25) {
        int v26 = (uint64_t *)*v26;
      }
      sub_1881DF4((std::string **)(v18 + 40), v17 + 8, v26);
    }
  }
}

void sub_DF6E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_DF6E1C(uint64_t a1, _DWORD *a2, unsigned char *a3, _DWORD *a4)
{
  if (*a3)
  {
    int v4 = a2[1];
    int v5 = v4 / 10;
    int v6 = v4 % 10;
    if (v4 < 0) {
      char v7 = -5;
    }
    else {
      char v7 = 5;
    }
    a4[4] |= 0x10u;
    a4[18] = v5 + (((103 * (char)(v7 + v6)) >> 15) & 1) + ((103 * (char)(v7 + v6)) >> 10);
  }
  if (a3[1])
  {
    int v8 = a2[67];
    int v9 = v8 / 10;
    int v10 = v8 % 10;
    if (v8 < 0) {
      char v11 = -5;
    }
    else {
      char v11 = 5;
    }
    a4[4] |= 0x20u;
    a4[19] = v9 + (((103 * (char)(v11 + v10)) >> 15) & 1) + ((103 * (char)(v11 + v10)) >> 10);
  }
  if (a3[2])
  {
    int v12 = a2[66];
    int v13 = v12 / 10;
    int v14 = v12 % 10;
    if (v12 < 0) {
      char v15 = -5;
    }
    else {
      char v15 = 5;
    }
    a4[4] |= 0x400u;
    a4[25] = v13 + (((103 * (char)(v15 + v14)) >> 15) & 1) + ((103 * (char)(v15 + v14)) >> 10);
  }
  if (a3[3])
  {
    int v16 = a2[69];
    int v17 = v16 / 10;
    int v18 = v16 % 10;
    if (v16 < 0) {
      char v19 = -5;
    }
    else {
      char v19 = 5;
    }
    a4[4] |= 0x200u;
    a4[24] = v17 + (((103 * (char)(v19 + v18)) >> 15) & 1) + ((103 * (char)(v19 + v18)) >> 10);
  }
  if (a3[4])
  {
    int v20 = a2[70];
    int v21 = v20 / 10;
    int v22 = v20 % 10;
    if (v20 < 0) {
      char v23 = -5;
    }
    else {
      char v23 = 5;
    }
    a4[4] |= 0x100u;
    a4[23] = v21 + (((103 * (char)(v23 + v22)) >> 15) & 1) + ((103 * (char)(v23 + v22)) >> 10);
  }
}

uint64_t *sub_DF7028(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6 = a1;
  if (a3 == 3)
  {
    int v13 = a1 + 1;
    uint64_t v12 = a1[1];
    if (*(_DWORD *)(v12 + 68)) {
      BOOL v14 = 1;
    }
    else {
      BOOL v14 = (*(_DWORD *)(v12 + 16) & 0x10) == 0;
    }
    if (!v14)
    {
      uint64_t v31 = *a1;
      if (v12 != *v6)
      {
        uint64_t v32 = *(void *)(v31 + 8);
        if ((v32 & 2) != 0)
        {
          unint64_t v33 = 0;
        }
        else
        {
          unint64_t v33 = (void *)(v32 & 0xFFFFFFFFFFFFFFFCLL);
          if (v32) {
            unint64_t v33 = (void *)*v33;
          }
        }
        uint64_t v54 = *(void *)(v12 + 8);
        if ((v54 & 2) != 0)
        {
          int v55 = 0;
        }
        else
        {
          int v55 = (void *)(v54 & 0xFFFFFFFFFFFFFFFCLL);
          if (v54) {
            int v55 = (void *)*v55;
          }
        }
        uint64_t v61 = v6[1];
        if (v33 == v55)
        {
          sub_13F0408(v31, v61);
          uint64_t v8 = *v13;
          uint64_t v9 = *a2;
          if (*a2 == *v13) {
            return a2;
          }
          goto LABEL_84;
        }
        sub_188A09C(v31, v61);
      }
      uint64_t v8 = *v13;
      uint64_t v9 = *a2;
      if (*a2 == *v13) {
        return a2;
      }
LABEL_84:
      uint64_t v62 = *(void *)(v8 + 8);
      if ((v62 & 2) != 0)
      {
        char v11 = 0;
      }
      else
      {
        char v11 = (void *)(v62 & 0xFFFFFFFFFFFFFFFCLL);
        if (v62) {
          char v11 = (void *)*v11;
        }
      }
      uint64_t v49 = *(void *)(v9 + 8);
      if ((v49 & 2) == 0) {
        goto LABEL_62;
      }
      goto LABEL_93;
    }
    uint64_t v15 = *a2;
    if (*a2 != v12)
    {
      uint64_t v16 = *(void *)(v12 + 8);
      if ((v16 & 2) != 0)
      {
        int v17 = 0;
      }
      else
      {
        int v17 = (void *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
        if (v16) {
          int v17 = (void *)*v17;
        }
      }
      uint64_t v52 = *(void *)(v15 + 8);
      if ((v52 & 2) != 0)
      {
        char v53 = 0;
      }
      else
      {
        char v53 = (void *)(v52 & 0xFFFFFFFFFFFFFFFCLL);
        if (v52) {
          char v53 = (void *)*v53;
        }
      }
      uint64_t v56 = a1[1];
      if (v17 == v53)
      {
        sub_13F0408(v56, v15);
        uint64_t v57 = *v6;
        uint64_t v58 = v6[1];
        if (v58 == *v6) {
          return v13;
        }
LABEL_77:
        uint64_t v59 = *(void *)(v57 + 8);
        if ((v59 & 2) != 0)
        {
          int v60 = 0;
        }
        else
        {
          int v60 = (void *)(v59 & 0xFFFFFFFFFFFFFFFCLL);
          if (v59) {
            int v60 = (void *)*v60;
          }
        }
        uint64_t v63 = *(void *)(v58 + 8);
        if ((v63 & 2) != 0)
        {
          uint64_t v64 = 0;
        }
        else
        {
          uint64_t v64 = (void *)(v63 & 0xFFFFFFFFFFFFFFFCLL);
          if (v63) {
            uint64_t v64 = (void *)*v64;
          }
        }
        if (v60 == v64) {
          sub_13F0408(v57, v58);
        }
        else {
          sub_188A09C(v57, v58);
        }
        return v13;
      }
      sub_188A09C(v56, v15);
    }
    uint64_t v57 = *v6;
    uint64_t v58 = v6[1];
    if (v58 == *v6) {
      return v13;
    }
    goto LABEL_77;
  }
  if (a3 == 2)
  {
    uint64_t v8 = *a1;
    uint64_t v9 = *a2;
    if (*a2 != *v6)
    {
      uint64_t v10 = *(void *)(v8 + 8);
      if ((v10 & 2) != 0)
      {
        char v11 = 0;
      }
      else
      {
        char v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
        if (v10) {
          char v11 = (void *)*v11;
        }
      }
      uint64_t v49 = *(void *)(v9 + 8);
      if ((v49 & 2) == 0)
      {
LABEL_62:
        char v50 = (void *)(v49 & 0xFFFFFFFFFFFFFFFCLL);
        if (v49) {
          char v50 = (void *)*v50;
        }
        goto LABEL_94;
      }
LABEL_93:
      char v50 = 0;
LABEL_94:
      if (v11 == v50) {
        sub_13F0408(v8, v9);
      }
      else {
        sub_188A09C(v8, v9);
      }
      return a2;
    }
    return a2;
  }
  unint64_t v18 = a4;
  if (a5 >= a3)
  {
    BOOL v34 = a1 + 1;
    sub_DF758C(a4, *a1);
    unint64_t v36 = v18 + 112;
    for (unint64_t i = 1; v34 != a2; ++v34)
    {
      while (1)
      {
        uint64_t v38 = *v34;
        if (!*(_DWORD *)(*v34 + 68) && (*(_DWORD *)(*v34 + 16) & 0x10) != 0) {
          break;
        }
        sub_DF758C(v36, v38);
        ++i;
        v36 += 112;
        if (++v34 == a2) {
          goto LABEL_56;
        }
      }
      uint64_t v40 = *v6;
      if (*v6 != v38)
      {
        uint64_t v41 = *(void *)(v40 + 8);
        if ((v41 & 2) != 0)
        {
          uint64_t v42 = 0;
        }
        else
        {
          uint64_t v42 = (void *)(v41 & 0xFFFFFFFFFFFFFFFCLL);
          if (v41) {
            uint64_t v42 = (void *)*v42;
          }
        }
        uint64_t v43 = *(void *)(v38 + 8);
        if ((v43 & 2) != 0)
        {
          int v44 = 0;
        }
        else
        {
          int v44 = (void *)(v43 & 0xFFFFFFFFFFFFFFFCLL);
          if (v43) {
            int v44 = (void *)*v44;
          }
        }
        if (v42 == v44) {
          __n128 v35 = sub_13F0408(v40, v38);
        }
        else {
          sub_13F0358(v40, v38);
        }
      }
      ++v6;
    }
LABEL_56:
    uint64_t v45 = *a2;
    uint64_t v46 = *v6;
    if (*v6 != *a2)
    {
      uint64_t v47 = *(void *)(v46 + 8);
      if ((v47 & 2) != 0)
      {
        char v48 = 0;
      }
      else
      {
        char v48 = (void *)(v47 & 0xFFFFFFFFFFFFFFFCLL);
        if (v47) {
          char v48 = (void *)*v48;
        }
      }
      uint64_t v65 = *(void *)(v45 + 8);
      if ((v65 & 2) != 0)
      {
        uint64_t v66 = 0;
      }
      else
      {
        uint64_t v66 = (void *)(v65 & 0xFFFFFFFFFFFFFFFCLL);
        if (v65) {
          uint64_t v66 = (void *)*v66;
        }
      }
      if (v48 == v66) {
        __n128 v35 = sub_13F0408(v46, v45);
      }
      else {
        sub_13F0358(v46, v45);
      }
    }
    int v13 = v6 + 1;
    if (v36 > v18)
    {
      unint64_t v74 = v18;
      int v75 = v6 + 1;
      do
      {
        uint64_t v76 = *v75;
        if (v74 != *v75)
        {
          uint64_t v77 = *(void *)(v76 + 8);
          if ((v77 & 2) != 0)
          {
            uint64_t v78 = 0;
          }
          else
          {
            uint64_t v78 = (void *)(v77 & 0xFFFFFFFFFFFFFFFCLL);
            if (v77) {
              uint64_t v78 = (void *)*v78;
            }
          }
          uint64_t v79 = *(void *)(v74 + 8);
          if ((v79 & 2) != 0)
          {
            uint64_t v80 = 0;
          }
          else
          {
            uint64_t v80 = (void *)(v79 & 0xFFFFFFFFFFFFFFFCLL);
            if (v79) {
              uint64_t v80 = (void *)*v80;
            }
          }
          if (v78 == v80) {
            __n128 v35 = sub_13F0408(v76, v74);
          }
          else {
            sub_13F0358(v76, v74);
          }
        }
        v74 += 112;
        ++v75;
      }
      while (v74 < v36);
    }
    if (v18 && i)
    {
      for (unint64_t j = 0; j < i; ++j)
      {
        sub_13EEE64(v18, v35);
        v18 += 112;
      }
    }
  }
  else
  {
    if (a3 >= 0) {
      uint64_t v19 = a3;
    }
    else {
      uint64_t v19 = a3 + 1;
    }
    uint64_t v20 = v19 >> 1;
    int v21 = &a1[v19 >> 1];
    uint64_t v23 = *(v21 - 1);
    int v22 = v21 - 1;
    int v24 = *(_DWORD *)(v23 + 16) & 0x10;
    if (*(_DWORD *)(v23 + 68)) {
      BOOL v25 = 1;
    }
    else {
      BOOL v25 = v24 == 0;
    }
    if (v25)
    {
      uint64_t v26 = 8 - 8 * v20;
      uint64_t v27 = v20;
      while (v26)
      {
        uint64_t v28 = v27 - 1;
        uint64_t v29 = a1[v27 - 2];
        v26 += 8;
        if (*(_DWORD *)(v29 + 68)) {
          BOOL v30 = 1;
        }
        else {
          BOOL v30 = (*(_DWORD *)(v29 + 16) & 0x10) == 0;
        }
        uint64_t v27 = v28;
        if (!v30)
        {
          int v22 = (uint64_t *)((char *)a1 - v26);
          goto LABEL_64;
        }
      }
      char v51 = a1;
    }
    else
    {
LABEL_64:
      char v51 = (uint64_t *)sub_DF7028(a1, v22);
    }
    uint64_t v67 = a3 - v20;
    if (*(_DWORD *)(*v21 + 68)) {
      BOOL v68 = 1;
    }
    else {
      BOOL v68 = (*(_DWORD *)(*v21 + 16) & 0x10) == 0;
    }
    if (v68)
    {
      __darwin_ct_rune_t v69 = v21;
LABEL_121:
      int v13 = (uint64_t *)sub_DF7028(v69, a2);
    }
    else
    {
      int v13 = a2 + 1;
      __darwin_ct_rune_t v69 = &v6[v20];
      char v70 = v69 + 1;
      while (v70 != a2)
      {
        --v67;
        uint64_t v71 = *v70++;
        int v72 = *(_DWORD *)(v71 + 16) & 0x10;
        ++v69;
        if (*(_DWORD *)(v71 + 68)) {
          BOOL v73 = 1;
        }
        else {
          BOOL v73 = v72 == 0;
        }
        if (v73) {
          goto LABEL_121;
        }
      }
    }
    if (v51 != v21)
    {
      if (v21 == v13) {
        return v51;
      }
      else {
        return sub_DF768C(v51, v21, v13);
      }
    }
  }
  return v13;
}

uint64_t sub_DF758C(uint64_t a1, uint64_t a2)
{
  sub_13EED4C(a1, 0, 0);
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if ((v4 & 2) != 0)
    {
      int v5 = 0;
    }
    else
    {
      int v5 = (void *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
      if (v4) {
        int v5 = (void *)*v5;
      }
    }
    uint64_t v6 = *(void *)(a2 + 8);
    if ((v6 & 2) != 0)
    {
      char v7 = 0;
    }
    else
    {
      char v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (v6) {
        char v7 = (void *)*v7;
      }
    }
    if (v5 == v7) {
      sub_13F0408(a1, a2);
    }
    else {
      sub_13F0358(a1, a2);
    }
  }
  return a1;
}

uint64_t *sub_DF762C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = (unint64_t *)a1[1];
    if (*v3)
    {
      unint64_t v4 = 0;
      do
      {
        ++v4;
        sub_13EEE64();
      }
      while (v4 < *v3);
    }
  }
  return a1;
}

uint64_t *sub_DF768C(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v4 = a2;
  int v5 = a1 + 1;
  uint64_t v6 = a2 + 1;
  char v7 = a1 + 1;
  uint64_t v8 = *a1;
  uint64_t v9 = *a2;
  if (v9 != v8) {
    goto LABEL_2;
  }
LABEL_12:
  while (v6 != a3)
  {
    while (1)
    {
      if (v7 == v4) {
        unint64_t v4 = v6;
      }
      ++v7;
      ++v5;
      ++v6;
      uint64_t v8 = *(v7 - 1);
      uint64_t v9 = *(v6 - 1);
      if (v9 == v8) {
        break;
      }
LABEL_2:
      uint64_t v10 = *(void *)(v8 + 8);
      if ((v10 & 2) != 0)
      {
        char v11 = 0;
      }
      else
      {
        char v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
        if (v10) {
          char v11 = (void *)*v11;
        }
      }
      uint64_t v12 = *(void *)(v9 + 8);
      if ((v12 & 2) != 0)
      {
        int v13 = 0;
      }
      else
      {
        int v13 = (void *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
        if (v12) {
          int v13 = (void *)*v13;
        }
      }
      if (v11 != v13)
      {
        sub_188A09C(v8, v9);
        goto LABEL_12;
      }
      sub_13F0408(v8, v9);
      if (v6 == a3) {
        goto LABEL_18;
      }
    }
  }
LABEL_18:
  if (v7 != v4)
  {
    BOOL v14 = v4;
    while (1)
    {
      uint64_t v15 = *v7;
      uint64_t v16 = *v14;
      if (*v14 == *v7) {
        goto LABEL_33;
      }
      uint64_t v17 = *(void *)(v15 + 8);
      if ((v17 & 2) != 0)
      {
        unint64_t v18 = 0;
      }
      else
      {
        unint64_t v18 = (void *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
        if (v17) {
          unint64_t v18 = (void *)*v18;
        }
      }
      uint64_t v19 = *(void *)(v16 + 8);
      if ((v19 & 2) != 0)
      {
        uint64_t v20 = 0;
      }
      else
      {
        uint64_t v20 = (void *)(v19 & 0xFFFFFFFFFFFFFFFCLL);
        if (v19) {
          uint64_t v20 = (void *)*v20;
        }
      }
      if (v18 == v20) {
        break;
      }
      sub_188A09C(v15, v16);
LABEL_33:
      ++v7;
      ++v14;
      BOOL v21 = v7 == v4;
      if (v14 == a3) {
        goto LABEL_34;
      }
LABEL_20:
      if (v21) {
        unint64_t v4 = v14;
      }
    }
    sub_13F0408(v15, v16);
    ++v7;
    ++v14;
    BOOL v21 = v7 == v4;
    if (v14 != a3) {
      goto LABEL_20;
    }
LABEL_34:
    if (v7 != v4)
    {
      BOOL v14 = v4 + 1;
      while (1)
      {
        uint64_t v22 = *v7;
        uint64_t v23 = *v4;
        if (*v4 == *v7) {
          goto LABEL_47;
        }
        uint64_t v24 = *(void *)(v22 + 8);
        if ((v24 & 2) != 0)
        {
          BOOL v25 = 0;
        }
        else
        {
          BOOL v25 = (void *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
          if (v24) {
            BOOL v25 = (void *)*v25;
          }
        }
        uint64_t v26 = *(void *)(v23 + 8);
        if ((v26 & 2) != 0)
        {
          uint64_t v27 = 0;
        }
        else
        {
          uint64_t v27 = (void *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
          if (v26) {
            uint64_t v27 = (void *)*v27;
          }
        }
        if (v25 != v27) {
          break;
        }
        sub_13F0408(v22, v23);
        BOOL v21 = ++v7 == v4;
        if (v14 != a3) {
          goto LABEL_20;
        }
LABEL_48:
        if (v7 == v4) {
          return v5;
        }
      }
      sub_188A09C(v22, v23);
LABEL_47:
      BOOL v21 = ++v7 == v4;
      if (v14 != a3) {
        goto LABEL_20;
      }
      goto LABEL_48;
    }
  }
  return v5;
}

uint64_t *sub_DF78A0(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a1;
  if (a3 == 3)
  {
    int v13 = a1 + 1;
    uint64_t v12 = a1[1];
    if (*(_DWORD *)(v12 + 64) == 2 && *(_DWORD *)(v12 + 72) <= 0x258u)
    {
      uint64_t v14 = *a1;
      if (v12 != *v6)
      {
        uint64_t v15 = *(void *)(v14 + 8);
        if ((v15 & 2) != 0)
        {
          uint64_t v16 = 0;
        }
        else
        {
          uint64_t v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
          if (v15) {
            uint64_t v16 = (void *)*v16;
          }
        }
        uint64_t v50 = *(void *)(v12 + 8);
        if ((v50 & 2) != 0)
        {
          char v51 = 0;
        }
        else
        {
          char v51 = (void *)(v50 & 0xFFFFFFFFFFFFFFFCLL);
          if (v50) {
            char v51 = (void *)*v51;
          }
        }
        uint64_t v54 = v6[1];
        if (v16 == v51)
        {
          sub_13F0408(v14, v54);
          uint64_t v8 = *v13;
          uint64_t v9 = *a2;
          if (*a2 == *v13) {
            return a2;
          }
          goto LABEL_69;
        }
        sub_188A09C(v14, v54);
      }
      uint64_t v8 = *v13;
      uint64_t v9 = *a2;
      if (*a2 == *v13) {
        return a2;
      }
LABEL_69:
      uint64_t v55 = *(void *)(v8 + 8);
      if ((v55 & 2) != 0)
      {
        char v11 = 0;
      }
      else
      {
        char v11 = (void *)(v55 & 0xFFFFFFFFFFFFFFFCLL);
        if (v55) {
          char v11 = (void *)*v11;
        }
      }
      uint64_t v42 = *(void *)(v9 + 8);
      if ((v42 & 2) == 0) {
        goto LABEL_48;
      }
      goto LABEL_81;
    }
    uint64_t v25 = *a2;
    if (*a2 != v12)
    {
      uint64_t v26 = *(void *)(v12 + 8);
      if ((v26 & 2) != 0)
      {
        uint64_t v27 = 0;
      }
      else
      {
        uint64_t v27 = (void *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
        if (v26) {
          uint64_t v27 = (void *)*v27;
        }
      }
      uint64_t v52 = *(void *)(v25 + 8);
      if ((v52 & 2) != 0)
      {
        char v53 = 0;
      }
      else
      {
        char v53 = (void *)(v52 & 0xFFFFFFFFFFFFFFFCLL);
        if (v52) {
          char v53 = (void *)*v53;
        }
      }
      uint64_t v56 = a1[1];
      if (v27 == v53)
      {
        sub_13F0408(v56, v25);
        uint64_t v57 = *v6;
        uint64_t v58 = v6[1];
        if (v58 == *v6) {
          return v13;
        }
LABEL_76:
        uint64_t v59 = *(void *)(v57 + 8);
        if ((v59 & 2) != 0)
        {
          int v60 = 0;
        }
        else
        {
          int v60 = (void *)(v59 & 0xFFFFFFFFFFFFFFFCLL);
          if (v59) {
            int v60 = (void *)*v60;
          }
        }
        uint64_t v61 = *(void *)(v58 + 8);
        if ((v61 & 2) != 0)
        {
          uint64_t v62 = 0;
        }
        else
        {
          uint64_t v62 = (void *)(v61 & 0xFFFFFFFFFFFFFFFCLL);
          if (v61) {
            uint64_t v62 = (void *)*v62;
          }
        }
        if (v60 == v62) {
          sub_13F0408(v57, v58);
        }
        else {
          sub_188A09C(v57, v58);
        }
        return v13;
      }
      sub_188A09C(v56, v25);
    }
    uint64_t v57 = *v6;
    uint64_t v58 = v6[1];
    if (v58 == *v6) {
      return v13;
    }
    goto LABEL_76;
  }
  if (a3 == 2)
  {
    uint64_t v8 = *a1;
    uint64_t v9 = *a2;
    if (*a2 != *v6)
    {
      uint64_t v10 = *(void *)(v8 + 8);
      if ((v10 & 2) != 0)
      {
        char v11 = 0;
      }
      else
      {
        char v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
        if (v10) {
          char v11 = (void *)*v11;
        }
      }
      uint64_t v42 = *(void *)(v9 + 8);
      if ((v42 & 2) == 0)
      {
LABEL_48:
        uint64_t v43 = (void *)(v42 & 0xFFFFFFFFFFFFFFFCLL);
        if (v42) {
          uint64_t v43 = (void *)*v43;
        }
        goto LABEL_82;
      }
LABEL_81:
      uint64_t v43 = 0;
LABEL_82:
      if (v11 == v43) {
        sub_13F0408(v8, v9);
      }
      else {
        sub_188A09C(v8, v9);
      }
      return a2;
    }
    return a2;
  }
  unint64_t v18 = a4;
  if (a5 < a3)
  {
    if (a3 >= 0) {
      uint64_t v19 = a3;
    }
    else {
      uint64_t v19 = a3 + 1;
    }
    uint64_t v20 = v19 >> 1;
    BOOL v21 = &a1[v19 >> 1];
    uint64_t v22 = v21 - 1;
    uint64_t v23 = *(v21 - 1);
    if (*(_DWORD *)(v23 + 64) == 2 && *(_DWORD *)(v23 + 72) < 0x259u)
    {
      uint64_t v24 = v20;
LABEL_55:
      uint64_t v47 = (uint64_t *)sub_DF78A0(a1, v22, v24, a4, a5);
      uint64_t v48 = a3 - v20;
      uint64_t v49 = *v21;
      if (*(_DWORD *)(*v21 + 64) != 2) {
        goto LABEL_107;
      }
    }
    else
    {
      uint64_t v44 = 8 - 8 * v20;
      uint64_t v45 = v20;
      while (v44)
      {
        uint64_t v24 = v45 - 1;
        uint64_t v46 = a1[v45 - 2];
        v44 += 8;
        --v45;
        if (*(_DWORD *)(v46 + 64) == 2)
        {
          uint64_t v45 = v24;
          if (*(_DWORD *)(v46 + 72) <= 0x258u)
          {
            uint64_t v22 = (uint64_t *)((char *)a1 - v44);
            goto LABEL_55;
          }
        }
      }
      uint64_t v47 = a1;
      uint64_t v48 = a3 - v20;
      uint64_t v49 = *v21;
      if (*(_DWORD *)(*v21 + 64) != 2) {
        goto LABEL_107;
      }
    }
    if (*(_DWORD *)(v49 + 72) <= 0x258u)
    {
      int v13 = a2 + 1;
      uint64_t v65 = &v6[v20];
      uint64_t v66 = v65 + 1;
      while (v66 != a2)
      {
        --v48;
        uint64_t v68 = *v66++;
        uint64_t v67 = v68;
        ++v65;
        if (*(_DWORD *)(v68 + 64) != 2 || *(_DWORD *)(v67 + 72) >= 0x259u) {
          goto LABEL_108;
        }
      }
      goto LABEL_109;
    }
LABEL_107:
    uint64_t v65 = v21;
LABEL_108:
    int v13 = (uint64_t *)sub_DF78A0(v65, a2, v48, v18, a5);
LABEL_109:
    if (v47 != v21)
    {
      if (v21 == v13) {
        return v47;
      }
      else {
        return sub_DF768C(v47, v21, v13);
      }
    }
    return v13;
  }
  uint64_t v28 = a1 + 1;
  sub_DF758C(a4, *a1);
  unint64_t v30 = v18 + 112;
  for (unint64_t i = 1; v28 != a2; ++v28)
  {
    while (1)
    {
      uint64_t v32 = *v28;
      if (*(_DWORD *)(*v28 + 64) == 2 && *(_DWORD *)(v32 + 72) <= 0x258u) {
        break;
      }
      sub_DF758C(v30, v32);
      ++i;
      v30 += 112;
      if (++v28 == a2) {
        goto LABEL_42;
      }
    }
    uint64_t v33 = *v6;
    if (*v6 != v32)
    {
      uint64_t v34 = *(void *)(v33 + 8);
      if ((v34 & 2) != 0)
      {
        __n128 v35 = 0;
      }
      else
      {
        __n128 v35 = (void *)(v34 & 0xFFFFFFFFFFFFFFFCLL);
        if (v34) {
          __n128 v35 = (void *)*v35;
        }
      }
      uint64_t v36 = *(void *)(v32 + 8);
      if ((v36 & 2) != 0)
      {
        uint64_t v37 = 0;
      }
      else
      {
        uint64_t v37 = (void *)(v36 & 0xFFFFFFFFFFFFFFFCLL);
        if (v36) {
          uint64_t v37 = (void *)*v37;
        }
      }
      if (v35 == v37) {
        __n128 v29 = sub_13F0408(v33, v32);
      }
      else {
        sub_13F0358(v33, v32);
      }
    }
    ++v6;
  }
LABEL_42:
  uint64_t v38 = *a2;
  uint64_t v39 = *v6;
  if (*v6 != *a2)
  {
    uint64_t v40 = *(void *)(v39 + 8);
    if ((v40 & 2) != 0)
    {
      uint64_t v41 = 0;
    }
    else
    {
      uint64_t v41 = (void *)(v40 & 0xFFFFFFFFFFFFFFFCLL);
      if (v40) {
        uint64_t v41 = (void *)*v41;
      }
    }
    uint64_t v63 = *(void *)(v38 + 8);
    if ((v63 & 2) != 0)
    {
      uint64_t v64 = 0;
    }
    else
    {
      uint64_t v64 = (void *)(v63 & 0xFFFFFFFFFFFFFFFCLL);
      if (v63) {
        uint64_t v64 = (void *)*v64;
      }
    }
    if (v41 == v64) {
      __n128 v29 = sub_13F0408(v39, v38);
    }
    else {
      sub_13F0358(v39, v38);
    }
  }
  int v13 = v6 + 1;
  if (v30 > v18)
  {
    unint64_t v69 = v18;
    char v70 = v6 + 1;
    do
    {
      uint64_t v71 = *v70;
      if (v69 != *v70)
      {
        uint64_t v72 = *(void *)(v71 + 8);
        if ((v72 & 2) != 0)
        {
          BOOL v73 = 0;
        }
        else
        {
          BOOL v73 = (void *)(v72 & 0xFFFFFFFFFFFFFFFCLL);
          if (v72) {
            BOOL v73 = (void *)*v73;
          }
        }
        uint64_t v74 = *(void *)(v69 + 8);
        if ((v74 & 2) != 0)
        {
          int v75 = 0;
        }
        else
        {
          int v75 = (void *)(v74 & 0xFFFFFFFFFFFFFFFCLL);
          if (v74) {
            int v75 = (void *)*v75;
          }
        }
        if (v73 == v75) {
          __n128 v29 = sub_13F0408(v71, v69);
        }
        else {
          sub_13F0358(v71, v69);
        }
      }
      v69 += 112;
      ++v70;
    }
    while (v69 < v30);
  }
  if (v18 && i)
  {
    for (unint64_t j = 0; j < i; ++j)
    {
      sub_13EEE64(v18, v29);
      v18 += 112;
    }
  }
  return v13;
}

double sub_DF7E1C(uint64_t *a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  if (a3 >= 2)
  {
    char v7 = a1;
    if (a3 == 2)
    {
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if (v8 != *v7 && *(_DWORD *)(v8 + 72) < *(_DWORD *)(*v7 + 72))
      {
        uint64_t v11 = *(void *)(v9 + 8);
        if ((v11 & 2) != 0)
        {
          uint64_t v12 = 0;
        }
        else
        {
          uint64_t v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
          if (v11) {
            uint64_t v12 = (void *)*v12;
          }
        }
        uint64_t v62 = *(void *)(v8 + 8);
        if ((v62 & 2) != 0)
        {
          uint64_t v63 = 0;
        }
        else
        {
          uint64_t v63 = (void *)(v62 & 0xFFFFFFFFFFFFFFFCLL);
          if (v62) {
            uint64_t v63 = (void *)*v63;
          }
        }
        if (v12 == v63)
        {
          a6.n128_u64[0] = sub_13F0408(v9, v8).n128_u64[0];
        }
        else
        {
          sub_188A09C(v9, v8);
        }
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if (a1 != a2)
      {
        uint64_t v20 = a1 + 1;
        if (a1 + 1 != a2)
        {
          uint64_t v21 = 0;
          uint64_t v22 = a1;
          do
          {
            uint64_t v24 = v20;
            if (*(_DWORD *)(*v20 + 72) < *(_DWORD *)(*v22 + 72))
            {
              sub_DF758C((uint64_t)&v66, *v20);
              uint64_t v25 = *v22;
              uint64_t v26 = v21;
              while (1)
              {
                uint64_t v27 = *(uint64_t *)((char *)v7 + v26 + 8);
                if (v27 != v25)
                {
                  uint64_t v28 = *(void *)(v27 + 8);
                  if ((v28 & 2) != 0)
                  {
                    __n128 v29 = 0;
                  }
                  else
                  {
                    __n128 v29 = (void *)(v28 & 0xFFFFFFFFFFFFFFFCLL);
                    if (v28) {
                      __n128 v29 = (void *)*v29;
                    }
                  }
                  uint64_t v30 = *(void *)(v25 + 8);
                  if ((v30 & 2) != 0)
                  {
                    uint64_t v31 = 0;
                  }
                  else
                  {
                    uint64_t v31 = (void *)(v30 & 0xFFFFFFFFFFFFFFFCLL);
                    if (v30) {
                      uint64_t v31 = (void *)*v31;
                    }
                  }
                  if (v29 == v31) {
                    __n128 v23 = sub_13F0408(v27, v25);
                  }
                  else {
                    sub_13F0358(v27, v25);
                  }
                }
                if (!v26) {
                  break;
                }
                uint64_t v25 = *(uint64_t *)((char *)v7 + v26 - 8);
                v26 -= 8;
                if (v68 >= *(_DWORD *)(v25 + 72))
                {
                  uint64_t v32 = *(uint64_t **)((char *)v7 + v26 + 8);
                  if (v32 == &v66) {
                    goto LABEL_19;
                  }
                  goto LABEL_40;
                }
              }
              uint64_t v32 = (uint64_t *)*v7;
              if ((uint64_t *)*v7 == &v66) {
                goto LABEL_19;
              }
LABEL_40:
              uint64_t v33 = v32[1];
              if ((v33 & 2) != 0)
              {
                uint64_t v34 = 0;
              }
              else
              {
                uint64_t v34 = (void *)(v33 & 0xFFFFFFFFFFFFFFFCLL);
                if (v33) {
                  uint64_t v34 = (void *)*v34;
                }
              }
              if ((v67 & 2) != 0)
              {
                __n128 v35 = 0;
              }
              else
              {
                __n128 v35 = (void *)(v67 & 0xFFFFFFFFFFFFFFFCLL);
                if (v67) {
                  __n128 v35 = (void *)*v35;
                }
              }
              if (v34 == v35) {
                __n128 v23 = sub_13F0408((uint64_t)v32, (uint64_t)&v66);
              }
              else {
                sub_13F0358((uint64_t)v32, (uint64_t)&v66);
              }
LABEL_19:
              sub_13EEE64(&v66, v23);
            }
            uint64_t v20 = v24 + 1;
            v21 += 8;
            uint64_t v22 = v24;
          }
          while (v24 + 1 != a2);
        }
      }
    }
    else
    {
      uint64_t v15 = a4;
      uint64_t v16 = a3 >> 1;
      uint64_t v17 = &a1[a3 >> 1];
      if ((uint64_t)a3 <= a5)
      {
        unint64_t v65 = 0;
        uint64_t v66 = a4;
        unint64_t v67 = (unint64_t)&v65;
        sub_DF83A8(a1, &a1[a3 >> 1], a3 >> 1, a4);
        unint64_t v65 = a3 >> 1;
        unint64_t v36 = a3 - v16;
        uint64_t v37 = v15 + 112 * v16;
        sub_DF83A8(&v7[a3 >> 1], a2, v36, v37);
        unint64_t v65 = a3;
        unint64_t v38 = v15 + 112 * a3;
        uint64_t v39 = v37;
        while (v39 != v38)
        {
          uint64_t v40 = *v7;
          if (*(_DWORD *)(v39 + 72) >= *(_DWORD *)(v15 + 72))
          {
            if (v40 != v15)
            {
              uint64_t v43 = *(void *)(v40 + 8);
              if ((v43 & 2) != 0)
              {
                uint64_t v44 = 0;
              }
              else
              {
                uint64_t v44 = (void *)(v43 & 0xFFFFFFFFFFFFFFFCLL);
                if (v43) {
                  uint64_t v44 = (void *)*v44;
                }
              }
              uint64_t v47 = *(void *)(v15 + 8);
              if ((v47 & 2) != 0)
              {
                uint64_t v48 = 0;
              }
              else
              {
                uint64_t v48 = (void *)(v47 & 0xFFFFFFFFFFFFFFFCLL);
                if (v47) {
                  uint64_t v48 = (void *)*v48;
                }
              }
              if (v44 == v48) {
                a6 = sub_13F0408(v40, v15);
              }
              else {
                sub_13F0358(v40, v15);
              }
            }
            v15 += 112;
            ++v7;
            if (v15 == v37)
            {
LABEL_96:
              while (v39 != v38)
              {
                uint64_t v54 = *v7;
                if (v39 != *v7)
                {
                  uint64_t v55 = *(void *)(v54 + 8);
                  if ((v55 & 2) != 0)
                  {
                    uint64_t v56 = 0;
                  }
                  else
                  {
                    uint64_t v56 = (void *)(v55 & 0xFFFFFFFFFFFFFFFCLL);
                    if (v55) {
                      uint64_t v56 = (void *)*v56;
                    }
                  }
                  uint64_t v57 = *(void *)(v39 + 8);
                  if ((v57 & 2) != 0)
                  {
                    uint64_t v58 = 0;
                  }
                  else
                  {
                    uint64_t v58 = (void *)(v57 & 0xFFFFFFFFFFFFFFFCLL);
                    if (v57) {
                      uint64_t v58 = (void *)*v58;
                    }
                  }
                  if (v56 == v58) {
                    a6 = sub_13F0408(v54, v39);
                  }
                  else {
                    sub_13F0358(v54, v39);
                  }
                }
                v39 += 112;
                ++v7;
              }
              goto LABEL_108;
            }
          }
          else
          {
            if (v40 != v39)
            {
              uint64_t v41 = *(void *)(v40 + 8);
              if ((v41 & 2) != 0)
              {
                uint64_t v42 = 0;
              }
              else
              {
                uint64_t v42 = (void *)(v41 & 0xFFFFFFFFFFFFFFFCLL);
                if (v41) {
                  uint64_t v42 = (void *)*v42;
                }
              }
              uint64_t v45 = *(void *)(v39 + 8);
              if ((v45 & 2) != 0)
              {
                uint64_t v46 = 0;
              }
              else
              {
                uint64_t v46 = (void *)(v45 & 0xFFFFFFFFFFFFFFFCLL);
                if (v45) {
                  uint64_t v46 = (void *)*v46;
                }
              }
              if (v42 == v46) {
                a6 = sub_13F0408(v40, v39);
              }
              else {
                sub_13F0358(v40, v39);
              }
            }
            v39 += 112;
            ++v7;
            if (v15 == v37) {
              goto LABEL_96;
            }
          }
        }
        while (v15 != v37)
        {
          uint64_t v49 = *v7;
          if (v15 != *v7)
          {
            uint64_t v50 = *(void *)(v49 + 8);
            if ((v50 & 2) != 0)
            {
              char v51 = 0;
            }
            else
            {
              char v51 = (void *)(v50 & 0xFFFFFFFFFFFFFFFCLL);
              if (v50) {
                char v51 = (void *)*v51;
              }
            }
            uint64_t v52 = *(void *)(v15 + 8);
            if ((v52 & 2) != 0)
            {
              char v53 = 0;
            }
            else
            {
              char v53 = (void *)(v52 & 0xFFFFFFFFFFFFFFFCLL);
              if (v52) {
                char v53 = (void *)*v53;
              }
            }
            if (v51 == v53) {
              a6 = sub_13F0408(v49, v15);
            }
            else {
              sub_13F0358(v49, v15);
            }
          }
          v15 += 112;
          ++v7;
        }
LABEL_108:
        uint64_t v59 = v66;
        if (v66)
        {
          int v60 = (unint64_t *)v67;
          if (*(void *)v67)
          {
            unint64_t v61 = 0;
            do
            {
              ++v61;
              uint64_t v59 = sub_13EEE64(v59, a6) + 112;
            }
            while (v61 < *v60);
          }
        }
      }
      else
      {
        sub_DF7E1C(a1, &a1[a3 >> 1], a3 >> 1, a4, a5);
        uint64_t v18 = a3 - v16;
        sub_DF7E1C(v17, a2, v18, v15, a5);
        a6.n128_f64[0] = sub_DF86AC(v7, v17, a2, v16, v18, v15, a5, v19);
      }
    }
  }
  return a6.n128_f64[0];
}

void sub_DF837C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_DF762C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_DF83A8(uint64_t *a1, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v4 = a4;
    char v7 = a1;
    if (a3 == 2)
    {
      uint64_t v10 = *(a2 - 1);
      if (*(_DWORD *)(v10 + 72) >= *(_DWORD *)(*a1 + 72))
      {
        sub_DF758C(a4, *a1);
        uint64_t v8 = *(a2 - 1);
      }
      else
      {
        sub_DF758C(a4, v10);
        uint64_t v8 = *v7;
      }
      uint64_t v9 = v4 + 112;
      goto LABEL_6;
    }
    if (a3 == 1)
    {
      uint64_t v8 = *a1;
      uint64_t v9 = a4;
LABEL_6:
      sub_DF758C(v9, v8);
      return;
    }
    if ((uint64_t)a3 > 8)
    {
      unint64_t v27 = a3 >> 1;
      uint64_t v28 = &a1[a3 >> 1];
      sub_DF7E1C(a1, v28, a3 >> 1, a4, a3 >> 1);
      sub_DF7E1C(&v7[a3 >> 1], a2, a3 - v27, v4 + 112 * v27, a3 - v27);
      __n128 v29 = &v7[a3 >> 1];
      while (v29 != a2)
      {
        if (*(_DWORD *)(*v29 + 72) >= *(_DWORD *)(*v7 + 72))
        {
          sub_DF758C(v4, *v7++);
          v4 += 112;
          if (v7 == v28) {
            goto LABEL_58;
          }
        }
        else
        {
          sub_DF758C(v4, *v29++);
          v4 += 112;
          if (v7 == v28)
          {
LABEL_58:
            while (v29 != a2)
            {
              uint64_t v31 = *v29++;
              sub_DF758C(v4, v31);
              v4 += 112;
            }
            return;
          }
        }
      }
      while (v7 != v28)
      {
        uint64_t v30 = *v7++;
        sub_DF758C(v4, v30);
        v4 += 112;
      }
    }
    else if (a1 != a2)
    {
      uint64_t v11 = a1 + 1;
      sub_DF758C(a4, *a1);
      if (v11 != a2)
      {
        uint64_t v12 = 0;
        uint64_t v13 = v4;
        do
        {
          uint64_t v14 = v13;
          v13 += 112;
          if (*(_DWORD *)(*v11 + 72) >= *(_DWORD *)(v14 + 72))
          {
            sub_DF758C(v13, *v11);
          }
          else
          {
            sub_DF758C(v13, v14);
            uint64_t v15 = v4;
            if (v14 != v4)
            {
              uint64_t v16 = v12;
              while (1)
              {
                uint64_t v15 = v4 + v16;
                if (*(_DWORD *)(*v11 + 72) >= *(_DWORD *)(v4 + v16 - 40)) {
                  break;
                }
                uint64_t v17 = *(void *)(v15 + 8);
                if ((v17 & 2) != 0)
                {
                  uint64_t v18 = 0;
                }
                else
                {
                  uint64_t v18 = (void *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
                  if (v17) {
                    uint64_t v18 = (void *)*v18;
                  }
                }
                uint64_t v19 = *(void *)(v4 + v16 - 104);
                if ((v19 & 2) != 0)
                {
                  uint64_t v20 = 0;
                }
                else
                {
                  uint64_t v20 = (void *)(v19 & 0xFFFFFFFFFFFFFFFCLL);
                  if (v19) {
                    uint64_t v20 = (void *)*v20;
                  }
                }
                uint64_t v21 = v15 - 112;
                if (v18 == v20) {
                  sub_13F0408(v15, v21);
                }
                else {
                  sub_13F0358(v15, v21);
                }
                v16 -= 112;
                if (!v16)
                {
                  uint64_t v15 = v4;
                  break;
                }
              }
            }
            uint64_t v22 = *v11;
            if (v15 != *v11)
            {
              uint64_t v23 = *(void *)(v15 + 8);
              if ((v23 & 2) != 0)
              {
                uint64_t v24 = 0;
              }
              else
              {
                uint64_t v24 = (void *)(v23 & 0xFFFFFFFFFFFFFFFCLL);
                if (v23) {
                  uint64_t v24 = (void *)*v24;
                }
              }
              uint64_t v25 = *(void *)(v22 + 8);
              if ((v25 & 2) != 0)
              {
                uint64_t v26 = 0;
              }
              else
              {
                uint64_t v26 = (void *)(v25 & 0xFFFFFFFFFFFFFFFCLL);
                if (v25) {
                  uint64_t v26 = (void *)*v26;
                }
              }
              if (v24 == v26) {
                sub_13F0408(v15, v22);
              }
              else {
                sub_13F0358(v15, v22);
              }
            }
          }
          ++v11;
          v12 += 112;
        }
        while (v11 != a2);
      }
    }
  }
}

double sub_DF86AC(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8)
{
  if (!a5) {
    return a8.n128_f64[0];
  }
  uint64_t v9 = a5;
  while (v9 > a7 && a4 > a7)
  {
    if (!a4) {
      return a8.n128_f64[0];
    }
    unint64_t v14 = 0;
    uint64_t v15 = *a2;
    uint64_t v16 = -a4;
    while (1)
    {
      uint64_t v17 = a1[v14 / 8];
      if (*(_DWORD *)(*a2 + 72) < *(_DWORD *)(v17 + 72)) {
        break;
      }
      v14 += 8;
      if (__CFADD__(v16++, 1)) {
        return a8.n128_f64[0];
      }
    }
    uint64_t v19 = -v16;
    int v102 = a3;
    uint64_t v103 = a6;
    if (-v16 >= v9)
    {
      if (v16 == -1)
      {
        if (v15 != v17)
        {
          uint64_t v89 = *(void *)(v17 + 8);
          if ((v89 & 2) != 0)
          {
            int v90 = 0;
          }
          else
          {
            int v90 = (void *)(v89 & 0xFFFFFFFFFFFFFFFCLL);
            if (v89) {
              int v90 = (void *)*v90;
            }
          }
          uint64_t v98 = *(void *)(v15 + 8);
          if ((v98 & 2) != 0)
          {
            int v99 = 0;
          }
          else
          {
            int v99 = (void *)(v98 & 0xFFFFFFFFFFFFFFFCLL);
            if (v98) {
              int v99 = (void *)*v99;
            }
          }
          if (v90 == v99)
          {
            a8.n128_u64[0] = sub_13F0408(v17, v15).n128_u64[0];
          }
          else
          {
            sub_188A09C(v17, v15);
          }
        }
        return a8.n128_f64[0];
      }
      if (v16 > 0) {
        uint64_t v19 = 1 - v16;
      }
      uint64_t v29 = v19 >> 1;
      uint64_t v23 = &a1[(v19 >> 1) + v14 / 8];
      uint64_t v22 = a2;
      if (a2 != a3)
      {
        unint64_t v34 = a3 - a2;
        uint64_t v22 = a2;
        do
        {
          unint64_t v35 = v34 >> 1;
          unint64_t v36 = &v22[v34 >> 1];
          uint64_t v38 = *v36;
          uint64_t v37 = v36 + 1;
          v34 += ~(v34 >> 1);
          if (*(_DWORD *)(v38 + 72) < *(_DWORD *)(*v23 + 72)) {
            uint64_t v22 = v37;
          }
          else {
            unint64_t v34 = v35;
          }
        }
        while (v34);
      }
      uint64_t v21 = v22 - a2;
      uint64_t v101 = &a1[v14 / 8];
      if (v23 != a2)
      {
LABEL_22:
        if (v22 == a2)
        {
          uint64_t v33 = v23;
        }
        else
        {
          uint64_t v30 = a7;
          uint64_t v31 = v29;
          uint64_t v32 = sub_DF768C(v23, a2, v22);
          uint64_t v29 = v31;
          a7 = v30;
          uint64_t v33 = v32;
        }
        goto LABEL_36;
      }
    }
    else
    {
      if (v9 >= 0) {
        uint64_t v20 = v9;
      }
      else {
        uint64_t v20 = v9 + 1;
      }
      uint64_t v21 = v20 >> 1;
      uint64_t v22 = &a2[v20 >> 1];
      uint64_t v23 = a2;
      if ((char *)a2 - (char *)a1 != v14)
      {
        unint64_t v24 = (uint64_t)((char *)a2 - (char *)a1 - v14) >> 3;
        uint64_t v23 = &a1[v14 / 8];
        do
        {
          unint64_t v25 = v24 >> 1;
          uint64_t v26 = &v23[v24 >> 1];
          uint64_t v28 = *v26;
          unint64_t v27 = v26 + 1;
          v24 += ~(v24 >> 1);
          if (*(_DWORD *)(v28 + 72) > *(_DWORD *)(*v22 + 72)) {
            unint64_t v24 = v25;
          }
          else {
            uint64_t v23 = v27;
          }
        }
        while (v24);
      }
      uint64_t v29 = (uint64_t)((char *)v23 - (char *)a1 - v14) >> 3;
      uint64_t v101 = &a1[v14 / 8];
      if (v23 != a2) {
        goto LABEL_22;
      }
    }
    uint64_t v33 = v22;
LABEL_36:
    a4 = -(v29 + v16);
    uint64_t v39 = v9 - v21;
    if (v29 + v21 >= v9 - (v29 + v21) - v16)
    {
      uint64_t v43 = v29;
      uint64_t v44 = a7;
      sub_DF86AC(v33, v22, v102, a4, v9 - v21, v103);
      a2 = v23;
      a6 = v103;
      uint64_t v45 = v21;
      a4 = v43;
      a3 = v33;
      a1 = v101;
      uint64_t v9 = v45;
      a7 = v44;
      if (!v45) {
        return a8.n128_f64[0];
      }
    }
    else
    {
      uint64_t v40 = &a1[v14 / 8];
      uint64_t v41 = v23;
      a6 = v103;
      uint64_t v42 = a7;
      sub_DF86AC(v40, v41, v33, v29, v21, v103);
      a1 = v33;
      a2 = v22;
      a3 = v102;
      uint64_t v9 = v39;
      a7 = v42;
      if (!v39) {
        return a8.n128_f64[0];
      }
    }
  }
  if (a4 <= v9)
  {
    if (a1 == a2) {
      return a8.n128_f64[0];
    }
    uint64_t v66 = 0;
    unint64_t v67 = a2;
    uint64_t v47 = 0;
    unsigned int v68 = a1;
    do
    {
      uint64_t v69 = *v68++;
      sub_DF758C(a6 + v66, v69);
      ++v47;
      v66 += 112;
    }
    while (v68 != v67);
    if (v66)
    {
      uint64_t v70 = a6 + v66;
      uint64_t v71 = a6 + v66 - 112;
      uint64_t v72 = a6;
      while (v67 != a3)
      {
        uint64_t v73 = *v67;
        uint64_t v74 = *a1;
        if (*(_DWORD *)(*v67 + 72) >= *(_DWORD *)(v72 + 72))
        {
          if (v74 != v72)
          {
            uint64_t v77 = *(void *)(v74 + 8);
            if ((v77 & 2) != 0)
            {
              uint64_t v78 = 0;
            }
            else
            {
              uint64_t v78 = (void *)(v77 & 0xFFFFFFFFFFFFFFFCLL);
              if (v77) {
                uint64_t v78 = (void *)*v78;
              }
            }
            uint64_t v81 = *(void *)(v72 + 8);
            if ((v81 & 2) != 0)
            {
              __darwin_ct_rune_t v82 = 0;
            }
            else
            {
              __darwin_ct_rune_t v82 = (void *)(v81 & 0xFFFFFFFFFFFFFFFCLL);
              if (v81) {
                __darwin_ct_rune_t v82 = (void *)*v82;
              }
            }
            if (v78 == v82) {
              a8 = sub_13F0408(v74, v72);
            }
            else {
              sub_13F0358(v74, v72);
            }
          }
          v72 += 112;
          ++a1;
          if (v70 == v72) {
            goto LABEL_109;
          }
        }
        else
        {
          if (v74 != v73)
          {
            uint64_t v75 = *(void *)(v74 + 8);
            if ((v75 & 2) != 0)
            {
              uint64_t v76 = 0;
            }
            else
            {
              uint64_t v76 = (void *)(v75 & 0xFFFFFFFFFFFFFFFCLL);
              if (v75) {
                uint64_t v76 = (void *)*v76;
              }
            }
            uint64_t v79 = *(void *)(v73 + 8);
            if ((v79 & 2) != 0)
            {
              uint64_t v80 = 0;
            }
            else
            {
              uint64_t v80 = (void *)(v79 & 0xFFFFFFFFFFFFFFFCLL);
              if (v79) {
                uint64_t v80 = (void *)*v80;
              }
            }
            if (v76 == v80) {
              a8 = sub_13F0408(v74, v73);
            }
            else {
              sub_13F0358(v74, v73);
            }
          }
          ++v67;
          ++a1;
          if (v70 == v72) {
            goto LABEL_109;
          }
        }
      }
      do
      {
        uint64_t v84 = *a1;
        if (v72 != *a1)
        {
          uint64_t v85 = *(void *)(v84 + 8);
          if ((v85 & 2) != 0)
          {
            uint64_t v86 = 0;
          }
          else
          {
            uint64_t v86 = (void *)(v85 & 0xFFFFFFFFFFFFFFFCLL);
            if (v85) {
              uint64_t v86 = (void *)*v86;
            }
          }
          uint64_t v87 = *(void *)(v72 + 8);
          if ((v87 & 2) != 0)
          {
            int v88 = 0;
          }
          else
          {
            int v88 = (void *)(v87 & 0xFFFFFFFFFFFFFFFCLL);
            if (v87) {
              int v88 = (void *)*v88;
            }
          }
          if (v86 == v88) {
            a8 = sub_13F0408(v84, v72);
          }
          else {
            sub_13F0358(v84, v72);
          }
        }
        ++a1;
        BOOL v83 = v71 == v72;
        v72 += 112;
      }
      while (!v83);
    }
  }
  else
  {
    if (a3 == a2) {
      return a8.n128_f64[0];
    }
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    uint64_t v48 = a2;
    uint64_t v49 = a2;
    do
    {
      uint64_t v50 = *v49++;
      sub_DF758C(a6 + v46, v50);
      ++v47;
      v46 += 112;
    }
    while (v49 != a3);
    if (v46)
    {
      uint64_t v51 = a6 + v46;
      while (v48 != a1)
      {
        uint64_t v52 = v48;
        uint64_t v54 = *--v48;
        uint64_t v53 = v54;
        unsigned int v55 = *(_DWORD *)(v54 + 72);
        uint64_t v57 = *--a3;
        uint64_t v56 = v57;
        if (*(_DWORD *)(v51 - 40) >= v55)
        {
          if (v56 == v51 - 112)
          {
            uint64_t v48 = v52;
            v51 -= 112;
          }
          else
          {
            uint64_t v60 = *(void *)(v56 + 8);
            if ((v60 & 2) != 0)
            {
              unint64_t v61 = 0;
            }
            else
            {
              unint64_t v61 = (void *)(v60 & 0xFFFFFFFFFFFFFFFCLL);
              if (v60) {
                unint64_t v61 = (void *)*v61;
              }
            }
            uint64_t v64 = *(void *)(v51 - 104);
            if ((v64 & 2) != 0)
            {
              unint64_t v65 = 0;
            }
            else
            {
              unint64_t v65 = (void *)(v64 & 0xFFFFFFFFFFFFFFFCLL);
              if (v64) {
                unint64_t v65 = (void *)*v65;
              }
            }
            if (v61 == v65) {
              a8 = sub_13F0408(v56, v51 - 112);
            }
            else {
              sub_13F0358(v56, v51 - 112);
            }
            uint64_t v48 = v52;
            v51 -= 112;
          }
        }
        else if (v56 != v53)
        {
          uint64_t v58 = *(void *)(v56 + 8);
          if ((v58 & 2) != 0)
          {
            uint64_t v59 = 0;
          }
          else
          {
            uint64_t v59 = (void *)(v58 & 0xFFFFFFFFFFFFFFFCLL);
            if (v58) {
              uint64_t v59 = (void *)*v59;
            }
          }
          uint64_t v62 = *(void *)(v53 + 8);
          if ((v62 & 2) != 0)
          {
            uint64_t v63 = 0;
          }
          else
          {
            uint64_t v63 = (void *)(v62 & 0xFFFFFFFFFFFFFFFCLL);
            if (v62) {
              uint64_t v63 = (void *)*v63;
            }
          }
          if (v59 == v63) {
            a8 = sub_13F0408(v56, v53);
          }
          else {
            sub_13F0358(v56, v53);
          }
        }
        if (v51 == a6) {
          goto LABEL_109;
        }
      }
      uint64_t v91 = v51 - 112;
      uint64_t v92 = 0x1FFFFFFFFFFFFFFFLL;
      do
      {
        uint64_t v93 = a3[v92];
        if (v91 != v93)
        {
          uint64_t v94 = *(void *)(v93 + 8);
          if ((v94 & 2) != 0)
          {
            uint64_t v95 = 0;
          }
          else
          {
            uint64_t v95 = (void *)(v94 & 0xFFFFFFFFFFFFFFFCLL);
            if (v94) {
              uint64_t v95 = (void *)*v95;
            }
          }
          uint64_t v96 = *(void *)(v91 + 8);
          if ((v96 & 2) != 0)
          {
            int v97 = 0;
          }
          else
          {
            int v97 = (void *)(v96 & 0xFFFFFFFFFFFFFFFCLL);
            if (v96) {
              int v97 = (void *)*v97;
            }
          }
          if (v95 == v97) {
            a8 = sub_13F0408(v93, v91);
          }
          else {
            sub_13F0358(v93, v91);
          }
        }
        --v92;
        BOOL v83 = v91 == a6;
        v91 -= 112;
      }
      while (!v83);
    }
  }
LABEL_109:
  if (a6 && v47)
  {
    do
    {
      sub_13EEE64(a6, a8);
      a6 += 112;
      --v47;
    }
    while (v47);
  }
  return a8.n128_f64[0];
}

double sub_DF8D88()
{
  byte_25EBD2F = 1;
  word_25EBD18 = 65;
  byte_25EBD47 = 1;
  word_25EBD30 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25EBDD8 = 0u;
  *(_OWORD *)&qword_25EBDE8 = 0u;
  dword_25EBDF8 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25EBDD8, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25EBDD8, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25EBDD8, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25EBDD8, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25EBD5F = 8;
  strcpy((char *)&qword_25EBD48, "any_mode");
  byte_25EBD77 = 7;
  strcpy((char *)&dword_25EBD60, "cycling");
  byte_25EBD8F = 7;
  strcpy((char *)&dword_25EBD78, "driving");
  byte_25EBDA7 = 7;
  strcpy((char *)&dword_25EBD90, "walking");
  qword_25EBDB0 = 0;
  qword_25EBDB8 = 0;
  qword_25EBDA8 = 0;
  v0 = operator new(9uLL);
  *(void *)v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25EBDA8 = (uint64_t)v0;
  qword_25EBDB0 = (uint64_t)(v0 + 9);
  qword_25EBDB8 = (uint64_t)(v0 + 9);
  qword_25EBDC0 = 0;
  qword_25EBDC8 = 0;
  unk_25EBDD0 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25EBDC8 = (uint64_t)(v1 + 9);
  unk_25EBDD0 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25EBDC0 = (uint64_t)v1;
  return result;
}

void sub_DF9050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25EBDE8) {
    sub_20B0B1C((void **)qword_25EBDE8);
  }
  uint64_t v37 = (void *)xmmword_25EBDD8;
  *(void *)&xmmword_25EBDD8 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_DF90F0()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = (const std::error_condition *)v5;
  int v8 = v7;
  uint64_t v9 = (uint64_t *)v0;
  int v10 = *(_DWORD *)(v5 + 40);
  int v11 = sub_69510();
  cat = (void (***)(std::error_category *__hidden))v6->__cat_;
  BOOL v13 = sub_723EC(3u);
  if (cat != &off_2439090)
  {
    if (v13)
    {
      sub_6BAC((uint64_t)&v276);
      LODWORD(v125.__r_.__value_.__l.__data_) = sub_69124((uint64_t)v11);
      sub_677F0((unsigned int *)&v125, (uint64_t)__p);
      if (__p[23] >= 0) {
        int v14 = __p;
      }
      else {
        int v14 = *(unsigned char **)__p;
      }
      if (__p[23] >= 0) {
        uint64_t v15 = __p[23];
      }
      else {
        uint64_t v15 = *(void *)&__p[8];
      }
      uint64_t v16 = sub_188FC78(&v276, (uint64_t)v14, v15);
      sub_188FC78(v16, (uint64_t)" failed (ErrorCode: ", 20);
      uint64_t v17 = (void *)std::ostream::operator<<();
      uint64_t v18 = sub_188FC78(v17, (uint64_t)"): ", 3);
      uint64_t v19 = sub_68EE4((uint64_t)v11);
      int v20 = *(char *)(v19 + 23);
      if (v20 >= 0) {
        uint64_t v21 = v19;
      }
      else {
        uint64_t v21 = *(void *)v19;
      }
      if (v20 >= 0) {
        uint64_t v22 = *(unsigned __int8 *)(v19 + 23);
      }
      else {
        uint64_t v22 = *(void *)(v19 + 8);
      }
      sub_188FC78(v18, v21, v22);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 3u);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if (v279 < 0) {
        operator delete(v278);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    int val = v6->__val_;
    *(_DWORD *)(v2 + 40) |= 0x100000u;
    *(_DWORD *)(v2 + 536) = val;
    return;
  }
  if (!v13) {
    goto LABEL_50;
  }
  sub_6BAC((uint64_t)&v276);
  LODWORD(v128) = sub_69124((uint64_t)v11);
  sub_677F0((unsigned int *)&v128, (uint64_t)__p);
  if (__p[23] >= 0) {
    unint64_t v24 = __p;
  }
  else {
    unint64_t v24 = *(unsigned char **)__p;
  }
  if (__p[23] >= 0) {
    uint64_t v25 = __p[23];
  }
  else {
    uint64_t v25 = *(void *)&__p[8];
  }
  uint64_t v26 = sub_188FC78(&v276, (uint64_t)v24, v25);
  unint64_t v27 = sub_188FC78(v26, (uint64_t)" failed (SubError: ", 19);
  std::error_condition::message(&v125, v6);
  if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v28 = &v125;
  }
  else {
    uint64_t v28 = (std::string *)v125.__r_.__value_.__r.__words[0];
  }
  if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v125.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v125.__r_.__value_.__l.__size_;
  }
  uint64_t v30 = sub_188FC78(v27, (uint64_t)v28, size);
  uint64_t v31 = sub_188FC78(v30, (uint64_t)"): ", 3);
  uint64_t v32 = sub_68EE4((uint64_t)v11);
  int v33 = *(char *)(v32 + 23);
  if (v33 >= 0) {
    uint64_t v34 = v32;
  }
  else {
    uint64_t v34 = *(void *)v32;
  }
  if (v33 >= 0) {
    uint64_t v35 = *(unsigned __int8 *)(v32 + 23);
  }
  else {
    uint64_t v35 = *(void *)(v32 + 8);
  }
  sub_188FC78(v31, v34, v35);
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v125.__r_.__value_.__l.__data_);
    if ((__p[23] & 0x80000000) == 0) {
      goto LABEL_45;
    }
LABEL_70:
    operator delete(*(void **)__p);
    goto LABEL_45;
  }
  if ((__p[23] & 0x80000000) != 0) {
    goto LABEL_70;
  }
LABEL_45:
  std::stringbuf::str();
  sub_7246C((uint64_t *)__p, 3u);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if (v279 < 0) {
    operator delete(v278);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
LABEL_50:
  unint64_t v36 = (uint64_t *)sub_374EF4(v9);
  int v37 = *(_DWORD *)(v4 + 60);
  sub_688A04(v36, 1u, v37, &v282);
  sub_688A04(v36, 3u, v37, &v280);
  uint64_t v274 = v280;
  v275 = v281;
  if (v281) {
    atomic_fetch_add_explicit(&v281->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v273 = 0u;
  bzero(__p, 0x7F8uLL);
  *(int64x2_t *)&__p[8] = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  long long v132 = *(_OWORD *)&__p[8];
  long long v133 = *(_OWORD *)&__p[8];
  long long v134 = *(_OWORD *)&__p[8];
  long long v135 = *(_OWORD *)&__p[8];
  long long v136 = *(_OWORD *)&__p[8];
  long long v137 = *(_OWORD *)&__p[8];
  long long v138 = *(_OWORD *)&__p[8];
  uint64_t v139 = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)&long long v38 = 0x8000000080000000;
  *((void *)&v38 + 1) = 0x8000000080000000;
  long long v140 = v38;
  long long v141 = v38;
  long long v142 = v38;
  long long v143 = v38;
  int v144 = 0x7FFFFFFF;
  long long v145 = *(_OWORD *)&__p[8];
  long long v146 = *(_OWORD *)&__p[8];
  long long v147 = v38;
  long long v148 = v38;
  unint64_t v149 = 0x8000000080000000;
  long long v150 = *(_OWORD *)&__p[8];
  long long v151 = *(_OWORD *)&__p[8];
  long long v152 = *(_OWORD *)&__p[8];
  long long v153 = *(_OWORD *)&__p[8];
  long long v154 = *(_OWORD *)&__p[8];
  long long v155 = *(_OWORD *)&__p[8];
  long long v156 = *(_OWORD *)&__p[8];
  long long v157 = *(_OWORD *)&__p[8];
  long long v158 = 0u;
  long long v159 = *(_OWORD *)&__p[8];
  long long v160 = *(_OWORD *)&__p[8];
  long long v161 = *(_OWORD *)&__p[8];
  long long v162 = *(_OWORD *)&__p[8];
  long long v163 = *(_OWORD *)&__p[8];
  long long v164 = *(_OWORD *)&__p[8];
  long long v165 = *(_OWORD *)&__p[8];
  long long v166 = *(_OWORD *)&__p[8];
  long long v167 = *(_OWORD *)&__p[8];
  long long v168 = *(_OWORD *)&__p[8];
  long long v169 = *(_OWORD *)&__p[8];
  long long v170 = *(_OWORD *)&__p[8];
  long long v171 = *(_OWORD *)&__p[8];
  long long v172 = *(_OWORD *)&__p[8];
  long long v173 = *(_OWORD *)&__p[8];
  long long v174 = *(_OWORD *)&__p[8];
  long long v175 = *(_OWORD *)&__p[8];
  long long v176 = *(_OWORD *)&__p[8];
  long long v177 = *(_OWORD *)&__p[8];
  long long v178 = *(_OWORD *)&__p[8];
  long long v179 = *(_OWORD *)&__p[8];
  long long v180 = *(_OWORD *)&__p[8];
  long long v181 = *(_OWORD *)&__p[8];
  long long v182 = *(_OWORD *)&__p[8];
  long long v183 = *(_OWORD *)&__p[8];
  long long v184 = *(_OWORD *)&__p[8];
  long long v185 = *(_OWORD *)&__p[8];
  long long v186 = *(_OWORD *)&__p[8];
  long long v187 = *(_OWORD *)&__p[8];
  long long v188 = *(_OWORD *)&__p[8];
  long long v189 = *(_OWORD *)&__p[8];
  long long v190 = *(_OWORD *)&__p[8];
  long long v191 = *(_OWORD *)&__p[8];
  long long v192 = *(_OWORD *)&__p[8];
  long long v193 = *(_OWORD *)&__p[8];
  long long v194 = *(_OWORD *)&__p[8];
  long long v195 = *(_OWORD *)&__p[8];
  long long v196 = *(_OWORD *)&__p[8];
  long long v197 = *(_OWORD *)&__p[8];
  long long v198 = *(_OWORD *)&__p[8];
  long long v199 = *(_OWORD *)&__p[8];
  long long v200 = *(_OWORD *)&__p[8];
  long long v201 = *(_OWORD *)&__p[8];
  long long v202 = *(_OWORD *)&__p[8];
  long long v203 = *(_OWORD *)&__p[8];
  long long v204 = *(_OWORD *)&__p[8];
  long long v205 = *(_OWORD *)&__p[8];
  long long v206 = *(_OWORD *)&__p[8];
  long long v207 = *(_OWORD *)&__p[8];
  long long v208 = *(_OWORD *)&__p[8];
  long long v209 = *(_OWORD *)&__p[8];
  long long v210 = *(_OWORD *)&__p[8];
  uint64_t v211 = 0x7FFFFFFFFFFFFFFFLL;
  char v212 = 0;
  long long v213 = *(_OWORD *)&__p[8];
  long long v214 = *(_OWORD *)&__p[8];
  long long v215 = *(_OWORD *)&__p[8];
  long long v216 = *(_OWORD *)&__p[8];
  long long v217 = *(_OWORD *)&__p[8];
  long long v218 = *(_OWORD *)&__p[8];
  long long v219 = *(_OWORD *)&__p[8];
  long long v220 = *(_OWORD *)&__p[8];
  long long v221 = *(_OWORD *)&__p[8];
  long long v222 = *(_OWORD *)&__p[8];
  long long v223 = *(_OWORD *)&__p[8];
  long long v224 = *(_OWORD *)&__p[8];
  uint64_t v225 = 0;
  uint64_t v226 = 0x7FFFFFFFFFFFFFFFLL;
  char v227 = 0;
  uint64_t v228 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v229 = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)&long long v38 = -1;
  *((void *)&v38 + 1) = -1;
  long long v231 = v38;
  long long v232 = v38;
  long long v230 = v38;
  uint64_t v233 = -1;
  char v234 = 0;
  uint64_t v235 = 0x7FFFFFFFFFFFFFFFLL;
  long long v236 = *(_OWORD *)&__p[8];
  uint64_t v237 = 0x7FFFFFFFFFFFFFFFLL;
  char v238 = 0;
  int v239 = 0x7FFFFFFF;
  uint64_t v240 = 0;
  __int16 v241 = 0;
  long long v242 = *(_OWORD *)&__p[8];
  long long v243 = *(_OWORD *)&__p[8];
  long long v244 = *(_OWORD *)&__p[8];
  long long v245 = *(_OWORD *)&__p[8];
  long long v246 = *(_OWORD *)&__p[8];
  long long v247 = *(_OWORD *)&__p[8];
  long long v248 = *(_OWORD *)&__p[8];
  long long v249 = *(_OWORD *)&__p[8];
  long long v250 = *(_OWORD *)&__p[8];
  long long v251 = *(_OWORD *)&__p[8];
  long long v252 = *(_OWORD *)&__p[8];
  long long v253 = *(_OWORD *)&__p[8];
  long long v254 = *(_OWORD *)&__p[8];
  long long v255 = *(_OWORD *)&__p[8];
  memset(v256, 0, sizeof(v256));
  uint64_t v257 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v258 = 0x7FFFFFFFFFFFFFFFLL;
  int v259 = 0;
  *(void *)((char *)v261 + 5) = 0;
  v261[0] = 0;
  *(_OWORD *)v260 = 0u;
  long long v262 = *(_OWORD *)&__p[8];
  long long v263 = *(_OWORD *)&__p[8];
  char v264 = 1;
  uint64_t v265 = 0;
  char v266 = 0;
  uint64_t v267 = 0x7FFFFFFFFFFFFFFFLL;
  char v268 = 0;
  uint64_t v269 = 0x7FFFFFFFFFFFFFFFLL;
  long long v270 = 0u;
  __int16 v272 = 0;
  uint64_t v271 = 0;
  sub_60DF7C((uint64_t)&v276, &v274, &v273, __p, v4);
  if (SHIBYTE(v261[0]) < 0) {
    operator delete(v260[0]);
  }
  uint64_t v39 = (std::__shared_weak_count *)*((void *)&v273 + 1);
  if (*((void *)&v273 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v273 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  uint64_t v40 = v275;
  if (v275 && !atomic_fetch_add(&v275->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  uint64_t v128 = 0;
  uint64_t v129 = 0;
  unint64_t v130 = 0;
  sub_13CBA58(&v125, 0, 0);
  unsigned int v41 = v6->__val_;
  int v42 = sub_E12498(v6->__val_);
  *(_DWORD *)(v2 + 40) |= 0x100000u;
  *(_DWORD *)(v2 + 536) = v42;
  int v43 = sub_DFBA48(v41);
  if (v43)
  {
    switch(v8)
    {
      case 0:
        int v44 = sub_DFEA24(v41);
        if (v44) {
          uint64_t v45 = "titleEV";
        }
        else {
          uint64_t v45 = "titleGeneric";
        }
        if (v44) {
          size_t v46 = 7;
        }
        else {
          size_t v46 = 12;
        }
        __dst[23] = v46;
        memcpy(__dst, v45, v46);
        __dst[v46] = 0;
        goto LABEL_78;
      case 1:
        __dst[23] = 12;
        *(_DWORD *)&__dst[8] = 1953067886;
        uint64_t v47 = "titleTransit";
        goto LABEL_77;
      case 2:
        __dst[23] = 12;
        *(_DWORD *)&__dst[8] = 1735289195;
        uint64_t v47 = "titleWalking";
        goto LABEL_77;
      case 3:
        if (sub_DFE824(v41))
        {
          __dst[23] = 21;
          strcpy(__dst, "titleNoRouteAvailable");
        }
        else
        {
          __dst[23] = 12;
          *(_DWORD *)&__dst[8] = 1735289196;
          uint64_t v47 = "titleCycling";
LABEL_77:
          *(void *)long long __dst = *(void *)v47;
          __dst[12] = 0;
        }
LABEL_78:
        uint64_t v48 = sub_8D7730(v282, (uint64_t)__dst);
        if (*((char *)v48 + 23) < 0)
        {
          sub_4200(v122, (void *)*v48, v48[1]);
        }
        else
        {
          long long v49 = *(_OWORD *)v48;
          uint64_t v123 = v48[2];
          *(_OWORD *)uint64_t v122 = v49;
        }
        LODWORD(v125.__r_.__value_.__r.__words[2]) |= 1u;
        uint64_t v50 = (uint64_t *)(v125.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFFCLL);
        if (v125.__r_.__value_.__s.__data_[8]) {
          uint64_t v50 = (uint64_t *)*v50;
        }
        sub_1881DF4(&v126, (long long *)v122, v50);
        sub_5F3B34((uint64_t)__p);
        sub_5F41E8((uint64_t)__p, (uint64_t)v122);
        LODWORD(v125.__r_.__value_.__r.__words[2]) |= 4u;
        uint64_t v51 = v127;
        if (!v127)
        {
          uint64_t v52 = (void *)(v125.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFFCLL);
          if (v125.__r_.__value_.__s.__data_[8]) {
            uint64_t v52 = (void *)*v52;
          }
          sub_13D6A1C((uint64_t)v52);
          uint64_t v51 = v53;
          uint64_t v127 = v53;
        }
        sub_5F4D30((const std::string **)__p, v51);
        sub_4D4B58((uint64_t)__p);
        if (SHIBYTE(v123) < 0)
        {
          operator delete(v122[0]);
          if ((__dst[23] & 0x80000000) == 0) {
            break;
          }
        }
        else if ((__dst[23] & 0x80000000) == 0)
        {
          break;
        }
        operator delete(*(void **)__dst);
        break;
      default:
        __dst[23] = 12;
        *(_DWORD *)&__dst[8] = 1667854949;
        uint64_t v47 = "titleGeneric";
        goto LABEL_77;
    }
  }
  int v54 = *(unsigned __int8 *)(v4 + 164);
  int v55 = *(unsigned __int8 *)(v4 + 165);
  if (v10 == -1) {
    int v56 = 0x7FFFFFFF;
  }
  else {
    int v56 = v10;
  }
  if (*(unsigned char *)(v4 + 165)) {
    BOOL v57 = *(unsigned char *)(v4 + 36) == 0;
  }
  else {
    BOOL v57 = 1;
  }
  int v58 = !v57;
  int v120 = v58;
  char v121 = v43;
  int v59 = v58 ^ 1;
  if (*(unsigned char *)(v4 + 164)) {
    int v60 = v59;
  }
  else {
    int v60 = 1;
  }
  if (v60) {
    uint64_t v61 = 450;
  }
  else {
    uint64_t v61 = 453;
  }
  if (v60) {
    uint64_t v62 = &qword_25EFBE8;
  }
  else {
    uint64_t v62 = &qword_25EFC00;
  }
  switch(v41)
  {
    case 0u:
    case 0x2Bu:
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)__p);
        sub_188FC78(__p, (uint64_t)"Unexpected error code", 21);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__dst, 3u);
        if ((__dst[23] & 0x80000000) != 0) {
          operator delete(*(void **)__dst);
        }
        sub_111ECAC((uint64_t)__p);
      }
      exception = __cxa_allocate_exception(0x40uLL);
      sub_5E5C(__p, "ResponseBuilderErrorHandlingModule has unexpected ErrorCode");
      int v119 = (void *)sub_2F404((uint64_t)exception, (long long *)__p);
    case 1u:
    case 6u:
    case 7u:
      __p[23] = 18;
      strcpy(__p, "messageBadResponse");
      uint64_t v63 = 21;
      if (!v54) {
        uint64_t v63 = 0;
      }
      __dst[23] = v63;
      if (v54) {
        qmemcpy(__dst, "messageMprBadResponse", 21);
      }
      __dst[v63] = 0;
      sub_DFBD10(&v282, (uint64_t)&v276, (uint64_t)__p, (uint64_t)__dst, 0x7FFFFFFFu, v120, (uint64_t)&v125);
      goto LABEL_329;
    case 2u:
    case 5u:
      sub_13C08C8((uint64_t)__p, 0, 0);
      *(_DWORD *)&__p[16] |= 1u;
      LODWORD(v132) = 16;
      if ((unint64_t)v129 >= v130) {
        uint64_t v66 = sub_E00774((std::string **)&v128, (uint64_t)__p);
      }
      else {
        uint64_t v66 = (std::string *)((char *)sub_E00894(v129, (uint64_t)__p) + 32);
      }
      uint64_t v129 = v66;
      sub_13C0970(__p);
      if (v54 && v55)
      {
        uint64_t v90 = 453;
        if (v60) {
          uint64_t v90 = 450;
        }
        if (SHIBYTE(qword_25EEDD8[v90 + 2]) < 0)
        {
          uint64_t v98 = 453;
          if (v60) {
            uint64_t v98 = 450;
          }
          sub_4200(__p, (void *)qword_25EEDD8[v61], qword_25EEDD8[v98 + 1]);
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)v62;
          *(void *)&__p[16] = v62[2];
        }
      }
      else
      {
        sub_5E5C(__p, "");
      }
      __dst[23] = 7;
      strcpy(__dst, "titleEV");
      sub_DFBD10(&v282, (uint64_t)&v276, (uint64_t)__dst, (uint64_t)__p, 0x7FFFFFFFu, v120, (uint64_t)&v125);
      goto LABEL_329;
    case 3u:
      if (!v54 || !v55)
      {
        if (v54) {
          uint64_t v93 = "messageMprBadResponse";
        }
        else {
          uint64_t v93 = "";
        }
        sub_5E5C(__p, v93);
        int v72 = v120;
        goto LABEL_324;
      }
      int v72 = v120;
      uint64_t v82 = 450;
      if (v120) {
        uint64_t v82 = 453;
      }
      if ((SHIBYTE(qword_25EEDD8[v82 + 2]) & 0x80000000) == 0)
      {
        *(_OWORD *)__p = *(_OWORD *)v62;
        *(void *)&__p[16] = v62[2];
        goto LABEL_324;
      }
      uint64_t v103 = 450;
      if (v120) {
        uint64_t v103 = 453;
      }
      goto LABEL_323;
    case 4u:
      sub_DFBCB4(22, 0x7FFFFFFF, (uint64_t)__p);
      sub_DFBC58((uint64_t)&v128, (uint64_t)__p);
      sub_13C0970(__p);
      sub_5E5C(__p, "messageBadResponse");
      if (v54) {
        uint64_t v79 = "messageMprBadResponse";
      }
      else {
        uint64_t v79 = "";
      }
      sub_5E5C(__dst, v79);
      sub_DFBD10(&v282, (uint64_t)&v276, (uint64_t)__p, (uint64_t)__dst, 0x7FFFFFFFu, v120, (uint64_t)&v125);
      goto LABEL_329;
    case 8u:
      sub_DFBCB4(20, 0x7FFFFFFF, (uint64_t)__p);
      sub_DFBC58((uint64_t)&v128, (uint64_t)__p);
      goto LABEL_165;
    case 9u:
      sub_DFBCB4(21, 0x7FFFFFFF, (uint64_t)__p);
      sub_DFBC58((uint64_t)&v128, (uint64_t)__p);
      sub_13C0970(__p);
      sub_5E5C(__p, "messageGeneric");
      sub_5E5C(__dst, "");
      sub_DFBD10(&v282, (uint64_t)&v276, (uint64_t)__p, (uint64_t)__dst, 0x7FFFFFFFu, v120, (uint64_t)&v125);
      goto LABEL_329;
    case 0xAu:
      sub_DFBCB4(13, 0x7FFFFFFF, (uint64_t)__p);
      sub_DFBC58((uint64_t)&v128, (uint64_t)__p);
      sub_13C0970(__p);
      int v72 = v120;
      if (!v54 || !v55)
      {
        if (v54) {
          uint64_t v94 = "messageMprBadResponse";
        }
        else {
          uint64_t v94 = "";
        }
        goto LABEL_273;
      }
      uint64_t v86 = 450;
      if (v120) {
        uint64_t v86 = 453;
      }
      if ((SHIBYTE(qword_25EEDD8[v86 + 2]) & 0x80000000) == 0)
      {
        *(_OWORD *)__p = *(_OWORD *)v62;
        *(void *)&__p[16] = v62[2];
        goto LABEL_324;
      }
      uint64_t v103 = 450;
      if (v120) {
        uint64_t v103 = 453;
      }
      goto LABEL_323;
    case 0xBu:
      if (v54) {
        uint64_t v75 = "messageMprBadResponse";
      }
      else {
        uint64_t v75 = "";
      }
      sub_DFBCB4(8, 0x7FFFFFFF, (uint64_t)__p);
      sub_DFBC58((uint64_t)&v128, (uint64_t)__p);
      sub_13C0970(__p);
      sub_5E5C(__p, "messageGeneric");
      sub_5E5C(__dst, v75);
      sub_DFBD10(&v282, (uint64_t)&v276, (uint64_t)__p, (uint64_t)__dst, 0x7FFFFFFFu, v120, (uint64_t)&v125);
      goto LABEL_329;
    case 0xCu:
      sub_DFBCB4(10, 0x7FFFFFFF, (uint64_t)__p);
      sub_DFBC58((uint64_t)&v128, (uint64_t)__p);
      sub_13C0970(__p);
      sub_5E5C(__p, "messageBlockedRoads");
      sub_5E5C(__dst, "");
      sub_DFBD10(&v282, (uint64_t)&v276, (uint64_t)__p, (uint64_t)__dst, 0x7FFFFFFFu, v120, (uint64_t)&v125);
      goto LABEL_329;
    case 0xDu:
      sub_DFBCB4(9, 0x7FFFFFFF, (uint64_t)__p);
      sub_DFBC58((uint64_t)&v128, (uint64_t)__p);
      sub_13C0970(__p);
      sub_5E5C(__p, "messageWalkingTooFar");
      sub_5E5C(__dst, "");
      sub_DFBD10(&v282, (uint64_t)&v276, (uint64_t)__p, (uint64_t)__dst, 0x7FFFFFFFu, v120, (uint64_t)&v125);
      goto LABEL_329;
    case 0xEu:
      if (v54 && v55)
      {
        uint64_t v71 = 453;
        if (v60) {
          uint64_t v71 = 450;
        }
        if (SHIBYTE(qword_25EEDD8[v71 + 2]) < 0)
        {
          uint64_t v101 = 453;
          if (v60) {
            uint64_t v101 = 450;
          }
          sub_4200(__dst, (void *)qword_25EEDD8[v61], qword_25EEDD8[v101 + 1]);
        }
        else
        {
          *(_OWORD *)long long __dst = *(_OWORD *)v62;
          *(void *)&__dst[16] = v62[2];
        }
      }
      else
      {
        sub_5E5C(__dst, "");
      }
      sub_DFBCB4(15, 0x7FFFFFFF, (uint64_t)__p);
      sub_DFBC58((uint64_t)&v128, (uint64_t)__p);
      sub_13C0970(__p);
      sub_5E5C(__p, "titleEVNotEnoughInitialBattery");
      sub_DFBD10(&v282, (uint64_t)&v276, (uint64_t)__p, (uint64_t)__dst, v56, v120, (uint64_t)&v125);
      goto LABEL_300;
    case 0xFu:
      unsigned int v68 = v56;
      sub_DFBCB4(18, v56, (uint64_t)__p);
      sub_DFBC58((uint64_t)&v128, (uint64_t)__p);
      sub_13C0970(__p);
      int v69 = v120;
      if (!v54 || !v55)
      {
        if (v54) {
          uint64_t v95 = "messageMprBadResponse";
        }
        else {
          uint64_t v95 = "";
        }
        goto LABEL_283;
      }
      uint64_t v70 = 450;
      if (v120) {
        uint64_t v70 = 453;
      }
      if ((SHIBYTE(qword_25EEDD8[v70 + 2]) & 0x80000000) == 0)
      {
        *(_OWORD *)__p = *(_OWORD *)v62;
        *(void *)&__p[16] = v62[2];
        goto LABEL_328;
      }
      uint64_t v104 = 450;
      if (v120) {
        uint64_t v104 = 453;
      }
      goto LABEL_327;
    case 0x10u:
      unsigned int v68 = v56;
      sub_DFBCB4(3, v56, (uint64_t)__p);
      sub_DFBC58((uint64_t)&v128, (uint64_t)__p);
      sub_13C0970(__p);
      int v69 = v120;
      if (v8 == 3)
      {
        sub_5E5C(__p, "messageCyclingOutOfCoverage");
        sub_5E5C(__dst, "");
        sub_DFBD10(&v282, (uint64_t)&v276, (uint64_t)__p, (uint64_t)__dst, 0x7FFFFFFFu, v120, (uint64_t)&v125);
      }
      else
      {
        if (v54 && v55)
        {
          uint64_t v97 = 450;
          if (v120) {
            uint64_t v97 = 453;
          }
          if (SHIBYTE(qword_25EEDD8[v97 + 2]) < 0)
          {
            uint64_t v104 = 450;
            if (v120) {
              uint64_t v104 = 453;
            }
LABEL_327:
            sub_4200(__p, (void *)qword_25EEDD8[v61], qword_25EEDD8[v104 + 1]);
          }
          else
          {
            *(_OWORD *)__p = *(_OWORD *)v62;
            *(void *)&__p[16] = v62[2];
          }
        }
        else
        {
          if (v54) {
            uint64_t v95 = "messageMprBadResponse";
          }
          else {
            uint64_t v95 = "";
          }
LABEL_283:
          sub_5E5C(__p, v95);
        }
LABEL_328:
        sub_5E5C(__dst, "messageGeneric");
        sub_DFBD10(&v282, (uint64_t)&v276, (uint64_t)__dst, (uint64_t)__p, v68, v69, (uint64_t)&v125);
      }
      goto LABEL_329;
    case 0x11u:
    case 0x12u:
      sub_13C08C8((uint64_t)__p, 0, 0);
      *(_DWORD *)&__p[16] |= 3u;
      *(void *)&long long v132 = 3;
      if ((unint64_t)v129 >= v130) {
        unint64_t v67 = sub_E00774((std::string **)&v128, (uint64_t)__p);
      }
      else {
        unint64_t v67 = (std::string *)((char *)sub_E00894(v129, (uint64_t)__p) + 32);
      }
      uint64_t v129 = v67;
      sub_13C0970(__p);
      sub_13C08C8((uint64_t)__p, 0, 0);
      *(_DWORD *)&__p[16] |= 3u;
      *(void *)&long long v132 = 0x100000003;
      if ((unint64_t)v129 >= v130) {
        uint64_t v91 = sub_E00774((std::string **)&v128, (uint64_t)__p);
      }
      else {
        uint64_t v91 = (std::string *)((char *)sub_E00894(v129, (uint64_t)__p) + 32);
      }
      uint64_t v129 = v91;
      sub_13C0970(__p);
      *(void *)__p = operator new(0x20uLL);
      *(_OWORD *)&__p[8] = xmmword_20B91A0;
      strcpy(*(char **)__p, "messageTransitOutOfCoverage");
      __dst[23] = 0;
      __dst[0] = 0;
      sub_DFBD10(&v282, (uint64_t)&v276, (uint64_t)__p, (uint64_t)__dst, 0x7FFFFFFFu, v120, (uint64_t)&v125);
      goto LABEL_329;
    case 0x13u:
      sub_DFBCB4(14, v56, (uint64_t)__p);
      sub_DFBC58((uint64_t)&v128, (uint64_t)__p);
      sub_13C0970(__p);
      if (v54)
      {
        uint64_t v83 = 450;
        if (v120) {
          uint64_t v83 = 453;
        }
        if (SHIBYTE(qword_25EEDD8[v83 + 2]) < 0)
        {
          uint64_t v99 = 450;
          if (v120) {
            uint64_t v99 = 453;
          }
          sub_4200(__p, (void *)qword_25EEDD8[v61], qword_25EEDD8[v99 + 1]);
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)v62;
          *(void *)&__p[16] = v62[2];
        }
      }
      else
      {
        sub_5E5C(__p, "");
      }
      sub_5E5C(__dst, "messageEVOutOfCoverage");
      sub_DFBD10(&v282, (uint64_t)&v276, (uint64_t)__dst, (uint64_t)__p, v56, v120, (uint64_t)&v125);
      goto LABEL_329;
    case 0x14u:
      if (v8 == 2)
      {
        sub_DFBCB4(4, 0x7FFFFFFF, (uint64_t)__p);
        sub_DFBC58((uint64_t)&v128, (uint64_t)__p);
        sub_13C0970(__p);
      }
      int v72 = v120;
      if (!v54 || !v55)
      {
        if (v54) {
          uint64_t v94 = "messageMprBadResponse";
        }
        else {
          uint64_t v94 = "";
        }
        goto LABEL_273;
      }
      uint64_t v87 = 450;
      if (v120) {
        uint64_t v87 = 453;
      }
      if ((SHIBYTE(qword_25EEDD8[v87 + 2]) & 0x80000000) == 0)
      {
        *(_OWORD *)__p = *(_OWORD *)v62;
        *(void *)&__p[16] = v62[2];
        goto LABEL_324;
      }
      uint64_t v103 = 450;
      if (v120) {
        uint64_t v103 = 453;
      }
      goto LABEL_323;
    case 0x15u:
      if (v54 && v55)
      {
        int v80 = v120;
        uint64_t v81 = 450;
        if (v120) {
          uint64_t v81 = 453;
        }
        if (SHIBYTE(qword_25EEDD8[v81 + 2]) < 0)
        {
          uint64_t v102 = 450;
          if (v120) {
            uint64_t v102 = 453;
          }
          sub_4200(__dst, (void *)qword_25EEDD8[v61], qword_25EEDD8[v102 + 1]);
        }
        else
        {
          *(_OWORD *)long long __dst = *(_OWORD *)v62;
          *(void *)&__dst[16] = v62[2];
        }
      }
      else
      {
        if (v54) {
          uint64_t v92 = "messageMprBadResponse";
        }
        else {
          uint64_t v92 = "";
        }
        sub_5E5C(__dst, v92);
        int v80 = v120;
      }
      sub_DFBCB4(5, 0x7FFFFFFF, (uint64_t)__p);
      sub_DFBC58((uint64_t)&v128, (uint64_t)__p);
      sub_13C0970(__p);
      sub_5E5C(__p, "messageGeneric");
      sub_DFBD10(&v282, (uint64_t)&v276, (uint64_t)__p, (uint64_t)__dst, v56, v80, (uint64_t)&v125);
LABEL_300:
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if ((__dst[23] & 0x80000000) == 0) {
        goto LABEL_331;
      }
      operator delete(*(void **)__dst);
      uint64_t v77 = (std::string *)v128;
      uint64_t v76 = v129;
      char v78 = v121;
      if (v128 == v129) {
        goto LABEL_340;
      }
      goto LABEL_335;
    case 0x16u:
      sub_DFBCB4(2, 0x7FFFFFFF, (uint64_t)__p);
      sub_DFBC58((uint64_t)&v128, (uint64_t)__p);
      sub_13C0970(__p);
      int v72 = v120;
      if (v54 && v55)
      {
        uint64_t v73 = 450;
        if (v120) {
          uint64_t v73 = 453;
        }
        if (SHIBYTE(qword_25EEDD8[v73 + 2]) < 0)
        {
          uint64_t v103 = 450;
          if (v120) {
            uint64_t v103 = 453;
          }
LABEL_323:
          sub_4200(__p, (void *)qword_25EEDD8[v61], qword_25EEDD8[v103 + 1]);
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)v62;
          *(void *)&__p[16] = v62[2];
        }
      }
      else
      {
        if (v54) {
          uint64_t v94 = "messageMprBadResponse";
        }
        else {
          uint64_t v94 = "";
        }
LABEL_273:
        sub_5E5C(__p, v94);
      }
LABEL_324:
      sub_5E5C(__dst, "messageGeneric");
      sub_DFBD10(&v282, (uint64_t)&v276, (uint64_t)__dst, (uint64_t)__p, v56, v72, (uint64_t)&v125);
LABEL_329:
      if ((__dst[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__dst);
        if ((__p[23] & 0x80000000) == 0)
        {
LABEL_331:
          uint64_t v77 = (std::string *)v128;
          uint64_t v76 = v129;
          char v78 = v121;
          if (v128 == v129) {
            goto LABEL_340;
          }
          goto LABEL_335;
        }
      }
      else if ((__p[23] & 0x80000000) == 0)
      {
        goto LABEL_331;
      }
      operator delete(*(void **)__p);
      uint64_t v77 = (std::string *)v128;
      uint64_t v76 = v129;
      char v78 = v121;
      if (v128 == v129) {
        goto LABEL_340;
      }
      do
      {
LABEL_335:
        double v106 = *(_DWORD **)(v2 + 160);
        if (v106 && (uint64_t v107 = *(int *)(v2 + 152), (int)v107 < *v106))
        {
          *(_DWORD *)(v2 + 152) = v107 + 1;
          uint64_t v108 = *(std::string **)&v106[2 * v107 + 2];
        }
        else
        {
          sub_13D9AD0(*(void *)(v2 + 144));
          uint64_t v108 = (std::string *)sub_188CDC8(v2 + 144, v109);
        }
        sub_13C0E7C(v108, (uint64_t)v77);
        uint64_t v77 = (std::string *)((char *)v77 + 32);
      }
      while (v77 != v76);
LABEL_340:
      if (v78)
      {
        *(_DWORD *)(v2 + 40) |= 0x400u;
        uint64_t v110 = *(void **)(v2 + 456);
        if (!v110)
        {
          uint64_t v111 = *(void *)(v2 + 8);
          uint64_t v112 = (void *)(v111 & 0xFFFFFFFFFFFFFFFCLL);
          if (v111) {
            uint64_t v112 = (void *)*v112;
          }
          uint64_t v110 = sub_13DA524((uint64_t)v112);
          *(void *)(v2 + 456) = v110;
        }
        sub_13CC564((uint64_t)v110, (uint64_t)&v125);
      }
      sub_13CBD40(&v125);
      __darwin_ct_rune_t v113 = (std::string *)v128;
      if (v128)
      {
        __darwin_ct_rune_t v114 = v129;
        uint64_t v115 = v128;
        if (v129 != v128)
        {
          do
            __darwin_ct_rune_t v114 = (std::string *)sub_13C0970(&v114[-2].__r_.__value_.__r.__words[2]);
          while (v114 != v113);
          uint64_t v115 = v128;
        }
        uint64_t v129 = v113;
        operator delete(v115);
      }
      sub_4F2894((uint64_t)&v276);
      int v116 = v281;
      if (v281 && !atomic_fetch_add(&v281->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
        std::__shared_weak_count::__release_weak(v116);
      }
      uint64_t v117 = v283;
      if (v283 && !atomic_fetch_add(&v283->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
        std::__shared_weak_count::__release_weak(v117);
      }
      return;
    case 0x17u:
      sub_DFBCB4(19, 0x7FFFFFFF, (uint64_t)__p);
      sub_DFBC58((uint64_t)&v128, (uint64_t)__p);
LABEL_165:
      sub_13C0970(__p);
      uint64_t v77 = (std::string *)v128;
      uint64_t v76 = v129;
      char v78 = v121;
      if (v128 == v129) {
        goto LABEL_340;
      }
      goto LABEL_335;
    case 0x18u:
      sub_13C08C8((uint64_t)__p, 0, 0);
      *(_DWORD *)&__p[16] |= 3u;
      *(void *)&long long v132 = 2;
      sub_DFBC58((uint64_t)&v128, (uint64_t)__p);
      sub_13C0970(__p);
      sub_5E5C(__p, "messageStartFarFromRoads");
      sub_5E5C(__dst, "");
      sub_DFBD10(&v282, (uint64_t)&v276, (uint64_t)__p, (uint64_t)__dst, 0x7FFFFFFFu, v120, (uint64_t)&v125);
      goto LABEL_329;
    case 0x19u:
      sub_13C08C8((uint64_t)__p, 0, 0);
      *(_DWORD *)&__p[16] |= 3u;
      *(void *)&long long v132 = 3;
      sub_DFBC58((uint64_t)&v128, (uint64_t)__p);
      sub_13C0970(__p);
      sub_5E5C(__p, "messageStartOutOfCoverage");
      sub_5E5C(__dst, "");
      sub_DFBD10(&v282, (uint64_t)&v276, (uint64_t)__p, (uint64_t)__dst, 0x7FFFFFFFu, v120, (uint64_t)&v125);
      goto LABEL_329;
    case 0x1Au:
      sub_13C08C8((uint64_t)__p, 0, 0);
      *(_DWORD *)&__p[16] |= 3u;
      *(void *)&long long v132 = 14;
      sub_DFBC58((uint64_t)&v128, (uint64_t)__p);
      sub_13C0970(__p);
      sub_5E5C(__p, "messageEVStartOutOfCoverage");
      sub_5E5C(__dst, "");
      sub_DFBD10(&v282, (uint64_t)&v276, (uint64_t)__p, (uint64_t)__dst, 0x7FFFFFFFu, v120, (uint64_t)&v125);
      goto LABEL_329;
    case 0x1Bu:
    case 0x1Cu:
      sub_13C08C8((uint64_t)__p, 0, 0);
      *(_DWORD *)&__p[16] |= 3u;
      *(void *)&long long v132 = 3;
      if ((unint64_t)v129 >= v130) {
        uint64_t v64 = sub_E00774((std::string **)&v128, (uint64_t)__p);
      }
      else {
        uint64_t v64 = (std::string *)((char *)sub_E00894(v129, (uint64_t)__p) + 32);
      }
      uint64_t v129 = v64;
      sub_13C0970(__p);
      *(void *)__p = operator new(0x28uLL);
      *(_OWORD *)&__p[8] = xmmword_20B9390;
      strcpy(*(char **)__p, "messageTransitStartOutOfCoverage");
      __dst[23] = 0;
      __dst[0] = 0;
      sub_DFBD10(&v282, (uint64_t)&v276, (uint64_t)__p, (uint64_t)__dst, 0x7FFFFFFFu, v120, (uint64_t)&v125);
      goto LABEL_329;
    case 0x1Du:
      if (v8 == 2)
      {
        sub_13C08C8((uint64_t)__p, 0, 0);
        *(_DWORD *)&__p[16] |= 3u;
        *(void *)&long long v132 = 4;
        sub_DFBC58((uint64_t)&v128, (uint64_t)__p);
        sub_13C0970(__p);
        sub_5E5C(__p, "messageStartNoWalking");
      }
      else
      {
        sub_5E5C(__p, "messageStartFarFromRoads");
      }
      goto LABEL_126;
    case 0x1Eu:
      sub_13C08C8((uint64_t)__p, 0, 0);
      *(_DWORD *)&__p[16] |= 3u;
      *(void *)&long long v132 = 5;
      sub_DFBC58((uint64_t)&v128, (uint64_t)__p);
      sub_13C0970(__p);
      sub_5E5C(__p, "messageStartFarFromRoads");
      sub_5E5C(__dst, "");
      sub_DFBD10(&v282, (uint64_t)&v276, (uint64_t)__p, (uint64_t)__dst, 0x7FFFFFFFu, v120, (uint64_t)&v125);
      goto LABEL_329;
    case 0x1Fu:
      sub_13C08C8((uint64_t)__p, 0, 0);
      *(_DWORD *)&__p[16] |= 3u;
      *(void *)&long long v132 = 0x100000002;
      sub_DFBC58((uint64_t)&v128, (uint64_t)__p);
      sub_13C0970(__p);
      if (v54 && v55)
      {
        uint64_t v74 = 450;
        if (v120) {
          uint64_t v74 = 453;
        }
        if (SHIBYTE(qword_25EEDD8[v74 + 2]) < 0)
        {
          uint64_t v105 = 450;
          if (v120) {
            uint64_t v105 = 453;
          }
          sub_4200(__p, (void *)qword_25EEDD8[v61], qword_25EEDD8[v105 + 1]);
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)v62;
          *(void *)&__p[16] = v62[2];
        }
      }
      else
      {
        if (v54) {
          uint64_t v96 = "messageMprBadResponse";
        }
        else {
          uint64_t v96 = "";
        }
        sub_5E5C(__p, v96);
      }
      sub_5E5C(__dst, "messageEndFarFromRoads");
      sub_DFBD10(&v282, (uint64_t)&v276, (uint64_t)__dst, (uint64_t)__p, v56, v120, (uint64_t)&v125);
      goto LABEL_329;
    case 0x20u:
      if (v56 == 0x7FFFFFFF) {
        int v84 = 1;
      }
      else {
        int v84 = v56;
      }
      sub_DFBCB4(3, v84, (uint64_t)__p);
      sub_DFBC58((uint64_t)&v128, (uint64_t)__p);
      sub_13C0970(__p);
      sub_5E5C(__p, "messageEndOutOfCoverage");
      if (v54) {
        uint64_t v85 = "messageMprBadResponse";
      }
      else {
        uint64_t v85 = "";
      }
      sub_5E5C(__dst, v85);
      sub_DFBD10(&v282, (uint64_t)&v276, (uint64_t)__p, (uint64_t)__dst, v56, v120, (uint64_t)&v125);
      goto LABEL_329;
    case 0x21u:
      if (v56 == 0x7FFFFFFF) {
        int v88 = 1;
      }
      else {
        int v88 = v56;
      }
      sub_DFBCB4(14, v88, (uint64_t)__p);
      sub_DFBC58((uint64_t)&v128, (uint64_t)__p);
      sub_13C0970(__p);
      if (v54)
      {
        uint64_t v89 = 450;
        if (v120) {
          uint64_t v89 = 453;
        }
        if (SHIBYTE(qword_25EEDD8[v89 + 2]) < 0)
        {
          uint64_t v100 = 450;
          if (v120) {
            uint64_t v100 = 453;
          }
          sub_4200(__p, (void *)qword_25EEDD8[v61], qword_25EEDD8[v100 + 1]);
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)v62;
          *(void *)&__p[16] = v62[2];
        }
      }
      else
      {
        sub_5E5C(__p, "");
      }
      sub_5E5C(__dst, "messageEVEndOutOfCoverage");
      sub_DFBD10(&v282, (uint64_t)&v276, (uint64_t)__dst, (uint64_t)__p, v56, v120, (uint64_t)&v125);
      goto LABEL_329;
    case 0x22u:
    case 0x23u:
      sub_13C08C8((uint64_t)__p, 0, 0);
      *(_DWORD *)&__p[16] |= 3u;
      *(void *)&long long v132 = 0x100000003;
      if ((unint64_t)v129 >= v130) {
        unint64_t v65 = sub_E00774((std::string **)&v128, (uint64_t)__p);
      }
      else {
        unint64_t v65 = (std::string *)((char *)sub_E00894(v129, (uint64_t)__p) + 32);
      }
      uint64_t v129 = v65;
      sub_13C0970(__p);
      *(void *)__p = operator new(0x20uLL);
      *(_OWORD *)&__p[8] = xmmword_20B9800;
      strcpy(*(char **)__p, "messageTransitEndOutOfCoverage");
      __dst[23] = 0;
      __dst[0] = 0;
      sub_DFBD10(&v282, (uint64_t)&v276, (uint64_t)__p, (uint64_t)__dst, 0x7FFFFFFFu, v120, (uint64_t)&v125);
      goto LABEL_329;
    case 0x24u:
      if (v8 == 2)
      {
        sub_13C08C8((uint64_t)__p, 0, 0);
        *(_DWORD *)&__p[16] |= 3u;
        *(void *)&long long v132 = 0x100000004;
        sub_DFBC58((uint64_t)&v128, (uint64_t)__p);
        sub_13C0970(__p);
        sub_5E5C(__p, "messageEndNoWalking");
      }
      else
      {
        sub_5E5C(__p, "messageEndFarFromRoads");
      }
LABEL_126:
      sub_5E5C(__dst, "");
      sub_DFBD10(&v282, (uint64_t)&v276, (uint64_t)__p, (uint64_t)__dst, 0x7FFFFFFFu, v120, (uint64_t)&v125);
      goto LABEL_329;
    case 0x25u:
      sub_13C08C8((uint64_t)__p, 0, 0);
      *(_DWORD *)&__p[16] |= 3u;
      *(void *)&long long v132 = 0x100000005;
      sub_DFBC58((uint64_t)&v128, (uint64_t)__p);
      sub_13C0970(__p);
      sub_5E5C(__p, "messageEndFarFromRoads");
      sub_5E5C(__dst, "");
      sub_DFBD10(&v282, (uint64_t)&v276, (uint64_t)__p, (uint64_t)__dst, 0x7FFFFFFFu, v120, (uint64_t)&v125);
      goto LABEL_329;
    case 0x26u:
      sub_DFBCB4(1, 0x7FFFFFFF, (uint64_t)__p);
      sub_DFBC58((uint64_t)&v128, (uint64_t)__p);
      sub_13C0970(__p);
      sub_5E5C(__p, "messageTransitGeneric");
      sub_5E5C(__dst, "");
      sub_DFBD10(&v282, (uint64_t)&v276, (uint64_t)__p, (uint64_t)__dst, 0x7FFFFFFFu, v120, (uint64_t)&v125);
      goto LABEL_329;
    case 0x27u:
    case 0x28u:
    case 0x2Au:
      __p[23] = 21;
      strcpy(__p, "messageTransitGeneric");
      __dst[23] = 0;
      __dst[0] = 0;
      sub_DFBD10(&v282, (uint64_t)&v276, (uint64_t)__p, (uint64_t)__dst, 0x7FFFFFFFu, v120, (uint64_t)&v125);
      goto LABEL_329;
    case 0x29u:
      sub_5E5C(__p, "messageTransitBlocked");
      sub_5E5C(__dst, "");
      sub_DFBD10(&v282, (uint64_t)&v276, (uint64_t)__p, (uint64_t)__dst, 0x7FFFFFFFu, v120, (uint64_t)&v125);
      goto LABEL_329;
    default:
      goto LABEL_331;
  }
}

void sub_DFB488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a32);
  sub_13CBD40(&a22);
  sub_DFBEC0(&a29);
  sub_4F2894((uint64_t)&STACK[0x8C0]);
  sub_14A84(v32 - 128);
  sub_14A84(v32 - 112);
  _Unwind_Resume(a1);
}

uint64_t sub_DFBA48(unsigned int a1)
{
  if (a1 > 0x2B || ((1 << a1) & 0x7FFFF7FFEFELL) != 0) {
    return 1;
  }
  if (((1 << a1) & 0x800100) == 0)
  {
    *(void *)&v9.__val_ = a1;
    v9.__cat_ = (const std::error_category *)&off_2439090;
    std::error_condition::message(&v10, &v9);
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&v9);
      uint64_t v2 = sub_188FC78(&v9, (uint64_t)"Unexpected error code: ", 23);
      if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v3 = &v10;
      }
      else {
        uint64_t v3 = (std::string *)v10.__r_.__value_.__r.__words[0];
      }
      if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v10.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v10.__r_.__value_.__l.__size_;
      }
      sub_188FC78(v2, (uint64_t)v3, size);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 3u);
      if (v8 < 0) {
        operator delete(__p);
      }
      sub_111ECAC((uint64_t)&v9);
    }
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    uint64_t v6 = (void *)sub_2F404((uint64_t)exception, (long long *)&v9.__val_);
  }
  return 0;
}

void sub_DFBBB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a16);
  if (*(char *)(v21 - 33) < 0)
  {
    operator delete(*(void **)(v21 - 56));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

std::string::value_type *sub_DFBC58(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(std::string **)(a1 + 8);
  if ((unint64_t)v3 >= *(void *)(a1 + 16)) {
    uint64_t v4 = sub_E00774((std::string **)a1, a2);
  }
  else {
    uint64_t v4 = (std::string *)((char *)sub_E00894(v3, a2) + 32);
  }
  *(void *)(a1 + 8) = v4;
  return &v4[-2].__r_.__value_.__s.__data_[16];
}

void sub_DFBCB4(int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>)
{
  sub_13C08C8(a3, 0, 0);
  int v6 = v5[4];
  v5[4] = v6 | 1;
  v5[6] = a1;
  if (a2 != 0x7FFFFFFF)
  {
    v5[4] = v6 | 3;
    v5[7] = a2;
  }
}

uint64_t sub_DFBD10(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, uint64_t a7)
{
  BOOL v13 = sub_8D7730(*a1, a3);
  *(_DWORD *)(a7 + 16) |= 2u;
  uint64_t v14 = *(void *)(a7 + 8);
  uint64_t v15 = (uint64_t *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
  if (v14) {
    uint64_t v15 = (uint64_t *)*v15;
  }
  sub_1881DF4((std::string **)(a7 + 32), (long long *)v13, v15);
  sub_5F3B34((uint64_t)v22);
  uint64_t v16 = *(unsigned __int8 *)(a4 + 23);
  if ((v16 & 0x80u) != 0) {
    uint64_t v16 = *(void *)(a4 + 8);
  }
  if (v16) {
    sub_DFEC24(a1, a2, a4, a5, (uint64_t)v22);
  }
  sub_5F41E8((uint64_t)v22, (uint64_t)v13);
  if (a6) {
    sub_5F4198(v22, (long long *)&qword_25EE470);
  }
  *(_DWORD *)(a7 + 16) |= 8u;
  uint64_t v17 = *(void *)(a7 + 48);
  if (!v17)
  {
    uint64_t v18 = *(void *)(a7 + 8);
    uint64_t v19 = (void *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
    if (v18) {
      uint64_t v19 = (void *)*v19;
    }
    sub_13D6A1C((uint64_t)v19);
    uint64_t v17 = v20;
    *(void *)(a7 + 48) = v20;
  }
  sub_5F4D30(v22, v17);
  return sub_4D4B58((uint64_t)v22);
}

void sub_DFBE84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_4D4B58((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_4D4B58((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void **sub_DFBEC0(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_13C0970(v3 - 32);
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_DFBF1C()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  int v6 = (const std::error_condition *)v5;
  int v8 = v7;
  std::error_condition v9 = (uint64_t *)v0;
  int v10 = *(_DWORD *)(v5 + 40);
  int v11 = sub_69510();
  cat = (void (***)(std::error_category *__hidden))v6->__cat_;
  BOOL v13 = sub_723EC(3u);
  if (cat != &off_2439090)
  {
    if (v13)
    {
      sub_6BAC((uint64_t)&v270);
      LODWORD(v119.__r_.__value_.__l.__data_) = sub_69124((uint64_t)v11);
      sub_677F0((unsigned int *)&v119, (uint64_t)__p);
      if (__p[23] >= 0) {
        uint64_t v14 = __p;
      }
      else {
        uint64_t v14 = *(unsigned char **)__p;
      }
      if (__p[23] >= 0) {
        uint64_t v15 = __p[23];
      }
      else {
        uint64_t v15 = *(void *)&__p[8];
      }
      uint64_t v16 = sub_188FC78(&v270, (uint64_t)v14, v15);
      sub_188FC78(v16, (uint64_t)" failed (ErrorCode: ", 20);
      uint64_t v17 = (void *)std::ostream::operator<<();
      uint64_t v18 = sub_188FC78(v17, (uint64_t)"): ", 3);
      uint64_t v19 = sub_68EE4((uint64_t)v11);
      int v20 = *(char *)(v19 + 23);
      if (v20 >= 0) {
        uint64_t v21 = v19;
      }
      else {
        uint64_t v21 = *(void *)v19;
      }
      if (v20 >= 0) {
        uint64_t v22 = *(unsigned __int8 *)(v19 + 23);
      }
      else {
        uint64_t v22 = *(void *)(v19 + 8);
      }
      sub_188FC78(v18, v21, v22);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 3u);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if (v273 < 0) {
        operator delete(v272);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    int val = v6->__val_;
    *(_DWORD *)(v2 + 40) |= 0x80u;
    *(_DWORD *)(v2 + 248) = val;
    return;
  }
  if (!v13) {
    goto LABEL_50;
  }
  sub_6BAC((uint64_t)&v270);
  LODWORD(v122) = sub_69124((uint64_t)v11);
  sub_677F0((unsigned int *)&v122, (uint64_t)__p);
  if (__p[23] >= 0) {
    unint64_t v24 = __p;
  }
  else {
    unint64_t v24 = *(unsigned char **)__p;
  }
  if (__p[23] >= 0) {
    uint64_t v25 = __p[23];
  }
  else {
    uint64_t v25 = *(void *)&__p[8];
  }
  uint64_t v26 = sub_188FC78(&v270, (uint64_t)v24, v25);
  unint64_t v27 = sub_188FC78(v26, (uint64_t)" failed (SubError: ", 19);
  std::error_condition::message(&v119, v6);
  if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v28 = &v119;
  }
  else {
    uint64_t v28 = (std::string *)v119.__r_.__value_.__r.__words[0];
  }
  if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v119.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v119.__r_.__value_.__l.__size_;
  }
  uint64_t v30 = sub_188FC78(v27, (uint64_t)v28, size);
  uint64_t v31 = sub_188FC78(v30, (uint64_t)"): ", 3);
  uint64_t v32 = sub_68EE4((uint64_t)v11);
  int v33 = *(char *)(v32 + 23);
  if (v33 >= 0) {
    uint64_t v34 = v32;
  }
  else {
    uint64_t v34 = *(void *)v32;
  }
  if (v33 >= 0) {
    uint64_t v35 = *(unsigned __int8 *)(v32 + 23);
  }
  else {
    uint64_t v35 = *(void *)(v32 + 8);
  }
  sub_188FC78(v31, v34, v35);
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v119.__r_.__value_.__l.__data_);
    if ((__p[23] & 0x80000000) == 0) {
      goto LABEL_45;
    }
LABEL_70:
    operator delete(*(void **)__p);
    goto LABEL_45;
  }
  if ((__p[23] & 0x80000000) != 0) {
    goto LABEL_70;
  }
LABEL_45:
  std::stringbuf::str();
  sub_7246C((uint64_t *)__p, 3u);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if (v273 < 0) {
    operator delete(v272);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
LABEL_50:
  unint64_t v36 = (uint64_t *)sub_374EF4(v9);
  int v37 = *(_DWORD *)(v4 + 60);
  sub_688A04(v36, 1u, v37, &v276);
  sub_688A04(v36, 3u, v37, &v274);
  uint64_t v268 = v274;
  uint64_t v269 = v275;
  if (v275) {
    atomic_fetch_add_explicit(&v275->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v267 = 0u;
  bzero(__p, 0x7F8uLL);
  *(int64x2_t *)&__p[8] = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  long long v126 = *(_OWORD *)&__p[8];
  long long v127 = *(_OWORD *)&__p[8];
  long long v128 = *(_OWORD *)&__p[8];
  long long v129 = *(_OWORD *)&__p[8];
  long long v130 = *(_OWORD *)&__p[8];
  long long v131 = *(_OWORD *)&__p[8];
  long long v132 = *(_OWORD *)&__p[8];
  uint64_t v133 = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)&long long v38 = 0x8000000080000000;
  *((void *)&v38 + 1) = 0x8000000080000000;
  long long v134 = v38;
  long long v135 = v38;
  long long v136 = v38;
  long long v137 = v38;
  int v138 = 0x7FFFFFFF;
  long long v139 = *(_OWORD *)&__p[8];
  long long v140 = *(_OWORD *)&__p[8];
  long long v141 = v38;
  long long v142 = v38;
  unint64_t v143 = 0x8000000080000000;
  long long v144 = *(_OWORD *)&__p[8];
  long long v145 = *(_OWORD *)&__p[8];
  long long v146 = *(_OWORD *)&__p[8];
  long long v147 = *(_OWORD *)&__p[8];
  long long v148 = *(_OWORD *)&__p[8];
  long long v149 = *(_OWORD *)&__p[8];
  long long v150 = *(_OWORD *)&__p[8];
  long long v151 = *(_OWORD *)&__p[8];
  long long v152 = 0u;
  long long v153 = *(_OWORD *)&__p[8];
  long long v154 = *(_OWORD *)&__p[8];
  long long v155 = *(_OWORD *)&__p[8];
  long long v156 = *(_OWORD *)&__p[8];
  long long v157 = *(_OWORD *)&__p[8];
  long long v158 = *(_OWORD *)&__p[8];
  long long v159 = *(_OWORD *)&__p[8];
  long long v160 = *(_OWORD *)&__p[8];
  long long v161 = *(_OWORD *)&__p[8];
  long long v162 = *(_OWORD *)&__p[8];
  long long v163 = *(_OWORD *)&__p[8];
  long long v164 = *(_OWORD *)&__p[8];
  long long v165 = *(_OWORD *)&__p[8];
  long long v166 = *(_OWORD *)&__p[8];
  long long v167 = *(_OWORD *)&__p[8];
  long long v168 = *(_OWORD *)&__p[8];
  long long v169 = *(_OWORD *)&__p[8];
  long long v170 = *(_OWORD *)&__p[8];
  long long v171 = *(_OWORD *)&__p[8];
  long long v172 = *(_OWORD *)&__p[8];
  long long v173 = *(_OWORD *)&__p[8];
  long long v174 = *(_OWORD *)&__p[8];
  long long v175 = *(_OWORD *)&__p[8];
  long long v176 = *(_OWORD *)&__p[8];
  long long v177 = *(_OWORD *)&__p[8];
  long long v178 = *(_OWORD *)&__p[8];
  long long v179 = *(_OWORD *)&__p[8];
  long long v180 = *(_OWORD *)&__p[8];
  long long v181 = *(_OWORD *)&__p[8];
  long long v182 = *(_OWORD *)&__p[8];
  long long v183 = *(_OWORD *)&__p[8];
  long long v184 = *(_OWORD *)&__p[8];
  long long v185 = *(_OWORD *)&__p[8];
  long long v186 = *(_OWORD *)&__p[8];
  long long v187 = *(_OWORD *)&__p[8];
  long long v188 = *(_OWORD *)&__p[8];
  long long v189 = *(_OWORD *)&__p[8];
  long long v190 = *(_OWORD *)&__p[8];
  long long v191 = *(_OWORD *)&__p[8];
  long long v192 = *(_OWORD *)&__p[8];
  long long v193 = *(_OWORD *)&__p[8];
  long long v194 = *(_OWORD *)&__p[8];
  long long v195 = *(_OWORD *)&__p[8];
  long long v196 = *(_OWORD *)&__p[8];
  long long v197 = *(_OWORD *)&__p[8];
  long long v198 = *(_OWORD *)&__p[8];
  long long v199 = *(_OWORD *)&__p[8];
  long long v200 = *(_OWORD *)&__p[8];
  long long v201 = *(_OWORD *)&__p[8];
  long long v202 = *(_OWORD *)&__p[8];
  long long v203 = *(_OWORD *)&__p[8];
  long long v204 = *(_OWORD *)&__p[8];
  uint64_t v205 = 0x7FFFFFFFFFFFFFFFLL;
  char v206 = 0;
  long long v207 = *(_OWORD *)&__p[8];
  long long v208 = *(_OWORD *)&__p[8];
  long long v209 = *(_OWORD *)&__p[8];
  long long v210 = *(_OWORD *)&__p[8];
  long long v211 = *(_OWORD *)&__p[8];
  long long v212 = *(_OWORD *)&__p[8];
  long long v213 = *(_OWORD *)&__p[8];
  long long v214 = *(_OWORD *)&__p[8];
  long long v215 = *(_OWORD *)&__p[8];
  long long v216 = *(_OWORD *)&__p[8];
  long long v217 = *(_OWORD *)&__p[8];
  long long v218 = *(_OWORD *)&__p[8];
  uint64_t v219 = 0;
  uint64_t v220 = 0x7FFFFFFFFFFFFFFFLL;
  char v221 = 0;
  uint64_t v222 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v223 = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)&long long v38 = -1;
  *((void *)&v38 + 1) = -1;
  long long v225 = v38;
  long long v226 = v38;
  long long v224 = v38;
  uint64_t v227 = -1;
  char v228 = 0;
  uint64_t v229 = 0x7FFFFFFFFFFFFFFFLL;
  long long v230 = *(_OWORD *)&__p[8];
  uint64_t v231 = 0x7FFFFFFFFFFFFFFFLL;
  char v232 = 0;
  int v233 = 0x7FFFFFFF;
  uint64_t v234 = 0;
  __int16 v235 = 0;
  long long v236 = *(_OWORD *)&__p[8];
  long long v237 = *(_OWORD *)&__p[8];
  long long v238 = *(_OWORD *)&__p[8];
  long long v239 = *(_OWORD *)&__p[8];
  long long v240 = *(_OWORD *)&__p[8];
  long long v241 = *(_OWORD *)&__p[8];
  long long v242 = *(_OWORD *)&__p[8];
  long long v243 = *(_OWORD *)&__p[8];
  long long v244 = *(_OWORD *)&__p[8];
  long long v245 = *(_OWORD *)&__p[8];
  long long v246 = *(_OWORD *)&__p[8];
  long long v247 = *(_OWORD *)&__p[8];
  long long v248 = *(_OWORD *)&__p[8];
  long long v249 = *(_OWORD *)&__p[8];
  memset(v250, 0, sizeof(v250));
  uint64_t v251 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v252 = 0x7FFFFFFFFFFFFFFFLL;
  int v253 = 0;
  *(void *)((char *)v255 + 5) = 0;
  v255[0] = 0;
  *(_OWORD *)long long v254 = 0u;
  long long v256 = *(_OWORD *)&__p[8];
  long long v257 = *(_OWORD *)&__p[8];
  char v258 = 1;
  uint64_t v259 = 0;
  char v260 = 0;
  uint64_t v261 = 0x7FFFFFFFFFFFFFFFLL;
  char v262 = 0;
  uint64_t v263 = 0x7FFFFFFFFFFFFFFFLL;
  long long v264 = 0u;
  __int16 v266 = 0;
  uint64_t v265 = 0;
  sub_60DF7C((uint64_t)&v270, &v268, &v267, __p, v4);
  if (SHIBYTE(v255[0]) < 0) {
    operator delete(v254[0]);
  }
  uint64_t v39 = (std::__shared_weak_count *)*((void *)&v267 + 1);
  if (*((void *)&v267 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v267 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  uint64_t v40 = v269;
  if (v269 && !atomic_fetch_add(&v269->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  uint64_t v122 = 0;
  uint64_t v123 = 0;
  unint64_t v124 = 0;
  sub_13CBA58(&v119, 0, 0);
  unsigned int v41 = v6->__val_;
  int v42 = sub_E12498(v6->__val_);
  *(_DWORD *)(v2 + 40) |= 0x80u;
  *(_DWORD *)(v2 + 248) = v42;
  if (sub_DFBA48(v41))
  {
    switch(v8)
    {
      case 0:
        int v43 = sub_DFEA24(v41);
        if (v43) {
          int v44 = "titleEV";
        }
        else {
          int v44 = "titleGeneric";
        }
        if (v43) {
          size_t v45 = 7;
        }
        else {
          size_t v45 = 12;
        }
        __dst[23] = v45;
        memcpy(__dst, v44, v45);
        __dst[v45] = 0;
        goto LABEL_78;
      case 1:
        __dst[23] = 12;
        *(_DWORD *)&__dst[8] = 1953067886;
        size_t v46 = "titleTransit";
        goto LABEL_77;
      case 2:
        __dst[23] = 12;
        *(_DWORD *)&__dst[8] = 1735289195;
        size_t v46 = "titleWalking";
        goto LABEL_77;
      case 3:
        if (sub_DFE824(v41))
        {
          __dst[23] = 21;
          strcpy(__dst, "titleNoRouteAvailable");
        }
        else
        {
          __dst[23] = 12;
          *(_DWORD *)&__dst[8] = 1735289196;
          size_t v46 = "titleCycling";
LABEL_77:
          *(void *)long long __dst = *(void *)v46;
          __dst[12] = 0;
        }
LABEL_78:
        uint64_t v47 = sub_8D7730(v276, (uint64_t)__dst);
        if (*((char *)v47 + 23) < 0)
        {
          sub_4200(v116, (void *)*v47, v47[1]);
        }
        else
        {
          long long v48 = *(_OWORD *)v47;
          uint64_t v117 = v47[2];
          *(_OWORD *)int v116 = v48;
        }
        LODWORD(v119.__r_.__value_.__r.__words[2]) |= 1u;
        long long v49 = (uint64_t *)(v119.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFFCLL);
        if (v119.__r_.__value_.__s.__data_[8]) {
          long long v49 = (uint64_t *)*v49;
        }
        sub_1881DF4(&v120, (long long *)v116, v49);
        sub_5F3B34((uint64_t)__p);
        sub_5F41E8((uint64_t)__p, (uint64_t)v116);
        LODWORD(v119.__r_.__value_.__r.__words[2]) |= 4u;
        uint64_t v50 = v121;
        if (!v121)
        {
          uint64_t v51 = (void *)(v119.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFFCLL);
          if (v119.__r_.__value_.__s.__data_[8]) {
            uint64_t v51 = (void *)*v51;
          }
          sub_13D6A1C((uint64_t)v51);
          uint64_t v50 = v52;
          uint64_t v121 = v52;
        }
        sub_5F4D30((const std::string **)__p, v50);
        sub_4D4B58((uint64_t)__p);
        if (SHIBYTE(v117) < 0)
        {
          operator delete(v116[0]);
          if ((__dst[23] & 0x80000000) == 0) {
            break;
          }
        }
        else if ((__dst[23] & 0x80000000) == 0)
        {
          break;
        }
        operator delete(*(void **)__dst);
        break;
      default:
        __dst[23] = 12;
        *(_DWORD *)&__dst[8] = 1667854949;
        size_t v46 = "titleGeneric";
        goto LABEL_77;
    }
  }
  int v53 = *(unsigned __int8 *)(v4 + 164);
  int v54 = *(unsigned __int8 *)(v4 + 165);
  if (v10 == -1) {
    int v55 = 0x7FFFFFFF;
  }
  else {
    int v55 = v10;
  }
  if (*(unsigned char *)(v4 + 165)) {
    BOOL v56 = *(unsigned char *)(v4 + 36) == 0;
  }
  else {
    BOOL v56 = 1;
  }
  int v57 = !v56;
  int v115 = v57;
  int v58 = v57 ^ 1;
  if (*(unsigned char *)(v4 + 164)) {
    int v59 = v58;
  }
  else {
    int v59 = 1;
  }
  if (v59) {
    uint64_t v60 = 450;
  }
  else {
    uint64_t v60 = 453;
  }
  if (v59) {
    uint64_t v61 = &qword_25EFBE8;
  }
  else {
    uint64_t v61 = &qword_25EFC00;
  }
  switch(v41)
  {
    case 0u:
    case 0x2Bu:
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)__p);
        sub_188FC78(__p, (uint64_t)"Unexpected error code", 21);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__dst, 3u);
        if ((__dst[23] & 0x80000000) != 0) {
          operator delete(*(void **)__dst);
        }
        sub_111ECAC((uint64_t)__p);
      }
      exception = __cxa_allocate_exception(0x40uLL);
      sub_5E5C(__p, "ResponseBuilderErrorHandlingModule has unexpected ErrorCode");
      __darwin_ct_rune_t v114 = (void *)sub_2F404((uint64_t)exception, (long long *)__p);
    case 1u:
    case 6u:
    case 7u:
      __p[23] = 18;
      strcpy(__p, "messageBadResponse");
      uint64_t v62 = 21;
      if (!v53) {
        uint64_t v62 = 0;
      }
      __dst[23] = v62;
      if (v53) {
        qmemcpy(__dst, "messageMprBadResponse", 21);
      }
      __dst[v62] = 0;
      sub_DFBD10(&v276, (uint64_t)&v270, (uint64_t)__p, (uint64_t)__dst, 0x7FFFFFFFu, v115, (uint64_t)&v119);
      goto LABEL_329;
    case 2u:
    case 5u:
      sub_13C08C8((uint64_t)__p, 0, 0);
      *(_DWORD *)&__p[16] |= 1u;
      LODWORD(v126) = 16;
      if ((unint64_t)v123 >= v124) {
        unint64_t v65 = sub_E00774((std::string **)&v122, (uint64_t)__p);
      }
      else {
        unint64_t v65 = (std::string *)((char *)sub_E00894(v123, (uint64_t)__p) + 32);
      }
      uint64_t v123 = v65;
      sub_13C0970(__p);
      if (v53 && v54)
      {
        uint64_t v88 = 453;
        if (v59) {
          uint64_t v88 = 450;
        }
        if (SHIBYTE(qword_25EEDD8[v88 + 2]) < 0)
        {
          uint64_t v96 = 453;
          if (v59) {
            uint64_t v96 = 450;
          }
          sub_4200(__p, (void *)qword_25EEDD8[v60], qword_25EEDD8[v96 + 1]);
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)v61;
          *(void *)&__p[16] = v61[2];
        }
      }
      else
      {
        sub_5E5C(__p, "");
      }
      __dst[23] = 7;
      strcpy(__dst, "titleEV");
      sub_DFBD10(&v276, (uint64_t)&v270, (uint64_t)__dst, (uint64_t)__p, 0x7FFFFFFFu, v115, (uint64_t)&v119);
      goto LABEL_329;
    case 3u:
      if (!v53 || !v54)
      {
        if (v53) {
          uint64_t v91 = "messageMprBadResponse";
        }
        else {
          uint64_t v91 = "";
        }
        sub_5E5C(__p, v91);
        int v71 = v115;
        goto LABEL_324;
      }
      int v71 = v115;
      uint64_t v80 = 450;
      if (v115) {
        uint64_t v80 = 453;
      }
      if ((SHIBYTE(qword_25EEDD8[v80 + 2]) & 0x80000000) == 0)
      {
        *(_OWORD *)__p = *(_OWORD *)v61;
        *(void *)&__p[16] = v61[2];
        goto LABEL_324;
      }
      uint64_t v101 = 450;
      if (v115) {
        uint64_t v101 = 453;
      }
      goto LABEL_323;
    case 4u:
      sub_DFBCB4(22, 0x7FFFFFFF, (uint64_t)__p);
      sub_DFBC58((uint64_t)&v122, (uint64_t)__p);
      sub_13C0970(__p);
      sub_5E5C(__p, "messageBadResponse");
      if (v53) {
        uint64_t v77 = "messageMprBadResponse";
      }
      else {
        uint64_t v77 = "";
      }
      sub_5E5C(__dst, v77);
      sub_DFBD10(&v276, (uint64_t)&v270, (uint64_t)__p, (uint64_t)__dst, 0x7FFFFFFFu, v115, (uint64_t)&v119);
      goto LABEL_329;
    case 8u:
      sub_DFBCB4(20, 0x7FFFFFFF, (uint64_t)__p);
      sub_DFBC58((uint64_t)&v122, (uint64_t)__p);
      goto LABEL_165;
    case 9u:
      sub_DFBCB4(21, 0x7FFFFFFF, (uint64_t)__p);
      sub_DFBC58((uint64_t)&v122, (uint64_t)__p);
      sub_13C0970(__p);
      sub_5E5C(__p, "messageGeneric");
      sub_5E5C(__dst, "");
      sub_DFBD10(&v276, (uint64_t)&v270, (uint64_t)__p, (uint64_t)__dst, 0x7FFFFFFFu, v115, (uint64_t)&v119);
      goto LABEL_329;
    case 0xAu:
      sub_DFBCB4(13, 0x7FFFFFFF, (uint64_t)__p);
      sub_DFBC58((uint64_t)&v122, (uint64_t)__p);
      sub_13C0970(__p);
      int v71 = v115;
      if (!v53 || !v54)
      {
        if (v53) {
          uint64_t v92 = "messageMprBadResponse";
        }
        else {
          uint64_t v92 = "";
        }
        goto LABEL_273;
      }
      uint64_t v84 = 450;
      if (v115) {
        uint64_t v84 = 453;
      }
      if ((SHIBYTE(qword_25EEDD8[v84 + 2]) & 0x80000000) == 0)
      {
        *(_OWORD *)__p = *(_OWORD *)v61;
        *(void *)&__p[16] = v61[2];
        goto LABEL_324;
      }
      uint64_t v101 = 450;
      if (v115) {
        uint64_t v101 = 453;
      }
      goto LABEL_323;
    case 0xBu:
      if (v53) {
        uint64_t v74 = "messageMprBadResponse";
      }
      else {
        uint64_t v74 = "";
      }
      sub_DFBCB4(8, 0x7FFFFFFF, (uint64_t)__p);
      sub_DFBC58((uint64_t)&v122, (uint64_t)__p);
      sub_13C0970(__p);
      sub_5E5C(__p, "messageGeneric");
      sub_5E5C(__dst, v74);
      sub_DFBD10(&v276, (uint64_t)&v270, (uint64_t)__p, (uint64_t)__dst, 0x7FFFFFFFu, v115, (uint64_t)&v119);
      goto LABEL_329;
    case 0xCu:
      sub_DFBCB4(10, 0x7FFFFFFF, (uint64_t)__p);
      sub_DFBC58((uint64_t)&v122, (uint64_t)__p);
      sub_13C0970(__p);
      sub_5E5C(__p, "messageBlockedRoads");
      sub_5E5C(__dst, "");
      sub_DFBD10(&v276, (uint64_t)&v270, (uint64_t)__p, (uint64_t)__dst, 0x7FFFFFFFu, v115, (uint64_t)&v119);
      goto LABEL_329;
    case 0xDu:
      sub_DFBCB4(9, 0x7FFFFFFF, (uint64_t)__p);
      sub_DFBC58((uint64_t)&v122, (uint64_t)__p);
      sub_13C0970(__p);
      sub_5E5C(__p, "messageWalkingTooFar");
      sub_5E5C(__dst, "");
      sub_DFBD10(&v276, (uint64_t)&v270, (uint64_t)__p, (uint64_t)__dst, 0x7FFFFFFFu, v115, (uint64_t)&v119);
      goto LABEL_329;
    case 0xEu:
      if (v53 && v54)
      {
        uint64_t v70 = 453;
        if (v59) {
          uint64_t v70 = 450;
        }
        if (SHIBYTE(qword_25EEDD8[v70 + 2]) < 0)
        {
          uint64_t v99 = 453;
          if (v59) {
            uint64_t v99 = 450;
          }
          sub_4200(__dst, (void *)qword_25EEDD8[v60], qword_25EEDD8[v99 + 1]);
        }
        else
        {
          *(_OWORD *)long long __dst = *(_OWORD *)v61;
          *(void *)&__dst[16] = v61[2];
        }
      }
      else
      {
        sub_5E5C(__dst, "");
      }
      sub_DFBCB4(15, 0x7FFFFFFF, (uint64_t)__p);
      sub_DFBC58((uint64_t)&v122, (uint64_t)__p);
      sub_13C0970(__p);
      sub_5E5C(__p, "titleEVNotEnoughInitialBattery");
      sub_DFBD10(&v276, (uint64_t)&v270, (uint64_t)__p, (uint64_t)__dst, v55, v115, (uint64_t)&v119);
      goto LABEL_300;
    case 0xFu:
      unsigned int v67 = v55;
      sub_DFBCB4(18, v55, (uint64_t)__p);
      sub_DFBC58((uint64_t)&v122, (uint64_t)__p);
      sub_13C0970(__p);
      int v68 = v115;
      if (!v53 || !v54)
      {
        if (v53) {
          uint64_t v93 = "messageMprBadResponse";
        }
        else {
          uint64_t v93 = "";
        }
        goto LABEL_283;
      }
      uint64_t v69 = 450;
      if (v115) {
        uint64_t v69 = 453;
      }
      if ((SHIBYTE(qword_25EEDD8[v69 + 2]) & 0x80000000) == 0)
      {
        *(_OWORD *)__p = *(_OWORD *)v61;
        *(void *)&__p[16] = v61[2];
        goto LABEL_328;
      }
      uint64_t v102 = 450;
      if (v115) {
        uint64_t v102 = 453;
      }
      goto LABEL_327;
    case 0x10u:
      unsigned int v67 = v55;
      sub_DFBCB4(3, v55, (uint64_t)__p);
      sub_DFBC58((uint64_t)&v122, (uint64_t)__p);
      sub_13C0970(__p);
      int v68 = v115;
      if (v8 == 3)
      {
        sub_5E5C(__p, "messageCyclingOutOfCoverage");
        sub_5E5C(__dst, "");
        sub_DFBD10(&v276, (uint64_t)&v270, (uint64_t)__p, (uint64_t)__dst, 0x7FFFFFFFu, v115, (uint64_t)&v119);
      }
      else
      {
        if (v53 && v54)
        {
          uint64_t v95 = 450;
          if (v115) {
            uint64_t v95 = 453;
          }
          if (SHIBYTE(qword_25EEDD8[v95 + 2]) < 0)
          {
            uint64_t v102 = 450;
            if (v115) {
              uint64_t v102 = 453;
            }
LABEL_327:
            sub_4200(__p, (void *)qword_25EEDD8[v60], qword_25EEDD8[v102 + 1]);
          }
          else
          {
            *(_OWORD *)__p = *(_OWORD *)v61;
            *(void *)&__p[16] = v61[2];
          }
        }
        else
        {
          if (v53) {
            uint64_t v93 = "messageMprBadResponse";
          }
          else {
            uint64_t v93 = "";
          }
LABEL_283:
          sub_5E5C(__p, v93);
        }
LABEL_328:
        sub_5E5C(__dst, "messageGeneric");
        sub_DFBD10(&v276, (uint64_t)&v270, (uint64_t)__dst, (uint64_t)__p, v67, v68, (uint64_t)&v119);
      }
      goto LABEL_329;
    case 0x11u:
    case 0x12u:
      sub_13C08C8((uint64_t)__p, 0, 0);
      *(_DWORD *)&__p[16] |= 3u;
      *(void *)&long long v126 = 3;
      if ((unint64_t)v123 >= v124) {
        uint64_t v66 = sub_E00774((std::string **)&v122, (uint64_t)__p);
      }
      else {
        uint64_t v66 = (std::string *)((char *)sub_E00894(v123, (uint64_t)__p) + 32);
      }
      uint64_t v123 = v66;
      sub_13C0970(__p);
      sub_13C08C8((uint64_t)__p, 0, 0);
      *(_DWORD *)&__p[16] |= 3u;
      *(void *)&long long v126 = 0x100000003;
      if ((unint64_t)v123 >= v124) {
        uint64_t v89 = sub_E00774((std::string **)&v122, (uint64_t)__p);
      }
      else {
        uint64_t v89 = (std::string *)((char *)sub_E00894(v123, (uint64_t)__p) + 32);
      }
      uint64_t v123 = v89;
      sub_13C0970(__p);
      *(void *)__p = operator new(0x20uLL);
      *(_OWORD *)&__p[8] = xmmword_20B91A0;
      strcpy(*(char **)__p, "messageTransitOutOfCoverage");
      __dst[23] = 0;
      __dst[0] = 0;
      sub_DFBD10(&v276, (uint64_t)&v270, (uint64_t)__p, (uint64_t)__dst, 0x7FFFFFFFu, v115, (uint64_t)&v119);
      goto LABEL_329;
    case 0x13u:
      sub_DFBCB4(14, v55, (uint64_t)__p);
      sub_DFBC58((uint64_t)&v122, (uint64_t)__p);
      sub_13C0970(__p);
      if (v53)
      {
        uint64_t v81 = 450;
        if (v115) {
          uint64_t v81 = 453;
        }
        if (SHIBYTE(qword_25EEDD8[v81 + 2]) < 0)
        {
          uint64_t v97 = 450;
          if (v115) {
            uint64_t v97 = 453;
          }
          sub_4200(__p, (void *)qword_25EEDD8[v60], qword_25EEDD8[v97 + 1]);
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)v61;
          *(void *)&__p[16] = v61[2];
        }
      }
      else
      {
        sub_5E5C(__p, "");
      }
      sub_5E5C(__dst, "messageEVOutOfCoverage");
      sub_DFBD10(&v276, (uint64_t)&v270, (uint64_t)__dst, (uint64_t)__p, v55, v115, (uint64_t)&v119);
      goto LABEL_329;
    case 0x14u:
      if (v8 == 2)
      {
        sub_DFBCB4(4, 0x7FFFFFFF, (uint64_t)__p);
        sub_DFBC58((uint64_t)&v122, (uint64_t)__p);
        sub_13C0970(__p);
      }
      int v71 = v115;
      if (!v53 || !v54)
      {
        if (v53) {
          uint64_t v92 = "messageMprBadResponse";
        }
        else {
          uint64_t v92 = "";
        }
        goto LABEL_273;
      }
      uint64_t v85 = 450;
      if (v115) {
        uint64_t v85 = 453;
      }
      if ((SHIBYTE(qword_25EEDD8[v85 + 2]) & 0x80000000) == 0)
      {
        *(_OWORD *)__p = *(_OWORD *)v61;
        *(void *)&__p[16] = v61[2];
        goto LABEL_324;
      }
      uint64_t v101 = 450;
      if (v115) {
        uint64_t v101 = 453;
      }
      goto LABEL_323;
    case 0x15u:
      if (v53 && v54)
      {
        int v78 = v115;
        uint64_t v79 = 450;
        if (v115) {
          uint64_t v79 = 453;
        }
        if (SHIBYTE(qword_25EEDD8[v79 + 2]) < 0)
        {
          uint64_t v100 = 450;
          if (v115) {
            uint64_t v100 = 453;
          }
          sub_4200(__dst, (void *)qword_25EEDD8[v60], qword_25EEDD8[v100 + 1]);
        }
        else
        {
          *(_OWORD *)long long __dst = *(_OWORD *)v61;
          *(void *)&__dst[16] = v61[2];
        }
      }
      else
      {
        if (v53) {
          uint64_t v90 = "messageMprBadResponse";
        }
        else {
          uint64_t v90 = "";
        }
        sub_5E5C(__dst, v90);
        int v78 = v115;
      }
      sub_DFBCB4(5, 0x7FFFFFFF, (uint64_t)__p);
      sub_DFBC58((uint64_t)&v122, (uint64_t)__p);
      sub_13C0970(__p);
      sub_5E5C(__p, "messageGeneric");
      sub_DFBD10(&v276, (uint64_t)&v270, (uint64_t)__p, (uint64_t)__dst, v55, v78, (uint64_t)&v119);
LABEL_300:
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if ((__dst[23] & 0x80000000) == 0) {
        goto LABEL_331;
      }
      operator delete(*(void **)__dst);
      uint64_t v75 = (std::string *)v122;
      uint64_t v76 = v123;
      if (v122 == v123) {
        goto LABEL_340;
      }
      goto LABEL_335;
    case 0x16u:
      sub_DFBCB4(2, 0x7FFFFFFF, (uint64_t)__p);
      sub_DFBC58((uint64_t)&v122, (uint64_t)__p);
      sub_13C0970(__p);
      int v71 = v115;
      if (v53 && v54)
      {
        uint64_t v72 = 450;
        if (v115) {
          uint64_t v72 = 453;
        }
        if (SHIBYTE(qword_25EEDD8[v72 + 2]) < 0)
        {
          uint64_t v101 = 450;
          if (v115) {
            uint64_t v101 = 453;
          }
LABEL_323:
          sub_4200(__p, (void *)qword_25EEDD8[v60], qword_25EEDD8[v101 + 1]);
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)v61;
          *(void *)&__p[16] = v61[2];
        }
      }
      else
      {
        if (v53) {
          uint64_t v92 = "messageMprBadResponse";
        }
        else {
          uint64_t v92 = "";
        }
LABEL_273:
        sub_5E5C(__p, v92);
      }
LABEL_324:
      sub_5E5C(__dst, "messageGeneric");
      sub_DFBD10(&v276, (uint64_t)&v270, (uint64_t)__dst, (uint64_t)__p, v55, v71, (uint64_t)&v119);
LABEL_329:
      if ((__dst[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__dst);
        if ((__p[23] & 0x80000000) == 0)
        {
LABEL_331:
          uint64_t v75 = (std::string *)v122;
          uint64_t v76 = v123;
          if (v122 == v123) {
            goto LABEL_340;
          }
          goto LABEL_335;
        }
      }
      else if ((__p[23] & 0x80000000) == 0)
      {
        goto LABEL_331;
      }
      operator delete(*(void **)__p);
      uint64_t v75 = (std::string *)v122;
      uint64_t v76 = v123;
      if (v122 == v123) {
        goto LABEL_340;
      }
      do
      {
LABEL_335:
        uint64_t v104 = *(_DWORD **)(v2 + 160);
        if (v104 && (uint64_t v105 = *(int *)(v2 + 152), (int)v105 < *v104))
        {
          *(_DWORD *)(v2 + 152) = v105 + 1;
          double v106 = *(std::string **)&v104[2 * v105 + 2];
        }
        else
        {
          sub_13D9AD0(*(void *)(v2 + 144));
          double v106 = (std::string *)sub_188CDC8(v2 + 144, v107);
        }
        sub_13C0E7C(v106, (uint64_t)v75);
        uint64_t v75 = (std::string *)((char *)v75 + 32);
      }
      while (v75 != v76);
LABEL_340:
      sub_13CBD40(&v119);
      uint64_t v108 = (std::string *)v122;
      if (v122)
      {
        uint64_t v109 = v123;
        uint64_t v110 = v122;
        if (v123 != v122)
        {
          do
            uint64_t v109 = (std::string *)sub_13C0970(&v109[-2].__r_.__value_.__r.__words[2]);
          while (v109 != v108);
          uint64_t v110 = v122;
        }
        uint64_t v123 = v108;
        operator delete(v110);
      }
      sub_4F2894((uint64_t)&v270);
      uint64_t v111 = v275;
      if (v275 && !atomic_fetch_add(&v275->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
        std::__shared_weak_count::__release_weak(v111);
      }
      uint64_t v112 = v277;
      if (v277 && !atomic_fetch_add(&v277->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
        std::__shared_weak_count::__release_weak(v112);
      }
      return;
    case 0x17u:
      sub_DFBCB4(19, 0x7FFFFFFF, (uint64_t)__p);
      sub_DFBC58((uint64_t)&v122, (uint64_t)__p);
LABEL_165:
      sub_13C0970(__p);
      uint64_t v75 = (std::string *)v122;
      uint64_t v76 = v123;
      if (v122 == v123) {
        goto LABEL_340;
      }
      goto LABEL_335;
    case 0x18u:
      sub_13C08C8((uint64_t)__p, 0, 0);
      *(_DWORD *)&__p[16] |= 3u;
      *(void *)&long long v126 = 2;
      sub_DFBC58((uint64_t)&v122, (uint64_t)__p);
      sub_13C0970(__p);
      sub_5E5C(__p, "messageStartFarFromRoads");
      sub_5E5C(__dst, "");
      sub_DFBD10(&v276, (uint64_t)&v270, (uint64_t)__p, (uint64_t)__dst, 0x7FFFFFFFu, v115, (uint64_t)&v119);
      goto LABEL_329;
    case 0x19u:
      sub_13C08C8((uint64_t)__p, 0, 0);
      *(_DWORD *)&__p[16] |= 3u;
      *(void *)&long long v126 = 3;
      sub_DFBC58((uint64_t)&v122, (uint64_t)__p);
      sub_13C0970(__p);
      sub_5E5C(__p, "messageStartOutOfCoverage");
      sub_5E5C(__dst, "");
      sub_DFBD10(&v276, (uint64_t)&v270, (uint64_t)__p, (uint64_t)__dst, 0x7FFFFFFFu, v115, (uint64_t)&v119);
      goto LABEL_329;
    case 0x1Au:
      sub_13C08C8((uint64_t)__p, 0, 0);
      *(_DWORD *)&__p[16] |= 3u;
      *(void *)&long long v126 = 14;
      sub_DFBC58((uint64_t)&v122, (uint64_t)__p);
      sub_13C0970(__p);
      sub_5E5C(__p, "messageEVStartOutOfCoverage");
      sub_5E5C(__dst, "");
      sub_DFBD10(&v276, (uint64_t)&v270, (uint64_t)__p, (uint64_t)__dst, 0x7FFFFFFFu, v115, (uint64_t)&v119);
      goto LABEL_329;
    case 0x1Bu:
    case 0x1Cu:
      sub_13C08C8((uint64_t)__p, 0, 0);
      *(_DWORD *)&__p[16] |= 3u;
      *(void *)&long long v126 = 3;
      if ((unint64_t)v123 >= v124) {
        uint64_t v63 = sub_E00774((std::string **)&v122, (uint64_t)__p);
      }
      else {
        uint64_t v63 = (std::string *)((char *)sub_E00894(v123, (uint64_t)__p) + 32);
      }
      uint64_t v123 = v63;
      sub_13C0970(__p);
      *(void *)__p = operator new(0x28uLL);
      *(_OWORD *)&__p[8] = xmmword_20B9390;
      strcpy(*(char **)__p, "messageTransitStartOutOfCoverage");
      __dst[23] = 0;
      __dst[0] = 0;
      sub_DFBD10(&v276, (uint64_t)&v270, (uint64_t)__p, (uint64_t)__dst, 0x7FFFFFFFu, v115, (uint64_t)&v119);
      goto LABEL_329;
    case 0x1Du:
      if (v8 == 2)
      {
        sub_13C08C8((uint64_t)__p, 0, 0);
        *(_DWORD *)&__p[16] |= 3u;
        *(void *)&long long v126 = 4;
        sub_DFBC58((uint64_t)&v122, (uint64_t)__p);
        sub_13C0970(__p);
        sub_5E5C(__p, "messageStartNoWalking");
      }
      else
      {
        sub_5E5C(__p, "messageStartFarFromRoads");
      }
      goto LABEL_126;
    case 0x1Eu:
      sub_13C08C8((uint64_t)__p, 0, 0);
      *(_DWORD *)&__p[16] |= 3u;
      *(void *)&long long v126 = 5;
      sub_DFBC58((uint64_t)&v122, (uint64_t)__p);
      sub_13C0970(__p);
      sub_5E5C(__p, "messageStartFarFromRoads");
      sub_5E5C(__dst, "");
      sub_DFBD10(&v276, (uint64_t)&v270, (uint64_t)__p, (uint64_t)__dst, 0x7FFFFFFFu, v115, (uint64_t)&v119);
      goto LABEL_329;
    case 0x1Fu:
      sub_13C08C8((uint64_t)__p, 0, 0);
      *(_DWORD *)&__p[16] |= 3u;
      *(void *)&long long v126 = 0x100000002;
      sub_DFBC58((uint64_t)&v122, (uint64_t)__p);
      sub_13C0970(__p);
      if (v53 && v54)
      {
        uint64_t v73 = 450;
        if (v115) {
          uint64_t v73 = 453;
        }
        if (SHIBYTE(qword_25EEDD8[v73 + 2]) < 0)
        {
          uint64_t v103 = 450;
          if (v115) {
            uint64_t v103 = 453;
          }
          sub_4200(__p, (void *)qword_25EEDD8[v60], qword_25EEDD8[v103 + 1]);
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)v61;
          *(void *)&__p[16] = v61[2];
        }
      }
      else
      {
        if (v53) {
          uint64_t v94 = "messageMprBadResponse";
        }
        else {
          uint64_t v94 = "";
        }
        sub_5E5C(__p, v94);
      }
      sub_5E5C(__dst, "messageEndFarFromRoads");
      sub_DFBD10(&v276, (uint64_t)&v270, (uint64_t)__dst, (uint64_t)__p, v55, v115, (uint64_t)&v119);
      goto LABEL_329;
    case 0x20u:
      if (v55 == 0x7FFFFFFF) {
        int v82 = 1;
      }
      else {
        int v82 = v55;
      }
      sub_DFBCB4(3, v82, (uint64_t)__p);
      sub_DFBC58((uint64_t)&v122, (uint64_t)__p);
      sub_13C0970(__p);
      sub_5E5C(__p, "messageEndOutOfCoverage");
      if (v53) {
        uint64_t v83 = "messageMprBadResponse";
      }
      else {
        uint64_t v83 = "";
      }
      sub_5E5C(__dst, v83);
      sub_DFBD10(&v276, (uint64_t)&v270, (uint64_t)__p, (uint64_t)__dst, v55, v115, (uint64_t)&v119);
      goto LABEL_329;
    case 0x21u:
      if (v55 == 0x7FFFFFFF) {
        int v86 = 1;
      }
      else {
        int v86 = v55;
      }
      sub_DFBCB4(14, v86, (uint64_t)__p);
      sub_DFBC58((uint64_t)&v122, (uint64_t)__p);
      sub_13C0970(__p);
      if (v53)
      {
        uint64_t v87 = 450;
        if (v115) {
          uint64_t v87 = 453;
        }
        if (SHIBYTE(qword_25EEDD8[v87 + 2]) < 0)
        {
          uint64_t v98 = 450;
          if (v115) {
            uint64_t v98 = 453;
          }
          sub_4200(__p, (void *)qword_25EEDD8[v60], qword_25EEDD8[v98 + 1]);
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)v61;
          *(void *)&__p[16] = v61[2];
        }
      }
      else
      {
        sub_5E5C(__p, "");
      }
      sub_5E5C(__dst, "messageEVEndOutOfCoverage");
      sub_DFBD10(&v276, (uint64_t)&v270, (uint64_t)__dst, (uint64_t)__p, v55, v115, (uint64_t)&v119);
      goto LABEL_329;
    case 0x22u:
    case 0x23u:
      sub_13C08C8((uint64_t)__p, 0, 0);
      *(_DWORD *)&__p[16] |= 3u;
      *(void *)&long long v126 = 0x100000003;
      if ((unint64_t)v123 >= v124) {
        uint64_t v64 = sub_E00774((std::string **)&v122, (uint64_t)__p);
      }
      else {
        uint64_t v64 = (std::string *)((char *)sub_E00894(v123, (uint64_t)__p) + 32);
      }
      uint64_t v123 = v64;
      sub_13C0970(__p);
      *(void *)__p = operator new(0x20uLL);
      *(_OWORD *)&__p[8] = xmmword_20B9800;
      strcpy(*(char **)__p, "messageTransitEndOutOfCoverage");
      __dst[23] = 0;
      __dst[0] = 0;
      sub_DFBD10(&v276, (uint64_t)&v270, (uint64_t)__p, (uint64_t)__dst, 0x7FFFFFFFu, v115, (uint64_t)&v119);
      goto LABEL_329;
    case 0x24u:
      if (v8 == 2)
      {
        sub_13C08C8((uint64_t)__p, 0, 0);
        *(_DWORD *)&__p[16] |= 3u;
        *(void *)&long long v126 = 0x100000004;
        sub_DFBC58((uint64_t)&v122, (uint64_t)__p);
        sub_13C0970(__p);
        sub_5E5C(__p, "messageEndNoWalking");
      }
      else
      {
        sub_5E5C(__p, "messageEndFarFromRoads");
      }
LABEL_126:
      sub_5E5C(__dst, "");
      sub_DFBD10(&v276, (uint64_t)&v270, (uint64_t)__p, (uint64_t)__dst, 0x7FFFFFFFu, v115, (uint64_t)&v119);
      goto LABEL_329;
    case 0x25u:
      sub_13C08C8((uint64_t)__p, 0, 0);
      *(_DWORD *)&__p[16] |= 3u;
      *(void *)&long long v126 = 0x100000005;
      sub_DFBC58((uint64_t)&v122, (uint64_t)__p);
      sub_13C0970(__p);
      sub_5E5C(__p, "messageEndFarFromRoads");
      sub_5E5C(__dst, "");
      sub_DFBD10(&v276, (uint64_t)&v270, (uint64_t)__p, (uint64_t)__dst, 0x7FFFFFFFu, v115, (uint64_t)&v119);
      goto LABEL_329;
    case 0x26u:
      sub_DFBCB4(1, 0x7FFFFFFF, (uint64_t)__p);
      sub_DFBC58((uint64_t)&v122, (uint64_t)__p);
      sub_13C0970(__p);
      sub_5E5C(__p, "messageTransitGeneric");
      sub_5E5C(__dst, "");
      sub_DFBD10(&v276, (uint64_t)&v270, (uint64_t)__p, (uint64_t)__dst, 0x7FFFFFFFu, v115, (uint64_t)&v119);
      goto LABEL_329;
    case 0x27u:
    case 0x28u:
    case 0x2Au:
      __p[23] = 21;
      strcpy(__p, "messageTransitGeneric");
      __dst[23] = 0;
      __dst[0] = 0;
      sub_DFBD10(&v276, (uint64_t)&v270, (uint64_t)__p, (uint64_t)__dst, 0x7FFFFFFFu, v115, (uint64_t)&v119);
      goto LABEL_329;
    case 0x29u:
      sub_5E5C(__p, "messageTransitBlocked");
      sub_5E5C(__dst, "");
      sub_DFBD10(&v276, (uint64_t)&v270, (uint64_t)__p, (uint64_t)__dst, 0x7FFFFFFFu, v115, (uint64_t)&v119);
      goto LABEL_329;
    default:
      goto LABEL_331;
  }
}

void sub_DFE264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a32);
  sub_13CBD40(&a22);
  sub_DFBEC0(&a29);
  sub_4F2894((uint64_t)&STACK[0x8C0]);
  sub_14A84(v32 - 128);
  sub_14A84(v32 - 112);
  _Unwind_Resume(a1);
}

uint64_t sub_DFE824(unsigned int a1)
{
  uint64_t result = 0;
  if (a1 <= 0x2B)
  {
    if (((1 << a1) & 0x30E170BE00) != 0)
    {
      return 1;
    }
    else if (((1 << a1) & 0x80000000001) != 0)
    {
      *(void *)&v10.__val_ = a1;
      v10.__cat_ = (const std::error_category *)&off_2439090;
      std::error_condition::message(&v11, &v10);
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)&v10);
        uint64_t v3 = sub_188FC78(&v10, (uint64_t)"Unexpected error code: ", 23);
        if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v4 = &v11;
        }
        else {
          uint64_t v4 = (std::string *)v11.__r_.__value_.__r.__words[0];
        }
        if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v11.__r_.__value_.__l.__size_;
        }
        sub_188FC78(v3, (uint64_t)v4, size);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&__p, 3u);
        if (v9 < 0) {
          operator delete(__p);
        }
        sub_111ECAC((uint64_t)&v10);
      }
      exception = __cxa_allocate_exception(0x40uLL);
      std::operator+<char>();
      int v7 = (void *)sub_2F404((uint64_t)exception, (long long *)&v10.__val_);
    }
  }
  return result;
}

void sub_DFE97C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a16);
  if (*(char *)(v21 - 33) < 0)
  {
    operator delete(*(void **)(v21 - 56));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_DFEA24(unsigned int a1)
{
  uint64_t result = 0;
  if (a1 <= 0x2B)
  {
    if (((1 << a1) & 0x204084024) != 0)
    {
      return 1;
    }
    else if (((1 << a1) & 0x80000000001) != 0)
    {
      *(void *)&v10.__val_ = a1;
      v10.__cat_ = (const std::error_category *)&off_2439090;
      std::error_condition::message(&v11, &v10);
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)&v10);
        uint64_t v3 = sub_188FC78(&v10, (uint64_t)"Unexpected error code: ", 23);
        if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v4 = &v11;
        }
        else {
          uint64_t v4 = (std::string *)v11.__r_.__value_.__r.__words[0];
        }
        if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v11.__r_.__value_.__l.__size_;
        }
        sub_188FC78(v3, (uint64_t)v4, size);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&__p, 3u);
        if (v9 < 0) {
          operator delete(__p);
        }
        sub_111ECAC((uint64_t)&v10);
      }
      exception = __cxa_allocate_exception(0x40uLL);
      std::operator+<char>();
      int v7 = (void *)sub_2F404((uint64_t)exception, (long long *)&v10.__val_);
    }
  }
  return result;
}

void sub_DFEB7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a16);
  if (*(char *)(v21 - 33) < 0)
  {
    operator delete(*(void **)(v21 - 56));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_DFEC24(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6 = sub_8D7730(*a1, a3);
  sub_5F41E8(a5, (uint64_t)v6);
  sub_5F1DD0(v7, (long long *)byte_25EE098, 17);
  operator new();
}

void sub_E0060C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  if (*(char *)(v37 - 153) < 0)
  {
    operator delete(*(void **)(v36 + 256));
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
LABEL_6:
    sub_4F31D0(&a22);
    sub_4DC6B8((uint64_t)&a36);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  goto LABEL_6;
}

void sub_E00714(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_E00730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

std::string *sub_E00774(std::string **a1, uint64_t a2)
{
  uint64_t v3 = ((char *)a1[1] - (char *)*a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v6 = (char *)a1[2] - (char *)*a1;
  if (v6 >> 4 > v4) {
    unint64_t v4 = v6 >> 4;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  if (v7)
  {
    if (v7 >> 59) {
      sub_188D718();
    }
    int v8 = (char *)operator new(32 * v7);
  }
  else
  {
    int v8 = 0;
  }
  char v9 = (std::string *)&v8[32 * v7];
  std::error_condition v10 = sub_E00894((std::string *)&v8[32 * v3], a2);
  std::string v11 = (std::string *)((char *)v10 + 32);
  BOOL v13 = *a1;
  uint64_t v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = v10;
    a1[1] = v11;
    a1[2] = v9;
    if (!v12) {
      return v11;
    }
    goto LABEL_17;
  }
  do
  {
    uint64_t v12 = (std::string *)((char *)v12 - 32);
    std::error_condition v10 = sub_E00894((std::string *)((char *)v10 - 32), (uint64_t)v12);
  }
  while (v12 != v13);
  uint64_t v14 = *a1;
  uint64_t v12 = a1[1];
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v9;
  if (v12 != v14)
  {
    do
    {
      uint64_t v12 = (std::string *)((char *)v12 - 32);
      sub_13C0970(v12);
    }
    while (v12 != v14);
    uint64_t v12 = v14;
  }
  if (v12) {
LABEL_17:
  }
    operator delete(v12);
  return v11;
}

std::string *sub_E00894(std::string *a1, uint64_t a2)
{
  sub_13C08C8((uint64_t)a1, 0, 0);
  if (a1 != (std::string *)a2)
  {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
    if ((size & 2) != 0)
    {
      uint64_t v5 = 0;
    }
    else
    {
      uint64_t v5 = (void *)(size & 0xFFFFFFFFFFFFFFFCLL);
      if (size) {
        uint64_t v5 = (void *)*v5;
      }
    }
    uint64_t v6 = *(void *)(a2 + 8);
    if ((v6 & 2) != 0)
    {
      unint64_t v7 = 0;
    }
    else
    {
      unint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (v6) {
        unint64_t v7 = (void *)*v7;
      }
    }
    if (v5 == v7) {
      sub_13C0ED0((uint64_t)a1, a2);
    }
    else {
      sub_13C0E7C(a1, a2);
    }
  }
  return a1;
}

void sub_E00934()
{
  byte_25EBE17 = 1;
  word_25EBE00 = 65;
  byte_25EBE2F = 1;
  word_25EBE18 = 65;
  strcpy(&byte_25EBE47, "\n\x1B\\toi=orth\\"");
  strcpy((char *)&qword_25EBE30, "\x1B\\toi=lhp\\"");
  byte_25EBE5F = 11;
  qword_25EBE60 = (uint64_t)operator new(0x19uLL);
  long long v278 = xmmword_20B9250;
  unk_25EBE68 = xmmword_20B9250;
  strcpy((char *)qword_25EBE60, "\x1B\\toi=x-sampa-internal\\"");
  byte_25EBE8F = 13;
  strcpy((char *)&qword_25EBE78, "\x1B\\tn=address\\"");
  strcpy(&byte_25EBEA7, "\t\x1B\\tn=normal\\"");
  strcpy((char *)&qword_25EBE90, "\x1B\\tn=nav\\"");
  byte_25EBEBF = 12;
  byte_25EBED7 = 7;
  strcpy((char *)&dword_25EBEC0, "\x1B\\lang=");
  byte_25EBEEF = 1;
  word_25EBED8 = 92;
  byte_25EBF07 = 4;
  strcpy((char *)&qword_25EBEF0, "DEV:");
  byte_25EBF1F = 8;
  strcpy((char *)&qword_25EBF08, "Continue");
  byte_25EBF37 = 11;
  strcpy((char *)&qword_25EBF20, "Start_Route");
  byte_25EBF4F = 14;
  strcpy((char *)&qword_25EBF38, "Continue_Route");
  byte_25EBF67 = 12;
  strcpy((char *)&qword_25EBF50, "Resume_Route");
  byte_25EBF7F = 18;
  strcpy((char *)&xmmword_25EBF68, "Start_Route_U_Turn");
  byte_25EBF97 = 7;
  strcpy((char *)&dword_25EBF80, "_U_Turn");
  qword_25EBFA8 = 0x1300000000000000;
  qmemcpy(&unk_25EBFB0, "Continue_Route", 14);
  dword_25EBFA0 = 1702131055;
  qword_25EBF98 = *(void *)"Resume_Route";
  *(int *)((char *)&dword_25EBFA4 + 3) = 1852994900;
  dword_25EBFA4 = 1415533919;
  qword_25EBFC0 = 0x1500000000000000;
  strcpy(byte_25EBFC8, "Left_Turn");
  unk_25EBFBE = 1415533919;
  *(_DWORD *)((char *)&qword_25EBFC0 + 1) = 1852994900;
  strcpy(&byte_25EBFDF, "\tRight_Turn");
  strcpy(&byte_25EBFF7, "\nLeft_Turn_At_End");
  byte_25EC00F = 16;
  byte_25EC027 = 17;
  strcpy((char *)&xmmword_25EC010, "Right_Turn_At_End");
  byte_25EC03F = 15;
  strcpy((char *)&qword_25EC028, "Sharp_Left_Turn");
  byte_25EC057 = 16;
  strcpy((char *)&xmmword_25EC040, "Sharp_Right_Turn");
  byte_25EC06F = 16;
  strcpy((char *)&xmmword_25EC058, "Slight_Left_Turn");
  byte_25EC087 = 17;
  strcpy((char *)&xmmword_25EC070, "Slight_Right_Turn");
  strcpy(&byte_25EC09F, "\tKeep_Right");
  strcpy((char *)&qword_25EC088, "Keep_Left");
  strcpy(&byte_25EC0B7, "\nU_Turn");
  byte_25EC0CF = 6;
  byte_25EC0E7 = 14;
  strcpy((char *)&qword_25EC0D0, "Walking_U_Turn");
  byte_25EC0FF = 20;
  strcpy((char *)&xmmword_25EC0E8, "U_Turn_When_Possible");
  byte_25EC117 = 20;
  strcpy((char *)&xmmword_25EC100, "U_Turn_At_Roundabout");
  byte_25EC12F = 11;
  strcpy((char *)&qword_25EC118, "Enter_Ferry");
  strcpy(&byte_25EC147, "\nChange_Ferry");
  strcpy((char *)&qword_25EC130, "Exit_Ferry");
  strcpy((char *)&xmmword_25EC160, "Enter_Railway_Shuttle");
  strcpy((char *)&xmmword_25EC178, "Exit_Railway_Shuttle");
  strcpy((char *)&xmmword_25EC190, "Change_Railway_Shuttle");
  strcpy((char *)&xmmword_25EC1A8, "End_Of_Navigation");
  strcpy((char *)&xmmword_25EC1C0, "End_Of_Navigation");
  strcpy((char *)&qword_25EC1D8, "Destination");
  strcpy((char *)&xmmword_25EC1F0, "Destination_On_left");
  strcpy((char *)&xmmword_25EC208, "Destination_On_Right");
  strcpy((char *)&xmmword_25EC250, "First_Stop_On_Right");
  strcpy((char *)&xmmword_25EC298, "Next_Stop_On_Right");
  byte_25EC15F = 12;
  byte_25EC177 = 21;
  byte_25EC18F = 20;
  strcpy((char *)&xmmword_25EC2C8, "Waypoint_Stop_On_Left");
  byte_25EC1A7 = 22;
  byte_25EC1BF = 17;
  byte_25EC1D7 = 17;
  byte_25EC1EF = 11;
  byte_25EC207 = 19;
  byte_25EC21F = 20;
  strcpy(&byte_25EC237, "\nFirst_Stop_On_left");
  *(void *)&v267[0] = *(void *)"First_Stop";
  strcpy((char *)&qword_25EC220, "First_Stop");
  byte_25EC24F = 18;
  byte_25EC267 = 19;
  strcpy(&byte_25EC27F, "\tNext_Stop_On_left");
  strcpy((char *)&qword_25EC2B0, "Waypoint_Stop");
  strcpy((char *)&xmmword_25EC2E0, "Waypoint_Stop_On_Right");
  strcpy((char *)&qword_25EC2F8, "Roundabout_");
  *(void *)&v263[48] = *(void *)"Next_Stop";
  strcpy((char *)&qword_25EC268, "Next_Stop");
  byte_25EC297 = 17;
  byte_25EC2AF = 18;
  byte_25EC2C7 = 13;
  byte_25EC2DF = 21;
  byte_25EC2F7 = 22;
  byte_25EC30F = 11;
  byte_25EC327 = 16;
  strcpy((char *)&xmmword_25EC310, "Enter_Roundabout");
  qword_25EC328 = (uint64_t)operator new(0x20uLL);
  long long v277 = xmmword_20B91C0;
  xmmword_25EC330 = xmmword_20B91C0;
  strcpy((char *)qword_25EC328, "Walking_Enter_Roundabout");
  byte_25EC357 = 16;
  strcpy((char *)&xmmword_25EC340, "Leave_Roundabout");
  byte_25EC36F = 21;
  strcpy((char *)&xmmword_25EC358, "Roundabout_First_Exit");
  byte_25EC387 = 22;
  strcpy((char *)&xmmword_25EC370, "Roundabout_Second_Exit");
  byte_25EC39F = 21;
  strcpy((char *)&xmmword_25EC388, "Roundabout_Third_Exit");
  strcpy((char *)&xmmword_25EC3A0, "Roundabout_Fourth_Exit");
  HIBYTE(word_25EC3B6) = 22;
  byte_25EC3CF = 21;
  strcpy((char *)&xmmword_25EC3B8, "Roundabout_Fifth_Exit");
  byte_25EC3E7 = 21;
  strcpy((char *)&xmmword_25EC3D0, "Roundabout_Sixth_Exit");
  qword_25EC3E8 = (uint64_t)operator new(0x19uLL);
  xmmword_25EC3F0 = xmmword_20B9250;
  strcpy((char *)qword_25EC3E8, "Roundabout_Seventh_Exit");
  strcpy((char *)&xmmword_25EC400, "Roundabout_Eighth_Exit");
  HIBYTE(word_25EC416) = 22;
  byte_25EC42F = 21;
  strcpy((char *)&xmmword_25EC418, "Roundabout_Ninth_Exit");
  byte_25EC447 = 21;
  strcpy((char *)&xmmword_25EC430, "Roundabout_Tenth_Exit");
  qword_25EC448 = (uint64_t)operator new(0x20uLL);
  xmmword_25EC450 = xmmword_20B91C0;
  strcpy((char *)qword_25EC448, "Roundabout_Eleventh_Exit");
  qword_25EC460 = (uint64_t)operator new(0x19uLL);
  unk_25EC468 = xmmword_20B9250;
  strcpy((char *)qword_25EC460, "Roundabout_Twelfth_Exit");
  qword_25EC478 = (uint64_t)operator new(0x20uLL);
  long long v274 = xmmword_20B5EB0;
  xmmword_25EC480 = xmmword_20B5EB0;
  strcpy((char *)qword_25EC478, "Roundabout_Thirteenth_Exit");
  qword_25EC490 = (uint64_t)operator new(0x20uLL);
  unk_25EC498 = xmmword_20B5EB0;
  strcpy((char *)qword_25EC490, "Roundabout_Fourteenth_Exit");
  qword_25EC4A8 = (uint64_t)operator new(0x20uLL);
  long long v276 = xmmword_20B8870;
  xmmword_25EC4B0 = xmmword_20B8870;
  strcpy((char *)qword_25EC4A8, "Roundabout_Fifteenth_Exit");
  qword_25EC4C0 = (uint64_t)operator new(0x20uLL);
  unk_25EC4C8 = xmmword_20B8870;
  strcpy((char *)qword_25EC4C0, "Roundabout_Sixteenth_Exit");
  qword_25EC4D8 = (uint64_t)operator new(0x20uLL);
  long long v271 = xmmword_20B91A0;
  xmmword_25EC4E0 = xmmword_20B91A0;
  strcpy((char *)qword_25EC4D8, "Roundabout_Seventeenth_Exit");
  qword_25EC4F0 = (uint64_t)operator new(0x20uLL);
  unk_25EC4F8 = xmmword_20B5EB0;
  strcpy((char *)qword_25EC4F0, "Roundabout_Eighteenth_Exit");
  qword_25EC508 = (uint64_t)operator new(0x20uLL);
  xmmword_25EC510 = xmmword_20B5EB0;
  strcpy((char *)qword_25EC508, "Roundabout_Nineteenth_Exit");
  byte_25EC537 = 8;
  strcpy((char *)&qword_25EC520, "Off_Ramp");
  byte_25EC54F = 16;
  strcpy((char *)&xmmword_25EC538, "Off_Ramp_On_Left");
  byte_25EC567 = 17;
  strcpy((char *)&xmmword_25EC550, "Off_Ramp_On_Right");
  byte_25EC57F = 14;
  strcpy((char *)&qword_25EC568, "Change_Highway");
  strcpy((char *)&xmmword_25EC580, "Change_Highway_On_Left");
  HIBYTE(word_25EC596) = 22;
  qword_25EC598 = (uint64_t)operator new(0x19uLL);
  xmmword_25EC5A0 = xmmword_20B9250;
  strcpy((char *)qword_25EC598, "Change_Highway_On_Right");
  byte_25EC5C7 = 5;
  dword_25EC5B0 = 1735550285;
  byte_25EC5B4 = 101;
  byte_25EC5B5 = 0;
  byte_25EC5DF = 12;
  strcpy((char *)&qword_25EC5C8, "Enter_Detour");
  byte_25EC5F7 = 11;
  strcpy((char *)&qword_25EC5E0, "Exit_Detour");
  byte_25EC60F = 18;
  strcpy((char *)&xmmword_25EC5F8, "Walking_Turnaround");
  qword_25EC610 = (uint64_t)operator new(0x19uLL);
  unk_25EC618 = xmmword_20B9250;
  strcpy((char *)qword_25EC610, "Walking_Turnaround_Sign");
  byte_25EC63F = 19;
  strcpy((char *)&xmmword_25EC628, "Distance_Title_List");
  qword_25EC640 = (uint64_t)operator new(0x19uLL);
  unk_25EC648 = xmmword_20B9250;
  strcpy((char *)qword_25EC640, "Cross_The_Street_Spoken");
  *(void *)&v267[1] = *(void *)"t_Spoken";
  byte_25EC66F = 19;
  strcpy((char *)&xmmword_25EC658, "Arrival_Charge_List");
  byte_25EC687 = 15;
  strcpy((char *)&qword_25EC670, "Charge_At_Start");
  strcpy(&byte_25EC69F, "\tPass_Street");
  strcpy((char *)&qword_25EC688, "Pass_Exit");
  byte_25EC6B7 = 11;
  byte_25EC6CF = 17;
  strcpy((char *)&xmmword_25EC6B8, "Pass_Intersection");
  strcpy(&byte_25EC6E7, "\t_PrevExitNumber");
  strcpy((char *)&qword_25EC6D0, "Next_Exit");
  byte_25EC6FF = 15;
  strcpy(&byte_25EC717, "\t_PrevUTurn");
  strcpy((char *)&qword_25EC700, "_PrevRoad");
  strcpy(&byte_25EC72F, "\nNext_");
  byte_25EC747 = 5;
  byte_25EC75F = 15;
  strcpy((char *)&qword_25EC748, "_At_Next_Street");
  byte_25EC777 = 21;
  strcpy((char *)&xmmword_25EC760, "_At_Next_Intersection");
  byte_25EC78F = 14;
  strcpy((char *)&qword_25EC778, "Charge_Station");
  byte_25EC7A7 = 15;
  strcpy((char *)&qword_25EC790, "_Charge_Station");
  BYTE1(qword_25EC7B8) = 0;
  WORD1(qword_25EC7B8) = 25856;
  HIDWORD(qword_25EC7B8) = 335544320;
  strcpy((char *)&qword_25EC7A8, "_Charge_Station_");
  byte_25EC7D7 = 8;
  strcpy((char *)&qword_25EC7C0, "_Minimum");
  byte_25EC7EF = 15;
  strcpy((char *)&qword_25EC7D8, "ExitShield_Sign");
  byte_25EC807 = 8;
  strcpy((char *)&qword_25EC7F0, "Walking_");
  byte_25EC81F = 16;
  strcpy((char *)&xmmword_25EC808, "Walking_Continue");
  byte_25EC837 = 19;
  strcpy((char *)&xmmword_25EC820, "Walking_Start_Route");
  qword_25EC838 = (uint64_t)operator new(0x20uLL);
  xmmword_25EC840 = xmmword_20B5EB0;
  strcpy((char *)qword_25EC838, "Walking_Start_Route_U_Turn");
  byte_25EC867 = 17;
  strcpy((char *)&xmmword_25EC850, "Walking_Left_Turn");
  byte_25EC87F = 18;
  strcpy((char *)&xmmword_25EC868, "Walking_Right_Turn");
  qword_25EC880 = (uint64_t)operator new(0x20uLL);
  unk_25EC888 = xmmword_20B5EB0;
  strcpy((char *)qword_25EC880, "Walking_Turn_At_Roundabout");
  qword_25EC898 = (uint64_t)operator new(0x20uLL);
  long long v275 = xmmword_20B91B0;
  xmmword_25EC8A0 = xmmword_20B91B0;
  strcpy((char *)qword_25EC898, "Walking_U_Turn_When_Possible");
  qword_25EC8B0 = (uint64_t)operator new(0x28uLL);
  long long v268 = xmmword_20B9390;
  unk_25EC8B8 = xmmword_20B9390;
  strcpy((char *)qword_25EC8B0, "Walking_Roundabout_Exit_Continue");
  qword_25EC8C8 = (uint64_t)operator new(0x20uLL);
  xmmword_25EC8D0 = xmmword_20B91B0;
  strcpy((char *)qword_25EC8C8, "Walking_Roundabout_Exit_Left");
  qword_25EC8E0 = (uint64_t)operator new(0x20uLL);
  long long v273 = xmmword_20B8890;
  unk_25EC8E8 = xmmword_20B8890;
  strcpy((char *)qword_25EC8E0, "Walking_Roundabout_Exit_Right");
  qword_25EC8F8 = (uint64_t)operator new(0x20uLL);
  xmmword_25EC900 = xmmword_20B8870;
  strcpy((char *)qword_25EC8F8, "Walking_End_Of_Navigation");
  qmemcpy(v270, "nd_Of_NavigationCross_The_Street", sizeof(v270));
  uint64_t v0 = (char *)operator new(0x20uLL);
  qword_25EC910 = (uint64_t)v0;
  unk_25EC918 = xmmword_20B8870;
  *(_OWORD *)uint64_t v0 = *(_OWORD *)"Walking_End_Of_Navigation";
  *(_OWORD *)(v0 + 9) = v270[0];
  v0[25] = 0;
  byte_25EC93F = 8;
  strcpy((char *)&qword_25EC928, "Walking_");
  qword_25EC940 = (uint64_t)operator new(0x19uLL);
  unk_25EC948 = v278;
  strcpy((char *)qword_25EC940, "Walking_Sharp_Left_Turn");
  qword_25EC958 = (uint64_t)operator new(0x20uLL);
  xmmword_25EC960 = v277;
  strcpy((char *)qword_25EC958, "Walking_Sharp_Right_Turn");
  qword_25EC970 = (uint64_t)operator new(0x20uLL);
  unk_25EC978 = v277;
  strcpy((char *)qword_25EC970, "Walking_Slight_Left_Turn");
  qword_25EC988 = (uint64_t)operator new(0x20uLL);
  xmmword_25EC990 = v276;
  strcpy((char *)qword_25EC988, "Walking_Slight_Right_Turn");
  byte_25EC9B7 = 4;
  strcpy((char *)&dword_25EC9A0, "Exit");
  byte_25EC9CF = 4;
  strcpy((char *)&dword_25EC9B8, "Road");
  byte_25EC9E7 = 7;
  strcpy((char *)&dword_25EC9D0, "Freeway");
  byte_25EC9FF = 12;
  strcpy((char *)&qword_25EC9E8, "Intersection");
  byte_25ECA17 = 5;
  strcpy((char *)&dword_25ECA00, "Ferry");
  byte_25ECA2F = 11;
  strcpy((char *)&qword_25ECA18, "ShuttleName");
  byte_25ECA47 = 5;
  strcpy((char *)&dword_25ECA30, "Road1");
  strcpy(&byte_25ECA5F, "\tName");
  strcpy((char *)&qword_25ECA48, "Signpost1");
  byte_25ECA77 = 4;
  byte_25ECA8F = 7;
  strcpy((char *)&dword_25ECA78, "Address");
  byte_25ECAA7 = 7;
  strcpy((char *)&dword_25ECA90, "Shield1");
  byte_25ECABF = 13;
  strcpy((char *)&qword_25ECAA8, "TowardShield1");
  byte_25ECAD7 = 6;
  strcpy((char *)&dword_25ECAC0, "Right_");
  byte_25ECAEF = 5;
  byte_25ECADC = 95;
  dword_25ECAD8 = 1952867660;
  byte_25ECADD = 0;
  strcpy(&byte_25ECB07, "\tOn_Left_");
  strcpy((char *)&qword_25ECAF0, "On_Right_");
  byte_25ECB1F = 8;
  byte_25ECB37 = 12;
  strcpy((char *)&qword_25ECB20, "ElevatorName");
  byte_25ECB4F = 13;
  strcpy((char *)&qword_25ECB38, "EscalatorName");
  strcpy(&byte_25ECB67, "\nBridgeName");
  strcpy((char *)&qword_25ECB50, "StairsName");
  strcpy(&byte_25ECB7F, "\nTunnelName");
  strcpy(&byte_25ECB97, "\nParking");
  byte_25ECBAF = 7;
  strcpy(&byte_25ECBC7, "\t_Escalator");
  strcpy((char *)&qword_25ECBB0, "_Elevator");
  strcpy(&byte_25ECBDF, "\n_ElevatorName");
  byte_25ECBF7 = 13;
  byte_25ECC0F = 14;
  strcpy((char *)&qword_25ECBF8, "_EscalatorName");
  byte_25ECC27 = 5;
  strcpy((char *)&qword_25ECC10, "_Road");
  byte_25ECC3F = 8;
  strcpy((char *)&qword_25ECC28, "_Freeway");
  byte_25ECC57 = 13;
  strcpy((char *)&qword_25ECC40, "_Intersection");
  byte_25ECC6F = 6;
  strcpy((char *)&dword_25ECC58, "_Road1");
  byte_25ECC87 = 6;
  strcpy((char *)&dword_25ECC70, "_Road2");
  strcpy(&byte_25ECC9F, "\n_Signpost2");
  strcpy((char *)&qword_25ECC88, "_Signpost1");
  strcpy(&byte_25ECCB7, "\n_Ferry");
  byte_25ECCCF = 6;
  byte_25ECCE7 = 12;
  strcpy((char *)&qword_25ECCD0, "_Ferry_Ferry");
  byte_25ECCFF = 12;
  strcpy((char *)&qword_25ECCE8, "_ShuttleName");
  qword_25ECD00 = (uint64_t)operator new(0x20uLL);
  unk_25ECD08 = v275;
  strcpy((char *)qword_25ECD00, "_Railway_Shuttle_ShuttleName");
  byte_25ECD2F = 11;
  strcpy((char *)&qword_25ECD18, "_ExitNumber");
  byte_25ECD47 = 5;
  dword_25ECD30 = 1769489759;
  byte_25ECD34 = 116;
  byte_25ECD35 = 0;
  byte_25ECD5F = 7;
  strcpy((char *)&dword_25ECD48, "_StayOn");
  byte_25ECD77 = 7;
  strcpy((char *)&dword_25ECD60, "_Stairs");
  byte_25ECD8F = 5;
  strcpy((char *)&dword_25ECD78, "_Ramp");
  byte_25ECDA7 = 11;
  strcpy((char *)&qword_25ECD90, "_StairsName");
  strcpy(&byte_25ECDBF, "\t_Down");
  strcpy((char *)&qword_25ECDA8, "_RampName");
  byte_25ECDD7 = 5;
  byte_25ECDEF = 3;
  dword_25ECDD8 = 7361887;
  byte_25ECE07 = 7;
  strcpy((char *)&dword_25ECDF0, "_Bridge");
  byte_25ECE1F = 7;
  strcpy((char *)&dword_25ECE08, "_Tunnel");
  byte_25ECE37 = 11;
  strcpy((char *)&qword_25ECE20, "_Roundabout");
  byte_25ECE4F = 6;
  strcpy((char *)&dword_25ECE38, "_Cross");
  byte_25ECE67 = 8;
  strcpy((char *)&qword_25ECE50, "_Parking");
  byte_25ECE7F = 8;
  strcpy((char *)&qword_25ECE68, "_Shield1");
  byte_25ECE97 = 14;
  strcpy((char *)&qword_25ECE80, "_TowardShield1");
  byte_25ECEAF = 8;
  strcpy((char *)&qword_25ECE98, "_Shield2");
  byte_25ECEC7 = 14;
  strcpy((char *)&qword_25ECEB0, "_TowardShield2");
  byte_25ECEDF = 11;
  strcpy((char *)&qword_25ECEC8, "_Direction1");
  byte_25ECEF7 = 11;
  strcpy((char *)&qword_25ECEE0, "_Direction2");
  strcpy(&byte_25ECF0F, "\n_TowardDirection1");
  strcpy((char *)&qword_25ECEF8, "Direction1");
  byte_25ECF27 = 17;
  byte_25ECF3F = 17;
  strcpy((char *)&xmmword_25ECF28, "_TowardDirection2");
  byte_25ECF57 = 16;
  strcpy((char *)&xmmword_25ECF40, "TowardDirection1");
  byte_25ECF6F = 7;
  strcpy((char *)&qword_25ECF58, "_Spoken");
  byte_25ECF87 = 5;
  strcpy((char *)&qword_25ECF70, "_Sign");
  byte_25ECF9F = 15;
  strcpy((char *)&qword_25ECF88, "_Secondary_Sign");
  byte_25ECFB7 = 5;
  byte_25ECFA4 = 116;
  dword_25ECFA0 = 1936280671;
  byte_25ECFA5 = 0;
  byte_25ECFCF = 8;
  strcpy((char *)&qword_25ECFB8, "_Primary");
  qword_25ECFE0 = 0xF00000000000000;
  strcpy(byte_25ECFE8, "_Secondary");
  strcpy((char *)&qword_25ECFD0, "_Spoken_Primary");
  strcpy(&byte_25ECFFF, "\n_Secondary");
  strcpy(&byte_25ED017, "\n_Spoken_Secondar");
  BYTE1(qword_25ED028) = 0;
  WORD1(qword_25ED028) = 0;
  HIDWORD(qword_25ED028) = 285212672;
  byte_25ED047 = 13;
  strcpy((char *)&qword_25ED030, "_To_Secondary");
  BYTE1(qword_25ED058) = 0;
  WORD1(qword_25ED058) = 0;
  HIDWORD(qword_25ED058) = 335544320;
  strcpy((char *)&dword_25ED048, "_Spoken_To_Secon");
  strcpy(&byte_25ED077, "\t_ValidDistance");
  strcpy((char *)&qword_25ED060, "_Distance");
  byte_25ED08F = 14;
  byte_25ED0A7 = 6;
  strcpy((char *)&dword_25ED090, "_Short");
  byte_25ED0BF = 1;
  word_25ED0A8 = 95;
  qword_25ED0C0 = (uint64_t)operator new(0x20uLL);
  unk_25ED0C8 = v277;
  strcpy((char *)qword_25ED0C0, "Concatenate_Newline_Sign");
  uint64_t v1 = (char *)operator new(0x19uLL);
  qword_25ED0D8 = (uint64_t)v1;
  xmmword_25ED0E0 = v278;
  *(_OWORD *)uint64_t v1 = v270[1];
  uint64_t v2 = *(void *)&v267[1];
  *(void *)(v1 + 15) = *(void *)&v267[1];
  v1[23] = 0;
  byte_25ED107 = 12;
  strcpy((char *)&qword_25ED0F0, "Chain_Spoken");
  byte_25ED11F = 15;
  strcpy((char *)&qword_25ED108, "Chain_To_Spoken");
  strcpy(&byte_25ED137, "\nThen_Spoken");
  strcpy((char *)&qword_25ED120, "And_Spoken");
  byte_25ED14F = 11;
  byte_25ED167 = 18;
  strcpy((char *)&xmmword_25ED150, "Concatenate_Spoken");
  qword_25ED168 = (uint64_t)operator new(0x28uLL);
  long long v266 = xmmword_20B9240;
  xmmword_25ED170 = xmmword_20B9240;
  strcpy((char *)qword_25ED168, "At_Traffic_Light_Chain_Spoken_Primary");
  qword_25ED180 = (uint64_t)operator new(0x28uLL);
  v267[2] = xmmword_20B9260;
  unk_25ED188 = xmmword_20B9260;
  strcpy((char *)qword_25ED180, "At_Stop_Sign_Chain_Spoken_Primary");
  qword_25ED198 = (uint64_t)operator new(0x40uLL);
  xmmword_25ED1A0 = xmmword_20B9A90;
  strcpy((char *)qword_25ED198, "At_Stop_Sign_Cross_Traffic_Doesnt_Stop_Chain_Spoken_Primary");
  qword_25ED1B0 = (uint64_t)operator new(0x30uLL);
  long long v265 = xmmword_20B9A40;
  unk_25ED1B8 = xmmword_20B9A40;
  strcpy((char *)qword_25ED1B0, "At_Next_Traffic_Light_Chain_Spoken_Primary");
  qword_25ED1C8 = (uint64_t)operator new(0x28uLL);
  long long v264 = xmmword_20E12D0;
  xmmword_25ED1D0 = xmmword_20E12D0;
  strcpy((char *)qword_25ED1C8, "At_Next_Stop_Sign_Chain_Spoken_Primary");
  qword_25ED1E0 = (uint64_t)operator new(0x28uLL);
  long long v272 = xmmword_20B9960;
  unk_25ED1E8 = xmmword_20B9960;
  strcpy((char *)qword_25ED1E0, "At_Traffic_Light_Chain_Spoken_Secondary");
  qword_25ED1F8 = (uint64_t)operator new(0x28uLL);
  xmmword_25ED200 = xmmword_20B93A0;
  strcpy((char *)qword_25ED1F8, "At_Stop_Sign_Chain_Spoken_Secondary");
  qword_25ED210 = (uint64_t)operator new(0x30uLL);
  v270[0] = xmmword_20E1380;
  unk_25ED218 = xmmword_20E1380;
  strcpy((char *)qword_25ED210, "At_Next_Traffic_Light_Chain_Spoken_Secondary");
  qword_25ED228 = (uint64_t)operator new(0x30uLL);
  xmmword_25ED230 = xmmword_20B93C0;
  strcpy((char *)qword_25ED228, "At_Next_Stop_Sign_Chain_Spoken_Secondary");
  qword_25ED240 = (uint64_t)operator new(0x38uLL);
  unk_25ED248 = xmmword_20B9A60;
  strcpy((char *)qword_25ED240, "At_Next_One_Traffic_Light_Chain_Spoken_Secondary");
  qword_25ED258 = (uint64_t)operator new(0x30uLL);
  xmmword_25ED260 = xmmword_20E1380;
  strcpy((char *)qword_25ED258, "At_Next_One_Stop_Sign_Chain_Spoken_Secondary");
  qword_25ED270 = (uint64_t)operator new(0x28uLL);
  unk_25ED278 = xmmword_20B9960;
  strcpy((char *)qword_25ED270, "At_Mini_Roundabout_Chain_Spoken_Primary");
  qword_25ED288 = (uint64_t)operator new(0x30uLL);
  long long v269 = xmmword_20B93D0;
  xmmword_25ED290 = xmmword_20B93D0;
  strcpy((char *)qword_25ED288, "At_Mini_Roundabout_Chain_Spoken_Secondary");
  qword_25ED2A0 = (uint64_t)operator new(0x20uLL);
  unk_25ED2A8 = v273;
  strcpy((char *)qword_25ED2A0, "Walking_Distance_Chain_Spoken");
  qword_25ED2B8 = (uint64_t)operator new(0x20uLL);
  xmmword_25ED2C0 = v273;
  strcpy((char *)qword_25ED2B8, "Walking_Continue_Chain_Spoken");
  uint64_t v3 = (char *)operator new(0x19uLL);
  qword_25ED2D0 = (uint64_t)v3;
  unk_25ED2D8 = v278;
  *(_OWORD *)uint64_t v3 = v270[1];
  *(void *)(v3 + 15) = v2;
  v3[23] = 0;
  qword_25ED2E8 = (uint64_t)operator new(0x28uLL);
  xmmword_25ED2F0 = v268;
  strcpy((char *)qword_25ED2E8, "Distance_Cross_The_Street_Spoken");
  byte_25ED317 = 22;
  strcpy((char *)&xmmword_25ED300, "Walking_Continue_Cross");
  byte_25ED32F = 14;
  strcpy((char *)&qword_25ED318, "Continue_Cross");
  byte_25ED347 = 5;
  strcpy((char *)&dword_25ED330, "Cross");
  byte_25ED35F = 19;
  strcpy((char *)&xmmword_25ED348, "Cross_Street_Spoken");
  byte_25ED377 = 17;
  strcpy((char *)&xmmword_25ED360, "Cross_Road_Spoken");
  byte_25ED38F = 20;
  strcpy((char *)&xmmword_25ED378, "Use_Crosswalk_Spoken");
  byte_25ED3A7 = 15;
  strcpy((char *)&qword_25ED390, "Distance_Spoken");
  byte_25ED3BF = 19;
  strcpy((char *)&xmmword_25ED3A8, "Distance_And_Spoken");
  byte_25ED3D7 = 21;
  strcpy((char *)&xmmword_25ED3C0, "Continue_Stage_Spoken");
  byte_25ED3EF = 13;
  qmemcpy(&qword_25ED3D8, "ContinueStage", 13);
  int v4 = SHIBYTE(qword_25ECFE0);
  if (qword_25ECFE0 >= 0) {
    size_t v5 = HIBYTE(qword_25ECFE0);
  }
  else {
    size_t v5 = unk_25ECFD8;
  }
  unint64_t v6 = v5 + 13;
  byte_25ED3E5 = 0;
  if (v5 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v6 >= 0x17)
  {
    uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v8 = v6 | 7;
    }
    uint64_t v9 = v8 + 1;
    std::error_condition v10 = operator new(v8 + 1);
    qword_25ED3F8 = v5 + 13;
    unk_25ED400 = v9 | 0x8000000000000000;
    qword_25ED3F0 = (uint64_t)v10;
    *std::error_condition v10 = *(void *)"ContinueStage";
    unint64_t v7 = (char *)v10 + 13;
    *(void *)((char *)v10 + 5) = *(void *)"nueStage";
  }
  else
  {
    BYTE1(qword_25ED3F8) = 0;
    WORD1(qword_25ED3F8) = 0;
    HIDWORD(qword_25ED3F8) = 0;
    unk_25ED400 = 0;
    byte_25ED407 = v5 + 13;
    unint64_t v7 = (char *)&qword_25ED3F8 + 5;
    strcpy((char *)&qword_25ED3F0, "Continue");
    if (!v5) {
      goto LABEL_15;
    }
  }
  if (v4 >= 0) {
    std::string v11 = &qword_25ECFD0;
  }
  else {
    std::string v11 = (uint64_t *)qword_25ECFD0;
  }
  memmove(v7, v11, v5);
LABEL_15:
  v7[v5] = 0;
  int v12 = byte_25ECC27;
  if (byte_25ECC27 >= 0) {
    size_t v13 = byte_25ECC27;
  }
  else {
    size_t v13 = qword_25ECC18;
  }
  unint64_t v14 = v13 + 13;
  if (v13 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v14 >= 0x17)
  {
    uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v16 = v14 | 7;
    }
    uint64_t v17 = v16 + 1;
    uint64_t v18 = operator new(v16 + 1);
    __dst.__r_.__value_.__l.__size_ = v13 + 13;
    __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
    *uint64_t v18 = qword_25ED3D8;
    *(void *)((char *)v18 + 5) = *(uint64_t *)((char *)&qword_25ED3D8 + 5);
    uint64_t v15 = (char *)v18 + 13;
  }
  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 5) = *(uint64_t *)((char *)&qword_25ED3D8 + 5);
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v13 + 13;
    __dst.__r_.__value_.__r.__words[0] = qword_25ED3D8;
    uint64_t v15 = &__dst.__r_.__value_.__s.__data_[13];
    if (!v13) {
      goto LABEL_29;
    }
  }
  if (v12 >= 0) {
    uint64_t v19 = &qword_25ECC10;
  }
  else {
    uint64_t v19 = (uint64_t *)qword_25ECC10;
  }
  memmove(v15, v19, v13);
LABEL_29:
  v15[v13] = 0;
  if (v4 >= 0) {
    int v20 = (const std::string::value_type *)&qword_25ECFD0;
  }
  else {
    int v20 = (const std::string::value_type *)qword_25ECFD0;
  }
  uint64_t v21 = std::string::append(&__dst, v20, v5);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  qword_25ED418 = v21->__r_.__value_.__r.__words[2];
  xmmword_25ED408 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  byte_25ED437 = 5;
  strcpy((char *)&dword_25ED420, "Merge");
  qword_25ED438 = (uint64_t)operator new(0x20uLL);
  v267[1] = xmmword_20B8E90;
  unk_25ED440 = xmmword_20B8E90;
  strcpy((char *)qword_25ED438, "Continue_Freeway_Spoken_Primary");
  byte_25ED467 = 8;
  strcpy((char *)&qword_25ED450, "Starting");
  byte_25ED47F = 14;
  strcpy((char *)&qword_25ED468, "Starting_Route");
  byte_25ED497 = 14;
  strcpy((char *)&qword_25ED480, "Resuming_Route");
  byte_25ED4AF = 16;
  strcpy((char *)&xmmword_25ED498, "Continuing_Route");
  byte_25ED4C7 = 9;
  word_25ED4B8 = 112;
  qword_25ED4B0 = *(void *)&v263[48];
  strcpy(&byte_25ED4DF, "\nEnding");
  strcpy((char *)&word_25ED4D0, "op");
  qword_25ED4C8 = *(void *)&v267[0];
  byte_25ED4F7 = 6;
  strcpy((char *)&qword_25ED4F8, "_Destination");
  byte_25ED50F = 12;
  byte_25ED527 = 15;
  strcpy((char *)&qword_25ED510, "_At_Destination");
  std::operator+<char>();
  qword_25ED540 = (uint64_t)operator new(0x20uLL);
  unk_25ED548 = v277;
  strcpy((char *)qword_25ED540, "Spoken_Ending_At_Parking");
  qword_25ED558 = (uint64_t)operator new(0x20uLL);
  v267[0] = xmmword_20B9800;
  xmmword_25ED560 = xmmword_20B9800;
  strcpy((char *)qword_25ED558, "Spoken_Pre_Arrival_Destination");
  strcpy((char *)&xmmword_25ED570, "Sign_Ending_At_Parking");
  HIBYTE(word_25ED586) = 22;
  byte_25ED59F = 4;
  strcpy((char *)&dword_25ED588, "Home");
  byte_25ED5B7 = 4;
  strcpy((char *)&dword_25ED5A0, "Work");
  byte_25ED5CF = 8;
  strcpy((char *)&qword_25ED5B8, "Business");
  byte_25ED5E7 = 4;
  strcpy((char *)&dword_25ED5D0, "Name");
  byte_25ED5FF = 13;
  strcpy((char *)&qword_25ED5E8, "Other_Contact");
  byte_25ED617 = 11;
  strcpy((char *)&qword_25ED600, "ContactHome");
  byte_25ED62F = 11;
  *(_DWORD *)((char *)&qword_25ED618 + 7) = 1802661719;
  byte_25ED647 = 7;
  *(int *)((char *)&dword_25ED630 + 3) = 1936942450;
  dword_25ED630 = 1919181889;
  strcpy((char *)&xmmword_25ED648, "Discoverability_Prompt");
  HIBYTE(word_25ED65E) = 22;
  byte_25ED677 = 6;
  dword_25ED660 = 1634878303;
  word_25ED664 = 26739;
  byte_25ED68F = 8;
  qword_25ED678 = 0x697269535F6F4E5FLL;
  byte_25ED6A7 = 9;
  strcpy((char *)&qword_25ED690, "_CityName");
  byte_25ED6BF = 8;
  qword_25ED6A8 = 0x636972656E65475FLL;
  int v23 = byte_25ED467;
  if (byte_25ED467 >= 0) {
    size_t v24 = byte_25ED467;
  }
  else {
    size_t v24 = qword_25ED458;
  }
  LODWORD(v270[1]) = byte_25EC7A7;
  if (byte_25EC7A7 >= 0) {
    size_t v25 = byte_25EC7A7;
  }
  else {
    size_t v25 = unk_25EC798;
  }
  qword_25ED618 = *(void *)"ContactWork";
  byte_25ED623 = 0;
  byte_25ED637 = 0;
  byte_25ED666 = 0;
  byte_25ED680 = 0;
  byte_25ED6B0 = 0;
  unint64_t v26 = v25 + v24;
  if (v25 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  *(void *)uint64_t v263 = *(void *)"ContactWork";
  *(void *)&v263[16] = *(void *)"ContactHome";
  *(void *)&v263[32] = *(void *)"_Contact";
  *(void *)&v263[48] = *(void *)"Other_Contact";
  if (v26 <= 0x16)
  {
    unint64_t v27 = &qword_25ED6C0;
    qword_25ED6C8 = 0;
    unk_25ED6D0 = 0;
    qword_25ED6C0 = 0;
    byte_25ED6D7 = v25 + v24;
    if (!v24) {
      goto LABEL_47;
    }
    goto LABEL_43;
  }
  uint64_t v90 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v26 | 7) != 0x17) {
    uint64_t v90 = v26 | 7;
  }
  uint64_t v91 = v90 + 1;
  unint64_t v27 = (uint64_t *)operator new(v90 + 1);
  qword_25ED6C8 = v25 + v24;
  unk_25ED6D0 = v91 | 0x8000000000000000;
  qword_25ED6C0 = (uint64_t)v27;
  if (v24)
  {
LABEL_43:
    if (v23 >= 0) {
      uint64_t v28 = &qword_25ED450;
    }
    else {
      uint64_t v28 = (uint64_t *)qword_25ED450;
    }
    memmove(v27, v28, v24);
  }
LABEL_47:
  uint64_t v29 = (char *)v27 + v24;
  if (v25)
  {
    if (SLODWORD(v270[1]) >= 0) {
      uint64_t v30 = &qword_25EC790;
    }
    else {
      uint64_t v30 = (uint64_t *)qword_25EC790;
    }
    memmove(v29, v30, v25);
  }
  v29[v25] = 0;
  int v31 = byte_25ED50F;
  if (byte_25ED50F >= 0) {
    size_t v32 = byte_25ED50F;
  }
  else {
    size_t v32 = qword_25ED500;
  }
  unint64_t v33 = v32 + v24;
  if (v32 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v33 <= 0x16)
  {
    uint64_t v34 = &qword_25ED6D8;
    qword_25ED6E0 = 0;
    unk_25ED6E8 = 0;
    qword_25ED6D8 = 0;
    byte_25ED6EF = v32 + v24;
    if (!v24) {
      goto LABEL_62;
    }
    goto LABEL_58;
  }
  uint64_t v92 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17) {
    uint64_t v92 = v33 | 7;
  }
  uint64_t v93 = v92 + 1;
  uint64_t v34 = (uint64_t *)operator new(v92 + 1);
  qword_25ED6E0 = v32 + v24;
  unk_25ED6E8 = v93 | 0x8000000000000000;
  qword_25ED6D8 = (uint64_t)v34;
  if (v24)
  {
LABEL_58:
    if (v23 >= 0) {
      uint64_t v35 = &qword_25ED450;
    }
    else {
      uint64_t v35 = (uint64_t *)qword_25ED450;
    }
    memmove(v34, v35, v24);
  }
LABEL_62:
  uint64_t v36 = (char *)v34 + v24;
  if (v32)
  {
    if (v31 >= 0) {
      uint64_t v37 = &qword_25ED4F8;
    }
    else {
      uint64_t v37 = (uint64_t *)qword_25ED4F8;
    }
    memmove(v36, v37, v32);
  }
  v36[v32] = 0;
  qword_25ED6F0 = (uint64_t)operator new(0x19uLL);
  unk_25ED6F8 = v278;
  strcpy((char *)qword_25ED6F0, "{ChargeStationCityName}");
  if (v33 < 0x17)
  {
    long long v38 = &qword_25ED708;
    qword_25ED710 = 0;
    unk_25ED718 = 0;
    qword_25ED708 = 0;
    byte_25ED71F = v32 + v24;
    if (!v24) {
      goto LABEL_73;
    }
    goto LABEL_69;
  }
  uint64_t v94 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17) {
    uint64_t v94 = v33 | 7;
  }
  uint64_t v95 = v94 + 1;
  long long v38 = (uint64_t *)operator new(v94 + 1);
  qword_25ED710 = v32 + v24;
  unk_25ED718 = v95 | 0x8000000000000000;
  qword_25ED708 = (uint64_t)v38;
  if (v24)
  {
LABEL_69:
    if (v23 >= 0) {
      uint64_t v39 = &qword_25ED450;
    }
    else {
      uint64_t v39 = (uint64_t *)qword_25ED450;
    }
    memmove(v38, v39, v24);
  }
LABEL_73:
  uint64_t v40 = (char *)v38 + v24;
  if (v32)
  {
    if (v31 >= 0) {
      unsigned int v41 = &qword_25ED4F8;
    }
    else {
      unsigned int v41 = (uint64_t *)qword_25ED4F8;
    }
    memmove(v40, v41, v32);
  }
  v40[v32] = 0;
  strcpy((char *)&xmmword_25ED720, "{NewBatteryPercentage}");
  HIBYTE(word_25ED736) = 22;
  qword_25ED738 = (uint64_t)operator new(0x20uLL);
  xmmword_25ED740 = v271;
  strcpy((char *)qword_25ED738, "{OriginalBatteryPercentage}");
  byte_25ED767 = 19;
  strcpy((char *)&xmmword_25ED750, "_Arrival_Percentage");
  int v42 = byte_25ED4F7;
  if (byte_25ED4F7 >= 0) {
    size_t v43 = byte_25ED4F7;
  }
  else {
    size_t v43 = qword_25ED4E8;
  }
  unint64_t v44 = v43 + v25;
  if (v43 + v25 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v44 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v43 + v25;
    if (!v43) {
      goto LABEL_88;
    }
    goto LABEL_84;
  }
  uint64_t v96 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v44 | 7) != 0x17) {
    uint64_t v96 = v44 | 7;
  }
  uint64_t v97 = v96 + 1;
  p_dst = (char *)operator new(v96 + 1);
  __dst.__r_.__value_.__l.__size_ = v43 + v25;
  __dst.__r_.__value_.__r.__words[2] = v97 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v43)
  {
LABEL_84:
    if (v42 >= 0) {
      size_t v46 = &qword_25ED4E0;
    }
    else {
      size_t v46 = (uint64_t *)qword_25ED4E0;
    }
    memmove(p_dst, v46, v43);
  }
LABEL_88:
  uint64_t v47 = &p_dst[v43];
  if (v25)
  {
    if (SLODWORD(v270[1]) >= 0) {
      long long v48 = &qword_25EC790;
    }
    else {
      long long v48 = (uint64_t *)qword_25EC790;
    }
    memmove(v47, v48, v25);
  }
  v47[v25] = 0;
  long long v49 = std::string::append(&__dst, "_Percentage");
  long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  qword_25ED778 = v49->__r_.__value_.__r.__words[2];
  xmmword_25ED768 = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v51 = byte_25ED4F7;
  if (byte_25ED4F7 >= 0) {
    size_t v52 = byte_25ED4F7;
  }
  else {
    size_t v52 = qword_25ED4E8;
  }
  int v53 = byte_25EC7A7;
  if (byte_25EC7A7 >= 0) {
    size_t v54 = byte_25EC7A7;
  }
  else {
    size_t v54 = unk_25EC798;
  }
  unint64_t v55 = v54 + v52;
  if (v54 + v52 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v55 <= 0x16)
  {
    memset(&v279, 0, sizeof(v279));
    BOOL v56 = (char *)&v279;
    *((unsigned char *)&v279.__r_.__value_.__s + 23) = v54 + v52;
    if (!v52) {
      goto LABEL_108;
    }
    goto LABEL_104;
  }
  uint64_t v98 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v55 | 7) != 0x17) {
    uint64_t v98 = v55 | 7;
  }
  uint64_t v99 = v98 + 1;
  BOOL v56 = (char *)operator new(v98 + 1);
  v279.__r_.__value_.__l.__size_ = v54 + v52;
  v279.__r_.__value_.__r.__words[2] = v99 | 0x8000000000000000;
  v279.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
  if (v52)
  {
LABEL_104:
    if (v51 >= 0) {
      int v57 = &qword_25ED4E0;
    }
    else {
      int v57 = (uint64_t *)qword_25ED4E0;
    }
    memmove(v56, v57, v52);
  }
LABEL_108:
  int v58 = &v56[v52];
  if (v54)
  {
    if (v53 >= 0) {
      int v59 = &qword_25EC790;
    }
    else {
      int v59 = (uint64_t *)qword_25EC790;
    }
    memmove(v58, v59, v54);
  }
  v58[v54] = 0;
  if (byte_25EC7D7 >= 0) {
    uint64_t v60 = (const std::string::value_type *)&qword_25EC7C0;
  }
  else {
    uint64_t v60 = (const std::string::value_type *)qword_25EC7C0;
  }
  if (byte_25EC7D7 >= 0) {
    std::string::size_type v61 = byte_25EC7D7;
  }
  else {
    std::string::size_type v61 = *(void *)&byte_25EC7C8;
  }
  uint64_t v62 = std::string::append(&v279, v60, v61);
  long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  uint64_t v64 = std::string::append(&__dst, "_Percentage");
  long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  qword_25ED790 = v64->__r_.__value_.__r.__words[2];
  xmmword_25ED780 = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v279.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_121;
    }
  }
  else if ((SHIBYTE(v279.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_121;
  }
  operator delete(v279.__r_.__value_.__l.__data_);
LABEL_121:
  int v66 = byte_25ED4F7;
  if (byte_25ED4F7 >= 0) {
    size_t v67 = byte_25ED4F7;
  }
  else {
    size_t v67 = qword_25ED4E8;
  }
  int v68 = byte_25EC7A7;
  if (byte_25EC7A7 >= 0) {
    size_t v69 = byte_25EC7A7;
  }
  else {
    size_t v69 = unk_25EC798;
  }
  unint64_t v70 = v69 + v67;
  if (v69 + v67 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v70 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    int v71 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v69 + v67;
    if (!v67) {
      goto LABEL_134;
    }
    goto LABEL_130;
  }
  uint64_t v100 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v70 | 7) != 0x17) {
    uint64_t v100 = v70 | 7;
  }
  uint64_t v101 = v100 + 1;
  int v71 = (char *)operator new(v100 + 1);
  __dst.__r_.__value_.__l.__size_ = v69 + v67;
  __dst.__r_.__value_.__r.__words[2] = v101 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
  if (v67)
  {
LABEL_130:
    if (v66 >= 0) {
      uint64_t v72 = &qword_25ED4E0;
    }
    else {
      uint64_t v72 = (uint64_t *)qword_25ED4E0;
    }
    memmove(v71, v72, v67);
  }
LABEL_134:
  uint64_t v73 = &v71[v67];
  if (v69)
  {
    if (v68 >= 0) {
      uint64_t v74 = &qword_25EC790;
    }
    else {
      uint64_t v74 = (uint64_t *)qword_25EC790;
    }
    memmove(v73, v74, v69);
  }
  v73[v69] = 0;
  uint64_t v75 = std::string::append(&__dst, "_Duration");
  long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
  qword_25ED7A8 = v75->__r_.__value_.__r.__words[2];
  xmmword_25ED798 = v76;
  v75->__r_.__value_.__l.__size_ = 0;
  v75->__r_.__value_.__r.__words[2] = 0;
  v75->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v77 = byte_25ED4F7;
  if (byte_25ED4F7 >= 0) {
    size_t v78 = byte_25ED4F7;
  }
  else {
    size_t v78 = qword_25ED4E8;
  }
  int v79 = byte_25EC7A7;
  if (byte_25EC7A7 >= 0) {
    size_t v80 = byte_25EC7A7;
  }
  else {
    size_t v80 = unk_25EC798;
  }
  unint64_t v81 = v80 + v78;
  if (v80 + v78 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v81 <= 0x16)
  {
    qword_25ED7B8 = 0;
    unk_25ED7C0 = 0;
    qword_25ED7B0 = 0;
    int v82 = &qword_25ED7B0;
    byte_25ED7C7 = v80 + v78;
    if (!v78) {
      goto LABEL_154;
    }
    goto LABEL_150;
  }
  uint64_t v102 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v81 | 7) != 0x17) {
    uint64_t v102 = v81 | 7;
  }
  uint64_t v103 = v102 + 1;
  int v82 = (uint64_t *)operator new(v102 + 1);
  qword_25ED7B8 = v80 + v78;
  unk_25ED7C0 = v103 | 0x8000000000000000;
  qword_25ED7B0 = (uint64_t)v82;
  if (v78)
  {
LABEL_150:
    if (v77 >= 0) {
      uint64_t v83 = &qword_25ED4E0;
    }
    else {
      uint64_t v83 = (uint64_t *)qword_25ED4E0;
    }
    memmove(v82, v83, v78);
  }
LABEL_154:
  uint64_t v84 = (char *)v82 + v78;
  if (v80)
  {
    if (v79 >= 0) {
      uint64_t v85 = &qword_25EC790;
    }
    else {
      uint64_t v85 = (uint64_t *)qword_25EC790;
    }
    memmove(v84, v85, v80);
  }
  v84[v80] = 0;
  int v86 = byte_25ED7C7;
  if (byte_25ED7C7 >= 0) {
    size_t v87 = byte_25ED7C7;
  }
  else {
    size_t v87 = qword_25ED7B8;
  }
  unint64_t v88 = v87 + 5;
  if (v87 + 5 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v88 >= 0x17)
  {
    uint64_t v104 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v88 | 7) != 0x17) {
      uint64_t v104 = v88 | 7;
    }
    uint64_t v105 = v104 + 1;
    uint64_t v89 = (uint64_t *)operator new(v104 + 1);
    qword_25ED7D0 = v87 + 5;
    unk_25ED7D8 = v105 | 0x8000000000000000;
    qword_25ED7C8 = (uint64_t)v89;
  }
  else
  {
    uint64_t v89 = &qword_25ED7C8;
    qword_25ED7D0 = 0;
    unk_25ED7D8 = 0;
    qword_25ED7C8 = 0;
    byte_25ED7DF = v87 + 5;
    if (!v87) {
      goto LABEL_201;
    }
  }
  if (v86 >= 0) {
    double v106 = &qword_25ED7B0;
  }
  else {
    double v106 = (uint64_t *)qword_25ED7B0;
  }
  memmove(v89, v106, v87);
LABEL_201:
  strcpy((char *)v89 + v87, "_Name");
  int v107 = byte_25ED4F7;
  if (byte_25ED4F7 >= 0) {
    size_t v108 = byte_25ED4F7;
  }
  else {
    size_t v108 = qword_25ED4E8;
  }
  int v109 = byte_25EC7A7;
  if (byte_25EC7A7 >= 0) {
    size_t v110 = byte_25EC7A7;
  }
  else {
    size_t v110 = unk_25EC798;
  }
  unint64_t v111 = v110 + v108;
  if (v110 + v108 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v111 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    uint64_t v112 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v110 + v108;
    if (!v108) {
      goto LABEL_214;
    }
    goto LABEL_210;
  }
  uint64_t v122 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v111 | 7) != 0x17) {
    uint64_t v122 = v111 | 7;
  }
  uint64_t v123 = v122 + 1;
  uint64_t v112 = (char *)operator new(v122 + 1);
  __dst.__r_.__value_.__l.__size_ = v110 + v108;
  __dst.__r_.__value_.__r.__words[2] = v123 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v112;
  if (v108)
  {
LABEL_210:
    if (v107 >= 0) {
      __darwin_ct_rune_t v113 = &qword_25ED4E0;
    }
    else {
      __darwin_ct_rune_t v113 = (uint64_t *)qword_25ED4E0;
    }
    memmove(v112, v113, v108);
  }
LABEL_214:
  __darwin_ct_rune_t v114 = &v112[v108];
  if (v110)
  {
    if (v109 >= 0) {
      int v115 = &qword_25EC790;
    }
    else {
      int v115 = (uint64_t *)qword_25EC790;
    }
    memmove(v114, v115, v110);
  }
  v114[v110] = 0;
  int v116 = std::string::append(&__dst, "_Connector_Type");
  long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
  qword_25ED7F0 = v116->__r_.__value_.__r.__words[2];
  xmmword_25ED7E0 = v117;
  v116->__r_.__value_.__l.__size_ = 0;
  v116->__r_.__value_.__r.__words[2] = 0;
  v116->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v118 = SHIBYTE(qword_25ED7F0);
  if (qword_25ED7F0 >= 0) {
    size_t v119 = HIBYTE(qword_25ED7F0);
  }
  else {
    size_t v119 = *((void *)&xmmword_25ED7E0 + 1);
  }
  unint64_t v120 = v119 + 6;
  if (v119 + 6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v120 >= 0x17)
  {
    uint64_t v124 = (v120 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v120 | 7) != 0x17) {
      uint64_t v124 = v120 | 7;
    }
    uint64_t v125 = v124 + 1;
    uint64_t v121 = (uint64_t *)operator new(v124 + 1);
    qword_25ED800 = v119 + 6;
    unk_25ED808 = v125 | 0x8000000000000000;
    qword_25ED7F8 = (uint64_t)v121;
  }
  else
  {
    uint64_t v121 = &qword_25ED7F8;
    qword_25ED800 = 0;
    unk_25ED808 = 0;
    qword_25ED7F8 = 0;
    byte_25ED80F = v119 + 6;
    if (!v119) {
      goto LABEL_239;
    }
  }
  if (v118 >= 0) {
    long long v126 = &xmmword_25ED7E0;
  }
  else {
    long long v126 = (long long *)xmmword_25ED7E0;
  }
  memmove(v121, v126, v119);
LABEL_239:
  strcpy((char *)v121 + v119, "_Power");
  int v127 = byte_25ED4F7;
  if (byte_25ED4F7 >= 0) {
    size_t v128 = byte_25ED4F7;
  }
  else {
    size_t v128 = qword_25ED4E8;
  }
  int v129 = byte_25EC7A7;
  if (byte_25EC7A7 >= 0) {
    size_t v130 = byte_25EC7A7;
  }
  else {
    size_t v130 = unk_25EC798;
  }
  unint64_t v131 = v130 + v128;
  if (v130 + v128 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v131 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    long long v132 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v130 + v128;
    if (!v128) {
      goto LABEL_252;
    }
    goto LABEL_248;
  }
  uint64_t v161 = (v131 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v131 | 7) != 0x17) {
    uint64_t v161 = v131 | 7;
  }
  uint64_t v162 = v161 + 1;
  long long v132 = (char *)operator new(v161 + 1);
  __dst.__r_.__value_.__l.__size_ = v130 + v128;
  __dst.__r_.__value_.__r.__words[2] = v162 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v132;
  if (v128)
  {
LABEL_248:
    if (v127 >= 0) {
      uint64_t v133 = &qword_25ED4E0;
    }
    else {
      uint64_t v133 = (uint64_t *)qword_25ED4E0;
    }
    memmove(v132, v133, v128);
  }
LABEL_252:
  long long v134 = &v132[v128];
  if (v130)
  {
    if (v129 >= 0) {
      long long v135 = &qword_25EC790;
    }
    else {
      long long v135 = (uint64_t *)qword_25EC790;
    }
    memmove(v134, v135, v130);
  }
  v134[v130] = 0;
  if (byte_25ECF6F >= 0) {
    long long v136 = (const std::string::value_type *)&qword_25ECF58;
  }
  else {
    long long v136 = (const std::string::value_type *)qword_25ECF58;
  }
  if (byte_25ECF6F >= 0) {
    std::string::size_type v137 = byte_25ECF6F;
  }
  else {
    std::string::size_type v137 = unk_25ECF60;
  }
  int v138 = std::string::append(&__dst, v136, v137);
  long long v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
  qword_25ED820 = v138->__r_.__value_.__r.__words[2];
  xmmword_25ED810 = v139;
  v138->__r_.__value_.__l.__size_ = 0;
  v138->__r_.__value_.__r.__words[2] = 0;
  v138->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v140 = byte_25ED4F7;
  if (byte_25ED4F7 >= 0) {
    size_t v141 = byte_25ED4F7;
  }
  else {
    size_t v141 = qword_25ED4E8;
  }
  int v142 = byte_25EC7A7;
  if (byte_25EC7A7 >= 0) {
    size_t v143 = byte_25EC7A7;
  }
  else {
    size_t v143 = unk_25EC798;
  }
  unint64_t v144 = v143 + v141;
  if (v143 + v141 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v144 <= 0x16)
  {
    memset(&v279, 0, sizeof(v279));
    long long v145 = (char *)&v279;
    *((unsigned char *)&v279.__r_.__value_.__s + 23) = v143 + v141;
    if (!v141) {
      goto LABEL_278;
    }
    goto LABEL_274;
  }
  uint64_t v163 = (v144 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v144 | 7) != 0x17) {
    uint64_t v163 = v144 | 7;
  }
  uint64_t v164 = v163 + 1;
  long long v145 = (char *)operator new(v163 + 1);
  v279.__r_.__value_.__l.__size_ = v143 + v141;
  v279.__r_.__value_.__r.__words[2] = v164 | 0x8000000000000000;
  v279.__r_.__value_.__r.__words[0] = (std::string::size_type)v145;
  if (v141)
  {
LABEL_274:
    if (v140 >= 0) {
      long long v146 = &qword_25ED4E0;
    }
    else {
      long long v146 = (uint64_t *)qword_25ED4E0;
    }
    memmove(v145, v146, v141);
  }
LABEL_278:
  long long v147 = &v145[v141];
  if (v143)
  {
    if (v142 >= 0) {
      long long v148 = &qword_25EC790;
    }
    else {
      long long v148 = (uint64_t *)qword_25EC790;
    }
    memmove(v147, v148, v143);
  }
  v147[v143] = 0;
  if (byte_25EC7D7 >= 0) {
    long long v149 = (const std::string::value_type *)&qword_25EC7C0;
  }
  else {
    long long v149 = (const std::string::value_type *)qword_25EC7C0;
  }
  if (byte_25EC7D7 >= 0) {
    std::string::size_type v150 = byte_25EC7D7;
  }
  else {
    std::string::size_type v150 = *(void *)&byte_25EC7C8;
  }
  long long v151 = std::string::append(&v279, v149, v150);
  long long v152 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v151->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v152;
  v151->__r_.__value_.__l.__size_ = 0;
  v151->__r_.__value_.__r.__words[2] = 0;
  v151->__r_.__value_.__r.__words[0] = 0;
  if (byte_25ECF6F >= 0) {
    long long v153 = (const std::string::value_type *)&qword_25ECF58;
  }
  else {
    long long v153 = (const std::string::value_type *)qword_25ECF58;
  }
  if (byte_25ECF6F >= 0) {
    std::string::size_type v154 = byte_25ECF6F;
  }
  else {
    std::string::size_type v154 = unk_25ECF60;
  }
  long long v155 = std::string::append(&__dst, v153, v154);
  long long v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
  qword_25ED838 = v155->__r_.__value_.__r.__words[2];
  xmmword_25ED828 = v156;
  v155->__r_.__value_.__l.__size_ = 0;
  v155->__r_.__value_.__r.__words[2] = 0;
  v155->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v279.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_297;
    }
  }
  else if ((SHIBYTE(v279.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_297;
  }
  operator delete(v279.__r_.__value_.__l.__data_);
LABEL_297:
  byte_25ED857 = 16;
  strcpy((char *)&xmmword_25ED840, "Use_NACS_Adapter");
  byte_25ED86F = 16;
  strcpy(byte_25ED858, "Start_Route_Sign");
  qword_25ED870 = (uint64_t)operator new(0x20uLL);
  unk_25ED878 = v274;
  strcpy((char *)qword_25ED870, "Start_Route_Spoken_Primary");
  int v157 = byte_25EBF07;
  if (byte_25EBF07 >= 0) {
    size_t v158 = byte_25EBF07;
  }
  else {
    size_t v158 = qword_25EBEF8;
  }
  unint64_t v159 = v158 + 27;
  if (v158 + 27 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v159 <= 0x16)
  {
    long long v160 = &qword_25ED888;
    qword_25ED890 = 0;
    unk_25ED898 = 0;
    qword_25ED888 = 0;
    byte_25ED89F = v158 + 27;
LABEL_314:
    if (v157 >= 0) {
      long long v167 = &qword_25EBEF0;
    }
    else {
      long long v167 = (uint64_t *)qword_25EBEF0;
    }
    memmove(v160, v167, v158);
    goto LABEL_318;
  }
  uint64_t v165 = (v159 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v159 | 7) != 0x17) {
    uint64_t v165 = v159 | 7;
  }
  uint64_t v166 = v165 + 1;
  long long v160 = (uint64_t *)operator new(v165 + 1);
  qword_25ED890 = v158 + 27;
  unk_25ED898 = v166 | 0x8000000000000000;
  qword_25ED888 = (uint64_t)v160;
  if (v158) {
    goto LABEL_314;
  }
LABEL_318:
  strcpy((char *)v160 + v158, "Turn_Around_To_Route_Spoken");
  strcpy(&byte_25ED8B7, "\t_Two_Lanes");
  strcpy((char *)&qword_25ED8A0, "_One_Lane");
  strcpy(&byte_25ED8CF, "\n_Three_Lanes");
  byte_25ED8E7 = 12;
  byte_25ED8FF = 11;
  strcpy((char *)&qword_25ED8E8, "_Four_Lanes");
  byte_25ED917 = 11;
  strcpy((char *)&qword_25ED900, "_Five_Lanes");
  strcpy(&byte_25ED92F, "\n_Seven_Lanes");
  strcpy((char *)&qword_25ED918, "_Six_Lanes");
  byte_25ED947 = 12;
  byte_25ED95F = 12;
  strcpy((char *)&qword_25ED948, "_Eight_Lanes");
  byte_25ED977 = 12;
  strcpy((char *)&qword_25ED960, "_Second_Lane");
  byte_25ED98F = 11;
  strcpy((char *)&qword_25ED978, "_Third_Lane");
  byte_25ED9A7 = 19;
  v270[1] = *(_OWORD *)"_Second_Third_Lanes";
  strcpy((char *)&xmmword_25ED990, "_Second_Third_Lanes");
  byte_25ED9BF = 4;
  strcpy((char *)&dword_25ED9A8, "Left");
  byte_25ED9D7 = 5;
  byte_25ED9C4 = 116;
  dword_25ED9C0 = 1751607634;
  byte_25ED9C5 = 0;
  byte_25ED9EF = 6;
  strcpy((char *)&dword_25ED9D8, "Middle");
  BYTE1(qword_25EDA00) = 0;
  WORD1(qword_25EDA00) = 0;
  HIDWORD(qword_25EDA00) = 0x10000000;
  strcpy((char *)dword_25ED9F0, "Left_Second_Lane");
  BYTE1(qword_25EDA18) = 0;
  WORD1(qword_25EDA18) = 0;
  HIDWORD(qword_25EDA18) = 285212672;
  strcpy((char *)&dword_25EDA08, "Right_Second_Lan");
  qword_25EDA30 = 0xF00000000000000;
  strcpy((char *)&dword_25EDA20, "Left_Third_Lane");
  qword_25EDA48 = 0x1000000000000000;
  byte_25EDA3C = 116;
  dword_25EDA38 = 1751607634;
  dword_25EDA44 = 1701732684;
  unk_25EDA3D = *(void *)"_Third_Lane";
  long long v168 = (char *)operator new(0x19uLL);
  qword_25EDA50 = (uint64_t)v168;
  unk_25EDA58 = v278;
  *(_DWORD *)long long v168 = 1952867660;
  strcpy(v168 + 19, "anes");
  *(_OWORD *)(v168 + 4) = v270[1];
  long long v169 = (char *)operator new(0x20uLL);
  qword_25EDA68 = (uint64_t)v169;
  xmmword_25EDA70 = v277;
  *(_DWORD *)long long v169 = 1751607634;
  v169[4] = 116;
  strcpy(v169 + 20, "anes");
  *(_OWORD *)(v169 + 5) = v270[1];
  byte_25EDA97 = 5;
  strcpy((char *)&dword_25EDA80, "_Stay");
  byte_25EDAAF = 13;
  strcpy((char *)&qword_25EDA98, "Continue_Sign");
  byte_25EDAC7 = 8;
  strcpy((char *)&qword_25EDAB0, "Continue");
  int v170 = byte_25ECF87;
  if (byte_25ECF87 >= 0) {
    size_t v171 = byte_25ECF87;
  }
  else {
    size_t v171 = qword_25ECF78;
  }
  unint64_t v172 = v171 + 8;
  if (v171 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v172 >= 0x17)
  {
    uint64_t v174 = (v172 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v172 | 7) != 0x17) {
      uint64_t v174 = v172 | 7;
    }
    uint64_t v175 = v174 + 1;
    long long v176 = operator new(v174 + 1);
    qword_25EDAD0 = v171 + 8;
    qword_25EDAD8 = v175 | 0x8000000000000000;
    qword_25EDAC8 = (uint64_t)v176;
    *long long v176 = 0x65756E69746E6F43;
    long long v173 = v176 + 1;
  }
  else
  {
    qword_25EDAD8 = 0;
    HIBYTE(qword_25EDAD8) = v171 + 8;
    qword_25EDAC8 = 0x65756E69746E6F43;
    qword_25EDAD0 = 0;
    long long v173 = &qword_25EDAD0;
    if (!v171) {
      goto LABEL_332;
    }
  }
  if (v170 >= 0) {
    long long v177 = &qword_25ECF70;
  }
  else {
    long long v177 = (uint64_t *)qword_25ECF70;
  }
  memmove(v173, v177, v171);
LABEL_332:
  *((unsigned char *)v173 + v171) = 0;
  int v178 = SHIBYTE(qword_25ECFE0);
  if (qword_25ECFE0 >= 0) {
    size_t v179 = HIBYTE(qword_25ECFE0);
  }
  else {
    size_t v179 = unk_25ECFD8;
  }
  unint64_t v180 = v179 + 8;
  if (v179 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v180 >= 0x17)
  {
    uint64_t v182 = (v180 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v180 | 7) != 0x17) {
      uint64_t v182 = v180 | 7;
    }
    uint64_t v183 = v182 + 1;
    long long v184 = operator new(v182 + 1);
    qword_25EDAE8 = v179 + 8;
    qword_25EDAF0 = v183 | 0x8000000000000000;
    qword_25EDAE0 = (uint64_t)v184;
    *long long v184 = qword_25EDAB0;
    long long v181 = v184 + 1;
  }
  else
  {
    qword_25EDAF0 = 0;
    HIBYTE(qword_25EDAF0) = v179 + 8;
    qword_25EDAE0 = qword_25EDAB0;
    qword_25EDAE8 = 0;
    long long v181 = &qword_25EDAE8;
    if (!v179) {
      goto LABEL_346;
    }
  }
  if (v178 >= 0) {
    long long v185 = &qword_25ECFD0;
  }
  else {
    long long v185 = (uint64_t *)qword_25ECFD0;
  }
  memmove(v181, v185, v179);
LABEL_346:
  *((unsigned char *)v181 + v179) = 0;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 1;
  LOWORD(__dst.__r_.__value_.__l.__data_) = 83;
  v281[23] = 2;
  strcpy(v281, "SW");
  v283[7] = 1;
  LOWORD(v282[0]) = 87;
  HIBYTE(v284) = 2;
  strcpy(&v283[8], "NW");
  HIBYTE(v286) = 1;
  LOWORD(v285[0]) = 78;
  HIBYTE(v288) = 2;
  strcpy((char *)&v287, "NE");
  HIBYTE(v290) = 1;
  LOWORD(v289) = 69;
  HIBYTE(v292) = 2;
  strcpy((char *)&__p, "SE");
  sub_4BDC0C(qword_25EDAF8, (uint64_t)&__dst, 8uLL);
  if (SHIBYTE(v292) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v290) & 0x80000000) == 0)
    {
LABEL_348:
      if ((SHIBYTE(v288) & 0x80000000) == 0) {
        goto LABEL_349;
      }
      goto LABEL_383;
    }
  }
  else if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
    goto LABEL_348;
  }
  operator delete((void *)v289);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_349:
    if ((SHIBYTE(v286) & 0x80000000) == 0) {
      goto LABEL_350;
    }
    goto LABEL_384;
  }
LABEL_383:
  operator delete((void *)v287);
  if ((SHIBYTE(v286) & 0x80000000) == 0)
  {
LABEL_350:
    if ((SHIBYTE(v284) & 0x80000000) == 0) {
      goto LABEL_351;
    }
    goto LABEL_385;
  }
LABEL_384:
  operator delete(v285[0]);
  if ((SHIBYTE(v284) & 0x80000000) == 0)
  {
LABEL_351:
    if ((v283[7] & 0x80000000) == 0) {
      goto LABEL_352;
    }
    goto LABEL_386;
  }
LABEL_385:
  operator delete(*(void **)&v283[8]);
  if ((v283[7] & 0x80000000) == 0)
  {
LABEL_352:
    if ((v281[23] & 0x80000000) == 0) {
      goto LABEL_353;
    }
LABEL_387:
    operator delete(*(void **)v281);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_354;
    }
    goto LABEL_388;
  }
LABEL_386:
  operator delete(v282[0]);
  if ((v281[23] & 0x80000000) != 0) {
    goto LABEL_387;
  }
LABEL_353:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_354;
  }
LABEL_388:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_354:
  byte_25EDB27 = 13;
  strcpy((char *)&qword_25EDB10, "{instruction}");
  byte_25EDB3F = 20;
  strcpy(byte_25EDB28, "{primaryInstruction}");
  strcpy((char *)&xmmword_25EDB40, "{secondaryInstruction}");
  HIBYTE(word_25EDB56) = 22;
  qword_25EDB58 = (uint64_t)operator new(0x20uLL);
  unk_25EDB60 = v276;
  strcpy((char *)qword_25EDB58, "{andSecondaryInstruction}");
  qword_25EDB70 = (uint64_t)operator new(0x20uLL);
  unk_25EDB78 = v277;
  strcpy((char *)qword_25EDB70, "{toSecondaryInstruction}");
  byte_25EDB9F = 21;
  strcpy(byte_25EDB88, "{continueInstruction}");
  qword_25EDBA0 = (uint64_t)operator new(0x20uLL);
  unk_25EDBA8 = v274;
  strcpy((char *)qword_25EDBA0, "{thenSecondaryInstruction}");
  byte_25EDBCF = 14;
  strcpy((char *)&qword_25EDBB8, "{instruction1}");
  byte_25EDBE7 = 14;
  strcpy((char *)&qword_25EDBD0, "{instruction2}");
  strcpy(&byte_25EDBFF, "\n{nextDistance}");
  strcpy((char *)&qword_25EDBE8, "{distance}");
  byte_25EDC17 = 14;
  byte_25EDC2F = 16;
  strcpy(byte_25EDC18, "{valid_distance}");
  strcpy(&byte_25EDC47, "\n{valid_distance}");
  strcpy((char *)&qword_25EDC30, "{distance}");
  byte_25EDC5F = 16;
  byte_25EDC77 = 15;
  strcpy((char *)&qword_25EDC60, "{ClimbDistance}");
  byte_25EDC8F = 17;
  strcpy(byte_25EDC78, "{DescentDistance}");
  byte_25EDCA7 = 13;
  strcpy((char *)&qword_25EDC90, "{nonBrkSpace}");
  byte_25EDCBF = 9;
  strcpy((char *)&qword_25EDCA8, "{newLine}");
  byte_25EDCD7 = 6;
  word_25EDCC4 = -24382;
  dword_25EDCC0 = -1211981630;
  byte_25EDCC6 = 0;
  byte_25EDCEF = 2;
  word_25EDCD8 = -24382;
  byte_25EDCDA = 0;
  byte_25EDD07 = 1;
  word_25EDCF0 = 10;
  byte_25EDD1F = 1;
  word_25EDD08 = 32;
  byte_25EDD37 = 2;
  strcpy((char *)&word_25EDD20, "\n\n");
  strcpy(&byte_25EDD4F, "\t{TowardShield1}");
  strcpy((char *)&qword_25EDD38, "{Shield1}");
  byte_25EDD67 = 15;
  strcpy(&byte_25EDD7F, "\t{TowardShield2}");
  strcpy((char *)&qword_25EDD68, "{Shield2}");
  byte_25EDD97 = 15;
  byte_25EDDAF = 12;
  strcpy((char *)&qword_25EDD98, "{Direction1}");
  byte_25EDDC7 = 12;
  strcpy((char *)&qword_25EDDB0, "{Direction2}");
  byte_25EDDDF = 18;
  strcpy((char *)&xmmword_25EDDC8, "{TowardDirection1}");
  byte_25EDDF7 = 18;
  strcpy((char *)&xmmword_25EDDE0, "{TowardDirection2}");
  byte_25EDE0F = 7;
  strcpy((char *)&dword_25EDDF8, "{Icon1}");
  byte_25EDE27 = 7;
  strcpy((char *)&dword_25EDE10, "{Icon2}");
  byte_25EDE28[23] = 14;
  strcpy(byte_25EDE28, "{Intersection}");
  byte_25EDE57 = 6;
  strcpy((char *)&xmmword_25EDE40, "{Road}");
  byte_25EDE6F = 7;
  strcpy((char *)&dword_25EDE58, "{Road1}");
  byte_25EDE87 = 7;
  strcpy((char *)&xmmword_25EDE70, "{Road2}");
  strcpy(&byte_25EDE9F, "\n{Freeway}");
  strcpy((char *)&qword_25EDE88, "{Elevator}");
  strcpy(&byte_25EDEB7, "\t{Ferry}");
  byte_25EDECF = 7;
  byte_25EDEE7 = 13;
  strcpy((char *)&xmmword_25EDED0, "{ShuttleName}");
  byte_25EDEFF = 11;
  strcpy((char *)&xmmword_25EDEE8, "{Signpost1}");
  byte_25EDF17 = 11;
  strcpy((char *)&xmmword_25EDF00, "{Signpost2}");
  byte_25EDF2F = 12;
  strcpy((char *)&xmmword_25EDF18, "{ExitNumber}");
  strcpy(&byte_25EDF47, "\t{Name}");
  strcpy((char *)&xmmword_25EDF30, "{Address}");
  byte_25EDF5F = 6;
  byte_25EDF77 = 11;
  strcpy((char *)&xmmword_25EDF60, "{PlaceName}");
  byte_25EDF8F = 14;
  strcpy((char *)&xmmword_25EDF78, "{ElevatorName}");
  byte_25EDFA7 = 15;
  strcpy((char *)&xmmword_25EDF90, "{EscalatorName}");
  byte_25EDFBF = 12;
  strcpy((char *)&xmmword_25EDFA8, "{StairsName}");
  strcpy(&byte_25EDFD7, "\n{BridgeName}");
  strcpy((char *)&xmmword_25EDFC0, "{RampName}");
  byte_25EDFEF = 12;
  byte_25EE007 = 12;
  strcpy((char *)&xmmword_25EDFF0, "{TunnelName}");
  byte_25EE01F = 13;
  strcpy((char *)&xmmword_25EE008, "{CustomLabel}");
  std::string __dst = *(std::string *)byte_25EDE28;
  *(_OWORD *)v281 = xmmword_25EDE40;
  *(void *)&v281[16] = unk_25EDE50;
  *(_OWORD *)uint64_t v282 = *(_OWORD *)&dword_25EDE58;
  *(void *)v283 = unk_25EDE68;
  *(_OWORD *)&v283[8] = xmmword_25EDE70;
  uint64_t v284 = unk_25EDE80;
  *(_OWORD *)v285 = *(_OWORD *)&qword_25EDE88;
  uint64_t v286 = unk_25EDE98;
  uint64_t v288 = unk_25EDEB0;
  long long v287 = xmmword_25EDEA0;
  long long v289 = *(_OWORD *)&dword_25EDEB8;
  uint64_t v290 = unk_25EDEC8;
  uint64_t v292 = unk_25EDEE0;
  long long __p = xmmword_25EDED0;
  long long v293 = xmmword_25EDEE8;
  uint64_t v294 = unk_25EDEF8;
  uint64_t v296 = unk_25EDF10;
  long long v295 = xmmword_25EDF00;
  long long v297 = xmmword_25EDF18;
  long long v299 = xmmword_25EDF30;
  uint64_t v298 = unk_25EDF28;
  uint64_t v300 = unk_25EDF40;
  long long v301 = xmmword_25EDF48;
  long long v303 = xmmword_25EDF60;
  uint64_t v302 = unk_25EDF58;
  uint64_t v304 = unk_25EDF70;
  long long v305 = xmmword_25EDF78;
  long long v307 = xmmword_25EDF90;
  uint64_t v306 = unk_25EDF88;
  uint64_t v308 = unk_25EDFA0;
  long long v309 = xmmword_25EDFA8;
  long long v311 = xmmword_25EDFC0;
  uint64_t v310 = unk_25EDFB8;
  uint64_t v312 = unk_25EDFD0;
  long long v313 = xmmword_25EDFD8;
  long long v315 = xmmword_25EDFF0;
  uint64_t v314 = unk_25EDFE8;
  uint64_t v316 = unk_25EE000;
  uint64_t v318 = unk_25EE018;
  long long v317 = xmmword_25EE008;
  sub_4BDC0C(qword_25EE020, (uint64_t)&__dst, 0x15uLL);
  if (SHIBYTE(v318) < 0)
  {
    operator delete((void *)v317);
    if ((SHIBYTE(v316) & 0x80000000) == 0)
    {
LABEL_356:
      if ((SHIBYTE(v314) & 0x80000000) == 0) {
        goto LABEL_357;
      }
      goto LABEL_391;
    }
  }
  else if ((SHIBYTE(v316) & 0x80000000) == 0)
  {
    goto LABEL_356;
  }
  operator delete((void *)v315);
  if ((SHIBYTE(v314) & 0x80000000) == 0)
  {
LABEL_357:
    if ((SHIBYTE(v312) & 0x80000000) == 0) {
      goto LABEL_358;
    }
    goto LABEL_392;
  }
LABEL_391:
  operator delete((void *)v313);
  if ((SHIBYTE(v312) & 0x80000000) == 0)
  {
LABEL_358:
    if ((SHIBYTE(v310) & 0x80000000) == 0) {
      goto LABEL_359;
    }
    goto LABEL_393;
  }
LABEL_392:
  operator delete((void *)v311);
  if ((SHIBYTE(v310) & 0x80000000) == 0)
  {
LABEL_359:
    if ((SHIBYTE(v308) & 0x80000000) == 0) {
      goto LABEL_360;
    }
    goto LABEL_394;
  }
LABEL_393:
  operator delete((void *)v309);
  if ((SHIBYTE(v308) & 0x80000000) == 0)
  {
LABEL_360:
    if ((SHIBYTE(v306) & 0x80000000) == 0) {
      goto LABEL_361;
    }
    goto LABEL_395;
  }
LABEL_394:
  operator delete((void *)v307);
  if ((SHIBYTE(v306) & 0x80000000) == 0)
  {
LABEL_361:
    if ((SHIBYTE(v304) & 0x80000000) == 0) {
      goto LABEL_362;
    }
    goto LABEL_396;
  }
LABEL_395:
  operator delete((void *)v305);
  if ((SHIBYTE(v304) & 0x80000000) == 0)
  {
LABEL_362:
    if ((SHIBYTE(v302) & 0x80000000) == 0) {
      goto LABEL_363;
    }
    goto LABEL_397;
  }
LABEL_396:
  operator delete((void *)v303);
  if ((SHIBYTE(v302) & 0x80000000) == 0)
  {
LABEL_363:
    if ((SHIBYTE(v300) & 0x80000000) == 0) {
      goto LABEL_364;
    }
    goto LABEL_398;
  }
LABEL_397:
  operator delete((void *)v301);
  if ((SHIBYTE(v300) & 0x80000000) == 0)
  {
LABEL_364:
    if ((SHIBYTE(v298) & 0x80000000) == 0) {
      goto LABEL_365;
    }
    goto LABEL_399;
  }
LABEL_398:
  operator delete((void *)v299);
  if ((SHIBYTE(v298) & 0x80000000) == 0)
  {
LABEL_365:
    if ((SHIBYTE(v296) & 0x80000000) == 0) {
      goto LABEL_366;
    }
    goto LABEL_400;
  }
LABEL_399:
  operator delete((void *)v297);
  if ((SHIBYTE(v296) & 0x80000000) == 0)
  {
LABEL_366:
    if ((SHIBYTE(v294) & 0x80000000) == 0) {
      goto LABEL_367;
    }
    goto LABEL_401;
  }
LABEL_400:
  operator delete((void *)v295);
  if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
LABEL_367:
    if ((SHIBYTE(v292) & 0x80000000) == 0) {
      goto LABEL_368;
    }
    goto LABEL_402;
  }
LABEL_401:
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_368:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_369;
    }
    goto LABEL_403;
  }
LABEL_402:
  operator delete((void *)__p);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_369:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_370;
    }
    goto LABEL_404;
  }
LABEL_403:
  operator delete((void *)v289);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_370:
    if ((SHIBYTE(v286) & 0x80000000) == 0) {
      goto LABEL_371;
    }
    goto LABEL_405;
  }
LABEL_404:
  operator delete((void *)v287);
  if ((SHIBYTE(v286) & 0x80000000) == 0)
  {
LABEL_371:
    if ((SHIBYTE(v284) & 0x80000000) == 0) {
      goto LABEL_372;
    }
    goto LABEL_406;
  }
LABEL_405:
  operator delete(v285[0]);
  if ((SHIBYTE(v284) & 0x80000000) == 0)
  {
LABEL_372:
    if ((v283[7] & 0x80000000) == 0) {
      goto LABEL_373;
    }
    goto LABEL_407;
  }
LABEL_406:
  operator delete(*(void **)&v283[8]);
  if ((v283[7] & 0x80000000) == 0)
  {
LABEL_373:
    if ((v281[23] & 0x80000000) == 0) {
      goto LABEL_374;
    }
LABEL_408:
    operator delete(*(void **)v281);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_375;
    }
    goto LABEL_409;
  }
LABEL_407:
  operator delete(v282[0]);
  if ((v281[23] & 0x80000000) != 0) {
    goto LABEL_408;
  }
LABEL_374:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_375;
  }
LABEL_409:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_375:
  qword_25EE038 = (uint64_t)operator new(0x19uLL);
  unk_25EE040 = v278;
  strcpy((char *)qword_25EE038, "From_User_Location_List");
  byte_25EE067 = 20;
  strcpy(byte_25EE050, "Origin_Waypoint_List");
  qword_25EE068 = (uint64_t)operator new(0x20uLL);
  unk_25EE070 = v274;
  strcpy((char *)qword_25EE068, "Intermediate_Waypoint_List");
  unk_25EE080 = operator new(0x20uLL);
  unk_25EE088 = v276;
  strcpy(unk_25EE080, "Destination_Waypoint_List");
  byte_25EE0AF = 15;
  strcpy(byte_25EE098, "{toDestination}");
  byte_25EE0C7 = 13;
  strcpy((char *)&xmmword_25EE0B0, "{Destination}");
  byte_25EE0DF = 7;
  strcpy((char *)&qword_25EE0C8, "To_Home");
  byte_25EE0F7 = 14;
  strcpy((char *)&qword_25EE0E0, "To_ContactHome");
  byte_25EE10F = 7;
  strcpy((char *)&qword_25EE0F8, "To_Work");
  byte_25EE127 = 14;
  strcpy((char *)&qword_25EE110, "To_ContactWork");
  strcpy(&byte_25EE13F, "\nTo_Business");
  strcpy((char *)&qword_25EE128, "To_Address");
  byte_25EE157 = 11;
  byte_25EE16F = 16;
  strcpy((char *)&qword_25EE158, "To_Other_Contact");
  strcpy(&byte_25EE187, "\tTo_ContactSchool");
  strcpy((char *)&qword_25EE170, "To_School");
  byte_25EE19F = 16;
  byte_25EE1B7 = 17;
  strcpy((char *)&qword_25EE1A0, "To_PersonLocation");
  qword_25EE1B8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)&qword_25EE1C0 = v275;
  strcpy((char *)qword_25EE1B8, "To_ContactCustomLabelAddress");
  byte_25EE1E7 = 7;
  strcpy((char *)&dword_25EE1D0, "At_Home");
  byte_25EE1FF = 14;
  strcpy((char *)&qword_25EE1E8, "At_ContactHome");
  byte_25EE217 = 7;
  strcpy((char *)&dword_25EE200, "At_Work");
  byte_25EE22F = 14;
  strcpy((char *)&qword_25EE218, "At_ContactWork");
  strcpy(&byte_25EE247, "\nAt_Business");
  strcpy((char *)&qword_25EE230, "At_Address");
  byte_25EE25F = 11;
  byte_25EE277 = 16;
  strcpy(byte_25EE260, "At_Other_Contact");
  byte_25EE28F = 4;
  strcpy((char *)&dword_25EE278, "Home");
  byte_25EE2A7 = 11;
  strcpy((char *)&qword_25EE290 + 7, "Home");
  qword_25EE290 = *(void *)&v263[16];
  byte_25EE2BF = 4;
  strcpy((char *)&dword_25EE2A8, "Work");
  byte_25EE2D7 = 11;
  strcpy((char *)&qword_25EE2C0 + 7, "Work");
  qword_25EE2C0 = *(void *)v263;
  byte_25EE2EF = 7;
  strcpy((char *)&dword_25EE2D8, "Address");
  byte_25EE307 = 8;
  strcpy((char *)&qword_25EE2F0, "Business");
  byte_25EE31F = 13;
  qword_25EE308 = *(void *)&v263[48];
  *(uint64_t *)((char *)&qword_25EE308 + 5) = *(void *)&v263[32];
  byte_25EE315 = 0;
  byte_25EE337 = 6;
  strcpy((char *)&dword_25EE320, "School");
  byte_25EE34F = 13;
  strcpy((char *)&qword_25EE338, "ContactSchool");
  byte_25EE367 = 14;
  strcpy((char *)&qword_25EE350, "PersonLocation");
  qword_25EE368 = (uint64_t)operator new(0x20uLL);
  xmmword_25EE370 = v276;
  strcpy((char *)qword_25EE368, "ContactCustomLabelAddress");
  if (byte_25EE0C7 < 0)
  {
    sub_4200(&xmmword_25EE380, (void *)xmmword_25EE0B0, *((unint64_t *)&xmmword_25EE0B0 + 1));
  }
  else
  {
    xmmword_25EE380 = xmmword_25EE0B0;
    qword_25EE390 = unk_25EE0C0;
  }
  byte_25EE3AF = 16;
  strcpy((char *)&xmmword_25EE398, "{PrevExitNumber}");
  byte_25EE3C7 = 10;
  strcpy((char *)&qword_25EE3B0, "{PrevRoad}");
  qword_25EE3C8 = (uint64_t)operator new(0x20uLL);
  unk_25EE3D0 = v277;
  strcpy((char *)qword_25EE3C8, "{RouteTotalExpectedTime}");
  byte_25EE3F7 = 18;
  strcpy(byte_25EE3E0, "{ChargePercentage}");
  qword_25EE3F8 = (uint64_t)operator new(0x20uLL);
  unk_25EE400 = v271;
  strcpy((char *)qword_25EE3F8, "{RemainingChargePercentage}");
  byte_25EE427 = 16;
  strcpy(byte_25EE410, "{ChargeDuration}");
  byte_25EE43F = 15;
  strcpy((char *)&qword_25EE428, "{ConnectorType}");
  byte_25EE457 = 19;
  strcpy(byte_25EE440, "{ChargeStationName}");
  byte_25EE46F = 7;
  strcpy((char *)&dword_25EE458, "{Power}");
  byte_25EE487 = 13;
  strcpy((char *)&qword_25EE470, "{VehicleName}");
  byte_25EE49F = 18;
  strcpy((char *)&xmmword_25EE488, "{AreaIncidentName}");
  byte_25EE4B7 = 14;
  strcpy((char *)&qword_25EE4A0, "{AreaIncident}");
  byte_25EE4CF = 16;
  strcpy((char *)&xmmword_25EE4B8, "{AffectedRegion}");
  byte_25EE4E7 = 21;
  strcpy(byte_25EE4D0, "{AreaIncidentWeblink}");
  byte_25EE4FF = 20;
  strcpy((char *)&xmmword_25EE4E8, "{AreaIncidentAgency}");
  byte_25EE517 = 11;
  strcpy((char *)&qword_25EE500, "{IssueTime}");
  byte_25EE52F = 12;
  strcpy((char *)&qword_25EE518, "{UpdateTime}");
  byte_25EE547 = 11;
  strcpy((char *)&qword_25EE530, "{IssueDate}");
  byte_25EE55F = 12;
  strcpy((char *)&qword_25EE548, "{UpdateDate}");
  qword_25EE560 = (uint64_t)operator new(0x20uLL);
  unk_25EE568 = v277;
  strcpy((char *)qword_25EE560, "{AreaIncidentDataSource}");
  byte_25EE58F = 13;
  strcpy((char *)&qword_25EE578, "{AreaHectare}");
  byte_25EE5A7 = 10;
  strcpy((char *)&qword_25EE590, "{AreaAcre}");
  qword_25EE5A8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25EE5B0 = v273;
  strcpy((char *)qword_25EE5A8, "{WildfirePercentageContained}");
  qword_25EE5C0 = (uint64_t)operator new(0x28uLL);
  unk_25EE5C8 = v267[2];
  strcpy((char *)qword_25EE5C0, "{WildfireExpectedContainmentDate}");
  qword_25EE5D8 = (uint64_t)operator new(0x20uLL);
  unk_25EE5E0 = v275;
  strcpy((char *)qword_25EE5D8, "{ServerRecommendedRouteName}");
  qword_25EE5F0 = (uint64_t)operator new(0x20uLL);
  unk_25EE5F8 = v275;
  strcpy((char *)qword_25EE5F0, "{ServerNonRecommendedRoute1}");
  qword_25EE608 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25EE610 = v275;
  strcpy((char *)qword_25EE608, "{ServerNonRecommendedRoute2}");
  byte_25EE637 = 12;
  strcpy((char *)&qword_25EE620, "{ClientDest}");
  byte_25EE64F = 6;
  strcpy((char *)&dword_25EE638, "{Name}");
  qword_25EE650 = (uint64_t)operator new(0x20uLL);
  unk_25EE658 = v267[1];
  strcpy((char *)qword_25EE650, "ProactiveAlert_FasterRouteTitle");
  qword_25EE668 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25EE670 = v274;
  strcpy((char *)qword_25EE668, "ProactiveAlert_RoadClosure");
  qword_25EE680 = (uint64_t)operator new(0x30uLL);
  unk_25EE688 = v269;
  strcpy((char *)qword_25EE680, "ProactiveAlert_UnusuallyHeavyTrafficOnTwo");
  qword_25EE698 = (uint64_t)operator new(0x28uLL);
  unk_25EE6A0 = v272;
  strcpy((char *)qword_25EE698, "ProactiveAlert_FasterRouteTitle_to_Home");
  qword_25EE6B0 = (uint64_t)operator new(0x28uLL);
  unk_25EE6B8 = v272;
  strcpy((char *)qword_25EE6B0, "ProactiveAlert_FasterRouteTitle_to_Work");
  qword_25EE6C8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25EE6D0 = v272;
  strcpy((char *)qword_25EE6C8, "ProactiveAlert_FasterRouteTitle_to_Name");
  qword_25EE6E0 = (uint64_t)operator new(0x30uLL);
  unk_25EE6E8 = xmmword_20B93B0;
  strcpy((char *)qword_25EE6E0, "ProactiveAlert_FasterRouteTitle_to_StreetName");
  byte_25EE70F = 17;
  strcpy(byte_25EE6F8, "Proactive_Driving");
  strcpy(&byte_25EE727, "\n{RouteName}");
  strcpy((char *)&qword_25EE710, "_RouteName");
  byte_25EE73F = 11;
  qword_25EE740 = (uint64_t)operator new(0x28uLL);
  unk_25EE748 = v267[2];
  strcpy((char *)qword_25EE740, "Pass_Traffic_Light_Spoken_Primary");
  qword_25EE758 = (uint64_t)operator new(0x20uLL);
  unk_25EE760 = v273;
  strcpy((char *)qword_25EE758, "Pass_Stop_Sign_Spoken_Primary");
  unk_25EE770 = operator new(0x20uLL);
  unk_25EE778 = v267[0];
  strcpy(unk_25EE770, "Pass_Roundabout_Spoken_Primary");
  strcpy(&byte_25EE79F, "\nBannerBody");
  strcpy(byte_25EE788, "BannerHead");
  strcpy(&byte_25EE7B7, "\nBannerDescription");
  byte_25EE7CF = 17;
  strcpy(&byte_25EE7E7, "\n_Incident");
  strcpy((char *)&qword_25EE7D0, "VoiceAlert");
  strcpy(&byte_25EE7FF, "\t_Area_Incident");
  byte_25EE817 = 14;
  byte_25EE82F = 15;
  strcpy((char *)&qword_25EE818, "_Area_Incidents");
  strcpy(&byte_25EE847, "\t_Crash");
  strcpy((char *)&qword_25EE830, "_Accident");
  byte_25EE85F = 6;
  byte_25EE877 = 16;
  strcpy((char *)&xmmword_25EE860, "_Congestion_Zone");
  strcpy(&byte_25EE88F, "\n_Environmental_Zone");
  strcpy((char *)&qword_25EE878, "_Toll_Zone");
  byte_25EE8A7 = 19;
  BYTE1(qword_25EE8B8) = 116;
  WORD1(qword_25EE8B8) = 0;
  HIDWORD(qword_25EE8B8) = 301989888;
  strcpy(byte_25EE8C0, "_Construction");
  strcpy((char *)&qword_25EE8A8, "_Incident_Accide");
  byte_25EE8D7 = 13;
  byte_25EE8EF = 7;
  strcpy((char *)&dword_25EE8D8, "_Hazard");
  byte_25EE907 = 12;
  strcpy((char *)&qword_25EE8F0, "_LaneClosure");
  byte_25EE91F = 12;
  strcpy((char *)&qword_25EE908, "_LaneTrailer");
  qmemcpy(&byte_25EE937, "\t_LaneTrailer", 13);
  strcpy((char *)&qword_25EE920, "_Shoulder");
  qword_25EE948 = 0x1500007200000000;
  *(void *)algn_25EE944 = *(void *)"_Shoulder";
  strcpy((char *)&xmmword_25EE950, "_Causing_Traffic_Delay");
  HIBYTE(word_25EE966) = 22;
  byte_25EE97F = 6;
  strcpy((char *)&dword_25EE968, "_Timed");
  byte_25EE997 = 12;
  strcpy((char *)&qword_25EE980, "_HasDistance");
  byte_25EE9AF = 8;
  strcpy((char *)&qword_25EE998, "_Closure");
  strcpy(&byte_25EE9C7, "\n_BadRoad");
  strcpy((char *)&qword_25EE9B0, "_NoReroute");
  byte_25EE9DF = 8;
  byte_25EE9F7 = 12;
  strcpy((char *)&qword_25EE9E0, "_TollTrailer");
  byte_25EEA0F = 12;
  strcpy((char *)&qword_25EE9F8, "_BestTrailer");
  byte_25EEA27 = 8;
  strcpy((char *)&qword_25EEA10, "_Trailer");
  byte_25EEA3F = 18;
  strcpy((char *)&xmmword_25EEA28, "_Secondary_Trailer");
  byte_25EEA57 = 8;
  strcpy((char *)&qword_25EEA40, "_Savings");
  byte_25EEA6F = 8;
  strcpy((char *)&qword_25EEA58, "_AltRoad");
  byte_25EEA87 = 6;
  strcpy((char *)&dword_25EEA70, "_Named");
  byte_25EEA9F = 6;
  strcpy((char *)&dword_25EEA88, "_NAMED");
  byte_25EEAB7 = 22;
  strcpy((char *)&xmmword_25EEAA0, "_Named_Suggested_Route");
  qword_25EEAD0 = 0x1000000000000000;
  xmmword_25EEAC0 = xmmword_20E81D0;
  byte_25EEAEF = 11;
  strcpy((char *)&qword_25EEAD8, "_Speed_Trap");
  byte_25EEB07 = 4;
  strcpy((char *)&dword_25EEAF0, "_UGI");
  byte_25EEB1F = 12;
  strcpy((char *)&qword_25EEB08, "_Safer_Route");
  qword_25EEB20 = (uint64_t)operator new(0x20uLL);
  unk_25EEB28 = v267[1];
  strcpy((char *)qword_25EEB20, "BlockedRouteByBlockingIncident_");
  qword_25EEB38 = (uint64_t)operator new(0x28uLL);
  v270[1] = xmmword_20B9280;
  unk_25EEB40 = xmmword_20B9280;
  strcpy((char *)qword_25EEB38, "BlockedRouteByManeuverRestriction_");
  qword_25EEB50 = (uint64_t)operator new(0x20uLL);
  unk_25EEB58 = v267[0];
  strcpy((char *)qword_25EEB50, "BlockedRouteByTimeRestriction_");
  qword_25EEB68 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25EEB70 = xmmword_20B8FD0;
  strcpy((char *)qword_25EEB68, "SuggestRouteToAvoidBlockingIncident_");
  qword_25EEB80 = (uint64_t)operator new(0x30uLL);
  unk_25EEB88 = xmmword_20B9380;
  strcpy((char *)qword_25EEB80, "SuggestRouteToAvoidBlockingManeuverRestriction_");
  qword_25EEB98 = (uint64_t)operator new(0x30uLL);
  unk_25EEBA0 = xmmword_20B93E0;
  strcpy((char *)qword_25EEB98, "SuggestRouteToAvoidBlockingTimeRestriction_");
  byte_25EEBC7 = 1;
  word_25EEBB0 = 95;
  strcpy((char *)&xmmword_25EEBC8, "IncidentsCausingDelay_");
  HIBYTE(word_25EEBDE) = 22;
  qword_25EEBE0 = (uint64_t)operator new(0x19uLL);
  unk_25EEBE8 = v278;
  strcpy((char *)qword_25EEBE0, "NonVotableRoadIncident_");
  byte_25EEC0F = 20;
  strcpy(byte_25EEBF8, "VotableRoadIncident_");
  byte_25EEC27 = 13;
  strcpy((char *)&qword_25EEC10, "AreaIncident_");
  byte_25EEC3F = 15;
  strcpy((char *)&qword_25EEC28, "CongestionZone_");
  qword_25EEC40 = (uint64_t)operator new(0x20uLL);
  unk_25EEC48 = v277;
  strcpy((char *)qword_25EEC40, "EVModifiedChargingStops_");
  byte_25EEC6F = 13;
  strcpy((char *)&qword_25EEC58, "EVDisconnect_");
  byte_25EEC87 = 12;
  strcpy((char *)&qword_25EEC70, "EVReconnect_");
  qword_25EEC88 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25EEC90 = v275;
  strcpy((char *)qword_25EEC88, "EVOfflineToOnlineTransition_");
  byte_25EECB7 = 13;
  strcpy((char *)&qword_25EECA0, "EVOfflineSAR_");
  byte_25EECCF = 21;
  strcpy((char *)&xmmword_25EECB8, "EVTowingNotSupported_");
  byte_25EECE7 = 18;
  strcpy(algn_25EECD0, "EVInfeasibleRoute_");
  qword_25EECE8 = (uint64_t)operator new(0x38uLL);
  *(_OWORD *)algn_25EECF0 = xmmword_20B8DF0;
  strcpy((char *)qword_25EECE8, "SuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_25EED00 = (uint64_t)operator new(0x40uLL);
  unk_25EED08 = xmmword_20B98C0;
  strcpy((char *)qword_25EED00, "LCSuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_25EED18 = (uint64_t)operator new(0x30uLL);
  unk_25EED20 = v270[0];
  strcpy((char *)qword_25EED18, "SuggestRouteAddingStopsForEVInfeasibleRoute_");
  qmemcpy(v267, "InfeasibleRoute_ngStopsForEVInfeSuggestRouteAddi", sizeof(v267));
  qword_25EED30 = (uint64_t)operator new(0x30uLL);
  *(_WORD *)&v263[50] = 0;
  *(_DWORD *)&v263[52] = 0;
  *(void *)&v263[56] = 0x8000000000000030;
  unk_25EED38 = xmmword_20B9A80;
  strcpy((char *)qword_25EED30, "LCSuggestRouteAddingStopsForEVInfeasibleRoute_");
  strcpy(v263, "InfeasibleRoute_dingStopsForEVInLCSuggestRouteAd.");
  qword_25EED48 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_25EED50 = v269;
  strcpy((char *)qword_25EED48, "SuggestRouteAddingStopsToIncreaseDestSoc_");
  long long v186 = operator new(0x30uLL);
  qword_25EED60 = (uint64_t)v186;
  unk_25EED68 = v270[0];
  *long long v186 = v267[2];
  v186[1] = v267[1];
  *(_OWORD *)((char *)v186 + 28) = v267[0];
  *((unsigned char *)v186 + 44) = 0;
  qword_25EED78 = (uint64_t)operator new(0x28uLL);
  unk_25EED80 = v270[1];
  strcpy((char *)qword_25EED78, "SuggestDetourWithHigherArrivalSOC_");
  long long v187 = operator new(0x30uLL);
  qword_25EED90 = (uint64_t)v187;
  unk_25EED98 = *(_OWORD *)&v263[48];
  *long long v187 = *(_OWORD *)&v263[32];
  v187[1] = *(_OWORD *)&v263[16];
  *(_OWORD *)((char *)v187 + 30) = *(_OWORD *)v263;
  *((unsigned char *)v187 + 46) = 0;
  qword_25EEDA8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25EEDB0 = v272;
  strcpy((char *)qword_25EEDA8, "SuggestRouteToDestForEVInfeasibleRoute_");
  qword_25EEDC0 = (uint64_t)operator new(0x28uLL);
  unk_25EEDC8 = v266;
  strcpy((char *)qword_25EEDC0, "SuggestRouteRemovingStopsFromEVRoute_");
  qword_25EEDD8 = (uint64_t)operator new(0x20uLL);
  unk_25EEDE0 = v277;
  strcpy((char *)qword_25EEDD8, "OfflineToOnlineNewRoute_");
  qword_25EEDF0 = (uint64_t)operator new(0x40uLL);
  unk_25EEDF8 = xmmword_20B98C0;
  strcpy((char *)qword_25EEDF0, "SuggestDetourWithHigherArrivalSOCForInfeasibleUserRoute_");
  byte_25EEE1F = 20;
  strcpy(byte_25EEE08, "LPR_OFFLINE_REROUTE_");
  byte_25EEE37 = 16;
  strcpy((char *)&xmmword_25EEE20, "LPR_OFFLINE_SAR_");
  byte_25EEE4F = 20;
  strcpy(byte_25EEE38, "LPR_OFFLINE_REROUTE_");
  byte_25EEE67 = 16;
  strcpy((char *)&xmmword_25EEE50, "LPR_OFFLINE_SAR_");
  byte_25EEE7F = 19;
  strcpy(byte_25EEE68, "SuggestFasterRoute_");
  qword_25EEE80 = (char *)operator new(0x20uLL);
  xmmword_25EEE88 = v276;
  strcpy(qword_25EEE80, "AreaIncidentSaferReroute_");
  byte_25EEEAF = 12;
  strcpy((char *)&qword_25EEE98, "_Remove_Stop");
  byte_25EEEC7 = 13;
  strcpy((char *)&qword_25EEEB0, "_Remove_Stops");
  strcpy(&byte_25EEEDF, "\t_Add_Stops");
  strcpy((char *)&qword_25EEEC8, "_Add_Stop");
  strcpy(&byte_25EEEF7, "\n_Change_Route");
  byte_25EEF0F = 13;
  byte_25EEF27 = 15;
  strcpy((char *)&qword_25EEF10, "_Different_Stop");
  byte_25EEF3F = 16;
  strcpy((char *)&xmmword_25EEF28, "_Different_Stops");
  byte_25EEF57 = 15;
  strcpy((char *)&qword_25EEF40, "_EV_Remove_Stop");
  byte_25EEF6F = 16;
  strcpy((char *)&xmmword_25EEF58, "_EV_Remove_Stops");
  byte_25EEF87 = 12;
  strcpy((char *)&qword_25EEF70, "_EV_Add_Stop");
  byte_25EEF9F = 13;
  strcpy((char *)&qword_25EEF88, "_EV_Add_Stops");
  byte_25EEFB7 = 15;
  strcpy((char *)&qword_25EEFA0, "_EV_Low_Battery");
  byte_25EEFCF = 14;
  strcpy((char *)&qword_25EEFB8, "_EV_Infeasible");
  byte_25EEFE7 = 15;
  strcpy((char *)&qword_25EEFD0, "_EV_Last_Chance");
  qword_25EEFE8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25EEFF0 = v277;
  strcpy((char *)qword_25EEFE8, "_EV_Low_Battery_Add_Stop");
  uint64_t v188 = qword_25EEEE8;
  qword_25EF000 = (uint64_t)operator new(0x20uLL);
  unk_25EF008 = v276;
  strcpy((char *)qword_25EF000, "_EV_Low_Battery_Add_Stops");
  qword_25EF018 = (uint64_t)operator new(0x19uLL);
  unk_25EF020 = v278;
  strcpy((char *)qword_25EF018, "_EV_Infeasible_Add_Stop");
  int v189 = byte_25EEEF7;
  if (byte_25EEEF7 >= 0) {
    size_t v190 = byte_25EEEF7;
  }
  else {
    size_t v190 = v188;
  }
  unint64_t v191 = v190 + 14;
  if (v190 + 14 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v191 >= 0x17)
  {
    uint64_t v194 = (v191 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v191 | 7) != 0x17) {
      uint64_t v194 = v191 | 7;
    }
    uint64_t v195 = v194 + 1;
    long long v196 = (char *)operator new(v194 + 1);
    qword_25EF038 = v190 + 14;
    unk_25EF040 = v195 | 0x8000000000000000;
    qword_25EF030 = (uint64_t)v196;
    qmemcpy(v196, "_EV_Infeasible", 14);
    long long v192 = v196 + 14;
  }
  else
  {
    BYTE1(qword_25EF038) = 0;
    WORD1(qword_25EF038) = 0;
    HIDWORD(qword_25EF038) = 0;
    unk_25EF040 = 0;
    byte_25EF047 = v190 + 14;
    strcpy((char *)&qword_25EF030, "_EV_Infe");
    long long v192 = (char *)&qword_25EF038 + 6;
    if (!v190)
    {
      char v193 = 1;
      goto LABEL_425;
    }
  }
  if (v189 >= 0) {
    uint64_t v197 = (uint64_t)&qword_25EEEE0;
  }
  else {
    uint64_t v197 = 0x6F74535F6464415FLL;
  }
  memmove(v192, (const void *)v197, v190);
  char v193 = 0;
LABEL_425:
  v192[v190] = 0;
  long long v198 = (char *)operator new(0x20uLL);
  qword_25EF048 = (uint64_t)v198;
  *(_OWORD *)algn_25EF050 = v277;
  *(void *)long long v198 = qword_25EEFD0;
  *(void *)(v198 + 7) = *(uint64_t *)((char *)&qword_25EEFD0 + 7);
  *(void *)(v198 + 15) = qword_25EEEC8;
  v198[23] = word_25EEED0;
  v198[24] = 0;
  unint64_t v199 = v190 + 15;
  if (v190 + 15 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v199 > 0x16)
  {
    uint64_t v201 = (v199 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v199 | 7) != 0x17) {
      uint64_t v201 = v199 | 7;
    }
    uint64_t v202 = v201 + 1;
    long long v200 = (uint64_t *)operator new(v201 + 1);
    qword_25EF068 = v190 + 15;
    unk_25EF070 = v202 | 0x8000000000000000;
    qword_25EF060 = (uint64_t)v200;
  }
  else
  {
    long long v200 = &qword_25EF060;
    qword_25EF068 = 0;
    unk_25EF070 = 0;
    qword_25EF060 = 0;
    byte_25EF077 = v190 + 15;
  }
  *long long v200 = qword_25EEFD0;
  *(uint64_t *)((char *)v200 + 7) = *(uint64_t *)((char *)&qword_25EEFD0 + 7);
  long long v203 = (char *)v200 + 15;
  if ((v193 & 1) == 0)
  {
    if (v189 >= 0) {
      long long v204 = &qword_25EEEE0;
    }
    else {
      long long v204 = (uint64_t *)qword_25EEEE0;
    }
    memmove((char *)v200 + 15, v204, v190);
  }
  v203[v190] = 0;
  byte_25EF08F = 17;
  strcpy((char *)&xmmword_25EF078, "_EV_Forced_Detour");
  qword_25EF090 = (uint64_t)operator new(0x20uLL);
  unk_25EF098 = v276;
  strcpy((char *)qword_25EF090, "_EV_Higher_Arrival_Charge");
  qword_25EF0A8 = (uint64_t)operator new(0x28uLL);
  unk_25EF0B0 = xmmword_20B8FD0;
  strcpy((char *)qword_25EF0A8, "_EV_Infeasible_Higher_Arrival_Charge");
  byte_25EF0D7 = 16;
  strcpy(byte_25EF0C0, "_EV_Out_Of_Range");
  qword_25EF0D8 = (uint64_t)operator new(0x20uLL);
  unk_25EF0E0 = v271;
  strcpy((char *)qword_25EF0D8, "_EV_Last_Chance_Take_Detour");
  strcpy(byte_25EF0F0, "_EV_Forced_Modify_Stop");
  HIBYTE(word_25EF106) = 22;
  qword_25EF108 = (uint64_t)operator new(0x19uLL);
  unk_25EF110 = v278;
  strcpy((char *)qword_25EF108, "_EV_Forced_Modify_Stops");
  byte_25EF137 = 19;
  strcpy(byte_25EF120, "_EV_Forced_Add_Stop");
  byte_25EF14F = 20;
  strcpy((char *)&xmmword_25EF138, "_EV_Forced_Add_Stops");
  byte_25EF167 = 21;
  strcpy(byte_25EF150, "_EV_Battery_Info_Lost");
  qword_25EF168 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25EF170 = v276;
  strcpy((char *)qword_25EF168, "_EV_Battery_Info_Restored");
  qword_25EF180 = (uint64_t)operator new(0x20uLL);
  unk_25EF188 = v277;
  strcpy((char *)qword_25EF180, "_EV_Towing_Not_Supported");
  qword_25EF198 = (uint64_t)operator new(0x28uLL);
  unk_25EF1A0 = v268;
  strcpy((char *)qword_25EF198, "_EV_Offline_to_Online_Transition");
  byte_25EF1C7 = 15;
  strcpy((char *)&qword_25EF1B0, "_EV_Offline_SAR");
  qword_25EF1C8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25EF1D0 = v275;
  strcpy((char *)qword_25EF1C8, "_Offline_to_Online_New_Route");
  byte_25EF1F7 = 12;
  strcpy((char *)&qword_25EF1E0, "BannerButton");
  byte_25EF20F = 8;
  strcpy((char *)&qword_25EF1F8, "_Dismiss");
  byte_25EF227 = 3;
  word_25EF210 = 20319;
  byte_25EF212 = 75;
  byte_25EF213 = 0;
  byte_25EF23F = 11;
  strcpy((char *)&qword_25EF228, "_Still_Here");
  byte_25EF257 = 8;
  strcpy((char *)&qword_25EF240, "_Cleared");
  qmemcpy(&byte_25EF26F, "\nBannerButton", 13);
  strcpy((char *)&qword_25EF258, "_No_Thanks");
  uint64_t v205 = qword_25EF1E8;
  qword_25EF280 = 0x1400000000000000;
  *(void *)algn_25EF27C = 0x7373696D7369445FLL;
  qword_25EF298 = 0xF00000000000000;
  qword_25EF290 = 0x4B4F5F6E6F7474;
  int v206 = byte_25EEF87;
  if (byte_25EEF87 >= 0) {
    size_t v207 = byte_25EEF87;
  }
  else {
    size_t v207 = qword_25EEF78;
  }
  unint64_t v208 = v207 + 12;
  qword_25EF288 = *(void *)"BannerButton";
  if (v207 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v208 >= 0x17)
  {
    uint64_t v210 = (v208 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v208 | 7) != 0x17) {
      uint64_t v210 = v208 | 7;
    }
    uint64_t v211 = v210 + 1;
    long long v212 = (char *)operator new(v210 + 1);
    qword_25EF2A8 = v207 + 12;
    unk_25EF2B0 = v211 | 0x8000000000000000;
    qword_25EF2A0 = (uint64_t)v212;
    *((_DWORD *)v212 + 2) = 1852798068;
    *(void *)long long v212 = *(void *)"BannerButton";
    long long v209 = v212 + 12;
  }
  else
  {
    BYTE5(qword_25EF2A8) = 0;
    HIWORD(qword_25EF2A8) = 0;
    unk_25EF2B0 = 0;
    byte_25EF2B7 = v207 + 12;
    strcpy((char *)&qword_25EF2A0, "BannerButton");
    long long v209 = (char *)&qword_25EF2A8 + 4;
    if (!v207) {
      goto LABEL_450;
    }
  }
  if (v206 >= 0) {
    long long v213 = &qword_25EEF70;
  }
  else {
    long long v213 = (uint64_t *)qword_25EEF70;
  }
  memmove(v209, v213, v207);
LABEL_450:
  v209[v207] = 0;
  int v214 = byte_25EEF9F;
  if (byte_25EEF9F >= 0) {
    size_t v215 = byte_25EEF9F;
  }
  else {
    size_t v215 = unk_25EEF90;
  }
  unint64_t v216 = v215 + 12;
  if (v215 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v216 >= 0x17)
  {
    uint64_t v218 = (v216 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v216 | 7) != 0x17) {
      uint64_t v218 = v216 | 7;
    }
    uint64_t v219 = v218 + 1;
    uint64_t v220 = (char *)operator new(v218 + 1);
    qword_25EF2C0 = v215 + 12;
    unk_25EF2C8 = v219 | 0x8000000000000000;
    qword_25EF2B8 = (uint64_t)v220;
    *(void *)uint64_t v220 = qword_25EF1E0;
    *((_DWORD *)v220 + 2) = qword_25EF1E8;
    long long v217 = v220 + 12;
  }
  else
  {
    qword_25EF2C0 = 0;
    unk_25EF2C8 = 0;
    byte_25EF2CF = v215 + 12;
    LODWORD(qword_25EF2C0) = qword_25EF1E8;
    qword_25EF2B8 = qword_25EF1E0;
    long long v217 = (char *)&qword_25EF2C0 + 4;
    if (!v215) {
      goto LABEL_464;
    }
  }
  if (v214 >= 0) {
    char v221 = &qword_25EEF88;
  }
  else {
    char v221 = (uint64_t *)qword_25EEF88;
  }
  memmove(v217, v221, v215);
LABEL_464:
  v217[v215] = 0;
  int v222 = byte_25EEF57;
  if (byte_25EEF57 >= 0) {
    size_t v223 = byte_25EEF57;
  }
  else {
    size_t v223 = unk_25EEF48;
  }
  unint64_t v224 = v223 + 12;
  if (v223 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v224 >= 0x17)
  {
    uint64_t v226 = (v224 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v224 | 7) != 0x17) {
      uint64_t v226 = v224 | 7;
    }
    uint64_t v227 = v226 + 1;
    char v228 = (char *)operator new(v226 + 1);
    qword_25EF2D8 = v223 + 12;
    unk_25EF2E0 = v227 | 0x8000000000000000;
    qword_25EF2D0 = (uint64_t)v228;
    *(void *)char v228 = qword_25EF1E0;
    *((_DWORD *)v228 + 2) = qword_25EF1E8;
    long long v225 = v228 + 12;
  }
  else
  {
    qword_25EF2D8 = 0;
    unk_25EF2E0 = 0;
    byte_25EF2E7 = v223 + 12;
    LODWORD(qword_25EF2D8) = qword_25EF1E8;
    qword_25EF2D0 = qword_25EF1E0;
    long long v225 = (char *)&qword_25EF2D8 + 4;
    if (!v223) {
      goto LABEL_478;
    }
  }
  if (v222 >= 0) {
    uint64_t v229 = &qword_25EEF40;
  }
  else {
    uint64_t v229 = (uint64_t *)qword_25EEF40;
  }
  memmove(v225, v229, v223);
LABEL_478:
  v225[v223] = 0;
  int v230 = byte_25EF1F7;
  if (byte_25EF1F7 >= 0) {
    size_t v231 = byte_25EF1F7;
  }
  else {
    size_t v231 = v205;
  }
  int v232 = byte_25EEF6F;
  if (byte_25EEF6F >= 0) {
    size_t v233 = byte_25EEF6F;
  }
  else {
    size_t v233 = *((void *)&xmmword_25EEF58 + 1);
  }
  unint64_t v234 = v233 + v231;
  if (v233 + v231 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v234 <= 0x16)
  {
    __int16 v235 = &qword_25EF2E8;
    qword_25EF2F0 = 0;
    unk_25EF2F8 = 0;
    qword_25EF2E8 = 0;
    byte_25EF2FF = v233 + v231;
    if (!v231) {
      goto LABEL_491;
    }
    goto LABEL_487;
  }
  uint64_t v242 = (v234 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v234 | 7) != 0x17) {
    uint64_t v242 = v234 | 7;
  }
  uint64_t v243 = v242 + 1;
  __int16 v235 = (uint64_t *)operator new(v242 + 1);
  qword_25EF2F0 = v233 + v231;
  unk_25EF2F8 = v243 | 0x8000000000000000;
  qword_25EF2E8 = (uint64_t)v235;
  if (v231)
  {
LABEL_487:
    if (v230 >= 0) {
      long long v236 = &qword_25EF1E0;
    }
    else {
      long long v236 = (uint64_t *)qword_25EF1E0;
    }
    memmove(v235, v236, v231);
  }
LABEL_491:
  long long v237 = (char *)v235 + v231;
  if (v233)
  {
    if (v232 >= 0) {
      long long v238 = &xmmword_25EEF58;
    }
    else {
      long long v238 = (long long *)xmmword_25EEF58;
    }
    memmove(v237, v238, v233);
  }
  v237[v233] = 0;
  unint64_t v239 = v231 + 11;
  if (v231 + 11 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v239 >= 0x17)
  {
    uint64_t v244 = (v239 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v239 | 7) != 0x17) {
      uint64_t v244 = v239 | 7;
    }
    uint64_t v245 = v244 + 1;
    long long v240 = (uint64_t *)operator new(v244 + 1);
    qword_25EF308 = v231 + 11;
    unk_25EF310 = v245 | 0x8000000000000000;
    qword_25EF300 = (uint64_t)v240;
  }
  else
  {
    long long v240 = &qword_25EF300;
    qword_25EF308 = 0;
    unk_25EF310 = 0;
    qword_25EF300 = 0;
    byte_25EF317 = v231 + 11;
    if (!v231)
    {
      *(_DWORD *)((char *)&qword_25EF300 + 7) = *(_DWORD *)((char *)&qword_25EF228 + 7);
      qword_25EF300 = qword_25EF228;
      BYTE3(qword_25EF308) = 0;
      LOBYTE(v241) = 8;
      goto LABEL_512;
    }
  }
  if (v230 >= 0) {
    long long v246 = &qword_25EF1E0;
  }
  else {
    long long v246 = (uint64_t *)qword_25EF1E0;
  }
  memmove(v240, v246, v231);
  long long v247 = (char *)v240 + v231;
  int v248 = *(_DWORD *)((char *)&qword_25EF228 + 7);
  *(void *)long long v247 = qword_25EF228;
  *(_DWORD *)(v247 + 7) = v248;
  v247[11] = 0;
  unint64_t v241 = v231 + 8;
  if (v231 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v241 <= 0x16)
  {
LABEL_512:
    long long v249 = &qword_25EF318;
    qword_25EF320 = 0;
    unk_25EF328 = 0;
    qword_25EF318 = 0;
    byte_25EF32F = v241;
    if (!v231) {
      goto LABEL_517;
    }
    goto LABEL_513;
  }
  uint64_t v261 = (v241 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v241 | 7) != 0x17) {
    uint64_t v261 = v241 | 7;
  }
  uint64_t v262 = v261 + 1;
  long long v249 = (uint64_t *)operator new(v261 + 1);
  qword_25EF320 = v231 + 8;
  unk_25EF328 = v262 | 0x8000000000000000;
  qword_25EF318 = (uint64_t)v249;
  if (v231)
  {
LABEL_513:
    if (v230 >= 0) {
      long long v250 = &qword_25EF1E0;
    }
    else {
      long long v250 = (uint64_t *)qword_25EF1E0;
    }
    memmove(v249, v250, v231);
  }
LABEL_517:
  uint64_t v251 = (char *)v249 + v231;
  *(void *)uint64_t v251 = qword_25EF240;
  v251[8] = 0;
  int v252 = byte_25EF26F;
  if (byte_25EF26F >= 0) {
    size_t v253 = byte_25EF26F;
  }
  else {
    size_t v253 = qword_25EF260;
  }
  unint64_t v254 = v253 + v231;
  if (v253 + v231 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v254 <= 0x16)
  {
    long long v255 = &qword_25EF330;
    qword_25EF338 = 0;
    unk_25EF340 = 0;
    qword_25EF330 = 0;
    byte_25EF347 = v253 + v231;
    if (!v231) {
      goto LABEL_527;
    }
    goto LABEL_523;
  }
  uint64_t v259 = (v254 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v254 | 7) != 0x17) {
    uint64_t v259 = v254 | 7;
  }
  uint64_t v260 = v259 + 1;
  long long v255 = (uint64_t *)operator new(v259 + 1);
  qword_25EF338 = v253 + v231;
  unk_25EF340 = v260 | 0x8000000000000000;
  qword_25EF330 = (uint64_t)v255;
  if (v231)
  {
LABEL_523:
    if (v230 >= 0) {
      long long v256 = &qword_25EF1E0;
    }
    else {
      long long v256 = (uint64_t *)qword_25EF1E0;
    }
    memmove(v255, v256, v231);
  }
LABEL_527:
  long long v257 = (char *)v255 + v231;
  if (v253)
  {
    if (v252 >= 0) {
      char v258 = &qword_25EF258;
    }
    else {
      char v258 = (uint64_t *)qword_25EF258;
    }
    memmove(v257, v258, v253);
  }
  v257[v253] = 0;
  strcpy(&byte_25EF35F, "\n{newroute}");
  strcpy((char *)&qword_25EF348, "{roadname}");
  strcpy(&byte_25EF377, "\n{count}");
  byte_25EF38F = 7;
  strcpy(&byte_25EF3A7, "\n{dur}");
  strcpy((char *)&qword_25EF390, "{duration}");
  byte_25EF3BF = 5;
  qword_25EF3C0 = (uint64_t)operator new(0x20uLL);
  unk_25EF3C8 = v274;
  strcpy((char *)qword_25EF3C0, "{PleaseProceedWithCaution}");
  byte_25EF3EF = 15;
  strcpy((char *)&qword_25EF3D8, "{UserRouteName}");
  byte_25EF407 = 20;
  strcpy((char *)&xmmword_25EF3F0, "{SuggestedRouteName}");
  byte_25EF41F = 18;
  strcpy(byte_25EF408, "Speed_Camera_Ahead");
  qword_25EF420 = (uint64_t)operator new(0x20uLL);
  unk_25EF428 = v273;
  strcpy((char *)qword_25EF420, "Red_Light_Camera_Ahead_Spoken");
  qword_25EF438 = (uint64_t)operator new(0x20uLL);
  unk_25EF440 = v273;
  strcpy((char *)qword_25EF438, "Stop_Sign_Camera_Ahead_Spoken");
  qword_25EF450 = (uint64_t)operator new(0x28uLL);
  unk_25EF458 = v270[1];
  strcpy((char *)qword_25EF450, "Speed_Camera_Ahead_Multiple_Spoken");
  qword_25EF468 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25EF470 = v264;
  strcpy((char *)qword_25EF468, "Red_Light_Camera_Ahead_Multiple_Spoken");
  qword_25EF480 = (uint64_t)operator new(0x20uLL);
  unk_25EF488 = v275;
  strcpy((char *)qword_25EF480, "Camera_Ahead_Multiple_Spoken");
  qword_25EF498 = (uint64_t)operator new(0x30uLL);
  unk_25EF4A0 = v265;
  strcpy((char *)qword_25EF498, "Red_Light_Camera_Speed_Camera_Ahead_Spoken");
  qword_25EF4B0 = (char *)operator new(0x30uLL);
  strcpy(qword_25EF4B0, "Stop_Sign_Camera_Speed_Camera_Ahead_Spoken");
  byte_25EF4DF = 16;
  xmmword_25EF4B8 = v265;
  strcpy(byte_25EF4C8, "_Speed_Limit_Mph");
  byte_25EF4F7 = 16;
  strcpy(byte_25EF4E0, "_Speed_Limit_Kph");
  byte_25EF50F = 11;
  strcpy((char *)&qword_25EF4F8, "Watch_Speed");
  byte_25EF527 = 4;
  strcpy((char *)&dword_25EF510, "_One");
  byte_25EF53F = 4;
  strcpy((char *)&dword_25EF528, "_Two");
  byte_25EF557 = 4;
  strcpy((char *)&dword_25EF540, "_Few");
  byte_25EF56F = 5;
  strcpy((char *)&dword_25EF558, "_Many");
  byte_25EF587 = 6;
  strcpy((char *)&dword_25EF570, "_Other");
  byte_25EF59F = 4;
  strcpy((char *)&dword_25EF588, "_ONE");
  byte_25EF5B7 = 7;
  strcpy((char *)&dword_25EF5A0, "{Speed}");
  byte_25EF5CF = 8;
  strcpy((char *)&qword_25EF5B8, "Dismount");
  byte_25EF5E7 = 4;
  strcpy((char *)&dword_25EF5D0, "Walk");
  byte_25EF5FF = 5;
  strcpy((char *)&dword_25EF5E8, "Mount");
  byte_25EF617 = 7;
  strcpy((char *)&dword_25EF600, "Remount");
  strcpy(&byte_25EF62F, "\t_Crosswalk");
  strcpy((char *)&qword_25EF618, "Walk_Road");
  strcpy(&byte_25EF647, "\n_PLURAL");
  byte_25EF65F = 7;
  strcpy(&byte_25EF677, "\n{description1}");
  strcpy((char *)&qword_25EF660, "_SECONDARY");
  byte_25EF68F = 14;
  byte_25EF6A7 = 14;
  strcpy((char *)&qword_25EF690, "{description2}");
  byte_25EF6BF = 21;
  strcpy((char *)&xmmword_25EF6A8, "TWO_ROAD_DESCRIPTIONS");
  byte_25EF6D7 = 17;
  strcpy((char *)&xmmword_25EF6C0, "{SlopePercentage}");
  byte_25EF6EF = 15;
  strcpy((char *)&qword_25EF6D8, "_Protected_Lane");
  strcpy(&byte_25EF707, "\n_Paved_Path");
  strcpy((char *)&qword_25EF6F0, "_Bike_Path");
  byte_25EF71F = 11;
  byte_25EF737 = 15;
  strcpy((char *)&qword_25EF720, "_Dedicated_Lane");
  byte_25EF74F = 12;
  strcpy((char *)&qword_25EF738, "_Shared_Path");
  strcpy(&byte_25EF767, "\n_UnnamedRoad");
  strcpy((char *)&qword_25EF750, "_Bike_Lane");
  byte_25EF77F = 12;
  byte_25EF797 = 5;
  strcpy((char *)&dword_25EF780, "_Path");
  byte_25EF7AF = 6;
  strcpy((char *)&dword_25EF798, "_Trail");
  strcpy(&byte_25EF7C7, "\t_Plaza");
  strcpy((char *)&qword_25EF7B0, "_Sidewalk");
  byte_25EF7DF = 6;
  byte_25EF7F7 = 15;
  strcpy((char *)&qword_25EF7E0, "_Moving_Walkway");
  byte_25EF80F = 14;
  strcpy((char *)&qword_25EF7F8, "Two_Stage_Turn");
  byte_25EF827 = 16;
  strcpy((char *)&xmmword_25EF810, "{OptionalPeriod}");
  byte_25EF83F = 18;
  strcpy((char *)&xmmword_25EF828, "Advisory_Separator");
  byte_25EF857 = 6;
  strcpy((char *)&dword_25EF840, "Period");
  byte_25EF86F = 21;
  strcpy((char *)&xmmword_25EF858, "Advisory_Title_Notice");
  strcpy((char *)&xmmword_25EF870, "Advisory_Title_Notices");
  HIBYTE(word_25EF886) = 22;
  byte_25EF89F = 7;
  strcpy((char *)&dword_25EF888, "_DETAIL");
  byte_25EF8B7 = 17;
  strcpy((char *)&xmmword_25EF8A0, "_LONG_REGION_LIST");
  byte_25EF8CF = 16;
  strcpy((char *)&xmmword_25EF8B8, "Advisory_Grouped");
  byte_25EF8E7 = 11;
  strcpy((char *)&qword_25EF8D0, "_Advisories");
  qword_25EF8E8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25EF8F0 = v271;
  strcpy((char *)qword_25EF8E8, "Advisory_WILDFIRE_METADATA_");
  byte_25EF917 = 8;
  strcpy((char *)&qword_25EF900, "Advisory");
  byte_25EF92F = 13;
  strcpy((char *)&qword_25EF918, "MPR_NUM_STOPS");
  byte_25EF947 = 17;
  strcpy(algn_25EF930, "EV_CHARGE_STATION");
  byte_25EF95F = 11;
  strcpy((char *)&qword_25EF948, "_NAMED_CITY");
  byte_25EF977 = 5;
  strcpy((char *)&dword_25EF960, "_Stop");
  strcpy(&byte_25EF98F, "\n{StopsCount}");
  strcpy((char *)&qword_25EF978, "{CityName}");
  byte_25EF9A7 = 12;
  byte_25EF9BF = 11;
  strcpy((char *)&qword_25EF9A8, "_With_Other");
  byte_25EF9D7 = 15;
  strcpy((char *)&qword_25EF9C0, "{DepartureTime}");
  qword_25EF9D8 = (uint64_t)operator new(0x28uLL);
  unk_25EF9E0 = v272;
  strcpy((char *)qword_25EF9D8, "Ending_Charge_Station_Port_Availability");
  qword_25EF9F0 = (uint64_t)operator new(0x28uLL);
  unk_25EF9F8 = v266;
  strcpy((char *)qword_25EF9F0, "Ending_Charge_Station_No_Availability");
  qword_25EFA08 = (uint64_t)operator new(0x28uLL);
  unk_25EFA10 = v270[1];
  strcpy((char *)qword_25EFA08, "Ending_Charge_Station_No_Real_Time");
  byte_25EFA37 = 16;
  strcpy(byte_25EFA20, "{AvailablePorts}");
  byte_25EFA4F = 12;
  strcpy((char *)&qword_25EFA38, "{TotalPorts}");
  byte_25EFA67 = 14;
  strcpy((char *)&qword_25EFA50, "{ManeuverIcon}");
  qword_25EFA68 = (uint64_t)operator new(0x38uLL);
  *(_OWORD *)algn_25EFA70 = xmmword_20B9A60;
  strcpy((char *)qword_25EFA68, "Walking_Distance_ManeuverIcon_PrimaryInstruction");
  qword_25EFA80 = (uint64_t)operator new(0x20uLL);
  unk_25EFA88 = v271;
  strcpy((char *)qword_25EFA80, "Walking_Destination_Unnamed");
  qword_25EFA98 = (uint64_t)operator new(0x20uLL);
  unk_25EFAA0 = v273;
  strcpy((char *)qword_25EFA98, "TrafficDelay_Label_Title_Sign");
  qword_25EFAB0 = (uint64_t)operator new(0x20uLL);
  unk_25EFAB8 = v275;
  strcpy((char *)qword_25EFAB0, "Special_Guidance_Instruction");
  byte_25EFADF = 2;
  strcpy((char *)&word_25EFAC8, "CZ");
  byte_25EFAF7 = 3;
  dword_25EFAE0 = 5919811;
  unk_25EFB0F = 3;
  dword_25EFAF8 = 6243649;
  byte_25EFB27 = 0;
  byte_25EFB3F = 7;
  strcpy((char *)&dword_25EFB28, "TRANSIT");
  byte_25EFB57 = 7;
  strcpy((char *)&dword_25EFB40, "OFFLINE");
  qword_25EFB58 = (uint64_t)operator new(0x28uLL);
  unk_25EFB60 = v264;
  strcpy((char *)qword_25EFB58, "Advisory_Card_French_Climate_Law_Title");
  qword_25EFB70 = (uint64_t)operator new(0x30uLL);
  unk_25EFB78 = xmmword_20B93C0;
  strcpy((char *)qword_25EFB70, "Advisory_Card_French_Climate_Law_Details");
  qword_25EFB88 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_25EFB90 = v269;
  strcpy((char *)qword_25EFB88, "French_Climate_Law_Metadata_Weblink_Title");
  qword_25EFBA0 = (uint64_t)operator new(0x20uLL);
  unk_25EFBA8 = v275;
  strcpy((char *)qword_25EFBA0, "{ClimateLawLearnMoreWeblink}");
  byte_25EFBCF = 3;
  dword_25EFBB8 = 4280902;
  qword_25EFBD0 = (uint64_t)operator new(0x70uLL);
  unk_25EFBD8 = xmmword_20E81E0;
  strcpy((char *)qword_25EFBD0, "https://www.vie-publique.fr/loi/278460-loi-22-aout-2021-climat-et-resilience-convention-citoyenne-climat");
  qword_25EFBE8 = (uint64_t)operator new(0x19uLL);
  *(_OWORD *)algn_25EFBF0 = v278;
  strcpy((char *)qword_25EFBE8, "messageMprEvBadResponse");
  qword_25EFC00 = (uint64_t)operator new(0x28uLL);
  unk_25EFC08 = v270[1];
  strcpy((char *)qword_25EFC00, "messageMprEvVehicleNameBadResponse");
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__dst, "UNKNOWN");
  *(_DWORD *)v281 = 0;
  HIBYTE(v282[0]) = 14;
  strcpy(&v281[8], "ROUTES_THROUGH");
  LODWORD(v282[1]) = 1;
  v283[23] = 9;
  strcpy(v283, "ROUTES_TO");
  LODWORD(v284) = 3;
  HIBYTE(v286) = 11;
  strcpy((char *)v285, "ROUTES_FROM");
  LODWORD(v287) = 2;
  xmmword_25EFC78 = 0u;
  xmmword_25EFC88 = 0u;
  dword_25EFC98 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25EFC78, (uint64_t)&__dst, (uint64_t)&__dst);
  sub_3A6EF0((uint64_t)&xmmword_25EFC78, (uint64_t)&v281[8], (uint64_t)&v281[8]);
  sub_3A6EF0((uint64_t)&xmmword_25EFC78, (uint64_t)v283, (uint64_t)v283);
  sub_3A6EF0((uint64_t)&xmmword_25EFC78, (uint64_t)v285, (uint64_t)v285);
  if (SHIBYTE(v286) < 0)
  {
    operator delete(v285[0]);
    if ((v283[23] & 0x80000000) == 0)
    {
LABEL_534:
      if ((SHIBYTE(v282[0]) & 0x80000000) == 0) {
        goto LABEL_535;
      }
LABEL_547:
      operator delete(*(void **)&v281[8]);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_536;
      }
LABEL_548:
      operator delete(__dst.__r_.__value_.__l.__data_);
      goto LABEL_536;
    }
  }
  else if ((v283[23] & 0x80000000) == 0)
  {
    goto LABEL_534;
  }
  operator delete(*(void **)v283);
  if (SHIBYTE(v282[0]) < 0) {
    goto LABEL_547;
  }
LABEL_535:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_548;
  }
LABEL_536:
  byte_25EFC2F = 8;
  strcpy((char *)&qword_25EFC18, "any_mode");
  byte_25EFC47 = 7;
  strcpy((char *)&dword_25EFC30, "cycling");
  byte_25EFC5F = 7;
  strcpy((char *)&dword_25EFC48, "driving");
  byte_25EFC77 = 7;
  strcpy((char *)&dword_25EFC60, "walking");
}

void sub_E08668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x3B7]) < 0)
  {
    operator delete((void *)STACK[0x3A0]);
    if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0)
  {
LABEL_3:
    if (SLOBYTE(STACK[0x387]) < 0) {
      goto LABEL_4;
    }
    goto LABEL_18;
  }
  operator delete((void *)STACK[0x388]);
  if (SLOBYTE(STACK[0x387]) < 0)
  {
LABEL_4:
    operator delete((void *)STACK[0x370]);
    if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0)
  {
LABEL_5:
    if (SLOBYTE(STACK[0x357]) < 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete((void *)STACK[0x358]);
  if (SLOBYTE(STACK[0x357]) < 0)
  {
LABEL_6:
    operator delete((void *)STACK[0x340]);
    if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0)
  {
LABEL_7:
    if (SLOBYTE(STACK[0x327]) < 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete((void *)STACK[0x328]);
  if (SLOBYTE(STACK[0x327]) < 0)
  {
LABEL_8:
    operator delete((void *)STACK[0x310]);
    if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0)
  {
LABEL_9:
    if (SLOBYTE(STACK[0x2F7]) < 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete((void *)STACK[0x2F8]);
  if (SLOBYTE(STACK[0x2F7]) < 0)
  {
LABEL_10:
    operator delete((void *)STACK[0x2E0]);
    if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0)
  {
LABEL_11:
    if (SLOBYTE(STACK[0x2C7]) < 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete((void *)STACK[0x2C8]);
  if (SLOBYTE(STACK[0x2C7]) < 0)
  {
LABEL_12:
    operator delete((void *)STACK[0x2B0]);
    if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0)
  {
LABEL_13:
    if (SLOBYTE(STACK[0x297]) < 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete((void *)STACK[0x298]);
  if (SLOBYTE(STACK[0x297]) < 0)
  {
LABEL_14:
    operator delete((void *)STACK[0x280]);
    if (SLOBYTE(STACK[0x27F]) < 0)
    {
LABEL_36:
      operator delete((void *)STACK[0x268]);
      if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0)
      {
LABEL_37:
        if (SLOBYTE(STACK[0x24F]) < 0)
        {
LABEL_38:
          operator delete((void *)STACK[0x238]);
          if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0)
          {
LABEL_39:
            if (SLOBYTE(STACK[0x21F]) < 0)
            {
LABEL_40:
              operator delete((void *)STACK[0x208]);
              if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0)
              {
LABEL_41:
                if (a72 < 0) {
                  goto LABEL_42;
                }
                goto LABEL_44;
              }
LABEL_34:
              operator delete(a73);
              if (a72 < 0)
              {
LABEL_42:
                operator delete(a71);
                if ((a70 & 0x80000000) == 0) {
                  goto LABEL_43;
                }
                goto LABEL_45;
              }
LABEL_44:
              if ((a70 & 0x80000000) == 0) {
LABEL_43:
              }
                _Unwind_Resume(a1);
LABEL_45:
              operator delete(a65);
              _Unwind_Resume(a1);
            }
LABEL_33:
            if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0) {
              goto LABEL_41;
            }
            goto LABEL_34;
          }
LABEL_32:
          operator delete((void *)STACK[0x220]);
          if (SLOBYTE(STACK[0x21F]) < 0) {
            goto LABEL_40;
          }
          goto LABEL_33;
        }
LABEL_31:
        if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0) {
          goto LABEL_39;
        }
        goto LABEL_32;
      }
LABEL_30:
      operator delete((void *)STACK[0x250]);
      if (SLOBYTE(STACK[0x24F]) < 0) {
        goto LABEL_38;
      }
      goto LABEL_31;
    }
LABEL_29:
    if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_30;
  }
LABEL_28:
  if (SLOBYTE(STACK[0x27F]) < 0) {
    goto LABEL_36;
  }
  goto LABEL_29;
}

void sub_E089C0(void *a1, uint64_t a2, double a3)
{
  int v4 = (_DWORD *)*a1;
  uint64_t v3 = (_DWORD *)a1[1];
  if ((_DWORD *)*a1 != v3)
  {
    size_t v5 = (_DWORD *)*a1;
    do
    {
      if (*v5 == -1 && v5[1] == -1) {
        return;
      }
      v5 += 94;
    }
    while (v5 != v3);
    if (v4 != v3)
    {
      size_t v43 = (uint64_t *)(a2 + 72);
      unint64_t v44 = (_DWORD *)a1[1];
      uint64_t v45 = a2;
      do
      {
        unint64_t v7 = *(_DWORD **)(a2 + 88);
        if (v7 && (uint64_t v8 = *(int *)(a2 + 80), (int)v8 < *v7))
        {
          *(_DWORD *)(a2 + 80) = v8 + 1;
          uint64_t v9 = *(void *)&v7[2 * v8 + 2];
          *(_DWORD *)(v9 + 16) |= 8u;
          *(_DWORD *)(v9 + 144) = 0;
          std::error_condition v10 = *(_DWORD **)(v9 + 40);
          if (!v10) {
            goto LABEL_20;
          }
        }
        else
        {
          sub_147937C(*v43);
          uint64_t v9 = sub_188CDC8((uint64_t)v43, v11);
          *(_DWORD *)(v9 + 16) |= 8u;
          *(_DWORD *)(v9 + 144) = 0;
          std::error_condition v10 = *(_DWORD **)(v9 + 40);
          if (!v10) {
            goto LABEL_20;
          }
        }
        uint64_t v12 = *(int *)(v9 + 32);
        if ((int)v12 < *v10)
        {
          *(_DWORD *)(v9 + 32) = v12 + 1;
          uint64_t v13 = *(void *)&v10[2 * v12 + 2];
          *(_DWORD *)(v13 + 16) |= 4u;
          uint64_t v14 = *(void *)(v13 + 184);
          if (v14) {
            goto LABEL_18;
          }
          goto LABEL_21;
        }
LABEL_20:
        uint64_t v16 = v9 + 24;
        sub_1479294(*(void *)(v9 + 24));
        uint64_t v13 = sub_188CDC8(v16, v17);
        *(_DWORD *)(v13 + 16) |= 4u;
        uint64_t v14 = *(void *)(v13 + 184);
        if (v14)
        {
LABEL_18:
          *(_DWORD *)(v14 + 40) |= 0x80u;
          uint64_t v15 = *(void *)(v14 + 176);
          if (v15) {
            goto LABEL_27;
          }
LABEL_24:
          uint64_t v20 = *(void *)(v14 + 8);
          uint64_t v21 = (void *)(v20 & 0xFFFFFFFFFFFFFFFCLL);
          if (v20) {
            uint64_t v21 = (void *)*v21;
          }
          uint64_t v15 = sub_15C1918((uint64_t)v21);
          *(void *)(v14 + 176) = v15;
          goto LABEL_27;
        }
LABEL_21:
        uint64_t v18 = *(void *)(v13 + 8);
        uint64_t v19 = (void *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
        if (v18) {
          uint64_t v19 = (void *)*v19;
        }
        uint64_t v14 = sub_147818C((uint64_t)v19);
        *(void *)(v13 + 184) = v14;
        *(_DWORD *)(v14 + 40) |= 0x80u;
        uint64_t v15 = *(void *)(v14 + 176);
        if (!v15) {
          goto LABEL_24;
        }
LABEL_27:
        LODWORD(a3) = v4[1];
        long double v22 = exp((double)*(unint64_t *)&a3 * -6.28318531 / 4294967300.0 + 3.14159265);
        long double v23 = atan((v22 + -1.0 / v22) * 0.5);
        int v24 = *(_DWORD *)(v15 + 40);
        *(_DWORD *)(v15 + 40) = v24 | 1;
        LODWORD(v25) = *v4;
        a3 = v23 * 57.2957795;
        *(_DWORD *)(v15 + 40) = v24 | 3;
        *(double *)(v15 + 48) = a3;
        *(double *)(v15 + 56) = (double)v25 * 360.0 / 4294967300.0 + -180.0;
        unint64_t v26 = (int *)*((void *)v4 + 30);
        for (unint64_t i = (int *)*((void *)v4 + 31); v26 != i; *(double *)(v29 + 56) = (double)v35 * 360.0 / 4294967300.0
                                                                               + -180.0)
        {
          uint64_t v36 = *(_DWORD **)(v14 + 112);
          if (v36 && (uint64_t v37 = *(int *)(v14 + 104), (int)v37 < *v36))
          {
            *(_DWORD *)(v14 + 104) = v37 + 1;
            sub_DE42FC((uint64_t)v26, *(void *)&v36[2 * v37 + 2], a3);
            long long v38 = *(_DWORD **)(v14 + 88);
            if (!v38) {
              goto LABEL_29;
            }
          }
          else
          {
            sub_15C219C(*(void *)(v14 + 96));
            uint64_t v40 = sub_188CDC8(v14 + 96, v39);
            sub_DE42FC((uint64_t)v26, v40, v41);
            long long v38 = *(_DWORD **)(v14 + 88);
            if (!v38) {
              goto LABEL_29;
            }
          }
          uint64_t v42 = *(int *)(v14 + 80);
          if ((int)v42 < *v38)
          {
            *(_DWORD *)(v14 + 80) = v42 + 1;
            uint64_t v29 = *(void *)&v38[2 * v42 + 2];
            goto LABEL_30;
          }
LABEL_29:
          uint64_t v28 = sub_15C1918(*(void *)(v14 + 72));
          uint64_t v29 = sub_188CDC8(v14 + 72, v28);
LABEL_30:
          LODWORD(v30) = v26[1];
          long double v31 = exp((double)v30 * -6.28318531 / 4294967300.0 + 3.14159265);
          long double v32 = atan((v31 + -1.0 / v31) * 0.5);
          int v33 = *(_DWORD *)(v29 + 40);
          *(_DWORD *)(v29 + 40) = v33 | 1;
          int v34 = *v26;
          v26 += 26;
          LODWORD(v35) = v34;
          a3 = v32 * 57.2957795;
          *(_DWORD *)(v29 + 40) = v33 | 3;
          *(double *)(v29 + 48) = a3;
        }
        v4 += 94;
        a2 = v45;
      }
      while (v4 != v44);
    }
  }
}

void sub_E08D74(uint64_t *a1, int a2, uint64_t a3)
{
  if (*(int *)(a3 + 80) >= 2)
  {
    sub_688A04(a1, 3u, a2, &v11);
    uint64_t v4 = *(void *)(*(void *)(a3 + 88) + 8);
    uint64_t v5 = v11;
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_20B91C0;
    strcpy((char *)__p[0], "Walking_Start_Route_Sign");
    unint64_t v6 = (std::string *)sub_8D7730(v5, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    sub_E08F30((std::string *)*(unsigned int *)(v4 + 32), *(void *)(v4 + 40), v6);
    uint64_t v7 = *(void *)(*(void *)(a3 + 88) + 8 * *(int *)(a3 + 80));
    HIBYTE(__p[2]) = 16;
    strcpy((char *)__p, "Destination_List");
    uint64_t v8 = (std::string *)sub_8D7730(v11, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    sub_E08F30((std::string *)*(unsigned int *)(v7 + 32), *(void *)(v7 + 40), v8);
    uint64_t v9 = v12;
    if (v12)
    {
      if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_E08EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
}

std::string *sub_E08F30(std::string *result, uint64_t a2, std::string *__str)
{
  if (result)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    uint64_t v4 = *(void *)(v3 + 184);
    uint64_t v5 = &off_2538EE0;
    if (v4) {
      uint64_t v5 = *(uint64_t (****)())(v3 + 184);
    }
    unint64_t v6 = (uint64_t (***)())v5[20];
    if (!v6) {
      unint64_t v6 = &off_253F4C8;
    }
    if (!*((_DWORD *)v6 + 8))
    {
      *(_DWORD *)(v3 + 16) |= 4u;
      if (v4)
      {
        *(_DWORD *)(v4 + 40) |= 0x20u;
        uint64_t v8 = *(void *)(v4 + 160);
        if (v8) {
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t v10 = *(void *)(v3 + 8);
        uint64_t v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
        if (v10) {
          uint64_t v11 = (void *)*v11;
        }
        uint64_t v4 = sub_147818C((uint64_t)v11);
        *(void *)(v3 + 184) = v4;
        *(_DWORD *)(v4 + 40) |= 0x20u;
        uint64_t v8 = *(void *)(v4 + 160);
        if (v8)
        {
LABEL_10:
          uint64_t v9 = *(_DWORD **)(v8 + 40);
          if (!v9) {
            goto LABEL_22;
          }
          goto LABEL_17;
        }
      }
      uint64_t v12 = *(void *)(v4 + 8);
      uint64_t v13 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
      if (v12)
      {
        uint64_t v8 = sub_15C1EF4(*v13);
        *(void *)(v4 + 160) = v8;
        uint64_t v9 = *(_DWORD **)(v8 + 40);
        if (!v9) {
          goto LABEL_22;
        }
      }
      else
      {
        uint64_t v8 = sub_15C1EF4((uint64_t)v13);
        *(void *)(v4 + 160) = v8;
        uint64_t v9 = *(_DWORD **)(v8 + 40);
        if (!v9) {
          goto LABEL_22;
        }
      }
LABEL_17:
      uint64_t v14 = *(int *)(v8 + 32);
      if ((int)v14 < *v9)
      {
        *(_DWORD *)(v8 + 32) = v14 + 1;
        uint64_t v15 = *(std::string **)&v9[2 * v14 + 2];
        uint64_t v16 = __str;
        return std::string::operator=(v15, v16);
      }
LABEL_22:
      uint64_t v17 = v8 + 24;
      uint64_t v18 = *(uint64_t **)(v8 + 24);
      if (!v18) {
        operator new();
      }
      void *v20 = v19;
      v20[1] = sub_3A6EDC;
      *uint64_t v19 = 0;
      v19[1] = 0;
      v19[2] = 0;
      uint64_t v15 = (std::string *)sub_188CDC8(v17, (uint64_t)v19);
      uint64_t v16 = __str;
      return std::string::operator=(v15, v16);
    }
  }
  return result;
}

double sub_E090F0()
{
  byte_25EFCB7 = 1;
  word_25EFCA0 = 65;
  byte_25EFCCF = 1;
  word_25EFCB8 = 65;
  strcpy(&byte_25EFCE7, "\n\x1B\\toi=orth\\"");
  strcpy((char *)&qword_25EFCD0, "\x1B\\toi=lhp\\"");
  byte_25EFCFF = 11;
  qword_25EFD00 = (uint64_t)operator new(0x19uLL);
  long long v280 = xmmword_20B9250;
  unk_25EFD08 = xmmword_20B9250;
  strcpy((char *)qword_25EFD00, "\x1B\\toi=x-sampa-internal\\"");
  byte_25EFD2F = 13;
  strcpy((char *)&qword_25EFD18, "\x1B\\tn=address\\"");
  strcpy(&byte_25EFD47, "\t\x1B\\tn=normal\\"");
  strcpy((char *)&qword_25EFD30, "\x1B\\tn=nav\\"");
  byte_25EFD5F = 12;
  byte_25EFD77 = 7;
  strcpy((char *)&dword_25EFD60, "\x1B\\lang=");
  byte_25EFD8F = 1;
  word_25EFD78 = 92;
  byte_25EFDA7 = 4;
  strcpy((char *)&qword_25EFD90, "DEV:");
  byte_25EFDBF = 8;
  strcpy((char *)&qword_25EFDA8, "Continue");
  byte_25EFDD7 = 11;
  strcpy((char *)&qword_25EFDC0, "Start_Route");
  byte_25EFDEF = 14;
  strcpy((char *)&qword_25EFDD8, "Continue_Route");
  byte_25EFE07 = 12;
  strcpy((char *)&qword_25EFDF0, "Resume_Route");
  byte_25EFE1F = 18;
  strcpy((char *)&xmmword_25EFE08, "Start_Route_U_Turn");
  byte_25EFE37 = 7;
  strcpy((char *)&dword_25EFE20, "_U_Turn");
  qword_25EFE48 = 0x1300000000000000;
  qmemcpy(&unk_25EFE50, "Continue_Route", 14);
  dword_25EFE40 = 1702131055;
  qword_25EFE38 = *(void *)"Resume_Route";
  *(int *)((char *)&dword_25EFE44 + 3) = 1852994900;
  dword_25EFE44 = 1415533919;
  qword_25EFE60 = 0x1500000000000000;
  strcpy(byte_25EFE68, "Left_Turn");
  unk_25EFE5E = 1415533919;
  *(_DWORD *)((char *)&qword_25EFE60 + 1) = 1852994900;
  strcpy(&byte_25EFE7F, "\tRight_Turn");
  strcpy(&byte_25EFE97, "\nLeft_Turn_At_End");
  byte_25EFEAF = 16;
  byte_25EFEC7 = 17;
  strcpy((char *)&xmmword_25EFEB0, "Right_Turn_At_End");
  byte_25EFEDF = 15;
  strcpy((char *)&qword_25EFEC8, "Sharp_Left_Turn");
  byte_25EFEF7 = 16;
  strcpy((char *)&xmmword_25EFEE0, "Sharp_Right_Turn");
  byte_25EFF0F = 16;
  strcpy((char *)&xmmword_25EFEF8, "Slight_Left_Turn");
  byte_25EFF27 = 17;
  strcpy((char *)&xmmword_25EFF10, "Slight_Right_Turn");
  strcpy(&byte_25EFF3F, "\tKeep_Right");
  strcpy((char *)&qword_25EFF28, "Keep_Left");
  strcpy(&byte_25EFF57, "\nU_Turn");
  byte_25EFF6F = 6;
  byte_25EFF87 = 14;
  strcpy((char *)&qword_25EFF70, "Walking_U_Turn");
  byte_25EFF9F = 20;
  strcpy((char *)&xmmword_25EFF88, "U_Turn_When_Possible");
  byte_25EFFB7 = 20;
  strcpy((char *)&xmmword_25EFFA0, "U_Turn_At_Roundabout");
  byte_25EFFCF = 11;
  strcpy((char *)&qword_25EFFB8, "Enter_Ferry");
  strcpy(&byte_25EFFE7, "\nChange_Ferry");
  strcpy((char *)&qword_25EFFD0, "Exit_Ferry");
  strcpy((char *)&xmmword_25F0000, "Enter_Railway_Shuttle");
  strcpy((char *)&xmmword_25F0018, "Exit_Railway_Shuttle");
  strcpy((char *)&xmmword_25F0030, "Change_Railway_Shuttle");
  strcpy((char *)&xmmword_25F0048, "End_Of_Navigation");
  strcpy((char *)&xmmword_25F0060, "End_Of_Navigation");
  strcpy((char *)&qword_25F0078, "Destination");
  strcpy((char *)&xmmword_25F0090, "Destination_On_left");
  strcpy((char *)&xmmword_25F00A8, "Destination_On_Right");
  strcpy((char *)&xmmword_25F00F0, "First_Stop_On_Right");
  strcpy((char *)&xmmword_25F0138, "Next_Stop_On_Right");
  byte_25EFFFF = 12;
  byte_25F0017 = 21;
  byte_25F002F = 20;
  strcpy((char *)&xmmword_25F0168, "Waypoint_Stop_On_Left");
  byte_25F0047 = 22;
  byte_25F005F = 17;
  byte_25F0077 = 17;
  byte_25F008F = 11;
  byte_25F00A7 = 19;
  byte_25F00BF = 20;
  strcpy(&byte_25F00D7, "\nFirst_Stop_On_left");
  *(void *)&v268[0] = *(void *)"First_Stop";
  strcpy((char *)&qword_25F00C0, "First_Stop");
  byte_25F00EF = 18;
  byte_25F0107 = 19;
  strcpy(&byte_25F011F, "\tNext_Stop_On_left");
  strcpy((char *)&qword_25F0150, "Waypoint_Stop");
  strcpy((char *)&xmmword_25F0180, "Waypoint_Stop_On_Right");
  strcpy((char *)&qword_25F0198, "Roundabout_");
  *(void *)&v264[48] = *(void *)"Next_Stop";
  strcpy((char *)&qword_25F0108, "Next_Stop");
  byte_25F0137 = 17;
  byte_25F014F = 18;
  byte_25F0167 = 13;
  byte_25F017F = 21;
  byte_25F0197 = 22;
  byte_25F01AF = 11;
  byte_25F01C7 = 16;
  strcpy((char *)&xmmword_25F01B0, "Enter_Roundabout");
  qword_25F01C8 = (uint64_t)operator new(0x20uLL);
  long long v279 = xmmword_20B91C0;
  xmmword_25F01D0 = xmmword_20B91C0;
  strcpy((char *)qword_25F01C8, "Walking_Enter_Roundabout");
  byte_25F01F7 = 16;
  strcpy((char *)&xmmword_25F01E0, "Leave_Roundabout");
  byte_25F020F = 21;
  strcpy((char *)&xmmword_25F01F8, "Roundabout_First_Exit");
  byte_25F0227 = 22;
  strcpy((char *)&xmmword_25F0210, "Roundabout_Second_Exit");
  byte_25F023F = 21;
  strcpy((char *)&xmmword_25F0228, "Roundabout_Third_Exit");
  strcpy((char *)&xmmword_25F0240, "Roundabout_Fourth_Exit");
  HIBYTE(word_25F0256) = 22;
  byte_25F026F = 21;
  strcpy((char *)&xmmword_25F0258, "Roundabout_Fifth_Exit");
  byte_25F0287 = 21;
  strcpy((char *)&xmmword_25F0270, "Roundabout_Sixth_Exit");
  qword_25F0288 = (uint64_t)operator new(0x19uLL);
  xmmword_25F0290 = xmmword_20B9250;
  strcpy((char *)qword_25F0288, "Roundabout_Seventh_Exit");
  strcpy((char *)&xmmword_25F02A0, "Roundabout_Eighth_Exit");
  HIBYTE(word_25F02B6) = 22;
  byte_25F02CF = 21;
  strcpy((char *)&xmmword_25F02B8, "Roundabout_Ninth_Exit");
  byte_25F02E7 = 21;
  strcpy((char *)&xmmword_25F02D0, "Roundabout_Tenth_Exit");
  qword_25F02E8 = (uint64_t)operator new(0x20uLL);
  xmmword_25F02F0 = xmmword_20B91C0;
  strcpy((char *)qword_25F02E8, "Roundabout_Eleventh_Exit");
  qword_25F0300 = (uint64_t)operator new(0x19uLL);
  unk_25F0308 = xmmword_20B9250;
  strcpy((char *)qword_25F0300, "Roundabout_Twelfth_Exit");
  qword_25F0318 = (uint64_t)operator new(0x20uLL);
  long long v276 = xmmword_20B5EB0;
  xmmword_25F0320 = xmmword_20B5EB0;
  strcpy((char *)qword_25F0318, "Roundabout_Thirteenth_Exit");
  qword_25F0330 = (uint64_t)operator new(0x20uLL);
  unk_25F0338 = xmmword_20B5EB0;
  strcpy((char *)qword_25F0330, "Roundabout_Fourteenth_Exit");
  qword_25F0348 = (uint64_t)operator new(0x20uLL);
  long long v278 = xmmword_20B8870;
  xmmword_25F0350 = xmmword_20B8870;
  strcpy((char *)qword_25F0348, "Roundabout_Fifteenth_Exit");
  qword_25F0360 = (uint64_t)operator new(0x20uLL);
  unk_25F0368 = xmmword_20B8870;
  strcpy((char *)qword_25F0360, "Roundabout_Sixteenth_Exit");
  qword_25F0378 = (uint64_t)operator new(0x20uLL);
  long long v273 = xmmword_20B91A0;
  xmmword_25F0380 = xmmword_20B91A0;
  strcpy((char *)qword_25F0378, "Roundabout_Seventeenth_Exit");
  qword_25F0390 = (uint64_t)operator new(0x20uLL);
  unk_25F0398 = xmmword_20B5EB0;
  strcpy((char *)qword_25F0390, "Roundabout_Eighteenth_Exit");
  qword_25F03A8 = (uint64_t)operator new(0x20uLL);
  xmmword_25F03B0 = xmmword_20B5EB0;
  strcpy((char *)qword_25F03A8, "Roundabout_Nineteenth_Exit");
  byte_25F03D7 = 8;
  strcpy((char *)&qword_25F03C0, "Off_Ramp");
  byte_25F03EF = 16;
  strcpy((char *)&xmmword_25F03D8, "Off_Ramp_On_Left");
  byte_25F0407 = 17;
  strcpy((char *)&xmmword_25F03F0, "Off_Ramp_On_Right");
  byte_25F041F = 14;
  strcpy((char *)&qword_25F0408, "Change_Highway");
  strcpy((char *)&xmmword_25F0420, "Change_Highway_On_Left");
  HIBYTE(word_25F0436) = 22;
  qword_25F0438 = (uint64_t)operator new(0x19uLL);
  xmmword_25F0440 = xmmword_20B9250;
  strcpy((char *)qword_25F0438, "Change_Highway_On_Right");
  byte_25F0467 = 5;
  dword_25F0450 = 1735550285;
  byte_25F0454 = 101;
  byte_25F0455 = 0;
  byte_25F047F = 12;
  strcpy((char *)&qword_25F0468, "Enter_Detour");
  byte_25F0497 = 11;
  strcpy((char *)&qword_25F0480, "Exit_Detour");
  byte_25F04AF = 18;
  strcpy((char *)&xmmword_25F0498, "Walking_Turnaround");
  qword_25F04B0 = (uint64_t)operator new(0x19uLL);
  unk_25F04B8 = xmmword_20B9250;
  strcpy((char *)qword_25F04B0, "Walking_Turnaround_Sign");
  byte_25F04DF = 19;
  strcpy((char *)&xmmword_25F04C8, "Distance_Title_List");
  qword_25F04E0 = (uint64_t)operator new(0x19uLL);
  unk_25F04E8 = xmmword_20B9250;
  long long v270 = *(_OWORD *)"Cross_The_Street_Spoken";
  strcpy((char *)qword_25F04E0, "Cross_The_Street_Spoken");
  *(void *)&v268[1] = *(void *)"t_Spoken";
  byte_25F050F = 19;
  strcpy((char *)&xmmword_25F04F8, "Arrival_Charge_List");
  byte_25F0527 = 15;
  strcpy((char *)&qword_25F0510, "Charge_At_Start");
  strcpy(&byte_25F053F, "\tPass_Street");
  strcpy((char *)&qword_25F0528, "Pass_Exit");
  byte_25F0557 = 11;
  byte_25F056F = 17;
  strcpy((char *)&xmmword_25F0558, "Pass_Intersection");
  strcpy(&byte_25F0587, "\t_PrevExitNumber");
  strcpy((char *)&qword_25F0570, "Next_Exit");
  byte_25F059F = 15;
  strcpy(&byte_25F05B7, "\t_PrevUTurn");
  strcpy((char *)&qword_25F05A0, "_PrevRoad");
  strcpy(&byte_25F05CF, "\nNext_");
  byte_25F05E7 = 5;
  byte_25F05FF = 15;
  strcpy((char *)&qword_25F05E8, "_At_Next_Street");
  byte_25F0617 = 21;
  strcpy((char *)&xmmword_25F0600, "_At_Next_Intersection");
  byte_25F062F = 14;
  strcpy((char *)&qword_25F0618, "Charge_Station");
  byte_25F0647 = 15;
  strcpy((char *)&qword_25F0630, "_Charge_Station");
  BYTE1(qword_25F0658) = 0;
  WORD1(qword_25F0658) = 25856;
  HIDWORD(qword_25F0658) = 335544320;
  strcpy((char *)&qword_25F0648, "_Charge_Station_");
  byte_25F0677 = 8;
  strcpy((char *)&qword_25F0660, "_Minimum");
  byte_25F068F = 15;
  strcpy((char *)&qword_25F0678, "ExitShield_Sign");
  byte_25F06A7 = 8;
  strcpy((char *)&qword_25F0690, "Walking_");
  byte_25F06BF = 16;
  strcpy((char *)&xmmword_25F06A8, "Walking_Continue");
  byte_25F06D7 = 19;
  strcpy((char *)&xmmword_25F06C0, "Walking_Start_Route");
  qword_25F06D8 = (uint64_t)operator new(0x20uLL);
  xmmword_25F06E0 = xmmword_20B5EB0;
  strcpy((char *)qword_25F06D8, "Walking_Start_Route_U_Turn");
  byte_25F0707 = 17;
  strcpy((char *)&xmmword_25F06F0, "Walking_Left_Turn");
  byte_25F071F = 18;
  strcpy((char *)&xmmword_25F0708, "Walking_Right_Turn");
  qword_25F0720 = (uint64_t)operator new(0x20uLL);
  unk_25F0728 = xmmword_20B5EB0;
  strcpy((char *)qword_25F0720, "Walking_Turn_At_Roundabout");
  qword_25F0738 = (uint64_t)operator new(0x20uLL);
  long long v277 = xmmword_20B91B0;
  xmmword_25F0740 = xmmword_20B91B0;
  strcpy((char *)qword_25F0738, "Walking_U_Turn_When_Possible");
  qword_25F0750 = (uint64_t)operator new(0x28uLL);
  long long v269 = xmmword_20B9390;
  unk_25F0758 = xmmword_20B9390;
  strcpy((char *)qword_25F0750, "Walking_Roundabout_Exit_Continue");
  qword_25F0768 = (uint64_t)operator new(0x20uLL);
  xmmword_25F0770 = xmmword_20B91B0;
  strcpy((char *)qword_25F0768, "Walking_Roundabout_Exit_Left");
  qword_25F0780 = (uint64_t)operator new(0x20uLL);
  long long v275 = xmmword_20B8890;
  unk_25F0788 = xmmword_20B8890;
  strcpy((char *)qword_25F0780, "Walking_Roundabout_Exit_Right");
  qword_25F0798 = (uint64_t)operator new(0x20uLL);
  xmmword_25F07A0 = xmmword_20B8870;
  strcpy((char *)qword_25F0798, "Walking_End_Of_Navigation");
  long long v272 = *(_OWORD *)"nd_Of_Navigation";
  uint64_t v0 = (char *)operator new(0x20uLL);
  qword_25F07B0 = (uint64_t)v0;
  unk_25F07B8 = xmmword_20B8870;
  *(_OWORD *)uint64_t v0 = *(_OWORD *)"Walking_End_Of_Navigation";
  *(_OWORD *)(v0 + 9) = v272;
  v0[25] = 0;
  byte_25F07DF = 8;
  strcpy((char *)&qword_25F07C8, "Walking_");
  qword_25F07E0 = (uint64_t)operator new(0x19uLL);
  unk_25F07E8 = v280;
  strcpy((char *)qword_25F07E0, "Walking_Sharp_Left_Turn");
  qword_25F07F8 = (uint64_t)operator new(0x20uLL);
  xmmword_25F0800 = v279;
  strcpy((char *)qword_25F07F8, "Walking_Sharp_Right_Turn");
  qword_25F0810 = (uint64_t)operator new(0x20uLL);
  unk_25F0818 = v279;
  strcpy((char *)qword_25F0810, "Walking_Slight_Left_Turn");
  qword_25F0828 = (uint64_t)operator new(0x20uLL);
  xmmword_25F0830 = v278;
  strcpy((char *)qword_25F0828, "Walking_Slight_Right_Turn");
  byte_25F0857 = 4;
  strcpy((char *)&dword_25F0840, "Exit");
  byte_25F086F = 4;
  strcpy((char *)&dword_25F0858, "Road");
  byte_25F0887 = 7;
  strcpy((char *)&dword_25F0870, "Freeway");
  byte_25F089F = 12;
  strcpy((char *)&qword_25F0888, "Intersection");
  byte_25F08B7 = 5;
  strcpy((char *)&dword_25F08A0, "Ferry");
  byte_25F08CF = 11;
  strcpy((char *)&qword_25F08B8, "ShuttleName");
  byte_25F08E7 = 5;
  strcpy((char *)&dword_25F08D0, "Road1");
  strcpy(&byte_25F08FF, "\tName");
  strcpy((char *)&qword_25F08E8, "Signpost1");
  byte_25F0917 = 4;
  byte_25F092F = 7;
  strcpy((char *)&dword_25F0918, "Address");
  byte_25F0947 = 7;
  strcpy((char *)&dword_25F0930, "Shield1");
  byte_25F095F = 13;
  strcpy((char *)&qword_25F0948, "TowardShield1");
  byte_25F0977 = 6;
  strcpy((char *)&dword_25F0960, "Right_");
  byte_25F098F = 5;
  byte_25F097C = 95;
  dword_25F0978 = 1952867660;
  byte_25F097D = 0;
  strcpy(&byte_25F09A7, "\tOn_Left_");
  strcpy((char *)&qword_25F0990, "On_Right_");
  byte_25F09BF = 8;
  byte_25F09D7 = 12;
  strcpy((char *)&qword_25F09C0, "ElevatorName");
  byte_25F09EF = 13;
  strcpy((char *)&qword_25F09D8, "EscalatorName");
  strcpy(&byte_25F0A07, "\nBridgeName");
  strcpy((char *)&qword_25F09F0, "StairsName");
  strcpy(&byte_25F0A1F, "\nTunnelName");
  strcpy(&byte_25F0A37, "\nParking");
  byte_25F0A4F = 7;
  strcpy(&byte_25F0A67, "\t_Escalator");
  strcpy((char *)&qword_25F0A50, "_Elevator");
  strcpy(&byte_25F0A7F, "\n_ElevatorName");
  byte_25F0A97 = 13;
  byte_25F0AAF = 14;
  strcpy((char *)&qword_25F0A98, "_EscalatorName");
  byte_25F0AC7 = 5;
  strcpy((char *)&qword_25F0AB0, "_Road");
  byte_25F0ADF = 8;
  strcpy((char *)&qword_25F0AC8, "_Freeway");
  byte_25F0AF7 = 13;
  strcpy((char *)&qword_25F0AE0, "_Intersection");
  byte_25F0B0F = 6;
  strcpy((char *)&dword_25F0AF8, "_Road1");
  byte_25F0B27 = 6;
  strcpy((char *)&dword_25F0B10, "_Road2");
  strcpy(&byte_25F0B3F, "\n_Signpost2");
  strcpy((char *)&qword_25F0B28, "_Signpost1");
  strcpy(&byte_25F0B57, "\n_Ferry");
  byte_25F0B6F = 6;
  byte_25F0B87 = 12;
  strcpy((char *)&qword_25F0B70, "_Ferry_Ferry");
  byte_25F0B9F = 12;
  strcpy((char *)&qword_25F0B88, "_ShuttleName");
  qword_25F0BA0 = (uint64_t)operator new(0x20uLL);
  unk_25F0BA8 = v277;
  strcpy((char *)qword_25F0BA0, "_Railway_Shuttle_ShuttleName");
  byte_25F0BCF = 11;
  strcpy((char *)&qword_25F0BB8, "_ExitNumber");
  byte_25F0BE7 = 5;
  dword_25F0BD0 = 1769489759;
  byte_25F0BD4 = 116;
  byte_25F0BD5 = 0;
  byte_25F0BFF = 7;
  strcpy((char *)&dword_25F0BE8, "_StayOn");
  byte_25F0C17 = 7;
  strcpy((char *)&dword_25F0C00, "_Stairs");
  byte_25F0C2F = 5;
  strcpy((char *)&dword_25F0C18, "_Ramp");
  byte_25F0C47 = 11;
  strcpy((char *)&qword_25F0C30, "_StairsName");
  strcpy(&byte_25F0C5F, "\t_Down");
  strcpy((char *)&qword_25F0C48, "_RampName");
  byte_25F0C77 = 5;
  byte_25F0C8F = 3;
  dword_25F0C78 = 7361887;
  byte_25F0CA7 = 7;
  strcpy((char *)&dword_25F0C90, "_Bridge");
  byte_25F0CBF = 7;
  strcpy((char *)&dword_25F0CA8, "_Tunnel");
  byte_25F0CD7 = 11;
  strcpy((char *)&qword_25F0CC0, "_Roundabout");
  byte_25F0CEF = 6;
  strcpy((char *)&dword_25F0CD8, "_Cross");
  byte_25F0D07 = 8;
  strcpy((char *)&qword_25F0CF0, "_Parking");
  byte_25F0D1F = 8;
  strcpy((char *)&qword_25F0D08, "_Shield1");
  byte_25F0D37 = 14;
  strcpy((char *)&qword_25F0D20, "_TowardShield1");
  byte_25F0D4F = 8;
  strcpy((char *)&qword_25F0D38, "_Shield2");
  byte_25F0D67 = 14;
  strcpy((char *)&qword_25F0D50, "_TowardShield2");
  byte_25F0D7F = 11;
  strcpy((char *)&qword_25F0D68, "_Direction1");
  byte_25F0D97 = 11;
  strcpy((char *)&qword_25F0D80, "_Direction2");
  strcpy(&byte_25F0DAF, "\n_TowardDirection1");
  strcpy((char *)&qword_25F0D98, "Direction1");
  byte_25F0DC7 = 17;
  byte_25F0DDF = 17;
  strcpy((char *)&xmmword_25F0DC8, "_TowardDirection2");
  byte_25F0DF7 = 16;
  strcpy((char *)&xmmword_25F0DE0, "TowardDirection1");
  byte_25F0E0F = 7;
  strcpy((char *)&qword_25F0DF8, "_Spoken");
  byte_25F0E27 = 5;
  strcpy((char *)&qword_25F0E10, "_Sign");
  byte_25F0E3F = 15;
  strcpy((char *)&qword_25F0E28, "_Secondary_Sign");
  byte_25F0E57 = 5;
  byte_25F0E44 = 116;
  dword_25F0E40 = 1936280671;
  byte_25F0E45 = 0;
  byte_25F0E6F = 8;
  strcpy((char *)&qword_25F0E58, "_Primary");
  qword_25F0E80 = 0xF00000000000000;
  strcpy(byte_25F0E88, "_Secondary");
  strcpy((char *)&qword_25F0E70, "_Spoken_Primary");
  strcpy(&byte_25F0E9F, "\n_Secondary");
  strcpy(&byte_25F0EB7, "\n_Spoken_Secondar");
  BYTE1(qword_25F0EC8) = 0;
  WORD1(qword_25F0EC8) = 0;
  HIDWORD(qword_25F0EC8) = 285212672;
  byte_25F0EE7 = 13;
  strcpy((char *)&qword_25F0ED0, "_To_Secondary");
  BYTE1(qword_25F0EF8) = 0;
  WORD1(qword_25F0EF8) = 0;
  HIDWORD(qword_25F0EF8) = 335544320;
  strcpy((char *)&dword_25F0EE8, "_Spoken_To_Secon");
  strcpy(&byte_25F0F17, "\t_ValidDistance");
  strcpy((char *)&qword_25F0F00, "_Distance");
  byte_25F0F2F = 14;
  byte_25F0F47 = 6;
  strcpy((char *)&dword_25F0F30, "_Short");
  byte_25F0F5F = 1;
  word_25F0F48 = 95;
  qword_25F0F60 = (uint64_t)operator new(0x20uLL);
  unk_25F0F68 = v279;
  strcpy((char *)qword_25F0F60, "Concatenate_Newline_Sign");
  uint64_t v1 = (char *)operator new(0x19uLL);
  qword_25F0F78 = (uint64_t)v1;
  xmmword_25F0F80 = v280;
  *(_OWORD *)uint64_t v1 = v270;
  uint64_t v2 = *(void *)&v268[1];
  *(void *)(v1 + 15) = *(void *)&v268[1];
  v1[23] = 0;
  byte_25F0FA7 = 12;
  strcpy((char *)&qword_25F0F90, "Chain_Spoken");
  byte_25F0FBF = 15;
  strcpy((char *)&qword_25F0FA8, "Chain_To_Spoken");
  strcpy(&byte_25F0FD7, "\nThen_Spoken");
  strcpy((char *)&qword_25F0FC0, "And_Spoken");
  byte_25F0FEF = 11;
  byte_25F1007 = 18;
  strcpy((char *)&xmmword_25F0FF0, "Concatenate_Spoken");
  qword_25F1008 = (uint64_t)operator new(0x28uLL);
  long long v267 = xmmword_20B9240;
  xmmword_25F1010 = xmmword_20B9240;
  strcpy((char *)qword_25F1008, "At_Traffic_Light_Chain_Spoken_Primary");
  qword_25F1020 = (uint64_t)operator new(0x28uLL);
  v268[2] = xmmword_20B9260;
  unk_25F1028 = xmmword_20B9260;
  strcpy((char *)qword_25F1020, "At_Stop_Sign_Chain_Spoken_Primary");
  qword_25F1038 = (uint64_t)operator new(0x40uLL);
  xmmword_25F1040 = xmmword_20B9A90;
  strcpy((char *)qword_25F1038, "At_Stop_Sign_Cross_Traffic_Doesnt_Stop_Chain_Spoken_Primary");
  qword_25F1050 = (uint64_t)operator new(0x30uLL);
  long long v266 = xmmword_20B9A40;
  unk_25F1058 = xmmword_20B9A40;
  strcpy((char *)qword_25F1050, "At_Next_Traffic_Light_Chain_Spoken_Primary");
  qword_25F1068 = (uint64_t)operator new(0x28uLL);
  long long v265 = xmmword_20E12D0;
  xmmword_25F1070 = xmmword_20E12D0;
  strcpy((char *)qword_25F1068, "At_Next_Stop_Sign_Chain_Spoken_Primary");
  qword_25F1080 = (uint64_t)operator new(0x28uLL);
  long long v274 = xmmword_20B9960;
  unk_25F1088 = xmmword_20B9960;
  strcpy((char *)qword_25F1080, "At_Traffic_Light_Chain_Spoken_Secondary");
  qword_25F1098 = (uint64_t)operator new(0x28uLL);
  xmmword_25F10A0 = xmmword_20B93A0;
  strcpy((char *)qword_25F1098, "At_Stop_Sign_Chain_Spoken_Secondary");
  qword_25F10B0 = (uint64_t)operator new(0x30uLL);
  long long v272 = xmmword_20E1380;
  unk_25F10B8 = xmmword_20E1380;
  strcpy((char *)qword_25F10B0, "At_Next_Traffic_Light_Chain_Spoken_Secondary");
  qword_25F10C8 = (uint64_t)operator new(0x30uLL);
  xmmword_25F10D0 = xmmword_20B93C0;
  strcpy((char *)qword_25F10C8, "At_Next_Stop_Sign_Chain_Spoken_Secondary");
  qword_25F10E0 = (uint64_t)operator new(0x38uLL);
  unk_25F10E8 = xmmword_20B9A60;
  strcpy((char *)qword_25F10E0, "At_Next_One_Traffic_Light_Chain_Spoken_Secondary");
  qword_25F10F8 = (uint64_t)operator new(0x30uLL);
  xmmword_25F1100 = xmmword_20E1380;
  strcpy((char *)qword_25F10F8, "At_Next_One_Stop_Sign_Chain_Spoken_Secondary");
  qword_25F1110 = (uint64_t)operator new(0x28uLL);
  unk_25F1118 = xmmword_20B9960;
  strcpy((char *)qword_25F1110, "At_Mini_Roundabout_Chain_Spoken_Primary");
  qword_25F1128 = (uint64_t)operator new(0x30uLL);
  long long v271 = xmmword_20B93D0;
  xmmword_25F1130 = xmmword_20B93D0;
  strcpy((char *)qword_25F1128, "At_Mini_Roundabout_Chain_Spoken_Secondary");
  qword_25F1140 = (uint64_t)operator new(0x20uLL);
  unk_25F1148 = v275;
  strcpy((char *)qword_25F1140, "Walking_Distance_Chain_Spoken");
  qword_25F1158 = (uint64_t)operator new(0x20uLL);
  xmmword_25F1160 = v275;
  strcpy((char *)qword_25F1158, "Walking_Continue_Chain_Spoken");
  uint64_t v3 = (char *)operator new(0x19uLL);
  qword_25F1170 = (uint64_t)v3;
  unk_25F1178 = v280;
  *(_OWORD *)uint64_t v3 = v270;
  *(void *)(v3 + 15) = v2;
  v3[23] = 0;
  qword_25F1188 = (uint64_t)operator new(0x28uLL);
  xmmword_25F1190 = v269;
  strcpy((char *)qword_25F1188, "Distance_Cross_The_Street_Spoken");
  byte_25F11B7 = 22;
  strcpy((char *)&xmmword_25F11A0, "Walking_Continue_Cross");
  byte_25F11CF = 14;
  strcpy((char *)&qword_25F11B8, "Continue_Cross");
  byte_25F11E7 = 5;
  strcpy((char *)&dword_25F11D0, "Cross");
  byte_25F11FF = 19;
  strcpy((char *)&xmmword_25F11E8, "Cross_Street_Spoken");
  byte_25F1217 = 17;
  strcpy((char *)&xmmword_25F1200, "Cross_Road_Spoken");
  byte_25F122F = 20;
  strcpy((char *)&xmmword_25F1218, "Use_Crosswalk_Spoken");
  byte_25F1247 = 15;
  strcpy((char *)&qword_25F1230, "Distance_Spoken");
  byte_25F125F = 19;
  strcpy((char *)&xmmword_25F1248, "Distance_And_Spoken");
  byte_25F1277 = 21;
  strcpy((char *)&xmmword_25F1260, "Continue_Stage_Spoken");
  byte_25F128F = 13;
  qmemcpy(&qword_25F1278, "ContinueStage", 13);
  int v4 = SHIBYTE(qword_25F0E80);
  if (qword_25F0E80 >= 0) {
    size_t v5 = HIBYTE(qword_25F0E80);
  }
  else {
    size_t v5 = unk_25F0E78;
  }
  unint64_t v6 = v5 + 13;
  byte_25F1285 = 0;
  if (v5 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v6 >= 0x17)
  {
    uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v8 = v6 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t v10 = operator new(v8 + 1);
    qword_25F1298 = v5 + 13;
    unk_25F12A0 = v9 | 0x8000000000000000;
    qword_25F1290 = (uint64_t)v10;
    *uint64_t v10 = *(void *)"ContinueStage";
    uint64_t v7 = (char *)v10 + 13;
    *(void *)((char *)v10 + 5) = *(void *)"nueStage";
  }
  else
  {
    BYTE1(qword_25F1298) = 0;
    WORD1(qword_25F1298) = 0;
    HIDWORD(qword_25F1298) = 0;
    unk_25F12A0 = 0;
    byte_25F12A7 = v5 + 13;
    uint64_t v7 = (char *)&qword_25F1298 + 5;
    strcpy((char *)&qword_25F1290, "Continue");
    if (!v5) {
      goto LABEL_15;
    }
  }
  if (v4 >= 0) {
    uint64_t v11 = &qword_25F0E70;
  }
  else {
    uint64_t v11 = (uint64_t *)qword_25F0E70;
  }
  memmove(v7, v11, v5);
LABEL_15:
  v7[v5] = 0;
  int v12 = byte_25F0AC7;
  if (byte_25F0AC7 >= 0) {
    size_t v13 = byte_25F0AC7;
  }
  else {
    size_t v13 = qword_25F0AB8;
  }
  unint64_t v14 = v13 + 13;
  if (v13 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v14 >= 0x17)
  {
    uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v16 = v14 | 7;
    }
    uint64_t v17 = v16 + 1;
    uint64_t v18 = operator new(v16 + 1);
    __dst.__r_.__value_.__l.__size_ = v13 + 13;
    __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
    *uint64_t v18 = qword_25F1278;
    *(void *)((char *)v18 + 5) = *(uint64_t *)((char *)&qword_25F1278 + 5);
    uint64_t v15 = (char *)v18 + 13;
  }
  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 5) = *(uint64_t *)((char *)&qword_25F1278 + 5);
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v13 + 13;
    __dst.__r_.__value_.__r.__words[0] = qword_25F1278;
    uint64_t v15 = &__dst.__r_.__value_.__s.__data_[13];
    if (!v13) {
      goto LABEL_29;
    }
  }
  if (v12 >= 0) {
    uint64_t v19 = &qword_25F0AB0;
  }
  else {
    uint64_t v19 = (uint64_t *)qword_25F0AB0;
  }
  memmove(v15, v19, v13);
LABEL_29:
  v15[v13] = 0;
  if (v4 >= 0) {
    uint64_t v20 = (const std::string::value_type *)&qword_25F0E70;
  }
  else {
    uint64_t v20 = (const std::string::value_type *)qword_25F0E70;
  }
  uint64_t v21 = std::string::append(&__dst, v20, v5);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  qword_25F12B8 = v21->__r_.__value_.__r.__words[2];
  xmmword_25F12A8 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  byte_25F12D7 = 5;
  strcpy((char *)&dword_25F12C0, "Merge");
  qword_25F12D8 = (uint64_t)operator new(0x20uLL);
  v268[1] = xmmword_20B8E90;
  unk_25F12E0 = xmmword_20B8E90;
  strcpy((char *)qword_25F12D8, "Continue_Freeway_Spoken_Primary");
  byte_25F1307 = 8;
  strcpy((char *)&qword_25F12F0, "Starting");
  byte_25F131F = 14;
  strcpy((char *)&qword_25F1308, "Starting_Route");
  byte_25F1337 = 14;
  strcpy((char *)&qword_25F1320, "Resuming_Route");
  byte_25F134F = 16;
  strcpy((char *)&xmmword_25F1338, "Continuing_Route");
  byte_25F1367 = 9;
  word_25F1358 = 112;
  qword_25F1350 = *(void *)&v264[48];
  strcpy(&byte_25F137F, "\nEnding");
  strcpy((char *)&word_25F1370, "op");
  qword_25F1368 = *(void *)&v268[0];
  byte_25F1397 = 6;
  strcpy((char *)&qword_25F1398, "_Destination");
  byte_25F13AF = 12;
  byte_25F13C7 = 15;
  strcpy((char *)&qword_25F13B0, "_At_Destination");
  std::operator+<char>();
  qword_25F13E0 = (uint64_t)operator new(0x20uLL);
  unk_25F13E8 = v279;
  strcpy((char *)qword_25F13E0, "Spoken_Ending_At_Parking");
  qword_25F13F8 = (uint64_t)operator new(0x20uLL);
  v268[0] = xmmword_20B9800;
  xmmword_25F1400 = xmmword_20B9800;
  strcpy((char *)qword_25F13F8, "Spoken_Pre_Arrival_Destination");
  strcpy((char *)&xmmword_25F1410, "Sign_Ending_At_Parking");
  HIBYTE(word_25F1426) = 22;
  byte_25F143F = 4;
  strcpy((char *)&dword_25F1428, "Home");
  byte_25F1457 = 4;
  strcpy((char *)&dword_25F1440, "Work");
  byte_25F146F = 8;
  strcpy((char *)&qword_25F1458, "Business");
  byte_25F1487 = 4;
  strcpy((char *)&dword_25F1470, "Name");
  byte_25F149F = 13;
  strcpy((char *)&qword_25F1488, "Other_Contact");
  byte_25F14B7 = 11;
  strcpy((char *)&qword_25F14A0, "ContactHome");
  byte_25F14CF = 11;
  *(_DWORD *)((char *)&qword_25F14B8 + 7) = 1802661719;
  byte_25F14E7 = 7;
  *(int *)((char *)&dword_25F14D0 + 3) = 1936942450;
  dword_25F14D0 = 1919181889;
  strcpy((char *)&xmmword_25F14E8, "Discoverability_Prompt");
  HIBYTE(word_25F14FE) = 22;
  byte_25F1517 = 6;
  dword_25F1500 = 1634878303;
  word_25F1504 = 26739;
  byte_25F152F = 8;
  qword_25F1518 = 0x697269535F6F4E5FLL;
  byte_25F1547 = 9;
  strcpy((char *)&qword_25F1530, "_CityName");
  byte_25F155F = 8;
  qword_25F1548 = 0x636972656E65475FLL;
  int v23 = byte_25F1307;
  if (byte_25F1307 >= 0) {
    size_t v24 = byte_25F1307;
  }
  else {
    size_t v24 = qword_25F12F8;
  }
  LODWORD(v270) = byte_25F0647;
  if (byte_25F0647 >= 0) {
    size_t v25 = byte_25F0647;
  }
  else {
    size_t v25 = unk_25F0638;
  }
  qword_25F14B8 = *(void *)"ContactWork";
  byte_25F14C3 = 0;
  byte_25F14D7 = 0;
  byte_25F1506 = 0;
  byte_25F1520 = 0;
  byte_25F1550 = 0;
  unint64_t v26 = v25 + v24;
  if (v25 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  *(void *)long long v264 = *(void *)"ContactWork";
  *(void *)&v264[16] = *(void *)"ContactHome";
  *(void *)&v264[32] = *(void *)"_Contact";
  *(void *)&v264[48] = *(void *)"Other_Contact";
  if (v26 <= 0x16)
  {
    unint64_t v27 = &qword_25F1560;
    qword_25F1568 = 0;
    unk_25F1570 = 0;
    qword_25F1560 = 0;
    byte_25F1577 = v25 + v24;
    if (!v24) {
      goto LABEL_47;
    }
    goto LABEL_43;
  }
  uint64_t v90 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v26 | 7) != 0x17) {
    uint64_t v90 = v26 | 7;
  }
  uint64_t v91 = v90 + 1;
  unint64_t v27 = (uint64_t *)operator new(v90 + 1);
  qword_25F1568 = v25 + v24;
  unk_25F1570 = v91 | 0x8000000000000000;
  qword_25F1560 = (uint64_t)v27;
  if (v24)
  {
LABEL_43:
    if (v23 >= 0) {
      uint64_t v28 = &qword_25F12F0;
    }
    else {
      uint64_t v28 = (uint64_t *)qword_25F12F0;
    }
    memmove(v27, v28, v24);
  }
LABEL_47:
  uint64_t v29 = (char *)v27 + v24;
  if (v25)
  {
    if ((int)v270 >= 0) {
      unint64_t v30 = &qword_25F0630;
    }
    else {
      unint64_t v30 = (uint64_t *)qword_25F0630;
    }
    memmove(v29, v30, v25);
  }
  v29[v25] = 0;
  int v31 = byte_25F13AF;
  if (byte_25F13AF >= 0) {
    size_t v32 = byte_25F13AF;
  }
  else {
    size_t v32 = qword_25F13A0;
  }
  unint64_t v33 = v32 + v24;
  if (v32 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v33 <= 0x16)
  {
    int v34 = &qword_25F1578;
    qword_25F1580 = 0;
    unk_25F1588 = 0;
    qword_25F1578 = 0;
    byte_25F158F = v32 + v24;
    if (!v24) {
      goto LABEL_62;
    }
    goto LABEL_58;
  }
  uint64_t v92 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17) {
    uint64_t v92 = v33 | 7;
  }
  uint64_t v93 = v92 + 1;
  int v34 = (uint64_t *)operator new(v92 + 1);
  qword_25F1580 = v32 + v24;
  unk_25F1588 = v93 | 0x8000000000000000;
  qword_25F1578 = (uint64_t)v34;
  if (v24)
  {
LABEL_58:
    if (v23 >= 0) {
      unint64_t v35 = &qword_25F12F0;
    }
    else {
      unint64_t v35 = (uint64_t *)qword_25F12F0;
    }
    memmove(v34, v35, v24);
  }
LABEL_62:
  uint64_t v36 = (char *)v34 + v24;
  if (v32)
  {
    if (v31 >= 0) {
      uint64_t v37 = &qword_25F1398;
    }
    else {
      uint64_t v37 = (uint64_t *)qword_25F1398;
    }
    memmove(v36, v37, v32);
  }
  v36[v32] = 0;
  qword_25F1590 = (uint64_t)operator new(0x19uLL);
  unk_25F1598 = v280;
  strcpy((char *)qword_25F1590, "{ChargeStationCityName}");
  if (v33 < 0x17)
  {
    long long v38 = &qword_25F15A8;
    qword_25F15B0 = 0;
    unk_25F15B8 = 0;
    qword_25F15A8 = 0;
    byte_25F15BF = v32 + v24;
    if (!v24) {
      goto LABEL_73;
    }
    goto LABEL_69;
  }
  uint64_t v94 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17) {
    uint64_t v94 = v33 | 7;
  }
  uint64_t v95 = v94 + 1;
  long long v38 = (uint64_t *)operator new(v94 + 1);
  qword_25F15B0 = v32 + v24;
  unk_25F15B8 = v95 | 0x8000000000000000;
  qword_25F15A8 = (uint64_t)v38;
  if (v24)
  {
LABEL_69:
    if (v23 >= 0) {
      uint64_t v39 = &qword_25F12F0;
    }
    else {
      uint64_t v39 = (uint64_t *)qword_25F12F0;
    }
    memmove(v38, v39, v24);
  }
LABEL_73:
  uint64_t v40 = (char *)v38 + v24;
  if (v32)
  {
    if (v31 >= 0) {
      double v41 = &qword_25F1398;
    }
    else {
      double v41 = (uint64_t *)qword_25F1398;
    }
    memmove(v40, v41, v32);
  }
  v40[v32] = 0;
  strcpy((char *)&xmmword_25F15C0, "{NewBatteryPercentage}");
  HIBYTE(word_25F15D6) = 22;
  qword_25F15D8 = (uint64_t)operator new(0x20uLL);
  xmmword_25F15E0 = v273;
  strcpy((char *)qword_25F15D8, "{OriginalBatteryPercentage}");
  byte_25F1607 = 19;
  strcpy((char *)&xmmword_25F15F0, "_Arrival_Percentage");
  int v42 = byte_25F1397;
  if (byte_25F1397 >= 0) {
    size_t v43 = byte_25F1397;
  }
  else {
    size_t v43 = qword_25F1388;
  }
  unint64_t v44 = v43 + v25;
  if (v43 + v25 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v44 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v43 + v25;
    if (!v43) {
      goto LABEL_88;
    }
    goto LABEL_84;
  }
  uint64_t v96 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v44 | 7) != 0x17) {
    uint64_t v96 = v44 | 7;
  }
  uint64_t v97 = v96 + 1;
  p_dst = (char *)operator new(v96 + 1);
  __dst.__r_.__value_.__l.__size_ = v43 + v25;
  __dst.__r_.__value_.__r.__words[2] = v97 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v43)
  {
LABEL_84:
    if (v42 >= 0) {
      size_t v46 = &qword_25F1380;
    }
    else {
      size_t v46 = (uint64_t *)qword_25F1380;
    }
    memmove(p_dst, v46, v43);
  }
LABEL_88:
  uint64_t v47 = &p_dst[v43];
  if (v25)
  {
    if ((int)v270 >= 0) {
      long long v48 = &qword_25F0630;
    }
    else {
      long long v48 = (uint64_t *)qword_25F0630;
    }
    memmove(v47, v48, v25);
  }
  v47[v25] = 0;
  long long v49 = std::string::append(&__dst, "_Percentage");
  long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  qword_25F1618 = v49->__r_.__value_.__r.__words[2];
  xmmword_25F1608 = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v51 = byte_25F1397;
  if (byte_25F1397 >= 0) {
    size_t v52 = byte_25F1397;
  }
  else {
    size_t v52 = qword_25F1388;
  }
  int v53 = byte_25F0647;
  if (byte_25F0647 >= 0) {
    size_t v54 = byte_25F0647;
  }
  else {
    size_t v54 = unk_25F0638;
  }
  unint64_t v55 = v54 + v52;
  if (v54 + v52 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v55 <= 0x16)
  {
    memset(&v281, 0, sizeof(v281));
    BOOL v56 = (char *)&v281;
    *((unsigned char *)&v281.__r_.__value_.__s + 23) = v54 + v52;
    if (!v52) {
      goto LABEL_108;
    }
    goto LABEL_104;
  }
  uint64_t v98 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v55 | 7) != 0x17) {
    uint64_t v98 = v55 | 7;
  }
  uint64_t v99 = v98 + 1;
  BOOL v56 = (char *)operator new(v98 + 1);
  v281.__r_.__value_.__l.__size_ = v54 + v52;
  v281.__r_.__value_.__r.__words[2] = v99 | 0x8000000000000000;
  v281.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
  if (v52)
  {
LABEL_104:
    if (v51 >= 0) {
      int v57 = &qword_25F1380;
    }
    else {
      int v57 = (uint64_t *)qword_25F1380;
    }
    memmove(v56, v57, v52);
  }
LABEL_108:
  int v58 = &v56[v52];
  if (v54)
  {
    if (v53 >= 0) {
      int v59 = &qword_25F0630;
    }
    else {
      int v59 = (uint64_t *)qword_25F0630;
    }
    memmove(v58, v59, v54);
  }
  v58[v54] = 0;
  if (byte_25F0677 >= 0) {
    uint64_t v60 = (const std::string::value_type *)&qword_25F0660;
  }
  else {
    uint64_t v60 = (const std::string::value_type *)qword_25F0660;
  }
  if (byte_25F0677 >= 0) {
    std::string::size_type v61 = byte_25F0677;
  }
  else {
    std::string::size_type v61 = *(void *)&byte_25F0668;
  }
  uint64_t v62 = std::string::append(&v281, v60, v61);
  long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  uint64_t v64 = std::string::append(&__dst, "_Percentage");
  long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  qword_25F1630 = v64->__r_.__value_.__r.__words[2];
  xmmword_25F1620 = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_121;
    }
  }
  else if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_121;
  }
  operator delete(v281.__r_.__value_.__l.__data_);
LABEL_121:
  int v66 = byte_25F1397;
  if (byte_25F1397 >= 0) {
    size_t v67 = byte_25F1397;
  }
  else {
    size_t v67 = qword_25F1388;
  }
  int v68 = byte_25F0647;
  if (byte_25F0647 >= 0) {
    size_t v69 = byte_25F0647;
  }
  else {
    size_t v69 = unk_25F0638;
  }
  unint64_t v70 = v69 + v67;
  if (v69 + v67 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v70 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    int v71 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v69 + v67;
    if (!v67) {
      goto LABEL_134;
    }
    goto LABEL_130;
  }
  uint64_t v100 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v70 | 7) != 0x17) {
    uint64_t v100 = v70 | 7;
  }
  uint64_t v101 = v100 + 1;
  int v71 = (char *)operator new(v100 + 1);
  __dst.__r_.__value_.__l.__size_ = v69 + v67;
  __dst.__r_.__value_.__r.__words[2] = v101 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
  if (v67)
  {
LABEL_130:
    if (v66 >= 0) {
      uint64_t v72 = &qword_25F1380;
    }
    else {
      uint64_t v72 = (uint64_t *)qword_25F1380;
    }
    memmove(v71, v72, v67);
  }
LABEL_134:
  uint64_t v73 = &v71[v67];
  if (v69)
  {
    if (v68 >= 0) {
      uint64_t v74 = &qword_25F0630;
    }
    else {
      uint64_t v74 = (uint64_t *)qword_25F0630;
    }
    memmove(v73, v74, v69);
  }
  v73[v69] = 0;
  uint64_t v75 = std::string::append(&__dst, "_Duration");
  long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
  qword_25F1648 = v75->__r_.__value_.__r.__words[2];
  xmmword_25F1638 = v76;
  v75->__r_.__value_.__l.__size_ = 0;
  v75->__r_.__value_.__r.__words[2] = 0;
  v75->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v77 = byte_25F1397;
  if (byte_25F1397 >= 0) {
    size_t v78 = byte_25F1397;
  }
  else {
    size_t v78 = qword_25F1388;
  }
  int v79 = byte_25F0647;
  if (byte_25F0647 >= 0) {
    size_t v80 = byte_25F0647;
  }
  else {
    size_t v80 = unk_25F0638;
  }
  unint64_t v81 = v80 + v78;
  if (v80 + v78 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v81 <= 0x16)
  {
    qword_25F1658 = 0;
    unk_25F1660 = 0;
    qword_25F1650 = 0;
    int v82 = &qword_25F1650;
    byte_25F1667 = v80 + v78;
    if (!v78) {
      goto LABEL_154;
    }
    goto LABEL_150;
  }
  uint64_t v102 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v81 | 7) != 0x17) {
    uint64_t v102 = v81 | 7;
  }
  uint64_t v103 = v102 + 1;
  int v82 = (uint64_t *)operator new(v102 + 1);
  qword_25F1658 = v80 + v78;
  unk_25F1660 = v103 | 0x8000000000000000;
  qword_25F1650 = (uint64_t)v82;
  if (v78)
  {
LABEL_150:
    if (v77 >= 0) {
      uint64_t v83 = &qword_25F1380;
    }
    else {
      uint64_t v83 = (uint64_t *)qword_25F1380;
    }
    memmove(v82, v83, v78);
  }
LABEL_154:
  uint64_t v84 = (char *)v82 + v78;
  if (v80)
  {
    if (v79 >= 0) {
      uint64_t v85 = &qword_25F0630;
    }
    else {
      uint64_t v85 = (uint64_t *)qword_25F0630;
    }
    memmove(v84, v85, v80);
  }
  v84[v80] = 0;
  int v86 = byte_25F1667;
  if (byte_25F1667 >= 0) {
    size_t v87 = byte_25F1667;
  }
  else {
    size_t v87 = qword_25F1658;
  }
  unint64_t v88 = v87 + 5;
  if (v87 + 5 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v88 >= 0x17)
  {
    uint64_t v104 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v88 | 7) != 0x17) {
      uint64_t v104 = v88 | 7;
    }
    uint64_t v105 = v104 + 1;
    uint64_t v89 = (uint64_t *)operator new(v104 + 1);
    qword_25F1670 = v87 + 5;
    unk_25F1678 = v105 | 0x8000000000000000;
    qword_25F1668 = (uint64_t)v89;
  }
  else
  {
    uint64_t v89 = &qword_25F1668;
    qword_25F1670 = 0;
    unk_25F1678 = 0;
    qword_25F1668 = 0;
    byte_25F167F = v87 + 5;
    if (!v87) {
      goto LABEL_201;
    }
  }
  if (v86 >= 0) {
    double v106 = &qword_25F1650;
  }
  else {
    double v106 = (uint64_t *)qword_25F1650;
  }
  memmove(v89, v106, v87);
LABEL_201:
  strcpy((char *)v89 + v87, "_Name");
  int v107 = byte_25F1397;
  if (byte_25F1397 >= 0) {
    size_t v108 = byte_25F1397;
  }
  else {
    size_t v108 = qword_25F1388;
  }
  int v109 = byte_25F0647;
  if (byte_25F0647 >= 0) {
    size_t v110 = byte_25F0647;
  }
  else {
    size_t v110 = unk_25F0638;
  }
  unint64_t v111 = v110 + v108;
  if (v110 + v108 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v111 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    uint64_t v112 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v110 + v108;
    if (!v108) {
      goto LABEL_214;
    }
    goto LABEL_210;
  }
  uint64_t v122 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v111 | 7) != 0x17) {
    uint64_t v122 = v111 | 7;
  }
  uint64_t v123 = v122 + 1;
  uint64_t v112 = (char *)operator new(v122 + 1);
  __dst.__r_.__value_.__l.__size_ = v110 + v108;
  __dst.__r_.__value_.__r.__words[2] = v123 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v112;
  if (v108)
  {
LABEL_210:
    if (v107 >= 0) {
      __darwin_ct_rune_t v113 = &qword_25F1380;
    }
    else {
      __darwin_ct_rune_t v113 = (uint64_t *)qword_25F1380;
    }
    memmove(v112, v113, v108);
  }
LABEL_214:
  __darwin_ct_rune_t v114 = &v112[v108];
  if (v110)
  {
    if (v109 >= 0) {
      int v115 = &qword_25F0630;
    }
    else {
      int v115 = (uint64_t *)qword_25F0630;
    }
    memmove(v114, v115, v110);
  }
  v114[v110] = 0;
  int v116 = std::string::append(&__dst, "_Connector_Type");
  long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
  qword_25F1690 = v116->__r_.__value_.__r.__words[2];
  xmmword_25F1680 = v117;
  v116->__r_.__value_.__l.__size_ = 0;
  v116->__r_.__value_.__r.__words[2] = 0;
  v116->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v118 = SHIBYTE(qword_25F1690);
  if (qword_25F1690 >= 0) {
    size_t v119 = HIBYTE(qword_25F1690);
  }
  else {
    size_t v119 = *((void *)&xmmword_25F1680 + 1);
  }
  unint64_t v120 = v119 + 6;
  if (v119 + 6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v120 >= 0x17)
  {
    uint64_t v124 = (v120 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v120 | 7) != 0x17) {
      uint64_t v124 = v120 | 7;
    }
    uint64_t v125 = v124 + 1;
    uint64_t v121 = (uint64_t *)operator new(v124 + 1);
    qword_25F16A0 = v119 + 6;
    unk_25F16A8 = v125 | 0x8000000000000000;
    qword_25F1698 = (uint64_t)v121;
  }
  else
  {
    uint64_t v121 = &qword_25F1698;
    qword_25F16A0 = 0;
    unk_25F16A8 = 0;
    qword_25F1698 = 0;
    byte_25F16AF = v119 + 6;
    if (!v119) {
      goto LABEL_239;
    }
  }
  if (v118 >= 0) {
    long long v126 = &xmmword_25F1680;
  }
  else {
    long long v126 = (long long *)xmmword_25F1680;
  }
  memmove(v121, v126, v119);
LABEL_239:
  strcpy((char *)v121 + v119, "_Power");
  int v127 = byte_25F1397;
  if (byte_25F1397 >= 0) {
    size_t v128 = byte_25F1397;
  }
  else {
    size_t v128 = qword_25F1388;
  }
  int v129 = byte_25F0647;
  if (byte_25F0647 >= 0) {
    size_t v130 = byte_25F0647;
  }
  else {
    size_t v130 = unk_25F0638;
  }
  unint64_t v131 = v130 + v128;
  if (v130 + v128 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v131 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    long long v132 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v130 + v128;
    if (!v128) {
      goto LABEL_252;
    }
    goto LABEL_248;
  }
  uint64_t v161 = (v131 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v131 | 7) != 0x17) {
    uint64_t v161 = v131 | 7;
  }
  uint64_t v162 = v161 + 1;
  long long v132 = (char *)operator new(v161 + 1);
  __dst.__r_.__value_.__l.__size_ = v130 + v128;
  __dst.__r_.__value_.__r.__words[2] = v162 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v132;
  if (v128)
  {
LABEL_248:
    if (v127 >= 0) {
      uint64_t v133 = &qword_25F1380;
    }
    else {
      uint64_t v133 = (uint64_t *)qword_25F1380;
    }
    memmove(v132, v133, v128);
  }
LABEL_252:
  long long v134 = &v132[v128];
  if (v130)
  {
    if (v129 >= 0) {
      long long v135 = &qword_25F0630;
    }
    else {
      long long v135 = (uint64_t *)qword_25F0630;
    }
    memmove(v134, v135, v130);
  }
  v134[v130] = 0;
  if (byte_25F0E0F >= 0) {
    long long v136 = (const std::string::value_type *)&qword_25F0DF8;
  }
  else {
    long long v136 = (const std::string::value_type *)qword_25F0DF8;
  }
  if (byte_25F0E0F >= 0) {
    std::string::size_type v137 = byte_25F0E0F;
  }
  else {
    std::string::size_type v137 = unk_25F0E00;
  }
  int v138 = std::string::append(&__dst, v136, v137);
  long long v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
  qword_25F16C0 = v138->__r_.__value_.__r.__words[2];
  xmmword_25F16B0 = v139;
  v138->__r_.__value_.__l.__size_ = 0;
  v138->__r_.__value_.__r.__words[2] = 0;
  v138->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v140 = byte_25F1397;
  if (byte_25F1397 >= 0) {
    size_t v141 = byte_25F1397;
  }
  else {
    size_t v141 = qword_25F1388;
  }
  int v142 = byte_25F0647;
  if (byte_25F0647 >= 0) {
    size_t v143 = byte_25F0647;
  }
  else {
    size_t v143 = unk_25F0638;
  }
  unint64_t v144 = v143 + v141;
  if (v143 + v141 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v144 <= 0x16)
  {
    memset(&v281, 0, sizeof(v281));
    long long v145 = (char *)&v281;
    *((unsigned char *)&v281.__r_.__value_.__s + 23) = v143 + v141;
    if (!v141) {
      goto LABEL_278;
    }
    goto LABEL_274;
  }
  uint64_t v163 = (v144 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v144 | 7) != 0x17) {
    uint64_t v163 = v144 | 7;
  }
  uint64_t v164 = v163 + 1;
  long long v145 = (char *)operator new(v163 + 1);
  v281.__r_.__value_.__l.__size_ = v143 + v141;
  v281.__r_.__value_.__r.__words[2] = v164 | 0x8000000000000000;
  v281.__r_.__value_.__r.__words[0] = (std::string::size_type)v145;
  if (v141)
  {
LABEL_274:
    if (v140 >= 0) {
      long long v146 = &qword_25F1380;
    }
    else {
      long long v146 = (uint64_t *)qword_25F1380;
    }
    memmove(v145, v146, v141);
  }
LABEL_278:
  long long v147 = &v145[v141];
  if (v143)
  {
    if (v142 >= 0) {
      long long v148 = &qword_25F0630;
    }
    else {
      long long v148 = (uint64_t *)qword_25F0630;
    }
    memmove(v147, v148, v143);
  }
  v147[v143] = 0;
  if (byte_25F0677 >= 0) {
    long long v149 = (const std::string::value_type *)&qword_25F0660;
  }
  else {
    long long v149 = (const std::string::value_type *)qword_25F0660;
  }
  if (byte_25F0677 >= 0) {
    std::string::size_type v150 = byte_25F0677;
  }
  else {
    std::string::size_type v150 = *(void *)&byte_25F0668;
  }
  long long v151 = std::string::append(&v281, v149, v150);
  long long v152 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v151->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v152;
  v151->__r_.__value_.__l.__size_ = 0;
  v151->__r_.__value_.__r.__words[2] = 0;
  v151->__r_.__value_.__r.__words[0] = 0;
  if (byte_25F0E0F >= 0) {
    long long v153 = (const std::string::value_type *)&qword_25F0DF8;
  }
  else {
    long long v153 = (const std::string::value_type *)qword_25F0DF8;
  }
  if (byte_25F0E0F >= 0) {
    std::string::size_type v154 = byte_25F0E0F;
  }
  else {
    std::string::size_type v154 = unk_25F0E00;
  }
  long long v155 = std::string::append(&__dst, v153, v154);
  long long v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
  qword_25F16D8 = v155->__r_.__value_.__r.__words[2];
  xmmword_25F16C8 = v156;
  v155->__r_.__value_.__l.__size_ = 0;
  v155->__r_.__value_.__r.__words[2] = 0;
  v155->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_297;
    }
  }
  else if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_297;
  }
  operator delete(v281.__r_.__value_.__l.__data_);
LABEL_297:
  byte_25F16F7 = 16;
  strcpy((char *)&xmmword_25F16E0, "Use_NACS_Adapter");
  byte_25F170F = 16;
  strcpy(byte_25F16F8, "Start_Route_Sign");
  qword_25F1710 = (uint64_t)operator new(0x20uLL);
  unk_25F1718 = v276;
  strcpy((char *)qword_25F1710, "Start_Route_Spoken_Primary");
  int v157 = byte_25EFDA7;
  if (byte_25EFDA7 >= 0) {
    size_t v158 = byte_25EFDA7;
  }
  else {
    size_t v158 = qword_25EFD98;
  }
  unint64_t v159 = v158 + 27;
  if (v158 + 27 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v159 <= 0x16)
  {
    long long v160 = &qword_25F1728;
    qword_25F1730 = 0;
    unk_25F1738 = 0;
    qword_25F1728 = 0;
    byte_25F173F = v158 + 27;
LABEL_314:
    if (v157 >= 0) {
      long long v167 = &qword_25EFD90;
    }
    else {
      long long v167 = (uint64_t *)qword_25EFD90;
    }
    memmove(v160, v167, v158);
    goto LABEL_318;
  }
  uint64_t v165 = (v159 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v159 | 7) != 0x17) {
    uint64_t v165 = v159 | 7;
  }
  uint64_t v166 = v165 + 1;
  long long v160 = (uint64_t *)operator new(v165 + 1);
  qword_25F1730 = v158 + 27;
  unk_25F1738 = v166 | 0x8000000000000000;
  qword_25F1728 = (uint64_t)v160;
  if (v158) {
    goto LABEL_314;
  }
LABEL_318:
  strcpy((char *)v160 + v158, "Turn_Around_To_Route_Spoken");
  strcpy(&byte_25F1757, "\t_Two_Lanes");
  strcpy((char *)&qword_25F1740, "_One_Lane");
  strcpy(&byte_25F176F, "\n_Three_Lanes");
  byte_25F1787 = 12;
  byte_25F179F = 11;
  strcpy((char *)&qword_25F1788, "_Four_Lanes");
  byte_25F17B7 = 11;
  strcpy((char *)&qword_25F17A0, "_Five_Lanes");
  strcpy(&byte_25F17CF, "\n_Seven_Lanes");
  strcpy((char *)&qword_25F17B8, "_Six_Lanes");
  byte_25F17E7 = 12;
  byte_25F17FF = 12;
  strcpy((char *)&qword_25F17E8, "_Eight_Lanes");
  byte_25F1817 = 12;
  strcpy((char *)&qword_25F1800, "_Second_Lane");
  byte_25F182F = 11;
  strcpy((char *)&qword_25F1818, "_Third_Lane");
  byte_25F1847 = 19;
  long long v270 = *(_OWORD *)"_Second_Third_Lanes";
  strcpy((char *)&xmmword_25F1830, "_Second_Third_Lanes");
  byte_25F185F = 4;
  strcpy((char *)&dword_25F1848, "Left");
  byte_25F1877 = 5;
  byte_25F1864 = 116;
  dword_25F1860 = 1751607634;
  byte_25F1865 = 0;
  byte_25F188F = 6;
  strcpy((char *)&dword_25F1878, "Middle");
  BYTE1(qword_25F18A0) = 0;
  WORD1(qword_25F18A0) = 0;
  HIDWORD(qword_25F18A0) = 0x10000000;
  strcpy((char *)dword_25F1890, "Left_Second_Lane");
  BYTE1(qword_25F18B8) = 0;
  WORD1(qword_25F18B8) = 0;
  HIDWORD(qword_25F18B8) = 285212672;
  strcpy((char *)&dword_25F18A8, "Right_Second_Lan");
  qword_25F18D0 = 0xF00000000000000;
  strcpy((char *)&dword_25F18C0, "Left_Third_Lane");
  qword_25F18E8 = 0x1000000000000000;
  byte_25F18DC = 116;
  dword_25F18D8 = 1751607634;
  dword_25F18E4 = 1701732684;
  unk_25F18DD = *(void *)"_Third_Lane";
  long long v168 = (char *)operator new(0x19uLL);
  qword_25F18F0 = (uint64_t)v168;
  unk_25F18F8 = v280;
  *(_DWORD *)long long v168 = 1952867660;
  strcpy(v168 + 19, "anes");
  *(_OWORD *)(v168 + 4) = v270;
  long long v169 = (char *)operator new(0x20uLL);
  qword_25F1908 = (uint64_t)v169;
  xmmword_25F1910 = v279;
  *(_DWORD *)long long v169 = 1751607634;
  v169[4] = 116;
  strcpy(v169 + 20, "anes");
  *(_OWORD *)(v169 + 5) = v270;
  byte_25F1937 = 5;
  strcpy((char *)&dword_25F1920, "_Stay");
  byte_25F194F = 13;
  strcpy((char *)&qword_25F1938, "Continue_Sign");
  byte_25F1967 = 8;
  strcpy((char *)&qword_25F1950, "Continue");
  int v170 = byte_25F0E27;
  if (byte_25F0E27 >= 0) {
    size_t v171 = byte_25F0E27;
  }
  else {
    size_t v171 = qword_25F0E18;
  }
  unint64_t v172 = v171 + 8;
  if (v171 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v172 >= 0x17)
  {
    uint64_t v174 = (v172 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v172 | 7) != 0x17) {
      uint64_t v174 = v172 | 7;
    }
    uint64_t v175 = v174 + 1;
    long long v176 = operator new(v174 + 1);
    qword_25F1970 = v171 + 8;
    qword_25F1978 = v175 | 0x8000000000000000;
    qword_25F1968 = (uint64_t)v176;
    *long long v176 = 0x65756E69746E6F43;
    long long v173 = v176 + 1;
  }
  else
  {
    qword_25F1978 = 0;
    HIBYTE(qword_25F1978) = v171 + 8;
    qword_25F1968 = 0x65756E69746E6F43;
    qword_25F1970 = 0;
    long long v173 = &qword_25F1970;
    if (!v171) {
      goto LABEL_332;
    }
  }
  if (v170 >= 0) {
    long long v177 = &qword_25F0E10;
  }
  else {
    long long v177 = (uint64_t *)qword_25F0E10;
  }
  memmove(v173, v177, v171);
LABEL_332:
  *((unsigned char *)v173 + v171) = 0;
  int v178 = SHIBYTE(qword_25F0E80);
  if (qword_25F0E80 >= 0) {
    size_t v179 = HIBYTE(qword_25F0E80);
  }
  else {
    size_t v179 = unk_25F0E78;
  }
  unint64_t v180 = v179 + 8;
  if (v179 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v180 >= 0x17)
  {
    uint64_t v182 = (v180 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v180 | 7) != 0x17) {
      uint64_t v182 = v180 | 7;
    }
    uint64_t v183 = v182 + 1;
    long long v184 = operator new(v182 + 1);
    qword_25F1988 = v179 + 8;
    qword_25F1990 = v183 | 0x8000000000000000;
    qword_25F1980 = (uint64_t)v184;
    *long long v184 = qword_25F1950;
    long long v181 = v184 + 1;
  }
  else
  {
    qword_25F1990 = 0;
    HIBYTE(qword_25F1990) = v179 + 8;
    qword_25F1980 = qword_25F1950;
    qword_25F1988 = 0;
    long long v181 = &qword_25F1988;
    if (!v179) {
      goto LABEL_346;
    }
  }
  if (v178 >= 0) {
    long long v185 = &qword_25F0E70;
  }
  else {
    long long v185 = (uint64_t *)qword_25F0E70;
  }
  memmove(v181, v185, v179);
LABEL_346:
  *((unsigned char *)v181 + v179) = 0;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 1;
  LOWORD(__dst.__r_.__value_.__l.__data_) = 83;
  HIBYTE(v284) = 2;
  strcpy((char *)&v283, "SW");
  HIBYTE(v286) = 1;
  LOWORD(v285[0]) = 87;
  HIBYTE(v288) = 2;
  strcpy((char *)&v287, "NW");
  HIBYTE(v290) = 1;
  LOWORD(v289[0]) = 78;
  HIBYTE(v292) = 2;
  strcpy((char *)&v291, "NE");
  HIBYTE(v294) = 1;
  LOWORD(v293) = 69;
  HIBYTE(v296) = 2;
  strcpy((char *)&__p, "SE");
  sub_4BDC0C(qword_25F1998, (uint64_t)&__dst, 8uLL);
  if (SHIBYTE(v296) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v294) & 0x80000000) == 0)
    {
LABEL_348:
      if ((SHIBYTE(v292) & 0x80000000) == 0) {
        goto LABEL_349;
      }
      goto LABEL_383;
    }
  }
  else if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
    goto LABEL_348;
  }
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_349:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_350;
    }
    goto LABEL_384;
  }
LABEL_383:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_350:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_351;
    }
    goto LABEL_385;
  }
LABEL_384:
  operator delete(v289[0]);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_351:
    if ((SHIBYTE(v286) & 0x80000000) == 0) {
      goto LABEL_352;
    }
    goto LABEL_386;
  }
LABEL_385:
  operator delete((void *)v287);
  if ((SHIBYTE(v286) & 0x80000000) == 0)
  {
LABEL_352:
    if ((SHIBYTE(v284) & 0x80000000) == 0) {
      goto LABEL_353;
    }
LABEL_387:
    operator delete((void *)v283);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_354;
    }
    goto LABEL_388;
  }
LABEL_386:
  operator delete(v285[0]);
  if (SHIBYTE(v284) < 0) {
    goto LABEL_387;
  }
LABEL_353:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_354;
  }
LABEL_388:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_354:
  byte_25F19C7 = 13;
  strcpy((char *)&qword_25F19B0, "{instruction}");
  byte_25F19DF = 20;
  strcpy(byte_25F19C8, "{primaryInstruction}");
  strcpy((char *)&xmmword_25F19E0, "{secondaryInstruction}");
  HIBYTE(word_25F19F6) = 22;
  qword_25F19F8 = (uint64_t)operator new(0x20uLL);
  unk_25F1A00 = v278;
  strcpy((char *)qword_25F19F8, "{andSecondaryInstruction}");
  qword_25F1A10 = (uint64_t)operator new(0x20uLL);
  unk_25F1A18 = v279;
  strcpy((char *)qword_25F1A10, "{toSecondaryInstruction}");
  byte_25F1A3F = 21;
  strcpy(byte_25F1A28, "{continueInstruction}");
  qword_25F1A40 = (uint64_t)operator new(0x20uLL);
  unk_25F1A48 = v276;
  strcpy((char *)qword_25F1A40, "{thenSecondaryInstruction}");
  byte_25F1A6F = 14;
  strcpy((char *)&qword_25F1A58, "{instruction1}");
  byte_25F1A87 = 14;
  strcpy((char *)&qword_25F1A70, "{instruction2}");
  strcpy(&byte_25F1A9F, "\n{nextDistance}");
  strcpy((char *)&qword_25F1A88, "{distance}");
  byte_25F1AB7 = 14;
  byte_25F1ACF = 16;
  strcpy(byte_25F1AB8, "{valid_distance}");
  strcpy(&byte_25F1AE7, "\n{valid_distance}");
  strcpy((char *)&qword_25F1AD0, "{distance}");
  byte_25F1AFF = 16;
  byte_25F1B17 = 15;
  strcpy((char *)&qword_25F1B00, "{ClimbDistance}");
  byte_25F1B2F = 17;
  strcpy(byte_25F1B18, "{DescentDistance}");
  byte_25F1B47 = 13;
  strcpy((char *)&qword_25F1B30, "{nonBrkSpace}");
  byte_25F1B5F = 9;
  strcpy((char *)&qword_25F1B48, "{newLine}");
  byte_25F1B77 = 6;
  word_25F1B64 = -24382;
  dword_25F1B60 = -1211981630;
  byte_25F1B66 = 0;
  byte_25F1B8F = 2;
  word_25F1B78 = -24382;
  byte_25F1B7A = 0;
  byte_25F1BA7 = 1;
  word_25F1B90 = 10;
  byte_25F1BBF = 1;
  word_25F1BA8 = 32;
  byte_25F1BD7 = 2;
  strcpy((char *)&word_25F1BC0, "\n\n");
  strcpy(&byte_25F1BEF, "\t{TowardShield1}");
  strcpy((char *)&qword_25F1BD8, "{Shield1}");
  byte_25F1C07 = 15;
  strcpy(&byte_25F1C1F, "\t{TowardShield2}");
  strcpy((char *)&qword_25F1C08, "{Shield2}");
  byte_25F1C37 = 15;
  byte_25F1C4F = 12;
  strcpy((char *)&qword_25F1C38, "{Direction1}");
  byte_25F1C67 = 12;
  strcpy((char *)&qword_25F1C50, "{Direction2}");
  byte_25F1C7F = 18;
  strcpy((char *)&xmmword_25F1C68, "{TowardDirection1}");
  byte_25F1C97 = 18;
  strcpy((char *)&xmmword_25F1C80, "{TowardDirection2}");
  byte_25F1CAF = 7;
  strcpy((char *)&dword_25F1C98, "{Icon1}");
  byte_25F1CC7 = 7;
  strcpy((char *)&dword_25F1CB0, "{Icon2}");
  byte_25F1CC8[23] = 14;
  strcpy(byte_25F1CC8, "{Intersection}");
  byte_25F1CF7 = 6;
  strcpy((char *)&xmmword_25F1CE0, "{Road}");
  byte_25F1D0F = 7;
  strcpy((char *)&dword_25F1CF8, "{Road1}");
  byte_25F1D27 = 7;
  strcpy((char *)&xmmword_25F1D10, "{Road2}");
  strcpy(&byte_25F1D3F, "\n{Freeway}");
  strcpy((char *)&qword_25F1D28, "{Elevator}");
  strcpy(&byte_25F1D57, "\t{Ferry}");
  byte_25F1D6F = 7;
  byte_25F1D87 = 13;
  strcpy((char *)&xmmword_25F1D70, "{ShuttleName}");
  byte_25F1D9F = 11;
  strcpy((char *)&xmmword_25F1D88, "{Signpost1}");
  byte_25F1DB7 = 11;
  strcpy((char *)&xmmword_25F1DA0, "{Signpost2}");
  byte_25F1DCF = 12;
  strcpy((char *)&xmmword_25F1DB8, "{ExitNumber}");
  strcpy(&byte_25F1DE7, "\t{Name}");
  strcpy((char *)&xmmword_25F1DD0, "{Address}");
  byte_25F1DFF = 6;
  byte_25F1E17 = 11;
  strcpy((char *)&xmmword_25F1E00, "{PlaceName}");
  byte_25F1E2F = 14;
  strcpy((char *)&xmmword_25F1E18, "{ElevatorName}");
  byte_25F1E47 = 15;
  strcpy((char *)&xmmword_25F1E30, "{EscalatorName}");
  byte_25F1E5F = 12;
  strcpy((char *)&xmmword_25F1E48, "{StairsName}");
  strcpy(&byte_25F1E77, "\n{BridgeName}");
  strcpy((char *)&xmmword_25F1E60, "{RampName}");
  byte_25F1E8F = 12;
  byte_25F1EA7 = 12;
  strcpy((char *)&xmmword_25F1E90, "{TunnelName}");
  byte_25F1EBF = 13;
  strcpy((char *)&xmmword_25F1EA8, "{CustomLabel}");
  std::string __dst = *(std::string *)byte_25F1CC8;
  long long v283 = xmmword_25F1CE0;
  uint64_t v284 = unk_25F1CF0;
  *(_OWORD *)v285 = *(_OWORD *)&dword_25F1CF8;
  uint64_t v286 = unk_25F1D08;
  long long v287 = xmmword_25F1D10;
  uint64_t v288 = unk_25F1D20;
  *(_OWORD *)long long v289 = *(_OWORD *)&qword_25F1D28;
  uint64_t v290 = unk_25F1D38;
  uint64_t v292 = unk_25F1D50;
  long long v291 = xmmword_25F1D40;
  long long v293 = *(_OWORD *)&dword_25F1D58;
  uint64_t v294 = unk_25F1D68;
  uint64_t v296 = unk_25F1D80;
  long long __p = xmmword_25F1D70;
  long long v297 = xmmword_25F1D88;
  uint64_t v298 = unk_25F1D98;
  uint64_t v300 = unk_25F1DB0;
  long long v299 = xmmword_25F1DA0;
  long long v301 = xmmword_25F1DB8;
  long long v303 = xmmword_25F1DD0;
  uint64_t v302 = unk_25F1DC8;
  uint64_t v304 = unk_25F1DE0;
  long long v305 = xmmword_25F1DE8;
  long long v307 = xmmword_25F1E00;
  uint64_t v306 = unk_25F1DF8;
  uint64_t v308 = unk_25F1E10;
  long long v309 = xmmword_25F1E18;
  long long v311 = xmmword_25F1E30;
  uint64_t v310 = unk_25F1E28;
  uint64_t v312 = unk_25F1E40;
  long long v313 = xmmword_25F1E48;
  long long v315 = xmmword_25F1E60;
  uint64_t v314 = unk_25F1E58;
  uint64_t v316 = unk_25F1E70;
  long long v317 = xmmword_25F1E78;
  long long v319 = xmmword_25F1E90;
  uint64_t v318 = unk_25F1E88;
  uint64_t v320 = unk_25F1EA0;
  uint64_t v322 = unk_25F1EB8;
  long long v321 = xmmword_25F1EA8;
  sub_4BDC0C(qword_25F1EC0, (uint64_t)&__dst, 0x15uLL);
  if (SHIBYTE(v322) < 0)
  {
    operator delete((void *)v321);
    if ((SHIBYTE(v320) & 0x80000000) == 0)
    {
LABEL_356:
      if ((SHIBYTE(v318) & 0x80000000) == 0) {
        goto LABEL_357;
      }
      goto LABEL_391;
    }
  }
  else if ((SHIBYTE(v320) & 0x80000000) == 0)
  {
    goto LABEL_356;
  }
  operator delete((void *)v319);
  if ((SHIBYTE(v318) & 0x80000000) == 0)
  {
LABEL_357:
    if ((SHIBYTE(v316) & 0x80000000) == 0) {
      goto LABEL_358;
    }
    goto LABEL_392;
  }
LABEL_391:
  operator delete((void *)v317);
  if ((SHIBYTE(v316) & 0x80000000) == 0)
  {
LABEL_358:
    if ((SHIBYTE(v314) & 0x80000000) == 0) {
      goto LABEL_359;
    }
    goto LABEL_393;
  }
LABEL_392:
  operator delete((void *)v315);
  if ((SHIBYTE(v314) & 0x80000000) == 0)
  {
LABEL_359:
    if ((SHIBYTE(v312) & 0x80000000) == 0) {
      goto LABEL_360;
    }
    goto LABEL_394;
  }
LABEL_393:
  operator delete((void *)v313);
  if ((SHIBYTE(v312) & 0x80000000) == 0)
  {
LABEL_360:
    if ((SHIBYTE(v310) & 0x80000000) == 0) {
      goto LABEL_361;
    }
    goto LABEL_395;
  }
LABEL_394:
  operator delete((void *)v311);
  if ((SHIBYTE(v310) & 0x80000000) == 0)
  {
LABEL_361:
    if ((SHIBYTE(v308) & 0x80000000) == 0) {
      goto LABEL_362;
    }
    goto LABEL_396;
  }
LABEL_395:
  operator delete((void *)v309);
  if ((SHIBYTE(v308) & 0x80000000) == 0)
  {
LABEL_362:
    if ((SHIBYTE(v306) & 0x80000000) == 0) {
      goto LABEL_363;
    }
    goto LABEL_397;
  }
LABEL_396:
  operator delete((void *)v307);
  if ((SHIBYTE(v306) & 0x80000000) == 0)
  {
LABEL_363:
    if ((SHIBYTE(v304) & 0x80000000) == 0) {
      goto LABEL_364;
    }
    goto LABEL_398;
  }
LABEL_397:
  operator delete((void *)v305);
  if ((SHIBYTE(v304) & 0x80000000) == 0)
  {
LABEL_364:
    if ((SHIBYTE(v302) & 0x80000000) == 0) {
      goto LABEL_365;
    }
    goto LABEL_399;
  }
LABEL_398:
  operator delete((void *)v303);
  if ((SHIBYTE(v302) & 0x80000000) == 0)
  {
LABEL_365:
    if ((SHIBYTE(v300) & 0x80000000) == 0) {
      goto LABEL_366;
    }
    goto LABEL_400;
  }
LABEL_399:
  operator delete((void *)v301);
  if ((SHIBYTE(v300) & 0x80000000) == 0)
  {
LABEL_366:
    if ((SHIBYTE(v298) & 0x80000000) == 0) {
      goto LABEL_367;
    }
    goto LABEL_401;
  }
LABEL_400:
  operator delete((void *)v299);
  if ((SHIBYTE(v298) & 0x80000000) == 0)
  {
LABEL_367:
    if ((SHIBYTE(v296) & 0x80000000) == 0) {
      goto LABEL_368;
    }
    goto LABEL_402;
  }
LABEL_401:
  operator delete((void *)v297);
  if ((SHIBYTE(v296) & 0x80000000) == 0)
  {
LABEL_368:
    if ((SHIBYTE(v294) & 0x80000000) == 0) {
      goto LABEL_369;
    }
    goto LABEL_403;
  }
LABEL_402:
  operator delete((void *)__p);
  if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
LABEL_369:
    if ((SHIBYTE(v292) & 0x80000000) == 0) {
      goto LABEL_370;
    }
    goto LABEL_404;
  }
LABEL_403:
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_370:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_371;
    }
    goto LABEL_405;
  }
LABEL_404:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_371:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_372;
    }
    goto LABEL_406;
  }
LABEL_405:
  operator delete(v289[0]);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_372:
    if ((SHIBYTE(v286) & 0x80000000) == 0) {
      goto LABEL_373;
    }
    goto LABEL_407;
  }
LABEL_406:
  operator delete((void *)v287);
  if ((SHIBYTE(v286) & 0x80000000) == 0)
  {
LABEL_373:
    if ((SHIBYTE(v284) & 0x80000000) == 0) {
      goto LABEL_374;
    }
LABEL_408:
    operator delete((void *)v283);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_375;
    }
    goto LABEL_409;
  }
LABEL_407:
  operator delete(v285[0]);
  if (SHIBYTE(v284) < 0) {
    goto LABEL_408;
  }
LABEL_374:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_375;
  }
LABEL_409:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_375:
  qword_25F1ED8 = (uint64_t)operator new(0x19uLL);
  *(_OWORD *)algn_25F1EE0 = v280;
  strcpy((char *)qword_25F1ED8, "From_User_Location_List");
  byte_25F1F07 = 20;
  strcpy(&algn_25F1EE0[16], "Origin_Waypoint_List");
  qword_25F1F08 = (uint64_t)operator new(0x20uLL);
  unk_25F1F10 = v276;
  strcpy((char *)qword_25F1F08, "Intermediate_Waypoint_List");
  unk_25F1F20 = operator new(0x20uLL);
  unk_25F1F28 = v278;
  strcpy(unk_25F1F20, "Destination_Waypoint_List");
  byte_25F1F4F = 15;
  strcpy(byte_25F1F38, "{toDestination}");
  byte_25F1F67 = 13;
  strcpy((char *)&xmmword_25F1F50, "{Destination}");
  byte_25F1F7F = 7;
  strcpy(byte_25F1F68, "To_Home");
  byte_25F1F97 = 14;
  strcpy(byte_25F1F80, "To_ContactHome");
  byte_25F1FAF = 7;
  strcpy(byte_25F1F98, "To_Work");
  byte_25F1FC7 = 14;
  strcpy(byte_25F1FB0, "To_ContactWork");
  strcpy(&byte_25F1FDF, "\nTo_Business");
  strcpy(byte_25F1FC8, "To_Address");
  byte_25F1FF7 = 11;
  byte_25F200F = 16;
  strcpy(byte_25F1FF8, "To_Other_Contact");
  strcpy(&byte_25F2027, "\tTo_ContactSchool");
  strcpy(byte_25F2010, "To_School");
  byte_25F203F = 16;
  byte_25F2057 = 17;
  strcpy(byte_25F2040, "To_PersonLocation");
  qword_25F2058 = (uint64_t)operator new(0x20uLL);
  unk_25F2060 = v277;
  strcpy((char *)qword_25F2058, "To_ContactCustomLabelAddress");
  byte_25F2087 = 7;
  strcpy((char *)&dword_25F2070, "At_Home");
  byte_25F209F = 14;
  strcpy((char *)&qword_25F2088, "At_ContactHome");
  byte_25F20B7 = 7;
  strcpy((char *)&dword_25F20A0, "At_Work");
  byte_25F20CF = 14;
  strcpy((char *)&qword_25F20B8, "At_ContactWork");
  strcpy(&byte_25F20E7, "\nAt_Business");
  strcpy((char *)&qword_25F20D0, "At_Address");
  byte_25F20FF = 11;
  byte_25F2117 = 16;
  strcpy(byte_25F2100, "At_Other_Contact");
  byte_25F212F = 4;
  strcpy((char *)&dword_25F2118, "Home");
  byte_25F2147 = 11;
  strcpy((char *)&qword_25F2130 + 7, "Home");
  qword_25F2130 = *(void *)&v264[16];
  byte_25F215F = 4;
  strcpy((char *)&dword_25F2148, "Work");
  byte_25F2177 = 11;
  strcpy((char *)&qword_25F2160 + 7, "Work");
  qword_25F2160 = *(void *)v264;
  byte_25F218F = 7;
  strcpy((char *)&dword_25F2178, "Address");
  byte_25F21A7 = 8;
  strcpy((char *)&qword_25F2190, "Business");
  byte_25F21BF = 13;
  qword_25F21A8 = *(void *)&v264[48];
  *(uint64_t *)((char *)&qword_25F21A8 + 5) = *(void *)&v264[32];
  byte_25F21B5 = 0;
  byte_25F21D7 = 6;
  strcpy((char *)&dword_25F21C0, "School");
  byte_25F21EF = 13;
  strcpy((char *)&qword_25F21D8, "ContactSchool");
  byte_25F2207 = 14;
  strcpy((char *)&qword_25F21F0, "PersonLocation");
  qword_25F2208 = (uint64_t)operator new(0x20uLL);
  xmmword_25F2210 = v278;
  strcpy((char *)qword_25F2208, "ContactCustomLabelAddress");
  if (byte_25F1F67 < 0)
  {
    sub_4200(&xmmword_25F2220, (void *)xmmword_25F1F50, *((unint64_t *)&xmmword_25F1F50 + 1));
  }
  else
  {
    xmmword_25F2220 = xmmword_25F1F50;
    qword_25F2230 = unk_25F1F60;
  }
  byte_25F224F = 16;
  strcpy((char *)&xmmword_25F2238, "{PrevExitNumber}");
  byte_25F2267 = 10;
  strcpy((char *)&qword_25F2250, "{PrevRoad}");
  qword_25F2268 = (uint64_t)operator new(0x20uLL);
  unk_25F2270 = v279;
  strcpy((char *)qword_25F2268, "{RouteTotalExpectedTime}");
  byte_25F2297 = 18;
  strcpy(byte_25F2280, "{ChargePercentage}");
  qword_25F2298 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25F22A0 = v273;
  strcpy((char *)qword_25F2298, "{RemainingChargePercentage}");
  byte_25F22C7 = 16;
  strcpy(&algn_25F22A0[16], "{ChargeDuration}");
  byte_25F22DF = 15;
  strcpy((char *)&qword_25F22C8, "{ConnectorType}");
  byte_25F22F7 = 19;
  strcpy(byte_25F22E0, "{ChargeStationName}");
  byte_25F230F = 7;
  strcpy((char *)&dword_25F22F8, "{Power}");
  byte_25F2327 = 13;
  strcpy((char *)&qword_25F2310, "{VehicleName}");
  byte_25F233F = 18;
  strcpy((char *)&xmmword_25F2328, "{AreaIncidentName}");
  byte_25F2357 = 14;
  strcpy((char *)&qword_25F2340, "{AreaIncident}");
  byte_25F236F = 16;
  strcpy((char *)&xmmword_25F2358, "{AffectedRegion}");
  byte_25F2387 = 21;
  strcpy(byte_25F2370, "{AreaIncidentWeblink}");
  byte_25F239F = 20;
  strcpy((char *)&xmmword_25F2388, "{AreaIncidentAgency}");
  byte_25F23B7 = 11;
  strcpy((char *)&qword_25F23A0, "{IssueTime}");
  byte_25F23CF = 12;
  strcpy((char *)&qword_25F23B8, "{UpdateTime}");
  byte_25F23E7 = 11;
  strcpy((char *)&qword_25F23D0, "{IssueDate}");
  byte_25F23FF = 12;
  strcpy((char *)&qword_25F23E8, "{UpdateDate}");
  qword_25F2400 = (uint64_t)operator new(0x20uLL);
  unk_25F2408 = v279;
  strcpy((char *)qword_25F2400, "{AreaIncidentDataSource}");
  byte_25F242F = 13;
  strcpy((char *)&qword_25F2418, "{AreaHectare}");
  byte_25F2447 = 10;
  strcpy((char *)&qword_25F2430, "{AreaAcre}");
  qword_25F2448 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25F2450 = v275;
  strcpy((char *)qword_25F2448, "{WildfirePercentageContained}");
  qword_25F2460 = (uint64_t)operator new(0x28uLL);
  unk_25F2468 = v268[2];
  strcpy((char *)qword_25F2460, "{WildfireExpectedContainmentDate}");
  qword_25F2478 = (uint64_t)operator new(0x20uLL);
  unk_25F2480 = v277;
  strcpy((char *)qword_25F2478, "{ServerRecommendedRouteName}");
  qword_25F2490 = (uint64_t)operator new(0x20uLL);
  unk_25F2498 = v277;
  strcpy((char *)qword_25F2490, "{ServerNonRecommendedRoute1}");
  qword_25F24A8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25F24B0 = v277;
  strcpy((char *)qword_25F24A8, "{ServerNonRecommendedRoute2}");
  byte_25F24D7 = 12;
  strcpy((char *)&qword_25F24C0, "{ClientDest}");
  byte_25F24EF = 6;
  strcpy((char *)&dword_25F24D8, "{Name}");
  qword_25F24F0 = (uint64_t)operator new(0x20uLL);
  unk_25F24F8 = v268[1];
  strcpy((char *)qword_25F24F0, "ProactiveAlert_FasterRouteTitle");
  qword_25F2508 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25F2510 = v276;
  strcpy((char *)qword_25F2508, "ProactiveAlert_RoadClosure");
  qword_25F2520 = (uint64_t)operator new(0x30uLL);
  unk_25F2528 = v271;
  strcpy((char *)qword_25F2520, "ProactiveAlert_UnusuallyHeavyTrafficOnTwo");
  qword_25F2538 = (uint64_t)operator new(0x28uLL);
  unk_25F2540 = v274;
  strcpy((char *)qword_25F2538, "ProactiveAlert_FasterRouteTitle_to_Home");
  qword_25F2550 = (uint64_t)operator new(0x28uLL);
  unk_25F2558 = v274;
  strcpy((char *)qword_25F2550, "ProactiveAlert_FasterRouteTitle_to_Work");
  qword_25F2568 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25F2570 = v274;
  strcpy((char *)qword_25F2568, "ProactiveAlert_FasterRouteTitle_to_Name");
  qword_25F2580 = (uint64_t)operator new(0x30uLL);
  unk_25F2588 = xmmword_20B93B0;
  strcpy((char *)qword_25F2580, "ProactiveAlert_FasterRouteTitle_to_StreetName");
  byte_25F25AF = 17;
  strcpy(byte_25F2598, "Proactive_Driving");
  strcpy(&byte_25F25C7, "\n{RouteName}");
  strcpy((char *)&qword_25F25B0, "_RouteName");
  byte_25F25DF = 11;
  qword_25F25E0 = (uint64_t)operator new(0x28uLL);
  unk_25F25E8 = v268[2];
  strcpy((char *)qword_25F25E0, "Pass_Traffic_Light_Spoken_Primary");
  qword_25F25F8 = (uint64_t)operator new(0x20uLL);
  unk_25F2600 = v275;
  strcpy((char *)qword_25F25F8, "Pass_Stop_Sign_Spoken_Primary");
  unk_25F2610 = operator new(0x20uLL);
  unk_25F2618 = v268[0];
  strcpy(unk_25F2610, "Pass_Roundabout_Spoken_Primary");
  strcpy(&byte_25F263F, "\nBannerBody");
  strcpy(byte_25F2628, "BannerHead");
  strcpy(&byte_25F2657, "\nBannerDescription");
  byte_25F266F = 17;
  strcpy(&byte_25F2687, "\n_Incident");
  strcpy((char *)&qword_25F2670, "VoiceAlert");
  strcpy(&byte_25F269F, "\t_Area_Incident");
  byte_25F26B7 = 14;
  byte_25F26CF = 15;
  strcpy((char *)&qword_25F26B8, "_Area_Incidents");
  strcpy(&byte_25F26E7, "\t_Crash");
  strcpy((char *)&qword_25F26D0, "_Accident");
  byte_25F26FF = 6;
  byte_25F2717 = 16;
  strcpy((char *)&xmmword_25F2700, "_Congestion_Zone");
  strcpy(&byte_25F272F, "\n_Environmental_Zone");
  strcpy((char *)&qword_25F2718, "_Toll_Zone");
  byte_25F2747 = 19;
  BYTE1(qword_25F2758) = 116;
  WORD1(qword_25F2758) = 0;
  HIDWORD(qword_25F2758) = 301989888;
  strcpy(byte_25F2760, "_Construction");
  strcpy((char *)&qword_25F2748, "_Incident_Accide");
  byte_25F2777 = 13;
  byte_25F278F = 7;
  strcpy((char *)&dword_25F2778, "_Hazard");
  byte_25F27A7 = 12;
  strcpy((char *)&qword_25F2790, "_LaneClosure");
  byte_25F27BF = 12;
  strcpy((char *)&qword_25F27A8, "_LaneTrailer");
  qmemcpy(&byte_25F27D7, "\t_LaneTrailer", 13);
  strcpy((char *)&qword_25F27C0, "_Shoulder");
  qword_25F27E8 = 0x1500007200000000;
  *(void *)algn_25F27E4 = *(void *)"_Shoulder";
  strcpy((char *)&xmmword_25F27F0, "_Causing_Traffic_Delay");
  HIBYTE(word_25F2806) = 22;
  byte_25F281F = 6;
  strcpy((char *)&dword_25F2808, "_Timed");
  byte_25F2837 = 12;
  strcpy((char *)&qword_25F2820, "_HasDistance");
  byte_25F284F = 8;
  strcpy((char *)&qword_25F2838, "_Closure");
  strcpy(&byte_25F2867, "\n_BadRoad");
  strcpy((char *)&qword_25F2850, "_NoReroute");
  byte_25F287F = 8;
  byte_25F2897 = 12;
  strcpy((char *)&qword_25F2880, "_TollTrailer");
  byte_25F28AF = 12;
  strcpy((char *)&qword_25F2898, "_BestTrailer");
  byte_25F28C7 = 8;
  strcpy((char *)&qword_25F28B0, "_Trailer");
  byte_25F28DF = 18;
  strcpy((char *)&xmmword_25F28C8, "_Secondary_Trailer");
  byte_25F28F7 = 8;
  strcpy((char *)&qword_25F28E0, "_Savings");
  byte_25F290F = 8;
  strcpy((char *)&qword_25F28F8, "_AltRoad");
  byte_25F2927 = 6;
  strcpy((char *)&dword_25F2910, "_Named");
  byte_25F293F = 6;
  strcpy((char *)&dword_25F2928, "_NAMED");
  byte_25F2957 = 22;
  strcpy((char *)&xmmword_25F2940, "_Named_Suggested_Route");
  qword_25F2970 = 0x1000000000000000;
  xmmword_25F2960 = xmmword_20E81D0;
  byte_25F298F = 11;
  strcpy((char *)&qword_25F2978, "_Speed_Trap");
  byte_25F29A7 = 4;
  strcpy((char *)&dword_25F2990, "_UGI");
  byte_25F29BF = 12;
  strcpy((char *)&qword_25F29A8, "_Safer_Route");
  qword_25F29C0 = (uint64_t)operator new(0x20uLL);
  unk_25F29C8 = v268[1];
  strcpy((char *)qword_25F29C0, "BlockedRouteByBlockingIncident_");
  qword_25F29D8 = (uint64_t)operator new(0x28uLL);
  long long v270 = xmmword_20B9280;
  unk_25F29E0 = xmmword_20B9280;
  strcpy((char *)qword_25F29D8, "BlockedRouteByManeuverRestriction_");
  qword_25F29F0 = (uint64_t)operator new(0x20uLL);
  unk_25F29F8 = v268[0];
  strcpy((char *)qword_25F29F0, "BlockedRouteByTimeRestriction_");
  qword_25F2A08 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25F2A10 = xmmword_20B8FD0;
  strcpy((char *)qword_25F2A08, "SuggestRouteToAvoidBlockingIncident_");
  qword_25F2A20 = (uint64_t)operator new(0x30uLL);
  unk_25F2A28 = xmmword_20B9380;
  strcpy((char *)qword_25F2A20, "SuggestRouteToAvoidBlockingManeuverRestriction_");
  qword_25F2A38 = (uint64_t)operator new(0x30uLL);
  unk_25F2A40 = xmmword_20B93E0;
  strcpy((char *)qword_25F2A38, "SuggestRouteToAvoidBlockingTimeRestriction_");
  byte_25F2A67 = 1;
  word_25F2A50 = 95;
  strcpy((char *)&xmmword_25F2A68, "IncidentsCausingDelay_");
  HIBYTE(word_25F2A7E) = 22;
  qword_25F2A80 = (uint64_t)operator new(0x19uLL);
  unk_25F2A88 = v280;
  strcpy((char *)qword_25F2A80, "NonVotableRoadIncident_");
  byte_25F2AAF = 20;
  strcpy(byte_25F2A98, "VotableRoadIncident_");
  byte_25F2AC7 = 13;
  strcpy((char *)&qword_25F2AB0, "AreaIncident_");
  byte_25F2ADF = 15;
  strcpy((char *)&qword_25F2AC8, "CongestionZone_");
  qword_25F2AE0 = (uint64_t)operator new(0x20uLL);
  unk_25F2AE8 = v279;
  strcpy((char *)qword_25F2AE0, "EVModifiedChargingStops_");
  byte_25F2B0F = 13;
  strcpy((char *)&qword_25F2AF8, "EVDisconnect_");
  byte_25F2B27 = 12;
  strcpy((char *)&qword_25F2B10, "EVReconnect_");
  qword_25F2B28 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25F2B30 = v277;
  strcpy((char *)qword_25F2B28, "EVOfflineToOnlineTransition_");
  byte_25F2B57 = 13;
  strcpy((char *)&qword_25F2B40, "EVOfflineSAR_");
  byte_25F2B6F = 21;
  strcpy((char *)&xmmword_25F2B58, "EVTowingNotSupported_");
  byte_25F2B87 = 18;
  strcpy(algn_25F2B70, "EVInfeasibleRoute_");
  qword_25F2B88 = (uint64_t)operator new(0x38uLL);
  *(_OWORD *)algn_25F2B90 = xmmword_20B8DF0;
  strcpy((char *)qword_25F2B88, "SuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_25F2BA0 = (uint64_t)operator new(0x40uLL);
  unk_25F2BA8 = xmmword_20B98C0;
  strcpy((char *)qword_25F2BA0, "LCSuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_25F2BB8 = (uint64_t)operator new(0x30uLL);
  unk_25F2BC0 = v272;
  strcpy((char *)qword_25F2BB8, "SuggestRouteAddingStopsForEVInfeasibleRoute_");
  qmemcpy(v268, "InfeasibleRoute_ngStopsForEVInfeSuggestRouteAddi", sizeof(v268));
  qword_25F2BD0 = (uint64_t)operator new(0x30uLL);
  *(_WORD *)&v264[50] = 0;
  *(_DWORD *)&v264[52] = 0;
  *(void *)&v264[56] = 0x8000000000000030;
  unk_25F2BD8 = xmmword_20B9A80;
  strcpy((char *)qword_25F2BD0, "LCSuggestRouteAddingStopsForEVInfeasibleRoute_");
  strcpy(v264, "InfeasibleRoute_dingStopsForEVInLCSuggestRouteAd.");
  qword_25F2BE8 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_25F2BF0 = v271;
  strcpy((char *)qword_25F2BE8, "SuggestRouteAddingStopsToIncreaseDestSoc_");
  long long v186 = operator new(0x30uLL);
  qword_25F2C00 = (uint64_t)v186;
  unk_25F2C08 = v272;
  *long long v186 = v268[2];
  v186[1] = v268[1];
  *(_OWORD *)((char *)v186 + 28) = v268[0];
  *((unsigned char *)v186 + 44) = 0;
  qword_25F2C18 = (uint64_t)operator new(0x28uLL);
  unk_25F2C20 = v270;
  strcpy((char *)qword_25F2C18, "SuggestDetourWithHigherArrivalSOC_");
  long long v187 = operator new(0x30uLL);
  qword_25F2C30 = (uint64_t)v187;
  unk_25F2C38 = *(_OWORD *)&v264[48];
  *long long v187 = *(_OWORD *)&v264[32];
  v187[1] = *(_OWORD *)&v264[16];
  *(_OWORD *)((char *)v187 + 30) = *(_OWORD *)v264;
  *((unsigned char *)v187 + 46) = 0;
  qword_25F2C48 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25F2C50 = v274;
  strcpy((char *)qword_25F2C48, "SuggestRouteToDestForEVInfeasibleRoute_");
  qword_25F2C60 = (uint64_t)operator new(0x28uLL);
  unk_25F2C68 = v267;
  strcpy((char *)qword_25F2C60, "SuggestRouteRemovingStopsFromEVRoute_");
  qword_25F2C78 = (uint64_t)operator new(0x20uLL);
  unk_25F2C80 = v279;
  strcpy((char *)qword_25F2C78, "OfflineToOnlineNewRoute_");
  qword_25F2C90 = (uint64_t)operator new(0x40uLL);
  unk_25F2C98 = xmmword_20B98C0;
  strcpy((char *)qword_25F2C90, "SuggestDetourWithHigherArrivalSOCForInfeasibleUserRoute_");
  byte_25F2CBF = 20;
  strcpy(byte_25F2CA8, "LPR_OFFLINE_REROUTE_");
  byte_25F2CD7 = 16;
  strcpy((char *)&xmmword_25F2CC0, "LPR_OFFLINE_SAR_");
  byte_25F2CEF = 20;
  strcpy(byte_25F2CD8, "LPR_OFFLINE_REROUTE_");
  byte_25F2D07 = 16;
  strcpy((char *)&xmmword_25F2CF0, "LPR_OFFLINE_SAR_");
  byte_25F2D1F = 19;
  strcpy(byte_25F2D08, "SuggestFasterRoute_");
  qword_25F2D20 = (char *)operator new(0x20uLL);
  xmmword_25F2D28 = v278;
  strcpy(qword_25F2D20, "AreaIncidentSaferReroute_");
  byte_25F2D4F = 12;
  strcpy((char *)&qword_25F2D38, "_Remove_Stop");
  byte_25F2D67 = 13;
  strcpy((char *)&qword_25F2D50, "_Remove_Stops");
  strcpy(&byte_25F2D7F, "\t_Add_Stops");
  strcpy((char *)&qword_25F2D68, "_Add_Stop");
  strcpy(&byte_25F2D97, "\n_Change_Route");
  byte_25F2DAF = 13;
  byte_25F2DC7 = 15;
  strcpy((char *)&qword_25F2DB0, "_Different_Stop");
  byte_25F2DDF = 16;
  strcpy((char *)&xmmword_25F2DC8, "_Different_Stops");
  byte_25F2DF7 = 15;
  strcpy((char *)&qword_25F2DE0, "_EV_Remove_Stop");
  byte_25F2E0F = 16;
  strcpy((char *)&xmmword_25F2DF8, "_EV_Remove_Stops");
  byte_25F2E27 = 12;
  strcpy((char *)&qword_25F2E10, "_EV_Add_Stop");
  byte_25F2E3F = 13;
  strcpy((char *)&qword_25F2E28, "_EV_Add_Stops");
  byte_25F2E57 = 15;
  strcpy((char *)&qword_25F2E40, "_EV_Low_Battery");
  byte_25F2E6F = 14;
  strcpy((char *)&qword_25F2E58, "_EV_Infeasible");
  byte_25F2E87 = 15;
  strcpy((char *)&qword_25F2E70, "_EV_Last_Chance");
  qword_25F2E88 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25F2E90 = v279;
  strcpy((char *)qword_25F2E88, "_EV_Low_Battery_Add_Stop");
  uint64_t v188 = qword_25F2D88;
  qword_25F2EA0 = (uint64_t)operator new(0x20uLL);
  unk_25F2EA8 = v278;
  strcpy((char *)qword_25F2EA0, "_EV_Low_Battery_Add_Stops");
  qword_25F2EB8 = (uint64_t)operator new(0x19uLL);
  unk_25F2EC0 = v280;
  strcpy((char *)qword_25F2EB8, "_EV_Infeasible_Add_Stop");
  int v189 = byte_25F2D97;
  if (byte_25F2D97 >= 0) {
    size_t v190 = byte_25F2D97;
  }
  else {
    size_t v190 = v188;
  }
  unint64_t v191 = v190 + 14;
  if (v190 + 14 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v191 >= 0x17)
  {
    uint64_t v194 = (v191 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v191 | 7) != 0x17) {
      uint64_t v194 = v191 | 7;
    }
    uint64_t v195 = v194 + 1;
    long long v196 = (char *)operator new(v194 + 1);
    qword_25F2ED8 = v190 + 14;
    unk_25F2EE0 = v195 | 0x8000000000000000;
    qword_25F2ED0 = (uint64_t)v196;
    qmemcpy(v196, "_EV_Infeasible", 14);
    long long v192 = v196 + 14;
  }
  else
  {
    BYTE1(qword_25F2ED8) = 0;
    WORD1(qword_25F2ED8) = 0;
    HIDWORD(qword_25F2ED8) = 0;
    unk_25F2EE0 = 0;
    byte_25F2EE7 = v190 + 14;
    strcpy((char *)&qword_25F2ED0, "_EV_Infe");
    long long v192 = (char *)&qword_25F2ED8 + 6;
    if (!v190)
    {
      char v193 = 1;
      goto LABEL_425;
    }
  }
  if (v189 >= 0) {
    uint64_t v197 = (uint64_t)&qword_25F2D80;
  }
  else {
    uint64_t v197 = 0x6F74535F6464415FLL;
  }
  memmove(v192, (const void *)v197, v190);
  char v193 = 0;
LABEL_425:
  v192[v190] = 0;
  long long v198 = (char *)operator new(0x20uLL);
  qword_25F2EE8 = (uint64_t)v198;
  *(_OWORD *)algn_25F2EF0 = v279;
  *(void *)long long v198 = qword_25F2E70;
  *(void *)(v198 + 7) = *(uint64_t *)((char *)&qword_25F2E70 + 7);
  *(void *)(v198 + 15) = qword_25F2D68;
  v198[23] = word_25F2D70;
  v198[24] = 0;
  unint64_t v199 = v190 + 15;
  if (v190 + 15 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v199 > 0x16)
  {
    uint64_t v201 = (v199 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v199 | 7) != 0x17) {
      uint64_t v201 = v199 | 7;
    }
    uint64_t v202 = v201 + 1;
    long long v200 = (uint64_t *)operator new(v201 + 1);
    qword_25F2F08 = v190 + 15;
    unk_25F2F10 = v202 | 0x8000000000000000;
    qword_25F2F00 = (uint64_t)v200;
  }
  else
  {
    long long v200 = &qword_25F2F00;
    qword_25F2F08 = 0;
    unk_25F2F10 = 0;
    qword_25F2F00 = 0;
    byte_25F2F17 = v190 + 15;
  }
  *long long v200 = qword_25F2E70;
  *(uint64_t *)((char *)v200 + 7) = *(uint64_t *)((char *)&qword_25F2E70 + 7);
  long long v203 = (char *)v200 + 15;
  if ((v193 & 1) == 0)
  {
    if (v189 >= 0) {
      long long v204 = &qword_25F2D80;
    }
    else {
      long long v204 = (uint64_t *)qword_25F2D80;
    }
    memmove((char *)v200 + 15, v204, v190);
  }
  v203[v190] = 0;
  byte_25F2F2F = 17;
  strcpy((char *)&xmmword_25F2F18, "_EV_Forced_Detour");
  qword_25F2F30 = (uint64_t)operator new(0x20uLL);
  unk_25F2F38 = v278;
  strcpy((char *)qword_25F2F30, "_EV_Higher_Arrival_Charge");
  qword_25F2F48 = (uint64_t)operator new(0x28uLL);
  unk_25F2F50 = xmmword_20B8FD0;
  strcpy((char *)qword_25F2F48, "_EV_Infeasible_Higher_Arrival_Charge");
  byte_25F2F77 = 16;
  strcpy(byte_25F2F60, "_EV_Out_Of_Range");
  qword_25F2F78 = (uint64_t)operator new(0x20uLL);
  unk_25F2F80 = v273;
  strcpy((char *)qword_25F2F78, "_EV_Last_Chance_Take_Detour");
  strcpy(byte_25F2F90, "_EV_Forced_Modify_Stop");
  HIBYTE(word_25F2FA6) = 22;
  qword_25F2FA8 = (uint64_t)operator new(0x19uLL);
  unk_25F2FB0 = v280;
  strcpy((char *)qword_25F2FA8, "_EV_Forced_Modify_Stops");
  byte_25F2FD7 = 19;
  strcpy(byte_25F2FC0, "_EV_Forced_Add_Stop");
  byte_25F2FEF = 20;
  strcpy((char *)&xmmword_25F2FD8, "_EV_Forced_Add_Stops");
  byte_25F3007 = 21;
  strcpy(byte_25F2FF0, "_EV_Battery_Info_Lost");
  qword_25F3008 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25F3010 = v278;
  strcpy((char *)qword_25F3008, "_EV_Battery_Info_Restored");
  qword_25F3020 = (uint64_t)operator new(0x20uLL);
  unk_25F3028 = v279;
  strcpy((char *)qword_25F3020, "_EV_Towing_Not_Supported");
  qword_25F3038 = (uint64_t)operator new(0x28uLL);
  unk_25F3040 = v269;
  strcpy((char *)qword_25F3038, "_EV_Offline_to_Online_Transition");
  byte_25F3067 = 15;
  strcpy((char *)&qword_25F3050, "_EV_Offline_SAR");
  qword_25F3068 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25F3070 = v277;
  strcpy((char *)qword_25F3068, "_Offline_to_Online_New_Route");
  byte_25F3097 = 12;
  strcpy((char *)&qword_25F3080, "BannerButton");
  byte_25F30AF = 8;
  strcpy((char *)&qword_25F3098, "_Dismiss");
  byte_25F30C7 = 3;
  word_25F30B0 = 20319;
  byte_25F30B2 = 75;
  byte_25F30B3 = 0;
  byte_25F30DF = 11;
  strcpy((char *)&qword_25F30C8, "_Still_Here");
  byte_25F30F7 = 8;
  strcpy((char *)&qword_25F30E0, "_Cleared");
  qmemcpy(&byte_25F310F, "\nBannerButton", 13);
  strcpy((char *)&qword_25F30F8, "_No_Thanks");
  uint64_t v205 = qword_25F3088;
  qword_25F3120 = 0x1400000000000000;
  *(void *)algn_25F311C = 0x7373696D7369445FLL;
  qword_25F3138 = 0xF00000000000000;
  qword_25F3130 = 0x4B4F5F6E6F7474;
  int v206 = byte_25F2E27;
  if (byte_25F2E27 >= 0) {
    size_t v207 = byte_25F2E27;
  }
  else {
    size_t v207 = qword_25F2E18;
  }
  unint64_t v208 = v207 + 12;
  qword_25F3128 = *(void *)"BannerButton";
  if (v207 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v208 >= 0x17)
  {
    uint64_t v210 = (v208 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v208 | 7) != 0x17) {
      uint64_t v210 = v208 | 7;
    }
    uint64_t v211 = v210 + 1;
    long long v212 = (char *)operator new(v210 + 1);
    qword_25F3148 = v207 + 12;
    unk_25F3150 = v211 | 0x8000000000000000;
    qword_25F3140 = (uint64_t)v212;
    *((_DWORD *)v212 + 2) = 1852798068;
    *(void *)long long v212 = *(void *)"BannerButton";
    long long v209 = v212 + 12;
  }
  else
  {
    BYTE5(qword_25F3148) = 0;
    HIWORD(qword_25F3148) = 0;
    unk_25F3150 = 0;
    byte_25F3157 = v207 + 12;
    strcpy((char *)&qword_25F3140, "BannerButton");
    long long v209 = (char *)&qword_25F3148 + 4;
    if (!v207) {
      goto LABEL_450;
    }
  }
  if (v206 >= 0) {
    long long v213 = &qword_25F2E10;
  }
  else {
    long long v213 = (uint64_t *)qword_25F2E10;
  }
  memmove(v209, v213, v207);
LABEL_450:
  v209[v207] = 0;
  int v214 = byte_25F2E3F;
  if (byte_25F2E3F >= 0) {
    size_t v215 = byte_25F2E3F;
  }
  else {
    size_t v215 = unk_25F2E30;
  }
  unint64_t v216 = v215 + 12;
  if (v215 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v216 >= 0x17)
  {
    uint64_t v218 = (v216 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v216 | 7) != 0x17) {
      uint64_t v218 = v216 | 7;
    }
    uint64_t v219 = v218 + 1;
    uint64_t v220 = (char *)operator new(v218 + 1);
    qword_25F3160 = v215 + 12;
    unk_25F3168 = v219 | 0x8000000000000000;
    qword_25F3158 = (uint64_t)v220;
    *(void *)uint64_t v220 = qword_25F3080;
    *((_DWORD *)v220 + 2) = qword_25F3088;
    long long v217 = v220 + 12;
  }
  else
  {
    qword_25F3160 = 0;
    unk_25F3168 = 0;
    byte_25F316F = v215 + 12;
    LODWORD(qword_25F3160) = qword_25F3088;
    qword_25F3158 = qword_25F3080;
    long long v217 = (char *)&qword_25F3160 + 4;
    if (!v215) {
      goto LABEL_464;
    }
  }
  if (v214 >= 0) {
    char v221 = &qword_25F2E28;
  }
  else {
    char v221 = (uint64_t *)qword_25F2E28;
  }
  memmove(v217, v221, v215);
LABEL_464:
  v217[v215] = 0;
  int v222 = byte_25F2DF7;
  if (byte_25F2DF7 >= 0) {
    size_t v223 = byte_25F2DF7;
  }
  else {
    size_t v223 = unk_25F2DE8;
  }
  unint64_t v224 = v223 + 12;
  if (v223 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v224 >= 0x17)
  {
    uint64_t v226 = (v224 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v224 | 7) != 0x17) {
      uint64_t v226 = v224 | 7;
    }
    uint64_t v227 = v226 + 1;
    char v228 = (char *)operator new(v226 + 1);
    qword_25F3178 = v223 + 12;
    unk_25F3180 = v227 | 0x8000000000000000;
    qword_25F3170 = (uint64_t)v228;
    *(void *)char v228 = qword_25F3080;
    *((_DWORD *)v228 + 2) = qword_25F3088;
    long long v225 = v228 + 12;
  }
  else
  {
    qword_25F3178 = 0;
    unk_25F3180 = 0;
    byte_25F3187 = v223 + 12;
    LODWORD(qword_25F3178) = qword_25F3088;
    qword_25F3170 = qword_25F3080;
    long long v225 = (char *)&qword_25F3178 + 4;
    if (!v223) {
      goto LABEL_478;
    }
  }
  if (v222 >= 0) {
    uint64_t v229 = &qword_25F2DE0;
  }
  else {
    uint64_t v229 = (uint64_t *)qword_25F2DE0;
  }
  memmove(v225, v229, v223);
LABEL_478:
  v225[v223] = 0;
  int v230 = byte_25F3097;
  if (byte_25F3097 >= 0) {
    size_t v231 = byte_25F3097;
  }
  else {
    size_t v231 = v205;
  }
  int v232 = byte_25F2E0F;
  if (byte_25F2E0F >= 0) {
    size_t v233 = byte_25F2E0F;
  }
  else {
    size_t v233 = *((void *)&xmmword_25F2DF8 + 1);
  }
  unint64_t v234 = v233 + v231;
  if (v233 + v231 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v234 <= 0x16)
  {
    __int16 v235 = &qword_25F3188;
    qword_25F3190 = 0;
    unk_25F3198 = 0;
    qword_25F3188 = 0;
    byte_25F319F = v233 + v231;
    if (!v231) {
      goto LABEL_491;
    }
    goto LABEL_487;
  }
  uint64_t v242 = (v234 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v234 | 7) != 0x17) {
    uint64_t v242 = v234 | 7;
  }
  uint64_t v243 = v242 + 1;
  __int16 v235 = (uint64_t *)operator new(v242 + 1);
  qword_25F3190 = v233 + v231;
  unk_25F3198 = v243 | 0x8000000000000000;
  qword_25F3188 = (uint64_t)v235;
  if (v231)
  {
LABEL_487:
    if (v230 >= 0) {
      long long v236 = &qword_25F3080;
    }
    else {
      long long v236 = (uint64_t *)qword_25F3080;
    }
    memmove(v235, v236, v231);
  }
LABEL_491:
  long long v237 = (char *)v235 + v231;
  if (v233)
  {
    if (v232 >= 0) {
      long long v238 = &xmmword_25F2DF8;
    }
    else {
      long long v238 = (long long *)xmmword_25F2DF8;
    }
    memmove(v237, v238, v233);
  }
  v237[v233] = 0;
  unint64_t v239 = v231 + 11;
  if (v231 + 11 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v239 >= 0x17)
  {
    uint64_t v244 = (v239 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v239 | 7) != 0x17) {
      uint64_t v244 = v239 | 7;
    }
    uint64_t v245 = v244 + 1;
    long long v240 = (uint64_t *)operator new(v244 + 1);
    qword_25F31A8 = v231 + 11;
    unk_25F31B0 = v245 | 0x8000000000000000;
    qword_25F31A0 = (uint64_t)v240;
  }
  else
  {
    long long v240 = &qword_25F31A0;
    qword_25F31A8 = 0;
    unk_25F31B0 = 0;
    qword_25F31A0 = 0;
    byte_25F31B7 = v231 + 11;
    if (!v231)
    {
      *(_DWORD *)((char *)&qword_25F31A0 + 7) = *(_DWORD *)((char *)&qword_25F30C8 + 7);
      qword_25F31A0 = qword_25F30C8;
      BYTE3(qword_25F31A8) = 0;
      LOBYTE(v241) = 8;
      goto LABEL_512;
    }
  }
  if (v230 >= 0) {
    long long v246 = &qword_25F3080;
  }
  else {
    long long v246 = (uint64_t *)qword_25F3080;
  }
  memmove(v240, v246, v231);
  long long v247 = (char *)v240 + v231;
  int v248 = *(_DWORD *)((char *)&qword_25F30C8 + 7);
  *(void *)long long v247 = qword_25F30C8;
  *(_DWORD *)(v247 + 7) = v248;
  v247[11] = 0;
  unint64_t v241 = v231 + 8;
  if (v231 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v241 <= 0x16)
  {
LABEL_512:
    long long v249 = &qword_25F31B8;
    qword_25F31C0 = 0;
    unk_25F31C8 = 0;
    qword_25F31B8 = 0;
    byte_25F31CF = v241;
    if (!v231) {
      goto LABEL_517;
    }
    goto LABEL_513;
  }
  uint64_t v262 = (v241 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v241 | 7) != 0x17) {
    uint64_t v262 = v241 | 7;
  }
  uint64_t v263 = v262 + 1;
  long long v249 = (uint64_t *)operator new(v262 + 1);
  qword_25F31C0 = v231 + 8;
  unk_25F31C8 = v263 | 0x8000000000000000;
  qword_25F31B8 = (uint64_t)v249;
  if (v231)
  {
LABEL_513:
    if (v230 >= 0) {
      long long v250 = &qword_25F3080;
    }
    else {
      long long v250 = (uint64_t *)qword_25F3080;
    }
    memmove(v249, v250, v231);
  }
LABEL_517:
  uint64_t v251 = (char *)v249 + v231;
  *(void *)uint64_t v251 = qword_25F30E0;
  v251[8] = 0;
  int v252 = byte_25F310F;
  if (byte_25F310F >= 0) {
    size_t v253 = byte_25F310F;
  }
  else {
    size_t v253 = qword_25F3100;
  }
  unint64_t v254 = v253 + v231;
  if (v253 + v231 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v254 <= 0x16)
  {
    long long v255 = &qword_25F31D0;
    qword_25F31D8 = 0;
    unk_25F31E0 = 0;
    qword_25F31D0 = 0;
    byte_25F31E7 = v253 + v231;
    if (!v231) {
      goto LABEL_527;
    }
    goto LABEL_523;
  }
  uint64_t v260 = (v254 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v254 | 7) != 0x17) {
    uint64_t v260 = v254 | 7;
  }
  uint64_t v261 = v260 + 1;
  long long v255 = (uint64_t *)operator new(v260 + 1);
  qword_25F31D8 = v253 + v231;
  unk_25F31E0 = v261 | 0x8000000000000000;
  qword_25F31D0 = (uint64_t)v255;
  if (v231)
  {
LABEL_523:
    if (v230 >= 0) {
      long long v256 = &qword_25F3080;
    }
    else {
      long long v256 = (uint64_t *)qword_25F3080;
    }
    memmove(v255, v256, v231);
  }
LABEL_527:
  long long v257 = (char *)v255 + v231;
  if (v253)
  {
    if (v252 >= 0) {
      char v258 = &qword_25F30F8;
    }
    else {
      char v258 = (uint64_t *)qword_25F30F8;
    }
    memmove(v257, v258, v253);
  }
  v257[v253] = 0;
  strcpy(&byte_25F31FF, "\n{newroute}");
  strcpy((char *)&qword_25F31E8, "{roadname}");
  strcpy(&byte_25F3217, "\n{count}");
  byte_25F322F = 7;
  strcpy(&byte_25F3247, "\n{dur}");
  strcpy((char *)&qword_25F3230, "{duration}");
  byte_25F325F = 5;
  qword_25F3260 = (uint64_t)operator new(0x20uLL);
  unk_25F3268 = v276;
  strcpy((char *)qword_25F3260, "{PleaseProceedWithCaution}");
  byte_25F328F = 15;
  strcpy((char *)&qword_25F3278, "{UserRouteName}");
  byte_25F32A7 = 20;
  strcpy((char *)&xmmword_25F3290, "{SuggestedRouteName}");
  byte_25F32BF = 18;
  strcpy(byte_25F32A8, "Speed_Camera_Ahead");
  qword_25F32C0 = (uint64_t)operator new(0x20uLL);
  unk_25F32C8 = v275;
  strcpy((char *)qword_25F32C0, "Red_Light_Camera_Ahead_Spoken");
  qword_25F32D8 = (uint64_t)operator new(0x20uLL);
  unk_25F32E0 = v275;
  strcpy((char *)qword_25F32D8, "Stop_Sign_Camera_Ahead_Spoken");
  qword_25F32F0 = (uint64_t)operator new(0x28uLL);
  unk_25F32F8 = v270;
  strcpy((char *)qword_25F32F0, "Speed_Camera_Ahead_Multiple_Spoken");
  qword_25F3308 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25F3310 = v265;
  strcpy((char *)qword_25F3308, "Red_Light_Camera_Ahead_Multiple_Spoken");
  qword_25F3320 = (uint64_t)operator new(0x20uLL);
  unk_25F3328 = v277;
  strcpy((char *)qword_25F3320, "Camera_Ahead_Multiple_Spoken");
  qword_25F3338 = (uint64_t)operator new(0x30uLL);
  unk_25F3340 = v266;
  strcpy((char *)qword_25F3338, "Red_Light_Camera_Speed_Camera_Ahead_Spoken");
  qword_25F3350 = (char *)operator new(0x30uLL);
  strcpy(qword_25F3350, "Stop_Sign_Camera_Speed_Camera_Ahead_Spoken");
  byte_25F337F = 16;
  xmmword_25F3358 = v266;
  strcpy(byte_25F3368, "_Speed_Limit_Mph");
  byte_25F3397 = 16;
  strcpy(byte_25F3380, "_Speed_Limit_Kph");
  byte_25F33AF = 11;
  strcpy((char *)&qword_25F3398, "Watch_Speed");
  byte_25F33C7 = 4;
  strcpy((char *)&dword_25F33B0, "_One");
  byte_25F33DF = 4;
  strcpy((char *)&dword_25F33C8, "_Two");
  byte_25F33F7 = 4;
  strcpy((char *)&dword_25F33E0, "_Few");
  byte_25F340F = 5;
  strcpy((char *)&dword_25F33F8, "_Many");
  byte_25F3427 = 6;
  strcpy((char *)&dword_25F3410, "_Other");
  byte_25F343F = 4;
  strcpy((char *)&dword_25F3428, "_ONE");
  byte_25F3457 = 7;
  strcpy((char *)&dword_25F3440, "{Speed}");
  byte_25F346F = 8;
  strcpy((char *)&qword_25F3458, "Dismount");
  byte_25F3487 = 4;
  strcpy((char *)&dword_25F3470, "Walk");
  byte_25F349F = 5;
  strcpy((char *)&dword_25F3488, "Mount");
  byte_25F34B7 = 7;
  strcpy((char *)&dword_25F34A0, "Remount");
  strcpy(&byte_25F34CF, "\t_Crosswalk");
  strcpy((char *)&qword_25F34B8, "Walk_Road");
  strcpy(&byte_25F34E7, "\n_PLURAL");
  byte_25F34FF = 7;
  strcpy(&byte_25F3517, "\n{description1}");
  strcpy((char *)&qword_25F3500, "_SECONDARY");
  byte_25F352F = 14;
  byte_25F3547 = 14;
  strcpy((char *)&qword_25F3530, "{description2}");
  byte_25F355F = 21;
  strcpy((char *)&xmmword_25F3548, "TWO_ROAD_DESCRIPTIONS");
  byte_25F3577 = 17;
  strcpy((char *)&xmmword_25F3560, "{SlopePercentage}");
  byte_25F358F = 15;
  strcpy((char *)&qword_25F3578, "_Protected_Lane");
  strcpy(&byte_25F35A7, "\n_Paved_Path");
  strcpy((char *)&qword_25F3590, "_Bike_Path");
  byte_25F35BF = 11;
  byte_25F35D7 = 15;
  strcpy((char *)&qword_25F35C0, "_Dedicated_Lane");
  byte_25F35EF = 12;
  strcpy((char *)&qword_25F35D8, "_Shared_Path");
  strcpy(&byte_25F3607, "\n_UnnamedRoad");
  strcpy((char *)&qword_25F35F0, "_Bike_Lane");
  byte_25F361F = 12;
  byte_25F3637 = 5;
  strcpy((char *)&dword_25F3620, "_Path");
  byte_25F364F = 6;
  strcpy((char *)&dword_25F3638, "_Trail");
  strcpy(&byte_25F3667, "\t_Plaza");
  strcpy((char *)&qword_25F3650, "_Sidewalk");
  byte_25F367F = 6;
  byte_25F3697 = 15;
  strcpy((char *)&qword_25F3680, "_Moving_Walkway");
  byte_25F36AF = 14;
  strcpy((char *)&qword_25F3698, "Two_Stage_Turn");
  byte_25F36C7 = 16;
  strcpy((char *)&xmmword_25F36B0, "{OptionalPeriod}");
  byte_25F36DF = 18;
  strcpy((char *)&xmmword_25F36C8, "Advisory_Separator");
  byte_25F36F7 = 6;
  strcpy((char *)&dword_25F36E0, "Period");
  byte_25F370F = 21;
  strcpy((char *)&xmmword_25F36F8, "Advisory_Title_Notice");
  strcpy((char *)&xmmword_25F3710, "Advisory_Title_Notices");
  HIBYTE(word_25F3726) = 22;
  byte_25F373F = 7;
  strcpy((char *)&dword_25F3728, "_DETAIL");
  byte_25F3757 = 17;
  strcpy((char *)&xmmword_25F3740, "_LONG_REGION_LIST");
  byte_25F376F = 16;
  strcpy((char *)&xmmword_25F3758, "Advisory_Grouped");
  byte_25F3787 = 11;
  strcpy((char *)&qword_25F3770, "_Advisories");
  qword_25F3788 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25F3790 = v273;
  strcpy((char *)qword_25F3788, "Advisory_WILDFIRE_METADATA_");
  byte_25F37B7 = 8;
  strcpy((char *)&qword_25F37A0, "Advisory");
  byte_25F37CF = 13;
  strcpy((char *)&qword_25F37B8, "MPR_NUM_STOPS");
  byte_25F37E7 = 17;
  strcpy(algn_25F37D0, "EV_CHARGE_STATION");
  byte_25F37FF = 11;
  strcpy((char *)&qword_25F37E8, "_NAMED_CITY");
  byte_25F3817 = 5;
  strcpy((char *)&dword_25F3800, "_Stop");
  strcpy(&byte_25F382F, "\n{StopsCount}");
  strcpy((char *)&qword_25F3818, "{CityName}");
  byte_25F3847 = 12;
  byte_25F385F = 11;
  strcpy((char *)&qword_25F3848, "_With_Other");
  byte_25F3877 = 15;
  strcpy((char *)&qword_25F3860, "{DepartureTime}");
  qword_25F3878 = (uint64_t)operator new(0x28uLL);
  unk_25F3880 = v274;
  strcpy((char *)qword_25F3878, "Ending_Charge_Station_Port_Availability");
  qword_25F3890 = (uint64_t)operator new(0x28uLL);
  unk_25F3898 = v267;
  strcpy((char *)qword_25F3890, "Ending_Charge_Station_No_Availability");
  qword_25F38A8 = (uint64_t)operator new(0x28uLL);
  unk_25F38B0 = v270;
  strcpy((char *)qword_25F38A8, "Ending_Charge_Station_No_Real_Time");
  byte_25F38D7 = 16;
  strcpy(byte_25F38C0, "{AvailablePorts}");
  byte_25F38EF = 12;
  strcpy((char *)&qword_25F38D8, "{TotalPorts}");
  byte_25F3907 = 14;
  strcpy((char *)&qword_25F38F0, "{ManeuverIcon}");
  qword_25F3908 = (uint64_t)operator new(0x38uLL);
  *(_OWORD *)algn_25F3910 = xmmword_20B9A60;
  strcpy((char *)qword_25F3908, "Walking_Distance_ManeuverIcon_PrimaryInstruction");
  qword_25F3920 = (uint64_t)operator new(0x20uLL);
  unk_25F3928 = v273;
  strcpy((char *)qword_25F3920, "Walking_Destination_Unnamed");
  qword_25F3938 = (uint64_t)operator new(0x20uLL);
  unk_25F3940 = v275;
  strcpy((char *)qword_25F3938, "TrafficDelay_Label_Title_Sign");
  qword_25F3950 = (uint64_t)operator new(0x20uLL);
  unk_25F3958 = v277;
  strcpy((char *)qword_25F3950, "Special_Guidance_Instruction");
  byte_25F397F = 2;
  strcpy((char *)&word_25F3968, "CZ");
  byte_25F3997 = 3;
  dword_25F3980 = 5919811;
  unk_25F39AF = 3;
  dword_25F3998 = 6243649;
  byte_25F39C7 = 0;
  byte_25F39DF = 7;
  strcpy((char *)&dword_25F39C8, "TRANSIT");
  byte_25F39F7 = 7;
  strcpy((char *)&dword_25F39E0, "OFFLINE");
  qword_25F39F8 = (uint64_t)operator new(0x28uLL);
  unk_25F3A00 = v265;
  strcpy((char *)qword_25F39F8, "Advisory_Card_French_Climate_Law_Title");
  qword_25F3A10 = (uint64_t)operator new(0x30uLL);
  unk_25F3A18 = xmmword_20B93C0;
  strcpy((char *)qword_25F3A10, "Advisory_Card_French_Climate_Law_Details");
  qword_25F3A28 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_25F3A30 = v271;
  strcpy((char *)qword_25F3A28, "French_Climate_Law_Metadata_Weblink_Title");
  qword_25F3A40 = (uint64_t)operator new(0x20uLL);
  unk_25F3A48 = v277;
  strcpy((char *)qword_25F3A40, "{ClimateLawLearnMoreWeblink}");
  byte_25F3A6F = 3;
  dword_25F3A58 = 4280902;
  qword_25F3A70 = (uint64_t)operator new(0x70uLL);
  unk_25F3A78 = xmmword_20E81E0;
  strcpy((char *)qword_25F3A70, "https://www.vie-publique.fr/loi/278460-loi-22-aout-2021-climat-et-resilience-convention-citoyenne-climat");
  return *(double *)"ut-2021-climat-et-resilience-convention-citoyenne-climat";
}

void sub_E10BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x3B7]) < 0)
  {
    operator delete((void *)STACK[0x3A0]);
    if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0)
  {
LABEL_3:
    if (SLOBYTE(STACK[0x387]) < 0) {
      goto LABEL_4;
    }
    goto LABEL_18;
  }
  operator delete((void *)STACK[0x388]);
  if (SLOBYTE(STACK[0x387]) < 0)
  {
LABEL_4:
    operator delete((void *)STACK[0x370]);
    if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0)
  {
LABEL_5:
    if (SLOBYTE(STACK[0x357]) < 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete((void *)STACK[0x358]);
  if (SLOBYTE(STACK[0x357]) < 0)
  {
LABEL_6:
    operator delete((void *)STACK[0x340]);
    if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0)
  {
LABEL_7:
    if (SLOBYTE(STACK[0x327]) < 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete((void *)STACK[0x328]);
  if (SLOBYTE(STACK[0x327]) < 0)
  {
LABEL_8:
    operator delete((void *)STACK[0x310]);
    if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0)
  {
LABEL_9:
    if (SLOBYTE(STACK[0x2F7]) < 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete((void *)STACK[0x2F8]);
  if (SLOBYTE(STACK[0x2F7]) < 0)
  {
LABEL_10:
    operator delete((void *)STACK[0x2E0]);
    if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0)
  {
LABEL_11:
    if (SLOBYTE(STACK[0x2C7]) < 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete((void *)STACK[0x2C8]);
  if (SLOBYTE(STACK[0x2C7]) < 0)
  {
LABEL_12:
    operator delete((void *)STACK[0x2B0]);
    if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0)
  {
LABEL_13:
    if (SLOBYTE(STACK[0x297]) < 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete((void *)STACK[0x298]);
  if (SLOBYTE(STACK[0x297]) < 0)
  {
LABEL_14:
    operator delete((void *)STACK[0x280]);
    if (SLOBYTE(STACK[0x27F]) < 0)
    {
LABEL_37:
      operator delete((void *)STACK[0x268]);
      if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0)
      {
LABEL_38:
        if (SLOBYTE(STACK[0x24F]) < 0)
        {
LABEL_39:
          operator delete((void *)STACK[0x238]);
          if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0)
          {
LABEL_40:
            if (SLOBYTE(STACK[0x21F]) < 0)
            {
LABEL_41:
              operator delete((void *)STACK[0x208]);
              if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0)
              {
LABEL_42:
                if (a72 < 0)
                {
LABEL_43:
                  operator delete(a71);
                  if (a70 < 0)
                  {
LABEL_44:
                    operator delete(a65);
                    _Unwind_Resume(a1);
                  }
LABEL_45:
                  _Unwind_Resume(a1);
                }
LABEL_35:
                if (a70 < 0) {
                  goto LABEL_44;
                }
                goto LABEL_45;
              }
LABEL_34:
              operator delete(a73);
              if (a72 < 0) {
                goto LABEL_43;
              }
              goto LABEL_35;
            }
LABEL_33:
            if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0) {
              goto LABEL_42;
            }
            goto LABEL_34;
          }
LABEL_32:
          operator delete((void *)STACK[0x220]);
          if (SLOBYTE(STACK[0x21F]) < 0) {
            goto LABEL_41;
          }
          goto LABEL_33;
        }
LABEL_31:
        if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0) {
          goto LABEL_40;
        }
        goto LABEL_32;
      }
LABEL_30:
      operator delete((void *)STACK[0x250]);
      if (SLOBYTE(STACK[0x24F]) < 0) {
        goto LABEL_39;
      }
      goto LABEL_31;
    }
LABEL_29:
    if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_30;
  }
LABEL_28:
  if (SLOBYTE(STACK[0x27F]) < 0) {
    goto LABEL_37;
  }
  goto LABEL_29;
}

void sub_E10E84(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 == v4)
  {
    uint64_t v6 = *(unsigned int *)(a2 + 144);
    if (v6 == *(_DWORD *)(a2 + 148))
    {
      int v7 = v6 + 1;
      sub_188C80C((unsigned int *)(a2 + 144), v6 + 1);
      *(_DWORD *)(*(void *)(a2 + 152) + 4 * v6) = 4;
      uint64_t v8 = (unsigned int *)(a2 + 168);
      uint64_t v9 = *(unsigned int *)(a2 + 168);
      *(_DWORD *)(a2 + 144) = v7;
      if (v9 != *(_DWORD *)(a2 + 172)) {
        goto LABEL_4;
      }
    }
    else
    {
      *(_DWORD *)(*(void *)(a2 + 152) + 4 * v6) = 4;
      int v10 = v6 + 1;
      uint64_t v8 = (unsigned int *)(a2 + 168);
      uint64_t v9 = *(unsigned int *)(a2 + 168);
      *(_DWORD *)(a2 + 144) = v10;
      if (v9 != *(_DWORD *)(a2 + 172))
      {
LABEL_4:
        *(_DWORD *)(*(void *)(a2 + 176) + 4 * v9) = 0;
        unsigned int *v8 = v9 + 1;
        uint64_t v3 = *a1;
        uint64_t v4 = a1[1];
        if (*a1 == v4) {
          return;
        }
        goto LABEL_8;
      }
    }
    sub_188C80C(v8, v9 + 1);
    *(_DWORD *)(*(void *)(a2 + 176) + 4 * v9) = 0;
    unsigned int *v8 = v9 + 1;
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    if (*a1 == v4) {
      return;
    }
  }
LABEL_8:
  uint64_t v11 = (_DWORD *)(a2 + 168);
  do
  {
    while (1)
    {
      int v12 = (*(_DWORD *)(v3 + 16) - 1) >= 4 ? 4 : *(_DWORD *)(v3 + 16) - 1;
      uint64_t v13 = *(unsigned int *)(a2 + 144);
      if (v13 == *(_DWORD *)(a2 + 148))
      {
        int v14 = v13 + 1;
        sub_188C80C((unsigned int *)(a2 + 144), v13 + 1);
        *(_DWORD *)(*(void *)(a2 + 152) + 4 * v13) = v12;
      }
      else
      {
        *(_DWORD *)(*(void *)(a2 + 152) + 4 * v13) = v12;
        int v14 = v13 + 1;
      }
      *(_DWORD *)(a2 + 144) = v14;
      __int16 v15 = *(uint64_t *)v3 < 0 ? -50 : 50;
      unsigned int v16 = (int)*(void *)v3 / 100
          + ((5243 * (__int16)(v15 + (int)*(void *)v3 % 100)) >> 19)
          + ((5243 * (__int16)(v15 + (int)*(void *)v3 % 100)) >> 31);
      uint64_t v17 = *(unsigned int *)(a2 + 168);
      if (v17 == *(_DWORD *)(a2 + 172)) {
        break;
      }
      *(_DWORD *)(*(void *)(a2 + 176) + 4 * v17) = v16;
      _DWORD *v11 = v17 + 1;
      v3 += 24;
      if (v3 == v4) {
        return;
      }
    }
    sub_188C80C((unsigned int *)(a2 + 168), v17 + 1);
    *(_DWORD *)(*(void *)(a2 + 176) + 4 * v17) = v16;
    _DWORD *v11 = v17 + 1;
    v3 += 24;
  }
  while (v3 != v4);
}

void sub_E110A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 == v4)
  {
    uint64_t v6 = *(unsigned int *)(a2 + 152);
    if (v6 == *(_DWORD *)(a2 + 156))
    {
      int v7 = v6 + 1;
      sub_188C80C((unsigned int *)(a2 + 152), v6 + 1);
      *(_DWORD *)(*(void *)(a2 + 160) + 4 * v6) = 4;
      uint64_t v8 = (unsigned int *)(a2 + 176);
      uint64_t v9 = *(unsigned int *)(a2 + 176);
      *(_DWORD *)(a2 + 152) = v7;
      if (v9 != *(_DWORD *)(a2 + 180)) {
        goto LABEL_4;
      }
    }
    else
    {
      *(_DWORD *)(*(void *)(a2 + 160) + 4 * v6) = 4;
      int v10 = v6 + 1;
      uint64_t v8 = (unsigned int *)(a2 + 176);
      uint64_t v9 = *(unsigned int *)(a2 + 176);
      *(_DWORD *)(a2 + 152) = v10;
      if (v9 != *(_DWORD *)(a2 + 180))
      {
LABEL_4:
        *(_DWORD *)(*(void *)(a2 + 184) + 4 * v9) = 0;
        unsigned int *v8 = v9 + 1;
        uint64_t v3 = *a1;
        uint64_t v4 = a1[1];
        if (*a1 == v4) {
          return;
        }
        goto LABEL_8;
      }
    }
    sub_188C80C(v8, v9 + 1);
    *(_DWORD *)(*(void *)(a2 + 184) + 4 * v9) = 0;
    unsigned int *v8 = v9 + 1;
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    if (*a1 == v4) {
      return;
    }
  }
LABEL_8:
  uint64_t v11 = (_DWORD *)(a2 + 176);
  do
  {
    while (1)
    {
      int v12 = (*(_DWORD *)(v3 + 16) - 1) >= 4 ? 4 : *(_DWORD *)(v3 + 16) - 1;
      uint64_t v13 = *(unsigned int *)(a2 + 152);
      if (v13 == *(_DWORD *)(a2 + 156))
      {
        int v14 = v13 + 1;
        sub_188C80C((unsigned int *)(a2 + 152), v13 + 1);
        *(_DWORD *)(*(void *)(a2 + 160) + 4 * v13) = v12;
      }
      else
      {
        *(_DWORD *)(*(void *)(a2 + 160) + 4 * v13) = v12;
        int v14 = v13 + 1;
      }
      *(_DWORD *)(a2 + 152) = v14;
      __int16 v15 = *(uint64_t *)v3 < 0 ? -50 : 50;
      unsigned int v16 = (int)*(void *)v3 / 100
          + ((5243 * (__int16)(v15 + (int)*(void *)v3 % 100)) >> 19)
          + ((5243 * (__int16)(v15 + (int)*(void *)v3 % 100)) >> 31);
      uint64_t v17 = *(unsigned int *)(a2 + 176);
      if (v17 == *(_DWORD *)(a2 + 180)) {
        break;
      }
      *(_DWORD *)(*(void *)(a2 + 184) + 4 * v17) = v16;
      _DWORD *v11 = v17 + 1;
      v3 += 24;
      if (v3 == v4) {
        return;
      }
    }
    sub_188C80C((unsigned int *)(a2 + 176), v17 + 1);
    *(_DWORD *)(*(void *)(a2 + 184) + 4 * v17) = v16;
    _DWORD *v11 = v17 + 1;
    v3 += 24;
  }
  while (v3 != v4);
}

long double sub_E112BC(_DWORD *a1, uint64_t a2, double a3)
{
  LODWORD(a3) = a1[1];
  long double v5 = exp((double)*(unint64_t *)&a3 * -6.28318531 / 4294967300.0 + 3.14159265);
  long double v6 = atan((v5 + -1.0 / v5) * 0.5);
  HIDWORD(v7) = 1078765020;
  long double result = v6 * 57.2957795;
  int v9 = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = v9 | 1;
  LODWORD(v7) = *a1;
  *(_DWORD *)(a2 + 40) = v9 | 3;
  *(long double *)(a2 + 48) = result;
  *(double *)(a2 + 56) = (double)v7 * 360.0 / 4294967300.0 + -180.0;
  return result;
}

void sub_E11384(_DWORD *a1, uint64_t a2, double a3)
{
  LODWORD(a3) = a1[1];
  long double v5 = exp((double)*(unint64_t *)&a3 * -6.28318531 / 4294967300.0 + 3.14159265);
  long double v6 = atan((v5 + -1.0 / v5) * 0.5);
  HIDWORD(v7) = 1078765020;
  int v8 = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = v8 | 1;
  LODWORD(v7) = *a1;
  *(_DWORD *)(a2 + 40) = v8 | 3;
  *(long double *)(a2 + 48) = v6 * 57.2957795;
  *(double *)(a2 + 56) = (double)v7 * 360.0 / 4294967300.0 + -180.0;
  int v9 = a1[2];
  if (v9 != 0x7FFFFFFF)
  {
    *(_DWORD *)(a2 + 40) = v8 | 7;
    *(double *)(a2 + 64) = (double)v9 / 100.0;
  }
}

uint64_t sub_E11478(uint64_t result)
{
  long double result = result;
  switch((char)result)
  {
    case 0:
      return result;
    case 1:
      long double result = 1;
      break;
    case 3:
      long double result = 3;
      break;
    case 6:
      long double result = 6;
      break;
    case 12:
      long double result = 12;
      break;
    case 14:
      long double result = 14;
      break;
    case 15:
      long double result = 15;
      break;
    case 18:
      long double result = 18;
      break;
    case 23:
      long double result = 23;
      break;
    case 79:
      long double result = 79;
      break;
    default:
      long double result = 64;
      break;
  }
  return result;
}

uint64_t **sub_E1163C(uint64_t a1, uint64_t a2, int a3, double a4)
{
  if (*(_DWORD *)(a1 + 28) != -1 || *(_DWORD *)(a1 + 32) != -1)
  {
    *(_DWORD *)(a2 + 40) |= 0x10u;
    uint64_t v8 = *(void *)(a2 + 104);
    if (!v8)
    {
      uint64_t v9 = *(void *)(a2 + 8);
      int v10 = (void *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
      if (v9) {
        int v10 = (void *)*v10;
      }
      uint64_t v8 = sub_15C1918((uint64_t)v10);
      *(void *)(a2 + 104) = v8;
    }
    LODWORD(a4) = *(_DWORD *)(a1 + 32);
    long double v11 = exp((double)*(unint64_t *)&a4 * -6.28318531 / 4294967300.0 + 3.14159265);
    long double v12 = atan((v11 + -1.0 / v11) * 0.5) * 57.2957795;
    int v13 = *(_DWORD *)(v8 + 40);
    *(_DWORD *)(v8 + 40) = v13 | 1;
    *(long double *)(v8 + 48) = v12;
    LODWORD(v12) = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(v8 + 40) = v13 | 3;
    *(double *)(v8 + 56) = (double)*(unint64_t *)&v12 * 360.0 / 4294967300.0 + -180.0;
  }
  *(_DWORD *)(a2 + 40) |= 1u;
  uint64_t v14 = *(void *)(a2 + 8);
  __int16 v15 = (uint64_t *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
  if (v14) {
    __int16 v15 = (uint64_t *)*v15;
  }
  sub_1881DF4((std::string **)(a2 + 72), (long long *)(a1 + 40), v15);
  unsigned int v16 = (long long *)(a1 + 440);
  *(_DWORD *)(a2 + 40) |= 2u;
  uint64_t v17 = (std::string **)(a2 + 80);
  uint64_t v18 = *(void *)(a2 + 8);
  uint64_t v19 = (uint64_t **)(v18 & 0xFFFFFFFFFFFFFFFCLL);
  if (v18)
  {
    sub_1881DF4(v17, v16, *v19);
    uint64_t v20 = *(int *)(a1 + 88);
    if (v20 <= 0xE) {
      goto LABEL_14;
    }
  }
  else
  {
    sub_1881DF4(v17, v16, (uint64_t *)v19);
    uint64_t v20 = *(int *)(a1 + 88);
    if (v20 <= 0xE)
    {
LABEL_14:
      int v21 = dword_20F0780[v20];
      goto LABEL_17;
    }
  }
  int v21 = 3;
LABEL_17:
  int v22 = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 136) = v21;
  *(_DWORD *)(a2 + 40) = v22 | 0x104;
  uint64_t v23 = *(void *)(a2 + 8);
  size_t v24 = (uint64_t *)(v23 & 0xFFFFFFFFFFFFFFFCLL);
  if (v23) {
    size_t v24 = (uint64_t *)*v24;
  }
  sub_1881DF4((std::string **)(a2 + 88), (long long *)(a1 + 96), v24);
  *(_DWORD *)(a2 + 40) |= 8u;
  uint64_t v25 = *(void *)(a2 + 8);
  unint64_t v26 = (uint64_t *)(v25 & 0xFFFFFFFFFFFFFFFCLL);
  if (v25) {
    unint64_t v26 = (uint64_t *)*v26;
  }
  sub_1881DF4((std::string **)(a2 + 96), (long long *)(a1 + 120), v26);
  uint64_t v27 = 1000 * *(int *)(a1 + 144);
  int v28 = *(_DWORD *)(a2 + 40);
  int v29 = v28 | 0x80;
  *(_DWORD *)(a2 + 40) = v28 | 0x80;
  *(void *)(a2 + 128) = v27;
  int v30 = *(_DWORD *)(a1 + 148);
  if (v30 != 0x7FFFFFFF)
  {
    int v29 = v28 | 0x480;
    *(_DWORD *)(a2 + 40) = v28 | 0x480;
    *(void *)(a2 + 144) = 1000 * v30;
  }
  int v31 = *(_DWORD *)(a1 + 152);
  if (v31 && v31 != 0x7FFFFFFF)
  {
    v29 |= 0x800u;
    *(_DWORD *)(a2 + 40) = v29;
    *(void *)(a2 + 152) = 1000 * v31;
  }
  *(_DWORD *)(a2 + 176) = *(unsigned __int8 *)(a1 + 156);
  *(_DWORD *)(a2 + 140) = *(unsigned __int8 *)(a1 + 157);
  char v32 = *(unsigned char *)(a1 + 158);
  *(_DWORD *)(a2 + 40) = v29 | 0x11200;
  *(unsigned char *)(a2 + 160) = v32;
  int v33 = *(_DWORD *)(a1 + 160);
  if (v33)
  {
    *(_DWORD *)(a2 + 40) = v29 | 0x15200;
    *(_DWORD *)(a2 + 168) = v33;
  }
  int v34 = *(long long **)(a1 + 192);
  unint64_t v35 = *(long long **)(a1 + 200);
  if (v34 != v35)
  {
    uint64_t v36 = (uint64_t **)(a2 + 48);
    do
    {
      if (*((char *)v34 + 23) < 0)
      {
        sub_4200(&__p, *(void **)v34, *((void *)v34 + 1));
      }
      else
      {
        long long v37 = *v34;
        __p.__r_.__value_.__r.__words[2] = *((void *)v34 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v37;
      }
      long long v38 = *(_DWORD **)(a2 + 64);
      if (v38 && (uint64_t v39 = *(int *)(a2 + 56), (int)v39 < *v38))
      {
        *(_DWORD *)(a2 + 56) = v39 + 1;
        uint64_t v40 = *(std::string **)&v38[2 * v39 + 2];
      }
      else
      {
        if (!*v36) {
          operator new();
        }
        *int v42 = v41;
        v42[1] = sub_3A6EDC;
        *double v41 = 0;
        v41[1] = 0;
        v41[2] = 0;
        uint64_t v40 = (std::string *)sub_188CDC8(a2 + 48, (uint64_t)v41);
      }
      std::string::operator=(v40, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      int v34 = (long long *)((char *)v34 + 24);
    }
    while (v34 != v35);
  }
  BOOL v43 = sub_605634(a1);
  *(_DWORD *)(a2 + 40) |= 0x20000u;
  *(unsigned char *)(a2 + 180) = v43;
  if (a3)
  {
    sub_E11B94(a1, (uint64_t)&__p);
    if (v54 == 1)
    {
      if (*(_OWORD *)&__p.__r_.__value_.__l.__data_ == __PAIR128__(__p.__r_.__value_.__r.__words[2], -1)) {
        goto LABEL_53;
      }
    }
    else if (v54 || LODWORD(__p.__r_.__value_.__l.__data_) == -1)
    {
      goto LABEL_53;
    }
    *(_DWORD *)(a2 + 40) |= 0x40u;
    uint64_t v45 = *(void *)(a2 + 120);
    if (!v45)
    {
      uint64_t v46 = *(void *)(a2 + 8);
      uint64_t v47 = (void *)(v46 & 0xFFFFFFFFFFFFFFFCLL);
      if (v46) {
        uint64_t v47 = (void *)*v47;
      }
      uint64_t v45 = sub_13DAB08((uint64_t)v47);
      *(void *)(a2 + 120) = v45;
    }
    sub_523A2C((uint64_t)&__p, v45, v44);
LABEL_53:
    if (v58 < 0)
    {
      operator delete(v57);
      if ((v56 & 0x80000000) == 0)
      {
LABEL_55:
        int v48 = v54;
        if (v54 != 1) {
          goto LABEL_56;
        }
        goto LABEL_61;
      }
    }
    else if ((v56 & 0x80000000) == 0)
    {
      goto LABEL_55;
    }
    operator delete(v55);
    int v48 = v54;
    if (v54 != 1)
    {
LABEL_56:
      if (v48 || (v53 & 0x80000000) == 0) {
        goto LABEL_64;
      }
      std::string::size_type size = (void *)__p.__r_.__value_.__l.__size_;
LABEL_63:
      operator delete(size);
      goto LABEL_64;
    }
LABEL_61:
    std::string::size_type size = (void *)__p.__r_.__value_.__l.__size_;
    if (!__p.__r_.__value_.__l.__size_) {
      goto LABEL_64;
    }
    __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
    goto LABEL_63;
  }
LABEL_64:
  if (((*(unsigned char *)(a1 + 216) - 1) & 0xFC) != 0) {
    int v50 = 0;
  }
  else {
    int v50 = (*(unsigned char *)(a1 + 216) - 1) + 1;
  }
  return sub_1883378(a2 + 16, qword_254EA90, 14, v50, 0);
}

void sub_E11B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_E11B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_E11B94(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!sub_605454(a1)) {
    goto LABEL_7;
  }
  if (!*(unsigned char *)(a1 + 1112))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  int v4 = *(_DWORD *)(a1 + 736);
  if ((v4 - 1) < 0x13)
  {
    uint64_t v5 = (v4 + 19);
    uint64_t v6 = a2;
  }
  else
  {
LABEL_7:
    uint64_t v7 = *(int *)(a1 + 88);
    if (v7 >= 0xF)
    {
      uint64_t v5 = 4;
      uint64_t v6 = a2;
    }
    else
    {
      uint64_t v5 = dword_20F07BC[v7];
      uint64_t v6 = a2;
    }
  }
  sub_524F7C(v5, v6);
}

void sub_E11C8C(uint64_t a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a3 + 16);
  if (*(_DWORD *)(a1 + 492) != 1)
  {
    *(_DWORD *)(a3 + 16) = v5 | 1;
    uint64_t v6 = *(void *)(a3 + 112);
    if (v6) {
      goto LABEL_3;
    }
    goto LABEL_6;
  }
  *(_DWORD *)(a3 + 140) = 1;
  *(_DWORD *)(a3 + 16) = v5 | 0x11;
  uint64_t v6 = *(void *)(a3 + 112);
  if (!v6)
  {
LABEL_6:
    uint64_t v9 = *(void *)(a3 + 8);
    int v10 = (void *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
    if (v9) {
      int v10 = (void *)*v10;
    }
    sub_13D6A1C((uint64_t)v10);
    *(void *)(a3 + 112) = v11;
    sub_5F4D30((const std::string **)a1, v11);
    uint64_t v7 = *(void *)(a1 + 168);
    uint64_t v8 = *(void *)(a1 + 176);
    if (v7 == v8) {
      goto LABEL_89;
    }
    while (1)
    {
LABEL_11:
      int v12 = *(_DWORD *)(v7 + 768);
      if (v12 == -1) {
        goto LABEL_10;
      }
      int v13 = *(_DWORD **)(a3 + 80);
      if (v13 && (uint64_t v14 = *(int *)(a3 + 72), (int)v14 < *v13))
      {
        *(_DWORD *)(a3 + 72) = v14 + 1;
        uint64_t v15 = *(void *)&v13[2 * v14 + 2];
        if (!v12) {
          goto LABEL_15;
        }
      }
      else
      {
        uint64_t v18 = sub_13D8824(*(void *)(a3 + 64));
        uint64_t v15 = sub_188CDC8(a3 + 64, v18);
        int v12 = *(_DWORD *)(v7 + 768);
        if (!v12)
        {
LABEL_15:
          unsigned int v16 = sub_5258EC(a2, v7);
          if (!v16) {
            sub_5AE8("unordered_map::at: key not found");
          }
          int v17 = *((_DWORD *)v16 + 10);
          *(_DWORD *)(v15 + 16) |= 2u;
          *(_DWORD *)(v15 + 56) = v17;
          goto LABEL_75;
        }
      }
      if (v12 == 2)
      {
        int v21 = *(const std::string **)v7;
        *(_DWORD *)(v15 + 16) |= 4u;
        *(_DWORD *)(v15 + 60) = v21;
        goto LABEL_75;
      }
      if (v12 != 1) {
        goto LABEL_75;
      }
      *(_DWORD *)(v15 + 16) |= 1u;
      uint64_t v19 = *(void *)(v15 + 48);
      if (v19) {
        break;
      }
      uint64_t v22 = *(void *)(v15 + 8);
      uint64_t v23 = (void *)(v22 & 0xFFFFFFFFFFFFFFFCLL);
      if (v22) {
        uint64_t v23 = (void *)*v23;
      }
      sub_13D87A0((uint64_t)v23);
      uint64_t v19 = v24;
      *(void *)(v15 + 48) = v24;
      *(_DWORD *)(v24 + 16) |= 1u;
      uint64_t v20 = *(void *)(v24 + 24);
      if (!v20) {
        goto LABEL_27;
      }
LABEL_30:
      sub_5F4D30((const std::string **)v7, v20);
      *(_DWORD *)(v19 + 16) |= 2u;
      uint64_t v28 = *(void *)(v19 + 32);
      if (v28)
      {
        sub_5F4D30((const std::string **)(v7 + 160), v28);
        int v30 = (_DWORD *)(v7 + 320);
        int v31 = *(_DWORD *)(v7 + 352);
        if (v31 == 1) {
          goto LABEL_38;
        }
      }
      else
      {
        uint64_t v32 = *(void *)(v19 + 8);
        int v33 = (void *)(v32 & 0xFFFFFFFFFFFFFFFCLL);
        if (v32) {
          int v33 = (void *)*v33;
        }
        sub_13D6A1C((uint64_t)v33);
        *(void *)(v19 + 32) = v34;
        sub_5F4D30((const std::string **)(v7 + 160), v34);
        int v30 = (_DWORD *)(v7 + 320);
        int v31 = *(_DWORD *)(v7 + 352);
        if (v31 == 1)
        {
LABEL_38:
          if (*(_DWORD *)(v7 + 324) == -1 && *v30 == -1 && *(void *)(v7 + 328) == *(void *)(v7 + 336)) {
            goto LABEL_46;
          }
          goto LABEL_41;
        }
      }
      if (v31 || *v30 == -1) {
        goto LABEL_46;
      }
LABEL_41:
      *(_DWORD *)(v19 + 16) |= 4u;
      uint64_t v35 = *(void *)(v19 + 40);
      if (!v35)
      {
        uint64_t v36 = *(void *)(v19 + 8);
        long long v37 = (void *)(v36 & 0xFFFFFFFFFFFFFFFCLL);
        if (v36) {
          long long v37 = (void *)*v37;
        }
        uint64_t v35 = sub_13DAB08((uint64_t)v37);
        *(void *)(v19 + 40) = v35;
      }
      sub_523A2C((uint64_t)v30, v35, v29);
LABEL_46:
      if (sub_45FB38((void *)(v7 + 432)))
      {
        long long v38 = (const std::string **)(v7 + 592);
        if (sub_45FB38((void *)(v7 + 592))) {
          goto LABEL_48;
        }
      }
      else
      {
        *(_DWORD *)(v19 + 16) |= 8u;
        uint64_t v40 = *(void *)(v19 + 48);
        if (!v40)
        {
          uint64_t v41 = *(void *)(v19 + 8);
          int v42 = (void *)(v41 & 0xFFFFFFFFFFFFFFFCLL);
          if (v41) {
            int v42 = (void *)*v42;
          }
          sub_13D6A1C((uint64_t)v42);
          uint64_t v40 = v43;
          *(void *)(v19 + 48) = v43;
        }
        sub_5F4D30((const std::string **)(v7 + 432), v40);
        long long v38 = (const std::string **)(v7 + 592);
        if (sub_45FB38((void *)(v7 + 592)))
        {
LABEL_48:
          if (*(_DWORD *)(v7 + 752) != 1) {
            goto LABEL_75;
          }
LABEL_61:
          if (*(_DWORD *)(v7 + 756) != -1 || *(_DWORD *)(v7 + 760) != -1)
          {
            *(_DWORD *)(v19 + 16) |= 0x20u;
            uint64_t v48 = *(void *)(v19 + 64);
            if (v48)
            {
              int v49 = 1;
            }
            else
            {
              uint64_t v50 = *(void *)(v19 + 8);
              int v51 = (void *)(v50 & 0xFFFFFFFFFFFFFFFCLL);
              if (v50) {
                int v51 = (void *)*v51;
              }
              uint64_t v48 = sub_13D8724((uint64_t)v51);
              *(void *)(v19 + 64) = v48;
              int v49 = *(_DWORD *)(v7 + 752);
            }
            BOOL v52 = v49 == 1;
            int v53 = *(_DWORD *)(v48 + 16);
            *(_DWORD *)(v48 + 16) = v53 | 2;
            *(_DWORD *)(v48 + 32) = v52;
            if (*(_DWORD *)(v7 + 756) != -1 || *(_DWORD *)(v7 + 760) != -1)
            {
              *(_DWORD *)(v48 + 16) = v53 | 3;
              uint64_t v54 = *(void *)(v48 + 24);
              if (!v54)
              {
                uint64_t v55 = *(void *)(v48 + 8);
                char v56 = (void *)(v55 & 0xFFFFFFFFFFFFFFFCLL);
                if (v55) {
                  char v56 = (void *)*v56;
                }
                uint64_t v54 = sub_15C1918((uint64_t)v56);
                *(void *)(v48 + 24) = v54;
              }
              LODWORD(v39) = *(_DWORD *)(v7 + 760);
              long double v57 = exp((double)v39 * -6.28318531 / 4294967300.0 + 3.14159265);
              long double v58 = atan((v57 + -1.0 / v57) * 0.5);
              int v59 = *(_DWORD *)(v54 + 40);
              *(_DWORD *)(v54 + 40) = v59 | 1;
              LODWORD(v60) = *(_DWORD *)(v7 + 756);
              *(_DWORD *)(v54 + 40) = v59 | 3;
              *(long double *)(v54 + 48) = v58 * 57.2957795;
              *(double *)(v54 + 56) = (double)v60 * 360.0 / 4294967300.0 + -180.0;
            }
          }
          goto LABEL_75;
        }
      }
      *(_DWORD *)(v19 + 16) |= 0x10u;
      uint64_t v44 = *(void *)(v19 + 56);
      if (v44)
      {
        sub_5F4D30(v38, v44);
        if (*(_DWORD *)(v7 + 752) != 1) {
          goto LABEL_75;
        }
        goto LABEL_61;
      }
      uint64_t v45 = *(void *)(v19 + 8);
      uint64_t v46 = (void *)(v45 & 0xFFFFFFFFFFFFFFFCLL);
      if (v45) {
        uint64_t v46 = (void *)*v46;
      }
      sub_13D6A1C((uint64_t)v46);
      *(void *)(v19 + 56) = v47;
      sub_5F4D30(v38, v47);
      if (*(_DWORD *)(v7 + 752) == 1) {
        goto LABEL_61;
      }
LABEL_75:
      uint64_t v61 = *(void *)(v7 + 776);
      uint64_t v62 = *(void *)(v7 + 784);
      if (v61 != v62)
      {
        long long v63 = (uint64_t **)(v15 + 24);
        do
        {
          if (*(char *)(v61 + 23) < 0)
          {
            if (*(void *)(v61 + 8))
            {
LABEL_84:
              long long v65 = *(_DWORD **)(v15 + 40);
              if (v65 && (uint64_t v66 = *(int *)(v15 + 32), (int)v66 < *v65))
              {
                *(_DWORD *)(v15 + 32) = v66 + 1;
                uint64_t v64 = *(std::string **)&v65[2 * v66 + 2];
              }
              else
              {
                if (!*v63) {
                  operator new();
                }
                void *v68 = v67;
                v68[1] = sub_3A6EDC;
                *size_t v67 = 0;
                v67[1] = 0;
                v67[2] = 0;
                uint64_t v64 = (std::string *)sub_188CDC8(v15 + 24, (uint64_t)v67);
              }
              std::string::operator=(v64, (const std::string *)v61);
            }
          }
          else if (*(unsigned char *)(v61 + 23))
          {
            goto LABEL_84;
          }
          v61 += 24;
        }
        while (v61 != v62);
      }
LABEL_10:
      v7 += 800;
      if (v7 == v8) {
        goto LABEL_89;
      }
    }
    *(_DWORD *)(v19 + 16) |= 1u;
    uint64_t v20 = *(void *)(v19 + 24);
    if (v20) {
      goto LABEL_30;
    }
LABEL_27:
    uint64_t v25 = *(void *)(v19 + 8);
    unint64_t v26 = (void *)(v25 & 0xFFFFFFFFFFFFFFFCLL);
    if (v25) {
      unint64_t v26 = (void *)*v26;
    }
    sub_13D6A1C((uint64_t)v26);
    uint64_t v20 = v27;
    *(void *)(v19 + 24) = v27;
    goto LABEL_30;
  }
LABEL_3:
  sub_5F4D30((const std::string **)a1, v6);
  uint64_t v7 = *(void *)(a1 + 168);
  uint64_t v8 = *(void *)(a1 + 176);
  if (v7 != v8) {
    goto LABEL_11;
  }
LABEL_89:
  char v69 = *(unsigned char *)(a1 + 160);
  *(_DWORD *)(a3 + 16) |= 8u;
  *(unsigned char *)(a3 + 136) = v69;
  if (!sub_45FB38((void *)(a1 + 192)))
  {
    *(_DWORD *)(a3 + 16) |= 2u;
    uint64_t v71 = *(void *)(a3 + 120);
    if (!v71)
    {
      uint64_t v72 = *(void *)(a3 + 8);
      uint64_t v73 = (void *)(v72 & 0xFFFFFFFFFFFFFFFCLL);
      if (v72) {
        uint64_t v73 = (void *)*v73;
      }
      sub_13D6A1C((uint64_t)v73);
      uint64_t v71 = v74;
      *(void *)(a3 + 120) = v74;
    }
    sub_5F4D30((const std::string **)(a1 + 192), v71);
  }
  int v75 = *(_DWORD *)(a1 + 384);
  if (v75 == 1)
  {
    if (*(_DWORD *)(a1 + 356) == -1 && *(_DWORD *)(a1 + 352) == -1 && *(void *)(a1 + 360) == *(void *)(a1 + 368)) {
      goto LABEL_107;
    }
  }
  else if (v75 || *(_DWORD *)(a1 + 352) == -1)
  {
    goto LABEL_107;
  }
  *(_DWORD *)(a3 + 16) |= 4u;
  uint64_t v76 = *(void *)(a3 + 128);
  if (!v76)
  {
    uint64_t v77 = *(void *)(a3 + 8);
    size_t v78 = (void *)(v77 & 0xFFFFFFFFFFFFFFFCLL);
    if (v77) {
      size_t v78 = (void *)*v78;
    }
    uint64_t v76 = sub_13DAB08((uint64_t)v78);
    *(void *)(a3 + 128) = v76;
  }
  sub_523A2C(a1 + 352, v76, v70);
LABEL_107:
  uint64_t v79 = *(void *)(a1 + 464);
  uint64_t v80 = *(void *)(a1 + 472);
  if (v79 != v80)
  {
    unint64_t v81 = (uint64_t **)(a3 + 88);
    do
    {
      if (*(char *)(v79 + 23) < 0)
      {
        if (*(void *)(v79 + 8))
        {
LABEL_116:
          uint64_t v83 = *(_DWORD **)(a3 + 104);
          if (v83 && (uint64_t v84 = *(int *)(a3 + 96), (int)v84 < *v83))
          {
            *(_DWORD *)(a3 + 96) = v84 + 1;
            int v82 = *(std::string **)&v83[2 * v84 + 2];
          }
          else
          {
            if (!*v81) {
              operator new();
            }
            *int v86 = v85;
            v86[1] = sub_3A6EDC;
            *uint64_t v85 = 0;
            v85[1] = 0;
            v85[2] = 0;
            int v82 = (std::string *)sub_188CDC8(a3 + 88, (uint64_t)v85);
          }
          std::string::operator=(v82, (const std::string *)v79);
        }
      }
      else if (*(unsigned char *)(v79 + 23))
      {
        goto LABEL_116;
      }
      v79 += 24;
    }
    while (v79 != v80);
  }
}

uint64_t sub_E12460(int a1)
{
  if ((a1 - 1) > 0x5D) {
    return 0;
  }
  else {
    return dword_20F07F8[a1 - 1];
  }
}

uint64_t sub_E12484(unsigned int *a1)
{
  if (*a1 >= 0xE) {
    return 8;
  }
  else {
    return *a1;
  }
}

uint64_t sub_E12498(unsigned int a1)
{
  if (a1 > 0x2B) {
    return 1;
  }
  else {
    return dword_20F0970[a1];
  }
}

uint64_t sub_E124B8(unsigned int a1)
{
  if (a1 > 5) {
    return 4;
  }
  else {
    return dword_20F0A20[(char)a1];
  }
}

uint64_t sub_E124DC(int a1)
{
  if (!a1) {
    return 1;
  }
  if (a1 != 2) {
    return 0;
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v4);
    sub_188FC78(v4, (uint64_t)"Encountered side-of-street that is not supported in driving.", 60);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v3 < 0) {
      operator delete(__p);
    }
    if (v5 < 0) {
      operator delete((void *)v4[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return 0;
}

void sub_E1267C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_E126C8@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_13AD9CC(a2, 0, 0);
  int v4 = *(_DWORD *)(result + 16);
  *(double *)(result + 24) = (double)*a1 + -978307200.0;
  BOOL v5 = a1[2] != 0;
  *(_DWORD *)(result + 16) = v4 | 5;
  *(_DWORD *)(result + 40) = v5;
  return result;
}

void sub_E12734(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  *(void *)(a2 + 32) = *(void *)a1;
  unsigned int v5 = *(_DWORD *)(a1 + 8);
  if (v5 >= 3) {
    unsigned int v5 = 0;
  }
  *(_DWORD *)(a2 + 16) = v4 | 0xA;
  *(_DWORD *)(a2 + 44) = v5;
  if (sub_344C4((_DWORD *)(a1 + 12)))
  {
    *(_DWORD *)(a2 + 16) |= 1u;
    uint64_t v7 = *(void *)(a2 + 24);
    if (!v7)
    {
      uint64_t v8 = *(void *)(a2 + 8);
      uint64_t v9 = (void *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
      if (v8) {
        uint64_t v9 = (void *)*v9;
      }
      uint64_t v7 = sub_15C19EC((uint64_t)v9);
      *(void *)(a2 + 24) = v7;
    }
    LODWORD(v6) = *(_DWORD *)(a1 + 16);
    long double v10 = exp(3.14159265 - (double)v6 * 6.28318531 / 4294967300.0);
    long double v11 = atan((v10 - 1.0 / v10) * 0.5) * 57.2957795;
    int v12 = *(_DWORD *)(v7 + 16);
    *(_DWORD *)(v7 + 16) = v12 | 1;
    LODWORD(v13) = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(v7 + 16) = v12 | 3;
    *(long double *)(v7 + 48) = v11;
    *(double *)(v7 + 56) = (double)v13 * 360.0 / 4294967300.0 + -180.0;
    LODWORD(v11) = *(_DWORD *)(a1 + 28);
    long double v14 = exp(3.14159265 - (double)*(unint64_t *)&v11 * 6.28318531 / 4294967300.0);
    long double v15 = atan((v14 - 1.0 / v14) * 0.5);
    *(_DWORD *)(v7 + 16) = v12 | 7;
    LODWORD(v16) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(v7 + 16) = v12 | 0xF;
    *(long double *)(v7 + 64) = v15 * 57.2957795;
    *(double *)(v7 + 72) = (double)v16 * 360.0 / 4294967300.0 + -180.0;
  }
}

uint64_t sub_E128D8(uint64_t result)
{
  if ((result - 1) >= 7) {
    return 0;
  }
  else {
    return result;
  }
}

void sub_E128E8(uint64_t a1, uint64_t a2, double a3)
{
  int v5 = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 136) = 9;
  int v6 = v5 | 0x120;
  *(_DWORD *)(a2 + 40) = v6;
  uint64_t v7 = *(void *)(a2 + 112);
  if (v7)
  {
    *(_DWORD *)(a2 + 40) = v6 | 0x10;
    uint64_t v8 = *(void *)(a2 + 104);
    if (v8) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  uint64_t v9 = *(void *)(a2 + 8);
  long double v10 = (void *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
  if (v9) {
    long double v10 = (void *)*v10;
  }
  uint64_t v7 = sub_13D9568((uint64_t)v10);
  *(void *)(a2 + 112) = v7;
  *(_DWORD *)(a2 + 40) |= 0x10u;
  uint64_t v8 = *(void *)(a2 + 104);
  if (!v8)
  {
LABEL_7:
    uint64_t v11 = *(void *)(a2 + 8);
    int v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
    if (v11) {
      int v12 = (void *)*v12;
    }
    uint64_t v8 = sub_15C1918((uint64_t)v12);
    *(void *)(a2 + 104) = v8;
  }
LABEL_10:
  LODWORD(a3) = *(_DWORD *)(a1 + 44);
  long double v13 = exp((double)*(unint64_t *)&a3 * -6.28318531 / 4294967300.0 + 3.14159265);
  long double v14 = atan((v13 + -1.0 / v13) * 0.5) * 57.2957795;
  int v15 = *(_DWORD *)(v8 + 40);
  *(_DWORD *)(v8 + 40) = v15 | 1;
  *(long double *)(v8 + 48) = v14;
  LODWORD(v14) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v8 + 40) = v15 | 3;
  *(double *)(v8 + 56) = (double)*(unint64_t *)&v14 * 360.0 / 4294967300.0 + -180.0;
  *(_DWORD *)(a2 + 40) |= 1u;
  uint64_t v16 = *(void *)(a2 + 8);
  int v17 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
  if (v16) {
    int v17 = (uint64_t *)*v17;
  }
  sub_1881DF4((std::string **)(a2 + 72), (long long *)(a1 + 8), v17);
  uint64_t v18 = *(unsigned __int8 *)(a1 + 79);
  if ((v18 & 0x80u) != 0) {
    uint64_t v18 = *(void *)(a1 + 64);
  }
  if (v18)
  {
    *(_DWORD *)(v7 + 16) |= 1u;
    uint64_t v19 = *(void *)(v7 + 48);
    if (v19)
    {
      uint64_t v20 = *(_DWORD **)(v19 + 40);
      if (!v20) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v21 = *(void *)(v7 + 8);
      uint64_t v22 = (uint64_t *)(v21 & 0xFFFFFFFFFFFFFFFCLL);
      if (v21)
      {
        sub_13D6A1C(*v22);
        *(void *)(v7 + 48) = v19;
        uint64_t v20 = *(_DWORD **)(v19 + 40);
        if (!v20) {
          goto LABEL_23;
        }
      }
      else
      {
        sub_13D6A1C((uint64_t)v22);
        *(void *)(v7 + 48) = v19;
        uint64_t v20 = *(_DWORD **)(v19 + 40);
        if (!v20) {
          goto LABEL_23;
        }
      }
    }
    uint64_t v23 = *(int *)(v19 + 32);
    if ((int)v23 < *v20)
    {
      *(_DWORD *)(v19 + 32) = v23 + 1;
      uint64_t v24 = *(std::string **)&v20[2 * v23 + 2];
LABEL_26:
      std::string::operator=(v24, (const std::string *)(a1 + 56));
      goto LABEL_27;
    }
LABEL_23:
    uint64_t v25 = v19 + 24;
    unint64_t v26 = *(uint64_t **)(v19 + 24);
    if (!v26) {
      operator new();
    }
    *uint64_t v28 = v27;
    v28[1] = sub_3A6EDC;
    void *v27 = 0;
    v27[1] = 0;
    v27[2] = 0;
    uint64_t v24 = (std::string *)sub_188CDC8(v25, (uint64_t)v27);
    goto LABEL_26;
  }
LABEL_27:
  uint64_t v29 = *(unsigned __int8 *)(a1 + 103);
  if ((v29 & 0x80u) != 0) {
    uint64_t v29 = *(void *)(a1 + 88);
  }
  if (v29)
  {
    *(_DWORD *)(v7 + 16) |= 2u;
    uint64_t v30 = *(void *)(v7 + 56);
    if (v30)
    {
      int v31 = *(_DWORD **)(v30 + 40);
      if (!v31) {
        goto LABEL_38;
      }
    }
    else
    {
      uint64_t v32 = *(void *)(v7 + 8);
      int v33 = (uint64_t *)(v32 & 0xFFFFFFFFFFFFFFFCLL);
      if (v32)
      {
        sub_13D6A1C(*v33);
        *(void *)(v7 + 56) = v30;
        int v31 = *(_DWORD **)(v30 + 40);
        if (!v31) {
          goto LABEL_38;
        }
      }
      else
      {
        sub_13D6A1C((uint64_t)v33);
        *(void *)(v7 + 56) = v30;
        int v31 = *(_DWORD **)(v30 + 40);
        if (!v31) {
          goto LABEL_38;
        }
      }
    }
    uint64_t v34 = *(int *)(v30 + 32);
    if ((int)v34 < *v31)
    {
      *(_DWORD *)(v30 + 32) = v34 + 1;
      uint64_t v35 = *(std::string **)&v31[2 * v34 + 2];
LABEL_41:
      std::string::operator=(v35, (const std::string *)(a1 + 80));
      goto LABEL_42;
    }
LABEL_38:
    uint64_t v36 = v30 + 24;
    long long v37 = *(uint64_t **)(v30 + 24);
    if (!v37) {
      operator new();
    }
    void *v39 = v38;
    v39[1] = sub_3A6EDC;
    *long long v38 = 0;
    v38[1] = 0;
    v38[2] = 0;
    uint64_t v35 = (std::string *)sub_188CDC8(v36, (uint64_t)v38);
    goto LABEL_41;
  }
LABEL_42:
  uint64_t v40 = *(_DWORD **)(v7 + 40);
  if (v40)
  {
    uint64_t v41 = *(int *)(v7 + 32);
    if ((int)v41 < *v40)
    {
      *(_DWORD *)(v7 + 32) = v41 + 1;
      uint64_t v42 = *(void *)&v40[2 * v41 + 2];
      uint64_t v43 = *(const std::string **)(a1 + 104);
      uint64_t v44 = *(const std::string **)(a1 + 112);
      if (v43 == v44) {
        goto LABEL_59;
      }
      while (1)
      {
LABEL_49:
        uint64_t v46 = *(_DWORD **)(v42 + 40);
        if (v46 && (uint64_t v47 = *(int *)(v42 + 32), (int)v47 < *v46))
        {
          *(_DWORD *)(v42 + 32) = v47 + 1;
          uint64_t v48 = *(void *)&v46[2 * v47 + 2];
          int v49 = *(_DWORD **)(v48 + 40);
          if (!v49) {
            goto LABEL_55;
          }
LABEL_54:
          uint64_t v51 = *(int *)(v48 + 32);
          if ((int)v51 >= *v49) {
            goto LABEL_55;
          }
          *(_DWORD *)(v48 + 32) = v51 + 1;
          std::string::operator=(*(std::string **)&v49[2 * v51 + 2], v43++);
          if (v43 == v44) {
            goto LABEL_59;
          }
        }
        else
        {
          sub_13D6A1C(*(void *)(v42 + 24));
          uint64_t v48 = sub_188CDC8(v42 + 24, v50);
          int v49 = *(_DWORD **)(v48 + 40);
          if (v49) {
            goto LABEL_54;
          }
LABEL_55:
          uint64_t v52 = v48 + 24;
          int v53 = *(uint64_t **)(v48 + 24);
          if (!v53) {
            operator new();
          }
          void *v55 = v54;
          v55[1] = sub_3A6EDC;
          void *v54 = 0;
          v54[1] = 0;
          v54[2] = 0;
          char v56 = (std::string *)sub_188CDC8(v52, (uint64_t)v54);
          std::string::operator=(v56, v43++);
          if (v43 == v44) {
            goto LABEL_59;
          }
        }
      }
    }
  }
  uint64_t v45 = sub_13D94CC(*(void *)(v7 + 24));
  uint64_t v42 = sub_188CDC8(v7 + 24, (uint64_t)v45);
  uint64_t v43 = *(const std::string **)(a1 + 104);
  uint64_t v44 = *(const std::string **)(a1 + 112);
  if (v43 != v44) {
    goto LABEL_49;
  }
LABEL_59:
  char v57 = *(unsigned char *)(a1 + 128);
  *(_DWORD *)(a2 + 40) |= 0x20000u;
  *(unsigned char *)(a2 + 180) = v57;
  sub_524F7C(14, (uint64_t)v64);
  *(_DWORD *)(a2 + 40) |= 0x40u;
  uint64_t v59 = *(void *)(a2 + 120);
  if (!v59)
  {
    uint64_t v60 = *(void *)(a2 + 8);
    uint64_t v61 = (void *)(v60 & 0xFFFFFFFFFFFFFFFCLL);
    if (v60) {
      uint64_t v61 = (void *)*v61;
    }
    uint64_t v59 = sub_13DAB08((uint64_t)v61);
    *(void *)(a2 + 120) = v59;
  }
  sub_523A2C((uint64_t)v64, v59, v58);
  if ((v72 & 0x80000000) == 0)
  {
    if ((v70 & 0x80000000) == 0) {
      goto LABEL_65;
    }
LABEL_70:
    operator delete(v69);
    int v62 = v68;
    if (v68 != 1) {
      goto LABEL_66;
    }
LABEL_71:
    long long v63 = v65;
    if (!v65) {
      return;
    }
    uint64_t v66 = v65;
    goto LABEL_73;
  }
  operator delete(__p);
  if (v70 < 0) {
    goto LABEL_70;
  }
LABEL_65:
  int v62 = v68;
  if (v68 == 1) {
    goto LABEL_71;
  }
LABEL_66:
  if (!v62 && v67 < 0)
  {
    long long v63 = v65;
LABEL_73:
    operator delete(v63);
  }
}

void sub_E12ED8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D9814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_E12EEC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  if (*a1 == 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v5 = a1[1];
    if (v5 == 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_3;
    }
  }
  else
  {
    *(_DWORD *)(a2 + 16) |= 4u;
    *(_DWORD *)(a2 + 88) = v4;
    uint64_t v5 = a1[1];
    if (v5 == 0x7FFFFFFFFFFFFFFFLL)
    {
LABEL_3:
      int v6 = (const std::string **)(a1 + 9);
      if (sub_45FB38(a1 + 9)) {
        goto LABEL_12;
      }
      goto LABEL_7;
    }
  }
  *(_DWORD *)(a2 + 16) |= 8u;
  *(_DWORD *)(a2 + 92) = v5;
  int v6 = (const std::string **)(a1 + 9);
  if (sub_45FB38(a1 + 9)) {
    goto LABEL_12;
  }
LABEL_7:
  *(_DWORD *)(a2 + 16) |= 2u;
  uint64_t v7 = *(void *)(a2 + 80);
  if (!v7)
  {
    uint64_t v8 = *(void *)(a2 + 8);
    uint64_t v9 = (void *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
    if (v8) {
      uint64_t v9 = (void *)*v9;
    }
    sub_13D6A1C((uint64_t)v9);
    uint64_t v7 = v10;
    *(void *)(a2 + 80) = v10;
  }
  sub_5F4D30(v6, v7);
LABEL_12:
  sub_188CC60(a2 + 24, (unint64_t)(a1[3] - a1[2]) >> 4);
  uint64_t v11 = a1[2];
  for (uint64_t i = a1[3]; v11 != i; v11 += 16)
  {
    uint64_t v19 = *(_DWORD **)(a2 + 40);
    if (v19 && (uint64_t v20 = *(int *)(a2 + 32), (int)v20 < *v19))
    {
      *(_DWORD *)(a2 + 32) = v20 + 1;
      long double v14 = *(_DWORD **)&v19[2 * v20 + 2];
    }
    else
    {
      long double v13 = sub_13D79B4(*(void *)(a2 + 24));
      long double v14 = (_DWORD *)sub_188CDC8(a2 + 24, (uint64_t)v13);
    }
    if (*(uint64_t *)v11 < 0) {
      __int16 v15 = -50;
    }
    else {
      __int16 v15 = 50;
    }
    unsigned int v16 = (int)*(void *)v11 / 100
        + ((5243 * (__int16)(v15 + (int)*(void *)v11 % 100)) >> 19)
        + ((5243 * (__int16)(v15 + (int)*(void *)v11 % 100)) >> 31);
    int v17 = v14[4];
    v14[4] = v17 | 1;
    int v18 = *(_DWORD *)(v11 + 8);
    v14[4] = v17 | 3;
    v14[6] = v16;
    v14[7] = v18;
  }
  if (*((_DWORD *)a1 + 10) != 0x7FFFFFFF && *((_DWORD *)a1 + 11) != 0x7FFFFFFF)
  {
    *(_DWORD *)(a2 + 16) |= 1u;
    uint64_t v21 = *(_DWORD **)(a2 + 72);
    if (!v21)
    {
      uint64_t v22 = *(void *)(a2 + 8);
      uint64_t v23 = (void *)(v22 & 0xFFFFFFFFFFFFFFFCLL);
      if (v22) {
        uint64_t v23 = (void *)*v23;
      }
      uint64_t v21 = sub_13D7A2C((uint64_t)v23);
      *(void *)(a2 + 72) = v21;
    }
    int v24 = *((_DWORD *)a1 + 10);
    int v25 = v21[4];
    v21[4] = v25 | 1;
    int v26 = *((_DWORD *)a1 + 11);
    v21[4] = v25 | 3;
    v21[6] = v24;
    v21[7] = v26;
  }
  sub_188CC60(a2 + 48, -1171354717 * ((unint64_t)(a1[7] - a1[6]) >> 4));
  uint64_t v27 = a1[6];
  for (uint64_t j = a1[7]; v27 != j; v27 += 176)
  {
    int v31 = *(_DWORD **)(a2 + 64);
    if (v31 && (uint64_t v32 = *(int *)(a2 + 56), (int)v32 < *v31))
    {
      *(_DWORD *)(a2 + 56) = v32 + 1;
      uint64_t v33 = *(void *)&v31[2 * v32 + 2];
    }
    else
    {
      uint64_t v34 = sub_13D7AA4(*(void *)(a2 + 48));
      uint64_t v33 = sub_188CDC8(a2 + 48, (uint64_t)v34);
    }
    uint64_t v35 = *(void *)(v27 + 8);
    if (*(uint64_t *)v27 < 0) {
      __int16 v36 = -50;
    }
    else {
      __int16 v36 = 50;
    }
    unsigned int v37 = (int)*(void *)v27 / 100
        + ((5243 * (__int16)(v36 + (int)*(void *)v27 % 100)) >> 19)
        + ((5243 * (__int16)(v36 + (int)*(void *)v27 % 100)) >> 31);
    int v38 = (int)v35 / 100;
    int v39 = (int)v35 % 100;
    if (v35 < 0) {
      __int16 v40 = -50;
    }
    else {
      __int16 v40 = 50;
    }
    unsigned int v41 = ((5243 * (__int16)(v40 + v39)) >> 19) + ((5243 * (__int16)(v40 + v39)) >> 31);
    int v42 = *(_DWORD *)(v33 + 16);
    *(_DWORD *)(v33 + 32) = v37;
    *(_DWORD *)(v33 + 36) = v38 + v41;
    *(_DWORD *)(v33 + 16) = v42 | 7;
    uint64_t v30 = *(void *)(v33 + 24);
    if (!v30)
    {
      uint64_t v43 = *(void *)(v33 + 8);
      uint64_t v44 = (void *)(v43 & 0xFFFFFFFFFFFFFFFCLL);
      if (v43) {
        uint64_t v44 = (void *)*v44;
      }
      sub_13D6A1C((uint64_t)v44);
      uint64_t v30 = v29;
      *(void *)(v33 + 24) = v29;
    }
    sub_5F4D30((const std::string **)(v27 + 16), v30);
  }
}

void sub_E13288(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 64) = 3;
  *(_DWORD *)(a2 + 16) = v4 | 6;
  uint64_t v5 = *(void *)(a2 + 56);
  if (!v5)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    uint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
    if (v6) {
      uint64_t v7 = (void *)*v7;
    }
    sub_13D98B0((uint64_t)v7);
    uint64_t v5 = v8;
    *(void *)(a2 + 56) = v8;
  }
  uint64_t v9 = *(void *)a1;
  double v10 = (double)*(uint64_t *)a1 / 100.0;
  *(float *)&double v10 = v10;
  int v11 = *(_DWORD *)(v5 + 16);
  *(_DWORD *)(v5 + 44) = LODWORD(v10);
  int v12 = (int)v9 / 100;
  int v13 = (int)v9 % 100;
  if (v9 < 0) {
    __int16 v14 = -50;
  }
  else {
    __int16 v14 = 50;
  }
  *(_DWORD *)(v5 + 40) = v12
                       + ((5243 * (__int16)(v14 + v13)) >> 19)
                       + ((5243 * (__int16)(v14 + v13)) >> 31);
  *(_DWORD *)(v5 + 16) = v11 | 0xD;
  uint64_t v15 = *(void *)(v5 + 24);
  if (v15)
  {
    sub_523A2C(a1 + 8, v15, *(uint8x8_t *)&v10);
    unsigned int v16 = (const std::string **)(a1 + 128);
    if (sub_45FB38((void *)(a1 + 128))) {
      goto LABEL_34;
    }
LABEL_14:
    if (sub_45FB38((void *)(a1 + 288))) {
      goto LABEL_34;
    }
    *(_DWORD *)(v5 + 16) |= 2u;
    uint64_t v21 = *(void *)(v5 + 32);
    if (v21)
    {
      *(_DWORD *)(v21 + 16) |= 2u;
      uint64_t v22 = *(void *)(v21 + 32);
      if (v22)
      {
LABEL_24:
        sub_5F4D30(v16, v22);
        *(_DWORD *)(v21 + 16) |= 4u;
        uint64_t v28 = *(void *)(v21 + 40);
        if (!v28)
        {
          uint64_t v29 = *(void *)(v21 + 8);
          uint64_t v30 = (void *)(v29 & 0xFFFFFFFFFFFFFFFCLL);
          if (v29) {
            uint64_t v30 = (void *)*v30;
          }
          sub_13D6A1C((uint64_t)v30);
          uint64_t v28 = v31;
          *(void *)(v21 + 40) = v31;
        }
        sub_5F4D30((const std::string **)(a1 + 288), v28);
        if (!sub_45FB38((void *)(a1 + 448)))
        {
          *(_DWORD *)(v21 + 16) |= 8u;
          uint64_t v32 = *(void *)(v21 + 48);
          if (!v32)
          {
            uint64_t v33 = *(void *)(v21 + 8);
            uint64_t v34 = (void *)(v33 & 0xFFFFFFFFFFFFFFFCLL);
            if (v33) {
              uint64_t v34 = (void *)*v34;
            }
            sub_13D6A1C((uint64_t)v34);
            uint64_t v32 = v35;
            *(void *)(v21 + 48) = v35;
          }
          sub_5F4D30((const std::string **)(a1 + 448), v32);
        }
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v23 = *(void *)(v5 + 8);
      int v24 = (void *)(v23 & 0xFFFFFFFFFFFFFFFCLL);
      if (v23) {
        int v24 = (void *)*v24;
      }
      uint64_t v21 = sub_13D9440((uint64_t)v24);
      *(void *)(v5 + 32) = v21;
      *(_DWORD *)(v21 + 16) |= 2u;
      uint64_t v22 = *(void *)(v21 + 32);
      if (v22) {
        goto LABEL_24;
      }
    }
    uint64_t v25 = *(void *)(v21 + 8);
    int v26 = (void *)(v25 & 0xFFFFFFFFFFFFFFFCLL);
    if (v25) {
      int v26 = (void *)*v26;
    }
    sub_13D6A1C((uint64_t)v26);
    uint64_t v22 = v27;
    *(void *)(v21 + 32) = v27;
    goto LABEL_24;
  }
  uint64_t v17 = *(void *)(v5 + 8);
  int v18 = (void *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
  if (v17) {
    int v18 = (void *)*v18;
  }
  uint64_t v19 = sub_13DAB08((uint64_t)v18);
  *(void *)(v5 + 24) = v19;
  sub_523A2C(a1 + 8, v19, v20);
  unsigned int v16 = (const std::string **)(a1 + 128);
  if (!sub_45FB38((void *)(a1 + 128))) {
    goto LABEL_14;
  }
LABEL_34:
  int v36 = *(_DWORD *)(a1 + 120);
  *(_DWORD *)(a2 + 16) |= 0x20u;
  *(_DWORD *)(a2 + 76) = v36;
}

double sub_E13514(int *a1, uint64_t a2)
{
  int v4 = *a1;
  uint64_t v3 = (uint64_t)(a1 + 2);
  int v5 = v4 / 10;
  int v6 = v4 % 10;
  if (v4 < 0) {
    char v7 = -5;
  }
  else {
    char v7 = 5;
  }
  *(_DWORD *)(a2 + 16) |= 2u;
  *(_DWORD *)(a2 + 32) = v5 + (((103 * (char)(v7 + v6)) >> 15) & 1) + ((103 * (char)(v7 + v6)) >> 10);
  double result = (double)sub_3FB38C(v3);
  *(_DWORD *)(a2 + 16) |= 1u;
  *(double *)(a2 + 24) = result;
  return result;
}

uint64_t sub_E135AC(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 72) != -1 || *(_DWORD *)(result + 76) != -1)
  {
    uint64_t v4 = result;
    uint64_t v5 = nullsub_1(*(void *)(result + 88));
    int v6 = *(_DWORD *)(a2 + 16);
    *(void *)(a2 + 48) = v5;
    *(_DWORD *)(a2 + 16) = v6 | 9;
    uint64_t v7 = *(void *)(a2 + 8);
    uint64_t v8 = (uint64_t *)(v7 & 0xFFFFFFFFFFFFFFFCLL);
    if (v7) {
      uint64_t v8 = (uint64_t *)*v8;
    }
    sub_1881DF4((std::string **)(a2 + 24), (long long *)v4, v8);
    *(_DWORD *)(a2 + 16) |= 2u;
    uint64_t v10 = *(void *)(a2 + 32);
    if (!v10)
    {
      uint64_t v11 = *(void *)(a2 + 8);
      int v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
      if (v11) {
        int v12 = (void *)*v12;
      }
      uint64_t v10 = sub_15C1918((uint64_t)v12);
      *(void *)(a2 + 32) = v10;
    }
    LODWORD(v9) = *(_DWORD *)(v4 + 76);
    long double v13 = exp((double)v9 * -6.28318531 / 4294967300.0 + 3.14159265);
    long double v14 = atan((v13 + -1.0 / v13) * 0.5);
    HIDWORD(v15) = 1078765020;
    int v16 = *(_DWORD *)(v10 + 40);
    *(_DWORD *)(v10 + 40) = v16 | 1;
    LODWORD(v15) = *(_DWORD *)(v4 + 72);
    *(_DWORD *)(v10 + 40) = v16 | 3;
    *(long double *)(v10 + 48) = v14 * 57.2957795;
    *(double *)(v10 + 56) = (double)v15 * 360.0 / 4294967300.0 + -180.0;
    *(_DWORD *)(a2 + 16) |= 4u;
    uint64_t v17 = *(void **)(a2 + 40);
    if (v17)
    {
      int v18 = (_DWORD *)v17[8];
      if (!v18) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v19 = *(void *)(a2 + 8);
      uint8x8_t v20 = (uint64_t *)(v19 & 0xFFFFFFFFFFFFFFFCLL);
      if (v19)
      {
        uint64_t v17 = sub_1478C60(*v20);
        *(void *)(a2 + 40) = v17;
        int v18 = (_DWORD *)v17[8];
        if (!v18) {
          goto LABEL_19;
        }
      }
      else
      {
        uint64_t v17 = sub_1478C60((uint64_t)v20);
        *(void *)(a2 + 40) = v17;
        int v18 = (_DWORD *)v17[8];
        if (!v18) {
          goto LABEL_19;
        }
      }
    }
    uint64_t v21 = *((int *)v17 + 14);
    if ((int)v21 < *v18)
    {
      *((_DWORD *)v17 + 14) = v21 + 1;
      double result = *(void *)&v18[2 * v21 + 2];
LABEL_20:
      int v24 = *(_DWORD *)(result + 16);
      *(_DWORD *)(result + 16) = v24 | 1;
      int v25 = *(_DWORD *)(v4 + 84);
      *(_DWORD *)(result + 16) = v24 | 3;
      *(_DWORD *)(result + 24) = 6;
      *(_DWORD *)(result + 28) = v25;
      return result;
    }
LABEL_19:
    uint64_t v22 = (uint64_t)(v17 + 6);
    uint64_t v23 = sub_1478BE8(v17[6]);
    double result = sub_188CDC8(v22, (uint64_t)v23);
    goto LABEL_20;
  }
  return result;
}

std::string *sub_E137A8(std::string *result, uint64_t a2)
{
  std::string::size_type size = HIBYTE(result[1].__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = result[1].__r_.__value_.__l.__size_;
  }
  if (size)
  {
    uint64_t v3 = (long long *)result;
    std::string::size_type v4 = HIBYTE(result[6].__r_.__value_.__r.__words[2]);
    if ((v4 & 0x80u) != 0) {
      std::string::size_type v4 = result[6].__r_.__value_.__l.__size_;
    }
    if (v4)
    {
      std::string::size_type v5 = HIBYTE(result[9].__r_.__value_.__r.__words[2]);
      if ((v5 & 0x80u) != 0) {
        std::string::size_type v5 = result[9].__r_.__value_.__l.__size_;
      }
      if (v5)
      {
        int v6 = (const std::string *)result->__r_.__value_.__r.__words[0];
        uint64_t v7 = (const std::string *)result->__r_.__value_.__l.__size_;
        if ((const std::string *)result->__r_.__value_.__l.__data_ != v7)
        {
          int v9 = result[11].__r_.__value_.__s.__data_[0];
          if (v9 == 2) {
            int v10 = 2;
          }
          else {
            int v10 = v9 == 1;
          }
          *(_DWORD *)(a2 + 16) |= 2u;
          *(_DWORD *)(a2 + 56) = v10;
          uint64_t v11 = (uint64_t **)(a2 + 24);
          do
          {
            while (1)
            {
              int v12 = *(_DWORD **)(a2 + 40);
              if (!v12) {
                break;
              }
              uint64_t v13 = *(int *)(a2 + 32);
              if ((int)v13 >= *v12) {
                break;
              }
              *(_DWORD *)(a2 + 32) = v13 + 1;
              std::string::operator=(*(std::string **)&v12[2 * v13 + 2], v6++);
              if (v6 == v7) {
                goto LABEL_22;
              }
            }
            if (!*v11) {
              operator new();
            }
            void *v15 = v14;
            v15[1] = sub_3A6EDC;
            *long double v14 = 0;
            v14[1] = 0;
            v14[2] = 0;
            int v16 = (std::string *)sub_188CDC8((uint64_t)v11, (uint64_t)v14);
            std::string::operator=(v16, v6++);
          }
          while (v6 != v7);
LABEL_22:
          *(_DWORD *)(a2 + 16) |= 1u;
          uint64_t v17 = *(void **)(a2 + 48);
          if (!v17)
          {
            uint64_t v18 = *(void *)(a2 + 8);
            uint64_t v19 = (void *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
            if (v18) {
              uint64_t v19 = (void *)*v19;
            }
            uint64_t v17 = sub_15C1E94((uint64_t)v19);
            *(void *)(a2 + 48) = v17;
          }
          *((_DWORD *)v17 + 4) |= 1u;
          uint64_t v20 = v17[1];
          uint64_t v21 = (uint64_t *)(v20 & 0xFFFFFFFFFFFFFFFCLL);
          if (v20) {
            uint64_t v21 = (uint64_t *)*v21;
          }
          sub_1881DF4((std::string **)v17 + 14, (long long *)((char *)v3 + 24), v21);
          *((_DWORD *)v17 + 4) |= 2u;
          uint64_t v22 = v17[1];
          uint64_t v23 = (uint64_t *)(v22 & 0xFFFFFFFFFFFFFFFCLL);
          if (v22) {
            uint64_t v23 = (uint64_t *)*v23;
          }
          sub_1881DF4((std::string **)v17 + 15, v3 + 3, v23);
          *((_DWORD *)v17 + 4) |= 4u;
          uint64_t v24 = v17[1];
          int v25 = (uint64_t *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
          if (v24) {
            int v25 = (uint64_t *)*v25;
          }
          sub_1881DF4((std::string **)v17 + 16, (long long *)((char *)v3 + 72), v25);
          *((_DWORD *)v17 + 4) |= 8u;
          uint64_t v26 = v17[1];
          uint64_t v27 = (uint64_t *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
          if (v26) {
            uint64_t v27 = (uint64_t *)*v27;
          }
          sub_1881DF4((std::string **)v17 + 17, v3 + 6, v27);
          *((_DWORD *)v17 + 4) |= 0x10u;
          uint64_t v28 = v17[1];
          uint64_t v29 = (uint64_t *)(v28 & 0xFFFFFFFFFFFFFFFCLL);
          if (v28) {
            uint64_t v29 = (uint64_t *)*v29;
          }
          sub_1881DF4((std::string **)v17 + 18, (long long *)((char *)v3 + 120), v29);
          *((_DWORD *)v17 + 4) |= 0x20u;
          uint64_t v30 = v17[1];
          uint64_t v31 = (uint64_t *)(v30 & 0xFFFFFFFFFFFFFFFCLL);
          if (v30) {
            uint64_t v31 = (uint64_t *)*v31;
          }
          sub_1881DF4((std::string **)v17 + 19, v3 + 9, v31);
          *((_DWORD *)v17 + 4) |= 0x40u;
          uint64_t v32 = v17[1];
          uint64_t v33 = (uint64_t *)(v32 & 0xFFFFFFFFFFFFFFFCLL);
          if (v32) {
            uint64_t v33 = (uint64_t *)*v33;
          }
          sub_1881DF4((std::string **)v17 + 20, (long long *)((char *)v3 + 168), v33);
          *((_DWORD *)v17 + 4) |= 0x80u;
          uint64_t v34 = v17[1];
          uint64_t v35 = (uint64_t *)(v34 & 0xFFFFFFFFFFFFFFFCLL);
          if (v34) {
            uint64_t v35 = (uint64_t *)*v35;
          }
          sub_1881DF4((std::string **)v17 + 21, v3 + 12, v35);
          *((_DWORD *)v17 + 4) |= 0x200u;
          uint64_t v36 = v17[1];
          unsigned int v37 = (uint64_t *)(v36 & 0xFFFFFFFFFFFFFFFCLL);
          if (v36) {
            unsigned int v37 = (uint64_t *)*v37;
          }
          sub_1881DF4((std::string **)v17 + 23, (long long *)((char *)v3 + 216), v37);
          *((_DWORD *)v17 + 4) |= 0x400u;
          uint64_t v38 = v17[1];
          int v39 = (uint64_t *)(v38 & 0xFFFFFFFFFFFFFFFCLL);
          if (v38)
          {
            int v39 = (uint64_t *)*v39;
          }
          else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
          {
            __break(0xC471u);
          }
          return sub_1881DF4((std::string **)v17 + 24, v3 + 15, v39);
        }
      }
    }
  }
  return result;
}

void sub_E13B3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a3 + 403) == 2) {
    int v4 = 2;
  }
  else {
    int v4 = 1;
  }
  *(_DWORD *)(a4 + 16) |= 0x400u;
  *(_DWORD *)(a4 + 104) = v4;
  if (*(_DWORD *)(a2 + 24) == 0x7FFFFFFF || *(_DWORD *)(a2 + 60) == 0x7FFFFFFF) {
    return;
  }
  int v9 = (unsigned int *)(a2 + 32);
  if (!sub_40A45C((int *)(a2 + 32))) {
    return;
  }
  int v10 = *(_DWORD *)(a2 + 136);
  if (v10 == -1) {
    return;
  }
  if (v10 == 1)
  {
    if (*(void *)(a2 + 128) > 0xFFFFFFFEFFFFFFFFLL || !*(void *)(a2 + 128)) {
      return;
    }
LABEL_16:
    if (*(_DWORD *)(a1 + 72) == -1 && *(_DWORD *)(a1 + 76) == -1) {
      return;
    }
    *(_DWORD *)(a4 + 16) |= 0x10u;
    uint64_t v11 = *(void *)(a4 + 56);
    if (!v11)
    {
      uint64_t v12 = *(void *)(a4 + 8);
      uint64_t v13 = (void *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
      if (v12) {
        uint64_t v13 = (void *)*v13;
      }
      uint64_t v11 = sub_13D82F4((uint64_t)v13);
      *(void *)(a4 + 56) = v11;
    }
    int v14 = *(_DWORD *)(a2 + 24);
    int v15 = v14 / 10;
    int v16 = v14 % 10;
    if (v14 < 0) {
      char v17 = -5;
    }
    else {
      char v17 = 5;
    }
    *(_DWORD *)(v11 + 16) |= 2u;
    *(_DWORD *)(v11 + 32) = v15
                          + (((103 * (char)(v17 + v16)) >> 15) & 1)
                          + ((103 * (char)(v17 + v16)) >> 10);
    int v18 = sub_4F44(v9);
    if (v18 < 0) {
      int v19 = 65036;
    }
    else {
      int v19 = 500;
    }
    unsigned int v20 = v19 + v18 % 1000 + ((-31981 * (__int16)(v19 + v18 % 1000)) >> 16);
    *(_DWORD *)(v11 + 16) |= 8u;
    *(_DWORD *)(v11 + 40) = v18 / 1000 + ((__int16)v20 >> 9) + ((unsigned __int16)(v20 & 0x8000) >> 15);
    int v21 = sub_3FB38C((uint64_t)v9);
    int v22 = *(_DWORD *)(v11 + 16);
    *(_DWORD *)(v11 + 36) = v21;
    *(_DWORD *)(v11 + 16) = v22 | 5;
    uint64_t v23 = *(void *)(v11 + 24);
    if (!v23)
    {
      uint64_t v24 = *(void *)(v11 + 8);
      int v25 = (void *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
      if (v24) {
        int v25 = (void *)*v25;
      }
      uint64_t v23 = sub_13D8250((uint64_t)v25);
      *(void *)(v11 + 24) = v23;
    }
    uint64_t v26 = *(unsigned __int8 **)(a2 + 64);
    uint64_t v27 = *(unsigned __int8 **)(a2 + 72);
    if (v26 != v27)
    {
      do
      {
        while (1)
        {
          uint64_t v32 = *(_DWORD **)(v23 + 32);
          if (v32 && (uint64_t v33 = *(int *)(v23 + 24), (int)v33 < *v32))
          {
            *(_DWORD *)(v23 + 24) = v33 + 1;
            uint64_t v34 = *(_DWORD **)&v32[2 * v33 + 2];
          }
          else
          {
            uint64_t v35 = sub_13D81D8(*(void *)(v23 + 16));
            uint64_t v34 = (_DWORD *)sub_188CDC8(v23 + 16, (uint64_t)v35);
          }
          int v36 = *v26 - 1 < 0xA ? (*v26 - 1) + 1 : 0;
          int v37 = v34[4];
          v34[4] = v37 | 1;
          int v34[6] = v36;
          int v38 = *((_DWORD *)v26 + 1);
          if (v38 == 0x7FFFFFFF) {
            break;
          }
          int v28 = v38 / 1000;
          int v29 = v38 % 1000;
          if (v38 < 0) {
            int v30 = 65036;
          }
          else {
            int v30 = 500;
          }
          unsigned int v31 = v30 + v29 + ((-31981 * (__int16)(v30 + v29)) >> 16);
          v34[4] = v37 | 3;
          v34[7] = v28 + ((__int16)v31 >> 9) + ((unsigned __int16)(v31 & 0x8000) >> 15);
          v26 += 12;
          if (v26 == v27) {
            goto LABEL_53;
          }
        }
        if (sub_723EC(3u))
        {
          sub_6BAC((uint64_t)&v83);
          sub_188FC78(&v83, (uint64_t)"Maximum power associated to the suggested charger plug is missing, using a default value for now.", 97);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&__p, 3u);
          if (SHIBYTE(v81) < 0) {
            operator delete(__p);
          }
          uint64_t v83 = v75;
          *(uint64_t *)((char *)&v83 + *(void *)(v75 - 24)) = v77;
          if (v92 < 0) {
            operator delete(v90);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        v34[4] |= 2u;
        v34[7] = 50000;
        v26 += 12;
      }
      while (v26 != v27);
    }
LABEL_53:
    __int16 v40 = *(unsigned __int8 **)(a2 + 88);
    int v39 = *(unsigned __int8 **)(a2 + 96);
    if (v40 != v39)
    {
      do
      {
        while (1)
        {
          uint64_t v45 = *(_DWORD **)(v23 + 56);
          if (v45 && (uint64_t v46 = *(int *)(v23 + 48), (int)v46 < *v45))
          {
            *(_DWORD *)(v23 + 48) = v46 + 1;
            uint64_t v47 = *(_DWORD **)&v45[2 * v46 + 2];
          }
          else
          {
            uint64_t v48 = sub_13D81D8(*(void *)(v23 + 40));
            uint64_t v47 = (_DWORD *)sub_188CDC8(v23 + 40, (uint64_t)v48);
          }
          int v49 = *v40 - 1 < 0xA ? (*v40 - 1) + 1 : 0;
          int v50 = v47[4];
          v47[4] = v50 | 1;
          v47[6] = v49;
          int v51 = *((_DWORD *)v40 + 1);
          if (v51 == 0x7FFFFFFF) {
            break;
          }
          int v41 = v51 / 1000;
          int v42 = v51 % 1000;
          if (v51 < 0) {
            int v43 = 65036;
          }
          else {
            int v43 = 500;
          }
          unsigned int v44 = v43 + v42 + ((-31981 * (__int16)(v43 + v42)) >> 16);
          v47[4] = v50 | 3;
          v47[7] = v41 + ((__int16)v44 >> 9) + ((unsigned __int16)(v44 & 0x8000) >> 15);
          v40 += 12;
          if (v40 == v39) {
            goto LABEL_74;
          }
        }
        if (sub_723EC(3u))
        {
          sub_6BAC((uint64_t)&v83);
          sub_188FC78(&v83, (uint64_t)"Maximum power associated to the supported charger plug is missing, using a default value for now.", 97);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&__p, 3u);
          if (SHIBYTE(v81) < 0) {
            operator delete(__p);
          }
          uint64_t v83 = v76;
          *(uint64_t *)((char *)&v83 + *(void *)(v76 - 24)) = v78;
          if (v92 < 0) {
            operator delete(v90);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        v47[4] |= 2u;
        v47[7] = 50000;
        v40 += 12;
      }
      while (v40 != v39);
    }
LABEL_74:
    uint64_t v52 = nullsub_1(*(void *)(a1 + 88));
    int v53 = *(_DWORD *)(a4 + 16);
    *(void *)(a4 + 96) = v52;
    *(_DWORD *)(a4 + 16) = v53 | 0x201;
    uint64_t v54 = *(void *)(a4 + 8);
    uint64_t v55 = (uint64_t *)(v54 & 0xFFFFFFFFFFFFFFFCLL);
    if (v54) {
      uint64_t v55 = (uint64_t *)*v55;
    }
    sub_1881DF4((std::string **)(a4 + 24), (long long *)a1, v55);
    *(_DWORD *)(a4 + 16) |= 2u;
    uint64_t v57 = *(void *)(a4 + 32);
    if (!v57)
    {
      uint64_t v58 = *(void *)(a4 + 8);
      uint64_t v59 = (void *)(v58 & 0xFFFFFFFFFFFFFFFCLL);
      if (v58) {
        uint64_t v59 = (void *)*v59;
      }
      uint64_t v57 = sub_15C1918((uint64_t)v59);
      *(void *)(a4 + 32) = v57;
    }
    LODWORD(v56) = *(_DWORD *)(a1 + 76);
    long double v60 = exp((double)v56 * -6.28318531 / 4294967300.0 + 3.14159265);
    long double v61 = atan((v60 + -1.0 / v60) * 0.5) * 57.2957795;
    int v62 = *(_DWORD *)(v57 + 40);
    *(_DWORD *)(v57 + 40) = v62 | 1;
    *(long double *)(v57 + 48) = v61;
    LODWORD(v61) = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(v57 + 40) = v62 | 3;
    *(double *)(v57 + 56) = (double)*(unint64_t *)&v61 * 360.0 / 4294967300.0 + -180.0;
    *(_DWORD *)(a4 + 16) |= 0x40u;
    uint64_t v63 = *(void *)(a4 + 72);
    if (!v63)
    {
      uint64_t v64 = *(void *)(a4 + 8);
      long long v65 = (void *)(v64 & 0xFFFFFFFFFFFFFFFCLL);
      if (v64) {
        long long v65 = (void *)*v65;
      }
      uint64_t v63 = sub_15C1EF4((uint64_t)v65);
      *(void *)(a4 + 72) = v63;
    }
    sub_E137A8((std::string *)(a1 + 96), v63);
    uint64_t v66 = *(unsigned int *)(a1 + 84);
    std::string __p = (void *)-1;
    char v67 = operator new(8uLL);
    uint64_t v80 = v67;
    *char v67 = (v66 << 32) | 6;
    unint64_t v81 = v67 + 1;
    int v82 = v67 + 1;
    sub_525328((uint64_t)&v83, (uint64_t *)&__p, 0);
    if (v80)
    {
      unint64_t v81 = v80;
      operator delete(v80);
    }
    *(_DWORD *)(a4 + 16) |= 8u;
    uint64_t v69 = *(void *)(a4 + 48);
    if (!v69)
    {
      uint64_t v70 = *(void *)(a4 + 8);
      uint64_t v71 = (void *)(v70 & 0xFFFFFFFFFFFFFFFCLL);
      if (v70) {
        uint64_t v71 = (void *)*v71;
      }
      uint64_t v69 = sub_13DAB08((uint64_t)v71);
      *(void *)(a4 + 48) = v69;
    }
    sub_523A2C((uint64_t)&v83, v69, v68);
    if (v93 < 0)
    {
      operator delete(v91);
      if ((v89 & 0x80000000) == 0)
      {
LABEL_92:
        int v72 = v87;
        if (v87 != 1) {
          goto LABEL_93;
        }
        goto LABEL_98;
      }
    }
    else if ((v89 & 0x80000000) == 0)
    {
      goto LABEL_92;
    }
    operator delete(v88);
    int v72 = v87;
    if (v87 != 1)
    {
LABEL_93:
      if (v72 || (v86 & 0x80000000) == 0) {
        return;
      }
      uint64_t v73 = v84;
LABEL_100:
      operator delete(v73);
      return;
    }
LABEL_98:
    uint64_t v73 = v84;
    if (!v84) {
      return;
    }
    uint64_t v85 = v84;
    goto LABEL_100;
  }
  if (v10)
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_23FDF58;
  }
  if (*(void *)(a2 + 128) != -1) {
    goto LABEL_16;
  }
}

void sub_E144E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_E146FC(uint64_t *a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 16) |= 0x20u;
  uint64_t v3 = *(void *)(a2 + 64);
  if (!v3)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    int v6 = (void *)(v5 & 0xFFFFFFFFFFFFFFFCLL);
    if (v5) {
      int v6 = (void *)*v6;
    }
    uint64_t v3 = sub_13D8374((uint64_t)v6);
    *(void *)(a2 + 64) = v3;
  }
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (*a1 != v8)
  {
    do
    {
      while (1)
      {
        uint64_t v11 = *(_DWORD **)(v3 + 32);
        if (v11)
        {
          uint64_t v12 = *(int *)(v3 + 24);
          if ((int)v12 < *v11) {
            break;
          }
        }
        sub_1481E2C(*(void *)(v3 + 16));
        uint64_t v10 = sub_188CDC8(v3 + 16, v9);
        sub_3E9BBC(v7, v10);
        v7 += 72;
        if (v7 == v8) {
          return;
        }
      }
      *(_DWORD *)(v3 + 24) = v12 + 1;
      sub_3E9BBC(v7, *(void *)&v11[2 * v12 + 2]);
      v7 += 72;
    }
    while (v7 != v8);
  }
}

double sub_E147D8(uint64_t a1, uint64_t a2)
{
  double result = (double)sub_3FB38C(a1);
  *(_DWORD *)(a2 + 16) |= 2u;
  *(double *)(a2 + 32) = result;
  return result;
}

void sub_E14810(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    uint64_t v12 = (unsigned int *)(a2 + 176);
    uint64_t v5 = (unsigned int *)(a2 + 152);
    do
    {
      while (1)
      {
        __int16 v6 = *(uint64_t *)v2 < 0 ? -50 : 50;
        unsigned int v7 = (int)*(void *)v2 / 100
           + ((5243 * (__int16)(v6 + (int)*(void *)v2 % 100)) >> 19)
           + ((5243 * (__int16)(v6 + (int)*(void *)v2 % 100)) >> 31);
        uint64_t v8 = *(unsigned int *)(a2 + 176);
        if (v8 == *(_DWORD *)(a2 + 180))
        {
          int v9 = v8 + 1;
          sub_188C80C(v12, v8 + 1);
          *(_DWORD *)(*(void *)(a2 + 184) + 4 * v8) = v7;
        }
        else
        {
          *(_DWORD *)(*(void *)(a2 + 184) + 4 * v8) = v7;
          int v9 = v8 + 1;
        }
        *(_DWORD *)(a2 + 176) = v9;
        int v10 = *(_DWORD *)(v2 + 8) == 1 ? 1 : 4;
        uint64_t v11 = *(unsigned int *)(a2 + 152);
        if (v11 == *(_DWORD *)(a2 + 156)) {
          break;
        }
        *(_DWORD *)(*(void *)(a2 + 160) + 4 * v11) = v10;
        *uint64_t v5 = v11 + 1;
        v2 += 16;
        if (v2 == v3) {
          return;
        }
      }
      sub_188C80C(v5, v11 + 1);
      *(_DWORD *)(*(void *)(a2 + 160) + 4 * v11) = v10;
      *uint64_t v5 = v11 + 1;
      v2 += 16;
    }
    while (v2 != v3);
  }
}

std::string *sub_E14968(std::string *result, uint64_t a2)
{
  std::string::size_type v2 = result->__r_.__value_.__r.__words[0];
  std::string::size_type size = result->__r_.__value_.__l.__size_;
  if (result->__r_.__value_.__r.__words[0] != size)
  {
    uint64_t v5 = (uint64_t *)(a2 + 152);
    do
    {
      uint64_t v8 = *(_DWORD **)(a2 + 168);
      if (v8 && (uint64_t v9 = *(int *)(a2 + 160), (int)v9 < *v8))
      {
        *(_DWORD *)(a2 + 160) = v9 + 1;
        uint64_t v10 = *(void *)&v8[2 * v9 + 2];
        *(_DWORD *)(v10 + 16) |= 1u;
        uint64_t v11 = *(void *)(v10 + 24);
        if (v11) {
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t v13 = sub_13D7BD4(*v5);
        uint64_t v10 = sub_188CDC8((uint64_t)v5, v13);
        *(_DWORD *)(v10 + 16) |= 1u;
        uint64_t v11 = *(void *)(v10 + 24);
        if (v11)
        {
LABEL_10:
          uint64_t v12 = *(_DWORD **)(v11 + 40);
          if (!v12) {
            goto LABEL_16;
          }
          goto LABEL_15;
        }
      }
      uint64_t v14 = *(void *)(v10 + 8);
      int v15 = (uint64_t *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
      if (v14)
      {
        sub_13D6A1C(*v15);
        *(void *)(v10 + 24) = v11;
        uint64_t v12 = *(_DWORD **)(v11 + 40);
        if (!v12)
        {
LABEL_16:
          uint64_t v17 = v11 + 24;
          int v18 = *(uint64_t **)(v11 + 24);
          if (!v18) {
            operator new();
          }
          void *v20 = v19;
          v20[1] = sub_3A6EDC;
          *int v19 = 0;
          v19[1] = 0;
          v19[2] = 0;
          __int16 v6 = (std::string *)sub_188CDC8(v17, (uint64_t)v19);
          goto LABEL_4;
        }
      }
      else
      {
        sub_13D6A1C((uint64_t)v15);
        *(void *)(v10 + 24) = v11;
        uint64_t v12 = *(_DWORD **)(v11 + 40);
        if (!v12) {
          goto LABEL_16;
        }
      }
LABEL_15:
      uint64_t v16 = *(int *)(v11 + 32);
      if ((int)v16 >= *v12) {
        goto LABEL_16;
      }
      *(_DWORD *)(v11 + 32) = v16 + 1;
      __int16 v6 = *(std::string **)&v12[2 * v16 + 2];
LABEL_4:
      double result = std::string::operator=(v6, (const std::string *)(v2 + 24));
      int v7 = *(_DWORD *)(v2 + 4);
      if ((v7 - 1) >= 3) {
        int v7 = 0;
      }
      *(_DWORD *)(v10 + 16) |= 2u;
      *(_DWORD *)(v10 + 32) = v7;
      v2 += 48;
    }
    while (v2 != size);
  }
  return result;
}

void sub_E14B1C(uint64_t *a1, uint64_t a2, long double a3)
{
  uint64_t v4 = a1[1];
  if (*a1 < 0) {
    __int16 v5 = -50;
  }
  else {
    __int16 v5 = 50;
  }
  unsigned int v6 = (int)*a1 / 100
     + ((5243 * (__int16)(v5 + (int)*a1 % 100)) >> 19)
     + ((5243 * (__int16)(v5 + (int)*a1 % 100)) >> 31);
  int v7 = (int)v4 / 100;
  int v8 = (int)v4 % 100;
  if (v4 < 0) {
    __int16 v9 = -50;
  }
  else {
    __int16 v9 = 50;
  }
  *(_DWORD *)(a2 + 16) |= 3u;
  *(_DWORD *)(a2 + 72) = v6;
  *(_DWORD *)(a2 + 76) = v7 + ((5243 * (__int16)(v9 + v8)) >> 19) + ((5243 * (__int16)(v9 + v8)) >> 31);
  uint64_t v10 = a1[2];
  uint64_t v11 = a1[3];
  if (v10 != v11)
  {
    uint64_t v12 = (uint64_t *)(a2 + 24);
    do
    {
      int v22 = *(_DWORD **)(a2 + 40);
      if (v22 && (uint64_t v23 = *(int *)(a2 + 32), (int)v23 < *v22))
      {
        *(_DWORD *)(a2 + 32) = v23 + 1;
        uint64_t v24 = *(void *)&v22[2 * v23 + 2];
        *(_DWORD *)(v24 + 16) |= 1u;
        uint64_t v13 = *(void *)(v24 + 24);
        if (!v13) {
          goto LABEL_19;
        }
      }
      else
      {
        uint64_t v25 = sub_13D992C(*v12);
        uint64_t v24 = sub_188CDC8(a2 + 24, v25);
        *(_DWORD *)(v24 + 16) |= 1u;
        uint64_t v13 = *(void *)(v24 + 24);
        if (!v13)
        {
LABEL_19:
          uint64_t v26 = *(void *)(v24 + 8);
          uint64_t v27 = (void *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
          if (v26) {
            uint64_t v27 = (void *)*v27;
          }
          uint64_t v13 = sub_15C1918((uint64_t)v27);
          *(void *)(v24 + 24) = v13;
        }
      }
      LODWORD(a3) = *(_DWORD *)(v10 + 4);
      long double v14 = exp((double)*(unint64_t *)&a3 * -6.28318531 / 4294967300.0 + 3.14159265);
      long double v15 = atan((v14 + -1.0 / v14) * 0.5);
      int v16 = *(_DWORD *)(v13 + 40);
      *(_DWORD *)(v13 + 40) = v16 | 1;
      LODWORD(v17) = *(_DWORD *)v10;
      a3 = v15 * 57.2957795;
      *(_DWORD *)(v13 + 40) = v16 | 3;
      *(long double *)(v13 + 48) = a3;
      *(double *)(v13 + 56) = (double)v17 * 360.0 / 4294967300.0 + -180.0;
      uint64_t v18 = *(void *)(v10 + 16);
      int v19 = (int)v18 / 100;
      int v20 = (int)v18 % 100;
      if (v18 < 0) {
        __int16 v21 = -50;
      }
      else {
        __int16 v21 = 50;
      }
      *(_DWORD *)(v24 + 16) |= 2u;
      *(_DWORD *)(v24 + 32) = v19
                            + ((5243 * (__int16)(v21 + v20)) >> 19)
                            + ((5243 * (__int16)(v21 + v20)) >> 31);
      v10 += 24;
    }
    while (v10 != v11);
  }
  uint64_t v28 = a1[5];
  for (uint64_t i = a1[6]; v28 != i; v28 += 72)
  {
    int v30 = *(_DWORD **)(a2 + 64);
    if (v30 && (uint64_t v31 = *(int *)(a2 + 56), (int)v31 < *v30))
    {
      *(_DWORD *)(a2 + 56) = v31 + 1;
      uint64_t v32 = *(void *)&v30[2 * v31 + 2];
      *(_DWORD *)(v32 + 16) |= 1u;
      uint64_t v33 = *(void *)(v32 + 24);
      if (v33) {
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v34 = sub_13D99A8(*(void *)(a2 + 48));
      uint64_t v32 = sub_188CDC8(a2 + 48, v34);
      *(_DWORD *)(v32 + 16) |= 1u;
      uint64_t v33 = *(void *)(v32 + 24);
      if (v33) {
        goto LABEL_32;
      }
    }
    uint64_t v35 = *(void *)(v32 + 8);
    int v36 = (void *)(v35 & 0xFFFFFFFFFFFFFFFCLL);
    if (v35) {
      int v36 = (void *)*v36;
    }
    uint64_t v33 = sub_15C19EC((uint64_t)v36);
    *(void *)(v32 + 24) = v33;
LABEL_32:
    sub_3D274C(v28, v33);
    unsigned int v37 = *(_DWORD *)(v28 + 56);
    if (v37 <= 8)
    {
      if (((1 << v37) & 0x1EE) != 0) {
        goto LABEL_34;
      }
      if (v37 == 4)
      {
        int v40 = *(_DWORD *)(v32 + 16);
        *(_DWORD *)(v32 + 16) = v40 | 8;
        *(_DWORD *)(v32 + 40) = 4;
        int v41 = *(_DWORD *)(v28 + 60);
        int v42 = v41 / 10;
        int v43 = v41 % 10;
        if (v41 < 0) {
          char v44 = -5;
        }
        else {
          char v44 = 5;
        }
        unsigned int v45 = v42 + (((103 * (char)(v44 + v43)) >> 15) & 1) + ((103 * (char)(v44 + v43)) >> 10);
        int v38 = v40 | 0xA;
        *(_DWORD *)(v32 + 16) = v40 | 0xA;
        *(_DWORD *)(v32 + 32) = v45;
        uint64_t v39 = *(void *)(v28 + 64);
        if (v39 == 0x7FFFFFFFFFFFFFFFLL) {
          continue;
        }
LABEL_35:
        *(_DWORD *)(v32 + 16) = v38 | 4;
        *(_DWORD *)(v32 + 36) = v39;
        continue;
      }
    }
    unsigned int v37 = 1;
LABEL_34:
    int v38 = *(_DWORD *)(v32 + 16) | 8;
    *(_DWORD *)(v32 + 16) = v38;
    *(_DWORD *)(v32 + 40) = v37;
    uint64_t v39 = *(void *)(v28 + 64);
    if (v39 != 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_35;
    }
  }
}

void sub_E14F6C(int a1, int a2, uint64_t a3)
{
  uint64_t v6 = *(unsigned int *)(a3 + 248);
  if (v6 == *(_DWORD *)(a3 + 252))
  {
    sub_188C80C((unsigned int *)(a3 + 248), v6 + 1);
    *(_DWORD *)(*(void *)(a3 + 256) + 4 * v6) = a1;
    *(_DWORD *)(a3 + 248) = v6 + 1;
    int v7 = (unsigned int *)(a3 + 272);
    uint64_t v8 = *(unsigned int *)(a3 + 272);
    if (v8 != *(_DWORD *)(a3 + 276))
    {
LABEL_3:
      *(_DWORD *)(*(void *)(a3 + 280) + 4 * v8) = a2;
      unsigned int *v7 = v8 + 1;
      return;
    }
  }
  else
  {
    *(_DWORD *)(*(void *)(a3 + 256) + 4 * v6) = a1;
    *(_DWORD *)(a3 + 248) = v6 + 1;
    int v7 = (unsigned int *)(a3 + 272);
    uint64_t v8 = *(unsigned int *)(a3 + 272);
    if (v8 != *(_DWORD *)(a3 + 276)) {
      goto LABEL_3;
    }
  }
  sub_188C80C(v7, v8 + 1);
  *(_DWORD *)(*(void *)(a3 + 280) + 4 * v8) = a2;
  unsigned int *v7 = v8 + 1;
}

void sub_E15044(int a1, uint64_t a2)
{
  uint64_t v4 = (_DWORD *)(a2 + 264);
  uint64_t v5 = *(unsigned int *)(a2 + 264);
  if (v5 == *(_DWORD *)(a2 + 268))
  {
    sub_188C80C((unsigned int *)(a2 + 264), v5 + 1);
    *(_DWORD *)(*(void *)(a2 + 272) + 4 * v5) = a1;
  }
  else
  {
    *(_DWORD *)(*(void *)(a2 + 272) + 4 * v5) = a1;
  }
  *uint64_t v4 = v5 + 1;
}

uint64_t sub_E150CC(int a1)
{
  switch(a1)
  {
    case 2:
      uint64_t result = 1;
      break;
    case 3:
      uint64_t result = 2;
      break;
    case 4:
      exception = __cxa_allocate_exception(0x40uLL);
      sub_5E5C(&v6, "Got invalid route type USER_ROUTE in response.");
      uint64_t v3 = (void *)sub_2F404((uint64_t)exception, &v6);
    case 5:
      uint64_t result = 4;
      break;
    case 6:
      uint64_t result = 5;
      break;
    case 7:
      uint64_t v4 = __cxa_allocate_exception(0x40uLL);
      sub_5E5C(&v6, "Got invalid route type UNKNOWN in response.");
      uint64_t v5 = (void *)sub_2F404((uint64_t)v4, &v6);
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

void sub_E15200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

int32x2_t sub_E15250(uint64_t a1, int32x2_t *a2)
{
  a2[2].i32[0] |= 1u;
  uint64_t v4 = (uint64_t)a2[3];
  if (!v4)
  {
    int32x2_t v5 = a2[1];
    long long v6 = (void *)(*(void *)&v5 & 0xFFFFFFFFFFFFFFFCLL);
    if (v5.i8[0]) {
      long long v6 = (void *)*v6;
    }
    sub_13D6A1C((uint64_t)v6);
    uint64_t v4 = v7;
    a2[3] = (int32x2_t)v7;
  }
  sub_5F4D30((const std::string **)a1, v4);
  a2[2].i32[0] |= 6u;
  int32x2_t v8 = *(int32x2_t *)(a1 + 160);
  int8x8_t v9 = (int8x8_t)vceq_s32(v8, (int32x2_t)0x100000001);
  int8x8_t v10 = (int8x8_t)vceq_s32(v8, (int32x2_t)0x200000002);
  int32x2_t result = vsub_s32((int32x2_t)vand_s8(v10, (int8x8_t)0x200000002), (int32x2_t)vbic_s8(v9, v10));
  a2[4] = result;
  return result;
}

uint64_t sub_E152E0(int a1)
{
  if ((a1 - 2) >= 3) {
    return 0;
  }
  else {
    return (a1 - 1);
  }
}

BOOL sub_E152F4(uint64_t a1, uint64_t a2)
{
  if (sub_564868((void *)a1))
  {
    *(_DWORD *)(a2 + 16) |= 1u;
    uint64_t v5 = *(void *)(a2 + 24);
    if (!v5)
    {
      uint64_t v6 = *(void *)(a2 + 8);
      uint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (v6) {
        uint64_t v7 = (void *)*v7;
      }
      uint64_t v5 = sub_13D920C((uint64_t)v7);
      *(void *)(a2 + 24) = v5;
    }
    int v8 = *(_DWORD *)(v5 + 16);
    *(_DWORD *)(v5 + 28) = *(void *)a1;
    char v9 = *(unsigned char *)(a1 + 8);
    *(_DWORD *)(v5 + 16) = v8 | 0xA;
    *(unsigned char *)(v5 + 33) = v9;
    if (!sub_56487C(a1))
    {
LABEL_3:
      BOOL result = sub_564890(a1);
      if (!result) {
        return result;
      }
      goto LABEL_15;
    }
  }
  else if (!sub_56487C(a1))
  {
    goto LABEL_3;
  }
  *(_DWORD *)(a2 + 16) |= 2u;
  uint64_t v10 = *(void *)(a2 + 32);
  if (!v10)
  {
    uint64_t v11 = *(void *)(a2 + 8);
    uint64_t v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
    if (v11) {
      uint64_t v12 = (void *)*v12;
    }
    uint64_t v10 = sub_13D920C((uint64_t)v12);
    *(void *)(a2 + 32) = v10;
  }
  int v13 = *(_DWORD *)(v10 + 16);
  *(_DWORD *)(v10 + 28) = *(void *)(a1 + 16);
  char v14 = *(unsigned char *)(a1 + 24);
  *(_DWORD *)(v10 + 16) = v13 | 0xA;
  *(unsigned char *)(v10 + 33) = v14;
  BOOL result = sub_564890(a1);
  if (result)
  {
LABEL_15:
    int v15 = *(_DWORD *)(a1 + 32);
    if (v15)
    {
      int v16 = v15 / 10;
      int v17 = v15 % 10;
      if (v15 < 0) {
        char v18 = -5;
      }
      else {
        char v18 = 5;
      }
      *(_DWORD *)(a2 + 16) |= 4u;
      *(_DWORD *)(a2 + 40) = v16
                           + (((103 * (char)(v18 + v17)) >> 15) & 1)
                           + ((103 * (char)(v18 + v17)) >> 10);
    }
  }
  return result;
}

void sub_E15460(uint64_t a1, uint64_t a2, long double a3)
{
  uint64_t v3 = *(_DWORD **)a1;
  uint64_t v4 = *(_DWORD **)(a1 + 8);
  if (*(_DWORD **)a1 != v4)
  {
    uint64_t v6 = (uint64_t *)(a2 + 16);
    do
    {
      uint64_t v7 = *(_DWORD **)(a2 + 32);
      if (v7 && (uint64_t v8 = *(int *)(a2 + 24), (int)v8 < *v7))
      {
        *(_DWORD *)(a2 + 24) = v8 + 1;
        uint64_t v9 = *(void *)&v7[2 * v8 + 2];
      }
      else
      {
        uint64_t v10 = sub_15C1918(*v6);
        uint64_t v9 = sub_188CDC8((uint64_t)v6, v10);
      }
      LODWORD(a3) = v3[1];
      long double v11 = exp((double)*(unint64_t *)&a3 * -6.28318531 / 4294967300.0 + 3.14159265);
      long double v12 = atan((v11 + -1.0 / v11) * 0.5);
      int v13 = *(_DWORD *)(v9 + 40);
      *(_DWORD *)(v9 + 40) = v13 | 1;
      LODWORD(v14) = *v3;
      a3 = v12 * 57.2957795;
      *(_DWORD *)(v9 + 40) = v13 | 3;
      *(long double *)(v9 + 48) = a3;
      *(double *)(v9 + 56) = (double)v14 * 360.0 / 4294967300.0 + -180.0;
      int v15 = v3[2];
      if (v15 != 0x7FFFFFFF)
      {
        a3 = (double)v15 / 100.0;
        *(_DWORD *)(v9 + 40) = v13 | 7;
        *(long double *)(v9 + 64) = a3;
      }
      v3 += 3;
    }
    while (v3 != v4);
  }
}

std::string *sub_E155E8(uint64_t a1, int a2, uint64_t a3)
{
  if (sub_6F2FD8(a1))
  {
    *(_DWORD *)(a3 + 40) |= 1u;
    uint64_t v6 = *(void *)(a3 + 8);
    uint64_t v7 = (uint64_t *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
    if (v6) {
      uint64_t v7 = (uint64_t *)*v7;
    }
    sub_1881DF4((std::string **)(a3 + 48), (long long *)a1, v7);
  }
  if (sub_6F2FD8(a1 + 32) && a2)
  {
    *(_DWORD *)(a3 + 40) |= 2u;
    uint64_t v8 = *(void *)(a3 + 8);
    uint64_t v9 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
    if (v8) {
      uint64_t v9 = (uint64_t *)*v9;
    }
    sub_1881DF4((std::string **)(a3 + 56), (long long *)(a1 + 32), v9);
    int v10 = *(_DWORD *)(a1 + 60);
    if (v10 == 3) {
      int v11 = 2;
    }
    else {
      int v11 = 1;
    }
    if (v10 == 2) {
      int v12 = 0;
    }
    else {
      int v12 = v11;
    }
    *(_DWORD *)(a3 + 40) |= 0x20u;
    *(_DWORD *)(a3 + 84) = v12;
  }
  int v13 = *(_DWORD *)(a1 + 120) - 1;
  if (v13 <= 3)
  {
    int v16 = dword_20F0C40[v13];
    *(_DWORD *)(a3 + 40) |= 0x40u;
    *(_DWORD *)(a3 + 88) = v16;
    unint64_t v14 = (int *)(a1 + 64);
    BOOL result = (std::string *)sub_6F2880(a1 + 64);
    if (!result) {
      return result;
    }
  }
  else
  {
    unint64_t v14 = (int *)(a1 + 64);
    BOOL result = (std::string *)sub_6F2880(a1 + 64);
    if (!result) {
      return result;
    }
  }
  *(_DWORD *)(a3 + 40) |= 4u;
  uint64_t v17 = *(void *)(a3 + 8);
  char v18 = (uint64_t *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
  if (v17) {
    char v18 = (uint64_t *)*v18;
  }
  BOOL result = sub_1881DF4((std::string **)(a3 + 64), (long long *)(a1 + 72), v18);
  int v19 = *v14;
  *(_DWORD *)(a3 + 40) |= 0x10u;
  *(_DWORD *)(a3 + 80) = v19;
  return result;
}

void sub_E15750(const std::string **a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 16) |= 1u;
  uint64_t v4 = *(void *)(a2 + 24);
  if (!v4)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    uint64_t v6 = (void *)(v5 & 0xFFFFFFFFFFFFFFFCLL);
    if (v5) {
      uint64_t v6 = (void *)*v6;
    }
    sub_13D6A1C((uint64_t)v6);
    uint64_t v4 = v7;
    *(void *)(a2 + 24) = v7;
  }
  sub_5F4D30(a1, v4);
  *(_DWORD *)(a2 + 16) |= 2u;
  uint64_t v8 = *(void *)(a2 + 32);
  if (!v8)
  {
    uint64_t v9 = *(void *)(a2 + 8);
    int v10 = (void *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
    if (v9) {
      int v10 = (void *)*v10;
    }
    sub_13D6A1C((uint64_t)v10);
    uint64_t v8 = v11;
    *(void *)(a2 + 32) = v11;
  }
  sub_5F4D30(a1 + 20, v8);
  *(_DWORD *)(a2 + 16) |= 4u;
  uint64_t v12 = *(void *)(a2 + 40);
  if (!v12)
  {
    uint64_t v13 = *(void *)(a2 + 8);
    unint64_t v14 = (void *)(v13 & 0xFFFFFFFFFFFFFFFCLL);
    if (v13) {
      unint64_t v14 = (void *)*v14;
    }
    sub_13D6BF8((uint64_t)v14);
    uint64_t v12 = v15;
    *(void *)(a2 + 40) = v15;
  }
  sub_704A08(a1 + 40, v12);
  *(_DWORD *)(a2 + 16) |= 8u;
  uint64_t v16 = *(void *)(a2 + 48);
  if (v16)
  {
    uint64_t v17 = a1 + 220;
  }
  else
  {
    uint64_t v18 = *(void *)(a2 + 8);
    int v19 = (void *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
    if (v18) {
      int v19 = (void *)*v19;
    }
    sub_13D6BF8((uint64_t)v19);
    uint64_t v16 = v20;
    *(void *)(a2 + 48) = v20;
    uint64_t v17 = a1 + 220;
  }
  sub_704A08(v17, v16);
}

uint64_t sub_E158A4(unsigned int *a1, _DWORD *a2)
{
  if (sub_4F44(a1) == 0x7FFFFFFF) {
    int v4 = sub_53FA4((uint64_t)a1);
  }
  else {
    int v4 = sub_4F44(a1);
  }
  if (v4 < 0) {
    int v5 = 65036;
  }
  else {
    int v5 = 500;
  }
  unsigned int v6 = v5 + v4 % 1000 + ((-31981 * (__int16)(v5 + v4 % 1000)) >> 16);
  a2[4] |= 2u;
  a2[7] = v4 / 1000 + ((__int16)v6 >> 9) + ((unsigned __int16)(v6 & 0x8000) >> 15);
  uint64_t result = sub_3FB38C((uint64_t)a1);
  a2[4] |= 1u;
  a2[6] = result;
  return result;
}

uint64_t sub_E15968(unsigned int a1)
{
  if (a1 > 9) {
    return 0;
  }
  else {
    return dword_20F0A38[(char)a1];
  }
}

uint64_t sub_E1598C(int a1)
{
  if ((a1 - 1) > 0x23) {
    return 0;
  }
  else {
    return dword_20F0A60[a1 - 1];
  }
}

int32x2_t sub_E159B0(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  if (!*(_DWORD *)a1)
  {
    v4 |= 4u;
    *(_DWORD *)(a2 + 64) = 0;
  }
  *(int32x2_t *)(a2 + 68) = vmovn_s64(*(int64x2_t *)(a1 + 8));
  *(unsigned char *)(a2 + 76) = *(unsigned char *)(a1 + 576);
  *(_DWORD *)(a2 + 16) = v4 | 0x39;
  int v5 = *(void **)(a2 + 48);
  if (!v5)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    uint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
    if (v6) {
      uint64_t v7 = (void *)*v7;
    }
    int v5 = sub_1478C60((uint64_t)v7);
    *(void *)(a2 + 48) = v5;
  }
  uint64_t v8 = *(int **)(a1 + 56);
  for (uint64_t i = *(int **)(a1 + 64); v8 != i; v8 += 2)
  {
    if (*v8 != -1 && v8[1] != -1)
    {
      uint64_t v15 = (_DWORD *)v5[8];
      if (v15 && (uint64_t v16 = *((int *)v5 + 14), (int)v16 < *v15))
      {
        *((_DWORD *)v5 + 14) = v16 + 1;
        uint64_t v11 = *(_DWORD **)&v15[2 * v16 + 2];
      }
      else
      {
        int v10 = sub_1478BE8(v5[6]);
        uint64_t v11 = (_DWORD *)sub_188CDC8((uint64_t)(v5 + 6), (uint64_t)v10);
      }
      int v12 = *v8;
      int v13 = v11[4];
      v11[4] = v13 | 1;
      v11[6] = v12;
      int v14 = v8[1];
      v11[4] = v13 | 3;
      v11[7] = v14;
    }
  }
  if (sub_63BCCC(a1))
  {
    *(_DWORD *)(a2 + 16) |= 2u;
    uint64_t v18 = *(void *)(a2 + 56);
    if (v18)
    {
      int v19 = (const std::string **)(a1 + 96);
      *(_DWORD *)(v18 + 16) |= 1u;
      uint64_t v20 = *(void *)(v18 + 24);
      if (v20)
      {
LABEL_27:
        sub_5F4D30(v19, v20);
        *(_DWORD *)(v18 + 16) |= 2u;
        uint64_t v27 = *(void *)(v18 + 32);
        if (!v27)
        {
          uint64_t v28 = *(void *)(v18 + 8);
          int v29 = (void *)(v28 & 0xFFFFFFFFFFFFFFFCLL);
          if (v28) {
            int v29 = (void *)*v29;
          }
          sub_13D6A1C((uint64_t)v29);
          uint64_t v27 = v30;
          *(void *)(v18 + 32) = v30;
        }
        sub_5F4D30((const std::string **)(a1 + 256), v27);
        *(_DWORD *)(v18 + 16) |= 4u;
        uint64_t v32 = *(void *)(v18 + 40);
        if (!v32)
        {
          uint64_t v33 = *(void *)(v18 + 8);
          uint64_t v34 = (void *)(v33 & 0xFFFFFFFFFFFFFFFCLL);
          if (v33) {
            uint64_t v34 = (void *)*v34;
          }
          uint64_t v32 = sub_13DAB08((uint64_t)v34);
          *(void *)(v18 + 40) = v32;
        }
        sub_523A2C(a1 + 416, v32, v31);
        *(_DWORD *)(v18 + 16) |= 8u;
        uint64_t v35 = *(void **)(v18 + 48);
        if (!v35)
        {
          uint64_t v36 = *(void *)(v18 + 8);
          unsigned int v37 = (void *)(v36 & 0xFFFFFFFFFFFFFFFCLL);
          if (v36) {
            unsigned int v37 = (void *)*v37;
          }
          uint64_t v35 = sub_1478C60((uint64_t)v37);
          *(void *)(v18 + 48) = v35;
        }
        int v38 = *(int **)(a1 + 528);
        for (uint64_t j = *(int **)(a1 + 536); v38 != j; v38 += 2)
        {
          if (*v38 != -1 && v38[1] != -1)
          {
            unsigned int v45 = (_DWORD *)v35[8];
            if (v45 && (uint64_t v46 = *((int *)v35 + 14), (int)v46 < *v45))
            {
              *((_DWORD *)v35 + 14) = v46 + 1;
              int v41 = *(_DWORD **)&v45[2 * v46 + 2];
            }
            else
            {
              int v40 = sub_1478BE8(v35[6]);
              int v41 = (_DWORD *)sub_188CDC8((uint64_t)(v35 + 6), (uint64_t)v40);
            }
            int v42 = *v38;
            int v43 = v41[4];
            v41[4] = v43 | 1;
            v41[6] = v42;
            int v44 = v38[1];
            v41[4] = v43 | 3;
            v41[7] = v44;
          }
        }
        goto LABEL_49;
      }
    }
    else
    {
      uint64_t v21 = *(void *)(a2 + 8);
      int v22 = (void *)(v21 & 0xFFFFFFFFFFFFFFFCLL);
      if (v21) {
        int v22 = (void *)*v22;
      }
      sub_13D6098((uint64_t)v22);
      uint64_t v18 = v23;
      *(void *)(a2 + 56) = v23;
      int v19 = (const std::string **)(a1 + 96);
      *(_DWORD *)(v23 + 16) |= 1u;
      uint64_t v20 = *(void *)(v23 + 24);
      if (v20) {
        goto LABEL_27;
      }
    }
    uint64_t v24 = *(void *)(v18 + 8);
    uint64_t v25 = (void *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
    if (v24) {
      uint64_t v25 = (void *)*v25;
    }
    sub_13D6A1C((uint64_t)v25);
    uint64_t v20 = v26;
    *(void *)(v18 + 24) = v26;
    goto LABEL_27;
  }
LABEL_49:
  uint64_t v47 = *(int64x2_t **)(a1 + 552);
  for (k = *(int64x2_t **)(a1 + 560); v47 != k; uint64_t v47 = (int64x2_t *)((char *)v47 + 24))
  {
    int v53 = *(_DWORD **)(a2 + 40);
    if (v53 && (uint64_t v54 = *(int *)(a2 + 32), (int)v54 < *v53))
    {
      *(_DWORD *)(a2 + 32) = v54 + 1;
      int v50 = *(int32x2_t **)&v53[2 * v54 + 2];
    }
    else
    {
      uint64_t v49 = sub_13D6118(*(void *)(a2 + 24));
      int v50 = (int32x2_t *)sub_188CDC8(a2 + 24, v49);
    }
    __int32 v51 = v50[2].i32[0];
    int32x2_t result = vmovn_s64(*v47);
    v50[3] = result;
    uint64_t v52 = v47[1].i64[0];
    v50[2].i32[0] = v51 | 7;
    v50[4].i32[0] = v52;
  }
  return result;
}

uint64_t sub_E15D50(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(__int16 **)result;
  int v5 = *(__int16 **)(result + 8);
  if (*(__int16 **)result != v5)
  {
    uint64_t v6 = (uint64_t *)(a2 + 24);
    do
    {
      uint64_t v7 = *(_DWORD **)(a2 + 40);
      if (v7 && (uint64_t v8 = *(int *)(a2 + 32), (int)v8 < *v7))
      {
        *(_DWORD *)(a2 + 32) = v8 + 1;
        int32x2_t result = *(void *)&v7[2 * v8 + 2];
      }
      else
      {
        uint64_t v9 = sub_13D623C(*v6);
        int32x2_t result = sub_188CDC8(a2 + 24, v9);
      }
      int v10 = *v4;
      int v11 = *(_DWORD *)(result + 16);
      *(_DWORD *)(result + 16) = v11 | 1;
      *(_DWORD *)(result + 24) = v10;
      if (*((unsigned char *)v4 + 2))
      {
        *(_DWORD *)(result + 16) = v11 | 5;
        *(_DWORD *)(result + 32) = 2;
      }
      v4 += 2;
    }
    while (v4 != v5);
  }
  unsigned int v12 = *(_DWORD *)(v3 + 24);
  if (v12 < 2)
  {
    *(_DWORD *)(a2 + 16) |= 1u;
    *(_DWORD *)(a2 + 48) = v12;
  }
  if (*(unsigned char *)(v3 + 32) == 1)
  {
    int v13 = 0;
  }
  else
  {
    if (*(unsigned char *)(v3 + 32)) {
      return result;
    }
    int v13 = 1;
  }
  *(_DWORD *)(a2 + 16) |= 4u;
  *(_DWORD *)(a2 + 56) = v13;
  return result;
}

uint64_t sub_E15E68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_52058(a1);
  *(_DWORD *)(a2 + 16) |= 1u;
  *(void *)(a2 + 24) = v4;
  uint64_t result = sub_52060(a1);
  *(_DWORD *)(a2 + 16) |= 2u;
  *(void *)(a2 + 32) = result;
  return result;
}

uint64_t sub_E15EB8(uint64_t result)
{
  if ((result - 1) >= 3) {
    return 0;
  }
  else {
    return result;
  }
}

std::string *sub_E15EC8(long long *a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 16) |= 1u;
  uint64_t v4 = *(void *)(a2 + 8);
  int v5 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  if (v4) {
    int v5 = (uint64_t *)*v5;
  }
  sub_1881DF4((std::string **)(a2 + 24), a1, v5);
  *(_DWORD *)(a2 + 16) |= 2u;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = (uint64_t *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
  if (v6)
  {
    uint64_t v7 = (uint64_t *)*v7;
    uint64_t v8 = (std::string **)(a2 + 32);
    uint64_t v9 = (long long *)((char *)a1 + 24);
  }
  else
  {
    uint64_t v8 = (std::string **)(a2 + 32);
    uint64_t v9 = (long long *)((char *)a1 + 24);
  }
  return sub_1881DF4(v8, v9, v7);
}

uint64_t sub_E15F70(unsigned int a1)
{
  if (a1 > 0x53) {
    return 0;
  }
  else {
    return dword_20F0AF0[a1];
  }
}

uint64_t sub_E15F90(uint64_t result)
{
  if (result >= 3) {
    return 0;
  }
  else {
    return result;
  }
}

void sub_E15F9C()
{
  byte_25F3A9F = 1;
  word_25F3A88 = 65;
  byte_25F3AB7 = 1;
  word_25F3AA0 = 65;
  char v1 = 7;
  strcpy((char *)v0, "UNKNOWN");
  int v2 = 0;
  char v4 = 14;
  strcpy((char *)v3, "ROUTES_THROUGH");
  int v5 = 1;
  char v7 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v8 = 3;
  char v10 = 11;
  strcpy((char *)v9, "ROUTES_FROM");
  int v11 = 2;
  xmmword_25F3B18 = 0u;
  *(_OWORD *)&qword_25F3B28 = 0u;
  dword_25F3B38 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25F3B18, (uint64_t)v0, (uint64_t)v0);
  sub_3A6EF0((uint64_t)&xmmword_25F3B18, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25F3B18, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25F3B18, (uint64_t)v9, (uint64_t)v9);
  if (v10 < 0)
  {
    operator delete(v9[0]);
    if ((v7 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v3[0]);
      if ((v1 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v0[0]);
      goto LABEL_5;
    }
  }
  else if ((v7 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v4 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v1 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25F3ACF = 8;
  strcpy((char *)&qword_25F3AB8, "any_mode");
  byte_25F3AE7 = 7;
  strcpy((char *)&dword_25F3AD0, "cycling");
  byte_25F3AFF = 7;
  strcpy((char *)&dword_25F3AE8, "driving");
  byte_25F3B17 = 7;
  strcpy((char *)&dword_25F3B00, "walking");
}

void sub_E161F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25F3B28) {
    sub_20B0BA4((void **)qword_25F3B28);
  }
  unsigned int v37 = (void *)xmmword_25F3B18;
  *(void *)&xmmword_25F3B18 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void *sub_E16298(void *a1, void *a2)
{
  *a1 = a2;
  a1[1] = sub_3750CC(a2);
  char v16 = 15;
  uint64_t v14 = 0;
  strcpy((char *)v15, "ResponseBuilder");
  unsigned int v12 = 0;
  int v13 = 0;
  char v4 = sub_374CDC((uint64_t)a2, (uint64_t)v15, (uint64_t *)&v12);
  sub_3CB2F0(v4, (uint64_t)__p);
  sub_E1C66C((uint64_t)(a1 + 2), __p);
  int v5 = v18;
  if (v18)
  {
    do
    {
      char v10 = *(char **)v5;
      sub_57AC8((uint64_t *)v5 + 5);
      if (v5[39] < 0) {
        operator delete(*((void **)v5 + 2));
      }
      operator delete(v5);
      int v5 = v10;
    }
    while (v10);
  }
  uint64_t v6 = __p[0];
  __p[0] = 0;
  if (v6) {
    operator delete(v6);
  }
  char v7 = (void **)v12;
  if (v12)
  {
    int v8 = v13;
    uint64_t v9 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      uint64_t v9 = v12;
    }
    int v13 = v7;
    operator delete(v9);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  return a1;
}

void sub_E163E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_E1641C(unsigned char *a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8 = sub_162C594(a5, 0, 0);
  uint64_t v9 = *a2;
  size_t v119 = a2[1];
  unint64_t v120 = a2;
  uint64_t v121 = v8;
  if (*a2 == v119)
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)__p);
      sub_188FC78(__p, (uint64_t)"No routes found", 15);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&v122, 1u);
      if (v123 < 0) {
        operator delete(v122);
      }
      if (SHIBYTE(v129) < 0) {
        operator delete(v127);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *(_DWORD *)(v121 + 40) |= 0x100000u;
    *(_DWORD *)(v121 + 536) = 20;
  }
  else
  {
    char v10 = (uint64_t *)(v8 + 48);
    do
    {
      int v11 = *(_DWORD **)(v121 + 64);
      if (v11 && (uint64_t v12 = *(int *)(v121 + 56), (int)v12 < *v11))
      {
        *(_DWORD *)(v121 + 56) = v12 + 1;
        uint64_t v13 = *(void *)&v11[2 * v12 + 2];
      }
      else
      {
        uint64_t v14 = sub_13D8E84(*v10);
        uint64_t v13 = sub_188CDC8((uint64_t)v10, v14);
      }
      int v15 = sub_6478E0((uint64_t)v9);
      *(_DWORD *)(v13 + 40) |= 4u;
      uint64_t v16 = *(void *)(v13 + 8);
      uint64_t v17 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
      if (v16) {
        uint64_t v17 = (uint64_t *)*v17;
      }
      HIBYTE(v125) = 4;
      LODWORD(__p[0]) = v15;
      BYTE4(__p[0]) = 0;
      sub_1881DF4((std::string **)(v13 + 672), (long long *)__p, v17);
      if (SHIBYTE(v125) < 0) {
        operator delete(__p[0]);
      }
      int v18 = sub_6478D8((uint64_t)v9);
      int v19 = sub_E150CC(v18);
      *(_DWORD *)(v13 + 40) |= 0x1000000u;
      *(_DWORD *)(v13 + 836) = v19;
      uint64_t v20 = (unsigned __int8 *)sub_6477D4((uint64_t)v9);
      BOOL v21 = (*v20 | *((_DWORD *)v20 + 13)) == 0;
      *(_DWORD *)(v13 + 44) |= 1u;
      *(unsigned char *)(v13 + 868) = v21;
      char v22 = *(unsigned char *)(sub_6477D4((uint64_t)v9) + 1) ^ 1;
      *(_DWORD *)(v13 + 44) |= 2u;
      *(unsigned char *)(v13 + 869) = v22;
      sub_E17128((uint64_t)a1, v9, (_DWORD *)v13);
      unsigned int v23 = sub_649094();
      int v24 = sub_E124B8(v23);
      *(_DWORD *)(v13 + 40) |= 0x200000u;
      *(_DWORD *)(v13 + 824) = v24;
      uint64_t v25 = sub_6467E8(v9, 0);
      int v26 = sub_E124DC(*(unsigned __int8 *)(v25 + 1057));
      *(_DWORD *)(v13 + 40) |= 0x2000000u;
      *(_DWORD *)(v13 + 840) = v26;
      uint64_t v27 = sub_647CD8((uint64_t)v9);
      int v29 = *(const std::string **)v27;
      uint64_t v28 = *(const std::string **)(v27 + 8);
      if (*(const std::string **)v27 != v28)
      {
        uint64_t v30 = (uint64_t **)(v13 + 128);
        do
        {
          uint8x8_t v31 = *(_DWORD **)(v13 + 144);
          if (v31 && (uint64_t v32 = *(int *)(v13 + 136), (int)v32 < *v31))
          {
            *(_DWORD *)(v13 + 136) = v32 + 1;
            uint64_t v33 = *(std::string **)&v31[2 * v32 + 2];
          }
          else
          {
            if (!*v30) {
              operator new();
            }
            *uint64_t v35 = v34;
            v35[1] = sub_3A6EDC;
            *uint64_t v34 = 0;
            v34[1] = 0;
            v34[2] = 0;
            uint64_t v33 = (std::string *)sub_188CDC8(v13 + 128, (uint64_t)v34);
          }
          std::string::operator=(v33, v29++);
        }
        while (v29 != v28);
      }
      uint64_t v36 = sub_647B84((uint64_t)v9);
      int v38 = *(const std::string **)v36;
      unsigned int v37 = *(const std::string **)(v36 + 8);
      if (*(const std::string **)v36 != v37)
      {
        do
        {
          uint64_t v39 = *(_DWORD **)(v13 + 312);
          if (v39 && (uint64_t v40 = *(int *)(v13 + 304), (int)v40 < *v39))
          {
            *(_DWORD *)(v13 + 304) = v40 + 1;
            uint64_t v41 = *(void *)&v39[2 * v40 + 2];
          }
          else
          {
            sub_13D6A1C(*(void *)(v13 + 296));
            uint64_t v41 = sub_188CDC8(v13 + 296, v42);
          }
          int v43 = *(_DWORD **)(v41 + 40);
          if (v43 && (uint64_t v44 = *(int *)(v41 + 32), (int)v44 < *v43))
          {
            *(_DWORD *)(v41 + 32) = v44 + 1;
            unsigned int v45 = *(std::string **)&v43[2 * v44 + 2];
          }
          else
          {
            uint64_t v46 = v41 + 24;
            uint64_t v47 = *(uint64_t **)(v41 + 24);
            if (!v47) {
              operator new();
            }
            *uint64_t v49 = v48;
            v49[1] = sub_3A6EDC;
            void *v48 = 0;
            v48[1] = 0;
            v48[2] = 0;
            unsigned int v45 = (std::string *)sub_188CDC8(v46, (uint64_t)v48);
          }
          std::string::operator=(v45, v38++);
        }
        while (v38 != v37);
      }
      int v50 = (void *)sub_647C20((uint64_t)v9);
      if (!sub_45FB38(v50))
      {
        __int32 v51 = (const std::string **)sub_647C20((uint64_t)v9);
        *(_DWORD *)(v13 + 40) |= 0x2000u;
        uint64_t v52 = *(void *)(v13 + 760);
        if (!v52)
        {
          uint64_t v53 = *(void *)(v13 + 8);
          uint64_t v54 = (void *)(v53 & 0xFFFFFFFFFFFFFFFCLL);
          if (v53) {
            uint64_t v54 = (void *)*v54;
          }
          sub_13D6A1C((uint64_t)v54);
          uint64_t v52 = v55;
          *(void *)(v13 + 760) = v55;
        }
        sub_5F4D30(v51, v52);
      }
      sub_E1741C((uint64_t)a1, v9, a3, v13);
      unint64_t v56 = (void *)sub_6467E8(v9, 0);
      uint64_t v57 = v56;
      if (v56[1463] != v56[1464] && v56[1461] != 0x7FFFFFFFFFFFFFFFLL && v56[1462] != 0x7FFFFFFFFFFFFFFFLL)
      {
        *(_DWORD *)(v13 + 40) |= 0x4000u;
        uint64_t v58 = *(void *)(v13 + 768);
        if (!v58)
        {
          uint64_t v59 = *(void *)(v13 + 8);
          long double v60 = (void *)(v59 & 0xFFFFFFFFFFFFFFFCLL);
          if (v59) {
            long double v60 = (void *)*v60;
          }
          sub_13D7B20((uint64_t)v60);
          uint64_t v58 = v61;
          *(void *)(v13 + 768) = v61;
        }
        sub_E12EEC(v57 + 1461, v58);
      }
      sub_E175A4((uint64_t)a1, v9, v13);
      int v62 = (void *)nullsub_1(v9);
      if (379049677 * ((v62[1] - *v62) >> 3))
      {
        sub_6467E8(v9, 0);
        sub_E18858((uint64_t)a1);
      }
      sub_E17694((uint64_t)a1, (uint64_t)v9, v13);
      v9 += 945;
    }
    while (v9 != v119);
    uint64_t v63 = sub_3777C0(*(void **)a1);
    uint64_t v64 = *v120;
    long long v65 = v120[1];
    if (*v120 == v65)
    {
LABEL_55:
      char v70 = 1;
    }
    else
    {
      uint64_t v66 = v63;
      while (1)
      {
        char v67 = (uint64_t *)nullsub_1(v64);
        uint64_t v69 = *v67;
        uint64_t v68 = v67[1];
        if (*v67 != v68) {
          break;
        }
LABEL_54:
        v64 += 945;
        if (v64 == v65) {
          goto LABEL_55;
        }
      }
      while (sub_3D34A8(v66, v69, *(unsigned __int8 *)(a3 + 40)) == 2)
      {
        v69 += 12328;
        if (v69 == v68) {
          goto LABEL_54;
        }
      }
      char v70 = 0;
    }
    *(_DWORD *)(v121 + 40) |= 0x1000000u;
    *(unsigned char *)(v121 + 549) = v70;
    uint64_t v71 = *v120;
    int v72 = v120[1];
    if (*v120 == v72)
    {
LABEL_69:
      char v76 = 0;
    }
    else
    {
      while (1)
      {
        uint64_t v73 = nullsub_1(v71);
        uint64_t v75 = *(void **)v73;
        uint64_t v74 = *(void **)(v73 + 8);
        if (*(void **)v73 != v74) {
          break;
        }
LABEL_68:
        v71 += 945;
        if (v71 == v72) {
          goto LABEL_69;
        }
      }
      while (1)
      {
        sub_46C77C(v75, __p);
        if (sub_E28250((void *)__p[0], (unint64_t)__p[1], v125, v126, (uint64_t)a1)) {
          break;
        }
        v75 += 1541;
        if (v75 == v74) {
          goto LABEL_68;
        }
      }
      char v76 = 1;
    }
    *(_DWORD *)(v121 + 40) |= 0x4000000u;
    *(unsigned char *)(v121 + 551) = v76;
    if (*(unsigned char *)a3) {
      sub_E17A18(*((void *)a1 + 1), (uint64_t)v120, v121);
    }
    if ((int)(-72719023 * (v120[1] - *v120)) >= 1)
    {
      uint64_t v77 = 0;
      uint64_t v78 = -72719023 * (v120[1] - *v120);
      do
      {
        uint64_t v79 = *(void *)(*(void *)(v121 + 64) + 8 * v77 + 8);
        uint64_t v80 = (uint64_t **)nullsub_1(&(*v120)[945 * v77]);
        int v82 = *v80;
        unint64_t v81 = v80[1];
        while (v82 != v81)
        {
          if (v82[1503] == v82[1504]) {
            sub_E110A0(v82 + 916, v79);
          }
          else {
            sub_E14810(v82 + 1503, v79);
          }
          v82 += 1541;
        }
        ++v77;
      }
      while (v77 != v78);
    }
    sub_E17D84((uint64_t)a1, v120, v121);
    uint64_t v85 = *a4;
    uint64_t v84 = a4[1];
    if (*a4 != v84)
    {
      char v86 = (uint64_t *)(v121 + 120);
      do
      {
        int v87 = *(_DWORD **)(v121 + 136);
        if (v87 && (uint64_t v88 = *(int *)(v121 + 128), (int)v88 < *v87))
        {
          *(_DWORD *)(v121 + 128) = v88 + 1;
          uint64_t v89 = *(void *)&v87[2 * v88 + 2];
        }
        else
        {
          uint64_t v90 = sub_13D9608(*v86);
          uint64_t v89 = sub_188CDC8((uint64_t)v86, v90);
        }
        sub_E1163C(v85, v89, 0, v83);
        v85 += 1120;
      }
      while (v85 != v84);
    }
    sub_E17EE0((uint64_t)a1, v120, v121);
    uint64_t v91 = sub_1883FB0((void *)(v121 + 16), dword_254E9B0, 11, (uint64_t)&off_252C740, 0);
    char v92 = (long long *)(sub_6467E8(*v120, 0) + 7400);
    *(_DWORD *)(v91 + 16) |= 1u;
    uint64_t v93 = *(void *)(v91 + 8);
    uint64_t v94 = (uint64_t *)(v93 & 0xFFFFFFFFFFFFFFFCLL);
    if (v93) {
      uint64_t v94 = (uint64_t *)*v94;
    }
    sub_1881DF4((std::string **)(v91 + 48), v92, v94);
    uint64_t v95 = (uint64_t *)sub_374CE4(*(void **)a1);
    char v96 = sub_2ABCBC(*v95);
    int v97 = *(_DWORD *)(v121 + 40);
    *(unsigned char *)(v121 + 550) = v96;
    *(_DWORD *)(v121 + 40) = v97 | 0x2100000;
    *(_DWORD *)(v121 + 536) = 0;
    if (*(unsigned char *)(a3 + 32))
    {
      sub_E2FF18((uint64_t)__p, (int *)a3);
      int v98 = -72719023 * (v120[1] - *v120);
      if (v98 >= 1)
      {
        sub_E2FF4C((void (***)(void, uint64_t, uint64_t))__p, (uint64_t)*v120, *(void *)(*(void *)(v121 + 64) + 8));
        uint64_t v99 = sub_1883FB0((void *)(v121 + 16), dword_254E9B0, 11, (uint64_t)&off_252C740, 0);
        uint64_t v100 = (long long *)sub_648354((uint64_t)*v120);
        *(_DWORD *)(v99 + 16) |= 2u;
        uint64_t v101 = *(void *)(v99 + 8);
        uint64_t v102 = (uint64_t *)(v101 & 0xFFFFFFFFFFFFFFFCLL);
        if (v101) {
          uint64_t v102 = (uint64_t *)*v102;
        }
        sub_1881DF4((std::string **)(v99 + 56), v100, v102);
        if (v98 != 1)
        {
          uint64_t v103 = 0;
          uint64_t v104 = 945;
          do
          {
            sub_E2FF4C((void (***)(void, uint64_t, uint64_t))__p, (uint64_t)&(*v120)[v104], *(void *)(*(void *)(v121 + 64) + 8 * v103 + 16));
            v104 += 945;
            ++v103;
          }
          while (v98 - 1 != v103);
        }
        if ((int)(-72719023 * (v120[1] - *v120)) >= 1)
        {
          unint64_t v105 = 0;
          uint64_t v106 = -72719023 * (v120[1] - *v120);
          do
          {
            uint64_t v107 = *(void *)(*(void *)(v121 + 64) + 8 * v105 + 8);
            size_t v108 = &(*v120)[945 * v105];
            int v109 = (void *)nullsub_1(v108);
            uint64_t v110 = v109[1] - *v109;
            if (v110)
            {
              unint64_t v111 = 0;
              uint64_t v112 = v110 / 12328;
              do
              {
                __darwin_ct_rune_t v113 = (void *)sub_6467E8(v108, v111);
                sub_E1AF28(a1, v113, v105, v111++, v107, v121);
              }
              while (v112 != v111);
            }
            ++v105;
          }
          while (v105 != v106);
        }
      }
    }
    else
    {
      sub_DE814C((uint64_t)__p, (int *)a3);
      unint64_t v114 = 0xBAA6550FFBAA6551 * (v120[1] - *v120);
      if ((int)v114 >= 1)
      {
        unint64_t v115 = 0;
        uint64_t v116 = 7560 * v114;
        uint64_t v117 = 8;
        do
        {
          sub_DE8150((uint64_t)__p, &(*v120)[v115 / 8], *(void *)(*(void *)(v121 + 64) + v117));
          v115 += 7560;
          v117 += 8;
        }
        while (v116 != v115);
      }
    }
    __p[0] = &off_243EE28;
    if (v133 < 0) {
      operator delete(v132);
    }
    if (v130)
    {
      unint64_t v131 = v130;
      operator delete(v130);
    }
    if (v128)
    {
      int v129 = v128;
      operator delete(v128);
    }
    if (v125)
    {
      unint64_t v126 = (unint64_t)v125;
      operator delete(v125);
    }
  }
}

void sub_E17018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a20);
    sub_162D64C(a13);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a20);
  sub_162D64C(a13);
  _Unwind_Resume(a1);
}

void sub_E17064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

uint64_t sub_E17128(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v5 = sub_646C34(a2);
  if (v5 < 0) {
    __int16 v6 = -50;
  }
  else {
    __int16 v6 = 50;
  }
  a3[10] |= 0x400000u;
  a3[207] = (int)v5 / 100
          + ((5243 * (__int16)(v6 + (int)v5 % 100)) >> 19)
          + ((5243 * (__int16)(v6 + (int)v5 % 100)) >> 31);
  int v7 = sub_646CE8((uint64_t)a2);
  if (v7 < 0) {
    char v8 = -5;
  }
  else {
    char v8 = 5;
  }
  a3[10] |= 0x800000u;
  a3[208] = v7 / 10 + (((103 * (char)(v8 + v7 % 10)) >> 15) & 1) + ((103 * (char)(v8 + v7 % 10)) >> 10);
  if (sub_64991C((unsigned int **)a2))
  {
    int v10 = sub_649908((unsigned int **)a2);
    if (v10 < 0) {
      char v11 = -5;
    }
    else {
      char v11 = 5;
    }
    a3[10] |= 0x80000000;
    a3[216] = v10 / 10
            + (((103 * (char)(v11 + v10 % 10)) >> 15) & 1)
            + ((103 * (char)(v11 + v10 % 10)) >> 10);
    if (!sub_64999C((unsigned int **)a2))
    {
LABEL_9:
      if (!sub_649A9C((unsigned int **)a2)) {
        goto LABEL_10;
      }
      goto LABEL_20;
    }
  }
  else if (!sub_64999C((unsigned int **)a2))
  {
    goto LABEL_9;
  }
  int v12 = sub_649988((unsigned int **)a2);
  if (v12 < 0) {
    char v13 = -5;
  }
  else {
    char v13 = 5;
  }
  a3[10] |= 0x10000000u;
  a3[213] = v12 / 10
          + (((103 * (char)(v13 + v12 % 10)) >> 15) & 1)
          + ((103 * (char)(v13 + v12 % 10)) >> 10);
  if (!sub_649A9C((unsigned int **)a2))
  {
LABEL_10:
    uint64_t result = sub_649A1C((unsigned int **)a2);
    if (!result) {
      return result;
    }
    goto LABEL_24;
  }
LABEL_20:
  int v14 = sub_649A88((unsigned int **)a2);
  if (v14 < 0) {
    char v15 = -5;
  }
  else {
    char v15 = 5;
  }
  a3[10] |= 0x40000000u;
  a3[215] = v14 / 10
          + (((103 * (char)(v15 + v14 % 10)) >> 15) & 1)
          + ((103 * (char)(v15 + v14 % 10)) >> 10);
  uint64_t result = sub_649A1C((unsigned int **)a2);
  if (result)
  {
LABEL_24:
    uint64_t result = sub_649A08((unsigned int **)a2);
    if ((int)result < 0) {
      char v16 = -5;
    }
    else {
      char v16 = 5;
    }
    a3[10] |= 0x20000000u;
    a3[214] = (int)result / 10
            + (((103 * (char)(v16 + (int)result % 10)) >> 15) & 1)
            + ((103 * (char)(v16 + (int)result % 10)) >> 10);
  }
  return result;
}

std::string *sub_E1741C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = (std::string *)sub_6484B0(a2, *(unsigned __int8 *)(a3 + 39));
  if (result)
  {
    char v8 = (uint64_t *)sub_5231C((uint64_t)a2);
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1];
    if (*v8 != v10)
    {
      do
      {
        int v12 = *(_DWORD **)(a4 + 216);
        if (v12 && (uint64_t v13 = *(int *)(a4 + 208), (int)v13 < *v12))
        {
          *(_DWORD *)(a4 + 208) = v13 + 1;
          uint64_t v14 = *(void *)&v12[2 * v13 + 2];
          int v15 = *(unsigned __int8 *)(a3 + 1);
          *(_DWORD *)(v14 + 16) |= 1u;
          uint64_t v11 = *(void *)(v14 + 48);
          if (!v11) {
            goto LABEL_11;
          }
        }
        else
        {
          uint64_t v16 = sub_13D8CD0(*(void *)(a4 + 200));
          uint64_t v14 = sub_188CDC8(a4 + 200, v16);
          int v15 = *(unsigned __int8 *)(a3 + 1);
          *(_DWORD *)(v14 + 16) |= 1u;
          uint64_t v11 = *(void *)(v14 + 48);
          if (!v11)
          {
LABEL_11:
            uint64_t v17 = *(void *)(v14 + 8);
            int v18 = (void *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
            if (v17) {
              int v18 = (void *)*v18;
            }
            uint64_t v11 = sub_15C1DB0((uint64_t)v18);
            *(void *)(v14 + 48) = v11;
          }
        }
        sub_E155E8(v9, v15 != 0, v11);
        v9 += 176;
      }
      while (v9 != v10);
    }
    uint64_t result = (std::string *)sub_5231C((uint64_t)a2);
    if (result->__r_.__value_.__r.__words[0] != result->__r_.__value_.__l.__size_)
    {
      int v19 = *(long long **)sub_5231C((uint64_t)a2);
      *(_DWORD *)(a4 + 40) |= 1u;
      uint64_t v20 = *(void *)(a4 + 8);
      BOOL v21 = (uint64_t *)(v20 & 0xFFFFFFFFFFFFFFFCLL);
      if (v20) {
        BOOL v21 = (uint64_t *)*v21;
      }
      return sub_1881DF4((std::string **)(a4 + 656), v19, v21);
    }
  }
  return result;
}

void sub_E175A4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (void *)nullsub_1(a2);
  uint64_t v6 = v5[1] - *v5;
  if (v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0xFF55E3181697D6CDLL * (v6 >> 3);
    do
    {
      uint64_t v9 = sub_6467E8(a2, v7);
      uint64_t v10 = *(void *)(v9 + 11952);
      uint64_t v11 = *(void *)(v9 + 11960);
      while (v10 != v11)
      {
        uint64_t v14 = *(_DWORD **)(a3 + 240);
        if (v14 && (uint64_t v15 = *(int *)(a3 + 232), (int)v15 < *v14))
        {
          *(_DWORD *)(a3 + 232) = v15 + 1;
          uint64_t v13 = *(void *)&v14[2 * v15 + 2];
        }
        else
        {
          sub_13D97FC(*(void *)(a3 + 224));
          uint64_t v13 = sub_188CDC8(a3 + 224, v12);
        }
        sub_E13288(v10, v13);
        v10 += 608;
      }
      ++v7;
    }
    while (v7 != v8);
  }
}

void sub_E17694(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v5 = (uint64_t *)sub_376F8C(*(void **)a1);
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v6 = (uint64_t *)nullsub_1(a2);
    uint64_t v7 = *v6;
    uint64_t v8 = v6[1];
    if (*v6 != v8)
    {
      do
      {
        if (!sub_64EFF0(v7)) {
          goto LABEL_4;
        }
        uint64_t v9 = sub_46CAAC(v7);
        unsigned int v38 = *(_DWORD *)(v9 + 112);
        if (v38 <= 1) {
          uint64_t v37 = *(void *)(v9 + 104);
        }
        sub_28E4E4(v5, (uint64_t)&v37, (unint64_t)&v23);
        sub_30C0C(&v34, v30);
        sub_8AC4C((uint64_t)&v33);
        uint64_t v10 = (void **)__p;
        if (__p)
        {
          uint64_t v11 = v32;
          uint64_t v12 = __p;
          if (v32 != __p)
          {
            do
            {
              if (*((char *)v11 - 1) < 0) {
                operator delete(*(v11 - 3));
              }
              v11 -= 3;
            }
            while (v11 != v10);
            uint64_t v12 = __p;
          }
          uint64_t v32 = v10;
          operator delete(v12);
        }
        if (v29 < 0)
        {
          operator delete(v28);
          if ((v27 & 0x80000000) == 0)
          {
LABEL_18:
            if (SHIBYTE(v25) < 0) {
              goto LABEL_22;
            }
            goto LABEL_4;
          }
        }
        else if ((v27 & 0x80000000) == 0)
        {
          goto LABEL_18;
        }
        operator delete(v26);
        if (SHIBYTE(v25) < 0) {
LABEL_22:
        }
          operator delete(v23);
LABEL_4:
        v7 += 12328;
      }
      while (v7 != v8);
    }
    unsigned int v23 = 0;
    int v24 = 0;
    uint64_t v25 = 0;
    HIBYTE(v22[2]) = 17;
    strcpy((char *)v22, "Charging Stations");
    sub_DEC58C((uint64_t *)&v23, (uint64_t *)&v34, (uint64_t)v22, 0xFFFFFFFF, 0, 0, 0.0);
    if (SHIBYTE(v22[2]) < 0) {
      operator delete(v22[0]);
    }
    sub_DEC8F0((char **)&v23, (uint64_t)v22);
    uint64_t v13 = (char *)v22[0];
    uint64_t v14 = (char *)v22[1];
    if (v22[0] != v22[1])
    {
      uint64_t v15 = (uint64_t **)(a3 + 16);
      do
      {
        uint64_t v16 = (std::string *)sub_1884274(v15, dword_254EA30, 11, (uint64_t)&off_252CDD0, 0);
        sub_11B9D5C(v16, (uint64_t)v13);
        v13 += 48;
      }
      while (v13 != v14);
      uint64_t v13 = (char *)v22[0];
    }
    if (v13)
    {
      uint64_t v17 = (char *)v22[1];
      int v18 = v13;
      if (v22[1] != v13)
      {
        do
          uint64_t v17 = (char *)sub_11B9574(v17 - 48);
        while (v17 != v13);
        int v18 = v22[0];
      }
      v22[1] = v13;
      operator delete(v18);
    }
    int v19 = (void **)v23;
    if (!v23) {
      goto LABEL_45;
    }
    uint64_t v20 = v24;
    BOOL v21 = v23;
    if (v24 == v23)
    {
LABEL_44:
      int v24 = v19;
      operator delete(v21);
LABEL_45:
      if (v34)
      {
        uint64_t v35 = v34;
        operator delete(v34);
      }
      return;
    }
    while (1)
    {
      if (*((char *)v20 - 25) < 0)
      {
        operator delete(*(v20 - 6));
        if (*((char *)v20 - 49) < 0) {
LABEL_42:
        }
          operator delete(*(v20 - 9));
      }
      else if (*((char *)v20 - 49) < 0)
      {
        goto LABEL_42;
      }
      v20 -= 10;
      if (v20 == v19)
      {
        BOOL v21 = v23;
        goto LABEL_44;
      }
    }
  }
}

void sub_E1799C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16)
{
  sub_CBDA74(&a16);
  int v18 = *(void **)(v16 - 128);
  if (v18)
  {
    *(void *)(v16 - 120) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_E17A18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_1883FB0((void *)(a3 + 16), dword_254EB38, 11, (uint64_t)&off_252C710, 0);
  uint64_t v6 = *(void **)a2;
  uint64_t v37 = *(void **)(a2 + 8);
  if (*(void **)a2 != v37)
  {
    uint64_t v35 = (uint64_t *)(result + 16);
    uint64_t v36 = result;
    uint64_t v39 = a1;
    while (1)
    {
      uint64_t v7 = *(_DWORD **)(result + 32);
      if (v7 && (uint64_t v8 = *(int *)(result + 24), (int)v8 < *v7))
      {
        *(_DWORD *)(result + 24) = v8 + 1;
        uint64_t v9 = *(void *)&v7[2 * v8 + 2];
      }
      else
      {
        uint64_t v10 = sub_11BDF08(*v35);
        uint64_t v9 = sub_188CDC8((uint64_t)v35, v10);
      }
      unsigned int v38 = v6;
      uint64_t v11 = sub_6467E8(v6, 0);
      uint64_t v12 = *(void *)(v11 + 1064);
      uint64_t v41 = *(void *)(v11 + 1072);
      if (v12 != v41) {
        break;
      }
LABEL_3:
      uint64_t v6 = v38 + 945;
      uint64_t result = v36;
      if (v38 + 945 == v37) {
        return result;
      }
    }
    uint64_t v13 = (void *)v11;
    uint64_t v14 = 0;
    uint64_t v15 = (int *)(v9 + 16);
    uint64_t v16 = (_DWORD *)(v9 + 32);
    uint64_t v40 = (unsigned int *)(v9 + 48);
    while (1)
    {
      uint64_t v19 = v14;
      if (*(void *)(v12 + 24) <= (unint64_t)v14)
      {
        int v21 = *v15;
        uint64_t v20 = v14;
      }
      else
      {
        uint64_t v20 = v14;
        do
        {
          uint64_t v22 = sub_46C8EC(v13, v20);
          unsigned int v23 = (int *)sub_2D5D58(a1, *(unsigned int *)(v22 + 32) | ((unint64_t)*(unsigned __int16 *)(v22 + 36) << 32));
          int v24 = (unsigned __int16 *)((char *)v23 - *v23);
          if (*v24 >= 0x1Du && (uint64_t v25 = v24[14]) != 0) {
            uint64_t v26 = *(void *)((char *)v23 + v25);
          }
          else {
            uint64_t v26 = 0;
          }
          if (*(unsigned char *)(sub_46C8EC(v13, v20) + 38)) {
            uint64_t v27 = -v26;
          }
          else {
            uint64_t v27 = v26;
          }
          uint64_t v28 = *(unsigned int *)(v9 + 16);
          if (v28 == *(_DWORD *)(v9 + 20))
          {
            int v21 = v28 + 1;
            sub_188CA54((unsigned int *)(v9 + 16), v28 + 1);
            *(void *)(*(void *)(v9 + 24) + 8 * v28) = v27;
          }
          else
          {
            *(void *)(*(void *)(v9 + 24) + 8 * v28) = v27;
            int v21 = v28 + 1;
          }
          int *v15 = v21;
          LODWORD(v14) = v14 + 1;
          uint64_t v20 = v14;
          uint64_t v19 = v14;
        }
        while (*(void *)(v12 + 24) > (unint64_t)v14);
      }
      uint64_t v14 = v20;
      if (v21) {
        int v29 = v21 - 1;
      }
      else {
        int v29 = 0;
      }
      uint64_t v30 = *(unsigned int *)(v9 + 32);
      if (v30 == *(_DWORD *)(v9 + 36))
      {
        sub_188C80C((unsigned int *)(v9 + 32), v30 + 1);
        *(_DWORD *)(*(void *)(v9 + 40) + 4 * v30) = v29;
        a1 = v39;
        *uint64_t v16 = v30 + 1;
        if (v14) {
          goto LABEL_33;
        }
      }
      else
      {
        *(_DWORD *)(*(void *)(v9 + 40) + 4 * v30) = v29;
        a1 = v39;
        *uint64_t v16 = v30 + 1;
        if (v14) {
          goto LABEL_33;
        }
      }
      int v32 = *(_DWORD *)(v12 + 160);
      if ((v32 - 25) <= 0x3F && ((1 << (v32 - 25)) & 0x9000000000000001) != 0
        || v32 == 17)
      {
        double v31 = (double)(1000000000 - sub_46CABC((uint64_t)v13));
        goto LABEL_39;
      }
LABEL_33:
      if (sub_46C760(v13) == v19)
      {
        double v31 = (double)sub_46CAC4((uint64_t)v13);
LABEL_39:
        float v33 = v31 / 1000000000.0;
        uint64_t v34 = *(unsigned int *)(v9 + 48);
        if (v34 != *(_DWORD *)(v9 + 52))
        {
          *(float *)(*(void *)(v9 + 56) + 4 * v34) = v33;
LABEL_44:
          int v17 = v34 + 1;
          int v18 = (_DWORD *)(v9 + 48);
          goto LABEL_11;
        }
        int v17 = v34 + 1;
        int v18 = (_DWORD *)(v9 + 48);
        sub_188C80C(v40, v34 + 1);
        *(float *)(*(void *)(v9 + 56) + 4 * v34) = v33;
        goto LABEL_11;
      }
      uint64_t v34 = *(unsigned int *)(v9 + 48);
      if (v34 != *(_DWORD *)(v9 + 52))
      {
        *(_DWORD *)(*(void *)(v9 + 56) + 4 * v34) = 1065353216;
        goto LABEL_44;
      }
      int v17 = v34 + 1;
      int v18 = (_DWORD *)(v9 + 48);
      sub_188C80C(v40, v34 + 1);
      *(_DWORD *)(*(void *)(v9 + 56) + 4 * v34) = 1065353216;
LABEL_11:
      *int v18 = v17;
      v12 += 2400;
      if (v12 == v41) {
        goto LABEL_3;
      }
    }
  }
  return result;
}

void sub_E17D84(uint64_t a1, void *a2, uint64_t a3)
{
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)uint64_t v16 = 0u;
  int v17 = 1065353216;
  if ((int)(-72719023 * ((uint64_t)(a2[1] - *a2) >> 3)) >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = -72719023 * ((uint64_t)(a2[1] - *a2) >> 3);
    do
    {
      uint64_t v8 = *(void *)(*(void *)(a3 + 64) + 8 * v6 + 8);
      uint64_t v9 = (uint64_t *)nullsub_1(*a2 + 7560 * v6);
      uint64_t v10 = *v9;
      uint64_t v11 = v9[1];
      if (*v9 != v11)
      {
        do
        {
          sub_E1C490(a1, v10, v8, a3, __p);
          v10 += 12328;
        }
        while (v10 != v11);
      }
      ++v6;
    }
    while (v6 != v7);
    uint64_t v12 = (void **)v16[0];
    if (v16[0])
    {
      do
      {
        uint64_t v14 = (void **)*v12;
        if (*((char *)v12 + 39) < 0) {
          operator delete(v12[2]);
        }
        operator delete(v12);
        uint64_t v12 = v14;
      }
      while (v14);
    }
  }
  uint64_t v13 = __p[0];
  __p[0] = 0;
  if (v13) {
    operator delete(v13);
  }
}

void sub_E17EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_E17ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_E17EE0(uint64_t a1, void *a2, uint64_t a3)
{
  int64x2_t v87 = 0uLL;
  unint64_t v88 = 0;
  if ((int)(-72719023 * ((uint64_t)(a2[1] - *a2) >> 3)) >= 1)
  {
    uint64_t v3 = a3;
    uint64_t v4 = 0;
    uint64_t v5 = (uint64_t *)(a3 + 232);
    uint64_t v73 = -72719023 * ((uint64_t)(a2[1] - *a2) >> 3);
    uint64_t v75 = (uint64_t *)(a3 + 232);
    while (1)
    {
      uint64_t v86 = *(void *)(*(void *)(v3 + 64) + 8 * v4 + 8);
      unint64_t v81 = (void *)(*a2 + 7560 * v4);
      uint64_t v6 = (void *)nullsub_1(v81);
      uint64_t v7 = v6[1] - *v6;
      if (v7) {
        break;
      }
LABEL_3:
      if (++v4 == v73)
      {
        if (v87.i64[0])
        {
          sub_E28164((uint64_t)&v87, v87.i64[0]);
          operator delete((void *)v87.i64[0]);
        }
        return;
      }
    }
    uint64_t v8 = 0;
    unint64_t v80 = 0xFF55E3181697D6CDLL * (v7 >> 3);
    uint64_t v77 = v4;
    while (1)
    {
      uint64_t v82 = v8;
      uint64_t v9 = (void *)sub_6467E8(v81, v8);
      uint64_t v10 = v9;
      uint64_t v11 = v9[1263];
      uint64_t v12 = v9[1264];
      if (v11 == 0x7FFFFFFFFFFFFFFFLL || v12 == 0x7FFFFFFFFFFFFFFFLL) {
        goto LABEL_6;
      }
      unint64_t v14 = v87.u64[1];
      uint64_t v85 = (void *)v87.i64[1];
      uint64_t v15 = v87.i64[0];
      if (v87.i64[0] == v87.i64[1])
      {
        uint64_t v20 = (void *)v87.i64[0];
LABEL_45:
        if (v20 != (void *)v14)
        {
          *(_DWORD *)(v86 + 44) |= 8u;
          *(_DWORD *)(v86 + 872) = 954437177 * (((unint64_t)v20 - v15) >> 3);
          goto LABEL_71;
        }
      }
      else
      {
        uint64_t v16 = v9[1266];
        uint64_t v17 = v9[1265];
        uint64_t v18 = v9[1269];
        uint64_t v19 = v9[1268];
        uint64_t v20 = (void *)v87.i64[0];
        do
        {
          if (v11 == *v20)
          {
            uint64_t v21 = v20[2];
            if (v16 - v17 == v20[3] - v21)
            {
              if (v17 == v16)
              {
LABEL_24:
                uint64_t v23 = v20[5];
                if (v18 - v19 == v20[6] - v23)
                {
                  if (v19 == v18)
                  {
LABEL_13:
                    if (v12 == v20[1]) {
                      goto LABEL_45;
                    }
                  }
                  else
                  {
                    uint64_t v24 = v10[1268];
                    while (*(_DWORD *)v24 == *(_DWORD *)v23)
                    {
                      if (*(_DWORD *)(v24 + 4) != *(_DWORD *)(v23 + 4)) {
                        break;
                      }
                      if (*(_DWORD *)(v24 + 12) != *(_DWORD *)(v23 + 12)) {
                        break;
                      }
                      if (*(_DWORD *)(v24 + 16) != *(_DWORD *)(v23 + 16)) {
                        break;
                      }
                      uint64_t v26 = *(void *)(v24 + 24);
                      uint64_t v25 = *(void *)(v24 + 32);
                      uint64_t v27 = *(void *)(v23 + 24);
                      if (v25 - v26 != *(void *)(v23 + 32) - v27) {
                        break;
                      }
                      while (v26 != v25)
                      {
                        int v29 = *(_DWORD **)v26;
                        uint64_t v28 = *(_DWORD **)(v26 + 8);
                        uint64_t v30 = *(_DWORD **)v27;
                        unint64_t v14 = v87.u64[1];
                        if ((_DWORD *)((char *)v28 - *(void *)v26) != (_DWORD *)(*(void *)(v27 + 8) - *(void *)v27)) {
                          goto LABEL_14;
                        }
                        for (; v29 != v28; v30 += 3)
                        {
                          unint64_t v14 = v87.u64[1];
                          if (*v29 != *v30) {
                            goto LABEL_14;
                          }
                          unint64_t v14 = v87.u64[1];
                          if (v29[1] != v30[1]) {
                            goto LABEL_14;
                          }
                          unint64_t v14 = v87.u64[1];
                          if (v29[2] != v30[2]) {
                            goto LABEL_14;
                          }
                          v29 += 3;
                        }
                        v26 += 24;
                        v27 += 24;
                      }
                      if (*(_DWORD *)(v24 + 48) != *(_DWORD *)(v23 + 48)
                        || *(_DWORD *)(v24 + 56) != *(_DWORD *)(v23 + 56))
                      {
                        break;
                      }
                      v24 += 72;
                      v23 += 72;
                      if (v24 == v18) {
                        goto LABEL_13;
                      }
                    }
                  }
                }
              }
              else
              {
                uint64_t v22 = v10[1265];
                while (*(_DWORD *)v22 == *(_DWORD *)v21
                     && *(_DWORD *)(v22 + 4) == *(_DWORD *)(v21 + 4)
                     && *(_DWORD *)(v22 + 8) == *(_DWORD *)(v21 + 8)
                     && *(void *)(v22 + 16) == *(void *)(v21 + 16))
                {
                  v22 += 24;
                  v21 += 24;
                  if (v22 == v16) {
                    goto LABEL_24;
                  }
                }
              }
            }
          }
LABEL_14:
          v20 += 9;
        }
        while (v20 != (void *)v14);
      }
      double v31 = v10 + 1263;
      *(_DWORD *)(v86 + 44) |= 8u;
      *(_DWORD *)(v86 + 872) = 954437177 * ((v14 - v15) >> 3);
      if (v14 >= v88)
      {
        v87.i64[1] = sub_E28458(&v87, (long long *)(v10 + 1263));
        uint64_t v61 = *(_DWORD **)(v3 + 248);
        if (!v61) {
          goto LABEL_69;
        }
      }
      else
      {
        long long v32 = *(_OWORD *)v31;
        *(void *)(v14 + 16) = 0;
        uint64_t v78 = v10 + 1263;
        *(_OWORD *)unint64_t v14 = v32;
        *(void *)(v14 + 24) = 0;
        *(void *)(v14 + 32) = 0;
        float v33 = (void *)v14;
        uint64_t v34 = (unsigned char *)v10[1265];
        uint64_t v79 = v10;
        uint64_t v35 = (unsigned char *)v10[1266];
        int64_t v36 = v35 - v34;
        if (v35 != v34)
        {
          if (0xAAAAAAAAAAAAAAABLL * (v36 >> 3) > 0xAAAAAAAAAAAAAAALL) {
            sub_2E00();
          }
          uint64_t v37 = (char *)operator new(v36);
          float v33 = v85;
          v85[2] = v37;
          v85[3] = v37;
          unsigned int v38 = &v37[8 * (v36 >> 3)];
          v85[4] = v38;
          memcpy(v37, v34, v36);
          v85[3] = v38;
        }
        v33[5] = 0;
        v33[6] = 0;
        v33[7] = 0;
        uint64_t v39 = (char *)v79[1268];
        uint64_t v40 = (long long *)v79[1269];
        uint64_t v89 = v33 + 5;
        char v90 = 0;
        double v83 = v40;
        int64_t v41 = (char *)v40 - v39;
        uint64_t v42 = v33;
        if (v41)
        {
          unint64_t v43 = 0x8E38E38E38E38E39 * (v41 >> 3);
          if (v43 >= 0x38E38E38E38E38FLL) {
            sub_2E00();
          }
          uint64_t v44 = (char *)operator new(v41);
          v33[5] = v44;
          v33[6] = v44;
          v33[7] = &v44[72 * v43];
          unsigned int v45 = v44;
          uint64_t v46 = (long long *)v39;
          do
          {
            long long v47 = *v46;
            *((void *)v45 + 2) = *((void *)v46 + 2);
            *((void *)v45 + 3) = 0;
            *(_OWORD *)unsigned int v45 = v47;
            *((void *)v45 + 4) = 0;
            *((void *)v45 + 5) = 0;
            uint64_t v48 = *((void *)v46 + 3);
            uint64_t v49 = *((void *)v46 + 4);
            int64_t v50 = v49 - v48;
            if (v49 != v48)
            {
              uint64_t v84 = v46;
              unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * (v50 >> 3);
              if (v51 > 0xAAAAAAAAAAAAAAALL) {
                sub_2E00();
              }
              uint64_t v52 = (char *)operator new(v50);
              uint64_t v53 = 0;
              *((void *)v45 + 3) = v52;
              *((void *)v45 + 4) = v52;
              *((void *)v45 + 5) = &v52[24 * v51];
              do
              {
                uint64_t v55 = &v52[v53];
                uint64_t v56 = v48 + v53;
                *(void *)uint64_t v55 = 0;
                *((void *)v55 + 1) = 0;
                *((void *)v55 + 2) = 0;
                uint64_t v58 = *(unsigned char **)(v48 + v53);
                uint64_t v57 = *(unsigned char **)(v48 + v53 + 8);
                int64_t v59 = v57 - v58;
                if (v57 != v58)
                {
                  if (0xAAAAAAAAAAAAAAABLL * (v59 >> 2) >= 0x1555555555555556) {
                    sub_2E00();
                  }
                  long double v60 = (char *)operator new(v59);
                  *(void *)uint64_t v55 = v60;
                  *((void *)v55 + 1) = v60;
                  uint64_t v54 = &v60[4 * (v59 >> 2)];
                  *((void *)v55 + 2) = v54;
                  memcpy(v60, v58, v59);
                  *((void *)v55 + 1) = v54;
                }
                v53 += 24;
              }
              while (v56 + 24 != v49);
              *((void *)v45 + 4) = &v52[v53];
              uint64_t v46 = v84;
            }
            *((_DWORD *)v45 + 12) = *((_DWORD *)v46 + 12);
            long long v32 = *(long long *)((char *)v46 + 56);
            *(_OWORD *)(v45 + 56) = v32;
            uint64_t v46 = (long long *)((char *)v46 + 72);
            v45 += 72;
          }
          while (v46 != v83);
          v85[6] = v45;
          uint64_t v42 = v85;
          uint64_t v3 = a3;
          uint64_t v4 = v77;
          uint64_t v5 = v75;
        }
        uint64_t v10 = v79;
        *((_DWORD *)v42 + 16) = *((_DWORD *)v79 + 2542);
        uint64_t v62 = (uint64_t)(v42 + 9);
        double v31 = v78;
        v87.i64[1] = v62;
        uint64_t v61 = *(_DWORD **)(v3 + 248);
        if (!v61)
        {
LABEL_69:
          long long v65 = sub_13D9A2C(*v5);
          uint64_t v64 = sub_188CDC8((uint64_t)v5, (uint64_t)v65);
          goto LABEL_70;
        }
      }
      uint64_t v63 = *(int *)(v3 + 240);
      if ((int)v63 >= *v61) {
        goto LABEL_69;
      }
      *(_DWORD *)(v3 + 240) = v63 + 1;
      uint64_t v64 = *(void *)&v61[2 * v63 + 2];
LABEL_70:
      sub_E14B1C(v31, v64, *(long double *)&v32);
LABEL_71:
      uint64_t v66 = 0x2FC962FC962FC963 * ((uint64_t)(v10[134] - v10[133]) >> 5);
      if ((int)v66 >= 1)
      {
        unint64_t v67 = 0;
        uint64_t v68 = v10 + 133;
        uint64_t v69 = v66;
        do
        {
          uint64_t v70 = sub_4A5E10(v68, v67);
          uint64_t v71 = sub_1883FB0((void *)(*(void *)(*(void *)(v86 + 72) + 8 * v67 + 8) + 16), dword_254EAA8, 11, (uint64_t)&off_252CE78, 0);
          char v72 = *(unsigned char *)(v70 + 2225);
          *(_DWORD *)(v71 + 16) |= 2u;
          *(unsigned char *)(v71 + 97) = v72;
          ++v67;
        }
        while (v69 != v67);
      }
LABEL_6:
      uint64_t v8 = v82 + 1;
      if (v82 + 1 == v80) {
        goto LABEL_3;
      }
    }
  }
}

void sub_E1862C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v28 = *(void *)(v26 - 128);
  if (v28)
  {
    sub_E28164(v26 - 128, v28);
    operator delete(*(void **)(v26 - 128));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_E187CC(uint64_t a1)
{
  *(void *)a1 = &off_243EE28;
  if ((*(char *)(a1 + 159) & 0x80000000) == 0)
  {
    int v2 = *(void **)(a1 + 112);
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 136));
  int v2 = *(void **)(a1 + 112);
  if (v2)
  {
LABEL_3:
    *(void *)(a1 + 120) = v2;
    operator delete(v2);
  }
LABEL_4:
  uint64_t v3 = *(void **)(a1 + 80);
  if (v3)
  {
    *(void *)(a1 + 88) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 16);
  if (v4)
  {
    *(void *)(a1 + 24) = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_E18858(uint64_t a1)
{
  sub_458644(&v1, *(void *)(a1 + 8));
  sub_1106C64();
}

void sub_E19BEC(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 - 232);
  if (!v3)
  {
    sub_1106CAC((uint64_t *)(v1 - 208));
    _Unwind_Resume(a1);
  }
  *(void *)(v1 - 224) = v3;
  operator delete(v3);
  sub_1106CAC((uint64_t *)(v1 - 208));
  _Unwind_Resume(a1);
}

std::string *sub_E19D28(uint64_t a1, void *a2, int a3, uint64_t a4)
{
  uint64_t v7 = a2[42];
  uint64_t v8 = a2[43];
  if (v7 != v8)
  {
    uint64_t v9 = (uint64_t *)(a4 + 56);
    do
    {
      uint64_t v13 = *(_DWORD **)(a4 + 72);
      if (v13 && (uint64_t v14 = *(int *)(a4 + 64), (int)v14 < *v13))
      {
        *(_DWORD *)(a4 + 64) = v14 + 1;
        uint64_t v15 = *(void *)&v13[2 * v14 + 2];
        uint64_t v16 = *(_DWORD **)(v15 + 32);
        if (!v16) {
          goto LABEL_3;
        }
      }
      else
      {
        uint64_t v17 = sub_15C1D10(*v9);
        uint64_t v15 = sub_188CDC8(a4 + 56, v17);
        uint64_t v16 = *(_DWORD **)(v15 + 32);
        if (!v16) {
          goto LABEL_3;
        }
      }
      uint64_t v18 = *(int *)(v15 + 24);
      if ((int)v18 < *v16)
      {
        *(_DWORD *)(v15 + 24) = v18 + 1;
        uint64_t v12 = *(void *)&v16[2 * v18 + 2];
        goto LABEL_4;
      }
LABEL_3:
      uint64_t v10 = v15 + 16;
      uint64_t v11 = sub_15C1DB0(*(void *)(v15 + 16));
      uint64_t v12 = sub_188CDC8(v10, v11);
LABEL_4:
      sub_E155E8(v7, a3, v12);
      v7 += 152;
    }
    while (v7 != v8);
  }
  uint64_t v19 = a2[45];
  for (uint64_t i = a2[46]; v19 != i; v19 += 152)
  {
    while (1)
    {
      uint64_t v23 = *(_DWORD **)(a4 + 120);
      if (v23)
      {
        uint64_t v24 = *(int *)(a4 + 112);
        if ((int)v24 < *v23) {
          break;
        }
      }
      uint64_t v21 = sub_15C1DB0(*(void *)(a4 + 104));
      uint64_t v22 = sub_188CDC8(a4 + 104, v21);
      sub_E155E8(v19, a3, v22);
      v19 += 152;
      if (v19 == i) {
        goto LABEL_18;
      }
    }
    *(_DWORD *)(a4 + 112) = v24 + 1;
    sub_E155E8(v19, a3, *(void *)&v23[2 * v24 + 2]);
  }
LABEL_18:
  uint64_t result = (std::string *)a2[48];
  if (result != (std::string *)a2[49])
  {
    *(_DWORD *)(a4 + 40) |= 4u;
    uint64_t v26 = *(void *)(a4 + 192);
    if (!v26)
    {
      uint64_t v27 = *(void *)(a4 + 8);
      uint64_t v28 = (void *)(v27 & 0xFFFFFFFFFFFFFFFCLL);
      if (v27) {
        uint64_t v28 = (void *)*v28;
      }
      uint64_t v26 = sub_15C1DB0((uint64_t)v28);
      *(void *)(a4 + 192) = v26;
      uint64_t result = (std::string *)a2[48];
    }
    return sub_E155E8((uint64_t)result, a3, v26);
  }
  return result;
}

void sub_E19F18(uint64_t a1@<X0>, void *a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, _DWORD *a5@<X4>, unsigned int *a6@<X5>, void *a7@<X8>)
{
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = a4;
  uint64_t v15 = sub_46C8EC(a2, a4);
  sub_2954EC(v13, *(void *)(v15 + 32), (uint64_t)&v36);
  sub_2E4B5C((uint64_t)&v36, v39);
  if (__p)
  {
    unsigned int v38 = __p;
    operator delete(__p);
  }
  if (sub_46C760(a2) - 1 == v14)
  {
    double v16 = 0.0;
    if (!a4) {
      double v16 = (double)(1000000000 - sub_46CABC((uint64_t)a2));
    }
    unsigned int v17 = sub_46CAC4((uint64_t)a2);
    sub_31854((uint64_t *)v39, 0, a7, v16 / 1000000000.0, (double)v17 / 1000000000.0);
    if (v39[0])
    {
      v39[1] = v39[0];
      operator delete(v39[0]);
    }
  }
  else
  {
    if (!a4)
    {
      int v18 = sub_46CABC((uint64_t)a2);
      sub_32F08((uint64_t *)v39, 1, 0, &v36, 1.0);
      sub_32F08((uint64_t *)&v36, 0, 0, &v34, fmin((double)(1000000000 - v18) / 1000000000.0, 1.0));
      if (v36)
      {
        std::string __p = v36;
        operator delete(v36);
      }
      if (v39[0])
      {
        v39[1] = v39[0];
        operator delete(v39[0]);
      }
      *(_OWORD *)uint64_t v39 = v34;
      uint64_t v40 = v35;
    }
    uint64_t v19 = a2[133];
    if (*(void *)(v19 + 2400 * a3 + 80) == v14)
    {
      uint64_t v20 = *(void *)(v19 + 2400 * a3 + 88);
      uint64_t v21 = v20 / 100;
      __int16 v22 = v20 % 100;
      if (v20 < 0) {
        __int16 v23 = -50;
      }
      else {
        __int16 v23 = 50;
      }
      *a5 = sub_477F48((uint64_t)v39, (double)(v21+ (int)(((5243 * (__int16)(v23 + v22)) >> 19) + ((5243 * (__int16)(v23 + v22)) >> 31))), 0.1);
    }
    if (*(void *)(v19 + 2400 * a3 + 104) == v14)
    {
      uint64_t v24 = *(void *)(v19 + 2400 * a3 + 112);
      if (v24 == 0x7FFFFFFFFFFFFFFFLL
        || ((uint64_t v25 = v24 / 100, v26 = v24 % 100, v24 < 0) ? (v27 = -50) : (v27 = 50),
            uint64_t v28 = v25
                + (int)(((5243 * (__int16)(v27 + v26)) >> 19) + ((5243 * (__int16)(v27 + v26)) >> 31)),
            v28 < 1))
      {
        unsigned int v29 = 0;
        *a6 = 0;
      }
      else
      {
        unsigned int v29 = sub_477F48((uint64_t)v39, (double)v28, 0.1);
        *a6 = v29;
      }
    }
    else
    {
      unsigned int v29 = *a6;
    }
    uint64_t v30 = (char *)v39[1];
    unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * (((char *)v39[1] - (char *)v39[0]) >> 2) - 1;
    int v33 = v31 > *a5 && v31 > v29;
    *a7 = v39[0];
    a7[1] = &v30[12 * (v33 << 31 >> 31)];
    a7[2] = v40;
  }
}

void sub_E1A250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_E1A2A8(double a1, uint64_t a2, void *a3, unsigned int a4)
{
  uint64_t v40 = 0;
  int64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v4 = a3[1] - *a3;
  if (v4)
  {
    unint64_t v7 = 0;
    unint64_t v8 = 0;
    unint64_t v33 = a4;
    unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 3);
    while (1)
    {
      while (!*(unsigned char *)(sub_E1ACF8(a3, v8) + 16)
           && !*(unsigned char *)(sub_E1ACF8(a3, v8) + 17)
           && !*(unsigned char *)(sub_E1ACF8(a3, v8) + 18)
           && v8 != -1 - 0x5555555555555555 * ((uint64_t)(a3[1] - *a3) >> 3))
      {
        if (++v8 == v34)
        {
LABEL_43:
          if (v40)
          {
            int64_t v41 = (char *)v40;
            operator delete(v40);
          }
          return;
        }
      }
      uint64_t v10 = v40;
      int64_t v41 = (char *)v40;
      unint64_t v11 = v8 + 1;
      unint64_t v12 = v8 + 1 - v7;
      if (0xAAAAAAAAAAAAAAABLL * ((v42 - (unsigned char *)v40) >> 2) < v12)
      {
        if (v12 > 0x1555555555555555) {
          sub_2E00();
        }
        uint64_t v40 = operator new(12 * v12);
        int64_t v41 = (char *)v40;
        uint64_t v42 = (char *)v40 + 12 * v12;
        if (v10) {
          operator delete(v10);
        }
      }
      unint64_t v35 = v8 + 1;
      unint64_t v36 = v8;
      if (v7 <= v11) {
        unint64_t v13 = v8 + 1;
      }
      else {
        unint64_t v13 = v7;
      }
      unint64_t v14 = v7;
      if (v11 > v7)
      {
        do
        {
          uint64_t v20 = sub_E1ACF8(a3, v14);
          uint64_t v21 = v20;
          __int16 v22 = v41;
          if (v41 < v42)
          {
            uint64_t v18 = *(void *)v20;
            *((_DWORD *)v41 + 2) = *(_DWORD *)(v20 + 8);
            *(void *)__int16 v22 = v18;
            uint64_t v19 = v22 + 12;
          }
          else
          {
            __int16 v23 = (char *)v40;
            unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((v41 - (unsigned char *)v40) >> 2);
            unint64_t v25 = v24 + 1;
            if (v24 + 1 > 0x1555555555555555) {
              sub_2E00();
            }
            if (0x5555555555555556 * ((v42 - (unsigned char *)v40) >> 2) > v25) {
              unint64_t v25 = 0x5555555555555556 * ((v42 - (unsigned char *)v40) >> 2);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v42 - (unsigned char *)v40) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v26 = 0x1555555555555555;
            }
            else {
              unint64_t v26 = v25;
            }
            if (v26)
            {
              if (v26 > 0x1555555555555555) {
                sub_188D718();
              }
              __int16 v27 = (char *)operator new(12 * v26);
            }
            else
            {
              __int16 v27 = 0;
            }
            uint64_t v28 = *(void *)v21;
            unsigned int v29 = &v27[12 * v24];
            *((_DWORD *)v29 + 2) = *(_DWORD *)(v21 + 8);
            *(void *)unsigned int v29 = v28;
            uint64_t v30 = v29;
            if (v22 != v23)
            {
              do
              {
                uint64_t v31 = *(void *)(v22 - 12);
                v22 -= 12;
                int v32 = *((_DWORD *)v22 + 2);
                *(void *)(v30 - 12) = v31;
                v30 -= 12;
                *((_DWORD *)v30 + 2) = v32;
              }
              while (v22 != v23);
              __int16 v22 = (char *)v40;
            }
            uint64_t v19 = v29 + 12;
            uint64_t v40 = v30;
            int64_t v41 = v29 + 12;
            uint64_t v42 = &v27[12 * v26];
            if (v22) {
              operator delete(v22);
            }
          }
          int64_t v41 = v19;
          ++v14;
        }
        while (v14 != v13);
      }
      memset(v37, 0, sizeof(v37));
      sub_426D8((uint64_t *)&v40, v33, 0, 1, v37, (uint64_t)&__p, a1);
      if (v37[0]) {
        operator delete(v37[0]);
      }
      uint64_t v15 = v39;
      if (v39) {
        break;
      }
      uint64_t v9 = __p;
      if (__p) {
        goto LABEL_4;
      }
LABEL_5:
      unint64_t v7 = v36;
      unint64_t v8 = v35;
      if (v35 == v34) {
        goto LABEL_43;
      }
    }
    unint64_t v16 = 0;
    do
    {
      uint64_t v17 = sub_E1ACF8(a3, v7 + v16);
      uint64_t v9 = __p;
      *(unsigned char *)(v17 + 20) = (*(void *)((char *)__p + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v16) & 1;
      ++v16;
    }
    while (v15 != v16);
LABEL_4:
    operator delete(v9);
    goto LABEL_5;
  }
}

void sub_E1A608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_E1A654(void *a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  sub_11065D0((uint64_t)v10);
  sub_BB6C(&v12, 0);
  sub_BB6C(&v13, 9);
  uint64_t v14 = -1;
  (*(void (**)(void, uint64_t, unsigned char *))(*(void *)*a1 + 8))(*a1, a2, v10);
  __int16 v8 = sub_11069C8((uint64_t)v10, a3);
  sub_11053A4(a4, (uint64_t *)a3, v8);
  sub_1105490(a4, v12);
  sub_FE4750(a4, v13);
  uint64_t v9 = v11;
  if (v11)
  {
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_E1A788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _Unwind_Exception *a15)
{
  if (a11)
  {
    sub_20A7010(a11);
    exception_object = a15;
  }
  _Unwind_Resume(exception_object);
}

void sub_E1A7B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_14A84((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_E1A7C4()
{
  sub_7BD6C(v0);
}

void sub_E1AC58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E1AC6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E1AC80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E1AC94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E1ACA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E1ACBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E1ACD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E1ACE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_E1ACF8(void *a1, unint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    uint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    __int16 v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v15;
    }
    else {
      uint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    int v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 24 * a2;
}

void sub_E1AE48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

void sub_E1AF28(unsigned char *a1, void *a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12 = sub_46C760(a2);
  uint64_t v13 = a2[1272];
  uint64_t v14 = a2[1273];
  if (v13 != v14)
  {
    unint64_t v15 = v12;
    unint64_t v16 = v12 - 1;
    do
    {
      unint64_t v17 = *(void *)(v13 + 8);
      if (v17 >= v15 || v17 == v16 && sub_46CAC4((uint64_t)a2) < 0x3B9ACA00) {
        goto LABEL_3;
      }
      if (sub_63A8F8(v13))
      {
        if (a1[16]) {
          goto LABEL_16;
        }
      }
      else
      {
        if (!sub_63A908(v13))
        {
          if (!sub_63A770(v13) && !sub_63A760(v13) || !a1[18]) {
            goto LABEL_3;
          }
LABEL_16:
          std::to_string(&v34, a3);
          std::string v18 = std::string::append(&v34, "_");
          long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
          v35.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v19;
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          v18->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v33, a4);
          if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v20 = &v33;
          }
          else {
            std::string::size_type v20 = (std::string *)v33.__r_.__value_.__r.__words[0];
          }
          if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v33.__r_.__value_.__l.__size_;
          }
          __int16 v22 = std::string::append(&v35, (const std::string::value_type *)v20, size);
          long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
          v36.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v23;
          v22->__r_.__value_.__l.__size_ = 0;
          v22->__r_.__value_.__r.__words[2] = 0;
          v22->__r_.__value_.__r.__words[0] = 0;
          unint64_t v24 = std::string::append(&v36, "_");
          long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
          v37.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v25;
          v24->__r_.__value_.__l.__size_ = 0;
          v24->__r_.__value_.__r.__words[2] = 0;
          v24->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v32, *(void *)(v13 + 8));
          if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v26 = &v32;
          }
          else {
            unint64_t v26 = (std::string *)v32.__r_.__value_.__r.__words[0];
          }
          if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v27 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v27 = v32.__r_.__value_.__l.__size_;
          }
          uint64_t v28 = std::string::append(&v37, (const std::string::value_type *)v26, v27);
          long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
          v38.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v29;
          v28->__r_.__value_.__l.__size_ = 0;
          v28->__r_.__value_.__r.__words[2] = 0;
          v28->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v32.__r_.__value_.__l.__data_);
            if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_37;
            }
LABEL_30:
            if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_31;
            }
LABEL_38:
            operator delete(v36.__r_.__value_.__l.__data_);
            if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_39;
            }
LABEL_32:
            if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_33;
            }
LABEL_40:
            operator delete(v35.__r_.__value_.__l.__data_);
            if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_41;
            }
LABEL_34:
            if (*(_DWORD *)(v13 + 4) == 2)
            {
LABEL_42:
              if (byte_25F3C17 >= 0) {
                uint64_t v30 = (const std::string::value_type *)&qword_25F3C00;
              }
              else {
                uint64_t v30 = (const std::string::value_type *)qword_25F3C00;
              }
              if (byte_25F3C17 >= 0) {
                std::string::size_type v31 = byte_25F3C17;
              }
              else {
                std::string::size_type v31 = *(void *)&byte_25F3C08;
              }
              std::string::append(&v38, v30, v31);
            }
          }
          else
          {
            if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_30;
            }
LABEL_37:
            operator delete(v37.__r_.__value_.__l.__data_);
            if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_38;
            }
LABEL_31:
            if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_32;
            }
LABEL_39:
            operator delete(v33.__r_.__value_.__l.__data_);
            if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_40;
            }
LABEL_33:
            if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_34;
            }
LABEL_41:
            operator delete(v34.__r_.__value_.__l.__data_);
            if (*(_DWORD *)(v13 + 4) == 2) {
              goto LABEL_42;
            }
          }
          sub_E1B31C((uint64_t)a1, v13, (const void **)&v38.__r_.__value_.__l.__data_, a4, a5, a6);
          if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v38.__r_.__value_.__l.__data_);
          }
          goto LABEL_3;
        }
        if (a1[17]) {
          goto LABEL_16;
        }
      }
LABEL_3:
      v13 += 104;
    }
    while (v13 != v14);
  }
}

void sub_E1B220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a47 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a40 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((a47 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a42);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a35);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a16);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a27 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a22);
    goto LABEL_14;
  }
LABEL_12:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_E1B308()
{
  if (*(char *)(v0 - 105) < 0) {
    JUMPOUT(0xE1B2FCLL);
  }
  JUMPOUT(0xE1B300);
}

void sub_E1B31C(uint64_t a1, uint64_t a2, const void **a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = a2;
  if (sub_63A4A4(a2))
  {
    uint64_t v11 = *(void *)(v9 + 32);
    uint64_t v10 = *(void *)(v9 + 40);
    if (v11 != v10)
    {
      uint64_t v205 = (uint64_t *)(a6 + 208);
      int v206 = (uint64_t *)(a5 + 224);
      size_t v207 = (_DWORD *)(v9 + 20);
      long long v204 = (uint64_t *)(a6 + 256);
      uint64_t v209 = a5;
      uint64_t v210 = a6;
      uint64_t v211 = v9;
      uint64_t v208 = *(void *)(v9 + 40);
      while (2)
      {
        if (!sub_63A048(v11)) {
          goto LABEL_6;
        }
        uint64_t v14 = *(_DWORD **)(a5 + 240);
        if (v14 && (uint64_t v15 = *(int *)(a5 + 232), (int)v15 < *v14))
        {
          *(_DWORD *)(a5 + 232) = v15 + 1;
          uint64_t v16 = *(void *)&v14[2 * v15 + 2];
        }
        else
        {
          sub_13D97FC(*v206);
          uint64_t v16 = sub_188CDC8((uint64_t)v206, v17);
        }
        BOOL v18 = *(_DWORD *)(v9 + 4) != 0;
        *(_DWORD *)(v16 + 16) |= 0x20u;
        *(_DWORD *)(v16 + 76) = v18;
        BOOL v19 = sub_63A4F0(v9);
        int v20 = *(_DWORD *)(v16 + 16);
        if (v19)
        {
          *(_DWORD *)(v16 + 72) = *(_DWORD *)(v9 + 16);
          *(_DWORD *)(v16 + 88) = *(unsigned __int16 *)(v11 + 14);
          int v21 = *(unsigned __int16 *)(v11 + 16);
          v20 |= 0x190u;
          *(_DWORD *)(v16 + 16) = v20;
          *(_DWORD *)(v16 + 84) = v21;
        }
        *(_DWORD *)(v16 + 16) = v20 | 0x40;
        *(_DWORD *)(v16 + 80) = a4;
        switch(*(_DWORD *)(v11 + 8))
        {
          case 1:
            *(_DWORD *)(v16 + 16) = v20 | 0x44;
            *(_DWORD *)(v16 + 64) = 2;
            int v22 = *((char *)a3 + 23);
            if (v22 >= 0) {
              size_t v23 = *((unsigned __int8 *)a3 + 23);
            }
            else {
              size_t v23 = (size_t)a3[1];
            }
            int v24 = byte_25F3C2F;
            if (byte_25F3C2F >= 0) {
              size_t v25 = byte_25F3C2F;
            }
            else {
              size_t v25 = qword_25F3C20;
            }
            unint64_t v26 = v25 + v23;
            if (v25 + v23 > 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_329;
            }
            if (v26 <= 0x16)
            {
              memset(&__dst, 0, sizeof(__dst));
              p_dst = &__dst;
              *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v25 + v23;
              if (!v23) {
                goto LABEL_72;
              }
LABEL_68:
              if (v22 >= 0) {
                uint64_t v55 = a3;
              }
              else {
                uint64_t v55 = *a3;
              }
              memmove(p_dst, v55, v23);
              goto LABEL_72;
            }
            uint64_t v52 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v26 | 7) != 0x17) {
              uint64_t v52 = v26 | 7;
            }
            uint64_t v53 = v52 + 1;
            p_dst = (std::string *)operator new(v52 + 1);
            unint64_t v54 = v53 | 0x8000000000000000;
            a6 = v210;
            __dst.__r_.__value_.__l.__size_ = v25 + v23;
            __dst.__r_.__value_.__r.__words[2] = v54;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
            if (v23) {
              goto LABEL_68;
            }
LABEL_72:
            uint64_t v56 = (char *)p_dst + v23;
            if (v25)
            {
              if (v24 >= 0) {
                uint64_t v57 = &qword_25F3C18;
              }
              else {
                uint64_t v57 = (uint64_t *)qword_25F3C18;
              }
              memmove(v56, v57, v25);
            }
            v56[v25] = 0;
            *(_DWORD *)(v16 + 16) |= 1u;
            uint64_t v58 = *(void *)(v16 + 8);
            int64_t v59 = (uint64_t *)(v58 & 0xFFFFFFFFFFFFFFFCLL);
            if (v58) {
              int64_t v59 = (uint64_t *)*v59;
            }
            sub_1881E08((uint64_t *)(v16 + 48), (long long *)&__dst, v59);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__dst.__r_.__value_.__l.__data_);
              long double v60 = *(_DWORD **)(a6 + 272);
              if (!v60) {
                goto LABEL_153;
              }
            }
            else
            {
              long double v60 = *(_DWORD **)(a6 + 272);
              if (!v60)
              {
LABEL_153:
                uint64_t v99 = sub_13D9774(*v204);
                uint64_t v98 = sub_188CDC8((uint64_t)v204, (uint64_t)v99);
                goto LABEL_154;
              }
            }
            uint64_t v97 = *(int *)(a6 + 264);
            if ((int)v97 >= *v60) {
              goto LABEL_153;
            }
            *(_DWORD *)(a6 + 264) = v97 + 1;
            uint64_t v98 = *(void *)&v60[2 * v97 + 2];
LABEL_154:
            int v100 = *((char *)a3 + 23);
            if (v100 >= 0) {
              size_t v101 = *((unsigned __int8 *)a3 + 23);
            }
            else {
              size_t v101 = (size_t)a3[1];
            }
            int v102 = byte_25F3C2F;
            if (byte_25F3C2F >= 0) {
              size_t v103 = byte_25F3C2F;
            }
            else {
              size_t v103 = qword_25F3C20;
            }
            unint64_t v104 = v103 + v101;
            if (v103 + v101 > 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_329;
            }
            if (v104 > 0x16)
            {
              uint64_t v106 = (v104 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v104 | 7) != 0x17) {
                uint64_t v106 = v104 | 7;
              }
              uint64_t v107 = v106 + 1;
              unint64_t v105 = (std::string *)operator new(v106 + 1);
              unint64_t v108 = v107 | 0x8000000000000000;
              a6 = v210;
              __dst.__r_.__value_.__l.__size_ = v103 + v101;
              __dst.__r_.__value_.__r.__words[2] = v108;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v105;
              if (v101) {
                goto LABEL_167;
              }
            }
            else
            {
              memset(&__dst, 0, sizeof(__dst));
              unint64_t v105 = &__dst;
              *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v103 + v101;
              if (!v101) {
                goto LABEL_171;
              }
LABEL_167:
              if (v100 >= 0) {
                int v109 = a3;
              }
              else {
                int v109 = *a3;
              }
              memmove(v105, v109, v101);
            }
LABEL_171:
            uint64_t v110 = (char *)v105 + v101;
            if (v103)
            {
              if (v102 >= 0) {
                unint64_t v111 = &qword_25F3C18;
              }
              else {
                unint64_t v111 = (uint64_t *)qword_25F3C18;
              }
              memmove(v110, v111, v103);
            }
            v110[v103] = 0;
            *(_DWORD *)(v98 + 16) |= 1u;
            uint64_t v112 = *(void *)(v98 + 8);
            __darwin_ct_rune_t v113 = (uint64_t *)(v112 & 0xFFFFFFFFFFFFFFFCLL);
            if (v112) {
              __darwin_ct_rune_t v113 = (uint64_t *)*v113;
            }
            sub_1881E08((uint64_t *)(v98 + 24), (long long *)&__dst, v113);
            uint64_t v10 = v208;
            a5 = v209;
            uint64_t v9 = v211;
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__dst.__r_.__value_.__l.__data_);
              *(_DWORD *)(v98 + 16) |= 2u;
              uint64_t v115 = *(void *)(v98 + 32);
              if (!v115) {
                goto LABEL_315;
              }
            }
            else
            {
              *(_DWORD *)(v98 + 16) |= 2u;
              uint64_t v115 = *(void *)(v98 + 32);
              if (!v115)
              {
LABEL_315:
                uint64_t v196 = *(void *)(v98 + 8);
                uint64_t v197 = (void *)(v196 & 0xFFFFFFFFFFFFFFFCLL);
                if (v196) {
                  uint64_t v197 = (void *)*v197;
                }
                uint64_t v115 = sub_15C1918((uint64_t)v197);
                *(void *)(v98 + 32) = v115;
              }
            }
            sub_E112BC(v207, v115, v114);
            *(_DWORD *)(v98 + 16) |= 4u;
            *(_DWORD *)(v98 + 40) = 1;
            goto LABEL_6;
          case 2:
            *(_DWORD *)(v16 + 16) = v20 | 0x44;
            *(_DWORD *)(v16 + 64) = 2;
            int v28 = *((char *)a3 + 23);
            if (v28 >= 0) {
              size_t v29 = *((unsigned __int8 *)a3 + 23);
            }
            else {
              size_t v29 = (size_t)a3[1];
            }
            int v30 = byte_25F3C47;
            if (byte_25F3C47 >= 0) {
              size_t v31 = byte_25F3C47;
            }
            else {
              size_t v31 = qword_25F3C38;
            }
            unint64_t v32 = v31 + v29;
            if (v31 + v29 > 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_329;
            }
            if (v32 <= 0x16)
            {
              memset(&__dst, 0, sizeof(__dst));
              std::string v33 = &__dst;
              *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v31 + v29;
              if (!v29) {
                goto LABEL_89;
              }
LABEL_85:
              if (v28 >= 0) {
                uint64_t v64 = a3;
              }
              else {
                uint64_t v64 = *a3;
              }
              memmove(v33, v64, v29);
              goto LABEL_89;
            }
            uint64_t v61 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v32 | 7) != 0x17) {
              uint64_t v61 = v32 | 7;
            }
            uint64_t v62 = v61 + 1;
            std::string v33 = (std::string *)operator new(v61 + 1);
            unint64_t v63 = v62 | 0x8000000000000000;
            a6 = v210;
            __dst.__r_.__value_.__l.__size_ = v31 + v29;
            __dst.__r_.__value_.__r.__words[2] = v63;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
            if (v29) {
              goto LABEL_85;
            }
LABEL_89:
            long long v65 = (char *)v33 + v29;
            if (v31)
            {
              if (v30 >= 0) {
                uint64_t v66 = &qword_25F3C30;
              }
              else {
                uint64_t v66 = (uint64_t *)qword_25F3C30;
              }
              memmove(v65, v66, v31);
            }
            v65[v31] = 0;
            *(_DWORD *)(v16 + 16) |= 1u;
            uint64_t v67 = *(void *)(v16 + 8);
            uint64_t v68 = (uint64_t *)(v67 & 0xFFFFFFFFFFFFFFFCLL);
            if (v67) {
              uint64_t v68 = (uint64_t *)*v68;
            }
            sub_1881E08((uint64_t *)(v16 + 48), (long long *)&__dst, v68);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__dst.__r_.__value_.__l.__data_);
              uint64_t v69 = *(_DWORD **)(a6 + 272);
              if (!v69) {
                goto LABEL_184;
              }
            }
            else
            {
              uint64_t v69 = *(_DWORD **)(a6 + 272);
              if (!v69)
              {
LABEL_184:
                int v118 = sub_13D9774(*v204);
                uint64_t v117 = sub_188CDC8((uint64_t)v204, (uint64_t)v118);
                goto LABEL_185;
              }
            }
            uint64_t v116 = *(int *)(a6 + 264);
            if ((int)v116 >= *v69) {
              goto LABEL_184;
            }
            *(_DWORD *)(a6 + 264) = v116 + 1;
            uint64_t v117 = *(void *)&v69[2 * v116 + 2];
LABEL_185:
            int v119 = *((char *)a3 + 23);
            if (v119 >= 0) {
              size_t v120 = *((unsigned __int8 *)a3 + 23);
            }
            else {
              size_t v120 = (size_t)a3[1];
            }
            int v121 = byte_25F3C47;
            if (byte_25F3C47 >= 0) {
              size_t v122 = byte_25F3C47;
            }
            else {
              size_t v122 = qword_25F3C38;
            }
            unint64_t v123 = v122 + v120;
            if (v122 + v120 > 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_329;
            }
            if (v123 > 0x16)
            {
              uint64_t v125 = (v123 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v123 | 7) != 0x17) {
                uint64_t v125 = v123 | 7;
              }
              uint64_t v126 = v125 + 1;
              uint64_t v124 = (std::string *)operator new(v125 + 1);
              unint64_t v127 = v126 | 0x8000000000000000;
              a6 = v210;
              __dst.__r_.__value_.__l.__size_ = v122 + v120;
              __dst.__r_.__value_.__r.__words[2] = v127;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v124;
              if (v120) {
                goto LABEL_198;
              }
            }
            else
            {
              memset(&__dst, 0, sizeof(__dst));
              uint64_t v124 = &__dst;
              *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v122 + v120;
              if (!v120) {
                goto LABEL_202;
              }
LABEL_198:
              if (v119 >= 0) {
                size_t v128 = a3;
              }
              else {
                size_t v128 = *a3;
              }
              memmove(v124, v128, v120);
            }
LABEL_202:
            int v129 = (char *)v124 + v120;
            if (v122)
            {
              if (v121 >= 0) {
                size_t v130 = &qword_25F3C30;
              }
              else {
                size_t v130 = (uint64_t *)qword_25F3C30;
              }
              memmove(v129, v130, v122);
            }
            v129[v122] = 0;
            *(_DWORD *)(v117 + 16) |= 1u;
            uint64_t v131 = *(void *)(v117 + 8);
            long long v132 = (uint64_t *)(v131 & 0xFFFFFFFFFFFFFFFCLL);
            if (v131) {
              long long v132 = (uint64_t *)*v132;
            }
            sub_1881E08((uint64_t *)(v117 + 24), (long long *)&__dst, v132);
            uint64_t v10 = v208;
            a5 = v209;
            uint64_t v9 = v211;
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__dst.__r_.__value_.__l.__data_);
              *(_DWORD *)(v117 + 16) |= 2u;
              uint64_t v134 = *(void *)(v117 + 32);
              if (!v134) {
                goto LABEL_320;
              }
            }
            else
            {
              *(_DWORD *)(v117 + 16) |= 2u;
              uint64_t v134 = *(void *)(v117 + 32);
              if (!v134)
              {
LABEL_320:
                uint64_t v198 = *(void *)(v117 + 8);
                unint64_t v199 = (void *)(v198 & 0xFFFFFFFFFFFFFFFCLL);
                if (v198) {
                  unint64_t v199 = (void *)*v199;
                }
                uint64_t v134 = sub_15C1918((uint64_t)v199);
                *(void *)(v117 + 32) = v134;
              }
            }
            sub_E112BC(v207, v134, v133);
            *(_DWORD *)(v117 + 16) |= 4u;
            *(_DWORD *)(v117 + 40) = 2;
            goto LABEL_6;
          case 3:
            *(_DWORD *)(v16 + 16) = v20 | 0x44;
            *(_DWORD *)(v16 + 64) = 1;
            int v34 = *((char *)a3 + 23);
            if (v34 >= 0) {
              size_t v35 = *((unsigned __int8 *)a3 + 23);
            }
            else {
              size_t v35 = (size_t)a3[1];
            }
            int v36 = byte_25F3C5F;
            if (byte_25F3C5F >= 0) {
              size_t v37 = byte_25F3C5F;
            }
            else {
              size_t v37 = qword_25F3C50;
            }
            unint64_t v38 = v37 + v35;
            if (v37 + v35 > 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_329;
            }
            if (v38 <= 0x16)
            {
              memset(&__dst, 0, sizeof(__dst));
              uint64_t v39 = &__dst;
              *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v37 + v35;
              if (!v35) {
                goto LABEL_106;
              }
LABEL_102:
              if (v34 >= 0) {
                uint64_t v73 = a3;
              }
              else {
                uint64_t v73 = *a3;
              }
              memmove(v39, v73, v35);
              goto LABEL_106;
            }
            uint64_t v70 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v38 | 7) != 0x17) {
              uint64_t v70 = v38 | 7;
            }
            uint64_t v71 = v70 + 1;
            uint64_t v39 = (std::string *)operator new(v70 + 1);
            unint64_t v72 = v71 | 0x8000000000000000;
            a6 = v210;
            __dst.__r_.__value_.__l.__size_ = v37 + v35;
            __dst.__r_.__value_.__r.__words[2] = v72;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
            if (v35) {
              goto LABEL_102;
            }
LABEL_106:
            uint64_t v74 = (char *)v39 + v35;
            if (v37)
            {
              if (v36 >= 0) {
                uint64_t v75 = &qword_25F3C48;
              }
              else {
                uint64_t v75 = (uint64_t *)qword_25F3C48;
              }
              memmove(v74, v75, v37);
            }
            v74[v37] = 0;
            *(_DWORD *)(v16 + 16) |= 1u;
            uint64_t v76 = *(void *)(v16 + 8);
            uint64_t v77 = (uint64_t *)(v76 & 0xFFFFFFFFFFFFFFFCLL);
            if (v76) {
              uint64_t v77 = (uint64_t *)*v77;
            }
            sub_1881E08((uint64_t *)(v16 + 48), (long long *)&__dst, v77);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__dst.__r_.__value_.__l.__data_);
              uint64_t v78 = *(_DWORD **)(a6 + 224);
              if (!v78) {
                goto LABEL_215;
              }
            }
            else
            {
              uint64_t v78 = *(_DWORD **)(a6 + 224);
              if (!v78) {
                goto LABEL_215;
              }
            }
            uint64_t v135 = *(int *)(a6 + 216);
            if ((int)v135 < *v78)
            {
              *(_DWORD *)(a6 + 216) = v135 + 1;
              uint64_t v136 = *(void *)&v78[2 * v135 + 2];
              goto LABEL_216;
            }
LABEL_215:
            sub_13D96E0(*v205);
            uint64_t v136 = sub_188CDC8((uint64_t)v205, v137);
LABEL_216:
            int v138 = *((char *)a3 + 23);
            if (v138 >= 0) {
              size_t v139 = *((unsigned __int8 *)a3 + 23);
            }
            else {
              size_t v139 = (size_t)a3[1];
            }
            int v140 = byte_25F3C5F;
            if (byte_25F3C5F >= 0) {
              size_t v141 = byte_25F3C5F;
            }
            else {
              size_t v141 = qword_25F3C50;
            }
            unint64_t v142 = v141 + v139;
            if (v141 + v139 > 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_329;
            }
            if (v142 > 0x16)
            {
              uint64_t v144 = (v142 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v142 | 7) != 0x17) {
                uint64_t v144 = v142 | 7;
              }
              uint64_t v145 = v144 + 1;
              size_t v143 = (std::string *)operator new(v144 + 1);
              unint64_t v146 = v145 | 0x8000000000000000;
              a6 = v210;
              __dst.__r_.__value_.__l.__size_ = v141 + v139;
              __dst.__r_.__value_.__r.__words[2] = v146;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v143;
              if (!v139) {
                goto LABEL_233;
              }
LABEL_229:
              if (v138 >= 0) {
                long long v147 = a3;
              }
              else {
                long long v147 = *a3;
              }
              memmove(v143, v147, v139);
              goto LABEL_233;
            }
            memset(&__dst, 0, sizeof(__dst));
            size_t v143 = &__dst;
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v141 + v139;
            if (v139) {
              goto LABEL_229;
            }
LABEL_233:
            long long v148 = (char *)v143 + v139;
            if (v141)
            {
              if (v140 >= 0) {
                long long v149 = &qword_25F3C48;
              }
              else {
                long long v149 = (uint64_t *)qword_25F3C48;
              }
              memmove(v148, v149, v141);
            }
            v148[v141] = 0;
            *(_DWORD *)(v136 + 16) |= 1u;
            uint64_t v150 = *(void *)(v136 + 8);
            long long v151 = (uint64_t *)(v150 & 0xFFFFFFFFFFFFFFFCLL);
            if (v150) {
              long long v151 = (uint64_t *)*v151;
            }
            sub_1881E08((uint64_t *)(v136 + 24), (long long *)&__dst, v151);
            uint64_t v10 = v208;
            a5 = v209;
            uint64_t v9 = v211;
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__dst.__r_.__value_.__l.__data_);
            }
            int v153 = *(_DWORD *)(v136 + 16);
            *(_DWORD *)(v136 + 64) = 2;
            *(_DWORD *)(v136 + 16) = v153 | 0x24;
            uint64_t v154 = *(void *)(v136 + 40);
            if (!v154)
            {
              uint64_t v200 = *(void *)(v136 + 8);
              uint64_t v201 = (void *)(v200 & 0xFFFFFFFFFFFFFFFCLL);
              if (v200) {
                uint64_t v201 = (void *)*v201;
              }
              uint64_t v202 = sub_15C1918((uint64_t)v201);
              *(void *)(v136 + 40) = v202;
              sub_E112BC(v207, v202, v203);
              if (!sub_63A4F0(v211)) {
                goto LABEL_6;
              }
LABEL_327:
              *(_DWORD *)(v136 + 16) |= 0x20u;
              *(_DWORD *)(v136 + 64) = 5;
              goto LABEL_6;
            }
            sub_E112BC(v207, v154, v152);
            if (sub_63A4F0(v211)) {
              goto LABEL_327;
            }
LABEL_6:
            v11 += 176;
            if (v11 == v10) {
              return;
            }
            continue;
          case 4:
            *(_DWORD *)(v16 + 16) = v20 | 0x44;
            *(_DWORD *)(v16 + 64) = 1;
            int v40 = *((char *)a3 + 23);
            if (v40 >= 0) {
              size_t v41 = *((unsigned __int8 *)a3 + 23);
            }
            else {
              size_t v41 = (size_t)a3[1];
            }
            int v42 = byte_25F3C77;
            if (byte_25F3C77 >= 0) {
              size_t v43 = byte_25F3C77;
            }
            else {
              size_t v43 = qword_25F3C68;
            }
            unint64_t v44 = v43 + v41;
            if (v43 + v41 > 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_329;
            }
            if (v44 <= 0x16)
            {
              memset(&__dst, 0, sizeof(__dst));
              unsigned int v45 = &__dst;
              *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v43 + v41;
              if (!v41) {
                goto LABEL_123;
              }
LABEL_119:
              if (v40 >= 0) {
                uint64_t v82 = a3;
              }
              else {
                uint64_t v82 = *a3;
              }
              memmove(v45, v82, v41);
              goto LABEL_123;
            }
            uint64_t v79 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v44 | 7) != 0x17) {
              uint64_t v79 = v44 | 7;
            }
            uint64_t v80 = v79 + 1;
            unsigned int v45 = (std::string *)operator new(v79 + 1);
            unint64_t v81 = v80 | 0x8000000000000000;
            a6 = v210;
            __dst.__r_.__value_.__l.__size_ = v43 + v41;
            __dst.__r_.__value_.__r.__words[2] = v81;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v45;
            if (v41) {
              goto LABEL_119;
            }
LABEL_123:
            double v83 = (char *)v45 + v41;
            if (v43)
            {
              if (v42 >= 0) {
                uint64_t v84 = &qword_25F3C60;
              }
              else {
                uint64_t v84 = (uint64_t *)qword_25F3C60;
              }
              memmove(v83, v84, v43);
            }
            v83[v43] = 0;
            *(_DWORD *)(v16 + 16) |= 1u;
            uint64_t v85 = *(void *)(v16 + 8);
            uint64_t v86 = (uint64_t *)(v85 & 0xFFFFFFFFFFFFFFFCLL);
            if (v85) {
              uint64_t v86 = (uint64_t *)*v86;
            }
            sub_1881E08((uint64_t *)(v16 + 48), (long long *)&__dst, v86);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__dst.__r_.__value_.__l.__data_);
              int64x2_t v87 = *(_DWORD **)(a6 + 224);
              if (!v87) {
                goto LABEL_248;
              }
            }
            else
            {
              int64x2_t v87 = *(_DWORD **)(a6 + 224);
              if (!v87) {
                goto LABEL_248;
              }
            }
            uint64_t v155 = *(int *)(a6 + 216);
            if ((int)v155 < *v87)
            {
              *(_DWORD *)(a6 + 216) = v155 + 1;
              uint64_t v156 = *(void *)&v87[2 * v155 + 2];
              goto LABEL_249;
            }
LABEL_248:
            sub_13D96E0(*v205);
            uint64_t v156 = sub_188CDC8((uint64_t)v205, v157);
LABEL_249:
            int v158 = *((char *)a3 + 23);
            if (v158 >= 0) {
              size_t v159 = *((unsigned __int8 *)a3 + 23);
            }
            else {
              size_t v159 = (size_t)a3[1];
            }
            int v160 = byte_25F3C77;
            if (byte_25F3C77 >= 0) {
              size_t v161 = byte_25F3C77;
            }
            else {
              size_t v161 = qword_25F3C68;
            }
            unint64_t v162 = v161 + v159;
            if (v161 + v159 > 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_329;
            }
            if (v162 > 0x16)
            {
              uint64_t v164 = (v162 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v162 | 7) != 0x17) {
                uint64_t v164 = v162 | 7;
              }
              uint64_t v165 = v164 + 1;
              uint64_t v163 = (std::string *)operator new(v164 + 1);
              unint64_t v166 = v165 | 0x8000000000000000;
              a6 = v210;
              __dst.__r_.__value_.__l.__size_ = v161 + v159;
              __dst.__r_.__value_.__r.__words[2] = v166;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v163;
              if (!v159)
              {
LABEL_266:
                long long v168 = (char *)v163 + v159;
                if (v161)
                {
                  if (v160 >= 0) {
                    long long v169 = &qword_25F3C60;
                  }
                  else {
                    long long v169 = (uint64_t *)qword_25F3C60;
                  }
                  memmove(v168, v169, v161);
                }
                v168[v161] = 0;
                *(_DWORD *)(v156 + 16) |= 1u;
                uint64_t v170 = *(void *)(v156 + 8);
                size_t v171 = (uint64_t *)(v170 & 0xFFFFFFFFFFFFFFFCLL);
                if (v170) {
                  size_t v171 = (uint64_t *)*v171;
                }
                sub_1881E08((uint64_t *)(v156 + 24), (long long *)&__dst, v171);
                uint64_t v10 = v208;
                a5 = v209;
                uint64_t v9 = v211;
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__dst.__r_.__value_.__l.__data_);
                }
                int v172 = *(_DWORD *)(v156 + 16);
                *(_DWORD *)(v156 + 64) = 5;
                *(_DWORD *)(v156 + 16) = v172 | 0x24;
                uint64_t v12 = *(void *)(v156 + 40);
                if (v12) {
                  goto LABEL_5;
                }
                goto LABEL_312;
              }
            }
            else
            {
              memset(&__dst, 0, sizeof(__dst));
              uint64_t v163 = &__dst;
              *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v161 + v159;
              if (!v159) {
                goto LABEL_266;
              }
            }
            if (v158 >= 0) {
              long long v167 = a3;
            }
            else {
              long long v167 = *a3;
            }
            memmove(v163, v167, v159);
            goto LABEL_266;
          case 5:
            *(_DWORD *)(v16 + 16) = v20 | 0x44;
            *(_DWORD *)(v16 + 64) = 1;
            int v46 = *((char *)a3 + 23);
            if (v46 >= 0) {
              size_t v47 = *((unsigned __int8 *)a3 + 23);
            }
            else {
              size_t v47 = (size_t)a3[1];
            }
            int v48 = byte_25F3C8F;
            if (byte_25F3C8F >= 0) {
              size_t v49 = byte_25F3C8F;
            }
            else {
              size_t v49 = qword_25F3C80;
            }
            unint64_t v50 = v49 + v47;
            if (v49 + v47 > 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_329;
            }
            if (v50 <= 0x16)
            {
              memset(&__dst, 0, sizeof(__dst));
              unint64_t v51 = &__dst;
              *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v49 + v47;
              if (!v47) {
                goto LABEL_140;
              }
LABEL_136:
              if (v46 >= 0) {
                uint64_t v91 = a3;
              }
              else {
                uint64_t v91 = *a3;
              }
              memmove(v51, v91, v47);
              goto LABEL_140;
            }
            uint64_t v88 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v50 | 7) != 0x17) {
              uint64_t v88 = v50 | 7;
            }
            uint64_t v89 = v88 + 1;
            unint64_t v51 = (std::string *)operator new(v88 + 1);
            unint64_t v90 = v89 | 0x8000000000000000;
            a6 = v210;
            __dst.__r_.__value_.__l.__size_ = v49 + v47;
            __dst.__r_.__value_.__r.__words[2] = v90;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
            if (v47) {
              goto LABEL_136;
            }
LABEL_140:
            char v92 = (char *)v51 + v47;
            if (v49)
            {
              if (v48 >= 0) {
                uint64_t v93 = &qword_25F3C78;
              }
              else {
                uint64_t v93 = (uint64_t *)qword_25F3C78;
              }
              memmove(v92, v93, v49);
            }
            v92[v49] = 0;
            *(_DWORD *)(v16 + 16) |= 1u;
            uint64_t v94 = *(void *)(v16 + 8);
            uint64_t v95 = (uint64_t *)(v94 & 0xFFFFFFFFFFFFFFFCLL);
            if (v94) {
              uint64_t v95 = (uint64_t *)*v95;
            }
            sub_1881E08((uint64_t *)(v16 + 48), (long long *)&__dst, v95);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__dst.__r_.__value_.__l.__data_);
              char v96 = *(_DWORD **)(a6 + 224);
              if (!v96) {
                goto LABEL_280;
              }
            }
            else
            {
              char v96 = *(_DWORD **)(a6 + 224);
              if (!v96) {
                goto LABEL_280;
              }
            }
            uint64_t v173 = *(int *)(a6 + 216);
            if ((int)v173 < *v96)
            {
              *(_DWORD *)(a6 + 216) = v173 + 1;
              uint64_t v156 = *(void *)&v96[2 * v173 + 2];
              goto LABEL_281;
            }
LABEL_280:
            sub_13D96E0(*v205);
            uint64_t v156 = sub_188CDC8((uint64_t)v205, v174);
LABEL_281:
            unsigned int v175 = sub_63A824(v211);
            std::to_string(&__dst, v175);
            *(_DWORD *)(v156 + 16) |= 2u;
            uint64_t v176 = *(void *)(v156 + 8);
            long long v177 = (uint64_t *)(v176 & 0xFFFFFFFFFFFFFFFCLL);
            if (v176) {
              long long v177 = (uint64_t *)*v177;
            }
            sub_1881E08((uint64_t *)(v156 + 32), (long long *)&__dst, v177);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__dst.__r_.__value_.__l.__data_);
            }
            double v178 = *(double *)(v211 + 88) / 3.6;
            *(_DWORD *)(v156 + 16) |= 0x80u;
            *(double *)(v156 + 72) = v178;
            int v179 = *((char *)a3 + 23);
            if (v179 >= 0) {
              size_t v180 = *((unsigned __int8 *)a3 + 23);
            }
            else {
              size_t v180 = (size_t)a3[1];
            }
            int v181 = byte_25F3C8F;
            if (byte_25F3C8F >= 0) {
              size_t v182 = byte_25F3C8F;
            }
            else {
              size_t v182 = qword_25F3C80;
            }
            unint64_t v183 = v182 + v180;
            if (v182 + v180 > 0x7FFFFFFFFFFFFFF7) {
LABEL_329:
            }
              sub_188D690();
            if (v183 > 0x16)
            {
              uint64_t v185 = (v183 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v183 | 7) != 0x17) {
                uint64_t v185 = v183 | 7;
              }
              uint64_t v186 = v185 + 1;
              long long v184 = (std::string *)operator new(v185 + 1);
              unint64_t v187 = v186 | 0x8000000000000000;
              a6 = v210;
              __dst.__r_.__value_.__l.__size_ = v182 + v180;
              __dst.__r_.__value_.__r.__words[2] = v187;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v184;
              if (!v180)
              {
LABEL_302:
                int v189 = (char *)v184 + v180;
                if (v182)
                {
                  if (v181 >= 0) {
                    size_t v190 = &qword_25F3C78;
                  }
                  else {
                    size_t v190 = (uint64_t *)qword_25F3C78;
                  }
                  memmove(v189, v190, v182);
                }
                v189[v182] = 0;
                *(_DWORD *)(v156 + 16) |= 1u;
                uint64_t v191 = *(void *)(v156 + 8);
                long long v192 = (uint64_t *)(v191 & 0xFFFFFFFFFFFFFFFCLL);
                if (v191) {
                  long long v192 = (uint64_t *)*v192;
                }
                sub_1881E08((uint64_t *)(v156 + 24), (long long *)&__dst, v192);
                uint64_t v10 = v208;
                a5 = v209;
                uint64_t v9 = v211;
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__dst.__r_.__value_.__l.__data_);
                }
                int v193 = *(_DWORD *)(v156 + 16);
                *(_DWORD *)(v156 + 64) = 1;
                *(_DWORD *)(v156 + 16) = v193 | 0x24;
                uint64_t v12 = *(void *)(v156 + 40);
                if (v12) {
                  goto LABEL_5;
                }
LABEL_312:
                uint64_t v194 = *(void *)(v156 + 8);
                uint64_t v195 = (void *)(v194 & 0xFFFFFFFFFFFFFFFCLL);
                if (v194) {
                  uint64_t v195 = (void *)*v195;
                }
                uint64_t v12 = sub_15C1918((uint64_t)v195);
                *(void *)(v156 + 40) = v12;
LABEL_5:
                sub_E112BC(v207, v12, v13);
                goto LABEL_6;
              }
            }
            else
            {
              memset(&__dst, 0, sizeof(__dst));
              long long v184 = &__dst;
              *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v182 + v180;
              if (!v180) {
                goto LABEL_302;
              }
            }
            if (v179 >= 0) {
              uint64_t v188 = a3;
            }
            else {
              uint64_t v188 = *a3;
            }
            memmove(v184, v188, v180);
            goto LABEL_302;
          default:
            goto LABEL_6;
        }
      }
    }
  }
}

void sub_E1C438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_E1C490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = *(void *)(a2 + 7352);
  uint64_t v6 = *(void *)(a2 + 7360);
  if (v5 != v6)
  {
    uint64_t v10 = (uint64_t *)(a4 + 96);
    do
    {
      if (!sub_E2886C(a5, v5 + 40))
      {
        uint64_t v11 = *(int *)(a4 + 104);
        int v24 = (long long *)(v5 + 40);
        sub_E28A9C((uint64_t)a5, v5 + 40, (uint64_t)&unk_20F06E0, &v24)[5] = v11;
        double v13 = *(_DWORD **)(a4 + 112);
        if (v13 && (uint64_t v14 = *(int *)(a4 + 104), (int)v14 < *v13))
        {
          *(_DWORD *)(a4 + 104) = v14 + 1;
          uint64_t v15 = *(void *)&v13[2 * v14 + 2];
        }
        else
        {
          uint64_t v16 = sub_13D9608(*v10);
          uint64_t v15 = sub_188CDC8((uint64_t)v10, v16);
        }
        sub_E1163C(v5, v15, 0, v12);
      }
      int v24 = (long long *)(v5 + 40);
      uint64_t v17 = sub_E28A9C((uint64_t)a5, v5 + 40, (uint64_t)&unk_20F06E0, &v24);
      if (!*(unsigned char *)(v5 + 432))
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_2439078;
      }
      int v18 = *((_DWORD *)v17 + 10);
      uint64_t v19 = *(void *)(v5 + 424);
      int v20 = (int)v19 / 100;
      int v21 = (int)v19 % 100;
      if (v19 < 0) {
        __int16 v22 = -50;
      }
      else {
        __int16 v22 = 50;
      }
      sub_E14F6C(v18, v20 + ((5243 * (__int16)(v22 + v21)) >> 19) + ((5243 * (__int16)(v22 + v21)) >> 31), a3);
      v5 += 1120;
    }
    while (v5 != v6);
  }
}

uint64_t sub_E1C66C(uint64_t a1, void *a2)
{
  std::string __p = operator new(0x20uLL);
  long long v11 = xmmword_20B9800;
  strcpy((char *)__p, "add_traffic_lights_to_response");
  BOOL v4 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)a1 = v4;
  std::string __p = operator new(0x20uLL);
  long long v11 = xmmword_20B5EB0;
  strcpy((char *)__p, "add_stop_signs_to_response");
  BOOL v5 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 1) = v5;
  std::string __p = operator new(0x20uLL);
  long long v11 = xmmword_20B8890;
  strcpy((char *)__p, "add_speed_cameras_to_response");
  BOOL v6 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 2) = v6;
  std::string __p = operator new(0x30uLL);
  long long v11 = xmmword_20B9A80;
  strcpy((char *)__p, "centerline_geometry_simplification_tolerance_m");
  double v7 = sub_5C7E8(a2, (uint64_t)&__p);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p);
  }
  *(double *)(a1 + 8) = v7;
  std::string __p = operator new(0x20uLL);
  long long v11 = xmmword_20B9800;
  strcpy((char *)__p, "add_debug_geometry_to_response");
  BOOL v8 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 16) = v8;
  return a1;
}

void sub_E1C864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_E1C890(void *a1, void *a2)
{
  *a1 = a2;
  a1[1] = sub_3750CC(a2);
  char v16 = 15;
  uint64_t v14 = 0;
  strcpy((char *)v15, "ResponseBuilder");
  double v12 = 0;
  double v13 = 0;
  BOOL v4 = sub_374CDC((uint64_t)a2, (uint64_t)v15, (uint64_t *)&v12);
  sub_3CB560(v4, (uint64_t)__p);
  sub_E221A4((uint64_t)(a1 + 2), __p);
  BOOL v5 = v18;
  if (v18)
  {
    do
    {
      uint64_t v10 = *(char **)v5;
      sub_57AC8((uint64_t *)v5 + 5);
      if (v5[39] < 0) {
        operator delete(*((void **)v5 + 2));
      }
      operator delete(v5);
      BOOL v5 = v10;
    }
    while (v10);
  }
  BOOL v6 = __p[0];
  __p[0] = 0;
  if (v6) {
    operator delete(v6);
  }
  double v7 = (void **)v12;
  if (v12)
  {
    BOOL v8 = v13;
    uint64_t v9 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      uint64_t v9 = v12;
    }
    double v13 = v7;
    operator delete(v9);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  return a1;
}

void sub_E1C9DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_E1CA14(unsigned char *a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, char **a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9 = sub_162C594(a6, 0, 0);
  uint64_t v10 = *a2;
  size_t v122 = a2[1];
  unint64_t v123 = (uint64_t *)a2;
  uint64_t v124 = v9;
  if (*a2 == v122)
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)__p);
      sub_188FC78(__p, (uint64_t)"No routes found", 15);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&v125, 1u);
      if (v126 < 0) {
        operator delete(v125);
      }
      if (SHIBYTE(v132) < 0) {
        operator delete(v130);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *(_DWORD *)(v124 + 40) |= 0x100000u;
    *(_DWORD *)(v124 + 536) = 20;
  }
  else
  {
    long long v11 = (uint64_t *)(v9 + 48);
    do
    {
      double v12 = *(_DWORD **)(v124 + 64);
      if (v12 && (uint64_t v13 = *(int *)(v124 + 56), (int)v13 < *v12))
      {
        *(_DWORD *)(v124 + 56) = v13 + 1;
        uint64_t v14 = *(void *)&v12[2 * v13 + 2];
      }
      else
      {
        uint64_t v15 = sub_13D8E84(*v11);
        uint64_t v14 = sub_188CDC8((uint64_t)v11, v15);
      }
      int v16 = sub_6478E0((uint64_t)v10);
      *(_DWORD *)(v14 + 40) |= 4u;
      uint64_t v17 = *(void *)(v14 + 8);
      int v18 = (uint64_t *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
      if (v17) {
        int v18 = (uint64_t *)*v18;
      }
      HIBYTE(v128) = 4;
      LODWORD(__p[0]) = v16;
      BYTE4(__p[0]) = 0;
      sub_1881DF4((std::string **)(v14 + 672), (long long *)__p, v18);
      if (SHIBYTE(v128) < 0) {
        operator delete(__p[0]);
      }
      int v19 = sub_6478D8((uint64_t)v10);
      int v20 = sub_E150CC(v19);
      *(_DWORD *)(v14 + 40) |= 0x1000000u;
      *(_DWORD *)(v14 + 836) = v20;
      int v21 = (unsigned __int8 *)sub_6477D4((uint64_t)v10);
      BOOL v22 = (*v21 | *((_DWORD *)v21 + 13)) == 0;
      *(_DWORD *)(v14 + 44) |= 1u;
      *(unsigned char *)(v14 + 868) = v22;
      char v23 = *(unsigned char *)(sub_6477D4((uint64_t)v10) + 1) ^ 1;
      *(_DWORD *)(v14 + 44) |= 2u;
      *(unsigned char *)(v14 + 869) = v23;
      sub_E1D72C((uint64_t)a1, v10, (_DWORD *)v14);
      unsigned int v24 = sub_35E640();
      int v25 = sub_E124B8(v24);
      *(_DWORD *)(v14 + 40) |= 0x200000u;
      *(_DWORD *)(v14 + 824) = v25;
      uint64_t v26 = sub_6467E8(v10, 0);
      int v27 = sub_E124DC(*(unsigned __int8 *)(v26 + 1057));
      *(_DWORD *)(v14 + 40) |= 0x2000000u;
      *(_DWORD *)(v14 + 840) = v27;
      uint64_t v28 = sub_647CD8((uint64_t)v10);
      int v30 = *(const std::string **)v28;
      size_t v29 = *(const std::string **)(v28 + 8);
      if (*(const std::string **)v28 != v29)
      {
        size_t v31 = (uint64_t **)(v14 + 128);
        do
        {
          unint64_t v32 = *(_DWORD **)(v14 + 144);
          if (v32 && (uint64_t v33 = *(int *)(v14 + 136), (int)v33 < *v32))
          {
            *(_DWORD *)(v14 + 136) = v33 + 1;
            int v34 = *(std::string **)&v32[2 * v33 + 2];
          }
          else
          {
            if (!*v31) {
              operator new();
            }
            *int v36 = v35;
            v36[1] = sub_3A6EDC;
            *size_t v35 = 0;
            v35[1] = 0;
            v35[2] = 0;
            int v34 = (std::string *)sub_188CDC8(v14 + 128, (uint64_t)v35);
          }
          std::string::operator=(v34, v30++);
        }
        while (v30 != v29);
      }
      uint64_t v37 = sub_647B84((uint64_t)v10);
      unint64_t v38 = *(const std::string **)v37;
      uint64_t v39 = *(const std::string **)(v37 + 8);
      if (*(const std::string **)v37 != v39)
      {
        do
        {
          int v40 = *(_DWORD **)(v14 + 312);
          if (v40 && (uint64_t v41 = *(int *)(v14 + 304), (int)v41 < *v40))
          {
            *(_DWORD *)(v14 + 304) = v41 + 1;
            uint64_t v42 = *(void *)&v40[2 * v41 + 2];
          }
          else
          {
            sub_13D6A1C(*(void *)(v14 + 296));
            uint64_t v42 = sub_188CDC8(v14 + 296, v43);
          }
          unint64_t v44 = *(_DWORD **)(v42 + 40);
          if (v44 && (uint64_t v45 = *(int *)(v42 + 32), (int)v45 < *v44))
          {
            *(_DWORD *)(v42 + 32) = v45 + 1;
            int v46 = *(std::string **)&v44[2 * v45 + 2];
          }
          else
          {
            uint64_t v47 = v42 + 24;
            int v48 = *(uint64_t **)(v42 + 24);
            if (!v48) {
              operator new();
            }
            *unint64_t v50 = v49;
            v50[1] = sub_3A6EDC;
            *size_t v49 = 0;
            v49[1] = 0;
            v49[2] = 0;
            int v46 = (std::string *)sub_188CDC8(v47, (uint64_t)v49);
          }
          std::string::operator=(v46, v38++);
        }
        while (v38 != v39);
      }
      unint64_t v51 = (void *)sub_647C20((uint64_t)v10);
      if (!sub_45FB38(v51))
      {
        uint64_t v52 = (const std::string **)sub_647C20((uint64_t)v10);
        *(_DWORD *)(v14 + 40) |= 0x2000u;
        uint64_t v53 = *(void *)(v14 + 760);
        if (!v53)
        {
          uint64_t v54 = *(void *)(v14 + 8);
          uint64_t v55 = (void *)(v54 & 0xFFFFFFFFFFFFFFFCLL);
          if (v54) {
            uint64_t v55 = (void *)*v55;
          }
          sub_13D6A1C((uint64_t)v55);
          uint64_t v53 = v56;
          *(void *)(v14 + 760) = v56;
        }
        sub_5F4D30(v52, v53);
      }
      sub_E1741C((uint64_t)a1, v10, a3, v14);
      uint64_t v57 = (void *)sub_6467E8(v10, 0);
      uint64_t v58 = v57;
      if (v57[1463] != v57[1464] && v57[1461] != 0x7FFFFFFFFFFFFFFFLL && v57[1462] != 0x7FFFFFFFFFFFFFFFLL)
      {
        *(_DWORD *)(v14 + 40) |= 0x4000u;
        uint64_t v59 = *(void *)(v14 + 768);
        if (!v59)
        {
          uint64_t v60 = *(void *)(v14 + 8);
          uint64_t v61 = (void *)(v60 & 0xFFFFFFFFFFFFFFFCLL);
          if (v60) {
            uint64_t v61 = (void *)*v61;
          }
          sub_13D7B20((uint64_t)v61);
          uint64_t v59 = v62;
          *(void *)(v14 + 768) = v62;
        }
        sub_E12EEC(v58 + 1461, v59);
      }
      sub_E175A4((uint64_t)a1, v10, v14);
      unint64_t v63 = (void *)nullsub_1(v10);
      if (379049677 * ((v63[1] - *v63) >> 3))
      {
        sub_6467E8(v10, 0);
        sub_E1EAFC((uint64_t)a1);
      }
      sub_E1DA20((uint64_t)a1, (uint64_t)v10, v14);
      v10 += 945;
    }
    while (v10 != v122);
    uint64_t v64 = sub_3777C0(*(void **)a1);
    uint64_t v65 = *v123;
    uint64_t v66 = (void *)v123[1];
    if ((void *)*v123 == v66)
    {
LABEL_55:
      char v71 = 1;
    }
    else
    {
      uint64_t v67 = v64;
      while (1)
      {
        uint64_t v68 = (uint64_t *)nullsub_1(v65);
        uint64_t v70 = *v68;
        uint64_t v69 = v68[1];
        if (*v68 != v69) {
          break;
        }
LABEL_54:
        v65 += 7560;
        if ((void *)v65 == v66) {
          goto LABEL_55;
        }
      }
      while (sub_3D3910(v67, v70, *(unsigned __int8 *)(a3 + 40)) == 2)
      {
        v70 += 12328;
        if (v70 == v69) {
          goto LABEL_54;
        }
      }
      char v71 = 0;
    }
    *(_DWORD *)(v124 + 40) |= 0x1000000u;
    *(unsigned char *)(v124 + 549) = v71;
    unint64_t v72 = (void *)*v123;
    uint64_t v73 = (void *)v123[1];
    if ((void *)*v123 == v73)
    {
LABEL_69:
      char v77 = 0;
    }
    else
    {
      while (1)
      {
        uint64_t v74 = nullsub_1(v72);
        uint64_t v76 = *(void **)v74;
        uint64_t v75 = *(void **)(v74 + 8);
        if (*(void **)v74 != v75) {
          break;
        }
LABEL_68:
        v72 += 945;
        if (v72 == v73) {
          goto LABEL_69;
        }
      }
      while (1)
      {
        sub_46C77C(v76, __p);
        if (sub_E28250((void *)__p[0], (unint64_t)__p[1], v128, v129, (uint64_t)a1)) {
          break;
        }
        v76 += 1541;
        if (v76 == v75) {
          goto LABEL_68;
        }
      }
      char v77 = 1;
    }
    *(_DWORD *)(v124 + 40) |= 0x4000000u;
    *(unsigned char *)(v124 + 551) = v77;
    if (*(unsigned char *)a3) {
      sub_E17A18(*((void *)a1 + 1), (uint64_t)v123, v124);
    }
    if ((int)(-72719023 * ((v123[1] - *v123) >> 3)) >= 1)
    {
      uint64_t v78 = 0;
      uint64_t v79 = -72719023 * ((v123[1] - *v123) >> 3);
      do
      {
        uint64_t v80 = *(void *)(*(void *)(v124 + 64) + 8 * v78 + 8);
        unint64_t v81 = (uint64_t **)nullsub_1(*v123 + 7560 * v78);
        double v83 = *v81;
        uint64_t v82 = v81[1];
        while (v83 != v82)
        {
          if (v83[1503] == v83[1504]) {
            sub_E110A0(v83 + 916, v80);
          }
          else {
            sub_E14810(v83 + 1503, v80);
          }
          v83 += 1541;
        }
        ++v78;
      }
      while (v78 != v79);
    }
    sub_E1DDA4((uint64_t)a1, v123, v124);
    uint64_t v86 = *a4;
    uint64_t v85 = a4[1];
    if (*a4 != v85)
    {
      int64x2_t v87 = (uint64_t *)(v124 + 120);
      do
      {
        uint64_t v88 = *(_DWORD **)(v124 + 136);
        if (v88 && (uint64_t v89 = *(int *)(v124 + 128), (int)v89 < *v88))
        {
          *(_DWORD *)(v124 + 128) = v89 + 1;
          uint64_t v90 = *(void *)&v88[2 * v89 + 2];
        }
        else
        {
          uint64_t v91 = sub_13D9608(*v87);
          uint64_t v90 = sub_188CDC8((uint64_t)v87, v91);
        }
        sub_E1163C(v86, v90, 0, v84);
        v86 += 1120;
      }
      while (v86 != v85);
    }
    sub_E1DF00((uint64_t)a1, v123, v124);
    sub_E1E7EC(v92, v123, a5, v124);
    uint64_t v93 = sub_1883FB0((void *)(v124 + 16), dword_254E9B0, 11, (uint64_t)&off_252C740, 0);
    uint64_t v94 = (long long *)(sub_6467E8((void *)*v123, 0) + 7400);
    *(_DWORD *)(v93 + 16) |= 1u;
    uint64_t v95 = *(void *)(v93 + 8);
    char v96 = (uint64_t *)(v95 & 0xFFFFFFFFFFFFFFFCLL);
    if (v95) {
      char v96 = (uint64_t *)*v96;
    }
    sub_1881DF4((std::string **)(v93 + 48), v94, v96);
    uint64_t v97 = (uint64_t *)sub_374CE4(*(void **)a1);
    char v98 = sub_2ABCBC(*v97);
    int v99 = *(_DWORD *)(v124 + 40);
    *(unsigned char *)(v124 + 550) = v98;
    *(_DWORD *)(v124 + 40) = v99 | 0x2100000;
    *(_DWORD *)(v124 + 536) = 0;
    if (*(unsigned char *)(a3 + 32))
    {
      sub_E323AC((uint64_t)__p, (int *)a3);
      int v100 = -72719023 * ((v123[1] - *v123) >> 3);
      if (v100 >= 1)
      {
        sub_E323E0((void (***)(void, uint64_t, uint64_t))__p, *v123, *(void *)(*(void *)(v124 + 64) + 8));
        uint64_t v101 = sub_1883FB0((void *)(v124 + 16), dword_254E9B0, 11, (uint64_t)&off_252C740, 0);
        int v102 = (long long *)sub_648354(*v123);
        *(_DWORD *)(v101 + 16) |= 2u;
        uint64_t v103 = *(void *)(v101 + 8);
        unint64_t v104 = (uint64_t *)(v103 & 0xFFFFFFFFFFFFFFFCLL);
        if (v103) {
          unint64_t v104 = (uint64_t *)*v104;
        }
        sub_1881DF4((std::string **)(v101 + 56), v102, v104);
        if (v100 != 1)
        {
          uint64_t v105 = 0;
          uint64_t v106 = 7560;
          do
          {
            sub_E323E0((void (***)(void, uint64_t, uint64_t))__p, *v123 + v106, *(void *)(*(void *)(v124 + 64) + 8 * v105 + 16));
            v106 += 7560;
            ++v105;
          }
          while (v100 - 1 != v105);
        }
        if ((int)(-72719023 * ((v123[1] - *v123) >> 3)) >= 1)
        {
          unint64_t v107 = 0;
          uint64_t v108 = -72719023 * ((v123[1] - *v123) >> 3);
          do
          {
            uint64_t v109 = *(void *)(*(void *)(v124 + 64) + 8 * v107 + 8);
            uint64_t v110 = (void *)(*v123 + 7560 * v107);
            unint64_t v111 = (void *)nullsub_1(v110);
            uint64_t v112 = v111[1] - *v111;
            if (v112)
            {
              unint64_t v113 = 0;
              uint64_t v114 = v112 / 12328;
              do
              {
                uint64_t v115 = (void *)sub_6467E8(v110, v113);
                sub_E20C3C(a1, v115, v107, v113++, v109, v124);
              }
              while (v114 != v113);
            }
            ++v107;
          }
          while (v107 != v108);
        }
      }
    }
    else
    {
      sub_DE96C4((uint64_t)__p, (int *)a3);
      unint64_t v116 = 0xBAA6550FFBAA6551 * ((v123[1] - *v123) >> 3);
      if ((int)v116 >= 1)
      {
        uint64_t v117 = 0;
        uint64_t v118 = 7560 * v116;
        uint64_t v119 = 8;
        do
        {
          sub_DE96C8((uint64_t)__p, (void *)(*v123 + v117), *(void *)(*(void *)(v124 + 64) + v119));
          v117 += 7560;
          v119 += 8;
        }
        while (v118 != v117);
      }
    }
    __p[0] = &off_243EE40;
    if (v136 < 0) {
      operator delete(v135);
    }
    if (v133)
    {
      uint64_t v134 = v133;
      operator delete(v133);
    }
    if (v131)
    {
      long long v132 = v131;
      operator delete(v131);
    }
    if (v128)
    {
      unint64_t v129 = (unint64_t)v128;
      operator delete(v128);
    }
  }
}

void sub_E1D61C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a20);
    sub_162D64C(a13);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a20);
  sub_162D64C(a13);
  _Unwind_Resume(a1);
}

void sub_E1D668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

uint64_t sub_E1D72C(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v5 = sub_646C34(a2);
  if (v5 < 0) {
    __int16 v6 = -50;
  }
  else {
    __int16 v6 = 50;
  }
  a3[10] |= 0x400000u;
  a3[207] = (int)v5 / 100
          + ((5243 * (__int16)(v6 + (int)v5 % 100)) >> 19)
          + ((5243 * (__int16)(v6 + (int)v5 % 100)) >> 31);
  int v7 = sub_646CE8((uint64_t)a2);
  if (v7 < 0) {
    char v8 = -5;
  }
  else {
    char v8 = 5;
  }
  a3[10] |= 0x800000u;
  a3[208] = v7 / 10 + (((103 * (char)(v8 + v7 % 10)) >> 15) & 1) + ((103 * (char)(v8 + v7 % 10)) >> 10);
  if (sub_646D74((unsigned int **)a2))
  {
    int v10 = sub_646D60((unsigned int **)a2);
    if (v10 < 0) {
      char v11 = -5;
    }
    else {
      char v11 = 5;
    }
    a3[10] |= 0x80000000;
    a3[216] = v10 / 10
            + (((103 * (char)(v11 + v10 % 10)) >> 15) & 1)
            + ((103 * (char)(v11 + v10 % 10)) >> 10);
    if (!sub_646DF4((unsigned int **)a2))
    {
LABEL_9:
      if (!sub_646EF4((unsigned int **)a2)) {
        goto LABEL_10;
      }
      goto LABEL_20;
    }
  }
  else if (!sub_646DF4((unsigned int **)a2))
  {
    goto LABEL_9;
  }
  int v12 = sub_646DE0((unsigned int **)a2);
  if (v12 < 0) {
    char v13 = -5;
  }
  else {
    char v13 = 5;
  }
  a3[10] |= 0x10000000u;
  a3[213] = v12 / 10
          + (((103 * (char)(v13 + v12 % 10)) >> 15) & 1)
          + ((103 * (char)(v13 + v12 % 10)) >> 10);
  if (!sub_646EF4((unsigned int **)a2))
  {
LABEL_10:
    uint64_t result = sub_646E74((unsigned int **)a2);
    if (!result) {
      return result;
    }
    goto LABEL_24;
  }
LABEL_20:
  int v14 = sub_646EE0((unsigned int **)a2);
  if (v14 < 0) {
    char v15 = -5;
  }
  else {
    char v15 = 5;
  }
  a3[10] |= 0x40000000u;
  a3[215] = v14 / 10
          + (((103 * (char)(v15 + v14 % 10)) >> 15) & 1)
          + ((103 * (char)(v15 + v14 % 10)) >> 10);
  uint64_t result = sub_646E74((unsigned int **)a2);
  if (result)
  {
LABEL_24:
    uint64_t result = sub_646E60((unsigned int **)a2);
    if ((int)result < 0) {
      char v16 = -5;
    }
    else {
      char v16 = 5;
    }
    a3[10] |= 0x20000000u;
    a3[214] = (int)result / 10
            + (((103 * (char)(v16 + (int)result % 10)) >> 15) & 1)
            + ((103 * (char)(v16 + (int)result % 10)) >> 10);
  }
  return result;
}

void sub_E1DA20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v5 = (uint64_t *)sub_376F8C(*(void **)a1);
    int v34 = 0;
    size_t v35 = 0;
    uint64_t v36 = 0;
    __int16 v6 = (uint64_t *)nullsub_1(a2);
    uint64_t v7 = *v6;
    uint64_t v8 = v6[1];
    if (*v6 != v8)
    {
      do
      {
        if (!sub_64EFF0(v7)) {
          goto LABEL_4;
        }
        uint64_t v9 = sub_46CAAC(v7);
        unsigned int v38 = *(_DWORD *)(v9 + 112);
        if (v38 <= 1) {
          uint64_t v37 = *(void *)(v9 + 104);
        }
        sub_28E4E4(v5, (uint64_t)&v37, (unint64_t)&v23);
        sub_30C0C(&v34, v30);
        sub_8AC4C((uint64_t)&v33);
        int v10 = (void **)__p;
        if (__p)
        {
          char v11 = v32;
          int v12 = __p;
          if (v32 != __p)
          {
            do
            {
              if (*((char *)v11 - 1) < 0) {
                operator delete(*(v11 - 3));
              }
              v11 -= 3;
            }
            while (v11 != v10);
            int v12 = __p;
          }
          unint64_t v32 = v10;
          operator delete(v12);
        }
        if (v29 < 0)
        {
          operator delete(v28);
          if ((v27 & 0x80000000) == 0)
          {
LABEL_18:
            if (SHIBYTE(v25) < 0) {
              goto LABEL_22;
            }
            goto LABEL_4;
          }
        }
        else if ((v27 & 0x80000000) == 0)
        {
          goto LABEL_18;
        }
        operator delete(v26);
        if (SHIBYTE(v25) < 0) {
LABEL_22:
        }
          operator delete(v23);
LABEL_4:
        v7 += 12328;
      }
      while (v7 != v8);
    }
    char v23 = 0;
    unsigned int v24 = 0;
    uint64_t v25 = 0;
    HIBYTE(v22[2]) = 17;
    strcpy((char *)v22, "Charging Stations");
    sub_DEC58C((uint64_t *)&v23, (uint64_t *)&v34, (uint64_t)v22, 0xFFFFFFFF, 0, 0, 0.0);
    if (SHIBYTE(v22[2]) < 0) {
      operator delete(v22[0]);
    }
    sub_DEC8F0((char **)&v23, (uint64_t)v22);
    char v13 = (char *)v22[0];
    int v14 = (char *)v22[1];
    if (v22[0] != v22[1])
    {
      char v15 = (uint64_t **)(a3 + 16);
      do
      {
        char v16 = (std::string *)sub_1884274(v15, dword_254EA30, 11, (uint64_t)&off_252CDD0, 0);
        sub_11B9D5C(v16, (uint64_t)v13);
        v13 += 48;
      }
      while (v13 != v14);
      char v13 = (char *)v22[0];
    }
    if (v13)
    {
      uint64_t v17 = (char *)v22[1];
      int v18 = v13;
      if (v22[1] != v13)
      {
        do
          uint64_t v17 = (char *)sub_11B9574(v17 - 48);
        while (v17 != v13);
        int v18 = v22[0];
      }
      v22[1] = v13;
      operator delete(v18);
    }
    int v19 = (void **)v23;
    if (!v23) {
      goto LABEL_45;
    }
    int v20 = v24;
    int v21 = v23;
    if (v24 == v23)
    {
LABEL_44:
      unsigned int v24 = v19;
      operator delete(v21);
LABEL_45:
      if (v34)
      {
        size_t v35 = v34;
        operator delete(v34);
      }
      return;
    }
    while (1)
    {
      if (*((char *)v20 - 25) < 0)
      {
        operator delete(*(v20 - 6));
        if (*((char *)v20 - 49) < 0) {
LABEL_42:
        }
          operator delete(*(v20 - 9));
      }
      else if (*((char *)v20 - 49) < 0)
      {
        goto LABEL_42;
      }
      v20 -= 10;
      if (v20 == v19)
      {
        int v21 = v23;
        goto LABEL_44;
      }
    }
  }
}

void sub_E1DD28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16)
{
  sub_CBDA74(&a16);
  int v18 = *(void **)(v16 - 128);
  if (v18)
  {
    *(void *)(v16 - 120) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(a1);
}

void sub_E1DDA4(uint64_t a1, void *a2, uint64_t a3)
{
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)uint64_t v16 = 0u;
  int v17 = 1065353216;
  if ((int)(-72719023 * ((uint64_t)(a2[1] - *a2) >> 3)) >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = -72719023 * ((uint64_t)(a2[1] - *a2) >> 3);
    do
    {
      uint64_t v8 = *(void *)(*(void *)(a3 + 64) + 8 * v6 + 8);
      uint64_t v9 = (uint64_t *)nullsub_1(*a2 + 7560 * v6);
      uint64_t v10 = *v9;
      uint64_t v11 = v9[1];
      if (*v9 != v11)
      {
        do
        {
          sub_E1C490(a1, v10, v8, a3, __p);
          v10 += 12328;
        }
        while (v10 != v11);
      }
      ++v6;
    }
    while (v6 != v7);
    int v12 = (void **)v16[0];
    if (v16[0])
    {
      do
      {
        int v14 = (void **)*v12;
        if (*((char *)v12 + 39) < 0) {
          operator delete(v12[2]);
        }
        operator delete(v12);
        int v12 = v14;
      }
      while (v14);
    }
  }
  char v13 = __p[0];
  __p[0] = 0;
  if (v13) {
    operator delete(v13);
  }
}

void sub_E1DED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_E1DEEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_E1DF00(uint64_t a1, void *a2, uint64_t a3)
{
  int64x2_t v87 = 0uLL;
  unint64_t v88 = 0;
  if ((int)(-72719023 * ((uint64_t)(a2[1] - *a2) >> 3)) >= 1)
  {
    uint64_t v3 = a3;
    uint64_t v4 = 0;
    uint64_t v5 = (uint64_t *)(a3 + 232);
    uint64_t v73 = -72719023 * ((uint64_t)(a2[1] - *a2) >> 3);
    uint64_t v75 = (uint64_t *)(a3 + 232);
    while (1)
    {
      uint64_t v86 = *(void *)(*(void *)(v3 + 64) + 8 * v4 + 8);
      unint64_t v81 = (void *)(*a2 + 7560 * v4);
      uint64_t v6 = (void *)nullsub_1(v81);
      uint64_t v7 = v6[1] - *v6;
      if (v7) {
        break;
      }
LABEL_3:
      if (++v4 == v73)
      {
        if (v87.i64[0])
        {
          sub_E28164((uint64_t)&v87, v87.i64[0]);
          operator delete((void *)v87.i64[0]);
        }
        return;
      }
    }
    uint64_t v8 = 0;
    unint64_t v80 = 0xFF55E3181697D6CDLL * (v7 >> 3);
    uint64_t v77 = v4;
    while (1)
    {
      uint64_t v82 = v8;
      uint64_t v9 = (void *)sub_6467E8(v81, v8);
      uint64_t v10 = v9;
      uint64_t v11 = v9[1263];
      uint64_t v12 = v9[1264];
      if (v11 == 0x7FFFFFFFFFFFFFFFLL || v12 == 0x7FFFFFFFFFFFFFFFLL) {
        goto LABEL_6;
      }
      unint64_t v14 = v87.u64[1];
      uint64_t v85 = (void *)v87.i64[1];
      uint64_t v15 = v87.i64[0];
      if (v87.i64[0] == v87.i64[1])
      {
        int v20 = (void *)v87.i64[0];
LABEL_45:
        if (v20 != (void *)v14)
        {
          *(_DWORD *)(v86 + 44) |= 8u;
          *(_DWORD *)(v86 + 872) = 954437177 * (((unint64_t)v20 - v15) >> 3);
          goto LABEL_71;
        }
      }
      else
      {
        uint64_t v16 = v9[1266];
        uint64_t v17 = v9[1265];
        uint64_t v18 = v9[1269];
        uint64_t v19 = v9[1268];
        int v20 = (void *)v87.i64[0];
        do
        {
          if (v11 == *v20)
          {
            uint64_t v21 = v20[2];
            if (v16 - v17 == v20[3] - v21)
            {
              if (v17 == v16)
              {
LABEL_24:
                uint64_t v23 = v20[5];
                if (v18 - v19 == v20[6] - v23)
                {
                  if (v19 == v18)
                  {
LABEL_13:
                    if (v12 == v20[1]) {
                      goto LABEL_45;
                    }
                  }
                  else
                  {
                    uint64_t v24 = v10[1268];
                    while (*(_DWORD *)v24 == *(_DWORD *)v23)
                    {
                      if (*(_DWORD *)(v24 + 4) != *(_DWORD *)(v23 + 4)) {
                        break;
                      }
                      if (*(_DWORD *)(v24 + 12) != *(_DWORD *)(v23 + 12)) {
                        break;
                      }
                      if (*(_DWORD *)(v24 + 16) != *(_DWORD *)(v23 + 16)) {
                        break;
                      }
                      uint64_t v26 = *(void *)(v24 + 24);
                      uint64_t v25 = *(void *)(v24 + 32);
                      uint64_t v27 = *(void *)(v23 + 24);
                      if (v25 - v26 != *(void *)(v23 + 32) - v27) {
                        break;
                      }
                      while (v26 != v25)
                      {
                        char v29 = *(_DWORD **)v26;
                        uint64_t v28 = *(_DWORD **)(v26 + 8);
                        int v30 = *(_DWORD **)v27;
                        unint64_t v14 = v87.u64[1];
                        if ((_DWORD *)((char *)v28 - *(void *)v26) != (_DWORD *)(*(void *)(v27 + 8) - *(void *)v27)) {
                          goto LABEL_14;
                        }
                        for (; v29 != v28; v30 += 3)
                        {
                          unint64_t v14 = v87.u64[1];
                          if (*v29 != *v30) {
                            goto LABEL_14;
                          }
                          unint64_t v14 = v87.u64[1];
                          if (v29[1] != v30[1]) {
                            goto LABEL_14;
                          }
                          unint64_t v14 = v87.u64[1];
                          if (v29[2] != v30[2]) {
                            goto LABEL_14;
                          }
                          v29 += 3;
                        }
                        v26 += 24;
                        v27 += 24;
                      }
                      if (*(_DWORD *)(v24 + 48) != *(_DWORD *)(v23 + 48)
                        || *(_DWORD *)(v24 + 56) != *(_DWORD *)(v23 + 56))
                      {
                        break;
                      }
                      v24 += 72;
                      v23 += 72;
                      if (v24 == v18) {
                        goto LABEL_13;
                      }
                    }
                  }
                }
              }
              else
              {
                uint64_t v22 = v10[1265];
                while (*(_DWORD *)v22 == *(_DWORD *)v21
                     && *(_DWORD *)(v22 + 4) == *(_DWORD *)(v21 + 4)
                     && *(_DWORD *)(v22 + 8) == *(_DWORD *)(v21 + 8)
                     && *(void *)(v22 + 16) == *(void *)(v21 + 16))
                {
                  v22 += 24;
                  v21 += 24;
                  if (v22 == v16) {
                    goto LABEL_24;
                  }
                }
              }
            }
          }
LABEL_14:
          v20 += 9;
        }
        while (v20 != (void *)v14);
      }
      size_t v31 = v10 + 1263;
      *(_DWORD *)(v86 + 44) |= 8u;
      *(_DWORD *)(v86 + 872) = 954437177 * ((v14 - v15) >> 3);
      if (v14 >= v88)
      {
        v87.i64[1] = sub_E28458(&v87, (long long *)(v10 + 1263));
        uint64_t v61 = *(_DWORD **)(v3 + 248);
        if (!v61) {
          goto LABEL_69;
        }
      }
      else
      {
        long long v32 = *(_OWORD *)v31;
        *(void *)(v14 + 16) = 0;
        uint64_t v78 = v10 + 1263;
        *(_OWORD *)unint64_t v14 = v32;
        *(void *)(v14 + 24) = 0;
        *(void *)(v14 + 32) = 0;
        uint64_t v33 = (void *)v14;
        int v34 = (unsigned char *)v10[1265];
        uint64_t v79 = v10;
        size_t v35 = (unsigned char *)v10[1266];
        int64_t v36 = v35 - v34;
        if (v35 != v34)
        {
          if (0xAAAAAAAAAAAAAAABLL * (v36 >> 3) > 0xAAAAAAAAAAAAAAALL) {
            sub_2E00();
          }
          uint64_t v37 = (char *)operator new(v36);
          uint64_t v33 = v85;
          v85[2] = v37;
          v85[3] = v37;
          unsigned int v38 = &v37[8 * (v36 >> 3)];
          v85[4] = v38;
          memcpy(v37, v34, v36);
          v85[3] = v38;
        }
        v33[5] = 0;
        v33[6] = 0;
        v33[7] = 0;
        uint64_t v39 = (char *)v79[1268];
        int v40 = (long long *)v79[1269];
        uint64_t v89 = v33 + 5;
        char v90 = 0;
        double v83 = v40;
        int64_t v41 = (char *)v40 - v39;
        uint64_t v42 = v33;
        if (v41)
        {
          unint64_t v43 = 0x8E38E38E38E38E39 * (v41 >> 3);
          if (v43 >= 0x38E38E38E38E38FLL) {
            sub_2E00();
          }
          unint64_t v44 = (char *)operator new(v41);
          v33[5] = v44;
          v33[6] = v44;
          v33[7] = &v44[72 * v43];
          uint64_t v45 = v44;
          int v46 = (long long *)v39;
          do
          {
            long long v47 = *v46;
            *((void *)v45 + 2) = *((void *)v46 + 2);
            *((void *)v45 + 3) = 0;
            *(_OWORD *)uint64_t v45 = v47;
            *((void *)v45 + 4) = 0;
            *((void *)v45 + 5) = 0;
            uint64_t v48 = *((void *)v46 + 3);
            uint64_t v49 = *((void *)v46 + 4);
            int64_t v50 = v49 - v48;
            if (v49 != v48)
            {
              double v84 = v46;
              unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * (v50 >> 3);
              if (v51 > 0xAAAAAAAAAAAAAAALL) {
                sub_2E00();
              }
              uint64_t v52 = (char *)operator new(v50);
              uint64_t v53 = 0;
              *((void *)v45 + 3) = v52;
              *((void *)v45 + 4) = v52;
              *((void *)v45 + 5) = &v52[24 * v51];
              do
              {
                uint64_t v55 = &v52[v53];
                uint64_t v56 = v48 + v53;
                *(void *)uint64_t v55 = 0;
                *((void *)v55 + 1) = 0;
                *((void *)v55 + 2) = 0;
                uint64_t v58 = *(unsigned char **)(v48 + v53);
                uint64_t v57 = *(unsigned char **)(v48 + v53 + 8);
                int64_t v59 = v57 - v58;
                if (v57 != v58)
                {
                  if (0xAAAAAAAAAAAAAAABLL * (v59 >> 2) >= 0x1555555555555556) {
                    sub_2E00();
                  }
                  uint64_t v60 = (char *)operator new(v59);
                  *(void *)uint64_t v55 = v60;
                  *((void *)v55 + 1) = v60;
                  uint64_t v54 = &v60[4 * (v59 >> 2)];
                  *((void *)v55 + 2) = v54;
                  memcpy(v60, v58, v59);
                  *((void *)v55 + 1) = v54;
                }
                v53 += 24;
              }
              while (v56 + 24 != v49);
              *((void *)v45 + 4) = &v52[v53];
              int v46 = v84;
            }
            *((_DWORD *)v45 + 12) = *((_DWORD *)v46 + 12);
            long long v32 = *(long long *)((char *)v46 + 56);
            *(_OWORD *)(v45 + 56) = v32;
            int v46 = (long long *)((char *)v46 + 72);
            v45 += 72;
          }
          while (v46 != v83);
          v85[6] = v45;
          uint64_t v42 = v85;
          uint64_t v3 = a3;
          uint64_t v4 = v77;
          uint64_t v5 = v75;
        }
        uint64_t v10 = v79;
        *((_DWORD *)v42 + 16) = *((_DWORD *)v79 + 2542);
        uint64_t v62 = (uint64_t)(v42 + 9);
        size_t v31 = v78;
        v87.i64[1] = v62;
        uint64_t v61 = *(_DWORD **)(v3 + 248);
        if (!v61)
        {
LABEL_69:
          uint64_t v65 = sub_13D9A2C(*v5);
          uint64_t v64 = sub_188CDC8((uint64_t)v5, (uint64_t)v65);
          goto LABEL_70;
        }
      }
      uint64_t v63 = *(int *)(v3 + 240);
      if ((int)v63 >= *v61) {
        goto LABEL_69;
      }
      *(_DWORD *)(v3 + 240) = v63 + 1;
      uint64_t v64 = *(void *)&v61[2 * v63 + 2];
LABEL_70:
      sub_E14B1C(v31, v64, *(long double *)&v32);
LABEL_71:
      uint64_t v66 = 0x2FC962FC962FC963 * ((uint64_t)(v10[134] - v10[133]) >> 5);
      if ((int)v66 >= 1)
      {
        unint64_t v67 = 0;
        uint64_t v68 = v10 + 133;
        uint64_t v69 = v66;
        do
        {
          uint64_t v70 = sub_4A5E10(v68, v67);
          uint64_t v71 = sub_1883FB0((void *)(*(void *)(*(void *)(v86 + 72) + 8 * v67 + 8) + 16), dword_254EAA8, 11, (uint64_t)&off_252CE78, 0);
          char v72 = *(unsigned char *)(v70 + 2225);
          *(_DWORD *)(v71 + 16) |= 2u;
          *(unsigned char *)(v71 + 97) = v72;
          ++v67;
        }
        while (v69 != v67);
      }
LABEL_6:
      uint64_t v8 = v82 + 1;
      if (v82 + 1 == v80) {
        goto LABEL_3;
      }
    }
  }
}

void sub_E1E64C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v28 = *(void *)(v26 - 128);
  if (v28)
  {
    sub_E28164(v26 - 128, v28);
    operator delete(*(void **)(v26 - 128));
  }
  _Unwind_Resume(exception_object);
}

void sub_E1E7EC(uint64_t a1, uint64_t *a2, char **a3, uint64_t a4)
{
  if (*a3 != a3[1])
  {
    uint64_t v6 = sub_1883FB0((void *)(a4 + 16), dword_254E9C0, 11, (uint64_t)&off_252C7B8, 0);
    uint64_t v8 = *a2;
    uint64_t v7 = a2[1];
    if (v8 != v7)
    {
      while (!sub_6477A0(v8))
      {
        v8 += 7560;
        if (v8 == v7)
        {
          uint64_t v8 = v7;
          break;
        }
      }
    }
    uint64_t v9 = *a3;
    uint64_t v10 = (uint64_t *)(v6 + 16);
    uint64_t v11 = *(_DWORD **)(v6 + 32);
    if (v11 && (uint64_t v12 = *(int *)(v6 + 24), (int)v12 < *v11))
    {
      *(_DWORD *)(v6 + 24) = v12 + 1;
      uint64_t v13 = *(void *)&v11[2 * v12 + 2];
    }
    else
    {
      uint64_t v14 = sub_11BE180(*v10);
      uint64_t v13 = sub_188CDC8(v6 + 16, v14);
    }
    double v15 = (double)*(int *)v9 + -978307200.0;
    *(_DWORD *)(v13 + 16) |= 1u;
    *(double *)(v13 + 24) = v15;
    int v16 = sub_646CE8(v8);
    if (v16 != *((_DWORD *)v9 + 1)) {
      int v16 = sub_646CE8(v8);
    }
    if (v16 < 0) {
      char v17 = -5;
    }
    else {
      char v17 = 5;
    }
    *(_DWORD *)(v13 + 16) |= 2u;
    *(_DWORD *)(v13 + 32) = v16 / 10
                          + (((103 * (char)(v17 + v16 % 10)) >> 15) & 1)
                          + ((103 * (char)(v17 + v16 % 10)) >> 10);
    uint64_t v18 = a3[1] - *a3;
    uint64_t v19 = v18 >> 3;
    if ((unint64_t)(v18 >> 3) <= 1) {
      uint64_t v19 = 1;
    }
    if ((unint64_t)v18 >= 0x10)
    {
      uint64_t v20 = 0;
      uint64_t v21 = v19 - 1;
      do
      {
        int v30 = *a3;
        size_t v31 = *(_DWORD **)(v6 + 32);
        if (v31 && (uint64_t v32 = *(int *)(v6 + 24), (int)v32 < *v31))
        {
          *(_DWORD *)(v6 + 24) = v32 + 1;
          uint64_t v23 = *(void *)&v31[2 * v32 + 2];
        }
        else
        {
          uint64_t v22 = sub_11BE180(*v10);
          uint64_t v23 = sub_188CDC8(v6 + 16, v22);
        }
        double v24 = (double)*(int *)&v30[v20 + 8] + -978307200.0;
        int v25 = *(_DWORD *)(v23 + 16);
        *(_DWORD *)(v23 + 16) = v25 | 1;
        *(double *)(v23 + 24) = v24;
        int v26 = *(_DWORD *)&v30[v20 + 12];
        int v27 = v26 / 10;
        int v28 = v26 % 10;
        if (v26 < 0) {
          char v29 = -5;
        }
        else {
          char v29 = 5;
        }
        *(_DWORD *)(v23 + 16) = v25 | 3;
        *(_DWORD *)(v23 + 32) = v27
                              + (((103 * (char)(v29 + v28)) >> 15) & 1)
                              + ((103 * (char)(v29 + v28)) >> 10);
        v20 += 8;
        --v21;
      }
      while (v21);
    }
  }
}

uint64_t sub_E1EA70(uint64_t a1)
{
  *(void *)a1 = &off_243EE40;
  if ((*(char *)(a1 + 159) & 0x80000000) == 0)
  {
    int v2 = *(void **)(a1 + 112);
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 136));
  int v2 = *(void **)(a1 + 112);
  if (v2)
  {
LABEL_3:
    *(void *)(a1 + 120) = v2;
    operator delete(v2);
  }
LABEL_4:
  uint64_t v3 = *(void **)(a1 + 80);
  if (v3)
  {
    *(void *)(a1 + 88) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 16);
  if (v4)
  {
    *(void *)(a1 + 24) = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_E1EAFC(uint64_t a1)
{
  sub_458644(&v1, *(void *)(a1 + 8));
  sub_1106C64();
}

void sub_E1FE90(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 - 232);
  if (!v3)
  {
    sub_1106CAC((uint64_t *)(v1 - 208));
    _Unwind_Resume(a1);
  }
  *(void *)(v1 - 224) = v3;
  operator delete(v3);
  sub_1106CAC((uint64_t *)(v1 - 208));
  _Unwind_Resume(a1);
}

void sub_E1FFCC(uint64_t a1@<X0>, void *a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, _DWORD *a5@<X4>, unsigned int *a6@<X5>, void *a7@<X8>)
{
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = a4;
  uint64_t v15 = sub_46C8EC(a2, a4);
  sub_2954EC(v13, *(void *)(v15 + 32), (uint64_t)&v36);
  sub_2E4B5C((uint64_t)&v36, v39);
  if (__p)
  {
    unsigned int v38 = __p;
    operator delete(__p);
  }
  if (sub_46C760(a2) - 1 == v14)
  {
    double v16 = 0.0;
    if (!a4) {
      double v16 = (double)(1000000000 - sub_46CABC((uint64_t)a2));
    }
    unsigned int v17 = sub_46CAC4((uint64_t)a2);
    sub_31854((uint64_t *)v39, 0, a7, v16 / 1000000000.0, (double)v17 / 1000000000.0);
    if (v39[0])
    {
      v39[1] = v39[0];
      operator delete(v39[0]);
    }
  }
  else
  {
    if (!a4)
    {
      int v18 = sub_46CABC((uint64_t)a2);
      sub_32F08((uint64_t *)v39, 1, 0, &v36, 1.0);
      sub_32F08((uint64_t *)&v36, 0, 0, &v34, fmin((double)(1000000000 - v18) / 1000000000.0, 1.0));
      if (v36)
      {
        std::string __p = v36;
        operator delete(v36);
      }
      if (v39[0])
      {
        v39[1] = v39[0];
        operator delete(v39[0]);
      }
      *(_OWORD *)uint64_t v39 = v34;
      uint64_t v40 = v35;
    }
    uint64_t v19 = a2[133];
    if (*(void *)(v19 + 2400 * a3 + 80) == v14)
    {
      uint64_t v20 = *(void *)(v19 + 2400 * a3 + 88);
      uint64_t v21 = v20 / 100;
      __int16 v22 = v20 % 100;
      if (v20 < 0) {
        __int16 v23 = -50;
      }
      else {
        __int16 v23 = 50;
      }
      *a5 = sub_477F48((uint64_t)v39, (double)(v21+ (int)(((5243 * (__int16)(v23 + v22)) >> 19) + ((5243 * (__int16)(v23 + v22)) >> 31))), 0.1);
    }
    if (*(void *)(v19 + 2400 * a3 + 104) == v14)
    {
      uint64_t v24 = *(void *)(v19 + 2400 * a3 + 112);
      if (v24 == 0x7FFFFFFFFFFFFFFFLL
        || ((uint64_t v25 = v24 / 100, v26 = v24 % 100, v24 < 0) ? (v27 = -50) : (v27 = 50),
            uint64_t v28 = v25
                + (int)(((5243 * (__int16)(v27 + v26)) >> 19) + ((5243 * (__int16)(v27 + v26)) >> 31)),
            v28 < 1))
      {
        unsigned int v29 = 0;
        *a6 = 0;
      }
      else
      {
        unsigned int v29 = sub_477F48((uint64_t)v39, (double)v28, 0.1);
        *a6 = v29;
      }
    }
    else
    {
      unsigned int v29 = *a6;
    }
    int v30 = (char *)v39[1];
    unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * (((char *)v39[1] - (char *)v39[0]) >> 2) - 1;
    int v33 = v31 > *a5 && v31 > v29;
    *a7 = v39[0];
    a7[1] = &v30[12 * (v33 << 31 >> 31)];
    a7[2] = v40;
  }
}

void sub_E20304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_E2035C(double a1, uint64_t a2, void *a3, unsigned int a4)
{
  uint64_t v40 = 0;
  int64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v4 = a3[1] - *a3;
  if (v4)
  {
    unint64_t v7 = 0;
    unint64_t v8 = 0;
    unint64_t v33 = a4;
    unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 3);
    while (1)
    {
      while (!*(unsigned char *)(sub_E1ACF8(a3, v8) + 16)
           && !*(unsigned char *)(sub_E1ACF8(a3, v8) + 17)
           && !*(unsigned char *)(sub_E1ACF8(a3, v8) + 18)
           && v8 != -1 - 0x5555555555555555 * ((uint64_t)(a3[1] - *a3) >> 3))
      {
        if (++v8 == v34)
        {
LABEL_43:
          if (v40)
          {
            int64_t v41 = (char *)v40;
            operator delete(v40);
          }
          return;
        }
      }
      uint64_t v10 = v40;
      int64_t v41 = (char *)v40;
      unint64_t v11 = v8 + 1;
      unint64_t v12 = v8 + 1 - v7;
      if (0xAAAAAAAAAAAAAAABLL * ((v42 - (unsigned char *)v40) >> 2) < v12)
      {
        if (v12 > 0x1555555555555555) {
          sub_2E00();
        }
        uint64_t v40 = operator new(12 * v12);
        int64_t v41 = (char *)v40;
        uint64_t v42 = (char *)v40 + 12 * v12;
        if (v10) {
          operator delete(v10);
        }
      }
      unint64_t v35 = v8 + 1;
      unint64_t v36 = v8;
      if (v7 <= v11) {
        unint64_t v13 = v8 + 1;
      }
      else {
        unint64_t v13 = v7;
      }
      unint64_t v14 = v7;
      if (v11 > v7)
      {
        do
        {
          uint64_t v20 = sub_E1ACF8(a3, v14);
          uint64_t v21 = v20;
          __int16 v22 = v41;
          if (v41 < v42)
          {
            uint64_t v18 = *(void *)v20;
            *((_DWORD *)v41 + 2) = *(_DWORD *)(v20 + 8);
            *(void *)__int16 v22 = v18;
            uint64_t v19 = v22 + 12;
          }
          else
          {
            __int16 v23 = (char *)v40;
            unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((v41 - (unsigned char *)v40) >> 2);
            unint64_t v25 = v24 + 1;
            if (v24 + 1 > 0x1555555555555555) {
              sub_2E00();
            }
            if (0x5555555555555556 * ((v42 - (unsigned char *)v40) >> 2) > v25) {
              unint64_t v25 = 0x5555555555555556 * ((v42 - (unsigned char *)v40) >> 2);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v42 - (unsigned char *)v40) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v26 = 0x1555555555555555;
            }
            else {
              unint64_t v26 = v25;
            }
            if (v26)
            {
              if (v26 > 0x1555555555555555) {
                sub_188D718();
              }
              __int16 v27 = (char *)operator new(12 * v26);
            }
            else
            {
              __int16 v27 = 0;
            }
            uint64_t v28 = *(void *)v21;
            unsigned int v29 = &v27[12 * v24];
            *((_DWORD *)v29 + 2) = *(_DWORD *)(v21 + 8);
            *(void *)unsigned int v29 = v28;
            int v30 = v29;
            if (v22 != v23)
            {
              do
              {
                uint64_t v31 = *(void *)(v22 - 12);
                v22 -= 12;
                int v32 = *((_DWORD *)v22 + 2);
                *(void *)(v30 - 12) = v31;
                v30 -= 12;
                *((_DWORD *)v30 + 2) = v32;
              }
              while (v22 != v23);
              __int16 v22 = (char *)v40;
            }
            uint64_t v19 = v29 + 12;
            uint64_t v40 = v30;
            int64_t v41 = v29 + 12;
            uint64_t v42 = &v27[12 * v26];
            if (v22) {
              operator delete(v22);
            }
          }
          int64_t v41 = v19;
          ++v14;
        }
        while (v14 != v13);
      }
      memset(v37, 0, sizeof(v37));
      sub_426D8((uint64_t *)&v40, v33, 0, 1, v37, (uint64_t)&__p, a1);
      if (v37[0]) {
        operator delete(v37[0]);
      }
      uint64_t v15 = v39;
      if (v39) {
        break;
      }
      uint64_t v9 = __p;
      if (__p) {
        goto LABEL_4;
      }
LABEL_5:
      unint64_t v7 = v36;
      unint64_t v8 = v35;
      if (v35 == v34) {
        goto LABEL_43;
      }
    }
    unint64_t v16 = 0;
    do
    {
      uint64_t v17 = sub_E1ACF8(a3, v7 + v16);
      uint64_t v9 = __p;
      *(unsigned char *)(v17 + 20) = (*(void *)((char *)__p + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v16) & 1;
      ++v16;
    }
    while (v15 != v16);
LABEL_4:
    operator delete(v9);
    goto LABEL_5;
  }
}

void sub_E206BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_E20708()
{
  sub_7BD6C(v0);
}

void sub_E20B9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E20BB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E20BC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E20BD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E20BEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E20C00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E20C14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E20C28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E20C3C(unsigned char *a1, void *a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12 = sub_46C760(a2);
  uint64_t v13 = a2[1272];
  uint64_t v14 = a2[1273];
  if (v13 != v14)
  {
    unint64_t v15 = v12;
    unint64_t v16 = v12 - 1;
    do
    {
      unint64_t v17 = *(void *)(v13 + 8);
      if (v17 >= v15 || v17 == v16 && sub_46CAC4((uint64_t)a2) < 0x3B9ACA00) {
        goto LABEL_3;
      }
      if (sub_63A8F8(v13))
      {
        if (a1[16]) {
          goto LABEL_16;
        }
      }
      else
      {
        if (!sub_63A908(v13))
        {
          if (!sub_63A770(v13) && !sub_63A760(v13) || !a1[18]) {
            goto LABEL_3;
          }
LABEL_16:
          std::to_string(&v34, a3);
          uint64_t v18 = std::string::append(&v34, "_");
          long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
          v35.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v19;
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          v18->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v33, a4);
          if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v20 = &v33;
          }
          else {
            uint64_t v20 = (std::string *)v33.__r_.__value_.__r.__words[0];
          }
          if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v33.__r_.__value_.__l.__size_;
          }
          __int16 v22 = std::string::append(&v35, (const std::string::value_type *)v20, size);
          long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
          v36.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v23;
          v22->__r_.__value_.__l.__size_ = 0;
          v22->__r_.__value_.__r.__words[2] = 0;
          v22->__r_.__value_.__r.__words[0] = 0;
          unint64_t v24 = std::string::append(&v36, "_");
          long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
          v37.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v25;
          v24->__r_.__value_.__l.__size_ = 0;
          v24->__r_.__value_.__r.__words[2] = 0;
          v24->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v32, *(void *)(v13 + 8));
          if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v26 = &v32;
          }
          else {
            unint64_t v26 = (std::string *)v32.__r_.__value_.__r.__words[0];
          }
          if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v27 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v27 = v32.__r_.__value_.__l.__size_;
          }
          uint64_t v28 = std::string::append(&v37, (const std::string::value_type *)v26, v27);
          long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
          v38.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v29;
          v28->__r_.__value_.__l.__size_ = 0;
          v28->__r_.__value_.__r.__words[2] = 0;
          v28->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v32.__r_.__value_.__l.__data_);
            if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_37;
            }
LABEL_30:
            if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_31;
            }
LABEL_38:
            operator delete(v36.__r_.__value_.__l.__data_);
            if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_39;
            }
LABEL_32:
            if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_33;
            }
LABEL_40:
            operator delete(v35.__r_.__value_.__l.__data_);
            if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_41;
            }
LABEL_34:
            if (*(_DWORD *)(v13 + 4) == 2)
            {
LABEL_42:
              if (byte_25F3C17 >= 0) {
                int v30 = (const std::string::value_type *)&qword_25F3C00;
              }
              else {
                int v30 = (const std::string::value_type *)qword_25F3C00;
              }
              if (byte_25F3C17 >= 0) {
                std::string::size_type v31 = byte_25F3C17;
              }
              else {
                std::string::size_type v31 = *(void *)&byte_25F3C08;
              }
              std::string::append(&v38, v30, v31);
            }
          }
          else
          {
            if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_30;
            }
LABEL_37:
            operator delete(v37.__r_.__value_.__l.__data_);
            if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_38;
            }
LABEL_31:
            if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_32;
            }
LABEL_39:
            operator delete(v33.__r_.__value_.__l.__data_);
            if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_40;
            }
LABEL_33:
            if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_34;
            }
LABEL_41:
            operator delete(v34.__r_.__value_.__l.__data_);
            if (*(_DWORD *)(v13 + 4) == 2) {
              goto LABEL_42;
            }
          }
          sub_E21030((uint64_t)a1, v13, (const void **)&v38.__r_.__value_.__l.__data_, a4, a5, a6);
          if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v38.__r_.__value_.__l.__data_);
          }
          goto LABEL_3;
        }
        if (a1[17]) {
          goto LABEL_16;
        }
      }
LABEL_3:
      v13 += 104;
    }
    while (v13 != v14);
  }
}

void sub_E20F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a47 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a40 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((a47 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a42);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a35);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a16);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a27 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a22);
    goto LABEL_14;
  }
LABEL_12:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_E2101C()
{
  if (*(char *)(v0 - 105) < 0) {
    JUMPOUT(0xE21010);
  }
  JUMPOUT(0xE21014);
}

void sub_E21030(uint64_t a1, uint64_t a2, const void **a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = a2;
  if (sub_63A4A4(a2))
  {
    uint64_t v11 = *(void *)(v9 + 32);
    uint64_t v10 = *(void *)(v9 + 40);
    if (v11 != v10)
    {
      uint64_t v205 = (uint64_t *)(a6 + 208);
      int v206 = (uint64_t *)(a5 + 224);
      size_t v207 = (_DWORD *)(v9 + 20);
      long long v204 = (uint64_t *)(a6 + 256);
      uint64_t v209 = a5;
      uint64_t v210 = a6;
      uint64_t v211 = v9;
      uint64_t v208 = *(void *)(v9 + 40);
      while (2)
      {
        if (!sub_63A048(v11)) {
          goto LABEL_6;
        }
        uint64_t v14 = *(_DWORD **)(a5 + 240);
        if (v14 && (uint64_t v15 = *(int *)(a5 + 232), (int)v15 < *v14))
        {
          *(_DWORD *)(a5 + 232) = v15 + 1;
          uint64_t v16 = *(void *)&v14[2 * v15 + 2];
        }
        else
        {
          sub_13D97FC(*v206);
          uint64_t v16 = sub_188CDC8((uint64_t)v206, v17);
        }
        BOOL v18 = *(_DWORD *)(v9 + 4) != 0;
        *(_DWORD *)(v16 + 16) |= 0x20u;
        *(_DWORD *)(v16 + 76) = v18;
        BOOL v19 = sub_63A4F0(v9);
        int v20 = *(_DWORD *)(v16 + 16);
        if (v19)
        {
          *(_DWORD *)(v16 + 72) = *(_DWORD *)(v9 + 16);
          *(_DWORD *)(v16 + 88) = *(unsigned __int16 *)(v11 + 14);
          int v21 = *(unsigned __int16 *)(v11 + 16);
          v20 |= 0x190u;
          *(_DWORD *)(v16 + 16) = v20;
          *(_DWORD *)(v16 + 84) = v21;
        }
        *(_DWORD *)(v16 + 16) = v20 | 0x40;
        *(_DWORD *)(v16 + 80) = a4;
        switch(*(_DWORD *)(v11 + 8))
        {
          case 1:
            *(_DWORD *)(v16 + 16) = v20 | 0x44;
            *(_DWORD *)(v16 + 64) = 2;
            int v22 = *((char *)a3 + 23);
            if (v22 >= 0) {
              size_t v23 = *((unsigned __int8 *)a3 + 23);
            }
            else {
              size_t v23 = (size_t)a3[1];
            }
            int v24 = byte_25F3C2F;
            if (byte_25F3C2F >= 0) {
              size_t v25 = byte_25F3C2F;
            }
            else {
              size_t v25 = qword_25F3C20;
            }
            unint64_t v26 = v25 + v23;
            if (v25 + v23 > 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_329;
            }
            if (v26 <= 0x16)
            {
              memset(&__dst, 0, sizeof(__dst));
              p_dst = &__dst;
              *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v25 + v23;
              if (!v23) {
                goto LABEL_72;
              }
LABEL_68:
              if (v22 >= 0) {
                uint64_t v55 = a3;
              }
              else {
                uint64_t v55 = *a3;
              }
              memmove(p_dst, v55, v23);
              goto LABEL_72;
            }
            uint64_t v52 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v26 | 7) != 0x17) {
              uint64_t v52 = v26 | 7;
            }
            uint64_t v53 = v52 + 1;
            p_dst = (std::string *)operator new(v52 + 1);
            unint64_t v54 = v53 | 0x8000000000000000;
            a6 = v210;
            __dst.__r_.__value_.__l.__size_ = v25 + v23;
            __dst.__r_.__value_.__r.__words[2] = v54;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
            if (v23) {
              goto LABEL_68;
            }
LABEL_72:
            uint64_t v56 = (char *)p_dst + v23;
            if (v25)
            {
              if (v24 >= 0) {
                uint64_t v57 = &qword_25F3C18;
              }
              else {
                uint64_t v57 = (uint64_t *)qword_25F3C18;
              }
              memmove(v56, v57, v25);
            }
            v56[v25] = 0;
            *(_DWORD *)(v16 + 16) |= 1u;
            uint64_t v58 = *(void *)(v16 + 8);
            int64_t v59 = (uint64_t *)(v58 & 0xFFFFFFFFFFFFFFFCLL);
            if (v58) {
              int64_t v59 = (uint64_t *)*v59;
            }
            sub_1881E08((uint64_t *)(v16 + 48), (long long *)&__dst, v59);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__dst.__r_.__value_.__l.__data_);
              uint64_t v60 = *(_DWORD **)(a6 + 272);
              if (!v60) {
                goto LABEL_153;
              }
            }
            else
            {
              uint64_t v60 = *(_DWORD **)(a6 + 272);
              if (!v60)
              {
LABEL_153:
                int v99 = sub_13D9774(*v204);
                uint64_t v98 = sub_188CDC8((uint64_t)v204, (uint64_t)v99);
                goto LABEL_154;
              }
            }
            uint64_t v97 = *(int *)(a6 + 264);
            if ((int)v97 >= *v60) {
              goto LABEL_153;
            }
            *(_DWORD *)(a6 + 264) = v97 + 1;
            uint64_t v98 = *(void *)&v60[2 * v97 + 2];
LABEL_154:
            int v100 = *((char *)a3 + 23);
            if (v100 >= 0) {
              size_t v101 = *((unsigned __int8 *)a3 + 23);
            }
            else {
              size_t v101 = (size_t)a3[1];
            }
            int v102 = byte_25F3C2F;
            if (byte_25F3C2F >= 0) {
              size_t v103 = byte_25F3C2F;
            }
            else {
              size_t v103 = qword_25F3C20;
            }
            unint64_t v104 = v103 + v101;
            if (v103 + v101 > 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_329;
            }
            if (v104 > 0x16)
            {
              uint64_t v106 = (v104 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v104 | 7) != 0x17) {
                uint64_t v106 = v104 | 7;
              }
              uint64_t v107 = v106 + 1;
              uint64_t v105 = (std::string *)operator new(v106 + 1);
              unint64_t v108 = v107 | 0x8000000000000000;
              a6 = v210;
              __dst.__r_.__value_.__l.__size_ = v103 + v101;
              __dst.__r_.__value_.__r.__words[2] = v108;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v105;
              if (v101) {
                goto LABEL_167;
              }
            }
            else
            {
              memset(&__dst, 0, sizeof(__dst));
              uint64_t v105 = &__dst;
              *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v103 + v101;
              if (!v101) {
                goto LABEL_171;
              }
LABEL_167:
              if (v100 >= 0) {
                uint64_t v109 = a3;
              }
              else {
                uint64_t v109 = *a3;
              }
              memmove(v105, v109, v101);
            }
LABEL_171:
            uint64_t v110 = (char *)v105 + v101;
            if (v103)
            {
              if (v102 >= 0) {
                unint64_t v111 = &qword_25F3C18;
              }
              else {
                unint64_t v111 = (uint64_t *)qword_25F3C18;
              }
              memmove(v110, v111, v103);
            }
            v110[v103] = 0;
            *(_DWORD *)(v98 + 16) |= 1u;
            uint64_t v112 = *(void *)(v98 + 8);
            unint64_t v113 = (uint64_t *)(v112 & 0xFFFFFFFFFFFFFFFCLL);
            if (v112) {
              unint64_t v113 = (uint64_t *)*v113;
            }
            sub_1881E08((uint64_t *)(v98 + 24), (long long *)&__dst, v113);
            uint64_t v10 = v208;
            a5 = v209;
            uint64_t v9 = v211;
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__dst.__r_.__value_.__l.__data_);
              *(_DWORD *)(v98 + 16) |= 2u;
              uint64_t v115 = *(void *)(v98 + 32);
              if (!v115) {
                goto LABEL_315;
              }
            }
            else
            {
              *(_DWORD *)(v98 + 16) |= 2u;
              uint64_t v115 = *(void *)(v98 + 32);
              if (!v115)
              {
LABEL_315:
                uint64_t v196 = *(void *)(v98 + 8);
                uint64_t v197 = (void *)(v196 & 0xFFFFFFFFFFFFFFFCLL);
                if (v196) {
                  uint64_t v197 = (void *)*v197;
                }
                uint64_t v115 = sub_15C1918((uint64_t)v197);
                *(void *)(v98 + 32) = v115;
              }
            }
            sub_E112BC(v207, v115, v114);
            *(_DWORD *)(v98 + 16) |= 4u;
            *(_DWORD *)(v98 + 40) = 1;
            goto LABEL_6;
          case 2:
            *(_DWORD *)(v16 + 16) = v20 | 0x44;
            *(_DWORD *)(v16 + 64) = 2;
            int v28 = *((char *)a3 + 23);
            if (v28 >= 0) {
              size_t v29 = *((unsigned __int8 *)a3 + 23);
            }
            else {
              size_t v29 = (size_t)a3[1];
            }
            int v30 = byte_25F3C47;
            if (byte_25F3C47 >= 0) {
              size_t v31 = byte_25F3C47;
            }
            else {
              size_t v31 = qword_25F3C38;
            }
            unint64_t v32 = v31 + v29;
            if (v31 + v29 > 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_329;
            }
            if (v32 <= 0x16)
            {
              memset(&__dst, 0, sizeof(__dst));
              std::string v33 = &__dst;
              *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v31 + v29;
              if (!v29) {
                goto LABEL_89;
              }
LABEL_85:
              if (v28 >= 0) {
                uint64_t v64 = a3;
              }
              else {
                uint64_t v64 = *a3;
              }
              memmove(v33, v64, v29);
              goto LABEL_89;
            }
            uint64_t v61 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v32 | 7) != 0x17) {
              uint64_t v61 = v32 | 7;
            }
            uint64_t v62 = v61 + 1;
            std::string v33 = (std::string *)operator new(v61 + 1);
            unint64_t v63 = v62 | 0x8000000000000000;
            a6 = v210;
            __dst.__r_.__value_.__l.__size_ = v31 + v29;
            __dst.__r_.__value_.__r.__words[2] = v63;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
            if (v29) {
              goto LABEL_85;
            }
LABEL_89:
            uint64_t v65 = (char *)v33 + v29;
            if (v31)
            {
              if (v30 >= 0) {
                uint64_t v66 = &qword_25F3C30;
              }
              else {
                uint64_t v66 = (uint64_t *)qword_25F3C30;
              }
              memmove(v65, v66, v31);
            }
            v65[v31] = 0;
            *(_DWORD *)(v16 + 16) |= 1u;
            uint64_t v67 = *(void *)(v16 + 8);
            uint64_t v68 = (uint64_t *)(v67 & 0xFFFFFFFFFFFFFFFCLL);
            if (v67) {
              uint64_t v68 = (uint64_t *)*v68;
            }
            sub_1881E08((uint64_t *)(v16 + 48), (long long *)&__dst, v68);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__dst.__r_.__value_.__l.__data_);
              uint64_t v69 = *(_DWORD **)(a6 + 272);
              if (!v69) {
                goto LABEL_184;
              }
            }
            else
            {
              uint64_t v69 = *(_DWORD **)(a6 + 272);
              if (!v69)
              {
LABEL_184:
                uint64_t v118 = sub_13D9774(*v204);
                uint64_t v117 = sub_188CDC8((uint64_t)v204, (uint64_t)v118);
                goto LABEL_185;
              }
            }
            uint64_t v116 = *(int *)(a6 + 264);
            if ((int)v116 >= *v69) {
              goto LABEL_184;
            }
            *(_DWORD *)(a6 + 264) = v116 + 1;
            uint64_t v117 = *(void *)&v69[2 * v116 + 2];
LABEL_185:
            int v119 = *((char *)a3 + 23);
            if (v119 >= 0) {
              size_t v120 = *((unsigned __int8 *)a3 + 23);
            }
            else {
              size_t v120 = (size_t)a3[1];
            }
            int v121 = byte_25F3C47;
            if (byte_25F3C47 >= 0) {
              size_t v122 = byte_25F3C47;
            }
            else {
              size_t v122 = qword_25F3C38;
            }
            unint64_t v123 = v122 + v120;
            if (v122 + v120 > 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_329;
            }
            if (v123 > 0x16)
            {
              uint64_t v125 = (v123 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v123 | 7) != 0x17) {
                uint64_t v125 = v123 | 7;
              }
              uint64_t v126 = v125 + 1;
              uint64_t v124 = (std::string *)operator new(v125 + 1);
              unint64_t v127 = v126 | 0x8000000000000000;
              a6 = v210;
              __dst.__r_.__value_.__l.__size_ = v122 + v120;
              __dst.__r_.__value_.__r.__words[2] = v127;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v124;
              if (v120) {
                goto LABEL_198;
              }
            }
            else
            {
              memset(&__dst, 0, sizeof(__dst));
              uint64_t v124 = &__dst;
              *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v122 + v120;
              if (!v120) {
                goto LABEL_202;
              }
LABEL_198:
              if (v119 >= 0) {
                size_t v128 = a3;
              }
              else {
                size_t v128 = *a3;
              }
              memmove(v124, v128, v120);
            }
LABEL_202:
            unint64_t v129 = (char *)v124 + v120;
            if (v122)
            {
              if (v121 >= 0) {
                size_t v130 = &qword_25F3C30;
              }
              else {
                size_t v130 = (uint64_t *)qword_25F3C30;
              }
              memmove(v129, v130, v122);
            }
            v129[v122] = 0;
            *(_DWORD *)(v117 + 16) |= 1u;
            uint64_t v131 = *(void *)(v117 + 8);
            long long v132 = (uint64_t *)(v131 & 0xFFFFFFFFFFFFFFFCLL);
            if (v131) {
              long long v132 = (uint64_t *)*v132;
            }
            sub_1881E08((uint64_t *)(v117 + 24), (long long *)&__dst, v132);
            uint64_t v10 = v208;
            a5 = v209;
            uint64_t v9 = v211;
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__dst.__r_.__value_.__l.__data_);
              *(_DWORD *)(v117 + 16) |= 2u;
              uint64_t v134 = *(void *)(v117 + 32);
              if (!v134) {
                goto LABEL_320;
              }
            }
            else
            {
              *(_DWORD *)(v117 + 16) |= 2u;
              uint64_t v134 = *(void *)(v117 + 32);
              if (!v134)
              {
LABEL_320:
                uint64_t v198 = *(void *)(v117 + 8);
                unint64_t v199 = (void *)(v198 & 0xFFFFFFFFFFFFFFFCLL);
                if (v198) {
                  unint64_t v199 = (void *)*v199;
                }
                uint64_t v134 = sub_15C1918((uint64_t)v199);
                *(void *)(v117 + 32) = v134;
              }
            }
            sub_E112BC(v207, v134, v133);
            *(_DWORD *)(v117 + 16) |= 4u;
            *(_DWORD *)(v117 + 40) = 2;
            goto LABEL_6;
          case 3:
            *(_DWORD *)(v16 + 16) = v20 | 0x44;
            *(_DWORD *)(v16 + 64) = 1;
            int v34 = *((char *)a3 + 23);
            if (v34 >= 0) {
              size_t v35 = *((unsigned __int8 *)a3 + 23);
            }
            else {
              size_t v35 = (size_t)a3[1];
            }
            int v36 = byte_25F3C5F;
            if (byte_25F3C5F >= 0) {
              size_t v37 = byte_25F3C5F;
            }
            else {
              size_t v37 = qword_25F3C50;
            }
            unint64_t v38 = v37 + v35;
            if (v37 + v35 > 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_329;
            }
            if (v38 <= 0x16)
            {
              memset(&__dst, 0, sizeof(__dst));
              uint64_t v39 = &__dst;
              *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v37 + v35;
              if (!v35) {
                goto LABEL_106;
              }
LABEL_102:
              if (v34 >= 0) {
                uint64_t v73 = a3;
              }
              else {
                uint64_t v73 = *a3;
              }
              memmove(v39, v73, v35);
              goto LABEL_106;
            }
            uint64_t v70 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v38 | 7) != 0x17) {
              uint64_t v70 = v38 | 7;
            }
            uint64_t v71 = v70 + 1;
            uint64_t v39 = (std::string *)operator new(v70 + 1);
            unint64_t v72 = v71 | 0x8000000000000000;
            a6 = v210;
            __dst.__r_.__value_.__l.__size_ = v37 + v35;
            __dst.__r_.__value_.__r.__words[2] = v72;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
            if (v35) {
              goto LABEL_102;
            }
LABEL_106:
            uint64_t v74 = (char *)v39 + v35;
            if (v37)
            {
              if (v36 >= 0) {
                uint64_t v75 = &qword_25F3C48;
              }
              else {
                uint64_t v75 = (uint64_t *)qword_25F3C48;
              }
              memmove(v74, v75, v37);
            }
            v74[v37] = 0;
            *(_DWORD *)(v16 + 16) |= 1u;
            uint64_t v76 = *(void *)(v16 + 8);
            uint64_t v77 = (uint64_t *)(v76 & 0xFFFFFFFFFFFFFFFCLL);
            if (v76) {
              uint64_t v77 = (uint64_t *)*v77;
            }
            sub_1881E08((uint64_t *)(v16 + 48), (long long *)&__dst, v77);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__dst.__r_.__value_.__l.__data_);
              uint64_t v78 = *(_DWORD **)(a6 + 224);
              if (!v78) {
                goto LABEL_215;
              }
            }
            else
            {
              uint64_t v78 = *(_DWORD **)(a6 + 224);
              if (!v78) {
                goto LABEL_215;
              }
            }
            uint64_t v135 = *(int *)(a6 + 216);
            if ((int)v135 < *v78)
            {
              *(_DWORD *)(a6 + 216) = v135 + 1;
              uint64_t v136 = *(void *)&v78[2 * v135 + 2];
              goto LABEL_216;
            }
LABEL_215:
            sub_13D96E0(*v205);
            uint64_t v136 = sub_188CDC8((uint64_t)v205, v137);
LABEL_216:
            int v138 = *((char *)a3 + 23);
            if (v138 >= 0) {
              size_t v139 = *((unsigned __int8 *)a3 + 23);
            }
            else {
              size_t v139 = (size_t)a3[1];
            }
            int v140 = byte_25F3C5F;
            if (byte_25F3C5F >= 0) {
              size_t v141 = byte_25F3C5F;
            }
            else {
              size_t v141 = qword_25F3C50;
            }
            unint64_t v142 = v141 + v139;
            if (v141 + v139 > 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_329;
            }
            if (v142 > 0x16)
            {
              uint64_t v144 = (v142 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v142 | 7) != 0x17) {
                uint64_t v144 = v142 | 7;
              }
              uint64_t v145 = v144 + 1;
              size_t v143 = (std::string *)operator new(v144 + 1);
              unint64_t v146 = v145 | 0x8000000000000000;
              a6 = v210;
              __dst.__r_.__value_.__l.__size_ = v141 + v139;
              __dst.__r_.__value_.__r.__words[2] = v146;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v143;
              if (!v139) {
                goto LABEL_233;
              }
LABEL_229:
              if (v138 >= 0) {
                long long v147 = a3;
              }
              else {
                long long v147 = *a3;
              }
              memmove(v143, v147, v139);
              goto LABEL_233;
            }
            memset(&__dst, 0, sizeof(__dst));
            size_t v143 = &__dst;
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v141 + v139;
            if (v139) {
              goto LABEL_229;
            }
LABEL_233:
            long long v148 = (char *)v143 + v139;
            if (v141)
            {
              if (v140 >= 0) {
                long long v149 = &qword_25F3C48;
              }
              else {
                long long v149 = (uint64_t *)qword_25F3C48;
              }
              memmove(v148, v149, v141);
            }
            v148[v141] = 0;
            *(_DWORD *)(v136 + 16) |= 1u;
            uint64_t v150 = *(void *)(v136 + 8);
            long long v151 = (uint64_t *)(v150 & 0xFFFFFFFFFFFFFFFCLL);
            if (v150) {
              long long v151 = (uint64_t *)*v151;
            }
            sub_1881E08((uint64_t *)(v136 + 24), (long long *)&__dst, v151);
            uint64_t v10 = v208;
            a5 = v209;
            uint64_t v9 = v211;
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__dst.__r_.__value_.__l.__data_);
            }
            int v153 = *(_DWORD *)(v136 + 16);
            *(_DWORD *)(v136 + 64) = 2;
            *(_DWORD *)(v136 + 16) = v153 | 0x24;
            uint64_t v154 = *(void *)(v136 + 40);
            if (!v154)
            {
              uint64_t v200 = *(void *)(v136 + 8);
              uint64_t v201 = (void *)(v200 & 0xFFFFFFFFFFFFFFFCLL);
              if (v200) {
                uint64_t v201 = (void *)*v201;
              }
              uint64_t v202 = sub_15C1918((uint64_t)v201);
              *(void *)(v136 + 40) = v202;
              sub_E112BC(v207, v202, v203);
              if (!sub_63A4F0(v211)) {
                goto LABEL_6;
              }
LABEL_327:
              *(_DWORD *)(v136 + 16) |= 0x20u;
              *(_DWORD *)(v136 + 64) = 5;
              goto LABEL_6;
            }
            sub_E112BC(v207, v154, v152);
            if (sub_63A4F0(v211)) {
              goto LABEL_327;
            }
LABEL_6:
            v11 += 176;
            if (v11 == v10) {
              return;
            }
            continue;
          case 4:
            *(_DWORD *)(v16 + 16) = v20 | 0x44;
            *(_DWORD *)(v16 + 64) = 1;
            int v40 = *((char *)a3 + 23);
            if (v40 >= 0) {
              size_t v41 = *((unsigned __int8 *)a3 + 23);
            }
            else {
              size_t v41 = (size_t)a3[1];
            }
            int v42 = byte_25F3C77;
            if (byte_25F3C77 >= 0) {
              size_t v43 = byte_25F3C77;
            }
            else {
              size_t v43 = qword_25F3C68;
            }
            unint64_t v44 = v43 + v41;
            if (v43 + v41 > 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_329;
            }
            if (v44 <= 0x16)
            {
              memset(&__dst, 0, sizeof(__dst));
              uint64_t v45 = &__dst;
              *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v43 + v41;
              if (!v41) {
                goto LABEL_123;
              }
LABEL_119:
              if (v40 >= 0) {
                uint64_t v82 = a3;
              }
              else {
                uint64_t v82 = *a3;
              }
              memmove(v45, v82, v41);
              goto LABEL_123;
            }
            uint64_t v79 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v44 | 7) != 0x17) {
              uint64_t v79 = v44 | 7;
            }
            uint64_t v80 = v79 + 1;
            uint64_t v45 = (std::string *)operator new(v79 + 1);
            unint64_t v81 = v80 | 0x8000000000000000;
            a6 = v210;
            __dst.__r_.__value_.__l.__size_ = v43 + v41;
            __dst.__r_.__value_.__r.__words[2] = v81;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v45;
            if (v41) {
              goto LABEL_119;
            }
LABEL_123:
            double v83 = (char *)v45 + v41;
            if (v43)
            {
              if (v42 >= 0) {
                double v84 = &qword_25F3C60;
              }
              else {
                double v84 = (uint64_t *)qword_25F3C60;
              }
              memmove(v83, v84, v43);
            }
            v83[v43] = 0;
            *(_DWORD *)(v16 + 16) |= 1u;
            uint64_t v85 = *(void *)(v16 + 8);
            uint64_t v86 = (uint64_t *)(v85 & 0xFFFFFFFFFFFFFFFCLL);
            if (v85) {
              uint64_t v86 = (uint64_t *)*v86;
            }
            sub_1881E08((uint64_t *)(v16 + 48), (long long *)&__dst, v86);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__dst.__r_.__value_.__l.__data_);
              int64x2_t v87 = *(_DWORD **)(a6 + 224);
              if (!v87) {
                goto LABEL_248;
              }
            }
            else
            {
              int64x2_t v87 = *(_DWORD **)(a6 + 224);
              if (!v87) {
                goto LABEL_248;
              }
            }
            uint64_t v155 = *(int *)(a6 + 216);
            if ((int)v155 < *v87)
            {
              *(_DWORD *)(a6 + 216) = v155 + 1;
              uint64_t v156 = *(void *)&v87[2 * v155 + 2];
              goto LABEL_249;
            }
LABEL_248:
            sub_13D96E0(*v205);
            uint64_t v156 = sub_188CDC8((uint64_t)v205, v157);
LABEL_249:
            int v158 = *((char *)a3 + 23);
            if (v158 >= 0) {
              size_t v159 = *((unsigned __int8 *)a3 + 23);
            }
            else {
              size_t v159 = (size_t)a3[1];
            }
            int v160 = byte_25F3C77;
            if (byte_25F3C77 >= 0) {
              size_t v161 = byte_25F3C77;
            }
            else {
              size_t v161 = qword_25F3C68;
            }
            unint64_t v162 = v161 + v159;
            if (v161 + v159 > 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_329;
            }
            if (v162 > 0x16)
            {
              uint64_t v164 = (v162 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v162 | 7) != 0x17) {
                uint64_t v164 = v162 | 7;
              }
              uint64_t v165 = v164 + 1;
              uint64_t v163 = (std::string *)operator new(v164 + 1);
              unint64_t v166 = v165 | 0x8000000000000000;
              a6 = v210;
              __dst.__r_.__value_.__l.__size_ = v161 + v159;
              __dst.__r_.__value_.__r.__words[2] = v166;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v163;
              if (!v159)
              {
LABEL_266:
                long long v168 = (char *)v163 + v159;
                if (v161)
                {
                  if (v160 >= 0) {
                    long long v169 = &qword_25F3C60;
                  }
                  else {
                    long long v169 = (uint64_t *)qword_25F3C60;
                  }
                  memmove(v168, v169, v161);
                }
                v168[v161] = 0;
                *(_DWORD *)(v156 + 16) |= 1u;
                uint64_t v170 = *(void *)(v156 + 8);
                size_t v171 = (uint64_t *)(v170 & 0xFFFFFFFFFFFFFFFCLL);
                if (v170) {
                  size_t v171 = (uint64_t *)*v171;
                }
                sub_1881E08((uint64_t *)(v156 + 24), (long long *)&__dst, v171);
                uint64_t v10 = v208;
                a5 = v209;
                uint64_t v9 = v211;
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__dst.__r_.__value_.__l.__data_);
                }
                int v172 = *(_DWORD *)(v156 + 16);
                *(_DWORD *)(v156 + 64) = 5;
                *(_DWORD *)(v156 + 16) = v172 | 0x24;
                uint64_t v12 = *(void *)(v156 + 40);
                if (v12) {
                  goto LABEL_5;
                }
                goto LABEL_312;
              }
            }
            else
            {
              memset(&__dst, 0, sizeof(__dst));
              uint64_t v163 = &__dst;
              *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v161 + v159;
              if (!v159) {
                goto LABEL_266;
              }
            }
            if (v158 >= 0) {
              long long v167 = a3;
            }
            else {
              long long v167 = *a3;
            }
            memmove(v163, v167, v159);
            goto LABEL_266;
          case 5:
            *(_DWORD *)(v16 + 16) = v20 | 0x44;
            *(_DWORD *)(v16 + 64) = 1;
            int v46 = *((char *)a3 + 23);
            if (v46 >= 0) {
              size_t v47 = *((unsigned __int8 *)a3 + 23);
            }
            else {
              size_t v47 = (size_t)a3[1];
            }
            int v48 = byte_25F3C8F;
            if (byte_25F3C8F >= 0) {
              size_t v49 = byte_25F3C8F;
            }
            else {
              size_t v49 = qword_25F3C80;
            }
            unint64_t v50 = v49 + v47;
            if (v49 + v47 > 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_329;
            }
            if (v50 <= 0x16)
            {
              memset(&__dst, 0, sizeof(__dst));
              unint64_t v51 = &__dst;
              *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v49 + v47;
              if (!v47) {
                goto LABEL_140;
              }
LABEL_136:
              if (v46 >= 0) {
                uint64_t v91 = a3;
              }
              else {
                uint64_t v91 = *a3;
              }
              memmove(v51, v91, v47);
              goto LABEL_140;
            }
            uint64_t v88 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v50 | 7) != 0x17) {
              uint64_t v88 = v50 | 7;
            }
            uint64_t v89 = v88 + 1;
            unint64_t v51 = (std::string *)operator new(v88 + 1);
            unint64_t v90 = v89 | 0x8000000000000000;
            a6 = v210;
            __dst.__r_.__value_.__l.__size_ = v49 + v47;
            __dst.__r_.__value_.__r.__words[2] = v90;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
            if (v47) {
              goto LABEL_136;
            }
LABEL_140:
            uint64_t v92 = (char *)v51 + v47;
            if (v49)
            {
              if (v48 >= 0) {
                uint64_t v93 = &qword_25F3C78;
              }
              else {
                uint64_t v93 = (uint64_t *)qword_25F3C78;
              }
              memmove(v92, v93, v49);
            }
            v92[v49] = 0;
            *(_DWORD *)(v16 + 16) |= 1u;
            uint64_t v94 = *(void *)(v16 + 8);
            uint64_t v95 = (uint64_t *)(v94 & 0xFFFFFFFFFFFFFFFCLL);
            if (v94) {
              uint64_t v95 = (uint64_t *)*v95;
            }
            sub_1881E08((uint64_t *)(v16 + 48), (long long *)&__dst, v95);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__dst.__r_.__value_.__l.__data_);
              char v96 = *(_DWORD **)(a6 + 224);
              if (!v96) {
                goto LABEL_280;
              }
            }
            else
            {
              char v96 = *(_DWORD **)(a6 + 224);
              if (!v96) {
                goto LABEL_280;
              }
            }
            uint64_t v173 = *(int *)(a6 + 216);
            if ((int)v173 < *v96)
            {
              *(_DWORD *)(a6 + 216) = v173 + 1;
              uint64_t v156 = *(void *)&v96[2 * v173 + 2];
              goto LABEL_281;
            }
LABEL_280:
            sub_13D96E0(*v205);
            uint64_t v156 = sub_188CDC8((uint64_t)v205, v174);
LABEL_281:
            unsigned int v175 = sub_63A824(v211);
            std::to_string(&__dst, v175);
            *(_DWORD *)(v156 + 16) |= 2u;
            uint64_t v176 = *(void *)(v156 + 8);
            long long v177 = (uint64_t *)(v176 & 0xFFFFFFFFFFFFFFFCLL);
            if (v176) {
              long long v177 = (uint64_t *)*v177;
            }
            sub_1881E08((uint64_t *)(v156 + 32), (long long *)&__dst, v177);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__dst.__r_.__value_.__l.__data_);
            }
            double v178 = *(double *)(v211 + 88) / 3.6;
            *(_DWORD *)(v156 + 16) |= 0x80u;
            *(double *)(v156 + 72) = v178;
            int v179 = *((char *)a3 + 23);
            if (v179 >= 0) {
              size_t v180 = *((unsigned __int8 *)a3 + 23);
            }
            else {
              size_t v180 = (size_t)a3[1];
            }
            int v181 = byte_25F3C8F;
            if (byte_25F3C8F >= 0) {
              size_t v182 = byte_25F3C8F;
            }
            else {
              size_t v182 = qword_25F3C80;
            }
            unint64_t v183 = v182 + v180;
            if (v182 + v180 > 0x7FFFFFFFFFFFFFF7) {
LABEL_329:
            }
              sub_188D690();
            if (v183 > 0x16)
            {
              uint64_t v185 = (v183 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v183 | 7) != 0x17) {
                uint64_t v185 = v183 | 7;
              }
              uint64_t v186 = v185 + 1;
              long long v184 = (std::string *)operator new(v185 + 1);
              unint64_t v187 = v186 | 0x8000000000000000;
              a6 = v210;
              __dst.__r_.__value_.__l.__size_ = v182 + v180;
              __dst.__r_.__value_.__r.__words[2] = v187;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v184;
              if (!v180)
              {
LABEL_302:
                int v189 = (char *)v184 + v180;
                if (v182)
                {
                  if (v181 >= 0) {
                    size_t v190 = &qword_25F3C78;
                  }
                  else {
                    size_t v190 = (uint64_t *)qword_25F3C78;
                  }
                  memmove(v189, v190, v182);
                }
                v189[v182] = 0;
                *(_DWORD *)(v156 + 16) |= 1u;
                uint64_t v191 = *(void *)(v156 + 8);
                long long v192 = (uint64_t *)(v191 & 0xFFFFFFFFFFFFFFFCLL);
                if (v191) {
                  long long v192 = (uint64_t *)*v192;
                }
                sub_1881E08((uint64_t *)(v156 + 24), (long long *)&__dst, v192);
                uint64_t v10 = v208;
                a5 = v209;
                uint64_t v9 = v211;
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__dst.__r_.__value_.__l.__data_);
                }
                int v193 = *(_DWORD *)(v156 + 16);
                *(_DWORD *)(v156 + 64) = 1;
                *(_DWORD *)(v156 + 16) = v193 | 0x24;
                uint64_t v12 = *(void *)(v156 + 40);
                if (v12) {
                  goto LABEL_5;
                }
LABEL_312:
                uint64_t v194 = *(void *)(v156 + 8);
                uint64_t v195 = (void *)(v194 & 0xFFFFFFFFFFFFFFFCLL);
                if (v194) {
                  uint64_t v195 = (void *)*v195;
                }
                uint64_t v12 = sub_15C1918((uint64_t)v195);
                *(void *)(v156 + 40) = v12;
LABEL_5:
                sub_E112BC(v207, v12, v13);
                goto LABEL_6;
              }
            }
            else
            {
              memset(&__dst, 0, sizeof(__dst));
              long long v184 = &__dst;
              *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v182 + v180;
              if (!v180) {
                goto LABEL_302;
              }
            }
            if (v179 >= 0) {
              uint64_t v188 = a3;
            }
            else {
              uint64_t v188 = *a3;
            }
            memmove(v184, v188, v180);
            goto LABEL_302;
          default:
            goto LABEL_6;
        }
      }
    }
  }
}

void sub_E2214C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_E221A4(uint64_t a1, void *a2)
{
  std::string __p = operator new(0x20uLL);
  long long v11 = xmmword_20B9800;
  strcpy((char *)__p, "add_traffic_lights_to_response");
  BOOL v4 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)a1 = v4;
  std::string __p = operator new(0x20uLL);
  long long v11 = xmmword_20B5EB0;
  strcpy((char *)__p, "add_stop_signs_to_response");
  BOOL v5 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 1) = v5;
  std::string __p = operator new(0x20uLL);
  long long v11 = xmmword_20B8890;
  strcpy((char *)__p, "add_speed_cameras_to_response");
  BOOL v6 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 2) = v6;
  std::string __p = operator new(0x30uLL);
  long long v11 = xmmword_20B9A80;
  strcpy((char *)__p, "centerline_geometry_simplification_tolerance_m");
  double v7 = sub_5C7E8(a2, (uint64_t)&__p);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p);
  }
  *(double *)(a1 + 8) = v7;
  std::string __p = operator new(0x20uLL);
  long long v11 = xmmword_20B9800;
  strcpy((char *)__p, "add_debug_geometry_to_response");
  BOOL v8 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 16) = v8;
  return a1;
}

void sub_E2239C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_E223C8(void *a1, void *a2)
{
  *a1 = a2;
  a1[1] = sub_3750CC(a2);
  char v16 = 15;
  uint64_t v14 = 0;
  strcpy((char *)v15, "ResponseBuilder");
  uint64_t v12 = 0;
  double v13 = 0;
  BOOL v4 = sub_374CDC((uint64_t)a2, (uint64_t)v15, (uint64_t *)&v12);
  sub_3CB5E0(v4, (uint64_t)__p);
  sub_E27F40((uint64_t)(a1 + 2), __p);
  BOOL v5 = v18;
  if (v18)
  {
    do
    {
      uint64_t v10 = *(char **)v5;
      sub_57AC8((uint64_t *)v5 + 5);
      if (v5[39] < 0) {
        operator delete(*((void **)v5 + 2));
      }
      operator delete(v5);
      BOOL v5 = v10;
    }
    while (v10);
  }
  BOOL v6 = __p[0];
  __p[0] = 0;
  if (v6) {
    operator delete(v6);
  }
  double v7 = (void **)v12;
  if (v12)
  {
    BOOL v8 = v13;
    uint64_t v9 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      uint64_t v9 = v12;
    }
    double v13 = v7;
    operator delete(v9);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  return a1;
}

void sub_E22514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_E2254C(unsigned char *a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8 = sub_162C594(a5, 0, 0);
  uint64_t v9 = *a2;
  int v119 = a2[1];
  size_t v120 = a2;
  uint64_t v121 = v8;
  if (*a2 == v119)
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)__p);
      sub_188FC78(__p, (uint64_t)"No routes found", 15);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&v122, 1u);
      if (v123 < 0) {
        operator delete(v122);
      }
      if (SHIBYTE(v129) < 0) {
        operator delete(v127);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *(_DWORD *)(v121 + 40) |= 0x100000u;
    *(_DWORD *)(v121 + 536) = 20;
  }
  else
  {
    uint64_t v10 = (uint64_t *)(v8 + 48);
    do
    {
      long long v11 = *(_DWORD **)(v121 + 64);
      if (v11 && (uint64_t v12 = *(int *)(v121 + 56), (int)v12 < *v11))
      {
        *(_DWORD *)(v121 + 56) = v12 + 1;
        uint64_t v13 = *(void *)&v11[2 * v12 + 2];
      }
      else
      {
        uint64_t v14 = sub_13D8E84(*v10);
        uint64_t v13 = sub_188CDC8((uint64_t)v10, v14);
      }
      int v15 = sub_6478E0((uint64_t)v9);
      *(_DWORD *)(v13 + 40) |= 4u;
      uint64_t v16 = *(void *)(v13 + 8);
      uint64_t v17 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
      if (v16) {
        uint64_t v17 = (uint64_t *)*v17;
      }
      HIBYTE(v125) = 4;
      LODWORD(__p[0]) = v15;
      BYTE4(__p[0]) = 0;
      sub_1881DF4((std::string **)(v13 + 672), (long long *)__p, v17);
      if (SHIBYTE(v125) < 0) {
        operator delete(__p[0]);
      }
      int v18 = sub_6478D8((uint64_t)v9);
      int v19 = sub_E150CC(v18);
      *(_DWORD *)(v13 + 40) |= 0x1000000u;
      *(_DWORD *)(v13 + 836) = v19;
      int v20 = (unsigned __int8 *)sub_6477D4((uint64_t)v9);
      BOOL v21 = (*v20 | *((_DWORD *)v20 + 13)) == 0;
      *(_DWORD *)(v13 + 44) |= 1u;
      *(unsigned char *)(v13 + 868) = v21;
      char v22 = *(unsigned char *)(sub_6477D4((uint64_t)v9) + 1) ^ 1;
      *(_DWORD *)(v13 + 44) |= 2u;
      *(unsigned char *)(v13 + 869) = v22;
      sub_E23258((uint64_t)a1, v9, (_DWORD *)v13);
      unsigned int v23 = sub_64A728();
      int v24 = sub_E124B8(v23);
      *(_DWORD *)(v13 + 40) |= 0x200000u;
      *(_DWORD *)(v13 + 824) = v24;
      uint64_t v25 = sub_6467E8(v9, 0);
      int v26 = sub_E124DC(*(unsigned __int8 *)(v25 + 1057));
      *(_DWORD *)(v13 + 40) |= 0x2000000u;
      *(_DWORD *)(v13 + 840) = v26;
      uint64_t v27 = sub_647CD8((uint64_t)v9);
      size_t v29 = *(const std::string **)v27;
      int v28 = *(const std::string **)(v27 + 8);
      if (*(const std::string **)v27 != v28)
      {
        int v30 = (uint64_t **)(v13 + 128);
        do
        {
          size_t v31 = *(_DWORD **)(v13 + 144);
          if (v31 && (uint64_t v32 = *(int *)(v13 + 136), (int)v32 < *v31))
          {
            *(_DWORD *)(v13 + 136) = v32 + 1;
            std::string v33 = *(std::string **)&v31[2 * v32 + 2];
          }
          else
          {
            if (!*v30) {
              operator new();
            }
            *size_t v35 = v34;
            v35[1] = sub_3A6EDC;
            *int v34 = 0;
            v34[1] = 0;
            v34[2] = 0;
            std::string v33 = (std::string *)sub_188CDC8(v13 + 128, (uint64_t)v34);
          }
          std::string::operator=(v33, v29++);
        }
        while (v29 != v28);
      }
      uint64_t v36 = sub_647B84((uint64_t)v9);
      unint64_t v38 = *(const std::string **)v36;
      size_t v37 = *(const std::string **)(v36 + 8);
      if (*(const std::string **)v36 != v37)
      {
        do
        {
          uint64_t v39 = *(_DWORD **)(v13 + 312);
          if (v39 && (uint64_t v40 = *(int *)(v13 + 304), (int)v40 < *v39))
          {
            *(_DWORD *)(v13 + 304) = v40 + 1;
            uint64_t v41 = *(void *)&v39[2 * v40 + 2];
          }
          else
          {
            sub_13D6A1C(*(void *)(v13 + 296));
            uint64_t v41 = sub_188CDC8(v13 + 296, v42);
          }
          size_t v43 = *(_DWORD **)(v41 + 40);
          if (v43 && (uint64_t v44 = *(int *)(v41 + 32), (int)v44 < *v43))
          {
            *(_DWORD *)(v41 + 32) = v44 + 1;
            uint64_t v45 = *(std::string **)&v43[2 * v44 + 2];
          }
          else
          {
            uint64_t v46 = v41 + 24;
            size_t v47 = *(uint64_t **)(v41 + 24);
            if (!v47) {
              operator new();
            }
            *size_t v49 = v48;
            v49[1] = sub_3A6EDC;
            void *v48 = 0;
            v48[1] = 0;
            v48[2] = 0;
            uint64_t v45 = (std::string *)sub_188CDC8(v46, (uint64_t)v48);
          }
          std::string::operator=(v45, v38++);
        }
        while (v38 != v37);
      }
      unint64_t v50 = (void *)sub_647C20((uint64_t)v9);
      if (!sub_45FB38(v50))
      {
        unint64_t v51 = (const std::string **)sub_647C20((uint64_t)v9);
        *(_DWORD *)(v13 + 40) |= 0x2000u;
        uint64_t v52 = *(void *)(v13 + 760);
        if (!v52)
        {
          uint64_t v53 = *(void *)(v13 + 8);
          unint64_t v54 = (void *)(v53 & 0xFFFFFFFFFFFFFFFCLL);
          if (v53) {
            unint64_t v54 = (void *)*v54;
          }
          sub_13D6A1C((uint64_t)v54);
          uint64_t v52 = v55;
          *(void *)(v13 + 760) = v55;
        }
        sub_5F4D30(v51, v52);
      }
      sub_E1741C((uint64_t)a1, v9, a3, v13);
      uint64_t v56 = (void *)sub_6467E8(v9, 0);
      uint64_t v57 = v56;
      if (v56[1463] != v56[1464] && v56[1461] != 0x7FFFFFFFFFFFFFFFLL && v56[1462] != 0x7FFFFFFFFFFFFFFFLL)
      {
        *(_DWORD *)(v13 + 40) |= 0x4000u;
        uint64_t v58 = *(void *)(v13 + 768);
        if (!v58)
        {
          uint64_t v59 = *(void *)(v13 + 8);
          uint64_t v60 = (void *)(v59 & 0xFFFFFFFFFFFFFFFCLL);
          if (v59) {
            uint64_t v60 = (void *)*v60;
          }
          sub_13D7B20((uint64_t)v60);
          uint64_t v58 = v61;
          *(void *)(v13 + 768) = v61;
        }
        sub_E12EEC(v57 + 1461, v58);
      }
      sub_E175A4((uint64_t)a1, v9, v13);
      uint64_t v62 = (void *)nullsub_1(v9);
      if (379049677 * ((v62[1] - *v62) >> 3))
      {
        sub_6467E8(v9, 0);
        sub_E24710((uint64_t)a1);
      }
      sub_E2354C((uint64_t)a1, (uint64_t)v9, v13);
      v9 += 945;
    }
    while (v9 != v119);
    uint64_t v63 = sub_3777C0(*(void **)a1);
    uint64_t v64 = *v120;
    uint64_t v65 = v120[1];
    if (*v120 == v65)
    {
LABEL_55:
      char v70 = 1;
    }
    else
    {
      uint64_t v66 = v63;
      while (1)
      {
        uint64_t v67 = (uint64_t *)nullsub_1(v64);
        uint64_t v69 = *v67;
        uint64_t v68 = v67[1];
        if (*v67 != v68) {
          break;
        }
LABEL_54:
        v64 += 945;
        if (v64 == v65) {
          goto LABEL_55;
        }
      }
      while (sub_3D3C8C(v66, v69, *(unsigned __int8 *)(a3 + 40)) == 2)
      {
        v69 += 12328;
        if (v69 == v68) {
          goto LABEL_54;
        }
      }
      char v70 = 0;
    }
    *(_DWORD *)(v121 + 40) |= 0x1000000u;
    *(unsigned char *)(v121 + 549) = v70;
    uint64_t v71 = *v120;
    unint64_t v72 = v120[1];
    if (*v120 == v72)
    {
LABEL_69:
      char v76 = 0;
    }
    else
    {
      while (1)
      {
        uint64_t v73 = nullsub_1(v71);
        uint64_t v75 = *(void **)v73;
        uint64_t v74 = *(void **)(v73 + 8);
        if (*(void **)v73 != v74) {
          break;
        }
LABEL_68:
        v71 += 945;
        if (v71 == v72) {
          goto LABEL_69;
        }
      }
      while (1)
      {
        sub_470AF8(v75, __p);
        if (sub_E28F10((void *)__p[0], (unint64_t)__p[1], v125, v126, (uint64_t)a1)) {
          break;
        }
        v75 += 1541;
        if (v75 == v74) {
          goto LABEL_68;
        }
      }
      char v76 = 1;
    }
    *(_DWORD *)(v121 + 40) |= 0x4000000u;
    *(unsigned char *)(v121 + 551) = v76;
    if (*(unsigned char *)a3) {
      sub_E238D0(*((void *)a1 + 1), (uint64_t)v120, v121);
    }
    if ((int)(-72719023 * (v120[1] - *v120)) >= 1)
    {
      uint64_t v77 = 0;
      uint64_t v78 = -72719023 * (v120[1] - *v120);
      do
      {
        uint64_t v79 = *(void *)(*(void *)(v121 + 64) + 8 * v77 + 8);
        uint64_t v80 = (uint64_t **)nullsub_1(&(*v120)[945 * v77]);
        uint64_t v82 = *v80;
        unint64_t v81 = v80[1];
        while (v82 != v81)
        {
          if (v82[1503] == v82[1504]) {
            sub_E110A0(v82 + 916, v79);
          }
          else {
            sub_E14810(v82 + 1503, v79);
          }
          v82 += 1541;
        }
        ++v77;
      }
      while (v77 != v78);
    }
    sub_E23C3C((uint64_t)a1, v120, v121);
    uint64_t v85 = *a4;
    uint64_t v84 = a4[1];
    if (*a4 != v84)
    {
      uint64_t v86 = (uint64_t *)(v121 + 120);
      do
      {
        int64x2_t v87 = *(_DWORD **)(v121 + 136);
        if (v87 && (uint64_t v88 = *(int *)(v121 + 128), (int)v88 < *v87))
        {
          *(_DWORD *)(v121 + 128) = v88 + 1;
          uint64_t v89 = *(void *)&v87[2 * v88 + 2];
        }
        else
        {
          uint64_t v90 = sub_13D9608(*v86);
          uint64_t v89 = sub_188CDC8((uint64_t)v86, v90);
        }
        sub_E1163C(v85, v89, 0, v83);
        v85 += 1120;
      }
      while (v85 != v84);
    }
    sub_E23D98((uint64_t)a1, v120, v121);
    uint64_t v91 = sub_1883FB0((void *)(v121 + 16), dword_254E9B0, 11, (uint64_t)&off_252C740, 0);
    uint64_t v92 = (long long *)(sub_6467E8(*v120, 0) + 7400);
    *(_DWORD *)(v91 + 16) |= 1u;
    uint64_t v93 = *(void *)(v91 + 8);
    uint64_t v94 = (uint64_t *)(v93 & 0xFFFFFFFFFFFFFFFCLL);
    if (v93) {
      uint64_t v94 = (uint64_t *)*v94;
    }
    sub_1881DF4((std::string **)(v91 + 48), v92, v94);
    uint64_t v95 = (uint64_t *)sub_374CE4(*(void **)a1);
    char v96 = sub_2ABCBC(*v95);
    int v97 = *(_DWORD *)(v121 + 40);
    *(unsigned char *)(v121 + 550) = v96;
    *(_DWORD *)(v121 + 40) = v97 | 0x2100000;
    *(_DWORD *)(v121 + 536) = 0;
    if (*(unsigned char *)(a3 + 32))
    {
      sub_E33418((uint64_t)__p, (int *)a3);
      int v98 = -72719023 * (v120[1] - *v120);
      if (v98 >= 1)
      {
        sub_E3344C((void (***)(void, uint64_t, uint64_t))__p, (uint64_t)*v120, *(void *)(*(void *)(v121 + 64) + 8));
        uint64_t v99 = sub_1883FB0((void *)(v121 + 16), dword_254E9B0, 11, (uint64_t)&off_252C740, 0);
        int v100 = (long long *)sub_648354((uint64_t)*v120);
        *(_DWORD *)(v99 + 16) |= 2u;
        uint64_t v101 = *(void *)(v99 + 8);
        int v102 = (uint64_t *)(v101 & 0xFFFFFFFFFFFFFFFCLL);
        if (v101) {
          int v102 = (uint64_t *)*v102;
        }
        sub_1881DF4((std::string **)(v99 + 56), v100, v102);
        if (v98 != 1)
        {
          uint64_t v103 = 0;
          uint64_t v104 = 945;
          do
          {
            sub_E3344C((void (***)(void, uint64_t, uint64_t))__p, (uint64_t)&(*v120)[v104], *(void *)(*(void *)(v121 + 64) + 8 * v103 + 16));
            v104 += 945;
            ++v103;
          }
          while (v98 - 1 != v103);
        }
        if ((int)(-72719023 * (v120[1] - *v120)) >= 1)
        {
          unint64_t v105 = 0;
          uint64_t v106 = -72719023 * (v120[1] - *v120);
          do
          {
            uint64_t v107 = *(void *)(*(void *)(v121 + 64) + 8 * v105 + 8);
            unint64_t v108 = &(*v120)[945 * v105];
            uint64_t v109 = (void *)nullsub_1(v108);
            uint64_t v110 = v109[1] - *v109;
            if (v110)
            {
              unint64_t v111 = 0;
              uint64_t v112 = v110 / 12328;
              do
              {
                unint64_t v113 = (void *)sub_6467E8(v108, v111);
                sub_E269D8(a1, v113, v105, v111++, v107, v121);
              }
              while (v112 != v111);
            }
            ++v105;
          }
          while (v105 != v106);
        }
      }
    }
    else
    {
      sub_DEA278((uint64_t)__p, (int *)a3);
      unint64_t v114 = 0xBAA6550FFBAA6551 * (v120[1] - *v120);
      if ((int)v114 >= 1)
      {
        unint64_t v115 = 0;
        uint64_t v116 = 7560 * v114;
        uint64_t v117 = 8;
        do
        {
          sub_DEA27C((uint64_t)__p, &(*v120)[v115 / 8], *(void *)(*(void *)(v121 + 64) + v117));
          v115 += 7560;
          v117 += 8;
        }
        while (v116 != v115);
      }
    }
    __p[0] = &off_243EE58;
    if (v133 < 0) {
      operator delete(v132);
    }
    if (v130)
    {
      uint64_t v131 = v130;
      operator delete(v130);
    }
    if (v128)
    {
      unint64_t v129 = v128;
      operator delete(v128);
    }
    if (v125)
    {
      unint64_t v126 = (unint64_t)v125;
      operator delete(v125);
    }
  }
}

void sub_E23148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a20);
    sub_162D64C(a13);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a20);
  sub_162D64C(a13);
  _Unwind_Resume(a1);
}

void sub_E23194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

uint64_t sub_E23258(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v5 = sub_646C34(a2);
  if (v5 < 0) {
    __int16 v6 = -50;
  }
  else {
    __int16 v6 = 50;
  }
  a3[10] |= 0x400000u;
  a3[207] = (int)v5 / 100
          + ((5243 * (__int16)(v6 + (int)v5 % 100)) >> 19)
          + ((5243 * (__int16)(v6 + (int)v5 % 100)) >> 31);
  int v7 = sub_646CE8((uint64_t)a2);
  if (v7 < 0) {
    char v8 = -5;
  }
  else {
    char v8 = 5;
  }
  a3[10] |= 0x800000u;
  a3[208] = v7 / 10 + (((103 * (char)(v8 + v7 % 10)) >> 15) & 1) + ((103 * (char)(v8 + v7 % 10)) >> 10);
  if (sub_64AFB8((unsigned int **)a2))
  {
    int v10 = sub_64AFA4((unsigned int **)a2);
    if (v10 < 0) {
      char v11 = -5;
    }
    else {
      char v11 = 5;
    }
    a3[10] |= 0x80000000;
    a3[216] = v10 / 10
            + (((103 * (char)(v11 + v10 % 10)) >> 15) & 1)
            + ((103 * (char)(v11 + v10 % 10)) >> 10);
    if (!sub_64B038((unsigned int **)a2))
    {
LABEL_9:
      if (!sub_64B138((unsigned int **)a2)) {
        goto LABEL_10;
      }
      goto LABEL_20;
    }
  }
  else if (!sub_64B038((unsigned int **)a2))
  {
    goto LABEL_9;
  }
  int v12 = sub_64B024((unsigned int **)a2);
  if (v12 < 0) {
    char v13 = -5;
  }
  else {
    char v13 = 5;
  }
  a3[10] |= 0x10000000u;
  a3[213] = v12 / 10
          + (((103 * (char)(v13 + v12 % 10)) >> 15) & 1)
          + ((103 * (char)(v13 + v12 % 10)) >> 10);
  if (!sub_64B138((unsigned int **)a2))
  {
LABEL_10:
    uint64_t result = sub_64B0B8((unsigned int **)a2);
    if (!result) {
      return result;
    }
    goto LABEL_24;
  }
LABEL_20:
  int v14 = sub_64B124((unsigned int **)a2);
  if (v14 < 0) {
    char v15 = -5;
  }
  else {
    char v15 = 5;
  }
  a3[10] |= 0x40000000u;
  a3[215] = v14 / 10
          + (((103 * (char)(v15 + v14 % 10)) >> 15) & 1)
          + ((103 * (char)(v15 + v14 % 10)) >> 10);
  uint64_t result = sub_64B0B8((unsigned int **)a2);
  if (result)
  {
LABEL_24:
    uint64_t result = sub_64B0A4((unsigned int **)a2);
    if ((int)result < 0) {
      char v16 = -5;
    }
    else {
      char v16 = 5;
    }
    a3[10] |= 0x20000000u;
    a3[214] = (int)result / 10
            + (((103 * (char)(v16 + (int)result % 10)) >> 15) & 1)
            + ((103 * (char)(v16 + (int)result % 10)) >> 10);
  }
  return result;
}

void sub_E2354C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v5 = (uint64_t *)sub_376F8C(*(void **)a1);
    int v34 = 0;
    size_t v35 = 0;
    uint64_t v36 = 0;
    __int16 v6 = (uint64_t *)nullsub_1(a2);
    uint64_t v7 = *v6;
    uint64_t v8 = v6[1];
    if (*v6 != v8)
    {
      do
      {
        if (!sub_64EFF0(v7)) {
          goto LABEL_4;
        }
        uint64_t v9 = sub_46CAAC(v7);
        unsigned int v38 = *(_DWORD *)(v9 + 112);
        if (v38 <= 1) {
          uint64_t v37 = *(void *)(v9 + 104);
        }
        sub_28E4E4(v5, (uint64_t)&v37, (unint64_t)&v23);
        sub_30C0C(&v34, v30);
        sub_8AC4C((uint64_t)&v33);
        int v10 = (void **)__p;
        if (__p)
        {
          char v11 = v32;
          int v12 = __p;
          if (v32 != __p)
          {
            do
            {
              if (*((char *)v11 - 1) < 0) {
                operator delete(*(v11 - 3));
              }
              v11 -= 3;
            }
            while (v11 != v10);
            int v12 = __p;
          }
          uint64_t v32 = v10;
          operator delete(v12);
        }
        if (v29 < 0)
        {
          operator delete(v28);
          if ((v27 & 0x80000000) == 0)
          {
LABEL_18:
            if (SHIBYTE(v25) < 0) {
              goto LABEL_22;
            }
            goto LABEL_4;
          }
        }
        else if ((v27 & 0x80000000) == 0)
        {
          goto LABEL_18;
        }
        operator delete(v26);
        if (SHIBYTE(v25) < 0) {
LABEL_22:
        }
          operator delete(v23);
LABEL_4:
        v7 += 12328;
      }
      while (v7 != v8);
    }
    unsigned int v23 = 0;
    int v24 = 0;
    uint64_t v25 = 0;
    HIBYTE(v22[2]) = 17;
    strcpy((char *)v22, "Charging Stations");
    sub_DEC58C((uint64_t *)&v23, (uint64_t *)&v34, (uint64_t)v22, 0xFFFFFFFF, 0, 0, 0.0);
    if (SHIBYTE(v22[2]) < 0) {
      operator delete(v22[0]);
    }
    sub_DEC8F0((char **)&v23, (uint64_t)v22);
    char v13 = (char *)v22[0];
    int v14 = (char *)v22[1];
    if (v22[0] != v22[1])
    {
      char v15 = (uint64_t **)(a3 + 16);
      do
      {
        char v16 = (std::string *)sub_1884274(v15, dword_254EA30, 11, (uint64_t)&off_252CDD0, 0);
        sub_11B9D5C(v16, (uint64_t)v13);
        v13 += 48;
      }
      while (v13 != v14);
      char v13 = (char *)v22[0];
    }
    if (v13)
    {
      uint64_t v17 = (char *)v22[1];
      int v18 = v13;
      if (v22[1] != v13)
      {
        do
          uint64_t v17 = (char *)sub_11B9574(v17 - 48);
        while (v17 != v13);
        int v18 = v22[0];
      }
      v22[1] = v13;
      operator delete(v18);
    }
    int v19 = (void **)v23;
    if (!v23) {
      goto LABEL_45;
    }
    int v20 = v24;
    BOOL v21 = v23;
    if (v24 == v23)
    {
LABEL_44:
      int v24 = v19;
      operator delete(v21);
LABEL_45:
      if (v34)
      {
        size_t v35 = v34;
        operator delete(v34);
      }
      return;
    }
    while (1)
    {
      if (*((char *)v20 - 25) < 0)
      {
        operator delete(*(v20 - 6));
        if (*((char *)v20 - 49) < 0) {
LABEL_42:
        }
          operator delete(*(v20 - 9));
      }
      else if (*((char *)v20 - 49) < 0)
      {
        goto LABEL_42;
      }
      v20 -= 10;
      if (v20 == v19)
      {
        BOOL v21 = v23;
        goto LABEL_44;
      }
    }
  }
}

void sub_E23854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16)
{
  sub_CBDA74(&a16);
  int v18 = *(void **)(v16 - 128);
  if (v18)
  {
    *(void *)(v16 - 120) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_E238D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_1883FB0((void *)(a3 + 16), dword_254EB38, 11, (uint64_t)&off_252C710, 0);
  __int16 v6 = *(void **)a2;
  uint64_t v37 = *(void **)(a2 + 8);
  if (*(void **)a2 != v37)
  {
    size_t v35 = (uint64_t *)(result + 16);
    uint64_t v36 = result;
    uint64_t v39 = a1;
    while (1)
    {
      uint64_t v7 = *(_DWORD **)(result + 32);
      if (v7 && (uint64_t v8 = *(int *)(result + 24), (int)v8 < *v7))
      {
        *(_DWORD *)(result + 24) = v8 + 1;
        uint64_t v9 = *(void *)&v7[2 * v8 + 2];
      }
      else
      {
        uint64_t v10 = sub_11BDF08(*v35);
        uint64_t v9 = sub_188CDC8((uint64_t)v35, v10);
      }
      unsigned int v38 = v6;
      uint64_t v11 = sub_6467E8(v6, 0);
      uint64_t v12 = *(void *)(v11 + 1064);
      uint64_t v41 = *(void *)(v11 + 1072);
      if (v12 != v41) {
        break;
      }
LABEL_3:
      __int16 v6 = v38 + 945;
      uint64_t result = v36;
      if (v38 + 945 == v37) {
        return result;
      }
    }
    char v13 = (void *)v11;
    uint64_t v14 = 0;
    char v15 = (int *)(v9 + 16);
    uint64_t v16 = (_DWORD *)(v9 + 32);
    uint64_t v40 = (unsigned int *)(v9 + 48);
    while (1)
    {
      uint64_t v19 = v14;
      if (*(void *)(v12 + 24) <= (unint64_t)v14)
      {
        int v21 = *v15;
        uint64_t v20 = v14;
      }
      else
      {
        uint64_t v20 = v14;
        do
        {
          char v22 = (unsigned int *)sub_470B40(v13, v20);
          unsigned int v23 = (int *)sub_2D5D58(a1, *v22 | ((unint64_t)(v22[1] & 0x1FFFFFFF) << 32));
          int v24 = (unsigned __int16 *)((char *)v23 - *v23);
          if (*v24 >= 0x1Du && (uint64_t v25 = v24[14]) != 0) {
            uint64_t v26 = *(void *)((char *)v23 + v25);
          }
          else {
            uint64_t v26 = 0;
          }
          if ((*(unsigned char *)(sub_470B40(v13, v20) + 7) & 0x20) != 0) {
            uint64_t v27 = v26;
          }
          else {
            uint64_t v27 = -v26;
          }
          uint64_t v28 = *(unsigned int *)(v9 + 16);
          if (v28 == *(_DWORD *)(v9 + 20))
          {
            int v21 = v28 + 1;
            sub_188CA54((unsigned int *)(v9 + 16), v28 + 1);
            *(void *)(*(void *)(v9 + 24) + 8 * v28) = v27;
          }
          else
          {
            *(void *)(*(void *)(v9 + 24) + 8 * v28) = v27;
            int v21 = v28 + 1;
          }
          int *v15 = v21;
          LODWORD(v14) = v14 + 1;
          uint64_t v20 = v14;
          uint64_t v19 = v14;
        }
        while (*(void *)(v12 + 24) > (unint64_t)v14);
      }
      uint64_t v14 = v20;
      if (v21) {
        int v29 = v21 - 1;
      }
      else {
        int v29 = 0;
      }
      uint64_t v30 = *(unsigned int *)(v9 + 32);
      if (v30 == *(_DWORD *)(v9 + 36))
      {
        sub_188C80C((unsigned int *)(v9 + 32), v30 + 1);
        *(_DWORD *)(*(void *)(v9 + 40) + 4 * v30) = v29;
        a1 = v39;
        *uint64_t v16 = v30 + 1;
        if (v14) {
          goto LABEL_33;
        }
      }
      else
      {
        *(_DWORD *)(*(void *)(v9 + 40) + 4 * v30) = v29;
        a1 = v39;
        *uint64_t v16 = v30 + 1;
        if (v14) {
          goto LABEL_33;
        }
      }
      int v32 = *(_DWORD *)(v12 + 160);
      if ((v32 - 25) <= 0x3F && ((1 << (v32 - 25)) & 0x9000000000000001) != 0
        || v32 == 17)
      {
        double v31 = (double)(1000000000 - sub_46CABC((uint64_t)v13));
        goto LABEL_39;
      }
LABEL_33:
      if (sub_470ADC(v13) == v19)
      {
        double v31 = (double)sub_46CAC4((uint64_t)v13);
LABEL_39:
        float v33 = v31 / 1000000000.0;
        uint64_t v34 = *(unsigned int *)(v9 + 48);
        if (v34 != *(_DWORD *)(v9 + 52))
        {
          *(float *)(*(void *)(v9 + 56) + 4 * v34) = v33;
LABEL_44:
          int v17 = v34 + 1;
          int v18 = (_DWORD *)(v9 + 48);
          goto LABEL_11;
        }
        int v17 = v34 + 1;
        int v18 = (_DWORD *)(v9 + 48);
        sub_188C80C(v40, v34 + 1);
        *(float *)(*(void *)(v9 + 56) + 4 * v34) = v33;
        goto LABEL_11;
      }
      uint64_t v34 = *(unsigned int *)(v9 + 48);
      if (v34 != *(_DWORD *)(v9 + 52))
      {
        *(_DWORD *)(*(void *)(v9 + 56) + 4 * v34) = 1065353216;
        goto LABEL_44;
      }
      int v17 = v34 + 1;
      int v18 = (_DWORD *)(v9 + 48);
      sub_188C80C(v40, v34 + 1);
      *(_DWORD *)(*(void *)(v9 + 56) + 4 * v34) = 1065353216;
LABEL_11:
      *int v18 = v17;
      v12 += 2400;
      if (v12 == v41) {
        goto LABEL_3;
      }
    }
  }
  return result;
}

void sub_E23C3C(uint64_t a1, void *a2, uint64_t a3)
{
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)uint64_t v16 = 0u;
  int v17 = 1065353216;
  if ((int)(-72719023 * ((uint64_t)(a2[1] - *a2) >> 3)) >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = -72719023 * ((uint64_t)(a2[1] - *a2) >> 3);
    do
    {
      uint64_t v8 = *(void *)(*(void *)(a3 + 64) + 8 * v6 + 8);
      uint64_t v9 = (uint64_t *)nullsub_1(*a2 + 7560 * v6);
      uint64_t v10 = *v9;
      uint64_t v11 = v9[1];
      if (*v9 != v11)
      {
        do
        {
          sub_E1C490(a1, v10, v8, a3, __p);
          v10 += 12328;
        }
        while (v10 != v11);
      }
      ++v6;
    }
    while (v6 != v7);
    uint64_t v12 = (void **)v16[0];
    if (v16[0])
    {
      do
      {
        uint64_t v14 = (void **)*v12;
        if (*((char *)v12 + 39) < 0) {
          operator delete(v12[2]);
        }
        operator delete(v12);
        uint64_t v12 = v14;
      }
      while (v14);
    }
  }
  char v13 = __p[0];
  __p[0] = 0;
  if (v13) {
    operator delete(v13);
  }
}

void sub_E23D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_E23D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_E23D98(uint64_t a1, void *a2, uint64_t a3)
{
  int64x2_t v87 = 0uLL;
  unint64_t v88 = 0;
  if ((int)(-72719023 * ((uint64_t)(a2[1] - *a2) >> 3)) >= 1)
  {
    uint64_t v3 = a3;
    uint64_t v4 = 0;
    uint64_t v5 = (uint64_t *)(a3 + 232);
    uint64_t v73 = -72719023 * ((uint64_t)(a2[1] - *a2) >> 3);
    uint64_t v75 = (uint64_t *)(a3 + 232);
    while (1)
    {
      uint64_t v86 = *(void *)(*(void *)(v3 + 64) + 8 * v4 + 8);
      unint64_t v81 = (void *)(*a2 + 7560 * v4);
      uint64_t v6 = (void *)nullsub_1(v81);
      uint64_t v7 = v6[1] - *v6;
      if (v7) {
        break;
      }
LABEL_3:
      if (++v4 == v73)
      {
        if (v87.i64[0])
        {
          sub_E28164((uint64_t)&v87, v87.i64[0]);
          operator delete((void *)v87.i64[0]);
        }
        return;
      }
    }
    uint64_t v8 = 0;
    unint64_t v80 = 0xFF55E3181697D6CDLL * (v7 >> 3);
    uint64_t v77 = v4;
    while (1)
    {
      uint64_t v82 = v8;
      uint64_t v9 = (void *)sub_6467E8(v81, v8);
      uint64_t v10 = v9;
      uint64_t v11 = v9[1263];
      uint64_t v12 = v9[1264];
      if (v11 == 0x7FFFFFFFFFFFFFFFLL || v12 == 0x7FFFFFFFFFFFFFFFLL) {
        goto LABEL_6;
      }
      unint64_t v14 = v87.u64[1];
      uint64_t v85 = (void *)v87.i64[1];
      uint64_t v15 = v87.i64[0];
      if (v87.i64[0] == v87.i64[1])
      {
        uint64_t v20 = (void *)v87.i64[0];
LABEL_45:
        if (v20 != (void *)v14)
        {
          *(_DWORD *)(v86 + 44) |= 8u;
          *(_DWORD *)(v86 + 872) = 954437177 * (((unint64_t)v20 - v15) >> 3);
          goto LABEL_71;
        }
      }
      else
      {
        uint64_t v16 = v9[1266];
        uint64_t v17 = v9[1265];
        uint64_t v18 = v9[1269];
        uint64_t v19 = v9[1268];
        uint64_t v20 = (void *)v87.i64[0];
        do
        {
          if (v11 == *v20)
          {
            uint64_t v21 = v20[2];
            if (v16 - v17 == v20[3] - v21)
            {
              if (v17 == v16)
              {
LABEL_24:
                uint64_t v23 = v20[5];
                if (v18 - v19 == v20[6] - v23)
                {
                  if (v19 == v18)
                  {
LABEL_13:
                    if (v12 == v20[1]) {
                      goto LABEL_45;
                    }
                  }
                  else
                  {
                    uint64_t v24 = v10[1268];
                    while (*(_DWORD *)v24 == *(_DWORD *)v23)
                    {
                      if (*(_DWORD *)(v24 + 4) != *(_DWORD *)(v23 + 4)) {
                        break;
                      }
                      if (*(_DWORD *)(v24 + 12) != *(_DWORD *)(v23 + 12)) {
                        break;
                      }
                      if (*(_DWORD *)(v24 + 16) != *(_DWORD *)(v23 + 16)) {
                        break;
                      }
                      uint64_t v26 = *(void *)(v24 + 24);
                      uint64_t v25 = *(void *)(v24 + 32);
                      uint64_t v27 = *(void *)(v23 + 24);
                      if (v25 - v26 != *(void *)(v23 + 32) - v27) {
                        break;
                      }
                      while (v26 != v25)
                      {
                        int v29 = *(_DWORD **)v26;
                        uint64_t v28 = *(_DWORD **)(v26 + 8);
                        uint64_t v30 = *(_DWORD **)v27;
                        unint64_t v14 = v87.u64[1];
                        if ((_DWORD *)((char *)v28 - *(void *)v26) != (_DWORD *)(*(void *)(v27 + 8) - *(void *)v27)) {
                          goto LABEL_14;
                        }
                        for (; v29 != v28; v30 += 3)
                        {
                          unint64_t v14 = v87.u64[1];
                          if (*v29 != *v30) {
                            goto LABEL_14;
                          }
                          unint64_t v14 = v87.u64[1];
                          if (v29[1] != v30[1]) {
                            goto LABEL_14;
                          }
                          unint64_t v14 = v87.u64[1];
                          if (v29[2] != v30[2]) {
                            goto LABEL_14;
                          }
                          v29 += 3;
                        }
                        v26 += 24;
                        v27 += 24;
                      }
                      if (*(_DWORD *)(v24 + 48) != *(_DWORD *)(v23 + 48)
                        || *(_DWORD *)(v24 + 56) != *(_DWORD *)(v23 + 56))
                      {
                        break;
                      }
                      v24 += 72;
                      v23 += 72;
                      if (v24 == v18) {
                        goto LABEL_13;
                      }
                    }
                  }
                }
              }
              else
              {
                uint64_t v22 = v10[1265];
                while (*(_DWORD *)v22 == *(_DWORD *)v21
                     && *(_DWORD *)(v22 + 4) == *(_DWORD *)(v21 + 4)
                     && *(_DWORD *)(v22 + 8) == *(_DWORD *)(v21 + 8)
                     && *(void *)(v22 + 16) == *(void *)(v21 + 16))
                {
                  v22 += 24;
                  v21 += 24;
                  if (v22 == v16) {
                    goto LABEL_24;
                  }
                }
              }
            }
          }
LABEL_14:
          v20 += 9;
        }
        while (v20 != (void *)v14);
      }
      double v31 = v10 + 1263;
      *(_DWORD *)(v86 + 44) |= 8u;
      *(_DWORD *)(v86 + 872) = 954437177 * ((v14 - v15) >> 3);
      if (v14 >= v88)
      {
        v87.i64[1] = sub_E28458(&v87, (long long *)(v10 + 1263));
        uint64_t v61 = *(_DWORD **)(v3 + 248);
        if (!v61) {
          goto LABEL_69;
        }
      }
      else
      {
        long long v32 = *(_OWORD *)v31;
        *(void *)(v14 + 16) = 0;
        uint64_t v78 = v10 + 1263;
        *(_OWORD *)unint64_t v14 = v32;
        *(void *)(v14 + 24) = 0;
        *(void *)(v14 + 32) = 0;
        float v33 = (void *)v14;
        uint64_t v34 = (unsigned char *)v10[1265];
        uint64_t v79 = v10;
        size_t v35 = (unsigned char *)v10[1266];
        int64_t v36 = v35 - v34;
        if (v35 != v34)
        {
          if (0xAAAAAAAAAAAAAAABLL * (v36 >> 3) > 0xAAAAAAAAAAAAAAALL) {
            sub_2E00();
          }
          uint64_t v37 = (char *)operator new(v36);
          float v33 = v85;
          v85[2] = v37;
          v85[3] = v37;
          unsigned int v38 = &v37[8 * (v36 >> 3)];
          v85[4] = v38;
          memcpy(v37, v34, v36);
          v85[3] = v38;
        }
        v33[5] = 0;
        v33[6] = 0;
        v33[7] = 0;
        uint64_t v39 = (char *)v79[1268];
        uint64_t v40 = (long long *)v79[1269];
        uint64_t v89 = v33 + 5;
        char v90 = 0;
        double v83 = v40;
        int64_t v41 = (char *)v40 - v39;
        uint64_t v42 = v33;
        if (v41)
        {
          unint64_t v43 = 0x8E38E38E38E38E39 * (v41 >> 3);
          if (v43 >= 0x38E38E38E38E38FLL) {
            sub_2E00();
          }
          uint64_t v44 = (char *)operator new(v41);
          v33[5] = v44;
          v33[6] = v44;
          v33[7] = &v44[72 * v43];
          uint64_t v45 = v44;
          uint64_t v46 = (long long *)v39;
          do
          {
            long long v47 = *v46;
            *((void *)v45 + 2) = *((void *)v46 + 2);
            *((void *)v45 + 3) = 0;
            *(_OWORD *)uint64_t v45 = v47;
            *((void *)v45 + 4) = 0;
            *((void *)v45 + 5) = 0;
            uint64_t v48 = *((void *)v46 + 3);
            uint64_t v49 = *((void *)v46 + 4);
            int64_t v50 = v49 - v48;
            if (v49 != v48)
            {
              uint64_t v84 = v46;
              unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * (v50 >> 3);
              if (v51 > 0xAAAAAAAAAAAAAAALL) {
                sub_2E00();
              }
              uint64_t v52 = (char *)operator new(v50);
              uint64_t v53 = 0;
              *((void *)v45 + 3) = v52;
              *((void *)v45 + 4) = v52;
              *((void *)v45 + 5) = &v52[24 * v51];
              do
              {
                uint64_t v55 = &v52[v53];
                uint64_t v56 = v48 + v53;
                *(void *)uint64_t v55 = 0;
                *((void *)v55 + 1) = 0;
                *((void *)v55 + 2) = 0;
                uint64_t v58 = *(unsigned char **)(v48 + v53);
                uint64_t v57 = *(unsigned char **)(v48 + v53 + 8);
                int64_t v59 = v57 - v58;
                if (v57 != v58)
                {
                  if (0xAAAAAAAAAAAAAAABLL * (v59 >> 2) >= 0x1555555555555556) {
                    sub_2E00();
                  }
                  uint64_t v60 = (char *)operator new(v59);
                  *(void *)uint64_t v55 = v60;
                  *((void *)v55 + 1) = v60;
                  unint64_t v54 = &v60[4 * (v59 >> 2)];
                  *((void *)v55 + 2) = v54;
                  memcpy(v60, v58, v59);
                  *((void *)v55 + 1) = v54;
                }
                v53 += 24;
              }
              while (v56 + 24 != v49);
              *((void *)v45 + 4) = &v52[v53];
              uint64_t v46 = v84;
            }
            *((_DWORD *)v45 + 12) = *((_DWORD *)v46 + 12);
            long long v32 = *(long long *)((char *)v46 + 56);
            *(_OWORD *)(v45 + 56) = v32;
            uint64_t v46 = (long long *)((char *)v46 + 72);
            v45 += 72;
          }
          while (v46 != v83);
          v85[6] = v45;
          uint64_t v42 = v85;
          uint64_t v3 = a3;
          uint64_t v4 = v77;
          uint64_t v5 = v75;
        }
        uint64_t v10 = v79;
        *((_DWORD *)v42 + 16) = *((_DWORD *)v79 + 2542);
        uint64_t v62 = (uint64_t)(v42 + 9);
        double v31 = v78;
        v87.i64[1] = v62;
        uint64_t v61 = *(_DWORD **)(v3 + 248);
        if (!v61)
        {
LABEL_69:
          uint64_t v65 = sub_13D9A2C(*v5);
          uint64_t v64 = sub_188CDC8((uint64_t)v5, (uint64_t)v65);
          goto LABEL_70;
        }
      }
      uint64_t v63 = *(int *)(v3 + 240);
      if ((int)v63 >= *v61) {
        goto LABEL_69;
      }
      *(_DWORD *)(v3 + 240) = v63 + 1;
      uint64_t v64 = *(void *)&v61[2 * v63 + 2];
LABEL_70:
      sub_E14B1C(v31, v64, *(long double *)&v32);
LABEL_71:
      uint64_t v66 = 0x2FC962FC962FC963 * ((uint64_t)(v10[134] - v10[133]) >> 5);
      if ((int)v66 >= 1)
      {
        unint64_t v67 = 0;
        uint64_t v68 = v10 + 133;
        uint64_t v69 = v66;
        do
        {
          uint64_t v70 = sub_4A5E10(v68, v67);
          uint64_t v71 = sub_1883FB0((void *)(*(void *)(*(void *)(v86 + 72) + 8 * v67 + 8) + 16), dword_254EAA8, 11, (uint64_t)&off_252CE78, 0);
          char v72 = *(unsigned char *)(v70 + 2225);
          *(_DWORD *)(v71 + 16) |= 2u;
          *(unsigned char *)(v71 + 97) = v72;
          ++v67;
        }
        while (v69 != v67);
      }
LABEL_6:
      uint64_t v8 = v82 + 1;
      if (v82 + 1 == v80) {
        goto LABEL_3;
      }
    }
  }
}

void sub_E244E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v28 = *(void *)(v26 - 128);
  if (v28)
  {
    sub_E28164(v26 - 128, v28);
    operator delete(*(void **)(v26 - 128));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_E24684(uint64_t a1)
{
  *(void *)a1 = &off_243EE58;
  if ((*(char *)(a1 + 159) & 0x80000000) == 0)
  {
    int v2 = *(void **)(a1 + 112);
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 136));
  int v2 = *(void **)(a1 + 112);
  if (v2)
  {
LABEL_3:
    *(void *)(a1 + 120) = v2;
    operator delete(v2);
  }
LABEL_4:
  uint64_t v3 = *(void **)(a1 + 80);
  if (v3)
  {
    *(void *)(a1 + 88) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 16);
  if (v4)
  {
    *(void *)(a1 + 24) = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_E24710(uint64_t a1)
{
  sub_45923C(&v1, *(void *)(a1 + 8));
  sub_1106C64();
}

void sub_E25AA4(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 - 232);
  if (!v3)
  {
    sub_1106CAC((uint64_t *)(v1 - 208));
    _Unwind_Resume(a1);
  }
  *(void *)(v1 - 224) = v3;
  operator delete(v3);
  sub_1106CAC((uint64_t *)(v1 - 208));
  _Unwind_Resume(a1);
}

void sub_E25BE0(uint64_t a1@<X0>, void *a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, _DWORD *a5@<X4>, unsigned int *a6@<X5>, void *a7@<X8>)
{
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = a4;
  uint64_t v15 = (unsigned int *)sub_470B40(a2, a4);
  sub_2954EC(v13, (((unint64_t)(v15[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v15[1] << 32) | *v15) ^ 0x1000000000000, (uint64_t)&v36);
  sub_2E4B5C((uint64_t)&v36, v39);
  if (__p)
  {
    unsigned int v38 = __p;
    operator delete(__p);
  }
  if (sub_470ADC(a2) - 1 == v14)
  {
    double v16 = 0.0;
    if (!a4) {
      double v16 = (double)(1000000000 - sub_46CABC((uint64_t)a2));
    }
    unsigned int v17 = sub_46CAC4((uint64_t)a2);
    sub_31854((uint64_t *)v39, 0, a7, v16 / 1000000000.0, (double)v17 / 1000000000.0);
    if (v39[0])
    {
      v39[1] = v39[0];
      operator delete(v39[0]);
    }
  }
  else
  {
    if (!a4)
    {
      int v18 = sub_46CABC((uint64_t)a2);
      sub_32F08((uint64_t *)v39, 1, 0, &v36, 1.0);
      sub_32F08((uint64_t *)&v36, 0, 0, &v34, fmin((double)(1000000000 - v18) / 1000000000.0, 1.0));
      if (v36)
      {
        std::string __p = v36;
        operator delete(v36);
      }
      if (v39[0])
      {
        v39[1] = v39[0];
        operator delete(v39[0]);
      }
      *(_OWORD *)uint64_t v39 = v34;
      uint64_t v40 = v35;
    }
    uint64_t v19 = a2[133];
    if (*(void *)(v19 + 2400 * a3 + 80) == v14)
    {
      uint64_t v20 = *(void *)(v19 + 2400 * a3 + 88);
      uint64_t v21 = v20 / 100;
      __int16 v22 = v20 % 100;
      if (v20 < 0) {
        __int16 v23 = -50;
      }
      else {
        __int16 v23 = 50;
      }
      *a5 = sub_477F48((uint64_t)v39, (double)(v21+ (int)(((5243 * (__int16)(v23 + v22)) >> 19) + ((5243 * (__int16)(v23 + v22)) >> 31))), 0.1);
    }
    if (*(void *)(v19 + 2400 * a3 + 104) == v14)
    {
      uint64_t v24 = *(void *)(v19 + 2400 * a3 + 112);
      if (v24 == 0x7FFFFFFFFFFFFFFFLL
        || ((uint64_t v25 = v24 / 100, v26 = v24 % 100, v24 < 0) ? (v27 = -50) : (v27 = 50),
            uint64_t v28 = v25
                + (int)(((5243 * (__int16)(v27 + v26)) >> 19) + ((5243 * (__int16)(v27 + v26)) >> 31)),
            v28 < 1))
      {
        unsigned int v29 = 0;
        *a6 = 0;
      }
      else
      {
        unsigned int v29 = sub_477F48((uint64_t)v39, (double)v28, 0.1);
        *a6 = v29;
      }
    }
    else
    {
      unsigned int v29 = *a6;
    }
    uint64_t v30 = (char *)v39[1];
    unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * (((char *)v39[1] - (char *)v39[0]) >> 2) - 1;
    int v33 = v31 > *a5 && v31 > v29;
    *a7 = v39[0];
    a7[1] = &v30[12 * (v33 << 31 >> 31)];
    a7[2] = v40;
  }
}

void sub_E25F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_E25F88(double a1, uint64_t a2, void *a3, unsigned int a4)
{
  uint64_t v40 = 0;
  int64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v4 = a3[1] - *a3;
  if (v4)
  {
    unint64_t v7 = 0;
    unint64_t v8 = 0;
    unint64_t v33 = a4;
    unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 3);
    while (1)
    {
      while (!*(unsigned char *)(sub_E1ACF8(a3, v8) + 16)
           && !*(unsigned char *)(sub_E1ACF8(a3, v8) + 17)
           && !*(unsigned char *)(sub_E1ACF8(a3, v8) + 18)
           && v8 != -1 - 0x5555555555555555 * ((uint64_t)(a3[1] - *a3) >> 3))
      {
        if (++v8 == v34)
        {
LABEL_43:
          if (v40)
          {
            int64_t v41 = (char *)v40;
            operator delete(v40);
          }
          return;
        }
      }
      uint64_t v10 = v40;
      int64_t v41 = (char *)v40;
      unint64_t v11 = v8 + 1;
      unint64_t v12 = v8 + 1 - v7;
      if (0xAAAAAAAAAAAAAAABLL * ((v42 - (unsigned char *)v40) >> 2) < v12)
      {
        if (v12 > 0x1555555555555555) {
          sub_2E00();
        }
        uint64_t v40 = operator new(12 * v12);
        int64_t v41 = (char *)v40;
        uint64_t v42 = (char *)v40 + 12 * v12;
        if (v10) {
          operator delete(v10);
        }
      }
      unint64_t v35 = v8 + 1;
      unint64_t v36 = v8;
      if (v7 <= v11) {
        unint64_t v13 = v8 + 1;
      }
      else {
        unint64_t v13 = v7;
      }
      unint64_t v14 = v7;
      if (v11 > v7)
      {
        do
        {
          uint64_t v20 = sub_E1ACF8(a3, v14);
          uint64_t v21 = v20;
          __int16 v22 = v41;
          if (v41 < v42)
          {
            uint64_t v18 = *(void *)v20;
            *((_DWORD *)v41 + 2) = *(_DWORD *)(v20 + 8);
            *(void *)__int16 v22 = v18;
            uint64_t v19 = v22 + 12;
          }
          else
          {
            __int16 v23 = (char *)v40;
            unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((v41 - (unsigned char *)v40) >> 2);
            unint64_t v25 = v24 + 1;
            if (v24 + 1 > 0x1555555555555555) {
              sub_2E00();
            }
            if (0x5555555555555556 * ((v42 - (unsigned char *)v40) >> 2) > v25) {
              unint64_t v25 = 0x5555555555555556 * ((v42 - (unsigned char *)v40) >> 2);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v42 - (unsigned char *)v40) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v26 = 0x1555555555555555;
            }
            else {
              unint64_t v26 = v25;
            }
            if (v26)
            {
              if (v26 > 0x1555555555555555) {
                sub_188D718();
              }
              __int16 v27 = (char *)operator new(12 * v26);
            }
            else
            {
              __int16 v27 = 0;
            }
            uint64_t v28 = *(void *)v21;
            unsigned int v29 = &v27[12 * v24];
            *((_DWORD *)v29 + 2) = *(_DWORD *)(v21 + 8);
            *(void *)unsigned int v29 = v28;
            uint64_t v30 = v29;
            if (v22 != v23)
            {
              do
              {
                uint64_t v31 = *(void *)(v22 - 12);
                v22 -= 12;
                int v32 = *((_DWORD *)v22 + 2);
                *(void *)(v30 - 12) = v31;
                v30 -= 12;
                *((_DWORD *)v30 + 2) = v32;
              }
              while (v22 != v23);
              __int16 v22 = (char *)v40;
            }
            uint64_t v19 = v29 + 12;
            uint64_t v40 = v30;
            int64_t v41 = v29 + 12;
            uint64_t v42 = &v27[12 * v26];
            if (v22) {
              operator delete(v22);
            }
          }
          int64_t v41 = v19;
          ++v14;
        }
        while (v14 != v13);
      }
      memset(v37, 0, sizeof(v37));
      sub_426D8((uint64_t *)&v40, v33, 0, 1, v37, (uint64_t)&__p, a1);
      if (v37[0]) {
        operator delete(v37[0]);
      }
      uint64_t v15 = v39;
      if (v39) {
        break;
      }
      uint64_t v9 = __p;
      if (__p) {
        goto LABEL_4;
      }
LABEL_5:
      unint64_t v7 = v36;
      unint64_t v8 = v35;
      if (v35 == v34) {
        goto LABEL_43;
      }
    }
    unint64_t v16 = 0;
    do
    {
      uint64_t v17 = sub_E1ACF8(a3, v7 + v16);
      uint64_t v9 = __p;
      *(unsigned char *)(v17 + 20) = (*(void *)((char *)__p + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v16) & 1;
      ++v16;
    }
    while (v15 != v16);
LABEL_4:
    operator delete(v9);
    goto LABEL_5;
  }
}

void sub_E262E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_E26334(void *a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  sub_11065D0((uint64_t)v10);
  sub_BB6C(&v12, 0);
  sub_BB6C(&v13, 9);
  uint64_t v14 = -1;
  (*(void (**)(void, uint64_t, unsigned char *))(*(void *)*a1 + 8))(*a1, a2, v10);
  __int16 v8 = sub_11069C8((uint64_t)v10, a3);
  sub_11053A4(a4, (uint64_t *)a3, v8);
  sub_1105490(a4, v12);
  sub_FE4750(a4, v13);
  uint64_t v9 = v11;
  if (v11)
  {
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_E26468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _Unwind_Exception *a15)
{
  if (a11)
  {
    sub_20A7010(a11);
    exception_object = a15;
  }
  _Unwind_Resume(exception_object);
}

void sub_E26490(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_14A84((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_E264A4()
{
  sub_7BD6C(v0);
}

void sub_E26938(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E2694C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E26960(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E26974(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E26988(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E2699C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E269B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E269C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E269D8(unsigned char *a1, void *a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12 = sub_470ADC(a2);
  uint64_t v13 = a2[1272];
  uint64_t v14 = a2[1273];
  if (v13 != v14)
  {
    unint64_t v15 = v12;
    unint64_t v16 = v12 - 1;
    do
    {
      unint64_t v17 = *(void *)(v13 + 8);
      if (v17 >= v15 || v17 == v16 && sub_46CAC4((uint64_t)a2) < 0x3B9ACA00) {
        goto LABEL_3;
      }
      if (sub_63A8F8(v13))
      {
        if (a1[16]) {
          goto LABEL_16;
        }
      }
      else
      {
        if (!sub_63A908(v13))
        {
          if (!sub_63A770(v13) && !sub_63A760(v13) || !a1[18]) {
            goto LABEL_3;
          }
LABEL_16:
          std::to_string(&v34, a3);
          uint64_t v18 = std::string::append(&v34, "_");
          long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
          v35.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v19;
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          v18->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v33, a4);
          if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v20 = &v33;
          }
          else {
            uint64_t v20 = (std::string *)v33.__r_.__value_.__r.__words[0];
          }
          if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v33.__r_.__value_.__l.__size_;
          }
          __int16 v22 = std::string::append(&v35, (const std::string::value_type *)v20, size);
          long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
          v36.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v23;
          v22->__r_.__value_.__l.__size_ = 0;
          v22->__r_.__value_.__r.__words[2] = 0;
          v22->__r_.__value_.__r.__words[0] = 0;
          unint64_t v24 = std::string::append(&v36, "_");
          long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
          v37.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v25;
          v24->__r_.__value_.__l.__size_ = 0;
          v24->__r_.__value_.__r.__words[2] = 0;
          v24->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v32, *(void *)(v13 + 8));
          if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v26 = &v32;
          }
          else {
            unint64_t v26 = (std::string *)v32.__r_.__value_.__r.__words[0];
          }
          if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v27 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v27 = v32.__r_.__value_.__l.__size_;
          }
          uint64_t v28 = std::string::append(&v37, (const std::string::value_type *)v26, v27);
          long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
          v38.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v29;
          v28->__r_.__value_.__l.__size_ = 0;
          v28->__r_.__value_.__r.__words[2] = 0;
          v28->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v32.__r_.__value_.__l.__data_);
            if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_37;
            }
LABEL_30:
            if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_31;
            }
LABEL_38:
            operator delete(v36.__r_.__value_.__l.__data_);
            if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_39;
            }
LABEL_32:
            if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_33;
            }
LABEL_40:
            operator delete(v35.__r_.__value_.__l.__data_);
            if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_41;
            }
LABEL_34:
            if (*(_DWORD *)(v13 + 4) == 2)
            {
LABEL_42:
              if (byte_25F3C17 >= 0) {
                uint64_t v30 = (const std::string::value_type *)&qword_25F3C00;
              }
              else {
                uint64_t v30 = (const std::string::value_type *)qword_25F3C00;
              }
              if (byte_25F3C17 >= 0) {
                std::string::size_type v31 = byte_25F3C17;
              }
              else {
                std::string::size_type v31 = *(void *)&byte_25F3C08;
              }
              std::string::append(&v38, v30, v31);
            }
          }
          else
          {
            if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_30;
            }
LABEL_37:
            operator delete(v37.__r_.__value_.__l.__data_);
            if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_38;
            }
LABEL_31:
            if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_32;
            }
LABEL_39:
            operator delete(v33.__r_.__value_.__l.__data_);
            if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_40;
            }
LABEL_33:
            if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_34;
            }
LABEL_41:
            operator delete(v34.__r_.__value_.__l.__data_);
            if (*(_DWORD *)(v13 + 4) == 2) {
              goto LABEL_42;
            }
          }
          sub_E26DCC((uint64_t)a1, v13, (const void **)&v38.__r_.__value_.__l.__data_, a4, a5, a6);
          if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v38.__r_.__value_.__l.__data_);
          }
          goto LABEL_3;
        }
        if (a1[17]) {
          goto LABEL_16;
        }
      }
LABEL_3:
      v13 += 104;
    }
    while (v13 != v14);
  }
}

void sub_E26CD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a47 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a40 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((a47 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a42);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a35);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a16);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a27 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a22);
    goto LABEL_14;
  }
LABEL_12:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_E26DB8()
{
  if (*(char *)(v0 - 105) < 0) {
    JUMPOUT(0xE26DACLL);
  }
  JUMPOUT(0xE26DB0);
}

void sub_E26DCC(uint64_t a1, uint64_t a2, const void **a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = a2;
  if (sub_63A4A4(a2))
  {
    uint64_t v11 = *(void *)(v9 + 32);
    uint64_t v10 = *(void *)(v9 + 40);
    if (v11 != v10)
    {
      uint64_t v205 = (uint64_t *)(a6 + 208);
      int v206 = (uint64_t *)(a5 + 224);
      size_t v207 = (_DWORD *)(v9 + 20);
      long long v204 = (uint64_t *)(a6 + 256);
      uint64_t v209 = a5;
      uint64_t v210 = a6;
      uint64_t v211 = v9;
      uint64_t v208 = *(void *)(v9 + 40);
      while (2)
      {
        if (!sub_63A048(v11)) {
          goto LABEL_6;
        }
        uint64_t v14 = *(_DWORD **)(a5 + 240);
        if (v14 && (uint64_t v15 = *(int *)(a5 + 232), (int)v15 < *v14))
        {
          *(_DWORD *)(a5 + 232) = v15 + 1;
          uint64_t v16 = *(void *)&v14[2 * v15 + 2];
        }
        else
        {
          sub_13D97FC(*v206);
          uint64_t v16 = sub_188CDC8((uint64_t)v206, v17);
        }
        BOOL v18 = *(_DWORD *)(v9 + 4) != 0;
        *(_DWORD *)(v16 + 16) |= 0x20u;
        *(_DWORD *)(v16 + 76) = v18;
        BOOL v19 = sub_63A4F0(v9);
        int v20 = *(_DWORD *)(v16 + 16);
        if (v19)
        {
          *(_DWORD *)(v16 + 72) = *(_DWORD *)(v9 + 16);
          *(_DWORD *)(v16 + 88) = *(unsigned __int16 *)(v11 + 14);
          int v21 = *(unsigned __int16 *)(v11 + 16);
          v20 |= 0x190u;
          *(_DWORD *)(v16 + 16) = v20;
          *(_DWORD *)(v16 + 84) = v21;
        }
        *(_DWORD *)(v16 + 16) = v20 | 0x40;
        *(_DWORD *)(v16 + 80) = a4;
        switch(*(_DWORD *)(v11 + 8))
        {
          case 1:
            *(_DWORD *)(v16 + 16) = v20 | 0x44;
            *(_DWORD *)(v16 + 64) = 2;
            int v22 = *((char *)a3 + 23);
            if (v22 >= 0) {
              size_t v23 = *((unsigned __int8 *)a3 + 23);
            }
            else {
              size_t v23 = (size_t)a3[1];
            }
            int v24 = byte_25F3C2F;
            if (byte_25F3C2F >= 0) {
              size_t v25 = byte_25F3C2F;
            }
            else {
              size_t v25 = qword_25F3C20;
            }
            unint64_t v26 = v25 + v23;
            if (v25 + v23 > 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_329;
            }
            if (v26 <= 0x16)
            {
              memset(&__dst, 0, sizeof(__dst));
              p_dst = &__dst;
              *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v25 + v23;
              if (!v23) {
                goto LABEL_72;
              }
LABEL_68:
              if (v22 >= 0) {
                uint64_t v55 = a3;
              }
              else {
                uint64_t v55 = *a3;
              }
              memmove(p_dst, v55, v23);
              goto LABEL_72;
            }
            uint64_t v52 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v26 | 7) != 0x17) {
              uint64_t v52 = v26 | 7;
            }
            uint64_t v53 = v52 + 1;
            p_dst = (std::string *)operator new(v52 + 1);
            unint64_t v54 = v53 | 0x8000000000000000;
            a6 = v210;
            __dst.__r_.__value_.__l.__size_ = v25 + v23;
            __dst.__r_.__value_.__r.__words[2] = v54;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
            if (v23) {
              goto LABEL_68;
            }
LABEL_72:
            uint64_t v56 = (char *)p_dst + v23;
            if (v25)
            {
              if (v24 >= 0) {
                uint64_t v57 = &qword_25F3C18;
              }
              else {
                uint64_t v57 = (uint64_t *)qword_25F3C18;
              }
              memmove(v56, v57, v25);
            }
            v56[v25] = 0;
            *(_DWORD *)(v16 + 16) |= 1u;
            uint64_t v58 = *(void *)(v16 + 8);
            int64_t v59 = (uint64_t *)(v58 & 0xFFFFFFFFFFFFFFFCLL);
            if (v58) {
              int64_t v59 = (uint64_t *)*v59;
            }
            sub_1881E08((uint64_t *)(v16 + 48), (long long *)&__dst, v59);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__dst.__r_.__value_.__l.__data_);
              uint64_t v60 = *(_DWORD **)(a6 + 272);
              if (!v60) {
                goto LABEL_153;
              }
            }
            else
            {
              uint64_t v60 = *(_DWORD **)(a6 + 272);
              if (!v60)
              {
LABEL_153:
                uint64_t v99 = sub_13D9774(*v204);
                uint64_t v98 = sub_188CDC8((uint64_t)v204, (uint64_t)v99);
                goto LABEL_154;
              }
            }
            uint64_t v97 = *(int *)(a6 + 264);
            if ((int)v97 >= *v60) {
              goto LABEL_153;
            }
            *(_DWORD *)(a6 + 264) = v97 + 1;
            uint64_t v98 = *(void *)&v60[2 * v97 + 2];
LABEL_154:
            int v100 = *((char *)a3 + 23);
            if (v100 >= 0) {
              size_t v101 = *((unsigned __int8 *)a3 + 23);
            }
            else {
              size_t v101 = (size_t)a3[1];
            }
            int v102 = byte_25F3C2F;
            if (byte_25F3C2F >= 0) {
              size_t v103 = byte_25F3C2F;
            }
            else {
              size_t v103 = qword_25F3C20;
            }
            unint64_t v104 = v103 + v101;
            if (v103 + v101 > 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_329;
            }
            if (v104 > 0x16)
            {
              uint64_t v106 = (v104 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v104 | 7) != 0x17) {
                uint64_t v106 = v104 | 7;
              }
              uint64_t v107 = v106 + 1;
              unint64_t v105 = (std::string *)operator new(v106 + 1);
              unint64_t v108 = v107 | 0x8000000000000000;
              a6 = v210;
              __dst.__r_.__value_.__l.__size_ = v103 + v101;
              __dst.__r_.__value_.__r.__words[2] = v108;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v105;
              if (v101) {
                goto LABEL_167;
              }
            }
            else
            {
              memset(&__dst, 0, sizeof(__dst));
              unint64_t v105 = &__dst;
              *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v103 + v101;
              if (!v101) {
                goto LABEL_171;
              }
LABEL_167:
              if (v100 >= 0) {
                uint64_t v109 = a3;
              }
              else {
                uint64_t v109 = *a3;
              }
              memmove(v105, v109, v101);
            }
LABEL_171:
            uint64_t v110 = (char *)v105 + v101;
            if (v103)
            {
              if (v102 >= 0) {
                unint64_t v111 = &qword_25F3C18;
              }
              else {
                unint64_t v111 = (uint64_t *)qword_25F3C18;
              }
              memmove(v110, v111, v103);
            }
            v110[v103] = 0;
            *(_DWORD *)(v98 + 16) |= 1u;
            uint64_t v112 = *(void *)(v98 + 8);
            unint64_t v113 = (uint64_t *)(v112 & 0xFFFFFFFFFFFFFFFCLL);
            if (v112) {
              unint64_t v113 = (uint64_t *)*v113;
            }
            sub_1881E08((uint64_t *)(v98 + 24), (long long *)&__dst, v113);
            uint64_t v10 = v208;
            a5 = v209;
            uint64_t v9 = v211;
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__dst.__r_.__value_.__l.__data_);
              *(_DWORD *)(v98 + 16) |= 2u;
              uint64_t v115 = *(void *)(v98 + 32);
              if (!v115) {
                goto LABEL_315;
              }
            }
            else
            {
              *(_DWORD *)(v98 + 16) |= 2u;
              uint64_t v115 = *(void *)(v98 + 32);
              if (!v115)
              {
LABEL_315:
                uint64_t v196 = *(void *)(v98 + 8);
                uint64_t v197 = (void *)(v196 & 0xFFFFFFFFFFFFFFFCLL);
                if (v196) {
                  uint64_t v197 = (void *)*v197;
                }
                uint64_t v115 = sub_15C1918((uint64_t)v197);
                *(void *)(v98 + 32) = v115;
              }
            }
            sub_E112BC(v207, v115, v114);
            *(_DWORD *)(v98 + 16) |= 4u;
            *(_DWORD *)(v98 + 40) = 1;
            goto LABEL_6;
          case 2:
            *(_DWORD *)(v16 + 16) = v20 | 0x44;
            *(_DWORD *)(v16 + 64) = 2;
            int v28 = *((char *)a3 + 23);
            if (v28 >= 0) {
              size_t v29 = *((unsigned __int8 *)a3 + 23);
            }
            else {
              size_t v29 = (size_t)a3[1];
            }
            int v30 = byte_25F3C47;
            if (byte_25F3C47 >= 0) {
              size_t v31 = byte_25F3C47;
            }
            else {
              size_t v31 = qword_25F3C38;
            }
            unint64_t v32 = v31 + v29;
            if (v31 + v29 > 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_329;
            }
            if (v32 <= 0x16)
            {
              memset(&__dst, 0, sizeof(__dst));
              std::string v33 = &__dst;
              *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v31 + v29;
              if (!v29) {
                goto LABEL_89;
              }
LABEL_85:
              if (v28 >= 0) {
                uint64_t v64 = a3;
              }
              else {
                uint64_t v64 = *a3;
              }
              memmove(v33, v64, v29);
              goto LABEL_89;
            }
            uint64_t v61 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v32 | 7) != 0x17) {
              uint64_t v61 = v32 | 7;
            }
            uint64_t v62 = v61 + 1;
            std::string v33 = (std::string *)operator new(v61 + 1);
            unint64_t v63 = v62 | 0x8000000000000000;
            a6 = v210;
            __dst.__r_.__value_.__l.__size_ = v31 + v29;
            __dst.__r_.__value_.__r.__words[2] = v63;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
            if (v29) {
              goto LABEL_85;
            }
LABEL_89:
            uint64_t v65 = (char *)v33 + v29;
            if (v31)
            {
              if (v30 >= 0) {
                uint64_t v66 = &qword_25F3C30;
              }
              else {
                uint64_t v66 = (uint64_t *)qword_25F3C30;
              }
              memmove(v65, v66, v31);
            }
            v65[v31] = 0;
            *(_DWORD *)(v16 + 16) |= 1u;
            uint64_t v67 = *(void *)(v16 + 8);
            uint64_t v68 = (uint64_t *)(v67 & 0xFFFFFFFFFFFFFFFCLL);
            if (v67) {
              uint64_t v68 = (uint64_t *)*v68;
            }
            sub_1881E08((uint64_t *)(v16 + 48), (long long *)&__dst, v68);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__dst.__r_.__value_.__l.__data_);
              uint64_t v69 = *(_DWORD **)(a6 + 272);
              if (!v69) {
                goto LABEL_184;
              }
            }
            else
            {
              uint64_t v69 = *(_DWORD **)(a6 + 272);
              if (!v69)
              {
LABEL_184:
                uint64_t v118 = sub_13D9774(*v204);
                uint64_t v117 = sub_188CDC8((uint64_t)v204, (uint64_t)v118);
                goto LABEL_185;
              }
            }
            uint64_t v116 = *(int *)(a6 + 264);
            if ((int)v116 >= *v69) {
              goto LABEL_184;
            }
            *(_DWORD *)(a6 + 264) = v116 + 1;
            uint64_t v117 = *(void *)&v69[2 * v116 + 2];
LABEL_185:
            int v119 = *((char *)a3 + 23);
            if (v119 >= 0) {
              size_t v120 = *((unsigned __int8 *)a3 + 23);
            }
            else {
              size_t v120 = (size_t)a3[1];
            }
            int v121 = byte_25F3C47;
            if (byte_25F3C47 >= 0) {
              size_t v122 = byte_25F3C47;
            }
            else {
              size_t v122 = qword_25F3C38;
            }
            unint64_t v123 = v122 + v120;
            if (v122 + v120 > 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_329;
            }
            if (v123 > 0x16)
            {
              uint64_t v125 = (v123 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v123 | 7) != 0x17) {
                uint64_t v125 = v123 | 7;
              }
              uint64_t v126 = v125 + 1;
              uint64_t v124 = (std::string *)operator new(v125 + 1);
              unint64_t v127 = v126 | 0x8000000000000000;
              a6 = v210;
              __dst.__r_.__value_.__l.__size_ = v122 + v120;
              __dst.__r_.__value_.__r.__words[2] = v127;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v124;
              if (v120) {
                goto LABEL_198;
              }
            }
            else
            {
              memset(&__dst, 0, sizeof(__dst));
              uint64_t v124 = &__dst;
              *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v122 + v120;
              if (!v120) {
                goto LABEL_202;
              }
LABEL_198:
              if (v119 >= 0) {
                size_t v128 = a3;
              }
              else {
                size_t v128 = *a3;
              }
              memmove(v124, v128, v120);
            }
LABEL_202:
            unint64_t v129 = (char *)v124 + v120;
            if (v122)
            {
              if (v121 >= 0) {
                size_t v130 = &qword_25F3C30;
              }
              else {
                size_t v130 = (uint64_t *)qword_25F3C30;
              }
              memmove(v129, v130, v122);
            }
            v129[v122] = 0;
            *(_DWORD *)(v117 + 16) |= 1u;
            uint64_t v131 = *(void *)(v117 + 8);
            long long v132 = (uint64_t *)(v131 & 0xFFFFFFFFFFFFFFFCLL);
            if (v131) {
              long long v132 = (uint64_t *)*v132;
            }
            sub_1881E08((uint64_t *)(v117 + 24), (long long *)&__dst, v132);
            uint64_t v10 = v208;
            a5 = v209;
            uint64_t v9 = v211;
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__dst.__r_.__value_.__l.__data_);
              *(_DWORD *)(v117 + 16) |= 2u;
              uint64_t v134 = *(void *)(v117 + 32);
              if (!v134) {
                goto LABEL_320;
              }
            }
            else
            {
              *(_DWORD *)(v117 + 16) |= 2u;
              uint64_t v134 = *(void *)(v117 + 32);
              if (!v134)
              {
LABEL_320:
                uint64_t v198 = *(void *)(v117 + 8);
                unint64_t v199 = (void *)(v198 & 0xFFFFFFFFFFFFFFFCLL);
                if (v198) {
                  unint64_t v199 = (void *)*v199;
                }
                uint64_t v134 = sub_15C1918((uint64_t)v199);
                *(void *)(v117 + 32) = v134;
              }
            }
            sub_E112BC(v207, v134, v133);
            *(_DWORD *)(v117 + 16) |= 4u;
            *(_DWORD *)(v117 + 40) = 2;
            goto LABEL_6;
          case 3:
            *(_DWORD *)(v16 + 16) = v20 | 0x44;
            *(_DWORD *)(v16 + 64) = 1;
            int v34 = *((char *)a3 + 23);
            if (v34 >= 0) {
              size_t v35 = *((unsigned __int8 *)a3 + 23);
            }
            else {
              size_t v35 = (size_t)a3[1];
            }
            int v36 = byte_25F3C5F;
            if (byte_25F3C5F >= 0) {
              size_t v37 = byte_25F3C5F;
            }
            else {
              size_t v37 = qword_25F3C50;
            }
            unint64_t v38 = v37 + v35;
            if (v37 + v35 > 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_329;
            }
            if (v38 <= 0x16)
            {
              memset(&__dst, 0, sizeof(__dst));
              uint64_t v39 = &__dst;
              *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v37 + v35;
              if (!v35) {
                goto LABEL_106;
              }
LABEL_102:
              if (v34 >= 0) {
                uint64_t v73 = a3;
              }
              else {
                uint64_t v73 = *a3;
              }
              memmove(v39, v73, v35);
              goto LABEL_106;
            }
            uint64_t v70 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v38 | 7) != 0x17) {
              uint64_t v70 = v38 | 7;
            }
            uint64_t v71 = v70 + 1;
            uint64_t v39 = (std::string *)operator new(v70 + 1);
            unint64_t v72 = v71 | 0x8000000000000000;
            a6 = v210;
            __dst.__r_.__value_.__l.__size_ = v37 + v35;
            __dst.__r_.__value_.__r.__words[2] = v72;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
            if (v35) {
              goto LABEL_102;
            }
LABEL_106:
            uint64_t v74 = (char *)v39 + v35;
            if (v37)
            {
              if (v36 >= 0) {
                uint64_t v75 = &qword_25F3C48;
              }
              else {
                uint64_t v75 = (uint64_t *)qword_25F3C48;
              }
              memmove(v74, v75, v37);
            }
            v74[v37] = 0;
            *(_DWORD *)(v16 + 16) |= 1u;
            uint64_t v76 = *(void *)(v16 + 8);
            uint64_t v77 = (uint64_t *)(v76 & 0xFFFFFFFFFFFFFFFCLL);
            if (v76) {
              uint64_t v77 = (uint64_t *)*v77;
            }
            sub_1881E08((uint64_t *)(v16 + 48), (long long *)&__dst, v77);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__dst.__r_.__value_.__l.__data_);
              uint64_t v78 = *(_DWORD **)(a6 + 224);
              if (!v78) {
                goto LABEL_215;
              }
            }
            else
            {
              uint64_t v78 = *(_DWORD **)(a6 + 224);
              if (!v78) {
                goto LABEL_215;
              }
            }
            uint64_t v135 = *(int *)(a6 + 216);
            if ((int)v135 < *v78)
            {
              *(_DWORD *)(a6 + 216) = v135 + 1;
              uint64_t v136 = *(void *)&v78[2 * v135 + 2];
              goto LABEL_216;
            }
LABEL_215:
            sub_13D96E0(*v205);
            uint64_t v136 = sub_188CDC8((uint64_t)v205, v137);
LABEL_216:
            int v138 = *((char *)a3 + 23);
            if (v138 >= 0) {
              size_t v139 = *((unsigned __int8 *)a3 + 23);
            }
            else {
              size_t v139 = (size_t)a3[1];
            }
            int v140 = byte_25F3C5F;
            if (byte_25F3C5F >= 0) {
              size_t v141 = byte_25F3C5F;
            }
            else {
              size_t v141 = qword_25F3C50;
            }
            unint64_t v142 = v141 + v139;
            if (v141 + v139 > 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_329;
            }
            if (v142 > 0x16)
            {
              uint64_t v144 = (v142 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v142 | 7) != 0x17) {
                uint64_t v144 = v142 | 7;
              }
              uint64_t v145 = v144 + 1;
              size_t v143 = (std::string *)operator new(v144 + 1);
              unint64_t v146 = v145 | 0x8000000000000000;
              a6 = v210;
              __dst.__r_.__value_.__l.__size_ = v141 + v139;
              __dst.__r_.__value_.__r.__words[2] = v146;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v143;
              if (!v139) {
                goto LABEL_233;
              }
LABEL_229:
              if (v138 >= 0) {
                long long v147 = a3;
              }
              else {
                long long v147 = *a3;
              }
              memmove(v143, v147, v139);
              goto LABEL_233;
            }
            memset(&__dst, 0, sizeof(__dst));
            size_t v143 = &__dst;
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v141 + v139;
            if (v139) {
              goto LABEL_229;
            }
LABEL_233:
            long long v148 = (char *)v143 + v139;
            if (v141)
            {
              if (v140 >= 0) {
                long long v149 = &qword_25F3C48;
              }
              else {
                long long v149 = (uint64_t *)qword_25F3C48;
              }
              memmove(v148, v149, v141);
            }
            v148[v141] = 0;
            *(_DWORD *)(v136 + 16) |= 1u;
            uint64_t v150 = *(void *)(v136 + 8);
            long long v151 = (uint64_t *)(v150 & 0xFFFFFFFFFFFFFFFCLL);
            if (v150) {
              long long v151 = (uint64_t *)*v151;
            }
            sub_1881E08((uint64_t *)(v136 + 24), (long long *)&__dst, v151);
            uint64_t v10 = v208;
            a5 = v209;
            uint64_t v9 = v211;
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__dst.__r_.__value_.__l.__data_);
            }
            int v153 = *(_DWORD *)(v136 + 16);
            *(_DWORD *)(v136 + 64) = 2;
            *(_DWORD *)(v136 + 16) = v153 | 0x24;
            uint64_t v154 = *(void *)(v136 + 40);
            if (!v154)
            {
              uint64_t v200 = *(void *)(v136 + 8);
              uint64_t v201 = (void *)(v200 & 0xFFFFFFFFFFFFFFFCLL);
              if (v200) {
                uint64_t v201 = (void *)*v201;
              }
              uint64_t v202 = sub_15C1918((uint64_t)v201);
              *(void *)(v136 + 40) = v202;
              sub_E112BC(v207, v202, v203);
              if (!sub_63A4F0(v211)) {
                goto LABEL_6;
              }
LABEL_327:
              *(_DWORD *)(v136 + 16) |= 0x20u;
              *(_DWORD *)(v136 + 64) = 5;
              goto LABEL_6;
            }
            sub_E112BC(v207, v154, v152);
            if (sub_63A4F0(v211)) {
              goto LABEL_327;
            }
LABEL_6:
            v11 += 176;
            if (v11 == v10) {
              return;
            }
            continue;
          case 4:
            *(_DWORD *)(v16 + 16) = v20 | 0x44;
            *(_DWORD *)(v16 + 64) = 1;
            int v40 = *((char *)a3 + 23);
            if (v40 >= 0) {
              size_t v41 = *((unsigned __int8 *)a3 + 23);
            }
            else {
              size_t v41 = (size_t)a3[1];
            }
            int v42 = byte_25F3C77;
            if (byte_25F3C77 >= 0) {
              size_t v43 = byte_25F3C77;
            }
            else {
              size_t v43 = qword_25F3C68;
            }
            unint64_t v44 = v43 + v41;
            if (v43 + v41 > 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_329;
            }
            if (v44 <= 0x16)
            {
              memset(&__dst, 0, sizeof(__dst));
              uint64_t v45 = &__dst;
              *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v43 + v41;
              if (!v41) {
                goto LABEL_123;
              }
LABEL_119:
              if (v40 >= 0) {
                uint64_t v82 = a3;
              }
              else {
                uint64_t v82 = *a3;
              }
              memmove(v45, v82, v41);
              goto LABEL_123;
            }
            uint64_t v79 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v44 | 7) != 0x17) {
              uint64_t v79 = v44 | 7;
            }
            uint64_t v80 = v79 + 1;
            uint64_t v45 = (std::string *)operator new(v79 + 1);
            unint64_t v81 = v80 | 0x8000000000000000;
            a6 = v210;
            __dst.__r_.__value_.__l.__size_ = v43 + v41;
            __dst.__r_.__value_.__r.__words[2] = v81;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v45;
            if (v41) {
              goto LABEL_119;
            }
LABEL_123:
            double v83 = (char *)v45 + v41;
            if (v43)
            {
              if (v42 >= 0) {
                uint64_t v84 = &qword_25F3C60;
              }
              else {
                uint64_t v84 = (uint64_t *)qword_25F3C60;
              }
              memmove(v83, v84, v43);
            }
            v83[v43] = 0;
            *(_DWORD *)(v16 + 16) |= 1u;
            uint64_t v85 = *(void *)(v16 + 8);
            uint64_t v86 = (uint64_t *)(v85 & 0xFFFFFFFFFFFFFFFCLL);
            if (v85) {
              uint64_t v86 = (uint64_t *)*v86;
            }
            sub_1881E08((uint64_t *)(v16 + 48), (long long *)&__dst, v86);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__dst.__r_.__value_.__l.__data_);
              int64x2_t v87 = *(_DWORD **)(a6 + 224);
              if (!v87) {
                goto LABEL_248;
              }
            }
            else
            {
              int64x2_t v87 = *(_DWORD **)(a6 + 224);
              if (!v87) {
                goto LABEL_248;
              }
            }
            uint64_t v155 = *(int *)(a6 + 216);
            if ((int)v155 < *v87)
            {
              *(_DWORD *)(a6 + 216) = v155 + 1;
              uint64_t v156 = *(void *)&v87[2 * v155 + 2];
              goto LABEL_249;
            }
LABEL_248:
            sub_13D96E0(*v205);
            uint64_t v156 = sub_188CDC8((uint64_t)v205, v157);
LABEL_249:
            int v158 = *((char *)a3 + 23);
            if (v158 >= 0) {
              size_t v159 = *((unsigned __int8 *)a3 + 23);
            }
            else {
              size_t v159 = (size_t)a3[1];
            }
            int v160 = byte_25F3C77;
            if (byte_25F3C77 >= 0) {
              size_t v161 = byte_25F3C77;
            }
            else {
              size_t v161 = qword_25F3C68;
            }
            unint64_t v162 = v161 + v159;
            if (v161 + v159 > 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_329;
            }
            if (v162 > 0x16)
            {
              uint64_t v164 = (v162 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v162 | 7) != 0x17) {
                uint64_t v164 = v162 | 7;
              }
              uint64_t v165 = v164 + 1;
              uint64_t v163 = (std::string *)operator new(v164 + 1);
              unint64_t v166 = v165 | 0x8000000000000000;
              a6 = v210;
              __dst.__r_.__value_.__l.__size_ = v161 + v159;
              __dst.__r_.__value_.__r.__words[2] = v166;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v163;
              if (!v159)
              {
LABEL_266:
                long long v168 = (char *)v163 + v159;
                if (v161)
                {
                  if (v160 >= 0) {
                    long long v169 = &qword_25F3C60;
                  }
                  else {
                    long long v169 = (uint64_t *)qword_25F3C60;
                  }
                  memmove(v168, v169, v161);
                }
                v168[v161] = 0;
                *(_DWORD *)(v156 + 16) |= 1u;
                uint64_t v170 = *(void *)(v156 + 8);
                size_t v171 = (uint64_t *)(v170 & 0xFFFFFFFFFFFFFFFCLL);
                if (v170) {
                  size_t v171 = (uint64_t *)*v171;
                }
                sub_1881E08((uint64_t *)(v156 + 24), (long long *)&__dst, v171);
                uint64_t v10 = v208;
                a5 = v209;
                uint64_t v9 = v211;
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__dst.__r_.__value_.__l.__data_);
                }
                int v172 = *(_DWORD *)(v156 + 16);
                *(_DWORD *)(v156 + 64) = 5;
                *(_DWORD *)(v156 + 16) = v172 | 0x24;
                uint64_t v12 = *(void *)(v156 + 40);
                if (v12) {
                  goto LABEL_5;
                }
                goto LABEL_312;
              }
            }
            else
            {
              memset(&__dst, 0, sizeof(__dst));
              uint64_t v163 = &__dst;
              *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v161 + v159;
              if (!v159) {
                goto LABEL_266;
              }
            }
            if (v158 >= 0) {
              long long v167 = a3;
            }
            else {
              long long v167 = *a3;
            }
            memmove(v163, v167, v159);
            goto LABEL_266;
          case 5:
            *(_DWORD *)(v16 + 16) = v20 | 0x44;
            *(_DWORD *)(v16 + 64) = 1;
            int v46 = *((char *)a3 + 23);
            if (v46 >= 0) {
              size_t v47 = *((unsigned __int8 *)a3 + 23);
            }
            else {
              size_t v47 = (size_t)a3[1];
            }
            int v48 = byte_25F3C8F;
            if (byte_25F3C8F >= 0) {
              size_t v49 = byte_25F3C8F;
            }
            else {
              size_t v49 = qword_25F3C80;
            }
            unint64_t v50 = v49 + v47;
            if (v49 + v47 > 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_329;
            }
            if (v50 <= 0x16)
            {
              memset(&__dst, 0, sizeof(__dst));
              unint64_t v51 = &__dst;
              *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v49 + v47;
              if (!v47) {
                goto LABEL_140;
              }
LABEL_136:
              if (v46 >= 0) {
                uint64_t v91 = a3;
              }
              else {
                uint64_t v91 = *a3;
              }
              memmove(v51, v91, v47);
              goto LABEL_140;
            }
            uint64_t v88 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v50 | 7) != 0x17) {
              uint64_t v88 = v50 | 7;
            }
            uint64_t v89 = v88 + 1;
            unint64_t v51 = (std::string *)operator new(v88 + 1);
            unint64_t v90 = v89 | 0x8000000000000000;
            a6 = v210;
            __dst.__r_.__value_.__l.__size_ = v49 + v47;
            __dst.__r_.__value_.__r.__words[2] = v90;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
            if (v47) {
              goto LABEL_136;
            }
LABEL_140:
            uint64_t v92 = (char *)v51 + v47;
            if (v49)
            {
              if (v48 >= 0) {
                uint64_t v93 = &qword_25F3C78;
              }
              else {
                uint64_t v93 = (uint64_t *)qword_25F3C78;
              }
              memmove(v92, v93, v49);
            }
            v92[v49] = 0;
            *(_DWORD *)(v16 + 16) |= 1u;
            uint64_t v94 = *(void *)(v16 + 8);
            uint64_t v95 = (uint64_t *)(v94 & 0xFFFFFFFFFFFFFFFCLL);
            if (v94) {
              uint64_t v95 = (uint64_t *)*v95;
            }
            sub_1881E08((uint64_t *)(v16 + 48), (long long *)&__dst, v95);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__dst.__r_.__value_.__l.__data_);
              char v96 = *(_DWORD **)(a6 + 224);
              if (!v96) {
                goto LABEL_280;
              }
            }
            else
            {
              char v96 = *(_DWORD **)(a6 + 224);
              if (!v96) {
                goto LABEL_280;
              }
            }
            uint64_t v173 = *(int *)(a6 + 216);
            if ((int)v173 < *v96)
            {
              *(_DWORD *)(a6 + 216) = v173 + 1;
              uint64_t v156 = *(void *)&v96[2 * v173 + 2];
              goto LABEL_281;
            }
LABEL_280:
            sub_13D96E0(*v205);
            uint64_t v156 = sub_188CDC8((uint64_t)v205, v174);
LABEL_281:
            unsigned int v175 = sub_63A824(v211);
            std::to_string(&__dst, v175);
            *(_DWORD *)(v156 + 16) |= 2u;
            uint64_t v176 = *(void *)(v156 + 8);
            long long v177 = (uint64_t *)(v176 & 0xFFFFFFFFFFFFFFFCLL);
            if (v176) {
              long long v177 = (uint64_t *)*v177;
            }
            sub_1881E08((uint64_t *)(v156 + 32), (long long *)&__dst, v177);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__dst.__r_.__value_.__l.__data_);
            }
            double v178 = *(double *)(v211 + 88) / 3.6;
            *(_DWORD *)(v156 + 16) |= 0x80u;
            *(double *)(v156 + 72) = v178;
            int v179 = *((char *)a3 + 23);
            if (v179 >= 0) {
              size_t v180 = *((unsigned __int8 *)a3 + 23);
            }
            else {
              size_t v180 = (size_t)a3[1];
            }
            int v181 = byte_25F3C8F;
            if (byte_25F3C8F >= 0) {
              size_t v182 = byte_25F3C8F;
            }
            else {
              size_t v182 = qword_25F3C80;
            }
            unint64_t v183 = v182 + v180;
            if (v182 + v180 > 0x7FFFFFFFFFFFFFF7) {
LABEL_329:
            }
              sub_188D690();
            if (v183 > 0x16)
            {
              uint64_t v185 = (v183 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v183 | 7) != 0x17) {
                uint64_t v185 = v183 | 7;
              }
              uint64_t v186 = v185 + 1;
              long long v184 = (std::string *)operator new(v185 + 1);
              unint64_t v187 = v186 | 0x8000000000000000;
              a6 = v210;
              __dst.__r_.__value_.__l.__size_ = v182 + v180;
              __dst.__r_.__value_.__r.__words[2] = v187;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v184;
              if (!v180)
              {
LABEL_302:
                int v189 = (char *)v184 + v180;
                if (v182)
                {
                  if (v181 >= 0) {
                    size_t v190 = &qword_25F3C78;
                  }
                  else {
                    size_t v190 = (uint64_t *)qword_25F3C78;
                  }
                  memmove(v189, v190, v182);
                }
                v189[v182] = 0;
                *(_DWORD *)(v156 + 16) |= 1u;
                uint64_t v191 = *(void *)(v156 + 8);
                long long v192 = (uint64_t *)(v191 & 0xFFFFFFFFFFFFFFFCLL);
                if (v191) {
                  long long v192 = (uint64_t *)*v192;
                }
                sub_1881E08((uint64_t *)(v156 + 24), (long long *)&__dst, v192);
                uint64_t v10 = v208;
                a5 = v209;
                uint64_t v9 = v211;
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__dst.__r_.__value_.__l.__data_);
                }
                int v193 = *(_DWORD *)(v156 + 16);
                *(_DWORD *)(v156 + 64) = 1;
                *(_DWORD *)(v156 + 16) = v193 | 0x24;
                uint64_t v12 = *(void *)(v156 + 40);
                if (v12) {
                  goto LABEL_5;
                }
LABEL_312:
                uint64_t v194 = *(void *)(v156 + 8);
                uint64_t v195 = (void *)(v194 & 0xFFFFFFFFFFFFFFFCLL);
                if (v194) {
                  uint64_t v195 = (void *)*v195;
                }
                uint64_t v12 = sub_15C1918((uint64_t)v195);
                *(void *)(v156 + 40) = v12;
LABEL_5:
                sub_E112BC(v207, v12, v13);
                goto LABEL_6;
              }
            }
            else
            {
              memset(&__dst, 0, sizeof(__dst));
              long long v184 = &__dst;
              *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v182 + v180;
              if (!v180) {
                goto LABEL_302;
              }
            }
            if (v179 >= 0) {
              uint64_t v188 = a3;
            }
            else {
              uint64_t v188 = *a3;
            }
            memmove(v184, v188, v180);
            goto LABEL_302;
          default:
            goto LABEL_6;
        }
      }
    }
  }
}

void sub_E27EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_E27F40(uint64_t a1, void *a2)
{
  std::string __p = operator new(0x20uLL);
  long long v11 = xmmword_20B9800;
  strcpy((char *)__p, "add_traffic_lights_to_response");
  BOOL v4 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)a1 = v4;
  std::string __p = operator new(0x20uLL);
  long long v11 = xmmword_20B5EB0;
  strcpy((char *)__p, "add_stop_signs_to_response");
  BOOL v5 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 1) = v5;
  std::string __p = operator new(0x20uLL);
  long long v11 = xmmword_20B8890;
  strcpy((char *)__p, "add_speed_cameras_to_response");
  BOOL v6 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 2) = v6;
  std::string __p = operator new(0x30uLL);
  long long v11 = xmmword_20B9A80;
  strcpy((char *)__p, "centerline_geometry_simplification_tolerance_m");
  double v7 = sub_5C7E8(a2, (uint64_t)&__p);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p);
  }
  *(double *)(a1 + 8) = v7;
  std::string __p = operator new(0x20uLL);
  long long v11 = xmmword_20B9800;
  strcpy((char *)__p, "add_debug_geometry_to_response");
  BOOL v8 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 16) = v8;
  return a1;
}

void sub_E28138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_E28164(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 72)
  {
    uint64_t v5 = *(void *)(i - 32);
    if (v5)
    {
      uint64_t v6 = *(void *)(i - 24);
      double v7 = *(void **)(i - 32);
      if (v6 != v5)
      {
        do
        {
          uint64_t v9 = *(void *)(v6 - 48);
          if (v9)
          {
            uint64_t v10 = *(void *)(v6 - 40);
            BOOL v8 = *(void **)(v6 - 48);
            if (v10 != v9)
            {
              uint64_t v11 = *(void *)(v6 - 40);
              do
              {
                double v13 = *(void **)(v11 - 24);
                v11 -= 24;
                uint64_t v12 = v13;
                if (v13)
                {
                  *(void *)(v10 - 16) = v12;
                  operator delete(v12);
                }
                uint64_t v10 = v11;
              }
              while (v11 != v9);
              BOOL v8 = *(void **)(v6 - 48);
            }
            *(void *)(v6 - 40) = v9;
            operator delete(v8);
          }
          v6 -= 72;
        }
        while (v6 != v5);
        double v7 = *(void **)(i - 32);
      }
      *(void *)(i - 24) = v5;
      operator delete(v7);
    }
    uint64_t v14 = *(void **)(i - 56);
    if (v14)
    {
      *(void *)(i - 48) = v14;
      operator delete(v14);
    }
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t sub_E28250(void *a1, unint64_t a2, void *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8 = a2;
  if (a1)
  {
    if (a3)
    {
      while (1)
      {
        unint64_t v10 = sub_46C760(a1);
        unint64_t v11 = sub_46C760(a3);
        if (v8 >= v10 || a4 >= v11)
        {
          if (v8 < v10 == a4 < v11) {
            return 0;
          }
        }
        else
        {
          uint64_t v12 = sub_46C8EC(a1, v8);
          if (v12 == sub_46C8EC(a3, a4)) {
            return 0;
          }
        }
        uint64_t v13 = sub_46C8EC(a1, v8);
        uint64_t v14 = (int *)sub_2D5D58(*(void *)(a5 + 8), *(unsigned int *)(v13 + 32) | ((unint64_t)*(unsigned __int16 *)(v13 + 36) << 32));
        uint64_t v15 = (unsigned __int16 *)((char *)v14 - *v14);
        if (*v15 >= 0xBu)
        {
          uint64_t v16 = v15[5];
          if (v16)
          {
            if ((*((unsigned char *)v14 + v16 + 3) & 2) != 0) {
              break;
            }
          }
        }
        ++v8;
      }
    }
    else
    {
      if (a2 >= sub_46C760(a1)) {
        return 0;
      }
      while (1)
      {
        uint64_t v17 = sub_46C8EC(a1, v8);
        BOOL v18 = (int *)sub_2D5D58(*(void *)(a5 + 8), *(unsigned int *)(v17 + 32) | ((unint64_t)*(unsigned __int16 *)(v17 + 36) << 32));
        BOOL v19 = (unsigned __int16 *)((char *)v18 - *v18);
        if (*v19 >= 0xBu)
        {
          uint64_t v20 = v19[5];
          if (v20)
          {
            if ((*((unsigned char *)v18 + v20 + 3) & 2) != 0) {
              break;
            }
          }
        }
        if (++v8 >= sub_46C760(a1)) {
          return 0;
        }
      }
    }
  }
  else
  {
    if (!a3 || a4 >= sub_46C760(a3)) {
      return 0;
    }
    while (1)
    {
      uint64_t v22 = sub_46C8EC(0, v8);
      size_t v23 = (int *)sub_2D5D58(*(void *)(a5 + 8), *(unsigned int *)(v22 + 32) | ((unint64_t)*(unsigned __int16 *)(v22 + 36) << 32));
      int v24 = (unsigned __int16 *)((char *)v23 - *v23);
      if (*v24 >= 0xBu)
      {
        uint64_t v25 = v24[5];
        if (v25)
        {
          if ((*((unsigned char *)v23 + v25 + 3) & 2) != 0) {
            break;
          }
        }
      }
      ++v8;
      if (a4 >= sub_46C760(a3)) {
        return 0;
      }
    }
  }
  return 1;
}

uint64_t sub_E28458(int64x2_t *a1, long long *a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * ((a1->i64[1] - a1->i64[0]) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL) {
    sub_2E00();
  }
  if (0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  }
  if (0x8E38E38E38E38E39 * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v6 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v6 = v4;
  }
  int v21 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x38E38E38E38E38ELL) {
      sub_188D718();
    }
    double v7 = (char *)operator new(72 * v6);
  }
  else
  {
    double v7 = 0;
  }
  std::string __p = v7;
  v19.i64[0] = (uint64_t)&v7[72 * v3];
  uint64_t v20 = &v7[72 * v6];
  sub_E2863C((uint64_t)a1[1].i64, v19.i64[0], a2);
  uint64_t v8 = v19.i64[0];
  uint64_t v9 = v19.i64[0] + 72;
  v19.i64[1] = v19.i64[0] + 72;
  uint64_t v11 = a1->i64[0];
  unint64_t v10 = a1->u64[1];
  if (v10 == a1->i64[0])
  {
    int64x2_t v15 = vdupq_n_s64(v10);
  }
  else
  {
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = v8 + v12;
      uint64_t v14 = v10 + v12;
      *(_OWORD *)(v13 - 72) = *(_OWORD *)(v10 + v12 - 72);
      *(void *)(v13 - 48) = 0;
      *(void *)(v13 - 40) = 0;
      *(void *)(v13 - 56) = 0;
      *(_OWORD *)(v13 - 56) = *(_OWORD *)(v10 + v12 - 56);
      *(void *)(v13 - 40) = *(void *)(v10 + v12 - 40);
      *(void *)(v14 - 56) = 0;
      *(void *)(v14 - 48) = 0;
      *(void *)(v14 - 40) = 0;
      *(void *)(v13 - 32) = 0;
      *(void *)(v13 - 24) = 0;
      *(void *)(v13 - 16) = 0;
      *(_OWORD *)(v13 - 32) = *(_OWORD *)(v10 + v12 - 32);
      *(void *)(v13 - 16) = *(void *)(v10 + v12 - 16);
      *(void *)(v14 - 32) = 0;
      *(void *)(v14 - 24) = 0;
      *(void *)(v14 - 16) = 0;
      *(_DWORD *)(v13 - 8) = *(_DWORD *)(v10 + v12 - 8);
      v12 -= 72;
    }
    while (v10 + v12 != v11);
    int64x2_t v15 = *a1;
    uint64_t v9 = v19.i64[1];
    v8 += v12;
  }
  a1->i64[0] = v8;
  a1->i64[1] = v9;
  int64x2_t v19 = v15;
  uint64_t v16 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v20;
  uint64_t v20 = v16;
  std::string __p = (void *)v15.i64[0];
  sub_E28778((uint64_t)&__p, v15.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v9;
}

void sub_E28628(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_E28740((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_E2863C(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v5 = *a3;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)a2 = v5;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  double v7 = (unsigned char *)*((void *)a3 + 2);
  unint64_t v6 = (unsigned char *)*((void *)a3 + 3);
  int64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    uint64_t v9 = (char *)operator new(v8);
    *(void *)(a2 + 16) = v9;
    *(void *)(a2 + 24) = v9;
    unint64_t v10 = &v9[8 * (v8 >> 3)];
    *(void *)(a2 + 32) = v10;
    memcpy(v9, v7, v8);
    *(void *)(a2 + 24) = v10;
  }
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  uint64_t result = sub_59A3E8((void *)(a2 + 40), *((void *)a3 + 5), *((void *)a3 + 6), 0x8E38E38E38E38E39 * ((uint64_t)(*((void *)a3 + 6) - *((void *)a3 + 5)) >> 3));
  *(_DWORD *)(a2 + 64) = *((_DWORD *)a3 + 16);
  return result;
}

void sub_E28720(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_E28740(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_E28778(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 72;
    uint64_t v5 = *(void *)(i - 32);
    if (v5)
    {
      uint64_t v6 = *(void *)(i - 24);
      double v7 = *(void **)(i - 32);
      if (v6 != v5)
      {
        do
        {
          uint64_t v9 = *(void *)(v6 - 48);
          if (v9)
          {
            uint64_t v10 = *(void *)(v6 - 40);
            int64_t v8 = *(void **)(v6 - 48);
            if (v10 != v9)
            {
              uint64_t v11 = *(void *)(v6 - 40);
              do
              {
                uint64_t v13 = *(void **)(v11 - 24);
                v11 -= 24;
                uint64_t v12 = v13;
                if (v13)
                {
                  *(void *)(v10 - 16) = v12;
                  operator delete(v12);
                }
                uint64_t v10 = v11;
              }
              while (v11 != v9);
              int64_t v8 = *(void **)(v6 - 48);
            }
            *(void *)(v6 - 40) = v9;
            operator delete(v8);
          }
          v6 -= 72;
        }
        while (v6 != v5);
        double v7 = *(void **)(i - 32);
      }
      *(void *)(i - 24) = v5;
      operator delete(v7);
    }
    uint64_t v14 = *(void **)(i - 56);
    if (v14)
    {
      *(void *)(i - 48) = v14;
      operator delete(v14);
    }
  }
}

uint64_t *sub_E2886C(void *a1, uint64_t a2)
{
  int v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_B128((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    uint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        int v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          uint64_t result = 0;
          uint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        uint64_t result = 0;
        uint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t *sub_E28A9C(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_B128((uint64_t)v45, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    char v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          unint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v15[1];
            if (v22 == v11)
            {
              uint64_t v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v24 = v15[3];
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            uint64_t v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          uint64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  unint64_t v26 = operator new(0x30uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  char v46 = 0;
  *unint64_t v26 = 0;
  v26[1] = v11;
  std::string::size_type v27 = v26 + 2;
  int v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_4200(v27, *(void **)v28, *((void *)v28 + 1));
  }
  else
  {
    long long v29 = *v28;
    v26[4] = *((void *)v28 + 2);
    *(_OWORD *)std::string::size_type v27 = v29;
  }
  v26[5] = 0;
  char v46 = 1;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    BOOL v34 = 1;
    if (v12 >= 3) {
      BOOL v34 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v12);
    unint64_t v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v38) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v38)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v38 < 3uLL || (uint8x8_t v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime < *(void *)&v38) {
LABEL_68:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        unint64_t v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        std::string v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        unint64_t v32 = *(void **)(*(void *)a1 + 8 * v11);
        std::string v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v42 & v11;
      unint64_t v32 = *(void **)(*(void *)a1 + 8 * (v42 & v11));
      std::string v33 = (void *)v45[0];
      if (v32) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *std::string v33 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v45[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v45[0])
    {
      unint64_t v43 = *(void *)(*(void *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12) {
          v43 %= v12;
        }
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  unint64_t v32 = *(void **)(*(void *)a1 + 8 * v4);
  std::string v33 = (void *)v45[0];
  if (!v32) {
    goto LABEL_81;
  }
LABEL_57:
  *std::string v33 = *v32;
  *unint64_t v32 = v45[0];
LABEL_92:
  uint64_t v15 = (uint64_t *)v45[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_E28EE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E28EF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_E28F10(void *a1, unint64_t a2, void *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8 = a2;
  if (a1)
  {
    if (a3)
    {
      while (1)
      {
        unint64_t v10 = sub_470ADC(a1);
        unint64_t v11 = sub_470ADC(a3);
        if (v8 >= v10 || a4 >= v11)
        {
          if (v8 < v10 == a4 < v11) {
            return 0;
          }
        }
        else
        {
          uint64_t v12 = sub_470B40(a1, v8);
          if (v12 == sub_470B40(a3, a4)) {
            return 0;
          }
        }
        uint8x8_t v13 = (unsigned int *)sub_470B40(a1, v8);
        char v14 = (int *)sub_2D5D58(*(void *)(a5 + 8), *v13 | ((unint64_t)(v13[1] & 0x1FFFFFFF) << 32));
        uint64_t v15 = (unsigned __int16 *)((char *)v14 - *v14);
        if (*v15 >= 0xBu)
        {
          uint64_t v16 = v15[5];
          if (v16)
          {
            if ((*((unsigned char *)v14 + v16 + 3) & 2) != 0) {
              break;
            }
          }
        }
        ++v8;
      }
    }
    else
    {
      if (a2 >= sub_470ADC(a1)) {
        return 0;
      }
      while (1)
      {
        uint64_t v17 = (unsigned int *)sub_470B40(a1, v8);
        unint64_t v18 = (int *)sub_2D5D58(*(void *)(a5 + 8), *v17 | ((unint64_t)(v17[1] & 0x1FFFFFFF) << 32));
        uint64_t v19 = (unsigned __int16 *)((char *)v18 - *v18);
        if (*v19 >= 0xBu)
        {
          uint64_t v20 = v19[5];
          if (v20)
          {
            if ((*((unsigned char *)v18 + v20 + 3) & 2) != 0) {
              break;
            }
          }
        }
        if (++v8 >= sub_470ADC(a1)) {
          return 0;
        }
      }
    }
  }
  else
  {
    if (!a3 || a4 >= sub_470ADC(a3)) {
      return 0;
    }
    while (1)
    {
      uint64_t v22 = (unsigned int *)sub_470B40(0, v8);
      uint64_t v23 = (int *)sub_2D5D58(*(void *)(a5 + 8), *v22 | ((unint64_t)(v22[1] & 0x1FFFFFFF) << 32));
      uint64_t v24 = (unsigned __int16 *)((char *)v23 - *v23);
      if (*v24 >= 0xBu)
      {
        uint64_t v25 = v24[5];
        if (v25)
        {
          if ((*((unsigned char *)v23 + v25 + 3) & 2) != 0) {
            break;
          }
        }
      }
      ++v8;
      if (a4 >= sub_470ADC(a3)) {
        return 0;
      }
    }
  }
  return 1;
}

double sub_E29118()
{
  byte_25F3B57 = 1;
  word_25F3B40 = 65;
  byte_25F3B6F = 1;
  word_25F3B58 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25F3C90 = 0u;
  *(_OWORD *)&qword_25F3CA0 = 0u;
  dword_25F3CB0 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25F3C90, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25F3C90, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25F3C90, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25F3C90, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25F3B87 = 8;
  strcpy((char *)&qword_25F3B70, "any_mode");
  byte_25F3B9F = 7;
  strcpy((char *)&dword_25F3B88, "cycling");
  byte_25F3BB7 = 7;
  strcpy((char *)&dword_25F3BA0, "driving");
  byte_25F3BCF = 7;
  strcpy((char *)&dword_25F3BB8, "walking");
  qword_25F3BD8 = 0;
  qword_25F3BE0 = 0;
  qword_25F3BD0 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25F3BD0 = (uint64_t)v0;
  qword_25F3BD8 = (uint64_t)(v0 + 9);
  qword_25F3BE0 = (uint64_t)(v0 + 9);
  qword_25F3BE8 = 0;
  qword_25F3BF0 = 0;
  qword_25F3BF8 = 0;
  uint64_t v1 = operator new(9uLL);
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25F3BE8 = (uint64_t)v1;
  qword_25F3BF0 = (uint64_t)(v1 + 9);
  strcpy(&byte_25F3C47, "\t_RedLightCamera");
  strcpy((char *)&qword_25F3C30, "_StopSign");
  byte_25F3C2F = 13;
  strcpy(&byte_25F3C17, "\t_TrafficLight");
  qword_25F3BF8 = (uint64_t)(v1 + 9);
  strcpy((char *)&qword_25F3C00, "_OffRoute");
  byte_25F3C5F = 15;
  qword_25F3C60 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)&qword_25F3C68 = xmmword_20B91C0;
  strcpy((char *)qword_25F3C60, "_InstantSpeedLimitCamera");
  qword_25F3C78 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)&qword_25F3C80 = xmmword_20B9800;
  strcpy((char *)qword_25F3C78, "_InstantSpeedLimitCameraShield");
  return *(double *)"imitCameraShield";
}

void sub_E294DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25F3CA0) {
    sub_20B0BE8((void **)qword_25F3CA0);
  }
  size_t v37 = (void *)xmmword_25F3C90;
  *(void *)&xmmword_25F3C90 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_E2957C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  sub_725D0((uint64_t)v31);
  sub_162C594(a3, 0, 0);
  if (*(unsigned char *)(a1 + 1178))
  {
    sub_E3C834((uint64_t)v25, *(void **)(a1 + 1320), a1 + 1144, *(unsigned __int8 *)(a1 + 2184));
    memset(__p, 0, sizeof(__p));
    unint64_t v6 = *(uint64_t ***)a1;
    if (*(void *)(a1 + 2160)) {
      char v7 = (void **)(sub_CBE2A4((uint64_t *)(a1 + 2160)) + 256);
    }
    else {
      char v7 = __p;
    }
    sub_E3C838((uint64_t)v25, (uint64_t *)v6, (int64x2_t *)v7, a1 + 32, (uint64_t)&v22);
    if (&v22 != a3)
    {
      uint64_t v10 = a3[1];
      if ((v10 & 2) != 0)
      {
        int v11 = 0;
      }
      else
      {
        int v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
        if (v10) {
          int v11 = (void *)*v11;
        }
      }
      if ((v23 & 2) != 0)
      {
        uint64_t v12 = 0;
      }
      else
      {
        uint64_t v12 = (void *)(v23 & 0xFFFFFFFFFFFFFFFCLL);
        if (v23) {
          uint64_t v12 = (void *)*v12;
        }
      }
      if (v11 == v12) {
        sub_16323C4((uint64_t)a3, (uint64_t)&v22);
      }
      else {
        sub_1632068((uint64_t)a3, (uint64_t)&v22);
      }
    }
    sub_162D64C(&v22);
    *(void *)(a2 + 16) = vcvtad_u64_f64(sub_72688((uint64_t)v31));
    if (__p[0])
    {
      sub_C5C1FC((uint64_t)__p, (uint64_t)__p[0]);
      operator delete(__p[0]);
    }
    sub_423E54((uint64_t)&v30);
    std::string::size_type v27 = off_24396A0;
    char v13 = &v29;
    do
    {
      int v14 = v13 - 6;
      uint64_t v15 = *(v13 - 3);
      if (v15)
      {
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        unint64_t v18 = v13 - 5;
        do
        {
          if ((*(char *)(*v14 + v17) & 0x80000000) == 0)
          {
            uint64_t v19 = *v18 + v16;
            uint64_t v20 = *(void **)(v19 + 8);
            if (v20)
            {
              *(void *)(v19 + 16) = v20;
              operator delete(v20);
              uint64_t v15 = *(v13 - 3);
            }
          }
          ++v17;
          v16 += 32;
        }
        while (v17 != v15);
        operator delete((void *)*(v13 - 6));
        *(v13 - 6) = (uint64_t)&unk_20E1710;
        *(v13 - 1) = 0;
        *(v13 - 4) = 0;
        *(v13 - 3) = 0;
        *unint64_t v18 = 0;
      }
      v13 -= 6;
    }
    while (v14 != &v28);
  }
  else
  {
    sub_E16418(&v22, *(void **)(a1 + 1320));
    sub_E1641C(&v22, *(uint64_t ***)a1, a1 + 1144, (uint64_t *)(a1 + 1120), (uint64_t)v25);
    if (v25 != (unsigned char *)a3)
    {
      uint64_t v8 = a3[1];
      if ((v8 & 2) != 0)
      {
        unint64_t v9 = 0;
      }
      else
      {
        unint64_t v9 = (void *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
        if (v8) {
          unint64_t v9 = (void *)*v9;
        }
      }
      if ((v26 & 2) != 0)
      {
        uint64_t v21 = 0;
      }
      else
      {
        uint64_t v21 = (void *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
        if (v26) {
          uint64_t v21 = (void *)*v21;
        }
      }
      if (v9 == v21) {
        sub_16323C4((uint64_t)a3, (uint64_t)v25);
      }
      else {
        sub_1632068((uint64_t)a3, (uint64_t)v25);
      }
    }
    sub_162D64C(v25);
    *(void *)(a2 + 8) = vcvtad_u64_f64(sub_72688((uint64_t)v31));
  }
}

void sub_E29840(_Unwind_Exception *a1)
{
  sub_162D64C(v1);
  _Unwind_Resume(a1);
}

void sub_E29860(_Unwind_Exception *a1)
{
  sub_C6B278((uint64_t *)&STACK[0x238]);
  sub_E29884((uint64_t)&STACK[0x250]);
  sub_162D64C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_E29884(uint64_t a1)
{
  sub_423E54(a1 + 1016);
  *(void *)(a1 + 104) = off_24396A0;
  uint64_t v2 = a1 + 1008;
  do
  {
    unint64_t v3 = (void *)(v2 - 48);
    uint64_t v4 = *(void *)(v2 - 24);
    if (v4)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      char v7 = (void *)(v2 - 40);
      do
      {
        if ((*(char *)(*v3 + v6) & 0x80000000) == 0)
        {
          uint64_t v8 = *v7 + v5;
          unint64_t v9 = *(void **)(v8 + 8);
          if (v9)
          {
            *(void *)(v8 + 16) = v9;
            operator delete(v9);
            uint64_t v4 = *(void *)(v2 - 24);
          }
        }
        ++v6;
        v5 += 32;
      }
      while (v6 != v4);
      operator delete(*(void **)(v2 - 48));
      *(void *)(v2 - 48) = &unk_20E1710;
      *(void *)(v2 - 8) = 0;
      *(void *)(v2 - 32) = 0;
      *(void *)(v2 - 24) = 0;
      void *v7 = 0;
    }
    v2 -= 48;
  }
  while (v3 != (void *)(a1 + 240));
  return a1;
}

void sub_E29978(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  sub_725D0((uint64_t)v31);
  sub_162C594(a3, 0, 0);
  if (*(unsigned char *)(a1 + 1178))
  {
    sub_E4580C((uint64_t)v25, *(void **)(a1 + 1320), a1 + 1144, *(unsigned __int8 *)(a1 + 2184));
    memset(__p, 0, sizeof(__p));
    uint64_t v6 = *(uint64_t ***)a1;
    if (*(void *)(a1 + 2160)) {
      char v7 = (void **)(sub_CBE2A4((uint64_t *)(a1 + 2160)) + 256);
    }
    else {
      char v7 = __p;
    }
    sub_E45810((uint64_t)v25, (uint64_t *)v6, (int64x2_t *)v7, a1 + 32, (char **)(a1 + 8), (uint64_t)&v22);
    if (&v22 != a3)
    {
      uint64_t v10 = a3[1];
      if ((v10 & 2) != 0)
      {
        int v11 = 0;
      }
      else
      {
        int v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
        if (v10) {
          int v11 = (void *)*v11;
        }
      }
      if ((v23 & 2) != 0)
      {
        uint64_t v12 = 0;
      }
      else
      {
        uint64_t v12 = (void *)(v23 & 0xFFFFFFFFFFFFFFFCLL);
        if (v23) {
          uint64_t v12 = (void *)*v12;
        }
      }
      if (v11 == v12) {
        sub_16323C4((uint64_t)a3, (uint64_t)&v22);
      }
      else {
        sub_1632068((uint64_t)a3, (uint64_t)&v22);
      }
    }
    sub_162D64C(&v22);
    *(void *)(a2 + 16) = vcvtad_u64_f64(sub_72688((uint64_t)v31));
    if (__p[0])
    {
      sub_C5C1FC((uint64_t)__p, (uint64_t)__p[0]);
      operator delete(__p[0]);
    }
    sub_423E54((uint64_t)&v30);
    std::string::size_type v27 = off_2439728;
    char v13 = &v29;
    do
    {
      int v14 = v13 - 6;
      uint64_t v15 = *(v13 - 3);
      if (v15)
      {
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        unint64_t v18 = v13 - 5;
        do
        {
          if ((*(char *)(*v14 + v17) & 0x80000000) == 0)
          {
            uint64_t v19 = *v18 + v16;
            uint64_t v20 = *(void **)(v19 + 8);
            if (v20)
            {
              *(void *)(v19 + 16) = v20;
              operator delete(v20);
              uint64_t v15 = *(v13 - 3);
            }
          }
          ++v17;
          v16 += 32;
        }
        while (v17 != v15);
        operator delete((void *)*(v13 - 6));
        *(v13 - 6) = (uint64_t)&unk_20E1710;
        *(v13 - 1) = 0;
        *(v13 - 4) = 0;
        *(v13 - 3) = 0;
        *unint64_t v18 = 0;
      }
      v13 -= 6;
    }
    while (v14 != &v28);
  }
  else
  {
    sub_E1CA10(&v22, *(void **)(a1 + 1320));
    sub_E1CA14(&v22, *(uint64_t ***)a1, a1 + 1144, (uint64_t *)(a1 + 1120), (char **)(a1 + 8), (uint64_t)v25);
    if (v25 != (unsigned char *)a3)
    {
      uint64_t v8 = a3[1];
      if ((v8 & 2) != 0)
      {
        unint64_t v9 = 0;
      }
      else
      {
        unint64_t v9 = (void *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
        if (v8) {
          unint64_t v9 = (void *)*v9;
        }
      }
      if ((v26 & 2) != 0)
      {
        uint64_t v21 = 0;
      }
      else
      {
        uint64_t v21 = (void *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
        if (v26) {
          uint64_t v21 = (void *)*v21;
        }
      }
      if (v9 == v21) {
        sub_16323C4((uint64_t)a3, (uint64_t)v25);
      }
      else {
        sub_1632068((uint64_t)a3, (uint64_t)v25);
      }
    }
    sub_162D64C(v25);
    *(void *)(a2 + 8) = vcvtad_u64_f64(sub_72688((uint64_t)v31));
  }
}

void sub_E29C3C(_Unwind_Exception *a1)
{
  sub_162D64C(v1);
  _Unwind_Resume(a1);
}

void sub_E29C5C(_Unwind_Exception *a1)
{
  sub_C6B278((uint64_t *)&STACK[0x238]);
  sub_DF31A8((uint64_t)&STACK[0x250]);
  sub_162D64C(v1);
  _Unwind_Resume(a1);
}

void sub_E29C80(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  sub_725D0((uint64_t)v31);
  sub_162C594(a3, 0, 0);
  if (*(unsigned char *)(a1 + 1178))
  {
    sub_E4DC54((uint64_t)v25, *(void **)(a1 + 1320), a1 + 1144, *(unsigned __int8 *)(a1 + 2184));
    memset(__p, 0, sizeof(__p));
    uint64_t v6 = *(uint64_t ***)a1;
    if (*(void *)(a1 + 2160)) {
      char v7 = (void **)(sub_CBE2A4((uint64_t *)(a1 + 2160)) + 256);
    }
    else {
      char v7 = __p;
    }
    sub_E4DC58((uint64_t)v25, (uint64_t *)v6, (int64x2_t *)v7, a1 + 32, (uint64_t)&v22);
    if (&v22 != a3)
    {
      uint64_t v10 = a3[1];
      if ((v10 & 2) != 0)
      {
        int v11 = 0;
      }
      else
      {
        int v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
        if (v10) {
          int v11 = (void *)*v11;
        }
      }
      if ((v23 & 2) != 0)
      {
        uint64_t v12 = 0;
      }
      else
      {
        uint64_t v12 = (void *)(v23 & 0xFFFFFFFFFFFFFFFCLL);
        if (v23) {
          uint64_t v12 = (void *)*v12;
        }
      }
      if (v11 == v12) {
        sub_16323C4((uint64_t)a3, (uint64_t)&v22);
      }
      else {
        sub_1632068((uint64_t)a3, (uint64_t)&v22);
      }
    }
    sub_162D64C(&v22);
    *(void *)(a2 + 16) = vcvtad_u64_f64(sub_72688((uint64_t)v31));
    if (__p[0])
    {
      sub_C5C1FC((uint64_t)__p, (uint64_t)__p[0]);
      operator delete(__p[0]);
    }
    sub_423E54((uint64_t)&v30);
    std::string::size_type v27 = off_24397A0;
    char v13 = &v29;
    do
    {
      int v14 = v13 - 6;
      uint64_t v15 = *(v13 - 3);
      if (v15)
      {
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        unint64_t v18 = v13 - 5;
        do
        {
          if ((*(char *)(*v14 + v17) & 0x80000000) == 0)
          {
            uint64_t v19 = *v18 + v16;
            uint64_t v20 = *(void **)(v19 + 8);
            if (v20)
            {
              *(void *)(v19 + 16) = v20;
              operator delete(v20);
              uint64_t v15 = *(v13 - 3);
            }
          }
          ++v17;
          v16 += 32;
        }
        while (v17 != v15);
        operator delete((void *)*(v13 - 6));
        *(v13 - 6) = (uint64_t)&unk_20E1710;
        *(v13 - 1) = 0;
        *(v13 - 4) = 0;
        *(v13 - 3) = 0;
        *unint64_t v18 = 0;
      }
      v13 -= 6;
    }
    while (v14 != &v28);
  }
  else
  {
    sub_E22548(&v22, *(void **)(a1 + 1320));
    sub_E2254C(&v22, *(uint64_t ***)a1, a1 + 1144, (uint64_t *)(a1 + 1120), (uint64_t)v25);
    if (v25 != (unsigned char *)a3)
    {
      uint64_t v8 = a3[1];
      if ((v8 & 2) != 0)
      {
        unint64_t v9 = 0;
      }
      else
      {
        unint64_t v9 = (void *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
        if (v8) {
          unint64_t v9 = (void *)*v9;
        }
      }
      if ((v26 & 2) != 0)
      {
        uint64_t v21 = 0;
      }
      else
      {
        uint64_t v21 = (void *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
        if (v26) {
          uint64_t v21 = (void *)*v21;
        }
      }
      if (v9 == v21) {
        sub_16323C4((uint64_t)a3, (uint64_t)v25);
      }
      else {
        sub_1632068((uint64_t)a3, (uint64_t)v25);
      }
    }
    sub_162D64C(v25);
    *(void *)(a2 + 8) = vcvtad_u64_f64(sub_72688((uint64_t)v31));
  }
}

void sub_E29F44(_Unwind_Exception *a1)
{
  sub_162D64C(v1);
  _Unwind_Resume(a1);
}

void sub_E29F64(_Unwind_Exception *a1)
{
  sub_C6B278((uint64_t *)&STACK[0x238]);
  sub_E29F88((uint64_t)&STACK[0x250]);
  sub_162D64C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_E29F88(uint64_t a1)
{
  sub_423E54(a1 + 1016);
  *(void *)(a1 + 104) = off_24397A0;
  uint64_t v2 = a1 + 1008;
  do
  {
    unint64_t v3 = (void *)(v2 - 48);
    uint64_t v4 = *(void *)(v2 - 24);
    if (v4)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      char v7 = (void *)(v2 - 40);
      do
      {
        if ((*(char *)(*v3 + v6) & 0x80000000) == 0)
        {
          uint64_t v8 = *v7 + v5;
          unint64_t v9 = *(void **)(v8 + 8);
          if (v9)
          {
            *(void *)(v8 + 16) = v9;
            operator delete(v9);
            uint64_t v4 = *(void *)(v2 - 24);
          }
        }
        ++v6;
        v5 += 32;
      }
      while (v6 != v4);
      operator delete(*(void **)(v2 - 48));
      *(void *)(v2 - 48) = &unk_20E1710;
      *(void *)(v2 - 8) = 0;
      *(void *)(v2 - 32) = 0;
      *(void *)(v2 - 24) = 0;
      void *v7 = 0;
    }
    v2 -= 48;
  }
  while (v3 != (void *)(a1 + 240));
  return a1;
}

void sub_E2A07C(uint64_t a1, uint64_t a2)
{
  uint64_t v46 = a2 + 560;
  sub_1632068(a2 + 560, a2);
  uint64_t v47 = a1;
  if (*(void *)(a1 + 2160))
  {
    uint64_t v4 = (uint64_t *)(a1 + 2160);
    uint64_t v5 = sub_1883FB0((void *)(a2 + 576), dword_254E9B0, 11, (uint64_t)&off_252C740, 0);
    *(_DWORD *)(v5 + 16) |= 8u;
    uint64_t v6 = *(void *)(v5 + 72);
    if (!v6)
    {
      uint64_t v7 = v5;
      uint64_t v8 = *(void *)(v5 + 8);
      unint64_t v9 = (void *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
      if (v8) {
        unint64_t v9 = (void *)*v9;
      }
      sub_11BEE5C((uint64_t)v9);
      uint64_t v6 = v10;
      *(void *)(v7 + 72) = v10;
    }
    uint64_t v11 = sub_CBE2A4(v4);
    sub_11B33A4(v6, v11);
    uint64_t v12 = sub_CBE2A4(v4);
    uint64_t v13 = *(void *)(v12 + 232);
    for (uint64_t i = *(void *)(v12 + 240); v13 != i; v13 += 64)
    {
      while (1)
      {
        uint64_t v17 = sub_18839F4((uint64_t **)(a2 + 576), dword_254E9D0, 11, 0, 0);
        uint64_t v18 = (uint64_t)v17;
        uint64_t v19 = (_DWORD *)v17[2];
        if (v19)
        {
          uint64_t v20 = *((int *)v17 + 2);
          if ((int)v20 < *v19) {
            break;
          }
        }
        uint64_t v15 = sub_11D045C(*v17);
        uint64_t v16 = sub_188CDC8(v18, v15);
        sub_11C7620(v16, v13);
        v13 += 64;
        if (v13 == i) {
          goto LABEL_12;
        }
      }
      *((_DWORD *)v17 + 2) = v20 + 1;
      sub_11C7620(*(void *)&v19[2 * v20 + 2], v13);
    }
LABEL_12:
    uint64_t v21 = *(void *)(a2 + 856);
    if (v21) {
      uint64_t v22 = (uint64_t *)(v21 + 8);
    }
    else {
      uint64_t v22 = 0;
    }
    uint64_t v23 = *(int *)(a2 + 848);
    if (v23)
    {
      uint64_t v24 = &v22[v23];
      do
      {
        uint64_t v25 = *v22;
        uint64_t v26 = (int64x2_t *)sub_CBE2A4(v4);
        std::string::size_type v27 = v26;
        int v28 = *(_DWORD *)(v25 + 280);
        uint64_t v30 = (char *)v26[16].i64[0];
        unint64_t v29 = v26[16].u64[1];
        if (v30 != (char *)v29)
        {
          while (*(_DWORD *)v30 != v28)
          {
            v30 += 32;
            if (v30 == (char *)v29) {
              goto LABEL_23;
            }
          }
        }
        if (v30 == (char *)v29)
        {
LABEL_23:
          if (v29 >= v26[17].i64[0])
          {
            float v31 = sub_3A6738(v26 + 16);
          }
          else
          {
            *(_DWORD *)unint64_t v29 = -1;
            *(void *)(v29 + 16) = 0;
            *(void *)(v29 + 24) = 0;
            float v31 = (char *)(v29 + 32);
            *(void *)(v29 + 8) = 0;
          }
          v27[16].i64[1] = (uint64_t)v31;
          *((_DWORD *)v31 - 8) = v28;
          uint64_t v30 = v31 - 32;
        }
        uint64_t v32 = *(unsigned int *)(v25 + 56);
        if ((int)v32 >= 1)
        {
          uint64_t v33 = 0;
          uint64_t v34 = 72 * v32;
          uint64_t v35 = 8;
          do
          {
            uint64_t v36 = *(void *)(*(void *)(v25 + 64) + v35);
            int v37 = *(_DWORD *)(v36 + 40);
            if ((v37 & 0x100) != 0)
            {
              uint64_t v38 = *((void *)v30 + 1);
              *(_DWORD *)(v36 + 40) = v37 | 0x100;
              uint64_t v39 = *(void *)(v36 + 8);
              uint8x8_t v40 = (uint64_t *)(v39 & 0xFFFFFFFFFFFFFFFCLL);
              if (v39) {
                uint8x8_t v40 = (uint64_t *)*v40;
              }
              sub_1881DF4((std::string **)(v36 + 720), (long long *)(v38 + v33 + 48), v40);
            }
            v35 += 8;
            v33 += 72;
          }
          while (v34 != v33);
        }
        ++v22;
      }
      while (v22 != v24);
    }
  }
  sub_E2A410(v47, (uint64_t)v50);
  std::string __p = operator new(0x20uLL);
  long long v49 = xmmword_20B8870;
  strcpy((char *)__p, "return_annotated_response");
  BOOL v41 = sub_29D62C(v50, (uint64_t)&__p);
  BOOL v42 = v41;
  if (SHIBYTE(v49) < 0)
  {
    operator delete(__p);
    if (!v42) {
      goto LABEL_39;
    }
    goto LABEL_38;
  }
  if (v41) {
LABEL_38:
  }
    sub_1632068(a2, v46);
LABEL_39:
  unint64_t v43 = v51;
  if (v51)
  {
    do
    {
      uint64_t v45 = *(char **)v43;
      sub_57AC8((uint64_t *)v43 + 5);
      if (v43[39] < 0) {
        operator delete(*((void **)v43 + 2));
      }
      operator delete(v43);
      unint64_t v43 = v45;
    }
    while (v45);
  }
  unint64_t v44 = v50[0];
  v50[0] = 0;
  if (v44) {
    operator delete(v44);
  }
}

void sub_E2A3D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
}

void sub_E2A410(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 1320);
  HIBYTE(v11[2]) = 21;
  strcpy((char *)v11, "ResponseBuilderModule");
  std::string __p = 0;
  unint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v4 = sub_374CDC(v3, (uint64_t)v11, (uint64_t *)&__p);
  sub_3CB2F0(v4, a2);
  uint64_t v5 = (void **)__p;
  if (__p)
  {
    uint64_t v6 = v9;
    uint64_t v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      uint64_t v7 = __p;
    }
    unint64_t v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11[2]) < 0) {
    operator delete(v11[0]);
  }
}

void sub_E2A4E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_E2A508(uint64_t a1, uint64_t a2)
{
  uint64_t v46 = a2 + 560;
  sub_1632068(a2 + 560, a2);
  uint64_t v47 = a1;
  if (*(void *)(a1 + 2160))
  {
    uint64_t v4 = (uint64_t *)(a1 + 2160);
    uint64_t v5 = sub_1883FB0((void *)(a2 + 576), dword_254E9B0, 11, (uint64_t)&off_252C740, 0);
    *(_DWORD *)(v5 + 16) |= 8u;
    uint64_t v6 = *(void *)(v5 + 72);
    if (!v6)
    {
      uint64_t v7 = v5;
      uint64_t v8 = *(void *)(v5 + 8);
      unint64_t v9 = (void *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
      if (v8) {
        unint64_t v9 = (void *)*v9;
      }
      sub_11BEE5C((uint64_t)v9);
      uint64_t v6 = v10;
      *(void *)(v7 + 72) = v10;
    }
    uint64_t v11 = sub_CBE2A4(v4);
    sub_11B33A4(v6, v11);
    uint64_t v12 = sub_CBE2A4(v4);
    uint64_t v13 = *(void *)(v12 + 232);
    for (uint64_t i = *(void *)(v12 + 240); v13 != i; v13 += 64)
    {
      while (1)
      {
        uint64_t v17 = sub_18839F4((uint64_t **)(a2 + 576), dword_254E9D0, 11, 0, 0);
        uint64_t v18 = (uint64_t)v17;
        uint64_t v19 = (_DWORD *)v17[2];
        if (v19)
        {
          uint64_t v20 = *((int *)v17 + 2);
          if ((int)v20 < *v19) {
            break;
          }
        }
        uint64_t v15 = sub_11D045C(*v17);
        uint64_t v16 = sub_188CDC8(v18, v15);
        sub_11C7620(v16, v13);
        v13 += 64;
        if (v13 == i) {
          goto LABEL_12;
        }
      }
      *((_DWORD *)v17 + 2) = v20 + 1;
      sub_11C7620(*(void *)&v19[2 * v20 + 2], v13);
    }
LABEL_12:
    uint64_t v21 = *(void *)(a2 + 856);
    if (v21) {
      uint64_t v22 = (uint64_t *)(v21 + 8);
    }
    else {
      uint64_t v22 = 0;
    }
    uint64_t v23 = *(int *)(a2 + 848);
    if (v23)
    {
      uint64_t v24 = &v22[v23];
      do
      {
        uint64_t v25 = *v22;
        uint64_t v26 = (int64x2_t *)sub_CBE2A4(v4);
        std::string::size_type v27 = v26;
        int v28 = *(_DWORD *)(v25 + 280);
        uint64_t v30 = (char *)v26[16].i64[0];
        unint64_t v29 = v26[16].u64[1];
        if (v30 != (char *)v29)
        {
          while (*(_DWORD *)v30 != v28)
          {
            v30 += 32;
            if (v30 == (char *)v29) {
              goto LABEL_23;
            }
          }
        }
        if (v30 == (char *)v29)
        {
LABEL_23:
          if (v29 >= v26[17].i64[0])
          {
            float v31 = sub_3A6738(v26 + 16);
          }
          else
          {
            *(_DWORD *)unint64_t v29 = -1;
            *(void *)(v29 + 16) = 0;
            *(void *)(v29 + 24) = 0;
            float v31 = (char *)(v29 + 32);
            *(void *)(v29 + 8) = 0;
          }
          v27[16].i64[1] = (uint64_t)v31;
          *((_DWORD *)v31 - 8) = v28;
          uint64_t v30 = v31 - 32;
        }
        uint64_t v32 = *(unsigned int *)(v25 + 56);
        if ((int)v32 >= 1)
        {
          uint64_t v33 = 0;
          uint64_t v34 = 72 * v32;
          uint64_t v35 = 8;
          do
          {
            uint64_t v36 = *(void *)(*(void *)(v25 + 64) + v35);
            int v37 = *(_DWORD *)(v36 + 40);
            if ((v37 & 0x100) != 0)
            {
              uint64_t v38 = *((void *)v30 + 1);
              *(_DWORD *)(v36 + 40) = v37 | 0x100;
              uint64_t v39 = *(void *)(v36 + 8);
              uint8x8_t v40 = (uint64_t *)(v39 & 0xFFFFFFFFFFFFFFFCLL);
              if (v39) {
                uint8x8_t v40 = (uint64_t *)*v40;
              }
              sub_1881DF4((std::string **)(v36 + 720), (long long *)(v38 + v33 + 48), v40);
            }
            v35 += 8;
            v33 += 72;
          }
          while (v34 != v33);
        }
        ++v22;
      }
      while (v22 != v24);
    }
  }
  sub_E2A89C(v47, (uint64_t)v50);
  std::string __p = operator new(0x20uLL);
  long long v49 = xmmword_20B8870;
  strcpy((char *)__p, "return_annotated_response");
  BOOL v41 = sub_29D62C(v50, (uint64_t)&__p);
  BOOL v42 = v41;
  if (SHIBYTE(v49) < 0)
  {
    operator delete(__p);
    if (!v42) {
      goto LABEL_39;
    }
    goto LABEL_38;
  }
  if (v41) {
LABEL_38:
  }
    sub_1632068(a2, v46);
LABEL_39:
  unint64_t v43 = v51;
  if (v51)
  {
    do
    {
      uint64_t v45 = *(char **)v43;
      sub_57AC8((uint64_t *)v43 + 5);
      if (v43[39] < 0) {
        operator delete(*((void **)v43 + 2));
      }
      operator delete(v43);
      unint64_t v43 = v45;
    }
    while (v45);
  }
  unint64_t v44 = v50[0];
  v50[0] = 0;
  if (v44) {
    operator delete(v44);
  }
}

void sub_E2A860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
}

void sub_E2A89C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 1320);
  HIBYTE(v11[2]) = 21;
  strcpy((char *)v11, "ResponseBuilderModule");
  std::string __p = 0;
  unint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v4 = sub_374CDC(v3, (uint64_t)v11, (uint64_t *)&__p);
  sub_3CB560(v4, a2);
  uint64_t v5 = (void **)__p;
  if (__p)
  {
    uint64_t v6 = v9;
    uint64_t v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      uint64_t v7 = __p;
    }
    unint64_t v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11[2]) < 0) {
    operator delete(v11[0]);
  }
}

void sub_E2A970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_E2A994(uint64_t a1, uint64_t a2)
{
  uint64_t v46 = a2 + 560;
  sub_1632068(a2 + 560, a2);
  uint64_t v47 = a1;
  if (*(void *)(a1 + 2160))
  {
    uint64_t v4 = (uint64_t *)(a1 + 2160);
    uint64_t v5 = sub_1883FB0((void *)(a2 + 576), dword_254E9B0, 11, (uint64_t)&off_252C740, 0);
    *(_DWORD *)(v5 + 16) |= 8u;
    uint64_t v6 = *(void *)(v5 + 72);
    if (!v6)
    {
      uint64_t v7 = v5;
      uint64_t v8 = *(void *)(v5 + 8);
      unint64_t v9 = (void *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
      if (v8) {
        unint64_t v9 = (void *)*v9;
      }
      sub_11BEE5C((uint64_t)v9);
      uint64_t v6 = v10;
      *(void *)(v7 + 72) = v10;
    }
    uint64_t v11 = sub_CBE2A4(v4);
    sub_11B33A4(v6, v11);
    uint64_t v12 = sub_CBE2A4(v4);
    uint64_t v13 = *(void *)(v12 + 232);
    for (uint64_t i = *(void *)(v12 + 240); v13 != i; v13 += 64)
    {
      while (1)
      {
        uint64_t v17 = sub_18839F4((uint64_t **)(a2 + 576), dword_254E9D0, 11, 0, 0);
        uint64_t v18 = (uint64_t)v17;
        uint64_t v19 = (_DWORD *)v17[2];
        if (v19)
        {
          uint64_t v20 = *((int *)v17 + 2);
          if ((int)v20 < *v19) {
            break;
          }
        }
        uint64_t v15 = sub_11D045C(*v17);
        uint64_t v16 = sub_188CDC8(v18, v15);
        sub_11C7620(v16, v13);
        v13 += 64;
        if (v13 == i) {
          goto LABEL_12;
        }
      }
      *((_DWORD *)v17 + 2) = v20 + 1;
      sub_11C7620(*(void *)&v19[2 * v20 + 2], v13);
    }
LABEL_12:
    uint64_t v21 = *(void *)(a2 + 856);
    if (v21) {
      uint64_t v22 = (uint64_t *)(v21 + 8);
    }
    else {
      uint64_t v22 = 0;
    }
    uint64_t v23 = *(int *)(a2 + 848);
    if (v23)
    {
      uint64_t v24 = &v22[v23];
      do
      {
        uint64_t v25 = *v22;
        uint64_t v26 = (int64x2_t *)sub_CBE2A4(v4);
        std::string::size_type v27 = v26;
        int v28 = *(_DWORD *)(v25 + 280);
        uint64_t v30 = (char *)v26[16].i64[0];
        unint64_t v29 = v26[16].u64[1];
        if (v30 != (char *)v29)
        {
          while (*(_DWORD *)v30 != v28)
          {
            v30 += 32;
            if (v30 == (char *)v29) {
              goto LABEL_23;
            }
          }
        }
        if (v30 == (char *)v29)
        {
LABEL_23:
          if (v29 >= v26[17].i64[0])
          {
            float v31 = sub_3A6738(v26 + 16);
          }
          else
          {
            *(_DWORD *)unint64_t v29 = -1;
            *(void *)(v29 + 16) = 0;
            *(void *)(v29 + 24) = 0;
            float v31 = (char *)(v29 + 32);
            *(void *)(v29 + 8) = 0;
          }
          v27[16].i64[1] = (uint64_t)v31;
          *((_DWORD *)v31 - 8) = v28;
          uint64_t v30 = v31 - 32;
        }
        uint64_t v32 = *(unsigned int *)(v25 + 56);
        if ((int)v32 >= 1)
        {
          uint64_t v33 = 0;
          uint64_t v34 = 72 * v32;
          uint64_t v35 = 8;
          do
          {
            uint64_t v36 = *(void *)(*(void *)(v25 + 64) + v35);
            int v37 = *(_DWORD *)(v36 + 40);
            if ((v37 & 0x100) != 0)
            {
              uint64_t v38 = *((void *)v30 + 1);
              *(_DWORD *)(v36 + 40) = v37 | 0x100;
              uint64_t v39 = *(void *)(v36 + 8);
              uint8x8_t v40 = (uint64_t *)(v39 & 0xFFFFFFFFFFFFFFFCLL);
              if (v39) {
                uint8x8_t v40 = (uint64_t *)*v40;
              }
              sub_1881DF4((std::string **)(v36 + 720), (long long *)(v38 + v33 + 48), v40);
            }
            v35 += 8;
            v33 += 72;
          }
          while (v34 != v33);
        }
        ++v22;
      }
      while (v22 != v24);
    }
  }
  sub_E2AD28(v47, (uint64_t)v50);
  std::string __p = operator new(0x20uLL);
  long long v49 = xmmword_20B8870;
  strcpy((char *)__p, "return_annotated_response");
  BOOL v41 = sub_29D62C(v50, (uint64_t)&__p);
  BOOL v42 = v41;
  if (SHIBYTE(v49) < 0)
  {
    operator delete(__p);
    if (!v42) {
      goto LABEL_39;
    }
    goto LABEL_38;
  }
  if (v41) {
LABEL_38:
  }
    sub_1632068(a2, v46);
LABEL_39:
  unint64_t v43 = v51;
  if (v51)
  {
    do
    {
      uint64_t v45 = *(char **)v43;
      sub_57AC8((uint64_t *)v43 + 5);
      if (v43[39] < 0) {
        operator delete(*((void **)v43 + 2));
      }
      operator delete(v43);
      unint64_t v43 = v45;
    }
    while (v45);
  }
  unint64_t v44 = v50[0];
  v50[0] = 0;
  if (v44) {
    operator delete(v44);
  }
}

void sub_E2ACEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
}

void sub_E2AD28(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 1320);
  HIBYTE(v11[2]) = 21;
  strcpy((char *)v11, "ResponseBuilderModule");
  std::string __p = 0;
  unint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v4 = sub_374CDC(v3, (uint64_t)v11, (uint64_t *)&__p);
  sub_3CB5E0(v4, a2);
  uint64_t v5 = (void **)__p;
  if (__p)
  {
    uint64_t v6 = v9;
    uint64_t v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      uint64_t v7 = __p;
    }
    unint64_t v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11[2]) < 0) {
    operator delete(v11[0]);
  }
}

void sub_E2ADFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_E2AE20(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 200);
  HIBYTE(v11[2]) = 21;
  strcpy((char *)v11, "ResponseBuilderModule");
  std::string __p = 0;
  unint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v4 = sub_374CDC(v3, (uint64_t)v11, (uint64_t *)&__p);
  sub_3CB560(v4, a2);
  uint64_t v5 = (void **)__p;
  if (__p)
  {
    uint64_t v6 = v9;
    uint64_t v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      uint64_t v7 = __p;
    }
    unint64_t v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11[2]) < 0) {
    operator delete(v11[0]);
  }
}

void sub_E2AEF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

double sub_E2AF18()
{
  byte_25F3CCF = 8;
  strcpy((char *)&qword_25F3CB8, "any_mode");
  byte_25F3CE7 = 7;
  strcpy((char *)&dword_25F3CD0, "cycling");
  byte_25F3CFF = 7;
  strcpy((char *)&dword_25F3CE8, "driving");
  byte_25F3D17 = 7;
  strcpy((char *)&dword_25F3D00, "walking");
  byte_25F3D2F = 1;
  word_25F3D18 = 65;
  byte_25F3D47 = 1;
  word_25F3D30 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25F3D78 = 0u;
  *(_OWORD *)&qword_25F3D88 = 0u;
  dword_25F3D98 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25F3D78, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25F3D78, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25F3D78, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25F3D78, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  qword_25F3D50 = 0;
  qword_25F3D58 = 0;
  qword_25F3D48 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25F3D48 = (uint64_t)v0;
  qword_25F3D50 = (uint64_t)(v0 + 9);
  qword_25F3D58 = (uint64_t)(v0 + 9);
  qword_25F3D60 = 0;
  qword_25F3D68 = 0;
  unk_25F3D70 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25F3D68 = (uint64_t)(v1 + 9);
  unk_25F3D70 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25F3D60 = (uint64_t)v1;
  return result;
}

void sub_E2B1D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25F3D88) {
    sub_20B0C2C((void **)qword_25F3D88);
  }
  int v37 = (void *)xmmword_25F3D78;
  *(void *)&xmmword_25F3D78 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_E2B274(uint64_t a1)
{
  uint64_t v2 = sub_69510();
  uint64_t v3 = (unsigned __int8 *)sub_68EA4((uint64_t)v2);
  if (sub_51D60(v3))
  {
    uint64_t v4 = sub_68EA4((uint64_t)v2);
    uint64_t v5 = *(void *)(v4 + 16);
    long long v11 = *(_OWORD *)v4;
    uint64_t v12 = v5;
  }
  else
  {
    sub_51C5C((uint64_t)&v11);
  }
  sub_51D74((uint64_t)&v11, (uint64_t)&__p);
  *(_DWORD *)(a1 + 40) |= 1u;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = (uint64_t *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
  if (v6) {
    char v7 = (uint64_t *)*v7;
  }
  sub_1881DF4((std::string **)(a1 + 376), &__p, v7);
  if (SHIBYTE(v10) < 0) {
    operator delete((void *)__p);
  }
  long long __p = 0uLL;
  uint64_t v10 = 0;
  return nullsub_1(v2);
}

void sub_E2B330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_E2B34C(uint64_t a1)
{
  uint64_t v2 = sub_69510();
  uint64_t v3 = (unsigned __int8 *)sub_68EA4((uint64_t)v2);
  if (sub_51D60(v3))
  {
    uint64_t v4 = sub_68EA4((uint64_t)v2);
    uint64_t v5 = *(void *)(v4 + 16);
    long long v11 = *(_OWORD *)v4;
    uint64_t v12 = v5;
  }
  else
  {
    sub_51C5C((uint64_t)&v11);
  }
  sub_51D74((uint64_t)&v11, (uint64_t)&__p);
  *(_DWORD *)(a1 + 40) |= 2u;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = (uint64_t *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
  if (v6) {
    char v7 = (uint64_t *)*v7;
  }
  sub_1881DF4((std::string **)(a1 + 200), &__p, v7);
  if (SHIBYTE(v10) < 0) {
    operator delete((void *)__p);
  }
  long long __p = 0uLL;
  uint64_t v10 = 0;
  return nullsub_1(v2);
}

void sub_E2B408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_E2B424(uint64_t a1, uint64_t a2)
{
  sub_487A60(a1, &__p);
  *(_DWORD *)(a2 + 40) |= 2u;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  if (v4) {
    uint64_t v5 = (uint64_t *)*v5;
  }
  sub_1881E08((uint64_t *)(a2 + 384), (long long *)&__p, v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    int v8 = (unsigned __int8 *)sub_487740(a1);
    uint64_t result = sub_51D60(v8);
    if (!result) {
      return result;
    }
  }
  else
  {
    uint64_t v6 = (unsigned __int8 *)sub_487740(a1);
    uint64_t result = sub_51D60(v6);
    if (!result) {
      return result;
    }
  }
  uint64_t v9 = sub_487740(a1);
  uint64_t v10 = v9;
  *(_DWORD *)(a2 + 40) |= 0x8000u;
  uint64_t v11 = *(void *)(a2 + 496);
  if (v11) {
    return sub_E15E68(v9, v11);
  }
  uint64_t v12 = *(void *)(a2 + 8);
  char v13 = (void *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
  if (v12) {
    char v13 = (void *)*v13;
  }
  int v14 = sub_147967C((uint64_t)v13);
  *(void *)(a2 + 496) = v14;
  return sub_E15E68(v10, (uint64_t)v14);
}

void sub_E2B524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_E2B540(uint64_t a1, uint64_t a2)
{
  sub_487A60(a1, &__p);
  *(_DWORD *)(a2 + 40) |= 1u;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  if (v4) {
    uint64_t v5 = (uint64_t *)*v5;
  }
  sub_1881E08((uint64_t *)(a2 + 192), (long long *)&__p, v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    int v8 = (unsigned __int8 *)sub_487740(a1);
    uint64_t result = sub_51D60(v8);
    if (!result) {
      return result;
    }
  }
  else
  {
    uint64_t v6 = (unsigned __int8 *)sub_487740(a1);
    uint64_t result = sub_51D60(v6);
    if (!result) {
      return result;
    }
  }
  uint64_t v9 = sub_487740(a1);
  uint64_t v10 = v9;
  *(_DWORD *)(a2 + 40) |= 0x20u;
  uint64_t v11 = *(void *)(a2 + 232);
  if (v11) {
    return sub_E15E68(v9, v11);
  }
  uint64_t v12 = *(void *)(a2 + 8);
  char v13 = (void *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
  if (v12) {
    char v13 = (void *)*v13;
  }
  int v14 = sub_147967C((uint64_t)v13);
  *(void *)(a2 + 232) = v14;
  return sub_E15E68(v10, (uint64_t)v14);
}

void sub_E2B640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_E2B65C(int a1, uint64_t a2)
{
  double v3 = (double)a1;
  *(double *)std::string::size_type v27 = (double)a1;
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 11;
  strcpy((char *)&__p, "RequestTime");
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  uint64_t v4 = sub_8FFD4(a2, (uint64_t)&__p, (uint64_t)&unk_20F06E0, (long long **)&__str);
  uint64_t v5 = (uint64_t *)(v4 + 40);
  uint64_t v6 = *((unsigned int *)v4 + 12);
  if (v6 == 1)
  {
LABEL_7:
    *(double *)uint64_t v5 = v3;
    goto LABEL_9;
  }
  if (!v6)
  {
    double v7 = *(double *)v5;
    *uint64_t v5 = 0;
    if (v7 != 0.0)
    {
      if (*(char *)(*(void *)&v7 + 23) < 0) {
        operator delete(**(void ***)&v7);
      }
      operator delete();
    }
    goto LABEL_7;
  }
  sub_3CCA68(v6, v5, (uint64_t *)v27);
LABEL_9:
  *((_DWORD *)v4 + 12) = 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  int v8 = sub_69510();
  uint64_t v9 = sub_68EAC((uint64_t)v8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(v9 + 8);
  }
  if (v10)
  {
    sub_682A0((uint64_t)v8, &v35);
    std::string __p = v35;
    *((unsigned char *)&__str.__r_.__value_.__s + 23) = 10;
    memset(&v35, 0, sizeof(v35));
    strcpy((char *)&__str, "AbBranchId");
    v27[0] = (long long *)&__str;
    uint64_t v11 = sub_8FFD4(a2, (uint64_t)&__str, (uint64_t)&unk_20F06E0, v27);
    sub_6277C((uint64_t)(v11 + 40), &__p);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__str.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_16:
        if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_17;
        }
LABEL_33:
        operator delete(v35.__r_.__value_.__l.__data_);
LABEL_17:
        uint64_t v12 = (unsigned __int8 *)sub_68EB4((uint64_t)v8);
        uint64_t v13 = sub_68EAC((uint64_t)v8);
        uint64_t v14 = v12[23];
        if ((v14 & 0x80u) == 0) {
          uint64_t v15 = v12[23];
        }
        else {
          uint64_t v15 = *((void *)v12 + 1);
        }
        uint64_t v16 = *(unsigned __int8 *)(v13 + 23);
        int v17 = (char)v16;
        if ((v16 & 0x80u) != 0) {
          uint64_t v16 = *(void *)(v13 + 8);
        }
        if (v15 == v16)
        {
          if (v17 >= 0) {
            uint64_t v18 = (unsigned __int8 *)v13;
          }
          else {
            uint64_t v18 = *(unsigned __int8 **)v13;
          }
          if ((v14 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v12, v18, *((void *)v12 + 1))) {
              goto LABEL_38;
            }
          }
          else
          {
            if (!v12[23]) {
              goto LABEL_38;
            }
            while (*v12 == *v18)
            {
              ++v12;
              ++v18;
              if (!--v14) {
                goto LABEL_38;
              }
            }
          }
        }
        sub_6879C((uint64_t)v8, &v33);
        std::string __p = v33;
        *((unsigned char *)&__str.__r_.__value_.__s + 23) = 19;
        memset(&v33, 0, sizeof(v33));
        strcpy((char *)&__str, "EffectiveAbBranchId");
        v27[0] = (long long *)&__str;
        uint64_t v19 = sub_8FFD4(a2, (uint64_t)&__str, (uint64_t)&unk_20F06E0, v27);
        sub_6277C((uint64_t)(v19 + 40), &__p);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__str.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_37:
            if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_38;
            }
LABEL_59:
            operator delete(v33.__r_.__value_.__l.__data_);
            goto LABEL_38;
          }
        }
        else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_37;
        }
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_38;
        }
        goto LABEL_59;
      }
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_16;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_33;
  }
LABEL_38:
  sub_72C80((uint64_t)&__p);
  sub_73014((uint64_t)&__p, (uint64_t)&v32);
  std::string __str = v32;
  char v28 = 11;
  memset(&v32, 0, sizeof(v32));
  strcpy((char *)v27, "CodeVersion");
  uint64_t v36 = v27;
  uint64_t v20 = sub_8FFD4(a2, (uint64_t)v27, (uint64_t)&unk_20F06E0, (long long **)&v36);
  sub_6277C((uint64_t)(v20 + 40), &__str);
  if (v28 < 0)
  {
    operator delete(v27[0]);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_40:
      if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_41;
      }
      goto LABEL_46;
    }
  }
  else if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_40;
  }
  operator delete(__str.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_41:
    if ((v31 & 0x80000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_47;
  }
LABEL_46:
  operator delete(v32.__r_.__value_.__l.__data_);
  if ((v31 & 0x80000000) == 0)
  {
LABEL_42:
    uint64_t v21 = (void *)sub_68EBC((uint64_t)v8);
    if (*v21 == v21[1]) {
      goto LABEL_50;
    }
    goto LABEL_48;
  }
LABEL_47:
  operator delete(v30);
  uint64_t v22 = (void *)sub_68EBC((uint64_t)v8);
  if (*v22 == v22[1]) {
    goto LABEL_50;
  }
LABEL_48:
  sub_68788((uint64_t)v8);
  std::string __p = v26;
  *((unsigned char *)&__str.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&__str, "InternalModes");
  v27[0] = (long long *)&__str;
  uint64_t v23 = sub_8FFD4(a2, (uint64_t)&__str, (uint64_t)&unk_20F06E0, v27);
  sub_6277C((uint64_t)(v23 + 40), &__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_50;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_50;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_50:
  sub_68774((uint64_t)v8);
  std::string __p = v25;
  *((unsigned char *)&__str.__r_.__value_.__s + 23) = 16;
  strcpy((char *)&__str, "EnvironmentModes");
  v27[0] = (long long *)&__str;
  uint64_t v24 = sub_8FFD4(a2, (uint64_t)&__str, (uint64_t)&unk_20F06E0, v27);
  sub_6277C((uint64_t)(v24 + 40), &__p);
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_54:
    operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_54;
  }
}

void sub_E2BC10(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 105) < 0) {
    operator delete(*(void **)(v1 - 128));
  }
  sub_20B0C70();
  _Unwind_Resume(a1);
}

void sub_E2BC3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a33 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_E2BD58(uint64_t a1)
{
  if (sub_37D0F8(a1)) {
    return 2;
  }
  else {
    return 1;
  }
}

void sub_E2BD88()
{
  byte_25F3DB7 = 1;
  word_25F3DA0 = 65;
  byte_25F3DCF = 1;
  word_25F3DB8 = 65;
  char v1 = 7;
  strcpy((char *)v0, "UNKNOWN");
  int v2 = 0;
  char v4 = 14;
  strcpy((char *)v3, "ROUTES_THROUGH");
  int v5 = 1;
  char v7 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v8 = 3;
  char v10 = 11;
  strcpy((char *)v9, "ROUTES_FROM");
  int v11 = 2;
  xmmword_25F3E30 = 0u;
  *(_OWORD *)&qword_25F3E40 = 0u;
  dword_25F3E50 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25F3E30, (uint64_t)v0, (uint64_t)v0);
  sub_3A6EF0((uint64_t)&xmmword_25F3E30, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25F3E30, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25F3E30, (uint64_t)v9, (uint64_t)v9);
  if (v10 < 0)
  {
    operator delete(v9[0]);
    if ((v7 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v3[0]);
      if ((v1 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v0[0]);
      goto LABEL_5;
    }
  }
  else if ((v7 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v4 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v1 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25F3DE7 = 8;
  strcpy((char *)&qword_25F3DD0, "any_mode");
  byte_25F3DFF = 7;
  strcpy((char *)&dword_25F3DE8, "cycling");
  byte_25F3E17 = 7;
  strcpy((char *)&dword_25F3E00, "driving");
  byte_25F3E2F = 7;
  strcpy((char *)&dword_25F3E18, "walking");
}

void sub_E2BFE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25F3E40) {
    sub_20B0CAC((void **)qword_25F3E40);
  }
  int v37 = (void *)xmmword_25F3E30;
  *(void *)&xmmword_25F3E30 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void *sub_E2C084@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (void *)sub_1883F34(a1 + 16, dword_254E9B0, qword_254E9B8);
  unint64_t v4 = result[6] & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v4 + 23) < 0)
  {
    uint64_t v6 = *(void **)v4;
    unint64_t v7 = *(void *)(v4 + 8);
    return sub_4200((unsigned char *)a2, v6, v7);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    *(void *)(a2 + 16) = *(void *)(v4 + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void sub_E2C100()
{
  unk_25F3E6F = 16641;
  word_25F3E58 = 65;
  byte_25F3E87 = 1;
  byte_25F3E71 = 0;
}

uint64_t sub_E2C128(uint64_t result, char a2, char a3, int a4, int a5)
{
  *(unsigned char *)uint64_t result = a2;
  *(unsigned char *)(result + 1) = a3;
  *(_DWORD *)(result + 4) = a4;
  *(_DWORD *)(result + 8) = a5;
  return result;
}

void *sub_E2C138(void *a1, void *a2, uint64_t a3)
{
  *a1 = a2;
  sub_42DBBC((uint64_t)(a1 + 1), a2);
  sub_42417C((uint64_t)(a1 + 115), a2, 100);
  a1[249] = a3;
  return a1;
}

void sub_E2C190(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = off_2439728;
  sub_20B0CF0();
  _Unwind_Resume(a1);
}

void sub_E2C1C4(uint64_t *a1, void *a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a5;
  sub_486A64(a5, 0);
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  unint64_t v80 = 0;
  unint64_t v9 = sub_646938(a2);
  if (v9)
  {
    uint64_t v55 = v5;
    unint64_t v10 = 0;
    for (uint64_t i = sub_6467E8(a2, 0); ; uint64_t i = sub_6467E8(a2, v10))
    {
      uint64_t v13 = (uint64_t *)i;
      uint64_t v14 = *(unsigned int **)(i + 1064);
      uint64_t v15 = *(unsigned int **)(i + 1072);
      uint64_t v16 = v14 + 600;
      if (v14 != v15 && v16 != v15)
      {
        unsigned int v18 = *v14;
        do
        {
          BOOL v19 = v18 >= *v16;
          if (v18 <= *v16) {
            unsigned int v18 = *v16;
          }
          if (!v19) {
            uint64_t v14 = v16;
          }
          v16 += 600;
        }
        while (v16 != v15);
      }
      unsigned int v56 = *v14;
      uint64_t v20 = *(void *)(a4 + 8);
      if (v10 >= 0x8E38E38E38E38E39 * ((*(void *)(a4 + 16) - v20) >> 3))
      {
        uint64_t v65 = 0;
        long long v63 = 0u;
        *(_OWORD *)uint64_t v64 = 0u;
        *(_OWORD *)std::string __p = 0u;
        *(_OWORD *)uint64_t v62 = 0u;
      }
      else
      {
        sub_CBE688((uint64_t)__p, v20 + 72 * v10);
      }
      sub_E2C850((uint64_t)a1, v13, (uint64_t *)__p, (uint64_t)&v66);
      uint64_t v21 = v79;
      if ((unint64_t)v79 >= v80)
      {
        uint64_t v79 = sub_E2F91C((void **)&v78, (uint64_t)&v66);
        if ((void)v76)
        {
          *((void *)&v76 + 1) = v76;
          operator delete((void *)v76);
        }
      }
      else
      {
        *(void *)uint64_t v79 = v66;
        *((void *)v21 + 1) = 0;
        *((void *)v21 + 3) = 0;
        *((void *)v21 + 4) = 0;
        *((void *)v21 + 2) = 0;
        *(_OWORD *)(v21 + 8) = *(_OWORD *)v67;
        *((void *)v21 + 3) = v68;
        v67[0] = 0;
        v67[1] = 0;
        uint64_t v68 = 0;
        *((void *)v21 + 5) = 0;
        *((void *)v21 + 6) = 0;
        *((_OWORD *)v21 + 2) = *(_OWORD *)v69;
        *((void *)v21 + 6) = v70;
        v69[0] = 0;
        v69[1] = 0;
        uint64_t v70 = 0;
        long long v22 = v71;
        *((void *)v21 + 9) = v72;
        *((void *)v21 + 10) = 0;
        *(_OWORD *)(v21 + 56) = v22;
        unint64_t v72 = 0;
        long long v71 = 0uLL;
        *((void *)v21 + 11) = 0;
        *((void *)v21 + 12) = 0;
        *((_OWORD *)v21 + 5) = *(_OWORD *)v73;
        *((void *)v21 + 12) = v74;
        v73[0] = 0;
        v73[1] = 0;
        uint64_t v74 = 0;
        *(_OWORD *)(v21 + 104) = v75;
        *((void *)v21 + 15) = 0;
        *((void *)v21 + 16) = 0;
        *((void *)v21 + 17) = 0;
        *(_OWORD *)(v21 + 120) = v76;
        *((void *)v21 + 17) = v77;
        long long v76 = 0uLL;
        uint64_t v77 = 0;
        uint64_t v79 = v21 + 144;
      }
      uint64_t v23 = (char *)v73[0];
      if (v73[0])
      {
        uint64_t v24 = (char *)v73[1];
        std::string v25 = v73[0];
        if (v73[1] != v73[0])
        {
          do
          {
            std::string v26 = (void *)*((void *)v24 - 6);
            if (v26)
            {
              *((void *)v24 - 5) = v26;
              operator delete(v26);
            }
            if (*(v24 - 57) < 0) {
              operator delete(*((void **)v24 - 10));
            }
            v24 -= 80;
          }
          while (v24 != v23);
          std::string v25 = v73[0];
        }
        v73[1] = v23;
        operator delete(v25);
      }
      if ((SHIBYTE(v72) & 0x80000000) == 0) {
        break;
      }
      operator delete((void *)v71);
      std::string::size_type v27 = v69[0];
      if (v69[0]) {
        goto LABEL_36;
      }
LABEL_37:
      if (v67[0])
      {
        v67[1] = v67[0];
        operator delete(v67[0]);
      }
      if ((SHIBYTE(v65) & 0x80000000) == 0)
      {
        char v28 = v62[1];
        if (!v62[1]) {
          goto LABEL_42;
        }
LABEL_41:
        *(void *)&long long v63 = v28;
        operator delete(v28);
        goto LABEL_42;
      }
      operator delete(v64[0]);
      char v28 = v62[1];
      if (v62[1]) {
        goto LABEL_41;
      }
LABEL_42:
      unint64_t v29 = (char *)__p[0];
      if (__p[0])
      {
        uint64_t v30 = (char *)__p[1];
        uint64_t v12 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            char v31 = (void *)*((void *)v30 - 6);
            if (v31)
            {
              *((void *)v30 - 5) = v31;
              operator delete(v31);
            }
            if (*(v30 - 57) < 0) {
              operator delete(*((void **)v30 - 10));
            }
            v30 -= 80;
          }
          while (v30 != v29);
          uint64_t v12 = __p[0];
        }
        __p[1] = v29;
        operator delete(v12);
      }
      if (++v10 == v9)
      {
        uint64_t v5 = v55;
        goto LABEL_56;
      }
    }
    std::string::size_type v27 = v69[0];
    if (!v69[0]) {
      goto LABEL_37;
    }
LABEL_36:
    v69[1] = v27;
    operator delete(v27);
    goto LABEL_37;
  }
  unsigned int v56 = 0;
LABEL_56:
  if (sub_6478D8((uint64_t)a2) == 1) {
    char v32 = *a3;
  }
  else {
    char v32 = sub_6478D8((uint64_t)a2);
  }
  char v33 = sub_E2BD58(*a1);
  uint64_t v34 = a3;
  if (sub_6478D8((uint64_t)a2) == 1) {
    char v35 = a3[1];
  }
  else {
    char v35 = v33;
  }
  uint64_t v36 = (unsigned __int8 *)sub_6477D4((uint64_t)a2);
  BOOL v37 = (*v36 | *((_DWORD *)v36 + 13)) == 0;
  int v38 = *(unsigned __int8 *)(sub_6477D4((uint64_t)a2) + 1);
  int v39 = *(_DWORD *)(sub_6477D4((uint64_t)a2) + 56);
  uint64_t v40 = sub_6477D4((uint64_t)a2);
  int v41 = v37 | 2;
  if (v38) {
    int v41 = v37;
  }
  if (v39) {
    int v42 = v41;
  }
  else {
    int v42 = v41 | 4;
  }
  BOOL v43 = *(_DWORD *)(v40 + 60) == 0;
  __p[0] = 0;
  __p[1] = 0;
  v62[0] = 0;
  int v44 = sub_6478E0((uint64_t)a2);
  uint64_t v45 = v34;
  int v46 = *((_DWORD *)v34 + 1);
  int v47 = *((_DWORD *)v45 + 2);
  uint64_t v58 = 0;
  int64_t v59 = 0;
  uint64_t v60 = 0;
  int v48 = (long long *)sub_68E9C((uint64_t)a2);
  sub_491ADC((uint64_t)&v66, v44, v32, v42 | (8 * v43), v33, v35, v46, v47, 0, (uint64_t)&v58, v48, (uint64_t *)&v78, (uint64_t)__p);
  if (v58)
  {
    int64_t v59 = v58;
    operator delete(v58);
  }
  sub_485008(v5, (uint64_t)&v66, v56);
  if ((void)v75)
  {
    *((void *)&v75 + 1) = v75;
    operator delete((void *)v75);
  }
  long long v49 = v72;
  if (v72)
  {
    unint64_t v50 = v73[0];
    unint64_t v51 = v72;
    if (v73[0] != v72)
    {
      do
        unint64_t v50 = (void *)sub_489CF4((uint64_t)v50 - 144);
      while (v50 != v49);
      unint64_t v51 = v72;
    }
    v73[0] = v49;
    operator delete(v51);
  }
  if (v68)
  {
    v69[0] = v68;
    operator delete(v68);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v52 = v78;
  if (v78)
  {
    uint64_t v53 = (uint64_t)v79;
    unint64_t v54 = v78;
    if (v79 != v78)
    {
      do
        uint64_t v53 = sub_489CF4(v53 - 144);
      while ((char *)v53 != v52);
      unint64_t v54 = v78;
    }
    uint64_t v79 = v52;
    operator delete(v54);
  }
}

void sub_E2C710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  sub_CA0BAC(&a33);
  if (!__p)
  {
    sub_489720((void **)(v33 - 112));
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  sub_489720((void **)(v33 - 112));
  _Unwind_Resume(a1);
}

void sub_E2C7D4(_Unwind_Exception *a1)
{
  sub_489720((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_E2C7E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_489CF4((uint64_t)&a33);
  sub_E2C9E8(&a23);
  sub_489720((void **)(v33 - 112));
  _Unwind_Resume(a1);
}

void sub_E2C80C(_Unwind_Exception *a1)
{
  sub_489720((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_E2C820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_E2C9E8((char **)va);
  sub_489720((void **)(v15 - 112));
  _Unwind_Resume(a1);
}

void sub_E2C83C(_Unwind_Exception *a1)
{
  sub_489720((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_E2C850(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a2[133];
  uint64_t v9 = a2[134];
  if (v8 == v9 || *(unsigned char *)(*(void *)(a1 + 1992) + 3))
  {
    uint64_t v24 = 0;
    std::string v25 = 0;
    uint64_t v26 = 0;
  }
  else
  {
    uint64_t v24 = 0;
    std::string v25 = 0;
    uint64_t v26 = 0;
    uint64_t v15 = (v9 - v8) >> 5;
    uint64_t v16 = 0x2FC962FC962FC963 * v15 - 1;
    if (0x2FC962FC962FC963 * v15 != 1)
    {
      uint64_t v17 = 0;
      uint64_t v18 = 872;
      do
      {
        v17 += *(void *)(a2[133] + v18);
        uint64_t v19 = a2[63];
        BOOL v20 = v19 < v17;
        uint64_t v21 = (void *)(v19 - v17);
        if (v20) {
          uint64_t v21 = 0;
        }
        __p[0] = v21;
        sub_29603C(&v24, __p);
        v18 += 2400;
        --v16;
      }
      while (v16);
    }
  }
  sub_E2CE9C(a1, (uint64_t)a2, (uint64_t)__p);
  uint64_t v10 = a2[1254];
  if (v10 == a2[1255])
  {
    uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v11 = sub_64F5D0((uint64_t)a2);
    uint64_t v12 = *(void *)(v10 + 8);
    uint64_t v13 = v11 - v12;
    uint64_t v14 = *(void *)(v10 + 16) - v12;
  }
  *(void *)&long long v22 = v13;
  *((void *)&v22 + 1) = v14;
  sub_4914C0(a4, a2[63], (uint64_t)&v24, (uint64_t)__p, a3, &v22, (uint64_t)(a3 + 3));
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v24)
  {
    std::string v25 = v24;
    operator delete(v24);
  }
}

void sub_E2C9B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char **sub_E2C9E8(char **a1)
{
  if ((*((char *)a1 + 71) & 0x80000000) == 0)
  {
    int v2 = a1[3];
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  operator delete(a1[6]);
  int v2 = a1[3];
  if (v2)
  {
LABEL_3:
    a1[4] = v2;
    operator delete(v2);
  }
LABEL_4:
  double v3 = *a1;
  if (*a1)
  {
    unint64_t v4 = a1[1];
    uint64_t v5 = *a1;
    if (v4 != v3)
    {
      do
      {
        uint64_t v6 = (void *)*((void *)v4 - 6);
        if (v6)
        {
          *((void *)v4 - 5) = v6;
          operator delete(v6);
        }
        if (*(v4 - 57) < 0) {
          operator delete(*((void **)v4 - 10));
        }
        v4 -= 80;
      }
      while (v4 != v3);
      uint64_t v5 = *a1;
    }
    a1[1] = v3;
    operator delete(v5);
  }
  return a1;
}

void sub_E2CA98(uint64_t *a1, uint64_t *a2, unsigned int a3, uint64_t *a4, const std::string *a5, int **a6, uint64_t a7)
{
  char v9 = 0;
  int v10 = 0x7FFFFFFF;
  int v11 = 7;
  if (a3 > 0xD)
  {
    int v12 = 0x7FFFFFFF;
    uint64_t v19 = (void *)*a2;
    uint64_t v18 = (void *)a2[1];
    if ((void *)*a2 == v18) {
      goto LABEL_39;
    }
  }
  else
  {
    int v12 = 0x7FFFFFFF;
    if (((1 << a3) & 0x3A82) != 0)
    {
      uint64_t v13 = nullsub_1(a7);
      if (*(unsigned char *)(v13 + 128))
      {
        uint64_t v14 = v13;
        int v15 = sub_491B10(v13);
        if (!*(unsigned char *)(v14 + 128)
          || (v11 = v15, char v16 = sub_491B20(v14), !*(unsigned char *)(v14 + 128))
          || (v9 = v16, int v17 = sub_40AB24(v14), !*(unsigned char *)(v14 + 128)))
        {
          exception = __cxa_allocate_exception(8uLL);
          void *exception = &off_2439078;
        }
        int v10 = v17;
        int v12 = sub_491B28(v14);
      }
      else
      {
        char v9 = 0;
      }
      sub_484EDC(a7, (uint64_t)__p);
      sub_CA0FF4(a7, (uint64_t)__p);
      sub_4BCC2C((uint64_t)__p);
    }
    uint64_t v19 = (void *)*a2;
    uint64_t v18 = (void *)a2[1];
    if ((void *)*a2 == v18) {
      goto LABEL_39;
    }
  }
  do
  {
    v41[0] = v11;
    v41[1] = v9;
    int v20 = v10;
    int v42 = v10;
    int v43 = v12;
    if (v11 == 7)
    {
      if (sub_6478D8((uint64_t)v19) == 1) {
        char v21 = 0;
      }
      else {
        char v21 = sub_6478D8((uint64_t)v19);
      }
      v41[0] = v21;
      int v20 = v42;
    }
    if (v20 == 0x7FFFFFFF)
    {
      int v22 = sub_646CE8((uint64_t)v19);
      int v23 = sub_646CE8(*a2);
      int v42 = (v22 - v23) & ~((v22 - v23) >> 31);
    }
    BOOL v24 = sub_647280((uint64_t)v19);
    if (v43 == 0x7FFFFFFF && v24)
    {
      sub_647004((uint64_t)v19, (uint64_t)__p);
      if (sub_40A45C((int *)__p)) {
        int v26 = sub_40A440(__p);
      }
      else {
        int v26 = 0x7FFFFFFF;
      }
      int v43 = v26;
    }
    int v27 = sub_6478E0((uint64_t)v19);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7380, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_24F7380))
    {
      dword_24F7360 = -1;
      qword_24F7370 = 0;
      unk_24F7378 = 0;
      qword_24F7368 = 0;
      __cxa_guard_release(&qword_24F7380);
    }
    char v28 = *a6;
    unint64_t v29 = a6[1];
    if (*a6 != v29)
    {
      while (*v28 != v27)
      {
        v28 += 8;
        if (v28 == v29)
        {
          uint64_t v30 = &dword_24F7360;
          goto LABEL_34;
        }
      }
    }
    if (v28 == v29) {
      uint64_t v30 = &dword_24F7360;
    }
    else {
      uint64_t v30 = v28;
    }
LABEL_34:
    sub_E2C1C4(a1, v19, v41, (uint64_t)v30, a7);
    v19 += 945;
  }
  while (v19 != v18);
LABEL_39:
  sub_486A64(a7, 0);
  char v31 = sub_69510();
  if (a3 <= 0xD)
  {
    if (((1 << a3) & 0x3C19) != 0)
    {
      uint64_t v32 = sub_68E9C((uint64_t)v31);
      sub_487728(a7, v32);
      sub_487758(a7, a4);
    }
    else if (((1 << a3) & 0x60) != 0)
    {
      sub_486A54(a7, 1);
    }
  }
  sub_487720(a7, a5);
  uint64_t v33 = sub_487750(a7);
  uint64_t v34 = *(unsigned __int8 *)(v33 + 23);
  if ((v34 & 0x80u) != 0) {
    uint64_t v34 = *(void *)(v33 + 8);
  }
  if (a3 == 1 || !v34)
  {
    sub_3ACCB8(*a1);
    sub_487748(a7, __p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
  }
}

void sub_E2CE6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_E2CE94(uint64_t a1, uint64_t a2)
{
  return sub_487784(a2);
}

uint64_t sub_E2CE9C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  if (!*(unsigned char *)(*(void *)(result + 1992) + 3))
  {
    sub_4279C8(result + 920, a2, 0, 0, v24);
    if (v26) {
      unint64_t v4 = (uint64_t *)(v26 + 8);
    }
    else {
      unint64_t v4 = 0;
    }
    if (v25)
    {
      uint64_t v5 = 8 * v25;
      do
      {
        uint64_t v6 = *v4;
        unint64_t v7 = &off_24F8110;
        if (*(void *)(*v4 + 32)) {
          unint64_t v7 = *(uint64_t (****)())(*v4 + 32);
        }
        HIDWORD(v8) = 1097011920;
        double v9 = (double)*((int *)v7 + 7) / 10000000.0;
        uint64_t v10 = -1;
        if (v9 <= 180.0)
        {
          double v8 = (double)*((int *)v7 + 6) / 10000000.0;
          if (v8 >= -85.0511288 && v8 <= 85.0511288 && v9 >= -180.0)
          {
            double v11 = fmax(v8, -85.0511288);
            if (v11 >= 85.0511288) {
              double v12 = 1.48442223;
            }
            else {
              double v12 = v11 * 3.14159265 / 180.0;
            }
            long double v13 = sin(v12);
            LODWORD(v14) = ((log((v13 + 1.0) / (1.0 - v13)) / -12.5663706 + 0.5) * 4294967300.0);
            if (v14 >= 0xFFFFFFFE) {
              uint64_t v14 = 4294967294;
            }
            else {
              uint64_t v14 = v14;
            }
            double v8 = (v9 + 180.0) / 360.0 * 4294967300.0;
            uint64_t v10 = v8 | (unint64_t)(v14 << 32);
          }
        }
        uint64_t v22 = v10;
        int v23 = 0x7FFFFFFF;
        LODWORD(v8) = *(_DWORD *)(v6 + 60);
        unsigned int v15 = (int)llround((double)*(unint64_t *)&v8 * 100.0) % 36000;
        if (v15 > 0xFFFF735F) {
          LOWORD(v15) = v15 - 29536;
        }
        __int16 v21 = v15;
        uint64_t v20 = *(void *)(v6 + 48);
        int v16 = *(_DWORD *)(v6 + 64);
        int v18 = *(_DWORD *)(v6 + 68);
        int v19 = v16;
        int v17 = 0;
        sub_E2F500((char **)a3, &v20, &v22, &v21, (unsigned __int8 *)&v19, &v18, &v17);
        ++v4;
        v5 -= 8;
      }
      while (v5);
    }
    return sub_1116458(v24);
  }
  return result;
}

void sub_E2D130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_1116458(va);
  double v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

void *sub_E2D154(void *a1, void *a2, uint64_t a3)
{
  *a1 = a2;
  sub_42CBF8((uint64_t)(a1 + 1), a2);
  sub_423F6C((uint64_t)(a1 + 115), a2, 100);
  a1[249] = a3;
  return a1;
}

void sub_E2D1AC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = off_24396A0;
  sub_20B0CF0();
  _Unwind_Resume(a1);
}

void sub_E2D1E0(uint64_t *a1, void *a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a5;
  sub_486A64(a5, 3);
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  unint64_t v80 = 0;
  unint64_t v9 = sub_646938(a2);
  if (v9)
  {
    uint64_t v55 = v5;
    unint64_t v10 = 0;
    for (uint64_t i = sub_6467E8(a2, 0); ; uint64_t i = sub_6467E8(a2, v10))
    {
      long double v13 = (uint64_t *)i;
      uint64_t v14 = *(unsigned int **)(i + 1064);
      unsigned int v15 = *(unsigned int **)(i + 1072);
      int v16 = v14 + 600;
      if (v14 != v15 && v16 != v15)
      {
        unsigned int v18 = *v14;
        do
        {
          BOOL v19 = v18 >= *v16;
          if (v18 <= *v16) {
            unsigned int v18 = *v16;
          }
          if (!v19) {
            uint64_t v14 = v16;
          }
          v16 += 600;
        }
        while (v16 != v15);
      }
      unsigned int v56 = *v14;
      uint64_t v20 = *(void *)(a4 + 8);
      if (v10 >= 0x8E38E38E38E38E39 * ((*(void *)(a4 + 16) - v20) >> 3))
      {
        uint64_t v65 = 0;
        long long v63 = 0u;
        *(_OWORD *)uint64_t v64 = 0u;
        *(_OWORD *)std::string __p = 0u;
        *(_OWORD *)uint64_t v62 = 0u;
      }
      else
      {
        sub_CBE688((uint64_t)__p, v20 + 72 * v10);
      }
      sub_E2D86C((uint64_t)a1, v13, (uint64_t *)__p, (uint64_t)&v66);
      __int16 v21 = v79;
      if ((unint64_t)v79 >= v80)
      {
        uint64_t v79 = sub_E2F91C((void **)&v78, (uint64_t)&v66);
        if ((void)v76)
        {
          *((void *)&v76 + 1) = v76;
          operator delete((void *)v76);
        }
      }
      else
      {
        *(void *)uint64_t v79 = v66;
        *((void *)v21 + 1) = 0;
        *((void *)v21 + 3) = 0;
        *((void *)v21 + 4) = 0;
        *((void *)v21 + 2) = 0;
        *(_OWORD *)(v21 + 8) = *(_OWORD *)v67;
        *((void *)v21 + 3) = v68;
        v67[0] = 0;
        v67[1] = 0;
        uint64_t v68 = 0;
        *((void *)v21 + 5) = 0;
        *((void *)v21 + 6) = 0;
        *((_OWORD *)v21 + 2) = *(_OWORD *)v69;
        *((void *)v21 + 6) = v70;
        v69[0] = 0;
        v69[1] = 0;
        uint64_t v70 = 0;
        long long v22 = v71;
        *((void *)v21 + 9) = v72;
        *((void *)v21 + 10) = 0;
        *(_OWORD *)(v21 + 56) = v22;
        unint64_t v72 = 0;
        long long v71 = 0uLL;
        *((void *)v21 + 11) = 0;
        *((void *)v21 + 12) = 0;
        *((_OWORD *)v21 + 5) = *(_OWORD *)v73;
        *((void *)v21 + 12) = v74;
        v73[0] = 0;
        v73[1] = 0;
        uint64_t v74 = 0;
        *(_OWORD *)(v21 + 104) = v75;
        *((void *)v21 + 15) = 0;
        *((void *)v21 + 16) = 0;
        *((void *)v21 + 17) = 0;
        *(_OWORD *)(v21 + 120) = v76;
        *((void *)v21 + 17) = v77;
        long long v76 = 0uLL;
        uint64_t v77 = 0;
        uint64_t v79 = v21 + 144;
      }
      int v23 = (char *)v73[0];
      if (v73[0])
      {
        BOOL v24 = (char *)v73[1];
        int v25 = v73[0];
        if (v73[1] != v73[0])
        {
          do
          {
            uint64_t v26 = (void *)*((void *)v24 - 6);
            if (v26)
            {
              *((void *)v24 - 5) = v26;
              operator delete(v26);
            }
            if (*(v24 - 57) < 0) {
              operator delete(*((void **)v24 - 10));
            }
            v24 -= 80;
          }
          while (v24 != v23);
          int v25 = v73[0];
        }
        v73[1] = v23;
        operator delete(v25);
      }
      if ((SHIBYTE(v72) & 0x80000000) == 0) {
        break;
      }
      operator delete((void *)v71);
      int v27 = v69[0];
      if (v69[0]) {
        goto LABEL_36;
      }
LABEL_37:
      if (v67[0])
      {
        v67[1] = v67[0];
        operator delete(v67[0]);
      }
      if ((SHIBYTE(v65) & 0x80000000) == 0)
      {
        char v28 = v62[1];
        if (!v62[1]) {
          goto LABEL_42;
        }
LABEL_41:
        *(void *)&long long v63 = v28;
        operator delete(v28);
        goto LABEL_42;
      }
      operator delete(v64[0]);
      char v28 = v62[1];
      if (v62[1]) {
        goto LABEL_41;
      }
LABEL_42:
      unint64_t v29 = (char *)__p[0];
      if (__p[0])
      {
        uint64_t v30 = (char *)__p[1];
        double v12 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            char v31 = (void *)*((void *)v30 - 6);
            if (v31)
            {
              *((void *)v30 - 5) = v31;
              operator delete(v31);
            }
            if (*(v30 - 57) < 0) {
              operator delete(*((void **)v30 - 10));
            }
            v30 -= 80;
          }
          while (v30 != v29);
          double v12 = __p[0];
        }
        __p[1] = v29;
        operator delete(v12);
      }
      if (++v10 == v9)
      {
        uint64_t v5 = v55;
        goto LABEL_56;
      }
    }
    int v27 = v69[0];
    if (!v69[0]) {
      goto LABEL_37;
    }
LABEL_36:
    v69[1] = v27;
    operator delete(v27);
    goto LABEL_37;
  }
  unsigned int v56 = 0;
LABEL_56:
  if (sub_6478D8((uint64_t)a2) == 1) {
    char v32 = *a3;
  }
  else {
    char v32 = sub_6478D8((uint64_t)a2);
  }
  char v33 = sub_E2BD58(*a1);
  uint64_t v34 = a3;
  if (sub_6478D8((uint64_t)a2) == 1) {
    char v35 = a3[1];
  }
  else {
    char v35 = v33;
  }
  uint64_t v36 = (unsigned __int8 *)sub_6477D4((uint64_t)a2);
  BOOL v37 = (*v36 | *((_DWORD *)v36 + 13)) == 0;
  int v38 = *(unsigned __int8 *)(sub_6477D4((uint64_t)a2) + 1);
  int v39 = *(_DWORD *)(sub_6477D4((uint64_t)a2) + 56);
  uint64_t v40 = sub_6477D4((uint64_t)a2);
  int v41 = v37 | 2;
  if (v38) {
    int v41 = v37;
  }
  if (v39) {
    int v42 = v41;
  }
  else {
    int v42 = v41 | 4;
  }
  BOOL v43 = *(_DWORD *)(v40 + 60) == 0;
  __p[0] = 0;
  __p[1] = 0;
  v62[0] = 0;
  int v44 = sub_6478E0((uint64_t)a2);
  uint64_t v45 = v34;
  int v46 = *((_DWORD *)v34 + 1);
  int v47 = *((_DWORD *)v45 + 2);
  uint64_t v58 = 0;
  int64_t v59 = 0;
  uint64_t v60 = 0;
  int v48 = (long long *)sub_68E9C((uint64_t)a2);
  sub_491ADC((uint64_t)&v66, v44, v32, v42 | (8 * v43), v33, v35, v46, v47, 0, (uint64_t)&v58, v48, (uint64_t *)&v78, (uint64_t)__p);
  if (v58)
  {
    int64_t v59 = v58;
    operator delete(v58);
  }
  sub_485008(v5, (uint64_t)&v66, v56);
  if ((void)v75)
  {
    *((void *)&v75 + 1) = v75;
    operator delete((void *)v75);
  }
  long long v49 = v72;
  if (v72)
  {
    unint64_t v50 = v73[0];
    unint64_t v51 = v72;
    if (v73[0] != v72)
    {
      do
        unint64_t v50 = (void *)sub_489CF4((uint64_t)v50 - 144);
      while (v50 != v49);
      unint64_t v51 = v72;
    }
    v73[0] = v49;
    operator delete(v51);
  }
  if (v68)
  {
    v69[0] = v68;
    operator delete(v68);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v52 = v78;
  if (v78)
  {
    uint64_t v53 = (uint64_t)v79;
    unint64_t v54 = v78;
    if (v79 != v78)
    {
      do
        uint64_t v53 = sub_489CF4(v53 - 144);
      while ((char *)v53 != v52);
      unint64_t v54 = v78;
    }
    uint64_t v79 = v52;
    operator delete(v54);
  }
}

void sub_E2D72C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  sub_CA0BAC(&a33);
  if (!__p)
  {
    sub_489720((void **)(v33 - 112));
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  sub_489720((void **)(v33 - 112));
  _Unwind_Resume(a1);
}

void sub_E2D7F0(_Unwind_Exception *a1)
{
  sub_489720((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_E2D804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_489CF4((uint64_t)&a33);
  sub_E2C9E8(&a23);
  sub_489720((void **)(v33 - 112));
  _Unwind_Resume(a1);
}

void sub_E2D828(_Unwind_Exception *a1)
{
  sub_489720((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_E2D83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_E2C9E8((char **)va);
  sub_489720((void **)(v15 - 112));
  _Unwind_Resume(a1);
}

void sub_E2D858(_Unwind_Exception *a1)
{
  sub_489720((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_E2D86C(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a2[133];
  uint64_t v9 = a2[134];
  if (v8 == v9 || *(unsigned char *)(*(void *)(a1 + 1992) + 3))
  {
    BOOL v24 = 0;
    int v25 = 0;
    uint64_t v26 = 0;
  }
  else
  {
    BOOL v24 = 0;
    int v25 = 0;
    uint64_t v26 = 0;
    uint64_t v15 = (v9 - v8) >> 5;
    uint64_t v16 = 0x2FC962FC962FC963 * v15 - 1;
    if (0x2FC962FC962FC963 * v15 != 1)
    {
      uint64_t v17 = 0;
      uint64_t v18 = 872;
      do
      {
        v17 += *(void *)(a2[133] + v18);
        uint64_t v19 = a2[63];
        BOOL v20 = v19 < v17;
        __int16 v21 = (void *)(v19 - v17);
        if (v20) {
          __int16 v21 = 0;
        }
        __p[0] = v21;
        sub_29603C(&v24, __p);
        v18 += 2400;
        --v16;
      }
      while (v16);
    }
  }
  sub_E2DD80(a1, (uint64_t)a2, (uint64_t)__p);
  uint64_t v10 = a2[1254];
  if (v10 == a2[1255])
  {
    uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v11 = sub_64F5D0((uint64_t)a2);
    uint64_t v12 = *(void *)(v10 + 8);
    uint64_t v13 = v11 - v12;
    uint64_t v14 = *(void *)(v10 + 16) - v12;
  }
  *(void *)&long long v22 = v13;
  *((void *)&v22 + 1) = v14;
  sub_4914C0(a4, a2[63], (uint64_t)&v24, (uint64_t)__p, a3, &v22, (uint64_t)(a3 + 3));
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v24)
  {
    int v25 = v24;
    operator delete(v24);
  }
}

void sub_E2D9CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_E2DA04(uint64_t *a1, uint64_t *a2, unsigned int a3, uint64_t *a4, const std::string *a5, int **a6, uint64_t a7)
{
  char v9 = 0;
  int v10 = 0x7FFFFFFF;
  int v11 = 7;
  if (a3 > 0xD)
  {
    int v12 = 0x7FFFFFFF;
    uint64_t v18 = (uint64_t *)*a2;
    uint64_t v19 = (uint64_t *)a2[1];
    if ((uint64_t *)*a2 == v19) {
      goto LABEL_39;
    }
  }
  else
  {
    int v12 = 0x7FFFFFFF;
    if (((1 << a3) & 0x3A82) != 0)
    {
      uint64_t v13 = nullsub_1(a7);
      if (*(unsigned char *)(v13 + 128))
      {
        uint64_t v14 = v13;
        int v15 = sub_491B10(v13);
        if (!*(unsigned char *)(v14 + 128)
          || (v11 = v15, char v16 = sub_491B20(v14), !*(unsigned char *)(v14 + 128))
          || (v9 = v16, int v17 = sub_40AB24(v14), !*(unsigned char *)(v14 + 128)))
        {
          exception = __cxa_allocate_exception(8uLL);
          void *exception = &off_2439078;
        }
        int v10 = v17;
        int v12 = sub_491B28(v14);
      }
      else
      {
        char v9 = 0;
      }
      sub_484EDC(a7, (uint64_t)v43);
      sub_CA0FF4(a7, (uint64_t)v43);
      sub_4BCC2C((uint64_t)v43);
    }
    uint64_t v18 = (uint64_t *)*a2;
    uint64_t v19 = (uint64_t *)a2[1];
    if ((uint64_t *)*a2 == v19) {
      goto LABEL_39;
    }
  }
  do
  {
    v40[0] = v11;
    v40[1] = v9;
    int v20 = v10;
    int v41 = v10;
    int v42 = v12;
    if (v11 == 7)
    {
      if (sub_6478D8((uint64_t)v18) == 1) {
        char v21 = 0;
      }
      else {
        char v21 = sub_6478D8((uint64_t)v18);
      }
      v40[0] = v21;
      int v20 = v41;
    }
    if (v20 == 0x7FFFFFFF)
    {
      int v22 = sub_646CE8((uint64_t)v18);
      int v23 = sub_646CE8(*a2);
      int v41 = (v22 - v23) & ~((v22 - v23) >> 31);
    }
    int v24 = sub_649E28(v18);
    if (v42 == 0x7FFFFFFF) {
      int v25 = v24;
    }
    else {
      int v25 = 0;
    }
    if (v25 == 1)
    {
      sub_649BAC(v18, (uint64_t)v43);
      if (sub_40A45C(v43)) {
        int v26 = sub_40A440(v43);
      }
      else {
        int v26 = 0x7FFFFFFF;
      }
      int v42 = v26;
    }
    int v27 = sub_6478E0((uint64_t)v18);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7380, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_24F7380))
    {
      dword_24F7360 = -1;
      qword_24F7370 = 0;
      unk_24F7378 = 0;
      qword_24F7368 = 0;
      __cxa_guard_release(&qword_24F7380);
    }
    char v28 = *a6;
    unint64_t v29 = a6[1];
    if (*a6 != v29)
    {
      while (*v28 != v27)
      {
        v28 += 8;
        if (v28 == v29)
        {
          uint64_t v30 = &dword_24F7360;
          goto LABEL_34;
        }
      }
    }
    if (v28 == v29) {
      uint64_t v30 = &dword_24F7360;
    }
    else {
      uint64_t v30 = v28;
    }
LABEL_34:
    sub_E2D1E0(a1, v18, v40, (uint64_t)v30, a7);
    v18 += 945;
  }
  while (v18 != v19);
LABEL_39:
  sub_486A64(a7, 3);
  char v31 = sub_69510();
  if (a3 <= 0xD)
  {
    if (((1 << a3) & 0x3C19) != 0)
    {
      uint64_t v32 = sub_68E9C((uint64_t)v31);
      sub_487728(a7, v32);
      sub_487758(a7, a4);
    }
    else if (((1 << a3) & 0x60) != 0)
    {
      sub_486A54(a7, 1);
    }
  }
  return sub_487720(a7, a5);
}

uint64_t sub_E2DD80@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  if (!*(unsigned char *)(*(void *)(result + 1992) + 3))
  {
    sub_427998(result + 920, a2, 0, 0, v24);
    if (v26) {
      unint64_t v4 = (uint64_t *)(v26 + 8);
    }
    else {
      unint64_t v4 = 0;
    }
    if (v25)
    {
      uint64_t v5 = 8 * v25;
      do
      {
        uint64_t v6 = *v4;
        unint64_t v7 = &off_24F8110;
        if (*(void *)(*v4 + 32)) {
          unint64_t v7 = *(uint64_t (****)())(*v4 + 32);
        }
        HIDWORD(v8) = 1097011920;
        double v9 = (double)*((int *)v7 + 7) / 10000000.0;
        uint64_t v10 = -1;
        if (v9 <= 180.0)
        {
          double v8 = (double)*((int *)v7 + 6) / 10000000.0;
          if (v8 >= -85.0511288 && v8 <= 85.0511288 && v9 >= -180.0)
          {
            double v11 = fmax(v8, -85.0511288);
            if (v11 >= 85.0511288) {
              double v12 = 1.48442223;
            }
            else {
              double v12 = v11 * 3.14159265 / 180.0;
            }
            long double v13 = sin(v12);
            LODWORD(v14) = ((log((v13 + 1.0) / (1.0 - v13)) / -12.5663706 + 0.5) * 4294967300.0);
            if (v14 >= 0xFFFFFFFE) {
              uint64_t v14 = 4294967294;
            }
            else {
              uint64_t v14 = v14;
            }
            double v8 = (v9 + 180.0) / 360.0 * 4294967300.0;
            uint64_t v10 = v8 | (unint64_t)(v14 << 32);
          }
        }
        uint64_t v22 = v10;
        int v23 = 0x7FFFFFFF;
        LODWORD(v8) = *(_DWORD *)(v6 + 60);
        unsigned int v15 = (int)llround((double)*(unint64_t *)&v8 * 100.0) % 36000;
        if (v15 > 0xFFFF735F) {
          LOWORD(v15) = v15 - 29536;
        }
        __int16 v21 = v15;
        uint64_t v20 = *(void *)(v6 + 48);
        int v16 = *(_DWORD *)(v6 + 64);
        int v18 = *(_DWORD *)(v6 + 68);
        int v19 = v16;
        int v17 = 0;
        sub_E2F500((char **)a3, &v20, &v22, &v21, (unsigned __int8 *)&v19, &v18, &v17);
        ++v4;
        v5 -= 8;
      }
      while (v5);
    }
    return sub_1116458(v24);
  }
  return result;
}

void sub_E2E014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_1116458(va);
  double v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

void *sub_E2E038(void *a1, void *a2, uint64_t a3)
{
  *a1 = a2;
  sub_42EB80((uint64_t)(a1 + 1), a2);
  sub_42438C((uint64_t)(a1 + 115), a2, 100);
  a1[249] = a3;
  return a1;
}

void sub_E2E090(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = off_24397A0;
  sub_20B0CF0();
  _Unwind_Resume(a1);
}

void sub_E2E0C4(uint64_t *a1, void *a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a5;
  sub_486A64(a5, 2);
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  unint64_t v80 = 0;
  unint64_t v9 = sub_646938(a2);
  if (v9)
  {
    uint64_t v55 = v5;
    unint64_t v10 = 0;
    for (uint64_t i = sub_6467E8(a2, 0); ; uint64_t i = sub_6467E8(a2, v10))
    {
      long double v13 = (uint64_t *)i;
      uint64_t v14 = *(unsigned int **)(i + 1064);
      unsigned int v15 = *(unsigned int **)(i + 1072);
      int v16 = v14 + 600;
      if (v14 != v15 && v16 != v15)
      {
        unsigned int v18 = *v14;
        do
        {
          BOOL v19 = v18 >= *v16;
          if (v18 <= *v16) {
            unsigned int v18 = *v16;
          }
          if (!v19) {
            uint64_t v14 = v16;
          }
          v16 += 600;
        }
        while (v16 != v15);
      }
      unsigned int v56 = *v14;
      uint64_t v20 = *(void *)(a4 + 8);
      if (v10 >= 0x8E38E38E38E38E39 * ((*(void *)(a4 + 16) - v20) >> 3))
      {
        uint64_t v65 = 0;
        long long v63 = 0u;
        *(_OWORD *)uint64_t v64 = 0u;
        *(_OWORD *)std::string __p = 0u;
        *(_OWORD *)uint64_t v62 = 0u;
      }
      else
      {
        sub_CBE688((uint64_t)__p, v20 + 72 * v10);
      }
      sub_E2E750((uint64_t)a1, v13, (uint64_t *)__p, (uint64_t)&v66);
      __int16 v21 = v79;
      if ((unint64_t)v79 >= v80)
      {
        uint64_t v79 = sub_E2F91C((void **)&v78, (uint64_t)&v66);
        if ((void)v76)
        {
          *((void *)&v76 + 1) = v76;
          operator delete((void *)v76);
        }
      }
      else
      {
        *(void *)uint64_t v79 = v66;
        *((void *)v21 + 1) = 0;
        *((void *)v21 + 3) = 0;
        *((void *)v21 + 4) = 0;
        *((void *)v21 + 2) = 0;
        *(_OWORD *)(v21 + 8) = *(_OWORD *)v67;
        *((void *)v21 + 3) = v68;
        v67[0] = 0;
        v67[1] = 0;
        uint64_t v68 = 0;
        *((void *)v21 + 5) = 0;
        *((void *)v21 + 6) = 0;
        *((_OWORD *)v21 + 2) = *(_OWORD *)v69;
        *((void *)v21 + 6) = v70;
        v69[0] = 0;
        v69[1] = 0;
        uint64_t v70 = 0;
        long long v22 = v71;
        *((void *)v21 + 9) = v72;
        *((void *)v21 + 10) = 0;
        *(_OWORD *)(v21 + 56) = v22;
        unint64_t v72 = 0;
        long long v71 = 0uLL;
        *((void *)v21 + 11) = 0;
        *((void *)v21 + 12) = 0;
        *((_OWORD *)v21 + 5) = *(_OWORD *)v73;
        *((void *)v21 + 12) = v74;
        v73[0] = 0;
        v73[1] = 0;
        uint64_t v74 = 0;
        *(_OWORD *)(v21 + 104) = v75;
        *((void *)v21 + 15) = 0;
        *((void *)v21 + 16) = 0;
        *((void *)v21 + 17) = 0;
        *(_OWORD *)(v21 + 120) = v76;
        *((void *)v21 + 17) = v77;
        long long v76 = 0uLL;
        uint64_t v77 = 0;
        uint64_t v79 = v21 + 144;
      }
      int v23 = (char *)v73[0];
      if (v73[0])
      {
        int v24 = (char *)v73[1];
        int v25 = v73[0];
        if (v73[1] != v73[0])
        {
          do
          {
            uint64_t v26 = (void *)*((void *)v24 - 6);
            if (v26)
            {
              *((void *)v24 - 5) = v26;
              operator delete(v26);
            }
            if (*(v24 - 57) < 0) {
              operator delete(*((void **)v24 - 10));
            }
            v24 -= 80;
          }
          while (v24 != v23);
          int v25 = v73[0];
        }
        v73[1] = v23;
        operator delete(v25);
      }
      if ((SHIBYTE(v72) & 0x80000000) == 0) {
        break;
      }
      operator delete((void *)v71);
      int v27 = v69[0];
      if (v69[0]) {
        goto LABEL_36;
      }
LABEL_37:
      if (v67[0])
      {
        v67[1] = v67[0];
        operator delete(v67[0]);
      }
      if ((SHIBYTE(v65) & 0x80000000) == 0)
      {
        char v28 = v62[1];
        if (!v62[1]) {
          goto LABEL_42;
        }
LABEL_41:
        *(void *)&long long v63 = v28;
        operator delete(v28);
        goto LABEL_42;
      }
      operator delete(v64[0]);
      char v28 = v62[1];
      if (v62[1]) {
        goto LABEL_41;
      }
LABEL_42:
      unint64_t v29 = (char *)__p[0];
      if (__p[0])
      {
        uint64_t v30 = (char *)__p[1];
        double v12 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            char v31 = (void *)*((void *)v30 - 6);
            if (v31)
            {
              *((void *)v30 - 5) = v31;
              operator delete(v31);
            }
            if (*(v30 - 57) < 0) {
              operator delete(*((void **)v30 - 10));
            }
            v30 -= 80;
          }
          while (v30 != v29);
          double v12 = __p[0];
        }
        __p[1] = v29;
        operator delete(v12);
      }
      if (++v10 == v9)
      {
        uint64_t v5 = v55;
        goto LABEL_56;
      }
    }
    int v27 = v69[0];
    if (!v69[0]) {
      goto LABEL_37;
    }
LABEL_36:
    v69[1] = v27;
    operator delete(v27);
    goto LABEL_37;
  }
  unsigned int v56 = 0;
LABEL_56:
  if (sub_6478D8((uint64_t)a2) == 1) {
    char v32 = *a3;
  }
  else {
    char v32 = sub_6478D8((uint64_t)a2);
  }
  char v33 = sub_E2BD58(*a1);
  uint64_t v34 = a3;
  if (sub_6478D8((uint64_t)a2) == 1) {
    char v35 = a3[1];
  }
  else {
    char v35 = v33;
  }
  uint64_t v36 = (unsigned __int8 *)sub_6477D4((uint64_t)a2);
  BOOL v37 = (*v36 | *((_DWORD *)v36 + 13)) == 0;
  int v38 = *(unsigned __int8 *)(sub_6477D4((uint64_t)a2) + 1);
  int v39 = *(_DWORD *)(sub_6477D4((uint64_t)a2) + 56);
  uint64_t v40 = sub_6477D4((uint64_t)a2);
  int v41 = v37 | 2;
  if (v38) {
    int v41 = v37;
  }
  if (v39) {
    int v42 = v41;
  }
  else {
    int v42 = v41 | 4;
  }
  BOOL v43 = *(_DWORD *)(v40 + 60) == 0;
  __p[0] = 0;
  __p[1] = 0;
  v62[0] = 0;
  int v44 = sub_6478E0((uint64_t)a2);
  uint64_t v45 = v34;
  int v46 = *((_DWORD *)v34 + 1);
  int v47 = *((_DWORD *)v45 + 2);
  uint64_t v58 = 0;
  int64_t v59 = 0;
  uint64_t v60 = 0;
  int v48 = (long long *)sub_68E9C((uint64_t)a2);
  sub_491ADC((uint64_t)&v66, v44, v32, v42 | (8 * v43), v33, v35, v46, v47, 0, (uint64_t)&v58, v48, (uint64_t *)&v78, (uint64_t)__p);
  if (v58)
  {
    int64_t v59 = v58;
    operator delete(v58);
  }
  sub_485008(v5, (uint64_t)&v66, v56);
  if ((void)v75)
  {
    *((void *)&v75 + 1) = v75;
    operator delete((void *)v75);
  }
  long long v49 = v72;
  if (v72)
  {
    unint64_t v50 = v73[0];
    unint64_t v51 = v72;
    if (v73[0] != v72)
    {
      do
        unint64_t v50 = (void *)sub_489CF4((uint64_t)v50 - 144);
      while (v50 != v49);
      unint64_t v51 = v72;
    }
    v73[0] = v49;
    operator delete(v51);
  }
  if (v68)
  {
    v69[0] = v68;
    operator delete(v68);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v52 = v78;
  if (v78)
  {
    uint64_t v53 = (uint64_t)v79;
    unint64_t v54 = v78;
    if (v79 != v78)
    {
      do
        uint64_t v53 = sub_489CF4(v53 - 144);
      while ((char *)v53 != v52);
      unint64_t v54 = v78;
    }
    uint64_t v79 = v52;
    operator delete(v54);
  }
}

void sub_E2E610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  sub_CA0BAC(&a33);
  if (!__p)
  {
    sub_489720((void **)(v33 - 112));
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  sub_489720((void **)(v33 - 112));
  _Unwind_Resume(a1);
}

void sub_E2E6D4(_Unwind_Exception *a1)
{
  sub_489720((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_E2E6E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_489CF4((uint64_t)&a33);
  sub_E2C9E8(&a23);
  sub_489720((void **)(v33 - 112));
  _Unwind_Resume(a1);
}

void sub_E2E70C(_Unwind_Exception *a1)
{
  sub_489720((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_E2E720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_E2C9E8((char **)va);
  sub_489720((void **)(v15 - 112));
  _Unwind_Resume(a1);
}

void sub_E2E73C(_Unwind_Exception *a1)
{
  sub_489720((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_E2E750(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a2[133];
  uint64_t v9 = a2[134];
  if (v8 == v9 || *(unsigned char *)(*(void *)(a1 + 1992) + 3))
  {
    int v24 = 0;
    int v25 = 0;
    uint64_t v26 = 0;
  }
  else
  {
    int v24 = 0;
    int v25 = 0;
    uint64_t v26 = 0;
    uint64_t v15 = (v9 - v8) >> 5;
    uint64_t v16 = 0x2FC962FC962FC963 * v15 - 1;
    if (0x2FC962FC962FC963 * v15 != 1)
    {
      uint64_t v17 = 0;
      uint64_t v18 = 872;
      do
      {
        v17 += *(void *)(a2[133] + v18);
        uint64_t v19 = a2[63];
        BOOL v20 = v19 < v17;
        __int16 v21 = (void *)(v19 - v17);
        if (v20) {
          __int16 v21 = 0;
        }
        __p[0] = v21;
        sub_29603C(&v24, __p);
        v18 += 2400;
        --v16;
      }
      while (v16);
    }
  }
  sub_E2EC64(a1, (uint64_t)a2, (uint64_t)__p);
  uint64_t v10 = a2[1254];
  if (v10 == a2[1255])
  {
    uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v11 = sub_64F5D0((uint64_t)a2);
    uint64_t v12 = *(void *)(v10 + 8);
    uint64_t v13 = v11 - v12;
    uint64_t v14 = *(void *)(v10 + 16) - v12;
  }
  *(void *)&long long v22 = v13;
  *((void *)&v22 + 1) = v14;
  sub_4914C0(a4, a2[63], (uint64_t)&v24, (uint64_t)__p, a3, &v22, (uint64_t)(a3 + 3));
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v24)
  {
    int v25 = v24;
    operator delete(v24);
  }
}

void sub_E2E8B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_E2E8E8(uint64_t *a1, uint64_t *a2, unsigned int a3, uint64_t *a4, const std::string *a5, int **a6, uint64_t a7)
{
  char v9 = 0;
  int v10 = 0x7FFFFFFF;
  int v11 = 7;
  if (a3 > 0xD)
  {
    int v12 = 0x7FFFFFFF;
    uint64_t v18 = (uint64_t *)*a2;
    uint64_t v19 = (uint64_t *)a2[1];
    if ((uint64_t *)*a2 == v19) {
      goto LABEL_39;
    }
  }
  else
  {
    int v12 = 0x7FFFFFFF;
    if (((1 << a3) & 0x3A82) != 0)
    {
      uint64_t v13 = nullsub_1(a7);
      if (*(unsigned char *)(v13 + 128))
      {
        uint64_t v14 = v13;
        int v15 = sub_491B10(v13);
        if (!*(unsigned char *)(v14 + 128)
          || (v11 = v15, char v16 = sub_491B20(v14), !*(unsigned char *)(v14 + 128))
          || (v9 = v16, int v17 = sub_40AB24(v14), !*(unsigned char *)(v14 + 128)))
        {
          exception = __cxa_allocate_exception(8uLL);
          void *exception = &off_2439078;
        }
        int v10 = v17;
        int v12 = sub_491B28(v14);
      }
      else
      {
        char v9 = 0;
      }
      sub_484EDC(a7, (uint64_t)v43);
      sub_CA0FF4(a7, (uint64_t)v43);
      sub_4BCC2C((uint64_t)v43);
    }
    uint64_t v18 = (uint64_t *)*a2;
    uint64_t v19 = (uint64_t *)a2[1];
    if ((uint64_t *)*a2 == v19) {
      goto LABEL_39;
    }
  }
  do
  {
    v40[0] = v11;
    v40[1] = v9;
    int v20 = v10;
    int v41 = v10;
    int v42 = v12;
    if (v11 == 7)
    {
      if (sub_6478D8((uint64_t)v18) == 1) {
        char v21 = 0;
      }
      else {
        char v21 = sub_6478D8((uint64_t)v18);
      }
      v40[0] = v21;
      int v20 = v41;
    }
    if (v20 == 0x7FFFFFFF)
    {
      int v22 = sub_646CE8((uint64_t)v18);
      int v23 = sub_646CE8(*a2);
      int v41 = (v22 - v23) & ~((v22 - v23) >> 31);
    }
    int v24 = sub_649E28(v18);
    if (v42 == 0x7FFFFFFF) {
      int v25 = v24;
    }
    else {
      int v25 = 0;
    }
    if (v25 == 1)
    {
      sub_64B1A4(v18, (uint64_t)v43);
      if (sub_40A45C(v43)) {
        int v26 = sub_40A440(v43);
      }
      else {
        int v26 = 0x7FFFFFFF;
      }
      int v42 = v26;
    }
    int v27 = sub_6478E0((uint64_t)v18);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7380, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_24F7380))
    {
      dword_24F7360 = -1;
      qword_24F7370 = 0;
      unk_24F7378 = 0;
      qword_24F7368 = 0;
      __cxa_guard_release(&qword_24F7380);
    }
    char v28 = *a6;
    unint64_t v29 = a6[1];
    if (*a6 != v29)
    {
      while (*v28 != v27)
      {
        v28 += 8;
        if (v28 == v29)
        {
          uint64_t v30 = &dword_24F7360;
          goto LABEL_34;
        }
      }
    }
    if (v28 == v29) {
      uint64_t v30 = &dword_24F7360;
    }
    else {
      uint64_t v30 = v28;
    }
LABEL_34:
    sub_E2E0C4(a1, v18, v40, (uint64_t)v30, a7);
    v18 += 945;
  }
  while (v18 != v19);
LABEL_39:
  sub_486A64(a7, 2);
  char v31 = sub_69510();
  if (a3 <= 0xD)
  {
    if (((1 << a3) & 0x3C19) != 0)
    {
      uint64_t v32 = sub_68E9C((uint64_t)v31);
      sub_487728(a7, v32);
      sub_487758(a7, a4);
    }
    else if (((1 << a3) & 0x60) != 0)
    {
      sub_486A54(a7, 1);
    }
  }
  return sub_487720(a7, a5);
}

uint64_t sub_E2EC64@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  if (!*(unsigned char *)(*(void *)(result + 1992) + 3))
  {
    sub_4279F8(result + 920, a2, 0, 0, v24);
    if (v26) {
      unint64_t v4 = (uint64_t *)(v26 + 8);
    }
    else {
      unint64_t v4 = 0;
    }
    if (v25)
    {
      uint64_t v5 = 8 * v25;
      do
      {
        uint64_t v6 = *v4;
        unint64_t v7 = &off_24F8110;
        if (*(void *)(*v4 + 32)) {
          unint64_t v7 = *(uint64_t (****)())(*v4 + 32);
        }
        HIDWORD(v8) = 1097011920;
        double v9 = (double)*((int *)v7 + 7) / 10000000.0;
        uint64_t v10 = -1;
        if (v9 <= 180.0)
        {
          double v8 = (double)*((int *)v7 + 6) / 10000000.0;
          if (v8 >= -85.0511288 && v8 <= 85.0511288 && v9 >= -180.0)
          {
            double v11 = fmax(v8, -85.0511288);
            if (v11 >= 85.0511288) {
              double v12 = 1.48442223;
            }
            else {
              double v12 = v11 * 3.14159265 / 180.0;
            }
            long double v13 = sin(v12);
            LODWORD(v14) = ((log((v13 + 1.0) / (1.0 - v13)) / -12.5663706 + 0.5) * 4294967300.0);
            if (v14 >= 0xFFFFFFFE) {
              uint64_t v14 = 4294967294;
            }
            else {
              uint64_t v14 = v14;
            }
            double v8 = (v9 + 180.0) / 360.0 * 4294967300.0;
            uint64_t v10 = v8 | (unint64_t)(v14 << 32);
          }
        }
        uint64_t v22 = v10;
        int v23 = 0x7FFFFFFF;
        LODWORD(v8) = *(_DWORD *)(v6 + 60);
        unsigned int v15 = (int)llround((double)*(unint64_t *)&v8 * 100.0) % 36000;
        if (v15 > 0xFFFF735F) {
          LOWORD(v15) = v15 - 29536;
        }
        __int16 v21 = v15;
        uint64_t v20 = *(void *)(v6 + 48);
        int v16 = *(_DWORD *)(v6 + 64);
        int v18 = *(_DWORD *)(v6 + 68);
        int v19 = v16;
        int v17 = 0;
        sub_E2F500((char **)a3, &v20, &v22, &v21, (unsigned __int8 *)&v19, &v18, &v17);
        ++v4;
        v5 -= 8;
      }
      while (v5);
    }
    return sub_1116458(v24);
  }
  return result;
}

void sub_E2EEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_1116458(va);
  double v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

void sub_E2EF1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(nullsub_1(a4) + 128))
  {
    uint64_t v6 = nullsub_1(a4);
    if (!*(unsigned char *)(v6 + 128) || (sub_491B5C(v6, &v56), uint64_t v7 = nullsub_1(a4), !*(unsigned char *)(v7 + 128)))
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_2439078;
    }
    uint64_t v8 = sub_491B30(v7);
    unint64_t v54 = 0;
    unint64_t v55 = 0;
    uint64_t v53 = 0;
    sub_E2F3F8((uint64_t)&v53, v56.n128_i64[0], v8, 0x8E38E38E38E38E39 * ((int64_t)(v8 - v56.n128_u64[0]) >> 4));
    unint64_t v9 = sub_5912BC(a2);
    if (v9)
    {
      for (unint64_t i = 0; i != v9; ++i)
      {
        uint64_t v12 = sub_5911E4(a2, i);
        uint64_t v13 = *(void *)(a3 + 8);
        if (i >= 0x8E38E38E38E38E39 * ((*(void *)(a3 + 16) - v13) >> 3))
        {
          std::string __p = 0;
          unint64_t v51 = 0;
          uint64_t v52 = 0;
        }
        else
        {
          std::string __p = 0;
          unint64_t v51 = 0;
          uint64_t v52 = 0;
          sub_489B48((char **)&__p, *(void *)(v13 + 72 * i), *(void *)(v13 + 72 * i + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v13 + 72 * i + 8) - *(void *)(v13 + 72 * i)) >> 4));
        }
        sub_E2CE9C(a1, v12, (uint64_t)v49);
        uint64_t v14 = *(void *)(v12 + 10032);
        if (v14 == *(void *)(v12 + 10040))
        {
          uint64_t v17 = 0x7FFFFFFFFFFFFFFFLL;
          uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          uint64_t v15 = sub_64F5D0(v12);
          uint64_t v16 = *(void *)(v14 + 8);
          uint64_t v17 = v15 - v16;
          uint64_t v18 = *(void *)(v14 + 16) - v16;
        }
        *(void *)&long long v48 = v17;
        *((void *)&v48 + 1) = v18;
        uint64_t v19 = *(void *)(a3 + 8);
        if (i >= 0x8E38E38E38E38E39 * ((*(void *)(a3 + 16) - v19) >> 3))
        {
          uint64_t v45 = 0;
          int v46 = 0;
          int v47 = 0;
          int v25 = (uint64_t *)(v8 + 144 * i);
          uint64_t v26 = (uint64_t)(v25 + 1);
          uint64_t v27 = (uint64_t)v54;
          if ((unint64_t)v54 >= v55) {
            goto LABEL_22;
          }
        }
        else
        {
          uint64_t v20 = v19 + 72 * i;
          uint64_t v45 = 0;
          int v46 = 0;
          int v47 = 0;
          uint64_t v22 = *(unsigned char **)(v20 + 24);
          __int16 v21 = *(unsigned char **)(v20 + 32);
          int64_t v23 = v21 - v22;
          if (v21 != v22)
          {
            if (v23 < 0) {
              sub_2E00();
            }
            uint64_t v45 = operator new(v21 - v22);
            int v46 = v45;
            int v24 = (char *)v45 + 32 * (v23 >> 5);
            int v47 = v24;
            memcpy(v45, v22, v23);
            int v46 = v24;
          }
          int v25 = (uint64_t *)(v8 + 144 * i);
          uint64_t v26 = (uint64_t)(v25 + 1);
          uint64_t v27 = (uint64_t)v54;
          if ((unint64_t)v54 >= v55)
          {
LABEL_22:
            uint64_t v28 = sub_E2F6A4((uint64_t *)&v53, v25, v26, (uint64_t)v49, (uint64_t *)&__p, &v48, (uint64_t)&v45);
            goto LABEL_23;
          }
        }
        sub_4914C0(v27, *v25, v26, (uint64_t)v49, (uint64_t *)&__p, &v48, (uint64_t)&v45);
        uint64_t v28 = v27 + 144;
LABEL_23:
        unint64_t v54 = (void *)v28;
        if (v45)
        {
          int v46 = v45;
          operator delete(v45);
        }
        if (v49[0])
        {
          v49[1] = v49[0];
          operator delete(v49[0]);
        }
        unint64_t v29 = (char *)__p;
        if (__p)
        {
          uint64_t v30 = v51;
          double v11 = __p;
          if (v51 != __p)
          {
            do
            {
              char v31 = (void *)*((void *)v30 - 6);
              if (v31)
              {
                *((void *)v30 - 5) = v31;
                operator delete(v31);
              }
              if (*(v30 - 57) < 0) {
                operator delete(*((void **)v30 - 10));
              }
              v30 -= 80;
            }
            while (v30 != v29);
            double v11 = __p;
          }
          unint64_t v51 = v29;
          operator delete(v11);
        }
      }
    }
    uint64_t v32 = nullsub_1(a4);
    if (!*(unsigned char *)(v32 + 128))
    {
      int v42 = __cxa_allocate_exception(8uLL);
      *int v42 = &off_2439078;
    }
    int v33 = sub_491B8C(v32);
    sub_485394(a4, (uint64_t *)&v53, v33);
    uint64_t v34 = sub_50BE8(a2);
    char v35 = (long long *)sub_68E9C(v34);
    sub_485A5C(a4, v35);
    uint64_t v36 = sub_50BE8(a2);
    BOOL v37 = (void *)sub_648B60(v36);
    sub_4855E0(a4, *v37 == v37[1]);
    int v38 = v53;
    if (v53)
    {
      uint64_t v39 = (uint64_t)v54;
      uint64_t v40 = v53;
      if (v54 != v53)
      {
        do
          uint64_t v39 = sub_489CF4(v39 - 144);
        while ((void *)v39 != v38);
        uint64_t v40 = v53;
      }
      unint64_t v54 = v38;
      operator delete(v40);
    }
  }
}

void sub_E2F334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_489720((void **)va);
  _Unwind_Resume(a1);
}

void sub_E2F348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16)
  {
    operator delete(a16);
    sub_489144(&a19);
    sub_489720(&a22);
    _Unwind_Resume(a1);
  }
  sub_489144(&a19);
  sub_489720(&a22);
  _Unwind_Resume(a1);
}

void sub_E2F3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_489720((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_E2F3F8(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = (void *)result;
    if (a4 >= 0x1C71C71C71C71C8) {
      sub_2E00();
    }
    uint64_t result = (uint64_t)operator new(144 * a4);
    uint64_t v8 = result;
    *uint64_t v5 = result;
    v5[1] = result;
    v5[2] = result + 144 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = sub_48990C(v8 + v9, (uint64_t *)(a2 + v9));
        v9 += 144;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_E2F4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_E2F4D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 144)
    sub_489CF4(v10 - 144 + v11);
  *(void *)(v9 + 8) = v10;
  sub_489884(&a9);
  _Unwind_Resume(a1);
}

char *sub_E2F500(char **a1, void *a2, uint64_t *a3, __int16 *a4, unsigned __int8 *a5, int *a6, int *a7)
{
  uint64_t v14 = a1[1];
  unint64_t v13 = (unint64_t)a1[2];
  if ((unint64_t)v14 < v13)
  {
    uint64_t v15 = *a3;
    int v16 = *((_DWORD *)a3 + 2);
    __int16 v17 = *a4;
    int v18 = *a5;
    int v19 = *a6;
    int v20 = *a7;
    *(void *)uint64_t v14 = *a2;
    *((void *)v14 + 1) = v15;
    *((_DWORD *)v14 + 4) = v16;
    *((_WORD *)v14 + 10) = v17;
    *(_DWORD *)(v14 + 22) = v18 & 0xFFFF00FF | (v19 << 8) | (v20 << 16);
    __int16 v21 = v14 + 32;
    goto LABEL_13;
  }
  uint64_t v22 = *a1;
  uint64_t v23 = (v14 - *a1) >> 5;
  unint64_t v24 = v23 + 1;
  if ((unint64_t)(v23 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v25 = v13 - (void)v22;
  if (v25 >> 4 > v24) {
    unint64_t v24 = v25 >> 4;
  }
  BOOL v26 = (unint64_t)v25 >= 0x7FFFFFFFFFFFFFE0;
  unint64_t v27 = 0x7FFFFFFFFFFFFFFLL;
  if (!v26) {
    unint64_t v27 = v24;
  }
  if (v27 >> 59) {
    sub_188D718();
  }
  uint64_t v28 = 32 * v27;
  unint64_t v29 = (char *)operator new(32 * v27);
  uint64_t v30 = &v29[32 * v23];
  char v31 = &v29[v28];
  uint64_t v32 = *a3;
  int v33 = *((_DWORD *)a3 + 2);
  __int16 v34 = *a4;
  int v35 = *a5;
  int v36 = *a6;
  int v37 = *a7;
  *(void *)uint64_t v30 = *a2;
  *((void *)v30 + 1) = v32;
  *((_DWORD *)v30 + 4) = v33;
  *((_WORD *)v30 + 10) = v34;
  *(_DWORD *)(v30 + 22) = v35 & 0xFFFF00FF | (v36 << 8) | (v37 << 16);
  __int16 v21 = v30 + 32;
  if (v14 == v22)
  {
    *a1 = v30;
    a1[1] = v21;
    a1[2] = v31;
    if (!v22) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  do
  {
    long long v38 = *((_OWORD *)v14 - 2);
    uint64_t v39 = v30 - 32;
    *(_OWORD *)(v30 - 22) = *(_OWORD *)(v14 - 22);
    *((_OWORD *)v30 - 2) = v38;
    v14 -= 32;
    v30 -= 32;
  }
  while (v14 != v22);
  *a1 = v39;
  a1[1] = v21;
  a1[2] = v31;
  if (v22) {
LABEL_12:
  }
    operator delete(v22);
LABEL_13:
  a1[1] = v21;
  return v21 - 32;
}

uint64_t sub_E2F6A4(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5, long long *a6, uint64_t a7)
{
  unint64_t v8 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 4);
  unint64_t v9 = v8 + 1;
  if (v8 + 1 > 0x1C71C71C71C71C7) {
    sub_2E00();
  }
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 4) > v9) {
    unint64_t v9 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 4);
  }
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 4) >= 0xE38E38E38E38E3) {
    unint64_t v16 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v16 = v9;
  }
  if (v16)
  {
    if (v16 > 0x1C71C71C71C71C7) {
      sub_188D718();
    }
    __int16 v17 = (char *)operator new(144 * v16);
  }
  else
  {
    __int16 v17 = 0;
  }
  uint64_t v29 = (uint64_t)&v17[144 * v8];
  uint64_t v30 = &v17[144 * v16];
  sub_4914C0(v29, *a2, a3, a4, a5, a6, a7);
  uint64_t v18 = v29 + 144;
  int v20 = (char *)*a1;
  int v19 = (char *)a1[1];
  if (v19 == (char *)*a1)
  {
    *a1 = v29;
    a1[1] = v18;
    a1[2] = (uint64_t)v30;
  }
  else
  {
    uint64_t v21 = 0;
    do
    {
      uint64_t v22 = &v19[v21];
      uint64_t v23 = v29 + v21;
      *(void *)(v23 - 144) = *(void *)&v19[v21 - 144];
      *(void *)(v23 - 136) = 0;
      *(void *)(v23 - 128) = 0;
      *(void *)(v23 - 120) = 0;
      *(_OWORD *)(v23 - 136) = *(_OWORD *)&v19[v21 - 136];
      *(void *)(v23 - 120) = *(void *)&v19[v21 - 120];
      *((void *)v22 - 17) = 0;
      *((void *)v22 - 16) = 0;
      *((void *)v22 - 15) = 0;
      *(void *)(v23 - 112) = 0;
      *(void *)(v23 - 104) = 0;
      *(void *)(v23 - 96) = 0;
      *(_OWORD *)(v23 - 112) = *(_OWORD *)&v19[v21 - 112];
      *(void *)(v23 - 96) = *(void *)&v19[v21 - 96];
      *((void *)v22 - 14) = 0;
      *((void *)v22 - 13) = 0;
      long long v24 = *(_OWORD *)&v19[v21 - 88];
      uint64_t v25 = *(void *)&v19[v21 - 72];
      *((void *)v22 - 12) = 0;
      *(void *)(v23 - 72) = v25;
      *(_OWORD *)(v23 - 88) = v24;
      *((void *)v22 - 10) = 0;
      *((void *)v22 - 9) = 0;
      *((void *)v22 - 11) = 0;
      *(void *)(v23 - 64) = 0;
      *(void *)(v23 - 56) = 0;
      *(void *)(v23 - 48) = 0;
      *(_OWORD *)(v23 - 64) = *(_OWORD *)&v19[v21 - 64];
      *(void *)(v23 - 48) = *(void *)&v19[v21 - 48];
      *((void *)v22 - 7) = 0;
      *((void *)v22 - 6) = 0;
      *((void *)v22 - 8) = 0;
      long long v26 = *(_OWORD *)&v19[v21 - 40];
      *(void *)(v23 - 16) = 0;
      *(void *)(v23 - 8) = 0;
      *(_OWORD *)(v23 - 40) = v26;
      *(void *)(v23 - 24) = 0;
      *(_OWORD *)(v23 - 24) = *(_OWORD *)&v19[v21 - 24];
      *(void *)(v23 - 8) = *(void *)&v19[v21 - 8];
      *((void *)v22 - 3) = 0;
      *((void *)v22 - 2) = 0;
      *((void *)v22 - 1) = 0;
      v21 -= 144;
    }
    while (&v19[v21] != v20);
    unint64_t v27 = (char *)*a1;
    int v19 = (char *)a1[1];
    *a1 = v29 + v21;
    a1[1] = v18;
    a1[2] = (uint64_t)v30;
    if (v19 != v27)
    {
      do
        int v19 = (char *)sub_489CF4((uint64_t)(v19 - 144));
      while (v19 != v27);
      int v19 = v27;
    }
  }
  if (v19) {
    operator delete(v19);
  }
  return v29 + 144;
}

void sub_E2F908(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_493C2C((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_E2F91C(void **a1, uint64_t a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1C71C71C71C71C7) {
    sub_2E00();
  }
  if (0x1C71C71C71C71C72 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0x8E38E38E38E38E39 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0xE38E38E38E38E3) {
    unint64_t v5 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v5 = v4;
  }
  if (v5 > 0x1C71C71C71C71C7) {
    sub_188D718();
  }
  uint64_t v7 = 144 * v5;
  unint64_t v8 = (char *)operator new(144 * v5);
  unint64_t v9 = &v8[144 * v3];
  *(void *)unint64_t v9 = *(void *)a2;
  uint64_t v10 = &v8[v7];
  *(_OWORD *)(v9 + 8) = *(_OWORD *)(a2 + 8);
  *((void *)v9 + 3) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v9 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  long long v11 = *(_OWORD *)(a2 + 56);
  *((void *)v9 + 9) = *(void *)(a2 + 72);
  *(_OWORD *)(v9 + 56) = v11;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *((void *)v9 + 11) = 0;
  *((void *)v9 + 12) = 0;
  *((_OWORD *)v9 + 5) = *(_OWORD *)(a2 + 80);
  *((void *)v9 + 12) = *(void *)(a2 + 96);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(_OWORD *)(v9 + 104) = *(_OWORD *)(a2 + 104);
  *((void *)v9 + 16) = 0;
  *((void *)v9 + 17) = 0;
  *(_OWORD *)(v9 + 120) = *(_OWORD *)(a2 + 120);
  *((void *)v9 + 17) = *(void *)(a2 + 136);
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  uint64_t v12 = v9 + 144;
  uint64_t v14 = (char *)*a1;
  unint64_t v13 = (char *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
    if (!v13) {
      return v12;
    }
    goto LABEL_15;
  }
  uint64_t v15 = 0;
  do
  {
    unint64_t v16 = &v13[v15];
    __int16 v17 = &v9[v15];
    *((void *)v17 - 18) = *(void *)&v13[v15 - 144];
    *(_OWORD *)(v17 - 136) = *(_OWORD *)&v13[v15 - 136];
    *((void *)v17 - 15) = *(void *)&v13[v15 - 120];
    *((void *)v16 - 17) = 0;
    *((void *)v16 - 16) = 0;
    *((void *)v16 - 15) = 0;
    *((_OWORD *)v17 - 7) = *(_OWORD *)&v13[v15 - 112];
    *((void *)v17 - 12) = *(void *)&v13[v15 - 96];
    *((void *)v16 - 14) = 0;
    *((void *)v16 - 13) = 0;
    long long v18 = *(_OWORD *)&v13[v15 - 88];
    uint64_t v19 = *(void *)&v13[v15 - 72];
    *((void *)v16 - 12) = 0;
    *((void *)v17 - 9) = v19;
    *(_OWORD *)(v17 - 88) = v18;
    *((void *)v16 - 10) = 0;
    *((void *)v16 - 9) = 0;
    long long v20 = *(_OWORD *)&v13[v15 - 64];
    *((void *)v16 - 11) = 0;
    *((_OWORD *)v17 - 4) = v20;
    *((void *)v17 - 6) = *(void *)&v13[v15 - 48];
    *((void *)v16 - 8) = 0;
    *((void *)v16 - 7) = 0;
    *((void *)v16 - 6) = 0;
    *(_OWORD *)(v17 - 40) = *(_OWORD *)&v13[v15 - 40];
    *(_OWORD *)(v17 - 24) = *(_OWORD *)&v13[v15 - 24];
    *((void *)v17 - 1) = *(void *)&v13[v15 - 8];
    *((void *)v16 - 3) = 0;
    *((void *)v16 - 2) = 0;
    *((void *)v16 - 1) = 0;
    v15 -= 144;
  }
  while (&v13[v15] != v14);
  uint64_t v21 = (char *)*a1;
  unint64_t v13 = (char *)a1[1];
  *a1 = &v9[v15];
  a1[1] = v12;
  a1[2] = v10;
  if (v13 != v21)
  {
    do
      unint64_t v13 = (char *)sub_489CF4((uint64_t)(v13 - 144));
    while (v13 != v21);
    unint64_t v13 = v21;
  }
  if (v13) {
LABEL_15:
  }
    operator delete(v13);
  return v12;
}

void sub_E2FB6C()
{
  *(void *)(v0 - 48) = v1;
  *(void *)(v0 - 8) = 0;
  v2[1] = 0;
  v2[2] = 0;
  *int v2 = 0;
}

uint64_t sub_E2FB90()
{
  return *(void *)(*v0 + v1 + 8);
}

double sub_E2FBB0()
{
  byte_25F3E9F = 1;
  word_25F3E88 = 65;
  byte_25F3EB7 = 1;
  word_25F3EA0 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25F3F48 = 0u;
  *(_OWORD *)&qword_25F3F58 = 0u;
  dword_25F3F68 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25F3F48, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25F3F48, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25F3F48, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25F3F48, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25F3ECF = 8;
  strcpy((char *)&qword_25F3EB8, "any_mode");
  byte_25F3EE7 = 7;
  strcpy((char *)&dword_25F3ED0, "cycling");
  byte_25F3EFF = 7;
  strcpy((char *)&dword_25F3EE8, "driving");
  byte_25F3F17 = 7;
  strcpy((char *)&dword_25F3F00, "walking");
  qword_25F3F20 = 0;
  qword_25F3F28 = 0;
  qword_25F3F18 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25F3F18 = (uint64_t)v0;
  qword_25F3F20 = (uint64_t)(v0 + 9);
  qword_25F3F28 = (uint64_t)(v0 + 9);
  qword_25F3F30 = 0;
  qword_25F3F38 = 0;
  unk_25F3F40 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25F3F38 = (uint64_t)(v1 + 9);
  unk_25F3F40 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25F3F30 = (uint64_t)v1;
  return result;
}

void sub_E2FE78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25F3F58) {
    sub_20B0D80((void **)qword_25F3F58);
  }
  int v37 = (void *)xmmword_25F3F48;
  *(void *)&xmmword_25F3F48 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void *sub_E2FF18(uint64_t a1, int *a2)
{
  double result = (void *)sub_DE8050(a1, a2);
  void *result = &off_243EEA0;
  return result;
}

void sub_E2FF4C(void (***a1)(void, uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  sub_DE8278((uint64_t)a1, a2, a3);
  uint64_t v6 = (long long *)sub_648134(a2);
  *(_DWORD *)(a3 + 40) |= 0x40u;
  uint64_t v7 = *(void *)(a3 + 8);
  int v8 = (uint64_t *)(v7 & 0xFFFFFFFFFFFFFFFCLL);
  if (v7) {
    int v8 = (uint64_t *)*v8;
  }
  sub_1881DF4((std::string **)(a3 + 704), v6, v8);
  unint64_t v9 = (long long *)sub_64818C(a2);
  *(_DWORD *)(a3 + 40) |= 0x80u;
  uint64_t v10 = *(void *)(a3 + 8);
  int v11 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
  if (v10) {
    int v11 = (uint64_t *)*v11;
  }
  sub_1881DF4((std::string **)(a3 + 712), v9, v11);
  uint64_t v12 = sub_6483B0(a2);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 23);
  if ((v13 & 0x80u) != 0) {
    uint64_t v13 = *(void *)(v12 + 8);
  }
  if (v13)
  {
    *(_DWORD *)(a3 + 40) |= 0x8000u;
    uint64_t v14 = *(void *)(a3 + 776);
    if (v14)
    {
      uint64_t v15 = (const std::string *)sub_6483B0(a2);
      unint64_t v16 = *(_DWORD **)(v14 + 40);
      if (!v16) {
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v17 = *(void *)(a3 + 8);
      long long v18 = (void *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
      if (v17) {
        long long v18 = (void *)*v18;
      }
      sub_13D6A1C((uint64_t)v18);
      uint64_t v14 = v19;
      *(void *)(a3 + 776) = v19;
      uint64_t v15 = (const std::string *)sub_6483B0(a2);
      unint64_t v16 = *(_DWORD **)(v14 + 40);
      if (!v16) {
        goto LABEL_16;
      }
    }
    uint64_t v20 = *(int *)(v14 + 32);
    if ((int)v20 < *v16)
    {
      *(_DWORD *)(v14 + 32) = v20 + 1;
      uint64_t v21 = *(std::string **)&v16[2 * v20 + 2];
LABEL_19:
      std::string::operator=(v21, v15);
      goto LABEL_20;
    }
LABEL_16:
    long long v24 = *(uint64_t **)(v14 + 24);
    uint64_t v23 = v14 + 24;
    uint64_t v22 = v24;
    if (!v24) {
      operator new();
    }
    *long long v26 = v25;
    v26[1] = sub_3A6EDC;
    *uint64_t v25 = 0;
    v25[1] = 0;
    v25[2] = 0;
    uint64_t v21 = (std::string *)sub_188CDC8(v23, (uint64_t)v25);
    goto LABEL_19;
  }
LABEL_20:
  uint64_t v27 = nullsub_1(a2);
  uint64_t v28 = *(void **)v27;
  uint64_t v29 = *(void **)(v27 + 8);
  if (*(void **)v27 != v29)
  {
    do
    {
      sub_E30130(a1, v28, a3);
      v28 += 1541;
    }
    while (v28 != v29);
  }
}

void sub_E30130(void (***a1)(void, uint64_t, uint64_t), void *a2, uint64_t a3)
{
  sub_E303AC((uint64_t)a1, (uint64_t)a2, a3);
  uint64_t v6 = (unsigned int *)a2[934];
  for (unint64_t i = (unsigned int *)a2[935]; v6 != i; v6 += 102)
  {
    uint64_t v10 = a2[63];
    int v11 = *(_DWORD **)(a3 + 384);
    if (v11 && (uint64_t v12 = *(int *)(a3 + 376), (int)v12 < *v11))
    {
      *(_DWORD *)(a3 + 376) = v12 + 1;
      uint64_t v9 = *(void *)&v11[2 * v12 + 2];
    }
    else
    {
      sub_13D7104(*(void *)(a3 + 368));
      uint64_t v9 = sub_188CDC8(a3 + 368, v8);
    }
    sub_E31398((uint64_t)a1, v6, v10, v9);
  }
  uint64_t v13 = (unsigned int *)a2[931];
  for (uint64_t j = (unsigned int *)a2[932]; v13 != j; v13 += 270)
  {
    uint64_t v17 = a2[63];
    long long v18 = *(_DWORD **)(a3 + 384);
    if (v18 && (uint64_t v19 = *(int *)(a3 + 376), (int)v19 < *v18))
    {
      *(_DWORD *)(a3 + 376) = v19 + 1;
      uint64_t v16 = *(void *)&v18[2 * v19 + 2];
    }
    else
    {
      sub_13D7104(*(void *)(a3 + 368));
      uint64_t v16 = sub_188CDC8(a3 + 368, v15);
    }
    sub_E30E14((uint64_t)a1, v13, v17, v16);
  }
  uint64_t v20 = (unsigned int *)a2[937];
  for (k = (unsigned int *)a2[938]; v20 != k; v20 += 204)
  {
    while (1)
    {
      long long v24 = *(_DWORD **)(a3 + 384);
      if (v24)
      {
        uint64_t v25 = *(int *)(a3 + 376);
        if ((int)v25 < *v24) {
          break;
        }
      }
      sub_13D7104(*(void *)(a3 + 368));
      uint64_t v23 = sub_188CDC8(a3 + 368, v22);
      sub_E31A1C((uint64_t)a1, v20, v23);
      v20 += 204;
      if (v20 == k) {
        goto LABEL_21;
      }
    }
    *(_DWORD *)(a3 + 376) = v25 + 1;
    sub_E31A1C((uint64_t)a1, v20, *(void *)&v24[2 * v25 + 2]);
  }
LABEL_21:

  sub_E306B8(a1, (uint64_t)a2, a3);
}

void sub_E30310(void (***a1)(void, uint64_t, uint64_t), void *a2, uint64_t a3)
{
  uint64_t v6 = (void *)nullsub_1(a2);
  int v7 = 379049677 * ((uint64_t)(v6[1] - *v6) >> 3);
  if (v7)
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(*(void *)(a3 + 64) + 8 * (int)v8 + 8);
      uint64_t v10 = (void *)sub_6467E8(a2, v8);
      sub_E30130(a1, v10, v9);
      ++v8;
    }
    while (v7 != v8);
  }
}

void sub_E303AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 7520;
  if (sub_6390F8(a2 + 7520))
  {
    uint64_t v6 = (const std::string **)sub_638F28(v5);
    *(_DWORD *)(a3 + 40) |= 0x40000u;
    uint64_t v7 = *(void *)(a3 + 800);
    if (v7)
    {
      *(_DWORD *)(v7 + 16) |= 1u;
      uint64_t v8 = *(void *)(v7 + 96);
      if (v8)
      {
LABEL_11:
        sub_5F4D30(v6, v8);
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v9 = *(void *)(a3 + 8);
      uint64_t v10 = (void *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
      if (v9) {
        uint64_t v10 = (void *)*v10;
      }
      uint64_t v7 = sub_13D6C7C((uint64_t)v10);
      *(void *)(a3 + 800) = v7;
      *(_DWORD *)(v7 + 16) |= 1u;
      uint64_t v8 = *(void *)(v7 + 96);
      if (v8) {
        goto LABEL_11;
      }
    }
    uint64_t v11 = *(void *)(v7 + 8);
    uint64_t v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
    if (v11) {
      uint64_t v12 = (void *)*v12;
    }
    sub_13D6A1C((uint64_t)v12);
    uint64_t v8 = v13;
    *(void *)(v7 + 96) = v13;
    goto LABEL_11;
  }
LABEL_12:
  if (sub_638B00(v5))
  {
    uint64_t v14 = sub_638A44(v5);
    uint64_t v15 = *(const std::string ***)v14;
    uint64_t v16 = *(const std::string ***)(v14 + 8);
    while (v15 != v16)
    {
      *(_DWORD *)(a3 + 40) |= 0x40000u;
      uint64_t v20 = *(void *)(a3 + 800);
      if (v20)
      {
        uint64_t v21 = *(_DWORD **)(v20 + 40);
        if (!v21) {
          goto LABEL_14;
        }
      }
      else
      {
        uint64_t v22 = *(void *)(a3 + 8);
        uint64_t v23 = (uint64_t *)(v22 & 0xFFFFFFFFFFFFFFFCLL);
        if (v22)
        {
          uint64_t v20 = sub_13D6C7C(*v23);
          *(void *)(a3 + 800) = v20;
          uint64_t v21 = *(_DWORD **)(v20 + 40);
          if (!v21)
          {
LABEL_14:
            uint64_t v17 = v20 + 24;
            sub_13D6A1C(*(void *)(v20 + 24));
            uint64_t v19 = sub_188CDC8(v17, v18);
            goto LABEL_15;
          }
        }
        else
        {
          uint64_t v20 = sub_13D6C7C((uint64_t)v23);
          *(void *)(a3 + 800) = v20;
          uint64_t v21 = *(_DWORD **)(v20 + 40);
          if (!v21) {
            goto LABEL_14;
          }
        }
      }
      uint64_t v24 = *(int *)(v20 + 32);
      if ((int)v24 >= *v21) {
        goto LABEL_14;
      }
      *(_DWORD *)(v20 + 32) = v24 + 1;
      uint64_t v19 = *(void *)&v21[2 * v24 + 2];
LABEL_15:
      sub_5F4D30(v15, v19);
      v15 += 20;
    }
  }
  uint64_t v25 = a2 + 8336;
  if (sub_6390F8(v25))
  {
    long long v26 = (const std::string **)sub_638F28(v25);
    *(_DWORD *)(a3 + 40) |= 0x80000u;
    uint64_t v27 = *(void *)(a3 + 808);
    if (v27)
    {
      *(_DWORD *)(v27 + 16) |= 1u;
      uint64_t v28 = *(void *)(v27 + 96);
      if (v28)
      {
LABEL_36:
        sub_5F4D30(v26, v28);
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v29 = *(void *)(a3 + 8);
      uint64_t v30 = (void *)(v29 & 0xFFFFFFFFFFFFFFFCLL);
      if (v29) {
        uint64_t v30 = (void *)*v30;
      }
      uint64_t v27 = sub_13D6C7C((uint64_t)v30);
      *(void *)(a3 + 808) = v27;
      *(_DWORD *)(v27 + 16) |= 1u;
      uint64_t v28 = *(void *)(v27 + 96);
      if (v28) {
        goto LABEL_36;
      }
    }
    uint64_t v31 = *(void *)(v27 + 8);
    uint64_t v32 = (void *)(v31 & 0xFFFFFFFFFFFFFFFCLL);
    if (v31) {
      uint64_t v32 = (void *)*v32;
    }
    sub_13D6A1C((uint64_t)v32);
    uint64_t v28 = v33;
    *(void *)(v27 + 96) = v33;
    goto LABEL_36;
  }
LABEL_37:
  if (sub_638B00(v25))
  {
    uint64_t v34 = sub_638A44(v25);
    int v35 = *(const std::string ***)v34;
    int v36 = *(const std::string ***)(v34 + 8);
    while (1)
    {
      if (v35 == v36) {
        return;
      }
      *(_DWORD *)(a3 + 40) |= 0x80000u;
      uint64_t v40 = *(void *)(a3 + 808);
      if (v40)
      {
        int v41 = *(_DWORD **)(v40 + 40);
        if (!v41) {
          goto LABEL_39;
        }
      }
      else
      {
        uint64_t v42 = *(void *)(a3 + 8);
        BOOL v43 = (uint64_t *)(v42 & 0xFFFFFFFFFFFFFFFCLL);
        if (v42)
        {
          uint64_t v40 = sub_13D6C7C(*v43);
          *(void *)(a3 + 808) = v40;
          int v41 = *(_DWORD **)(v40 + 40);
          if (!v41)
          {
LABEL_39:
            uint64_t v37 = v40 + 24;
            sub_13D6A1C(*(void *)(v40 + 24));
            uint64_t v39 = sub_188CDC8(v37, v38);
            goto LABEL_40;
          }
        }
        else
        {
          uint64_t v40 = sub_13D6C7C((uint64_t)v43);
          *(void *)(a3 + 808) = v40;
          int v41 = *(_DWORD **)(v40 + 40);
          if (!v41) {
            goto LABEL_39;
          }
        }
      }
      uint64_t v44 = *(int *)(v40 + 32);
      if ((int)v44 >= *v41) {
        goto LABEL_39;
      }
      *(_DWORD *)(v40 + 32) = v44 + 1;
      uint64_t v39 = *(void *)&v41[2 * v44 + 2];
LABEL_40:
      sub_5F4D30(v35, v39);
      v35 += 20;
    }
  }
}

void sub_E306B8(void (***a1)(void, uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 1072) - *(void *)(a2 + 1064);
  if (v3)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    uint64_t v9 = (void *)(a2 + 1064);
    uint64_t v10 = v3 / 2400;
    do
    {
      uint64_t v11 = sub_4A5E10(v9, v8);
      uint64_t v12 = (unsigned __int8 *)(v11 + 329);
      uint64_t v13 = *(void *)(a3 + 72) + (v7 >> 29);
      uint64_t v14 = *(void *)(v13 + 8);
      if (!*(unsigned char *)(v11 + 330)) {
        uint64_t v12 = (unsigned __int8 *)(a2 + 1057);
      }
      int v15 = *v12;
      sub_DE8978((uint64_t)a1, v11, *(void *)(v13 + 8));
      sub_E307F8((uint64_t)a1, (uint64_t *)v11, v15, v14);
      (**a1)(a1, v11, v14);
      sub_E30AA0((uint64_t)a1, (void *)v11, v14);
      ++v8;
      v7 += 0x100000000;
    }
    while (v10 != v8);
  }
}

void sub_E307F8(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_1883FB0((void *)(a4 + 16), dword_254EAA8, 11, (uint64_t)&off_252CE78, 0);
  uint64_t v9 = (unsigned int *)a2[214];
  uint64_t v10 = (unsigned int *)a2[215];
  if (v9 != v10)
  {
    uint64_t v11 = v8;
    uint64_t v12 = (uint64_t **)(v8 + 48);
    while (!sub_7C49A4((uint64_t)v9))
    {
LABEL_6:
      v9 += 270;
      if (v9 == v10) {
        return;
      }
    }
    int v15 = *(_DWORD **)(a4 + 144);
    if (v15 && (uint64_t v16 = *(int *)(a4 + 136), (int)v16 < *v15))
    {
      *(_DWORD *)(a4 + 136) = v16 + 1;
      uint64_t v17 = *(void *)&v15[2 * v16 + 2];
      if (!sub_7C49E4((uint64_t)v9)) {
        goto LABEL_11;
      }
    }
    else
    {
      sub_13D7104(*(void *)(a4 + 128));
      uint64_t v17 = sub_188CDC8(a4 + 128, v18);
      if (!sub_7C49E4((uint64_t)v9))
      {
LABEL_11:
        sub_E30E14(a1, v9, a2[15], v17);
        if (!*(unsigned char *)(a1 + 11))
        {
LABEL_20:
          int v25 = *(_DWORD *)(a4 + 320);
          *(_DWORD *)(v17 + 16) |= 0x400u;
          *(_DWORD *)(v17 + 96) = v25;
          sub_638F30(v9, (uint64_t)__p);
          uint64_t v19 = *(int **)(v11 + 64);
          if (!v19) {
            goto LABEL_21;
          }
          goto LABEL_16;
        }
LABEL_15:
        sub_638F30(v9, (uint64_t)__p);
        uint64_t v19 = *(int **)(v11 + 64);
        if (!v19)
        {
LABEL_21:
          int v21 = *(_DWORD *)(v11 + 60);
          goto LABEL_22;
        }
LABEL_16:
        uint64_t v20 = *(int *)(v11 + 56);
        int v21 = *v19;
        if ((int)v20 < *v19)
        {
          *(_DWORD *)(v11 + 56) = v20 + 1;
          uint64_t v13 = *(void *)&v19[2 * v20 + 2];
          if (*(char *)(v13 + 23) < 0) {
            operator delete(*(void **)v13);
          }
          long long v14 = *(_OWORD *)__p;
          *(void *)(v13 + 16) = v30;
          *(_OWORD *)uint64_t v13 = v14;
          goto LABEL_6;
        }
        if (v21 != *(_DWORD *)(v11 + 60))
        {
          *uint64_t v19 = v21 + 1;
          uint64_t v22 = *v12;
          if (!*v12) {
            goto LABEL_23;
          }
LABEL_19:
          *uint64_t v24 = v23;
          v24[1] = (uint64_t)sub_3A6EDC;
          long long v26 = *(_OWORD *)__p;
          *(void *)(v23 + 16) = v30;
          *(_OWORD *)uint64_t v23 = v26;
          __p[1] = 0;
          uint64_t v30 = 0;
          __p[0] = 0;
          uint64_t v27 = *(void *)(v11 + 64);
          uint64_t v28 = *(int *)(v11 + 56);
          *(_DWORD *)(v11 + 56) = v28 + 1;
          *(void *)(v27 + 8 * v28 + 8) = v23;
          if (SHIBYTE(v30) < 0) {
            operator delete(__p[0]);
          }
          goto LABEL_6;
        }
LABEL_22:
        sub_188CC60((uint64_t)v12, v21 + 1);
        ++**(_DWORD **)(v11 + 64);
        uint64_t v22 = *v12;
        if (!*v12) {
LABEL_23:
        }
          operator new();
        goto LABEL_19;
      }
    }
    sub_E31BBC(a1, (uint64_t)a2, (uint64_t)v9, a3, v17);
    if (!*(unsigned char *)(a1 + 11)) {
      goto LABEL_20;
    }
    goto LABEL_15;
  }
}

void sub_E30A84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_E30AA0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a2[220];
  uint64_t v4 = a2[221];
  if (v3 != v4)
  {
    uint64_t v8 = (uint64_t *)(a3 + 128);
    while (1)
    {
      uint64_t v9 = *(_DWORD **)(a3 + 144);
      if (!v9) {
        break;
      }
      uint64_t v10 = *(int *)(a3 + 136);
      if ((int)v10 >= *v9) {
        break;
      }
      *(_DWORD *)(a3 + 136) = v10 + 1;
      uint64_t v11 = *(void *)&v9[2 * v10 + 2];
      if (sub_638A18(v3)) {
        goto LABEL_9;
      }
LABEL_10:
      uint64_t v15 = sub_638A20(v3);
      if (*(unsigned char *)(a1 + 11))
      {
        uint64_t v17 = a2[15];
        int v18 = v17 - v15;
        int v19 = v17 - v16;
        if (v17 < v15) {
          int v18 = 0;
        }
        if (v17 < v16) {
          int v19 = 0;
        }
        int v20 = *(_DWORD *)(v11 + 16) | 0xC0000;
        *(_DWORD *)(v11 + 132) = v18;
        *(_DWORD *)(v11 + 136) = v19;
      }
      else
      {
        int v20 = *(_DWORD *)(v11 + 16);
      }
      if (v15 < 0) {
        __int16 v21 = -50;
      }
      else {
        __int16 v21 = 50;
      }
      if (v16 < 0) {
        __int16 v22 = -50;
      }
      else {
        __int16 v22 = 50;
      }
      *(_DWORD *)(v11 + 80) = (int)v15 / 100
                            + ((5243 * (__int16)(v21 + (int)v15 % 100)) >> 19)
                            + ((5243 * (__int16)(v21 + (int)v15 % 100)) >> 31);
      *(_DWORD *)(v11 + 84) = (int)v16 / 100
                            + ((5243 * (__int16)(v22 + (int)v16 % 100)) >> 19)
                            + ((5243 * (__int16)(v22 + (int)v16 % 100)) >> 31);
      *(_DWORD *)(v11 + 16) = v20 | 0x190;
      uint64_t v23 = *(void *)(v11 + 56);
      if (v23)
      {
        uint64_t v24 = (const std::string **)(v3 + 344);
        if (sub_45FB38((void *)(v3 + 344))) {
          goto LABEL_25;
        }
      }
      else
      {
        uint64_t v26 = *(void *)(v11 + 8);
        uint64_t v27 = (void *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
        if (v26) {
          uint64_t v27 = (void *)*v27;
        }
        uint64_t v23 = sub_13D76DC((uint64_t)v27);
        *(void *)(v11 + 56) = v23;
        uint64_t v24 = (const std::string **)(v3 + 344);
        if (sub_45FB38((void *)(v3 + 344)))
        {
LABEL_25:
          int v25 = *(char *)(v3 + 527);
          if ((v25 & 0x80000000) == 0) {
            goto LABEL_26;
          }
          goto LABEL_33;
        }
      }
      *(_DWORD *)(v23 + 16) |= 2u;
      uint64_t v28 = *(void *)(v23 + 56);
      if (v28)
      {
        sub_5F4D30(v24, v28);
        int v25 = *(char *)(v3 + 527);
        if ((v25 & 0x80000000) == 0) {
          goto LABEL_26;
        }
      }
      else
      {
        uint64_t v42 = *(void *)(v23 + 8);
        BOOL v43 = (void *)(v42 & 0xFFFFFFFFFFFFFFFCLL);
        if (v42) {
          BOOL v43 = (void *)*v43;
        }
        sub_13D6A1C((uint64_t)v43);
        *(void *)(v23 + 56) = v44;
        sub_5F4D30(v24, v44);
        int v25 = *(char *)(v3 + 527);
        if ((v25 & 0x80000000) == 0)
        {
LABEL_26:
          if ((_BYTE)v25) {
            goto LABEL_34;
          }
          goto LABEL_37;
        }
      }
LABEL_33:
      if (*(void *)(v3 + 512))
      {
LABEL_34:
        *(_DWORD *)(v23 + 16) |= 1u;
        uint64_t v29 = *(void *)(v23 + 8);
        uint64_t v30 = (uint64_t *)(v29 & 0xFFFFFFFFFFFFFFFCLL);
        if (v29) {
          uint64_t v30 = (uint64_t *)*v30;
        }
        sub_1881DF4((std::string **)(v23 + 48), (long long *)(v3 + 504), v30);
      }
LABEL_37:
      int v31 = *(_DWORD *)(v3 + 340);
      if (v31 == 2) {
        int v32 = 2;
      }
      else {
        int v32 = v31 == 1;
      }
      *(_DWORD *)(v23 + 16) |= 4u;
      *(_DWORD *)(v23 + 64) = v32;
      uint64_t v33 = *(int64x2_t **)(v3 + 640);
      for (unint64_t i = *(int64x2_t **)(v3 + 648); v33 != i; ++v33)
      {
        uint64_t v39 = (const double *)(a2 + 15);
        int64x2_t v37 = *v33;
        int64x2_t v38 = (int64x2_t)vld1q_dup_f64(v39);
        uint64_t v40 = *(_DWORD **)(v23 + 40);
        if (v40 && (uint64_t v41 = *(int *)(v23 + 32), (int)v41 < *v40))
        {
          *(_DWORD *)(v23 + 32) = v41 + 1;
          int v36 = *(int8x8_t **)&v40[2 * v41 + 2];
        }
        else
        {
          int64x2_t v45 = v38;
          int64x2_t v46 = *v33;
          int v35 = sub_13D7664(*(void *)(v23 + 24));
          int v36 = (int8x8_t *)sub_188CDC8(v23 + 24, (uint64_t)v35);
          int64x2_t v38 = v45;
          int64x2_t v37 = v46;
        }
        v36[2].i32[0] |= 3u;
        v36[3] = vbic_s8((int8x8_t)vmovn_s64(vsubq_s64(v38, v37)), (int8x8_t)vmovn_s64(vcgtq_s64(v37, v38)));
      }
      v3 += 664;
      if (v3 == v4) {
        return;
      }
    }
    sub_13D7104(*v8);
    uint64_t v11 = sub_188CDC8((uint64_t)v8, v12);
    if (!sub_638A18(v3)) {
      goto LABEL_10;
    }
LABEL_9:
    unsigned int v13 = sub_638A18(v3);
    int v14 = sub_E15F70(v13);
    *(_DWORD *)(v11 + 16) |= 0x800u;
    *(_DWORD *)(v11 + 100) = v14;
    goto LABEL_10;
  }
}

void sub_E30E14(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)(a4 + 16) |= 1u;
  uint64_t v8 = *(void *)(a4 + 24);
  if (!v8)
  {
    uint64_t v14 = *(void *)(a4 + 8);
    uint64_t v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
    if (v14) {
      uint64_t v15 = (void *)*v15;
    }
    uint64_t v8 = sub_13D72B4((uint64_t)v15);
    *(void *)(a4 + 24) = v8;
    uint64_t v9 = sub_638A20((uint64_t)a2);
    if (*(unsigned char *)(a1 + 11)) {
      goto LABEL_3;
    }
LABEL_12:
    int v13 = *(_DWORD *)(a4 + 16);
    goto LABEL_13;
  }
  uint64_t v9 = sub_638A20((uint64_t)a2);
  if (!*(unsigned char *)(a1 + 11)) {
    goto LABEL_12;
  }
LABEL_3:
  int v11 = a3 - v10;
  if (a3 >= v9) {
    int v12 = a3 - v9;
  }
  else {
    int v12 = 0;
  }
  if (a3 < v10) {
    int v11 = 0;
  }
  int v13 = *(_DWORD *)(a4 + 16) | 0xC0000;
  *(_DWORD *)(a4 + 132) = v12;
  *(_DWORD *)(a4 + 136) = v11;
LABEL_13:
  if (v9 < 0) {
    __int16 v16 = -50;
  }
  else {
    __int16 v16 = 50;
  }
  if (v10 < 0) {
    __int16 v17 = -50;
  }
  else {
    __int16 v17 = 50;
  }
  *(_DWORD *)(a4 + 16) = v13 | 0x180;
  *(_DWORD *)(a4 + 80) = (int)v9 / 100
                       + ((5243 * (__int16)(v16 + (int)v9 % 100)) >> 19)
                       + ((5243 * (__int16)(v16 + (int)v9 % 100)) >> 31);
  *(_DWORD *)(a4 + 84) = (int)v10 / 100
                       + ((5243 * (__int16)(v17 + (int)v10 % 100)) >> 19)
                       + ((5243 * (__int16)(v17 + (int)v10 % 100)) >> 31);
  if (sub_638AF0(a2))
  {
    int v18 = sub_4F44(a2);
    *(_DWORD *)(a4 + 16) |= 0x2000u;
    *(_DWORD *)(a4 + 112) = v18;
  }
  unsigned int v19 = sub_638A18((uint64_t)a2);
  int v20 = sub_E15F70(v19);
  *(_DWORD *)(a4 + 16) |= 0x800u;
  *(_DWORD *)(a4 + 100) = v20;
  if (sub_7C4984((uint64_t)a2) != -1)
  {
    int v21 = sub_7C4984((uint64_t)a2);
    *(_DWORD *)(v8 + 16) |= 0x10u;
    *(_DWORD *)(v8 + 124) = v21;
  }
  __int16 v22 = (void *)sub_638F80((uint64_t)a2);
  if (!sub_45FB38(v22))
  {
    uint64_t v23 = (const std::string **)sub_638F80((uint64_t)a2);
    uint64_t v24 = *(_DWORD **)(v8 + 40);
    if (v24 && (uint64_t v25 = *(int *)(v8 + 32), (int)v25 < *v24))
    {
      *(_DWORD *)(v8 + 32) = v25 + 1;
      uint64_t v26 = *(void *)&v24[2 * v25 + 2];
    }
    else
    {
      sub_13D6A1C(*(void *)(v8 + 24));
      uint64_t v26 = sub_188CDC8(v8 + 24, v27);
    }
    sub_5F4D30(v23, v26);
  }
  uint64_t v28 = sub_638A44((uint64_t)a2);
  uint64_t v29 = *(const std::string ***)v28;
  uint64_t v30 = *(const std::string ***)(v28 + 8);
  if (*(const std::string ***)v28 != v30)
  {
    do
    {
      while (1)
      {
        uint64_t v33 = *(_DWORD **)(v8 + 64);
        if (v33)
        {
          uint64_t v34 = *(int *)(v8 + 56);
          if ((int)v34 < *v33) {
            break;
          }
        }
        sub_13D6A1C(*(void *)(v8 + 48));
        uint64_t v32 = sub_188CDC8(v8 + 48, v31);
        sub_5F4D30(v29, v32);
        v29 += 20;
        if (v29 == v30) {
          goto LABEL_35;
        }
      }
      *(_DWORD *)(v8 + 56) = v34 + 1;
      sub_5F4D30(v29, *(void *)&v33[2 * v34 + 2]);
      v29 += 20;
    }
    while (v29 != v30);
  }
LABEL_35:
  if (sub_7C497C((uint64_t)a2))
  {
    int v35 = sub_7C497C((uint64_t)a2);
    int v36 = sub_E12460(v35);
    *(_DWORD *)(v8 + 16) |= 8u;
    *(_DWORD *)(v8 + 120) = v36;
  }
  if (sub_7C49F4((uint64_t)a2))
  {
    uint64_t v40 = sub_393AA8((uint64_t)a2);
    *(_DWORD *)(v8 + 16) |= 2u;
    uint64_t v41 = *(void *)(v8 + 104);
    if (!v41)
    {
      uint64_t v42 = *(void *)(v8 + 8);
      BOOL v43 = (void *)(v42 & 0xFFFFFFFFFFFFFFFCLL);
      if (v42) {
        BOOL v43 = (void *)*v43;
      }
      uint64_t v41 = sub_13D7210((uint64_t)v43);
      *(void *)(v8 + 104) = v41;
    }
    sub_E15D50(v40, v41);
    uint64_t v44 = sub_7C498C((uint64_t)a2);
    if (!sub_6F2880(v44))
    {
LABEL_39:
      if (sub_638A88((uint64_t)a2) == 0x7FFFFFFFFFFFFFFFLL) {
        goto LABEL_40;
      }
      goto LABEL_56;
    }
  }
  else
  {
    uint64_t v37 = sub_7C498C((uint64_t)a2);
    if (!sub_6F2880(v37)) {
      goto LABEL_39;
    }
  }
  uint64_t v45 = sub_7C498C((uint64_t)a2);
  *(_DWORD *)(v8 + 16) |= 1u;
  uint64_t v46 = *(void *)(v8 + 96);
  if (!v46)
  {
    uint64_t v47 = *(void *)(v8 + 8);
    long long v48 = (void *)(v47 & 0xFFFFFFFFFFFFFFFCLL);
    if (v47) {
      long long v48 = (void *)*v48;
    }
    uint64_t v46 = sub_15C1DB0((uint64_t)v48);
    *(void *)(v8 + 96) = v46;
  }
  *(_DWORD *)(v46 + 40) |= 4u;
  uint64_t v49 = *(void *)(v46 + 8);
  unint64_t v50 = (uint64_t *)(v49 & 0xFFFFFFFFFFFFFFFCLL);
  if (v49) {
    unint64_t v50 = (uint64_t *)*v50;
  }
  sub_1881DF4((std::string **)(v46 + 64), (long long *)(v45 + 8), v50);
  int v51 = *(_DWORD *)v45;
  *(_DWORD *)(v46 + 40) |= 0x10u;
  *(_DWORD *)(v46 + 80) = v51;
  if (sub_638A88((uint64_t)a2) == 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_40:
    int64x2_t v38 = sub_638F88((uint64_t)a2);
    int v39 = v38[8];
    if (v39 != 1) {
      goto LABEL_41;
    }
LABEL_66:
    if (v38[1] == -1 && *v38 == -1 && *((void *)v38 + 1) == *((void *)v38 + 2)) {
      return;
    }
    goto LABEL_69;
  }
LABEL_56:
  int v52 = *(unsigned __int8 *)(a1 + 11);
  uint64_t v53 = sub_638A88((uint64_t)a2);
  if (v52)
  {
    if (v53 >= a3) {
      int v54 = 0;
    }
    else {
      int v54 = a3 - sub_638A88((uint64_t)a2);
    }
    *(_DWORD *)(a4 + 16) |= 0x100000u;
    *(_DWORD *)(a4 + 140) = v54;
    int64x2_t v38 = sub_638F88((uint64_t)a2);
    int v39 = v38[8];
    if (v39 == 1) {
      goto LABEL_66;
    }
  }
  else
  {
    if (v53 < 0) {
      __int16 v55 = -50;
    }
    else {
      __int16 v55 = 50;
    }
    *(_DWORD *)(a4 + 16) |= 0x4000u;
    *(_DWORD *)(a4 + 116) = (int)v53 / 100
                          + ((5243 * (__int16)(v55 + (int)v53 % 100)) >> 19)
                          + ((5243 * (__int16)(v55 + (int)v53 % 100)) >> 31);
    int64x2_t v38 = sub_638F88((uint64_t)a2);
    int v39 = v38[8];
    if (v39 == 1) {
      goto LABEL_66;
    }
  }
LABEL_41:
  if (v39 || *v38 == -1) {
    return;
  }
LABEL_69:
  __n128 v56 = sub_638F88((uint64_t)a2);
  *(_DWORD *)(v8 + 16) |= 4u;
  uint64_t v58 = *(void *)(v8 + 112);
  if (!v58)
  {
    uint64_t v59 = *(void *)(v8 + 8);
    uint64_t v60 = (void *)(v59 & 0xFFFFFFFFFFFFFFFCLL);
    if (v59) {
      uint64_t v60 = (void *)*v60;
    }
    uint64_t v58 = sub_13DAB08((uint64_t)v60);
    *(void *)(v8 + 112) = v58;
  }

  sub_523A2C((uint64_t)v56, v58, v57);
}

uint64_t sub_E31398(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_638A20((uint64_t)a2);
  uint64_t v77 = a1;
  if (*(unsigned char *)(a1 + 11))
  {
    int v10 = a3 - v9;
    if (a3 >= v8) {
      int v11 = a3 - v8;
    }
    else {
      int v11 = 0;
    }
    if (a3 < v9) {
      int v10 = 0;
    }
    int v12 = *(_DWORD *)(a4 + 16) | 0xC0000;
    *(_DWORD *)(a4 + 132) = v11;
    *(_DWORD *)(a4 + 136) = v10;
  }
  else
  {
    int v12 = *(_DWORD *)(a4 + 16);
  }
  int v76 = a3;
  if (v8 < 0) {
    __int16 v13 = -50;
  }
  else {
    __int16 v13 = 50;
  }
  if (v9 < 0) {
    __int16 v14 = -50;
  }
  else {
    __int16 v14 = 50;
  }
  *(_DWORD *)(a4 + 16) = v12 | 0x180;
  *(_DWORD *)(a4 + 80) = (int)v8 / 100
                       + ((5243 * (__int16)(v13 + (int)v8 % 100)) >> 19)
                       + ((5243 * (__int16)(v13 + (int)v8 % 100)) >> 31);
  *(_DWORD *)(a4 + 84) = (int)v9 / 100
                       + ((5243 * (__int16)(v14 + (int)v9 % 100)) >> 19)
                       + ((5243 * (__int16)(v14 + (int)v9 % 100)) >> 31);
  if (sub_638AF0(a2))
  {
    int v15 = sub_4F44(a2);
    *(_DWORD *)(a4 + 16) |= 0x2000u;
    *(_DWORD *)(a4 + 112) = v15;
  }
  unsigned int v16 = sub_638A18((uint64_t)a2);
  int v17 = sub_E15F70(v16);
  *(_DWORD *)(a4 + 16) |= 0x800u;
  *(_DWORD *)(a4 + 100) = v17;
  char v18 = sub_63971C((uint64_t)a2);
  *(_DWORD *)(a4 + 16) |= 0x8000u;
  *(unsigned char *)(a4 + 120) = v18;
  char v19 = sub_638A3C((uint64_t)a2);
  *(_DWORD *)(a4 + 16) |= 0x200000u;
  *(unsigned char *)(a4 + 144) = v19;
  double v20 = sub_638A70((uint64_t)a2);
  if (*(uint64_t *)&v20 > -1 && ((*(void *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
    || (unint64_t)(*(void *)&v20 - 1) < 0xFFFFFFFFFFFFFLL
    || (*(void *)&v20 & 0x7FFFFFFFFFFFFFFFLL) == 0)
  {
    double v24 = sub_638A70((uint64_t)a2);
    *(_DWORD *)(a4 + 16) |= 0x200u;
    *(double *)(a4 + 88) = v24 / 3.6;
  }
  double v25 = sub_638A78((uint64_t)a2);
  if (*(uint64_t *)&v25 > -1 && ((*(void *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
    || (unint64_t)(*(void *)&v25 - 1) < 0xFFFFFFFFFFFFFLL
    || (*(void *)&v25 & 0x7FFFFFFFFFFFFFFFLL) == 0)
  {
    double v29 = sub_638A78((uint64_t)a2);
    *(_DWORD *)(a4 + 16) |= 0x1000u;
    *(double *)(a4 + 104) = v29 / 3.6;
  }
  if (sub_639798((uint64_t)a2) != -1)
  {
    int v30 = sub_639798((uint64_t)a2);
    *(_DWORD *)(a4 + 16) |= 0x20000u;
    *(_DWORD *)(a4 + 128) = v30;
  }
  uint64_t v31 = sub_638A80((uint64_t)a2);
  uint64_t v32 = *(_DWORD **)v31;
  uint64_t v33 = *(_DWORD **)(v31 + 8);
  if (*(_DWORD **)v31 != v33)
  {
    *(_DWORD *)(a4 + 16) |= 0x20u;
    uint64_t v34 = *(void *)(a4 + 64);
    if (!v34)
    {
      uint64_t v35 = v31;
      uint64_t v36 = *(void *)(a4 + 8);
      uint64_t v37 = (void *)(v36 & 0xFFFFFFFFFFFFFFFCLL);
      if (v36) {
        uint64_t v37 = (void *)*v37;
      }
      uint64_t v34 = sub_13D7070((uint64_t)v37);
      *(void *)(a4 + 64) = v34;
      uint64_t v32 = *(_DWORD **)v35;
      uint64_t v33 = *(_DWORD **)(v35 + 8);
    }
    if (v32 != v33)
    {
      int64x2_t v38 = (unsigned int *)(v34 + 16);
      unsigned int v39 = *(_DWORD *)(v34 + 16);
      do
      {
        while (1)
        {
          BOOL v40 = *v32 == 1;
          if (v39 == *(_DWORD *)(v34 + 20)) {
            break;
          }
          *(_DWORD *)(*(void *)(v34 + 24) + 4 * v39++) = v40;
          *int64x2_t v38 = v39;
          if (++v32 == v33) {
            goto LABEL_53;
          }
        }
        sub_188C80C((unsigned int *)(v34 + 16), v39 + 1);
        *(_DWORD *)(*(void *)(v34 + 24) + 4 * v39++) = v40;
        *int64x2_t v38 = v39;
        ++v32;
      }
      while (v32 != v33);
    }
  }
LABEL_53:
  *(_DWORD *)(a4 + 16) |= 2u;
  uint64_t v41 = *(void *)(a4 + 32);
  if (!v41)
  {
    uint64_t v42 = *(void *)(a4 + 8);
    BOOL v43 = (void *)(v42 & 0xFFFFFFFFFFFFFFFCLL);
    if (v42) {
      BOOL v43 = (void *)*v43;
    }
    uint64_t v41 = sub_13D73E0((uint64_t)v43);
    *(void *)(a4 + 32) = v41;
  }
  uint64_t v44 = (void *)sub_638A44((uint64_t)a2);
  sub_188CC60(v41 + 24, -858993459 * ((v44[1] - *v44) >> 5));
  uint64_t v45 = sub_638A44((uint64_t)a2);
  uint64_t v47 = *(const std::string ***)v45;
  uint64_t v46 = *(const std::string ***)(v45 + 8);
  while (v47 != v46)
  {
    unint64_t v50 = *(_DWORD **)(v41 + 40);
    if (v50 && (uint64_t v51 = *(int *)(v41 + 32), (int)v51 < *v50))
    {
      *(_DWORD *)(v41 + 32) = v51 + 1;
      uint64_t v49 = *(void *)&v50[2 * v51 + 2];
    }
    else
    {
      sub_13D6A1C(*(void *)(v41 + 24));
      uint64_t v49 = sub_188CDC8(v41 + 24, v48);
    }
    sub_5F4D30(v47, v49);
    v47 += 20;
  }
  int v52 = sub_691F8((uint64_t)a2);
  *(_DWORD *)(v41 + 16) |= 8u;
  *(_DWORD *)(v41 + 84) = v52;
  int v53 = sub_69124((uint64_t)a2);
  *(_DWORD *)(v41 + 16) |= 0x10u;
  *(_DWORD *)(v41 + 88) = v53;
  int v54 = sub_6396F4((uint64_t)a2);
  if ((v54 - 1) >= 4) {
    int v55 = 0;
  }
  else {
    int v55 = v54;
  }
  *(_DWORD *)(v41 + 16) |= 0x80u;
  *(_DWORD *)(v41 + 100) = v55;
  char v56 = sub_639714((uint64_t)a2);
  *(_DWORD *)(v41 + 16) |= 0x20u;
  *(unsigned char *)(v41 + 92) = v56;
  if (!sub_639BE8((uint64_t)a2))
  {
    uint8x8_t v57 = (_DWORD *)sub_63970C((uint64_t)a2);
    if (!sub_6383D8(v57)) {
      goto LABEL_69;
    }
LABEL_72:
    int v63 = sub_6396FC((uint64_t)a2);
    if (v63 < 0) {
      char v64 = -5;
    }
    else {
      char v64 = 5;
    }
    *(_DWORD *)(v41 + 16) |= 1u;
    *(_DWORD *)(v41 + 72) = v63 / 10
                          + (((103 * (char)(v64 + v63 % 10)) >> 15) & 1)
                          + ((103 * (char)(v64 + v63 % 10)) >> 10);
    int v65 = sub_639704((uint64_t)a2);
    if (v65 < 0) {
      char v66 = -5;
    }
    else {
      char v66 = 5;
    }
    *(_DWORD *)(v41 + 16) |= 2u;
    *(_DWORD *)(v41 + 76) = v65 / 10
                          + (((103 * (char)(v66 + v65 % 10)) >> 15) & 1)
                          + ((103 * (char)(v66 + v65 % 10)) >> 10);
    uint64_t result = sub_69154((uint64_t)a2);
    uint64_t v59 = *(int **)result;
    uint64_t v60 = *(int **)(result + 8);
    if (*(int **)result == v60) {
      goto LABEL_90;
    }
    goto LABEL_86;
  }
  int v61 = sub_486A4C((uint64_t)a2);
  *(_DWORD *)(v41 + 16) |= 0x40u;
  *(_DWORD *)(v41 + 96) = v61;
  uint64_t v62 = (_DWORD *)sub_63970C((uint64_t)a2);
  if (sub_6383D8(v62)) {
    goto LABEL_72;
  }
LABEL_69:
  uint64_t result = sub_69154((uint64_t)a2);
  uint64_t v59 = *(int **)result;
  uint64_t v60 = *(int **)(result + 8);
  if (*(int **)result == v60) {
    goto LABEL_90;
  }
  do
  {
LABEL_86:
    uint64_t result = sub_6383F4((uint64_t)v59);
    if (result)
    {
      uint64_t v74 = *(_DWORD **)(v41 + 64);
      if (v74 && (uint64_t v75 = *(int *)(v41 + 56), (int)v75 < *v74))
      {
        *(_DWORD *)(v41 + 56) = v75 + 1;
        uint64_t result = *(void *)&v74[2 * v75 + 2];
      }
      else
      {
        uint64_t v67 = sub_13D7364(*(void *)(v41 + 48));
        uint64_t result = sub_188CDC8(v41 + 48, v67);
      }
      int v68 = *v59;
      int v69 = *(_DWORD *)(result + 16);
      *(_DWORD *)(result + 16) = v69 | 1;
      int v70 = v59[1];
      int v71 = v70 / 10;
      int v72 = v70 % 10;
      if (v70 < 0) {
        char v73 = -5;
      }
      else {
        char v73 = 5;
      }
      *(_DWORD *)(result + 16) = v69 | 3;
      *(_DWORD *)(result + 24) = v68;
      *(_DWORD *)(result + 28) = v71
                               + (((103 * (char)(v73 + v72)) >> 15) & 1)
                               + ((103 * (char)(v73 + v72)) >> 10);
    }
    v59 += 3;
  }
  while (v59 != v60);
LABEL_90:
  if (*(unsigned char *)(v77 + 11))
  {
    *(_DWORD *)(a4 + 16) |= 0x100000u;
    *(_DWORD *)(a4 + 140) = v76;
  }
  return result;
}

void sub_E31A1C(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 16) |= 0x40u;
  uint64_t v5 = *(void **)(a3 + 72);
  if (v5)
  {
    if (!sub_638AF0(a2)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v18 = *(void *)(a3 + 8);
  char v19 = (void *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
  if (v18) {
    char v19 = (void *)*v19;
  }
  uint64_t v5 = sub_13D7194((uint64_t)v19);
  *(void *)(a3 + 72) = v5;
  if (sub_638AF0(a2))
  {
LABEL_3:
    int v6 = sub_4F44(a2);
    *(_DWORD *)(a3 + 16) |= 0x2000u;
    *(_DWORD *)(a3 + 112) = v6;
  }
LABEL_4:
  unsigned int v7 = sub_638A18((uint64_t)a2);
  int v8 = sub_E15F70(v7);
  *(_DWORD *)(a3 + 16) |= 0x800u;
  *(_DWORD *)(a3 + 100) = v8;
  if (sub_6390F8((uint64_t)a2))
  {
    uint64_t v9 = (const std::string **)sub_638F28((uint64_t)a2);
    *((_DWORD *)v5 + 4) |= 1u;
    uint64_t v10 = v5[3];
    if (!v10)
    {
      uint64_t v11 = v5[1];
      int v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
      if (v11) {
        int v12 = (void *)*v12;
      }
      sub_13D6A1C((uint64_t)v12);
      uint64_t v10 = v13;
      v5[3] = v13;
    }
    sub_5F4D30(v9, v10);
  }
  __int16 v14 = (void *)sub_638A44((uint64_t)a2);
  if (*v14 != v14[1])
  {
    int v15 = *(const std::string ***)sub_638A44((uint64_t)a2);
    *((_DWORD *)v5 + 4) |= 2u;
    uint64_t v16 = v5[4];
    if (v16)
    {
      int v17 = v15;
    }
    else
    {
      uint64_t v20 = v5[1];
      int v21 = (void *)(v20 & 0xFFFFFFFFFFFFFFFCLL);
      if (v20) {
        int v21 = (void *)*v21;
      }
      sub_13D6A1C((uint64_t)v21);
      uint64_t v16 = v22;
      v5[4] = v22;
      int v17 = v15;
    }
    sub_5F4D30(v17, v16);
  }
}

void sub_E31BBC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v10 = sub_638A20(a3);
  if (*(unsigned char *)(a1 + 11))
  {
    uint64_t v12 = *(void *)(a2 + 120);
    int v13 = v12 - v10;
    int v14 = v12 - v11;
    if (v12 < v10) {
      int v13 = 0;
    }
    if (v12 < v11) {
      int v14 = 0;
    }
    int v15 = *(_DWORD *)(a5 + 16) | 0xC0000;
    *(_DWORD *)(a5 + 132) = v13;
    *(_DWORD *)(a5 + 136) = v14;
  }
  else
  {
    int v15 = *(_DWORD *)(a5 + 16);
  }
  if (v10 < 0) {
    __int16 v16 = -50;
  }
  else {
    __int16 v16 = 50;
  }
  if (v11 < 0) {
    __int16 v17 = -50;
  }
  else {
    __int16 v17 = 50;
  }
  *(_DWORD *)(a5 + 16) = v15 | 0x180;
  *(_DWORD *)(a5 + 80) = (int)v10 / 100
                       + ((5243 * (__int16)(v16 + (int)v10 % 100)) >> 19)
                       + ((5243 * (__int16)(v16 + (int)v10 % 100)) >> 31);
  *(_DWORD *)(a5 + 84) = (int)v11 / 100
                       + ((5243 * (__int16)(v17 + (int)v11 % 100)) >> 19)
                       + ((5243 * (__int16)(v17 + (int)v11 % 100)) >> 31);
  unsigned int v18 = sub_638A18(a3);
  int v19 = sub_E15F70(v18);
  *(_DWORD *)(a5 + 16) |= 0x800u;
  *(_DWORD *)(a5 + 100) = v19;
  uint64_t v20 = *(void *)(a2 + 1808) + 336 * sub_46E118(a3);
  *(_DWORD *)(a5 + 16) |= 4u;
  uint64_t v21 = *(void *)(a5 + 40);
  if (v21)
  {
    uint64_t v22 = (void *)sub_638F80(a3);
    if (sub_45FB38(v22)) {
      goto LABEL_16;
    }
LABEL_21:
    uint64_t v27 = (const std::string **)sub_638F80(a3);
    uint64_t v28 = *(_DWORD **)(v21 + 80);
    if (v28 && (uint64_t v29 = *(int *)(v21 + 72), (int)v29 < *v28))
    {
      *(_DWORD *)(v21 + 72) = v29 + 1;
      uint64_t v30 = *(void *)&v28[2 * v29 + 2];
    }
    else
    {
      sub_13D6A1C(*(void *)(v21 + 64));
      uint64_t v30 = sub_188CDC8(v21 + 64, v31);
    }
    sub_5F4D30(v27, v30);
    uint64_t v58 = a3;
    unsigned __int8 v23 = sub_682244(v20);
    if (!v23) {
      goto LABEL_63;
    }
    goto LABEL_26;
  }
  uint64_t v24 = *(void *)(a5 + 8);
  double v25 = (void *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
  if (v24) {
    double v25 = (void *)*v25;
  }
  uint64_t v21 = sub_13D75B4((uint64_t)v25);
  *(void *)(a5 + 40) = v21;
  uint64_t v26 = (void *)sub_638F80(a3);
  if (!sub_45FB38(v26)) {
    goto LABEL_21;
  }
LABEL_16:
  uint64_t v58 = a3;
  unsigned __int8 v23 = sub_682244(v20);
  if (!v23) {
    goto LABEL_63;
  }
LABEL_26:
  uint64_t v32 = 0;
  if (a4 == 1) {
    int v33 = 16;
  }
  else {
    int v33 = 256;
  }
  uint64_t v59 = v23;
  do
  {
    uint64_t v36 = *(_DWORD **)(v21 + 32);
    if (v36 && (uint64_t v37 = *(int *)(v21 + 24), (int)v37 < *v36))
    {
      *(_DWORD *)(v21 + 24) = v37 + 1;
      uint64_t v38 = *(void *)&v36[2 * v37 + 2];
    }
    else
    {
      uint64_t v39 = sub_13D74A0(*(void *)(v21 + 16));
      uint64_t v38 = sub_188CDC8(v21 + 16, v39);
    }
    char v40 = sub_682F48(v20, v32);
    *(_DWORD *)(v38 + 16) |= 1u;
    *(unsigned char *)(v38 + 48) = v40;
    char v41 = sub_6847A0(v20, v32);
    *(_DWORD *)(v38 + 16) |= 2u;
    *(unsigned char *)(v38 + 49) = v41;
    uint64_t v42 = sub_6838A0(v20, v32);
    BOOL v43 = (unsigned char *)*v42;
    uint64_t v44 = (unsigned char *)v42[1];
    if ((unsigned char *)*v42 != v44)
    {
      do
      {
        int v45 = 128;
        switch(*v43)
        {
          case 1:
          case 7:
          case 0xA:
            goto LABEL_52;
          case 2:
          case 9:
          case 0xB:
            int v45 = 2;
            uint64_t v46 = *(_DWORD **)(v38 + 40);
            if (!v46) {
              goto LABEL_56;
            }
            goto LABEL_53;
          case 3:
            int v45 = 64;
            uint64_t v46 = *(_DWORD **)(v38 + 40);
            if (!v46) {
              goto LABEL_56;
            }
            goto LABEL_53;
          case 4:
            int v45 = 4;
            uint64_t v46 = *(_DWORD **)(v38 + 40);
            if (!v46) {
              goto LABEL_56;
            }
            goto LABEL_53;
          case 5:
            int v45 = 32;
            uint64_t v46 = *(_DWORD **)(v38 + 40);
            if (!v46) {
              goto LABEL_56;
            }
            goto LABEL_53;
          case 6:
            int v45 = 8;
            uint64_t v46 = *(_DWORD **)(v38 + 40);
            if (!v46) {
              goto LABEL_56;
            }
            goto LABEL_53;
          case 8:
            int v45 = 1;
            uint64_t v46 = *(_DWORD **)(v38 + 40);
            if (!v46) {
              goto LABEL_56;
            }
            goto LABEL_53;
          case 0xC:
            int v45 = 1;
LABEL_52:
            uint64_t v46 = *(_DWORD **)(v38 + 40);
            if (v46) {
              goto LABEL_53;
            }
            goto LABEL_56;
          case 0xD:
            int v45 = v33;
            uint64_t v46 = *(_DWORD **)(v38 + 40);
            if (!v46) {
              goto LABEL_56;
            }
LABEL_53:
            uint64_t v47 = *(int *)(v38 + 32);
            if ((int)v47 >= *v46)
            {
LABEL_56:
              uint64_t v49 = sub_13D753C(*(void *)(v38 + 24));
              uint64_t v48 = sub_188CDC8(v38 + 24, (uint64_t)v49);
            }
            else
            {
              *(_DWORD *)(v38 + 32) = v47 + 1;
              uint64_t v48 = *(void *)&v46[2 * v47 + 2];
            }
            *(_DWORD *)(v48 + 16) |= 2u;
            *(_DWORD *)(v48 + 28) = v45;
            break;
          default:
            break;
        }
        ++v43;
      }
      while (v43 != v44);
    }
    if (!*(_DWORD *)(v38 + 32))
    {
      uint64_t v50 = *(void *)(v38 + 40);
      if (v50 && *(int *)v50 >= 1)
      {
        *(_DWORD *)(v38 + 32) = 1;
        uint64_t v35 = *(void *)(v50 + 8);
      }
      else
      {
        uint64_t v34 = sub_13D753C(*(void *)(v38 + 24));
        uint64_t v35 = sub_188CDC8(v38 + 24, (uint64_t)v34);
      }
      *(_DWORD *)(v35 + 16) |= 2u;
      *(_DWORD *)(v35 + 28) = 1;
    }
    ++v32;
  }
  while (v32 != v59);
LABEL_63:
  uint64_t v51 = sub_638A44(v58);
  int v52 = *(const std::string ***)v51;
  int v53 = *(const std::string ***)(v51 + 8);
  if (*(const std::string ***)v51 != v53)
  {
    do
    {
      while (1)
      {
        char v56 = *(_DWORD **)(v21 + 56);
        if (v56)
        {
          uint64_t v57 = *(int *)(v21 + 48);
          if ((int)v57 < *v56) {
            break;
          }
        }
        sub_13D6A1C(*(void *)(v21 + 40));
        uint64_t v55 = sub_188CDC8(v21 + 40, v54);
        sub_5F4D30(v52, v55);
        v52 += 20;
        if (v52 == v53) {
          return;
        }
      }
      *(_DWORD *)(v21 + 48) = v57 + 1;
      sub_5F4D30(v52, *(void *)&v56[2 * v57 + 2]);
      v52 += 20;
    }
    while (v52 != v53);
  }
}

void sub_E320D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1883FB0((void *)(a3 + 16), dword_254EAA8, 11, (uint64_t)&off_252CE78, 0);
  unsigned int v7 = *(unsigned int **)(a2 + 1736);
  uint64_t v34 = *(unsigned int **)(a2 + 1744);
  uint64_t v35 = a2;
  if (v7 != v34)
  {
    uint64_t v8 = v6;
    uint64_t v9 = (uint64_t **)(v6 + 24);
    while (1)
    {
      uint64_t v10 = *(_DWORD **)(a3 + 144);
      if (v10 && (uint64_t v11 = *(int *)(a3 + 136), (int)v11 < *v10))
      {
        *(_DWORD *)(a3 + 136) = v11 + 1;
        uint64_t v12 = *(void *)&v10[2 * v11 + 2];
      }
      else
      {
        sub_13D7104(*(void *)(a3 + 128));
        uint64_t v12 = sub_188CDC8(a3 + 128, v13);
      }
      int v14 = sub_639790((uint64_t)v7);
      uint64_t v15 = 96;
      if (v14) {
        uint64_t v15 = 120;
      }
      sub_E31398(a1, v7, *(void *)(v35 + v15), v12);
      if (*(unsigned char *)(a1 + 11))
      {
        uint64_t v16 = sub_68EE4((uint64_t)v7);
        unsigned int v18 = *(long long ***)v16;
        __int16 v17 = *(long long ***)(v16 + 8);
        if (*(long long ***)v16 != v17) {
          break;
        }
        goto LABEL_3;
      }
      int v19 = *(_DWORD *)(a3 + 40);
      int v20 = (v19 & 0x40000000) != 0 ? *(_DWORD *)(a3 + 316) : *(_DWORD *)(a3 + 320);
      int v21 = v19 >= 0 ? *(_DWORD *)(a3 + 316) : *(_DWORD *)(a3 + 320);
      int v22 = sub_639790((uint64_t)v7) ? v21 : v20;
      *(_DWORD *)(v12 + 16) |= 0x400u;
      *(_DWORD *)(v12 + 96) = v22;
      uint64_t v23 = sub_68EE4((uint64_t)v7);
      unsigned int v18 = *(long long ***)v23;
      __int16 v17 = *(long long ***)(v23 + 8);
      if (*(long long ***)v23 != v17) {
        break;
      }
LABEL_3:
      v7 += 102;
      if (v7 == v34) {
        return;
      }
    }
    while (1)
    {
      sub_635CD0(v18, (uint64_t)__p);
      uint64_t v24 = *(int **)(v8 + 40);
      if (!v24) {
        break;
      }
      uint64_t v25 = *(int *)(v8 + 32);
      int v26 = *v24;
      if ((int)v25 >= *v24)
      {
        if (v26 == *(_DWORD *)(v8 + 36)) {
          goto LABEL_33;
        }
LABEL_34:
        *uint64_t v24 = v26 + 1;
        if (!*v9) {
          operator new();
        }
        uint64_t *v30 = v29;
        v30[1] = (uint64_t)sub_3A6EDC;
        long long v31 = *(_OWORD *)__p;
        *(void *)(v29 + 16) = v37;
        *(_OWORD *)uint64_t v29 = v31;
        __p[1] = 0;
        uint64_t v37 = 0;
        __p[0] = 0;
        uint64_t v32 = *(void *)(v8 + 40);
        uint64_t v33 = *(int *)(v8 + 32);
        *(_DWORD *)(v8 + 32) = v33 + 1;
        *(void *)(v32 + 8 * v33 + 8) = v29;
        if (SHIBYTE(v37) < 0) {
          operator delete(__p[0]);
        }
        v18 += 13;
        if (v18 == v17) {
          goto LABEL_3;
        }
      }
      else
      {
        *(_DWORD *)(v8 + 32) = v25 + 1;
        uint64_t v27 = *(void *)&v24[2 * v25 + 2];
        if (*(char *)(v27 + 23) < 0) {
          operator delete(*(void **)v27);
        }
        long long v28 = *(_OWORD *)__p;
        *(void *)(v27 + 16) = v37;
        *(_OWORD *)uint64_t v27 = v28;
        v18 += 13;
        if (v18 == v17) {
          goto LABEL_3;
        }
      }
    }
    int v26 = *(_DWORD *)(v8 + 36);
LABEL_33:
    sub_188CC60((uint64_t)v9, v26 + 1);
    uint64_t v24 = *(int **)(v8 + 40);
    int v26 = *v24;
    goto LABEL_34;
  }
}

void sub_E32390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_E323AC(uint64_t a1, int *a2)
{
  uint64_t result = (void *)sub_DE95C8(a1, a2);
  void *result = &off_243EEB8;
  return result;
}

void sub_E323E0(void (***a1)(void, uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  sub_DE8278((uint64_t)a1, a2, a3);
  uint64_t v6 = (long long *)sub_648134(a2);
  *(_DWORD *)(a3 + 40) |= 0x40u;
  uint64_t v7 = *(void *)(a3 + 8);
  uint64_t v8 = (uint64_t *)(v7 & 0xFFFFFFFFFFFFFFFCLL);
  if (v7) {
    uint64_t v8 = (uint64_t *)*v8;
  }
  sub_1881DF4((std::string **)(a3 + 704), v6, v8);
  uint64_t v9 = (long long *)sub_64818C(a2);
  *(_DWORD *)(a3 + 40) |= 0x80u;
  uint64_t v10 = *(void *)(a3 + 8);
  uint64_t v11 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
  if (v10) {
    uint64_t v11 = (uint64_t *)*v11;
  }
  sub_1881DF4((std::string **)(a3 + 712), v9, v11);
  uint64_t v12 = sub_6483B0(a2);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 23);
  if ((v13 & 0x80u) != 0) {
    uint64_t v13 = *(void *)(v12 + 8);
  }
  if (v13)
  {
    *(_DWORD *)(a3 + 40) |= 0x8000u;
    uint64_t v14 = *(void *)(a3 + 776);
    if (v14)
    {
      uint64_t v15 = (const std::string *)sub_6483B0(a2);
      uint64_t v16 = *(_DWORD **)(v14 + 40);
      if (!v16) {
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v17 = *(void *)(a3 + 8);
      unsigned int v18 = (void *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
      if (v17) {
        unsigned int v18 = (void *)*v18;
      }
      sub_13D6A1C((uint64_t)v18);
      uint64_t v14 = v19;
      *(void *)(a3 + 776) = v19;
      uint64_t v15 = (const std::string *)sub_6483B0(a2);
      uint64_t v16 = *(_DWORD **)(v14 + 40);
      if (!v16) {
        goto LABEL_16;
      }
    }
    uint64_t v20 = *(int *)(v14 + 32);
    if ((int)v20 < *v16)
    {
      *(_DWORD *)(v14 + 32) = v20 + 1;
      int v21 = *(std::string **)&v16[2 * v20 + 2];
LABEL_19:
      std::string::operator=(v21, v15);
      goto LABEL_20;
    }
LABEL_16:
    uint64_t v24 = *(uint64_t **)(v14 + 24);
    uint64_t v23 = v14 + 24;
    int v22 = v24;
    if (!v24) {
      operator new();
    }
    *int v26 = v25;
    v26[1] = sub_3A6EDC;
    *uint64_t v25 = 0;
    v25[1] = 0;
    v25[2] = 0;
    int v21 = (std::string *)sub_188CDC8(v23, (uint64_t)v25);
    goto LABEL_19;
  }
LABEL_20:
  uint64_t v27 = nullsub_1(a2);
  long long v28 = *(void **)v27;
  uint64_t v29 = *(void **)(v27 + 8);
  if (*(void **)v27 != v29)
  {
    do
    {
      sub_E325C4(a1, v28, a3);
      v28 += 1541;
    }
    while (v28 != v29);
  }
}

void sub_E325C4(void (***a1)(void, uint64_t, uint64_t), void *a2, uint64_t a3)
{
  sub_E303AC((uint64_t)a1, (uint64_t)a2, a3);
  uint64_t v6 = (unsigned int *)a2[934];
  for (unint64_t i = (unsigned int *)a2[935]; v6 != i; v6 += 102)
  {
    uint64_t v10 = a2[63];
    uint64_t v11 = *(_DWORD **)(a3 + 384);
    if (v11 && (uint64_t v12 = *(int *)(a3 + 376), (int)v12 < *v11))
    {
      *(_DWORD *)(a3 + 376) = v12 + 1;
      uint64_t v9 = *(void *)&v11[2 * v12 + 2];
    }
    else
    {
      sub_13D7104(*(void *)(a3 + 368));
      uint64_t v9 = sub_188CDC8(a3 + 368, v8);
    }
    sub_E31398((uint64_t)a1, v6, v10, v9);
  }
  uint64_t v13 = (unsigned int *)a2[931];
  for (uint64_t j = (unsigned int *)a2[932]; v13 != j; v13 += 270)
  {
    uint64_t v17 = a2[63];
    unsigned int v18 = *(_DWORD **)(a3 + 384);
    if (v18 && (uint64_t v19 = *(int *)(a3 + 376), (int)v19 < *v18))
    {
      *(_DWORD *)(a3 + 376) = v19 + 1;
      uint64_t v16 = *(void *)&v18[2 * v19 + 2];
    }
    else
    {
      sub_13D7104(*(void *)(a3 + 368));
      uint64_t v16 = sub_188CDC8(a3 + 368, v15);
    }
    sub_E30E14((uint64_t)a1, v13, v17, v16);
  }
  uint64_t v20 = (unsigned int *)a2[937];
  for (k = (unsigned int *)a2[938]; v20 != k; v20 += 204)
  {
    while (1)
    {
      uint64_t v24 = *(_DWORD **)(a3 + 384);
      if (v24)
      {
        uint64_t v25 = *(int *)(a3 + 376);
        if ((int)v25 < *v24) {
          break;
        }
      }
      sub_13D7104(*(void *)(a3 + 368));
      uint64_t v23 = sub_188CDC8(a3 + 368, v22);
      sub_E31A1C((uint64_t)a1, v20, v23);
      v20 += 204;
      if (v20 == k) {
        goto LABEL_21;
      }
    }
    *(_DWORD *)(a3 + 376) = v25 + 1;
    sub_E31A1C((uint64_t)a1, v20, *(void *)&v24[2 * v25 + 2]);
  }
LABEL_21:

  sub_E32840(a1, (uint64_t)a2, a3);
}

void sub_E327A4(void (***a1)(void, uint64_t, uint64_t), void *a2, uint64_t a3)
{
  uint64_t v6 = (void *)nullsub_1(a2);
  int v7 = 379049677 * ((uint64_t)(v6[1] - *v6) >> 3);
  if (v7)
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(*(void *)(a3 + 64) + 8 * (int)v8 + 8);
      uint64_t v10 = (void *)sub_6467E8(a2, v8);
      sub_E325C4(a1, v10, v9);
      ++v8;
    }
    while (v7 != v8);
  }
}

void sub_E32840(void (***a1)(void, uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 1072) - *(void *)(a2 + 1064);
  if (v3)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    uint64_t v9 = (void *)(a2 + 1064);
    uint64_t v10 = v3 / 2400;
    do
    {
      uint64_t v11 = sub_4A5E10(v9, v8);
      uint64_t v12 = (unsigned __int8 *)(v11 + 329);
      uint64_t v13 = *(void *)(a3 + 72) + (v7 >> 29);
      uint64_t v14 = *(void *)(v13 + 8);
      if (!*(unsigned char *)(v11 + 330)) {
        uint64_t v12 = (unsigned __int8 *)(a2 + 1057);
      }
      int v15 = *v12;
      sub_DE99E4((uint64_t)a1, v11, *(void *)(v13 + 8));
      sub_E32980((uint64_t)a1, (uint64_t *)v11, v15, v14);
      (**a1)(a1, v11, v14);
      sub_E30AA0((uint64_t)a1, (void *)v11, v14);
      ++v8;
      v7 += 0x100000000;
    }
    while (v10 != v8);
  }
}

void sub_E32980(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_1883FB0((void *)(a4 + 16), dword_254EAA8, 11, (uint64_t)&off_252CE78, 0);
  uint64_t v9 = (unsigned int *)a2[214];
  uint64_t v10 = (unsigned int *)a2[215];
  if (v9 != v10)
  {
    uint64_t v11 = v8;
    uint64_t v12 = (uint64_t **)(v8 + 48);
    while (!sub_7C49A4((uint64_t)v9))
    {
LABEL_6:
      v9 += 270;
      if (v9 == v10) {
        return;
      }
    }
    int v15 = *(_DWORD **)(a4 + 144);
    if (v15 && (uint64_t v16 = *(int *)(a4 + 136), (int)v16 < *v15))
    {
      *(_DWORD *)(a4 + 136) = v16 + 1;
      uint64_t v17 = *(void *)&v15[2 * v16 + 2];
      if (!sub_7C49E4((uint64_t)v9)) {
        goto LABEL_11;
      }
    }
    else
    {
      sub_13D7104(*(void *)(a4 + 128));
      uint64_t v17 = sub_188CDC8(a4 + 128, v18);
      if (!sub_7C49E4((uint64_t)v9))
      {
LABEL_11:
        sub_E30E14(a1, v9, a2[15], v17);
        if (!*(unsigned char *)(a1 + 11))
        {
LABEL_20:
          int v25 = *(_DWORD *)(a4 + 320);
          *(_DWORD *)(v17 + 16) |= 0x400u;
          *(_DWORD *)(v17 + 96) = v25;
          sub_638F30(v9, (uint64_t)__p);
          uint64_t v19 = *(int **)(v11 + 64);
          if (!v19) {
            goto LABEL_21;
          }
          goto LABEL_16;
        }
LABEL_15:
        sub_638F30(v9, (uint64_t)__p);
        uint64_t v19 = *(int **)(v11 + 64);
        if (!v19)
        {
LABEL_21:
          int v21 = *(_DWORD *)(v11 + 60);
          goto LABEL_22;
        }
LABEL_16:
        uint64_t v20 = *(int *)(v11 + 56);
        int v21 = *v19;
        if ((int)v20 < *v19)
        {
          *(_DWORD *)(v11 + 56) = v20 + 1;
          uint64_t v13 = *(void *)&v19[2 * v20 + 2];
          if (*(char *)(v13 + 23) < 0) {
            operator delete(*(void **)v13);
          }
          long long v14 = *(_OWORD *)__p;
          *(void *)(v13 + 16) = v30;
          *(_OWORD *)uint64_t v13 = v14;
          goto LABEL_6;
        }
        if (v21 != *(_DWORD *)(v11 + 60))
        {
          *uint64_t v19 = v21 + 1;
          uint64_t v22 = *v12;
          if (!*v12) {
            goto LABEL_23;
          }
LABEL_19:
          *uint64_t v24 = v23;
          v24[1] = (uint64_t)sub_3A6EDC;
          long long v26 = *(_OWORD *)__p;
          *(void *)(v23 + 16) = v30;
          *(_OWORD *)uint64_t v23 = v26;
          __p[1] = 0;
          uint64_t v30 = 0;
          __p[0] = 0;
          uint64_t v27 = *(void *)(v11 + 64);
          uint64_t v28 = *(int *)(v11 + 56);
          *(_DWORD *)(v11 + 56) = v28 + 1;
          *(void *)(v27 + 8 * v28 + 8) = v23;
          if (SHIBYTE(v30) < 0) {
            operator delete(__p[0]);
          }
          goto LABEL_6;
        }
LABEL_22:
        sub_188CC60((uint64_t)v12, v21 + 1);
        ++**(_DWORD **)(v11 + 64);
        uint64_t v22 = *v12;
        if (!*v12) {
LABEL_23:
        }
          operator new();
        goto LABEL_19;
      }
    }
    sub_E32C28(a1, (uint64_t)a2, (uint64_t)v9, a3, v17);
    if (!*(unsigned char *)(a1 + 11)) {
      goto LABEL_20;
    }
    goto LABEL_15;
  }
}

void sub_E32C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_E32C28(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v10 = sub_638A20(a3);
  if (*(unsigned char *)(a1 + 11))
  {
    uint64_t v12 = *(void *)(a2 + 120);
    int v13 = v12 - v10;
    int v14 = v12 - v11;
    if (v12 < v10) {
      int v13 = 0;
    }
    if (v12 < v11) {
      int v14 = 0;
    }
    int v15 = *(_DWORD *)(a5 + 16) | 0xC0000;
    *(_DWORD *)(a5 + 132) = v13;
    *(_DWORD *)(a5 + 136) = v14;
  }
  else
  {
    int v15 = *(_DWORD *)(a5 + 16);
  }
  if (v10 < 0) {
    __int16 v16 = -50;
  }
  else {
    __int16 v16 = 50;
  }
  if (v11 < 0) {
    __int16 v17 = -50;
  }
  else {
    __int16 v17 = 50;
  }
  *(_DWORD *)(a5 + 16) = v15 | 0x180;
  *(_DWORD *)(a5 + 80) = (int)v10 / 100
                       + ((5243 * (__int16)(v16 + (int)v10 % 100)) >> 19)
                       + ((5243 * (__int16)(v16 + (int)v10 % 100)) >> 31);
  *(_DWORD *)(a5 + 84) = (int)v11 / 100
                       + ((5243 * (__int16)(v17 + (int)v11 % 100)) >> 19)
                       + ((5243 * (__int16)(v17 + (int)v11 % 100)) >> 31);
  unsigned int v18 = sub_638A18(a3);
  int v19 = sub_E15F70(v18);
  *(_DWORD *)(a5 + 16) |= 0x800u;
  *(_DWORD *)(a5 + 100) = v19;
  uint64_t v20 = *(void *)(a2 + 1808) + 336 * sub_46E118(a3);
  *(_DWORD *)(a5 + 16) |= 4u;
  uint64_t v21 = *(void *)(a5 + 40);
  if (v21)
  {
    uint64_t v22 = (void *)sub_638F80(a3);
    if (sub_45FB38(v22)) {
      goto LABEL_16;
    }
LABEL_21:
    uint64_t v27 = (const std::string **)sub_638F80(a3);
    uint64_t v28 = *(_DWORD **)(v21 + 80);
    if (v28 && (uint64_t v29 = *(int *)(v21 + 72), (int)v29 < *v28))
    {
      *(_DWORD *)(v21 + 72) = v29 + 1;
      uint64_t v30 = *(void *)&v28[2 * v29 + 2];
    }
    else
    {
      sub_13D6A1C(*(void *)(v21 + 64));
      uint64_t v30 = sub_188CDC8(v21 + 64, v31);
    }
    sub_5F4D30(v27, v30);
    uint64_t v58 = a3;
    unsigned __int8 v23 = sub_682244(v20);
    if (!v23) {
      goto LABEL_63;
    }
    goto LABEL_26;
  }
  uint64_t v24 = *(void *)(a5 + 8);
  int v25 = (void *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
  if (v24) {
    int v25 = (void *)*v25;
  }
  uint64_t v21 = sub_13D75B4((uint64_t)v25);
  *(void *)(a5 + 40) = v21;
  long long v26 = (void *)sub_638F80(a3);
  if (!sub_45FB38(v26)) {
    goto LABEL_21;
  }
LABEL_16:
  uint64_t v58 = a3;
  unsigned __int8 v23 = sub_682244(v20);
  if (!v23) {
    goto LABEL_63;
  }
LABEL_26:
  uint64_t v32 = 0;
  if (a4 == 1) {
    int v33 = 16;
  }
  else {
    int v33 = 256;
  }
  uint64_t v59 = v23;
  do
  {
    uint64_t v36 = *(_DWORD **)(v21 + 32);
    if (v36 && (uint64_t v37 = *(int *)(v21 + 24), (int)v37 < *v36))
    {
      *(_DWORD *)(v21 + 24) = v37 + 1;
      uint64_t v38 = *(void *)&v36[2 * v37 + 2];
    }
    else
    {
      uint64_t v39 = sub_13D74A0(*(void *)(v21 + 16));
      uint64_t v38 = sub_188CDC8(v21 + 16, v39);
    }
    char v40 = sub_682F48(v20, v32);
    *(_DWORD *)(v38 + 16) |= 1u;
    *(unsigned char *)(v38 + 48) = v40;
    char v41 = sub_6847A0(v20, v32);
    *(_DWORD *)(v38 + 16) |= 2u;
    *(unsigned char *)(v38 + 49) = v41;
    uint64_t v42 = sub_6838A0(v20, v32);
    BOOL v43 = (unsigned char *)*v42;
    uint64_t v44 = (unsigned char *)v42[1];
    if ((unsigned char *)*v42 != v44)
    {
      do
      {
        int v45 = 128;
        switch(*v43)
        {
          case 1:
          case 7:
          case 0xA:
            goto LABEL_52;
          case 2:
          case 9:
          case 0xB:
            int v45 = 2;
            uint64_t v46 = *(_DWORD **)(v38 + 40);
            if (!v46) {
              goto LABEL_56;
            }
            goto LABEL_53;
          case 3:
            int v45 = 64;
            uint64_t v46 = *(_DWORD **)(v38 + 40);
            if (!v46) {
              goto LABEL_56;
            }
            goto LABEL_53;
          case 4:
            int v45 = 4;
            uint64_t v46 = *(_DWORD **)(v38 + 40);
            if (!v46) {
              goto LABEL_56;
            }
            goto LABEL_53;
          case 5:
            int v45 = 32;
            uint64_t v46 = *(_DWORD **)(v38 + 40);
            if (!v46) {
              goto LABEL_56;
            }
            goto LABEL_53;
          case 6:
            int v45 = 8;
            uint64_t v46 = *(_DWORD **)(v38 + 40);
            if (!v46) {
              goto LABEL_56;
            }
            goto LABEL_53;
          case 8:
            int v45 = 1;
            uint64_t v46 = *(_DWORD **)(v38 + 40);
            if (!v46) {
              goto LABEL_56;
            }
            goto LABEL_53;
          case 0xC:
            int v45 = 1;
LABEL_52:
            uint64_t v46 = *(_DWORD **)(v38 + 40);
            if (v46) {
              goto LABEL_53;
            }
            goto LABEL_56;
          case 0xD:
            int v45 = v33;
            uint64_t v46 = *(_DWORD **)(v38 + 40);
            if (!v46) {
              goto LABEL_56;
            }
LABEL_53:
            uint64_t v47 = *(int *)(v38 + 32);
            if ((int)v47 >= *v46)
            {
LABEL_56:
              uint64_t v49 = sub_13D753C(*(void *)(v38 + 24));
              uint64_t v48 = sub_188CDC8(v38 + 24, (uint64_t)v49);
            }
            else
            {
              *(_DWORD *)(v38 + 32) = v47 + 1;
              uint64_t v48 = *(void *)&v46[2 * v47 + 2];
            }
            *(_DWORD *)(v48 + 16) |= 2u;
            *(_DWORD *)(v48 + 28) = v45;
            break;
          default:
            break;
        }
        ++v43;
      }
      while (v43 != v44);
    }
    if (!*(_DWORD *)(v38 + 32))
    {
      uint64_t v50 = *(void *)(v38 + 40);
      if (v50 && *(int *)v50 >= 1)
      {
        *(_DWORD *)(v38 + 32) = 1;
        uint64_t v35 = *(void *)(v50 + 8);
      }
      else
      {
        uint64_t v34 = sub_13D753C(*(void *)(v38 + 24));
        uint64_t v35 = sub_188CDC8(v38 + 24, (uint64_t)v34);
      }
      *(_DWORD *)(v35 + 16) |= 2u;
      *(_DWORD *)(v35 + 28) = 1;
    }
    ++v32;
  }
  while (v32 != v59);
LABEL_63:
  uint64_t v51 = sub_638A44(v58);
  int v52 = *(const std::string ***)v51;
  int v53 = *(const std::string ***)(v51 + 8);
  if (*(const std::string ***)v51 != v53)
  {
    do
    {
      while (1)
      {
        char v56 = *(_DWORD **)(v21 + 56);
        if (v56)
        {
          uint64_t v57 = *(int *)(v21 + 48);
          if ((int)v57 < *v56) {
            break;
          }
        }
        sub_13D6A1C(*(void *)(v21 + 40));
        uint64_t v55 = sub_188CDC8(v21 + 40, v54);
        sub_5F4D30(v52, v55);
        v52 += 20;
        if (v52 == v53) {
          return;
        }
      }
      *(_DWORD *)(v21 + 48) = v57 + 1;
      sub_5F4D30(v52, *(void *)&v56[2 * v57 + 2]);
      v52 += 20;
    }
    while (v52 != v53);
  }
}

void sub_E33140(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1883FB0((void *)(a3 + 16), dword_254EAA8, 11, (uint64_t)&off_252CE78, 0);
  uint64_t v7 = *(unsigned int **)(a2 + 1736);
  uint64_t v34 = *(unsigned int **)(a2 + 1744);
  uint64_t v35 = a2;
  if (v7 != v34)
  {
    uint64_t v8 = v6;
    uint64_t v9 = (uint64_t **)(v6 + 24);
    while (1)
    {
      uint64_t v10 = *(_DWORD **)(a3 + 144);
      if (v10 && (uint64_t v11 = *(int *)(a3 + 136), (int)v11 < *v10))
      {
        *(_DWORD *)(a3 + 136) = v11 + 1;
        uint64_t v12 = *(void *)&v10[2 * v11 + 2];
      }
      else
      {
        sub_13D7104(*(void *)(a3 + 128));
        uint64_t v12 = sub_188CDC8(a3 + 128, v13);
      }
      int v14 = sub_639790((uint64_t)v7);
      uint64_t v15 = 96;
      if (v14) {
        uint64_t v15 = 120;
      }
      sub_E31398(a1, v7, *(void *)(v35 + v15), v12);
      if (*(unsigned char *)(a1 + 11))
      {
        uint64_t v16 = sub_68EE4((uint64_t)v7);
        unsigned int v18 = *(long long ***)v16;
        __int16 v17 = *(long long ***)(v16 + 8);
        if (*(long long ***)v16 != v17) {
          break;
        }
        goto LABEL_3;
      }
      int v19 = *(_DWORD *)(a3 + 40);
      int v20 = (v19 & 0x40000000) != 0 ? *(_DWORD *)(a3 + 316) : *(_DWORD *)(a3 + 320);
      int v21 = v19 >= 0 ? *(_DWORD *)(a3 + 316) : *(_DWORD *)(a3 + 320);
      int v22 = sub_639790((uint64_t)v7) ? v21 : v20;
      *(_DWORD *)(v12 + 16) |= 0x400u;
      *(_DWORD *)(v12 + 96) = v22;
      uint64_t v23 = sub_68EE4((uint64_t)v7);
      unsigned int v18 = *(long long ***)v23;
      __int16 v17 = *(long long ***)(v23 + 8);
      if (*(long long ***)v23 != v17) {
        break;
      }
LABEL_3:
      v7 += 102;
      if (v7 == v34) {
        return;
      }
    }
    while (1)
    {
      sub_635CD0(v18, (uint64_t)__p);
      uint64_t v24 = *(int **)(v8 + 40);
      if (!v24) {
        break;
      }
      uint64_t v25 = *(int *)(v8 + 32);
      int v26 = *v24;
      if ((int)v25 >= *v24)
      {
        if (v26 == *(_DWORD *)(v8 + 36)) {
          goto LABEL_33;
        }
LABEL_34:
        *uint64_t v24 = v26 + 1;
        if (!*v9) {
          operator new();
        }
        uint64_t *v30 = v29;
        v30[1] = (uint64_t)sub_3A6EDC;
        long long v31 = *(_OWORD *)__p;
        *(void *)(v29 + 16) = v37;
        *(_OWORD *)uint64_t v29 = v31;
        __p[1] = 0;
        uint64_t v37 = 0;
        __p[0] = 0;
        uint64_t v32 = *(void *)(v8 + 40);
        uint64_t v33 = *(int *)(v8 + 32);
        *(_DWORD *)(v8 + 32) = v33 + 1;
        *(void *)(v32 + 8 * v33 + 8) = v29;
        if (SHIBYTE(v37) < 0) {
          operator delete(__p[0]);
        }
        v18 += 13;
        if (v18 == v17) {
          goto LABEL_3;
        }
      }
      else
      {
        *(_DWORD *)(v8 + 32) = v25 + 1;
        uint64_t v27 = *(void *)&v24[2 * v25 + 2];
        if (*(char *)(v27 + 23) < 0) {
          operator delete(*(void **)v27);
        }
        long long v28 = *(_OWORD *)__p;
        *(void *)(v27 + 16) = v37;
        *(_OWORD *)uint64_t v27 = v28;
        v18 += 13;
        if (v18 == v17) {
          goto LABEL_3;
        }
      }
    }
    int v26 = *(_DWORD *)(v8 + 36);
LABEL_33:
    sub_188CC60((uint64_t)v9, v26 + 1);
    uint64_t v24 = *(int **)(v8 + 40);
    int v26 = *v24;
    goto LABEL_34;
  }
}

void sub_E333FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_E33418(uint64_t a1, int *a2)
{
  uint64_t result = (void *)sub_DEA17C(a1, a2);
  void *result = &off_243EED0;
  return result;
}

void sub_E3344C(void (***a1)(void, uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  sub_DE8278((uint64_t)a1, a2, a3);
  uint64_t v6 = (long long *)sub_648134(a2);
  *(_DWORD *)(a3 + 40) |= 0x40u;
  uint64_t v7 = *(void *)(a3 + 8);
  uint64_t v8 = (uint64_t *)(v7 & 0xFFFFFFFFFFFFFFFCLL);
  if (v7) {
    uint64_t v8 = (uint64_t *)*v8;
  }
  sub_1881DF4((std::string **)(a3 + 704), v6, v8);
  uint64_t v9 = (long long *)sub_64818C(a2);
  *(_DWORD *)(a3 + 40) |= 0x80u;
  uint64_t v10 = *(void *)(a3 + 8);
  uint64_t v11 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
  if (v10) {
    uint64_t v11 = (uint64_t *)*v11;
  }
  sub_1881DF4((std::string **)(a3 + 712), v9, v11);
  uint64_t v12 = sub_6483B0(a2);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 23);
  if ((v13 & 0x80u) != 0) {
    uint64_t v13 = *(void *)(v12 + 8);
  }
  if (v13)
  {
    *(_DWORD *)(a3 + 40) |= 0x8000u;
    uint64_t v14 = *(void *)(a3 + 776);
    if (v14)
    {
      uint64_t v15 = (const std::string *)sub_6483B0(a2);
      uint64_t v16 = *(_DWORD **)(v14 + 40);
      if (!v16) {
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v17 = *(void *)(a3 + 8);
      unsigned int v18 = (void *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
      if (v17) {
        unsigned int v18 = (void *)*v18;
      }
      sub_13D6A1C((uint64_t)v18);
      uint64_t v14 = v19;
      *(void *)(a3 + 776) = v19;
      uint64_t v15 = (const std::string *)sub_6483B0(a2);
      uint64_t v16 = *(_DWORD **)(v14 + 40);
      if (!v16) {
        goto LABEL_16;
      }
    }
    uint64_t v20 = *(int *)(v14 + 32);
    if ((int)v20 < *v16)
    {
      *(_DWORD *)(v14 + 32) = v20 + 1;
      int v21 = *(std::string **)&v16[2 * v20 + 2];
LABEL_19:
      std::string::operator=(v21, v15);
      goto LABEL_20;
    }
LABEL_16:
    uint64_t v24 = *(uint64_t **)(v14 + 24);
    uint64_t v23 = v14 + 24;
    int v22 = v24;
    if (!v24) {
      operator new();
    }
    *int v26 = v25;
    v26[1] = sub_3A6EDC;
    *uint64_t v25 = 0;
    v25[1] = 0;
    v25[2] = 0;
    int v21 = (std::string *)sub_188CDC8(v23, (uint64_t)v25);
    goto LABEL_19;
  }
LABEL_20:
  uint64_t v27 = nullsub_1(a2);
  long long v28 = *(void **)v27;
  uint64_t v29 = *(void **)(v27 + 8);
  if (*(void **)v27 != v29)
  {
    do
    {
      sub_E33630(a1, v28, a3);
      v28 += 1541;
    }
    while (v28 != v29);
  }
}

void sub_E33630(void (***a1)(void, uint64_t, uint64_t), void *a2, uint64_t a3)
{
  sub_E303AC((uint64_t)a1, (uint64_t)a2, a3);
  uint64_t v6 = (unsigned int *)a2[934];
  for (unint64_t i = (unsigned int *)a2[935]; v6 != i; v6 += 102)
  {
    uint64_t v10 = a2[63];
    uint64_t v11 = *(_DWORD **)(a3 + 384);
    if (v11 && (uint64_t v12 = *(int *)(a3 + 376), (int)v12 < *v11))
    {
      *(_DWORD *)(a3 + 376) = v12 + 1;
      uint64_t v9 = *(void *)&v11[2 * v12 + 2];
    }
    else
    {
      sub_13D7104(*(void *)(a3 + 368));
      uint64_t v9 = sub_188CDC8(a3 + 368, v8);
    }
    sub_E31398((uint64_t)a1, v6, v10, v9);
  }
  uint64_t v13 = (unsigned int *)a2[931];
  for (uint64_t j = (unsigned int *)a2[932]; v13 != j; v13 += 270)
  {
    uint64_t v17 = a2[63];
    unsigned int v18 = *(_DWORD **)(a3 + 384);
    if (v18 && (uint64_t v19 = *(int *)(a3 + 376), (int)v19 < *v18))
    {
      *(_DWORD *)(a3 + 376) = v19 + 1;
      uint64_t v16 = *(void *)&v18[2 * v19 + 2];
    }
    else
    {
      sub_13D7104(*(void *)(a3 + 368));
      uint64_t v16 = sub_188CDC8(a3 + 368, v15);
    }
    sub_E30E14((uint64_t)a1, v13, v17, v16);
  }
  uint64_t v20 = (unsigned int *)a2[937];
  for (k = (unsigned int *)a2[938]; v20 != k; v20 += 204)
  {
    while (1)
    {
      uint64_t v24 = *(_DWORD **)(a3 + 384);
      if (v24)
      {
        uint64_t v25 = *(int *)(a3 + 376);
        if ((int)v25 < *v24) {
          break;
        }
      }
      sub_13D7104(*(void *)(a3 + 368));
      uint64_t v23 = sub_188CDC8(a3 + 368, v22);
      sub_E31A1C((uint64_t)a1, v20, v23);
      v20 += 204;
      if (v20 == k) {
        goto LABEL_21;
      }
    }
    *(_DWORD *)(a3 + 376) = v25 + 1;
    sub_E31A1C((uint64_t)a1, v20, *(void *)&v24[2 * v25 + 2]);
  }
LABEL_21:

  sub_E338AC(a1, (uint64_t)a2, a3);
}

void sub_E33810(void (***a1)(void, uint64_t, uint64_t), void *a2, uint64_t a3)
{
  uint64_t v6 = (void *)nullsub_1(a2);
  int v7 = 379049677 * ((uint64_t)(v6[1] - *v6) >> 3);
  if (v7)
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(*(void *)(a3 + 64) + 8 * (int)v8 + 8);
      uint64_t v10 = (void *)sub_6467E8(a2, v8);
      sub_E33630(a1, v10, v9);
      ++v8;
    }
    while (v7 != v8);
  }
}

void sub_E338AC(void (***a1)(void, uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 1072) - *(void *)(a2 + 1064);
  if (v3)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    uint64_t v9 = (void *)(a2 + 1064);
    uint64_t v10 = v3 / 2400;
    do
    {
      uint64_t v11 = sub_4A5E10(v9, v8);
      uint64_t v12 = (unsigned __int8 *)(v11 + 329);
      uint64_t v13 = *(void *)(a3 + 72) + (v7 >> 29);
      uint64_t v14 = *(void *)(v13 + 8);
      if (!*(unsigned char *)(v11 + 330)) {
        uint64_t v12 = (unsigned __int8 *)(a2 + 1057);
      }
      int v15 = *v12;
      sub_DEA598((uint64_t)a1, v11, *(void *)(v13 + 8));
      sub_E339EC((uint64_t)a1, (uint64_t *)v11, v15, v14);
      (**a1)(a1, v11, v14);
      sub_E30AA0((uint64_t)a1, (void *)v11, v14);
      ++v8;
      v7 += 0x100000000;
    }
    while (v10 != v8);
  }
}

void sub_E339EC(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_1883FB0((void *)(a4 + 16), dword_254EAA8, 11, (uint64_t)&off_252CE78, 0);
  uint64_t v9 = (unsigned int *)a2[214];
  uint64_t v10 = (unsigned int *)a2[215];
  if (v9 != v10)
  {
    uint64_t v11 = v8;
    uint64_t v12 = (uint64_t **)(v8 + 48);
    while (!sub_7C49A4((uint64_t)v9))
    {
LABEL_6:
      v9 += 270;
      if (v9 == v10) {
        return;
      }
    }
    int v15 = *(_DWORD **)(a4 + 144);
    if (v15 && (uint64_t v16 = *(int *)(a4 + 136), (int)v16 < *v15))
    {
      *(_DWORD *)(a4 + 136) = v16 + 1;
      uint64_t v17 = *(void *)&v15[2 * v16 + 2];
      if (!sub_7C49E4((uint64_t)v9)) {
        goto LABEL_11;
      }
    }
    else
    {
      sub_13D7104(*(void *)(a4 + 128));
      uint64_t v17 = sub_188CDC8(a4 + 128, v18);
      if (!sub_7C49E4((uint64_t)v9))
      {
LABEL_11:
        sub_E30E14(a1, v9, a2[15], v17);
        if (!*(unsigned char *)(a1 + 11))
        {
LABEL_20:
          int v25 = *(_DWORD *)(a4 + 320);
          *(_DWORD *)(v17 + 16) |= 0x400u;
          *(_DWORD *)(v17 + 96) = v25;
          sub_638F30(v9, (uint64_t)__p);
          uint64_t v19 = *(int **)(v11 + 64);
          if (!v19) {
            goto LABEL_21;
          }
          goto LABEL_16;
        }
LABEL_15:
        sub_638F30(v9, (uint64_t)__p);
        uint64_t v19 = *(int **)(v11 + 64);
        if (!v19)
        {
LABEL_21:
          int v21 = *(_DWORD *)(v11 + 60);
          goto LABEL_22;
        }
LABEL_16:
        uint64_t v20 = *(int *)(v11 + 56);
        int v21 = *v19;
        if ((int)v20 < *v19)
        {
          *(_DWORD *)(v11 + 56) = v20 + 1;
          uint64_t v13 = *(void *)&v19[2 * v20 + 2];
          if (*(char *)(v13 + 23) < 0) {
            operator delete(*(void **)v13);
          }
          long long v14 = *(_OWORD *)__p;
          *(void *)(v13 + 16) = v30;
          *(_OWORD *)uint64_t v13 = v14;
          goto LABEL_6;
        }
        if (v21 != *(_DWORD *)(v11 + 60))
        {
          *uint64_t v19 = v21 + 1;
          uint64_t v22 = *v12;
          if (!*v12) {
            goto LABEL_23;
          }
LABEL_19:
          *uint64_t v24 = v23;
          v24[1] = (uint64_t)sub_3A6EDC;
          long long v26 = *(_OWORD *)__p;
          *(void *)(v23 + 16) = v30;
          *(_OWORD *)uint64_t v23 = v26;
          __p[1] = 0;
          uint64_t v30 = 0;
          __p[0] = 0;
          uint64_t v27 = *(void *)(v11 + 64);
          uint64_t v28 = *(int *)(v11 + 56);
          *(_DWORD *)(v11 + 56) = v28 + 1;
          *(void *)(v27 + 8 * v28 + 8) = v23;
          if (SHIBYTE(v30) < 0) {
            operator delete(__p[0]);
          }
          goto LABEL_6;
        }
LABEL_22:
        sub_188CC60((uint64_t)v12, v21 + 1);
        ++**(_DWORD **)(v11 + 64);
        uint64_t v22 = *v12;
        if (!*v12) {
LABEL_23:
        }
          operator new();
        goto LABEL_19;
      }
    }
    sub_E33C94(a1, (uint64_t)a2, (uint64_t)v9, a3, v17);
    if (!*(unsigned char *)(a1 + 11)) {
      goto LABEL_20;
    }
    goto LABEL_15;
  }
}

void sub_E33C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_E33C94(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v10 = sub_638A20(a3);
  if (*(unsigned char *)(a1 + 11))
  {
    uint64_t v12 = *(void *)(a2 + 120);
    int v13 = v12 - v10;
    int v14 = v12 - v11;
    if (v12 < v10) {
      int v13 = 0;
    }
    if (v12 < v11) {
      int v14 = 0;
    }
    int v15 = *(_DWORD *)(a5 + 16) | 0xC0000;
    *(_DWORD *)(a5 + 132) = v13;
    *(_DWORD *)(a5 + 136) = v14;
  }
  else
  {
    int v15 = *(_DWORD *)(a5 + 16);
  }
  if (v10 < 0) {
    __int16 v16 = -50;
  }
  else {
    __int16 v16 = 50;
  }
  if (v11 < 0) {
    __int16 v17 = -50;
  }
  else {
    __int16 v17 = 50;
  }
  *(_DWORD *)(a5 + 16) = v15 | 0x180;
  *(_DWORD *)(a5 + 80) = (int)v10 / 100
                       + ((5243 * (__int16)(v16 + (int)v10 % 100)) >> 19)
                       + ((5243 * (__int16)(v16 + (int)v10 % 100)) >> 31);
  *(_DWORD *)(a5 + 84) = (int)v11 / 100
                       + ((5243 * (__int16)(v17 + (int)v11 % 100)) >> 19)
                       + ((5243 * (__int16)(v17 + (int)v11 % 100)) >> 31);
  unsigned int v18 = sub_638A18(a3);
  int v19 = sub_E15F70(v18);
  *(_DWORD *)(a5 + 16) |= 0x800u;
  *(_DWORD *)(a5 + 100) = v19;
  uint64_t v20 = *(void *)(a2 + 1808) + 336 * sub_46E118(a3);
  *(_DWORD *)(a5 + 16) |= 4u;
  uint64_t v21 = *(void *)(a5 + 40);
  if (v21)
  {
    uint64_t v22 = (void *)sub_638F80(a3);
    if (sub_45FB38(v22)) {
      goto LABEL_16;
    }
LABEL_21:
    uint64_t v27 = (const std::string **)sub_638F80(a3);
    uint64_t v28 = *(_DWORD **)(v21 + 80);
    if (v28 && (uint64_t v29 = *(int *)(v21 + 72), (int)v29 < *v28))
    {
      *(_DWORD *)(v21 + 72) = v29 + 1;
      uint64_t v30 = *(void *)&v28[2 * v29 + 2];
    }
    else
    {
      sub_13D6A1C(*(void *)(v21 + 64));
      uint64_t v30 = sub_188CDC8(v21 + 64, v31);
    }
    sub_5F4D30(v27, v30);
    uint64_t v58 = a3;
    unsigned __int8 v23 = sub_682244(v20);
    if (!v23) {
      goto LABEL_63;
    }
    goto LABEL_26;
  }
  uint64_t v24 = *(void *)(a5 + 8);
  int v25 = (void *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
  if (v24) {
    int v25 = (void *)*v25;
  }
  uint64_t v21 = sub_13D75B4((uint64_t)v25);
  *(void *)(a5 + 40) = v21;
  long long v26 = (void *)sub_638F80(a3);
  if (!sub_45FB38(v26)) {
    goto LABEL_21;
  }
LABEL_16:
  uint64_t v58 = a3;
  unsigned __int8 v23 = sub_682244(v20);
  if (!v23) {
    goto LABEL_63;
  }
LABEL_26:
  uint64_t v32 = 0;
  if (a4 == 1) {
    int v33 = 16;
  }
  else {
    int v33 = 256;
  }
  uint64_t v59 = v23;
  do
  {
    uint64_t v36 = *(_DWORD **)(v21 + 32);
    if (v36 && (uint64_t v37 = *(int *)(v21 + 24), (int)v37 < *v36))
    {
      *(_DWORD *)(v21 + 24) = v37 + 1;
      uint64_t v38 = *(void *)&v36[2 * v37 + 2];
    }
    else
    {
      uint64_t v39 = sub_13D74A0(*(void *)(v21 + 16));
      uint64_t v38 = sub_188CDC8(v21 + 16, v39);
    }
    char v40 = sub_682F48(v20, v32);
    *(_DWORD *)(v38 + 16) |= 1u;
    *(unsigned char *)(v38 + 48) = v40;
    char v41 = sub_6847A0(v20, v32);
    *(_DWORD *)(v38 + 16) |= 2u;
    *(unsigned char *)(v38 + 49) = v41;
    uint64_t v42 = sub_6838A0(v20, v32);
    BOOL v43 = (unsigned char *)*v42;
    uint64_t v44 = (unsigned char *)v42[1];
    if ((unsigned char *)*v42 != v44)
    {
      do
      {
        int v45 = 128;
        switch(*v43)
        {
          case 1:
          case 7:
          case 0xA:
            goto LABEL_52;
          case 2:
          case 9:
          case 0xB:
            int v45 = 2;
            uint64_t v46 = *(_DWORD **)(v38 + 40);
            if (!v46) {
              goto LABEL_56;
            }
            goto LABEL_53;
          case 3:
            int v45 = 64;
            uint64_t v46 = *(_DWORD **)(v38 + 40);
            if (!v46) {
              goto LABEL_56;
            }
            goto LABEL_53;
          case 4:
            int v45 = 4;
            uint64_t v46 = *(_DWORD **)(v38 + 40);
            if (!v46) {
              goto LABEL_56;
            }
            goto LABEL_53;
          case 5:
            int v45 = 32;
            uint64_t v46 = *(_DWORD **)(v38 + 40);
            if (!v46) {
              goto LABEL_56;
            }
            goto LABEL_53;
          case 6:
            int v45 = 8;
            uint64_t v46 = *(_DWORD **)(v38 + 40);
            if (!v46) {
              goto LABEL_56;
            }
            goto LABEL_53;
          case 8:
            int v45 = 1;
            uint64_t v46 = *(_DWORD **)(v38 + 40);
            if (!v46) {
              goto LABEL_56;
            }
            goto LABEL_53;
          case 0xC:
            int v45 = 1;
LABEL_52:
            uint64_t v46 = *(_DWORD **)(v38 + 40);
            if (v46) {
              goto LABEL_53;
            }
            goto LABEL_56;
          case 0xD:
            int v45 = v33;
            uint64_t v46 = *(_DWORD **)(v38 + 40);
            if (!v46) {
              goto LABEL_56;
            }
LABEL_53:
            uint64_t v47 = *(int *)(v38 + 32);
            if ((int)v47 >= *v46)
            {
LABEL_56:
              uint64_t v49 = sub_13D753C(*(void *)(v38 + 24));
              uint64_t v48 = sub_188CDC8(v38 + 24, (uint64_t)v49);
            }
            else
            {
              *(_DWORD *)(v38 + 32) = v47 + 1;
              uint64_t v48 = *(void *)&v46[2 * v47 + 2];
            }
            *(_DWORD *)(v48 + 16) |= 2u;
            *(_DWORD *)(v48 + 28) = v45;
            break;
          default:
            break;
        }
        ++v43;
      }
      while (v43 != v44);
    }
    if (!*(_DWORD *)(v38 + 32))
    {
      uint64_t v50 = *(void *)(v38 + 40);
      if (v50 && *(int *)v50 >= 1)
      {
        *(_DWORD *)(v38 + 32) = 1;
        uint64_t v35 = *(void *)(v50 + 8);
      }
      else
      {
        uint64_t v34 = sub_13D753C(*(void *)(v38 + 24));
        uint64_t v35 = sub_188CDC8(v38 + 24, (uint64_t)v34);
      }
      *(_DWORD *)(v35 + 16) |= 2u;
      *(_DWORD *)(v35 + 28) = 1;
    }
    ++v32;
  }
  while (v32 != v59);
LABEL_63:
  uint64_t v51 = sub_638A44(v58);
  int v52 = *(const std::string ***)v51;
  int v53 = *(const std::string ***)(v51 + 8);
  if (*(const std::string ***)v51 != v53)
  {
    do
    {
      while (1)
      {
        char v56 = *(_DWORD **)(v21 + 56);
        if (v56)
        {
          uint64_t v57 = *(int *)(v21 + 48);
          if ((int)v57 < *v56) {
            break;
          }
        }
        sub_13D6A1C(*(void *)(v21 + 40));
        uint64_t v55 = sub_188CDC8(v21 + 40, v54);
        sub_5F4D30(v52, v55);
        v52 += 20;
        if (v52 == v53) {
          return;
        }
      }
      *(_DWORD *)(v21 + 48) = v57 + 1;
      sub_5F4D30(v52, *(void *)&v56[2 * v57 + 2]);
      v52 += 20;
    }
    while (v52 != v53);
  }
}

void sub_E341AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1883FB0((void *)(a3 + 16), dword_254EAA8, 11, (uint64_t)&off_252CE78, 0);
  uint64_t v7 = *(unsigned int **)(a2 + 1736);
  uint64_t v34 = *(unsigned int **)(a2 + 1744);
  uint64_t v35 = a2;
  if (v7 != v34)
  {
    uint64_t v8 = v6;
    uint64_t v9 = (uint64_t **)(v6 + 24);
    while (1)
    {
      uint64_t v10 = *(_DWORD **)(a3 + 144);
      if (v10 && (uint64_t v11 = *(int *)(a3 + 136), (int)v11 < *v10))
      {
        *(_DWORD *)(a3 + 136) = v11 + 1;
        uint64_t v12 = *(void *)&v10[2 * v11 + 2];
      }
      else
      {
        sub_13D7104(*(void *)(a3 + 128));
        uint64_t v12 = sub_188CDC8(a3 + 128, v13);
      }
      int v14 = sub_639790((uint64_t)v7);
      uint64_t v15 = 96;
      if (v14) {
        uint64_t v15 = 120;
      }
      sub_E31398(a1, v7, *(void *)(v35 + v15), v12);
      if (*(unsigned char *)(a1 + 11))
      {
        uint64_t v16 = sub_68EE4((uint64_t)v7);
        unsigned int v18 = *(long long ***)v16;
        __int16 v17 = *(long long ***)(v16 + 8);
        if (*(long long ***)v16 != v17) {
          break;
        }
        goto LABEL_3;
      }
      int v19 = *(_DWORD *)(a3 + 40);
      int v20 = (v19 & 0x40000000) != 0 ? *(_DWORD *)(a3 + 316) : *(_DWORD *)(a3 + 320);
      int v21 = v19 >= 0 ? *(_DWORD *)(a3 + 316) : *(_DWORD *)(a3 + 320);
      int v22 = sub_639790((uint64_t)v7) ? v21 : v20;
      *(_DWORD *)(v12 + 16) |= 0x400u;
      *(_DWORD *)(v12 + 96) = v22;
      uint64_t v23 = sub_68EE4((uint64_t)v7);
      unsigned int v18 = *(long long ***)v23;
      __int16 v17 = *(long long ***)(v23 + 8);
      if (*(long long ***)v23 != v17) {
        break;
      }
LABEL_3:
      v7 += 102;
      if (v7 == v34) {
        return;
      }
    }
    while (1)
    {
      sub_635CD0(v18, (uint64_t)__p);
      uint64_t v24 = *(int **)(v8 + 40);
      if (!v24) {
        break;
      }
      uint64_t v25 = *(int *)(v8 + 32);
      int v26 = *v24;
      if ((int)v25 >= *v24)
      {
        if (v26 == *(_DWORD *)(v8 + 36)) {
          goto LABEL_33;
        }
LABEL_34:
        *uint64_t v24 = v26 + 1;
        if (!*v9) {
          operator new();
        }
        uint64_t *v30 = v29;
        v30[1] = (uint64_t)sub_3A6EDC;
        long long v31 = *(_OWORD *)__p;
        *(void *)(v29 + 16) = v37;
        *(_OWORD *)uint64_t v29 = v31;
        __p[1] = 0;
        uint64_t v37 = 0;
        __p[0] = 0;
        uint64_t v32 = *(void *)(v8 + 40);
        uint64_t v33 = *(int *)(v8 + 32);
        *(_DWORD *)(v8 + 32) = v33 + 1;
        *(void *)(v32 + 8 * v33 + 8) = v29;
        if (SHIBYTE(v37) < 0) {
          operator delete(__p[0]);
        }
        v18 += 13;
        if (v18 == v17) {
          goto LABEL_3;
        }
      }
      else
      {
        *(_DWORD *)(v8 + 32) = v25 + 1;
        uint64_t v27 = *(void *)&v24[2 * v25 + 2];
        if (*(char *)(v27 + 23) < 0) {
          operator delete(*(void **)v27);
        }
        long long v28 = *(_OWORD *)__p;
        *(void *)(v27 + 16) = v37;
        *(_OWORD *)uint64_t v27 = v28;
        v18 += 13;
        if (v18 == v17) {
          goto LABEL_3;
        }
      }
    }
    int v26 = *(_DWORD *)(v8 + 36);
LABEL_33:
    sub_188CC60((uint64_t)v9, v26 + 1);
    uint64_t v24 = *(int **)(v8 + 40);
    int v26 = *v24;
    goto LABEL_34;
  }
}

void sub_E34468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_E34484()
{
  byte_25F3F87 = 1;
  word_25F3F70 = 65;
  byte_25F3F9F = 1;
  word_25F3F88 = 65;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__dst, "UNKNOWN");
  *(_DWORD *)v285 = 0;
  HIBYTE(v286[0]) = 14;
  strcpy(&v285[8], "ROUTES_THROUGH");
  LODWORD(v286[1]) = 1;
  v287[23] = 9;
  strcpy(v287, "ROUTES_TO");
  LODWORD(v288) = 3;
  HIBYTE(v290) = 11;
  strcpy((char *)__p, "ROUTES_FROM");
  LODWORD(v291) = 2;
  xmmword_25F7DE8 = 0u;
  *(_OWORD *)&qword_25F7DF8 = 0u;
  dword_25F7E08 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25F7DE8, (uint64_t)&__dst, (uint64_t)&__dst);
  sub_3A6EF0((uint64_t)&xmmword_25F7DE8, (uint64_t)&v285[8], (uint64_t)&v285[8]);
  sub_3A6EF0((uint64_t)&xmmword_25F7DE8, (uint64_t)v287, (uint64_t)v287);
  sub_3A6EF0((uint64_t)&xmmword_25F7DE8, (uint64_t)__p, (uint64_t)__p);
  if (SHIBYTE(v290) < 0)
  {
    operator delete(__p[0]);
    if ((v287[23] & 0x80000000) == 0)
    {
LABEL_3:
      if ((SHIBYTE(v286[0]) & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_383:
      operator delete(*(void **)&v285[8]);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_5;
      }
      goto LABEL_384;
    }
  }
  else if ((v287[23] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v287);
  if (SHIBYTE(v286[0]) < 0) {
    goto LABEL_383;
  }
LABEL_4:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_5;
  }
LABEL_384:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_5:
  byte_25F3FB7 = 8;
  strcpy((char *)&qword_25F3FA0, "any_mode");
  byte_25F3FCF = 7;
  strcpy((char *)&dword_25F3FB8, "cycling");
  byte_25F3FE7 = 7;
  strcpy((char *)&dword_25F3FD0, "driving");
  byte_25F3FFF = 7;
  strcpy((char *)&dword_25F3FE8, "walking");
  qword_25F4008 = 0;
  qword_25F4010 = 0;
  qword_25F4000 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25F4000 = (uint64_t)v0;
  qword_25F4008 = (uint64_t)(v0 + 9);
  qword_25F4010 = (uint64_t)(v0 + 9);
  qword_25F4018 = 0;
  qword_25F4020 = 0;
  qword_25F4028 = 0;
  uint64_t v1 = operator new(9uLL);
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25F4018 = (uint64_t)v1;
  qword_25F4020 = (uint64_t)(v1 + 9);
  strcpy(&byte_25F4047, "\n\x1B\\toi=orth\\"");
  qword_25F4028 = (uint64_t)(v1 + 9);
  strcpy(byte_25F4030, "\x1B\\toi=lhp\\"");
  byte_25F405F = 11;
  qword_25F4060 = (char *)operator new(0x19uLL);
  long long v282 = xmmword_20B9250;
  xmmword_25F4068 = xmmword_20B9250;
  strcpy(qword_25F4060, "\x1B\\toi=x-sampa-internal\\"");
  byte_25F408F = 13;
  strcpy((char *)&qword_25F4078, "\x1B\\tn=address\\"");
  strcpy(&byte_25F40A7, "\t\x1B\\tn=normal\\"");
  strcpy((char *)&qword_25F4090, "\x1B\\tn=nav\\"");
  byte_25F40BF = 12;
  byte_25F40D7 = 7;
  strcpy((char *)&dword_25F40C0, "\x1B\\lang=");
  byte_25F40EF = 1;
  word_25F40D8 = 92;
  byte_25F4107 = 4;
  strcpy((char *)&qword_25F40F0, "DEV:");
  byte_25F411F = 8;
  strcpy((char *)&qword_25F4108, "Continue");
  byte_25F4137 = 11;
  strcpy((char *)&qword_25F4120, "Start_Route");
  byte_25F414F = 14;
  strcpy((char *)&qword_25F4138, "Continue_Route");
  byte_25F4167 = 12;
  strcpy((char *)&qword_25F4150, "Resume_Route");
  byte_25F417F = 18;
  strcpy((char *)&xmmword_25F4168, "Start_Route_U_Turn");
  byte_25F4197 = 7;
  strcpy((char *)&dword_25F4180, "_U_Turn");
  qword_25F41A8 = 0x1300000000000000;
  qmemcpy(&unk_25F41B0, "Continue_Route", 14);
  qword_25F4198 = *(void *)"Resume_Route";
  unk_25F41A0 = 0x545F555F6574756FLL;
  unk_25F41A7 = 1852994900;
  qword_25F41C0 = 0x1500000000000000;
  strcpy(byte_25F41C8, "Left_Turn");
  unk_25F41BE = 1415533919;
  *(_DWORD *)((char *)&qword_25F41C0 + 1) = 1852994900;
  strcpy(&byte_25F41DF, "\tRight_Turn");
  strcpy(&byte_25F41F7, "\nLeft_Turn_At_End");
  byte_25F420F = 16;
  byte_25F4227 = 17;
  strcpy((char *)&xmmword_25F4210, "Right_Turn_At_End");
  byte_25F423F = 15;
  strcpy((char *)&qword_25F4228, "Sharp_Left_Turn");
  byte_25F4257 = 16;
  strcpy((char *)&xmmword_25F4240, "Sharp_Right_Turn");
  byte_25F426F = 16;
  strcpy((char *)&xmmword_25F4258, "Slight_Left_Turn");
  byte_25F4287 = 17;
  strcpy((char *)&xmmword_25F4270, "Slight_Right_Turn");
  strcpy(&byte_25F429F, "\tKeep_Right");
  strcpy((char *)&qword_25F4288, "Keep_Left");
  strcpy(&byte_25F42B7, "\nU_Turn");
  byte_25F42CF = 6;
  byte_25F42E7 = 14;
  strcpy((char *)&qword_25F42D0, "Walking_U_Turn");
  byte_25F42FF = 20;
  strcpy((char *)&xmmword_25F42E8, "U_Turn_When_Possible");
  byte_25F4317 = 20;
  strcpy((char *)&xmmword_25F4300, "U_Turn_At_Roundabout");
  byte_25F432F = 11;
  strcpy((char *)&qword_25F4318, "Enter_Ferry");
  strcpy(&byte_25F4347, "\nChange_Ferry");
  strcpy((char *)&qword_25F4330, "Exit_Ferry");
  byte_25F435F = 12;
  byte_25F4377 = 21;
  strcpy((char *)&xmmword_25F4360, "Enter_Railway_Shuttle");
  byte_25F438F = 20;
  strcpy((char *)&xmmword_25F4378, "Exit_Railway_Shuttle");
  byte_25F43A7 = 22;
  strcpy((char *)&xmmword_25F4390, "Change_Railway_Shuttle");
  byte_25F43BF = 17;
  strcpy((char *)&xmmword_25F43A8, "End_Of_Navigation");
  byte_25F43D7 = 17;
  strcpy((char *)&xmmword_25F43C0, "End_Of_Navigation");
  byte_25F43EF = 11;
  strcpy((char *)&qword_25F43D8, "Destination");
  byte_25F4407 = 19;
  strcpy((char *)&xmmword_25F43F0, "Destination_On_left");
  byte_25F441F = 20;
  strcpy((char *)&xmmword_25F4408, "Destination_On_Right");
  strcpy(&byte_25F4437, "\nFirst_Stop_On_left");
  *(void *)&v269[0] = *(void *)"First_Stop";
  strcpy((char *)&qword_25F4420, "First_Stop");
  byte_25F444F = 18;
  byte_25F4467 = 19;
  strcpy((char *)&xmmword_25F4450, "First_Stop_On_Right");
  strcpy(&byte_25F447F, "\tNext_Stop_On_left");
  *(void *)&v265[48] = *(void *)"Next_Stop";
  strcpy((char *)&qword_25F4468, "Next_Stop");
  byte_25F4497 = 17;
  byte_25F44AF = 18;
  strcpy((char *)&xmmword_25F4498, "Next_Stop_On_Right");
  byte_25F44C7 = 13;
  strcpy((char *)&qword_25F44B0, "Waypoint_Stop");
  byte_25F44DF = 21;
  strcpy((char *)&xmmword_25F44C8, "Waypoint_Stop_On_Left");
  byte_25F44F7 = 22;
  strcpy((char *)&xmmword_25F44E0, "Waypoint_Stop_On_Right");
  byte_25F450F = 11;
  strcpy((char *)&qword_25F44F8, "Roundabout_");
  byte_25F4527 = 16;
  strcpy((char *)&xmmword_25F4510, "Enter_Roundabout");
  qword_25F4528 = (uint64_t)operator new(0x20uLL);
  long long v281 = xmmword_20B91C0;
  unk_25F4530 = xmmword_20B91C0;
  strcpy((char *)qword_25F4528, "Walking_Enter_Roundabout");
  byte_25F4557 = 16;
  strcpy(byte_25F4540, "Leave_Roundabout");
  byte_25F456F = 21;
  strcpy((char *)&xmmword_25F4558, "Roundabout_First_Exit");
  byte_25F4587 = 22;
  strcpy(byte_25F4570, "Roundabout_Second_Exit");
  byte_25F459F = 21;
  strcpy((char *)&xmmword_25F4588, "Roundabout_Third_Exit");
  strcpy(byte_25F45A0, "Roundabout_Fourth_Exit");
  HIBYTE(word_25F45B6) = 22;
  byte_25F45CF = 21;
  strcpy((char *)&xmmword_25F45B8, "Roundabout_Fifth_Exit");
  byte_25F45E7 = 21;
  strcpy(byte_25F45D0, "Roundabout_Sixth_Exit");
  qword_25F45E8 = (uint64_t)operator new(0x19uLL);
  unk_25F45F0 = xmmword_20B9250;
  strcpy((char *)qword_25F45E8, "Roundabout_Seventh_Exit");
  strcpy(byte_25F4600, "Roundabout_Eighth_Exit");
  HIBYTE(word_25F4616) = 22;
  byte_25F462F = 21;
  strcpy((char *)&xmmword_25F4618, "Roundabout_Ninth_Exit");
  byte_25F4647 = 21;
  strcpy(byte_25F4630, "Roundabout_Tenth_Exit");
  qword_25F4648 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25F4650 = xmmword_20B91C0;
  strcpy((char *)qword_25F4648, "Roundabout_Eleventh_Exit");
  qword_25F4660 = (uint64_t)operator new(0x19uLL);
  unk_25F4668 = xmmword_20B9250;
  strcpy((char *)qword_25F4660, "Roundabout_Twelfth_Exit");
  qword_25F4678 = (uint64_t)operator new(0x20uLL);
  long long v278 = xmmword_20B5EB0;
  unk_25F4680 = xmmword_20B5EB0;
  strcpy((char *)qword_25F4678, "Roundabout_Thirteenth_Exit");
  qword_25F4690 = (uint64_t)operator new(0x20uLL);
  unk_25F4698 = xmmword_20B5EB0;
  strcpy((char *)qword_25F4690, "Roundabout_Fourteenth_Exit");
  qword_25F46A8 = (uint64_t)operator new(0x20uLL);
  long long v280 = xmmword_20B8870;
  *(_OWORD *)algn_25F46B0 = xmmword_20B8870;
  strcpy((char *)qword_25F46A8, "Roundabout_Fifteenth_Exit");
  qword_25F46C0 = (uint64_t)operator new(0x20uLL);
  unk_25F46C8 = xmmword_20B8870;
  strcpy((char *)qword_25F46C0, "Roundabout_Sixteenth_Exit");
  qword_25F46D8 = (uint64_t)operator new(0x20uLL);
  long long v275 = xmmword_20B91A0;
  unk_25F46E0 = xmmword_20B91A0;
  strcpy((char *)qword_25F46D8, "Roundabout_Seventeenth_Exit");
  qword_25F46F0 = (uint64_t)operator new(0x20uLL);
  unk_25F46F8 = xmmword_20B5EB0;
  strcpy((char *)qword_25F46F0, "Roundabout_Eighteenth_Exit");
  qword_25F4708 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25F4710 = xmmword_20B5EB0;
  strcpy((char *)qword_25F4708, "Roundabout_Nineteenth_Exit");
  byte_25F4737 = 8;
  strcpy((char *)&qword_25F4720, "Off_Ramp");
  byte_25F474F = 16;
  strcpy((char *)&xmmword_25F4738, "Off_Ramp_On_Left");
  byte_25F4767 = 17;
  strcpy(algn_25F4750, "Off_Ramp_On_Right");
  byte_25F477F = 14;
  strcpy((char *)&qword_25F4768, "Change_Highway");
  strcpy(byte_25F4780, "Change_Highway_On_Left");
  HIBYTE(word_25F4796) = 22;
  qword_25F4798 = (uint64_t)operator new(0x19uLL);
  unk_25F47A0 = xmmword_20B9250;
  strcpy((char *)qword_25F4798, "Change_Highway_On_Right");
  byte_25F47C7 = 5;
  strcpy((char *)&dword_25F47B0, "Merge");
  byte_25F47DF = 12;
  strcpy((char *)&qword_25F47C8, "Enter_Detour");
  byte_25F47F7 = 11;
  strcpy((char *)&qword_25F47E0, "Exit_Detour");
  byte_25F480F = 18;
  strcpy((char *)&xmmword_25F47F8, "Walking_Turnaround");
  qword_25F4810 = (uint64_t)operator new(0x19uLL);
  unk_25F4818 = xmmword_20B9250;
  strcpy((char *)qword_25F4810, "Walking_Turnaround_Sign");
  byte_25F483F = 19;
  strcpy(byte_25F4828, "Distance_Title_List");
  unk_25F4840 = operator new(0x19uLL);
  unk_25F4848 = xmmword_20B9250;
  long long v272 = *(_OWORD *)"Cross_The_Street_Spoken";
  strcpy(unk_25F4840, "Cross_The_Street_Spoken");
  *(void *)&long long v271 = *(void *)"t_Spoken";
  byte_25F486F = 19;
  strcpy(byte_25F4858, "Arrival_Charge_List");
  byte_25F4887 = 15;
  strcpy(byte_25F4870, "Charge_At_Start");
  strcpy(&byte_25F489F, "\tPass_Street");
  strcpy(byte_25F4888, "Pass_Exit");
  byte_25F48B7 = 11;
  byte_25F48CF = 17;
  strcpy(byte_25F48B8, "Pass_Intersection");
  strcpy(&byte_25F48E7, "\t_PrevExitNumber");
  strcpy(byte_25F48D0, "Next_Exit");
  byte_25F48FF = 15;
  strcpy(&byte_25F4917, "\t_PrevUTurn");
  strcpy(byte_25F4900, "_PrevRoad");
  strcpy(&byte_25F492F, "\nNext_");
  byte_25F4947 = 5;
  byte_25F495F = 15;
  strcpy(byte_25F4948, "_At_Next_Street");
  byte_25F4977 = 21;
  strcpy(byte_25F4960, "_At_Next_Intersection");
  byte_25F498F = 14;
  strcpy((char *)&qword_25F4978, "Charge_Station");
  byte_25F49A7 = 15;
  strcpy((char *)&qword_25F4990, "_Charge_Station");
  BYTE1(qword_25F49B8) = 0;
  WORD1(qword_25F49B8) = 25856;
  HIDWORD(qword_25F49B8) = 335544320;
  strcpy((char *)&qword_25F49A8, "_Charge_Station_");
  byte_25F49D7 = 8;
  strcpy((char *)&qword_25F49C0, "_Minimum");
  byte_25F49EF = 15;
  strcpy((char *)&qword_25F49D8, "ExitShield_Sign");
  byte_25F4A07 = 8;
  strcpy((char *)&qword_25F49F0, "Walking_");
  byte_25F4A1F = 16;
  strcpy((char *)&xmmword_25F4A08, "Walking_Continue");
  byte_25F4A37 = 19;
  strcpy((char *)&xmmword_25F4A20, "Walking_Start_Route");
  qword_25F4A38 = (uint64_t)operator new(0x20uLL);
  unk_25F4A40 = xmmword_20B5EB0;
  strcpy((char *)qword_25F4A38, "Walking_Start_Route_U_Turn");
  byte_25F4A67 = 17;
  strcpy(byte_25F4A50, "Walking_Left_Turn");
  byte_25F4A7F = 18;
  strcpy((char *)&xmmword_25F4A68, "Walking_Right_Turn");
  qword_25F4A80 = (uint64_t)operator new(0x20uLL);
  unk_25F4A88 = xmmword_20B5EB0;
  strcpy((char *)qword_25F4A80, "Walking_Turn_At_Roundabout");
  qword_25F4A98 = (uint64_t)operator new(0x20uLL);
  long long v279 = xmmword_20B91B0;
  unk_25F4AA0 = xmmword_20B91B0;
  strcpy((char *)qword_25F4A98, "Walking_U_Turn_When_Possible");
  qword_25F4AB0 = (uint64_t)operator new(0x28uLL);
  long long v270 = xmmword_20B9390;
  unk_25F4AB8 = xmmword_20B9390;
  strcpy((char *)qword_25F4AB0, "Walking_Roundabout_Exit_Continue");
  qword_25F4AC8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25F4AD0 = xmmword_20B91B0;
  strcpy((char *)qword_25F4AC8, "Walking_Roundabout_Exit_Left");
  qword_25F4AE0 = (uint64_t)operator new(0x20uLL);
  long long v277 = xmmword_20B8890;
  unk_25F4AE8 = xmmword_20B8890;
  strcpy((char *)qword_25F4AE0, "Walking_Roundabout_Exit_Right");
  qword_25F4AF8 = (uint64_t)operator new(0x20uLL);
  unk_25F4B00 = xmmword_20B8870;
  strcpy((char *)qword_25F4AF8, "Walking_End_Of_Navigation");
  long long v274 = *(_OWORD *)"nd_Of_Navigation";
  int v2 = (char *)operator new(0x20uLL);
  qword_25F4B10 = (uint64_t)v2;
  unk_25F4B18 = xmmword_20B8870;
  *(_OWORD *)int v2 = *(_OWORD *)"Walking_End_Of_Navigation";
  *(_OWORD *)(v2 + 9) = v274;
  v2[25] = 0;
  byte_25F4B3F = 8;
  strcpy((char *)&qword_25F4B28, "Walking_");
  qword_25F4B40 = (uint64_t)operator new(0x19uLL);
  unk_25F4B48 = v282;
  strcpy((char *)qword_25F4B40, "Walking_Sharp_Left_Turn");
  qword_25F4B58 = (uint64_t)operator new(0x20uLL);
  unk_25F4B60 = v281;
  strcpy((char *)qword_25F4B58, "Walking_Sharp_Right_Turn");
  qword_25F4B70 = (uint64_t)operator new(0x20uLL);
  unk_25F4B78 = v281;
  strcpy((char *)qword_25F4B70, "Walking_Slight_Left_Turn");
  qword_25F4B88 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25F4B90 = v280;
  strcpy((char *)qword_25F4B88, "Walking_Slight_Right_Turn");
  byte_25F4BB7 = 4;
  strcpy((char *)&dword_25F4BA0, "Exit");
  byte_25F4BCF = 4;
  strcpy((char *)&dword_25F4BB8, "Road");
  byte_25F4BE7 = 7;
  strcpy((char *)&dword_25F4BD0, "Freeway");
  byte_25F4BFF = 12;
  strcpy((char *)&qword_25F4BE8, "Intersection");
  byte_25F4C17 = 5;
  strcpy((char *)&dword_25F4C00, "Ferry");
  byte_25F4C2F = 11;
  strcpy((char *)&qword_25F4C18, "ShuttleName");
  byte_25F4C47 = 5;
  strcpy((char *)&dword_25F4C30, "Road1");
  strcpy(&byte_25F4C5F, "\tName");
  strcpy((char *)&qword_25F4C48, "Signpost1");
  byte_25F4C77 = 4;
  byte_25F4C8F = 7;
  strcpy((char *)&dword_25F4C78, "Address");
  byte_25F4CA7 = 7;
  strcpy((char *)&dword_25F4C90, "Shield1");
  byte_25F4CBF = 13;
  strcpy((char *)&qword_25F4CA8, "TowardShield1");
  byte_25F4CD7 = 6;
  strcpy((char *)&dword_25F4CC0, "Right_");
  byte_25F4CEF = 5;
  strcpy((char *)&dword_25F4CD8, "Left_");
  strcpy(&byte_25F4D07, "\tOn_Left_");
  strcpy((char *)&qword_25F4CF0, "On_Right_");
  byte_25F4D1F = 8;
  byte_25F4D37 = 12;
  strcpy((char *)&qword_25F4D20, "ElevatorName");
  byte_25F4D4F = 13;
  strcpy((char *)&qword_25F4D38, "EscalatorName");
  strcpy(&byte_25F4D67, "\nBridgeName");
  strcpy((char *)&qword_25F4D50, "StairsName");
  strcpy(&byte_25F4D7F, "\nTunnelName");
  strcpy(&byte_25F4D97, "\nParking");
  byte_25F4DAF = 7;
  strcpy(&byte_25F4DC7, "\t_Escalator");
  strcpy((char *)&qword_25F4DB0, "_Elevator");
  strcpy(&byte_25F4DDF, "\n_ElevatorName");
  byte_25F4DF7 = 13;
  byte_25F4E0F = 14;
  strcpy((char *)&qword_25F4DF8, "_EscalatorName");
  byte_25F4E27 = 5;
  strcpy((char *)&qword_25F4E10, "_Road");
  byte_25F4E3F = 8;
  strcpy((char *)&qword_25F4E28, "_Freeway");
  byte_25F4E57 = 13;
  strcpy((char *)&qword_25F4E40, "_Intersection");
  byte_25F4E6F = 6;
  strcpy((char *)&dword_25F4E58, "_Road1");
  byte_25F4E87 = 6;
  strcpy((char *)&dword_25F4E70, "_Road2");
  strcpy(&byte_25F4E9F, "\n_Signpost2");
  strcpy((char *)&qword_25F4E88, "_Signpost1");
  strcpy(&byte_25F4EB7, "\n_Ferry");
  byte_25F4ECF = 6;
  byte_25F4EE7 = 12;
  strcpy((char *)&qword_25F4ED0, "_Ferry_Ferry");
  byte_25F4EFF = 12;
  strcpy((char *)&qword_25F4EE8, "_ShuttleName");
  qword_25F4F00 = (uint64_t)operator new(0x20uLL);
  unk_25F4F08 = v279;
  strcpy((char *)qword_25F4F00, "_Railway_Shuttle_ShuttleName");
  byte_25F4F2F = 11;
  strcpy((char *)&qword_25F4F18, "_ExitNumber");
  byte_25F4F47 = 5;
  strcpy((char *)&dword_25F4F30, "_Exit");
  byte_25F4F5F = 7;
  strcpy((char *)&dword_25F4F48, "_StayOn");
  byte_25F4F77 = 7;
  strcpy((char *)&dword_25F4F60, "_Stairs");
  byte_25F4F8F = 5;
  strcpy((char *)&dword_25F4F78, "_Ramp");
  byte_25F4FA7 = 11;
  strcpy((char *)&qword_25F4F90, "_StairsName");
  strcpy(&byte_25F4FBF, "\t_Down");
  strcpy((char *)&qword_25F4FA8, "_RampName");
  byte_25F4FD7 = 5;
  byte_25F4FEF = 3;
  dword_25F4FD8 = 7361887;
  byte_25F5007 = 7;
  strcpy((char *)&dword_25F4FF0, "_Bridge");
  byte_25F501F = 7;
  strcpy((char *)&dword_25F5008, "_Tunnel");
  byte_25F5037 = 11;
  strcpy((char *)&qword_25F5020, "_Roundabout");
  byte_25F504F = 6;
  strcpy((char *)&dword_25F5038, "_Cross");
  byte_25F5067 = 8;
  strcpy((char *)&qword_25F5050, "_Parking");
  byte_25F507F = 8;
  strcpy((char *)&qword_25F5068, "_Shield1");
  byte_25F5097 = 14;
  strcpy((char *)&qword_25F5080, "_TowardShield1");
  byte_25F50AF = 8;
  strcpy((char *)&qword_25F5098, "_Shield2");
  byte_25F50C7 = 14;
  strcpy((char *)&qword_25F50B0, "_TowardShield2");
  byte_25F50DF = 11;
  strcpy((char *)&qword_25F50C8, "_Direction1");
  byte_25F50F7 = 11;
  strcpy((char *)&qword_25F50E0, "_Direction2");
  strcpy(&byte_25F510F, "\n_TowardDirection1");
  strcpy((char *)&qword_25F50F8, "Direction1");
  byte_25F5127 = 17;
  byte_25F513F = 17;
  strcpy((char *)&xmmword_25F5128, "_TowardDirection2");
  byte_25F5157 = 16;
  strcpy((char *)&xmmword_25F5140, "TowardDirection1");
  byte_25F516F = 7;
  strcpy((char *)&qword_25F5158, "_Spoken");
  byte_25F5187 = 5;
  strcpy((char *)&qword_25F5170, "_Sign");
  byte_25F519F = 15;
  strcpy((char *)&qword_25F5188, "_Secondary_Sign");
  byte_25F51B7 = 5;
  byte_25F51A4 = 116;
  dword_25F51A0 = 1936280671;
  byte_25F51A5 = 0;
  byte_25F51CF = 8;
  strcpy((char *)&qword_25F51B8, "_Primary");
  qword_25F51E0 = 0xF00000000000000;
  strcpy((char *)&qword_25F51D0, "_Spoken_Primary");
  strcpy(&byte_25F51FF, "\n_Secondary");
  strcpy((char *)&qword_25F51E8, "_Secondary");
  strcpy(&byte_25F5217, "\n_Spoken_Secondar");
  BYTE1(qword_25F5228) = 0;
  WORD1(qword_25F5228) = 0;
  HIDWORD(qword_25F5228) = 285212672;
  byte_25F5247 = 13;
  strcpy((char *)&qword_25F5230, "_To_Secondary");
  BYTE1(qword_25F5258) = 0;
  WORD1(qword_25F5258) = 0;
  HIDWORD(qword_25F5258) = 335544320;
  strcpy((char *)&dword_25F5248, "_Spoken_To_Secon");
  strcpy(&byte_25F5277, "\t_ValidDistance");
  strcpy((char *)&qword_25F5260, "_Distance");
  byte_25F528F = 14;
  byte_25F52A7 = 6;
  strcpy((char *)&dword_25F5290, "_Short");
  byte_25F52BF = 1;
  word_25F52A8 = 95;
  qword_25F52C0 = (uint64_t)operator new(0x20uLL);
  unk_25F52C8 = v281;
  strcpy((char *)qword_25F52C0, "Concatenate_Newline_Sign");
  uint64_t v3 = (char *)operator new(0x19uLL);
  qword_25F52D8 = (uint64_t)v3;
  unk_25F52E0 = v282;
  *(_OWORD *)uint64_t v3 = v272;
  *(void *)(v3 + 15) = v271;
  v3[23] = 0;
  byte_25F5307 = 12;
  strcpy((char *)&qword_25F52F0, "Chain_Spoken");
  byte_25F531F = 15;
  strcpy((char *)&qword_25F5308, "Chain_To_Spoken");
  strcpy(&byte_25F5337, "\nThen_Spoken");
  strcpy((char *)&qword_25F5320, "And_Spoken");
  byte_25F534F = 11;
  byte_25F5367 = 18;
  strcpy(algn_25F5350, "Concatenate_Spoken");
  qword_25F5368 = (uint64_t)operator new(0x28uLL);
  long long v268 = xmmword_20B9240;
  *(_OWORD *)algn_25F5370 = xmmword_20B9240;
  strcpy((char *)qword_25F5368, "At_Traffic_Light_Chain_Spoken_Primary");
  qword_25F5380 = (uint64_t)operator new(0x28uLL);
  v269[1] = xmmword_20B9260;
  unk_25F5388 = xmmword_20B9260;
  strcpy((char *)qword_25F5380, "At_Stop_Sign_Chain_Spoken_Primary");
  qword_25F5398 = (uint64_t)operator new(0x40uLL);
  unk_25F53A0 = xmmword_20B9A90;
  strcpy((char *)qword_25F5398, "At_Stop_Sign_Cross_Traffic_Doesnt_Stop_Chain_Spoken_Primary");
  qword_25F53B0 = (uint64_t)operator new(0x30uLL);
  long long v267 = xmmword_20B9A40;
  unk_25F53B8 = xmmword_20B9A40;
  strcpy((char *)qword_25F53B0, "At_Next_Traffic_Light_Chain_Spoken_Primary");
  qword_25F53C8 = (uint64_t)operator new(0x28uLL);
  long long v266 = xmmword_20E12D0;
  *(_OWORD *)algn_25F53D0 = xmmword_20E12D0;
  strcpy((char *)qword_25F53C8, "At_Next_Stop_Sign_Chain_Spoken_Primary");
  qword_25F53E0 = (uint64_t)operator new(0x28uLL);
  long long v276 = xmmword_20B9960;
  unk_25F53E8 = xmmword_20B9960;
  strcpy((char *)qword_25F53E0, "At_Traffic_Light_Chain_Spoken_Secondary");
  qword_25F53F8 = (uint64_t)operator new(0x28uLL);
  unk_25F5400 = xmmword_20B93A0;
  strcpy((char *)qword_25F53F8, "At_Stop_Sign_Chain_Spoken_Secondary");
  qword_25F5410 = (uint64_t)operator new(0x30uLL);
  long long v274 = xmmword_20E1380;
  unk_25F5418 = xmmword_20E1380;
  strcpy((char *)qword_25F5410, "At_Next_Traffic_Light_Chain_Spoken_Secondary");
  qword_25F5428 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_25F5430 = xmmword_20B93C0;
  strcpy((char *)qword_25F5428, "At_Next_Stop_Sign_Chain_Spoken_Secondary");
  qword_25F5440 = (uint64_t)operator new(0x38uLL);
  unk_25F5448 = xmmword_20B9A60;
  strcpy((char *)qword_25F5440, "At_Next_One_Traffic_Light_Chain_Spoken_Secondary");
  qword_25F5458 = (uint64_t)operator new(0x30uLL);
  unk_25F5460 = xmmword_20E1380;
  strcpy((char *)qword_25F5458, "At_Next_One_Stop_Sign_Chain_Spoken_Secondary");
  qword_25F5470 = (uint64_t)operator new(0x28uLL);
  unk_25F5478 = xmmword_20B9960;
  strcpy((char *)qword_25F5470, "At_Mini_Roundabout_Chain_Spoken_Primary");
  qword_25F5488 = (uint64_t)operator new(0x30uLL);
  long long v273 = xmmword_20B93D0;
  *(_OWORD *)algn_25F5490 = xmmword_20B93D0;
  strcpy((char *)qword_25F5488, "At_Mini_Roundabout_Chain_Spoken_Secondary");
  qword_25F54A0 = (uint64_t)operator new(0x20uLL);
  unk_25F54A8 = v277;
  strcpy((char *)qword_25F54A0, "Walking_Distance_Chain_Spoken");
  qword_25F54B8 = (uint64_t)operator new(0x20uLL);
  unk_25F54C0 = v277;
  strcpy((char *)qword_25F54B8, "Walking_Continue_Chain_Spoken");
  uint64_t v4 = (char *)operator new(0x19uLL);
  qword_25F54D0 = (uint64_t)v4;
  unk_25F54D8 = v282;
  *(_OWORD *)uint64_t v4 = v272;
  *(void *)(v4 + 15) = v271;
  v4[23] = 0;
  unk_25F54E8 = operator new(0x28uLL);
  unk_25F54F0 = v270;
  strcpy(unk_25F54E8, "Distance_Cross_The_Street_Spoken");
  strcpy(byte_25F5500, "Walking_Continue_Cross");
  HIBYTE(word_25F5516) = 22;
  byte_25F552F = 14;
  strcpy(byte_25F5518, "Continue_Cross");
  byte_25F5547 = 5;
  strcpy(byte_25F5530, "Cross");
  byte_25F555F = 19;
  strcpy(byte_25F5548, "Cross_Street_Spoken");
  byte_25F5577 = 17;
  strcpy(byte_25F5560, "Cross_Road_Spoken");
  byte_25F558F = 20;
  strcpy(byte_25F5578, "Use_Crosswalk_Spoken");
  byte_25F55A7 = 15;
  strcpy(byte_25F5590, "Distance_Spoken");
  byte_25F55BF = 19;
  strcpy(byte_25F55A8, "Distance_And_Spoken");
  byte_25F55D7 = 21;
  strcpy(byte_25F55C0, "Continue_Stage_Spoken");
  byte_25F55EF = 13;
  qmemcpy(&qword_25F55D8, "ContinueStage", 13);
  int v5 = SHIBYTE(qword_25F51E0);
  if (qword_25F51E0 >= 0) {
    size_t v6 = HIBYTE(qword_25F51E0);
  }
  else {
    size_t v6 = unk_25F51D8;
  }
  unint64_t v7 = v6 + 13;
  byte_25F55E5 = 0;
  if (v6 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v7 >= 0x17)
  {
    uint64_t v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v9 = v7 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v11 = (char *)operator new(v9 + 1);
    qword_25F55F8 = v6 + 13;
    unk_25F5600 = v10 | 0x8000000000000000;
    qword_25F55F0 = (uint64_t)v11;
    qmemcpy(v11, "ContinueStage", 13);
    uint64_t v8 = v11 + 13;
  }
  else
  {
    BYTE1(qword_25F55F8) = 0;
    WORD1(qword_25F55F8) = 0;
    HIDWORD(qword_25F55F8) = 0;
    unk_25F5600 = 0;
    byte_25F5607 = v6 + 13;
    strcpy((char *)&qword_25F55F0, "Continue");
    uint64_t v8 = (char *)&qword_25F55F8 + 5;
    if (!v6) {
      goto LABEL_19;
    }
  }
  if (v5 >= 0) {
    uint64_t v12 = &qword_25F51D0;
  }
  else {
    uint64_t v12 = (uint64_t *)qword_25F51D0;
  }
  memmove(v8, v12, v6);
LABEL_19:
  v8[v6] = 0;
  int v13 = byte_25F4E27;
  if (byte_25F4E27 >= 0) {
    size_t v14 = byte_25F4E27;
  }
  else {
    size_t v14 = qword_25F4E18;
  }
  unint64_t v15 = v14 + 13;
  if (v14 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v15 >= 0x17)
  {
    uint64_t v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v17 = v15 | 7;
    }
    uint64_t v18 = v17 + 1;
    int v19 = operator new(v17 + 1);
    __dst.__r_.__value_.__l.__size_ = v14 + 13;
    __dst.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
    *int v19 = qword_25F55D8;
    *(void *)((char *)v19 + 5) = *(uint64_t *)((char *)&qword_25F55D8 + 5);
    uint64_t v16 = (char *)v19 + 13;
  }
  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 5) = *(uint64_t *)((char *)&qword_25F55D8 + 5);
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v14 + 13;
    __dst.__r_.__value_.__r.__words[0] = qword_25F55D8;
    uint64_t v16 = &__dst.__r_.__value_.__s.__data_[13];
    if (!v14) {
      goto LABEL_33;
    }
  }
  if (v13 >= 0) {
    int v20 = &qword_25F4E10;
  }
  else {
    int v20 = (uint64_t *)qword_25F4E10;
  }
  memmove(v16, v20, v14);
LABEL_33:
  v16[v14] = 0;
  if (v5 >= 0) {
    int v21 = (const std::string::value_type *)&qword_25F51D0;
  }
  else {
    int v21 = (const std::string::value_type *)qword_25F51D0;
  }
  int v22 = std::string::append(&__dst, v21, v6);
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  qword_25F5618 = v22->__r_.__value_.__r.__words[2];
  xmmword_25F5608 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  byte_25F5637 = 5;
  strcpy((char *)&dword_25F5620, "Merge");
  qword_25F5638 = (uint64_t)operator new(0x20uLL);
  long long v271 = xmmword_20B8E90;
  unk_25F5640 = xmmword_20B8E90;
  strcpy((char *)qword_25F5638, "Continue_Freeway_Spoken_Primary");
  byte_25F5667 = 8;
  strcpy((char *)&qword_25F5650, "Starting");
  byte_25F567F = 14;
  strcpy((char *)&qword_25F5668, "Starting_Route");
  byte_25F5697 = 14;
  strcpy((char *)&qword_25F5680, "Resuming_Route");
  byte_25F56AF = 16;
  strcpy((char *)&xmmword_25F5698, "Continuing_Route");
  byte_25F56C7 = 9;
  word_25F56B8 = 112;
  qword_25F56B0 = *(void *)&v265[48];
  strcpy(&byte_25F56DF, "\nEnding");
  strcpy((char *)&word_25F56D0, "op");
  qword_25F56C8 = *(void *)&v269[0];
  byte_25F56F7 = 6;
  strcpy((char *)&qword_25F56F8, "_Destination");
  byte_25F570F = 12;
  byte_25F5727 = 15;
  strcpy((char *)&qword_25F5710, "_At_Destination");
  std::operator+<char>();
  qword_25F5740 = (uint64_t)operator new(0x20uLL);
  unk_25F5748 = v281;
  strcpy((char *)qword_25F5740, "Spoken_Ending_At_Parking");
  qword_25F5758 = (uint64_t)operator new(0x20uLL);
  v269[0] = xmmword_20B9800;
  xmmword_25F5760 = xmmword_20B9800;
  strcpy((char *)qword_25F5758, "Spoken_Pre_Arrival_Destination");
  strcpy((char *)&xmmword_25F5770, "Sign_Ending_At_Parking");
  HIBYTE(word_25F5786) = 22;
  byte_25F579F = 4;
  strcpy((char *)&dword_25F5788, "Home");
  byte_25F57B7 = 4;
  strcpy((char *)&dword_25F57A0, "Work");
  byte_25F57CF = 8;
  strcpy((char *)&qword_25F57B8, "Business");
  byte_25F57E7 = 4;
  strcpy((char *)&dword_25F57D0, "Name");
  byte_25F57FF = 13;
  strcpy((char *)&qword_25F57E8, "Other_Contact");
  byte_25F5817 = 11;
  strcpy((char *)&qword_25F5800, "ContactHome");
  byte_25F582F = 11;
  *(_DWORD *)((char *)&qword_25F5818 + 7) = 1802661719;
  byte_25F5847 = 7;
  *(int *)((char *)&dword_25F5830 + 3) = 1936942450;
  dword_25F5830 = 1919181889;
  strcpy((char *)&xmmword_25F5848, "Discoverability_Prompt");
  HIBYTE(word_25F585E) = 22;
  byte_25F5877 = 6;
  dword_25F5860 = 1634878303;
  word_25F5864 = 26739;
  byte_25F588F = 8;
  qword_25F5878 = 0x697269535F6F4E5FLL;
  byte_25F58A7 = 9;
  strcpy((char *)&qword_25F5890, "_CityName");
  byte_25F58BF = 8;
  qword_25F58A8 = 0x636972656E65475FLL;
  int v24 = byte_25F5667;
  if (byte_25F5667 >= 0) {
    size_t v25 = byte_25F5667;
  }
  else {
    size_t v25 = qword_25F5658;
  }
  LODWORD(v272) = byte_25F49A7;
  if (byte_25F49A7 >= 0) {
    size_t v26 = byte_25F49A7;
  }
  else {
    size_t v26 = unk_25F4998;
  }
  qword_25F5818 = *(void *)"ContactWork";
  byte_25F5823 = 0;
  byte_25F5837 = 0;
  byte_25F5866 = 0;
  byte_25F5880 = 0;
  byte_25F58B0 = 0;
  unint64_t v27 = v26 + v25;
  if (v26 + v25 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  *(void *)long long v265 = *(void *)"ContactWork";
  *(void *)&v265[16] = *(void *)"ContactHome";
  *(void *)&v265[32] = *(void *)"_Contact";
  *(void *)&v265[48] = *(void *)"Other_Contact";
  if (v27 <= 0x16)
  {
    long long v28 = &qword_25F58C0;
    qword_25F58C8 = 0;
    unk_25F58D0 = 0;
    qword_25F58C0 = 0;
    byte_25F58D7 = v26 + v25;
    if (!v25) {
      goto LABEL_51;
    }
    goto LABEL_47;
  }
  uint64_t v91 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v27 | 7) != 0x17) {
    uint64_t v91 = v27 | 7;
  }
  uint64_t v92 = v91 + 1;
  long long v28 = (uint64_t *)operator new(v91 + 1);
  qword_25F58C8 = v26 + v25;
  unk_25F58D0 = v92 | 0x8000000000000000;
  qword_25F58C0 = (uint64_t)v28;
  if (v25)
  {
LABEL_47:
    if (v24 >= 0) {
      uint64_t v29 = &qword_25F5650;
    }
    else {
      uint64_t v29 = (uint64_t *)qword_25F5650;
    }
    memmove(v28, v29, v25);
  }
LABEL_51:
  uint64_t v30 = (char *)v28 + v25;
  if (v26)
  {
    if ((int)v272 >= 0) {
      long long v31 = &qword_25F4990;
    }
    else {
      long long v31 = (uint64_t *)qword_25F4990;
    }
    memmove(v30, v31, v26);
  }
  v30[v26] = 0;
  int v32 = byte_25F570F;
  if (byte_25F570F >= 0) {
    size_t v33 = byte_25F570F;
  }
  else {
    size_t v33 = qword_25F5700;
  }
  unint64_t v34 = v33 + v25;
  if (v33 + v25 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v34 <= 0x16)
  {
    uint64_t v35 = &qword_25F58D8;
    qword_25F58E0 = 0;
    unk_25F58E8 = 0;
    qword_25F58D8 = 0;
    byte_25F58EF = v33 + v25;
    if (!v25) {
      goto LABEL_66;
    }
    goto LABEL_62;
  }
  uint64_t v93 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v34 | 7) != 0x17) {
    uint64_t v93 = v34 | 7;
  }
  uint64_t v94 = v93 + 1;
  uint64_t v35 = (uint64_t *)operator new(v93 + 1);
  qword_25F58E0 = v33 + v25;
  unk_25F58E8 = v94 | 0x8000000000000000;
  qword_25F58D8 = (uint64_t)v35;
  if (v25)
  {
LABEL_62:
    if (v24 >= 0) {
      uint64_t v36 = &qword_25F5650;
    }
    else {
      uint64_t v36 = (uint64_t *)qword_25F5650;
    }
    memmove(v35, v36, v25);
  }
LABEL_66:
  uint64_t v37 = (char *)v35 + v25;
  if (v33)
  {
    if (v32 >= 0) {
      uint64_t v38 = &qword_25F56F8;
    }
    else {
      uint64_t v38 = (uint64_t *)qword_25F56F8;
    }
    memmove(v37, v38, v33);
  }
  v37[v33] = 0;
  qword_25F58F0 = (uint64_t)operator new(0x19uLL);
  unk_25F58F8 = v282;
  strcpy((char *)qword_25F58F0, "{ChargeStationCityName}");
  if (v34 < 0x17)
  {
    uint64_t v39 = &qword_25F5908;
    qword_25F5910 = 0;
    unk_25F5918 = 0;
    qword_25F5908 = 0;
    byte_25F591F = v33 + v25;
    if (!v25) {
      goto LABEL_77;
    }
    goto LABEL_73;
  }
  uint64_t v95 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v34 | 7) != 0x17) {
    uint64_t v95 = v34 | 7;
  }
  uint64_t v96 = v95 + 1;
  uint64_t v39 = (uint64_t *)operator new(v95 + 1);
  qword_25F5910 = v33 + v25;
  unk_25F5918 = v96 | 0x8000000000000000;
  qword_25F5908 = (uint64_t)v39;
  if (v25)
  {
LABEL_73:
    if (v24 >= 0) {
      char v40 = &qword_25F5650;
    }
    else {
      char v40 = (uint64_t *)qword_25F5650;
    }
    memmove(v39, v40, v25);
  }
LABEL_77:
  char v41 = (char *)v39 + v25;
  if (v33)
  {
    if (v32 >= 0) {
      uint64_t v42 = &qword_25F56F8;
    }
    else {
      uint64_t v42 = (uint64_t *)qword_25F56F8;
    }
    memmove(v41, v42, v33);
  }
  v41[v33] = 0;
  strcpy((char *)&xmmword_25F5920, "{NewBatteryPercentage}");
  HIBYTE(word_25F5936) = 22;
  qword_25F5938 = (uint64_t)operator new(0x20uLL);
  xmmword_25F5940 = v275;
  strcpy((char *)qword_25F5938, "{OriginalBatteryPercentage}");
  byte_25F5967 = 19;
  strcpy((char *)&xmmword_25F5950, "_Arrival_Percentage");
  int v43 = byte_25F56F7;
  if (byte_25F56F7 >= 0) {
    size_t v44 = byte_25F56F7;
  }
  else {
    size_t v44 = qword_25F56E8;
  }
  unint64_t v45 = v44 + v26;
  if (v44 + v26 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v45 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v44 + v26;
    if (!v44) {
      goto LABEL_92;
    }
    goto LABEL_88;
  }
  uint64_t v97 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v45 | 7) != 0x17) {
    uint64_t v97 = v45 | 7;
  }
  uint64_t v98 = v97 + 1;
  p_dst = (char *)operator new(v97 + 1);
  __dst.__r_.__value_.__l.__size_ = v44 + v26;
  __dst.__r_.__value_.__r.__words[2] = v98 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v44)
  {
LABEL_88:
    if (v43 >= 0) {
      uint64_t v47 = &qword_25F56E0;
    }
    else {
      uint64_t v47 = (uint64_t *)qword_25F56E0;
    }
    memmove(p_dst, v47, v44);
  }
LABEL_92:
  uint64_t v48 = &p_dst[v44];
  if (v26)
  {
    if ((int)v272 >= 0) {
      uint64_t v49 = &qword_25F4990;
    }
    else {
      uint64_t v49 = (uint64_t *)qword_25F4990;
    }
    memmove(v48, v49, v26);
  }
  v48[v26] = 0;
  uint64_t v50 = std::string::append(&__dst, "_Percentage");
  long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  qword_25F5978 = v50->__r_.__value_.__r.__words[2];
  xmmword_25F5968 = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v52 = byte_25F56F7;
  if (byte_25F56F7 >= 0) {
    size_t v53 = byte_25F56F7;
  }
  else {
    size_t v53 = qword_25F56E8;
  }
  int v54 = byte_25F49A7;
  if (byte_25F49A7 >= 0) {
    size_t v55 = byte_25F49A7;
  }
  else {
    size_t v55 = unk_25F4998;
  }
  unint64_t v56 = v55 + v53;
  if (v55 + v53 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v56 <= 0x16)
  {
    memset(&v283, 0, sizeof(v283));
    uint64_t v57 = (char *)&v283;
    *((unsigned char *)&v283.__r_.__value_.__s + 23) = v55 + v53;
    if (!v53) {
      goto LABEL_112;
    }
    goto LABEL_108;
  }
  uint64_t v99 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v56 | 7) != 0x17) {
    uint64_t v99 = v56 | 7;
  }
  uint64_t v100 = v99 + 1;
  uint64_t v57 = (char *)operator new(v99 + 1);
  v283.__r_.__value_.__l.__size_ = v55 + v53;
  v283.__r_.__value_.__r.__words[2] = v100 | 0x8000000000000000;
  v283.__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
  if (v53)
  {
LABEL_108:
    if (v52 >= 0) {
      uint64_t v58 = &qword_25F56E0;
    }
    else {
      uint64_t v58 = (uint64_t *)qword_25F56E0;
    }
    memmove(v57, v58, v53);
  }
LABEL_112:
  uint64_t v59 = &v57[v53];
  if (v55)
  {
    if (v54 >= 0) {
      uint64_t v60 = &qword_25F4990;
    }
    else {
      uint64_t v60 = (uint64_t *)qword_25F4990;
    }
    memmove(v59, v60, v55);
  }
  v59[v55] = 0;
  if (byte_25F49D7 >= 0) {
    int v61 = (const std::string::value_type *)&qword_25F49C0;
  }
  else {
    int v61 = (const std::string::value_type *)qword_25F49C0;
  }
  if (byte_25F49D7 >= 0) {
    std::string::size_type v62 = byte_25F49D7;
  }
  else {
    std::string::size_type v62 = *(void *)&byte_25F49C8;
  }
  int v63 = std::string::append(&v283, v61, v62);
  long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v64;
  v63->__r_.__value_.__l.__size_ = 0;
  v63->__r_.__value_.__r.__words[2] = 0;
  v63->__r_.__value_.__r.__words[0] = 0;
  int v65 = std::string::append(&__dst, "_Percentage");
  long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
  qword_25F5990 = v65->__r_.__value_.__r.__words[2];
  xmmword_25F5980 = v66;
  v65->__r_.__value_.__l.__size_ = 0;
  v65->__r_.__value_.__r.__words[2] = 0;
  v65->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_125;
    }
  }
  else if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_125;
  }
  operator delete(v283.__r_.__value_.__l.__data_);
LABEL_125:
  int v67 = byte_25F56F7;
  if (byte_25F56F7 >= 0) {
    size_t v68 = byte_25F56F7;
  }
  else {
    size_t v68 = qword_25F56E8;
  }
  int v69 = byte_25F49A7;
  if (byte_25F49A7 >= 0) {
    size_t v70 = byte_25F49A7;
  }
  else {
    size_t v70 = unk_25F4998;
  }
  unint64_t v71 = v70 + v68;
  if (v70 + v68 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v71 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    int v72 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v70 + v68;
    if (!v68) {
      goto LABEL_138;
    }
    goto LABEL_134;
  }
  uint64_t v101 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v71 | 7) != 0x17) {
    uint64_t v101 = v71 | 7;
  }
  uint64_t v102 = v101 + 1;
  int v72 = (char *)operator new(v101 + 1);
  __dst.__r_.__value_.__l.__size_ = v70 + v68;
  __dst.__r_.__value_.__r.__words[2] = v102 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
  if (v68)
  {
LABEL_134:
    if (v67 >= 0) {
      char v73 = &qword_25F56E0;
    }
    else {
      char v73 = (uint64_t *)qword_25F56E0;
    }
    memmove(v72, v73, v68);
  }
LABEL_138:
  uint64_t v74 = &v72[v68];
  if (v70)
  {
    if (v69 >= 0) {
      uint64_t v75 = &qword_25F4990;
    }
    else {
      uint64_t v75 = (uint64_t *)qword_25F4990;
    }
    memmove(v74, v75, v70);
  }
  v74[v70] = 0;
  int v76 = std::string::append(&__dst, "_Duration");
  long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
  qword_25F59A8 = v76->__r_.__value_.__r.__words[2];
  xmmword_25F5998 = v77;
  v76->__r_.__value_.__l.__size_ = 0;
  v76->__r_.__value_.__r.__words[2] = 0;
  v76->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v78 = byte_25F56F7;
  if (byte_25F56F7 >= 0) {
    size_t v79 = byte_25F56F7;
  }
  else {
    size_t v79 = qword_25F56E8;
  }
  int v80 = byte_25F49A7;
  if (byte_25F49A7 >= 0) {
    size_t v81 = byte_25F49A7;
  }
  else {
    size_t v81 = unk_25F4998;
  }
  unint64_t v82 = v81 + v79;
  if (v81 + v79 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v82 <= 0x16)
  {
    qword_25F59B8 = 0;
    unk_25F59C0 = 0;
    qword_25F59B0 = 0;
    double v83 = &qword_25F59B0;
    byte_25F59C7 = v81 + v79;
    if (!v79) {
      goto LABEL_158;
    }
    goto LABEL_154;
  }
  uint64_t v103 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v82 | 7) != 0x17) {
    uint64_t v103 = v82 | 7;
  }
  uint64_t v104 = v103 + 1;
  double v83 = (uint64_t *)operator new(v103 + 1);
  qword_25F59B8 = v81 + v79;
  unk_25F59C0 = v104 | 0x8000000000000000;
  qword_25F59B0 = (uint64_t)v83;
  if (v79)
  {
LABEL_154:
    if (v78 >= 0) {
      uint64_t v84 = &qword_25F56E0;
    }
    else {
      uint64_t v84 = (uint64_t *)qword_25F56E0;
    }
    memmove(v83, v84, v79);
  }
LABEL_158:
  uint64_t v85 = (char *)v83 + v79;
  if (v81)
  {
    if (v80 >= 0) {
      uint64_t v86 = &qword_25F4990;
    }
    else {
      uint64_t v86 = (uint64_t *)qword_25F4990;
    }
    memmove(v85, v86, v81);
  }
  v85[v81] = 0;
  int v87 = byte_25F59C7;
  if (byte_25F59C7 >= 0) {
    size_t v88 = byte_25F59C7;
  }
  else {
    size_t v88 = qword_25F59B8;
  }
  unint64_t v89 = v88 + 5;
  if (v88 + 5 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v89 >= 0x17)
  {
    uint64_t v105 = (v89 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v89 | 7) != 0x17) {
      uint64_t v105 = v89 | 7;
    }
    uint64_t v106 = v105 + 1;
    unint64_t v90 = (uint64_t *)operator new(v105 + 1);
    qword_25F59D0 = v88 + 5;
    unk_25F59D8 = v106 | 0x8000000000000000;
    qword_25F59C8 = (uint64_t)v90;
  }
  else
  {
    unint64_t v90 = &qword_25F59C8;
    qword_25F59D0 = 0;
    unk_25F59D8 = 0;
    qword_25F59C8 = 0;
    byte_25F59DF = v88 + 5;
    if (!v88) {
      goto LABEL_205;
    }
  }
  if (v87 >= 0) {
    uint64_t v107 = &qword_25F59B0;
  }
  else {
    uint64_t v107 = (uint64_t *)qword_25F59B0;
  }
  memmove(v90, v107, v88);
LABEL_205:
  strcpy((char *)v90 + v88, "_Name");
  int v108 = byte_25F56F7;
  if (byte_25F56F7 >= 0) {
    size_t v109 = byte_25F56F7;
  }
  else {
    size_t v109 = qword_25F56E8;
  }
  int v110 = byte_25F49A7;
  if (byte_25F49A7 >= 0) {
    size_t v111 = byte_25F49A7;
  }
  else {
    size_t v111 = unk_25F4998;
  }
  unint64_t v112 = v111 + v109;
  if (v111 + v109 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v112 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    unint64_t v113 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v111 + v109;
    if (!v109) {
      goto LABEL_218;
    }
    goto LABEL_214;
  }
  uint64_t v123 = (v112 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v112 | 7) != 0x17) {
    uint64_t v123 = v112 | 7;
  }
  uint64_t v124 = v123 + 1;
  unint64_t v113 = (char *)operator new(v123 + 1);
  __dst.__r_.__value_.__l.__size_ = v111 + v109;
  __dst.__r_.__value_.__r.__words[2] = v124 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v113;
  if (v109)
  {
LABEL_214:
    if (v108 >= 0) {
      double v114 = &qword_25F56E0;
    }
    else {
      double v114 = (uint64_t *)qword_25F56E0;
    }
    memmove(v113, v114, v109);
  }
LABEL_218:
  uint64_t v115 = &v113[v109];
  if (v111)
  {
    if (v110 >= 0) {
      uint64_t v116 = &qword_25F4990;
    }
    else {
      uint64_t v116 = (uint64_t *)qword_25F4990;
    }
    memmove(v115, v116, v111);
  }
  v115[v111] = 0;
  uint64_t v117 = std::string::append(&__dst, "_Connector_Type");
  long long v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
  qword_25F59F0 = v117->__r_.__value_.__r.__words[2];
  xmmword_25F59E0 = v118;
  v117->__r_.__value_.__l.__size_ = 0;
  v117->__r_.__value_.__r.__words[2] = 0;
  v117->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v119 = SHIBYTE(qword_25F59F0);
  if (qword_25F59F0 >= 0) {
    size_t v120 = HIBYTE(qword_25F59F0);
  }
  else {
    size_t v120 = *((void *)&xmmword_25F59E0 + 1);
  }
  unint64_t v121 = v120 + 6;
  if (v120 + 6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v121 >= 0x17)
  {
    uint64_t v125 = (v121 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v121 | 7) != 0x17) {
      uint64_t v125 = v121 | 7;
    }
    uint64_t v126 = v125 + 1;
    size_t v122 = (uint64_t *)operator new(v125 + 1);
    qword_25F5A00 = v120 + 6;
    unk_25F5A08 = v126 | 0x8000000000000000;
    qword_25F59F8 = (uint64_t)v122;
  }
  else
  {
    size_t v122 = &qword_25F59F8;
    qword_25F5A00 = 0;
    unk_25F5A08 = 0;
    qword_25F59F8 = 0;
    byte_25F5A0F = v120 + 6;
    if (!v120) {
      goto LABEL_243;
    }
  }
  if (v119 >= 0) {
    unint64_t v127 = &xmmword_25F59E0;
  }
  else {
    unint64_t v127 = (long long *)xmmword_25F59E0;
  }
  memmove(v122, v127, v120);
LABEL_243:
  strcpy((char *)v122 + v120, "_Power");
  int v128 = byte_25F56F7;
  if (byte_25F56F7 >= 0) {
    size_t v129 = byte_25F56F7;
  }
  else {
    size_t v129 = qword_25F56E8;
  }
  int v130 = byte_25F49A7;
  if (byte_25F49A7 >= 0) {
    size_t v131 = byte_25F49A7;
  }
  else {
    size_t v131 = unk_25F4998;
  }
  unint64_t v132 = v131 + v129;
  if (v131 + v129 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v132 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    double v133 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v131 + v129;
    if (!v129) {
      goto LABEL_256;
    }
    goto LABEL_252;
  }
  uint64_t v162 = (v132 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v132 | 7) != 0x17) {
    uint64_t v162 = v132 | 7;
  }
  uint64_t v163 = v162 + 1;
  double v133 = (char *)operator new(v162 + 1);
  __dst.__r_.__value_.__l.__size_ = v131 + v129;
  __dst.__r_.__value_.__r.__words[2] = v163 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v133;
  if (v129)
  {
LABEL_252:
    if (v128 >= 0) {
      uint64_t v134 = &qword_25F56E0;
    }
    else {
      uint64_t v134 = (uint64_t *)qword_25F56E0;
    }
    memmove(v133, v134, v129);
  }
LABEL_256:
  uint64_t v135 = &v133[v129];
  if (v131)
  {
    if (v130 >= 0) {
      uint64_t v136 = &qword_25F4990;
    }
    else {
      uint64_t v136 = (uint64_t *)qword_25F4990;
    }
    memmove(v135, v136, v131);
  }
  v135[v131] = 0;
  if (byte_25F516F >= 0) {
    uint64_t v137 = (const std::string::value_type *)&qword_25F5158;
  }
  else {
    uint64_t v137 = (const std::string::value_type *)qword_25F5158;
  }
  if (byte_25F516F >= 0) {
    std::string::size_type v138 = byte_25F516F;
  }
  else {
    std::string::size_type v138 = unk_25F5160;
  }
  size_t v139 = std::string::append(&__dst, v137, v138);
  long long v140 = *(_OWORD *)&v139->__r_.__value_.__l.__data_;
  qword_25F5A20 = v139->__r_.__value_.__r.__words[2];
  xmmword_25F5A10 = v140;
  v139->__r_.__value_.__l.__size_ = 0;
  v139->__r_.__value_.__r.__words[2] = 0;
  v139->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v141 = byte_25F56F7;
  if (byte_25F56F7 >= 0) {
    size_t v142 = byte_25F56F7;
  }
  else {
    size_t v142 = qword_25F56E8;
  }
  int v143 = byte_25F49A7;
  if (byte_25F49A7 >= 0) {
    size_t v144 = byte_25F49A7;
  }
  else {
    size_t v144 = unk_25F4998;
  }
  unint64_t v145 = v144 + v142;
  if (v144 + v142 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v145 <= 0x16)
  {
    memset(&v283, 0, sizeof(v283));
    unint64_t v146 = (char *)&v283;
    *((unsigned char *)&v283.__r_.__value_.__s + 23) = v144 + v142;
    if (!v142) {
      goto LABEL_282;
    }
    goto LABEL_278;
  }
  uint64_t v164 = (v145 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v145 | 7) != 0x17) {
    uint64_t v164 = v145 | 7;
  }
  uint64_t v165 = v164 + 1;
  unint64_t v146 = (char *)operator new(v164 + 1);
  v283.__r_.__value_.__l.__size_ = v144 + v142;
  v283.__r_.__value_.__r.__words[2] = v165 | 0x8000000000000000;
  v283.__r_.__value_.__r.__words[0] = (std::string::size_type)v146;
  if (v142)
  {
LABEL_278:
    if (v141 >= 0) {
      long long v147 = &qword_25F56E0;
    }
    else {
      long long v147 = (uint64_t *)qword_25F56E0;
    }
    memmove(v146, v147, v142);
  }
LABEL_282:
  long long v148 = &v146[v142];
  if (v144)
  {
    if (v143 >= 0) {
      long long v149 = &qword_25F4990;
    }
    else {
      long long v149 = (uint64_t *)qword_25F4990;
    }
    memmove(v148, v149, v144);
  }
  v148[v144] = 0;
  if (byte_25F49D7 >= 0) {
    uint64_t v150 = (const std::string::value_type *)&qword_25F49C0;
  }
  else {
    uint64_t v150 = (const std::string::value_type *)qword_25F49C0;
  }
  if (byte_25F49D7 >= 0) {
    std::string::size_type v151 = byte_25F49D7;
  }
  else {
    std::string::size_type v151 = *(void *)&byte_25F49C8;
  }
  double v152 = std::string::append(&v283, v150, v151);
  long long v153 = *(_OWORD *)&v152->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v152->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v153;
  v152->__r_.__value_.__l.__size_ = 0;
  v152->__r_.__value_.__r.__words[2] = 0;
  v152->__r_.__value_.__r.__words[0] = 0;
  if (byte_25F516F >= 0) {
    uint64_t v154 = (const std::string::value_type *)&qword_25F5158;
  }
  else {
    uint64_t v154 = (const std::string::value_type *)qword_25F5158;
  }
  if (byte_25F516F >= 0) {
    std::string::size_type v155 = byte_25F516F;
  }
  else {
    std::string::size_type v155 = unk_25F5160;
  }
  uint64_t v156 = std::string::append(&__dst, v154, v155);
  long long v157 = *(_OWORD *)&v156->__r_.__value_.__l.__data_;
  qword_25F5A38 = v156->__r_.__value_.__r.__words[2];
  xmmword_25F5A28 = v157;
  v156->__r_.__value_.__l.__size_ = 0;
  v156->__r_.__value_.__r.__words[2] = 0;
  v156->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_301;
    }
  }
  else if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_301;
  }
  operator delete(v283.__r_.__value_.__l.__data_);
LABEL_301:
  byte_25F5A57 = 16;
  strcpy((char *)&xmmword_25F5A40, "Use_NACS_Adapter");
  byte_25F5A6F = 16;
  strcpy(byte_25F5A58, "Start_Route_Sign");
  qword_25F5A70 = (uint64_t)operator new(0x20uLL);
  unk_25F5A78 = v278;
  strcpy((char *)qword_25F5A70, "Start_Route_Spoken_Primary");
  int v158 = byte_25F4107;
  if (byte_25F4107 >= 0) {
    size_t v159 = byte_25F4107;
  }
  else {
    size_t v159 = qword_25F40F8;
  }
  unint64_t v160 = v159 + 27;
  if (v159 + 27 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v160 <= 0x16)
  {
    size_t v161 = &qword_25F5A88;
    qword_25F5A90 = 0;
    unk_25F5A98 = 0;
    qword_25F5A88 = 0;
    byte_25F5A9F = v159 + 27;
LABEL_318:
    if (v158 >= 0) {
      long long v168 = &qword_25F40F0;
    }
    else {
      long long v168 = (uint64_t *)qword_25F40F0;
    }
    memmove(v161, v168, v159);
    goto LABEL_322;
  }
  uint64_t v166 = (v160 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v160 | 7) != 0x17) {
    uint64_t v166 = v160 | 7;
  }
  uint64_t v167 = v166 + 1;
  size_t v161 = (uint64_t *)operator new(v166 + 1);
  qword_25F5A90 = v159 + 27;
  unk_25F5A98 = v167 | 0x8000000000000000;
  qword_25F5A88 = (uint64_t)v161;
  if (v159) {
    goto LABEL_318;
  }
LABEL_322:
  strcpy((char *)v161 + v159, "Turn_Around_To_Route_Spoken");
  strcpy(&byte_25F5AB7, "\t_Two_Lanes");
  strcpy((char *)&qword_25F5AA0, "_One_Lane");
  strcpy(&byte_25F5ACF, "\n_Three_Lanes");
  byte_25F5AE7 = 12;
  byte_25F5AFF = 11;
  strcpy((char *)&qword_25F5AE8, "_Four_Lanes");
  byte_25F5B17 = 11;
  strcpy((char *)&qword_25F5B00, "_Five_Lanes");
  strcpy(&byte_25F5B2F, "\n_Seven_Lanes");
  strcpy((char *)&qword_25F5B18, "_Six_Lanes");
  byte_25F5B47 = 12;
  byte_25F5B5F = 12;
  strcpy((char *)&qword_25F5B48, "_Eight_Lanes");
  byte_25F5B77 = 12;
  strcpy((char *)&qword_25F5B60, "_Second_Lane");
  byte_25F5B8F = 11;
  strcpy((char *)&qword_25F5B78, "_Third_Lane");
  byte_25F5BA7 = 19;
  long long v272 = *(_OWORD *)"_Second_Third_Lanes";
  strcpy((char *)&xmmword_25F5B90, "_Second_Third_Lanes");
  byte_25F5BBF = 4;
  strcpy((char *)&dword_25F5BA8, "Left");
  byte_25F5BD7 = 5;
  byte_25F5BC4 = 116;
  dword_25F5BC0 = 1751607634;
  byte_25F5BC5 = 0;
  byte_25F5BEF = 6;
  strcpy((char *)&dword_25F5BD8, "Middle");
  BYTE1(qword_25F5C00) = 0;
  WORD1(qword_25F5C00) = 0;
  HIDWORD(qword_25F5C00) = 0x10000000;
  strcpy((char *)dword_25F5BF0, "Left_Second_Lane");
  BYTE1(qword_25F5C18) = 0;
  WORD1(qword_25F5C18) = 0;
  HIDWORD(qword_25F5C18) = 285212672;
  strcpy((char *)&dword_25F5C08, "Right_Second_Lan");
  qword_25F5C30 = 0xF00000000000000;
  strcpy((char *)&dword_25F5C20, "Left_Third_Lane");
  qword_25F5C48 = 0x1000000000000000;
  byte_25F5C3C = 116;
  dword_25F5C38 = 1751607634;
  dword_25F5C44 = 1701732684;
  unk_25F5C3D = *(void *)"_Third_Lane";
  long long v169 = (char *)operator new(0x19uLL);
  qword_25F5C50 = (uint64_t)v169;
  unk_25F5C58 = v282;
  *(_DWORD *)long long v169 = 1952867660;
  strcpy(v169 + 19, "anes");
  *(_OWORD *)(v169 + 4) = v272;
  uint64_t v170 = (char *)operator new(0x20uLL);
  qword_25F5C68 = (uint64_t)v170;
  xmmword_25F5C70 = v281;
  *(_DWORD *)uint64_t v170 = 1751607634;
  v170[4] = 116;
  strcpy(v170 + 20, "anes");
  *(_OWORD *)(v170 + 5) = v272;
  byte_25F5C97 = 5;
  strcpy((char *)&dword_25F5C80, "_Stay");
  byte_25F5CAF = 13;
  strcpy((char *)&qword_25F5C98, "Continue_Sign");
  byte_25F5CC7 = 8;
  strcpy((char *)&qword_25F5CB0, "Continue");
  int v171 = byte_25F5187;
  if (byte_25F5187 >= 0) {
    size_t v172 = byte_25F5187;
  }
  else {
    size_t v172 = qword_25F5178;
  }
  unint64_t v173 = v172 + 8;
  if (v172 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v173 >= 0x17)
  {
    uint64_t v175 = (v173 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v173 | 7) != 0x17) {
      uint64_t v175 = v173 | 7;
    }
    uint64_t v176 = v175 + 1;
    long long v177 = operator new(v175 + 1);
    qword_25F5CD0 = v172 + 8;
    qword_25F5CD8 = v176 | 0x8000000000000000;
    qword_25F5CC8 = (uint64_t)v177;
    *long long v177 = 0x65756E69746E6F43;
    uint64_t v174 = v177 + 1;
  }
  else
  {
    qword_25F5CD8 = 0;
    HIBYTE(qword_25F5CD8) = v172 + 8;
    qword_25F5CC8 = 0x65756E69746E6F43;
    qword_25F5CD0 = 0;
    uint64_t v174 = &qword_25F5CD0;
    if (!v172) {
      goto LABEL_336;
    }
  }
  if (v171 >= 0) {
    double v178 = &qword_25F5170;
  }
  else {
    double v178 = (uint64_t *)qword_25F5170;
  }
  memmove(v174, v178, v172);
LABEL_336:
  *((unsigned char *)v174 + v172) = 0;
  int v179 = SHIBYTE(qword_25F51E0);
  if (qword_25F51E0 >= 0) {
    size_t v180 = HIBYTE(qword_25F51E0);
  }
  else {
    size_t v180 = unk_25F51D8;
  }
  unint64_t v181 = v180 + 8;
  if (v180 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v181 >= 0x17)
  {
    uint64_t v183 = (v181 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v181 | 7) != 0x17) {
      uint64_t v183 = v181 | 7;
    }
    uint64_t v184 = v183 + 1;
    uint64_t v185 = operator new(v183 + 1);
    qword_25F5CE8 = v180 + 8;
    qword_25F5CF0 = v184 | 0x8000000000000000;
    qword_25F5CE0 = (uint64_t)v185;
    *uint64_t v185 = qword_25F5CB0;
    size_t v182 = v185 + 1;
  }
  else
  {
    qword_25F5CF0 = 0;
    HIBYTE(qword_25F5CF0) = v180 + 8;
    qword_25F5CE0 = qword_25F5CB0;
    qword_25F5CE8 = 0;
    size_t v182 = &qword_25F5CE8;
    if (!v180) {
      goto LABEL_350;
    }
  }
  if (v179 >= 0) {
    uint64_t v186 = &qword_25F51D0;
  }
  else {
    uint64_t v186 = (uint64_t *)qword_25F51D0;
  }
  memmove(v182, v186, v180);
LABEL_350:
  *((unsigned char *)v182 + v180) = 0;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 1;
  LOWORD(__dst.__r_.__value_.__l.__data_) = 83;
  v285[23] = 2;
  strcpy(v285, "SW");
  v287[7] = 1;
  LOWORD(v286[0]) = 87;
  HIBYTE(v288) = 2;
  strcpy(&v287[8], "NW");
  HIBYTE(v290) = 1;
  LOWORD(__p[0]) = 78;
  HIBYTE(v292) = 2;
  strcpy((char *)&v291, "NE");
  HIBYTE(v294) = 1;
  LOWORD(v293) = 69;
  HIBYTE(v296) = 2;
  strcpy((char *)&v295, "SE");
  sub_4BDC0C(qword_25F5CF8, (uint64_t)&__dst, 8uLL);
  if (SHIBYTE(v296) < 0)
  {
    operator delete((void *)v295);
    if ((SHIBYTE(v294) & 0x80000000) == 0)
    {
LABEL_352:
      if ((SHIBYTE(v292) & 0x80000000) == 0) {
        goto LABEL_353;
      }
      goto LABEL_391;
    }
  }
  else if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
    goto LABEL_352;
  }
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_353:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_354;
    }
    goto LABEL_392;
  }
LABEL_391:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_354:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_355;
    }
    goto LABEL_393;
  }
LABEL_392:
  operator delete(__p[0]);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_355:
    if ((v287[7] & 0x80000000) == 0) {
      goto LABEL_356;
    }
    goto LABEL_394;
  }
LABEL_393:
  operator delete(*(void **)&v287[8]);
  if ((v287[7] & 0x80000000) == 0)
  {
LABEL_356:
    if ((v285[23] & 0x80000000) == 0) {
      goto LABEL_357;
    }
LABEL_395:
    operator delete(*(void **)v285);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_358;
    }
    goto LABEL_396;
  }
LABEL_394:
  operator delete(v286[0]);
  if ((v285[23] & 0x80000000) != 0) {
    goto LABEL_395;
  }
LABEL_357:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_358;
  }
LABEL_396:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_358:
  byte_25F5D27 = 13;
  strcpy((char *)&qword_25F5D10, "{instruction}");
  byte_25F5D3F = 20;
  strcpy(byte_25F5D28, "{primaryInstruction}");
  strcpy((char *)&xmmword_25F5D40, "{secondaryInstruction}");
  HIBYTE(word_25F5D56) = 22;
  qword_25F5D58 = (uint64_t)operator new(0x20uLL);
  unk_25F5D60 = v280;
  strcpy((char *)qword_25F5D58, "{andSecondaryInstruction}");
  qword_25F5D70 = (uint64_t)operator new(0x20uLL);
  unk_25F5D78 = v281;
  strcpy((char *)qword_25F5D70, "{toSecondaryInstruction}");
  byte_25F5D9F = 21;
  strcpy(byte_25F5D88, "{continueInstruction}");
  qword_25F5DA0 = (uint64_t)operator new(0x20uLL);
  unk_25F5DA8 = v278;
  strcpy((char *)qword_25F5DA0, "{thenSecondaryInstruction}");
  byte_25F5DCF = 14;
  strcpy((char *)&qword_25F5DB8, "{instruction1}");
  byte_25F5DE7 = 14;
  strcpy((char *)&qword_25F5DD0, "{instruction2}");
  strcpy(&byte_25F5DFF, "\n{nextDistance}");
  strcpy((char *)&qword_25F5DE8, "{distance}");
  byte_25F5E17 = 14;
  byte_25F5E2F = 16;
  strcpy(byte_25F5E18, "{valid_distance}");
  strcpy(&byte_25F5E47, "\n{valid_distance}");
  strcpy((char *)&qword_25F5E30, "{distance}");
  byte_25F5E5F = 16;
  byte_25F5E77 = 15;
  strcpy((char *)&qword_25F5E60, "{ClimbDistance}");
  byte_25F5E8F = 17;
  strcpy(byte_25F5E78, "{DescentDistance}");
  byte_25F5EA7 = 13;
  strcpy((char *)&qword_25F5E90, "{nonBrkSpace}");
  byte_25F5EBF = 9;
  strcpy((char *)&qword_25F5EA8, "{newLine}");
  byte_25F5ED7 = 6;
  word_25F5EC4 = -24382;
  dword_25F5EC0 = -1211981630;
  byte_25F5EC6 = 0;
  byte_25F5EEF = 2;
  word_25F5ED8 = -24382;
  byte_25F5EDA = 0;
  byte_25F5F07 = 1;
  word_25F5EF0 = 10;
  byte_25F5F1F = 1;
  word_25F5F08 = 32;
  byte_25F5F37 = 2;
  strcpy((char *)&word_25F5F20, "\n\n");
  strcpy(&byte_25F5F4F, "\t{TowardShield1}");
  strcpy((char *)&qword_25F5F38, "{Shield1}");
  byte_25F5F67 = 15;
  strcpy(&byte_25F5F7F, "\t{TowardShield2}");
  strcpy((char *)&qword_25F5F68, "{Shield2}");
  byte_25F5F97 = 15;
  byte_25F5FAF = 12;
  strcpy((char *)&qword_25F5F98, "{Direction1}");
  byte_25F5FC7 = 12;
  strcpy((char *)&qword_25F5FB0, "{Direction2}");
  byte_25F5FDF = 18;
  strcpy(byte_25F5FC8, "{TowardDirection1}");
  byte_25F5FF7 = 18;
  strcpy((char *)&xmmword_25F5FE0, "{TowardDirection2}");
  byte_25F600F = 7;
  strcpy((char *)&dword_25F5FF8, "{Icon1}");
  byte_25F6027 = 7;
  strcpy((char *)&dword_25F6010, "{Icon2}");
  byte_25F6028[23] = 14;
  strcpy(byte_25F6028, "{Intersection}");
  byte_25F6057 = 6;
  strcpy((char *)&xmmword_25F6040, "{Road}");
  byte_25F606F = 7;
  strcpy((char *)&xmmword_25F6058, "{Road1}");
  byte_25F6087 = 7;
  strcpy((char *)&xmmword_25F6070, "{Road2}");
  strcpy(&byte_25F609F, "\n{Freeway}");
  strcpy((char *)&xmmword_25F6088, "{Elevator}");
  strcpy(&byte_25F60B7, "\t{Ferry}");
  byte_25F60CF = 7;
  byte_25F60E7 = 13;
  strcpy((char *)&xmmword_25F60D0, "{ShuttleName}");
  byte_25F60FF = 11;
  strcpy((char *)&xmmword_25F60E8, "{Signpost1}");
  byte_25F6117 = 11;
  strcpy((char *)&xmmword_25F6100, "{Signpost2}");
  byte_25F612F = 12;
  strcpy((char *)&xmmword_25F6118, "{ExitNumber}");
  strcpy(&byte_25F6147, "\t{Name}");
  strcpy((char *)&xmmword_25F6130, "{Address}");
  byte_25F615F = 6;
  byte_25F6177 = 11;
  strcpy((char *)&xmmword_25F6160, "{PlaceName}");
  byte_25F618F = 14;
  strcpy((char *)&xmmword_25F6178, "{ElevatorName}");
  byte_25F61A7 = 15;
  strcpy((char *)&xmmword_25F6190, "{EscalatorName}");
  byte_25F61BF = 12;
  strcpy((char *)&xmmword_25F61A8, "{StairsName}");
  strcpy(&byte_25F61D7, "\n{BridgeName}");
  strcpy((char *)&xmmword_25F61C0, "{RampName}");
  byte_25F61EF = 12;
  byte_25F6207 = 12;
  strcpy((char *)&xmmword_25F61F0, "{TunnelName}");
  byte_25F621F = 13;
  strcpy((char *)&xmmword_25F6208, "{CustomLabel}");
  std::string __dst = *(std::string *)byte_25F6028;
  *(_OWORD *)v285 = xmmword_25F6040;
  *(void *)&v285[16] = unk_25F6050;
  *(_OWORD *)uint64_t v286 = xmmword_25F6058;
  *(void *)long long v287 = unk_25F6068;
  *(_OWORD *)&v287[8] = xmmword_25F6070;
  uint64_t v288 = unk_25F6080;
  *(_OWORD *)std::string __p = xmmword_25F6088;
  uint64_t v290 = unk_25F6098;
  uint64_t v292 = unk_25F60B0;
  long long v291 = xmmword_25F60A0;
  long long v293 = xmmword_25F60B8;
  uint64_t v294 = unk_25F60C8;
  uint64_t v296 = unk_25F60E0;
  long long v295 = xmmword_25F60D0;
  long long v297 = xmmword_25F60E8;
  uint64_t v298 = unk_25F60F8;
  uint64_t v300 = unk_25F6110;
  long long v299 = xmmword_25F6100;
  long long v301 = xmmword_25F6118;
  long long v303 = xmmword_25F6130;
  uint64_t v302 = unk_25F6128;
  uint64_t v304 = unk_25F6140;
  long long v305 = xmmword_25F6148;
  long long v307 = xmmword_25F6160;
  uint64_t v306 = unk_25F6158;
  uint64_t v308 = unk_25F6170;
  long long v309 = xmmword_25F6178;
  long long v311 = xmmword_25F6190;
  uint64_t v310 = unk_25F6188;
  uint64_t v312 = unk_25F61A0;
  long long v313 = xmmword_25F61A8;
  long long v315 = xmmword_25F61C0;
  uint64_t v314 = unk_25F61B8;
  uint64_t v316 = unk_25F61D0;
  long long v317 = xmmword_25F61D8;
  long long v319 = xmmword_25F61F0;
  uint64_t v318 = unk_25F61E8;
  uint64_t v320 = unk_25F6200;
  uint64_t v322 = unk_25F6218;
  long long v321 = xmmword_25F6208;
  sub_4BDC0C(qword_25F6220, (uint64_t)&__dst, 0x15uLL);
  if (SHIBYTE(v322) < 0)
  {
    operator delete((void *)v321);
    if ((SHIBYTE(v320) & 0x80000000) == 0)
    {
LABEL_360:
      if ((SHIBYTE(v318) & 0x80000000) == 0) {
        goto LABEL_361;
      }
      goto LABEL_399;
    }
  }
  else if ((SHIBYTE(v320) & 0x80000000) == 0)
  {
    goto LABEL_360;
  }
  operator delete((void *)v319);
  if ((SHIBYTE(v318) & 0x80000000) == 0)
  {
LABEL_361:
    if ((SHIBYTE(v316) & 0x80000000) == 0) {
      goto LABEL_362;
    }
    goto LABEL_400;
  }
LABEL_399:
  operator delete((void *)v317);
  if ((SHIBYTE(v316) & 0x80000000) == 0)
  {
LABEL_362:
    if ((SHIBYTE(v314) & 0x80000000) == 0) {
      goto LABEL_363;
    }
    goto LABEL_401;
  }
LABEL_400:
  operator delete((void *)v315);
  if ((SHIBYTE(v314) & 0x80000000) == 0)
  {
LABEL_363:
    if ((SHIBYTE(v312) & 0x80000000) == 0) {
      goto LABEL_364;
    }
    goto LABEL_402;
  }
LABEL_401:
  operator delete((void *)v313);
  if ((SHIBYTE(v312) & 0x80000000) == 0)
  {
LABEL_364:
    if ((SHIBYTE(v310) & 0x80000000) == 0) {
      goto LABEL_365;
    }
    goto LABEL_403;
  }
LABEL_402:
  operator delete((void *)v311);
  if ((SHIBYTE(v310) & 0x80000000) == 0)
  {
LABEL_365:
    if ((SHIBYTE(v308) & 0x80000000) == 0) {
      goto LABEL_366;
    }
    goto LABEL_404;
  }
LABEL_403:
  operator delete((void *)v309);
  if ((SHIBYTE(v308) & 0x80000000) == 0)
  {
LABEL_366:
    if ((SHIBYTE(v306) & 0x80000000) == 0) {
      goto LABEL_367;
    }
    goto LABEL_405;
  }
LABEL_404:
  operator delete((void *)v307);
  if ((SHIBYTE(v306) & 0x80000000) == 0)
  {
LABEL_367:
    if ((SHIBYTE(v304) & 0x80000000) == 0) {
      goto LABEL_368;
    }
    goto LABEL_406;
  }
LABEL_405:
  operator delete((void *)v305);
  if ((SHIBYTE(v304) & 0x80000000) == 0)
  {
LABEL_368:
    if ((SHIBYTE(v302) & 0x80000000) == 0) {
      goto LABEL_369;
    }
    goto LABEL_407;
  }
LABEL_406:
  operator delete((void *)v303);
  if ((SHIBYTE(v302) & 0x80000000) == 0)
  {
LABEL_369:
    if ((SHIBYTE(v300) & 0x80000000) == 0) {
      goto LABEL_370;
    }
    goto LABEL_408;
  }
LABEL_407:
  operator delete((void *)v301);
  if ((SHIBYTE(v300) & 0x80000000) == 0)
  {
LABEL_370:
    if ((SHIBYTE(v298) & 0x80000000) == 0) {
      goto LABEL_371;
    }
    goto LABEL_409;
  }
LABEL_408:
  operator delete((void *)v299);
  if ((SHIBYTE(v298) & 0x80000000) == 0)
  {
LABEL_371:
    if ((SHIBYTE(v296) & 0x80000000) == 0) {
      goto LABEL_372;
    }
    goto LABEL_410;
  }
LABEL_409:
  operator delete((void *)v297);
  if ((SHIBYTE(v296) & 0x80000000) == 0)
  {
LABEL_372:
    if ((SHIBYTE(v294) & 0x80000000) == 0) {
      goto LABEL_373;
    }
    goto LABEL_411;
  }
LABEL_410:
  operator delete((void *)v295);
  if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
LABEL_373:
    if ((SHIBYTE(v292) & 0x80000000) == 0) {
      goto LABEL_374;
    }
    goto LABEL_412;
  }
LABEL_411:
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_374:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_375;
    }
    goto LABEL_413;
  }
LABEL_412:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_375:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_376;
    }
    goto LABEL_414;
  }
LABEL_413:
  operator delete(__p[0]);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_376:
    if ((v287[7] & 0x80000000) == 0) {
      goto LABEL_377;
    }
    goto LABEL_415;
  }
LABEL_414:
  operator delete(*(void **)&v287[8]);
  if ((v287[7] & 0x80000000) == 0)
  {
LABEL_377:
    if ((v285[23] & 0x80000000) == 0) {
      goto LABEL_378;
    }
LABEL_416:
    operator delete(*(void **)v285);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_379;
    }
    goto LABEL_417;
  }
LABEL_415:
  operator delete(v286[0]);
  if ((v285[23] & 0x80000000) != 0) {
    goto LABEL_416;
  }
LABEL_378:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_379;
  }
LABEL_417:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_379:
  qword_25F6238 = (uint64_t)operator new(0x19uLL);
  unk_25F6240 = v282;
  strcpy((char *)qword_25F6238, "From_User_Location_List");
  byte_25F6267 = 20;
  strcpy(byte_25F6250, "Origin_Waypoint_List");
  qword_25F6268 = (uint64_t)operator new(0x20uLL);
  unk_25F6270 = v278;
  strcpy((char *)qword_25F6268, "Intermediate_Waypoint_List");
  unk_25F6280 = operator new(0x20uLL);
  unk_25F6288 = v280;
  strcpy(unk_25F6280, "Destination_Waypoint_List");
  byte_25F62AF = 15;
  strcpy(byte_25F6298, "{toDestination}");
  byte_25F62C7 = 13;
  strcpy((char *)&xmmword_25F62B0, "{Destination}");
  byte_25F62DF = 7;
  strcpy(byte_25F62C8, "To_Home");
  byte_25F62F7 = 14;
  strcpy(byte_25F62E0, "To_ContactHome");
  byte_25F630F = 7;
  strcpy(byte_25F62F8, "To_Work");
  byte_25F6327 = 14;
  strcpy(byte_25F6310, "To_ContactWork");
  strcpy(&byte_25F633F, "\nTo_Business");
  strcpy(byte_25F6328, "To_Address");
  byte_25F6357 = 11;
  byte_25F636F = 16;
  strcpy(byte_25F6358, "To_Other_Contact");
  strcpy(&byte_25F6387, "\tTo_ContactSchool");
  strcpy(byte_25F6370, "To_School");
  byte_25F639F = 16;
  byte_25F63B7 = 17;
  strcpy(byte_25F63A0, "To_PersonLocation");
  qword_25F63B8 = (uint64_t)operator new(0x20uLL);
  unk_25F63C0 = v279;
  strcpy((char *)qword_25F63B8, "To_ContactCustomLabelAddress");
  byte_25F63E7 = 7;
  strcpy((char *)&dword_25F63D0, "At_Home");
  byte_25F63FF = 14;
  strcpy((char *)&qword_25F63E8, "At_ContactHome");
  byte_25F6417 = 7;
  strcpy((char *)&dword_25F6400, "At_Work");
  byte_25F642F = 14;
  strcpy((char *)&qword_25F6418, "At_ContactWork");
  strcpy(&byte_25F6447, "\nAt_Business");
  strcpy((char *)&qword_25F6430, "At_Address");
  byte_25F645F = 11;
  byte_25F6477 = 16;
  strcpy(byte_25F6460, "At_Other_Contact");
  byte_25F648F = 4;
  strcpy((char *)&dword_25F6478, "Home");
  byte_25F64A7 = 11;
  strcpy((char *)&qword_25F6490 + 7, "Home");
  qword_25F6490 = *(void *)&v265[16];
  byte_25F64BF = 4;
  strcpy((char *)&dword_25F64A8, "Work");
  byte_25F64D7 = 11;
  strcpy((char *)&qword_25F64C0 + 7, "Work");
  qword_25F64C0 = *(void *)v265;
  byte_25F64EF = 7;
  strcpy((char *)&dword_25F64D8, "Address");
  byte_25F6507 = 8;
  strcpy((char *)&qword_25F64F0, "Business");
  byte_25F651F = 13;
  qword_25F6508 = *(void *)&v265[48];
  *(uint64_t *)((char *)&qword_25F6508 + 5) = *(void *)&v265[32];
  byte_25F6515 = 0;
  byte_25F6537 = 6;
  strcpy((char *)&dword_25F6520, "School");
  byte_25F654F = 13;
  strcpy((char *)&qword_25F6538, "ContactSchool");
  byte_25F6567 = 14;
  strcpy((char *)&qword_25F6550, "PersonLocation");
  qword_25F6568 = (uint64_t)operator new(0x20uLL);
  xmmword_25F6570 = v280;
  strcpy((char *)qword_25F6568, "ContactCustomLabelAddress");
  if (byte_25F62C7 < 0)
  {
    sub_4200(&xmmword_25F6580, (void *)xmmword_25F62B0, *((unint64_t *)&xmmword_25F62B0 + 1));
  }
  else
  {
    xmmword_25F6580 = xmmword_25F62B0;
    qword_25F6590 = unk_25F62C0;
  }
  byte_25F65AF = 16;
  strcpy((char *)&xmmword_25F6598, "{PrevExitNumber}");
  byte_25F65C7 = 10;
  strcpy((char *)&qword_25F65B0, "{PrevRoad}");
  qword_25F65C8 = (uint64_t)operator new(0x20uLL);
  unk_25F65D0 = v281;
  strcpy((char *)qword_25F65C8, "{RouteTotalExpectedTime}");
  byte_25F65F7 = 18;
  strcpy(byte_25F65E0, "{ChargePercentage}");
  qword_25F65F8 = (uint64_t)operator new(0x20uLL);
  unk_25F6600 = v275;
  strcpy((char *)qword_25F65F8, "{RemainingChargePercentage}");
  byte_25F6627 = 16;
  strcpy(byte_25F6610, "{ChargeDuration}");
  byte_25F663F = 15;
  strcpy((char *)&qword_25F6628, "{ConnectorType}");
  byte_25F6657 = 19;
  strcpy(byte_25F6640, "{ChargeStationName}");
  byte_25F666F = 7;
  strcpy((char *)&dword_25F6658, "{Power}");
  byte_25F6687 = 13;
  strcpy((char *)&qword_25F6670, "{VehicleName}");
  byte_25F669F = 18;
  strcpy((char *)&xmmword_25F6688, "{AreaIncidentName}");
  byte_25F66B7 = 14;
  strcpy((char *)&qword_25F66A0, "{AreaIncident}");
  byte_25F66CF = 16;
  strcpy((char *)&xmmword_25F66B8, "{AffectedRegion}");
  byte_25F66E7 = 21;
  strcpy(byte_25F66D0, "{AreaIncidentWeblink}");
  byte_25F66FF = 20;
  strcpy((char *)&xmmword_25F66E8, "{AreaIncidentAgency}");
  byte_25F6717 = 11;
  strcpy((char *)&qword_25F6700, "{IssueTime}");
  byte_25F672F = 12;
  strcpy((char *)&qword_25F6718, "{UpdateTime}");
  byte_25F6747 = 11;
  strcpy((char *)&qword_25F6730, "{IssueDate}");
  byte_25F675F = 12;
  strcpy((char *)&qword_25F6748, "{UpdateDate}");
  qword_25F6760 = (uint64_t)operator new(0x20uLL);
  unk_25F6768 = v281;
  strcpy((char *)qword_25F6760, "{AreaIncidentDataSource}");
  byte_25F678F = 13;
  strcpy((char *)&qword_25F6778, "{AreaHectare}");
  byte_25F67A7 = 10;
  strcpy((char *)&qword_25F6790, "{AreaAcre}");
  qword_25F67A8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25F67B0 = v277;
  strcpy((char *)qword_25F67A8, "{WildfirePercentageContained}");
  qword_25F67C0 = (uint64_t)operator new(0x28uLL);
  unk_25F67C8 = v269[1];
  strcpy((char *)qword_25F67C0, "{WildfireExpectedContainmentDate}");
  qword_25F67D8 = (uint64_t)operator new(0x20uLL);
  unk_25F67E0 = v279;
  strcpy((char *)qword_25F67D8, "{ServerRecommendedRouteName}");
  qword_25F67F0 = (uint64_t)operator new(0x20uLL);
  unk_25F67F8 = v279;
  strcpy((char *)qword_25F67F0, "{ServerNonRecommendedRoute1}");
  qword_25F6808 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25F6810 = v279;
  strcpy((char *)qword_25F6808, "{ServerNonRecommendedRoute2}");
  byte_25F6837 = 12;
  strcpy((char *)&qword_25F6820, "{ClientDest}");
  byte_25F684F = 6;
  strcpy((char *)&dword_25F6838, "{Name}");
  qword_25F6850 = (uint64_t)operator new(0x20uLL);
  unk_25F6858 = v271;
  strcpy((char *)qword_25F6850, "ProactiveAlert_FasterRouteTitle");
  qword_25F6868 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25F6870 = v278;
  strcpy((char *)qword_25F6868, "ProactiveAlert_RoadClosure");
  qword_25F6880 = (uint64_t)operator new(0x30uLL);
  unk_25F6888 = v273;
  strcpy((char *)qword_25F6880, "ProactiveAlert_UnusuallyHeavyTrafficOnTwo");
  qword_25F6898 = (uint64_t)operator new(0x28uLL);
  unk_25F68A0 = v276;
  strcpy((char *)qword_25F6898, "ProactiveAlert_FasterRouteTitle_to_Home");
  qword_25F68B0 = (uint64_t)operator new(0x28uLL);
  unk_25F68B8 = v276;
  strcpy((char *)qword_25F68B0, "ProactiveAlert_FasterRouteTitle_to_Work");
  qword_25F68C8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25F68D0 = v276;
  strcpy((char *)qword_25F68C8, "ProactiveAlert_FasterRouteTitle_to_Name");
  qword_25F68E0 = (uint64_t)operator new(0x30uLL);
  unk_25F68E8 = xmmword_20B93B0;
  strcpy((char *)qword_25F68E0, "ProactiveAlert_FasterRouteTitle_to_StreetName");
  byte_25F690F = 17;
  strcpy(byte_25F68F8, "Proactive_Driving");
  strcpy(&byte_25F6927, "\n{RouteName}");
  strcpy((char *)&qword_25F6910, "_RouteName");
  byte_25F693F = 11;
  qword_25F6940 = (uint64_t)operator new(0x28uLL);
  unk_25F6948 = v269[1];
  strcpy((char *)qword_25F6940, "Pass_Traffic_Light_Spoken_Primary");
  qword_25F6958 = (uint64_t)operator new(0x20uLL);
  unk_25F6960 = v277;
  strcpy((char *)qword_25F6958, "Pass_Stop_Sign_Spoken_Primary");
  unk_25F6970 = operator new(0x20uLL);
  unk_25F6978 = v269[0];
  strcpy(unk_25F6970, "Pass_Roundabout_Spoken_Primary");
  strcpy(&byte_25F699F, "\nBannerBody");
  strcpy(byte_25F6988, "BannerHead");
  strcpy(&byte_25F69B7, "\nBannerDescription");
  byte_25F69CF = 17;
  strcpy(&byte_25F69E7, "\n_Incident");
  strcpy((char *)&qword_25F69D0, "VoiceAlert");
  strcpy(&byte_25F69FF, "\t_Area_Incident");
  byte_25F6A17 = 14;
  byte_25F6A2F = 15;
  strcpy((char *)&qword_25F6A18, "_Area_Incidents");
  strcpy(&byte_25F6A47, "\t_Crash");
  strcpy((char *)&qword_25F6A30, "_Accident");
  byte_25F6A5F = 6;
  byte_25F6A77 = 16;
  strcpy((char *)&xmmword_25F6A60, "_Congestion_Zone");
  strcpy(&byte_25F6A8F, "\n_Environmental_Zone");
  strcpy((char *)&qword_25F6A78, "_Toll_Zone");
  byte_25F6AA7 = 19;
  BYTE1(qword_25F6AB8) = 116;
  WORD1(qword_25F6AB8) = 0;
  HIDWORD(qword_25F6AB8) = 301989888;
  strcpy(byte_25F6AC0, "_Construction");
  strcpy((char *)&qword_25F6AA8, "_Incident_Accide");
  byte_25F6AD7 = 13;
  byte_25F6AEF = 7;
  strcpy((char *)&dword_25F6AD8, "_Hazard");
  byte_25F6B07 = 12;
  strcpy((char *)&qword_25F6AF0, "_LaneClosure");
  byte_25F6B1F = 12;
  strcpy((char *)&qword_25F6B08, "_LaneTrailer");
  qmemcpy(&byte_25F6B37, "\t_LaneTrailer", 13);
  strcpy((char *)&qword_25F6B20, "_Shoulder");
  qword_25F6B48 = 0x1500007200000000;
  *(void *)algn_25F6B44 = *(void *)"_Shoulder";
  strcpy((char *)&xmmword_25F6B50, "_Causing_Traffic_Delay");
  HIBYTE(word_25F6B66) = 22;
  byte_25F6B7F = 6;
  strcpy((char *)&dword_25F6B68, "_Timed");
  byte_25F6B97 = 12;
  strcpy((char *)&qword_25F6B80, "_HasDistance");
  byte_25F6BAF = 8;
  strcpy((char *)&qword_25F6B98, "_Closure");
  strcpy(&byte_25F6BC7, "\n_BadRoad");
  strcpy((char *)&qword_25F6BB0, "_NoReroute");
  byte_25F6BDF = 8;
  byte_25F6BF7 = 12;
  strcpy((char *)&qword_25F6BE0, "_TollTrailer");
  byte_25F6C0F = 12;
  strcpy((char *)&qword_25F6BF8, "_BestTrailer");
  byte_25F6C27 = 8;
  strcpy((char *)&qword_25F6C10, "_Trailer");
  byte_25F6C3F = 18;
  strcpy((char *)&xmmword_25F6C28, "_Secondary_Trailer");
  byte_25F6C57 = 8;
  strcpy((char *)&qword_25F6C40, "_Savings");
  byte_25F6C6F = 8;
  strcpy((char *)&qword_25F6C58, "_AltRoad");
  byte_25F6C87 = 6;
  strcpy((char *)&dword_25F6C70, "_Named");
  byte_25F6C9F = 6;
  strcpy((char *)&dword_25F6C88, "_NAMED");
  byte_25F6CB7 = 22;
  strcpy((char *)&xmmword_25F6CA0, "_Named_Suggested_Route");
  qword_25F6CD0 = 0x1000000000000000;
  xmmword_25F6CC0 = xmmword_20E81D0;
  byte_25F6CEF = 11;
  strcpy((char *)&qword_25F6CD8, "_Speed_Trap");
  byte_25F6D07 = 4;
  strcpy((char *)&dword_25F6CF0, "_UGI");
  byte_25F6D1F = 12;
  strcpy((char *)&qword_25F6D08, "_Safer_Route");
  qword_25F6D20 = (uint64_t)operator new(0x20uLL);
  unk_25F6D28 = v271;
  strcpy((char *)qword_25F6D20, "BlockedRouteByBlockingIncident_");
  qword_25F6D38 = (uint64_t)operator new(0x28uLL);
  long long v272 = xmmword_20B9280;
  unk_25F6D40 = xmmword_20B9280;
  strcpy((char *)qword_25F6D38, "BlockedRouteByManeuverRestriction_");
  qword_25F6D50 = (uint64_t)operator new(0x20uLL);
  unk_25F6D58 = v269[0];
  strcpy((char *)qword_25F6D50, "BlockedRouteByTimeRestriction_");
  qword_25F6D68 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25F6D70 = xmmword_20B8FD0;
  strcpy((char *)qword_25F6D68, "SuggestRouteToAvoidBlockingIncident_");
  qword_25F6D80 = (uint64_t)operator new(0x30uLL);
  unk_25F6D88 = xmmword_20B9380;
  strcpy((char *)qword_25F6D80, "SuggestRouteToAvoidBlockingManeuverRestriction_");
  qword_25F6D98 = (uint64_t)operator new(0x30uLL);
  unk_25F6DA0 = xmmword_20B93E0;
  strcpy((char *)qword_25F6D98, "SuggestRouteToAvoidBlockingTimeRestriction_");
  byte_25F6DC7 = 1;
  word_25F6DB0 = 95;
  strcpy((char *)&xmmword_25F6DC8, "IncidentsCausingDelay_");
  HIBYTE(word_25F6DDE) = 22;
  qword_25F6DE0 = (uint64_t)operator new(0x19uLL);
  unk_25F6DE8 = v282;
  strcpy((char *)qword_25F6DE0, "NonVotableRoadIncident_");
  byte_25F6E0F = 20;
  strcpy(byte_25F6DF8, "VotableRoadIncident_");
  byte_25F6E27 = 13;
  strcpy((char *)&qword_25F6E10, "AreaIncident_");
  byte_25F6E3F = 15;
  strcpy((char *)&qword_25F6E28, "CongestionZone_");
  qword_25F6E40 = (uint64_t)operator new(0x20uLL);
  unk_25F6E48 = v281;
  strcpy((char *)qword_25F6E40, "EVModifiedChargingStops_");
  byte_25F6E6F = 13;
  strcpy((char *)&qword_25F6E58, "EVDisconnect_");
  byte_25F6E87 = 12;
  strcpy((char *)&qword_25F6E70, "EVReconnect_");
  qword_25F6E88 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25F6E90 = v279;
  strcpy((char *)qword_25F6E88, "EVOfflineToOnlineTransition_");
  byte_25F6EB7 = 13;
  strcpy((char *)&qword_25F6EA0, "EVOfflineSAR_");
  byte_25F6ECF = 21;
  strcpy((char *)&xmmword_25F6EB8, "EVTowingNotSupported_");
  byte_25F6EE7 = 18;
  strcpy(algn_25F6ED0, "EVInfeasibleRoute_");
  qword_25F6EE8 = (uint64_t)operator new(0x38uLL);
  *(_OWORD *)algn_25F6EF0 = xmmword_20B8DF0;
  strcpy((char *)qword_25F6EE8, "SuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_25F6F00 = (uint64_t)operator new(0x40uLL);
  unk_25F6F08 = xmmword_20B98C0;
  strcpy((char *)qword_25F6F00, "LCSuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_25F6F18 = (uint64_t)operator new(0x30uLL);
  unk_25F6F20 = v274;
  strcpy((char *)qword_25F6F18, "SuggestRouteAddingStopsForEVInfeasibleRoute_");
  qmemcpy(v269, "InfeasibleRoute_ngStopsForEVInfe", sizeof(v269));
  qword_25F6F30 = (uint64_t)operator new(0x30uLL);
  *(_WORD *)&v265[50] = 0;
  *(_DWORD *)&v265[52] = 0;
  *(void *)&v265[56] = 0x8000000000000030;
  unk_25F6F38 = xmmword_20B9A80;
  strcpy((char *)qword_25F6F30, "LCSuggestRouteAddingStopsForEVInfeasibleRoute_");
  strcpy(v265, "InfeasibleRoute_dingStopsForEVInLCSuggestRouteAd.");
  qword_25F6F48 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_25F6F50 = v273;
  strcpy((char *)qword_25F6F48, "SuggestRouteAddingStopsToIncreaseDestSoc_");
  unint64_t v187 = operator new(0x30uLL);
  qword_25F6F60 = (uint64_t)v187;
  unk_25F6F68 = v274;
  *unint64_t v187 = *(_OWORD *)"SuggestRouteAddingStopsForEVInfeasibleRoute_";
  v187[1] = v269[1];
  *(_OWORD *)((char *)v187 + 28) = v269[0];
  *((unsigned char *)v187 + 44) = 0;
  qword_25F6F78 = (uint64_t)operator new(0x28uLL);
  unk_25F6F80 = v272;
  strcpy((char *)qword_25F6F78, "SuggestDetourWithHigherArrivalSOC_");
  uint64_t v188 = operator new(0x30uLL);
  qword_25F6F90 = (uint64_t)v188;
  unk_25F6F98 = *(_OWORD *)&v265[48];
  *uint64_t v188 = *(_OWORD *)&v265[32];
  v188[1] = *(_OWORD *)&v265[16];
  *(_OWORD *)((char *)v188 + 30) = *(_OWORD *)v265;
  *((unsigned char *)v188 + 46) = 0;
  qword_25F6FA8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25F6FB0 = v276;
  strcpy((char *)qword_25F6FA8, "SuggestRouteToDestForEVInfeasibleRoute_");
  qword_25F6FC0 = (uint64_t)operator new(0x28uLL);
  unk_25F6FC8 = v268;
  strcpy((char *)qword_25F6FC0, "SuggestRouteRemovingStopsFromEVRoute_");
  qword_25F6FD8 = (uint64_t)operator new(0x20uLL);
  unk_25F6FE0 = v281;
  strcpy((char *)qword_25F6FD8, "OfflineToOnlineNewRoute_");
  qword_25F6FF0 = (uint64_t)operator new(0x40uLL);
  unk_25F6FF8 = xmmword_20B98C0;
  strcpy((char *)qword_25F6FF0, "SuggestDetourWithHigherArrivalSOCForInfeasibleUserRoute_");
  byte_25F701F = 20;
  strcpy(byte_25F7008, "LPR_OFFLINE_REROUTE_");
  byte_25F7037 = 16;
  strcpy((char *)&xmmword_25F7020, "LPR_OFFLINE_SAR_");
  byte_25F704F = 20;
  strcpy(byte_25F7038, "LPR_OFFLINE_REROUTE_");
  byte_25F7067 = 16;
  strcpy((char *)&xmmword_25F7050, "LPR_OFFLINE_SAR_");
  byte_25F707F = 19;
  strcpy(byte_25F7068, "SuggestFasterRoute_");
  qword_25F7080 = (char *)operator new(0x20uLL);
  xmmword_25F7088 = v280;
  strcpy(qword_25F7080, "AreaIncidentSaferReroute_");
  byte_25F70AF = 12;
  strcpy((char *)&qword_25F7098, "_Remove_Stop");
  byte_25F70C7 = 13;
  strcpy((char *)&qword_25F70B0, "_Remove_Stops");
  strcpy(&byte_25F70DF, "\t_Add_Stops");
  strcpy((char *)&qword_25F70C8, "_Add_Stop");
  strcpy(&byte_25F70F7, "\n_Change_Route");
  byte_25F710F = 13;
  byte_25F7127 = 15;
  strcpy((char *)&qword_25F7110, "_Different_Stop");
  byte_25F713F = 16;
  strcpy((char *)&xmmword_25F7128, "_Different_Stops");
  byte_25F7157 = 15;
  strcpy((char *)&qword_25F7140, "_EV_Remove_Stop");
  byte_25F716F = 16;
  strcpy((char *)&xmmword_25F7158, "_EV_Remove_Stops");
  byte_25F7187 = 12;
  strcpy((char *)&qword_25F7170, "_EV_Add_Stop");
  byte_25F719F = 13;
  strcpy((char *)&qword_25F7188, "_EV_Add_Stops");
  byte_25F71B7 = 15;
  strcpy((char *)&qword_25F71A0, "_EV_Low_Battery");
  byte_25F71CF = 14;
  strcpy((char *)&qword_25F71B8, "_EV_Infeasible");
  byte_25F71E7 = 15;
  strcpy((char *)&qword_25F71D0, "_EV_Last_Chance");
  qword_25F71E8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25F71F0 = v281;
  strcpy((char *)qword_25F71E8, "_EV_Low_Battery_Add_Stop");
  uint64_t v189 = qword_25F70E8;
  qword_25F7200 = (uint64_t)operator new(0x20uLL);
  unk_25F7208 = v280;
  strcpy((char *)qword_25F7200, "_EV_Low_Battery_Add_Stops");
  qword_25F7218 = (uint64_t)operator new(0x19uLL);
  unk_25F7220 = v282;
  strcpy((char *)qword_25F7218, "_EV_Infeasible_Add_Stop");
  int v190 = byte_25F70F7;
  if (byte_25F70F7 >= 0) {
    size_t v191 = byte_25F70F7;
  }
  else {
    size_t v191 = v189;
  }
  unint64_t v192 = v191 + 14;
  if (v191 + 14 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v192 >= 0x17)
  {
    uint64_t v195 = (v192 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v192 | 7) != 0x17) {
      uint64_t v195 = v192 | 7;
    }
    uint64_t v196 = v195 + 1;
    uint64_t v197 = (char *)operator new(v195 + 1);
    qword_25F7238 = v191 + 14;
    unk_25F7240 = v196 | 0x8000000000000000;
    qword_25F7230 = (uint64_t)v197;
    qmemcpy(v197, "_EV_Infeasible", 14);
    int v193 = v197 + 14;
  }
  else
  {
    BYTE1(qword_25F7238) = 0;
    WORD1(qword_25F7238) = 0;
    HIDWORD(qword_25F7238) = 0;
    unk_25F7240 = 0;
    byte_25F7247 = v191 + 14;
    strcpy((char *)&qword_25F7230, "_EV_Infe");
    int v193 = (char *)&qword_25F7238 + 6;
    if (!v191)
    {
      char v194 = 1;
      goto LABEL_433;
    }
  }
  if (v190 >= 0) {
    uint64_t v198 = (uint64_t)&qword_25F70E0;
  }
  else {
    uint64_t v198 = 0x6F74535F6464415FLL;
  }
  memmove(v193, (const void *)v198, v191);
  char v194 = 0;
LABEL_433:
  v193[v191] = 0;
  unint64_t v199 = (char *)operator new(0x20uLL);
  qword_25F7248 = (uint64_t)v199;
  *(_OWORD *)algn_25F7250 = v281;
  *(void *)unint64_t v199 = qword_25F71D0;
  *(void *)(v199 + 7) = *(uint64_t *)((char *)&qword_25F71D0 + 7);
  *(void *)(v199 + 15) = qword_25F70C8;
  v199[23] = word_25F70D0;
  v199[24] = 0;
  unint64_t v200 = v191 + 15;
  if (v191 + 15 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v200 > 0x16)
  {
    uint64_t v202 = (v200 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v200 | 7) != 0x17) {
      uint64_t v202 = v200 | 7;
    }
    uint64_t v203 = v202 + 1;
    uint64_t v201 = (uint64_t *)operator new(v202 + 1);
    qword_25F7268 = v191 + 15;
    unk_25F7270 = v203 | 0x8000000000000000;
    qword_25F7260 = (uint64_t)v201;
  }
  else
  {
    uint64_t v201 = &qword_25F7260;
    qword_25F7268 = 0;
    unk_25F7270 = 0;
    qword_25F7260 = 0;
    byte_25F7277 = v191 + 15;
  }
  *uint64_t v201 = qword_25F71D0;
  *(uint64_t *)((char *)v201 + 7) = *(uint64_t *)((char *)&qword_25F71D0 + 7);
  long long v204 = (char *)v201 + 15;
  if ((v194 & 1) == 0)
  {
    if (v190 >= 0) {
      uint64_t v205 = &qword_25F70E0;
    }
    else {
      uint64_t v205 = (uint64_t *)qword_25F70E0;
    }
    memmove((char *)v201 + 15, v205, v191);
  }
  v204[v191] = 0;
  byte_25F728F = 17;
  strcpy((char *)&xmmword_25F7278, "_EV_Forced_Detour");
  qword_25F7290 = (uint64_t)operator new(0x20uLL);
  unk_25F7298 = v280;
  strcpy((char *)qword_25F7290, "_EV_Higher_Arrival_Charge");
  qword_25F72A8 = (uint64_t)operator new(0x28uLL);
  unk_25F72B0 = xmmword_20B8FD0;
  strcpy((char *)qword_25F72A8, "_EV_Infeasible_Higher_Arrival_Charge");
  byte_25F72D7 = 16;
  strcpy(byte_25F72C0, "_EV_Out_Of_Range");
  qword_25F72D8 = (uint64_t)operator new(0x20uLL);
  unk_25F72E0 = v275;
  strcpy((char *)qword_25F72D8, "_EV_Last_Chance_Take_Detour");
  strcpy(byte_25F72F0, "_EV_Forced_Modify_Stop");
  HIBYTE(word_25F7306) = 22;
  qword_25F7308 = (uint64_t)operator new(0x19uLL);
  unk_25F7310 = v282;
  strcpy((char *)qword_25F7308, "_EV_Forced_Modify_Stops");
  byte_25F7337 = 19;
  strcpy(byte_25F7320, "_EV_Forced_Add_Stop");
  byte_25F734F = 20;
  strcpy((char *)&xmmword_25F7338, "_EV_Forced_Add_Stops");
  byte_25F7367 = 21;
  strcpy(byte_25F7350, "_EV_Battery_Info_Lost");
  qword_25F7368 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25F7370 = v280;
  strcpy((char *)qword_25F7368, "_EV_Battery_Info_Restored");
  qword_25F7380 = (uint64_t)operator new(0x20uLL);
  unk_25F7388 = v281;
  strcpy((char *)qword_25F7380, "_EV_Towing_Not_Supported");
  qword_25F7398 = (uint64_t)operator new(0x28uLL);
  unk_25F73A0 = v270;
  strcpy((char *)qword_25F7398, "_EV_Offline_to_Online_Transition");
  byte_25F73C7 = 15;
  strcpy((char *)&qword_25F73B0, "_EV_Offline_SAR");
  qword_25F73C8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25F73D0 = v279;
  strcpy((char *)qword_25F73C8, "_Offline_to_Online_New_Route");
  byte_25F73F7 = 12;
  strcpy((char *)&qword_25F73E0, "BannerButton");
  byte_25F740F = 8;
  strcpy((char *)&qword_25F73F8, "_Dismiss");
  byte_25F7427 = 3;
  word_25F7410 = 20319;
  byte_25F7412 = 75;
  byte_25F7413 = 0;
  byte_25F743F = 11;
  strcpy((char *)&qword_25F7428, "_Still_Here");
  byte_25F7457 = 8;
  strcpy((char *)&qword_25F7440, "_Cleared");
  qmemcpy(&byte_25F746F, "\nBannerButton", 13);
  strcpy((char *)&qword_25F7458, "_No_Thanks");
  uint64_t v206 = qword_25F73E8;
  qword_25F7480 = 0x1400000000000000;
  *(void *)algn_25F747C = 0x7373696D7369445FLL;
  qword_25F7498 = 0xF00000000000000;
  qword_25F7490 = 0x4B4F5F6E6F7474;
  int v207 = byte_25F7187;
  if (byte_25F7187 >= 0) {
    size_t v208 = byte_25F7187;
  }
  else {
    size_t v208 = qword_25F7178;
  }
  unint64_t v209 = v208 + 12;
  qword_25F7488 = *(void *)"BannerButton";
  if (v208 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v209 >= 0x17)
  {
    uint64_t v211 = (v209 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v209 | 7) != 0x17) {
      uint64_t v211 = v209 | 7;
    }
    uint64_t v212 = v211 + 1;
    long long v213 = (char *)operator new(v211 + 1);
    qword_25F74A8 = v208 + 12;
    unk_25F74B0 = v212 | 0x8000000000000000;
    qword_25F74A0 = (uint64_t)v213;
    *((_DWORD *)v213 + 2) = 1852798068;
    *(void *)long long v213 = *(void *)"BannerButton";
    uint64_t v210 = v213 + 12;
  }
  else
  {
    BYTE5(qword_25F74A8) = 0;
    HIWORD(qword_25F74A8) = 0;
    unk_25F74B0 = 0;
    byte_25F74B7 = v208 + 12;
    strcpy((char *)&qword_25F74A0, "BannerButton");
    uint64_t v210 = (char *)&qword_25F74A8 + 4;
    if (!v208) {
      goto LABEL_458;
    }
  }
  if (v207 >= 0) {
    int v214 = &qword_25F7170;
  }
  else {
    int v214 = (uint64_t *)qword_25F7170;
  }
  memmove(v210, v214, v208);
LABEL_458:
  v210[v208] = 0;
  int v215 = byte_25F719F;
  if (byte_25F719F >= 0) {
    size_t v216 = byte_25F719F;
  }
  else {
    size_t v216 = unk_25F7190;
  }
  unint64_t v217 = v216 + 12;
  if (v216 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v217 >= 0x17)
  {
    uint64_t v219 = (v217 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v217 | 7) != 0x17) {
      uint64_t v219 = v217 | 7;
    }
    uint64_t v220 = v219 + 1;
    char v221 = (char *)operator new(v219 + 1);
    qword_25F74C0 = v216 + 12;
    unk_25F74C8 = v220 | 0x8000000000000000;
    qword_25F74B8 = (uint64_t)v221;
    *(void *)char v221 = qword_25F73E0;
    *((_DWORD *)v221 + 2) = qword_25F73E8;
    uint64_t v218 = v221 + 12;
  }
  else
  {
    qword_25F74C0 = 0;
    unk_25F74C8 = 0;
    byte_25F74CF = v216 + 12;
    LODWORD(qword_25F74C0) = qword_25F73E8;
    qword_25F74B8 = qword_25F73E0;
    uint64_t v218 = (char *)&qword_25F74C0 + 4;
    if (!v216) {
      goto LABEL_472;
    }
  }
  if (v215 >= 0) {
    int v222 = &qword_25F7188;
  }
  else {
    int v222 = (uint64_t *)qword_25F7188;
  }
  memmove(v218, v222, v216);
LABEL_472:
  v218[v216] = 0;
  int v223 = byte_25F7157;
  if (byte_25F7157 >= 0) {
    size_t v224 = byte_25F7157;
  }
  else {
    size_t v224 = unk_25F7148;
  }
  unint64_t v225 = v224 + 12;
  if (v224 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v225 >= 0x17)
  {
    uint64_t v227 = (v225 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v225 | 7) != 0x17) {
      uint64_t v227 = v225 | 7;
    }
    uint64_t v228 = v227 + 1;
    uint64_t v229 = (char *)operator new(v227 + 1);
    qword_25F74D8 = v224 + 12;
    unk_25F74E0 = v228 | 0x8000000000000000;
    qword_25F74D0 = (uint64_t)v229;
    *(void *)uint64_t v229 = qword_25F73E0;
    *((_DWORD *)v229 + 2) = qword_25F73E8;
    uint64_t v226 = v229 + 12;
  }
  else
  {
    qword_25F74D8 = 0;
    unk_25F74E0 = 0;
    byte_25F74E7 = v224 + 12;
    LODWORD(qword_25F74D8) = qword_25F73E8;
    qword_25F74D0 = qword_25F73E0;
    uint64_t v226 = (char *)&qword_25F74D8 + 4;
    if (!v224) {
      goto LABEL_486;
    }
  }
  if (v223 >= 0) {
    int v230 = &qword_25F7140;
  }
  else {
    int v230 = (uint64_t *)qword_25F7140;
  }
  memmove(v226, v230, v224);
LABEL_486:
  v226[v224] = 0;
  int v231 = byte_25F73F7;
  if (byte_25F73F7 >= 0) {
    size_t v232 = byte_25F73F7;
  }
  else {
    size_t v232 = v206;
  }
  int v233 = byte_25F716F;
  if (byte_25F716F >= 0) {
    size_t v234 = byte_25F716F;
  }
  else {
    size_t v234 = *((void *)&xmmword_25F7158 + 1);
  }
  unint64_t v235 = v234 + v232;
  if (v234 + v232 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v235 <= 0x16)
  {
    long long v236 = &qword_25F74E8;
    qword_25F74F0 = 0;
    unk_25F74F8 = 0;
    qword_25F74E8 = 0;
    byte_25F74FF = v234 + v232;
    if (!v232) {
      goto LABEL_499;
    }
    goto LABEL_495;
  }
  uint64_t v243 = (v235 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v235 | 7) != 0x17) {
    uint64_t v243 = v235 | 7;
  }
  uint64_t v244 = v243 + 1;
  long long v236 = (uint64_t *)operator new(v243 + 1);
  qword_25F74F0 = v234 + v232;
  unk_25F74F8 = v244 | 0x8000000000000000;
  qword_25F74E8 = (uint64_t)v236;
  if (v232)
  {
LABEL_495:
    if (v231 >= 0) {
      long long v237 = &qword_25F73E0;
    }
    else {
      long long v237 = (uint64_t *)qword_25F73E0;
    }
    memmove(v236, v237, v232);
  }
LABEL_499:
  long long v238 = (char *)v236 + v232;
  if (v234)
  {
    if (v233 >= 0) {
      unint64_t v239 = &xmmword_25F7158;
    }
    else {
      unint64_t v239 = (long long *)xmmword_25F7158;
    }
    memmove(v238, v239, v234);
  }
  v238[v234] = 0;
  unint64_t v240 = v232 + 11;
  if (v232 + 11 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v240 >= 0x17)
  {
    uint64_t v245 = (v240 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v240 | 7) != 0x17) {
      uint64_t v245 = v240 | 7;
    }
    uint64_t v246 = v245 + 1;
    unint64_t v241 = (uint64_t *)operator new(v245 + 1);
    qword_25F7508 = v232 + 11;
    unk_25F7510 = v246 | 0x8000000000000000;
    qword_25F7500 = (uint64_t)v241;
  }
  else
  {
    unint64_t v241 = &qword_25F7500;
    qword_25F7508 = 0;
    unk_25F7510 = 0;
    qword_25F7500 = 0;
    byte_25F7517 = v232 + 11;
    if (!v232)
    {
      *(_DWORD *)((char *)&qword_25F7500 + 7) = *(_DWORD *)((char *)&qword_25F7428 + 7);
      qword_25F7500 = qword_25F7428;
      BYTE3(qword_25F7508) = 0;
      LOBYTE(v242) = 8;
      goto LABEL_520;
    }
  }
  if (v231 >= 0) {
    long long v247 = &qword_25F73E0;
  }
  else {
    long long v247 = (uint64_t *)qword_25F73E0;
  }
  memmove(v241, v247, v232);
  int v248 = (char *)v241 + v232;
  int v249 = *(_DWORD *)((char *)&qword_25F7428 + 7);
  *(void *)int v248 = qword_25F7428;
  *(_DWORD *)(v248 + 7) = v249;
  v248[11] = 0;
  unint64_t v242 = v232 + 8;
  if (v232 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v242 <= 0x16)
  {
LABEL_520:
    long long v250 = &qword_25F7518;
    qword_25F7520 = 0;
    unk_25F7528 = 0;
    qword_25F7518 = 0;
    byte_25F752F = v242;
    if (!v232) {
      goto LABEL_525;
    }
    goto LABEL_521;
  }
  uint64_t v263 = (v242 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v242 | 7) != 0x17) {
    uint64_t v263 = v242 | 7;
  }
  uint64_t v264 = v263 + 1;
  long long v250 = (uint64_t *)operator new(v263 + 1);
  qword_25F7520 = v232 + 8;
  unk_25F7528 = v264 | 0x8000000000000000;
  qword_25F7518 = (uint64_t)v250;
  if (v232)
  {
LABEL_521:
    if (v231 >= 0) {
      uint64_t v251 = &qword_25F73E0;
    }
    else {
      uint64_t v251 = (uint64_t *)qword_25F73E0;
    }
    memmove(v250, v251, v232);
  }
LABEL_525:
  int v252 = (char *)v250 + v232;
  *(void *)int v252 = qword_25F7440;
  v252[8] = 0;
  int v253 = byte_25F746F;
  if (byte_25F746F >= 0) {
    size_t v254 = byte_25F746F;
  }
  else {
    size_t v254 = qword_25F7460;
  }
  unint64_t v255 = v254 + v232;
  if (v254 + v232 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v255 <= 0x16)
  {
    long long v256 = &qword_25F7530;
    qword_25F7538 = 0;
    unk_25F7540 = 0;
    qword_25F7530 = 0;
    byte_25F7547 = v254 + v232;
    if (!v232) {
      goto LABEL_535;
    }
    goto LABEL_531;
  }
  uint64_t v261 = (v255 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v255 | 7) != 0x17) {
    uint64_t v261 = v255 | 7;
  }
  uint64_t v262 = v261 + 1;
  long long v256 = (uint64_t *)operator new(v261 + 1);
  qword_25F7538 = v254 + v232;
  unk_25F7540 = v262 | 0x8000000000000000;
  qword_25F7530 = (uint64_t)v256;
  if (v232)
  {
LABEL_531:
    if (v231 >= 0) {
      long long v257 = &qword_25F73E0;
    }
    else {
      long long v257 = (uint64_t *)qword_25F73E0;
    }
    memmove(v256, v257, v232);
  }
LABEL_535:
  char v258 = (char *)v256 + v232;
  if (v254)
  {
    if (v253 >= 0) {
      uint64_t v259 = &qword_25F7458;
    }
    else {
      uint64_t v259 = (uint64_t *)qword_25F7458;
    }
    memmove(v258, v259, v254);
  }
  v258[v254] = 0;
  strcpy(&byte_25F755F, "\n{newroute}");
  strcpy((char *)&qword_25F7548, "{roadname}");
  strcpy(&byte_25F7577, "\n{count}");
  byte_25F758F = 7;
  strcpy(&byte_25F75A7, "\n{dur}");
  strcpy((char *)&qword_25F7590, "{duration}");
  byte_25F75BF = 5;
  qword_25F75C0 = (uint64_t)operator new(0x20uLL);
  unk_25F75C8 = v278;
  strcpy((char *)qword_25F75C0, "{PleaseProceedWithCaution}");
  byte_25F75EF = 15;
  strcpy((char *)&qword_25F75D8, "{UserRouteName}");
  byte_25F7607 = 20;
  strcpy((char *)&xmmword_25F75F0, "{SuggestedRouteName}");
  byte_25F761F = 18;
  strcpy(byte_25F7608, "Speed_Camera_Ahead");
  qword_25F7620 = (uint64_t)operator new(0x20uLL);
  unk_25F7628 = v277;
  strcpy((char *)qword_25F7620, "Red_Light_Camera_Ahead_Spoken");
  qword_25F7638 = (uint64_t)operator new(0x20uLL);
  unk_25F7640 = v277;
  strcpy((char *)qword_25F7638, "Stop_Sign_Camera_Ahead_Spoken");
  qword_25F7650 = (uint64_t)operator new(0x28uLL);
  unk_25F7658 = v272;
  strcpy((char *)qword_25F7650, "Speed_Camera_Ahead_Multiple_Spoken");
  qword_25F7668 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25F7670 = v266;
  strcpy((char *)qword_25F7668, "Red_Light_Camera_Ahead_Multiple_Spoken");
  qword_25F7680 = (uint64_t)operator new(0x20uLL);
  unk_25F7688 = v279;
  strcpy((char *)qword_25F7680, "Camera_Ahead_Multiple_Spoken");
  qword_25F7698 = (uint64_t)operator new(0x30uLL);
  unk_25F76A0 = v267;
  strcpy((char *)qword_25F7698, "Red_Light_Camera_Speed_Camera_Ahead_Spoken");
  qword_25F76B0 = (char *)operator new(0x30uLL);
  strcpy(qword_25F76B0, "Stop_Sign_Camera_Speed_Camera_Ahead_Spoken");
  byte_25F76DF = 16;
  xmmword_25F76B8 = v267;
  strcpy(byte_25F76C8, "_Speed_Limit_Mph");
  byte_25F76F7 = 16;
  strcpy(byte_25F76E0, "_Speed_Limit_Kph");
  byte_25F770F = 11;
  strcpy((char *)&qword_25F76F8, "Watch_Speed");
  byte_25F7727 = 4;
  strcpy((char *)&dword_25F7710, "_One");
  byte_25F773F = 4;
  strcpy((char *)&dword_25F7728, "_Two");
  byte_25F7757 = 4;
  strcpy((char *)&dword_25F7740, "_Few");
  byte_25F776F = 5;
  strcpy((char *)&dword_25F7758, "_Many");
  byte_25F7787 = 6;
  strcpy((char *)&dword_25F7770, "_Other");
  byte_25F779F = 4;
  strcpy((char *)&dword_25F7788, "_ONE");
  byte_25F77B7 = 7;
  strcpy((char *)&dword_25F77A0, "{Speed}");
  byte_25F77CF = 8;
  strcpy((char *)&qword_25F77B8, "Dismount");
  byte_25F77E7 = 4;
  strcpy((char *)&dword_25F77D0, "Walk");
  byte_25F77FF = 5;
  strcpy((char *)&dword_25F77E8, "Mount");
  byte_25F7817 = 7;
  strcpy((char *)&dword_25F7800, "Remount");
  strcpy(&byte_25F782F, "\t_Crosswalk");
  strcpy((char *)&qword_25F7818, "Walk_Road");
  strcpy(&byte_25F7847, "\n_PLURAL");
  byte_25F785F = 7;
  strcpy(&byte_25F7877, "\n{description1}");
  strcpy((char *)&qword_25F7860, "_SECONDARY");
  byte_25F788F = 14;
  byte_25F78A7 = 14;
  strcpy((char *)&qword_25F7890, "{description2}");
  byte_25F78BF = 21;
  strcpy((char *)&xmmword_25F78A8, "TWO_ROAD_DESCRIPTIONS");
  byte_25F78D7 = 17;
  strcpy((char *)&xmmword_25F78C0, "{SlopePercentage}");
  byte_25F78EF = 15;
  strcpy((char *)&qword_25F78D8, "_Protected_Lane");
  strcpy(&byte_25F7907, "\n_Paved_Path");
  strcpy((char *)&qword_25F78F0, "_Bike_Path");
  byte_25F791F = 11;
  byte_25F7937 = 15;
  strcpy((char *)&qword_25F7920, "_Dedicated_Lane");
  byte_25F794F = 12;
  strcpy((char *)&qword_25F7938, "_Shared_Path");
  strcpy(&byte_25F7967, "\n_UnnamedRoad");
  strcpy((char *)&qword_25F7950, "_Bike_Lane");
  byte_25F797F = 12;
  byte_25F7997 = 5;
  strcpy((char *)&dword_25F7980, "_Path");
  byte_25F79AF = 6;
  strcpy((char *)&dword_25F7998, "_Trail");
  strcpy(&byte_25F79C7, "\t_Plaza");
  strcpy((char *)&qword_25F79B0, "_Sidewalk");
  byte_25F79DF = 6;
  byte_25F79F7 = 15;
  strcpy((char *)&qword_25F79E0, "_Moving_Walkway");
  byte_25F7A0F = 14;
  strcpy((char *)&qword_25F79F8, "Two_Stage_Turn");
  byte_25F7A27 = 16;
  strcpy((char *)&xmmword_25F7A10, "{OptionalPeriod}");
  byte_25F7A3F = 18;
  strcpy((char *)&xmmword_25F7A28, "Advisory_Separator");
  byte_25F7A57 = 6;
  strcpy((char *)&dword_25F7A40, "Period");
  byte_25F7A6F = 21;
  strcpy((char *)&xmmword_25F7A58, "Advisory_Title_Notice");
  strcpy((char *)&xmmword_25F7A70, "Advisory_Title_Notices");
  HIBYTE(word_25F7A86) = 22;
  byte_25F7A9F = 7;
  strcpy((char *)&dword_25F7A88, "_DETAIL");
  byte_25F7AB7 = 17;
  strcpy((char *)&xmmword_25F7AA0, "_LONG_REGION_LIST");
  byte_25F7ACF = 16;
  strcpy((char *)&xmmword_25F7AB8, "Advisory_Grouped");
  byte_25F7AE7 = 11;
  strcpy((char *)&qword_25F7AD0, "_Advisories");
  qword_25F7AE8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25F7AF0 = v275;
  strcpy((char *)qword_25F7AE8, "Advisory_WILDFIRE_METADATA_");
  byte_25F7B17 = 8;
  strcpy((char *)&qword_25F7B00, "Advisory");
  byte_25F7B2F = 13;
  strcpy((char *)&qword_25F7B18, "MPR_NUM_STOPS");
  byte_25F7B47 = 17;
  strcpy(algn_25F7B30, "EV_CHARGE_STATION");
  byte_25F7B5F = 11;
  strcpy((char *)&qword_25F7B48, "_NAMED_CITY");
  byte_25F7B77 = 5;
  strcpy((char *)&dword_25F7B60, "_Stop");
  strcpy(&byte_25F7B8F, "\n{StopsCount}");
  strcpy((char *)&qword_25F7B78, "{CityName}");
  byte_25F7BA7 = 12;
  byte_25F7BBF = 11;
  strcpy((char *)&qword_25F7BA8, "_With_Other");
  byte_25F7BD7 = 15;
  strcpy((char *)&qword_25F7BC0, "{DepartureTime}");
  qword_25F7BD8 = (uint64_t)operator new(0x28uLL);
  unk_25F7BE0 = v276;
  strcpy((char *)qword_25F7BD8, "Ending_Charge_Station_Port_Availability");
  qword_25F7BF0 = (uint64_t)operator new(0x28uLL);
  unk_25F7BF8 = v268;
  strcpy((char *)qword_25F7BF0, "Ending_Charge_Station_No_Availability");
  qword_25F7C08 = (uint64_t)operator new(0x28uLL);
  unk_25F7C10 = v272;
  strcpy((char *)qword_25F7C08, "Ending_Charge_Station_No_Real_Time");
  byte_25F7C37 = 16;
  strcpy(byte_25F7C20, "{AvailablePorts}");
  byte_25F7C4F = 12;
  strcpy((char *)&qword_25F7C38, "{TotalPorts}");
  byte_25F7C67 = 14;
  strcpy((char *)&qword_25F7C50, "{ManeuverIcon}");
  qword_25F7C68 = (uint64_t)operator new(0x38uLL);
  *(_OWORD *)algn_25F7C70 = xmmword_20B9A60;
  strcpy((char *)qword_25F7C68, "Walking_Distance_ManeuverIcon_PrimaryInstruction");
  qword_25F7C80 = (uint64_t)operator new(0x20uLL);
  unk_25F7C88 = v275;
  strcpy((char *)qword_25F7C80, "Walking_Destination_Unnamed");
  qword_25F7C98 = (uint64_t)operator new(0x20uLL);
  unk_25F7CA0 = v277;
  strcpy((char *)qword_25F7C98, "TrafficDelay_Label_Title_Sign");
  qword_25F7CB0 = (uint64_t)operator new(0x20uLL);
  unk_25F7CB8 = v279;
  strcpy((char *)qword_25F7CB0, "Special_Guidance_Instruction");
  byte_25F7CDF = 2;
  strcpy((char *)&word_25F7CC8, "CZ");
  byte_25F7CF7 = 3;
  dword_25F7CE0 = 5919811;
  unk_25F7D0F = 3;
  dword_25F7CF8 = 6243649;
  byte_25F7D27 = 0;
  byte_25F7D3F = 7;
  strcpy((char *)&dword_25F7D28, "TRANSIT");
  byte_25F7D57 = 7;
  strcpy((char *)&dword_25F7D40, "OFFLINE");
  qword_25F7D58 = (uint64_t)operator new(0x28uLL);
  unk_25F7D60 = v266;
  strcpy((char *)qword_25F7D58, "Advisory_Card_French_Climate_Law_Title");
  qword_25F7D70 = (uint64_t)operator new(0x30uLL);
  unk_25F7D78 = xmmword_20B93C0;
  strcpy((char *)qword_25F7D70, "Advisory_Card_French_Climate_Law_Details");
  qword_25F7D88 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_25F7D90 = v273;
  strcpy((char *)qword_25F7D88, "French_Climate_Law_Metadata_Weblink_Title");
  qword_25F7DA0 = (uint64_t)operator new(0x20uLL);
  unk_25F7DA8 = v279;
  strcpy((char *)qword_25F7DA0, "{ClimateLawLearnMoreWeblink}");
  byte_25F7DCF = 3;
  dword_25F7DB8 = 4280902;
  qword_25F7DD0 = (uint64_t)operator new(0x70uLL);
  unk_25F7DD8 = xmmword_20E81E0;
  strcpy((char *)qword_25F7DD0, "https://www.vie-publique.fr/loi/278460-loi-22-aout-2021-climat-et-resilience-convention-citoyenne-climat");
  return *(double *)"ut-2021-climat-et-resilience-convention-citoyenne-climat";
}

void sub_E3C1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x3B7]) < 0)
  {
    operator delete((void *)STACK[0x3A0]);
    if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0)
  {
LABEL_3:
    if (SLOBYTE(STACK[0x387]) < 0) {
      goto LABEL_4;
    }
    goto LABEL_18;
  }
  operator delete((void *)STACK[0x388]);
  if (SLOBYTE(STACK[0x387]) < 0)
  {
LABEL_4:
    operator delete((void *)STACK[0x370]);
    if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0)
  {
LABEL_5:
    if (SLOBYTE(STACK[0x357]) < 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete((void *)STACK[0x358]);
  if (SLOBYTE(STACK[0x357]) < 0)
  {
LABEL_6:
    operator delete((void *)STACK[0x340]);
    if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0)
  {
LABEL_7:
    if (SLOBYTE(STACK[0x327]) < 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete((void *)STACK[0x328]);
  if (SLOBYTE(STACK[0x327]) < 0)
  {
LABEL_8:
    operator delete((void *)STACK[0x310]);
    if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0)
  {
LABEL_9:
    if (SLOBYTE(STACK[0x2F7]) < 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete((void *)STACK[0x2F8]);
  if (SLOBYTE(STACK[0x2F7]) < 0)
  {
LABEL_10:
    operator delete((void *)STACK[0x2E0]);
    if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0)
  {
LABEL_11:
    if (SLOBYTE(STACK[0x2C7]) < 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete((void *)STACK[0x2C8]);
  if (SLOBYTE(STACK[0x2C7]) < 0)
  {
LABEL_12:
    operator delete((void *)STACK[0x2B0]);
    if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0)
  {
LABEL_13:
    if (SLOBYTE(STACK[0x297]) < 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete((void *)STACK[0x298]);
  if (SLOBYTE(STACK[0x297]) < 0)
  {
LABEL_14:
    operator delete((void *)STACK[0x280]);
    if (SLOBYTE(STACK[0x27F]) < 0)
    {
LABEL_36:
      operator delete((void *)STACK[0x268]);
      if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0)
      {
LABEL_37:
        if (SLOBYTE(STACK[0x24F]) < 0)
        {
LABEL_38:
          operator delete((void *)STACK[0x238]);
          if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0)
          {
LABEL_39:
            if (SLOBYTE(STACK[0x21F]) < 0)
            {
LABEL_40:
              operator delete((void *)STACK[0x208]);
              if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0)
              {
LABEL_41:
                if (a72 < 0) {
                  goto LABEL_42;
                }
                goto LABEL_44;
              }
LABEL_34:
              operator delete(a73);
              if (a72 < 0)
              {
LABEL_42:
                operator delete(a71);
                if ((a70 & 0x80000000) == 0) {
                  goto LABEL_43;
                }
                goto LABEL_45;
              }
LABEL_44:
              if ((a70 & 0x80000000) == 0) {
LABEL_43:
              }
                _Unwind_Resume(a1);
LABEL_45:
              operator delete(a65);
              _Unwind_Resume(a1);
            }
LABEL_33:
            if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0) {
              goto LABEL_41;
            }
            goto LABEL_34;
          }
LABEL_32:
          operator delete((void *)STACK[0x220]);
          if (SLOBYTE(STACK[0x21F]) < 0) {
            goto LABEL_40;
          }
          goto LABEL_33;
        }
LABEL_31:
        if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0) {
          goto LABEL_39;
        }
        goto LABEL_32;
      }
LABEL_30:
      operator delete((void *)STACK[0x250]);
      if (SLOBYTE(STACK[0x24F]) < 0) {
        goto LABEL_38;
      }
      goto LABEL_31;
    }
LABEL_29:
    if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_30;
  }
LABEL_28:
  if (SLOBYTE(STACK[0x27F]) < 0) {
    goto LABEL_36;
  }
  goto LABEL_29;
}

uint64_t sub_E3C4F8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a3;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = sub_3750CC(a2);
  uint64_t v6 = *(void *)(a1 + 8);
  char v29 = 15;
  uint64_t v27 = 0;
  strcpy((char *)v28, "ResponseBuilder");
  size_t v25 = 0;
  size_t v26 = 0;
  unint64_t v7 = sub_374CDC(v6, (uint64_t)v28, (uint64_t *)&v25);
  sub_3CB370(v7, 3, a4, __p);
  sub_E44F64(a1 + 24, __p);
  uint64_t v8 = v31;
  if (v31)
  {
    do
    {
      int v13 = *(char **)v8;
      sub_57AC8((uint64_t *)v8 + 5);
      if (v8[39] < 0) {
        operator delete(*((void **)v8 + 2));
      }
      operator delete(v8);
      uint64_t v8 = v13;
    }
    while (v13);
  }
  uint64_t v9 = __p[0];
  __p[0] = 0;
  if (v9) {
    operator delete(v9);
  }
  uint64_t v10 = (void **)v25;
  if (v25)
  {
    uint64_t v11 = v26;
    uint64_t v12 = v25;
    if (v26 != v25)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != v10);
      uint64_t v12 = v25;
    }
    size_t v26 = v10;
    operator delete(v12);
  }
  if (v29 < 0)
  {
    operator delete(v28[0]);
    double v14 = *(double *)(a1 + 32) * 100.0;
    if (v14 < 0.0) {
      goto LABEL_17;
    }
  }
  else
  {
    double v14 = *(double *)(a1 + 32) * 100.0;
    if (v14 < 0.0)
    {
LABEL_17:
      double v15 = v14;
      if (v14 <= -4.50359963e15) {
        goto LABEL_25;
      }
      uint64_t v16 = (uint64_t)(v14 + v14);
      if (v16 >= 1) {
        --v16;
      }
      goto LABEL_24;
    }
  }
  double v15 = v14;
  if (v14 >= 4.50359963e15) {
    goto LABEL_25;
  }
  uint64_t v16 = (uint64_t)(v14 + v14) + 1;
LABEL_24:
  double v15 = (double)(v16 >> 1);
LABEL_25:
  if (v15 >= 9.22337204e18)
  {
    uint64_t v18 = 0x7FFFFFFFFFFFFFFELL;
    goto LABEL_36;
  }
  if (v14 >= 0.0)
  {
    if (v14 < 4.50359963e15)
    {
      uint64_t v17 = (uint64_t)(v14 + v14) + 1;
LABEL_34:
      double v14 = (double)(v17 >> 1);
    }
  }
  else if (v14 > -4.50359963e15)
  {
    uint64_t v17 = (uint64_t)(v14 + v14);
    if (v17 >= 1) {
      --v17;
    }
    goto LABEL_34;
  }
  uint64_t v18 = (uint64_t)v14;
LABEL_36:
  double v19 = *(double *)(a1 + 40) * 100.0;
  if (v19 >= 0.0)
  {
    double v20 = *(double *)(a1 + 40) * 100.0;
    if (v19 >= 4.50359963e15) {
      goto LABEL_44;
    }
    uint64_t v21 = (uint64_t)(v19 + v19) + 1;
  }
  else
  {
    double v20 = *(double *)(a1 + 40) * 100.0;
    if (v19 <= -4.50359963e15) {
      goto LABEL_44;
    }
    uint64_t v21 = (uint64_t)(v19 + v19);
    if (v21 >= 1) {
      --v21;
    }
  }
  double v20 = (double)(v21 >> 1);
LABEL_44:
  if (v20 < 9.22337204e18)
  {
    if (v19 >= 0.0)
    {
      if (v19 < 4.50359963e15)
      {
        uint64_t v22 = (uint64_t)(v19 + v19) + 1;
LABEL_53:
        double v19 = (double)(v22 >> 1);
      }
    }
    else if (v19 > -4.50359963e15)
    {
      uint64_t v22 = (uint64_t)(v19 + v19);
      if (v22 >= 1) {
        --v22;
      }
      goto LABEL_53;
    }
    uint64_t v23 = (uint64_t)v19;
    goto LABEL_55;
  }
  uint64_t v23 = 0x7FFFFFFFFFFFFFFELL;
LABEL_55:
  sub_423F68(a1 + 88, *(void *)(a1 + 8), v18, v23);
  return a1;
}

void sub_E3C800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_E3C838@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, int64x2_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  sub_162C594(a5, 0, 0);
  uint64_t v10 = a2[1];
  uint64_t v58 = (uint64_t)a2;
  if (*a2 == v10)
  {
    uint64_t result = sub_723EC(1u);
    if (result)
    {
      sub_6BAC((uint64_t)&v61);
      sub_188FC78(&v61, (uint64_t)"No routes found", 15);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      if (v60 < 0) {
        operator delete(__p);
      }
      if (v66 < 0) {
        operator delete(v65);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      uint64_t result = std::ios::~ios();
    }
    *(_DWORD *)(a5 + 40) |= 0x100000u;
    int v40 = 20;
  }
  else
  {
    uint64_t v57 = a4;
    unint64_t v11 = 0;
    unint64_t v12 = 0xBAA6550FFBAA6551 * ((v10 - *a2) >> 3);
    do
    {
      uint64_t v13 = *a2;
      double v14 = *(_DWORD **)(a5 + 296);
      if (v14 && (uint64_t v15 = *(int *)(a5 + 288), (int)v15 < *v14))
      {
        *(_DWORD *)(a5 + 288) = v15 + 1;
        uint64_t v16 = *(void *)&v14[2 * v15 + 2];
      }
      else
      {
        uint64_t v17 = sub_13D8C74(*(void *)(a5 + 280));
        uint64_t v16 = sub_188CDC8(a5 + 280, v17);
      }
      uint64_t v18 = (uint64_t *)(v13 + 7560 * v11);
      int v19 = sub_6478E0((uint64_t)v18);
      int v20 = v19;
      uint64_t v21 = (char *)a3->i64[0];
      unint64_t v22 = a3->u64[1];
      if (a3->i64[0] != v22)
      {
        while (*(_DWORD *)v21 != v19)
        {
          v21 += 32;
          if (v21 == (char *)v22) {
            goto LABEL_12;
          }
        }
      }
      if (v21 == (char *)v22)
      {
LABEL_12:
        if (v22 >= a3[1].i64[0])
        {
          uint64_t v23 = sub_3A6738(a3);
        }
        else
        {
          *(_DWORD *)unint64_t v22 = -1;
          *(void *)(v22 + 16) = 0;
          *(void *)(v22 + 24) = 0;
          uint64_t v23 = (char *)(v22 + 32);
          *(void *)(v22 + 8) = 0;
        }
        a3->i64[1] = (uint64_t)v23;
        *((_DWORD *)v23 - 8) = v20;
        uint64_t v21 = v23 - 32;
      }
      sub_E3CE8C(a1, v18, v11++, v16, (uint64_t)v21);
    }
    while (v11 != v12);
    sub_E3D44C(a1, a5);
    sub_E3D5BC(a1, v57, a5);
    uint64_t v25 = *(void *)(v57 + 1088);
    for (uint64_t i = *(void *)(v57 + 1096); v25 != i; v25 += 1120)
    {
      uint64_t v27 = *(_DWORD **)(a5 + 136);
      if (v27 && (uint64_t v28 = *(int *)(a5 + 128), (int)v28 < *v27))
      {
        *(_DWORD *)(a5 + 128) = v28 + 1;
        uint64_t v29 = *(void *)&v27[2 * v28 + 2];
      }
      else
      {
        uint64_t v30 = sub_13D9608(*(void *)(a5 + 120));
        uint64_t v29 = sub_188CDC8(a5 + 120, v30);
      }
      sub_E1163C(v25, v29, 1, v24);
    }
    uint64_t v31 = sub_3777C0(*(void **)(a1 + 8));
    uint64_t v33 = *(void *)v58;
    uint64_t v32 = *(void *)(v58 + 8);
    if (*(void *)v58 == v32)
    {
LABEL_29:
      char v38 = 1;
    }
    else
    {
      uint64_t v34 = v31;
      while (1)
      {
        uint64_t v35 = (uint64_t *)nullsub_1(v33);
        uint64_t v36 = *v35;
        uint64_t v37 = v35[1];
        if (*v35 != v37) {
          break;
        }
LABEL_28:
        v33 += 7560;
        if (v33 == v32) {
          goto LABEL_29;
        }
      }
      while (sub_3D34A8(v34, v36, *(unsigned __int8 *)(*(void *)a1 + 40)) == 2)
      {
        v36 += 12328;
        if (v36 == v37) {
          goto LABEL_28;
        }
      }
      char v38 = 0;
    }
    *(_DWORD *)(a5 + 40) |= 0x1000000u;
    *(unsigned char *)(a5 + 549) = v38;
    uint64_t v42 = *(void *)v58;
    uint64_t v41 = *(void *)(v58 + 8);
    if (*(void *)v58 == v41)
    {
LABEL_43:
      char v46 = 0;
    }
    else
    {
      while (1)
      {
        uint64_t v43 = nullsub_1(v42);
        size_t v44 = *(void **)v43;
        unint64_t v45 = *(void **)(v43 + 8);
        if (*(void **)v43 != v45) {
          break;
        }
LABEL_42:
        v42 += 7560;
        if (v42 == v41) {
          goto LABEL_43;
        }
      }
      while (1)
      {
        sub_46C77C(v44, &v61);
        if (sub_E548DC(v61, (unint64_t)v62, v63, v64, a1)) {
          break;
        }
        v44 += 1541;
        if (v44 == v45) {
          goto LABEL_42;
        }
      }
      char v46 = 1;
    }
    int v47 = *(_DWORD *)(a5 + 40) | 0x4000000;
    *(_DWORD *)(a5 + 40) = v47;
    *(unsigned char *)(a5 + 551) = v46;
    if (**(unsigned char **)a1)
    {
      sub_E17A18(*(void *)(a1 + 16), v58, a5);
      int v47 = *(_DWORD *)(a5 + 40);
    }
    *(_DWORD *)(a5 + 40) = v47 | 0x20000;
    uint64_t v48 = *(void *)(a5 + 512);
    if (!v48)
    {
      uint64_t v49 = *(void *)(a5 + 8);
      uint64_t v50 = (void *)(v49 & 0xFFFFFFFFFFFFFFFCLL);
      if (v49) {
        uint64_t v50 = (void *)*v50;
      }
      uint64_t v48 = sub_13DAE28((uint64_t)v50);
      *(void *)(a5 + 512) = v48;
    }
    *(_DWORD *)(v48 + 16) |= 1u;
    *(_DWORD *)(v48 + 24) = 0;
    uint64_t v51 = sub_1883FB0((void *)(a5 + 16), dword_254E9B0, 11, (uint64_t)&off_252C740, 0);
    int v52 = (long long *)(sub_6467E8(*(void **)v58, 0) + 7400);
    *(_DWORD *)(v51 + 16) |= 1u;
    uint64_t v53 = *(void *)(v51 + 8);
    int v54 = (uint64_t *)(v53 & 0xFFFFFFFFFFFFFFFCLL);
    if (v53) {
      int v54 = (uint64_t *)*v54;
    }
    sub_1881DF4((std::string **)(v51 + 48), v52, v54);
    size_t v55 = (uint64_t *)sub_374CE4(*(void **)(a1 + 8));
    uint64_t result = sub_2ABCBC(*v55);
    int v40 = 0;
    int v56 = *(_DWORD *)(a5 + 40);
    *(unsigned char *)(a5 + 550) = result;
    *(_DWORD *)(a5 + 40) = v56 | 0x2100000;
  }
  *(_DWORD *)(a5 + 536) = v40;
  return result;
}

void sub_E3CD8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a18);
    sub_162D64C(v18);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a18);
  sub_162D64C(v18);
  _Unwind_Resume(a1);
}

void sub_E3CDD8(_Unwind_Exception *a1)
{
  sub_162D64C(v1);
  _Unwind_Resume(a1);
}

void sub_E3CDEC(_Unwind_Exception *a1)
{
  sub_162D64C(v1);
  _Unwind_Resume(a1);
}

void sub_E3CE00(_Unwind_Exception *a1)
{
  sub_162D64C(v1);
  _Unwind_Resume(a1);
}

void sub_E3CE14(_Unwind_Exception *a1)
{
  sub_162D64C(v1);
  _Unwind_Resume(a1);
}

void sub_E3CE28(_Unwind_Exception *a1)
{
  sub_162D64C(v1);
  _Unwind_Resume(a1);
}

void sub_E3CE3C(_Unwind_Exception *a1)
{
  sub_162D64C(v1);
  _Unwind_Resume(a1);
}

void sub_E3CE50(_Unwind_Exception *a1)
{
  sub_162D64C(v1);
  _Unwind_Resume(a1);
}

void sub_E3CE64(_Unwind_Exception *a1)
{
  sub_162D64C(v1);
  _Unwind_Resume(a1);
}

void sub_E3CE78(_Unwind_Exception *a1)
{
  sub_162D64C(v1);
  _Unwind_Resume(a1);
}

void sub_E3CE8C(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  int v9 = sub_64873C(a2);
  int v10 = sub_E124DC(v9);
  *(_DWORD *)(a4 + 40) |= 0x100u;
  *(_DWORD *)(a4 + 288) = v10;
  int v11 = sub_6478E0((uint64_t)a2);
  *(_DWORD *)(a4 + 40) |= 0x40u;
  *(_DWORD *)(a4 + 280) = v11;
  unsigned int v12 = sub_649094();
  int v13 = sub_E124B8(v12);
  *(_DWORD *)(a4 + 40) |= 0x80u;
  *(_DWORD *)(a4 + 284) = v13;
  int v14 = sub_6478D8((uint64_t)a2);
  int v15 = sub_E150CC(v14);
  *(_DWORD *)(a4 + 40) |= 0x200u;
  *(_DWORD *)(a4 + 292) = v15;
  uint64_t v16 = (void *)(a5 + 8);
  unint64_t v17 = 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a5 + 16) - *(void *)(a5 + 8)) >> 3);
  if (v17 != sub_646938(a2))
  {
    unint64_t v18 = sub_646938(a2);
    uint64_t v19 = *(void *)(a5 + 8);
    int v20 = *(char ***)(a5 + 16);
    unint64_t v21 = 0x8E38E38E38E38E39 * (((uint64_t)v20 - v19) >> 3);
    if (v18 <= v21)
    {
      if (v18 < v21)
      {
        unint64_t v22 = (char **)(v19 + 72 * v18);
        while (v20 != v22)
        {
          v20 -= 9;
          sub_3A688C(a5 + 24, v20);
        }
        *(void *)(a5 + 16) = v22;
      }
    }
    else
    {
      sub_3A88A4((char **)(a5 + 8), v18 - v21);
    }
  }
  uint64_t v23 = (void *)nullsub_1(a2);
  uint64_t v24 = v23[1] - *v23;
  if (v24)
  {
    uint64_t v25 = 0;
    unint64_t v26 = 0;
    uint64_t v27 = v24 / 12328;
    do
    {
      uint64_t v30 = (__n128 *)sub_6467E8(a2, v26);
      int v31 = sub_6478D8((uint64_t)a2);
      uint64_t v32 = *(_DWORD **)(a4 + 64);
      if (v32 && (uint64_t v33 = *(int *)(a4 + 56), (int)v33 < *v32))
      {
        *(_DWORD *)(a4 + 56) = v33 + 1;
        uint64_t v29 = *(void *)&v32[2 * v33 + 2];
      }
      else
      {
        uint64_t v28 = sub_13D8E84(*(void *)(a4 + 48));
        uint64_t v29 = sub_188CDC8(a4 + 48, v28);
      }
      sub_E3D724((uint64_t *)a1, v30, v31, a3, v26++, v29, *v16 + v25);
      v25 += 72;
    }
    while (v27 != v26);
  }
  sub_E3DC50(a1, a2, a4);
  uint64_t v34 = sub_646C34(a2);
  if (v34 < 0) {
    __int16 v35 = -50;
  }
  else {
    __int16 v35 = 50;
  }
  int v36 = *(_DWORD *)(a4 + 40);
  *(_DWORD *)(a4 + 296) = (int)v34 / 100
                        + ((5243 * (__int16)(v35 + (int)v34 % 100)) >> 19)
                        + ((5243 * (__int16)(v35 + (int)v34 % 100)) >> 31);
  *(_DWORD *)(a4 + 40) = v36 | 0x401;
  uint64_t v37 = *(_DWORD **)(a4 + 232);
  if (!v37)
  {
    uint64_t v38 = *(void *)(a4 + 8);
    uint64_t v39 = (void *)(v38 & 0xFFFFFFFFFFFFFFFCLL);
    if (v38) {
      uint64_t v39 = (void *)*v39;
    }
    uint64_t v37 = (_DWORD *)sub_13D84A8((uint64_t)v39);
    *(void *)(a4 + 232) = v37;
  }
  sub_E3DD20(a1, (unsigned int **)a2, 2 * *(unsigned __int8 *)(a1 + 83), v37);
  *(_DWORD *)(a4 + 40) |= 0x20u;
  int v40 = *(_DWORD **)(a4 + 272);
  if (!v40)
  {
    uint64_t v41 = *(void *)(a4 + 8);
    uint64_t v42 = (void *)(v41 & 0xFFFFFFFFFFFFFFFCLL);
    if (v41) {
      uint64_t v42 = (void *)*v42;
    }
    int v40 = (_DWORD *)sub_13D84A8((uint64_t)v42);
    *(void *)(a4 + 272) = v40;
  }
  sub_E3DD20(a1, (unsigned int **)a2, 4, v40);
  *(_DWORD *)(a4 + 40) |= 2u;
  uint64_t v43 = *(void *)(a4 + 240);
  if (!v43)
  {
    uint64_t v44 = *(void *)(a4 + 8);
    unint64_t v45 = (void *)(v44 & 0xFFFFFFFFFFFFFFFCLL);
    if (v44) {
      unint64_t v45 = (void *)*v45;
    }
    uint64_t v43 = sub_13D8528((uint64_t)v45);
    *(void *)(a4 + 240) = v43;
  }
  char v46 = (unsigned __int8 *)sub_6477D4((uint64_t)a2);
  BOOL v47 = (*v46 | *((_DWORD *)v46 + 13)) == 0;
  *(_DWORD *)(v43 + 16) |= 1u;
  *(unsigned char *)(v43 + 24) = v47;
  char v48 = *(unsigned char *)(sub_6477D4((uint64_t)a2) + 1) ^ 1;
  *(_DWORD *)(v43 + 16) |= 2u;
  *(unsigned char *)(v43 + 25) = v48;
  sub_E3DFD8((unsigned char *)a1, a2, a3, a4);
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)size_t v68 = 0u;
  int v69 = 1065353216;
  sub_E3E18C(a1, a2, __p, a4);
  sub_E3E4C4(a1, a2, a4);
  sub_E3E6A0(a1, (uint64_t)a2, a4);
  sub_E3E848(a1, (char **)a2, a4, (uint64_t)__p);
  sub_E3EAD8(a1, (uint64_t)a2, __p, a4);
  sub_E3EBB8((int **)a1, a2, a4);
  uint64_t v49 = (uint64_t *)sub_648268((uint64_t)a2);
  uint64_t v50 = *v49;
  uint64_t v51 = v49[1];
  if (*v49 != v51)
  {
    do
    {
      int v52 = *(_DWORD **)(a4 + 208);
      if (v52 && (uint64_t v53 = *(int *)(a4 + 200), (int)v53 < *v52))
      {
        *(_DWORD *)(a4 + 200) = v53 + 1;
        uint64_t v54 = *(void *)&v52[2 * v53 + 2];
      }
      else
      {
        sub_13D9384(*(void *)(a4 + 192));
        uint64_t v54 = sub_188CDC8(a4 + 192, v55);
      }
      sub_DF290C(v50, __p, *(void *)a1, v54);
      v50 += 1056;
    }
    while (v50 != v51);
  }
  uint64_t v56 = sub_649000((uint64_t)a2);
  uint64_t v57 = *(int **)v56;
  uint64_t v58 = *(int **)(v56 + 8);
  if (*(int **)v56 != v58)
  {
    uint64_t v59 = (_DWORD *)(a4 + 216);
    do
    {
      while (1)
      {
        BOOL v60 = sub_882E4(*v57);
        BOOL v61 = v60;
        uint64_t v62 = *(unsigned int *)(a4 + 216);
        if (v62 == *(_DWORD *)(a4 + 220)) {
          break;
        }
        *(_DWORD *)(*(void *)(a4 + 224) + 4 * v62) = v60;
        *uint64_t v59 = v62 + 1;
        if (++v57 == v58) {
          goto LABEL_41;
        }
      }
      sub_188C80C((unsigned int *)(a4 + 216), v62 + 1);
      *(_DWORD *)(*(void *)(a4 + 224) + 4 * v62) = v61;
      *uint64_t v59 = v62 + 1;
      ++v57;
    }
    while (v57 != v58);
  }
LABEL_41:
  int v63 = (void **)v68[0];
  if (v68[0])
  {
    do
    {
      int v65 = (void **)*v63;
      if (*((char *)v63 + 39) < 0) {
        operator delete(v63[2]);
      }
      operator delete(v63);
      int v63 = v65;
    }
    while (v65);
  }
  unint64_t v64 = __p[0];
  __p[0] = 0;
  if (v64) {
    operator delete(v64);
  }
}

void sub_E3D3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_3A4C2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_E3D410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_3A4C2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_E3D424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_3A4C2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_E3D438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_3A4C2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_E3D44C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 288);
  if ((int)v2 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    int v6 = 0;
    while (1)
    {
      uint64_t v8 = *(void *)(*(void *)(a2 + 296) + 8 * v4 + 8);
      uint64_t v9 = *(unsigned int *)(v8 + 56);
      if ((int)v9 >= 1) {
        break;
      }
      uint64_t v7 = v5;
LABEL_4:
      ++v4;
      uint64_t v5 = v7;
      if (v4 == v2) {
        return;
      }
    }
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *(void *)(*(void *)(v8 + 64) + 8 * v10 + 8);
      *(_DWORD *)(v11 + 40) |= 4u;
      uint64_t v12 = *(void *)(v11 + 8);
      int v13 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
      if (v12) {
        int v13 = (uint64_t *)*v13;
      }
      char v18 = 4;
      LODWORD(__p) = v6;
      BYTE4(__p) = 0;
      sub_1881DF4((std::string **)(v11 + 672), &__p, v13);
      if (v18 < 0)
      {
        operator delete((void *)__p);
        uint64_t v14 = *(unsigned int *)(v11 + 64);
        if ((int)v14 >= 1)
        {
LABEL_15:
          int v15 = (uint64_t *)(*(void *)(v11 + 72) + 8);
          do
          {
            uint64_t v16 = *v15++;
            uint64_t v7 = (v5 + 1);
            *(_DWORD *)(v16 + 40) |= 0x400u;
            *(_DWORD *)(v16 + 256) = v5;
            LODWORD(v5) = v5 + 1;
            --v14;
          }
          while (v14);
          goto LABEL_8;
        }
      }
      else
      {
        uint64_t v14 = *(unsigned int *)(v11 + 64);
        if ((int)v14 >= 1) {
          goto LABEL_15;
        }
      }
      uint64_t v7 = v5;
LABEL_8:
      ++v6;
      ++v10;
      uint64_t v5 = v7;
      if (v10 == v9) {
        goto LABEL_4;
      }
    }
  }
}

void sub_E3D5A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_E3D5BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 40) |= 0x10000u;
  uint64_t v4 = *(void *)(a3 + 504);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 1064);
    uint64_t i = *(void *)(a2 + 1072);
    if (v5 == i) {
      return;
    }
    goto LABEL_9;
  }
  uint64_t v8 = *(void *)(a3 + 8);
  uint64_t v9 = (void *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
  if (v8) {
    uint64_t v9 = (void *)*v9;
  }
  uint64_t v4 = sub_13D8978((uint64_t)v9);
  *(void *)(a3 + 504) = v4;
  uint64_t v5 = *(void *)(a2 + 1064);
  for (uint64_t i = *(void *)(a2 + 1072); v5 != i; v5 += 496)
  {
LABEL_9:
    *(_OWORD *)long long __p = 0u;
    *(_OWORD *)char v18 = 0u;
    int v19 = 1065353216;
    uint64_t v10 = *(_DWORD **)(v4 + 88);
    if (v10 && (uint64_t v11 = *(int *)(v4 + 80), (int)v11 < *v10))
    {
      *(_DWORD *)(v4 + 80) = v11 + 1;
      uint64_t v12 = *(void *)&v10[2 * v11 + 2];
    }
    else
    {
      uint64_t v13 = sub_13D88C0(*(void *)(v4 + 72));
      uint64_t v12 = sub_188CDC8(v4 + 72, v13);
    }
    sub_E11C8C(v5, __p, v12);
    uint64_t v14 = (void **)v18[0];
    if (v18[0])
    {
      do
      {
        uint64_t v16 = (void **)*v14;
        if (*((char *)v14 + 39) < 0) {
          operator delete(v14[2]);
        }
        operator delete(v14);
        uint64_t v14 = v16;
      }
      while (v16);
    }
    int v15 = __p[0];
    __p[0] = 0;
    if (v15) {
      operator delete(v15);
    }
  }
}

void sub_E3D710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int32x2_t *sub_E3D724(uint64_t *a1, __n128 *a2, int a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  int v13 = sub_E150CC(a3);
  *(_DWORD *)(a6 + 40) |= 0x1000000u;
  *(_DWORD *)(a6 + 836) = v13;
  int v14 = sub_E124B8(a2[66].n128_u8[0]);
  *(_DWORD *)(a6 + 40) |= 0x200000u;
  *(_DWORD *)(a6 + 824) = v14;
  int v15 = sub_E124DC(a2[66].n128_u8[1]);
  int v16 = *(_DWORD *)(a6 + 40);
  *(_DWORD *)(a6 + 840) = v15;
  uint64_t v17 = a2[31].n128_i64[1];
  int v18 = (int)v17 / 100;
  int v19 = (int)v17 % 100;
  if (v17 < 0) {
    __int16 v20 = -50;
  }
  else {
    __int16 v20 = 50;
  }
  *(_DWORD *)(a6 + 40) = v16 | 0x2400000;
  *(_DWORD *)(a6 + 828) = v18
                        + ((5243 * (__int16)(v20 + v19)) >> 19)
                        + ((5243 * (__int16)(v20 + v19)) >> 31);
  sub_E4089C((uint64_t)a1, (unsigned int *)a2, (_DWORD *)a6);
  sub_E40B4C((uint64_t)a1, (uint64_t *)a2, a6);
  int v21 = *(_DWORD *)(a6 + 44);
  *(unsigned char *)(a6 + 868) = (a2[50].n128_u8[0] | a2[53].n128_u32[1]) == 0;
  char v22 = a2[50].n128_u8[1] ^ 1;
  *(_DWORD *)(a6 + 44) = v21 | 3;
  *(unsigned char *)(a6 + 869) = v22;
  if (a2[751].n128_u64[1] == a2[752].n128_u64[0]) {
    sub_E110A0((uint64_t *)&a2[458], a6);
  }
  else {
    sub_E14810(&a2[751].n128_i64[1], a6);
  }
  sub_E40CA4(a1, a2, a4, a5, a6);
  sub_E40E9C(a1, (uint64_t)a2, a6, a7);
  if (a2[731].n128_u64[1] != a2[732].n128_u64[0]
    && a2[730].n128_u64[1] != 0x7FFFFFFFFFFFFFFFLL
    && a2[731].n128_u64[0] != 0x7FFFFFFFFFFFFFFFLL)
  {
    *(_DWORD *)(a6 + 40) |= 0x4000u;
    uint64_t v23 = *(void *)(a6 + 768);
    if (!v23)
    {
      uint64_t v24 = *(void *)(a6 + 8);
      uint64_t v25 = (void *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
      if (v24) {
        uint64_t v25 = (void *)*v25;
      }
      sub_13D7B20((uint64_t)v25);
      uint64_t v23 = v26;
      *(void *)(a6 + 768) = v26;
    }
    sub_E12EEC(&a2[730].n128_i64[1], v23);
  }
  sub_E42ED4((uint64_t)a1, (uint64_t)a2, a6);
  sub_E43348((uint64_t)a1, a2, a6);
  sub_E40F98((uint64_t)a1, (uint64_t)a2, a6);
  uint64_t v55 = (int32x2_t *)a1;
  sub_E411A4((uint64_t)a1, a2, a6);
  unint64_t v27 = a2[753].n128_u64[1];
  uint64_t v56 = a2;
  unint64_t v28 = a2[754].n128_u64[0];
  if (v27 != v28)
  {
    uint64_t v29 = (_DWORD *)(a6 + 560);
    do
    {
      while (1)
      {
        __int16 v30 = *(uint64_t *)v27 < 0 ? -50 : 50;
        unsigned int v31 = (int)*(void *)v27 / 100
            + ((5243 * (__int16)(v30 + (int)*(void *)v27 % 100)) >> 19)
            + ((5243 * (__int16)(v30 + (int)*(void *)v27 % 100)) >> 31);
        uint64_t v32 = *(unsigned int *)(a6 + 584);
        if (v32 == *(_DWORD *)(a6 + 588))
        {
          int v33 = v32 + 1;
          sub_188C80C((unsigned int *)(a6 + 584), v32 + 1);
          *(_DWORD *)(*(void *)(a6 + 592) + 4 * v32) = v31;
        }
        else
        {
          *(_DWORD *)(*(void *)(a6 + 592) + 4 * v32) = v31;
          int v33 = v32 + 1;
        }
        *(_DWORD *)(a6 + 584) = v33;
        int v34 = *(unsigned char *)(v27 + 8) ? 1 : 2;
        uint64_t v35 = *(unsigned int *)(a6 + 560);
        if (v35 == *(_DWORD *)(a6 + 564)) {
          break;
        }
        *(_DWORD *)(*(void *)(a6 + 568) + 4 * v35) = v34;
        *uint64_t v29 = v35 + 1;
        v27 += 16;
        if (v27 == v28) {
          goto LABEL_29;
        }
      }
      sub_188C80C((unsigned int *)(a6 + 560), v35 + 1);
      *(_DWORD *)(*(void *)(a6 + 568) + 4 * v35) = v34;
      *uint64_t v29 = v35 + 1;
      v27 += 16;
    }
    while (v27 != v28);
  }
LABEL_29:
  uint64_t v36 = a2[627].n128_i64[0];
  for (unint64_t i = a2[627].n128_u64[1]; v36 != i; v36 += 616)
  {
    while (1)
    {
      int v40 = *(_DWORD **)(a6 + 624);
      if (v40)
      {
        uint64_t v41 = *(int *)(a6 + 616);
        if ((int)v41 < *v40) {
          break;
        }
      }
      uint64_t v38 = sub_13D6194(*(void *)(a6 + 608));
      uint64_t v39 = sub_188CDC8(a6 + 608, v38);
      sub_E159B0(v36, v39);
      v36 += 616;
      if (v36 == i) {
        goto LABEL_35;
      }
    }
    *(_DWORD *)(a6 + 616) = v41 + 1;
    sub_E159B0(v36, *(void *)&v40[2 * v41 + 2]);
  }
LABEL_35:
  uint64_t v42 = v56[625].n128_i64[1];
  for (unint64_t j = v56[626].n128_u64[0]; v42 != j; v42 += 616)
  {
    while (1)
    {
      char v46 = *(_DWORD **)(a6 + 648);
      if (v46)
      {
        uint64_t v47 = *(int *)(a6 + 640);
        if ((int)v47 < *v46) {
          break;
        }
      }
      uint64_t v44 = sub_13D6194(*(void *)(a6 + 632));
      uint64_t v45 = sub_188CDC8(a6 + 632, v44);
      sub_E159B0(v42, v45);
      v42 += 616;
      if (v42 == j) {
        goto LABEL_41;
      }
    }
    *(_DWORD *)(a6 + 640) = v47 + 1;
    sub_E159B0(v42, *(void *)&v46[2 * v47 + 2]);
  }
LABEL_41:
  uint64_t v48 = v56[628].n128_i64[1];
  for (unint64_t k = v56[629].n128_u64[0]; v48 != k; v48 += 616)
  {
    while (1)
    {
      int v52 = *(_DWORD **)(a6 + 624);
      if (v52)
      {
        uint64_t v53 = *(int *)(a6 + 616);
        if ((int)v53 < *v52) {
          break;
        }
      }
      uint64_t v50 = sub_13D6194(*(void *)(a6 + 608));
      uint64_t v51 = sub_188CDC8(a6 + 608, v50);
      sub_E159B0(v48, v51);
      v48 += 616;
      if (v48 == k) {
        goto LABEL_47;
      }
    }
    *(_DWORD *)(a6 + 616) = v53 + 1;
    sub_E159B0(v48, *(void *)&v52[2 * v53 + 2]);
  }
LABEL_47:

  return sub_E41320(v55, (uint64_t)v56, a6);
}

uint64_t *sub_E3DC50(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t result = (uint64_t *)sub_6484B0(a2, *(unsigned __int8 *)(*(void *)a1 + 39));
  if (result)
  {
    uint64_t result = (uint64_t *)sub_5231C((uint64_t)a2);
    uint64_t v7 = *result;
    uint64_t v8 = result[1];
    if (*result != v8)
    {
      do
      {
        int v11 = *(unsigned __int8 *)(*(void *)a1 + 1);
        uint64_t v12 = *(_DWORD **)(a3 + 88);
        if (v12 && (uint64_t v13 = *(int *)(a3 + 80), (int)v13 < *v12))
        {
          *(_DWORD *)(a3 + 80) = v13 + 1;
          uint64_t v10 = *(void *)&v12[2 * v13 + 2];
        }
        else
        {
          uint64_t v9 = sub_15C1DB0(*(void *)(a3 + 72));
          uint64_t v10 = sub_188CDC8(a3 + 72, v9);
        }
        uint64_t result = (uint64_t *)sub_E155E8(v7, v11 != 0, v10);
        v7 += 176;
      }
      while (v7 != v8);
    }
  }
  return result;
}

uint64_t sub_E3DD20(uint64_t a1, unsigned int **a2, int a3, _DWORD *a4)
{
  int v7 = sub_47E87C((uint64_t)a2, 0, a3);
  int v8 = sub_646CE8((uint64_t)a2);
  if (v8 + v7 < 0 != __OFADD__(v8, v7)) {
    char v9 = -5;
  }
  else {
    char v9 = 5;
  }
  a4[4] |= 1u;
  a4[6] = (v8 + v7) / 10
        + (((103 * (char)(v9 + (v8 + v7) % 10)) >> 15) & 1)
        + ((103 * (char)(v9 + (v8 + v7) % 10)) >> 10);
  if (sub_64999C(a2))
  {
    int v11 = sub_47F06C((uint64_t)a2, 2, a3);
    if (v11 < 0) {
      char v12 = -5;
    }
    else {
      char v12 = 5;
    }
    a4[4] |= 2u;
    a4[7] = v11 / 10
          + (((103 * (char)(v12 + v11 % 10)) >> 15) & 1)
          + ((103 * (char)(v12 + v11 % 10)) >> 10);
    if (!sub_64991C(a2))
    {
LABEL_6:
      if (!sub_649A1C(a2)) {
        goto LABEL_7;
      }
      goto LABEL_17;
    }
  }
  else if (!sub_64991C(a2))
  {
    goto LABEL_6;
  }
  int v13 = sub_47F06C((uint64_t)a2, 1, a3);
  if (v13 < 0) {
    char v14 = -5;
  }
  else {
    char v14 = 5;
  }
  a4[4] |= 4u;
  a4[8] = v13 / 10 + (((103 * (char)(v14 + v13 % 10)) >> 15) & 1) + ((103 * (char)(v14 + v13 % 10)) >> 10);
  if (!sub_649A1C(a2))
  {
LABEL_7:
    uint64_t result = sub_649A9C(a2);
    if (!result) {
      return result;
    }
    goto LABEL_21;
  }
LABEL_17:
  int v15 = sub_47F06C((uint64_t)a2, 4, a3);
  if (v15 < 0) {
    char v16 = -5;
  }
  else {
    char v16 = 5;
  }
  a4[4] |= 8u;
  a4[9] = v15 / 10 + (((103 * (char)(v16 + v15 % 10)) >> 15) & 1) + ((103 * (char)(v16 + v15 % 10)) >> 10);
  uint64_t result = sub_649A9C(a2);
  if (result)
  {
LABEL_21:
    uint64_t result = sub_47F06C((uint64_t)a2, 5, a3);
    if ((int)result < 0) {
      char v17 = -5;
    }
    else {
      char v17 = 5;
    }
    a4[4] |= 0x10u;
    a4[10] = (int)result / 10
           + (((103 * (char)(v17 + (int)result % 10)) >> 15) & 1)
           + ((103 * (char)(v17 + (int)result % 10)) >> 10);
  }
  return result;
}

void sub_E3DFD8(unsigned char *a1, void *a2, unint64_t a3, uint64_t a4)
{
  int v8 = (void *)nullsub_1(a2);
  uint64_t v9 = v8[1] - *v8;
  if (v9)
  {
    unint64_t v10 = 0;
    unint64_t v11 = 0xFF55E3181697D6CDLL * (v9 >> 3);
    while (1)
    {
      uint64_t v12 = sub_6467E8(a2, v10);
      uint64_t v13 = *(void *)(v12 + 10176);
      uint64_t v14 = *(void *)(v12 + 10184);
      if (v13 != v14) {
        break;
      }
LABEL_3:
      if (++v10 == v11) {
        return;
      }
    }
    int v15 = (void *)v12;
    while (1)
    {
      if (!sub_63A4A4(v13)) {
        goto LABEL_6;
      }
      unint64_t v16 = sub_46C760(v15);
      unint64_t v17 = *(void *)(v13 + 8);
      if (v17 >= v16 || v17 == v16 - 1 && sub_46CAC4((uint64_t)v15) < 0x3B9ACA00) {
        goto LABEL_6;
      }
      if (sub_63A8F8(v13))
      {
        if (a1[24]) {
          goto LABEL_20;
        }
      }
      else
      {
        if (!sub_63A908(v13))
        {
          if (!sub_63A770(v13) && !sub_63A760(v13) || !a1[26]) {
            goto LABEL_6;
          }
LABEL_20:
          sub_E405B0(a3, v10, v13, &__p);
          sub_E3F9B0((uint64_t)a1, v13, (const void **)&__p.__r_.__value_.__l.__data_, a4);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          goto LABEL_6;
        }
        if (a1[25]) {
          goto LABEL_20;
        }
      }
LABEL_6:
      v13 += 104;
      if (v13 == v14) {
        goto LABEL_3;
      }
    }
  }
}

void sub_E3E170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_E3E18C(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (a3[3])
  {
    int v6 = (void **)a3[2];
    if (v6)
    {
      do
      {
        unsigned int v31 = (void **)*v6;
        if (*((char *)v6 + 39) < 0) {
          operator delete(v6[2]);
        }
        operator delete(v6);
        int v6 = v31;
      }
      while (v31);
    }
    a3[2] = 0;
    uint64_t v7 = a3[1];
    if (v7)
    {
      for (uint64_t i = 0; i != v7; ++i)
        *(void *)(*a3 + 8 * i) = 0;
    }
    a3[3] = 0;
  }
  uint64_t v37 = a4;
  uint64_t v9 = (void *)nullsub_1(a2);
  if ((int)(379049677 * ((uint64_t)(v9[1] - *v9) >> 3)) >= 1)
  {
    uint64_t v10 = 0;
    uint64_t v36 = (uint64_t *)(a4 + 168);
    uint64_t v33 = 379049677 * ((uint64_t)(v9[1] - *v9) >> 3);
    do
    {
      uint64_t v35 = v10;
      uint64_t v11 = sub_6467E8(a2, v10);
      uint64_t v12 = *(void *)(v11 + 7352);
      uint64_t v13 = *(void *)(v11 + 7360);
      if (v12 != v13)
      {
        uint64_t v14 = *(void *)(*(void *)(v37 + 64) + 8 * v35 + 8);
        int v15 = (_DWORD *)(v14 + 272);
        do
        {
          while (1)
          {
            if (!sub_5258EC(a3, v12 + 40))
            {
              int v16 = *(_DWORD *)(v37 + 176);
              uint64_t v38 = (long long *)(v12 + 40);
              *((_DWORD *)sub_DF40A8((uint64_t)a3, v12 + 40, (uint64_t)&unk_20F06E0, &v38) + 10) = v16;
              int v18 = *(_DWORD **)(v37 + 184);
              if (v18 && (uint64_t v19 = *(int *)(v37 + 176), (int)v19 < *v18))
              {
                *(_DWORD *)(v37 + 176) = v19 + 1;
                uint64_t v20 = *(void *)&v18[2 * v19 + 2];
              }
              else
              {
                uint64_t v21 = sub_13D9608(*v36);
                uint64_t v20 = sub_188CDC8((uint64_t)v36, v21);
              }
              sub_E1163C(v12, v20, 1, v17);
            }
            char v22 = sub_DF451C(a3, v12 + 40);
            if (!v22) {
              sub_5AE8("unordered_map::at: key not found");
            }
            if (!*(unsigned char *)(v12 + 432))
            {
              exception = __cxa_allocate_exception(8uLL);
              void *exception = &off_2439078;
            }
            int v23 = *((_DWORD *)v22 + 10);
            uint64_t v24 = *(void *)(v12 + 424);
            __int16 v25 = v24 < 0 ? -50 : 50;
            uint64_t v26 = *(unsigned int *)(v14 + 248);
            if (v26 == *(_DWORD *)(v14 + 252))
            {
              int v27 = v26 + 1;
              sub_188C80C((unsigned int *)(v14 + 248), v26 + 1);
              *(_DWORD *)(*(void *)(v14 + 256) + 4 * v26) = v23;
            }
            else
            {
              *(_DWORD *)(*(void *)(v14 + 256) + 4 * v26) = v23;
              int v27 = v26 + 1;
            }
            int v28 = 5243 * (__int16)(v25 + v24 % 100);
            uint64_t v29 = v24 / 100 + (int)((v28 >> 19) + (v28 >> 31));
            *(_DWORD *)(v14 + 248) = v27;
            uint64_t v30 = *(unsigned int *)(v14 + 272);
            if (v30 == *(_DWORD *)(v14 + 276)) {
              break;
            }
            *(_DWORD *)(*(void *)(v14 + 280) + 4 * v30) = v29;
            _DWORD *v15 = v30 + 1;
            v12 += 1120;
            if (v12 == v13) {
              goto LABEL_9;
            }
          }
          sub_188C80C((unsigned int *)(v14 + 272), v30 + 1);
          *(_DWORD *)(*(void *)(v14 + 280) + 4 * v30) = v29;
          _DWORD *v15 = v30 + 1;
          v12 += 1120;
        }
        while (v12 != v13);
      }
LABEL_9:
      uint64_t v10 = v35 + 1;
    }
    while (v35 + 1 != v33);
  }
}

void sub_E3E4C4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = (void *)nullsub_1(a2);
  if ((int)(379049677 * ((uint64_t)(v4[1] - *v4) >> 3)) >= 1)
  {
    uint64_t v5 = 0;
    int v23 = (uint64_t *)(a3 + 96);
    uint64_t v24 = 379049677 * ((uint64_t)(v4[1] - *v4) >> 3);
    do
    {
      uint64_t v6 = sub_6467E8(a2, v5);
      if (*(void *)(v6 + 10104) != 0x7FFFFFFFFFFFFFFFLL && *(void *)(v6 + 10112) != 0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v9 = (void *)v6;
        uint64_t v10 = *(void *)(*(void *)(a3 + 64) + 8 * v5 + 8);
        int v11 = *(_DWORD *)(a3 + 104);
        *(_DWORD *)(v10 + 44) |= 8u;
        *(_DWORD *)(v10 + 872) = v11;
        uint64_t v12 = *(_DWORD **)(a3 + 112);
        if (v12 && (uint64_t v13 = *(int *)(a3 + 104), (int)v13 < *v12))
        {
          *(_DWORD *)(a3 + 104) = v13 + 1;
          uint64_t v14 = *(void *)&v12[2 * v13 + 2];
        }
        else
        {
          int v15 = sub_13D9A2C(*v23);
          uint64_t v14 = sub_188CDC8((uint64_t)v23, (uint64_t)v15);
        }
        sub_E14B1C(v9 + 1263, v14, v7);
        uint64_t v16 = 0x2FC962FC962FC963 * ((uint64_t)(v9[134] - v9[133]) >> 5);
        if ((int)v16 >= 1)
        {
          unint64_t v17 = 0;
          int v18 = v9 + 133;
          uint64_t v19 = v16;
          do
          {
            uint64_t v20 = sub_4A5E10(v18, v17);
            uint64_t v21 = sub_1883FB0((void *)(*(void *)(*(void *)(v10 + 72) + 8 * v17 + 8) + 16), dword_254EAA8, 11, (uint64_t)&off_252CE78, 0);
            char v22 = *(unsigned char *)(v20 + 2225);
            *(_DWORD *)(v21 + 16) |= 2u;
            *(unsigned char *)(v21 + 97) = v22;
            ++v17;
          }
          while (v19 != v17);
        }
      }
      ++v5;
    }
    while (v5 != v24);
  }
}

uint64_t **sub_E3E6A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 40) |= 8u;
  uint64_t v4 = *(void *)(a3 + 256);
  if (!v4)
  {
    uint64_t v6 = *(void *)(a3 + 8);
    long double v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
    if (v6) {
      long double v7 = (void *)*v7;
    }
    uint64_t v4 = sub_13D8A28((uint64_t)v7);
    *(void *)(a3 + 256) = v4;
  }
  int v8 = (uint64_t *)sub_647D28(a2);
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  if (*v8 != v10)
  {
    do
    {
      while (1)
      {
        uint64_t v13 = *(_DWORD **)(v4 + 64);
        if (v13)
        {
          uint64_t v14 = *(int *)(v4 + 56);
          if ((int)v14 < *v13) {
            break;
          }
        }
        sub_13D86A8(*(void *)(v4 + 48));
        uint64_t v12 = sub_188CDC8(v4 + 48, v11);
        sub_E12734(v9, v12);
        v9 += 40;
        if (v9 == v10) {
          goto LABEL_11;
        }
      }
      *(_DWORD *)(v4 + 56) = v14 + 1;
      sub_E12734(v9, *(void *)&v13[2 * v14 + 2]);
      v9 += 40;
    }
    while (v9 != v10);
  }
LABEL_11:
  int v15 = (unsigned int *)sub_647DCC(a2);
  int v16 = sub_E128D8(*v15);
  if (v16) {
    sub_1883378(v4 + 16, qword_254EA80, 14, v16, 0);
  }
  unint64_t v17 = (unsigned int *)sub_647DF0(a2);
  int v18 = sub_E128D8(*v17);
  if (v18) {
    sub_1883378(v4 + 16, qword_254EA78, 14, v18, 0);
  }
  uint64_t v19 = (unsigned int *)sub_647E14(a2);
  uint64_t result = (uint64_t **)sub_E128D8(*v19);
  if (result)
  {
    uint64_t v21 = qword_254EA88;
    return sub_1883378(v4 + 16, v21, 14, (int)result, 0);
  }
  return result;
}

void sub_E3E848(uint64_t a1, char **a2, uint64_t a3, uint64_t a4)
{
  if (sub_647E2C(a2))
  {
    uint64_t v6 = (void *)nullsub_1(a2);
    if ((int)(379049677 * ((uint64_t)(v6[1] - *v6) >> 3)) >= 1)
    {
      uint64_t v7 = 0;
      uint64_t v31 = 379049677 * ((uint64_t)(v6[1] - *v6) >> 3);
      int v8 = &unk_20F06E0;
      do
      {
        uint64_t v33 = v7;
        uint64_t v9 = sub_6467E8(a2, v7);
        uint64_t v10 = *(void *)(v9 + 11584);
        uint64_t v34 = *(void *)(v9 + 11592);
        if (v10 != v34)
        {
          uint64_t v11 = *(void *)(*(void *)(a3 + 64) + 8 * v33 + 8);
          uint64_t v12 = (_DWORD *)(v11 + 272);
          do
          {
            while (1)
            {
              int v14 = *(_DWORD *)(a3 + 176);
              uint64_t v35 = (long long *)(v10 + 8);
              *((_DWORD *)sub_DF40A8(a4, v10 + 8, (uint64_t)v8, &v35) + 10) = v14;
              int v16 = *(_DWORD **)(a3 + 184);
              if (v16 && (uint64_t v17 = *(int *)(a3 + 176), (int)v17 < *v16))
              {
                *(_DWORD *)(a3 + 176) = v17 + 1;
                uint64_t v18 = *(void *)&v16[2 * v17 + 2];
              }
              else
              {
                uint64_t v19 = sub_13D9608(*(void *)(a3 + 168));
                uint64_t v18 = sub_188CDC8(a3 + 168, v19);
              }
              sub_E128E8(v10, v18, v15);
              uint64_t v35 = (long long *)(v10 + 8);
              uint64_t v20 = v8;
              int v21 = *((_DWORD *)sub_DF40A8(a4, v10 + 8, (uint64_t)v8, &v35) + 10);
              uint64_t v22 = *(unsigned int *)(v11 + 248);
              if (v22 == *(_DWORD *)(v11 + 252))
              {
                int v23 = v22 + 1;
                sub_188C80C((unsigned int *)(v11 + 248), v22 + 1);
                *(_DWORD *)(*(void *)(v11 + 256) + 4 * v22) = v21;
              }
              else
              {
                *(_DWORD *)(*(void *)(v11 + 256) + 4 * v22) = v21;
                int v23 = v22 + 1;
              }
              *(_DWORD *)(v11 + 248) = v23;
              uint64_t v24 = *(void *)(v10 + 32);
              int v25 = (int)v24 / 100;
              int v26 = (int)v24 % 100;
              __int16 v27 = v24 < 0 ? -50 : 50;
              unsigned int v28 = v25 + ((5243 * (__int16)(v27 + v26)) >> 19) + ((5243 * (__int16)(v27 + v26)) >> 31);
              uint64_t v29 = *(unsigned int *)(v11 + 272);
              if (v29 == *(_DWORD *)(v11 + 276)) {
                break;
              }
              *(_DWORD *)(*(void *)(v11 + 280) + 4 * v29) = v28;
              int v13 = v29 + 1;
              int v8 = v20;
              *uint64_t v12 = v13;
              v10 += 168;
              if (v10 == v34) {
                goto LABEL_4;
              }
            }
            int v30 = v29 + 1;
            sub_188C80C((unsigned int *)(v11 + 272), v29 + 1);
            *(_DWORD *)(*(void *)(v11 + 280) + 4 * v29) = v28;
            int v8 = v20;
            *uint64_t v12 = v30;
            v10 += 168;
          }
          while (v10 != v34);
        }
LABEL_4:
        uint64_t v7 = v33 + 1;
      }
      while (v33 + 1 != v31);
    }
  }
}

void sub_E3EAD8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  *(_DWORD *)(a4 + 40) |= 4u;
  uint64_t v7 = *(void *)(a4 + 248);
  if (!v7)
  {
    uint64_t v9 = *(void *)(a4 + 8);
    uint64_t v10 = (void *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
    if (v9) {
      uint64_t v10 = (void *)*v10;
    }
    sub_13D8AFC((uint64_t)v10);
    uint64_t v7 = v11;
    *(void *)(a4 + 248) = v11;
  }
  sub_E3EED8(a1, a2, v7);
  sub_E3F1A0(a1, a2, v7);
  sub_E3F318(a1, a2, v7);
  sub_E3F4C8(a1, a2, v7);
  sub_E3F580(a1, a2, v7);

  sub_E3F6E8(a1, a2, a3, v7);
}

void sub_E3EBB8(int **a1, void *a2, uint64_t a3)
{
  if (*((unsigned char *)*a1 + 32))
  {
    sub_E2FF18((uint64_t)v13, *a1);
    sub_E30310(v13, a2, a3);
    v13[0] = (void (**)(void, uint64_t, uint64_t))&off_243EE28;
    if ((v22 & 0x80000000) == 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)v13);
    sub_188FC78(v13, (uint64_t)"Request that has supports_waypoint_routes set to true but supports_guidance_events set to false which shouldn't happen.", 119);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v11, 3u);
    if (v12 < 0) {
      operator delete(v11);
    }
    if (SHIBYTE(v18) < 0) {
      operator delete(v16);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  sub_DE814C((uint64_t)v13, *a1);
  uint64_t v6 = (void *)nullsub_1(a2);
  int v7 = 379049677 * ((uint64_t)(v6[1] - *v6) >> 3);
  if (v7)
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(*(void *)(a3 + 64) + 8 * (int)v8 + 8);
      uint64_t v10 = sub_6467E8(a2, v8);
      sub_DE8418((uint64_t)v13, v10, v9);
      ++v8;
    }
    while (v7 != v8);
  }
  v13[0] = (void (**)(void, uint64_t, uint64_t))&off_243EE28;
  if (v22 < 0) {
LABEL_3:
  }
    operator delete(__p);
LABEL_4:
  if (v19)
  {
    uint64_t v20 = v19;
    operator delete(v19);
  }
  if (v17)
  {
    uint64_t v18 = v17;
    operator delete(v17);
  }
  if (v14)
  {
    double v15 = v14;
    operator delete(v14);
  }
}

void sub_E3EE50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_E3EE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_E187CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_E3EEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_E187CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_E3EEC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_E187CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_E3EED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 16) |= 1u;
  uint64_t v4 = *(void *)(a3 + 24);
  if (!v4)
  {
    uint64_t v6 = *(void *)(a3 + 8);
    int v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
    if (v6) {
      int v7 = (void *)*v7;
    }
    sub_13D6D2C((uint64_t)v7);
    uint64_t v4 = v8;
    *(void *)(a3 + 24) = v8;
  }
  uint64_t v9 = (const std::string **)sub_64790C(a2);
  *(_DWORD *)(v4 + 16) |= 2u;
  uint64_t v10 = *(void *)(v4 + 32);
  if (!v10)
  {
    uint64_t v11 = *(void *)(v4 + 8);
    char v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
    if (v11) {
      char v12 = (void *)*v12;
    }
    sub_13D6A1C((uint64_t)v12);
    uint64_t v10 = v13;
    *(void *)(v4 + 32) = v13;
  }
  sub_5F4D30(v9, v10);
  int v14 = (const std::string **)sub_647A44(a2);
  *(_DWORD *)(v4 + 16) |= 8u;
  uint64_t v15 = *(void *)(v4 + 48);
  if (!v15)
  {
    uint64_t v16 = *(void *)(v4 + 8);
    uint64_t v17 = (void *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
    if (v16) {
      uint64_t v17 = (void *)*v17;
    }
    sub_13D6A1C((uint64_t)v17);
    uint64_t v15 = v18;
    *(void *)(v4 + 48) = v18;
  }
  sub_5F4D30(v14, v15);
  uint64_t v19 = (const std::string **)sub_647A98(a2);
  uint64_t v20 = v19;
  *(_DWORD *)(v4 + 16) |= 4u;
  uint64_t v21 = *(void *)(v4 + 40);
  if (v21)
  {
    sub_5F4D30(v19, v21);
    char v22 = (void *)sub_393AA8(a2);
    if (sub_45FB38(v22)) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v24 = *(void *)(v4 + 8);
    int v25 = (void *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
    if (v24) {
      int v25 = (void *)*v25;
    }
    sub_13D6A1C((uint64_t)v25);
    *(void *)(v4 + 40) = v26;
    sub_5F4D30(v20, v26);
    __int16 v27 = (void *)sub_393AA8(a2);
    if (sub_45FB38(v27))
    {
LABEL_15:
      int v23 = (void *)sub_393A78(a2);
      if (sub_45FB38(v23)) {
        return;
      }
      goto LABEL_27;
    }
  }
  unsigned int v28 = (const std::string **)sub_393AA8(a2);
  *(_DWORD *)(v4 + 16) |= 0x10u;
  uint64_t v29 = *(void *)(v4 + 56);
  if (!v29)
  {
    uint64_t v30 = *(void *)(v4 + 8);
    uint64_t v31 = (void *)(v30 & 0xFFFFFFFFFFFFFFFCLL);
    if (v30) {
      uint64_t v31 = (void *)*v31;
    }
    sub_13D6A1C((uint64_t)v31);
    uint64_t v29 = v32;
    *(void *)(v4 + 56) = v32;
  }
  sub_5F4D30(v28, v29);
  *(_DWORD *)(v4 + 16) |= 1u;
  uint64_t v33 = *(void *)(v4 + 8);
  uint64_t v34 = (uint64_t *)(v33 & 0xFFFFFFFFFFFFFFFCLL);
  if (v33) {
    uint64_t v34 = (uint64_t *)*v34;
  }
  sub_1881DF4((std::string **)(v4 + 24), (long long *)&dword_25F9D60, v34);
  uint64_t v35 = (void *)sub_393A78(a2);
  if (!sub_45FB38(v35))
  {
LABEL_27:
    uint64_t v36 = (const std::string **)sub_393A78(a2);
    *(_DWORD *)(v4 + 16) |= 4u;
    uint64_t v37 = *(void *)(v4 + 40);
    if (!v37)
    {
      uint64_t v38 = *(void *)(v4 + 8);
      uint64_t v39 = (void *)(v38 & 0xFFFFFFFFFFFFFFFCLL);
      if (v38) {
        uint64_t v39 = (void *)*v39;
      }
      sub_13D6A1C((uint64_t)v39);
      uint64_t v37 = v40;
      *(void *)(v4 + 40) = v40;
    }
    sub_5F4D30(v36, v37);
    uint64_t v41 = (const std::string **)sub_393A78(a2);
    uint64_t v42 = v41;
    *(_DWORD *)(v4 + 16) |= 0x10u;
    uint64_t v43 = *(void *)(v4 + 56);
    if (v43)
    {
    }
    else
    {
      uint64_t v44 = *(void *)(v4 + 8);
      uint64_t v45 = (void *)(v44 & 0xFFFFFFFFFFFFFFFCLL);
      if (v44) {
        uint64_t v45 = (void *)*v45;
      }
      sub_13D6A1C((uint64_t)v45);
      uint64_t v43 = v46;
      *(void *)(v4 + 56) = v46;
      uint64_t v41 = v42;
    }
    sub_5F4D30(v41, v43);
  }
}

std::string *sub_E3F1A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (std::string *)sub_6483B0(a2);
  std::string::size_type size = HIBYTE(result->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = result->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    *(_DWORD *)(a3 + 16) |= 4u;
    uint64_t v7 = *(void *)(a3 + 40);
    if (v7)
    {
      uint64_t v8 = sub_6483B0(a2);
      uint64_t v9 = *(_DWORD **)(v7 + 40);
      if (!v9) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = *(void *)(a3 + 8);
      uint64_t v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
      if (v10) {
        uint64_t v11 = (void *)*v11;
      }
      sub_13D6A1C((uint64_t)v11);
      uint64_t v7 = v12;
      *(void *)(a3 + 40) = v12;
      uint64_t v8 = sub_6483B0(a2);
      uint64_t v9 = *(_DWORD **)(v7 + 40);
      if (!v9) {
        goto LABEL_15;
      }
    }
    uint64_t v13 = *(int *)(v7 + 32);
    if ((int)v13 < *v9)
    {
      *(_DWORD *)(v7 + 32) = v13 + 1;
      int v14 = *(std::string **)&v9[2 * v13 + 2];
      uint64_t v15 = (const std::string *)v8;
      return std::string::operator=(v14, v15);
    }
LABEL_15:
    uint64_t v16 = *(uint64_t **)(v7 + 24);
    if (!v16) {
      operator new();
    }
    *uint64_t v18 = v17;
    v18[1] = sub_3A6EDC;
    void *v17 = 0;
    v17[1] = 0;
    v17[2] = 0;
    int v14 = (std::string *)sub_188CDC8(v7 + 24, (uint64_t)v17);
    uint64_t v15 = (const std::string *)v8;
    return std::string::operator=(v14, v15);
  }
  return result;
}

uint64_t sub_E3F318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)sub_647C20(a2);
  if (!sub_45FB38(v5))
  {
    uint64_t v6 = (const std::string **)sub_647C20(a2);
    *(_DWORD *)(a3 + 16) |= 2u;
    uint64_t v7 = *(void *)(a3 + 32);
    if (!v7)
    {
      uint64_t v8 = *(void *)(a3 + 8);
      uint64_t v9 = (void *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
      if (v8) {
        uint64_t v9 = (void *)*v9;
      }
      sub_13D6A1C((uint64_t)v9);
      uint64_t v7 = v10;
      *(void *)(a3 + 32) = v10;
    }
    sub_5F4D30(v6, v7);
  }
  uint64_t v11 = sub_647C74(a2);
  int v12 = *(_DWORD *)(v11 + 32);
  if (v12 == 1)
  {
    BOOL v13 = *(_DWORD *)(v11 + 4) == -1 && *(_DWORD *)v11 == -1;
    if (v13 && *(void *)(v11 + 8) == *(void *)(v11 + 16)) {
      goto LABEL_22;
    }
  }
  else if (v12 || *(_DWORD *)v11 == -1)
  {
    goto LABEL_22;
  }
  uint64_t v14 = sub_647C74(a2);
  *(_DWORD *)(a3 + 16) |= 0x20u;
  uint64_t v16 = *(void *)(a3 + 64);
  if (!v16)
  {
    uint64_t v17 = *(void *)(a3 + 8);
    uint64_t v18 = (void *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
    if (v17) {
      uint64_t v18 = (void *)*v18;
    }
    uint64_t v16 = sub_13DAB08((uint64_t)v18);
    *(void *)(a3 + 64) = v16;
  }
  sub_523A2C(v14, v16, v15);
LABEL_22:
  *(_DWORD *)(a3 + 16) |= 0x80u;
  uint64_t v19 = *(void **)(a3 + 80);
  if (!v19)
  {
    uint64_t v20 = *(void *)(a3 + 8);
    uint64_t v21 = (void *)(v20 & 0xFFFFFFFFFFFFFFFCLL);
    if (v20) {
      uint64_t v21 = (void *)*v21;
    }
    uint64_t v19 = sub_13D8A84((uint64_t)v21);
    *(void *)(a3 + 80) = v19;
  }
  uint64_t v22 = sub_64907C(a2);
  int v23 = sub_E15EB8(v22);
  *((_DWORD *)v19 + 4) |= 1u;
  *((_DWORD *)v19 + 6) = v23;
  *(_DWORD *)(a3 + 16) |= 0x80u;
  uint64_t v24 = *(void **)(a3 + 80);
  if (!v24)
  {
    uint64_t v25 = *(void *)(a3 + 8);
    uint64_t v26 = (void *)(v25 & 0xFFFFFFFFFFFFFFFCLL);
    if (v25) {
      uint64_t v26 = (void *)*v26;
    }
    uint64_t v24 = sub_13D8A84((uint64_t)v26);
    *(void *)(a3 + 80) = v24;
  }
  uint64_t v27 = sub_64908C(a2);
  uint64_t result = sub_E15EB8(v27);
  *((_DWORD *)v24 + 4) |= 2u;
  *((_DWORD *)v24 + 7) = result;
  return result;
}

uint64_t sub_E3F4C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_648134(a2);
  uint64_t v6 = *(unsigned __int8 *)(result + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(result + 8);
  }
  if (v6)
  {
    uint64_t v7 = sub_648134(a2);
    sub_5F3D48((uint64_t)v12, v7);
    *(_DWORD *)(a3 + 16) |= 0x10u;
    uint64_t v8 = *(void *)(a3 + 56);
    if (!v8)
    {
      uint64_t v9 = *(void *)(a3 + 8);
      uint64_t v10 = (void *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
      if (v9) {
        uint64_t v10 = (void *)*v10;
      }
      sub_13D6A1C((uint64_t)v10);
      uint64_t v8 = v11;
      *(void *)(a3 + 56) = v11;
    }
    sub_5F4D30(v12, v8);
    return sub_4D4B58((uint64_t)v12);
  }
  return result;
}

void sub_E3F56C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_E3F580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_6481E4(a2);
  int v6 = *(_DWORD *)(v5 + 32);
  if (v6 != 1)
  {
    if (v6 || *(_DWORD *)v5 == -1) {
      return;
    }
LABEL_11:
    uint64_t v8 = sub_6481E4(a2);
    sub_4F57A0((uint64_t)v15, v8);
    *(_DWORD *)(a3 + 16) |= 0x40u;
    uint64_t v10 = *(void *)(a3 + 72);
    if (!v10)
    {
      uint64_t v11 = *(void *)(a3 + 8);
      int v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
      if (v11) {
        int v12 = (void *)*v12;
      }
      uint64_t v10 = sub_13DAB08((uint64_t)v12);
      *(void *)(a3 + 72) = v10;
    }
    sub_523A2C((uint64_t)v15, v10, v9);
    if (v23 < 0)
    {
      operator delete(__p);
      if ((v21 & 0x80000000) == 0)
      {
LABEL_17:
        int v13 = v19;
        if (v19 != 1) {
          goto LABEL_18;
        }
        goto LABEL_23;
      }
    }
    else if ((v21 & 0x80000000) == 0)
    {
      goto LABEL_17;
    }
    operator delete(v20);
    int v13 = v19;
    if (v19 != 1)
    {
LABEL_18:
      if (v13 || (v18 & 0x80000000) == 0) {
        return;
      }
      uint64_t v14 = v16;
LABEL_25:
      operator delete(v14);
      return;
    }
LABEL_23:
    uint64_t v14 = v16;
    if (!v16) {
      return;
    }
    uint64_t v17 = v16;
    goto LABEL_25;
  }
  BOOL v7 = *(_DWORD *)(v5 + 4) == -1 && *(_DWORD *)v5 == -1;
  if (!v7 || *(void *)(v5 + 8) != *(void *)(v5 + 16)) {
    goto LABEL_11;
  }
}

void sub_E3F6D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D9814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_E3F6E8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  *(_DWORD *)(a4 + 16) |= 8u;
  uint64_t v7 = *(void *)(a4 + 48);
  if (v7)
  {
    uint64_t v8 = (void *)sub_647CD8(a2);
    uint64_t v9 = v8[133];
    uint64_t v10 = v8[134];
    if (v9 != v10)
    {
      do
      {
LABEL_6:
        int v13 = *(_DWORD **)(v7 + 88);
        if (v13 && (uint64_t v14 = *(int *)(v7 + 80), (int)v14 < *v13))
        {
          *(_DWORD *)(v7 + 80) = v14 + 1;
          uint64_t v12 = *(void *)&v13[2 * v14 + 2];
        }
        else
        {
          uint64_t v11 = sub_13D88C0(*(void *)(v7 + 72));
          uint64_t v12 = sub_188CDC8(v7 + 72, v11);
        }
        sub_E11C8C(v9, a3, v12);
        v9 += 496;
      }
      while (v9 != v10);
      return;
    }
  }
  else
  {
    uint64_t v16 = *(void *)(a4 + 8);
    uint64_t v17 = (void *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
    if (v16) {
      uint64_t v17 = (void *)*v17;
    }
    uint64_t v7 = sub_13D8978((uint64_t)v17);
    *(void *)(a4 + 48) = v7;
    uint64_t v8 = (void *)sub_647CD8(a2);
    uint64_t v9 = v8[133];
    uint64_t v10 = v8[134];
    if (v9 != v10) {
      goto LABEL_6;
    }
  }
  char v18 = v8;
  uint64_t v19 = v8[3];
  for (uint64_t i = v8[4]; v19 != i; v19 += 496)
  {
    char v23 = *(_DWORD **)(v7 + 40);
    if (v23 && (uint64_t v24 = *(int *)(v7 + 32), (int)v24 < *v23))
    {
      *(_DWORD *)(v7 + 32) = v24 + 1;
      uint64_t v22 = *(void *)&v23[2 * v24 + 2];
    }
    else
    {
      uint64_t v21 = sub_13D88C0(*(void *)(v7 + 24));
      uint64_t v22 = sub_188CDC8(v7 + 24, v21);
    }
    sub_E43FA0(a1, v19, a3, v22);
  }
  if (sub_45FB38(v18 + 6))
  {
    uint64_t v25 = (uint64_t)(v18 + 68);
    if (sub_45FB38(v18 + 68)) {
      goto LABEL_21;
    }
  }
  else
  {
    *(_DWORD *)(v7 + 16) |= 2u;
    uint64_t v28 = *(void *)(v7 + 104);
    if (!v28)
    {
      uint64_t v29 = *(void *)(v7 + 8);
      uint64_t v30 = (void *)(v29 & 0xFFFFFFFFFFFFFFFCLL);
      if (v29) {
        uint64_t v30 = (void *)*v30;
      }
      uint64_t v28 = sub_13D88C0((uint64_t)v30);
      *(void *)(v7 + 104) = v28;
    }
    sub_E43FA0(a1, (uint64_t)(v18 + 6), a3, v28);
    uint64_t v25 = (uint64_t)(v18 + 68);
    if (sub_45FB38(v18 + 68))
    {
LABEL_21:
      uint64_t v26 = v18[130];
      uint64_t j = v18[131];
      if (v26 == j) {
        return;
      }
      goto LABEL_36;
    }
  }
  *(_DWORD *)(v7 + 16) |= 4u;
  uint64_t v31 = *(void *)(v7 + 112);
  if (!v31)
  {
    uint64_t v32 = *(void *)(v7 + 8);
    uint64_t v33 = (void *)(v32 & 0xFFFFFFFFFFFFFFFCLL);
    if (v32) {
      uint64_t v33 = (void *)*v33;
    }
    uint64_t v31 = sub_13D88C0((uint64_t)v33);
    *(void *)(v7 + 112) = v31;
  }
  sub_E43FA0(a1, v25, a3, v31);
  uint64_t v26 = v18[130];
  for (uint64_t j = v18[131]; v26 != j; v26 += 496)
  {
LABEL_36:
    uint64_t v36 = *(_DWORD **)(v7 + 64);
    if (v36 && (uint64_t v37 = *(int *)(v7 + 56), (int)v37 < *v36))
    {
      *(_DWORD *)(v7 + 56) = v37 + 1;
      uint64_t v35 = *(void *)&v36[2 * v37 + 2];
    }
    else
    {
      uint64_t v34 = sub_13D88C0(*(void *)(v7 + 48));
      uint64_t v35 = sub_188CDC8(v7 + 48, v34);
    }
    sub_E43FA0(a1, v26, a3, v35);
  }
}

void sub_E3F9B0(uint64_t a1, uint64_t a2, const void **a3, uint64_t a4)
{
  if (sub_63A4A4(a2))
  {
    unint64_t v6 = sub_63A848(a2);
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v7 = *(void *)(a2 + 40);
    if (v8 != v7)
    {
      int v130 = (_DWORD *)(a2 + 20);
      unint64_t v131 = HIDWORD(v6);
      uint64_t v126 = (uint64_t *)(a4 + 120);
      unint64_t v127 = (uint64_t *)(a4 + 144);
      uint64_t v128 = a4;
      uint64_t v132 = *(void *)(a2 + 40);
      while (!sub_63A048(v8))
      {
LABEL_7:
        v8 += 176;
        if (v8 == v7) {
          return;
        }
      }
      switch(*(_DWORD *)(v8 + 8))
      {
        case 1:
          uint64_t v12 = *(_DWORD **)(a4 + 136);
          if (v12 && (uint64_t v13 = *(int *)(a4 + 128), (int)v13 < *v12))
          {
            *(_DWORD *)(a4 + 128) = v13 + 1;
            uint64_t v14 = *(void *)&v12[2 * v13 + 2];
          }
          else
          {
            uint64_t v26 = sub_13D9774(*v126);
            uint64_t v14 = sub_188CDC8((uint64_t)v126, (uint64_t)v26);
          }
          int v27 = *((char *)a3 + 23);
          if (v27 >= 0) {
            size_t v28 = *((unsigned __int8 *)a3 + 23);
          }
          else {
            size_t v28 = (size_t)a3[1];
          }
          int v29 = byte_25FBC9F;
          if (byte_25FBC9F >= 0) {
            size_t v30 = byte_25FBC9F;
          }
          else {
            size_t v30 = qword_25FBC90;
          }
          unint64_t v31 = v30 + v28;
          if (v30 + v28 > 0x7FFFFFFFFFFFFFF7) {
            goto LABEL_193;
          }
          if (v31 > 0x16)
          {
            uint64_t v65 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v31 | 7) != 0x17) {
              uint64_t v65 = v31 | 7;
            }
            uint64_t v66 = v65 + 1;
            p_dst = (char *)operator new(v65 + 1);
            unint64_t v67 = v66 | 0x8000000000000000;
            a4 = v128;
            __dst.__r_.__value_.__l.__size_ = v30 + v28;
            __dst.__r_.__value_.__r.__words[2] = v67;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
            if (v28) {
              goto LABEL_87;
            }
          }
          else
          {
            memset(&__dst, 0, sizeof(__dst));
            p_dst = (char *)&__dst;
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v30 + v28;
            if (!v28) {
              goto LABEL_91;
            }
LABEL_87:
            if (v27 >= 0) {
              size_t v68 = a3;
            }
            else {
              size_t v68 = *a3;
            }
            memmove(p_dst, v68, v28);
          }
LABEL_91:
          int v69 = &p_dst[v28];
          if (v30)
          {
            if (v29 >= 0) {
              size_t v70 = &qword_25FBC88;
            }
            else {
              size_t v70 = (uint64_t *)qword_25FBC88;
            }
            memmove(v69, v70, v30);
          }
          v69[v30] = 0;
          *(_DWORD *)(v14 + 16) |= 1u;
          uint64_t v71 = *(void *)(v14 + 8);
          int v72 = (uint64_t *)(v71 & 0xFFFFFFFFFFFFFFFCLL);
          if (v71) {
            int v72 = (uint64_t *)*v72;
          }
          sub_1881E08((uint64_t *)(v14 + 24), (long long *)&__dst, v72);
          uint64_t v7 = v132;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__r_.__value_.__l.__data_);
            *(_DWORD *)(v14 + 16) |= 2u;
            uint64_t v9 = *(void *)(v14 + 32);
            if (!v9) {
              goto LABEL_174;
            }
          }
          else
          {
            *(_DWORD *)(v14 + 16) |= 2u;
            uint64_t v9 = *(void *)(v14 + 32);
            if (!v9)
            {
LABEL_174:
              uint64_t v116 = *(void *)(v14 + 8);
              uint64_t v117 = (void *)(v116 & 0xFFFFFFFFFFFFFFFCLL);
              if (v116) {
                uint64_t v117 = (void *)*v117;
              }
              uint64_t v9 = sub_15C1918((uint64_t)v117);
              *(void *)(v14 + 32) = v9;
            }
          }
          sub_E112BC(v130, v9, v10);
          *(_DWORD *)(v14 + 16) |= 0xCu;
          int v11 = 1;
          goto LABEL_6;
        case 2:
          uint8x8_t v15 = *(_DWORD **)(a4 + 136);
          if (v15 && (uint64_t v16 = *(int *)(a4 + 128), (int)v16 < *v15))
          {
            *(_DWORD *)(a4 + 128) = v16 + 1;
            uint64_t v14 = *(void *)&v15[2 * v16 + 2];
          }
          else
          {
            uint64_t v33 = sub_13D9774(*v126);
            uint64_t v14 = sub_188CDC8((uint64_t)v126, (uint64_t)v33);
          }
          int v34 = *((char *)a3 + 23);
          if (v34 >= 0) {
            size_t v35 = *((unsigned __int8 *)a3 + 23);
          }
          else {
            size_t v35 = (size_t)a3[1];
          }
          int v36 = byte_25FBCB7;
          if (byte_25FBCB7 >= 0) {
            size_t v37 = byte_25FBCB7;
          }
          else {
            size_t v37 = qword_25FBCA8;
          }
          unint64_t v38 = v37 + v35;
          if (v37 + v35 > 0x7FFFFFFFFFFFFFF7) {
            goto LABEL_193;
          }
          if (v38 <= 0x16)
          {
            memset(&__dst, 0, sizeof(__dst));
            uint64_t v39 = (char *)&__dst;
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v37 + v35;
            if (!v35) {
              goto LABEL_108;
            }
LABEL_104:
            if (v34 >= 0) {
              int v76 = a3;
            }
            else {
              int v76 = *a3;
            }
            memmove(v39, v76, v35);
            goto LABEL_108;
          }
          uint64_t v73 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v38 | 7) != 0x17) {
            uint64_t v73 = v38 | 7;
          }
          uint64_t v74 = v73 + 1;
          uint64_t v39 = (char *)operator new(v73 + 1);
          unint64_t v75 = v74 | 0x8000000000000000;
          a4 = v128;
          __dst.__r_.__value_.__l.__size_ = v37 + v35;
          __dst.__r_.__value_.__r.__words[2] = v75;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
          if (v35) {
            goto LABEL_104;
          }
LABEL_108:
          long long v77 = &v39[v35];
          if (v37)
          {
            if (v36 >= 0) {
              int v78 = &qword_25FBCA0;
            }
            else {
              int v78 = (uint64_t *)qword_25FBCA0;
            }
            memmove(v77, v78, v37);
          }
          v77[v37] = 0;
          *(_DWORD *)(v14 + 16) |= 1u;
          uint64_t v79 = *(void *)(v14 + 8);
          int v80 = (uint64_t *)(v79 & 0xFFFFFFFFFFFFFFFCLL);
          if (v79) {
            int v80 = (uint64_t *)*v80;
          }
          sub_1881E08((uint64_t *)(v14 + 24), (long long *)&__dst, v80);
          uint64_t v7 = v132;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__r_.__value_.__l.__data_);
            *(_DWORD *)(v14 + 16) |= 2u;
            uint64_t v82 = *(void *)(v14 + 32);
            if (v82) {
              goto LABEL_180;
            }
          }
          else
          {
            *(_DWORD *)(v14 + 16) |= 2u;
            uint64_t v82 = *(void *)(v14 + 32);
            if (v82) {
              goto LABEL_180;
            }
          }
          uint64_t v118 = *(void *)(v14 + 8);
          int v119 = (void *)(v118 & 0xFFFFFFFFFFFFFFFCLL);
          if (v118) {
            int v119 = (void *)*v119;
          }
          uint64_t v82 = sub_15C1918((uint64_t)v119);
          *(void *)(v14 + 32) = v82;
LABEL_180:
          sub_E112BC(v130, v82, v81);
          *(_DWORD *)(v14 + 16) |= 0xCu;
          int v11 = 2;
LABEL_6:
          *(_DWORD *)(v14 + 40) = v11;
          *(_DWORD *)(v14 + 44) = v131;
          goto LABEL_7;
        case 3:
          uint64_t v17 = *(_DWORD **)(a4 + 160);
          if (v17 && (uint64_t v18 = *(int *)(a4 + 152), (int)v18 < *v17))
          {
            *(_DWORD *)(a4 + 152) = v18 + 1;
            uint64_t v19 = *(void *)&v17[2 * v18 + 2];
          }
          else
          {
            sub_13D96E0(*v127);
            uint64_t v19 = sub_188CDC8((uint64_t)v127, v40);
          }
          int v41 = *((char *)a3 + 23);
          if (v41 >= 0) {
            size_t v42 = *((unsigned __int8 *)a3 + 23);
          }
          else {
            size_t v42 = (size_t)a3[1];
          }
          int v43 = byte_25FBCCF;
          if (byte_25FBCCF >= 0) {
            size_t v44 = byte_25FBCCF;
          }
          else {
            size_t v44 = qword_25FBCC0;
          }
          unint64_t v45 = v44 + v42;
          if (v44 + v42 > 0x7FFFFFFFFFFFFFF7) {
            goto LABEL_193;
          }
          if (v45 <= 0x16)
          {
            memset(&__dst, 0, sizeof(__dst));
            uint64_t v46 = (char *)&__dst;
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v44 + v42;
            if (!v42) {
              goto LABEL_125;
            }
LABEL_121:
            if (v41 >= 0) {
              uint64_t v86 = a3;
            }
            else {
              uint64_t v86 = *a3;
            }
            memmove(v46, v86, v42);
            goto LABEL_125;
          }
          uint64_t v83 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v45 | 7) != 0x17) {
            uint64_t v83 = v45 | 7;
          }
          uint64_t v84 = v83 + 1;
          uint64_t v46 = (char *)operator new(v83 + 1);
          unint64_t v85 = v84 | 0x8000000000000000;
          a4 = v128;
          __dst.__r_.__value_.__l.__size_ = v44 + v42;
          __dst.__r_.__value_.__r.__words[2] = v85;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
          if (v42) {
            goto LABEL_121;
          }
LABEL_125:
          int v87 = &v46[v42];
          if (v44)
          {
            if (v43 >= 0) {
              size_t v88 = &qword_25FBCB8;
            }
            else {
              size_t v88 = (uint64_t *)qword_25FBCB8;
            }
            memmove(v87, v88, v44);
          }
          v87[v44] = 0;
          *(_DWORD *)(v19 + 16) |= 1u;
          uint64_t v89 = *(void *)(v19 + 8);
          unint64_t v90 = (uint64_t *)(v89 & 0xFFFFFFFFFFFFFFFCLL);
          if (v89) {
            unint64_t v90 = (uint64_t *)*v90;
          }
          sub_1881E08((uint64_t *)(v19 + 24), (long long *)&__dst, v90);
          uint64_t v7 = v132;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__r_.__value_.__l.__data_);
            *(_DWORD *)(v19 + 16) |= 4u;
            uint64_t v92 = *(void *)(v19 + 40);
            if (!v92)
            {
LABEL_182:
              uint64_t v120 = *(void *)(v19 + 8);
              unint64_t v121 = (void *)(v120 & 0xFFFFFFFFFFFFFFFCLL);
              if (v120) {
                unint64_t v121 = (void *)*v121;
              }
              uint64_t v92 = sub_15C1918((uint64_t)v121);
              *(void *)(v19 + 40) = v92;
            }
          }
          else
          {
            *(_DWORD *)(v19 + 16) |= 4u;
            uint64_t v92 = *(void *)(v19 + 40);
            if (!v92) {
              goto LABEL_182;
            }
          }
          sub_E112BC(v130, v92, v91);
          int v122 = *(_DWORD *)(v19 + 16);
          *(_DWORD *)(v19 + 64) = 2;
          *(_DWORD *)(v19 + 16) = v122 | 0x220;
          *(_DWORD *)(v19 + 84) = v131;
          if (sub_63A4F0(a2))
          {
            *(_DWORD *)(v19 + 16) |= 0x20u;
            *(_DWORD *)(v19 + 64) = 5;
          }
          goto LABEL_7;
        case 4:
          uint64_t v20 = *(_DWORD **)(a4 + 160);
          if (v20 && (uint64_t v21 = *(int *)(a4 + 152), (int)v21 < *v20))
          {
            *(_DWORD *)(a4 + 152) = v21 + 1;
            uint64_t v22 = *(void *)&v20[2 * v21 + 2];
          }
          else
          {
            sub_13D96E0(*v127);
            uint64_t v22 = sub_188CDC8((uint64_t)v127, v47);
          }
          int v48 = *((char *)a3 + 23);
          if (v48 >= 0) {
            size_t v49 = *((unsigned __int8 *)a3 + 23);
          }
          else {
            size_t v49 = (size_t)a3[1];
          }
          int v50 = byte_25FBCE7;
          if (byte_25FBCE7 >= 0) {
            size_t v51 = byte_25FBCE7;
          }
          else {
            size_t v51 = qword_25FBCD8;
          }
          unint64_t v52 = v51 + v49;
          if (v51 + v49 > 0x7FFFFFFFFFFFFFF7) {
            goto LABEL_193;
          }
          if (v52 <= 0x16)
          {
            memset(&__dst, 0, sizeof(__dst));
            uint64_t v53 = (char *)&__dst;
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v51 + v49;
            if (!v49) {
              goto LABEL_142;
            }
LABEL_138:
            if (v48 >= 0) {
              uint64_t v96 = a3;
            }
            else {
              uint64_t v96 = *a3;
            }
            memmove(v53, v96, v49);
            goto LABEL_142;
          }
          uint64_t v93 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v52 | 7) != 0x17) {
            uint64_t v93 = v52 | 7;
          }
          uint64_t v94 = v93 + 1;
          uint64_t v53 = (char *)operator new(v93 + 1);
          unint64_t v95 = v94 | 0x8000000000000000;
          a4 = v128;
          __dst.__r_.__value_.__l.__size_ = v51 + v49;
          __dst.__r_.__value_.__r.__words[2] = v95;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
          if (v49) {
            goto LABEL_138;
          }
LABEL_142:
          uint64_t v97 = &v53[v49];
          if (v51)
          {
            if (v50 >= 0) {
              uint64_t v98 = &qword_25FBCD0;
            }
            else {
              uint64_t v98 = (uint64_t *)qword_25FBCD0;
            }
            memmove(v97, v98, v51);
          }
          v97[v51] = 0;
          *(_DWORD *)(v22 + 16) |= 1u;
          uint64_t v99 = *(void *)(v22 + 8);
          uint64_t v100 = (uint64_t *)(v99 & 0xFFFFFFFFFFFFFFFCLL);
          if (v99) {
            uint64_t v100 = (uint64_t *)*v100;
          }
          sub_1881E08((uint64_t *)(v22 + 24), (long long *)&__dst, v100);
          uint64_t v7 = v132;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__r_.__value_.__l.__data_);
            *(_DWORD *)(v22 + 16) |= 4u;
            uint64_t v102 = *(void *)(v22 + 40);
            if (!v102)
            {
LABEL_188:
              uint64_t v123 = *(void *)(v22 + 8);
              uint64_t v124 = (void *)(v123 & 0xFFFFFFFFFFFFFFFCLL);
              if (v123) {
                uint64_t v124 = (void *)*v124;
              }
              uint64_t v102 = sub_15C1918((uint64_t)v124);
              *(void *)(v22 + 40) = v102;
            }
          }
          else
          {
            *(_DWORD *)(v22 + 16) |= 4u;
            uint64_t v102 = *(void *)(v22 + 40);
            if (!v102) {
              goto LABEL_188;
            }
          }
          sub_E112BC(v130, v102, v101);
          int v125 = *(_DWORD *)(v22 + 16);
          *(_DWORD *)(v22 + 64) = 5;
          *(_DWORD *)(v22 + 16) = v125 | 0x220;
          *(_DWORD *)(v22 + 84) = v131;
          goto LABEL_7;
        case 5:
          char v23 = *(_DWORD **)(a4 + 160);
          if (v23 && (uint64_t v24 = *(int *)(a4 + 152), (int)v24 < *v23))
          {
            *(_DWORD *)(a4 + 152) = v24 + 1;
            uint64_t v25 = *(void *)&v23[2 * v24 + 2];
          }
          else
          {
            sub_13D96E0(*v127);
            uint64_t v25 = sub_188CDC8((uint64_t)v127, v54);
          }
          unsigned int v55 = sub_63A824(a2);
          std::to_string(&__dst, v55);
          *(_DWORD *)(v25 + 16) |= 2u;
          uint64_t v56 = *(void *)(v25 + 8);
          uint64_t v57 = (uint64_t *)(v56 & 0xFFFFFFFFFFFFFFFCLL);
          if (v56) {
            uint64_t v57 = (uint64_t *)*v57;
          }
          sub_1881E08((uint64_t *)(v25 + 32), (long long *)&__dst, v57);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          int v58 = *(_DWORD *)(v25 + 16);
          *(double *)(v25 + 72) = *(double *)(a2 + 88) / 3.6;
          *(_DWORD *)(v25 + 16) = v58 | 0xA0;
          *(_DWORD *)(v25 + 64) = 1;
          int v59 = *((char *)a3 + 23);
          if (v59 >= 0) {
            size_t v60 = *((unsigned __int8 *)a3 + 23);
          }
          else {
            size_t v60 = (size_t)a3[1];
          }
          int v61 = byte_25FBCFF;
          if (byte_25FBCFF >= 0) {
            size_t v62 = byte_25FBCFF;
          }
          else {
            size_t v62 = qword_25FBCF0;
          }
          unint64_t v63 = v62 + v60;
          if (v62 + v60 > 0x7FFFFFFFFFFFFFF7) {
LABEL_193:
          }
            sub_188D690();
          if (v63 <= 0x16)
          {
            memset(&__dst, 0, sizeof(__dst));
            unint64_t v64 = (char *)&__dst;
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v62 + v60;
            if (!v60) {
              goto LABEL_159;
            }
LABEL_155:
            if (v59 >= 0) {
              uint64_t v106 = a3;
            }
            else {
              uint64_t v106 = *a3;
            }
            memmove(v64, v106, v60);
            goto LABEL_159;
          }
          uint64_t v103 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v63 | 7) != 0x17) {
            uint64_t v103 = v63 | 7;
          }
          uint64_t v104 = v103 + 1;
          unint64_t v64 = (char *)operator new(v103 + 1);
          unint64_t v105 = v104 | 0x8000000000000000;
          a4 = v128;
          __dst.__r_.__value_.__l.__size_ = v62 + v60;
          __dst.__r_.__value_.__r.__words[2] = v105;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v64;
          if (v60) {
            goto LABEL_155;
          }
LABEL_159:
          uint64_t v107 = &v64[v60];
          if (v62)
          {
            if (v61 >= 0) {
              int v108 = &qword_25FBCE8;
            }
            else {
              int v108 = (uint64_t *)qword_25FBCE8;
            }
            memmove(v107, v108, v62);
          }
          v107[v62] = 0;
          *(_DWORD *)(v25 + 16) |= 1u;
          uint64_t v109 = *(void *)(v25 + 8);
          int v110 = (uint64_t *)(v109 & 0xFFFFFFFFFFFFFFFCLL);
          if (v109) {
            int v110 = (uint64_t *)*v110;
          }
          sub_1881E08((uint64_t *)(v25 + 24), (long long *)&__dst, v110);
          uint64_t v7 = v132;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          int v112 = *(_DWORD *)(v25 + 16);
          *(_DWORD *)(v25 + 84) = v131;
          *(_DWORD *)(v25 + 16) = v112 | 0x204;
          uint64_t v113 = *(void *)(v25 + 40);
          if (!v113)
          {
            uint64_t v114 = *(void *)(v25 + 8);
            uint64_t v115 = (void *)(v114 & 0xFFFFFFFFFFFFFFFCLL);
            if (v114) {
              uint64_t v115 = (void *)*v115;
            }
            uint64_t v113 = sub_15C1918((uint64_t)v115);
            *(void *)(v25 + 40) = v113;
          }
          sub_E112BC(v130, v113, v111);
          goto LABEL_7;
        default:
          goto LABEL_7;
      }
    }
  }
}

void sub_E4045C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_E404A0(unsigned char *a1, void *a2, uint64_t a3)
{
  BOOL result = sub_63A4A4(a3);
  if (result)
  {
    unint64_t v7 = sub_46C760(a2);
    unint64_t v8 = *(void *)(a3 + 8);
    if (v8 >= v7)
    {
      return 0;
    }
    else if (v8 == v7 - 1 && sub_46CAC4((uint64_t)a2) < 0x3B9ACA00)
    {
      return 0;
    }
    else if (sub_63A8F8(a3))
    {
      return a1[24] != 0;
    }
    else if (sub_63A908(a3))
    {
      return a1[25] != 0;
    }
    else
    {
      if (sub_63A770(a3)) {
        return a1[26] != 0;
      }
      BOOL result = sub_63A760(a3);
      if (result) {
        return a1[26] != 0;
      }
    }
  }
  return result;
}

void sub_E405B0(unint64_t __val@<X1>, unint64_t a2@<X2>, uint64_t a3@<X3>, std::string *a4@<X8>)
{
  std::to_string(&v23, __val);
  unint64_t v7 = std::string::append(&v23, "_");
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v22, a2);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v9 = &v22;
  }
  else {
    uint64_t v9 = (std::string *)v22.__r_.__value_.__r.__words[0];
  }
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v22.__r_.__value_.__l.__size_;
  }
  int v11 = std::string::append(&v24, (const std::string::value_type *)v9, size);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  uint64_t v13 = std::string::append(&v25, "_");
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v21, *(void *)(a3 + 8));
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint8x8_t v15 = &v21;
  }
  else {
    uint8x8_t v15 = (std::string *)v21.__r_.__value_.__r.__words[0];
  }
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v16 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v16 = v21.__r_.__value_.__l.__size_;
  }
  uint64_t v17 = std::string::append(&v26, (const std::string::value_type *)v15, v16);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  a4->__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v21.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_15:
      if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_16;
      }
      goto LABEL_23;
    }
  }
  else if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(v26.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_16:
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete(v25.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_17:
    if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }
LABEL_24:
  operator delete(v22.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_18:
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete(v24.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_19:
    if (*(_DWORD *)(a3 + 4) != 2) {
      return;
    }
    goto LABEL_27;
  }
LABEL_26:
  operator delete(v23.__r_.__value_.__l.__data_);
  if (*(_DWORD *)(a3 + 4) != 2) {
    return;
  }
LABEL_27:
  if (byte_25FBD17 >= 0) {
    uint64_t v19 = (const std::string::value_type *)&qword_25FBD00;
  }
  else {
    uint64_t v19 = (const std::string::value_type *)qword_25FBD00;
  }
  if (byte_25FBD17 >= 0) {
    std::string::size_type v20 = byte_25FBD17;
  }
  else {
    std::string::size_type v20 = *(void *)&word_25FBD08;
  }
  std::string::append(a4, v19, v20);
}

void sub_E407A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 + 23) < 0) {
    operator delete(*(void **)v33);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_E4089C(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  int v5 = sub_46CF0C(a2, 0);
  if (v5 < 0) {
    char v6 = -5;
  }
  else {
    char v6 = 5;
  }
  a3[10] |= 0x800000u;
  a3[208] = v5 / 10 + (((103 * (char)(v6 + v5 % 10)) >> 15) & 1) + ((103 * (char)(v6 + v5 % 10)) >> 10);
  if (sub_46CF0C(a2, 1) != 0x7FFFFFFF)
  {
    int v7 = sub_46CF0C(a2, 1);
    if (v7 < 0) {
      char v8 = -5;
    }
    else {
      char v8 = 5;
    }
    a3[10] |= 0x80000000;
    a3[216] = v7 / 10 + (((103 * (char)(v8 + v7 % 10)) >> 15) & 1) + ((103 * (char)(v8 + v7 % 10)) >> 10);
  }
  if (sub_46CF0C(a2, 2) != 0x7FFFFFFF)
  {
    int v9 = sub_46CF0C(a2, 2);
    if (v9 < 0) {
      char v10 = -5;
    }
    else {
      char v10 = 5;
    }
    a3[10] |= 0x10000000u;
    a3[213] = v9 / 10
            + (((103 * (char)(v10 + v9 % 10)) >> 15) & 1)
            + ((103 * (char)(v10 + v9 % 10)) >> 10);
  }
  if (sub_46CF0C(a2, 5) == 0x7FFFFFFF)
  {
    uint64_t result = sub_46CF0C(a2, 4);
    if (result == 0x7FFFFFFF) {
      return result;
    }
    goto LABEL_21;
  }
  int v12 = sub_46CF0C(a2, 5);
  if (v12 < 0) {
    char v13 = -5;
  }
  else {
    char v13 = 5;
  }
  a3[10] |= 0x40000000u;
  a3[215] = v12 / 10
          + (((103 * (char)(v13 + v12 % 10)) >> 15) & 1)
          + ((103 * (char)(v13 + v12 % 10)) >> 10);
  uint64_t result = sub_46CF0C(a2, 4);
  if (result != 0x7FFFFFFF)
  {
LABEL_21:
    uint64_t result = sub_46CF0C(a2, 4);
    if ((int)result < 0) {
      char v14 = -5;
    }
    else {
      char v14 = 5;
    }
    a3[10] |= 0x20000000u;
    a3[214] = (int)result / 10
            + (((103 * (char)(v14 + (int)result % 10)) >> 15) & 1)
            + ((103 * (char)(v14 + (int)result % 10)) >> 10);
  }
  return result;
}

void sub_E40B4C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (a2[1322] != a2[1323])
  {
    *(_DWORD *)(a3 + 40) |= 0x10000u;
    uint64_t v5 = *(void *)(a3 + 784);
    if (!v5)
    {
      uint64_t v6 = *(void *)(a3 + 8);
      int v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (v6) {
        int v7 = (void *)*v7;
      }
      sub_13D8414((uint64_t)v7);
      uint64_t v5 = v8;
      *(void *)(a3 + 784) = v8;
    }
    sub_E146FC(a2 + 1322, v5);
  }
  if (a2[1407] != a2[1408])
  {
    int v9 = a2 + 1407;
    *(_DWORD *)(a3 + 40) |= 0x20000u;
    uint64_t v10 = *(void *)(a3 + 792);
    if (!v10)
    {
      uint64_t v11 = *(void *)(a3 + 8);
      int v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
      if (v11) {
        int v12 = (void *)*v12;
      }
      sub_13D8414((uint64_t)v12);
      uint64_t v10 = v13;
      *(void *)(a3 + 792) = v13;
    }
    sub_E146FC(v9, v10);
  }
  *(_DWORD *)(a3 + 40) |= 0x10000u;
  uint64_t v14 = *(void *)(a3 + 784);
  if (!v14)
  {
    uint64_t v15 = *(void *)(a3 + 8);
    std::string::size_type v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
    if (v15) {
      std::string::size_type v16 = (void *)*v16;
    }
    sub_13D8414((uint64_t)v16);
    *(void *)(a3 + 784) = v14;
  }
  *(_DWORD *)(v14 + 16) |= 0x400u;
  *(_DWORD *)(v14 + 104) = 1;
  *(_DWORD *)(a3 + 40) |= 0x20000u;
  uint64_t v17 = *(void *)(a3 + 792);
  if (!v17)
  {
    uint64_t v18 = *(void *)(a3 + 8);
    uint64_t v19 = (void *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
    if (v18) {
      uint64_t v19 = (void *)*v19;
    }
    sub_13D8414((uint64_t)v19);
    *(void *)(a3 + 792) = v17;
  }
  *(_DWORD *)(v17 + 16) |= 0x400u;
  *(_DWORD *)(v17 + 104) = 1;
}

void sub_E40CA4(unsigned char *a1, void *a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9 = a2[1494];
  uint64_t v10 = a2[1495];
  if (v9 != v10)
  {
    uint64_t v11 = (uint64_t *)(a5 + 224);
    do
    {
      while (1)
      {
        uint64_t v14 = *(_DWORD **)(a5 + 240);
        if (v14)
        {
          uint64_t v15 = *(int *)(a5 + 232);
          if ((int)v15 < *v14) {
            break;
          }
        }
        sub_13D97FC(*v11);
        uint64_t v13 = sub_188CDC8(a5 + 224, v12);
        sub_E13288(v9, v13);
        v9 += 608;
        if (v9 == v10) {
          goto LABEL_7;
        }
      }
      *(_DWORD *)(a5 + 232) = v15 + 1;
      sub_E13288(v9, *(void *)&v14[2 * v15 + 2]);
      v9 += 608;
    }
    while (v9 != v10);
  }
LABEL_7:
  uint64_t v16 = a2[1272];
  uint64_t v17 = a2[1273];
  while (v16 != v17)
  {
    if (sub_E404A0(a1, a2, v16))
    {
      sub_E405B0(a3, a4, v16, &__p);
      sub_E41504((uint64_t)a1, v16, (const void **)&__p.__r_.__value_.__l.__data_, a5);
      uint64_t v18 = a2[133];
      uint64_t v19 = a2[134];
      while (v18 != v19)
      {
        uint64_t v20 = *(void *)(v18 + 1736);
        uint64_t v21 = *(void *)(v18 + 1744);
        if (v20 != v21)
        {
          do
          {
            if (sub_6397A0(v20) != -1 && sub_6397A0(v20) == *(void *)(v16 + 8))
            {
              if (v20 == *(void *)(v18 + 1744)) {
                goto LABEL_14;
              }
              goto LABEL_24;
            }
            v20 += 408;
          }
          while (v20 != v21);
          uint64_t v20 = v21;
          if (v21 == *(void *)(v18 + 1744)) {
            goto LABEL_14;
          }
LABEL_24:
          sub_6396D8(v20, *(_DWORD *)(a5 + 232) - 1);
        }
LABEL_14:
        v18 += 2400;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    v16 += 104;
  }
}

void sub_E40E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_E40E9C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(int **)(a2 + 1064);
  uint64_t v9 = *(int **)(a2 + 1072);
  if (v8 != v9)
  {
    uint64_t v10 = (uint64_t *)(a3 + 56);
    do
    {
      while (1)
      {
        uint64_t v13 = *(_DWORD **)(a3 + 72);
        if (v13)
        {
          uint64_t v14 = *(int *)(a3 + 64);
          if ((int)v14 < *v13) {
            break;
          }
        }
        uint64_t v11 = sub_13D7DD4(*v10);
        uint64_t v12 = sub_188CDC8(a3 + 56, v11);
        sub_E42A2C((uint64_t)a1, v8, v12);
        v8 += 600;
        if (v8 == v9) {
          goto LABEL_7;
        }
      }
      *(_DWORD *)(a3 + 64) = v14 + 1;
      sub_E42A2C((uint64_t)a1, v8, *(void *)&v13[2 * v14 + 2]);
      v8 += 600;
    }
    while (v8 != v9);
  }
LABEL_7:
  sub_E421DC(a1);

  return sub_E42CD8((uint64_t)a1, a2, a3, a4 + 48);
}

void sub_E40F98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 10008);
  uint64_t v4 = *(void *)(a2 + 10016);
  if (v3 != v4)
  {
    uint64_t v6 = (uint64_t *)(a3 + 392);
    do
    {
      unsigned int v10 = *(unsigned __int8 *)(v3 + 4);
      if (v10 == 8) {
        goto LABEL_5;
      }
      int v11 = sub_E15968(v10);
      uint64_t v12 = *(_DWORD **)(a3 + 408);
      if (v12 && (uint64_t v13 = *(int *)(a3 + 400), (int)v13 < *v12))
      {
        *(_DWORD *)(a3 + 400) = v13 + 1;
        uint64_t v14 = *(void *)&v12[2 * v13 + 2];
        uint64_t v15 = *(_DWORD **)(v14 + 40);
        if (!v15) {
          goto LABEL_14;
        }
      }
      else
      {
        uint64_t v16 = sub_13D789C(*v6);
        uint64_t v14 = sub_188CDC8((uint64_t)v6, (uint64_t)v16);
        uint64_t v15 = *(_DWORD **)(v14 + 40);
        if (!v15) {
          goto LABEL_14;
        }
      }
      uint64_t v17 = *(int *)(v14 + 32);
      if ((int)v17 >= *v15)
      {
LABEL_14:
        uint64_t v19 = sub_13D7824(*(void *)(v14 + 24));
        uint64_t v18 = (_DWORD *)sub_188CDC8(v14 + 24, (uint64_t)v19);
        goto LABEL_15;
      }
      *(_DWORD *)(v14 + 32) = v17 + 1;
      uint64_t v18 = *(_DWORD **)&v15[2 * v17 + 2];
LABEL_15:
      double v20 = (double)*(uint64_t *)(v3 + 8) / 100.0;
      *(_DWORD *)(v14 + 16) |= 1u;
      *(_DWORD *)(v14 + 48) = v20;
      v18[4] |= 3u;
      v18[6] = 1;
      v18[7] = v11;
      uint64_t v21 = *(_DWORD **)(a3 + 408);
      if (v21 && (uint64_t v22 = *(int *)(a3 + 400), (int)v22 < *v21))
      {
        *(_DWORD *)(a3 + 400) = v22 + 1;
        uint64_t v23 = *(void *)&v21[2 * v22 + 2];
        std::string v24 = *(_DWORD **)(v23 + 40);
        if (!v24) {
          goto LABEL_3;
        }
      }
      else
      {
        std::string v25 = sub_13D789C(*v6);
        uint64_t v23 = sub_188CDC8((uint64_t)v6, (uint64_t)v25);
        std::string v24 = *(_DWORD **)(v23 + 40);
        if (!v24) {
          goto LABEL_3;
        }
      }
      uint64_t v26 = *(int *)(v23 + 32);
      if ((int)v26 < *v24)
      {
        *(_DWORD *)(v23 + 32) = v26 + 1;
        uint64_t v8 = *(_DWORD **)&v24[2 * v26 + 2];
        goto LABEL_4;
      }
LABEL_3:
      int v7 = sub_13D7824(*(void *)(v23 + 24));
      uint64_t v8 = (_DWORD *)sub_188CDC8(v23 + 24, (uint64_t)v7);
LABEL_4:
      double v9 = (double)*(uint64_t *)(v3 + 16) / 100.0;
      *(_DWORD *)(v23 + 16) |= 1u;
      *(_DWORD *)(v23 + 48) = v9;
      v8[4] |= 3u;
      v8[6] = 2;
      v8[7] = v11;
LABEL_5:
      v3 += 616;
    }
    while (v3 != v4);
  }
}

void sub_E411A4(uint64_t a1, __n128 *a2, uint64_t a3)
{
  sub_46C7E0(a2, &v20);
  unint64_t v5 = v20.n128_u64[1];
  for (unint64_t i = v20.n128_u64[0]; i != v5; i += 24)
  {
    uint64_t v18 = *(_DWORD **)(a3 + 552);
    if (v18 && (uint64_t v19 = *(int *)(a3 + 544), (int)v19 < *v18))
    {
      *(_DWORD *)(a3 + 544) = v19 + 1;
      int v7 = *(_DWORD **)&v18[2 * v19 + 2];
    }
    else
    {
      uint64_t v6 = sub_13D8E0C(*(void *)(a3 + 536));
      int v7 = (_DWORD *)sub_188CDC8(a3 + 536, (uint64_t)v6);
    }
    uint64_t v8 = *(void *)(i + 8);
    int v9 = (int)v8 / 100;
    int v10 = (int)v8 % 100;
    if (v8 < 0) {
      __int16 v11 = -50;
    }
    else {
      __int16 v11 = 50;
    }
    unsigned int v12 = v9 + ((5243 * (__int16)(v11 + v10)) >> 19) + ((5243 * (__int16)(v11 + v10)) >> 31);
    int v13 = v7[4];
    v7[4] = v13 | 1;
    v7[6] = v12;
    int v14 = *(_DWORD *)(i + 16);
    int v15 = v14 / 10;
    int v16 = v14 % 10;
    if (v14 < 0) {
      char v17 = -5;
    }
    else {
      char v17 = 5;
    }
    v7[4] = v13 | 3;
    v7[7] = v15 + (((103 * (char)(v17 + v16)) >> 15) & 1) + ((103 * (char)(v17 + v16)) >> 10);
  }
}

int32x2_t *sub_E41320(int32x2_t *result, uint64_t a2, uint64_t a3)
{
  if (result[10].i8[4])
  {
    uint64_t v3 = result;
    if (*(unsigned char *)(*(void *)result + 39))
    {
      uint64_t v5 = *(void *)(a2 + 1112);
      uint64_t v6 = *(void *)(a2 + 1120);
      if (v5 != v6)
      {
        uint64_t v8 = (uint64_t *)(a3 + 200);
        do
        {
          int v9 = *(_DWORD **)(a3 + 216);
          if (v9 && (uint64_t v10 = *(int *)(a3 + 208), (int)v10 < *v9))
          {
            *(_DWORD *)(a3 + 208) = v10 + 1;
            uint64_t v11 = *(void *)&v9[2 * v10 + 2];
          }
          else
          {
            uint64_t v12 = sub_13D8CD0(*v8);
            uint64_t v11 = sub_188CDC8((uint64_t)v8, v12);
          }
          int v13 = *(unsigned __int8 *)(*(void *)v3 + 1);
          *(_DWORD *)(v11 + 16) |= 1u;
          uint64_t v14 = *(void *)(v11 + 48);
          if (!v14)
          {
            uint64_t v15 = *(void *)(v11 + 8);
            int v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
            if (v15) {
              int v16 = (void *)*v16;
            }
            uint64_t v14 = sub_15C1DB0((uint64_t)v16);
            *(void *)(v11 + 48) = v14;
          }
          uint64_t result = (int32x2_t *)sub_E155E8(v5, v13 != 0, v14);
          char v17 = *(int64x2_t **)(v5 + 152);
          for (unint64_t i = *(int64x2_t **)(v5 + 160); v17 != i; result[3] = vmovn_s64(v20))
          {
            uint64_t v21 = *(_DWORD **)(v11 + 40);
            if (v21 && (uint64_t v22 = *(int *)(v11 + 32), (int)v22 < *v21))
            {
              *(_DWORD *)(v11 + 32) = v22 + 1;
              uint64_t result = *(int32x2_t **)&v21[2 * v22 + 2];
            }
            else
            {
              uint64_t v19 = sub_13D7664(*(void *)(v11 + 24));
              uint64_t result = (int32x2_t *)sub_188CDC8(v11 + 24, (uint64_t)v19);
            }
            result[2].i32[0] |= 3u;
            int64x2_t v20 = *v17++;
          }
          v5 += 176;
        }
        while (v5 != v6);
        uint64_t v23 = *(long long **)(a2 + 1112);
        if (v23 != *(long long **)(a2 + 1120))
        {
          *(_DWORD *)(a3 + 40) |= 1u;
          uint64_t v24 = *(void *)(a3 + 8);
          std::string v25 = (uint64_t *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
          if (v24) {
            std::string v25 = (uint64_t *)*v25;
          }
          return (int32x2_t *)sub_1881DF4((std::string **)(a3 + 656), v23, v25);
        }
      }
    }
  }
  return result;
}

void sub_E41504(uint64_t a1, uint64_t a2, const void **a3, uint64_t a4)
{
  if (sub_63A4A4(a2))
  {
    uint64_t v7 = *(void *)(a2 + 32);
    uint64_t v6 = *(void *)(a2 + 40);
    if (v7 != v6)
    {
      uint64_t v81 = a4;
      uint64_t v82 = (uint64_t *)(a4 + 224);
      uint64_t v83 = *(void *)(a2 + 40);
      while (!sub_63A048(v7))
      {
LABEL_8:
        v7 += 176;
        if (v7 == v6) {
          return;
        }
      }
      uint64_t v10 = *(_DWORD **)(a4 + 240);
      if (v10 && (uint64_t v11 = *(int *)(a4 + 232), (int)v11 < *v10))
      {
        *(_DWORD *)(a4 + 232) = v11 + 1;
        uint64_t v12 = *(void *)&v10[2 * v11 + 2];
      }
      else
      {
        sub_13D97FC(*v82);
        uint64_t v12 = sub_188CDC8((uint64_t)v82, v13);
      }
      BOOL v14 = *(_DWORD *)(a2 + 4) != 0;
      *(_DWORD *)(v12 + 16) |= 0x20u;
      *(_DWORD *)(v12 + 76) = v14;
      if (sub_63A4F0(a2))
      {
        int v15 = *(_DWORD *)(v12 + 16);
        *(_DWORD *)(v12 + 72) = *(_DWORD *)(a2 + 16);
        *(_DWORD *)(v12 + 88) = *(unsigned __int16 *)(v7 + 14);
        int v16 = *(unsigned __int16 *)(v7 + 16);
        *(_DWORD *)(v12 + 16) = v15 | 0x190;
        *(_DWORD *)(v12 + 84) = v16;
      }
      switch(*(_DWORD *)(v7 + 8))
      {
        case 1:
          *(_DWORD *)(v12 + 16) |= 4u;
          *(_DWORD *)(v12 + 64) = 2;
          int v17 = *((char *)a3 + 23);
          if (v17 >= 0) {
            size_t v18 = *((unsigned __int8 *)a3 + 23);
          }
          else {
            size_t v18 = (size_t)a3[1];
          }
          int v19 = byte_25FBC9F;
          if (byte_25FBC9F >= 0) {
            size_t v20 = byte_25FBC9F;
          }
          else {
            size_t v20 = qword_25FBC90;
          }
          unint64_t v21 = v20 + v18;
          if (v20 + v18 > 0x7FFFFFFFFFFFFFF7) {
            goto LABEL_140;
          }
          if (v21 > 0x16)
          {
            uint64_t v47 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v21 | 7) != 0x17) {
              uint64_t v47 = v21 | 7;
            }
            uint64_t v48 = v47 + 1;
            p_p = (char *)operator new(v47 + 1);
            unint64_t v49 = v48 | 0x8000000000000000;
            a4 = v81;
            *((void *)&__p + 1) = v20 + v18;
            unint64_t v86 = v49;
            *(void *)&long long __p = p_p;
            if (!v18) {
              goto LABEL_74;
            }
          }
          else
          {
            unint64_t v86 = 0;
            long long __p = 0uLL;
            p_p = (char *)&__p;
            HIBYTE(v86) = v20 + v18;
            if (!v18)
            {
LABEL_74:
              size_t v51 = &p_p[v18];
              if (v20)
              {
                if (v19 >= 0) {
                  unint64_t v52 = &qword_25FBC88;
                }
                else {
                  unint64_t v52 = (uint64_t *)qword_25FBC88;
                }
                memmove(v51, v52, v20);
              }
              v51[v20] = 0;
              *(_DWORD *)(v12 + 16) |= 1u;
              uint64_t v8 = *(void *)(v12 + 8);
              int v9 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
              uint64_t v6 = v83;
              if (v8) {
                int v9 = (uint64_t *)*v9;
              }
              goto LABEL_6;
            }
          }
          if (v17 >= 0) {
            int v50 = a3;
          }
          else {
            int v50 = *a3;
          }
          memmove(p_p, v50, v18);
          goto LABEL_74;
        case 2:
          *(_DWORD *)(v12 + 16) |= 4u;
          *(_DWORD *)(v12 + 64) = 2;
          int v23 = *((char *)a3 + 23);
          if (v23 >= 0) {
            size_t v24 = *((unsigned __int8 *)a3 + 23);
          }
          else {
            size_t v24 = (size_t)a3[1];
          }
          int v25 = byte_25FBCB7;
          if (byte_25FBCB7 >= 0) {
            size_t v26 = byte_25FBCB7;
          }
          else {
            size_t v26 = qword_25FBCA8;
          }
          unint64_t v27 = v26 + v24;
          if (v26 + v24 > 0x7FFFFFFFFFFFFFF7) {
            goto LABEL_140;
          }
          if (v27 <= 0x16)
          {
            unint64_t v86 = 0;
            long long __p = 0uLL;
            size_t v28 = (char *)&__p;
            HIBYTE(v86) = v26 + v24;
            if (!v24) {
              goto LABEL_86;
            }
LABEL_82:
            if (v23 >= 0) {
              uint64_t v56 = a3;
            }
            else {
              uint64_t v56 = *a3;
            }
            memmove(v28, v56, v24);
            goto LABEL_86;
          }
          uint64_t v53 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v27 | 7) != 0x17) {
            uint64_t v53 = v27 | 7;
          }
          uint64_t v54 = v53 + 1;
          size_t v28 = (char *)operator new(v53 + 1);
          unint64_t v55 = v54 | 0x8000000000000000;
          a4 = v81;
          *((void *)&__p + 1) = v26 + v24;
          unint64_t v86 = v55;
          *(void *)&long long __p = v28;
          if (v24) {
            goto LABEL_82;
          }
LABEL_86:
          uint64_t v57 = &v28[v24];
          if (v26)
          {
            if (v25 >= 0) {
              int v58 = &qword_25FBCA0;
            }
            else {
              int v58 = (uint64_t *)qword_25FBCA0;
            }
            memmove(v57, v58, v26);
          }
          v57[v26] = 0;
          *(_DWORD *)(v12 + 16) |= 1u;
          uint64_t v59 = *(void *)(v12 + 8);
          int v9 = (uint64_t *)(v59 & 0xFFFFFFFFFFFFFFFCLL);
          uint64_t v6 = v83;
          if (v59) {
            int v9 = (uint64_t *)*v9;
          }
          goto LABEL_6;
        case 3:
          *(_DWORD *)(v12 + 16) |= 4u;
          *(_DWORD *)(v12 + 64) = 1;
          int v29 = *((char *)a3 + 23);
          if (v29 >= 0) {
            size_t v30 = *((unsigned __int8 *)a3 + 23);
          }
          else {
            size_t v30 = (size_t)a3[1];
          }
          int v31 = byte_25FBCCF;
          if (byte_25FBCCF >= 0) {
            size_t v32 = byte_25FBCCF;
          }
          else {
            size_t v32 = qword_25FBCC0;
          }
          unint64_t v33 = v32 + v30;
          if (v32 + v30 > 0x7FFFFFFFFFFFFFF7) {
            goto LABEL_140;
          }
          if (v33 <= 0x16)
          {
            unint64_t v86 = 0;
            long long __p = 0uLL;
            int v34 = (char *)&__p;
            HIBYTE(v86) = v32 + v30;
            if (!v30) {
              goto LABEL_101;
            }
LABEL_97:
            if (v29 >= 0) {
              unint64_t v63 = a3;
            }
            else {
              unint64_t v63 = *a3;
            }
            memmove(v34, v63, v30);
            goto LABEL_101;
          }
          uint64_t v60 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v33 | 7) != 0x17) {
            uint64_t v60 = v33 | 7;
          }
          uint64_t v61 = v60 + 1;
          int v34 = (char *)operator new(v60 + 1);
          unint64_t v62 = v61 | 0x8000000000000000;
          a4 = v81;
          *((void *)&__p + 1) = v32 + v30;
          unint64_t v86 = v62;
          *(void *)&long long __p = v34;
          if (v30) {
            goto LABEL_97;
          }
LABEL_101:
          unint64_t v64 = &v34[v30];
          if (v32)
          {
            if (v31 >= 0) {
              uint64_t v65 = &qword_25FBCB8;
            }
            else {
              uint64_t v65 = (uint64_t *)qword_25FBCB8;
            }
            memmove(v64, v65, v32);
          }
          v64[v32] = 0;
          *(_DWORD *)(v12 + 16) |= 1u;
          uint64_t v66 = *(void *)(v12 + 8);
          int v9 = (uint64_t *)(v66 & 0xFFFFFFFFFFFFFFFCLL);
          uint64_t v6 = v83;
          if (v66) {
            int v9 = (uint64_t *)*v9;
          }
          goto LABEL_6;
        case 4:
          *(_DWORD *)(v12 + 16) |= 4u;
          *(_DWORD *)(v12 + 64) = 1;
          int v35 = *((char *)a3 + 23);
          if (v35 >= 0) {
            size_t v36 = *((unsigned __int8 *)a3 + 23);
          }
          else {
            size_t v36 = (size_t)a3[1];
          }
          int v37 = byte_25FBCE7;
          if (byte_25FBCE7 >= 0) {
            size_t v38 = byte_25FBCE7;
          }
          else {
            size_t v38 = qword_25FBCD8;
          }
          unint64_t v39 = v38 + v36;
          if (v38 + v36 > 0x7FFFFFFFFFFFFFF7) {
            goto LABEL_140;
          }
          if (v39 <= 0x16)
          {
            unint64_t v86 = 0;
            long long __p = 0uLL;
            uint64_t v40 = (char *)&__p;
            HIBYTE(v86) = v38 + v36;
            if (!v36) {
              goto LABEL_116;
            }
LABEL_112:
            if (v35 >= 0) {
              size_t v70 = a3;
            }
            else {
              size_t v70 = *a3;
            }
            memmove(v40, v70, v36);
            goto LABEL_116;
          }
          uint64_t v67 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v39 | 7) != 0x17) {
            uint64_t v67 = v39 | 7;
          }
          uint64_t v68 = v67 + 1;
          uint64_t v40 = (char *)operator new(v67 + 1);
          unint64_t v69 = v68 | 0x8000000000000000;
          a4 = v81;
          *((void *)&__p + 1) = v38 + v36;
          unint64_t v86 = v69;
          *(void *)&long long __p = v40;
          if (v36) {
            goto LABEL_112;
          }
LABEL_116:
          uint64_t v71 = &v40[v36];
          if (v38)
          {
            if (v37 >= 0) {
              int v72 = &qword_25FBCD0;
            }
            else {
              int v72 = (uint64_t *)qword_25FBCD0;
            }
            memmove(v71, v72, v38);
          }
          v71[v38] = 0;
          *(_DWORD *)(v12 + 16) |= 1u;
          uint64_t v73 = *(void *)(v12 + 8);
          int v9 = (uint64_t *)(v73 & 0xFFFFFFFFFFFFFFFCLL);
          uint64_t v6 = v83;
          if (v73) {
            int v9 = (uint64_t *)*v9;
          }
          goto LABEL_6;
        case 5:
          *(_DWORD *)(v12 + 16) |= 4u;
          *(_DWORD *)(v12 + 64) = 1;
          int v41 = *((char *)a3 + 23);
          if (v41 >= 0) {
            size_t v42 = *((unsigned __int8 *)a3 + 23);
          }
          else {
            size_t v42 = (size_t)a3[1];
          }
          int v43 = byte_25FBCFF;
          if (byte_25FBCFF >= 0) {
            size_t v44 = byte_25FBCFF;
          }
          else {
            size_t v44 = qword_25FBCF0;
          }
          unint64_t v45 = v44 + v42;
          if (v44 + v42 > 0x7FFFFFFFFFFFFFF7) {
LABEL_140:
          }
            sub_188D690();
          if (v45 <= 0x16)
          {
            unint64_t v86 = 0;
            long long __p = 0uLL;
            uint64_t v46 = (char *)&__p;
            HIBYTE(v86) = v44 + v42;
            if (!v42) {
              goto LABEL_131;
            }
LABEL_127:
            if (v41 >= 0) {
              long long v77 = a3;
            }
            else {
              long long v77 = *a3;
            }
            memmove(v46, v77, v42);
            goto LABEL_131;
          }
          uint64_t v74 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v45 | 7) != 0x17) {
            uint64_t v74 = v45 | 7;
          }
          uint64_t v75 = v74 + 1;
          uint64_t v46 = (char *)operator new(v74 + 1);
          unint64_t v76 = v75 | 0x8000000000000000;
          a4 = v81;
          *((void *)&__p + 1) = v44 + v42;
          unint64_t v86 = v76;
          *(void *)&long long __p = v46;
          if (v42) {
            goto LABEL_127;
          }
LABEL_131:
          int v78 = &v46[v42];
          if (v44)
          {
            if (v43 >= 0) {
              uint64_t v79 = &qword_25FBCE8;
            }
            else {
              uint64_t v79 = (uint64_t *)qword_25FBCE8;
            }
            memmove(v78, v79, v44);
          }
          v78[v44] = 0;
          *(_DWORD *)(v12 + 16) |= 1u;
          uint64_t v80 = *(void *)(v12 + 8);
          int v9 = (uint64_t *)(v80 & 0xFFFFFFFFFFFFFFFCLL);
          uint64_t v6 = v83;
          if (v80) {
            int v9 = (uint64_t *)*v9;
          }
LABEL_6:
          sub_1881E08((uint64_t *)(v12 + 48), &__p, v9);
          if (SHIBYTE(v86) < 0) {
            operator delete((void *)__p);
          }
          goto LABEL_8;
        default:
          goto LABEL_8;
      }
    }
  }
}

void sub_E41C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_E41CA8()
{
  sub_7BD6C(v0);
}

void sub_E4213C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E42150(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E42164(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E42178(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E4218C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E421A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E421B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E421C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_E421DC(uint64_t *result)
{
  if (!*(unsigned char *)(*result + 3))
  {
    sub_458644(v3, result[2]);
    uint64_t v1 = v3;
    char v2 = 0;
    sub_1106C64();
  }
  return result;
}

void sub_E4232C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1106CAC(&a14);
  _Unwind_Resume(a1);
}

void sub_E42354(uint64_t a1, void *a2, unsigned int a3, void *a4, unsigned int *a5, _DWORD *a6, char ***a7, void **a8)
{
  uint64_t v9 = a1;
  uint64_t v50 = a2[134];
  uint64_t v52 = a2[133];
  sub_E43914(a1, a2, a3, (void *)(v52 + 2400 * a3), a5, &__p);
  if (v61 != __p)
  {
    uint64_t v11 = 0;
    unint64_t v55 = 0xAAAAAAAAAAAAAAABLL * ((v61 - (unsigned char *)__p) >> 3);
    do
    {
      BOOL v14 = __p;
      if (v11 == -1 - 0x5555555555555555 * ((v61 - (unsigned char *)__p) >> 3))
      {
        uint64_t v15 = *((unsigned int *)__p + 6 * v11 + 3);
        BOOL v16 = sub_46C760(a2) - 1 == v15;
        if (!v11) {
          goto LABEL_8;
        }
      }
      else
      {
        BOOL v16 = 0;
        if (!v11)
        {
LABEL_8:
          BOOL v17 = v14[3] == 0;
          if (LOBYTE(v14[6 * v11 + 5])) {
            goto LABEL_12;
          }
          goto LABEL_5;
        }
      }
      BOOL v17 = 0;
      if (LOBYTE(v14[6 * v11 + 5]))
      {
LABEL_12:
        if (BYTE1(v14[6 * v11 + 4]) && *(unsigned char *)(*(void *)v9 + 2))
        {
          int v18 = sub_1106DFC((uint64_t)a7);
          a6[10] |= 0x40000000u;
          a6[79] = v18;
        }
        if (HIBYTE(v14[6 * v11 + 4]) && *(unsigned char *)(*(void *)v9 + 2))
        {
          int v19 = sub_1106DFC((uint64_t)a7);
          a6[11] |= 1u;
          a6[81] = v19;
        }
        if (BYTE2(v14[6 * v11 + 4]))
        {
          uint64_t v20 = *(void *)v9;
          if (*(unsigned char *)(*(void *)v9 + 2))
          {
            int v21 = sub_1106DFC((uint64_t)a7);
            a6[10] |= 0x80000000;
            a6[80] = v21;
            uint64_t v20 = *(void *)v9;
          }
          if (*(_DWORD *)(v20 + 44))
          {
            int v22 = -1431655765 * ((unint64_t)((unsigned char *)a8[1] - (unsigned char *)*a8) >> 2);
            a6[10] |= 0x20000000u;
            a6[78] = v22;
          }
        }
        uint64_t v23 = v9;
        size_t v24 = (char *)&v14[6 * v11];
        int v25 = *((_DWORD *)v24 + 2);
        LODWORD(v10) = *(_DWORD *)v24;
        int v26 = sub_1106B8C((double)v10 * 360.0 / 4294967300.0 + -180.0);
        LODWORD(v27) = *((_DWORD *)v24 + 1);
        long double v28 = exp((double)v27 * -6.28318531 / 4294967300.0 + 3.14159265);
        long double v29 = atan((v28 + -1.0 / v28) * 0.5);
        int v30 = sub_1106A34(v29 * 57.2957795);
        sub_40A2D8(&v59, v26, v30, v25);
        if (v24[16]) {
          int v31 = 1;
        }
        else {
          int v31 = v16;
        }
        if ((v31 | v17) == 1)
        {
          uint64_t v32 = sub_46C8EC(a2, v14[6 * v11 + 3]);
          sub_E1A654(a4, *(void *)(v32 + 32), (unsigned int *)&v59, (uint64_t)v58);
        }
        else
        {
          sub_11053FC((uint64_t)v58, &v59);
        }
        sub_1106E10(a7, v58);
        int v34 = (char *)a8[1];
        unint64_t v33 = (unint64_t)a8[2];
        if ((unint64_t)v34 < v33)
        {
          uint64_t v12 = *(void *)v24;
          *((_DWORD *)v34 + 2) = *((_DWORD *)v24 + 2);
          *(void *)int v34 = v12;
          uint64_t v13 = v34 + 12;
          uint64_t v9 = v23;
        }
        else
        {
          int v35 = (char *)*a8;
          unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((v34 - (unsigned char *)*a8) >> 2);
          unint64_t v37 = v36 + 1;
          if (v36 + 1 > 0x1555555555555555) {
            sub_2E00();
          }
          unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (void)v35) >> 2);
          if (2 * v38 > v37) {
            unint64_t v37 = 2 * v38;
          }
          if (v38 >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v39 = 0x1555555555555555;
          }
          else {
            unint64_t v39 = v37;
          }
          if (v39)
          {
            if (v39 > 0x1555555555555555) {
              sub_188D718();
            }
            uint64_t v40 = (char *)operator new(12 * v39);
          }
          else
          {
            uint64_t v40 = 0;
          }
          uint64_t v41 = *(void *)v24;
          size_t v42 = &v40[12 * v36];
          *((_DWORD *)v42 + 2) = *((_DWORD *)v24 + 2);
          *(void *)size_t v42 = v41;
          int v43 = v42;
          uint64_t v9 = v23;
          if (v34 != v35)
          {
            do
            {
              uint64_t v44 = *(void *)(v34 - 12);
              v34 -= 12;
              int v45 = *((_DWORD *)v34 + 2);
              *(void *)(v43 - 12) = v44;
              v43 -= 12;
              *((_DWORD *)v43 + 2) = v45;
            }
            while (v34 != v35);
            int v34 = (char *)*a8;
          }
          uint64_t v13 = v42 + 12;
          *a8 = v43;
          a8[1] = v42 + 12;
          a8[2] = &v40[12 * v39];
          if (v34) {
            operator delete(v34);
          }
        }
        a8[1] = v13;
      }
LABEL_5:
      ++v11;
    }
    while (v11 != v55);
  }
  uint64_t v46 = 0x2FC962FC962FC963 * ((v50 - v52) >> 5) - 1;
  if (!a3 || v46 == a3 || *(_DWORD *)(v52 + 2400 * a3 + 160) == 16)
  {
    if (v46 == a3)
    {
      int v47 = sub_1106DFC((uint64_t)a7) - 1;
      uint64_t v48 = -1 - 0x5555555555555555 * (((unsigned char *)a8[1] - (unsigned char *)*a8) >> 2);
      uint64_t v49 = *(void *)v9;
      if (!*(unsigned char *)(*(void *)v9 + 2))
      {
LABEL_53:
        if (*(_DWORD *)(v49 + 44))
        {
          a6[10] |= 0x20000000u;
          a6[78] = v48;
        }
        goto LABEL_55;
      }
    }
    else
    {
      int v47 = sub_1106DFC((uint64_t)a7);
      uint64_t v48 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a8[1] - (unsigned char *)*a8) >> 2);
      uint64_t v49 = *(void *)v9;
      if (!*(unsigned char *)(*(void *)v9 + 2)) {
        goto LABEL_53;
      }
    }
    a6[10] |= 0x80000000;
    a6[80] = v47;
    goto LABEL_53;
  }
LABEL_55:
  if (__p)
  {
    uint64_t v61 = __p;
    operator delete(__p);
  }
}

void sub_E428BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_E428F4()
{
}

void sub_E42A18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1108FEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

std::string *sub_E42A2C(uint64_t a1, int *a2, uint64_t a3)
{
  int v6 = *a2;
  *(_DWORD *)(a3 + 40) |= 0x400u;
  *(_DWORD *)(a3 + 256) = v6;
  int v7 = a2[40];
  if (!*(unsigned char *)(*(void *)a1 + 41) && (v7 - 64) <= 2) {
    int v7 = dword_20F0DEC[v7 - 64];
  }
  int v8 = sub_E12460(v7);
  *(_DWORD *)(a3 + 40) |= 0x2000u;
  *(_DWORD *)(a3 + 268) = v8;
  uint64_t v9 = (__int16 *)*((void *)a2 + 22);
  unint64_t v10 = (__int16 *)*((void *)a2 + 23);
  if (v9 != v10 && *(unsigned char *)(*(void *)a1 + 4))
  {
    do
    {
      uint64_t v11 = *(_DWORD **)(a3 + 96);
      if (v11 && (uint64_t v12 = *(int *)(a3 + 88), (int)v12 < *v11))
      {
        *(_DWORD *)(a3 + 88) = v12 + 1;
        uint64_t v13 = *(_DWORD **)&v11[2 * v12 + 2];
      }
      else
      {
        uint64_t v14 = sub_13D623C(*(void *)(a3 + 80));
        uint64_t v13 = (_DWORD *)sub_188CDC8(a3 + 80, v14);
      }
      int v15 = *v9;
      int v16 = v13[4];
      v13[4] = v16 | 1;
      v13[6] = v15;
      if (*((unsigned char *)v9 + 2))
      {
        v13[4] = v16 | 5;
        v13[8] = 2;
      }
      v9 += 2;
    }
    while (v9 != v10);
    unsigned int v17 = a2[50];
    if (v17 < 2)
    {
      *(_DWORD *)(a3 + 40) |= 0x4000u;
      *(_DWORD *)(a3 + 272) = v17;
    }
  }
  uint64_t v18 = *((void *)a2 + 109);
  if (*(unsigned char *)(*(void *)a1 + 3))
  {
    int v19 = *(_DWORD *)(a3 + 40);
    *(_DWORD *)(a3 + 40) = v19 | 0x8000000;
    *(_DWORD *)(a3 + 304) = v18;
    int v20 = v19 | 0x18000000;
    *(_DWORD *)(a3 + 308) = *((void *)a2 + 12);
  }
  else
  {
    float v21 = (double)v18 / 100.0;
    int v20 = *(_DWORD *)(a3 + 40) | 0x8000;
    *(float *)(a3 + 276) = v21;
  }
  *(_DWORD *)(a3 + 40) = v20;
  *(unsigned char *)(a3 + 294) = *((unsigned char *)a2 + 1856);
  *(unsigned char *)(a3 + 291) = *((unsigned char *)a2 + 892);
  char v22 = *((unsigned char *)a2 + 893);
  *(_DWORD *)(a3 + 40) = v20 | 0x1300000;
  *(unsigned char *)(a3 + 290) = v22;
  unsigned int v23 = *((unsigned __int8 *)a2 + 328);
  if (v23 != 5)
  {
    int v24 = sub_E124B8(v23);
    *(_DWORD *)(a3 + 40) |= 0x10000u;
    *(_DWORD *)(a3 + 280) = v24;
  }
  if (*((unsigned char *)a2 + 330))
  {
    int v25 = sub_E124DC(*((unsigned __int8 *)a2 + 329));
    *(_DWORD *)(a3 + 40) |= 0x20000u;
    *(_DWORD *)(a3 + 284) = v25;
  }
  sub_E43798(a1, a2, a3);
  sub_E14968((std::string *)(a2 + 164), a3);
  uint64_t v26 = sub_40A454((uint64_t)(a2 + 504));
  if (v26 != 0x7FFFFFFF && HIDWORD(v26) != 0x7FFFFFFF && (int)v26 <= SHIDWORD(v26))
  {
    *(_DWORD *)(a3 + 40) |= 0x20u;
    unint64_t v27 = *(void **)(a3 + 216);
    if (!v27)
    {
      uint64_t v28 = *(void *)(a3 + 8);
      long double v29 = (void *)(v28 & 0xFFFFFFFFFFFFFFFCLL);
      if (v28) {
        long double v29 = (void *)*v29;
      }
      unint64_t v27 = sub_13D8160((uint64_t)v29);
      *(void *)(a3 + 216) = v27;
    }
    sub_E158A4((unsigned int *)a2 + 504, v27);
  }
  int v30 = *(unsigned __int8 *)(*(void *)a1 + 1);

  return sub_E19D28(a1, a2, v30, a3);
}

uint64_t sub_E42CD8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(*(void *)result + 3))
  {
    uint64_t v7 = result;
    uint64_t v21 = a3;
    sub_424818(result + 88, a2, &v21, 1, 0, v22);
    if (*(unsigned char *)(v7 + 48)) {
      BOOL v8 = *(void *)(a2 + 504) <= *(void *)(v7 + 56);
    }
    else {
      BOOL v8 = 0;
    }
    sub_E448EC(v7, (uint64_t)v22, *(unsigned __int8 *)(a2 + 9976) != 0, v8, a4);
    uint64_t v14 = 0;
    *(void *)&long long __p = 0x4039000000000000;
    *((void *)&__p + 1) = 5000;
    long long v12 = xmmword_20E7C10;
    long long v13 = xmmword_20E7C20;
    uint64_t v15 = 20000000;
    uint64_t v16 = 0x3FF199999999999ALL;
    uint64_t v17 = 0x3E800002710;
    uint64_t v18 = 0xA00002710;
    long long v19 = xmmword_20E7C00;
    long long v20 = 0x3FE6147AE147AE14uLL;
    sub_1109790((uint64_t)&__p, (uint64_t)v22);
    sub_188B428((uint64_t)v22, (uint64_t)&__p);
    *(_DWORD *)(a3 + 40) |= 0x100u;
    uint64_t v9 = *(void *)(a3 + 8);
    unint64_t v10 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
    if (v9) {
      unint64_t v10 = (uint64_t *)*v10;
    }
    sub_1881E08((uint64_t *)(a3 + 720), &__p, v10);
    if (SBYTE7(v12) < 0) {
      operator delete((void *)__p);
    }
    return sub_1116458(v22);
  }
  return result;
}

void sub_E42E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_1116458(v14 - 96);
    _Unwind_Resume(a1);
  }
  sub_1116458(v14 - 96);
  _Unwind_Resume(a1);
}

void sub_E42ED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 80)) {
    return;
  }
  size_t v42 = 0;
  int v43 = 0;
  uint64_t v44 = 0;
  if (!sub_64F0E0(a2)) {
    goto LABEL_20;
  }
  unint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  int v6 = (uint64_t *)sub_376F8C(*(void **)(a1 + 8));
  uint64_t v7 = sub_374DF4(a2);
  unsigned int v46 = *(_DWORD *)(v7 + 112);
  if (v46 <= 1) {
    uint64_t v45 = *(void *)(v7 + 104);
  }
  sub_28E4E4(v6, (uint64_t)&v45, (unint64_t)&v28);
  sub_30C0C(&v39, v35);
  char v27 = 17;
  strcpy(__p, "Charging Stations");
  sub_DEC58C((uint64_t *)&v42, (uint64_t *)&v39, (uint64_t)__p, 0xFFFFFFFF, 0, 0, 0.0);
  if (v27 < 0) {
    operator delete(*(void **)__p);
  }
  sub_8AC4C((uint64_t)&v38);
  BOOL v8 = (void **)v36;
  if (v36)
  {
    uint64_t v9 = v37;
    unint64_t v10 = v36;
    if (v37 != v36)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      unint64_t v10 = v36;
    }
    unint64_t v37 = v8;
    operator delete(v10);
  }
  if ((v34 & 0x80000000) == 0)
  {
    if ((v32 & 0x80000000) == 0) {
      goto LABEL_17;
    }
LABEL_51:
    operator delete(v31);
    if ((v30 & 0x80000000) == 0)
    {
LABEL_18:
      uint64_t v11 = v39;
      if (!v39) {
        goto LABEL_20;
      }
      goto LABEL_19;
    }
    goto LABEL_52;
  }
  operator delete(v33);
  if (v32 < 0) {
    goto LABEL_51;
  }
LABEL_17:
  if ((v30 & 0x80000000) == 0) {
    goto LABEL_18;
  }
LABEL_52:
  operator delete(v28);
  uint64_t v11 = v39;
  if (v39)
  {
LABEL_19:
    uint64_t v40 = v11;
    operator delete(v11);
  }
LABEL_20:
  uint64_t v12 = *(void *)(a2 + 7352);
  for (uint64_t i = *(void *)(a2 + 7360); v12 != i; v12 += 1120)
  {
    if (sub_605454(v12))
    {
      if (!*(unsigned char *)(v12 + 1112))
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_2439078;
      }
      uint64_t v14 = *(void **)(v12 + 1088);
      uint64_t v15 = *(void **)(v12 + 1096);
      while (v14 != v15)
      {
        std::operator+<char>();
        sub_DEC668((uint64_t *)&v42, v14, (uint64_t)&v28, 0xFFFFFFFF, 0, 0, 0.0);
        if (v30 < 0) {
          operator delete(v28);
        }
        v14 += 32;
      }
    }
  }
  sub_DEC8F0(&v42, (uint64_t)&v28);
  uint64_t v16 = (char *)v28;
  uint64_t v17 = v29;
  if (v28 != v29)
  {
    uint64_t v18 = (uint64_t **)(a3 + 16);
    do
    {
      long long v19 = (std::string *)sub_1884274(v18, dword_254EA30, 11, (uint64_t)&off_252CDD0, 0);
      sub_11B9D5C(v19, (uint64_t)v16);
      v16 += 48;
    }
    while (v16 != v17);
    uint64_t v16 = (char *)v28;
  }
  if (v16)
  {
    uint64_t v20 = (uint64_t)v29;
    uint64_t v21 = v16;
    if (v29 != v16)
    {
      do
        uint64_t v20 = sub_11B9574(v20 - 48);
      while ((char *)v20 != v16);
      uint64_t v21 = v28;
    }
    long double v29 = v16;
    operator delete(v21);
  }
  char v22 = v42;
  if (v42)
  {
    unsigned int v23 = v43;
    int v24 = v42;
    if (v43 == v42)
    {
LABEL_48:
      int v43 = v22;
      operator delete(v24);
      return;
    }
    while (1)
    {
      if (*(v23 - 25) < 0)
      {
        operator delete(*((void **)v23 - 6));
        if ((*(v23 - 49) & 0x80000000) == 0) {
          goto LABEL_43;
        }
LABEL_46:
        operator delete(*((void **)v23 - 9));
        v23 -= 80;
        if (v23 == v22)
        {
LABEL_47:
          int v24 = v42;
          goto LABEL_48;
        }
      }
      else
      {
        if (*(v23 - 49) < 0) {
          goto LABEL_46;
        }
LABEL_43:
        v23 -= 80;
        if (v23 == v22) {
          goto LABEL_47;
        }
      }
    }
  }
}

void sub_E43290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_28ED98((uint64_t)&a15);
  char v22 = *(void **)(v20 - 136);
  if (v22)
  {
    *(void *)(v20 - 128) = v22;
    operator delete(v22);
    sub_CBDA74((void **)(v20 - 112));
    _Unwind_Resume(a1);
  }
  sub_CBDA74((void **)(v20 - 112));
  _Unwind_Resume(a1);
}

void sub_E43348(uint64_t a1, void *a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 81))
  {
    char v34 = 0;
    int v35 = 0;
    uint64_t v36 = 0;
    uint64_t v5 = a2[1510];
    uint64_t v6 = a2[1511];
    while (v5 != v6)
    {
      if (sub_63BD14(*(_DWORD *)(v5 + 40)))
      {
        sub_63C4E0(*(_DWORD *)v5, (uint64_t)&__p);
        sub_DEC58C((uint64_t *)&v34, (uint64_t *)(v5 + 8), (uint64_t)&__p, 0xFFFFFFFF, *(_DWORD *)v5, *(_DWORD *)(v5 + 40), *(double *)(v5 + 32));
        if (SHIBYTE(v33) < 0) {
          operator delete(__p);
        }
      }
      v5 += 48;
    }
    sub_DECABC((char **)&v34, (uint64_t)&__p);
    uint64_t v7 = (char *)__p;
    BOOL v8 = (char *)v32;
    if (__p != v32)
    {
      do
      {
        uint64_t v9 = (std::string *)sub_1884274((uint64_t **)(a3 + 16), dword_254EA40, 11, (uint64_t)&off_252CE00, 0);
        sub_11BAB60(v9, (uint64_t)v7);
        v7 += 72;
      }
      while (v7 != v8);
      uint64_t v7 = (char *)__p;
    }
    if (v7)
    {
      uint64_t v10 = (uint64_t)v32;
      uint64_t v11 = v7;
      if (v32 != (void **)v7)
      {
        do
          uint64_t v10 = sub_11B9F24(v10 - 72);
        while ((char *)v10 != v7);
        uint64_t v11 = __p;
      }
      char v32 = (void **)v7;
      operator delete(v11);
    }
    long long __p = 0;
    char v32 = 0;
    uint64_t v33 = 0;
    uint64_t v12 = (uint64_t *)a2[1515];
    if (!v12)
    {
LABEL_17:
      sub_DECABC((char **)&__p, (uint64_t)&v28);
      long long v13 = (char *)v28;
      uint64_t v14 = v29;
      if (v28 != v29)
      {
        uint64_t v15 = (uint64_t **)(a3 + 16);
        do
        {
          uint64_t v16 = (std::string *)sub_1884274(v15, dword_254EA50, 11, (uint64_t)&off_252CE00, 0);
          sub_11BAB60(v16, (uint64_t)v13);
          v13 += 72;
        }
        while (v13 != v14);
        long long v13 = (char *)v28;
      }
      if (v13)
      {
        uint64_t v17 = (uint64_t)v29;
        uint64_t v18 = v13;
        if (v29 != v13)
        {
          do
            uint64_t v17 = sub_11B9F24(v17 - 72);
          while ((char *)v17 != v13);
          uint64_t v18 = v28;
        }
        long double v29 = v13;
        operator delete(v18);
      }
      long long v19 = (void **)__p;
      if (!__p)
      {
LABEL_43:
        unsigned int v23 = (void **)v34;
        if (!v34) {
          return;
        }
        int v24 = v35;
        int v25 = v34;
        if (v35 == v34)
        {
LABEL_53:
          int v35 = v23;
          operator delete(v25);
          return;
        }
        while (1)
        {
          if (*((char *)v24 - 25) < 0)
          {
            operator delete(*(v24 - 6));
            if (*((char *)v24 - 49) < 0) {
LABEL_51:
            }
              operator delete(*(v24 - 9));
          }
          else if (*((char *)v24 - 49) < 0)
          {
            goto LABEL_51;
          }
          v24 -= 10;
          if (v24 == v23)
          {
            int v25 = v34;
            goto LABEL_53;
          }
        }
      }
      uint64_t v20 = v32;
      uint64_t v21 = __p;
      if (v32 == __p)
      {
LABEL_42:
        char v32 = v19;
        operator delete(v21);
        goto LABEL_43;
      }
      while (1)
      {
        if (*((char *)v20 - 25) < 0)
        {
          operator delete(*(v20 - 6));
          if (*((char *)v20 - 49) < 0) {
LABEL_40:
          }
            operator delete(*(v20 - 9));
        }
        else if (*((char *)v20 - 49) < 0)
        {
          goto LABEL_40;
        }
        v20 -= 10;
        if (v20 == v19)
        {
          uint64_t v21 = __p;
          goto LABEL_42;
        }
      }
    }
    while (1)
    {
      uint64_t v28 = 0;
      long double v29 = 0;
      uint64_t v30 = 0;
      sub_63C4E0(*((_DWORD *)v12 + 4), (uint64_t)v26);
      sub_DEC58C((uint64_t *)&v34, (uint64_t *)&v28, (uint64_t)v26, 0xFFFFFFFF, *((_DWORD *)v12 + 4), *((_DWORD *)v12 + 16), *((double *)v12 + 7));
      if ((v27 & 0x80000000) == 0) {
        break;
      }
      operator delete(v26[0]);
      char v22 = (char *)v28;
      if (v28) {
        goto LABEL_34;
      }
LABEL_29:
      uint64_t v12 = (uint64_t *)*v12;
      if (!v12) {
        goto LABEL_17;
      }
    }
    char v22 = (char *)v28;
    if (!v28) {
      goto LABEL_29;
    }
LABEL_34:
    long double v29 = v22;
    operator delete(v22);
    goto LABEL_29;
  }
}

void sub_E43664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24)
{
}

void sub_E43720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_E4373C((void **)va);
  JUMPOUT(0xE4372CLL);
}

void **sub_E4373C(void **a1)
{
  char v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_11B9F24(v3 - 72);
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_E43798(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  int v5 = a2[220];
  if (v5 < 0) {
    char v6 = -5;
  }
  else {
    char v6 = 5;
  }
  *(_DWORD *)(a3 + 40) |= 0x1000u;
  *(_DWORD *)(a3 + 264) = v5 / 10
                        + (((103 * (char)(v6 + v5 % 10)) >> 15) & 1)
                        + ((103 * (char)(v6 + v5 % 10)) >> 10);
  int v7 = a2[221];
  if (v7 != 0x7FFFFFFF)
  {
    if (v7 < 0) {
      char v8 = -5;
    }
    else {
      char v8 = 5;
    }
    sub_1883378(a3 + 16, qword_254EA98, 13, v7 / 10 + (((103 * (char)(v8 + v7 % 10)) >> 15) & 1) + ((103 * (char)(v8 + v7 % 10)) >> 10), 0);
  }
  int v9 = a2[222];
  if (v9 != 0x7FFFFFFF)
  {
    int v10 = v9 / 10;
    int v11 = v9 % 10;
    if (v9 < 0) {
      char v12 = -5;
    }
    else {
      char v12 = 5;
    }
    uint64_t v13 = qword_254EAA0;
    sub_1883378(a3 + 16, v13, 13, v10 + (((103 * (char)(v12 + v11)) >> 15) & 1) + ((103 * (char)(v12 + v11)) >> 10), 0);
  }
}

void sub_E43914(uint64_t a1@<X0>, void *a2@<X1>, unsigned int a3@<W2>, void *a4@<X3>, unsigned int *a5@<X4>, void **a6@<X8>)
{
  char v6 = a6;
  uint64_t v95 = 0;
  a6[1] = 0;
  a6[2] = 0;
  *a6 = 0;
  if (a3)
  {
    int v7 = a5;
    char v8 = a4;
    unint64_t v9 = *a5;
    if (a4[13] >= v9)
    {
      uint64_t v85 = 0;
      do
      {
        if (sub_46C760(a2) <= v9) {
          break;
        }
        uint64_t v95 = 0;
        sub_E441B0(a1, a2, a3, *v7, (_DWORD *)&v95 + 1, (unsigned int *)&v95, &__p);
        int v10 = v94;
        if (v94 == __p) {
          goto LABEL_87;
        }
        uint64_t v11 = 0;
        unint64_t v89 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)v94 - (unsigned char *)__p) >> 2);
        do
        {
          while (1)
          {
            uint64_t v13 = *v7;
            BOOL v15 = v8[10] == v13 && v11 == HIDWORD(v95);
            if (v11) {
              BOOL v16 = 0;
            }
            else {
              BOOL v16 = v8[7] == v13;
            }
            char v17 = v16;
            if (v11)
            {
              char v18 = 0;
              goto LABEL_61;
            }
            long long v19 = (int **)sub_46C8EC(a2, *v7);
            uint64_t v20 = (char **)v19;
            uint64_t v21 = (char *)*v19;
            char v22 = (unsigned __int16 *)((char *)*v19 - **v19);
            if (*((unsigned char *)v19 + 38))
            {
              BOOL v23 = v15;
              if (v22[3])
              {
                unint64_t v24 = __ROR8__(*(void *)&v21[v22[3]], 32);
                unint64_t v25 = HIDWORD(v24);
              }
              else
              {
                char v27 = v17;
                unsigned int v28 = *((_DWORD *)v19 + 8);
                unint64_t v29 = *(unsigned int *)&v21[v22[60]];
                unsigned int v30 = sub_511FC(v28);
                unsigned int v31 = v28 & ~(-1 << (v30 & 0xFE));
                int v32 = sub_51938(v31);
                int v33 = sub_51938(v31 >> 1);
                int v34 = 1 << (v30 >> 1);
                int v35 = v32 + (char)v29;
                int v36 = v33 + ((__int16)v29 >> 8);
                unsigned int v37 = (int)((((((v35 & ~(v35 >> 31)) - v35 + (v35 >> 31)) >> (v30 >> 1))
                            + (v35 >> 31)) << (v30 >> 1))
                          + v35)
                    % v34;
                unsigned int v38 = (int)((((((v36 & ~(v36 >> 31)) - v36 + (v36 >> 31)) >> (v30 >> 1))
                            + (v36 >> 31)) << (v30 >> 1))
                          + v36)
                    % v34;
                int v39 = -1 << (v30 >> 1);
                unsigned int v40 = ~v39 < v37 ? ~v39 : v37;
                unsigned int v41 = ~v39 < v38 ? ~v39 : v38;
                sub_518C8(v40, v41);
                unint64_t v24 = v29 >> 16;
                LODWORD(v25) = v42 | (1 << (v30 & 0xFE));
                char v17 = v27;
              }
            }
            else
            {
              unsigned int v26 = *v22;
              if (v26 < 5) {
                goto LABEL_39;
              }
              if (v22[2])
              {
                BOOL v23 = v15;
                unint64_t v24 = __ROR8__(*(void *)&v21[v22[2]], 32);
                unint64_t v25 = HIDWORD(v24);
                goto LABEL_41;
              }
              if (v26 >= 0x77 && (uint64_t v43 = v22[59]) != 0)
              {
                BOOL v23 = v15;
                unint64_t v24 = *(unsigned __int16 *)&v21[v43];
              }
              else
              {
LABEL_39:
                BOOL v23 = v15;
                unint64_t v24 = 0;
              }
              LODWORD(v25) = *((_DWORD *)v19 + 8);
            }
LABEL_41:
            uint64_t v44 = *(void *)(a1 + 16);
            sub_2D5904(v44, (unsigned int *)(v25 | (v24 << 32)), 0, (char **)(v44 + 7800));
            unint64_t v90 = 0;
            double v91 = 0;
            uint64_t v92 = 0;
            uint64_t v45 = *(char **)(v44 + 7808);
            unsigned int v46 = *(char **)(v44 + 7800);
            uint64_t v47 = v45 - v46;
            if (v45 != v46)
            {
              if (v47 < 0) {
                sub_2E00();
              }
              uint64_t v48 = (char *)operator new(v45 - v46);
              unint64_t v90 = v48;
              double v91 = v48;
              uint64_t v92 = &v48[8 * (v47 >> 3)];
              do
              {
                uint64_t v96 = *(void *)v46 & 0xFFFFFFFFFFFFLL;
                uint64_t v48 = sub_2AA8EC((unint64_t *)&v90, v48, &v96) + 8;
                v46 += 8;
              }
              while (v46 != v45);
            }
            uint64_t v49 = *v20;
            uint64_t v50 = &(*v20)[-*(int *)*v20];
            unsigned int v51 = *(unsigned __int16 *)v50;
            if (v51 < 9)
            {
              uint64_t v52 = 0;
              char v8 = a4;
              BOOL v15 = v23;
            }
            else
            {
              uint64_t v52 = *((unsigned __int16 *)v50 + 4);
              char v8 = a4;
              BOOL v15 = v23;
              if (*((_WORD *)v50 + 4)) {
                uint64_t v52 = *(unsigned int *)&v49[v52];
              }
            }
            uint64_t v53 = 0;
            uint64_t v54 = v52 + v85;
            BOOL v55 = v54 <= 1600000;
            BOOL v56 = v54 > 1600000;
            if (v55) {
              uint64_t v57 = v85;
            }
            else {
              uint64_t v57 = 0;
            }
            char v58 = v91 - v90 != 16 || v56;
            if (v51 > 8)
            {
              uint64_t v59 = *((unsigned __int16 *)v50 + 4);
              if (!v59)
              {
                uint64_t v53 = 0;
                if (!v90) {
                  goto LABEL_60;
                }
LABEL_59:
                double v91 = v90;
                operator delete(v90);
                goto LABEL_60;
              }
              uint64_t v53 = *(unsigned int *)&v49[v59];
            }
            if (v90) {
              goto LABEL_59;
            }
LABEL_60:
            char v18 = v58 | v17;
            uint64_t v85 = v53 + v57;
            int v7 = a5;
            uint64_t v13 = *a5;
LABEL_61:
            BOOL v60 = v11 == v95 && v8[13] == v13;
            BOOL v61 = v60;
            unint64_t v62 = (char *)__p + 12 * v11;
            unint64_t v64 = v6[1];
            unint64_t v63 = v6[2];
            if (v64 >= (_DWORD *)v63) {
              break;
            }
            int v12 = *((_DWORD *)v62 + 2);
            *(void *)unint64_t v64 = *(void *)v62;
            v64[2] = v12;
            v64[3] = v13;
            *((unsigned char *)v64 + 16) = v18;
            *((unsigned char *)v64 + 17) = v15;
            *((unsigned char *)v64 + 18) = v61;
            *((unsigned char *)v64 + 19) = v17;
            *((unsigned char *)v64 + 20) = 0;
            v6[1] = v64 + 6;
            if (++v11 == v89) {
              goto LABEL_86;
            }
          }
          uint64_t v88 = v11;
          uint64_t v65 = v6;
          BOOL v66 = v15;
          uint64_t v67 = *v65;
          unint64_t v68 = 0xAAAAAAAAAAAAAAABLL * (((char *)v64 - (unsigned char *)*v65) >> 3);
          unint64_t v69 = v68 + 1;
          if (v68 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_2E00();
          }
          unint64_t v70 = 0xAAAAAAAAAAAAAAABLL * ((v63 - v67) >> 3);
          if (2 * v70 > v69) {
            unint64_t v69 = 2 * v70;
          }
          if (v70 >= 0x555555555555555) {
            unint64_t v71 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v71 = v69;
          }
          if (v71 > 0xAAAAAAAAAAAAAAALL) {
            sub_188D718();
          }
          char v72 = v18;
          uint64_t v73 = (char *)operator new(24 * v71);
          int v74 = *((_DWORD *)v62 + 2);
          uint64_t v75 = &v73[24 * v68];
          *(void *)uint64_t v75 = *(void *)v62;
          *((_DWORD *)v75 + 2) = v74;
          *((_DWORD *)v75 + 3) = v13;
          v75[16] = v72;
          v75[17] = v66;
          v75[18] = v61;
          v75[19] = v17;
          v75[20] = 0;
          if (v64 == (_DWORD *)v67)
          {
            int v78 = &v73[24 * v68];
            int v7 = a5;
            char v6 = a6;
          }
          else
          {
            unint64_t v76 = &v73[24 * v68];
            int v7 = a5;
            char v6 = a6;
            do
            {
              long long v77 = *(_OWORD *)(v64 - 6);
              int v78 = v76 - 24;
              *(void *)(v76 - 11) = *(void *)((char *)v64 - 11);
              *(_OWORD *)(v76 - 24) = v77;
              v64 -= 6;
              v76 -= 24;
            }
            while (v64 != (_DWORD *)v67);
          }
          uint64_t v79 = v75 + 24;
          *char v6 = v78;
          v6[1] = v75 + 24;
          v6[2] = &v73[24 * v71];
          if (v67) {
            operator delete(v67);
          }
          char v8 = a4;
          v6[1] = v79;
          uint64_t v11 = v88 + 1;
        }
        while (v88 + 1 != v89);
LABEL_86:
        int v10 = __p;
LABEL_87:
        unsigned int v80 = *v7 + 1;
        unsigned int *v7 = v80;
        if (v10)
        {
          uint64_t v94 = v10;
          operator delete(v10);
          unsigned int v80 = *v7;
        }
        unint64_t v9 = v80;
      }
      while (v8[13] >= (unint64_t)v80);
    }
  }
  sub_E44540(*(double *)(a1 + 32), a1, v6, *(_DWORD *)(*(void *)a1 + 160) > 3u);
}

void sub_E43EFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  unint64_t v25 = *(void **)v23;
  if (!*(void *)v23) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v23 + 8) = v25;
  operator delete(v25);
  _Unwind_Resume(exception_object);
}

void sub_E43FA0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  *(_DWORD *)(a4 + 16) |= 1u;
  uint64_t v7 = *(void *)(a4 + 112);
  if (!v7)
  {
    uint64_t v10 = *(void *)(a4 + 8);
    uint64_t v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
    if (v10) {
      uint64_t v11 = (void *)*v11;
    }
    sub_13D6A1C((uint64_t)v11);
    *(void *)(a4 + 112) = v12;
    sub_5F4D30((const std::string **)a2, v12);
    uint64_t v8 = *(void *)(a2 + 168);
    uint64_t v9 = *(void *)(a2 + 176);
    if (v8 == v9) {
      goto LABEL_29;
    }
    while (1)
    {
LABEL_11:
      int v15 = *(_DWORD *)(v8 + 768);
      if (!v15)
      {
        uint64_t v20 = sub_5258EC(a3, v8);
        if (!v20) {
          sub_5AE8("unordered_map::at: key not found");
        }
        int v21 = *((_DWORD *)v20 + 10);
        uint64_t v22 = *(unsigned int *)(a4 + 24);
        if (v22 == *(_DWORD *)(a4 + 28))
        {
          int v23 = v22 + 1;
          sub_188C80C((unsigned int *)(a4 + 24), v22 + 1);
          *(_DWORD *)(*(void *)(a4 + 32) + 4 * v22) = v21;
        }
        else
        {
          *(_DWORD *)(*(void *)(a4 + 32) + 4 * v22) = v21;
          int v23 = v22 + 1;
        }
        *(_DWORD *)(a4 + 24) = v23;
        goto LABEL_10;
      }
      if (v15 == 1) {
        break;
      }
LABEL_10:
      v8 += 800;
      if (v8 == v9) {
        goto LABEL_29;
      }
    }
    BOOL v16 = *(_DWORD **)(a4 + 56);
    if (v16 && (uint64_t v17 = *(int *)(a4 + 48), (int)v17 < *v16))
    {
      *(_DWORD *)(a4 + 48) = v17 + 1;
      uint64_t v18 = *(void *)&v16[2 * v17 + 2];
      *(_DWORD *)(v18 + 16) |= 1u;
      uint64_t v19 = *(void *)(v18 + 24);
      if (!v19) {
        goto LABEL_21;
      }
    }
    else
    {
      sub_13D87A0(*(void *)(a4 + 40));
      uint64_t v18 = sub_188CDC8(a4 + 40, v24);
      *(_DWORD *)(v18 + 16) |= 1u;
      uint64_t v19 = *(void *)(v18 + 24);
      if (!v19)
      {
LABEL_21:
        uint64_t v25 = *(void *)(v18 + 8);
        unsigned int v26 = (void *)(v25 & 0xFFFFFFFFFFFFFFFCLL);
        if (v25) {
          unsigned int v26 = (void *)*v26;
        }
        sub_13D6A1C((uint64_t)v26);
        uint64_t v19 = v27;
        *(void *)(v18 + 24) = v27;
      }
    }
    sub_5F4D30((const std::string **)v8, v19);
    *(_DWORD *)(v18 + 16) |= 2u;
    uint64_t v14 = *(void *)(v18 + 32);
    if (!v14)
    {
      uint64_t v28 = *(void *)(v18 + 8);
      unint64_t v29 = (void *)(v28 & 0xFFFFFFFFFFFFFFFCLL);
      if (v28) {
        unint64_t v29 = (void *)*v29;
      }
      sub_13D6A1C((uint64_t)v29);
      uint64_t v14 = v13;
      *(void *)(v18 + 32) = v13;
    }
    sub_5F4D30((const std::string **)(v8 + 160), v14);
    goto LABEL_10;
  }
  sub_5F4D30((const std::string **)a2, v7);
  uint64_t v8 = *(void *)(a2 + 168);
  uint64_t v9 = *(void *)(a2 + 176);
  if (v8 != v9) {
    goto LABEL_11;
  }
LABEL_29:
  char v30 = *(unsigned char *)(a2 + 160);
  *(_DWORD *)(a4 + 16) |= 8u;
  *(unsigned char *)(a4 + 136) = v30;
}

void sub_E441B0(uint64_t a1@<X0>, void *a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, _DWORD *a5@<X4>, unsigned int *a6@<X5>, void *a7@<X8>)
{
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = a4;
  uint64_t v15 = sub_46C8EC(a2, a4);
  sub_2954EC(v13, *(void *)(v15 + 32), (uint64_t)&v36);
  sub_2E4B5C((uint64_t)&v36, v39);
  if (__p)
  {
    unsigned int v38 = __p;
    operator delete(__p);
  }
  if (sub_46C760(a2) - 1 == v14)
  {
    double v16 = 0.0;
    if (!a4) {
      double v16 = (double)(1000000000 - sub_46CABC((uint64_t)a2));
    }
    unsigned int v17 = sub_46CAC4((uint64_t)a2);
    sub_31854((uint64_t *)v39, 0, a7, v16 / 1000000000.0, (double)v17 / 1000000000.0);
    if (v39[0])
    {
      v39[1] = v39[0];
      operator delete(v39[0]);
    }
  }
  else
  {
    if (!a4)
    {
      int v18 = sub_46CABC((uint64_t)a2);
      sub_32F08((uint64_t *)v39, 1, 0, &v36, 1.0);
      sub_32F08((uint64_t *)&v36, 0, 0, &v34, fmin((double)(1000000000 - v18) / 1000000000.0, 1.0));
      if (v36)
      {
        long long __p = v36;
        operator delete(v36);
      }
      if (v39[0])
      {
        v39[1] = v39[0];
        operator delete(v39[0]);
      }
      *(_OWORD *)int v39 = v34;
      uint64_t v40 = v35;
    }
    uint64_t v19 = a2[133];
    if (*(void *)(v19 + 2400 * a3 + 80) == v14)
    {
      uint64_t v20 = *(void *)(v19 + 2400 * a3 + 88);
      uint64_t v21 = v20 / 100;
      __int16 v22 = v20 % 100;
      if (v20 < 0) {
        __int16 v23 = -50;
      }
      else {
        __int16 v23 = 50;
      }
      *a5 = sub_477F48((uint64_t)v39, (double)(v21+ (int)(((5243 * (__int16)(v23 + v22)) >> 19) + ((5243 * (__int16)(v23 + v22)) >> 31))), 0.1);
    }
    if (*(void *)(v19 + 2400 * a3 + 104) == v14)
    {
      uint64_t v24 = *(void *)(v19 + 2400 * a3 + 112);
      if (v24 == 0x7FFFFFFFFFFFFFFFLL
        || ((uint64_t v25 = v24 / 100, v26 = v24 % 100, v24 < 0) ? (v27 = -50) : (v27 = 50),
            uint64_t v28 = v25
                + (int)(((5243 * (__int16)(v27 + v26)) >> 19) + ((5243 * (__int16)(v27 + v26)) >> 31)),
            v28 < 1))
      {
        unsigned int v29 = 0;
        *a6 = 0;
      }
      else
      {
        unsigned int v29 = sub_477F48((uint64_t)v39, (double)v28, 0.1);
        *a6 = v29;
      }
    }
    else
    {
      unsigned int v29 = *a6;
    }
    char v30 = (char *)v39[1];
    unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * (((char *)v39[1] - (char *)v39[0]) >> 2) - 1;
    int v33 = v31 > *a5 && v31 > v29;
    *a7 = v39[0];
    a7[1] = &v30[12 * (v33 << 31 >> 31)];
    a7[2] = v40;
  }
}

void sub_E444E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_E44540(double a1, uint64_t a2, void *a3, unsigned int a4)
{
  uint64_t v40 = 0;
  unsigned int v41 = 0;
  int v42 = 0;
  uint64_t v4 = a3[1] - *a3;
  if (v4)
  {
    unint64_t v7 = 0;
    unint64_t v8 = 0;
    unint64_t v33 = a4;
    unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 3);
    while (1)
    {
      while (!*(unsigned char *)(sub_E1ACF8(a3, v8) + 16)
           && !*(unsigned char *)(sub_E1ACF8(a3, v8) + 17)
           && !*(unsigned char *)(sub_E1ACF8(a3, v8) + 18)
           && v8 != -1 - 0x5555555555555555 * ((uint64_t)(a3[1] - *a3) >> 3))
      {
        if (++v8 == v34)
        {
LABEL_43:
          if (v40)
          {
            unsigned int v41 = (char *)v40;
            operator delete(v40);
          }
          return;
        }
      }
      uint64_t v10 = v40;
      unsigned int v41 = (char *)v40;
      unint64_t v11 = v8 + 1;
      unint64_t v12 = v8 + 1 - v7;
      if (0xAAAAAAAAAAAAAAABLL * ((v42 - (unsigned char *)v40) >> 2) < v12)
      {
        if (v12 > 0x1555555555555555) {
          sub_2E00();
        }
        uint64_t v40 = operator new(12 * v12);
        unsigned int v41 = (char *)v40;
        int v42 = (char *)v40 + 12 * v12;
        if (v10) {
          operator delete(v10);
        }
      }
      unint64_t v35 = v8 + 1;
      unint64_t v36 = v8;
      if (v7 <= v11) {
        unint64_t v13 = v8 + 1;
      }
      else {
        unint64_t v13 = v7;
      }
      unint64_t v14 = v7;
      if (v11 > v7)
      {
        do
        {
          uint64_t v20 = sub_E1ACF8(a3, v14);
          uint64_t v21 = v20;
          __int16 v22 = v41;
          if (v41 < v42)
          {
            uint64_t v18 = *(void *)v20;
            *((_DWORD *)v41 + 2) = *(_DWORD *)(v20 + 8);
            *(void *)__int16 v22 = v18;
            uint64_t v19 = v22 + 12;
          }
          else
          {
            __int16 v23 = (char *)v40;
            unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((v41 - (unsigned char *)v40) >> 2);
            unint64_t v25 = v24 + 1;
            if (v24 + 1 > 0x1555555555555555) {
              sub_2E00();
            }
            if (0x5555555555555556 * ((v42 - (unsigned char *)v40) >> 2) > v25) {
              unint64_t v25 = 0x5555555555555556 * ((v42 - (unsigned char *)v40) >> 2);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v42 - (unsigned char *)v40) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v26 = 0x1555555555555555;
            }
            else {
              unint64_t v26 = v25;
            }
            if (v26)
            {
              if (v26 > 0x1555555555555555) {
                sub_188D718();
              }
              __int16 v27 = (char *)operator new(12 * v26);
            }
            else
            {
              __int16 v27 = 0;
            }
            uint64_t v28 = *(void *)v21;
            unsigned int v29 = &v27[12 * v24];
            *((_DWORD *)v29 + 2) = *(_DWORD *)(v21 + 8);
            *(void *)unsigned int v29 = v28;
            char v30 = v29;
            if (v22 != v23)
            {
              do
              {
                uint64_t v31 = *(void *)(v22 - 12);
                v22 -= 12;
                int v32 = *((_DWORD *)v22 + 2);
                *(void *)(v30 - 12) = v31;
                v30 -= 12;
                *((_DWORD *)v30 + 2) = v32;
              }
              while (v22 != v23);
              __int16 v22 = (char *)v40;
            }
            uint64_t v19 = v29 + 12;
            uint64_t v40 = v30;
            unsigned int v41 = v29 + 12;
            int v42 = &v27[12 * v26];
            if (v22) {
              operator delete(v22);
            }
          }
          unsigned int v41 = v19;
          ++v14;
        }
        while (v14 != v13);
      }
      memset(v37, 0, sizeof(v37));
      sub_426D8((uint64_t *)&v40, v33, 0, 1, v37, (uint64_t)&__p, a1);
      if (v37[0]) {
        operator delete(v37[0]);
      }
      uint64_t v15 = v39;
      if (v39) {
        break;
      }
      uint64_t v9 = __p;
      if (__p) {
        goto LABEL_4;
      }
LABEL_5:
      unint64_t v7 = v36;
      unint64_t v8 = v35;
      if (v35 == v34) {
        goto LABEL_43;
      }
    }
    unint64_t v16 = 0;
    do
    {
      uint64_t v17 = sub_E1ACF8(a3, v7 + v16);
      uint64_t v9 = __p;
      *(unsigned char *)(v17 + 20) = (*(void *)((char *)__p + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v16) & 1;
      ++v16;
    }
    while (v15 != v16);
LABEL_4:
    operator delete(v9);
    goto LABEL_5;
  }
}

void sub_E448A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_E448EC(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t v7 = 32;
  if (a3) {
    uint64_t v7 = 40;
  }
  uint64_t v8 = 64;
  if (a3) {
    uint64_t v8 = 72;
  }
  if (!a4 || (double v9 = *(double *)(a1 + v8), v9 == *(double *)(a1 + v7)))
  {
    uint64_t v44 = 0;
    long long v50 = 0u;
    uint64_t v40 = 0x4039000000000000;
    uint64_t v41 = 5000;
    long long v42 = xmmword_20E7C10;
    long long v43 = xmmword_20E7C20;
    uint64_t v45 = 20000000;
    uint64_t v46 = 0x3FF199999999999ALL;
    uint64_t v47 = 0x3E800002710;
    uint64_t v48 = 0xA00002710;
    long long v49 = xmmword_20E7C00;
    *(void *)&long long v50 = 0x3FE6147AE147AE14;
    BYTE9(v50) = 0;
    sub_110BFAC((uint64_t)&v40, a2, (uint64_t)v51);
    sub_188B428((uint64_t)v51, (uint64_t)&v55);
    if (*(char *)(a5 + 23) < 0) {
      operator delete(*(void **)a5);
    }
    *(_OWORD *)a5 = v55;
    *(void *)(a5 + 16) = v56;
    HIBYTE(v56) = 0;
    LOBYTE(v55) = 0;
    sub_1116458(v51);
  }
  else
  {
    long long v55 = 0uLL;
    uint64_t v56 = 0;
    unint64_t v10 = *(int *)(a2 + 32);
    double v35 = v9;
    if (v10)
    {
      sub_3907C((void **)&v55, v10);
      unsigned int v37 = 0;
      uint64_t v38 = 0;
      unint64_t v39 = 0;
      uint64_t v11 = *((void *)&v55 + 1) - v55;
      if (*((void *)&v55 + 1) != (void)v55)
      {
        if (v11 < 0) {
          sub_2E00();
        }
        unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (v11 >> 2);
        unsigned int v37 = operator new(8 * (((v12 - 1) >> 6) + 1));
        uint64_t v38 = 0;
        unint64_t v39 = ((v12 - 1) >> 6) + 1;
        sub_43284(&v37, v12, 0);
        if (*((void *)&v55 + 1) != (void)v55)
        {
          uint64_t v13 = 0;
          uint64_t v14 = 0;
          unint64_t v15 = 0;
          uint64_t v16 = (*((void *)&v55 + 1) - (void)v55) / 12;
          do
          {
            uint64_t v18 = *(void *)(*(void *)(a2 + 40) + (v13 >> 29) + 8);
            if (*(_DWORD *)(v18 + 84) == 1) {
              *(void *)((char *)v37 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
            }
            uint64_t v19 = *(uint64_t (****)())(v18 + 32);
            if (!v19) {
              uint64_t v19 = &off_24F8110;
            }
            int v20 = *(_DWORD *)(v18 + 56);
            double v21 = (double)*((int *)v19 + 7) / 10000000.0;
            uint64_t v22 = -1;
            if (v21 <= 180.0)
            {
              double v23 = (double)*((int *)v19 + 6) / 10000000.0;
              if (v23 >= -85.0511288 && v23 <= 85.0511288 && v21 >= -180.0)
              {
                double v24 = fmax(v23, -85.0511288);
                if (v24 >= 85.0511288) {
                  double v25 = 1.48442223;
                }
                else {
                  double v25 = v24 * 3.14159265 / 180.0;
                }
                long double v26 = sin(v25);
                LODWORD(v27) = ((log((v26 + 1.0) / (1.0 - v26)) / -12.5663706 + 0.5) * 4294967300.0);
                if (v27 >= 0xFFFFFFFE) {
                  uint64_t v27 = 4294967294;
                }
                else {
                  uint64_t v27 = v27;
                }
                uint64_t v22 = ((v21 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v27 << 32);
              }
            }
            uint64_t v17 = v55 + v14;
            *(void *)uint64_t v17 = v22;
            *(_DWORD *)(v17 + 8) = v20;
            ++v15;
            v14 += 12;
            v13 += 0x100000000;
          }
          while (v16 != v15);
        }
      }
    }
    else
    {
      unsigned int v37 = 0;
      uint64_t v38 = 0;
      unint64_t v39 = 0;
    }
    sub_40D78(&v55, 1, &v37, &__p, v35);
    sub_1115F80(v51, 0, 0);
    sub_188CC60((uint64_t)&v52, -1431655765 * ((*((void *)&v55 + 1) - (void)v55) >> 2));
    if (*((void *)&v55 + 1) != (void)v55)
    {
      uint64_t v28 = 0;
      unint64_t v29 = 0;
      uint64_t v30 = (*((void *)&v55 + 1) - (void)v55) / 12;
      do
      {
        if ((*(void *)((char *)__p + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v29))
        {
          if (v54 && (uint64_t v32 = v53, v53 < *v54))
          {
            ++v53;
            uint64_t v31 = *(std::string **)&v54[2 * v32 + 2];
          }
          else
          {
            sub_111704C(v52);
            uint64_t v31 = (std::string *)sub_188CDC8((uint64_t)&v52, v33);
          }
          sub_1115798(v31, *(void *)(*(void *)(a2 + 40) + (v28 >> 29) + 8));
        }
        ++v29;
        v28 += 0x100000000;
      }
      while (v30 != v29);
    }
    uint64_t v44 = 0;
    long long v50 = 0u;
    uint64_t v40 = 0x4039000000000000;
    uint64_t v41 = 5000;
    long long v42 = xmmword_20E7C10;
    long long v43 = xmmword_20E7C20;
    uint64_t v45 = 20000000;
    uint64_t v46 = 0x3FF199999999999ALL;
    uint64_t v47 = 0x3E800002710;
    uint64_t v48 = 0xA00002710;
    long long v49 = xmmword_20E7C00;
    *(void *)&long long v50 = 0x3FE6147AE147AE14;
    BYTE9(v50) = 0;
    sub_1109790((uint64_t)&v40, (uint64_t)v51);
    sub_1880F60((uint64_t)v51, (std::string *)a5);
    sub_1116458(v51);
    if (__p) {
      operator delete(__p);
    }
    if (v37) {
      operator delete(v37);
    }
    if ((void)v55)
    {
      *((void *)&v55 + 1) = v55;
      operator delete((void *)v55);
    }
  }
}

void sub_E44EBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  unsigned int v37 = *(void **)(v35 - 176);
  if (!v37) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v35 - 168) = v37;
  operator delete(v37);
  _Unwind_Resume(exception_object);
}

uint64_t sub_E44F64(uint64_t a1, void *a2)
{
  long long __p = operator new(0x20uLL);
  long long v19 = xmmword_20B9800;
  strcpy((char *)__p, "add_traffic_lights_to_response");
  BOOL v4 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)a1 = v4;
  long long __p = operator new(0x20uLL);
  long long v19 = xmmword_20B5EB0;
  strcpy((char *)__p, "add_stop_signs_to_response");
  BOOL v5 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 1) = v5;
  long long __p = operator new(0x20uLL);
  long long v19 = xmmword_20B8890;
  strcpy((char *)__p, "add_speed_cameras_to_response");
  BOOL v6 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 2) = v6;
  long long __p = operator new(0x30uLL);
  long long v19 = xmmword_20B9A80;
  strcpy((char *)__p, "centerline_geometry_simplification_tolerance_m");
  double v7 = sub_5C7E8(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  *(double *)(a1 + 8) = v7;
  long long __p = operator new(0x30uLL);
  long long v19 = xmmword_20E1380;
  strcpy((char *)__p, "flowline_geometry_simplification_tolerance_m");
  double v8 = sub_5C7E8(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  *(double *)(a1 + 16) = v8;
  long long __p = operator new(0x20uLL);
  long long v19 = xmmword_20B8E90;
  strcpy((char *)__p, "enable_analytics_simplification");
  BOOL v9 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 24) = v9;
  long long __p = operator new(0x30uLL);
  long long v19 = xmmword_20B9380;
  strcpy((char *)__p, "max_route_length_for_analytics_simplification_m");
  *(void *)(a1 + 32) = sub_5CDE0(a2, &__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x40uLL);
  long long v19 = xmmword_20B98C0;
  strcpy((char *)__p, "analytics_centerline_geometry_simplification_tolerance_m");
  double v10 = sub_5C7E8(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  *(double *)(a1 + 40) = v10;
  long long __p = operator new(0x38uLL);
  long long v19 = xmmword_20B8DF0;
  strcpy((char *)__p, "analytics_flowline_geometry_simplification_tolerance_m");
  double v11 = sub_5C7E8(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  *(double *)(a1 + 48) = v11;
  long long __p = operator new(0x20uLL);
  long long v19 = xmmword_20B9800;
  strcpy((char *)__p, "add_debug_geometry_to_response");
  BOOL v12 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 56) = v12;
  long long __p = operator new(0x30uLL);
  long long v19 = xmmword_20B93C0;
  strcpy((char *)__p, "add_debug_geometry_anomalies_to_response");
  BOOL v13 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 57) = v13;
  long long __p = operator new(0x30uLL);
  long long v19 = xmmword_20B93D0;
  strcpy((char *)__p, "add_debug_route_line_geometry_to_response");
  BOOL v14 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 58) = v14;
  long long __p = operator new(0x20uLL);
  long long v19 = xmmword_20B8870;
  strcpy((char *)__p, "round_mpr_traversal_times");
  BOOL v15 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 59) = v15;
  long long __p = operator new(0x20uLL);
  long long v19 = xmmword_20B8870;
  strcpy((char *)__p, "add_route_leg_name_ranges");
  BOOL v16 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 60) = v16;
  return a1;
}

void sub_E45480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_E454D0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a3;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = sub_3750CC(a2);
  uint64_t v6 = *(void *)(a1 + 8);
  char v29 = 15;
  uint64_t v27 = 0;
  strcpy((char *)v28, "ResponseBuilder");
  double v25 = 0;
  long double v26 = 0;
  double v7 = sub_374CDC(v6, (uint64_t)v28, (uint64_t *)&v25);
  sub_3CB370(v7, 0, a4, __p);
  sub_E4D3AC(a1 + 24, __p);
  double v8 = v31;
  if (v31)
  {
    do
    {
      BOOL v13 = *(char **)v8;
      sub_57AC8((uint64_t *)v8 + 5);
      if (v8[39] < 0) {
        operator delete(*((void **)v8 + 2));
      }
      operator delete(v8);
      double v8 = v13;
    }
    while (v13);
  }
  BOOL v9 = __p[0];
  __p[0] = 0;
  if (v9) {
    operator delete(v9);
  }
  double v10 = (void **)v25;
  if (v25)
  {
    double v11 = v26;
    BOOL v12 = v25;
    if (v26 != v25)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != v10);
      BOOL v12 = v25;
    }
    long double v26 = v10;
    operator delete(v12);
  }
  if (v29 < 0)
  {
    operator delete(v28[0]);
    double v14 = *(double *)(a1 + 32) * 100.0;
    if (v14 < 0.0) {
      goto LABEL_17;
    }
  }
  else
  {
    double v14 = *(double *)(a1 + 32) * 100.0;
    if (v14 < 0.0)
    {
LABEL_17:
      double v15 = v14;
      if (v14 <= -4.50359963e15) {
        goto LABEL_25;
      }
      uint64_t v16 = (uint64_t)(v14 + v14);
      if (v16 >= 1) {
        --v16;
      }
      goto LABEL_24;
    }
  }
  double v15 = v14;
  if (v14 >= 4.50359963e15) {
    goto LABEL_25;
  }
  uint64_t v16 = (uint64_t)(v14 + v14) + 1;
LABEL_24:
  double v15 = (double)(v16 >> 1);
LABEL_25:
  if (v15 >= 9.22337204e18)
  {
    uint64_t v18 = 0x7FFFFFFFFFFFFFFELL;
    goto LABEL_36;
  }
  if (v14 >= 0.0)
  {
    if (v14 < 4.50359963e15)
    {
      uint64_t v17 = (uint64_t)(v14 + v14) + 1;
LABEL_34:
      double v14 = (double)(v17 >> 1);
    }
  }
  else if (v14 > -4.50359963e15)
  {
    uint64_t v17 = (uint64_t)(v14 + v14);
    if (v17 >= 1) {
      --v17;
    }
    goto LABEL_34;
  }
  uint64_t v18 = (uint64_t)v14;
LABEL_36:
  double v19 = *(double *)(a1 + 40) * 100.0;
  if (v19 >= 0.0)
  {
    double v20 = *(double *)(a1 + 40) * 100.0;
    if (v19 >= 4.50359963e15) {
      goto LABEL_44;
    }
    uint64_t v21 = (uint64_t)(v19 + v19) + 1;
  }
  else
  {
    double v20 = *(double *)(a1 + 40) * 100.0;
    if (v19 <= -4.50359963e15) {
      goto LABEL_44;
    }
    uint64_t v21 = (uint64_t)(v19 + v19);
    if (v21 >= 1) {
      --v21;
    }
  }
  double v20 = (double)(v21 >> 1);
LABEL_44:
  if (v20 < 9.22337204e18)
  {
    if (v19 >= 0.0)
    {
      if (v19 < 4.50359963e15)
      {
        uint64_t v22 = (uint64_t)(v19 + v19) + 1;
LABEL_53:
        double v19 = (double)(v22 >> 1);
      }
    }
    else if (v19 > -4.50359963e15)
    {
      uint64_t v22 = (uint64_t)(v19 + v19);
      if (v22 >= 1) {
        --v22;
      }
      goto LABEL_53;
    }
    uint64_t v23 = (uint64_t)v19;
    goto LABEL_55;
  }
  uint64_t v23 = 0x7FFFFFFFFFFFFFFELL;
LABEL_55:
  sub_424178(a1 + 88, *(void *)(a1 + 8), v18, v23);
  return a1;
}

void sub_E457D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_E45810@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, int64x2_t *a3@<X2>, uint64_t a4@<X3>, char **a5@<X4>, uint64_t a6@<X8>)
{
  sub_162C594(a6, 0, 0);
  uint64_t v12 = a2[1];
  char v58 = a2;
  if (*a2 == v12)
  {
    uint64_t result = sub_723EC(1u);
    if (result)
    {
      sub_6BAC((uint64_t)&v61);
      sub_188FC78(&v61, (uint64_t)"No routes found", 15);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      if (v60 < 0) {
        operator delete(__p);
      }
      if (v66 < 0) {
        operator delete(v65);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      uint64_t result = std::ios::~ios();
    }
    *(_DWORD *)(a6 + 40) |= 0x100000u;
    int v41 = 20;
  }
  else
  {
    uint64_t v56 = a5;
    uint64_t v57 = a4;
    unint64_t v13 = 0;
    unint64_t v14 = 0xBAA6550FFBAA6551 * ((v12 - *a2) >> 3);
    do
    {
      uint64_t v15 = *a2;
      uint64_t v16 = *(_DWORD **)(a6 + 296);
      if (v16 && (uint64_t v17 = *(int *)(a6 + 288), (int)v17 < *v16))
      {
        *(_DWORD *)(a6 + 288) = v17 + 1;
        uint64_t v18 = *(void *)&v16[2 * v17 + 2];
      }
      else
      {
        uint64_t v19 = sub_13D8C74(*(void *)(a6 + 280));
        uint64_t v18 = sub_188CDC8(a6 + 280, v19);
      }
      double v20 = (uint64_t *)(v15 + 7560 * v13);
      int v21 = sub_6478E0((uint64_t)v20);
      int v22 = v21;
      uint64_t v23 = (char *)a3->i64[0];
      unint64_t v24 = a3->u64[1];
      if (a3->i64[0] != v24)
      {
        while (*(_DWORD *)v23 != v21)
        {
          v23 += 32;
          if (v23 == (char *)v24) {
            goto LABEL_12;
          }
        }
      }
      if (v23 == (char *)v24)
      {
LABEL_12:
        if (v24 >= a3[1].i64[0])
        {
          double v25 = sub_3A6738(a3);
        }
        else
        {
          *(_DWORD *)unint64_t v24 = -1;
          *(void *)(v24 + 16) = 0;
          *(void *)(v24 + 24) = 0;
          double v25 = (char *)(v24 + 32);
          *(void *)(v24 + 8) = 0;
        }
        a3->i64[1] = (uint64_t)v25;
        *((_DWORD *)v25 - 8) = v22;
        uint64_t v23 = v25 - 32;
      }
      sub_E45E78(a1, v20, v13++, v18, (uint64_t)v23);
    }
    while (v13 != v14);
    sub_E46438(a1, a6);
    sub_E465A8(a1, v57, a6);
    uint64_t v27 = *(void *)(v57 + 1088);
    for (uint64_t i = *(void *)(v57 + 1096); v27 != i; v27 += 1120)
    {
      char v29 = *(_DWORD **)(a6 + 136);
      if (v29 && (uint64_t v30 = *(int *)(a6 + 128), (int)v30 < *v29))
      {
        *(_DWORD *)(a6 + 128) = v30 + 1;
        uint64_t v31 = *(void *)&v29[2 * v30 + 2];
      }
      else
      {
        uint64_t v32 = sub_13D9608(*(void *)(a6 + 120));
        uint64_t v31 = sub_188CDC8(a6 + 120, v32);
      }
      sub_E1163C(v27, v31, 1, v26);
    }
    uint64_t v33 = sub_3777C0(*(void **)(a1 + 8));
    uint64_t v35 = *v58;
    uint64_t v34 = v58[1];
    if (*v58 == v34)
    {
LABEL_29:
      char v39 = 1;
    }
    else
    {
      uint64_t v36 = v33;
      while (1)
      {
        uint64_t v33 = nullsub_1(v35);
        uint64_t v37 = *(void *)v33;
        uint64_t v38 = *(void *)(v33 + 8);
        if (*(void *)v33 != v38) {
          break;
        }
LABEL_28:
        v35 += 7560;
        if (v35 == v34) {
          goto LABEL_29;
        }
      }
      while (1)
      {
        uint64_t v33 = sub_3D3910(v36, v37, *(unsigned __int8 *)(*(void *)a1 + 40));
        if (v33 != 2) {
          break;
        }
        v37 += 12328;
        if (v37 == v38) {
          goto LABEL_28;
        }
      }
      char v39 = 0;
    }
    *(_DWORD *)(a6 + 40) |= 0x1000000u;
    *(unsigned char *)(a6 + 549) = v39;
    uint64_t v43 = *v58;
    uint64_t v42 = v58[1];
    if (*v58 == v42)
    {
LABEL_43:
      char v46 = 0;
    }
    else
    {
      while (1)
      {
        uint64_t v33 = nullsub_1(v43);
        uint64_t v44 = *(void **)v33;
        uint64_t v45 = *(void **)(v33 + 8);
        if (*(void **)v33 != v45) {
          break;
        }
LABEL_42:
        v43 += 7560;
        if (v43 == v42) {
          goto LABEL_43;
        }
      }
      while (1)
      {
        sub_46C77C(v44, &v61);
        uint64_t v33 = sub_E548DC(v61, (unint64_t)v62, v63, v64, a1);
        if (v33) {
          break;
        }
        v44 += 1541;
        if (v44 == v45) {
          goto LABEL_42;
        }
      }
      char v46 = 1;
    }
    *(_DWORD *)(a6 + 40) |= 0x4000000u;
    *(unsigned char *)(a6 + 551) = v46;
    if (**(unsigned char **)a1) {
      uint64_t v33 = sub_E17A18(*(void *)(a1 + 16), (uint64_t)v58, a6);
    }
    sub_E1E7EC(v33, v58, v56, a6);
    *(_DWORD *)(a6 + 40) |= 0x20000u;
    uint64_t v47 = *(void *)(a6 + 512);
    if (!v47)
    {
      uint64_t v48 = *(void *)(a6 + 8);
      long long v49 = (void *)(v48 & 0xFFFFFFFFFFFFFFFCLL);
      if (v48) {
        long long v49 = (void *)*v49;
      }
      uint64_t v47 = sub_13DAE28((uint64_t)v49);
      *(void *)(a6 + 512) = v47;
    }
    *(_DWORD *)(v47 + 16) |= 1u;
    *(_DWORD *)(v47 + 24) = 0;
    uint64_t v50 = sub_1883FB0((void *)(a6 + 16), dword_254E9B0, 11, (uint64_t)&off_252C740, 0);
    unsigned int v51 = (long long *)(sub_6467E8((void *)*v58, 0) + 7400);
    *(_DWORD *)(v50 + 16) |= 1u;
    uint64_t v52 = *(void *)(v50 + 8);
    int v53 = (uint64_t *)(v52 & 0xFFFFFFFFFFFFFFFCLL);
    if (v52) {
      int v53 = (uint64_t *)*v53;
    }
    sub_1881DF4((std::string **)(v50 + 48), v51, v53);
    uint64_t v54 = (uint64_t *)sub_374CE4(*(void **)(a1 + 8));
    uint64_t result = sub_2ABCBC(*v54);
    int v41 = 0;
    int v55 = *(_DWORD *)(a6 + 40);
    *(unsigned char *)(a6 + 550) = result;
    *(_DWORD *)(a6 + 40) = v55 | 0x2100000;
  }
  *(_DWORD *)(a6 + 536) = v41;
  return result;
}

void sub_E45D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a18);
    sub_162D64C(v18);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a18);
  sub_162D64C(v18);
  _Unwind_Resume(a1);
}

void sub_E45DC4(_Unwind_Exception *a1)
{
  sub_162D64C(v1);
  _Unwind_Resume(a1);
}

void sub_E45DD8(_Unwind_Exception *a1)
{
  sub_162D64C(v1);
  _Unwind_Resume(a1);
}

void sub_E45DEC(_Unwind_Exception *a1)
{
  sub_162D64C(v1);
  _Unwind_Resume(a1);
}

void sub_E45E00(_Unwind_Exception *a1)
{
  sub_162D64C(v1);
  _Unwind_Resume(a1);
}

void sub_E45E14(_Unwind_Exception *a1)
{
  sub_162D64C(v1);
  _Unwind_Resume(a1);
}

void sub_E45E28(_Unwind_Exception *a1)
{
  sub_162D64C(v1);
  _Unwind_Resume(a1);
}

void sub_E45E3C(_Unwind_Exception *a1)
{
  sub_162D64C(v1);
  _Unwind_Resume(a1);
}

void sub_E45E50(_Unwind_Exception *a1)
{
  sub_162D64C(v1);
  _Unwind_Resume(a1);
}

void sub_E45E64(_Unwind_Exception *a1)
{
  sub_162D64C(v1);
  _Unwind_Resume(a1);
}

void sub_E45E78(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  int v9 = sub_64873C(a2);
  int v10 = sub_E124DC(v9);
  *(_DWORD *)(a4 + 40) |= 0x100u;
  *(_DWORD *)(a4 + 288) = v10;
  int v11 = sub_6478E0((uint64_t)a2);
  *(_DWORD *)(a4 + 40) |= 0x40u;
  *(_DWORD *)(a4 + 280) = v11;
  unsigned int v12 = sub_35E640();
  int v13 = sub_E124B8(v12);
  *(_DWORD *)(a4 + 40) |= 0x80u;
  *(_DWORD *)(a4 + 284) = v13;
  int v14 = sub_6478D8((uint64_t)a2);
  int v15 = sub_E150CC(v14);
  *(_DWORD *)(a4 + 40) |= 0x200u;
  *(_DWORD *)(a4 + 292) = v15;
  uint64_t v16 = (void *)(a5 + 8);
  unint64_t v17 = 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a5 + 16) - *(void *)(a5 + 8)) >> 3);
  if (v17 != sub_646938(a2))
  {
    unint64_t v18 = sub_646938(a2);
    uint64_t v19 = *(void *)(a5 + 8);
    double v20 = *(char ***)(a5 + 16);
    unint64_t v21 = 0x8E38E38E38E38E39 * (((uint64_t)v20 - v19) >> 3);
    if (v18 <= v21)
    {
      if (v18 < v21)
      {
        int v22 = (char **)(v19 + 72 * v18);
        while (v20 != v22)
        {
          v20 -= 9;
          sub_3A688C(a5 + 24, v20);
        }
        *(void *)(a5 + 16) = v22;
      }
    }
    else
    {
      sub_3A88A4((char **)(a5 + 8), v18 - v21);
    }
  }
  uint64_t v23 = (void *)nullsub_1(a2);
  uint64_t v24 = v23[1] - *v23;
  if (v24)
  {
    uint64_t v25 = 0;
    unint64_t v26 = 0;
    uint64_t v27 = v24 / 12328;
    do
    {
      uint64_t v30 = (__n128 *)sub_6467E8(a2, v26);
      int v31 = sub_6478D8((uint64_t)a2);
      uint64_t v32 = *(_DWORD **)(a4 + 64);
      if (v32 && (uint64_t v33 = *(int *)(a4 + 56), (int)v33 < *v32))
      {
        *(_DWORD *)(a4 + 56) = v33 + 1;
        uint64_t v29 = *(void *)&v32[2 * v33 + 2];
      }
      else
      {
        uint64_t v28 = sub_13D8E84(*(void *)(a4 + 48));
        uint64_t v29 = sub_188CDC8(a4 + 48, v28);
      }
      sub_E46710((uint64_t *)a1, v30, v31, a3, v26++, v29, *v16 + v25);
      v25 += 72;
    }
    while (v27 != v26);
  }
  sub_E3DC50(a1, a2, a4);
  uint64_t v34 = sub_646C34(a2);
  if (v34 < 0) {
    __int16 v35 = -50;
  }
  else {
    __int16 v35 = 50;
  }
  int v36 = *(_DWORD *)(a4 + 40);
  *(_DWORD *)(a4 + 296) = (int)v34 / 100
                        + ((5243 * (__int16)(v35 + (int)v34 % 100)) >> 19)
                        + ((5243 * (__int16)(v35 + (int)v34 % 100)) >> 31);
  *(_DWORD *)(a4 + 40) = v36 | 0x401;
  uint64_t v37 = *(_DWORD **)(a4 + 232);
  if (!v37)
  {
    uint64_t v38 = *(void *)(a4 + 8);
    char v39 = (void *)(v38 & 0xFFFFFFFFFFFFFFFCLL);
    if (v38) {
      char v39 = (void *)*v39;
    }
    uint64_t v37 = (_DWORD *)sub_13D84A8((uint64_t)v39);
    *(void *)(a4 + 232) = v37;
  }
  sub_E46C4C(a1, (unsigned int **)a2, 2 * *(unsigned __int8 *)(a1 + 83), v37);
  *(_DWORD *)(a4 + 40) |= 0x20u;
  uint64_t v40 = *(_DWORD **)(a4 + 272);
  if (!v40)
  {
    uint64_t v41 = *(void *)(a4 + 8);
    uint64_t v42 = (void *)(v41 & 0xFFFFFFFFFFFFFFFCLL);
    if (v41) {
      uint64_t v42 = (void *)*v42;
    }
    uint64_t v40 = (_DWORD *)sub_13D84A8((uint64_t)v42);
    *(void *)(a4 + 272) = v40;
  }
  sub_E46C4C(a1, (unsigned int **)a2, 4, v40);
  *(_DWORD *)(a4 + 40) |= 2u;
  uint64_t v43 = *(void *)(a4 + 240);
  if (!v43)
  {
    uint64_t v44 = *(void *)(a4 + 8);
    uint64_t v45 = (void *)(v44 & 0xFFFFFFFFFFFFFFFCLL);
    if (v44) {
      uint64_t v45 = (void *)*v45;
    }
    uint64_t v43 = sub_13D8528((uint64_t)v45);
    *(void *)(a4 + 240) = v43;
  }
  char v46 = (unsigned __int8 *)sub_6477D4((uint64_t)a2);
  BOOL v47 = (*v46 | *((_DWORD *)v46 + 13)) == 0;
  *(_DWORD *)(v43 + 16) |= 1u;
  *(unsigned char *)(v43 + 24) = v47;
  char v48 = *(unsigned char *)(sub_6477D4((uint64_t)a2) + 1) ^ 1;
  *(_DWORD *)(v43 + 16) |= 2u;
  *(unsigned char *)(v43 + 25) = v48;
  sub_E46F04((unsigned char *)a1, a2, a3, a4);
  *(_OWORD *)long long __p = 0u;
  *(_OWORD *)unint64_t v68 = 0u;
  int v69 = 1065353216;
  sub_E3E18C(a1, a2, __p, a4);
  sub_E3E4C4(a1, a2, a4);
  sub_E3E6A0(a1, (uint64_t)a2, a4);
  sub_E3E848(a1, (char **)a2, a4, (uint64_t)__p);
  sub_E470B8(a1, (uint64_t)a2, __p, a4);
  sub_E47198((int **)a1, a2, a4);
  long long v49 = (uint64_t *)sub_648268((uint64_t)a2);
  uint64_t v50 = *v49;
  uint64_t v51 = v49[1];
  if (*v49 != v51)
  {
    do
    {
      uint64_t v52 = *(_DWORD **)(a4 + 208);
      if (v52 && (uint64_t v53 = *(int *)(a4 + 200), (int)v53 < *v52))
      {
        *(_DWORD *)(a4 + 200) = v53 + 1;
        uint64_t v54 = *(void *)&v52[2 * v53 + 2];
      }
      else
      {
        sub_13D9384(*(void *)(a4 + 192));
        uint64_t v54 = sub_188CDC8(a4 + 192, v55);
      }
      sub_DF290C(v50, __p, *(void *)a1, v54);
      v50 += 1056;
    }
    while (v50 != v51);
  }
  uint64_t v56 = sub_649000((uint64_t)a2);
  uint64_t v57 = *(int **)v56;
  char v58 = *(int **)(v56 + 8);
  if (*(int **)v56 != v58)
  {
    uint64_t v59 = (_DWORD *)(a4 + 216);
    do
    {
      while (1)
      {
        BOOL v60 = sub_882E4(*v57);
        BOOL v61 = v60;
        uint64_t v62 = *(unsigned int *)(a4 + 216);
        if (v62 == *(_DWORD *)(a4 + 220)) {
          break;
        }
        *(_DWORD *)(*(void *)(a4 + 224) + 4 * v62) = v60;
        *uint64_t v59 = v62 + 1;
        if (++v57 == v58) {
          goto LABEL_41;
        }
      }
      sub_188C80C((unsigned int *)(a4 + 216), v62 + 1);
      *(_DWORD *)(*(void *)(a4 + 224) + 4 * v62) = v61;
      *uint64_t v59 = v62 + 1;
      ++v57;
    }
    while (v57 != v58);
  }
LABEL_41:
  unint64_t v63 = (void **)v68[0];
  if (v68[0])
  {
    do
    {
      uint64_t v65 = (void **)*v63;
      if (*((char *)v63 + 39) < 0) {
        operator delete(v63[2]);
      }
      operator delete(v63);
      unint64_t v63 = v65;
    }
    while (v65);
  }
  unint64_t v64 = __p[0];
  __p[0] = 0;
  if (v64) {
    operator delete(v64);
  }
}

void sub_E463E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_3A4C2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_E463FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_3A4C2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_E46410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_3A4C2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_E46424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_3A4C2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_E46438(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 288);
  if ((int)v2 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    int v6 = 0;
    while (1)
    {
      uint64_t v8 = *(void *)(*(void *)(a2 + 296) + 8 * v4 + 8);
      uint64_t v9 = *(unsigned int *)(v8 + 56);
      if ((int)v9 >= 1) {
        break;
      }
      uint64_t v7 = v5;
LABEL_4:
      ++v4;
      uint64_t v5 = v7;
      if (v4 == v2) {
        return;
      }
    }
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *(void *)(*(void *)(v8 + 64) + 8 * v10 + 8);
      *(_DWORD *)(v11 + 40) |= 4u;
      uint64_t v12 = *(void *)(v11 + 8);
      int v13 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
      if (v12) {
        int v13 = (uint64_t *)*v13;
      }
      char v18 = 4;
      LODWORD(__p) = v6;
      BYTE4(__p) = 0;
      sub_1881DF4((std::string **)(v11 + 672), &__p, v13);
      if (v18 < 0)
      {
        operator delete((void *)__p);
        uint64_t v14 = *(unsigned int *)(v11 + 64);
        if ((int)v14 >= 1)
        {
LABEL_15:
          int v15 = (uint64_t *)(*(void *)(v11 + 72) + 8);
          do
          {
            uint64_t v16 = *v15++;
            uint64_t v7 = (v5 + 1);
            *(_DWORD *)(v16 + 40) |= 0x400u;
            *(_DWORD *)(v16 + 256) = v5;
            LODWORD(v5) = v5 + 1;
            --v14;
          }
          while (v14);
          goto LABEL_8;
        }
      }
      else
      {
        uint64_t v14 = *(unsigned int *)(v11 + 64);
        if ((int)v14 >= 1) {
          goto LABEL_15;
        }
      }
      uint64_t v7 = v5;
LABEL_8:
      ++v6;
      ++v10;
      uint64_t v5 = v7;
      if (v10 == v9) {
        goto LABEL_4;
      }
    }
  }
}

void sub_E4658C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_E465A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 40) |= 0x10000u;
  uint64_t v4 = *(void *)(a3 + 504);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 1064);
    uint64_t i = *(void *)(a2 + 1072);
    if (v5 == i) {
      return;
    }
    goto LABEL_9;
  }
  uint64_t v8 = *(void *)(a3 + 8);
  uint64_t v9 = (void *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
  if (v8) {
    uint64_t v9 = (void *)*v9;
  }
  uint64_t v4 = sub_13D8978((uint64_t)v9);
  *(void *)(a3 + 504) = v4;
  uint64_t v5 = *(void *)(a2 + 1064);
  for (uint64_t i = *(void *)(a2 + 1072); v5 != i; v5 += 496)
  {
LABEL_9:
    *(_OWORD *)long long __p = 0u;
    *(_OWORD *)char v18 = 0u;
    int v19 = 1065353216;
    uint64_t v10 = *(_DWORD **)(v4 + 88);
    if (v10 && (uint64_t v11 = *(int *)(v4 + 80), (int)v11 < *v10))
    {
      *(_DWORD *)(v4 + 80) = v11 + 1;
      uint64_t v12 = *(void *)&v10[2 * v11 + 2];
    }
    else
    {
      uint64_t v13 = sub_13D88C0(*(void *)(v4 + 72));
      uint64_t v12 = sub_188CDC8(v4 + 72, v13);
    }
    sub_E11C8C(v5, __p, v12);
    uint64_t v14 = (void **)v18[0];
    if (v18[0])
    {
      do
      {
        uint64_t v16 = (void **)*v14;
        if (*((char *)v14 + 39) < 0) {
          operator delete(v14[2]);
        }
        operator delete(v14);
        uint64_t v14 = v16;
      }
      while (v16);
    }
    int v15 = __p[0];
    __p[0] = 0;
    if (v15) {
      operator delete(v15);
    }
  }
}

void sub_E466FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int32x2_t *sub_E46710(uint64_t *a1, __n128 *a2, int a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  int v13 = sub_E150CC(a3);
  *(_DWORD *)(a6 + 40) |= 0x1000000u;
  *(_DWORD *)(a6 + 836) = v13;
  int v14 = sub_E124B8(a2[66].n128_u8[0]);
  *(_DWORD *)(a6 + 40) |= 0x200000u;
  *(_DWORD *)(a6 + 824) = v14;
  int v15 = sub_E124DC(a2[66].n128_u8[1]);
  int v16 = *(_DWORD *)(a6 + 40);
  *(_DWORD *)(a6 + 840) = v15;
  uint64_t v17 = a2[31].n128_i64[1];
  int v18 = (int)v17 / 100;
  int v19 = (int)v17 % 100;
  if (v17 < 0) {
    __int16 v20 = -50;
  }
  else {
    __int16 v20 = 50;
  }
  *(_DWORD *)(a6 + 40) = v16 | 0x2400000;
  *(_DWORD *)(a6 + 828) = v18
                        + ((5243 * (__int16)(v20 + v19)) >> 19)
                        + ((5243 * (__int16)(v20 + v19)) >> 31);
  sub_E484B4((uint64_t)a1, (unsigned int *)a2, (_DWORD *)a6);
  sub_E48764((void **)a1, (uint64_t)a2, a6);
  int v21 = *(_DWORD *)(a6 + 44);
  *(unsigned char *)(a6 + 868) = (a2[50].n128_u8[0] | a2[53].n128_u32[1]) == 0;
  char v22 = a2[50].n128_u8[1] ^ 1;
  *(_DWORD *)(a6 + 44) = v21 | 3;
  *(unsigned char *)(a6 + 869) = v22;
  if (a2[751].n128_u64[1] == a2[752].n128_u64[0]) {
    sub_E110A0((uint64_t *)&a2[458], a6);
  }
  else {
    sub_E14810(&a2[751].n128_i64[1], a6);
  }
  sub_E48E20(a1, a2, a4, a5, a6);
  sub_E49018(a1, (uint64_t)a2, a6, a7);
  if (a2[731].n128_u64[1] != a2[732].n128_u64[0]
    && a2[730].n128_u64[1] != 0x7FFFFFFFFFFFFFFFLL
    && a2[731].n128_u64[0] != 0x7FFFFFFFFFFFFFFFLL)
  {
    *(_DWORD *)(a6 + 40) |= 0x4000u;
    uint64_t v23 = *(void *)(a6 + 768);
    if (!v23)
    {
      uint64_t v24 = *(void *)(a6 + 8);
      uint64_t v25 = (void *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
      if (v24) {
        uint64_t v25 = (void *)*v25;
      }
      sub_13D7B20((uint64_t)v25);
      uint64_t v23 = v26;
      *(void *)(a6 + 768) = v26;
    }
    sub_E12EEC(&a2[730].n128_i64[1], v23);
  }
  sub_E4A838((uint64_t)a1, (uint64_t)a2, a6);
  sub_E4ACAC((uint64_t)a1, a2, a6);
  sub_E4B0A0((uint64_t)a1, a2, a6);
  sub_E40F98((uint64_t)a1, (uint64_t)a2, a6);
  uint64_t v55 = (int32x2_t *)a1;
  sub_E411A4((uint64_t)a1, a2, a6);
  unint64_t v27 = a2[753].n128_u64[1];
  uint64_t v56 = a2;
  unint64_t v28 = a2[754].n128_u64[0];
  if (v27 != v28)
  {
    uint64_t v29 = (_DWORD *)(a6 + 560);
    do
    {
      while (1)
      {
        __int16 v30 = *(uint64_t *)v27 < 0 ? -50 : 50;
        unsigned int v31 = (int)*(void *)v27 / 100
            + ((5243 * (__int16)(v30 + (int)*(void *)v27 % 100)) >> 19)
            + ((5243 * (__int16)(v30 + (int)*(void *)v27 % 100)) >> 31);
        uint64_t v32 = *(unsigned int *)(a6 + 584);
        if (v32 == *(_DWORD *)(a6 + 588))
        {
          int v33 = v32 + 1;
          sub_188C80C((unsigned int *)(a6 + 584), v32 + 1);
          *(_DWORD *)(*(void *)(a6 + 592) + 4 * v32) = v31;
        }
        else
        {
          *(_DWORD *)(*(void *)(a6 + 592) + 4 * v32) = v31;
          int v33 = v32 + 1;
        }
        *(_DWORD *)(a6 + 584) = v33;
        int v34 = *(unsigned char *)(v27 + 8) ? 1 : 2;
        uint64_t v35 = *(unsigned int *)(a6 + 560);
        if (v35 == *(_DWORD *)(a6 + 564)) {
          break;
        }
        *(_DWORD *)(*(void *)(a6 + 568) + 4 * v35) = v34;
        *uint64_t v29 = v35 + 1;
        v27 += 16;
        if (v27 == v28) {
          goto LABEL_29;
        }
      }
      sub_188C80C((unsigned int *)(a6 + 560), v35 + 1);
      *(_DWORD *)(*(void *)(a6 + 568) + 4 * v35) = v34;
      *uint64_t v29 = v35 + 1;
      v27 += 16;
    }
    while (v27 != v28);
  }
LABEL_29:
  uint64_t v36 = a2[627].n128_i64[0];
  for (unint64_t i = a2[627].n128_u64[1]; v36 != i; v36 += 616)
  {
    while (1)
    {
      uint64_t v40 = *(_DWORD **)(a6 + 624);
      if (v40)
      {
        uint64_t v41 = *(int *)(a6 + 616);
        if ((int)v41 < *v40) {
          break;
        }
      }
      uint64_t v38 = sub_13D6194(*(void *)(a6 + 608));
      uint64_t v39 = sub_188CDC8(a6 + 608, v38);
      sub_E159B0(v36, v39);
      v36 += 616;
      if (v36 == i) {
        goto LABEL_35;
      }
    }
    *(_DWORD *)(a6 + 616) = v41 + 1;
    sub_E159B0(v36, *(void *)&v40[2 * v41 + 2]);
  }
LABEL_35:
  uint64_t v42 = v56[625].n128_i64[1];
  for (unint64_t j = v56[626].n128_u64[0]; v42 != j; v42 += 616)
  {
    while (1)
    {
      char v46 = *(_DWORD **)(a6 + 648);
      if (v46)
      {
        uint64_t v47 = *(int *)(a6 + 640);
        if ((int)v47 < *v46) {
          break;
        }
      }
      uint64_t v44 = sub_13D6194(*(void *)(a6 + 632));
      uint64_t v45 = sub_188CDC8(a6 + 632, v44);
      sub_E159B0(v42, v45);
      v42 += 616;
      if (v42 == j) {
        goto LABEL_41;
      }
    }
    *(_DWORD *)(a6 + 640) = v47 + 1;
    sub_E159B0(v42, *(void *)&v46[2 * v47 + 2]);
  }
LABEL_41:
  uint64_t v48 = v56[628].n128_i64[1];
  for (unint64_t k = v56[629].n128_u64[0]; v48 != k; v48 += 616)
  {
    while (1)
    {
      uint64_t v52 = *(_DWORD **)(a6 + 624);
      if (v52)
      {
        uint64_t v53 = *(int *)(a6 + 616);
        if ((int)v53 < *v52) {
          break;
        }
      }
      uint64_t v50 = sub_13D6194(*(void *)(a6 + 608));
      uint64_t v51 = sub_188CDC8(a6 + 608, v50);
      sub_E159B0(v48, v51);
      v48 += 616;
      if (v48 == k) {
        goto LABEL_47;
      }
    }
    *(_DWORD *)(a6 + 616) = v53 + 1;
    sub_E159B0(v48, *(void *)&v52[2 * v53 + 2]);
  }
LABEL_47:

  return sub_E41320(v55, (uint64_t)v56, a6);
}

uint64_t sub_E46C4C(uint64_t a1, unsigned int **a2, int a3, _DWORD *a4)
{
  int v7 = sub_47E7BC((uint64_t)a2, 0, a3);
  int v8 = sub_646CE8((uint64_t)a2);
  if (v8 + v7 < 0 != __OFADD__(v8, v7)) {
    char v9 = -5;
  }
  else {
    char v9 = 5;
  }
  a4[4] |= 1u;
  a4[6] = (v8 + v7) / 10
        + (((103 * (char)(v9 + (v8 + v7) % 10)) >> 15) & 1)
        + ((103 * (char)(v9 + (v8 + v7) % 10)) >> 10);
  if (sub_646DF4(a2))
  {
    int v11 = sub_47F16C((uint64_t)a2, 2, a3);
    if (v11 < 0) {
      char v12 = -5;
    }
    else {
      char v12 = 5;
    }
    a4[4] |= 2u;
    a4[7] = v11 / 10
          + (((103 * (char)(v12 + v11 % 10)) >> 15) & 1)
          + ((103 * (char)(v12 + v11 % 10)) >> 10);
    if (!sub_646D74(a2))
    {
LABEL_6:
      if (!sub_646E74(a2)) {
        goto LABEL_7;
      }
      goto LABEL_17;
    }
  }
  else if (!sub_646D74(a2))
  {
    goto LABEL_6;
  }
  int v13 = sub_47F16C((uint64_t)a2, 1, a3);
  if (v13 < 0) {
    char v14 = -5;
  }
  else {
    char v14 = 5;
  }
  a4[4] |= 4u;
  a4[8] = v13 / 10 + (((103 * (char)(v14 + v13 % 10)) >> 15) & 1) + ((103 * (char)(v14 + v13 % 10)) >> 10);
  if (!sub_646E74(a2))
  {
LABEL_7:
    uint64_t result = sub_646EF4(a2);
    if (!result) {
      return result;
    }
    goto LABEL_21;
  }
LABEL_17:
  int v15 = sub_47F16C((uint64_t)a2, 4, a3);
  if (v15 < 0) {
    char v16 = -5;
  }
  else {
    char v16 = 5;
  }
  a4[4] |= 8u;
  a4[9] = v15 / 10 + (((103 * (char)(v16 + v15 % 10)) >> 15) & 1) + ((103 * (char)(v16 + v15 % 10)) >> 10);
  uint64_t result = sub_646EF4(a2);
  if (result)
  {
LABEL_21:
    uint64_t result = sub_47F16C((uint64_t)a2, 5, a3);
    if ((int)result < 0) {
      char v17 = -5;
    }
    else {
      char v17 = 5;
    }
    a4[4] |= 0x10u;
    a4[10] = (int)result / 10
           + (((103 * (char)(v17 + (int)result % 10)) >> 15) & 1)
           + ((103 * (char)(v17 + (int)result % 10)) >> 10);
  }
  return result;
}

void sub_E46F04(unsigned char *a1, void *a2, unint64_t a3, uint64_t a4)
{
  int v8 = (void *)nullsub_1(a2);
  uint64_t v9 = v8[1] - *v8;
  if (v9)
  {
    unint64_t v10 = 0;
    unint64_t v11 = 0xFF55E3181697D6CDLL * (v9 >> 3);
    while (1)
    {
      uint64_t v12 = sub_6467E8(a2, v10);
      uint64_t v13 = *(void *)(v12 + 10176);
      uint64_t v14 = *(void *)(v12 + 10184);
      if (v13 != v14) {
        break;
      }
LABEL_3:
      if (++v10 == v11) {
        return;
      }
    }
    int v15 = (void *)v12;
    while (1)
    {
      if (!sub_63A4A4(v13)) {
        goto LABEL_6;
      }
      unint64_t v16 = sub_46C760(v15);
      unint64_t v17 = *(void *)(v13 + 8);
      if (v17 >= v16 || v17 == v16 - 1 && sub_46CAC4((uint64_t)v15) < 0x3B9ACA00) {
        goto LABEL_6;
      }
      if (sub_63A8F8(v13))
      {
        if (a1[24]) {
          goto LABEL_20;
        }
      }
      else
      {
        if (!sub_63A908(v13))
        {
          if (!sub_63A770(v13) && !sub_63A760(v13) || !a1[26]) {
            goto LABEL_6;
          }
LABEL_20:
          sub_E481C8(a3, v10, v13, &__p);
          sub_E476D8((uint64_t)a1, v13, (const void **)&__p.__r_.__value_.__l.__data_, a4);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          goto LABEL_6;
        }
        if (a1[25]) {
          goto LABEL_20;
        }
      }
LABEL_6:
      v13 += 104;
      if (v13 == v14) {
        goto LABEL_3;
      }
    }
  }
}

void sub_E4709C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_E470B8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  *(_DWORD *)(a4 + 40) |= 4u;
  uint64_t v7 = *(void *)(a4 + 248);
  if (!v7)
  {
    uint64_t v9 = *(void *)(a4 + 8);
    unint64_t v10 = (void *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
    if (v9) {
      unint64_t v10 = (void *)*v10;
    }
    sub_13D8AFC((uint64_t)v10);
    uint64_t v7 = v11;
    *(void *)(a4 + 248) = v11;
  }
  sub_E3EED8(a1, a2, v7);
  sub_E3F1A0(a1, a2, v7);
  sub_E3F318(a1, a2, v7);
  sub_E474B8(a1, a2, v7);
  sub_E47570(a1, a2, v7);

  sub_E3F6E8(a1, a2, a3, v7);
}

void sub_E47198(int **a1, void *a2, uint64_t a3)
{
  if (*((unsigned char *)*a1 + 32))
  {
    sub_E323AC((uint64_t)v13, *a1);
    sub_E327A4(v13, a2, a3);
    v13[0] = (void (**)(void, uint64_t, uint64_t))&off_243EE40;
    if ((v22 & 0x80000000) == 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)v13);
    sub_188FC78(v13, (uint64_t)"Request that has supports_waypoint_routes set to true but supports_guidance_events set to false which shouldn't happen.", 119);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v11, 3u);
    if (v12 < 0) {
      operator delete(v11);
    }
    if (SHIBYTE(v18) < 0) {
      operator delete(v16);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  sub_DE96C4((uint64_t)v13, *a1);
  int v6 = (void *)nullsub_1(a2);
  int v7 = 379049677 * ((uint64_t)(v6[1] - *v6) >> 3);
  if (v7)
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(*(void *)(a3 + 64) + 8 * (int)v8 + 8);
      uint64_t v10 = sub_6467E8(a2, v8);
      sub_DE97F0((uint64_t)v13, v10, v9);
      ++v8;
    }
    while (v7 != v8);
  }
  v13[0] = (void (**)(void, uint64_t, uint64_t))&off_243EE40;
  if (v22 < 0) {
LABEL_3:
  }
    operator delete(__p);
LABEL_4:
  if (v19)
  {
    __int16 v20 = v19;
    operator delete(v19);
  }
  if (v17)
  {
    int v18 = v17;
    operator delete(v17);
  }
  if (v14)
  {
    int v15 = v14;
    operator delete(v14);
  }
}

void sub_E47430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_E4747C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_E1EA70((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_E47490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_E1EA70((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_E474A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_E1EA70((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_E474B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_648134(a2);
  uint64_t v6 = *(unsigned __int8 *)(result + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(result + 8);
  }
  if (v6)
  {
    uint64_t v7 = sub_648134(a2);
    sub_5F3D48((uint64_t)v12, v7);
    *(_DWORD *)(a3 + 16) |= 0x10u;
    uint64_t v8 = *(void *)(a3 + 56);
    if (!v8)
    {
      uint64_t v9 = *(void *)(a3 + 8);
      uint64_t v10 = (void *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
      if (v9) {
        uint64_t v10 = (void *)*v10;
      }
      sub_13D6A1C((uint64_t)v10);
      uint64_t v8 = v11;
      *(void *)(a3 + 56) = v11;
    }
    sub_5F4D30(v12, v8);
    return sub_4D4B58((uint64_t)v12);
  }
  return result;
}

void sub_E4755C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_E47570(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_6481E4(a2);
  int v6 = *(_DWORD *)(v5 + 32);
  if (v6 != 1)
  {
    if (v6 || *(_DWORD *)v5 == -1) {
      return;
    }
LABEL_11:
    uint64_t v8 = sub_6481E4(a2);
    sub_4F57A0((uint64_t)v15, v8);
    *(_DWORD *)(a3 + 16) |= 0x40u;
    uint64_t v10 = *(void *)(a3 + 72);
    if (!v10)
    {
      uint64_t v11 = *(void *)(a3 + 8);
      char v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
      if (v11) {
        char v12 = (void *)*v12;
      }
      uint64_t v10 = sub_13DAB08((uint64_t)v12);
      *(void *)(a3 + 72) = v10;
    }
    sub_523A2C((uint64_t)v15, v10, v9);
    if (v23 < 0)
    {
      operator delete(__p);
      if ((v21 & 0x80000000) == 0)
      {
LABEL_17:
        int v13 = v19;
        if (v19 != 1) {
          goto LABEL_18;
        }
        goto LABEL_23;
      }
    }
    else if ((v21 & 0x80000000) == 0)
    {
      goto LABEL_17;
    }
    operator delete(v20);
    int v13 = v19;
    if (v19 != 1)
    {
LABEL_18:
      if (v13 || (v18 & 0x80000000) == 0) {
        return;
      }
      uint64_t v14 = v16;
LABEL_25:
      operator delete(v14);
      return;
    }
LABEL_23:
    uint64_t v14 = v16;
    if (!v16) {
      return;
    }
    unint64_t v17 = v16;
    goto LABEL_25;
  }
  BOOL v7 = *(_DWORD *)(v5 + 4) == -1 && *(_DWORD *)v5 == -1;
  if (!v7 || *(void *)(v5 + 8) != *(void *)(v5 + 16)) {
    goto LABEL_11;
  }
}

void sub_E476C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D9814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_E476D8(uint64_t a1, uint64_t a2, const void **a3, uint64_t a4)
{
  if (sub_63A4A4(a2))
  {
    unint64_t v6 = sub_63A848(a2);
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v7 = *(void *)(a2 + 40);
    if (v8 != v7)
    {
      int v130 = (_DWORD *)(a2 + 20);
      unint64_t v131 = HIDWORD(v6);
      uint64_t v126 = (uint64_t *)(a4 + 120);
      unint64_t v127 = (uint64_t *)(a4 + 144);
      uint64_t v128 = a4;
      uint64_t v132 = *(void *)(a2 + 40);
      while (!sub_63A048(v8))
      {
LABEL_7:
        v8 += 176;
        if (v8 == v7) {
          return;
        }
      }
      switch(*(_DWORD *)(v8 + 8))
      {
        case 1:
          char v12 = *(_DWORD **)(a4 + 136);
          if (v12 && (uint64_t v13 = *(int *)(a4 + 128), (int)v13 < *v12))
          {
            *(_DWORD *)(a4 + 128) = v13 + 1;
            uint64_t v14 = *(void *)&v12[2 * v13 + 2];
          }
          else
          {
            uint64_t v26 = sub_13D9774(*v126);
            uint64_t v14 = sub_188CDC8((uint64_t)v126, (uint64_t)v26);
          }
          int v27 = *((char *)a3 + 23);
          if (v27 >= 0) {
            size_t v28 = *((unsigned __int8 *)a3 + 23);
          }
          else {
            size_t v28 = (size_t)a3[1];
          }
          int v29 = byte_25FBC9F;
          if (byte_25FBC9F >= 0) {
            size_t v30 = byte_25FBC9F;
          }
          else {
            size_t v30 = qword_25FBC90;
          }
          unint64_t v31 = v30 + v28;
          if (v30 + v28 > 0x7FFFFFFFFFFFFFF7) {
            goto LABEL_193;
          }
          if (v31 > 0x16)
          {
            uint64_t v65 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v31 | 7) != 0x17) {
              uint64_t v65 = v31 | 7;
            }
            uint64_t v66 = v65 + 1;
            p_dst = (char *)operator new(v65 + 1);
            unint64_t v67 = v66 | 0x8000000000000000;
            a4 = v128;
            __dst.__r_.__value_.__l.__size_ = v30 + v28;
            __dst.__r_.__value_.__r.__words[2] = v67;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
            if (v28) {
              goto LABEL_87;
            }
          }
          else
          {
            memset(&__dst, 0, sizeof(__dst));
            p_dst = (char *)&__dst;
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v30 + v28;
            if (!v28) {
              goto LABEL_91;
            }
LABEL_87:
            if (v27 >= 0) {
              unint64_t v68 = a3;
            }
            else {
              unint64_t v68 = *a3;
            }
            memmove(p_dst, v68, v28);
          }
LABEL_91:
          int v69 = &p_dst[v28];
          if (v30)
          {
            if (v29 >= 0) {
              unint64_t v70 = &qword_25FBC88;
            }
            else {
              unint64_t v70 = (uint64_t *)qword_25FBC88;
            }
            memmove(v69, v70, v30);
          }
          v69[v30] = 0;
          *(_DWORD *)(v14 + 16) |= 1u;
          uint64_t v71 = *(void *)(v14 + 8);
          char v72 = (uint64_t *)(v71 & 0xFFFFFFFFFFFFFFFCLL);
          if (v71) {
            char v72 = (uint64_t *)*v72;
          }
          sub_1881E08((uint64_t *)(v14 + 24), (long long *)&__dst, v72);
          uint64_t v7 = v132;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__r_.__value_.__l.__data_);
            *(_DWORD *)(v14 + 16) |= 2u;
            uint64_t v9 = *(void *)(v14 + 32);
            if (!v9) {
              goto LABEL_174;
            }
          }
          else
          {
            *(_DWORD *)(v14 + 16) |= 2u;
            uint64_t v9 = *(void *)(v14 + 32);
            if (!v9)
            {
LABEL_174:
              uint64_t v116 = *(void *)(v14 + 8);
              uint64_t v117 = (void *)(v116 & 0xFFFFFFFFFFFFFFFCLL);
              if (v116) {
                uint64_t v117 = (void *)*v117;
              }
              uint64_t v9 = sub_15C1918((uint64_t)v117);
              *(void *)(v14 + 32) = v9;
            }
          }
          sub_E112BC(v130, v9, v10);
          *(_DWORD *)(v14 + 16) |= 0xCu;
          int v11 = 1;
          goto LABEL_6;
        case 2:
          int v15 = *(_DWORD **)(a4 + 136);
          if (v15 && (uint64_t v16 = *(int *)(a4 + 128), (int)v16 < *v15))
          {
            *(_DWORD *)(a4 + 128) = v16 + 1;
            uint64_t v14 = *(void *)&v15[2 * v16 + 2];
          }
          else
          {
            int v33 = sub_13D9774(*v126);
            uint64_t v14 = sub_188CDC8((uint64_t)v126, (uint64_t)v33);
          }
          int v34 = *((char *)a3 + 23);
          if (v34 >= 0) {
            size_t v35 = *((unsigned __int8 *)a3 + 23);
          }
          else {
            size_t v35 = (size_t)a3[1];
          }
          int v36 = byte_25FBCB7;
          if (byte_25FBCB7 >= 0) {
            size_t v37 = byte_25FBCB7;
          }
          else {
            size_t v37 = qword_25FBCA8;
          }
          unint64_t v38 = v37 + v35;
          if (v37 + v35 > 0x7FFFFFFFFFFFFFF7) {
            goto LABEL_193;
          }
          if (v38 <= 0x16)
          {
            memset(&__dst, 0, sizeof(__dst));
            uint64_t v39 = (char *)&__dst;
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v37 + v35;
            if (!v35) {
              goto LABEL_108;
            }
LABEL_104:
            if (v34 >= 0) {
              unint64_t v76 = a3;
            }
            else {
              unint64_t v76 = *a3;
            }
            memmove(v39, v76, v35);
            goto LABEL_108;
          }
          uint64_t v73 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v38 | 7) != 0x17) {
            uint64_t v73 = v38 | 7;
          }
          uint64_t v74 = v73 + 1;
          uint64_t v39 = (char *)operator new(v73 + 1);
          unint64_t v75 = v74 | 0x8000000000000000;
          a4 = v128;
          __dst.__r_.__value_.__l.__size_ = v37 + v35;
          __dst.__r_.__value_.__r.__words[2] = v75;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
          if (v35) {
            goto LABEL_104;
          }
LABEL_108:
          long long v77 = &v39[v35];
          if (v37)
          {
            if (v36 >= 0) {
              int v78 = &qword_25FBCA0;
            }
            else {
              int v78 = (uint64_t *)qword_25FBCA0;
            }
            memmove(v77, v78, v37);
          }
          v77[v37] = 0;
          *(_DWORD *)(v14 + 16) |= 1u;
          uint64_t v79 = *(void *)(v14 + 8);
          unsigned int v80 = (uint64_t *)(v79 & 0xFFFFFFFFFFFFFFFCLL);
          if (v79) {
            unsigned int v80 = (uint64_t *)*v80;
          }
          sub_1881E08((uint64_t *)(v14 + 24), (long long *)&__dst, v80);
          uint64_t v7 = v132;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__r_.__value_.__l.__data_);
            *(_DWORD *)(v14 + 16) |= 2u;
            uint64_t v82 = *(void *)(v14 + 32);
            if (v82) {
              goto LABEL_180;
            }
          }
          else
          {
            *(_DWORD *)(v14 + 16) |= 2u;
            uint64_t v82 = *(void *)(v14 + 32);
            if (v82) {
              goto LABEL_180;
            }
          }
          uint64_t v118 = *(void *)(v14 + 8);
          int v119 = (void *)(v118 & 0xFFFFFFFFFFFFFFFCLL);
          if (v118) {
            int v119 = (void *)*v119;
          }
          uint64_t v82 = sub_15C1918((uint64_t)v119);
          *(void *)(v14 + 32) = v82;
LABEL_180:
          sub_E112BC(v130, v82, v81);
          *(_DWORD *)(v14 + 16) |= 0xCu;
          int v11 = 2;
LABEL_6:
          *(_DWORD *)(v14 + 40) = v11;
          *(_DWORD *)(v14 + 44) = v131;
          goto LABEL_7;
        case 3:
          unint64_t v17 = *(_DWORD **)(a4 + 160);
          if (v17 && (uint64_t v18 = *(int *)(a4 + 152), (int)v18 < *v17))
          {
            *(_DWORD *)(a4 + 152) = v18 + 1;
            uint64_t v19 = *(void *)&v17[2 * v18 + 2];
          }
          else
          {
            sub_13D96E0(*v127);
            uint64_t v19 = sub_188CDC8((uint64_t)v127, v40);
          }
          int v41 = *((char *)a3 + 23);
          if (v41 >= 0) {
            size_t v42 = *((unsigned __int8 *)a3 + 23);
          }
          else {
            size_t v42 = (size_t)a3[1];
          }
          int v43 = byte_25FBCCF;
          if (byte_25FBCCF >= 0) {
            size_t v44 = byte_25FBCCF;
          }
          else {
            size_t v44 = qword_25FBCC0;
          }
          unint64_t v45 = v44 + v42;
          if (v44 + v42 > 0x7FFFFFFFFFFFFFF7) {
            goto LABEL_193;
          }
          if (v45 <= 0x16)
          {
            memset(&__dst, 0, sizeof(__dst));
            char v46 = (char *)&__dst;
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v44 + v42;
            if (!v42) {
              goto LABEL_125;
            }
LABEL_121:
            if (v41 >= 0) {
              unint64_t v86 = a3;
            }
            else {
              unint64_t v86 = *a3;
            }
            memmove(v46, v86, v42);
            goto LABEL_125;
          }
          uint64_t v83 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v45 | 7) != 0x17) {
            uint64_t v83 = v45 | 7;
          }
          uint64_t v84 = v83 + 1;
          char v46 = (char *)operator new(v83 + 1);
          unint64_t v85 = v84 | 0x8000000000000000;
          a4 = v128;
          __dst.__r_.__value_.__l.__size_ = v44 + v42;
          __dst.__r_.__value_.__r.__words[2] = v85;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
          if (v42) {
            goto LABEL_121;
          }
LABEL_125:
          int v87 = &v46[v42];
          if (v44)
          {
            if (v43 >= 0) {
              uint64_t v88 = &qword_25FBCB8;
            }
            else {
              uint64_t v88 = (uint64_t *)qword_25FBCB8;
            }
            memmove(v87, v88, v44);
          }
          v87[v44] = 0;
          *(_DWORD *)(v19 + 16) |= 1u;
          uint64_t v89 = *(void *)(v19 + 8);
          unint64_t v90 = (uint64_t *)(v89 & 0xFFFFFFFFFFFFFFFCLL);
          if (v89) {
            unint64_t v90 = (uint64_t *)*v90;
          }
          sub_1881E08((uint64_t *)(v19 + 24), (long long *)&__dst, v90);
          uint64_t v7 = v132;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__r_.__value_.__l.__data_);
            *(_DWORD *)(v19 + 16) |= 4u;
            uint64_t v92 = *(void *)(v19 + 40);
            if (!v92)
            {
LABEL_182:
              uint64_t v120 = *(void *)(v19 + 8);
              unint64_t v121 = (void *)(v120 & 0xFFFFFFFFFFFFFFFCLL);
              if (v120) {
                unint64_t v121 = (void *)*v121;
              }
              uint64_t v92 = sub_15C1918((uint64_t)v121);
              *(void *)(v19 + 40) = v92;
            }
          }
          else
          {
            *(_DWORD *)(v19 + 16) |= 4u;
            uint64_t v92 = *(void *)(v19 + 40);
            if (!v92) {
              goto LABEL_182;
            }
          }
          sub_E112BC(v130, v92, v91);
          int v122 = *(_DWORD *)(v19 + 16);
          *(_DWORD *)(v19 + 64) = 2;
          *(_DWORD *)(v19 + 16) = v122 | 0x220;
          *(_DWORD *)(v19 + 84) = v131;
          if (sub_63A4F0(a2))
          {
            *(_DWORD *)(v19 + 16) |= 0x20u;
            *(_DWORD *)(v19 + 64) = 5;
          }
          goto LABEL_7;
        case 4:
          __int16 v20 = *(_DWORD **)(a4 + 160);
          if (v20 && (uint64_t v21 = *(int *)(a4 + 152), (int)v21 < *v20))
          {
            *(_DWORD *)(a4 + 152) = v21 + 1;
            uint64_t v22 = *(void *)&v20[2 * v21 + 2];
          }
          else
          {
            sub_13D96E0(*v127);
            uint64_t v22 = sub_188CDC8((uint64_t)v127, v47);
          }
          int v48 = *((char *)a3 + 23);
          if (v48 >= 0) {
            size_t v49 = *((unsigned __int8 *)a3 + 23);
          }
          else {
            size_t v49 = (size_t)a3[1];
          }
          int v50 = byte_25FBCE7;
          if (byte_25FBCE7 >= 0) {
            size_t v51 = byte_25FBCE7;
          }
          else {
            size_t v51 = qword_25FBCD8;
          }
          unint64_t v52 = v51 + v49;
          if (v51 + v49 > 0x7FFFFFFFFFFFFFF7) {
            goto LABEL_193;
          }
          if (v52 <= 0x16)
          {
            memset(&__dst, 0, sizeof(__dst));
            uint64_t v53 = (char *)&__dst;
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v51 + v49;
            if (!v49) {
              goto LABEL_142;
            }
LABEL_138:
            if (v48 >= 0) {
              uint64_t v96 = a3;
            }
            else {
              uint64_t v96 = *a3;
            }
            memmove(v53, v96, v49);
            goto LABEL_142;
          }
          uint64_t v93 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v52 | 7) != 0x17) {
            uint64_t v93 = v52 | 7;
          }
          uint64_t v94 = v93 + 1;
          uint64_t v53 = (char *)operator new(v93 + 1);
          unint64_t v95 = v94 | 0x8000000000000000;
          a4 = v128;
          __dst.__r_.__value_.__l.__size_ = v51 + v49;
          __dst.__r_.__value_.__r.__words[2] = v95;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
          if (v49) {
            goto LABEL_138;
          }
LABEL_142:
          uint64_t v97 = &v53[v49];
          if (v51)
          {
            if (v50 >= 0) {
              uint64_t v98 = &qword_25FBCD0;
            }
            else {
              uint64_t v98 = (uint64_t *)qword_25FBCD0;
            }
            memmove(v97, v98, v51);
          }
          v97[v51] = 0;
          *(_DWORD *)(v22 + 16) |= 1u;
          uint64_t v99 = *(void *)(v22 + 8);
          uint64_t v100 = (uint64_t *)(v99 & 0xFFFFFFFFFFFFFFFCLL);
          if (v99) {
            uint64_t v100 = (uint64_t *)*v100;
          }
          sub_1881E08((uint64_t *)(v22 + 24), (long long *)&__dst, v100);
          uint64_t v7 = v132;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__r_.__value_.__l.__data_);
            *(_DWORD *)(v22 + 16) |= 4u;
            uint64_t v102 = *(void *)(v22 + 40);
            if (!v102)
            {
LABEL_188:
              uint64_t v123 = *(void *)(v22 + 8);
              uint64_t v124 = (void *)(v123 & 0xFFFFFFFFFFFFFFFCLL);
              if (v123) {
                uint64_t v124 = (void *)*v124;
              }
              uint64_t v102 = sub_15C1918((uint64_t)v124);
              *(void *)(v22 + 40) = v102;
            }
          }
          else
          {
            *(_DWORD *)(v22 + 16) |= 4u;
            uint64_t v102 = *(void *)(v22 + 40);
            if (!v102) {
              goto LABEL_188;
            }
          }
          sub_E112BC(v130, v102, v101);
          int v125 = *(_DWORD *)(v22 + 16);
          *(_DWORD *)(v22 + 64) = 5;
          *(_DWORD *)(v22 + 16) = v125 | 0x220;
          *(_DWORD *)(v22 + 84) = v131;
          goto LABEL_7;
        case 5:
          char v23 = *(_DWORD **)(a4 + 160);
          if (v23 && (uint64_t v24 = *(int *)(a4 + 152), (int)v24 < *v23))
          {
            *(_DWORD *)(a4 + 152) = v24 + 1;
            uint64_t v25 = *(void *)&v23[2 * v24 + 2];
          }
          else
          {
            sub_13D96E0(*v127);
            uint64_t v25 = sub_188CDC8((uint64_t)v127, v54);
          }
          unsigned int v55 = sub_63A824(a2);
          std::to_string(&__dst, v55);
          *(_DWORD *)(v25 + 16) |= 2u;
          uint64_t v56 = *(void *)(v25 + 8);
          uint64_t v57 = (uint64_t *)(v56 & 0xFFFFFFFFFFFFFFFCLL);
          if (v56) {
            uint64_t v57 = (uint64_t *)*v57;
          }
          sub_1881E08((uint64_t *)(v25 + 32), (long long *)&__dst, v57);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          int v58 = *(_DWORD *)(v25 + 16);
          *(double *)(v25 + 72) = *(double *)(a2 + 88) / 3.6;
          *(_DWORD *)(v25 + 16) = v58 | 0xA0;
          *(_DWORD *)(v25 + 64) = 1;
          int v59 = *((char *)a3 + 23);
          if (v59 >= 0) {
            size_t v60 = *((unsigned __int8 *)a3 + 23);
          }
          else {
            size_t v60 = (size_t)a3[1];
          }
          int v61 = byte_25FBCFF;
          if (byte_25FBCFF >= 0) {
            size_t v62 = byte_25FBCFF;
          }
          else {
            size_t v62 = qword_25FBCF0;
          }
          unint64_t v63 = v62 + v60;
          if (v62 + v60 > 0x7FFFFFFFFFFFFFF7) {
LABEL_193:
          }
            sub_188D690();
          if (v63 <= 0x16)
          {
            memset(&__dst, 0, sizeof(__dst));
            unint64_t v64 = (char *)&__dst;
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v62 + v60;
            if (!v60) {
              goto LABEL_159;
            }
LABEL_155:
            if (v59 >= 0) {
              uint64_t v106 = a3;
            }
            else {
              uint64_t v106 = *a3;
            }
            memmove(v64, v106, v60);
            goto LABEL_159;
          }
          uint64_t v103 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v63 | 7) != 0x17) {
            uint64_t v103 = v63 | 7;
          }
          uint64_t v104 = v103 + 1;
          unint64_t v64 = (char *)operator new(v103 + 1);
          unint64_t v105 = v104 | 0x8000000000000000;
          a4 = v128;
          __dst.__r_.__value_.__l.__size_ = v62 + v60;
          __dst.__r_.__value_.__r.__words[2] = v105;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v64;
          if (v60) {
            goto LABEL_155;
          }
LABEL_159:
          uint64_t v107 = &v64[v60];
          if (v62)
          {
            if (v61 >= 0) {
              int v108 = &qword_25FBCE8;
            }
            else {
              int v108 = (uint64_t *)qword_25FBCE8;
            }
            memmove(v107, v108, v62);
          }
          v107[v62] = 0;
          *(_DWORD *)(v25 + 16) |= 1u;
          uint64_t v109 = *(void *)(v25 + 8);
          int v110 = (uint64_t *)(v109 & 0xFFFFFFFFFFFFFFFCLL);
          if (v109) {
            int v110 = (uint64_t *)*v110;
          }
          sub_1881E08((uint64_t *)(v25 + 24), (long long *)&__dst, v110);
          uint64_t v7 = v132;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          int v112 = *(_DWORD *)(v25 + 16);
          *(_DWORD *)(v25 + 84) = v131;
          *(_DWORD *)(v25 + 16) = v112 | 0x204;
          uint64_t v113 = *(void *)(v25 + 40);
          if (!v113)
          {
            uint64_t v114 = *(void *)(v25 + 8);
            uint64_t v115 = (void *)(v114 & 0xFFFFFFFFFFFFFFFCLL);
            if (v114) {
              uint64_t v115 = (void *)*v115;
            }
            uint64_t v113 = sub_15C1918((uint64_t)v115);
            *(void *)(v25 + 40) = v113;
          }
          sub_E112BC(v130, v113, v111);
          goto LABEL_7;
        default:
          goto LABEL_7;
      }
    }
  }
}

void sub_E48184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_E481C8(unint64_t __val@<X1>, unint64_t a2@<X2>, uint64_t a3@<X3>, std::string *a4@<X8>)
{
  std::to_string(&v23, __val);
  uint64_t v7 = std::string::append(&v23, "_");
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v22, a2);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v9 = &v22;
  }
  else {
    uint64_t v9 = (std::string *)v22.__r_.__value_.__r.__words[0];
  }
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v22.__r_.__value_.__l.__size_;
  }
  int v11 = std::string::append(&v24, (const std::string::value_type *)v9, size);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  uint64_t v13 = std::string::append(&v25, "_");
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v21, *(void *)(a3 + 8));
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v15 = &v21;
  }
  else {
    int v15 = (std::string *)v21.__r_.__value_.__r.__words[0];
  }
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v16 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v16 = v21.__r_.__value_.__l.__size_;
  }
  unint64_t v17 = std::string::append(&v26, (const std::string::value_type *)v15, v16);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  a4->__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v21.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_15:
      if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_16;
      }
      goto LABEL_23;
    }
  }
  else if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(v26.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_16:
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete(v25.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_17:
    if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }
LABEL_24:
  operator delete(v22.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_18:
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete(v24.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_19:
    if (*(_DWORD *)(a3 + 4) != 2) {
      return;
    }
    goto LABEL_27;
  }
LABEL_26:
  operator delete(v23.__r_.__value_.__l.__data_);
  if (*(_DWORD *)(a3 + 4) != 2) {
    return;
  }
LABEL_27:
  if (byte_25FBD17 >= 0) {
    uint64_t v19 = (const std::string::value_type *)&qword_25FBD00;
  }
  else {
    uint64_t v19 = (const std::string::value_type *)qword_25FBD00;
  }
  if (byte_25FBD17 >= 0) {
    std::string::size_type v20 = byte_25FBD17;
  }
  else {
    std::string::size_type v20 = *(void *)&word_25FBD08;
  }
  std::string::append(a4, v19, v20);
}

void sub_E483B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 + 23) < 0) {
    operator delete(*(void **)v33);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_E484B4(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  int v5 = sub_46E120(a2, 0);
  if (v5 < 0) {
    char v6 = -5;
  }
  else {
    char v6 = 5;
  }
  a3[10] |= 0x800000u;
  a3[208] = v5 / 10 + (((103 * (char)(v6 + v5 % 10)) >> 15) & 1) + ((103 * (char)(v6 + v5 % 10)) >> 10);
  if (sub_46E120(a2, 1) != 0x7FFFFFFF)
  {
    int v7 = sub_46E120(a2, 1);
    if (v7 < 0) {
      char v8 = -5;
    }
    else {
      char v8 = 5;
    }
    a3[10] |= 0x80000000;
    a3[216] = v7 / 10 + (((103 * (char)(v8 + v7 % 10)) >> 15) & 1) + ((103 * (char)(v8 + v7 % 10)) >> 10);
  }
  if (sub_46E120(a2, 2) != 0x7FFFFFFF)
  {
    int v9 = sub_46E120(a2, 2);
    if (v9 < 0) {
      char v10 = -5;
    }
    else {
      char v10 = 5;
    }
    a3[10] |= 0x10000000u;
    a3[213] = v9 / 10
            + (((103 * (char)(v10 + v9 % 10)) >> 15) & 1)
            + ((103 * (char)(v10 + v9 % 10)) >> 10);
  }
  if (sub_46E120(a2, 5) == 0x7FFFFFFF)
  {
    uint64_t result = sub_46E120(a2, 4);
    if (result == 0x7FFFFFFF) {
      return result;
    }
    goto LABEL_21;
  }
  int v12 = sub_46E120(a2, 5);
  if (v12 < 0) {
    char v13 = -5;
  }
  else {
    char v13 = 5;
  }
  a3[10] |= 0x40000000u;
  a3[215] = v12 / 10
          + (((103 * (char)(v13 + v12 % 10)) >> 15) & 1)
          + ((103 * (char)(v13 + v12 % 10)) >> 10);
  uint64_t result = sub_46E120(a2, 4);
  if (result != 0x7FFFFFFF)
  {
LABEL_21:
    uint64_t result = sub_46E120(a2, 4);
    if ((int)result < 0) {
      char v14 = -5;
    }
    else {
      char v14 = 5;
    }
    a3[10] |= 0x20000000u;
    a3[214] = (int)result / 10
            + (((103 * (char)(v14 + (int)result % 10)) >> 15) & 1)
            + ((103 * (char)(v14 + (int)result % 10)) >> 10);
  }
  return result;
}

void sub_E48764(void **a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a2 + 10576) != *(void *)(a2 + 10584))
  {
    *(_DWORD *)(a3 + 40) |= 0x10000u;
    uint64_t v6 = *(void *)(a3 + 784);
    if (!v6)
    {
      uint64_t v7 = *(void *)(a3 + 8);
      char v8 = (void *)(v7 & 0xFFFFFFFFFFFFFFFCLL);
      if (v7) {
        char v8 = (void *)*v8;
      }
      sub_13D8414((uint64_t)v8);
      uint64_t v6 = v9;
      *(void *)(a3 + 784) = v9;
    }
    sub_E146FC((uint64_t *)(a2 + 10576), v6);
  }
  if (*(void *)(a2 + 11256) != *(void *)(a2 + 11264))
  {
    *(_DWORD *)(a3 + 40) |= 0x20000u;
    uint64_t v10 = *(void *)(a3 + 792);
    if (!v10)
    {
      uint64_t v11 = *(void *)(a3 + 8);
      int v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
      if (v11) {
        int v12 = (void *)*v12;
      }
      sub_13D8414((uint64_t)v12);
      uint64_t v10 = v13;
      *(void *)(a3 + 792) = v13;
    }
    sub_E146FC((uint64_t *)(a2 + 11256), v10);
  }
  char v14 = (uint64_t *)sub_376F8C(a1[1]);
  int v15 = v14;
  unsigned int v86 = *(_DWORD *)(a2 + 264);
  if (v86 <= 1) {
    uint64_t v85 = *(void *)(a2 + 256);
  }
  sub_28E4E4(v14, (uint64_t)&v85, (unint64_t)v74);
  *(_DWORD *)(a3 + 40) |= 0x10000u;
  uint64_t v16 = *(void *)(a3 + 784);
  if (!v16)
  {
    uint64_t v17 = *(void *)(a3 + 8);
    long long v18 = (void *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
    if (v17) {
      long long v18 = (void *)*v18;
    }
    sub_13D8414((uint64_t)v18);
    uint64_t v16 = v19;
    *(void *)(a3 + 784) = v19;
  }
  sub_E13B3C((uint64_t)v74, a2 + 128, a2 + 10200, v16);
  unsigned int v84 = *(_DWORD *)(a2 + 424);
  if (v84 <= 1) {
    uint64_t v83 = *(void *)(a2 + 416);
  }
  sub_28E4E4(v15, (uint64_t)&v83, (unint64_t)v65);
  *(_DWORD *)(a3 + 40) |= 0x20000u;
  uint64_t v20 = *(void *)(a3 + 792);
  if (!v20)
  {
    uint64_t v21 = *(void *)(a3 + 8);
    std::string v22 = (void *)(v21 & 0xFFFFFFFFFFFFFFFCLL);
    if (v21) {
      std::string v22 = (void *)*v22;
    }
    sub_13D8414((uint64_t)v22);
    uint64_t v20 = v23;
    *(void *)(a3 + 792) = v23;
  }
  sub_E13B3C((uint64_t)v65, a2 + 288, a2 + 10880, v20);
  if (*((unsigned char *)*a1 + 167))
  {
    if (*(_DWORD *)(a2 + 152) == 0x7FFFFFFF) {
      goto LABEL_54;
    }
    if (*(_DWORD *)(a2 + 188) == 0x7FFFFFFF) {
      goto LABEL_54;
    }
    if (!sub_40A45C((int *)(a2 + 160))) {
      goto LABEL_54;
    }
    int v24 = *(_DWORD *)(a2 + 264);
    if (v24 == -1) {
      goto LABEL_54;
    }
    if (v24 == 1)
    {
      if (*(void *)(a2 + 256) > 0xFFFFFFFEFFFFFFFFLL || !*(void *)(a2 + 256)) {
        goto LABEL_54;
      }
    }
    else
    {
      if (v24) {
        goto LABEL_111;
      }
      if (*(void *)(a2 + 256) == -1)
      {
LABEL_54:
        if (*(_DWORD *)(a2 + 312) == 0x7FFFFFFF) {
          goto LABEL_82;
        }
        if (*(_DWORD *)(a2 + 348) == 0x7FFFFFFF) {
          goto LABEL_82;
        }
        if (!sub_40A45C((int *)(a2 + 320))) {
          goto LABEL_82;
        }
        int v41 = *(_DWORD *)(a2 + 424);
        switch(v41)
        {
          case -1:
            goto LABEL_82;
          case 1:
            if (*(void *)(a2 + 416) > 0xFFFFFFFEFFFFFFFFLL || !*(void *)(a2 + 416)) {
              goto LABEL_82;
            }
            goto LABEL_64;
          case 0:
            if (*(void *)(a2 + 416) == -1) {
              goto LABEL_82;
            }
LABEL_64:
            size_t v42 = (const std::string **)(a2 + 11288);
            if (!sub_45FB38((void *)(a2 + 11288)))
            {
              *(_DWORD *)(a3 + 40) |= 0x20000u;
              uint64_t v44 = *(void *)(a3 + 792);
              if (!v44)
              {
                uint64_t v45 = *(void *)(a3 + 8);
                char v46 = (void *)(v45 & 0xFFFFFFFFFFFFFFFCLL);
                if (v45) {
                  char v46 = (void *)*v46;
                }
                double v43 = sub_13D8414((uint64_t)v46);
                uint64_t v44 = v47;
                *(void *)(a3 + 792) = v47;
              }
              *(_DWORD *)(v44 + 16) |= 8u;
              uint64_t v48 = *(void *)(v44 + 48);
              if (!v48)
              {
                uint64_t v49 = *(void *)(v44 + 8);
                int v50 = (void *)(v49 & 0xFFFFFFFFFFFFFFFCLL);
                if (v49) {
                  int v50 = (void *)*v50;
                }
                uint64_t v48 = sub_13DAB08((uint64_t)v50);
                *(void *)(v44 + 48) = v48;
              }
              sub_523A2C(a2 + 11448, v48, *(uint8x8_t *)&v43);
              *(_DWORD *)(a3 + 40) |= 0x20000u;
              uint64_t v51 = *(void *)(a3 + 792);
              if (!v51)
              {
                uint64_t v52 = *(void *)(a3 + 8);
                uint64_t v53 = (void *)(v52 & 0xFFFFFFFFFFFFFFFCLL);
                if (v52) {
                  uint64_t v53 = (void *)*v53;
                }
                sub_13D8414((uint64_t)v53);
                uint64_t v51 = v54;
                *(void *)(a3 + 792) = v54;
              }
              *(_DWORD *)(v51 + 16) |= 0x100u;
              uint64_t v55 = *(void *)(v51 + 88);
              if (!v55)
              {
                uint64_t v56 = *(void *)(v51 + 8);
                uint64_t v57 = (void *)(v56 & 0xFFFFFFFFFFFFFFFCLL);
                if (v56) {
                  uint64_t v57 = (void *)*v57;
                }
                sub_13D6A1C((uint64_t)v57);
                uint64_t v55 = v58;
                *(void *)(v51 + 88) = v58;
              }
              sub_5F4D30(v42, v55);
            }
            goto LABEL_82;
        }
LABEL_111:
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
    }
    if (!sub_45FB38((void *)(a2 + 10608)))
    {
      *(_DWORD *)(a3 + 40) |= 0x10000u;
      uint64_t v26 = *(void *)(a3 + 784);
      if (!v26)
      {
        uint64_t v27 = *(void *)(a3 + 8);
        size_t v28 = (void *)(v27 & 0xFFFFFFFFFFFFFFFCLL);
        if (v27) {
          size_t v28 = (void *)*v28;
        }
        double v25 = sub_13D8414((uint64_t)v28);
        uint64_t v26 = v29;
        *(void *)(a3 + 784) = v29;
      }
      *(_DWORD *)(v26 + 16) |= 8u;
      uint64_t v30 = *(void *)(v26 + 48);
      if (!v30)
      {
        uint64_t v31 = *(void *)(v26 + 8);
        uint64_t v32 = (void *)(v31 & 0xFFFFFFFFFFFFFFFCLL);
        if (v31) {
          uint64_t v32 = (void *)*v32;
        }
        uint64_t v30 = sub_13DAB08((uint64_t)v32);
        *(void *)(v26 + 48) = v30;
      }
      sub_523A2C(a2 + 10768, v30, *(uint8x8_t *)&v25);
      *(_DWORD *)(a3 + 40) |= 0x10000u;
      uint64_t v33 = *(void *)(a3 + 784);
      if (!v33)
      {
        uint64_t v34 = *(void *)(a3 + 8);
        size_t v35 = (void *)(v34 & 0xFFFFFFFFFFFFFFFCLL);
        if (v34) {
          size_t v35 = (void *)*v35;
        }
        sub_13D8414((uint64_t)v35);
        uint64_t v33 = v36;
        *(void *)(a3 + 784) = v36;
      }
      *(_DWORD *)(v33 + 16) |= 0x100u;
      uint64_t v37 = *(void *)(v33 + 88);
      if (!v37)
      {
        uint64_t v38 = *(void *)(v33 + 8);
        uint64_t v39 = (void *)(v38 & 0xFFFFFFFFFFFFFFFCLL);
        if (v38) {
          uint64_t v39 = (void *)*v39;
        }
        sub_13D6A1C((uint64_t)v39);
        uint64_t v37 = v40;
        *(void *)(v33 + 88) = v40;
      }
      sub_5F4D30((const std::string **)(a2 + 10608), v37);
    }
    goto LABEL_54;
  }
LABEL_82:
  sub_8AC4C((uint64_t)&v73);
  int v59 = (void **)__p;
  if (__p)
  {
    size_t v60 = v72;
    int v61 = __p;
    if (v72 != __p)
    {
      do
      {
        if (*((char *)v60 - 1) < 0) {
          operator delete(*(v60 - 3));
        }
        v60 -= 3;
      }
      while (v60 != v59);
      int v61 = __p;
    }
    char v72 = v59;
    operator delete(v61);
  }
  if (v70 < 0)
  {
    operator delete(v69);
    if ((v68 & 0x80000000) == 0)
    {
LABEL_92:
      if ((v66 & 0x80000000) == 0) {
        goto LABEL_93;
      }
      goto LABEL_100;
    }
  }
  else if ((v68 & 0x80000000) == 0)
  {
    goto LABEL_92;
  }
  operator delete(v67);
  if ((v66 & 0x80000000) == 0)
  {
LABEL_93:
    sub_8AC4C((uint64_t)v82);
    size_t v62 = (void **)v80;
    if (!v80) {
      goto LABEL_94;
    }
LABEL_101:
    unint64_t v63 = v81;
    if (v81 == v62)
    {
      double v81 = v62;
      operator delete(v62);
      if (v79 < 0) {
        goto LABEL_108;
      }
    }
    else
    {
      do
      {
        if (*((char *)v63 - 1) < 0) {
          operator delete(*(v63 - 3));
        }
        v63 -= 3;
      }
      while (v63 != v62);
      double v81 = v62;
      operator delete(v80);
      if (v79 < 0) {
        goto LABEL_108;
      }
    }
LABEL_95:
    if ((v77 & 0x80000000) == 0) {
      goto LABEL_96;
    }
    goto LABEL_109;
  }
LABEL_100:
  operator delete(v65[0]);
  sub_8AC4C((uint64_t)v82);
  size_t v62 = (void **)v80;
  if (v80) {
    goto LABEL_101;
  }
LABEL_94:
  if ((v79 & 0x80000000) == 0) {
    goto LABEL_95;
  }
LABEL_108:
  operator delete(v78);
  if ((v77 & 0x80000000) == 0)
  {
LABEL_96:
    if ((v75 & 0x80000000) == 0) {
      return;
    }
LABEL_110:
    operator delete(v74[0]);
    return;
  }
LABEL_109:
  operator delete(v76);
  if (v75 < 0) {
    goto LABEL_110;
  }
}

void sub_E48DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
}

void sub_E48E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
}

void sub_E48E20(unsigned char *a1, void *a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9 = a2[1494];
  uint64_t v10 = a2[1495];
  if (v9 != v10)
  {
    uint64_t v11 = (uint64_t *)(a5 + 224);
    do
    {
      while (1)
      {
        char v14 = *(_DWORD **)(a5 + 240);
        if (v14)
        {
          uint64_t v15 = *(int *)(a5 + 232);
          if ((int)v15 < *v14) {
            break;
          }
        }
        sub_13D97FC(*v11);
        uint64_t v13 = sub_188CDC8(a5 + 224, v12);
        sub_E13288(v9, v13);
        v9 += 608;
        if (v9 == v10) {
          goto LABEL_7;
        }
      }
      *(_DWORD *)(a5 + 232) = v15 + 1;
      sub_E13288(v9, *(void *)&v14[2 * v15 + 2]);
      v9 += 608;
    }
    while (v9 != v10);
  }
LABEL_7:
  uint64_t v16 = a2[1272];
  uint64_t v17 = a2[1273];
  while (v16 != v17)
  {
    if (sub_E404A0(a1, a2, v16))
    {
      sub_E481C8(a3, a4, v16, &__p);
      sub_E49114((uint64_t)a1, v16, (const void **)&__p.__r_.__value_.__l.__data_, a5);
      uint64_t v18 = a2[133];
      uint64_t v19 = a2[134];
      while (v18 != v19)
      {
        uint64_t v20 = *(void *)(v18 + 1736);
        uint64_t v21 = *(void *)(v18 + 1744);
        if (v20 != v21)
        {
          do
          {
            if (sub_6397A0(v20) != -1 && sub_6397A0(v20) == *(void *)(v16 + 8))
            {
              if (v20 == *(void *)(v18 + 1744)) {
                goto LABEL_14;
              }
              goto LABEL_24;
            }
            v20 += 408;
          }
          while (v20 != v21);
          uint64_t v20 = v21;
          if (v21 == *(void *)(v18 + 1744)) {
            goto LABEL_14;
          }
LABEL_24:
          sub_6396D8(v20, *(_DWORD *)(a5 + 232) - 1);
        }
LABEL_14:
        v18 += 2400;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    v16 += 104;
  }
}

void sub_E48FF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_E49018(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v8 = *(int **)(a2 + 1064);
  uint64_t v9 = *(int **)(a2 + 1072);
  if (v8 != v9)
  {
    uint64_t v10 = (uint64_t *)(a3 + 56);
    do
    {
      while (1)
      {
        uint64_t v13 = *(_DWORD **)(a3 + 72);
        if (v13)
        {
          uint64_t v14 = *(int *)(a3 + 64);
          if ((int)v14 < *v13) {
            break;
          }
        }
        uint64_t v11 = sub_13D7DD4(*v10);
        uint64_t v12 = sub_188CDC8(a3 + 56, v11);
        sub_E42A2C((uint64_t)a1, v8, v12);
        v8 += 600;
        if (v8 == v9) {
          goto LABEL_7;
        }
      }
      *(_DWORD *)(a3 + 64) = v14 + 1;
      sub_E42A2C((uint64_t)a1, v8, *(void *)&v13[2 * v14 + 2]);
      v8 += 600;
    }
    while (v8 != v9);
  }
LABEL_7:
  sub_E49DEC(a1);

  return sub_E4A63C((uint64_t)a1, a2, a3, a4 + 48);
}

void sub_E49114(uint64_t a1, uint64_t a2, const void **a3, uint64_t a4)
{
  if (sub_63A4A4(a2))
  {
    uint64_t v7 = *(void *)(a2 + 32);
    uint64_t v6 = *(void *)(a2 + 40);
    if (v7 != v6)
    {
      uint64_t v81 = a4;
      uint64_t v82 = (uint64_t *)(a4 + 224);
      uint64_t v83 = *(void *)(a2 + 40);
      while (!sub_63A048(v7))
      {
LABEL_8:
        v7 += 176;
        if (v7 == v6) {
          return;
        }
      }
      uint64_t v10 = *(_DWORD **)(a4 + 240);
      if (v10 && (uint64_t v11 = *(int *)(a4 + 232), (int)v11 < *v10))
      {
        *(_DWORD *)(a4 + 232) = v11 + 1;
        uint64_t v12 = *(void *)&v10[2 * v11 + 2];
      }
      else
      {
        sub_13D97FC(*v82);
        uint64_t v12 = sub_188CDC8((uint64_t)v82, v13);
      }
      BOOL v14 = *(_DWORD *)(a2 + 4) != 0;
      *(_DWORD *)(v12 + 16) |= 0x20u;
      *(_DWORD *)(v12 + 76) = v14;
      if (sub_63A4F0(a2))
      {
        int v15 = *(_DWORD *)(v12 + 16);
        *(_DWORD *)(v12 + 72) = *(_DWORD *)(a2 + 16);
        *(_DWORD *)(v12 + 88) = *(unsigned __int16 *)(v7 + 14);
        int v16 = *(unsigned __int16 *)(v7 + 16);
        *(_DWORD *)(v12 + 16) = v15 | 0x190;
        *(_DWORD *)(v12 + 84) = v16;
      }
      switch(*(_DWORD *)(v7 + 8))
      {
        case 1:
          *(_DWORD *)(v12 + 16) |= 4u;
          *(_DWORD *)(v12 + 64) = 2;
          int v17 = *((char *)a3 + 23);
          if (v17 >= 0) {
            size_t v18 = *((unsigned __int8 *)a3 + 23);
          }
          else {
            size_t v18 = (size_t)a3[1];
          }
          int v19 = byte_25FBC9F;
          if (byte_25FBC9F >= 0) {
            size_t v20 = byte_25FBC9F;
          }
          else {
            size_t v20 = qword_25FBC90;
          }
          unint64_t v21 = v20 + v18;
          if (v20 + v18 > 0x7FFFFFFFFFFFFFF7) {
            goto LABEL_140;
          }
          if (v21 > 0x16)
          {
            uint64_t v47 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v21 | 7) != 0x17) {
              uint64_t v47 = v21 | 7;
            }
            uint64_t v48 = v47 + 1;
            p_p = (char *)operator new(v47 + 1);
            unint64_t v49 = v48 | 0x8000000000000000;
            a4 = v81;
            *((void *)&__p + 1) = v20 + v18;
            unint64_t v86 = v49;
            *(void *)&long long __p = p_p;
            if (!v18) {
              goto LABEL_74;
            }
          }
          else
          {
            unint64_t v86 = 0;
            long long __p = 0uLL;
            p_p = (char *)&__p;
            HIBYTE(v86) = v20 + v18;
            if (!v18)
            {
LABEL_74:
              uint64_t v51 = &p_p[v18];
              if (v20)
              {
                if (v19 >= 0) {
                  uint64_t v52 = &qword_25FBC88;
                }
                else {
                  uint64_t v52 = (uint64_t *)qword_25FBC88;
                }
                memmove(v51, v52, v20);
              }
              v51[v20] = 0;
              *(_DWORD *)(v12 + 16) |= 1u;
              uint64_t v8 = *(void *)(v12 + 8);
              uint64_t v9 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
              uint64_t v6 = v83;
              if (v8) {
                uint64_t v9 = (uint64_t *)*v9;
              }
              goto LABEL_6;
            }
          }
          if (v17 >= 0) {
            int v50 = a3;
          }
          else {
            int v50 = *a3;
          }
          memmove(p_p, v50, v18);
          goto LABEL_74;
        case 2:
          *(_DWORD *)(v12 + 16) |= 4u;
          *(_DWORD *)(v12 + 64) = 2;
          int v23 = *((char *)a3 + 23);
          if (v23 >= 0) {
            size_t v24 = *((unsigned __int8 *)a3 + 23);
          }
          else {
            size_t v24 = (size_t)a3[1];
          }
          int v25 = byte_25FBCB7;
          if (byte_25FBCB7 >= 0) {
            size_t v26 = byte_25FBCB7;
          }
          else {
            size_t v26 = qword_25FBCA8;
          }
          unint64_t v27 = v26 + v24;
          if (v26 + v24 > 0x7FFFFFFFFFFFFFF7) {
            goto LABEL_140;
          }
          if (v27 <= 0x16)
          {
            unint64_t v86 = 0;
            long long __p = 0uLL;
            size_t v28 = (char *)&__p;
            HIBYTE(v86) = v26 + v24;
            if (!v24) {
              goto LABEL_86;
            }
LABEL_82:
            if (v23 >= 0) {
              uint64_t v56 = a3;
            }
            else {
              uint64_t v56 = *a3;
            }
            memmove(v28, v56, v24);
            goto LABEL_86;
          }
          uint64_t v53 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v27 | 7) != 0x17) {
            uint64_t v53 = v27 | 7;
          }
          uint64_t v54 = v53 + 1;
          size_t v28 = (char *)operator new(v53 + 1);
          unint64_t v55 = v54 | 0x8000000000000000;
          a4 = v81;
          *((void *)&__p + 1) = v26 + v24;
          unint64_t v86 = v55;
          *(void *)&long long __p = v28;
          if (v24) {
            goto LABEL_82;
          }
LABEL_86:
          uint64_t v57 = &v28[v24];
          if (v26)
          {
            if (v25 >= 0) {
              uint64_t v58 = &qword_25FBCA0;
            }
            else {
              uint64_t v58 = (uint64_t *)qword_25FBCA0;
            }
            memmove(v57, v58, v26);
          }
          v57[v26] = 0;
          *(_DWORD *)(v12 + 16) |= 1u;
          uint64_t v59 = *(void *)(v12 + 8);
          uint64_t v9 = (uint64_t *)(v59 & 0xFFFFFFFFFFFFFFFCLL);
          uint64_t v6 = v83;
          if (v59) {
            uint64_t v9 = (uint64_t *)*v9;
          }
          goto LABEL_6;
        case 3:
          *(_DWORD *)(v12 + 16) |= 4u;
          *(_DWORD *)(v12 + 64) = 1;
          int v29 = *((char *)a3 + 23);
          if (v29 >= 0) {
            size_t v30 = *((unsigned __int8 *)a3 + 23);
          }
          else {
            size_t v30 = (size_t)a3[1];
          }
          int v31 = byte_25FBCCF;
          if (byte_25FBCCF >= 0) {
            size_t v32 = byte_25FBCCF;
          }
          else {
            size_t v32 = qword_25FBCC0;
          }
          unint64_t v33 = v32 + v30;
          if (v32 + v30 > 0x7FFFFFFFFFFFFFF7) {
            goto LABEL_140;
          }
          if (v33 <= 0x16)
          {
            unint64_t v86 = 0;
            long long __p = 0uLL;
            uint64_t v34 = (char *)&__p;
            HIBYTE(v86) = v32 + v30;
            if (!v30) {
              goto LABEL_101;
            }
LABEL_97:
            if (v29 >= 0) {
              unint64_t v63 = a3;
            }
            else {
              unint64_t v63 = *a3;
            }
            memmove(v34, v63, v30);
            goto LABEL_101;
          }
          uint64_t v60 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v33 | 7) != 0x17) {
            uint64_t v60 = v33 | 7;
          }
          uint64_t v61 = v60 + 1;
          uint64_t v34 = (char *)operator new(v60 + 1);
          unint64_t v62 = v61 | 0x8000000000000000;
          a4 = v81;
          *((void *)&__p + 1) = v32 + v30;
          unint64_t v86 = v62;
          *(void *)&long long __p = v34;
          if (v30) {
            goto LABEL_97;
          }
LABEL_101:
          unint64_t v64 = &v34[v30];
          if (v32)
          {
            if (v31 >= 0) {
              uint64_t v65 = &qword_25FBCB8;
            }
            else {
              uint64_t v65 = (uint64_t *)qword_25FBCB8;
            }
            memmove(v64, v65, v32);
          }
          v64[v32] = 0;
          *(_DWORD *)(v12 + 16) |= 1u;
          uint64_t v66 = *(void *)(v12 + 8);
          uint64_t v9 = (uint64_t *)(v66 & 0xFFFFFFFFFFFFFFFCLL);
          uint64_t v6 = v83;
          if (v66) {
            uint64_t v9 = (uint64_t *)*v9;
          }
          goto LABEL_6;
        case 4:
          *(_DWORD *)(v12 + 16) |= 4u;
          *(_DWORD *)(v12 + 64) = 1;
          int v35 = *((char *)a3 + 23);
          if (v35 >= 0) {
            size_t v36 = *((unsigned __int8 *)a3 + 23);
          }
          else {
            size_t v36 = (size_t)a3[1];
          }
          int v37 = byte_25FBCE7;
          if (byte_25FBCE7 >= 0) {
            size_t v38 = byte_25FBCE7;
          }
          else {
            size_t v38 = qword_25FBCD8;
          }
          unint64_t v39 = v38 + v36;
          if (v38 + v36 > 0x7FFFFFFFFFFFFFF7) {
            goto LABEL_140;
          }
          if (v39 <= 0x16)
          {
            unint64_t v86 = 0;
            long long __p = 0uLL;
            uint64_t v40 = (char *)&__p;
            HIBYTE(v86) = v38 + v36;
            if (!v36) {
              goto LABEL_116;
            }
LABEL_112:
            if (v35 >= 0) {
              char v70 = a3;
            }
            else {
              char v70 = *a3;
            }
            memmove(v40, v70, v36);
            goto LABEL_116;
          }
          uint64_t v67 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v39 | 7) != 0x17) {
            uint64_t v67 = v39 | 7;
          }
          uint64_t v68 = v67 + 1;
          uint64_t v40 = (char *)operator new(v67 + 1);
          unint64_t v69 = v68 | 0x8000000000000000;
          a4 = v81;
          *((void *)&__p + 1) = v38 + v36;
          unint64_t v86 = v69;
          *(void *)&long long __p = v40;
          if (v36) {
            goto LABEL_112;
          }
LABEL_116:
          uint64_t v71 = &v40[v36];
          if (v38)
          {
            if (v37 >= 0) {
              char v72 = &qword_25FBCD0;
            }
            else {
              char v72 = (uint64_t *)qword_25FBCD0;
            }
            memmove(v71, v72, v38);
          }
          v71[v38] = 0;
          *(_DWORD *)(v12 + 16) |= 1u;
          uint64_t v73 = *(void *)(v12 + 8);
          uint64_t v9 = (uint64_t *)(v73 & 0xFFFFFFFFFFFFFFFCLL);
          uint64_t v6 = v83;
          if (v73) {
            uint64_t v9 = (uint64_t *)*v9;
          }
          goto LABEL_6;
        case 5:
          *(_DWORD *)(v12 + 16) |= 4u;
          *(_DWORD *)(v12 + 64) = 1;
          int v41 = *((char *)a3 + 23);
          if (v41 >= 0) {
            size_t v42 = *((unsigned __int8 *)a3 + 23);
          }
          else {
            size_t v42 = (size_t)a3[1];
          }
          int v43 = byte_25FBCFF;
          if (byte_25FBCFF >= 0) {
            size_t v44 = byte_25FBCFF;
          }
          else {
            size_t v44 = qword_25FBCF0;
          }
          unint64_t v45 = v44 + v42;
          if (v44 + v42 > 0x7FFFFFFFFFFFFFF7) {
LABEL_140:
          }
            sub_188D690();
          if (v45 <= 0x16)
          {
            unint64_t v86 = 0;
            long long __p = 0uLL;
            char v46 = (char *)&__p;
            HIBYTE(v86) = v44 + v42;
            if (!v42) {
              goto LABEL_131;
            }
LABEL_127:
            if (v41 >= 0) {
              char v77 = a3;
            }
            else {
              char v77 = *a3;
            }
            memmove(v46, v77, v42);
            goto LABEL_131;
          }
          uint64_t v74 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v45 | 7) != 0x17) {
            uint64_t v74 = v45 | 7;
          }
          uint64_t v75 = v74 + 1;
          char v46 = (char *)operator new(v74 + 1);
          unint64_t v76 = v75 | 0x8000000000000000;
          a4 = v81;
          *((void *)&__p + 1) = v44 + v42;
          unint64_t v86 = v76;
          *(void *)&long long __p = v46;
          if (v42) {
            goto LABEL_127;
          }
LABEL_131:
          int v78 = &v46[v42];
          if (v44)
          {
            if (v43 >= 0) {
              char v79 = &qword_25FBCE8;
            }
            else {
              char v79 = (uint64_t *)qword_25FBCE8;
            }
            memmove(v78, v79, v44);
          }
          v78[v44] = 0;
          *(_DWORD *)(v12 + 16) |= 1u;
          uint64_t v80 = *(void *)(v12 + 8);
          uint64_t v9 = (uint64_t *)(v80 & 0xFFFFFFFFFFFFFFFCLL);
          uint64_t v6 = v83;
          if (v80) {
            uint64_t v9 = (uint64_t *)*v9;
          }
LABEL_6:
          sub_1881E08((uint64_t *)(v12 + 48), &__p, v9);
          if (SHIBYTE(v86) < 0) {
            operator delete((void *)__p);
          }
          goto LABEL_8;
        default:
          goto LABEL_8;
      }
    }
  }
}

void sub_E49878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_E498B8()
{
  sub_7BD6C(v0);
}

void sub_E49D4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E49D60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E49D74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E49D88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E49D9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E49DB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E49DC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E49DD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_E49DEC(uint64_t *result)
{
  if (!*(unsigned char *)(*result + 3))
  {
    sub_458644(v3, result[2]);
    uint64_t v1 = v3;
    char v2 = 0;
    sub_1106C64();
  }
  return result;
}

void sub_E49F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1106CAC(&a14);
  _Unwind_Resume(a1);
}

void sub_E49F64(uint64_t a1, void *a2, unsigned int a3, void *a4, unsigned int *a5, _DWORD *a6, char ***a7, void **a8)
{
  uint64_t v9 = a1;
  uint64_t v50 = a2[134];
  uint64_t v52 = a2[133];
  sub_E4BF6C(a1, a2, a3, (void *)(v52 + 2400 * a3), a5, &__p);
  if (v61 != __p)
  {
    uint64_t v11 = 0;
    unint64_t v55 = 0xAAAAAAAAAAAAAAABLL * ((v61 - (unsigned char *)__p) >> 3);
    do
    {
      BOOL v14 = __p;
      if (v11 == -1 - 0x5555555555555555 * ((v61 - (unsigned char *)__p) >> 3))
      {
        uint64_t v15 = *((unsigned int *)__p + 6 * v11 + 3);
        BOOL v16 = sub_46C760(a2) - 1 == v15;
        if (!v11) {
          goto LABEL_8;
        }
      }
      else
      {
        BOOL v16 = 0;
        if (!v11)
        {
LABEL_8:
          BOOL v17 = v14[3] == 0;
          if (LOBYTE(v14[6 * v11 + 5])) {
            goto LABEL_12;
          }
          goto LABEL_5;
        }
      }
      BOOL v17 = 0;
      if (LOBYTE(v14[6 * v11 + 5]))
      {
LABEL_12:
        if (BYTE1(v14[6 * v11 + 4]) && *(unsigned char *)(*(void *)v9 + 2))
        {
          int v18 = sub_1106DFC((uint64_t)a7);
          a6[10] |= 0x40000000u;
          a6[79] = v18;
        }
        if (HIBYTE(v14[6 * v11 + 4]) && *(unsigned char *)(*(void *)v9 + 2))
        {
          int v19 = sub_1106DFC((uint64_t)a7);
          a6[11] |= 1u;
          a6[81] = v19;
        }
        if (BYTE2(v14[6 * v11 + 4]))
        {
          uint64_t v20 = *(void *)v9;
          if (*(unsigned char *)(*(void *)v9 + 2))
          {
            int v21 = sub_1106DFC((uint64_t)a7);
            a6[10] |= 0x80000000;
            a6[80] = v21;
            uint64_t v20 = *(void *)v9;
          }
          if (*(_DWORD *)(v20 + 44))
          {
            int v22 = -1431655765 * ((unint64_t)((unsigned char *)a8[1] - (unsigned char *)*a8) >> 2);
            a6[10] |= 0x20000000u;
            a6[78] = v22;
          }
        }
        uint64_t v23 = v9;
        size_t v24 = (char *)&v14[6 * v11];
        int v25 = *((_DWORD *)v24 + 2);
        LODWORD(v10) = *(_DWORD *)v24;
        int v26 = sub_1106B8C((double)v10 * 360.0 / 4294967300.0 + -180.0);
        LODWORD(v27) = *((_DWORD *)v24 + 1);
        long double v28 = exp((double)v27 * -6.28318531 / 4294967300.0 + 3.14159265);
        long double v29 = atan((v28 + -1.0 / v28) * 0.5);
        int v30 = sub_1106A34(v29 * 57.2957795);
        sub_40A2D8(&v59, v26, v30, v25);
        if (v24[16]) {
          int v31 = 1;
        }
        else {
          int v31 = v16;
        }
        if ((v31 | v17) == 1)
        {
          uint64_t v32 = sub_46C8EC(a2, v14[6 * v11 + 3]);
          sub_E1A654(a4, *(void *)(v32 + 32), (unsigned int *)&v59, (uint64_t)v58);
        }
        else
        {
          sub_11053FC((uint64_t)v58, &v59);
        }
        sub_1106E10(a7, v58);
        uint64_t v34 = (char *)a8[1];
        unint64_t v33 = (unint64_t)a8[2];
        if ((unint64_t)v34 < v33)
        {
          uint64_t v12 = *(void *)v24;
          *((_DWORD *)v34 + 2) = *((_DWORD *)v24 + 2);
          *(void *)uint64_t v34 = v12;
          uint64_t v13 = v34 + 12;
          uint64_t v9 = v23;
        }
        else
        {
          int v35 = (char *)*a8;
          unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((v34 - (unsigned char *)*a8) >> 2);
          unint64_t v37 = v36 + 1;
          if (v36 + 1 > 0x1555555555555555) {
            sub_2E00();
          }
          unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (void)v35) >> 2);
          if (2 * v38 > v37) {
            unint64_t v37 = 2 * v38;
          }
          if (v38 >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v39 = 0x1555555555555555;
          }
          else {
            unint64_t v39 = v37;
          }
          if (v39)
          {
            if (v39 > 0x1555555555555555) {
              sub_188D718();
            }
            uint64_t v40 = (char *)operator new(12 * v39);
          }
          else
          {
            uint64_t v40 = 0;
          }
          uint64_t v41 = *(void *)v24;
          size_t v42 = &v40[12 * v36];
          *((_DWORD *)v42 + 2) = *((_DWORD *)v24 + 2);
          *(void *)size_t v42 = v41;
          int v43 = v42;
          uint64_t v9 = v23;
          if (v34 != v35)
          {
            do
            {
              uint64_t v44 = *(void *)(v34 - 12);
              v34 -= 12;
              int v45 = *((_DWORD *)v34 + 2);
              *(void *)(v43 - 12) = v44;
              v43 -= 12;
              *((_DWORD *)v43 + 2) = v45;
            }
            while (v34 != v35);
            uint64_t v34 = (char *)*a8;
          }
          uint64_t v13 = v42 + 12;
          *a8 = v43;
          a8[1] = v42 + 12;
          a8[2] = &v40[12 * v39];
          if (v34) {
            operator delete(v34);
          }
        }
        a8[1] = v13;
      }
LABEL_5:
      ++v11;
    }
    while (v11 != v55);
  }
  uint64_t v46 = 0x2FC962FC962FC963 * ((v50 - v52) >> 5) - 1;
  if (!a3 || v46 == a3 || *(_DWORD *)(v52 + 2400 * a3 + 160) == 16)
  {
    if (v46 == a3)
    {
      int v47 = sub_1106DFC((uint64_t)a7) - 1;
      uint64_t v48 = -1 - 0x5555555555555555 * (((unsigned char *)a8[1] - (unsigned char *)*a8) >> 2);
      uint64_t v49 = *(void *)v9;
      if (!*(unsigned char *)(*(void *)v9 + 2))
      {
LABEL_53:
        if (*(_DWORD *)(v49 + 44))
        {
          a6[10] |= 0x20000000u;
          a6[78] = v48;
        }
        goto LABEL_55;
      }
    }
    else
    {
      int v47 = sub_1106DFC((uint64_t)a7);
      uint64_t v48 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a8[1] - (unsigned char *)*a8) >> 2);
      uint64_t v49 = *(void *)v9;
      if (!*(unsigned char *)(*(void *)v9 + 2)) {
        goto LABEL_53;
      }
    }
    a6[10] |= 0x80000000;
    a6[80] = v47;
    goto LABEL_53;
  }
LABEL_55:
  if (__p)
  {
    uint64_t v61 = __p;
    operator delete(__p);
  }
}

void sub_E4A4CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_E4A504()
{
}

void sub_E4A628(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1108FEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_E4A63C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(*(void *)result + 3))
  {
    uint64_t v7 = result;
    uint64_t v21 = a3;
    sub_426BFC(result + 88, a2, &v21, 1, 0, v22);
    if (*(unsigned char *)(v7 + 48)) {
      BOOL v8 = *(void *)(a2 + 504) <= *(void *)(v7 + 56);
    }
    else {
      BOOL v8 = 0;
    }
    sub_E4CD34(v7, (uint64_t)v22, *(unsigned __int8 *)(a2 + 9976) != 0, v8, a4);
    uint64_t v14 = 0;
    *(void *)&long long __p = 0x4039000000000000;
    *((void *)&__p + 1) = 5000;
    long long v12 = xmmword_20E7C10;
    long long v13 = xmmword_20E7C20;
    uint64_t v15 = 20000000;
    uint64_t v16 = 0x3FF199999999999ALL;
    uint64_t v17 = 0x3E800002710;
    uint64_t v18 = 0xA00002710;
    long long v19 = xmmword_20E7C00;
    long long v20 = 0x3FE6147AE147AE14uLL;
    sub_1109790((uint64_t)&__p, (uint64_t)v22);
    sub_188B428((uint64_t)v22, (uint64_t)&__p);
    *(_DWORD *)(a3 + 40) |= 0x100u;
    uint64_t v9 = *(void *)(a3 + 8);
    unint64_t v10 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
    if (v9) {
      unint64_t v10 = (uint64_t *)*v10;
    }
    sub_1881E08((uint64_t *)(a3 + 720), &__p, v10);
    if (SBYTE7(v12) < 0) {
      operator delete((void *)__p);
    }
    return sub_1116458(v22);
  }
  return result;
}

void sub_E4A7D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_1116458(v14 - 96);
    _Unwind_Resume(a1);
  }
  sub_1116458(v14 - 96);
  _Unwind_Resume(a1);
}

void sub_E4A838(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 80)) {
    return;
  }
  size_t v42 = 0;
  int v43 = 0;
  uint64_t v44 = 0;
  if (!sub_64F0E0(a2)) {
    goto LABEL_20;
  }
  unint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v6 = (uint64_t *)sub_376F8C(*(void **)(a1 + 8));
  uint64_t v7 = sub_374DF4(a2);
  unsigned int v46 = *(_DWORD *)(v7 + 112);
  if (v46 <= 1) {
    uint64_t v45 = *(void *)(v7 + 104);
  }
  sub_28E4E4(v6, (uint64_t)&v45, (unint64_t)&v28);
  sub_30C0C(&v39, v35);
  char v27 = 17;
  strcpy(__p, "Charging Stations");
  sub_DEC58C((uint64_t *)&v42, (uint64_t *)&v39, (uint64_t)__p, 0xFFFFFFFF, 0, 0, 0.0);
  if (v27 < 0) {
    operator delete(*(void **)__p);
  }
  sub_8AC4C((uint64_t)&v38);
  BOOL v8 = (void **)v36;
  if (v36)
  {
    uint64_t v9 = v37;
    unint64_t v10 = v36;
    if (v37 != v36)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      unint64_t v10 = v36;
    }
    unint64_t v37 = v8;
    operator delete(v10);
  }
  if ((v34 & 0x80000000) == 0)
  {
    if ((v32 & 0x80000000) == 0) {
      goto LABEL_17;
    }
LABEL_51:
    operator delete(v31);
    if ((v30 & 0x80000000) == 0)
    {
LABEL_18:
      uint64_t v11 = v39;
      if (!v39) {
        goto LABEL_20;
      }
      goto LABEL_19;
    }
    goto LABEL_52;
  }
  operator delete(v33);
  if (v32 < 0) {
    goto LABEL_51;
  }
LABEL_17:
  if ((v30 & 0x80000000) == 0) {
    goto LABEL_18;
  }
LABEL_52:
  operator delete(v28);
  uint64_t v11 = v39;
  if (v39)
  {
LABEL_19:
    uint64_t v40 = v11;
    operator delete(v11);
  }
LABEL_20:
  uint64_t v12 = *(void *)(a2 + 7352);
  for (uint64_t i = *(void *)(a2 + 7360); v12 != i; v12 += 1120)
  {
    if (sub_605454(v12))
    {
      if (!*(unsigned char *)(v12 + 1112))
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_2439078;
      }
      uint64_t v14 = *(void **)(v12 + 1088);
      uint64_t v15 = *(void **)(v12 + 1096);
      while (v14 != v15)
      {
        std::operator+<char>();
        sub_DEC668((uint64_t *)&v42, v14, (uint64_t)&v28, 0xFFFFFFFF, 0, 0, 0.0);
        if (v30 < 0) {
          operator delete(v28);
        }
        v14 += 32;
      }
    }
  }
  sub_DEC8F0(&v42, (uint64_t)&v28);
  uint64_t v16 = (char *)v28;
  uint64_t v17 = v29;
  if (v28 != v29)
  {
    uint64_t v18 = (uint64_t **)(a3 + 16);
    do
    {
      long long v19 = (std::string *)sub_1884274(v18, dword_254EA30, 11, (uint64_t)&off_252CDD0, 0);
      sub_11B9D5C(v19, (uint64_t)v16);
      v16 += 48;
    }
    while (v16 != v17);
    uint64_t v16 = (char *)v28;
  }
  if (v16)
  {
    uint64_t v20 = (uint64_t)v29;
    uint64_t v21 = v16;
    if (v29 != v16)
    {
      do
        uint64_t v20 = sub_11B9574(v20 - 48);
      while ((char *)v20 != v16);
      uint64_t v21 = v28;
    }
    long double v29 = v16;
    operator delete(v21);
  }
  int v22 = v42;
  if (v42)
  {
    uint64_t v23 = v43;
    size_t v24 = v42;
    if (v43 == v42)
    {
LABEL_48:
      int v43 = v22;
      operator delete(v24);
      return;
    }
    while (1)
    {
      if (*(v23 - 25) < 0)
      {
        operator delete(*((void **)v23 - 6));
        if ((*(v23 - 49) & 0x80000000) == 0) {
          goto LABEL_43;
        }
LABEL_46:
        operator delete(*((void **)v23 - 9));
        v23 -= 80;
        if (v23 == v22)
        {
LABEL_47:
          size_t v24 = v42;
          goto LABEL_48;
        }
      }
      else
      {
        if (*(v23 - 49) < 0) {
          goto LABEL_46;
        }
LABEL_43:
        v23 -= 80;
        if (v23 == v22) {
          goto LABEL_47;
        }
      }
    }
  }
}

void sub_E4ABF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_28ED98((uint64_t)&a15);
  int v22 = *(void **)(v20 - 136);
  if (v22)
  {
    *(void *)(v20 - 128) = v22;
    operator delete(v22);
    sub_CBDA74((void **)(v20 - 112));
    _Unwind_Resume(a1);
  }
  sub_CBDA74((void **)(v20 - 112));
  _Unwind_Resume(a1);
}

void sub_E4ACAC(uint64_t a1, void *a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 81))
  {
    char v34 = 0;
    int v35 = 0;
    uint64_t v36 = 0;
    uint64_t v5 = a2[1510];
    uint64_t v6 = a2[1511];
    while (v5 != v6)
    {
      if (sub_63BD14(*(_DWORD *)(v5 + 40)))
      {
        sub_63C4E0(*(_DWORD *)v5, (uint64_t)&__p);
        sub_DEC58C((uint64_t *)&v34, (uint64_t *)(v5 + 8), (uint64_t)&__p, 0xFFFFFFFF, *(_DWORD *)v5, *(_DWORD *)(v5 + 40), *(double *)(v5 + 32));
        if (SHIBYTE(v33) < 0) {
          operator delete(__p);
        }
      }
      v5 += 48;
    }
    sub_DECABC((char **)&v34, (uint64_t)&__p);
    uint64_t v7 = (char *)__p;
    BOOL v8 = (char *)v32;
    if (__p != v32)
    {
      do
      {
        uint64_t v9 = (std::string *)sub_1884274((uint64_t **)(a3 + 16), dword_254EA40, 11, (uint64_t)&off_252CE00, 0);
        sub_11BAB60(v9, (uint64_t)v7);
        v7 += 72;
      }
      while (v7 != v8);
      uint64_t v7 = (char *)__p;
    }
    if (v7)
    {
      uint64_t v10 = (uint64_t)v32;
      uint64_t v11 = v7;
      if (v32 != (void **)v7)
      {
        do
          uint64_t v10 = sub_11B9F24(v10 - 72);
        while ((char *)v10 != v7);
        uint64_t v11 = __p;
      }
      char v32 = (void **)v7;
      operator delete(v11);
    }
    long long __p = 0;
    char v32 = 0;
    uint64_t v33 = 0;
    uint64_t v12 = (uint64_t *)a2[1515];
    if (!v12)
    {
LABEL_17:
      sub_DECABC((char **)&__p, (uint64_t)&v28);
      long long v13 = (char *)v28;
      uint64_t v14 = v29;
      if (v28 != v29)
      {
        uint64_t v15 = (uint64_t **)(a3 + 16);
        do
        {
          uint64_t v16 = (std::string *)sub_1884274(v15, dword_254EA50, 11, (uint64_t)&off_252CE00, 0);
          sub_11BAB60(v16, (uint64_t)v13);
          v13 += 72;
        }
        while (v13 != v14);
        long long v13 = (char *)v28;
      }
      if (v13)
      {
        uint64_t v17 = (uint64_t)v29;
        uint64_t v18 = v13;
        if (v29 != v13)
        {
          do
            uint64_t v17 = sub_11B9F24(v17 - 72);
          while ((char *)v17 != v13);
          uint64_t v18 = v28;
        }
        long double v29 = v13;
        operator delete(v18);
      }
      long long v19 = (void **)__p;
      if (!__p)
      {
LABEL_43:
        uint64_t v23 = (void **)v34;
        if (!v34) {
          return;
        }
        size_t v24 = v35;
        int v25 = v34;
        if (v35 == v34)
        {
LABEL_53:
          int v35 = v23;
          operator delete(v25);
          return;
        }
        while (1)
        {
          if (*((char *)v24 - 25) < 0)
          {
            operator delete(*(v24 - 6));
            if (*((char *)v24 - 49) < 0) {
LABEL_51:
            }
              operator delete(*(v24 - 9));
          }
          else if (*((char *)v24 - 49) < 0)
          {
            goto LABEL_51;
          }
          v24 -= 10;
          if (v24 == v23)
          {
            int v25 = v34;
            goto LABEL_53;
          }
        }
      }
      uint64_t v20 = v32;
      uint64_t v21 = __p;
      if (v32 == __p)
      {
LABEL_42:
        char v32 = v19;
        operator delete(v21);
        goto LABEL_43;
      }
      while (1)
      {
        if (*((char *)v20 - 25) < 0)
        {
          operator delete(*(v20 - 6));
          if (*((char *)v20 - 49) < 0) {
LABEL_40:
          }
            operator delete(*(v20 - 9));
        }
        else if (*((char *)v20 - 49) < 0)
        {
          goto LABEL_40;
        }
        v20 -= 10;
        if (v20 == v19)
        {
          uint64_t v21 = __p;
          goto LABEL_42;
        }
      }
    }
    while (1)
    {
      long double v28 = 0;
      long double v29 = 0;
      uint64_t v30 = 0;
      sub_63C4E0(*((_DWORD *)v12 + 4), (uint64_t)v26);
      sub_DEC58C((uint64_t *)&v34, (uint64_t *)&v28, (uint64_t)v26, 0xFFFFFFFF, *((_DWORD *)v12 + 4), *((_DWORD *)v12 + 16), *((double *)v12 + 7));
      if ((v27 & 0x80000000) == 0) {
        break;
      }
      operator delete(v26[0]);
      int v22 = (char *)v28;
      if (v28) {
        goto LABEL_34;
      }
LABEL_29:
      uint64_t v12 = (uint64_t *)*v12;
      if (!v12) {
        goto LABEL_17;
      }
    }
    int v22 = (char *)v28;
    if (!v28) {
      goto LABEL_29;
    }
LABEL_34:
    long double v29 = v22;
    operator delete(v22);
    goto LABEL_29;
  }
}

void sub_E4AFC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24)
{
}

void sub_E4B084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_E4373C((void **)va);
  JUMPOUT(0xE4B090);
}

void sub_E4B0A0(uint64_t a1, void *a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 82))
  {
    uint64_t v3 = sub_1883FB0((void *)(a3 + 16), dword_254EA60, 11, (uint64_t)&off_252CE48, 0);
    unint64_t v156 = sub_46C760(a2);
    if (v156)
    {
      uint64_t v160 = 0;
      double v152 = (uint64_t *)(v3 + 16);
      uint64_t v155 = v3;
      while (1)
      {
        uint64_t v4 = *(_DWORD **)(v3 + 32);
        if (v4 && (uint64_t v5 = *(int *)(v3 + 24), (int)v5 < *v4))
        {
          *(_DWORD *)(v3 + 24) = v5 + 1;
          uint64_t v6 = *(void *)&v4[2 * v5 + 2];
        }
        else
        {
          uint64_t v7 = sub_11BF538(*v152);
          uint64_t v6 = sub_188CDC8((uint64_t)v152, (uint64_t)v7);
        }
        uint64_t v158 = *(void *)(sub_46C8EC(a2, v160) + 32);
        sub_2954EC(*(void *)(a1 + 16), v158, (uint64_t)&v177);
        sub_2E51EC((uint64_t)&v177, (uint64_t)&v165);
        if (v180)
        {
          if (v178 == v179) {
            LODWORD(v8) = 0;
          }
          else {
            LODWORD(v8) = -1;
          }
          unsigned int v9 = v173;
          int v161 = v8;
          if (v172 != v8 || v173 != v8) {
            break;
          }
          goto LABEL_208;
        }
        if (v178 != v179)
        {
          unint64_t v11 = *((void *)v179 - 1);
          uint64_t v12 = sub_2964C4(v177, v11, 1);
          long long v13 = &v12[*(unsigned __int16 *)&v12[-*(int *)v12 + 4]];
          uint64_t v14 = (uint64_t)&v13[4 * HIDWORD(v11) + *(unsigned int *)v13];
          uint64_t v15 = (int *)(v14 + 4 + *(unsigned int *)(v14 + 4));
          unint64_t v8 = (unint64_t)(v179 - v178) >> 3;
          uint64_t v16 = (unsigned int *)((char *)v15 + *(unsigned __int16 *)((char *)v15 - *v15 + 6));
          unsigned int v9 = v173;
          int v161 = *(unsigned int *)((char *)v16 + *v16);
          if (v172 != v8 || v173 != *(unsigned int *)((char *)v16 + *v16)) {
            break;
          }
          goto LABEL_208;
        }
        LODWORD(v8) = 0;
        unsigned int v9 = v173;
        int v161 = 0;
        if (v172 || v173 != 0) {
          break;
        }
LABEL_208:
        uint64_t v142 = nullsub_1(a2[1248] + 40 * v160);
        size_t v144 = *(_DWORD **)v142;
        unint64_t v145 = *(_DWORD **)(v142 + 8);
        if (*(_DWORD **)v142 != v145)
        {
          do
          {
            unint64_t v146 = *(_DWORD **)(v6 + 64);
            if (v146 && (uint64_t v147 = *(int *)(v6 + 56), (int)v147 < *v146))
            {
              *(_DWORD *)(v6 + 56) = v147 + 1;
              uint64_t v148 = *(void *)&v146[2 * v147 + 2];
            }
            else
            {
              uint64_t v149 = sub_15C1918(*(void *)(v6 + 48));
              uint64_t v148 = sub_188CDC8(v6 + 48, v149);
            }
            sub_E11384(v144, v148, v143);
            v144 += 3;
          }
          while (v144 != v145);
        }
        sub_6BAC((uint64_t)&v165);
        sub_2DD928(&v165, v158);
        std::stringbuf::str();
        *(_DWORD *)(v6 + 16) |= 1u;
        uint64_t v150 = *(void *)(v6 + 8);
        std::string::size_type v151 = (uint64_t *)(v150 & 0xFFFFFFFFFFFFFFFCLL);
        if (v150) {
          std::string::size_type v151 = (uint64_t *)*v151;
        }
        sub_1881E08((uint64_t *)(v6 + 72), (long long *)__p, v151);
        if (v164 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v165 = v154;
        *(uint64_t *)((char *)&v165 + *(void *)(v154 - 24)) = v153;
        if (v176 < 0) {
          operator delete(v175);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
        if (v178)
        {
          int v179 = v178;
          operator delete(v178);
        }
        uint64_t v3 = v155;
        if (++v160 == v156) {
          return;
        }
      }
      uint64_t v162 = (uint64_t *)(v6 + 24);
      long long v19 = v168;
      while (1)
      {
        uint64_t v20 = &v19[v9];
        int v21 = *((unsigned __int16 *)v20 + 2);
        int v22 = *((unsigned __int16 *)v20 + 3);
        unsigned int v23 = sub_511FC(v170);
        unsigned int v24 = v170 & ~(-1 << (v23 & 0xFE));
        int v25 = sub_51938(v24);
        int v26 = sub_51938(v24 >> 1);
        long double v28 = (unsigned __int16 *)((char *)v167 - *v167);
        unsigned int v29 = *v28;
        if (v29 < 0xD) {
          break;
        }
        if (!v28[6]) {
          goto LABEL_37;
        }
        int v30 = *(int *)((char *)&v167[v173 + 1] + v28[6] + *(unsigned int *)((char *)v167 + v28[6]));
LABEL_44:
        int v34 = 1 << -(v23 >> 1);
        if (v23 < 2) {
          int v34 = -2;
        }
        LODWORD(v35) = v26 * v34 + 4 * v22;
        if (v35 >= 0xFFFFFFFE) {
          uint64_t v35 = 4294967294;
        }
        else {
          uint64_t v35 = v35;
        }
        __p[0] = (void *)((v25 * v34 + 4 * v21) | (unint64_t)(v35 << 32));
        LODWORD(__p[1]) = v30;
        uint64_t v36 = *(_DWORD **)(v6 + 40);
        if (v36 && (uint64_t v37 = *(int *)(v6 + 32), (int)v37 < *v36))
        {
          *(_DWORD *)(v6 + 32) = v37 + 1;
          uint64_t v38 = *(void *)&v36[2 * v37 + 2];
        }
        else
        {
          uint64_t v39 = sub_15C1918(*v162);
          uint64_t v38 = sub_188CDC8((uint64_t)v162, v39);
        }
        sub_E11384(__p, v38, v27);
        uint64_t v40 = v173;
        if (v174)
        {
          unsigned int v9 = --v173;
          long long v19 = v168;
          if ((v40 - 1) < *v168)
          {
            uint64_t v41 = (unsigned __int16 *)&v168[v40 + 1];
            size_t v42 = (unsigned __int16 *)&v168[v9 + 1];
            if (*v41 != *v42) {
              goto LABEL_31;
            }
            if (v41[1] != v42[1]) {
              goto LABEL_31;
            }
            int v43 = *v166;
            uint64_t v44 = (char *)v166[1] - (char *)*v166;
            if (*v168 == 2 && v44 == 8) {
              goto LABEL_31;
            }
            unsigned int v9 = v40 - 2;
            unsigned int v45 = --v172;
            unsigned int v173 = v9;
            if (v172 >= (unint64_t)(v44 >> 3)) {
              goto LABEL_31;
            }
LABEL_69:
            while (2)
            {
              unint64_t v52 = *((void *)v43 + v45);
              unsigned int v170 = v52;
              uint64_t v53 = v165;
              int v181 = 1;
              v182[0] = v52;
              __p[0] = &v181;
              __p[1] = v182;
              unint64_t v54 = *(void *)(v165 + 3856) + 1;
              *(void *)(v165 + 3856) = v54;
              if (*(void *)v53)
              {
                uint64_t v55 = v53 + 16;
                if (*(_DWORD *)(v53 + 112) == v52)
                {
                  unsigned int v56 = 4;
                  goto LABEL_78;
                }
                if (*(_DWORD *)(v53 + 136) == v52)
                {
                  unsigned int v56 = 5;
                  goto LABEL_78;
                }
                if (*(_DWORD *)(v53 + 160) == v52)
                {
                  unsigned int v56 = 6;
                  goto LABEL_78;
                }
                if (*(_DWORD *)(v53 + 184) == v52)
                {
                  unsigned int v56 = 7;
LABEL_78:
                  ++*(void *)(v53 + 3864);
                  uint64_t v57 = v55 + 24 * v56;
                  *(void *)(v57 + 8) = v54;
                  uint64_t v58 = *(unsigned int **)(v57 + 16);
                  if (v58)
                  {
LABEL_79:
                    uint64_t v59 = (int *)((char *)v58 + *v58);
                    uint64_t v60 = (unsigned __int16 *)((char *)v59 - *v59);
                    if (*v60 < 7u)
                    {
LABEL_96:
                      int v70 = 0;
                      goto LABEL_97;
                    }
LABEL_94:
                    uint64_t v69 = v60[3];
                    if (!v69) {
                      goto LABEL_96;
                    }
                    int v70 = *(int *)((char *)v59 + v69);
LABEL_97:
                    int v171 = v70;
                    uint64_t v71 = v165;
                    unsigned int v72 = v170;
                    int v181 = 1;
                    v182[0] = v170;
                    __p[0] = &v181;
                    __p[1] = v182;
                    unint64_t v73 = *(void *)(v165 + 3856) + 1;
                    *(void *)(v165 + 3856) = v73;
                    if (*(void *)v71)
                    {
                      uint64_t v74 = v71 + 16;
                      if (*(_DWORD *)(v71 + 112) == v72)
                      {
                        unsigned int v75 = 4;
                        goto LABEL_106;
                      }
                      if (*(_DWORD *)(v71 + 136) == v72)
                      {
                        unsigned int v75 = 5;
                        goto LABEL_106;
                      }
                      if (*(_DWORD *)(v71 + 160) == v72)
                      {
                        unsigned int v75 = 6;
                        goto LABEL_106;
                      }
                      if (*(_DWORD *)(v71 + 184) == v72)
                      {
                        unsigned int v75 = 7;
LABEL_106:
                        ++*(void *)(v71 + 3864);
                        uint64_t v76 = v74 + 24 * v75;
                        *(void *)(v76 + 8) = v73;
                        char v77 = *(unsigned int **)(v76 + 16);
                        if (v77)
                        {
LABEL_107:
                          int v78 = (int *)((char *)v77 + *v77);
                          char v79 = (unsigned __int16 *)((char *)v78 - *v78);
                          if (*v79 < 5u)
                          {
LABEL_124:
                            uint64_t v89 = 0;
                            goto LABEL_125;
                          }
LABEL_122:
                          uint64_t v88 = v79[2];
                          if (!v88) {
                            goto LABEL_124;
                          }
                          uint64_t v89 = (char *)v78 + v88 + *(unsigned int *)((char *)v78 + v88);
LABEL_125:
                          unint64_t v90 = &v89[4 * HIDWORD(v52) + 4 + *(unsigned int *)&v89[4 * HIDWORD(v52) + 4]];
                          uint64_t v167 = (int *)v90;
                          double v91 = &v90[-*(int *)v90];
                          unsigned int v92 = *(unsigned __int16 *)v91;
                          if (v92 <= 6)
                          {
                            long long v19 = 0;
                            uint64_t v94 = 0;
                            long long v168 = 0;
                          }
                          else
                          {
                            long long v19 = (_DWORD *)*((unsigned __int16 *)v91 + 3);
                            if (*((_WORD *)v91 + 3)) {
                              long long v19 = (_DWORD *)((char *)v19 + (void)v90 + *(unsigned int *)((char *)v19 + (void)v90));
                            }
                            long long v168 = v19;
                            if (v92 >= 0xB && (uint64_t v93 = *((unsigned __int16 *)v91 + 5)) != 0) {
                              uint64_t v94 = &v90[v93 + *(unsigned int *)&v90[v93]];
                            }
                            else {
                              uint64_t v94 = 0;
                            }
                          }
                          long long v169 = v94;
                          int v95 = *v19;
                          unsigned int v9 = *v19 - 2;
                          unsigned int v173 = v9;
                          uint64_t v96 = (unsigned __int16 *)&v19[v95 - 1 + 1];
                          uint64_t v97 = (unsigned __int16 *)&v19[v9 + 1];
                          if (*v96 != *v97) {
                            goto LABEL_31;
                          }
                          if (v96[1] != v97[1]) {
                            goto LABEL_31;
                          }
                          unsigned int v9 = v95 - 3;
                          unsigned int v45 = --v172;
                          unsigned int v173 = v9;
                          int v43 = *v166;
                          if (v172 >= (unint64_t)(((char *)v166[1] - (char *)*v166) >> 3)) {
                            goto LABEL_31;
                          }
                          continue;
                        }
                      }
                      else
                      {
                        unint64_t v80 = *(void *)(v71 + 168);
                        unint64_t v81 = *(void *)(v71 + 144);
                        unint64_t v82 = *(void *)(v71 + 120);
                        unint64_t v83 = *(void *)(v71 + 192);
                        char v77 = (unsigned int *)sub_2AB884(*(void *)v71, 1, v72, 1);
                        if (v82 >= v73) {
                          unint64_t v84 = v73;
                        }
                        else {
                          unint64_t v84 = v82;
                        }
                        BOOL v85 = v81 >= v84;
                        if (v81 < v84) {
                          unint64_t v84 = v81;
                        }
                        unsigned int v86 = 4 * (v82 < v73);
                        if (!v85) {
                          unsigned int v86 = 5;
                        }
                        if (v80 < v84)
                        {
                          unsigned int v86 = 6;
                          unint64_t v84 = v80;
                        }
                        if (v83 < v84) {
                          unsigned int v86 = 7;
                        }
                        uint64_t v87 = v74 + 24 * v86;
                        *(_DWORD *)uint64_t v87 = v182[0];
                        *(void *)(v87 + 8) = *(void *)(v71 + 3856);
                        *(void *)(v87 + 16) = v77;
                        if (v77) {
                          goto LABEL_107;
                        }
                      }
                    }
                    sub_296654((int **)__p);
                    int v78 = 0;
                    char v79 = (_WORD *)(&loc_1120530 + 1);
                    if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
                      goto LABEL_124;
                    }
                    goto LABEL_122;
                  }
                }
                else
                {
                  unint64_t v61 = *(void *)(v53 + 168);
                  unint64_t v62 = *(void *)(v53 + 144);
                  unint64_t v63 = *(void *)(v53 + 120);
                  unint64_t v64 = *(void *)(v53 + 192);
                  uint64_t v58 = (unsigned int *)sub_2AB884(*(void *)v53, 1, v52, 1);
                  if (v63 >= v54) {
                    unint64_t v65 = v54;
                  }
                  else {
                    unint64_t v65 = v63;
                  }
                  BOOL v66 = v62 >= v65;
                  if (v62 < v65) {
                    unint64_t v65 = v62;
                  }
                  unsigned int v67 = 4 * (v63 < v54);
                  if (!v66) {
                    unsigned int v67 = 5;
                  }
                  if (v61 < v65)
                  {
                    unsigned int v67 = 6;
                    unint64_t v65 = v61;
                  }
                  if (v64 < v65) {
                    unsigned int v67 = 7;
                  }
                  uint64_t v68 = v55 + 24 * v67;
                  *(_DWORD *)uint64_t v68 = v182[0];
                  *(void *)(v68 + 8) = *(void *)(v53 + 3856);
                  *(void *)(v68 + 16) = v58;
                  if (v58) {
                    goto LABEL_79;
                  }
                }
              }
              break;
            }
            sub_296654((int **)__p);
            uint64_t v59 = 0;
            uint64_t v60 = (_WORD *)(&loc_1120530 + 1);
            if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 7u) {
              goto LABEL_96;
            }
            goto LABEL_94;
          }
          int v43 = *v166;
          uint64_t v51 = (char *)v166[1] - (char *)*v166;
          unsigned int v45 = --v172;
          if (v172 < (unint64_t)(v51 >> 3)) {
            goto LABEL_69;
          }
LABEL_31:
          if (v172 != v8) {
            continue;
          }
          goto LABEL_32;
        }
        unsigned int v9 = ++v173;
        long long v19 = v168;
        if ((v40 + 1) >= *v168)
        {
          uint64_t v48 = *v166;
          uint64_t v98 = (char *)v166[1] - (char *)*v166;
          unsigned int v50 = ++v172;
          if (v172 < (unint64_t)(v98 >> 3)) {
            goto LABEL_138;
          }
          goto LABEL_31;
        }
        unsigned int v46 = (unsigned __int16 *)&v168[v40 + 1];
        int v47 = (unsigned __int16 *)&v168[v9 + 1];
        if (*v46 != *v47) {
          goto LABEL_31;
        }
        if (v46[1] != v47[1]) {
          goto LABEL_31;
        }
        uint64_t v48 = *v166;
        uint64_t v49 = (char *)v166[1] - (char *)*v166;
        if (*v168 == 2 && v49 == 8) {
          goto LABEL_31;
        }
        unsigned int v9 = v40 + 2;
        unsigned int v50 = ++v172;
        unsigned int v173 = v9;
        if (v172 >= (unint64_t)(v49 >> 3)) {
          goto LABEL_31;
        }
        while (1)
        {
LABEL_138:
          unint64_t v99 = *((void *)v48 + v50);
          unsigned int v170 = v99;
          uint64_t v100 = v165;
          int v181 = 1;
          v182[0] = v99;
          __p[0] = &v181;
          __p[1] = v182;
          unint64_t v101 = *(void *)(v165 + 3856) + 1;
          *(void *)(v165 + 3856) = v101;
          if (!*(void *)v100)
          {
LABEL_162:
            sub_296654((int **)__p);
            uint64_t v106 = 0;
            uint64_t v107 = (_WORD *)(&loc_1120530 + 1);
            if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 7u) {
              goto LABEL_165;
            }
            goto LABEL_163;
          }
          uint64_t v102 = v100 + 16;
          if (*(_DWORD *)(v100 + 112) == v99)
          {
            unsigned int v103 = 4;
            goto LABEL_147;
          }
          if (*(_DWORD *)(v100 + 136) == v99)
          {
            unsigned int v103 = 5;
            goto LABEL_147;
          }
          if (*(_DWORD *)(v100 + 160) == v99)
          {
            unsigned int v103 = 6;
            goto LABEL_147;
          }
          if (*(_DWORD *)(v100 + 184) == v99)
          {
            unsigned int v103 = 7;
LABEL_147:
            ++*(void *)(v100 + 3864);
            uint64_t v104 = v102 + 24 * v103;
            *(void *)(v104 + 8) = v101;
            unint64_t v105 = *(unsigned int **)(v104 + 16);
            if (!v105) {
              goto LABEL_162;
            }
            goto LABEL_148;
          }
          unint64_t v108 = *(void *)(v100 + 168);
          unint64_t v109 = *(void *)(v100 + 144);
          unint64_t v110 = *(void *)(v100 + 120);
          unint64_t v111 = *(void *)(v100 + 192);
          unint64_t v105 = (unsigned int *)sub_2AB884(*(void *)v100, 1, v99, 1);
          if (v110 >= v101) {
            unint64_t v112 = v101;
          }
          else {
            unint64_t v112 = v110;
          }
          BOOL v113 = v109 >= v112;
          if (v109 < v112) {
            unint64_t v112 = v109;
          }
          unsigned int v114 = 4 * (v110 < v101);
          if (!v113) {
            unsigned int v114 = 5;
          }
          if (v108 < v112)
          {
            unsigned int v114 = 6;
            unint64_t v112 = v108;
          }
          if (v111 < v112) {
            unsigned int v114 = 7;
          }
          uint64_t v115 = v102 + 24 * v114;
          *(_DWORD *)uint64_t v115 = v182[0];
          *(void *)(v115 + 8) = *(void *)(v100 + 3856);
          *(void *)(v115 + 16) = v105;
          if (!v105) {
            goto LABEL_162;
          }
LABEL_148:
          uint64_t v106 = (int *)((char *)v105 + *v105);
          uint64_t v107 = (unsigned __int16 *)((char *)v106 - *v106);
          if (*v107 < 7u) {
            goto LABEL_165;
          }
LABEL_163:
          uint64_t v116 = v107[3];
          if (v116)
          {
            int v117 = *(int *)((char *)v106 + v116);
            goto LABEL_166;
          }
LABEL_165:
          int v117 = 0;
LABEL_166:
          int v171 = v117;
          uint64_t v118 = v165;
          unsigned int v119 = v170;
          int v181 = 1;
          v182[0] = v170;
          __p[0] = &v181;
          __p[1] = v182;
          unint64_t v120 = *(void *)(v165 + 3856) + 1;
          *(void *)(v165 + 3856) = v120;
          if (!*(void *)v118) {
            goto LABEL_190;
          }
          uint64_t v121 = v118 + 16;
          if (*(_DWORD *)(v118 + 112) == v119)
          {
            unsigned int v122 = 4;
            goto LABEL_175;
          }
          if (*(_DWORD *)(v118 + 136) == v119)
          {
            unsigned int v122 = 5;
            goto LABEL_175;
          }
          if (*(_DWORD *)(v118 + 160) == v119)
          {
            unsigned int v122 = 6;
            goto LABEL_175;
          }
          if (*(_DWORD *)(v118 + 184) == v119)
          {
            unsigned int v122 = 7;
LABEL_175:
            ++*(void *)(v118 + 3864);
            uint64_t v123 = v121 + 24 * v122;
            *(void *)(v123 + 8) = v120;
            uint64_t v124 = *(unsigned int **)(v123 + 16);
            if (!v124) {
              goto LABEL_190;
            }
            goto LABEL_176;
          }
          unint64_t v127 = *(void *)(v118 + 168);
          unint64_t v128 = *(void *)(v118 + 144);
          unint64_t v129 = *(void *)(v118 + 120);
          unint64_t v130 = *(void *)(v118 + 192);
          uint64_t v124 = (unsigned int *)sub_2AB884(*(void *)v118, 1, v119, 1);
          if (v129 >= v120) {
            unint64_t v131 = v120;
          }
          else {
            unint64_t v131 = v129;
          }
          BOOL v132 = v128 >= v131;
          if (v128 < v131) {
            unint64_t v131 = v128;
          }
          unsigned int v133 = 4 * (v129 < v120);
          if (!v132) {
            unsigned int v133 = 5;
          }
          if (v127 < v131)
          {
            unsigned int v133 = 6;
            unint64_t v131 = v127;
          }
          if (v130 < v131) {
            unsigned int v133 = 7;
          }
          uint64_t v134 = v121 + 24 * v133;
          *(_DWORD *)uint64_t v134 = v182[0];
          *(void *)(v134 + 8) = *(void *)(v118 + 3856);
          *(void *)(v134 + 16) = v124;
          if (!v124)
          {
LABEL_190:
            sub_296654((int **)__p);
            int v125 = 0;
            uint64_t v126 = (_WORD *)(&loc_1120530 + 1);
            if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
              goto LABEL_193;
            }
            goto LABEL_191;
          }
LABEL_176:
          int v125 = (int *)((char *)v124 + *v124);
          uint64_t v126 = (unsigned __int16 *)((char *)v125 - *v125);
          if (*v126 < 5u) {
            goto LABEL_193;
          }
LABEL_191:
          uint64_t v135 = v126[2];
          if (v135)
          {
            uint64_t v136 = (char *)v125 + v135 + *(unsigned int *)((char *)v125 + v135);
            goto LABEL_194;
          }
LABEL_193:
          uint64_t v136 = 0;
LABEL_194:
          uint64_t v137 = &v136[4 * HIDWORD(v99) + 4 + *(unsigned int *)&v136[4 * HIDWORD(v99) + 4]];
          uint64_t v167 = (int *)v137;
          std::string::size_type v138 = &v137[-*(int *)v137];
          unsigned int v139 = *(unsigned __int16 *)v138;
          if (v139 <= 6)
          {
            long long v19 = 0;
            int v141 = 0;
            long long v168 = 0;
          }
          else
          {
            long long v19 = (_DWORD *)*((unsigned __int16 *)v138 + 3);
            if (*((_WORD *)v138 + 3)) {
              long long v19 = (_DWORD *)((char *)v19 + (void)v137 + *(unsigned int *)((char *)v19 + (void)v137));
            }
            long long v168 = v19;
            if (v139 >= 0xB && (uint64_t v140 = *((unsigned __int16 *)v138 + 5)) != 0) {
              int v141 = &v137[v140 + *(unsigned int *)&v137[v140]];
            }
            else {
              int v141 = 0;
            }
          }
          long long v169 = v141;
          unsigned int v9 = 1;
          unsigned int v173 = 1;
          if (*((unsigned __int16 *)v19 + 2) != *((unsigned __int16 *)v19 + 4)) {
            goto LABEL_31;
          }
          if (*((unsigned __int16 *)v19 + 3) != *((unsigned __int16 *)v19 + 5)) {
            break;
          }
          unsigned int v9 = 2;
          unsigned int v50 = ++v172;
          unsigned int v173 = 2;
          uint64_t v48 = *v166;
          if (v172 >= (unint64_t)(((char *)v166[1] - (char *)*v166) >> 3)) {
            goto LABEL_31;
          }
        }
        unsigned int v9 = 1;
        if (v172 != v8) {
          continue;
        }
LABEL_32:
        if (v9 == v161) {
          goto LABEL_208;
        }
      }
      if (v29 >= 0xB)
      {
LABEL_37:
        if (v28[5])
        {
          int v31 = *(unsigned __int16 *)((char *)v167 + 2 * v173 + v28[5] + *(int *)((char *)v167 + v28[5]) + 4);
          if (v31 != 0xFFFF)
          {
            uint64_t v32 = v28[4];
            if (v32) {
              int v33 = *(int *)((char *)v167 + v32);
            }
            else {
              int v33 = 0;
            }
            int v30 = v171 + v31 + v33;
            goto LABEL_44;
          }
        }
      }
      int v30 = 0x7FFFFFFF;
      goto LABEL_44;
    }
  }
}

void sub_E4BF04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  int v30 = *(void **)(v28 - 128);
  if (v30)
  {
    *(void *)(v28 - 120) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(exception_object);
}

void sub_E4BF6C(uint64_t a1@<X0>, void *a2@<X1>, unsigned int a3@<W2>, void *a4@<X3>, unsigned int *a5@<X4>, void **a6@<X8>)
{
  uint64_t v6 = a6;
  uint64_t v95 = 0;
  a6[1] = 0;
  a6[2] = 0;
  *a6 = 0;
  if (a3)
  {
    uint64_t v7 = a5;
    unint64_t v8 = a4;
    unint64_t v9 = *a5;
    if (a4[13] >= v9)
    {
      uint64_t v85 = 0;
      do
      {
        if (sub_46C760(a2) <= v9) {
          break;
        }
        uint64_t v95 = 0;
        sub_E4C5F8(a1, a2, a3, *v7, (_DWORD *)&v95 + 1, (unsigned int *)&v95, &__p);
        uint64_t v10 = v94;
        if (v94 == __p) {
          goto LABEL_87;
        }
        uint64_t v11 = 0;
        unint64_t v89 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)v94 - (unsigned char *)__p) >> 2);
        do
        {
          while (1)
          {
            uint64_t v13 = *v7;
            BOOL v15 = v8[10] == v13 && v11 == HIDWORD(v95);
            if (v11) {
              BOOL v16 = 0;
            }
            else {
              BOOL v16 = v8[7] == v13;
            }
            char v17 = v16;
            if (v11)
            {
              char v18 = 0;
              goto LABEL_61;
            }
            long long v19 = (int **)sub_46C8EC(a2, *v7);
            uint64_t v20 = (char **)v19;
            int v21 = (char *)*v19;
            int v22 = (unsigned __int16 *)((char *)*v19 - **v19);
            if (*((unsigned char *)v19 + 38))
            {
              BOOL v23 = v15;
              if (v22[3])
              {
                unint64_t v24 = __ROR8__(*(void *)&v21[v22[3]], 32);
                unint64_t v25 = HIDWORD(v24);
              }
              else
              {
                char v27 = v17;
                unsigned int v28 = *((_DWORD *)v19 + 8);
                unint64_t v29 = *(unsigned int *)&v21[v22[60]];
                unsigned int v30 = sub_511FC(v28);
                unsigned int v31 = v28 & ~(-1 << (v30 & 0xFE));
                int v32 = sub_51938(v31);
                int v33 = sub_51938(v31 >> 1);
                int v34 = 1 << (v30 >> 1);
                int v35 = v32 + (char)v29;
                int v36 = v33 + ((__int16)v29 >> 8);
                unsigned int v37 = (int)((((((v35 & ~(v35 >> 31)) - v35 + (v35 >> 31)) >> (v30 >> 1))
                            + (v35 >> 31)) << (v30 >> 1))
                          + v35)
                    % v34;
                unsigned int v38 = (int)((((((v36 & ~(v36 >> 31)) - v36 + (v36 >> 31)) >> (v30 >> 1))
                            + (v36 >> 31)) << (v30 >> 1))
                          + v36)
                    % v34;
                int v39 = -1 << (v30 >> 1);
                unsigned int v40 = ~v39 < v37 ? ~v39 : v37;
                unsigned int v41 = ~v39 < v38 ? ~v39 : v38;
                sub_518C8(v40, v41);
                unint64_t v24 = v29 >> 16;
                LODWORD(v25) = v42 | (1 << (v30 & 0xFE));
                char v17 = v27;
              }
            }
            else
            {
              unsigned int v26 = *v22;
              if (v26 < 5) {
                goto LABEL_39;
              }
              if (v22[2])
              {
                BOOL v23 = v15;
                unint64_t v24 = __ROR8__(*(void *)&v21[v22[2]], 32);
                unint64_t v25 = HIDWORD(v24);
                goto LABEL_41;
              }
              if (v26 >= 0x77 && (uint64_t v43 = v22[59]) != 0)
              {
                BOOL v23 = v15;
                unint64_t v24 = *(unsigned __int16 *)&v21[v43];
              }
              else
              {
LABEL_39:
                BOOL v23 = v15;
                unint64_t v24 = 0;
              }
              LODWORD(v25) = *((_DWORD *)v19 + 8);
            }
LABEL_41:
            uint64_t v44 = *(void *)(a1 + 16);
            sub_2D5904(v44, (unsigned int *)(v25 | (v24 << 32)), 0, (char **)(v44 + 7800));
            unint64_t v90 = 0;
            double v91 = 0;
            unsigned int v92 = 0;
            unsigned int v45 = *(char **)(v44 + 7808);
            unsigned int v46 = *(char **)(v44 + 7800);
            uint64_t v47 = v45 - v46;
            if (v45 != v46)
            {
              if (v47 < 0) {
                sub_2E00();
              }
              uint64_t v48 = (char *)operator new(v45 - v46);
              unint64_t v90 = v48;
              double v91 = v48;
              unsigned int v92 = &v48[8 * (v47 >> 3)];
              do
              {
                uint64_t v96 = *(void *)v46 & 0xFFFFFFFFFFFFLL;
                uint64_t v48 = sub_2AA8EC((unint64_t *)&v90, v48, &v96) + 8;
                v46 += 8;
              }
              while (v46 != v45);
            }
            uint64_t v49 = *v20;
            unsigned int v50 = &(*v20)[-*(int *)*v20];
            unsigned int v51 = *(unsigned __int16 *)v50;
            if (v51 < 9)
            {
              uint64_t v52 = 0;
              unint64_t v8 = a4;
              BOOL v15 = v23;
            }
            else
            {
              uint64_t v52 = *((unsigned __int16 *)v50 + 4);
              unint64_t v8 = a4;
              BOOL v15 = v23;
              if (*((_WORD *)v50 + 4)) {
                uint64_t v52 = *(unsigned int *)&v49[v52];
              }
            }
            uint64_t v53 = 0;
            uint64_t v54 = v52 + v85;
            BOOL v55 = v54 <= 1600000;
            BOOL v56 = v54 > 1600000;
            if (v55) {
              uint64_t v57 = v85;
            }
            else {
              uint64_t v57 = 0;
            }
            char v58 = v91 - v90 != 16 || v56;
            if (v51 > 8)
            {
              uint64_t v59 = *((unsigned __int16 *)v50 + 4);
              if (!v59)
              {
                uint64_t v53 = 0;
                if (!v90) {
                  goto LABEL_60;
                }
LABEL_59:
                double v91 = v90;
                operator delete(v90);
                goto LABEL_60;
              }
              uint64_t v53 = *(unsigned int *)&v49[v59];
            }
            if (v90) {
              goto LABEL_59;
            }
LABEL_60:
            char v18 = v58 | v17;
            uint64_t v85 = v53 + v57;
            uint64_t v7 = a5;
            uint64_t v13 = *a5;
LABEL_61:
            BOOL v60 = v11 == v95 && v8[13] == v13;
            BOOL v61 = v60;
            unint64_t v62 = (char *)__p + 12 * v11;
            unint64_t v64 = v6[1];
            unint64_t v63 = v6[2];
            if (v64 >= (_DWORD *)v63) {
              break;
            }
            int v12 = *((_DWORD *)v62 + 2);
            *(void *)unint64_t v64 = *(void *)v62;
            v64[2] = v12;
            v64[3] = v13;
            *((unsigned char *)v64 + 16) = v18;
            *((unsigned char *)v64 + 17) = v15;
            *((unsigned char *)v64 + 18) = v61;
            *((unsigned char *)v64 + 19) = v17;
            *((unsigned char *)v64 + 20) = 0;
            v6[1] = v64 + 6;
            if (++v11 == v89) {
              goto LABEL_86;
            }
          }
          uint64_t v88 = v11;
          unint64_t v65 = v6;
          BOOL v66 = v15;
          unsigned int v67 = *v65;
          unint64_t v68 = 0xAAAAAAAAAAAAAAABLL * (((char *)v64 - (unsigned char *)*v65) >> 3);
          unint64_t v69 = v68 + 1;
          if (v68 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_2E00();
          }
          unint64_t v70 = 0xAAAAAAAAAAAAAAABLL * ((v63 - v67) >> 3);
          if (2 * v70 > v69) {
            unint64_t v69 = 2 * v70;
          }
          if (v70 >= 0x555555555555555) {
            unint64_t v71 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v71 = v69;
          }
          if (v71 > 0xAAAAAAAAAAAAAAALL) {
            sub_188D718();
          }
          char v72 = v18;
          unint64_t v73 = (char *)operator new(24 * v71);
          int v74 = *((_DWORD *)v62 + 2);
          unsigned int v75 = &v73[24 * v68];
          *(void *)unsigned int v75 = *(void *)v62;
          *((_DWORD *)v75 + 2) = v74;
          *((_DWORD *)v75 + 3) = v13;
          v75[16] = v72;
          v75[17] = v66;
          v75[18] = v61;
          v75[19] = v17;
          v75[20] = 0;
          if (v64 == (_DWORD *)v67)
          {
            int v78 = &v73[24 * v68];
            uint64_t v7 = a5;
            uint64_t v6 = a6;
          }
          else
          {
            uint64_t v76 = &v73[24 * v68];
            uint64_t v7 = a5;
            uint64_t v6 = a6;
            do
            {
              long long v77 = *(_OWORD *)(v64 - 6);
              int v78 = v76 - 24;
              *(void *)(v76 - 11) = *(void *)((char *)v64 - 11);
              *(_OWORD *)(v76 - 24) = v77;
              v64 -= 6;
              v76 -= 24;
            }
            while (v64 != (_DWORD *)v67);
          }
          char v79 = v75 + 24;
          *uint64_t v6 = v78;
          v6[1] = v75 + 24;
          v6[2] = &v73[24 * v71];
          if (v67) {
            operator delete(v67);
          }
          unint64_t v8 = a4;
          v6[1] = v79;
          uint64_t v11 = v88 + 1;
        }
        while (v88 + 1 != v89);
LABEL_86:
        uint64_t v10 = __p;
LABEL_87:
        unsigned int v80 = *v7 + 1;
        unsigned int *v7 = v80;
        if (v10)
        {
          uint64_t v94 = v10;
          operator delete(v10);
          unsigned int v80 = *v7;
        }
        unint64_t v9 = v80;
      }
      while (v8[13] >= (unint64_t)v80);
    }
  }
  sub_E4C988(*(double *)(a1 + 32), a1, v6, *(_DWORD *)(*(void *)a1 + 160) > 3u);
}

void sub_E4C554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  unint64_t v25 = *(void **)v23;
  if (!*(void *)v23) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v23 + 8) = v25;
  operator delete(v25);
  _Unwind_Resume(exception_object);
}

void sub_E4C5F8(uint64_t a1@<X0>, void *a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, _DWORD *a5@<X4>, unsigned int *a6@<X5>, void *a7@<X8>)
{
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = a4;
  uint64_t v15 = sub_46C8EC(a2, a4);
  sub_2954EC(v13, *(void *)(v15 + 32), (uint64_t)&v36);
  sub_2E4B5C((uint64_t)&v36, v39);
  if (__p)
  {
    unsigned int v38 = __p;
    operator delete(__p);
  }
  if (sub_46C760(a2) - 1 == v14)
  {
    double v16 = 0.0;
    if (!a4) {
      double v16 = (double)(1000000000 - sub_46CABC((uint64_t)a2));
    }
    unsigned int v17 = sub_46CAC4((uint64_t)a2);
    sub_31854((uint64_t *)v39, 0, a7, v16 / 1000000000.0, (double)v17 / 1000000000.0);
    if (v39[0])
    {
      v39[1] = v39[0];
      operator delete(v39[0]);
    }
  }
  else
  {
    if (!a4)
    {
      int v18 = sub_46CABC((uint64_t)a2);
      sub_32F08((uint64_t *)v39, 1, 0, &v36, 1.0);
      sub_32F08((uint64_t *)&v36, 0, 0, &v34, fmin((double)(1000000000 - v18) / 1000000000.0, 1.0));
      if (v36)
      {
        long long __p = v36;
        operator delete(v36);
      }
      if (v39[0])
      {
        v39[1] = v39[0];
        operator delete(v39[0]);
      }
      *(_OWORD *)int v39 = v34;
      uint64_t v40 = v35;
    }
    uint64_t v19 = a2[133];
    if (*(void *)(v19 + 2400 * a3 + 80) == v14)
    {
      uint64_t v20 = *(void *)(v19 + 2400 * a3 + 88);
      uint64_t v21 = v20 / 100;
      __int16 v22 = v20 % 100;
      if (v20 < 0) {
        __int16 v23 = -50;
      }
      else {
        __int16 v23 = 50;
      }
      *a5 = sub_477F48((uint64_t)v39, (double)(v21+ (int)(((5243 * (__int16)(v23 + v22)) >> 19) + ((5243 * (__int16)(v23 + v22)) >> 31))), 0.1);
    }
    if (*(void *)(v19 + 2400 * a3 + 104) == v14)
    {
      uint64_t v24 = *(void *)(v19 + 2400 * a3 + 112);
      if (v24 == 0x7FFFFFFFFFFFFFFFLL
        || ((uint64_t v25 = v24 / 100, v26 = v24 % 100, v24 < 0) ? (v27 = -50) : (v27 = 50),
            uint64_t v28 = v25
                + (int)(((5243 * (__int16)(v27 + v26)) >> 19) + ((5243 * (__int16)(v27 + v26)) >> 31)),
            v28 < 1))
      {
        unsigned int v29 = 0;
        *a6 = 0;
      }
      else
      {
        unsigned int v29 = sub_477F48((uint64_t)v39, (double)v28, 0.1);
        *a6 = v29;
      }
    }
    else
    {
      unsigned int v29 = *a6;
    }
    unsigned int v30 = (char *)v39[1];
    unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * (((char *)v39[1] - (char *)v39[0]) >> 2) - 1;
    int v33 = v31 > *a5 && v31 > v29;
    *a7 = v39[0];
    a7[1] = &v30[12 * (v33 << 31 >> 31)];
    a7[2] = v40;
  }
}

void sub_E4C930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_E4C988(double a1, uint64_t a2, void *a3, unsigned int a4)
{
  uint64_t v40 = 0;
  unsigned int v41 = 0;
  int v42 = 0;
  uint64_t v4 = a3[1] - *a3;
  if (v4)
  {
    unint64_t v7 = 0;
    unint64_t v8 = 0;
    unint64_t v33 = a4;
    unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 3);
    while (1)
    {
      while (!*(unsigned char *)(sub_E1ACF8(a3, v8) + 16)
           && !*(unsigned char *)(sub_E1ACF8(a3, v8) + 17)
           && !*(unsigned char *)(sub_E1ACF8(a3, v8) + 18)
           && v8 != -1 - 0x5555555555555555 * ((uint64_t)(a3[1] - *a3) >> 3))
      {
        if (++v8 == v34)
        {
LABEL_43:
          if (v40)
          {
            unsigned int v41 = (char *)v40;
            operator delete(v40);
          }
          return;
        }
      }
      uint64_t v10 = v40;
      unsigned int v41 = (char *)v40;
      unint64_t v11 = v8 + 1;
      unint64_t v12 = v8 + 1 - v7;
      if (0xAAAAAAAAAAAAAAABLL * ((v42 - (unsigned char *)v40) >> 2) < v12)
      {
        if (v12 > 0x1555555555555555) {
          sub_2E00();
        }
        uint64_t v40 = operator new(12 * v12);
        unsigned int v41 = (char *)v40;
        int v42 = (char *)v40 + 12 * v12;
        if (v10) {
          operator delete(v10);
        }
      }
      unint64_t v35 = v8 + 1;
      unint64_t v36 = v8;
      if (v7 <= v11) {
        unint64_t v13 = v8 + 1;
      }
      else {
        unint64_t v13 = v7;
      }
      unint64_t v14 = v7;
      if (v11 > v7)
      {
        do
        {
          uint64_t v20 = sub_E1ACF8(a3, v14);
          uint64_t v21 = v20;
          __int16 v22 = v41;
          if (v41 < v42)
          {
            uint64_t v18 = *(void *)v20;
            *((_DWORD *)v41 + 2) = *(_DWORD *)(v20 + 8);
            *(void *)__int16 v22 = v18;
            uint64_t v19 = v22 + 12;
          }
          else
          {
            __int16 v23 = (char *)v40;
            unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((v41 - (unsigned char *)v40) >> 2);
            unint64_t v25 = v24 + 1;
            if (v24 + 1 > 0x1555555555555555) {
              sub_2E00();
            }
            if (0x5555555555555556 * ((v42 - (unsigned char *)v40) >> 2) > v25) {
              unint64_t v25 = 0x5555555555555556 * ((v42 - (unsigned char *)v40) >> 2);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v42 - (unsigned char *)v40) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v26 = 0x1555555555555555;
            }
            else {
              unint64_t v26 = v25;
            }
            if (v26)
            {
              if (v26 > 0x1555555555555555) {
                sub_188D718();
              }
              __int16 v27 = (char *)operator new(12 * v26);
            }
            else
            {
              __int16 v27 = 0;
            }
            uint64_t v28 = *(void *)v21;
            unsigned int v29 = &v27[12 * v24];
            *((_DWORD *)v29 + 2) = *(_DWORD *)(v21 + 8);
            *(void *)unsigned int v29 = v28;
            unsigned int v30 = v29;
            if (v22 != v23)
            {
              do
              {
                uint64_t v31 = *(void *)(v22 - 12);
                v22 -= 12;
                int v32 = *((_DWORD *)v22 + 2);
                *(void *)(v30 - 12) = v31;
                v30 -= 12;
                *((_DWORD *)v30 + 2) = v32;
              }
              while (v22 != v23);
              __int16 v22 = (char *)v40;
            }
            uint64_t v19 = v29 + 12;
            uint64_t v40 = v30;
            unsigned int v41 = v29 + 12;
            int v42 = &v27[12 * v26];
            if (v22) {
              operator delete(v22);
            }
          }
          unsigned int v41 = v19;
          ++v14;
        }
        while (v14 != v13);
      }
      memset(v37, 0, sizeof(v37));
      sub_426D8((uint64_t *)&v40, v33, 0, 1, v37, (uint64_t)&__p, a1);
      if (v37[0]) {
        operator delete(v37[0]);
      }
      uint64_t v15 = v39;
      if (v39) {
        break;
      }
      unint64_t v9 = __p;
      if (__p) {
        goto LABEL_4;
      }
LABEL_5:
      unint64_t v7 = v36;
      unint64_t v8 = v35;
      if (v35 == v34) {
        goto LABEL_43;
      }
    }
    unint64_t v16 = 0;
    do
    {
      uint64_t v17 = sub_E1ACF8(a3, v7 + v16);
      unint64_t v9 = __p;
      *(unsigned char *)(v17 + 20) = (*(void *)((char *)__p + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v16) & 1;
      ++v16;
    }
    while (v15 != v16);
LABEL_4:
    operator delete(v9);
    goto LABEL_5;
  }
}

void sub_E4CCE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_E4CD34(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t v7 = 32;
  if (a3) {
    uint64_t v7 = 40;
  }
  uint64_t v8 = 64;
  if (a3) {
    uint64_t v8 = 72;
  }
  if (!a4 || (double v9 = *(double *)(a1 + v8), v9 == *(double *)(a1 + v7)))
  {
    uint64_t v44 = 0;
    long long v50 = 0u;
    uint64_t v40 = 0x4039000000000000;
    uint64_t v41 = 5000;
    long long v42 = xmmword_20E7C10;
    long long v43 = xmmword_20E7C20;
    uint64_t v45 = 20000000;
    uint64_t v46 = 0x3FF199999999999ALL;
    uint64_t v47 = 0x3E800002710;
    uint64_t v48 = 0xA00002710;
    long long v49 = xmmword_20E7C00;
    *(void *)&long long v50 = 0x3FE6147AE147AE14;
    BYTE9(v50) = 0;
    sub_110BFAC((uint64_t)&v40, a2, (uint64_t)v51);
    sub_188B428((uint64_t)v51, (uint64_t)&v55);
    if (*(char *)(a5 + 23) < 0) {
      operator delete(*(void **)a5);
    }
    *(_OWORD *)a5 = v55;
    *(void *)(a5 + 16) = v56;
    HIBYTE(v56) = 0;
    LOBYTE(v55) = 0;
    sub_1116458(v51);
  }
  else
  {
    long long v55 = 0uLL;
    uint64_t v56 = 0;
    unint64_t v10 = *(int *)(a2 + 32);
    double v35 = v9;
    if (v10)
    {
      sub_3907C((void **)&v55, v10);
      unsigned int v37 = 0;
      uint64_t v38 = 0;
      unint64_t v39 = 0;
      uint64_t v11 = *((void *)&v55 + 1) - v55;
      if (*((void *)&v55 + 1) != (void)v55)
      {
        if (v11 < 0) {
          sub_2E00();
        }
        unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (v11 >> 2);
        unsigned int v37 = operator new(8 * (((v12 - 1) >> 6) + 1));
        uint64_t v38 = 0;
        unint64_t v39 = ((v12 - 1) >> 6) + 1;
        sub_43284(&v37, v12, 0);
        if (*((void *)&v55 + 1) != (void)v55)
        {
          uint64_t v13 = 0;
          uint64_t v14 = 0;
          unint64_t v15 = 0;
          uint64_t v16 = (*((void *)&v55 + 1) - (void)v55) / 12;
          do
          {
            uint64_t v18 = *(void *)(*(void *)(a2 + 40) + (v13 >> 29) + 8);
            if (*(_DWORD *)(v18 + 84) == 1) {
              *(void *)((char *)v37 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
            }
            uint64_t v19 = *(uint64_t (****)())(v18 + 32);
            if (!v19) {
              uint64_t v19 = &off_24F8110;
            }
            int v20 = *(_DWORD *)(v18 + 56);
            double v21 = (double)*((int *)v19 + 7) / 10000000.0;
            uint64_t v22 = -1;
            if (v21 <= 180.0)
            {
              double v23 = (double)*((int *)v19 + 6) / 10000000.0;
              if (v23 >= -85.0511288 && v23 <= 85.0511288 && v21 >= -180.0)
              {
                double v24 = fmax(v23, -85.0511288);
                if (v24 >= 85.0511288) {
                  double v25 = 1.48442223;
                }
                else {
                  double v25 = v24 * 3.14159265 / 180.0;
                }
                long double v26 = sin(v25);
                LODWORD(v27) = ((log((v26 + 1.0) / (1.0 - v26)) / -12.5663706 + 0.5) * 4294967300.0);
                if (v27 >= 0xFFFFFFFE) {
                  uint64_t v27 = 4294967294;
                }
                else {
                  uint64_t v27 = v27;
                }
                uint64_t v22 = ((v21 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v27 << 32);
              }
            }
            uint64_t v17 = v55 + v14;
            *(void *)uint64_t v17 = v22;
            *(_DWORD *)(v17 + 8) = v20;
            ++v15;
            v14 += 12;
            v13 += 0x100000000;
          }
          while (v16 != v15);
        }
      }
    }
    else
    {
      unsigned int v37 = 0;
      uint64_t v38 = 0;
      unint64_t v39 = 0;
    }
    sub_40D78(&v55, 1, &v37, &__p, v35);
    sub_1115F80(v51, 0, 0);
    sub_188CC60((uint64_t)&v52, -1431655765 * ((*((void *)&v55 + 1) - (void)v55) >> 2));
    if (*((void *)&v55 + 1) != (void)v55)
    {
      uint64_t v28 = 0;
      unint64_t v29 = 0;
      uint64_t v30 = (*((void *)&v55 + 1) - (void)v55) / 12;
      do
      {
        if ((*(void *)((char *)__p + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v29))
        {
          if (v54 && (uint64_t v32 = v53, v53 < *v54))
          {
            ++v53;
            uint64_t v31 = *(std::string **)&v54[2 * v32 + 2];
          }
          else
          {
            sub_111704C(v52);
            uint64_t v31 = (std::string *)sub_188CDC8((uint64_t)&v52, v33);
          }
          sub_1115798(v31, *(void *)(*(void *)(a2 + 40) + (v28 >> 29) + 8));
        }
        ++v29;
        v28 += 0x100000000;
      }
      while (v30 != v29);
    }
    uint64_t v44 = 0;
    long long v50 = 0u;
    uint64_t v40 = 0x4039000000000000;
    uint64_t v41 = 5000;
    long long v42 = xmmword_20E7C10;
    long long v43 = xmmword_20E7C20;
    uint64_t v45 = 20000000;
    uint64_t v46 = 0x3FF199999999999ALL;
    uint64_t v47 = 0x3E800002710;
    uint64_t v48 = 0xA00002710;
    long long v49 = xmmword_20E7C00;
    *(void *)&long long v50 = 0x3FE6147AE147AE14;
    BYTE9(v50) = 0;
    sub_1109790((uint64_t)&v40, (uint64_t)v51);
    sub_1880F60((uint64_t)v51, (std::string *)a5);
    sub_1116458(v51);
    if (__p) {
      operator delete(__p);
    }
    if (v37) {
      operator delete(v37);
    }
    if ((void)v55)
    {
      *((void *)&v55 + 1) = v55;
      operator delete((void *)v55);
    }
  }
}

void sub_E4D304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  unsigned int v37 = *(void **)(v35 - 176);
  if (!v37) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v35 - 168) = v37;
  operator delete(v37);
  _Unwind_Resume(exception_object);
}

uint64_t sub_E4D3AC(uint64_t a1, void *a2)
{
  long long __p = operator new(0x20uLL);
  long long v19 = xmmword_20B9800;
  strcpy((char *)__p, "add_traffic_lights_to_response");
  BOOL v4 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)a1 = v4;
  long long __p = operator new(0x20uLL);
  long long v19 = xmmword_20B5EB0;
  strcpy((char *)__p, "add_stop_signs_to_response");
  BOOL v5 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 1) = v5;
  long long __p = operator new(0x20uLL);
  long long v19 = xmmword_20B8890;
  strcpy((char *)__p, "add_speed_cameras_to_response");
  BOOL v6 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 2) = v6;
  long long __p = operator new(0x30uLL);
  long long v19 = xmmword_20B9A80;
  strcpy((char *)__p, "centerline_geometry_simplification_tolerance_m");
  double v7 = sub_5C7E8(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  *(double *)(a1 + 8) = v7;
  long long __p = operator new(0x30uLL);
  long long v19 = xmmword_20E1380;
  strcpy((char *)__p, "flowline_geometry_simplification_tolerance_m");
  double v8 = sub_5C7E8(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  *(double *)(a1 + 16) = v8;
  long long __p = operator new(0x20uLL);
  long long v19 = xmmword_20B8E90;
  strcpy((char *)__p, "enable_analytics_simplification");
  BOOL v9 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 24) = v9;
  long long __p = operator new(0x30uLL);
  long long v19 = xmmword_20B9380;
  strcpy((char *)__p, "max_route_length_for_analytics_simplification_m");
  *(void *)(a1 + 32) = sub_5CDE0(a2, &__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x40uLL);
  long long v19 = xmmword_20B98C0;
  strcpy((char *)__p, "analytics_centerline_geometry_simplification_tolerance_m");
  double v10 = sub_5C7E8(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  *(double *)(a1 + 40) = v10;
  long long __p = operator new(0x38uLL);
  long long v19 = xmmword_20B8DF0;
  strcpy((char *)__p, "analytics_flowline_geometry_simplification_tolerance_m");
  double v11 = sub_5C7E8(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  *(double *)(a1 + 48) = v11;
  long long __p = operator new(0x20uLL);
  long long v19 = xmmword_20B9800;
  strcpy((char *)__p, "add_debug_geometry_to_response");
  BOOL v12 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 56) = v12;
  long long __p = operator new(0x30uLL);
  long long v19 = xmmword_20B93C0;
  strcpy((char *)__p, "add_debug_geometry_anomalies_to_response");
  BOOL v13 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 57) = v13;
  long long __p = operator new(0x30uLL);
  long long v19 = xmmword_20B93D0;
  strcpy((char *)__p, "add_debug_route_line_geometry_to_response");
  BOOL v14 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 58) = v14;
  long long __p = operator new(0x20uLL);
  long long v19 = xmmword_20B8870;
  strcpy((char *)__p, "round_mpr_traversal_times");
  BOOL v15 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 59) = v15;
  long long __p = operator new(0x20uLL);
  long long v19 = xmmword_20B8870;
  strcpy((char *)__p, "add_route_leg_name_ranges");
  BOOL v16 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 60) = v16;
  return a1;
}

void sub_E4D8C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_E4D918(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a3;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = sub_3750CC(a2);
  uint64_t v6 = *(void *)(a1 + 8);
  char v29 = 15;
  uint64_t v27 = 0;
  strcpy((char *)v28, "ResponseBuilder");
  double v25 = 0;
  long double v26 = 0;
  double v7 = sub_374CDC(v6, (uint64_t)v28, (uint64_t *)&v25);
  sub_3CB370(v7, 2, a4, __p);
  sub_E54370(a1 + 24, __p);
  double v8 = v31;
  if (v31)
  {
    do
    {
      BOOL v13 = *(char **)v8;
      sub_57AC8((uint64_t *)v8 + 5);
      if (v8[39] < 0) {
        operator delete(*((void **)v8 + 2));
      }
      operator delete(v8);
      double v8 = v13;
    }
    while (v13);
  }
  BOOL v9 = __p[0];
  __p[0] = 0;
  if (v9) {
    operator delete(v9);
  }
  double v10 = (void **)v25;
  if (v25)
  {
    double v11 = v26;
    BOOL v12 = v25;
    if (v26 != v25)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != v10);
      BOOL v12 = v25;
    }
    long double v26 = v10;
    operator delete(v12);
  }
  if (v29 < 0)
  {
    operator delete(v28[0]);
    double v14 = *(double *)(a1 + 32) * 100.0;
    if (v14 < 0.0) {
      goto LABEL_17;
    }
  }
  else
  {
    double v14 = *(double *)(a1 + 32) * 100.0;
    if (v14 < 0.0)
    {
LABEL_17:
      double v15 = v14;
      if (v14 <= -4.50359963e15) {
        goto LABEL_25;
      }
      uint64_t v16 = (uint64_t)(v14 + v14);
      if (v16 >= 1) {
        --v16;
      }
      goto LABEL_24;
    }
  }
  double v15 = v14;
  if (v14 >= 4.50359963e15) {
    goto LABEL_25;
  }
  uint64_t v16 = (uint64_t)(v14 + v14) + 1;
LABEL_24:
  double v15 = (double)(v16 >> 1);
LABEL_25:
  if (v15 >= 9.22337204e18)
  {
    uint64_t v18 = 0x7FFFFFFFFFFFFFFELL;
    goto LABEL_36;
  }
  if (v14 >= 0.0)
  {
    if (v14 < 4.50359963e15)
    {
      uint64_t v17 = (uint64_t)(v14 + v14) + 1;
LABEL_34:
      double v14 = (double)(v17 >> 1);
    }
  }
  else if (v14 > -4.50359963e15)
  {
    uint64_t v17 = (uint64_t)(v14 + v14);
    if (v17 >= 1) {
      --v17;
    }
    goto LABEL_34;
  }
  uint64_t v18 = (uint64_t)v14;
LABEL_36:
  double v19 = *(double *)(a1 + 40) * 100.0;
  if (v19 >= 0.0)
  {
    double v20 = *(double *)(a1 + 40) * 100.0;
    if (v19 >= 4.50359963e15) {
      goto LABEL_44;
    }
    uint64_t v21 = (uint64_t)(v19 + v19) + 1;
  }
  else
  {
    double v20 = *(double *)(a1 + 40) * 100.0;
    if (v19 <= -4.50359963e15) {
      goto LABEL_44;
    }
    uint64_t v21 = (uint64_t)(v19 + v19);
    if (v21 >= 1) {
      --v21;
    }
  }
  double v20 = (double)(v21 >> 1);
LABEL_44:
  if (v20 < 9.22337204e18)
  {
    if (v19 >= 0.0)
    {
      if (v19 < 4.50359963e15)
      {
        uint64_t v22 = (uint64_t)(v19 + v19) + 1;
LABEL_53:
        double v19 = (double)(v22 >> 1);
      }
    }
    else if (v19 > -4.50359963e15)
    {
      uint64_t v22 = (uint64_t)(v19 + v19);
      if (v22 >= 1) {
        --v22;
      }
      goto LABEL_53;
    }
    uint64_t v23 = (uint64_t)v19;
    goto LABEL_55;
  }
  uint64_t v23 = 0x7FFFFFFFFFFFFFFELL;
LABEL_55:
  sub_424388(a1 + 88, *(void *)(a1 + 8), v18, v23);
  return a1;
}

void sub_E4DC20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_E4DC58@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, int64x2_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  sub_162C594(a5, 0, 0);
  uint64_t v10 = a2[1];
  uint64_t v58 = (uint64_t)a2;
  if (*a2 == v10)
  {
    uint64_t result = sub_723EC(1u);
    if (result)
    {
      sub_6BAC((uint64_t)&v61);
      sub_188FC78(&v61, (uint64_t)"No routes found", 15);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      if (v60 < 0) {
        operator delete(__p);
      }
      if (v66 < 0) {
        operator delete(v65);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      uint64_t result = std::ios::~ios();
    }
    *(_DWORD *)(a5 + 40) |= 0x100000u;
    int v40 = 20;
  }
  else
  {
    uint64_t v57 = a4;
    unint64_t v11 = 0;
    unint64_t v12 = 0xBAA6550FFBAA6551 * ((v10 - *a2) >> 3);
    do
    {
      uint64_t v13 = *a2;
      double v14 = *(_DWORD **)(a5 + 296);
      if (v14 && (uint64_t v15 = *(int *)(a5 + 288), (int)v15 < *v14))
      {
        *(_DWORD *)(a5 + 288) = v15 + 1;
        uint64_t v16 = *(void *)&v14[2 * v15 + 2];
      }
      else
      {
        uint64_t v17 = sub_13D8C74(*(void *)(a5 + 280));
        uint64_t v16 = sub_188CDC8(a5 + 280, v17);
      }
      uint64_t v18 = (uint64_t *)(v13 + 7560 * v11);
      int v19 = sub_6478E0((uint64_t)v18);
      int v20 = v19;
      uint64_t v21 = (char *)a3->i64[0];
      unint64_t v22 = a3->u64[1];
      if (a3->i64[0] != v22)
      {
        while (*(_DWORD *)v21 != v19)
        {
          v21 += 32;
          if (v21 == (char *)v22) {
            goto LABEL_12;
          }
        }
      }
      if (v21 == (char *)v22)
      {
LABEL_12:
        if (v22 >= a3[1].i64[0])
        {
          uint64_t v23 = sub_3A6738(a3);
        }
        else
        {
          *(_DWORD *)unint64_t v22 = -1;
          *(void *)(v22 + 16) = 0;
          *(void *)(v22 + 24) = 0;
          uint64_t v23 = (char *)(v22 + 32);
          *(void *)(v22 + 8) = 0;
        }
        a3->i64[1] = (uint64_t)v23;
        *((_DWORD *)v23 - 8) = v20;
        uint64_t v21 = v23 - 32;
      }
      sub_E4E2AC(a1, v18, v11++, v16, (uint64_t)v21);
    }
    while (v11 != v12);
    sub_E4E86C(a1, a5);
    sub_E4E9DC(a1, v57, a5);
    uint64_t v25 = *(void *)(v57 + 1088);
    for (uint64_t i = *(void *)(v57 + 1096); v25 != i; v25 += 1120)
    {
      uint64_t v27 = *(_DWORD **)(a5 + 136);
      if (v27 && (uint64_t v28 = *(int *)(a5 + 128), (int)v28 < *v27))
      {
        *(_DWORD *)(a5 + 128) = v28 + 1;
        uint64_t v29 = *(void *)&v27[2 * v28 + 2];
      }
      else
      {
        uint64_t v30 = sub_13D9608(*(void *)(a5 + 120));
        uint64_t v29 = sub_188CDC8(a5 + 120, v30);
      }
      sub_E1163C(v25, v29, 1, v24);
    }
    uint64_t v31 = sub_3777C0(*(void **)(a1 + 8));
    uint64_t v33 = *(void *)v58;
    uint64_t v32 = *(void *)(v58 + 8);
    if (*(void *)v58 == v32)
    {
LABEL_29:
      char v38 = 1;
    }
    else
    {
      uint64_t v34 = v31;
      while (1)
      {
        uint64_t v35 = (uint64_t *)nullsub_1(v33);
        uint64_t v36 = *v35;
        uint64_t v37 = v35[1];
        if (*v35 != v37) {
          break;
        }
LABEL_28:
        v33 += 7560;
        if (v33 == v32) {
          goto LABEL_29;
        }
      }
      while (sub_3D3C8C(v34, v36, *(unsigned __int8 *)(*(void *)a1 + 40)) == 2)
      {
        v36 += 12328;
        if (v36 == v37) {
          goto LABEL_28;
        }
      }
      char v38 = 0;
    }
    *(_DWORD *)(a5 + 40) |= 0x1000000u;
    *(unsigned char *)(a5 + 549) = v38;
    uint64_t v42 = *(void *)v58;
    uint64_t v41 = *(void *)(v58 + 8);
    if (*(void *)v58 == v41)
    {
LABEL_43:
      char v46 = 0;
    }
    else
    {
      while (1)
      {
        uint64_t v43 = nullsub_1(v42);
        uint64_t v44 = *(void **)v43;
        uint64_t v45 = *(void **)(v43 + 8);
        if (*(void **)v43 != v45) {
          break;
        }
LABEL_42:
        v42 += 7560;
        if (v42 == v41) {
          goto LABEL_43;
        }
      }
      while (1)
      {
        sub_470AF8(v44, &v61);
        if (sub_E54AE4(v61, (unint64_t)v62, v63, v64, a1)) {
          break;
        }
        v44 += 1541;
        if (v44 == v45) {
          goto LABEL_42;
        }
      }
      char v46 = 1;
    }
    int v47 = *(_DWORD *)(a5 + 40) | 0x4000000;
    *(_DWORD *)(a5 + 40) = v47;
    *(unsigned char *)(a5 + 551) = v46;
    if (**(unsigned char **)a1)
    {
      sub_E238D0(*(void *)(a1 + 16), v58, a5);
      int v47 = *(_DWORD *)(a5 + 40);
    }
    *(_DWORD *)(a5 + 40) = v47 | 0x20000;
    uint64_t v48 = *(void *)(a5 + 512);
    if (!v48)
    {
      uint64_t v49 = *(void *)(a5 + 8);
      long long v50 = (void *)(v49 & 0xFFFFFFFFFFFFFFFCLL);
      if (v49) {
        long long v50 = (void *)*v50;
      }
      uint64_t v48 = sub_13DAE28((uint64_t)v50);
      *(void *)(a5 + 512) = v48;
    }
    *(_DWORD *)(v48 + 16) |= 1u;
    *(_DWORD *)(v48 + 24) = 0;
    uint64_t v51 = sub_1883FB0((void *)(a5 + 16), dword_254E9B0, 11, (uint64_t)&off_252C740, 0);
    uint64_t v52 = (long long *)(sub_6467E8(*(void **)v58, 0) + 7400);
    *(_DWORD *)(v51 + 16) |= 1u;
    uint64_t v53 = *(void *)(v51 + 8);
    uint64_t v54 = (uint64_t *)(v53 & 0xFFFFFFFFFFFFFFFCLL);
    if (v53) {
      uint64_t v54 = (uint64_t *)*v54;
    }
    sub_1881DF4((std::string **)(v51 + 48), v52, v54);
    long long v55 = (uint64_t *)sub_374CE4(*(void **)(a1 + 8));
    uint64_t result = sub_2ABCBC(*v55);
    int v40 = 0;
    int v56 = *(_DWORD *)(a5 + 40);
    *(unsigned char *)(a5 + 550) = result;
    *(_DWORD *)(a5 + 40) = v56 | 0x2100000;
  }
  *(_DWORD *)(a5 + 536) = v40;
  return result;
}

void sub_E4E1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a18);
    sub_162D64C(v18);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a18);
  sub_162D64C(v18);
  _Unwind_Resume(a1);
}

void sub_E4E1F8(_Unwind_Exception *a1)
{
  sub_162D64C(v1);
  _Unwind_Resume(a1);
}

void sub_E4E20C(_Unwind_Exception *a1)
{
  sub_162D64C(v1);
  _Unwind_Resume(a1);
}

void sub_E4E220(_Unwind_Exception *a1)
{
  sub_162D64C(v1);
  _Unwind_Resume(a1);
}

void sub_E4E234(_Unwind_Exception *a1)
{
  sub_162D64C(v1);
  _Unwind_Resume(a1);
}

void sub_E4E248(_Unwind_Exception *a1)
{
  sub_162D64C(v1);
  _Unwind_Resume(a1);
}

void sub_E4E25C(_Unwind_Exception *a1)
{
  sub_162D64C(v1);
  _Unwind_Resume(a1);
}

void sub_E4E270(_Unwind_Exception *a1)
{
  sub_162D64C(v1);
  _Unwind_Resume(a1);
}

void sub_E4E284(_Unwind_Exception *a1)
{
  sub_162D64C(v1);
  _Unwind_Resume(a1);
}

void sub_E4E298(_Unwind_Exception *a1)
{
  sub_162D64C(v1);
  _Unwind_Resume(a1);
}

void sub_E4E2AC(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  int v9 = sub_64873C(a2);
  int v10 = sub_E124DC(v9);
  *(_DWORD *)(a4 + 40) |= 0x100u;
  *(_DWORD *)(a4 + 288) = v10;
  int v11 = sub_6478E0((uint64_t)a2);
  *(_DWORD *)(a4 + 40) |= 0x40u;
  *(_DWORD *)(a4 + 280) = v11;
  unsigned int v12 = sub_64A728();
  int v13 = sub_E124B8(v12);
  *(_DWORD *)(a4 + 40) |= 0x80u;
  *(_DWORD *)(a4 + 284) = v13;
  int v14 = sub_6478D8((uint64_t)a2);
  int v15 = sub_E150CC(v14);
  *(_DWORD *)(a4 + 40) |= 0x200u;
  *(_DWORD *)(a4 + 292) = v15;
  uint64_t v16 = (void *)(a5 + 8);
  unint64_t v17 = 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a5 + 16) - *(void *)(a5 + 8)) >> 3);
  if (v17 != sub_646938(a2))
  {
    unint64_t v18 = sub_646938(a2);
    uint64_t v19 = *(void *)(a5 + 8);
    int v20 = *(char ***)(a5 + 16);
    unint64_t v21 = 0x8E38E38E38E38E39 * (((uint64_t)v20 - v19) >> 3);
    if (v18 <= v21)
    {
      if (v18 < v21)
      {
        unint64_t v22 = (char **)(v19 + 72 * v18);
        while (v20 != v22)
        {
          v20 -= 9;
          sub_3A688C(a5 + 24, v20);
        }
        *(void *)(a5 + 16) = v22;
      }
    }
    else
    {
      sub_3A88A4((char **)(a5 + 8), v18 - v21);
    }
  }
  uint64_t v23 = (void *)nullsub_1(a2);
  uint64_t v24 = v23[1] - *v23;
  if (v24)
  {
    uint64_t v25 = 0;
    unint64_t v26 = 0;
    uint64_t v27 = v24 / 12328;
    do
    {
      uint64_t v30 = (__n128 *)sub_6467E8(a2, v26);
      int v31 = sub_6478D8((uint64_t)a2);
      uint64_t v32 = *(_DWORD **)(a4 + 64);
      if (v32 && (uint64_t v33 = *(int *)(a4 + 56), (int)v33 < *v32))
      {
        *(_DWORD *)(a4 + 56) = v33 + 1;
        uint64_t v29 = *(void *)&v32[2 * v33 + 2];
      }
      else
      {
        uint64_t v28 = sub_13D8E84(*(void *)(a4 + 48));
        uint64_t v29 = sub_188CDC8(a4 + 48, v28);
      }
      sub_E4EB44((uint64_t *)a1, v30, v31, a3, v26++, v29, *v16 + v25);
      v25 += 72;
    }
    while (v27 != v26);
  }
  sub_E3DC50(a1, a2, a4);
  uint64_t v34 = sub_646C34(a2);
  if (v34 < 0) {
    __int16 v35 = -50;
  }
  else {
    __int16 v35 = 50;
  }
  int v36 = *(_DWORD *)(a4 + 40);
  *(_DWORD *)(a4 + 296) = (int)v34 / 100
                        + ((5243 * (__int16)(v35 + (int)v34 % 100)) >> 19)
                        + ((5243 * (__int16)(v35 + (int)v34 % 100)) >> 31);
  *(_DWORD *)(a4 + 40) = v36 | 0x401;
  uint64_t v37 = *(_DWORD **)(a4 + 232);
  if (!v37)
  {
    uint64_t v38 = *(void *)(a4 + 8);
    unint64_t v39 = (void *)(v38 & 0xFFFFFFFFFFFFFFFCLL);
    if (v38) {
      unint64_t v39 = (void *)*v39;
    }
    uint64_t v37 = (_DWORD *)sub_13D84A8((uint64_t)v39);
    *(void *)(a4 + 232) = v37;
  }
  sub_E4F070(a1, (unsigned int **)a2, 2 * *(unsigned __int8 *)(a1 + 83), v37);
  *(_DWORD *)(a4 + 40) |= 0x20u;
  int v40 = *(_DWORD **)(a4 + 272);
  if (!v40)
  {
    uint64_t v41 = *(void *)(a4 + 8);
    uint64_t v42 = (void *)(v41 & 0xFFFFFFFFFFFFFFFCLL);
    if (v41) {
      uint64_t v42 = (void *)*v42;
    }
    int v40 = (_DWORD *)sub_13D84A8((uint64_t)v42);
    *(void *)(a4 + 272) = v40;
  }
  sub_E4F070(a1, (unsigned int **)a2, 4, v40);
  *(_DWORD *)(a4 + 40) |= 2u;
  uint64_t v43 = *(void *)(a4 + 240);
  if (!v43)
  {
    uint64_t v44 = *(void *)(a4 + 8);
    uint64_t v45 = (void *)(v44 & 0xFFFFFFFFFFFFFFFCLL);
    if (v44) {
      uint64_t v45 = (void *)*v45;
    }
    uint64_t v43 = sub_13D8528((uint64_t)v45);
    *(void *)(a4 + 240) = v43;
  }
  char v46 = (unsigned __int8 *)sub_6477D4((uint64_t)a2);
  BOOL v47 = (*v46 | *((_DWORD *)v46 + 13)) == 0;
  *(_DWORD *)(v43 + 16) |= 1u;
  *(unsigned char *)(v43 + 24) = v47;
  char v48 = *(unsigned char *)(sub_6477D4((uint64_t)a2) + 1) ^ 1;
  *(_DWORD *)(v43 + 16) |= 2u;
  *(unsigned char *)(v43 + 25) = v48;
  sub_E4F328((unsigned char *)a1, a2, a3, a4);
  *(_OWORD *)long long __p = 0u;
  *(_OWORD *)unint64_t v68 = 0u;
  int v69 = 1065353216;
  sub_E3E18C(a1, a2, __p, a4);
  sub_E3E4C4(a1, a2, a4);
  sub_E3E6A0(a1, (uint64_t)a2, a4);
  sub_E3E848(a1, (char **)a2, a4, (uint64_t)__p);
  sub_E4F4DC(a1, (uint64_t)a2, __p, a4);
  sub_E4F5BC((int **)a1, a2, a4);
  uint64_t v49 = (uint64_t *)sub_648268((uint64_t)a2);
  uint64_t v50 = *v49;
  uint64_t v51 = v49[1];
  if (*v49 != v51)
  {
    do
    {
      uint64_t v52 = *(_DWORD **)(a4 + 208);
      if (v52 && (uint64_t v53 = *(int *)(a4 + 200), (int)v53 < *v52))
      {
        *(_DWORD *)(a4 + 200) = v53 + 1;
        uint64_t v54 = *(void *)&v52[2 * v53 + 2];
      }
      else
      {
        sub_13D9384(*(void *)(a4 + 192));
        uint64_t v54 = sub_188CDC8(a4 + 192, v55);
      }
      sub_DF290C(v50, __p, *(void *)a1, v54);
      v50 += 1056;
    }
    while (v50 != v51);
  }
  uint64_t v56 = sub_649000((uint64_t)a2);
  uint64_t v57 = *(int **)v56;
  uint64_t v58 = *(int **)(v56 + 8);
  if (*(int **)v56 != v58)
  {
    uint64_t v59 = (_DWORD *)(a4 + 216);
    do
    {
      while (1)
      {
        BOOL v60 = sub_882E4(*v57);
        BOOL v61 = v60;
        uint64_t v62 = *(unsigned int *)(a4 + 216);
        if (v62 == *(_DWORD *)(a4 + 220)) {
          break;
        }
        *(_DWORD *)(*(void *)(a4 + 224) + 4 * v62) = v60;
        *uint64_t v59 = v62 + 1;
        if (++v57 == v58) {
          goto LABEL_41;
        }
      }
      sub_188C80C((unsigned int *)(a4 + 216), v62 + 1);
      *(_DWORD *)(*(void *)(a4 + 224) + 4 * v62) = v61;
      *uint64_t v59 = v62 + 1;
      ++v57;
    }
    while (v57 != v58);
  }
LABEL_41:
  unint64_t v63 = (void **)v68[0];
  if (v68[0])
  {
    do
    {
      unint64_t v65 = (void **)*v63;
      if (*((char *)v63 + 39) < 0) {
        operator delete(v63[2]);
      }
      operator delete(v63);
      unint64_t v63 = v65;
    }
    while (v65);
  }
  unint64_t v64 = __p[0];
  __p[0] = 0;
  if (v64) {
    operator delete(v64);
  }
}

void sub_E4E81C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_3A4C2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_E4E830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_3A4C2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_E4E844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_3A4C2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_E4E858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_3A4C2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_E4E86C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 288);
  if ((int)v2 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    int v6 = 0;
    while (1)
    {
      uint64_t v8 = *(void *)(*(void *)(a2 + 296) + 8 * v4 + 8);
      uint64_t v9 = *(unsigned int *)(v8 + 56);
      if ((int)v9 >= 1) {
        break;
      }
      uint64_t v7 = v5;
LABEL_4:
      ++v4;
      uint64_t v5 = v7;
      if (v4 == v2) {
        return;
      }
    }
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *(void *)(*(void *)(v8 + 64) + 8 * v10 + 8);
      *(_DWORD *)(v11 + 40) |= 4u;
      uint64_t v12 = *(void *)(v11 + 8);
      int v13 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
      if (v12) {
        int v13 = (uint64_t *)*v13;
      }
      char v18 = 4;
      LODWORD(__p) = v6;
      BYTE4(__p) = 0;
      sub_1881DF4((std::string **)(v11 + 672), &__p, v13);
      if (v18 < 0)
      {
        operator delete((void *)__p);
        uint64_t v14 = *(unsigned int *)(v11 + 64);
        if ((int)v14 >= 1)
        {
LABEL_15:
          int v15 = (uint64_t *)(*(void *)(v11 + 72) + 8);
          do
          {
            uint64_t v16 = *v15++;
            uint64_t v7 = (v5 + 1);
            *(_DWORD *)(v16 + 40) |= 0x400u;
            *(_DWORD *)(v16 + 256) = v5;
            LODWORD(v5) = v5 + 1;
            --v14;
          }
          while (v14);
          goto LABEL_8;
        }
      }
      else
      {
        uint64_t v14 = *(unsigned int *)(v11 + 64);
        if ((int)v14 >= 1) {
          goto LABEL_15;
        }
      }
      uint64_t v7 = v5;
LABEL_8:
      ++v6;
      ++v10;
      uint64_t v5 = v7;
      if (v10 == v9) {
        goto LABEL_4;
      }
    }
  }
}

void sub_E4E9C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_E4E9DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 40) |= 0x10000u;
  uint64_t v4 = *(void *)(a3 + 504);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 1064);
    uint64_t i = *(void *)(a2 + 1072);
    if (v5 == i) {
      return;
    }
    goto LABEL_9;
  }
  uint64_t v8 = *(void *)(a3 + 8);
  uint64_t v9 = (void *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
  if (v8) {
    uint64_t v9 = (void *)*v9;
  }
  uint64_t v4 = sub_13D8978((uint64_t)v9);
  *(void *)(a3 + 504) = v4;
  uint64_t v5 = *(void *)(a2 + 1064);
  for (uint64_t i = *(void *)(a2 + 1072); v5 != i; v5 += 496)
  {
LABEL_9:
    *(_OWORD *)long long __p = 0u;
    *(_OWORD *)char v18 = 0u;
    int v19 = 1065353216;
    uint64_t v10 = *(_DWORD **)(v4 + 88);
    if (v10 && (uint64_t v11 = *(int *)(v4 + 80), (int)v11 < *v10))
    {
      *(_DWORD *)(v4 + 80) = v11 + 1;
      uint64_t v12 = *(void *)&v10[2 * v11 + 2];
    }
    else
    {
      uint64_t v13 = sub_13D88C0(*(void *)(v4 + 72));
      uint64_t v12 = sub_188CDC8(v4 + 72, v13);
    }
    sub_E11C8C(v5, __p, v12);
    uint64_t v14 = (void **)v18[0];
    if (v18[0])
    {
      do
      {
        uint64_t v16 = (void **)*v14;
        if (*((char *)v14 + 39) < 0) {
          operator delete(v14[2]);
        }
        operator delete(v14);
        uint64_t v14 = v16;
      }
      while (v16);
    }
    int v15 = __p[0];
    __p[0] = 0;
    if (v15) {
      operator delete(v15);
    }
  }
}

void sub_E4EB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int32x2_t *sub_E4EB44(uint64_t *a1, __n128 *a2, int a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  int v13 = sub_E150CC(a3);
  *(_DWORD *)(a6 + 40) |= 0x1000000u;
  *(_DWORD *)(a6 + 836) = v13;
  int v14 = sub_E124B8(a2[66].n128_u8[0]);
  *(_DWORD *)(a6 + 40) |= 0x200000u;
  *(_DWORD *)(a6 + 824) = v14;
  int v15 = sub_E124DC(a2[66].n128_u8[1]);
  int v16 = *(_DWORD *)(a6 + 40);
  *(_DWORD *)(a6 + 840) = v15;
  uint64_t v17 = a2[31].n128_i64[1];
  int v18 = (int)v17 / 100;
  int v19 = (int)v17 % 100;
  if (v17 < 0) {
    __int16 v20 = -50;
  }
  else {
    __int16 v20 = 50;
  }
  *(_DWORD *)(a6 + 40) = v16 | 0x2400000;
  *(_DWORD *)(a6 + 828) = v18
                        + ((5243 * (__int16)(v20 + v19)) >> 19)
                        + ((5243 * (__int16)(v20 + v19)) >> 31);
  sub_E509E8((uint64_t)a1, (unsigned int *)a2, (_DWORD *)a6);
  sub_E40B4C((uint64_t)a1, (uint64_t *)a2, a6);
  int v21 = *(_DWORD *)(a6 + 44);
  *(unsigned char *)(a6 + 868) = (a2[50].n128_u8[0] | a2[53].n128_u32[1]) == 0;
  char v22 = a2[50].n128_u8[1] ^ 1;
  *(_DWORD *)(a6 + 44) = v21 | 3;
  *(unsigned char *)(a6 + 869) = v22;
  if (a2[751].n128_u64[1] == a2[752].n128_u64[0]) {
    sub_E110A0((uint64_t *)&a2[458], a6);
  }
  else {
    sub_E14810(&a2[751].n128_i64[1], a6);
  }
  sub_E50C98(a1, a2, a4, a5, a6);
  sub_E50E90(a1, (uint64_t)a2, a6, a7);
  if (a2[731].n128_u64[1] != a2[732].n128_u64[0]
    && a2[730].n128_u64[1] != 0x7FFFFFFFFFFFFFFFLL
    && a2[731].n128_u64[0] != 0x7FFFFFFFFFFFFFFFLL)
  {
    *(_DWORD *)(a6 + 40) |= 0x4000u;
    uint64_t v23 = *(void *)(a6 + 768);
    if (!v23)
    {
      uint64_t v24 = *(void *)(a6 + 8);
      uint64_t v25 = (void *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
      if (v24) {
        uint64_t v25 = (void *)*v25;
      }
      sub_13D7B20((uint64_t)v25);
      uint64_t v23 = v26;
      *(void *)(a6 + 768) = v26;
    }
    sub_E12EEC(&a2[730].n128_i64[1], v23);
  }
  sub_E526B0((uint64_t)a1, (uint64_t)a2, a6);
  sub_E52B24((uint64_t)a1, a2, a6);
  sub_E40F98((uint64_t)a1, (uint64_t)a2, a6);
  uint64_t v55 = (int32x2_t *)a1;
  sub_E411A4((uint64_t)a1, a2, a6);
  unint64_t v27 = a2[753].n128_u64[1];
  uint64_t v56 = a2;
  unint64_t v28 = a2[754].n128_u64[0];
  if (v27 != v28)
  {
    uint64_t v29 = (_DWORD *)(a6 + 560);
    do
    {
      while (1)
      {
        __int16 v30 = *(uint64_t *)v27 < 0 ? -50 : 50;
        unsigned int v31 = (int)*(void *)v27 / 100
            + ((5243 * (__int16)(v30 + (int)*(void *)v27 % 100)) >> 19)
            + ((5243 * (__int16)(v30 + (int)*(void *)v27 % 100)) >> 31);
        uint64_t v32 = *(unsigned int *)(a6 + 584);
        if (v32 == *(_DWORD *)(a6 + 588))
        {
          int v33 = v32 + 1;
          sub_188C80C((unsigned int *)(a6 + 584), v32 + 1);
          *(_DWORD *)(*(void *)(a6 + 592) + 4 * v32) = v31;
        }
        else
        {
          *(_DWORD *)(*(void *)(a6 + 592) + 4 * v32) = v31;
          int v33 = v32 + 1;
        }
        *(_DWORD *)(a6 + 584) = v33;
        int v34 = *(unsigned char *)(v27 + 8) ? 1 : 2;
        uint64_t v35 = *(unsigned int *)(a6 + 560);
        if (v35 == *(_DWORD *)(a6 + 564)) {
          break;
        }
        *(_DWORD *)(*(void *)(a6 + 568) + 4 * v35) = v34;
        *uint64_t v29 = v35 + 1;
        v27 += 16;
        if (v27 == v28) {
          goto LABEL_29;
        }
      }
      sub_188C80C((unsigned int *)(a6 + 560), v35 + 1);
      *(_DWORD *)(*(void *)(a6 + 568) + 4 * v35) = v34;
      *uint64_t v29 = v35 + 1;
      v27 += 16;
    }
    while (v27 != v28);
  }
LABEL_29:
  uint64_t v36 = a2[627].n128_i64[0];
  for (unint64_t i = a2[627].n128_u64[1]; v36 != i; v36 += 616)
  {
    while (1)
    {
      int v40 = *(_DWORD **)(a6 + 624);
      if (v40)
      {
        uint64_t v41 = *(int *)(a6 + 616);
        if ((int)v41 < *v40) {
          break;
        }
      }
      uint64_t v38 = sub_13D6194(*(void *)(a6 + 608));
      uint64_t v39 = sub_188CDC8(a6 + 608, v38);
      sub_E159B0(v36, v39);
      v36 += 616;
      if (v36 == i) {
        goto LABEL_35;
      }
    }
    *(_DWORD *)(a6 + 616) = v41 + 1;
    sub_E159B0(v36, *(void *)&v40[2 * v41 + 2]);
  }
LABEL_35:
  uint64_t v42 = v56[625].n128_i64[1];
  for (unint64_t j = v56[626].n128_u64[0]; v42 != j; v42 += 616)
  {
    while (1)
    {
      char v46 = *(_DWORD **)(a6 + 648);
      if (v46)
      {
        uint64_t v47 = *(int *)(a6 + 640);
        if ((int)v47 < *v46) {
          break;
        }
      }
      uint64_t v44 = sub_13D6194(*(void *)(a6 + 632));
      uint64_t v45 = sub_188CDC8(a6 + 632, v44);
      sub_E159B0(v42, v45);
      v42 += 616;
      if (v42 == j) {
        goto LABEL_41;
      }
    }
    *(_DWORD *)(a6 + 640) = v47 + 1;
    sub_E159B0(v42, *(void *)&v46[2 * v47 + 2]);
  }
LABEL_41:
  uint64_t v48 = v56[628].n128_i64[1];
  for (unint64_t k = v56[629].n128_u64[0]; v48 != k; v48 += 616)
  {
    while (1)
    {
      uint64_t v52 = *(_DWORD **)(a6 + 624);
      if (v52)
      {
        uint64_t v53 = *(int *)(a6 + 616);
        if ((int)v53 < *v52) {
          break;
        }
      }
      uint64_t v50 = sub_13D6194(*(void *)(a6 + 608));
      uint64_t v51 = sub_188CDC8(a6 + 608, v50);
      sub_E159B0(v48, v51);
      v48 += 616;
      if (v48 == k) {
        goto LABEL_47;
      }
    }
    *(_DWORD *)(a6 + 616) = v53 + 1;
    sub_E159B0(v48, *(void *)&v52[2 * v53 + 2]);
  }
LABEL_47:

  return sub_E41320(v55, (uint64_t)v56, a6);
}

uint64_t sub_E4F070(uint64_t a1, unsigned int **a2, int a3, _DWORD *a4)
{
  int v7 = sub_47E93C((uint64_t)a2, 0, a3);
  int v8 = sub_646CE8((uint64_t)a2);
  if (v8 + v7 < 0 != __OFADD__(v8, v7)) {
    char v9 = -5;
  }
  else {
    char v9 = 5;
  }
  a4[4] |= 1u;
  a4[6] = (v8 + v7) / 10
        + (((103 * (char)(v9 + (v8 + v7) % 10)) >> 15) & 1)
        + ((103 * (char)(v9 + (v8 + v7) % 10)) >> 10);
  if (sub_64B038(a2))
  {
    int v11 = sub_47F26C((uint64_t)a2, 2, a3);
    if (v11 < 0) {
      char v12 = -5;
    }
    else {
      char v12 = 5;
    }
    a4[4] |= 2u;
    a4[7] = v11 / 10
          + (((103 * (char)(v12 + v11 % 10)) >> 15) & 1)
          + ((103 * (char)(v12 + v11 % 10)) >> 10);
    if (!sub_64AFB8(a2))
    {
LABEL_6:
      if (!sub_64B0B8(a2)) {
        goto LABEL_7;
      }
      goto LABEL_17;
    }
  }
  else if (!sub_64AFB8(a2))
  {
    goto LABEL_6;
  }
  int v13 = sub_47F26C((uint64_t)a2, 1, a3);
  if (v13 < 0) {
    char v14 = -5;
  }
  else {
    char v14 = 5;
  }
  a4[4] |= 4u;
  a4[8] = v13 / 10 + (((103 * (char)(v14 + v13 % 10)) >> 15) & 1) + ((103 * (char)(v14 + v13 % 10)) >> 10);
  if (!sub_64B0B8(a2))
  {
LABEL_7:
    uint64_t result = sub_64B138(a2);
    if (!result) {
      return result;
    }
    goto LABEL_21;
  }
LABEL_17:
  int v15 = sub_47F26C((uint64_t)a2, 4, a3);
  if (v15 < 0) {
    char v16 = -5;
  }
  else {
    char v16 = 5;
  }
  a4[4] |= 8u;
  a4[9] = v15 / 10 + (((103 * (char)(v16 + v15 % 10)) >> 15) & 1) + ((103 * (char)(v16 + v15 % 10)) >> 10);
  uint64_t result = sub_64B138(a2);
  if (result)
  {
LABEL_21:
    uint64_t result = sub_47F26C((uint64_t)a2, 5, a3);
    if ((int)result < 0) {
      char v17 = -5;
    }
    else {
      char v17 = 5;
    }
    a4[4] |= 0x10u;
    a4[10] = (int)result / 10
           + (((103 * (char)(v17 + (int)result % 10)) >> 15) & 1)
           + ((103 * (char)(v17 + (int)result % 10)) >> 10);
  }
  return result;
}

void sub_E4F328(unsigned char *a1, void *a2, unint64_t a3, uint64_t a4)
{
  int v8 = (void *)nullsub_1(a2);
  uint64_t v9 = v8[1] - *v8;
  if (v9)
  {
    unint64_t v10 = 0;
    unint64_t v11 = 0xFF55E3181697D6CDLL * (v9 >> 3);
    while (1)
    {
      uint64_t v12 = sub_6467E8(a2, v10);
      uint64_t v13 = *(void *)(v12 + 10176);
      uint64_t v14 = *(void *)(v12 + 10184);
      if (v13 != v14) {
        break;
      }
LABEL_3:
      if (++v10 == v11) {
        return;
      }
    }
    int v15 = (void *)v12;
    while (1)
    {
      if (!sub_63A4A4(v13)) {
        goto LABEL_6;
      }
      unint64_t v16 = sub_470ADC(v15);
      unint64_t v17 = *(void *)(v13 + 8);
      if (v17 >= v16 || v17 == v16 - 1 && sub_46CAC4((uint64_t)v15) < 0x3B9ACA00) {
        goto LABEL_6;
      }
      if (sub_63A8F8(v13))
      {
        if (a1[24]) {
          goto LABEL_20;
        }
      }
      else
      {
        if (!sub_63A908(v13))
        {
          if (!sub_63A770(v13) && !sub_63A760(v13) || !a1[26]) {
            goto LABEL_6;
          }
LABEL_20:
          sub_E506FC(a3, v10, v13, &__p);
          sub_E4FAFC((uint64_t)a1, v13, (const void **)&__p.__r_.__value_.__l.__data_, a4);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          goto LABEL_6;
        }
        if (a1[25]) {
          goto LABEL_20;
        }
      }
LABEL_6:
      v13 += 104;
      if (v13 == v14) {
        goto LABEL_3;
      }
    }
  }
}

void sub_E4F4C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_E4F4DC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  *(_DWORD *)(a4 + 40) |= 4u;
  uint64_t v7 = *(void *)(a4 + 248);
  if (!v7)
  {
    uint64_t v9 = *(void *)(a4 + 8);
    unint64_t v10 = (void *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
    if (v9) {
      unint64_t v10 = (void *)*v10;
    }
    sub_13D8AFC((uint64_t)v10);
    uint64_t v7 = v11;
    *(void *)(a4 + 248) = v11;
  }
  sub_E3EED8(a1, a2, v7);
  sub_E3F1A0(a1, a2, v7);
  sub_E3F318(a1, a2, v7);
  sub_E4F8DC(a1, a2, v7);
  sub_E4F994(a1, a2, v7);

  sub_E3F6E8(a1, a2, a3, v7);
}

void sub_E4F5BC(int **a1, void *a2, uint64_t a3)
{
  if (*((unsigned char *)*a1 + 32))
  {
    sub_E33418((uint64_t)v13, *a1);
    sub_E33810(v13, a2, a3);
    v13[0] = (void (**)(void, uint64_t, uint64_t))&off_243EE58;
    if ((v22 & 0x80000000) == 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)v13);
    sub_188FC78(v13, (uint64_t)"Request that has supports_waypoint_routes set to true but supports_guidance_events set to false which shouldn't happen.", 119);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v11, 3u);
    if (v12 < 0) {
      operator delete(v11);
    }
    if (SHIBYTE(v18) < 0) {
      operator delete(v16);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  sub_DEA278((uint64_t)v13, *a1);
  int v6 = (void *)nullsub_1(a2);
  int v7 = 379049677 * ((uint64_t)(v6[1] - *v6) >> 3);
  if (v7)
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(*(void *)(a3 + 64) + 8 * (int)v8 + 8);
      uint64_t v10 = sub_6467E8(a2, v8);
      sub_DEA3A4((uint64_t)v13, v10, v9);
      ++v8;
    }
    while (v7 != v8);
  }
  v13[0] = (void (**)(void, uint64_t, uint64_t))&off_243EE58;
  if (v22 < 0) {
LABEL_3:
  }
    operator delete(__p);
LABEL_4:
  if (v19)
  {
    __int16 v20 = v19;
    operator delete(v19);
  }
  if (v17)
  {
    int v18 = v17;
    operator delete(v17);
  }
  if (v14)
  {
    int v15 = v14;
    operator delete(v14);
  }
}

void sub_E4F854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_E4F8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_E24684((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_E4F8B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_E24684((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_E4F8C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_E24684((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_E4F8DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_648134(a2);
  uint64_t v6 = *(unsigned __int8 *)(result + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(result + 8);
  }
  if (v6)
  {
    uint64_t v7 = sub_648134(a2);
    sub_5F3D48((uint64_t)v12, v7);
    *(_DWORD *)(a3 + 16) |= 0x10u;
    uint64_t v8 = *(void *)(a3 + 56);
    if (!v8)
    {
      uint64_t v9 = *(void *)(a3 + 8);
      uint64_t v10 = (void *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
      if (v9) {
        uint64_t v10 = (void *)*v10;
      }
      sub_13D6A1C((uint64_t)v10);
      uint64_t v8 = v11;
      *(void *)(a3 + 56) = v11;
    }
    sub_5F4D30(v12, v8);
    return sub_4D4B58((uint64_t)v12);
  }
  return result;
}

void sub_E4F980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_E4F994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_6481E4(a2);
  int v6 = *(_DWORD *)(v5 + 32);
  if (v6 != 1)
  {
    if (v6 || *(_DWORD *)v5 == -1) {
      return;
    }
LABEL_11:
    uint64_t v8 = sub_6481E4(a2);
    sub_4F57A0((uint64_t)v15, v8);
    *(_DWORD *)(a3 + 16) |= 0x40u;
    uint64_t v10 = *(void *)(a3 + 72);
    if (!v10)
    {
      uint64_t v11 = *(void *)(a3 + 8);
      char v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
      if (v11) {
        char v12 = (void *)*v12;
      }
      uint64_t v10 = sub_13DAB08((uint64_t)v12);
      *(void *)(a3 + 72) = v10;
    }
    sub_523A2C((uint64_t)v15, v10, v9);
    if (v23 < 0)
    {
      operator delete(__p);
      if ((v21 & 0x80000000) == 0)
      {
LABEL_17:
        int v13 = v19;
        if (v19 != 1) {
          goto LABEL_18;
        }
        goto LABEL_23;
      }
    }
    else if ((v21 & 0x80000000) == 0)
    {
      goto LABEL_17;
    }
    operator delete(v20);
    int v13 = v19;
    if (v19 != 1)
    {
LABEL_18:
      if (v13 || (v18 & 0x80000000) == 0) {
        return;
      }
      uint64_t v14 = v16;
LABEL_25:
      operator delete(v14);
      return;
    }
LABEL_23:
    uint64_t v14 = v16;
    if (!v16) {
      return;
    }
    unint64_t v17 = v16;
    goto LABEL_25;
  }
  BOOL v7 = *(_DWORD *)(v5 + 4) == -1 && *(_DWORD *)v5 == -1;
  if (!v7 || *(void *)(v5 + 8) != *(void *)(v5 + 16)) {
    goto LABEL_11;
  }
}

void sub_E4FAE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D9814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_E4FAFC(uint64_t a1, uint64_t a2, const void **a3, uint64_t a4)
{
  if (sub_63A4A4(a2))
  {
    unint64_t v6 = sub_63A848(a2);
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v7 = *(void *)(a2 + 40);
    if (v8 != v7)
    {
      unint64_t v130 = (_DWORD *)(a2 + 20);
      unint64_t v131 = HIDWORD(v6);
      uint64_t v126 = (uint64_t *)(a4 + 120);
      unint64_t v127 = (uint64_t *)(a4 + 144);
      uint64_t v128 = a4;
      uint64_t v132 = *(void *)(a2 + 40);
      while (!sub_63A048(v8))
      {
LABEL_7:
        v8 += 176;
        if (v8 == v7) {
          return;
        }
      }
      switch(*(_DWORD *)(v8 + 8))
      {
        case 1:
          char v12 = *(_DWORD **)(a4 + 136);
          if (v12 && (uint64_t v13 = *(int *)(a4 + 128), (int)v13 < *v12))
          {
            *(_DWORD *)(a4 + 128) = v13 + 1;
            uint64_t v14 = *(void *)&v12[2 * v13 + 2];
          }
          else
          {
            uint64_t v26 = sub_13D9774(*v126);
            uint64_t v14 = sub_188CDC8((uint64_t)v126, (uint64_t)v26);
          }
          int v27 = *((char *)a3 + 23);
          if (v27 >= 0) {
            size_t v28 = *((unsigned __int8 *)a3 + 23);
          }
          else {
            size_t v28 = (size_t)a3[1];
          }
          int v29 = byte_25FBC9F;
          if (byte_25FBC9F >= 0) {
            size_t v30 = byte_25FBC9F;
          }
          else {
            size_t v30 = qword_25FBC90;
          }
          unint64_t v31 = v30 + v28;
          if (v30 + v28 > 0x7FFFFFFFFFFFFFF7) {
            goto LABEL_193;
          }
          if (v31 > 0x16)
          {
            uint64_t v65 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v31 | 7) != 0x17) {
              uint64_t v65 = v31 | 7;
            }
            uint64_t v66 = v65 + 1;
            p_dst = (char *)operator new(v65 + 1);
            unint64_t v67 = v66 | 0x8000000000000000;
            a4 = v128;
            __dst.__r_.__value_.__l.__size_ = v30 + v28;
            __dst.__r_.__value_.__r.__words[2] = v67;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
            if (v28) {
              goto LABEL_87;
            }
          }
          else
          {
            memset(&__dst, 0, sizeof(__dst));
            p_dst = (char *)&__dst;
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v30 + v28;
            if (!v28) {
              goto LABEL_91;
            }
LABEL_87:
            if (v27 >= 0) {
              unint64_t v68 = a3;
            }
            else {
              unint64_t v68 = *a3;
            }
            memmove(p_dst, v68, v28);
          }
LABEL_91:
          int v69 = &p_dst[v28];
          if (v30)
          {
            if (v29 >= 0) {
              unint64_t v70 = &qword_25FBC88;
            }
            else {
              unint64_t v70 = (uint64_t *)qword_25FBC88;
            }
            memmove(v69, v70, v30);
          }
          v69[v30] = 0;
          *(_DWORD *)(v14 + 16) |= 1u;
          uint64_t v71 = *(void *)(v14 + 8);
          char v72 = (uint64_t *)(v71 & 0xFFFFFFFFFFFFFFFCLL);
          if (v71) {
            char v72 = (uint64_t *)*v72;
          }
          sub_1881E08((uint64_t *)(v14 + 24), (long long *)&__dst, v72);
          uint64_t v7 = v132;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__r_.__value_.__l.__data_);
            *(_DWORD *)(v14 + 16) |= 2u;
            uint64_t v9 = *(void *)(v14 + 32);
            if (!v9) {
              goto LABEL_174;
            }
          }
          else
          {
            *(_DWORD *)(v14 + 16) |= 2u;
            uint64_t v9 = *(void *)(v14 + 32);
            if (!v9)
            {
LABEL_174:
              uint64_t v116 = *(void *)(v14 + 8);
              int v117 = (void *)(v116 & 0xFFFFFFFFFFFFFFFCLL);
              if (v116) {
                int v117 = (void *)*v117;
              }
              uint64_t v9 = sub_15C1918((uint64_t)v117);
              *(void *)(v14 + 32) = v9;
            }
          }
          sub_E112BC(v130, v9, v10);
          *(_DWORD *)(v14 + 16) |= 0xCu;
          int v11 = 1;
          goto LABEL_6;
        case 2:
          int v15 = *(_DWORD **)(a4 + 136);
          if (v15 && (uint64_t v16 = *(int *)(a4 + 128), (int)v16 < *v15))
          {
            *(_DWORD *)(a4 + 128) = v16 + 1;
            uint64_t v14 = *(void *)&v15[2 * v16 + 2];
          }
          else
          {
            int v33 = sub_13D9774(*v126);
            uint64_t v14 = sub_188CDC8((uint64_t)v126, (uint64_t)v33);
          }
          int v34 = *((char *)a3 + 23);
          if (v34 >= 0) {
            size_t v35 = *((unsigned __int8 *)a3 + 23);
          }
          else {
            size_t v35 = (size_t)a3[1];
          }
          int v36 = byte_25FBCB7;
          if (byte_25FBCB7 >= 0) {
            size_t v37 = byte_25FBCB7;
          }
          else {
            size_t v37 = qword_25FBCA8;
          }
          unint64_t v38 = v37 + v35;
          if (v37 + v35 > 0x7FFFFFFFFFFFFFF7) {
            goto LABEL_193;
          }
          if (v38 <= 0x16)
          {
            memset(&__dst, 0, sizeof(__dst));
            uint64_t v39 = (char *)&__dst;
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v37 + v35;
            if (!v35) {
              goto LABEL_108;
            }
LABEL_104:
            if (v34 >= 0) {
              uint64_t v76 = a3;
            }
            else {
              uint64_t v76 = *a3;
            }
            memmove(v39, v76, v35);
            goto LABEL_108;
          }
          uint64_t v73 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v38 | 7) != 0x17) {
            uint64_t v73 = v38 | 7;
          }
          uint64_t v74 = v73 + 1;
          uint64_t v39 = (char *)operator new(v73 + 1);
          unint64_t v75 = v74 | 0x8000000000000000;
          a4 = v128;
          __dst.__r_.__value_.__l.__size_ = v37 + v35;
          __dst.__r_.__value_.__r.__words[2] = v75;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
          if (v35) {
            goto LABEL_104;
          }
LABEL_108:
          long long v77 = &v39[v35];
          if (v37)
          {
            if (v36 >= 0) {
              int v78 = &qword_25FBCA0;
            }
            else {
              int v78 = (uint64_t *)qword_25FBCA0;
            }
            memmove(v77, v78, v37);
          }
          v77[v37] = 0;
          *(_DWORD *)(v14 + 16) |= 1u;
          uint64_t v79 = *(void *)(v14 + 8);
          unsigned int v80 = (uint64_t *)(v79 & 0xFFFFFFFFFFFFFFFCLL);
          if (v79) {
            unsigned int v80 = (uint64_t *)*v80;
          }
          sub_1881E08((uint64_t *)(v14 + 24), (long long *)&__dst, v80);
          uint64_t v7 = v132;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__r_.__value_.__l.__data_);
            *(_DWORD *)(v14 + 16) |= 2u;
            uint64_t v82 = *(void *)(v14 + 32);
            if (v82) {
              goto LABEL_180;
            }
          }
          else
          {
            *(_DWORD *)(v14 + 16) |= 2u;
            uint64_t v82 = *(void *)(v14 + 32);
            if (v82) {
              goto LABEL_180;
            }
          }
          uint64_t v118 = *(void *)(v14 + 8);
          unsigned int v119 = (void *)(v118 & 0xFFFFFFFFFFFFFFFCLL);
          if (v118) {
            unsigned int v119 = (void *)*v119;
          }
          uint64_t v82 = sub_15C1918((uint64_t)v119);
          *(void *)(v14 + 32) = v82;
LABEL_180:
          sub_E112BC(v130, v82, v81);
          *(_DWORD *)(v14 + 16) |= 0xCu;
          int v11 = 2;
LABEL_6:
          *(_DWORD *)(v14 + 40) = v11;
          *(_DWORD *)(v14 + 44) = v131;
          goto LABEL_7;
        case 3:
          unint64_t v17 = *(_DWORD **)(a4 + 160);
          if (v17 && (uint64_t v18 = *(int *)(a4 + 152), (int)v18 < *v17))
          {
            *(_DWORD *)(a4 + 152) = v18 + 1;
            uint64_t v19 = *(void *)&v17[2 * v18 + 2];
          }
          else
          {
            sub_13D96E0(*v127);
            uint64_t v19 = sub_188CDC8((uint64_t)v127, v40);
          }
          int v41 = *((char *)a3 + 23);
          if (v41 >= 0) {
            size_t v42 = *((unsigned __int8 *)a3 + 23);
          }
          else {
            size_t v42 = (size_t)a3[1];
          }
          int v43 = byte_25FBCCF;
          if (byte_25FBCCF >= 0) {
            size_t v44 = byte_25FBCCF;
          }
          else {
            size_t v44 = qword_25FBCC0;
          }
          unint64_t v45 = v44 + v42;
          if (v44 + v42 > 0x7FFFFFFFFFFFFFF7) {
            goto LABEL_193;
          }
          if (v45 <= 0x16)
          {
            memset(&__dst, 0, sizeof(__dst));
            char v46 = (char *)&__dst;
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v44 + v42;
            if (!v42) {
              goto LABEL_125;
            }
LABEL_121:
            if (v41 >= 0) {
              unsigned int v86 = a3;
            }
            else {
              unsigned int v86 = *a3;
            }
            memmove(v46, v86, v42);
            goto LABEL_125;
          }
          uint64_t v83 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v45 | 7) != 0x17) {
            uint64_t v83 = v45 | 7;
          }
          uint64_t v84 = v83 + 1;
          char v46 = (char *)operator new(v83 + 1);
          unint64_t v85 = v84 | 0x8000000000000000;
          a4 = v128;
          __dst.__r_.__value_.__l.__size_ = v44 + v42;
          __dst.__r_.__value_.__r.__words[2] = v85;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
          if (v42) {
            goto LABEL_121;
          }
LABEL_125:
          uint64_t v87 = &v46[v42];
          if (v44)
          {
            if (v43 >= 0) {
              uint64_t v88 = &qword_25FBCB8;
            }
            else {
              uint64_t v88 = (uint64_t *)qword_25FBCB8;
            }
            memmove(v87, v88, v44);
          }
          v87[v44] = 0;
          *(_DWORD *)(v19 + 16) |= 1u;
          uint64_t v89 = *(void *)(v19 + 8);
          unint64_t v90 = (uint64_t *)(v89 & 0xFFFFFFFFFFFFFFFCLL);
          if (v89) {
            unint64_t v90 = (uint64_t *)*v90;
          }
          sub_1881E08((uint64_t *)(v19 + 24), (long long *)&__dst, v90);
          uint64_t v7 = v132;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__r_.__value_.__l.__data_);
            *(_DWORD *)(v19 + 16) |= 4u;
            uint64_t v92 = *(void *)(v19 + 40);
            if (!v92)
            {
LABEL_182:
              uint64_t v120 = *(void *)(v19 + 8);
              uint64_t v121 = (void *)(v120 & 0xFFFFFFFFFFFFFFFCLL);
              if (v120) {
                uint64_t v121 = (void *)*v121;
              }
              uint64_t v92 = sub_15C1918((uint64_t)v121);
              *(void *)(v19 + 40) = v92;
            }
          }
          else
          {
            *(_DWORD *)(v19 + 16) |= 4u;
            uint64_t v92 = *(void *)(v19 + 40);
            if (!v92) {
              goto LABEL_182;
            }
          }
          sub_E112BC(v130, v92, v91);
          int v122 = *(_DWORD *)(v19 + 16);
          *(_DWORD *)(v19 + 64) = 2;
          *(_DWORD *)(v19 + 16) = v122 | 0x220;
          *(_DWORD *)(v19 + 84) = v131;
          if (sub_63A4F0(a2))
          {
            *(_DWORD *)(v19 + 16) |= 0x20u;
            *(_DWORD *)(v19 + 64) = 5;
          }
          goto LABEL_7;
        case 4:
          __int16 v20 = *(_DWORD **)(a4 + 160);
          if (v20 && (uint64_t v21 = *(int *)(a4 + 152), (int)v21 < *v20))
          {
            *(_DWORD *)(a4 + 152) = v21 + 1;
            uint64_t v22 = *(void *)&v20[2 * v21 + 2];
          }
          else
          {
            sub_13D96E0(*v127);
            uint64_t v22 = sub_188CDC8((uint64_t)v127, v47);
          }
          int v48 = *((char *)a3 + 23);
          if (v48 >= 0) {
            size_t v49 = *((unsigned __int8 *)a3 + 23);
          }
          else {
            size_t v49 = (size_t)a3[1];
          }
          int v50 = byte_25FBCE7;
          if (byte_25FBCE7 >= 0) {
            size_t v51 = byte_25FBCE7;
          }
          else {
            size_t v51 = qword_25FBCD8;
          }
          unint64_t v52 = v51 + v49;
          if (v51 + v49 > 0x7FFFFFFFFFFFFFF7) {
            goto LABEL_193;
          }
          if (v52 <= 0x16)
          {
            memset(&__dst, 0, sizeof(__dst));
            uint64_t v53 = (char *)&__dst;
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v51 + v49;
            if (!v49) {
              goto LABEL_142;
            }
LABEL_138:
            if (v48 >= 0) {
              uint64_t v96 = a3;
            }
            else {
              uint64_t v96 = *a3;
            }
            memmove(v53, v96, v49);
            goto LABEL_142;
          }
          uint64_t v93 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v52 | 7) != 0x17) {
            uint64_t v93 = v52 | 7;
          }
          uint64_t v94 = v93 + 1;
          uint64_t v53 = (char *)operator new(v93 + 1);
          unint64_t v95 = v94 | 0x8000000000000000;
          a4 = v128;
          __dst.__r_.__value_.__l.__size_ = v51 + v49;
          __dst.__r_.__value_.__r.__words[2] = v95;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
          if (v49) {
            goto LABEL_138;
          }
LABEL_142:
          uint64_t v97 = &v53[v49];
          if (v51)
          {
            if (v50 >= 0) {
              uint64_t v98 = &qword_25FBCD0;
            }
            else {
              uint64_t v98 = (uint64_t *)qword_25FBCD0;
            }
            memmove(v97, v98, v51);
          }
          v97[v51] = 0;
          *(_DWORD *)(v22 + 16) |= 1u;
          uint64_t v99 = *(void *)(v22 + 8);
          uint64_t v100 = (uint64_t *)(v99 & 0xFFFFFFFFFFFFFFFCLL);
          if (v99) {
            uint64_t v100 = (uint64_t *)*v100;
          }
          sub_1881E08((uint64_t *)(v22 + 24), (long long *)&__dst, v100);
          uint64_t v7 = v132;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__r_.__value_.__l.__data_);
            *(_DWORD *)(v22 + 16) |= 4u;
            uint64_t v102 = *(void *)(v22 + 40);
            if (!v102)
            {
LABEL_188:
              uint64_t v123 = *(void *)(v22 + 8);
              uint64_t v124 = (void *)(v123 & 0xFFFFFFFFFFFFFFFCLL);
              if (v123) {
                uint64_t v124 = (void *)*v124;
              }
              uint64_t v102 = sub_15C1918((uint64_t)v124);
              *(void *)(v22 + 40) = v102;
            }
          }
          else
          {
            *(_DWORD *)(v22 + 16) |= 4u;
            uint64_t v102 = *(void *)(v22 + 40);
            if (!v102) {
              goto LABEL_188;
            }
          }
          sub_E112BC(v130, v102, v101);
          int v125 = *(_DWORD *)(v22 + 16);
          *(_DWORD *)(v22 + 64) = 5;
          *(_DWORD *)(v22 + 16) = v125 | 0x220;
          *(_DWORD *)(v22 + 84) = v131;
          goto LABEL_7;
        case 5:
          char v23 = *(_DWORD **)(a4 + 160);
          if (v23 && (uint64_t v24 = *(int *)(a4 + 152), (int)v24 < *v23))
          {
            *(_DWORD *)(a4 + 152) = v24 + 1;
            uint64_t v25 = *(void *)&v23[2 * v24 + 2];
          }
          else
          {
            sub_13D96E0(*v127);
            uint64_t v25 = sub_188CDC8((uint64_t)v127, v54);
          }
          unsigned int v55 = sub_63A824(a2);
          std::to_string(&__dst, v55);
          *(_DWORD *)(v25 + 16) |= 2u;
          uint64_t v56 = *(void *)(v25 + 8);
          uint64_t v57 = (uint64_t *)(v56 & 0xFFFFFFFFFFFFFFFCLL);
          if (v56) {
            uint64_t v57 = (uint64_t *)*v57;
          }
          sub_1881E08((uint64_t *)(v25 + 32), (long long *)&__dst, v57);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          int v58 = *(_DWORD *)(v25 + 16);
          *(double *)(v25 + 72) = *(double *)(a2 + 88) / 3.6;
          *(_DWORD *)(v25 + 16) = v58 | 0xA0;
          *(_DWORD *)(v25 + 64) = 1;
          int v59 = *((char *)a3 + 23);
          if (v59 >= 0) {
            size_t v60 = *((unsigned __int8 *)a3 + 23);
          }
          else {
            size_t v60 = (size_t)a3[1];
          }
          int v61 = byte_25FBCFF;
          if (byte_25FBCFF >= 0) {
            size_t v62 = byte_25FBCFF;
          }
          else {
            size_t v62 = qword_25FBCF0;
          }
          unint64_t v63 = v62 + v60;
          if (v62 + v60 > 0x7FFFFFFFFFFFFFF7) {
LABEL_193:
          }
            sub_188D690();
          if (v63 <= 0x16)
          {
            memset(&__dst, 0, sizeof(__dst));
            unint64_t v64 = (char *)&__dst;
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v62 + v60;
            if (!v60) {
              goto LABEL_159;
            }
LABEL_155:
            if (v59 >= 0) {
              uint64_t v106 = a3;
            }
            else {
              uint64_t v106 = *a3;
            }
            memmove(v64, v106, v60);
            goto LABEL_159;
          }
          uint64_t v103 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v63 | 7) != 0x17) {
            uint64_t v103 = v63 | 7;
          }
          uint64_t v104 = v103 + 1;
          unint64_t v64 = (char *)operator new(v103 + 1);
          unint64_t v105 = v104 | 0x8000000000000000;
          a4 = v128;
          __dst.__r_.__value_.__l.__size_ = v62 + v60;
          __dst.__r_.__value_.__r.__words[2] = v105;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v64;
          if (v60) {
            goto LABEL_155;
          }
LABEL_159:
          uint64_t v107 = &v64[v60];
          if (v62)
          {
            if (v61 >= 0) {
              unint64_t v108 = &qword_25FBCE8;
            }
            else {
              unint64_t v108 = (uint64_t *)qword_25FBCE8;
            }
            memmove(v107, v108, v62);
          }
          v107[v62] = 0;
          *(_DWORD *)(v25 + 16) |= 1u;
          uint64_t v109 = *(void *)(v25 + 8);
          unint64_t v110 = (uint64_t *)(v109 & 0xFFFFFFFFFFFFFFFCLL);
          if (v109) {
            unint64_t v110 = (uint64_t *)*v110;
          }
          sub_1881E08((uint64_t *)(v25 + 24), (long long *)&__dst, v110);
          uint64_t v7 = v132;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          int v112 = *(_DWORD *)(v25 + 16);
          *(_DWORD *)(v25 + 84) = v131;
          *(_DWORD *)(v25 + 16) = v112 | 0x204;
          uint64_t v113 = *(void *)(v25 + 40);
          if (!v113)
          {
            uint64_t v114 = *(void *)(v25 + 8);
            uint64_t v115 = (void *)(v114 & 0xFFFFFFFFFFFFFFFCLL);
            if (v114) {
              uint64_t v115 = (void *)*v115;
            }
            uint64_t v113 = sub_15C1918((uint64_t)v115);
            *(void *)(v25 + 40) = v113;
          }
          sub_E112BC(v130, v113, v111);
          goto LABEL_7;
        default:
          goto LABEL_7;
      }
    }
  }
}

void sub_E505A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_E505EC(unsigned char *a1, void *a2, uint64_t a3)
{
  BOOL result = sub_63A4A4(a3);
  if (result)
  {
    unint64_t v7 = sub_470ADC(a2);
    unint64_t v8 = *(void *)(a3 + 8);
    if (v8 >= v7)
    {
      return 0;
    }
    else if (v8 == v7 - 1 && sub_46CAC4((uint64_t)a2) < 0x3B9ACA00)
    {
      return 0;
    }
    else if (sub_63A8F8(a3))
    {
      return a1[24] != 0;
    }
    else if (sub_63A908(a3))
    {
      return a1[25] != 0;
    }
    else
    {
      if (sub_63A770(a3)) {
        return a1[26] != 0;
      }
      BOOL result = sub_63A760(a3);
      if (result) {
        return a1[26] != 0;
      }
    }
  }
  return result;
}

void sub_E506FC(unint64_t __val@<X1>, unint64_t a2@<X2>, uint64_t a3@<X3>, std::string *a4@<X8>)
{
  std::to_string(&v23, __val);
  unint64_t v7 = std::string::append(&v23, "_");
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v22, a2);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v9 = &v22;
  }
  else {
    uint64_t v9 = (std::string *)v22.__r_.__value_.__r.__words[0];
  }
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v22.__r_.__value_.__l.__size_;
  }
  int v11 = std::string::append(&v24, (const std::string::value_type *)v9, size);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  uint64_t v13 = std::string::append(&v25, "_");
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v21, *(void *)(a3 + 8));
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v15 = &v21;
  }
  else {
    int v15 = (std::string *)v21.__r_.__value_.__r.__words[0];
  }
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v16 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v16 = v21.__r_.__value_.__l.__size_;
  }
  unint64_t v17 = std::string::append(&v26, (const std::string::value_type *)v15, v16);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  a4->__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v21.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_15:
      if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_16;
      }
      goto LABEL_23;
    }
  }
  else if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(v26.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_16:
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete(v25.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_17:
    if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }
LABEL_24:
  operator delete(v22.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_18:
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete(v24.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_19:
    if (*(_DWORD *)(a3 + 4) != 2) {
      return;
    }
    goto LABEL_27;
  }
LABEL_26:
  operator delete(v23.__r_.__value_.__l.__data_);
  if (*(_DWORD *)(a3 + 4) != 2) {
    return;
  }
LABEL_27:
  if (byte_25FBD17 >= 0) {
    uint64_t v19 = (const std::string::value_type *)&qword_25FBD00;
  }
  else {
    uint64_t v19 = (const std::string::value_type *)qword_25FBD00;
  }
  if (byte_25FBD17 >= 0) {
    std::string::size_type v20 = byte_25FBD17;
  }
  else {
    std::string::size_type v20 = *(void *)&word_25FBD08;
  }
  std::string::append(a4, v19, v20);
}

void sub_E508EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 + 23) < 0) {
    operator delete(*(void **)v33);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_E509E8(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  int v5 = sub_471160(a2, 0);
  if (v5 < 0) {
    char v6 = -5;
  }
  else {
    char v6 = 5;
  }
  a3[10] |= 0x800000u;
  a3[208] = v5 / 10 + (((103 * (char)(v6 + v5 % 10)) >> 15) & 1) + ((103 * (char)(v6 + v5 % 10)) >> 10);
  if (sub_471160(a2, 1) != 0x7FFFFFFF)
  {
    int v7 = sub_471160(a2, 1);
    if (v7 < 0) {
      char v8 = -5;
    }
    else {
      char v8 = 5;
    }
    a3[10] |= 0x80000000;
    a3[216] = v7 / 10 + (((103 * (char)(v8 + v7 % 10)) >> 15) & 1) + ((103 * (char)(v8 + v7 % 10)) >> 10);
  }
  if (sub_471160(a2, 2) != 0x7FFFFFFF)
  {
    int v9 = sub_471160(a2, 2);
    if (v9 < 0) {
      char v10 = -5;
    }
    else {
      char v10 = 5;
    }
    a3[10] |= 0x10000000u;
    a3[213] = v9 / 10
            + (((103 * (char)(v10 + v9 % 10)) >> 15) & 1)
            + ((103 * (char)(v10 + v9 % 10)) >> 10);
  }
  if (sub_471160(a2, 5) == 0x7FFFFFFF)
  {
    uint64_t result = sub_471160(a2, 4);
    if (result == 0x7FFFFFFF) {
      return result;
    }
    goto LABEL_21;
  }
  int v12 = sub_471160(a2, 5);
  if (v12 < 0) {
    char v13 = -5;
  }
  else {
    char v13 = 5;
  }
  a3[10] |= 0x40000000u;
  a3[215] = v12 / 10
          + (((103 * (char)(v13 + v12 % 10)) >> 15) & 1)
          + ((103 * (char)(v13 + v12 % 10)) >> 10);
  uint64_t result = sub_471160(a2, 4);
  if (result != 0x7FFFFFFF)
  {
LABEL_21:
    uint64_t result = sub_471160(a2, 4);
    if ((int)result < 0) {
      char v14 = -5;
    }
    else {
      char v14 = 5;
    }
    a3[10] |= 0x20000000u;
    a3[214] = (int)result / 10
            + (((103 * (char)(v14 + (int)result % 10)) >> 15) & 1)
            + ((103 * (char)(v14 + (int)result % 10)) >> 10);
  }
  return result;
}

void sub_E50C98(unsigned char *a1, void *a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9 = a2[1494];
  uint64_t v10 = a2[1495];
  if (v9 != v10)
  {
    int v11 = (uint64_t *)(a5 + 224);
    do
    {
      while (1)
      {
        char v14 = *(_DWORD **)(a5 + 240);
        if (v14)
        {
          uint64_t v15 = *(int *)(a5 + 232);
          if ((int)v15 < *v14) {
            break;
          }
        }
        sub_13D97FC(*v11);
        uint64_t v13 = sub_188CDC8(a5 + 224, v12);
        sub_E13288(v9, v13);
        v9 += 608;
        if (v9 == v10) {
          goto LABEL_7;
        }
      }
      *(_DWORD *)(a5 + 232) = v15 + 1;
      sub_E13288(v9, *(void *)&v14[2 * v15 + 2]);
      v9 += 608;
    }
    while (v9 != v10);
  }
LABEL_7:
  uint64_t v16 = a2[1272];
  uint64_t v17 = a2[1273];
  while (v16 != v17)
  {
    if (sub_E505EC(a1, a2, v16))
    {
      sub_E506FC(a3, a4, v16, &__p);
      sub_E50F8C((uint64_t)a1, v16, (const void **)&__p.__r_.__value_.__l.__data_, a5);
      uint64_t v18 = a2[133];
      uint64_t v19 = a2[134];
      while (v18 != v19)
      {
        uint64_t v20 = *(void *)(v18 + 1736);
        uint64_t v21 = *(void *)(v18 + 1744);
        if (v20 != v21)
        {
          do
          {
            if (sub_6397A0(v20) != -1 && sub_6397A0(v20) == *(void *)(v16 + 8))
            {
              if (v20 == *(void *)(v18 + 1744)) {
                goto LABEL_14;
              }
              goto LABEL_24;
            }
            v20 += 408;
          }
          while (v20 != v21);
          uint64_t v20 = v21;
          if (v21 == *(void *)(v18 + 1744)) {
            goto LABEL_14;
          }
LABEL_24:
          sub_6396D8(v20, *(_DWORD *)(a5 + 232) - 1);
        }
LABEL_14:
        v18 += 2400;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    v16 += 104;
  }
}

void sub_E50E6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_E50E90(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v8 = *(int **)(a2 + 1064);
  uint64_t v9 = *(int **)(a2 + 1072);
  if (v8 != v9)
  {
    uint64_t v10 = (uint64_t *)(a3 + 56);
    do
    {
      while (1)
      {
        uint64_t v13 = *(_DWORD **)(a3 + 72);
        if (v13)
        {
          uint64_t v14 = *(int *)(a3 + 64);
          if ((int)v14 < *v13) {
            break;
          }
        }
        uint64_t v11 = sub_13D7DD4(*v10);
        uint64_t v12 = sub_188CDC8(a3 + 56, v11);
        sub_E42A2C((uint64_t)a1, v8, v12);
        v8 += 600;
        if (v8 == v9) {
          goto LABEL_7;
        }
      }
      *(_DWORD *)(a3 + 64) = v14 + 1;
      sub_E42A2C((uint64_t)a1, v8, *(void *)&v13[2 * v14 + 2]);
      v8 += 600;
    }
    while (v8 != v9);
  }
LABEL_7:
  sub_E51C64(a1);

  return sub_E524B4((uint64_t)a1, a2, a3, a4 + 48);
}

void sub_E50F8C(uint64_t a1, uint64_t a2, const void **a3, uint64_t a4)
{
  if (sub_63A4A4(a2))
  {
    uint64_t v7 = *(void *)(a2 + 32);
    uint64_t v6 = *(void *)(a2 + 40);
    if (v7 != v6)
    {
      uint64_t v81 = a4;
      uint64_t v82 = (uint64_t *)(a4 + 224);
      uint64_t v83 = *(void *)(a2 + 40);
      while (!sub_63A048(v7))
      {
LABEL_8:
        v7 += 176;
        if (v7 == v6) {
          return;
        }
      }
      uint64_t v10 = *(_DWORD **)(a4 + 240);
      if (v10 && (uint64_t v11 = *(int *)(a4 + 232), (int)v11 < *v10))
      {
        *(_DWORD *)(a4 + 232) = v11 + 1;
        uint64_t v12 = *(void *)&v10[2 * v11 + 2];
      }
      else
      {
        sub_13D97FC(*v82);
        uint64_t v12 = sub_188CDC8((uint64_t)v82, v13);
      }
      BOOL v14 = *(_DWORD *)(a2 + 4) != 0;
      *(_DWORD *)(v12 + 16) |= 0x20u;
      *(_DWORD *)(v12 + 76) = v14;
      if (sub_63A4F0(a2))
      {
        int v15 = *(_DWORD *)(v12 + 16);
        *(_DWORD *)(v12 + 72) = *(_DWORD *)(a2 + 16);
        *(_DWORD *)(v12 + 88) = *(unsigned __int16 *)(v7 + 14);
        int v16 = *(unsigned __int16 *)(v7 + 16);
        *(_DWORD *)(v12 + 16) = v15 | 0x190;
        *(_DWORD *)(v12 + 84) = v16;
      }
      switch(*(_DWORD *)(v7 + 8))
      {
        case 1:
          *(_DWORD *)(v12 + 16) |= 4u;
          *(_DWORD *)(v12 + 64) = 2;
          int v17 = *((char *)a3 + 23);
          if (v17 >= 0) {
            size_t v18 = *((unsigned __int8 *)a3 + 23);
          }
          else {
            size_t v18 = (size_t)a3[1];
          }
          int v19 = byte_25FBC9F;
          if (byte_25FBC9F >= 0) {
            size_t v20 = byte_25FBC9F;
          }
          else {
            size_t v20 = qword_25FBC90;
          }
          unint64_t v21 = v20 + v18;
          if (v20 + v18 > 0x7FFFFFFFFFFFFFF7) {
            goto LABEL_140;
          }
          if (v21 > 0x16)
          {
            uint64_t v47 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v21 | 7) != 0x17) {
              uint64_t v47 = v21 | 7;
            }
            uint64_t v48 = v47 + 1;
            p_p = (char *)operator new(v47 + 1);
            unint64_t v49 = v48 | 0x8000000000000000;
            a4 = v81;
            *((void *)&__p + 1) = v20 + v18;
            unint64_t v86 = v49;
            *(void *)&long long __p = p_p;
            if (!v18) {
              goto LABEL_74;
            }
          }
          else
          {
            unint64_t v86 = 0;
            long long __p = 0uLL;
            p_p = (char *)&__p;
            HIBYTE(v86) = v20 + v18;
            if (!v18)
            {
LABEL_74:
              size_t v51 = &p_p[v18];
              if (v20)
              {
                if (v19 >= 0) {
                  unint64_t v52 = &qword_25FBC88;
                }
                else {
                  unint64_t v52 = (uint64_t *)qword_25FBC88;
                }
                memmove(v51, v52, v20);
              }
              v51[v20] = 0;
              *(_DWORD *)(v12 + 16) |= 1u;
              uint64_t v8 = *(void *)(v12 + 8);
              uint64_t v9 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
              uint64_t v6 = v83;
              if (v8) {
                uint64_t v9 = (uint64_t *)*v9;
              }
              goto LABEL_6;
            }
          }
          if (v17 >= 0) {
            int v50 = a3;
          }
          else {
            int v50 = *a3;
          }
          memmove(p_p, v50, v18);
          goto LABEL_74;
        case 2:
          *(_DWORD *)(v12 + 16) |= 4u;
          *(_DWORD *)(v12 + 64) = 2;
          int v23 = *((char *)a3 + 23);
          if (v23 >= 0) {
            size_t v24 = *((unsigned __int8 *)a3 + 23);
          }
          else {
            size_t v24 = (size_t)a3[1];
          }
          int v25 = byte_25FBCB7;
          if (byte_25FBCB7 >= 0) {
            size_t v26 = byte_25FBCB7;
          }
          else {
            size_t v26 = qword_25FBCA8;
          }
          unint64_t v27 = v26 + v24;
          if (v26 + v24 > 0x7FFFFFFFFFFFFFF7) {
            goto LABEL_140;
          }
          if (v27 <= 0x16)
          {
            unint64_t v86 = 0;
            long long __p = 0uLL;
            size_t v28 = (char *)&__p;
            HIBYTE(v86) = v26 + v24;
            if (!v24) {
              goto LABEL_86;
            }
LABEL_82:
            if (v23 >= 0) {
              uint64_t v56 = a3;
            }
            else {
              uint64_t v56 = *a3;
            }
            memmove(v28, v56, v24);
            goto LABEL_86;
          }
          uint64_t v53 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v27 | 7) != 0x17) {
            uint64_t v53 = v27 | 7;
          }
          uint64_t v54 = v53 + 1;
          size_t v28 = (char *)operator new(v53 + 1);
          unint64_t v55 = v54 | 0x8000000000000000;
          a4 = v81;
          *((void *)&__p + 1) = v26 + v24;
          unint64_t v86 = v55;
          *(void *)&long long __p = v28;
          if (v24) {
            goto LABEL_82;
          }
LABEL_86:
          uint64_t v57 = &v28[v24];
          if (v26)
          {
            if (v25 >= 0) {
              int v58 = &qword_25FBCA0;
            }
            else {
              int v58 = (uint64_t *)qword_25FBCA0;
            }
            memmove(v57, v58, v26);
          }
          v57[v26] = 0;
          *(_DWORD *)(v12 + 16) |= 1u;
          uint64_t v59 = *(void *)(v12 + 8);
          uint64_t v9 = (uint64_t *)(v59 & 0xFFFFFFFFFFFFFFFCLL);
          uint64_t v6 = v83;
          if (v59) {
            uint64_t v9 = (uint64_t *)*v9;
          }
          goto LABEL_6;
        case 3:
          *(_DWORD *)(v12 + 16) |= 4u;
          *(_DWORD *)(v12 + 64) = 1;
          int v29 = *((char *)a3 + 23);
          if (v29 >= 0) {
            size_t v30 = *((unsigned __int8 *)a3 + 23);
          }
          else {
            size_t v30 = (size_t)a3[1];
          }
          int v31 = byte_25FBCCF;
          if (byte_25FBCCF >= 0) {
            size_t v32 = byte_25FBCCF;
          }
          else {
            size_t v32 = qword_25FBCC0;
          }
          unint64_t v33 = v32 + v30;
          if (v32 + v30 > 0x7FFFFFFFFFFFFFF7) {
            goto LABEL_140;
          }
          if (v33 <= 0x16)
          {
            unint64_t v86 = 0;
            long long __p = 0uLL;
            int v34 = (char *)&__p;
            HIBYTE(v86) = v32 + v30;
            if (!v30) {
              goto LABEL_101;
            }
LABEL_97:
            if (v29 >= 0) {
              unint64_t v63 = a3;
            }
            else {
              unint64_t v63 = *a3;
            }
            memmove(v34, v63, v30);
            goto LABEL_101;
          }
          uint64_t v60 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v33 | 7) != 0x17) {
            uint64_t v60 = v33 | 7;
          }
          uint64_t v61 = v60 + 1;
          int v34 = (char *)operator new(v60 + 1);
          unint64_t v62 = v61 | 0x8000000000000000;
          a4 = v81;
          *((void *)&__p + 1) = v32 + v30;
          unint64_t v86 = v62;
          *(void *)&long long __p = v34;
          if (v30) {
            goto LABEL_97;
          }
LABEL_101:
          unint64_t v64 = &v34[v30];
          if (v32)
          {
            if (v31 >= 0) {
              uint64_t v65 = &qword_25FBCB8;
            }
            else {
              uint64_t v65 = (uint64_t *)qword_25FBCB8;
            }
            memmove(v64, v65, v32);
          }
          v64[v32] = 0;
          *(_DWORD *)(v12 + 16) |= 1u;
          uint64_t v66 = *(void *)(v12 + 8);
          uint64_t v9 = (uint64_t *)(v66 & 0xFFFFFFFFFFFFFFFCLL);
          uint64_t v6 = v83;
          if (v66) {
            uint64_t v9 = (uint64_t *)*v9;
          }
          goto LABEL_6;
        case 4:
          *(_DWORD *)(v12 + 16) |= 4u;
          *(_DWORD *)(v12 + 64) = 1;
          int v35 = *((char *)a3 + 23);
          if (v35 >= 0) {
            size_t v36 = *((unsigned __int8 *)a3 + 23);
          }
          else {
            size_t v36 = (size_t)a3[1];
          }
          int v37 = byte_25FBCE7;
          if (byte_25FBCE7 >= 0) {
            size_t v38 = byte_25FBCE7;
          }
          else {
            size_t v38 = qword_25FBCD8;
          }
          unint64_t v39 = v38 + v36;
          if (v38 + v36 > 0x7FFFFFFFFFFFFFF7) {
            goto LABEL_140;
          }
          if (v39 <= 0x16)
          {
            unint64_t v86 = 0;
            long long __p = 0uLL;
            uint64_t v40 = (char *)&__p;
            HIBYTE(v86) = v38 + v36;
            if (!v36) {
              goto LABEL_116;
            }
LABEL_112:
            if (v35 >= 0) {
              unint64_t v70 = a3;
            }
            else {
              unint64_t v70 = *a3;
            }
            memmove(v40, v70, v36);
            goto LABEL_116;
          }
          uint64_t v67 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v39 | 7) != 0x17) {
            uint64_t v67 = v39 | 7;
          }
          uint64_t v68 = v67 + 1;
          uint64_t v40 = (char *)operator new(v67 + 1);
          unint64_t v69 = v68 | 0x8000000000000000;
          a4 = v81;
          *((void *)&__p + 1) = v38 + v36;
          unint64_t v86 = v69;
          *(void *)&long long __p = v40;
          if (v36) {
            goto LABEL_112;
          }
LABEL_116:
          uint64_t v71 = &v40[v36];
          if (v38)
          {
            if (v37 >= 0) {
              char v72 = &qword_25FBCD0;
            }
            else {
              char v72 = (uint64_t *)qword_25FBCD0;
            }
            memmove(v71, v72, v38);
          }
          v71[v38] = 0;
          *(_DWORD *)(v12 + 16) |= 1u;
          uint64_t v73 = *(void *)(v12 + 8);
          uint64_t v9 = (uint64_t *)(v73 & 0xFFFFFFFFFFFFFFFCLL);
          uint64_t v6 = v83;
          if (v73) {
            uint64_t v9 = (uint64_t *)*v9;
          }
          goto LABEL_6;
        case 5:
          *(_DWORD *)(v12 + 16) |= 4u;
          *(_DWORD *)(v12 + 64) = 1;
          int v41 = *((char *)a3 + 23);
          if (v41 >= 0) {
            size_t v42 = *((unsigned __int8 *)a3 + 23);
          }
          else {
            size_t v42 = (size_t)a3[1];
          }
          int v43 = byte_25FBCFF;
          if (byte_25FBCFF >= 0) {
            size_t v44 = byte_25FBCFF;
          }
          else {
            size_t v44 = qword_25FBCF0;
          }
          unint64_t v45 = v44 + v42;
          if (v44 + v42 > 0x7FFFFFFFFFFFFFF7) {
LABEL_140:
          }
            sub_188D690();
          if (v45 <= 0x16)
          {
            unint64_t v86 = 0;
            long long __p = 0uLL;
            char v46 = (char *)&__p;
            HIBYTE(v86) = v44 + v42;
            if (!v42) {
              goto LABEL_131;
            }
LABEL_127:
            if (v41 >= 0) {
              long long v77 = a3;
            }
            else {
              long long v77 = *a3;
            }
            memmove(v46, v77, v42);
            goto LABEL_131;
          }
          uint64_t v74 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v45 | 7) != 0x17) {
            uint64_t v74 = v45 | 7;
          }
          uint64_t v75 = v74 + 1;
          char v46 = (char *)operator new(v74 + 1);
          unint64_t v76 = v75 | 0x8000000000000000;
          a4 = v81;
          *((void *)&__p + 1) = v44 + v42;
          unint64_t v86 = v76;
          *(void *)&long long __p = v46;
          if (v42) {
            goto LABEL_127;
          }
LABEL_131:
          int v78 = &v46[v42];
          if (v44)
          {
            if (v43 >= 0) {
              uint64_t v79 = &qword_25FBCE8;
            }
            else {
              uint64_t v79 = (uint64_t *)qword_25FBCE8;
            }
            memmove(v78, v79, v44);
          }
          v78[v44] = 0;
          *(_DWORD *)(v12 + 16) |= 1u;
          uint64_t v80 = *(void *)(v12 + 8);
          uint64_t v9 = (uint64_t *)(v80 & 0xFFFFFFFFFFFFFFFCLL);
          uint64_t v6 = v83;
          if (v80) {
            uint64_t v9 = (uint64_t *)*v9;
          }
LABEL_6:
          sub_1881E08((uint64_t *)(v12 + 48), &__p, v9);
          if (SHIBYTE(v86) < 0) {
            operator delete((void *)__p);
          }
          goto LABEL_8;
        default:
          goto LABEL_8;
      }
    }
  }
}

void sub_E516F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_E51730()
{
  sub_7BD6C(v0);
}

void sub_E51BC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E51BD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E51BEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E51C00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E51C14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E51C28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E51C3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E51C50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7BDD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_E51C64(uint64_t *result)
{
  if (!*(unsigned char *)(*result + 3))
  {
    sub_45923C(v3, result[2]);
    uint64_t v1 = v3;
    char v2 = 0;
    sub_1106C64();
  }
  return result;
}

void sub_E51DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1106CAC(&a14);
  _Unwind_Resume(a1);
}

void sub_E51DDC(uint64_t a1, void *a2, unsigned int a3, void *a4, unsigned int *a5, _DWORD *a6, char ***a7, void **a8)
{
  uint64_t v9 = a1;
  uint64_t v50 = a2[134];
  uint64_t v52 = a2[133];
  sub_E52F18(a1, a2, a3, (void *)(v52 + 2400 * a3), a5, &__p);
  if (v61 != __p)
  {
    uint64_t v11 = 0;
    unint64_t v55 = 0xAAAAAAAAAAAAAAABLL * ((v61 - (unsigned char *)__p) >> 3);
    do
    {
      BOOL v14 = __p;
      if (v11 == -1 - 0x5555555555555555 * ((v61 - (unsigned char *)__p) >> 3))
      {
        uint64_t v15 = *((unsigned int *)__p + 6 * v11 + 3);
        BOOL v16 = sub_470ADC(a2) - 1 == v15;
        if (!v11) {
          goto LABEL_8;
        }
      }
      else
      {
        BOOL v16 = 0;
        if (!v11)
        {
LABEL_8:
          BOOL v17 = v14[3] == 0;
          if (LOBYTE(v14[6 * v11 + 5])) {
            goto LABEL_12;
          }
          goto LABEL_5;
        }
      }
      BOOL v17 = 0;
      if (LOBYTE(v14[6 * v11 + 5]))
      {
LABEL_12:
        if (BYTE1(v14[6 * v11 + 4]) && *(unsigned char *)(*(void *)v9 + 2))
        {
          int v18 = sub_1106DFC((uint64_t)a7);
          a6[10] |= 0x40000000u;
          a6[79] = v18;
        }
        if (HIBYTE(v14[6 * v11 + 4]) && *(unsigned char *)(*(void *)v9 + 2))
        {
          int v19 = sub_1106DFC((uint64_t)a7);
          a6[11] |= 1u;
          a6[81] = v19;
        }
        if (BYTE2(v14[6 * v11 + 4]))
        {
          uint64_t v20 = *(void *)v9;
          if (*(unsigned char *)(*(void *)v9 + 2))
          {
            int v21 = sub_1106DFC((uint64_t)a7);
            a6[10] |= 0x80000000;
            a6[80] = v21;
            uint64_t v20 = *(void *)v9;
          }
          if (*(_DWORD *)(v20 + 44))
          {
            int v22 = -1431655765 * ((unint64_t)((unsigned char *)a8[1] - (unsigned char *)*a8) >> 2);
            a6[10] |= 0x20000000u;
            a6[78] = v22;
          }
        }
        uint64_t v23 = v9;
        size_t v24 = (char *)&v14[6 * v11];
        int v25 = *((_DWORD *)v24 + 2);
        LODWORD(v10) = *(_DWORD *)v24;
        int v26 = sub_1106B8C((double)v10 * 360.0 / 4294967300.0 + -180.0);
        LODWORD(v27) = *((_DWORD *)v24 + 1);
        long double v28 = exp((double)v27 * -6.28318531 / 4294967300.0 + 3.14159265);
        long double v29 = atan((v28 + -1.0 / v28) * 0.5);
        int v30 = sub_1106A34(v29 * 57.2957795);
        sub_40A2D8(&v59, v26, v30, v25);
        if (v24[16]) {
          int v31 = 1;
        }
        else {
          int v31 = v16;
        }
        if ((v31 | v17) == 1)
        {
          size_t v32 = (uint64_t *)sub_470B40(a2, v14[6 * v11 + 3]);
          sub_E26334(a4, *v32, (unsigned int *)&v59, (uint64_t)v58);
        }
        else
        {
          sub_11053FC((uint64_t)v58, &v59);
        }
        sub_1106E10(a7, v58);
        int v34 = (char *)a8[1];
        unint64_t v33 = (unint64_t)a8[2];
        if ((unint64_t)v34 < v33)
        {
          uint64_t v12 = *(void *)v24;
          *((_DWORD *)v34 + 2) = *((_DWORD *)v24 + 2);
          *(void *)int v34 = v12;
          uint64_t v13 = v34 + 12;
          uint64_t v9 = v23;
        }
        else
        {
          int v35 = (char *)*a8;
          unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((v34 - (unsigned char *)*a8) >> 2);
          unint64_t v37 = v36 + 1;
          if (v36 + 1 > 0x1555555555555555) {
            sub_2E00();
          }
          unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (void)v35) >> 2);
          if (2 * v38 > v37) {
            unint64_t v37 = 2 * v38;
          }
          if (v38 >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v39 = 0x1555555555555555;
          }
          else {
            unint64_t v39 = v37;
          }
          if (v39)
          {
            if (v39 > 0x1555555555555555) {
              sub_188D718();
            }
            uint64_t v40 = (char *)operator new(12 * v39);
          }
          else
          {
            uint64_t v40 = 0;
          }
          uint64_t v41 = *(void *)v24;
          size_t v42 = &v40[12 * v36];
          *((_DWORD *)v42 + 2) = *((_DWORD *)v24 + 2);
          *(void *)size_t v42 = v41;
          int v43 = v42;
          uint64_t v9 = v23;
          if (v34 != v35)
          {
            do
            {
              uint64_t v44 = *(void *)(v34 - 12);
              v34 -= 12;
              int v45 = *((_DWORD *)v34 + 2);
              *(void *)(v43 - 12) = v44;
              v43 -= 12;
              *((_DWORD *)v43 + 2) = v45;
            }
            while (v34 != v35);
            int v34 = (char *)*a8;
          }
          uint64_t v13 = v42 + 12;
          *a8 = v43;
          a8[1] = v42 + 12;
          a8[2] = &v40[12 * v39];
          if (v34) {
            operator delete(v34);
          }
        }
        a8[1] = v13;
      }
LABEL_5:
      ++v11;
    }
    while (v11 != v55);
  }
  uint64_t v46 = 0x2FC962FC962FC963 * ((v50 - v52) >> 5) - 1;
  if (!a3 || v46 == a3 || *(_DWORD *)(v52 + 2400 * a3 + 160) == 16)
  {
    if (v46 == a3)
    {
      int v47 = sub_1106DFC((uint64_t)a7) - 1;
      uint64_t v48 = -1 - 0x5555555555555555 * (((unsigned char *)a8[1] - (unsigned char *)*a8) >> 2);
      uint64_t v49 = *(void *)v9;
      if (!*(unsigned char *)(*(void *)v9 + 2))
      {
LABEL_53:
        if (*(_DWORD *)(v49 + 44))
        {
          a6[10] |= 0x20000000u;
          a6[78] = v48;
        }
        goto LABEL_55;
      }
    }
    else
    {
      int v47 = sub_1106DFC((uint64_t)a7);
      uint64_t v48 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a8[1] - (unsigned char *)*a8) >> 2);
      uint64_t v49 = *(void *)v9;
      if (!*(unsigned char *)(*(void *)v9 + 2)) {
        goto LABEL_53;
      }
    }
    a6[10] |= 0x80000000;
    a6[80] = v47;
    goto LABEL_53;
  }
LABEL_55:
  if (__p)
  {
    uint64_t v61 = __p;
    operator delete(__p);
  }
}

void sub_E52344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_E5237C()
{
}

void sub_E524A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1108FEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_E524B4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(*(void *)result + 3))
  {
    uint64_t v7 = result;
    uint64_t v21 = a3;
    sub_4272A0(result + 88, a2, &v21, 1, 0, v22);
    if (*(unsigned char *)(v7 + 48)) {
      BOOL v8 = *(void *)(a2 + 504) <= *(void *)(v7 + 56);
    }
    else {
      BOOL v8 = 0;
    }
    sub_E53CF8(v7, (uint64_t)v22, *(unsigned __int8 *)(a2 + 9976) != 0, v8, a4);
    uint64_t v14 = 0;
    *(void *)&long long __p = 0x4039000000000000;
    *((void *)&__p + 1) = 5000;
    long long v12 = xmmword_20E7C10;
    long long v13 = xmmword_20E7C20;
    uint64_t v15 = 20000000;
    uint64_t v16 = 0x3FF199999999999ALL;
    uint64_t v17 = 0x3E800002710;
    uint64_t v18 = 0xA00002710;
    long long v19 = xmmword_20E7C00;
    long long v20 = 0x3FE6147AE147AE14uLL;
    sub_1109790((uint64_t)&__p, (uint64_t)v22);
    sub_188B428((uint64_t)v22, (uint64_t)&__p);
    *(_DWORD *)(a3 + 40) |= 0x100u;
    uint64_t v9 = *(void *)(a3 + 8);
    unint64_t v10 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
    if (v9) {
      unint64_t v10 = (uint64_t *)*v10;
    }
    sub_1881E08((uint64_t *)(a3 + 720), &__p, v10);
    if (SBYTE7(v12) < 0) {
      operator delete((void *)__p);
    }
    return sub_1116458(v22);
  }
  return result;
}

void sub_E52650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_1116458(v14 - 96);
    _Unwind_Resume(a1);
  }
  sub_1116458(v14 - 96);
  _Unwind_Resume(a1);
}

void sub_E526B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 80)) {
    return;
  }
  size_t v42 = 0;
  int v43 = 0;
  uint64_t v44 = 0;
  if (!sub_64F0E0(a2)) {
    goto LABEL_20;
  }
  unint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v6 = (uint64_t *)sub_376F8C(*(void **)(a1 + 8));
  uint64_t v7 = sub_374DF4(a2);
  unsigned int v46 = *(_DWORD *)(v7 + 112);
  if (v46 <= 1) {
    uint64_t v45 = *(void *)(v7 + 104);
  }
  sub_28E4E4(v6, (uint64_t)&v45, (unint64_t)&v28);
  sub_30C0C(&v39, v35);
  char v27 = 17;
  strcpy(__p, "Charging Stations");
  sub_DEC58C((uint64_t *)&v42, (uint64_t *)&v39, (uint64_t)__p, 0xFFFFFFFF, 0, 0, 0.0);
  if (v27 < 0) {
    operator delete(*(void **)__p);
  }
  sub_8AC4C((uint64_t)&v38);
  BOOL v8 = (void **)v36;
  if (v36)
  {
    uint64_t v9 = v37;
    unint64_t v10 = v36;
    if (v37 != v36)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      unint64_t v10 = v36;
    }
    unint64_t v37 = v8;
    operator delete(v10);
  }
  if ((v34 & 0x80000000) == 0)
  {
    if ((v32 & 0x80000000) == 0) {
      goto LABEL_17;
    }
LABEL_51:
    operator delete(v31);
    if ((v30 & 0x80000000) == 0)
    {
LABEL_18:
      uint64_t v11 = v39;
      if (!v39) {
        goto LABEL_20;
      }
      goto LABEL_19;
    }
    goto LABEL_52;
  }
  operator delete(v33);
  if (v32 < 0) {
    goto LABEL_51;
  }
LABEL_17:
  if ((v30 & 0x80000000) == 0) {
    goto LABEL_18;
  }
LABEL_52:
  operator delete(v28);
  uint64_t v11 = v39;
  if (v39)
  {
LABEL_19:
    uint64_t v40 = v11;
    operator delete(v11);
  }
LABEL_20:
  uint64_t v12 = *(void *)(a2 + 7352);
  for (uint64_t i = *(void *)(a2 + 7360); v12 != i; v12 += 1120)
  {
    if (sub_605454(v12))
    {
      if (!*(unsigned char *)(v12 + 1112))
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_2439078;
      }
      uint64_t v14 = *(void **)(v12 + 1088);
      uint64_t v15 = *(void **)(v12 + 1096);
      while (v14 != v15)
      {
        std::operator+<char>();
        sub_DEC668((uint64_t *)&v42, v14, (uint64_t)&v28, 0xFFFFFFFF, 0, 0, 0.0);
        if (v30 < 0) {
          operator delete(v28);
        }
        v14 += 32;
      }
    }
  }
  sub_DEC8F0(&v42, (uint64_t)&v28);
  uint64_t v16 = (char *)v28;
  uint64_t v17 = v29;
  if (v28 != v29)
  {
    uint64_t v18 = (uint64_t **)(a3 + 16);
    do
    {
      long long v19 = (std::string *)sub_1884274(v18, dword_254EA30, 11, (uint64_t)&off_252CDD0, 0);
      sub_11B9D5C(v19, (uint64_t)v16);
      v16 += 48;
    }
    while (v16 != v17);
    uint64_t v16 = (char *)v28;
  }
  if (v16)
  {
    uint64_t v20 = (uint64_t)v29;
    uint64_t v21 = v16;
    if (v29 != v16)
    {
      do
        uint64_t v20 = sub_11B9574(v20 - 48);
      while ((char *)v20 != v16);
      uint64_t v21 = v28;
    }
    long double v29 = v16;
    operator delete(v21);
  }
  int v22 = v42;
  if (v42)
  {
    uint64_t v23 = v43;
    size_t v24 = v42;
    if (v43 == v42)
    {
LABEL_48:
      int v43 = v22;
      operator delete(v24);
      return;
    }
    while (1)
    {
      if (*(v23 - 25) < 0)
      {
        operator delete(*((void **)v23 - 6));
        if ((*(v23 - 49) & 0x80000000) == 0) {
          goto LABEL_43;
        }
LABEL_46:
        operator delete(*((void **)v23 - 9));
        v23 -= 80;
        if (v23 == v22)
        {
LABEL_47:
          size_t v24 = v42;
          goto LABEL_48;
        }
      }
      else
      {
        if (*(v23 - 49) < 0) {
          goto LABEL_46;
        }
LABEL_43:
        v23 -= 80;
        if (v23 == v22) {
          goto LABEL_47;
        }
      }
    }
  }
}

void sub_E52A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_28ED98((uint64_t)&a15);
  int v22 = *(void **)(v20 - 136);
  if (v22)
  {
    *(void *)(v20 - 128) = v22;
    operator delete(v22);
    sub_CBDA74((void **)(v20 - 112));
    _Unwind_Resume(a1);
  }
  sub_CBDA74((void **)(v20 - 112));
  _Unwind_Resume(a1);
}

void sub_E52B24(uint64_t a1, void *a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 81))
  {
    char v34 = 0;
    int v35 = 0;
    uint64_t v36 = 0;
    uint64_t v5 = a2[1510];
    uint64_t v6 = a2[1511];
    while (v5 != v6)
    {
      if (sub_63BD14(*(_DWORD *)(v5 + 40)))
      {
        sub_63C4E0(*(_DWORD *)v5, (uint64_t)&__p);
        sub_DEC58C((uint64_t *)&v34, (uint64_t *)(v5 + 8), (uint64_t)&__p, 0xFFFFFFFF, *(_DWORD *)v5, *(_DWORD *)(v5 + 40), *(double *)(v5 + 32));
        if (SHIBYTE(v33) < 0) {
          operator delete(__p);
        }
      }
      v5 += 48;
    }
    sub_DECABC((char **)&v34, (uint64_t)&__p);
    uint64_t v7 = (char *)__p;
    BOOL v8 = (char *)v32;
    if (__p != v32)
    {
      do
      {
        uint64_t v9 = (std::string *)sub_1884274((uint64_t **)(a3 + 16), dword_254EA40, 11, (uint64_t)&off_252CE00, 0);
        sub_11BAB60(v9, (uint64_t)v7);
        v7 += 72;
      }
      while (v7 != v8);
      uint64_t v7 = (char *)__p;
    }
    if (v7)
    {
      uint64_t v10 = (uint64_t)v32;
      uint64_t v11 = v7;
      if (v32 != (void **)v7)
      {
        do
          uint64_t v10 = sub_11B9F24(v10 - 72);
        while ((char *)v10 != v7);
        uint64_t v11 = __p;
      }
      char v32 = (void **)v7;
      operator delete(v11);
    }
    long long __p = 0;
    char v32 = 0;
    uint64_t v33 = 0;
    uint64_t v12 = (uint64_t *)a2[1515];
    if (!v12)
    {
LABEL_17:
      sub_DECABC((char **)&__p, (uint64_t)&v28);
      long long v13 = (char *)v28;
      uint64_t v14 = v29;
      if (v28 != v29)
      {
        uint64_t v15 = (uint64_t **)(a3 + 16);
        do
        {
          uint64_t v16 = (std::string *)sub_1884274(v15, dword_254EA50, 11, (uint64_t)&off_252CE00, 0);
          sub_11BAB60(v16, (uint64_t)v13);
          v13 += 72;
        }
        while (v13 != v14);
        long long v13 = (char *)v28;
      }
      if (v13)
      {
        uint64_t v17 = (uint64_t)v29;
        uint64_t v18 = v13;
        if (v29 != v13)
        {
          do
            uint64_t v17 = sub_11B9F24(v17 - 72);
          while ((char *)v17 != v13);
          uint64_t v18 = v28;
        }
        long double v29 = v13;
        operator delete(v18);
      }
      long long v19 = (void **)__p;
      if (!__p)
      {
LABEL_43:
        uint64_t v23 = (void **)v34;
        if (!v34) {
          return;
        }
        size_t v24 = v35;
        int v25 = v34;
        if (v35 == v34)
        {
LABEL_53:
          int v35 = v23;
          operator delete(v25);
          return;
        }
        while (1)
        {
          if (*((char *)v24 - 25) < 0)
          {
            operator delete(*(v24 - 6));
            if (*((char *)v24 - 49) < 0) {
LABEL_51:
            }
              operator delete(*(v24 - 9));
          }
          else if (*((char *)v24 - 49) < 0)
          {
            goto LABEL_51;
          }
          v24 -= 10;
          if (v24 == v23)
          {
            int v25 = v34;
            goto LABEL_53;
          }
        }
      }
      uint64_t v20 = v32;
      uint64_t v21 = __p;
      if (v32 == __p)
      {
LABEL_42:
        char v32 = v19;
        operator delete(v21);
        goto LABEL_43;
      }
      while (1)
      {
        if (*((char *)v20 - 25) < 0)
        {
          operator delete(*(v20 - 6));
          if (*((char *)v20 - 49) < 0) {
LABEL_40:
          }
            operator delete(*(v20 - 9));
        }
        else if (*((char *)v20 - 49) < 0)
        {
          goto LABEL_40;
        }
        v20 -= 10;
        if (v20 == v19)
        {
          uint64_t v21 = __p;
          goto LABEL_42;
        }
      }
    }
    while (1)
    {
      long double v28 = 0;
      long double v29 = 0;
      uint64_t v30 = 0;
      sub_63C4E0(*((_DWORD *)v12 + 4), (uint64_t)v26);
      sub_DEC58C((uint64_t *)&v34, (uint64_t *)&v28, (uint64_t)v26, 0xFFFFFFFF, *((_DWORD *)v12 + 4), *((_DWORD *)v12 + 16), *((double *)v12 + 7));
      if ((v27 & 0x80000000) == 0) {
        break;
      }
      operator delete(v26[0]);
      int v22 = (char *)v28;
      if (v28) {
        goto LABEL_34;
      }
LABEL_29:
      uint64_t v12 = (uint64_t *)*v12;
      if (!v12) {
        goto LABEL_17;
      }
    }
    int v22 = (char *)v28;
    if (!v28) {
      goto LABEL_29;
    }
LABEL_34:
    long double v29 = v22;
    operator delete(v22);
    goto LABEL_29;
  }
}

void sub_E52E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24)
{
}

void sub_E52EFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_E4373C((void **)va);
  JUMPOUT(0xE52F08);
}

void sub_E52F18(uint64_t a1@<X0>, void *a2@<X1>, unsigned int a3@<W2>, void *a4@<X3>, unsigned int *a5@<X4>, void **a6@<X8>)
{
  uint64_t v6 = a6;
  uint64_t v95 = 0;
  a6[1] = 0;
  a6[2] = 0;
  *a6 = 0;
  if (a3)
  {
    uint64_t v7 = a5;
    BOOL v8 = a4;
    unint64_t v9 = *a5;
    if (a4[13] >= v9)
    {
      uint64_t v85 = 0;
      do
      {
        if (sub_470ADC(a2) <= v9) {
          break;
        }
        uint64_t v95 = 0;
        sub_E535A4(a1, a2, a3, *v7, (_DWORD *)&v95 + 1, (unsigned int *)&v95, &__p);
        uint64_t v10 = v94;
        if (v94 == __p) {
          goto LABEL_87;
        }
        uint64_t v11 = 0;
        unint64_t v89 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)v94 - (unsigned char *)__p) >> 2);
        do
        {
          while (1)
          {
            uint64_t v13 = *v7;
            BOOL v15 = v8[10] == v13 && v11 == HIDWORD(v95);
            if (v11) {
              BOOL v16 = 0;
            }
            else {
              BOOL v16 = v8[7] == v13;
            }
            char v17 = v16;
            if (v11)
            {
              char v18 = 0;
              goto LABEL_61;
            }
            uint64_t v19 = sub_470B40(a2, *v7);
            uint64_t v20 = v19;
            uint64_t v21 = *(int **)(v19 + 8);
            int v22 = (unsigned __int16 *)((char *)v21 - *v21);
            if (*(unsigned char *)(v19 + 46))
            {
              BOOL v23 = v15;
              if (v22[3])
              {
                unint64_t v24 = __ROR8__(*(void *)((char *)v21 + v22[3]), 32);
                unint64_t v25 = HIDWORD(v24);
              }
              else
              {
                char v27 = v17;
                unsigned int v28 = *(_DWORD *)(v19 + 40);
                unint64_t v29 = *(unsigned int *)((char *)v21 + v22[60]);
                unsigned int v30 = sub_511FC(v28);
                unsigned int v31 = v28 & ~(-1 << (v30 & 0xFE));
                int v32 = sub_51938(v31);
                int v33 = sub_51938(v31 >> 1);
                int v34 = 1 << (v30 >> 1);
                int v35 = v32 + (char)v29;
                int v36 = v33 + ((__int16)v29 >> 8);
                unsigned int v37 = (int)((((((v35 & ~(v35 >> 31)) - v35 + (v35 >> 31)) >> (v30 >> 1))
                            + (v35 >> 31)) << (v30 >> 1))
                          + v35)
                    % v34;
                unsigned int v38 = (int)((((((v36 & ~(v36 >> 31)) - v36 + (v36 >> 31)) >> (v30 >> 1))
                            + (v36 >> 31)) << (v30 >> 1))
                          + v36)
                    % v34;
                int v39 = -1 << (v30 >> 1);
                unsigned int v40 = ~v39 < v37 ? ~v39 : v37;
                unsigned int v41 = ~v39 < v38 ? ~v39 : v38;
                sub_518C8(v40, v41);
                unint64_t v24 = v29 >> 16;
                LODWORD(v25) = v42 | (1 << (v30 & 0xFE));
                char v17 = v27;
              }
            }
            else
            {
              unsigned int v26 = *v22;
              if (v26 < 5) {
                goto LABEL_39;
              }
              if (v22[2])
              {
                BOOL v23 = v15;
                unint64_t v24 = __ROR8__(*(void *)((char *)v21 + v22[2]), 32);
                unint64_t v25 = HIDWORD(v24);
                goto LABEL_41;
              }
              if (v26 >= 0x77 && (uint64_t v43 = v22[59]) != 0)
              {
                BOOL v23 = v15;
                unint64_t v24 = *(unsigned __int16 *)((char *)v21 + v43);
              }
              else
              {
LABEL_39:
                BOOL v23 = v15;
                unint64_t v24 = 0;
              }
              LODWORD(v25) = *(_DWORD *)(v19 + 40);
            }
LABEL_41:
            uint64_t v44 = *(void *)(a1 + 16);
            sub_2D5904(v44, (unsigned int *)(v25 | (v24 << 32)), 0, (char **)(v44 + 7800));
            unint64_t v90 = 0;
            double v91 = 0;
            uint64_t v92 = 0;
            uint64_t v45 = *(char **)(v44 + 7808);
            unsigned int v46 = *(char **)(v44 + 7800);
            uint64_t v47 = v45 - v46;
            if (v45 != v46)
            {
              if (v47 < 0) {
                sub_2E00();
              }
              uint64_t v48 = (char *)operator new(v45 - v46);
              unint64_t v90 = v48;
              double v91 = v48;
              uint64_t v92 = &v48[8 * (v47 >> 3)];
              do
              {
                uint64_t v96 = *(void *)v46 & 0xFFFFFFFFFFFFLL;
                uint64_t v48 = sub_2AA8EC((unint64_t *)&v90, v48, &v96) + 8;
                v46 += 8;
              }
              while (v46 != v45);
            }
            uint64_t v49 = *(int **)(v20 + 8);
            uint64_t v50 = (unsigned __int16 *)((char *)v49 - *v49);
            unsigned int v51 = *v50;
            if (v51 < 9)
            {
              uint64_t v52 = 0;
              BOOL v8 = a4;
              BOOL v15 = v23;
            }
            else
            {
              uint64_t v52 = v50[4];
              BOOL v8 = a4;
              BOOL v15 = v23;
              if (v50[4]) {
                uint64_t v52 = *(unsigned int *)((char *)v49 + v52);
              }
            }
            uint64_t v53 = 0;
            uint64_t v54 = v52 + v85;
            BOOL v55 = v54 <= 1600000;
            BOOL v56 = v54 > 1600000;
            if (v55) {
              uint64_t v57 = v85;
            }
            else {
              uint64_t v57 = 0;
            }
            char v58 = v91 - v90 != 16 || v56;
            if (v51 > 8)
            {
              uint64_t v59 = v50[4];
              if (!v59)
              {
                uint64_t v53 = 0;
                if (!v90) {
                  goto LABEL_60;
                }
LABEL_59:
                double v91 = v90;
                operator delete(v90);
                goto LABEL_60;
              }
              uint64_t v53 = *(unsigned int *)((char *)v49 + v59);
            }
            if (v90) {
              goto LABEL_59;
            }
LABEL_60:
            char v18 = v58 | v17;
            uint64_t v85 = v53 + v57;
            uint64_t v7 = a5;
            uint64_t v13 = *a5;
LABEL_61:
            BOOL v60 = v11 == v95 && v8[13] == v13;
            BOOL v61 = v60;
            unint64_t v62 = (char *)__p + 12 * v11;
            unint64_t v64 = v6[1];
            unint64_t v63 = v6[2];
            if (v64 >= (_DWORD *)v63) {
              break;
            }
            int v12 = *((_DWORD *)v62 + 2);
            *(void *)unint64_t v64 = *(void *)v62;
            v64[2] = v12;
            v64[3] = v13;
            *((unsigned char *)v64 + 16) = v18;
            *((unsigned char *)v64 + 17) = v15;
            *((unsigned char *)v64 + 18) = v61;
            *((unsigned char *)v64 + 19) = v17;
            *((unsigned char *)v64 + 20) = 0;
            v6[1] = v64 + 6;
            if (++v11 == v89) {
              goto LABEL_86;
            }
          }
          uint64_t v88 = v11;
          uint64_t v65 = v6;
          BOOL v66 = v15;
          uint64_t v67 = *v65;
          unint64_t v68 = 0xAAAAAAAAAAAAAAABLL * (((char *)v64 - (unsigned char *)*v65) >> 3);
          unint64_t v69 = v68 + 1;
          if (v68 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_2E00();
          }
          unint64_t v70 = 0xAAAAAAAAAAAAAAABLL * ((v63 - v67) >> 3);
          if (2 * v70 > v69) {
            unint64_t v69 = 2 * v70;
          }
          if (v70 >= 0x555555555555555) {
            unint64_t v71 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v71 = v69;
          }
          if (v71 > 0xAAAAAAAAAAAAAAALL) {
            sub_188D718();
          }
          char v72 = v18;
          uint64_t v73 = (char *)operator new(24 * v71);
          int v74 = *((_DWORD *)v62 + 2);
          uint64_t v75 = &v73[24 * v68];
          *(void *)uint64_t v75 = *(void *)v62;
          *((_DWORD *)v75 + 2) = v74;
          *((_DWORD *)v75 + 3) = v13;
          v75[16] = v72;
          v75[17] = v66;
          v75[18] = v61;
          v75[19] = v17;
          v75[20] = 0;
          if (v64 == (_DWORD *)v67)
          {
            int v78 = &v73[24 * v68];
            uint64_t v7 = a5;
            uint64_t v6 = a6;
          }
          else
          {
            unint64_t v76 = &v73[24 * v68];
            uint64_t v7 = a5;
            uint64_t v6 = a6;
            do
            {
              long long v77 = *(_OWORD *)(v64 - 6);
              int v78 = v76 - 24;
              *(void *)(v76 - 11) = *(void *)((char *)v64 - 11);
              *(_OWORD *)(v76 - 24) = v77;
              v64 -= 6;
              v76 -= 24;
            }
            while (v64 != (_DWORD *)v67);
          }
          uint64_t v79 = v75 + 24;
          *uint64_t v6 = v78;
          v6[1] = v75 + 24;
          v6[2] = &v73[24 * v71];
          if (v67) {
            operator delete(v67);
          }
          BOOL v8 = a4;
          v6[1] = v79;
          uint64_t v11 = v88 + 1;
        }
        while (v88 + 1 != v89);
LABEL_86:
        uint64_t v10 = __p;
LABEL_87:
        unsigned int v80 = *v7 + 1;
        unsigned int *v7 = v80;
        if (v10)
        {
          uint64_t v94 = v10;
          operator delete(v10);
          unsigned int v80 = *v7;
        }
        unint64_t v9 = v80;
      }
      while (v8[13] >= (unint64_t)v80);
    }
  }
  sub_E5394C(*(double *)(a1 + 32), a1, v6, *(_DWORD *)(*(void *)a1 + 160) > 3u);
}

void sub_E53500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  unint64_t v25 = *(void **)v23;
  if (!*(void *)v23) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v23 + 8) = v25;
  operator delete(v25);
  _Unwind_Resume(exception_object);
}

void sub_E535A4(uint64_t a1@<X0>, void *a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, _DWORD *a5@<X4>, unsigned int *a6@<X5>, void *a7@<X8>)
{
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = a4;
  BOOL v15 = (unsigned int *)sub_470B40(a2, a4);
  sub_2954EC(v13, (((unint64_t)(v15[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v15[1] << 32) | *v15) ^ 0x1000000000000, (uint64_t)&v36);
  sub_2E4B5C((uint64_t)&v36, v39);
  if (__p)
  {
    unsigned int v38 = __p;
    operator delete(__p);
  }
  if (sub_470ADC(a2) - 1 == v14)
  {
    double v16 = 0.0;
    if (!a4) {
      double v16 = (double)(1000000000 - sub_46CABC((uint64_t)a2));
    }
    unsigned int v17 = sub_46CAC4((uint64_t)a2);
    sub_31854((uint64_t *)v39, 0, a7, v16 / 1000000000.0, (double)v17 / 1000000000.0);
    if (v39[0])
    {
      v39[1] = v39[0];
      operator delete(v39[0]);
    }
  }
  else
  {
    if (!a4)
    {
      int v18 = sub_46CABC((uint64_t)a2);
      sub_32F08((uint64_t *)v39, 1, 0, &v36, 1.0);
      sub_32F08((uint64_t *)&v36, 0, 0, &v34, fmin((double)(1000000000 - v18) / 1000000000.0, 1.0));
      if (v36)
      {
        long long __p = v36;
        operator delete(v36);
      }
      if (v39[0])
      {
        v39[1] = v39[0];
        operator delete(v39[0]);
      }
      *(_OWORD *)int v39 = v34;
      uint64_t v40 = v35;
    }
    uint64_t v19 = a2[133];
    if (*(void *)(v19 + 2400 * a3 + 80) == v14)
    {
      uint64_t v20 = *(void *)(v19 + 2400 * a3 + 88);
      uint64_t v21 = v20 / 100;
      __int16 v22 = v20 % 100;
      if (v20 < 0) {
        __int16 v23 = -50;
      }
      else {
        __int16 v23 = 50;
      }
      *a5 = sub_477F48((uint64_t)v39, (double)(v21+ (int)(((5243 * (__int16)(v23 + v22)) >> 19) + ((5243 * (__int16)(v23 + v22)) >> 31))), 0.1);
    }
    if (*(void *)(v19 + 2400 * a3 + 104) == v14)
    {
      uint64_t v24 = *(void *)(v19 + 2400 * a3 + 112);
      if (v24 == 0x7FFFFFFFFFFFFFFFLL
        || ((uint64_t v25 = v24 / 100, v26 = v24 % 100, v24 < 0) ? (v27 = -50) : (v27 = 50),
            uint64_t v28 = v25
                + (int)(((5243 * (__int16)(v27 + v26)) >> 19) + ((5243 * (__int16)(v27 + v26)) >> 31)),
            v28 < 1))
      {
        unsigned int v29 = 0;
        *a6 = 0;
      }
      else
      {
        unsigned int v29 = sub_477F48((uint64_t)v39, (double)v28, 0.1);
        *a6 = v29;
      }
    }
    else
    {
      unsigned int v29 = *a6;
    }
    unsigned int v30 = (char *)v39[1];
    unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * (((char *)v39[1] - (char *)v39[0]) >> 2) - 1;
    int v33 = v31 > *a5 && v31 > v29;
    *a7 = v39[0];
    a7[1] = &v30[12 * (v33 << 31 >> 31)];
    a7[2] = v40;
  }
}

void sub_E538F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_E5394C(double a1, uint64_t a2, void *a3, unsigned int a4)
{
  uint64_t v40 = 0;
  unsigned int v41 = 0;
  int v42 = 0;
  uint64_t v4 = a3[1] - *a3;
  if (v4)
  {
    unint64_t v7 = 0;
    unint64_t v8 = 0;
    unint64_t v33 = a4;
    unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 3);
    while (1)
    {
      while (!*(unsigned char *)(sub_E1ACF8(a3, v8) + 16)
           && !*(unsigned char *)(sub_E1ACF8(a3, v8) + 17)
           && !*(unsigned char *)(sub_E1ACF8(a3, v8) + 18)
           && v8 != -1 - 0x5555555555555555 * ((uint64_t)(a3[1] - *a3) >> 3))
      {
        if (++v8 == v34)
        {
LABEL_43:
          if (v40)
          {
            unsigned int v41 = (char *)v40;
            operator delete(v40);
          }
          return;
        }
      }
      uint64_t v10 = v40;
      unsigned int v41 = (char *)v40;
      unint64_t v11 = v8 + 1;
      unint64_t v12 = v8 + 1 - v7;
      if (0xAAAAAAAAAAAAAAABLL * ((v42 - (unsigned char *)v40) >> 2) < v12)
      {
        if (v12 > 0x1555555555555555) {
          sub_2E00();
        }
        uint64_t v40 = operator new(12 * v12);
        unsigned int v41 = (char *)v40;
        int v42 = (char *)v40 + 12 * v12;
        if (v10) {
          operator delete(v10);
        }
      }
      unint64_t v35 = v8 + 1;
      unint64_t v36 = v8;
      if (v7 <= v11) {
        unint64_t v13 = v8 + 1;
      }
      else {
        unint64_t v13 = v7;
      }
      unint64_t v14 = v7;
      if (v11 > v7)
      {
        do
        {
          uint64_t v20 = sub_E1ACF8(a3, v14);
          uint64_t v21 = v20;
          __int16 v22 = v41;
          if (v41 < v42)
          {
            uint64_t v18 = *(void *)v20;
            *((_DWORD *)v41 + 2) = *(_DWORD *)(v20 + 8);
            *(void *)__int16 v22 = v18;
            uint64_t v19 = v22 + 12;
          }
          else
          {
            __int16 v23 = (char *)v40;
            unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((v41 - (unsigned char *)v40) >> 2);
            unint64_t v25 = v24 + 1;
            if (v24 + 1 > 0x1555555555555555) {
              sub_2E00();
            }
            if (0x5555555555555556 * ((v42 - (unsigned char *)v40) >> 2) > v25) {
              unint64_t v25 = 0x5555555555555556 * ((v42 - (unsigned char *)v40) >> 2);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v42 - (unsigned char *)v40) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v26 = 0x1555555555555555;
            }
            else {
              unint64_t v26 = v25;
            }
            if (v26)
            {
              if (v26 > 0x1555555555555555) {
                sub_188D718();
              }
              __int16 v27 = (char *)operator new(12 * v26);
            }
            else
            {
              __int16 v27 = 0;
            }
            uint64_t v28 = *(void *)v21;
            unsigned int v29 = &v27[12 * v24];
            *((_DWORD *)v29 + 2) = *(_DWORD *)(v21 + 8);
            *(void *)unsigned int v29 = v28;
            unsigned int v30 = v29;
            if (v22 != v23)
            {
              do
              {
                uint64_t v31 = *(void *)(v22 - 12);
                v22 -= 12;
                int v32 = *((_DWORD *)v22 + 2);
                *(void *)(v30 - 12) = v31;
                v30 -= 12;
                *((_DWORD *)v30 + 2) = v32;
              }
              while (v22 != v23);
              __int16 v22 = (char *)v40;
            }
            uint64_t v19 = v29 + 12;
            uint64_t v40 = v30;
            unsigned int v41 = v29 + 12;
            int v42 = &v27[12 * v26];
            if (v22) {
              operator delete(v22);
            }
          }
          unsigned int v41 = v19;
          ++v14;
        }
        while (v14 != v13);
      }
      memset(v37, 0, sizeof(v37));
      sub_426D8((uint64_t *)&v40, v33, 0, 1, v37, (uint64_t)&__p, a1);
      if (v37[0]) {
        operator delete(v37[0]);
      }
      uint64_t v15 = v39;
      if (v39) {
        break;
      }
      unint64_t v9 = __p;
      if (__p) {
        goto LABEL_4;
      }
LABEL_5:
      unint64_t v7 = v36;
      unint64_t v8 = v35;
      if (v35 == v34) {
        goto LABEL_43;
      }
    }
    unint64_t v16 = 0;
    do
    {
      uint64_t v17 = sub_E1ACF8(a3, v7 + v16);
      unint64_t v9 = __p;
      *(unsigned char *)(v17 + 20) = (*(void *)((char *)__p + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v16) & 1;
      ++v16;
    }
    while (v15 != v16);
LABEL_4:
    operator delete(v9);
    goto LABEL_5;
  }
}

void sub_E53CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_E53CF8(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t v7 = 32;
  if (a3) {
    uint64_t v7 = 40;
  }
  uint64_t v8 = 64;
  if (a3) {
    uint64_t v8 = 72;
  }
  if (!a4 || (double v9 = *(double *)(a1 + v8), v9 == *(double *)(a1 + v7)))
  {
    uint64_t v44 = 0;
    long long v50 = 0u;
    uint64_t v40 = 0x4039000000000000;
    uint64_t v41 = 5000;
    long long v42 = xmmword_20E7C10;
    long long v43 = xmmword_20E7C20;
    uint64_t v45 = 20000000;
    uint64_t v46 = 0x3FF199999999999ALL;
    uint64_t v47 = 0x3E800002710;
    uint64_t v48 = 0xA00002710;
    long long v49 = xmmword_20E7C00;
    *(void *)&long long v50 = 0x3FE6147AE147AE14;
    BYTE9(v50) = 0;
    sub_110BFAC((uint64_t)&v40, a2, (uint64_t)v51);
    sub_188B428((uint64_t)v51, (uint64_t)&v55);
    if (*(char *)(a5 + 23) < 0) {
      operator delete(*(void **)a5);
    }
    *(_OWORD *)a5 = v55;
    *(void *)(a5 + 16) = v56;
    HIBYTE(v56) = 0;
    LOBYTE(v55) = 0;
    sub_1116458(v51);
  }
  else
  {
    long long v55 = 0uLL;
    uint64_t v56 = 0;
    unint64_t v10 = *(int *)(a2 + 32);
    double v35 = v9;
    if (v10)
    {
      sub_3907C((void **)&v55, v10);
      unsigned int v37 = 0;
      uint64_t v38 = 0;
      unint64_t v39 = 0;
      uint64_t v11 = *((void *)&v55 + 1) - v55;
      if (*((void *)&v55 + 1) != (void)v55)
      {
        if (v11 < 0) {
          sub_2E00();
        }
        unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (v11 >> 2);
        unsigned int v37 = operator new(8 * (((v12 - 1) >> 6) + 1));
        uint64_t v38 = 0;
        unint64_t v39 = ((v12 - 1) >> 6) + 1;
        sub_43284(&v37, v12, 0);
        if (*((void *)&v55 + 1) != (void)v55)
        {
          uint64_t v13 = 0;
          uint64_t v14 = 0;
          unint64_t v15 = 0;
          uint64_t v16 = (*((void *)&v55 + 1) - (void)v55) / 12;
          do
          {
            uint64_t v18 = *(void *)(*(void *)(a2 + 40) + (v13 >> 29) + 8);
            if (*(_DWORD *)(v18 + 84) == 1) {
              *(void *)((char *)v37 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
            }
            uint64_t v19 = *(uint64_t (****)())(v18 + 32);
            if (!v19) {
              uint64_t v19 = &off_24F8110;
            }
            int v20 = *(_DWORD *)(v18 + 56);
            double v21 = (double)*((int *)v19 + 7) / 10000000.0;
            uint64_t v22 = -1;
            if (v21 <= 180.0)
            {
              double v23 = (double)*((int *)v19 + 6) / 10000000.0;
              if (v23 >= -85.0511288 && v23 <= 85.0511288 && v21 >= -180.0)
              {
                double v24 = fmax(v23, -85.0511288);
                if (v24 >= 85.0511288) {
                  double v25 = 1.48442223;
                }
                else {
                  double v25 = v24 * 3.14159265 / 180.0;
                }
                long double v26 = sin(v25);
                LODWORD(v27) = ((log((v26 + 1.0) / (1.0 - v26)) / -12.5663706 + 0.5) * 4294967300.0);
                if (v27 >= 0xFFFFFFFE) {
                  uint64_t v27 = 4294967294;
                }
                else {
                  uint64_t v27 = v27;
                }
                uint64_t v22 = ((v21 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v27 << 32);
              }
            }
            uint64_t v17 = v55 + v14;
            *(void *)uint64_t v17 = v22;
            *(_DWORD *)(v17 + 8) = v20;
            ++v15;
            v14 += 12;
            v13 += 0x100000000;
          }
          while (v16 != v15);
        }
      }
    }
    else
    {
      unsigned int v37 = 0;
      uint64_t v38 = 0;
      unint64_t v39 = 0;
    }
    sub_40D78(&v55, 1, &v37, &__p, v35);
    sub_1115F80(v51, 0, 0);
    sub_188CC60((uint64_t)&v52, -1431655765 * ((*((void *)&v55 + 1) - (void)v55) >> 2));
    if (*((void *)&v55 + 1) != (void)v55)
    {
      uint64_t v28 = 0;
      unint64_t v29 = 0;
      uint64_t v30 = (*((void *)&v55 + 1) - (void)v55) / 12;
      do
      {
        if ((*(void *)((char *)__p + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v29))
        {
          if (v54 && (uint64_t v32 = v53, v53 < *v54))
          {
            ++v53;
            uint64_t v31 = *(std::string **)&v54[2 * v32 + 2];
          }
          else
          {
            sub_111704C(v52);
            uint64_t v31 = (std::string *)sub_188CDC8((uint64_t)&v52, v33);
          }
          sub_1115798(v31, *(void *)(*(void *)(a2 + 40) + (v28 >> 29) + 8));
        }
        ++v29;
        v28 += 0x100000000;
      }
      while (v30 != v29);
    }
    uint64_t v44 = 0;
    long long v50 = 0u;
    uint64_t v40 = 0x4039000000000000;
    uint64_t v41 = 5000;
    long long v42 = xmmword_20E7C10;
    long long v43 = xmmword_20E7C20;
    uint64_t v45 = 20000000;
    uint64_t v46 = 0x3FF199999999999ALL;
    uint64_t v47 = 0x3E800002710;
    uint64_t v48 = 0xA00002710;
    long long v49 = xmmword_20E7C00;
    *(void *)&long long v50 = 0x3FE6147AE147AE14;
    BYTE9(v50) = 0;
    sub_1109790((uint64_t)&v40, (uint64_t)v51);
    sub_1880F60((uint64_t)v51, (std::string *)a5);
    sub_1116458(v51);
    if (__p) {
      operator delete(__p);
    }
    if (v37) {
      operator delete(v37);
    }
    if ((void)v55)
    {
      *((void *)&v55 + 1) = v55;
      operator delete((void *)v55);
    }
  }
}

void sub_E542C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  unsigned int v37 = *(void **)(v35 - 176);
  if (!v37) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v35 - 168) = v37;
  operator delete(v37);
  _Unwind_Resume(exception_object);
}

uint64_t sub_E54370(uint64_t a1, void *a2)
{
  long long __p = operator new(0x20uLL);
  long long v19 = xmmword_20B9800;
  strcpy((char *)__p, "add_traffic_lights_to_response");
  BOOL v4 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)a1 = v4;
  long long __p = operator new(0x20uLL);
  long long v19 = xmmword_20B5EB0;
  strcpy((char *)__p, "add_stop_signs_to_response");
  BOOL v5 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 1) = v5;
  long long __p = operator new(0x20uLL);
  long long v19 = xmmword_20B8890;
  strcpy((char *)__p, "add_speed_cameras_to_response");
  BOOL v6 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 2) = v6;
  long long __p = operator new(0x30uLL);
  long long v19 = xmmword_20B9A80;
  strcpy((char *)__p, "centerline_geometry_simplification_tolerance_m");
  double v7 = sub_5C7E8(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  *(double *)(a1 + 8) = v7;
  long long __p = operator new(0x30uLL);
  long long v19 = xmmword_20E1380;
  strcpy((char *)__p, "flowline_geometry_simplification_tolerance_m");
  double v8 = sub_5C7E8(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  *(double *)(a1 + 16) = v8;
  long long __p = operator new(0x20uLL);
  long long v19 = xmmword_20B8E90;
  strcpy((char *)__p, "enable_analytics_simplification");
  BOOL v9 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 24) = v9;
  long long __p = operator new(0x30uLL);
  long long v19 = xmmword_20B9380;
  strcpy((char *)__p, "max_route_length_for_analytics_simplification_m");
  *(void *)(a1 + 32) = sub_5CDE0(a2, &__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x40uLL);
  long long v19 = xmmword_20B98C0;
  strcpy((char *)__p, "analytics_centerline_geometry_simplification_tolerance_m");
  double v10 = sub_5C7E8(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  *(double *)(a1 + 40) = v10;
  long long __p = operator new(0x38uLL);
  long long v19 = xmmword_20B8DF0;
  strcpy((char *)__p, "analytics_flowline_geometry_simplification_tolerance_m");
  double v11 = sub_5C7E8(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  *(double *)(a1 + 48) = v11;
  long long __p = operator new(0x20uLL);
  long long v19 = xmmword_20B9800;
  strcpy((char *)__p, "add_debug_geometry_to_response");
  BOOL v12 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 56) = v12;
  long long __p = operator new(0x30uLL);
  long long v19 = xmmword_20B93C0;
  strcpy((char *)__p, "add_debug_geometry_anomalies_to_response");
  BOOL v13 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 57) = v13;
  long long __p = operator new(0x30uLL);
  long long v19 = xmmword_20B93D0;
  strcpy((char *)__p, "add_debug_route_line_geometry_to_response");
  BOOL v14 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 58) = v14;
  long long __p = operator new(0x20uLL);
  long long v19 = xmmword_20B8870;
  strcpy((char *)__p, "round_mpr_traversal_times");
  BOOL v15 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 59) = v15;
  long long __p = operator new(0x20uLL);
  long long v19 = xmmword_20B8870;
  strcpy((char *)__p, "add_route_leg_name_ranges");
  BOOL v16 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 60) = v16;
  return a1;
}

void sub_E5488C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_E548DC(void *a1, unint64_t a2, void *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8 = a2;
  if (a1)
  {
    if (a3)
    {
      while (1)
      {
        unint64_t v10 = sub_46C760(a1);
        unint64_t v11 = sub_46C760(a3);
        if (v8 >= v10 || a4 >= v11)
        {
          if (v8 < v10 == a4 < v11) {
            return 0;
          }
        }
        else
        {
          uint64_t v12 = sub_46C8EC(a1, v8);
          if (v12 == sub_46C8EC(a3, a4)) {
            return 0;
          }
        }
        uint64_t v13 = sub_46C8EC(a1, v8);
        BOOL v14 = (int *)sub_2D5D58(*(void *)(a5 + 16), *(unsigned int *)(v13 + 32) | ((unint64_t)*(unsigned __int16 *)(v13 + 36) << 32));
        BOOL v15 = (unsigned __int16 *)((char *)v14 - *v14);
        if (*v15 >= 0xBu)
        {
          uint64_t v16 = v15[5];
          if (v16)
          {
            if ((*((unsigned char *)v14 + v16 + 3) & 2) != 0) {
              break;
            }
          }
        }
        ++v8;
      }
    }
    else
    {
      if (a2 >= sub_46C760(a1)) {
        return 0;
      }
      while (1)
      {
        uint64_t v17 = sub_46C8EC(a1, v8);
        uint64_t v18 = (int *)sub_2D5D58(*(void *)(a5 + 16), *(unsigned int *)(v17 + 32) | ((unint64_t)*(unsigned __int16 *)(v17 + 36) << 32));
        long long v19 = (unsigned __int16 *)((char *)v18 - *v18);
        if (*v19 >= 0xBu)
        {
          uint64_t v20 = v19[5];
          if (v20)
          {
            if ((*((unsigned char *)v18 + v20 + 3) & 2) != 0) {
              break;
            }
          }
        }
        if (++v8 >= sub_46C760(a1)) {
          return 0;
        }
      }
    }
  }
  else
  {
    if (!a3 || a4 >= sub_46C760(a3)) {
      return 0;
    }
    while (1)
    {
      uint64_t v22 = sub_46C8EC(0, v8);
      double v23 = (int *)sub_2D5D58(*(void *)(a5 + 16), *(unsigned int *)(v22 + 32) | ((unint64_t)*(unsigned __int16 *)(v22 + 36) << 32));
      double v24 = (unsigned __int16 *)((char *)v23 - *v23);
      if (*v24 >= 0xBu)
      {
        uint64_t v25 = v24[5];
        if (v25)
        {
          if ((*((unsigned char *)v23 + v25 + 3) & 2) != 0) {
            break;
          }
        }
      }
      ++v8;
      if (a4 >= sub_46C760(a3)) {
        return 0;
      }
    }
  }
  return 1;
}

uint64_t sub_E54AE4(void *a1, unint64_t a2, void *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8 = a2;
  if (a1)
  {
    if (a3)
    {
      while (1)
      {
        unint64_t v10 = sub_470ADC(a1);
        unint64_t v11 = sub_470ADC(a3);
        if (v8 >= v10 || a4 >= v11)
        {
          if (v8 < v10 == a4 < v11) {
            return 0;
          }
        }
        else
        {
          uint64_t v12 = sub_470B40(a1, v8);
          if (v12 == sub_470B40(a3, a4)) {
            return 0;
          }
        }
        uint64_t v13 = (unsigned int *)sub_470B40(a1, v8);
        BOOL v14 = (int *)sub_2D5D58(*(void *)(a5 + 16), *v13 | ((unint64_t)(v13[1] & 0x1FFFFFFF) << 32));
        BOOL v15 = (unsigned __int16 *)((char *)v14 - *v14);
        if (*v15 >= 0xBu)
        {
          uint64_t v16 = v15[5];
          if (v16)
          {
            if ((*((unsigned char *)v14 + v16 + 3) & 2) != 0) {
              break;
            }
          }
        }
        ++v8;
      }
    }
    else
    {
      if (a2 >= sub_470ADC(a1)) {
        return 0;
      }
      while (1)
      {
        uint64_t v17 = (unsigned int *)sub_470B40(a1, v8);
        uint64_t v18 = (int *)sub_2D5D58(*(void *)(a5 + 16), *v17 | ((unint64_t)(v17[1] & 0x1FFFFFFF) << 32));
        long long v19 = (unsigned __int16 *)((char *)v18 - *v18);
        if (*v19 >= 0xBu)
        {
          uint64_t v20 = v19[5];
          if (v20)
          {
            if ((*((unsigned char *)v18 + v20 + 3) & 2) != 0) {
              break;
            }
          }
        }
        if (++v8 >= sub_470ADC(a1)) {
          return 0;
        }
      }
    }
  }
  else
  {
    if (!a3 || a4 >= sub_470ADC(a3)) {
      return 0;
    }
    while (1)
    {
      uint64_t v22 = (unsigned int *)sub_470B40(0, v8);
      double v23 = (int *)sub_2D5D58(*(void *)(a5 + 16), *v22 | ((unint64_t)(v22[1] & 0x1FFFFFFF) << 32));
      double v24 = (unsigned __int16 *)((char *)v23 - *v23);
      if (*v24 >= 0xBu)
      {
        uint64_t v25 = v24[5];
        if (v25)
        {
          if ((*((unsigned char *)v23 + v25 + 3) & 2) != 0) {
            break;
          }
        }
      }
      ++v8;
      if (a4 >= sub_470ADC(a3)) {
        return 0;
      }
    }
  }
  return 1;
}

double sub_E54CEC()
{
  byte_25F7E27 = 1;
  word_25F7E10 = 65;
  byte_25F7E3F = 1;
  word_25F7E28 = 65;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__dst, "UNKNOWN");
  *(_DWORD *)uint64_t v286 = 0;
  HIBYTE(v287[0]) = 14;
  strcpy(&v286[8], "ROUTES_THROUGH");
  LODWORD(v287[1]) = 1;
  v288[23] = 9;
  strcpy(v288, "ROUTES_TO");
  LODWORD(v289) = 3;
  HIBYTE(v291) = 11;
  strcpy((char *)__p, "ROUTES_FROM");
  LODWORD(v292) = 2;
  xmmword_25FBD18 = 0u;
  *(_OWORD *)&qword_25FBD28 = 0u;
  dword_25FBD38 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25FBD18, (uint64_t)&__dst, (uint64_t)&__dst);
  sub_3A6EF0((uint64_t)&xmmword_25FBD18, (uint64_t)&v286[8], (uint64_t)&v286[8]);
  sub_3A6EF0((uint64_t)&xmmword_25FBD18, (uint64_t)v288, (uint64_t)v288);
  sub_3A6EF0((uint64_t)&xmmword_25FBD18, (uint64_t)__p, (uint64_t)__p);
  if (SHIBYTE(v291) < 0)
  {
    operator delete(__p[0]);
    if ((v288[23] & 0x80000000) == 0)
    {
LABEL_3:
      if ((SHIBYTE(v287[0]) & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_383:
      operator delete(*(void **)&v286[8]);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_5;
      }
      goto LABEL_384;
    }
  }
  else if ((v288[23] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v288);
  if (SHIBYTE(v287[0]) < 0) {
    goto LABEL_383;
  }
LABEL_4:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_5;
  }
LABEL_384:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_5:
  byte_25F7E57 = 8;
  strcpy((char *)&qword_25F7E40, "any_mode");
  byte_25F7E6F = 7;
  strcpy((char *)&dword_25F7E58, "cycling");
  byte_25F7E87 = 7;
  strcpy((char *)&dword_25F7E70, "driving");
  byte_25F7E9F = 7;
  strcpy((char *)&dword_25F7E88, "walking");
  qword_25F7EA8 = 0;
  qword_25F7EB0 = 0;
  qword_25F7EA0 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25F7EA0 = (uint64_t)v0;
  qword_25F7EA8 = (uint64_t)(v0 + 9);
  qword_25F7EB0 = (uint64_t)(v0 + 9);
  qword_25F7EB8 = 0;
  qword_25F7EC0 = 0;
  qword_25F7EC8 = 0;
  uint64_t v1 = operator new(9uLL);
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25F7EB8 = (uint64_t)v1;
  qword_25F7EC0 = (uint64_t)(v1 + 9);
  strcpy(&byte_25F7EE7, "\n\x1B\\toi=orth\\"");
  qword_25F7EC8 = (uint64_t)(v1 + 9);
  strcpy(byte_25F7ED0, "\x1B\\toi=lhp\\"");
  byte_25F7EFF = 11;
  qword_25F7F00 = (char *)operator new(0x19uLL);
  long long v282 = xmmword_20B9250;
  xmmword_25F7F08 = xmmword_20B9250;
  strcpy(qword_25F7F00, "\x1B\\toi=x-sampa-internal\\"");
  byte_25F7F2F = 13;
  strcpy((char *)&qword_25F7F18, "\x1B\\tn=address\\"");
  strcpy(&byte_25F7F47, "\t\x1B\\tn=normal\\"");
  strcpy((char *)&qword_25F7F30, "\x1B\\tn=nav\\"");
  byte_25F7F5F = 12;
  byte_25F7F77 = 7;
  strcpy((char *)&dword_25F7F60, "\x1B\\lang=");
  byte_25F7F8F = 1;
  word_25F7F78 = 92;
  byte_25F7FA7 = 4;
  strcpy((char *)&qword_25F7F90, "DEV:");
  byte_25F7FBF = 8;
  strcpy((char *)&qword_25F7FA8, "Continue");
  byte_25F7FD7 = 11;
  strcpy((char *)&qword_25F7FC0, "Start_Route");
  byte_25F7FEF = 14;
  strcpy((char *)&qword_25F7FD8, "Continue_Route");
  byte_25F8007 = 12;
  strcpy((char *)&qword_25F7FF0, "Resume_Route");
  byte_25F801F = 18;
  strcpy((char *)&xmmword_25F8008, "Start_Route_U_Turn");
  byte_25F8037 = 7;
  strcpy((char *)&dword_25F8020, "_U_Turn");
  qword_25F8048 = 0x1300000000000000;
  qmemcpy(&unk_25F8050, "Continue_Route", 14);
  qword_25F8038 = *(void *)"Resume_Route";
  unk_25F8040 = 0x545F555F6574756FLL;
  unk_25F8047 = 1852994900;
  qword_25F8060 = 0x1500000000000000;
  strcpy(byte_25F8068, "Left_Turn");
  unk_25F805E = 1415533919;
  *(_DWORD *)((char *)&qword_25F8060 + 1) = 1852994900;
  strcpy(&byte_25F807F, "\tRight_Turn");
  strcpy(&byte_25F8097, "\nLeft_Turn_At_End");
  byte_25F80AF = 16;
  byte_25F80C7 = 17;
  strcpy((char *)&xmmword_25F80B0, "Right_Turn_At_End");
  byte_25F80DF = 15;
  strcpy((char *)&qword_25F80C8, "Sharp_Left_Turn");
  byte_25F80F7 = 16;
  strcpy((char *)&xmmword_25F80E0, "Sharp_Right_Turn");
  byte_25F810F = 16;
  strcpy((char *)&xmmword_25F80F8, "Slight_Left_Turn");
  byte_25F8127 = 17;
  strcpy((char *)&xmmword_25F8110, "Slight_Right_Turn");
  strcpy(&byte_25F813F, "\tKeep_Right");
  strcpy((char *)&qword_25F8128, "Keep_Left");
  strcpy(&byte_25F8157, "\nU_Turn");
  byte_25F816F = 6;
  byte_25F8187 = 14;
  strcpy((char *)&qword_25F8170, "Walking_U_Turn");
  byte_25F819F = 20;
  strcpy((char *)&xmmword_25F8188, "U_Turn_When_Possible");
  byte_25F81B7 = 20;
  strcpy((char *)&xmmword_25F81A0, "U_Turn_At_Roundabout");
  byte_25F81CF = 11;
  strcpy((char *)&qword_25F81B8, "Enter_Ferry");
  strcpy(&byte_25F81E7, "\nChange_Ferry");
  strcpy((char *)&qword_25F81D0, "Exit_Ferry");
  byte_25F81FF = 12;
  byte_25F8217 = 21;
  strcpy((char *)&xmmword_25F8200, "Enter_Railway_Shuttle");
  byte_25F822F = 20;
  strcpy((char *)&xmmword_25F8218, "Exit_Railway_Shuttle");
  byte_25F8247 = 22;
  strcpy((char *)&xmmword_25F8230, "Change_Railway_Shuttle");
  byte_25F825F = 17;
  strcpy((char *)&xmmword_25F8248, "End_Of_Navigation");
  byte_25F8277 = 17;
  strcpy((char *)&xmmword_25F8260, "End_Of_Navigation");
  byte_25F828F = 11;
  strcpy((char *)&qword_25F8278, "Destination");
  byte_25F82A7 = 19;
  strcpy((char *)&xmmword_25F8290, "Destination_On_left");
  byte_25F82BF = 20;
  strcpy((char *)&xmmword_25F82A8, "Destination_On_Right");
  strcpy(&byte_25F82D7, "\nFirst_Stop_On_left");
  *(void *)&long long v266 = *(void *)"First_Stop";
  strcpy((char *)&qword_25F82C0, "First_Stop");
  byte_25F82EF = 18;
  byte_25F8307 = 19;
  strcpy((char *)&xmmword_25F82F0, "First_Stop_On_Right");
  strcpy(&byte_25F831F, "\tNext_Stop_On_left");
  *(void *)&v265[32] = *(void *)"Next_Stop";
  strcpy((char *)&qword_25F8308, "Next_Stop");
  byte_25F8337 = 17;
  byte_25F834F = 18;
  strcpy((char *)&xmmword_25F8338, "Next_Stop_On_Right");
  byte_25F8367 = 13;
  strcpy((char *)&qword_25F8350, "Waypoint_Stop");
  byte_25F837F = 21;
  strcpy((char *)&xmmword_25F8368, "Waypoint_Stop_On_Left");
  byte_25F8397 = 22;
  strcpy((char *)&xmmword_25F8380, "Waypoint_Stop_On_Right");
  byte_25F83AF = 11;
  strcpy((char *)&qword_25F8398, "Roundabout_");
  byte_25F83C7 = 16;
  strcpy((char *)&xmmword_25F83B0, "Enter_Roundabout");
  qword_25F83C8 = (uint64_t)operator new(0x20uLL);
  long long v283 = xmmword_20B91C0;
  unk_25F83D0 = xmmword_20B91C0;
  strcpy((char *)qword_25F83C8, "Walking_Enter_Roundabout");
  byte_25F83F7 = 16;
  strcpy(byte_25F83E0, "Leave_Roundabout");
  byte_25F840F = 21;
  strcpy((char *)&xmmword_25F83F8, "Roundabout_First_Exit");
  byte_25F8427 = 22;
  strcpy(byte_25F8410, "Roundabout_Second_Exit");
  byte_25F843F = 21;
  strcpy((char *)&xmmword_25F8428, "Roundabout_Third_Exit");
  strcpy(byte_25F8440, "Roundabout_Fourth_Exit");
  HIBYTE(word_25F8456) = 22;
  byte_25F846F = 21;
  strcpy((char *)&xmmword_25F8458, "Roundabout_Fifth_Exit");
  byte_25F8487 = 21;
  strcpy(byte_25F8470, "Roundabout_Sixth_Exit");
  qword_25F8488 = (uint64_t)operator new(0x19uLL);
  unk_25F8490 = xmmword_20B9250;
  strcpy((char *)qword_25F8488, "Roundabout_Seventh_Exit");
  strcpy(byte_25F84A0, "Roundabout_Eighth_Exit");
  HIBYTE(word_25F84B6) = 22;
  byte_25F84CF = 21;
  strcpy((char *)&xmmword_25F84B8, "Roundabout_Ninth_Exit");
  byte_25F84E7 = 21;
  strcpy(byte_25F84D0, "Roundabout_Tenth_Exit");
  qword_25F84E8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25F84F0 = xmmword_20B91C0;
  strcpy((char *)qword_25F84E8, "Roundabout_Eleventh_Exit");
  qword_25F8500 = (uint64_t)operator new(0x19uLL);
  unk_25F8508 = xmmword_20B9250;
  strcpy((char *)qword_25F8500, "Roundabout_Twelfth_Exit");
  qword_25F8518 = (uint64_t)operator new(0x20uLL);
  long long v279 = xmmword_20B5EB0;
  unk_25F8520 = xmmword_20B5EB0;
  strcpy((char *)qword_25F8518, "Roundabout_Thirteenth_Exit");
  qword_25F8530 = (uint64_t)operator new(0x20uLL);
  unk_25F8538 = xmmword_20B5EB0;
  strcpy((char *)qword_25F8530, "Roundabout_Fourteenth_Exit");
  qword_25F8548 = (uint64_t)operator new(0x20uLL);
  long long v281 = xmmword_20B8870;
  *(_OWORD *)algn_25F8550 = xmmword_20B8870;
  strcpy((char *)qword_25F8548, "Roundabout_Fifteenth_Exit");
  qword_25F8560 = (uint64_t)operator new(0x20uLL);
  unk_25F8568 = xmmword_20B8870;
  strcpy((char *)qword_25F8560, "Roundabout_Sixteenth_Exit");
  qword_25F8578 = (uint64_t)operator new(0x20uLL);
  long long v276 = xmmword_20B91A0;
  unk_25F8580 = xmmword_20B91A0;
  strcpy((char *)qword_25F8578, "Roundabout_Seventeenth_Exit");
  qword_25F8590 = (uint64_t)operator new(0x20uLL);
  unk_25F8598 = xmmword_20B5EB0;
  strcpy((char *)qword_25F8590, "Roundabout_Eighteenth_Exit");
  qword_25F85A8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25F85B0 = xmmword_20B5EB0;
  strcpy((char *)qword_25F85A8, "Roundabout_Nineteenth_Exit");
  byte_25F85D7 = 8;
  strcpy((char *)&qword_25F85C0, "Off_Ramp");
  byte_25F85EF = 16;
  strcpy((char *)&xmmword_25F85D8, "Off_Ramp_On_Left");
  byte_25F8607 = 17;
  strcpy(algn_25F85F0, "Off_Ramp_On_Right");
  byte_25F861F = 14;
  strcpy((char *)&qword_25F8608, "Change_Highway");
  strcpy(byte_25F8620, "Change_Highway_On_Left");
  HIBYTE(word_25F8636) = 22;
  qword_25F8638 = (uint64_t)operator new(0x19uLL);
  unk_25F8640 = xmmword_20B9250;
  strcpy((char *)qword_25F8638, "Change_Highway_On_Right");
  byte_25F8667 = 5;
  strcpy((char *)&dword_25F8650, "Merge");
  byte_25F867F = 12;
  strcpy((char *)&qword_25F8668, "Enter_Detour");
  byte_25F8697 = 11;
  strcpy((char *)&qword_25F8680, "Exit_Detour");
  byte_25F86AF = 18;
  strcpy((char *)&xmmword_25F8698, "Walking_Turnaround");
  qword_25F86B0 = (uint64_t)operator new(0x19uLL);
  unk_25F86B8 = xmmword_20B9250;
  strcpy((char *)qword_25F86B0, "Walking_Turnaround_Sign");
  byte_25F86DF = 19;
  strcpy(byte_25F86C8, "Distance_Title_List");
  unk_25F86E0 = operator new(0x19uLL);
  unk_25F86E8 = xmmword_20B9250;
  long long v273 = *(_OWORD *)"Cross_The_Street_Spoken";
  strcpy(unk_25F86E0, "Cross_The_Street_Spoken");
  *(void *)&long long v272 = *(void *)"t_Spoken";
  byte_25F870F = 19;
  strcpy(byte_25F86F8, "Arrival_Charge_List");
  byte_25F8727 = 15;
  strcpy(byte_25F8710, "Charge_At_Start");
  strcpy(&byte_25F873F, "\tPass_Street");
  strcpy(byte_25F8728, "Pass_Exit");
  byte_25F8757 = 11;
  byte_25F876F = 17;
  strcpy(byte_25F8758, "Pass_Intersection");
  strcpy(&byte_25F8787, "\t_PrevExitNumber");
  strcpy(byte_25F8770, "Next_Exit");
  byte_25F879F = 15;
  strcpy(&byte_25F87B7, "\t_PrevUTurn");
  strcpy(byte_25F87A0, "_PrevRoad");
  strcpy(&byte_25F87CF, "\nNext_");
  byte_25F87E7 = 5;
  byte_25F87FF = 15;
  strcpy(byte_25F87E8, "_At_Next_Street");
  byte_25F8817 = 21;
  strcpy(byte_25F8800, "_At_Next_Intersection");
  byte_25F882F = 14;
  strcpy((char *)&qword_25F8818, "Charge_Station");
  byte_25F8847 = 15;
  strcpy((char *)&qword_25F8830, "_Charge_Station");
  BYTE1(qword_25F8858) = 0;
  WORD1(qword_25F8858) = 25856;
  HIDWORD(qword_25F8858) = 335544320;
  strcpy((char *)&qword_25F8848, "_Charge_Station_");
  byte_25F8877 = 8;
  strcpy((char *)&qword_25F8860, "_Minimum");
  byte_25F888F = 15;
  strcpy((char *)&qword_25F8878, "ExitShield_Sign");
  byte_25F88A7 = 8;
  strcpy((char *)&qword_25F8890, "Walking_");
  byte_25F88BF = 16;
  strcpy((char *)&xmmword_25F88A8, "Walking_Continue");
  byte_25F88D7 = 19;
  strcpy((char *)&xmmword_25F88C0, "Walking_Start_Route");
  qword_25F88D8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25F88E0 = xmmword_20B5EB0;
  strcpy((char *)qword_25F88D8, "Walking_Start_Route_U_Turn");
  byte_25F8907 = 17;
  strcpy(&algn_25F88E0[16], "Walking_Left_Turn");
  byte_25F891F = 18;
  strcpy((char *)&xmmword_25F8908, "Walking_Right_Turn");
  qword_25F8920 = (uint64_t)operator new(0x20uLL);
  unk_25F8928 = xmmword_20B5EB0;
  strcpy((char *)qword_25F8920, "Walking_Turn_At_Roundabout");
  qword_25F8938 = (uint64_t)operator new(0x20uLL);
  long long v280 = xmmword_20B91B0;
  unk_25F8940 = xmmword_20B91B0;
  strcpy((char *)qword_25F8938, "Walking_U_Turn_When_Possible");
  qword_25F8950 = (uint64_t)operator new(0x28uLL);
  long long v271 = xmmword_20B9390;
  unk_25F8958 = xmmword_20B9390;
  strcpy((char *)qword_25F8950, "Walking_Roundabout_Exit_Continue");
  qword_25F8968 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25F8970 = xmmword_20B91B0;
  strcpy((char *)qword_25F8968, "Walking_Roundabout_Exit_Left");
  qword_25F8980 = (uint64_t)operator new(0x20uLL);
  long long v278 = xmmword_20B8890;
  unk_25F8988 = xmmword_20B8890;
  strcpy((char *)qword_25F8980, "Walking_Roundabout_Exit_Right");
  qword_25F8998 = (uint64_t)operator new(0x20uLL);
  unk_25F89A0 = xmmword_20B8870;
  strcpy((char *)qword_25F8998, "Walking_End_Of_Navigation");
  long long v275 = *(_OWORD *)"nd_Of_Navigation";
  char v2 = (char *)operator new(0x20uLL);
  qword_25F89B0 = (uint64_t)v2;
  unk_25F89B8 = xmmword_20B8870;
  *(_OWORD *)char v2 = *(_OWORD *)"Walking_End_Of_Navigation";
  *(_OWORD *)(v2 + 9) = v275;
  v2[25] = 0;
  byte_25F89DF = 8;
  strcpy((char *)&qword_25F89C8, "Walking_");
  qword_25F89E0 = (uint64_t)operator new(0x19uLL);
  unk_25F89E8 = v282;
  strcpy((char *)qword_25F89E0, "Walking_Sharp_Left_Turn");
  qword_25F89F8 = (uint64_t)operator new(0x20uLL);
  unk_25F8A00 = v283;
  strcpy((char *)qword_25F89F8, "Walking_Sharp_Right_Turn");
  qword_25F8A10 = (uint64_t)operator new(0x20uLL);
  unk_25F8A18 = v283;
  strcpy((char *)qword_25F8A10, "Walking_Slight_Left_Turn");
  qword_25F8A28 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25F8A30 = v281;
  strcpy((char *)qword_25F8A28, "Walking_Slight_Right_Turn");
  byte_25F8A57 = 4;
  strcpy((char *)&dword_25F8A40, "Exit");
  byte_25F8A6F = 4;
  strcpy((char *)&dword_25F8A58, "Road");
  byte_25F8A87 = 7;
  strcpy((char *)&dword_25F8A70, "Freeway");
  byte_25F8A9F = 12;
  strcpy((char *)&qword_25F8A88, "Intersection");
  byte_25F8AB7 = 5;
  strcpy((char *)&dword_25F8AA0, "Ferry");
  byte_25F8ACF = 11;
  strcpy((char *)&qword_25F8AB8, "ShuttleName");
  byte_25F8AE7 = 5;
  strcpy((char *)&dword_25F8AD0, "Road1");
  strcpy(&byte_25F8AFF, "\tName");
  strcpy((char *)&qword_25F8AE8, "Signpost1");
  byte_25F8B17 = 4;
  byte_25F8B2F = 7;
  strcpy((char *)&dword_25F8B18, "Address");
  byte_25F8B47 = 7;
  strcpy((char *)&dword_25F8B30, "Shield1");
  byte_25F8B5F = 13;
  strcpy((char *)&qword_25F8B48, "TowardShield1");
  byte_25F8B77 = 6;
  strcpy((char *)&dword_25F8B60, "Right_");
  byte_25F8B8F = 5;
  strcpy((char *)&dword_25F8B78, "Left_");
  strcpy(&byte_25F8BA7, "\tOn_Left_");
  strcpy((char *)&qword_25F8B90, "On_Right_");
  byte_25F8BBF = 8;
  byte_25F8BD7 = 12;
  strcpy((char *)&qword_25F8BC0, "ElevatorName");
  byte_25F8BEF = 13;
  strcpy((char *)&qword_25F8BD8, "EscalatorName");
  strcpy(&byte_25F8C07, "\nBridgeName");
  strcpy((char *)&qword_25F8BF0, "StairsName");
  strcpy(&byte_25F8C1F, "\nTunnelName");
  strcpy(&byte_25F8C37, "\nParking");
  byte_25F8C4F = 7;
  strcpy(&byte_25F8C67, "\t_Escalator");
  strcpy((char *)&qword_25F8C50, "_Elevator");
  strcpy(&byte_25F8C7F, "\n_ElevatorName");
  byte_25F8C97 = 13;
  byte_25F8CAF = 14;
  strcpy((char *)&qword_25F8C98, "_EscalatorName");
  byte_25F8CC7 = 5;
  strcpy((char *)&qword_25F8CB0, "_Road");
  byte_25F8CDF = 8;
  strcpy((char *)&qword_25F8CC8, "_Freeway");
  byte_25F8CF7 = 13;
  strcpy((char *)&qword_25F8CE0, "_Intersection");
  byte_25F8D0F = 6;
  strcpy((char *)&dword_25F8CF8, "_Road1");
  byte_25F8D27 = 6;
  strcpy((char *)&dword_25F8D10, "_Road2");
  strcpy(&byte_25F8D3F, "\n_Signpost2");
  strcpy((char *)&qword_25F8D28, "_Signpost1");
  strcpy(&byte_25F8D57, "\n_Ferry");
  byte_25F8D6F = 6;
  byte_25F8D87 = 12;
  strcpy((char *)&qword_25F8D70, "_Ferry_Ferry");
  byte_25F8D9F = 12;
  strcpy((char *)&qword_25F8D88, "_ShuttleName");
  qword_25F8DA0 = (uint64_t)operator new(0x20uLL);
  unk_25F8DA8 = v280;
  strcpy((char *)qword_25F8DA0, "_Railway_Shuttle_ShuttleName");
  byte_25F8DCF = 11;
  strcpy((char *)&qword_25F8DB8, "_ExitNumber");
  byte_25F8DE7 = 5;
  strcpy((char *)&dword_25F8DD0, "_Exit");
  byte_25F8DFF = 7;
  strcpy((char *)&dword_25F8DE8, "_StayOn");
  byte_25F8E17 = 7;
  strcpy((char *)&dword_25F8E00, "_Stairs");
  byte_25F8E2F = 5;
  strcpy((char *)&dword_25F8E18, "_Ramp");
  byte_25F8E47 = 11;
  strcpy((char *)&qword_25F8E30, "_StairsName");
  strcpy(&byte_25F8E5F, "\t_Down");
  strcpy((char *)&qword_25F8E48, "_RampName");
  byte_25F8E77 = 5;
  byte_25F8E8F = 3;
  dword_25F8E78 = 7361887;
  byte_25F8EA7 = 7;
  strcpy((char *)&dword_25F8E90, "_Bridge");
  byte_25F8EBF = 7;
  strcpy((char *)&dword_25F8EA8, "_Tunnel");
  byte_25F8ED7 = 11;
  strcpy((char *)&qword_25F8EC0, "_Roundabout");
  byte_25F8EEF = 6;
  strcpy((char *)&dword_25F8ED8, "_Cross");
  byte_25F8F07 = 8;
  strcpy((char *)&qword_25F8EF0, "_Parking");
  byte_25F8F1F = 8;
  strcpy((char *)&qword_25F8F08, "_Shield1");
  byte_25F8F37 = 14;
  strcpy((char *)&qword_25F8F20, "_TowardShield1");
  byte_25F8F4F = 8;
  strcpy((char *)&qword_25F8F38, "_Shield2");
  byte_25F8F67 = 14;
  strcpy((char *)&qword_25F8F50, "_TowardShield2");
  byte_25F8F7F = 11;
  strcpy((char *)&qword_25F8F68, "_Direction1");
  byte_25F8F97 = 11;
  strcpy((char *)&qword_25F8F80, "_Direction2");
  strcpy(&byte_25F8FAF, "\n_TowardDirection1");
  strcpy((char *)&qword_25F8F98, "Direction1");
  byte_25F8FC7 = 17;
  byte_25F8FDF = 17;
  strcpy((char *)&xmmword_25F8FC8, "_TowardDirection2");
  byte_25F8FF7 = 16;
  strcpy((char *)&xmmword_25F8FE0, "TowardDirection1");
  byte_25F900F = 7;
  strcpy((char *)&qword_25F8FF8, "_Spoken");
  byte_25F9027 = 5;
  strcpy((char *)&qword_25F9010, "_Sign");
  byte_25F903F = 15;
  strcpy((char *)&qword_25F9028, "_Secondary_Sign");
  byte_25F9057 = 5;
  byte_25F9044 = 116;
  dword_25F9040 = 1936280671;
  byte_25F9045 = 0;
  byte_25F906F = 8;
  strcpy((char *)&qword_25F9058, "_Primary");
  qword_25F9080 = 0xF00000000000000;
  strcpy((char *)&qword_25F9070, "_Spoken_Primary");
  strcpy(&byte_25F909F, "\n_Secondary");
  strcpy((char *)&qword_25F9088, "_Secondary");
  strcpy(&byte_25F90B7, "\n_Spoken_Secondar");
  BYTE1(qword_25F90C8) = 0;
  WORD1(qword_25F90C8) = 0;
  HIDWORD(qword_25F90C8) = 285212672;
  byte_25F90E7 = 13;
  strcpy((char *)&qword_25F90D0, "_To_Secondary");
  BYTE1(qword_25F90F8) = 0;
  WORD1(qword_25F90F8) = 0;
  HIDWORD(qword_25F90F8) = 335544320;
  strcpy((char *)&dword_25F90E8, "_Spoken_To_Secon");
  strcpy(&byte_25F9117, "\t_ValidDistance");
  strcpy((char *)&qword_25F9100, "_Distance");
  byte_25F912F = 14;
  byte_25F9147 = 6;
  strcpy((char *)&dword_25F9130, "_Short");
  byte_25F915F = 1;
  word_25F9148 = 95;
  qword_25F9160 = (uint64_t)operator new(0x20uLL);
  unk_25F9168 = v283;
  strcpy((char *)qword_25F9160, "Concatenate_Newline_Sign");
  uint64_t v3 = (char *)operator new(0x19uLL);
  qword_25F9178 = (uint64_t)v3;
  unk_25F9180 = v282;
  *(_OWORD *)uint64_t v3 = v273;
  *(void *)(v3 + 15) = v272;
  v3[23] = 0;
  byte_25F91A7 = 12;
  strcpy((char *)&qword_25F9190, "Chain_Spoken");
  byte_25F91BF = 15;
  strcpy((char *)&qword_25F91A8, "Chain_To_Spoken");
  strcpy(&byte_25F91D7, "\nThen_Spoken");
  strcpy((char *)&qword_25F91C0, "And_Spoken");
  byte_25F91EF = 11;
  byte_25F9207 = 18;
  strcpy(algn_25F91F0, "Concatenate_Spoken");
  qword_25F9208 = (uint64_t)operator new(0x28uLL);
  long long v269 = xmmword_20B9240;
  *(_OWORD *)algn_25F9210 = xmmword_20B9240;
  strcpy((char *)qword_25F9208, "At_Traffic_Light_Chain_Spoken_Primary");
  qword_25F9220 = (uint64_t)operator new(0x28uLL);
  v270[1] = xmmword_20B9260;
  unk_25F9228 = xmmword_20B9260;
  strcpy((char *)qword_25F9220, "At_Stop_Sign_Chain_Spoken_Primary");
  qword_25F9238 = (uint64_t)operator new(0x40uLL);
  unk_25F9240 = xmmword_20B9A90;
  strcpy((char *)qword_25F9238, "At_Stop_Sign_Cross_Traffic_Doesnt_Stop_Chain_Spoken_Primary");
  qword_25F9250 = (uint64_t)operator new(0x30uLL);
  long long v268 = xmmword_20B9A40;
  unk_25F9258 = xmmword_20B9A40;
  strcpy((char *)qword_25F9250, "At_Next_Traffic_Light_Chain_Spoken_Primary");
  qword_25F9268 = (uint64_t)operator new(0x28uLL);
  long long v267 = xmmword_20E12D0;
  *(_OWORD *)algn_25F9270 = xmmword_20E12D0;
  strcpy((char *)qword_25F9268, "At_Next_Stop_Sign_Chain_Spoken_Primary");
  qword_25F9280 = (uint64_t)operator new(0x28uLL);
  long long v277 = xmmword_20B9960;
  unk_25F9288 = xmmword_20B9960;
  strcpy((char *)qword_25F9280, "At_Traffic_Light_Chain_Spoken_Secondary");
  qword_25F9298 = (uint64_t)operator new(0x28uLL);
  unk_25F92A0 = xmmword_20B93A0;
  strcpy((char *)qword_25F9298, "At_Stop_Sign_Chain_Spoken_Secondary");
  qword_25F92B0 = (uint64_t)operator new(0x30uLL);
  long long v275 = xmmword_20E1380;
  unk_25F92B8 = xmmword_20E1380;
  strcpy((char *)qword_25F92B0, "At_Next_Traffic_Light_Chain_Spoken_Secondary");
  qword_25F92C8 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_25F92D0 = xmmword_20B93C0;
  strcpy((char *)qword_25F92C8, "At_Next_Stop_Sign_Chain_Spoken_Secondary");
  qword_25F92E0 = (uint64_t)operator new(0x38uLL);
  unk_25F92E8 = xmmword_20B9A60;
  strcpy((char *)qword_25F92E0, "At_Next_One_Traffic_Light_Chain_Spoken_Secondary");
  qword_25F92F8 = (uint64_t)operator new(0x30uLL);
  unk_25F9300 = xmmword_20E1380;
  strcpy((char *)qword_25F92F8, "At_Next_One_Stop_Sign_Chain_Spoken_Secondary");
  qword_25F9310 = (uint64_t)operator new(0x28uLL);
  unk_25F9318 = xmmword_20B9960;
  strcpy((char *)qword_25F9310, "At_Mini_Roundabout_Chain_Spoken_Primary");
  qword_25F9328 = (uint64_t)operator new(0x30uLL);
  long long v274 = xmmword_20B93D0;
  *(_OWORD *)algn_25F9330 = xmmword_20B93D0;
  strcpy((char *)qword_25F9328, "At_Mini_Roundabout_Chain_Spoken_Secondary");
  qword_25F9340 = (uint64_t)operator new(0x20uLL);
  unk_25F9348 = v278;
  strcpy((char *)qword_25F9340, "Walking_Distance_Chain_Spoken");
  qword_25F9358 = (uint64_t)operator new(0x20uLL);
  unk_25F9360 = v278;
  strcpy((char *)qword_25F9358, "Walking_Continue_Chain_Spoken");
  BOOL v4 = (char *)operator new(0x19uLL);
  qword_25F9370 = (uint64_t)v4;
  unk_25F9378 = v282;
  *(_OWORD *)BOOL v4 = v273;
  *(void *)(v4 + 15) = v272;
  v4[23] = 0;
  unk_25F9388 = operator new(0x28uLL);
  unk_25F9390 = v271;
  strcpy(unk_25F9388, "Distance_Cross_The_Street_Spoken");
  strcpy(byte_25F93A0, "Walking_Continue_Cross");
  HIBYTE(word_25F93B6) = 22;
  byte_25F93CF = 14;
  strcpy(byte_25F93B8, "Continue_Cross");
  byte_25F93E7 = 5;
  strcpy(byte_25F93D0, "Cross");
  byte_25F93FF = 19;
  strcpy(byte_25F93E8, "Cross_Street_Spoken");
  byte_25F9417 = 17;
  strcpy(byte_25F9400, "Cross_Road_Spoken");
  byte_25F942F = 20;
  strcpy(byte_25F9418, "Use_Crosswalk_Spoken");
  byte_25F9447 = 15;
  strcpy(byte_25F9430, "Distance_Spoken");
  byte_25F945F = 19;
  strcpy(byte_25F9448, "Distance_And_Spoken");
  byte_25F9477 = 21;
  strcpy(byte_25F9460, "Continue_Stage_Spoken");
  byte_25F948F = 13;
  qmemcpy(&qword_25F9478, "ContinueStage", 13);
  int v5 = SHIBYTE(qword_25F9080);
  if (qword_25F9080 >= 0) {
    size_t v6 = HIBYTE(qword_25F9080);
  }
  else {
    size_t v6 = unk_25F9078;
  }
  unint64_t v7 = v6 + 13;
  byte_25F9485 = 0;
  if (v6 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v7 >= 0x17)
  {
    uint64_t v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v9 = v7 | 7;
    }
    uint64_t v10 = v9 + 1;
    unint64_t v11 = (char *)operator new(v9 + 1);
    qword_25F9498 = v6 + 13;
    unk_25F94A0 = v10 | 0x8000000000000000;
    qword_25F9490 = (uint64_t)v11;
    qmemcpy(v11, "ContinueStage", 13);
    unint64_t v8 = v11 + 13;
  }
  else
  {
    BYTE1(qword_25F9498) = 0;
    WORD1(qword_25F9498) = 0;
    HIDWORD(qword_25F9498) = 0;
    unk_25F94A0 = 0;
    byte_25F94A7 = v6 + 13;
    strcpy((char *)&qword_25F9490, "Continue");
    unint64_t v8 = (char *)&qword_25F9498 + 5;
    if (!v6) {
      goto LABEL_19;
    }
  }
  if (v5 >= 0) {
    uint64_t v12 = &qword_25F9070;
  }
  else {
    uint64_t v12 = (uint64_t *)qword_25F9070;
  }
  memmove(v8, v12, v6);
LABEL_19:
  v8[v6] = 0;
  int v13 = byte_25F8CC7;
  if (byte_25F8CC7 >= 0) {
    size_t v14 = byte_25F8CC7;
  }
  else {
    size_t v14 = qword_25F8CB8;
  }
  unint64_t v15 = v14 + 13;
  if (v14 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v15 >= 0x17)
  {
    uint64_t v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v17 = v15 | 7;
    }
    uint64_t v18 = v17 + 1;
    long long v19 = operator new(v17 + 1);
    __dst.__r_.__value_.__l.__size_ = v14 + 13;
    __dst.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
    *long long v19 = qword_25F9478;
    *(void *)((char *)v19 + 5) = *(uint64_t *)((char *)&qword_25F9478 + 5);
    uint64_t v16 = (char *)v19 + 13;
  }
  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 5) = *(uint64_t *)((char *)&qword_25F9478 + 5);
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v14 + 13;
    __dst.__r_.__value_.__r.__words[0] = qword_25F9478;
    uint64_t v16 = &__dst.__r_.__value_.__s.__data_[13];
    if (!v14) {
      goto LABEL_33;
    }
  }
  if (v13 >= 0) {
    uint64_t v20 = &qword_25F8CB0;
  }
  else {
    uint64_t v20 = (uint64_t *)qword_25F8CB0;
  }
  memmove(v16, v20, v14);
LABEL_33:
  v16[v14] = 0;
  if (v5 >= 0) {
    double v21 = (const std::string::value_type *)&qword_25F9070;
  }
  else {
    double v21 = (const std::string::value_type *)qword_25F9070;
  }
  uint64_t v22 = std::string::append(&__dst, v21, v6);
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  qword_25F94B8 = v22->__r_.__value_.__r.__words[2];
  xmmword_25F94A8 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  byte_25F94D7 = 5;
  strcpy((char *)&dword_25F94C0, "Merge");
  qword_25F94D8 = (uint64_t)operator new(0x20uLL);
  v270[0] = xmmword_20B8E90;
  unk_25F94E0 = xmmword_20B8E90;
  strcpy((char *)qword_25F94D8, "Continue_Freeway_Spoken_Primary");
  byte_25F9507 = 8;
  strcpy((char *)&qword_25F94F0, "Starting");
  byte_25F951F = 14;
  strcpy((char *)&qword_25F9508, "Starting_Route");
  byte_25F9537 = 14;
  strcpy((char *)&qword_25F9520, "Resuming_Route");
  byte_25F954F = 16;
  strcpy((char *)&xmmword_25F9538, "Continuing_Route");
  byte_25F9567 = 9;
  word_25F9558 = 112;
  qword_25F9550 = *(void *)&v265[32];
  strcpy(&byte_25F957F, "\nEnding");
  strcpy((char *)&word_25F9570, "op");
  qword_25F9568 = v266;
  byte_25F9597 = 6;
  strcpy((char *)&qword_25F9598, "_Destination");
  byte_25F95AF = 12;
  byte_25F95C7 = 15;
  strcpy((char *)&qword_25F95B0, "_At_Destination");
  std::operator+<char>();
  qword_25F95E0 = (uint64_t)operator new(0x20uLL);
  unk_25F95E8 = v283;
  strcpy((char *)qword_25F95E0, "Spoken_Ending_At_Parking");
  qword_25F95F8 = (uint64_t)operator new(0x20uLL);
  long long v273 = xmmword_20B9800;
  xmmword_25F9600 = xmmword_20B9800;
  strcpy((char *)qword_25F95F8, "Spoken_Pre_Arrival_Destination");
  strcpy((char *)&xmmword_25F9610, "Sign_Ending_At_Parking");
  HIBYTE(word_25F9626) = 22;
  byte_25F963F = 4;
  strcpy((char *)&dword_25F9628, "Home");
  byte_25F9657 = 4;
  strcpy((char *)&dword_25F9640, "Work");
  byte_25F966F = 8;
  strcpy((char *)&qword_25F9658, "Business");
  byte_25F9687 = 4;
  strcpy((char *)&dword_25F9670, "Name");
  byte_25F969F = 13;
  strcpy((char *)&qword_25F9688, "Other_Contact");
  byte_25F96B7 = 11;
  strcpy((char *)&qword_25F96A0, "ContactHome");
  byte_25F96CF = 11;
  *(_DWORD *)((char *)&qword_25F96B8 + 7) = 1802661719;
  byte_25F96E7 = 7;
  *(int *)((char *)&dword_25F96D0 + 3) = 1936942450;
  dword_25F96D0 = 1919181889;
  strcpy((char *)&xmmword_25F96E8, "Discoverability_Prompt");
  HIBYTE(word_25F96FE) = 22;
  byte_25F9717 = 6;
  dword_25F9700 = 1634878303;
  word_25F9704 = 26739;
  byte_25F972F = 8;
  qword_25F9718 = 0x697269535F6F4E5FLL;
  byte_25F9747 = 9;
  strcpy((char *)&qword_25F9730, "_CityName");
  byte_25F975F = 8;
  qword_25F9748 = 0x636972656E65475FLL;
  int v24 = byte_25F9507;
  if (byte_25F9507 >= 0) {
    size_t v25 = byte_25F9507;
  }
  else {
    size_t v25 = qword_25F94F8;
  }
  LODWORD(v272) = byte_25F8847;
  if (byte_25F8847 >= 0) {
    size_t v26 = byte_25F8847;
  }
  else {
    size_t v26 = unk_25F8838;
  }
  qword_25F96B8 = *(void *)"ContactWork";
  byte_25F96C3 = 0;
  byte_25F96D7 = 0;
  byte_25F9706 = 0;
  byte_25F9720 = 0;
  byte_25F9750 = 0;
  unint64_t v27 = v26 + v25;
  if (v26 + v25 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  *(void *)long long v265 = *(void *)"ContactWork";
  *(void *)&v265[16] = *(void *)"ContactHome";
  *(void *)&v265[32] = *(void *)"_Contact";
  *(void *)&long long v266 = *(void *)"Other_Contact";
  if (v27 <= 0x16)
  {
    uint64_t v28 = &qword_25F9760;
    qword_25F9768 = 0;
    unk_25F9770 = 0;
    qword_25F9760 = 0;
    byte_25F9777 = v26 + v25;
    if (!v25) {
      goto LABEL_51;
    }
    goto LABEL_47;
  }
  uint64_t v91 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v27 | 7) != 0x17) {
    uint64_t v91 = v27 | 7;
  }
  uint64_t v92 = v91 + 1;
  uint64_t v28 = (uint64_t *)operator new(v91 + 1);
  qword_25F9768 = v26 + v25;
  unk_25F9770 = v92 | 0x8000000000000000;
  qword_25F9760 = (uint64_t)v28;
  if (v25)
  {
LABEL_47:
    if (v24 >= 0) {
      unint64_t v29 = &qword_25F94F0;
    }
    else {
      unint64_t v29 = (uint64_t *)qword_25F94F0;
    }
    memmove(v28, v29, v25);
  }
LABEL_51:
  uint64_t v30 = (char *)v28 + v25;
  if (v26)
  {
    if ((int)v272 >= 0) {
      uint64_t v31 = &qword_25F8830;
    }
    else {
      uint64_t v31 = (uint64_t *)qword_25F8830;
    }
    memmove(v30, v31, v26);
  }
  v30[v26] = 0;
  int v32 = byte_25F95AF;
  if (byte_25F95AF >= 0) {
    size_t v33 = byte_25F95AF;
  }
  else {
    size_t v33 = qword_25F95A0;
  }
  unint64_t v34 = v33 + v25;
  if (v33 + v25 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v34 <= 0x16)
  {
    uint64_t v35 = &qword_25F9778;
    qword_25F9780 = 0;
    unk_25F9788 = 0;
    qword_25F9778 = 0;
    byte_25F978F = v33 + v25;
    if (!v25) {
      goto LABEL_66;
    }
    goto LABEL_62;
  }
  uint64_t v93 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v34 | 7) != 0x17) {
    uint64_t v93 = v34 | 7;
  }
  uint64_t v94 = v93 + 1;
  uint64_t v35 = (uint64_t *)operator new(v93 + 1);
  qword_25F9780 = v33 + v25;
  unk_25F9788 = v94 | 0x8000000000000000;
  qword_25F9778 = (uint64_t)v35;
  if (v25)
  {
LABEL_62:
    if (v24 >= 0) {
      unint64_t v36 = &qword_25F94F0;
    }
    else {
      unint64_t v36 = (uint64_t *)qword_25F94F0;
    }
    memmove(v35, v36, v25);
  }
LABEL_66:
  unsigned int v37 = (char *)v35 + v25;
  if (v33)
  {
    if (v32 >= 0) {
      uint64_t v38 = &qword_25F9598;
    }
    else {
      uint64_t v38 = (uint64_t *)qword_25F9598;
    }
    memmove(v37, v38, v33);
  }
  v37[v33] = 0;
  qword_25F9790 = (uint64_t)operator new(0x19uLL);
  unk_25F9798 = v282;
  strcpy((char *)qword_25F9790, "{ChargeStationCityName}");
  if (v34 < 0x17)
  {
    unint64_t v39 = &qword_25F97A8;
    qword_25F97B0 = 0;
    unk_25F97B8 = 0;
    qword_25F97A8 = 0;
    byte_25F97BF = v33 + v25;
    if (!v25) {
      goto LABEL_77;
    }
    goto LABEL_73;
  }
  uint64_t v95 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v34 | 7) != 0x17) {
    uint64_t v95 = v34 | 7;
  }
  uint64_t v96 = v95 + 1;
  unint64_t v39 = (uint64_t *)operator new(v95 + 1);
  qword_25F97B0 = v33 + v25;
  unk_25F97B8 = v96 | 0x8000000000000000;
  qword_25F97A8 = (uint64_t)v39;
  if (v25)
  {
LABEL_73:
    if (v24 >= 0) {
      uint64_t v40 = &qword_25F94F0;
    }
    else {
      uint64_t v40 = (uint64_t *)qword_25F94F0;
    }
    memmove(v39, v40, v25);
  }
LABEL_77:
  uint64_t v41 = (char *)v39 + v25;
  if (v33)
  {
    if (v32 >= 0) {
      long long v42 = &qword_25F9598;
    }
    else {
      long long v42 = (uint64_t *)qword_25F9598;
    }
    memmove(v41, v42, v33);
  }
  v41[v33] = 0;
  strcpy((char *)&xmmword_25F97C0, "{NewBatteryPercentage}");
  HIBYTE(word_25F97D6) = 22;
  qword_25F97D8 = (uint64_t)operator new(0x20uLL);
  xmmword_25F97E0 = v276;
  strcpy((char *)qword_25F97D8, "{OriginalBatteryPercentage}");
  byte_25F9807 = 19;
  strcpy((char *)&xmmword_25F97F0, "_Arrival_Percentage");
  int v43 = byte_25F9597;
  if (byte_25F9597 >= 0) {
    size_t v44 = byte_25F9597;
  }
  else {
    size_t v44 = qword_25F9588;
  }
  unint64_t v45 = v44 + v26;
  if (v44 + v26 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v45 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v44 + v26;
    if (!v44) {
      goto LABEL_92;
    }
    goto LABEL_88;
  }
  uint64_t v97 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v45 | 7) != 0x17) {
    uint64_t v97 = v45 | 7;
  }
  uint64_t v98 = v97 + 1;
  p_dst = (char *)operator new(v97 + 1);
  __dst.__r_.__value_.__l.__size_ = v44 + v26;
  __dst.__r_.__value_.__r.__words[2] = v98 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v44)
  {
LABEL_88:
    if (v43 >= 0) {
      uint64_t v47 = &qword_25F9580;
    }
    else {
      uint64_t v47 = (uint64_t *)qword_25F9580;
    }
    memmove(p_dst, v47, v44);
  }
LABEL_92:
  uint64_t v48 = &p_dst[v44];
  if (v26)
  {
    if ((int)v272 >= 0) {
      long long v49 = &qword_25F8830;
    }
    else {
      long long v49 = (uint64_t *)qword_25F8830;
    }
    memmove(v48, v49, v26);
  }
  v48[v26] = 0;
  long long v50 = std::string::append(&__dst, "_Percentage");
  long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  qword_25F9818 = v50->__r_.__value_.__r.__words[2];
  xmmword_25F9808 = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v52 = byte_25F9597;
  if (byte_25F9597 >= 0) {
    size_t v53 = byte_25F9597;
  }
  else {
    size_t v53 = qword_25F9588;
  }
  int v54 = byte_25F8847;
  if (byte_25F8847 >= 0) {
    size_t v55 = byte_25F8847;
  }
  else {
    size_t v55 = unk_25F8838;
  }
  unint64_t v56 = v55 + v53;
  if (v55 + v53 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v56 <= 0x16)
  {
    memset(&v284, 0, sizeof(v284));
    uint64_t v57 = (char *)&v284;
    *((unsigned char *)&v284.__r_.__value_.__s + 23) = v55 + v53;
    if (!v53) {
      goto LABEL_112;
    }
    goto LABEL_108;
  }
  uint64_t v99 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v56 | 7) != 0x17) {
    uint64_t v99 = v56 | 7;
  }
  uint64_t v100 = v99 + 1;
  uint64_t v57 = (char *)operator new(v99 + 1);
  v284.__r_.__value_.__l.__size_ = v55 + v53;
  v284.__r_.__value_.__r.__words[2] = v100 | 0x8000000000000000;
  v284.__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
  if (v53)
  {
LABEL_108:
    if (v52 >= 0) {
      char v58 = &qword_25F9580;
    }
    else {
      char v58 = (uint64_t *)qword_25F9580;
    }
    memmove(v57, v58, v53);
  }
LABEL_112:
  uint64_t v59 = &v57[v53];
  if (v55)
  {
    if (v54 >= 0) {
      BOOL v60 = &qword_25F8830;
    }
    else {
      BOOL v60 = (uint64_t *)qword_25F8830;
    }
    memmove(v59, v60, v55);
  }
  v59[v55] = 0;
  if (byte_25F8877 >= 0) {
    BOOL v61 = (const std::string::value_type *)&qword_25F8860;
  }
  else {
    BOOL v61 = (const std::string::value_type *)qword_25F8860;
  }
  if (byte_25F8877 >= 0) {
    std::string::size_type v62 = byte_25F8877;
  }
  else {
    std::string::size_type v62 = *(void *)&byte_25F8868;
  }
  unint64_t v63 = std::string::append(&v284, v61, v62);
  long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v64;
  v63->__r_.__value_.__l.__size_ = 0;
  v63->__r_.__value_.__r.__words[2] = 0;
  v63->__r_.__value_.__r.__words[0] = 0;
  uint64_t v65 = std::string::append(&__dst, "_Percentage");
  long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
  qword_25F9830 = v65->__r_.__value_.__r.__words[2];
  xmmword_25F9820 = v66;
  v65->__r_.__value_.__l.__size_ = 0;
  v65->__r_.__value_.__r.__words[2] = 0;
  v65->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v284.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_125;
    }
  }
  else if ((SHIBYTE(v284.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_125;
  }
  operator delete(v284.__r_.__value_.__l.__data_);
LABEL_125:
  int v67 = byte_25F9597;
  if (byte_25F9597 >= 0) {
    size_t v68 = byte_25F9597;
  }
  else {
    size_t v68 = qword_25F9588;
  }
  int v69 = byte_25F8847;
  if (byte_25F8847 >= 0) {
    size_t v70 = byte_25F8847;
  }
  else {
    size_t v70 = unk_25F8838;
  }
  unint64_t v71 = v70 + v68;
  if (v70 + v68 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v71 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    char v72 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v70 + v68;
    if (!v68) {
      goto LABEL_138;
    }
    goto LABEL_134;
  }
  uint64_t v101 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v71 | 7) != 0x17) {
    uint64_t v101 = v71 | 7;
  }
  uint64_t v102 = v101 + 1;
  char v72 = (char *)operator new(v101 + 1);
  __dst.__r_.__value_.__l.__size_ = v70 + v68;
  __dst.__r_.__value_.__r.__words[2] = v102 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
  if (v68)
  {
LABEL_134:
    if (v67 >= 0) {
      uint64_t v73 = &qword_25F9580;
    }
    else {
      uint64_t v73 = (uint64_t *)qword_25F9580;
    }
    memmove(v72, v73, v68);
  }
LABEL_138:
  int v74 = &v72[v68];
  if (v70)
  {
    if (v69 >= 0) {
      uint64_t v75 = &qword_25F8830;
    }
    else {
      uint64_t v75 = (uint64_t *)qword_25F8830;
    }
    memmove(v74, v75, v70);
  }
  v74[v70] = 0;
  unint64_t v76 = std::string::append(&__dst, "_Duration");
  long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
  qword_25F9848 = v76->__r_.__value_.__r.__words[2];
  xmmword_25F9838 = v77;
  v76->__r_.__value_.__l.__size_ = 0;
  v76->__r_.__value_.__r.__words[2] = 0;
  v76->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v78 = byte_25F9597;
  if (byte_25F9597 >= 0) {
    size_t v79 = byte_25F9597;
  }
  else {
    size_t v79 = qword_25F9588;
  }
  int v80 = byte_25F8847;
  if (byte_25F8847 >= 0) {
    size_t v81 = byte_25F8847;
  }
  else {
    size_t v81 = unk_25F8838;
  }
  unint64_t v82 = v81 + v79;
  if (v81 + v79 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v82 <= 0x16)
  {
    qword_25F9858 = 0;
    unk_25F9860 = 0;
    qword_25F9850 = 0;
    uint64_t v83 = &qword_25F9850;
    byte_25F9867 = v81 + v79;
    if (!v79) {
      goto LABEL_158;
    }
    goto LABEL_154;
  }
  uint64_t v103 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v82 | 7) != 0x17) {
    uint64_t v103 = v82 | 7;
  }
  uint64_t v104 = v103 + 1;
  uint64_t v83 = (uint64_t *)operator new(v103 + 1);
  qword_25F9858 = v81 + v79;
  unk_25F9860 = v104 | 0x8000000000000000;
  qword_25F9850 = (uint64_t)v83;
  if (v79)
  {
LABEL_154:
    if (v78 >= 0) {
      uint64_t v84 = &qword_25F9580;
    }
    else {
      uint64_t v84 = (uint64_t *)qword_25F9580;
    }
    memmove(v83, v84, v79);
  }
LABEL_158:
  uint64_t v85 = (char *)v83 + v79;
  if (v81)
  {
    if (v80 >= 0) {
      unint64_t v86 = &qword_25F8830;
    }
    else {
      unint64_t v86 = (uint64_t *)qword_25F8830;
    }
    memmove(v85, v86, v81);
  }
  v85[v81] = 0;
  int v87 = byte_25F9867;
  if (byte_25F9867 >= 0) {
    size_t v88 = byte_25F9867;
  }
  else {
    size_t v88 = qword_25F9858;
  }
  unint64_t v89 = v88 + 5;
  if (v88 + 5 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v89 >= 0x17)
  {
    uint64_t v105 = (v89 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v89 | 7) != 0x17) {
      uint64_t v105 = v89 | 7;
    }
    uint64_t v106 = v105 + 1;
    unint64_t v90 = (uint64_t *)operator new(v105 + 1);
    qword_25F9870 = v88 + 5;
    unk_25F9878 = v106 | 0x8000000000000000;
    qword_25F9868 = (uint64_t)v90;
  }
  else
  {
    unint64_t v90 = &qword_25F9868;
    qword_25F9870 = 0;
    unk_25F9878 = 0;
    qword_25F9868 = 0;
    byte_25F987F = v88 + 5;
    if (!v88) {
      goto LABEL_205;
    }
  }
  if (v87 >= 0) {
    uint64_t v107 = &qword_25F9850;
  }
  else {
    uint64_t v107 = (uint64_t *)qword_25F9850;
  }
  memmove(v90, v107, v88);
LABEL_205:
  strcpy((char *)v90 + v88, "_Name");
  int v108 = byte_25F9597;
  if (byte_25F9597 >= 0) {
    size_t v109 = byte_25F9597;
  }
  else {
    size_t v109 = qword_25F9588;
  }
  int v110 = byte_25F8847;
  if (byte_25F8847 >= 0) {
    size_t v111 = byte_25F8847;
  }
  else {
    size_t v111 = unk_25F8838;
  }
  unint64_t v112 = v111 + v109;
  if (v111 + v109 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v112 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    uint64_t v113 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v111 + v109;
    if (!v109) {
      goto LABEL_218;
    }
    goto LABEL_214;
  }
  uint64_t v123 = (v112 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v112 | 7) != 0x17) {
    uint64_t v123 = v112 | 7;
  }
  uint64_t v124 = v123 + 1;
  uint64_t v113 = (char *)operator new(v123 + 1);
  __dst.__r_.__value_.__l.__size_ = v111 + v109;
  __dst.__r_.__value_.__r.__words[2] = v124 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v113;
  if (v109)
  {
LABEL_214:
    if (v108 >= 0) {
      uint64_t v114 = &qword_25F9580;
    }
    else {
      uint64_t v114 = (uint64_t *)qword_25F9580;
    }
    memmove(v113, v114, v109);
  }
LABEL_218:
  uint64_t v115 = &v113[v109];
  if (v111)
  {
    if (v110 >= 0) {
      uint64_t v116 = &qword_25F8830;
    }
    else {
      uint64_t v116 = (uint64_t *)qword_25F8830;
    }
    memmove(v115, v116, v111);
  }
  v115[v111] = 0;
  int v117 = std::string::append(&__dst, "_Connector_Type");
  long long v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
  qword_25F9890 = v117->__r_.__value_.__r.__words[2];
  xmmword_25F9880 = v118;
  v117->__r_.__value_.__l.__size_ = 0;
  v117->__r_.__value_.__r.__words[2] = 0;
  v117->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v119 = SHIBYTE(qword_25F9890);
  if (qword_25F9890 >= 0) {
    size_t v120 = HIBYTE(qword_25F9890);
  }
  else {
    size_t v120 = *((void *)&xmmword_25F9880 + 1);
  }
  unint64_t v121 = v120 + 6;
  if (v120 + 6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v121 >= 0x17)
  {
    uint64_t v125 = (v121 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v121 | 7) != 0x17) {
      uint64_t v125 = v121 | 7;
    }
    uint64_t v126 = v125 + 1;
    int v122 = (uint64_t *)operator new(v125 + 1);
    qword_25F98A0 = v120 + 6;
    unk_25F98A8 = v126 | 0x8000000000000000;
    qword_25F9898 = (uint64_t)v122;
  }
  else
  {
    int v122 = &qword_25F9898;
    qword_25F98A0 = 0;
    unk_25F98A8 = 0;
    qword_25F9898 = 0;
    byte_25F98AF = v120 + 6;
    if (!v120) {
      goto LABEL_243;
    }
  }
  if (v119 >= 0) {
    unint64_t v127 = &xmmword_25F9880;
  }
  else {
    unint64_t v127 = (long long *)xmmword_25F9880;
  }
  memmove(v122, v127, v120);
LABEL_243:
  strcpy((char *)v122 + v120, "_Power");
  int v128 = byte_25F9597;
  if (byte_25F9597 >= 0) {
    size_t v129 = byte_25F9597;
  }
  else {
    size_t v129 = qword_25F9588;
  }
  int v130 = byte_25F8847;
  if (byte_25F8847 >= 0) {
    size_t v131 = byte_25F8847;
  }
  else {
    size_t v131 = unk_25F8838;
  }
  unint64_t v132 = v131 + v129;
  if (v131 + v129 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v132 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    unsigned int v133 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v131 + v129;
    if (!v129) {
      goto LABEL_256;
    }
    goto LABEL_252;
  }
  uint64_t v162 = (v132 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v132 | 7) != 0x17) {
    uint64_t v162 = v132 | 7;
  }
  uint64_t v163 = v162 + 1;
  unsigned int v133 = (char *)operator new(v162 + 1);
  __dst.__r_.__value_.__l.__size_ = v131 + v129;
  __dst.__r_.__value_.__r.__words[2] = v163 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v133;
  if (v129)
  {
LABEL_252:
    if (v128 >= 0) {
      uint64_t v134 = &qword_25F9580;
    }
    else {
      uint64_t v134 = (uint64_t *)qword_25F9580;
    }
    memmove(v133, v134, v129);
  }
LABEL_256:
  uint64_t v135 = &v133[v129];
  if (v131)
  {
    if (v130 >= 0) {
      uint64_t v136 = &qword_25F8830;
    }
    else {
      uint64_t v136 = (uint64_t *)qword_25F8830;
    }
    memmove(v135, v136, v131);
  }
  v135[v131] = 0;
  if (byte_25F900F >= 0) {
    uint64_t v137 = (const std::string::value_type *)&qword_25F8FF8;
  }
  else {
    uint64_t v137 = (const std::string::value_type *)qword_25F8FF8;
  }
  if (byte_25F900F >= 0) {
    std::string::size_type v138 = byte_25F900F;
  }
  else {
    std::string::size_type v138 = unk_25F9000;
  }
  unsigned int v139 = std::string::append(&__dst, v137, v138);
  long long v140 = *(_OWORD *)&v139->__r_.__value_.__l.__data_;
  qword_25F98C0 = v139->__r_.__value_.__r.__words[2];
  xmmword_25F98B0 = v140;
  v139->__r_.__value_.__l.__size_ = 0;
  v139->__r_.__value_.__r.__words[2] = 0;
  v139->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v141 = byte_25F9597;
  if (byte_25F9597 >= 0) {
    size_t v142 = byte_25F9597;
  }
  else {
    size_t v142 = qword_25F9588;
  }
  int v143 = byte_25F8847;
  if (byte_25F8847 >= 0) {
    size_t v144 = byte_25F8847;
  }
  else {
    size_t v144 = unk_25F8838;
  }
  unint64_t v145 = v144 + v142;
  if (v144 + v142 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v145 <= 0x16)
  {
    memset(&v284, 0, sizeof(v284));
    unint64_t v146 = (char *)&v284;
    *((unsigned char *)&v284.__r_.__value_.__s + 23) = v144 + v142;
    if (!v142) {
      goto LABEL_282;
    }
    goto LABEL_278;
  }
  uint64_t v164 = (v145 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v145 | 7) != 0x17) {
    uint64_t v164 = v145 | 7;
  }
  uint64_t v165 = v164 + 1;
  unint64_t v146 = (char *)operator new(v164 + 1);
  v284.__r_.__value_.__l.__size_ = v144 + v142;
  v284.__r_.__value_.__r.__words[2] = v165 | 0x8000000000000000;
  v284.__r_.__value_.__r.__words[0] = (std::string::size_type)v146;
  if (v142)
  {
LABEL_278:
    if (v141 >= 0) {
      uint64_t v147 = &qword_25F9580;
    }
    else {
      uint64_t v147 = (uint64_t *)qword_25F9580;
    }
    memmove(v146, v147, v142);
  }
LABEL_282:
  uint64_t v148 = &v146[v142];
  if (v144)
  {
    if (v143 >= 0) {
      uint64_t v149 = &qword_25F8830;
    }
    else {
      uint64_t v149 = (uint64_t *)qword_25F8830;
    }
    memmove(v148, v149, v144);
  }
  v148[v144] = 0;
  if (byte_25F8877 >= 0) {
    uint64_t v150 = (const std::string::value_type *)&qword_25F8860;
  }
  else {
    uint64_t v150 = (const std::string::value_type *)qword_25F8860;
  }
  if (byte_25F8877 >= 0) {
    std::string::size_type v151 = byte_25F8877;
  }
  else {
    std::string::size_type v151 = *(void *)&byte_25F8868;
  }
  double v152 = std::string::append(&v284, v150, v151);
  long long v153 = *(_OWORD *)&v152->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v152->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v153;
  v152->__r_.__value_.__l.__size_ = 0;
  v152->__r_.__value_.__r.__words[2] = 0;
  v152->__r_.__value_.__r.__words[0] = 0;
  if (byte_25F900F >= 0) {
    uint64_t v154 = (const std::string::value_type *)&qword_25F8FF8;
  }
  else {
    uint64_t v154 = (const std::string::value_type *)qword_25F8FF8;
  }
  if (byte_25F900F >= 0) {
    std::string::size_type v155 = byte_25F900F;
  }
  else {
    std::string::size_type v155 = unk_25F9000;
  }
  unint64_t v156 = std::string::append(&__dst, v154, v155);
  long long v157 = *(_OWORD *)&v156->__r_.__value_.__l.__data_;
  qword_25F98D8 = v156->__r_.__value_.__r.__words[2];
  xmmword_25F98C8 = v157;
  v156->__r_.__value_.__l.__size_ = 0;
  v156->__r_.__value_.__r.__words[2] = 0;
  v156->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v284.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_301;
    }
  }
  else if ((SHIBYTE(v284.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_301;
  }
  operator delete(v284.__r_.__value_.__l.__data_);
LABEL_301:
  byte_25F98F7 = 16;
  strcpy((char *)&xmmword_25F98E0, "Use_NACS_Adapter");
  byte_25F990F = 16;
  strcpy(byte_25F98F8, "Start_Route_Sign");
  qword_25F9910 = (uint64_t)operator new(0x20uLL);
  unk_25F9918 = v279;
  strcpy((char *)qword_25F9910, "Start_Route_Spoken_Primary");
  int v158 = byte_25F7FA7;
  if (byte_25F7FA7 >= 0) {
    size_t v159 = byte_25F7FA7;
  }
  else {
    size_t v159 = qword_25F7F98;
  }
  unint64_t v160 = v159 + 27;
  if (v159 + 27 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v160 <= 0x16)
  {
    int v161 = &qword_25F9928;
    qword_25F9930 = 0;
    unk_25F9938 = 0;
    qword_25F9928 = 0;
    byte_25F993F = v159 + 27;
LABEL_318:
    if (v158 >= 0) {
      long long v168 = &qword_25F7F90;
    }
    else {
      long long v168 = (uint64_t *)qword_25F7F90;
    }
    memmove(v161, v168, v159);
    goto LABEL_322;
  }
  uint64_t v166 = (v160 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v160 | 7) != 0x17) {
    uint64_t v166 = v160 | 7;
  }
  uint64_t v167 = v166 + 1;
  int v161 = (uint64_t *)operator new(v166 + 1);
  qword_25F9930 = v159 + 27;
  unk_25F9938 = v167 | 0x8000000000000000;
  qword_25F9928 = (uint64_t)v161;
  if (v159) {
    goto LABEL_318;
  }
LABEL_322:
  strcpy((char *)v161 + v159, "Turn_Around_To_Route_Spoken");
  strcpy(&byte_25F9957, "\t_Two_Lanes");
  strcpy((char *)&qword_25F9940, "_One_Lane");
  strcpy(&byte_25F996F, "\n_Three_Lanes");
  byte_25F9987 = 12;
  byte_25F999F = 11;
  strcpy((char *)&qword_25F9988, "_Four_Lanes");
  byte_25F99B7 = 11;
  strcpy((char *)&qword_25F99A0, "_Five_Lanes");
  strcpy(&byte_25F99CF, "\n_Seven_Lanes");
  strcpy((char *)&qword_25F99B8, "_Six_Lanes");
  byte_25F99E7 = 12;
  byte_25F99FF = 12;
  strcpy((char *)&qword_25F99E8, "_Eight_Lanes");
  byte_25F9A17 = 12;
  strcpy((char *)&qword_25F9A00, "_Second_Lane");
  byte_25F9A2F = 11;
  strcpy((char *)&qword_25F9A18, "_Third_Lane");
  byte_25F9A47 = 19;
  long long v272 = *(_OWORD *)"_Second_Third_Lanes";
  strcpy((char *)&xmmword_25F9A30, "_Second_Third_Lanes");
  byte_25F9A5F = 4;
  strcpy((char *)&dword_25F9A48, "Left");
  byte_25F9A77 = 5;
  byte_25F9A64 = 116;
  dword_25F9A60 = 1751607634;
  byte_25F9A65 = 0;
  byte_25F9A8F = 6;
  strcpy((char *)&dword_25F9A78, "Middle");
  BYTE1(qword_25F9AA0) = 0;
  WORD1(qword_25F9AA0) = 0;
  HIDWORD(qword_25F9AA0) = 0x10000000;
  strcpy((char *)dword_25F9A90, "Left_Second_Lane");
  BYTE1(qword_25F9AB8) = 0;
  WORD1(qword_25F9AB8) = 0;
  HIDWORD(qword_25F9AB8) = 285212672;
  strcpy((char *)&dword_25F9AA8, "Right_Second_Lan");
  qword_25F9AD0 = 0xF00000000000000;
  strcpy((char *)&dword_25F9AC0, "Left_Third_Lane");
  qword_25F9AE8 = 0x1000000000000000;
  byte_25F9ADC = 116;
  dword_25F9AD8 = 1751607634;
  dword_25F9AE4 = 1701732684;
  unk_25F9ADD = *(void *)"_Third_Lane";
  long long v169 = (char *)operator new(0x19uLL);
  qword_25F9AF0 = (uint64_t)v169;
  unk_25F9AF8 = v282;
  *(_DWORD *)long long v169 = 1952867660;
  strcpy(v169 + 19, "anes");
  *(_OWORD *)(v169 + 4) = v272;
  unsigned int v170 = (char *)operator new(0x20uLL);
  qword_25F9B08 = (uint64_t)v170;
  xmmword_25F9B10 = v283;
  *(_DWORD *)unsigned int v170 = 1751607634;
  v170[4] = 116;
  strcpy(v170 + 20, "anes");
  *(_OWORD *)(v170 + 5) = v272;
  byte_25F9B37 = 5;
  strcpy((char *)&dword_25F9B20, "_Stay");
  byte_25F9B4F = 13;
  strcpy((char *)&qword_25F9B38, "Continue_Sign");
  byte_25F9B67 = 8;
  strcpy((char *)&qword_25F9B50, "Continue");
  int v171 = byte_25F9027;
  if (byte_25F9027 >= 0) {
    size_t v172 = byte_25F9027;
  }
  else {
    size_t v172 = qword_25F9018;
  }
  unint64_t v173 = v172 + 8;
  if (v172 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v173 >= 0x17)
  {
    uint64_t v175 = (v173 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v173 | 7) != 0x17) {
      uint64_t v175 = v173 | 7;
    }
    uint64_t v176 = v175 + 1;
    uint64_t v177 = operator new(v175 + 1);
    qword_25F9B70 = v172 + 8;
    qword_25F9B78 = v176 | 0x8000000000000000;
    qword_25F9B68 = (uint64_t)v177;
    *uint64_t v177 = 0x65756E69746E6F43;
    char v174 = v177 + 1;
  }
  else
  {
    qword_25F9B78 = 0;
    HIBYTE(qword_25F9B78) = v172 + 8;
    qword_25F9B68 = 0x65756E69746E6F43;
    qword_25F9B70 = 0;
    char v174 = &qword_25F9B70;
    if (!v172) {
      goto LABEL_336;
    }
  }
  if (v171 >= 0) {
    double v178 = &qword_25F9010;
  }
  else {
    double v178 = (uint64_t *)qword_25F9010;
  }
  memmove(v174, v178, v172);
LABEL_336:
  *((unsigned char *)v174 + v172) = 0;
  int v179 = SHIBYTE(qword_25F9080);
  if (qword_25F9080 >= 0) {
    size_t v180 = HIBYTE(qword_25F9080);
  }
  else {
    size_t v180 = unk_25F9078;
  }
  unint64_t v181 = v180 + 8;
  if (v180 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v181 >= 0x17)
  {
    uint64_t v183 = (v181 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v181 | 7) != 0x17) {
      uint64_t v183 = v181 | 7;
    }
    uint64_t v184 = v183 + 1;
    uint64_t v185 = operator new(v183 + 1);
    qword_25F9B88 = v180 + 8;
    qword_25F9B90 = v184 | 0x8000000000000000;
    qword_25F9B80 = (uint64_t)v185;
    *uint64_t v185 = qword_25F9B50;
    size_t v182 = v185 + 1;
  }
  else
  {
    qword_25F9B90 = 0;
    HIBYTE(qword_25F9B90) = v180 + 8;
    qword_25F9B80 = qword_25F9B50;
    qword_25F9B88 = 0;
    size_t v182 = &qword_25F9B88;
    if (!v180) {
      goto LABEL_350;
    }
  }
  if (v179 >= 0) {
    uint64_t v186 = &qword_25F9070;
  }
  else {
    uint64_t v186 = (uint64_t *)qword_25F9070;
  }
  memmove(v182, v186, v180);
LABEL_350:
  *((unsigned char *)v182 + v180) = 0;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 1;
  LOWORD(__dst.__r_.__value_.__l.__data_) = 83;
  v286[23] = 2;
  strcpy(v286, "SW");
  v288[7] = 1;
  LOWORD(v287[0]) = 87;
  HIBYTE(v289) = 2;
  strcpy(&v288[8], "NW");
  HIBYTE(v291) = 1;
  LOWORD(__p[0]) = 78;
  HIBYTE(v293) = 2;
  strcpy((char *)&v292, "NE");
  HIBYTE(v295) = 1;
  LOWORD(v294) = 69;
  HIBYTE(v297) = 2;
  strcpy((char *)&v296, "SE");
  sub_4BDC0C(qword_25F9B98, (uint64_t)&__dst, 8uLL);
  if (SHIBYTE(v297) < 0)
  {
    operator delete((void *)v296);
    if ((SHIBYTE(v295) & 0x80000000) == 0)
    {
LABEL_352:
      if ((SHIBYTE(v293) & 0x80000000) == 0) {
        goto LABEL_353;
      }
      goto LABEL_391;
    }
  }
  else if ((SHIBYTE(v295) & 0x80000000) == 0)
  {
    goto LABEL_352;
  }
  operator delete((void *)v294);
  if ((SHIBYTE(v293) & 0x80000000) == 0)
  {
LABEL_353:
    if ((SHIBYTE(v291) & 0x80000000) == 0) {
      goto LABEL_354;
    }
    goto LABEL_392;
  }
LABEL_391:
  operator delete((void *)v292);
  if ((SHIBYTE(v291) & 0x80000000) == 0)
  {
LABEL_354:
    if ((SHIBYTE(v289) & 0x80000000) == 0) {
      goto LABEL_355;
    }
    goto LABEL_393;
  }
LABEL_392:
  operator delete(__p[0]);
  if ((SHIBYTE(v289) & 0x80000000) == 0)
  {
LABEL_355:
    if ((v288[7] & 0x80000000) == 0) {
      goto LABEL_356;
    }
    goto LABEL_394;
  }
LABEL_393:
  operator delete(*(void **)&v288[8]);
  if ((v288[7] & 0x80000000) == 0)
  {
LABEL_356:
    if ((v286[23] & 0x80000000) == 0) {
      goto LABEL_357;
    }
LABEL_395:
    operator delete(*(void **)v286);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_358;
    }
    goto LABEL_396;
  }
LABEL_394:
  operator delete(v287[0]);
  if ((v286[23] & 0x80000000) != 0) {
    goto LABEL_395;
  }
LABEL_357:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_358;
  }
LABEL_396:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_358:
  byte_25F9BC7 = 13;
  strcpy((char *)&qword_25F9BB0, "{instruction}");
  byte_25F9BDF = 20;
  strcpy(byte_25F9BC8, "{primaryInstruction}");
  strcpy((char *)&xmmword_25F9BE0, "{secondaryInstruction}");
  HIBYTE(word_25F9BF6) = 22;
  qword_25F9BF8 = (uint64_t)operator new(0x20uLL);
  unk_25F9C00 = v281;
  strcpy((char *)qword_25F9BF8, "{andSecondaryInstruction}");
  qword_25F9C10 = (uint64_t)operator new(0x20uLL);
  unk_25F9C18 = v283;
  strcpy((char *)qword_25F9C10, "{toSecondaryInstruction}");
  byte_25F9C3F = 21;
  strcpy(byte_25F9C28, "{continueInstruction}");
  qword_25F9C40 = (uint64_t)operator new(0x20uLL);
  unk_25F9C48 = v279;
  strcpy((char *)qword_25F9C40, "{thenSecondaryInstruction}");
  byte_25F9C6F = 14;
  strcpy((char *)&qword_25F9C58, "{instruction1}");
  byte_25F9C87 = 14;
  strcpy((char *)&qword_25F9C70, "{instruction2}");
  strcpy(&byte_25F9C9F, "\n{nextDistance}");
  strcpy((char *)&qword_25F9C88, "{distance}");
  byte_25F9CB7 = 14;
  byte_25F9CCF = 16;
  strcpy(byte_25F9CB8, "{valid_distance}");
  strcpy(&byte_25F9CE7, "\n{valid_distance}");
  strcpy((char *)&qword_25F9CD0, "{distance}");
  byte_25F9CFF = 16;
  byte_25F9D17 = 15;
  strcpy((char *)&qword_25F9D00, "{ClimbDistance}");
  byte_25F9D2F = 17;
  strcpy(byte_25F9D18, "{DescentDistance}");
  byte_25F9D47 = 13;
  strcpy((char *)&qword_25F9D30, "{nonBrkSpace}");
  byte_25F9D5F = 9;
  strcpy((char *)&qword_25F9D48, "{newLine}");
  byte_25F9D77 = 6;
  word_25F9D64 = -24382;
  dword_25F9D60 = -1211981630;
  byte_25F9D66 = 0;
  byte_25F9D8F = 2;
  word_25F9D78 = -24382;
  byte_25F9D7A = 0;
  byte_25F9DA7 = 1;
  word_25F9D90 = 10;
  byte_25F9DBF = 1;
  word_25F9DA8 = 32;
  byte_25F9DD7 = 2;
  strcpy((char *)&word_25F9DC0, "\n\n");
  strcpy(&byte_25F9DEF, "\t{TowardShield1}");
  strcpy((char *)&qword_25F9DD8, "{Shield1}");
  byte_25F9E07 = 15;
  strcpy(&byte_25F9E1F, "\t{TowardShield2}");
  strcpy((char *)&qword_25F9E08, "{Shield2}");
  byte_25F9E37 = 15;
  byte_25F9E4F = 12;
  strcpy((char *)&qword_25F9E38, "{Direction1}");
  byte_25F9E67 = 12;
  strcpy((char *)&qword_25F9E50, "{Direction2}");
  byte_25F9E7F = 18;
  strcpy(byte_25F9E68, "{TowardDirection1}");
  byte_25F9E97 = 18;
  strcpy((char *)&xmmword_25F9E80, "{TowardDirection2}");
  byte_25F9EAF = 7;
  strcpy((char *)&dword_25F9E98, "{Icon1}");
  byte_25F9EC7 = 7;
  strcpy((char *)&dword_25F9EB0, "{Icon2}");
  byte_25F9EC8[23] = 14;
  strcpy(byte_25F9EC8, "{Intersection}");
  byte_25F9EF7 = 6;
  strcpy((char *)&xmmword_25F9EE0, "{Road}");
  byte_25F9F0F = 7;
  strcpy((char *)&xmmword_25F9EF8, "{Road1}");
  byte_25F9F27 = 7;
  strcpy((char *)&xmmword_25F9F10, "{Road2}");
  strcpy(&byte_25F9F3F, "\n{Freeway}");
  strcpy((char *)&xmmword_25F9F28, "{Elevator}");
  strcpy(&byte_25F9F57, "\t{Ferry}");
  byte_25F9F6F = 7;
  byte_25F9F87 = 13;
  strcpy((char *)&xmmword_25F9F70, "{ShuttleName}");
  byte_25F9F9F = 11;
  strcpy((char *)&xmmword_25F9F88, "{Signpost1}");
  byte_25F9FB7 = 11;
  strcpy((char *)&xmmword_25F9FA0, "{Signpost2}");
  byte_25F9FCF = 12;
  strcpy((char *)&xmmword_25F9FB8, "{ExitNumber}");
  strcpy(&byte_25F9FE7, "\t{Name}");
  strcpy((char *)&xmmword_25F9FD0, "{Address}");
  byte_25F9FFF = 6;
  byte_25FA017 = 11;
  strcpy((char *)&xmmword_25FA000, "{PlaceName}");
  byte_25FA02F = 14;
  strcpy((char *)&xmmword_25FA018, "{ElevatorName}");
  byte_25FA047 = 15;
  strcpy((char *)&xmmword_25FA030, "{EscalatorName}");
  byte_25FA05F = 12;
  strcpy((char *)&xmmword_25FA048, "{StairsName}");
  strcpy(&byte_25FA077, "\n{BridgeName}");
  strcpy((char *)&xmmword_25FA060, "{RampName}");
  byte_25FA08F = 12;
  byte_25FA0A7 = 12;
  strcpy((char *)&xmmword_25FA090, "{TunnelName}");
  byte_25FA0BF = 13;
  strcpy((char *)&xmmword_25FA0A8, "{CustomLabel}");
  std::string __dst = *(std::string *)byte_25F9EC8;
  *(_OWORD *)uint64_t v286 = xmmword_25F9EE0;
  *(void *)&v286[16] = unk_25F9EF0;
  *(_OWORD *)long long v287 = xmmword_25F9EF8;
  *(void *)uint64_t v288 = unk_25F9F08;
  *(_OWORD *)&v288[8] = xmmword_25F9F10;
  uint64_t v289 = unk_25F9F20;
  *(_OWORD *)long long __p = xmmword_25F9F28;
  uint64_t v291 = unk_25F9F38;
  uint64_t v293 = unk_25F9F50;
  long long v292 = xmmword_25F9F40;
  long long v294 = xmmword_25F9F58;
  uint64_t v295 = unk_25F9F68;
  uint64_t v297 = unk_25F9F80;
  long long v296 = xmmword_25F9F70;
  long long v298 = xmmword_25F9F88;
  uint64_t v299 = unk_25F9F98;
  uint64_t v301 = unk_25F9FB0;
  long long v300 = xmmword_25F9FA0;
  long long v302 = xmmword_25F9FB8;
  long long v304 = xmmword_25F9FD0;
  uint64_t v303 = unk_25F9FC8;
  uint64_t v305 = unk_25F9FE0;
  long long v306 = xmmword_25F9FE8;
  long long v308 = xmmword_25FA000;
  uint64_t v307 = unk_25F9FF8;
  uint64_t v309 = unk_25FA010;
  long long v310 = xmmword_25FA018;
  long long v312 = xmmword_25FA030;
  uint64_t v311 = unk_25FA028;
  uint64_t v313 = unk_25FA040;
  long long v314 = xmmword_25FA048;
  long long v316 = xmmword_25FA060;
  uint64_t v315 = unk_25FA058;
  uint64_t v317 = unk_25FA070;
  long long v318 = xmmword_25FA078;
  long long v320 = xmmword_25FA090;
  uint64_t v319 = unk_25FA088;
  uint64_t v321 = unk_25FA0A0;
  uint64_t v323 = unk_25FA0B8;
  long long v322 = xmmword_25FA0A8;
  sub_4BDC0C(qword_25FA0C0, (uint64_t)&__dst, 0x15uLL);
  if (SHIBYTE(v323) < 0)
  {
    operator delete((void *)v322);
    if ((SHIBYTE(v321) & 0x80000000) == 0)
    {
LABEL_360:
      if ((SHIBYTE(v319) & 0x80000000) == 0) {
        goto LABEL_361;
      }
      goto LABEL_399;
    }
  }
  else if ((SHIBYTE(v321) & 0x80000000) == 0)
  {
    goto LABEL_360;
  }
  operator delete((void *)v320);
  if ((SHIBYTE(v319) & 0x80000000) == 0)
  {
LABEL_361:
    if ((SHIBYTE(v317) & 0x80000000) == 0) {
      goto LABEL_362;
    }
    goto LABEL_400;
  }
LABEL_399:
  operator delete((void *)v318);
  if ((SHIBYTE(v317) & 0x80000000) == 0)
  {
LABEL_362:
    if ((SHIBYTE(v315) & 0x80000000) == 0) {
      goto LABEL_363;
    }
    goto LABEL_401;
  }
LABEL_400:
  operator delete((void *)v316);
  if ((SHIBYTE(v315) & 0x80000000) == 0)
  {
LABEL_363:
    if ((SHIBYTE(v313) & 0x80000000) == 0) {
      goto LABEL_364;
    }
    goto LABEL_402;
  }
LABEL_401:
  operator delete((void *)v314);
  if ((SHIBYTE(v313) & 0x80000000) == 0)
  {
LABEL_364:
    if ((SHIBYTE(v311) & 0x80000000) == 0) {
      goto LABEL_365;
    }
    goto LABEL_403;
  }
LABEL_402:
  operator delete((void *)v312);
  if ((SHIBYTE(v311) & 0x80000000) == 0)
  {
LABEL_365:
    if ((SHIBYTE(v309) & 0x80000000) == 0) {
      goto LABEL_366;
    }
    goto LABEL_404;
  }
LABEL_403:
  operator delete((void *)v310);
  if ((SHIBYTE(v309) & 0x80000000) == 0)
  {
LABEL_366:
    if ((SHIBYTE(v307) & 0x80000000) == 0) {
      goto LABEL_367;
    }
    goto LABEL_405;
  }
LABEL_404:
  operator delete((void *)v308);
  if ((SHIBYTE(v307) & 0x80000000) == 0)
  {
LABEL_367:
    if ((SHIBYTE(v305) & 0x80000000) == 0) {
      goto LABEL_368;
    }
    goto LABEL_406;
  }
LABEL_405:
  operator delete((void *)v306);
  if ((SHIBYTE(v305) & 0x80000000) == 0)
  {
LABEL_368:
    if ((SHIBYTE(v303) & 0x80000000) == 0) {
      goto LABEL_369;
    }
    goto LABEL_407;
  }
LABEL_406:
  operator delete((void *)v304);
  if ((SHIBYTE(v303) & 0x80000000) == 0)
  {
LABEL_369:
    if ((SHIBYTE(v301) & 0x80000000) == 0) {
      goto LABEL_370;
    }
    goto LABEL_408;
  }
LABEL_407:
  operator delete((void *)v302);
  if ((SHIBYTE(v301) & 0x80000000) == 0)
  {
LABEL_370:
    if ((SHIBYTE(v299) & 0x80000000) == 0) {
      goto LABEL_371;
    }
    goto LABEL_409;
  }
LABEL_408:
  operator delete((void *)v300);
  if ((SHIBYTE(v299) & 0x80000000) == 0)
  {
LABEL_371:
    if ((SHIBYTE(v297) & 0x80000000) == 0) {
      goto LABEL_372;
    }
    goto LABEL_410;
  }
LABEL_409:
  operator delete((void *)v298);
  if ((SHIBYTE(v297) & 0x80000000) == 0)
  {
LABEL_372:
    if ((SHIBYTE(v295) & 0x80000000) == 0) {
      goto LABEL_373;
    }
    goto LABEL_411;
  }
LABEL_410:
  operator delete((void *)v296);
  if ((SHIBYTE(v295) & 0x80000000) == 0)
  {
LABEL_373:
    if ((SHIBYTE(v293) & 0x80000000) == 0) {
      goto LABEL_374;
    }
    goto LABEL_412;
  }
LABEL_411:
  operator delete((void *)v294);
  if ((SHIBYTE(v293) & 0x80000000) == 0)
  {
LABEL_374:
    if ((SHIBYTE(v291) & 0x80000000) == 0) {
      goto LABEL_375;
    }
    goto LABEL_413;
  }
LABEL_412:
  operator delete((void *)v292);
  if ((SHIBYTE(v291) & 0x80000000) == 0)
  {
LABEL_375:
    if ((SHIBYTE(v289) & 0x80000000) == 0) {
      goto LABEL_376;
    }
    goto LABEL_414;
  }
LABEL_413:
  operator delete(__p[0]);
  if ((SHIBYTE(v289) & 0x80000000) == 0)
  {
LABEL_376:
    if ((v288[7] & 0x80000000) == 0) {
      goto LABEL_377;
    }
    goto LABEL_415;
  }
LABEL_414:
  operator delete(*(void **)&v288[8]);
  if ((v288[7] & 0x80000000) == 0)
  {
LABEL_377:
    if ((v286[23] & 0x80000000) == 0) {
      goto LABEL_378;
    }
LABEL_416:
    operator delete(*(void **)v286);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_379;
    }
    goto LABEL_417;
  }
LABEL_415:
  operator delete(v287[0]);
  if ((v286[23] & 0x80000000) != 0) {
    goto LABEL_416;
  }
LABEL_378:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_379;
  }
LABEL_417:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_379:
  qword_25FA0D8 = (uint64_t)operator new(0x19uLL);
  *(_OWORD *)algn_25FA0E0 = v282;
  strcpy((char *)qword_25FA0D8, "From_User_Location_List");
  byte_25FA107 = 20;
  strcpy(&algn_25FA0E0[16], "Origin_Waypoint_List");
  qword_25FA108 = (uint64_t)operator new(0x20uLL);
  unk_25FA110 = v279;
  strcpy((char *)qword_25FA108, "Intermediate_Waypoint_List");
  unk_25FA120 = operator new(0x20uLL);
  unk_25FA128 = v281;
  strcpy(unk_25FA120, "Destination_Waypoint_List");
  byte_25FA14F = 15;
  strcpy(byte_25FA138, "{toDestination}");
  byte_25FA167 = 13;
  strcpy((char *)&xmmword_25FA150, "{Destination}");
  byte_25FA17F = 7;
  strcpy(byte_25FA168, "To_Home");
  byte_25FA197 = 14;
  strcpy(byte_25FA180, "To_ContactHome");
  byte_25FA1AF = 7;
  strcpy(byte_25FA198, "To_Work");
  byte_25FA1C7 = 14;
  strcpy(byte_25FA1B0, "To_ContactWork");
  strcpy(&byte_25FA1DF, "\nTo_Business");
  strcpy(byte_25FA1C8, "To_Address");
  byte_25FA1F7 = 11;
  byte_25FA20F = 16;
  strcpy(byte_25FA1F8, "To_Other_Contact");
  strcpy(&byte_25FA227, "\tTo_ContactSchool");
  strcpy(byte_25FA210, "To_School");
  byte_25FA23F = 16;
  byte_25FA257 = 17;
  strcpy(byte_25FA240, "To_PersonLocation");
  qword_25FA258 = (uint64_t)operator new(0x20uLL);
  unk_25FA260 = v280;
  strcpy((char *)qword_25FA258, "To_ContactCustomLabelAddress");
  byte_25FA287 = 7;
  strcpy((char *)&dword_25FA270, "At_Home");
  byte_25FA29F = 14;
  strcpy((char *)&qword_25FA288, "At_ContactHome");
  byte_25FA2B7 = 7;
  strcpy((char *)&dword_25FA2A0, "At_Work");
  byte_25FA2CF = 14;
  strcpy((char *)&qword_25FA2B8, "At_ContactWork");
  strcpy(&byte_25FA2E7, "\nAt_Business");
  strcpy((char *)&qword_25FA2D0, "At_Address");
  byte_25FA2FF = 11;
  byte_25FA317 = 16;
  strcpy(byte_25FA300, "At_Other_Contact");
  byte_25FA32F = 4;
  strcpy((char *)&dword_25FA318, "Home");
  byte_25FA347 = 11;
  strcpy((char *)&qword_25FA330 + 7, "Home");
  qword_25FA330 = *(void *)&v265[16];
  byte_25FA35F = 4;
  strcpy((char *)&dword_25FA348, "Work");
  byte_25FA377 = 11;
  strcpy((char *)&qword_25FA360 + 7, "Work");
  qword_25FA360 = *(void *)v265;
  byte_25FA38F = 7;
  strcpy((char *)&dword_25FA378, "Address");
  byte_25FA3A7 = 8;
  strcpy((char *)&qword_25FA390, "Business");
  byte_25FA3BF = 13;
  qword_25FA3A8 = v266;
  *(uint64_t *)((char *)&qword_25FA3A8 + 5) = *(void *)&v265[32];
  byte_25FA3B5 = 0;
  byte_25FA3D7 = 6;
  strcpy((char *)&dword_25FA3C0, "School");
  byte_25FA3EF = 13;
  strcpy((char *)&qword_25FA3D8, "ContactSchool");
  byte_25FA407 = 14;
  strcpy((char *)&qword_25FA3F0, "PersonLocation");
  qword_25FA408 = (uint64_t)operator new(0x20uLL);
  xmmword_25FA410 = v281;
  strcpy((char *)qword_25FA408, "ContactCustomLabelAddress");
  if (byte_25FA167 < 0)
  {
    sub_4200(&xmmword_25FA420, (void *)xmmword_25FA150, *((unint64_t *)&xmmword_25FA150 + 1));
  }
  else
  {
    xmmword_25FA420 = xmmword_25FA150;
    qword_25FA430 = unk_25FA160;
  }
  byte_25FA44F = 16;
  strcpy((char *)&xmmword_25FA438, "{PrevExitNumber}");
  byte_25FA467 = 10;
  strcpy((char *)&qword_25FA450, "{PrevRoad}");
  qword_25FA468 = (uint64_t)operator new(0x20uLL);
  unk_25FA470 = v283;
  strcpy((char *)qword_25FA468, "{RouteTotalExpectedTime}");
  byte_25FA497 = 18;
  strcpy(byte_25FA480, "{ChargePercentage}");
  qword_25FA498 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25FA4A0 = v276;
  strcpy((char *)qword_25FA498, "{RemainingChargePercentage}");
  byte_25FA4C7 = 16;
  strcpy(&algn_25FA4A0[16], "{ChargeDuration}");
  byte_25FA4DF = 15;
  strcpy((char *)&qword_25FA4C8, "{ConnectorType}");
  byte_25FA4F7 = 19;
  strcpy(byte_25FA4E0, "{ChargeStationName}");
  byte_25FA50F = 7;
  strcpy((char *)&dword_25FA4F8, "{Power}");
  byte_25FA527 = 13;
  strcpy((char *)&qword_25FA510, "{VehicleName}");
  byte_25FA53F = 18;
  strcpy((char *)&xmmword_25FA528, "{AreaIncidentName}");
  byte_25FA557 = 14;
  strcpy((char *)&qword_25FA540, "{AreaIncident}");
  byte_25FA56F = 16;
  strcpy((char *)&xmmword_25FA558, "{AffectedRegion}");
  byte_25FA587 = 21;
  strcpy(byte_25FA570, "{AreaIncidentWeblink}");
  byte_25FA59F = 20;
  strcpy((char *)&xmmword_25FA588, "{AreaIncidentAgency}");
  byte_25FA5B7 = 11;
  strcpy((char *)&qword_25FA5A0, "{IssueTime}");
  byte_25FA5CF = 12;
  strcpy((char *)&qword_25FA5B8, "{UpdateTime}");
  byte_25FA5E7 = 11;
  strcpy((char *)&qword_25FA5D0, "{IssueDate}");
  byte_25FA5FF = 12;
  strcpy((char *)&qword_25FA5E8, "{UpdateDate}");
  qword_25FA600 = (uint64_t)operator new(0x20uLL);
  unk_25FA608 = v283;
  strcpy((char *)qword_25FA600, "{AreaIncidentDataSource}");
  byte_25FA62F = 13;
  strcpy((char *)&qword_25FA618, "{AreaHectare}");
  byte_25FA647 = 10;
  strcpy((char *)&qword_25FA630, "{AreaAcre}");
  qword_25FA648 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25FA650 = v278;
  strcpy((char *)qword_25FA648, "{WildfirePercentageContained}");
  qword_25FA660 = (uint64_t)operator new(0x28uLL);
  unk_25FA668 = v270[1];
  strcpy((char *)qword_25FA660, "{WildfireExpectedContainmentDate}");
  qword_25FA678 = (uint64_t)operator new(0x20uLL);
  unk_25FA680 = v280;
  strcpy((char *)qword_25FA678, "{ServerRecommendedRouteName}");
  qword_25FA690 = (uint64_t)operator new(0x20uLL);
  unk_25FA698 = v280;
  strcpy((char *)qword_25FA690, "{ServerNonRecommendedRoute1}");
  qword_25FA6A8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25FA6B0 = v280;
  strcpy((char *)qword_25FA6A8, "{ServerNonRecommendedRoute2}");
  byte_25FA6D7 = 12;
  strcpy((char *)&qword_25FA6C0, "{ClientDest}");
  byte_25FA6EF = 6;
  strcpy((char *)&dword_25FA6D8, "{Name}");
  qword_25FA6F0 = (uint64_t)operator new(0x20uLL);
  unk_25FA6F8 = v270[0];
  strcpy((char *)qword_25FA6F0, "ProactiveAlert_FasterRouteTitle");
  qword_25FA708 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25FA710 = v279;
  strcpy((char *)qword_25FA708, "ProactiveAlert_RoadClosure");
  qword_25FA720 = (uint64_t)operator new(0x30uLL);
  unk_25FA728 = v274;
  strcpy((char *)qword_25FA720, "ProactiveAlert_UnusuallyHeavyTrafficOnTwo");
  qword_25FA738 = (uint64_t)operator new(0x28uLL);
  unk_25FA740 = v277;
  strcpy((char *)qword_25FA738, "ProactiveAlert_FasterRouteTitle_to_Home");
  qword_25FA750 = (uint64_t)operator new(0x28uLL);
  unk_25FA758 = v277;
  strcpy((char *)qword_25FA750, "ProactiveAlert_FasterRouteTitle_to_Work");
  qword_25FA768 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25FA770 = v277;
  strcpy((char *)qword_25FA768, "ProactiveAlert_FasterRouteTitle_to_Name");
  qword_25FA780 = (uint64_t)operator new(0x30uLL);
  unk_25FA788 = xmmword_20B93B0;
  strcpy((char *)qword_25FA780, "ProactiveAlert_FasterRouteTitle_to_StreetName");
  byte_25FA7AF = 17;
  strcpy(byte_25FA798, "Proactive_Driving");
  strcpy(&byte_25FA7C7, "\n{RouteName}");
  strcpy((char *)&qword_25FA7B0, "_RouteName");
  byte_25FA7DF = 11;
  qword_25FA7E0 = (uint64_t)operator new(0x28uLL);
  unk_25FA7E8 = v270[1];
  strcpy((char *)qword_25FA7E0, "Pass_Traffic_Light_Spoken_Primary");
  qword_25FA7F8 = (uint64_t)operator new(0x20uLL);
  unk_25FA800 = v278;
  strcpy((char *)qword_25FA7F8, "Pass_Stop_Sign_Spoken_Primary");
  unk_25FA810 = operator new(0x20uLL);
  unk_25FA818 = v273;
  strcpy(unk_25FA810, "Pass_Roundabout_Spoken_Primary");
  strcpy(&byte_25FA83F, "\nBannerBody");
  strcpy(byte_25FA828, "BannerHead");
  strcpy(&byte_25FA857, "\nBannerDescription");
  byte_25FA86F = 17;
  strcpy(&byte_25FA887, "\n_Incident");
  strcpy((char *)&qword_25FA870, "VoiceAlert");
  strcpy(&byte_25FA89F, "\t_Area_Incident");
  byte_25FA8B7 = 14;
  byte_25FA8CF = 15;
  strcpy((char *)&qword_25FA8B8, "_Area_Incidents");
  strcpy(&byte_25FA8E7, "\t_Crash");
  strcpy((char *)&qword_25FA8D0, "_Accident");
  byte_25FA8FF = 6;
  byte_25FA917 = 16;
  strcpy((char *)&xmmword_25FA900, "_Congestion_Zone");
  strcpy(&byte_25FA92F, "\n_Environmental_Zone");
  strcpy((char *)&qword_25FA918, "_Toll_Zone");
  byte_25FA947 = 19;
  BYTE1(qword_25FA958) = 116;
  WORD1(qword_25FA958) = 0;
  HIDWORD(qword_25FA958) = 301989888;
  strcpy(byte_25FA960, "_Construction");
  strcpy((char *)&qword_25FA948, "_Incident_Accide");
  byte_25FA977 = 13;
  byte_25FA98F = 7;
  strcpy((char *)&dword_25FA978, "_Hazard");
  byte_25FA9A7 = 12;
  strcpy((char *)&qword_25FA990, "_LaneClosure");
  byte_25FA9BF = 12;
  strcpy((char *)&qword_25FA9A8, "_LaneTrailer");
  qmemcpy(&byte_25FA9D7, "\t_LaneTrailer", 13);
  strcpy((char *)&qword_25FA9C0, "_Shoulder");
  qword_25FA9E8 = 0x1500007200000000;
  *(void *)algn_25FA9E4 = *(void *)"_Shoulder";
  strcpy((char *)&xmmword_25FA9F0, "_Causing_Traffic_Delay");
  HIBYTE(word_25FAA06) = 22;
  byte_25FAA1F = 6;
  strcpy((char *)&dword_25FAA08, "_Timed");
  byte_25FAA37 = 12;
  strcpy((char *)&qword_25FAA20, "_HasDistance");
  byte_25FAA4F = 8;
  strcpy((char *)&qword_25FAA38, "_Closure");
  strcpy(&byte_25FAA67, "\n_BadRoad");
  strcpy((char *)&qword_25FAA50, "_NoReroute");
  byte_25FAA7F = 8;
  byte_25FAA97 = 12;
  strcpy((char *)&qword_25FAA80, "_TollTrailer");
  byte_25FAAAF = 12;
  strcpy((char *)&qword_25FAA98, "_BestTrailer");
  byte_25FAAC7 = 8;
  strcpy((char *)&qword_25FAAB0, "_Trailer");
  byte_25FAADF = 18;
  strcpy((char *)&xmmword_25FAAC8, "_Secondary_Trailer");
  byte_25FAAF7 = 8;
  strcpy((char *)&qword_25FAAE0, "_Savings");
  byte_25FAB0F = 8;
  strcpy((char *)&qword_25FAAF8, "_AltRoad");
  byte_25FAB27 = 6;
  strcpy((char *)&dword_25FAB10, "_Named");
  byte_25FAB3F = 6;
  strcpy((char *)&dword_25FAB28, "_NAMED");
  byte_25FAB57 = 22;
  strcpy((char *)&xmmword_25FAB40, "_Named_Suggested_Route");
  qword_25FAB70 = 0x1000000000000000;
  xmmword_25FAB60 = xmmword_20E81D0;
  byte_25FAB8F = 11;
  strcpy((char *)&qword_25FAB78, "_Speed_Trap");
  byte_25FABA7 = 4;
  strcpy((char *)&dword_25FAB90, "_UGI");
  byte_25FABBF = 12;
  strcpy((char *)&qword_25FABA8, "_Safer_Route");
  qword_25FABC0 = (uint64_t)operator new(0x20uLL);
  unk_25FABC8 = v270[0];
  strcpy((char *)qword_25FABC0, "BlockedRouteByBlockingIncident_");
  qword_25FABD8 = (uint64_t)operator new(0x28uLL);
  long long v272 = xmmword_20B9280;
  unk_25FABE0 = xmmword_20B9280;
  strcpy((char *)qword_25FABD8, "BlockedRouteByManeuverRestriction_");
  qword_25FABF0 = (uint64_t)operator new(0x20uLL);
  unk_25FABF8 = v273;
  strcpy((char *)qword_25FABF0, "BlockedRouteByTimeRestriction_");
  qword_25FAC08 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25FAC10 = xmmword_20B8FD0;
  strcpy((char *)qword_25FAC08, "SuggestRouteToAvoidBlockingIncident_");
  qword_25FAC20 = (uint64_t)operator new(0x30uLL);
  unk_25FAC28 = xmmword_20B9380;
  strcpy((char *)qword_25FAC20, "SuggestRouteToAvoidBlockingManeuverRestriction_");
  qword_25FAC38 = (uint64_t)operator new(0x30uLL);
  unk_25FAC40 = xmmword_20B93E0;
  strcpy((char *)qword_25FAC38, "SuggestRouteToAvoidBlockingTimeRestriction_");
  byte_25FAC67 = 1;
  word_25FAC50 = 95;
  strcpy((char *)&xmmword_25FAC68, "IncidentsCausingDelay_");
  HIBYTE(word_25FAC7E) = 22;
  qword_25FAC80 = (uint64_t)operator new(0x19uLL);
  unk_25FAC88 = v282;
  strcpy((char *)qword_25FAC80, "NonVotableRoadIncident_");
  byte_25FACAF = 20;
  strcpy(byte_25FAC98, "VotableRoadIncident_");
  byte_25FACC7 = 13;
  strcpy((char *)&qword_25FACB0, "AreaIncident_");
  byte_25FACDF = 15;
  strcpy((char *)&qword_25FACC8, "CongestionZone_");
  qword_25FACE0 = (uint64_t)operator new(0x20uLL);
  unk_25FACE8 = v283;
  strcpy((char *)qword_25FACE0, "EVModifiedChargingStops_");
  byte_25FAD0F = 13;
  strcpy((char *)&qword_25FACF8, "EVDisconnect_");
  byte_25FAD27 = 12;
  strcpy((char *)&qword_25FAD10, "EVReconnect_");
  qword_25FAD28 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25FAD30 = v280;
  strcpy((char *)qword_25FAD28, "EVOfflineToOnlineTransition_");
  byte_25FAD57 = 13;
  strcpy((char *)&qword_25FAD40, "EVOfflineSAR_");
  byte_25FAD6F = 21;
  strcpy((char *)&xmmword_25FAD58, "EVTowingNotSupported_");
  byte_25FAD87 = 18;
  strcpy(algn_25FAD70, "EVInfeasibleRoute_");
  qword_25FAD88 = (uint64_t)operator new(0x38uLL);
  *(_OWORD *)algn_25FAD90 = xmmword_20B8DF0;
  strcpy((char *)qword_25FAD88, "SuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_25FADA0 = (uint64_t)operator new(0x40uLL);
  unk_25FADA8 = xmmword_20B98C0;
  strcpy((char *)qword_25FADA0, "LCSuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_25FADB8 = (uint64_t)operator new(0x30uLL);
  unk_25FADC0 = v275;
  qmemcpy(v270, "ngStopsForEVInfeSuggestRouteAddi", sizeof(v270));
  strcpy((char *)qword_25FADB8, "SuggestRouteAddingStopsForEVInfeasibleRoute_");
  long long v266 = *(_OWORD *)"InfeasibleRoute_";
  qword_25FADD0 = (uint64_t)operator new(0x30uLL);
  *(_WORD *)&v265[34] = 0;
  *(_DWORD *)&v265[36] = 0;
  *(void *)&v265[40] = 0x8000000000000030;
  unk_25FADD8 = xmmword_20B9A80;
  strcpy(v265, "dingStopsForEVInLCSuggestRouteAd.");
  strcpy((char *)qword_25FADD0, "LCSuggestRouteAddingStopsForEVInfeasibleRoute_");
  qword_25FADE8 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_25FADF0 = v274;
  strcpy((char *)qword_25FADE8, "SuggestRouteAddingStopsToIncreaseDestSoc_");
  unint64_t v187 = operator new(0x30uLL);
  qword_25FAE00 = (uint64_t)v187;
  unk_25FAE08 = v275;
  *unint64_t v187 = v270[1];
  v187[1] = v270[0];
  *(_OWORD *)((char *)v187 + 28) = v266;
  *((unsigned char *)v187 + 44) = 0;
  qword_25FAE18 = (uint64_t)operator new(0x28uLL);
  unk_25FAE20 = v272;
  strcpy((char *)qword_25FAE18, "SuggestDetourWithHigherArrivalSOC_");
  uint64_t v188 = operator new(0x30uLL);
  qword_25FAE30 = (uint64_t)v188;
  unk_25FAE38 = *(_OWORD *)&v265[32];
  *(_OWORD *)uint64_t v188 = *(_OWORD *)&v265[16];
  *((_OWORD *)v188 + 1) = *(_OWORD *)v265;
  strcpy((char *)v188 + 30, "InfeasibleRoute_");
  qword_25FAE48 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25FAE50 = v277;
  strcpy((char *)qword_25FAE48, "SuggestRouteToDestForEVInfeasibleRoute_");
  qword_25FAE60 = (uint64_t)operator new(0x28uLL);
  unk_25FAE68 = v269;
  strcpy((char *)qword_25FAE60, "SuggestRouteRemovingStopsFromEVRoute_");
  qword_25FAE78 = (uint64_t)operator new(0x20uLL);
  unk_25FAE80 = v283;
  strcpy((char *)qword_25FAE78, "OfflineToOnlineNewRoute_");
  qword_25FAE90 = (uint64_t)operator new(0x40uLL);
  unk_25FAE98 = xmmword_20B98C0;
  strcpy((char *)qword_25FAE90, "SuggestDetourWithHigherArrivalSOCForInfeasibleUserRoute_");
  byte_25FAEBF = 20;
  strcpy(byte_25FAEA8, "LPR_OFFLINE_REROUTE_");
  byte_25FAED7 = 16;
  strcpy((char *)&xmmword_25FAEC0, "LPR_OFFLINE_SAR_");
  byte_25FAEEF = 20;
  strcpy(byte_25FAED8, "LPR_OFFLINE_REROUTE_");
  byte_25FAF07 = 16;
  strcpy((char *)&xmmword_25FAEF0, "LPR_OFFLINE_SAR_");
  byte_25FAF1F = 19;
  strcpy(byte_25FAF08, "SuggestFasterRoute_");
  qword_25FAF20 = (char *)operator new(0x20uLL);
  xmmword_25FAF28 = v281;
  strcpy(qword_25FAF20, "AreaIncidentSaferReroute_");
  byte_25FAF4F = 12;
  strcpy((char *)&qword_25FAF38, "_Remove_Stop");
  byte_25FAF67 = 13;
  strcpy((char *)&qword_25FAF50, "_Remove_Stops");
  strcpy(&byte_25FAF7F, "\t_Add_Stops");
  strcpy((char *)&qword_25FAF68, "_Add_Stop");
  strcpy(&byte_25FAF97, "\n_Change_Route");
  byte_25FAFAF = 13;
  byte_25FAFC7 = 15;
  strcpy((char *)&qword_25FAFB0, "_Different_Stop");
  byte_25FAFDF = 16;
  strcpy((char *)&xmmword_25FAFC8, "_Different_Stops");
  byte_25FAFF7 = 15;
  strcpy((char *)&qword_25FAFE0, "_EV_Remove_Stop");
  byte_25FB00F = 16;
  strcpy((char *)&xmmword_25FAFF8, "_EV_Remove_Stops");
  byte_25FB027 = 12;
  strcpy((char *)&qword_25FB010, "_EV_Add_Stop");
  byte_25FB03F = 13;
  strcpy((char *)&qword_25FB028, "_EV_Add_Stops");
  byte_25FB057 = 15;
  strcpy((char *)&qword_25FB040, "_EV_Low_Battery");
  byte_25FB06F = 14;
  strcpy((char *)&qword_25FB058, "_EV_Infeasible");
  byte_25FB087 = 15;
  strcpy((char *)&qword_25FB070, "_EV_Last_Chance");
  qword_25FB088 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25FB090 = v283;
  strcpy((char *)qword_25FB088, "_EV_Low_Battery_Add_Stop");
  uint64_t v189 = qword_25FAF88;
  qword_25FB0A0 = (uint64_t)operator new(0x20uLL);
  unk_25FB0A8 = v281;
  strcpy((char *)qword_25FB0A0, "_EV_Low_Battery_Add_Stops");
  qword_25FB0B8 = (uint64_t)operator new(0x19uLL);
  unk_25FB0C0 = v282;
  strcpy((char *)qword_25FB0B8, "_EV_Infeasible_Add_Stop");
  int v190 = byte_25FAF97;
  if (byte_25FAF97 >= 0) {
    size_t v191 = byte_25FAF97;
  }
  else {
    size_t v191 = v189;
  }
  unint64_t v192 = v191 + 14;
  if (v191 + 14 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v192 >= 0x17)
  {
    uint64_t v195 = (v192 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v192 | 7) != 0x17) {
      uint64_t v195 = v192 | 7;
    }
    uint64_t v196 = v195 + 1;
    uint64_t v197 = (char *)operator new(v195 + 1);
    qword_25FB0D8 = v191 + 14;
    unk_25FB0E0 = v196 | 0x8000000000000000;
    qword_25FB0D0 = (uint64_t)v197;
    qmemcpy(v197, "_EV_Infeasible", 14);
    int v193 = v197 + 14;
  }
  else
  {
    BYTE1(qword_25FB0D8) = 0;
    WORD1(qword_25FB0D8) = 0;
    HIDWORD(qword_25FB0D8) = 0;
    unk_25FB0E0 = 0;
    byte_25FB0E7 = v191 + 14;
    strcpy((char *)&qword_25FB0D0, "_EV_Infe");
    int v193 = (char *)&qword_25FB0D8 + 6;
    if (!v191)
    {
      char v194 = 1;
      goto LABEL_433;
    }
  }
  if (v190 >= 0) {
    uint64_t v198 = (uint64_t)&qword_25FAF80;
  }
  else {
    uint64_t v198 = 0x6F74535F6464415FLL;
  }
  memmove(v193, (const void *)v198, v191);
  char v194 = 0;
LABEL_433:
  v193[v191] = 0;
  unint64_t v199 = (char *)operator new(0x20uLL);
  qword_25FB0E8 = (uint64_t)v199;
  *(_OWORD *)algn_25FB0F0 = v283;
  *(void *)unint64_t v199 = qword_25FB070;
  *(void *)(v199 + 7) = *(uint64_t *)((char *)&qword_25FB070 + 7);
  *(void *)(v199 + 15) = qword_25FAF68;
  v199[23] = word_25FAF70;
  v199[24] = 0;
  unint64_t v200 = v191 + 15;
  if (v191 + 15 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v200 > 0x16)
  {
    uint64_t v202 = (v200 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v200 | 7) != 0x17) {
      uint64_t v202 = v200 | 7;
    }
    uint64_t v203 = v202 + 1;
    uint64_t v201 = (uint64_t *)operator new(v202 + 1);
    qword_25FB108 = v191 + 15;
    unk_25FB110 = v203 | 0x8000000000000000;
    qword_25FB100 = (uint64_t)v201;
  }
  else
  {
    uint64_t v201 = &qword_25FB100;
    qword_25FB108 = 0;
    unk_25FB110 = 0;
    qword_25FB100 = 0;
    byte_25FB117 = v191 + 15;
  }
  *uint64_t v201 = qword_25FB070;
  *(uint64_t *)((char *)v201 + 7) = *(uint64_t *)((char *)&qword_25FB070 + 7);
  long long v204 = (char *)v201 + 15;
  if ((v194 & 1) == 0)
  {
    if (v190 >= 0) {
      uint64_t v205 = &qword_25FAF80;
    }
    else {
      uint64_t v205 = (uint64_t *)qword_25FAF80;
    }
    memmove((char *)v201 + 15, v205, v191);
  }
  v204[v191] = 0;
  byte_25FB12F = 17;
  strcpy((char *)&xmmword_25FB118, "_EV_Forced_Detour");
  qword_25FB130 = (uint64_t)operator new(0x20uLL);
  unk_25FB138 = v281;
  strcpy((char *)qword_25FB130, "_EV_Higher_Arrival_Charge");
  qword_25FB148 = (uint64_t)operator new(0x28uLL);
  unk_25FB150 = xmmword_20B8FD0;
  strcpy((char *)qword_25FB148, "_EV_Infeasible_Higher_Arrival_Charge");
  byte_25FB177 = 16;
  strcpy(byte_25FB160, "_EV_Out_Of_Range");
  qword_25FB178 = (uint64_t)operator new(0x20uLL);
  unk_25FB180 = v276;
  strcpy((char *)qword_25FB178, "_EV_Last_Chance_Take_Detour");
  strcpy(byte_25FB190, "_EV_Forced_Modify_Stop");
  HIBYTE(word_25FB1A6) = 22;
  qword_25FB1A8 = (uint64_t)operator new(0x19uLL);
  unk_25FB1B0 = v282;
  strcpy((char *)qword_25FB1A8, "_EV_Forced_Modify_Stops");
  byte_25FB1D7 = 19;
  strcpy(byte_25FB1C0, "_EV_Forced_Add_Stop");
  byte_25FB1EF = 20;
  strcpy((char *)&xmmword_25FB1D8, "_EV_Forced_Add_Stops");
  byte_25FB207 = 21;
  strcpy(byte_25FB1F0, "_EV_Battery_Info_Lost");
  qword_25FB208 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25FB210 = v281;
  strcpy((char *)qword_25FB208, "_EV_Battery_Info_Restored");
  qword_25FB220 = (uint64_t)operator new(0x20uLL);
  unk_25FB228 = v283;
  strcpy((char *)qword_25FB220, "_EV_Towing_Not_Supported");
  qword_25FB238 = (uint64_t)operator new(0x28uLL);
  unk_25FB240 = v271;
  strcpy((char *)qword_25FB238, "_EV_Offline_to_Online_Transition");
  byte_25FB267 = 15;
  strcpy((char *)&qword_25FB250, "_EV_Offline_SAR");
  qword_25FB268 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25FB270 = v280;
  strcpy((char *)qword_25FB268, "_Offline_to_Online_New_Route");
  byte_25FB297 = 12;
  strcpy((char *)&qword_25FB280, "BannerButton");
  byte_25FB2AF = 8;
  strcpy((char *)&qword_25FB298, "_Dismiss");
  byte_25FB2C7 = 3;
  word_25FB2B0 = 20319;
  byte_25FB2B2 = 75;
  byte_25FB2B3 = 0;
  byte_25FB2DF = 11;
  strcpy((char *)&qword_25FB2C8, "_Still_Here");
  byte_25FB2F7 = 8;
  strcpy((char *)&qword_25FB2E0, "_Cleared");
  qmemcpy(&byte_25FB30F, "\nBannerButton", 13);
  strcpy((char *)&qword_25FB2F8, "_No_Thanks");
  uint64_t v206 = qword_25FB288;
  qword_25FB320 = 0x1400000000000000;
  *(void *)algn_25FB31C = 0x7373696D7369445FLL;
  qword_25FB338 = 0xF00000000000000;
  qword_25FB330 = 0x4B4F5F6E6F7474;
  int v207 = byte_25FB027;
  if (byte_25FB027 >= 0) {
    size_t v208 = byte_25FB027;
  }
  else {
    size_t v208 = qword_25FB018;
  }
  unint64_t v209 = v208 + 12;
  qword_25FB328 = *(void *)"BannerButton";
  if (v208 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v209 >= 0x17)
  {
    uint64_t v211 = (v209 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v209 | 7) != 0x17) {
      uint64_t v211 = v209 | 7;
    }
    uint64_t v212 = v211 + 1;
    long long v213 = (char *)operator new(v211 + 1);
    qword_25FB348 = v208 + 12;
    unk_25FB350 = v212 | 0x8000000000000000;
    qword_25FB340 = (uint64_t)v213;
    *((_DWORD *)v213 + 2) = 1852798068;
    *(void *)long long v213 = *(void *)"BannerButton";
    uint64_t v210 = v213 + 12;
  }
  else
  {
    BYTE5(qword_25FB348) = 0;
    HIWORD(qword_25FB348) = 0;
    unk_25FB350 = 0;
    byte_25FB357 = v208 + 12;
    strcpy((char *)&qword_25FB340, "BannerButton");
    uint64_t v210 = (char *)&qword_25FB348 + 4;
    if (!v208) {
      goto LABEL_458;
    }
  }
  if (v207 >= 0) {
    int v214 = &qword_25FB010;
  }
  else {
    int v214 = (uint64_t *)qword_25FB010;
  }
  memmove(v210, v214, v208);
LABEL_458:
  v210[v208] = 0;
  int v215 = byte_25FB03F;
  if (byte_25FB03F >= 0) {
    size_t v216 = byte_25FB03F;
  }
  else {
    size_t v216 = unk_25FB030;
  }
  unint64_t v217 = v216 + 12;
  if (v216 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v217 >= 0x17)
  {
    uint64_t v219 = (v217 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v217 | 7) != 0x17) {
      uint64_t v219 = v217 | 7;
    }
    uint64_t v220 = v219 + 1;
    char v221 = (char *)operator new(v219 + 1);
    qword_25FB360 = v216 + 12;
    unk_25FB368 = v220 | 0x8000000000000000;
    qword_25FB358 = (uint64_t)v221;
    *(void *)char v221 = qword_25FB280;
    *((_DWORD *)v221 + 2) = qword_25FB288;
    uint64_t v218 = v221 + 12;
  }
  else
  {
    qword_25FB360 = 0;
    unk_25FB368 = 0;
    byte_25FB36F = v216 + 12;
    LODWORD(qword_25FB360) = qword_25FB288;
    qword_25FB358 = qword_25FB280;
    uint64_t v218 = (char *)&qword_25FB360 + 4;
    if (!v216) {
      goto LABEL_472;
    }
  }
  if (v215 >= 0) {
    int v222 = &qword_25FB028;
  }
  else {
    int v222 = (uint64_t *)qword_25FB028;
  }
  memmove(v218, v222, v216);
LABEL_472:
  v218[v216] = 0;
  int v223 = byte_25FAFF7;
  if (byte_25FAFF7 >= 0) {
    size_t v224 = byte_25FAFF7;
  }
  else {
    size_t v224 = unk_25FAFE8;
  }
  unint64_t v225 = v224 + 12;
  if (v224 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v225 >= 0x17)
  {
    uint64_t v227 = (v225 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v225 | 7) != 0x17) {
      uint64_t v227 = v225 | 7;
    }
    uint64_t v228 = v227 + 1;
    uint64_t v229 = (char *)operator new(v227 + 1);
    qword_25FB378 = v224 + 12;
    unk_25FB380 = v228 | 0x8000000000000000;
    qword_25FB370 = (uint64_t)v229;
    *(void *)uint64_t v229 = qword_25FB280;
    *((_DWORD *)v229 + 2) = qword_25FB288;
    uint64_t v226 = v229 + 12;
  }
  else
  {
    qword_25FB378 = 0;
    unk_25FB380 = 0;
    byte_25FB387 = v224 + 12;
    LODWORD(qword_25FB378) = qword_25FB288;
    qword_25FB370 = qword_25FB280;
    uint64_t v226 = (char *)&qword_25FB378 + 4;
    if (!v224) {
      goto LABEL_486;
    }
  }
  if (v223 >= 0) {
    int v230 = &qword_25FAFE0;
  }
  else {
    int v230 = (uint64_t *)qword_25FAFE0;
  }
  memmove(v226, v230, v224);
LABEL_486:
  v226[v224] = 0;
  int v231 = byte_25FB297;
  if (byte_25FB297 >= 0) {
    size_t v232 = byte_25FB297;
  }
  else {
    size_t v232 = v206;
  }
  int v233 = byte_25FB00F;
  if (byte_25FB00F >= 0) {
    size_t v234 = byte_25FB00F;
  }
  else {
    size_t v234 = *((void *)&xmmword_25FAFF8 + 1);
  }
  unint64_t v235 = v234 + v232;
  if (v234 + v232 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v235 <= 0x16)
  {
    long long v236 = &qword_25FB388;
    qword_25FB390 = 0;
    unk_25FB398 = 0;
    qword_25FB388 = 0;
    byte_25FB39F = v234 + v232;
    if (!v232) {
      goto LABEL_499;
    }
    goto LABEL_495;
  }
  uint64_t v243 = (v235 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v235 | 7) != 0x17) {
    uint64_t v243 = v235 | 7;
  }
  uint64_t v244 = v243 + 1;
  long long v236 = (uint64_t *)operator new(v243 + 1);
  qword_25FB390 = v234 + v232;
  unk_25FB398 = v244 | 0x8000000000000000;
  qword_25FB388 = (uint64_t)v236;
  if (v232)
  {
LABEL_495:
    if (v231 >= 0) {
      long long v237 = &qword_25FB280;
    }
    else {
      long long v237 = (uint64_t *)qword_25FB280;
    }
    memmove(v236, v237, v232);
  }
LABEL_499:
  long long v238 = (char *)v236 + v232;
  if (v234)
  {
    if (v233 >= 0) {
      unint64_t v239 = &xmmword_25FAFF8;
    }
    else {
      unint64_t v239 = (long long *)xmmword_25FAFF8;
    }
    memmove(v238, v239, v234);
  }
  v238[v234] = 0;
  unint64_t v240 = v232 + 11;
  if (v232 + 11 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v240 >= 0x17)
  {
    uint64_t v245 = (v240 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v240 | 7) != 0x17) {
      uint64_t v245 = v240 | 7;
    }
    uint64_t v246 = v245 + 1;
    unint64_t v241 = (uint64_t *)operator new(v245 + 1);
    qword_25FB3A8 = v232 + 11;
    unk_25FB3B0 = v246 | 0x8000000000000000;
    qword_25FB3A0 = (uint64_t)v241;
  }
  else
  {
    unint64_t v241 = &qword_25FB3A0;
    qword_25FB3A8 = 0;
    unk_25FB3B0 = 0;
    qword_25FB3A0 = 0;
    byte_25FB3B7 = v232 + 11;
    if (!v232)
    {
      *(_DWORD *)((char *)&qword_25FB3A0 + 7) = *(_DWORD *)((char *)&qword_25FB2C8 + 7);
      qword_25FB3A0 = qword_25FB2C8;
      BYTE3(qword_25FB3A8) = 0;
      LOBYTE(v242) = 8;
      goto LABEL_520;
    }
  }
  if (v231 >= 0) {
    long long v247 = &qword_25FB280;
  }
  else {
    long long v247 = (uint64_t *)qword_25FB280;
  }
  memmove(v241, v247, v232);
  int v248 = (char *)v241 + v232;
  int v249 = *(_DWORD *)((char *)&qword_25FB2C8 + 7);
  *(void *)int v248 = qword_25FB2C8;
  *(_DWORD *)(v248 + 7) = v249;
  v248[11] = 0;
  unint64_t v242 = v232 + 8;
  if (v232 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v242 <= 0x16)
  {
LABEL_520:
    long long v250 = &qword_25FB3B8;
    qword_25FB3C0 = 0;
    unk_25FB3C8 = 0;
    qword_25FB3B8 = 0;
    byte_25FB3CF = v242;
    if (!v232) {
      goto LABEL_525;
    }
    goto LABEL_521;
  }
  uint64_t v263 = (v242 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v242 | 7) != 0x17) {
    uint64_t v263 = v242 | 7;
  }
  uint64_t v264 = v263 + 1;
  long long v250 = (uint64_t *)operator new(v263 + 1);
  qword_25FB3C0 = v232 + 8;
  unk_25FB3C8 = v264 | 0x8000000000000000;
  qword_25FB3B8 = (uint64_t)v250;
  if (v232)
  {
LABEL_521:
    if (v231 >= 0) {
      uint64_t v251 = &qword_25FB280;
    }
    else {
      uint64_t v251 = (uint64_t *)qword_25FB280;
    }
    memmove(v250, v251, v232);
  }
LABEL_525:
  int v252 = (char *)v250 + v232;
  *(void *)int v252 = qword_25FB2E0;
  v252[8] = 0;
  int v253 = byte_25FB30F;
  if (byte_25FB30F >= 0) {
    size_t v254 = byte_25FB30F;
  }
  else {
    size_t v254 = qword_25FB300;
  }
  unint64_t v255 = v254 + v232;
  if (v254 + v232 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v255 <= 0x16)
  {
    long long v256 = &qword_25FB3D0;
    qword_25FB3D8 = 0;
    unk_25FB3E0 = 0;
    qword_25FB3D0 = 0;
    byte_25FB3E7 = v254 + v232;
    if (!v232) {
      goto LABEL_535;
    }
    goto LABEL_531;
  }
  uint64_t v261 = (v255 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v255 | 7) != 0x17) {
    uint64_t v261 = v255 | 7;
  }
  uint64_t v262 = v261 + 1;
  long long v256 = (uint64_t *)operator new(v261 + 1);
  qword_25FB3D8 = v254 + v232;
  unk_25FB3E0 = v262 | 0x8000000000000000;
  qword_25FB3D0 = (uint64_t)v256;
  if (v232)
  {
LABEL_531:
    if (v231 >= 0) {
      long long v257 = &qword_25FB280;
    }
    else {
      long long v257 = (uint64_t *)qword_25FB280;
    }
    memmove(v256, v257, v232);
  }
LABEL_535:
  char v258 = (char *)v256 + v232;
  if (v254)
  {
    if (v253 >= 0) {
      uint64_t v259 = &qword_25FB2F8;
    }
    else {
      uint64_t v259 = (uint64_t *)qword_25FB2F8;
    }
    memmove(v258, v259, v254);
  }
  v258[v254] = 0;
  strcpy(&byte_25FB3FF, "\n{newroute}");
  strcpy((char *)&qword_25FB3E8, "{roadname}");
  strcpy(&byte_25FB417, "\n{count}");
  byte_25FB42F = 7;
  strcpy(&byte_25FB447, "\n{dur}");
  strcpy((char *)&qword_25FB430, "{duration}");
  byte_25FB45F = 5;
  qword_25FB460 = (uint64_t)operator new(0x20uLL);
  unk_25FB468 = v279;
  strcpy((char *)qword_25FB460, "{PleaseProceedWithCaution}");
  byte_25FB48F = 15;
  strcpy((char *)&qword_25FB478, "{UserRouteName}");
  byte_25FB4A7 = 20;
  strcpy((char *)&xmmword_25FB490, "{SuggestedRouteName}");
  byte_25FB4BF = 18;
  strcpy(byte_25FB4A8, "Speed_Camera_Ahead");
  qword_25FB4C0 = (uint64_t)operator new(0x20uLL);
  unk_25FB4C8 = v278;
  strcpy((char *)qword_25FB4C0, "Red_Light_Camera_Ahead_Spoken");
  qword_25FB4D8 = (uint64_t)operator new(0x20uLL);
  unk_25FB4E0 = v278;
  strcpy((char *)qword_25FB4D8, "Stop_Sign_Camera_Ahead_Spoken");
  qword_25FB4F0 = (uint64_t)operator new(0x28uLL);
  unk_25FB4F8 = v272;
  strcpy((char *)qword_25FB4F0, "Speed_Camera_Ahead_Multiple_Spoken");
  qword_25FB508 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25FB510 = v267;
  strcpy((char *)qword_25FB508, "Red_Light_Camera_Ahead_Multiple_Spoken");
  qword_25FB520 = (uint64_t)operator new(0x20uLL);
  unk_25FB528 = v280;
  strcpy((char *)qword_25FB520, "Camera_Ahead_Multiple_Spoken");
  qword_25FB538 = (uint64_t)operator new(0x30uLL);
  unk_25FB540 = v268;
  strcpy((char *)qword_25FB538, "Red_Light_Camera_Speed_Camera_Ahead_Spoken");
  qword_25FB550 = (char *)operator new(0x30uLL);
  strcpy(qword_25FB550, "Stop_Sign_Camera_Speed_Camera_Ahead_Spoken");
  byte_25FB57F = 16;
  xmmword_25FB558 = v268;
  strcpy(byte_25FB568, "_Speed_Limit_Mph");
  byte_25FB597 = 16;
  strcpy(byte_25FB580, "_Speed_Limit_Kph");
  byte_25FB5AF = 11;
  strcpy((char *)&qword_25FB598, "Watch_Speed");
  byte_25FB5C7 = 4;
  strcpy((char *)&dword_25FB5B0, "_One");
  byte_25FB5DF = 4;
  strcpy((char *)&dword_25FB5C8, "_Two");
  byte_25FB5F7 = 4;
  strcpy((char *)&dword_25FB5E0, "_Few");
  byte_25FB60F = 5;
  strcpy((char *)&dword_25FB5F8, "_Many");
  byte_25FB627 = 6;
  strcpy((char *)&dword_25FB610, "_Other");
  byte_25FB63F = 4;
  strcpy((char *)&dword_25FB628, "_ONE");
  byte_25FB657 = 7;
  strcpy((char *)&dword_25FB640, "{Speed}");
  byte_25FB66F = 8;
  strcpy((char *)&qword_25FB658, "Dismount");
  byte_25FB687 = 4;
  strcpy((char *)&dword_25FB670, "Walk");
  byte_25FB69F = 5;
  strcpy((char *)&dword_25FB688, "Mount");
  byte_25FB6B7 = 7;
  strcpy((char *)&dword_25FB6A0, "Remount");
  strcpy(&byte_25FB6CF, "\t_Crosswalk");
  strcpy((char *)&qword_25FB6B8, "Walk_Road");
  strcpy(&byte_25FB6E7, "\n_PLURAL");
  byte_25FB6FF = 7;
  strcpy(&byte_25FB717, "\n{description1}");
  strcpy((char *)&qword_25FB700, "_SECONDARY");
  byte_25FB72F = 14;
  byte_25FB747 = 14;
  strcpy((char *)&qword_25FB730, "{description2}");
  byte_25FB75F = 21;
  strcpy((char *)&xmmword_25FB748, "TWO_ROAD_DESCRIPTIONS");
  byte_25FB777 = 17;
  strcpy((char *)&xmmword_25FB760, "{SlopePercentage}");
  byte_25FB78F = 15;
  strcpy((char *)&qword_25FB778, "_Protected_Lane");
  strcpy(&byte_25FB7A7, "\n_Paved_Path");
  strcpy((char *)&qword_25FB790, "_Bike_Path");
  byte_25FB7BF = 11;
  byte_25FB7D7 = 15;
  strcpy((char *)&qword_25FB7C0, "_Dedicated_Lane");
  byte_25FB7EF = 12;
  strcpy((char *)&qword_25FB7D8, "_Shared_Path");
  strcpy(&byte_25FB807, "\n_UnnamedRoad");
  strcpy((char *)&qword_25FB7F0, "_Bike_Lane");
  byte_25FB81F = 12;
  byte_25FB837 = 5;
  strcpy((char *)&dword_25FB820, "_Path");
  byte_25FB84F = 6;
  strcpy((char *)&dword_25FB838, "_Trail");
  strcpy(&byte_25FB867, "\t_Plaza");
  strcpy((char *)&qword_25FB850, "_Sidewalk");
  byte_25FB87F = 6;
  byte_25FB897 = 15;
  strcpy((char *)&qword_25FB880, "_Moving_Walkway");
  byte_25FB8AF = 14;
  strcpy((char *)&qword_25FB898, "Two_Stage_Turn");
  byte_25FB8C7 = 16;
  strcpy((char *)&xmmword_25FB8B0, "{OptionalPeriod}");
  byte_25FB8DF = 18;
  strcpy((char *)&xmmword_25FB8C8, "Advisory_Separator");
  byte_25FB8F7 = 6;
  strcpy((char *)&dword_25FB8E0, "Period");
  byte_25FB90F = 21;
  strcpy((char *)&xmmword_25FB8F8, "Advisory_Title_Notice");
  strcpy((char *)&xmmword_25FB910, "Advisory_Title_Notices");
  HIBYTE(word_25FB926) = 22;
  byte_25FB93F = 7;
  strcpy((char *)&dword_25FB928, "_DETAIL");
  byte_25FB957 = 17;
  strcpy((char *)&xmmword_25FB940, "_LONG_REGION_LIST");
  byte_25FB96F = 16;
  strcpy((char *)&xmmword_25FB958, "Advisory_Grouped");
  byte_25FB987 = 11;
  strcpy((char *)&qword_25FB970, "_Advisories");
  qword_25FB988 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25FB990 = v276;
  strcpy((char *)qword_25FB988, "Advisory_WILDFIRE_METADATA_");
  byte_25FB9B7 = 8;
  strcpy((char *)&qword_25FB9A0, "Advisory");
  byte_25FB9CF = 13;
  strcpy((char *)&qword_25FB9B8, "MPR_NUM_STOPS");
  byte_25FB9E7 = 17;
  strcpy(algn_25FB9D0, "EV_CHARGE_STATION");
  byte_25FB9FF = 11;
  strcpy((char *)&qword_25FB9E8, "_NAMED_CITY");
  byte_25FBA17 = 5;
  strcpy((char *)&dword_25FBA00, "_Stop");
  strcpy(&byte_25FBA2F, "\n{StopsCount}");
  strcpy((char *)&qword_25FBA18, "{CityName}");
  byte_25FBA47 = 12;
  byte_25FBA5F = 11;
  strcpy((char *)&qword_25FBA48, "_With_Other");
  byte_25FBA77 = 15;
  strcpy((char *)&qword_25FBA60, "{DepartureTime}");
  qword_25FBA78 = (uint64_t)operator new(0x28uLL);
  unk_25FBA80 = v277;
  strcpy((char *)qword_25FBA78, "Ending_Charge_Station_Port_Availability");
  qword_25FBA90 = (uint64_t)operator new(0x28uLL);
  unk_25FBA98 = v269;
  strcpy((char *)qword_25FBA90, "Ending_Charge_Station_No_Availability");
  qword_25FBAA8 = (uint64_t)operator new(0x28uLL);
  unk_25FBAB0 = v272;
  strcpy((char *)qword_25FBAA8, "Ending_Charge_Station_No_Real_Time");
  byte_25FBAD7 = 16;
  strcpy(byte_25FBAC0, "{AvailablePorts}");
  byte_25FBAEF = 12;
  strcpy((char *)&qword_25FBAD8, "{TotalPorts}");
  byte_25FBB07 = 14;
  strcpy((char *)&qword_25FBAF0, "{ManeuverIcon}");
  qword_25FBB08 = (uint64_t)operator new(0x38uLL);
  *(_OWORD *)algn_25FBB10 = xmmword_20B9A60;
  strcpy((char *)qword_25FBB08, "Walking_Distance_ManeuverIcon_PrimaryInstruction");
  qword_25FBB20 = (uint64_t)operator new(0x20uLL);
  unk_25FBB28 = v276;
  strcpy((char *)qword_25FBB20, "Walking_Destination_Unnamed");
  qword_25FBB38 = (uint64_t)operator new(0x20uLL);
  unk_25FBB40 = v278;
  strcpy((char *)qword_25FBB38, "TrafficDelay_Label_Title_Sign");
  qword_25FBB50 = (uint64_t)operator new(0x20uLL);
  unk_25FBB58 = v280;
  strcpy((char *)qword_25FBB50, "Special_Guidance_Instruction");
  byte_25FBB7F = 2;
  strcpy((char *)&word_25FBB68, "CZ");
  byte_25FBB97 = 3;
  dword_25FBB80 = 5919811;
  unk_25FBBAF = 3;
  dword_25FBB98 = 6243649;
  byte_25FBBC7 = 0;
  byte_25FBBDF = 7;
  strcpy((char *)&dword_25FBBC8, "TRANSIT");
  byte_25FBBF7 = 7;
  strcpy((char *)&dword_25FBBE0, "OFFLINE");
  qword_25FBBF8 = (uint64_t)operator new(0x28uLL);
  unk_25FBC00 = v267;
  strcpy((char *)qword_25FBBF8, "Advisory_Card_French_Climate_Law_Title");
  qword_25FBC10 = (uint64_t)operator new(0x30uLL);
  unk_25FBC18 = xmmword_20B93C0;
  strcpy((char *)qword_25FBC10, "Advisory_Card_French_Climate_Law_Details");
  qword_25FBC28 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_25FBC30 = v274;
  strcpy((char *)qword_25FBC28, "French_Climate_Law_Metadata_Weblink_Title");
  qword_25FBC40 = (uint64_t)operator new(0x20uLL);
  unk_25FBC48 = v280;
  strcpy((char *)qword_25FBC40, "{ClimateLawLearnMoreWeblink}");
  byte_25FBC6F = 3;
  dword_25FBC58 = 4280902;
  qword_25FBC70 = (char *)operator new(0x70uLL);
  xmmword_25FBC78 = xmmword_20E81E0;
  strcpy(qword_25FBC70, "https://www.vie-publique.fr/loi/278460-loi-22-aout-2021-climat-et-resilience-convention-citoyenne-climat");
  strcpy(&byte_25FBCB7, "\t_RedLightCamera");
  strcpy((char *)&qword_25FBCA0, "_StopSign");
  byte_25FBC9F = 13;
  strcpy((char *)&qword_25FBC88, "_TrafficLight");
  byte_25FBD17 = 9;
  strcpy((char *)&qword_25FBD00, "_OffRoute");
  byte_25FBCCF = 15;
  qword_25FBCD0 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)&qword_25FBCD8 = v283;
  strcpy((char *)qword_25FBCD0, "_InstantSpeedLimitCamera");
  qword_25FBCE8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)&qword_25FBCF0 = v273;
  strcpy((char *)qword_25FBCE8, "_InstantSpeedLimitCameraShield");
  return *(double *)"imitCameraShield";
}

void sub_E5CAF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x3C7]) < 0)
  {
    operator delete((void *)STACK[0x3B0]);
    if ((SLOBYTE(STACK[0x3AF]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SLOBYTE(STACK[0x3AF]) & 0x80000000) == 0)
  {
LABEL_3:
    if (SLOBYTE(STACK[0x397]) < 0) {
      goto LABEL_4;
    }
    goto LABEL_18;
  }
  operator delete((void *)STACK[0x398]);
  if (SLOBYTE(STACK[0x397]) < 0)
  {
LABEL_4:
    operator delete((void *)STACK[0x380]);
    if ((SLOBYTE(STACK[0x37F]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  if ((SLOBYTE(STACK[0x37F]) & 0x80000000) == 0)
  {
LABEL_5:
    if (SLOBYTE(STACK[0x367]) < 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete((void *)STACK[0x368]);
  if (SLOBYTE(STACK[0x367]) < 0)
  {
LABEL_6:
    operator delete((void *)STACK[0x350]);
    if ((SLOBYTE(STACK[0x34F]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  if ((SLOBYTE(STACK[0x34F]) & 0x80000000) == 0)
  {
LABEL_7:
    if (SLOBYTE(STACK[0x337]) < 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete((void *)STACK[0x338]);
  if (SLOBYTE(STACK[0x337]) < 0)
  {
LABEL_8:
    operator delete((void *)STACK[0x320]);
    if ((SLOBYTE(STACK[0x31F]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  if ((SLOBYTE(STACK[0x31F]) & 0x80000000) == 0)
  {
LABEL_9:
    if (SLOBYTE(STACK[0x307]) < 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete((void *)STACK[0x308]);
  if (SLOBYTE(STACK[0x307]) < 0)
  {
LABEL_10:
    operator delete((void *)STACK[0x2F0]);
    if ((SLOBYTE(STACK[0x2EF]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  if ((SLOBYTE(STACK[0x2EF]) & 0x80000000) == 0)
  {
LABEL_11:
    if (SLOBYTE(STACK[0x2D7]) < 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete((void *)STACK[0x2D8]);
  if (SLOBYTE(STACK[0x2D7]) < 0)
  {
LABEL_12:
    operator delete((void *)STACK[0x2C0]);
    if ((SLOBYTE(STACK[0x2BF]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  if ((SLOBYTE(STACK[0x2BF]) & 0x80000000) == 0)
  {
LABEL_13:
    if (SLOBYTE(STACK[0x2A7]) < 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete((void *)STACK[0x2A8]);
  if (SLOBYTE(STACK[0x2A7]) < 0)
  {
LABEL_14:
    operator delete((void *)STACK[0x290]);
    if (SLOBYTE(STACK[0x28F]) < 0)
    {
LABEL_36:
      operator delete((void *)STACK[0x278]);
      if ((SLOBYTE(STACK[0x277]) & 0x80000000) == 0)
      {
LABEL_37:
        if (SLOBYTE(STACK[0x25F]) < 0)
        {
LABEL_38:
          operator delete((void *)STACK[0x248]);
          if ((SLOBYTE(STACK[0x247]) & 0x80000000) == 0)
          {
LABEL_39:
            if (SLOBYTE(STACK[0x22F]) < 0)
            {
LABEL_40:
              operator delete((void *)STACK[0x218]);
              if ((SLOBYTE(STACK[0x217]) & 0x80000000) == 0)
              {
LABEL_41:
                if (a74 < 0) {
                  goto LABEL_42;
                }
                goto LABEL_44;
              }
LABEL_34:
              operator delete((void *)STACK[0x200]);
              if (a74 < 0)
              {
LABEL_42:
                operator delete(a73);
                if ((a72 & 0x80000000) == 0) {
                  goto LABEL_43;
                }
                goto LABEL_45;
              }
LABEL_44:
              if ((a72 & 0x80000000) == 0) {
LABEL_43:
              }
                _Unwind_Resume(a1);
LABEL_45:
              operator delete(a67);
              _Unwind_Resume(a1);
            }
LABEL_33:
            if ((SLOBYTE(STACK[0x217]) & 0x80000000) == 0) {
              goto LABEL_41;
            }
            goto LABEL_34;
          }
LABEL_32:
          operator delete((void *)STACK[0x230]);
          if (SLOBYTE(STACK[0x22F]) < 0) {
            goto LABEL_40;
          }
          goto LABEL_33;
        }
LABEL_31:
        if ((SLOBYTE(STACK[0x247]) & 0x80000000) == 0) {
          goto LABEL_39;
        }
        goto LABEL_32;
      }
LABEL_30:
      operator delete((void *)STACK[0x260]);
      if (SLOBYTE(STACK[0x25F]) < 0) {
        goto LABEL_38;
      }
      goto LABEL_31;
    }
LABEL_29:
    if ((SLOBYTE(STACK[0x277]) & 0x80000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_30;
  }
LABEL_28:
  if (SLOBYTE(STACK[0x28F]) < 0) {
    goto LABEL_36;
  }
  goto LABEL_29;
}